
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct 11 07:38:20 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 b8 94	jsr $94b8			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 18 87	jsr $8718			jsr 	RunDemos
.8013	20 9a 8e	jsr $8e9a			jsr 	NewCommand 					; erase current program
.8016	20 3d a1	jsr $a13d			jsr 	BackloadProgram
.8019	4c f6 89	jmp $89f6			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1316."
>8064	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>8074	32 2e 20 42 75 69 6c 64 20 31 33 31 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24					GXSpritePage = 24
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gzTemp0+1
.808d	80 2c		bra $80bb			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8097	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a1	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 29 06	sta $0629			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80af	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80b1					_GDCopy2:
.80b1	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80b4	9d 31 06	sta $0631,x			sta 	gxX0,x
.80b7	ca		dex				dex
.80b8	10 f7		bpl $80b1			bpl 	_GDCopy2
.80ba	68		pla				pla 								; get command back
.80bb					_GDExecuteA:
.80bb	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80bd	aa		tax				tax
.80be	7c f0 80	jmp ($80f0,x)			jmp 	(GRVectorTable,x)
.80c1					GXMove:
.80c1	60		rts				rts
.80c2					GRUndefined:
>80c2	db						.byte 	$DB 						; causes a break in the emulator
.80c3					GXSetColourMode:
.80c3	a6 36		ldx $36				ldx 	gzTemp0
.80c5	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.80c8	a5 37		lda $37				lda 	gzTemp0+1 								;
.80ca	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.80cd	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.80cf	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.80d2	ae 3c 06	ldx $063c			ldx 	gxColour
.80d5	8e 3d 06	stx $063d			stx 	gxEORValue
.80d8	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.80da	90 03		bcc $80df			bcc 	_GXSDCNotAndColour
.80dc	8e 3e 06	stx $063e			stx 	gxANDValue
.80df					_GXSDCNotAndColour:
.80df	d0 03		bne $80e4			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.80e1	9c 3d 06	stz $063d			stz 	gxEORValue
.80e4					_GXSDCNotAnd:
.80e4	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.80e5	90 08		bcc $80ef			bcc 	_GXSDCNoFlip
.80e7	ad 3e 06	lda $063e			lda	 	gxANDValue
.80ea	49 ff		eor #$ff			eor 	#$FF
.80ec	8d 3e 06	sta $063e			sta 	gxANDValue
.80ef					_GXSDCNoFlip:
.80ef	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

.80f0					GRVectorTable:
>80f0	c2 80					.word	GRUndefined              ; $00
>80f2	c2 80					.word	GRUndefined              ; $01
>80f4	75 82					.word	GXClearBitmap            ; $02 Clear
>80f6	c3 80					.word	GXSetColourMode          ; $03 Colour
>80f8	57 85					.word	GXFontHandler            ; $04 DrawFont
>80fa	9f 85					.word	GXSpriteHandler          ; $05 DrawSprite
>80fc	c2 80					.word	GRUndefined              ; $06
>80fe	c2 80					.word	GRUndefined              ; $07
>8100	c2 80					.word	GRUndefined              ; $08
>8102	c2 80					.word	GRUndefined              ; $09
>8104	c2 80					.word	GRUndefined              ; $0a
>8106	c2 80					.word	GRUndefined              ; $0b
>8108	c2 80					.word	GRUndefined              ; $0c
>810a	c2 80					.word	GRUndefined              ; $0d
>810c	c2 80					.word	GRUndefined              ; $0e
>810e	c2 80					.word	GRUndefined              ; $0f
>8110	c1 80					.word	GXMove                   ; $10 Move
>8112	bf 82					.word	GXLine                   ; $11 Line
>8114	ec 83					.word	GXFrameRectangle         ; $12 FrameRect
>8116	e9 83					.word	GXFillRectangle          ; $13 FillRect
>8118	34 81					.word	GXFrameCircle            ; $14 FrameCircle
>811a	30 81					.word	GXFillCircle             ; $15 FillCircle
>811c	c2 80					.word	GRUndefined              ; $16
>811e	c2 80					.word	GRUndefined              ; $17
>8120	c2 80					.word	GRUndefined              ; $18
>8122	c2 80					.word	GRUndefined              ; $19
>8124	c2 80					.word	GRUndefined              ; $1a
>8126	c2 80					.word	GRUndefined              ; $1b
>8128	c2 80					.word	GRUndefined              ; $1c
>812a	c2 80					.word	GRUndefined              ; $1d
>812c	c2 80					.word	GRUndefined              ; $1e
>812e	c2 80					.word	GRUndefined              ; $1f

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8130					GXFillCircle:
.8130	a9 ff		lda #$ff			lda 	#255
.8132	80 02		bra $8136			bra 	GXCircle
.8134					GXFrameCircle:
.8134	a9 00		lda #$00			lda 	#0
.8136					GXCircle:
.8136	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.8139	20 d7 86	jsr $86d7			jsr 	GXSortXY 					; topleft/bottomright
.813c	20 0c 86	jsr $860c			jsr 	GXOpenBitmap 				; start drawing
.813f	20 2e 82	jsr $822e			jsr 	GXCircleSetup 				; set up for drawing
.8142	9c 46 06	stz $0646			stz 	gYChanged
.8145					_GXCircleDraw:
.8145	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.8148	cd 44 06	cmp $0644			cmp 	gY
.814b	90 09		bcc $8156			bcc 	_GXCircleContinue
.814d	d0 03		bne $8152			bne 	_GXNoLast
.814f	20 61 81	jsr $8161			jsr 	GXPlot1
.8152					_GXNoLast:
.8152	20 1d 86	jsr $861d			jsr 	GXCloseBitmap 				; close the bitmap
.8155	60		rts				rts
.8156					_GXCircleContinue:
.8156	20 5e 81	jsr $815e			jsr 	GXPlot2 					; draw it
.8159	20 db 81	jsr $81db			jsr 	GXCircleMove 				; adjust the coordinates
.815c	80 e7		bra $8145			bra 	_GXCircleDraw
.815e					GXPlot2:
.815e	20 61 81	jsr $8161			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8161					GXPlot1:
.8161	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.8164	f0 03		beq $8169			beq 	_GXPlot1Only
.8166	20 85 81	jsr $8185			jsr 	GXPlot0 						; plot and negate
.8169					_GXPlot1Only:
.8169	20 85 81	jsr $8185			jsr 	GXPlot0 						; twice, undoing negation
.816c	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.816f	ae 44 06	ldx $0644			ldx	 	gY
.8172	8d 44 06	sta $0644			sta 	gY
.8175	8e 43 06	stx $0643			stx 	gX
.8178	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.817b	a9 ff		lda #$ff			lda 	#$FF
.817d	8d 46 06	sta $0646			sta 	gYChanged
.8180	60		rts				rts
.8181	20 85 81	jsr $8185			jsr 	GXPlot0 						; do once
.8184	60		rts				rts
.8185	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.8188	f0 05		beq $818f			beq 	_GXPlot0Always
.818a	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.818d	f0 2d		beq $81bc			beq 	GXPlot0Exit
.818f					_GXPlot0Always:
.818f	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8191	ad 44 06	lda $0644			lda 	gY
.8194	20 bd 81	jsr $81bd			jsr 	GXSubCopy
.8197	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8199	ad 43 06	lda $0643			lda 	gX
.819c	20 bd 81	jsr $81bd			jsr 	GXSubCopy
.819f	48		pha				pha 									; save last offset X
.81a0	20 2a 86	jsr $862a			jsr 	GXPositionCalc 					; calculate position/offset.
.81a3	68		pla				pla
.81a4	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.81a5	85 36		sta $36				sta 	gzTemp0
.81a7	64 37		stz $37				stz 	gzTemp0+1
.81a9	26 37		rol $37				rol 	gzTemp0+1
.81ab	ad 45 06	lda $0645			lda 	gIsFillMode
.81ae	69 80		adc #$80			adc 	#128
.81b0	20 34 84	jsr $8434			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81b3	38		sec				sec 									; GY = -GY
.81b4	a9 00		lda #$00			lda 	#0
.81b6	ed 44 06	sbc $0644			sbc 	gY
.81b9	8d 44 06	sta $0644			sta 	gY
.81bc					GXPlot0Exit:
.81bc	60		rts				rts
.81bd					GXSubCopy:
.81bd	85 36		sta $36				sta 	gzTemp0
.81bf	64 37		stz $37				stz 	gzTemp0+1
.81c1	29 80		and #$80			and 	#$80
.81c3	f0 02		beq $81c7			beq 	_GXNoSx
.81c5	c6 37		dec $37				dec 	gzTemp0+1
.81c7					_GXNoSx:
.81c7	38		sec				sec
.81c8	bd 35 06	lda $0635,x			lda 	gXX1,x
.81cb	e5 36		sbc $36				sbc 	gzTemp0
.81cd	9d 31 06	sta $0631,x			sta 	gXX0,x
.81d0	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81d3	e5 37		sbc $37				sbc 	gzTemp0+1
.81d5	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81d8	a5 36		lda $36				lda 	gzTemp0 						; return A
.81da	60		rts				rts
.81db					GXCircleMove:
.81db	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.81de	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.81e0	10 0d		bpl $81ef			bpl 	_GXEMPositive
.81e2	ee 43 06	inc $0643			inc 	gX 							; X++
.81e5	ad 43 06	lda $0643			lda 	gX
.81e8	20 0e 82	jsr $820e			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81eb	a9 06		lda #$06			lda 	#6  						; and add 6
.81ed	80 15		bra $8204			bra 	_GXEMAddD
.81ef					_GXEMPositive:
.81ef	ee 43 06	inc $0643			inc 	gX 							; X++
.81f2	ce 44 06	dec $0644			dec 	gy 							; Y--
.81f5	38		sec				sec 								; calculate X-Y
.81f6	ad 43 06	lda $0643			lda 	gX
.81f9	ed 44 06	sbc $0644			sbc 	gY
.81fc	20 0e 82	jsr $820e			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81ff	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8201	ce 46 06	dec $0646			dec 	gYChanged
.8204					_GXEMAddD:
.8204	18		clc				clc
.8205	65 38		adc $38				adc 	gzTemp1
.8207	85 38		sta $38				sta 	gzTemp1
.8209	90 02		bcc $820d			bcc 	_GXEMNoCarry
.820b	e6 39		inc $39				inc 	gzTemp1+1
.820d					_GXEMNoCarry:
.820d	60		rts				rts
.820e					_GXAdd4TimesToD:
.820e	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8210	29 80		and #$80			and 	#$80
.8212	f0 02		beq $8216			beq 	_GXA4Unsigned
.8214	a9 ff		lda #$ff			lda 	#$FF
.8216					_GXA4Unsigned:
.8216	85 37		sta $37				sta 	gzTemp0+1
.8218	06 36		asl $36				asl 	gzTemp0  					; x 4
.821a	26 37		rol $37				rol 	gzTemp0+1
.821c	06 36		asl $36				asl 	gzTemp0
.821e	26 37		rol $37				rol 	gzTemp0+1
.8220	18		clc				clc 								; add
.8221	a5 36		lda $36				lda		gzTemp0
.8223	65 38		adc $38				adc 	gzTemp1
.8225	85 38		sta $38				sta 	gzTemp1
.8227	a5 37		lda $37				lda		gzTemp0+1
.8229	65 39		adc $39				adc 	gzTemp1+1
.822b	85 39		sta $39				sta 	gzTemp1+1
.822d	60		rts				rts
.822e					GXCircleSetup:
.822e	38		sec				sec
.822f	ad 37 06	lda $0637			lda 	gxY1
.8232	ed 33 06	sbc $0633			sbc 	gxY0
.8235	4a		lsr a				lsr 	a
.8236	8d 42 06	sta $0642			sta 	gRadius
.8239	a2 00		ldx #$00			ldx 	#0
.823b	20 5d 82	jsr $825d			jsr 	_GXCalculateCentre
.823e	a2 02		ldx #$02			ldx 	#2
.8240	20 5d 82	jsr $825d			jsr 	_GXCalculateCentre
.8243	9c 43 06	stz $0643			stz 	gX
.8246	ad 42 06	lda $0642			lda 	gRadius
.8249	8d 44 06	sta $0644			sta 	gY
.824c	0a		asl a				asl 	a 							; R x 2
.824d	85 36		sta $36				sta 	gzTemp0
.824f	38		sec				sec
.8250	a9 03		lda #$03			lda 	#3
.8252	e5 36		sbc $36				sbc 	gzTemp0
.8254	85 38		sta $38				sta 	gzTemp1
.8256	a9 00		lda #$00			lda 	#0
.8258	e9 00		sbc #$00			sbc 	#0
.825a	85 39		sta $39				sta 	gzTemp1+1
.825c	60		rts				rts
.825d					_GXCalculateCentre:
.825d	38		sec				sec
.825e	bd 35 06	lda $0635,x			lda 	gxX1,x
.8261	7d 31 06	adc $0631,x			adc 	gXX0,x
.8264	9d 35 06	sta $0635,x			sta 	gXX1,x
.8267	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.826a	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.826d	4a		lsr a				lsr 	a
.826e	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.8271	7e 35 06	ror $0635,x			ror 	gXX1,x
.8274	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8275					GXClearBitmap:
.8275	48		pha				pha
.8276	5a		phy				phy
.8277	20 0c 86	jsr $860c			jsr 	GXOpenBitmap 				; start access
.827a	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.827c	ad 3a 06	lda $063a			lda 	gxHeight
.827f	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8281	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8283					_GXCalcLastPage:
.8283	98		tya				tya 								; add to base page
.8284	18		clc				clc
.8285	6d 39 06	adc $0639			adc 	gxBasePage
.8288	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.828a					_GXClearAll:
.828a	20 9c 82	jsr $829c			jsr 	_GXClearBlock 				; clear 8k block
.828d	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.828f	a5 0b		lda $0b				lda 	GFXEditSlot
.8291	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.8294	b0 f4		bcs $828a			bcs 	_GXClearAll
.8296	20 1d 86	jsr $861d			jsr 	GXCloseBitmap	 			; stop access
.8299	7a		ply				ply
.829a	68		pla				pla
.829b	60		rts				rts
.829c					_GXClearBlock:
.829c	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.829e	85 38		sta $38				sta 	0+gzTemp1
.82a0	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.82a2	85 39		sta $39				sta 	1+gzTemp1
.82a4					_GXCB0:
.82a4	a5 36		lda $36				lda 	gzTemp0
.82a6	a0 00		ldy #$00			ldy 	#0
.82a8					_GXCB1:
.82a8	91 38		sta ($38),y			sta 	(gzTemp1),y
.82aa	c8		iny				iny
.82ab	91 38		sta ($38),y			sta 	(gzTemp1),y
.82ad	c8		iny				iny
.82ae	91 38		sta ($38),y			sta 	(gzTemp1),y
.82b0	c8		iny				iny
.82b1	91 38		sta ($38),y			sta 	(gzTemp1),y
.82b3	c8		iny				iny
.82b4	d0 f2		bne $82a8			bne 	_GXCB1
.82b6	e6 39		inc $39				inc 	gzTemp1+1
.82b8	a5 39		lda $39				lda 	gzTemp1+1
.82ba	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82bc	d0 e6		bne $82a4			bne 	_GXCB0
.82be	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.82bf					GXLine:
.82bf	20 0c 86	jsr $860c			jsr 	GXOpenBitmap
.82c2	20 f5 86	jsr $86f5			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.82c5	20 8a 83	jsr $838a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.82c8	20 2a 86	jsr $862a			jsr 	GXPositionCalc 				; calculate position/offset.
.82cb					_GXDrawLoop:
.82cb	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.82ce	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.82d0	2d 3e 06	and $063e			and 	gxANDValue
.82d3	4d 3d 06	eor $063d			eor 	gxEORValue
.82d6	91 3c		sta ($3c),y			sta 	(gsTemp),y
.82d8	20 e6 82	jsr $82e6			jsr 	GXLineIsComplete 			; is the line complete ?
.82db	f0 05		beq $82e2			beq 	_GXLExit
.82dd	20 01 83	jsr $8301			jsr 	GXLineAdvance 				; code as per advance method
.82e0	80 e9		bra $82cb			bra 	_GXDrawLoop
.82e2					_GXLExit:
.82e2	20 1d 86	jsr $861d			jsr 	GXCloseBitmap
.82e5	60		rts				rts
.82e6					GXLineIsComplete:
.82e6	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.82e9	d0 0f		bne $82fa			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.82eb	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.82ee	4d 35 06	eor $0635			eor 	GXX1
.82f1	d0 06		bne $82f9			bne 	_GXLICExit
.82f3	ad 32 06	lda $0632			lda 	GXX0+1
.82f6	4d 36 06	eor $0636			eor 	GXX1+1
.82f9					_GXLICExit:
.82f9	60		rts				rts
.82fa					_GXLICCompareY:
.82fa	ad 37 06	lda $0637			lda 	GXY1
.82fd	4d 33 06	eor $0633			eor 	GXY0
.8300	60		rts				rts
.8301					GXLineAdvance:
.8301	18		clc				clc 								; add adjust to position
.8302	ad 4b 06	lda $064b			lda 	GXPosition
.8305	6d 4c 06	adc $064c			adc 	GXAdjust
.8308	8d 4b 06	sta $064b			sta 	GXPosition
.830b	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.830e	b0 05		bcs $8315			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8310	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8313	90 0a		bcc $831f			bcc 	_GXLANoExtra
.8315					_GXLAOverflow:
.8315	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.8318	38		sec				sec 								; subtract total and write back
.8319	ed 4d 06	sbc $064d			sbc 	GXTotal
.831c	8d 4b 06	sta $064b			sta 	GXPosition
.831f					_GXLANoExtra:
.831f	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8322	f0 0d		beq $8331			beq 	_GXDXLarger
.8324	20 83 83	jsr $8383			jsr 	GXIncrementY
.8327	ad 4e 06	lda $064e			lda 	GXAddSelect
.832a	f0 10		beq $833c			beq 	_GXLAExit
.832c	20 3d 83	jsr $833d			jsr 	GXAdjustX
.832f	80 0b		bra $833c			bra 	_GXLAExit
.8331					_GXDXLarger:
.8331	20 3d 83	jsr $833d			jsr 	GXAdjustX
.8334	ad 4e 06	lda $064e			lda 	GXAddSelect
.8337	f0 03		beq $833c			beq 	_GXLAExit
.8339	20 83 83	jsr $8383			jsr 	GXIncrementY
.833c					_GXLAExit:
.833c	60		rts				rts
.833d					GXAdjustX:
.833d	ad 4a 06	lda $064a			lda 	GXDXNegative
.8340	10 25		bpl $8367			bpl 	_GXAXRight
.8342	ad 31 06	lda $0631			lda 	GXX0
.8345	d0 03		bne $834a			bne 	_GXAXNoBorrow
.8347	ce 32 06	dec $0632			dec 	GXX0+1
.834a					_GXAXNoBorrow:
.834a	ce 31 06	dec $0631			dec 	GXX0
.834d	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.8350	ad 41 06	lda $0641			lda 	gsOffset
.8353	c9 ff		cmp #$ff			cmp 	#$FF
.8355	d0 0f		bne $8366			bne 	_GXAYExit 					; underflow
.8357	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.8359	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.835b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.835d	b0 07		bcs $8366			bcs 	_GXAYExit
.835f	18		clc				clc
.8360	69 20		adc #$20			adc 	#$20 						; fix up
.8362	85 3d		sta $3d				sta 	gsTemp+1
.8364	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.8366					_GXAYExit:
.8366	60		rts				rts
.8367					_GXAXRight:
.8367	ee 31 06	inc $0631			inc 	GXX0
.836a	d0 03		bne $836f			bne 	_GXAXNoCarry
.836c	ee 32 06	inc $0632			inc 	GXX0+1
.836f					_GXAXNoCarry:
.836f	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.8372	d0 0e		bne $8382			bne 	_GXAXExit 					; if not overflowed, exit.
.8374	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.8376	a5 3d		lda $3d				lda 	gsTemp+1
.8378	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.837a	90 06		bcc $8382			bcc 	_GXAXExit
.837c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.837e	85 3d		sta $3d				sta 	gsTemp+1
.8380	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.8382					_GXAXExit:
.8382	60		rts				rts
.8383					GXIncrementY:
.8383	ee 33 06	inc $0633			inc 	GXY0
.8386	20 80 86	jsr $8680			jsr 	GXMovePositionDown
.8389	60		rts				rts
.838a					GXLineSetup:
.838a	ad 37 06	lda $0637			lda 	GXY1
.838d	38		sec				sec
.838e	ed 33 06	sbc $0633			sbc 	GXY0
.8391	4a		lsr a				lsr 	a
.8392	8d 48 06	sta $0648			sta 	GXDiffY
.8395	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.8398	38		sec				sec
.8399	ad 35 06	lda $0635			lda 	GXX1
.839c	ed 31 06	sbc $0631			sbc 	GXX0
.839f	8d 47 06	sta $0647			sta 	GXDiffX
.83a2	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.83a5	ed 32 06	sbc $0632			sbc 	GXX0+1
.83a8	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.83a9	6e 47 06	ror $0647			ror 	GXDiffX
.83ac	0a		asl a				asl 	a
.83ad	10 0c		bpl $83bb			bpl 	_GDXNotNegative
.83af	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.83b1	38		sec				sec
.83b2	ed 47 06	sbc $0647			sbc 	GXDiffX
.83b5	8d 47 06	sta $0647			sta 	GXDiffX
.83b8	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.83bb					_GDXNotNegative:
.83bb	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.83be	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.83c1	8d 4c 06	sta $064c			sta 	GXAdjust
.83c4	ad 47 06	lda $0647			lda 	GXDiffX
.83c7	8d 4d 06	sta $064d			sta 	GXTotal
.83ca	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.83cd	cd 47 06	cmp $0647			cmp 	GXDiffX
.83d0	90 0f		bcc $83e1			bcc 	_GDXNotLarger
.83d2	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.83d5	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.83d8	8d 4c 06	sta $064c			sta 	GXAdjust
.83db	ad 48 06	lda $0648			lda 	GXDiffY
.83de	8d 4d 06	sta $064d			sta 	GXTotal
.83e1					_GDXNotLarger:
.83e1	ad 4d 06	lda $064d			lda 	GXTotal
.83e4	4a		lsr a				lsr 	a
.83e5	8d 4b 06	sta $064b			sta 	GXPosition
.83e8	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.83e9					GXFillRectangle:
.83e9	38		sec				sec
.83ea	80 01		bra $83ed			bra 	GXRectangle
.83ec					GXFrameRectangle:
.83ec	18		clc				clc
.83ed					GXRectangle:
.83ed	08		php				php 								; save Fill flag (CS)
.83ee	20 0c 86	jsr $860c			jsr 	GXOpenBitmap 				; start drawing
.83f1	20 d7 86	jsr $86d7			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.83f4	20 2a 86	jsr $862a			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.83f7	38		sec				sec 								; sec = Draw line
.83f8	20 21 84	jsr $8421			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.83fb	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.83fe	cd 37 06	cmp $0637			cmp 	gxY1
.8401	f0 19		beq $841c			beq 	_GXRectangleExit
.8403					_GXRectLoop:
.8403	20 80 86	jsr $8680			jsr 	GXMovePositionDown 			; down one.
.8406	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.8409	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.840c	cd 37 06	cmp $0637			cmp 	gXY1
.840f	f0 07		beq $8418			beq 	_GXLastLine
.8411	28		plp				plp 								; get flag back
.8412	08		php				php
.8413	20 21 84	jsr $8421			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8416	80 eb		bra $8403			bra 	_GXRectLoop
.8418					_GXLastLine:
.8418	38		sec				sec
.8419	20 21 84	jsr $8421			jsr 	GXDrawLineX1X0
.841c					_GXRectangleExit:
.841c	68		pla				pla 								; throw fill flag.
.841d	20 1d 86	jsr $861d			jsr 	GXCloseBitmap 				; stop drawing and exit
.8420	60		rts				rts
.8421					GXDrawLineX1X0:
.8421	08		php				php 								; save solid/either-end
.8422	38		sec				sec
.8423	ad 35 06	lda $0635			lda		gXX1
.8426	ed 31 06	sbc $0631			sbc 	gXX0
.8429	85 36		sta $36				sta 	gzTemp0
.842b	ad 36 06	lda $0636			lda 	gXX1+1
.842e	ed 32 06	sbc $0632			sbc 	gXX0+1
.8431	85 37		sta $37				sta 	gzTemp0+1
.8433	28		plp				plp
.8434					GXDrawLineTemp0:
.8434	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.8436	48		pha				pha
.8437	a5 3d		lda $3d				lda 	gsTemp+1
.8439	48		pha				pha
.843a	ad 41 06	lda $0641			lda 	gsOffset
.843d	48		pha				pha
.843e	a5 0b		lda $0b				lda 	GFXEditSlot
.8440	48		pha				pha
.8441	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8444	90 1e		bcc $8464			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8446					_GXDLTLine:
.8446	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.8448	2d 3e 06	and $063e			and 	gxANDValue
.844b	4d 3d 06	eor $063d			eor 	gxEORValue
.844e	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8450	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.8452	d0 04		bne $8458			bne 	_GXDLTNoBorrow
.8454	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.8456	30 2e		bmi $8486			bmi 	_GXDLTExit
.8458					_GXDLTNoBorrow:
.8458	c6 36		dec $36				dec 	gzTemp0
.845a	c8		iny				iny 								; next slot.
.845b	d0 e9		bne $8446			bne 	_GXDLTLine
.845d	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.845f	20 94 84	jsr $8494			jsr 	GXDLTCheckWrap				; check for new page.
.8462	80 e2		bra $8446			bra 	_GXDLTLine
.8464					_GXDLTEndPoints:
.8464	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.8466	2d 3e 06	and $063e			and 	gxANDValue
.8469	4d 3d 06	eor $063d			eor 	gxEORValue
.846c	91 3c		sta ($3c),y			sta 	(gsTemp),y
.846e	98		tya				tya 								; advance to right side
.846f	18		clc				clc
.8470	65 36		adc $36				adc 	gzTemp0
.8472	a8		tay				tay
.8473	a5 3d		lda $3d				lda 	gsTemp+1
.8475	65 37		adc $37				adc 	gzTemp0+1
.8477	85 3d		sta $3d				sta 	gsTemp+1
.8479	20 94 84	jsr $8494			jsr 	GXDLTCheckWrap 			; fix up.
.847c	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.847e	2d 3e 06	and $063e			and 	gxANDValue
.8481	4d 3d 06	eor $063d			eor 	gxEORValue
.8484	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8486					_GXDLTExit:
.8486	68		pla				pla
.8487	85 0b		sta $0b				sta 	GFXEditSlot
.8489	68		pla				pla
.848a	8d 41 06	sta $0641			sta 	gsOffset
.848d	68		pla				pla
.848e	85 3d		sta $3d				sta 	gsTemp+1
.8490	68		pla				pla
.8491	85 3c		sta $3c				sta 	gsTemp
.8493	60		rts				rts
.8494					GXDLTCheckWrap:
.8494	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.8496	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8498	90 06		bcc $84a0			bcc 	_GXDLTCWExit
.849a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.849c	85 3d		sta $3d				sta 	gsTemp+1
.849e	e6 0b		inc $0b				inc 	GFXEditSlot
.84a0					_GXDLTCWExit:
.84a0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.84a1					GXDrawGraphicElement:
.84a1	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.84a4	3a		dec a				dec 	a
.84a5	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.84a8	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.84ab	9c 55 06	stz $0655			stz 	gxHFlip
.84ae	2c 56 06	bit $0656			bit 	gxUseMode
.84b1	10 03		bpl $84b6			bpl 	_GXNotVertical
.84b3	8d 54 06	sta $0654			sta 	gxVFlip
.84b6					_GXNotVertical:
.84b6	50 03		bvc $84bb			bvc 	_GXNotHorizontal
.84b8	8d 55 06	sta $0655			sta 	gxHFlip
.84bb					_GXNotHorizontal:
.84bb	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.84be	48		pha				pha
.84bf	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.84c2	8e 51 06	stx $0651			stx 	gxAcquireVector
.84c5	20 0c 86	jsr $860c			jsr 	gxOpenBitmap 				; open the bitmap.
.84c8	ad 56 06	lda $0656			lda 	gxUseMode 					; scale bits
.84cb	4a		lsr a				lsr 	a
.84cc	4a		lsr a				lsr 	a
.84cd	4a		lsr a				lsr 	a
.84ce	29 07		and #$07			and		#7
.84d0	1a		inc a				inc 	a
.84d1	8d 53 06	sta $0653			sta 	gxScale
.84d4	64 38		stz $38				stz 	gzTemp1						; start first line
.84d6					_GXGELoop:
.84d6	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.84d8	4d 54 06	eor $0654			eor 	gxVFlip
.84db	aa		tax				tax 								; get the Xth line.
.84dc	20 19 85	jsr $8519			jsr 	_GXCallAcquire 				; get that data.
.84df	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.84e2	85 39		sta $39				sta 	gzTemp1+1
.84e4					_GXGELoop2:
.84e4	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.84e7	cd 3a 06	cmp $063a			cmp 	gxHeight
.84ea	b0 10		bcs $84fc			bcs 	_GXDGEExit
.84ec	20 1c 85	jsr $851c			jsr 	GXRenderOneLine 			; render line
.84ef	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.84f1	d0 f1		bne $84e4			bne 	_GXGELoop2
.84f3	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.84f5	a5 38		lda $38				lda 	gzTemp1
.84f7	cd 4f 06	cmp $064f			cmp 	gxSize
.84fa	d0 da		bne $84d6			bne 	_GXGELoop
.84fc					_GXDGEExit:
.84fc	68		pla				pla 								; restore Y for next time
.84fd	8d 33 06	sta $0633			sta 	gxY0
.8500	ae 53 06	ldx $0653			ldx 	gxScale 					; get scale (1-8)
.8503					_GXShiftLeft:
.8503	18		clc				clc
.8504	ad 4f 06	lda $064f			lda 	gxSize
.8507	6d 31 06	adc $0631			adc 	gxX0
.850a	8d 31 06	sta $0631			sta 	gxX0
.850d	90 03		bcc $8512			bcc 	_GXSLNoCarry
.850f	ee 32 06	inc $0632			inc 	gxX0+1
.8512					_GXSLNoCarry:
.8512	ca		dex				dex
.8513	d0 ee		bne $8503			bne 	_GXShiftLeft
.8515	20 1d 86	jsr $861d			jsr 	GXCloseBitmap
.8518	60		rts				rts
.8519					_GXCallAcquire:
.8519	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.851c					GXRenderOneLine:
.851c	20 2a 86	jsr $862a			jsr 	GXPositionCalc 				; calculate position/offset.
.851f	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.8522	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.8524					_GXROLLoop1:
.8524	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.8527	85 3b		sta $3b				sta 	gzTemp2+1
.8529					_GXROLLoop2:
.8529	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.852b	4d 55 06	eor $0655			eor 	gxHFlip
.852e	aa		tax				tax 								; read from the pixel buffer
.852f	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8532	f0 0a		beq $853e			beq 	_GXZeroPixel 				; don't draw if zero.
.8534	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8536	2d 3e 06	and $063e			and 	gxANDValue
.8539	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.853c	91 3c		sta ($3c),y			sta 	(gsTemp),y
.853e					_GXZeroPixel:
.853e	c8		iny				iny 								; advance pointer
.853f	d0 05		bne $8546			bne 	_GXNoShift
.8541	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.8543	20 94 84	jsr $8494			jsr 	GXDLTCheckWrap				; check for new page.
.8546					_GXNoShift:
.8546	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.8548	d0 df		bne $8529			bne 	_GXROLLoop2
.854a	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.854c	a5 3a		lda $3a				lda 	gzTemp2
.854e	cd 4f 06	cmp $064f			cmp 	gxSize
.8551	d0 d1		bne $8524			bne 	_GXROLLoop1
.8553	ee 33 06	inc $0633			inc 	gxY0
.8556	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.0655					gxHFlip:
>0655							.fill 	1
.0656					gxUseMode:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8557					GXFontHandler:
.8557	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.8559	4d 3b 06	eor $063b			eor 	gxMode
.855c	8d 56 06	sta $0656			sta 	gxUseMode
.855f	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.8561	06 36		asl $36				asl	 	gzTemp0 					; x 2
.8563	26 37		rol $37				rol	 	gzTemp0+1
.8565	06 36		asl $36				asl	 	gzTemp0 					; x 4
.8567	26 37		rol $37				rol	 	gzTemp0+1
.8569	06 36		asl $36				asl	 	gzTemp0 					; x 8
.856b	26 37		rol $37				rol	 	gzTemp0+1
.856d	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.856f	09 c0		ora #$c0			ora 	#$C0
.8571	85 37		sta $37				sta 	gzTemp0+1
.8573	a9 08		lda #$08			lda 	#8 							; size 8x8
.8575	a2 7d		ldx #$7d			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8577	a0 85		ldy #$85			ldy 	#GXGetGraphicDataFont >> 8
.8579	20 a1 84	jsr $84a1			jsr 	GXDrawGraphicElement
.857c	60		rts				rts
.857d					GXGetGraphicDataFont:
.857d	8a		txa				txa 								; X->Y
.857e	a8		tay				tay
.857f	a6 01		ldx $01				ldx 	1 							; preserve old value
.8581	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8583	85 01		sta $01				sta 	1
.8585	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.8587	86 01		stx $01				stx 	1 							; put old value back.
.8589	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.858b					_GXExpand:
.858b	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.858e	0a		asl a				asl 	a 							; shift bit 7 into C
.858f	90 08		bcc $8599			bcc 	_GXNoPixel
.8591	48		pha				pha 								; if set, set pixel buffer to current colour.
.8592	ad 3c 06	lda $063c			lda 	gxColour
.8595	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8598	68		pla				pla
.8599					_GXNoPixel:
.8599	e8		inx				inx 								; do the whole byte.
.859a	e0 08		cpx #$08			cpx 	#8
.859c	d0 ed		bne $858b			bne 	_GXExpand
.859e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.859f					GXSpriteHandler:
.859f	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.85a1	4d 3b 06	eor $063b			eor 	gxMode
.85a4	8d 56 06	sta $0656			sta 	gxUseMode
.85a7	a9 18		lda #$18			lda 	#GXSpritePage
.85a9	8d 57 06	sta $0657			sta 	GXSpriteBasePage
.85ac	a6 36		ldx $36				ldx 	gzTemp0 					; sprite #
.85ae	da		phx				phx
.85af	20 0c 86	jsr $860c			jsr 	GXOpenBitmap 				; can access sprite information
.85b2	68		pla				pla
.85b3	20 9b 86	jsr $869b			jsr 	GXFindSprite 				; get the sprite address
.85b6	20 1d 86	jsr $861d			jsr 	GXCloseBitmap
.85b9	ad 58 06	lda $0658			lda 	GXSSize 					; return size
.85bc	a2 c4		ldx #$c4			ldx 	#GXSpriteAcquire & $FF
.85be	a0 85		ldy #$85			ldy 	#GXSpriteAcquire >> 8
.85c0	20 a1 84	jsr $84a1			jsr 	GXDrawGraphicElement
.85c3	60		rts				rts
.85c4					GXSpriteAcquire:
.85c4	ad 57 06	lda $0657			lda 	GXspriteBasePage			; point to base page
.85c7	85 0b		sta $0b				sta 	GFXEditSlot
.85c9	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.85cb	a9 00		lda #$00			lda 	#0
.85cd	ae 59 06	ldx $0659			ldx 	GXSSizeRaw
.85d0					_GXTimesRowNumber:
.85d0	18		clc				clc
.85d1	65 36		adc $36				adc 	zTemp0
.85d3	ca		dex				dex
.85d4	10 fa		bpl $85d0			bpl 	_GXTimesRowNumber
.85d6	64 37		stz $37				stz 	gzTemp0+1
.85d8	0a		asl a				asl 	a 							; row x 2,4,6,8
.85d9	26 37		rol $37				rol 	gzTemp0+1
.85db	0a		asl a				asl 	a 							; row x 4,8,12,16
.85dc	26 37		rol $37				rol 	gzTemp0+1
.85de	0a		asl a				asl 	a 							; row x 8,16,24,32
.85df	26 37		rol $37				rol 	gzTemp0+1
.85e1	85 36		sta $36				sta 	gzTemp0
.85e3	18		clc				clc 								; add base address.
.85e4	a5 36		lda $36				lda 	gzTemp0
.85e6	6d 5b 06	adc $065b			adc 	GXSAddress
.85e9	85 36		sta $36				sta 	gzTemp0
.85eb	a5 37		lda $37				lda 	gzTemp0+1
.85ed	6d 5c 06	adc $065c			adc 	GXSAddress+1
.85f0					_GXSAFindPage:
.85f0	c9 20		cmp #$20			cmp 	#$20 						; on this page
.85f2	90 06		bcc $85fa			bcc 	_GXSAFoundPage
.85f4	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.85f6	e6 0b		inc $0b				inc 	GFXEditSlot
.85f8	80 f6		bra $85f0			bra 	_GXSAFindPage
.85fa					_GXSAFoundPage:
.85fa	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.85fc	85 37		sta $37				sta 	gzTemp0+1 					; gzTemp0 now points to the page
.85fe	a0 00		ldy #$00			ldy 	#0
.8600					_GXSACopyLoop:
.8600	b1 36		lda ($36),y			lda 	(gzTemp0),y
.8602	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.8605	c8		iny				iny
.8606	cc 58 06	cpy $0658			cpy 	GXSSize
.8609	d0 f5		bne $8600			bne 	_GXSACopyLoop
.860b	60		rts				rts
.0657					GXSpriteBasePage:
>0657							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.860c					GXOpenBitmap:
.860c	78		sei				sei 								; no interrupts here
.860d	a5 00		lda $00				lda 	0 							; save original MMU Control register
.860f	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.8612	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.8614	85 00		sta $00				sta 	0
.8616	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.8618	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.861b	58		cli				cli
.861c	60		rts				rts
.861d					GXCloseBitmap:
.861d	78		sei				sei
.861e	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8621	85 0b		sta $0b				sta 	GFXEditSlot
.8623	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8626	85 00		sta $00				sta 	0
.8628	58		cli				cli
.8629	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.862a					GXPositionCalc:
.862a	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.862c	48		pha				pha
.862d	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.8630	85 3c		sta $3c				sta 	gsTemp
.8632	64 3d		stz $3d				stz 	gsTemp+1
.8634	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.8636	26 3d		rol $3d				rol 	gsTemp+1
.8638	06 3c		asl $3c				asl 	gsTemp
.863a	26 3d		rol $3d				rol 	gsTemp+1
.863c	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.863d	65 3c		adc $3c				adc 	gsTemp
.863f	85 3c		sta $3c				sta 	gsTemp
.8641	90 02		bcc $8645			bcc 	_GXPCNoCarry
.8643	e6 3d		inc $3d				inc 	gsTemp+1
.8645					_GXPCNoCarry:
.8645	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8647	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8649	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.864b	85 36		sta $36				sta 	gzTemp0
.864d	64 3d		stz $3d				stz 	gsTemp+1
.864f	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8651					_GXPCMultiply32:
.8651	06 3c		asl $3c				asl 	gsTemp
.8653	26 3d		rol $3d				rol 	gsTemp+1
.8655	3a		dec a				dec 	a
.8656	d0 f9		bne $8651			bne 	_GXPCMultiply32
.8658	18		clc				clc
.8659	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.865c	65 3c		adc $3c				adc 	gsTemp
.865e	8d 41 06	sta $0641			sta 	gsOffset
.8661	ad 32 06	lda $0632			lda 	GXX0+1
.8664	65 3d		adc $3d				adc 	gsTemp+1
.8666	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8668	90 04		bcc $866e			bcc 	_GXPCNoOverflow
.866a	29 1f		and #$1f			and 	#$1F 						; fix it up
.866c	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.866e					_GXPCNoOverflow:
.866e	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8670	85 3d		sta $3d				sta 	gsTemp+1
.8672	64 3c		stz $3c				stz 	gsTemp
.8674	18		clc				clc
.8675	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.8677	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.867a	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.867c	68		pla				pla
.867d	85 36		sta $36				sta 	gzTemp0
.867f	60		rts				rts
.8680					GXMovePositionDown:
.8680	18		clc				clc 								; add 320 to offset/temp+1
.8681	ad 41 06	lda $0641			lda 	gsOffset
.8684	69 40		adc #$40			adc 	#64
.8686	8d 41 06	sta $0641			sta 	gsOffset
.8689	a5 3d		lda $3d				lda 	gsTemp+1
.868b	69 01		adc #$01			adc 	#1
.868d	85 3d		sta $3d				sta 	gsTemp+1
.868f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8691	90 07		bcc $869a			bcc 	_GXMPDExit
.8693	38		sec				sec  								; next page
.8694	e9 20		sbc #$20			sbc 	#$20
.8696	85 3d		sta $3d				sta 	gsTemp+1
.8698	e6 0b		inc $0b				inc 	GFXEditSlot
.869a					_GXMPDExit:
.869a	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.869b					GXFindSprite:
.869b	aa		tax				tax
.869c	ad 57 06	lda $0657			lda 	GXSpriteBasePage 			; access the base page of the sprite
.869f	85 0b		sta $0b				sta 	GFXEditSlot
.86a1	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.86a4	8d 5c 06	sta $065c			sta 	GXSAddress+1
.86a7	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.86aa	48		pha				pha 								; save twice
.86ab	48		pha				pha
.86ac	29 03		and #$03			and 	#3 							; get sprite size
.86ae	8d 59 06	sta $0659			sta 	GXSSizeRaw 					; save raw (0-3)
.86b1	aa		tax				tax
.86b2	bd d3 86	lda $86d3,x			lda 	_GXFXSSTTable,x 			; read sprite size
.86b5	8d 58 06	sta $0658			sta 	GXSSize 					; save (8/16/24/32)
.86b8	68		pla				pla 								; get LUT
.86b9	4a		lsr a				lsr		a
.86ba	4a		lsr a				lsr		a
.86bb	29 03		and #$03			and 	#3
.86bd	8d 5a 06	sta $065a			sta 	GXSLUT
.86c0	68		pla				pla 								; address, neeeds to be x 4
.86c1	29 f0		and #$f0			and 	#$F0
.86c3	8d 5b 06	sta $065b			sta 	GXSAddress
.86c6	0e 5b 06	asl $065b			asl 	GXSAddress
.86c9	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86cc	0e 5b 06	asl $065b			asl 	GXSAddress
.86cf	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86d2	60		rts				rts
.86d3					_GXFXSSTTable:
>86d3	08 10 18 20					.byte 	8,16,24,32
.0658					GXSSize:
>0658							.fill 	1
.0659					GXSSizeRaw:
>0659							.fill 	1
.065a					GXSLUT:
>065a							.fill 	1
.065b					GXSAddress:
>065b							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.86d7					GXSortXY:
.86d7	20 f5 86	jsr $86f5			jsr 	GXSortY 					; will be sorted on Y now
.86da	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.86dd	cd 35 06	cmp $0635			cmp 	gxX1
.86e0	ad 32 06	lda $0632			lda 	gXX0+1
.86e3	ed 36 06	sbc $0636			sbc 	gXX1+1
.86e6	90 0c		bcc $86f4			bcc 	_GXSXYExit 					; X0 < X1 exit
.86e8	a2 00		ldx #$00			ldx 	#0 							; swap them over
.86ea	a0 04		ldy #$04			ldy 	#4
.86ec	20 09 87	jsr $8709			jsr 	GXSwapXY
.86ef	e8		inx				inx
.86f0	c8		iny				iny
.86f1	20 09 87	jsr $8709			jsr 	GXSwapXY
.86f4					_GXSXYExit:
.86f4	60		rts				rts
.86f5					GXSortY:
.86f5	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.86f8	cd 37 06	cmp $0637			cmp 	gxY1
.86fb	90 0b		bcc $8708			bcc 	_GXSYSorted
.86fd	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.86ff	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8701					_GXSwap1:
.8701	20 09 87	jsr $8709			jsr 	GXSwapXY
.8704	88		dey				dey
.8705	ca		dex				dex
.8706	10 f9		bpl $8701			bpl 	_GXSwap1
.8708					_GXSYSorted:
.8708	60		rts				rts
.8709					GXSwapXY:
.8709	bd 31 06	lda $0631,x			lda 	gxX0,x
.870c	48		pha				pha
.870d	b9 31 06	lda $0631,y			lda 	gxX0,y
.8710	9d 31 06	sta $0631,x			sta 	gxX0,x
.8713	68		pla				pla
.8714	99 31 06	sta $0631,y			sta 	gxX0,y
.8717	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.8718					RunDemos:
.8718	64 01		stz $01				stz 	1
.871a	a9 0f		lda #$0f			lda 	#$0F
.871c	8d 00 d0	sta $d000			sta 	$D000
.871f	a9 01		lda #$01			lda 	#1
.8721	8d 00 d1	sta $d100			sta 	$D100
.8724	9c 01 d1	stz $d101			stz 	$D101
.8727	9c 02 d1	stz $d102			stz 	$D102
.872a	a9 01		lda #$01			lda 	#1
.872c	8d 03 d1	sta $d103			sta 	$D103
.872f	a9 08		lda #$08			lda 	#8
.8731	8d 39 06	sta $0639			sta 	gxBasePage
.8734	a9 f0		lda #$f0			lda 	#240
.8736	8d 3a 06	sta $063a			sta 	gxHeight
.8739					loop:
.8739	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.873b	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.873d	a0 00		ldy #$00			ldy 	#(0)
.873f	20 85 80	jsr $8085			jsr 	GraphicDraw
.8742	a9 06		lda #$06			lda 	#((3)*2)+(((0) >> 8) & 1)
.8744	a2 00		ldx #$00			ldx 	#((0) & $FF)
.8746	a0 00		ldy #$00			ldy 	#(0)
.8748	20 85 80	jsr $8085			jsr 	GraphicDraw
.874b	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.874d	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.874f	a0 28		ldy #$28			ldy 	#(40)
.8751	20 85 80	jsr $8085			jsr 	GraphicDraw
.8754	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.8756	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8758	a0 00		ldy #$00			ldy 	#(0)
.875a	20 85 80	jsr $8085			jsr 	GraphicDraw
.875d	20 c8 9d	jsr $9dc8	demo:	jsr 	Random32Bit
.8760	ee 3d 06	inc $063d			inc 	gxEORValue
.8763	a9 20		lda #$20			lda 	#16*2
.8765	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8768	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.876b	20 85 80	jsr $8085			jsr 	GraphicDraw
.876e	ad 8a 04	lda $048a			lda 	RandomSeed+2
.8771	29 03		and #$03			and 	#3
.8773	c9 03		cmp #$03			cmp 	#3
.8775	f0 e6		beq $875d			beq 	demo
.8777	aa		tax				tax
.8778	ad 8a 04	lda $048a			lda 	RandomSeed+2
.877b	29 c0		and #$c0			and 	#$C0
.877d	a8		tay				tay
.877e	a9 0a		lda #$0a			lda 	#5*2
.8780	20 85 80	jsr $8085			jsr 	GraphicDraw
.8783	ad 3d 06	lda $063d			lda 	gxEORValue
.8786	d0 d5		bne $875d			bne 	demo
.8788	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8789					AssembleGroup1:
.8789	a9 ff		lda #$ff			lda 	#$FF
.878b	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.878e	80 02		bra $8792			bra 	AsmGroup12
.8790					AssembleGroup2:
.8790	a5 00		lda $00				lda 	$00
.8792					AsmGroup12:
.8792	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8795	68		pla				pla 								; pop the return address to access the information following.
.8796	fa		plx				plx
.8797	20 20 88	jsr $8820			jsr 	AccessParameters 			; get opcode and save as base
.879a	8d a4 04	sta $04a4			sta 	BaseOpcode
.879d	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.87a0	d0 08		bne $87aa			bne 	_AG12HaveMask
.87a2	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.87a4	20 28 88	jsr $8828			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.87a7	8d a5 04	sta $04a5			sta 	ModeMask
.87aa					_AG12HaveMask:
.87aa	20 63 89	jsr $8963			jsr 	TypeAndCalculateOperand 	; get zero page type
.87ad	da		phx				phx 								; save found address mode
.87ae	20 8c 88	jsr $888c			jsr 	AssembleModeX
.87b1	fa		plx				plx  								; restore address mode
.87b2	b0 0b		bcs $87bf			bcs 	_AG12Exit
.87b4	20 c0 87	jsr $87c0			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.87b7	20 8c 88	jsr $888c			jsr 	AssembleModeX
.87ba	b0 03		bcs $87bf			bcs 	_AG12Exit
.87bc	4c 7e ad	jmp $ad7e			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.87bf					_AG12Exit:
.87bf	60		rts				rts
.87c0					PromoteToAbsolute:
.87c0	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.87c2	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.87c4	f0 19		beq $87df			beq 	_PTADo
.87c6	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.87c8	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.87ca	f0 13		beq $87df			beq 	_PTADo
.87cc	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.87ce	e0 80		cpx #$80			cpx 	#AM_ZEROY
.87d0	f0 0d		beq $87df			beq 	_PTADo
.87d2	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.87d4	e0 d1		cpx #$d1			cpx 	#AM_IND
.87d6	f0 07		beq $87df			beq 	_PTADo
.87d8	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.87da	e0 c0		cpx #$c0			cpx 	#AM_INDX
.87dc	f0 01		beq $87df			beq 	_PTADo
.87de	60		rts				rts
.87df					_PTADo:
.87df	aa		tax				tax
.87e0	60		rts				rts
.87e1					AssembleGroup3:
.87e1	68		pla				pla 								; get parameters, which is just the opcode.
.87e2	fa		plx				plx
.87e3	20 20 88	jsr $8820			jsr 	AccessParameters 			; get and output opcode
.87e6	20 38 88	jsr $8838			jsr 	AssemblerWriteByte
.87e9	20 c7 89	jsr $89c7			jsr 	CalculateOperand 			; get a 16 bit operand
.87ec	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.87ef	38		sec				sec
.87f0	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.87f3	48		pha				pha 								; LSB in A
.87f4	ad 10 04	lda $0410			lda 	NSMantissa1
.87f7	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.87fa	aa		tax				tax 								; MSB in X
.87fb	68		pla				pla
.87fc	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.87fd	69 7f		adc #$7f			adc 	#$7F
.87ff	90 01		bcc $8802			bcc 	_AG3NoCarry
.8801	e8		inx				inx
.8802					_AG3NoCarry:
.8802	38		sec				sec 								; fix back and write out anyways.
.8803	e9 80		sbc #$80			sbc 	#$80
.8805	20 38 88	jsr $8838			jsr 	AssemblerWriteByte
.8808	e0 00		cpx #$00			cpx 	#0 							; was it in range
.880a	f0 0a		beq $8816			beq 	_AG3Exit
.880c	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.880f	29 01		and #$01			and 	#1
.8811	f0 03		beq $8816			beq 	_AG3Exit
.8813	4c 83 ad	jmp $ad83			jmp 	RangeError 					; no, branch is out of range
.8816					_AG3Exit:
.8816	60		rts				rts
.8817					AssembleGroup4:
.8817	68		pla				pla 								; pop address
.8818	fa		plx				plx
.8819	20 20 88	jsr $8820			jsr 	AccessParameters 			; access and get first
.881c	20 38 88	jsr $8838			jsr 	AssemblerWriteByte 			; output it.
.881f	60		rts				rts
.8820					AccessParameters:
.8820	8d a1 04	sta $04a1			sta 	ParamStart
.8823	8e a2 04	stx $04a2			stx 	ParamStart+1
.8826	a9 01		lda #$01			lda 	#1
.8828					GetParameter:
.8828	5a		phy				phy
.8829	a8		tay				tay
.882a	ad a1 04	lda $04a1			lda 	ParamStart
.882d	85 36		sta $36				sta 	zTemp0
.882f	ad a2 04	lda $04a2			lda 	ParamStart+1
.8832	85 37		sta $37				sta 	zTemp0+1
.8834	b1 36		lda ($36),y			lda 	(zTemp0),y
.8836	7a		ply				ply
.8837	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8838					AssemblerWriteByte:
.8838	48		pha			pha
.8839	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.883c	29 02		and #$02		and 	#2
.883e	f0 1b		beq $885b		beq 	_AWBNoPrint
.8840	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8843	20 76 88	jsr $8876		jsr 	PrintHex
.8846	ad 9e 04	lda $049e		lda		AssemblerAddress
.8849	20 76 88	jsr $8876		jsr 	PrintHex
.884c	a9 20		lda #$20		lda 	#' '
.884e	20 23 af	jsr $af23		jsr 	EXTPrintCharacter
.8851	68		pla			pla 									; print byte
.8852	48		pha			pha
.8853	20 76 88	jsr $8876		jsr 	PrintHex
.8856	a9 0d		lda #$0d		lda 	#13
.8858	20 23 af	jsr $af23		jsr 	EXTPrintCharacter
.885b					_AWBNoPrint:
.885b	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.885e	85 36		sta $36			sta 	zTemp0
.8860	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8863	f0 0e		beq $8873		beq 	_AWBRange
.8865	85 37		sta $37			sta 	zTemp0+1
.8867	68		pla			pla 									; write byte out
.8868	92 36		sta ($36)		sta 	(zTemp0)
.886a	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.886d	d0 03		bne $8872		bne 	_AWBNoCarry
.886f	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8872					_AWBNoCarry:
.8872	60		rts			rts
.8873					_AWBRange:
.8873	4c 83 ad	jmp $ad83		jmp 	RangeError
.8876					PrintHex:
.8876	48		pha				pha
.8877	4a		lsr a				lsr 	a
.8878	4a		lsr a				lsr 	a
.8879	4a		lsr a				lsr 	a
.887a	4a		lsr a				lsr 	a
.887b	20 7f 88	jsr $887f			jsr 	_PrintNibble
.887e	68		pla				pla
.887f					_PrintNibble:
.887f	29 0f		and #$0f			and 	#15
.8881	c9 0a		cmp #$0a			cmp 	#10
.8883	90 02		bcc $8887			bcc 	_NoShift
.8885	69 06		adc #$06			adc 	#6
.8887					_NoShift:
.8887	69 30		adc #$30			adc 	#48
.8889	4c 23 af	jmp $af23			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.888c					AssembleModeX:
.888c	5a		phy				phy
.888d	ad a3 04	lda $04a3			lda 	IsGroup1
.8890	f0 17		beq $88a9			beq 	_AMXGroup2
.8892	8a		txa				txa 							; is it in group # 1
.8893	29 40		and #$40			and 	#AM_ISG1
.8895	f0 50		beq $88e7			beq 	_AMXFail 				; no, give up.
.8897	8a		txa				txa 							; get back.
.8898	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.889a	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.889c	d0 22		bne $88c0			bne 	_AMXHaveInfo
.889e	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.88a1	c9 81		cmp #$81			cmp 	#$81
.88a3	f0 42		beq $88e7			beq 	_AMXFail
.88a5	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.88a7	80 17		bra $88c0			bra 	_AMXHaveInfo 			; odd design decision there.
.88a9					_AMXGroup2:
.88a9	8a		txa				txa 							; is it in group 2 ?
.88aa	29 20		and #$20			and 	#AM_ISG2
.88ac	f0 39		beq $88e7			beq 	_AMXFail 				; no, give up.
.88ae	8a		txa				txa 							; get the offset into Y
.88af	29 1f		and #$1f			and 	#$1F
.88b1	4a		lsr a				lsr 	a 						; make it 0-7.
.88b2	4a		lsr a				lsr  	a
.88b3	a8		tay				tay
.88b4	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.88b7					_AMXCheckOkay:
.88b7	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.88b8	88		dey				dey
.88b9	10 fc		bpl $88b7			bpl 	_AMXCheckOkay
.88bb	90 2a		bcc $88e7			bcc 	_AMXFail 				; not allowed.
.88bd	8a		txa				txa  							; get mask back
.88be	29 1f		and #$1f			and 	#$1F
.88c0					_AMXHaveInfo:
.88c0	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.88c2	10 05		bpl $88c9			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.88c4	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.88c7	d0 1e		bne $88e7			bne 	_AMXFail
.88c9					_AMXAnySize:
.88c9	18		clc				clc 							; add offset to the base opcode
.88ca	6d a4 04	adc $04a4			adc 	BaseOpcode
.88cd					_AMXOutputCode:
.88cd	20 38 88	jsr $8838			jsr 	AssemblerWriteByte 		; write the opcode out.
.88d0	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.88d2	f0 10		beq $88e4			beq 	_AMXExit
.88d4	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.88d7	20 38 88	jsr $8838			jsr 	AssemblerWriteByte
.88da	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.88dc	30 06		bmi $88e4			bmi 	_AMXExit
.88de	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.88e1	20 38 88	jsr $8838			jsr 	AssemblerWriteByte
.88e4					_AMXExit:
.88e4	7a		ply				ply
.88e5	38		sec				sec
.88e6	60		rts				rts
.88e7					_AMXFail:
.88e7	a0 00		ldy #$00			ldy 	#0
.88e9					_AMXCheckOddities:
.88e9	8a		txa				txa
.88ea	d9 12 89	cmp $8912,y			cmp 	ExtraOpcode+2,y 		; match address mode
.88ed	d0 16		bne $8905			bne 	_AMXCONext
.88ef	b9 10 89	lda $8910,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.88f2	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.88f5	d0 0e		bne $8905			bne 	_AMXCONext
.88f7	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.88f9	10 05		bpl $8900			bpl 	_AMXCONotZero
.88fb	ad 10 04	lda $0410			lda 	NSMantissa1
.88fe	d0 05		bne $8905			bne 	_AMXCONext
.8900					_AMXCONotZero:
.8900	b9 11 89	lda $8911,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8903	80 c8		bra $88cd			bra 	_AMXOutputCode 			; and assemble it
.8905					_AMXCONext:
.8905	c8		iny				iny
.8906	c8		iny				iny
.8907	c8		iny				iny
.8908	b9 10 89	lda $8910,y			lda 	ExtraOpcode+0,y 		; end of table
.890b	d0 dc		bne $88e9			bne 	_AMXCheckOddities
.890d					_AMXCOFail:
.890d	7a		ply				ply
.890e	18		clc				clc
.890f	60		rts				rts
.8910					ExtraOpcode:
>8910	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8913	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8916	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8919	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>891c	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>891f	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8922	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8925	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8928	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>892b	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>892e	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.892f					LabelHere:
.892f	c8		iny				iny 								; skip .
.8930	a2 00		ldx #$00			ldx 	#0 							; get a term
.8932	20 39 9b	jsr $9b39			jsr 	EvaluateTerm 				; get a term
.8935	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8938	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.893a	d0 24		bne $8960			bne 	_ALType
.893c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.893f	85 36		sta $36				sta 	zTemp0
.8941	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8944	85 37		sta $37				sta 	zTemp0+1
.8946	5a		phy				phy 								; copy address in.
.8947	a0 01		ldy #$01			ldy 	#1
.8949	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.894c	92 36		sta ($36)			sta 	(zTemp0)
.894e	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8951	91 36		sta ($36),y			sta 	(zTemp0),y
.8953	c8		iny				iny
.8954	a9 00		lda #$00			lda 	#0
.8956	91 36		sta ($36),y			sta 	(zTemp0),y
.8958	c8		iny				iny
.8959	91 36		sta ($36),y			sta 	(zTemp0),y
.895b	c8		iny				iny
.895c	91 36		sta ($36),y			sta 	(zTemp0),y
.895e	7a		ply				ply
.895f	60		rts				rts
.8960					_ALType:
.8960	4c 88 ad	jmp $ad88			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8963					TypeAndCalculateOperand:
.8963	b1 30		lda ($30),y			lda 	(codePtr),y
.8965	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8967	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8969	f0 5b		beq $89c6			beq 	_TACOExit
.896b	c9 80		cmp #$80			cmp 	#KWC_EOL
.896d	f0 57		beq $89c6			beq 	_TACOExit
.896f	c8		iny				iny
.8970	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8972	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8974	f0 51		beq $89c7			beq 	CalculateOperand
.8976	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8978	f0 1f		beq $8999			beq 	_TACOIndirect
.897a	88		dey				dey 								; undo get of first character
.897b	20 c7 89	jsr $89c7			jsr 	CalculateOperand 			; get operand
.897e	b1 30		lda ($30),y			lda 	(codePtr),y
.8980	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8982	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8984	d0 40		bne $89c6			bne 	_TACOExit
.8986	c8		iny				iny
.8987	20 0f a7	jsr $a70f			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.898a	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.898c	c9 58		cmp #$58			cmp 	#'X'
.898e	f0 36		beq $89c6			beq 	_TACOExit
.8990	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8992	c9 59		cmp #$59			cmp 	#'Y'
.8994	f0 30		beq $89c6			beq 	_TACOExit
.8996					_TACOSyntax:
.8996	4c 7e ad	jmp $ad7e			jmp 	SyntaxError
.8999					_TACOIndirect:
.8999	20 c7 89	jsr $89c7			jsr 	CalculateOperand 			; get the operand
.899c	b1 30		lda ($30),y			lda 	(codePtr),y
.899e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.89a0	f0 17		beq $89b9			beq 	_TACOIndX
.89a2	20 98 a7	jsr $a798			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.89a5	b1 30		lda ($30),y			lda 	(codePtr),y
.89a7	a2 d1		ldx #$d1			ldx 	#AM_IND
.89a9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.89ab	d0 19		bne $89c6			bne 	_TACOExit
.89ad	c8		iny				iny
.89ae	20 0f a7	jsr $a70f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.89b1	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.89b3	d0 e1		bne $8996			bne 	_TACOSyntax
.89b5	a2 d0		ldx #$d0			ldx 	#AM_INDY
.89b7	80 0d		bra $89c6			bra 	_TACOExit
.89b9					_TACOIndX:
.89b9	c8		iny				iny
.89ba	20 0f a7	jsr $a70f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.89bd	c9 58		cmp #$58			cmp 	#'X' 						; check X
.89bf	d0 d5		bne $8996			bne 	_TACOSyntax
.89c1	20 98 a7	jsr $a798			jsr 	CheckRightBracket			; check )
.89c4	a2 c0		ldx #$c0			ldx 	#AM_INDX
.89c6					_TACOExit:
.89c6	60		rts				rts
.89c7					CalculateOperand:
.89c7	48		pha				pha
.89c8	da		phx				phx
.89c9	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.89cb	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger
.89ce	fa		plx				plx
.89cf	68		pla				pla
.89d0	60		rts				rts
.a70f					TACOCheckXY:
.a70f	b1 30		lda ($30),y			lda 	(codePtr),y
.a711	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a713	c9 40		cmp #$40			cmp 	#$40
.a715	d0 21		bne $a738			bne 	_TCXYFail
.a717	b1 30		lda ($30),y			lda 	(codePtr),y
.a719	18		clc				clc
.a71a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a71c	85 37		sta $37				sta 	zTemp0+1
.a71e	c8		iny				iny
.a71f	b1 30		lda ($30),y			lda 	(codePtr),y
.a721	c8		iny				iny
.a722	85 36		sta $36				sta 	zTemp0
.a724	5a		phy				phy 								; save position
.a725	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a727	b1 36		lda ($36),y			lda 	(zTemp0),y
.a729	d0 0c		bne $a737			bne 	_TCXYPopFail
.a72b	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a72d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a72f	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a731	f0 08		beq $a73b			beq 	_TCXYFound
.a733	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a735	f0 04		beq $a73b			beq 	_TCXYFound
.a737					_TCXYPopFail:
.a737	7a		ply				ply
.a738					_TCXYFail:
.a738	a9 00		lda #$00			lda 	#0
.a73a	60		rts				rts
.a73b					_TCXYFound:
.a73b	7a		ply				ply 								; restore position
.a73c	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a73e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.89d1					EditProgramCode:
.89d1	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.89d4	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.89d7	20 76 a0	jsr $a076			jsr 	MemorySearch
.89da	90 05		bcc $89e1			bcc 	_EPCNoDelete 				; reached the end don't delete
.89dc	d0 03		bne $89e1			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.89de	20 67 af	jsr $af67			jsr 	MemoryDeleteLine 			; delete the line
.89e1					_EPCNoDelete:
.89e1	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.89e4	c9 80		cmp #$80			cmp 	#KWC_EOL
.89e6	f0 0d		beq $89f5			beq 	_EPCNoInsert
.89e8	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.89eb	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.89ee	20 76 a0	jsr $a076			jsr 	MemorySearch
.89f1	18		clc				clc 								; insert at this point.
.89f2	20 9e af	jsr $af9e			jsr 	MemoryInsertLine 			; insert the line
.89f5					_EPCNoInsert:
.89f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.89f6					WarmStart:
.89f6	a2 ff		ldx #$ff			ldx 	#$FF
.89f8	9a		txs				txs
.89f9	20 39 af	jsr $af39			jsr 	EXTInputLine 				; get line to lineBuffer
.89fc	20 90 a4	jsr $a490			jsr 	TokeniseLine 				; tokenise the line
.89ff	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8a02	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8a05	d0 17		bne $8a1e			bne 	_WSEditCode 				; if so,edit code.
.8a07	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8a0a	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8a0c	85 30		sta $30				sta 	codePtr
.8a0e	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8a10	85 31		sta $31				sta 	codePtr+1
.8a12	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8a15	c9 80		cmp #$80			cmp 	#KWC_EOL
.8a17	f0 dd		beq $89f6			beq 	WarmStart
.8a19	20 27 90	jsr $9027			jsr 	RUNCodePointerLine 			; execute that line.
.8a1c	80 d8		bra $89f6			bra 	WarmStart
.8a1e					_WSEditCode:
.8a1e	20 d1 89	jsr $89d1			jsr 	EditProgramCode
.8a21	20 8f 8a	jsr $8a8f			jsr 	ClearCommand
.8a24	80 d0		bra $89f6			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8a26					AssembleCommand:
.8a26	a2 00		ldx #$00			ldx 	#0
.8a28	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger 		; start address
.8a2b	ad 08 04	lda $0408			lda 	NSMantissa0
.8a2e	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8a31	ad 10 04	lda $0410			lda 	NSMantissa1
.8a34	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8a37	20 a0 a7	jsr $a7a0			jsr 	CheckComma
.8a3a	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger 		; options
.8a3d	ad 08 04	lda $0408			lda 	NSMantissa0
.8a40	8d a0 04	sta $04a0			sta 	AssemblerControl
.8a43	60		rts				rts
.8a44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8a45					AssertCommand:
.8a45	a2 00		ldx #$00			ldx 	#0
.8a47	20 8e 9f	jsr $9f8e			jsr 	EvaluateInteger 			; the assert test
.8a4a	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; exit if result is non zero.
.8a4d	d0 05		bne $8a54			bne 	_ACExit
.8a4f	a9 0a		lda #$0a		lda	#10
.8a51	4c 5f 94	jmp $945f		jmp	ErrorHandler
.8a54					_ACExit:
.8a54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8a55					CallCommand:
.8a55	a2 00		ldx #$00			ldx 	#0
.8a57	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger
.8a5a					_CCClear
.8a5a	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8a5b	20 17 a0	jsr $a017			jsr 	NSMSetZero
.8a5e	e0 04		cpx #$04			cpx 	#4
.8a60	d0 f8		bne $8a5a			bne 	_CCClear
.8a62	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8a64					_CCCParam:
.8a64	b1 30		lda ($30),y			lda 	(codePtr),y
.8a66	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a68	d0 09		bne $8a73			bne 	_CCCRun6502
.8a6a	c8		iny				iny 								; skip comma
.8a6b	e8		inx				inx	 								; next level
.8a6c	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8a6f	e0 03		cpx #$03			cpx 	#3
.8a71	90 f1		bcc $8a64			bcc 	_CCCParam 					; done all 3 ?
.8a73					_CCCRun6502:
.8a73	5a		phy				phy 								; save position
.8a74	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8a77	85 37		sta $37				sta 	zTemp0+1
.8a79	ad 08 04	lda $0408			lda 	NSMantissa0
.8a7c	85 36		sta $36				sta 	zTemp0
.8a7e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8a81	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8a84	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8a87	20 8c 8a	jsr $8a8c			jsr 	_CCCZTemp0 					; call zTemp0
.8a8a	7a		ply				ply 								; restore position and exit
.8a8b	60		rts				rts
.8a8c					_CCCZTemp0:
.8a8c	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8a8f					ClearCommand:
.8a8f	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8a91	85 36		sta $36				sta 	0+zTemp0
.8a93	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8a95	85 37		sta $37				sta 	1+zTemp0
.8a97					_ClearZeroLoop:
.8a97	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8a99	f0 24		beq $8abf			beq 	_ClearZeroEnd
.8a9b	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8a9d	a9 00		lda #$00			lda 	#0
.8a9f					_ClearOneVariable:
.8a9f	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa1	c8		iny				iny
.8aa2	c0 08		cpy #$08			cpy 	#8
.8aa4	d0 f9		bne $8a9f			bne 	_ClearOneVariable
.8aa6	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8aa8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aaa	c9 18		cmp #$18			cmp 	#NSTProcedure
.8aac	d0 04		bne $8ab2			bne 	_ClearNotProcedure
.8aae	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8ab0	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab2					_ClearNotProcedure:
.8ab2	18		clc				clc 								; go to the next variable
.8ab3	b2 36		lda ($36)			lda 	(zTemp0)
.8ab5	65 36		adc $36				adc 	zTemp0
.8ab7	85 36		sta $36				sta 	zTemp0
.8ab9	90 dc		bcc $8a97			bcc 	_ClearZeroLoop
.8abb	e6 37		inc $37				inc 	zTemp0+1
.8abd	80 d8		bra $8a97			bra 	_ClearZeroLoop
.8abf					_ClearZeroEnd:
.8abf	18		clc				clc
.8ac0	a5 36		lda $36				lda 	zTemp0
.8ac2	69 01		adc #$01			adc 	#1
.8ac4	8d 8c 04	sta $048c			sta 	lowMemPtr
.8ac7	a5 37		lda $37				lda 	zTemp0+1
.8ac9	69 00		adc #$00			adc 	#0
.8acb	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ace	20 30 a1	jsr $a130			jsr 	StackReset
.8ad1	20 81 b0	jsr $b081			jsr 	StringSystemInitialise
.8ad4	20 7f 93	jsr $937f			jsr 	ProcedureScan
.8ad7	20 e3 8f	jsr $8fe3			jsr 	Command_Restore
.8ada	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8add	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8ae0	9c a0 04	stz $04a0			stz 	AssemblerControl
.8ae3	20 26 9d	jsr $9d26			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8ae6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8ae7					Command_Data:
.8ae7	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8ae9	a2 80		ldx #$80			ldx 	#KWC_EOL
.8aeb	20 d1 93	jsr $93d1			jsr 	ScanForward
.8aee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8aef					DimCommand:
.8aef	b1 30		lda ($30),y			lda 	(codePtr),y
.8af1	29 c0		and #$c0			and 	#$C0
.8af3	c9 40		cmp #$40			cmp 	#$40
.8af5	d0 7a		bne $8b71			bne 	_DCSyntax
.8af7	b1 30		lda ($30),y			lda 	(codePtr),y
.8af9	18		clc				clc
.8afa	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8afc	85 3f		sta $3f				sta 	zaTemp+1
.8afe	c8		iny				iny
.8aff	b1 30		lda ($30),y			lda 	(codePtr),y
.8b01	c8		iny				iny
.8b02	85 3e		sta $3e				sta 	zaTemp
.8b04	5a		phy				phy
.8b05	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8b07	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b09	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8b0b	c9 18		cmp #$18			cmp 	#NSTProcedure
.8b0d	f0 62		beq $8b71			beq 	_DCSyntax
.8b0f	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8b11	29 04		and #$04			and 	#NSBIsArray
.8b13	f0 64		beq $8b79			beq 	_DCType
.8b15	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8b17	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b19	d0 59		bne $8b74			bne 	_DCRedefine
.8b1b	7a		ply				ply
.8b1c	20 7c 8b	jsr $8b7c			jsr 	_DCGetSize 				; get array size, check it.
.8b1f	5a		phy				phy
.8b20	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8b22	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8b24	7a		ply				ply 							; is there a second (e.g. ,x)
.8b25	b1 30		lda ($30),y			lda 	(codePtr),y
.8b27	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b29	d0 0a		bne $8b35			bne 	_DCOneDimension
.8b2b	c8		iny				iny 							; skip comma
.8b2c	20 7c 8b	jsr $8b7c			jsr 	_DCGetSize 				; get 2nd array size
.8b2f	5a		phy				phy
.8b30	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8b32	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b34	7a		ply				ply
.8b35					_DCOneDimension:
.8b35	5a		phy				phy 							; save position
.8b36	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8b38	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b3a	aa		tax				tax
.8b3b	c8		iny				iny
.8b3c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b3e	e8		inx				inx 							; bump them.
.8b3f	1a		inc a				inc 	a
.8b40	20 1a ac	jsr $ac1a			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8b43	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8b45	29 e0		and #$e0			and 	#$E0
.8b47	d0 23		bne $8b6c			bne 	_DCSize
.8b49	a0 02		ldy #$02			ldy 	#2 						; get base type
.8b4b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b4d	20 8a 8b	jsr $8b8a			jsr 	ScaleByBaseType 		; scale by base type
.8b50	a5 36		lda $36				lda 	zTemp0
.8b52	a6 37		ldx $37				ldx 	zTemp0+1
.8b54	20 e8 9c	jsr $9ce8			jsr 	AllocateXABytes 		; allocate memory
.8b57	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8b59	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b5b	c8		iny				iny
.8b5c	8a		txa				txa
.8b5d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b5f	7a		ply				ply 							; get position back
.8b60	20 98 a7	jsr $a798			jsr 	CheckRightBracket 		; check )
.8b63	b1 30		lda ($30),y			lda 	(codePtr),y
.8b65	c8		iny				iny 							; consume in case
.8b66	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8b68	f0 85		beq $8aef			beq 	DimCommand
.8b6a	88		dey				dey 							; undo consume
.8b6b	60		rts				rts
.8b6c					_DCSize:
.8b6c	a9 16		lda #$16		lda	#22
.8b6e	4c 5f 94	jmp $945f		jmp	ErrorHandler
.8b71					_DCSyntax:
.8b71	4c 7e ad	jmp $ad7e			jmp 	SyntaxError
.8b74					_DCRedefine:
.8b74	a9 15		lda #$15		lda	#21
.8b76	4c 5f 94	jmp $945f		jmp	ErrorHandler
.8b79					_DCType:
.8b79	4c 88 ad	jmp $ad88			jmp 	TypeError
.8b7c					_DCGetSize:
.8b7c	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8b7e	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger 	; get array dimension
.8b81	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8b83	f0 e7		beq $8b6c			beq 	_DCSize
.8b85	c9 fe		cmp #$fe			cmp 	#254
.8b87	f0 e3		beq $8b6c			beq 	_DCSize
.8b89	60		rts				rts
.8b8a					ScaleByBaseType:
.8b8a	29 10		and #$10			and 	#NSBIsString 			; is it string
.8b8c	d0 19		bne $8ba7			bne 	_SBBTString
.8b8e	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8b90	48		pha				pha
.8b91	a5 36		lda $36				lda 	zTemp0
.8b93	48		pha				pha
.8b94	06 36		asl $36				asl 	zTemp0 					; x 2
.8b96	26 37		rol $37				rol 	zTemp0+1
.8b98	06 36		asl $36				asl 	zTemp0 					; x 4
.8b9a	26 37		rol $37				rol 	zTemp0+1
.8b9c	68		pla				pla 							; add stacked value = x 5
.8b9d	65 36		adc $36				adc 	zTemp0
.8b9f	85 36		sta $36				sta 	zTemp0
.8ba1	68		pla				pla
.8ba2	65 37		adc $37				adc 	zTemp0+1
.8ba4	85 37		sta $37				sta 	zTemp0+1
.8ba6	60		rts				rts
.8ba7					_SBBTString:
.8ba7	06 36		asl $36				asl 	zTemp0
.8ba9	26 37		rol $37				rol 	zTemp0+1
.8bab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8bac					EndCommand:
.8bac	4c f6 89	jmp $89f6			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8baf					ForCommand:
.8baf	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8bb1	20 cb a0	jsr $a0cb			jsr 	StackOpen
.8bb4	a2 00		ldx #$00			ldx 	#0
.8bb6	20 39 9b	jsr $9b39			jsr 	EvaluateTerm
.8bb9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8bbc	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8bbe	d0 49		bne $8c09			bne		_FCError
.8bc0	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8bc2	20 a8 a7	jsr $a7a8			jsr 	CheckNextA
.8bc5	e8		inx				inx
.8bc6	20 8e 9f	jsr $9f8e			jsr 	EvaluateInteger 			; <from> in +1
.8bc9	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcb	c8		iny				iny 								; consume it
.8bcc	48		pha				pha 								; save on stack for later
.8bcd	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8bcf	f0 04		beq $8bd5			beq 	_FCNoSyntax
.8bd1	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8bd3	d0 37		bne $8c0c			bne 	_FCSyntaxError
.8bd5					_FCNoSyntax:
.8bd5	e8		inx				inx
.8bd6	20 8e 9f	jsr $9f8e			jsr 	EvaluateInteger
.8bd9	20 0f a1	jsr $a10f			jsr 	STKSaveCodePosition 		; save loop back position
.8bdc	68		pla				pla 								; restore DOWNTO or TO
.8bdd	5a		phy				phy 								; save Y on the stack
.8bde	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8be0	f0 02		beq $8be4			beq 	_FCNotDownTo
.8be2	a9 02		lda #$02			lda 	#2
.8be4					_FCNotDownTo:
.8be4	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8be5	a0 10		ldy #$10			ldy 	#16
.8be7	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8be9	a0 06		ldy #$06			ldy 	#6
.8beb	ad 08 04	lda $0408			lda 	NSMantissa0
.8bee	91 34		sta ($34),y			sta 	(basicStack),y
.8bf0	ad 10 04	lda $0410			lda 	NSMantissa1
.8bf3	c8		iny				iny
.8bf4	91 34		sta ($34),y			sta 	(basicStack),y
.8bf6	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8bf8	a2 01		ldx #$01			ldx 	#1
.8bfa	20 0f 8c	jsr $8c0f			jsr 	FCIntegerToStack
.8bfd	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8bff	a2 02		ldx #$02			ldx 	#2
.8c01	20 0f 8c	jsr $8c0f			jsr 	FCIntegerToStack
.8c04	20 2f 8c	jsr $8c2f			jsr 	CopyIndexToReference
.8c07	7a		ply				ply 								; restore position
.8c08	60		rts				rts
.8c09					_FCError:
.8c09	4c 88 ad	jmp $ad88			jmp 	TypeError
.8c0c					_FCSyntaxError:
.8c0c	4c 7e ad	jmp $ad7e			jmp 	SyntaxError
.8c0f					FCIntegerToStack:
.8c0f	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8c12	10 03		bpl $8c17			bpl	 	_FCNotNegative
.8c14	20 cc 9f	jsr $9fcc			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c17					_FCNotNegative:
.8c17	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c1a	91 34		sta ($34),y			sta 	(basicStack),y
.8c1c	c8		iny				iny
.8c1d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c20	91 34		sta ($34),y			sta 	(basicStack),y
.8c22	c8		iny				iny
.8c23	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8c26	91 34		sta ($34),y			sta 	(basicStack),y
.8c28	c8		iny				iny
.8c29	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8c2c	91 34		sta ($34),y			sta 	(basicStack),y
.8c2e	60		rts				rts
.8c2f					CopyIndexToReference:
.8c2f	5a		phy				phy
.8c30	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c32	38		sec				sec 								; (because we copy from offset 8)
.8c33	b1 34		lda ($34),y			lda 	(basicStack),y
.8c35	e9 08		sbc #$08			sbc 	#8
.8c37	85 36		sta $36				sta 	zTemp0
.8c39	c8		iny				iny
.8c3a	b1 34		lda ($34),y			lda 	(basicStack),y
.8c3c	e9 00		sbc #$00			sbc 	#0
.8c3e	85 37		sta $37				sta 	zTemp0+1
.8c40	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c42	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8c44	b1 34		lda ($34),y			lda 	(basicStack),y
.8c46	0a		asl a				asl 	a 							; into carry
.8c47	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8c49	90 14		bcc $8c5f			bcc 	_CITRNormal
.8c4b	38		sec				sec
.8c4c					_CITRNegative:
.8c4c	a9 00		lda #$00			lda 	#0
.8c4e	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c50	91 36		sta ($36),y			sta 	(zTemp0),y
.8c52	c8		iny				iny
.8c53	ca		dex				dex
.8c54	d0 f6		bne $8c4c			bne 	_CITRNegative
.8c56	88		dey				dey 								; look at MSB of mantissa
.8c57	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8c59	09 80		ora #$80			ora 	#$80
.8c5b	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5d	7a		ply				ply
.8c5e	60		rts				rts
.8c5f					_CITRNormal:
.8c5f	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8c61	91 36		sta ($36),y			sta 	(zTemp0),y
.8c63	c8		iny				iny
.8c64	ca		dex				dex
.8c65	d0 f8		bne $8c5f			bne 	_CITRNormal
.8c67	7a		ply				ply 								; and exit.
.8c68	60		rts				rts
.8c69					NextCommand:
.8c69	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8c6b	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8c6d	20 f7 a0	jsr $a0f7			jsr 	StackCheckFrame
.8c70	5a		phy				phy
.8c71	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8c73	b1 34		lda ($34),y			lda 	(basicStack),y
.8c75	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8c77	30 02		bmi $8c7b			bmi 	_NCStepNeg
.8c79	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8c7b					_NCStepNeg:
.8c7b	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8c7d	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8c7f	18		clc				clc
.8c80					_NCBump:
.8c80	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8c82	91 34		sta ($34),y			sta 	(basicStack),y
.8c84	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8c86	c8		iny				iny 								; next byte
.8c87	ca		dex				dex 								; do four times
.8c88	d0 f6		bne $8c80			bne 	_NCBump
.8c8a	20 2f 8c	jsr $8c2f			jsr		CopyIndexToReference		; copy it to the reference variable.
.8c8d	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8c8f	b1 34		lda ($34),y			lda 	(basicStack),y
.8c91	0a		asl a				asl 	a 							; sign bit to carry
.8c92	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8c94	85 38		sta $38				sta 	zTemp1
.8c96	90 02		bcc $8c9a			bcc 	_NCCompRev 					; use if step is +ve
.8c98	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8c9a					_NCCompRev:
.8c9a	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8c9c	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8c9e	85 39		sta $39				sta 	zTemp1+1
.8ca0	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8ca2	38		sec				sec
.8ca3					_NCCompare:
.8ca3	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8ca5	b1 34		lda ($34),y			lda 	(basicStack),y
.8ca7	a4 39		ldy $39				ldy 	zTemp1+1
.8ca9	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8cab	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8cad	e6 39		inc $39				inc 	zTemp1+1
.8caf	ca		dex				dex 								; do it 4 times.
.8cb0	d0 f1		bne $8ca3			bne 	_NCCompare
.8cb2	50 02		bvc $8cb6			bvc 	_NCNoOverflow 				; convert to signed comparison
.8cb4	49 80		eor #$80			eor 	#$80
.8cb6					_NCNoOverflow:
.8cb6	7a		ply				ply 								; restore Y position
.8cb7	0a		asl a				asl 	a 							; is bit 7 set.
.8cb8	90 04		bcc $8cbe			bcc 	_NCLoopback 				; if no , >= so loop back
.8cba	20 e9 a0	jsr $a0e9			jsr 	StackClose 					; exit the loop
.8cbd	60		rts				rts
.8cbe					_NCLoopBack:
.8cbe	20 20 a1	jsr $a120			jsr 	STKLoadCodePosition 		; loop back
.8cc1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8cc2					Command_GOSUB:
.8cc2	a2 00		ldx #$00			ldx 	#0
.8cc4	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8cc7	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8cc9	20 cb a0	jsr $a0cb			jsr 	StackOpen 					; create frame
.8ccc	20 0f a1	jsr $a10f			jsr 	STKSaveCodePosition 		; save current position
.8ccf	4c e5 8c	jmp $8ce5			jmp 	GotoStackX
.8cd2					Command_RETURN:
.8cd2	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8cd4	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8cd6	20 f7 a0	jsr $a0f7			jsr 	StackCheckFrame
.8cd9	20 20 a1	jsr $a120			jsr 	STKLoadCodePosition 		; restore code position
.8cdc	20 e9 a0	jsr $a0e9			jsr 	StackClose
.8cdf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8ce0					GotoCommand:
.8ce0	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8ce2	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger
.8ce5					GotoStackX:
.8ce5	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8ce8	48		pha				pha 								; it is slightly inefficient, just in cases.
.8ce9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8cec	fa		plx				plx
.8ced	20 76 a0	jsr $a076			jsr 	MemorySearch 				; transfer to line number AX.
.8cf0	90 05		bcc $8cf7			bcc 	_GotoError 					; not found, off end.
.8cf2	d0 03		bne $8cf7			bne 	_GotoError 					; not found exactly
.8cf4	4c 20 90	jmp $9020			jmp 	RunNewLine 					; and go straight to new line code.
.8cf7					_GotoError:
.8cf7	a9 0d		lda #$0d		lda	#13
.8cf9	4c 5f 94	jmp $945f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8cfc					IfCommand:
.8cfc	a2 00		ldx #$00			ldx 	#0 							; If what.
.8cfe	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber
.8d01	b1 30		lda ($30),y			lda 	(codePtr),y
.8d03	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8d05	d0 0a		bne $8d11			bne 	_IFStructured
.8d07	c8		iny				iny 								; consume THEN
.8d08	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; is it zero
.8d0b	f0 01		beq $8d0e			beq 	_IfFail 					; if fail, go to next line
.8d0d	60		rts				rts 								; if THEN just continue
.8d0e					_IfFail:
.8d0e	4c 85 90	jmp $9085			jmp 	EOLCommand
.8d11					_IfStructured:
.8d11	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; is it zero
.8d14	d0 07		bne $8d1d			bne 	_IfExit 					; if not, then continue normally.
.8d16	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8d18	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8d1a	20 d1 93	jsr $93d1			jsr 	ScanForward 				; and run from there/
.8d1d					_IfExit:
.8d1d	60		rts				rts
.8d1e					ElseCode:
.8d1e	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d20	aa		tax				tax 								; so just go to the structure exit
.8d21	20 d1 93	jsr $93d1			jsr 	ScanForward
.8d24	60		rts				rts
.8d25					EndIf:
.8d25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8d26					LetCommand:
.8d26	a2 00		ldx #$00			ldx 	#0
.8d28	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2a	c9 10		cmp #$10			cmp 	#KWD_AT
.8d2c	d0 16		bne $8d44			bne 	_LCStandard
.8d2e	c8		iny				iny 								; skip equal
.8d2f	20 39 9b	jsr $9b39			jsr 	EvaluateTerm 				; get a number
.8d32	20 7d 99	jsr $997d			jsr 	Dereference 				; dereference it
.8d35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8d38	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8d3a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8d3d	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8d3f	d0 10		bne $8d51			bne 	_LCMain
.8d41	4c 88 ad	jmp $ad88			jmp 	TypeError 					; was a reference before.
.8d44					_LCStandard:
.8d44	ad 50 98	lda $9850			lda 	PrecedenceLevel+"*"			; precedence > this
.8d47	20 6a 98	jsr $986a			jsr 	EvaluateExpressionAtPrecedence
.8d4a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8d4d	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8d4f	f0 0e		beq $8d5f			beq 	_LetGoProc 					; it's a procedure call.
.8d51					_LCMain:
.8d51	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8d53	20 a8 a7	jsr $a7a8			jsr 	CheckNextA
.8d56	e8		inx				inx 								; RHS
.8d57	20 62 9f	jsr $9f62			jsr 	EvaluateValue
.8d5a	ca		dex				dex
.8d5b	20 62 8d	jsr $8d62			jsr 	AssignVariable
.8d5e	60		rts				rts
.8d5f					_LetGoProc:
.8d5f	4c fb 8e	jmp $8efb			jmp 	CallProcedure
.8d62					AssignVariable:
.8d62	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8d65	48		pha				pha 								; save a copy
.8d66	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8d69	29 10		and #$10			and 	#NSBIsString
.8d6b	d0 0b		bne $8d78			bne 	_ASError
.8d6d	68		pla				pla 								; get back
.8d6e	29 10		and #$10			and 	#NSBIsString 				; check type
.8d70	d0 03		bne $8d75			bne 	_ASString
.8d72	4c a5 98	jmp $98a5			jmp 	AssignNumber
.8d75					_ASString:
.8d75	4c 13 99	jmp $9913			jmp 	AssignString
.8d78					_ASError:
.8d78	4c 88 ad	jmp $ad88			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8d7b					Command_List:
.8d7b	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8d7e	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8d81	a9 ff		lda #$ff			lda 	#$FF
.8d83	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8d86	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8d89	b1 30		lda ($30),y			lda 	(codePtr),y
.8d8b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d8d	f0 1e		beq $8dad			beq 	_CLSecond
.8d8f	20 0b 8e	jsr $8e0b			jsr 	CLIsDigit 					; if not digit, list all
.8d92	b0 24		bcs $8db8			bcs 	_CLStart
.8d94	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8d96	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger
.8d99	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d9d	f0 0e		beq $8dad			beq 	_CLSecond 					; if so go get it
.8d9f	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8da2	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8da5	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8da8	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8dab	80 0b		bra $8db8			bra 	_CLStart
.8dad					_CLSecond:
.8dad	c8		iny				iny 								; consume comma
.8dae	20 0b 8e	jsr $8e0b			jsr 	CLIsDigit 					; digit found
.8db1	b0 05		bcs $8db8			bcs 	_CLStart 					; if not, continue listing
.8db3	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8db5	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger
.8db8					_CLStart
.8db8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8dba	85 30		sta $30				sta 	codePtr
.8dbc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8dbe	85 31		sta $31				sta 	codePtr+1
.8dc0					_CLLoop:
.8dc0	20 64 af	jsr $af64			jsr 	EXTBreakCheck 				; break check
.8dc3	f0 30		beq $8df5			beq 	_CLExit
.8dc5	b2 30		lda ($30)			lda 	(codePtr)
.8dc7	f0 2c		beq $8df5			beq 	_CLExit
.8dc9	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8dcb	20 f8 8d	jsr $8df8			jsr 	CLCompareLineNo
.8dce	90 18		bcc $8de8			bcc 	_CLNext
.8dd0	a2 07		ldx #$07			ldx 	#7
.8dd2	20 f8 8d	jsr $8df8			jsr 	CLCompareLineNo
.8dd5	f0 02		beq $8dd9			beq 	_CLDoThisOne
.8dd7	b0 0f		bcs $8de8			bcs 	_CLNext
.8dd9					_CLDoThisOne:
.8dd9	20 2d 92	jsr $922d			jsr 	ListConvertLine 			; convert line into token Buffer
.8ddc	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8dde	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8de0	20 b8 94	jsr $94b8			jsr 	PrintStringXA
.8de3	a9 0d		lda #$0d			lda 	#13 						; new line
.8de5	20 23 af	jsr $af23			jsr 	EXTPrintCharacter
.8de8					_CLNext:
.8de8	18		clc				clc
.8de9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8deb	65 30		adc $30				adc 	codePtr
.8ded	85 30		sta $30				sta 	codePtr
.8def	90 02		bcc $8df3			bcc 	_CREExit
.8df1	e6 31		inc $31				inc 	codePtr+1
.8df3					_CREExit:
.8df3	80 cb		bra $8dc0			bra 	_CLLoop
.8df5					_CLExit:
.8df5	4c f6 89	jmp $89f6			jmp 	WarmStart
.8df8					CLCompareLineNo:
.8df8	38		sec				sec
.8df9	a0 01		ldy #$01			ldy 	#1
.8dfb	b1 30		lda ($30),y			lda 	(codePtr),y
.8dfd	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8e00	85 36		sta $36				sta 	zTemp0
.8e02	c8		iny				iny
.8e03	b1 30		lda ($30),y			lda 	(codePtr),y
.8e05	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8e08	05 36		ora $36				ora 	zTemp0
.8e0a	60		rts				rts
.8e0b					CLIsDigit:
.8e0b	b1 30		lda ($30),y			lda 	(codePtr),y
.8e0d	c9 30		cmp #$30			cmp 	#"0"
.8e0f	90 03		bcc $8e14			bcc	 	_CLIDExitFalse
.8e11	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e13	60		rts				rts
.8e14					_CLIDExitFalse:
.8e14	38		sec				sec
.8e15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8e16					Command_LOCAL:
.8e16	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8e18	20 24 8e	jsr $8e24			jsr 	LocaliseNextTerm 			; convert term to a local.
.8e1b	b1 30		lda ($30),y			lda 	(codePtr),y
.8e1d	c8		iny				iny
.8e1e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e20	f0 f4		beq $8e16			beq 	Command_LOCAL
.8e22	88		dey				dey 								; unpick pre-get
.8e23	60		rts				rts
.8e24					LocaliseNextTerm:
.8e24	20 39 9b	jsr $9b39			jsr 	EvaluateTerm 				; evaluate the term
.8e27	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e2a	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8e2c	f0 69		beq $8e97			beq		_LNTError
.8e2e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8e31	85 36		sta $36				sta 	zTemp0
.8e33	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e36	85 37		sta $37				sta  	zTemp0+1
.8e38	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e3b	29 10		and #$10			and 	#NSBIsString
.8e3d	d0 22		bne $8e61			bne 	_LNTPushString
.8e3f	5a		phy				phy
.8e40	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8e42					_LNTPushNumLoop:
.8e42	b1 36		lda ($36),y			lda		(zTemp0),y
.8e44	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e47	a9 00		lda #$00			lda 	#0
.8e49	91 36		sta ($36),y			sta 	(zTemp0),y
.8e4b	c8		iny				iny
.8e4c	c0 05		cpy #$05			cpy 	#5
.8e4e	d0 f2		bne $8e42			bne 	_LNTPushNumLoop
.8e50	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8e52	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e55	a5 37		lda $37				lda 	zTemp0+1
.8e57	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e5a	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e5c	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e5f	7a		ply				ply
.8e60	60		rts				rts
.8e61					_LNTPushString:
.8e61	5a		phy				phy
.8e62	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e64	85 38		sta $38				sta 	zTemp1
.8e66	a0 01		ldy #$01			ldy 	#1
.8e68	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6a	85 39		sta $39				sta 	zTemp1+1
.8e6c	a0 00		ldy #$00			ldy 	#0 							; output string
.8e6e	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8e70	f0 0a		beq $8e7c			beq 	_LNTStringOut
.8e72					_LNTPushStrLoop:
.8e72	b1 38		lda ($38),y			lda 	(zTemp1),y
.8e74	f0 06		beq $8e7c			beq 	_LNTStringOut
.8e76	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e79	c8		iny				iny
.8e7a	80 f6		bra $8e72			bra 	_LNTPushStrLoop
.8e7c					_LNTStringOut:
.8e7c	98		tya				tya									; output length
.8e7d	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e80	a9 00		lda #$00			lda 	#0 							; clear original string.
.8e82	92 38		sta ($38)			sta 	(zTemp1)
.8e84	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e87	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e8a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e8d	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e90	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e92	20 a9 a0	jsr $a0a9			jsr 	StackPushByte
.8e95	7a		ply				ply
.8e96	60		rts				rts
.8e97					_LNTError:
.8e97	4c 7e ad	jmp $ad7e			jmp 	SyntaxError
.a73f					LocalPopValue:
.a73f	20 c2 a0	jsr $a0c2			jsr 	StackPopByte
.a742	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a744	d0 17		bne $a75d			bne 	_LPVString
.a746	20 c2 a0	jsr $a0c2			jsr 	StackPopByte 				; address
.a749	85 37		sta $37				sta 	zTemp0+1
.a74b	20 c2 a0	jsr $a0c2			jsr 	StackPopByte
.a74e	85 36		sta $36				sta 	zTemp0
.a750	5a		phy				phy
.a751	a0 04		ldy #$04			ldy 	#4 							; copy back
.a753					_LPVNumberCopy:
.a753	20 c2 a0	jsr $a0c2			jsr 	StackPopByte
.a756	91 36		sta ($36),y			sta 	(zTemp0),y
.a758	88		dey				dey
.a759	10 f8		bpl $a753			bpl 	_LPVNumberCopy
.a75b	7a		ply				ply 								; and complete
.a75c	60		rts				rts
.a75d					_LPVString:
.a75d	20 c2 a0	jsr $a0c2			jsr 	StackPopByte 				; address of record => zTemp0
.a760	85 37		sta $37				sta 	zTemp0+1
.a762	20 c2 a0	jsr $a0c2			jsr 	StackPopByte
.a765	85 36		sta $36				sta 	zTemp0
.a767	5a		phy				phy
.a768	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a76a	85 38		sta $38				sta 	zTemp1
.a76c	a0 01		ldy #$01			ldy 	#1
.a76e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a770	85 39		sta $39				sta 	zTemp1+1
.a772	20 c2 a0	jsr $a0c2			jsr 	StackPopByte 				; # to get => y
.a775	a8		tay				tay
.a776	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a778	f0 0e		beq $a788			beq 	_LPVStringCopied
.a77a	a9 00		lda #$00			lda 	#0 							; NULL on end
.a77c	91 38		sta ($38),y			sta 	(zTemp1),y
.a77e					_LPVStringCopy:
.a77e	88		dey				dey
.a77f	30 07		bmi $a788			bmi 	_LPVStringCopied
.a781	20 c2 a0	jsr $a0c2			jsr 	StackPopByte
.a784	91 38		sta ($38),y			sta 	(zTemp1),y
.a786	80 f6		bra $a77e			bra 	_LPVStringCopy
.a788					_LPVStringCopied:
.a788	fa		plx				plx
.a789	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e9a					NewCommand:
.8e9a	20 54 a0	jsr $a054			jsr 	MemoryNew
.8e9d	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8ea0	20 8f 8a	jsr $8a8f			jsr 	ClearCommand 				; clear everything.
.8ea3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8ea4					Command_Print:
.8ea4	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ea5					_CPLoop:
.8ea5	08		php				php 								; save last action flag
.8ea6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ea8	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8eaa	f0 46		beq $8ef2			beq 	_CPExit
.8eac	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8eae	f0 42		beq $8ef2			beq 	_CPExit
.8eb0	68		pla				pla 								; throw last action flag
.8eb1	b1 30		lda ($30),y			lda 	(codePtr),y
.8eb3	c8		iny				iny
.8eb4	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8eb6	f0 37		beq $8eef			beq 	_CPContinueWithSameLine
.8eb8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8eba	f0 2e		beq $8eea			beq 	_CPTab
.8ebc	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8ebe	f0 26		beq $8ee6			beq 	_CPNewLine
.8ec0	88		dey				dey 								; undo the get.
.8ec1	a2 00		ldx #$00			ldx 	#0
.8ec3	20 62 9f	jsr $9f62			jsr 	EvaluateValue 				; get a value into slot 0
.8ec6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8ec9	29 10		and #$10			and 	#NSBIsString
.8ecb	f0 0b		beq $8ed8			beq 	_CPNumber
.8ecd	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8ed0	ad 08 04	lda $0408			lda 	NSMantissa0
.8ed3	20 b8 94	jsr $94b8			jsr 	PrintStringXA
.8ed6	80 cc		bra $8ea4			bra 	Command_Print 				; loop round clearing carry so NL if end
.8ed8					_CPNumber:
.8ed8	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8eda	20 38 9e	jsr $9e38			jsr 	ConvertNumberToString 		; convert to string
.8edd	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8edf	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8ee1	20 b8 94	jsr $94b8			jsr 	PrintStringXA
.8ee4	80 be		bra $8ea4			bra 	Command_Print 				; loop round clearing carry so NL if end
.8ee6					_CPNewLine:
.8ee6	a9 0d		lda #$0d			lda 	#13
.8ee8	80 02		bra $8eec			bra 	_CPPrintChar
.8eea					_CPTab:
.8eea	a9 09		lda #$09			lda 	#9 							; print TAB
.8eec					_CPPrintChar:
.8eec	20 23 af	jsr $af23			jsr 	EXTPrintCharacter
.8eef					_CPContinueWithSameLine:
.8eef	38		sec				sec 								; loop round with carry set, which
.8ef0	80 b3		bra $8ea5			bra 	_CPLoop 					; will inhibit final CR
.8ef2					_CPExit:
.8ef2	28		plp				plp 								; get last action flag
.8ef3	b0 05		bcs $8efa			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8ef5	a9 0d		lda #$0d			lda 	#13 						; print new line
.8ef7	20 23 af	jsr $af23			jsr 	EXTPrintCharacter
.8efa					_CPExit2:
.8efa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8efb					CallProcedure:
.8efb	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8efd	b1 30		lda ($30),y			lda 	(codePtr),y
.8eff	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8f01	f0 0c		beq $8f0f			beq 	_CPEndParam
.8f03					_CPParamLoop:
.8f03	20 68 98	jsr $9868			jsr 	EvaluateExpression 			; get parameter onto stack
.8f06	e8		inx				inx 								; bump next stack
.8f07	b1 30		lda ($30),y			lda 	(codePtr),y
.8f09	c8		iny				iny
.8f0a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8f0c	f0 f5		beq $8f03			beq 	_CPParamLoop
.8f0e	88		dey				dey 								; unpick.
.8f0f					_CPEndParam:
.8f0f	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8f12	c8		iny				iny									; skip right bracket
.8f13	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8f15	20 cb a0	jsr $a0cb			jsr 	StackOpen
.8f18	20 0f a1	jsr $a10f			jsr 	STKSaveCodePosition 		; save loop position
.8f1b	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8f1e	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8f20	ad 10 04	lda $0410			lda 	NSMantissa1
.8f23	85 37		sta $37				sta 	zTemp0+1
.8f25	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8f27	b2 36		lda ($36)			lda 	(zTemp0)
.8f29	85 30		sta $30				sta 	safePtr
.8f2b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f2d	85 31		sta $31				sta 	safePtr+1
.8f2f	c8		iny				iny
.8f30	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f32	85 32		sta $32				sta 	safePtr+2
.8f34	c8		iny				iny
.8f35	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f37	85 33		sta $33				sta 	safePtr+3
.8f39	c8		iny				iny 								; get Y offset -> Y
.8f3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f3c	a8		tay				tay
.8f3d	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8f3f	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8f42	f0 13		beq $8f57			beq 	_ParamExit 					; if so, exit.
.8f44					_ParamExtract:
.8f44	ca		dex				dex 								; put a local term on the level before
.8f45	20 24 8e	jsr $8e24			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8f48	20 62 8d	jsr $8d62			jsr 	AssignVariable 				; assign stacked value to the variable.
.8f4b	e8		inx				inx 								; advance to next parameter to do.
.8f4c	e8		inx				inx
.8f4d	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8f50	f0 05		beq $8f57			beq 	_ParamExit
.8f52	20 a0 a7	jsr $a7a0			jsr 	CheckComma 					; comma seperating parameters
.8f55	80 ed		bra $8f44			bra 	_ParamExtract
.8f57					_ParamExit:
.8f57	20 98 a7	jsr $a798			jsr 	CheckRightBracket 			; check )
.8f5a	60		rts				rts 								; and continue from here
.a78a					Command_ENDPROC:
.a78a	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a78c	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a78e	20 f7 a0	jsr $a0f7			jsr 	StackCheckFrame
.a791	20 20 a1	jsr $a120			jsr 	STKLoadCodePosition 		; restore code position
.a794	20 e9 a0	jsr $a0e9			jsr 	StackClose
.a797	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8f5b					Command_Read:
.8f5b	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8f5d	20 39 9b	jsr $9b39			jsr 	EvaluateTerm
.8f60	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f63	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8f65	f0 4a		beq $8fb1			beq 	_CRSyntax 					; check reference (bit 0)
.8f67	20 fa 8f	jsr $8ffa			jsr 	SwapDataCodePtrs 			; swap code and data
.8f6a	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8f6d	d0 20		bne $8f8f			bne 	_CRContinueData
.8f6f					_CRKeepSearching:
.8f6f	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8f71	aa		tax				tax
.8f72	20 d1 93	jsr $93d1			jsr 	ScanForward
.8f75	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8f77	f0 16		beq $8f8f			beq 	_CRHaveData 				; found it
.8f79	18		clc				clc
.8f7a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f7c	65 30		adc $30				adc 	codePtr
.8f7e	85 30		sta $30				sta 	codePtr
.8f80	90 02		bcc $8f84			bcc 	_CREExit
.8f82	e6 31		inc $31				inc 	codePtr+1
.8f84					_CREExit:
.8f84	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f86	b2 30		lda ($30)			lda 	(codePtr)
.8f88	d0 e5		bne $8f6f			bne 	_CRKeepSearching
.8f8a	a9 0b		lda #$0b		lda	#11
.8f8c	4c 5f 94	jmp $945f		jmp	ErrorHandler
.8f8f					_CRHaveData:
.8f8f					_CRContinueData:
.8f8f	a2 01		ldx #$01			ldx 	#1
.8f91	20 62 9f	jsr $9f62			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8f94	ca		dex				dex
.8f95	20 62 8d	jsr $8d62			jsr		AssignVariable 				; do the assignment
.8f98	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8f9b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f9d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8f9f	d0 04		bne $8fa5			bne 	_CRSwapBack
.8fa1	c8		iny				iny 								; consume comma
.8fa2	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8fa5					_CRSwapBack:
.8fa5	20 fa 8f	jsr $8ffa			jsr 	SwapDataCodePtrs			; swap them back.
.8fa8	b1 30		lda ($30),y			lda 	(codePtr),y
.8faa	c8		iny				iny
.8fab	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8fad	f0 ac		beq $8f5b			beq 	Command_Read 				; if so go round again.
.8faf	88		dey				dey 								; unpick get.
.8fb0	60		rts				rts
.8fb1					_CRSyntax:
.8fb1	4c 7e ad	jmp $ad7e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8fb4					RemCommand:
.8fb4	b1 30		lda ($30),y			lda 	(codePtr),y
.8fb6	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8fb8	d0 06		bne $8fc0			bne 	_RMExit
.8fba	c8		iny				iny
.8fbb	98		tya				tya
.8fbc	38		sec				sec
.8fbd	71 30		adc ($30),y			adc 	(codePtr),y
.8fbf	a8		tay				tay
.8fc0					_RMExit:
.8fc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8fc1					Command_REPEAT:
.8fc1	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8fc3	20 cb a0	jsr $a0cb			jsr 	StackOpen
.8fc6	20 0f a1	jsr $a10f			jsr 	STKSaveCodePosition 		; save loop position
.8fc9	60		rts				rts
.8fca					Command_UNTIL:
.8fca	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8fcc	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8fce	20 f7 a0	jsr $a0f7			jsr 	StackCheckFrame
.8fd1	a2 00		ldx #$00			ldx 	#0
.8fd3	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber 				; work out the number
.8fd6	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; check if zero
.8fd9	f0 04		beq $8fdf			beq 	_CULoopBack 				; if so keep looping
.8fdb	20 e9 a0	jsr $a0e9			jsr 	StackClose		 			; return
.8fde	60		rts				rts
.8fdf					_CULoopBack:
.8fdf	20 20 a1	jsr $a120			jsr 	STKLoadCodePosition 		; loop back
.8fe2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8fe3					Command_Restore:
.8fe3	20 fa 8f	jsr $8ffa			jsr 	SwapDataCodePtrs 			; swap code and data
.8fe6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fe8	85 30		sta $30				sta 	codePtr
.8fea	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fec	85 31		sta $31				sta 	codePtr+1
.8fee	20 fa 8f	jsr $8ffa			jsr 	SwapDataCodePtrs 			; put them back
.8ff1	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8ff3	8d 9b 04	sta $049b			sta 	dataPointer+4
.8ff6	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8ff9	60		rts				rts
.8ffa					SwapDataCodePtrs:
.8ffa	da		phx				phx
.8ffb	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8ffd					_SDCPLoop:
.8ffd	b5 30		lda $30,x			lda 	safePtr,x
.8fff	48		pha				pha
.9000	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9003	95 30		sta $30,x			sta 	safePtr,x
.9005	68		pla				pla
.9006	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9009	ca		dex				dex
.900a	10 f1		bpl $8ffd			bpl 	_SDCPLoop
.900c	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.900f	8c 9b 04	sty $049b			sty 	dataPointer+4
.9012	a8		tay				tay
.9013	fa		plx				plx
.9014	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9015					CommandRUN:
.9015	20 8f 8a	jsr $8a8f			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9018	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.901a	85 30		sta $30				sta 	codePtr
.901c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.901e	85 31		sta $31				sta 	codePtr+1
.9020					RUNNewLine:
.9020	b2 30		lda ($30)			lda 	(codePtr)
.9022	f0 5e		beq $9082			beq 	CRNoProgram         		; no then END.
.9024	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9026	9a		txs				txs
.9027					RUNCodePointerLine:
.9027	a0 02		ldy #$02			ldy 	#2 							; start of program
.9029					_CRIncMainLoop:
.9029	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.902c	d0 05		bne $9033			bne 	_CRNoBreakCheck
.902e	20 64 af	jsr $af64			jsr 	EXTBreakCheck 				; break check
.9031	f0 4a		beq $907d			beq 	_CRBreak
.9033					_CRNoBreakCheck:
.9033	c8		iny				iny
.9034					_CRMainLoop:
.9034	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9037	b1 30		lda ($30),y			lda 	(codePtr),y
.9039	10 10		bpl $904b			bpl 	_CRNotKeyword
.903b	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.903d	b0 04		bcs $9043			bcs 	_CRIsKeyword
.903f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9041	b0 34		bcs $9077			bcs		_CRSyntaxError
.9043					_CRIsKeyword:
.9043	c8		iny				iny 								; consume command
.9044	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9045	aa		tax				tax 								; put in X for vector jump
.9046	20 7a 90	jsr $907a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9049	80 e9		bra $9034			bra 	_CRMainLoop 				; and loop round
.904b					_CRNotKeyword:
.904b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.904d	f0 da		beq $9029			beq 	_CRIncMainLoop
.904f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9051	90 05		bcc $9058			bcc 	_CRNotVariable
.9053					_CRGoLet:
.9053	20 26 8d	jsr $8d26			jsr 	LetCommand
.9056	80 dc		bra $9034			bra 	_CRMainLoop
.9058					_CRNotVariable:
.9058	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.905a	f0 f7		beq $9053			beq 	_CRGoLet
.905c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.905e	f0 f3		beq $9053			beq 	_CRGoLet
.9060	c9 21		cmp #$21			cmp 	#KWD_PLING
.9062	f0 ef		beq $9053			beq 	_CRGoLet
.9064	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9066	f0 09		beq $9071			beq 	_CRGoRem
.9068	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.906a	d0 0b		bne $9077			bne 	_CRSyntaxError
.906c	20 2f 89	jsr $892f			jsr 	LabelHere
.906f	80 c3		bra $9034			bra 	_CRMainLoop
.9071					_CRGoRem:
.9071	c8		iny				iny
.9072	20 b4 8f	jsr $8fb4			jsr 	RemCommand
.9075	80 bd		bra $9034			bra 	_CRMainLoop
.9077					_CRSyntaxError:
.9077	4c 7e ad	jmp $ad7e			jmp 	SyntaxError
.907a					_CRCallVector0:
.907a	7c 26 91	jmp ($9126,x)			jmp 	(VectorSet0,x)
.907d					_CRBreak:
.907d	a9 01		lda #$01		lda	#1
.907f	4c 5f 94	jmp $945f		jmp	ErrorHandler
.9082					CRNoProgram:
.9082	4c ac 8b	jmp $8bac			jmp 	EndCommand
.9085					EOLCommand:
.9085	18		clc				clc
.9086	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9088	65 30		adc $30				adc 	codePtr
.908a	85 30		sta $30				sta 	codePtr
.908c	90 02		bcc $9090			bcc 	_CREExit
.908e	e6 31		inc $31				inc 	codePtr+1
.9090					_CREExit:
.9090	80 8e		bra $9020			bra 	RunNewLine
.9092					Shift1Command:
.9092	b1 30		lda ($30),y			lda 	(codePtr),y
.9094	c8		iny				iny
.9095	0a		asl a				asl 	a
.9096	aa		tax				tax
.9097	7c 88 91	jmp ($9188,x)			jmp 	(VectorSet1,x)
.909a					Shift2Command:
.909a	b1 30		lda ($30),y			lda 	(codePtr),y
.909c	c8		iny				iny
.909d	0a		asl a				asl 	a
.909e	aa		tax				tax
.909f	7c a0 91	jmp ($91a0,x)			jmp 	(VectorSet2,x)
.90a2					Unused1:
.90a2					Unused2:
.90a2					Unused3:
.90a2					Unused4:
.90a2	4c 7e ad	jmp $ad7e			jmp 	SyntaxError
>90a5							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.90a6					VectorSetPunc:
>90a6	09 96					.word	ShiftLeft                        ; $00 <<
>90a8	03 95					.word	BinaryCompareLessEqual           ; $01 <=
>90aa	f9 94					.word	BinaryCompareNotEqual            ; $02 <>
>90ac	7e ad					.word	SyntaxError                      ; $03 !!3
>90ae	7e ad					.word	SyntaxError                      ; $04 ><
>90b0	0d 95					.word	BinaryCompareGreaterEqual        ; $05 >=
>90b2	0c 96					.word	ShiftRight                       ; $06 >>
>90b4	7e ad					.word	SyntaxError                      ; $07 !!7
>90b6	7e ad					.word	SyntaxError                      ; $08 !!8
>90b8	7e ad					.word	SyntaxError                      ; $09 !!9
>90ba	7e ad					.word	SyntaxError                      ; $0a !!10
>90bc	7e ad					.word	SyntaxError                      ; $0b !!11
>90be	7e ad					.word	SyntaxError                      ; $0c !!12
>90c0	7e ad					.word	SyntaxError                      ; $0d !!13
>90c2	7e ad					.word	SyntaxError                      ; $0e !!14
>90c4	7e ad					.word	SyntaxError                      ; $0f !!15
>90c6	7e ad					.word	SyntaxError                      ; $10 @
>90c8	7e ad					.word	SyntaxError                      ; $11 !!17
>90ca	7e ad					.word	SyntaxError                      ; $12 !!18
>90cc	7e ad					.word	SyntaxError                      ; $13 [
>90ce	b1 a7					.word	IntegerDivide                    ; $14 \
>90d0	7e ad					.word	SyntaxError                      ; $15 ]
>90d2	92 97					.word	EorInteger                       ; $16 ^
>90d4	7e ad					.word	SyntaxError                      ; $17 _
>90d6	7e ad					.word	SyntaxError                      ; $18 `
>90d8	7e ad					.word	SyntaxError                      ; $19 !!25
>90da	7e ad					.word	SyntaxError                      ; $1a !!26
>90dc	7e ad					.word	SyntaxError                      ; $1b {
>90de	4c 97					.word	OraInteger                       ; $1c |
>90e0	7e ad					.word	SyntaxError                      ; $1d }
>90e2	7e ad					.word	SyntaxError                      ; $1e ~
>90e4	7e ad					.word	SyntaxError                      ; $1f [7m<7F>[m
>90e6	7e ad					.word	SyntaxError                      ; $20
>90e8	d8 97					.word	WordIndirect                     ; $21 !
>90ea	7e ad					.word	SyntaxError                      ; $22 "
>90ec	7e ad					.word	SyntaxError                      ; $23 #
>90ee	7e ad					.word	SyntaxError                      ; $24 $
>90f0	fe a7					.word	IntegerModulus                   ; $25 %
>90f2	06 97					.word	AndInteger                       ; $26 &
>90f4	7e ad					.word	SyntaxError                      ; $27 '
>90f6	7e ad					.word	SyntaxError                      ; $28 (
>90f8	7e ad					.word	SyntaxError                      ; $29 )
>90fa	73 a8					.word	MulInteger                       ; $2a *
>90fc	a0 96					.word	AddInteger                       ; $2b +
>90fe	7e ad					.word	SyntaxError                      ; $2c ,
>9100	db 96					.word	SubInteger                       ; $2d -
>9102	7e ad					.word	SyntaxError                      ; $2e .
>9104	0a aa					.word	FDivideCommand                   ; $2f /
>9106	7e ad					.word	SyntaxError                      ; $30 0
>9108	7e ad					.word	SyntaxError                      ; $31 1
>910a	7e ad					.word	SyntaxError                      ; $32 2
>910c	7e ad					.word	SyntaxError                      ; $33 3
>910e	7e ad					.word	SyntaxError                      ; $34 4
>9110	7e ad					.word	SyntaxError                      ; $35 5
>9112	7e ad					.word	SyntaxError                      ; $36 6
>9114	7e ad					.word	SyntaxError                      ; $37 7
>9116	7e ad					.word	SyntaxError                      ; $38 8
>9118	7e ad					.word	SyntaxError                      ; $39 9
>911a	7e ad					.word	SyntaxError                      ; $3a :
>911c	7e ad					.word	SyntaxError                      ; $3b ;
>911e	e5 94					.word	BinaryCompareLess                ; $3c <
>9120	db 94					.word	BinaryCompareEqual               ; $3d =
>9122	ef 94					.word	BinaryCompareGreater             ; $3e >
>9124	ff 97					.word	ByteIndirect                     ; $3f ?
.9126					VectorSet0:
>9126	85 90					.word	EOLCommand                       ; $80 !0:EOF
>9128	92 90					.word	Shift1Command                    ; $81 !1:SH1
>912a	9a 90					.word	Shift2Command                    ; $82 !2:SH2
>912c	50 ab					.word	AbsUnary                         ; $83 ABS(
>912e	c9 9c					.word	AllocUnary                       ; $84 ALLOC(
>9130	60 ab					.word	AscUnary                         ; $85 ASC(
>9132	e9 9d					.word	ChrUnary                         ; $86 CHR$(
>9134	d7 94					.word	UnaryFalse                       ; $87 FALSE
>9136	6d ab					.word	FracUnary                        ; $88 FRAC(
>9138	83 ab					.word	IntUnary                         ; $89 INT(
>913a	d9 ab					.word	IsValUnary                       ; $8a ISVAL(
>913c	c3 9e					.word	Unary_Left                       ; $8b LEFT$(
>913e	95 ab					.word	LenUnary                         ; $8c LEN(
>9140	ed 9e					.word	Unary_Mid                        ; $8d MID$(
>9142	39 9d					.word	Unary_Not                        ; $8e NOT(
>9144	4f 9d					.word	Unary_Random                     ; $8f RANDOM(
>9146	d3 9e					.word	Unary_Right                      ; $90 RIGHT$(
>9148	68 9d					.word	Unary_Rnd                        ; $91 RND(
>914a	af ab					.word	SgnUnary                         ; $92 SGN(
>914c	fb 9d					.word	SpcUnary                         ; $93 SPC(
>914e	16 9e					.word	Unary_Str                        ; $94 STR$(
>9150	cb 94					.word	UnaryTrue                        ; $95 TRUE
>9152	cf ab					.word	ValUnary                         ; $96 VAL(
>9154	af 8b					.word	ForCommand                       ; $97 FOR
>9156	fc 8c					.word	IfCommand                        ; $98 IF
>9158	a2 90					.word	Unused1                          ; $99 PROC
>915a	c1 8f					.word	Command_REPEAT                   ; $9a REPEAT
>915c	30 94					.word	Command_WHILE                    ; $9b WHILE
>915e	25 8d					.word	EndIf                            ; $9c ENDIF
>9160	8a a7					.word	Command_ENDPROC                  ; $9d ENDPROC
>9162	69 8c					.word	NextCommand                      ; $9e NEXT
>9164	a2 90					.word	Unused4                          ; $9f THEN
>9166	ca 8f					.word	Command_UNTIL                    ; $a0 UNTIL
>9168	51 94					.word	Command_WEND                     ; $a1 WEND
>916a	55 8a					.word	CallCommand                      ; $a2 CALL
>916c	7e ad					.word	SyntaxError                      ; $a3 CLS
>916e	e7 8a					.word	Command_Data                     ; $a4 DATA
>9170	ef 8a					.word	DimCommand                       ; $a5 DIM
>9172	a2 90					.word	Unused3                          ; $a6 DOWNTO
>9174	1e 8d					.word	ElseCode                         ; $a7 ELSE
>9176	c2 8c					.word	Command_GOSUB                    ; $a8 GOSUB
>9178	e0 8c					.word	GotoCommand                      ; $a9 GOTO
>917a	26 8d					.word	LetCommand                       ; $aa LET
>917c	16 8e					.word	Command_LOCAL                    ; $ab LOCAL
>917e	a4 8e					.word	Command_Print                    ; $ac PRINT
>9180	5b 8f					.word	Command_Read                     ; $ad READ
>9182	b4 8f					.word	RemCommand                       ; $ae REM
>9184	d2 8c					.word	Command_RETURN                   ; $af RETURN
>9186	a2 90					.word	Unused2                          ; $b0 TO
.9188					VectorSet1:
>9188	7e ad					.word	SyntaxError                      ; $80 !0:EOF
>918a	7e ad					.word	SyntaxError                      ; $81 !1:SH1
>918c	7e ad					.word	SyntaxError                      ; $82 !2:SH2
>918e	26 8a					.word	AssembleCommand                  ; $83 ASSEMBLE
>9190	45 8a					.word	AssertCommand                    ; $84 ASSERT
>9192	8f 8a					.word	ClearCommand                     ; $85 CLEAR
>9194	ac 8b					.word	EndCommand                       ; $86 END
>9196	7b 8d					.word	Command_List                     ; $87 LIST
>9198	9a 8e					.word	NewCommand                       ; $88 NEW
>919a	e3 8f					.word	Command_Restore                  ; $89 RESTORE
>919c	15 90					.word	CommandRUN                       ; $8a RUN
>919e	28 92					.word	StopCommand                      ; $8b STOP
.91a0					VectorSet2:
>91a0	7e ad					.word	SyntaxError                      ; $80 !0:EOF
>91a2	7e ad					.word	SyntaxError                      ; $81 !1:SH1
>91a4	7e ad					.word	SyntaxError                      ; $82 !2:SH2
>91a6	3d ac					.word	Assemble_adc                     ; $83 ADC
>91a8	35 ac					.word	Assemble_and                     ; $84 AND
>91aa	51 ac					.word	Assemble_asl                     ; $85 ASL
>91ac	bb ac					.word	Assemble_bcc                     ; $86 BCC
>91ae	bf ac					.word	Assemble_bcs                     ; $87 BCS
>91b0	c7 ac					.word	Assemble_beq                     ; $88 BEQ
>91b2	7e ac					.word	Assemble_bit                     ; $89 BIT
>91b4	af ac					.word	Assemble_bmi                     ; $8a BMI
>91b6	c3 ac					.word	Assemble_bne                     ; $8b BNE
>91b8	ab ac					.word	Assemble_bpl                     ; $8c BPL
>91ba	cb ac					.word	Assemble_bra                     ; $8d BRA
>91bc	cf ac					.word	Assemble_brk                     ; $8e BRK
>91be	b3 ac					.word	Assemble_bvc                     ; $8f BVC
>91c0	b7 ac					.word	Assemble_bvs                     ; $90 BVS
>91c2	d7 ac					.word	Assemble_clc                     ; $91 CLC
>91c4	2b ad					.word	Assemble_cld                     ; $92 CLD
>91c6	eb ac					.word	Assemble_cli                     ; $93 CLI
>91c8	1b ad					.word	Assemble_clv                     ; $94 CLV
>91ca	49 ac					.word	Assemble_cmp                     ; $95 CMP
>91cc	92 ac					.word	Assemble_cpx                     ; $96 CPX
>91ce	8d ac					.word	Assemble_cpy                     ; $97 CPY
>91d0	6f ac					.word	Assemble_dec                     ; $98 DEC
>91d2	27 ad					.word	Assemble_dex                     ; $99 DEX
>91d4	03 ad					.word	Assemble_dey                     ; $9a DEY
>91d6	39 ac					.word	Assemble_eor                     ; $9b EOR
>91d8	74 ac					.word	Assemble_inc                     ; $9c INC
>91da	37 ad					.word	Assemble_inx                     ; $9d INX
>91dc	23 ad					.word	Assemble_iny                     ; $9e INY
>91de	a6 ac					.word	Assemble_jmp                     ; $9f JMP
>91e0	a1 ac					.word	Assemble_jsr                     ; $a0 JSR
>91e2	45 ac					.word	Assemble_lda                     ; $a1 LDA
>91e4	6a ac					.word	Assemble_ldx                     ; $a2 LDX
>91e6	88 ac					.word	Assemble_ldy                     ; $a3 LDY
>91e8	5b ac					.word	Assemble_lsr                     ; $a4 LSR
>91ea	3b ad					.word	Assemble_nop                     ; $a5 NOP
>91ec	31 ac					.word	Assemble_ora                     ; $a6 ORA
>91ee	e7 ac					.word	Assemble_pha                     ; $a7 PHA
>91f0	d3 ac					.word	Assemble_php                     ; $a8 PHP
>91f2	2f ad					.word	Assemble_phx                     ; $a9 PHX
>91f4	ef ac					.word	Assemble_phy                     ; $aa PHY
>91f6	f7 ac					.word	Assemble_pla                     ; $ab PLA
>91f8	db ac					.word	Assemble_plp                     ; $ac PLP
>91fa	43 ad					.word	Assemble_plx                     ; $ad PLX
>91fc	ff ac					.word	Assemble_ply                     ; $ae PLY
>91fe	56 ac					.word	Assemble_rol                     ; $af ROL
>9200	60 ac					.word	Assemble_ror                     ; $b0 ROR
>9202	e3 ac					.word	Assemble_rti                     ; $b1 RTI
>9204	f3 ac					.word	Assemble_rts                     ; $b2 RTS
>9206	4d ac					.word	Assemble_sbc                     ; $b3 SBC
>9208	df ac					.word	Assemble_sec                     ; $b4 SEC
>920a	3f ad					.word	Assemble_sed                     ; $b5 SED
>920c	fb ac					.word	Assemble_sei                     ; $b6 SEI
>920e	41 ac					.word	Assemble_sta                     ; $b7 STA
>9210	33 ad					.word	Assemble_stp                     ; $b8 STP
>9212	65 ac					.word	Assemble_stx                     ; $b9 STX
>9214	83 ac					.word	Assemble_sty                     ; $ba STY
>9216	79 ac					.word	Assemble_stz                     ; $bb STZ
>9218	17 ad					.word	Assemble_tax                     ; $bc TAX
>921a	13 ad					.word	Assemble_tay                     ; $bd TAY
>921c	9c ac					.word	Assemble_trb                     ; $be TRB
>921e	97 ac					.word	Assemble_tsb                     ; $bf TSB
>9220	1f ad					.word	Assemble_tsx                     ; $c0 TSX
>9222	07 ad					.word	Assemble_txa                     ; $c1 TXA
>9224	0f ad					.word	Assemble_txs                     ; $c2 TXS
>9226	0b ad					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9228					StopCommand:
.9228	a9 08		lda #$08		lda	#8
.922a	4c 5f 94	jmp $945f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.922d					ListConvertLine:
.922d	9c 9d 04	stz $049d			stz 	tbOffset
.9230	9c a9 04	stz $04a9			stz 	tokenBuffer
.9233	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9235	b1 30		lda ($30),y			lda 	(codePtr),y
.9237	aa		tax				tax
.9238	88		dey				dey
.9239	b1 30		lda ($30),y			lda 	(codePtr),y
.923b	20 f4 a8	jsr $a8f4			jsr 	ConvertInt16
.923e	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9240	86 37		stx $37				stx 	zTemp0+1
.9242	a0 00		ldy #$00			ldy 	#0
.9244					_LCCopyNumber:
.9244	b1 36		lda ($36),y			lda 	(zTemp0),y
.9246	20 46 93	jsr $9346			jsr 	LCLWrite
.9249	c8		iny				iny
.924a	b1 36		lda ($36),y			lda 	(zTemp0),y
.924c	d0 f6		bne $9244			bne 	_LCCopyNumber
.924e					_LCPadOut:
.924e	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9250	20 46 93	jsr $9346			jsr 	LCLWrite
.9253	ad 9d 04	lda $049d			lda 	tbOffset
.9256	c9 06		cmp #$06			cmp 	#6
.9258	d0 f4		bne $924e			bne 	_LCPadOut
.925a	a0 03		ldy #$03			ldy 	#3 							; start position.
.925c					_LCMainLoop:
.925c	b1 30		lda ($30),y			lda 	(codePtr),y
.925e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9260	f0 17		beq $9279			beq 	_LCExit
.9262	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9264	90 14		bcc $927a			bcc 	_LCDoubles
.9266	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9268	90 20		bcc $928a			bcc 	_LCShiftPunc
.926a	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.926c	90 2b		bcc $9299			bcc 	_LCPunctuation
.926e	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9270	90 2d		bcc $929f			bcc 	_LCIdentifiers
.9272	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9274	90 49		bcc $92bf			bcc 	_LCTokens
.9276	4c 1a 93	jmp $931a			jmp 	_LCData 					; 254-5 are data objects
.9279					_LCExit:
.9279	60		rts				rts
.927a					_LCDoubles:
.927a	48		pha				pha
.927b	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.927c	29 02		and #$02			and 	#2
.927e	09 3c		ora #$3c			ora 	#60 						; make < >
.9280	20 46 93	jsr $9346			jsr 	LCLWrite
.9283	68		pla				pla 								; restore, do lower bit
.9284	29 03		and #$03			and 	#3
.9286	09 3c		ora #$3c			ora 	#60
.9288	80 0f		bra $9299			bra		_LCPunctuation 				; print, increment, loop
.928a					_LCShiftPunc:
.928a	aa		tax				tax 								; save in X
.928b	29 07		and #$07			and 	#7 							; lower 3 bits
.928d	f0 02		beq $9291			beq 	_LCNoAdd
.928f	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9291					_LCNoAdd:
.9291	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9293	90 02		bcc $9297			bcc 	_LCNoAdd2
.9295	09 20		ora #$20			ora 	#32 						; adds $20
.9297					_LCNoAdd2:
.9297	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9299					_LCPunctuation:
.9299	c8		iny				iny 								; consume character
.929a	20 46 93	jsr $9346			jsr 	LCLWrite 					; write it out.
.929d	80 bd		bra $925c			bra 	_LCMainLoop 				; go round again.
.929f					_LCIdentifiers:
.929f	18		clc				clc 								; convert to physical address
.92a0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92a2	85 37		sta $37				sta 	zTemp0+1
.92a4	c8		iny				iny
.92a5	b1 30		lda ($30),y			lda 	(codePtr),y
.92a7	85 36		sta $36				sta 	zTemp0
.92a9	c8		iny				iny
.92aa	5a		phy				phy 								; save position
.92ab	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.92ad					_LCOutIdentifier:
.92ad	c8		iny				iny
.92ae	b1 36		lda ($36),y			lda 	(zTemp0),y
.92b0	29 7f		and #$7f			and 	#$7F
.92b2	20 74 93	jsr $9374			jsr 	LCLLowerCase
.92b5	20 46 93	jsr $9346			jsr 	LCLWrite
.92b8	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.92ba	10 f1		bpl $92ad			bpl 	_LCOutIdentifier
.92bc	7a		ply				ply 								; restore position
.92bd	80 9d		bra $925c			bra 	_LCMainLoop
.92bf					_LCTokens:
.92bf	aa		tax				tax 								; token in X
.92c0	a9 44		lda #$44			lda 	#((KeywordSet2) & $FF)
.92c2	85 36		sta $36				sta 	0+zTemp0
.92c4	a9 a3		lda #$a3			lda 	#((KeywordSet2) >> 8)
.92c6	85 37		sta $37				sta 	1+zTemp0
.92c8	e0 82		cpx #$82			cpx 	#$82
.92ca	f0 16		beq $92e2			beq 	_LCUseShift
.92cc	a9 00		lda #$00			lda 	#((KeywordSet1) & $FF)
.92ce	85 36		sta $36				sta 	0+zTemp0
.92d0	a9 a3		lda #$a3			lda 	#((KeywordSet1) >> 8)
.92d2	85 37		sta $37				sta 	1+zTemp0
.92d4	e0 81		cpx #$81			cpx 	#$81
.92d6	f0 0a		beq $92e2			beq 	_LCUseShift
.92d8	a9 ce		lda #$ce			lda 	#((KeywordSet0) & $FF)
.92da	85 36		sta $36				sta 	0+zTemp0
.92dc	a9 a1		lda #$a1			lda 	#((KeywordSet0) >> 8)
.92de	85 37		sta $37				sta 	1+zTemp0
.92e0	80 01		bra $92e3			bra 	_LCNoShift
.92e2					_LCUseShift:
.92e2	c8		iny				iny
.92e3					_LCNoShift:
.92e3	20 55 93	jsr $9355			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.92e6	b1 30		lda ($30),y			lda 	(codePtr),y
.92e8	aa		tax				tax 								; into X
.92e9					_LCFindText:
.92e9	ca		dex				dex
.92ea	10 0e		bpl $92fa			bpl 	_LCFoundText 				; found text.
.92ec	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.92ee	1a		inc a				inc 	a 							; one extra for size
.92ef	38		sec				sec 								; one extra for checksum
.92f0	65 36		adc $36				adc 	zTemp0 						; go to next token
.92f2	85 36		sta $36				sta 	zTemp0
.92f4	90 f3		bcc $92e9			bcc 	_LCFindText
.92f6	e6 37		inc $37				inc 	zTemp0+1
.92f8	80 ef		bra $92e9			bra 	_LCFindText
.92fa					_LCFoundText:
.92fa	5a		phy				phy 								; save List position
.92fb	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.92fd	aa		tax				tax
.92fe	a0 02		ldy #$02			ldy 	#2
.9300					_LCCopyToken:
.9300	b1 36		lda ($36),y			lda 	(zTemp0),y
.9302	20 74 93	jsr $9374			jsr 	LCLLowerCase
.9305	20 46 93	jsr $9346			jsr 	LCLWrite
.9308	c8		iny				iny
.9309	ca		dex				dex
.930a	d0 f4		bne $9300			bne 	_LCCopyToken
.930c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.930e	f0 05		beq $9315			beq 	_LCNoSpace
.9310	a9 20		lda #$20			lda 	#' '
.9312	20 46 93	jsr $9346			jsr 	LCLWrite
.9315					_LCNoSpace:
.9315	7a		ply				ply 								; restore position.
.9316	c8		iny				iny 								; consume token
.9317	4c 5c 92	jmp $925c			jmp 	_LCMainLoop 				; and go around again.
.931a					_LCData:
.931a	48		pha				pha 								; save type $FE/$FF
.931b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.931d	c9 fe		cmp #$fe			cmp 	#$FE
.931f	f0 02		beq $9323			beq 	_LCHaveOpener
.9321	a2 22		ldx #$22			ldx 	#'"'
.9323					_LCHaveOpener:
.9323	8a		txa				txa 								; output prefix (# or ")
.9324	20 46 93	jsr $9346			jsr 	LCLWrite
.9327	c8		iny				iny 								; get count
.9328	b1 30		lda ($30),y			lda 	(codePtr),y
.932a	aa		tax				tax
.932b	c8		iny				iny 								; point at first character
.932c					_LCOutData:
.932c	b1 30		lda ($30),y			lda 	(codePtr),y
.932e	c9 00		cmp #$00			cmp 	#0
.9330	f0 03		beq $9335			beq 	_LCNoPrint
.9332	20 46 93	jsr $9346			jsr 	LCLWrite
.9335					_LCNoPrint:
.9335	c8		iny				iny
.9336	ca		dex				dex
.9337	d0 f3		bne $932c			bne 	_LCOutData
.9339	68		pla				pla 								; closing " required ?
.933a	c9 ff		cmp #$ff			cmp 	#$FF
.933c	d0 05		bne $9343			bne 	_LCNoQuote
.933e	a9 22		lda #$22			lda 	#'"'
.9340	20 46 93	jsr $9346			jsr 	LCLWrite
.9343					_LCNoQuote:
.9343	4c 5c 92	jmp $925c			jmp 	_LCMainLoop
.9346					LCLWrite:
.9346	da		phx				phx
.9347	ae 9d 04	ldx $049d			ldx 	tbOffset
.934a	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.934d	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9350	ee 9d 04	inc $049d			inc 	tbOffset
.9353	fa		plx				plx
.9354	60		rts				rts
.9355					LCCheckSpaceRequired:
.9355	ae 9d 04	ldx $049d			ldx 	tbOffset
.9358	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.935b	20 74 93	jsr $9374			jsr 	LCLLowerCase 				; saves a little effort
.935e	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9360	90 11		bcc $9373			bcc 	_LCCSRExit
.9362	c9 3a		cmp #$3a			cmp 	#"9"+1
.9364	90 08		bcc $936e			bcc 	_LCCSRSpace
.9366	c9 61		cmp #$61			cmp 	#"a"
.9368	90 09		bcc $9373			bcc 	_LCCSRExit
.936a	c9 7b		cmp #$7b			cmp 	#"z"+1
.936c	b0 05		bcs $9373			bcs 	_LCCSRExit
.936e					_LCCSRSpace:
.936e	a9 20		lda #$20			lda 	#' '
.9370	20 46 93	jsr $9346			jsr 	LCLWrite
.9373					_LCCSRExit:
.9373	60		rts				rts
.9374					LCLLowerCase:
.9374	c9 41		cmp #$41			cmp 	#"A"
.9376	90 06		bcc $937e			bcc 	_LCLLCOut
.9378	c9 5b		cmp #$5b			cmp 	#"Z"+1
.937a	b0 02		bcs $937e			bcs 	_LCLLCOut
.937c	69 20		adc #$20			adc 	#$20
.937e					_LCLLCOut:
.937e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.937f					ProcedureScan:
.937f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9381	85 30		sta $30				sta 	codePtr
.9383	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9385	85 31		sta $31				sta 	codePtr+1
.9387					_PSLoop:
.9387	b2 30		lda ($30)			lda 	(codePtr)
.9389	f0 42		beq $93cd			beq 	_PSExit
.938b	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.938d	b1 30		lda ($30),y			lda 	(codePtr),y
.938f	c9 99		cmp #$99			cmp 	#KWD_PROC
.9391	d0 2d		bne $93c0			bne 	_PSNext
.9393	c8		iny				iny 								; get the address of the record to zTemp0 and
.9394	b1 30		lda ($30),y			lda 	(codePtr),y
.9396	29 c0		and #$c0			and 	#$C0
.9398	c9 40		cmp #$40			cmp 	#$40
.939a	d0 32		bne $93ce			bne 	_PSSyntax
.939c	b1 30		lda ($30),y			lda 	(codePtr),y
.939e	18		clc				clc
.939f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.93a1	85 37		sta $37				sta 	zTemp0+1
.93a3	c8		iny				iny 								; LSB
.93a4	b1 30		lda ($30),y			lda 	(codePtr),y
.93a6	85 36		sta $36				sta 	zTemp0
.93a8	c8		iny				iny 								; character after variable call.
.93a9	98		tya				tya 								; save Y offset at +7
.93aa	a0 07		ldy #$07			ldy 	#7
.93ac	91 36		sta ($36),y			sta 	(zTemp0),y
.93ae	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.93b0	a0 02		ldy #$02			ldy 	#2
.93b2	91 36		sta ($36),y			sta 	(zTemp0),y
.93b4	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.93b6					_PSCopy:
.93b6	b5 30		lda $30,x			lda 	safePtr,x
.93b8	c8		iny				iny
.93b9	91 36		sta ($36),y			sta 	(zTemp0),y
.93bb	e8		inx				inx
.93bc	e0 04		cpx #$04			cpx 	#4
.93be	d0 f6		bne $93b6			bne 	_PSCopy
.93c0					_PSNext:
.93c0	18		clc				clc
.93c1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93c3	65 30		adc $30				adc 	codePtr
.93c5	85 30		sta $30				sta 	codePtr
.93c7	90 02		bcc $93cb			bcc 	_CREExit
.93c9	e6 31		inc $31				inc 	codePtr+1
.93cb					_CREExit:
.93cb	80 ba		bra $9387			bra 	_PSLoop
.93cd					_PSExit:
.93cd	60		rts				rts
.93ce					_PSSyntax:
.93ce	4c 7e ad	jmp $ad7e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.93d1					ScanForward:
.93d1	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.93d3	86 37		stx $37				stx 	zTemp0+1
.93d5	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.93d7					_ScanLoop:
.93d7	b1 30		lda ($30),y			lda 	(codePtr),y
.93d9	c8		iny				iny
.93da	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.93dc	d0 0e		bne $93ec			bne 	_ScanGoNext
.93de	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.93e0	f0 04		beq $93e6			beq 	_ScanMatch
.93e2	c5 37		cmp $37				cmp 	zTemp0+1
.93e4	d0 06		bne $93ec			bne 	_ScanGoNext
.93e6					_ScanMatch:
.93e6	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.93e8	d0 01		bne $93eb			bne 	_ScanNotEndEOL
.93ea	88		dey				dey
.93eb					_ScanNotEndEOL:
.93eb	60		rts				rts
.93ec					_ScanGoNext:
.93ec	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.93ee	90 e7		bcc $93d7			bcc 	_ScanLoop
.93f0	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.93f2	90 18		bcc $940c			bcc 	_ScanSkipOne
.93f4	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.93f6	b0 2f		bcs $9427			bcs 	_ScanSkipData
.93f8	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.93fa	90 db		bcc $93d7			bcc 	_ScanLoop 					; if not, ordinary keywords.
.93fc	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.93fe	b0 d7		bcs $93d7			bcs 	_ScanLoop
.9400	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9402	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9404	b0 d1		bcs $93d7			bcs 	_ScanLoop
.9406	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9408	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.940a	80 cb		bra $93d7			bra 	_ScanLoop
.940c					_ScanSkipOne:
.940c	c8		iny				iny 								; consume the extra one.
.940d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.940f	d0 c6		bne $93d7			bne 	_ScanLoop
.9411	18		clc				clc
.9412	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9414	65 30		adc $30				adc 	codePtr
.9416	85 30		sta $30				sta 	codePtr
.9418	90 02		bcc $941c			bcc 	_CREExit
.941a	e6 31		inc $31				inc 	codePtr+1
.941c					_CREExit:
.941c	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.941e	b2 30		lda ($30)			lda 	(codePtr)
.9420	d0 b5		bne $93d7			bne 	_ScanLoop 					; if not zero, more to scan
.9422	a9 13		lda #$13		lda	#19
.9424	4c 5f 94	jmp $945f		jmp	ErrorHandler
.9427					_ScanSkipData:
.9427	88		dey				dey 								; point at data token
.9428	c8		iny				iny
.9429	98		tya				tya
.942a	38		sec				sec
.942b	71 30		adc ($30),y			adc 	(codePtr),y
.942d	a8		tay				tay
.942e	80 a7		bra $93d7			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9430					Command_WHILE:
.9430	5a		phy				phy 								; save position of the test
.9431	a2 00		ldx #$00			ldx 	#0
.9433	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber 				; work out the number
.9436	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; check if zero
.9439	f0 0e		beq $9449			beq 	_WHExitLoop 				; if so exit the loop
.943b	98		tya				tya 								; position *after* test.
.943c	7a		ply				ply 								; restore position before test, at WHILE
.943d	88		dey				dey
.943e	48		pha				pha 								; push after test on the stack
.943f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9441	20 cb a0	jsr $a0cb			jsr 	StackOpen
.9444	20 0f a1	jsr $a10f			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9447	7a		ply				ply 								; restore the position *after* the test
.9448	60		rts				rts
.9449					_WHExitLoop:
.9449	68		pla				pla 								; throw post loop position
.944a	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.944c	aa		tax				tax
.944d	20 d1 93	jsr $93d1			jsr 	ScanForward
.9450	60		rts				rts
.9451					Command_WEND:
.9451	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9453	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9455	20 f7 a0	jsr $a0f7			jsr 	StackCheckFrame
.9458	20 20 a1	jsr $a120			jsr 	STKLoadCodePosition 		; loop back
.945b	20 e9 a0	jsr $a0e9			jsr 	StackClose		 			; erase the frame
.945e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a798					CheckRightBracket:
.a798	b1 30		lda ($30),y			lda 	(codePtr),y
.a79a	c8		iny				iny
.a79b	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a79d	d0 0f		bne $a7ae			bne 	CNAFail
.a79f	60		rts				rts
.a7a0					CheckComma:
.a7a0	b1 30		lda ($30),y			lda 	(codePtr),y
.a7a2	c8		iny				iny
.a7a3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a7a5	d0 07		bne $a7ae			bne 	CNAFail
.a7a7	60		rts				rts
.a7a8					CheckNextA:
.a7a8	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a7aa	d0 02		bne $a7ae			bne 	CNAFail
.a7ac	c8		iny				iny 								; skip character
.a7ad	60		rts				rts 								; and exit
.a7ae					CNAFail:
.a7ae	4c 7e ad	jmp $ad7e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.945f					ErrorHandler:
.945f	a8		tay				tay 								; find the error text
.9460	f0 49		beq $94ab			beq 	_EHEnd
.9462	a2 00		ldx #$00			ldx 	#0
.9464	a9 97		lda #$97			lda 	#((ErrorText) & $FF)
.9466	85 36		sta $36				sta 	0+zTemp0
.9468	a9 ad		lda #$ad			lda 	#((ErrorText) >> 8)
.946a	85 37		sta $37				sta 	1+zTemp0
.946c					_EHFind:
.946c	88		dey				dey 								; found the error text ?
.946d	f0 0e		beq $947d			beq 	_EHFound
.946f					_EHFindZero:
.946f	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9471	e6 36		inc $36				inc 	zTemp0
.9473	d0 02		bne $9477			bne 	_EHFNoCarry
.9475	e6 37		inc $37				inc 	zTemp0+1
.9477					_EHFNoCarry:
.9477	c9 00		cmp #$00			cmp 	#0
.9479	d0 f4		bne $946f			bne 	_EHFindZero
.947b	80 ef		bra $946c			bra 	_EHFind
.947d					_EHFound:
.947d	a5 36		lda $36				lda 	zTemp0 						; print message
.947f	a6 37		ldx $37				ldx 	zTemp0+1
.9481	20 b8 94	jsr $94b8			jsr 	PrintStringXA
.9484	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9486	b1 30		lda ($30),y			lda 	(codePtr),y
.9488	d0 05		bne $948f			bne 	_EHAtMsg
.948a	c8		iny				iny
.948b	b1 30		lda ($30),y			lda 	(codePtr),y
.948d	f0 17		beq $94a6			beq 	_EHCREnd
.948f					_EHAtMsg:
.948f	a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.9491	a9 ae		lda #$ae			lda 	#_AtMsg & $FF
.9493	20 b8 94	jsr $94b8			jsr 	PrintStringXA
.9496	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9498	b1 30		lda ($30),y			lda 	(codePtr),y
.949a	48		pha				pha
.949b	c8		iny				iny
.949c	b1 30		lda ($30),y			lda 	(codePtr),y
.949e	aa		tax				tax
.949f	68		pla				pla
.94a0	20 f4 a8	jsr $a8f4			jsr 	ConvertInt16 				; convert XA to string
.94a3	20 b8 94	jsr $94b8			jsr 	PrintStringXA 				; and print it.
.94a6					_EHCREnd:
.94a6	a9 0d		lda #$0d			lda 	#13 						; new line
.94a8	20 23 af	jsr $af23			jsr 	EXTPrintCharacter
.94ab					_EHEnd:
.94ab	4c f6 89	jmp $89f6			jmp 	WarmStart
>94ae	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>94b6	20 00
.94b8					PrintStringXA:
.94b8	5a		phy				phy
.94b9	86 37		stx $37				stx 	zTemp0+1
.94bb	85 36		sta $36				sta 	zTemp0
.94bd	a0 00		ldy #$00			ldy 	#0
.94bf					_PSXALoop:
.94bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.94c1	f0 06		beq $94c9			beq 	_PSXAExit
.94c3	20 23 af	jsr $af23			jsr 	EXTPrintCharacter
.94c6	c8		iny				iny
.94c7	80 f6		bra $94bf			bra 	_PSXALoop
.94c9					_PSXAExit:
.94c9	7a		ply				ply
.94ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.94cb					UnaryTrue:
.94cb	fa		plx				plx
.94cc					ReturnTrue:
.94cc	a9 01		lda #$01			lda 	#1  						; set to 1
.94ce	20 19 a0	jsr $a019			jsr 	NSMSetByte
.94d1	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.94d3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94d6	60		rts				rts
.94d7					UnaryFalse:
.94d7	fa		plx				plx
.94d8					ReturnFalse:
.94d8	4c 17 a0	jmp $a017			jmp 	NSMSetZero 					; set it all to zero
.94db					BinaryCompareEqual:
.94db	fa		plx				plx
.94dc	20 17 95	jsr $9517			jsr 	CompareBaseCode
.94df	c9 00		cmp #$00			cmp 	#0
.94e1	f0 e9		beq $94cc			beq 	ReturnTrue
.94e3	80 f3		bra $94d8			bra 	ReturnFalse
.94e5					BinaryCompareLess:
.94e5	fa		plx				plx
.94e6	20 17 95	jsr $9517			jsr 	CompareBaseCode
.94e9	c9 ff		cmp #$ff			cmp 	#$FF
.94eb	f0 df		beq $94cc			beq 	ReturnTrue
.94ed	80 e9		bra $94d8			bra 	ReturnFalse
.94ef					BinaryCompareGreater:
.94ef	fa		plx				plx
.94f0	20 17 95	jsr $9517			jsr 	CompareBaseCode
.94f3	c9 01		cmp #$01			cmp 	#1
.94f5	f0 d5		beq $94cc			beq 	ReturnTrue
.94f7	80 df		bra $94d8			bra 	ReturnFalse
.94f9					BinaryCompareNotEqual:
.94f9	fa		plx				plx
.94fa	20 17 95	jsr $9517			jsr 	CompareBaseCode
.94fd	c9 00		cmp #$00			cmp 	#0
.94ff	d0 cb		bne $94cc			bne 	ReturnTrue
.9501	80 d5		bra $94d8			bra 	ReturnFalse
.9503					BinaryCompareLessEqual:
.9503	fa		plx				plx
.9504	20 17 95	jsr $9517			jsr 	CompareBaseCode
.9507	c9 01		cmp #$01			cmp 	#1
.9509	d0 c1		bne $94cc			bne 	ReturnTrue
.950b	80 cb		bra $94d8			bra 	ReturnFalse
.950d					BinaryCompareGreaterEqual:
.950d	fa		plx				plx
.950e	20 17 95	jsr $9517			jsr 	CompareBaseCode
.9511	c9 ff		cmp #$ff			cmp 	#$FF
.9513	d0 b7		bne $94cc			bne 	ReturnTrue
.9515	80 c1		bra $94d8			bra 	ReturnFalse
.9517					CompareBaseCode:
.9517	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; make both values if references.
.951a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.951d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9520	29 10		and #$10			and 	#NSTString
.9522	d0 40		bne $9564			bne 	_CBCString
.9524	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9527	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.952a	d0 3b		bne $9567			bne 	_CBCFloat
.952c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.952f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9532	29 08		and #$08			and 	#NSTFloat
.9534	d0 31		bne $9567			bne 	_CBCFloat
.9536	20 6a 95	jsr $956a			jsr 	CompareFixMinusZero
.9539	e8		inx				inx
.953a	20 6a 95	jsr $956a			jsr 	CompareFixMinusZero
.953d	ca		dex				dex
.953e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9541	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9544	10 0b		bpl $9551			bpl 	_CDCSameSign
.9546	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9549	30 16		bmi $9561			bmi 	_CBCLess 					; return $FF
.954b					_CBCGreater:
.954b	a9 01		lda #$01			lda 	#1
.954d	60		rts				rts
.954e					_CBCEqual:
.954e	a9 00		lda #$00			lda 	#0
.9550	60		rts				rts
.9551					_CDCSameSign:
.9551	20 7a 96	jsr $967a			jsr 	SubTopTwoStack 				; unsigned subtract
.9554	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; or the mantissa together
.9557	f0 f5		beq $954e			beq 	_CBCEqual 					; -0 == 0
.9559	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.955c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.955f	10 ea		bpl $954b			bpl 	_CBCGreater
.9561					_CBCLess:
.9561	a9 ff		lda #$ff			lda 	#$FF
.9563	60		rts				rts
.9564					_CBCString:
.9564	4c d0 95	jmp $95d0			jmp 	CompareStrings
.9567					_CBCFloat:
.9567	4c f0 a9	jmp $a9f0			jmp 	CompareFloat
.956a					CompareFixMinusZero:
.956a	20 47 a0	jsr $a047			jsr 	NSMIsZero
.956d	d0 03		bne $9572			bne 	_CFXMZNotZero
.956f	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9572					_CFXMZNotZero:
.9572	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9573					StringConcat:
.9573	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9576	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9579	29 18		and #$18			and 	#NSBTypeMask
.957b	c9 10		cmp #$10			cmp 	#NSTString
.957d	d0 4e		bne $95cd			bne		_SCType
.957f	64 38		stz $38				stz 	zTemp1 						; counting total length
.9581	e8		inx				inx
.9582	20 a0 95	jsr $95a0			jsr 	_SCSetupZ0 					; setup for second
.9585	20 ab 95	jsr $95ab			jsr 	_SCLengthZ0 				; length for second
.9588	ca		dex				dex
.9589	20 a0 95	jsr $95a0			jsr 	_SCSetupZ0 					; setup for first
.958c	20 ab 95	jsr $95ab			jsr 	_SCLengthZ0 				; length for first
.958f	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9591	20 a5 b0	jsr $b0a5			jsr 	StringTempAllocate
.9594	20 be 95	jsr $95be			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9597	e8		inx				inx
.9598	20 a0 95	jsr $95a0			jsr 	_SCSetupZ0 					; copy second out
.959b	20 be 95	jsr $95be			jsr 	_SCCopy
.959e	ca		dex				dex
.959f	60		rts				rts
.95a0					_SCSetupZ0:
.95a0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95a3	85 36		sta $36				sta 	zTemp0
.95a5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95a8	85 37		sta $37				sta 	zTemp0+1
.95aa	60		rts				rts
.95ab					_SCLengthZ0:
.95ab	5a		phy				phy
.95ac	a0 00		ldy #$00			ldy 	#0
.95ae					_SCLenLoop:
.95ae	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b0	f0 0a		beq $95bc			beq 	_SCLExit
.95b2	c8		iny				iny
.95b3	e6 38		inc $38				inc 	zTemp1
.95b5	10 f7		bpl $95ae			bpl		_SCLenLoop
.95b7	a9 09		lda #$09		lda	#9
.95b9	4c 5f 94	jmp $945f		jmp	ErrorHandler
.95bc					_SCLExit:
.95bc	7a		ply				ply
.95bd	60		rts				rts
.95be					_SCCopy:
.95be	5a		phy				phy
.95bf	a0 00		ldy #$00			ldy 	#0
.95c1					_SCCopyLoop:
.95c1	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c3	f0 06		beq $95cb			beq 	_SCCExit
.95c5	20 e3 b0	jsr $b0e3			jsr 	StringTempWrite
.95c8	c8		iny				iny
.95c9	80 f6		bra $95c1			bra 	_SCCopyLoop
.95cb					_SCCExit:
.95cb	7a		ply				ply
.95cc	60		rts				rts
.95cd					_SCType:
.95cd	4c 88 ad	jmp $ad88			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a7b1					IntegerDivide:
.a7b1	fa		plx				plx
.a7b2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a7b5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7b8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7b9	0a		asl a				asl 	a
.a7ba	10 05		bpl $a7c1			bpl 	_NotRef
.a7bc	48		pha				pha
.a7bd	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7c0	68		pla				pla
.a7c1					_NotRef:
.a7c1	0a		asl a				asl 	a
.a7c2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a7c4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7c7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a7ca	f0 03		beq $a7cf			beq 	_IntegerCode 				; if clear, then we have two integers
.a7cc	4c 88 ad	jmp $ad88			jmp 	TypeError 					; anything else, type mismatch.
.a7cf					_IntegerCode:
.a7cf	20 f1 a7	jsr $a7f1			jsr 	CheckDivideZero 			; do div zero check
.a7d2	20 29 a8	jsr $a829			jsr 	Int32Divide 				; do the division
.a7d5	20 e6 a8	jsr $a8e6			jsr 	CalculateSign 				; calculate result sign
.a7d8					NSMCopyPlusTwoToZero:
.a7d8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a7db	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a7de	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a7e1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7e4	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a7e7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a7ea	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a7ed	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a7f0	60		rts				rts
.a7f1					CheckDivideZero:
.a7f1	e8		inx				inx
.a7f2	20 47 a0	jsr $a047			jsr 	NSMIsZero
.a7f5	f0 02		beq $a7f9			beq 	_CDVError
.a7f7	ca		dex				dex
.a7f8	60		rts				rts
.a7f9					_CDVError:
.a7f9	a9 03		lda #$03		lda	#3
.a7fb	4c 5f 94	jmp $945f		jmp	ErrorHandler
.a7fe					IntegerModulus:
.a7fe	fa		plx				plx
.a7ff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a802	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a805	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a806	0a		asl a				asl 	a
.a807	10 05		bpl $a80e			bpl 	_NotRef
.a809	48		pha				pha
.a80a	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a80d	68		pla				pla
.a80e					_NotRef:
.a80e	0a		asl a				asl 	a
.a80f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a811	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a814	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a817	f0 03		beq $a81c			beq 	_IntegerCode 				; if clear, then we have two integers
.a819	4c 88 ad	jmp $ad88			jmp 	TypeError 					; anything else, type mismatch.
.a81c					_IntegerCode:
.a81c					IntegerModulusNoCheck:
.a81c	20 f1 a7	jsr $a7f1			jsr 	CheckDivideZero 			; do div zero check
.a81f	20 29 a8	jsr $a829			jsr 	Int32Divide 				; do the division
.a822	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a825	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a828	60		rts				rts
.a829					Int32Divide:
.a829	48		pha				pha 								; save AXY
.a82a	5a		phy				phy
.a82b	20 ee 9f	jsr $9fee			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a82e	20 13 a0	jsr $a013			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a831	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a833					_I32DivideLoop:
.a833	e8		inx				inx
.a834	e8		inx				inx
.a835	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a838	ca		dex				dex
.a839	ca		dex				dex
.a83a	20 2d a0	jsr $a02d			jsr 	NSMRotateLeft
.a83d	20 69 a8	jsr $a869			jsr 	DivideCheckSubtract 		; check if subtract possible
.a840	90 03		bcc $a845			bcc 	_I32DivideNoCarryIn
.a842	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a845					_I32DivideNoCarryIn:
.a845	88		dey				dey 								; loop round till division completed.
.a846	d0 eb		bne $a833			bne 	_I32DivideLoop
.a848	7a		ply				ply 								; restore AXY and exit
.a849	68		pla				pla
.a84a	60		rts				rts
.a84b					Int32ShiftDivide:
.a84b	48		pha				pha 								; save AY
.a84c	5a		phy				phy
.a84d	e8		inx				inx 								; clear S[X+2]
.a84e	e8		inx				inx
.a84f	20 17 a0	jsr $a017			jsr 	NSMSetZero
.a852	ca		dex				dex
.a853	ca		dex				dex
.a854	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a856					_I32SDLoop:
.a856	20 69 a8	jsr $a869			jsr 	DivideCheckSubtract 		; check if subtract possible
.a859	e8		inx				inx
.a85a	e8		inx				inx
.a85b	20 2d a0	jsr $a02d			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a85e	ca		dex				dex
.a85f	ca		dex				dex
.a860	20 2d a0	jsr $a02d			jsr 	NSMRotateLeft
.a863	88		dey				dey 	 							; do 31 times
.a864	d0 f0		bne $a856			bne 	_I32SDLoop
.a866	7a		ply				ply 								; restore AY and exit
.a867	68		pla				pla
.a868	60		rts				rts
.a869					DivideCheckSubtract:
.a869	20 7a 96	jsr $967a			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a86c	b0 04		bcs $a872			bcs 	_DCSExit 					; if carry set, then could do, exit
.a86e	20 54 96	jsr $9654			jsr 	AddTopTwoStack 				; add it back in
.a871	18		clc				clc 								; and return False
.a872					_DCSExit:
.a872	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a873					MulInteger:
.a873	fa		plx				plx
.a874	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a877	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a87a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a87b	0a		asl a				asl 	a
.a87c	10 05		bpl $a883			bpl 	_NotRef
.a87e	48		pha				pha
.a87f	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a882	68		pla				pla
.a883					_NotRef:
.a883	0a		asl a				asl 	a 							; put MSB of type into A:7
.a884	30 0b		bmi $a891			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a886	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a889	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a88c	f0 06		beq $a894			beq 	_IntegerCode 				; if clear, then we have two integers
.a88e	4c c7 aa	jmp $aac7			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a891					_StringData:
.a891	4c 92 ad	jmp $ad92			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a894					_IntegerCode:
.a894	20 a1 a8	jsr $a8a1			jsr 	MultiplyShort
.a897	c9 00		cmp #$00			cmp 	#0
.a899	f0 05		beq $a8a0			beq 	_MIExit
.a89b	a9 04		lda #$04		lda	#4
.a89d	4c 5f 94	jmp $945f		jmp	ErrorHandler
.a8a0					_MIExit:
.a8a0	60		rts				rts
.a8a1					MultiplyShort:
.a8a1	5a		phy				phy 								; save Y
.a8a2	20 ee 9f	jsr $9fee			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a8a5	20 13 a0	jsr $a013			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a8a8	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a8aa					_I32MLoop:
.a8aa	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a8ad	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a8b0	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a8b3	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a8b6	f0 28		beq $a8e0			beq 	_I32MExit 					; exit if zero
.a8b8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a8bb	29 01		and #$01			and 	#1
.a8bd	f0 0e		beq $a8cd			beq 	_I32MNoAdd
.a8bf	20 54 96	jsr $9654			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a8c2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a8c5	10 06		bpl $a8cd			bpl 	_I32MNoAdd
.a8c7					_I32ShiftRight:
.a8c7	20 3a a0	jsr $a03a			jsr 	NSMShiftRight 				; shift S[X] right
.a8ca	c8		iny				iny 								; increment shift count
.a8cb	80 0a		bra $a8d7			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a8cd					_I32MNoAdd:
.a8cd	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a8d0	70 f5		bvs $a8c7			bvs 	_I32ShiftRight 				; instead.
.a8d2	e8		inx				inx
.a8d3	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a8d6	ca		dex				dex
.a8d7					_I32MShiftUpper:
.a8d7	e8		inx				inx 								; shift S[X+2] right
.a8d8	e8		inx				inx
.a8d9	20 3a a0	jsr $a03a			jsr 	NSMShiftRight
.a8dc	ca		dex				dex
.a8dd	ca		dex				dex
.a8de	80 ca		bra $a8aa			bra 	_I32MLoop 					; try again.
.a8e0					_I32MExit:
.a8e0	20 e6 a8	jsr $a8e6			jsr 	CalculateSign
.a8e3	98		tya				tya 								; shift in A
.a8e4	7a		ply				ply 								; restore Y and exit
.a8e5	60		rts				rts
.a8e6					CalculateSign:
.a8e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a8e9	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a8ec	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a8ef	0a		asl a				asl 	a 							; shift bit 7 into carry
.a8f0	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a8f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.95d0					CompareStrings:
.95d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.95d3	3d 01 04	and $0401,x			and 	NSStatus+1,x
.95d6	29 10		and #$10			and 	#NSBIsString
.95d8	f0 2c		beq $9606			beq 	_CSTypeError
.95da	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.95dd	85 36		sta $36				sta 	zTemp0
.95df	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95e2	85 37		sta $37				sta 	zTemp0+1
.95e4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95e7	85 38		sta $38				sta 	zTemp1
.95e9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ec	85 39		sta $39				sta 	zTemp1+1
.95ee	5a		phy				phy 								; save Y so we can access strings
.95ef	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.95f1					_CSLoop:
.95f1	c8		iny				iny
.95f2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.95f4	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.95f6	d0 06		bne $95fe			bne 	_CSDifferent
.95f8	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.95fa	d0 f5		bne $95f1			bne 	_CSLoop 					; still comparing
.95fc					_CSExit:
.95fc	7a		ply				ply 								; reached end, return zero in A from EOS
.95fd	60		rts				rts
.95fe					_CSDifferent:
.95fe	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9600	90 fa		bcc $95fc			bcc		_CSExit
.9602	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9604	80 f6		bra $95fc			bra 	_CSExit
.9606					_CSTypeError:
.9606	4c 88 ad	jmp $ad88			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9609					ShiftLeft:
.9609	38		sec				sec
.960a	80 01		bra $960d			bra 	ShiftMain
.960c					ShiftRight:
.960c	18		clc				clc
.960d					ShiftMain:
.960d	fa		plx				plx 								; restore X
.960e	08		php				php 								; save direction
.960f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9612	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9615	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9616	0a		asl a				asl 	a
.9617	10 05		bpl $961e			bpl 	_NotRef
.9619	48		pha				pha
.961a	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.961d	68		pla				pla
.961e					_NotRef:
.961e	0a		asl a				asl 	a
.961f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9621	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9624	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9627	f0 03		beq $962c			beq 	_IntegerCode 				; if clear, then we have two integers
.9629	4c 88 ad	jmp $ad88			jmp 	TypeError 					; anything else, type mismatch.
.962c					_IntegerCode:
.962c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.962f	29 e0		and #$e0			and 	#$E0
.9631	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9634	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9637	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.963a	d0 13		bne $964f			bne 	_SMExit0 					; if >= 32 it will always return zero.
.963c					_SMLoop:
.963c	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.963f	30 11		bmi $9652			bmi 	_SMExit 					; exit if done.
.9641	28		plp				plp 								; restore direcition setting
.9642	08		php				php
.9643	90 05		bcc $964a			bcc 	_SMRight
.9645	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; shift left if CS
.9648	80 f2		bra $963c			bra 	_SMLoop
.964a					_SMRight:
.964a	20 3a a0	jsr $a03a			jsr 	NSMShiftRight 				; shift right if CC
.964d	80 ed		bra $963c			bra 	_SMLoop
.964f					_SMExit0:
.964f	20 17 a0	jsr $a017			jsr 	NSMSetZero 					; return zero.
.9652					_SMExit:
.9652	28		plp				plp 								; throw direction
.9653	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9654					AddTopTwoStack:
.9654	18		clc				clc
.9655	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9658	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.965b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.965e	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9661	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9664	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9667	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.966a	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.966d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9670	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9673	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9676	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9679	60		rts				rts
.967a					SubTopTwoStack:
.967a	38		sec				sec
.967b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.967e	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9681	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9684	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9687	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.968a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.968d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9690	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9693	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9696	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9699	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.969c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.969f	60		rts				rts
.96a0					AddInteger:
.96a0	fa		plx				plx
.96a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96a4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96a7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96a8	0a		asl a				asl 	a
.96a9	10 05		bpl $96b0			bpl 	_NotRef
.96ab	48		pha				pha
.96ac	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96af	68		pla				pla
.96b0					_NotRef:
.96b0	0a		asl a				asl 	a 							; put MSB of type into A:7
.96b1	30 0b		bmi $96be			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96b3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96b6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96b9	f0 06		beq $96c1			beq 	_IntegerCode 				; if clear, then we have two integers
.96bb	4c 4f a9	jmp $a94f			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96be					_StringData:
.96be	4c 73 95	jmp $9573			jmp 	StringConcat							; at least one string - don't know both are strings.
.96c1					_IntegerCode:
.96c1					AddCode:
.96c1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96c4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.96c7	10 8b		bpl $9654			bpl 	AddTopTwoStack
.96c9	20 7a 96	jsr $967a			jsr 	SubTopTwoStack 				; do a physical subtraction
.96cc	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96cf	10 09		bpl $96da			bpl 	_AddExit
.96d1	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96d4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96d7	20 cc 9f	jsr $9fcc			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.96da					_AddExit:
.96da	60		rts				rts
.96db					SubInteger:
.96db	fa		plx				plx
.96dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96df	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96e2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96e3	0a		asl a				asl 	a
.96e4	10 05		bpl $96eb			bpl 	_NotRef
.96e6	48		pha				pha
.96e7	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96ea	68		pla				pla
.96eb					_NotRef:
.96eb	0a		asl a				asl 	a 							; put MSB of type into A:7
.96ec	30 0b		bmi $96f9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96ee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96f1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96f4	f0 06		beq $96fc			beq 	_IntegerCode 				; if clear, then we have two integers
.96f6	4c 54 a9	jmp $a954			jmp 	FloatingPointSub 							; otherwise at least one float.
.96f9					_StringData:
.96f9	4c 92 ad	jmp $ad92			jmp 	NotDoneError							; at least one string - don't know both are strings.
.96fc					_IntegerCode:
.96fc	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.96ff	49 80		eor #$80			eor 	#$80
.9701	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9704	80 bb		bra $96c1			bra 	AddCode 					; and do the same code as add.
.9706					AndInteger:
.9706	fa		plx				plx
.9707	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.970a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.970d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.970e	0a		asl a				asl 	a
.970f	10 05		bpl $9716			bpl 	_NotRef
.9711	48		pha				pha
.9712	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9715	68		pla				pla
.9716					_NotRef:
.9716	0a		asl a				asl 	a
.9717	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9719	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.971c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.971f	f0 03		beq $9724			beq 	_IntegerCode 				; if clear, then we have two integers
.9721	4c 88 ad	jmp $ad88			jmp 	TypeError 					; anything else, type mismatch.
.9724					_IntegerCode:
.9724	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9727	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.972a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.972d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9730	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9733	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9736	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9739	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.973c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.973f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9742	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9745	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9748	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.974b	60		rts				rts
.974c					OraInteger:
.974c	fa		plx				plx
.974d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9750	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9753	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9754	0a		asl a				asl 	a
.9755	10 05		bpl $975c			bpl 	_NotRef
.9757	48		pha				pha
.9758	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.975b	68		pla				pla
.975c					_NotRef:
.975c	0a		asl a				asl 	a
.975d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.975f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9762	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9765	f0 03		beq $976a			beq 	_IntegerCode 				; if clear, then we have two integers
.9767	4c 88 ad	jmp $ad88			jmp 	TypeError 					; anything else, type mismatch.
.976a					_IntegerCode:
.976a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.976d	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9770	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9773	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9776	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9779	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.977c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.977f	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9782	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9785	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9788	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.978b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.978e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9791	60		rts				rts
.9792					EorInteger:
.9792	fa		plx				plx
.9793	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9796	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9799	0a		asl a				asl 	a 							; shift reference bit into sign bit
.979a	0a		asl a				asl 	a
.979b	10 05		bpl $97a2			bpl 	_NotRef
.979d	48		pha				pha
.979e	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97a1	68		pla				pla
.97a2					_NotRef:
.97a2	0a		asl a				asl 	a
.97a3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97a5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97a8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97ab	f0 03		beq $97b0			beq 	_IntegerCode 				; if clear, then we have two integers
.97ad	4c 88 ad	jmp $ad88			jmp 	TypeError 					; anything else, type mismatch.
.97b0					_IntegerCode:
.97b0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.97b3	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.97b6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.97bc	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.97bf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97c2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.97c5	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.97c8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97cb	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.97ce	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.97d1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97d4	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.97d7	60		rts				rts
.97d8					WordIndirect:
.97d8	fa		plx				plx
.97d9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97dc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97df	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97e0	0a		asl a				asl 	a
.97e1	10 05		bpl $97e8			bpl 	_NotRef
.97e3	48		pha				pha
.97e4	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e7	68		pla				pla
.97e8					_NotRef:
.97e8	0a		asl a				asl 	a
.97e9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97eb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ee	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97f1	f0 03		beq $97f6			beq 	_IntegerCode 				; if clear, then we have two integers
.97f3	4c 88 ad	jmp $ad88			jmp 	TypeError 					; anything else, type mismatch.
.97f6					_IntegerCode:
.97f6	20 c1 96	jsr $96c1			jsr 	AddCode 					; add the two values
.97f9	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97fb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97fe	60		rts				rts
.97ff					ByteIndirect:
.97ff	fa		plx				plx
.9800	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9803	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9806	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9807	0a		asl a				asl 	a
.9808	10 05		bpl $980f			bpl 	_NotRef
.980a	48		pha				pha
.980b	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.980e	68		pla				pla
.980f					_NotRef:
.980f	0a		asl a				asl 	a
.9810	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9812	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9815	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9818	f0 03		beq $981d			beq 	_IntegerCode 				; if clear, then we have two integers
.981a	4c 88 ad	jmp $ad88			jmp 	TypeError 					; anything else, type mismatch.
.981d					_IntegerCode:
.981d	20 c1 96	jsr $96c1			jsr 	AddCode 					; add the two values
.9820	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9822	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9825	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a8f4					ConvertInt16:
.a8f4	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a8f7	8e 10 04	stx $0410			stx 	NSMantissa1
.a8fa	9c 18 04	stz $0418			stz 	NSMantissa2
.a8fd	9c 20 04	stz $0420			stz 	NSMantissa3
.a900	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a903	a2 00		ldx #$00			ldx 	#0 							; stack level
.a905	a9 0a		lda #$0a			lda 	#10 						; base
.a907	80 00		bra $a909			bra 	ConvertInt32
.a909					ConvertInt32:
.a909	5a		phy				phy
.a90a	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a90c	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a90f	10 08		bpl $a919			bpl 	_CI32NotNeg
.a911	48		pha				pha
.a912	a9 2d		lda #$2d			lda 	#'-'
.a914	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a917	c8		iny				iny
.a918	68		pla				pla
.a919					_CI32NotNeg:
.a919	20 27 a9	jsr $a927			jsr 	_CI32DivideConvert 			; recursive conversion
.a91c	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a91e	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a921	7a		ply				ply
.a922	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a924	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a926	60		rts				rts
.a927					_CI32DivideConvert:
.a927	e8		inx				inx 								; write to next slot up
.a928	20 19 a0	jsr $a019			jsr 	NSMSetByte
.a92b	ca		dex				dex
.a92c	20 29 a8	jsr $a829			jsr 	Int32Divide 				; divide
.a92f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a932	48		pha				pha
.a933	20 d8 a7	jsr $a7d8			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a936	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; is it zero ?
.a939	f0 06		beq $a941			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a93b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a93e	20 27 a9	jsr $a927			jsr 	_CI32DivideConvert 			; and recusrively call.
.a941					_CI32NoRecurse:
.a941	68		pla				pla 								; remainder
.a942	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a944	90 02		bcc $a948			bcc 	_CI32NotHex
.a946	69 26		adc #$26			adc 	#6+32
.a948					_CI32NotHex:
.a948	69 30		adc #$30			adc 	#48
.a94a	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a94d	c8		iny				iny
.a94e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9826					PrecedenceLevel:
>9826	04					.byte	 4	; $00 <<
>9827	02					.byte	 2	; $01 <=
>9828	02					.byte	 2	; $02 <>
>9829	00					.byte	 0	; $03 !!3
>982a	00					.byte	 0	; $04 ><
>982b	02					.byte	 2	; $05 >=
>982c	04					.byte	 4	; $06 >>
>982d	00					.byte	 0	; $07 !!7
>982e	00					.byte	 0	; $08 !!8
>982f	00					.byte	 0	; $09 !!9
>9830	00					.byte	 0	; $0a !!10
>9831	00					.byte	 0	; $0b !!11
>9832	00					.byte	 0	; $0c !!12
>9833	00					.byte	 0	; $0d !!13
>9834	00					.byte	 0	; $0e !!14
>9835	00					.byte	 0	; $0f !!15
>9836	00					.byte	 0	; $10 @
>9837	00					.byte	 0	; $11 !!17
>9838	00					.byte	 0	; $12 !!18
>9839	00					.byte	 0	; $13 [
>983a	04					.byte	 4	; $14 \
>983b	00					.byte	 0	; $15 ]
>983c	01					.byte	 1	; $16 ^
>983d	00					.byte	 0	; $17 _
>983e	00					.byte	 0	; $18 `
>983f	00					.byte	 0	; $19 !!25
>9840	00					.byte	 0	; $1a !!26
>9841	00					.byte	 0	; $1b {
>9842	01					.byte	 1	; $1c |
>9843	00					.byte	 0	; $1d }
>9844	00					.byte	 0	; $1e ~
>9845	00					.byte	 0	; $1f [7m<7F>[m
>9846	00					.byte	 0	; $20
>9847	05					.byte	 5	; $21 !
>9848	00					.byte	 0	; $22 "
>9849	00					.byte	 0	; $23 #
>984a	05					.byte	 5	; $24 $
>984b	04					.byte	 4	; $25 %
>984c	01					.byte	 1	; $26 &
>984d	00					.byte	 0	; $27 '
>984e	00					.byte	 0	; $28 (
>984f	00					.byte	 0	; $29 )
>9850	04					.byte	 4	; $2a *
>9851	03					.byte	 3	; $2b +
>9852	00					.byte	 0	; $2c ,
>9853	03					.byte	 3	; $2d -
>9854	00					.byte	 0	; $2e .
>9855	04					.byte	 4	; $2f /
>9856	00					.byte	 0	; $30 0
>9857	00					.byte	 0	; $31 1
>9858	00					.byte	 0	; $32 2
>9859	00					.byte	 0	; $33 3
>985a	00					.byte	 0	; $34 4
>985b	00					.byte	 0	; $35 5
>985c	00					.byte	 0	; $36 6
>985d	00					.byte	 0	; $37 7
>985e	00					.byte	 0	; $38 8
>985f	00					.byte	 0	; $39 9
>9860	00					.byte	 0	; $3a :
>9861	00					.byte	 0	; $3b ;
>9862	02					.byte	 2	; $3c <
>9863	02					.byte	 2	; $3d =
>9864	02					.byte	 2	; $3e >
>9865	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9866					EvaluateExpressionAt0:
.9866	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9868					EvaluateExpression:
.9868	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.986a					EvaluateExpressionAtPrecedence:
.986a	48		pha				pha 								; save precedence level
.986b	20 39 9b	jsr $9b39			jsr 	EvaluateTerm 				; evaluate term into level X.
.986e	68		pla				pla 								; restore precedence level.
.986f					_EXPRLoop:
.986f	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9871	b1 30		lda ($30),y			lda 	(codePtr),y
.9873	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9875	b0 25		bcs $989c			bcs 	_EXPRExit
.9877	da		phx				phx 								; read the operator precedence
.9878	aa		tax				tax
.9879	bd 26 98	lda $9826,x			lda 	PrecedenceLevel,x
.987c	fa		plx				plx
.987d	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.987f	f0 1b		beq $989c			beq 	_EXPRExit
.9881	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9883	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9885	c5 37		cmp $37				cmp 	zTemp0+1
.9887	b0 13		bcs $989c			bcs		_EXPRExit 					; if current >= operator exit
.9889	48		pha				pha 								; save current precedence.
.988a	b1 30		lda ($30),y			lda 	(codePtr),y
.988c	c8		iny				iny
.988d	48		pha				pha
.988e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9890	e8		inx				inx 								; work out the right hand side.
.9891	20 6a 98	jsr $986a			jsr 	EvaluateExpressionAtPrecedence
.9894	ca		dex				dex
.9895	68		pla				pla 								; get operator, call the code.
.9896	20 9f 98	jsr $989f			jsr 	_EXPRCaller
.9899	68		pla				pla 								; restore precedence level
.989a	80 d3		bra $986f			bra 	_EXPRLoop 					; and go round.
.989c					_EXPRExit:
.989c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.989e	60		rts				rts
.989f					_EXPRCaller:
.989f	da		phx				phx 								; save on stack, first thing is to restore it
.98a0	0a		asl a				asl 	a 							; double so can use vectors into X
.98a1	aa		tax				tax
.98a2	7c a6 90	jmp ($90a6,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a94f					FloatingPointAdd:
.a94f	20 f0 aa	jsr $aaf0			jsr 	FloatPrepare 				; prepare for floats
.a952	80 0b		bra $a95f			bra 	FloatAdd
.a954					FloatingPointSub:
.a954	20 f0 aa	jsr $aaf0			jsr 	FloatPrepare 				; prepare for floats
.a957					FloatSubtract:
.a957	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a95a	49 80		eor #$80			eor 	#$80
.a95c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a95f					FloatAdd:
.a95f	48		pha				pha
.a960	5a		phy				phy
.a961	20 01 ab	jsr $ab01			jsr 	NSNormalise 				; normalise S[X]
.a964	f0 54		beq $a9ba			beq 	_FAReturn1
.a966	e8		inx				inx 								; normalise S[X+1]
.a967	20 01 ab	jsr $ab01			jsr 	NSNormalise
.a96a	ca		dex				dex
.a96b	c9 00		cmp #$00			cmp 	#0
.a96d	f0 6f		beq $a9de			beq 	_FAExit 					; if so, just return A
.a96f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a972	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a975	f0 1b		beq $a992			beq 	_FAExponentsEqual
.a977	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a97a	a8		tay				tay
.a97b	38		sec				sec 								; do a signed comparison of the exponents.
.a97c	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a97f	50 02		bvc $a983			bvc 	_FANoSignedChange
.a981	49 80		eor #$80			eor 	#$80
.a983					_FANoSignedChange:
.a983	29 80		and #$80			and 	#$80
.a985	10 03		bpl $a98a			bpl 	_FAHaveMax
.a987	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a98a					_FAHaveMax:
.a98a	20 e1 a9	jsr $a9e1			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a98d	e8		inx				inx
.a98e	20 e1 a9	jsr $a9e1			jsr 	_FAShiftToExponent
.a991	ca		dex				dex
.a992					_FAExponentsEqual:
.a992	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a995	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a998	30 10		bmi $a9aa			bmi 	_FADifferentSigns
.a99a	20 54 96	jsr $9654			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a99d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a9a0	10 3c		bpl $a9de			bpl 	_FAExit 					; if no, we are done.
.a9a2	20 3a a0	jsr $a03a			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a9a5	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a9a8	80 34		bra $a9de			bra 	_FAExit
.a9aa					_FADifferentSigns:
.a9aa	20 7a 96	jsr $967a			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a9ad	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a9b0	10 2c		bpl $a9de			bpl 	_FAExit 					; if no, we are done.
.a9b2	20 c3 9f	jsr $9fc3			jsr 	NSMNegate 					; netate result
.a9b5	20 cc 9f	jsr $9fcc			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a9b8	80 24		bra $a9de			bra 	_FAExit
.a9ba					_FAReturn1:
.a9ba	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a9bd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a9c0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a9c3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9c6	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a9c9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a9cc	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a9cf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a9d2	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a9d5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a9d8	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a9db	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9de					_FAExit:
.a9de	7a		ply				ply
.a9df	68		pla				pla
.a9e0	60		rts				rts
.a9e1					_FAShiftToExponent:
.a9e1					_FAShiftToExponent2:
.a9e1	98		tya				tya 								; compare Y to exponent
.a9e2	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a9e5	f0 08		beq $a9ef			beq 	_FASEExit 					; exit if so.
.a9e7	20 3a a0	jsr $a03a			jsr 	NSMShiftRight	 			; shift the mantissa right
.a9ea	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a9ed	80 f2		bra $a9e1			bra 	_FAShiftToExponent2
.a9ef					_FASEExit:
.a9ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a9f0					CompareFloat:
.a9f0	20 57 a9	jsr $a957			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a9f3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a9f6	29 f8		and #$f8			and 	#$F8
.a9f8	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a9fb	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a9fe	f0 09		beq $aa09			beq 	_FCExit 					; zero, so approximately identical
.aa00	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.aa02	3c 00 04	bit $0400,x			bit 	NSStatus,x
.aa05	10 02		bpl $aa09			bpl 	_FCExit
.aa07					_FCNegative:
.aa07	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.aa09					_FCExit:
.aa09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.aa0a					FDivideCommand:
.aa0a	fa		plx				plx	 								; restore stack position
.aa0b	20 f0 aa	jsr $aaf0			jsr 	FloatPrepare 				; prepare for floats
.aa0e					FloatDivide:
.aa0e	48		pha				pha
.aa0f	e8		inx				inx
.aa10	20 01 ab	jsr $ab01			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aa13	ca		dex				dex
.aa14	c9 00		cmp #$00			cmp 	#0
.aa16	f0 20		beq $aa38			beq 	_FDZero
.aa18	20 01 ab	jsr $ab01			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aa1b	f0 19		beq $aa36			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aa1d	20 4b a8	jsr $a84b			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.aa20	20 d8 a7	jsr $a7d8			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.aa23	20 01 ab	jsr $ab01			jsr		NSNormalise 				; renormalise
.aa26	20 e6 a8	jsr $a8e6			jsr 	CalculateSign 				; calculate result sign
.aa29	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.aa2c	38		sec				sec
.aa2d	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aa30	38		sec				sec
.aa31	e9 1e		sbc #$1e			sbc 	#30
.aa33	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa36					_FDExit:
.aa36	68		pla				pla
.aa37	60		rts				rts
.aa38					_FDZero:
.aa38	a9 03		lda #$03		lda	#3
.aa3a	4c 5f 94	jmp $945f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.aa3d					FloatFractionalPart:
.aa3d	5a		phy				phy
.aa3e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.aa41	29 7f		and #$7f			and 	#$7F
.aa43	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa46	20 01 ab	jsr $ab01			jsr 	NSNormalise
.aa49	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.aa4c	38		sec				sec
.aa4d	e9 e0		sbc #$e0			sbc 	#$E0
.aa4f	90 31		bcc $aa82			bcc 	_FFPExit 					; already fractional
.aa51	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.aa53	b0 2a		bcs $aa7f			bcs 	_FFPZero
.aa55	a8		tay				tay 								; put count to do in Y
.aa56	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.aa59	20 84 aa	jsr $aa84			jsr 	_FFPPartial
.aa5c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa5f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.aa62	20 84 aa	jsr $aa84			jsr 	_FFPPartial
.aa65	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa68	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa6b	20 84 aa	jsr $aa84			jsr 	_FFPPartial
.aa6e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa71	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa74	20 84 aa	jsr $aa84			jsr 	_FFPPartial
.aa77	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aa7a	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; zeroed check.
.aa7d	d0 03		bne $aa82			bne 	_FFPExit
.aa7f					_FFPZero:
.aa7f	20 17 a0	jsr $a017			jsr 	NSMSetZero
.aa82					_FFPExit:
.aa82	7a		ply				ply
.aa83	60		rts				rts
.aa84					_FFPPartial:
.aa84	c0 00		cpy #$00			cpy 	#0 							; no more to do
.aa86	f0 17		beq $aa9f			beq 	_FFFPPExit
.aa88	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.aa8a	b0 0c		bcs $aa98			bcs 	_FFFPPWholeByte
.aa8c	5a		phy				phy
.aa8d					_FFFPPLeft:
.aa8d	0a		asl a				asl 	a
.aa8e	88		dey				dey
.aa8f	d0 fc		bne $aa8d			bne 	_FFFPPLeft
.aa91	7a		ply				ply
.aa92					_FFFPPRight:
.aa92	4a		lsr a				lsr 	a
.aa93	88		dey				dey
.aa94	d0 fc		bne $aa92			bne 	_FFFPPRight
.aa96	80 07		bra $aa9f			bra 	_FFFPPExit
.aa98					_FFFPPWholeByte:
.aa98	98		tya				tya 								; subtract 8 from count
.aa99	38		sec				sec
.aa9a	e9 08		sbc #$08			sbc 	#8
.aa9c	a8		tay				tay
.aa9d	a9 00		lda #$00			lda 	#0 							; and clear all
.aa9f					_FFFPPExit:
.aa9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aaa0					FloatIntegerPart:
.aaa0	48		pha				pha
.aaa1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.aaa4	f0 1f		beq $aac5			beq 	_FIPExit 					; if so do nothing
.aaa6	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; is it zero ?
.aaa9	f0 17		beq $aac2			beq 	_FIPZero 					; if so return zero.
.aaab	20 01 ab	jsr $ab01			jsr 	NSNormalise 				; normalise
.aaae	f0 12		beq $aac2			beq 	_FIPZero 					; normalised to zero, exit zero
.aab0					_FIPShift:
.aab0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.aab3	10 08		bpl $aabd			bpl 	_FIPCheckZero
.aab5	20 3a a0	jsr $a03a			jsr 	NSMShiftRight 				; shift mantissa right
.aab8	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.aabb	80 f3		bra $aab0			bra 	_FIPShift
.aabd					_FIPCheckZero:
.aabd	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; avoid -0 problem
.aac0	d0 03		bne $aac5			bne 	_FIPExit 					; set to zero if mantissa zero.
.aac2					_FIPZero:
.aac2	20 17 a0	jsr $a017			jsr 	NSMSetZero
.aac5					_FIPExit:
.aac5	68		pla				pla
.aac6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.aac7					FloatingPointMultiply:
.aac7	20 f0 aa	jsr $aaf0			jsr 	FloatPrepare 				; prepare for floats
.aaca					FloatMultiply:
.aaca	48		pha				pha
.aacb	20 01 ab	jsr $ab01			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aace	f0 1b		beq $aaeb			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aad0	e8		inx				inx
.aad1	20 01 ab	jsr $ab01			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aad4	ca		dex				dex
.aad5	c9 00		cmp #$00			cmp 	#0
.aad7	f0 0f		beq $aae8			beq 	_FDSetZero
.aad9	20 a1 a8	jsr $a8a1			jsr 	MultiplyShort 				; calculate the result.
.aadc	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.aadf	18		clc				clc
.aae0	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.aae3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aae6	80 03		bra $aaeb			bra 	_FDExit
.aae8					_FDSetZero:
.aae8	20 17 a0	jsr $a017			jsr 	NSMSetZero 					; return 0
.aaeb					_FDExit:
.aaeb	20 01 ab	jsr $ab01			jsr 	NSNormalise 				; normalise the result
.aaee	68		pla				pla
.aaef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aaf0					FloatPrepare:
.aaf0	20 78 99	jsr $9978			jsr 	DereferenceTopTwo 			; dereference the top two values
.aaf3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.aaf6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aaf9	29 10		and #$10			and 	#NSBIsString
.aafb	d0 01		bne $aafe			bne 	_FDType
.aafd	60		rts				rts
.aafe					_FDType:
.aafe	4c 88 ad	jmp $ad88			jmp 	TypeError
.ab01					NSNormalise:
.ab01	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.ab04	29 80		and #$80			and 	#$80
.ab06	09 08		ora #$08			ora 	#NSTFloat
.ab08	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab0b	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; if zero exit
.ab0e	d0 09		bne $ab19			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ab10	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ab13	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ab16	a9 00		lda #$00			lda 	#0 							; set Z flag
.ab18	60		rts				rts
.ab19					_NSNormaliseOptimise:
.ab19	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.ab1c	d0 22		bne $ab40			bne 	_NSNormaliseLoop
.ab1e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.ab21	30 1d		bmi $ab40			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.ab23	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ab26	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ab29	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ab2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ab2f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab32	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.ab35	bd 28 04	lda $0428,x			lda 	NSExponent,x
.ab38	38		sec				sec
.ab39	e9 08		sbc #$08			sbc 	#8
.ab3b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ab3e	80 d9		bra $ab19			bra 	_NSNormaliseOptimise
.ab40					_NSNormaliseLoop:
.ab40	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.ab43	70 08		bvs $ab4d			bvs 	_NSNExit 					; exit if so with Z flag clear
.ab45	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; shift mantissa left
.ab48	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.ab4b	80 f3		bra $ab40			bra 	_NSNormaliseLoop
.ab4d					_NSNExit:
.ab4d	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ab4f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.98a5					AssignNumber:
.98a5	5a		phy				phy
.98a6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.98a9	85 36		sta $36				sta 	zTemp0
.98ab	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98ae	85 37		sta $37				sta 	zTemp0+1
.98b0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.98b3	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.98b5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98b8	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.98ba	c9 08		cmp #$08			cmp 	#NSTFloat
.98bc	f0 2a		beq $98e8			beq 	_ANFloat
.98be	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.98c1	f0 05		beq $98c8			beq		_ANNotFloat
.98c3	e8		inx				inx
.98c4	20 a0 aa	jsr $aaa0			jsr 	FloatIntegerPart 			; make it an integer
.98c7	ca		dex				dex
.98c8					_ANNotFloat:
.98c8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.98cb	29 03		and #$03			and 	#3
.98cd	d0 05		bne $98d4			bne 	_ANByteWord
.98cf	20 f4 98	jsr $98f4			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.98d2	80 1e		bra $98f2			bra 	_ANExit
.98d4					_ANByteWord:
.98d4	48		pha				pha 								; save count
.98d5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.98d8	92 36		sta ($36)			sta 	(zTemp0)
.98da	68		pla				pla
.98db	c9 01		cmp #$01			cmp	 	#1
.98dd	f0 13		beq $98f2			beq 	_ANExit
.98df	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.98e2	a0 01		ldy #$01			ldy 	#1
.98e4	91 36		sta ($36),y			sta 	(zTemp0),y
.98e6	80 0a		bra $98f2			bra 	_ANExit
.98e8					_ANFloat:
.98e8	20 f4 98	jsr $98f4			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.98eb	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.98ee	a0 04		ldy #$04			ldy 	#4
.98f0	91 36		sta ($36),y			sta 	(zTemp0),y
.98f2					_ANExit:
.98f2	7a		ply				ply
.98f3	60		rts				rts
.98f4					_ANCopy4PackSign:
.98f4	a0 03		ldy #$03			ldy 	#3
.98f6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.98f9	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.98fb	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.98fe	91 36		sta ($36),y			sta 	(zTemp0),y
.9900	88		dey				dey
.9901	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9904	91 36		sta ($36),y			sta 	(zTemp0),y
.9906	88		dey				dey
.9907	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.990a	91 36		sta ($36),y			sta 	(zTemp0),y
.990c	88		dey				dey
.990d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9910	91 36		sta ($36),y			sta 	(zTemp0),y
.9912	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9913					AssignString:
.9913	5a		phy				phy
.9914	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9917	85 38		sta $38				sta 	zTemp1
.9919	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.991c	85 39		sta $39				sta 	zTemp1+1
.991e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9921	85 36		sta $36				sta 	zTemp0
.9923	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9926	85 37		sta $37				sta 	zTemp0+1
.9928	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.992a	b1 36		lda ($36),y			lda 	(zTemp0),y
.992c	f0 23		beq $9951			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.992e	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.992f	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9931	e9 02		sbc #$02			sbc 	#2
.9933	85 3c		sta $3c				sta 	zsTemp
.9935	a0 01		ldy #$01			ldy 	#1
.9937	b1 36		lda ($36),y			lda 	(zTemp0),y
.9939	e9 00		sbc #$00			sbc 	#0
.993b	85 3d		sta $3d				sta 	zsTemp+1
.993d	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.993f					_ASGetLength:
.993f	c8		iny				iny
.9940	b1 38		lda ($38),y			lda 	(zTemp1),y
.9942	d0 fb		bne $993f			bne 	_ASGetLength
.9944	98		tya				tya 								; is this length <= current length
.9945	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9947	90 20		bcc $9969			bcc 	_ASCopyString
.9949	f0 1e		beq $9969			beq 	_ASCopyString
.994b	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.994d	a0 01		ldy #$01			ldy 	#1
.994f	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9951					_ASNewStringRequired:
.9951	e8		inx				inx 								; concrete the new string.
.9952	20 24 b0	jsr $b024			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9955	ca		dex				dex
.9956	18		clc				clc
.9957	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.995a	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.995c	92 36		sta ($36)			sta 	(zTemp0)
.995e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9961	69 00		adc #$00			adc 	#0
.9963	a0 01		ldy #$01			ldy 	#1
.9965	91 36		sta ($36),y			sta 	(zTemp0),y
.9967	80 0d		bra $9976			bra 	_ASExit
.9969					_ASCopyString:
.9969	a0 00		ldy #$00			ldy 	#0
.996b					_ASCopyLoop:
.996b	b1 38		lda ($38),y			lda 	(zTemp1),y
.996d	c8		iny				iny
.996e	c8		iny				iny
.996f	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9971	88		dey				dey
.9972	c9 00		cmp #$00			cmp 	#0
.9974	d0 f5		bne $996b			bne 	_ASCopyLoop
.9976					_ASExit:
.9976	7a		ply				ply
.9977	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9978					DereferenceTopTwo:
.9978	e8		inx				inx
.9979	20 7d 99	jsr $997d			jsr 	Dereference 				; deref x+1
.997c	ca		dex				dex  								; falls through to deref x
.997d					Dereference:
.997d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9980	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9982	f0 57		beq $99db			beq 	_DRFExit 					; not a reference
.9984	5a		phy				phy
.9985	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9988	85 36		sta $36				sta 	zTemp0
.998a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.998d	85 37		sta $37				sta 	zTemp0+1
.998f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9992	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9994	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9997	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.999a	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.999c	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.999e	f0 0f		beq $99af			beq 	_DRFDereferenceTwo
.99a0	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.99a2	f0 39		beq $99dd			beq 	_DRFFull
.99a4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.99a7	29 03		and #$03			and 	#3
.99a9	f0 32		beq $99dd			beq 	_DRFFull 					; the whole word
.99ab	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.99ad	f0 07		beq $99b6			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.99af					_DRFDereferenceTwo:
.99af	a0 01		ldy #$01			ldy 	#1
.99b1	b1 36		lda ($36),y			lda 	(zTemp0),y
.99b3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99b6					_DRFClear23:
.99b6	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.99b9	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.99bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.99bf	29 18		and #$18			and 	#NSBTypeMask
.99c1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99c4	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.99c6	d0 12		bne $99da			bne 	_DRFNotString
.99c8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.99cb	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.99ce	d0 0a		bne $99da			bne 	_DRFNotString
.99d0	a9 dc		lda #$dc			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.99d2	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.99d5	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.99d7	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.99da					_DRFNotString
.99da	7a		ply				ply 								; restore Y and exit
.99db					_DRFExit:
.99db	60		rts				rts
.99dc					_DRFNullString:
>99dc	00						.byte 	0
.99dd					_DRFFull:
.99dd	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.99df	b1 36		lda ($36),y			lda 	(zTemp0),y
.99e1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99e4	c8		iny				iny
.99e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.99e7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.99ea	c8		iny				iny
.99eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.99ed	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99f0	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.99f3	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.99f6	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.99f8	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.99fb	f0 06		beq $9a03			beq 	_DRFNoExponent
.99fd	c8		iny				iny 								; if not, read the exponent as well.
.99fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a00	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a03					_DRFNoExponent:
.9a03	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9a06	10 0d		bpl $9a15			bpl 	_DRFExit2 					; if not, then exit.
.9a08	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9a0a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a0d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9a10	09 80		ora #$80			ora 	#NSBIsNegative
.9a12	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a15					_DRFExit2:
.9a15	7a		ply				ply
.9a16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9a17					EncodeNumberStart:
.9a17	38		sec				sec
.9a18	80 01		bra $9a1b			bra 	EncodeNumberContinue+1
.9a1a					EncodeNumberContinue:
.9a1a	18		clc				clc
.9a1b					EncodeNumber:
.9a1b	08		php				php 								; save reset.
.9a1c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a1e	f0 12		beq $9a32			beq 	_ENIsOkay
.9a20	c9 30		cmp #$30			cmp 	#"0"
.9a22	90 04		bcc $9a28			bcc 	_ENBadNumber
.9a24	c9 3a		cmp #$3a			cmp 	#"9"+1
.9a26	90 0a		bcc $9a32			bcc 	_ENIsOkay
.9a28					_ENBadNumber:
.9a28	28		plp				plp 								; throw saved reset
.9a29	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9a2c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a2e	f0 7e		beq $9aae			beq 	_ENConstructFinal
.9a30					_ENFail:
.9a30	18		clc				clc 								; not allowed
.9a31	60		rts				rts
.9a32					_ENIsOkay:
.9a32	28		plp				plp 								; are we restarting
.9a33	90 15		bcc $9a4a			bcc 	_ENNoRestart
.9a35					_ENStartEncode:
.9a35	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9a37	f0 0c		beq $9a45			beq 	_ENFirstDP
.9a39	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9a3b	20 19 a0	jsr $a019			jsr 	NSMSetByte
.9a3e	a9 01		lda #$01			lda 	#ESTA_Low
.9a40					_ENExitChange:
.9a40	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9a43	38		sec				sec
.9a44	60		rts				rts
.9a45					_ENFirstDP:
.9a45	20 17 a0	jsr $a017			jsr 	NSMSetZero 					; clear integer part
.9a48	80 3f		bra $9a89			bra 	_ESTASwitchFloat			; go straight to float and exi
.9a4a					_ENNoRestart:
.9a4a	48		pha				pha 								; save on stack.
.9a4b	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9a4e	c9 01		cmp #$01			cmp 	#ESTA_Low
.9a50	f0 09		beq $9a5b			beq  	_ESTALowState
.9a52	c9 02		cmp #$02			cmp 	#ESTA_High
.9a54	f0 29		beq $9a7f			beq 	_ESTAHighState
.9a56	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a58	f0 3b		beq $9a95			beq 	_ESTADecimalState
>9a5a	db						.byte 	$DB 						; causes a break in the emulator
.9a5b					_ESTALowState:
.9a5b	68		pla				pla 								; get value back
.9a5c	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a5e	f0 29		beq $9a89			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a60	29 0f		and #$0f			and 	#15 						; make digit
.9a62	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9a65	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9a68	0a		asl a				asl 	a
.9a69	0a		asl a				asl 	a
.9a6a	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a6d	0a		asl a				asl 	a
.9a6e	6d 86 04	adc $0486			adc 	DigitTemp
.9a71	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a74	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9a76	90 05		bcc $9a7d			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9a78	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9a7a	8d 85 04	sta $0485			sta 	EncodeState
.9a7d					_ESTANoSwitch:
.9a7d	38		sec				sec
.9a7e	60		rts				rts
.9a7f					_ESTAHighState:
.9a7f	68		pla				pla 								; get value back
.9a80	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9a82	f0 05		beq $9a89			beq 	_ESTASwitchFloat
.9a84	20 e8 9a	jsr $9ae8			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9a87	38		sec				sec
.9a88	60		rts				rts
.9a89					_ESTASwitchFloat:
.9a89	9c 87 04	stz $0487			stz 	DecimalCount
.9a8c	e8		inx				inx 								; zero the decimal additive.
.9a8d	20 17 a0	jsr $a017			jsr 	NSMSetZero
.9a90	ca		dex				dex
.9a91	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9a93	80 ab		bra $9a40			bra 	_ENExitChange
.9a95					_ESTADecimalState:
.9a95	68		pla				pla 								; digit.
.9a96	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9a98	f0 96		beq $9a30			beq 	_ENFail
.9a9a	e8		inx				inx 								; put digit into fractional part of X+1
.9a9b	20 e8 9a	jsr $9ae8			jsr 	ESTAShiftDigitIntoMantissa
.9a9e	ca		dex				dex
.9a9f	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9aa2	ad 87 04	lda $0487			lda 	DecimalCount
.9aa5	c9 0b		cmp #$0b			cmp 	#11
.9aa7	f0 02		beq $9aab			beq 	_ESTADSFail
.9aa9	38		sec				sec
.9aaa	60		rts				rts
.9aab					_ESTADSFail:
.9aab	4c 83 ad	jmp $ad83			jmp 	RangeError
.9aae					_ENConstructFinal:
.9aae	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9ab1	f0 33		beq $9ae6			beq 	_ENCFExit 					; no decimals
.9ab3	5a		phy				phy
.9ab4	0a		asl a				asl 	a 							; x 4 and CLC
.9ab5	0a		asl a				asl 	a
.9ab6	6d 87 04	adc $0487			adc 	DecimalCount
.9ab9	a8		tay				tay
.9aba	b9 42 ad	lda $ad42,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9abd	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ac0	b9 43 ad	lda $ad43,y			lda 	DecimalScalarTable-5+1,y
.9ac3	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ac6	b9 44 ad	lda $ad44,y			lda 	DecimalScalarTable-5+2,y
.9ac9	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9acc	b9 45 ad	lda $ad45,y			lda 	DecimalScalarTable-5+3,y
.9acf	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ad2	b9 46 ad	lda $ad46,y			lda 	DecimalScalarTable-5+4,y
.9ad5	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ad8	a9 08		lda #$08			lda 	#NSTFloat
.9ada	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9add	7a		ply				ply
.9ade	e8		inx				inx 								; multiply decimal const by decimal scalar
.9adf	20 ca aa	jsr $aaca			jsr 	FloatMultiply
.9ae2	ca		dex				dex
.9ae3	20 5f a9	jsr $a95f			jsr 	FloatAdd 					; add to integer part.
.9ae6					_ENCFExit:
.9ae6	18		clc				clc 								; reject the digit.
.9ae7	60		rts				rts
.9ae8					ESTAShiftDigitIntoMantissa:
.9ae8	29 0f		and #$0f			and 	#15 						; save digit
.9aea	48		pha				pha
.9aeb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9aee	48		pha				pha
.9aef	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9af2	48		pha				pha
.9af3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9af6	48		pha				pha
.9af7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9afa	48		pha				pha
.9afb	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; x 2
.9afe	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; x 4
.9b01	18		clc				clc 								; pop mantissa and add
.9b02	68		pla				pla
.9b03	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b06	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b09	68		pla				pla
.9b0a	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9b0d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b10	68		pla				pla
.9b11	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9b14	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b17	68		pla				pla
.9b18	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9b1b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9b1e	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; x 10
.9b21	68		pla				pla 								; add digit
.9b22	18		clc				clc
.9b23	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b26	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b29	90 0d		bcc $9b38			bcc 	_ESTASDExit
.9b2b	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9b2e	d0 08		bne $9b38			bne 	_ESTASDExit
.9b30	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9b33	d0 03		bne $9b38			bne 	_ESTASDExit
.9b35	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9b38					_ESTASDExit:
.9b38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9b39					EvaluateTerm:
.9b39	b1 30		lda ($30),y			lda 	(codePtr),y
.9b3b	30 18		bmi $9b55			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9b3d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9b3f	b0 6f		bcs $9bb0			bcs 	_ETVariable
.9b41	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9b43	90 6e		bcc $9bb3			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9b45	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b47	b0 6a		bcs $9bb3			bcs 	_ETPuncUnary
.9b49	20 17 9a	jsr $9a17			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9b4c					_ETNumber:
.9b4c	c8		iny				iny 								; keep encoding until we have the numbers
.9b4d	b1 30		lda ($30),y			lda 	(codePtr),y
.9b4f	20 1a 9a	jsr $9a1a			jsr 	EncodeNumberContinue
.9b52	b0 f8		bcs $9b4c			bcs 	_ETNumber 					; go back if accepted.
.9b54	60		rts				rts
.9b55					_ETCheckUnary:
.9b55	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b57	f0 41		beq $9b9a			beq 	_ETString
.9b59	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b5b	f0 12		beq $9b6f			beq 	_ETHexConstant
.9b5d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b5f	90 0b		bcc $9b6c			bcc 	_ETSyntaxError
.9b61	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9b63	b0 07		bcs $9b6c			bcs 	_ETSyntaxError
.9b65	da		phx				phx 								; push X on the stack
.9b66	0a		asl a				asl 	a 							; put vector x 2 into X
.9b67	aa		tax				tax
.9b68	c8		iny				iny 								; consume unary function token
.9b69	7c 26 91	jmp ($9126,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b6c					_ETSyntaxError:
.9b6c	4c 7e ad	jmp $ad7e			jmp 	SyntaxError
.9b6f					_ETHexConstant:
.9b6f	c8		iny				iny 								; skip #
.9b70	c8		iny				iny 								; skip count
.9b71	20 17 a0	jsr $a017			jsr 	NSMSetZero 					; clear result
.9b74					_ETHLoop:
.9b74	b1 30		lda ($30),y			lda 	(codePtr),y
.9b76	c8		iny				iny 								; and consume
.9b77	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b79	f0 1e		beq $9b99			beq 	_ETHExit
.9b7b	48		pha				pha 								; save on stack.
.9b7c	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; x 2
.9b7f	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; x 4
.9b82	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; x 8
.9b85	20 2c a0	jsr $a02c			jsr 	NSMShiftLeft 				; x 16
.9b88	68		pla				pla 								; ASCII
.9b89	c9 41		cmp #$41			cmp 	#'A'
.9b8b	90 02		bcc $9b8f			bcc 	_ETHNotChar
.9b8d	e9 07		sbc #$07			sbc 	#7
.9b8f					_ETHNotChar:
.9b8f	29 0f		and #$0f			and 	#15 						; digit now
.9b91	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9b94	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b97	80 db		bra $9b74			bra 	_ETHLoop 					; go round.
.9b99					_ETHExit:
.9b99	60		rts				rts
.9b9a					_ETString:
.9b9a	c8		iny				iny 								; look at length
.9b9b	b1 30		lda ($30),y			lda 	(codePtr),y
.9b9d	48		pha				pha
.9b9e	c8		iny				iny 								; first character
.9b9f	20 61 a0	jsr $a061			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9ba2	68		pla				pla 								; restore count and save
.9ba3	85 36		sta $36				sta 	zTemp0
.9ba5	98		tya				tya 								; add length to Y to skip it.
.9ba6	18		clc				clc
.9ba7	65 36		adc $36				adc 	zTemp0
.9ba9	a8		tay				tay
.9baa	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9bac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9baf	60		rts				rts
.9bb0					_ETVariable:
.9bb0	4c 0a 9c	jmp $9c0a			jmp 	VariableHandler
.9bb3					_ETPuncUnary:
.9bb3	c8		iny				iny 								; consume the unary character
.9bb4	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9bb6	f0 2d		beq $9be5			beq 	_ETUnaryNegate
.9bb8	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9bba	f0 39		beq $9bf5			beq 	_ETDereference
.9bbc	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9bbe	f0 43		beq $9c03			beq 	_ETParenthesis
.9bc0	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9bc2	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9bc4	f0 06		beq $9bcc			beq 	_ETIndirection
.9bc6	e6 36		inc $36				inc 	zTemp0
.9bc8	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9bca	d0 a0		bne $9b6c			bne 	_ETSyntaxError
.9bcc					_ETIndirection:
.9bcc	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9bce	1a		inc a				inc 	a
.9bcf	48		pha				pha
.9bd0	20 39 9b	jsr $9b39			jsr 	EvaluateTerm				; evaluate the term
.9bd3	20 7d 99	jsr $997d			jsr 	Dereference 				; dereference it.
.9bd6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9bd9	d0 07		bne $9be2			bne 	_ETTypeMismatch
.9bdb	68		pla				pla 								; indirection 1-2
.9bdc	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9bde	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9be1	60		rts				rts
.9be2					_ETTypeMismatch:
.9be2	4c 88 ad	jmp $ad88			jmp 	TypeError
.9be5					_ETUnaryNegate:
.9be5	20 39 9b	jsr $9b39			jsr 	EvaluateTerm				; evaluate the term
.9be8	20 7d 99	jsr $997d			jsr 	Dereference 				; dereference it.
.9beb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9bee	29 10		and #$10			and 	#NSTString
.9bf0	d0 f0		bne $9be2			bne 	_ETTypeMismatch
.9bf2	4c c3 9f	jmp $9fc3			jmp 	NSMNegate  					; just toggles the sign bit.
.9bf5					_ETDereference:
.9bf5	20 39 9b	jsr $9b39			jsr 	EvaluateTerm				; evaluate the term
.9bf8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9bfb	29 20		and #$20			and 	#NSBIsReference
.9bfd	f0 e3		beq $9be2			beq 	_ETTypeMismatch
.9bff	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9c02	60		rts				rts
.9c03					_ETParenthesis:
.9c03	20 68 98	jsr $9868			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9c06	20 98 a7	jsr $a798			jsr 	CheckRightBracket 			; check for )
.9c09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9c0a					VariableHandler:
.9c0a	b1 30		lda ($30),y			lda 	(codePtr),y
.9c0c	18		clc				clc
.9c0d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9c0f	85 37		sta $37				sta 	zTemp0+1
.9c11	c8		iny				iny
.9c12	b1 30		lda ($30),y			lda 	(codePtr),y
.9c14	85 36		sta $36				sta 	zTemp0
.9c16	c8		iny				iny
.9c17	18		clc				clc									; copy variable address+3 to mantissa
.9c18	69 03		adc #$03			adc 	#3
.9c1a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c1d	a5 37		lda $37				lda 	zTemp0+1
.9c1f	69 00		adc #$00			adc 	#0
.9c21	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c24	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9c27	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9c2a	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9c2d	5a		phy				phy
.9c2e	a0 02		ldy #$02			ldy 	#2 							; read type
.9c30	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c32	7a		ply				ply
.9c33	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9c35	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9c37	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c3a	29 04		and #$04			and 	#NSBIsArray
.9c3c	d0 01		bne $9c3f			bne 	_VHArray
.9c3e	60		rts				rts
.9c3f					_VHArray:
.9c3f	e8		inx				inx
.9c40	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9c43	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9c45	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c48	b1 30		lda ($30),y			lda 	(codePtr),y
.9c4a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9c4c	d0 06		bne $9c54			bne 	_VHNoSecondIndex
.9c4e	c8		iny				iny 								; skip the comma
.9c4f	e8		inx				inx
.9c50	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c53	ca		dex				dex
.9c54					_VHNoSecondIndex:
.9c54	ca		dex				dex 								; set X back.
.9c55	20 98 a7	jsr $a798			jsr 	CheckRightBracket 			; and check the right bracket.
.9c58	5a		phy				phy 								; save position
.9c59	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9c5c	85 3e		sta $3e				sta 	zaTemp
.9c5e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c61	85 3f		sta $3f				sta 	zaTemp+1
.9c63	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c65	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c67	f0 02		beq $9c6b			beq 	_VHHas2Mask
.9c69	a9 ff		lda #$ff			lda 	#$FF
.9c6b					_VHHas2Mask:
.9c6b	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c6e	f0 54		beq $9cc4			beq 	_VHBadIndex
.9c70	0a		asl a				asl 	a 							; carry will be set if a second index
.9c71	90 09		bcc $9c7c			bcc 	_VHCheckFirstIndex
.9c73	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c75	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c77	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9c7a	90 48		bcc $9cc4			bcc 	_VHBadIndex
.9c7c					_VHCheckFirstIndex:
.9c7c	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c7e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c80	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9c83	90 3f		bcc $9cc4			bcc 	_VHBadIndex
.9c85	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9c87	64 37		stz $37				stz 	zTemp0+1
.9c89	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9c8c	30 0f		bmi $9c9d			bmi 	_VHNoMultiply
.9c8e	da		phx				phx
.9c8f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9c92	48		pha				pha
.9c93	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9c95	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c97	1a		inc a				inc 	a 							; add 1 for zero base
.9c98	fa		plx				plx
.9c99	20 1a ac	jsr $ac1a			jsr 	Multiply8x8 				; calculate -> Z0
.9c9c	fa		plx				plx
.9c9d					_VHNoMultiply:
.9c9d	18		clc				clc
.9c9e	a5 36		lda $36				lda 	zTemp0
.9ca0	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ca3	85 36		sta $36				sta 	zTemp0
.9ca5	a5 37		lda $37				lda 	zTemp0+1
.9ca7	69 00		adc #$00			adc 	#0
.9ca9	85 37		sta $37				sta 	zTemp0+1
.9cab	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9cae	20 8a 8b	jsr $8b8a			jsr 	ScaleByBaseType
.9cb1	18		clc				clc
.9cb2	b2 3e		lda ($3e)			lda 	(zaTemp)
.9cb4	65 36		adc $36				adc 	zTemp0
.9cb6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cb9	a0 01		ldy #$01			ldy 	#1
.9cbb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cbd	65 37		adc $37				adc 	zTemp0+1
.9cbf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cc2	7a		ply				ply 								; restore position
.9cc3	60		rts				rts
.9cc4					_VHBadIndex:
.9cc4	a9 17		lda #$17		lda	#23
.9cc6	4c 5f 94	jmp $945f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ab50					AbsUnary:
.ab50	fa		plx				plx 								; restore stack pos
.ab51	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber 				; get a float or int
.ab54	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.ab57	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.ab5a	29 7f		and #$7f			and 	#$7F
.ab5c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab5f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9cc9					AllocUnary:
.9cc9	fa		plx				plx 								; restore stack pos
.9cca	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger		; get bytes required.
.9ccd	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.9cd0	da		phx				phx 								; save X/Y
.9cd1	5a		phy				phy
.9cd2	8a		txa				txa 								; copy X into Y
.9cd3	a8		tay				tay
.9cd4	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9cd7	aa		tax				tax
.9cd8	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9cdb	20 e8 9c	jsr $9ce8			jsr 	AllocateXABytes 			; allocate memory
.9cde	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9ce1	8a		txa				txa
.9ce2	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9ce5	7a		ply				ply
.9ce6	fa		plx				plx
.9ce7	60		rts				rts
.9ce8					AllocateXABytes:
.9ce8	5a		phy				phy
.9ce9	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9cec	84 36		sty $36				sty 	zTemp0
.9cee	5a		phy				phy
.9cef	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9cf2	84 37		sty $37				sty 	zTemp0+1
.9cf4	5a		phy				phy
.9cf5	18		clc				clc 								; add to low memory pointer
.9cf6	6d 8c 04	adc $048c			adc 	lowMemPtr
.9cf9	8d 8c 04	sta $048c			sta 	lowMemPtr
.9cfc	8a		txa				txa
.9cfd	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9d00	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9d03	b0 2f		bcs $9d34			bcs 	CISSMemory
.9d05	20 26 9d	jsr $9d26			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9d08					_ClearMemory:
.9d08	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9d0b	c5 36		cmp $36				cmp 	zTemp0
.9d0d	d0 07		bne $9d16			bne 	_CMClearNext
.9d0f	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9d12	c5 37		cmp $37				cmp 	zTemp0+1
.9d14	f0 0c		beq $9d22			beq 	_CMExit
.9d16					_CMClearNext:
.9d16	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9d18	92 36		sta ($36)			sta 	(zTemp0)
.9d1a	e6 36		inc $36				inc 	zTemp0
.9d1c	d0 ea		bne $9d08			bne 	_ClearMemory
.9d1e	e6 37		inc $37				inc		zTemp0+1
.9d20	80 e6		bra $9d08			bra 	_ClearMemory
.9d22					_CMExit:
.9d22	fa		plx				plx
.9d23	68		pla				pla
.9d24	7a		ply				ply
.9d25	60		rts				rts
.9d26					CheckIdentifierStringSpace:
.9d26	48		pha				pha
.9d27	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9d2a	18		clc				clc
.9d2b	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9d2d	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9d30	b0 02		bcs $9d34			bcs 	CISSMemory
.9d32	68		pla				pla
.9d33	60		rts				rts
.9d34					CISSMemory:
.9d34	a9 06		lda #$06		lda	#6
.9d36	4c 5f 94	jmp $945f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ab60					AscUnary:
.ab60	fa		plx				plx 								; restore stack pos
.ab61	20 76 9f	jsr $9f76			jsr 	EvaluateString 				; get a string
.ab64	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.ab66	20 19 a0	jsr $a019			jsr 	NSMSetByte
.ab69	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.ab6c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ab6d					FracUnary:
.ab6d	fa		plx				plx 								; restore stack pos
.ab6e	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber 				; get a float or int
.ab71	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.ab74	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab77	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab79	f0 04		beq $ab7f			beq 	_IUZero
.ab7b	20 3d aa	jsr $aa3d			jsr 	FloatFractionalPart
.ab7e	60		rts				rts
.ab7f					_IUZero:
.ab7f	20 17 a0	jsr $a017			jsr 	NSMSetZero
.ab82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ab83					IntUnary:
.ab83	fa		plx				plx 								; restore stack pos
.ab84	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber 				; get a float or int
.ab87	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.ab8a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab8d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab8f	f0 03		beq $ab94			beq 	_IUExit
.ab91	20 a0 aa	jsr $aaa0			jsr 	FloatIntegerPart
.ab94					_IUExit:
.ab94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ab95					LenUnary:
.ab95	fa		plx				plx 								; restore stack pos
.ab96	20 76 9f	jsr $9f76			jsr 	EvaluateString 				; get a string
.ab99	5a		phy				phy
.ab9a	a0 00		ldy #$00			ldy 	#0 							; find length
.ab9c					_LenFind:
.ab9c	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab9e	f0 06		beq $aba6			beq 	_LenExit
.aba0	c8		iny				iny
.aba1	d0 f9		bne $ab9c			bne 	_LenFind
.aba3	4c 83 ad	jmp $ad83			jmp 	RangeError 					; string > 255
.aba6					_LenExit:
.aba6	98		tya				tya
.aba7	20 19 a0	jsr $a019			jsr 	NSMSetByte
.abaa	7a		ply				ply
.abab	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.abae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9d39					Unary_Not:
.9d39	fa		plx				plx
.9d3a	20 8e 9f	jsr $9f8e			jsr 	EvaluateInteger 			; get integer
.9d3d	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.9d40	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; zero mantissa ?
.9d43	f0 04		beq $9d49			beq 	_NotZero
.9d45	20 17 a0	jsr $a017			jsr 	NSMSetZero
.9d48	60		rts				rts
.9d49					_NotZero:
.9d49	4c cc 94	jmp $94cc			jmp 	ReturnTrue
.9d4c					_UNBad:
.9d4c	4c 8d ad	jmp $ad8d			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9d4f					Unary_Random:
.9d4f	fa		plx				plx
.9d50	20 c8 9d	jsr $9dc8			jsr 	Random32Bit 				; get a random number
.9d53	20 ad 9d	jsr $9dad			jsr 	URCopyToMantissa  			; put in mantissa
.9d56	e8		inx				inx
.9d57	20 a3 9f	jsr $9fa3			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d5a	ca		dex				dex
.9d5b	20 1c a8	jsr $a81c			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9d5e	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9d61	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9d64	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.9d67	60		rts				rts
.9d68					Unary_Rnd:
.9d68	fa		plx				plx
.9d69	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber 				; number to use.
.9d6c	20 98 a7	jsr $a798			jsr 	CheckRightBracket 			; closing bracket
.9d6f	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d72	f0 2b		beq $9d9f			beq 	_URCopySeed
.9d74	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d77	10 23		bpl $9d9c			bpl 	_URDontSeed
.9d79	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d7c	49 17		eor #$17			eor 	#$17
.9d7e	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d81	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d84	49 a5		eor #$a5			eor 	#$A5
.9d86	8d 89 04	sta $0489			sta 	RandomSeed+1
.9d89	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9d8c	49 c2		eor #$c2			eor 	#$C2
.9d8e	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9d91	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9d94	49 9d		eor #$9d			eor 	#$9D
.9d96	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9d99	20 c8 9d	jsr $9dc8			jsr 	Random32Bit
.9d9c					_URDontSeed:
.9d9c	20 c8 9d	jsr $9dc8			jsr 	Random32Bit 				; generate a number.
.9d9f					_URCopySeed:
.9d9f	20 ad 9d	jsr $9dad			jsr 	URCopyToMantissa 			; copy into mantissa
.9da2	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9da4	8d 28 04	sta $0428			sta 	NSExponent
.9da7	a9 08		lda #$08			lda 	#NSTFloat
.9da9	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9dac	60		rts				rts
.9dad					URCopyToMantissa:
.9dad	ad 88 04	lda $0488			lda 	RandomSeed+0
.9db0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db3	ad 89 04	lda $0489			lda 	RandomSeed+1
.9db6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9db9	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9dbc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dbf	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9dc2	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9dc4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dc7	60		rts				rts
.9dc8					Random32Bit:
.9dc8	5a		phy				phy
.9dc9	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9dcb	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9dce	d0 03		bne $9dd3			bne 	_Random1
.9dd0	a8		tay				tay 								; if so do it 256 times
.9dd1	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9dd3					_Random1:
.9dd3	0a		asl a				asl 	a 							; LSFR RNG
.9dd4	2e 89 04	rol $0489			rol 	RandomSeed+1
.9dd7	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9dda	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9ddd	90 02		bcc $9de1			bcc 	_Random2
.9ddf	49 c5		eor #$c5			eor 	#$C5
.9de1					_Random2:
.9de1	88		dey				dey
.9de2	d0 ef		bne $9dd3			bne 	_Random1
.9de4	8d 88 04	sta $0488			sta 	RandomSeed+0
.9de7	7a		ply				ply
.9de8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.abaf					SgnUnary:
.abaf	fa		plx				plx 								; restore stack pos
.abb0	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber 				; get a float or int
.abb3	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.abb6	20 47 a0	jsr $a047			jsr 	NSMIsZero 					; if zero
.abb9	f0 10		beq $abcb			beq 	_SGZero  					; return Int Zero
.abbb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.abbe	48		pha				pha
.abbf	a9 01		lda #$01			lda 	#1 							; set to 1
.abc1	20 19 a0	jsr $a019			jsr 	NSMSetByte
.abc4	68		pla				pla
.abc5	29 80		and #$80			and		#$80 						; copy the sign byte out
.abc7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.abca	60		rts				rts
.abcb	20 17 a0	jsr $a017	_SGZero:jsr 	NSMSetZero
.abce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.abcf					ValUnary:
.abcf	fa		plx				plx 								; restore stack pos
.abd0	20 e5 ab	jsr $abe5			jsr 	ValMainCode 				; do the main val() code
.abd3	b0 01		bcs $abd6			bcs 	_VUError 					; couldn't convert
.abd5	60		rts				rts
.abd6					_VUError:
.abd6	4c 88 ad	jmp $ad88			jmp 	TypeError
.abd9					IsValUnary:
.abd9	fa		plx				plx 								; restore stack pos
.abda	20 e5 ab	jsr $abe5			jsr 	ValMainCode 				; do the main val() code
.abdd	b0 03		bcs $abe2			bcs 	_VUBad
.abdf	4c cc 94	jmp $94cc			jmp 	ReturnTrue
.abe2					_VUBad:
.abe2	4c d8 94	jmp $94d8			jmp 	ReturnFalse
.abe5					ValMainCode:
.abe5	20 76 9f	jsr $9f76			jsr 	EvaluateString 				; get a string
.abe8	20 98 a7	jsr $a798			jsr 	CheckRightBracket 			; check right bracket present
.abeb	5a		phy				phy
.abec	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.abee	f0 17		beq $ac07			beq 	_VMCFail2
.abf0	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.abf2	48		pha				pha 								; save first character
.abf3	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.abf5	d0 01		bne $abf8			bne 	_VMCStart
.abf7	c8		iny				iny 								; skip over -
.abf8					_VMCStart:
.abf8	38		sec				sec 								; initialise first time round.
.abf9					_VMCNext:
.abf9	c8		iny				iny 								; pre-increment
.abfa	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.abfc	f0 0c		beq $ac0a			beq 	_VMCSuccess 				; successful.
.abfe	20 1b 9a	jsr $9a1b			jsr 	EncodeNumber 				; send it to the number-builder
.ac01	90 03		bcc $ac06			bcc 	_VMCFail 					; if failed, give up.
.ac03	18		clc				clc 								; next time round, countinue
.ac04	80 f3		bra $abf9			bra 	_VMCNext
.ac06					_VMCFail:
.ac06	68		pla				pla
.ac07					_VMCFail2:
.ac07	7a		ply				ply
.ac08	38		sec				sec
.ac09	60		rts				rts
.ac0a					_VMCSuccess:
.ac0a	a9 00		lda #$00			lda 	#0 							; construct final
.ac0c	20 1b 9a	jsr $9a1b			jsr 	EncodeNumber
.ac0f	68		pla				pla
.ac10	c9 2d		cmp #$2d			cmp 	#"-"
.ac12	d0 03		bne $ac17			bne 	_VMCNotNegative
.ac14	20 c3 9f	jsr $9fc3			jsr		NSMNegate
.ac17					_VMCNotNegative:
.ac17	7a		ply				ply
.ac18	18		clc				clc
.ac19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9de9					ChrUnary:
.9de9	fa		plx				plx 								; restore stack pos
.9dea	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger			; get value
.9ded	48		pha				pha
.9dee	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.9df1	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9df3	20 a5 b0	jsr $b0a5			jsr 	StringTempAllocate
.9df6	68		pla				pla 								; write number to it
.9df7	20 e3 b0	jsr $b0e3			jsr 	StringTempWrite
.9dfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9dfb					SpcUnary:
.9dfb	fa		plx				plx 								; restore stack pos
.9dfc	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger			; get value
.9dff	5a		phy				phy
.9e00	48		pha				pha 								; save count
.9e01	20 a5 b0	jsr $b0a5			jsr 	StringTempAllocate
.9e04	7a		ply				ply 								; to do count in Y
.9e05					_SpcLoop:
.9e05	c0 00		cpy #$00			cpy 	#0
.9e07	f0 08		beq $9e11			beq 	_SpcExit
.9e09	a9 20		lda #$20			lda 	#32
.9e0b	20 e3 b0	jsr $b0e3			jsr 	StringTempWrite
.9e0e	88		dey				dey
.9e0f	80 f4		bra $9e05			bra 	_SPCLoop
.9e11					_SpcExit:
.9e11	7a		ply				ply
.9e12	20 98 a7	jsr $a798			jsr 	CheckRightBracket
.9e15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e16					Unary_Str:
.9e16	fa		plx				plx
.9e17	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber  			; get number
.9e1a	20 98 a7	jsr $a798			jsr 	CheckRightBracket 			; closing bracket
.9e1d	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9e1f	20 38 9e	jsr $9e38			jsr 	ConvertNumberToString 		; do the conversion.
.9e22	a9 21		lda #$21			lda		#33 						; create buffer
.9e24	20 a5 b0	jsr $b0a5			jsr 	StringTempAllocate 			; allocate memory
.9e27	da		phx				phx
.9e28	a2 00		ldx #$00			ldx 	#0
.9e2a					_USCopy:
.9e2a	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9e2d	20 e3 b0	jsr $b0e3			jsr 	StringTempWrite
.9e30	e8		inx				inx
.9e31	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9e34	d0 f4		bne $9e2a			bne 	_USCopy
.9e36	fa		plx				plx
.9e37	60		rts				rts
.9e38					ConvertNumberToString:
.9e38	5a		phy				phy 								; save code position
.9e39	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9e3c	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9e3f	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9e42	10 0a		bpl $9e4e			bpl 	_CNTSNotNegative
.9e44	29 7f		and #$7f			and 	#$7F 						; make +ve
.9e46	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e49	a9 2d		lda #$2d			lda 	#"-"
.9e4b	20 b4 9e	jsr $9eb4			jsr 	WriteDecimalBuffer
.9e4e					_CNTSNotNegative:
.9e4e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9e51	f0 15		beq $9e68			beq 	_CNTSNotFloat
.9e53	e8		inx				inx 								; round up
.9e54	a9 01		lda #$01			lda 	#1
.9e56	20 19 a0	jsr $a019			jsr 	NSMSetByte
.9e59	ca		dex				dex
.9e5a	bd 28 04	lda $0428,x			lda		NSExponent,x
.9e5d	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9e60	a9 08		lda #$08			lda 	#NSTFloat
.9e62	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9e65	20 5f a9	jsr $a95f			jsr 	FloatAdd
.9e68					_CNTSNotFloat:
.9e68	20 96 9e	jsr $9e96			jsr 	MakePlusTwoString
.9e6b	20 3d aa	jsr $aa3d			jsr 	FloatFractionalPart 		; get the fractional part
.9e6e	20 01 ab	jsr $ab01			jsr 	NSNormalise					; normalise , exit if zero
.9e71	f0 21		beq $9e94			beq 	_CNTSExit
.9e73	a9 2e		lda #$2e			lda 	#"."
.9e75	20 b4 9e	jsr $9eb4			jsr 	WriteDecimalBuffer 			; write decimal place
.9e78					_CNTSDecimal:
.9e78	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9e7b	30 17		bmi $9e94			bmi 	_CNTSExit
.9e7d	e8		inx				inx 								; x 10.0
.9e7e	a9 0a		lda #$0a			lda 	#10
.9e80	20 19 a0	jsr $a019			jsr 	NSMSetByte
.9e83	a9 08		lda #$08			lda 	#NSTFloat
.9e85	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e88	ca		dex				dex
.9e89	20 ca aa	jsr $aaca			jsr 	FloatMultiply
.9e8c	20 96 9e	jsr $9e96			jsr 	MakePlusTwoString
.9e8f	20 3d aa	jsr $aa3d			jsr 	FloatFractionalPart 		; get the fractional part
.9e92	80 e4		bra $9e78			bra 	_CNTSDecimal 				; keep going.
.9e94					_CNTSExit:
.9e94	7a		ply				ply
.9e95	60		rts				rts
.9e96					MakePlusTwoString:
.9e96	da		phx				phx
.9e97	20 ee 9f	jsr $9fee			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9e9a	e8		inx				inx 								; access it
.9e9b	e8		inx				inx
.9e9c	20 a0 aa	jsr $aaa0			jsr 	FloatIntegerPart 			; make it an integer
.9e9f	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9ea1	20 09 a9	jsr $a909			jsr 	ConvertInt32
.9ea4	a2 00		ldx #$00			ldx	 	#0
.9ea6					_MPTSCopy:
.9ea6	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9ea9	20 b4 9e	jsr $9eb4			jsr 	WriteDecimalBuffer
.9eac	e8		inx				inx
.9ead	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9eb0	d0 f4		bne $9ea6			bne 	_MPTSCopy
.9eb2	fa		plx				plx
.9eb3	60		rts				rts
.9eb4					WriteDecimalBuffer:
.9eb4	da		phx				phx
.9eb5	ae 95 04	ldx $0495			ldx 	dbOffset
.9eb8	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9ebb	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9ebe	ee 95 04	inc $0495			inc 	dbOffset
.9ec1	fa		plx				plx
.9ec2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9ec3					Unary_Left:
.9ec3	fa		plx				plx
.9ec4	18		clc				clc 								; only one parameter
.9ec5	20 3a 9f	jsr $9f3a			jsr 	SubstringInitial 			; set up.
.9ec8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9ecb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ece	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ed1	80 2c		bra $9eff			bra 	SubstringMain
.9ed3					Unary_Right:
.9ed3	fa		plx				plx
.9ed4	18		clc				clc 								; only one parameter
.9ed5	20 3a 9f	jsr $9f3a			jsr 	SubstringInitial 			; set up.
.9ed8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9edb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ede	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9ee1	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9ee4	b0 02		bcs $9ee8			bcs 	_URNotUnderflow
.9ee6	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ee8					_URNotUnderFlow:
.9ee8	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9eeb	80 12		bra $9eff			bra 	SubStringMain
.9eed					Unary_Mid:
.9eed	fa		plx				plx
.9eee	38		sec				sec 								; two parameters
.9eef	20 3a 9f	jsr $9f3a			jsr 	SubstringInitial 			; set up.
.9ef2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ef5	f0 05		beq $9efc			beq 	_UMError
.9ef7	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9efa	80 03		bra $9eff			bra 	SubStringMain
.9efc					_UMError:
.9efc	4c 8d ad	jmp $ad8d			jmp 	ArgumentError
.9eff					SubStringMain:
.9eff	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9f02	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9f05	b0 2d		bcs $9f34			bcs 	_SSMNull 					; if so, return an empty string.
.9f07	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9f0a	f0 28		beq $9f34			beq 	_SSMNull 					; return empty string.
.9f0c	18		clc				clc 								; add the offset +1 to the address and
.9f0d	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9f10	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9f13	85 36		sta $36				sta 	zTemp0
.9f15	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9f18	69 00		adc #$00			adc 	#0
.9f1a	85 37		sta $37				sta 	zTemp0+1
.9f1c					_SSMNoCarry:
.9f1c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f1f	20 a5 b0	jsr $b0a5			jsr 	StringTempAllocate 			; allocate that many characters
.9f22	5a		phy				phy 								; save Y
.9f23	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f25					_SSMCopy:
.9f25	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f27	f0 09		beq $9f32			beq 	_SSMEString 				; no more to copy
.9f29	20 e3 b0	jsr $b0e3			jsr 	StringTempWrite 			; and write it out.
.9f2c	c8		iny				iny
.9f2d	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9f30	d0 f3		bne $9f25			bne 	_SSMCopy
.9f32					_SSMEString:
.9f32	7a		ply				ply
.9f33					_SSMExit:
.9f33	60		rts				rts
.9f34					_SSMNull:
.9f34	a9 00		lda #$00			lda 	#0
.9f36	20 a5 b0	jsr $b0a5			jsr 	StringTempAllocate
.9f39	60		rts				rts
.9f3a					SubstringInitial:
.9f3a	da		phx				phx 								; save initial stack position
.9f3b	08		php				php 								; save carry on stack indicating 2 parameters
.9f3c	20 76 9f	jsr $9f76			jsr 	EvaluateString 				; get a string
.9f3f	5a		phy				phy 								; calculate length to exponent.
.9f40	a0 ff		ldy #$ff			ldy 	#$FF
.9f42					_SIFindLength:
.9f42	c8		iny				iny
.9f43	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f45	d0 fb		bne $9f42			bne 	_SIFindLength
.9f47	98		tya				tya
.9f48	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f4b	7a		ply				ply
.9f4c	e8		inx				inx
.9f4d	20 a0 a7	jsr $a7a0			jsr 	CheckComma 					; comma next
.9f50	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger 		; get next parameter
.9f53	28		plp				plp 								; is it the last parameter ?
.9f54	90 07		bcc $9f5d			bcc 	_SSIExit 					; if so, exit.
.9f56	e8		inx				inx
.9f57	20 a0 a7	jsr $a7a0			jsr 	CheckComma 					; comma next
.9f5a	20 af 9f	jsr $9faf			jsr 	Evaluate8BitInteger 		; get last parameter
.9f5d					_SSIExit:
.9f5d	fa		plx				plx
.9f5e	20 98 a7	jsr $a798			jsr 	CheckRightBracket 			; check closing bracket
.9f61	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9f62					EvaluateValue:
.9f62	48		pha				pha
.9f63	20 68 98	jsr $9868			jsr		EvaluateExpression 			; expression
.9f66	20 7d 99	jsr $997d			jsr 	Dereference					; derefernce it
.9f69	68		pla				pla
.9f6a	60		rts				rts
.9f6b					EvaluateNumber:
.9f6b	20 62 9f	jsr $9f62			jsr 	EvaluateValue 				; get a value
.9f6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f71	29 10		and #$10			and 	#NSBIsString
.9f73	d0 16		bne $9f8b			bne 	HelperTypeError
.9f75	60		rts				rts
.9f76					EvaluateString:
.9f76	20 62 9f	jsr $9f62			jsr 	EvaluateValue 				; get a value
.9f79	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f7c	29 10		and #$10			and 	#NSBIsString
.9f7e	f0 0b		beq $9f8b			beq 	HelperTypeError
.9f80					CopyAddressToTemp0:
.9f80	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9f83	85 36		sta $36				sta 	zTemp0
.9f85	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f88	85 37		sta $37				sta 	zTemp0+1
.9f8a	60		rts				rts
.9f8b					HelperTypeError:
.9f8b	4c 88 ad	jmp $ad88			jmp 	TypeError
.9f8e					EvaluateInteger:
.9f8e	20 6b 9f	jsr $9f6b			jsr 	EvaluateNumber
.9f91	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9f94	d0 0a		bne $9fa0			bne 	HelperValueError 			; if not, it's a float.
.9f96	60		rts				rts
.9f97					EvaluateUnsignedInteger:
.9f97	20 8e 9f	jsr $9f8e			jsr 	EvaluateInteger 			; check integer is +ve
.9f9a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f9d	30 01		bmi $9fa0			bmi 	HelperValueError
.9f9f	60		rts				rts
.9fa0					HelperValueError:
.9fa0	4c 8d ad	jmp $ad8d			jmp 	ArgumentError
.9fa3					Evaluate16BitInteger:
.9fa3	20 97 9f	jsr $9f97			jsr	 	EvaluateUnsignedInteger		; get integer
.9fa6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9fa9	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9fac	d0 f2		bne $9fa0			bne 	HelperValueError
.9fae	60		rts				rts
.9faf					Evaluate8BitInteger:
.9faf	20 97 9f	jsr $9f97			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9fb2	d0 ec		bne $9fa0			bne 	HelperValueError
.9fb4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9fb7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9fba	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9fbd	d0 e1		bne $9fa0			bne 	HelperValueError
.9fbf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fc2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ac1a					Multiply8x8:
.ac1a	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ac1b	85 36		sta $36			  	sta 	zTemp0
.ac1d	86 37		stx $37				stx 	zTemp0+1
.ac1f	a9 00		lda #$00			lda 	#0
.ac21	a2 08		ldx #$08			ldx 	#8
.ac23					_M88Loop:
.ac23	90 03		bcc $ac28			bcc 	_M88NoAdd
.ac25	18		clc				clc
.ac26	65 37		adc $37				adc 	zTemp0+1
.ac28					_M88NoAdd:
.ac28	6a		ror a				ror 	a
.ac29	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ac2b	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ac2c	d0 f5		bne $ac23			bne 	_M88Loop
.ac2e	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ac30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9fc3					NSMNegate:
.9fc3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9fc6	49 80		eor #$80			eor 	#NSBIsNegative
.9fc8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fcb	60		rts				rts
.9fcc					NSMNegateMantissa:
.9fcc	38		sec				sec
.9fcd	a9 00		lda #$00			lda 	#0
.9fcf	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9fd2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fd5	a9 00		lda #$00			lda 	#0
.9fd7	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9fda	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fdd	a9 00		lda #$00			lda 	#0
.9fdf	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9fe2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fe5	a9 00		lda #$00			lda 	#0
.9fe7	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9fea	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9fed	60		rts				rts
.9fee					NSMShiftUpTwo:
.9fee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ff1	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ff4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ff7	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ffa	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9ffd	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a000	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a003	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a006	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a009	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a00c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a00f	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a012	60		rts				rts
.a013					NSMSetZeroMantissaOnly:
.a013	a9 00		lda #$00			lda 	#0
.a015	80 08		bra $a01f			bra 	NSMSetMantissa
.a017					NSMSetZero:
.a017	a9 00		lda #$00			lda 	#0
.a019					NSMSetByte:
.a019	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a01c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a01f					NSMSetMantissa:
.a01f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a022	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a025	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a028	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a02b	60		rts				rts
.a02c					NSMShiftLeft:
.a02c	18		clc				clc
.a02d					NSMRotateLeft:
.a02d	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a030	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a033	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a036	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a039	60		rts				rts
.a03a					NSMShiftRight:
.a03a	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a03d	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a040	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a043	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a046	60		rts				rts
.a047					NSMIsZero:
.a047	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a04a	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a04d	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a050	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a053	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ac31					Assemble_ora:
.ac31	20 89 87	jsr $8789		jsr	AssembleGroup1
>ac34	01					.byte $01
.ac35					Assemble_and:
.ac35	20 89 87	jsr $8789		jsr	AssembleGroup1
>ac38	21					.byte $21
.ac39					Assemble_eor:
.ac39	20 89 87	jsr $8789		jsr	AssembleGroup1
>ac3c	41					.byte $41
.ac3d					Assemble_adc:
.ac3d	20 89 87	jsr $8789		jsr	AssembleGroup1
>ac40	61					.byte $61
.ac41					Assemble_sta:
.ac41	20 89 87	jsr $8789		jsr	AssembleGroup1
>ac44	81					.byte $81
.ac45					Assemble_lda:
.ac45	20 89 87	jsr $8789		jsr	AssembleGroup1
>ac48	a1					.byte $a1
.ac49					Assemble_cmp:
.ac49	20 89 87	jsr $8789		jsr	AssembleGroup1
>ac4c	c1					.byte $c1
.ac4d					Assemble_sbc:
.ac4d	20 89 87	jsr $8789		jsr	AssembleGroup1
>ac50	e1					.byte $e1
.ac51					Assemble_asl:
.ac51	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac54	02					.byte $02
>ac55	75					.byte $75
.ac56					Assemble_rol:
.ac56	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac59	22					.byte $22
>ac5a	75					.byte $75
.ac5b					Assemble_lsr:
.ac5b	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac5e	42					.byte $42
>ac5f	75					.byte $75
.ac60					Assemble_ror:
.ac60	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac63	62					.byte $62
>ac64	75					.byte $75
.ac65					Assemble_stx:
.ac65	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac68	82					.byte $82
>ac69	50					.byte $50
.ac6a					Assemble_ldx:
.ac6a	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac6d	a2					.byte $a2
>ac6e	d0					.byte $d0
.ac6f					Assemble_dec:
.ac6f	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac72	c2					.byte $c2
>ac73	55					.byte $55
.ac74					Assemble_inc:
.ac74	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac77	e2					.byte $e2
>ac78	55					.byte $55
.ac79					Assemble_stz:
.ac79	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac7c	60					.byte $60
>ac7d	44					.byte $44
.ac7e					Assemble_bit:
.ac7e	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac81	20					.byte $20
>ac82	55					.byte $55
.ac83					Assemble_sty:
.ac83	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac86	80					.byte $80
>ac87	54					.byte $54
.ac88					Assemble_ldy:
.ac88	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac8b	a0					.byte $a0
>ac8c	d5					.byte $d5
.ac8d					Assemble_cpy:
.ac8d	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac90	c0					.byte $c0
>ac91	d4					.byte $d4
.ac92					Assemble_cpx:
.ac92	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac95	e0					.byte $e0
>ac96	d0					.byte $d0
.ac97					Assemble_tsb:
.ac97	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac9a	00					.byte $00
>ac9b	50					.byte $50
.ac9c					Assemble_trb:
.ac9c	20 90 87	jsr $8790		jsr	AssembleGroup2
>ac9f	10					.byte $10
>aca0	50					.byte $50
.aca1					Assemble_jsr:
.aca1	20 90 87	jsr $8790		jsr	AssembleGroup2
>aca4	14					.byte $14
>aca5	10					.byte $10
.aca6					Assemble_jmp:
.aca6	20 90 87	jsr $8790		jsr	AssembleGroup2
>aca9	40					.byte $40
>acaa	10					.byte $10
.acab					Assemble_bpl:
.acab	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acae	10					.byte $10
.acaf					Assemble_bmi:
.acaf	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acb2	30					.byte $30
.acb3					Assemble_bvc:
.acb3	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acb6	50					.byte $50
.acb7					Assemble_bvs:
.acb7	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acba	70					.byte $70
.acbb					Assemble_bcc:
.acbb	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acbe	90					.byte $90
.acbf					Assemble_bcs:
.acbf	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acc2	b0					.byte $b0
.acc3					Assemble_bne:
.acc3	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acc6	d0					.byte $d0
.acc7					Assemble_beq:
.acc7	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acca	f0					.byte $f0
.accb					Assemble_bra:
.accb	20 e1 87	jsr $87e1		jsr	AssembleGroup3
>acce	80					.byte $80
.accf					Assemble_brk:
.accf	20 17 88	jsr $8817		jsr	AssembleGroup4
>acd2	00					.byte $00
.acd3					Assemble_php:
.acd3	20 17 88	jsr $8817		jsr	AssembleGroup4
>acd6	08					.byte $08
.acd7					Assemble_clc:
.acd7	20 17 88	jsr $8817		jsr	AssembleGroup4
>acda	18					.byte $18
.acdb					Assemble_plp:
.acdb	20 17 88	jsr $8817		jsr	AssembleGroup4
>acde	28					.byte $28
.acdf					Assemble_sec:
.acdf	20 17 88	jsr $8817		jsr	AssembleGroup4
>ace2	38					.byte $38
.ace3					Assemble_rti:
.ace3	20 17 88	jsr $8817		jsr	AssembleGroup4
>ace6	40					.byte $40
.ace7					Assemble_pha:
.ace7	20 17 88	jsr $8817		jsr	AssembleGroup4
>acea	48					.byte $48
.aceb					Assemble_cli:
.aceb	20 17 88	jsr $8817		jsr	AssembleGroup4
>acee	58					.byte $58
.acef					Assemble_phy:
.acef	20 17 88	jsr $8817		jsr	AssembleGroup4
>acf2	5a					.byte $5a
.acf3					Assemble_rts:
.acf3	20 17 88	jsr $8817		jsr	AssembleGroup4
>acf6	60					.byte $60
.acf7					Assemble_pla:
.acf7	20 17 88	jsr $8817		jsr	AssembleGroup4
>acfa	68					.byte $68
.acfb					Assemble_sei:
.acfb	20 17 88	jsr $8817		jsr	AssembleGroup4
>acfe	78					.byte $78
.acff					Assemble_ply:
.acff	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad02	7a					.byte $7a
.ad03					Assemble_dey:
.ad03	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad06	88					.byte $88
.ad07					Assemble_txa:
.ad07	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad0a	8a					.byte $8a
.ad0b					Assemble_tya:
.ad0b	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad0e	98					.byte $98
.ad0f					Assemble_txs:
.ad0f	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad12	9a					.byte $9a
.ad13					Assemble_tay:
.ad13	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad16	a8					.byte $a8
.ad17					Assemble_tax:
.ad17	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad1a	aa					.byte $aa
.ad1b					Assemble_clv:
.ad1b	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad1e	b8					.byte $b8
.ad1f					Assemble_tsx:
.ad1f	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad22	ba					.byte $ba
.ad23					Assemble_iny:
.ad23	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad26	c8					.byte $c8
.ad27					Assemble_dex:
.ad27	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad2a	ca					.byte $ca
.ad2b					Assemble_cld:
.ad2b	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad2e	d8					.byte $d8
.ad2f					Assemble_phx:
.ad2f	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad32	da					.byte $da
.ad33					Assemble_stp:
.ad33	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad36	db					.byte $db
.ad37					Assemble_inx:
.ad37	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad3a	e8					.byte $e8
.ad3b					Assemble_nop:
.ad3b	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad3e	ea					.byte $ea
.ad3f					Assemble_sed:
.ad3f	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad42	f8					.byte $f8
.ad43					Assemble_plx:
.ad43	20 17 88	jsr $8817		jsr	AssembleGroup4
>ad46	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ad47					DecimalScalarTable:
>ad47	66 66 66 66				.dword $66666666 ; 0.1
>ad4b	de					.byte $de
>ad4c	1f 85 eb 51				.dword $51eb851f ; 0.01
>ad50	db					.byte $db
>ad51	4c 37 89 41				.dword $4189374c ; 0.001
>ad55	d8					.byte $d8
>ad56	ac 8b db 68				.dword $68db8bac ; 0.0001
>ad5a	d4					.byte $d4
>ad5b	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ad5f	d1					.byte $d1
>ad60	83 de 1b 43				.dword $431bde83 ; 1e-06
>ad64	ce					.byte $ce
>ad65	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ad69	ca					.byte $ca
>ad6a	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ad6e	c7					.byte $c7
>ad6f	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ad73	c4					.byte $c4
>ad74	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ad78	c0					.byte $c0
>ad79	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ad7d	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ad7e					SyntaxError:
.ad7e	a9 02		lda #$02		lda	#2
.ad80	4c 5f 94	jmp $945f		jmp	ErrorHandler
.ad83					RangeError:
.ad83	a9 04		lda #$04		lda	#4
.ad85	4c 5f 94	jmp $945f		jmp	ErrorHandler
.ad88					TypeError:
.ad88	a9 05		lda #$05		lda	#5
.ad8a	4c 5f 94	jmp $945f		jmp	ErrorHandler
.ad8d					ArgumentError:
.ad8d	a9 07		lda #$07		lda	#7
.ad8f	4c 5f 94	jmp $945f		jmp	ErrorHandler
.ad92					NotDoneError:
.ad92	a9 0c		lda #$0c		lda	#12
.ad94	4c 5f 94	jmp $945f		jmp	ErrorHandler
.ad97					ErrorText:
>ad97	42 72 65 61 6b 00			.text	"Break",0
>ad9d	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ada5	72 72 6f 72 00
>adaa	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>adb2	20 62 79 20 7a 65 72 6f 00
>adbb	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>adc3	61 6e 67 65 00
>adc8	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>add0	6d 61 74 63 68 00
>add6	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>adde	65 6d 6f 72 79 00
>ade4	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>adec	61 72 67 75 6d 65 6e 74 00
>adf5	53 74 6f 70 00				.text	"Stop",0
>adfa	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ae02	6f 6f 20 6c 6f 6e 67 00
>ae0a	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ae12	6e 20 66 61 69 6c 65 64 00
>ae1b	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ae23	61 74 61 00
>ae27	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ae2f	65 6e 74 65 64 00
>ae35	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ae3d	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ae49	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ae51	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ae5e	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ae66	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ae73	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ae7b	68 6f 75 74 20 57 68 69 6c 65 00
>ae86	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ae8e	68 6f 75 74 20 46 6f 72 00
>ae97	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ae9f	61 63 6b 20 66 75 6c 6c 00
>aea8	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>aeb0	75 63 74 75 72 65 00
>aeb7	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>aebf	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>aecc	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>aed4	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>aee2	41 72 72 61 79 20 73 69			.text	"Array size",0
>aeea	7a 65 00
>aeed	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>aef5	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>aefd	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1316."
>af05	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>af15	32 2e 20 42 75 69 6c 64 20 31 33 31 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.af23					EXTPrintCharacter:
.af23	48		pha				pha
.af24	da		phx				phx
.af25	5a		phy				phy
.af26	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.af29	7a		ply				ply
.af2a	fa		plx				plx
.af2b	68		pla				pla
.af2c	60		rts				rts
.af2d					EXTInputSingleCharacter:
.af2d	da		phx				phx
.af2e	5a		phy				phy
.af2f					_EISCWait:
.af2f	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.af32	c9 00		cmp #$00			cmp 	#0
.af34	f0 f9		beq $af2f			beq 	_EISCWait
.af36	7a		ply				ply
.af37	fa		plx				plx
.af38	60		rts				rts
.af39					EXTInputLine:
.af39	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.af3b					_ILLoop:
.af3b	da		phx				phx 								; read character in
.af3c	20 cf ff	jsr $ffcf			jsr 	$FFCF
.af3f	fa		plx				plx
.af40	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.af42	f0 12		beq $af56			beq 	_ILBackspace
.af44	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.af46	f0 15		beq $af5d			beq 	_ILExit
.af48	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.af4a	90 ef		bcc $af3b			bcc 	_ILLoop
.af4c	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.af4e	f0 eb		beq $af3b			beq 	_ILLoop
.af50	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.af53	e8		inx				inx
.af54	80 e5		bra $af3b			bra 	_ILLoop
.af56					_ILBackspace:
.af56	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.af58	f0 e1		beq $af3b			beq 	_ILLoop
.af5a	ca		dex				dex 								; back one.
.af5b	80 de		bra $af3b			bra 	_ILLoop
.af5d					_ILExit:
.af5d	20 23 af	jsr $af23			jsr 	EXTPrintCharacter
.af60	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.af63	60		rts				rts
.af64					EXTBreakCheck:
.af64	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.af67					MemoryDeleteLine:
.af67	20 86 af	jsr $af86			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.af6a	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.af6c	a8		tay				tay
.af6d					_MDDLLoop:
.af6d	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.af6f	92 30		sta ($30)			sta 	(codePtr)
.af71	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.af73	c5 3a		cmp $3a				cmp 	zTemp2
.af75	d0 07		bne $af7e			bne 	_MDLDLNext
.af77	a5 31		lda $31				lda 	codePtr+1
.af79	c5 3b		cmp $3b				cmp 	zTemp2+1
.af7b	d0 01		bne $af7e			bne 	_MDLDLNext
.af7d					_MDDLExit:
.af7d	60		rts				rts
.af7e					_MDLDLNext:
.af7e	e6 30		inc $30				inc 	codePtr						; next byte
.af80	d0 eb		bne $af6d			bne 	_MDDLLoop
.af82	e6 31		inc $31				inc 	codePtr+1
.af84	80 e7		bra $af6d			bra 	_MDDLLoop
.af86					IMemoryFindEnd:
.af86	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af88	85 3a		sta $3a				sta 	0+zTemp2
.af8a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af8c	85 3b		sta $3b				sta 	1+zTemp2
.af8e					_MDLFELoop:
.af8e	b2 3a		lda ($3a)			lda 	(zTemp2)
.af90	f0 0b		beq $af9d			beq 	_MDLFEExit
.af92	18		clc				clc
.af93	65 3a		adc $3a				adc 	zTemp2
.af95	85 3a		sta $3a				sta 	zTemp2
.af97	90 f5		bcc $af8e			bcc 	_MDLFELoop
.af99	e6 3b		inc $3b				inc 	zTemp2+1
.af9b	80 f1		bra $af8e			bra 	_MDLFELoop
.af9d					_MDLFEExit:
.af9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.af9e					MemoryInsertLine:
.af9e	08		php				php
.af9f	20 86 af	jsr $af86			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.afa2	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.afa4	1a		inc a				inc 	a
.afa5	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.afa7	b0 36		bcs $afdf			bcs 	_MDLIError
.afa9	28		plp				plp
.afaa	90 08		bcc $afb4			bcc 	_MDLIFound
.afac	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.afae	85 30		sta $30				sta 	codePtr
.afb0	a5 3b		lda $3b				lda 	zTemp2+1
.afb2	85 31		sta $31				sta 	codePtr+1
.afb4					_MDLIFound:
.afb4	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.afb7	a8		tay				tay
.afb8					_MDLIInsert:
.afb8	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.afba	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.afbc	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.afbe	c5 3a		cmp $3a				cmp 	zTemp2
.afc0	d0 06		bne $afc8			bne 	_MDLINext
.afc2	a5 31		lda $31				lda 	codePtr+1
.afc4	c5 3b		cmp $3b				cmp 	zTemp2+1
.afc6	f0 0a		beq $afd2			beq 	_MDLIHaveSpace
.afc8					_MDLINext:
.afc8	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.afca	d0 02		bne $afce			bne 	_MDLINoBorrow
.afcc	c6 3b		dec $3b				dec 	zTemp2+1
.afce					_MDLINoBorrow:
.afce	c6 3a		dec $3a				dec 	zTemp2
.afd0	80 e6		bra $afb8			bra 	_MDLIInsert
.afd2					_MDLIHaveSpace:
.afd2	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.afd5	88		dey				dey 								; from offset-1 to 0
.afd6					_MDLICopy:
.afd6	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.afd9	91 30		sta ($30),y			sta 	(codePtr),y
.afdb	88		dey				dey
.afdc	10 f8		bpl $afd6			bpl 	_MDLICopy
.afde	60		rts				rts
.afdf					_MDLIError:
.afdf	a9 06		lda #$06		lda	#6
.afe1	4c 5f 94	jmp $945f		jmp	ErrorHandler
.afe4					MDLAppendLine:
.afe4	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.afe6	85 36		sta $36				sta 	zTemp0
.afe8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.afea	85 38		sta $38				sta 	0+zTemp1
.afec	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.afee	85 39		sta $39				sta 	1+zTemp1
.aff0	b2 38		lda ($38)			lda 	(zTemp1)
.aff2	d0 0a		bne $affe			bne 	_MDLANoInitialise
.aff4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aff6	8d 5d 06	sta $065d			sta 	0+AppendPointer
.aff9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.affb	8d 5e 06	sta $065e			sta 	1+AppendPointer
.affe					_MDLANoInitialise:
.affe	18		clc				clc
.afff	ad 5d 06	lda $065d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b002	85 38		sta $38				sta 	zTemp1
.b004	72 36		adc ($36)			adc 	(zTemp0)
.b006	8d 5d 06	sta $065d			sta 	AppendPointer
.b009	ad 5e 06	lda $065e			lda 	AppendPointer+1
.b00c	85 39		sta $39				sta 	zTemp1+1
.b00e	69 00		adc #$00			adc 	#0
.b010	8d 5e 06	sta $065e			sta 	AppendPointer+1
.b013	a0 00		ldy #$00			ldy 	#0
.b015					_MDLACopy:
.b015	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b017	91 38		sta ($38),y			sta 	(zTemp1),y
.b019	c8		iny				iny
.b01a	98		tya				tya
.b01b	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b01d	d0 f6		bne $b015			bne 	_MDLACopy
.b01f	a9 00		lda #$00			lda 	#0 							; end of program.
.b021	91 38		sta ($38),y			sta 	(zTemp1),y
.b023	60		rts				rts
.065d					AppendPointer:
>065d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a054					MemoryNew:
.a054	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a056	85 30		sta $30				sta 	codePtr
.a058	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a05a	85 31		sta $31				sta 	codePtr+1
.a05c	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a05e	92 30		sta ($30)			sta 	(codePtr)
.a060	60		rts				rts
.a061					MemoryInline:
.a061	98		tya				tya 								; put address into stack,x
.a062	18		clc				clc
.a063	65 30		adc $30				adc 	codePtr
.a065	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a068	a5 31		lda $31				lda 	codePtr+1
.a06a	69 00		adc #$00			adc 	#0
.a06c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a06f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a072	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a075	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a076					MemorySearch:
.a076	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a078	86 37		stx $37				stx 	zTemp0+1
.a07a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a07c	85 30		sta $30				sta 	codePtr
.a07e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a080	85 31		sta $31				sta 	codePtr+1
.a082					_MTAXLoop:
.a082	b2 30		lda ($30)			lda 	(codePtr)
.a084	18		clc				clc
.a085	f0 21		beq $a0a8			beq 	_MTAXExit 					; reached end, exit with CC.
.a087	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a089	b1 30		lda ($30),y			lda 	(codePtr),y
.a08b	38		sec				sec
.a08c	e5 36		sbc $36				sbc 	zTemp0
.a08e	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a090	c8		iny				iny 								; do the MSB
.a091	b1 30		lda ($30),y			lda 	(codePtr),y
.a093	e5 37		sbc $37				sbc 	zTemp0+1
.a095	05 38		ora $38				ora 	zTemp1
.a097	f0 0f		beq $a0a8			beq 	_MTAXExit	 				; found
.a099	b0 0d		bcs $a0a8			bcs 	_MTAXExit 					; current < required exit
.a09b	18		clc				clc
.a09c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a09e	65 30		adc $30				adc 	codePtr
.a0a0	85 30		sta $30				sta 	codePtr
.a0a2	90 02		bcc $a0a6			bcc 	_CREExit
.a0a4	e6 31		inc $31				inc 	codePtr+1
.a0a6					_CREExit:
.a0a6	80 da		bra $a082			bra 	_MTAXLoop
.a0a8					_MTAXExit:
.a0a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a0a9					StackPushByte:
.a0a9	48		pha				pha 								; save byte
.a0aa	a5 34		lda $34				lda 	BasicStack
.a0ac	d0 09		bne $a0b7			bne 	_SPBNoBorrow
.a0ae	c6 35		dec $35				dec 	BasicStack+1
.a0b0	48		pha				pha
.a0b1	a5 35		lda $35				lda 	BasicStack+1
.a0b3	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a0b5	90 06		bcc $a0bd			bcc 	_SPBMemory
.a0b7					_SPBNoBorrow:
.a0b7	c6 34		dec $34				dec 	BasicStack
.a0b9	68		pla				pla 								; get back and write
.a0ba	92 34		sta ($34)			sta 	(BasicStack)
.a0bc	60		rts				rts
.a0bd					_SPBMemory:
.a0bd	a9 12		lda #$12		lda	#18
.a0bf	4c 5f 94	jmp $945f		jmp	ErrorHandler
.a0c2					StackPopByte:
.a0c2	b2 34		lda ($34)			lda 	(BasicStack)
.a0c4	e6 34		inc $34				inc 	BasicStack
.a0c6	d0 02		bne $a0ca			bne 	_SPBNoCarry
.a0c8	e6 35		inc $35				inc 	BasicStack+1
.a0ca					_SPBNoCarry:
.a0ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a0cb					StackOpen:
.a0cb	48		pha				pha 								; save frame byte
.a0cc	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a0ce	0a		asl a				asl 	a 							; claim twice this for storage
.a0cf	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a0d1	38		sec				sec 								; so basically subtracting from
.a0d2	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a0d4	85 34		sta $34				sta 	basicStack
.a0d6	b0 08		bcs $a0e0			bcs 	_SONoBorrow
.a0d8	c6 35		dec $35				dec 	basicStack+1
.a0da	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a0dc	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a0de	90 04		bcc $a0e4			bcc 	_SOMemory
.a0e0					_SONoBorrow:
.a0e0	68		pla				pla 								; get marker back and write at TOS
.a0e1	92 34		sta ($34)			sta 	(basicStack)
.a0e3	60		rts				rts
.a0e4					_SOMemory:
.a0e4	a9 12		lda #$12		lda	#18
.a0e6	4c 5f 94	jmp $945f		jmp	ErrorHandler
.a0e9					StackClose:
.a0e9	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a0eb	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a0ed	0a		asl a				asl 	a 							; claim twice this.
.a0ee	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a0f0	85 34		sta $34				sta 	basicStack
.a0f2	90 02		bcc $a0f6			bcc 	_SCExit
.a0f4	e6 35		inc $35				inc 	basicStack+1
.a0f6					_SCExit:
.a0f6	60		rts				rts
.a0f7					StackCheckFrame:
.a0f7	48		pha				pha
.a0f8					_StackRemoveLocals:
.a0f8	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a0fa	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a0fc	b0 05		bcs $a103			bcs 	_SCNoLocal
.a0fe	20 3f a7	jsr $a73f			jsr 	LocalPopValue
.a101	80 f5		bra $a0f8			bra 	_StackRemoveLocals
.a103					_SCNoLocal:
.a103	68		pla				pla
.a104	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a106	29 f0		and #$f0			and 	#$F0 						; check type bits
.a108	d0 01		bne $a10b			bne 	_SCFError 					; different, we have structures mixed up
.a10a	60		rts				rts
.a10b					_SCFError:
.a10b	8a		txa				txa 								; report error X
.a10c	4c 5f 94	jmp $945f			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a10f					STKSaveCodePosition:
.a10f	5a		phy				phy
.a110	98		tya				tya 								; save Y
.a111	a0 05		ldy #$05			ldy 	#5
.a113	91 34		sta ($34),y			sta 	(basicStack),y
.a115	88		dey				dey 								; save Code Pointer
.a116					_STKSaveLoop:
.a116	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a119	91 34		sta ($34),y			sta 	(basicStack),y
.a11b	88		dey				dey
.a11c	d0 f8		bne $a116			bne 	_STKSaveLoop
.a11e	7a		ply				ply
.a11f	60		rts				rts
.a120					STKLoadCodePosition:
.a120	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a122					_STKLoadLoop:
.a122	b1 34		lda ($34),y			lda 	(basicStack),y
.a124	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a127	c8		iny				iny
.a128	c0 05		cpy #$05			cpy 	#5
.a12a	d0 f6		bne $a122			bne 	_STKLoadLoop
.a12c	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a12e	a8		tay				tay
.a12f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a130					StackReset:
.a130	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a132	85 34		sta $34				sta 	0+basicStack
.a134	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a136	85 35		sta $35				sta 	1+basicStack
.a138	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a13a	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a13c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b024					StringConcrete:
.b024	5a		phy				phy 								; save position on stack
.b025	20 26 9d	jsr $9d26			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b028	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b02b	85 38		sta $38				sta 	zTemp1
.b02d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b030	85 39		sta $39				sta 	zTemp1+1
.b032	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b034					_SALength:
.b034	c8		iny				iny
.b035	b1 38		lda ($38),y			lda 	(zTemp1),y
.b037	d0 fb		bne $b034			bne 	_SALength
.b039	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b03b	b0 3f		bcs $b07c			bcs 	_SALengthError
.b03d	98		tya				tya 				 				; length of the new string
.b03e	18		clc				clc
.b03f	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b041	90 02		bcc $b045			bcc 	_SAHaveLength
.b043	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b045					_SAHaveLength:
.b045	48		pha				pha 								; save length.
.b046	38		sec				sec
.b047	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b049	6d 8e 04	adc $048e			adc 	StringMemory
.b04c	8d 8e 04	sta $048e			sta 	StringMemory
.b04f	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b051	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b054	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b056	6d 8f 04	adc $048f			adc 	StringMemory+1
.b059	8d 8f 04	sta $048f			sta 	StringMemory+1
.b05c	85 3b		sta $3b				sta 	zTemp2+1
.b05e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b061	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b062	38		sec				sec
.b063	e9 03		sbc #$03			sbc 	#3
.b065	92 3a		sta ($3a)			sta 	(zTemp2)
.b067	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b069	a0 01		ldy #$01			ldy 	#1
.b06b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b06d					_SACopyNewString:
.b06d	a0 00		ldy #$00			ldy 	#0
.b06f					_SACopyNSLoop:
.b06f	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b071	c8		iny				iny 								; write two on in string storage
.b072	c8		iny				iny
.b073	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b075	88		dey				dey 								; this makes it one one.
.b076	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b078	d0 f5		bne $b06f			bne 	_SACopyNSLoop
.b07a	7a		ply				ply
.b07b	60		rts				rts
.b07c					_SALengthError:
.b07c	a9 09		lda #$09		lda	#9
.b07e	4c 5f 94	jmp $945f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b081					StringSystemInitialise:
.b081	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b083	8d 8e 04	sta $048e			sta 	0+StringMemory
.b086	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b088	8d 8f 04	sta $048f			sta 	1+StringMemory
.b08b	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b08e	60		rts				rts
.b08f					StringSpaceInitialise:
.b08f	20 26 9d	jsr $9d26			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b092	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b094	8d 90 04	sta $0490			sta 	StringInitialised
.b097	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b09a	8d 91 04	sta $0491			sta 	StringTempPointer
.b09d	ad 8f 04	lda $048f			lda 	StringMemory+1
.b0a0	3a		dec a				dec 	a
.b0a1	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b0a4	60		rts				rts
.b0a5					StringTempAllocate:
.b0a5	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b0a7	b0 35		bcs $b0de			bcs 	_STALength
.b0a9	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b0ac	30 05		bmi $b0b3			bmi 	_STAAllocate
.b0ae	48		pha				pha 								; save value to subtract.
.b0af	20 8f b0	jsr $b08f			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b0b2	68		pla				pla 								; restore it
.b0b3					_STAAllocate:
.b0b3	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b0b5	18		clc				clc  								; deliberate allows one more
.b0b6	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b0b9	8d 91 04	sta $0491			sta 	StringTempPointer
.b0bc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b0bf	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b0c1	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b0c4	69 ff		adc #$ff			adc 	#$FF
.b0c6	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b0c9	85 3d		sta $3d				sta 	zsTemp+1
.b0cb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b0ce	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b0d1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b0d4	a9 10		lda #$10			lda 	#NSTString
.b0d6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0d9	a9 00		lda #$00			lda 	#0 							; clear the target string
.b0db	92 3c		sta ($3c)			sta 	(zsTemp)
.b0dd	60		rts				rts
.b0de					_STALength:
.b0de	a9 09		lda #$09		lda	#9
.b0e0	4c 5f 94	jmp $945f		jmp	ErrorHandler
.b0e3					StringTempWrite:
.b0e3	48		pha				pha
.b0e4	92 3c		sta ($3c)			sta 	(zsTemp)
.b0e6	e6 3c		inc $3c				inc 	zsTemp
.b0e8	d0 02		bne $b0ec			bne 	_STWNoCarry
.b0ea	e6 3d		inc $3d				inc 	zsTemp+1
.b0ec					_STWNoCarry:
.b0ec	a9 00		lda #$00			lda 	#0
.b0ee	92 3c		sta ($3c)			sta 	(zsTemp)
.b0f0	68		pla				pla
.b0f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a13d					BackloadProgram:
.a13d	a2 ff		ldx #$ff			ldx 	#$FF
.a13f	20 67 a1	jsr $a167			jsr 	BLReadByte
.a142	30 1f		bmi $a163			bmi 	_BPExit
.a144					_BPCopy:
.a144	e8		inx				inx  								; copy byte in
.a145	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a148	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a14b	20 67 a1	jsr $a167			jsr 	BLReadByte 					; read next byte
.a14e	30 0a		bmi $a15a			bmi 	_BPEndLine 					; -ve = EOL
.a150	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a152	d0 02		bne $a156			bne 	_BPNotTab
.a154	a9 20		lda #$20			lda 	#' '
.a156					_BPNotTab:
.a156	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a158	b0 ea		bcs $a144			bcs 	_BPCopy
.a15a					_BPEndLine:
.a15a	20 90 a4	jsr $a490			jsr 	TokeniseLine 				; tokenise the line.
.a15d	38		sec				sec 								; append not insert
.a15e	20 9e af	jsr $af9e			jsr 	MemoryInsertLine 			; append to current program
.a161	80 da		bra $a13d			bra 	BackloadProgram
.a163					_BPExit:
.a163	20 8f 8a	jsr $8a8f			jsr 	ClearCommand 				; clear variables etc.
.a166	60		rts				rts
.a167					BLReadByte:
.a167					_BLLoad:
.a167	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a16a	ee 68 a1	inc $a168			inc 	_BLLoad+1
.a16d	d0 03		bne $a172			bne 	_BLNoCarry
.a16f	ee 69 a1	inc $a169			inc 	_BLLoad+2
.a172					_BLNoCarry:
.a172	c9 00		cmp #$00			cmp 	#0
.a174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a175					TokeniseSearchTable:
.a175	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a177	85 36		sta $36				sta 	zTemp0
.a179	a0 00		ldy #$00			ldy 	#0
.a17b	a9 80		lda #$80			lda 	#$80 						; token #
.a17d	85 38		sta $38				sta 	zTemp1
.a17f					_TSTLoop:
.a17f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a181	30 49		bmi $a1cc			bmi 	_TSTFail 					; -ve = end of table
.a183	f0 2e		beq $a1b3			beq 	_TSTNext 					; zero, check next it's a dummy
.a185	c8		iny				iny 								; get the hash
.a186	b1 36		lda ($36),y			lda 	(zTemp0),y
.a188	88		dey				dey
.a189	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a18c	d0 25		bne $a1b3			bne 	_TSTNext
.a18e	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a191	38		sec				sec
.a192	ed 80 04	sbc $0480			sbc 	identStart
.a195	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a197	d0 1a		bne $a1b3			bne 	_TSTNext
.a199	5a		phy				phy 								; save Y , we might fail
.a19a	c8		iny				iny 								; point to text
.a19b	c8		iny				iny
.a19c	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a19f					_TSTCompareName:
.a19f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a1a2	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a1a4	d0 0c		bne $a1b2			bne 	_TSTNextPullY 				; fail, pullY and do next
.a1a6	e8		inx				inx
.a1a7	c8		iny				iny
.a1a8	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a1ab	d0 f2		bne $a19f			bne 	_TSTCompareName
.a1ad	7a		ply				ply 								; throw Y
.a1ae	a5 38		lda $38				lda 	zTemp1 						; get token #
.a1b0	38		sec				sec 								; return with CS = passed.
.a1b1	60		rts				rts
.a1b2					_TSTNextPullY:
.a1b2	7a		ply				ply 								; restore current, fall through.
.a1b3					_TSTNext:
.a1b3	e6 38		inc $38				inc 	zTemp1 						; token counter
.a1b5	98		tya				tya
.a1b6	18		clc				clc
.a1b7	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a1b9	1a		inc a				inc 	a 							; +1
.a1ba	1a		inc a				inc 	a 							; +2
.a1bb	a8		tay				tay
.a1bc	10 c1		bpl $a17f			bpl 	_TSTLoop 					; if Y < $80 loop back
.a1be	98		tya				tya 								; add Y to zTemp0 and reset Y
.a1bf	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a1c1	18		clc				clc  								; but have tables > 255 bytes
.a1c2	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a1c4	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a1c6	90 b7		bcc $a17f			bcc 	_TSTLoop
.a1c8	e6 37		inc $37				inc 	zTemp0+1
.a1ca	80 b3		bra $a17f			bra 	_TSTLoop
.a1cc					_TSTFail:
.a1cc	18		clc				clc
.a1cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a1ce					KeywordSet0:
>a1ce	00 65					.text	0,$65,""               ; $80 !0:EOF
>a1d0	00 58					.text	0,$58,""               ; $81 !1:SH1
>a1d2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a1d4	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a1da	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a1e2	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a1e8	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a1ef	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a1f6	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a1fd	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a203	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a20b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a213	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a219	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a220	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a226	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a22e	28
>a22f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a237	28
>a238	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a23e	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a244	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a24a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a251	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a257	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a25d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a262	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a266	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a26c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a274	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a27b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a282	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a28a	43
>a28b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a291	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a297	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a29e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a2a4	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a2aa	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a2af	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a2b5	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a2ba	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a2c2	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a2c8	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a2cf	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a2d5	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a2da	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a2e1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a2e8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a2ee	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a2f3	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a2fb	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a2ff	ff					.text	$FF
.a300					KeywordSet1:
>a300	00 65					.text	0,$65,""               ; $80 !0:EOF
>a302	00 58					.text	0,$58,""               ; $81 !1:SH1
>a304	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a306	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a30e	4c 45
>a310	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a318	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a31f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a324	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a32a	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a32f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a337	45
>a338	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a33d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a343	ff					.text	$FF
.a344					KeywordSet2:
>a344	00 65					.text	0,$65,""               ; $80 !0:EOF
>a346	00 58					.text	0,$58,""               ; $81 !1:SH1
>a348	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a34a	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a34f	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a354	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a359	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a35e	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a363	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a368	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a36d	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a372	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a377	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a37c	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a381	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a386	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a38b	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a390	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a395	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a39a	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a39f	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a3a4	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a3a9	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a3ae	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a3b3	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a3b8	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a3bd	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a3c2	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a3c7	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a3cc	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a3d1	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a3d6	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a3db	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a3e0	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a3e5	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a3ea	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a3ef	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a3f4	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a3f9	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a3fe	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a403	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a408	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a40d	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a412	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a417	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a41c	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a421	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a426	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a42b	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a430	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a435	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a43a	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a43f	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a444	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a449	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a44e	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a453	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a458	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a45d	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a462	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a467	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a46c	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a471	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a476	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a47b	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a480	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a485	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a48a	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a48f	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a490					TokeniseLine:
.a490	20 18 a6	jsr $a618			jsr 	FixLineBufferCase 			; fix line case
.a493	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a495	8d a6 04	sta $04a6			sta 	tokenOffset
.a498	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a49b	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a49e	a2 ff		ldx #$ff			ldx 	#$FF
.a4a0					_TKFindFirst:
.a4a0	e8		inx				inx
.a4a1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a4a4	f0 79		beq $a51f			beq 	_TKExit
.a4a6	c9 20		cmp #$20			cmp 	#' '
.a4a8	90 f6		bcc $a4a0			bcc 	_TKFindFirst
.a4aa	c9 30		cmp #$30			cmp 	#'0'
.a4ac	90 07		bcc $a4b5			bcc 	_TKNoLineNumber
.a4ae	c9 3a		cmp #$3a			cmp 	#'9'+1
.a4b0	b0 03		bcs $a4b5			bcs 	_TKNoLineNumber
.a4b2	20 42 a6	jsr $a642			jsr 	TokeniseExtractLineNumber
.a4b5					_TKNoLineNumber:
.a4b5					_TKTokeniseLoop:
.a4b5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a4b8	f0 65		beq $a51f			beq 	_TKExit
.a4ba	e8		inx				inx
.a4bb	c9 20		cmp #$20			cmp 	#' '
.a4bd	f0 f6		beq $a4b5			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a4bf	ca		dex				dex 								; undo last get, A contains character, X is position.
.a4c0	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a4c2	f0 61		beq $a525			beq 	_TKTokeniseIdentifier
.a4c4	c9 41		cmp #$41			cmp 	#'A'
.a4c6	90 04		bcc $a4cc			bcc 	_TKTokenisePunctuation
.a4c8	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a4ca	90 59		bcc $a525			bcc 	_TKTokeniseIdentifier
.a4cc					_TKTokenisePunctuation:
.a4cc	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a4ce	f0 27		beq $a4f7			beq 	_TKString
.a4d0	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a4d2	f0 28		beq $a4fc			beq 	_TKHexConstant
.a4d4	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a4d6	f0 29		beq $a501			beq 	_TKCheckDouble
.a4d8	c9 3e		cmp #$3e			cmp 	#'>'
.a4da	f0 25		beq $a501			beq 	_TKCheckDouble
.a4dc					_TKStandardPunctuation:
.a4dc	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a4df	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a4e1	90 0e		bcc $a4f1			bcc 	_TKNoShift
.a4e3	48		pha				pha 								; save
.a4e4	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a4e6	85 36		sta $36				sta 	zTemp0
.a4e8	68		pla				pla
.a4e9	29 20		and #$20			and 	#32 						; bit 5
.a4eb	4a		lsr a				lsr 	a 							; shift into bit 3
.a4ec	4a		lsr a				lsr 	a
.a4ed	05 36		ora $36				ora 	zTemp0
.a4ef	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a4f1					_TKNoShift:
.a4f1	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte 			; write the punctuation character
.a4f4	e8		inx				inx 								; consume the character
.a4f5	80 be		bra $a4b5			bra 	_TKTokeniseLoop 			; and loop round again.
.a4f7					_TKString:
.a4f7	20 a7 a5	jsr $a5a7			jsr 	TokeniseString
.a4fa	80 b9		bra $a4b5			bra 	_TKTokeniseLoop
.a4fc					_TKHexConstant:
.a4fc	20 e2 a5	jsr $a5e2			jsr 	TokeniseHexConstant
.a4ff	80 b4		bra $a4b5			bra 	_TKTokeniseLoop
.a501					_TKCheckDouble:
.a501	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a504	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a506	90 d4		bcc $a4dc			bcc 	_TKStandardPunctuation
.a508	c9 3f		cmp #$3f			cmp 	#'>'+1
.a50a	b0 d0		bcs $a4dc			bcs 	_TKStandardPunctuation
.a50c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a50f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a511	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a512	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a515	38		sec				sec
.a516	e9 3c		sbc #$3c			sbc 	#'<'
.a518	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a51b	e8		inx				inx 								; consume both
.a51c	e8		inx				inx
.a51d	80 96		bra $a4b5			bra 	_TKTokeniseLoop
.a51f	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a521	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a524	60		rts				rts
.a525					_TKTokeniseIdentifier:
.a525	8e 80 04	stx $0480			stx 	identStart 					; save start
.a528	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a52b					_TKCheckLoop:
.a52b	e8		inx				inx 								; look at next, we know first is identifier.
.a52c	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a52f	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a531	f0 f8		beq $a52b			beq 	_TKCheckLoop
.a533	c9 30		cmp #$30			cmp	 	#"0"
.a535	90 0c		bcc $a543			bcc 	_TKEndIdentifier
.a537	c9 3a		cmp #$3a			cmp 	#"9"+1
.a539	90 f0		bcc $a52b			bcc 	_TKCheckLoop
.a53b	c9 41		cmp #$41			cmp	 	#"A"
.a53d	90 04		bcc $a543			bcc 	_TKEndIdentifier
.a53f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a541	90 e8		bcc $a52b			bcc 	_TKCheckLoop
.a543					_TKEndIdentifier:
.a543	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a546	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a548	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a54a	f0 06		beq $a552			beq 	_TKHasTypeCharacter
.a54c	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a54e	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a550	d0 07		bne $a559			bne 	_TKNoTypeCharacter
.a552					_TKHasTypeCharacter:
.a552	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a555	e8		inx				inx 								; read next
.a556	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a559					_TKNoTypeCharacter:
.a559	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a55b	d0 09		bne $a566			bne 	_TKNoArray
.a55d	e8		inx				inx 								; skip the (
.a55e	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a561	09 04		ora #$04			ora 	#$04
.a563	8d 84 04	sta $0484			sta 	identTypeByte
.a566					_TKNoArray:
.a566	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a569	20 03 a6	jsr $a603			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a56c	a0 a1		ldy #$a1			ldy 	#(KeywordSet0) >> 8
.a56e	a9 ce		lda #$ce			lda 	#(KeywordSet0) & $FF
.a570	20 75 a1	jsr $a175			jsr 	TokeniseSearchTable
.a573	a2 00		ldx #$00			ldx 	#0
.a575	b0 1f		bcs $a596			bcs 	_TKFoundToken
.a577	a0 a3		ldy #$a3			ldy 	#(KeywordSet1) >> 8
.a579	a9 00		lda #$00			lda 	#(KeywordSet1) & $FF
.a57b	20 75 a1	jsr $a175			jsr 	TokeniseSearchTable
.a57e	a2 81		ldx #$81			ldx 	#$81
.a580	b0 14		bcs $a596			bcs 	_TKFoundToken
.a582	a0 a3		ldy #$a3			ldy 	#(KeywordSet2) >> 8
.a584	a9 44		lda #$44			lda 	#(KeywordSet2) & $FF
.a586	20 75 a1	jsr $a175			jsr 	TokeniseSearchTable
.a589	a2 82		ldx #$82			ldx 	#$82
.a58b	b0 09		bcs $a596			bcs 	_TKFoundToken
.a58d	20 93 a6	jsr $a693			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a590	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a593	4c b5 a4	jmp $a4b5			jmp 	_TKTokeniseLoop 			; and go round again.
.a596					_TKFoundToken:
.a596	48		pha				pha 								; save token
.a597	8a		txa				txa 								; shift in X, is there one ?
.a598	f0 03		beq $a59d			beq 	_TKNoTShift
.a59a	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte 			; if so, write it out
.a59d					_TKNoTShift:
.a59d	68		pla				pla 								; restore and write token
.a59e	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a5a1	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a5a4	4c b5 a4	jmp $a4b5			jmp 	_TKTokeniseLoop 			; and go round again.
.a5a7					TokeniseString:
.a5a7	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a5a9	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a5ac	e8		inx				inx									; start of quoted string.
.a5ad	da		phx				phx 								; push start of string on top
.a5ae	ca		dex				dex
.a5af					_TSFindEnd:
.a5af	e8		inx				inx
.a5b0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a5b3	f0 04		beq $a5b9			beq 	_TSEndOfString
.a5b5	c9 22		cmp #$22			cmp 	#'"'
.a5b7	d0 f6		bne $a5af			bne 	_TSFindEnd
.a5b9					_TSEndOfString:
.a5b9	7a		ply				ply  								; so now Y is first character, X is character after end.
.a5ba	48		pha				pha 								; save terminating character
.a5bb	20 c3 a5	jsr $a5c3			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a5be	68		pla				pla 								; terminating character
.a5bf	f0 01		beq $a5c2			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a5c1	e8		inx				inx
.a5c2					_TSNotQuote:
.a5c2	60		rts				rts
.a5c3					TOWriteBlockXY:
.a5c3	86 36		stx $36				stx 	zTemp0 						; write end character
.a5c5	98		tya				tya
.a5c6	49 ff		eor #$ff			eor 	#$FF
.a5c8	38		sec				sec
.a5c9	65 36		adc $36				adc 	zTemp0
.a5cb	1a		inc a				inc 	a 							; one extra for NULL
.a5cc	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a5cf					_TOBlockLoop:
.a5cf	c4 36		cpy $36				cpy 	zTemp0
.a5d1	f0 09		beq $a5dc			beq 	_TOBlockExit
.a5d3	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a5d6	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a5d9	c8		iny				iny
.a5da	80 f3		bra $a5cf			bra 	_TOBlockLoop
.a5dc					_TOBlockExit:
.a5dc	a9 00		lda #$00			lda 	#0
.a5de	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a5e1	60		rts				rts
.a5e2					TokeniseHexConstant:
.a5e2	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a5e4	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a5e7	e8		inx				inx									; start of quoted string.
.a5e8	da		phx				phx 								; push start of constant on top
.a5e9	ca		dex				dex
.a5ea					_THFindLoop:
.a5ea	e8		inx				inx
.a5eb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a5ee	c9 30		cmp #$30			cmp 	#"0"
.a5f0	90 0c		bcc $a5fe			bcc 	_THFoundEnd
.a5f2	c9 3a		cmp #$3a			cmp 	#"9"+1
.a5f4	90 f4		bcc $a5ea			bcc 	_THFindLoop
.a5f6	c9 41		cmp #$41			cmp 	#"A"
.a5f8	90 04		bcc $a5fe			bcc 	_THFoundEnd
.a5fa	c9 47		cmp #$47			cmp 	#"F"+1
.a5fc	90 ec		bcc $a5ea			bcc 	_THFindLoop
.a5fe					_THFoundEnd:
.a5fe	7a		ply				ply 								; restore start
.a5ff	20 c3 a5	jsr $a5c3			jsr 	TOWriteBlockXY 				; output the block
.a602	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a603					TokeniseCalculateHash:
.a603	da		phx				phx
.a604	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a607	a9 00		lda #$00			lda 	#0
.a609					_TCHLoop:
.a609	18		clc				clc
.a60a	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a60d	e8		inx				inx
.a60e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a611	d0 f6		bne $a609			bne 	_TCHLoop
.a613	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a616	fa		plx				plx
.a617	60		rts				rts
.a618					FixLineBufferCase:
.a618	a2 00		ldx #$00			ldx 	#0
.a61a					_FLBCLoop:
.a61a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a61d	f0 22		beq $a641			beq 	_FLBCExit 					; end of string.
.a61f	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a621	f0 11		beq $a634			beq 	_FLBCInQuotes
.a623	e8		inx				inx
.a624	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a626	90 f2		bcc $a61a			bcc 	_FLBCLoop
.a628	c9 7b		cmp #$7b			cmp 	#'z'+1
.a62a	b0 ee		bcs $a61a			bcs 	_FLBCLoop
.a62c	38		sec				sec 								; make U/C
.a62d	e9 20		sbc #$20			sbc 	#32
.a62f	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a632	80 e6		bra $a61a			bra 	_FLBCLoop
.a634					_FLBCInQuotes:
.a634	e8		inx				inx 								; advance
.a635	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a638	f0 07		beq $a641			beq 	_FLBCExit 					; exit on EOS
.a63a	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a63c	d0 f6		bne $a634			bne 	_FLBCInQuotes
.a63e	e8		inx				inx 								; skip over it
.a63f	80 d9		bra $a61a			bra 	_FLBCLoop
.a641					_FLBCExit:
.a641	60		rts				rts
.a642					TokeniseExtractLineNumber:
.a642	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a645	48		pha				pha
.a646	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a649	48		pha				pha
.a64a	20 80 a6	jsr $a680			jsr 	_TELNTimes2 				; line # x 4
.a64d	20 80 a6	jsr $a680			jsr 	_TELNTimes2 				; line # x 2
.a650	18		clc				clc 								; add stacked value
.a651	68		pla				pla
.a652	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a655	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a658	68		pla				pla
.a659	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a65c	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a65f	20 80 a6	jsr $a680			jsr 	_TELNTimes2 				; line # x 10
.a662	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a665	e8		inx				inx
.a666	29 0f		and #$0f			and 	#15 						; add to line #
.a668	18		clc				clc
.a669	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a66c	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a66f	90 03		bcc $a674			bcc 	_TLENNoCarry
.a671	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a674					_TLENNoCarry:
.a674	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a677	c9 30		cmp #$30			cmp 	#'0'
.a679	90 04		bcc $a67f			bcc 	_TLENExit
.a67b	c9 3a		cmp #$3a			cmp 	#'9'+1
.a67d	90 c3		bcc $a642			bcc 	TokeniseExtractLineNumber
.a67f					_TLENExit:
.a67f	60		rts				rts
.a680					_TELNTimes2:
.a680	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a683	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a686	60		rts				rts
.a687					TokeniseWriteByte:
.a687	da		phx				phx
.a688	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a68b	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a68e	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a691	fa		plx				plx
.a692	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a693					CheckCreateVariableRecord:
.a693	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a695	85 36		sta $36				sta 	0+zTemp0
.a697	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a699	85 37		sta $37				sta 	1+zTemp0
.a69b					_CCVSearch:
.a69b	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a69d	f0 2c		beq $a6cb			beq 	_CCVFail
.a69f	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a6a1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a6a3	cd 83 04	cmp $0483			cmp 	identHash
.a6a6	d0 16		bne $a6be			bne 	_CCVNext
.a6a8	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a6aa	ae 80 04	ldx $0480			ldx 	identStart
.a6ad					_CCVCompare:
.a6ad	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a6b0	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a6b2	e8		inx				inx 								; advance pointers
.a6b3	c8		iny				iny
.a6b4	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a6b5	d0 07		bne $a6be			bne 	_CCVNext  					; didn't match go to next.
.a6b7	90 f4		bcc $a6ad			bcc 	_CCVCompare 				; not finished yet.
.a6b9	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a6bc	f0 41		beq $a6ff			beq 	_CCVFound 					; yes, we were successful
.a6be					_CCVNext:
.a6be	18		clc				clc
.a6bf	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a6c1	65 36		adc $36				adc 	zTemp0
.a6c3	85 36		sta $36				sta 	zTemp0
.a6c5	90 d4		bcc $a69b			bcc 	_CCVSearch
.a6c7	e6 37		inc $37				inc 	zTemp0+1
.a6c9	80 d0		bra $a69b			bra 	_CCVSearch
.a6cb					_CCVFail:
.a6cb	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a6cd	ad 83 04	lda $0483			lda 	identHash
.a6d0	91 36		sta ($36),y			sta 	(zTemp0),y
.a6d2	c8		iny				iny 								; offset 2 is the type byte
.a6d3	ad 84 04	lda $0484			lda 	identTypeByte
.a6d6	91 36		sta ($36),y			sta 	(zTemp0),y
.a6d8	c8		iny				iny
.a6d9					_CCVData:
.a6d9	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a6db	91 36		sta ($36),y			sta 	(zTemp0),y
.a6dd	c8		iny				iny
.a6de	c0 08		cpy #$08			cpy 	#8
.a6e0	90 f7		bcc $a6d9			bcc 	_CCVData
.a6e2	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a6e5					_CCVCopyName:
.a6e5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a6e8	91 36		sta ($36),y			sta 	(zTemp0),y
.a6ea	e8		inx				inx
.a6eb	c8		iny				iny
.a6ec	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a6ef	d0 f4		bne $a6e5			bne 	_CCVCopyName
.a6f1	98		tya				tya 								; patch offset
.a6f2	92 36		sta ($36)			sta 	(zTemp0)
.a6f4	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a6f6	91 36		sta ($36),y			sta 	(zTemp0),y
.a6f8	88		dey				dey
.a6f9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a6fb	09 80		ora #$80			ora 	#$80
.a6fd	91 36		sta ($36),y			sta 	(zTemp0),y
.a6ff					_CCVFound:
.a6ff	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a701	38		sec				sec
.a702	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a704	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a706	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a709	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a70b	20 87 a6	jsr $a687			jsr 	TokeniseWriteByte
.a70e	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
