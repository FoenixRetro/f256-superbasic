
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 11:24:56 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 26 93	jsr $9326			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 ca 84	jsr $84ca			jsr 	RunDemos
.8013	20 09 8d	jsr $8d09			jsr 	NewCommand 					; erase current program
.8016	20 ab 9f	jsr $9fab			jsr 	BackloadProgram
.8019	4c 65 88	jmp $8865			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1015."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 30 31 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxEORValue:
>063b							.fill 	1
.063c					gxANDValue:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1
.063f					gsOffset:
>063f							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8084					GXClearBitmap:
.8084	48		pha				pha
.8085	5a		phy				phy
.8086	20 2e 85	jsr $852e			jsr 	GXOpenBitmap 				; start access
.8089	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.808b	ad 3a 06	lda $063a			lda 	gxHeight
.808e	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8090	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8092					_GXCalcLastPage:
.8092	98		tya				tya 								; add to base page
.8093	18		clc				clc
.8094	6d 39 06	adc $0639			adc 	gxBasePage
.8097	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.8099					_GXClearAll:
.8099	20 ab 80	jsr $80ab			jsr 	_GXClearBlock 				; clear 8k block
.809c	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.809e	a5 0b		lda $0b				lda 	GFXEditSlot
.80a0	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.80a3	b0 f4		bcs $8099			bcs 	_GXClearAll
.80a5	20 3f 85	jsr $853f			jsr 	GXCloseBitmap	 			; stop access
.80a8	7a		ply				ply
.80a9	68		pla				pla
.80aa	60		rts				rts
.80ab					_GXClearBlock:
.80ab	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.80ad	85 38		sta $38				sta 	0+gzTemp1
.80af	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.80b1	85 39		sta $39				sta 	1+gzTemp1
.80b3					_GXCB0:
.80b3	a5 36		lda $36				lda 	gzTemp0
.80b5	a0 00		ldy #$00			ldy 	#0
.80b7					_GXCB1:
.80b7	91 38		sta ($38),y			sta 	(gzTemp1),y
.80b9	c8		iny				iny
.80ba	91 38		sta ($38),y			sta 	(gzTemp1),y
.80bc	c8		iny				iny
.80bd	91 38		sta ($38),y			sta 	(gzTemp1),y
.80bf	c8		iny				iny
.80c0	91 38		sta ($38),y			sta 	(gzTemp1),y
.80c2	c8		iny				iny
.80c3	d0 f2		bne $80b7			bne 	_GXCB1
.80c5	e6 39		inc $39				inc 	gzTemp1+1
.80c7	a5 39		lda $39				lda 	gzTemp1+1
.80c9	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.80cb	d0 e6		bne $80b3			bne 	_GXCB0
.80cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/ellipse.asm

.80ce					GXFillEllipse:
.80ce	a9 ff		lda #$ff			lda 	#255
.80d0	80 02		bra $80d4			bra 	GXEllipse
.80d2					GXFrameEllipse:
.80d2	a9 00		lda #$00			lda 	#0
.80d4					GXEllipse:
.80d4	8d 43 06	sta $0643			sta 	gIsFillMode					; save Fill flag
.80d7	20 b7 85	jsr $85b7			jsr 	GXSortXY 					; topleft/bottomright
.80da	20 2e 85	jsr $852e			jsr 	GXOpenBitmap 				; start drawing
.80dd	20 d9 81	jsr $81d9			jsr 	GXEllipseSetup 				; set up for drawing
.80e0	9c 44 06	stz $0644			stz 	gYChanged
.80e3					_GXEllipseDraw:
.80e3	ad 41 06	lda $0641			lda 	gX 							; while x <= y
.80e6	cd 42 06	cmp $0642			cmp 	gY
.80e9	90 09		bcc $80f4			bcc 	_GXEllipseContinue
.80eb	d0 03		bne $80f0			bne 	_GXNoLast
.80ed	20 ff 80	jsr $80ff			jsr 	GXPlot1
.80f0					_GXNoLast:
.80f0	20 3f 85	jsr $853f			jsr 	GXCloseBitmap 				; close the bitmap
.80f3	60		rts				rts
.80f4					_GXEllipseContinue:
.80f4	20 fc 80	jsr $80fc			jsr 	GXPlot2 					; draw it
.80f7	20 86 81	jsr $8186			jsr 	GXEllipseMove 				; adjust the coordinates
.80fa	80 e7		bra $80e3			bra 	_GXEllipseDraw
.80fc					GXPlot2:
.80fc	20 ff 80	jsr $80ff			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80ff					GXPlot1:
.80ff	ad 42 06	lda $0642			lda 	gY 								; if y = 0, don't do it twice (xor)
.8102	f0 03		beq $8107			beq 	_GXPlot1Only
.8104	20 23 81	jsr $8123			jsr 	GXPlot0 						; plot and negate
.8107					_GXPlot1Only:
.8107	20 23 81	jsr $8123			jsr 	GXPlot0 						; twice, undoing negation
.810a	ad 41 06	lda $0641			lda 	gX 								; swap X and Y
.810d	ae 42 06	ldx $0642			ldx	 	gY
.8110	8d 42 06	sta $0642			sta 	gY
.8113	8e 41 06	stx $0641			stx 	gX
.8116	ad 44 06	lda $0644			lda 	gYChanged 						; toggle Y Changed flag
.8119	a9 ff		lda #$ff			lda 	#$FF
.811b	8d 44 06	sta $0644			sta 	gYChanged
.811e	60		rts				rts
.811f	20 23 81	jsr $8123			jsr 	GXPlot0 						; do once
.8122	60		rts				rts
.8123	ad 43 06	lda $0643	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.8126	f0 05		beq $812d			beq 	_GXPlot0Always
.8128	ad 44 06	lda $0644			lda 	gYChanged						; fill mode, only draw if changed.
.812b	f0 3a		beq $8167			beq 	GXPlot0Exit
.812d					_GXPlot0Always:
.812d	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.812f	ad 42 06	lda $0642			lda 	gY
.8132	20 68 81	jsr $8168			jsr 	GXSubCopy
.8135	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8137	ad 41 06	lda $0641			lda 	gX
.813a	20 68 81	jsr $8168			jsr 	GXSubCopy
.813d	48		pha				pha 									; save last offset X
.813e	20 4c 85	jsr $854c			jsr 	GXPositionCalc 					; calculate position/offset.
.8141	68		pla				pla
.8142	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.8143	85 36		sta $36				sta 	gzTemp0
.8145	64 37		stz $37				stz 	gzTemp0+1
.8147	26 37		rol $37				rol 	gzTemp0+1
.8149	ad 46 06	lda $0646			lda 	gxScalar+1 						; is scalar not $100 (e.g. ellipse not circle)
.814c	49 01		eor #$01			eor 	#1
.814e	0d 45 06	ora $0645			ora 	gxScalar
.8151	f0 03		beq $8156			beq 	_GXNoScalar
.8153	20 50 82	jsr $8250			jsr 	GXScaleZTemp0
.8156					_GXNoScalar
.8156	ad 43 06	lda $0643			lda 	gIsFillMode
.8159	69 80		adc #$80			adc 	#128
.815b	20 f4 83	jsr $83f4			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.815e	38		sec				sec 									; GY = -GY
.815f	a9 00		lda #$00			lda 	#0
.8161	ed 42 06	sbc $0642			sbc 	gY
.8164	8d 42 06	sta $0642			sta 	gY
.8167					GXPlot0Exit:
.8167	60		rts				rts
.8168					GXSubCopy:
.8168	85 36		sta $36				sta 	gzTemp0
.816a	64 37		stz $37				stz 	gzTemp0+1
.816c	29 80		and #$80			and 	#$80
.816e	f0 02		beq $8172			beq 	_GXNoSx
.8170	c6 37		dec $37				dec 	gzTemp0+1
.8172					_GXNoSx:
.8172	38		sec				sec
.8173	bd 35 06	lda $0635,x			lda 	gXX1,x
.8176	e5 36		sbc $36				sbc 	gzTemp0
.8178	9d 31 06	sta $0631,x			sta 	gXX0,x
.817b	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.817e	e5 37		sbc $37				sbc 	gzTemp0+1
.8180	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.8183	a5 36		lda $36				lda 	gzTemp0 						; return A
.8185	60		rts				rts
.8186					GXEllipseMove:
.8186	9c 44 06	stz $0644			stz 	gYChanged 					; clear Y changed flag
.8189	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.818b	10 0d		bpl $819a			bpl 	_GXEMPositive
.818d	ee 41 06	inc $0641			inc 	gX 							; X++
.8190	ad 41 06	lda $0641			lda 	gX
.8193	20 b9 81	jsr $81b9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8196	a9 06		lda #$06			lda 	#6  						; and add 6
.8198	80 15		bra $81af			bra 	_GXEMAddD
.819a					_GXEMPositive:
.819a	ee 41 06	inc $0641			inc 	gX 							; X++
.819d	ce 42 06	dec $0642			dec 	gy 							; Y--
.81a0	38		sec				sec 								; calculate X-Y
.81a1	ad 41 06	lda $0641			lda 	gX
.81a4	ed 42 06	sbc $0642			sbc 	gY
.81a7	20 b9 81	jsr $81b9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81aa	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ac	ce 44 06	dec $0644			dec 	gYChanged
.81af					_GXEMAddD:
.81af	18		clc				clc
.81b0	65 38		adc $38				adc 	gzTemp1
.81b2	85 38		sta $38				sta 	gzTemp1
.81b4	90 02		bcc $81b8			bcc 	_GXEMNoCarry
.81b6	e6 39		inc $39				inc 	gzTemp1+1
.81b8					_GXEMNoCarry:
.81b8	60		rts				rts
.81b9					_GXAdd4TimesToD:
.81b9	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.81bb	29 80		and #$80			and 	#$80
.81bd	f0 02		beq $81c1			beq 	_GXA4Unsigned
.81bf	a9 ff		lda #$ff			lda 	#$FF
.81c1					_GXA4Unsigned:
.81c1	85 37		sta $37				sta 	gzTemp0+1
.81c3	06 36		asl $36				asl 	gzTemp0  					; x 4
.81c5	26 37		rol $37				rol 	gzTemp0+1
.81c7	06 36		asl $36				asl 	gzTemp0
.81c9	26 37		rol $37				rol 	gzTemp0+1
.81cb	18		clc				clc 								; add
.81cc	a5 36		lda $36				lda		gzTemp0
.81ce	65 38		adc $38				adc 	gzTemp1
.81d0	85 38		sta $38				sta 	gzTemp1
.81d2	a5 37		lda $37				lda		gzTemp0+1
.81d4	65 39		adc $39				adc 	gzTemp1+1
.81d6	85 39		sta $39				sta 	gzTemp1+1
.81d8	60		rts				rts
.81d9					GXEllipseSetup:
.81d9	a2 00		ldx #$00			ldx 	#0 							; zero slot 0 & 1
.81db	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.81de	e8		inx				inx
.81df	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.81e2	38		sec				sec
.81e3	ad 35 06	lda $0635			lda 	gxX1
.81e6	ed 31 06	sbc $0631			sbc 	gXX0
.81e9	8d 10 04	sta $0410			sta 	NSMantissa1
.81ec	ad 36 06	lda $0636			lda 	gxX1+1
.81ef	ed 32 06	sbc $0632			sbc 	gXX0+1
.81f2	8d 18 04	sta $0418			sta 	NSMantissa2
.81f5	38		sec				sec
.81f6	ad 37 06	lda $0637			lda 	gxY1
.81f9	ed 33 06	sbc $0633			sbc 	gxY0
.81fc	8d 09 04	sta $0409			sta 	NSMantissa0+1
.81ff	4a		lsr a				lsr 	a
.8200	8d 40 06	sta $0640			sta 	gRadius
.8203	a2 00		ldx #$00			ldx 	#0
.8205	20 38 82	jsr $8238			jsr 	_GXCalculateCentre
.8208	a2 02		ldx #$02			ldx 	#2
.820a	20 38 82	jsr $8238			jsr 	_GXCalculateCentre
.820d	9c 41 06	stz $0641			stz 	gX
.8210	ad 40 06	lda $0640			lda 	gRadius
.8213	8d 42 06	sta $0642			sta 	gY
.8216	0a		asl a				asl 	a 							; R x 2
.8217	85 36		sta $36				sta 	gzTemp0
.8219	38		sec				sec
.821a	a9 03		lda #$03			lda 	#3
.821c	e5 36		sbc $36				sbc 	gzTemp0
.821e	85 38		sta $38				sta 	gzTemp1
.8220	a9 00		lda #$00			lda 	#0
.8222	e9 00		sbc #$00			sbc 	#0
.8224	85 39		sta $39				sta 	gzTemp1+1
.8226	a2 00		ldx #$00			ldx 	#0
.8228	20 97 a6	jsr $a697			jsr 	Int32Divide
.822b	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.822e	8d 45 06	sta $0645			sta 	gxScalar
.8231	ad 12 04	lda $0412			lda 	NSMantissa1+2
.8234	8d 46 06	sta $0646			sta 	gxScalar+1
.8237	60		rts				rts
.8238					_GXCalculateCentre:
.8238	38		sec				sec
.8239	bd 35 06	lda $0635,x			lda 	gxX1,x
.823c	7d 31 06	adc $0631,x			adc 	gXX0,x
.823f	9d 35 06	sta $0635,x			sta 	gXX1,x
.8242	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8245	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8248	4a		lsr a				lsr 	a
.8249	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.824c	7e 35 06	ror $0635,x			ror 	gXX1,x
.824f	60		rts				rts
.8250					GXScaleZTemp0:
.8250	a2 00		ldx #$00			ldx 	#0
.8252	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.8255	e8		inx				inx
.8256	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.8259	a5 36		lda $36				lda 	gzTemp0
.825b	8d 08 04	sta $0408			sta 	NSMantissa0
.825e	a5 37		lda $37				lda 	gzTemp0+1
.8260	8d 10 04	sta $0410			sta 	NSMantissa1
.8263	ad 45 06	lda $0645			lda 	gxScalar
.8266	8d 09 04	sta $0409			sta 	NSMantissa0+1
.8269	ad 46 06	lda $0646			lda 	gxScalar+1
.826c	8d 11 04	sta $0411			sta 	NSMantissa1+1
.826f	a2 00		ldx #$00			ldx		#0
.8271	20 0f a7	jsr $a70f			jsr 	MultiplyShort
.8274	ad 10 04	lda $0410			lda 	NSMantissa1
.8277	85 36		sta $36				sta 	gzTemp0
.8279	ad 18 04	lda $0418			lda 	NSMantissa2
.827c	85 37		sta $37				sta 	gzTemp0+1
.827e	60		rts				rts
.0640					gRadius:
>0640							.fill 	1
.0641					gX:
>0641							.fill 	1
.0642					gY:
>0642							.fill 	1
.0643					gIsFillMode:
>0643							.fill 	1
.0644					gYChanged:
>0644							.fill  	1
.0645					gxScalar:
>0645							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.827f					GXLine:
.827f	20 2e 85	jsr $852e			jsr 	GXOpenBitmap
.8282	20 d5 85	jsr $85d5			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8285	20 4a 83	jsr $834a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8288	20 4c 85	jsr $854c			jsr 	GXPositionCalc 				; calculate position/offset.
.828b					_GXDrawLoop:
.828b	ac 3f 06	ldy $063f			ldy 	gsOffset 					; draw the pixel
.828e	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.8290	2d 3c 06	and $063c			and 	gxANDValue
.8293	4d 3b 06	eor $063b			eor 	gxEORValue
.8296	91 3a		sta ($3a),y			sta 	(gsTemp),y
.8298	20 a6 82	jsr $82a6			jsr 	GXLineIsComplete 			; is the line complete ?
.829b	f0 05		beq $82a2			beq 	_GXLExit
.829d	20 c1 82	jsr $82c1			jsr 	GXLineAdvance 				; code as per advance method
.82a0	80 e9		bra $828b			bra 	_GXDrawLoop
.82a2					_GXLExit:
.82a2	20 3f 85	jsr $853f			jsr 	GXCloseBitmap
.82a5	60		rts				rts
.82a6					GXLineIsComplete:
.82a6	ad 48 06	lda $0648			lda 	GXIsDiffYLarger 			; is dy larger
.82a9	d0 0f		bne $82ba			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.82ab	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.82ae	4d 35 06	eor $0635			eor 	GXX1
.82b1	d0 06		bne $82b9			bne 	_GXLICExit
.82b3	ad 32 06	lda $0632			lda 	GXX0+1
.82b6	4d 36 06	eor $0636			eor 	GXX1+1
.82b9					_GXLICExit:
.82b9	60		rts				rts
.82ba					_GXLICCompareY:
.82ba	ad 37 06	lda $0637			lda 	GXY1
.82bd	4d 33 06	eor $0633			eor 	GXY0
.82c0	60		rts				rts
.82c1					GXLineAdvance:
.82c1	18		clc				clc 								; add adjust to position
.82c2	ad 4a 06	lda $064a			lda 	GXPosition
.82c5	6d 4b 06	adc $064b			adc 	GXAdjust
.82c8	8d 4a 06	sta $064a			sta 	GXPosition
.82cb	9c 4d 06	stz $064d			stz 	GXAddSelect 				; clear add select flag
.82ce	b0 05		bcs $82d5			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.82d0	cd 4c 06	cmp $064c			cmp 	GXTotal 					; if exceeded total
.82d3	90 0a		bcc $82df			bcc 	_GXLANoExtra
.82d5					_GXLAOverflow:
.82d5	ce 4d 06	dec $064d			dec 	GXAddSelect 				; set addselect to $FF
.82d8	38		sec				sec 								; subtract total and write back
.82d9	ed 4c 06	sbc $064c			sbc 	GXTotal
.82dc	8d 4a 06	sta $064a			sta 	GXPosition
.82df					_GXLANoExtra:
.82df	ad 48 06	lda $0648			lda 	GXIsDiffYLarger
.82e2	f0 0d		beq $82f1			beq 	_GXDXLarger
.82e4	20 43 83	jsr $8343			jsr 	GXIncrementY
.82e7	ad 4d 06	lda $064d			lda 	GXAddSelect
.82ea	f0 10		beq $82fc			beq 	_GXLAExit
.82ec	20 fd 82	jsr $82fd			jsr 	GXAdjustX
.82ef	80 0b		bra $82fc			bra 	_GXLAExit
.82f1					_GXDXLarger:
.82f1	20 fd 82	jsr $82fd			jsr 	GXAdjustX
.82f4	ad 4d 06	lda $064d			lda 	GXAddSelect
.82f7	f0 03		beq $82fc			beq 	_GXLAExit
.82f9	20 43 83	jsr $8343			jsr 	GXIncrementY
.82fc					_GXLAExit:
.82fc	60		rts				rts
.82fd					GXAdjustX:
.82fd	ad 49 06	lda $0649			lda 	GXDXNegative
.8300	10 25		bpl $8327			bpl 	_GXAXRight
.8302	ad 31 06	lda $0631			lda 	GXX0
.8305	d0 03		bne $830a			bne 	_GXAXNoBorrow
.8307	ce 32 06	dec $0632			dec 	GXX0+1
.830a					_GXAXNoBorrow:
.830a	ce 31 06	dec $0631			dec 	GXX0
.830d	ce 3f 06	dec $063f			dec 	gsOffset 					; pixel left
.8310	ad 3f 06	lda $063f			lda 	gsOffset
.8313	c9 ff		cmp #$ff			cmp 	#$FF
.8315	d0 0f		bne $8326			bne 	_GXAYExit 					; underflow
.8317	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.8319	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.831b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.831d	b0 07		bcs $8326			bcs 	_GXAYExit
.831f	18		clc				clc
.8320	69 20		adc #$20			adc 	#$20 						; fix up
.8322	85 3b		sta $3b				sta 	gsTemp+1
.8324	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.8326					_GXAYExit:
.8326	60		rts				rts
.8327					_GXAXRight:
.8327	ee 31 06	inc $0631			inc 	GXX0
.832a	d0 03		bne $832f			bne 	_GXAXNoCarry
.832c	ee 32 06	inc $0632			inc 	GXX0+1
.832f					_GXAXNoCarry:
.832f	ee 3f 06	inc $063f			inc 	gsOffset 					; pixel right
.8332	d0 0e		bne $8342			bne 	_GXAXExit 					; if not overflowed, exit.
.8334	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.8336	a5 3b		lda $3b				lda 	gsTemp+1
.8338	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.833a	90 06		bcc $8342			bcc 	_GXAXExit
.833c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.833e	85 3b		sta $3b				sta 	gsTemp+1
.8340	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.8342					_GXAXExit:
.8342	60		rts				rts
.8343					GXIncrementY:
.8343	ee 33 06	inc $0633			inc 	GXY0
.8346	20 9c 85	jsr $859c			jsr 	GXMovePositionDown
.8349	60		rts				rts
.834a					GXLineSetup:
.834a	ad 37 06	lda $0637			lda 	GXY1
.834d	38		sec				sec
.834e	ed 33 06	sbc $0633			sbc 	GXY0
.8351	4a		lsr a				lsr 	a
.8352	8d 47 06	sta $0647			sta 	GXDiffY
.8355	9c 49 06	stz $0649			stz 	GXDXNegative 				; clear -ve flag
.8358	38		sec				sec
.8359	ad 35 06	lda $0635			lda 	GXX1
.835c	ed 31 06	sbc $0631			sbc 	GXX0
.835f	8d 46 06	sta $0646			sta 	GXDiffX
.8362	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8365	ed 32 06	sbc $0632			sbc 	GXX0+1
.8368	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8369	6e 46 06	ror $0646			ror 	GXDiffX
.836c	0a		asl a				asl 	a
.836d	10 0c		bpl $837b			bpl 	_GDXNotNegative
.836f	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8371	38		sec				sec
.8372	ed 46 06	sbc $0646			sbc 	GXDiffX
.8375	8d 46 06	sta $0646			sta 	GXDiffX
.8378	ce 49 06	dec $0649			dec 	GXDXNegative 				; -ve flag = $FF.
.837b					_GDXNotNegative:
.837b	9c 48 06	stz $0648			stz 	GXIsDiffYLarger 			; clear larger flag
.837e	ad 47 06	lda $0647			lda 	GXDiffY 					; set adjust and total.
.8381	8d 4b 06	sta $064b			sta 	GXAdjust
.8384	ad 46 06	lda $0646			lda 	GXDiffX
.8387	8d 4c 06	sta $064c			sta 	GXTotal
.838a	ad 47 06	lda $0647			lda 	GXDiffY 					; if dy > dx
.838d	cd 46 06	cmp $0646			cmp 	GXDiffX
.8390	90 0f		bcc $83a1			bcc 	_GDXNotLarger
.8392	ce 48 06	dec $0648			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8395	ad 46 06	lda $0646			lda 	GXDiffX 					; set adjust and total other way round
.8398	8d 4b 06	sta $064b			sta 	GXAdjust
.839b	ad 47 06	lda $0647			lda 	GXDiffY
.839e	8d 4c 06	sta $064c			sta 	GXTotal
.83a1					_GDXNotLarger:
.83a1	ad 4c 06	lda $064c			lda 	GXTotal
.83a4	4a		lsr a				lsr 	a
.83a5	8d 4a 06	sta $064a			sta 	GXPosition
.83a8	60		rts				rts
.0646					GXDiffX:
>0646							.fill 	1
.0647					GXDiffY:
>0647							.fill 	1
.0648					GXIsDiffYLarger:
>0648							.fill 	1
.0649					GXDXNegative:
>0649							.fill 	1
.064a					GXPosition:
>064a							.fill 	1
.064b					GXAdjust:
>064b							.fill 	1
.064c					GXTotal:
>064c							.fill 	1
.064d					GXAddSelect:
>064d							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.83a9					GXFillRectangle:
.83a9	38		sec				sec
.83aa	80 01		bra $83ad			bra 	GXRectangle
.83ac					GXFrameRectangle:
.83ac	18		clc				clc
.83ad					GXRectangle:
.83ad	08		php				php 								; save Fill flag (CS)
.83ae	20 2e 85	jsr $852e			jsr 	GXOpenBitmap 				; start drawing
.83b1	20 b7 85	jsr $85b7			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.83b4	20 4c 85	jsr $854c			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.83b7	38		sec				sec 								; sec = Draw line
.83b8	20 e1 83	jsr $83e1			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.83bb	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.83be	cd 37 06	cmp $0637			cmp 	gxY1
.83c1	f0 19		beq $83dc			beq 	_GXRectangleExit
.83c3					_GXRectLoop:
.83c3	20 9c 85	jsr $859c			jsr 	GXMovePositionDown 			; down one.
.83c6	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.83c9	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.83cc	cd 37 06	cmp $0637			cmp 	gXY1
.83cf	f0 07		beq $83d8			beq 	_GXLastLine
.83d1	28		plp				plp 								; get flag back
.83d2	08		php				php
.83d3	20 e1 83	jsr $83e1			jsr 	GXDrawLineX1X0 				; draw horizontal line
.83d6	80 eb		bra $83c3			bra 	_GXRectLoop
.83d8					_GXLastLine:
.83d8	38		sec				sec
.83d9	20 e1 83	jsr $83e1			jsr 	GXDrawLineX1X0
.83dc					_GXRectangleExit:
.83dc	68		pla				pla 								; throw fill flag.
.83dd	20 3f 85	jsr $853f			jsr 	GXCloseBitmap 				; stop drawing and exit
.83e0	60		rts				rts
.83e1					GXDrawLineX1X0:
.83e1	08		php				php 								; save solid/either-end
.83e2	38		sec				sec
.83e3	ad 35 06	lda $0635			lda		gXX1
.83e6	ed 31 06	sbc $0631			sbc 	gXX0
.83e9	85 36		sta $36				sta 	gzTemp0
.83eb	ad 36 06	lda $0636			lda 	gXX1+1
.83ee	ed 32 06	sbc $0632			sbc 	gXX0+1
.83f1	85 37		sta $37				sta 	gzTemp0+1
.83f3	28		plp				plp
.83f4					GXDrawLineTemp0:
.83f4	a5 3a		lda $3a				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.83f6	48		pha				pha
.83f7	a5 3b		lda $3b				lda 	gsTemp+1
.83f9	48		pha				pha
.83fa	ad 3f 06	lda $063f			lda 	gsOffset
.83fd	48		pha				pha
.83fe	a5 0b		lda $0b				lda 	GFXEditSlot
.8400	48		pha				pha
.8401	ac 3f 06	ldy $063f			ldy 	gsOffset 					; Y offset
.8404	90 1e		bcc $8424			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8406					_GXDLTLine:
.8406	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.8408	2d 3c 06	and $063c			and 	gxANDValue
.840b	4d 3b 06	eor $063b			eor 	gxEORValue
.840e	91 3a		sta ($3a),y			sta 	(gsTemp),y
.8410	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.8412	d0 04		bne $8418			bne 	_GXDLTNoBorrow
.8414	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.8416	30 2e		bmi $8446			bmi 	_GXDLTExit
.8418					_GXDLTNoBorrow:
.8418	c6 36		dec $36				dec 	gzTemp0
.841a	c8		iny				iny 								; next slot.
.841b	d0 e9		bne $8406			bne 	_GXDLTLine
.841d	e6 3b		inc $3b				inc 	gsTemp+1 					; carry to next
.841f	20 54 84	jsr $8454			jsr 	_GXDLTCheckWrap				; check for new page.
.8422	80 e2		bra $8406			bra 	_GXDLTLine
.8424					_GXDLTEndPoints:
.8424	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.8426	2d 3c 06	and $063c			and 	gxANDValue
.8429	4d 3b 06	eor $063b			eor 	gxEORValue
.842c	91 3a		sta ($3a),y			sta 	(gsTemp),y
.842e	98		tya				tya 								; advance to right side
.842f	18		clc				clc
.8430	65 36		adc $36				adc 	gzTemp0
.8432	a8		tay				tay
.8433	a5 3b		lda $3b				lda 	gsTemp+1
.8435	65 37		adc $37				adc 	gzTemp0+1
.8437	85 3b		sta $3b				sta 	gsTemp+1
.8439	20 54 84	jsr $8454			jsr 	_GXDLTCheckWrap 			; fix up.
.843c	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel on the right
.843e	2d 3c 06	and $063c			and 	gxANDValue
.8441	4d 3b 06	eor $063b			eor 	gxEORValue
.8444	91 3a		sta ($3a),y			sta 	(gsTemp),y
.8446					_GXDLTExit:
.8446	68		pla				pla
.8447	85 0b		sta $0b				sta 	GFXEditSlot
.8449	68		pla				pla
.844a	8d 3f 06	sta $063f			sta 	gsOffset
.844d	68		pla				pla
.844e	85 3b		sta $3b				sta 	gsTemp+1
.8450	68		pla				pla
.8451	85 3a		sta $3a				sta 	gsTemp
.8453	60		rts				rts
.8454					_GXDLTCheckWrap:
.8454	a5 3b		lda $3b				lda 	gsTemp+1 					; check end of page
.8456	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8458	90 06		bcc $8460			bcc 	_GXDLTCWExit
.845a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.845c	85 3b		sta $3b				sta 	gsTemp+1
.845e	e6 0b		inc $0b				inc 	GFXEditSlot
.8460					_GXDLTCWExit:
.8460	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.8461					GraphicDraw:
.8461	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8463	b0 06		bcs $846b			bcs 	_GDCoordinate
.8465	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.8467	84 37		sty $37				sty 	gzTemp0+1
.8469	80 2c		bra $8497			bra 	_GDExecuteA 				; and execute
.846b					_GDCoordinate:
.846b	48		pha				pha 								; save AXY
.846c	da		phx				phx
.846d	5a		phy				phy
.846e	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8470					_GDCopy1:
.8470	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8473	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.8476	ca		dex				dex
.8477	10 f7		bpl $8470			bpl 	_GDCopy1
.8479	68		pla				pla 								; update Y
.847a	8d 2b 06	sta $062b			sta 	gxCurrentY
.847d	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.8480	68		pla				pla
.8481	8d 29 06	sta $0629			sta 	gxCurrentX
.8484	68		pla				pla 								; get A (command+X.1) back
.8485	48		pha				pha
.8486	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.8488	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.848b	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.848d					_GDCopy2:
.848d	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8490	9d 31 06	sta $0631,x			sta 	gxX0,x
.8493	ca		dex				dex
.8494	10 f7		bpl $848d			bpl 	_GDCopy2
.8496	68		pla				pla 								; get command back
.8497					_GDExecuteA:
.8497	29 fe		and #$fe			and 	#$FE 						; lose LSB
.8499	aa		tax				tax
.849a	7c 9e 84	jmp ($849e,x)			jmp 	(GDVectors,x)
.849d					GXMove:
.849d	60		rts				rts
.849e					GDVectors:
>849e							.fill 	2 							; $00 		; Open/Close Bitmap
>84a0	84 80						.word 	GXClearBitmap 				; $01 	  	: Clear Bitmap to X
>84a2							.fill 	14*2 						; $02-$0F 	: Reserved
>84be	9d 84						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>84c0	7f 82						.word 	GXLine 						; $11 		: Draw line
>84c2	ac 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>84c4	a9 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>84c6	d2 80						.word 	GXFrameEllipse 				; $14 		; Framed ellipse
>84c8	ce 80						.word 	GXFillEllipse 				; $15 		; Filled ellipse

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.84ca					RunDemos:
.84ca	64 01		stz $01				stz 	1
.84cc	a9 0f		lda #$0f			lda 	#$0F
.84ce	8d 00 d0	sta $d000			sta 	$D000
.84d1	a9 01		lda #$01			lda 	#1
.84d3	8d 00 d1	sta $d100			sta 	$D100
.84d6	9c 01 d1	stz $d101			stz 	$D101
.84d9	9c 02 d1	stz $d102			stz 	$D102
.84dc	a9 02		lda #$02			lda 	#2
.84de	8d 03 d1	sta $d103			sta 	$D103
.84e1	a9 10		lda #$10			lda 	#16
.84e3	8d 39 06	sta $0639			sta 	gxBasePage
.84e6	a9 f0		lda #$f0			lda 	#240
.84e8	8d 3a 06	sta $063a			sta 	gxHeight
.84eb	a9 fc		lda #$fc			lda 	#$FC
.84ed	8d 3b 06	sta $063b			sta 	gxEORValue
.84f0	a9 ff		lda #$ff			lda 	#$FF
.84f2	8d 3c 06	sta $063c			sta 	gxANDValue
.84f5					loop:
.84f5	a9 02		lda #$02			lda 	#((1)*2)+(((4) >> 8) & 1)
.84f7	a2 04		ldx #$04			ldx 	#((4) & $FF)
.84f9	a0 00		ldy #$00			ldy 	#(0)
.84fb	20 61 84	jsr $8461			jsr 	GraphicDraw
.84fe	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8500	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.8502	a0 0a		ldy #$0a			ldy 	#(10)
.8504	20 61 84	jsr $8461			jsr 	GraphicDraw
.8507	a9 2b		lda #$2b			lda 	#((21)*2)+(((300) >> 8) & 1)
.8509	a2 2c		ldx #$2c			ldx 	#((300) & $FF)
.850b	a0 c8		ldy #$c8			ldy 	#(200)
.850d	20 61 84	jsr $8461			jsr 	GraphicDraw
.8510	a9 24		lda #$24			lda 	#((18)*2)+(((10) >> 8) & 1)
.8512	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.8514	a0 0a		ldy #$0a			ldy 	#(10)
.8516	20 61 84	jsr $8461			jsr 	GraphicDraw
.8519	60		rts				rts
.851a	20 36 9c	jsr $9c36	demo:	jsr 	Random32Bit
.851d	ee 3b 06	inc $063b			inc 	gxEORValue
.8520	a9 2a		lda #$2a			lda 	#21*2
.8522	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8525	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8528	20 61 84	jsr $8461			jsr 	GraphicDraw
.852b	80 ed		bra $851a			bra 	demo
.852d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.852e					GXOpenBitmap:
.852e	78		sei				sei 								; no interrupts here
.852f	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8531	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.8534	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.8536	85 00		sta $00				sta 	0
.8538	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.853a	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.853d	58		cli				cli
.853e	60		rts				rts
.853f					GXCloseBitmap:
.853f	78		sei				sei
.8540	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8543	85 0b		sta $0b				sta 	GFXEditSlot
.8545	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8548	85 00		sta $00				sta 	0
.854a	58		cli				cli
.854b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.854c					GXPositionCalc:
.854c	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.854f	85 3a		sta $3a				sta 	gsTemp
.8551	64 3b		stz $3b				stz 	gsTemp+1
.8553	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.8555	26 3b		rol $3b				rol 	gsTemp+1
.8557	06 3a		asl $3a				asl 	gsTemp
.8559	26 3b		rol $3b				rol 	gsTemp+1
.855b	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.855c	65 3a		adc $3a				adc 	gsTemp
.855e	85 3a		sta $3a				sta 	gsTemp
.8560	90 02		bcc $8564			bcc 	_GXPCNoCarry
.8562	e6 3b		inc $3b				inc 	gsTemp+1
.8564					_GXPCNoCarry:
.8564	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8566	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8568	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.856a	85 36		sta $36				sta 	gzTemp0
.856c	64 3b		stz $3b				stz 	gsTemp+1
.856e	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8570					_GXPCMultiply32:
.8570	06 3a		asl $3a				asl 	gsTemp
.8572	26 3b		rol $3b				rol 	gsTemp+1
.8574	3a		dec a				dec 	a
.8575	d0 f9		bne $8570			bne 	_GXPCMultiply32
.8577	18		clc				clc
.8578	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.857b	65 3a		adc $3a				adc 	gsTemp
.857d	8d 3f 06	sta $063f			sta 	gsOffset
.8580	ad 32 06	lda $0632			lda 	GXX0+1
.8583	65 3b		adc $3b				adc 	gsTemp+1
.8585	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8587	90 04		bcc $858d			bcc 	_GXPCNoOverflow
.8589	29 1f		and #$1f			and 	#$1F 						; fix it up
.858b	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.858d					_GXPCNoOverflow:
.858d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.858f	85 3b		sta $3b				sta 	gsTemp+1
.8591	64 3a		stz $3a				stz 	gsTemp
.8593	18		clc				clc
.8594	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.8596	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8599	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.859b	60		rts				rts
.859c					GXMovePositionDown:
.859c	18		clc				clc 								; add 320 to offset/temp+1
.859d	ad 3f 06	lda $063f			lda 	gsOffset
.85a0	69 40		adc #$40			adc 	#64
.85a2	8d 3f 06	sta $063f			sta 	gsOffset
.85a5	a5 3b		lda $3b				lda 	gsTemp+1
.85a7	69 01		adc #$01			adc 	#1
.85a9	85 3b		sta $3b				sta 	gsTemp+1
.85ab	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.85ad	90 07		bcc $85b6			bcc 	_GXMPDExit
.85af	38		sec				sec  								; next page
.85b0	e9 20		sbc #$20			sbc 	#$20
.85b2	85 3b		sta $3b				sta 	gsTemp+1
.85b4	e6 0b		inc $0b				inc 	GFXEditSlot
.85b6					_GXMPDExit:
.85b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.85b7					GXSortXY:
.85b7	20 d5 85	jsr $85d5			jsr 	GXSortY 					; will be sorted on Y now
.85ba	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.85bd	cd 35 06	cmp $0635			cmp 	gxX1
.85c0	ad 32 06	lda $0632			lda 	gXX0+1
.85c3	ed 36 06	sbc $0636			sbc 	gXX1+1
.85c6	90 0c		bcc $85d4			bcc 	_GXSXYExit 					; X0 < X1 exit
.85c8	a2 00		ldx #$00			ldx 	#0 							; swap them over
.85ca	a0 04		ldy #$04			ldy 	#4
.85cc	20 e9 85	jsr $85e9			jsr 	GXSwapXY
.85cf	e8		inx				inx
.85d0	c8		iny				iny
.85d1	20 e9 85	jsr $85e9			jsr 	GXSwapXY
.85d4					_GXSXYExit:
.85d4	60		rts				rts
.85d5					GXSortY:
.85d5	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.85d8	cd 37 06	cmp $0637			cmp 	gxY1
.85db	90 0b		bcc $85e8			bcc 	_GXSYSorted
.85dd	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.85df	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.85e1					_GXSwap1:
.85e1	20 e9 85	jsr $85e9			jsr 	GXSwapXY
.85e4	88		dey				dey
.85e5	ca		dex				dex
.85e6	10 f9		bpl $85e1			bpl 	_GXSwap1
.85e8					_GXSYSorted:
.85e8	60		rts				rts
.85e9					GXSwapXY:
.85e9	bd 31 06	lda $0631,x			lda 	gxX0,x
.85ec	48		pha				pha
.85ed	b9 31 06	lda $0631,y			lda 	gxX0,y
.85f0	9d 31 06	sta $0631,x			sta 	gxX0,x
.85f3	68		pla				pla
.85f4	99 31 06	sta $0631,y			sta 	gxX0,y
.85f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.85f8					AssembleGroup1:
.85f8	a9 ff		lda #$ff			lda 	#$FF
.85fa	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.85fd	80 02		bra $8601			bra 	AsmGroup12
.85ff					AssembleGroup2:
.85ff	a5 00		lda $00				lda 	$00
.8601					AsmGroup12:
.8601	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8604	68		pla				pla 								; pop the return address to access the information following.
.8605	fa		plx				plx
.8606	20 8f 86	jsr $868f			jsr 	AccessParameters 			; get opcode and save as base
.8609	8d a4 04	sta $04a4			sta 	BaseOpcode
.860c	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.860f	d0 08		bne $8619			bne 	_AG12HaveMask
.8611	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8613	20 97 86	jsr $8697			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8616	8d a5 04	sta $04a5			sta 	ModeMask
.8619					_AG12HaveMask:
.8619	20 d2 87	jsr $87d2			jsr 	TypeAndCalculateOperand 	; get zero page type
.861c	da		phx				phx 								; save found address mode
.861d	20 fb 86	jsr $86fb			jsr 	AssembleModeX
.8620	fa		plx				plx  								; restore address mode
.8621	b0 0b		bcs $862e			bcs 	_AG12Exit
.8623	20 2f 86	jsr $862f			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8626	20 fb 86	jsr $86fb			jsr 	AssembleModeX
.8629	b0 03		bcs $862e			bcs 	_AG12Exit
.862b	4c ec ab	jmp $abec			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.862e					_AG12Exit:
.862e	60		rts				rts
.862f					PromoteToAbsolute:
.862f	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8631	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8633	f0 19		beq $864e			beq 	_PTADo
.8635	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8637	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8639	f0 13		beq $864e			beq 	_PTADo
.863b	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.863d	e0 80		cpx #$80			cpx 	#AM_ZEROY
.863f	f0 0d		beq $864e			beq 	_PTADo
.8641	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8643	e0 d1		cpx #$d1			cpx 	#AM_IND
.8645	f0 07		beq $864e			beq 	_PTADo
.8647	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8649	e0 c0		cpx #$c0			cpx 	#AM_INDX
.864b	f0 01		beq $864e			beq 	_PTADo
.864d	60		rts				rts
.864e					_PTADo:
.864e	aa		tax				tax
.864f	60		rts				rts
.8650					AssembleGroup3:
.8650	68		pla				pla 								; get parameters, which is just the opcode.
.8651	fa		plx				plx
.8652	20 8f 86	jsr $868f			jsr 	AccessParameters 			; get and output opcode
.8655	20 a7 86	jsr $86a7			jsr 	AssemblerWriteByte
.8658	20 36 88	jsr $8836			jsr 	CalculateOperand 			; get a 16 bit operand
.865b	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.865e	38		sec				sec
.865f	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8662	48		pha				pha 								; LSB in A
.8663	ad 10 04	lda $0410			lda 	NSMantissa1
.8666	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8669	aa		tax				tax 								; MSB in X
.866a	68		pla				pla
.866b	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.866c	69 7f		adc #$7f			adc 	#$7F
.866e	90 01		bcc $8671			bcc 	_AG3NoCarry
.8670	e8		inx				inx
.8671					_AG3NoCarry:
.8671	38		sec				sec 								; fix back and write out anyways.
.8672	e9 80		sbc #$80			sbc 	#$80
.8674	20 a7 86	jsr $86a7			jsr 	AssemblerWriteByte
.8677	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8679	f0 0a		beq $8685			beq 	_AG3Exit
.867b	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.867e	29 01		and #$01			and 	#1
.8680	f0 03		beq $8685			beq 	_AG3Exit
.8682	4c f1 ab	jmp $abf1			jmp 	RangeError 					; no, branch is out of range
.8685					_AG3Exit:
.8685	60		rts				rts
.8686					AssembleGroup4:
.8686	68		pla				pla 								; pop address
.8687	fa		plx				plx
.8688	20 8f 86	jsr $868f			jsr 	AccessParameters 			; access and get first
.868b	20 a7 86	jsr $86a7			jsr 	AssemblerWriteByte 			; output it.
.868e	60		rts				rts
.868f					AccessParameters:
.868f	8d a1 04	sta $04a1			sta 	ParamStart
.8692	8e a2 04	stx $04a2			stx 	ParamStart+1
.8695	a9 01		lda #$01			lda 	#1
.8697					GetParameter:
.8697	5a		phy				phy
.8698	a8		tay				tay
.8699	ad a1 04	lda $04a1			lda 	ParamStart
.869c	85 36		sta $36				sta 	zTemp0
.869e	ad a2 04	lda $04a2			lda 	ParamStart+1
.86a1	85 37		sta $37				sta 	zTemp0+1
.86a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.86a5	7a		ply				ply
.86a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.86a7					AssemblerWriteByte:
.86a7	48		pha			pha
.86a8	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.86ab	29 02		and #$02		and 	#2
.86ad	f0 1b		beq $86ca		beq 	_AWBNoPrint
.86af	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.86b2	20 e5 86	jsr $86e5		jsr 	PrintHex
.86b5	ad 9e 04	lda $049e		lda		AssemblerAddress
.86b8	20 e5 86	jsr $86e5		jsr 	PrintHex
.86bb	a9 20		lda #$20		lda 	#' '
.86bd	20 90 ad	jsr $ad90		jsr 	EXTPrintCharacter
.86c0	68		pla			pla 									; print byte
.86c1	48		pha			pha
.86c2	20 e5 86	jsr $86e5		jsr 	PrintHex
.86c5	a9 0d		lda #$0d		lda 	#13
.86c7	20 90 ad	jsr $ad90		jsr 	EXTPrintCharacter
.86ca					_AWBNoPrint:
.86ca	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.86cd	85 36		sta $36			sta 	zTemp0
.86cf	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.86d2	f0 0e		beq $86e2		beq 	_AWBRange
.86d4	85 37		sta $37			sta 	zTemp0+1
.86d6	68		pla			pla 									; write byte out
.86d7	92 36		sta ($36)		sta 	(zTemp0)
.86d9	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.86dc	d0 03		bne $86e1		bne 	_AWBNoCarry
.86de	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.86e1					_AWBNoCarry:
.86e1	60		rts			rts
.86e2					_AWBRange:
.86e2	4c f1 ab	jmp $abf1		jmp 	RangeError
.86e5					PrintHex:
.86e5	48		pha				pha
.86e6	4a		lsr a				lsr 	a
.86e7	4a		lsr a				lsr 	a
.86e8	4a		lsr a				lsr 	a
.86e9	4a		lsr a				lsr 	a
.86ea	20 ee 86	jsr $86ee			jsr 	_PrintNibble
.86ed	68		pla				pla
.86ee					_PrintNibble:
.86ee	29 0f		and #$0f			and 	#15
.86f0	c9 0a		cmp #$0a			cmp 	#10
.86f2	90 02		bcc $86f6			bcc 	_NoShift
.86f4	69 06		adc #$06			adc 	#6
.86f6					_NoShift:
.86f6	69 30		adc #$30			adc 	#48
.86f8	4c 90 ad	jmp $ad90			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.86fb					AssembleModeX:
.86fb	5a		phy				phy
.86fc	ad a3 04	lda $04a3			lda 	IsGroup1
.86ff	f0 17		beq $8718			beq 	_AMXGroup2
.8701	8a		txa				txa 							; is it in group # 1
.8702	29 40		and #$40			and 	#AM_ISG1
.8704	f0 50		beq $8756			beq 	_AMXFail 				; no, give up.
.8706	8a		txa				txa 							; get back.
.8707	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8709	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.870b	d0 22		bne $872f			bne 	_AMXHaveInfo
.870d	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8710	c9 81		cmp #$81			cmp 	#$81
.8712	f0 42		beq $8756			beq 	_AMXFail
.8714	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8716	80 17		bra $872f			bra 	_AMXHaveInfo 			; odd design decision there.
.8718					_AMXGroup2:
.8718	8a		txa				txa 							; is it in group 2 ?
.8719	29 20		and #$20			and 	#AM_ISG2
.871b	f0 39		beq $8756			beq 	_AMXFail 				; no, give up.
.871d	8a		txa				txa 							; get the offset into Y
.871e	29 1f		and #$1f			and 	#$1F
.8720	4a		lsr a				lsr 	a 						; make it 0-7.
.8721	4a		lsr a				lsr  	a
.8722	a8		tay				tay
.8723	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8726					_AMXCheckOkay:
.8726	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8727	88		dey				dey
.8728	10 fc		bpl $8726			bpl 	_AMXCheckOkay
.872a	90 2a		bcc $8756			bcc 	_AMXFail 				; not allowed.
.872c	8a		txa				txa  							; get mask back
.872d	29 1f		and #$1f			and 	#$1F
.872f					_AMXHaveInfo:
.872f	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8731	10 05		bpl $8738			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8733	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8736	d0 1e		bne $8756			bne 	_AMXFail
.8738					_AMXAnySize:
.8738	18		clc				clc 							; add offset to the base opcode
.8739	6d a4 04	adc $04a4			adc 	BaseOpcode
.873c					_AMXOutputCode:
.873c	20 a7 86	jsr $86a7			jsr 	AssemblerWriteByte 		; write the opcode out.
.873f	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8741	f0 10		beq $8753			beq 	_AMXExit
.8743	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8746	20 a7 86	jsr $86a7			jsr 	AssemblerWriteByte
.8749	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.874b	30 06		bmi $8753			bmi 	_AMXExit
.874d	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8750	20 a7 86	jsr $86a7			jsr 	AssemblerWriteByte
.8753					_AMXExit:
.8753	7a		ply				ply
.8754	38		sec				sec
.8755	60		rts				rts
.8756					_AMXFail:
.8756	a0 00		ldy #$00			ldy 	#0
.8758					_AMXCheckOddities:
.8758	8a		txa				txa
.8759	d9 81 87	cmp $8781,y			cmp 	ExtraOpcode+2,y 		; match address mode
.875c	d0 16		bne $8774			bne 	_AMXCONext
.875e	b9 7f 87	lda $877f,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8761	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8764	d0 0e		bne $8774			bne 	_AMXCONext
.8766	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8768	10 05		bpl $876f			bpl 	_AMXCONotZero
.876a	ad 10 04	lda $0410			lda 	NSMantissa1
.876d	d0 05		bne $8774			bne 	_AMXCONext
.876f					_AMXCONotZero:
.876f	b9 80 87	lda $8780,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8772	80 c8		bra $873c			bra 	_AMXOutputCode 			; and assemble it
.8774					_AMXCONext:
.8774	c8		iny				iny
.8775	c8		iny				iny
.8776	c8		iny				iny
.8777	b9 7f 87	lda $877f,y			lda 	ExtraOpcode+0,y 		; end of table
.877a	d0 dc		bne $8758			bne 	_AMXCheckOddities
.877c					_AMXCOFail:
.877c	7a		ply				ply
.877d	18		clc				clc
.877e	60		rts				rts
.877f					ExtraOpcode:
>877f	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8782	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8785	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8788	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>878b	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>878e	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8791	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8794	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8797	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>879a	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>879d	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.879e					LabelHere:
.879e	c8		iny				iny 								; skip .
.879f	a2 00		ldx #$00			ldx 	#0 							; get a term
.87a1	20 a7 99	jsr $99a7			jsr 	EvaluateTerm 				; get a term
.87a4	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.87a7	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.87a9	d0 24		bne $87cf			bne 	_ALType
.87ab	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.87ae	85 36		sta $36				sta 	zTemp0
.87b0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87b3	85 37		sta $37				sta 	zTemp0+1
.87b5	5a		phy				phy 								; copy address in.
.87b6	a0 01		ldy #$01			ldy 	#1
.87b8	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.87bb	92 36		sta ($36)			sta 	(zTemp0)
.87bd	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.87c0	91 36		sta ($36),y			sta 	(zTemp0),y
.87c2	c8		iny				iny
.87c3	a9 00		lda #$00			lda 	#0
.87c5	91 36		sta ($36),y			sta 	(zTemp0),y
.87c7	c8		iny				iny
.87c8	91 36		sta ($36),y			sta 	(zTemp0),y
.87ca	c8		iny				iny
.87cb	91 36		sta ($36),y			sta 	(zTemp0),y
.87cd	7a		ply				ply
.87ce	60		rts				rts
.87cf					_ALType:
.87cf	4c f6 ab	jmp $abf6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.87d2					TypeAndCalculateOperand:
.87d2	b1 30		lda ($30),y			lda 	(codePtr),y
.87d4	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.87d6	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87d8	f0 5b		beq $8835			beq 	_TACOExit
.87da	c9 80		cmp #$80			cmp 	#KWC_EOL
.87dc	f0 57		beq $8835			beq 	_TACOExit
.87de	c8		iny				iny
.87df	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.87e1	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.87e3	f0 51		beq $8836			beq 	CalculateOperand
.87e5	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.87e7	f0 1f		beq $8808			beq 	_TACOIndirect
.87e9	88		dey				dey 								; undo get of first character
.87ea	20 36 88	jsr $8836			jsr 	CalculateOperand 			; get operand
.87ed	b1 30		lda ($30),y			lda 	(codePtr),y
.87ef	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.87f1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87f3	d0 40		bne $8835			bne 	_TACOExit
.87f5	c8		iny				iny
.87f6	20 7d a5	jsr $a57d			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.87f9	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.87fb	c9 58		cmp #$58			cmp 	#'X'
.87fd	f0 36		beq $8835			beq 	_TACOExit
.87ff	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8801	c9 59		cmp #$59			cmp 	#'Y'
.8803	f0 30		beq $8835			beq 	_TACOExit
.8805					_TACOSyntax:
.8805	4c ec ab	jmp $abec			jmp 	SyntaxError
.8808					_TACOIndirect:
.8808	20 36 88	jsr $8836			jsr 	CalculateOperand 			; get the operand
.880b	b1 30		lda ($30),y			lda 	(codePtr),y
.880d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.880f	f0 17		beq $8828			beq 	_TACOIndX
.8811	20 06 a6	jsr $a606			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8814	b1 30		lda ($30),y			lda 	(codePtr),y
.8816	a2 d1		ldx #$d1			ldx 	#AM_IND
.8818	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.881a	d0 19		bne $8835			bne 	_TACOExit
.881c	c8		iny				iny
.881d	20 7d a5	jsr $a57d			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8820	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8822	d0 e1		bne $8805			bne 	_TACOSyntax
.8824	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8826	80 0d		bra $8835			bra 	_TACOExit
.8828					_TACOIndX:
.8828	c8		iny				iny
.8829	20 7d a5	jsr $a57d			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.882c	c9 58		cmp #$58			cmp 	#'X' 						; check X
.882e	d0 d5		bne $8805			bne 	_TACOSyntax
.8830	20 06 a6	jsr $a606			jsr 	CheckRightBracket			; check )
.8833	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8835					_TACOExit:
.8835	60		rts				rts
.8836					CalculateOperand:
.8836	48		pha				pha
.8837	da		phx				phx
.8838	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.883a	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger
.883d	fa		plx				plx
.883e	68		pla				pla
.883f	60		rts				rts
.a57d					TACOCheckXY:
.a57d	b1 30		lda ($30),y			lda 	(codePtr),y
.a57f	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a581	c9 40		cmp #$40			cmp 	#$40
.a583	d0 21		bne $a5a6			bne 	_TCXYFail
.a585	b1 30		lda ($30),y			lda 	(codePtr),y
.a587	18		clc				clc
.a588	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a58a	85 37		sta $37				sta 	zTemp0+1
.a58c	c8		iny				iny
.a58d	b1 30		lda ($30),y			lda 	(codePtr),y
.a58f	c8		iny				iny
.a590	85 36		sta $36				sta 	zTemp0
.a592	5a		phy				phy 								; save position
.a593	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a595	b1 36		lda ($36),y			lda 	(zTemp0),y
.a597	d0 0c		bne $a5a5			bne 	_TCXYPopFail
.a599	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a59b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a59d	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a59f	f0 08		beq $a5a9			beq 	_TCXYFound
.a5a1	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a5a3	f0 04		beq $a5a9			beq 	_TCXYFound
.a5a5					_TCXYPopFail:
.a5a5	7a		ply				ply
.a5a6					_TCXYFail:
.a5a6	a9 00		lda #$00			lda 	#0
.a5a8	60		rts				rts
.a5a9					_TCXYFound:
.a5a9	7a		ply				ply 								; restore position
.a5aa	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a5ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8840					EditProgramCode:
.8840	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8843	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8846	20 e4 9e	jsr $9ee4			jsr 	MemorySearch
.8849	90 05		bcc $8850			bcc 	_EPCNoDelete 				; reached the end don't delete
.884b	d0 03		bne $8850			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.884d	20 d4 ad	jsr $add4			jsr 	MemoryDeleteLine 			; delete the line
.8850					_EPCNoDelete:
.8850	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8853	c9 80		cmp #$80			cmp 	#KWC_EOL
.8855	f0 0d		beq $8864			beq 	_EPCNoInsert
.8857	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.885a	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.885d	20 e4 9e	jsr $9ee4			jsr 	MemorySearch
.8860	18		clc				clc 								; insert at this point.
.8861	20 0b ae	jsr $ae0b			jsr 	MemoryInsertLine 			; insert the line
.8864					_EPCNoInsert:
.8864	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8865					WarmStart:
.8865	a2 ff		ldx #$ff			ldx 	#$FF
.8867	9a		txs				txs
.8868	20 a6 ad	jsr $ada6			jsr 	EXTInputLine 				; get line to lineBuffer
.886b	20 fe a2	jsr $a2fe			jsr 	TokeniseLine 				; tokenise the line
.886e	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8871	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8874	d0 17		bne $888d			bne 	_WSEditCode 				; if so,edit code.
.8876	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8879	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.887b	85 30		sta $30				sta 	codePtr
.887d	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.887f	85 31		sta $31				sta 	codePtr+1
.8881	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8884	c9 80		cmp #$80			cmp 	#KWC_EOL
.8886	f0 dd		beq $8865			beq 	WarmStart
.8888	20 96 8e	jsr $8e96			jsr 	RUNCodePointerLine 			; execute that line.
.888b	80 d8		bra $8865			bra 	WarmStart
.888d					_WSEditCode:
.888d	20 40 88	jsr $8840			jsr 	EditProgramCode
.8890	20 fe 88	jsr $88fe			jsr 	ClearCommand
.8893	80 d0		bra $8865			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8895					AssembleCommand:
.8895	a2 00		ldx #$00			ldx 	#0
.8897	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger 		; start address
.889a	ad 08 04	lda $0408			lda 	NSMantissa0
.889d	8d 9e 04	sta $049e			sta 	AssemblerAddress
.88a0	ad 10 04	lda $0410			lda 	NSMantissa1
.88a3	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.88a6	20 0e a6	jsr $a60e			jsr 	CheckComma
.88a9	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger 		; options
.88ac	ad 08 04	lda $0408			lda 	NSMantissa0
.88af	8d a0 04	sta $04a0			sta 	AssemblerControl
.88b2	60		rts				rts
.88b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.88b4					AssertCommand:
.88b4	a2 00		ldx #$00			ldx 	#0
.88b6	20 fc 9d	jsr $9dfc			jsr 	EvaluateInteger 			; the assert test
.88b9	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; exit if result is non zero.
.88bc	d0 05		bne $88c3			bne 	_ACExit
.88be	a9 0a		lda #$0a		lda	#10
.88c0	4c cd 92	jmp $92cd		jmp	ErrorHandler
.88c3					_ACExit:
.88c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.88c4					CallCommand:
.88c4	a2 00		ldx #$00			ldx 	#0
.88c6	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger
.88c9					_CCClear
.88c9	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.88ca	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.88cd	e0 04		cpx #$04			cpx 	#4
.88cf	d0 f8		bne $88c9			bne 	_CCClear
.88d1	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.88d3					_CCCParam:
.88d3	b1 30		lda ($30),y			lda 	(codePtr),y
.88d5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88d7	d0 09		bne $88e2			bne 	_CCCRun6502
.88d9	c8		iny				iny 								; skip comma
.88da	e8		inx				inx	 								; next level
.88db	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.88de	e0 03		cpx #$03			cpx 	#3
.88e0	90 f1		bcc $88d3			bcc 	_CCCParam 					; done all 3 ?
.88e2					_CCCRun6502:
.88e2	5a		phy				phy 								; save position
.88e3	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.88e6	85 37		sta $37				sta 	zTemp0+1
.88e8	ad 08 04	lda $0408			lda 	NSMantissa0
.88eb	85 36		sta $36				sta 	zTemp0
.88ed	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.88f0	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.88f3	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.88f6	20 fb 88	jsr $88fb			jsr 	_CCCZTemp0 					; call zTemp0
.88f9	7a		ply				ply 								; restore position and exit
.88fa	60		rts				rts
.88fb					_CCCZTemp0:
.88fb	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.88fe					ClearCommand:
.88fe	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8900	85 36		sta $36				sta 	0+zTemp0
.8902	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8904	85 37		sta $37				sta 	1+zTemp0
.8906					_ClearZeroLoop:
.8906	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8908	f0 24		beq $892e			beq 	_ClearZeroEnd
.890a	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.890c	a9 00		lda #$00			lda 	#0
.890e					_ClearOneVariable:
.890e	91 36		sta ($36),y			sta 	(zTemp0),y
.8910	c8		iny				iny
.8911	c0 08		cpy #$08			cpy 	#8
.8913	d0 f9		bne $890e			bne 	_ClearOneVariable
.8915	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8917	b1 36		lda ($36),y			lda 	(zTemp0),y
.8919	c9 18		cmp #$18			cmp 	#NSTProcedure
.891b	d0 04		bne $8921			bne 	_ClearNotProcedure
.891d	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.891f	91 36		sta ($36),y			sta 	(zTemp0),y
.8921					_ClearNotProcedure:
.8921	18		clc				clc 								; go to the next variable
.8922	b2 36		lda ($36)			lda 	(zTemp0)
.8924	65 36		adc $36				adc 	zTemp0
.8926	85 36		sta $36				sta 	zTemp0
.8928	90 dc		bcc $8906			bcc 	_ClearZeroLoop
.892a	e6 37		inc $37				inc 	zTemp0+1
.892c	80 d8		bra $8906			bra 	_ClearZeroLoop
.892e					_ClearZeroEnd:
.892e	18		clc				clc
.892f	a5 36		lda $36				lda 	zTemp0
.8931	69 01		adc #$01			adc 	#1
.8933	8d 8c 04	sta $048c			sta 	lowMemPtr
.8936	a5 37		lda $37				lda 	zTemp0+1
.8938	69 00		adc #$00			adc 	#0
.893a	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.893d	20 9e 9f	jsr $9f9e			jsr 	StackReset
.8940	20 ee ae	jsr $aeee			jsr 	StringSystemInitialise
.8943	20 ed 91	jsr $91ed			jsr 	ProcedureScan
.8946	20 52 8e	jsr $8e52			jsr 	Command_Restore
.8949	9c 9e 04	stz $049e			stz 	AssemblerAddress
.894c	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.894f	9c a0 04	stz $04a0			stz 	AssemblerControl
.8952	20 94 9b	jsr $9b94			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8955	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8956					Command_Data:
.8956	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8958	a2 80		ldx #$80			ldx 	#KWC_EOL
.895a	20 3f 92	jsr $923f			jsr 	ScanForward
.895d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.895e					DimCommand:
.895e	b1 30		lda ($30),y			lda 	(codePtr),y
.8960	29 c0		and #$c0			and 	#$C0
.8962	c9 40		cmp #$40			cmp 	#$40
.8964	d0 7a		bne $89e0			bne 	_DCSyntax
.8966	b1 30		lda ($30),y			lda 	(codePtr),y
.8968	18		clc				clc
.8969	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.896b	85 3f		sta $3f				sta 	zaTemp+1
.896d	c8		iny				iny
.896e	b1 30		lda ($30),y			lda 	(codePtr),y
.8970	c8		iny				iny
.8971	85 3e		sta $3e				sta 	zaTemp
.8973	5a		phy				phy
.8974	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8976	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8978	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.897a	c9 18		cmp #$18			cmp 	#NSTProcedure
.897c	f0 62		beq $89e0			beq 	_DCSyntax
.897e	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8980	29 04		and #$04			and 	#NSBIsArray
.8982	f0 64		beq $89e8			beq 	_DCType
.8984	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8986	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8988	d0 59		bne $89e3			bne 	_DCRedefine
.898a	7a		ply				ply
.898b	20 eb 89	jsr $89eb			jsr 	_DCGetSize 				; get array size, check it.
.898e	5a		phy				phy
.898f	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8991	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8993	7a		ply				ply 							; is there a second (e.g. ,x)
.8994	b1 30		lda ($30),y			lda 	(codePtr),y
.8996	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8998	d0 0a		bne $89a4			bne 	_DCOneDimension
.899a	c8		iny				iny 							; skip comma
.899b	20 eb 89	jsr $89eb			jsr 	_DCGetSize 				; get 2nd array size
.899e	5a		phy				phy
.899f	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.89a1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.89a3	7a		ply				ply
.89a4					_DCOneDimension:
.89a4	5a		phy				phy 							; save position
.89a5	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.89a7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.89a9	aa		tax				tax
.89aa	c8		iny				iny
.89ab	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.89ad	e8		inx				inx 							; bump them.
.89ae	1a		inc a				inc 	a
.89af	20 88 aa	jsr $aa88			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.89b2	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.89b4	29 e0		and #$e0			and 	#$E0
.89b6	d0 23		bne $89db			bne 	_DCSize
.89b8	a0 02		ldy #$02			ldy 	#2 						; get base type
.89ba	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.89bc	20 f9 89	jsr $89f9			jsr 	ScaleByBaseType 		; scale by base type
.89bf	a5 36		lda $36				lda 	zTemp0
.89c1	a6 37		ldx $37				ldx 	zTemp0+1
.89c3	20 56 9b	jsr $9b56			jsr 	AllocateXABytes 		; allocate memory
.89c6	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.89c8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.89ca	c8		iny				iny
.89cb	8a		txa				txa
.89cc	91 3e		sta ($3e),y			sta 	(zaTemp),y
.89ce	7a		ply				ply 							; get position back
.89cf	20 06 a6	jsr $a606			jsr 	CheckRightBracket 		; check )
.89d2	b1 30		lda ($30),y			lda 	(codePtr),y
.89d4	c8		iny				iny 							; consume in case
.89d5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.89d7	f0 85		beq $895e			beq 	DimCommand
.89d9	88		dey				dey 							; undo consume
.89da	60		rts				rts
.89db					_DCSize:
.89db	a9 16		lda #$16		lda	#22
.89dd	4c cd 92	jmp $92cd		jmp	ErrorHandler
.89e0					_DCSyntax:
.89e0	4c ec ab	jmp $abec			jmp 	SyntaxError
.89e3					_DCRedefine:
.89e3	a9 15		lda #$15		lda	#21
.89e5	4c cd 92	jmp $92cd		jmp	ErrorHandler
.89e8					_DCType:
.89e8	4c f6 ab	jmp $abf6			jmp 	TypeError
.89eb					_DCGetSize:
.89eb	a2 00		ldx #$00			ldx 	#0 						; get first index.
.89ed	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger 	; get array dimension
.89f0	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.89f2	f0 e7		beq $89db			beq 	_DCSize
.89f4	c9 fe		cmp #$fe			cmp 	#254
.89f6	f0 e3		beq $89db			beq 	_DCSize
.89f8	60		rts				rts
.89f9					ScaleByBaseType:
.89f9	29 10		and #$10			and 	#NSBIsString 			; is it string
.89fb	d0 19		bne $8a16			bne 	_SBBTString
.89fd	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.89ff	48		pha				pha
.8a00	a5 36		lda $36				lda 	zTemp0
.8a02	48		pha				pha
.8a03	06 36		asl $36				asl 	zTemp0 					; x 2
.8a05	26 37		rol $37				rol 	zTemp0+1
.8a07	06 36		asl $36				asl 	zTemp0 					; x 4
.8a09	26 37		rol $37				rol 	zTemp0+1
.8a0b	68		pla				pla 							; add stacked value = x 5
.8a0c	65 36		adc $36				adc 	zTemp0
.8a0e	85 36		sta $36				sta 	zTemp0
.8a10	68		pla				pla
.8a11	65 37		adc $37				adc 	zTemp0+1
.8a13	85 37		sta $37				sta 	zTemp0+1
.8a15	60		rts				rts
.8a16					_SBBTString:
.8a16	06 36		asl $36				asl 	zTemp0
.8a18	26 37		rol $37				rol 	zTemp0+1
.8a1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8a1b					EndCommand:
.8a1b	4c 65 88	jmp $8865			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8a1e					ForCommand:
.8a1e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8a20	20 39 9f	jsr $9f39			jsr 	StackOpen
.8a23	a2 00		ldx #$00			ldx 	#0
.8a25	20 a7 99	jsr $99a7			jsr 	EvaluateTerm
.8a28	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8a2b	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8a2d	d0 49		bne $8a78			bne		_FCError
.8a2f	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8a31	20 16 a6	jsr $a616			jsr 	CheckNextA
.8a34	e8		inx				inx
.8a35	20 fc 9d	jsr $9dfc			jsr 	EvaluateInteger 			; <from> in +1
.8a38	b1 30		lda ($30),y			lda 	(codePtr),y
.8a3a	c8		iny				iny 								; consume it
.8a3b	48		pha				pha 								; save on stack for later
.8a3c	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8a3e	f0 04		beq $8a44			beq 	_FCNoSyntax
.8a40	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8a42	d0 37		bne $8a7b			bne 	_FCSyntaxError
.8a44					_FCNoSyntax:
.8a44	e8		inx				inx
.8a45	20 fc 9d	jsr $9dfc			jsr 	EvaluateInteger
.8a48	20 7d 9f	jsr $9f7d			jsr 	STKSaveCodePosition 		; save loop back position
.8a4b	68		pla				pla 								; restore DOWNTO or TO
.8a4c	5a		phy				phy 								; save Y on the stack
.8a4d	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8a4f	f0 02		beq $8a53			beq 	_FCNotDownTo
.8a51	a9 02		lda #$02			lda 	#2
.8a53					_FCNotDownTo:
.8a53	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8a54	a0 10		ldy #$10			ldy 	#16
.8a56	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8a58	a0 06		ldy #$06			ldy 	#6
.8a5a	ad 08 04	lda $0408			lda 	NSMantissa0
.8a5d	91 34		sta ($34),y			sta 	(basicStack),y
.8a5f	ad 10 04	lda $0410			lda 	NSMantissa1
.8a62	c8		iny				iny
.8a63	91 34		sta ($34),y			sta 	(basicStack),y
.8a65	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8a67	a2 01		ldx #$01			ldx 	#1
.8a69	20 7e 8a	jsr $8a7e			jsr 	FCIntegerToStack
.8a6c	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8a6e	a2 02		ldx #$02			ldx 	#2
.8a70	20 7e 8a	jsr $8a7e			jsr 	FCIntegerToStack
.8a73	20 9e 8a	jsr $8a9e			jsr 	CopyIndexToReference
.8a76	7a		ply				ply 								; restore position
.8a77	60		rts				rts
.8a78					_FCError:
.8a78	4c f6 ab	jmp $abf6			jmp 	TypeError
.8a7b					_FCSyntaxError:
.8a7b	4c ec ab	jmp $abec			jmp 	SyntaxError
.8a7e					FCIntegerToStack:
.8a7e	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8a81	10 03		bpl $8a86			bpl	 	_FCNotNegative
.8a83	20 3a 9e	jsr $9e3a			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8a86					_FCNotNegative:
.8a86	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8a89	91 34		sta ($34),y			sta 	(basicStack),y
.8a8b	c8		iny				iny
.8a8c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a8f	91 34		sta ($34),y			sta 	(basicStack),y
.8a91	c8		iny				iny
.8a92	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8a95	91 34		sta ($34),y			sta 	(basicStack),y
.8a97	c8		iny				iny
.8a98	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8a9b	91 34		sta ($34),y			sta 	(basicStack),y
.8a9d	60		rts				rts
.8a9e					CopyIndexToReference:
.8a9e	5a		phy				phy
.8a9f	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8aa1	38		sec				sec 								; (because we copy from offset 8)
.8aa2	b1 34		lda ($34),y			lda 	(basicStack),y
.8aa4	e9 08		sbc #$08			sbc 	#8
.8aa6	85 36		sta $36				sta 	zTemp0
.8aa8	c8		iny				iny
.8aa9	b1 34		lda ($34),y			lda 	(basicStack),y
.8aab	e9 00		sbc #$00			sbc 	#0
.8aad	85 37		sta $37				sta 	zTemp0+1
.8aaf	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ab1	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ab3	b1 34		lda ($34),y			lda 	(basicStack),y
.8ab5	0a		asl a				asl 	a 							; into carry
.8ab6	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ab8	90 14		bcc $8ace			bcc 	_CITRNormal
.8aba	38		sec				sec
.8abb					_CITRNegative:
.8abb	a9 00		lda #$00			lda 	#0
.8abd	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8abf	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac1	c8		iny				iny
.8ac2	ca		dex				dex
.8ac3	d0 f6		bne $8abb			bne 	_CITRNegative
.8ac5	88		dey				dey 								; look at MSB of mantissa
.8ac6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8ac8	09 80		ora #$80			ora 	#$80
.8aca	91 36		sta ($36),y			sta 	(zTemp0),y
.8acc	7a		ply				ply
.8acd	60		rts				rts
.8ace					_CITRNormal:
.8ace	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8ad0	91 36		sta ($36),y			sta 	(zTemp0),y
.8ad2	c8		iny				iny
.8ad3	ca		dex				dex
.8ad4	d0 f8		bne $8ace			bne 	_CITRNormal
.8ad6	7a		ply				ply 								; and exit.
.8ad7	60		rts				rts
.8ad8					NextCommand:
.8ad8	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8ada	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8adc	20 65 9f	jsr $9f65			jsr 	StackCheckFrame
.8adf	5a		phy				phy
.8ae0	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8ae2	b1 34		lda ($34),y			lda 	(basicStack),y
.8ae4	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8ae6	30 02		bmi $8aea			bmi 	_NCStepNeg
.8ae8	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8aea					_NCStepNeg:
.8aea	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8aec	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8aee	18		clc				clc
.8aef					_NCBump:
.8aef	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8af1	91 34		sta ($34),y			sta 	(basicStack),y
.8af3	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8af5	c8		iny				iny 								; next byte
.8af6	ca		dex				dex 								; do four times
.8af7	d0 f6		bne $8aef			bne 	_NCBump
.8af9	20 9e 8a	jsr $8a9e			jsr		CopyIndexToReference		; copy it to the reference variable.
.8afc	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8afe	b1 34		lda ($34),y			lda 	(basicStack),y
.8b00	0a		asl a				asl 	a 							; sign bit to carry
.8b01	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8b03	85 38		sta $38				sta 	zTemp1
.8b05	90 02		bcc $8b09			bcc 	_NCCompRev 					; use if step is +ve
.8b07	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8b09					_NCCompRev:
.8b09	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8b0b	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8b0d	85 39		sta $39				sta 	zTemp1+1
.8b0f	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8b11	38		sec				sec
.8b12					_NCCompare:
.8b12	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8b14	b1 34		lda ($34),y			lda 	(basicStack),y
.8b16	a4 39		ldy $39				ldy 	zTemp1+1
.8b18	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8b1a	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8b1c	e6 39		inc $39				inc 	zTemp1+1
.8b1e	ca		dex				dex 								; do it 4 times.
.8b1f	d0 f1		bne $8b12			bne 	_NCCompare
.8b21	50 02		bvc $8b25			bvc 	_NCNoOverflow 				; convert to signed comparison
.8b23	49 80		eor #$80			eor 	#$80
.8b25					_NCNoOverflow:
.8b25	7a		ply				ply 								; restore Y position
.8b26	0a		asl a				asl 	a 							; is bit 7 set.
.8b27	90 04		bcc $8b2d			bcc 	_NCLoopback 				; if no , >= so loop back
.8b29	20 57 9f	jsr $9f57			jsr 	StackClose 					; exit the loop
.8b2c	60		rts				rts
.8b2d					_NCLoopBack:
.8b2d	20 8e 9f	jsr $9f8e			jsr 	STKLoadCodePosition 		; loop back
.8b30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8b31					Command_GOSUB:
.8b31	a2 00		ldx #$00			ldx 	#0
.8b33	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8b36	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8b38	20 39 9f	jsr $9f39			jsr 	StackOpen 					; create frame
.8b3b	20 7d 9f	jsr $9f7d			jsr 	STKSaveCodePosition 		; save current position
.8b3e	4c 54 8b	jmp $8b54			jmp 	GotoStackX
.8b41					Command_RETURN:
.8b41	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8b43	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8b45	20 65 9f	jsr $9f65			jsr 	StackCheckFrame
.8b48	20 8e 9f	jsr $9f8e			jsr 	STKLoadCodePosition 		; restore code position
.8b4b	20 57 9f	jsr $9f57			jsr 	StackClose
.8b4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8b4f					GotoCommand:
.8b4f	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8b51	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger
.8b54					GotoStackX:
.8b54	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8b57	48		pha				pha 								; it is slightly inefficient, just in cases.
.8b58	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8b5b	fa		plx				plx
.8b5c	20 e4 9e	jsr $9ee4			jsr 	MemorySearch 				; transfer to line number AX.
.8b5f	90 05		bcc $8b66			bcc 	_GotoError 					; not found, off end.
.8b61	d0 03		bne $8b66			bne 	_GotoError 					; not found exactly
.8b63	4c 8f 8e	jmp $8e8f			jmp 	RunNewLine 					; and go straight to new line code.
.8b66					_GotoError:
.8b66	a9 0d		lda #$0d		lda	#13
.8b68	4c cd 92	jmp $92cd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8b6b					IfCommand:
.8b6b	a2 00		ldx #$00			ldx 	#0 							; If what.
.8b6d	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber
.8b70	b1 30		lda ($30),y			lda 	(codePtr),y
.8b72	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8b74	d0 0a		bne $8b80			bne 	_IFStructured
.8b76	c8		iny				iny 								; consume THEN
.8b77	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; is it zero
.8b7a	f0 01		beq $8b7d			beq 	_IfFail 					; if fail, go to next line
.8b7c	60		rts				rts 								; if THEN just continue
.8b7d					_IfFail:
.8b7d	4c f4 8e	jmp $8ef4			jmp 	EOLCommand
.8b80					_IfStructured:
.8b80	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; is it zero
.8b83	d0 07		bne $8b8c			bne 	_IfExit 					; if not, then continue normally.
.8b85	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8b87	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8b89	20 3f 92	jsr $923f			jsr 	ScanForward 				; and run from there/
.8b8c					_IfExit:
.8b8c	60		rts				rts
.8b8d					ElseCode:
.8b8d	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8b8f	aa		tax				tax 								; so just go to the structure exit
.8b90	20 3f 92	jsr $923f			jsr 	ScanForward
.8b93	60		rts				rts
.8b94					EndIf:
.8b94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b95					LetCommand:
.8b95	a2 00		ldx #$00			ldx 	#0
.8b97	b1 30		lda ($30),y			lda 	(codePtr),y
.8b99	c9 10		cmp #$10			cmp 	#KWD_AT
.8b9b	d0 16		bne $8bb3			bne 	_LCStandard
.8b9d	c8		iny				iny 								; skip equal
.8b9e	20 a7 99	jsr $99a7			jsr 	EvaluateTerm 				; get a number
.8ba1	20 eb 97	jsr $97eb			jsr 	Dereference 				; dereference it
.8ba4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8ba7	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8ba9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8bac	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bae	d0 10		bne $8bc0			bne 	_LCMain
.8bb0	4c f6 ab	jmp $abf6			jmp 	TypeError 					; was a reference before.
.8bb3					_LCStandard:
.8bb3	ad be 96	lda $96be			lda 	PrecedenceLevel+"*"			; precedence > this
.8bb6	20 d8 96	jsr $96d8			jsr 	EvaluateExpressionAtPrecedence
.8bb9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8bbc	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bbe	f0 0e		beq $8bce			beq 	_LetGoProc 					; it's a procedure call.
.8bc0					_LCMain:
.8bc0	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bc2	20 16 a6	jsr $a616			jsr 	CheckNextA
.8bc5	e8		inx				inx 								; RHS
.8bc6	20 d0 9d	jsr $9dd0			jsr 	EvaluateValue
.8bc9	ca		dex				dex
.8bca	20 d1 8b	jsr $8bd1			jsr 	AssignVariable
.8bcd	60		rts				rts
.8bce					_LetGoProc:
.8bce	4c 6a 8d	jmp $8d6a			jmp 	CallProcedure
.8bd1					AssignVariable:
.8bd1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bd4	48		pha				pha 								; save a copy
.8bd5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8bd8	29 10		and #$10			and 	#NSBIsString
.8bda	d0 0b		bne $8be7			bne 	_ASError
.8bdc	68		pla				pla 								; get back
.8bdd	29 10		and #$10			and 	#NSBIsString 				; check type
.8bdf	d0 03		bne $8be4			bne 	_ASString
.8be1	4c 13 97	jmp $9713			jmp 	AssignNumber
.8be4					_ASString:
.8be4	4c 81 97	jmp $9781			jmp 	AssignString
.8be7					_ASError:
.8be7	4c f6 ab	jmp $abf6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bea					Command_List:
.8bea	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8bed	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8bf0	a9 ff		lda #$ff			lda 	#$FF
.8bf2	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8bf5	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8bf8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bfa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bfc	f0 1e		beq $8c1c			beq 	_CLSecond
.8bfe	20 7a 8c	jsr $8c7a			jsr 	CLIsDigit 					; if not digit, list all
.8c01	b0 24		bcs $8c27			bcs 	_CLStart
.8c03	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c05	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger
.8c08	b1 30		lda ($30),y			lda 	(codePtr),y
.8c0a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c0c	f0 0e		beq $8c1c			beq 	_CLSecond 					; if so go get it
.8c0e	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8c11	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8c14	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8c17	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8c1a	80 0b		bra $8c27			bra 	_CLStart
.8c1c					_CLSecond:
.8c1c	c8		iny				iny 								; consume comma
.8c1d	20 7a 8c	jsr $8c7a			jsr 	CLIsDigit 					; digit found
.8c20	b0 05		bcs $8c27			bcs 	_CLStart 					; if not, continue listing
.8c22	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c24	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger
.8c27					_CLStart
.8c27	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c29	85 30		sta $30				sta 	codePtr
.8c2b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c2d	85 31		sta $31				sta 	codePtr+1
.8c2f					_CLLoop:
.8c2f	20 d1 ad	jsr $add1			jsr 	EXTBreakCheck 				; break check
.8c32	f0 30		beq $8c64			beq 	_CLExit
.8c34	b2 30		lda ($30)			lda 	(codePtr)
.8c36	f0 2c		beq $8c64			beq 	_CLExit
.8c38	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c3a	20 67 8c	jsr $8c67			jsr 	CLCompareLineNo
.8c3d	90 18		bcc $8c57			bcc 	_CLNext
.8c3f	a2 07		ldx #$07			ldx 	#7
.8c41	20 67 8c	jsr $8c67			jsr 	CLCompareLineNo
.8c44	f0 02		beq $8c48			beq 	_CLDoThisOne
.8c46	b0 0f		bcs $8c57			bcs 	_CLNext
.8c48					_CLDoThisOne:
.8c48	20 9b 90	jsr $909b			jsr 	ListConvertLine 			; convert line into token Buffer
.8c4b	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8c4d	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8c4f	20 26 93	jsr $9326			jsr 	PrintStringXA
.8c52	a9 0d		lda #$0d			lda 	#13 						; new line
.8c54	20 90 ad	jsr $ad90			jsr 	EXTPrintCharacter
.8c57					_CLNext:
.8c57	18		clc				clc
.8c58	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c5a	65 30		adc $30				adc 	codePtr
.8c5c	85 30		sta $30				sta 	codePtr
.8c5e	90 02		bcc $8c62			bcc 	_CREExit
.8c60	e6 31		inc $31				inc 	codePtr+1
.8c62					_CREExit:
.8c62	80 cb		bra $8c2f			bra 	_CLLoop
.8c64					_CLExit:
.8c64	4c 65 88	jmp $8865			jmp 	WarmStart
.8c67					CLCompareLineNo:
.8c67	38		sec				sec
.8c68	a0 01		ldy #$01			ldy 	#1
.8c6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c6c	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8c6f	85 36		sta $36				sta 	zTemp0
.8c71	c8		iny				iny
.8c72	b1 30		lda ($30),y			lda 	(codePtr),y
.8c74	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8c77	05 36		ora $36				ora 	zTemp0
.8c79	60		rts				rts
.8c7a					CLIsDigit:
.8c7a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c7c	c9 30		cmp #$30			cmp 	#"0"
.8c7e	90 03		bcc $8c83			bcc	 	_CLIDExitFalse
.8c80	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c82	60		rts				rts
.8c83					_CLIDExitFalse:
.8c83	38		sec				sec
.8c84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8c85					Command_LOCAL:
.8c85	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8c87	20 93 8c	jsr $8c93			jsr 	LocaliseNextTerm 			; convert term to a local.
.8c8a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c8c	c8		iny				iny
.8c8d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c8f	f0 f4		beq $8c85			beq 	Command_LOCAL
.8c91	88		dey				dey 								; unpick pre-get
.8c92	60		rts				rts
.8c93					LocaliseNextTerm:
.8c93	20 a7 99	jsr $99a7			jsr 	EvaluateTerm 				; evaluate the term
.8c96	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c99	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8c9b	f0 69		beq $8d06			beq		_LNTError
.8c9d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8ca0	85 36		sta $36				sta 	zTemp0
.8ca2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ca5	85 37		sta $37				sta  	zTemp0+1
.8ca7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8caa	29 10		and #$10			and 	#NSBIsString
.8cac	d0 22		bne $8cd0			bne 	_LNTPushString
.8cae	5a		phy				phy
.8caf	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8cb1					_LNTPushNumLoop:
.8cb1	b1 36		lda ($36),y			lda		(zTemp0),y
.8cb3	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8cb6	a9 00		lda #$00			lda 	#0
.8cb8	91 36		sta ($36),y			sta 	(zTemp0),y
.8cba	c8		iny				iny
.8cbb	c0 05		cpy #$05			cpy 	#5
.8cbd	d0 f2		bne $8cb1			bne 	_LNTPushNumLoop
.8cbf	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8cc1	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8cc4	a5 37		lda $37				lda 	zTemp0+1
.8cc6	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8cc9	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8ccb	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8cce	7a		ply				ply
.8ccf	60		rts				rts
.8cd0					_LNTPushString:
.8cd0	5a		phy				phy
.8cd1	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8cd3	85 38		sta $38				sta 	zTemp1
.8cd5	a0 01		ldy #$01			ldy 	#1
.8cd7	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cd9	85 39		sta $39				sta 	zTemp1+1
.8cdb	a0 00		ldy #$00			ldy 	#0 							; output string
.8cdd	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8cdf	f0 0a		beq $8ceb			beq 	_LNTStringOut
.8ce1					_LNTPushStrLoop:
.8ce1	b1 38		lda ($38),y			lda 	(zTemp1),y
.8ce3	f0 06		beq $8ceb			beq 	_LNTStringOut
.8ce5	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8ce8	c8		iny				iny
.8ce9	80 f6		bra $8ce1			bra 	_LNTPushStrLoop
.8ceb					_LNTStringOut:
.8ceb	98		tya				tya									; output length
.8cec	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8cef	a9 00		lda #$00			lda 	#0 							; clear original string.
.8cf1	92 38		sta ($38)			sta 	(zTemp1)
.8cf3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8cf6	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8cf9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8cfc	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8cff	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8d01	20 17 9f	jsr $9f17			jsr 	StackPushByte
.8d04	7a		ply				ply
.8d05	60		rts				rts
.8d06					_LNTError:
.8d06	4c ec ab	jmp $abec			jmp 	SyntaxError
.a5ad					LocalPopValue:
.a5ad	20 30 9f	jsr $9f30			jsr 	StackPopByte
.a5b0	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a5b2	d0 17		bne $a5cb			bne 	_LPVString
.a5b4	20 30 9f	jsr $9f30			jsr 	StackPopByte 				; address
.a5b7	85 37		sta $37				sta 	zTemp0+1
.a5b9	20 30 9f	jsr $9f30			jsr 	StackPopByte
.a5bc	85 36		sta $36				sta 	zTemp0
.a5be	5a		phy				phy
.a5bf	a0 04		ldy #$04			ldy 	#4 							; copy back
.a5c1					_LPVNumberCopy:
.a5c1	20 30 9f	jsr $9f30			jsr 	StackPopByte
.a5c4	91 36		sta ($36),y			sta 	(zTemp0),y
.a5c6	88		dey				dey
.a5c7	10 f8		bpl $a5c1			bpl 	_LPVNumberCopy
.a5c9	7a		ply				ply 								; and complete
.a5ca	60		rts				rts
.a5cb					_LPVString:
.a5cb	20 30 9f	jsr $9f30			jsr 	StackPopByte 				; address of record => zTemp0
.a5ce	85 37		sta $37				sta 	zTemp0+1
.a5d0	20 30 9f	jsr $9f30			jsr 	StackPopByte
.a5d3	85 36		sta $36				sta 	zTemp0
.a5d5	5a		phy				phy
.a5d6	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a5d8	85 38		sta $38				sta 	zTemp1
.a5da	a0 01		ldy #$01			ldy 	#1
.a5dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.a5de	85 39		sta $39				sta 	zTemp1+1
.a5e0	20 30 9f	jsr $9f30			jsr 	StackPopByte 				; # to get => y
.a5e3	a8		tay				tay
.a5e4	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a5e6	f0 0e		beq $a5f6			beq 	_LPVStringCopied
.a5e8	a9 00		lda #$00			lda 	#0 							; NULL on end
.a5ea	91 38		sta ($38),y			sta 	(zTemp1),y
.a5ec					_LPVStringCopy:
.a5ec	88		dey				dey
.a5ed	30 07		bmi $a5f6			bmi 	_LPVStringCopied
.a5ef	20 30 9f	jsr $9f30			jsr 	StackPopByte
.a5f2	91 38		sta ($38),y			sta 	(zTemp1),y
.a5f4	80 f6		bra $a5ec			bra 	_LPVStringCopy
.a5f6					_LPVStringCopied:
.a5f6	fa		plx				plx
.a5f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8d09					NewCommand:
.8d09	20 c2 9e	jsr $9ec2			jsr 	MemoryNew
.8d0c	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8d0f	20 fe 88	jsr $88fe			jsr 	ClearCommand 				; clear everything.
.8d12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8d13					Command_Print:
.8d13	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8d14					_CPLoop:
.8d14	08		php				php 								; save last action flag
.8d15	b1 30		lda ($30),y			lda 	(codePtr),y
.8d17	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8d19	f0 46		beq $8d61			beq 	_CPExit
.8d1b	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8d1d	f0 42		beq $8d61			beq 	_CPExit
.8d1f	68		pla				pla 								; throw last action flag
.8d20	b1 30		lda ($30),y			lda 	(codePtr),y
.8d22	c8		iny				iny
.8d23	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8d25	f0 37		beq $8d5e			beq 	_CPContinueWithSameLine
.8d27	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8d29	f0 2e		beq $8d59			beq 	_CPTab
.8d2b	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8d2d	f0 26		beq $8d55			beq 	_CPNewLine
.8d2f	88		dey				dey 								; undo the get.
.8d30	a2 00		ldx #$00			ldx 	#0
.8d32	20 d0 9d	jsr $9dd0			jsr 	EvaluateValue 				; get a value into slot 0
.8d35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8d38	29 10		and #$10			and 	#NSBIsString
.8d3a	f0 0b		beq $8d47			beq 	_CPNumber
.8d3c	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8d3f	ad 08 04	lda $0408			lda 	NSMantissa0
.8d42	20 26 93	jsr $9326			jsr 	PrintStringXA
.8d45	80 cc		bra $8d13			bra 	Command_Print 				; loop round clearing carry so NL if end
.8d47					_CPNumber:
.8d47	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8d49	20 a6 9c	jsr $9ca6			jsr 	ConvertNumberToString 		; convert to string
.8d4c	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8d4e	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8d50	20 26 93	jsr $9326			jsr 	PrintStringXA
.8d53	80 be		bra $8d13			bra 	Command_Print 				; loop round clearing carry so NL if end
.8d55					_CPNewLine:
.8d55	a9 0d		lda #$0d			lda 	#13
.8d57	80 02		bra $8d5b			bra 	_CPPrintChar
.8d59					_CPTab:
.8d59	a9 09		lda #$09			lda 	#9 							; print TAB
.8d5b					_CPPrintChar:
.8d5b	20 90 ad	jsr $ad90			jsr 	EXTPrintCharacter
.8d5e					_CPContinueWithSameLine:
.8d5e	38		sec				sec 								; loop round with carry set, which
.8d5f	80 b3		bra $8d14			bra 	_CPLoop 					; will inhibit final CR
.8d61					_CPExit:
.8d61	28		plp				plp 								; get last action flag
.8d62	b0 05		bcs $8d69			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8d64	a9 0d		lda #$0d			lda 	#13 						; print new line
.8d66	20 90 ad	jsr $ad90			jsr 	EXTPrintCharacter
.8d69					_CPExit2:
.8d69	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8d6a					CallProcedure:
.8d6a	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8d6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6e	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8d70	f0 0c		beq $8d7e			beq 	_CPEndParam
.8d72					_CPParamLoop:
.8d72	20 d6 96	jsr $96d6			jsr 	EvaluateExpression 			; get parameter onto stack
.8d75	e8		inx				inx 								; bump next stack
.8d76	b1 30		lda ($30),y			lda 	(codePtr),y
.8d78	c8		iny				iny
.8d79	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8d7b	f0 f5		beq $8d72			beq 	_CPParamLoop
.8d7d	88		dey				dey 								; unpick.
.8d7e					_CPEndParam:
.8d7e	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8d81	c8		iny				iny									; skip right bracket
.8d82	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8d84	20 39 9f	jsr $9f39			jsr 	StackOpen
.8d87	20 7d 9f	jsr $9f7d			jsr 	STKSaveCodePosition 		; save loop position
.8d8a	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8d8d	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8d8f	ad 10 04	lda $0410			lda 	NSMantissa1
.8d92	85 37		sta $37				sta 	zTemp0+1
.8d94	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8d96	b2 36		lda ($36)			lda 	(zTemp0)
.8d98	85 30		sta $30				sta 	safePtr
.8d9a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d9c	85 31		sta $31				sta 	safePtr+1
.8d9e	c8		iny				iny
.8d9f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8da1	85 32		sta $32				sta 	safePtr+2
.8da3	c8		iny				iny
.8da4	b1 36		lda ($36),y			lda 	(zTemp0),y
.8da6	85 33		sta $33				sta 	safePtr+3
.8da8	c8		iny				iny 								; get Y offset -> Y
.8da9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dab	a8		tay				tay
.8dac	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8dae	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8db1	f0 13		beq $8dc6			beq 	_ParamExit 					; if so, exit.
.8db3					_ParamExtract:
.8db3	ca		dex				dex 								; put a local term on the level before
.8db4	20 93 8c	jsr $8c93			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8db7	20 d1 8b	jsr $8bd1			jsr 	AssignVariable 				; assign stacked value to the variable.
.8dba	e8		inx				inx 								; advance to next parameter to do.
.8dbb	e8		inx				inx
.8dbc	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8dbf	f0 05		beq $8dc6			beq 	_ParamExit
.8dc1	20 0e a6	jsr $a60e			jsr 	CheckComma 					; comma seperating parameters
.8dc4	80 ed		bra $8db3			bra 	_ParamExtract
.8dc6					_ParamExit:
.8dc6	20 06 a6	jsr $a606			jsr 	CheckRightBracket 			; check )
.8dc9	60		rts				rts 								; and continue from here
.a5f8					Command_ENDPROC:
.a5f8	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a5fa	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a5fc	20 65 9f	jsr $9f65			jsr 	StackCheckFrame
.a5ff	20 8e 9f	jsr $9f8e			jsr 	STKLoadCodePosition 		; restore code position
.a602	20 57 9f	jsr $9f57			jsr 	StackClose
.a605	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8dca					Command_Read:
.8dca	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8dcc	20 a7 99	jsr $99a7			jsr 	EvaluateTerm
.8dcf	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dd2	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8dd4	f0 4a		beq $8e20			beq 	_CRSyntax 					; check reference (bit 0)
.8dd6	20 69 8e	jsr $8e69			jsr 	SwapDataCodePtrs 			; swap code and data
.8dd9	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ddc	d0 20		bne $8dfe			bne 	_CRContinueData
.8dde					_CRKeepSearching:
.8dde	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8de0	aa		tax				tax
.8de1	20 3f 92	jsr $923f			jsr 	ScanForward
.8de4	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8de6	f0 16		beq $8dfe			beq 	_CRHaveData 				; found it
.8de8	18		clc				clc
.8de9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8deb	65 30		adc $30				adc 	codePtr
.8ded	85 30		sta $30				sta 	codePtr
.8def	90 02		bcc $8df3			bcc 	_CREExit
.8df1	e6 31		inc $31				inc 	codePtr+1
.8df3					_CREExit:
.8df3	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8df5	b2 30		lda ($30)			lda 	(codePtr)
.8df7	d0 e5		bne $8dde			bne 	_CRKeepSearching
.8df9	a9 0b		lda #$0b		lda	#11
.8dfb	4c cd 92	jmp $92cd		jmp	ErrorHandler
.8dfe					_CRHaveData:
.8dfe					_CRContinueData:
.8dfe	a2 01		ldx #$01			ldx 	#1
.8e00	20 d0 9d	jsr $9dd0			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8e03	ca		dex				dex
.8e04	20 d1 8b	jsr $8bd1			jsr		AssignVariable 				; do the assignment
.8e07	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8e0a	b1 30		lda ($30),y			lda 	(codePtr),y
.8e0c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8e0e	d0 04		bne $8e14			bne 	_CRSwapBack
.8e10	c8		iny				iny 								; consume comma
.8e11	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8e14					_CRSwapBack:
.8e14	20 69 8e	jsr $8e69			jsr 	SwapDataCodePtrs			; swap them back.
.8e17	b1 30		lda ($30),y			lda 	(codePtr),y
.8e19	c8		iny				iny
.8e1a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e1c	f0 ac		beq $8dca			beq 	Command_Read 				; if so go round again.
.8e1e	88		dey				dey 								; unpick get.
.8e1f	60		rts				rts
.8e20					_CRSyntax:
.8e20	4c ec ab	jmp $abec			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8e23					RemCommand:
.8e23	b1 30		lda ($30),y			lda 	(codePtr),y
.8e25	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8e27	d0 06		bne $8e2f			bne 	_RMExit
.8e29	c8		iny				iny
.8e2a	98		tya				tya
.8e2b	38		sec				sec
.8e2c	71 30		adc ($30),y			adc 	(codePtr),y
.8e2e	a8		tay				tay
.8e2f					_RMExit:
.8e2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8e30					Command_REPEAT:
.8e30	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8e32	20 39 9f	jsr $9f39			jsr 	StackOpen
.8e35	20 7d 9f	jsr $9f7d			jsr 	STKSaveCodePosition 		; save loop position
.8e38	60		rts				rts
.8e39					Command_UNTIL:
.8e39	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8e3b	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8e3d	20 65 9f	jsr $9f65			jsr 	StackCheckFrame
.8e40	a2 00		ldx #$00			ldx 	#0
.8e42	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber 				; work out the number
.8e45	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; check if zero
.8e48	f0 04		beq $8e4e			beq 	_CULoopBack 				; if so keep looping
.8e4a	20 57 9f	jsr $9f57			jsr 	StackClose		 			; return
.8e4d	60		rts				rts
.8e4e					_CULoopBack:
.8e4e	20 8e 9f	jsr $9f8e			jsr 	STKLoadCodePosition 		; loop back
.8e51	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8e52					Command_Restore:
.8e52	20 69 8e	jsr $8e69			jsr 	SwapDataCodePtrs 			; swap code and data
.8e55	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e57	85 30		sta $30				sta 	codePtr
.8e59	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e5b	85 31		sta $31				sta 	codePtr+1
.8e5d	20 69 8e	jsr $8e69			jsr 	SwapDataCodePtrs 			; put them back
.8e60	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8e62	8d 9b 04	sta $049b			sta 	dataPointer+4
.8e65	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8e68	60		rts				rts
.8e69					SwapDataCodePtrs:
.8e69	da		phx				phx
.8e6a	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8e6c					_SDCPLoop:
.8e6c	b5 30		lda $30,x			lda 	safePtr,x
.8e6e	48		pha				pha
.8e6f	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8e72	95 30		sta $30,x			sta 	safePtr,x
.8e74	68		pla				pla
.8e75	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8e78	ca		dex				dex
.8e79	10 f1		bpl $8e6c			bpl 	_SDCPLoop
.8e7b	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8e7e	8c 9b 04	sty $049b			sty 	dataPointer+4
.8e81	a8		tay				tay
.8e82	fa		plx				plx
.8e83	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8e84					CommandRUN:
.8e84	20 fe 88	jsr $88fe			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8e87	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e89	85 30		sta $30				sta 	codePtr
.8e8b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e8d	85 31		sta $31				sta 	codePtr+1
.8e8f					RUNNewLine:
.8e8f	b2 30		lda ($30)			lda 	(codePtr)
.8e91	f0 5e		beq $8ef1			beq 	CRNoProgram         		; no then END.
.8e93	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8e95	9a		txs				txs
.8e96					RUNCodePointerLine:
.8e96	a0 02		ldy #$02			ldy 	#2 							; start of program
.8e98					_CRIncMainLoop:
.8e98	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8e9b	d0 05		bne $8ea2			bne 	_CRNoBreakCheck
.8e9d	20 d1 ad	jsr $add1			jsr 	EXTBreakCheck 				; break check
.8ea0	f0 4a		beq $8eec			beq 	_CRBreak
.8ea2					_CRNoBreakCheck:
.8ea2	c8		iny				iny
.8ea3					_CRMainLoop:
.8ea3	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8ea6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ea8	10 10		bpl $8eba			bpl 	_CRNotKeyword
.8eaa	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8eac	b0 04		bcs $8eb2			bcs 	_CRIsKeyword
.8eae	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8eb0	b0 34		bcs $8ee6			bcs		_CRSyntaxError
.8eb2					_CRIsKeyword:
.8eb2	c8		iny				iny 								; consume command
.8eb3	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8eb4	aa		tax				tax 								; put in X for vector jump
.8eb5	20 e9 8e	jsr $8ee9			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8eb8	80 e9		bra $8ea3			bra 	_CRMainLoop 				; and loop round
.8eba					_CRNotKeyword:
.8eba	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8ebc	f0 da		beq $8e98			beq 	_CRIncMainLoop
.8ebe	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8ec0	90 05		bcc $8ec7			bcc 	_CRNotVariable
.8ec2					_CRGoLet:
.8ec2	20 95 8b	jsr $8b95			jsr 	LetCommand
.8ec5	80 dc		bra $8ea3			bra 	_CRMainLoop
.8ec7					_CRNotVariable:
.8ec7	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8ec9	f0 f7		beq $8ec2			beq 	_CRGoLet
.8ecb	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8ecd	f0 f3		beq $8ec2			beq 	_CRGoLet
.8ecf	c9 21		cmp #$21			cmp 	#KWD_PLING
.8ed1	f0 ef		beq $8ec2			beq 	_CRGoLet
.8ed3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8ed5	f0 09		beq $8ee0			beq 	_CRGoRem
.8ed7	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8ed9	d0 0b		bne $8ee6			bne 	_CRSyntaxError
.8edb	20 9e 87	jsr $879e			jsr 	LabelHere
.8ede	80 c3		bra $8ea3			bra 	_CRMainLoop
.8ee0					_CRGoRem:
.8ee0	c8		iny				iny
.8ee1	20 23 8e	jsr $8e23			jsr 	RemCommand
.8ee4	80 bd		bra $8ea3			bra 	_CRMainLoop
.8ee6					_CRSyntaxError:
.8ee6	4c ec ab	jmp $abec			jmp 	SyntaxError
.8ee9					_CRCallVector0:
.8ee9	7c 94 8f	jmp ($8f94,x)			jmp 	(VectorSet0,x)
.8eec					_CRBreak:
.8eec	a9 01		lda #$01		lda	#1
.8eee	4c cd 92	jmp $92cd		jmp	ErrorHandler
.8ef1					CRNoProgram:
.8ef1	4c 1b 8a	jmp $8a1b			jmp 	EndCommand
.8ef4					EOLCommand:
.8ef4	18		clc				clc
.8ef5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ef7	65 30		adc $30				adc 	codePtr
.8ef9	85 30		sta $30				sta 	codePtr
.8efb	90 02		bcc $8eff			bcc 	_CREExit
.8efd	e6 31		inc $31				inc 	codePtr+1
.8eff					_CREExit:
.8eff	80 8e		bra $8e8f			bra 	RunNewLine
.8f01					Shift1Command:
.8f01	b1 30		lda ($30),y			lda 	(codePtr),y
.8f03	c8		iny				iny
.8f04	0a		asl a				asl 	a
.8f05	aa		tax				tax
.8f06	7c f6 8f	jmp ($8ff6,x)			jmp 	(VectorSet1,x)
.8f09					Shift2Command:
.8f09	b1 30		lda ($30),y			lda 	(codePtr),y
.8f0b	c8		iny				iny
.8f0c	0a		asl a				asl 	a
.8f0d	aa		tax				tax
.8f0e	7c 0e 90	jmp ($900e,x)			jmp 	(VectorSet2,x)
.8f11					Unused1:
.8f11					Unused2:
.8f11					Unused3:
.8f11					Unused4:
.8f11	4c ec ab	jmp $abec			jmp 	SyntaxError
>8f14							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8f14					VectorSetPunc:
>8f14	77 94					.word	ShiftLeft                        ; $00 <<
>8f16	71 93					.word	BinaryCompareLessEqual           ; $01 <=
>8f18	67 93					.word	BinaryCompareNotEqual            ; $02 <>
>8f1a	ec ab					.word	SyntaxError                      ; $03 !!3
>8f1c	ec ab					.word	SyntaxError                      ; $04 ><
>8f1e	7b 93					.word	BinaryCompareGreaterEqual        ; $05 >=
>8f20	7a 94					.word	ShiftRight                       ; $06 >>
>8f22	ec ab					.word	SyntaxError                      ; $07 !!7
>8f24	ec ab					.word	SyntaxError                      ; $08 !!8
>8f26	ec ab					.word	SyntaxError                      ; $09 !!9
>8f28	ec ab					.word	SyntaxError                      ; $0a !!10
>8f2a	ec ab					.word	SyntaxError                      ; $0b !!11
>8f2c	ec ab					.word	SyntaxError                      ; $0c !!12
>8f2e	ec ab					.word	SyntaxError                      ; $0d !!13
>8f30	ec ab					.word	SyntaxError                      ; $0e !!14
>8f32	ec ab					.word	SyntaxError                      ; $0f !!15
>8f34	ec ab					.word	SyntaxError                      ; $10 @
>8f36	ec ab					.word	SyntaxError                      ; $11 !!17
>8f38	ec ab					.word	SyntaxError                      ; $12 !!18
>8f3a	ec ab					.word	SyntaxError                      ; $13 [
>8f3c	1f a6					.word	IntegerDivide                    ; $14 \
>8f3e	ec ab					.word	SyntaxError                      ; $15 ]
>8f40	00 96					.word	EorInteger                       ; $16 ^
>8f42	ec ab					.word	SyntaxError                      ; $17 _
>8f44	ec ab					.word	SyntaxError                      ; $18 `
>8f46	ec ab					.word	SyntaxError                      ; $19 !!25
>8f48	ec ab					.word	SyntaxError                      ; $1a !!26
>8f4a	ec ab					.word	SyntaxError                      ; $1b {
>8f4c	ba 95					.word	OraInteger                       ; $1c |
>8f4e	ec ab					.word	SyntaxError                      ; $1d }
>8f50	ec ab					.word	SyntaxError                      ; $1e ~
>8f52	ec ab					.word	SyntaxError                      ; $1f [7m<7F>[m
>8f54	ec ab					.word	SyntaxError                      ; $20
>8f56	46 96					.word	WordIndirect                     ; $21 !
>8f58	ec ab					.word	SyntaxError                      ; $22 "
>8f5a	ec ab					.word	SyntaxError                      ; $23 #
>8f5c	ec ab					.word	SyntaxError                      ; $24 $
>8f5e	6c a6					.word	IntegerModulus                   ; $25 %
>8f60	74 95					.word	AndInteger                       ; $26 &
>8f62	ec ab					.word	SyntaxError                      ; $27 '
>8f64	ec ab					.word	SyntaxError                      ; $28 (
>8f66	ec ab					.word	SyntaxError                      ; $29 )
>8f68	e1 a6					.word	MulInteger                       ; $2a *
>8f6a	0e 95					.word	AddInteger                       ; $2b +
>8f6c	ec ab					.word	SyntaxError                      ; $2c ,
>8f6e	49 95					.word	SubInteger                       ; $2d -
>8f70	ec ab					.word	SyntaxError                      ; $2e .
>8f72	78 a8					.word	FDivideCommand                   ; $2f /
>8f74	ec ab					.word	SyntaxError                      ; $30 0
>8f76	ec ab					.word	SyntaxError                      ; $31 1
>8f78	ec ab					.word	SyntaxError                      ; $32 2
>8f7a	ec ab					.word	SyntaxError                      ; $33 3
>8f7c	ec ab					.word	SyntaxError                      ; $34 4
>8f7e	ec ab					.word	SyntaxError                      ; $35 5
>8f80	ec ab					.word	SyntaxError                      ; $36 6
>8f82	ec ab					.word	SyntaxError                      ; $37 7
>8f84	ec ab					.word	SyntaxError                      ; $38 8
>8f86	ec ab					.word	SyntaxError                      ; $39 9
>8f88	ec ab					.word	SyntaxError                      ; $3a :
>8f8a	ec ab					.word	SyntaxError                      ; $3b ;
>8f8c	53 93					.word	BinaryCompareLess                ; $3c <
>8f8e	49 93					.word	BinaryCompareEqual               ; $3d =
>8f90	5d 93					.word	BinaryCompareGreater             ; $3e >
>8f92	6d 96					.word	ByteIndirect                     ; $3f ?
.8f94					VectorSet0:
>8f94	f4 8e					.word	EOLCommand                       ; $80 !0:EOF
>8f96	01 8f					.word	Shift1Command                    ; $81 !1:SH1
>8f98	09 8f					.word	Shift2Command                    ; $82 !2:SH2
>8f9a	be a9					.word	AbsUnary                         ; $83 ABS(
>8f9c	37 9b					.word	AllocUnary                       ; $84 ALLOC(
>8f9e	ce a9					.word	AscUnary                         ; $85 ASC(
>8fa0	57 9c					.word	ChrUnary                         ; $86 CHR$(
>8fa2	45 93					.word	UnaryFalse                       ; $87 FALSE
>8fa4	db a9					.word	FracUnary                        ; $88 FRAC(
>8fa6	f1 a9					.word	IntUnary                         ; $89 INT(
>8fa8	47 aa					.word	IsValUnary                       ; $8a ISVAL(
>8faa	31 9d					.word	Unary_Left                       ; $8b LEFT$(
>8fac	03 aa					.word	LenUnary                         ; $8c LEN(
>8fae	5b 9d					.word	Unary_Mid                        ; $8d MID$(
>8fb0	a7 9b					.word	Unary_Not                        ; $8e NOT(
>8fb2	bd 9b					.word	Unary_Random                     ; $8f RANDOM(
>8fb4	41 9d					.word	Unary_Right                      ; $90 RIGHT$(
>8fb6	d6 9b					.word	Unary_Rnd                        ; $91 RND(
>8fb8	1d aa					.word	SgnUnary                         ; $92 SGN(
>8fba	69 9c					.word	SpcUnary                         ; $93 SPC(
>8fbc	84 9c					.word	Unary_Str                        ; $94 STR$(
>8fbe	39 93					.word	UnaryTrue                        ; $95 TRUE
>8fc0	3d aa					.word	ValUnary                         ; $96 VAL(
>8fc2	1e 8a					.word	ForCommand                       ; $97 FOR
>8fc4	6b 8b					.word	IfCommand                        ; $98 IF
>8fc6	11 8f					.word	Unused1                          ; $99 PROC
>8fc8	30 8e					.word	Command_REPEAT                   ; $9a REPEAT
>8fca	9e 92					.word	Command_WHILE                    ; $9b WHILE
>8fcc	94 8b					.word	EndIf                            ; $9c ENDIF
>8fce	f8 a5					.word	Command_ENDPROC                  ; $9d ENDPROC
>8fd0	d8 8a					.word	NextCommand                      ; $9e NEXT
>8fd2	11 8f					.word	Unused4                          ; $9f THEN
>8fd4	39 8e					.word	Command_UNTIL                    ; $a0 UNTIL
>8fd6	bf 92					.word	Command_WEND                     ; $a1 WEND
>8fd8	c4 88					.word	CallCommand                      ; $a2 CALL
>8fda	ec ab					.word	SyntaxError                      ; $a3 CLS
>8fdc	56 89					.word	Command_Data                     ; $a4 DATA
>8fde	5e 89					.word	DimCommand                       ; $a5 DIM
>8fe0	11 8f					.word	Unused3                          ; $a6 DOWNTO
>8fe2	8d 8b					.word	ElseCode                         ; $a7 ELSE
>8fe4	31 8b					.word	Command_GOSUB                    ; $a8 GOSUB
>8fe6	4f 8b					.word	GotoCommand                      ; $a9 GOTO
>8fe8	95 8b					.word	LetCommand                       ; $aa LET
>8fea	85 8c					.word	Command_LOCAL                    ; $ab LOCAL
>8fec	13 8d					.word	Command_Print                    ; $ac PRINT
>8fee	ca 8d					.word	Command_Read                     ; $ad READ
>8ff0	23 8e					.word	RemCommand                       ; $ae REM
>8ff2	41 8b					.word	Command_RETURN                   ; $af RETURN
>8ff4	11 8f					.word	Unused2                          ; $b0 TO
.8ff6					VectorSet1:
>8ff6	ec ab					.word	SyntaxError                      ; $80 !0:EOF
>8ff8	ec ab					.word	SyntaxError                      ; $81 !1:SH1
>8ffa	ec ab					.word	SyntaxError                      ; $82 !2:SH2
>8ffc	95 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ffe	b4 88					.word	AssertCommand                    ; $84 ASSERT
>9000	fe 88					.word	ClearCommand                     ; $85 CLEAR
>9002	1b 8a					.word	EndCommand                       ; $86 END
>9004	ea 8b					.word	Command_List                     ; $87 LIST
>9006	09 8d					.word	NewCommand                       ; $88 NEW
>9008	52 8e					.word	Command_Restore                  ; $89 RESTORE
>900a	84 8e					.word	CommandRUN                       ; $8a RUN
>900c	96 90					.word	StopCommand                      ; $8b STOP
.900e					VectorSet2:
>900e	ec ab					.word	SyntaxError                      ; $80 !0:EOF
>9010	ec ab					.word	SyntaxError                      ; $81 !1:SH1
>9012	ec ab					.word	SyntaxError                      ; $82 !2:SH2
>9014	ab aa					.word	Assemble_adc                     ; $83 ADC
>9016	a3 aa					.word	Assemble_and                     ; $84 AND
>9018	bf aa					.word	Assemble_asl                     ; $85 ASL
>901a	29 ab					.word	Assemble_bcc                     ; $86 BCC
>901c	2d ab					.word	Assemble_bcs                     ; $87 BCS
>901e	35 ab					.word	Assemble_beq                     ; $88 BEQ
>9020	ec aa					.word	Assemble_bit                     ; $89 BIT
>9022	1d ab					.word	Assemble_bmi                     ; $8a BMI
>9024	31 ab					.word	Assemble_bne                     ; $8b BNE
>9026	19 ab					.word	Assemble_bpl                     ; $8c BPL
>9028	39 ab					.word	Assemble_bra                     ; $8d BRA
>902a	3d ab					.word	Assemble_brk                     ; $8e BRK
>902c	21 ab					.word	Assemble_bvc                     ; $8f BVC
>902e	25 ab					.word	Assemble_bvs                     ; $90 BVS
>9030	45 ab					.word	Assemble_clc                     ; $91 CLC
>9032	99 ab					.word	Assemble_cld                     ; $92 CLD
>9034	59 ab					.word	Assemble_cli                     ; $93 CLI
>9036	89 ab					.word	Assemble_clv                     ; $94 CLV
>9038	b7 aa					.word	Assemble_cmp                     ; $95 CMP
>903a	00 ab					.word	Assemble_cpx                     ; $96 CPX
>903c	fb aa					.word	Assemble_cpy                     ; $97 CPY
>903e	dd aa					.word	Assemble_dec                     ; $98 DEC
>9040	95 ab					.word	Assemble_dex                     ; $99 DEX
>9042	71 ab					.word	Assemble_dey                     ; $9a DEY
>9044	a7 aa					.word	Assemble_eor                     ; $9b EOR
>9046	e2 aa					.word	Assemble_inc                     ; $9c INC
>9048	a5 ab					.word	Assemble_inx                     ; $9d INX
>904a	91 ab					.word	Assemble_iny                     ; $9e INY
>904c	14 ab					.word	Assemble_jmp                     ; $9f JMP
>904e	0f ab					.word	Assemble_jsr                     ; $a0 JSR
>9050	b3 aa					.word	Assemble_lda                     ; $a1 LDA
>9052	d8 aa					.word	Assemble_ldx                     ; $a2 LDX
>9054	f6 aa					.word	Assemble_ldy                     ; $a3 LDY
>9056	c9 aa					.word	Assemble_lsr                     ; $a4 LSR
>9058	a9 ab					.word	Assemble_nop                     ; $a5 NOP
>905a	9f aa					.word	Assemble_ora                     ; $a6 ORA
>905c	55 ab					.word	Assemble_pha                     ; $a7 PHA
>905e	41 ab					.word	Assemble_php                     ; $a8 PHP
>9060	9d ab					.word	Assemble_phx                     ; $a9 PHX
>9062	5d ab					.word	Assemble_phy                     ; $aa PHY
>9064	65 ab					.word	Assemble_pla                     ; $ab PLA
>9066	49 ab					.word	Assemble_plp                     ; $ac PLP
>9068	b1 ab					.word	Assemble_plx                     ; $ad PLX
>906a	6d ab					.word	Assemble_ply                     ; $ae PLY
>906c	c4 aa					.word	Assemble_rol                     ; $af ROL
>906e	ce aa					.word	Assemble_ror                     ; $b0 ROR
>9070	51 ab					.word	Assemble_rti                     ; $b1 RTI
>9072	61 ab					.word	Assemble_rts                     ; $b2 RTS
>9074	bb aa					.word	Assemble_sbc                     ; $b3 SBC
>9076	4d ab					.word	Assemble_sec                     ; $b4 SEC
>9078	ad ab					.word	Assemble_sed                     ; $b5 SED
>907a	69 ab					.word	Assemble_sei                     ; $b6 SEI
>907c	af aa					.word	Assemble_sta                     ; $b7 STA
>907e	a1 ab					.word	Assemble_stp                     ; $b8 STP
>9080	d3 aa					.word	Assemble_stx                     ; $b9 STX
>9082	f1 aa					.word	Assemble_sty                     ; $ba STY
>9084	e7 aa					.word	Assemble_stz                     ; $bb STZ
>9086	85 ab					.word	Assemble_tax                     ; $bc TAX
>9088	81 ab					.word	Assemble_tay                     ; $bd TAY
>908a	0a ab					.word	Assemble_trb                     ; $be TRB
>908c	05 ab					.word	Assemble_tsb                     ; $bf TSB
>908e	8d ab					.word	Assemble_tsx                     ; $c0 TSX
>9090	75 ab					.word	Assemble_txa                     ; $c1 TXA
>9092	7d ab					.word	Assemble_txs                     ; $c2 TXS
>9094	79 ab					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9096					StopCommand:
.9096	a9 08		lda #$08		lda	#8
.9098	4c cd 92	jmp $92cd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.909b					ListConvertLine:
.909b	9c 9d 04	stz $049d			stz 	tbOffset
.909e	9c a9 04	stz $04a9			stz 	tokenBuffer
.90a1	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.90a3	b1 30		lda ($30),y			lda 	(codePtr),y
.90a5	aa		tax				tax
.90a6	88		dey				dey
.90a7	b1 30		lda ($30),y			lda 	(codePtr),y
.90a9	20 62 a7	jsr $a762			jsr 	ConvertInt16
.90ac	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.90ae	86 37		stx $37				stx 	zTemp0+1
.90b0	a0 00		ldy #$00			ldy 	#0
.90b2					_LCCopyNumber:
.90b2	b1 36		lda ($36),y			lda 	(zTemp0),y
.90b4	20 b4 91	jsr $91b4			jsr 	LCLWrite
.90b7	c8		iny				iny
.90b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.90ba	d0 f6		bne $90b2			bne 	_LCCopyNumber
.90bc					_LCPadOut:
.90bc	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.90be	20 b4 91	jsr $91b4			jsr 	LCLWrite
.90c1	ad 9d 04	lda $049d			lda 	tbOffset
.90c4	c9 06		cmp #$06			cmp 	#6
.90c6	d0 f4		bne $90bc			bne 	_LCPadOut
.90c8	a0 03		ldy #$03			ldy 	#3 							; start position.
.90ca					_LCMainLoop:
.90ca	b1 30		lda ($30),y			lda 	(codePtr),y
.90cc	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.90ce	f0 17		beq $90e7			beq 	_LCExit
.90d0	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.90d2	90 14		bcc $90e8			bcc 	_LCDoubles
.90d4	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.90d6	90 20		bcc $90f8			bcc 	_LCShiftPunc
.90d8	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.90da	90 2b		bcc $9107			bcc 	_LCPunctuation
.90dc	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.90de	90 2d		bcc $910d			bcc 	_LCIdentifiers
.90e0	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.90e2	90 49		bcc $912d			bcc 	_LCTokens
.90e4	4c 88 91	jmp $9188			jmp 	_LCData 					; 254-5 are data objects
.90e7					_LCExit:
.90e7	60		rts				rts
.90e8					_LCDoubles:
.90e8	48		pha				pha
.90e9	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.90ea	29 02		and #$02			and 	#2
.90ec	09 3c		ora #$3c			ora 	#60 						; make < >
.90ee	20 b4 91	jsr $91b4			jsr 	LCLWrite
.90f1	68		pla				pla 								; restore, do lower bit
.90f2	29 03		and #$03			and 	#3
.90f4	09 3c		ora #$3c			ora 	#60
.90f6	80 0f		bra $9107			bra		_LCPunctuation 				; print, increment, loop
.90f8					_LCShiftPunc:
.90f8	aa		tax				tax 								; save in X
.90f9	29 07		and #$07			and 	#7 							; lower 3 bits
.90fb	f0 02		beq $90ff			beq 	_LCNoAdd
.90fd	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.90ff					_LCNoAdd:
.90ff	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9101	90 02		bcc $9105			bcc 	_LCNoAdd2
.9103	09 20		ora #$20			ora 	#32 						; adds $20
.9105					_LCNoAdd2:
.9105	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9107					_LCPunctuation:
.9107	c8		iny				iny 								; consume character
.9108	20 b4 91	jsr $91b4			jsr 	LCLWrite 					; write it out.
.910b	80 bd		bra $90ca			bra 	_LCMainLoop 				; go round again.
.910d					_LCIdentifiers:
.910d	18		clc				clc 								; convert to physical address
.910e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9110	85 37		sta $37				sta 	zTemp0+1
.9112	c8		iny				iny
.9113	b1 30		lda ($30),y			lda 	(codePtr),y
.9115	85 36		sta $36				sta 	zTemp0
.9117	c8		iny				iny
.9118	5a		phy				phy 								; save position
.9119	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.911b					_LCOutIdentifier:
.911b	c8		iny				iny
.911c	b1 36		lda ($36),y			lda 	(zTemp0),y
.911e	29 7f		and #$7f			and 	#$7F
.9120	20 e2 91	jsr $91e2			jsr 	LCLLowerCase
.9123	20 b4 91	jsr $91b4			jsr 	LCLWrite
.9126	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9128	10 f1		bpl $911b			bpl 	_LCOutIdentifier
.912a	7a		ply				ply 								; restore position
.912b	80 9d		bra $90ca			bra 	_LCMainLoop
.912d					_LCTokens:
.912d	aa		tax				tax 								; token in X
.912e	a9 b2		lda #$b2			lda 	#((KeywordSet2) & $FF)
.9130	85 36		sta $36				sta 	0+zTemp0
.9132	a9 a1		lda #$a1			lda 	#((KeywordSet2) >> 8)
.9134	85 37		sta $37				sta 	1+zTemp0
.9136	e0 82		cpx #$82			cpx 	#$82
.9138	f0 16		beq $9150			beq 	_LCUseShift
.913a	a9 6e		lda #$6e			lda 	#((KeywordSet1) & $FF)
.913c	85 36		sta $36				sta 	0+zTemp0
.913e	a9 a1		lda #$a1			lda 	#((KeywordSet1) >> 8)
.9140	85 37		sta $37				sta 	1+zTemp0
.9142	e0 81		cpx #$81			cpx 	#$81
.9144	f0 0a		beq $9150			beq 	_LCUseShift
.9146	a9 3c		lda #$3c			lda 	#((KeywordSet0) & $FF)
.9148	85 36		sta $36				sta 	0+zTemp0
.914a	a9 a0		lda #$a0			lda 	#((KeywordSet0) >> 8)
.914c	85 37		sta $37				sta 	1+zTemp0
.914e	80 01		bra $9151			bra 	_LCNoShift
.9150					_LCUseShift:
.9150	c8		iny				iny
.9151					_LCNoShift:
.9151	20 c3 91	jsr $91c3			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9154	b1 30		lda ($30),y			lda 	(codePtr),y
.9156	aa		tax				tax 								; into X
.9157					_LCFindText:
.9157	ca		dex				dex
.9158	10 0e		bpl $9168			bpl 	_LCFoundText 				; found text.
.915a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.915c	1a		inc a				inc 	a 							; one extra for size
.915d	38		sec				sec 								; one extra for checksum
.915e	65 36		adc $36				adc 	zTemp0 						; go to next token
.9160	85 36		sta $36				sta 	zTemp0
.9162	90 f3		bcc $9157			bcc 	_LCFindText
.9164	e6 37		inc $37				inc 	zTemp0+1
.9166	80 ef		bra $9157			bra 	_LCFindText
.9168					_LCFoundText:
.9168	5a		phy				phy 								; save List position
.9169	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.916b	aa		tax				tax
.916c	a0 02		ldy #$02			ldy 	#2
.916e					_LCCopyToken:
.916e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9170	20 e2 91	jsr $91e2			jsr 	LCLLowerCase
.9173	20 b4 91	jsr $91b4			jsr 	LCLWrite
.9176	c8		iny				iny
.9177	ca		dex				dex
.9178	d0 f4		bne $916e			bne 	_LCCopyToken
.917a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.917c	f0 05		beq $9183			beq 	_LCNoSpace
.917e	a9 20		lda #$20			lda 	#' '
.9180	20 b4 91	jsr $91b4			jsr 	LCLWrite
.9183					_LCNoSpace:
.9183	7a		ply				ply 								; restore position.
.9184	c8		iny				iny 								; consume token
.9185	4c ca 90	jmp $90ca			jmp 	_LCMainLoop 				; and go around again.
.9188					_LCData:
.9188	48		pha				pha 								; save type $FE/$FF
.9189	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.918b	c9 fe		cmp #$fe			cmp 	#$FE
.918d	f0 02		beq $9191			beq 	_LCHaveOpener
.918f	a2 22		ldx #$22			ldx 	#'"'
.9191					_LCHaveOpener:
.9191	8a		txa				txa 								; output prefix (# or ")
.9192	20 b4 91	jsr $91b4			jsr 	LCLWrite
.9195	c8		iny				iny 								; get count
.9196	b1 30		lda ($30),y			lda 	(codePtr),y
.9198	aa		tax				tax
.9199	c8		iny				iny 								; point at first character
.919a					_LCOutData:
.919a	b1 30		lda ($30),y			lda 	(codePtr),y
.919c	c9 00		cmp #$00			cmp 	#0
.919e	f0 03		beq $91a3			beq 	_LCNoPrint
.91a0	20 b4 91	jsr $91b4			jsr 	LCLWrite
.91a3					_LCNoPrint:
.91a3	c8		iny				iny
.91a4	ca		dex				dex
.91a5	d0 f3		bne $919a			bne 	_LCOutData
.91a7	68		pla				pla 								; closing " required ?
.91a8	c9 ff		cmp #$ff			cmp 	#$FF
.91aa	d0 05		bne $91b1			bne 	_LCNoQuote
.91ac	a9 22		lda #$22			lda 	#'"'
.91ae	20 b4 91	jsr $91b4			jsr 	LCLWrite
.91b1					_LCNoQuote:
.91b1	4c ca 90	jmp $90ca			jmp 	_LCMainLoop
.91b4					LCLWrite:
.91b4	da		phx				phx
.91b5	ae 9d 04	ldx $049d			ldx 	tbOffset
.91b8	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.91bb	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.91be	ee 9d 04	inc $049d			inc 	tbOffset
.91c1	fa		plx				plx
.91c2	60		rts				rts
.91c3					LCCheckSpaceRequired:
.91c3	ae 9d 04	ldx $049d			ldx 	tbOffset
.91c6	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.91c9	20 e2 91	jsr $91e2			jsr 	LCLLowerCase 				; saves a little effort
.91cc	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.91ce	90 11		bcc $91e1			bcc 	_LCCSRExit
.91d0	c9 3a		cmp #$3a			cmp 	#"9"+1
.91d2	90 08		bcc $91dc			bcc 	_LCCSRSpace
.91d4	c9 61		cmp #$61			cmp 	#"a"
.91d6	90 09		bcc $91e1			bcc 	_LCCSRExit
.91d8	c9 7b		cmp #$7b			cmp 	#"z"+1
.91da	b0 05		bcs $91e1			bcs 	_LCCSRExit
.91dc					_LCCSRSpace:
.91dc	a9 20		lda #$20			lda 	#' '
.91de	20 b4 91	jsr $91b4			jsr 	LCLWrite
.91e1					_LCCSRExit:
.91e1	60		rts				rts
.91e2					LCLLowerCase:
.91e2	c9 41		cmp #$41			cmp 	#"A"
.91e4	90 06		bcc $91ec			bcc 	_LCLLCOut
.91e6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.91e8	b0 02		bcs $91ec			bcs 	_LCLLCOut
.91ea	69 20		adc #$20			adc 	#$20
.91ec					_LCLLCOut:
.91ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.91ed					ProcedureScan:
.91ed	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91ef	85 30		sta $30				sta 	codePtr
.91f1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91f3	85 31		sta $31				sta 	codePtr+1
.91f5					_PSLoop:
.91f5	b2 30		lda ($30)			lda 	(codePtr)
.91f7	f0 42		beq $923b			beq 	_PSExit
.91f9	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.91fb	b1 30		lda ($30),y			lda 	(codePtr),y
.91fd	c9 99		cmp #$99			cmp 	#KWD_PROC
.91ff	d0 2d		bne $922e			bne 	_PSNext
.9201	c8		iny				iny 								; get the address of the record to zTemp0 and
.9202	b1 30		lda ($30),y			lda 	(codePtr),y
.9204	29 c0		and #$c0			and 	#$C0
.9206	c9 40		cmp #$40			cmp 	#$40
.9208	d0 32		bne $923c			bne 	_PSSyntax
.920a	b1 30		lda ($30),y			lda 	(codePtr),y
.920c	18		clc				clc
.920d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.920f	85 37		sta $37				sta 	zTemp0+1
.9211	c8		iny				iny 								; LSB
.9212	b1 30		lda ($30),y			lda 	(codePtr),y
.9214	85 36		sta $36				sta 	zTemp0
.9216	c8		iny				iny 								; character after variable call.
.9217	98		tya				tya 								; save Y offset at +7
.9218	a0 07		ldy #$07			ldy 	#7
.921a	91 36		sta ($36),y			sta 	(zTemp0),y
.921c	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.921e	a0 02		ldy #$02			ldy 	#2
.9220	91 36		sta ($36),y			sta 	(zTemp0),y
.9222	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9224					_PSCopy:
.9224	b5 30		lda $30,x			lda 	safePtr,x
.9226	c8		iny				iny
.9227	91 36		sta ($36),y			sta 	(zTemp0),y
.9229	e8		inx				inx
.922a	e0 04		cpx #$04			cpx 	#4
.922c	d0 f6		bne $9224			bne 	_PSCopy
.922e					_PSNext:
.922e	18		clc				clc
.922f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9231	65 30		adc $30				adc 	codePtr
.9233	85 30		sta $30				sta 	codePtr
.9235	90 02		bcc $9239			bcc 	_CREExit
.9237	e6 31		inc $31				inc 	codePtr+1
.9239					_CREExit:
.9239	80 ba		bra $91f5			bra 	_PSLoop
.923b					_PSExit:
.923b	60		rts				rts
.923c					_PSSyntax:
.923c	4c ec ab	jmp $abec			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.923f					ScanForward:
.923f	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9241	86 37		stx $37				stx 	zTemp0+1
.9243	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9245					_ScanLoop:
.9245	b1 30		lda ($30),y			lda 	(codePtr),y
.9247	c8		iny				iny
.9248	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.924a	d0 0e		bne $925a			bne 	_ScanGoNext
.924c	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.924e	f0 04		beq $9254			beq 	_ScanMatch
.9250	c5 37		cmp $37				cmp 	zTemp0+1
.9252	d0 06		bne $925a			bne 	_ScanGoNext
.9254					_ScanMatch:
.9254	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9256	d0 01		bne $9259			bne 	_ScanNotEndEOL
.9258	88		dey				dey
.9259					_ScanNotEndEOL:
.9259	60		rts				rts
.925a					_ScanGoNext:
.925a	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.925c	90 e7		bcc $9245			bcc 	_ScanLoop
.925e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9260	90 18		bcc $927a			bcc 	_ScanSkipOne
.9262	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9264	b0 2f		bcs $9295			bcs 	_ScanSkipData
.9266	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9268	90 db		bcc $9245			bcc 	_ScanLoop 					; if not, ordinary keywords.
.926a	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.926c	b0 d7		bcs $9245			bcs 	_ScanLoop
.926e	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9270	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9272	b0 d1		bcs $9245			bcs 	_ScanLoop
.9274	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9276	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9278	80 cb		bra $9245			bra 	_ScanLoop
.927a					_ScanSkipOne:
.927a	c8		iny				iny 								; consume the extra one.
.927b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.927d	d0 c6		bne $9245			bne 	_ScanLoop
.927f	18		clc				clc
.9280	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9282	65 30		adc $30				adc 	codePtr
.9284	85 30		sta $30				sta 	codePtr
.9286	90 02		bcc $928a			bcc 	_CREExit
.9288	e6 31		inc $31				inc 	codePtr+1
.928a					_CREExit:
.928a	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.928c	b2 30		lda ($30)			lda 	(codePtr)
.928e	d0 b5		bne $9245			bne 	_ScanLoop 					; if not zero, more to scan
.9290	a9 13		lda #$13		lda	#19
.9292	4c cd 92	jmp $92cd		jmp	ErrorHandler
.9295					_ScanSkipData:
.9295	88		dey				dey 								; point at data token
.9296	c8		iny				iny
.9297	98		tya				tya
.9298	38		sec				sec
.9299	71 30		adc ($30),y			adc 	(codePtr),y
.929b	a8		tay				tay
.929c	80 a7		bra $9245			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.929e					Command_WHILE:
.929e	5a		phy				phy 								; save position of the test
.929f	a2 00		ldx #$00			ldx 	#0
.92a1	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber 				; work out the number
.92a4	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; check if zero
.92a7	f0 0e		beq $92b7			beq 	_WHExitLoop 				; if so exit the loop
.92a9	98		tya				tya 								; position *after* test.
.92aa	7a		ply				ply 								; restore position before test, at WHILE
.92ab	88		dey				dey
.92ac	48		pha				pha 								; push after test on the stack
.92ad	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.92af	20 39 9f	jsr $9f39			jsr 	StackOpen
.92b2	20 7d 9f	jsr $9f7d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.92b5	7a		ply				ply 								; restore the position *after* the test
.92b6	60		rts				rts
.92b7					_WHExitLoop:
.92b7	68		pla				pla 								; throw post loop position
.92b8	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.92ba	aa		tax				tax
.92bb	20 3f 92	jsr $923f			jsr 	ScanForward
.92be	60		rts				rts
.92bf					Command_WEND:
.92bf	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.92c1	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.92c3	20 65 9f	jsr $9f65			jsr 	StackCheckFrame
.92c6	20 8e 9f	jsr $9f8e			jsr 	STKLoadCodePosition 		; loop back
.92c9	20 57 9f	jsr $9f57			jsr 	StackClose		 			; erase the frame
.92cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a606					CheckRightBracket:
.a606	b1 30		lda ($30),y			lda 	(codePtr),y
.a608	c8		iny				iny
.a609	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a60b	d0 0f		bne $a61c			bne 	CNAFail
.a60d	60		rts				rts
.a60e					CheckComma:
.a60e	b1 30		lda ($30),y			lda 	(codePtr),y
.a610	c8		iny				iny
.a611	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a613	d0 07		bne $a61c			bne 	CNAFail
.a615	60		rts				rts
.a616					CheckNextA:
.a616	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a618	d0 02		bne $a61c			bne 	CNAFail
.a61a	c8		iny				iny 								; skip character
.a61b	60		rts				rts 								; and exit
.a61c					CNAFail:
.a61c	4c ec ab	jmp $abec			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.92cd					ErrorHandler:
.92cd	a8		tay				tay 								; find the error text
.92ce	f0 49		beq $9319			beq 	_EHEnd
.92d0	a2 00		ldx #$00			ldx 	#0
.92d2	a9 05		lda #$05			lda 	#((ErrorText) & $FF)
.92d4	85 36		sta $36				sta 	0+zTemp0
.92d6	a9 ac		lda #$ac			lda 	#((ErrorText) >> 8)
.92d8	85 37		sta $37				sta 	1+zTemp0
.92da					_EHFind:
.92da	88		dey				dey 								; found the error text ?
.92db	f0 0e		beq $92eb			beq 	_EHFound
.92dd					_EHFindZero:
.92dd	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.92df	e6 36		inc $36				inc 	zTemp0
.92e1	d0 02		bne $92e5			bne 	_EHFNoCarry
.92e3	e6 37		inc $37				inc 	zTemp0+1
.92e5					_EHFNoCarry:
.92e5	c9 00		cmp #$00			cmp 	#0
.92e7	d0 f4		bne $92dd			bne 	_EHFindZero
.92e9	80 ef		bra $92da			bra 	_EHFind
.92eb					_EHFound:
.92eb	a5 36		lda $36				lda 	zTemp0 						; print message
.92ed	a6 37		ldx $37				ldx 	zTemp0+1
.92ef	20 26 93	jsr $9326			jsr 	PrintStringXA
.92f2	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.92f4	b1 30		lda ($30),y			lda 	(codePtr),y
.92f6	d0 05		bne $92fd			bne 	_EHAtMsg
.92f8	c8		iny				iny
.92f9	b1 30		lda ($30),y			lda 	(codePtr),y
.92fb	f0 17		beq $9314			beq 	_EHCREnd
.92fd					_EHAtMsg:
.92fd	a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.92ff	a9 1c		lda #$1c			lda 	#_AtMsg & $FF
.9301	20 26 93	jsr $9326			jsr 	PrintStringXA
.9304	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9306	b1 30		lda ($30),y			lda 	(codePtr),y
.9308	48		pha				pha
.9309	c8		iny				iny
.930a	b1 30		lda ($30),y			lda 	(codePtr),y
.930c	aa		tax				tax
.930d	68		pla				pla
.930e	20 62 a7	jsr $a762			jsr 	ConvertInt16 				; convert XA to string
.9311	20 26 93	jsr $9326			jsr 	PrintStringXA 				; and print it.
.9314					_EHCREnd:
.9314	a9 0d		lda #$0d			lda 	#13 						; new line
.9316	20 90 ad	jsr $ad90			jsr 	EXTPrintCharacter
.9319					_EHEnd:
.9319	4c 65 88	jmp $8865			jmp 	WarmStart
>931c	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9324	20 00
.9326					PrintStringXA:
.9326	5a		phy				phy
.9327	86 37		stx $37				stx 	zTemp0+1
.9329	85 36		sta $36				sta 	zTemp0
.932b	a0 00		ldy #$00			ldy 	#0
.932d					_PSXALoop:
.932d	b1 36		lda ($36),y			lda 	(zTemp0),y
.932f	f0 06		beq $9337			beq 	_PSXAExit
.9331	20 90 ad	jsr $ad90			jsr 	EXTPrintCharacter
.9334	c8		iny				iny
.9335	80 f6		bra $932d			bra 	_PSXALoop
.9337					_PSXAExit:
.9337	7a		ply				ply
.9338	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9339					UnaryTrue:
.9339	fa		plx				plx
.933a					ReturnTrue:
.933a	a9 01		lda #$01			lda 	#1  						; set to 1
.933c	20 87 9e	jsr $9e87			jsr 	NSMSetByte
.933f	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9341	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9344	60		rts				rts
.9345					UnaryFalse:
.9345	fa		plx				plx
.9346					ReturnFalse:
.9346	4c 85 9e	jmp $9e85			jmp 	NSMSetZero 					; set it all to zero
.9349					BinaryCompareEqual:
.9349	fa		plx				plx
.934a	20 85 93	jsr $9385			jsr 	CompareBaseCode
.934d	c9 00		cmp #$00			cmp 	#0
.934f	f0 e9		beq $933a			beq 	ReturnTrue
.9351	80 f3		bra $9346			bra 	ReturnFalse
.9353					BinaryCompareLess:
.9353	fa		plx				plx
.9354	20 85 93	jsr $9385			jsr 	CompareBaseCode
.9357	c9 ff		cmp #$ff			cmp 	#$FF
.9359	f0 df		beq $933a			beq 	ReturnTrue
.935b	80 e9		bra $9346			bra 	ReturnFalse
.935d					BinaryCompareGreater:
.935d	fa		plx				plx
.935e	20 85 93	jsr $9385			jsr 	CompareBaseCode
.9361	c9 01		cmp #$01			cmp 	#1
.9363	f0 d5		beq $933a			beq 	ReturnTrue
.9365	80 df		bra $9346			bra 	ReturnFalse
.9367					BinaryCompareNotEqual:
.9367	fa		plx				plx
.9368	20 85 93	jsr $9385			jsr 	CompareBaseCode
.936b	c9 00		cmp #$00			cmp 	#0
.936d	d0 cb		bne $933a			bne 	ReturnTrue
.936f	80 d5		bra $9346			bra 	ReturnFalse
.9371					BinaryCompareLessEqual:
.9371	fa		plx				plx
.9372	20 85 93	jsr $9385			jsr 	CompareBaseCode
.9375	c9 01		cmp #$01			cmp 	#1
.9377	d0 c1		bne $933a			bne 	ReturnTrue
.9379	80 cb		bra $9346			bra 	ReturnFalse
.937b					BinaryCompareGreaterEqual:
.937b	fa		plx				plx
.937c	20 85 93	jsr $9385			jsr 	CompareBaseCode
.937f	c9 ff		cmp #$ff			cmp 	#$FF
.9381	d0 b7		bne $933a			bne 	ReturnTrue
.9383	80 c1		bra $9346			bra 	ReturnFalse
.9385					CompareBaseCode:
.9385	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; make both values if references.
.9388	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.938b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.938e	29 10		and #$10			and 	#NSTString
.9390	d0 40		bne $93d2			bne 	_CBCString
.9392	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9395	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9398	d0 3b		bne $93d5			bne 	_CBCFloat
.939a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.939d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93a0	29 08		and #$08			and 	#NSTFloat
.93a2	d0 31		bne $93d5			bne 	_CBCFloat
.93a4	20 d8 93	jsr $93d8			jsr 	CompareFixMinusZero
.93a7	e8		inx				inx
.93a8	20 d8 93	jsr $93d8			jsr 	CompareFixMinusZero
.93ab	ca		dex				dex
.93ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.93af	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.93b2	10 0b		bpl $93bf			bpl 	_CDCSameSign
.93b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.93b7	30 16		bmi $93cf			bmi 	_CBCLess 					; return $FF
.93b9					_CBCGreater:
.93b9	a9 01		lda #$01			lda 	#1
.93bb	60		rts				rts
.93bc					_CBCEqual:
.93bc	a9 00		lda #$00			lda 	#0
.93be	60		rts				rts
.93bf					_CDCSameSign:
.93bf	20 e8 94	jsr $94e8			jsr 	SubTopTwoStack 				; unsigned subtract
.93c2	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; or the mantissa together
.93c5	f0 f5		beq $93bc			beq 	_CBCEqual 					; -0 == 0
.93c7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.93ca	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.93cd	10 ea		bpl $93b9			bpl 	_CBCGreater
.93cf					_CBCLess:
.93cf	a9 ff		lda #$ff			lda 	#$FF
.93d1	60		rts				rts
.93d2					_CBCString:
.93d2	4c 3e 94	jmp $943e			jmp 	CompareStrings
.93d5					_CBCFloat:
.93d5	4c 5e a8	jmp $a85e			jmp 	CompareFloat
.93d8					CompareFixMinusZero:
.93d8	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero
.93db	d0 03		bne $93e0			bne 	_CFXMZNotZero
.93dd	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93e0					_CFXMZNotZero:
.93e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.93e1					StringConcat:
.93e1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.93e4	3d 01 04	and $0401,x			and 	NSStatus+1,x
.93e7	29 18		and #$18			and 	#NSBTypeMask
.93e9	c9 10		cmp #$10			cmp 	#NSTString
.93eb	d0 4e		bne $943b			bne		_SCType
.93ed	64 38		stz $38				stz 	zTemp1 						; counting total length
.93ef	e8		inx				inx
.93f0	20 0e 94	jsr $940e			jsr 	_SCSetupZ0 					; setup for second
.93f3	20 19 94	jsr $9419			jsr 	_SCLengthZ0 				; length for second
.93f6	ca		dex				dex
.93f7	20 0e 94	jsr $940e			jsr 	_SCSetupZ0 					; setup for first
.93fa	20 19 94	jsr $9419			jsr 	_SCLengthZ0 				; length for first
.93fd	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.93ff	20 12 af	jsr $af12			jsr 	StringTempAllocate
.9402	20 2c 94	jsr $942c			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9405	e8		inx				inx
.9406	20 0e 94	jsr $940e			jsr 	_SCSetupZ0 					; copy second out
.9409	20 2c 94	jsr $942c			jsr 	_SCCopy
.940c	ca		dex				dex
.940d	60		rts				rts
.940e					_SCSetupZ0:
.940e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9411	85 36		sta $36				sta 	zTemp0
.9413	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9416	85 37		sta $37				sta 	zTemp0+1
.9418	60		rts				rts
.9419					_SCLengthZ0:
.9419	5a		phy				phy
.941a	a0 00		ldy #$00			ldy 	#0
.941c					_SCLenLoop:
.941c	b1 36		lda ($36),y			lda 	(zTemp0),y
.941e	f0 0a		beq $942a			beq 	_SCLExit
.9420	c8		iny				iny
.9421	e6 38		inc $38				inc 	zTemp1
.9423	10 f7		bpl $941c			bpl		_SCLenLoop
.9425	a9 09		lda #$09		lda	#9
.9427	4c cd 92	jmp $92cd		jmp	ErrorHandler
.942a					_SCLExit:
.942a	7a		ply				ply
.942b	60		rts				rts
.942c					_SCCopy:
.942c	5a		phy				phy
.942d	a0 00		ldy #$00			ldy 	#0
.942f					_SCCopyLoop:
.942f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9431	f0 06		beq $9439			beq 	_SCCExit
.9433	20 50 af	jsr $af50			jsr 	StringTempWrite
.9436	c8		iny				iny
.9437	80 f6		bra $942f			bra 	_SCCopyLoop
.9439					_SCCExit:
.9439	7a		ply				ply
.943a	60		rts				rts
.943b					_SCType:
.943b	4c f6 ab	jmp $abf6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a61f					IntegerDivide:
.a61f	fa		plx				plx
.a620	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a623	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a626	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a627	0a		asl a				asl 	a
.a628	10 05		bpl $a62f			bpl 	_NotRef
.a62a	48		pha				pha
.a62b	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a62e	68		pla				pla
.a62f					_NotRef:
.a62f	0a		asl a				asl 	a
.a630	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a632	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a635	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a638	f0 03		beq $a63d			beq 	_IntegerCode 				; if clear, then we have two integers
.a63a	4c f6 ab	jmp $abf6			jmp 	TypeError 					; anything else, type mismatch.
.a63d					_IntegerCode:
.a63d	20 5f a6	jsr $a65f			jsr 	CheckDivideZero 			; do div zero check
.a640	20 97 a6	jsr $a697			jsr 	Int32Divide 				; do the division
.a643	20 54 a7	jsr $a754			jsr 	CalculateSign 				; calculate result sign
.a646					NSMCopyPlusTwoToZero:
.a646	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a649	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a64c	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a64f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a652	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a655	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a658	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a65b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a65e	60		rts				rts
.a65f					CheckDivideZero:
.a65f	e8		inx				inx
.a660	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero
.a663	f0 02		beq $a667			beq 	_CDVError
.a665	ca		dex				dex
.a666	60		rts				rts
.a667					_CDVError:
.a667	a9 03		lda #$03		lda	#3
.a669	4c cd 92	jmp $92cd		jmp	ErrorHandler
.a66c					IntegerModulus:
.a66c	fa		plx				plx
.a66d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a670	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a673	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a674	0a		asl a				asl 	a
.a675	10 05		bpl $a67c			bpl 	_NotRef
.a677	48		pha				pha
.a678	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a67b	68		pla				pla
.a67c					_NotRef:
.a67c	0a		asl a				asl 	a
.a67d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a67f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a682	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a685	f0 03		beq $a68a			beq 	_IntegerCode 				; if clear, then we have two integers
.a687	4c f6 ab	jmp $abf6			jmp 	TypeError 					; anything else, type mismatch.
.a68a					_IntegerCode:
.a68a					IntegerModulusNoCheck:
.a68a	20 5f a6	jsr $a65f			jsr 	CheckDivideZero 			; do div zero check
.a68d	20 97 a6	jsr $a697			jsr 	Int32Divide 				; do the division
.a690	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a693	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a696	60		rts				rts
.a697					Int32Divide:
.a697	48		pha				pha 								; save AXY
.a698	5a		phy				phy
.a699	20 5c 9e	jsr $9e5c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a69c	20 81 9e	jsr $9e81			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a69f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a6a1					_I32DivideLoop:
.a6a1	e8		inx				inx
.a6a2	e8		inx				inx
.a6a3	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a6a6	ca		dex				dex
.a6a7	ca		dex				dex
.a6a8	20 9b 9e	jsr $9e9b			jsr 	NSMRotateLeft
.a6ab	20 d7 a6	jsr $a6d7			jsr 	DivideCheckSubtract 		; check if subtract possible
.a6ae	90 03		bcc $a6b3			bcc 	_I32DivideNoCarryIn
.a6b0	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a6b3					_I32DivideNoCarryIn:
.a6b3	88		dey				dey 								; loop round till division completed.
.a6b4	d0 eb		bne $a6a1			bne 	_I32DivideLoop
.a6b6	7a		ply				ply 								; restore AXY and exit
.a6b7	68		pla				pla
.a6b8	60		rts				rts
.a6b9					Int32ShiftDivide:
.a6b9	48		pha				pha 								; save AY
.a6ba	5a		phy				phy
.a6bb	e8		inx				inx 								; clear S[X+2]
.a6bc	e8		inx				inx
.a6bd	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.a6c0	ca		dex				dex
.a6c1	ca		dex				dex
.a6c2	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a6c4					_I32SDLoop:
.a6c4	20 d7 a6	jsr $a6d7			jsr 	DivideCheckSubtract 		; check if subtract possible
.a6c7	e8		inx				inx
.a6c8	e8		inx				inx
.a6c9	20 9b 9e	jsr $9e9b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a6cc	ca		dex				dex
.a6cd	ca		dex				dex
.a6ce	20 9b 9e	jsr $9e9b			jsr 	NSMRotateLeft
.a6d1	88		dey				dey 	 							; do 31 times
.a6d2	d0 f0		bne $a6c4			bne 	_I32SDLoop
.a6d4	7a		ply				ply 								; restore AY and exit
.a6d5	68		pla				pla
.a6d6	60		rts				rts
.a6d7					DivideCheckSubtract:
.a6d7	20 e8 94	jsr $94e8			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a6da	b0 04		bcs $a6e0			bcs 	_DCSExit 					; if carry set, then could do, exit
.a6dc	20 c2 94	jsr $94c2			jsr 	AddTopTwoStack 				; add it back in
.a6df	18		clc				clc 								; and return False
.a6e0					_DCSExit:
.a6e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a6e1					MulInteger:
.a6e1	fa		plx				plx
.a6e2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a6e5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a6e8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a6e9	0a		asl a				asl 	a
.a6ea	10 05		bpl $a6f1			bpl 	_NotRef
.a6ec	48		pha				pha
.a6ed	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a6f0	68		pla				pla
.a6f1					_NotRef:
.a6f1	0a		asl a				asl 	a 							; put MSB of type into A:7
.a6f2	30 0b		bmi $a6ff			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a6f4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a6f7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a6fa	f0 06		beq $a702			beq 	_IntegerCode 				; if clear, then we have two integers
.a6fc	4c 35 a9	jmp $a935			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a6ff					_StringData:
.a6ff	4c 00 ac	jmp $ac00			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a702					_IntegerCode:
.a702	20 0f a7	jsr $a70f			jsr 	MultiplyShort
.a705	c9 00		cmp #$00			cmp 	#0
.a707	f0 05		beq $a70e			beq 	_MIExit
.a709	a9 04		lda #$04		lda	#4
.a70b	4c cd 92	jmp $92cd		jmp	ErrorHandler
.a70e					_MIExit:
.a70e	60		rts				rts
.a70f					MultiplyShort:
.a70f	5a		phy				phy 								; save Y
.a710	20 5c 9e	jsr $9e5c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a713	20 81 9e	jsr $9e81			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a716	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a718					_I32MLoop:
.a718	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a71b	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a71e	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a721	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a724	f0 28		beq $a74e			beq 	_I32MExit 					; exit if zero
.a726	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a729	29 01		and #$01			and 	#1
.a72b	f0 0e		beq $a73b			beq 	_I32MNoAdd
.a72d	20 c2 94	jsr $94c2			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a730	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a733	10 06		bpl $a73b			bpl 	_I32MNoAdd
.a735					_I32ShiftRight:
.a735	20 a8 9e	jsr $9ea8			jsr 	NSMShiftRight 				; shift S[X] right
.a738	c8		iny				iny 								; increment shift count
.a739	80 0a		bra $a745			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a73b					_I32MNoAdd:
.a73b	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a73e	70 f5		bvs $a735			bvs 	_I32ShiftRight 				; instead.
.a740	e8		inx				inx
.a741	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a744	ca		dex				dex
.a745					_I32MShiftUpper:
.a745	e8		inx				inx 								; shift S[X+2] right
.a746	e8		inx				inx
.a747	20 a8 9e	jsr $9ea8			jsr 	NSMShiftRight
.a74a	ca		dex				dex
.a74b	ca		dex				dex
.a74c	80 ca		bra $a718			bra 	_I32MLoop 					; try again.
.a74e					_I32MExit:
.a74e	20 54 a7	jsr $a754			jsr 	CalculateSign
.a751	98		tya				tya 								; shift in A
.a752	7a		ply				ply 								; restore Y and exit
.a753	60		rts				rts
.a754					CalculateSign:
.a754	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a757	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a75a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a75d	0a		asl a				asl 	a 							; shift bit 7 into carry
.a75e	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a761	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.943e					CompareStrings:
.943e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9441	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9444	29 10		and #$10			and 	#NSBIsString
.9446	f0 2c		beq $9474			beq 	_CSTypeError
.9448	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.944b	85 36		sta $36				sta 	zTemp0
.944d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9450	85 37		sta $37				sta 	zTemp0+1
.9452	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9455	85 38		sta $38				sta 	zTemp1
.9457	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.945a	85 39		sta $39				sta 	zTemp1+1
.945c	5a		phy				phy 								; save Y so we can access strings
.945d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.945f					_CSLoop:
.945f	c8		iny				iny
.9460	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9462	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9464	d0 06		bne $946c			bne 	_CSDifferent
.9466	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9468	d0 f5		bne $945f			bne 	_CSLoop 					; still comparing
.946a					_CSExit:
.946a	7a		ply				ply 								; reached end, return zero in A from EOS
.946b	60		rts				rts
.946c					_CSDifferent:
.946c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.946e	90 fa		bcc $946a			bcc		_CSExit
.9470	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9472	80 f6		bra $946a			bra 	_CSExit
.9474					_CSTypeError:
.9474	4c f6 ab	jmp $abf6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9477					ShiftLeft:
.9477	38		sec				sec
.9478	80 01		bra $947b			bra 	ShiftMain
.947a					ShiftRight:
.947a	18		clc				clc
.947b					ShiftMain:
.947b	fa		plx				plx 								; restore X
.947c	08		php				php 								; save direction
.947d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9480	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9483	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9484	0a		asl a				asl 	a
.9485	10 05		bpl $948c			bpl 	_NotRef
.9487	48		pha				pha
.9488	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.948b	68		pla				pla
.948c					_NotRef:
.948c	0a		asl a				asl 	a
.948d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.948f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9492	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9495	f0 03		beq $949a			beq 	_IntegerCode 				; if clear, then we have two integers
.9497	4c f6 ab	jmp $abf6			jmp 	TypeError 					; anything else, type mismatch.
.949a					_IntegerCode:
.949a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.949d	29 e0		and #$e0			and 	#$E0
.949f	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.94a2	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.94a5	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.94a8	d0 13		bne $94bd			bne 	_SMExit0 					; if >= 32 it will always return zero.
.94aa					_SMLoop:
.94aa	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.94ad	30 11		bmi $94c0			bmi 	_SMExit 					; exit if done.
.94af	28		plp				plp 								; restore direcition setting
.94b0	08		php				php
.94b1	90 05		bcc $94b8			bcc 	_SMRight
.94b3	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; shift left if CS
.94b6	80 f2		bra $94aa			bra 	_SMLoop
.94b8					_SMRight:
.94b8	20 a8 9e	jsr $9ea8			jsr 	NSMShiftRight 				; shift right if CC
.94bb	80 ed		bra $94aa			bra 	_SMLoop
.94bd					_SMExit0:
.94bd	20 85 9e	jsr $9e85			jsr 	NSMSetZero 					; return zero.
.94c0					_SMExit:
.94c0	28		plp				plp 								; throw direction
.94c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.94c2					AddTopTwoStack:
.94c2	18		clc				clc
.94c3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.94c6	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.94c9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94cc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.94cf	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.94d2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94d5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.94d8	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.94db	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94de	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94e1	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.94e4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94e7	60		rts				rts
.94e8					SubTopTwoStack:
.94e8	38		sec				sec
.94e9	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.94ec	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.94ef	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94f2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.94f5	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.94f8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94fb	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.94fe	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9501	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9504	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9507	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.950a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.950d	60		rts				rts
.950e					AddInteger:
.950e	fa		plx				plx
.950f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9512	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9515	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9516	0a		asl a				asl 	a
.9517	10 05		bpl $951e			bpl 	_NotRef
.9519	48		pha				pha
.951a	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.951d	68		pla				pla
.951e					_NotRef:
.951e	0a		asl a				asl 	a 							; put MSB of type into A:7
.951f	30 0b		bmi $952c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9521	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9524	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9527	f0 06		beq $952f			beq 	_IntegerCode 				; if clear, then we have two integers
.9529	4c bd a7	jmp $a7bd			jmp 	FloatingPointAdd 							; otherwise at least one float.
.952c					_StringData:
.952c	4c e1 93	jmp $93e1			jmp 	StringConcat							; at least one string - don't know both are strings.
.952f					_IntegerCode:
.952f					AddCode:
.952f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9532	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9535	10 8b		bpl $94c2			bpl 	AddTopTwoStack
.9537	20 e8 94	jsr $94e8			jsr 	SubTopTwoStack 				; do a physical subtraction
.953a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.953d	10 09		bpl $9548			bpl 	_AddExit
.953f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9542	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9545	20 3a 9e	jsr $9e3a			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9548					_AddExit:
.9548	60		rts				rts
.9549					SubInteger:
.9549	fa		plx				plx
.954a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.954d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9550	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9551	0a		asl a				asl 	a
.9552	10 05		bpl $9559			bpl 	_NotRef
.9554	48		pha				pha
.9555	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9558	68		pla				pla
.9559					_NotRef:
.9559	0a		asl a				asl 	a 							; put MSB of type into A:7
.955a	30 0b		bmi $9567			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.955c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.955f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9562	f0 06		beq $956a			beq 	_IntegerCode 				; if clear, then we have two integers
.9564	4c c2 a7	jmp $a7c2			jmp 	FloatingPointSub 							; otherwise at least one float.
.9567					_StringData:
.9567	4c 00 ac	jmp $ac00			jmp 	NotDoneError							; at least one string - don't know both are strings.
.956a					_IntegerCode:
.956a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.956d	49 80		eor #$80			eor 	#$80
.956f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9572	80 bb		bra $952f			bra 	AddCode 					; and do the same code as add.
.9574					AndInteger:
.9574	fa		plx				plx
.9575	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9578	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.957b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.957c	0a		asl a				asl 	a
.957d	10 05		bpl $9584			bpl 	_NotRef
.957f	48		pha				pha
.9580	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9583	68		pla				pla
.9584					_NotRef:
.9584	0a		asl a				asl 	a
.9585	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9587	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.958a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.958d	f0 03		beq $9592			beq 	_IntegerCode 				; if clear, then we have two integers
.958f	4c f6 ab	jmp $abf6			jmp 	TypeError 					; anything else, type mismatch.
.9592					_IntegerCode:
.9592	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9595	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9598	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.959b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.959e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.95a1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95a4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95a7	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.95aa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95ad	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95b0	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.95b3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95b6	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.95b9	60		rts				rts
.95ba					OraInteger:
.95ba	fa		plx				plx
.95bb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95be	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95c1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95c2	0a		asl a				asl 	a
.95c3	10 05		bpl $95ca			bpl 	_NotRef
.95c5	48		pha				pha
.95c6	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95c9	68		pla				pla
.95ca					_NotRef:
.95ca	0a		asl a				asl 	a
.95cb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95cd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95d0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95d3	f0 03		beq $95d8			beq 	_IntegerCode 				; if clear, then we have two integers
.95d5	4c f6 ab	jmp $abf6			jmp 	TypeError 					; anything else, type mismatch.
.95d8					_IntegerCode:
.95d8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95db	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.95de	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95e1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95e4	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.95e7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95ea	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95ed	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.95f0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95f3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95f6	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.95f9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95fc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.95ff	60		rts				rts
.9600					EorInteger:
.9600	fa		plx				plx
.9601	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9604	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9607	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9608	0a		asl a				asl 	a
.9609	10 05		bpl $9610			bpl 	_NotRef
.960b	48		pha				pha
.960c	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.960f	68		pla				pla
.9610					_NotRef:
.9610	0a		asl a				asl 	a
.9611	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9613	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9616	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9619	f0 03		beq $961e			beq 	_IntegerCode 				; if clear, then we have two integers
.961b	4c f6 ab	jmp $abf6			jmp 	TypeError 					; anything else, type mismatch.
.961e					_IntegerCode:
.961e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9621	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9624	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9627	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.962a	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.962d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9630	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9633	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9636	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9639	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.963c	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.963f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9642	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9645	60		rts				rts
.9646					WordIndirect:
.9646	fa		plx				plx
.9647	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.964a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.964d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.964e	0a		asl a				asl 	a
.964f	10 05		bpl $9656			bpl 	_NotRef
.9651	48		pha				pha
.9652	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9655	68		pla				pla
.9656					_NotRef:
.9656	0a		asl a				asl 	a
.9657	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9659	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.965c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.965f	f0 03		beq $9664			beq 	_IntegerCode 				; if clear, then we have two integers
.9661	4c f6 ab	jmp $abf6			jmp 	TypeError 					; anything else, type mismatch.
.9664					_IntegerCode:
.9664	20 2f 95	jsr $952f			jsr 	AddCode 					; add the two values
.9667	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9669	9d 00 04	sta $0400,x			sta 	NSStatus,x
.966c	60		rts				rts
.966d					ByteIndirect:
.966d	fa		plx				plx
.966e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9671	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9674	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9675	0a		asl a				asl 	a
.9676	10 05		bpl $967d			bpl 	_NotRef
.9678	48		pha				pha
.9679	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.967c	68		pla				pla
.967d					_NotRef:
.967d	0a		asl a				asl 	a
.967e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9680	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9683	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9686	f0 03		beq $968b			beq 	_IntegerCode 				; if clear, then we have two integers
.9688	4c f6 ab	jmp $abf6			jmp 	TypeError 					; anything else, type mismatch.
.968b					_IntegerCode:
.968b	20 2f 95	jsr $952f			jsr 	AddCode 					; add the two values
.968e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9690	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9693	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a762					ConvertInt16:
.a762	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a765	8e 10 04	stx $0410			stx 	NSMantissa1
.a768	9c 18 04	stz $0418			stz 	NSMantissa2
.a76b	9c 20 04	stz $0420			stz 	NSMantissa3
.a76e	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a771	a2 00		ldx #$00			ldx 	#0 							; stack level
.a773	a9 0a		lda #$0a			lda 	#10 						; base
.a775	80 00		bra $a777			bra 	ConvertInt32
.a777					ConvertInt32:
.a777	5a		phy				phy
.a778	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a77a	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a77d	10 08		bpl $a787			bpl 	_CI32NotNeg
.a77f	48		pha				pha
.a780	a9 2d		lda #$2d			lda 	#'-'
.a782	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a785	c8		iny				iny
.a786	68		pla				pla
.a787					_CI32NotNeg:
.a787	20 95 a7	jsr $a795			jsr 	_CI32DivideConvert 			; recursive conversion
.a78a	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a78c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a78f	7a		ply				ply
.a790	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a792	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a794	60		rts				rts
.a795					_CI32DivideConvert:
.a795	e8		inx				inx 								; write to next slot up
.a796	20 87 9e	jsr $9e87			jsr 	NSMSetByte
.a799	ca		dex				dex
.a79a	20 97 a6	jsr $a697			jsr 	Int32Divide 				; divide
.a79d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a7a0	48		pha				pha
.a7a1	20 46 a6	jsr $a646			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a7a4	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; is it zero ?
.a7a7	f0 06		beq $a7af			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a7a9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a7ac	20 95 a7	jsr $a795			jsr 	_CI32DivideConvert 			; and recusrively call.
.a7af					_CI32NoRecurse:
.a7af	68		pla				pla 								; remainder
.a7b0	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a7b2	90 02		bcc $a7b6			bcc 	_CI32NotHex
.a7b4	69 26		adc #$26			adc 	#6+32
.a7b6					_CI32NotHex:
.a7b6	69 30		adc #$30			adc 	#48
.a7b8	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a7bb	c8		iny				iny
.a7bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9694					PrecedenceLevel:
>9694	04					.byte	 4	; $00 <<
>9695	02					.byte	 2	; $01 <=
>9696	02					.byte	 2	; $02 <>
>9697	00					.byte	 0	; $03 !!3
>9698	00					.byte	 0	; $04 ><
>9699	02					.byte	 2	; $05 >=
>969a	04					.byte	 4	; $06 >>
>969b	00					.byte	 0	; $07 !!7
>969c	00					.byte	 0	; $08 !!8
>969d	00					.byte	 0	; $09 !!9
>969e	00					.byte	 0	; $0a !!10
>969f	00					.byte	 0	; $0b !!11
>96a0	00					.byte	 0	; $0c !!12
>96a1	00					.byte	 0	; $0d !!13
>96a2	00					.byte	 0	; $0e !!14
>96a3	00					.byte	 0	; $0f !!15
>96a4	00					.byte	 0	; $10 @
>96a5	00					.byte	 0	; $11 !!17
>96a6	00					.byte	 0	; $12 !!18
>96a7	00					.byte	 0	; $13 [
>96a8	04					.byte	 4	; $14 \
>96a9	00					.byte	 0	; $15 ]
>96aa	01					.byte	 1	; $16 ^
>96ab	00					.byte	 0	; $17 _
>96ac	00					.byte	 0	; $18 `
>96ad	00					.byte	 0	; $19 !!25
>96ae	00					.byte	 0	; $1a !!26
>96af	00					.byte	 0	; $1b {
>96b0	01					.byte	 1	; $1c |
>96b1	00					.byte	 0	; $1d }
>96b2	00					.byte	 0	; $1e ~
>96b3	00					.byte	 0	; $1f [7m<7F>[m
>96b4	00					.byte	 0	; $20
>96b5	05					.byte	 5	; $21 !
>96b6	00					.byte	 0	; $22 "
>96b7	00					.byte	 0	; $23 #
>96b8	05					.byte	 5	; $24 $
>96b9	04					.byte	 4	; $25 %
>96ba	01					.byte	 1	; $26 &
>96bb	00					.byte	 0	; $27 '
>96bc	00					.byte	 0	; $28 (
>96bd	00					.byte	 0	; $29 )
>96be	04					.byte	 4	; $2a *
>96bf	03					.byte	 3	; $2b +
>96c0	00					.byte	 0	; $2c ,
>96c1	03					.byte	 3	; $2d -
>96c2	00					.byte	 0	; $2e .
>96c3	04					.byte	 4	; $2f /
>96c4	00					.byte	 0	; $30 0
>96c5	00					.byte	 0	; $31 1
>96c6	00					.byte	 0	; $32 2
>96c7	00					.byte	 0	; $33 3
>96c8	00					.byte	 0	; $34 4
>96c9	00					.byte	 0	; $35 5
>96ca	00					.byte	 0	; $36 6
>96cb	00					.byte	 0	; $37 7
>96cc	00					.byte	 0	; $38 8
>96cd	00					.byte	 0	; $39 9
>96ce	00					.byte	 0	; $3a :
>96cf	00					.byte	 0	; $3b ;
>96d0	02					.byte	 2	; $3c <
>96d1	02					.byte	 2	; $3d =
>96d2	02					.byte	 2	; $3e >
>96d3	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.96d4					EvaluateExpressionAt0:
.96d4	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.96d6					EvaluateExpression:
.96d6	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.96d8					EvaluateExpressionAtPrecedence:
.96d8	48		pha				pha 								; save precedence level
.96d9	20 a7 99	jsr $99a7			jsr 	EvaluateTerm 				; evaluate term into level X.
.96dc	68		pla				pla 								; restore precedence level.
.96dd					_EXPRLoop:
.96dd	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.96df	b1 30		lda ($30),y			lda 	(codePtr),y
.96e1	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.96e3	b0 25		bcs $970a			bcs 	_EXPRExit
.96e5	da		phx				phx 								; read the operator precedence
.96e6	aa		tax				tax
.96e7	bd 94 96	lda $9694,x			lda 	PrecedenceLevel,x
.96ea	fa		plx				plx
.96eb	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.96ed	f0 1b		beq $970a			beq 	_EXPRExit
.96ef	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.96f1	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.96f3	c5 37		cmp $37				cmp 	zTemp0+1
.96f5	b0 13		bcs $970a			bcs		_EXPRExit 					; if current >= operator exit
.96f7	48		pha				pha 								; save current precedence.
.96f8	b1 30		lda ($30),y			lda 	(codePtr),y
.96fa	c8		iny				iny
.96fb	48		pha				pha
.96fc	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.96fe	e8		inx				inx 								; work out the right hand side.
.96ff	20 d8 96	jsr $96d8			jsr 	EvaluateExpressionAtPrecedence
.9702	ca		dex				dex
.9703	68		pla				pla 								; get operator, call the code.
.9704	20 0d 97	jsr $970d			jsr 	_EXPRCaller
.9707	68		pla				pla 								; restore precedence level
.9708	80 d3		bra $96dd			bra 	_EXPRLoop 					; and go round.
.970a					_EXPRExit:
.970a	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.970c	60		rts				rts
.970d					_EXPRCaller:
.970d	da		phx				phx 								; save on stack, first thing is to restore it
.970e	0a		asl a				asl 	a 							; double so can use vectors into X
.970f	aa		tax				tax
.9710	7c 14 8f	jmp ($8f14,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a7bd					FloatingPointAdd:
.a7bd	20 5e a9	jsr $a95e			jsr 	FloatPrepare 				; prepare for floats
.a7c0	80 0b		bra $a7cd			bra 	FloatAdd
.a7c2					FloatingPointSub:
.a7c2	20 5e a9	jsr $a95e			jsr 	FloatPrepare 				; prepare for floats
.a7c5					FloatSubtract:
.a7c5	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a7c8	49 80		eor #$80			eor 	#$80
.a7ca	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a7cd					FloatAdd:
.a7cd	48		pha				pha
.a7ce	5a		phy				phy
.a7cf	20 6f a9	jsr $a96f			jsr 	NSNormalise 				; normalise S[X]
.a7d2	f0 54		beq $a828			beq 	_FAReturn1
.a7d4	e8		inx				inx 								; normalise S[X+1]
.a7d5	20 6f a9	jsr $a96f			jsr 	NSNormalise
.a7d8	ca		dex				dex
.a7d9	c9 00		cmp #$00			cmp 	#0
.a7db	f0 6f		beq $a84c			beq 	_FAExit 					; if so, just return A
.a7dd	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a7e0	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a7e3	f0 1b		beq $a800			beq 	_FAExponentsEqual
.a7e5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a7e8	a8		tay				tay
.a7e9	38		sec				sec 								; do a signed comparison of the exponents.
.a7ea	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a7ed	50 02		bvc $a7f1			bvc 	_FANoSignedChange
.a7ef	49 80		eor #$80			eor 	#$80
.a7f1					_FANoSignedChange:
.a7f1	29 80		and #$80			and 	#$80
.a7f3	10 03		bpl $a7f8			bpl 	_FAHaveMax
.a7f5	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a7f8					_FAHaveMax:
.a7f8	20 4f a8	jsr $a84f			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a7fb	e8		inx				inx
.a7fc	20 4f a8	jsr $a84f			jsr 	_FAShiftToExponent
.a7ff	ca		dex				dex
.a800					_FAExponentsEqual:
.a800	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a803	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a806	30 10		bmi $a818			bmi 	_FADifferentSigns
.a808	20 c2 94	jsr $94c2			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a80b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a80e	10 3c		bpl $a84c			bpl 	_FAExit 					; if no, we are done.
.a810	20 a8 9e	jsr $9ea8			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a813	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a816	80 34		bra $a84c			bra 	_FAExit
.a818					_FADifferentSigns:
.a818	20 e8 94	jsr $94e8			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a81b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a81e	10 2c		bpl $a84c			bpl 	_FAExit 					; if no, we are done.
.a820	20 31 9e	jsr $9e31			jsr 	NSMNegate 					; netate result
.a823	20 3a 9e	jsr $9e3a			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a826	80 24		bra $a84c			bra 	_FAExit
.a828					_FAReturn1:
.a828	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a82b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a82e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a831	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a834	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a837	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a83a	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a83d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a840	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a843	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a846	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a849	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a84c					_FAExit:
.a84c	7a		ply				ply
.a84d	68		pla				pla
.a84e	60		rts				rts
.a84f					_FAShiftToExponent:
.a84f					_FAShiftToExponent2:
.a84f	98		tya				tya 								; compare Y to exponent
.a850	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a853	f0 08		beq $a85d			beq 	_FASEExit 					; exit if so.
.a855	20 a8 9e	jsr $9ea8			jsr 	NSMShiftRight	 			; shift the mantissa right
.a858	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a85b	80 f2		bra $a84f			bra 	_FAShiftToExponent2
.a85d					_FASEExit:
.a85d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a85e					CompareFloat:
.a85e	20 c5 a7	jsr $a7c5			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a861	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a864	29 f8		and #$f8			and 	#$F8
.a866	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a869	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a86c	f0 09		beq $a877			beq 	_FCExit 					; zero, so approximately identical
.a86e	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a870	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a873	10 02		bpl $a877			bpl 	_FCExit
.a875					_FCNegative:
.a875	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a877					_FCExit:
.a877	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a878					FDivideCommand:
.a878	fa		plx				plx	 								; restore stack position
.a879	20 5e a9	jsr $a95e			jsr 	FloatPrepare 				; prepare for floats
.a87c					FloatDivide:
.a87c	48		pha				pha
.a87d	e8		inx				inx
.a87e	20 6f a9	jsr $a96f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a881	ca		dex				dex
.a882	c9 00		cmp #$00			cmp 	#0
.a884	f0 20		beq $a8a6			beq 	_FDZero
.a886	20 6f a9	jsr $a96f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a889	f0 19		beq $a8a4			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a88b	20 b9 a6	jsr $a6b9			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a88e	20 46 a6	jsr $a646			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a891	20 6f a9	jsr $a96f			jsr		NSNormalise 				; renormalise
.a894	20 54 a7	jsr $a754			jsr 	CalculateSign 				; calculate result sign
.a897	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a89a	38		sec				sec
.a89b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a89e	38		sec				sec
.a89f	e9 1e		sbc #$1e			sbc 	#30
.a8a1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a8a4					_FDExit:
.a8a4	68		pla				pla
.a8a5	60		rts				rts
.a8a6					_FDZero:
.a8a6	a9 03		lda #$03		lda	#3
.a8a8	4c cd 92	jmp $92cd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a8ab					FloatFractionalPart:
.a8ab	5a		phy				phy
.a8ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a8af	29 7f		and #$7f			and 	#$7F
.a8b1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a8b4	20 6f a9	jsr $a96f			jsr 	NSNormalise
.a8b7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a8ba	38		sec				sec
.a8bb	e9 e0		sbc #$e0			sbc 	#$E0
.a8bd	90 31		bcc $a8f0			bcc 	_FFPExit 					; already fractional
.a8bf	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a8c1	b0 2a		bcs $a8ed			bcs 	_FFPZero
.a8c3	a8		tay				tay 								; put count to do in Y
.a8c4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a8c7	20 f2 a8	jsr $a8f2			jsr 	_FFPPartial
.a8ca	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a8cd	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a8d0	20 f2 a8	jsr $a8f2			jsr 	_FFPPartial
.a8d3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a8d6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a8d9	20 f2 a8	jsr $a8f2			jsr 	_FFPPartial
.a8dc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a8df	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a8e2	20 f2 a8	jsr $a8f2			jsr 	_FFPPartial
.a8e5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a8e8	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; zeroed check.
.a8eb	d0 03		bne $a8f0			bne 	_FFPExit
.a8ed					_FFPZero:
.a8ed	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.a8f0					_FFPExit:
.a8f0	7a		ply				ply
.a8f1	60		rts				rts
.a8f2					_FFPPartial:
.a8f2	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a8f4	f0 17		beq $a90d			beq 	_FFFPPExit
.a8f6	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a8f8	b0 0c		bcs $a906			bcs 	_FFFPPWholeByte
.a8fa	5a		phy				phy
.a8fb					_FFFPPLeft:
.a8fb	0a		asl a				asl 	a
.a8fc	88		dey				dey
.a8fd	d0 fc		bne $a8fb			bne 	_FFFPPLeft
.a8ff	7a		ply				ply
.a900					_FFFPPRight:
.a900	4a		lsr a				lsr 	a
.a901	88		dey				dey
.a902	d0 fc		bne $a900			bne 	_FFFPPRight
.a904	80 07		bra $a90d			bra 	_FFFPPExit
.a906					_FFFPPWholeByte:
.a906	98		tya				tya 								; subtract 8 from count
.a907	38		sec				sec
.a908	e9 08		sbc #$08			sbc 	#8
.a90a	a8		tay				tay
.a90b	a9 00		lda #$00			lda 	#0 							; and clear all
.a90d					_FFFPPExit:
.a90d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a90e					FloatIntegerPart:
.a90e	48		pha				pha
.a90f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a912	f0 1f		beq $a933			beq 	_FIPExit 					; if so do nothing
.a914	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; is it zero ?
.a917	f0 17		beq $a930			beq 	_FIPZero 					; if so return zero.
.a919	20 6f a9	jsr $a96f			jsr 	NSNormalise 				; normalise
.a91c	f0 12		beq $a930			beq 	_FIPZero 					; normalised to zero, exit zero
.a91e					_FIPShift:
.a91e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a921	10 08		bpl $a92b			bpl 	_FIPCheckZero
.a923	20 a8 9e	jsr $9ea8			jsr 	NSMShiftRight 				; shift mantissa right
.a926	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a929	80 f3		bra $a91e			bra 	_FIPShift
.a92b					_FIPCheckZero:
.a92b	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; avoid -0 problem
.a92e	d0 03		bne $a933			bne 	_FIPExit 					; set to zero if mantissa zero.
.a930					_FIPZero:
.a930	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.a933					_FIPExit:
.a933	68		pla				pla
.a934	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a935					FloatingPointMultiply:
.a935	20 5e a9	jsr $a95e			jsr 	FloatPrepare 				; prepare for floats
.a938					FloatMultiply:
.a938	48		pha				pha
.a939	20 6f a9	jsr $a96f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a93c	f0 1b		beq $a959			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a93e	e8		inx				inx
.a93f	20 6f a9	jsr $a96f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a942	ca		dex				dex
.a943	c9 00		cmp #$00			cmp 	#0
.a945	f0 0f		beq $a956			beq 	_FDSetZero
.a947	20 0f a7	jsr $a70f			jsr 	MultiplyShort 				; calculate the result.
.a94a	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a94d	18		clc				clc
.a94e	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a951	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a954	80 03		bra $a959			bra 	_FDExit
.a956					_FDSetZero:
.a956	20 85 9e	jsr $9e85			jsr 	NSMSetZero 					; return 0
.a959					_FDExit:
.a959	20 6f a9	jsr $a96f			jsr 	NSNormalise 				; normalise the result
.a95c	68		pla				pla
.a95d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a95e					FloatPrepare:
.a95e	20 e6 97	jsr $97e6			jsr 	DereferenceTopTwo 			; dereference the top two values
.a961	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a964	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a967	29 10		and #$10			and 	#NSBIsString
.a969	d0 01		bne $a96c			bne 	_FDType
.a96b	60		rts				rts
.a96c					_FDType:
.a96c	4c f6 ab	jmp $abf6			jmp 	TypeError
.a96f					NSNormalise:
.a96f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a972	29 80		and #$80			and 	#$80
.a974	09 08		ora #$08			ora 	#NSTFloat
.a976	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a979	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; if zero exit
.a97c	d0 09		bne $a987			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a97e	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a981	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a984	a9 00		lda #$00			lda 	#0 							; set Z flag
.a986	60		rts				rts
.a987					_NSNormaliseOptimise:
.a987	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a98a	d0 22		bne $a9ae			bne 	_NSNormaliseLoop
.a98c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a98f	30 1d		bmi $a9ae			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a991	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a994	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a997	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a99a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a99d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9a0	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a9a3	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a9a6	38		sec				sec
.a9a7	e9 08		sbc #$08			sbc 	#8
.a9a9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a9ac	80 d9		bra $a987			bra 	_NSNormaliseOptimise
.a9ae					_NSNormaliseLoop:
.a9ae	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a9b1	70 08		bvs $a9bb			bvs 	_NSNExit 					; exit if so with Z flag clear
.a9b3	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; shift mantissa left
.a9b6	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a9b9	80 f3		bra $a9ae			bra 	_NSNormaliseLoop
.a9bb					_NSNExit:
.a9bb	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a9bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9713					AssignNumber:
.9713	5a		phy				phy
.9714	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9717	85 36		sta $36				sta 	zTemp0
.9719	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.971c	85 37		sta $37				sta 	zTemp0+1
.971e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9721	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9723	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9726	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9728	c9 08		cmp #$08			cmp 	#NSTFloat
.972a	f0 2a		beq $9756			beq 	_ANFloat
.972c	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.972f	f0 05		beq $9736			beq		_ANNotFloat
.9731	e8		inx				inx
.9732	20 0e a9	jsr $a90e			jsr 	FloatIntegerPart 			; make it an integer
.9735	ca		dex				dex
.9736					_ANNotFloat:
.9736	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9739	29 03		and #$03			and 	#3
.973b	d0 05		bne $9742			bne 	_ANByteWord
.973d	20 62 97	jsr $9762			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9740	80 1e		bra $9760			bra 	_ANExit
.9742					_ANByteWord:
.9742	48		pha				pha 								; save count
.9743	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9746	92 36		sta ($36)			sta 	(zTemp0)
.9748	68		pla				pla
.9749	c9 01		cmp #$01			cmp	 	#1
.974b	f0 13		beq $9760			beq 	_ANExit
.974d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9750	a0 01		ldy #$01			ldy 	#1
.9752	91 36		sta ($36),y			sta 	(zTemp0),y
.9754	80 0a		bra $9760			bra 	_ANExit
.9756					_ANFloat:
.9756	20 62 97	jsr $9762			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9759	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.975c	a0 04		ldy #$04			ldy 	#4
.975e	91 36		sta ($36),y			sta 	(zTemp0),y
.9760					_ANExit:
.9760	7a		ply				ply
.9761	60		rts				rts
.9762					_ANCopy4PackSign:
.9762	a0 03		ldy #$03			ldy 	#3
.9764	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9767	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9769	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.976c	91 36		sta ($36),y			sta 	(zTemp0),y
.976e	88		dey				dey
.976f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9772	91 36		sta ($36),y			sta 	(zTemp0),y
.9774	88		dey				dey
.9775	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9778	91 36		sta ($36),y			sta 	(zTemp0),y
.977a	88		dey				dey
.977b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.977e	91 36		sta ($36),y			sta 	(zTemp0),y
.9780	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9781					AssignString:
.9781	5a		phy				phy
.9782	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9785	85 38		sta $38				sta 	zTemp1
.9787	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.978a	85 39		sta $39				sta 	zTemp1+1
.978c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.978f	85 36		sta $36				sta 	zTemp0
.9791	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9794	85 37		sta $37				sta 	zTemp0+1
.9796	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9798	b1 36		lda ($36),y			lda 	(zTemp0),y
.979a	f0 23		beq $97bf			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.979c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.979d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.979f	e9 02		sbc #$02			sbc 	#2
.97a1	85 3c		sta $3c				sta 	zsTemp
.97a3	a0 01		ldy #$01			ldy 	#1
.97a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.97a7	e9 00		sbc #$00			sbc 	#0
.97a9	85 3d		sta $3d				sta 	zsTemp+1
.97ab	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.97ad					_ASGetLength:
.97ad	c8		iny				iny
.97ae	b1 38		lda ($38),y			lda 	(zTemp1),y
.97b0	d0 fb		bne $97ad			bne 	_ASGetLength
.97b2	98		tya				tya 								; is this length <= current length
.97b3	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.97b5	90 20		bcc $97d7			bcc 	_ASCopyString
.97b7	f0 1e		beq $97d7			beq 	_ASCopyString
.97b9	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.97bb	a0 01		ldy #$01			ldy 	#1
.97bd	91 3c		sta ($3c),y			sta 	(zsTemp),y
.97bf					_ASNewStringRequired:
.97bf	e8		inx				inx 								; concrete the new string.
.97c0	20 91 ae	jsr $ae91			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.97c3	ca		dex				dex
.97c4	18		clc				clc
.97c5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.97c8	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.97ca	92 36		sta ($36)			sta 	(zTemp0)
.97cc	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.97cf	69 00		adc #$00			adc 	#0
.97d1	a0 01		ldy #$01			ldy 	#1
.97d3	91 36		sta ($36),y			sta 	(zTemp0),y
.97d5	80 0d		bra $97e4			bra 	_ASExit
.97d7					_ASCopyString:
.97d7	a0 00		ldy #$00			ldy 	#0
.97d9					_ASCopyLoop:
.97d9	b1 38		lda ($38),y			lda 	(zTemp1),y
.97db	c8		iny				iny
.97dc	c8		iny				iny
.97dd	91 3c		sta ($3c),y			sta 	(zsTemp),y
.97df	88		dey				dey
.97e0	c9 00		cmp #$00			cmp 	#0
.97e2	d0 f5		bne $97d9			bne 	_ASCopyLoop
.97e4					_ASExit:
.97e4	7a		ply				ply
.97e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.97e6					DereferenceTopTwo:
.97e6	e8		inx				inx
.97e7	20 eb 97	jsr $97eb			jsr 	Dereference 				; deref x+1
.97ea	ca		dex				dex  								; falls through to deref x
.97eb					Dereference:
.97eb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.97ee	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.97f0	f0 57		beq $9849			beq 	_DRFExit 					; not a reference
.97f2	5a		phy				phy
.97f3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.97f6	85 36		sta $36				sta 	zTemp0
.97f8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97fb	85 37		sta $37				sta 	zTemp0+1
.97fd	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9800	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9802	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9805	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9808	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.980a	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.980c	f0 0f		beq $981d			beq 	_DRFDereferenceTwo
.980e	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9810	f0 39		beq $984b			beq 	_DRFFull
.9812	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9815	29 03		and #$03			and 	#3
.9817	f0 32		beq $984b			beq 	_DRFFull 					; the whole word
.9819	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.981b	f0 07		beq $9824			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.981d					_DRFDereferenceTwo:
.981d	a0 01		ldy #$01			ldy 	#1
.981f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9821	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9824					_DRFClear23:
.9824	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9827	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.982a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.982d	29 18		and #$18			and 	#NSBTypeMask
.982f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9832	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9834	d0 12		bne $9848			bne 	_DRFNotString
.9836	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9839	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.983c	d0 0a		bne $9848			bne 	_DRFNotString
.983e	a9 4a		lda #$4a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9840	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9843	a9 98		lda #$98			lda 	#_DRFNullString >> 8
.9845	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9848					_DRFNotString
.9848	7a		ply				ply 								; restore Y and exit
.9849					_DRFExit:
.9849	60		rts				rts
.984a					_DRFNullString:
>984a	00						.byte 	0
.984b					_DRFFull:
.984b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.984d	b1 36		lda ($36),y			lda 	(zTemp0),y
.984f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9852	c8		iny				iny
.9853	b1 36		lda ($36),y			lda 	(zTemp0),y
.9855	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9858	c8		iny				iny
.9859	b1 36		lda ($36),y			lda 	(zTemp0),y
.985b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.985e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9861	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9864	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9866	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9869	f0 06		beq $9871			beq 	_DRFNoExponent
.986b	c8		iny				iny 								; if not, read the exponent as well.
.986c	b1 36		lda ($36),y			lda 	(zTemp0),y
.986e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9871					_DRFNoExponent:
.9871	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9874	10 0d		bpl $9883			bpl 	_DRFExit2 					; if not, then exit.
.9876	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9878	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.987b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.987e	09 80		ora #$80			ora 	#NSBIsNegative
.9880	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9883					_DRFExit2:
.9883	7a		ply				ply
.9884	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9885					EncodeNumberStart:
.9885	38		sec				sec
.9886	80 01		bra $9889			bra 	EncodeNumberContinue+1
.9888					EncodeNumberContinue:
.9888	18		clc				clc
.9889					EncodeNumber:
.9889	08		php				php 								; save reset.
.988a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.988c	f0 12		beq $98a0			beq 	_ENIsOkay
.988e	c9 30		cmp #$30			cmp 	#"0"
.9890	90 04		bcc $9896			bcc 	_ENBadNumber
.9892	c9 3a		cmp #$3a			cmp 	#"9"+1
.9894	90 0a		bcc $98a0			bcc 	_ENIsOkay
.9896					_ENBadNumber:
.9896	28		plp				plp 								; throw saved reset
.9897	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.989a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.989c	f0 7e		beq $991c			beq 	_ENConstructFinal
.989e					_ENFail:
.989e	18		clc				clc 								; not allowed
.989f	60		rts				rts
.98a0					_ENIsOkay:
.98a0	28		plp				plp 								; are we restarting
.98a1	90 15		bcc $98b8			bcc 	_ENNoRestart
.98a3					_ENStartEncode:
.98a3	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.98a5	f0 0c		beq $98b3			beq 	_ENFirstDP
.98a7	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.98a9	20 87 9e	jsr $9e87			jsr 	NSMSetByte
.98ac	a9 01		lda #$01			lda 	#ESTA_Low
.98ae					_ENExitChange:
.98ae	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.98b1	38		sec				sec
.98b2	60		rts				rts
.98b3					_ENFirstDP:
.98b3	20 85 9e	jsr $9e85			jsr 	NSMSetZero 					; clear integer part
.98b6	80 3f		bra $98f7			bra 	_ESTASwitchFloat			; go straight to float and exi
.98b8					_ENNoRestart:
.98b8	48		pha				pha 								; save on stack.
.98b9	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.98bc	c9 01		cmp #$01			cmp 	#ESTA_Low
.98be	f0 09		beq $98c9			beq  	_ESTALowState
.98c0	c9 02		cmp #$02			cmp 	#ESTA_High
.98c2	f0 29		beq $98ed			beq 	_ESTAHighState
.98c4	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.98c6	f0 3b		beq $9903			beq 	_ESTADecimalState
>98c8	db						.byte 	$DB 						; causes a break in the emulator
.98c9					_ESTALowState:
.98c9	68		pla				pla 								; get value back
.98ca	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.98cc	f0 29		beq $98f7			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.98ce	29 0f		and #$0f			and 	#15 						; make digit
.98d0	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.98d3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.98d6	0a		asl a				asl 	a
.98d7	0a		asl a				asl 	a
.98d8	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.98db	0a		asl a				asl 	a
.98dc	6d 86 04	adc $0486			adc 	DigitTemp
.98df	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98e2	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.98e4	90 05		bcc $98eb			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.98e6	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.98e8	8d 85 04	sta $0485			sta 	EncodeState
.98eb					_ESTANoSwitch:
.98eb	38		sec				sec
.98ec	60		rts				rts
.98ed					_ESTAHighState:
.98ed	68		pla				pla 								; get value back
.98ee	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.98f0	f0 05		beq $98f7			beq 	_ESTASwitchFloat
.98f2	20 56 99	jsr $9956			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.98f5	38		sec				sec
.98f6	60		rts				rts
.98f7					_ESTASwitchFloat:
.98f7	9c 87 04	stz $0487			stz 	DecimalCount
.98fa	e8		inx				inx 								; zero the decimal additive.
.98fb	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.98fe	ca		dex				dex
.98ff	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9901	80 ab		bra $98ae			bra 	_ENExitChange
.9903					_ESTADecimalState:
.9903	68		pla				pla 								; digit.
.9904	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9906	f0 96		beq $989e			beq 	_ENFail
.9908	e8		inx				inx 								; put digit into fractional part of X+1
.9909	20 56 99	jsr $9956			jsr 	ESTAShiftDigitIntoMantissa
.990c	ca		dex				dex
.990d	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9910	ad 87 04	lda $0487			lda 	DecimalCount
.9913	c9 0b		cmp #$0b			cmp 	#11
.9915	f0 02		beq $9919			beq 	_ESTADSFail
.9917	38		sec				sec
.9918	60		rts				rts
.9919					_ESTADSFail:
.9919	4c f1 ab	jmp $abf1			jmp 	RangeError
.991c					_ENConstructFinal:
.991c	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.991f	f0 33		beq $9954			beq 	_ENCFExit 					; no decimals
.9921	5a		phy				phy
.9922	0a		asl a				asl 	a 							; x 4 and CLC
.9923	0a		asl a				asl 	a
.9924	6d 87 04	adc $0487			adc 	DecimalCount
.9927	a8		tay				tay
.9928	b9 b0 ab	lda $abb0,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.992b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.992e	b9 b1 ab	lda $abb1,y			lda 	DecimalScalarTable-5+1,y
.9931	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9934	b9 b2 ab	lda $abb2,y			lda 	DecimalScalarTable-5+2,y
.9937	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.993a	b9 b3 ab	lda $abb3,y			lda 	DecimalScalarTable-5+3,y
.993d	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9940	b9 b4 ab	lda $abb4,y			lda 	DecimalScalarTable-5+4,y
.9943	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9946	a9 08		lda #$08			lda 	#NSTFloat
.9948	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.994b	7a		ply				ply
.994c	e8		inx				inx 								; multiply decimal const by decimal scalar
.994d	20 38 a9	jsr $a938			jsr 	FloatMultiply
.9950	ca		dex				dex
.9951	20 cd a7	jsr $a7cd			jsr 	FloatAdd 					; add to integer part.
.9954					_ENCFExit:
.9954	18		clc				clc 								; reject the digit.
.9955	60		rts				rts
.9956					ESTAShiftDigitIntoMantissa:
.9956	29 0f		and #$0f			and 	#15 						; save digit
.9958	48		pha				pha
.9959	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.995c	48		pha				pha
.995d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9960	48		pha				pha
.9961	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9964	48		pha				pha
.9965	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9968	48		pha				pha
.9969	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; x 2
.996c	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; x 4
.996f	18		clc				clc 								; pop mantissa and add
.9970	68		pla				pla
.9971	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9974	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9977	68		pla				pla
.9978	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.997b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.997e	68		pla				pla
.997f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9982	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9985	68		pla				pla
.9986	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9989	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.998c	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; x 10
.998f	68		pla				pla 								; add digit
.9990	18		clc				clc
.9991	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9994	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9997	90 0d		bcc $99a6			bcc 	_ESTASDExit
.9999	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.999c	d0 08		bne $99a6			bne 	_ESTASDExit
.999e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.99a1	d0 03		bne $99a6			bne 	_ESTASDExit
.99a3	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.99a6					_ESTASDExit:
.99a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.99a7					EvaluateTerm:
.99a7	b1 30		lda ($30),y			lda 	(codePtr),y
.99a9	30 18		bmi $99c3			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.99ab	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.99ad	b0 6f		bcs $9a1e			bcs 	_ETVariable
.99af	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.99b1	90 6e		bcc $9a21			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.99b3	c9 3a		cmp #$3a			cmp 	#'9'+1
.99b5	b0 6a		bcs $9a21			bcs 	_ETPuncUnary
.99b7	20 85 98	jsr $9885			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.99ba					_ETNumber:
.99ba	c8		iny				iny 								; keep encoding until we have the numbers
.99bb	b1 30		lda ($30),y			lda 	(codePtr),y
.99bd	20 88 98	jsr $9888			jsr 	EncodeNumberContinue
.99c0	b0 f8		bcs $99ba			bcs 	_ETNumber 					; go back if accepted.
.99c2	60		rts				rts
.99c3					_ETCheckUnary:
.99c3	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.99c5	f0 41		beq $9a08			beq 	_ETString
.99c7	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.99c9	f0 12		beq $99dd			beq 	_ETHexConstant
.99cb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.99cd	90 0b		bcc $99da			bcc 	_ETSyntaxError
.99cf	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.99d1	b0 07		bcs $99da			bcs 	_ETSyntaxError
.99d3	da		phx				phx 								; push X on the stack
.99d4	0a		asl a				asl 	a 							; put vector x 2 into X
.99d5	aa		tax				tax
.99d6	c8		iny				iny 								; consume unary function token
.99d7	7c 94 8f	jmp ($8f94,x)			jmp 	(VectorSet0,x) 				; and do it.
.99da					_ETSyntaxError:
.99da	4c ec ab	jmp $abec			jmp 	SyntaxError
.99dd					_ETHexConstant:
.99dd	c8		iny				iny 								; skip #
.99de	c8		iny				iny 								; skip count
.99df	20 85 9e	jsr $9e85			jsr 	NSMSetZero 					; clear result
.99e2					_ETHLoop:
.99e2	b1 30		lda ($30),y			lda 	(codePtr),y
.99e4	c8		iny				iny 								; and consume
.99e5	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.99e7	f0 1e		beq $9a07			beq 	_ETHExit
.99e9	48		pha				pha 								; save on stack.
.99ea	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; x 2
.99ed	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; x 4
.99f0	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; x 8
.99f3	20 9a 9e	jsr $9e9a			jsr 	NSMShiftLeft 				; x 16
.99f6	68		pla				pla 								; ASCII
.99f7	c9 41		cmp #$41			cmp 	#'A'
.99f9	90 02		bcc $99fd			bcc 	_ETHNotChar
.99fb	e9 07		sbc #$07			sbc 	#7
.99fd					_ETHNotChar:
.99fd	29 0f		and #$0f			and 	#15 						; digit now
.99ff	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9a02	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a05	80 db		bra $99e2			bra 	_ETHLoop 					; go round.
.9a07					_ETHExit:
.9a07	60		rts				rts
.9a08					_ETString:
.9a08	c8		iny				iny 								; look at length
.9a09	b1 30		lda ($30),y			lda 	(codePtr),y
.9a0b	48		pha				pha
.9a0c	c8		iny				iny 								; first character
.9a0d	20 cf 9e	jsr $9ecf			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9a10	68		pla				pla 								; restore count and save
.9a11	85 36		sta $36				sta 	zTemp0
.9a13	98		tya				tya 								; add length to Y to skip it.
.9a14	18		clc				clc
.9a15	65 36		adc $36				adc 	zTemp0
.9a17	a8		tay				tay
.9a18	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9a1a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a1d	60		rts				rts
.9a1e					_ETVariable:
.9a1e	4c 78 9a	jmp $9a78			jmp 	VariableHandler
.9a21					_ETPuncUnary:
.9a21	c8		iny				iny 								; consume the unary character
.9a22	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9a24	f0 2d		beq $9a53			beq 	_ETUnaryNegate
.9a26	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9a28	f0 39		beq $9a63			beq 	_ETDereference
.9a2a	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9a2c	f0 43		beq $9a71			beq 	_ETParenthesis
.9a2e	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9a30	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9a32	f0 06		beq $9a3a			beq 	_ETIndirection
.9a34	e6 36		inc $36				inc 	zTemp0
.9a36	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9a38	d0 a0		bne $99da			bne 	_ETSyntaxError
.9a3a					_ETIndirection:
.9a3a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9a3c	1a		inc a				inc 	a
.9a3d	48		pha				pha
.9a3e	20 a7 99	jsr $99a7			jsr 	EvaluateTerm				; evaluate the term
.9a41	20 eb 97	jsr $97eb			jsr 	Dereference 				; dereference it.
.9a44	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9a47	d0 07		bne $9a50			bne 	_ETTypeMismatch
.9a49	68		pla				pla 								; indirection 1-2
.9a4a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9a4c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a4f	60		rts				rts
.9a50					_ETTypeMismatch:
.9a50	4c f6 ab	jmp $abf6			jmp 	TypeError
.9a53					_ETUnaryNegate:
.9a53	20 a7 99	jsr $99a7			jsr 	EvaluateTerm				; evaluate the term
.9a56	20 eb 97	jsr $97eb			jsr 	Dereference 				; dereference it.
.9a59	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9a5c	29 10		and #$10			and 	#NSTString
.9a5e	d0 f0		bne $9a50			bne 	_ETTypeMismatch
.9a60	4c 31 9e	jmp $9e31			jmp 	NSMNegate  					; just toggles the sign bit.
.9a63					_ETDereference:
.9a63	20 a7 99	jsr $99a7			jsr 	EvaluateTerm				; evaluate the term
.9a66	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9a69	29 20		and #$20			and 	#NSBIsReference
.9a6b	f0 e3		beq $9a50			beq 	_ETTypeMismatch
.9a6d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9a70	60		rts				rts
.9a71					_ETParenthesis:
.9a71	20 d6 96	jsr $96d6			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9a74	20 06 a6	jsr $a606			jsr 	CheckRightBracket 			; check for )
.9a77	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9a78					VariableHandler:
.9a78	b1 30		lda ($30),y			lda 	(codePtr),y
.9a7a	18		clc				clc
.9a7b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9a7d	85 37		sta $37				sta 	zTemp0+1
.9a7f	c8		iny				iny
.9a80	b1 30		lda ($30),y			lda 	(codePtr),y
.9a82	85 36		sta $36				sta 	zTemp0
.9a84	c8		iny				iny
.9a85	18		clc				clc									; copy variable address+3 to mantissa
.9a86	69 03		adc #$03			adc 	#3
.9a88	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a8b	a5 37		lda $37				lda 	zTemp0+1
.9a8d	69 00		adc #$00			adc 	#0
.9a8f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a92	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9a95	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9a98	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9a9b	5a		phy				phy
.9a9c	a0 02		ldy #$02			ldy 	#2 							; read type
.9a9e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9aa0	7a		ply				ply
.9aa1	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9aa3	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9aa5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9aa8	29 04		and #$04			and 	#NSBIsArray
.9aaa	d0 01		bne $9aad			bne 	_VHArray
.9aac	60		rts				rts
.9aad					_VHArray:
.9aad	e8		inx				inx
.9aae	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9ab1	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9ab3	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9ab6	b1 30		lda ($30),y			lda 	(codePtr),y
.9ab8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9aba	d0 06		bne $9ac2			bne 	_VHNoSecondIndex
.9abc	c8		iny				iny 								; skip the comma
.9abd	e8		inx				inx
.9abe	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9ac1	ca		dex				dex
.9ac2					_VHNoSecondIndex:
.9ac2	ca		dex				dex 								; set X back.
.9ac3	20 06 a6	jsr $a606			jsr 	CheckRightBracket 			; and check the right bracket.
.9ac6	5a		phy				phy 								; save position
.9ac7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9aca	85 3e		sta $3e				sta 	zaTemp
.9acc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9acf	85 3f		sta $3f				sta 	zaTemp+1
.9ad1	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9ad3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ad5	f0 02		beq $9ad9			beq 	_VHHas2Mask
.9ad7	a9 ff		lda #$ff			lda 	#$FF
.9ad9					_VHHas2Mask:
.9ad9	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9adc	f0 54		beq $9b32			beq 	_VHBadIndex
.9ade	0a		asl a				asl 	a 							; carry will be set if a second index
.9adf	90 09		bcc $9aea			bcc 	_VHCheckFirstIndex
.9ae1	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9ae3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ae5	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9ae8	90 48		bcc $9b32			bcc 	_VHBadIndex
.9aea					_VHCheckFirstIndex:
.9aea	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9aec	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9aee	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9af1	90 3f		bcc $9b32			bcc 	_VHBadIndex
.9af3	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9af5	64 37		stz $37				stz 	zTemp0+1
.9af7	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9afa	30 0f		bmi $9b0b			bmi 	_VHNoMultiply
.9afc	da		phx				phx
.9afd	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9b00	48		pha				pha
.9b01	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9b03	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b05	1a		inc a				inc 	a 							; add 1 for zero base
.9b06	fa		plx				plx
.9b07	20 88 aa	jsr $aa88			jsr 	Multiply8x8 				; calculate -> Z0
.9b0a	fa		plx				plx
.9b0b					_VHNoMultiply:
.9b0b	18		clc				clc
.9b0c	a5 36		lda $36				lda 	zTemp0
.9b0e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9b11	85 36		sta $36				sta 	zTemp0
.9b13	a5 37		lda $37				lda 	zTemp0+1
.9b15	69 00		adc #$00			adc 	#0
.9b17	85 37		sta $37				sta 	zTemp0+1
.9b19	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9b1c	20 f9 89	jsr $89f9			jsr 	ScaleByBaseType
.9b1f	18		clc				clc
.9b20	b2 3e		lda ($3e)			lda 	(zaTemp)
.9b22	65 36		adc $36				adc 	zTemp0
.9b24	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b27	a0 01		ldy #$01			ldy 	#1
.9b29	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b2b	65 37		adc $37				adc 	zTemp0+1
.9b2d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b30	7a		ply				ply 								; restore position
.9b31	60		rts				rts
.9b32					_VHBadIndex:
.9b32	a9 17		lda #$17		lda	#23
.9b34	4c cd 92	jmp $92cd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a9be					AbsUnary:
.a9be	fa		plx				plx 								; restore stack pos
.a9bf	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber 				; get a float or int
.a9c2	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.a9c5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a9c8	29 7f		and #$7f			and 	#$7F
.a9ca	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9b37					AllocUnary:
.9b37	fa		plx				plx 								; restore stack pos
.9b38	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger		; get bytes required.
.9b3b	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.9b3e	da		phx				phx 								; save X/Y
.9b3f	5a		phy				phy
.9b40	8a		txa				txa 								; copy X into Y
.9b41	a8		tay				tay
.9b42	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9b45	aa		tax				tax
.9b46	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9b49	20 56 9b	jsr $9b56			jsr 	AllocateXABytes 			; allocate memory
.9b4c	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9b4f	8a		txa				txa
.9b50	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9b53	7a		ply				ply
.9b54	fa		plx				plx
.9b55	60		rts				rts
.9b56					AllocateXABytes:
.9b56	5a		phy				phy
.9b57	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9b5a	84 36		sty $36				sty 	zTemp0
.9b5c	5a		phy				phy
.9b5d	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9b60	84 37		sty $37				sty 	zTemp0+1
.9b62	5a		phy				phy
.9b63	18		clc				clc 								; add to low memory pointer
.9b64	6d 8c 04	adc $048c			adc 	lowMemPtr
.9b67	8d 8c 04	sta $048c			sta 	lowMemPtr
.9b6a	8a		txa				txa
.9b6b	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9b6e	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9b71	b0 2f		bcs $9ba2			bcs 	CISSMemory
.9b73	20 94 9b	jsr $9b94			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9b76					_ClearMemory:
.9b76	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9b79	c5 36		cmp $36				cmp 	zTemp0
.9b7b	d0 07		bne $9b84			bne 	_CMClearNext
.9b7d	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9b80	c5 37		cmp $37				cmp 	zTemp0+1
.9b82	f0 0c		beq $9b90			beq 	_CMExit
.9b84					_CMClearNext:
.9b84	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9b86	92 36		sta ($36)			sta 	(zTemp0)
.9b88	e6 36		inc $36				inc 	zTemp0
.9b8a	d0 ea		bne $9b76			bne 	_ClearMemory
.9b8c	e6 37		inc $37				inc		zTemp0+1
.9b8e	80 e6		bra $9b76			bra 	_ClearMemory
.9b90					_CMExit:
.9b90	fa		plx				plx
.9b91	68		pla				pla
.9b92	7a		ply				ply
.9b93	60		rts				rts
.9b94					CheckIdentifierStringSpace:
.9b94	48		pha				pha
.9b95	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9b98	18		clc				clc
.9b99	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9b9b	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9b9e	b0 02		bcs $9ba2			bcs 	CISSMemory
.9ba0	68		pla				pla
.9ba1	60		rts				rts
.9ba2					CISSMemory:
.9ba2	a9 06		lda #$06		lda	#6
.9ba4	4c cd 92	jmp $92cd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a9ce					AscUnary:
.a9ce	fa		plx				plx 								; restore stack pos
.a9cf	20 e4 9d	jsr $9de4			jsr 	EvaluateString 				; get a string
.a9d2	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a9d4	20 87 9e	jsr $9e87			jsr 	NSMSetByte
.a9d7	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.a9da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a9db					FracUnary:
.a9db	fa		plx				plx 								; restore stack pos
.a9dc	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber 				; get a float or int
.a9df	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.a9e2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a9e5	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a9e7	f0 04		beq $a9ed			beq 	_IUZero
.a9e9	20 ab a8	jsr $a8ab			jsr 	FloatFractionalPart
.a9ec	60		rts				rts
.a9ed					_IUZero:
.a9ed	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.a9f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a9f1					IntUnary:
.a9f1	fa		plx				plx 								; restore stack pos
.a9f2	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber 				; get a float or int
.a9f5	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.a9f8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a9fb	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a9fd	f0 03		beq $aa02			beq 	_IUExit
.a9ff	20 0e a9	jsr $a90e			jsr 	FloatIntegerPart
.aa02					_IUExit:
.aa02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.aa03					LenUnary:
.aa03	fa		plx				plx 								; restore stack pos
.aa04	20 e4 9d	jsr $9de4			jsr 	EvaluateString 				; get a string
.aa07	5a		phy				phy
.aa08	a0 00		ldy #$00			ldy 	#0 							; find length
.aa0a					_LenFind:
.aa0a	b1 36		lda ($36),y			lda 	(zTemp0),y
.aa0c	f0 06		beq $aa14			beq 	_LenExit
.aa0e	c8		iny				iny
.aa0f	d0 f9		bne $aa0a			bne 	_LenFind
.aa11	4c f1 ab	jmp $abf1			jmp 	RangeError 					; string > 255
.aa14					_LenExit:
.aa14	98		tya				tya
.aa15	20 87 9e	jsr $9e87			jsr 	NSMSetByte
.aa18	7a		ply				ply
.aa19	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.aa1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9ba7					Unary_Not:
.9ba7	fa		plx				plx
.9ba8	20 fc 9d	jsr $9dfc			jsr 	EvaluateInteger 			; get integer
.9bab	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.9bae	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; zero mantissa ?
.9bb1	f0 04		beq $9bb7			beq 	_NotZero
.9bb3	20 85 9e	jsr $9e85			jsr 	NSMSetZero
.9bb6	60		rts				rts
.9bb7					_NotZero:
.9bb7	4c 3a 93	jmp $933a			jmp 	ReturnTrue
.9bba					_UNBad:
.9bba	4c fb ab	jmp $abfb			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9bbd					Unary_Random:
.9bbd	fa		plx				plx
.9bbe	20 36 9c	jsr $9c36			jsr 	Random32Bit 				; get a random number
.9bc1	20 1b 9c	jsr $9c1b			jsr 	URCopyToMantissa  			; put in mantissa
.9bc4	e8		inx				inx
.9bc5	20 11 9e	jsr $9e11			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9bc8	ca		dex				dex
.9bc9	20 8a a6	jsr $a68a			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9bcc	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9bcf	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9bd2	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.9bd5	60		rts				rts
.9bd6					Unary_Rnd:
.9bd6	fa		plx				plx
.9bd7	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber 				; number to use.
.9bda	20 06 a6	jsr $a606			jsr 	CheckRightBracket 			; closing bracket
.9bdd	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9be0	f0 2b		beq $9c0d			beq 	_URCopySeed
.9be2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9be5	10 23		bpl $9c0a			bpl 	_URDontSeed
.9be7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9bea	49 17		eor #$17			eor 	#$17
.9bec	8d 88 04	sta $0488			sta 	RandomSeed+0
.9bef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bf2	49 a5		eor #$a5			eor 	#$A5
.9bf4	8d 89 04	sta $0489			sta 	RandomSeed+1
.9bf7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9bfa	49 c2		eor #$c2			eor 	#$C2
.9bfc	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9bff	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9c02	49 9d		eor #$9d			eor 	#$9D
.9c04	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9c07	20 36 9c	jsr $9c36			jsr 	Random32Bit
.9c0a					_URDontSeed:
.9c0a	20 36 9c	jsr $9c36			jsr 	Random32Bit 				; generate a number.
.9c0d					_URCopySeed:
.9c0d	20 1b 9c	jsr $9c1b			jsr 	URCopyToMantissa 			; copy into mantissa
.9c10	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9c12	8d 28 04	sta $0428			sta 	NSExponent
.9c15	a9 08		lda #$08			lda 	#NSTFloat
.9c17	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9c1a	60		rts				rts
.9c1b					URCopyToMantissa:
.9c1b	ad 88 04	lda $0488			lda 	RandomSeed+0
.9c1e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c21	ad 89 04	lda $0489			lda 	RandomSeed+1
.9c24	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c27	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9c2a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c2d	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9c30	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9c32	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c35	60		rts				rts
.9c36					Random32Bit:
.9c36	5a		phy				phy
.9c37	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9c39	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9c3c	d0 03		bne $9c41			bne 	_Random1
.9c3e	a8		tay				tay 								; if so do it 256 times
.9c3f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9c41					_Random1:
.9c41	0a		asl a				asl 	a 							; LSFR RNG
.9c42	2e 89 04	rol $0489			rol 	RandomSeed+1
.9c45	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9c48	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9c4b	90 02		bcc $9c4f			bcc 	_Random2
.9c4d	49 c5		eor #$c5			eor 	#$C5
.9c4f					_Random2:
.9c4f	88		dey				dey
.9c50	d0 ef		bne $9c41			bne 	_Random1
.9c52	8d 88 04	sta $0488			sta 	RandomSeed+0
.9c55	7a		ply				ply
.9c56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.aa1d					SgnUnary:
.aa1d	fa		plx				plx 								; restore stack pos
.aa1e	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber 				; get a float or int
.aa21	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.aa24	20 b5 9e	jsr $9eb5			jsr 	NSMIsZero 					; if zero
.aa27	f0 10		beq $aa39			beq 	_SGZero  					; return Int Zero
.aa29	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.aa2c	48		pha				pha
.aa2d	a9 01		lda #$01			lda 	#1 							; set to 1
.aa2f	20 87 9e	jsr $9e87			jsr 	NSMSetByte
.aa32	68		pla				pla
.aa33	29 80		and #$80			and		#$80 						; copy the sign byte out
.aa35	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa38	60		rts				rts
.aa39	20 85 9e	jsr $9e85	_SGZero:jsr 	NSMSetZero
.aa3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.aa3d					ValUnary:
.aa3d	fa		plx				plx 								; restore stack pos
.aa3e	20 53 aa	jsr $aa53			jsr 	ValMainCode 				; do the main val() code
.aa41	b0 01		bcs $aa44			bcs 	_VUError 					; couldn't convert
.aa43	60		rts				rts
.aa44					_VUError:
.aa44	4c f6 ab	jmp $abf6			jmp 	TypeError
.aa47					IsValUnary:
.aa47	fa		plx				plx 								; restore stack pos
.aa48	20 53 aa	jsr $aa53			jsr 	ValMainCode 				; do the main val() code
.aa4b	b0 03		bcs $aa50			bcs 	_VUBad
.aa4d	4c 3a 93	jmp $933a			jmp 	ReturnTrue
.aa50					_VUBad:
.aa50	4c 46 93	jmp $9346			jmp 	ReturnFalse
.aa53					ValMainCode:
.aa53	20 e4 9d	jsr $9de4			jsr 	EvaluateString 				; get a string
.aa56	20 06 a6	jsr $a606			jsr 	CheckRightBracket 			; check right bracket present
.aa59	5a		phy				phy
.aa5a	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.aa5c	f0 17		beq $aa75			beq 	_VMCFail2
.aa5e	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.aa60	48		pha				pha 								; save first character
.aa61	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.aa63	d0 01		bne $aa66			bne 	_VMCStart
.aa65	c8		iny				iny 								; skip over -
.aa66					_VMCStart:
.aa66	38		sec				sec 								; initialise first time round.
.aa67					_VMCNext:
.aa67	c8		iny				iny 								; pre-increment
.aa68	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.aa6a	f0 0c		beq $aa78			beq 	_VMCSuccess 				; successful.
.aa6c	20 89 98	jsr $9889			jsr 	EncodeNumber 				; send it to the number-builder
.aa6f	90 03		bcc $aa74			bcc 	_VMCFail 					; if failed, give up.
.aa71	18		clc				clc 								; next time round, countinue
.aa72	80 f3		bra $aa67			bra 	_VMCNext
.aa74					_VMCFail:
.aa74	68		pla				pla
.aa75					_VMCFail2:
.aa75	7a		ply				ply
.aa76	38		sec				sec
.aa77	60		rts				rts
.aa78					_VMCSuccess:
.aa78	a9 00		lda #$00			lda 	#0 							; construct final
.aa7a	20 89 98	jsr $9889			jsr 	EncodeNumber
.aa7d	68		pla				pla
.aa7e	c9 2d		cmp #$2d			cmp 	#"-"
.aa80	d0 03		bne $aa85			bne 	_VMCNotNegative
.aa82	20 31 9e	jsr $9e31			jsr		NSMNegate
.aa85					_VMCNotNegative:
.aa85	7a		ply				ply
.aa86	18		clc				clc
.aa87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9c57					ChrUnary:
.9c57	fa		plx				plx 								; restore stack pos
.9c58	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger			; get value
.9c5b	48		pha				pha
.9c5c	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.9c5f	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c61	20 12 af	jsr $af12			jsr 	StringTempAllocate
.9c64	68		pla				pla 								; write number to it
.9c65	20 50 af	jsr $af50			jsr 	StringTempWrite
.9c68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c69					SpcUnary:
.9c69	fa		plx				plx 								; restore stack pos
.9c6a	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger			; get value
.9c6d	5a		phy				phy
.9c6e	48		pha				pha 								; save count
.9c6f	20 12 af	jsr $af12			jsr 	StringTempAllocate
.9c72	7a		ply				ply 								; to do count in Y
.9c73					_SpcLoop:
.9c73	c0 00		cpy #$00			cpy 	#0
.9c75	f0 08		beq $9c7f			beq 	_SpcExit
.9c77	a9 20		lda #$20			lda 	#32
.9c79	20 50 af	jsr $af50			jsr 	StringTempWrite
.9c7c	88		dey				dey
.9c7d	80 f4		bra $9c73			bra 	_SPCLoop
.9c7f					_SpcExit:
.9c7f	7a		ply				ply
.9c80	20 06 a6	jsr $a606			jsr 	CheckRightBracket
.9c83	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9c84					Unary_Str:
.9c84	fa		plx				plx
.9c85	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber  			; get number
.9c88	20 06 a6	jsr $a606			jsr 	CheckRightBracket 			; closing bracket
.9c8b	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c8d	20 a6 9c	jsr $9ca6			jsr 	ConvertNumberToString 		; do the conversion.
.9c90	a9 21		lda #$21			lda		#33 						; create buffer
.9c92	20 12 af	jsr $af12			jsr 	StringTempAllocate 			; allocate memory
.9c95	da		phx				phx
.9c96	a2 00		ldx #$00			ldx 	#0
.9c98					_USCopy:
.9c98	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c9b	20 50 af	jsr $af50			jsr 	StringTempWrite
.9c9e	e8		inx				inx
.9c9f	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9ca2	d0 f4		bne $9c98			bne 	_USCopy
.9ca4	fa		plx				plx
.9ca5	60		rts				rts
.9ca6					ConvertNumberToString:
.9ca6	5a		phy				phy 								; save code position
.9ca7	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9caa	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9cad	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9cb0	10 0a		bpl $9cbc			bpl 	_CNTSNotNegative
.9cb2	29 7f		and #$7f			and 	#$7F 						; make +ve
.9cb4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cb7	a9 2d		lda #$2d			lda 	#"-"
.9cb9	20 22 9d	jsr $9d22			jsr 	WriteDecimalBuffer
.9cbc					_CNTSNotNegative:
.9cbc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9cbf	f0 15		beq $9cd6			beq 	_CNTSNotFloat
.9cc1	e8		inx				inx 								; round up
.9cc2	a9 01		lda #$01			lda 	#1
.9cc4	20 87 9e	jsr $9e87			jsr 	NSMSetByte
.9cc7	ca		dex				dex
.9cc8	bd 28 04	lda $0428,x			lda		NSExponent,x
.9ccb	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9cce	a9 08		lda #$08			lda 	#NSTFloat
.9cd0	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9cd3	20 cd a7	jsr $a7cd			jsr 	FloatAdd
.9cd6					_CNTSNotFloat:
.9cd6	20 04 9d	jsr $9d04			jsr 	MakePlusTwoString
.9cd9	20 ab a8	jsr $a8ab			jsr 	FloatFractionalPart 		; get the fractional part
.9cdc	20 6f a9	jsr $a96f			jsr 	NSNormalise					; normalise , exit if zero
.9cdf	f0 21		beq $9d02			beq 	_CNTSExit
.9ce1	a9 2e		lda #$2e			lda 	#"."
.9ce3	20 22 9d	jsr $9d22			jsr 	WriteDecimalBuffer 			; write decimal place
.9ce6					_CNTSDecimal:
.9ce6	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9ce9	30 17		bmi $9d02			bmi 	_CNTSExit
.9ceb	e8		inx				inx 								; x 10.0
.9cec	a9 0a		lda #$0a			lda 	#10
.9cee	20 87 9e	jsr $9e87			jsr 	NSMSetByte
.9cf1	a9 08		lda #$08			lda 	#NSTFloat
.9cf3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cf6	ca		dex				dex
.9cf7	20 38 a9	jsr $a938			jsr 	FloatMultiply
.9cfa	20 04 9d	jsr $9d04			jsr 	MakePlusTwoString
.9cfd	20 ab a8	jsr $a8ab			jsr 	FloatFractionalPart 		; get the fractional part
.9d00	80 e4		bra $9ce6			bra 	_CNTSDecimal 				; keep going.
.9d02					_CNTSExit:
.9d02	7a		ply				ply
.9d03	60		rts				rts
.9d04					MakePlusTwoString:
.9d04	da		phx				phx
.9d05	20 5c 9e	jsr $9e5c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9d08	e8		inx				inx 								; access it
.9d09	e8		inx				inx
.9d0a	20 0e a9	jsr $a90e			jsr 	FloatIntegerPart 			; make it an integer
.9d0d	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9d0f	20 77 a7	jsr $a777			jsr 	ConvertInt32
.9d12	a2 00		ldx #$00			ldx	 	#0
.9d14					_MPTSCopy:
.9d14	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9d17	20 22 9d	jsr $9d22			jsr 	WriteDecimalBuffer
.9d1a	e8		inx				inx
.9d1b	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9d1e	d0 f4		bne $9d14			bne 	_MPTSCopy
.9d20	fa		plx				plx
.9d21	60		rts				rts
.9d22					WriteDecimalBuffer:
.9d22	da		phx				phx
.9d23	ae 95 04	ldx $0495			ldx 	dbOffset
.9d26	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9d29	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9d2c	ee 95 04	inc $0495			inc 	dbOffset
.9d2f	fa		plx				plx
.9d30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9d31					Unary_Left:
.9d31	fa		plx				plx
.9d32	18		clc				clc 								; only one parameter
.9d33	20 a8 9d	jsr $9da8			jsr 	SubstringInitial 			; set up.
.9d36	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9d39	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9d3c	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9d3f	80 2c		bra $9d6d			bra 	SubstringMain
.9d41					Unary_Right:
.9d41	fa		plx				plx
.9d42	18		clc				clc 								; only one parameter
.9d43	20 a8 9d	jsr $9da8			jsr 	SubstringInitial 			; set up.
.9d46	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9d49	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9d4c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9d4f	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9d52	b0 02		bcs $9d56			bcs 	_URNotUnderflow
.9d54	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d56					_URNotUnderFlow:
.9d56	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d59	80 12		bra $9d6d			bra 	SubStringMain
.9d5b					Unary_Mid:
.9d5b	fa		plx				plx
.9d5c	38		sec				sec 								; two parameters
.9d5d	20 a8 9d	jsr $9da8			jsr 	SubstringInitial 			; set up.
.9d60	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d63	f0 05		beq $9d6a			beq 	_UMError
.9d65	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d68	80 03		bra $9d6d			bra 	SubStringMain
.9d6a					_UMError:
.9d6a	4c fb ab	jmp $abfb			jmp 	ArgumentError
.9d6d					SubStringMain:
.9d6d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d70	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9d73	b0 2d		bcs $9da2			bcs 	_SSMNull 					; if so, return an empty string.
.9d75	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d78	f0 28		beq $9da2			beq 	_SSMNull 					; return empty string.
.9d7a	18		clc				clc 								; add the offset +1 to the address and
.9d7b	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9d7e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9d81	85 36		sta $36				sta 	zTemp0
.9d83	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9d86	69 00		adc #$00			adc 	#0
.9d88	85 37		sta $37				sta 	zTemp0+1
.9d8a					_SSMNoCarry:
.9d8a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d8d	20 12 af	jsr $af12			jsr 	StringTempAllocate 			; allocate that many characters
.9d90	5a		phy				phy 								; save Y
.9d91	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d93					_SSMCopy:
.9d93	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d95	f0 09		beq $9da0			beq 	_SSMEString 				; no more to copy
.9d97	20 50 af	jsr $af50			jsr 	StringTempWrite 			; and write it out.
.9d9a	c8		iny				iny
.9d9b	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d9e	d0 f3		bne $9d93			bne 	_SSMCopy
.9da0					_SSMEString:
.9da0	7a		ply				ply
.9da1					_SSMExit:
.9da1	60		rts				rts
.9da2					_SSMNull:
.9da2	a9 00		lda #$00			lda 	#0
.9da4	20 12 af	jsr $af12			jsr 	StringTempAllocate
.9da7	60		rts				rts
.9da8					SubstringInitial:
.9da8	da		phx				phx 								; save initial stack position
.9da9	08		php				php 								; save carry on stack indicating 2 parameters
.9daa	20 e4 9d	jsr $9de4			jsr 	EvaluateString 				; get a string
.9dad	5a		phy				phy 								; calculate length to exponent.
.9dae	a0 ff		ldy #$ff			ldy 	#$FF
.9db0					_SIFindLength:
.9db0	c8		iny				iny
.9db1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9db3	d0 fb		bne $9db0			bne 	_SIFindLength
.9db5	98		tya				tya
.9db6	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9db9	7a		ply				ply
.9dba	e8		inx				inx
.9dbb	20 0e a6	jsr $a60e			jsr 	CheckComma 					; comma next
.9dbe	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger 		; get next parameter
.9dc1	28		plp				plp 								; is it the last parameter ?
.9dc2	90 07		bcc $9dcb			bcc 	_SSIExit 					; if so, exit.
.9dc4	e8		inx				inx
.9dc5	20 0e a6	jsr $a60e			jsr 	CheckComma 					; comma next
.9dc8	20 1d 9e	jsr $9e1d			jsr 	Evaluate8BitInteger 		; get last parameter
.9dcb					_SSIExit:
.9dcb	fa		plx				plx
.9dcc	20 06 a6	jsr $a606			jsr 	CheckRightBracket 			; check closing bracket
.9dcf	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9dd0					EvaluateValue:
.9dd0	48		pha				pha
.9dd1	20 d6 96	jsr $96d6			jsr		EvaluateExpression 			; expression
.9dd4	20 eb 97	jsr $97eb			jsr 	Dereference					; derefernce it
.9dd7	68		pla				pla
.9dd8	60		rts				rts
.9dd9					EvaluateNumber:
.9dd9	20 d0 9d	jsr $9dd0			jsr 	EvaluateValue 				; get a value
.9ddc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9ddf	29 10		and #$10			and 	#NSBIsString
.9de1	d0 16		bne $9df9			bne 	HelperTypeError
.9de3	60		rts				rts
.9de4					EvaluateString:
.9de4	20 d0 9d	jsr $9dd0			jsr 	EvaluateValue 				; get a value
.9de7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9dea	29 10		and #$10			and 	#NSBIsString
.9dec	f0 0b		beq $9df9			beq 	HelperTypeError
.9dee					CopyAddressToTemp0:
.9dee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9df1	85 36		sta $36				sta 	zTemp0
.9df3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9df6	85 37		sta $37				sta 	zTemp0+1
.9df8	60		rts				rts
.9df9					HelperTypeError:
.9df9	4c f6 ab	jmp $abf6			jmp 	TypeError
.9dfc					EvaluateInteger:
.9dfc	20 d9 9d	jsr $9dd9			jsr 	EvaluateNumber
.9dff	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9e02	d0 0a		bne $9e0e			bne 	HelperValueError 			; if not, it's a float.
.9e04	60		rts				rts
.9e05					EvaluateUnsignedInteger:
.9e05	20 fc 9d	jsr $9dfc			jsr 	EvaluateInteger 			; check integer is +ve
.9e08	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e0b	30 01		bmi $9e0e			bmi 	HelperValueError
.9e0d	60		rts				rts
.9e0e					HelperValueError:
.9e0e	4c fb ab	jmp $abfb			jmp 	ArgumentError
.9e11					Evaluate16BitInteger:
.9e11	20 05 9e	jsr $9e05			jsr	 	EvaluateUnsignedInteger		; get integer
.9e14	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9e17	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9e1a	d0 f2		bne $9e0e			bne 	HelperValueError
.9e1c	60		rts				rts
.9e1d					Evaluate8BitInteger:
.9e1d	20 05 9e	jsr $9e05			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9e20	d0 ec		bne $9e0e			bne 	HelperValueError
.9e22	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9e25	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9e28	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e2b	d0 e1		bne $9e0e			bne 	HelperValueError
.9e2d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.aa88					Multiply8x8:
.aa88	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.aa89	85 36		sta $36			  	sta 	zTemp0
.aa8b	86 37		stx $37				stx 	zTemp0+1
.aa8d	a9 00		lda #$00			lda 	#0
.aa8f	a2 08		ldx #$08			ldx 	#8
.aa91					_M88Loop:
.aa91	90 03		bcc $aa96			bcc 	_M88NoAdd
.aa93	18		clc				clc
.aa94	65 37		adc $37				adc 	zTemp0+1
.aa96					_M88NoAdd:
.aa96	6a		ror a				ror 	a
.aa97	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.aa99	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.aa9a	d0 f5		bne $aa91			bne 	_M88Loop
.aa9c	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.aa9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9e31					NSMNegate:
.9e31	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e34	49 80		eor #$80			eor 	#NSBIsNegative
.9e36	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e39	60		rts				rts
.9e3a					NSMNegateMantissa:
.9e3a	38		sec				sec
.9e3b	a9 00		lda #$00			lda 	#0
.9e3d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9e40	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e43	a9 00		lda #$00			lda 	#0
.9e45	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9e48	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e4b	a9 00		lda #$00			lda 	#0
.9e4d	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9e50	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e53	a9 00		lda #$00			lda 	#0
.9e55	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9e58	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e5b	60		rts				rts
.9e5c					NSMShiftUpTwo:
.9e5c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e5f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e62	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e65	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9e68	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e6b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9e6e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e71	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e74	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e77	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e7a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e7d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e80	60		rts				rts
.9e81					NSMSetZeroMantissaOnly:
.9e81	a9 00		lda #$00			lda 	#0
.9e83	80 08		bra $9e8d			bra 	NSMSetMantissa
.9e85					NSMSetZero:
.9e85	a9 00		lda #$00			lda 	#0
.9e87					NSMSetByte:
.9e87	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e8a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e8d					NSMSetMantissa:
.9e8d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e90	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e93	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e96	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e99	60		rts				rts
.9e9a					NSMShiftLeft:
.9e9a	18		clc				clc
.9e9b					NSMRotateLeft:
.9e9b	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e9e	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9ea1	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9ea4	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9ea7	60		rts				rts
.9ea8					NSMShiftRight:
.9ea8	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9eab	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9eae	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9eb1	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9eb4	60		rts				rts
.9eb5					NSMIsZero:
.9eb5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9eb8	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9ebb	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9ebe	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9ec1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aa9f					Assemble_ora:
.aa9f	20 f8 85	jsr $85f8		jsr	AssembleGroup1
>aaa2	01					.byte $01
.aaa3					Assemble_and:
.aaa3	20 f8 85	jsr $85f8		jsr	AssembleGroup1
>aaa6	21					.byte $21
.aaa7					Assemble_eor:
.aaa7	20 f8 85	jsr $85f8		jsr	AssembleGroup1
>aaaa	41					.byte $41
.aaab					Assemble_adc:
.aaab	20 f8 85	jsr $85f8		jsr	AssembleGroup1
>aaae	61					.byte $61
.aaaf					Assemble_sta:
.aaaf	20 f8 85	jsr $85f8		jsr	AssembleGroup1
>aab2	81					.byte $81
.aab3					Assemble_lda:
.aab3	20 f8 85	jsr $85f8		jsr	AssembleGroup1
>aab6	a1					.byte $a1
.aab7					Assemble_cmp:
.aab7	20 f8 85	jsr $85f8		jsr	AssembleGroup1
>aaba	c1					.byte $c1
.aabb					Assemble_sbc:
.aabb	20 f8 85	jsr $85f8		jsr	AssembleGroup1
>aabe	e1					.byte $e1
.aabf					Assemble_asl:
.aabf	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aac2	02					.byte $02
>aac3	75					.byte $75
.aac4					Assemble_rol:
.aac4	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aac7	22					.byte $22
>aac8	75					.byte $75
.aac9					Assemble_lsr:
.aac9	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aacc	42					.byte $42
>aacd	75					.byte $75
.aace					Assemble_ror:
.aace	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aad1	62					.byte $62
>aad2	75					.byte $75
.aad3					Assemble_stx:
.aad3	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aad6	82					.byte $82
>aad7	50					.byte $50
.aad8					Assemble_ldx:
.aad8	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aadb	a2					.byte $a2
>aadc	d0					.byte $d0
.aadd					Assemble_dec:
.aadd	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aae0	c2					.byte $c2
>aae1	55					.byte $55
.aae2					Assemble_inc:
.aae2	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aae5	e2					.byte $e2
>aae6	55					.byte $55
.aae7					Assemble_stz:
.aae7	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aaea	60					.byte $60
>aaeb	44					.byte $44
.aaec					Assemble_bit:
.aaec	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aaef	20					.byte $20
>aaf0	55					.byte $55
.aaf1					Assemble_sty:
.aaf1	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aaf4	80					.byte $80
>aaf5	54					.byte $54
.aaf6					Assemble_ldy:
.aaf6	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aaf9	a0					.byte $a0
>aafa	d5					.byte $d5
.aafb					Assemble_cpy:
.aafb	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>aafe	c0					.byte $c0
>aaff	d4					.byte $d4
.ab00					Assemble_cpx:
.ab00	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>ab03	e0					.byte $e0
>ab04	d0					.byte $d0
.ab05					Assemble_tsb:
.ab05	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>ab08	00					.byte $00
>ab09	50					.byte $50
.ab0a					Assemble_trb:
.ab0a	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>ab0d	10					.byte $10
>ab0e	50					.byte $50
.ab0f					Assemble_jsr:
.ab0f	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>ab12	14					.byte $14
>ab13	10					.byte $10
.ab14					Assemble_jmp:
.ab14	20 ff 85	jsr $85ff		jsr	AssembleGroup2
>ab17	40					.byte $40
>ab18	10					.byte $10
.ab19					Assemble_bpl:
.ab19	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab1c	10					.byte $10
.ab1d					Assemble_bmi:
.ab1d	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab20	30					.byte $30
.ab21					Assemble_bvc:
.ab21	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab24	50					.byte $50
.ab25					Assemble_bvs:
.ab25	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab28	70					.byte $70
.ab29					Assemble_bcc:
.ab29	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab2c	90					.byte $90
.ab2d					Assemble_bcs:
.ab2d	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab30	b0					.byte $b0
.ab31					Assemble_bne:
.ab31	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab34	d0					.byte $d0
.ab35					Assemble_beq:
.ab35	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab38	f0					.byte $f0
.ab39					Assemble_bra:
.ab39	20 50 86	jsr $8650		jsr	AssembleGroup3
>ab3c	80					.byte $80
.ab3d					Assemble_brk:
.ab3d	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab40	00					.byte $00
.ab41					Assemble_php:
.ab41	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab44	08					.byte $08
.ab45					Assemble_clc:
.ab45	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab48	18					.byte $18
.ab49					Assemble_plp:
.ab49	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab4c	28					.byte $28
.ab4d					Assemble_sec:
.ab4d	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab50	38					.byte $38
.ab51					Assemble_rti:
.ab51	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab54	40					.byte $40
.ab55					Assemble_pha:
.ab55	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab58	48					.byte $48
.ab59					Assemble_cli:
.ab59	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab5c	58					.byte $58
.ab5d					Assemble_phy:
.ab5d	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab60	5a					.byte $5a
.ab61					Assemble_rts:
.ab61	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab64	60					.byte $60
.ab65					Assemble_pla:
.ab65	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab68	68					.byte $68
.ab69					Assemble_sei:
.ab69	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab6c	78					.byte $78
.ab6d					Assemble_ply:
.ab6d	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab70	7a					.byte $7a
.ab71					Assemble_dey:
.ab71	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab74	88					.byte $88
.ab75					Assemble_txa:
.ab75	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab78	8a					.byte $8a
.ab79					Assemble_tya:
.ab79	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab7c	98					.byte $98
.ab7d					Assemble_txs:
.ab7d	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab80	9a					.byte $9a
.ab81					Assemble_tay:
.ab81	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab84	a8					.byte $a8
.ab85					Assemble_tax:
.ab85	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab88	aa					.byte $aa
.ab89					Assemble_clv:
.ab89	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab8c	b8					.byte $b8
.ab8d					Assemble_tsx:
.ab8d	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab90	ba					.byte $ba
.ab91					Assemble_iny:
.ab91	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab94	c8					.byte $c8
.ab95					Assemble_dex:
.ab95	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab98	ca					.byte $ca
.ab99					Assemble_cld:
.ab99	20 86 86	jsr $8686		jsr	AssembleGroup4
>ab9c	d8					.byte $d8
.ab9d					Assemble_phx:
.ab9d	20 86 86	jsr $8686		jsr	AssembleGroup4
>aba0	da					.byte $da
.aba1					Assemble_stp:
.aba1	20 86 86	jsr $8686		jsr	AssembleGroup4
>aba4	db					.byte $db
.aba5					Assemble_inx:
.aba5	20 86 86	jsr $8686		jsr	AssembleGroup4
>aba8	e8					.byte $e8
.aba9					Assemble_nop:
.aba9	20 86 86	jsr $8686		jsr	AssembleGroup4
>abac	ea					.byte $ea
.abad					Assemble_sed:
.abad	20 86 86	jsr $8686		jsr	AssembleGroup4
>abb0	f8					.byte $f8
.abb1					Assemble_plx:
.abb1	20 86 86	jsr $8686		jsr	AssembleGroup4
>abb4	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.abb5					DecimalScalarTable:
>abb5	66 66 66 66				.dword $66666666 ; 0.1
>abb9	de					.byte $de
>abba	1f 85 eb 51				.dword $51eb851f ; 0.01
>abbe	db					.byte $db
>abbf	4c 37 89 41				.dword $4189374c ; 0.001
>abc3	d8					.byte $d8
>abc4	ac 8b db 68				.dword $68db8bac ; 0.0001
>abc8	d4					.byte $d4
>abc9	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>abcd	d1					.byte $d1
>abce	83 de 1b 43				.dword $431bde83 ; 1e-06
>abd2	ce					.byte $ce
>abd3	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>abd7	ca					.byte $ca
>abd8	89 3b e6 55				.dword $55e63b89 ; 1e-08
>abdc	c7					.byte $c7
>abdd	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>abe1	c4					.byte $c4
>abe2	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>abe6	c0					.byte $c0
>abe7	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>abeb	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.abec					SyntaxError:
.abec	a9 02		lda #$02		lda	#2
.abee	4c cd 92	jmp $92cd		jmp	ErrorHandler
.abf1					RangeError:
.abf1	a9 04		lda #$04		lda	#4
.abf3	4c cd 92	jmp $92cd		jmp	ErrorHandler
.abf6					TypeError:
.abf6	a9 05		lda #$05		lda	#5
.abf8	4c cd 92	jmp $92cd		jmp	ErrorHandler
.abfb					ArgumentError:
.abfb	a9 07		lda #$07		lda	#7
.abfd	4c cd 92	jmp $92cd		jmp	ErrorHandler
.ac00					NotDoneError:
.ac00	a9 0c		lda #$0c		lda	#12
.ac02	4c cd 92	jmp $92cd		jmp	ErrorHandler
.ac05					ErrorText:
>ac05	42 72 65 61 6b 00			.text	"Break",0
>ac0b	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ac13	72 72 6f 72 00
>ac18	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>ac20	20 62 79 20 7a 65 72 6f 00
>ac29	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>ac31	61 6e 67 65 00
>ac36	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ac3e	6d 61 74 63 68 00
>ac44	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ac4c	65 6d 6f 72 79 00
>ac52	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ac5a	61 72 67 75 6d 65 6e 74 00
>ac63	53 74 6f 70 00				.text	"Stop",0
>ac68	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ac70	6f 6f 20 6c 6f 6e 67 00
>ac78	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ac80	6e 20 66 61 69 6c 65 64 00
>ac89	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ac91	61 74 61 00
>ac95	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ac9d	65 6e 74 65 64 00
>aca3	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>acab	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>acb7	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>acbf	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>accc	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>acd4	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ace1	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ace9	68 6f 75 74 20 57 68 69 6c 65 00
>acf4	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>acfc	68 6f 75 74 20 46 6f 72 00
>ad05	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ad0d	61 63 6b 20 66 75 6c 6c 00
>ad16	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ad1e	75 63 74 75 72 65 00
>ad25	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ad2d	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ad3a	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ad42	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ad50	41 72 72 61 79 20 73 69			.text	"Array size",0
>ad58	7a 65 00
>ad5b	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ad63	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ad6b	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1015."
>ad73	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>ad83	2e 20 42 75 69 6c 64 20 31 30 31 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ad90					EXTPrintCharacter:
.ad90	48		pha				pha
.ad91	da		phx				phx
.ad92	5a		phy				phy
.ad93	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ad96	7a		ply				ply
.ad97	fa		plx				plx
.ad98	68		pla				pla
.ad99	60		rts				rts
.ad9a					EXTInputSingleCharacter:
.ad9a	da		phx				phx
.ad9b	5a		phy				phy
.ad9c					_EISCWait:
.ad9c	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ad9f	c9 00		cmp #$00			cmp 	#0
.ada1	f0 f9		beq $ad9c			beq 	_EISCWait
.ada3	7a		ply				ply
.ada4	fa		plx				plx
.ada5	60		rts				rts
.ada6					EXTInputLine:
.ada6	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ada8					_ILLoop:
.ada8	da		phx				phx 								; read character in
.ada9	20 cf ff	jsr $ffcf			jsr 	$FFCF
.adac	fa		plx				plx
.adad	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.adaf	f0 12		beq $adc3			beq 	_ILBackspace
.adb1	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.adb3	f0 15		beq $adca			beq 	_ILExit
.adb5	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.adb7	90 ef		bcc $ada8			bcc 	_ILLoop
.adb9	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.adbb	f0 eb		beq $ada8			beq 	_ILLoop
.adbd	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.adc0	e8		inx				inx
.adc1	80 e5		bra $ada8			bra 	_ILLoop
.adc3					_ILBackspace:
.adc3	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.adc5	f0 e1		beq $ada8			beq 	_ILLoop
.adc7	ca		dex				dex 								; back one.
.adc8	80 de		bra $ada8			bra 	_ILLoop
.adca					_ILExit:
.adca	20 90 ad	jsr $ad90			jsr 	EXTPrintCharacter
.adcd	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.add0	60		rts				rts
.add1					EXTBreakCheck:
.add1	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.add4					MemoryDeleteLine:
.add4	20 f3 ad	jsr $adf3			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.add7	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.add9	a8		tay				tay
.adda					_MDDLLoop:
.adda	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.addc	92 30		sta ($30)			sta 	(codePtr)
.adde	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ade0	c5 3a		cmp $3a				cmp 	zTemp2
.ade2	d0 07		bne $adeb			bne 	_MDLDLNext
.ade4	a5 31		lda $31				lda 	codePtr+1
.ade6	c5 3b		cmp $3b				cmp 	zTemp2+1
.ade8	d0 01		bne $adeb			bne 	_MDLDLNext
.adea					_MDDLExit:
.adea	60		rts				rts
.adeb					_MDLDLNext:
.adeb	e6 30		inc $30				inc 	codePtr						; next byte
.aded	d0 eb		bne $adda			bne 	_MDDLLoop
.adef	e6 31		inc $31				inc 	codePtr+1
.adf1	80 e7		bra $adda			bra 	_MDDLLoop
.adf3					IMemoryFindEnd:
.adf3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adf5	85 3a		sta $3a				sta 	0+zTemp2
.adf7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adf9	85 3b		sta $3b				sta 	1+zTemp2
.adfb					_MDLFELoop:
.adfb	b2 3a		lda ($3a)			lda 	(zTemp2)
.adfd	f0 0b		beq $ae0a			beq 	_MDLFEExit
.adff	18		clc				clc
.ae00	65 3a		adc $3a				adc 	zTemp2
.ae02	85 3a		sta $3a				sta 	zTemp2
.ae04	90 f5		bcc $adfb			bcc 	_MDLFELoop
.ae06	e6 3b		inc $3b				inc 	zTemp2+1
.ae08	80 f1		bra $adfb			bra 	_MDLFELoop
.ae0a					_MDLFEExit:
.ae0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.ae0b					MemoryInsertLine:
.ae0b	08		php				php
.ae0c	20 f3 ad	jsr $adf3			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ae0f	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.ae11	1a		inc a				inc 	a
.ae12	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ae14	b0 36		bcs $ae4c			bcs 	_MDLIError
.ae16	28		plp				plp
.ae17	90 08		bcc $ae21			bcc 	_MDLIFound
.ae19	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.ae1b	85 30		sta $30				sta 	codePtr
.ae1d	a5 3b		lda $3b				lda 	zTemp2+1
.ae1f	85 31		sta $31				sta 	codePtr+1
.ae21					_MDLIFound:
.ae21	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ae24	a8		tay				tay
.ae25					_MDLIInsert:
.ae25	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.ae27	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ae29	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.ae2b	c5 3a		cmp $3a				cmp 	zTemp2
.ae2d	d0 06		bne $ae35			bne 	_MDLINext
.ae2f	a5 31		lda $31				lda 	codePtr+1
.ae31	c5 3b		cmp $3b				cmp 	zTemp2+1
.ae33	f0 0a		beq $ae3f			beq 	_MDLIHaveSpace
.ae35					_MDLINext:
.ae35	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.ae37	d0 02		bne $ae3b			bne 	_MDLINoBorrow
.ae39	c6 3b		dec $3b				dec 	zTemp2+1
.ae3b					_MDLINoBorrow:
.ae3b	c6 3a		dec $3a				dec 	zTemp2
.ae3d	80 e6		bra $ae25			bra 	_MDLIInsert
.ae3f					_MDLIHaveSpace:
.ae3f	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.ae42	88		dey				dey 								; from offset-1 to 0
.ae43					_MDLICopy:
.ae43	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.ae46	91 30		sta ($30),y			sta 	(codePtr),y
.ae48	88		dey				dey
.ae49	10 f8		bpl $ae43			bpl 	_MDLICopy
.ae4b	60		rts				rts
.ae4c					_MDLIError:
.ae4c	a9 06		lda #$06		lda	#6
.ae4e	4c cd 92	jmp $92cd		jmp	ErrorHandler
.ae51					MDLAppendLine:
.ae51	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ae53	85 36		sta $36				sta 	zTemp0
.ae55	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae57	85 38		sta $38				sta 	0+zTemp1
.ae59	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae5b	85 39		sta $39				sta 	1+zTemp1
.ae5d	b2 38		lda ($38)			lda 	(zTemp1)
.ae5f	d0 0a		bne $ae6b			bne 	_MDLANoInitialise
.ae61	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae63	8d 4e 06	sta $064e			sta 	0+AppendPointer
.ae66	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae68	8d 4f 06	sta $064f			sta 	1+AppendPointer
.ae6b					_MDLANoInitialise:
.ae6b	18		clc				clc
.ae6c	ad 4e 06	lda $064e			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ae6f	85 38		sta $38				sta 	zTemp1
.ae71	72 36		adc ($36)			adc 	(zTemp0)
.ae73	8d 4e 06	sta $064e			sta 	AppendPointer
.ae76	ad 4f 06	lda $064f			lda 	AppendPointer+1
.ae79	85 39		sta $39				sta 	zTemp1+1
.ae7b	69 00		adc #$00			adc 	#0
.ae7d	8d 4f 06	sta $064f			sta 	AppendPointer+1
.ae80	a0 00		ldy #$00			ldy 	#0
.ae82					_MDLACopy:
.ae82	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ae84	91 38		sta ($38),y			sta 	(zTemp1),y
.ae86	c8		iny				iny
.ae87	98		tya				tya
.ae88	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ae8a	d0 f6		bne $ae82			bne 	_MDLACopy
.ae8c	a9 00		lda #$00			lda 	#0 							; end of program.
.ae8e	91 38		sta ($38),y			sta 	(zTemp1),y
.ae90	60		rts				rts
.064e					AppendPointer:
>064e							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9ec2					MemoryNew:
.9ec2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9ec4	85 30		sta $30				sta 	codePtr
.9ec6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9ec8	85 31		sta $31				sta 	codePtr+1
.9eca	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9ecc	92 30		sta ($30)			sta 	(codePtr)
.9ece	60		rts				rts
.9ecf					MemoryInline:
.9ecf	98		tya				tya 								; put address into stack,x
.9ed0	18		clc				clc
.9ed1	65 30		adc $30				adc 	codePtr
.9ed3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ed6	a5 31		lda $31				lda 	codePtr+1
.9ed8	69 00		adc #$00			adc 	#0
.9eda	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9edd	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9ee0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ee3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9ee4					MemorySearch:
.9ee4	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9ee6	86 37		stx $37				stx 	zTemp0+1
.9ee8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9eea	85 30		sta $30				sta 	codePtr
.9eec	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9eee	85 31		sta $31				sta 	codePtr+1
.9ef0					_MTAXLoop:
.9ef0	b2 30		lda ($30)			lda 	(codePtr)
.9ef2	18		clc				clc
.9ef3	f0 21		beq $9f16			beq 	_MTAXExit 					; reached end, exit with CC.
.9ef5	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9ef7	b1 30		lda ($30),y			lda 	(codePtr),y
.9ef9	38		sec				sec
.9efa	e5 36		sbc $36				sbc 	zTemp0
.9efc	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9efe	c8		iny				iny 								; do the MSB
.9eff	b1 30		lda ($30),y			lda 	(codePtr),y
.9f01	e5 37		sbc $37				sbc 	zTemp0+1
.9f03	05 38		ora $38				ora 	zTemp1
.9f05	f0 0f		beq $9f16			beq 	_MTAXExit	 				; found
.9f07	b0 0d		bcs $9f16			bcs 	_MTAXExit 					; current < required exit
.9f09	18		clc				clc
.9f0a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9f0c	65 30		adc $30				adc 	codePtr
.9f0e	85 30		sta $30				sta 	codePtr
.9f10	90 02		bcc $9f14			bcc 	_CREExit
.9f12	e6 31		inc $31				inc 	codePtr+1
.9f14					_CREExit:
.9f14	80 da		bra $9ef0			bra 	_MTAXLoop
.9f16					_MTAXExit:
.9f16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9f17					StackPushByte:
.9f17	48		pha				pha 								; save byte
.9f18	a5 34		lda $34				lda 	BasicStack
.9f1a	d0 09		bne $9f25			bne 	_SPBNoBorrow
.9f1c	c6 35		dec $35				dec 	BasicStack+1
.9f1e	48		pha				pha
.9f1f	a5 35		lda $35				lda 	BasicStack+1
.9f21	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9f23	90 06		bcc $9f2b			bcc 	_SPBMemory
.9f25					_SPBNoBorrow:
.9f25	c6 34		dec $34				dec 	BasicStack
.9f27	68		pla				pla 								; get back and write
.9f28	92 34		sta ($34)			sta 	(BasicStack)
.9f2a	60		rts				rts
.9f2b					_SPBMemory:
.9f2b	a9 12		lda #$12		lda	#18
.9f2d	4c cd 92	jmp $92cd		jmp	ErrorHandler
.9f30					StackPopByte:
.9f30	b2 34		lda ($34)			lda 	(BasicStack)
.9f32	e6 34		inc $34				inc 	BasicStack
.9f34	d0 02		bne $9f38			bne 	_SPBNoCarry
.9f36	e6 35		inc $35				inc 	BasicStack+1
.9f38					_SPBNoCarry:
.9f38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9f39					StackOpen:
.9f39	48		pha				pha 								; save frame byte
.9f3a	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9f3c	0a		asl a				asl 	a 							; claim twice this for storage
.9f3d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9f3f	38		sec				sec 								; so basically subtracting from
.9f40	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9f42	85 34		sta $34				sta 	basicStack
.9f44	b0 08		bcs $9f4e			bcs 	_SONoBorrow
.9f46	c6 35		dec $35				dec 	basicStack+1
.9f48	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9f4a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9f4c	90 04		bcc $9f52			bcc 	_SOMemory
.9f4e					_SONoBorrow:
.9f4e	68		pla				pla 								; get marker back and write at TOS
.9f4f	92 34		sta ($34)			sta 	(basicStack)
.9f51	60		rts				rts
.9f52					_SOMemory:
.9f52	a9 12		lda #$12		lda	#18
.9f54	4c cd 92	jmp $92cd		jmp	ErrorHandler
.9f57					StackClose:
.9f57	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9f59	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9f5b	0a		asl a				asl 	a 							; claim twice this.
.9f5c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9f5e	85 34		sta $34				sta 	basicStack
.9f60	90 02		bcc $9f64			bcc 	_SCExit
.9f62	e6 35		inc $35				inc 	basicStack+1
.9f64					_SCExit:
.9f64	60		rts				rts
.9f65					StackCheckFrame:
.9f65	48		pha				pha
.9f66					_StackRemoveLocals:
.9f66	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9f68	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9f6a	b0 05		bcs $9f71			bcs 	_SCNoLocal
.9f6c	20 ad a5	jsr $a5ad			jsr 	LocalPopValue
.9f6f	80 f5		bra $9f66			bra 	_StackRemoveLocals
.9f71					_SCNoLocal:
.9f71	68		pla				pla
.9f72	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9f74	29 f0		and #$f0			and 	#$F0 						; check type bits
.9f76	d0 01		bne $9f79			bne 	_SCFError 					; different, we have structures mixed up
.9f78	60		rts				rts
.9f79					_SCFError:
.9f79	8a		txa				txa 								; report error X
.9f7a	4c cd 92	jmp $92cd			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9f7d					STKSaveCodePosition:
.9f7d	5a		phy				phy
.9f7e	98		tya				tya 								; save Y
.9f7f	a0 05		ldy #$05			ldy 	#5
.9f81	91 34		sta ($34),y			sta 	(basicStack),y
.9f83	88		dey				dey 								; save Code Pointer
.9f84					_STKSaveLoop:
.9f84	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9f87	91 34		sta ($34),y			sta 	(basicStack),y
.9f89	88		dey				dey
.9f8a	d0 f8		bne $9f84			bne 	_STKSaveLoop
.9f8c	7a		ply				ply
.9f8d	60		rts				rts
.9f8e					STKLoadCodePosition:
.9f8e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9f90					_STKLoadLoop:
.9f90	b1 34		lda ($34),y			lda 	(basicStack),y
.9f92	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9f95	c8		iny				iny
.9f96	c0 05		cpy #$05			cpy 	#5
.9f98	d0 f6		bne $9f90			bne 	_STKLoadLoop
.9f9a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9f9c	a8		tay				tay
.9f9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9f9e					StackReset:
.9f9e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9fa0	85 34		sta $34				sta 	0+basicStack
.9fa2	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9fa4	85 35		sta $35				sta 	1+basicStack
.9fa6	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9fa8	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9faa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.ae91					StringConcrete:
.ae91	5a		phy				phy 								; save position on stack
.ae92	20 94 9b	jsr $9b94			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ae95	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.ae98	85 38		sta $38				sta 	zTemp1
.ae9a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ae9d	85 39		sta $39				sta 	zTemp1+1
.ae9f	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.aea1					_SALength:
.aea1	c8		iny				iny
.aea2	b1 38		lda ($38),y			lda 	(zTemp1),y
.aea4	d0 fb		bne $aea1			bne 	_SALength
.aea6	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.aea8	b0 3f		bcs $aee9			bcs 	_SALengthError
.aeaa	98		tya				tya 				 				; length of the new string
.aeab	18		clc				clc
.aeac	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.aeae	90 02		bcc $aeb2			bcc 	_SAHaveLength
.aeb0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.aeb2					_SAHaveLength:
.aeb2	48		pha				pha 								; save length.
.aeb3	38		sec				sec
.aeb4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.aeb6	6d 8e 04	adc $048e			adc 	StringMemory
.aeb9	8d 8e 04	sta $048e			sta 	StringMemory
.aebc	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.aebe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.aec1	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.aec3	6d 8f 04	adc $048f			adc 	StringMemory+1
.aec6	8d 8f 04	sta $048f			sta 	StringMemory+1
.aec9	85 3b		sta $3b				sta 	zTemp2+1
.aecb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aece	68		pla				pla 								; save length-3 (chars allowed) in first byte
.aecf	38		sec				sec
.aed0	e9 03		sbc #$03			sbc 	#3
.aed2	92 3a		sta ($3a)			sta 	(zTemp2)
.aed4	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.aed6	a0 01		ldy #$01			ldy 	#1
.aed8	91 3a		sta ($3a),y			sta 	(zTemp2),y
.aeda					_SACopyNewString:
.aeda	a0 00		ldy #$00			ldy 	#0
.aedc					_SACopyNSLoop:
.aedc	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.aede	c8		iny				iny 								; write two on in string storage
.aedf	c8		iny				iny
.aee0	91 3a		sta ($3a),y			sta 	(zTemp2),y
.aee2	88		dey				dey 								; this makes it one one.
.aee3	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.aee5	d0 f5		bne $aedc			bne 	_SACopyNSLoop
.aee7	7a		ply				ply
.aee8	60		rts				rts
.aee9					_SALengthError:
.aee9	a9 09		lda #$09		lda	#9
.aeeb	4c cd 92	jmp $92cd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.aeee					StringSystemInitialise:
.aeee	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.aef0	8d 8e 04	sta $048e			sta 	0+StringMemory
.aef3	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.aef5	8d 8f 04	sta $048f			sta 	1+StringMemory
.aef8	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.aefb	60		rts				rts
.aefc					StringSpaceInitialise:
.aefc	20 94 9b	jsr $9b94			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.aeff	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.af01	8d 90 04	sta $0490			sta 	StringInitialised
.af04	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.af07	8d 91 04	sta $0491			sta 	StringTempPointer
.af0a	ad 8f 04	lda $048f			lda 	StringMemory+1
.af0d	3a		dec a				dec 	a
.af0e	8d 92 04	sta $0492			sta 	StringTempPointer+1
.af11	60		rts				rts
.af12					StringTempAllocate:
.af12	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.af14	b0 35		bcs $af4b			bcs 	_STALength
.af16	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.af19	30 05		bmi $af20			bmi 	_STAAllocate
.af1b	48		pha				pha 								; save value to subtract.
.af1c	20 fc ae	jsr $aefc			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.af1f	68		pla				pla 								; restore it
.af20					_STAAllocate:
.af20	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.af22	18		clc				clc  								; deliberate allows one more
.af23	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.af26	8d 91 04	sta $0491			sta 	StringTempPointer
.af29	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.af2c	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.af2e	ad 92 04	lda $0492			lda 	StringTempPointer+1
.af31	69 ff		adc #$ff			adc 	#$FF
.af33	8d 92 04	sta $0492			sta 	StringTempPointer+1
.af36	85 3d		sta $3d				sta 	zsTemp+1
.af38	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af3b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.af3e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.af41	a9 10		lda #$10			lda 	#NSTString
.af43	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af46	a9 00		lda #$00			lda 	#0 							; clear the target string
.af48	92 3c		sta ($3c)			sta 	(zsTemp)
.af4a	60		rts				rts
.af4b					_STALength:
.af4b	a9 09		lda #$09		lda	#9
.af4d	4c cd 92	jmp $92cd		jmp	ErrorHandler
.af50					StringTempWrite:
.af50	48		pha				pha
.af51	92 3c		sta ($3c)			sta 	(zsTemp)
.af53	e6 3c		inc $3c				inc 	zsTemp
.af55	d0 02		bne $af59			bne 	_STWNoCarry
.af57	e6 3d		inc $3d				inc 	zsTemp+1
.af59					_STWNoCarry:
.af59	a9 00		lda #$00			lda 	#0
.af5b	92 3c		sta ($3c)			sta 	(zsTemp)
.af5d	68		pla				pla
.af5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9fab					BackloadProgram:
.9fab	a2 ff		ldx #$ff			ldx 	#$FF
.9fad	20 d5 9f	jsr $9fd5			jsr 	BLReadByte
.9fb0	30 1f		bmi $9fd1			bmi 	_BPExit
.9fb2					_BPCopy:
.9fb2	e8		inx				inx  								; copy byte in
.9fb3	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9fb6	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9fb9	20 d5 9f	jsr $9fd5			jsr 	BLReadByte 					; read next byte
.9fbc	30 0a		bmi $9fc8			bmi 	_BPEndLine 					; -ve = EOL
.9fbe	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9fc0	d0 02		bne $9fc4			bne 	_BPNotTab
.9fc2	a9 20		lda #$20			lda 	#' '
.9fc4					_BPNotTab:
.9fc4	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9fc6	b0 ea		bcs $9fb2			bcs 	_BPCopy
.9fc8					_BPEndLine:
.9fc8	20 fe a2	jsr $a2fe			jsr 	TokeniseLine 				; tokenise the line.
.9fcb	38		sec				sec 								; append not insert
.9fcc	20 0b ae	jsr $ae0b			jsr 	MemoryInsertLine 			; append to current program
.9fcf	80 da		bra $9fab			bra 	BackloadProgram
.9fd1					_BPExit:
.9fd1	20 fe 88	jsr $88fe			jsr 	ClearCommand 				; clear variables etc.
.9fd4	60		rts				rts
.9fd5					BLReadByte:
.9fd5					_BLLoad:
.9fd5	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9fd8	ee d6 9f	inc $9fd6			inc 	_BLLoad+1
.9fdb	d0 03		bne $9fe0			bne 	_BLNoCarry
.9fdd	ee d7 9f	inc $9fd7			inc 	_BLLoad+2
.9fe0					_BLNoCarry:
.9fe0	c9 00		cmp #$00			cmp 	#0
.9fe2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9fe3					TokeniseSearchTable:
.9fe3	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9fe5	85 36		sta $36				sta 	zTemp0
.9fe7	a0 00		ldy #$00			ldy 	#0
.9fe9	a9 80		lda #$80			lda 	#$80 						; token #
.9feb	85 38		sta $38				sta 	zTemp1
.9fed					_TSTLoop:
.9fed	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9fef	30 49		bmi $a03a			bmi 	_TSTFail 					; -ve = end of table
.9ff1	f0 2e		beq $a021			beq 	_TSTNext 					; zero, check next it's a dummy
.9ff3	c8		iny				iny 								; get the hash
.9ff4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ff6	88		dey				dey
.9ff7	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9ffa	d0 25		bne $a021			bne 	_TSTNext
.9ffc	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9fff	38		sec				sec
.a000	ed 80 04	sbc $0480			sbc 	identStart
.a003	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a005	d0 1a		bne $a021			bne 	_TSTNext
.a007	5a		phy				phy 								; save Y , we might fail
.a008	c8		iny				iny 								; point to text
.a009	c8		iny				iny
.a00a	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a00d					_TSTCompareName:
.a00d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a010	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a012	d0 0c		bne $a020			bne 	_TSTNextPullY 				; fail, pullY and do next
.a014	e8		inx				inx
.a015	c8		iny				iny
.a016	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a019	d0 f2		bne $a00d			bne 	_TSTCompareName
.a01b	7a		ply				ply 								; throw Y
.a01c	a5 38		lda $38				lda 	zTemp1 						; get token #
.a01e	38		sec				sec 								; return with CS = passed.
.a01f	60		rts				rts
.a020					_TSTNextPullY:
.a020	7a		ply				ply 								; restore current, fall through.
.a021					_TSTNext:
.a021	e6 38		inc $38				inc 	zTemp1 						; token counter
.a023	98		tya				tya
.a024	18		clc				clc
.a025	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a027	1a		inc a				inc 	a 							; +1
.a028	1a		inc a				inc 	a 							; +2
.a029	a8		tay				tay
.a02a	10 c1		bpl $9fed			bpl 	_TSTLoop 					; if Y < $80 loop back
.a02c	98		tya				tya 								; add Y to zTemp0 and reset Y
.a02d	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a02f	18		clc				clc  								; but have tables > 255 bytes
.a030	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a032	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a034	90 b7		bcc $9fed			bcc 	_TSTLoop
.a036	e6 37		inc $37				inc 	zTemp0+1
.a038	80 b3		bra $9fed			bra 	_TSTLoop
.a03a					_TSTFail:
.a03a	18		clc				clc
.a03b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a03c					KeywordSet0:
>a03c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a03e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a040	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a042	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a048	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a050	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a056	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a05d	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a064	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a06b	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a071	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a079	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a081	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a087	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a08e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a094	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a09c	28
>a09d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a0a5	28
>a0a6	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a0ac	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a0b2	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a0b8	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a0bf	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a0c5	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a0cb	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a0d0	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a0d4	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a0da	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a0e2	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a0e9	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a0f0	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a0f8	43
>a0f9	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a0ff	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a105	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a10c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a112	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a118	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a11d	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a123	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a128	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a130	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a136	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a13d	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a143	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a148	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a14f	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a156	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a15c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a161	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a169	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a16d	ff					.text	$FF
.a16e					KeywordSet1:
>a16e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a170	00 58					.text	0,$58,""               ; $81 !1:SH1
>a172	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a174	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a17c	4c 45
>a17e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a186	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a18d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a192	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a198	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a19d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a1a5	45
>a1a6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a1ab	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a1b1	ff					.text	$FF
.a1b2					KeywordSet2:
>a1b2	00 65					.text	0,$65,""               ; $80 !0:EOF
>a1b4	00 58					.text	0,$58,""               ; $81 !1:SH1
>a1b6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a1b8	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a1bd	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a1c2	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a1c7	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a1cc	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a1d1	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a1d6	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a1db	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a1e0	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a1e5	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a1ea	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a1ef	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a1f4	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a1f9	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a1fe	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a203	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a208	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a20d	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a212	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a217	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a21c	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a221	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a226	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a22b	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a230	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a235	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a23a	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a23f	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a244	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a249	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a24e	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a253	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a258	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a25d	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a262	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a267	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a26c	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a271	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a276	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a27b	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a280	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a285	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a28a	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a28f	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a294	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a299	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a29e	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a2a3	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a2a8	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a2ad	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a2b2	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a2b7	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a2bc	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a2c1	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a2c6	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a2cb	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a2d0	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a2d5	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a2da	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a2df	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a2e4	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a2e9	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a2ee	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a2f3	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a2f8	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a2fd	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a2fe					TokeniseLine:
.a2fe	20 86 a4	jsr $a486			jsr 	FixLineBufferCase 			; fix line case
.a301	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a303	8d a6 04	sta $04a6			sta 	tokenOffset
.a306	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a309	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a30c	a2 ff		ldx #$ff			ldx 	#$FF
.a30e					_TKFindFirst:
.a30e	e8		inx				inx
.a30f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a312	f0 79		beq $a38d			beq 	_TKExit
.a314	c9 20		cmp #$20			cmp 	#' '
.a316	90 f6		bcc $a30e			bcc 	_TKFindFirst
.a318	c9 30		cmp #$30			cmp 	#'0'
.a31a	90 07		bcc $a323			bcc 	_TKNoLineNumber
.a31c	c9 3a		cmp #$3a			cmp 	#'9'+1
.a31e	b0 03		bcs $a323			bcs 	_TKNoLineNumber
.a320	20 b0 a4	jsr $a4b0			jsr 	TokeniseExtractLineNumber
.a323					_TKNoLineNumber:
.a323					_TKTokeniseLoop:
.a323	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a326	f0 65		beq $a38d			beq 	_TKExit
.a328	e8		inx				inx
.a329	c9 20		cmp #$20			cmp 	#' '
.a32b	f0 f6		beq $a323			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a32d	ca		dex				dex 								; undo last get, A contains character, X is position.
.a32e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a330	f0 61		beq $a393			beq 	_TKTokeniseIdentifier
.a332	c9 41		cmp #$41			cmp 	#'A'
.a334	90 04		bcc $a33a			bcc 	_TKTokenisePunctuation
.a336	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a338	90 59		bcc $a393			bcc 	_TKTokeniseIdentifier
.a33a					_TKTokenisePunctuation:
.a33a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a33c	f0 27		beq $a365			beq 	_TKString
.a33e	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a340	f0 28		beq $a36a			beq 	_TKHexConstant
.a342	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a344	f0 29		beq $a36f			beq 	_TKCheckDouble
.a346	c9 3e		cmp #$3e			cmp 	#'>'
.a348	f0 25		beq $a36f			beq 	_TKCheckDouble
.a34a					_TKStandardPunctuation:
.a34a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a34d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a34f	90 0e		bcc $a35f			bcc 	_TKNoShift
.a351	48		pha				pha 								; save
.a352	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a354	85 36		sta $36				sta 	zTemp0
.a356	68		pla				pla
.a357	29 20		and #$20			and 	#32 						; bit 5
.a359	4a		lsr a				lsr 	a 							; shift into bit 3
.a35a	4a		lsr a				lsr 	a
.a35b	05 36		ora $36				ora 	zTemp0
.a35d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a35f					_TKNoShift:
.a35f	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte 			; write the punctuation character
.a362	e8		inx				inx 								; consume the character
.a363	80 be		bra $a323			bra 	_TKTokeniseLoop 			; and loop round again.
.a365					_TKString:
.a365	20 15 a4	jsr $a415			jsr 	TokeniseString
.a368	80 b9		bra $a323			bra 	_TKTokeniseLoop
.a36a					_TKHexConstant:
.a36a	20 50 a4	jsr $a450			jsr 	TokeniseHexConstant
.a36d	80 b4		bra $a323			bra 	_TKTokeniseLoop
.a36f					_TKCheckDouble:
.a36f	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a372	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a374	90 d4		bcc $a34a			bcc 	_TKStandardPunctuation
.a376	c9 3f		cmp #$3f			cmp 	#'>'+1
.a378	b0 d0		bcs $a34a			bcs 	_TKStandardPunctuation
.a37a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a37d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a37f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a380	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a383	38		sec				sec
.a384	e9 3c		sbc #$3c			sbc 	#'<'
.a386	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a389	e8		inx				inx 								; consume both
.a38a	e8		inx				inx
.a38b	80 96		bra $a323			bra 	_TKTokeniseLoop
.a38d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a38f	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a392	60		rts				rts
.a393					_TKTokeniseIdentifier:
.a393	8e 80 04	stx $0480			stx 	identStart 					; save start
.a396	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a399					_TKCheckLoop:
.a399	e8		inx				inx 								; look at next, we know first is identifier.
.a39a	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a39d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a39f	f0 f8		beq $a399			beq 	_TKCheckLoop
.a3a1	c9 30		cmp #$30			cmp	 	#"0"
.a3a3	90 0c		bcc $a3b1			bcc 	_TKEndIdentifier
.a3a5	c9 3a		cmp #$3a			cmp 	#"9"+1
.a3a7	90 f0		bcc $a399			bcc 	_TKCheckLoop
.a3a9	c9 41		cmp #$41			cmp	 	#"A"
.a3ab	90 04		bcc $a3b1			bcc 	_TKEndIdentifier
.a3ad	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a3af	90 e8		bcc $a399			bcc 	_TKCheckLoop
.a3b1					_TKEndIdentifier:
.a3b1	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a3b4	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a3b6	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a3b8	f0 06		beq $a3c0			beq 	_TKHasTypeCharacter
.a3ba	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a3bc	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a3be	d0 07		bne $a3c7			bne 	_TKNoTypeCharacter
.a3c0					_TKHasTypeCharacter:
.a3c0	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a3c3	e8		inx				inx 								; read next
.a3c4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a3c7					_TKNoTypeCharacter:
.a3c7	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a3c9	d0 09		bne $a3d4			bne 	_TKNoArray
.a3cb	e8		inx				inx 								; skip the (
.a3cc	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a3cf	09 04		ora #$04			ora 	#$04
.a3d1	8d 84 04	sta $0484			sta 	identTypeByte
.a3d4					_TKNoArray:
.a3d4	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a3d7	20 71 a4	jsr $a471			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a3da	a0 a0		ldy #$a0			ldy 	#(KeywordSet0) >> 8
.a3dc	a9 3c		lda #$3c			lda 	#(KeywordSet0) & $FF
.a3de	20 e3 9f	jsr $9fe3			jsr 	TokeniseSearchTable
.a3e1	a2 00		ldx #$00			ldx 	#0
.a3e3	b0 1f		bcs $a404			bcs 	_TKFoundToken
.a3e5	a0 a1		ldy #$a1			ldy 	#(KeywordSet1) >> 8
.a3e7	a9 6e		lda #$6e			lda 	#(KeywordSet1) & $FF
.a3e9	20 e3 9f	jsr $9fe3			jsr 	TokeniseSearchTable
.a3ec	a2 81		ldx #$81			ldx 	#$81
.a3ee	b0 14		bcs $a404			bcs 	_TKFoundToken
.a3f0	a0 a1		ldy #$a1			ldy 	#(KeywordSet2) >> 8
.a3f2	a9 b2		lda #$b2			lda 	#(KeywordSet2) & $FF
.a3f4	20 e3 9f	jsr $9fe3			jsr 	TokeniseSearchTable
.a3f7	a2 82		ldx #$82			ldx 	#$82
.a3f9	b0 09		bcs $a404			bcs 	_TKFoundToken
.a3fb	20 01 a5	jsr $a501			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a3fe	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a401	4c 23 a3	jmp $a323			jmp 	_TKTokeniseLoop 			; and go round again.
.a404					_TKFoundToken:
.a404	48		pha				pha 								; save token
.a405	8a		txa				txa 								; shift in X, is there one ?
.a406	f0 03		beq $a40b			beq 	_TKNoTShift
.a408	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte 			; if so, write it out
.a40b					_TKNoTShift:
.a40b	68		pla				pla 								; restore and write token
.a40c	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a40f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a412	4c 23 a3	jmp $a323			jmp 	_TKTokeniseLoop 			; and go round again.
.a415					TokeniseString:
.a415	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a417	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a41a	e8		inx				inx									; start of quoted string.
.a41b	da		phx				phx 								; push start of string on top
.a41c	ca		dex				dex
.a41d					_TSFindEnd:
.a41d	e8		inx				inx
.a41e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a421	f0 04		beq $a427			beq 	_TSEndOfString
.a423	c9 22		cmp #$22			cmp 	#'"'
.a425	d0 f6		bne $a41d			bne 	_TSFindEnd
.a427					_TSEndOfString:
.a427	7a		ply				ply  								; so now Y is first character, X is character after end.
.a428	48		pha				pha 								; save terminating character
.a429	20 31 a4	jsr $a431			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a42c	68		pla				pla 								; terminating character
.a42d	f0 01		beq $a430			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a42f	e8		inx				inx
.a430					_TSNotQuote:
.a430	60		rts				rts
.a431					TOWriteBlockXY:
.a431	86 36		stx $36				stx 	zTemp0 						; write end character
.a433	98		tya				tya
.a434	49 ff		eor #$ff			eor 	#$FF
.a436	38		sec				sec
.a437	65 36		adc $36				adc 	zTemp0
.a439	1a		inc a				inc 	a 							; one extra for NULL
.a43a	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a43d					_TOBlockLoop:
.a43d	c4 36		cpy $36				cpy 	zTemp0
.a43f	f0 09		beq $a44a			beq 	_TOBlockExit
.a441	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a444	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a447	c8		iny				iny
.a448	80 f3		bra $a43d			bra 	_TOBlockLoop
.a44a					_TOBlockExit:
.a44a	a9 00		lda #$00			lda 	#0
.a44c	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a44f	60		rts				rts
.a450					TokeniseHexConstant:
.a450	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a452	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a455	e8		inx				inx									; start of quoted string.
.a456	da		phx				phx 								; push start of constant on top
.a457	ca		dex				dex
.a458					_THFindLoop:
.a458	e8		inx				inx
.a459	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a45c	c9 30		cmp #$30			cmp 	#"0"
.a45e	90 0c		bcc $a46c			bcc 	_THFoundEnd
.a460	c9 3a		cmp #$3a			cmp 	#"9"+1
.a462	90 f4		bcc $a458			bcc 	_THFindLoop
.a464	c9 41		cmp #$41			cmp 	#"A"
.a466	90 04		bcc $a46c			bcc 	_THFoundEnd
.a468	c9 47		cmp #$47			cmp 	#"F"+1
.a46a	90 ec		bcc $a458			bcc 	_THFindLoop
.a46c					_THFoundEnd:
.a46c	7a		ply				ply 								; restore start
.a46d	20 31 a4	jsr $a431			jsr 	TOWriteBlockXY 				; output the block
.a470	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a471					TokeniseCalculateHash:
.a471	da		phx				phx
.a472	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a475	a9 00		lda #$00			lda 	#0
.a477					_TCHLoop:
.a477	18		clc				clc
.a478	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a47b	e8		inx				inx
.a47c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a47f	d0 f6		bne $a477			bne 	_TCHLoop
.a481	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a484	fa		plx				plx
.a485	60		rts				rts
.a486					FixLineBufferCase:
.a486	a2 00		ldx #$00			ldx 	#0
.a488					_FLBCLoop:
.a488	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a48b	f0 22		beq $a4af			beq 	_FLBCExit 					; end of string.
.a48d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a48f	f0 11		beq $a4a2			beq 	_FLBCInQuotes
.a491	e8		inx				inx
.a492	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a494	90 f2		bcc $a488			bcc 	_FLBCLoop
.a496	c9 7b		cmp #$7b			cmp 	#'z'+1
.a498	b0 ee		bcs $a488			bcs 	_FLBCLoop
.a49a	38		sec				sec 								; make U/C
.a49b	e9 20		sbc #$20			sbc 	#32
.a49d	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a4a0	80 e6		bra $a488			bra 	_FLBCLoop
.a4a2					_FLBCInQuotes:
.a4a2	e8		inx				inx 								; advance
.a4a3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a4a6	f0 07		beq $a4af			beq 	_FLBCExit 					; exit on EOS
.a4a8	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a4aa	d0 f6		bne $a4a2			bne 	_FLBCInQuotes
.a4ac	e8		inx				inx 								; skip over it
.a4ad	80 d9		bra $a488			bra 	_FLBCLoop
.a4af					_FLBCExit:
.a4af	60		rts				rts
.a4b0					TokeniseExtractLineNumber:
.a4b0	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a4b3	48		pha				pha
.a4b4	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a4b7	48		pha				pha
.a4b8	20 ee a4	jsr $a4ee			jsr 	_TELNTimes2 				; line # x 4
.a4bb	20 ee a4	jsr $a4ee			jsr 	_TELNTimes2 				; line # x 2
.a4be	18		clc				clc 								; add stacked value
.a4bf	68		pla				pla
.a4c0	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a4c3	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a4c6	68		pla				pla
.a4c7	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a4ca	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a4cd	20 ee a4	jsr $a4ee			jsr 	_TELNTimes2 				; line # x 10
.a4d0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a4d3	e8		inx				inx
.a4d4	29 0f		and #$0f			and 	#15 						; add to line #
.a4d6	18		clc				clc
.a4d7	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a4da	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a4dd	90 03		bcc $a4e2			bcc 	_TLENNoCarry
.a4df	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a4e2					_TLENNoCarry:
.a4e2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a4e5	c9 30		cmp #$30			cmp 	#'0'
.a4e7	90 04		bcc $a4ed			bcc 	_TLENExit
.a4e9	c9 3a		cmp #$3a			cmp 	#'9'+1
.a4eb	90 c3		bcc $a4b0			bcc 	TokeniseExtractLineNumber
.a4ed					_TLENExit:
.a4ed	60		rts				rts
.a4ee					_TELNTimes2:
.a4ee	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a4f1	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a4f4	60		rts				rts
.a4f5					TokeniseWriteByte:
.a4f5	da		phx				phx
.a4f6	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a4f9	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a4fc	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a4ff	fa		plx				plx
.a500	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a501					CheckCreateVariableRecord:
.a501	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a503	85 36		sta $36				sta 	0+zTemp0
.a505	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a507	85 37		sta $37				sta 	1+zTemp0
.a509					_CCVSearch:
.a509	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a50b	f0 2c		beq $a539			beq 	_CCVFail
.a50d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a50f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a511	cd 83 04	cmp $0483			cmp 	identHash
.a514	d0 16		bne $a52c			bne 	_CCVNext
.a516	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a518	ae 80 04	ldx $0480			ldx 	identStart
.a51b					_CCVCompare:
.a51b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a51e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a520	e8		inx				inx 								; advance pointers
.a521	c8		iny				iny
.a522	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a523	d0 07		bne $a52c			bne 	_CCVNext  					; didn't match go to next.
.a525	90 f4		bcc $a51b			bcc 	_CCVCompare 				; not finished yet.
.a527	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a52a	f0 41		beq $a56d			beq 	_CCVFound 					; yes, we were successful
.a52c					_CCVNext:
.a52c	18		clc				clc
.a52d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a52f	65 36		adc $36				adc 	zTemp0
.a531	85 36		sta $36				sta 	zTemp0
.a533	90 d4		bcc $a509			bcc 	_CCVSearch
.a535	e6 37		inc $37				inc 	zTemp0+1
.a537	80 d0		bra $a509			bra 	_CCVSearch
.a539					_CCVFail:
.a539	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a53b	ad 83 04	lda $0483			lda 	identHash
.a53e	91 36		sta ($36),y			sta 	(zTemp0),y
.a540	c8		iny				iny 								; offset 2 is the type byte
.a541	ad 84 04	lda $0484			lda 	identTypeByte
.a544	91 36		sta ($36),y			sta 	(zTemp0),y
.a546	c8		iny				iny
.a547					_CCVData:
.a547	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a549	91 36		sta ($36),y			sta 	(zTemp0),y
.a54b	c8		iny				iny
.a54c	c0 08		cpy #$08			cpy 	#8
.a54e	90 f7		bcc $a547			bcc 	_CCVData
.a550	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a553					_CCVCopyName:
.a553	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a556	91 36		sta ($36),y			sta 	(zTemp0),y
.a558	e8		inx				inx
.a559	c8		iny				iny
.a55a	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a55d	d0 f4		bne $a553			bne 	_CCVCopyName
.a55f	98		tya				tya 								; patch offset
.a560	92 36		sta ($36)			sta 	(zTemp0)
.a562	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a564	91 36		sta ($36),y			sta 	(zTemp0),y
.a566	88		dey				dey
.a567	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a569	09 80		ora #$80			ora 	#$80
.a56b	91 36		sta ($36),y			sta 	(zTemp0),y
.a56d					_CCVFound:
.a56d	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a56f	38		sec				sec
.a570	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a572	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a574	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a577	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a579	20 f5 a4	jsr $a4f5			jsr 	TokeniseWriteByte
.a57c	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
