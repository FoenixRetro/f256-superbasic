
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct 13 10:10:28 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_JOYBLPAREN                       = $8c; $8c JOYB(
=$8d					KWD_JOYXLPAREN                       = $8d; $8d JOYX(
=$8e					KWD_JOYYLPAREN                       = $8e; $8e JOYY(
=$8f					KWD_LEFTDOLLARLPAREN                 = $8f; $8f LEFT$(
=$90					KWD_LENLPAREN                        = $90; $90 LEN(
=$91					KWD_MIDDOLLARLPAREN                  = $91; $91 MID$(
=$92					KWD_NOTLPAREN                        = $92; $92 NOT(
=$93					KWD_RANDOMLPAREN                     = $93; $93 RANDOM(
=$94					KWD_RIGHTDOLLARLPAREN                = $94; $94 RIGHT$(
=$95					KWD_RNDLPAREN                        = $95; $95 RND(
=$96					KWD_SGNLPAREN                        = $96; $96 SGN(
=$97					KWD_SPCLPAREN                        = $97; $97 SPC(
=$98					KWD_STRDOLLARLPAREN                  = $98; $98 STR$(
=$99					KWD_TIMERLPAREN                      = $99; $99 TIMER(
=$9a					KWD_TRUE                             = $9a; $9a TRUE
=$9b					KWD_VALLPAREN                        = $9b; $9b VAL(
=$9c					KWD_FOR                              = $9c; $9c FOR
=$9d					KWD_IF                               = $9d; $9d IF
=$9e					KWD_PROC                             = $9e; $9e PROC
=$9f					KWD_REPEAT                           = $9f; $9f REPEAT
=$a0					KWD_WHILE                            = $a0; $a0 WHILE
=$a1					KWD_ENDIF                            = $a1; $a1 ENDIF
=$a2					KWD_ENDPROC                          = $a2; $a2 ENDPROC
=$a3					KWD_NEXT                             = $a3; $a3 NEXT
=$a4					KWD_THEN                             = $a4; $a4 THEN
=$a5					KWD_UNTIL                            = $a5; $a5 UNTIL
=$a6					KWD_WEND                             = $a6; $a6 WEND
=$a7					KWD_BY                               = $a7; $a7 BY
=$a8					KWD_CALL                             = $a8; $a8 CALL
=$a9					KWD_CIRCLE                           = $a9; $a9 CIRCLE
=$aa					KWD_CLEAR                            = $aa; $aa CLEAR
=$ab					KWD_CLS                              = $ab; $ab CLS
=$ac					KWD_COLOR                            = $ac; $ac COLOR
=$ad					KWD_COLOUR                           = $ad; $ad COLOUR
=$ae					KWD_DATA                             = $ae; $ae DATA
=$af					KWD_DIM                              = $af; $af DIM
=$b0					KWD_DOWNTO                           = $b0; $b0 DOWNTO
=$b1					KWD_ELSE                             = $b1; $b1 ELSE
=$b2					KWD_FROM                             = $b2; $b2 FROM
=$b3					KWD_GFX                              = $b3; $b3 GFX
=$b4					KWD_GOSUB                            = $b4; $b4 GOSUB
=$b5					KWD_GOTO                             = $b5; $b5 GOTO
=$b6					KWD_HERE                             = $b6; $b6 HERE
=$b7					KWD_IMAGE                            = $b7; $b7 IMAGE
=$b8					KWD_LET                              = $b8; $b8 LET
=$b9					KWD_LINE                             = $b9; $b9 LINE
=$ba					KWD_LOCAL                            = $ba; $ba LOCAL
=$bb					KWD_OFF                              = $bb; $bb OFF
=$bc					KWD_ON                               = $bc; $bc ON
=$bd					KWD_OUTLINE                          = $bd; $bd OUTLINE
=$be					KWD_PLOT                             = $be; $be PLOT
=$bf					KWD_PRINT                            = $bf; $bf PRINT
=$c0					KWD_READ                             = $c0; $c0 READ
=$c1					KWD_RECT                             = $c1; $c1 RECT
=$c2					KWD_REM                              = $c2; $c2 REM
=$c3					KWD_RETURN                           = $c3; $c3 RETURN
=$c4					KWD_SOLID                            = $c4; $c4 SOLID
=$c5					KWD_SPRITE                           = $c5; $c5 SPRITE
=$c6					KWD_TEXT                             = $c6; $c6 TEXT
=$c7					KWD_TO                               = $c7; $c7 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9c					KWC_FIRST_STRUCTURE = $9c
=$a1					KWC_FIRST_STRUCTURE_DEC = $a1
=$a6					KWC_LAST_STRUCTURE = $a6
=$83					KWC_FIRST_UNARY = $83
=$9b					KWC_LAST_UNARY = $9b

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 0b b5	jsr $b50b			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 de 99	jsr $99de			jsr 	PrintStringXA
.8014	20 75 93	jsr $9375			jsr 	NewCommand 					; erase current program
.8017	20 7d a6	jsr $a67d			jsr 	BackloadProgram
.801a	4c f0 94	jmp $94f0			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 68			.text "Built Thursday 13-Oct-2022. Build 1931."
>8065	75 72 73 64 61 79 20 31 33 2d 4f 63 74 2d 32 30
>8075	32 32 2e 20 42 75 69 6c 64 20 31 39 33 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8084	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8087					GXGraphicDraw:
.8087	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8089	b0 06		bcs $8091			bcs 	_GDCoordinate
.808b	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808d	84 37		sty $37				sty 	gxzTemp0+1
.808f	80 3d		bra $80ce			bra 	_GDExecuteA 				; and execute
.8091					_GDCoordinate:
.8091	48		pha				pha 								; save AXY
.8092	da		phx				phx
.8093	5a		phy				phy
.8094	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8096					_GDCopy1:
.8096	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8099	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809c	ca		dex				dex
.809d	10 f7		bpl $8096			bpl 	_GDCopy1
.809f	68		pla				pla 								; update Y
.80a0	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a3	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a6	68		pla				pla
.80a7	8d 29 06	sta $0629			sta 	gxCurrentX
.80aa	68		pla				pla 								; get A (command+X.1) back
.80ab	48		pha				pha
.80ac	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ae	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b1	f0 07		beq $80ba			beq 	_GDXOkay 					; check X range
.80b3	ad 29 06	lda $0629			lda 	gxCurrentX
.80b6	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b8	b0 1e		bcs $80d8			bcs 	_GDError
.80ba					_GDXOkay:
.80ba	ad 2b 06	lda $062b			lda 	gxCurrentY
.80bd	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c0	b0 16		bcs $80d8			bcs 	_GDError
.80c2	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c4					_GDCopy2:
.80c4	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c7	9d 31 06	sta $0631,x			sta 	gxX0,x
.80ca	ca		dex				dex
.80cb	10 f7		bpl $80c4			bpl 	_GDCopy2
.80cd	68		pla				pla 								; get command back
.80ce					_GDExecuteA:
.80ce	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d0	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d2	b0 05		bcs $80d9			bcs 	_GDError2
.80d4	aa		tax				tax
.80d5	7c de 80	jmp ($80de,x)			jmp 	(GRVectorTable,x)
.80d8					_GDError:
.80d8	68		pla				pla 								; throw command
.80d9					_GDError2:
.80d9	38		sec				sec
.80da	60		rts				rts
.80db					GXMove:
.80db	18		clc				clc
.80dc	60		rts				rts
.80dd					GRUndefined:
>80dd	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80de					GRVectorTable:
>80de	ad 82					.word	GXInitialise             ; $00 Initialise
>80e0	c4 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e2	0c 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e4	5f 82					.word	GXClearBitmap            ; $03 Clear
>80e6	8a 84					.word	GXSetColourMode          ; $04 Colour
>80e8	4e 86					.word	GXFontHandler            ; $05 DrawFont
>80ea	96 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ec	fe 86					.word	GXSelect                 ; $07 SPRUSE
>80ee	24 87					.word	GXSelectImage            ; $08 SPRIMG
>80f0	dd 80					.word	GRUndefined              ; $09
>80f2	dd 80					.word	GRUndefined              ; $0a
>80f4	dd 80					.word	GRUndefined              ; $0b
>80f6	dd 80					.word	GRUndefined              ; $0c
>80f8	dd 80					.word	GRUndefined              ; $0d
>80fa	dd 80					.word	GRUndefined              ; $0e
>80fc	dd 80					.word	GRUndefined              ; $0f
>80fe	db 80					.word	GXMove                   ; $10 Move
>8100	58 83					.word	GXLine                   ; $11 Line
>8102	d3 84					.word	GXFrameRectangle         ; $12 FrameRect
>8104	d0 84					.word	GXFillRectangle          ; $13 FillRect
>8106	16 81					.word	GXFrameCircle            ; $14 FrameCircle
>8108	12 81					.word	GXFillCircle             ; $15 FillCircle
>810a	dd 80					.word	GRUndefined              ; $16
>810c	dd 80					.word	GRUndefined              ; $17
>810e	b8 84					.word	GXPlotPoint              ; $18 Plot
>8110	89 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8112					GXFillCircle:
.8112	a9 ff		lda #$ff			lda 	#255
.8114	80 02		bra $8118			bra 	GXCircle
.8116					GXFrameCircle:
.8116	a9 00		lda #$00			lda 	#0
.8118					GXCircle:
.8118	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811b	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811e	f0 26		beq $8146			beq 	_GXCFail
.8120	20 89 88	jsr $8889			jsr 	GXSortXY 					; topleft/bottomright
.8123	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.8126	20 18 82	jsr $8218			jsr 	GXCircleSetup 				; set up for drawing
.8129	9c 4d 06	stz $064d			stz 	gxYChanged
.812c					_GXCircleDraw:
.812c	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.812f	cd 4b 06	cmp $064b			cmp 	gYCentre
.8132	90 0a		bcc $813e			bcc 	_GXCircleContinue
.8134	d0 03		bne $8139			bne 	_GXNoLast
.8136	20 4b 81	jsr $814b			jsr 	GXPlot1
.8139					_GXNoLast:
.8139	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; close the bitmap
.813c	18		clc				clc
.813d	60		rts				rts
.813e					_GXCircleContinue:
.813e	20 48 81	jsr $8148			jsr 	GXPlot2 					; draw it
.8141	20 c5 81	jsr $81c5			jsr 	GXCircleMove 				; adjust the coordinates
.8144	80 e6		bra $812c			bra 	_GXCircleDraw
.8146					_GXCFail:
.8146	38		sec				sec
.8147	60		rts				rts
.8148					GXPlot2:
.8148	20 4b 81	jsr $814b			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814b					GXPlot1:
.814b	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814e	f0 03		beq $8153			beq 	_GXPlot1Only
.8150	20 6f 81	jsr $816f			jsr 	GXPlot0 						; plot and negate
.8153					_GXPlot1Only:
.8153	20 6f 81	jsr $816f			jsr 	GXPlot0 						; twice, undoing negation
.8156	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.8159	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815c	8d 4b 06	sta $064b			sta 	gYCentre
.815f	8e 4a 06	stx $064a			stx 	gXCentre
.8162	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8165	a9 ff		lda #$ff			lda 	#$FF
.8167	8d 4d 06	sta $064d			sta 	gxYChanged
.816a	60		rts				rts
.816b	20 6f 81	jsr $816f			jsr 	GXPlot0 						; do once
.816e	60		rts				rts
.816f	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8172	f0 05		beq $8179			beq 	_GXPlot0Always
.8174	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8177	f0 2d		beq $81a6			beq 	GXPlot0Exit
.8179					_GXPlot0Always:
.8179	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817b	ad 4b 06	lda $064b			lda 	gYCentre
.817e	20 a7 81	jsr $81a7			jsr 	GXSubCopy
.8181	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8183	ad 4a 06	lda $064a			lda 	gXCentre
.8186	20 a7 81	jsr $81a7			jsr 	GXSubCopy
.8189	48		pha				pha 									; save last offset X
.818a	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 					; calculate position/offset.
.818d	68		pla				pla
.818e	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.818f	85 36		sta $36				sta 	gxzTemp0
.8191	64 37		stz $37				stz 	gxzTemp0+1
.8193	26 37		rol $37				rol 	gxzTemp0+1
.8195	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8198	69 80		adc #$80			adc 	#128
.819a	20 23 85	jsr $8523			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819d	38		sec				sec 									; GY = -GY
.819e	a9 00		lda #$00			lda 	#0
.81a0	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a3	8d 4b 06	sta $064b			sta 	gYCentre
.81a6					GXPlot0Exit:
.81a6	60		rts				rts
.81a7					GXSubCopy:
.81a7	85 36		sta $36				sta 	gxzTemp0
.81a9	64 37		stz $37				stz 	gxzTemp0+1
.81ab	29 80		and #$80			and 	#$80
.81ad	f0 02		beq $81b1			beq 	_GXNoSx
.81af	c6 37		dec $37				dec 	gxzTemp0+1
.81b1					_GXNoSx:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b5	e5 36		sbc $36				sbc 	gxzTemp0
.81b7	9d 31 06	sta $0631,x			sta 	gXX0,x
.81ba	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81bd	e5 37		sbc $37				sbc 	gxzTemp0+1
.81bf	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c2	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c4	60		rts				rts
.81c5					GXCircleMove:
.81c5	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c8	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81ca	10 0d		bpl $81d9			bpl 	_GXEMPositive
.81cc	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81cf	ad 4a 06	lda $064a			lda 	gXCentre
.81d2	20 f8 81	jsr $81f8			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d5	a9 06		lda #$06			lda 	#6  						; and add 6
.81d7	80 15		bra $81ee			bra 	_GXEMAddD
.81d9					_GXEMPositive:
.81d9	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dc	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81df	38		sec				sec 								; calculate X-Y
.81e0	ad 4a 06	lda $064a			lda 	gXCentre
.81e3	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e6	20 f8 81	jsr $81f8			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81e9	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81eb	ce 4d 06	dec $064d			dec 	gxYChanged
.81ee					_GXEMAddD:
.81ee	18		clc				clc
.81ef	65 38		adc $38				adc 	gxzTemp1
.81f1	85 38		sta $38				sta 	gxzTemp1
.81f3	90 02		bcc $81f7			bcc 	_GXEMNoCarry
.81f5	e6 39		inc $39				inc 	gxzTemp1+1
.81f7					_GXEMNoCarry:
.81f7	60		rts				rts
.81f8					_GXAdd4TimesToD:
.81f8	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fa	29 80		and #$80			and 	#$80
.81fc	f0 02		beq $8200			beq 	_GXA4Unsigned
.81fe	a9 ff		lda #$ff			lda 	#$FF
.8200					_GXA4Unsigned:
.8200	85 37		sta $37				sta 	gxzTemp0+1
.8202	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8204	26 37		rol $37				rol 	gxzTemp0+1
.8206	06 36		asl $36				asl 	gxzTemp0
.8208	26 37		rol $37				rol 	gxzTemp0+1
.820a	18		clc				clc 								; add
.820b	a5 36		lda $36				lda		gxzTemp0
.820d	65 38		adc $38				adc 	gxzTemp1
.820f	85 38		sta $38				sta 	gxzTemp1
.8211	a5 37		lda $37				lda		gxzTemp0+1
.8213	65 39		adc $39				adc 	gxzTemp1+1
.8215	85 39		sta $39				sta 	gxzTemp1+1
.8217	60		rts				rts
.8218					GXCircleSetup:
.8218	38		sec				sec
.8219	ad 37 06	lda $0637			lda 	gxY1
.821c	ed 33 06	sbc $0633			sbc 	gxY0
.821f	4a		lsr a				lsr 	a
.8220	8d 49 06	sta $0649			sta 	gxRadius
.8223	a2 00		ldx #$00			ldx 	#0
.8225	20 47 82	jsr $8247			jsr 	_GXCalculateCentre
.8228	a2 02		ldx #$02			ldx 	#2
.822a	20 47 82	jsr $8247			jsr 	_GXCalculateCentre
.822d	9c 4a 06	stz $064a			stz 	gXCentre
.8230	ad 49 06	lda $0649			lda 	gxRadius
.8233	8d 4b 06	sta $064b			sta 	gYCentre
.8236	0a		asl a				asl 	a 							; R x 2
.8237	85 36		sta $36				sta 	gxzTemp0
.8239	38		sec				sec
.823a	a9 03		lda #$03			lda 	#3
.823c	e5 36		sbc $36				sbc 	gxzTemp0
.823e	85 38		sta $38				sta 	gxzTemp1
.8240	a9 00		lda #$00			lda 	#0
.8242	e9 00		sbc #$00			sbc 	#0
.8244	85 39		sta $39				sta 	gxzTemp1+1
.8246	60		rts				rts
.8247					_GXCalculateCentre:
.8247	38		sec				sec
.8248	bd 35 06	lda $0635,x			lda 	gxX1,x
.824b	7d 31 06	adc $0631,x			adc 	gXX0,x
.824e	9d 35 06	sta $0635,x			sta 	gXX1,x
.8251	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8254	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8257	4a		lsr a				lsr 	a
.8258	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825b	7e 35 06	ror $0635,x			ror 	gXX1,x
.825e	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.825f					GXClearBitmap:
.825f	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8262	f0 24		beq $8288			beq 	_GXCBFail
.8264	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start access
.8267	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8269	ad 3d 06	lda $063d			lda 	gxHeight
.826c	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826e	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8270					_GXCalcLastPage:
.8270	98		tya				tya 								; add to base page
.8271	18		clc				clc
.8272	6d 3b 06	adc $063b			adc 	gxBasePage
.8275	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8277					_GXClearAll:
.8277	20 8a 82	jsr $828a			jsr 	_GXClearBlock 				; clear 8k block
.827a	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827c	a5 0b		lda $0b				lda 	GXEditSlot
.827e	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8281	b0 f4		bcs $8277			bcs 	_GXClearAll
.8283	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap	 			; stop access
.8286	18		clc				clc
.8287	60		rts				rts
.8288					_GXCBFail:
.8288	38		sec				sec
.8289	60		rts				rts
.828a					_GXClearBlock:
.828a	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828c	85 38		sta $38				sta 	0+gxzTemp1
.828e	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8290	85 39		sta $39				sta 	1+gxzTemp1
.8292					_GXCB0:
.8292	a5 36		lda $36				lda 	gxzTemp0
.8294	a0 00		ldy #$00			ldy 	#0
.8296					_GXCB1:
.8296	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8298	c8		iny				iny
.8299	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829b	c8		iny				iny
.829c	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829e	c8		iny				iny
.829f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a1	c8		iny				iny
.82a2	d0 f2		bne $8296			bne 	_GXCB1
.82a4	e6 39		inc $39				inc 	gxzTemp1+1
.82a6	a5 39		lda $39				lda 	gxzTemp1+1
.82a8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82aa	d0 e6		bne $8292			bne 	_GXCB0
.82ac	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ad					GXInitialise:
.82ad	64 01		stz $01				stz 	1
.82af	a9 01		lda #$01			lda 	#1
.82b1	8d 00 d0	sta $d000			sta 	$D000
.82b4	18		clc				clc
.82b5	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b8	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bb	a2 0f		ldx #$0f			ldx 	#15
.82bd					_GXIClear:
.82bd	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c0	ca		dex				dex
.82c1	10 fa		bpl $82bd			bpl 	_GXIClear
.82c3	60		rts				rts
.82c4					GXControlBitmap:
.82c4	64 01		stz $01				stz 	1
.82c6	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c8	29 01		and #$01			and 	#1 							; set bitmap flag
.82ca	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82cd	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82ce	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d1	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d3	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d5	90 02		bcc $82d9			bcc 	_CBNotOn
.82d7	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82d9					_CBNotOn:
.82d9	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dc	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82de	29 07		and #$07			and 	#7
.82e0	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e3	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e5	d0 02		bne $82e9			bne 	_CBNotDefault
.82e7	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82e9					_CBNotDefault:
.82e9	8d 3b 06	sta $063b			sta 	gxBasePage
.82ec	20 4a 83	jsr $834a			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82ef	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f1	8d 03 d1	sta $d103			sta 	$D103
.82f4	a5 36		lda $36				lda 	gxzTemp0
.82f6	8d 02 d1	sta $d102			sta 	$D102
.82f9	9c 01 d1	stz $d101			stz 	$D101
.82fc	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82fe	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8301	29 01		and #$01			and 	#1
.8303	f0 02		beq $8307			beq 	_CBHaveHeight
.8305	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8307					_CBHaveHeight
.8307	8e 3d 06	stx $063d			stx 	gxHeight
.830a	18		clc				clc
.830b	60		rts				rts
.830c					GXControlSprite:
.830c	64 01		stz $01				stz 	1
.830e	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8310	29 01		and #$01			and 	#1 							; set sprites flag
.8312	8d 39 06	sta $0639			sta 	gxSpritesOn
.8315	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8316	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8319	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831b	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831d	90 02		bcc $8321			bcc 	_CSNotOn
.831f	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8321					_CSNotOn:
.8321	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8324	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8326	d0 02		bne $832a			bne 	_CSNotDefault
.8328	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832a					_CSNotDefault:
.832a	8d 3c 06	sta $063c			sta 	gxSpritePage
.832d	20 4a 83	jsr $834a			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8330	a5 36		lda $36				lda 	zTemp0
.8332	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8335	a5 37		lda $37				lda 	zTemp0+1
.8337	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833a	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833c					_CSClear:
.833c	9e 00 d9	stz $d900,x			stz 	$D900,x
.833f	9e 00 da	stz $da00,x			stz 	$DA00,x
.8342	ca		dex				dex
.8343	d0 f7		bne $833c			bne 	_CSClear
.8345	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8348	18		clc				clc
.8349	60		rts				rts
.834a					GXCalculateBaseAddress:
.834a	85 36		sta $36				sta 	gxzTemp0
.834c	64 37		stz $37				stz 	gxzTemp0+1
.834e	a9 05		lda #$05			lda 	#5
.8350					_GXShift:
.8350	06 36		asl $36				asl 	gxzTemp0
.8352	26 37		rol $37				rol 	gxzTemp0+1
.8354	3a		dec a				dec		a
.8355	d0 f9		bne $8350			bne 	_GXShift
.8357	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8358					GXLine:
.8358	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835b	f0 28		beq $8385			beq 	_GXLFail
.835d	20 be 87	jsr $87be			jsr 	GXOpenBitmap
.8360	20 a7 88	jsr $88a7			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8363	20 2b 84	jsr $842b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8366	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; calculate position/offset.
.8369					_GXDrawLoop:
.8369	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836e	2d 41 06	and $0641			and 	gxANDValue
.8371	4d 40 06	eor $0640			eor 	gxEORValue
.8374	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8376	20 87 83	jsr $8387			jsr 	GXLineIsComplete 			; is the line complete ?
.8379	f0 05		beq $8380			beq 	_GXLExit
.837b	20 a2 83	jsr $83a2			jsr 	GXLineAdvance 				; code as per advance method
.837e	80 e9		bra $8369			bra 	_GXDrawLoop
.8380					_GXLExit:
.8380	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.8383	18		clc				clc
.8384	60		rts				rts
.8385					_GXLFail:
.8385	38		sec				sec
.8386	60		rts				rts
.8387					GXLineIsComplete:
.8387	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838a	d0 0f		bne $839b			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838c	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.838f	4d 35 06	eor $0635			eor 	GXX1
.8392	d0 06		bne $839a			bne 	_GXLICExit
.8394	ad 32 06	lda $0632			lda 	GXX0+1
.8397	4d 36 06	eor $0636			eor 	GXX1+1
.839a					_GXLICExit:
.839a	60		rts				rts
.839b					_GXLICCompareY:
.839b	ad 37 06	lda $0637			lda 	GXY1
.839e	4d 33 06	eor $0633			eor 	GXY0
.83a1	60		rts				rts
.83a2					GXLineAdvance:
.83a2	18		clc				clc 								; add adjust to position
.83a3	ad 52 06	lda $0652			lda 	GXPosition
.83a6	6d 53 06	adc $0653			adc 	GXAdjust
.83a9	8d 52 06	sta $0652			sta 	GXPosition
.83ac	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83af	b0 05		bcs $83b6			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b1	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b4	90 0a		bcc $83c0			bcc 	_GXLANoExtra
.83b6					_GXLAOverflow:
.83b6	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83b9	38		sec				sec 								; subtract total and write back
.83ba	ed 54 06	sbc $0654			sbc 	GXTotal
.83bd	8d 52 06	sta $0652			sta 	GXPosition
.83c0					_GXLANoExtra:
.83c0	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c3	f0 0d		beq $83d2			beq 	_GXDXLarger
.83c5	20 24 84	jsr $8424			jsr 	GXIncrementY
.83c8	ad 55 06	lda $0655			lda 	GXAddSelect
.83cb	f0 10		beq $83dd			beq 	_GXLAExit
.83cd	20 de 83	jsr $83de			jsr 	GXAdjustX
.83d0	80 0b		bra $83dd			bra 	_GXLAExit
.83d2					_GXDXLarger:
.83d2	20 de 83	jsr $83de			jsr 	GXAdjustX
.83d5	ad 55 06	lda $0655			lda 	GXAddSelect
.83d8	f0 03		beq $83dd			beq 	_GXLAExit
.83da	20 24 84	jsr $8424			jsr 	GXIncrementY
.83dd					_GXLAExit:
.83dd	60		rts				rts
.83de					GXAdjustX:
.83de	ad 51 06	lda $0651			lda 	GXDXNegative
.83e1	10 25		bpl $8408			bpl 	_GXAXRight
.83e3	ad 31 06	lda $0631			lda 	GXX0
.83e6	d0 03		bne $83eb			bne 	_GXAXNoBorrow
.83e8	ce 32 06	dec $0632			dec 	GXX0+1
.83eb					_GXAXNoBorrow:
.83eb	ce 31 06	dec $0631			dec 	GXX0
.83ee	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f1	ad 44 06	lda $0644			lda 	gsOffset
.83f4	c9 ff		cmp #$ff			cmp 	#$FF
.83f6	d0 0f		bne $8407			bne 	_GXAYExit 					; underflow
.83f8	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fa	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fc	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83fe	b0 07		bcs $8407			bcs 	_GXAYExit
.8400	18		clc				clc
.8401	69 20		adc #$20			adc 	#$20 						; fix up
.8403	85 3d		sta $3d				sta 	gxzScreen+1
.8405	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8407					_GXAYExit:
.8407	60		rts				rts
.8408					_GXAXRight:
.8408	ee 31 06	inc $0631			inc 	GXX0
.840b	d0 03		bne $8410			bne 	_GXAXNoCarry
.840d	ee 32 06	inc $0632			inc 	GXX0+1
.8410					_GXAXNoCarry:
.8410	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8413	d0 0e		bne $8423			bne 	_GXAXExit 					; if not overflowed, exit.
.8415	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8417	a5 3d		lda $3d				lda 	gxzScreen+1
.8419	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841b	90 06		bcc $8423			bcc 	_GXAXExit
.841d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.841f	85 3d		sta $3d				sta 	gxzScreen+1
.8421	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8423					_GXAXExit:
.8423	60		rts				rts
.8424					GXIncrementY:
.8424	ee 33 06	inc $0633			inc 	GXY0
.8427	20 32 88	jsr $8832			jsr 	GXMovePositionDown
.842a	60		rts				rts
.842b					GXLineSetup:
.842b	ad 37 06	lda $0637			lda 	GXY1
.842e	38		sec				sec
.842f	ed 33 06	sbc $0633			sbc 	GXY0
.8432	4a		lsr a				lsr 	a
.8433	8d 4f 06	sta $064f			sta 	GXDiffY
.8436	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.8439	38		sec				sec
.843a	ad 35 06	lda $0635			lda 	GXX1
.843d	ed 31 06	sbc $0631			sbc 	GXX0
.8440	8d 4e 06	sta $064e			sta 	GXDiffX
.8443	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8446	ed 32 06	sbc $0632			sbc 	GXX0+1
.8449	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844a	6e 4e 06	ror $064e			ror 	GXDiffX
.844d	0a		asl a				asl 	a
.844e	10 0c		bpl $845c			bpl 	_GDXNotNegative
.8450	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8452	38		sec				sec
.8453	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8456	8d 4e 06	sta $064e			sta 	GXDiffX
.8459	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845c					_GDXNotNegative:
.845c	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.845f	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8462	8d 53 06	sta $0653			sta 	GXAdjust
.8465	ad 4e 06	lda $064e			lda 	GXDiffX
.8468	8d 54 06	sta $0654			sta 	GXTotal
.846b	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846e	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8471	90 0f		bcc $8482			bcc 	_GDXNotLarger
.8473	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8476	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.8479	8d 53 06	sta $0653			sta 	GXAdjust
.847c	ad 4f 06	lda $064f			lda 	GXDiffY
.847f	8d 54 06	sta $0654			sta 	GXTotal
.8482					_GDXNotLarger:
.8482	ad 54 06	lda $0654			lda 	GXTotal
.8485	4a		lsr a				lsr 	a
.8486	8d 52 06	sta $0652			sta 	GXPosition
.8489	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848a					GXSetColourMode:
.848a	a6 36		ldx $36				ldx 	gxzTemp0
.848c	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.848f	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8491	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8494	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8496	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8499	ae 3f 06	ldx $063f			ldx 	gxColour
.849c	8e 40 06	stx $0640			stx 	gxEORValue
.849f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a1	90 03		bcc $84a6			bcc 	_GXSDCNotAndColour
.84a3	8e 41 06	stx $0641			stx 	gxANDValue
.84a6					_GXSDCNotAndColour:
.84a6	d0 03		bne $84ab			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a8	9c 40 06	stz $0640			stz 	gxEORValue
.84ab					_GXSDCNotAnd:
.84ab	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ac	90 08		bcc $84b6			bcc 	_GXSDCNoFlip
.84ae	ad 41 06	lda $0641			lda	 	gxANDValue
.84b1	49 ff		eor #$ff			eor 	#$FF
.84b3	8d 41 06	sta $0641			sta 	gxANDValue
.84b6					_GXSDCNoFlip:
.84b6	18		clc				clc
.84b7	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b8					GXPlotPoint:
.84b8	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.84bb	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84be	ac 44 06	ldy $0644			ldy 	gsOffset
.84c1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c3	2d 41 06	and $0641			and 	gxANDValue
.84c6	4d 40 06	eor $0640			eor 	gxEORValue
.84c9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cb	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ce	18		clc				clc
.84cf	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d0					GXFillRectangle:
.84d0	38		sec				sec
.84d1	80 01		bra $84d4			bra 	GXRectangle
.84d3					GXFrameRectangle:
.84d3	18		clc				clc
.84d4					GXRectangle:
.84d4	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d7	f0 35		beq $850e			beq 	_GXRFail
.84d9	08		php				php 								; save Fill flag (CS)
.84da	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.84dd	20 89 88	jsr $8889			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e0	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e3	38		sec				sec 								; sec = Draw line
.84e4	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e7	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84ea	cd 37 06	cmp $0637			cmp 	gxY1
.84ed	f0 19		beq $8508			beq 	_GXRectangleExit
.84ef					_GXRectLoop:
.84ef	20 32 88	jsr $8832			jsr 	GXMovePositionDown 			; down one.
.84f2	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f5	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f8	cd 37 06	cmp $0637			cmp 	gXY1
.84fb	f0 07		beq $8504			beq 	_GXLastLine
.84fd	28		plp				plp 								; get flag back
.84fe	08		php				php
.84ff	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8502	80 eb		bra $84ef			bra 	_GXRectLoop
.8504					_GXLastLine:
.8504	38		sec				sec
.8505	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0
.8508					_GXRectangleExit:
.8508	68		pla				pla 								; throw fill flag.
.8509	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.850c	18		clc				clc
.850d	60		rts				rts
.850e					_GXRFail:
.850e	38		sec				sec
.850f	60		rts				rts
.8510					GXDrawLineX1X0:
.8510	08		php				php 								; save solid/either-end
.8511	38		sec				sec
.8512	ad 35 06	lda $0635			lda		gXX1
.8515	ed 31 06	sbc $0631			sbc 	gXX0
.8518	85 36		sta $36				sta 	gxzTemp0
.851a	ad 36 06	lda $0636			lda 	gXX1+1
.851d	ed 32 06	sbc $0632			sbc 	gXX0+1
.8520	85 37		sta $37				sta 	gxzTemp0+1
.8522	28		plp				plp
.8523					GXDrawLineTemp0:
.8523	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8525	48		pha				pha
.8526	a5 3d		lda $3d				lda 	gxzScreen+1
.8528	48		pha				pha
.8529	ad 44 06	lda $0644			lda 	gsOffset
.852c	48		pha				pha
.852d	a5 0b		lda $0b				lda 	GXEditSlot
.852f	48		pha				pha
.8530	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8533	90 1e		bcc $8553			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8535					_GXDLTLine:
.8535	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8537	2d 41 06	and $0641			and 	gxANDValue
.853a	4d 40 06	eor $0640			eor 	gxEORValue
.853d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.853f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8541	d0 04		bne $8547			bne 	_GXDLTNoBorrow
.8543	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8545	30 2e		bmi $8575			bmi 	_GXDLTExit
.8547					_GXDLTNoBorrow:
.8547	c6 36		dec $36				dec 	gxzTemp0
.8549	c8		iny				iny 								; next slot.
.854a	d0 e9		bne $8535			bne 	_GXDLTLine
.854c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854e	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap				; check for new page.
.8551	80 e2		bra $8535			bra 	_GXDLTLine
.8553					_GXDLTEndPoints:
.8553	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8555	2d 41 06	and $0641			and 	gxANDValue
.8558	4d 40 06	eor $0640			eor 	gxEORValue
.855b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855d	98		tya				tya 								; advance to right side
.855e	18		clc				clc
.855f	65 36		adc $36				adc 	gxzTemp0
.8561	a8		tay				tay
.8562	a5 3d		lda $3d				lda 	gxzScreen+1
.8564	65 37		adc $37				adc 	gxzTemp0+1
.8566	85 3d		sta $3d				sta 	gxzScreen+1
.8568	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap 			; fix up.
.856b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856d	2d 41 06	and $0641			and 	gxANDValue
.8570	4d 40 06	eor $0640			eor 	gxEORValue
.8573	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8575					_GXDLTExit:
.8575	68		pla				pla
.8576	85 0b		sta $0b				sta 	GXEditSlot
.8578	68		pla				pla
.8579	8d 44 06	sta $0644			sta 	gsOffset
.857c	68		pla				pla
.857d	85 3d		sta $3d				sta 	gxzScreen+1
.857f	68		pla				pla
.8580	85 3c		sta $3c				sta 	gxzScreen
.8582	60		rts				rts
.8583					GXDLTCheckWrap:
.8583	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8585	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8587	90 06		bcc $858f			bcc 	_GXDLTCWExit
.8589	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858b	85 3d		sta $3d				sta 	gxzScreen+1
.858d	e6 0b		inc $0b				inc 	GXEditSlot
.858f					_GXDLTCWExit:
.858f	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8590					GXDrawGraphicElement:
.8590	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8593	3a		dec a				dec 	a
.8594	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8597	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859a	9c 5c 06	stz $065c			stz 	gxHFlip
.859d	2c 5d 06	bit $065d			bit 	gxUseMode
.85a0	10 03		bpl $85a5			bpl 	_GXNotVertical
.85a2	8d 5b 06	sta $065b			sta 	gxVFlip
.85a5					_GXNotVertical:
.85a5	50 03		bvc $85aa			bvc 	_GXNotHorizontal
.85a7	8d 5c 06	sta $065c			sta 	gxHFlip
.85aa					_GXNotHorizontal:
.85aa	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ad	f0 5f		beq $860e			beq 	_GXSLFail
.85af	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b2	48		pha				pha
.85b3	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b6	8e 58 06	stx $0658			stx 	gxAcquireVector
.85b9	20 be 87	jsr $87be			jsr 	gxOpenBitmap 				; open the bitmap.
.85bc	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85bf	4a		lsr a				lsr 	a
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	29 07		and #$07			and		#7
.85c4	1a		inc a				inc 	a
.85c5	8d 5a 06	sta $065a			sta 	gxScale
.85c8	64 38		stz $38				stz 	gxzTemp1						; start first line
.85ca					_GXGELoop:
.85ca	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cc	4d 5b 06	eor $065b			eor 	gxVFlip
.85cf	aa		tax				tax 								; get the Xth line.
.85d0	20 10 86	jsr $8610			jsr 	_GXCallAcquire 				; get that data.
.85d3	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d6	85 39		sta $39				sta 	gxzTemp1+1
.85d8					_GXGELoop2:
.85d8	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85db	cd 3d 06	cmp $063d			cmp 	gxHeight
.85de	b0 10		bcs $85f0			bcs 	_GXDGEExit
.85e0	20 13 86	jsr $8613			jsr 	GXRenderOneLine 			; render line
.85e3	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e5	d0 f1		bne $85d8			bne 	_GXGELoop2
.85e7	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85e9	a5 38		lda $38				lda 	gxzTemp1
.85eb	cd 56 06	cmp $0656			cmp 	gxSize
.85ee	d0 da		bne $85ca			bne 	_GXGELoop
.85f0					_GXDGEExit:
.85f0	68		pla				pla 								; restore Y for next time
.85f1	8d 33 06	sta $0633			sta 	gxY0
.85f4	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f7					_GXShiftLeft:
.85f7	18		clc				clc
.85f8	ad 56 06	lda $0656			lda 	gxSize
.85fb	6d 31 06	adc $0631			adc 	gxX0
.85fe	8d 31 06	sta $0631			sta 	gxX0
.8601	90 03		bcc $8606			bcc 	_GXSLNoCarry
.8603	ee 32 06	inc $0632			inc 	gxX0+1
.8606					_GXSLNoCarry:
.8606	ca		dex				dex
.8607	d0 ee		bne $85f7			bne 	_GXShiftLeft
.8609	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.860c	18		clc				clc
.860d	60		rts				rts
.860e					_GXSLFail:
.860e	38		sec				sec
.860f	60		rts				rts
.8610					_GXCallAcquire:
.8610	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8613					GXRenderOneLine:
.8613	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; calculate position/offset.
.8616	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8619	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861b					_GXROLLoop1:
.861b	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861e	85 3b		sta $3b				sta 	gxzTemp2+1
.8620					_GXROLLoop2:
.8620	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8622	4d 5c 06	eor $065c			eor 	gxHFlip
.8625	aa		tax				tax 								; read from the pixel buffer
.8626	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8629	f0 0a		beq $8635			beq 	_GXZeroPixel 				; don't draw if zero.
.862b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.862d	2d 41 06	and $0641			and 	gxANDValue
.8630	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8633	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8635					_GXZeroPixel:
.8635	c8		iny				iny 								; advance pointer
.8636	d0 05		bne $863d			bne 	_GXNoShift
.8638	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.863a	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap				; check for new page.
.863d					_GXNoShift:
.863d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.863f	d0 df		bne $8620			bne 	_GXROLLoop2
.8641	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8643	a5 3a		lda $3a				lda 	gxzTemp2
.8645	cd 56 06	cmp $0656			cmp 	gxSize
.8648	d0 d1		bne $861b			bne 	_GXROLLoop1
.864a	ee 33 06	inc $0633			inc 	gxY0
.864d	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.864e					GXFontHandler:
.864e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8650	4d 3e 06	eor $063e			eor 	gxMode
.8653	8d 5d 06	sta $065d			sta 	gxUseMode
.8656	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8658	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.865a	26 37		rol $37				rol	 	gxzTemp0+1
.865c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.865e	26 37		rol $37				rol	 	gxzTemp0+1
.8660	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8662	26 37		rol $37				rol	 	gxzTemp0+1
.8664	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8666	09 c0		ora #$c0			ora 	#$C0
.8668	85 37		sta $37				sta 	gxzTemp0+1
.866a	a9 08		lda #$08			lda 	#8 							; size 8x8
.866c	a2 74		ldx #$74			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.866e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8670	20 90 85	jsr $8590			jsr 	GXDrawGraphicElement
.8673	60		rts				rts
.8674					GXGetGraphicDataFont:
.8674	8a		txa				txa 								; X->Y
.8675	a8		tay				tay
.8676	a6 01		ldx $01				ldx 	1 							; preserve old value
.8678	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.867a	85 01		sta $01				sta 	1
.867c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.867e	86 01		stx $01				stx 	1 							; put old value back.
.8680	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8682					_GXExpand:
.8682	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8685	0a		asl a				asl 	a 							; shift bit 7 into C
.8686	90 08		bcc $8690			bcc 	_GXNoPixel
.8688	48		pha				pha 								; if set, set pixel buffer to current colour.
.8689	ad 3f 06	lda $063f			lda 	gxColour
.868c	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.868f	68		pla				pla
.8690					_GXNoPixel:
.8690	e8		inx				inx 								; do the whole byte.
.8691	e0 08		cpx #$08			cpx 	#8
.8693	d0 ed		bne $8682			bne 	_GXExpand
.8695	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8696					GXSpriteHandler:
.8696	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8698	4d 3e 06	eor $063e			eor 	gxMode
.869b	8d 5d 06	sta $065d			sta 	gxUseMode
.869e	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a0	da		phx				phx
.86a1	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; can access sprite information
.86a4	68		pla				pla
.86a5	20 4d 88	jsr $884d			jsr 	GXFindSprite 				; get the sprite address
.86a8	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.86ab	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86ae	a2 b6		ldx #$b6			ldx 	#GXSpriteAcquire & $FF
.86b0	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86b2	20 90 85	jsr $8590			jsr 	GXDrawGraphicElement
.86b5	60		rts				rts
.86b6					GXSpriteAcquire:
.86b6	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86b9	85 0b		sta $0b				sta 	GXEditSlot
.86bb	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86bd	a9 00		lda #$00			lda 	#0
.86bf	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86c2					_GXTimesRowNumber:
.86c2	18		clc				clc
.86c3	65 36		adc $36				adc 	zTemp0
.86c5	ca		dex				dex
.86c6	10 fa		bpl $86c2			bpl 	_GXTimesRowNumber
.86c8	64 37		stz $37				stz 	gxzTemp0+1
.86ca	0a		asl a				asl 	a 							; row x 2,4,6,8
.86cb	26 37		rol $37				rol 	gxzTemp0+1
.86cd	0a		asl a				asl 	a 							; row x 4,8,12,16
.86ce	26 37		rol $37				rol 	gxzTemp0+1
.86d0	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d1	26 37		rol $37				rol 	gxzTemp0+1
.86d3	85 36		sta $36				sta 	gxzTemp0
.86d5	18		clc				clc 								; add base address.
.86d6	a5 36		lda $36				lda 	gxzTemp0
.86d8	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86db	85 36		sta $36				sta 	gxzTemp0
.86dd	a5 37		lda $37				lda 	gxzTemp0+1
.86df	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86e2					_GXSAFindPage:
.86e2	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86e4	90 06		bcc $86ec			bcc 	_GXSAFoundPage
.86e6	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86e8	e6 0b		inc $0b				inc 	GXEditSlot
.86ea	80 f6		bra $86e2			bra 	_GXSAFindPage
.86ec					_GXSAFoundPage:
.86ec	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ee	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f0	a0 00		ldy #$00			ldy 	#0
.86f2					_GXSACopyLoop:
.86f2	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86f4	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86f7	c8		iny				iny
.86f8	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86fb	d0 f5		bne $86f2			bne 	_GXSACopyLoop
.86fd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86fe					GXSelect:
.86fe	ad 39 06	lda $0639			lda 	gxSpritesOn
.8701	f0 1f		beq $8722			beq 	_GXSFail
.8703	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8705	c9 40		cmp #$40			cmp 	#64
.8707	b0 19		bcs $8722			bcs 	_GXSFail
.8709	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.870b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.870d	06 36		asl $36				asl 	gxzTemp0
.870f	06 36		asl $36				asl 	gxzTemp0
.8711	06 36		asl $36				asl 	gxzTemp0
.8713	2a		rol a				rol 	a
.8714	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8716	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.8719	85 37		sta $37				sta 	gxzTemp0+1
.871b	a5 36		lda $36				lda 	gxzTemp0
.871d	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8720	18		clc				clc
.8721	60		rts				rts
.8722					_GXSFail:
.8722	38		sec				sec
.8723	60		rts				rts
.8724					GXSelectImage:
.8724	ad 39 06	lda $0639			lda 	gxSpritesOn
.8727	f0 5e		beq $8787			beq 	_GXSIFail
.8729	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.872c	f0 59		beq $8787			beq 	_GXSIFail
.872e	64 01		stz $01				stz 	1
.8730	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8732	d0 43		bne $8777			bne 	_GXSIHide
.8734	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8736	48		pha				pha
.8737	20 be 87	jsr $87be			jsr 	GXOpenBitmap
.873a	68		pla				pla
.873b	20 4d 88	jsr $884d			jsr 	GXFindSprite
.873e	a0 01		ldy #$01			ldy 	#1
.8740	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8743	85 36		sta $36				sta 	gxzTemp0
.8745	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8748	85 37		sta $37				sta 	gxzTemp0+1
.874a	ad 61 06	lda $0661			lda 	GXSpriteOffset
.874d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.874f	18		clc				clc
.8750	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8753	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8756	c8		iny				iny
.8757	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8759	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.875c	69 00		adc #$00			adc 	#0
.875e	c8		iny				iny
.875f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8761	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8764	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8766	2a		rol a				rol 	a 							; x 2
.8767	0a		asl a				asl 	a 							; x 4
.8768	0a		asl a				asl 	a 							; x 8
.8769	0a		asl a				asl 	a 							; x 16
.876a	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.876d	0a		asl a				asl 	a 							; 1 shift
.876e	09 01		ora #$01			ora 	#1 							; enable sprite.
.8770	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8772	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.8775	18		clc				clc
.8776	60		rts				rts
.8777					_GXSIHide:
.8777	ad 45 06	lda $0645			lda 	GSCurrentSprite
.877a	85 36		sta $36				sta 	gxzTemp0
.877c	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.877f	85 37		sta $37				sta 	gxzTemp0+1
.8781	a9 00		lda #$00			lda 	#0
.8783	92 36		sta ($36)			sta 	(gxzTemp0)
.8785	18		clc				clc
.8786	60		rts				rts
.8787					_GXSIFail:
.8787	38		sec				sec
.8788	60		rts				rts
.8789					GXMoveSprite:
.8789	ad 39 06	lda $0639			lda 	gxSpritesOn
.878c	f0 2e		beq $87bc			beq 	_GXSIFail
.878e	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8791	f0 29		beq $87bc			beq 	_GXSIFail
.8793	85 37		sta $37				sta 	gxzTemp0+1
.8795	a0 04		ldy #$04			ldy 	#4
.8797	ad 45 06	lda $0645			lda 	GSCurrentSprite
.879a	85 36		sta $36				sta 	gxzTemp0
.879c	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.879e	38		sec				sec
.879f	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87a2	4a		lsr a				lsr 	a
.87a3	48		pha				pha
.87a4	18		clc				clc
.87a5	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87a8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87aa	c8		iny				iny
.87ab	ad 32 06	lda $0632			lda 	gxX0+1
.87ae	69 00		adc #$00			adc 	#0
.87b0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b2	c8		iny				iny
.87b3	68		pla				pla
.87b4	18		clc				clc
.87b5	6d 33 06	adc $0633			adc 	gxY0
.87b8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ba	18		clc				clc
.87bb	60		rts				rts
.87bc					_GXSIFail:
.87bc	38		sec				sec
.87bd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87be					GXOpenBitmap:
.87be	78		sei				sei 								; no interrupts here
.87bf	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c1	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c4	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c6	85 00		sta $00				sta 	0
.87c8	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87ca	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87cd	58		cli				cli
.87ce	60		rts				rts
.87cf					GXCloseBitmap:
.87cf	78		sei				sei
.87d0	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d3	85 0b		sta $0b				sta 	GXEditSlot
.87d5	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87d8	85 00		sta $00				sta 	0
.87da	58		cli				cli
.87db	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87dc					GXPositionCalc:
.87dc	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87de	48		pha				pha
.87df	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87e2	85 3c		sta $3c				sta 	gxzScreen
.87e4	64 3d		stz $3d				stz 	gxzScreen+1
.87e6	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87e8	26 3d		rol $3d				rol 	gxzScreen+1
.87ea	06 3c		asl $3c				asl 	gxzScreen
.87ec	26 3d		rol $3d				rol 	gxzScreen+1
.87ee	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87ef	65 3c		adc $3c				adc 	gxzScreen
.87f1	85 3c		sta $3c				sta 	gxzScreen
.87f3	90 02		bcc $87f7			bcc 	_GXPCNoCarry
.87f5	e6 3d		inc $3d				inc 	gxzScreen+1
.87f7					_GXPCNoCarry:
.87f7	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87f9	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87fb	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87fd	85 36		sta $36				sta 	gxzTemp0
.87ff	64 3d		stz $3d				stz 	gxzScreen+1
.8801	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8803					_GXPCMultiply32:
.8803	06 3c		asl $3c				asl 	gxzScreen
.8805	26 3d		rol $3d				rol 	gxzScreen+1
.8807	3a		dec a				dec 	a
.8808	d0 f9		bne $8803			bne 	_GXPCMultiply32
.880a	18		clc				clc
.880b	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.880e	65 3c		adc $3c				adc 	gxzScreen
.8810	8d 44 06	sta $0644			sta 	gsOffset
.8813	ad 32 06	lda $0632			lda 	GXX0+1
.8816	65 3d		adc $3d				adc 	gxzScreen+1
.8818	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.881a	90 04		bcc $8820			bcc 	_GXPCNoOverflow
.881c	29 1f		and #$1f			and 	#$1F 						; fix it up
.881e	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8820					_GXPCNoOverflow:
.8820	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8822	85 3d		sta $3d				sta 	gxzScreen+1
.8824	64 3c		stz $3c				stz 	gxzScreen
.8826	18		clc				clc
.8827	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8829	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.882c	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.882e	68		pla				pla
.882f	85 36		sta $36				sta 	gxzTemp0
.8831	60		rts				rts
.8832					GXMovePositionDown:
.8832	18		clc				clc 								; add 320 to offset/temp+1
.8833	ad 44 06	lda $0644			lda 	gsOffset
.8836	69 40		adc #$40			adc 	#64
.8838	8d 44 06	sta $0644			sta 	gsOffset
.883b	a5 3d		lda $3d				lda 	gxzScreen+1
.883d	69 01		adc #$01			adc 	#1
.883f	85 3d		sta $3d				sta 	gxzScreen+1
.8841	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8843	90 07		bcc $884c			bcc 	_GXMPDExit
.8845	38		sec				sec  								; next page
.8846	e9 20		sbc #$20			sbc 	#$20
.8848	85 3d		sta $3d				sta 	gxzScreen+1
.884a	e6 0b		inc $0b				inc 	GXEditSlot
.884c					_GXMPDExit:
.884c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884d					GXFindSprite:
.884d	aa		tax				tax
.884e	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8851	85 0b		sta $0b				sta 	GXEditSlot
.8853	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8856	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.8859	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.885c	48		pha				pha 								; save twice
.885d	48		pha				pha
.885e	29 03		and #$03			and 	#3 							; get sprite size
.8860	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8863	aa		tax				tax
.8864	bd 85 88	lda $8885,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8867	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.886a	68		pla				pla 								; get LUT
.886b	4a		lsr a				lsr		a
.886c	4a		lsr a				lsr		a
.886d	29 03		and #$03			and 	#3
.886f	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8872	68		pla				pla 								; address, neeeds to be x 4
.8873	29 f0		and #$f0			and 	#$F0
.8875	8d 61 06	sta $0661			sta 	GXSpriteOffset
.8878	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887b	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.887e	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8881	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8884	60		rts				rts
.8885					_GXFXSSTTable:
>8885	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8889					GXSortXY:
.8889	20 a7 88	jsr $88a7			jsr 	GXSortY 					; will be sorted on Y now
.888c	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.888f	cd 35 06	cmp $0635			cmp 	gxX1
.8892	ad 32 06	lda $0632			lda 	gXX0+1
.8895	ed 36 06	sbc $0636			sbc 	gXX1+1
.8898	90 0c		bcc $88a6			bcc 	_GXSXYExit 					; X0 < X1 exit
.889a	a2 00		ldx #$00			ldx 	#0 							; swap them over
.889c	a0 04		ldy #$04			ldy 	#4
.889e	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88a1	e8		inx				inx
.88a2	c8		iny				iny
.88a3	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88a6					_GXSXYExit:
.88a6	60		rts				rts
.88a7					GXSortY:
.88a7	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88aa	cd 37 06	cmp $0637			cmp 	gxY1
.88ad	90 0b		bcc $88ba			bcc 	_GXSYSorted
.88af	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b1	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b3					_GXSwap1:
.88b3	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88b6	88		dey				dey
.88b7	ca		dex				dex
.88b8	10 f9		bpl $88b3			bpl 	_GXSwap1
.88ba					_GXSYSorted:
.88ba	60		rts				rts
.88bb					GXSwapXY:
.88bb	bd 31 06	lda $0631,x			lda 	gxX0,x
.88be	48		pha				pha
.88bf	b9 31 06	lda $0631,y			lda 	gxX0,y
.88c2	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c5	68		pla				pla
.88c6	99 31 06	sta $0631,y			sta 	gxX0,y
.88c9	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.88ca					RunDemos:
.88ca					loop:
.88ca	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.88cc	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88ce	a0 00		ldy #$00			ldy 	#(0)
.88d0	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88d3	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.88d5	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d7	a0 00		ldy #$00			ldy 	#(0)
.88d9	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88dc	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.88de	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.88e0	a0 00		ldy #$00			ldy 	#(0)
.88e2	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88e5	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.88e7	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.88e9	a0 00		ldy #$00			ldy 	#(0)
.88eb	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88ee	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.88f0	a2 82		ldx #$82			ldx 	#((130) & $FF)
.88f2	a0 1e		ldy #$1e			ldy 	#(30)
.88f4	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88f7	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.88f9	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.88fb	a0 08		ldy #$08			ldy 	#(1*8)
.88fd	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8900	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.8902	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.8904	a0 08		ldy #$08			ldy 	#(1*8)
.8906	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8909	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.890b	a2 00		ldx #$00			ldx 	#((0) & $FF)
.890d	a0 08		ldy #$08			ldy 	#(1*8)
.890f	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8912	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.8914	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8916	a0 08		ldy #$08			ldy 	#(1*8)
.8918	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.891b	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.891d	a2 02		ldx #$02			ldx 	#((2) & $FF)
.891f	a0 08		ldy #$08			ldy 	#(1*8)
.8921	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8924	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8926	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.8928	a0 0a		ldy #$0a			ldy 	#(10)
.892a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.892d	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.892f	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8931	a0 64		ldy #$64			ldy 	#(100)
.8933	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8936	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.8938	a2 03		ldx #$03			ldx 	#((3) & $FF)
.893a	a0 01		ldy #$01			ldy 	#(1)
.893c	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.893f	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.8941	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8943	a0 00		ldy #$00			ldy 	#(0)
.8945	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8948	a9 32		lda #$32			lda 	#((25)*2)+(((200) >> 8) & 1)
.894a	a2 c8		ldx #$c8			ldx 	#((200) & $FF)
.894c	a0 c8		ldy #$c8			ldy 	#(200)
.894e	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8951	a9 0c		lda #$0c			lda 	#((6)*2)+(((4) >> 8) & 1)
.8953	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8955	a0 01		ldy #$01			ldy 	#(1)
.8957	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.895a	a9 0e		lda #$0e			lda 	#((7)*2)+(((1) >> 8) & 1)
.895c	a2 01		ldx #$01			ldx 	#((1) & $FF)
.895e	a0 00		ldy #$00			ldy 	#(0)
.8960	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8963	a9 32		lda #$32			lda 	#((25)*2)+(((100) >> 8) & 1)
.8965	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8967	a0 c8		ldy #$c8			ldy 	#(200)
.8969	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.896c	a9 0c		lda #$0c			lda 	#((6)*2)+(((5) >> 8) & 1)
.896e	a2 05		ldx #$05			ldx 	#((5) & $FF)
.8970	a0 01		ldy #$01			ldy 	#(1)
.8972	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8975	a9 0e		lda #$0e			lda 	#((7)*2)+(((0) >> 8) & 1)
.8977	a2 00		ldx #$00			ldx 	#((0) & $FF)
.8979	a0 00		ldy #$00			ldy 	#(0)
.897b	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.897e	a9 32		lda #$32			lda 	#((25)*2)+(((50) >> 8) & 1)
.8980	a2 32		ldx #$32			ldx 	#((50) & $FF)
.8982	a0 c8		ldy #$c8			ldy 	#(200)
.8984	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8987	60		rts				rts
.8988	20 f4 a2	jsr $a2f4	demo:	jsr 	Random32Bit
.898b	ee 40 06	inc $0640			inc 	gxEORValue
.898e	a9 30		lda #$30			lda 	#24*2
.8990	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8993	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8996	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8999	80 ed		bra $8988			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.899b					AssembleGroup1:
.899b	a9 ff		lda #$ff			lda 	#$FF
.899d	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89a0	80 02		bra $89a4			bra 	AsmGroup12
.89a2					AssembleGroup2:
.89a2	a5 00		lda $00				lda 	$00
.89a4					AsmGroup12:
.89a4	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89a7	68		pla				pla 								; pop the return address to access the information following.
.89a8	fa		plx				plx
.89a9	20 32 8a	jsr $8a32			jsr 	AccessParameters 			; get opcode and save as base
.89ac	8d a4 04	sta $04a4			sta 	BaseOpcode
.89af	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89b2	d0 08		bne $89bc			bne 	_AG12HaveMask
.89b4	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89b6	20 3a 8a	jsr $8a3a			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89b9	8d a5 04	sta $04a5			sta 	ModeMask
.89bc					_AG12HaveMask:
.89bc	20 75 8b	jsr $8b75			jsr 	TypeAndCalculateOperand 	; get zero page type
.89bf	da		phx				phx 								; save found address mode
.89c0	20 9e 8a	jsr $8a9e			jsr 	AssembleModeX
.89c3	fa		plx				plx  								; restore address mode
.89c4	b0 0b		bcs $89d1			bcs 	_AG12Exit
.89c6	20 d2 89	jsr $89d2			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89c9	20 9e 8a	jsr $8a9e			jsr 	AssembleModeX
.89cc	b0 03		bcs $89d1			bcs 	_AG12Exit
.89ce	4c 65 b3	jmp $b365			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89d1					_AG12Exit:
.89d1	60		rts				rts
.89d2					PromoteToAbsolute:
.89d2	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89d4	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89d6	f0 19		beq $89f1			beq 	_PTADo
.89d8	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89da	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89dc	f0 13		beq $89f1			beq 	_PTADo
.89de	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89e0	e0 80		cpx #$80			cpx 	#AM_ZEROY
.89e2	f0 0d		beq $89f1			beq 	_PTADo
.89e4	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.89e6	e0 d1		cpx #$d1			cpx 	#AM_IND
.89e8	f0 07		beq $89f1			beq 	_PTADo
.89ea	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.89ec	e0 c0		cpx #$c0			cpx 	#AM_INDX
.89ee	f0 01		beq $89f1			beq 	_PTADo
.89f0	60		rts				rts
.89f1					_PTADo:
.89f1	aa		tax				tax
.89f2	60		rts				rts
.89f3					AssembleGroup3:
.89f3	68		pla				pla 								; get parameters, which is just the opcode.
.89f4	fa		plx				plx
.89f5	20 32 8a	jsr $8a32			jsr 	AccessParameters 			; get and output opcode
.89f8	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte
.89fb	20 d9 8b	jsr $8bd9			jsr 	CalculateOperand 			; get a 16 bit operand
.89fe	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a01	38		sec				sec
.8a02	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a05	48		pha				pha 								; LSB in A
.8a06	ad 10 04	lda $0410			lda 	NSMantissa1
.8a09	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a0c	aa		tax				tax 								; MSB in X
.8a0d	68		pla				pla
.8a0e	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a0f	69 7f		adc #$7f			adc 	#$7F
.8a11	90 01		bcc $8a14			bcc 	_AG3NoCarry
.8a13	e8		inx				inx
.8a14					_AG3NoCarry:
.8a14	38		sec				sec 								; fix back and write out anyways.
.8a15	e9 80		sbc #$80			sbc 	#$80
.8a17	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte
.8a1a	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a1c	f0 0a		beq $8a28			beq 	_AG3Exit
.8a1e	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a21	29 01		and #$01			and 	#1
.8a23	f0 03		beq $8a28			beq 	_AG3Exit
.8a25	4c 6a b3	jmp $b36a			jmp 	RangeError 					; no, branch is out of range
.8a28					_AG3Exit:
.8a28	60		rts				rts
.8a29					AssembleGroup4:
.8a29	68		pla				pla 								; pop address
.8a2a	fa		plx				plx
.8a2b	20 32 8a	jsr $8a32			jsr 	AccessParameters 			; access and get first
.8a2e	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte 			; output it.
.8a31	60		rts				rts
.8a32					AccessParameters:
.8a32	8d a1 04	sta $04a1			sta 	ParamStart
.8a35	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a38	a9 01		lda #$01			lda 	#1
.8a3a					GetParameter:
.8a3a	5a		phy				phy
.8a3b	a8		tay				tay
.8a3c	ad a1 04	lda $04a1			lda 	ParamStart
.8a3f	85 36		sta $36				sta 	zTemp0
.8a41	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a44	85 37		sta $37				sta 	zTemp0+1
.8a46	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a48	7a		ply				ply
.8a49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a4a					AssemblerWriteByte:
.8a4a	48		pha			pha
.8a4b	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a4e	29 02		and #$02		and 	#2
.8a50	f0 1b		beq $8a6d		beq 	_AWBNoPrint
.8a52	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a55	20 88 8a	jsr $8a88		jsr 	PrintHex
.8a58	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a5b	20 88 8a	jsr $8a88		jsr 	PrintHex
.8a5e	a9 20		lda #$20		lda 	#' '
.8a60	20 1c b5	jsr $b51c		jsr 	EXTPrintCharacter
.8a63	68		pla			pla 									; print byte
.8a64	48		pha			pha
.8a65	20 88 8a	jsr $8a88		jsr 	PrintHex
.8a68	a9 0d		lda #$0d		lda 	#13
.8a6a	20 1c b5	jsr $b51c		jsr 	EXTPrintCharacter
.8a6d					_AWBNoPrint:
.8a6d	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a70	85 36		sta $36			sta 	zTemp0
.8a72	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a75	f0 0e		beq $8a85		beq 	_AWBRange
.8a77	85 37		sta $37			sta 	zTemp0+1
.8a79	68		pla			pla 									; write byte out
.8a7a	92 36		sta ($36)		sta 	(zTemp0)
.8a7c	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a7f	d0 03		bne $8a84		bne 	_AWBNoCarry
.8a81	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a84					_AWBNoCarry:
.8a84	60		rts			rts
.8a85					_AWBRange:
.8a85	4c 6a b3	jmp $b36a		jmp 	RangeError
.8a88					PrintHex:
.8a88	48		pha				pha
.8a89	4a		lsr a				lsr 	a
.8a8a	4a		lsr a				lsr 	a
.8a8b	4a		lsr a				lsr 	a
.8a8c	4a		lsr a				lsr 	a
.8a8d	20 91 8a	jsr $8a91			jsr 	_PrintNibble
.8a90	68		pla				pla
.8a91					_PrintNibble:
.8a91	29 0f		and #$0f			and 	#15
.8a93	c9 0a		cmp #$0a			cmp 	#10
.8a95	90 02		bcc $8a99			bcc 	_NoShift
.8a97	69 06		adc #$06			adc 	#6
.8a99					_NoShift:
.8a99	69 30		adc #$30			adc 	#48
.8a9b	4c 1c b5	jmp $b51c			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8a9e					AssembleModeX:
.8a9e	5a		phy				phy
.8a9f	ad a3 04	lda $04a3			lda 	IsGroup1
.8aa2	f0 17		beq $8abb			beq 	_AMXGroup2
.8aa4	8a		txa				txa 							; is it in group # 1
.8aa5	29 40		and #$40			and 	#AM_ISG1
.8aa7	f0 50		beq $8af9			beq 	_AMXFail 				; no, give up.
.8aa9	8a		txa				txa 							; get back.
.8aaa	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aac	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8aae	d0 22		bne $8ad2			bne 	_AMXHaveInfo
.8ab0	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ab3	c9 81		cmp #$81			cmp 	#$81
.8ab5	f0 42		beq $8af9			beq 	_AMXFail
.8ab7	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8ab9	80 17		bra $8ad2			bra 	_AMXHaveInfo 			; odd design decision there.
.8abb					_AMXGroup2:
.8abb	8a		txa				txa 							; is it in group 2 ?
.8abc	29 20		and #$20			and 	#AM_ISG2
.8abe	f0 39		beq $8af9			beq 	_AMXFail 				; no, give up.
.8ac0	8a		txa				txa 							; get the offset into Y
.8ac1	29 1f		and #$1f			and 	#$1F
.8ac3	4a		lsr a				lsr 	a 						; make it 0-7.
.8ac4	4a		lsr a				lsr  	a
.8ac5	a8		tay				tay
.8ac6	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8ac9					_AMXCheckOkay:
.8ac9	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8aca	88		dey				dey
.8acb	10 fc		bpl $8ac9			bpl 	_AMXCheckOkay
.8acd	90 2a		bcc $8af9			bcc 	_AMXFail 				; not allowed.
.8acf	8a		txa				txa  							; get mask back
.8ad0	29 1f		and #$1f			and 	#$1F
.8ad2					_AMXHaveInfo:
.8ad2	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8ad4	10 05		bpl $8adb			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8ad6	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8ad9	d0 1e		bne $8af9			bne 	_AMXFail
.8adb					_AMXAnySize:
.8adb	18		clc				clc 							; add offset to the base opcode
.8adc	6d a4 04	adc $04a4			adc 	BaseOpcode
.8adf					_AMXOutputCode:
.8adf	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte 		; write the opcode out.
.8ae2	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8ae4	f0 10		beq $8af6			beq 	_AMXExit
.8ae6	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8ae9	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte
.8aec	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8aee	30 06		bmi $8af6			bmi 	_AMXExit
.8af0	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8af3	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte
.8af6					_AMXExit:
.8af6	7a		ply				ply
.8af7	38		sec				sec
.8af8	60		rts				rts
.8af9					_AMXFail:
.8af9	a0 00		ldy #$00			ldy 	#0
.8afb					_AMXCheckOddities:
.8afb	8a		txa				txa
.8afc	d9 24 8b	cmp $8b24,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8aff	d0 16		bne $8b17			bne 	_AMXCONext
.8b01	b9 22 8b	lda $8b22,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b04	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b07	d0 0e		bne $8b17			bne 	_AMXCONext
.8b09	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b0b	10 05		bpl $8b12			bpl 	_AMXCONotZero
.8b0d	ad 10 04	lda $0410			lda 	NSMantissa1
.8b10	d0 05		bne $8b17			bne 	_AMXCONext
.8b12					_AMXCONotZero:
.8b12	b9 23 8b	lda $8b23,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b15	80 c8		bra $8adf			bra 	_AMXOutputCode 			; and assemble it
.8b17					_AMXCONext:
.8b17	c8		iny				iny
.8b18	c8		iny				iny
.8b19	c8		iny				iny
.8b1a	b9 22 8b	lda $8b22,y			lda 	ExtraOpcode+0,y 		; end of table
.8b1d	d0 dc		bne $8afb			bne 	_AMXCheckOddities
.8b1f					_AMXCOFail:
.8b1f	7a		ply				ply
.8b20	18		clc				clc
.8b21	60		rts				rts
.8b22					ExtraOpcode:
>8b22	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b25	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b28	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b2b	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b2e	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b31	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b34	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b37	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b3a	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b3d	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b40	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b41					LabelHere:
.8b41	c8		iny				iny 								; skip .
.8b42	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b44	20 5f a0	jsr $a05f			jsr 	EvaluateTerm 				; get a term
.8b47	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b4a	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b4c	d0 24		bne $8b72			bne 	_ALType
.8b4e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b51	85 36		sta $36				sta 	zTemp0
.8b53	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b56	85 37		sta $37				sta 	zTemp0+1
.8b58	5a		phy				phy 								; copy address in.
.8b59	a0 01		ldy #$01			ldy 	#1
.8b5b	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b5e	92 36		sta ($36)			sta 	(zTemp0)
.8b60	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b63	91 36		sta ($36),y			sta 	(zTemp0),y
.8b65	c8		iny				iny
.8b66	a9 00		lda #$00			lda 	#0
.8b68	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6a	c8		iny				iny
.8b6b	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6d	c8		iny				iny
.8b6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8b70	7a		ply				ply
.8b71	60		rts				rts
.8b72					_ALType:
.8b72	4c 6f b3	jmp $b36f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b75					TypeAndCalculateOperand:
.8b75	b1 30		lda ($30),y			lda 	(codePtr),y
.8b77	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b79	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b7b	f0 5b		beq $8bd8			beq 	_TACOExit
.8b7d	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b7f	f0 57		beq $8bd8			beq 	_TACOExit
.8b81	c8		iny				iny
.8b82	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b84	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b86	f0 51		beq $8bd9			beq 	CalculateOperand
.8b88	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b8a	f0 1f		beq $8bab			beq 	_TACOIndirect
.8b8c	88		dey				dey 								; undo get of first character
.8b8d	20 d9 8b	jsr $8bd9			jsr 	CalculateOperand 			; get operand
.8b90	b1 30		lda ($30),y			lda 	(codePtr),y
.8b92	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b94	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b96	d0 40		bne $8bd8			bne 	_TACOExit
.8b98	c8		iny				iny
.8b99	20 f6 ac	jsr $acf6			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b9c	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8b9e	c9 58		cmp #$58			cmp 	#'X'
.8ba0	f0 36		beq $8bd8			beq 	_TACOExit
.8ba2	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ba4	c9 59		cmp #$59			cmp 	#'Y'
.8ba6	f0 30		beq $8bd8			beq 	_TACOExit
.8ba8					_TACOSyntax:
.8ba8	4c 65 b3	jmp $b365			jmp 	SyntaxError
.8bab					_TACOIndirect:
.8bab	20 d9 8b	jsr $8bd9			jsr 	CalculateOperand 			; get the operand
.8bae	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bb2	f0 17		beq $8bcb			beq 	_TACOIndX
.8bb4	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bb7	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb9	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bbb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bbd	d0 19		bne $8bd8			bne 	_TACOExit
.8bbf	c8		iny				iny
.8bc0	20 f6 ac	jsr $acf6			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bc3	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8bc5	d0 e1		bne $8ba8			bne 	_TACOSyntax
.8bc7	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bc9	80 0d		bra $8bd8			bra 	_TACOExit
.8bcb					_TACOIndX:
.8bcb	c8		iny				iny
.8bcc	20 f6 ac	jsr $acf6			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bcf	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bd1	d0 d5		bne $8ba8			bne 	_TACOSyntax
.8bd3	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket			; check )
.8bd6	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bd8					_TACOExit:
.8bd8	60		rts				rts
.8bd9					CalculateOperand:
.8bd9	48		pha				pha
.8bda	da		phx				phx
.8bdb	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bdd	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger
.8be0	fa		plx				plx
.8be1	68		pla				pla
.8be2	60		rts				rts
.acf6					TACOCheckXY:
.acf6	b1 30		lda ($30),y			lda 	(codePtr),y
.acf8	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.acfa	c9 40		cmp #$40			cmp 	#$40
.acfc	d0 21		bne $ad1f			bne 	_TCXYFail
.acfe	b1 30		lda ($30),y			lda 	(codePtr),y
.ad00	18		clc				clc
.ad01	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ad03	85 37		sta $37				sta 	zTemp0+1
.ad05	c8		iny				iny
.ad06	b1 30		lda ($30),y			lda 	(codePtr),y
.ad08	c8		iny				iny
.ad09	85 36		sta $36				sta 	zTemp0
.ad0b	5a		phy				phy 								; save position
.ad0c	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ad0e	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad10	d0 0c		bne $ad1e			bne 	_TCXYPopFail
.ad12	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ad14	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad16	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ad18	f0 08		beq $ad22			beq 	_TCXYFound
.ad1a	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ad1c	f0 04		beq $ad22			beq 	_TCXYFound
.ad1e					_TCXYPopFail:
.ad1e	7a		ply				ply
.ad1f					_TCXYFail:
.ad1f	a9 00		lda #$00			lda 	#0
.ad21	60		rts				rts
.ad22					_TCXYFound:
.ad22	7a		ply				ply 								; restore position
.ad23	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ad25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8be3					EditProgramCode:
.8be3	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8be6	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8be9	20 b6 a5	jsr $a5b6			jsr 	MemorySearch
.8bec	90 05		bcc $8bf3			bcc 	_EPCNoDelete 				; reached the end don't delete
.8bee	d0 03		bne $8bf3			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8bf0	20 60 b5	jsr $b560			jsr 	MemoryDeleteLine 			; delete the line
.8bf3					_EPCNoDelete:
.8bf3	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8bf6	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bf8	f0 0d		beq $8c07			beq 	_EPCNoInsert
.8bfa	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8bfd	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c00	20 b6 a5	jsr $a5b6			jsr 	MemorySearch
.8c03	18		clc				clc 								; insert at this point.
.8c04	20 97 b5	jsr $b597			jsr 	MemoryInsertLine 			; insert the line
.8c07					_EPCNoInsert:
.8c07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c08					WarmStart:
.8c08	a2 ff		ldx #$ff			ldx 	#$FF
.8c0a	9a		txs				txs
.8c0b	20 32 b5	jsr $b532			jsr 	EXTInputLine 				; get line to lineBuffer
.8c0e	20 77 aa	jsr $aa77			jsr 	TokeniseLine 				; tokenise the line
.8c11	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8c14	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8c17	d0 17		bne $8c30			bne 	_WSEditCode 				; if so,edit code.
.8c19	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c1c	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8c1e	85 30		sta $30				sta 	codePtr
.8c20	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c22	85 31		sta $31				sta 	codePtr+1
.8c24	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8c27	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c29	f0 dd		beq $8c08			beq 	WarmStart
.8c2b	20 02 95	jsr $9502			jsr 	RUNCodePointerLine 			; execute that line.
.8c2e	80 d8		bra $8c08			bra 	WarmStart
.8c30					_WSEditCode:
.8c30	20 e3 8b	jsr $8be3			jsr 	EditProgramCode
.8c33	20 a1 8c	jsr $8ca1			jsr 	ClearCommand
.8c36	80 d0		bra $8c08			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c38					AssembleCommand:
.8c38	a2 00		ldx #$00			ldx 	#0
.8c3a	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger 		; start address
.8c3d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c40	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c43	ad 10 04	lda $0410			lda 	NSMantissa1
.8c46	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c49	20 87 ad	jsr $ad87			jsr 	CheckComma
.8c4c	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; options
.8c4f	ad 08 04	lda $0408			lda 	NSMantissa0
.8c52	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c55	60		rts				rts
.8c56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c57					AssertCommand:
.8c57	a2 00		ldx #$00			ldx 	#0
.8c59	20 ba a4	jsr $a4ba			jsr 	EvaluateInteger 			; the assert test
.8c5c	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; exit if result is non zero.
.8c5f	d0 05		bne $8c66			bne 	_ACExit
.8c61	a9 0a		lda #$0a		lda	#10
.8c63	4c 85 99	jmp $9985		jmp	ErrorHandler
.8c66					_ACExit:
.8c66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c67					CallCommand:
.8c67	a2 00		ldx #$00			ldx 	#0
.8c69	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger
.8c6c					_CCClear
.8c6c	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c6d	20 57 a5	jsr $a557			jsr 	NSMSetZero
.8c70	e0 04		cpx #$04			cpx 	#4
.8c72	d0 f8		bne $8c6c			bne 	_CCClear
.8c74	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c76					_CCCParam:
.8c76	b1 30		lda ($30),y			lda 	(codePtr),y
.8c78	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c7a	d0 09		bne $8c85			bne 	_CCCRun6502
.8c7c	c8		iny				iny 								; skip comma
.8c7d	e8		inx				inx	 								; next level
.8c7e	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c81	e0 03		cpx #$03			cpx 	#3
.8c83	90 f1		bcc $8c76			bcc 	_CCCParam 					; done all 3 ?
.8c85					_CCCRun6502:
.8c85	5a		phy				phy 								; save position
.8c86	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c89	85 37		sta $37				sta 	zTemp0+1
.8c8b	ad 08 04	lda $0408			lda 	NSMantissa0
.8c8e	85 36		sta $36				sta 	zTemp0
.8c90	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c93	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c96	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c99	20 9e 8c	jsr $8c9e			jsr 	_CCCZTemp0 					; call zTemp0
.8c9c	7a		ply				ply 								; restore position and exit
.8c9d	60		rts				rts
.8c9e					_CCCZTemp0:
.8c9e	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ca1					ClearCommand:
.8ca1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ca3	85 36		sta $36				sta 	0+zTemp0
.8ca5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ca7	85 37		sta $37				sta 	1+zTemp0
.8ca9					_ClearZeroLoop:
.8ca9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cab	f0 24		beq $8cd1			beq 	_ClearZeroEnd
.8cad	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8caf	a9 00		lda #$00			lda 	#0
.8cb1					_ClearOneVariable:
.8cb1	91 36		sta ($36),y			sta 	(zTemp0),y
.8cb3	c8		iny				iny
.8cb4	c0 08		cpy #$08			cpy 	#8
.8cb6	d0 f9		bne $8cb1			bne 	_ClearOneVariable
.8cb8	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cba	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cbc	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cbe	d0 04		bne $8cc4			bne 	_ClearNotProcedure
.8cc0	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8cc2	91 36		sta ($36),y			sta 	(zTemp0),y
.8cc4					_ClearNotProcedure:
.8cc4	18		clc				clc 								; go to the next variable
.8cc5	b2 36		lda ($36)			lda 	(zTemp0)
.8cc7	65 36		adc $36				adc 	zTemp0
.8cc9	85 36		sta $36				sta 	zTemp0
.8ccb	90 dc		bcc $8ca9			bcc 	_ClearZeroLoop
.8ccd	e6 37		inc $37				inc 	zTemp0+1
.8ccf	80 d8		bra $8ca9			bra 	_ClearZeroLoop
.8cd1					_ClearZeroEnd:
.8cd1	18		clc				clc
.8cd2	a5 36		lda $36				lda 	zTemp0
.8cd4	69 01		adc #$01			adc 	#1
.8cd6	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cd9	a5 37		lda $37				lda 	zTemp0+1
.8cdb	69 00		adc #$00			adc 	#0
.8cdd	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ce0	20 70 a6	jsr $a670			jsr 	StackReset
.8ce3	20 7a b6	jsr $b67a			jsr 	StringSystemInitialise
.8ce6	20 a5 98	jsr $98a5			jsr 	ProcedureScan
.8ce9	20 be 94	jsr $94be			jsr 	Command_Restore
.8cec	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8cef	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8cf2	9c a0 04	stz $04a0			stz 	AssemblerControl
.8cf5	20 4c a2	jsr $a24c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8cf8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8cf9					Command_Data:
.8cf9	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8cfb	a2 80		ldx #$80			ldx 	#KWC_EOL
.8cfd	20 f7 98	jsr $98f7			jsr 	ScanForward
.8d00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d01					DimCommand:
.8d01	b1 30		lda ($30),y			lda 	(codePtr),y
.8d03	29 c0		and #$c0			and 	#$C0
.8d05	c9 40		cmp #$40			cmp 	#$40
.8d07	d0 7a		bne $8d83			bne 	_DCSyntax
.8d09	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0b	18		clc				clc
.8d0c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d0e	85 3f		sta $3f				sta 	zaTemp+1
.8d10	c8		iny				iny
.8d11	b1 30		lda ($30),y			lda 	(codePtr),y
.8d13	c8		iny				iny
.8d14	85 3e		sta $3e				sta 	zaTemp
.8d16	5a		phy				phy
.8d17	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d19	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d1b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d1d	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d1f	f0 62		beq $8d83			beq 	_DCSyntax
.8d21	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d23	29 04		and #$04			and 	#NSBIsArray
.8d25	f0 64		beq $8d8b			beq 	_DCType
.8d27	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d29	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d2b	d0 59		bne $8d86			bne 	_DCRedefine
.8d2d	7a		ply				ply
.8d2e	20 8e 8d	jsr $8d8e			jsr 	_DCGetSize 				; get array size, check it.
.8d31	5a		phy				phy
.8d32	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d34	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d36	7a		ply				ply 							; is there a second (e.g. ,x)
.8d37	b1 30		lda ($30),y			lda 	(codePtr),y
.8d39	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d3b	d0 0a		bne $8d47			bne 	_DCOneDimension
.8d3d	c8		iny				iny 							; skip comma
.8d3e	20 8e 8d	jsr $8d8e			jsr 	_DCGetSize 				; get 2nd array size
.8d41	5a		phy				phy
.8d42	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d44	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d46	7a		ply				ply
.8d47					_DCOneDimension:
.8d47	5a		phy				phy 							; save position
.8d48	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d4a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4c	aa		tax				tax
.8d4d	c8		iny				iny
.8d4e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d50	e8		inx				inx 							; bump them.
.8d51	1a		inc a				inc 	a
.8d52	20 01 b2	jsr $b201			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d55	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d57	29 e0		and #$e0			and 	#$E0
.8d59	d0 23		bne $8d7e			bne 	_DCSize
.8d5b	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d5d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d5f	20 9c 8d	jsr $8d9c			jsr 	ScaleByBaseType 		; scale by base type
.8d62	a5 36		lda $36				lda 	zTemp0
.8d64	a6 37		ldx $37				ldx 	zTemp0+1
.8d66	20 0e a2	jsr $a20e			jsr 	AllocateXABytes 		; allocate memory
.8d69	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d6b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6d	c8		iny				iny
.8d6e	8a		txa				txa
.8d6f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d71	7a		ply				ply 							; get position back
.8d72	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket 		; check )
.8d75	b1 30		lda ($30),y			lda 	(codePtr),y
.8d77	c8		iny				iny 							; consume in case
.8d78	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d7a	f0 85		beq $8d01			beq 	DimCommand
.8d7c	88		dey				dey 							; undo consume
.8d7d	60		rts				rts
.8d7e					_DCSize:
.8d7e	a9 16		lda #$16		lda	#22
.8d80	4c 85 99	jmp $9985		jmp	ErrorHandler
.8d83					_DCSyntax:
.8d83	4c 65 b3	jmp $b365			jmp 	SyntaxError
.8d86					_DCRedefine:
.8d86	a9 15		lda #$15		lda	#21
.8d88	4c 85 99	jmp $9985		jmp	ErrorHandler
.8d8b					_DCType:
.8d8b	4c 6f b3	jmp $b36f			jmp 	TypeError
.8d8e					_DCGetSize:
.8d8e	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d90	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 	; get array dimension
.8d93	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d95	f0 e7		beq $8d7e			beq 	_DCSize
.8d97	c9 fe		cmp #$fe			cmp 	#254
.8d99	f0 e3		beq $8d7e			beq 	_DCSize
.8d9b	60		rts				rts
.8d9c					ScaleByBaseType:
.8d9c	29 10		and #$10			and 	#NSBIsString 			; is it string
.8d9e	d0 19		bne $8db9			bne 	_SBBTString
.8da0	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8da2	48		pha				pha
.8da3	a5 36		lda $36				lda 	zTemp0
.8da5	48		pha				pha
.8da6	06 36		asl $36				asl 	zTemp0 					; x 2
.8da8	26 37		rol $37				rol 	zTemp0+1
.8daa	06 36		asl $36				asl 	zTemp0 					; x 4
.8dac	26 37		rol $37				rol 	zTemp0+1
.8dae	68		pla				pla 							; add stacked value = x 5
.8daf	65 36		adc $36				adc 	zTemp0
.8db1	85 36		sta $36				sta 	zTemp0
.8db3	68		pla				pla
.8db4	65 37		adc $37				adc 	zTemp0+1
.8db6	85 37		sta $37				sta 	zTemp0+1
.8db8	60		rts				rts
.8db9					_SBBTString:
.8db9	06 36		asl $36				asl 	zTemp0
.8dbb	26 37		rol $37				rol 	zTemp0+1
.8dbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8dbe					EndCommand:
.8dbe	4c 08 8c	jmp $8c08			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8dc1					UnaryEvent:
.8dc1	fa		plx				plx
.8dc2	20 3b 97	jsr $973b			jsr 	TimerToStackX 				; timer in +0
.8dc5	e8		inx				inx  								; put reference into +1
.8dc6	20 5f a0	jsr $a05f			jsr 	EvaluateTerm
.8dc9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8dcc	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8dce	d0 57		bne $8e27			bne 	_UEType
.8dd0	e8		inx				inx 								; put the step in +2
.8dd1	20 87 ad	jsr $ad87			jsr 	CheckComma
.8dd4	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger
.8dd7	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.8dda	ca		dex				dex
.8ddb	ca		dex				dex
.8ddc	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy reference to zTemp0
.8ddf	85 36		sta $36				sta 	zTemp0
.8de1	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8de4	85 37		sta $37				sta 	zTemp0+1
.8de6	5a		phy				phy
.8de7	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8de9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8deb	30 36		bmi $8e23			bmi 	_UEFalse
.8ded	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8def	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8df2	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8df4	c8		iny				iny
.8df5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8df8	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8dfa	c8		iny				iny
.8dfb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dfe	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e00	90 21		bcc $8e23			bcc 	_UEFalse 					; no, return FALSE.
.8e02	18		clc				clc
.8e03	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8e05	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e08	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8e0b	91 36		sta ($36),y			sta 	(zTemp0),y
.8e0d	c8		iny				iny
.8e0e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e11	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8e14	91 36		sta ($36),y			sta 	(zTemp0),y
.8e16	c8		iny				iny
.8e17	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e1a	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8e1d	91 36		sta ($36),y			sta 	(zTemp0),y
.8e1f	7a		ply				ply
.8e20	4c f2 99	jmp $99f2			jmp 	ReturnTrue
.8e23					_UEFalse:
.8e23	7a		ply				ply 								; restore Y
.8e24	4c fe 99	jmp $99fe			jmp 	ReturnFalse 				; and return False
.8e27					_UEType:
.8e27	4c 6f b3	jmp $b36f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8e2a					ForCommand:
.8e2a	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8e2c	20 0b a6	jsr $a60b			jsr 	StackOpen
.8e2f	a2 00		ldx #$00			ldx 	#0
.8e31	20 5f a0	jsr $a05f			jsr 	EvaluateTerm
.8e34	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e37	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e39	d0 49		bne $8e84			bne		_FCError
.8e3b	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e3d	20 8f ad	jsr $ad8f			jsr 	CheckNextA
.8e40	e8		inx				inx
.8e41	20 ba a4	jsr $a4ba			jsr 	EvaluateInteger 			; <from> in +1
.8e44	b1 30		lda ($30),y			lda 	(codePtr),y
.8e46	c8		iny				iny 								; consume it
.8e47	48		pha				pha 								; save on stack for later
.8e48	c9 b0		cmp #$b0			cmp 	#KWD_DOWNTO
.8e4a	f0 04		beq $8e50			beq 	_FCNoSyntax
.8e4c	c9 c7		cmp #$c7			cmp 	#KWD_TO
.8e4e	d0 37		bne $8e87			bne 	_FCSyntaxError
.8e50					_FCNoSyntax:
.8e50	e8		inx				inx
.8e51	20 ba a4	jsr $a4ba			jsr 	EvaluateInteger
.8e54	20 4f a6	jsr $a64f			jsr 	STKSaveCodePosition 		; save loop back position
.8e57	68		pla				pla 								; restore DOWNTO or TO
.8e58	5a		phy				phy 								; save Y on the stack
.8e59	49 b0		eor #$b0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e5b	f0 02		beq $8e5f			beq 	_FCNotDownTo
.8e5d	a9 02		lda #$02			lda 	#2
.8e5f					_FCNotDownTo:
.8e5f	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8e60	a0 10		ldy #$10			ldy 	#16
.8e62	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8e64	a0 06		ldy #$06			ldy 	#6
.8e66	ad 08 04	lda $0408			lda 	NSMantissa0
.8e69	91 34		sta ($34),y			sta 	(basicStack),y
.8e6b	ad 10 04	lda $0410			lda 	NSMantissa1
.8e6e	c8		iny				iny
.8e6f	91 34		sta ($34),y			sta 	(basicStack),y
.8e71	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e73	a2 01		ldx #$01			ldx 	#1
.8e75	20 8a 8e	jsr $8e8a			jsr 	FCIntegerToStack
.8e78	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e7a	a2 02		ldx #$02			ldx 	#2
.8e7c	20 8a 8e	jsr $8e8a			jsr 	FCIntegerToStack
.8e7f	20 aa 8e	jsr $8eaa			jsr 	CopyIndexToReference
.8e82	7a		ply				ply 								; restore position
.8e83	60		rts				rts
.8e84					_FCError:
.8e84	4c 6f b3	jmp $b36f			jmp 	TypeError
.8e87					_FCSyntaxError:
.8e87	4c 65 b3	jmp $b365			jmp 	SyntaxError
.8e8a					FCIntegerToStack:
.8e8a	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8e8d	10 03		bpl $8e92			bpl	 	_FCNotNegative
.8e8f	20 0c a5	jsr $a50c			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e92					_FCNotNegative:
.8e92	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e95	91 34		sta ($34),y			sta 	(basicStack),y
.8e97	c8		iny				iny
.8e98	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e9b	91 34		sta ($34),y			sta 	(basicStack),y
.8e9d	c8		iny				iny
.8e9e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ea1	91 34		sta ($34),y			sta 	(basicStack),y
.8ea3	c8		iny				iny
.8ea4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8ea7	91 34		sta ($34),y			sta 	(basicStack),y
.8ea9	60		rts				rts
.8eaa					CopyIndexToReference:
.8eaa	5a		phy				phy
.8eab	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ead	38		sec				sec 								; (because we copy from offset 8)
.8eae	b1 34		lda ($34),y			lda 	(basicStack),y
.8eb0	e9 08		sbc #$08			sbc 	#8
.8eb2	85 36		sta $36				sta 	zTemp0
.8eb4	c8		iny				iny
.8eb5	b1 34		lda ($34),y			lda 	(basicStack),y
.8eb7	e9 00		sbc #$00			sbc 	#0
.8eb9	85 37		sta $37				sta 	zTemp0+1
.8ebb	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ebd	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ebf	b1 34		lda ($34),y			lda 	(basicStack),y
.8ec1	0a		asl a				asl 	a 							; into carry
.8ec2	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ec4	90 14		bcc $8eda			bcc 	_CITRNormal
.8ec6	38		sec				sec
.8ec7					_CITRNegative:
.8ec7	a9 00		lda #$00			lda 	#0
.8ec9	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ecb	91 36		sta ($36),y			sta 	(zTemp0),y
.8ecd	c8		iny				iny
.8ece	ca		dex				dex
.8ecf	d0 f6		bne $8ec7			bne 	_CITRNegative
.8ed1	88		dey				dey 								; look at MSB of mantissa
.8ed2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8ed4	09 80		ora #$80			ora 	#$80
.8ed6	91 36		sta ($36),y			sta 	(zTemp0),y
.8ed8	7a		ply				ply
.8ed9	60		rts				rts
.8eda					_CITRNormal:
.8eda	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8edc	91 36		sta ($36),y			sta 	(zTemp0),y
.8ede	c8		iny				iny
.8edf	ca		dex				dex
.8ee0	d0 f8		bne $8eda			bne 	_CITRNormal
.8ee2	7a		ply				ply 								; and exit.
.8ee3	60		rts				rts
.8ee4					NextCommand:
.8ee4	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8ee6	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8ee8	20 37 a6	jsr $a637			jsr 	StackCheckFrame
.8eeb	5a		phy				phy
.8eec	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8eee	b1 34		lda ($34),y			lda 	(basicStack),y
.8ef0	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8ef2	30 02		bmi $8ef6			bmi 	_NCStepNeg
.8ef4	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8ef6					_NCStepNeg:
.8ef6	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8ef8	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8efa	18		clc				clc
.8efb					_NCBump:
.8efb	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8efd	91 34		sta ($34),y			sta 	(basicStack),y
.8eff	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8f01	c8		iny				iny 								; next byte
.8f02	ca		dex				dex 								; do four times
.8f03	d0 f6		bne $8efb			bne 	_NCBump
.8f05	20 aa 8e	jsr $8eaa			jsr		CopyIndexToReference		; copy it to the reference variable.
.8f08	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8f0a	b1 34		lda ($34),y			lda 	(basicStack),y
.8f0c	0a		asl a				asl 	a 							; sign bit to carry
.8f0d	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8f0f	85 38		sta $38				sta 	zTemp1
.8f11	90 02		bcc $8f15			bcc 	_NCCompRev 					; use if step is +ve
.8f13	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8f15					_NCCompRev:
.8f15	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8f17	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8f19	85 39		sta $39				sta 	zTemp1+1
.8f1b	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8f1d	38		sec				sec
.8f1e					_NCCompare:
.8f1e	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8f20	b1 34		lda ($34),y			lda 	(basicStack),y
.8f22	a4 39		ldy $39				ldy 	zTemp1+1
.8f24	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f26	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8f28	e6 39		inc $39				inc 	zTemp1+1
.8f2a	ca		dex				dex 								; do it 4 times.
.8f2b	d0 f1		bne $8f1e			bne 	_NCCompare
.8f2d	50 02		bvc $8f31			bvc 	_NCNoOverflow 				; convert to signed comparison
.8f2f	49 80		eor #$80			eor 	#$80
.8f31					_NCNoOverflow:
.8f31	7a		ply				ply 								; restore Y position
.8f32	0a		asl a				asl 	a 							; is bit 7 set.
.8f33	90 04		bcc $8f39			bcc 	_NCLoopback 				; if no , >= so loop back
.8f35	20 29 a6	jsr $a629			jsr 	StackClose 					; exit the loop
.8f38	60		rts				rts
.8f39					_NCLoopBack:
.8f39	20 60 a6	jsr $a660			jsr 	STKLoadCodePosition 		; loop back
.8f3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f3d					RectangleCommand:
.8f3d	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8f3f	80 02		bra $8f43			bra 	ShapeDrawCmd
.8f41					CircleCommand:
.8f41	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8f43					ShapeDrawCmd:
.8f43	20 d1 8f	jsr $8fd1			jsr 	RunGraphicsCommand
.8f46					ShapeDraw:
.8f46	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f49	4c c5 8f	jmp $8fc5			jmp 	ExecuteGraphicCommand	 	; and complete
.8f4c					SpriteCommand:
.8f4c	a2 00		ldx #$00			ldx 	#0
.8f4e	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; get image number.
.8f51	5a		phy				phy
.8f52	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8f54	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f57	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f59	b0 0d		bcs $8f68			bcs 	_SCRange
.8f5b	a0 ff		ldy #$ff			ldy 	#255
.8f5d	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f60	a9 32		lda #$32			lda 	#25*2
.8f62	7a		ply				ply
.8f63	20 d1 8f	jsr $8fd1			jsr 	RunGraphicsCommand
.8f66	80 5d		bra $8fc5			bra 	ExecuteGraphicCommand
.8f68					_SCRange:
.8f68	4c 6a b3	jmp $b36a			jmp 	RangeError
.8f6b					ImageCommand:
.8f6b	a2 00		ldx #$00			ldx 	#0
.8f6d	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; get image number.
.8f70	20 d1 8f	jsr $8fd1			jsr 	RunGraphicsCommand
.8f73					ImageRunDraw:
.8f73	a9 20		lda #$20			lda 	#16*2 						; move cursor
.8f75	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f78	ad 6a 06	lda $066a			lda 	gxDrawScale
.8f7b	0a		asl a				asl 	a
.8f7c	0a		asl a				asl 	a
.8f7d	0a		asl a				asl 	a
.8f7e	a8		tay				tay
.8f7f	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8f81	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f84	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f87	60		rts				rts
.8f88					TextCommand:
.8f88	a2 00		ldx #$00			ldx 	#0
.8f8a	20 a2 a4	jsr $a4a2			jsr 	EvaluateString 				; get text
.8f8d	20 d1 8f	jsr $8fd1			jsr 	RunGraphicsCommand
.8f90					TextRunDraw:
.8f90	a9 20		lda #$20			lda 	#16*2 						; move cursor
.8f92	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f95	a0 00		ldy #$00			ldy 	#0
.8f97					_IRDLoop:
.8f97	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8f9a	85 37		sta $37				sta 	zTemp0+1
.8f9c	ad 08 04	lda $0408			lda 	NSMantissa0
.8f9f	85 36		sta $36				sta 	zTemp0
.8fa1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fa3	f0 13		beq $8fb8			beq 	_IRDExit
.8fa5	5a		phy				phy									; save string pos
.8fa6	48		pha				pha 								; save char
.8fa7	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8faa	0a		asl a				asl 	a
.8fab	0a		asl a				asl 	a
.8fac	0a		asl a				asl 	a
.8fad	a8		tay				tay
.8fae	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8fb0	fa		plx				plx 								; char to draw
.8fb1	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fb4	7a		ply				ply 								; restore string pos
.8fb5	c8		iny				iny
.8fb6	90 df		bcc $8f97			bcc 	_IRDLoop 					; go back if no error.
.8fb8					_IRDExit:
.8fb8	60		rts				rts
.8fb9					PlotCommand:
.8fb9	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8fbb	20 d1 8f	jsr $8fd1			jsr 	RunGraphicsCommand
.8fbe	80 05		bra $8fc5			bra 	ExecuteGraphicCommand
.8fc0					LineCommand:
.8fc0	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8fc2	20 d1 8f	jsr $8fd1			jsr 	RunGraphicsCommand
.8fc5					ExecuteGraphicCommand:
.8fc5	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8fc8	20 87 80	jsr $8087			jsr 	GXGraphicDraw 				; draw it and exit
.8fcb	b0 01		bcs $8fce			bcs 	_EGCError
.8fcd	60		rts				rts
.8fce					_EGCError:
.8fce	4c 65 b3	jmp $b365			jmp 	SyntaxError
.8fd1					RunGraphicsCommand:
.8fd1	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8fd4	68		pla				pla 								; pop handler address
.8fd5	fa		plx				plx
.8fd6	1a		inc a				inc 	a
.8fd7	d0 01		bne $8fda			bne 	_RGINoCarry
.8fd9	e8		inx				inx
.8fda					_RGINoCarry:
.8fda	8d 68 06	sta $0668			sta 	GXHandler
.8fdd	8e 69 06	stx $0669			stx 	GXHandler+1
.8fe0					_RGICommandLoop:
.8fe0	b1 30		lda ($30),y			lda 	(codePtr),y
.8fe2	c8		iny				iny
.8fe3	c9 c7		cmp #$c7			cmp 	#KWD_TO						; is it TO x,y
.8fe5	f0 53		beq $903a			beq 	_RGI_To
.8fe7	c9 b6		cmp #$b6			cmp 	#KWD_HERE 					; do it here.
.8fe9	f0 55		beq $9040			beq 	_RGI_Here
.8feb	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8fed	f0 3d		beq $902c			beq 	_RGI_Exit
.8fef	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ff1	f0 39		beq $902c			beq 	_RGI_Exit
.8ff3	c9 bd		cmp #$bd			cmp 	#KWD_OUTLINE 				; solid or outline
.8ff5	f0 3e		beq $9035			beq 	_RGI_Frame
.8ff7	c9 c4		cmp #$c4			cmp 	#KWD_SOLID
.8ff9	f0 33		beq $902e			beq 	_RGI_Solid
.8ffb	c9 a7		cmp #$a7			cmp 	#KWD_BY 					; by offset
.8ffd	f0 4b		beq $904a			beq 	_RGI_By
.8fff	c9 b2		cmp #$b2			cmp 	#KWD_FROM 					; from
.9001	f0 17		beq $901a			beq 	_RGI_Move2
.9003	c9 af		cmp #$af			cmp 	#KWD_DIM 					; dim (set scale)
.9005	f0 65		beq $906c			beq 	_RGI_Dim
.9007	c9 ad		cmp #$ad			cmp 	#KWD_COLOUR 				; colour or Color
.9009	f0 78		beq $9083			beq 	_RGI_Colour
.900b	c9 ac		cmp #$ac			cmp 	#KWD_COLOR
.900d	f0 74		beq $9083			beq 	_RGI_Colour
.900f	ae 63 06	ldx $0663			ldx 	gxCommandID
.9012	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.9014	d0 03		bne $9019			bne 	_RGI_Move 					; move
.9016	4c ad 90	jmp $90ad			jmp		_RGI_SpriteInstructions
.9019					_RGI_Move:
.9019	88		dey				dey 								; unpick get.
.901a					_RGI_Move2:
.901a	20 d1 90	jsr $90d1			jsr 	GCGetCoordinatePair 		; move to here
.901d	20 f8 90	jsr $90f8			jsr 	GCCopyPairToStore 			; save
.9020	5a		phy				phy
.9021	20 ee 90	jsr $90ee			jsr 	GCLoadAXY 					; load in
.9024	09 20		ora #$20			ora 	#16*2 						; move there
.9026	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9029	7a		ply				ply
.902a	80 b4		bra $8fe0			bra 	_RGICommandLoop 			; and go round
.902c					_RGI_Exit:
.902c	88		dey				dey 								; unpick : / EOL
.902d	60		rts				rts
.902e					_RGI_Solid:
.902e	a9 02		lda #$02			lda 	#2
.9030	8d 64 06	sta $0664			sta 	gxFillSolid
.9033	80 ab		bra $8fe0			bra 	_RGICommandLoop
.9035					_RGI_Frame:
.9035	9c 64 06	stz $0664			stz 	gxFillSolid
.9038	80 a6		bra $8fe0			bra 	_RGICommandLoop
.903a					_RGI_To:
.903a	20 d1 90	jsr $90d1			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.903d	20 f8 90	jsr $90f8			jsr 	GCCopyPairToStore
.9040					_RGI_Here:
.9040	5a		phy				phy
.9041	20 ee 90	jsr $90ee			jsr 	GCLoadAXY 					; load it into AXY
.9044	20 aa 90	jsr $90aa			jsr 	_RGICallHandler 			; go do whatever it is.
.9047	7a		ply				ply
.9048	80 96		bra $8fe0			bra 	_RGICommandLoop 			; and go round
.904a					_RGI_By:
.904a	20 de 90	jsr $90de			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.904d	18		clc				clc
.904e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9051	6d 65 06	adc $0665			adc 	gxxPos
.9054	8d 65 06	sta $0665			sta 	gxXPos
.9057	ad 11 04	lda $0411			lda 	NSMantissa1+1
.905a	6d 66 06	adc $0666			adc 	gxxPos+1
.905d	8d 66 06	sta $0666			sta 	gxXPos+1
.9060	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9063	18		clc				clc
.9064	6d 67 06	adc $0667			adc 	gxYPos
.9067	8d 67 06	sta $0667			sta 	gxYPos
.906a	80 d4		bra $9040			bra 	_RGI_Here
.906c					_RGI_Dim:
.906c	a2 01		ldx #$01			ldx	 	#1
.906e	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger
.9071	ad 09 04	lda $0409			lda 	NSMantissa0+1
.9074	c9 00		cmp #$00			cmp 	#0
.9076	f0 2f		beq $90a7			beq 	_RGIRange
.9078	c9 09		cmp #$09			cmp 	#8+1
.907a	b0 2b		bcs $90a7			bcs		_RGIRange
.907c	3a		dec a				dec 	a
.907d	8d 6a 06	sta $066a			sta 	gxDrawScale
.9080	4c e0 8f	jmp $8fe0			jmp 	_RGICommandLoop
.9083					_RGI_Colour:
.9083	a2 01		ldx #$01			ldx 	#1 							; colour
.9085	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger
.9088	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.908a	20 57 a5	jsr $a557			jsr 	NSMSetZero
.908d	b1 30		lda ($30),y			lda 	(codePtr),y
.908f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.9091	d0 04		bne $9097			bne 	_RGICDefaultMode
.9093	c8		iny				iny
.9094	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger
.9097					_RGICDefaultMode:
.9097	5a		phy				phy
.9098	a9 08		lda #$08			lda 	#4*2 						; set colour.
.909a	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.909d	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90a0	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90a3	7a		ply				ply
.90a4	4c e0 8f	jmp $8fe0			jmp 	_RGICommandLoop 			; and go round
.90a7					_RGIRange:
.90a7	4c 6a b3	jmp $b36a			jmp 	RangeError
.90aa					_RGICallHandler:
.90aa	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.90ad					_RGI_SpriteInstructions:
.90ad	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.90af	f0 07		beq $90b8			beq 	_RGISpriteOff
.90b1	c9 b7		cmp #$b7			cmp 	#KWD_IMAGE
.90b3	f0 11		beq $90c6			beq 	_RGISetImage
.90b5	4c 19 90	jmp $9019			jmp 	_RGI_Move
.90b8					_RGISpriteOff:
.90b8	5a		phy				phy
.90b9	a0 01		ldy #$01			ldy 	#1
.90bb	a2 00		ldx #$00			ldx 	#0
.90bd					_RGIDoCommandLoop:
.90bd	a9 10		lda #$10			lda 	#8*2
.90bf	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90c2	7a		ply				ply
.90c3	4c e0 8f	jmp $8fe0			jmp 	_RGICommandLoop
.90c6					_RGISetImage:
.90c6	a2 01		ldx #$01			ldx 	#1
.90c8	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger
.90cb	5a		phy				phy
.90cc	aa		tax				tax
.90cd	a0 00		ldy #$00			ldy 	#0
.90cf	80 ec		bra $90bd			bra 	_RGIDoCommandLoop
.90d1					GCGetCoordinatePair:
.90d1	a2 01		ldx #$01			ldx 	#1
.90d3	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger
.90d6	20 87 ad	jsr $ad87			jsr 	CheckComma
.90d9	e8		inx				inx
.90da	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger
.90dd	60		rts				rts
.90de					GCSignedCoordinatePair:
.90de	a2 01		ldx #$01			ldx 	#1
.90e0	20 db a4	jsr $a4db			jsr 	Evaluate16BitIntegerSigned
.90e3	20 87 ad	jsr $ad87			jsr 	CheckComma
.90e6	e8		inx				inx
.90e7	20 db a4	jsr $a4db			jsr 	Evaluate16BitIntegerSigned
.90ea	60		rts				rts
.90eb					_GCCPRange:
.90eb	4c 6a b3	jmp $b36a			jmp 	RangeError
.90ee					GCLoadAXY:
.90ee	ad 66 06	lda $0666			lda 	gxXPos+1
.90f1	ae 65 06	ldx $0665			ldx 	gxXPos
.90f4	ac 67 06	ldy $0667			ldy 	gxYPos
.90f7	60		rts				rts
.90f8					GCCopyPairToStore:
.90f8	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.90fb	8d 65 06	sta $0665			sta 	gxXPos
.90fe	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9101	8d 66 06	sta $0666			sta 	gxXPos+1
.9104	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9107	8d 67 06	sta $0667			sta 	gxYPos
.910a	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.910b					BitmapCtrl:
.910b	b1 30		lda ($30),y			lda 	(codePtr),y
.910d	c8		iny				iny
.910e	a2 01		ldx #$01			ldx 	#1
.9110	c9 bc		cmp #$bc			cmp 	#KWD_ON
.9112	f0 11		beq $9125			beq 	BitmapSwitch
.9114	ca		dex				dex
.9115	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.9117	f0 0c		beq $9125			beq 	BitmapSwitch
.9119	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; get the colour
.911c	5a		phy				phy
.911d	aa		tax				tax
.911e	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9120	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9123	7a		ply				ply
.9124	60		rts				rts
.9125					BitmapSwitch:
.9125	5a		phy				phy
.9126	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9128	a9 02		lda #$02			lda 	#1*2
.912a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.912d	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.912f	a0 00		ldy #$00			ldy 	#0
.9131	a2 ff		ldx #$ff			ldx 	#$FF
.9133	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9136	9c 64 06	stz $0664			stz 	gxFillSolid
.9139	9c 65 06	stz $0665			stz 	gxXPos
.913c	9c 66 06	stz $0666			stz 	gxXPos+1
.913f	9c 67 06	stz $0667			stz 	gxYPos
.9142	9c 6a 06	stz $066a			stz 	gxDrawScale
.9145	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9147	a2 00		ldx #$00			ldx 	#0
.9149	a0 00		ldy #$00			ldy 	#0
.914b	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.914e	7a		ply				ply
.914f	60		rts				rts
.9150					SpritesCtrl:
.9150	b1 30		lda ($30),y			lda 	(codePtr),y
.9152	c8		iny				iny
.9153	a2 01		ldx #$01			ldx 	#1
.9155	c9 bc		cmp #$bc			cmp 	#KWD_ON
.9157	f0 08		beq $9161			beq 	SpriteSwitch
.9159	ca		dex				dex
.915a	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.915c	f0 03		beq $9161			beq 	SpriteSwitch
.915e	4c 65 b3	jmp $b365			jmp 	SyntaxError
.9161					SpriteSwitch:
.9161	5a		phy				phy
.9162	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.9164	a9 04		lda #$04			lda 	#2*2
.9166	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9169	7a		ply				ply
.916a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.916b					GfxCommand:
.916b	a2 00		ldx #$00			ldx 	#0
.916d	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; command
.9170	20 87 ad	jsr $ad87			jsr 	CheckComma
.9173	e8		inx				inx
.9174	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger 		; X
.9177	20 87 ad	jsr $ad87			jsr 	CheckComma
.917a	e8		inx				inx
.917b	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; Y
.917e	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.9181	4a		lsr a				lsr 	a
.9182	d0 16		bne $919a			bne 	_GfxError
.9184	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.9187	b0 11		bcs $919a			bcs 	_GfxError 					; bit 7 should have been zero
.9189	5a		phy				phy 								; save pos
.918a	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.918d	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.9190	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9193	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9196	b0 02		bcs $919a			bcs 	_GfxError
.9198	7a		ply				ply 								; restore pos and exit.
.9199	60		rts				rts
.919a					_GfxError:
.919a	4c 6a b3	jmp $b36a			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.919d					Command_GOSUB:
.919d	a2 00		ldx #$00			ldx 	#0
.919f	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.91a2	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.91a4	20 0b a6	jsr $a60b			jsr 	StackOpen 					; create frame
.91a7	20 4f a6	jsr $a64f			jsr 	STKSaveCodePosition 		; save current position
.91aa	4c c0 91	jmp $91c0			jmp 	GotoStackX
.91ad					Command_RETURN:
.91ad	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.91af	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.91b1	20 37 a6	jsr $a637			jsr 	StackCheckFrame
.91b4	20 60 a6	jsr $a660			jsr 	STKLoadCodePosition 		; restore code position
.91b7	20 29 a6	jsr $a629			jsr 	StackClose
.91ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.91bb					GotoCommand:
.91bb	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.91bd	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger
.91c0					GotoStackX:
.91c0	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.91c3	48		pha				pha 								; it is slightly inefficient, just in cases.
.91c4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.91c7	fa		plx				plx
.91c8	20 b6 a5	jsr $a5b6			jsr 	MemorySearch 				; transfer to line number AX.
.91cb	90 05		bcc $91d2			bcc 	_GotoError 					; not found, off end.
.91cd	d0 03		bne $91d2			bne 	_GotoError 					; not found exactly
.91cf	4c fb 94	jmp $94fb			jmp 	RunNewLine 					; and go straight to new line code.
.91d2					_GotoError:
.91d2	a9 0d		lda #$0d		lda	#13
.91d4	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.91d7					IfCommand:
.91d7	a2 00		ldx #$00			ldx 	#0 							; If what.
.91d9	20 97 a4	jsr $a497			jsr 	EvaluateNumber
.91dc	b1 30		lda ($30),y			lda 	(codePtr),y
.91de	c9 a4		cmp #$a4			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.91e0	d0 0a		bne $91ec			bne 	_IFStructured
.91e2	c8		iny				iny 								; consume THEN
.91e3	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; is it zero
.91e6	f0 01		beq $91e9			beq 	_IfFail 					; if fail, go to next line
.91e8	60		rts				rts 								; if THEN just continue
.91e9					_IfFail:
.91e9	4c 60 95	jmp $9560			jmp 	EOLCommand
.91ec					_IfStructured:
.91ec	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; is it zero
.91ef	d0 07		bne $91f8			bne 	_IfExit 					; if not, then continue normally.
.91f1	a9 b1		lda #$b1			lda 	#KWD_ELSE 					; look for else/endif
.91f3	a2 a1		ldx #$a1			ldx 	#KWD_ENDIF
.91f5	20 f7 98	jsr $98f7			jsr 	ScanForward 				; and run from there/
.91f8					_IfExit:
.91f8	60		rts				rts
.91f9					ElseCode:
.91f9	a9 a1		lda #$a1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.91fb	aa		tax				tax 								; so just go to the structure exit
.91fc	20 f7 98	jsr $98f7			jsr 	ScanForward
.91ff	60		rts				rts
.9200					EndIf:
.9200	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9201					LetCommand:
.9201	a2 00		ldx #$00			ldx 	#0
.9203	b1 30		lda ($30),y			lda 	(codePtr),y
.9205	c9 10		cmp #$10			cmp 	#KWD_AT
.9207	d0 16		bne $921f			bne 	_LCStandard
.9209	c8		iny				iny 								; skip equal
.920a	20 5f a0	jsr $a05f			jsr 	EvaluateTerm 				; get a number
.920d	20 a3 9e	jsr $9ea3			jsr 	Dereference 				; dereference it
.9210	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.9213	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.9215	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9218	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.921a	d0 10		bne $922c			bne 	_LCMain
.921c	4c 6f b3	jmp $b36f			jmp 	TypeError 					; was a reference before.
.921f					_LCStandard:
.921f	ad 76 9d	lda $9d76			lda 	PrecedenceLevel+"*"			; precedence > this
.9222	20 90 9d	jsr $9d90			jsr 	EvaluateExpressionAtPrecedence
.9225	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.9228	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.922a	f0 0e		beq $923a			beq 	_LetGoProc 					; it's a procedure call.
.922c					_LCMain:
.922c	a9 3d		lda #$3d			lda 	#"=" 						; check =
.922e	20 8f ad	jsr $ad8f			jsr 	CheckNextA
.9231	e8		inx				inx 								; RHS
.9232	20 8e a4	jsr $a48e			jsr 	EvaluateValue
.9235	ca		dex				dex
.9236	20 3d 92	jsr $923d			jsr 	AssignVariable
.9239	60		rts				rts
.923a					_LetGoProc:
.923a	4c d6 93	jmp $93d6			jmp 	CallProcedure
.923d					AssignVariable:
.923d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.9240	48		pha				pha 								; save a copy
.9241	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9244	29 10		and #$10			and 	#NSBIsString
.9246	d0 0b		bne $9253			bne 	_ASError
.9248	68		pla				pla 								; get back
.9249	29 10		and #$10			and 	#NSBIsString 				; check type
.924b	d0 03		bne $9250			bne 	_ASString
.924d	4c cb 9d	jmp $9dcb			jmp 	AssignNumber
.9250					_ASString:
.9250	4c 39 9e	jmp $9e39			jmp 	AssignString
.9253					_ASError:
.9253	4c 6f b3	jmp $b36f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.9256					Command_List:
.9256	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.9259	9c 14 04	stz $0414			stz 	NSMantissa1+4
.925c	a9 ff		lda #$ff			lda 	#$FF
.925e	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9261	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9264	b1 30		lda ($30),y			lda 	(codePtr),y
.9266	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9268	f0 1e		beq $9288			beq 	_CLSecond
.926a	20 e6 92	jsr $92e6			jsr 	CLIsDigit 					; if not digit, list all
.926d	b0 24		bcs $9293			bcs 	_CLStart
.926f	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.9271	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger
.9274	b1 30		lda ($30),y			lda 	(codePtr),y
.9276	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9278	f0 0e		beq $9288			beq 	_CLSecond 					; if so go get it
.927a	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.927d	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9280	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9283	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9286	80 0b		bra $9293			bra 	_CLStart
.9288					_CLSecond:
.9288	c8		iny				iny 								; consume comma
.9289	20 e6 92	jsr $92e6			jsr 	CLIsDigit 					; digit found
.928c	b0 05		bcs $9293			bcs 	_CLStart 					; if not, continue listing
.928e	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9290	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger
.9293					_CLStart
.9293	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9295	85 30		sta $30				sta 	codePtr
.9297	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9299	85 31		sta $31				sta 	codePtr+1
.929b					_CLLoop:
.929b	20 5d b5	jsr $b55d			jsr 	EXTBreakCheck 				; break check
.929e	f0 30		beq $92d0			beq 	_CLExit
.92a0	b2 30		lda ($30)			lda 	(codePtr)
.92a2	f0 2c		beq $92d0			beq 	_CLExit
.92a4	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.92a6	20 d3 92	jsr $92d3			jsr 	CLCompareLineNo
.92a9	90 18		bcc $92c3			bcc 	_CLNext
.92ab	a2 07		ldx #$07			ldx 	#7
.92ad	20 d3 92	jsr $92d3			jsr 	CLCompareLineNo
.92b0	f0 02		beq $92b4			beq 	_CLDoThisOne
.92b2	b0 0f		bcs $92c3			bcs 	_CLNext
.92b4					_CLDoThisOne:
.92b4	20 53 97	jsr $9753			jsr 	ListConvertLine 			; convert line into token Buffer
.92b7	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.92b9	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.92bb	20 de 99	jsr $99de			jsr 	PrintStringXA
.92be	a9 0d		lda #$0d			lda 	#13 						; new line
.92c0	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.92c3					_CLNext:
.92c3	18		clc				clc
.92c4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92c6	65 30		adc $30				adc 	codePtr
.92c8	85 30		sta $30				sta 	codePtr
.92ca	90 02		bcc $92ce			bcc 	_CREExit
.92cc	e6 31		inc $31				inc 	codePtr+1
.92ce					_CREExit:
.92ce	80 cb		bra $929b			bra 	_CLLoop
.92d0					_CLExit:
.92d0	4c 08 8c	jmp $8c08			jmp 	WarmStart
.92d3					CLCompareLineNo:
.92d3	38		sec				sec
.92d4	a0 01		ldy #$01			ldy 	#1
.92d6	b1 30		lda ($30),y			lda 	(codePtr),y
.92d8	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.92db	85 36		sta $36				sta 	zTemp0
.92dd	c8		iny				iny
.92de	b1 30		lda ($30),y			lda 	(codePtr),y
.92e0	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.92e3	05 36		ora $36				ora 	zTemp0
.92e5	60		rts				rts
.92e6					CLIsDigit:
.92e6	b1 30		lda ($30),y			lda 	(codePtr),y
.92e8	c9 30		cmp #$30			cmp 	#"0"
.92ea	90 03		bcc $92ef			bcc	 	_CLIDExitFalse
.92ec	c9 3a		cmp #$3a			cmp 	#"9"+1
.92ee	60		rts				rts
.92ef					_CLIDExitFalse:
.92ef	38		sec				sec
.92f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.92f1					Command_LOCAL:
.92f1	a2 00		ldx #$00			ldx 	#0 							; at level 0
.92f3	20 ff 92	jsr $92ff			jsr 	LocaliseNextTerm 			; convert term to a local.
.92f6	b1 30		lda ($30),y			lda 	(codePtr),y
.92f8	c8		iny				iny
.92f9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92fb	f0 f4		beq $92f1			beq 	Command_LOCAL
.92fd	88		dey				dey 								; unpick pre-get
.92fe	60		rts				rts
.92ff					LocaliseNextTerm:
.92ff	20 5f a0	jsr $a05f			jsr 	EvaluateTerm 				; evaluate the term
.9302	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9305	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9307	f0 69		beq $9372			beq		_LNTError
.9309	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.930c	85 36		sta $36				sta 	zTemp0
.930e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9311	85 37		sta $37				sta  	zTemp0+1
.9313	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9316	29 10		and #$10			and 	#NSBIsString
.9318	d0 22		bne $933c			bne 	_LNTPushString
.931a	5a		phy				phy
.931b	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.931d					_LNTPushNumLoop:
.931d	b1 36		lda ($36),y			lda		(zTemp0),y
.931f	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.9322	a9 00		lda #$00			lda 	#0
.9324	91 36		sta ($36),y			sta 	(zTemp0),y
.9326	c8		iny				iny
.9327	c0 05		cpy #$05			cpy 	#5
.9329	d0 f2		bne $931d			bne 	_LNTPushNumLoop
.932b	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.932d	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.9330	a5 37		lda $37				lda 	zTemp0+1
.9332	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.9335	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.9337	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.933a	7a		ply				ply
.933b	60		rts				rts
.933c					_LNTPushString:
.933c	5a		phy				phy
.933d	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.933f	85 38		sta $38				sta 	zTemp1
.9341	a0 01		ldy #$01			ldy 	#1
.9343	b1 36		lda ($36),y			lda 	(zTemp0),y
.9345	85 39		sta $39				sta 	zTemp1+1
.9347	a0 00		ldy #$00			ldy 	#0 							; output string
.9349	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.934b	f0 0a		beq $9357			beq 	_LNTStringOut
.934d					_LNTPushStrLoop:
.934d	b1 38		lda ($38),y			lda 	(zTemp1),y
.934f	f0 06		beq $9357			beq 	_LNTStringOut
.9351	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.9354	c8		iny				iny
.9355	80 f6		bra $934d			bra 	_LNTPushStrLoop
.9357					_LNTStringOut:
.9357	98		tya				tya									; output length
.9358	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.935b	a9 00		lda #$00			lda 	#0 							; clear original string.
.935d	92 38		sta ($38)			sta 	(zTemp1)
.935f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9362	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.9365	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9368	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.936b	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.936d	20 e9 a5	jsr $a5e9			jsr 	StackPushByte
.9370	7a		ply				ply
.9371	60		rts				rts
.9372					_LNTError:
.9372	4c 65 b3	jmp $b365			jmp 	SyntaxError
.ad26					LocalPopValue:
.ad26	20 02 a6	jsr $a602			jsr 	StackPopByte
.ad29	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ad2b	d0 17		bne $ad44			bne 	_LPVString
.ad2d	20 02 a6	jsr $a602			jsr 	StackPopByte 				; address
.ad30	85 37		sta $37				sta 	zTemp0+1
.ad32	20 02 a6	jsr $a602			jsr 	StackPopByte
.ad35	85 36		sta $36				sta 	zTemp0
.ad37	5a		phy				phy
.ad38	a0 04		ldy #$04			ldy 	#4 							; copy back
.ad3a					_LPVNumberCopy:
.ad3a	20 02 a6	jsr $a602			jsr 	StackPopByte
.ad3d	91 36		sta ($36),y			sta 	(zTemp0),y
.ad3f	88		dey				dey
.ad40	10 f8		bpl $ad3a			bpl 	_LPVNumberCopy
.ad42	7a		ply				ply 								; and complete
.ad43	60		rts				rts
.ad44					_LPVString:
.ad44	20 02 a6	jsr $a602			jsr 	StackPopByte 				; address of record => zTemp0
.ad47	85 37		sta $37				sta 	zTemp0+1
.ad49	20 02 a6	jsr $a602			jsr 	StackPopByte
.ad4c	85 36		sta $36				sta 	zTemp0
.ad4e	5a		phy				phy
.ad4f	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.ad51	85 38		sta $38				sta 	zTemp1
.ad53	a0 01		ldy #$01			ldy 	#1
.ad55	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad57	85 39		sta $39				sta 	zTemp1+1
.ad59	20 02 a6	jsr $a602			jsr 	StackPopByte 				; # to get => y
.ad5c	a8		tay				tay
.ad5d	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ad5f	f0 0e		beq $ad6f			beq 	_LPVStringCopied
.ad61	a9 00		lda #$00			lda 	#0 							; NULL on end
.ad63	91 38		sta ($38),y			sta 	(zTemp1),y
.ad65					_LPVStringCopy:
.ad65	88		dey				dey
.ad66	30 07		bmi $ad6f			bmi 	_LPVStringCopied
.ad68	20 02 a6	jsr $a602			jsr 	StackPopByte
.ad6b	91 38		sta ($38),y			sta 	(zTemp1),y
.ad6d	80 f6		bra $ad65			bra 	_LPVStringCopy
.ad6f					_LPVStringCopied:
.ad6f	fa		plx				plx
.ad70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9375					NewCommand:
.9375	20 94 a5	jsr $a594			jsr 	MemoryNew
.9378	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.937b	20 a1 8c	jsr $8ca1			jsr 	ClearCommand 				; clear everything.
.937e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.937f					Command_Print:
.937f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9380					_CPLoop:
.9380	08		php				php 								; save last action flag
.9381	b1 30		lda ($30),y			lda 	(codePtr),y
.9383	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9385	f0 46		beq $93cd			beq 	_CPExit
.9387	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9389	f0 42		beq $93cd			beq 	_CPExit
.938b	68		pla				pla 								; throw last action flag
.938c	b1 30		lda ($30),y			lda 	(codePtr),y
.938e	c8		iny				iny
.938f	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9391	f0 37		beq $93ca			beq 	_CPContinueWithSameLine
.9393	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9395	f0 2e		beq $93c5			beq 	_CPTab
.9397	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9399	f0 26		beq $93c1			beq 	_CPNewLine
.939b	88		dey				dey 								; undo the get.
.939c	a2 00		ldx #$00			ldx 	#0
.939e	20 8e a4	jsr $a48e			jsr 	EvaluateValue 				; get a value into slot 0
.93a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.93a4	29 10		and #$10			and 	#NSBIsString
.93a6	f0 0b		beq $93b3			beq 	_CPNumber
.93a8	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.93ab	ad 08 04	lda $0408			lda 	NSMantissa0
.93ae	20 de 99	jsr $99de			jsr 	PrintStringXA
.93b1	80 cc		bra $937f			bra 	Command_Print 				; loop round clearing carry so NL if end
.93b3					_CPNumber:
.93b3	a9 05		lda #$05			lda 	#5 							; maximum decimals
.93b5	20 64 a3	jsr $a364			jsr 	ConvertNumberToString 		; convert to string
.93b8	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.93ba	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.93bc	20 de 99	jsr $99de			jsr 	PrintStringXA
.93bf	80 be		bra $937f			bra 	Command_Print 				; loop round clearing carry so NL if end
.93c1					_CPNewLine:
.93c1	a9 0d		lda #$0d			lda 	#13
.93c3	80 02		bra $93c7			bra 	_CPPrintChar
.93c5					_CPTab:
.93c5	a9 09		lda #$09			lda 	#9 							; print TAB
.93c7					_CPPrintChar:
.93c7	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.93ca					_CPContinueWithSameLine:
.93ca	38		sec				sec 								; loop round with carry set, which
.93cb	80 b3		bra $9380			bra 	_CPLoop 					; will inhibit final CR
.93cd					_CPExit:
.93cd	28		plp				plp 								; get last action flag
.93ce	b0 05		bcs $93d5			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.93d0	a9 0d		lda #$0d			lda 	#13 						; print new line
.93d2	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.93d5					_CPExit2:
.93d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.93d6					CallProcedure:
.93d6	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.93d8	b1 30		lda ($30),y			lda 	(codePtr),y
.93da	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.93dc	f0 0c		beq $93ea			beq 	_CPEndParam
.93de					_CPParamLoop:
.93de	20 8e 9d	jsr $9d8e			jsr 	EvaluateExpression 			; get parameter onto stack
.93e1	e8		inx				inx 								; bump next stack
.93e2	b1 30		lda ($30),y			lda 	(codePtr),y
.93e4	c8		iny				iny
.93e5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.93e7	f0 f5		beq $93de			beq 	_CPParamLoop
.93e9	88		dey				dey 								; unpick.
.93ea					_CPEndParam:
.93ea	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.93ed	c8		iny				iny									; skip right bracket
.93ee	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.93f0	20 0b a6	jsr $a60b			jsr 	StackOpen
.93f3	20 4f a6	jsr $a64f			jsr 	STKSaveCodePosition 		; save loop position
.93f6	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.93f9	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.93fb	ad 10 04	lda $0410			lda 	NSMantissa1
.93fe	85 37		sta $37				sta 	zTemp0+1
.9400	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9402	b2 36		lda ($36)			lda 	(zTemp0)
.9404	85 30		sta $30				sta 	safePtr
.9406	b1 36		lda ($36),y			lda 	(zTemp0),y
.9408	85 31		sta $31				sta 	safePtr+1
.940a	c8		iny				iny
.940b	b1 36		lda ($36),y			lda 	(zTemp0),y
.940d	85 32		sta $32				sta 	safePtr+2
.940f	c8		iny				iny
.9410	b1 36		lda ($36),y			lda 	(zTemp0),y
.9412	85 33		sta $33				sta 	safePtr+3
.9414	c8		iny				iny 								; get Y offset -> Y
.9415	b1 36		lda ($36),y			lda 	(zTemp0),y
.9417	a8		tay				tay
.9418	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.941a	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.941d	f0 13		beq $9432			beq 	_ParamExit 					; if so, exit.
.941f					_ParamExtract:
.941f	ca		dex				dex 								; put a local term on the level before
.9420	20 ff 92	jsr $92ff			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9423	20 3d 92	jsr $923d			jsr 	AssignVariable 				; assign stacked value to the variable.
.9426	e8		inx				inx 								; advance to next parameter to do.
.9427	e8		inx				inx
.9428	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.942b	f0 05		beq $9432			beq 	_ParamExit
.942d	20 87 ad	jsr $ad87			jsr 	CheckComma 					; comma seperating parameters
.9430	80 ed		bra $941f			bra 	_ParamExtract
.9432					_ParamExit:
.9432	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket 			; check )
.9435	60		rts				rts 								; and continue from here
.ad71					Command_ENDPROC:
.ad71	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ad73	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ad75	20 37 a6	jsr $a637			jsr 	StackCheckFrame
.ad78	20 60 a6	jsr $a660			jsr 	STKLoadCodePosition 		; restore code position
.ad7b	20 29 a6	jsr $a629			jsr 	StackClose
.ad7e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9436					Command_Read:
.9436	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9438	20 5f a0	jsr $a05f			jsr 	EvaluateTerm
.943b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.943e	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9440	f0 4a		beq $948c			beq 	_CRSyntax 					; check reference (bit 0)
.9442	20 d5 94	jsr $94d5			jsr 	SwapDataCodePtrs 			; swap code and data
.9445	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9448	d0 20		bne $946a			bne 	_CRContinueData
.944a					_CRKeepSearching:
.944a	a9 ae		lda #$ae			lda 	#KWD_DATA 					; scan for instruction
.944c	aa		tax				tax
.944d	20 f7 98	jsr $98f7			jsr 	ScanForward
.9450	c9 ae		cmp #$ae			cmp 	#KWD_DATA 					; found data ?
.9452	f0 16		beq $946a			beq 	_CRHaveData 				; found it
.9454	18		clc				clc
.9455	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9457	65 30		adc $30				adc 	codePtr
.9459	85 30		sta $30				sta 	codePtr
.945b	90 02		bcc $945f			bcc 	_CREExit
.945d	e6 31		inc $31				inc 	codePtr+1
.945f					_CREExit:
.945f	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9461	b2 30		lda ($30)			lda 	(codePtr)
.9463	d0 e5		bne $944a			bne 	_CRKeepSearching
.9465	a9 0b		lda #$0b		lda	#11
.9467	4c 85 99	jmp $9985		jmp	ErrorHandler
.946a					_CRHaveData:
.946a					_CRContinueData:
.946a	a2 01		ldx #$01			ldx 	#1
.946c	20 8e a4	jsr $a48e			jsr 	EvaluateValue 				; evaluate value into slot # 1
.946f	ca		dex				dex
.9470	20 3d 92	jsr $923d			jsr		AssignVariable 				; do the assignment
.9473	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9476	b1 30		lda ($30),y			lda 	(codePtr),y
.9478	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.947a	d0 04		bne $9480			bne 	_CRSwapBack
.947c	c8		iny				iny 								; consume comma
.947d	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9480					_CRSwapBack:
.9480	20 d5 94	jsr $94d5			jsr 	SwapDataCodePtrs			; swap them back.
.9483	b1 30		lda ($30),y			lda 	(codePtr),y
.9485	c8		iny				iny
.9486	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9488	f0 ac		beq $9436			beq 	Command_Read 				; if so go round again.
.948a	88		dey				dey 								; unpick get.
.948b	60		rts				rts
.948c					_CRSyntax:
.948c	4c 65 b3	jmp $b365			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.948f					RemCommand:
.948f	b1 30		lda ($30),y			lda 	(codePtr),y
.9491	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9493	d0 06		bne $949b			bne 	_RMExit
.9495	c8		iny				iny
.9496	98		tya				tya
.9497	38		sec				sec
.9498	71 30		adc ($30),y			adc 	(codePtr),y
.949a	a8		tay				tay
.949b					_RMExit:
.949b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.949c					Command_REPEAT:
.949c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.949e	20 0b a6	jsr $a60b			jsr 	StackOpen
.94a1	20 4f a6	jsr $a64f			jsr 	STKSaveCodePosition 		; save loop position
.94a4	60		rts				rts
.94a5					Command_UNTIL:
.94a5	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.94a7	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.94a9	20 37 a6	jsr $a637			jsr 	StackCheckFrame
.94ac	a2 00		ldx #$00			ldx 	#0
.94ae	20 97 a4	jsr $a497			jsr 	EvaluateNumber 				; work out the number
.94b1	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; check if zero
.94b4	f0 04		beq $94ba			beq 	_CULoopBack 				; if so keep looping
.94b6	20 29 a6	jsr $a629			jsr 	StackClose		 			; return
.94b9	60		rts				rts
.94ba					_CULoopBack:
.94ba	20 60 a6	jsr $a660			jsr 	STKLoadCodePosition 		; loop back
.94bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.94be					Command_Restore:
.94be	20 d5 94	jsr $94d5			jsr 	SwapDataCodePtrs 			; swap code and data
.94c1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94c3	85 30		sta $30				sta 	codePtr
.94c5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94c7	85 31		sta $31				sta 	codePtr+1
.94c9	20 d5 94	jsr $94d5			jsr 	SwapDataCodePtrs 			; put them back
.94cc	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.94ce	8d 9b 04	sta $049b			sta 	dataPointer+4
.94d1	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.94d4	60		rts				rts
.94d5					SwapDataCodePtrs:
.94d5	da		phx				phx
.94d6	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.94d8					_SDCPLoop:
.94d8	b5 30		lda $30,x			lda 	safePtr,x
.94da	48		pha				pha
.94db	bd 97 04	lda $0497,x			lda 	dataPointer,x
.94de	95 30		sta $30,x			sta 	safePtr,x
.94e0	68		pla				pla
.94e1	9d 97 04	sta $0497,x			sta 	dataPointer,x
.94e4	ca		dex				dex
.94e5	10 f1		bpl $94d8			bpl 	_SDCPLoop
.94e7	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.94ea	8c 9b 04	sty $049b			sty 	dataPointer+4
.94ed	a8		tay				tay
.94ee	fa		plx				plx
.94ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.94f0					CommandRUN:
.94f0	20 a1 8c	jsr $8ca1			jsr 	ClearCommand 				; clear variable/stacks/etc.
.94f3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94f5	85 30		sta $30				sta 	codePtr
.94f7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94f9	85 31		sta $31				sta 	codePtr+1
.94fb					RUNNewLine:
.94fb	b2 30		lda ($30)			lda 	(codePtr)
.94fd	f0 5e		beq $955d			beq 	CRNoProgram         		; no then END.
.94ff	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9501	9a		txs				txs
.9502					RUNCodePointerLine:
.9502	a0 02		ldy #$02			ldy 	#2 							; start of program
.9504					_CRIncMainLoop:
.9504	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9507	d0 05		bne $950e			bne 	_CRNoBreakCheck
.9509	20 5d b5	jsr $b55d			jsr 	EXTBreakCheck 				; break check
.950c	f0 4a		beq $9558			beq 	_CRBreak
.950e					_CRNoBreakCheck:
.950e	c8		iny				iny
.950f					_CRMainLoop:
.950f	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9512	b1 30		lda ($30),y			lda 	(codePtr),y
.9514	10 10		bpl $9526			bpl 	_CRNotKeyword
.9516	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9518	b0 04		bcs $951e			bcs 	_CRIsKeyword
.951a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.951c	b0 34		bcs $9552			bcs		_CRSyntaxError
.951e					_CRIsKeyword:
.951e	c8		iny				iny 								; consume command
.951f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9520	aa		tax				tax 								; put in X for vector jump
.9521	20 55 95	jsr $9555			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9524	80 e9		bra $950f			bra 	_CRMainLoop 				; and loop round
.9526					_CRNotKeyword:
.9526	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9528	f0 da		beq $9504			beq 	_CRIncMainLoop
.952a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.952c	90 05		bcc $9533			bcc 	_CRNotVariable
.952e					_CRGoLet:
.952e	20 01 92	jsr $9201			jsr 	LetCommand
.9531	80 dc		bra $950f			bra 	_CRMainLoop
.9533					_CRNotVariable:
.9533	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9535	f0 f7		beq $952e			beq 	_CRGoLet
.9537	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9539	f0 f3		beq $952e			beq 	_CRGoLet
.953b	c9 21		cmp #$21			cmp 	#KWD_PLING
.953d	f0 ef		beq $952e			beq 	_CRGoLet
.953f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9541	f0 09		beq $954c			beq 	_CRGoRem
.9543	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9545	d0 0b		bne $9552			bne 	_CRSyntaxError
.9547	20 41 8b	jsr $8b41			jsr 	LabelHere
.954a	80 c3		bra $950f			bra 	_CRMainLoop
.954c					_CRGoRem:
.954c	c8		iny				iny
.954d	20 8f 94	jsr $948f			jsr 	RemCommand
.9550	80 bd		bra $950f			bra 	_CRMainLoop
.9552					_CRSyntaxError:
.9552	4c 65 b3	jmp $b365			jmp 	SyntaxError
.9555					_CRCallVector0:
.9555	7c 00 96	jmp ($9600,x)			jmp 	(VectorSet0,x)
.9558					_CRBreak:
.9558	a9 01		lda #$01		lda	#1
.955a	4c 85 99	jmp $9985		jmp	ErrorHandler
.955d					CRNoProgram:
.955d	4c be 8d	jmp $8dbe			jmp 	EndCommand
.9560					EOLCommand:
.9560	18		clc				clc
.9561	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9563	65 30		adc $30				adc 	codePtr
.9565	85 30		sta $30				sta 	codePtr
.9567	90 02		bcc $956b			bcc 	_CREExit
.9569	e6 31		inc $31				inc 	codePtr+1
.956b					_CREExit:
.956b	80 8e		bra $94fb			bra 	RunNewLine
.956d					Shift1Command:
.956d	b1 30		lda ($30),y			lda 	(codePtr),y
.956f	c8		iny				iny
.9570	0a		asl a				asl 	a
.9571	aa		tax				tax
.9572	7c 90 96	jmp ($9690,x)			jmp 	(VectorSet1,x)
.9575					Shift2Command:
.9575	b1 30		lda ($30),y			lda 	(codePtr),y
.9577	c8		iny				iny
.9578	0a		asl a				asl 	a
.9579	aa		tax				tax
.957a	7c aa 96	jmp ($96aa,x)			jmp 	(VectorSet2,x)
.957d					Unused1:
.957d					Unused2:
.957d					Unused3:
.957d					Unused4:
.957d	4c 65 b3	jmp $b365			jmp 	SyntaxError
>9580							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9580					VectorSetPunc:
>9580	2f 9b					.word	ShiftLeft                        ; $00 <<
>9582	29 9a					.word	BinaryCompareLessEqual           ; $01 <=
>9584	1f 9a					.word	BinaryCompareNotEqual            ; $02 <>
>9586	65 b3					.word	SyntaxError                      ; $03 !!3
>9588	65 b3					.word	SyntaxError                      ; $04 ><
>958a	33 9a					.word	BinaryCompareGreaterEqual        ; $05 >=
>958c	32 9b					.word	ShiftRight                       ; $06 >>
>958e	65 b3					.word	SyntaxError                      ; $07 !!7
>9590	65 b3					.word	SyntaxError                      ; $08 !!8
>9592	65 b3					.word	SyntaxError                      ; $09 !!9
>9594	65 b3					.word	SyntaxError                      ; $0a !!10
>9596	65 b3					.word	SyntaxError                      ; $0b !!11
>9598	65 b3					.word	SyntaxError                      ; $0c !!12
>959a	65 b3					.word	SyntaxError                      ; $0d !!13
>959c	65 b3					.word	SyntaxError                      ; $0e !!14
>959e	65 b3					.word	SyntaxError                      ; $0f !!15
>95a0	65 b3					.word	SyntaxError                      ; $10 @
>95a2	65 b3					.word	SyntaxError                      ; $11 !!17
>95a4	65 b3					.word	SyntaxError                      ; $12 !!18
>95a6	65 b3					.word	SyntaxError                      ; $13 [
>95a8	98 ad					.word	IntegerDivide                    ; $14 \
>95aa	65 b3					.word	SyntaxError                      ; $15 ]
>95ac	b8 9c					.word	EorInteger                       ; $16 ^
>95ae	65 b3					.word	SyntaxError                      ; $17 _
>95b0	65 b3					.word	SyntaxError                      ; $18 `
>95b2	65 b3					.word	SyntaxError                      ; $19 !!25
>95b4	65 b3					.word	SyntaxError                      ; $1a !!26
>95b6	65 b3					.word	SyntaxError                      ; $1b {
>95b8	72 9c					.word	OraInteger                       ; $1c |
>95ba	65 b3					.word	SyntaxError                      ; $1d }
>95bc	65 b3					.word	SyntaxError                      ; $1e ~
>95be	65 b3					.word	SyntaxError                      ; $1f [7m<7F>[m
>95c0	65 b3					.word	SyntaxError                      ; $20
>95c2	fe 9c					.word	WordIndirect                     ; $21 !
>95c4	65 b3					.word	SyntaxError                      ; $22 "
>95c6	65 b3					.word	SyntaxError                      ; $23 #
>95c8	65 b3					.word	SyntaxError                      ; $24 $
>95ca	e5 ad					.word	IntegerModulus                   ; $25 %
>95cc	2c 9c					.word	AndInteger                       ; $26 &
>95ce	65 b3					.word	SyntaxError                      ; $27 '
>95d0	65 b3					.word	SyntaxError                      ; $28 (
>95d2	65 b3					.word	SyntaxError                      ; $29 )
>95d4	5a ae					.word	MulInteger                       ; $2a *
>95d6	c6 9b					.word	AddInteger                       ; $2b +
>95d8	65 b3					.word	SyntaxError                      ; $2c ,
>95da	01 9c					.word	SubInteger                       ; $2d -
>95dc	65 b3					.word	SyntaxError                      ; $2e .
>95de	f1 af					.word	FDivideCommand                   ; $2f /
>95e0	65 b3					.word	SyntaxError                      ; $30 0
>95e2	65 b3					.word	SyntaxError                      ; $31 1
>95e4	65 b3					.word	SyntaxError                      ; $32 2
>95e6	65 b3					.word	SyntaxError                      ; $33 3
>95e8	65 b3					.word	SyntaxError                      ; $34 4
>95ea	65 b3					.word	SyntaxError                      ; $35 5
>95ec	65 b3					.word	SyntaxError                      ; $36 6
>95ee	65 b3					.word	SyntaxError                      ; $37 7
>95f0	65 b3					.word	SyntaxError                      ; $38 8
>95f2	65 b3					.word	SyntaxError                      ; $39 9
>95f4	65 b3					.word	SyntaxError                      ; $3a :
>95f6	65 b3					.word	SyntaxError                      ; $3b ;
>95f8	0b 9a					.word	BinaryCompareLess                ; $3c <
>95fa	01 9a					.word	BinaryCompareEqual               ; $3d =
>95fc	15 9a					.word	BinaryCompareGreater             ; $3e >
>95fe	25 9d					.word	ByteIndirect                     ; $3f ?
.9600					VectorSet0:
>9600	60 95					.word	EOLCommand                       ; $80 !0:EOF
>9602	6d 95					.word	Shift1Command                    ; $81 !1:SH1
>9604	75 95					.word	Shift2Command                    ; $82 !2:SH2
>9606	37 b1					.word	AbsUnary                         ; $83 ABS(
>9608	ef a1					.word	AllocUnary                       ; $84 ALLOC(
>960a	47 b1					.word	AscUnary                         ; $85 ASC(
>960c	15 a3					.word	ChrUnary                         ; $86 CHR$(
>960e	c1 8d					.word	UnaryEvent                       ; $87 EVENT(
>9610	fd 99					.word	UnaryFalse                       ; $88 FALSE
>9612	54 b1					.word	FracUnary                        ; $89 FRAC(
>9614	6a b1					.word	IntUnary                         ; $8a INT(
>9616	c0 b1					.word	IsValUnary                       ; $8b ISVAL(
>9618	65 b3					.word	SyntaxError                      ; $8c JOYB(
>961a	65 b3					.word	SyntaxError                      ; $8d JOYX(
>961c	65 b3					.word	SyntaxError                      ; $8e JOYY(
>961e	ef a3					.word	Unary_Left                       ; $8f LEFT$(
>9620	7c b1					.word	LenUnary                         ; $90 LEN(
>9622	19 a4					.word	Unary_Mid                        ; $91 MID$(
>9624	5f a2					.word	Unary_Not                        ; $92 NOT(
>9626	75 a2					.word	Unary_Random                     ; $93 RANDOM(
>9628	ff a3					.word	Unary_Right                      ; $94 RIGHT$(
>962a	94 a2					.word	Unary_Rnd                        ; $95 RND(
>962c	96 b1					.word	SgnUnary                         ; $96 SGN(
>962e	27 a3					.word	SpcUnary                         ; $97 SPC(
>9630	42 a3					.word	Unary_Str                        ; $98 STR$(
>9632	37 97					.word	UnaryTimer                       ; $99 TIMER(
>9634	f1 99					.word	UnaryTrue                        ; $9a TRUE
>9636	b6 b1					.word	ValUnary                         ; $9b VAL(
>9638	2a 8e					.word	ForCommand                       ; $9c FOR
>963a	d7 91					.word	IfCommand                        ; $9d IF
>963c	7d 95					.word	Unused1                          ; $9e PROC
>963e	9c 94					.word	Command_REPEAT                   ; $9f REPEAT
>9640	56 99					.word	Command_WHILE                    ; $a0 WHILE
>9642	00 92					.word	EndIf                            ; $a1 ENDIF
>9644	71 ad					.word	Command_ENDPROC                  ; $a2 ENDPROC
>9646	e4 8e					.word	NextCommand                      ; $a3 NEXT
>9648	7d 95					.word	Unused4                          ; $a4 THEN
>964a	a5 94					.word	Command_UNTIL                    ; $a5 UNTIL
>964c	77 99					.word	Command_WEND                     ; $a6 WEND
>964e	65 b3					.word	SyntaxError                      ; $a7 BY
>9650	67 8c					.word	CallCommand                      ; $a8 CALL
>9652	41 8f					.word	CircleCommand                    ; $a9 CIRCLE
>9654	a1 8c					.word	ClearCommand                     ; $aa CLEAR
>9656	65 b3					.word	SyntaxError                      ; $ab CLS
>9658	65 b3					.word	SyntaxError                      ; $ac COLOR
>965a	65 b3					.word	SyntaxError                      ; $ad COLOUR
>965c	f9 8c					.word	Command_Data                     ; $ae DATA
>965e	01 8d					.word	DimCommand                       ; $af DIM
>9660	7d 95					.word	Unused3                          ; $b0 DOWNTO
>9662	f9 91					.word	ElseCode                         ; $b1 ELSE
>9664	65 b3					.word	SyntaxError                      ; $b2 FROM
>9666	6b 91					.word	GfxCommand                       ; $b3 GFX
>9668	9d 91					.word	Command_GOSUB                    ; $b4 GOSUB
>966a	bb 91					.word	GotoCommand                      ; $b5 GOTO
>966c	65 b3					.word	SyntaxError                      ; $b6 HERE
>966e	6b 8f					.word	ImageCommand                     ; $b7 IMAGE
>9670	01 92					.word	LetCommand                       ; $b8 LET
>9672	c0 8f					.word	LineCommand                      ; $b9 LINE
>9674	f1 92					.word	Command_LOCAL                    ; $ba LOCAL
>9676	65 b3					.word	SyntaxError                      ; $bb OFF
>9678	65 b3					.word	SyntaxError                      ; $bc ON
>967a	65 b3					.word	SyntaxError                      ; $bd OUTLINE
>967c	b9 8f					.word	PlotCommand                      ; $be PLOT
>967e	7f 93					.word	Command_Print                    ; $bf PRINT
>9680	36 94					.word	Command_Read                     ; $c0 READ
>9682	3d 8f					.word	RectangleCommand                 ; $c1 RECT
>9684	8f 94					.word	RemCommand                       ; $c2 REM
>9686	ad 91					.word	Command_RETURN                   ; $c3 RETURN
>9688	65 b3					.word	SyntaxError                      ; $c4 SOLID
>968a	4c 8f					.word	SpriteCommand                    ; $c5 SPRITE
>968c	88 8f					.word	TextCommand                      ; $c6 TEXT
>968e	7d 95					.word	Unused2                          ; $c7 TO
.9690					VectorSet1:
>9690	65 b3					.word	SyntaxError                      ; $80 !0:EOF
>9692	65 b3					.word	SyntaxError                      ; $81 !1:SH1
>9694	65 b3					.word	SyntaxError                      ; $82 !2:SH2
>9696	38 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>9698	57 8c					.word	AssertCommand                    ; $84 ASSERT
>969a	0b 91					.word	BitmapCtrl                       ; $85 BITMAP
>969c	be 8d					.word	EndCommand                       ; $86 END
>969e	56 92					.word	Command_List                     ; $87 LIST
>96a0	75 93					.word	NewCommand                       ; $88 NEW
>96a2	be 94					.word	Command_Restore                  ; $89 RESTORE
>96a4	f0 94					.word	CommandRUN                       ; $8a RUN
>96a6	50 91					.word	SpritesCtrl                      ; $8b SPRITES
>96a8	32 97					.word	StopCommand                      ; $8c STOP
.96aa					VectorSet2:
>96aa	65 b3					.word	SyntaxError                      ; $80 !0:EOF
>96ac	65 b3					.word	SyntaxError                      ; $81 !1:SH1
>96ae	65 b3					.word	SyntaxError                      ; $82 !2:SH2
>96b0	24 b2					.word	Assemble_adc                     ; $83 ADC
>96b2	1c b2					.word	Assemble_and                     ; $84 AND
>96b4	38 b2					.word	Assemble_asl                     ; $85 ASL
>96b6	a2 b2					.word	Assemble_bcc                     ; $86 BCC
>96b8	a6 b2					.word	Assemble_bcs                     ; $87 BCS
>96ba	ae b2					.word	Assemble_beq                     ; $88 BEQ
>96bc	65 b2					.word	Assemble_bit                     ; $89 BIT
>96be	96 b2					.word	Assemble_bmi                     ; $8a BMI
>96c0	aa b2					.word	Assemble_bne                     ; $8b BNE
>96c2	92 b2					.word	Assemble_bpl                     ; $8c BPL
>96c4	b2 b2					.word	Assemble_bra                     ; $8d BRA
>96c6	b6 b2					.word	Assemble_brk                     ; $8e BRK
>96c8	9a b2					.word	Assemble_bvc                     ; $8f BVC
>96ca	9e b2					.word	Assemble_bvs                     ; $90 BVS
>96cc	be b2					.word	Assemble_clc                     ; $91 CLC
>96ce	12 b3					.word	Assemble_cld                     ; $92 CLD
>96d0	d2 b2					.word	Assemble_cli                     ; $93 CLI
>96d2	02 b3					.word	Assemble_clv                     ; $94 CLV
>96d4	30 b2					.word	Assemble_cmp                     ; $95 CMP
>96d6	79 b2					.word	Assemble_cpx                     ; $96 CPX
>96d8	74 b2					.word	Assemble_cpy                     ; $97 CPY
>96da	56 b2					.word	Assemble_dec                     ; $98 DEC
>96dc	0e b3					.word	Assemble_dex                     ; $99 DEX
>96de	ea b2					.word	Assemble_dey                     ; $9a DEY
>96e0	20 b2					.word	Assemble_eor                     ; $9b EOR
>96e2	5b b2					.word	Assemble_inc                     ; $9c INC
>96e4	1e b3					.word	Assemble_inx                     ; $9d INX
>96e6	0a b3					.word	Assemble_iny                     ; $9e INY
>96e8	8d b2					.word	Assemble_jmp                     ; $9f JMP
>96ea	88 b2					.word	Assemble_jsr                     ; $a0 JSR
>96ec	2c b2					.word	Assemble_lda                     ; $a1 LDA
>96ee	51 b2					.word	Assemble_ldx                     ; $a2 LDX
>96f0	6f b2					.word	Assemble_ldy                     ; $a3 LDY
>96f2	42 b2					.word	Assemble_lsr                     ; $a4 LSR
>96f4	22 b3					.word	Assemble_nop                     ; $a5 NOP
>96f6	18 b2					.word	Assemble_ora                     ; $a6 ORA
>96f8	ce b2					.word	Assemble_pha                     ; $a7 PHA
>96fa	ba b2					.word	Assemble_php                     ; $a8 PHP
>96fc	16 b3					.word	Assemble_phx                     ; $a9 PHX
>96fe	d6 b2					.word	Assemble_phy                     ; $aa PHY
>9700	de b2					.word	Assemble_pla                     ; $ab PLA
>9702	c2 b2					.word	Assemble_plp                     ; $ac PLP
>9704	2a b3					.word	Assemble_plx                     ; $ad PLX
>9706	e6 b2					.word	Assemble_ply                     ; $ae PLY
>9708	3d b2					.word	Assemble_rol                     ; $af ROL
>970a	47 b2					.word	Assemble_ror                     ; $b0 ROR
>970c	ca b2					.word	Assemble_rti                     ; $b1 RTI
>970e	da b2					.word	Assemble_rts                     ; $b2 RTS
>9710	34 b2					.word	Assemble_sbc                     ; $b3 SBC
>9712	c6 b2					.word	Assemble_sec                     ; $b4 SEC
>9714	26 b3					.word	Assemble_sed                     ; $b5 SED
>9716	e2 b2					.word	Assemble_sei                     ; $b6 SEI
>9718	28 b2					.word	Assemble_sta                     ; $b7 STA
>971a	1a b3					.word	Assemble_stp                     ; $b8 STP
>971c	4c b2					.word	Assemble_stx                     ; $b9 STX
>971e	6a b2					.word	Assemble_sty                     ; $ba STY
>9720	60 b2					.word	Assemble_stz                     ; $bb STZ
>9722	fe b2					.word	Assemble_tax                     ; $bc TAX
>9724	fa b2					.word	Assemble_tay                     ; $bd TAY
>9726	83 b2					.word	Assemble_trb                     ; $be TRB
>9728	7e b2					.word	Assemble_tsb                     ; $bf TSB
>972a	06 b3					.word	Assemble_tsx                     ; $c0 TSX
>972c	ee b2					.word	Assemble_txa                     ; $c1 TXA
>972e	f6 b2					.word	Assemble_txs                     ; $c2 TXS
>9730	f2 b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9732					StopCommand:
.9732	a9 08		lda #$08		lda	#8
.9734	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.9737					UnaryTimer:
.9737	fa		plx				plx
.9738	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.973b					TimerToStackX:
.973b	20 57 a5	jsr $a557			jsr 	NSMSetZero 					; zero result
.973e	64 01		stz $01				stz 	1 							; access I/O
.9740	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9743	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9746	ad 5a d6	lda $d65a			lda 	$D65A
.9749	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.974c	ad 5b d6	lda $d65b			lda 	$D65B
.974f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9752	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9753					ListConvertLine:
.9753	9c 9d 04	stz $049d			stz 	tbOffset
.9756	9c a9 04	stz $04a9			stz 	tokenBuffer
.9759	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.975b	b1 30		lda ($30),y			lda 	(codePtr),y
.975d	aa		tax				tax
.975e	88		dey				dey
.975f	b1 30		lda ($30),y			lda 	(codePtr),y
.9761	20 db ae	jsr $aedb			jsr 	ConvertInt16
.9764	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9766	86 37		stx $37				stx 	zTemp0+1
.9768	a0 00		ldy #$00			ldy 	#0
.976a					_LCCopyNumber:
.976a	b1 36		lda ($36),y			lda 	(zTemp0),y
.976c	20 6c 98	jsr $986c			jsr 	LCLWrite
.976f	c8		iny				iny
.9770	b1 36		lda ($36),y			lda 	(zTemp0),y
.9772	d0 f6		bne $976a			bne 	_LCCopyNumber
.9774					_LCPadOut:
.9774	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9776	20 6c 98	jsr $986c			jsr 	LCLWrite
.9779	ad 9d 04	lda $049d			lda 	tbOffset
.977c	c9 06		cmp #$06			cmp 	#6
.977e	d0 f4		bne $9774			bne 	_LCPadOut
.9780	a0 03		ldy #$03			ldy 	#3 							; start position.
.9782					_LCMainLoop:
.9782	b1 30		lda ($30),y			lda 	(codePtr),y
.9784	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9786	f0 17		beq $979f			beq 	_LCExit
.9788	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.978a	90 14		bcc $97a0			bcc 	_LCDoubles
.978c	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.978e	90 20		bcc $97b0			bcc 	_LCShiftPunc
.9790	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9792	90 2b		bcc $97bf			bcc 	_LCPunctuation
.9794	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9796	90 2d		bcc $97c5			bcc 	_LCIdentifiers
.9798	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.979a	90 49		bcc $97e5			bcc 	_LCTokens
.979c	4c 40 98	jmp $9840			jmp 	_LCData 					; 254-5 are data objects
.979f					_LCExit:
.979f	60		rts				rts
.97a0					_LCDoubles:
.97a0	48		pha				pha
.97a1	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.97a2	29 02		and #$02			and 	#2
.97a4	09 3c		ora #$3c			ora 	#60 						; make < >
.97a6	20 6c 98	jsr $986c			jsr 	LCLWrite
.97a9	68		pla				pla 								; restore, do lower bit
.97aa	29 03		and #$03			and 	#3
.97ac	09 3c		ora #$3c			ora 	#60
.97ae	80 0f		bra $97bf			bra		_LCPunctuation 				; print, increment, loop
.97b0					_LCShiftPunc:
.97b0	aa		tax				tax 								; save in X
.97b1	29 07		and #$07			and 	#7 							; lower 3 bits
.97b3	f0 02		beq $97b7			beq 	_LCNoAdd
.97b5	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.97b7					_LCNoAdd:
.97b7	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.97b9	90 02		bcc $97bd			bcc 	_LCNoAdd2
.97bb	09 20		ora #$20			ora 	#32 						; adds $20
.97bd					_LCNoAdd2:
.97bd	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.97bf					_LCPunctuation:
.97bf	c8		iny				iny 								; consume character
.97c0	20 6c 98	jsr $986c			jsr 	LCLWrite 					; write it out.
.97c3	80 bd		bra $9782			bra 	_LCMainLoop 				; go round again.
.97c5					_LCIdentifiers:
.97c5	18		clc				clc 								; convert to physical address
.97c6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.97c8	85 37		sta $37				sta 	zTemp0+1
.97ca	c8		iny				iny
.97cb	b1 30		lda ($30),y			lda 	(codePtr),y
.97cd	85 36		sta $36				sta 	zTemp0
.97cf	c8		iny				iny
.97d0	5a		phy				phy 								; save position
.97d1	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.97d3					_LCOutIdentifier:
.97d3	c8		iny				iny
.97d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.97d6	29 7f		and #$7f			and 	#$7F
.97d8	20 9a 98	jsr $989a			jsr 	LCLLowerCase
.97db	20 6c 98	jsr $986c			jsr 	LCLWrite
.97de	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.97e0	10 f1		bpl $97d3			bpl 	_LCOutIdentifier
.97e2	7a		ply				ply 								; restore position
.97e3	80 9d		bra $9782			bra 	_LCMainLoop
.97e5					_LCTokens:
.97e5	aa		tax				tax 								; token in X
.97e6	a9 2b		lda #$2b			lda 	#((KeywordSet2) & $FF)
.97e8	85 36		sta $36				sta 	0+zTemp0
.97ea	a9 a9		lda #$a9			lda 	#((KeywordSet2) >> 8)
.97ec	85 37		sta $37				sta 	1+zTemp0
.97ee	e0 82		cpx #$82			cpx 	#$82
.97f0	f0 16		beq $9808			beq 	_LCUseShift
.97f2	a9 dd		lda #$dd			lda 	#((KeywordSet1) & $FF)
.97f4	85 36		sta $36				sta 	0+zTemp0
.97f6	a9 a8		lda #$a8			lda 	#((KeywordSet1) >> 8)
.97f8	85 37		sta $37				sta 	1+zTemp0
.97fa	e0 81		cpx #$81			cpx 	#$81
.97fc	f0 0a		beq $9808			beq 	_LCUseShift
.97fe	a9 13		lda #$13			lda 	#((KeywordSet0) & $FF)
.9800	85 36		sta $36				sta 	0+zTemp0
.9802	a9 a7		lda #$a7			lda 	#((KeywordSet0) >> 8)
.9804	85 37		sta $37				sta 	1+zTemp0
.9806	80 01		bra $9809			bra 	_LCNoShift
.9808					_LCUseShift:
.9808	c8		iny				iny
.9809					_LCNoShift:
.9809	20 7b 98	jsr $987b			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.980c	b1 30		lda ($30),y			lda 	(codePtr),y
.980e	aa		tax				tax 								; into X
.980f					_LCFindText:
.980f	ca		dex				dex
.9810	10 0e		bpl $9820			bpl 	_LCFoundText 				; found text.
.9812	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9814	1a		inc a				inc 	a 							; one extra for size
.9815	38		sec				sec 								; one extra for checksum
.9816	65 36		adc $36				adc 	zTemp0 						; go to next token
.9818	85 36		sta $36				sta 	zTemp0
.981a	90 f3		bcc $980f			bcc 	_LCFindText
.981c	e6 37		inc $37				inc 	zTemp0+1
.981e	80 ef		bra $980f			bra 	_LCFindText
.9820					_LCFoundText:
.9820	5a		phy				phy 								; save List position
.9821	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9823	aa		tax				tax
.9824	a0 02		ldy #$02			ldy 	#2
.9826					_LCCopyToken:
.9826	b1 36		lda ($36),y			lda 	(zTemp0),y
.9828	20 9a 98	jsr $989a			jsr 	LCLLowerCase
.982b	20 6c 98	jsr $986c			jsr 	LCLWrite
.982e	c8		iny				iny
.982f	ca		dex				dex
.9830	d0 f4		bne $9826			bne 	_LCCopyToken
.9832	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9834	f0 05		beq $983b			beq 	_LCNoSpace
.9836	a9 20		lda #$20			lda 	#' '
.9838	20 6c 98	jsr $986c			jsr 	LCLWrite
.983b					_LCNoSpace:
.983b	7a		ply				ply 								; restore position.
.983c	c8		iny				iny 								; consume token
.983d	4c 82 97	jmp $9782			jmp 	_LCMainLoop 				; and go around again.
.9840					_LCData:
.9840	48		pha				pha 								; save type $FE/$FF
.9841	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9843	c9 fe		cmp #$fe			cmp 	#$FE
.9845	f0 02		beq $9849			beq 	_LCHaveOpener
.9847	a2 22		ldx #$22			ldx 	#'"'
.9849					_LCHaveOpener:
.9849	8a		txa				txa 								; output prefix (# or ")
.984a	20 6c 98	jsr $986c			jsr 	LCLWrite
.984d	c8		iny				iny 								; get count
.984e	b1 30		lda ($30),y			lda 	(codePtr),y
.9850	aa		tax				tax
.9851	c8		iny				iny 								; point at first character
.9852					_LCOutData:
.9852	b1 30		lda ($30),y			lda 	(codePtr),y
.9854	c9 00		cmp #$00			cmp 	#0
.9856	f0 03		beq $985b			beq 	_LCNoPrint
.9858	20 6c 98	jsr $986c			jsr 	LCLWrite
.985b					_LCNoPrint:
.985b	c8		iny				iny
.985c	ca		dex				dex
.985d	d0 f3		bne $9852			bne 	_LCOutData
.985f	68		pla				pla 								; closing " required ?
.9860	c9 ff		cmp #$ff			cmp 	#$FF
.9862	d0 05		bne $9869			bne 	_LCNoQuote
.9864	a9 22		lda #$22			lda 	#'"'
.9866	20 6c 98	jsr $986c			jsr 	LCLWrite
.9869					_LCNoQuote:
.9869	4c 82 97	jmp $9782			jmp 	_LCMainLoop
.986c					LCLWrite:
.986c	da		phx				phx
.986d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9870	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9873	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9876	ee 9d 04	inc $049d			inc 	tbOffset
.9879	fa		plx				plx
.987a	60		rts				rts
.987b					LCCheckSpaceRequired:
.987b	ae 9d 04	ldx $049d			ldx 	tbOffset
.987e	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9881	20 9a 98	jsr $989a			jsr 	LCLLowerCase 				; saves a little effort
.9884	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9886	90 11		bcc $9899			bcc 	_LCCSRExit
.9888	c9 3a		cmp #$3a			cmp 	#"9"+1
.988a	90 08		bcc $9894			bcc 	_LCCSRSpace
.988c	c9 61		cmp #$61			cmp 	#"a"
.988e	90 09		bcc $9899			bcc 	_LCCSRExit
.9890	c9 7b		cmp #$7b			cmp 	#"z"+1
.9892	b0 05		bcs $9899			bcs 	_LCCSRExit
.9894					_LCCSRSpace:
.9894	a9 20		lda #$20			lda 	#' '
.9896	20 6c 98	jsr $986c			jsr 	LCLWrite
.9899					_LCCSRExit:
.9899	60		rts				rts
.989a					LCLLowerCase:
.989a	c9 41		cmp #$41			cmp 	#"A"
.989c	90 06		bcc $98a4			bcc 	_LCLLCOut
.989e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.98a0	b0 02		bcs $98a4			bcs 	_LCLLCOut
.98a2	69 20		adc #$20			adc 	#$20
.98a4					_LCLLCOut:
.98a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.98a5					ProcedureScan:
.98a5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.98a7	85 30		sta $30				sta 	codePtr
.98a9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.98ab	85 31		sta $31				sta 	codePtr+1
.98ad					_PSLoop:
.98ad	b2 30		lda ($30)			lda 	(codePtr)
.98af	f0 42		beq $98f3			beq 	_PSExit
.98b1	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.98b3	b1 30		lda ($30),y			lda 	(codePtr),y
.98b5	c9 9e		cmp #$9e			cmp 	#KWD_PROC
.98b7	d0 2d		bne $98e6			bne 	_PSNext
.98b9	c8		iny				iny 								; get the address of the record to zTemp0 and
.98ba	b1 30		lda ($30),y			lda 	(codePtr),y
.98bc	29 c0		and #$c0			and 	#$C0
.98be	c9 40		cmp #$40			cmp 	#$40
.98c0	d0 32		bne $98f4			bne 	_PSSyntax
.98c2	b1 30		lda ($30),y			lda 	(codePtr),y
.98c4	18		clc				clc
.98c5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98c7	85 37		sta $37				sta 	zTemp0+1
.98c9	c8		iny				iny 								; LSB
.98ca	b1 30		lda ($30),y			lda 	(codePtr),y
.98cc	85 36		sta $36				sta 	zTemp0
.98ce	c8		iny				iny 								; character after variable call.
.98cf	98		tya				tya 								; save Y offset at +7
.98d0	a0 07		ldy #$07			ldy 	#7
.98d2	91 36		sta ($36),y			sta 	(zTemp0),y
.98d4	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.98d6	a0 02		ldy #$02			ldy 	#2
.98d8	91 36		sta ($36),y			sta 	(zTemp0),y
.98da	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.98dc					_PSCopy:
.98dc	b5 30		lda $30,x			lda 	safePtr,x
.98de	c8		iny				iny
.98df	91 36		sta ($36),y			sta 	(zTemp0),y
.98e1	e8		inx				inx
.98e2	e0 04		cpx #$04			cpx 	#4
.98e4	d0 f6		bne $98dc			bne 	_PSCopy
.98e6					_PSNext:
.98e6	18		clc				clc
.98e7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98e9	65 30		adc $30				adc 	codePtr
.98eb	85 30		sta $30				sta 	codePtr
.98ed	90 02		bcc $98f1			bcc 	_CREExit
.98ef	e6 31		inc $31				inc 	codePtr+1
.98f1					_CREExit:
.98f1	80 ba		bra $98ad			bra 	_PSLoop
.98f3					_PSExit:
.98f3	60		rts				rts
.98f4					_PSSyntax:
.98f4	4c 65 b3	jmp $b365			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.98f7					ScanForward:
.98f7	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.98f9	86 37		stx $37				stx 	zTemp0+1
.98fb	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.98fd					_ScanLoop:
.98fd	b1 30		lda ($30),y			lda 	(codePtr),y
.98ff	c8		iny				iny
.9900	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9902	d0 0e		bne $9912			bne 	_ScanGoNext
.9904	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9906	f0 04		beq $990c			beq 	_ScanMatch
.9908	c5 37		cmp $37				cmp 	zTemp0+1
.990a	d0 06		bne $9912			bne 	_ScanGoNext
.990c					_ScanMatch:
.990c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.990e	d0 01		bne $9911			bne 	_ScanNotEndEOL
.9910	88		dey				dey
.9911					_ScanNotEndEOL:
.9911	60		rts				rts
.9912					_ScanGoNext:
.9912	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9914	90 e7		bcc $98fd			bcc 	_ScanLoop
.9916	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9918	90 18		bcc $9932			bcc 	_ScanSkipOne
.991a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.991c	b0 2f		bcs $994d			bcs 	_ScanSkipData
.991e	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9920	90 db		bcc $98fd			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9922	c9 a7		cmp #$a7			cmp 	#KWC_LAST_STRUCTURE+1
.9924	b0 d7		bcs $98fd			bcs 	_ScanLoop
.9926	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9928	c9 a1		cmp #$a1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.992a	b0 d1		bcs $98fd			bcs 	_ScanLoop
.992c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.992e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9930	80 cb		bra $98fd			bra 	_ScanLoop
.9932					_ScanSkipOne:
.9932	c8		iny				iny 								; consume the extra one.
.9933	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9935	d0 c6		bne $98fd			bne 	_ScanLoop
.9937	18		clc				clc
.9938	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.993a	65 30		adc $30				adc 	codePtr
.993c	85 30		sta $30				sta 	codePtr
.993e	90 02		bcc $9942			bcc 	_CREExit
.9940	e6 31		inc $31				inc 	codePtr+1
.9942					_CREExit:
.9942	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9944	b2 30		lda ($30)			lda 	(codePtr)
.9946	d0 b5		bne $98fd			bne 	_ScanLoop 					; if not zero, more to scan
.9948	a9 13		lda #$13		lda	#19
.994a	4c 85 99	jmp $9985		jmp	ErrorHandler
.994d					_ScanSkipData:
.994d	88		dey				dey 								; point at data token
.994e	c8		iny				iny
.994f	98		tya				tya
.9950	38		sec				sec
.9951	71 30		adc ($30),y			adc 	(codePtr),y
.9953	a8		tay				tay
.9954	80 a7		bra $98fd			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9956					Command_WHILE:
.9956	5a		phy				phy 								; save position of the test
.9957	a2 00		ldx #$00			ldx 	#0
.9959	20 97 a4	jsr $a497			jsr 	EvaluateNumber 				; work out the number
.995c	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; check if zero
.995f	f0 0e		beq $996f			beq 	_WHExitLoop 				; if so exit the loop
.9961	98		tya				tya 								; position *after* test.
.9962	7a		ply				ply 								; restore position before test, at WHILE
.9963	88		dey				dey
.9964	48		pha				pha 								; push after test on the stack
.9965	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9967	20 0b a6	jsr $a60b			jsr 	StackOpen
.996a	20 4f a6	jsr $a64f			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.996d	7a		ply				ply 								; restore the position *after* the test
.996e	60		rts				rts
.996f					_WHExitLoop:
.996f	68		pla				pla 								; throw post loop position
.9970	a9 a6		lda #$a6			lda 	#KWD_WEND 					; scan forward past WEND
.9972	aa		tax				tax
.9973	20 f7 98	jsr $98f7			jsr 	ScanForward
.9976	60		rts				rts
.9977					Command_WEND:
.9977	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9979	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.997b	20 37 a6	jsr $a637			jsr 	StackCheckFrame
.997e	20 60 a6	jsr $a660			jsr 	STKLoadCodePosition 		; loop back
.9981	20 29 a6	jsr $a629			jsr 	StackClose		 			; erase the frame
.9984	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ad7f					CheckRightBracket:
.ad7f	b1 30		lda ($30),y			lda 	(codePtr),y
.ad81	c8		iny				iny
.ad82	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ad84	d0 0f		bne $ad95			bne 	CNAFail
.ad86	60		rts				rts
.ad87					CheckComma:
.ad87	b1 30		lda ($30),y			lda 	(codePtr),y
.ad89	c8		iny				iny
.ad8a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ad8c	d0 07		bne $ad95			bne 	CNAFail
.ad8e	60		rts				rts
.ad8f					CheckNextA:
.ad8f	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ad91	d0 02		bne $ad95			bne 	CNAFail
.ad93	c8		iny				iny 								; skip character
.ad94	60		rts				rts 								; and exit
.ad95					CNAFail:
.ad95	4c 65 b3	jmp $b365			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9985					ErrorHandler:
.9985	a8		tay				tay 								; find the error text
.9986	f0 49		beq $99d1			beq 	_EHEnd
.9988	a2 00		ldx #$00			ldx 	#0
.998a	a9 7e		lda #$7e			lda 	#((ErrorText) & $FF)
.998c	85 36		sta $36				sta 	0+zTemp0
.998e	a9 b3		lda #$b3			lda 	#((ErrorText) >> 8)
.9990	85 37		sta $37				sta 	1+zTemp0
.9992					_EHFind:
.9992	88		dey				dey 								; found the error text ?
.9993	f0 0e		beq $99a3			beq 	_EHFound
.9995					_EHFindZero:
.9995	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9997	e6 36		inc $36				inc 	zTemp0
.9999	d0 02		bne $999d			bne 	_EHFNoCarry
.999b	e6 37		inc $37				inc 	zTemp0+1
.999d					_EHFNoCarry:
.999d	c9 00		cmp #$00			cmp 	#0
.999f	d0 f4		bne $9995			bne 	_EHFindZero
.99a1	80 ef		bra $9992			bra 	_EHFind
.99a3					_EHFound:
.99a3	a5 36		lda $36				lda 	zTemp0 						; print message
.99a5	a6 37		ldx $37				ldx 	zTemp0+1
.99a7	20 de 99	jsr $99de			jsr 	PrintStringXA
.99aa	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.99ac	b1 30		lda ($30),y			lda 	(codePtr),y
.99ae	d0 05		bne $99b5			bne 	_EHAtMsg
.99b0	c8		iny				iny
.99b1	b1 30		lda ($30),y			lda 	(codePtr),y
.99b3	f0 17		beq $99cc			beq 	_EHCREnd
.99b5					_EHAtMsg:
.99b5	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.99b7	a9 d4		lda #$d4			lda 	#_AtMsg & $FF
.99b9	20 de 99	jsr $99de			jsr 	PrintStringXA
.99bc	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.99be	b1 30		lda ($30),y			lda 	(codePtr),y
.99c0	48		pha				pha
.99c1	c8		iny				iny
.99c2	b1 30		lda ($30),y			lda 	(codePtr),y
.99c4	aa		tax				tax
.99c5	68		pla				pla
.99c6	20 db ae	jsr $aedb			jsr 	ConvertInt16 				; convert XA to string
.99c9	20 de 99	jsr $99de			jsr 	PrintStringXA 				; and print it.
.99cc					_EHCREnd:
.99cc	a9 0d		lda #$0d			lda 	#13 						; new line
.99ce	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.99d1					_EHEnd:
.99d1	4c 08 8c	jmp $8c08			jmp 	WarmStart
>99d4	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>99dc	20 00
.99de					PrintStringXA:
.99de	5a		phy				phy
.99df	86 37		stx $37				stx 	zTemp0+1
.99e1	85 36		sta $36				sta 	zTemp0
.99e3	a0 00		ldy #$00			ldy 	#0
.99e5					_PSXALoop:
.99e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.99e7	f0 06		beq $99ef			beq 	_PSXAExit
.99e9	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.99ec	c8		iny				iny
.99ed	80 f6		bra $99e5			bra 	_PSXALoop
.99ef					_PSXAExit:
.99ef	7a		ply				ply
.99f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.99f1					UnaryTrue:
.99f1	fa		plx				plx
.99f2					ReturnTrue:
.99f2	a9 01		lda #$01			lda 	#1  						; set to 1
.99f4	20 59 a5	jsr $a559			jsr 	NSMSetByte
.99f7	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.99f9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99fc	60		rts				rts
.99fd					UnaryFalse:
.99fd	fa		plx				plx
.99fe					ReturnFalse:
.99fe	4c 57 a5	jmp $a557			jmp 	NSMSetZero 					; set it all to zero
.9a01					BinaryCompareEqual:
.9a01	fa		plx				plx
.9a02	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a05	c9 00		cmp #$00			cmp 	#0
.9a07	f0 e9		beq $99f2			beq 	ReturnTrue
.9a09	80 f3		bra $99fe			bra 	ReturnFalse
.9a0b					BinaryCompareLess:
.9a0b	fa		plx				plx
.9a0c	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a0f	c9 ff		cmp #$ff			cmp 	#$FF
.9a11	f0 df		beq $99f2			beq 	ReturnTrue
.9a13	80 e9		bra $99fe			bra 	ReturnFalse
.9a15					BinaryCompareGreater:
.9a15	fa		plx				plx
.9a16	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a19	c9 01		cmp #$01			cmp 	#1
.9a1b	f0 d5		beq $99f2			beq 	ReturnTrue
.9a1d	80 df		bra $99fe			bra 	ReturnFalse
.9a1f					BinaryCompareNotEqual:
.9a1f	fa		plx				plx
.9a20	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a23	c9 00		cmp #$00			cmp 	#0
.9a25	d0 cb		bne $99f2			bne 	ReturnTrue
.9a27	80 d5		bra $99fe			bra 	ReturnFalse
.9a29					BinaryCompareLessEqual:
.9a29	fa		plx				plx
.9a2a	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a2d	c9 01		cmp #$01			cmp 	#1
.9a2f	d0 c1		bne $99f2			bne 	ReturnTrue
.9a31	80 cb		bra $99fe			bra 	ReturnFalse
.9a33					BinaryCompareGreaterEqual:
.9a33	fa		plx				plx
.9a34	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a37	c9 ff		cmp #$ff			cmp 	#$FF
.9a39	d0 b7		bne $99f2			bne 	ReturnTrue
.9a3b	80 c1		bra $99fe			bra 	ReturnFalse
.9a3d					CompareBaseCode:
.9a3d	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; make both values if references.
.9a40	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9a43	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a46	29 10		and #$10			and 	#NSTString
.9a48	d0 40		bne $9a8a			bne 	_CBCString
.9a4a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9a4d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a50	d0 3b		bne $9a8d			bne 	_CBCFloat
.9a52	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a55	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a58	29 08		and #$08			and 	#NSTFloat
.9a5a	d0 31		bne $9a8d			bne 	_CBCFloat
.9a5c	20 90 9a	jsr $9a90			jsr 	CompareFixMinusZero
.9a5f	e8		inx				inx
.9a60	20 90 9a	jsr $9a90			jsr 	CompareFixMinusZero
.9a63	ca		dex				dex
.9a64	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9a67	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9a6a	10 0b		bpl $9a77			bpl 	_CDCSameSign
.9a6c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9a6f	30 16		bmi $9a87			bmi 	_CBCLess 					; return $FF
.9a71					_CBCGreater:
.9a71	a9 01		lda #$01			lda 	#1
.9a73	60		rts				rts
.9a74					_CBCEqual:
.9a74	a9 00		lda #$00			lda 	#0
.9a76	60		rts				rts
.9a77					_CDCSameSign:
.9a77	20 a0 9b	jsr $9ba0			jsr 	SubTopTwoStack 				; unsigned subtract
.9a7a	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; or the mantissa together
.9a7d	f0 f5		beq $9a74			beq 	_CBCEqual 					; -0 == 0
.9a7f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9a82	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9a85	10 ea		bpl $9a71			bpl 	_CBCGreater
.9a87					_CBCLess:
.9a87	a9 ff		lda #$ff			lda 	#$FF
.9a89	60		rts				rts
.9a8a					_CBCString:
.9a8a	4c f6 9a	jmp $9af6			jmp 	CompareStrings
.9a8d					_CBCFloat:
.9a8d	4c d7 af	jmp $afd7			jmp 	CompareFloat
.9a90					CompareFixMinusZero:
.9a90	20 87 a5	jsr $a587			jsr 	NSMIsZero
.9a93	d0 03		bne $9a98			bne 	_CFXMZNotZero
.9a95	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9a98					_CFXMZNotZero:
.9a98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9a99					StringConcat:
.9a99	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a9c	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a9f	29 18		and #$18			and 	#NSBTypeMask
.9aa1	c9 10		cmp #$10			cmp 	#NSTString
.9aa3	d0 4e		bne $9af3			bne		_SCType
.9aa5	64 38		stz $38				stz 	zTemp1 						; counting total length
.9aa7	e8		inx				inx
.9aa8	20 c6 9a	jsr $9ac6			jsr 	_SCSetupZ0 					; setup for second
.9aab	20 d1 9a	jsr $9ad1			jsr 	_SCLengthZ0 				; length for second
.9aae	ca		dex				dex
.9aaf	20 c6 9a	jsr $9ac6			jsr 	_SCSetupZ0 					; setup for first
.9ab2	20 d1 9a	jsr $9ad1			jsr 	_SCLengthZ0 				; length for first
.9ab5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9ab7	20 9e b6	jsr $b69e			jsr 	StringTempAllocate
.9aba	20 e4 9a	jsr $9ae4			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9abd	e8		inx				inx
.9abe	20 c6 9a	jsr $9ac6			jsr 	_SCSetupZ0 					; copy second out
.9ac1	20 e4 9a	jsr $9ae4			jsr 	_SCCopy
.9ac4	ca		dex				dex
.9ac5	60		rts				rts
.9ac6					_SCSetupZ0:
.9ac6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ac9	85 36		sta $36				sta 	zTemp0
.9acb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ace	85 37		sta $37				sta 	zTemp0+1
.9ad0	60		rts				rts
.9ad1					_SCLengthZ0:
.9ad1	5a		phy				phy
.9ad2	a0 00		ldy #$00			ldy 	#0
.9ad4					_SCLenLoop:
.9ad4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ad6	f0 0a		beq $9ae2			beq 	_SCLExit
.9ad8	c8		iny				iny
.9ad9	e6 38		inc $38				inc 	zTemp1
.9adb	10 f7		bpl $9ad4			bpl		_SCLenLoop
.9add	a9 09		lda #$09		lda	#9
.9adf	4c 85 99	jmp $9985		jmp	ErrorHandler
.9ae2					_SCLExit:
.9ae2	7a		ply				ply
.9ae3	60		rts				rts
.9ae4					_SCCopy:
.9ae4	5a		phy				phy
.9ae5	a0 00		ldy #$00			ldy 	#0
.9ae7					_SCCopyLoop:
.9ae7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ae9	f0 06		beq $9af1			beq 	_SCCExit
.9aeb	20 dc b6	jsr $b6dc			jsr 	StringTempWrite
.9aee	c8		iny				iny
.9aef	80 f6		bra $9ae7			bra 	_SCCopyLoop
.9af1					_SCCExit:
.9af1	7a		ply				ply
.9af2	60		rts				rts
.9af3					_SCType:
.9af3	4c 6f b3	jmp $b36f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ad98					IntegerDivide:
.ad98	fa		plx				plx
.ad99	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad9c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad9f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ada0	0a		asl a				asl 	a
.ada1	10 05		bpl $ada8			bpl 	_NotRef
.ada3	48		pha				pha
.ada4	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ada7	68		pla				pla
.ada8					_NotRef:
.ada8	0a		asl a				asl 	a
.ada9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.adab	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.adae	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.adb1	f0 03		beq $adb6			beq 	_IntegerCode 				; if clear, then we have two integers
.adb3	4c 6f b3	jmp $b36f			jmp 	TypeError 					; anything else, type mismatch.
.adb6					_IntegerCode:
.adb6	20 d8 ad	jsr $add8			jsr 	CheckDivideZero 			; do div zero check
.adb9	20 10 ae	jsr $ae10			jsr 	Int32Divide 				; do the division
.adbc	20 cd ae	jsr $aecd			jsr 	CalculateSign 				; calculate result sign
.adbf					NSMCopyPlusTwoToZero:
.adbf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.adc2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.adc5	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.adc8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.adcb	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.adce	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.add1	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.add4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.add7	60		rts				rts
.add8					CheckDivideZero:
.add8	e8		inx				inx
.add9	20 87 a5	jsr $a587			jsr 	NSMIsZero
.addc	f0 02		beq $ade0			beq 	_CDVError
.adde	ca		dex				dex
.addf	60		rts				rts
.ade0					_CDVError:
.ade0	a9 03		lda #$03		lda	#3
.ade2	4c 85 99	jmp $9985		jmp	ErrorHandler
.ade5					IntegerModulus:
.ade5	fa		plx				plx
.ade6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ade9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.adec	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aded	0a		asl a				asl 	a
.adee	10 05		bpl $adf5			bpl 	_NotRef
.adf0	48		pha				pha
.adf1	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.adf4	68		pla				pla
.adf5					_NotRef:
.adf5	0a		asl a				asl 	a
.adf6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.adf8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.adfb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.adfe	f0 03		beq $ae03			beq 	_IntegerCode 				; if clear, then we have two integers
.ae00	4c 6f b3	jmp $b36f			jmp 	TypeError 					; anything else, type mismatch.
.ae03					_IntegerCode:
.ae03					IntegerModulusNoCheck:
.ae03	20 d8 ad	jsr $add8			jsr 	CheckDivideZero 			; do div zero check
.ae06	20 10 ae	jsr $ae10			jsr 	Int32Divide 				; do the division
.ae09	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ae0c	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ae0f	60		rts				rts
.ae10					Int32Divide:
.ae10	48		pha				pha 								; save AXY
.ae11	5a		phy				phy
.ae12	20 2e a5	jsr $a52e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae15	20 53 a5	jsr $a553			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ae18	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ae1a					_I32DivideLoop:
.ae1a	e8		inx				inx
.ae1b	e8		inx				inx
.ae1c	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ae1f	ca		dex				dex
.ae20	ca		dex				dex
.ae21	20 6d a5	jsr $a56d			jsr 	NSMRotateLeft
.ae24	20 50 ae	jsr $ae50			jsr 	DivideCheckSubtract 		; check if subtract possible
.ae27	90 03		bcc $ae2c			bcc 	_I32DivideNoCarryIn
.ae29	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ae2c					_I32DivideNoCarryIn:
.ae2c	88		dey				dey 								; loop round till division completed.
.ae2d	d0 eb		bne $ae1a			bne 	_I32DivideLoop
.ae2f	7a		ply				ply 								; restore AXY and exit
.ae30	68		pla				pla
.ae31	60		rts				rts
.ae32					Int32ShiftDivide:
.ae32	48		pha				pha 								; save AY
.ae33	5a		phy				phy
.ae34	e8		inx				inx 								; clear S[X+2]
.ae35	e8		inx				inx
.ae36	20 57 a5	jsr $a557			jsr 	NSMSetZero
.ae39	ca		dex				dex
.ae3a	ca		dex				dex
.ae3b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.ae3d					_I32SDLoop:
.ae3d	20 50 ae	jsr $ae50			jsr 	DivideCheckSubtract 		; check if subtract possible
.ae40	e8		inx				inx
.ae41	e8		inx				inx
.ae42	20 6d a5	jsr $a56d			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.ae45	ca		dex				dex
.ae46	ca		dex				dex
.ae47	20 6d a5	jsr $a56d			jsr 	NSMRotateLeft
.ae4a	88		dey				dey 	 							; do 31 times
.ae4b	d0 f0		bne $ae3d			bne 	_I32SDLoop
.ae4d	7a		ply				ply 								; restore AY and exit
.ae4e	68		pla				pla
.ae4f	60		rts				rts
.ae50					DivideCheckSubtract:
.ae50	20 a0 9b	jsr $9ba0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.ae53	b0 04		bcs $ae59			bcs 	_DCSExit 					; if carry set, then could do, exit
.ae55	20 7a 9b	jsr $9b7a			jsr 	AddTopTwoStack 				; add it back in
.ae58	18		clc				clc 								; and return False
.ae59					_DCSExit:
.ae59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.ae5a					MulInteger:
.ae5a	fa		plx				plx
.ae5b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae5e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae61	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae62	0a		asl a				asl 	a
.ae63	10 05		bpl $ae6a			bpl 	_NotRef
.ae65	48		pha				pha
.ae66	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae69	68		pla				pla
.ae6a					_NotRef:
.ae6a	0a		asl a				asl 	a 							; put MSB of type into A:7
.ae6b	30 0b		bmi $ae78			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.ae6d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae70	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae73	f0 06		beq $ae7b			beq 	_IntegerCode 				; if clear, then we have two integers
.ae75	4c ae b0	jmp $b0ae			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ae78					_StringData:
.ae78	4c 79 b3	jmp $b379			jmp 	NotDoneError							; at least one string - don't know both are strings.
.ae7b					_IntegerCode:
.ae7b	20 88 ae	jsr $ae88			jsr 	MultiplyShort
.ae7e	c9 00		cmp #$00			cmp 	#0
.ae80	f0 05		beq $ae87			beq 	_MIExit
.ae82	a9 04		lda #$04		lda	#4
.ae84	4c 85 99	jmp $9985		jmp	ErrorHandler
.ae87					_MIExit:
.ae87	60		rts				rts
.ae88					MultiplyShort:
.ae88	5a		phy				phy 								; save Y
.ae89	20 2e a5	jsr $a52e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae8c	20 53 a5	jsr $a553			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ae8f	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ae91					_I32MLoop:
.ae91	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ae94	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ae97	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ae9a	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ae9d	f0 28		beq $aec7			beq 	_I32MExit 					; exit if zero
.ae9f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.aea2	29 01		and #$01			and 	#1
.aea4	f0 0e		beq $aeb4			beq 	_I32MNoAdd
.aea6	20 7a 9b	jsr $9b7a			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.aea9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.aeac	10 06		bpl $aeb4			bpl 	_I32MNoAdd
.aeae					_I32ShiftRight:
.aeae	20 7a a5	jsr $a57a			jsr 	NSMShiftRight 				; shift S[X] right
.aeb1	c8		iny				iny 								; increment shift count
.aeb2	80 0a		bra $aebe			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.aeb4					_I32MNoAdd:
.aeb4	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.aeb7	70 f5		bvs $aeae			bvs 	_I32ShiftRight 				; instead.
.aeb9	e8		inx				inx
.aeba	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.aebd	ca		dex				dex
.aebe					_I32MShiftUpper:
.aebe	e8		inx				inx 								; shift S[X+2] right
.aebf	e8		inx				inx
.aec0	20 7a a5	jsr $a57a			jsr 	NSMShiftRight
.aec3	ca		dex				dex
.aec4	ca		dex				dex
.aec5	80 ca		bra $ae91			bra 	_I32MLoop 					; try again.
.aec7					_I32MExit:
.aec7	20 cd ae	jsr $aecd			jsr 	CalculateSign
.aeca	98		tya				tya 								; shift in A
.aecb	7a		ply				ply 								; restore Y and exit
.aecc	60		rts				rts
.aecd					CalculateSign:
.aecd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.aed0	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.aed3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aed6	0a		asl a				asl 	a 							; shift bit 7 into carry
.aed7	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.aeda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9af6					CompareStrings:
.9af6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9af9	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9afc	29 10		and #$10			and 	#NSBIsString
.9afe	f0 2c		beq $9b2c			beq 	_CSTypeError
.9b00	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9b03	85 36		sta $36				sta 	zTemp0
.9b05	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b08	85 37		sta $37				sta 	zTemp0+1
.9b0a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b0d	85 38		sta $38				sta 	zTemp1
.9b0f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b12	85 39		sta $39				sta 	zTemp1+1
.9b14	5a		phy				phy 								; save Y so we can access strings
.9b15	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9b17					_CSLoop:
.9b17	c8		iny				iny
.9b18	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9b1a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9b1c	d0 06		bne $9b24			bne 	_CSDifferent
.9b1e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9b20	d0 f5		bne $9b17			bne 	_CSLoop 					; still comparing
.9b22					_CSExit:
.9b22	7a		ply				ply 								; reached end, return zero in A from EOS
.9b23	60		rts				rts
.9b24					_CSDifferent:
.9b24	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9b26	90 fa		bcc $9b22			bcc		_CSExit
.9b28	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9b2a	80 f6		bra $9b22			bra 	_CSExit
.9b2c					_CSTypeError:
.9b2c	4c 6f b3	jmp $b36f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9b2f					ShiftLeft:
.9b2f	38		sec				sec
.9b30	80 01		bra $9b33			bra 	ShiftMain
.9b32					ShiftRight:
.9b32	18		clc				clc
.9b33					ShiftMain:
.9b33	fa		plx				plx 								; restore X
.9b34	08		php				php 								; save direction
.9b35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b38	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b3b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b3c	0a		asl a				asl 	a
.9b3d	10 05		bpl $9b44			bpl 	_NotRef
.9b3f	48		pha				pha
.9b40	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b43	68		pla				pla
.9b44					_NotRef:
.9b44	0a		asl a				asl 	a
.9b45	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b47	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b4a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b4d	f0 03		beq $9b52			beq 	_IntegerCode 				; if clear, then we have two integers
.9b4f	4c 6f b3	jmp $b36f			jmp 	TypeError 					; anything else, type mismatch.
.9b52					_IntegerCode:
.9b52	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9b55	29 e0		and #$e0			and 	#$E0
.9b57	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9b5a	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9b5d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9b60	d0 13		bne $9b75			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9b62					_SMLoop:
.9b62	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9b65	30 11		bmi $9b78			bmi 	_SMExit 					; exit if done.
.9b67	28		plp				plp 								; restore direcition setting
.9b68	08		php				php
.9b69	90 05		bcc $9b70			bcc 	_SMRight
.9b6b	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; shift left if CS
.9b6e	80 f2		bra $9b62			bra 	_SMLoop
.9b70					_SMRight:
.9b70	20 7a a5	jsr $a57a			jsr 	NSMShiftRight 				; shift right if CC
.9b73	80 ed		bra $9b62			bra 	_SMLoop
.9b75					_SMExit0:
.9b75	20 57 a5	jsr $a557			jsr 	NSMSetZero 					; return zero.
.9b78					_SMExit:
.9b78	28		plp				plp 								; throw direction
.9b79	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9b7a					AddTopTwoStack:
.9b7a	18		clc				clc
.9b7b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b7e	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9b81	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b84	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b87	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9b8a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b8d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b90	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9b93	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b96	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b99	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b9c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b9f	60		rts				rts
.9ba0					SubTopTwoStack:
.9ba0	38		sec				sec
.9ba1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ba4	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9ba7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9baa	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bad	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9bb0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bb3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bb6	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9bb9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bbc	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bbf	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9bc2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bc5	60		rts				rts
.9bc6					AddInteger:
.9bc6	fa		plx				plx
.9bc7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bca	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bcd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bce	0a		asl a				asl 	a
.9bcf	10 05		bpl $9bd6			bpl 	_NotRef
.9bd1	48		pha				pha
.9bd2	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bd5	68		pla				pla
.9bd6					_NotRef:
.9bd6	0a		asl a				asl 	a 							; put MSB of type into A:7
.9bd7	30 0b		bmi $9be4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9bd9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bdc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bdf	f0 06		beq $9be7			beq 	_IntegerCode 				; if clear, then we have two integers
.9be1	4c 36 af	jmp $af36			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9be4					_StringData:
.9be4	4c 99 9a	jmp $9a99			jmp 	StringConcat							; at least one string - don't know both are strings.
.9be7					_IntegerCode:
.9be7					AddCode:
.9be7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9bea	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9bed	10 8b		bpl $9b7a			bpl 	AddTopTwoStack
.9bef	20 a0 9b	jsr $9ba0			jsr 	SubTopTwoStack 				; do a physical subtraction
.9bf2	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9bf5	10 09		bpl $9c00			bpl 	_AddExit
.9bf7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9bfa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bfd	20 0c a5	jsr $a50c			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9c00					_AddExit:
.9c00	60		rts				rts
.9c01					SubInteger:
.9c01	fa		plx				plx
.9c02	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c05	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c08	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c09	0a		asl a				asl 	a
.9c0a	10 05		bpl $9c11			bpl 	_NotRef
.9c0c	48		pha				pha
.9c0d	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c10	68		pla				pla
.9c11					_NotRef:
.9c11	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c12	30 0b		bmi $9c1f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c14	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c17	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c1a	f0 06		beq $9c22			beq 	_IntegerCode 				; if clear, then we have two integers
.9c1c	4c 3b af	jmp $af3b			jmp 	FloatingPointSub 							; otherwise at least one float.
.9c1f					_StringData:
.9c1f	4c 79 b3	jmp $b379			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c22					_IntegerCode:
.9c22	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9c25	49 80		eor #$80			eor 	#$80
.9c27	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c2a	80 bb		bra $9be7			bra 	AddCode 					; and do the same code as add.
.9c2c					AndInteger:
.9c2c	fa		plx				plx
.9c2d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c30	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c33	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c34	0a		asl a				asl 	a
.9c35	10 05		bpl $9c3c			bpl 	_NotRef
.9c37	48		pha				pha
.9c38	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c3b	68		pla				pla
.9c3c					_NotRef:
.9c3c	0a		asl a				asl 	a
.9c3d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c3f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c42	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c45	f0 03		beq $9c4a			beq 	_IntegerCode 				; if clear, then we have two integers
.9c47	4c 6f b3	jmp $b36f			jmp 	TypeError 					; anything else, type mismatch.
.9c4a					_IntegerCode:
.9c4a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c4d	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9c50	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c53	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c56	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9c59	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c5c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c5f	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9c62	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c65	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c68	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9c6b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c6e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c71	60		rts				rts
.9c72					OraInteger:
.9c72	fa		plx				plx
.9c73	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c76	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c79	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c7a	0a		asl a				asl 	a
.9c7b	10 05		bpl $9c82			bpl 	_NotRef
.9c7d	48		pha				pha
.9c7e	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c81	68		pla				pla
.9c82					_NotRef:
.9c82	0a		asl a				asl 	a
.9c83	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c85	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c88	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c8b	f0 03		beq $9c90			beq 	_IntegerCode 				; if clear, then we have two integers
.9c8d	4c 6f b3	jmp $b36f			jmp 	TypeError 					; anything else, type mismatch.
.9c90					_IntegerCode:
.9c90	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c93	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9c96	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c99	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c9c	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c9f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ca2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ca5	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9ca8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cab	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cae	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9cb1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cb4	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9cb7	60		rts				rts
.9cb8					EorInteger:
.9cb8	fa		plx				plx
.9cb9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cbc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cbf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cc0	0a		asl a				asl 	a
.9cc1	10 05		bpl $9cc8			bpl 	_NotRef
.9cc3	48		pha				pha
.9cc4	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cc7	68		pla				pla
.9cc8					_NotRef:
.9cc8	0a		asl a				asl 	a
.9cc9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ccb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cce	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cd1	f0 03		beq $9cd6			beq 	_IntegerCode 				; if clear, then we have two integers
.9cd3	4c 6f b3	jmp $b36f			jmp 	TypeError 					; anything else, type mismatch.
.9cd6					_IntegerCode:
.9cd6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cd9	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9cdc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cdf	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ce2	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9ce5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ce8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ceb	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9cee	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cf1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cf4	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9cf7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cfa	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9cfd	60		rts				rts
.9cfe					WordIndirect:
.9cfe	fa		plx				plx
.9cff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d02	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d05	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d06	0a		asl a				asl 	a
.9d07	10 05		bpl $9d0e			bpl 	_NotRef
.9d09	48		pha				pha
.9d0a	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d0d	68		pla				pla
.9d0e					_NotRef:
.9d0e	0a		asl a				asl 	a
.9d0f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d11	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d14	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d17	f0 03		beq $9d1c			beq 	_IntegerCode 				; if clear, then we have two integers
.9d19	4c 6f b3	jmp $b36f			jmp 	TypeError 					; anything else, type mismatch.
.9d1c					_IntegerCode:
.9d1c	20 e7 9b	jsr $9be7			jsr 	AddCode 					; add the two values
.9d1f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9d21	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d24	60		rts				rts
.9d25					ByteIndirect:
.9d25	fa		plx				plx
.9d26	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d29	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d2c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d2d	0a		asl a				asl 	a
.9d2e	10 05		bpl $9d35			bpl 	_NotRef
.9d30	48		pha				pha
.9d31	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d34	68		pla				pla
.9d35					_NotRef:
.9d35	0a		asl a				asl 	a
.9d36	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d38	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d3b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d3e	f0 03		beq $9d43			beq 	_IntegerCode 				; if clear, then we have two integers
.9d40	4c 6f b3	jmp $b36f			jmp 	TypeError 					; anything else, type mismatch.
.9d43					_IntegerCode:
.9d43	20 e7 9b	jsr $9be7			jsr 	AddCode 					; add the two values
.9d46	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9d48	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.aedb					ConvertInt16:
.aedb	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.aede	8e 10 04	stx $0410			stx 	NSMantissa1
.aee1	9c 18 04	stz $0418			stz 	NSMantissa2
.aee4	9c 20 04	stz $0420			stz 	NSMantissa3
.aee7	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.aeea	a2 00		ldx #$00			ldx 	#0 							; stack level
.aeec	a9 0a		lda #$0a			lda 	#10 						; base
.aeee	80 00		bra $aef0			bra 	ConvertInt32
.aef0					ConvertInt32:
.aef0	5a		phy				phy
.aef1	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.aef3	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.aef6	10 08		bpl $af00			bpl 	_CI32NotNeg
.aef8	48		pha				pha
.aef9	a9 2d		lda #$2d			lda 	#'-'
.aefb	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aefe	c8		iny				iny
.aeff	68		pla				pla
.af00					_CI32NotNeg:
.af00	20 0e af	jsr $af0e			jsr 	_CI32DivideConvert 			; recursive conversion
.af03	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.af05	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.af08	7a		ply				ply
.af09	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.af0b	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.af0d	60		rts				rts
.af0e					_CI32DivideConvert:
.af0e	e8		inx				inx 								; write to next slot up
.af0f	20 59 a5	jsr $a559			jsr 	NSMSetByte
.af12	ca		dex				dex
.af13	20 10 ae	jsr $ae10			jsr 	Int32Divide 				; divide
.af16	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.af19	48		pha				pha
.af1a	20 bf ad	jsr $adbf			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.af1d	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; is it zero ?
.af20	f0 06		beq $af28			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.af22	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.af25	20 0e af	jsr $af0e			jsr 	_CI32DivideConvert 			; and recusrively call.
.af28					_CI32NoRecurse:
.af28	68		pla				pla 								; remainder
.af29	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.af2b	90 02		bcc $af2f			bcc 	_CI32NotHex
.af2d	69 26		adc #$26			adc 	#6+32
.af2f					_CI32NotHex:
.af2f	69 30		adc #$30			adc 	#48
.af31	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.af34	c8		iny				iny
.af35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9d4c					PrecedenceLevel:
>9d4c	04					.byte	 4	; $00 <<
>9d4d	02					.byte	 2	; $01 <=
>9d4e	02					.byte	 2	; $02 <>
>9d4f	00					.byte	 0	; $03 !!3
>9d50	00					.byte	 0	; $04 ><
>9d51	02					.byte	 2	; $05 >=
>9d52	04					.byte	 4	; $06 >>
>9d53	00					.byte	 0	; $07 !!7
>9d54	00					.byte	 0	; $08 !!8
>9d55	00					.byte	 0	; $09 !!9
>9d56	00					.byte	 0	; $0a !!10
>9d57	00					.byte	 0	; $0b !!11
>9d58	00					.byte	 0	; $0c !!12
>9d59	00					.byte	 0	; $0d !!13
>9d5a	00					.byte	 0	; $0e !!14
>9d5b	00					.byte	 0	; $0f !!15
>9d5c	00					.byte	 0	; $10 @
>9d5d	00					.byte	 0	; $11 !!17
>9d5e	00					.byte	 0	; $12 !!18
>9d5f	00					.byte	 0	; $13 [
>9d60	04					.byte	 4	; $14 \
>9d61	00					.byte	 0	; $15 ]
>9d62	01					.byte	 1	; $16 ^
>9d63	00					.byte	 0	; $17 _
>9d64	00					.byte	 0	; $18 `
>9d65	00					.byte	 0	; $19 !!25
>9d66	00					.byte	 0	; $1a !!26
>9d67	00					.byte	 0	; $1b {
>9d68	01					.byte	 1	; $1c |
>9d69	00					.byte	 0	; $1d }
>9d6a	00					.byte	 0	; $1e ~
>9d6b	00					.byte	 0	; $1f [7m<7F>[m
>9d6c	00					.byte	 0	; $20
>9d6d	05					.byte	 5	; $21 !
>9d6e	00					.byte	 0	; $22 "
>9d6f	00					.byte	 0	; $23 #
>9d70	05					.byte	 5	; $24 $
>9d71	04					.byte	 4	; $25 %
>9d72	01					.byte	 1	; $26 &
>9d73	00					.byte	 0	; $27 '
>9d74	00					.byte	 0	; $28 (
>9d75	00					.byte	 0	; $29 )
>9d76	04					.byte	 4	; $2a *
>9d77	03					.byte	 3	; $2b +
>9d78	00					.byte	 0	; $2c ,
>9d79	03					.byte	 3	; $2d -
>9d7a	00					.byte	 0	; $2e .
>9d7b	04					.byte	 4	; $2f /
>9d7c	00					.byte	 0	; $30 0
>9d7d	00					.byte	 0	; $31 1
>9d7e	00					.byte	 0	; $32 2
>9d7f	00					.byte	 0	; $33 3
>9d80	00					.byte	 0	; $34 4
>9d81	00					.byte	 0	; $35 5
>9d82	00					.byte	 0	; $36 6
>9d83	00					.byte	 0	; $37 7
>9d84	00					.byte	 0	; $38 8
>9d85	00					.byte	 0	; $39 9
>9d86	00					.byte	 0	; $3a :
>9d87	00					.byte	 0	; $3b ;
>9d88	02					.byte	 2	; $3c <
>9d89	02					.byte	 2	; $3d =
>9d8a	02					.byte	 2	; $3e >
>9d8b	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9d8c					EvaluateExpressionAt0:
.9d8c	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9d8e					EvaluateExpression:
.9d8e	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d90					EvaluateExpressionAtPrecedence:
.9d90	48		pha				pha 								; save precedence level
.9d91	20 5f a0	jsr $a05f			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d94	68		pla				pla 								; restore precedence level.
.9d95					_EXPRLoop:
.9d95	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d97	b1 30		lda ($30),y			lda 	(codePtr),y
.9d99	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d9b	b0 25		bcs $9dc2			bcs 	_EXPRExit
.9d9d	da		phx				phx 								; read the operator precedence
.9d9e	aa		tax				tax
.9d9f	bd 4c 9d	lda $9d4c,x			lda 	PrecedenceLevel,x
.9da2	fa		plx				plx
.9da3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9da5	f0 1b		beq $9dc2			beq 	_EXPRExit
.9da7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9da9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9dab	c5 37		cmp $37				cmp 	zTemp0+1
.9dad	b0 13		bcs $9dc2			bcs		_EXPRExit 					; if current >= operator exit
.9daf	48		pha				pha 								; save current precedence.
.9db0	b1 30		lda ($30),y			lda 	(codePtr),y
.9db2	c8		iny				iny
.9db3	48		pha				pha
.9db4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9db6	e8		inx				inx 								; work out the right hand side.
.9db7	20 90 9d	jsr $9d90			jsr 	EvaluateExpressionAtPrecedence
.9dba	ca		dex				dex
.9dbb	68		pla				pla 								; get operator, call the code.
.9dbc	20 c5 9d	jsr $9dc5			jsr 	_EXPRCaller
.9dbf	68		pla				pla 								; restore precedence level
.9dc0	80 d3		bra $9d95			bra 	_EXPRLoop 					; and go round.
.9dc2					_EXPRExit:
.9dc2	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9dc4	60		rts				rts
.9dc5					_EXPRCaller:
.9dc5	da		phx				phx 								; save on stack, first thing is to restore it
.9dc6	0a		asl a				asl 	a 							; double so can use vectors into X
.9dc7	aa		tax				tax
.9dc8	7c 80 95	jmp ($9580,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.af36					FloatingPointAdd:
.af36	20 d7 b0	jsr $b0d7			jsr 	FloatPrepare 				; prepare for floats
.af39	80 0b		bra $af46			bra 	FloatAdd
.af3b					FloatingPointSub:
.af3b	20 d7 b0	jsr $b0d7			jsr 	FloatPrepare 				; prepare for floats
.af3e					FloatSubtract:
.af3e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.af41	49 80		eor #$80			eor 	#$80
.af43	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.af46					FloatAdd:
.af46	48		pha				pha
.af47	5a		phy				phy
.af48	20 e8 b0	jsr $b0e8			jsr 	NSNormalise 				; normalise S[X]
.af4b	f0 54		beq $afa1			beq 	_FAReturn1
.af4d	e8		inx				inx 								; normalise S[X+1]
.af4e	20 e8 b0	jsr $b0e8			jsr 	NSNormalise
.af51	ca		dex				dex
.af52	c9 00		cmp #$00			cmp 	#0
.af54	f0 6f		beq $afc5			beq 	_FAExit 					; if so, just return A
.af56	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.af59	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.af5c	f0 1b		beq $af79			beq 	_FAExponentsEqual
.af5e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.af61	a8		tay				tay
.af62	38		sec				sec 								; do a signed comparison of the exponents.
.af63	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af66	50 02		bvc $af6a			bvc 	_FANoSignedChange
.af68	49 80		eor #$80			eor 	#$80
.af6a					_FANoSignedChange:
.af6a	29 80		and #$80			and 	#$80
.af6c	10 03		bpl $af71			bpl 	_FAHaveMax
.af6e	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.af71					_FAHaveMax:
.af71	20 c8 af	jsr $afc8			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.af74	e8		inx				inx
.af75	20 c8 af	jsr $afc8			jsr 	_FAShiftToExponent
.af78	ca		dex				dex
.af79					_FAExponentsEqual:
.af79	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.af7c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.af7f	30 10		bmi $af91			bmi 	_FADifferentSigns
.af81	20 7a 9b	jsr $9b7a			jsr 	AddTopTwoStack 				; do the add of the mantissae
.af84	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.af87	10 3c		bpl $afc5			bpl 	_FAExit 					; if no, we are done.
.af89	20 7a a5	jsr $a57a			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.af8c	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.af8f	80 34		bra $afc5			bra 	_FAExit
.af91					_FADifferentSigns:
.af91	20 a0 9b	jsr $9ba0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.af94	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.af97	10 2c		bpl $afc5			bpl 	_FAExit 					; if no, we are done.
.af99	20 03 a5	jsr $a503			jsr 	NSMNegate 					; netate result
.af9c	20 0c a5	jsr $a50c			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.af9f	80 24		bra $afc5			bra 	_FAExit
.afa1					_FAReturn1:
.afa1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.afa4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afa7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.afaa	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afad	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.afb0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afb3	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.afb6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afb9	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.afbc	9d 28 04	sta $0428,x			sta 	NSExponent,x
.afbf	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.afc2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.afc5					_FAExit:
.afc5	7a		ply				ply
.afc6	68		pla				pla
.afc7	60		rts				rts
.afc8					_FAShiftToExponent:
.afc8					_FAShiftToExponent2:
.afc8	98		tya				tya 								; compare Y to exponent
.afc9	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.afcc	f0 08		beq $afd6			beq 	_FASEExit 					; exit if so.
.afce	20 7a a5	jsr $a57a			jsr 	NSMShiftRight	 			; shift the mantissa right
.afd1	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.afd4	80 f2		bra $afc8			bra 	_FAShiftToExponent2
.afd6					_FASEExit:
.afd6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.afd7					CompareFloat:
.afd7	20 3e af	jsr $af3e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.afda	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.afdd	29 f8		and #$f8			and 	#$F8
.afdf	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.afe2	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.afe5	f0 09		beq $aff0			beq 	_FCExit 					; zero, so approximately identical
.afe7	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.afe9	3c 00 04	bit $0400,x			bit 	NSStatus,x
.afec	10 02		bpl $aff0			bpl 	_FCExit
.afee					_FCNegative:
.afee	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.aff0					_FCExit:
.aff0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.aff1					FDivideCommand:
.aff1	fa		plx				plx	 								; restore stack position
.aff2	20 d7 b0	jsr $b0d7			jsr 	FloatPrepare 				; prepare for floats
.aff5					FloatDivide:
.aff5	48		pha				pha
.aff6	e8		inx				inx
.aff7	20 e8 b0	jsr $b0e8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.affa	ca		dex				dex
.affb	c9 00		cmp #$00			cmp 	#0
.affd	f0 20		beq $b01f			beq 	_FDZero
.afff	20 e8 b0	jsr $b0e8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b002	f0 19		beq $b01d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b004	20 32 ae	jsr $ae32			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b007	20 bf ad	jsr $adbf			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b00a	20 e8 b0	jsr $b0e8			jsr		NSNormalise 				; renormalise
.b00d	20 cd ae	jsr $aecd			jsr 	CalculateSign 				; calculate result sign
.b010	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b013	38		sec				sec
.b014	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b017	38		sec				sec
.b018	e9 1e		sbc #$1e			sbc 	#30
.b01a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b01d					_FDExit:
.b01d	68		pla				pla
.b01e	60		rts				rts
.b01f					_FDZero:
.b01f	a9 03		lda #$03		lda	#3
.b021	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b024					FloatFractionalPart:
.b024	5a		phy				phy
.b025	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b028	29 7f		and #$7f			and 	#$7F
.b02a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b02d	20 e8 b0	jsr $b0e8			jsr 	NSNormalise
.b030	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b033	38		sec				sec
.b034	e9 e0		sbc #$e0			sbc 	#$E0
.b036	90 31		bcc $b069			bcc 	_FFPExit 					; already fractional
.b038	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b03a	b0 2a		bcs $b066			bcs 	_FFPZero
.b03c	a8		tay				tay 								; put count to do in Y
.b03d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b040	20 6b b0	jsr $b06b			jsr 	_FFPPartial
.b043	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b046	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b049	20 6b b0	jsr $b06b			jsr 	_FFPPartial
.b04c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b04f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b052	20 6b b0	jsr $b06b			jsr 	_FFPPartial
.b055	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b058	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b05b	20 6b b0	jsr $b06b			jsr 	_FFPPartial
.b05e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b061	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; zeroed check.
.b064	d0 03		bne $b069			bne 	_FFPExit
.b066					_FFPZero:
.b066	20 57 a5	jsr $a557			jsr 	NSMSetZero
.b069					_FFPExit:
.b069	7a		ply				ply
.b06a	60		rts				rts
.b06b					_FFPPartial:
.b06b	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b06d	f0 17		beq $b086			beq 	_FFFPPExit
.b06f	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b071	b0 0c		bcs $b07f			bcs 	_FFFPPWholeByte
.b073	5a		phy				phy
.b074					_FFFPPLeft:
.b074	0a		asl a				asl 	a
.b075	88		dey				dey
.b076	d0 fc		bne $b074			bne 	_FFFPPLeft
.b078	7a		ply				ply
.b079					_FFFPPRight:
.b079	4a		lsr a				lsr 	a
.b07a	88		dey				dey
.b07b	d0 fc		bne $b079			bne 	_FFFPPRight
.b07d	80 07		bra $b086			bra 	_FFFPPExit
.b07f					_FFFPPWholeByte:
.b07f	98		tya				tya 								; subtract 8 from count
.b080	38		sec				sec
.b081	e9 08		sbc #$08			sbc 	#8
.b083	a8		tay				tay
.b084	a9 00		lda #$00			lda 	#0 							; and clear all
.b086					_FFFPPExit:
.b086	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b087					FloatIntegerPart:
.b087	48		pha				pha
.b088	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b08b	f0 1f		beq $b0ac			beq 	_FIPExit 					; if so do nothing
.b08d	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; is it zero ?
.b090	f0 17		beq $b0a9			beq 	_FIPZero 					; if so return zero.
.b092	20 e8 b0	jsr $b0e8			jsr 	NSNormalise 				; normalise
.b095	f0 12		beq $b0a9			beq 	_FIPZero 					; normalised to zero, exit zero
.b097					_FIPShift:
.b097	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b09a	10 08		bpl $b0a4			bpl 	_FIPCheckZero
.b09c	20 7a a5	jsr $a57a			jsr 	NSMShiftRight 				; shift mantissa right
.b09f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b0a2	80 f3		bra $b097			bra 	_FIPShift
.b0a4					_FIPCheckZero:
.b0a4	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; avoid -0 problem
.b0a7	d0 03		bne $b0ac			bne 	_FIPExit 					; set to zero if mantissa zero.
.b0a9					_FIPZero:
.b0a9	20 57 a5	jsr $a557			jsr 	NSMSetZero
.b0ac					_FIPExit:
.b0ac	68		pla				pla
.b0ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b0ae					FloatingPointMultiply:
.b0ae	20 d7 b0	jsr $b0d7			jsr 	FloatPrepare 				; prepare for floats
.b0b1					FloatMultiply:
.b0b1	48		pha				pha
.b0b2	20 e8 b0	jsr $b0e8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b0b5	f0 1b		beq $b0d2			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b0b7	e8		inx				inx
.b0b8	20 e8 b0	jsr $b0e8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b0bb	ca		dex				dex
.b0bc	c9 00		cmp #$00			cmp 	#0
.b0be	f0 0f		beq $b0cf			beq 	_FDSetZero
.b0c0	20 88 ae	jsr $ae88			jsr 	MultiplyShort 				; calculate the result.
.b0c3	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b0c6	18		clc				clc
.b0c7	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b0ca	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0cd	80 03		bra $b0d2			bra 	_FDExit
.b0cf					_FDSetZero:
.b0cf	20 57 a5	jsr $a557			jsr 	NSMSetZero 					; return 0
.b0d2					_FDExit:
.b0d2	20 e8 b0	jsr $b0e8			jsr 	NSNormalise 				; normalise the result
.b0d5	68		pla				pla
.b0d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b0d7					FloatPrepare:
.b0d7	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; dereference the top two values
.b0da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b0dd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b0e0	29 10		and #$10			and 	#NSBIsString
.b0e2	d0 01		bne $b0e5			bne 	_FDType
.b0e4	60		rts				rts
.b0e5					_FDType:
.b0e5	4c 6f b3	jmp $b36f			jmp 	TypeError
.b0e8					NSNormalise:
.b0e8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b0eb	29 80		and #$80			and 	#$80
.b0ed	09 08		ora #$08			ora 	#NSTFloat
.b0ef	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0f2	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; if zero exit
.b0f5	d0 09		bne $b100			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b0f7	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b0fa	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b0fd	a9 00		lda #$00			lda 	#0 							; set Z flag
.b0ff	60		rts				rts
.b100					_NSNormaliseOptimise:
.b100	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b103	d0 22		bne $b127			bne 	_NSNormaliseLoop
.b105	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b108	30 1d		bmi $b127			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b10a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b10d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b110	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b113	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b116	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b119	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b11c	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b11f	38		sec				sec
.b120	e9 08		sbc #$08			sbc 	#8
.b122	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b125	80 d9		bra $b100			bra 	_NSNormaliseOptimise
.b127					_NSNormaliseLoop:
.b127	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b12a	70 08		bvs $b134			bvs 	_NSNExit 					; exit if so with Z flag clear
.b12c	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; shift mantissa left
.b12f	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b132	80 f3		bra $b127			bra 	_NSNormaliseLoop
.b134					_NSNExit:
.b134	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b136	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9dcb					AssignNumber:
.9dcb	5a		phy				phy
.9dcc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9dcf	85 36		sta $36				sta 	zTemp0
.9dd1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dd4	85 37		sta $37				sta 	zTemp0+1
.9dd6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9dd9	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ddb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dde	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9de0	c9 08		cmp #$08			cmp 	#NSTFloat
.9de2	f0 2a		beq $9e0e			beq 	_ANFloat
.9de4	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9de7	f0 05		beq $9dee			beq		_ANNotFloat
.9de9	e8		inx				inx
.9dea	20 87 b0	jsr $b087			jsr 	FloatIntegerPart 			; make it an integer
.9ded	ca		dex				dex
.9dee					_ANNotFloat:
.9dee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9df1	29 03		and #$03			and 	#3
.9df3	d0 05		bne $9dfa			bne 	_ANByteWord
.9df5	20 1a 9e	jsr $9e1a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9df8	80 1e		bra $9e18			bra 	_ANExit
.9dfa					_ANByteWord:
.9dfa	48		pha				pha 								; save count
.9dfb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9dfe	92 36		sta ($36)			sta 	(zTemp0)
.9e00	68		pla				pla
.9e01	c9 01		cmp #$01			cmp	 	#1
.9e03	f0 13		beq $9e18			beq 	_ANExit
.9e05	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9e08	a0 01		ldy #$01			ldy 	#1
.9e0a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e0c	80 0a		bra $9e18			bra 	_ANExit
.9e0e					_ANFloat:
.9e0e	20 1a 9e	jsr $9e1a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9e11	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9e14	a0 04		ldy #$04			ldy 	#4
.9e16	91 36		sta ($36),y			sta 	(zTemp0),y
.9e18					_ANExit:
.9e18	7a		ply				ply
.9e19	60		rts				rts
.9e1a					_ANCopy4PackSign:
.9e1a	a0 03		ldy #$03			ldy 	#3
.9e1c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9e1f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9e21	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9e24	91 36		sta ($36),y			sta 	(zTemp0),y
.9e26	88		dey				dey
.9e27	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9e2a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e2c	88		dey				dey
.9e2d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e30	91 36		sta ($36),y			sta 	(zTemp0),y
.9e32	88		dey				dey
.9e33	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e36	91 36		sta ($36),y			sta 	(zTemp0),y
.9e38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9e39					AssignString:
.9e39	5a		phy				phy
.9e3a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e3d	85 38		sta $38				sta 	zTemp1
.9e3f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e42	85 39		sta $39				sta 	zTemp1+1
.9e44	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e47	85 36		sta $36				sta 	zTemp0
.9e49	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e4c	85 37		sta $37				sta 	zTemp0+1
.9e4e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9e50	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e52	f0 23		beq $9e77			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9e54	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9e55	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9e57	e9 02		sbc #$02			sbc 	#2
.9e59	85 3c		sta $3c				sta 	zsTemp
.9e5b	a0 01		ldy #$01			ldy 	#1
.9e5d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e5f	e9 00		sbc #$00			sbc 	#0
.9e61	85 3d		sta $3d				sta 	zsTemp+1
.9e63	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9e65					_ASGetLength:
.9e65	c8		iny				iny
.9e66	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e68	d0 fb		bne $9e65			bne 	_ASGetLength
.9e6a	98		tya				tya 								; is this length <= current length
.9e6b	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9e6d	90 20		bcc $9e8f			bcc 	_ASCopyString
.9e6f	f0 1e		beq $9e8f			beq 	_ASCopyString
.9e71	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9e73	a0 01		ldy #$01			ldy 	#1
.9e75	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e77					_ASNewStringRequired:
.9e77	e8		inx				inx 								; concrete the new string.
.9e78	20 1d b6	jsr $b61d			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9e7b	ca		dex				dex
.9e7c	18		clc				clc
.9e7d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e80	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e82	92 36		sta ($36)			sta 	(zTemp0)
.9e84	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e87	69 00		adc #$00			adc 	#0
.9e89	a0 01		ldy #$01			ldy 	#1
.9e8b	91 36		sta ($36),y			sta 	(zTemp0),y
.9e8d	80 0d		bra $9e9c			bra 	_ASExit
.9e8f					_ASCopyString:
.9e8f	a0 00		ldy #$00			ldy 	#0
.9e91					_ASCopyLoop:
.9e91	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e93	c8		iny				iny
.9e94	c8		iny				iny
.9e95	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e97	88		dey				dey
.9e98	c9 00		cmp #$00			cmp 	#0
.9e9a	d0 f5		bne $9e91			bne 	_ASCopyLoop
.9e9c					_ASExit:
.9e9c	7a		ply				ply
.9e9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e9e					DereferenceTopTwo:
.9e9e	e8		inx				inx
.9e9f	20 a3 9e	jsr $9ea3			jsr 	Dereference 				; deref x+1
.9ea2	ca		dex				dex  								; falls through to deref x
.9ea3					Dereference:
.9ea3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9ea6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9ea8	f0 57		beq $9f01			beq 	_DRFExit 					; not a reference
.9eaa	5a		phy				phy
.9eab	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9eae	85 36		sta $36				sta 	zTemp0
.9eb0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9eb3	85 37		sta $37				sta 	zTemp0+1
.9eb5	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9eb8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9eba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ebd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9ec0	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9ec2	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9ec4	f0 0f		beq $9ed5			beq 	_DRFDereferenceTwo
.9ec6	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9ec8	f0 39		beq $9f03			beq 	_DRFFull
.9eca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9ecd	29 03		and #$03			and 	#3
.9ecf	f0 32		beq $9f03			beq 	_DRFFull 					; the whole word
.9ed1	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9ed3	f0 07		beq $9edc			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9ed5					_DRFDereferenceTwo:
.9ed5	a0 01		ldy #$01			ldy 	#1
.9ed7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ed9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9edc					_DRFClear23:
.9edc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9edf	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ee2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9ee5	29 18		and #$18			and 	#NSBTypeMask
.9ee7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9eea	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9eec	d0 12		bne $9f00			bne 	_DRFNotString
.9eee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9ef1	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9ef4	d0 0a		bne $9f00			bne 	_DRFNotString
.9ef6	a9 02		lda #$02			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9ef8	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9efb	a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9efd	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9f00					_DRFNotString
.9f00	7a		ply				ply 								; restore Y and exit
.9f01					_DRFExit:
.9f01	60		rts				rts
.9f02					_DRFNullString:
>9f02	00						.byte 	0
.9f03					_DRFFull:
.9f03	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9f05	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f07	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f0a	c8		iny				iny
.9f0b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f0d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f10	c8		iny				iny
.9f11	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f13	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f16	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9f19	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9f1c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9f1e	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9f21	f0 06		beq $9f29			beq 	_DRFNoExponent
.9f23	c8		iny				iny 								; if not, read the exponent as well.
.9f24	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f26	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f29					_DRFNoExponent:
.9f29	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9f2c	10 0d		bpl $9f3b			bpl 	_DRFExit2 					; if not, then exit.
.9f2e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9f30	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f33	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9f36	09 80		ora #$80			ora 	#NSBIsNegative
.9f38	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f3b					_DRFExit2:
.9f3b	7a		ply				ply
.9f3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9f3d					EncodeNumberStart:
.9f3d	38		sec				sec
.9f3e	80 01		bra $9f41			bra 	EncodeNumberContinue+1
.9f40					EncodeNumberContinue:
.9f40	18		clc				clc
.9f41					EncodeNumber:
.9f41	08		php				php 								; save reset.
.9f42	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9f44	f0 12		beq $9f58			beq 	_ENIsOkay
.9f46	c9 30		cmp #$30			cmp 	#"0"
.9f48	90 04		bcc $9f4e			bcc 	_ENBadNumber
.9f4a	c9 3a		cmp #$3a			cmp 	#"9"+1
.9f4c	90 0a		bcc $9f58			bcc 	_ENIsOkay
.9f4e					_ENBadNumber:
.9f4e	28		plp				plp 								; throw saved reset
.9f4f	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9f52	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f54	f0 7e		beq $9fd4			beq 	_ENConstructFinal
.9f56					_ENFail:
.9f56	18		clc				clc 								; not allowed
.9f57	60		rts				rts
.9f58					_ENIsOkay:
.9f58	28		plp				plp 								; are we restarting
.9f59	90 15		bcc $9f70			bcc 	_ENNoRestart
.9f5b					_ENStartEncode:
.9f5b	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9f5d	f0 0c		beq $9f6b			beq 	_ENFirstDP
.9f5f	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9f61	20 59 a5	jsr $a559			jsr 	NSMSetByte
.9f64	a9 01		lda #$01			lda 	#ESTA_Low
.9f66					_ENExitChange:
.9f66	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9f69	38		sec				sec
.9f6a	60		rts				rts
.9f6b					_ENFirstDP:
.9f6b	20 57 a5	jsr $a557			jsr 	NSMSetZero 					; clear integer part
.9f6e	80 3f		bra $9faf			bra 	_ESTASwitchFloat			; go straight to float and exi
.9f70					_ENNoRestart:
.9f70	48		pha				pha 								; save on stack.
.9f71	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9f74	c9 01		cmp #$01			cmp 	#ESTA_Low
.9f76	f0 09		beq $9f81			beq  	_ESTALowState
.9f78	c9 02		cmp #$02			cmp 	#ESTA_High
.9f7a	f0 29		beq $9fa5			beq 	_ESTAHighState
.9f7c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f7e	f0 3b		beq $9fbb			beq 	_ESTADecimalState
>9f80	db						.byte 	$DB 						; causes a break in the emulator
.9f81					_ESTALowState:
.9f81	68		pla				pla 								; get value back
.9f82	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9f84	f0 29		beq $9faf			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f86	29 0f		and #$0f			and 	#15 						; make digit
.9f88	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9f8b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9f8e	0a		asl a				asl 	a
.9f8f	0a		asl a				asl 	a
.9f90	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f93	0a		asl a				asl 	a
.9f94	6d 86 04	adc $0486			adc 	DigitTemp
.9f97	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f9a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f9c	90 05		bcc $9fa3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f9e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9fa0	8d 85 04	sta $0485			sta 	EncodeState
.9fa3					_ESTANoSwitch:
.9fa3	38		sec				sec
.9fa4	60		rts				rts
.9fa5					_ESTAHighState:
.9fa5	68		pla				pla 								; get value back
.9fa6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9fa8	f0 05		beq $9faf			beq 	_ESTASwitchFloat
.9faa	20 0e a0	jsr $a00e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9fad	38		sec				sec
.9fae	60		rts				rts
.9faf					_ESTASwitchFloat:
.9faf	9c 87 04	stz $0487			stz 	DecimalCount
.9fb2	e8		inx				inx 								; zero the decimal additive.
.9fb3	20 57 a5	jsr $a557			jsr 	NSMSetZero
.9fb6	ca		dex				dex
.9fb7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9fb9	80 ab		bra $9f66			bra 	_ENExitChange
.9fbb					_ESTADecimalState:
.9fbb	68		pla				pla 								; digit.
.9fbc	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9fbe	f0 96		beq $9f56			beq 	_ENFail
.9fc0	e8		inx				inx 								; put digit into fractional part of X+1
.9fc1	20 0e a0	jsr $a00e			jsr 	ESTAShiftDigitIntoMantissa
.9fc4	ca		dex				dex
.9fc5	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9fc8	ad 87 04	lda $0487			lda 	DecimalCount
.9fcb	c9 0b		cmp #$0b			cmp 	#11
.9fcd	f0 02		beq $9fd1			beq 	_ESTADSFail
.9fcf	38		sec				sec
.9fd0	60		rts				rts
.9fd1					_ESTADSFail:
.9fd1	4c 6a b3	jmp $b36a			jmp 	RangeError
.9fd4					_ENConstructFinal:
.9fd4	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9fd7	f0 33		beq $a00c			beq 	_ENCFExit 					; no decimals
.9fd9	5a		phy				phy
.9fda	0a		asl a				asl 	a 							; x 4 and CLC
.9fdb	0a		asl a				asl 	a
.9fdc	6d 87 04	adc $0487			adc 	DecimalCount
.9fdf	a8		tay				tay
.9fe0	b9 29 b3	lda $b329,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9fe3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9fe6	b9 2a b3	lda $b32a,y			lda 	DecimalScalarTable-5+1,y
.9fe9	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9fec	b9 2b b3	lda $b32b,y			lda 	DecimalScalarTable-5+2,y
.9fef	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9ff2	b9 2c b3	lda $b32c,y			lda 	DecimalScalarTable-5+3,y
.9ff5	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ff8	b9 2d b3	lda $b32d,y			lda 	DecimalScalarTable-5+4,y
.9ffb	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ffe	a9 08		lda #$08			lda 	#NSTFloat
.a000	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a003	7a		ply				ply
.a004	e8		inx				inx 								; multiply decimal const by decimal scalar
.a005	20 b1 b0	jsr $b0b1			jsr 	FloatMultiply
.a008	ca		dex				dex
.a009	20 46 af	jsr $af46			jsr 	FloatAdd 					; add to integer part.
.a00c					_ENCFExit:
.a00c	18		clc				clc 								; reject the digit.
.a00d	60		rts				rts
.a00e					ESTAShiftDigitIntoMantissa:
.a00e	29 0f		and #$0f			and 	#15 						; save digit
.a010	48		pha				pha
.a011	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a014	48		pha				pha
.a015	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a018	48		pha				pha
.a019	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a01c	48		pha				pha
.a01d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a020	48		pha				pha
.a021	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; x 2
.a024	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; x 4
.a027	18		clc				clc 								; pop mantissa and add
.a028	68		pla				pla
.a029	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a02c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a02f	68		pla				pla
.a030	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a033	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a036	68		pla				pla
.a037	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a03a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a03d	68		pla				pla
.a03e	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a041	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a044	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; x 10
.a047	68		pla				pla 								; add digit
.a048	18		clc				clc
.a049	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a04c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a04f	90 0d		bcc $a05e			bcc 	_ESTASDExit
.a051	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a054	d0 08		bne $a05e			bne 	_ESTASDExit
.a056	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a059	d0 03		bne $a05e			bne 	_ESTASDExit
.a05b	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a05e					_ESTASDExit:
.a05e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a05f					EvaluateTerm:
.a05f	b1 30		lda ($30),y			lda 	(codePtr),y
.a061	30 18		bmi $a07b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a063	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a065	b0 6f		bcs $a0d6			bcs 	_ETVariable
.a067	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a069	90 6e		bcc $a0d9			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a06b	c9 3a		cmp #$3a			cmp 	#'9'+1
.a06d	b0 6a		bcs $a0d9			bcs 	_ETPuncUnary
.a06f	20 3d 9f	jsr $9f3d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a072					_ETNumber:
.a072	c8		iny				iny 								; keep encoding until we have the numbers
.a073	b1 30		lda ($30),y			lda 	(codePtr),y
.a075	20 40 9f	jsr $9f40			jsr 	EncodeNumberContinue
.a078	b0 f8		bcs $a072			bcs 	_ETNumber 					; go back if accepted.
.a07a	60		rts				rts
.a07b					_ETCheckUnary:
.a07b	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a07d	f0 41		beq $a0c0			beq 	_ETString
.a07f	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a081	f0 12		beq $a095			beq 	_ETHexConstant
.a083	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a085	90 0b		bcc $a092			bcc 	_ETSyntaxError
.a087	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1
.a089	b0 07		bcs $a092			bcs 	_ETSyntaxError
.a08b	da		phx				phx 								; push X on the stack
.a08c	0a		asl a				asl 	a 							; put vector x 2 into X
.a08d	aa		tax				tax
.a08e	c8		iny				iny 								; consume unary function token
.a08f	7c 00 96	jmp ($9600,x)			jmp 	(VectorSet0,x) 				; and do it.
.a092					_ETSyntaxError:
.a092	4c 65 b3	jmp $b365			jmp 	SyntaxError
.a095					_ETHexConstant:
.a095	c8		iny				iny 								; skip #
.a096	c8		iny				iny 								; skip count
.a097	20 57 a5	jsr $a557			jsr 	NSMSetZero 					; clear result
.a09a					_ETHLoop:
.a09a	b1 30		lda ($30),y			lda 	(codePtr),y
.a09c	c8		iny				iny 								; and consume
.a09d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a09f	f0 1e		beq $a0bf			beq 	_ETHExit
.a0a1	48		pha				pha 								; save on stack.
.a0a2	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; x 2
.a0a5	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; x 4
.a0a8	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; x 8
.a0ab	20 6c a5	jsr $a56c			jsr 	NSMShiftLeft 				; x 16
.a0ae	68		pla				pla 								; ASCII
.a0af	c9 41		cmp #$41			cmp 	#'A'
.a0b1	90 02		bcc $a0b5			bcc 	_ETHNotChar
.a0b3	e9 07		sbc #$07			sbc 	#7
.a0b5					_ETHNotChar:
.a0b5	29 0f		and #$0f			and 	#15 						; digit now
.a0b7	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a0ba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0bd	80 db		bra $a09a			bra 	_ETHLoop 					; go round.
.a0bf					_ETHExit:
.a0bf	60		rts				rts
.a0c0					_ETString:
.a0c0	c8		iny				iny 								; look at length
.a0c1	b1 30		lda ($30),y			lda 	(codePtr),y
.a0c3	48		pha				pha
.a0c4	c8		iny				iny 								; first character
.a0c5	20 a1 a5	jsr $a5a1			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a0c8	68		pla				pla 								; restore count and save
.a0c9	85 36		sta $36				sta 	zTemp0
.a0cb	98		tya				tya 								; add length to Y to skip it.
.a0cc	18		clc				clc
.a0cd	65 36		adc $36				adc 	zTemp0
.a0cf	a8		tay				tay
.a0d0	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a0d2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0d5	60		rts				rts
.a0d6					_ETVariable:
.a0d6	4c 30 a1	jmp $a130			jmp 	VariableHandler
.a0d9					_ETPuncUnary:
.a0d9	c8		iny				iny 								; consume the unary character
.a0da	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a0dc	f0 2d		beq $a10b			beq 	_ETUnaryNegate
.a0de	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a0e0	f0 39		beq $a11b			beq 	_ETDereference
.a0e2	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a0e4	f0 43		beq $a129			beq 	_ETParenthesis
.a0e6	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a0e8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a0ea	f0 06		beq $a0f2			beq 	_ETIndirection
.a0ec	e6 36		inc $36				inc 	zTemp0
.a0ee	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a0f0	d0 a0		bne $a092			bne 	_ETSyntaxError
.a0f2					_ETIndirection:
.a0f2	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a0f4	1a		inc a				inc 	a
.a0f5	48		pha				pha
.a0f6	20 5f a0	jsr $a05f			jsr 	EvaluateTerm				; evaluate the term
.a0f9	20 a3 9e	jsr $9ea3			jsr 	Dereference 				; dereference it.
.a0fc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a0ff	d0 07		bne $a108			bne 	_ETTypeMismatch
.a101	68		pla				pla 								; indirection 1-2
.a102	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a104	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a107	60		rts				rts
.a108					_ETTypeMismatch:
.a108	4c 6f b3	jmp $b36f			jmp 	TypeError
.a10b					_ETUnaryNegate:
.a10b	20 5f a0	jsr $a05f			jsr 	EvaluateTerm				; evaluate the term
.a10e	20 a3 9e	jsr $9ea3			jsr 	Dereference 				; dereference it.
.a111	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a114	29 10		and #$10			and 	#NSTString
.a116	d0 f0		bne $a108			bne 	_ETTypeMismatch
.a118	4c 03 a5	jmp $a503			jmp 	NSMNegate  					; just toggles the sign bit.
.a11b					_ETDereference:
.a11b	20 5f a0	jsr $a05f			jsr 	EvaluateTerm				; evaluate the term
.a11e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a121	29 20		and #$20			and 	#NSBIsReference
.a123	f0 e3		beq $a108			beq 	_ETTypeMismatch
.a125	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a128	60		rts				rts
.a129					_ETParenthesis:
.a129	20 8e 9d	jsr $9d8e			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a12c	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket 			; check for )
.a12f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a130					VariableHandler:
.a130	b1 30		lda ($30),y			lda 	(codePtr),y
.a132	18		clc				clc
.a133	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a135	85 37		sta $37				sta 	zTemp0+1
.a137	c8		iny				iny
.a138	b1 30		lda ($30),y			lda 	(codePtr),y
.a13a	85 36		sta $36				sta 	zTemp0
.a13c	c8		iny				iny
.a13d	18		clc				clc									; copy variable address+3 to mantissa
.a13e	69 03		adc #$03			adc 	#3
.a140	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a143	a5 37		lda $37				lda 	zTemp0+1
.a145	69 00		adc #$00			adc 	#0
.a147	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a14a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a14d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a150	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a153	5a		phy				phy
.a154	a0 02		ldy #$02			ldy 	#2 							; read type
.a156	b1 36		lda ($36),y			lda 	(zTemp0),y
.a158	7a		ply				ply
.a159	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a15b	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a15d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a160	29 04		and #$04			and 	#NSBIsArray
.a162	d0 01		bne $a165			bne 	_VHArray
.a164	60		rts				rts
.a165					_VHArray:
.a165	e8		inx				inx
.a166	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a169	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a16b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a16e	b1 30		lda ($30),y			lda 	(codePtr),y
.a170	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a172	d0 06		bne $a17a			bne 	_VHNoSecondIndex
.a174	c8		iny				iny 								; skip the comma
.a175	e8		inx				inx
.a176	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a179	ca		dex				dex
.a17a					_VHNoSecondIndex:
.a17a	ca		dex				dex 								; set X back.
.a17b	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket 			; and check the right bracket.
.a17e	5a		phy				phy 								; save position
.a17f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a182	85 3e		sta $3e				sta 	zaTemp
.a184	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a187	85 3f		sta $3f				sta 	zaTemp+1
.a189	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a18b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a18d	f0 02		beq $a191			beq 	_VHHas2Mask
.a18f	a9 ff		lda #$ff			lda 	#$FF
.a191					_VHHas2Mask:
.a191	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a194	f0 54		beq $a1ea			beq 	_VHBadIndex
.a196	0a		asl a				asl 	a 							; carry will be set if a second index
.a197	90 09		bcc $a1a2			bcc 	_VHCheckFirstIndex
.a199	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a19b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a19d	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a1a0	90 48		bcc $a1ea			bcc 	_VHBadIndex
.a1a2					_VHCheckFirstIndex:
.a1a2	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a1a4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1a6	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a1a9	90 3f		bcc $a1ea			bcc 	_VHBadIndex
.a1ab	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a1ad	64 37		stz $37				stz 	zTemp0+1
.a1af	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a1b2	30 0f		bmi $a1c3			bmi 	_VHNoMultiply
.a1b4	da		phx				phx
.a1b5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a1b8	48		pha				pha
.a1b9	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a1bb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1bd	1a		inc a				inc 	a 							; add 1 for zero base
.a1be	fa		plx				plx
.a1bf	20 01 b2	jsr $b201			jsr 	Multiply8x8 				; calculate -> Z0
.a1c2	fa		plx				plx
.a1c3					_VHNoMultiply:
.a1c3	18		clc				clc
.a1c4	a5 36		lda $36				lda 	zTemp0
.a1c6	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a1c9	85 36		sta $36				sta 	zTemp0
.a1cb	a5 37		lda $37				lda 	zTemp0+1
.a1cd	69 00		adc #$00			adc 	#0
.a1cf	85 37		sta $37				sta 	zTemp0+1
.a1d1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a1d4	20 9c 8d	jsr $8d9c			jsr 	ScaleByBaseType
.a1d7	18		clc				clc
.a1d8	b2 3e		lda ($3e)			lda 	(zaTemp)
.a1da	65 36		adc $36				adc 	zTemp0
.a1dc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1df	a0 01		ldy #$01			ldy 	#1
.a1e1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1e3	65 37		adc $37				adc 	zTemp0+1
.a1e5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1e8	7a		ply				ply 								; restore position
.a1e9	60		rts				rts
.a1ea					_VHBadIndex:
.a1ea	a9 17		lda #$17		lda	#23
.a1ec	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b137					AbsUnary:
.b137	fa		plx				plx 								; restore stack pos
.b138	20 97 a4	jsr $a497			jsr 	EvaluateNumber 				; get a float or int
.b13b	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.b13e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b141	29 7f		and #$7f			and 	#$7F
.b143	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b146	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a1ef					AllocUnary:
.a1ef	fa		plx				plx 								; restore stack pos
.a1f0	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger		; get bytes required.
.a1f3	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.a1f6	da		phx				phx 								; save X/Y
.a1f7	5a		phy				phy
.a1f8	8a		txa				txa 								; copy X into Y
.a1f9	a8		tay				tay
.a1fa	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a1fd	aa		tax				tax
.a1fe	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a201	20 0e a2	jsr $a20e			jsr 	AllocateXABytes 			; allocate memory
.a204	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a207	8a		txa				txa
.a208	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a20b	7a		ply				ply
.a20c	fa		plx				plx
.a20d	60		rts				rts
.a20e					AllocateXABytes:
.a20e	5a		phy				phy
.a20f	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a212	84 36		sty $36				sty 	zTemp0
.a214	5a		phy				phy
.a215	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a218	84 37		sty $37				sty 	zTemp0+1
.a21a	5a		phy				phy
.a21b	18		clc				clc 								; add to low memory pointer
.a21c	6d 8c 04	adc $048c			adc 	lowMemPtr
.a21f	8d 8c 04	sta $048c			sta 	lowMemPtr
.a222	8a		txa				txa
.a223	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a226	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a229	b0 2f		bcs $a25a			bcs 	CISSMemory
.a22b	20 4c a2	jsr $a24c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a22e					_ClearMemory:
.a22e	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a231	c5 36		cmp $36				cmp 	zTemp0
.a233	d0 07		bne $a23c			bne 	_CMClearNext
.a235	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a238	c5 37		cmp $37				cmp 	zTemp0+1
.a23a	f0 0c		beq $a248			beq 	_CMExit
.a23c					_CMClearNext:
.a23c	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a23e	92 36		sta ($36)			sta 	(zTemp0)
.a240	e6 36		inc $36				inc 	zTemp0
.a242	d0 ea		bne $a22e			bne 	_ClearMemory
.a244	e6 37		inc $37				inc		zTemp0+1
.a246	80 e6		bra $a22e			bra 	_ClearMemory
.a248					_CMExit:
.a248	fa		plx				plx
.a249	68		pla				pla
.a24a	7a		ply				ply
.a24b	60		rts				rts
.a24c					CheckIdentifierStringSpace:
.a24c	48		pha				pha
.a24d	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a250	18		clc				clc
.a251	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a253	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a256	b0 02		bcs $a25a			bcs 	CISSMemory
.a258	68		pla				pla
.a259	60		rts				rts
.a25a					CISSMemory:
.a25a	a9 06		lda #$06		lda	#6
.a25c	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b147					AscUnary:
.b147	fa		plx				plx 								; restore stack pos
.b148	20 a2 a4	jsr $a4a2			jsr 	EvaluateString 				; get a string
.b14b	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b14d	20 59 a5	jsr $a559			jsr 	NSMSetByte
.b150	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.b153	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b154					FracUnary:
.b154	fa		plx				plx 								; restore stack pos
.b155	20 97 a4	jsr $a497			jsr 	EvaluateNumber 				; get a float or int
.b158	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.b15b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b15e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b160	f0 04		beq $b166			beq 	_IUZero
.b162	20 24 b0	jsr $b024			jsr 	FloatFractionalPart
.b165	60		rts				rts
.b166					_IUZero:
.b166	20 57 a5	jsr $a557			jsr 	NSMSetZero
.b169	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b16a					IntUnary:
.b16a	fa		plx				plx 								; restore stack pos
.b16b	20 97 a4	jsr $a497			jsr 	EvaluateNumber 				; get a float or int
.b16e	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.b171	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b174	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b176	f0 03		beq $b17b			beq 	_IUExit
.b178	20 87 b0	jsr $b087			jsr 	FloatIntegerPart
.b17b					_IUExit:
.b17b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b17c					LenUnary:
.b17c	fa		plx				plx 								; restore stack pos
.b17d	20 a2 a4	jsr $a4a2			jsr 	EvaluateString 				; get a string
.b180	5a		phy				phy
.b181	a0 00		ldy #$00			ldy 	#0 							; find length
.b183					_LenFind:
.b183	b1 36		lda ($36),y			lda 	(zTemp0),y
.b185	f0 06		beq $b18d			beq 	_LenExit
.b187	c8		iny				iny
.b188	d0 f9		bne $b183			bne 	_LenFind
.b18a	4c 6a b3	jmp $b36a			jmp 	RangeError 					; string > 255
.b18d					_LenExit:
.b18d	98		tya				tya
.b18e	20 59 a5	jsr $a559			jsr 	NSMSetByte
.b191	7a		ply				ply
.b192	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.b195	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a25f					Unary_Not:
.a25f	fa		plx				plx
.a260	20 ba a4	jsr $a4ba			jsr 	EvaluateInteger 			; get integer
.a263	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.a266	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; zero mantissa ?
.a269	f0 04		beq $a26f			beq 	_NotZero
.a26b	20 57 a5	jsr $a557			jsr 	NSMSetZero
.a26e	60		rts				rts
.a26f					_NotZero:
.a26f	4c f2 99	jmp $99f2			jmp 	ReturnTrue
.a272					_UNBad:
.a272	4c 74 b3	jmp $b374			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a275					Unary_Random:
.a275	fa		plx				plx
.a276	20 f4 a2	jsr $a2f4			jsr 	Random32Bit 				; get a random number
.a279	20 d9 a2	jsr $a2d9			jsr 	URCopyToMantissa  			; put in mantissa
.a27c	b1 30		lda ($30),y			lda 	(codePtr),y
.a27e	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a280	f0 08		beq $a28a			beq 	_URNoModulus
.a282	e8		inx				inx
.a283	20 cf a4	jsr $a4cf			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a286	ca		dex				dex
.a287	20 03 ae	jsr $ae03			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a28a					_URNoModulus:
.a28a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a28d	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a290	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.a293	60		rts				rts
.a294					Unary_Rnd:
.a294	fa		plx				plx
.a295	20 97 a4	jsr $a497			jsr 	EvaluateNumber 				; number to use.
.a298	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket 			; closing bracket
.a29b	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a29e	f0 2b		beq $a2cb			beq 	_URCopySeed
.a2a0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a2a3	10 23		bpl $a2c8			bpl 	_URDontSeed
.a2a5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a2a8	49 17		eor #$17			eor 	#$17
.a2aa	8d 88 04	sta $0488			sta 	RandomSeed+0
.a2ad	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2b0	49 a5		eor #$a5			eor 	#$A5
.a2b2	8d 89 04	sta $0489			sta 	RandomSeed+1
.a2b5	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a2b8	49 c2		eor #$c2			eor 	#$C2
.a2ba	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a2bd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a2c0	49 9d		eor #$9d			eor 	#$9D
.a2c2	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a2c5	20 f4 a2	jsr $a2f4			jsr 	Random32Bit
.a2c8					_URDontSeed:
.a2c8	20 f4 a2	jsr $a2f4			jsr 	Random32Bit 				; generate a number.
.a2cb					_URCopySeed:
.a2cb	20 d9 a2	jsr $a2d9			jsr 	URCopyToMantissa 			; copy into mantissa
.a2ce	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a2d0	8d 28 04	sta $0428			sta 	NSExponent
.a2d3	a9 08		lda #$08			lda 	#NSTFloat
.a2d5	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a2d8	60		rts				rts
.a2d9					URCopyToMantissa:
.a2d9	ad 88 04	lda $0488			lda 	RandomSeed+0
.a2dc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2df	ad 89 04	lda $0489			lda 	RandomSeed+1
.a2e2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2e5	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a2e8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a2eb	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a2ee	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a2f0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a2f3	60		rts				rts
.a2f4					Random32Bit:
.a2f4	5a		phy				phy
.a2f5	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a2f7	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a2fa	d0 03		bne $a2ff			bne 	_Random1
.a2fc	a8		tay				tay 								; if so do it 256 times
.a2fd	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a2ff					_Random1:
.a2ff	0a		asl a				asl 	a 							; LSFR RNG
.a300	2e 89 04	rol $0489			rol 	RandomSeed+1
.a303	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a306	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a309	90 02		bcc $a30d			bcc 	_Random2
.a30b	49 c5		eor #$c5			eor 	#$C5
.a30d					_Random2:
.a30d	88		dey				dey
.a30e	d0 ef		bne $a2ff			bne 	_Random1
.a310	8d 88 04	sta $0488			sta 	RandomSeed+0
.a313	7a		ply				ply
.a314	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b196					SgnUnary:
.b196	fa		plx				plx 								; restore stack pos
.b197	20 97 a4	jsr $a497			jsr 	EvaluateNumber 				; get a float or int
.b19a	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.b19d	20 87 a5	jsr $a587			jsr 	NSMIsZero 					; if zero
.b1a0	f0 10		beq $b1b2			beq 	_SGZero  					; return Int Zero
.b1a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b1a5	48		pha				pha
.b1a6	a9 01		lda #$01			lda 	#1 							; set to 1
.b1a8	20 59 a5	jsr $a559			jsr 	NSMSetByte
.b1ab	68		pla				pla
.b1ac	29 80		and #$80			and		#$80 						; copy the sign byte out
.b1ae	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1b1	60		rts				rts
.b1b2	20 57 a5	jsr $a557	_SGZero:jsr 	NSMSetZero
.b1b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b1b6					ValUnary:
.b1b6	fa		plx				plx 								; restore stack pos
.b1b7	20 cc b1	jsr $b1cc			jsr 	ValMainCode 				; do the main val() code
.b1ba	b0 01		bcs $b1bd			bcs 	_VUError 					; couldn't convert
.b1bc	60		rts				rts
.b1bd					_VUError:
.b1bd	4c 6f b3	jmp $b36f			jmp 	TypeError
.b1c0					IsValUnary:
.b1c0	fa		plx				plx 								; restore stack pos
.b1c1	20 cc b1	jsr $b1cc			jsr 	ValMainCode 				; do the main val() code
.b1c4	b0 03		bcs $b1c9			bcs 	_VUBad
.b1c6	4c f2 99	jmp $99f2			jmp 	ReturnTrue
.b1c9					_VUBad:
.b1c9	4c fe 99	jmp $99fe			jmp 	ReturnFalse
.b1cc					ValMainCode:
.b1cc	20 a2 a4	jsr $a4a2			jsr 	EvaluateString 				; get a string
.b1cf	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket 			; check right bracket present
.b1d2	5a		phy				phy
.b1d3	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b1d5	f0 17		beq $b1ee			beq 	_VMCFail2
.b1d7	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b1d9	48		pha				pha 								; save first character
.b1da	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b1dc	d0 01		bne $b1df			bne 	_VMCStart
.b1de	c8		iny				iny 								; skip over -
.b1df					_VMCStart:
.b1df	38		sec				sec 								; initialise first time round.
.b1e0					_VMCNext:
.b1e0	c8		iny				iny 								; pre-increment
.b1e1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b1e3	f0 0c		beq $b1f1			beq 	_VMCSuccess 				; successful.
.b1e5	20 41 9f	jsr $9f41			jsr 	EncodeNumber 				; send it to the number-builder
.b1e8	90 03		bcc $b1ed			bcc 	_VMCFail 					; if failed, give up.
.b1ea	18		clc				clc 								; next time round, countinue
.b1eb	80 f3		bra $b1e0			bra 	_VMCNext
.b1ed					_VMCFail:
.b1ed	68		pla				pla
.b1ee					_VMCFail2:
.b1ee	7a		ply				ply
.b1ef	38		sec				sec
.b1f0	60		rts				rts
.b1f1					_VMCSuccess:
.b1f1	a9 00		lda #$00			lda 	#0 							; construct final
.b1f3	20 41 9f	jsr $9f41			jsr 	EncodeNumber
.b1f6	68		pla				pla
.b1f7	c9 2d		cmp #$2d			cmp 	#"-"
.b1f9	d0 03		bne $b1fe			bne 	_VMCNotNegative
.b1fb	20 03 a5	jsr $a503			jsr		NSMNegate
.b1fe					_VMCNotNegative:
.b1fe	7a		ply				ply
.b1ff	18		clc				clc
.b200	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a315					ChrUnary:
.a315	fa		plx				plx 								; restore stack pos
.a316	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger			; get value
.a319	48		pha				pha
.a31a	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.a31d	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a31f	20 9e b6	jsr $b69e			jsr 	StringTempAllocate
.a322	68		pla				pla 								; write number to it
.a323	20 dc b6	jsr $b6dc			jsr 	StringTempWrite
.a326	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a327					SpcUnary:
.a327	fa		plx				plx 								; restore stack pos
.a328	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger			; get value
.a32b	5a		phy				phy
.a32c	48		pha				pha 								; save count
.a32d	20 9e b6	jsr $b69e			jsr 	StringTempAllocate
.a330	7a		ply				ply 								; to do count in Y
.a331					_SpcLoop:
.a331	c0 00		cpy #$00			cpy 	#0
.a333	f0 08		beq $a33d			beq 	_SpcExit
.a335	a9 20		lda #$20			lda 	#32
.a337	20 dc b6	jsr $b6dc			jsr 	StringTempWrite
.a33a	88		dey				dey
.a33b	80 f4		bra $a331			bra 	_SPCLoop
.a33d					_SpcExit:
.a33d	7a		ply				ply
.a33e	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket
.a341	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a342					Unary_Str:
.a342	fa		plx				plx
.a343	20 97 a4	jsr $a497			jsr 	EvaluateNumber  			; get number
.a346	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket 			; closing bracket
.a349	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a34b	20 64 a3	jsr $a364			jsr 	ConvertNumberToString 		; do the conversion.
.a34e	a9 21		lda #$21			lda		#33 						; create buffer
.a350	20 9e b6	jsr $b69e			jsr 	StringTempAllocate 			; allocate memory
.a353	da		phx				phx
.a354	a2 00		ldx #$00			ldx 	#0
.a356					_USCopy:
.a356	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a359	20 dc b6	jsr $b6dc			jsr 	StringTempWrite
.a35c	e8		inx				inx
.a35d	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a360	d0 f4		bne $a356			bne 	_USCopy
.a362	fa		plx				plx
.a363	60		rts				rts
.a364					ConvertNumberToString:
.a364	5a		phy				phy 								; save code position
.a365	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a368	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a36b	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a36e	10 0a		bpl $a37a			bpl 	_CNTSNotNegative
.a370	29 7f		and #$7f			and 	#$7F 						; make +ve
.a372	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a375	a9 2d		lda #$2d			lda 	#"-"
.a377	20 e0 a3	jsr $a3e0			jsr 	WriteDecimalBuffer
.a37a					_CNTSNotNegative:
.a37a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a37d	f0 15		beq $a394			beq 	_CNTSNotFloat
.a37f	e8		inx				inx 								; round up
.a380	a9 01		lda #$01			lda 	#1
.a382	20 59 a5	jsr $a559			jsr 	NSMSetByte
.a385	ca		dex				dex
.a386	bd 28 04	lda $0428,x			lda		NSExponent,x
.a389	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a38c	a9 08		lda #$08			lda 	#NSTFloat
.a38e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a391	20 46 af	jsr $af46			jsr 	FloatAdd
.a394					_CNTSNotFloat:
.a394	20 c2 a3	jsr $a3c2			jsr 	MakePlusTwoString
.a397	20 24 b0	jsr $b024			jsr 	FloatFractionalPart 		; get the fractional part
.a39a	20 e8 b0	jsr $b0e8			jsr 	NSNormalise					; normalise , exit if zero
.a39d	f0 21		beq $a3c0			beq 	_CNTSExit
.a39f	a9 2e		lda #$2e			lda 	#"."
.a3a1	20 e0 a3	jsr $a3e0			jsr 	WriteDecimalBuffer 			; write decimal place
.a3a4					_CNTSDecimal:
.a3a4	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a3a7	30 17		bmi $a3c0			bmi 	_CNTSExit
.a3a9	e8		inx				inx 								; x 10.0
.a3aa	a9 0a		lda #$0a			lda 	#10
.a3ac	20 59 a5	jsr $a559			jsr 	NSMSetByte
.a3af	a9 08		lda #$08			lda 	#NSTFloat
.a3b1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3b4	ca		dex				dex
.a3b5	20 b1 b0	jsr $b0b1			jsr 	FloatMultiply
.a3b8	20 c2 a3	jsr $a3c2			jsr 	MakePlusTwoString
.a3bb	20 24 b0	jsr $b024			jsr 	FloatFractionalPart 		; get the fractional part
.a3be	80 e4		bra $a3a4			bra 	_CNTSDecimal 				; keep going.
.a3c0					_CNTSExit:
.a3c0	7a		ply				ply
.a3c1	60		rts				rts
.a3c2					MakePlusTwoString:
.a3c2	da		phx				phx
.a3c3	20 2e a5	jsr $a52e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a3c6	e8		inx				inx 								; access it
.a3c7	e8		inx				inx
.a3c8	20 87 b0	jsr $b087			jsr 	FloatIntegerPart 			; make it an integer
.a3cb	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a3cd	20 f0 ae	jsr $aef0			jsr 	ConvertInt32
.a3d0	a2 00		ldx #$00			ldx	 	#0
.a3d2					_MPTSCopy:
.a3d2	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a3d5	20 e0 a3	jsr $a3e0			jsr 	WriteDecimalBuffer
.a3d8	e8		inx				inx
.a3d9	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a3dc	d0 f4		bne $a3d2			bne 	_MPTSCopy
.a3de	fa		plx				plx
.a3df	60		rts				rts
.a3e0					WriteDecimalBuffer:
.a3e0	da		phx				phx
.a3e1	ae 95 04	ldx $0495			ldx 	dbOffset
.a3e4	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a3e7	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a3ea	ee 95 04	inc $0495			inc 	dbOffset
.a3ed	fa		plx				plx
.a3ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a3ef					Unary_Left:
.a3ef	fa		plx				plx
.a3f0	18		clc				clc 								; only one parameter
.a3f1	20 66 a4	jsr $a466			jsr 	SubstringInitial 			; set up.
.a3f4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a3f7	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a3fa	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a3fd	80 2c		bra $a42b			bra 	SubstringMain
.a3ff					Unary_Right:
.a3ff	fa		plx				plx
.a400	18		clc				clc 								; only one parameter
.a401	20 66 a4	jsr $a466			jsr 	SubstringInitial 			; set up.
.a404	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a407	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a40a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a40d	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a410	b0 02		bcs $a414			bcs 	_URNotUnderflow
.a412	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a414					_URNotUnderFlow:
.a414	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a417	80 12		bra $a42b			bra 	SubStringMain
.a419					Unary_Mid:
.a419	fa		plx				plx
.a41a	38		sec				sec 								; two parameters
.a41b	20 66 a4	jsr $a466			jsr 	SubstringInitial 			; set up.
.a41e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a421	f0 05		beq $a428			beq 	_UMError
.a423	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a426	80 03		bra $a42b			bra 	SubStringMain
.a428					_UMError:
.a428	4c 74 b3	jmp $b374			jmp 	ArgumentError
.a42b					SubStringMain:
.a42b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a42e	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a431	b0 2d		bcs $a460			bcs 	_SSMNull 					; if so, return an empty string.
.a433	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a436	f0 28		beq $a460			beq 	_SSMNull 					; return empty string.
.a438	18		clc				clc 								; add the offset +1 to the address and
.a439	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a43c	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a43f	85 36		sta $36				sta 	zTemp0
.a441	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a444	69 00		adc #$00			adc 	#0
.a446	85 37		sta $37				sta 	zTemp0+1
.a448					_SSMNoCarry:
.a448	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a44b	20 9e b6	jsr $b69e			jsr 	StringTempAllocate 			; allocate that many characters
.a44e	5a		phy				phy 								; save Y
.a44f	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a451					_SSMCopy:
.a451	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a453	f0 09		beq $a45e			beq 	_SSMEString 				; no more to copy
.a455	20 dc b6	jsr $b6dc			jsr 	StringTempWrite 			; and write it out.
.a458	c8		iny				iny
.a459	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a45c	d0 f3		bne $a451			bne 	_SSMCopy
.a45e					_SSMEString:
.a45e	7a		ply				ply
.a45f					_SSMExit:
.a45f	60		rts				rts
.a460					_SSMNull:
.a460	a9 00		lda #$00			lda 	#0
.a462	20 9e b6	jsr $b69e			jsr 	StringTempAllocate
.a465	60		rts				rts
.a466					SubstringInitial:
.a466	da		phx				phx 								; save initial stack position
.a467	08		php				php 								; save carry on stack indicating 2 parameters
.a468	20 a2 a4	jsr $a4a2			jsr 	EvaluateString 				; get a string
.a46b	5a		phy				phy 								; calculate length to exponent.
.a46c	a0 ff		ldy #$ff			ldy 	#$FF
.a46e					_SIFindLength:
.a46e	c8		iny				iny
.a46f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a471	d0 fb		bne $a46e			bne 	_SIFindLength
.a473	98		tya				tya
.a474	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a477	7a		ply				ply
.a478	e8		inx				inx
.a479	20 87 ad	jsr $ad87			jsr 	CheckComma 					; comma next
.a47c	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; get next parameter
.a47f	28		plp				plp 								; is it the last parameter ?
.a480	90 07		bcc $a489			bcc 	_SSIExit 					; if so, exit.
.a482	e8		inx				inx
.a483	20 87 ad	jsr $ad87			jsr 	CheckComma 					; comma next
.a486	20 ef a4	jsr $a4ef			jsr 	Evaluate8BitInteger 		; get last parameter
.a489					_SSIExit:
.a489	fa		plx				plx
.a48a	20 7f ad	jsr $ad7f			jsr 	CheckRightBracket 			; check closing bracket
.a48d	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a48e					EvaluateValue:
.a48e	48		pha				pha
.a48f	20 8e 9d	jsr $9d8e			jsr		EvaluateExpression 			; expression
.a492	20 a3 9e	jsr $9ea3			jsr 	Dereference					; derefernce it
.a495	68		pla				pla
.a496	60		rts				rts
.a497					EvaluateNumber:
.a497	20 8e a4	jsr $a48e			jsr 	EvaluateValue 				; get a value
.a49a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a49d	29 10		and #$10			and 	#NSBIsString
.a49f	d0 16		bne $a4b7			bne 	HelperTypeError
.a4a1	60		rts				rts
.a4a2					EvaluateString:
.a4a2	20 8e a4	jsr $a48e			jsr 	EvaluateValue 				; get a value
.a4a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a4a8	29 10		and #$10			and 	#NSBIsString
.a4aa	f0 0b		beq $a4b7			beq 	HelperTypeError
.a4ac					CopyAddressToTemp0:
.a4ac	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a4af	85 36		sta $36				sta 	zTemp0
.a4b1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4b4	85 37		sta $37				sta 	zTemp0+1
.a4b6	60		rts				rts
.a4b7					HelperTypeError:
.a4b7	4c 6f b3	jmp $b36f			jmp 	TypeError
.a4ba					EvaluateInteger:
.a4ba	20 97 a4	jsr $a497			jsr 	EvaluateNumber
.a4bd	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a4c0	d0 0a		bne $a4cc			bne 	HelperValueError 			; if not, it's a float.
.a4c2	60		rts				rts
.a4c3					EvaluateUnsignedInteger:
.a4c3	20 ba a4	jsr $a4ba			jsr 	EvaluateInteger 			; check integer is +ve
.a4c6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4c9	30 01		bmi $a4cc			bmi 	HelperValueError
.a4cb	60		rts				rts
.a4cc					HelperValueError:
.a4cc	4c 74 b3	jmp $b374			jmp 	ArgumentError
.a4cf					Evaluate16BitInteger:
.a4cf	20 c3 a4	jsr $a4c3			jsr	 	EvaluateUnsignedInteger		; get integer
.a4d2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a4d5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4d8	d0 f2		bne $a4cc			bne 	HelperValueError
.a4da	60		rts				rts
.a4db					Evaluate16BitIntegerSigned:
.a4db	20 ba a4	jsr $a4ba			jsr	 	EvaluateInteger				; get integer
.a4de	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a4e1	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4e4	d0 e6		bne $a4cc			bne 	HelperValueError
.a4e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a4e9	10 03		bpl $a4ee			bpl 	_EISNotSigned
.a4eb	20 0c a5	jsr $a50c			jsr 	NSMNegateMantissa
.a4ee					_EISNotSigned:
.a4ee	60		rts				rts
.a4ef					Evaluate8BitInteger:
.a4ef	20 c3 a4	jsr $a4c3			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a4f2	d0 d8		bne $a4cc			bne 	HelperValueError
.a4f4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a4f7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4fa	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a4fd	d0 cd		bne $a4cc			bne 	HelperValueError
.a4ff	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a502	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b201					Multiply8x8:
.b201	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b202	85 36		sta $36			  	sta 	zTemp0
.b204	86 37		stx $37				stx 	zTemp0+1
.b206	a9 00		lda #$00			lda 	#0
.b208	a2 08		ldx #$08			ldx 	#8
.b20a					_M88Loop:
.b20a	90 03		bcc $b20f			bcc 	_M88NoAdd
.b20c	18		clc				clc
.b20d	65 37		adc $37				adc 	zTemp0+1
.b20f					_M88NoAdd:
.b20f	6a		ror a				ror 	a
.b210	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b212	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b213	d0 f5		bne $b20a			bne 	_M88Loop
.b215	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b217	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a503					NSMNegate:
.a503	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a506	49 80		eor #$80			eor 	#NSBIsNegative
.a508	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a50b	60		rts				rts
.a50c					NSMNegateMantissa:
.a50c	38		sec				sec
.a50d	a9 00		lda #$00			lda 	#0
.a50f	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a512	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a515	a9 00		lda #$00			lda 	#0
.a517	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a51a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a51d	a9 00		lda #$00			lda 	#0
.a51f	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a522	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a525	a9 00		lda #$00			lda 	#0
.a527	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a52a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a52d	60		rts				rts
.a52e					NSMShiftUpTwo:
.a52e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a531	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a534	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a537	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a53a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a53d	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a540	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a543	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a546	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a549	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a54c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a54f	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a552	60		rts				rts
.a553					NSMSetZeroMantissaOnly:
.a553	a9 00		lda #$00			lda 	#0
.a555	80 08		bra $a55f			bra 	NSMSetMantissa
.a557					NSMSetZero:
.a557	a9 00		lda #$00			lda 	#0
.a559					NSMSetByte:
.a559	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a55c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a55f					NSMSetMantissa:
.a55f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a562	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a565	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a568	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a56b	60		rts				rts
.a56c					NSMShiftLeft:
.a56c	18		clc				clc
.a56d					NSMRotateLeft:
.a56d	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a570	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a573	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a576	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a579	60		rts				rts
.a57a					NSMShiftRight:
.a57a	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a57d	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a580	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a583	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a586	60		rts				rts
.a587					NSMIsZero:
.a587	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a58a	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a58d	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a590	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a593	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b218					Assemble_ora:
.b218	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b21b	01					.byte $01
.b21c					Assemble_and:
.b21c	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b21f	21					.byte $21
.b220					Assemble_eor:
.b220	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b223	41					.byte $41
.b224					Assemble_adc:
.b224	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b227	61					.byte $61
.b228					Assemble_sta:
.b228	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b22b	81					.byte $81
.b22c					Assemble_lda:
.b22c	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b22f	a1					.byte $a1
.b230					Assemble_cmp:
.b230	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b233	c1					.byte $c1
.b234					Assemble_sbc:
.b234	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b237	e1					.byte $e1
.b238					Assemble_asl:
.b238	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b23b	02					.byte $02
>b23c	75					.byte $75
.b23d					Assemble_rol:
.b23d	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b240	22					.byte $22
>b241	75					.byte $75
.b242					Assemble_lsr:
.b242	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b245	42					.byte $42
>b246	75					.byte $75
.b247					Assemble_ror:
.b247	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b24a	62					.byte $62
>b24b	75					.byte $75
.b24c					Assemble_stx:
.b24c	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b24f	82					.byte $82
>b250	50					.byte $50
.b251					Assemble_ldx:
.b251	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b254	a2					.byte $a2
>b255	d0					.byte $d0
.b256					Assemble_dec:
.b256	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b259	c2					.byte $c2
>b25a	55					.byte $55
.b25b					Assemble_inc:
.b25b	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b25e	e2					.byte $e2
>b25f	55					.byte $55
.b260					Assemble_stz:
.b260	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b263	60					.byte $60
>b264	44					.byte $44
.b265					Assemble_bit:
.b265	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b268	20					.byte $20
>b269	55					.byte $55
.b26a					Assemble_sty:
.b26a	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b26d	80					.byte $80
>b26e	54					.byte $54
.b26f					Assemble_ldy:
.b26f	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b272	a0					.byte $a0
>b273	d5					.byte $d5
.b274					Assemble_cpy:
.b274	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b277	c0					.byte $c0
>b278	d4					.byte $d4
.b279					Assemble_cpx:
.b279	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b27c	e0					.byte $e0
>b27d	d0					.byte $d0
.b27e					Assemble_tsb:
.b27e	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b281	00					.byte $00
>b282	50					.byte $50
.b283					Assemble_trb:
.b283	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b286	10					.byte $10
>b287	50					.byte $50
.b288					Assemble_jsr:
.b288	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b28b	14					.byte $14
>b28c	10					.byte $10
.b28d					Assemble_jmp:
.b28d	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b290	40					.byte $40
>b291	10					.byte $10
.b292					Assemble_bpl:
.b292	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b295	10					.byte $10
.b296					Assemble_bmi:
.b296	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b299	30					.byte $30
.b29a					Assemble_bvc:
.b29a	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b29d	50					.byte $50
.b29e					Assemble_bvs:
.b29e	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b2a1	70					.byte $70
.b2a2					Assemble_bcc:
.b2a2	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b2a5	90					.byte $90
.b2a6					Assemble_bcs:
.b2a6	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b2a9	b0					.byte $b0
.b2aa					Assemble_bne:
.b2aa	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b2ad	d0					.byte $d0
.b2ae					Assemble_beq:
.b2ae	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b2b1	f0					.byte $f0
.b2b2					Assemble_bra:
.b2b2	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b2b5	80					.byte $80
.b2b6					Assemble_brk:
.b2b6	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2b9	00					.byte $00
.b2ba					Assemble_php:
.b2ba	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2bd	08					.byte $08
.b2be					Assemble_clc:
.b2be	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2c1	18					.byte $18
.b2c2					Assemble_plp:
.b2c2	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2c5	28					.byte $28
.b2c6					Assemble_sec:
.b2c6	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2c9	38					.byte $38
.b2ca					Assemble_rti:
.b2ca	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2cd	40					.byte $40
.b2ce					Assemble_pha:
.b2ce	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2d1	48					.byte $48
.b2d2					Assemble_cli:
.b2d2	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2d5	58					.byte $58
.b2d6					Assemble_phy:
.b2d6	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2d9	5a					.byte $5a
.b2da					Assemble_rts:
.b2da	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2dd	60					.byte $60
.b2de					Assemble_pla:
.b2de	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2e1	68					.byte $68
.b2e2					Assemble_sei:
.b2e2	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2e5	78					.byte $78
.b2e6					Assemble_ply:
.b2e6	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2e9	7a					.byte $7a
.b2ea					Assemble_dey:
.b2ea	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2ed	88					.byte $88
.b2ee					Assemble_txa:
.b2ee	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2f1	8a					.byte $8a
.b2f2					Assemble_tya:
.b2f2	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2f5	98					.byte $98
.b2f6					Assemble_txs:
.b2f6	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2f9	9a					.byte $9a
.b2fa					Assemble_tay:
.b2fa	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b2fd	a8					.byte $a8
.b2fe					Assemble_tax:
.b2fe	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b301	aa					.byte $aa
.b302					Assemble_clv:
.b302	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b305	b8					.byte $b8
.b306					Assemble_tsx:
.b306	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b309	ba					.byte $ba
.b30a					Assemble_iny:
.b30a	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b30d	c8					.byte $c8
.b30e					Assemble_dex:
.b30e	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b311	ca					.byte $ca
.b312					Assemble_cld:
.b312	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b315	d8					.byte $d8
.b316					Assemble_phx:
.b316	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b319	da					.byte $da
.b31a					Assemble_stp:
.b31a	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b31d	db					.byte $db
.b31e					Assemble_inx:
.b31e	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b321	e8					.byte $e8
.b322					Assemble_nop:
.b322	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b325	ea					.byte $ea
.b326					Assemble_sed:
.b326	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b329	f8					.byte $f8
.b32a					Assemble_plx:
.b32a	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b32d	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b32e					DecimalScalarTable:
>b32e	66 66 66 66				.dword $66666666 ; 0.1
>b332	de					.byte $de
>b333	1f 85 eb 51				.dword $51eb851f ; 0.01
>b337	db					.byte $db
>b338	4c 37 89 41				.dword $4189374c ; 0.001
>b33c	d8					.byte $d8
>b33d	ac 8b db 68				.dword $68db8bac ; 0.0001
>b341	d4					.byte $d4
>b342	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b346	d1					.byte $d1
>b347	83 de 1b 43				.dword $431bde83 ; 1e-06
>b34b	ce					.byte $ce
>b34c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b350	ca					.byte $ca
>b351	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b355	c7					.byte $c7
>b356	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b35a	c4					.byte $c4
>b35b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b35f	c0					.byte $c0
>b360	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b364	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b365					SyntaxError:
.b365	a9 02		lda #$02		lda	#2
.b367	4c 85 99	jmp $9985		jmp	ErrorHandler
.b36a					RangeError:
.b36a	a9 04		lda #$04		lda	#4
.b36c	4c 85 99	jmp $9985		jmp	ErrorHandler
.b36f					TypeError:
.b36f	a9 05		lda #$05		lda	#5
.b371	4c 85 99	jmp $9985		jmp	ErrorHandler
.b374					ArgumentError:
.b374	a9 07		lda #$07		lda	#7
.b376	4c 85 99	jmp $9985		jmp	ErrorHandler
.b379					NotDoneError:
.b379	a9 0c		lda #$0c		lda	#12
.b37b	4c 85 99	jmp $9985		jmp	ErrorHandler
.b37e					ErrorText:
>b37e	42 72 65 61 6b 00			.text	"Break",0
>b384	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b38c	72 72 6f 72 00
>b391	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b399	20 62 79 20 7a 65 72 6f 00
>b3a2	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b3aa	61 6e 67 65 00
>b3af	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b3b7	6d 61 74 63 68 00
>b3bd	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b3c5	65 6d 6f 72 79 00
>b3cb	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b3d3	61 72 67 75 6d 65 6e 74 00
>b3dc	53 74 6f 70 00				.text	"Stop",0
>b3e1	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b3e9	6f 6f 20 6c 6f 6e 67 00
>b3f1	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b3f9	6e 20 66 61 69 6c 65 64 00
>b402	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b40a	61 74 61 00
>b40e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b416	65 6e 74 65 64 00
>b41c	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b424	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b430	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b438	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b445	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b44d	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b45a	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b462	68 6f 75 74 20 57 68 69 6c 65 00
>b46d	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b475	68 6f 75 74 20 46 6f 72 00
>b47e	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b486	61 63 6b 20 66 75 6c 6c 00
>b48f	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b497	75 63 74 75 72 65 00
>b49e	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b4a6	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b4b3	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b4bb	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b4c9	41 72 72 61 79 20 73 69			.text	"Array size",0
>b4d1	7a 65 00
>b4d4	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b4dc	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b4e4	42 75 69 6c 74 20 54 68			.text "Built Thursday 13-Oct-2022. Build 1931."
>b4ec	75 72 73 64 61 79 20 31 33 2d 4f 63 74 2d 32 30
>b4fc	32 32 2e 20 42 75 69 6c 64 20 31 39 33 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b50b					EXTInitialise:
.b50b	64 01		stz $01				stz 	1 							; Access I/O
.b50d	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b510	9c 08 d0	stz $d008			stz 	$D008
.b513	9c 09 d0	stz $d009			stz 	$D009
.b516	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b518	8d 58 d6	sta $d658			sta 	$D658
.b51b	60		rts				rts
.b51c					EXTPrintCharacter:
.b51c	48		pha				pha
.b51d	da		phx				phx
.b51e	5a		phy				phy
.b51f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b522	7a		ply				ply
.b523	fa		plx				plx
.b524	68		pla				pla
.b525	60		rts				rts
.b526					EXTInputSingleCharacter:
.b526	da		phx				phx
.b527	5a		phy				phy
.b528					_EISCWait:
.b528	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b52b	c9 00		cmp #$00			cmp 	#0
.b52d	f0 f9		beq $b528			beq 	_EISCWait
.b52f	7a		ply				ply
.b530	fa		plx				plx
.b531	60		rts				rts
.b532					EXTInputLine:
.b532	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b534					_ILLoop:
.b534	da		phx				phx 								; read character in
.b535	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b538	fa		plx				plx
.b539	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b53b	f0 12		beq $b54f			beq 	_ILBackspace
.b53d	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b53f	f0 15		beq $b556			beq 	_ILExit
.b541	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b543	90 ef		bcc $b534			bcc 	_ILLoop
.b545	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b547	f0 eb		beq $b534			beq 	_ILLoop
.b549	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b54c	e8		inx				inx
.b54d	80 e5		bra $b534			bra 	_ILLoop
.b54f					_ILBackspace:
.b54f	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b551	f0 e1		beq $b534			beq 	_ILLoop
.b553	ca		dex				dex 								; back one.
.b554	80 de		bra $b534			bra 	_ILLoop
.b556					_ILExit:
.b556	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.b559	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b55c	60		rts				rts
.b55d					EXTBreakCheck:
.b55d	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b560					MemoryDeleteLine:
.b560	20 7f b5	jsr $b57f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b563	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b565	a8		tay				tay
.b566					_MDDLLoop:
.b566	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b568	92 30		sta ($30)			sta 	(codePtr)
.b56a	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b56c	c5 3a		cmp $3a				cmp 	zTemp2
.b56e	d0 07		bne $b577			bne 	_MDLDLNext
.b570	a5 31		lda $31				lda 	codePtr+1
.b572	c5 3b		cmp $3b				cmp 	zTemp2+1
.b574	d0 01		bne $b577			bne 	_MDLDLNext
.b576					_MDDLExit:
.b576	60		rts				rts
.b577					_MDLDLNext:
.b577	e6 30		inc $30				inc 	codePtr						; next byte
.b579	d0 eb		bne $b566			bne 	_MDDLLoop
.b57b	e6 31		inc $31				inc 	codePtr+1
.b57d	80 e7		bra $b566			bra 	_MDDLLoop
.b57f					IMemoryFindEnd:
.b57f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b581	85 3a		sta $3a				sta 	0+zTemp2
.b583	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b585	85 3b		sta $3b				sta 	1+zTemp2
.b587					_MDLFELoop:
.b587	b2 3a		lda ($3a)			lda 	(zTemp2)
.b589	f0 0b		beq $b596			beq 	_MDLFEExit
.b58b	18		clc				clc
.b58c	65 3a		adc $3a				adc 	zTemp2
.b58e	85 3a		sta $3a				sta 	zTemp2
.b590	90 f5		bcc $b587			bcc 	_MDLFELoop
.b592	e6 3b		inc $3b				inc 	zTemp2+1
.b594	80 f1		bra $b587			bra 	_MDLFELoop
.b596					_MDLFEExit:
.b596	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b597					MemoryInsertLine:
.b597	08		php				php
.b598	20 7f b5	jsr $b57f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b59b	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b59d	1a		inc a				inc 	a
.b59e	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b5a0	b0 36		bcs $b5d8			bcs 	_MDLIError
.b5a2	28		plp				plp
.b5a3	90 08		bcc $b5ad			bcc 	_MDLIFound
.b5a5	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b5a7	85 30		sta $30				sta 	codePtr
.b5a9	a5 3b		lda $3b				lda 	zTemp2+1
.b5ab	85 31		sta $31				sta 	codePtr+1
.b5ad					_MDLIFound:
.b5ad	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b5b0	a8		tay				tay
.b5b1					_MDLIInsert:
.b5b1	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b5b3	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b5b5	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b5b7	c5 3a		cmp $3a				cmp 	zTemp2
.b5b9	d0 06		bne $b5c1			bne 	_MDLINext
.b5bb	a5 31		lda $31				lda 	codePtr+1
.b5bd	c5 3b		cmp $3b				cmp 	zTemp2+1
.b5bf	f0 0a		beq $b5cb			beq 	_MDLIHaveSpace
.b5c1					_MDLINext:
.b5c1	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b5c3	d0 02		bne $b5c7			bne 	_MDLINoBorrow
.b5c5	c6 3b		dec $3b				dec 	zTemp2+1
.b5c7					_MDLINoBorrow:
.b5c7	c6 3a		dec $3a				dec 	zTemp2
.b5c9	80 e6		bra $b5b1			bra 	_MDLIInsert
.b5cb					_MDLIHaveSpace:
.b5cb	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b5ce	88		dey				dey 								; from offset-1 to 0
.b5cf					_MDLICopy:
.b5cf	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b5d2	91 30		sta ($30),y			sta 	(codePtr),y
.b5d4	88		dey				dey
.b5d5	10 f8		bpl $b5cf			bpl 	_MDLICopy
.b5d7	60		rts				rts
.b5d8					_MDLIError:
.b5d8	a9 06		lda #$06		lda	#6
.b5da	4c 85 99	jmp $9985		jmp	ErrorHandler
.b5dd					MDLAppendLine:
.b5dd	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b5df	85 36		sta $36				sta 	zTemp0
.b5e1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5e3	85 38		sta $38				sta 	0+zTemp1
.b5e5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5e7	85 39		sta $39				sta 	1+zTemp1
.b5e9	b2 38		lda ($38)			lda 	(zTemp1)
.b5eb	d0 0a		bne $b5f7			bne 	_MDLANoInitialise
.b5ed	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5ef	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b5f2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5f4	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b5f7					_MDLANoInitialise:
.b5f7	18		clc				clc
.b5f8	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b5fb	85 38		sta $38				sta 	zTemp1
.b5fd	72 36		adc ($36)			adc 	(zTemp0)
.b5ff	8d 6b 06	sta $066b			sta 	AppendPointer
.b602	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b605	85 39		sta $39				sta 	zTemp1+1
.b607	69 00		adc #$00			adc 	#0
.b609	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b60c	a0 00		ldy #$00			ldy 	#0
.b60e					_MDLACopy:
.b60e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b610	91 38		sta ($38),y			sta 	(zTemp1),y
.b612	c8		iny				iny
.b613	98		tya				tya
.b614	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b616	d0 f6		bne $b60e			bne 	_MDLACopy
.b618	a9 00		lda #$00			lda 	#0 							; end of program.
.b61a	91 38		sta ($38),y			sta 	(zTemp1),y
.b61c	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a594					MemoryNew:
.a594	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a596	85 30		sta $30				sta 	codePtr
.a598	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a59a	85 31		sta $31				sta 	codePtr+1
.a59c	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a59e	92 30		sta ($30)			sta 	(codePtr)
.a5a0	60		rts				rts
.a5a1					MemoryInline:
.a5a1	98		tya				tya 								; put address into stack,x
.a5a2	18		clc				clc
.a5a3	65 30		adc $30				adc 	codePtr
.a5a5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5a8	a5 31		lda $31				lda 	codePtr+1
.a5aa	69 00		adc #$00			adc 	#0
.a5ac	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5af	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a5b2	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a5b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a5b6					MemorySearch:
.a5b6	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a5b8	86 37		stx $37				stx 	zTemp0+1
.a5ba	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5bc	85 30		sta $30				sta 	codePtr
.a5be	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5c0	85 31		sta $31				sta 	codePtr+1
.a5c2					_MTAXLoop:
.a5c2	b2 30		lda ($30)			lda 	(codePtr)
.a5c4	18		clc				clc
.a5c5	f0 21		beq $a5e8			beq 	_MTAXExit 					; reached end, exit with CC.
.a5c7	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a5c9	b1 30		lda ($30),y			lda 	(codePtr),y
.a5cb	38		sec				sec
.a5cc	e5 36		sbc $36				sbc 	zTemp0
.a5ce	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a5d0	c8		iny				iny 								; do the MSB
.a5d1	b1 30		lda ($30),y			lda 	(codePtr),y
.a5d3	e5 37		sbc $37				sbc 	zTemp0+1
.a5d5	05 38		ora $38				ora 	zTemp1
.a5d7	f0 0f		beq $a5e8			beq 	_MTAXExit	 				; found
.a5d9	b0 0d		bcs $a5e8			bcs 	_MTAXExit 					; current < required exit
.a5db	18		clc				clc
.a5dc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a5de	65 30		adc $30				adc 	codePtr
.a5e0	85 30		sta $30				sta 	codePtr
.a5e2	90 02		bcc $a5e6			bcc 	_CREExit
.a5e4	e6 31		inc $31				inc 	codePtr+1
.a5e6					_CREExit:
.a5e6	80 da		bra $a5c2			bra 	_MTAXLoop
.a5e8					_MTAXExit:
.a5e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5e9					StackPushByte:
.a5e9	48		pha				pha 								; save byte
.a5ea	a5 34		lda $34				lda 	BasicStack
.a5ec	d0 09		bne $a5f7			bne 	_SPBNoBorrow
.a5ee	c6 35		dec $35				dec 	BasicStack+1
.a5f0	48		pha				pha
.a5f1	a5 35		lda $35				lda 	BasicStack+1
.a5f3	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5f5	90 06		bcc $a5fd			bcc 	_SPBMemory
.a5f7					_SPBNoBorrow:
.a5f7	c6 34		dec $34				dec 	BasicStack
.a5f9	68		pla				pla 								; get back and write
.a5fa	92 34		sta ($34)			sta 	(BasicStack)
.a5fc	60		rts				rts
.a5fd					_SPBMemory:
.a5fd	a9 12		lda #$12		lda	#18
.a5ff	4c 85 99	jmp $9985		jmp	ErrorHandler
.a602					StackPopByte:
.a602	b2 34		lda ($34)			lda 	(BasicStack)
.a604	e6 34		inc $34				inc 	BasicStack
.a606	d0 02		bne $a60a			bne 	_SPBNoCarry
.a608	e6 35		inc $35				inc 	BasicStack+1
.a60a					_SPBNoCarry:
.a60a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a60b					StackOpen:
.a60b	48		pha				pha 								; save frame byte
.a60c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a60e	0a		asl a				asl 	a 							; claim twice this for storage
.a60f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a611	38		sec				sec 								; so basically subtracting from
.a612	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a614	85 34		sta $34				sta 	basicStack
.a616	b0 08		bcs $a620			bcs 	_SONoBorrow
.a618	c6 35		dec $35				dec 	basicStack+1
.a61a	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a61c	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a61e	90 04		bcc $a624			bcc 	_SOMemory
.a620					_SONoBorrow:
.a620	68		pla				pla 								; get marker back and write at TOS
.a621	92 34		sta ($34)			sta 	(basicStack)
.a623	60		rts				rts
.a624					_SOMemory:
.a624	a9 12		lda #$12		lda	#18
.a626	4c 85 99	jmp $9985		jmp	ErrorHandler
.a629					StackClose:
.a629	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a62b	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a62d	0a		asl a				asl 	a 							; claim twice this.
.a62e	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a630	85 34		sta $34				sta 	basicStack
.a632	90 02		bcc $a636			bcc 	_SCExit
.a634	e6 35		inc $35				inc 	basicStack+1
.a636					_SCExit:
.a636	60		rts				rts
.a637					StackCheckFrame:
.a637	48		pha				pha
.a638					_StackRemoveLocals:
.a638	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a63a	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a63c	b0 05		bcs $a643			bcs 	_SCNoLocal
.a63e	20 26 ad	jsr $ad26			jsr 	LocalPopValue
.a641	80 f5		bra $a638			bra 	_StackRemoveLocals
.a643					_SCNoLocal:
.a643	68		pla				pla
.a644	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a646	29 f0		and #$f0			and 	#$F0 						; check type bits
.a648	d0 01		bne $a64b			bne 	_SCFError 					; different, we have structures mixed up
.a64a	60		rts				rts
.a64b					_SCFError:
.a64b	8a		txa				txa 								; report error X
.a64c	4c 85 99	jmp $9985			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a64f					STKSaveCodePosition:
.a64f	5a		phy				phy
.a650	98		tya				tya 								; save Y
.a651	a0 05		ldy #$05			ldy 	#5
.a653	91 34		sta ($34),y			sta 	(basicStack),y
.a655	88		dey				dey 								; save Code Pointer
.a656					_STKSaveLoop:
.a656	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a659	91 34		sta ($34),y			sta 	(basicStack),y
.a65b	88		dey				dey
.a65c	d0 f8		bne $a656			bne 	_STKSaveLoop
.a65e	7a		ply				ply
.a65f	60		rts				rts
.a660					STKLoadCodePosition:
.a660	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a662					_STKLoadLoop:
.a662	b1 34		lda ($34),y			lda 	(basicStack),y
.a664	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a667	c8		iny				iny
.a668	c0 05		cpy #$05			cpy 	#5
.a66a	d0 f6		bne $a662			bne 	_STKLoadLoop
.a66c	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a66e	a8		tay				tay
.a66f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a670					StackReset:
.a670	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a672	85 34		sta $34				sta 	0+basicStack
.a674	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a676	85 35		sta $35				sta 	1+basicStack
.a678	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a67a	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a67c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b61d					StringConcrete:
.b61d	5a		phy				phy 								; save position on stack
.b61e	20 4c a2	jsr $a24c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b621	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b624	85 38		sta $38				sta 	zTemp1
.b626	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b629	85 39		sta $39				sta 	zTemp1+1
.b62b	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b62d					_SALength:
.b62d	c8		iny				iny
.b62e	b1 38		lda ($38),y			lda 	(zTemp1),y
.b630	d0 fb		bne $b62d			bne 	_SALength
.b632	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b634	b0 3f		bcs $b675			bcs 	_SALengthError
.b636	98		tya				tya 				 				; length of the new string
.b637	18		clc				clc
.b638	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b63a	90 02		bcc $b63e			bcc 	_SAHaveLength
.b63c	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b63e					_SAHaveLength:
.b63e	48		pha				pha 								; save length.
.b63f	38		sec				sec
.b640	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b642	6d 8e 04	adc $048e			adc 	StringMemory
.b645	8d 8e 04	sta $048e			sta 	StringMemory
.b648	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b64a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b64d	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b64f	6d 8f 04	adc $048f			adc 	StringMemory+1
.b652	8d 8f 04	sta $048f			sta 	StringMemory+1
.b655	85 3b		sta $3b				sta 	zTemp2+1
.b657	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b65a	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b65b	38		sec				sec
.b65c	e9 03		sbc #$03			sbc 	#3
.b65e	92 3a		sta ($3a)			sta 	(zTemp2)
.b660	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b662	a0 01		ldy #$01			ldy 	#1
.b664	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b666					_SACopyNewString:
.b666	a0 00		ldy #$00			ldy 	#0
.b668					_SACopyNSLoop:
.b668	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b66a	c8		iny				iny 								; write two on in string storage
.b66b	c8		iny				iny
.b66c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b66e	88		dey				dey 								; this makes it one one.
.b66f	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b671	d0 f5		bne $b668			bne 	_SACopyNSLoop
.b673	7a		ply				ply
.b674	60		rts				rts
.b675					_SALengthError:
.b675	a9 09		lda #$09		lda	#9
.b677	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b67a					StringSystemInitialise:
.b67a	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b67c	8d 8e 04	sta $048e			sta 	0+StringMemory
.b67f	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b681	8d 8f 04	sta $048f			sta 	1+StringMemory
.b684	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b687	60		rts				rts
.b688					StringSpaceInitialise:
.b688	20 4c a2	jsr $a24c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b68b	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b68d	8d 90 04	sta $0490			sta 	StringInitialised
.b690	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b693	8d 91 04	sta $0491			sta 	StringTempPointer
.b696	ad 8f 04	lda $048f			lda 	StringMemory+1
.b699	3a		dec a				dec 	a
.b69a	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b69d	60		rts				rts
.b69e					StringTempAllocate:
.b69e	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b6a0	b0 35		bcs $b6d7			bcs 	_STALength
.b6a2	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b6a5	30 05		bmi $b6ac			bmi 	_STAAllocate
.b6a7	48		pha				pha 								; save value to subtract.
.b6a8	20 88 b6	jsr $b688			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b6ab	68		pla				pla 								; restore it
.b6ac					_STAAllocate:
.b6ac	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b6ae	18		clc				clc  								; deliberate allows one more
.b6af	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b6b2	8d 91 04	sta $0491			sta 	StringTempPointer
.b6b5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b6b8	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b6ba	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b6bd	69 ff		adc #$ff			adc 	#$FF
.b6bf	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b6c2	85 3d		sta $3d				sta 	zsTemp+1
.b6c4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b6c7	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b6ca	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b6cd	a9 10		lda #$10			lda 	#NSTString
.b6cf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b6d2	a9 00		lda #$00			lda 	#0 							; clear the target string
.b6d4	92 3c		sta ($3c)			sta 	(zsTemp)
.b6d6	60		rts				rts
.b6d7					_STALength:
.b6d7	a9 09		lda #$09		lda	#9
.b6d9	4c 85 99	jmp $9985		jmp	ErrorHandler
.b6dc					StringTempWrite:
.b6dc	48		pha				pha
.b6dd	92 3c		sta ($3c)			sta 	(zsTemp)
.b6df	e6 3c		inc $3c				inc 	zsTemp
.b6e1	d0 02		bne $b6e5			bne 	_STWNoCarry
.b6e3	e6 3d		inc $3d				inc 	zsTemp+1
.b6e5					_STWNoCarry:
.b6e5	a9 00		lda #$00			lda 	#0
.b6e7	92 3c		sta ($3c)			sta 	(zsTemp)
.b6e9	68		pla				pla
.b6ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a67d					BackloadProgram:
.a67d	a2 ff		ldx #$ff			ldx 	#$FF
.a67f	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a682	20 ac a6	jsr $a6ac			jsr 	BLReadByte
.a685	30 1e		bmi $a6a5			bmi 	_BPExit
.a687					_BPCopy:
.a687	e8		inx				inx  								; copy byte in
.a688	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a68b	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a68e	20 ac a6	jsr $a6ac			jsr 	BLReadByte 					; read next byte
.a691	30 0a		bmi $a69d			bmi 	_BPEndLine 					; -ve = EOL
.a693	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a695	d0 02		bne $a699			bne 	_BPNotTab
.a697	a9 20		lda #$20			lda 	#' '
.a699					_BPNotTab:
.a699	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a69b	b0 ea		bcs $a687			bcs 	_BPCopy
.a69d					_BPEndLine:
.a69d	20 77 aa	jsr $aa77			jsr 	TokeniseLine 				; tokenise the line.
.a6a0	20 e3 8b	jsr $8be3			jsr 	EditProgramCode
.a6a3	80 d8		bra $a67d			bra 	BackloadProgram
.a6a5					_BPExit:
.a6a5	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a6a8	20 a1 8c	jsr $8ca1			jsr 	ClearCommand 				; clear variables etc.
.a6ab	60		rts				rts
.a6ac					BLReadByte:
.a6ac					_BLLoad:
.a6ac	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a6af	ee ad a6	inc $a6ad			inc 	_BLLoad+1
.a6b2	d0 03		bne $a6b7			bne 	_BLNoCarry
.a6b4	ee ae a6	inc $a6ae			inc 	_BLLoad+2
.a6b7					_BLNoCarry:
.a6b7	c9 00		cmp #$00			cmp 	#0
.a6b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a6ba					TokeniseSearchTable:
.a6ba	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a6bc	85 36		sta $36				sta 	zTemp0
.a6be	a0 00		ldy #$00			ldy 	#0
.a6c0	a9 80		lda #$80			lda 	#$80 						; token #
.a6c2	85 38		sta $38				sta 	zTemp1
.a6c4					_TSTLoop:
.a6c4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a6c6	30 49		bmi $a711			bmi 	_TSTFail 					; -ve = end of table
.a6c8	f0 2e		beq $a6f8			beq 	_TSTNext 					; zero, check next it's a dummy
.a6ca	c8		iny				iny 								; get the hash
.a6cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6cd	88		dey				dey
.a6ce	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a6d1	d0 25		bne $a6f8			bne 	_TSTNext
.a6d3	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a6d6	38		sec				sec
.a6d7	ed 80 04	sbc $0480			sbc 	identStart
.a6da	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a6dc	d0 1a		bne $a6f8			bne 	_TSTNext
.a6de	5a		phy				phy 								; save Y , we might fail
.a6df	c8		iny				iny 								; point to text
.a6e0	c8		iny				iny
.a6e1	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a6e4					_TSTCompareName:
.a6e4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a6e7	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a6e9	d0 0c		bne $a6f7			bne 	_TSTNextPullY 				; fail, pullY and do next
.a6eb	e8		inx				inx
.a6ec	c8		iny				iny
.a6ed	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a6f0	d0 f2		bne $a6e4			bne 	_TSTCompareName
.a6f2	7a		ply				ply 								; throw Y
.a6f3	a5 38		lda $38				lda 	zTemp1 						; get token #
.a6f5	38		sec				sec 								; return with CS = passed.
.a6f6	60		rts				rts
.a6f7					_TSTNextPullY:
.a6f7	7a		ply				ply 								; restore current, fall through.
.a6f8					_TSTNext:
.a6f8	e6 38		inc $38				inc 	zTemp1 						; token counter
.a6fa	98		tya				tya
.a6fb	18		clc				clc
.a6fc	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a6fe	1a		inc a				inc 	a 							; +1
.a6ff	1a		inc a				inc 	a 							; +2
.a700	a8		tay				tay
.a701	10 c1		bpl $a6c4			bpl 	_TSTLoop 					; if Y < $80 loop back
.a703	98		tya				tya 								; add Y to zTemp0 and reset Y
.a704	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a706	18		clc				clc  								; but have tables > 255 bytes
.a707	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a709	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a70b	90 b7		bcc $a6c4			bcc 	_TSTLoop
.a70d	e6 37		inc $37				inc 	zTemp0+1
.a70f	80 b3		bra $a6c4			bra 	_TSTLoop
.a711					_TSTFail:
.a711	18		clc				clc
.a712	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a713					KeywordSet0:
>a713	00 65					.text	0,$65,""               ; $80 !0:EOF
>a715	00 58					.text	0,$58,""               ; $81 !1:SH1
>a717	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a719	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a71f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a727	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a72d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a734	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a73c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a743	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a74a	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a750	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a758	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8c JOYB(
>a75f	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8d JOYX(
>a766	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8e JOYY(
>a76d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8f LEFT$(
>a775	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $90 LEN(
>a77b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $91 MID$(
>a782	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $92 NOT(
>a788	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $93 RANDOM(
>a790	28
>a791	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $94 RIGHT$(
>a799	28
>a79a	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $95 RND(
>a7a0	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $96 SGN(
>a7a6	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $97 SPC(
>a7ac	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $98 STR$(
>a7b3	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $99 TIMER(
>a7bb	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9a TRUE
>a7c1	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9b VAL(
>a7c7	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9c FOR
>a7cc	02 8f 49 46				.text	2,$8f,"IF"             ; $9d IF
>a7d0	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9e PROC
>a7d6	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9f REPEAT
>a7de	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a0 WHILE
>a7e5	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a1 ENDIF
>a7ec	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a2 ENDPROC
>a7f4	43
>a7f5	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a3 NEXT
>a7fb	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a4 THEN
>a801	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a5 UNTIL
>a808	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a6 WEND
>a80e	02 9b 42 59				.text	2,$9b,"BY"             ; $a7 BY
>a812	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a8 CALL
>a818	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a9 CIRCLE
>a820	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $aa CLEAR
>a827	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ab CLS
>a82c	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ac COLOR
>a833	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ad COLOUR
>a83b	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ae DATA
>a841	03 da 44 49 4d				.text	3,$da,"DIM"            ; $af DIM
>a846	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b0 DOWNTO
>a84e	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b1 ELSE
>a854	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b2 FROM
>a85a	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b3 GFX
>a85f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b4 GOSUB
>a866	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b5 GOTO
>a86c	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b6 HERE
>a872	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b7 IMAGE
>a879	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b8 LET
>a87e	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b9 LINE
>a884	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ba LOCAL
>a88b	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bb OFF
>a890	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bc ON
>a894	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $bd OUTLINE
>a89c	45
>a89d	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $be PLOT
>a8a3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $bf PRINT
>a8aa	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c0 READ
>a8b0	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c1 RECT
>a8b6	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c2 REM
>a8bb	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c3 RETURN
>a8c3	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c4 SOLID
>a8ca	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c5 SPRITE
>a8d2	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c6 TEXT
>a8d8	02 a3 54 4f				.text	2,$a3,"TO"             ; $c7 TO
>a8dc	ff					.text	$FF
.a8dd					KeywordSet1:
>a8dd	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8df	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8e1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8e3	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a8eb	4c 45
>a8ed	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a8f5	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a8fd	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a902	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a908	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a90d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a915	45
>a916	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a91b	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a923	53
>a924	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a92a	ff					.text	$FF
.a92b					KeywordSet2:
>a92b	00 65					.text	0,$65,""               ; $80 !0:EOF
>a92d	00 58					.text	0,$58,""               ; $81 !1:SH1
>a92f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a931	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a936	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a93b	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a940	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a945	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a94a	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a94f	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a954	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a959	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a95e	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a963	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a968	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a96d	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a972	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a977	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a97c	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a981	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a986	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a98b	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a990	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a995	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a99a	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a99f	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a9a4	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a9a9	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a9ae	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a9b3	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a9b8	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a9bd	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a9c2	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a9c7	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a9cc	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a9d1	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a9d6	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a9db	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a9e0	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a9e5	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a9ea	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a9ef	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a9f4	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a9f9	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a9fe	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>aa03	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>aa08	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>aa0d	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>aa12	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>aa17	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>aa1c	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>aa21	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>aa26	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>aa2b	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>aa30	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>aa35	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>aa3a	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>aa3f	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>aa44	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>aa49	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>aa4e	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>aa53	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>aa58	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>aa5d	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>aa62	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>aa67	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>aa6c	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>aa71	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>aa76	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.aa77					TokeniseLine:
.aa77	20 ff ab	jsr $abff			jsr 	FixLineBufferCase 			; fix line case
.aa7a	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.aa7c	8d a6 04	sta $04a6			sta 	tokenOffset
.aa7f	9c a7 04	stz $04a7			stz 	tokenLineNumber
.aa82	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.aa85	a2 ff		ldx #$ff			ldx 	#$FF
.aa87					_TKFindFirst:
.aa87	e8		inx				inx
.aa88	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa8b	f0 79		beq $ab06			beq 	_TKExit
.aa8d	c9 20		cmp #$20			cmp 	#' '
.aa8f	90 f6		bcc $aa87			bcc 	_TKFindFirst
.aa91	c9 30		cmp #$30			cmp 	#'0'
.aa93	90 07		bcc $aa9c			bcc 	_TKNoLineNumber
.aa95	c9 3a		cmp #$3a			cmp 	#'9'+1
.aa97	b0 03		bcs $aa9c			bcs 	_TKNoLineNumber
.aa99	20 29 ac	jsr $ac29			jsr 	TokeniseExtractLineNumber
.aa9c					_TKNoLineNumber:
.aa9c					_TKTokeniseLoop:
.aa9c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.aa9f	f0 65		beq $ab06			beq 	_TKExit
.aaa1	e8		inx				inx
.aaa2	c9 20		cmp #$20			cmp 	#' '
.aaa4	f0 f6		beq $aa9c			beq 	_TKTokeniseLoop 			; keep looping if space found.
.aaa6	ca		dex				dex 								; undo last get, A contains character, X is position.
.aaa7	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.aaa9	f0 61		beq $ab0c			beq 	_TKTokeniseIdentifier
.aaab	c9 41		cmp #$41			cmp 	#'A'
.aaad	90 04		bcc $aab3			bcc 	_TKTokenisePunctuation
.aaaf	c9 5b		cmp #$5b			cmp 	#'Z'+1
.aab1	90 59		bcc $ab0c			bcc 	_TKTokeniseIdentifier
.aab3					_TKTokenisePunctuation:
.aab3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.aab5	f0 27		beq $aade			beq 	_TKString
.aab7	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aab9	f0 28		beq $aae3			beq 	_TKHexConstant
.aabb	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aabd	f0 29		beq $aae8			beq 	_TKCheckDouble
.aabf	c9 3e		cmp #$3e			cmp 	#'>'
.aac1	f0 25		beq $aae8			beq 	_TKCheckDouble
.aac3					_TKStandardPunctuation:
.aac3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.aac6	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aac8	90 0e		bcc $aad8			bcc 	_TKNoShift
.aaca	48		pha				pha 								; save
.aacb	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aacd	85 36		sta $36				sta 	zTemp0
.aacf	68		pla				pla
.aad0	29 20		and #$20			and 	#32 						; bit 5
.aad2	4a		lsr a				lsr 	a 							; shift into bit 3
.aad3	4a		lsr a				lsr 	a
.aad4	05 36		ora $36				ora 	zTemp0
.aad6	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aad8					_TKNoShift:
.aad8	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte 			; write the punctuation character
.aadb	e8		inx				inx 								; consume the character
.aadc	80 be		bra $aa9c			bra 	_TKTokeniseLoop 			; and loop round again.
.aade					_TKString:
.aade	20 8e ab	jsr $ab8e			jsr 	TokeniseString
.aae1	80 b9		bra $aa9c			bra 	_TKTokeniseLoop
.aae3					_TKHexConstant:
.aae3	20 c9 ab	jsr $abc9			jsr 	TokeniseHexConstant
.aae6	80 b4		bra $aa9c			bra 	_TKTokeniseLoop
.aae8					_TKCheckDouble:
.aae8	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aaeb	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aaed	90 d4		bcc $aac3			bcc 	_TKStandardPunctuation
.aaef	c9 3f		cmp #$3f			cmp 	#'>'+1
.aaf1	b0 d0		bcs $aac3			bcs 	_TKStandardPunctuation
.aaf3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aaf6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aaf8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aaf9	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aafc	38		sec				sec
.aafd	e9 3c		sbc #$3c			sbc 	#'<'
.aaff	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ab02	e8		inx				inx 								; consume both
.ab03	e8		inx				inx
.ab04	80 96		bra $aa9c			bra 	_TKTokeniseLoop
.ab06	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ab08	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.ab0b	60		rts				rts
.ab0c					_TKTokeniseIdentifier:
.ab0c	8e 80 04	stx $0480			stx 	identStart 					; save start
.ab0f	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ab12					_TKCheckLoop:
.ab12	e8		inx				inx 								; look at next, we know first is identifier.
.ab13	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.ab16	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.ab18	f0 f8		beq $ab12			beq 	_TKCheckLoop
.ab1a	c9 30		cmp #$30			cmp	 	#"0"
.ab1c	90 0c		bcc $ab2a			bcc 	_TKEndIdentifier
.ab1e	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab20	90 f0		bcc $ab12			bcc 	_TKCheckLoop
.ab22	c9 41		cmp #$41			cmp	 	#"A"
.ab24	90 04		bcc $ab2a			bcc 	_TKEndIdentifier
.ab26	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ab28	90 e8		bcc $ab12			bcc 	_TKCheckLoop
.ab2a					_TKEndIdentifier:
.ab2a	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.ab2d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.ab2f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.ab31	f0 06		beq $ab39			beq 	_TKHasTypeCharacter
.ab33	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ab35	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ab37	d0 07		bne $ab40			bne 	_TKNoTypeCharacter
.ab39					_TKHasTypeCharacter:
.ab39	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ab3c	e8		inx				inx 								; read next
.ab3d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab40					_TKNoTypeCharacter:
.ab40	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ab42	d0 09		bne $ab4d			bne 	_TKNoArray
.ab44	e8		inx				inx 								; skip the (
.ab45	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ab48	09 04		ora #$04			ora 	#$04
.ab4a	8d 84 04	sta $0484			sta 	identTypeByte
.ab4d					_TKNoArray:
.ab4d	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ab50	20 ea ab	jsr $abea			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ab53	a0 a7		ldy #$a7			ldy 	#(KeywordSet0) >> 8
.ab55	a9 13		lda #$13			lda 	#(KeywordSet0) & $FF
.ab57	20 ba a6	jsr $a6ba			jsr 	TokeniseSearchTable
.ab5a	a2 00		ldx #$00			ldx 	#0
.ab5c	b0 1f		bcs $ab7d			bcs 	_TKFoundToken
.ab5e	a0 a8		ldy #$a8			ldy 	#(KeywordSet1) >> 8
.ab60	a9 dd		lda #$dd			lda 	#(KeywordSet1) & $FF
.ab62	20 ba a6	jsr $a6ba			jsr 	TokeniseSearchTable
.ab65	a2 81		ldx #$81			ldx 	#$81
.ab67	b0 14		bcs $ab7d			bcs 	_TKFoundToken
.ab69	a0 a9		ldy #$a9			ldy 	#(KeywordSet2) >> 8
.ab6b	a9 2b		lda #$2b			lda 	#(KeywordSet2) & $FF
.ab6d	20 ba a6	jsr $a6ba			jsr 	TokeniseSearchTable
.ab70	a2 82		ldx #$82			ldx 	#$82
.ab72	b0 09		bcs $ab7d			bcs 	_TKFoundToken
.ab74	20 7a ac	jsr $ac7a			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ab77	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ab7a	4c 9c aa	jmp $aa9c			jmp 	_TKTokeniseLoop 			; and go round again.
.ab7d					_TKFoundToken:
.ab7d	48		pha				pha 								; save token
.ab7e	8a		txa				txa 								; shift in X, is there one ?
.ab7f	f0 03		beq $ab84			beq 	_TKNoTShift
.ab81	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte 			; if so, write it out
.ab84					_TKNoTShift:
.ab84	68		pla				pla 								; restore and write token
.ab85	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.ab88	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ab8b	4c 9c aa	jmp $aa9c			jmp 	_TKTokeniseLoop 			; and go round again.
.ab8e					TokeniseString:
.ab8e	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ab90	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.ab93	e8		inx				inx									; start of quoted string.
.ab94	da		phx				phx 								; push start of string on top
.ab95	ca		dex				dex
.ab96					_TSFindEnd:
.ab96	e8		inx				inx
.ab97	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.ab9a	f0 04		beq $aba0			beq 	_TSEndOfString
.ab9c	c9 22		cmp #$22			cmp 	#'"'
.ab9e	d0 f6		bne $ab96			bne 	_TSFindEnd
.aba0					_TSEndOfString:
.aba0	7a		ply				ply  								; so now Y is first character, X is character after end.
.aba1	48		pha				pha 								; save terminating character
.aba2	20 aa ab	jsr $abaa			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.aba5	68		pla				pla 								; terminating character
.aba6	f0 01		beq $aba9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.aba8	e8		inx				inx
.aba9					_TSNotQuote:
.aba9	60		rts				rts
.abaa					TOWriteBlockXY:
.abaa	86 36		stx $36				stx 	zTemp0 						; write end character
.abac	98		tya				tya
.abad	49 ff		eor #$ff			eor 	#$FF
.abaf	38		sec				sec
.abb0	65 36		adc $36				adc 	zTemp0
.abb2	1a		inc a				inc 	a 							; one extra for NULL
.abb3	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.abb6					_TOBlockLoop:
.abb6	c4 36		cpy $36				cpy 	zTemp0
.abb8	f0 09		beq $abc3			beq 	_TOBlockExit
.abba	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.abbd	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.abc0	c8		iny				iny
.abc1	80 f3		bra $abb6			bra 	_TOBlockLoop
.abc3					_TOBlockExit:
.abc3	a9 00		lda #$00			lda 	#0
.abc5	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.abc8	60		rts				rts
.abc9					TokeniseHexConstant:
.abc9	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.abcb	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.abce	e8		inx				inx									; start of quoted string.
.abcf	da		phx				phx 								; push start of constant on top
.abd0	ca		dex				dex
.abd1					_THFindLoop:
.abd1	e8		inx				inx
.abd2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.abd5	c9 30		cmp #$30			cmp 	#"0"
.abd7	90 0c		bcc $abe5			bcc 	_THFoundEnd
.abd9	c9 3a		cmp #$3a			cmp 	#"9"+1
.abdb	90 f4		bcc $abd1			bcc 	_THFindLoop
.abdd	c9 41		cmp #$41			cmp 	#"A"
.abdf	90 04		bcc $abe5			bcc 	_THFoundEnd
.abe1	c9 47		cmp #$47			cmp 	#"F"+1
.abe3	90 ec		bcc $abd1			bcc 	_THFindLoop
.abe5					_THFoundEnd:
.abe5	7a		ply				ply 								; restore start
.abe6	20 aa ab	jsr $abaa			jsr 	TOWriteBlockXY 				; output the block
.abe9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.abea					TokeniseCalculateHash:
.abea	da		phx				phx
.abeb	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.abee	a9 00		lda #$00			lda 	#0
.abf0					_TCHLoop:
.abf0	18		clc				clc
.abf1	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.abf4	e8		inx				inx
.abf5	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.abf8	d0 f6		bne $abf0			bne 	_TCHLoop
.abfa	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.abfd	fa		plx				plx
.abfe	60		rts				rts
.abff					FixLineBufferCase:
.abff	a2 00		ldx #$00			ldx 	#0
.ac01					_FLBCLoop:
.ac01	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ac04	f0 22		beq $ac28			beq 	_FLBCExit 					; end of string.
.ac06	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ac08	f0 11		beq $ac1b			beq 	_FLBCInQuotes
.ac0a	e8		inx				inx
.ac0b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ac0d	90 f2		bcc $ac01			bcc 	_FLBCLoop
.ac0f	c9 7b		cmp #$7b			cmp 	#'z'+1
.ac11	b0 ee		bcs $ac01			bcs 	_FLBCLoop
.ac13	38		sec				sec 								; make U/C
.ac14	e9 20		sbc #$20			sbc 	#32
.ac16	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ac19	80 e6		bra $ac01			bra 	_FLBCLoop
.ac1b					_FLBCInQuotes:
.ac1b	e8		inx				inx 								; advance
.ac1c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ac1f	f0 07		beq $ac28			beq 	_FLBCExit 					; exit on EOS
.ac21	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ac23	d0 f6		bne $ac1b			bne 	_FLBCInQuotes
.ac25	e8		inx				inx 								; skip over it
.ac26	80 d9		bra $ac01			bra 	_FLBCLoop
.ac28					_FLBCExit:
.ac28	60		rts				rts
.ac29					TokeniseExtractLineNumber:
.ac29	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.ac2c	48		pha				pha
.ac2d	ad a7 04	lda $04a7			lda 	tokenLineNumber
.ac30	48		pha				pha
.ac31	20 67 ac	jsr $ac67			jsr 	_TELNTimes2 				; line # x 4
.ac34	20 67 ac	jsr $ac67			jsr 	_TELNTimes2 				; line # x 2
.ac37	18		clc				clc 								; add stacked value
.ac38	68		pla				pla
.ac39	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ac3c	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ac3f	68		pla				pla
.ac40	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.ac43	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.ac46	20 67 ac	jsr $ac67			jsr 	_TELNTimes2 				; line # x 10
.ac49	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.ac4c	e8		inx				inx
.ac4d	29 0f		and #$0f			and 	#15 						; add to line #
.ac4f	18		clc				clc
.ac50	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ac53	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ac56	90 03		bcc $ac5b			bcc 	_TLENNoCarry
.ac58	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.ac5b					_TLENNoCarry:
.ac5b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.ac5e	c9 30		cmp #$30			cmp 	#'0'
.ac60	90 04		bcc $ac66			bcc 	_TLENExit
.ac62	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac64	90 c3		bcc $ac29			bcc 	TokeniseExtractLineNumber
.ac66					_TLENExit:
.ac66	60		rts				rts
.ac67					_TELNTimes2:
.ac67	0e a7 04	asl $04a7			asl 	tokenLineNumber
.ac6a	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.ac6d	60		rts				rts
.ac6e					TokeniseWriteByte:
.ac6e	da		phx				phx
.ac6f	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.ac72	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.ac75	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.ac78	fa		plx				plx
.ac79	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ac7a					CheckCreateVariableRecord:
.ac7a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ac7c	85 36		sta $36				sta 	0+zTemp0
.ac7e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ac80	85 37		sta $37				sta 	1+zTemp0
.ac82					_CCVSearch:
.ac82	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ac84	f0 2c		beq $acb2			beq 	_CCVFail
.ac86	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ac88	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ac8a	cd 83 04	cmp $0483			cmp 	identHash
.ac8d	d0 16		bne $aca5			bne 	_CCVNext
.ac8f	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ac91	ae 80 04	ldx $0480			ldx 	identStart
.ac94					_CCVCompare:
.ac94	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ac97	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ac99	e8		inx				inx 								; advance pointers
.ac9a	c8		iny				iny
.ac9b	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ac9c	d0 07		bne $aca5			bne 	_CCVNext  					; didn't match go to next.
.ac9e	90 f4		bcc $ac94			bcc 	_CCVCompare 				; not finished yet.
.aca0	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.aca3	f0 41		beq $ace6			beq 	_CCVFound 					; yes, we were successful
.aca5					_CCVNext:
.aca5	18		clc				clc
.aca6	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.aca8	65 36		adc $36				adc 	zTemp0
.acaa	85 36		sta $36				sta 	zTemp0
.acac	90 d4		bcc $ac82			bcc 	_CCVSearch
.acae	e6 37		inc $37				inc 	zTemp0+1
.acb0	80 d0		bra $ac82			bra 	_CCVSearch
.acb2					_CCVFail:
.acb2	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.acb4	ad 83 04	lda $0483			lda 	identHash
.acb7	91 36		sta ($36),y			sta 	(zTemp0),y
.acb9	c8		iny				iny 								; offset 2 is the type byte
.acba	ad 84 04	lda $0484			lda 	identTypeByte
.acbd	91 36		sta ($36),y			sta 	(zTemp0),y
.acbf	c8		iny				iny
.acc0					_CCVData:
.acc0	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.acc2	91 36		sta ($36),y			sta 	(zTemp0),y
.acc4	c8		iny				iny
.acc5	c0 08		cpy #$08			cpy 	#8
.acc7	90 f7		bcc $acc0			bcc 	_CCVData
.acc9	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.accc					_CCVCopyName:
.accc	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.accf	91 36		sta ($36),y			sta 	(zTemp0),y
.acd1	e8		inx				inx
.acd2	c8		iny				iny
.acd3	ec 82 04	cpx $0482			cpx 	identTypeEnd
.acd6	d0 f4		bne $accc			bne 	_CCVCopyName
.acd8	98		tya				tya 								; patch offset
.acd9	92 36		sta ($36)			sta 	(zTemp0)
.acdb	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.acdd	91 36		sta ($36),y			sta 	(zTemp0),y
.acdf	88		dey				dey
.ace0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ace2	09 80		ora #$80			ora 	#$80
.ace4	91 36		sta ($36),y			sta 	(zTemp0),y
.ace6					_CCVFound:
.ace6	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ace8	38		sec				sec
.ace9	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.aceb	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.aced	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.acf0	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.acf2	20 6e ac	jsr $ac6e			jsr 	TokeniseWriteByte
.acf5	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
