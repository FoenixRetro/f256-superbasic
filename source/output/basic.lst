
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Thu Jan 26 08:56:04 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		03						.byte   3               			; 3 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						GXGraphicDraw:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDCommand:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 d8 bb	jsr $bbd8		jsr	Export_SNDCommand
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDUpdate:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 0b bc	jsr $bc0b		jsr	Export_SNDUpdate
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKListConvertLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 89 b5	jsr $b589		jsr	Export_TKListConvertLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKTokeniseLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 1d b8	jsr $b81d		jsr	Export_TKTokeniseLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a2		09 80		ora #$80			ora 	#$80
.80a4		85 00		sta $00				sta 	0
.80a6		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a9		c9 42		cmp #$42			cmp 	#"B"
.80ab		d0 18		bne $80c5			bne 	_NoMachineCode
.80ad		ad 03 20	lda $2003			lda 	$2003
.80b0		c9 54		cmp #$54			cmp 	#"T"
.80b2		d0 11		bne $80c5			bne 	_NoMachineCode
.80b4		ad 04 20	lda $2004			lda 	$2004
.80b7		c9 36		cmp #$36			cmp 	#"6"
.80b9		d0 0a		bne $80c5			bne 	_NoMachineCode
.80bb		ad 05 20	lda $2005			lda 	$2005
.80be		c9 35		cmp #$35			cmp 	#"5"
.80c0		d0 03		bne $80c5			bne 	_NoMachineCode
.80c2		4c 00 20	jmp $2000			jmp 	$2000
.80c5						_NoMachineCode:
.80c5		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80c8		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80ca		20 16 82	jsr $8216			jsr 	KNLSetDrive
.80cd		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cf		aa		tax				tax
.80d0		a8		tay				tay
.80d1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.80d4		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d6		20 75 80	jsr $8075			jsr 	SNDCommand
.80d9		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80db		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80de		a9 09		lda #$09			lda 	#9
.80e0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		64 01		stz $01				stz 	1
.80e8		ad ad d6	lda $d6ad			lda 	$D6AD
.80eb		20 eb 83	jsr $83eb			jsr 	PrintHex
.80ee		ad ac d6	lda $d6ac			lda 	$D6AC
.80f1		20 eb 83	jsr $83eb			jsr 	PrintHex
.80f4		ad ab d6	lda $d6ab			lda 	$D6AB
.80f7		20 eb 83	jsr $83eb			jsr 	PrintHex
.80fa		ad aa d6	lda $d6aa			lda 	$D6AA
.80fd		20 eb 83	jsr $83eb			jsr 	PrintHex
.8100		a9 20		lda #$20			lda 	#32
.8102		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8105		ad a8 d6	lda $d6a8			lda 	$D6A8
.8108		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810b		ad a9 d6	lda $d6a9			lda 	$D6A9
.810e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8111		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8113		a9 21		lda #$21			lda 	#Prompt & $FF
.8115		20 13 98	jsr $9813			jsr 	PrintStringXA
.8118		20 e5 91	jsr $91e5			jsr 	NewProgram 					; erase current program
.811b		4c 2e 86	jmp $862e			jmp 	WarmStart					; make same size.
.811e		4c 2e 86	jmp $862e			jmp 	WarmStart
>8121		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8123		09 09 32 36 2f 30 31 2f			.text 9,9,"26/01/23 32"
>812b		32 33 20 33 32

;******  Return to file: ./common/aa.system/00start.asm

>8130		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8134						ProcessEvents:
.8134		20 55 82	jsr $8255			jsr 	KNLSetEventPointer
.8137		20 a5 81	jsr $81a5			jsr     GetNextEvent 				; get next event
.813a		b0 27		bcs $8163			bcs 	_PEExitZ 					; nothing left to process.
.813c		ad 82 07	lda $0782			lda 	KNLEvent.type 				; go back if event not key.pressed.
.813f		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8141		d0 f1		bne $8134			bne 	ProcessEvents
.8143		ad 88 07	lda $0788			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8146		d0 ec		bne $8134			bne 	ProcessEvents
.8148		ad 87 07	lda $0787			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.814b		c9 03		cmp #$03			cmp 	#3
.814d		f0 11		beq $8160			beq 	_PEReturnBreak  			; no, keep going.
.814f		da		phx				phx
.8150		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8153		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8155		f0 06		beq $815d			beq 	_PENoQueue
.8157		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.815a		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.815d						_PENoQueue:
.815d		fa		plx				plx
.815e		80 d4		bra $8134			bra 	ProcessEvents
.8160						_PEReturnBreak:
.8160		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8162		60		rts				rts
.8163						_PEExitZ:
.8163		a9 00		lda #$00			lda 	#0
.8165		60		rts				rts
.8166						PopKeyboardQueue:
.8166		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8169		f0 17		beq $8182			beq 	_PKQExit 					; zero, then exit.
.816b		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.816e		48		pha				pha
.816f		da		phx				phx 								; drop head of queue
.8170		a2 00		ldx #$00			ldx 	#0
.8172						_PKQLoop:
.8172		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8175		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8178		e8		inx				inx
.8179		e0 07		cpx #$07			cpx 	#7
.817b		d0 f5		bne $8172			bne 	_PKQLoop
.817d		fa		plx				plx
.817e		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8181		68		pla				pla 								; restore head of queue.
.8182						_PKQExit:
.8182		60		rts				rts
.8183						KNLGetKeyPressed:
.8183		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8186		d0 de		bne $8166			bne 	PopKeyboardQueue 			; if so, pop and return it
.8188		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process any outstanding events
.818b		a9 00		lda #$00			lda 	#0
.818d		60		rts				rts
.818e						KNLGetSingleCharacter:
.818e		20 83 81	jsr $8183			jsr 	KNLGetKeyPressed
.8191		c9 00		cmp #$00			cmp 	#0
.8193		f0 f9		beq $818e			beq 	KNLGetSingleCharacter
.8195		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8196						TickHandler:
.8196		5a		phy				phy 								; need to preserve Y
.8197		20 7f 80	jsr $807f			jsr 	SNDUpdate 					; update sound
.819a		7a		ply				ply
.819b		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.819c						ResetIOTracking:
.819c		a2 21		ldx #$21			ldx 	#GNEEnd-GNEBegin-1
.819e						_RIOLoop:
.819e		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.81a1		ca		dex				dex
.81a2		10 fa		bpl $819e			bpl 	_RIOLoop
.81a4		60		rts				rts
.81a5						GetNextEvent:
.81a5		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.81a8		08		php				php									; save yes/no flag.
.81a9		b0 17		bcs $81c2			bcs 	_GNEExit
.81ab		48		pha				pha 								; save registers
.81ac		da		phx				phx
.81ad		5a		phy				phy
.81ae		ad 82 07	lda $0782			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.81b1		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.81b3		f0 04		beq $81b9			beq 	_GNEKeyEvent
.81b5		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.81b7		d0 06		bne $81bf			bne 	_GNECheckMouseEvent
.81b9						_GNEKeyEvent:
.81b9		20 c4 81	jsr $81c4			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.81bc		20 e1 81	jsr $81e1			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.81bf						_GNECheckMouseEvent:
.81bf		7a		ply				ply 								; restore registers
.81c0		fa		plx				plx
.81c1		68		pla				pla
.81c2						_GNEExit:
.81c2		28		plp				plp
.81c3		60		rts				rts
.81c4						ProcessKeyboardEvent:
.81c4		ad 86 07	lda $0786			lda 	KNLEvent.key.raw 			; raw key code.
.81c7		20 02 82	jsr $8202			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.81ca		ac 82 07	ldy $0782			ldy 	KNLEvent.type
.81cd		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.81cf		f0 07		beq $81d8			beq 	_PKERelease
.81d1		1d 5f 06	ora $065f,x			ora 	KeyStatus,x 				; set bit
.81d4		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.81d7		60		rts				rts
.81d8						_PKERelease:
.81d8		49 ff		eor #$ff			eor 	#$FF						; clear bit
.81da		3d 5f 06	and $065f,x			and 	KeyStatus,x
.81dd		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.81e0		60		rts				rts
.81e1						UpdateKeyboardJoystick:
.81e1		9c 80 06	stz $0680			stz 	KeyJoystick
.81e4		a2 00		ldx #$00			ldx 	#0
.81e6						_UKJLoop:
.81e6		bd fd 81	lda $81fd,x			lda 	_UKJKeys,x 					; which key
.81e9		29 1f		and #$1f			and 	#$1F
.81eb		a8		tay				tay
.81ec		b9 5f 06	lda $065f,y			lda 	KeyStatus,y 				; get status
.81ef		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.81f1		18		clc				clc  								; set C if bit set
.81f2		69 ff		adc #$ff			adc 	#$FF
.81f4		2e 80 06	rol $0680			rol 	KeyJoystick 				; shift into place
.81f7		e8		inx				inx
.81f8		e0 05		cpx #$05			cpx 	#5 							; do all 5
.81fa		d0 ea		bne $81e6			bne 	_UKJLoop
.81fc		60		rts				rts
.81fd						_UKJKeys:
>81fd		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.8202						KeyboardConvertXA:
.8202		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.8204		8e 7f 06	stx $067f			stx 	KeyMaskTemp
.8207						_KCCALoop:
.8207		18		clc				clc
.8208		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.820a		b0 05		bcs $8211			bcs 	_KCCADone
.820c		0e 7f 06	asl $067f			asl 	KeyMaskTemp 				; shift the mask temp
.820f		80 f6		bra $8207			bra 	_KCCALoop
.8211						_KCCADone:
.8211		aa		tax				tax 								; table entry in X
.8212		ad 7f 06	lda $067f			lda 	KeyMaskTemp 				; mask temp in A.
.8215		60		rts				rts
.065f						GNEBegin:
.065f						KeyStatus:
>065f								.fill 	32
.067f						KeyMaskTemp:
>067f								.fill 	1
.0680						KeyJoystick:
>0680								.fill 	1
.0681						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8216						KNLSetDrive:
.8216		8d 81 07	sta $0781			sta 	KNLDefaultDrive
.8219		60		rts				rts
.821a						KNLOpenFileWrite:
.821a		48		pha				pha
.821b		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.821d		80 03		bra $8222			bra 	KNLOpenStart
.821f						KNLOpenFileRead:
.821f		48		pha				pha
.8220		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.8222						KNLOpenStart:
.8222		85 f5		sta $f5				sta     kernel.args.file.open.mode
.8224		68		pla				pla
.8225		20 60 82	jsr $8260			jsr 	KNLSetupFileName
.8228		20 55 82	jsr $8255			jsr 	KNLSetEventPointer
.822b		ad 81 07	lda $0781			lda 	KNLDefaultDrive 			; currently drive zero only.
.822e		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.8230		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.8233		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.8235		b0 1d		bcs $8254			bcs     _out
.8237						_loop
.8237		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.823a		20 a5 81	jsr $81a5			jsr     GetNextEvent
.823d		b0 f8		bcs $8237			bcs     _loop
.823f		ad 82 07	lda $0782			lda 	KNLEvent.type
.8242		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.8244		f0 0a		beq $8250			beq 	_success
.8246		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8248		f0 0a		beq $8254			beq 	_out
.824a		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.824c		f0 06		beq $8254			beq 	_out
.824e		80 e7		bra $8237			bra     _loop
.8250						_success
.8250		ad 85 07	lda $0785			lda     KNLEvent.file.stream
.8253		18		clc				clc
.8254						_out
.8254		60		rts				rts
.8255						KNLSetEventPointer:
.8255		48		pha				pha
.8256		a9 82		lda #$82			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8258		85 f0		sta $f0				sta     kernel.args.events+0
.825a		a9 07		lda #$07			lda     #KNLEvent >> 8
.825c		85 f1		sta $f1				sta     kernel.args.events+1
.825e		68		pla				pla
.825f		60		rts				rts
.8260						KNLSetupFileName:
.8260		5a		phy				phy 								; save Y on stack
.8261		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.8263		86 37		stx $37				stx 	zTemp0+1
.8265		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8267		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8269		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.826b						_KNLGetLength:
.826b		c8		iny				iny
.826c		b1 36		lda ($36),y			lda 	(zTemp0),y
.826e		d0 fb		bne $826b			bne 	_KNLGetLength
.8270		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.8272		7a		ply				ply
.8273		60		rts				rts
.8274						KNLReadBlock:
.8274		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8276		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8278		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.827b		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.827d		b0 2e		bcs $82ad			bcs     _KGNBExitFail               ; report as general error
.827f						_KGRBEventLoop:
.827f		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8282		20 a5 81	jsr $81a5			jsr     GetNextEvent
.8285		b0 f8		bcs $827f			bcs     _KGRBEventLoop
.8287		ad 82 07	lda $0782			lda 	KNLEvent.type 				; get event
.828a		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.828c		f0 0a		beq $8298			beq     _KNLRBGetNextByte
.828e		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8290		f0 1b		beq $82ad			beq 	_KGNBExitFail
.8292		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8294		f0 17		beq $82ad			beq 	_KGNBExitFail
.8296		80 e7		bra $827f			bra 	_KGRBEventLoop
.8298						_KNLRBGetNextByte:
.8298		a9 81		lda #$81			lda     #<KNLReadBuffer 			; Set the target buffer
.829a		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.829c		a9 06		lda #$06			lda     #>KNLReadBuffer
.829e		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.82a0		ad 88 07	lda $0788			lda     KNLEvent.file.data.read 	; Set the target length
.82a3		85 fd		sta $fd				sta     kernel.args.recv.buflen
.82a5		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.82a8		ad 88 07	lda $0788			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.82ab		18		clc				clc
.82ac		60		rts				rts
.82ad						_KGNBExitFail:
.82ad		38		sec				sec
.82ae		60		rts				rts
.82af						KNLWriteBlock:
.82af		da		phx				phx
.82b0		5a		phy				phy
.82b1		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.82b3		a5 36		lda $36				lda     zTemp0 						; save the data location.
.82b5		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.82b7		a5 37		lda $37				lda     zTemp0+1
.82b9		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.82bb		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.82bd		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.82c0		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.82c2		b0 21		bcs $82e5			bcs 	_KWBFailed
.82c4						_KNLWLoop:
.82c4		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.82c7		20 a5 81	jsr $81a5			jsr     GetNextEvent
.82ca		b0 f8		bcs $82c4			bcs     _KNLWLoop
.82cc		ad 82 07	lda $0782			lda     KNLEvent.type 				; various errors.
.82cf		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.82d1		f0 12		beq $82e5			beq 	_KWBFailed
.82d3		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.82d5		f0 0e		beq $82e5			beq 	_KWBFailed
.82d7		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.82d9		f0 0a		beq $82e5			beq 	_KWBFailed
.82db		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.82dd		d0 e5		bne $82c4			bne 	_KNLWLoop
.82df		18		clc				clc
.82e0		ad 88 07	lda $0788			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.82e3		80 01		bra $82e6			bra 	_KWBExit
.82e5						_KWBFailed:
.82e5		38		sec				sec
.82e6						_KWBExit:
.82e6		7a		ply				ply
.82e7		fa		plx				plx
.82e8		60		rts				rts
.82e9						KNLCloseFile:
.82e9		85 f3		sta $f3				sta     kernel.args.file.close.stream
.82eb		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.82ee		60		rts				rts
.82ef						KNLReadController:
.82ef		da		phx				phx
.82f0		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.82f2		64 01		stz $01				stz 	1 							; switch to I/O 0
.82f4		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.82f7		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.82f9		0d 80 06	ora $0680			ora 	KeyJoystick 				; use key joystick.
.82fc		86 01		stx $01				stx 	1 							; repair old I/O and exit
.82fe		fa		plx				plx
.82ff		60		rts				rts
.0681						KNLReadBuffer:
>0681								.fill   256
.0781						KNLDefaultDrive:
>0781								.byte 	?
.0782						KNLEvent
>0782						type        .byte   ?   ; Enum above
>0783						buf         .byte   ?   ; page id or zero
>0784						ext         .byte   ?   ; page id or zero
.0785						key
>0785						keyboard    .byte   ?   ; Keyboard ID
>0786						raw         .byte   ?   ; Raw key ID
>0787						ascii       .byte   ?   ; ASCII value
>0788						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0785						mouse
.0785						delta
>0785						x           .byte   ?
>0786						y           .byte   ?
>0787						z           .byte   ?
>0788						buttons     .byte   ?
.0785						clicks
>0785						inner       .byte   ?
>0786						middle      .byte   ?
>0787						outer       .byte   ?
.0785						joystick
>0785						joy0        .byte   ?
>0786						joy1        .byte   ?
.0785						udp
>0785						token       .byte   ?   ; TODO: break out into fields
.0785						file
>0785						stream      .byte   ?
>0786						cookie      .byte   ?
.0787						data
>0787						requested   .byte   ?   ; Requested number of bytes to read
>0788						read        .byte   ?   ; Number of bytes actually read
.0787						wrote
>0787						requested   .byte   ?   ; Requested number of bytes to read
>0788						wrote       .byte   ?   ; Number of bytes actually read
.0785						directory
>0785						stream      .byte   ?
>0786						cookie      .byte   ?
.0787						volume
>0787						len         .byte   ?   ; Length of volname (in buf)
>0788						flags       .byte   ?   ; block size, text encoding
.0787						file
>0787						len         .byte   ?
>0788						flags       .byte   ?   ; block scale, text encoding, approx size
.0787						free
>0787						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8300						AssembleGroup1:
.8300		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8302		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8305		80 02		bra $8309			bra 	AsmGroup12
.8307						AssembleGroup2:
.8307		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8309						AsmGroup12:
.8309		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.830c		68		pla				pla 								; pop the return address to access the information following.
.830d		fa		plx				plx
.830e		20 95 83	jsr $8395			jsr 	AccessParameters 			; get opcode and save as base
.8311		8d 20 04	sta $0420			sta 	BaseOpcode
.8314		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8317		d0 08		bne $8321			bne 	_AG12HaveMask
.8319		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.831b		20 9d 83	jsr $839d			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.831e		8d 21 04	sta $0421			sta 	ModeMask
.8321						_AG12HaveMask:
.8321		20 d1 84	jsr $84d1			jsr 	TypeAndCalculateOperand 	; get zero page type
.8324		da		phx				phx 								; save found address mode
.8325		20 01 84	jsr $8401			jsr 	AssembleModeX
.8328		fa		plx				plx  								; restore address mode
.8329		b0 0b		bcs $8336			bcs 	_AG12Exit
.832b		20 37 83	jsr $8337			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.832e		20 01 84	jsr $8401			jsr 	AssembleModeX
.8331		b0 03		bcs $8336			bcs 	_AG12Exit
.8333		4c b9 a9	jmp $a9b9			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8336						_AG12Exit:
.8336		60		rts				rts
.8337						PromoteToAbsolute:
.8337		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8339		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.833b		f0 19		beq $8356			beq 	_PTADo
.833d		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.833f		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8341		f0 13		beq $8356			beq 	_PTADo
.8343		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8345		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8347		f0 0d		beq $8356			beq 	_PTADo
.8349		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.834b		e0 d1		cpx #$d1			cpx 	#AM_IND
.834d		f0 07		beq $8356			beq 	_PTADo
.834f		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8351		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8353		f0 01		beq $8356			beq 	_PTADo
.8355		60		rts				rts
.8356						_PTADo:
.8356		aa		tax				tax
.8357		60		rts				rts
.8358						AssembleGroup3:
.8358		68		pla				pla 								; get parameters, which is just the opcode.
.8359		fa		plx				plx
.835a		20 95 83	jsr $8395			jsr 	AccessParameters 			; get and output opcode
.835d		20 ad 83	jsr $83ad			jsr 	AssemblerWriteByte
.8360		20 35 85	jsr $8535			jsr 	CalculateOperand 			; get a 16 bit operand
.8363		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8365		38		sec				sec
.8366		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8369		48		pha				pha 								; LSB in A
.836a		a5 60		lda $60				lda 	NSMantissa1
.836c		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.836f		aa		tax				tax 								; MSB in X
.8370		68		pla				pla
.8371		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8372		69 7f		adc #$7f			adc 	#$7F
.8374		90 01		bcc $8377			bcc 	_AG3NoCarry
.8376		e8		inx				inx
.8377						_AG3NoCarry:
.8377		38		sec				sec 								; fix back and write out anyways.
.8378		e9 80		sbc #$80			sbc 	#$80
.837a		20 ad 83	jsr $83ad			jsr 	AssemblerWriteByte
.837d		e0 00		cpx #$00			cpx 	#0 							; was it in range
.837f		f0 0a		beq $838b			beq 	_AG3Exit
.8381		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.8384		29 01		and #$01			and 	#1
.8386		f0 03		beq $838b			beq 	_AG3Exit
.8388		4c be a9	jmp $a9be			jmp 	RangeError 					; no, branch is out of range
.838b						_AG3Exit:
.838b		60		rts				rts
.838c						AssembleGroup4:
.838c		68		pla				pla 								; pop address
.838d		fa		plx				plx
.838e		20 95 83	jsr $8395			jsr 	AccessParameters 			; access and get first
.8391		20 ad 83	jsr $83ad			jsr 	AssemblerWriteByte 			; output it.
.8394		60		rts				rts
.8395						AccessParameters:
.8395		8d 1d 04	sta $041d			sta 	ParamStart
.8398		8e 1e 04	stx $041e			stx 	ParamStart+1
.839b		a9 01		lda #$01			lda 	#1
.839d						GetParameter:
.839d		5a		phy				phy
.839e		a8		tay				tay
.839f		ad 1d 04	lda $041d			lda 	ParamStart
.83a2		85 36		sta $36				sta 	zTemp0
.83a4		ad 1e 04	lda $041e			lda 	ParamStart+1
.83a7		85 37		sta $37				sta 	zTemp0+1
.83a9		b1 36		lda ($36),y			lda 	(zTemp0),y
.83ab		7a		ply				ply
.83ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.83ad						AssemblerWriteByte:
.83ad		48		pha			pha
.83ae		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.83b1		29 02		and #$02		and 	#2
.83b3		f0 1b		beq $83d0		beq 	_AWBNoPrint
.83b5		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.83b8		20 eb 83	jsr $83eb		jsr 	PrintHex
.83bb		ad 1a 04	lda $041a		lda		AssemblerAddress
.83be		20 eb 83	jsr $83eb		jsr 	PrintHex
.83c1		a9 20		lda #$20		lda 	#' '
.83c3		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.83c6		68		pla			pla 									; print byte
.83c7		48		pha			pha
.83c8		20 eb 83	jsr $83eb		jsr 	PrintHex
.83cb		a9 0d		lda #$0d		lda 	#13
.83cd		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.83d0						_AWBNoPrint:
.83d0		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.83d3		85 36		sta $36			sta 	zTemp0
.83d5		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.83d8		f0 0e		beq $83e8		beq 	_AWBRange
.83da		85 37		sta $37			sta 	zTemp0+1
.83dc		68		pla			pla 									; write byte out
.83dd		92 36		sta ($36)		sta 	(zTemp0)
.83df		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.83e2		d0 03		bne $83e7		bne 	_AWBNoCarry
.83e4		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.83e7						_AWBNoCarry:
.83e7		60		rts			rts
.83e8						_AWBRange:
.83e8		4c be a9	jmp $a9be		jmp 	RangeError
.83eb						PrintHex:
.83eb		48		pha				pha
.83ec		4a		lsr a				lsr 	a
.83ed		4a		lsr a				lsr 	a
.83ee		4a		lsr a				lsr 	a
.83ef		4a		lsr a				lsr 	a
.83f0		20 f4 83	jsr $83f4			jsr 	_PrintNibble
.83f3		68		pla				pla
.83f4						_PrintNibble:
.83f4		29 0f		and #$0f			and 	#15
.83f6		c9 0a		cmp #$0a			cmp 	#10
.83f8		90 02		bcc $83fc			bcc 	_NoShift
.83fa		69 06		adc #$06			adc 	#6
.83fc						_NoShift:
.83fc		69 30		adc #$30			adc 	#48
.83fe		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8401						AssembleModeX:
.8401		5a		phy				phy
.8402		ad 1f 04	lda $041f			lda 	IsGroup1
.8405		f0 17		beq $841e			beq 	_AMXGroup2
.8407		8a		txa				txa 							; is it in group # 1
.8408		29 40		and #$40			and 	#AM_ISG1
.840a		f0 4d		beq $8459			beq 	_AMXFail 				; no, give up.
.840c		8a		txa				txa 							; get back.
.840d		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.840f		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8411		d0 22		bne $8435			bne 	_AMXHaveInfo
.8413		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.8416		c9 81		cmp #$81			cmp 	#$81
.8418		f0 3f		beq $8459			beq 	_AMXFail
.841a		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.841c		80 17		bra $8435			bra 	_AMXHaveInfo 			; odd design decision there.
.841e						_AMXGroup2:
.841e		8a		txa				txa 							; is it in group 2 ?
.841f		29 20		and #$20			and 	#AM_ISG2
.8421		f0 36		beq $8459			beq 	_AMXFail 				; no, give up.
.8423		8a		txa				txa 							; get the offset into Y
.8424		29 1f		and #$1f			and 	#$1F
.8426		4a		lsr a				lsr 	a 						; make it 0-7.
.8427		4a		lsr a				lsr  	a
.8428		a8		tay				tay
.8429		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.842c						_AMXCheckOkay:
.842c		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.842d		88		dey				dey
.842e		10 fc		bpl $842c			bpl 	_AMXCheckOkay
.8430		90 27		bcc $8459			bcc 	_AMXFail 				; not allowed.
.8432		8a		txa				txa  							; get mask back
.8433		29 1f		and #$1f			and 	#$1F
.8435						_AMXHaveInfo:
.8435		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8437		10 04		bpl $843d			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8439		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.843b		d0 1c		bne $8459			bne 	_AMXFail
.843d						_AMXAnySize:
.843d		18		clc				clc 							; add offset to the base opcode
.843e		6d 20 04	adc $0420			adc 	BaseOpcode
.8441						_AMXOutputCode:
.8441		20 ad 83	jsr $83ad			jsr 	AssemblerWriteByte 		; write the opcode out.
.8444		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8446		f0 0e		beq $8456			beq 	_AMXExit
.8448		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.844a		20 ad 83	jsr $83ad			jsr 	AssemblerWriteByte
.844d		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.844f		30 05		bmi $8456			bmi 	_AMXExit
.8451		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8453		20 ad 83	jsr $83ad			jsr 	AssemblerWriteByte
.8456						_AMXExit:
.8456		7a		ply				ply
.8457		38		sec				sec
.8458		60		rts				rts
.8459						_AMXFail:
.8459		a0 00		ldy #$00			ldy 	#0
.845b						_AMXCheckOddities:
.845b		8a		txa				txa
.845c		d9 83 84	cmp $8483,y			cmp 	ExtraOpcode+2,y 		; match address mode
.845f		d0 15		bne $8476			bne 	_AMXCONext
.8461		b9 81 84	lda $8481,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8464		cd 20 04	cmp $0420			cmp 	BaseOpcode
.8467		d0 0d		bne $8476			bne 	_AMXCONext
.8469		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.846b		10 04		bpl $8471			bpl 	_AMXCONotZero
.846d		a5 60		lda $60				lda 	NSMantissa1
.846f		d0 05		bne $8476			bne 	_AMXCONext
.8471						_AMXCONotZero:
.8471		b9 82 84	lda $8482,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8474		80 cb		bra $8441			bra 	_AMXOutputCode 			; and assemble it
.8476						_AMXCONext:
.8476		c8		iny				iny
.8477		c8		iny				iny
.8478		c8		iny				iny
.8479		b9 81 84	lda $8481,y			lda 	ExtraOpcode+0,y 		; end of table
.847c		d0 dd		bne $845b			bne 	_AMXCheckOddities
.847e						_AMXCOFail:
.847e		7a		ply				ply
.847f		18		clc				clc
.8480		60		rts				rts
.8481						ExtraOpcode:
>8481		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8484		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8487		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>848a		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>848d		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8490		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8493		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8496		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8499		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>849c		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>849f		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.84a0						LabelHere:
.84a0		c8		iny				iny 								; skip .
.84a1		a2 00		ldx #$00			ldx 	#0 							; get a term
.84a3		20 08 a1	jsr $a108			jsr 	EvaluateTerm
.84a6		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.84a8		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.84aa		d0 22		bne $84ce			bne 	_ALType 					; otherwise typing error
.84ac		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.84ae		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.84b0		b5 60		lda $60,x			lda 	NSMantissa1,x
.84b2		85 37		sta $37				sta 	zTemp0+1
.84b4		5a		phy				phy 								; copy address in (64k)
.84b5		a0 01		ldy #$01			ldy 	#1
.84b7		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.84ba		92 36		sta ($36)			sta 	(zTemp0)
.84bc		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.84bf		91 36		sta ($36),y			sta 	(zTemp0),y
.84c1		c8		iny				iny
.84c2		a9 00		lda #$00			lda 	#0 							; zero the rest.
.84c4		91 36		sta ($36),y			sta 	(zTemp0),y
.84c6		c8		iny				iny
.84c7		91 36		sta ($36),y			sta 	(zTemp0),y
.84c9		c8		iny				iny
.84ca		91 36		sta ($36),y			sta 	(zTemp0),y
.84cc		7a		ply				ply
.84cd		60		rts				rts
.84ce						_ALType:
.84ce		4c c3 a9	jmp $a9c3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.84d1						TypeAndCalculateOperand:
.84d1		b1 30		lda ($30),y			lda 	(codePtr),y
.84d3		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.84d5		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.84d7		f0 5b		beq $8534			beq 	_TACOExit
.84d9		c9 80		cmp #$80			cmp 	#KWC_EOL
.84db		f0 57		beq $8534			beq 	_TACOExit
.84dd		c8		iny				iny
.84de		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.84e0		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.84e2		f0 51		beq $8535			beq 	CalculateOperand
.84e4		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.84e6		f0 1f		beq $8507			beq 	_TACOIndirect
.84e8		88		dey				dey 								; undo get of first character
.84e9		20 35 85	jsr $8535			jsr 	CalculateOperand 			; get operand
.84ec		b1 30		lda ($30),y			lda 	(codePtr),y
.84ee		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.84f0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84f2		d0 40		bne $8534			bne 	_TACOExit
.84f4		c8		iny				iny
.84f5		20 3f 85	jsr $853f			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.84f8		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.84fa		c9 58		cmp #$58			cmp 	#'X'
.84fc		f0 36		beq $8534			beq 	_TACOExit
.84fe		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8500		c9 59		cmp #$59			cmp 	#'Y'
.8502		f0 30		beq $8534			beq 	_TACOExit
.8504						_TACOSyntax:
.8504		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
.8507						_TACOIndirect:
.8507		20 35 85	jsr $8535			jsr 	CalculateOperand 			; get the operand
.850a		b1 30		lda ($30),y			lda 	(codePtr),y
.850c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.850e		f0 17		beq $8527			beq 	_TACOIndX
.8510		20 a1 97	jsr $97a1			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8513		b1 30		lda ($30),y			lda 	(codePtr),y
.8515		a2 d1		ldx #$d1			ldx 	#AM_IND
.8517		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8519		d0 19		bne $8534			bne 	_TACOExit
.851b		c8		iny				iny
.851c		20 3f 85	jsr $853f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.851f		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8521		d0 e1		bne $8504			bne 	_TACOSyntax
.8523		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8525		80 0d		bra $8534			bra 	_TACOExit
.8527						_TACOIndX:
.8527		c8		iny				iny
.8528		20 3f 85	jsr $853f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.852b		c9 58		cmp #$58			cmp 	#'X' 						; check X
.852d		d0 d5		bne $8504			bne 	_TACOSyntax
.852f		20 a1 97	jsr $97a1			jsr 	CheckRightBracket			; check )
.8532		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8534						_TACOExit:
.8534		60		rts				rts
.8535						CalculateOperand:
.8535		48		pha				pha
.8536		da		phx				phx
.8537		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8539		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.853c		fa		plx				plx
.853d		68		pla				pla
.853e		60		rts				rts
.853f						TACOCheckXY:
.853f		b1 30		lda ($30),y			lda 	(codePtr),y
.8541		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8543		c9 40		cmp #$40			cmp 	#$40
.8545		d0 21		bne $8568			bne 	_TCXYFail
.8547		b1 30		lda ($30),y			lda 	(codePtr),y
.8549		18		clc				clc
.854a		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.854c		85 37		sta $37				sta 	zTemp0+1
.854e		c8		iny				iny
.854f		b1 30		lda ($30),y			lda 	(codePtr),y
.8551		c8		iny				iny
.8552		85 36		sta $36				sta 	zTemp0
.8554		5a		phy				phy 								; save position
.8555		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8557		b1 36		lda ($36),y			lda 	(zTemp0),y
.8559		d0 0c		bne $8567			bne 	_TCXYPopFail
.855b		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.855d		b1 36		lda ($36),y			lda 	(zTemp0),y
.855f		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8561		f0 08		beq $856b			beq 	_TCXYFound
.8563		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8565		f0 04		beq $856b			beq 	_TCXYFound
.8567						_TCXYPopFail:
.8567		7a		ply				ply
.8568						_TCXYFail:
.8568		a9 00		lda #$00			lda 	#0
.856a		60		rts				rts
.856b						_TCXYFound:
.856b		7a		ply				ply 								; restore position
.856c		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.856e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.856f						BackloadProgram:
.856f		20 e5 91	jsr $91e5			jsr 	NewProgram 					; does the actual NEW.
.8572		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.8574		a9 c6		lda #$c6			lda 	#_BLLoad & $FF
.8576		20 13 98	jsr $9813			jsr 	PrintStringXA
.8579		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.857b		8d 89 07	sta $0789			sta 	BackLoadPage
.857e		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8580		8d 8a 07	sta $078a			sta 	0+BackLoadPointer
.8583		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8585		8d 8b 07	sta $078b			sta 	1+BackLoadPointer
.8588		a9 ff		lda #$ff			lda 	#$FF
.858a		8d fa ff	sta $fffa			sta 	$FFFA
.858d						_BPLoop:
.858d		a2 ff		ldx #$ff			ldx 	#$FF
.858f		20 db 85	jsr $85db			jsr 	BLReadByte 					; read a byte
.8592		c9 00		cmp #$00			cmp 	#0
.8594		f0 29		beq $85bf			beq 	_BPExit 					; if 0 exit
.8596		30 27		bmi $85bf			bmi 	_BPExit 					; if -ve exit
.8598						_BPCopy:
.8598		e8		inx				inx  								; copy byte into the lineBuffer
.8599		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.859c		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.859f		20 db 85	jsr $85db			jsr 	BLReadByte 					; read next byte
.85a2		30 0a		bmi $85ae			bmi 	_BPEndLine 					; -ve = EOL
.85a4		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.85a6		d0 02		bne $85aa			bne 	_BPNotTab
.85a8		a9 20		lda #$20			lda 	#' '
.85aa						_BPNotTab:
.85aa		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.85ac		b0 ea		bcs $8598			bcs 	_BPCopy 					; until a control character, should be 13 received.
.85ae						_BPEndLine:
.85ae		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.85b1		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.85b4		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85b7		f0 d4		beq $858d			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.85b9		38		sec				sec 								; append not insert
.85ba		20 ad ab	jsr $abad			jsr 	MemoryInsertLine 			; append to current program
.85bd		80 ce		bra $858d			bra 	_BPLoop
.85bf						_BPExit:
.85bf		9c fa ff	stz $fffa			stz 	$FFFA
.85c2		20 c7 86	jsr $86c7			jsr 	ClearCommand 				; clear variables etc.
.85c5		60		rts				rts
.85c6						_BLLoad:
>85c6		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>85ce		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.85db						BLReadByte:
.85db		da		phx				phx
.85dc		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.85de		ad 89 07	lda $0789			lda 	BackLoadPage	 			; set current page
.85e1		85 0b		sta $0b				sta 	8+3
.85e3		ad 8a 07	lda $078a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.85e6		85 36		sta $36				sta 	zTemp0
.85e8		ad 8b 07	lda $078b			lda 	BackLoadPointer+1
.85eb		85 37		sta $37				sta 	zTemp0+1
.85ed		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.85ef		ee 8a 07	inc $078a			inc 	BackLoadPointer 			; bump pointer
.85f2		d0 0f		bne $8603			bne 	_BLNoCarry
.85f4		ee 8b 07	inc $078b			inc 	BackLoadPointer+1
.85f7		10 0a		bpl $8603			bpl 	_BLNoCarry 					; need a new page
.85f9		48		pha				pha
.85fa		a9 60		lda #$60			lda 	#$60 						; reset pointer
.85fc		8d 8b 07	sta $078b			sta 	BackLoadPointer+1
.85ff		ee 89 07	inc $0789			inc 	BackLoadPage 				; next page from source.
.8602		68		pla				pla
.8603						_BLNoCarry:
.8603		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8605		fa		plx				plx
.8606		c9 00		cmp #$00			cmp 	#0
.8608		60		rts				rts
.0789						BackLoadPage:
>0789								.fill  	1
.078a						BackLoadPointer:
>078a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8609						EditProgramCode:
.8609		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.860c		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.860f		20 51 ac	jsr $ac51			jsr 	MemorySearch
.8612		90 05		bcc $8619			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8614		d0 03		bne $8619			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8616		20 76 ab	jsr $ab76			jsr 	MemoryDeleteLine 			; delete the line
.8619						_EPCNoDelete:
.8619		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.861c		c9 80		cmp #$80			cmp 	#KWC_EOL
.861e		f0 0d		beq $862d			beq 	_EPCNoInsert
.8620		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8623		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8626		20 51 ac	jsr $ac51			jsr 	MemorySearch
.8629		18		clc				clc 								; insert at this point.
.862a		20 ad ab	jsr $abad			jsr 	MemoryInsertLine 			; insert the line
.862d						_EPCNoInsert:
.862d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.862e						WarmStart:
.862e		a2 ff		ldx #$ff			ldx 	#$FF
.8630		9a		txs				txs
.8631		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8633		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8636		20 9c 81	jsr $819c			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8639		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.863c		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line
.863f		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.8642		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8645		d0 17		bne $865e			bne 	_WSEditCode 				; if so,edit code.
.8647		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.864a		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.864c		85 30		sta $30				sta 	codePtr
.864e		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8650		85 31		sta $31				sta 	codePtr+1
.8652		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8655		c9 80		cmp #$80			cmp 	#KWC_EOL
.8657		f0 d5		beq $862e			beq 	WarmStart
.8659		20 82 93	jsr $9382			jsr 	RUNCodePointerLine 			; execute that line.
.865c		80 d0		bra $862e			bra 	WarmStart
.865e						_WSEditCode:
.865e		20 09 86	jsr $8609			jsr 	EditProgramCode 			; edit the program code
.8661		20 c7 86	jsr $86c7			jsr 	ClearCommand 				; clear all variables etc.
.8664		80 c8		bra $862e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8666						AssembleCommand:
.8666		a2 00		ldx #$00			ldx 	#0
.8668		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; start address
.866b		a5 58		lda $58				lda 	NSMantissa0
.866d		8d 1a 04	sta $041a			sta 	AssemblerAddress
.8670		a5 60		lda $60				lda 	NSMantissa1
.8672		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8675		20 a9 97	jsr $97a9			jsr 	CheckComma
.8678		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; options 0-3
.867b		a5 58		lda $58				lda 	NSMantissa0
.867d		8d 1c 04	sta $041c			sta 	AssemblerControl
.8680		60		rts				rts
.8681		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8682						AssertCommand:
.8682		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8684		20 81 a6	jsr $a681			jsr 	EvaluateInteger 			; the assert test
.8687		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; exit if result is non zero.
.868a		d0 05		bne $8691			bne 	_ACExit
.868c		a9 0a		lda #$0a		lda	#10
.868e		4c ba 97	jmp $97ba		jmp	ErrorHandler
.8691						_ACExit:
.8691		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8692						CallCommand:
.8692		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8694		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.8697						_CCClear
.8697		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8698		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; these are optional sequentially.
.869b		e0 04		cpx #$04			cpx 	#4
.869d		d0 f8		bne $8697			bne 	_CCClear
.869f		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.86a1						_CCCParam:
.86a1		b1 30		lda ($30),y			lda 	(codePtr),y
.86a3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86a5		d0 09		bne $86b0			bne 	_CCCRun6502
.86a7		c8		iny				iny 								; skip comma
.86a8		e8		inx				inx	 								; next level
.86a9		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get A/X/Y
.86ac		e0 03		cpx #$03			cpx 	#3
.86ae		90 f1		bcc $86a1			bcc 	_CCCParam 					; done all 3 ?
.86b0						_CCCRun6502:
.86b0		5a		phy				phy 								; save position
.86b1		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.86b3		85 37		sta $37				sta 	zTemp0+1
.86b5		a5 58		lda $58				lda 	NSMantissa0
.86b7		85 36		sta $36				sta 	zTemp0
.86b9		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.86bb		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.86bd		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.86bf		20 c4 86	jsr $86c4			jsr 	_CCCZTemp0 					; call zTemp0
.86c2		7a		ply				ply 								; restore position and exit
.86c3		60		rts				rts
.86c4						_CCCZTemp0:
.86c4		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.86c7						ClearCommand:
.86c7		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.86c9		85 36		sta $36				sta 	0+zTemp0
.86cb		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.86cd		85 37		sta $37				sta 	1+zTemp0
.86cf						_ClearZeroLoop:
.86cf		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.86d1		f0 24		beq $86f7			beq 	_ClearZeroEnd
.86d3		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.86d5		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.86d7						_ClearOneVariable:
.86d7		91 36		sta ($36),y			sta 	(zTemp0),y
.86d9		c8		iny				iny
.86da		c0 08		cpy #$08			cpy 	#8
.86dc		d0 f9		bne $86d7			bne 	_ClearOneVariable
.86de		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.86e0		b1 36		lda ($36),y			lda 	(zTemp0),y
.86e2		c9 18		cmp #$18			cmp 	#NSTProcedure
.86e4		d0 04		bne $86ea			bne 	_ClearNotProcedure
.86e6		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.86e8		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.86ea						_ClearNotProcedure:
.86ea		18		clc				clc 								; go to the next variable
.86eb		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.86ed		65 36		adc $36				adc 	zTemp0
.86ef		85 36		sta $36				sta 	zTemp0
.86f1		90 dc		bcc $86cf			bcc 	_ClearZeroLoop
.86f3		e6 37		inc $37				inc 	zTemp0+1
.86f5		80 d8		bra $86cf			bra 	_ClearZeroLoop
.86f7						_ClearZeroEnd:
.86f7		18		clc				clc
.86f8		a5 36		lda $36				lda 	zTemp0
.86fa		69 01		adc #$01			adc 	#1
.86fc		8d 08 04	sta $0408			sta 	lowMemPtr
.86ff		a5 37		lda $37				lda 	zTemp0+1
.8701		69 00		adc #$00			adc 	#0
.8703		8d 09 04	sta $0409			sta 	lowMemPtr+1
.8706		20 99 b0	jsr $b099			jsr 	StackReset
.8709		20 ff b0	jsr $b0ff			jsr 	StringSystemInitialise
.870c		20 aa 96	jsr $96aa			jsr 	ProcedureScan
.870f		20 24 93	jsr $9324			jsr 	Command_Restore
.8712		9c 1a 04	stz $041a			stz 	AssemblerAddress
.8715		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.8718		9c 1c 04	stz $041c			stz 	AssemblerControl
.871b		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.871e		20 f4 a2	jsr $a2f4			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8721		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.8722						XLoadCommand:
.8722		20 e5 91	jsr $91e5			jsr 	NewProgram
.8725		20 6f 85	jsr $856f			jsr 	BackloadProgram
.8728		4c 2e 86	jmp $862e			jmp 	WarmStart
.872b						XGoCommand:
.872b		20 e5 91	jsr $91e5			jsr 	NewProgram
.872e		20 6f 85	jsr $856f			jsr 	BackloadProgram
.8731		4c 70 93	jmp $9370			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8734						Command_Data:
.8734		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8736		a2 80		ldx #$80			ldx 	#KWC_EOL
.8738		20 fc 96	jsr $96fc			jsr 	ScanForward
.873b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.873c						DimCommand:
.873c		b1 30		lda ($30),y			lda 	(codePtr),y
.873e		29 c0		and #$c0			and 	#$C0
.8740		c9 40		cmp #$40			cmp 	#$40
.8742		d0 7a		bne $87be			bne 	_DCSyntax 				; n o, error.
.8744		b1 30		lda ($30),y			lda 	(codePtr),y
.8746		18		clc				clc
.8747		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8749		85 3f		sta $3f				sta 	zaTemp+1
.874b		c8		iny				iny
.874c		b1 30		lda ($30),y			lda 	(codePtr),y
.874e		c8		iny				iny
.874f		85 3e		sta $3e				sta 	zaTemp
.8751		5a		phy				phy
.8752		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8754		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8756		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8758		c9 18		cmp #$18			cmp 	#NSTProcedure
.875a		f0 62		beq $87be			beq 	_DCSyntax
.875c		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.875e		29 04		and #$04			and 	#NSBIsArray
.8760		f0 64		beq $87c6			beq 	_DCType
.8762		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8764		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8766		d0 59		bne $87c1			bne 	_DCRedefine
.8768		7a		ply				ply
.8769		20 c9 87	jsr $87c9			jsr 	_DCGetSize 				; get array size, check it.
.876c		5a		phy				phy
.876d		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.876f		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8771		7a		ply				ply 							; is there a second (e.g. ,x)
.8772		b1 30		lda ($30),y			lda 	(codePtr),y
.8774		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8776		d0 0a		bne $8782			bne 	_DCOneDimension
.8778		c8		iny				iny 							; skip comma
.8779		20 c9 87	jsr $87c9			jsr 	_DCGetSize 				; get 2nd array size
.877c		5a		phy				phy
.877d		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.877f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8781		7a		ply				ply
.8782						_DCOneDimension:
.8782		5a		phy				phy 							; save position
.8783		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8785		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8787		aa		tax				tax
.8788		c8		iny				iny
.8789		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.878b		e8		inx				inx 							; bump them.
.878c		1a		inc a				inc 	a
.878d		20 bf a6	jsr $a6bf			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8790		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8792		29 e0		and #$e0			and 	#$E0
.8794		d0 23		bne $87b9			bne 	_DCSize
.8796		a0 02		ldy #$02			ldy 	#2 						; get base type
.8798		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.879a		20 d7 87	jsr $87d7			jsr 	ScaleByBaseType 		; scale by base type
.879d		a5 36		lda $36				lda 	zTemp0
.879f		a6 37		ldx $37				ldx 	zTemp0+1
.87a1		20 b6 a2	jsr $a2b6			jsr 	AllocateXABytes 		; allocate memory
.87a4		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.87a6		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87a8		c8		iny				iny
.87a9		8a		txa				txa
.87aa		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87ac		7a		ply				ply 							; get position back
.87ad		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 		; check )
.87b0		b1 30		lda ($30),y			lda 	(codePtr),y
.87b2		c8		iny				iny 							; consume in case
.87b3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.87b5		f0 85		beq $873c			beq 	DimCommand
.87b7		88		dey				dey 							; undo consume
.87b8		60		rts				rts
.87b9						_DCSize:
.87b9		a9 16		lda #$16		lda	#22
.87bb		4c ba 97	jmp $97ba		jmp	ErrorHandler
.87be						_DCSyntax:
.87be		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
.87c1						_DCRedefine:
.87c1		a9 15		lda #$15		lda	#21
.87c3		4c ba 97	jmp $97ba		jmp	ErrorHandler
.87c6						_DCType:
.87c6		4c c3 a9	jmp $a9c3			jmp 	TypeError
.87c9						_DCGetSize:
.87c9		a2 00		ldx #$00			ldx 	#0 						; get first index.
.87cb		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 	; get array dimension
.87ce		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.87d0		f0 e7		beq $87b9			beq 	_DCSize
.87d2		c9 fe		cmp #$fe			cmp 	#254
.87d4		f0 e3		beq $87b9			beq 	_DCSize
.87d6		60		rts				rts
.87d7						ScaleByBaseType:
.87d7		29 10		and #$10			and 	#NSBIsString 			; is it string
.87d9		d0 19		bne $87f4			bne 	_SBBTString
.87db		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.87dd		48		pha				pha
.87de		a5 36		lda $36				lda 	zTemp0
.87e0		48		pha				pha
.87e1		06 36		asl $36				asl 	zTemp0 					; x 2
.87e3		26 37		rol $37				rol 	zTemp0+1
.87e5		06 36		asl $36				asl 	zTemp0 					; x 4
.87e7		26 37		rol $37				rol 	zTemp0+1
.87e9		68		pla				pla 							; add stacked value = x 5
.87ea		65 36		adc $36				adc 	zTemp0
.87ec		85 36		sta $36				sta 	zTemp0
.87ee		68		pla				pla
.87ef		65 37		adc $37				adc 	zTemp0+1
.87f1		85 37		sta $37				sta 	zTemp0+1
.87f3		60		rts				rts
.87f4						_SBBTString:
.87f4		06 36		asl $36				asl 	zTemp0
.87f6		26 37		rol $37				rol 	zTemp0+1
.87f8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.87f9						BootDOS:
.87f9		a9 07		lda #$07	            lda     #dosName & $FF
.87fb		85 fb		sta $fb		            sta     kernel.args.buf+0
.87fd		a9 88		lda #$88	            lda     #dosName >> 8
.87ff		85 fc		sta $fc		            sta     kernel.args.buf+1
.8801		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.8804		4c 2e 86	jmp $862e	            jmp 	WarmStart
>8807		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.880b						EndCommand:
.880b		4c 2e 86	jmp $862e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.880e						UnaryEvent:
.880e		fa		plx				plx
.880f		20 95 96	jsr $9695			jsr 	TimerToStackX 				; timer in +0
.8812		e8		inx				inx  								; put reference into +1
.8813		20 08 a1	jsr $a108			jsr 	EvaluateTerm
.8816		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.8818		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.881a		d0 4c		bne $8868			bne 	_UEType
.881c		e8		inx				inx 								; put the step in +2
.881d		20 a9 97	jsr $97a9			jsr 	CheckComma
.8820		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.8823		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.8826		ca		dex				dex
.8827		ca		dex				dex
.8828		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.882a		85 36		sta $36				sta 	zTemp0
.882c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.882e		85 37		sta $37				sta 	zTemp0+1
.8830		5a		phy				phy
.8831		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8833		b1 36		lda ($36),y			lda 	(zTemp0),y
.8835		30 2d		bmi $8864			bmi 	_UEFalse 					; exit if signed.
.8837		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8839		b5 58		lda $58,x			lda 	NSMantissa0,x
.883b		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.883d		c8		iny				iny
.883e		b5 60		lda $60,x			lda 	NSMantissa1,x
.8840		f1 36		sbc ($36),y			sbc		(zTemp0),y
.8842		c8		iny				iny
.8843		b5 68		lda $68,x			lda 	NSMantissa2,x
.8845		f1 36		sbc ($36),y			sbc		(zTemp0),y
.8847		90 1b		bcc $8864			bcc 	_UEFalse 					; no, return FALSE.
.8849		18		clc				clc
.884a		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.884c		b5 58		lda $58,x			lda 	NSMantissa0,x
.884e		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.8850		91 36		sta ($36),y			sta 	(zTemp0),y
.8852		c8		iny				iny
.8853		b5 60		lda $60,x			lda 	NSMantissa1,x
.8855		75 62		adc $62,x			adc 	NSMantissa1+2,x
.8857		91 36		sta ($36),y			sta 	(zTemp0),y
.8859		c8		iny				iny
.885a		b5 68		lda $68,x			lda 	NSMantissa2,x
.885c		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.885e		91 36		sta ($36),y			sta 	(zTemp0),y
.8860		7a		ply				ply
.8861		4c 27 98	jmp $9827			jmp 	ReturnTrue
.8864						_UEFalse:
.8864		7a		ply				ply 								; restore Y
.8865		4c 32 98	jmp $9832			jmp 	ReturnFalse 				; and return False
.8868						_UEType:
.8868		4c c3 a9	jmp $a9c3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.886b						Command_BLoad:
.886b		a2 00		ldx #$00			ldx 	#0
.886d		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; file name to load
.8870		20 a9 97	jsr $97a9			jsr 	CheckComma 					; consume comma
.8873		e8		inx				inx
.8874		20 81 a6	jsr $a681			jsr 	EvaluateInteger 			; load address (full physical address)
.8877		5a		phy				phy
.8878		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.887a		a6 60		ldx $60				ldx 	NSMantissa1
.887c		20 1f 82	jsr $821f			jsr 	KNLOpenFileRead 			; open file for reading
.887f		b0 4e		bcs $88cf			bcs 	CBLErrorHandler 			; error, so fail.
.8881		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8884		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8886		20 d2 88	jsr $88d2			jsr 	BLOpenPhysicalMemory 		; open for access.
.8889						_BLReadFile:
.8889		ad 90 07	lda $0790			lda 	BasicFileStream
.888c		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.888e		20 74 82	jsr $8274			jsr 	KNLReadBlock 				; read next block
.8891		b0 22		bcs $88b5			bcs 	_BLFileError 				; file error, which might be EOF.
.8893		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8895		f0 f2		beq $8889			beq 	_BLReadFile
.8897		8d 8e 07	sta $078e			sta 	BLCopyCounter 				; counter.
.889a		ac 8d 07	ldy $078d			ldy 	BLYOffset 					; copy the buffer out here
.889d		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.889f						_BLCopyLoop:
.889f		bd 81 06	lda $0681,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.88a2		91 3a		sta ($3a),y			sta 	(zTemp2),y
.88a4		c8		iny				iny
.88a5		d0 03		bne $88aa			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.88a7		20 fa 88	jsr $88fa			jsr 	BLAdvancePhysicalMemory
.88aa						_BLNoAdjust:
.88aa		e8		inx				inx
.88ab		ce 8e 07	dec $078e			dec 	BLCopyCounter
.88ae		d0 ef		bne $889f			bne 	_BLCopyLoop
.88b0		8c 8d 07	sty $078d			sty 	BLYOffset 					; update Y offset
.88b3		80 d4		bra $8889			bra 	_BLReadFile 				; go ask for more.
.88b5						_BLFileError:
.88b5		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.88b7		d0 16		bne $88cf			bne 	CBLErrorHandler				; no, it's an actual error
.88b9		20 f4 88	jsr $88f4			jsr 	BLClosePhysicalMemory 		; close the access.
.88bc		ad 90 07	lda $0790			lda 	BasicFileStream 			; close the file
.88bf		20 e9 82	jsr $82e9			jsr 	KNLCloseFile
.88c2		7a		ply				ply
.88c3		60		rts				rts
.88c4						CBLCloseError:
.88c4		48		pha				pha
.88c5		20 f4 88	jsr $88f4			jsr 	BLClosePhysicalMemory
.88c8		ad 90 07	lda $0790			lda 	BasicFileStream
.88cb		20 e9 82	jsr $82e9			jsr 	KNLCloseFile
.88ce		68		pla				pla
.88cf						CBLErrorHandler:
.88cf		4c b8 8a	jmp $8ab8			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.88d2						BLOpenPhysicalMemory:
.88d2		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.88d4		8d 8c 07	sta $078c			sta 	BLNormalMapping
.88d7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.88d9		8d 8d 07	sta $078d			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.88dc		64 3a		stz $3a				stz 	zTemp2
.88de		b5 60		lda $60,x			lda 	NSMantissa1,x
.88e0		29 1f		and #$1f			and 	#$1F
.88e2		09 60		ora #$60			ora 	#BLAccessPage << 5
.88e4		85 3b		sta $3b				sta 	zTemp2+1
.88e6		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.88e8		16 60		asl $60,x			asl 	NSMantissa1,x
.88ea		2a		rol a				rol 	a
.88eb		16 60		asl $60,x			asl 	NSMantissa1,x
.88ed		2a		rol a				rol 	a
.88ee		16 60		asl $60,x			asl 	NSMantissa1,x
.88f0		2a		rol a				rol 	a
.88f1		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.88f3		60		rts				rts
.88f4						BLClosePhysicalMemory:
.88f4		ad 8c 07	lda $078c			lda 	BLNormalMapping
.88f7		85 0b		sta $0b				sta 	BLAccessPage+8
.88f9		60		rts				rts
.88fa						BLAdvancePhysicalMemory:
.88fa		48		pha				pha
.88fb		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.88fd		a5 3b		lda $3b				lda 	zTemp2+1
.88ff		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8901		d0 06		bne $8909			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8903		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8905		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8907		85 3b		sta $3b				sta 	zTemp2+1
.8909						_BLAPMExit:
.8909		68		pla				pla
.890a		60		rts				rts
.078c						BLNormalMapping:
>078c								.fill 	1
.078d						BLYOffset:
>078d								.fill 	1
.078e						BLCopyCounter:
>078e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.890b						Command_BSave:
.890b		a2 00		ldx #$00			ldx 	#0
.890d		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; file name to load
.8910		20 a9 97	jsr $97a9			jsr 	CheckComma 					; consume comma
.8913		e8		inx				inx
.8914		20 81 a6	jsr $a681			jsr 	EvaluateInteger 			; load address (full physical address)
.8917		20 a9 97	jsr $97a9			jsr 	CheckComma 					; consume comma
.891a		e8		inx				inx
.891b		20 81 a6	jsr $a681			jsr 	EvaluateInteger 			; data length (3 bytes only)
.891e		5a		phy				phy
.891f		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8921		a6 60		ldx $60				ldx 	NSMantissa1
.8923		20 1a 82	jsr $821a			jsr 	KNLOpenFileWrite 			; open file for reading
.8926		b0 62		bcs $898a			bcs 	CBSErrorHandler 			; error, so fail.
.8928		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.892b		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.892d		20 d2 88	jsr $88d2			jsr 	BLOpenPhysicalMemory 		; open for access.
.8930		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.8932		ac 8d 07	ldy $078d			ldy 	BLYOffset 					; used for data offset.
.8935						_BSWriteToFileLoop:
.8935		38		sec				sec 								; pre decrement count.
.8936		a5 5a		lda $5a				lda 	NSMantissa0+2
.8938		e9 01		sbc #$01			sbc 	#1
.893a		85 5a		sta $5a				sta 	NSMantissa0+2
.893c		a5 62		lda $62				lda 	NSMantissa1+2
.893e		e9 00		sbc #$00			sbc 	#0
.8940		85 62		sta $62				sta 	NSMantissa1+2
.8942		a5 6a		lda $6a				lda 	NSMantissa2+2
.8944		e9 00		sbc #$00			sbc 	#0
.8946		85 6a		sta $6a				sta 	NSMantissa2+2
.8948		30 15		bmi $895f			bmi 	_BSFileComplete 			; undercounted, so exit.
.894a		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.894c		9d 81 06	sta $0681,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.894f		e8		inx				inx
.8950		c8		iny				iny 								; next byte
.8951		d0 03		bne $8956			bne 	_BSNoCheck
.8953		20 fa 88	jsr $88fa			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.8956						_BSNoCheck:
.8956		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.8958		d0 db		bne $8935			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.895a		20 6d 89	jsr $896d			jsr 	BSFlushBuffer 				; yes, flush the buffer
.895d		80 d6		bra $8935			bra 	_BSWriteToFileLoop 			; and keep on going
.895f						_BSFileComplete:
.895f		20 6d 89	jsr $896d			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8962		20 f4 88	jsr $88f4			jsr 	BLClosePhysicalMemory 		; close the access.
.8965		ad 90 07	lda $0790			lda 	BasicFileStream 			; close the file
.8968		20 e9 82	jsr $82e9			jsr 	KNLCloseFile
.896b		7a		ply				ply
.896c		60		rts				rts
.896d						BSFlushBuffer:
.896d		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.896f		f0 0d		beq $897e			beq 	_BSFBExit 					; if so, exit.
.8971		a9 81		lda #$81			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8973		85 36		sta $36				sta 	zTemp0
.8975		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.8977		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8979		20 74 8b	jsr $8b74			jsr 	CLWriteByteBlock 			; write it.
.897c		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.897e						_BSFBExit:
.897e		60		rts				rts
.897f						CBSSCloseError:
.897f		48		pha				pha
.8980		20 f4 88	jsr $88f4			jsr 	BLClosePhysicalMemory
.8983		ad 90 07	lda $0790			lda 	BasicFileStream
.8986		20 e9 82	jsr $82e9			jsr 	KNLCloseFile
.8989		68		pla				pla
.898a						CBSErrorHandler:
.898a		4c b8 8a	jmp $8ab8			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.898d						Command_Dir:
.898d		ad 81 07	lda $0781			lda     KNLDefaultDrive				; set drive to list.
.8990		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8992		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.8994		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8997		b0 4f		bcs $89e8			bcs     _CDExit
.8999						_CDEventLoop:
.8999		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.899c		20 a5 81	jsr $81a5			jsr     GetNextEvent
.899f		b0 f8		bcs $8999			bcs     _CDEventLoop
.89a1		ad 82 07	lda $0782			lda     KNLEvent.type
.89a4		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.89a6		f0 40		beq $89e8			beq    	_CDExit
.89a8		20 ad 89	jsr $89ad			jsr     _CDMessages 				; handle various messages
.89ab		80 ec		bra $8999			bra     _CDEventLoop
.89ad						_CDMessages:
.89ad		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.89af		f0 15		beq $89c6			beq     _CDEVRead
.89b1		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.89b3		f0 19		beq $89ce			beq     _CDEVVolume
.89b5		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.89b7		f0 32		beq $89eb			beq     _CDEVFile
.89b9		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.89bb		f0 70		beq $8a2d			beq     _CDEVFree
.89bd		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.89bf		f0 6e		beq $8a2f			beq     _CDEVEOF
.89c1		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.89c3		f0 6a		beq $8a2f			beq     _CDEVEOF
.89c5		60		rts				rts
.89c6						_CDEVRead:
.89c6		ad 85 07	lda $0785			lda     KNLEvent.directory.stream
.89c9		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.89cb		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.89ce						_CDEVVolume:
.89ce		a9 5b		lda #$5b			lda 	#"["
.89d0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89d3		ad 87 07	lda $0787			lda     KNLEvent.directory.volume.len
.89d6		20 37 8a	jsr $8a37			jsr     _CDReadData
.89d9		20 13 98	jsr $9813			jsr 	PrintStringXA
.89dc		a9 5d		lda #$5d			lda 	#"]"
.89de		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89e1		a9 0d		lda #$0d			lda 	#13
.89e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89e6		80 de		bra $89c6			bra     _CDEVRead
.89e8						_CDExit:
.89e8		4c 2e 86	jmp $862e			jmp 	WarmStart
.89eb						_CDEVFile:
.89eb		a9 20		lda #$20			lda 	#32
.89ed		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89f0		ad 87 07	lda $0787			lda     KNLEvent.directory.file.len
.89f3		48		pha				pha
.89f4		20 37 8a	jsr $8a37			jsr     _CDReadData
.89f7		20 13 98	jsr $9813			jsr 	PrintStringXA
.89fa		68		pla				pla
.89fb		49 ff		eor #$ff			eor 	#$FF
.89fd		38		sec				sec
.89fe		69 10		adc #$10			adc 	#16
.8a00		aa		tax				tax
.8a01						_CDEVTab:
.8a01		a9 20		lda #$20			lda 	#32
.8a03		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a06		ca		dex				dex
.8a07		10 f8		bpl $8a01			bpl 	_CDEVTab
.8a09		20 4e 8a	jsr $8a4e			jsr 	_CDReadExtended
.8a0c		ad 26 05	lda $0526			lda 	lineBuffer
.8a0f		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8a12		20 29 9c	jsr $9c29			jsr 	ConvertInt16
.8a15		20 13 98	jsr $9813			jsr 	PrintStringXA
.8a18		a2 8a		ldx #$8a			ldx 	#_CDEVFMessage >> 8
.8a1a		a9 21		lda #$21			lda 	#_CDEVFMessage & $FF
.8a1c		20 13 98	jsr $9813			jsr 	PrintStringXA
.8a1f		80 a5		bra $89c6			bra     _CDEVRead
.8a21						_CDEVFMessage:
>8a21		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8a29		29 2e 0d 00
.8a2d						_CDEVFree:
.8a2d		80 00		bra $8a2f			bra     _CDEVEOF
.8a2f						_CDEVEOF:
.8a2f		ad 85 07	lda $0785			lda     KNLEvent.directory.stream
.8a32		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8a34		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8a37						_CDReadData:
.8a37		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a39		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a3b		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a3d		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a3f		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a41		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8a44		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8a46		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8a49		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8a4b		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8a4d		60		rts				rts
.8a4e						_CDReadExtended:
.8a4e		a9 02		lda #$02			lda     #2
.8a50		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a52		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a54		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a56		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a58		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a5a		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.8a5d						Command_Drive:
.8a5d		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.8a60		20 16 82	jsr $8216			jsr 	KNLSetDrive
.8a63		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.8a64						Command_Load:
.8a64		20 6a 8a	jsr $8a6a			jsr 	LoadFile
.8a67		4c 2e 86	jmp $862e			jmp 	WarmStart
.8a6a						LoadFile:
.8a6a		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; file name to load
.8a6d		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a6f		a5 36		lda $36				lda 	zTemp0
.8a71		20 1f 82	jsr $821f			jsr 	KNLOpenFileRead 			; open file for reading
.8a74		b0 42		bcs $8ab8			bcs 	CLErrorHandler 				; error, so fail.
.8a76		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8a79		20 08 8b	jsr $8b08			jsr     LoadReadByteInit            ; Init reader with the stream
.8a7c		20 e5 91	jsr $91e5			jsr 	NewProgram 					; does the actual NEW.
.8a7f		9c 8f 07	stz $078f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a82						_CLLoop:
.8a82		20 c6 8a	jsr $8ac6			jsr 	LoadReadLine 				; get next line.
.8a85		f0 10		beq $8a97			beq 	_CLExit 					; end, exit.
.8a87		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8a8a		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8a8d		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8a90		f0 f0		beq $8a82			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a92		20 09 86	jsr $8609			jsr 	EditProgramCode 			; do the editing etc.
.8a95		80 eb		bra $8a82			bra 	_CLLoop
.8a97						_CLExit:
.8a97		ad 90 07	lda $0790			lda 	BasicFileStream
.8a9a		20 e9 82	jsr $82e9			jsr 	KNLCloseFile
.8a9d						CLComplete:
.8a9d		a9 a5		lda #$a5			lda 	#_CLCMsg & $FF
.8a9f		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8aa1		20 13 98	jsr $9813			jsr 	PrintStringXA
.8aa4		60		rts				rts
.8aa5						_CLCMsg:
>8aa5		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8aad		2e 0d 00
.8ab0						CLCloseError:
.8ab0		48		pha				pha
.8ab1		ad 90 07	lda $0790			lda 	BasicFileStream
.8ab4		20 e9 82	jsr $82e9			jsr 	KNLCloseFile
.8ab7		68		pla				pla
.8ab8						CLErrorHandler:
.8ab8		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8aba		f0 05		beq $8ac1			beq 	_CLEHNotFound
.8abc		a9 1a		lda #$1a		lda	#26
.8abe		4c ba 97	jmp $97ba		jmp	ErrorHandler
.8ac1						_CLEHNotFound:
.8ac1		a9 19		lda #$19		lda	#25
.8ac3		4c ba 97	jmp $97ba		jmp	ErrorHandler
.8ac6						LoadReadLine:
.8ac6		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8ac8		20 e2 8a	jsr $8ae2			jsr 	LoadReadCharacter
.8acb		f0 14		beq $8ae1			beq 	_LRLExit 					; eof ?
.8acd		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8acf		90 f5		bcc $8ac6			bcc 	LoadReadLine
.8ad1						_LRLLoop:
.8ad1		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8ad4		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8ad7		e8		inx				inx
.8ad8		20 e2 8a	jsr $8ae2			jsr 	LoadReadCharacter 			; next line
.8adb		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8add		b0 f2		bcs $8ad1			bcs 	_LRLLoop
.8adf		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8ae1						_LRLExit:
.8ae1		60		rts				rts
.8ae2						LoadReadCharacter:
.8ae2		da		phx				phx
.8ae3		5a		phy				phy
.8ae4		ad 8f 07	lda $078f			lda 	LoadEOFFlag 				; already done EOF.
.8ae7		d0 0c		bne $8af5			bne 	_LRCIsEOF
.8ae9		20 12 8b	jsr $8b12			jsr 	LoadReadByte 				; read a byte
.8aec		90 09		bcc $8af7			bcc		_LRCExit 					; read okay.
.8aee		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8af0		d0 be		bne $8ab0			bne 	CLCloseError
.8af2		ce 8f 07	dec $078f			dec 	LoadEOFFlag
.8af5						_LRCIsEOF:
.8af5		a9 00		lda #$00			lda 	#0
.8af7						_LRCExit:
.8af7		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8af9		d0 02		bne $8afd			bne 	_LRCNotTab
.8afb		a9 20		lda #$20			lda 	#' '
.8afd						_LRCNotTab:
.8afd		c9 0a		cmp #$0a			cmp 	#$0A
.8aff		d0 02		bne $8b03			bne 	_LRCNotLF
.8b01		a9 0d		lda #$0d			lda 	#$0D
.8b03						_LRCNotLF:
.8b03		7a		ply				ply
.8b04		fa		plx				plx
.8b05		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b07		60		rts				rts
.8b08						LoadReadByteInit:
.8b08		8d 91 07	sta $0791			sta     LoadFileStream 				; save stream
.8b0b		9c 92 07	stz $0792			stz     LoadNextCharacter 			; reset buffer
.8b0e		9c 93 07	stz $0793			stz     LoadEndCharacter
.8b11		60		rts				rts
.8b12						LoadReadByte:
.8b12		da		phx				phx
.8b13		ae 92 07	ldx $0792			ldx     LoadNextCharacter 					; all data consumed ?
.8b16		ec 93 07	cpx $0793			cpx     LoadEndCharacter
.8b19		d0 12		bne $8b2d			bne     _KNLRBGetNextByte
.8b1b		ad 91 07	lda $0791			lda     LoadFileStream
.8b1e		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8b20		20 74 82	jsr $8274			jsr     KNLReadBlock 				; read next chunk from the stream
.8b23		b0 0f		bcs $8b34			bcs     _KNLRBError 				; error has occurred on read.
.8b25		8d 93 07	sta $0793			sta     LoadEndCharacter 						; # read is the number available
.8b28		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8b2a		8e 92 07	stx $0792			stx     LoadNextCharacter
.8b2d						_KNLRBGetNextByte:
.8b2d		bd 81 06	lda $0681,x			lda     KNLReadBuffer,x 			; get the next data item
.8b30		ee 92 07	inc $0792			inc     LoadNextCharacter 					; and advance the index
.8b33		18		clc				clc 								; succeeded
.8b34						_KNLRBError:
.8b34		fa		plx				plx
.8b35		60		rts				rts
.078f						LoadEOFFlag:
>078f								.fill 	1
.0790						BasicFileStream:
>0790								.fill 	1
.0791						LoadFileStream:
>0791								.byte   ?
.0792						LoadNextCharacter:
>0792								.byte   ?
.0793						LoadEndCharacter:
>0793								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8b36						Command_Save:
.8b36		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; file name to load
.8b39		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b3b		a5 36		lda $36				lda 	zTemp0
.8b3d		20 1a 82	jsr $821a			jsr 	KNLOpenFileWrite 			; open file for writing
.8b40		b0 2f		bcs $8b71			bcs 	CSErrorHandler 				; error, so fail.
.8b42		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8b45		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b47		85 30		sta $30				sta 	codePtr
.8b49		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b4b		85 31		sta $31				sta 	codePtr+1
.8b4d						_CSLoop:
.8b4d		b2 30		lda ($30)			lda 	(codePtr)
.8b4f		f0 17		beq $8b68			beq 	_CSExit
.8b51		20 95 8b	jsr $8b95			jsr 	CSGetCleanLine
.8b54		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8b56		85 36		sta $36				sta 	zTemp0
.8b58		20 74 8b	jsr $8b74			jsr 	CLWriteByteBlock 			; write the block out.
.8b5b		18		clc				clc
.8b5c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b5e		65 30		adc $30				adc 	codePtr
.8b60		85 30		sta $30				sta 	codePtr
.8b62		90 02		bcc $8b66			bcc 	_CREExit
.8b64		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b66						_CREExit:
.8b66		80 e5		bra $8b4d			bra 	_CSLoop
.8b68						_CSExit:
.8b68		ad 90 07	lda $0790			lda 	BasicFileStream 			; close file
.8b6b		20 e9 82	jsr $82e9			jsr 	KNLCloseFile
.8b6e		4c 9d 8a	jmp $8a9d			jmp 	CLComplete 					; display complete message.
.8b71						CSErrorHandler:
.8b71		4c b8 8a	jmp $8ab8			jmp 	CLErrorHandler
.8b74						CLWriteByteBlock:
.8b74		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8b76		f0 1c		beq $8b94			beq 	_CLWBBExit					; if so, exit
.8b78		ad 90 07	lda $0790			lda 	BasicFileStream 			; stream to write, count in X
.8b7b		20 af 82	jsr $82af			jsr 	KNLWriteBlock 				; call one write attempt
.8b7e		b0 f1		bcs $8b71			bcs 	CSErrorHandler 				; error occurred
.8b80		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8b82		8a		txa				txa 								; subtract bytes written from X, total count.
.8b83		38		sec				sec
.8b84		e5 38		sbc $38				sbc 	zTemp1
.8b86		aa		tax				tax
.8b87		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8b88		a5 36		lda $36				lda 	zTemp0
.8b8a		65 38		adc $38				adc 	zTemp1
.8b8c		85 36		sta $36				sta 	zTemp0
.8b8e		90 e4		bcc $8b74			bcc 	CLWriteByteBlock
.8b90		e6 37		inc $37				inc 	zTemp0+1
.8b92		80 e0		bra $8b74			bra 	CLWriteByteBlock 			; and retry write out.
.8b94						_CLWBBExit:
.8b94		60		rts				rts
.8b95						CSGetCleanLine:
.8b95		a9 00		lda #$00			lda 	#0 							; no indent.
.8b97		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8b9a		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8b9c		a0 00		ldy #$00			ldy 	#0
.8b9e						_CSClean:
.8b9e		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8ba1		f0 09		beq $8bac			beq 	_CSDoneClean
.8ba3		30 04		bmi $8ba9			bmi 	_CSIgnoreCharacter
.8ba5		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8ba8		e8		inx				inx
.8ba9						_CSIgnoreCharacter:
.8ba9		c8		iny				iny
.8baa		80 f2		bra $8b9e			bra 	_CSClean
.8bac						_CSDoneClean:
.8bac		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8bae		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8bb1		e8		inx				inx
.8bb2		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8bb5		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8bb7		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8bb9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.dc65						m
.8bba						Command_VERIFY:
.8bba		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; file name to verify
.8bbd		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8bbf		a5 36		lda $36				lda 	zTemp0
.8bc1		20 1f 82	jsr $821f			jsr 	KNLOpenFileRead 			; open file for reading
.8bc4		b0 4b		bcs $8c11			bcs 	_CVErrorHandler 			; error, so fail.
.8bc6		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8bc9		20 08 8b	jsr $8b08			jsr     LoadReadByteInit            ; Init reader with the stream
.8bcc		9c 8f 07	stz $078f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8bcf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bd1		85 30		sta $30				sta 	codePtr
.8bd3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bd5		85 31		sta $31				sta 	codePtr+1
.8bd7						_CVLoop:
.8bd7		20 c6 8a	jsr $8ac6			jsr 	LoadReadLine 				; get next line.
.8bda		f0 27		beq $8c03			beq 	_CVExit 					; end, exit.
.8bdc		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8bdf		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8be2		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8be5		f0 f0		beq $8bd7			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8be7		a0 00		ldy #$00			ldy 	#0 							; start compare
.8be9						_CVCompareLoop:
.8be9		b1 30		lda ($30),y			lda 	(codePtr),y
.8beb		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8bee		d0 1c		bne $8c0c			bne 	_CVCompareError
.8bf0		c8		iny				iny
.8bf1		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8bf4		d0 f3		bne $8be9			bne 	_CVCompareLoop
.8bf6		18		clc				clc
.8bf7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bf9		65 30		adc $30				adc 	codePtr
.8bfb		85 30		sta $30				sta 	codePtr
.8bfd		90 02		bcc $8c01			bcc 	_CREExit
.8bff		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c01						_CREExit:
.8c01		80 d4		bra $8bd7			bra 	_CVLoop
.8c03						_CVExit:
.8c03		ad 90 07	lda $0790			lda 	BasicFileStream
.8c06		20 e9 82	jsr $82e9			jsr 	KNLCloseFile
.8c09		4c 9d 8a	jmp $8a9d			jmp 	CLComplete
.8c0c						_CVCompareError:
.8c0c		a9 1b		lda #$1b		lda	#27
.8c0e		4c ba 97	jmp $97ba		jmp	ErrorHandler
.8c11						_CVErrorHandler:
.8c11		4c b8 8a	jmp $8ab8			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c14						ForCommand:
.8c14		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8c16		20 33 b0	jsr $b033			jsr 	StackOpen
.8c19		a2 00		ldx #$00			ldx 	#0
.8c1b		20 08 a1	jsr $a108			jsr 	EvaluateTerm
.8c1e		b5 50		lda $50,x			lda 	NSStatus,x
.8c20		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8c22		d0 47		bne $8c6b			bne		_FCError
.8c24		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c26		20 b1 97	jsr $97b1			jsr 	CheckNextA
.8c29		e8		inx				inx
.8c2a		20 81 a6	jsr $a681			jsr 	EvaluateInteger 			; <from> in +1
.8c2d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c2f		c8		iny				iny 								; consume it
.8c30		48		pha				pha 								; save on stack for later
.8c31		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.8c33		f0 04		beq $8c39			beq 	_FCNoSyntax
.8c35		c9 db		cmp #$db			cmp 	#KWD_TO
.8c37		d0 35		bne $8c6e			bne 	_FCSyntaxError
.8c39						_FCNoSyntax:
.8c39		e8		inx				inx
.8c3a		20 81 a6	jsr $a681			jsr 	EvaluateInteger
.8c3d		20 78 b0	jsr $b078			jsr 	STKSaveCodePosition 		; save loop back position
.8c40		68		pla				pla 								; restore DOWNTO or TO
.8c41		5a		phy				phy 								; save Y on the stack
.8c42		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8c44		f0 02		beq $8c48			beq 	_FCNotDownTo
.8c46		a9 02		lda #$02			lda 	#2
.8c48						_FCNotDownTo:
.8c48		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8c49		a0 10		ldy #$10			ldy 	#16
.8c4b		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8c4d		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8c4f		a5 58		lda $58				lda 	NSMantissa0
.8c51		91 34		sta ($34),y			sta 	(basicStack),y
.8c53		a5 60		lda $60				lda 	NSMantissa1
.8c55		c8		iny				iny
.8c56		91 34		sta ($34),y			sta 	(basicStack),y
.8c58		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8c5a		a2 01		ldx #$01			ldx 	#1
.8c5c		20 71 8c	jsr $8c71			jsr 	FCIntegerToStack
.8c5f		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8c61		a2 02		ldx #$02			ldx 	#2
.8c63		20 71 8c	jsr $8c71			jsr 	FCIntegerToStack
.8c66		20 8c 8c	jsr $8c8c			jsr 	CopyIndexToReference
.8c69		7a		ply				ply 								; restore position
.8c6a		60		rts				rts
.8c6b						_FCError:
.8c6b		4c c3 a9	jmp $a9c3			jmp 	TypeError
.8c6e						_FCSyntaxError:
.8c6e		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
.8c71						FCIntegerToStack:
.8c71		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8c73		10 03		bpl $8c78			bpl	 	_FCNotNegative
.8c75		20 dd a6	jsr $a6dd			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c78						_FCNotNegative:
.8c78		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c7a		91 34		sta ($34),y			sta 	(basicStack),y
.8c7c		c8		iny				iny
.8c7d		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c7f		91 34		sta ($34),y			sta 	(basicStack),y
.8c81		c8		iny				iny
.8c82		b5 68		lda $68,x			lda 	NSMantissa2,x
.8c84		91 34		sta ($34),y			sta 	(basicStack),y
.8c86		c8		iny				iny
.8c87		b5 70		lda $70,x			lda 	NSMantissa3,x
.8c89		91 34		sta ($34),y			sta 	(basicStack),y
.8c8b		60		rts				rts
.8c8c						CopyIndexToReference:
.8c8c		5a		phy				phy
.8c8d		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c8f		38		sec				sec 								; (because we copy from offset 8)
.8c90		b1 34		lda ($34),y			lda 	(basicStack),y
.8c92		e9 08		sbc #$08			sbc 	#8
.8c94		85 36		sta $36				sta 	zTemp0
.8c96		c8		iny				iny
.8c97		b1 34		lda ($34),y			lda 	(basicStack),y
.8c99		e9 00		sbc #$00			sbc 	#0
.8c9b		85 37		sta $37				sta 	zTemp0+1
.8c9d		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c9f		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ca1		b1 34		lda ($34),y			lda 	(basicStack),y
.8ca3		0a		asl a				asl 	a 							; into carry
.8ca4		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ca6		90 14		bcc $8cbc			bcc 	_CITRNormal
.8ca8		38		sec				sec
.8ca9						_CITRNegative:
.8ca9		a9 00		lda #$00			lda 	#0
.8cab		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8cad		91 36		sta ($36),y			sta 	(zTemp0),y
.8caf		c8		iny				iny
.8cb0		ca		dex				dex
.8cb1		d0 f6		bne $8ca9			bne 	_CITRNegative
.8cb3		88		dey				dey 								; look at MSB of mantissa
.8cb4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8cb6		09 80		ora #$80			ora 	#$80
.8cb8		91 36		sta ($36),y			sta 	(zTemp0),y
.8cba		7a		ply				ply
.8cbb		60		rts				rts
.8cbc						_CITRNormal:
.8cbc		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8cbe		91 36		sta ($36),y			sta 	(zTemp0),y
.8cc0		c8		iny				iny
.8cc1		ca		dex				dex
.8cc2		d0 f8		bne $8cbc			bne 	_CITRNormal
.8cc4		7a		ply				ply 								; and exit.
.8cc5		60		rts				rts
.8cc6						NextCommand:
.8cc6		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8cc8		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8cca		20 60 b0	jsr $b060			jsr 	StackCheckFrame
.8ccd		5a		phy				phy
.8cce		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8cd0		b1 34		lda ($34),y			lda 	(basicStack),y
.8cd2		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8cd4		30 02		bmi $8cd8			bmi 	_NCStepNeg
.8cd6		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8cd8						_NCStepNeg:
.8cd8		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8cda		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8cdc		18		clc				clc
.8cdd						_NCBump:
.8cdd		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8cdf		91 34		sta ($34),y			sta 	(basicStack),y
.8ce1		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8ce3		c8		iny				iny 								; next byte
.8ce4		ca		dex				dex 								; do four times
.8ce5		d0 f6		bne $8cdd			bne 	_NCBump
.8ce7		20 8c 8c	jsr $8c8c			jsr		CopyIndexToReference		; copy it to the reference variable.
.8cea		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8cec		b1 34		lda ($34),y			lda 	(basicStack),y
.8cee		0a		asl a				asl 	a 							; sign bit to carry
.8cef		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8cf1		85 38		sta $38				sta 	zTemp1
.8cf3		90 02		bcc $8cf7			bcc 	_NCCompRev 					; use if step is +ve
.8cf5		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8cf7						_NCCompRev:
.8cf7		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8cf9		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8cfb		85 39		sta $39				sta 	zTemp1+1
.8cfd		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8cff		38		sec				sec
.8d00						_NCCompare:
.8d00		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8d02		b1 34		lda ($34),y			lda 	(basicStack),y
.8d04		a4 39		ldy $39				ldy 	zTemp1+1
.8d06		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d08		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8d0a		e6 39		inc $39				inc 	zTemp1+1
.8d0c		ca		dex				dex 								; do it 4 times.
.8d0d		d0 f1		bne $8d00			bne 	_NCCompare
.8d0f		50 02		bvc $8d13			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d11		49 80		eor #$80			eor 	#$80
.8d13						_NCNoOverflow:
.8d13		7a		ply				ply 								; restore Y position
.8d14		0a		asl a				asl 	a 							; is bit 7 set.
.8d15		90 04		bcc $8d1b			bcc 	_NCLoopBack 				; if no , >= so loop back
.8d17		20 52 b0	jsr $b052			jsr 	StackClose 					; exit the loop
.8d1a		60		rts				rts
.8d1b						_NCLoopBack:
.8d1b		20 89 b0	jsr $b089			jsr 	STKLoadCodePosition 		; loop back
.8d1e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8d1f						Command_GOSUB:
.8d1f		a2 00		ldx #$00			ldx 	#0
.8d21		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d24		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d26		20 33 b0	jsr $b033			jsr 	StackOpen 					; create frame
.8d29		20 78 b0	jsr $b078			jsr 	STKSaveCodePosition 		; save current position
.8d2c		4c 42 8d	jmp $8d42			jmp 	GotoStackX
.8d2f						Command_RETURN:
.8d2f		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8d31		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8d33		20 60 b0	jsr $b060			jsr 	StackCheckFrame
.8d36		20 89 b0	jsr $b089			jsr 	STKLoadCodePosition 		; restore code position
.8d39		20 52 b0	jsr $b052			jsr 	StackClose
.8d3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8d3d						GotoCommand:
.8d3d		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8d3f		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.8d42						GotoStackX:
.8d42		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8d44		48		pha				pha 								; it is slightly inefficient, just in cases.
.8d45		b5 58		lda $58,x			lda 	NSMantissa0,x
.8d47		fa		plx				plx
.8d48		20 51 ac	jsr $ac51			jsr 	MemorySearch 				; transfer to line number AX.
.8d4b		90 05		bcc $8d52			bcc 	_GotoError 					; not found, off end.
.8d4d		d0 03		bne $8d52			bne 	_GotoError 					; not found exactly
.8d4f		4c 7b 93	jmp $937b			jmp 	RunNewLine 					; and go straight to new line code.
.8d52						_GotoError:
.8d52		a9 0d		lda #$0d		lda	#13
.8d54		4c ba 97	jmp $97ba		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8d57						IfCommand:
.8d57		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8d59		20 62 a6	jsr $a662			jsr 	EvaluateNumber
.8d5c		b1 30		lda ($30),y			lda 	(codePtr),y
.8d5e		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8d60		d0 0a		bne $8d6c			bne 	_IfStructured 				; we still support it.
.8d62		c8		iny				iny 								; consume THEN
.8d63		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; is it zero
.8d66		f0 01		beq $8d69			beq 	_IfFail 					; if fail, go to next line
.8d68		60		rts				rts 								; if THEN just continue
.8d69						_IfFail:
.8d69		4c 56 93	jmp $9356			jmp 	EOLCommand
.8d6c						_IfStructured:
.8d6c		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; is it zero
.8d6f		d0 07		bne $8d78			bne 	_IfExit 					; if not, then continue normally.
.8d71		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8d73		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8d75		20 fc 96	jsr $96fc			jsr 	ScanForward 				; and run from there
.8d78						_IfExit:
.8d78		60		rts				rts
.8d79						ElseCode:
.8d79		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d7b		aa		tax				tax 								; so just go to the structure exit
.8d7c		20 fc 96	jsr $96fc			jsr 	ScanForward
.8d7f		60		rts				rts
.8d80						EndIf:
.8d80		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8d81						Command_Input:
.8d81		9c 24 04	stz $0424			stz 	isPrintFlag
.8d84		80 0c		bra $8d92			bra 	Command_IP_Main
.8d86						Command_CPrint:
.8d86		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8d88		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d8b		80 05		bra $8d92			bra 	Command_IP_Main
.8d8d						Command_Print:
.8d8d		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8d8f		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d92						Command_IP_Main:
.8d92		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8d93						_CPLoop:
.8d93		08		php				php 								; save last action flag
.8d94		b1 30		lda ($30),y			lda 	(codePtr),y
.8d96		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8d98		f0 54		beq $8dee			beq 	_CPExit
.8d9a		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8d9c		f0 50		beq $8dee			beq 	_CPExit
.8d9e		68		pla				pla 								; throw last action flag
.8d9f		b1 30		lda ($30),y			lda 	(codePtr),y
.8da1		c8		iny				iny
.8da2		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8da4		f0 45		beq $8deb			beq 	_CPContinueWithSameLine
.8da6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8da8		f0 3c		beq $8de6			beq 	_CPTab
.8daa		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8dac		f0 34		beq $8de2			beq 	_CPNewLine
.8dae		88		dey				dey 								; undo the get.
.8daf		20 bc 9c	jsr $9cbc			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8db2		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8db4		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8db6		f0 0d		beq $8dc5			beq 	_CPIsValue 					; no, display it.
.8db8		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8dbb		d0 05		bne $8dc2			bne 	_CPIsPrint 					; otherwise display.
.8dbd		20 f7 8d	jsr $8df7			jsr 	CIInputValue 				; input a value to the reference
.8dc0		80 20		bra $8de2			bra 	_CPNewLine
.8dc2						_CPIsPrint:
.8dc2		20 81 9f	jsr $9f81			jsr 	Dereference 				; dereference if required.
.8dc5						_CPIsValue:
.8dc5		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8dc7		29 10		and #$10			and 	#NSBIsString
.8dc9		f0 09		beq $8dd4			beq 	_CPNumber
.8dcb		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8dcd		a5 58		lda $58				lda 	NSMantissa0
.8dcf		20 5a 8e	jsr $8e5a			jsr 	CPPrintStringXA
.8dd2		80 be		bra $8d92			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8dd4						_CPNumber:
.8dd4		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8dd6		20 49 a5	jsr $a549			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8dd9		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8ddb		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8ddd		20 5a 8e	jsr $8e5a			jsr 	CPPrintStringXA 			; print it.
.8de0		80 b0		bra $8d92			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8de2						_CPNewLine:
.8de2		a9 0d		lda #$0d			lda 	#13
.8de4		80 02		bra $8de8			bra 	_CPPrintCharDirect
.8de6						_CPTab:
.8de6		a9 09		lda #$09			lda 	#9 							; print TAB
.8de8						_CPPrintCharDirect:
.8de8		20 75 8e	jsr $8e75			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8deb						_CPContinueWithSameLine:
.8deb		38		sec				sec 								; loop round with carry set, which
.8dec		80 a5		bra $8d93			bra 	_CPLoop 					; will inhibit final CR
.8dee						_CPExit:
.8dee		28		plp				plp 								; get last action flag
.8def		b0 05		bcs $8df6			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8df1		a9 0d		lda #$0d			lda 	#13 						; print new line
.8df3		20 75 8e	jsr $8e75			jsr 	CPPVControl
.8df6						_CPExit2:
.8df6		60		rts				rts
.8df7						CIInputValue:
.8df7		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8df9						_CIInputLine:
.8df9		20 78 8e	jsr $8e78			jsr 	CPInputVector 				; get key
.8dfc		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8dfe		f0 1f		beq $8e1f			beq 	_CIHaveValue
.8e00		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8e02		f0 11		beq $8e15			beq 	_CIBackspace
.8e04		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8e06		90 f1		bcc $8df9			bcc 	_CIInputLine
.8e08		e0 50		cpx #$50			cpx 	#80 						; max length
.8e0a		b0 ed		bcs $8df9			bcs 	_CIInputLine
.8e0c		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8e0f		e8		inx				inx
.8e10		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e13		80 e4		bra $8df9			bra 	_CIInputLine
.8e15						_CIBackspace:
.8e15		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8e17		f0 e0		beq $8df9			beq 	_CIInputLine
.8e19		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e1c		ca		dex				dex
.8e1d		80 da		bra $8df9			bra 	_CIInputLine
.8e1f						_CIHaveValue:
.8e1f		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8e22		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8e24		29 10		and #$10			and 	#NSBIsString
.8e26		f0 17		beq $8e3f			beq 	_CIAssignNumber 			; assign a number
.8e28		a2 01		ldx #$01			ldx 	#1
.8e2a		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e2c		95 58		sta $58,x			sta 	NSMantissa0,x
.8e2e		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e30		95 60		sta $60,x			sta 	NSMantissa1,x
.8e32		74 68		stz $68,x			stz 	NSMantissa2,x
.8e34		74 70		stz $70,x			stz 	NSMantissa3,x
.8e36		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8e38		95 50		sta $50,x			sta  	NSStatus,x
.8e3a		ca		dex				dex 								; X = 0
.8e3b		20 ed 8e	jsr $8eed			jsr 	AssignVariable
.8e3e		60		rts				rts
.8e3f						_CIAssignNumber:
.8e3f		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e41		85 36		sta $36				sta 	zTemp0
.8e43		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e45		85 37		sta $37				sta 	zTemp0+1
.8e47		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8e49		20 29 a4	jsr $a429			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8e4c		90 07		bcc $8e55			bcc 	_CIIsOkay
.8e4e		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8e50		20 6d 8e	jsr $8e6d			jsr 	CPPrintVector
.8e53		80 a2		bra $8df7			bra 	CIInputValue
.8e55						_CIIsOkay:
.8e55		ca		dex				dex 								; X = 0
.8e56		20 ed 8e	jsr $8eed			jsr 	AssignVariable
.8e59		60		rts				rts
.8e5a						CPPrintStringXA:
.8e5a		5a		phy				phy
.8e5b		86 37		stx $37				stx 	zTemp0+1
.8e5d		85 36		sta $36				sta 	zTemp0
.8e5f		a0 00		ldy #$00			ldy 	#0
.8e61						_PSXALoop:
.8e61		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e63		f0 06		beq $8e6b			beq 	_PSXAExit
.8e65		20 6d 8e	jsr $8e6d			jsr 	CPPrintVector
.8e68		c8		iny				iny
.8e69		80 f6		bra $8e61			bra 	_PSXALoop
.8e6b						_PSXAExit:
.8e6b		7a		ply				ply
.8e6c		60		rts				rts
.8e6d						CPPrintVector:
.8e6d		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8e70		30 03		bmi $8e75			bmi 	CPPVControl
.8e72		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8e75						CPPVControl:
.8e75		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8e78						CPInputVector:
.8e78		4c 8e 81	jmp $818e			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8e7b						UnaryJoyX:
.8e7b		18		clc				clc
.8e7c		80 01		bra $8e7f			bra 	JoyMain
.8e7e						UnaryJoyY:
.8e7e		38		sec				sec
.8e7f						JoyMain:
.8e7f		fa		plx				plx 								; get pos
.8e80		08		php				php 								; save carry (set for Y)
.8e81		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e84		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.8e87		20 ef 82	jsr $82ef			jsr 	KNLReadController 			; read the controller.
.8e8a		28		plp				plp
.8e8b		b0 02		bcs $8e8f			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8e8d		4a		lsr a				lsr 	a
.8e8e		4a		lsr a				lsr 	a
.8e8f						_JMNoShift:
.8e8f		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8e90		b0 07		bcs $8e99			bcs 	JMIsLeft
.8e92		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8e93		b0 07		bcs $8e9c			bcs 	JMIsRight
.8e95		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; zero result
.8e98		60		rts				rts
.8e99						JMIsLeft:
.8e99		4c 27 98	jmp $9827			jmp 	ReturnTrue
.8e9c						JMIsRight:
.8e9c		a9 01		lda #$01			lda 	#1
.8e9e		20 16 a7	jsr $a716			jsr 	NSMSetByte
.8ea1		60		rts				rts
.8ea2						UnaryJoyB:
.8ea2		fa		plx				plx 								; get pos
.8ea3		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8ea6		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.8ea9		20 ef 82	jsr $82ef			jsr 	KNLReadController 			; read the controller.
.8eac		29 10		and #$10			and 	#$10
.8eae		d0 e9		bne $8e99			bne 	JMIsLeft
.8eb0		20 14 a7	jsr $a714			jsr 	NSMSetZero
.8eb3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8eb4						LetCommand:
.8eb4		a2 00		ldx #$00			ldx 	#0
.8eb6		b1 30		lda ($30),y			lda 	(codePtr),y
.8eb8		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8eba		d0 14		bne $8ed0			bne 	_LCStandard
.8ebc		c8		iny				iny 								; skip equal
.8ebd		20 08 a1	jsr $a108			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8ec0		20 81 9f	jsr $9f81			jsr 	Dereference 				; dereference it to a value
.8ec3		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8ec5		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8ec7		95 50		sta $50,x			sta 	NSStatus,x
.8ec9		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8ecb		d0 0f		bne $8edc			bne 	_LCMain
.8ecd		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; was a reference before.
.8ed0						_LCStandard:
.8ed0		ad a6 9c	lda $9ca6			lda 	PrecedenceLevel+"*"			; precedence > this
.8ed3		20 c0 9c	jsr $9cc0			jsr 	EvaluateExpressionAtPrecedence
.8ed6		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8ed8		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8eda		f0 0e		beq $8eea			beq 	_LetGoProc 					; it's a procedure call.
.8edc						_LCMain:
.8edc		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8ede		20 b1 97	jsr $97b1			jsr 	CheckNextA
.8ee1		e8		inx				inx 								; RHS
.8ee2		20 59 a6	jsr $a659			jsr 	EvaluateValue
.8ee5		ca		dex				dex
.8ee6		20 ed 8e	jsr $8eed			jsr 	AssignVariable
.8ee9		60		rts				rts
.8eea						_LetGoProc:
.8eea		4c 2c 92	jmp $922c			jmp 	CallProcedure
.8eed						AssignVariable:
.8eed		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8eef		48		pha				pha 								; save a copy
.8ef0		55 51		eor $51,x			eor 	NSStatus+1,x
.8ef2		29 10		and #$10			and 	#NSBIsString
.8ef4		d0 0b		bne $8f01			bne 	_ASError
.8ef6		68		pla				pla 								; get back
.8ef7		29 10		and #$10			and 	#NSBIsString 				; check type
.8ef9		d0 03		bne $8efe			bne 	_ASString
.8efb		4c bf 9e	jmp $9ebf			jmp 	AssignNumber
.8efe						_ASString:
.8efe		4c 1d 9f	jmp $9f1d			jmp 	AssignString
.8f01						_ASError:
.8f01		4c c3 a9	jmp $a9c3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8f04						Command_List:
.8f04		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8f07		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8f09		20 75 80	jsr $8075			jsr 	SNDCommand
.8f0c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f0e		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8f10		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8f12		f0 72		beq $8f86			beq 	_CLListProcedure
.8f14		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8f16		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8f18		a9 ff		lda #$ff			lda 	#$FF
.8f1a		85 5f		sta $5f				sta 	NSMantissa0+7
.8f1c		85 67		sta $67				sta 	NSMantissa1+7
.8f1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f20		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f22		f0 1a		beq $8f3e			beq 	_CLSecond
.8f24		20 03 90	jsr $9003			jsr 	CLIsDigit 					; if not digit, list all
.8f27		b0 20		bcs $8f49			bcs 	_CLStart
.8f29		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f2b		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.8f2e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f30		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f32		f0 0a		beq $8f3e			beq 	_CLSecond 					; if so go get it
.8f34		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8f36		85 5f		sta $5f				sta 	NSMantissa0+7
.8f38		a5 64		lda $64				lda 	NSMantissa1+4
.8f3a		85 67		sta $67				sta 	NSMantissa1+7
.8f3c		80 0b		bra $8f49			bra 	_CLStart
.8f3e						_CLSecond:
.8f3e		c8		iny				iny 								; consume comma
.8f3f		20 03 90	jsr $9003			jsr 	CLIsDigit 					; digit found
.8f42		b0 05		bcs $8f49			bcs 	_CLStart 					; if not, continue listing
.8f44		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8f46		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.8f49						_CLStart
.8f49		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f4b		85 30		sta $30				sta 	codePtr
.8f4d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f4f		85 31		sta $31				sta 	codePtr+1
.8f51						_CLLoop:
.8f51		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f53		f0 03		beq $8f58			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f55		20 34 81	jsr $8134			jsr 	ProcessEvents
.8f58						_NoEvents:
.8f58		d0 27		bne $8f81			bne 	_CLBreak
.8f5a		b2 30		lda ($30)			lda 	(codePtr)
.8f5c		f0 20		beq $8f7e			beq 	_CLExit
.8f5e		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8f60		20 f2 8f	jsr $8ff2			jsr 	CLCompareLineNo
.8f63		90 0c		bcc $8f71			bcc 	_CLNext
.8f65		a2 07		ldx #$07			ldx 	#7
.8f67		20 f2 8f	jsr $8ff2			jsr 	CLCompareLineNo
.8f6a		f0 02		beq $8f6e			beq 	_CLDoThisOne
.8f6c		b0 03		bcs $8f71			bcs 	_CLNext
.8f6e						_CLDoThisOne:
.8f6e		20 df 8f	jsr $8fdf			jsr 	CLListOneLine 				; routine to list the current line.
.8f71						_CLNext:
.8f71		18		clc				clc
.8f72		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f74		65 30		adc $30				adc 	codePtr
.8f76		85 30		sta $30				sta 	codePtr
.8f78		90 02		bcc $8f7c			bcc 	_CREExit
.8f7a		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f7c						_CREExit:
.8f7c		80 d3		bra $8f51			bra 	_CLLoop
.8f7e						_CLExit:
.8f7e		4c 2e 86	jmp $862e			jmp 	WarmStart
.8f81						_CLBreak:
.8f81		a9 01		lda #$01		lda	#1
.8f83		4c ba 97	jmp $97ba		jmp	ErrorHandler
.8f86						_CLListProcedure:
.8f86		b1 30		lda ($30),y			lda 	(codePtr),y
.8f88		85 38		sta $38				sta 	zTemp1
.8f8a		c8		iny				iny
.8f8b		b1 30		lda ($30),y			lda 	(codePtr),y
.8f8d		85 39		sta $39				sta 	zTemp1+1
.8f8f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f91		85 30		sta $30				sta 	codePtr
.8f93		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f95		85 31		sta $31				sta 	codePtr+1
.8f97						_CLLPSearch:
.8f97		b2 30		lda ($30)			lda 	(codePtr)
.8f99		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8f9b		f0 e1		beq $8f7e			beq 	_CLExit
.8f9d		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8f9f		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa1		c9 af		cmp #$af			cmp 	#KWD_PROC
.8fa3		d0 0e		bne $8fb3			bne 	_CLLPNext
.8fa5		c8		iny				iny 								; check if PROC this.
.8fa6		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa8		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8faa		d0 07		bne $8fb3			bne 	_CLLPNext
.8fac		c8		iny				iny
.8fad		b1 30		lda ($30),y			lda 	(codePtr),y
.8faf		c5 39		cmp $39				cmp 	zTemp1+1
.8fb1		f0 0d		beq $8fc0			beq 	_CLLPFound
.8fb3						_CLLPNext:
.8fb3		18		clc				clc
.8fb4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fb6		65 30		adc $30				adc 	codePtr
.8fb8		85 30		sta $30				sta 	codePtr
.8fba		90 02		bcc $8fbe			bcc 	_CREExit
.8fbc		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fbe						_CREExit:
.8fbe		80 d7		bra $8f97			bra 	_CLLPSearch
.8fc0						_CLLPFound:
.8fc0		b2 30		lda ($30)			lda 	(codePtr)
.8fc2		f0 ba		beq $8f7e			beq 	_CLExit
.8fc4		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8fc6		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc8		48		pha				pha
.8fc9		20 df 8f	jsr $8fdf			jsr 	CLListOneLine 				; list line and go forward
.8fcc		18		clc				clc
.8fcd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fcf		65 30		adc $30				adc 	codePtr
.8fd1		85 30		sta $30				sta 	codePtr
.8fd3		90 02		bcc $8fd7			bcc 	_CREExit
.8fd5		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fd7						_CREExit:
.8fd7		68		pla				pla 								; reached ENDPROC ?
.8fd8		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.8fda		d0 e4		bne $8fc0			bne 	_CLLPFound
.8fdc		4c 2e 86	jmp $862e			jmp 	WarmStart
.8fdf						CLListOneLine:
.8fdf		20 5f 97	jsr $975f			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8fe2		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8fe5		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8fe7		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8fe9		20 13 98	jsr $9813			jsr 	PrintStringXA
.8fec		a9 0d		lda #$0d			lda 	#13 						; new line
.8fee		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8ff1		60		rts				rts
.8ff2						CLCompareLineNo:
.8ff2		38		sec				sec
.8ff3		a0 01		ldy #$01			ldy 	#1
.8ff5		b1 30		lda ($30),y			lda 	(codePtr),y
.8ff7		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8ff9		85 36		sta $36				sta 	zTemp0
.8ffb		c8		iny				iny
.8ffc		b1 30		lda ($30),y			lda 	(codePtr),y
.8ffe		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9000		05 36		ora $36				ora 	zTemp0
.9002		60		rts				rts
.9003						CLIsDigit:
.9003		b1 30		lda ($30),y			lda 	(codePtr),y
.9005		c9 30		cmp #$30			cmp 	#"0"
.9007		90 03		bcc $900c			bcc	 	_CLIDExitFalse
.9009		c9 3a		cmp #$3a			cmp 	#"9"+1
.900b		60		rts				rts
.900c						_CLIDExitFalse:
.900c		38		sec				sec
.900d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.900e						Command_LOCAL:
.900e		a2 00		ldx #$00			ldx 	#0 							; at level 0
.9010		20 1c 90	jsr $901c			jsr 	LocaliseNextTerm 			; convert term to a local.
.9013		b1 30		lda ($30),y			lda 	(codePtr),y
.9015		c8		iny				iny
.9016		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9018		f0 f4		beq $900e			beq 	Command_LOCAL 				; if so, localise another variable.
.901a		88		dey				dey 								; unpick pre-get
.901b		60		rts				rts
.901c						LocaliseNextTerm:
.901c		20 08 a1	jsr $a108			jsr 	EvaluateTerm 				; evaluate the term
.901f		b5 50		lda $50,x			lda 	NSStatus,x
.9021		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.9023		f0 5c		beq $9081			beq		_LNTError
.9025		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9027		85 36		sta $36				sta 	zTemp0
.9029		b5 60		lda $60,x			lda 	NSMantissa1,x
.902b		85 37		sta $37				sta  	zTemp0+1
.902d		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.902f		29 10		and #$10			and 	#NSBIsString
.9031		d0 1e		bne $9051			bne 	_LNTPushString
.9033		5a		phy				phy
.9034		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9036						_LNTPushNumLoop:
.9036		b1 36		lda ($36),y			lda		(zTemp0),y
.9038		20 12 b0	jsr $b012			jsr 	StackPushByte
.903b		c8		iny				iny
.903c		c0 05		cpy #$05			cpy 	#5
.903e		d0 f6		bne $9036			bne 	_LNTPushNumLoop
.9040		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.9042		20 12 b0	jsr $b012			jsr 	StackPushByte
.9045		a5 37		lda $37				lda 	zTemp0+1
.9047		20 12 b0	jsr $b012			jsr 	StackPushByte
.904a		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.904c		20 12 b0	jsr $b012			jsr 	StackPushByte
.904f		7a		ply				ply
.9050		60		rts				rts
.9051						_LNTPushString:
.9051		5a		phy				phy
.9052		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.9054		85 38		sta $38				sta 	zTemp1
.9056		a0 01		ldy #$01			ldy 	#1
.9058		b1 36		lda ($36),y			lda 	(zTemp0),y
.905a		85 39		sta $39				sta 	zTemp1+1
.905c		a0 00		ldy #$00			ldy 	#0 							; output string
.905e		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.9060		f0 0a		beq $906c			beq 	_LNTStringOut
.9062						_LNTPushStrLoop:
.9062		b1 38		lda ($38),y			lda 	(zTemp1),y
.9064		f0 06		beq $906c			beq 	_LNTStringOut
.9066		20 12 b0	jsr $b012			jsr 	StackPushByte
.9069		c8		iny				iny
.906a		80 f6		bra $9062			bra 	_LNTPushStrLoop
.906c						_LNTStringOut:
.906c		98		tya				tya									; output length (chars written).
.906d		20 12 b0	jsr $b012			jsr 	StackPushByte
.9070		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9072		20 12 b0	jsr $b012			jsr 	StackPushByte
.9075		b5 60		lda $60,x			lda 	NSMantissa1,x
.9077		20 12 b0	jsr $b012			jsr 	StackPushByte
.907a		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.907c		20 12 b0	jsr $b012			jsr 	StackPushByte
.907f		7a		ply				ply
.9080		60		rts				rts
.9081						_LNTError:
.9081		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
.9084						LocalPopValue:
.9084		20 2a b0	jsr $b02a			jsr 	StackPopByte
.9087		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9089		d0 17		bne $90a2			bne 	_LPVString
.908b		20 2a b0	jsr $b02a			jsr 	StackPopByte 				; address
.908e		85 37		sta $37				sta 	zTemp0+1
.9090		20 2a b0	jsr $b02a			jsr 	StackPopByte
.9093		85 36		sta $36				sta 	zTemp0
.9095		5a		phy				phy
.9096		a0 04		ldy #$04			ldy 	#4 							; copy back
.9098						_LPVNumberCopy:
.9098		20 2a b0	jsr $b02a			jsr 	StackPopByte
.909b		91 36		sta ($36),y			sta 	(zTemp0),y
.909d		88		dey				dey
.909e		10 f8		bpl $9098			bpl 	_LPVNumberCopy
.90a0		7a		ply				ply 								; and complete
.90a1		60		rts				rts
.90a2						_LPVString:
.90a2		20 2a b0	jsr $b02a			jsr 	StackPopByte 				; address of record copied to zTemp0
.90a5		85 37		sta $37				sta 	zTemp0+1
.90a7		20 2a b0	jsr $b02a			jsr 	StackPopByte
.90aa		85 36		sta $36				sta 	zTemp0
.90ac		5a		phy				phy
.90ad		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.90af		85 38		sta $38				sta 	zTemp1
.90b1		a0 01		ldy #$01			ldy 	#1
.90b3		b1 36		lda ($36),y			lda 	(zTemp0),y
.90b5		85 39		sta $39				sta 	zTemp1+1
.90b7		20 2a b0	jsr $b02a			jsr 	StackPopByte 				; # chars to get => y
.90ba		a8		tay				tay
.90bb		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.90bd		f0 0e		beq $90cd			beq 	_LPVStringCopied
.90bf		a9 00		lda #$00			lda 	#0 							; NULL on end
.90c1		91 38		sta ($38),y			sta 	(zTemp1),y
.90c3						_LPVStringCopy:
.90c3		88		dey				dey
.90c4		30 07		bmi $90cd			bmi 	_LPVStringCopied
.90c6		20 2a b0	jsr $b02a			jsr 	StackPopByte
.90c9		91 38		sta ($38),y			sta 	(zTemp1),y
.90cb		80 f6		bra $90c3			bra 	_LPVStringCopy
.90cd						_LPVStringCopied:
.90cd		fa		plx				plx
.90ce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.90cf						MCCommand:
.90cf		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.90d1		48		pha				pha
.90d2		64 01		stz $01				stz 	1
.90d4		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.90d7		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.90d9		8d 94 07	sta $0794			sta 	DMAControlByte
.90dc		20 8a 91	jsr $918a			jsr 	MCPosition 					; start position
.90df		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.90e1		20 5b 91	jsr $915b			jsr 	MCCopyAddress
.90e4		a2 08		ldx #$08			ldx 	#8
.90e6		20 5b 91	jsr $915b			jsr 	MCCopyAddress
.90e9		b1 30		lda ($30),y			lda 	(codePtr),y
.90eb		c8		iny				iny
.90ec		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.90ee		f0 09		beq $90f9			beq 	_MCSize1D
.90f0		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.90f2		f0 11		beq $9105			beq 	_MCRect2D
.90f4						_MCSyntax:
.90f4		a9 02		lda #$02		lda	#2
.90f6		4c ba 97	jmp $97ba		jmp	ErrorHandler
.90f9						_MCSize1D:
.90f9		a2 00		ldx #$00			ldx 	#0 							; get size
.90fb		20 81 a6	jsr $a681			jsr 	EvaluateInteger
.90fe		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.9100		20 5b 91	jsr $915b			jsr 	MCCopyAddress
.9103		80 24		bra $9129			bra 	_MCDestination
.9105						_MCRect2D:
.9105		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.9107		20 78 91	jsr $9178			jsr 	MCEvalCopyData16
.910a		20 a9 97	jsr $97a9			jsr 	CheckComma
.910d		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.910f		20 78 91	jsr $9178			jsr 	MCEvalCopyData16
.9112		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.9114		20 b1 97	jsr $97b1			jsr 	CheckNextA
.9117		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.9119		20 78 91	jsr $9178			jsr 	MCEvalCopyData16
.911c		a2 12		ldx #$12			ldx 	#$12
.911e		20 7f 91	jsr $917f			jsr 	MCCopyData16
.9121		ad 94 07	lda $0794			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.9124		09 02		ora #$02			ora 	#$02
.9126		8d 94 07	sta $0794			sta 	DMAControlByte
.9129						_MCDestination:
.9129		b1 30		lda ($30),y			lda 	(codePtr),y
.912b		c8		iny				iny
.912c		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.912e		f0 0e		beq $913e			beq 	_MCDestPoke
.9130		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.9132		d0 c0		bne $90f4			bne 	_MCSyntax
.9134		20 8a 91	jsr $918a			jsr 	MCPosition 					; get target address
.9137		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.9139		20 5b 91	jsr $915b			jsr 	MCCopyAddress
.913c		80 0e		bra $914c			bra 	_MCDoDMA 					; and we can go.
.913e						_MCDestPoke:
.913e		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; POKE what
.9141		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.9144		ad 94 07	lda $0794			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.9147		09 04		ora #$04			ora 	#$04
.9149		8d 94 07	sta $0794			sta 	DMAControlByte
.914c						_MCDoDMA:
.914c		ad 94 07	lda $0794			lda 	DMAControlByte 				; set the DMA Control byte to go !
.914f		8d 00 df	sta $df00			sta 	$DF00
.9152						_MCWaitBUSD:
.9152		ad 01 df	lda $df01			lda 	$DF01
.9155		30 fb		bmi $9152			bmi 	_MCWaitBUSD
.9157		68		pla				pla 								; restore I/O.
.9158		85 01		sta $01				sta 	1
.915a		60		rts				rts
.915b						MCCopyAddress:
.915b		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.915d		29 fc		and #$fc			and 	#$FC
.915f		05 70		ora $70				ora 	NSMantissa3
.9161		d0 10		bne $9173			bne 	_MCRange
.9163		a5 58		lda $58				lda 	NSMantissa0
.9165		9d 00 df	sta $df00,x			sta 	$DF00,x
.9168		a5 60		lda $60				lda 	NSMantissa1
.916a		9d 01 df	sta $df01,x			sta 	$DF01,x
.916d		a5 68		lda $68				lda 	NSMantissa2
.916f		9d 02 df	sta $df02,x			sta 	$DF02,x
.9172		60		rts				rts
.9173						_MCRange:
.9173		a9 04		lda #$04		lda	#4
.9175		4c ba 97	jmp $97ba		jmp	ErrorHandler
.9178						MCEvalCopyData16:
.9178		da		phx				phx
.9179		a2 00		ldx #$00			ldx 	#0
.917b		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.917e		fa		plx				plx
.917f						MCCopyData16:
.917f		a5 58		lda $58				lda 	NSMantissa0
.9181		9d 00 df	sta $df00,x			sta 	$DF00,x
.9184		a5 60		lda $60				lda 	NSMantissa1
.9186		9d 01 df	sta $df01,x			sta 	$DF01,x
.9189		60		rts				rts
.918a						MCPosition:
.918a		a2 00		ldx #$00			ldx 	#0 							; get start address.
.918c		b1 30		lda ($30),y			lda 	(codePtr),y
.918e		c9 b8		cmp #$b8			cmp 	#KWD_AT
.9190		f0 04		beq $9196			beq 	_MCPAt
.9192		20 81 a6	jsr $a681			jsr 	EvaluateInteger
.9195		60		rts				rts
.9196						_MCPAt:
.9196		c8		iny				iny
.9197		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; X position
.919a		48		pha				pha
.919b		20 a9 97	jsr $97a9			jsr 	CheckComma
.919e		e8		inx				inx
.919f		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; Y position
.91a2		ca		dex				dex
.91a3		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.91a5		64 58		stz $58				stz 	NSMantissa0
.91a7		64 68		stz $68				stz 	NSMantissa2
.91a9		64 70		stz $70				stz 	NSMantissa3
.91ab		46 60		lsr $60				lsr 	NSMantissa1
.91ad		66 58		ror $58				ror 	NSMantissa0
.91af		46 60		lsr $60				lsr 	NSMantissa1
.91b1		66 58		ror $58				ror 	NSMantissa0
.91b3		68		pla				pla
.91b4		18		clc				clc
.91b5		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.91b7		85 58		sta $58				sta 	NSMantissa0
.91b9		a5 60		lda $60				lda 	NSMantissa1
.91bb		65 59		adc $59				adc 	NSMantissa0+1
.91bd		85 60		sta $60				sta 	NSMantissa1
.91bf		90 02		bcc $91c3			bcc 	_MCPNoCarry
.91c1		e6 68		inc $68				inc 	NSMantissa2
.91c3						_MCPNoCarry:
.91c3		ad bd 07	lda $07bd			lda 	gxBasePage
.91c6		85 69		sta $69				sta 	NSMantissa2+1
.91c8		64 59		stz $59				stz 	NSMantissa0+1
.91ca		64 61		stz $61				stz 	NSMantissa1+1
.91cc		64 71		stz $71				stz 	NSMantissa3+1
.91ce		a2 01		ldx #$01			ldx 	#1
.91d0		20 2d a7	jsr $a72d			jsr 	NSMShiftRight
.91d3		20 2d a7	jsr $a72d			jsr 	NSMShiftRight
.91d6		20 2d a7	jsr $a72d			jsr 	NSMShiftRight
.91d9		a2 00		ldx #$00			ldx 	#0
.91db		20 b4 9a	jsr $9ab4			jsr 	AddTopTwoStack
.91de		60		rts				rts
.0794						DMAControlByte:
>0794								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.91df						NewCommand:
.91df		20 e5 91	jsr $91e5			jsr 	NewProgram 					; does the actual NEW.
.91e2		4c 2e 86	jmp $862e			jmp 	WarmStart 					; and warm starts straight away.
.91e5						NewProgram:
.91e5		20 33 ac	jsr $ac33			jsr 	MemoryNew
.91e8		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.91eb		20 c7 86	jsr $86c7			jsr 	ClearCommand 				; clear everything.
.91ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.91ef						PokeBCommand:
.91ef		a9 01		lda #$01			lda 	#1
.91f1		80 0c		bra $91ff			bra 	PokeCommand
.91f3						PokeWCommand:
.91f3		a9 02		lda #$02			lda 	#2
.91f5		80 08		bra $91ff			bra 	PokeCommand
.91f7						PokeLCommand:
.91f7		a9 03		lda #$03			lda 	#3
.91f9		80 04		bra $91ff			bra 	PokeCommand
.91fb						PokeDCommand:
.91fb		a9 04		lda #$04			lda 	#4
.91fd		80 00		bra $91ff			bra 	PokeCommand
.91ff						PokeCommand:
.91ff		48		pha				pha 								; save count on stack
.9200		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.9202		20 94 a6	jsr $a694			jsr		Evaluate16BitInteger 		; address
.9205		20 a9 97	jsr $97a9			jsr 	CheckComma
.9208		e8		inx				inx
.9209		20 81 a6	jsr $a681			jsr		EvaluateInteger 			; data
.920c		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.920e		85 36		sta $36				sta 	zTemp0
.9210		a5 60		lda $60				lda 	NSMantissa1
.9212		85 37		sta $37				sta 	zTemp0+1
.9214		68		pla				pla 								; count -> zTemp1
.9215		85 38		sta $38				sta 	zTemp1
.9217		5a		phy				phy 								; save Y position.
.9218		a0 00		ldy #$00			ldy 	#0 							; index to write
.921a		a2 00		ldx #$00			ldx 	#0 							; index to read
.921c						_PCLoop:
.921c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.921e		91 36		sta ($36),y			sta 	(zTemp0),y
.9220		c8		iny				iny 								; next byte to write
.9221		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9222		18		clc				clc
.9223		69 08		adc #$08			adc 	#MathStackSize
.9225		aa		tax				tax
.9226		c6 38		dec $38				dec 	zTemp1 						; done them all
.9228		d0 f2		bne $921c			bne 	_PCLoop
.922a		7a		ply				ply 								; restore position.
.922b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.922c						CallProcedure:
.922c		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.922e		b1 30		lda ($30),y			lda 	(codePtr),y
.9230		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9232		f0 0c		beq $9240			beq 	_CPEndParam
.9234						_CPParamLoop:
.9234		20 59 a6	jsr $a659			jsr 	EvaluateValue 				; get parameter onto stack
.9237		e8		inx				inx 								; bump next stack
.9238		b1 30		lda ($30),y			lda 	(codePtr),y
.923a		c8		iny				iny
.923b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.923d		f0 f5		beq $9234			beq 	_CPParamLoop
.923f		88		dey				dey 								; unpick.
.9240						_CPEndParam:
.9240		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.9243		c8		iny				iny									; skip right bracket
.9244		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9246		20 33 b0	jsr $b033			jsr 	StackOpen
.9249		20 78 b0	jsr $b078			jsr 	STKSaveCodePosition 		; save loop position
.924c		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.924e		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9250		a5 60		lda $60				lda 	NSMantissa1
.9252		85 37		sta $37				sta 	zTemp0+1
.9254		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9256		b2 36		lda ($36)			lda 	(zTemp0)
.9258		85 30		sta $30				sta 	safePtr
.925a		b1 36		lda ($36),y			lda 	(zTemp0),y
.925c		85 31		sta $31				sta 	safePtr+1
.925e		c8		iny				iny
.925f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9261		85 32		sta $32				sta 	safePtr+2
.9263		c8		iny				iny
.9264		b1 36		lda ($36),y			lda 	(zTemp0),y
.9266		85 33		sta $33				sta 	safePtr+3
.9268		c8		iny				iny 								; get Y offset -> Y
.9269		b1 36		lda ($36),y			lda 	(zTemp0),y
.926b		a8		tay				tay
.926c		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.926e		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9271		f0 13		beq $9286			beq 	_ParamExit 					; if so, exit.
.9273						_ParamExtract:
.9273		ca		dex				dex 								; put a local term on the level before
.9274		20 1c 90	jsr $901c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9277		20 ed 8e	jsr $8eed			jsr 	AssignVariable 				; assign stacked value to the variable.
.927a		e8		inx				inx 								; advance to next parameter to do.
.927b		e8		inx				inx
.927c		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.927f		f0 05		beq $9286			beq 	_ParamExit
.9281		20 a9 97	jsr $97a9			jsr 	CheckComma 					; comma seperating parameters
.9284		80 ed		bra $9273			bra 	_ParamExtract
.9286						_ParamExit:
.9286		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; check )
.9289		60		rts				rts 								; and continue from here
.928a						Command_ENDPROC:
.928a		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.928c		a2 14		ldx #$14			ldx 	#ERRID_PROC
.928e		20 60 b0	jsr $b060			jsr 	StackCheckFrame
.9291		20 89 b0	jsr $b089			jsr 	STKLoadCodePosition 		; restore code position
.9294		20 52 b0	jsr $b052			jsr 	StackClose
.9297		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9298						Command_Read:
.9298		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.929a		20 08 a1	jsr $a108			jsr 	EvaluateTerm
.929d		b5 50		lda $50,x			lda 	NSStatus,x
.929f		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.92a1		f0 4f		beq $92f2			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.92a3		20 3b 93	jsr $933b			jsr 	SwapDataCodePtrs 			; swap code and data
.92a6		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.92a9		d0 25		bne $92d0			bne 	_CRContinueData  			; forward for the next one.
.92ab		b2 30		lda ($30)			lda 	(codePtr)
.92ad		f0 1c		beq $92cb			beq 	_CRNoData
.92af						_CRKeepSearching:
.92af		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.92b1		a2 80		ldx #$80			ldx 	#KWC_EOL
.92b3		20 fc 96	jsr $96fc			jsr 	ScanForward
.92b6		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.92b8		f0 16		beq $92d0			beq 	_CRHaveData 				; found it
.92ba		18		clc				clc
.92bb		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92bd		65 30		adc $30				adc 	codePtr
.92bf		85 30		sta $30				sta 	codePtr
.92c1		90 02		bcc $92c5			bcc 	_CREExit
.92c3		e6 31		inc $31				inc 	codePtr+1 					; carry
.92c5						_CREExit:
.92c5		a0 03		ldy #$03			ldy 	#3 							; start of line.
.92c7		b2 30		lda ($30)			lda 	(codePtr)
.92c9		d0 e4		bne $92af			bne 	_CRKeepSearching
.92cb						_CRNoData:
.92cb		a9 0b		lda #$0b		lda	#11
.92cd		4c ba 97	jmp $97ba		jmp	ErrorHandler
.92d0						_CRHaveData:
.92d0						_CRContinueData:
.92d0		a2 01		ldx #$01			ldx 	#1
.92d2		20 59 a6	jsr $a659			jsr 	EvaluateValue 				; evaluate value into slot # 1
.92d5		ca		dex				dex
.92d6		20 ed 8e	jsr $8eed			jsr		AssignVariable 				; do the assignment
.92d9		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.92dc		b1 30		lda ($30),y			lda 	(codePtr),y
.92de		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.92e0		d0 04		bne $92e6			bne 	_CRSwapBack
.92e2		c8		iny				iny 								; consume comma
.92e3		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.92e6						_CRSwapBack:
.92e6		20 3b 93	jsr $933b			jsr 	SwapDataCodePtrs			; swap them back.
.92e9		b1 30		lda ($30),y			lda 	(codePtr),y
.92eb		c8		iny				iny
.92ec		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92ee		f0 a8		beq $9298			beq 	Command_Read 				; if so go round again.
.92f0		88		dey				dey 								; unpick get.
.92f1		60		rts				rts
.92f2						_CRSyntax:
.92f2		4c b9 a9	jmp $a9b9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.92f5						RemCommand:
.92f5		b1 30		lda ($30),y			lda 	(codePtr),y
.92f7		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.92f9		d0 06		bne $9301			bne 	_RMExit
.92fb		c8		iny				iny 								; point to offset
.92fc		98		tya				tya 								; A = offset position
.92fd		38		sec				sec 								; add size +1 hence SEC
.92fe		71 30		adc ($30),y			adc 	(codePtr),y
.9300		a8		tay				tay 								; make current position.
.9301						_RMExit:
.9301		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9302						Command_REPEAT:
.9302		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9304		20 33 b0	jsr $b033			jsr 	StackOpen
.9307		20 78 b0	jsr $b078			jsr 	STKSaveCodePosition 		; save loop position
.930a		60		rts				rts
.930b						Command_UNTIL:
.930b		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.930d		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.930f		20 60 b0	jsr $b060			jsr 	StackCheckFrame
.9312		a2 00		ldx #$00			ldx 	#0
.9314		20 62 a6	jsr $a662			jsr 	EvaluateNumber 				; work out the number
.9317		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; check if zero
.931a		f0 04		beq $9320			beq 	_CULoopBack 				; if so keep looping
.931c		20 52 b0	jsr $b052			jsr 	StackClose		 			; return
.931f		60		rts				rts
.9320						_CULoopBack:
.9320		20 89 b0	jsr $b089			jsr 	STKLoadCodePosition 		; loop back
.9323		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9324						Command_Restore:
.9324		20 3b 93	jsr $933b			jsr 	SwapDataCodePtrs 			; swap code and data
.9327		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9329		85 30		sta $30				sta 	codePtr
.932b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.932d		85 31		sta $31				sta 	codePtr+1
.932f		20 3b 93	jsr $933b			jsr 	SwapDataCodePtrs 			; put them back
.9332		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9334		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.9337		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.933a		60		rts				rts
.933b						SwapDataCodePtrs:
.933b		da		phx				phx
.933c		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.933e						_SDCPLoop:
.933e		b5 30		lda $30,x			lda 	safePtr,x
.9340		48		pha				pha
.9341		bd 13 04	lda $0413,x			lda 	dataPointer,x
.9344		95 30		sta $30,x			sta 	safePtr,x
.9346		68		pla				pla
.9347		9d 13 04	sta $0413,x			sta 	dataPointer,x
.934a		ca		dex				dex
.934b		10 f1		bpl $933e			bpl 	_SDCPLoop
.934d		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.9350		8c 17 04	sty $0417			sty 	dataPointer+4
.9353		a8		tay				tay
.9354		fa		plx				plx
.9355		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9356						EOLCommand:
.9356		18		clc				clc
.9357		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9359		65 30		adc $30				adc 	codePtr
.935b		85 30		sta $30				sta 	codePtr
.935d		90 02		bcc $9361			bcc 	_CREExit
.935f		e6 31		inc $31				inc 	codePtr+1 					; carry
.9361						_CREExit:
.9361		80 18		bra $937b			bra 	RunNewLine
.9363						CommandRUNOptLoad:
.9363		b1 30		lda ($30),y			lda 	(codePtr),y
.9365		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.9367		f0 07		beq $9370			beq 	RunCurrentProgram
.9369		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.936b		f0 03		beq $9370			beq 	RunCurrentProgram
.936d		20 6a 8a	jsr $8a6a			jsr 	LoadFile 					; load expected name file.
.9370						RunCurrentProgram:
.9370		20 c7 86	jsr $86c7			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9373		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9375		85 30		sta $30				sta 	codePtr
.9377		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9379		85 31		sta $31				sta 	codePtr+1
.937b						RunNewLine:
.937b		b2 30		lda ($30)			lda 	(codePtr)
.937d		f0 74		beq $93f3			beq 	CRNoProgram         		; no then END.
.937f		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9381		9a		txs				txs
.9382						RUNCodePointerLine:
.9382		a0 02		ldy #$02			ldy 	#2 							; start of program
.9384						_CRIncMainLoop:
.9384		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.9386		f0 03		beq $938b			beq 	_NoEvents					; if zero, skip with Z flag set.
.9388		20 34 81	jsr $8134			jsr 	ProcessEvents
.938b						_NoEvents:
.938b		d0 61		bne $93ee			bne 	_CRBreak
.938d		a5 01		lda $01				lda 	1 							; save I/O 0
.938f		48		pha				pha
.9390		64 01		stz $01				stz 	1 							; access I/O Page 0
.9392		38		sec				sec 								; calculate timer - LastTick
.9393		ad 59 d6	lda $d659			lda 	$D659
.9396		cd 5e 06	cmp $065e			cmp 	LastTick
.9399		f0 06		beq $93a1			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.939b		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.939e		20 96 81	jsr $8196			jsr 	TickHandler 							; go do the code.
.93a1						_NoFireTick:
.93a1		68		pla				pla 								; restore I/O 0
.93a2		85 01		sta $01				sta 	1
.93a4						_CRNoBreakCheck:
.93a4		c8		iny				iny									; next token
.93a5						_CRMainLoop:
.93a5		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.93a8		b1 30		lda ($30),y			lda 	(codePtr),y
.93aa		10 10		bpl $93bc			bpl 	_CRNotKeyword				; not a token.
.93ac		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.93ae		b0 04		bcs $93b4			bcs 	_CRIsKeyword
.93b0		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.93b2		b0 34		bcs $93e8			bcs		_CRSyntaxError
.93b4						_CRIsKeyword:
.93b4		c8		iny				iny 								; consume command
.93b5		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.93b6		aa		tax				tax 								; put in X for vector jump
.93b7		20 eb 93	jsr $93eb			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.93ba		80 e9		bra $93a5			bra 	_CRMainLoop 				; and loop round
.93bc						_CRNotKeyword:
.93bc		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.93be		f0 c4		beq $9384			beq 	_CRIncMainLoop
.93c0		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.93c2		90 05		bcc $93c9			bcc 	_CRNotVariable
.93c4						_CRGoLet:
.93c4		20 b4 8e	jsr $8eb4			jsr 	LetCommand
.93c7		80 dc		bra $93a5			bra 	_CRMainLoop
.93c9						_CRNotVariable:
.93c9		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.93cb		f0 f7		beq $93c4			beq 	_CRGoLet
.93cd		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.93cf		f0 f3		beq $93c4			beq 	_CRGoLet
.93d1		c9 21		cmp #$21			cmp 	#KWD_PLING
.93d3		f0 ef		beq $93c4			beq 	_CRGoLet
.93d5		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.93d7		f0 09		beq $93e2			beq 	_CRGoRem
.93d9		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.93db		d0 0b		bne $93e8			bne 	_CRSyntaxError
.93dd		20 a0 84	jsr $84a0			jsr 	LabelHere
.93e0		80 c3		bra $93a5			bra 	_CRMainLoop
.93e2						_CRGoRem:
.93e2		c8		iny				iny
.93e3		20 f5 92	jsr $92f5			jsr 	RemCommand
.93e6		80 bd		bra $93a5			bra 	_CRMainLoop
.93e8						_CRSyntaxError:
.93e8		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
.93eb						_CRCallVector0:
.93eb		7c 8a 94	jmp ($948a,x)			jmp 	(VectorSet0,x)
.93ee						_CRBreak:
.93ee		a9 01		lda #$01		lda	#1
.93f0		4c ba 97	jmp $97ba		jmp	ErrorHandler
.93f3						CRNoProgram:
.93f3		4c 0b 88	jmp $880b			jmp 	EndCommand
.93f6						Shift1Command:
.93f6		b1 30		lda ($30),y			lda 	(codePtr),y
.93f8		c8		iny				iny
.93f9		0a		asl a				asl 	a
.93fa		aa		tax				tax
.93fb		7c 42 95	jmp ($9542,x)			jmp 	(VectorSet1,x)
.93fe						Shift2Command:
.93fe		b1 30		lda ($30),y			lda 	(codePtr),y
.9400		c8		iny				iny
.9401		0a		asl a				asl 	a
.9402		aa		tax				tax
.9403		7c 90 95	jmp ($9590,x)			jmp 	(VectorSet2,x)
.9406						Unused1:
.9406						Unused2:
.9406						Unused3:
.9406						Unused4:
.9406		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
>9409								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.940a						VectorSetPunc:
>940a		72 9a					.word	ShiftLeft                        ; $00 <<
>940c		5d 98					.word	BinaryCompareLessEqual           ; $01 <=
>940e		53 98					.word	BinaryCompareNotEqual            ; $02 <>
>9410		b9 a9					.word	SyntaxError                      ; $03 !!3
>9412		b9 a9					.word	SyntaxError                      ; $04 ><
>9414		67 98					.word	BinaryCompareGreaterEqual        ; $05 >=
>9416		75 9a					.word	ShiftRight                       ; $06 >>
>9418		b9 a9					.word	SyntaxError                      ; $07 !!7
>941a		b9 a9					.word	SyntaxError                      ; $08 !!8
>941c		b9 a9					.word	SyntaxError                      ; $09 !!9
>941e		b9 a9					.word	SyntaxError                      ; $0a !!10
>9420		b9 a9					.word	SyntaxError                      ; $0b !!11
>9422		b9 a9					.word	SyntaxError                      ; $0c !!12
>9424		b9 a9					.word	SyntaxError                      ; $0d !!13
>9426		b9 a9					.word	SyntaxError                      ; $0e !!14
>9428		b9 a9					.word	SyntaxError                      ; $0f !!15
>942a		b9 a9					.word	SyntaxError                      ; $10 @
>942c		b9 a9					.word	SyntaxError                      ; $11 !!17
>942e		b9 a9					.word	SyntaxError                      ; $12 !!18
>9430		b9 a9					.word	SyntaxError                      ; $13 [
>9432		1e 99					.word	IntegerDivide                    ; $14 \
>9434		b9 a9					.word	SyntaxError                      ; $15 ]
>9436		b0 9b					.word	EorInteger                       ; $16 ^
>9438		b9 a9					.word	SyntaxError                      ; $17 _
>943a		b9 a9					.word	SyntaxError                      ; $18 `
>943c		b9 a9					.word	SyntaxError                      ; $19 !!25
>943e		b9 a9					.word	SyntaxError                      ; $1a !!26
>9440		b9 a9					.word	SyntaxError                      ; $1b {
>9442		7b 9b					.word	OraInteger                       ; $1c |
>9444		b9 a9					.word	SyntaxError                      ; $1d }
>9446		b9 a9					.word	SyntaxError                      ; $1e ~
>9448		b9 a9					.word	SyntaxError                      ; $1f <7F>
>944a		b9 a9					.word	SyntaxError                      ; $20
>944c		e5 9b					.word	WordIndirect                     ; $21 !
>944e		b9 a9					.word	SyntaxError                      ; $22 "
>9450		b9 a9					.word	SyntaxError                      ; $23 #
>9452		b9 a9					.word	SyntaxError                      ; $24 $
>9454		5f 99					.word	IntegerModulus                   ; $25 %
>9456		46 9b					.word	AndInteger                       ; $26 &
>9458		b9 a9					.word	SyntaxError                      ; $27 '
>945a		b9 a9					.word	SyntaxError                      ; $28 (
>945c		b9 a9					.word	SyntaxError                      ; $29 )
>945e		cd 99					.word	MulInteger                       ; $2a *
>9460		e8 9a					.word	AddInteger                       ; $2b +
>9462		b9 a9					.word	SyntaxError                      ; $2c ,
>9464		21 9b					.word	SubInteger                       ; $2d -
>9466		b9 a9					.word	SyntaxError                      ; $2e .
>9468		9f 9d					.word	FDivideCommand                   ; $2f /
>946a		b9 a9					.word	SyntaxError                      ; $30 0
>946c		b9 a9					.word	SyntaxError                      ; $31 1
>946e		b9 a9					.word	SyntaxError                      ; $32 2
>9470		b9 a9					.word	SyntaxError                      ; $33 3
>9472		b9 a9					.word	SyntaxError                      ; $34 4
>9474		b9 a9					.word	SyntaxError                      ; $35 5
>9476		b9 a9					.word	SyntaxError                      ; $36 6
>9478		b9 a9					.word	SyntaxError                      ; $37 7
>947a		b9 a9					.word	SyntaxError                      ; $38 8
>947c		b9 a9					.word	SyntaxError                      ; $39 9
>947e		b9 a9					.word	SyntaxError                      ; $3a :
>9480		b9 a9					.word	SyntaxError                      ; $3b ;
>9482		3f 98					.word	BinaryCompareLess                ; $3c <
>9484		35 98					.word	BinaryCompareEqual               ; $3d =
>9486		49 98					.word	BinaryCompareGreater             ; $3e >
>9488		07 9c					.word	ByteIndirect                     ; $3f ?
.948a						VectorSet0:
>948a		56 93					.word	EOLCommand                       ; $80 !0:EOF
>948c		f6 93					.word	Shift1Command                    ; $81 !1:SH1
>948e		fe 93					.word	Shift2Command                    ; $82 !2:SH2
>9490		89 a2					.word	AbsUnary                         ; $83 ABS(
>9492		97 a2					.word	AllocUnary                       ; $84 ALLOC(
>9494		07 a3					.word	AscUnary                         ; $85 ASC(
>9496		58 a4					.word	ChrUnary                         ; $86 CHR$(
>9498		0e 88					.word	UnaryEvent                       ; $87 EVENT(
>949a		31 98					.word	UnaryFalse                       ; $88 FALSE
>949c		14 a3					.word	FracUnary                        ; $89 FRAC(
>949e		bd a7					.word	ChrGet                           ; $8a GET$(
>94a0		99 a7					.word	AscGet                           ; $8b GET(
>94a2		43 a7					.word	UnaryGetDate                     ; $8c GETDATE$(
>94a4		3f a7					.word	UnaryGetTime                     ; $8d GETTIME$(
>94a6		d4 ae					.word	UnaryHit                         ; $8e HIT(
>94a8		c4 a7					.word	ChrInkey                         ; $8f INKEY$(
>94aa		b2 a7					.word	AscInkey                         ; $90 INKEY(
>94ac		29 a3					.word	IntUnary                         ; $91 INT(
>94ae		17 a4					.word	IsValUnary                       ; $92 ISVAL(
>94b0		6a a4					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>94b2		8e a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>94b4		a2 8e					.word	UnaryJoyB                        ; $95 JOYB(
>94b6		7b 8e					.word	UnaryJoyX                        ; $96 JOYX(
>94b8		7e 8e					.word	UnaryJoyY                        ; $97 JOYY(
>94ba		dd a7					.word	KeyDown                          ; $98 KEYDOWN(
>94bc		cd a5					.word	Unary_Left                       ; $99 LEFT$(
>94be		3a a3					.word	LenUnary                         ; $9a LEN(
>94c0		58 a3					.word	Unary_Max                        ; $9b MAX(
>94c2		ef a5					.word	Unary_Mid                        ; $9c MID$(
>94c4		54 a3					.word	Unary_Min                        ; $9d MIN(
>94c6		a3 a3					.word	Unary_Not                        ; $9e NOT(
>94c8		b6 a3					.word	PeekByteUnary                    ; $9f PEEK(
>94ca		c2 a3					.word	PeekDUnary                       ; $a0 PEEKD(
>94cc		be a3					.word	PeekLUnary                       ; $a1 PEEKL(
>94ce		ba a3					.word	PeekWUnary                       ; $a2 PEEKW(
>94d0		90 af					.word	UnaryPlaying                     ; $a3 PLAYING(
>94d2		f7 a7					.word	Unary_Random                     ; $a4 RANDOM(
>94d4		da a5					.word	Unary_Right                      ; $a5 RIGHT$(
>94d6		11 a8					.word	Unary_Rnd                        ; $a6 RND(
>94d8		ef a3					.word	SgnUnary                         ; $a7 SGN(
>94da		0c a5					.word	SpcUnary                         ; $a8 SPC(
>94dc		27 a5					.word	Unary_Str                        ; $a9 STR$(
>94de		91 96					.word	UnaryTimer                       ; $aa TIMER(
>94e0		26 98					.word	UnaryTrue                        ; $ab TRUE
>94e2		0d a4					.word	ValUnary                         ; $ac VAL(
>94e4		14 8c					.word	ForCommand                       ; $ad FOR
>94e6		57 8d					.word	IfCommand                        ; $ae IF
>94e8		06 94					.word	Unused1                          ; $af PROC
>94ea		02 93					.word	Command_REPEAT                   ; $b0 REPEAT
>94ec		72 97					.word	Command_WHILE                    ; $b1 WHILE
>94ee		80 8d					.word	EndIf                            ; $b2 ENDIF
>94f0		8a 92					.word	Command_ENDPROC                  ; $b3 ENDPROC
>94f2		c6 8c					.word	NextCommand                      ; $b4 NEXT
>94f4		06 94					.word	Unused4                          ; $b5 THEN
>94f6		0b 93					.word	Command_UNTIL                    ; $b6 UNTIL
>94f8		93 97					.word	Command_WEND                     ; $b7 WEND
>94fa		b9 a9					.word	SyntaxError                      ; $b8 AT
>94fc		b9 a9					.word	SyntaxError                      ; $b9 BY
>94fe		92 86					.word	CallCommand                      ; $ba CALL
>9500		88 ac					.word	CircleCommand                    ; $bb CIRCLE
>9502		c7 86					.word	ClearCommand                     ; $bc CLEAR
>9504		b9 a9					.word	SyntaxError                      ; $bd COLOR
>9506		b9 a9					.word	SyntaxError                      ; $be COLOUR
>9508		34 87					.word	Command_Data                     ; $bf DATA
>950a		3c 87					.word	DimCommand                       ; $c0 DIM
>950c		06 94					.word	Unused3                          ; $c1 DOWNTO
>950e		79 8d					.word	ElseCode                         ; $c2 ELSE
>9510		b9 a9					.word	SyntaxError                      ; $c3 FROM
>9512		a7 ae					.word	GfxCommand                       ; $c4 GFX
>9514		b9 a9					.word	SyntaxError                      ; $c5 HERE
>9516		b1 ac					.word	ImageCommand                     ; $c6 IMAGE
>9518		b4 8e					.word	LetCommand                       ; $c7 LET
>951a		03 ad					.word	LineCommand                      ; $c8 LINE
>951c		0e 90					.word	Command_LOCAL                    ; $c9 LOCAL
>951e		cf 90					.word	MCCommand                        ; $ca MEMCOPY
>9520		b9 a9					.word	SyntaxError                      ; $cb OFF
>9522		b9 a9					.word	SyntaxError                      ; $cc ON
>9524		b9 a9					.word	SyntaxError                      ; $cd OUTLINE
>9526		f8 ae					.word	PaletteCommand                   ; $ce PALETTE
>9528		fc ac					.word	PlotCommand                      ; $cf PLOT
>952a		ef 91					.word	PokeBCommand                     ; $d0 POKE
>952c		fb 91					.word	PokeDCommand                     ; $d1 POKED
>952e		f7 91					.word	PokeLCommand                     ; $d2 POKEL
>9530		f3 91					.word	PokeWCommand                     ; $d3 POKEW
>9532		98 92					.word	Command_Read                     ; $d4 READ
>9534		84 ac					.word	RectangleCommand                 ; $d5 RECT
>9536		f5 92					.word	RemCommand                       ; $d6 REM
>9538		b9 a9					.word	SyntaxError                      ; $d7 SOLID
>953a		ac af					.word	SoundCommand                     ; $d8 SOUND
>953c		93 ac					.word	SpriteCommand                    ; $d9 SPRITE
>953e		cd ac					.word	TextCommand                      ; $da TEXT
>9540		06 94					.word	Unused2                          ; $db TO
.9542						VectorSet1:
>9542		b9 a9					.word	SyntaxError                      ; $80 !0:EOF
>9544		b9 a9					.word	SyntaxError                      ; $81 !1:SH1
>9546		b9 a9					.word	SyntaxError                      ; $82 !2:SH2
>9548		66 86					.word	AssembleCommand                  ; $83 ASSEMBLE
>954a		82 86					.word	AssertCommand                    ; $84 ASSERT
>954c		47 ae					.word	BitmapCtrl                       ; $85 BITMAP
>954e		6b 88					.word	Command_BLoad                    ; $86 BLOAD
>9550		0b 89					.word	Command_BSave                    ; $87 BSAVE
>9552		38 af					.word	ClearScreen                      ; $88 CLS
>9554		86 8d					.word	Command_CPrint                   ; $89 CPRINT
>9556		8d 89					.word	Command_Dir                      ; $8a DIR
>9558		f9 87					.word	BootDOS                          ; $8b DOS
>955a		5d 8a					.word	Command_Drive                    ; $8c DRIVE
>955c		0b 88					.word	EndCommand                       ; $8d END
>955e		64 af					.word	Explode                          ; $8e EXPLODE
>9560		b9 a9					.word	SyntaxError                      ; $8f GO
>9562		1f 8d					.word	Command_GOSUB                    ; $90 GOSUB
>9564		3d 8d					.word	GotoCommand                      ; $91 GOTO
>9566		b9 a9					.word	SyntaxError                      ; $92 HIMEM
>9568		81 8d					.word	Command_Input                    ; $93 INPUT
>956a		04 8f					.word	Command_List                     ; $94 LIST
>956c		64 8a					.word	Command_Load                     ; $95 LOAD
>956e		b9 a9					.word	SyntaxError                      ; $96 MOUSE
>9570		df 91					.word	NewCommand                       ; $97 NEW
>9572		40 af					.word	PingCommand                      ; $98 PING
>9574		8d 8d					.word	Command_Print                    ; $99 PRINT
>9576		24 93					.word	Command_Restore                  ; $9a RESTORE
>9578		2f 8d					.word	Command_RETURN                   ; $9b RETURN
>957a		63 93					.word	CommandRUNOptLoad                ; $9c RUN
>957c		36 8b					.word	Command_Save                     ; $9d SAVE
>957e		18 96					.word	CommandSetDate                   ; $9e SETDATE
>9580		1c 96					.word	CommandSetTime                   ; $9f SETTIME
>9582		58 af					.word	ShootCommand                     ; $a0 SHOOT
>9584		8c ae					.word	SpritesCtrl                      ; $a1 SPRITES
>9586		8c 96					.word	StopCommand                      ; $a2 STOP
>9588		ba 8b					.word	Command_VERIFY                   ; $a3 VERIFY
>958a		2b 87					.word	XGoCommand                       ; $a4 XGO
>958c		22 87					.word	XLoadCommand                     ; $a5 XLOAD
>958e		4c af					.word	ZapCommand                       ; $a6 ZAP
.9590						VectorSet2:
>9590		b9 a9					.word	SyntaxError                      ; $80 !0:EOF
>9592		b9 a9					.word	SyntaxError                      ; $81 !1:SH1
>9594		b9 a9					.word	SyntaxError                      ; $82 !2:SH2
>9596		78 a8					.word	Assemble_adc                     ; $83 ADC
>9598		70 a8					.word	Assemble_and                     ; $84 AND
>959a		8c a8					.word	Assemble_asl                     ; $85 ASL
>959c		f6 a8					.word	Assemble_bcc                     ; $86 BCC
>959e		fa a8					.word	Assemble_bcs                     ; $87 BCS
>95a0		02 a9					.word	Assemble_beq                     ; $88 BEQ
>95a2		b9 a8					.word	Assemble_bit                     ; $89 BIT
>95a4		ea a8					.word	Assemble_bmi                     ; $8a BMI
>95a6		fe a8					.word	Assemble_bne                     ; $8b BNE
>95a8		e6 a8					.word	Assemble_bpl                     ; $8c BPL
>95aa		06 a9					.word	Assemble_bra                     ; $8d BRA
>95ac		0a a9					.word	Assemble_brk                     ; $8e BRK
>95ae		ee a8					.word	Assemble_bvc                     ; $8f BVC
>95b0		f2 a8					.word	Assemble_bvs                     ; $90 BVS
>95b2		12 a9					.word	Assemble_clc                     ; $91 CLC
>95b4		66 a9					.word	Assemble_cld                     ; $92 CLD
>95b6		26 a9					.word	Assemble_cli                     ; $93 CLI
>95b8		56 a9					.word	Assemble_clv                     ; $94 CLV
>95ba		84 a8					.word	Assemble_cmp                     ; $95 CMP
>95bc		cd a8					.word	Assemble_cpx                     ; $96 CPX
>95be		c8 a8					.word	Assemble_cpy                     ; $97 CPY
>95c0		aa a8					.word	Assemble_dec                     ; $98 DEC
>95c2		62 a9					.word	Assemble_dex                     ; $99 DEX
>95c4		3e a9					.word	Assemble_dey                     ; $9a DEY
>95c6		74 a8					.word	Assemble_eor                     ; $9b EOR
>95c8		af a8					.word	Assemble_inc                     ; $9c INC
>95ca		72 a9					.word	Assemble_inx                     ; $9d INX
>95cc		5e a9					.word	Assemble_iny                     ; $9e INY
>95ce		e1 a8					.word	Assemble_jmp                     ; $9f JMP
>95d0		dc a8					.word	Assemble_jsr                     ; $a0 JSR
>95d2		80 a8					.word	Assemble_lda                     ; $a1 LDA
>95d4		a5 a8					.word	Assemble_ldx                     ; $a2 LDX
>95d6		c3 a8					.word	Assemble_ldy                     ; $a3 LDY
>95d8		96 a8					.word	Assemble_lsr                     ; $a4 LSR
>95da		76 a9					.word	Assemble_nop                     ; $a5 NOP
>95dc		6c a8					.word	Assemble_ora                     ; $a6 ORA
>95de		22 a9					.word	Assemble_pha                     ; $a7 PHA
>95e0		0e a9					.word	Assemble_php                     ; $a8 PHP
>95e2		6a a9					.word	Assemble_phx                     ; $a9 PHX
>95e4		2a a9					.word	Assemble_phy                     ; $aa PHY
>95e6		32 a9					.word	Assemble_pla                     ; $ab PLA
>95e8		16 a9					.word	Assemble_plp                     ; $ac PLP
>95ea		7e a9					.word	Assemble_plx                     ; $ad PLX
>95ec		3a a9					.word	Assemble_ply                     ; $ae PLY
>95ee		91 a8					.word	Assemble_rol                     ; $af ROL
>95f0		9b a8					.word	Assemble_ror                     ; $b0 ROR
>95f2		1e a9					.word	Assemble_rti                     ; $b1 RTI
>95f4		2e a9					.word	Assemble_rts                     ; $b2 RTS
>95f6		88 a8					.word	Assemble_sbc                     ; $b3 SBC
>95f8		1a a9					.word	Assemble_sec                     ; $b4 SEC
>95fa		7a a9					.word	Assemble_sed                     ; $b5 SED
>95fc		36 a9					.word	Assemble_sei                     ; $b6 SEI
>95fe		7c a8					.word	Assemble_sta                     ; $b7 STA
>9600		6e a9					.word	Assemble_stp                     ; $b8 STP
>9602		a0 a8					.word	Assemble_stx                     ; $b9 STX
>9604		be a8					.word	Assemble_sty                     ; $ba STY
>9606		b4 a8					.word	Assemble_stz                     ; $bb STZ
>9608		52 a9					.word	Assemble_tax                     ; $bc TAX
>960a		4e a9					.word	Assemble_tay                     ; $bd TAY
>960c		d7 a8					.word	Assemble_trb                     ; $be TRB
>960e		d2 a8					.word	Assemble_tsb                     ; $bf TSB
>9610		5a a9					.word	Assemble_tsx                     ; $c0 TSX
>9612		42 a9					.word	Assemble_txa                     ; $c1 TXA
>9614		4a a9					.word	Assemble_txs                     ; $c2 TXS
>9616		46 a9					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.9618						CommandSetDate:
.9618		a9 03		lda #$03			lda 	#3
.961a		80 02		bra $961e			bra 	CSDTMain
.961c						CommandSetTime:
.961c		a9 00		lda #$00			lda 	#0
.961e						CSDTMain:
.961e		48		pha				pha 								; save table offsets 0 or 3
.961f		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9621		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.9624		20 a9 97	jsr $97a9			jsr 	CheckComma
.9627		e8		inx				inx
.9628		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.962b		20 a9 97	jsr $97a9			jsr 	CheckComma
.962e		e8		inx				inx
.962f		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.9632		68		pla				pla 								; table offset in Y, saving Y
.9633		5a		phy				phy
.9634		a8		tay				tay
.9635		a2 00		ldx #$00			ldx 	#0 							; first number
.9637		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.9639		48		pha				pha
.963a		64 01		stz $01				stz 	1
.963c						_CSDTCopy:
.963c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.963e		d9 80 96	cmp $9680,y			cmp 	RTCWMinValues,y 			; check range
.9641		90 1b		bcc $965e			bcc 	_CSDTRange
.9643		d9 86 96	cmp $9686,y			cmp 	RTCWMaxValues,y
.9646		b0 16		bcs $965e			bcs 	_CSDTRange
.9648		20 63 96	jsr $9663			jsr 	CSDTDecimalToBCD
.964b		da		phx				phx 								; save X
.964c		be 7a 96	ldx $967a,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.964f		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.9652		fa		plx				plx 								; restore X
.9653		e8		inx				inx 								; next number
.9654		c8		iny				iny 								; next table entries
.9655		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.9657		d0 e3		bne $963c			bne 	_CSDTCopy
.9659		68		pla				pla 								; restore I/O space
.965a		85 01		sta $01				sta 	1
.965c		7a		ply				ply 								; restore code pos and exit.
.965d		60		rts				rts
.965e						_CSDTRange:
.965e		a9 04		lda #$04		lda	#4
.9660		4c ba 97	jmp $97ba		jmp	ErrorHandler
.9663						CSDTDecimalToBCD:
.9663		da		phx				phx 								; 10 count in X
.9664		a2 00		ldx #$00			ldx 	#0
.9666						_CSDTDBLoop:
.9666		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.9668		90 05		bcc $966f			bcc 	_CSDTDBExit
.966a		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.966c		e8		inx				inx 								; one more 10s.
.966d		80 f7		bra $9666			bra 	_CSDTDBLoop
.966f						_CSDTDBExit:
.966f		85 36		sta $36				sta 	zTemp0 						; units
.9671		8a		txa				txa 								; 10s x 16
.9672		0a		asl a				asl 	a
.9673		0a		asl a				asl 	a
.9674		0a		asl a				asl 	a
.9675		0a		asl a				asl 	a
.9676		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9678		fa		plx				plx
.9679		60		rts				rts
.967a						RTCWOffset:
>967a		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.9680						RTCWMinValues:
>9680		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.9686						RTCWMaxValues:
>9686		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.968c						StopCommand:
.968c		a9 08		lda #$08		lda	#8
.968e		4c ba 97	jmp $97ba		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.9691						UnaryTimer:
.9691		fa		plx				plx
.9692		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.9695						TimerToStackX:
.9695		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; zero result
.9698		64 01		stz $01				stz 	1 							; access I/O
.969a		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.969d		95 58		sta $58,x			sta 	NSMantissa0,x
.969f		ad 5a d6	lda $d65a			lda 	$D65A
.96a2		95 60		sta $60,x			sta 	NSMantissa1,x
.96a4		ad 5b d6	lda $d65b			lda 	$D65B
.96a7		95 68		sta $68,x			sta 	NSMantissa2,x
.96a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.96aa						ProcedureScan:
.96aa		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.96ac		85 30		sta $30				sta 	codePtr
.96ae		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.96b0		85 31		sta $31				sta 	codePtr+1
.96b2						_PSLoop:
.96b2		b2 30		lda ($30)			lda 	(codePtr)
.96b4		f0 42		beq $96f8			beq 	_PSExit
.96b6		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.96b8		b1 30		lda ($30),y			lda 	(codePtr),y
.96ba		c9 af		cmp #$af			cmp 	#KWD_PROC
.96bc		d0 2d		bne $96eb			bne 	_PSNext
.96be		c8		iny				iny 								; get the address of the record to zTemp0 and
.96bf		b1 30		lda ($30),y			lda 	(codePtr),y
.96c1		29 c0		and #$c0			and 	#$C0
.96c3		c9 40		cmp #$40			cmp 	#$40
.96c5		d0 32		bne $96f9			bne 	_PSSyntax
.96c7		b1 30		lda ($30),y			lda 	(codePtr),y
.96c9		18		clc				clc
.96ca		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.96cc		85 37		sta $37				sta 	zTemp0+1
.96ce		c8		iny				iny 								; LSB
.96cf		b1 30		lda ($30),y			lda 	(codePtr),y
.96d1		85 36		sta $36				sta 	zTemp0
.96d3		c8		iny				iny 								; character after variable call.
.96d4		98		tya				tya 								; save Y offset at +7 (exponent slot)
.96d5		a0 07		ldy #$07			ldy 	#7
.96d7		91 36		sta ($36),y			sta 	(zTemp0),y
.96d9		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.96db		a0 02		ldy #$02			ldy 	#2
.96dd		91 36		sta ($36),y			sta 	(zTemp0),y
.96df		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.96e1						_PSCopy:
.96e1		b5 30		lda $30,x			lda 	safePtr,x
.96e3		c8		iny				iny
.96e4		91 36		sta ($36),y			sta 	(zTemp0),y
.96e6		e8		inx				inx
.96e7		e0 04		cpx #$04			cpx 	#4
.96e9		d0 f6		bne $96e1			bne 	_PSCopy
.96eb						_PSNext:
.96eb		18		clc				clc
.96ec		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.96ee		65 30		adc $30				adc 	codePtr
.96f0		85 30		sta $30				sta 	codePtr
.96f2		90 02		bcc $96f6			bcc 	_CREExit
.96f4		e6 31		inc $31				inc 	codePtr+1 					; carry
.96f6						_CREExit:
.96f6		80 ba		bra $96b2			bra 	_PSLoop
.96f8						_PSExit:
.96f8		60		rts				rts
.96f9						_PSSyntax:
.96f9		4c b9 a9	jmp $a9b9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.96fc						ScanForward:
.96fc		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.96fe		86 37		stx $37				stx 	zTemp0+1
.9700		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9702						_ScanLoop:
.9702		b1 30		lda ($30),y			lda 	(codePtr),y
.9704		c8		iny				iny
.9705		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9707		d0 0e		bne $9717			bne 	_ScanGoNext
.9709		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.970b		f0 04		beq $9711			beq 	_ScanMatch
.970d		c5 37		cmp $37				cmp 	zTemp0+1
.970f		d0 06		bne $9717			bne 	_ScanGoNext
.9711						_ScanMatch:
.9711		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9713		d0 01		bne $9716			bne 	_ScanNotEndEOL
.9715		88		dey				dey
.9716						_ScanNotEndEOL:
.9716		60		rts				rts
.9717						_ScanGoNext:
.9717		20 1c 97	jsr $971c			jsr  	ScanForwardOne 				; allows for shifts and so on.
.971a		80 e6		bra $9702			bra 	_ScanLoop
.971c						ScanForwardOne:
.971c		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.971e		90 3e		bcc $975e			bcc 	_SFWExit
.9720		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9722		90 18		bcc $973c			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9724		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9726		b0 2f		bcs $9757			bcs 	_ScanSkipData
.9728		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.972a		90 32		bcc $975e			bcc 	_SFWExit 					; if not, ordinary keywords.
.972c		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.972e		b0 2e		bcs $975e			bcs 	_SFWExit
.9730		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9732		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9734		b0 28		bcs $975e			bcs 	_SFWExit
.9736		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9738		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.973a		80 22		bra $975e			bra 	_SFWExit
.973c						_ScanSkipOne:
.973c		c8		iny				iny 								; consume the extra one.
.973d		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.973f		d0 1d		bne $975e			bne 	_SFWExit
.9741		18		clc				clc
.9742		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9744		65 30		adc $30				adc 	codePtr
.9746		85 30		sta $30				sta 	codePtr
.9748		90 02		bcc $974c			bcc 	_CREExit
.974a		e6 31		inc $31				inc 	codePtr+1 					; carry
.974c						_CREExit:
.974c		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.974e		b2 30		lda ($30)			lda 	(codePtr)
.9750		d0 0c		bne $975e			bne 	_SFWExit 					; if not zero, more to scan
.9752		a9 13		lda #$13		lda	#19
.9754		4c ba 97	jmp $97ba		jmp	ErrorHandler
.9757						_ScanSkipData:
.9757		88		dey				dey 								; point at data token
.9758		c8		iny				iny 								; point to offset
.9759		98		tya				tya 								; A = offset position
.975a		38		sec				sec 								; add size +1 hence SEC
.975b		71 30		adc ($30),y			adc 	(codePtr),y
.975d		a8		tay				tay 								; make current position.
.975e						_SFWExit:
.975e		60		rts				rts
.975f						ScanGetCurrentLineStep:
.975f		64 38		stz $38				stz 	zTemp1
.9761		a0 03		ldy #$03			ldy 	#3
.9763						_SGCLSLoop:
.9763		b1 30		lda ($30),y			lda 	(codePtr),y
.9765		c8		iny				iny
.9766		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9768		f0 05		beq $976f			beq 	_SGCLSExit
.976a		20 1c 97	jsr $971c			jsr 	ScanForwardOne
.976d		80 f4		bra $9763			bra 	_SGCLSLoop
.976f						_SGCLSExit:
.976f		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9771		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9772						Command_WHILE:
.9772		5a		phy				phy 								; save position of the test
.9773		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9775		20 62 a6	jsr $a662			jsr 	EvaluateNumber
.9778		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; check if zero
.977b		f0 0e		beq $978b			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.977d		98		tya				tya 								; position *after* test.
.977e		7a		ply				ply 								; restore position before test, at WHILE
.977f		88		dey				dey 								; so we execute the WHILE command again.
.9780		48		pha				pha 								; push after test on the stack
.9781		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9783		20 33 b0	jsr $b033			jsr 	StackOpen
.9786		20 78 b0	jsr $b078			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9789		7a		ply				ply 								; restore the position *after* the test
.978a		60		rts				rts
.978b						_WHExitLoop:
.978b		68		pla				pla 								; throw post loop position
.978c		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.978e		aa		tax				tax
.978f		20 fc 96	jsr $96fc			jsr 	ScanForward
.9792		60		rts				rts
.9793						Command_WEND:
.9793		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9795		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9797		20 60 b0	jsr $b060			jsr 	StackCheckFrame
.979a		20 89 b0	jsr $b089			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.979d		20 52 b0	jsr $b052			jsr 	StackClose		 			; erase the frame
.97a0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.97a1						CheckRightBracket:
.97a1		b1 30		lda ($30),y			lda 	(codePtr),y
.97a3		c8		iny				iny
.97a4		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.97a6		d0 0f		bne $97b7			bne 	CNAFail
.97a8		60		rts				rts
.97a9						CheckComma:
.97a9		b1 30		lda ($30),y			lda 	(codePtr),y
.97ab		c8		iny				iny
.97ac		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.97ae		d0 07		bne $97b7			bne 	CNAFail
.97b0		60		rts				rts
.97b1						CheckNextA:
.97b1		d1 30		cmp ($30),y			cmp 	(codePtr),y
.97b3		d0 02		bne $97b7			bne 	CNAFail
.97b5		c8		iny				iny 								; skip character
.97b6		60		rts				rts 								; and exit
.97b7						CNAFail:
.97b7		4c b9 a9	jmp $a9b9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.97ba						ErrorHandler:
.97ba		a8		tay				tay 								; find the error text
.97bb		f0 49		beq $9806			beq 	_EHEnd
.97bd		a2 00		ldx #$00			ldx 	#0
.97bf		a9 d2		lda #$d2			lda 	#((ErrorText) & $FF)
.97c1		85 36		sta $36				sta 	0+zTemp0
.97c3		a9 a9		lda #$a9			lda 	#((ErrorText) >> 8)
.97c5		85 37		sta $37				sta 	1+zTemp0
.97c7						_EHFind:
.97c7		88		dey				dey 								; keep looking through text
.97c8		f0 0e		beq $97d8			beq 	_EHFound
.97ca						_EHFindZero:
.97ca		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.97cc		e6 36		inc $36				inc 	zTemp0
.97ce		d0 02		bne $97d2			bne 	_EHFNoCarry
.97d0		e6 37		inc $37				inc 	zTemp0+1
.97d2						_EHFNoCarry:
.97d2		c9 00		cmp #$00			cmp 	#0
.97d4		d0 f4		bne $97ca			bne 	_EHFindZero
.97d6		80 ef		bra $97c7			bra 	_EHFind
.97d8						_EHFound:
.97d8		a5 36		lda $36				lda 	zTemp0 						; print message
.97da		a6 37		ldx $37				ldx 	zTemp0+1
.97dc		20 13 98	jsr $9813			jsr 	PrintStringXA
.97df		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.97e1		b1 30		lda ($30),y			lda 	(codePtr),y
.97e3		d0 05		bne $97ea			bne 	_EHAtMsg
.97e5		c8		iny				iny
.97e6		b1 30		lda ($30),y			lda 	(codePtr),y
.97e8		f0 17		beq $9801			beq 	_EHCREnd
.97ea						_EHAtMsg:
.97ea		a2 98		ldx #$98			ldx 	#_AtMsg >> 8 				; print " at "
.97ec		a9 09		lda #$09			lda 	#_AtMsg & $FF
.97ee		20 13 98	jsr $9813			jsr 	PrintStringXA
.97f1		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.97f3		b1 30		lda ($30),y			lda 	(codePtr),y
.97f5		48		pha				pha
.97f6		c8		iny				iny
.97f7		b1 30		lda ($30),y			lda 	(codePtr),y
.97f9		aa		tax				tax
.97fa		68		pla				pla
.97fb		20 29 9c	jsr $9c29			jsr 	ConvertInt16 				; convert XA to string
.97fe		20 13 98	jsr $9813			jsr 	PrintStringXA 				; and print it.
.9801						_EHCREnd:
.9801		a9 0d		lda #$0d			lda 	#13 						; new line
.9803		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9806						_EHEnd:
.9806		4c 2e 86	jmp $862e			jmp 	WarmStart
>9809		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9811		20 00
.9813						PrintStringXA:
.9813		5a		phy				phy
.9814		86 37		stx $37				stx 	zTemp0+1
.9816		85 36		sta $36				sta 	zTemp0
.9818		a0 00		ldy #$00			ldy 	#0
.981a						_PSXALoop:
.981a		b1 36		lda ($36),y			lda 	(zTemp0),y
.981c		f0 06		beq $9824			beq 	_PSXAExit
.981e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9821		c8		iny				iny
.9822		80 f6		bra $981a			bra 	_PSXALoop
.9824						_PSXAExit:
.9824		7a		ply				ply
.9825		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9826						UnaryTrue:
.9826		fa		plx				plx
.9827						ReturnTrue:
.9827		a9 01		lda #$01			lda 	#1  						; set to 1
.9829		20 16 a7	jsr $a716			jsr 	NSMSetByte
.982c		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.982e		95 50		sta $50,x			sta 	NSStatus,x
.9830		60		rts				rts
.9831						UnaryFalse:
.9831		fa		plx				plx
.9832						ReturnFalse:
.9832		4c 14 a7	jmp $a714			jmp 	NSMSetZero 					; set it all to zero
.9835						BinaryCompareEqual:
.9835		fa		plx				plx
.9836		20 71 98	jsr $9871			jsr 	CompareBaseCode
.9839		c9 00		cmp #$00			cmp 	#0
.983b		f0 ea		beq $9827			beq 	ReturnTrue
.983d		80 f3		bra $9832			bra 	ReturnFalse
.983f						BinaryCompareLess:
.983f		fa		plx				plx
.9840		20 71 98	jsr $9871			jsr 	CompareBaseCode
.9843		c9 ff		cmp #$ff			cmp 	#$FF
.9845		f0 e0		beq $9827			beq 	ReturnTrue
.9847		80 e9		bra $9832			bra 	ReturnFalse
.9849						BinaryCompareGreater:
.9849		fa		plx				plx
.984a		20 71 98	jsr $9871			jsr 	CompareBaseCode
.984d		c9 01		cmp #$01			cmp 	#1
.984f		f0 d6		beq $9827			beq 	ReturnTrue
.9851		80 df		bra $9832			bra 	ReturnFalse
.9853						BinaryCompareNotEqual:
.9853		fa		plx				plx
.9854		20 71 98	jsr $9871			jsr 	CompareBaseCode
.9857		c9 00		cmp #$00			cmp 	#0
.9859		d0 cc		bne $9827			bne 	ReturnTrue
.985b		80 d5		bra $9832			bra 	ReturnFalse
.985d						BinaryCompareLessEqual:
.985d		fa		plx				plx
.985e		20 71 98	jsr $9871			jsr 	CompareBaseCode
.9861		c9 01		cmp #$01			cmp 	#1
.9863		d0 c2		bne $9827			bne 	ReturnTrue
.9865		80 cb		bra $9832			bra 	ReturnFalse
.9867						BinaryCompareGreaterEqual:
.9867		fa		plx				plx
.9868		20 71 98	jsr $9871			jsr 	CompareBaseCode
.986b		c9 ff		cmp #$ff			cmp 	#$FF
.986d		d0 b8		bne $9827			bne 	ReturnTrue
.986f		80 c1		bra $9832			bra 	ReturnFalse
.9871						CompareBaseCode:
.9871		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; make both values if references.
.9874		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9876		15 51		ora $51,x			ora 	NSStatus+1,x
.9878		29 10		and #$10			and 	#NSTString
.987a		d0 37		bne $98b3			bne 	_CBCString 					; if so do string code, which will check if both.
.987c		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.987e		15 79		ora $79,x			ora 	NSExponent+1,x
.9880		d0 34		bne $98b6			bne 	_CBCFloat
.9882		b5 50		lda $50,x			lda 	NSStatus,x
.9884		15 51		ora $51,x			ora 	NSStatus+1,x
.9886		29 08		and #$08			and 	#NSTFloat
.9888		d0 2c		bne $98b6			bne 	_CBCFloat
.988a		20 b9 98	jsr $98b9			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.988d		e8		inx				inx
.988e		20 b9 98	jsr $98b9			jsr 	CompareFixMinusZero
.9891		ca		dex				dex
.9892		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9894		55 51		eor $51,x			eor 	NSStatus+1,x
.9896		10 0a		bpl $98a2			bpl 	_CDCSameSign
.9898		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.989a		30 14		bmi $98b0			bmi 	_CBCLess 					; return $FF
.989c						_CBCGreater:
.989c		a9 01		lda #$01			lda 	#1
.989e		60		rts				rts
.989f						_CBCEqual:
.989f		a9 00		lda #$00			lda 	#0
.98a1		60		rts				rts
.98a2						_CDCSameSign:
.98a2		20 ce 9a	jsr $9ace			jsr 	SubTopTwoStack 				; unsigned subtract
.98a5		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; or the mantissa together
.98a8		f0 f5		beq $989f			beq 	_CBCEqual 					; -0 == 0
.98aa		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.98ac		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.98ae		10 ec		bpl $989c			bpl 	_CBCGreater
.98b0						_CBCLess:
.98b0		a9 ff		lda #$ff			lda 	#$FF
.98b2		60		rts				rts
.98b3						_CBCString:
.98b3		4c 3f 9a	jmp $9a3f			jmp 	CompareStrings
.98b6						_CBCFloat:
.98b6		4c 89 9d	jmp $9d89			jmp 	CompareFloat
.98b9						CompareFixMinusZero:
.98b9		20 36 a7	jsr $a736			jsr 	NSMIsZero
.98bc		d0 02		bne $98c0			bne 	_CFXMZNotZero
.98be		74 50		stz $50,x			stz 	NSStatus,x
.98c0						_CFXMZNotZero:
.98c0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.98c1						StringConcat:
.98c1		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.98c3		35 51		and $51,x			and 	NSStatus+1,x
.98c5		29 18		and #$18			and 	#NSBTypeMask
.98c7		c9 10		cmp #$10			cmp 	#NSTString
.98c9		d0 50		bne $991b			bne		_SCType
.98cb		64 38		stz $38				stz 	zTemp1 						; counting total length
.98cd		e8		inx				inx
.98ce		20 ec 98	jsr $98ec			jsr 	_SCSetupZ0 					; setup for second
.98d1		20 f5 98	jsr $98f5			jsr 	_SCLengthZ0 				; length for second
.98d4		ca		dex				dex
.98d5		20 ec 98	jsr $98ec			jsr 	_SCSetupZ0 					; setup for first
.98d8		20 f5 98	jsr $98f5			jsr 	_SCLengthZ0 				; length for first
.98db		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.98dd		20 23 b1	jsr $b123			jsr 	StringTempAllocate
.98e0		20 0c 99	jsr $990c			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.98e3		e8		inx				inx
.98e4		20 ec 98	jsr $98ec			jsr 	_SCSetupZ0 					; copy second out
.98e7		20 0c 99	jsr $990c			jsr 	_SCCopy
.98ea		ca		dex				dex
.98eb		60		rts				rts
.98ec						_SCSetupZ0:
.98ec		b5 58		lda $58,x			lda 	NSMantissa0,x
.98ee		85 36		sta $36				sta 	zTemp0
.98f0		b5 60		lda $60,x			lda 	NSMantissa1,x
.98f2		85 37		sta $37				sta 	zTemp0+1
.98f4		60		rts				rts
.98f5						_SCLengthZ0:
.98f5		5a		phy				phy
.98f6		a0 00		ldy #$00			ldy 	#0
.98f8						_SCLenLoop:
.98f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.98fa		f0 0e		beq $990a			beq 	_SCLExit
.98fc		c8		iny				iny
.98fd		e6 38		inc $38				inc 	zTemp1
.98ff		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9901		c9 fd		cmp #$fd			cmp 	#253
.9903		d0 f3		bne $98f8			bne		_SCLenLoop
.9905		a9 09		lda #$09		lda	#9
.9907		4c ba 97	jmp $97ba		jmp	ErrorHandler
.990a						_SCLExit:
.990a		7a		ply				ply
.990b		60		rts				rts
.990c						_SCCopy:
.990c		5a		phy				phy
.990d		a0 00		ldy #$00			ldy 	#0
.990f						_SCCopyLoop:
.990f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9911		f0 06		beq $9919			beq 	_SCCExit
.9913		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.9916		c8		iny				iny
.9917		80 f6		bra $990f			bra 	_SCCopyLoop
.9919						_SCCExit:
.9919		7a		ply				ply
.991a		60		rts				rts
.991b						_SCType:
.991b		4c c3 a9	jmp $a9c3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.991e						IntegerDivide:
.991e		fa		plx				plx
.991f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9921		15 51		ora $51,x			ora 	NSStatus+1,x
.9923		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9924		0a		asl a				asl 	a
.9925		10 05		bpl $992c			bpl 	_NotRef
.9927		48		pha				pha
.9928		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.992b		68		pla				pla
.992c						_NotRef:
.992c		0a		asl a				asl 	a
.992d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.992f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9931		15 79		ora $79,x			ora 	NSExponent+1,x
.9933		f0 03		beq $9938			beq 	_IntegerCode 				; if clear, then we have two integers
.9935		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; anything else, type mismatch.
.9938						_IntegerCode:
.9938		20 52 99	jsr $9952			jsr 	CheckDivideZero 			; do div zero check
.993b		20 84 99	jsr $9984			jsr 	Int32Divide 				; do the division
.993e		20 35 9a	jsr $9a35			jsr 	CalculateSign 				; calculate result sign
.9941						NSMCopyPlusTwoToZero:
.9941		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9943		95 58		sta $58,x			sta 	NSMantissa0,x
.9945		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9947		95 60		sta $60,x			sta 	NSMantissa1,x
.9949		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.994b		95 68		sta $68,x			sta 	NSMantissa2,x
.994d		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.994f		95 70		sta $70,x			sta 	NSMantissa3,x
.9951		60		rts				rts
.9952						CheckDivideZero:
.9952		e8		inx				inx
.9953		20 36 a7	jsr $a736			jsr 	NSMIsZero
.9956		f0 02		beq $995a			beq 	_CDVError
.9958		ca		dex				dex
.9959		60		rts				rts
.995a						_CDVError:
.995a		a9 03		lda #$03		lda	#3
.995c		4c ba 97	jmp $97ba		jmp	ErrorHandler
.995f						IntegerModulus:
.995f		fa		plx				plx
.9960		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9962		15 51		ora $51,x			ora 	NSStatus+1,x
.9964		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9965		0a		asl a				asl 	a
.9966		10 05		bpl $996d			bpl 	_NotRef
.9968		48		pha				pha
.9969		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.996c		68		pla				pla
.996d						_NotRef:
.996d		0a		asl a				asl 	a
.996e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9970		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9972		15 79		ora $79,x			ora 	NSExponent+1,x
.9974		f0 03		beq $9979			beq 	_IntegerCode 				; if clear, then we have two integers
.9976		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; anything else, type mismatch.
.9979						_IntegerCode:
.9979						IntegerModulusNoCheck:
.9979		20 52 99	jsr $9952			jsr 	CheckDivideZero 			; do div zero check
.997c		20 84 99	jsr $9984			jsr 	Int32Divide 				; do the division
.997f		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9981		56 50		lsr $50,x			lsr 	NSStatus,x
.9983		60		rts				rts
.9984						Int32Divide:
.9984		48		pha				pha 								; save AXY
.9985		5a		phy				phy
.9986		20 f7 a6	jsr $a6f7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9989		20 10 a7	jsr $a710			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.998c		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.998e						_I32DivideLoop:
.998e		e8		inx				inx
.998f		e8		inx				inx
.9990		20 23 a7	jsr $a723			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9993		ca		dex				dex
.9994		ca		dex				dex
.9995		20 24 a7	jsr $a724			jsr 	NSMRotateLeft
.9998		20 c3 99	jsr $99c3			jsr 	DivideCheckSubtract 		; check if subtract possible
.999b		90 02		bcc $999f			bcc 	_I32DivideNoCarryIn
.999d		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.999f						_I32DivideNoCarryIn:
.999f		88		dey				dey 								; loop round till division completed.
.99a0		d0 ec		bne $998e			bne 	_I32DivideLoop
.99a2		7a		ply				ply 								; restore AXY and exit
.99a3		68		pla				pla
.99a4		60		rts				rts
.99a5						Int32ShiftDivide:
.99a5		48		pha				pha 								; save AY
.99a6		5a		phy				phy
.99a7		e8		inx				inx 								; clear S[X+2]
.99a8		e8		inx				inx
.99a9		20 14 a7	jsr $a714			jsr 	NSMSetZero
.99ac		ca		dex				dex
.99ad		ca		dex				dex
.99ae		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.99b0						_I32SDLoop:
.99b0		20 c3 99	jsr $99c3			jsr 	DivideCheckSubtract 		; check if subtract possible
.99b3		e8		inx				inx
.99b4		e8		inx				inx
.99b5		20 24 a7	jsr $a724			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.99b8		ca		dex				dex
.99b9		ca		dex				dex
.99ba		20 24 a7	jsr $a724			jsr 	NSMRotateLeft
.99bd		88		dey				dey 	 							; do 31 times
.99be		d0 f0		bne $99b0			bne 	_I32SDLoop
.99c0		7a		ply				ply 								; restore AY and exit
.99c1		68		pla				pla
.99c2		60		rts				rts
.99c3						DivideCheckSubtract:
.99c3		20 ce 9a	jsr $9ace			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.99c6		b0 04		bcs $99cc			bcs 	_DCSExit 					; if carry set, then could do, exit
.99c8		20 b4 9a	jsr $9ab4			jsr 	AddTopTwoStack 				; add it back in
.99cb		18		clc				clc 								; and return False
.99cc						_DCSExit:
.99cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.99cd						MulInteger:
.99cd		fa		plx				plx
.99ce		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99d0		15 51		ora $51,x			ora 	NSStatus+1,x
.99d2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99d3		0a		asl a				asl 	a
.99d4		10 05		bpl $99db			bpl 	_NotRef
.99d6		48		pha				pha
.99d7		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99da		68		pla				pla
.99db						_NotRef:
.99db		0a		asl a				asl 	a 							; put MSB of type into A:7
.99dc		30 09		bmi $99e7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99de		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99e0		15 79		ora $79,x			ora 	NSExponent+1,x
.99e2		f0 06		beq $99ea			beq 	_IntegerCode 				; if clear, then we have two integers
.99e4		4c 4b 9e	jmp $9e4b			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.99e7						_StringData:
.99e7		4c cd a9	jmp $a9cd			jmp 	NotDoneError							; at least one string - don't know both are strings.
.99ea						_IntegerCode:
.99ea		20 f7 99	jsr $99f7			jsr 	MultiplyShort
.99ed		c9 00		cmp #$00			cmp 	#0
.99ef		f0 05		beq $99f6			beq 	_MIExit
.99f1		a9 04		lda #$04		lda	#4
.99f3		4c ba 97	jmp $97ba		jmp	ErrorHandler
.99f6						_MIExit:
.99f6		60		rts				rts
.99f7						MultiplyShort:
.99f7		5a		phy				phy 								; save Y
.99f8		20 f7 a6	jsr $a6f7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99fb		20 10 a7	jsr $a710			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.99fe		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9a00						_I32MLoop:
.9a00		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9a02		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9a04		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9a06		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9a08		f0 25		beq $9a2f			beq 	_I32MExit 					; exit if zero
.9a0a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9a0c		29 01		and #$01			and 	#1
.9a0e		f0 0d		beq $9a1d			beq 	_I32MNoAdd
.9a10		20 b4 9a	jsr $9ab4			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9a13		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9a15		10 06		bpl $9a1d			bpl 	_I32MNoAdd
.9a17						_I32ShiftRight:
.9a17		20 2d a7	jsr $a72d			jsr 	NSMShiftRight 				; shift S[X] right
.9a1a		c8		iny				iny 								; increment shift count
.9a1b		80 09		bra $9a26			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9a1d						_I32MNoAdd:
.9a1d		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9a1f		70 f6		bvs $9a17			bvs 	_I32ShiftRight 				; instead.
.9a21		e8		inx				inx
.9a22		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9a25		ca		dex				dex
.9a26						_I32MShiftUpper:
.9a26		e8		inx				inx 								; shift S[X+2] right
.9a27		e8		inx				inx
.9a28		20 2d a7	jsr $a72d			jsr 	NSMShiftRight
.9a2b		ca		dex				dex
.9a2c		ca		dex				dex
.9a2d		80 d1		bra $9a00			bra 	_I32MLoop 					; try again.
.9a2f						_I32MExit:
.9a2f		20 35 9a	jsr $9a35			jsr 	CalculateSign
.9a32		98		tya				tya 								; shift in A
.9a33		7a		ply				ply 								; restore Y and exit
.9a34		60		rts				rts
.9a35						CalculateSign:
.9a35		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9a37		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9a39		55 51		eor $51,x			eor 	NSStatus+1,x
.9a3b		0a		asl a				asl 	a 							; shift bit 7 into carry
.9a3c		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9a3e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a3f						CompareStrings:
.9a3f		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9a41		35 51		and $51,x			and 	NSStatus+1,x
.9a43		29 10		and #$10			and 	#NSBIsString
.9a45		f0 28		beq $9a6f			beq 	_CSTypeError
.9a47		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a49		85 36		sta $36				sta 	zTemp0
.9a4b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a4d		85 37		sta $37				sta 	zTemp0+1
.9a4f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9a51		85 38		sta $38				sta 	zTemp1
.9a53		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a55		85 39		sta $39				sta 	zTemp1+1
.9a57		5a		phy				phy 								; save Y so we can access strings
.9a58		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a5a						_CSLoop:
.9a5a		c8		iny				iny
.9a5b		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a5d		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a5f		d0 06		bne $9a67			bne 	_CSDifferent
.9a61		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a63		d0 f5		bne $9a5a			bne 	_CSLoop 					; still comparing
.9a65						_CSExit:
.9a65		7a		ply				ply 								; reached end, return zero in A from EOS
.9a66		60		rts				rts
.9a67						_CSDifferent:
.9a67		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a69		90 fa		bcc $9a65			bcc		_CSExit
.9a6b		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9a6d		80 f6		bra $9a65			bra 	_CSExit
.9a6f						_CSTypeError:
.9a6f		4c c3 a9	jmp $a9c3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a72						ShiftLeft:
.9a72		38		sec				sec 								; common code, carry determines which way.
.9a73		80 01		bra $9a76			bra 	ShiftMain
.9a75						ShiftRight:
.9a75		18		clc				clc
.9a76						ShiftMain:
.9a76		fa		plx				plx 								; restore X
.9a77		08		php				php 								; save direction
.9a78		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a7a		15 51		ora $51,x			ora 	NSStatus+1,x
.9a7c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a7d		0a		asl a				asl 	a
.9a7e		10 05		bpl $9a85			bpl 	_NotRef
.9a80		48		pha				pha
.9a81		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a84		68		pla				pla
.9a85						_NotRef:
.9a85		0a		asl a				asl 	a
.9a86		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a88		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a8a		15 79		ora $79,x			ora 	NSExponent+1,x
.9a8c		f0 03		beq $9a91			beq 	_IntegerCode 				; if clear, then we have two integers
.9a8e		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; anything else, type mismatch.
.9a91						_IntegerCode:
.9a91		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9a93		29 e0		and #$e0			and 	#$E0
.9a95		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9a97		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9a99		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9a9b		d0 12		bne $9aaf			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9a9d						_SMLoop:
.9a9d		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9a9f		30 11		bmi $9ab2			bmi 	_SMExit 					; exit if done.
.9aa1		28		plp				plp 								; restore direction setting
.9aa2		08		php				php
.9aa3		90 05		bcc $9aaa			bcc 	_SMRight
.9aa5		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; shift left if CS
.9aa8		80 f3		bra $9a9d			bra 	_SMLoop
.9aaa						_SMRight:
.9aaa		20 2d a7	jsr $a72d			jsr 	NSMShiftRight 				; shift right if CC
.9aad		80 ee		bra $9a9d			bra 	_SMLoop
.9aaf						_SMExit0:
.9aaf		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; return zero.
.9ab2						_SMExit:
.9ab2		28		plp				plp 								; throw direction
.9ab3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9ab4						AddTopTwoStack:
.9ab4		18		clc				clc
.9ab5		b5 58		lda $58,x			lda		NSMantissa0,x
.9ab7		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9ab9		95 58		sta $58,x			sta 	NSMantissa0,x
.9abb		b5 60		lda $60,x			lda		NSMantissa1,x
.9abd		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9abf		95 60		sta $60,x			sta 	NSMantissa1,x
.9ac1		b5 68		lda $68,x			lda		NSMantissa2,x
.9ac3		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9ac5		95 68		sta $68,x			sta 	NSMantissa2,x
.9ac7		b5 70		lda $70,x			lda		NSMantissa3,x
.9ac9		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9acb		95 70		sta $70,x			sta 	NSMantissa3,x
.9acd		60		rts				rts
.9ace						SubTopTwoStack:
.9ace		38		sec				sec
.9acf		b5 58		lda $58,x			lda		NSMantissa0,x
.9ad1		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9ad3		95 58		sta $58,x			sta 	NSMantissa0,x
.9ad5		b5 60		lda $60,x			lda		NSMantissa1,x
.9ad7		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9ad9		95 60		sta $60,x			sta 	NSMantissa1,x
.9adb		b5 68		lda $68,x			lda		NSMantissa2,x
.9add		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9adf		95 68		sta $68,x			sta 	NSMantissa2,x
.9ae1		b5 70		lda $70,x			lda		NSMantissa3,x
.9ae3		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9ae5		95 70		sta $70,x			sta 	NSMantissa3,x
.9ae7		60		rts				rts
.9ae8						AddInteger:
.9ae8		fa		plx				plx
.9ae9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9aeb		15 51		ora $51,x			ora 	NSStatus+1,x
.9aed		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aee		0a		asl a				asl 	a
.9aef		10 05		bpl $9af6			bpl 	_NotRef
.9af1		48		pha				pha
.9af2		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9af5		68		pla				pla
.9af6						_NotRef:
.9af6		0a		asl a				asl 	a 							; put MSB of type into A:7
.9af7		30 09		bmi $9b02			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9af9		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9afb		15 79		ora $79,x			ora 	NSExponent+1,x
.9afd		f0 06		beq $9b05			beq 	_IntegerCode 				; if clear, then we have two integers
.9aff		4c fb 9c	jmp $9cfb			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b02						_StringData:
.9b02		4c c1 98	jmp $98c1			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b05						_IntegerCode:
.9b05						AddCode:
.9b05		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b07		55 51		eor $51,x			eor 	NSStatus+1,x
.9b09		10 a9		bpl $9ab4			bpl 	AddTopTwoStack
.9b0b		20 ce 9a	jsr $9ace			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b0e		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b10		10 07		bpl $9b19			bpl 	_AddExit
.9b12		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b14		95 50		sta $50,x			sta 	NSStatus,x
.9b16		20 dd a6	jsr $a6dd			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b19						_AddExit:
.9b19		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; check for -0
.9b1c		d0 02		bne $9b20			bne 	_AddNonZero
.9b1e		74 50		stz $50,x			stz 	NSStatus,x
.9b20						_AddNonZero:
.9b20		60		rts				rts
.9b21						SubInteger:
.9b21		fa		plx				plx
.9b22		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b24		15 51		ora $51,x			ora 	NSStatus+1,x
.9b26		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b27		0a		asl a				asl 	a
.9b28		10 05		bpl $9b2f			bpl 	_NotRef
.9b2a		48		pha				pha
.9b2b		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b2e		68		pla				pla
.9b2f						_NotRef:
.9b2f		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b30		30 09		bmi $9b3b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b32		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b34		15 79		ora $79,x			ora 	NSExponent+1,x
.9b36		f0 06		beq $9b3e			beq 	_IntegerCode 				; if clear, then we have two integers
.9b38		4c 00 9d	jmp $9d00			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b3b						_StringData:
.9b3b		4c cd a9	jmp $a9cd			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b3e						_IntegerCode:
.9b3e		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9b40		49 80		eor #$80			eor 	#$80
.9b42		95 51		sta $51,x			sta 	NSStatus+1,x
.9b44		80 bf		bra $9b05			bra 	AddCode 					; and do the same code as add.
.9b46						AndInteger:
.9b46		fa		plx				plx
.9b47		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b49		15 51		ora $51,x			ora 	NSStatus+1,x
.9b4b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b4c		0a		asl a				asl 	a
.9b4d		10 05		bpl $9b54			bpl 	_NotRef
.9b4f		48		pha				pha
.9b50		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b53		68		pla				pla
.9b54						_NotRef:
.9b54		0a		asl a				asl 	a
.9b55		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b57		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b59		15 79		ora $79,x			ora 	NSExponent+1,x
.9b5b		f0 03		beq $9b60			beq 	_IntegerCode 				; if clear, then we have two integers
.9b5d		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; anything else, type mismatch.
.9b60						_IntegerCode:
.9b60		b5 58		lda $58,x			lda		NSMantissa0,x
.9b62		35 59		and $59,x			and 		NSMantissa0+1,x
.9b64		95 58		sta $58,x			sta 	NSMantissa0,x
.9b66		b5 60		lda $60,x			lda		NSMantissa1,x
.9b68		35 61		and $61,x			and 		NSMantissa1+1,x
.9b6a		95 60		sta $60,x			sta 	NSMantissa1,x
.9b6c		b5 68		lda $68,x			lda		NSMantissa2,x
.9b6e		35 69		and $69,x			and 		NSMantissa2+1,x
.9b70		95 68		sta $68,x			sta 	NSMantissa2,x
.9b72		b5 70		lda $70,x			lda		NSMantissa3,x
.9b74		35 71		and $71,x			and 		NSMantissa3+1,x
.9b76		95 70		sta $70,x			sta 	NSMantissa3,x
.9b78		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b7a		60		rts				rts
.9b7b						OraInteger:
.9b7b		fa		plx				plx
.9b7c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b7e		15 51		ora $51,x			ora 	NSStatus+1,x
.9b80		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b81		0a		asl a				asl 	a
.9b82		10 05		bpl $9b89			bpl 	_NotRef
.9b84		48		pha				pha
.9b85		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b88		68		pla				pla
.9b89						_NotRef:
.9b89		0a		asl a				asl 	a
.9b8a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b8c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b8e		15 79		ora $79,x			ora 	NSExponent+1,x
.9b90		f0 03		beq $9b95			beq 	_IntegerCode 				; if clear, then we have two integers
.9b92		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; anything else, type mismatch.
.9b95						_IntegerCode:
.9b95		b5 58		lda $58,x			lda		NSMantissa0,x
.9b97		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9b99		95 58		sta $58,x			sta 	NSMantissa0,x
.9b9b		b5 60		lda $60,x			lda		NSMantissa1,x
.9b9d		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9b9f		95 60		sta $60,x			sta 	NSMantissa1,x
.9ba1		b5 68		lda $68,x			lda		NSMantissa2,x
.9ba3		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9ba5		95 68		sta $68,x			sta 	NSMantissa2,x
.9ba7		b5 70		lda $70,x			lda		NSMantissa3,x
.9ba9		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9bab		95 70		sta $70,x			sta 	NSMantissa3,x
.9bad		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9baf		60		rts				rts
.9bb0						EorInteger:
.9bb0		fa		plx				plx
.9bb1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bb3		15 51		ora $51,x			ora 	NSStatus+1,x
.9bb5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bb6		0a		asl a				asl 	a
.9bb7		10 05		bpl $9bbe			bpl 	_NotRef
.9bb9		48		pha				pha
.9bba		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bbd		68		pla				pla
.9bbe						_NotRef:
.9bbe		0a		asl a				asl 	a
.9bbf		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bc1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bc3		15 79		ora $79,x			ora 	NSExponent+1,x
.9bc5		f0 03		beq $9bca			beq 	_IntegerCode 				; if clear, then we have two integers
.9bc7		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; anything else, type mismatch.
.9bca						_IntegerCode:
.9bca		b5 58		lda $58,x			lda		NSMantissa0,x
.9bcc		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9bce		95 58		sta $58,x			sta 	NSMantissa0,x
.9bd0		b5 60		lda $60,x			lda		NSMantissa1,x
.9bd2		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9bd4		95 60		sta $60,x			sta 	NSMantissa1,x
.9bd6		b5 68		lda $68,x			lda		NSMantissa2,x
.9bd8		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9bda		95 68		sta $68,x			sta 	NSMantissa2,x
.9bdc		b5 70		lda $70,x			lda		NSMantissa3,x
.9bde		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9be0		95 70		sta $70,x			sta 	NSMantissa3,x
.9be2		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9be4		60		rts				rts
.9be5						WordIndirect:
.9be5		fa		plx				plx
.9be6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9be8		15 51		ora $51,x			ora 	NSStatus+1,x
.9bea		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9beb		0a		asl a				asl 	a
.9bec		10 05		bpl $9bf3			bpl 	_NotRef
.9bee		48		pha				pha
.9bef		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bf2		68		pla				pla
.9bf3						_NotRef:
.9bf3		0a		asl a				asl 	a
.9bf4		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bf6		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bf8		15 79		ora $79,x			ora 	NSExponent+1,x
.9bfa		f0 03		beq $9bff			beq 	_IntegerCode 				; if clear, then we have two integers
.9bfc		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; anything else, type mismatch.
.9bff						_IntegerCode:
.9bff		20 05 9b	jsr $9b05			jsr 	AddCode 					; add the two values
.9c02		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c04		95 50		sta $50,x			sta 	NSStatus,x
.9c06		60		rts				rts
.9c07						ByteIndirect:
.9c07		fa		plx				plx
.9c08		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c0a		15 51		ora $51,x			ora 	NSStatus+1,x
.9c0c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c0d		0a		asl a				asl 	a
.9c0e		10 05		bpl $9c15			bpl 	_NotRef
.9c10		48		pha				pha
.9c11		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c14		68		pla				pla
.9c15						_NotRef:
.9c15		0a		asl a				asl 	a
.9c16		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c18		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c1a		15 79		ora $79,x			ora 	NSExponent+1,x
.9c1c		f0 03		beq $9c21			beq 	_IntegerCode 				; if clear, then we have two integers
.9c1e		4c c3 a9	jmp $a9c3			jmp 	TypeError 					; anything else, type mismatch.
.9c21						_IntegerCode:
.9c21		20 05 9b	jsr $9b05			jsr 	AddCode 					; add the two values
.9c24		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9c26		95 50		sta $50,x			sta 	NSStatus,x
.9c28		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9c29						ConvertInt16:
.9c29		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9c2b		86 60		stx $60				stx 	NSMantissa1
.9c2d		64 68		stz $68				stz 	NSMantissa2
.9c2f		64 70		stz $70				stz 	NSMantissa3
.9c31		64 50		stz $50				stz 	NSStatus 					; positive integer
.9c33		a2 00		ldx #$00			ldx 	#0 							; stack level
.9c35		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9c37		80 00		bra $9c39			bra 	ConvertInt32
.9c39						ConvertInt32:
.9c39		5a		phy				phy
.9c3a		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9c3c		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9c3e		10 08		bpl $9c48			bpl 	_CI32NotNeg
.9c40		48		pha				pha
.9c41		a9 2d		lda #$2d			lda 	#'-'
.9c43		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c46		c8		iny				iny
.9c47		68		pla				pla
.9c48						_CI32NotNeg:
.9c48		20 56 9c	jsr $9c56			jsr 	_CI32DivideConvert 			; recursive conversion
.9c4b		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9c4d		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c50		7a		ply				ply
.9c51		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9c53		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9c55		60		rts				rts
.9c56						_CI32DivideConvert:
.9c56		e8		inx				inx 								; write to next slot up
.9c57		20 16 a7	jsr $a716			jsr 	NSMSetByte 		 			; write the base out.
.9c5a		ca		dex				dex
.9c5b		20 84 99	jsr $9984			jsr 	Int32Divide 				; divide
.9c5e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9c60		48		pha				pha
.9c61		20 41 99	jsr $9941			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9c64		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; is it zero ?
.9c67		f0 05		beq $9c6e			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9c69		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9c6b		20 56 9c	jsr $9c56			jsr 	_CI32DivideConvert 			; and recusrively call.
.9c6e						_CI32NoRecurse:
.9c6e		68		pla				pla 								; remainder
.9c6f		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9c71		90 02		bcc $9c75			bcc 	_CI32NotHex
.9c73		69 26		adc #$26			adc 	#6+32
.9c75						_CI32NotHex:
.9c75		69 30		adc #$30			adc 	#48
.9c77		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9c7a		c8		iny				iny
.9c7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9c7c						PrecedenceLevel:
>9c7c		04					.byte	 4	; $00 <<
>9c7d		02					.byte	 2	; $01 <=
>9c7e		02					.byte	 2	; $02 <>
>9c7f		00					.byte	 0	; $03 !!3
>9c80		00					.byte	 0	; $04 ><
>9c81		02					.byte	 2	; $05 >=
>9c82		04					.byte	 4	; $06 >>
>9c83		00					.byte	 0	; $07 !!7
>9c84		00					.byte	 0	; $08 !!8
>9c85		00					.byte	 0	; $09 !!9
>9c86		00					.byte	 0	; $0a !!10
>9c87		00					.byte	 0	; $0b !!11
>9c88		00					.byte	 0	; $0c !!12
>9c89		00					.byte	 0	; $0d !!13
>9c8a		00					.byte	 0	; $0e !!14
>9c8b		00					.byte	 0	; $0f !!15
>9c8c		00					.byte	 0	; $10 @
>9c8d		00					.byte	 0	; $11 !!17
>9c8e		00					.byte	 0	; $12 !!18
>9c8f		00					.byte	 0	; $13 [
>9c90		04					.byte	 4	; $14 \
>9c91		00					.byte	 0	; $15 ]
>9c92		01					.byte	 1	; $16 ^
>9c93		00					.byte	 0	; $17 _
>9c94		00					.byte	 0	; $18 `
>9c95		00					.byte	 0	; $19 !!25
>9c96		00					.byte	 0	; $1a !!26
>9c97		00					.byte	 0	; $1b {
>9c98		01					.byte	 1	; $1c |
>9c99		00					.byte	 0	; $1d }
>9c9a		00					.byte	 0	; $1e ~
>9c9b		00					.byte	 0	; $1f <7F>
>9c9c		00					.byte	 0	; $20
>9c9d		05					.byte	 5	; $21 !
>9c9e		00					.byte	 0	; $22 "
>9c9f		00					.byte	 0	; $23 #
>9ca0		05					.byte	 5	; $24 $
>9ca1		04					.byte	 4	; $25 %
>9ca2		01					.byte	 1	; $26 &
>9ca3		00					.byte	 0	; $27 '
>9ca4		00					.byte	 0	; $28 (
>9ca5		00					.byte	 0	; $29 )
>9ca6		04					.byte	 4	; $2a *
>9ca7		03					.byte	 3	; $2b +
>9ca8		00					.byte	 0	; $2c ,
>9ca9		03					.byte	 3	; $2d -
>9caa		00					.byte	 0	; $2e .
>9cab		04					.byte	 4	; $2f /
>9cac		00					.byte	 0	; $30 0
>9cad		00					.byte	 0	; $31 1
>9cae		00					.byte	 0	; $32 2
>9caf		00					.byte	 0	; $33 3
>9cb0		00					.byte	 0	; $34 4
>9cb1		00					.byte	 0	; $35 5
>9cb2		00					.byte	 0	; $36 6
>9cb3		00					.byte	 0	; $37 7
>9cb4		00					.byte	 0	; $38 8
>9cb5		00					.byte	 0	; $39 9
>9cb6		00					.byte	 0	; $3a :
>9cb7		00					.byte	 0	; $3b ;
>9cb8		02					.byte	 2	; $3c <
>9cb9		02					.byte	 2	; $3d =
>9cba		02					.byte	 2	; $3e >
>9cbb		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9cbc						EvaluateExpressionAt0:
.9cbc		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9cbe						EvaluateExpression:
.9cbe		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9cc0						EvaluateExpressionAtPrecedence:
.9cc0		48		pha				pha 								; save precedence level
.9cc1		20 08 a1	jsr $a108			jsr 	EvaluateTerm 				; evaluate term into level X.
.9cc4		68		pla				pla 								; restore precedence level.
.9cc5						_EXPRLoop:
.9cc5		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9cc7		b1 30		lda ($30),y			lda 	(codePtr),y
.9cc9		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ccb		b0 25		bcs $9cf2			bcs 	_EXPRExit
.9ccd		da		phx				phx 								; read the operator precedence
.9cce		aa		tax				tax
.9ccf		bd 7c 9c	lda $9c7c,x			lda 	PrecedenceLevel,x
.9cd2		fa		plx				plx
.9cd3		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9cd5		f0 1b		beq $9cf2			beq 	_EXPRExit
.9cd7		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9cd9		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9cdb		c5 37		cmp $37				cmp 	zTemp0+1
.9cdd		b0 13		bcs $9cf2			bcs		_EXPRExit 					; if current >= operator exit
.9cdf		48		pha				pha 								; save current precedence.
.9ce0		b1 30		lda ($30),y			lda 	(codePtr),y
.9ce2		c8		iny				iny
.9ce3		48		pha				pha
.9ce4		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9ce6		e8		inx				inx 								; work out the right hand side.
.9ce7		20 c0 9c	jsr $9cc0			jsr 	EvaluateExpressionAtPrecedence
.9cea		ca		dex				dex
.9ceb		68		pla				pla 								; get operator, call the code.
.9cec		20 f5 9c	jsr $9cf5			jsr 	_EXPRCaller
.9cef		68		pla				pla 								; restore precedence level
.9cf0		80 d3		bra $9cc5			bra 	_EXPRLoop 					; and go round.
.9cf2						_EXPRExit:
.9cf2		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9cf4		60		rts				rts
.9cf5						_EXPRCaller:
.9cf5		da		phx				phx 								; save on stack, first thing is to restore it
.9cf6		0a		asl a				asl 	a 							; double so can use vectors into X
.9cf7		aa		tax				tax
.9cf8		7c 0a 94	jmp ($940a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9cfb						FloatingPointAdd:
.9cfb		20 71 9e	jsr $9e71			jsr 	FloatPrepare 				; prepare for floats
.9cfe		80 09		bra $9d09			bra 	FloatAdd
.9d00						FloatingPointSub:
.9d00		20 71 9e	jsr $9e71			jsr 	FloatPrepare 				; prepare for floats
.9d03						FloatSubtract:
.9d03		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9d05		49 80		eor #$80			eor 	#$80
.9d07		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9d09						FloatAdd:
.9d09		48		pha				pha
.9d0a		5a		phy				phy
.9d0b		20 80 9e	jsr $9e80			jsr 	NSNormalise 				; normalise S[X]
.9d0e		f0 51		beq $9d61			beq 	_FAReturn1
.9d10		e8		inx				inx 								; normalise S[X+1]
.9d11		20 80 9e	jsr $9e80			jsr 	NSNormalise
.9d14		ca		dex				dex
.9d15		c9 00		cmp #$00			cmp 	#0
.9d17		f0 60		beq $9d79			beq 	_FAExit 					; if so, just return A
.9d19		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9d1b		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9d1d		f0 18		beq $9d37			beq 	_FAExponentsEqual
.9d1f		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9d21		a8		tay				tay
.9d22		38		sec				sec 								; do a signed comparison of the exponents.
.9d23		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d25		50 02		bvc $9d29			bvc 	_FANoSignedChange
.9d27		49 80		eor #$80			eor 	#$80
.9d29						_FANoSignedChange:
.9d29		29 80		and #$80			and 	#$80
.9d2b		10 02		bpl $9d2f			bpl 	_FAHaveMax
.9d2d		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9d2f						_FAHaveMax:
.9d2f		20 7c 9d	jsr $9d7c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9d32		e8		inx				inx
.9d33		20 7c 9d	jsr $9d7c			jsr 	_FAShiftToExponent
.9d36		ca		dex				dex
.9d37						_FAExponentsEqual:
.9d37		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9d39		55 51		eor $51,x			eor 	NSStatus+1,x
.9d3b		30 0e		bmi $9d4b			bmi 	_FADifferentSigns
.9d3d		20 b4 9a	jsr $9ab4			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9d40		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9d42		10 35		bpl $9d79			bpl 	_FAExit 					; if no, we are done.
.9d44		20 2d a7	jsr $a72d			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9d47		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9d49		80 2e		bra $9d79			bra 	_FAExit
.9d4b						_FADifferentSigns:
.9d4b		20 ce 9a	jsr $9ace			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9d4e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9d50		10 06		bpl $9d58			bpl 	_FACheckZero 				; if no, check for -0
.9d52		20 d6 a6	jsr $a6d6			jsr 	NSMNegate 					; netate result
.9d55		20 dd a6	jsr $a6dd			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9d58						_FACheckZero:
.9d58		20 36 a7	jsr $a736			jsr 	NSMIsZero	 				; check for -0
.9d5b		d0 1c		bne $9d79			bne 	_FAExit
.9d5d		74 50		stz $50,x			stz 	NSStatus,x
.9d5f		80 18		bra $9d79			bra 	_FAExit
.9d61						_FAReturn1:
.9d61		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9d63		95 58		sta $58,x			sta 	NSMantissa0,x
.9d65		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d67		95 60		sta $60,x			sta 	NSMantissa1,x
.9d69		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d6b		95 68		sta $68,x			sta 	NSMantissa2,x
.9d6d		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d6f		95 70		sta $70,x			sta 	NSMantissa3,x
.9d71		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d73		95 78		sta $78,x			sta 	NSExponent,x
.9d75		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d77		95 50		sta $50,x			sta 	NSStatus,x
.9d79						_FAExit:
.9d79		7a		ply				ply
.9d7a		68		pla				pla
.9d7b		60		rts				rts
.9d7c						_FAShiftToExponent:
.9d7c						_FAShiftToExponent2:
.9d7c		98		tya				tya 								; compare Y to exponent
.9d7d		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9d7f		f0 07		beq $9d88			beq 	_FASEExit 					; exit if so.
.9d81		20 2d a7	jsr $a72d			jsr 	NSMShiftRight	 			; shift the mantissa right
.9d84		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9d86		80 f4		bra $9d7c			bra 	_FAShiftToExponent2
.9d88						_FASEExit:
.9d88		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9d89						CompareFloat:
.9d89		20 03 9d	jsr $9d03			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9d8c		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9d8e		29 f8		and #$f8			and 	#$F8
.9d90		15 68		ora $68,x			ora 	NSMantissa2,x
.9d92		15 70		ora $70,x			ora 	NSMantissa3,x
.9d94		f0 08		beq $9d9e			beq 	_FCExit 					; zero, so approximately identical
.9d96		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9d98		34 50		bit $50,x			bit 	NSStatus,x
.9d9a		10 02		bpl $9d9e			bpl 	_FCExit
.9d9c						_FCNegative:
.9d9c		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9d9e						_FCExit:
.9d9e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9d9f						FDivideCommand:
.9d9f		fa		plx				plx	 								; restore stack position
.9da0		20 71 9e	jsr $9e71			jsr 	FloatPrepare 				; prepare for floats
.9da3						FloatDivide:
.9da3		48		pha				pha
.9da4		e8		inx				inx
.9da5		20 80 9e	jsr $9e80			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9da8		ca		dex				dex
.9da9		c9 00		cmp #$00			cmp 	#0
.9dab		f0 1d		beq $9dca			beq 	_FDZero
.9dad		20 80 9e	jsr $9e80			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9db0		f0 16		beq $9dc8			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9db2		20 a5 99	jsr $99a5			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9db5		20 41 99	jsr $9941			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9db8		20 80 9e	jsr $9e80			jsr		NSNormalise 				; renormalise
.9dbb		20 35 9a	jsr $9a35			jsr 	CalculateSign 				; calculate result sign
.9dbe		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9dc0		38		sec				sec
.9dc1		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9dc3		38		sec				sec
.9dc4		e9 1e		sbc #$1e			sbc 	#30
.9dc6		95 78		sta $78,x			sta 	NSExponent,x
.9dc8						_FDExit:
.9dc8		68		pla				pla
.9dc9		60		rts				rts
.9dca						_FDZero:
.9dca		a9 03		lda #$03		lda	#3
.9dcc		4c ba 97	jmp $97ba		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9dcf						FloatFractionalPart:
.9dcf		5a		phy				phy
.9dd0		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9dd2		29 7f		and #$7f			and 	#$7F
.9dd4		95 50		sta $50,x			sta 	NSStatus,x
.9dd6		20 80 9e	jsr $9e80			jsr 	NSNormalise
.9dd9		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9ddb		38		sec				sec
.9ddc		e9 e0		sbc #$e0			sbc 	#$E0
.9dde		90 29		bcc $9e09			bcc 	_FFPExit 					; already fractional
.9de0		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9de2		b0 22		bcs $9e06			bcs 	_FFPZero
.9de4		a8		tay				tay 								; put count to do in Y
.9de5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9de7		20 0b 9e	jsr $9e0b			jsr 	_FFPPartial
.9dea		95 70		sta $70,x			sta 	NSMantissa3,x
.9dec		b5 68		lda $68,x			lda 	NSMantissa2,x
.9dee		20 0b 9e	jsr $9e0b			jsr 	_FFPPartial
.9df1		95 68		sta $68,x			sta 	NSMantissa2,x
.9df3		b5 60		lda $60,x			lda 	NSMantissa1,x
.9df5		20 0b 9e	jsr $9e0b			jsr 	_FFPPartial
.9df8		95 60		sta $60,x			sta 	NSMantissa1,x
.9dfa		b5 58		lda $58,x			lda 	NSMantissa0,x
.9dfc		20 0b 9e	jsr $9e0b			jsr 	_FFPPartial
.9dff		95 58		sta $58,x			sta 	NSMantissa0,x
.9e01		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; zeroed check.
.9e04		d0 03		bne $9e09			bne 	_FFPExit
.9e06						_FFPZero:
.9e06		20 14 a7	jsr $a714			jsr 	NSMSetZero
.9e09						_FFPExit:
.9e09		7a		ply				ply
.9e0a		60		rts				rts
.9e0b						_FFPPartial:
.9e0b		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9e0d		f0 17		beq $9e26			beq 	_FFFPPExit
.9e0f		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9e11		b0 0c		bcs $9e1f			bcs 	_FFFPPWholeByte
.9e13		5a		phy				phy
.9e14						_FFFPPLeft:
.9e14		0a		asl a				asl 	a
.9e15		88		dey				dey
.9e16		d0 fc		bne $9e14			bne 	_FFFPPLeft
.9e18		7a		ply				ply
.9e19						_FFFPPRight:
.9e19		4a		lsr a				lsr 	a
.9e1a		88		dey				dey
.9e1b		d0 fc		bne $9e19			bne 	_FFFPPRight
.9e1d		80 07		bra $9e26			bra 	_FFFPPExit
.9e1f						_FFFPPWholeByte:
.9e1f		98		tya				tya 								; subtract 8 from count
.9e20		38		sec				sec
.9e21		e9 08		sbc #$08			sbc 	#8
.9e23		a8		tay				tay
.9e24		a9 00		lda #$00			lda 	#0 							; and clear all
.9e26						_FFFPPExit:
.9e26		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9e27						FloatIntegerPart:
.9e27		48		pha				pha
.9e28		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9e2a		f0 1d		beq $9e49			beq 	_FIPExit 					; if so do nothing
.9e2c		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; is it zero ?
.9e2f		f0 15		beq $9e46			beq 	_FIPZero 					; if so return zero.
.9e31		20 80 9e	jsr $9e80			jsr 	NSNormalise 				; normalise
.9e34		f0 10		beq $9e46			beq 	_FIPZero 					; normalised to zero, exit zero
.9e36						_FIPShift:
.9e36		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9e38		10 07		bpl $9e41			bpl 	_FIPCheckZero
.9e3a		20 2d a7	jsr $a72d			jsr 	NSMShiftRight 				; shift mantissa right
.9e3d		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9e3f		80 f5		bra $9e36			bra 	_FIPShift
.9e41						_FIPCheckZero:
.9e41		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; avoid -0 problem
.9e44		d0 03		bne $9e49			bne 	_FIPExit 					; set to zero if mantissa zero.
.9e46						_FIPZero:
.9e46		20 14 a7	jsr $a714			jsr 	NSMSetZero
.9e49						_FIPExit:
.9e49		68		pla				pla
.9e4a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9e4b						FloatingPointMultiply:
.9e4b		20 71 9e	jsr $9e71			jsr 	FloatPrepare 				; prepare for floats
.9e4e						FloatMultiply:
.9e4e		48		pha				pha
.9e4f		20 80 9e	jsr $9e80			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9e52		f0 18		beq $9e6c			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9e54		e8		inx				inx
.9e55		20 80 9e	jsr $9e80			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9e58		ca		dex				dex
.9e59		c9 00		cmp #$00			cmp 	#0
.9e5b		f0 0c		beq $9e69			beq 	_FDSetZero
.9e5d		20 f7 99	jsr $99f7			jsr 	MultiplyShort 				; calculate the result.
.9e60		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9e62		18		clc				clc
.9e63		75 79		adc $79,x			adc 	NSExponent+1,x
.9e65		95 78		sta $78,x			sta 	NSExponent,x
.9e67		80 03		bra $9e6c			bra 	_FDExit
.9e69						_FDSetZero:
.9e69		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; return 0
.9e6c						_FDExit:
.9e6c		20 80 9e	jsr $9e80			jsr 	NSNormalise 				; normalise the result
.9e6f		68		pla				pla
.9e70		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9e71						FloatPrepare:
.9e71		20 7c 9f	jsr $9f7c			jsr 	DereferenceTopTwo 			; dereference the top two values
.9e74		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9e76		15 51		ora $51,x			ora 	NSStatus+1,x
.9e78		29 10		and #$10			and 	#NSBIsString
.9e7a		d0 01		bne $9e7d			bne 	_FDType
.9e7c		60		rts				rts
.9e7d						_FDType:
.9e7d		4c c3 a9	jmp $a9c3			jmp 	TypeError
.9e80						NSNormalise:
.9e80		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9e82		29 80		and #$80			and 	#$80
.9e84		09 08		ora #$08			ora 	#NSTFloat
.9e86		95 50		sta $50,x			sta 	NSStatus,x
.9e88		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; if zero exit
.9e8b		d0 07		bne $9e94			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9e8d		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9e8f		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9e91		a9 00		lda #$00			lda 	#0 							; set Z flag
.9e93		60		rts				rts
.9e94						_NSNormaliseOptimise:
.9e94		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9e96		d0 19		bne $9eb1			bne 	_NSNormaliseLoop
.9e98		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9e9a		30 15		bmi $9eb1			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9e9c		95 70		sta $70,x			sta 	NSMantissa3,x
.9e9e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ea0		95 68		sta $68,x			sta 	NSMantissa2,x
.9ea2		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ea4		95 60		sta $60,x			sta 	NSMantissa1,x
.9ea6		74 58		stz $58,x			stz 	NSMantissa0,x
.9ea8		b5 78		lda $78,x			lda 	NSExponent,x
.9eaa		38		sec				sec
.9eab		e9 08		sbc #$08			sbc 	#8
.9ead		95 78		sta $78,x			sta 	NSExponent,x
.9eaf		80 e3		bra $9e94			bra 	_NSNormaliseOptimise
.9eb1						_NSNormaliseLoop:
.9eb1		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9eb3		70 07		bvs $9ebc			bvs 	_NSNExit 					; exit if so with Z flag clear
.9eb5		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; shift mantissa left
.9eb8		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9eba		80 f5		bra $9eb1			bra 	_NSNormaliseLoop
.9ebc						_NSNExit:
.9ebc		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9ebe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ebf						AssignNumber:
.9ebf		5a		phy				phy
.9ec0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9ec2		85 36		sta $36				sta 	zTemp0
.9ec4		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ec6		85 37		sta $37				sta 	zTemp0+1
.9ec8		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9eca		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ecc		95 50		sta $50,x			sta 	NSStatus,x
.9ece		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ed0		c9 08		cmp #$08			cmp 	#NSTFloat
.9ed2		f0 24		beq $9ef8			beq 	_ANFloat
.9ed4		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9ed6		f0 03		beq $9edb			beq		_ANNotFloat
.9ed8		4c be a9	jmp $a9be			jmp 	RangeError					; if it is, report an error.
.9edb						_ANNotFloat:
.9edb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9edd		29 03		and #$03			and 	#3
.9edf		d0 05		bne $9ee6			bne 	_ANByteWord
.9ee1		20 03 9f	jsr $9f03			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ee4		80 1b		bra $9f01			bra 	_ANExit
.9ee6						_ANByteWord:
.9ee6		48		pha				pha 								; save count
.9ee7		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9ee9		92 36		sta ($36)			sta 	(zTemp0)
.9eeb		68		pla				pla
.9eec		c9 01		cmp #$01			cmp	 	#1
.9eee		f0 11		beq $9f01			beq 	_ANExit
.9ef0		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ef2		a0 01		ldy #$01			ldy 	#1
.9ef4		91 36		sta ($36),y			sta 	(zTemp0),y
.9ef6		80 09		bra $9f01			bra 	_ANExit
.9ef8						_ANFloat:
.9ef8		20 03 9f	jsr $9f03			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9efb		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9efd		a0 04		ldy #$04			ldy 	#4
.9eff		91 36		sta ($36),y			sta 	(zTemp0),y
.9f01						_ANExit:
.9f01		7a		ply				ply
.9f02		60		rts				rts
.9f03						_ANCopy4PackSign:
.9f03		a0 03		ldy #$03			ldy 	#3
.9f05		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9f07		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f09		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9f0b		91 36		sta ($36),y			sta 	(zTemp0),y
.9f0d		88		dey				dey
.9f0e		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f10		91 36		sta ($36),y			sta 	(zTemp0),y
.9f12		88		dey				dey
.9f13		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f15		91 36		sta ($36),y			sta 	(zTemp0),y
.9f17		88		dey				dey
.9f18		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f1a		91 36		sta ($36),y			sta 	(zTemp0),y
.9f1c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f1d						AssignString:
.9f1d		5a		phy				phy
.9f1e		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f20		85 38		sta $38				sta 	zTemp1
.9f22		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f24		85 39		sta $39				sta 	zTemp1+1
.9f26		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f28		85 36		sta $36				sta 	zTemp0
.9f2a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f2c		85 37		sta $37				sta 	zTemp0+1
.9f2e		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f30		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f32		f0 23		beq $9f57			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f34		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f35		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f37		e9 02		sbc #$02			sbc 	#2
.9f39		85 3c		sta $3c				sta 	zsTemp
.9f3b		a0 01		ldy #$01			ldy 	#1
.9f3d		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f3f		e9 00		sbc #$00			sbc 	#0
.9f41		85 3d		sta $3d				sta 	zsTemp+1
.9f43		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9f45						_ASGetLength:
.9f45		c8		iny				iny
.9f46		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f48		d0 fb		bne $9f45			bne 	_ASGetLength
.9f4a		98		tya				tya 								; is this length <= current length
.9f4b		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9f4d		90 1e		bcc $9f6d			bcc 	_ASCopyString
.9f4f		f0 1c		beq $9f6d			beq 	_ASCopyString
.9f51		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9f53		a0 01		ldy #$01			ldy 	#1
.9f55		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f57						_ASNewStringRequired:
.9f57		e8		inx				inx 								; concrete the new string.
.9f58		20 a6 b0	jsr $b0a6			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9f5b		ca		dex				dex
.9f5c		18		clc				clc
.9f5d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9f5f		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9f61		92 36		sta ($36)			sta 	(zTemp0)
.9f63		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f65		69 00		adc #$00			adc 	#0
.9f67		a0 01		ldy #$01			ldy 	#1
.9f69		91 36		sta ($36),y			sta 	(zTemp0),y
.9f6b		80 0d		bra $9f7a			bra 	_ASExit
.9f6d						_ASCopyString:
.9f6d		a0 00		ldy #$00			ldy 	#0
.9f6f						_ASCopyLoop:
.9f6f		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f71		c8		iny				iny
.9f72		c8		iny				iny
.9f73		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f75		88		dey				dey
.9f76		c9 00		cmp #$00			cmp 	#0
.9f78		d0 f5		bne $9f6f			bne 	_ASCopyLoop
.9f7a						_ASExit:
.9f7a		7a		ply				ply
.9f7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9f7c						DereferenceTopTwo:
.9f7c		e8		inx				inx
.9f7d		20 81 9f	jsr $9f81			jsr 	Dereference 				; deref x+1
.9f80		ca		dex				dex  								; falls through to deref x
.9f81						Dereference:
.9f81		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9f83		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9f85		f0 48		beq $9fcf			beq 	_DRFExit 					; not a reference, so exit.
.9f87		5a		phy				phy
.9f88		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9f8a		85 36		sta $36				sta 	zTemp0
.9f8c		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f8e		85 37		sta $37				sta 	zTemp0+1
.9f90		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9f92		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9f94		95 58		sta $58,x			sta 	NSMantissa0,x
.9f96		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9f98		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9f9a		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9f9c		f0 0e		beq $9fac			beq 	_DRFDereferenceTwo
.9f9e		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9fa0		f0 2f		beq $9fd1			beq 	_DRFFull
.9fa2		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9fa4		29 03		and #$03			and 	#3
.9fa6		f0 29		beq $9fd1			beq 	_DRFFull 					; the whole word
.9fa8		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9faa		f0 06		beq $9fb2			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9fac						_DRFDereferenceTwo:
.9fac		a0 01		ldy #$01			ldy 	#1
.9fae		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fb0		95 60		sta $60,x			sta 	NSMantissa1,x
.9fb2						_DRFClear23:
.9fb2		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9fb4		74 70		stz $70,x			stz 	NSMantissa3,x
.9fb6		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9fb8		29 18		and #$18			and 	#NSBTypeMask
.9fba		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9fbc		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9fbe		d0 0e		bne $9fce			bne 	_DRFNotString
.9fc0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9fc2		15 60		ora $60,x			ora 	NSMantissa1,x
.9fc4		d0 08		bne $9fce			bne 	_DRFNotString
.9fc6		a9 d0		lda #$d0			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9fc8		95 58		sta $58,x			sta 	NSMantissa0,x
.9fca		a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9fcc		95 60		sta $60,x			sta 	NSMantissa1,x
.9fce						_DRFNotString
.9fce		7a		ply				ply 								; restore Y and exit
.9fcf						_DRFExit:
.9fcf		60		rts				rts
.9fd0						_DRFNullString:
>9fd0		00						.byte 	0
.9fd1						_DRFFull:
.9fd1		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9fd3		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fd5		95 60		sta $60,x			sta 	NSMantissa1,x
.9fd7		c8		iny				iny
.9fd8		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fda		95 68		sta $68,x			sta 	NSMantissa2,x
.9fdc		c8		iny				iny
.9fdd		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fdf		95 70		sta $70,x			sta 	NSMantissa3,x
.9fe1		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9fe3		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9fe5		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9fe7		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9fe9		f0 05		beq $9ff0			beq 	_DRFNoExponent
.9feb		c8		iny				iny 								; if not, read the exponent as well.
.9fec		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fee		95 78		sta $78,x			sta 	NSExponent,x
.9ff0						_DRFNoExponent:
.9ff0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9ff2		10 0a		bpl $9ffe			bpl 	_DRFExit2 					; if not, then exit.
.9ff4		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ff6		95 70		sta $70,x			sta 	NSMantissa3,x
.9ff8		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9ffa		09 80		ora #$80			ora 	#NSBIsNegative
.9ffc		95 50		sta $50,x			sta 	NSStatus,x
.9ffe						_DRFExit2:
.9ffe		7a		ply				ply
.9fff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.a000						EncodeNumberStart:
.a000		38		sec				sec
.a001		80 01		bra $a004			bra 	EncodeNumberContinue+1
.a003						EncodeNumberContinue:
.a003		18		clc				clc
.a004						EncodeNumber:
.a004		08		php				php 								; save reset flag.
.a005		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a007		f0 12		beq $a01b			beq 	_ENIsOkay
.a009		c9 30		cmp #$30			cmp 	#"0"
.a00b		90 04		bcc $a011			bcc 	_ENBadNumber
.a00d		c9 3a		cmp #$3a			cmp 	#"9"+1
.a00f		90 0a		bcc $a01b			bcc 	_ENIsOkay
.a011						_ENBadNumber:
.a011		28		plp				plp 								; throw saved reset
.a012		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.a015		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a017		f0 7b		beq $a094			beq 	_ENConstructFinal
.a019						_ENFail:
.a019		18		clc				clc 								; not allowed
.a01a		60		rts				rts
.a01b						_ENIsOkay:
.a01b		28		plp				plp 								; are we restarting
.a01c		90 15		bcc $a033			bcc 	_ENNoRestart
.a01e						_ENStartEncode:
.a01e		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.a020		f0 0c		beq $a02e			beq 	_ENFirstDP
.a022		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.a024		20 16 a7	jsr $a716			jsr 	NSMSetByte 					; in single byte mode.
.a027		a9 01		lda #$01			lda 	#ESTA_Low
.a029						_ENExitChange:
.a029		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.a02c		38		sec				sec
.a02d		60		rts				rts
.a02e						_ENFirstDP:
.a02e		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; clear integer part
.a031		80 3c		bra $a06f			bra 	_ESTASwitchFloat			; go straight to float and exi
.a033						_ENNoRestart:
.a033		48		pha				pha 								; save digit or DP on stack.
.a034		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.a037		c9 01		cmp #$01			cmp 	#ESTA_Low
.a039		f0 09		beq $a044			beq  	_ESTALowState
.a03b		c9 02		cmp #$02			cmp 	#ESTA_High
.a03d		f0 26		beq $a065			beq 	_ESTAHighState
.a03f		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a041		f0 38		beq $a07b			beq 	_ESTADecimalState
>a043		db						.byte 	$DB 						; causes a break in the emulator
.a044						_ESTALowState:
.a044		68		pla				pla 								; get value back
.a045		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a047		f0 26		beq $a06f			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a049		29 0f		and #$0f			and 	#15 						; make digit
.a04b		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.a04e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a050		0a		asl a				asl 	a
.a051		0a		asl a				asl 	a
.a052		75 58		adc $58,x			adc 	NSMantissa0,x
.a054		0a		asl a				asl 	a
.a055		6d 06 04	adc $0406			adc 	digitTemp
.a058		95 58		sta $58,x			sta 	NSMantissa0,x
.a05a		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a05c		90 05		bcc $a063			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a05e		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a060		8d 05 04	sta $0405			sta 	encodeState
.a063						_ESTANoSwitch:
.a063		38		sec				sec
.a064		60		rts				rts
.a065						_ESTAHighState:
.a065		68		pla				pla 								; get value back
.a066		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a068		f0 05		beq $a06f			beq 	_ESTASwitchFloat
.a06a		20 c8 a0	jsr $a0c8			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a06d		38		sec				sec
.a06e		60		rts				rts
.a06f						_ESTASwitchFloat:
.a06f		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a072		e8		inx				inx 								; zero the decimal additive.
.a073		20 14 a7	jsr $a714			jsr 	NSMSetZero
.a076		ca		dex				dex
.a077		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a079		80 ae		bra $a029			bra 	_ENExitChange
.a07b						_ESTADecimalState:
.a07b		68		pla				pla 								; digit.
.a07c		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a07e		f0 99		beq $a019			beq 	_ENFail
.a080		e8		inx				inx 								; put digit into fractional part of X+1
.a081		20 c8 a0	jsr $a0c8			jsr 	ESTAShiftDigitIntoMantissa
.a084		ca		dex				dex
.a085		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a088		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a08b		c9 0b		cmp #$0b			cmp 	#11
.a08d		f0 02		beq $a091			beq 	_ESTADSFail
.a08f		38		sec				sec
.a090		60		rts				rts
.a091						_ESTADSFail:
.a091		4c be a9	jmp $a9be			jmp 	RangeError
.a094						_ENConstructFinal:
.a094		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a097		f0 2d		beq $a0c6			beq 	_ENCFExit 					; no decimals
.a099		5a		phy				phy
.a09a		0a		asl a				asl 	a 							; x 4 and CLC
.a09b		0a		asl a				asl 	a
.a09c		6d 07 04	adc $0407			adc 	decimalCount
.a09f		a8		tay				tay
.a0a0		b9 7d a9	lda $a97d,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a0a3		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a0a5		b9 7e a9	lda $a97e,y			lda 	DecimalScalarTable-5+1,y
.a0a8		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a0aa		b9 7f a9	lda $a97f,y			lda 	DecimalScalarTable-5+2,y
.a0ad		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a0af		b9 80 a9	lda $a980,y			lda 	DecimalScalarTable-5+3,y
.a0b2		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a0b4		b9 81 a9	lda $a981,y			lda 	DecimalScalarTable-5+4,y
.a0b7		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a0b9		a9 08		lda #$08			lda 	#NSTFloat
.a0bb		95 52		sta $52,x			sta 	NSStatus+2,x
.a0bd		7a		ply				ply
.a0be		e8		inx				inx 								; multiply decimal const by decimal scalar
.a0bf		20 4e 9e	jsr $9e4e			jsr 	FloatMultiply
.a0c2		ca		dex				dex
.a0c3		20 09 9d	jsr $9d09			jsr 	FloatAdd 					; add to integer part.
.a0c6						_ENCFExit:
.a0c6		18		clc				clc 								; reject the digit.
.a0c7		60		rts				rts
.a0c8						ESTAShiftDigitIntoMantissa:
.a0c8		29 0f		and #$0f			and 	#15 						; save digit
.a0ca		48		pha				pha
.a0cb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a0cd		48		pha				pha
.a0ce		b5 68		lda $68,x			lda 	NSMantissa2,x
.a0d0		48		pha				pha
.a0d1		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0d3		48		pha				pha
.a0d4		b5 58		lda $58,x			lda 	NSMantissa0,x
.a0d6		48		pha				pha
.a0d7		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; x 2
.a0da		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; x 4
.a0dd		18		clc				clc 								; pop mantissa and add
.a0de		68		pla				pla
.a0df		75 58		adc $58,x			adc 	NSMantissa0,x
.a0e1		95 58		sta $58,x			sta 	NSMantissa0,x
.a0e3		68		pla				pla
.a0e4		75 60		adc $60,x			adc 	NSMantissa1,x
.a0e6		95 60		sta $60,x			sta 	NSMantissa1,x
.a0e8		68		pla				pla
.a0e9		75 68		adc $68,x			adc 	NSMantissa2,x
.a0eb		95 68		sta $68,x			sta 	NSMantissa2,x
.a0ed		68		pla				pla
.a0ee		75 70		adc $70,x			adc 	NSMantissa3,x
.a0f0		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a0f2		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; x 10
.a0f5		68		pla				pla 								; add digit
.a0f6		18		clc				clc
.a0f7		75 58		adc $58,x			adc 	NSMantissa0,x
.a0f9		95 58		sta $58,x			sta 	NSMantissa0,x
.a0fb		90 0a		bcc $a107			bcc 	_ESTASDExit
.a0fd		f6 60		inc $60,x			inc 	NSMantissa1,x
.a0ff		d0 06		bne $a107			bne 	_ESTASDExit
.a101		f6 68		inc $68,x			inc 	NSMantissa2,x
.a103		d0 02		bne $a107			bne 	_ESTASDExit
.a105		f6 70		inc $70,x			inc 	NSMantissa3,x
.a107						_ESTASDExit:
.a107		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a108						EvaluateTerm:
.a108		b1 30		lda ($30),y			lda 	(codePtr),y
.a10a		30 18		bmi $a124			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a10c		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a10e		b0 6c		bcs $a17c			bcs 	_ETVariable
.a110		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a112		90 6b		bcc $a17f			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a114		c9 3a		cmp #$3a			cmp 	#'9'+1
.a116		b0 67		bcs $a17f			bcs 	_ETPuncUnary
.a118		20 00 a0	jsr $a000			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a11b						_ETNumber:
.a11b		c8		iny				iny 								; keep encoding until we have the numbers
.a11c		b1 30		lda ($30),y			lda 	(codePtr),y
.a11e		20 03 a0	jsr $a003			jsr 	EncodeNumberContinue
.a121		b0 f8		bcs $a11b			bcs 	_ETNumber 					; go back if accepted.
.a123		60		rts				rts
.a124						_ETCheckUnary:
.a124		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a126		f0 3f		beq $a167			beq 	_ETString
.a128		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a12a		f0 12		beq $a13e			beq 	_ETHexConstant
.a12c		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a12e		90 0b		bcc $a13b			bcc 	_ETSyntaxError
.a130		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.a132		b0 07		bcs $a13b			bcs 	_ETSyntaxError
.a134		da		phx				phx 								; push X on the stack
.a135		0a		asl a				asl 	a 							; put vector x 2 into X
.a136		aa		tax				tax
.a137		c8		iny				iny 								; consume unary function token
.a138		7c 8a 94	jmp ($948a,x)			jmp 	(VectorSet0,x) 				; and do it.
.a13b						_ETSyntaxError:
.a13b		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
.a13e						_ETHexConstant:
.a13e		c8		iny				iny 								; skip #
.a13f		c8		iny				iny 								; skip count
.a140		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; clear result
.a143						_ETHLoop:
.a143		b1 30		lda ($30),y			lda 	(codePtr),y
.a145		c8		iny				iny 								; and consume
.a146		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a148		f0 1c		beq $a166			beq 	_ETHExit
.a14a		48		pha				pha 								; save on stack.
.a14b		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; x 2
.a14e		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; x 4
.a151		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; x 8
.a154		20 23 a7	jsr $a723			jsr 	NSMShiftLeft 				; x 16
.a157		68		pla				pla 								; ASCII
.a158		c9 41		cmp #$41			cmp 	#'A'
.a15a		90 02		bcc $a15e			bcc 	_ETHNotChar
.a15c		e9 07		sbc #$07			sbc 	#7
.a15e						_ETHNotChar:
.a15e		29 0f		and #$0f			and 	#15 						; digit now
.a160		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a162		95 58		sta $58,x			sta 	NSMantissa0,x
.a164		80 dd		bra $a143			bra 	_ETHLoop 					; go round.
.a166						_ETHExit:
.a166		60		rts				rts
.a167						_ETString:
.a167		c8		iny				iny 								; look at length
.a168		b1 30		lda ($30),y			lda 	(codePtr),y
.a16a		48		pha				pha
.a16b		c8		iny				iny 								; first character
.a16c		20 40 ac	jsr $ac40			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a16f		68		pla				pla 								; restore count and save
.a170		85 36		sta $36				sta 	zTemp0
.a172		98		tya				tya 								; add length to Y to skip it.
.a173		18		clc				clc
.a174		65 36		adc $36				adc 	zTemp0
.a176		a8		tay				tay
.a177		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a179		95 50		sta $50,x			sta 	NSStatus,x
.a17b		60		rts				rts
.a17c						_ETVariable:
.a17c		4c d1 a1	jmp $a1d1			jmp 	VariableHandler
.a17f						_ETPuncUnary:
.a17f		c8		iny				iny 								; consume the unary character
.a180		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a182		f0 2b		beq $a1af			beq 	_ETUnaryNegate
.a184		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.a186		f0 36		beq $a1be			beq 	_ETDereference
.a188		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a18a		f0 3e		beq $a1ca			beq 	_ETParenthesis
.a18c		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a18e		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a190		f0 06		beq $a198			beq 	_ETIndirection
.a192		e6 36		inc $36				inc 	zTemp0
.a194		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a196		d0 a3		bne $a13b			bne 	_ETSyntaxError
.a198						_ETIndirection:
.a198		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a19a		1a		inc a				inc 	a
.a19b		48		pha				pha
.a19c		20 08 a1	jsr $a108			jsr 	EvaluateTerm				; evaluate the term
.a19f		20 81 9f	jsr $9f81			jsr 	Dereference 				; dereference it.
.a1a2		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a1a4		d0 06		bne $a1ac			bne 	_ETTypeMismatch
.a1a6		68		pla				pla 								; indirection 1-2
.a1a7		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a1a9		95 50		sta $50,x			sta 	NSStatus,x
.a1ab		60		rts				rts
.a1ac						_ETTypeMismatch:
.a1ac		4c c3 a9	jmp $a9c3			jmp 	TypeError
.a1af						_ETUnaryNegate:
.a1af		20 08 a1	jsr $a108			jsr 	EvaluateTerm				; evaluate the term
.a1b2		20 81 9f	jsr $9f81			jsr 	Dereference 				; dereference it.
.a1b5		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a1b7		29 10		and #$10			and 	#NSTString
.a1b9		d0 f1		bne $a1ac			bne 	_ETTypeMismatch
.a1bb		4c d6 a6	jmp $a6d6			jmp 	NSMNegate  					; just toggles the sign bit.
.a1be						_ETDereference:
.a1be		20 08 a1	jsr $a108			jsr 	EvaluateTerm				; evaluate the term
.a1c1		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a1c3		29 20		and #$20			and 	#NSBIsReference
.a1c5		f0 e5		beq $a1ac			beq 	_ETTypeMismatch
.a1c7		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a1c9		60		rts				rts
.a1ca						_ETParenthesis:
.a1ca		20 be 9c	jsr $9cbe			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a1cd		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; check for )
.a1d0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a1d1						VariableHandler:
.a1d1		b1 30		lda ($30),y			lda 	(codePtr),y
.a1d3		18		clc				clc
.a1d4		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a1d6		85 37		sta $37				sta 	zTemp0+1
.a1d8		c8		iny				iny
.a1d9		b1 30		lda ($30),y			lda 	(codePtr),y
.a1db		85 36		sta $36				sta 	zTemp0
.a1dd		c8		iny				iny
.a1de		18		clc				clc									; copy variable address+3 to mantissa
.a1df		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a1e1		95 58		sta $58,x			sta 	NSMantissa0,x
.a1e3		a5 37		lda $37				lda 	zTemp0+1
.a1e5		69 00		adc #$00			adc 	#0
.a1e7		95 60		sta $60,x			sta 	NSMantissa1,x
.a1e9		74 68		stz $68,x			stz 	NSMantissa2,x
.a1eb		74 70		stz $70,x			stz 	NSMantissa3,x
.a1ed		74 78		stz $78,x			stz 	NSExponent,x
.a1ef		5a		phy				phy
.a1f0		a0 02		ldy #$02			ldy 	#2 							; read type
.a1f2		b1 36		lda ($36),y			lda 	(zTemp0),y
.a1f4		7a		ply				ply
.a1f5		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a1f7		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a1f9		95 50		sta $50,x			sta 	NSStatus,x
.a1fb		29 04		and #$04			and 	#NSBIsArray
.a1fd		d0 01		bne $a200			bne 	_VHArray
.a1ff		60		rts				rts
.a200						_VHArray:
.a200		e8		inx				inx
.a201		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a204		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a206		95 51		sta $51,x			sta 	NSStatus+1,x
.a208		b1 30		lda ($30),y			lda 	(codePtr),y
.a20a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a20c		d0 06		bne $a214			bne 	_VHNoSecondIndex
.a20e		c8		iny				iny 								; skip the comma
.a20f		e8		inx				inx
.a210		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a213		ca		dex				dex
.a214						_VHNoSecondIndex:
.a214		ca		dex				dex 								; set X back.
.a215		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; and check the right bracket.
.a218		5a		phy				phy 								; save position
.a219		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a21b		85 3e		sta $3e				sta 	zaTemp
.a21d		b5 60		lda $60,x			lda 	NSMantissa1,x
.a21f		85 3f		sta $3f				sta 	zaTemp+1
.a221		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a223		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a225		f0 5d		beq $a284			beq 	_VHBadArray
.a227		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a229		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a22b		f0 02		beq $a22f			beq 	_VHHas2Mask
.a22d		a9 ff		lda #$ff			lda 	#$FF
.a22f						_VHHas2Mask:
.a22f		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a231		f0 4c		beq $a27f			beq 	_VHBadIndex
.a233		0a		asl a				asl 	a 							; carry will be set if a second index
.a234		90 08		bcc $a23e			bcc 	_VHCheckFirstIndex
.a236		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a238		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a23a		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a23c		90 41		bcc $a27f			bcc 	_VHBadIndex
.a23e						_VHCheckFirstIndex:
.a23e		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a240		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a242		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a244		90 39		bcc $a27f			bcc 	_VHBadIndex
.a246		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a248		64 37		stz $37				stz 	zTemp0+1
.a24a		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a24c		30 0e		bmi $a25c			bmi 	_VHNoMultiply
.a24e		da		phx				phx
.a24f		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a251		48		pha				pha
.a252		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a254		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a256		1a		inc a				inc 	a 							; add 1 for zero base
.a257		fa		plx				plx
.a258		20 bf a6	jsr $a6bf			jsr 	Multiply8x8 				; calculate -> Z0
.a25b		fa		plx				plx
.a25c						_VHNoMultiply:
.a25c		18		clc				clc
.a25d		a5 36		lda $36				lda 	zTemp0
.a25f		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a261		85 36		sta $36				sta 	zTemp0
.a263		a5 37		lda $37				lda 	zTemp0+1
.a265		69 00		adc #$00			adc 	#0
.a267		85 37		sta $37				sta 	zTemp0+1
.a269		b5 50		lda $50,x			lda 	NSStatus,x
.a26b		20 d7 87	jsr $87d7			jsr 	ScaleByBaseType
.a26e		18		clc				clc
.a26f		b2 3e		lda ($3e)			lda 	(zaTemp)
.a271		65 36		adc $36				adc 	zTemp0
.a273		95 58		sta $58,x			sta 	NSMantissa0,x
.a275		a0 01		ldy #$01			ldy 	#1
.a277		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a279		65 37		adc $37				adc 	zTemp0+1
.a27b		95 60		sta $60,x			sta 	NSMantissa1,x
.a27d		7a		ply				ply 								; restore position
.a27e		60		rts				rts
.a27f						_VHBadIndex:
.a27f		a9 17		lda #$17		lda	#23
.a281		4c ba 97	jmp $97ba		jmp	ErrorHandler
.a284						_VHBadArray:
.a284		a9 18		lda #$18		lda	#24
.a286		4c ba 97	jmp $97ba		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a289						AbsUnary:
.a289		fa		plx				plx 								; restore stack pos
.a28a		20 62 a6	jsr $a662			jsr 	EvaluateNumber 				; get a float or int
.a28d		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a290		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a292		29 7f		and #$7f			and 	#$7F
.a294		95 50		sta $50,x			sta 	NSStatus,x
.a296		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a297						AllocUnary:
.a297		fa		plx				plx 								; restore stack pos
.a298		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger		; get bytes required.
.a29b		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a29e		da		phx				phx 								; save X/Y
.a29f		5a		phy				phy
.a2a0		8a		txa				txa 								; copy X into Y
.a2a1		a8		tay				tay
.a2a2		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a2a5		aa		tax				tax
.a2a6		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a2a9		20 b6 a2	jsr $a2b6			jsr 	AllocateXABytes 			; allocate memory
.a2ac		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a2af		8a		txa				txa 	 							; typing is 16 bit integer.
.a2b0		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a2b3		7a		ply				ply
.a2b4		fa		plx				plx
.a2b5		60		rts				rts
.a2b6						AllocateXABytes:
.a2b6		5a		phy				phy
.a2b7		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a2ba		84 36		sty $36				sty 	zTemp0
.a2bc		5a		phy				phy
.a2bd		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a2c0		84 37		sty $37				sty 	zTemp0+1
.a2c2		5a		phy				phy
.a2c3		18		clc				clc 								; add to low memory pointer
.a2c4		6d 08 04	adc $0408			adc 	lowMemPtr
.a2c7		8d 08 04	sta $0408			sta 	lowMemPtr
.a2ca		8a		txa				txa
.a2cb		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a2ce		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a2d1		b0 2f		bcs $a302			bcs 	CISSMemory
.a2d3		20 f4 a2	jsr $a2f4			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a2d6						_ClearMemory:
.a2d6		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a2d9		c5 36		cmp $36				cmp 	zTemp0
.a2db		d0 07		bne $a2e4			bne 	_CMClearNext
.a2dd		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a2e0		c5 37		cmp $37				cmp 	zTemp0+1
.a2e2		f0 0c		beq $a2f0			beq 	_CMExit
.a2e4						_CMClearNext:
.a2e4		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a2e6		92 36		sta ($36)			sta 	(zTemp0)
.a2e8		e6 36		inc $36				inc 	zTemp0
.a2ea		d0 ea		bne $a2d6			bne 	_ClearMemory
.a2ec		e6 37		inc $37				inc		zTemp0+1
.a2ee		80 e6		bra $a2d6			bra 	_ClearMemory
.a2f0						_CMExit:
.a2f0		fa		plx				plx
.a2f1		68		pla				pla
.a2f2		7a		ply				ply
.a2f3		60		rts				rts
.a2f4						CheckIdentifierStringSpace:
.a2f4		48		pha				pha
.a2f5		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a2f8		18		clc				clc
.a2f9		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a2fb		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a2fe		b0 02		bcs $a302			bcs 	CISSMemory
.a300		68		pla				pla
.a301		60		rts				rts
.a302						CISSMemory:
.a302		a9 06		lda #$06		lda	#6
.a304		4c ba 97	jmp $97ba		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a307						AscUnary:
.a307		fa		plx				plx 								; restore stack pos
.a308		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; get a string
.a30b		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a30d		20 16 a7	jsr $a716			jsr 	NSMSetByte 					; ASC("") will return zero.
.a310		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a313		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a314						FracUnary:
.a314		fa		plx				plx 								; restore stack pos
.a315		20 62 a6	jsr $a662			jsr 	EvaluateNumber 				; get a float or int
.a318		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a31b		b5 50		lda $50,x			lda 	NSStatus,x
.a31d		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a31f		f0 04		beq $a325			beq 	_IUZero
.a321		20 cf 9d	jsr $9dcf			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a324		60		rts				rts
.a325						_IUZero:
.a325		20 14 a7	jsr $a714			jsr 	NSMSetZero
.a328		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a329						IntUnary:
.a329		fa		plx				plx 								; restore stack pos
.a32a		20 62 a6	jsr $a662			jsr 	EvaluateNumber 				; get a float or int
.a32d		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a330		b5 50		lda $50,x			lda 	NSStatus,x
.a332		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a334		f0 03		beq $a339			beq 	_IUExit
.a336		20 27 9e	jsr $9e27			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a339						_IUExit:
.a339		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a33a						LenUnary:
.a33a		fa		plx				plx 								; restore stack pos
.a33b		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; get a string
.a33e		5a		phy				phy
.a33f		a0 00		ldy #$00			ldy 	#0 							; find length
.a341						_LenFind:
.a341		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a343		f0 06		beq $a34b			beq 	_LenExit
.a345		c8		iny				iny
.a346		d0 f9		bne $a341			bne 	_LenFind
.a348		4c be a9	jmp $a9be			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a34b						_LenExit:
.a34b		98		tya				tya		 							; return length
.a34c		20 16 a7	jsr $a716			jsr 	NSMSetByte
.a34f		7a		ply				ply
.a350		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a353		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a354						Unary_Min:
.a354		a9 01		lda #$01			lda 	#1
.a356		80 02		bra $a35a			bra 	UnaryMinMaxMain
.a358						Unary_Max:
.a358		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a35a						UnaryMinMaxMain:
.a35a		fa		plx				plx 								; get index on number stack
.a35b		48		pha				pha 								; save comparator
.a35c		20 59 a6	jsr $a659			jsr 	EvaluateValue 				; get the first value.
.a35f						_UMMMLoop:
.a35f		b1 30		lda ($30),y			lda 	(codePtr),y
.a361		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a363		f0 22		beq $a387			beq 	_UMMMDone
.a365		20 a9 97	jsr $97a9			jsr 	CheckComma 					; must be a comma
.a368		e8		inx				inx
.a369		20 59 a6	jsr $a659			jsr 	EvaluateValue
.a36c		ca		dex				dex
.a36d		20 f7 a6	jsr $a6f7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a370		e8		inx				inx
.a371		20 f7 a6	jsr $a6f7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a374		e8		inx				inx
.a375		20 71 98	jsr $9871			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a378		ca		dex				dex
.a379		ca		dex				dex
.a37a		85 36		sta $36				sta 	zTemp0 						; save required result
.a37c		68		pla				pla 								; get and save comparator
.a37d		48		pha				pha
.a37e		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a380		d0 dd		bne $a35f			bne 	_UMMMLoop
.a382		20 8a a3	jsr $a38a			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a385		80 d8		bra $a35f			bra 	_UMMMLoop
.a387						_UMMMDone:
.a387		68		pla				pla 								; throw the comparator
.a388		c8		iny				iny 								; skip )
.a389		60		rts				rts
.a38a						ExpCopyAboveDown:
.a38a		b5 51		lda $51,x			lda 	NSStatus+1,x
.a38c		95 50		sta $50,x			sta 	NSStatus,x
.a38e		b5 79		lda $79,x			lda 	NSExponent+1,x
.a390		95 78		sta $78,x			sta 	NSExponent,x
.a392		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a394		95 58		sta $58,x			sta 	NSMantissa0,x
.a396		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a398		95 60		sta $60,x			sta 	NSMantissa1,x
.a39a		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a39c		95 68		sta $68,x			sta 	NSMantissa2,x
.a39e		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a3a0		95 70		sta $70,x			sta 	NSMantissa3,x
.a3a2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a3a3						Unary_Not:
.a3a3		fa		plx				plx
.a3a4		20 81 a6	jsr $a681			jsr 	EvaluateInteger 			; get integer
.a3a7		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a3aa		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; zero mantissa ?
.a3ad		f0 04		beq $a3b3			beq 	_NotZero
.a3af		20 14 a7	jsr $a714			jsr 	NSMSetZero
.a3b2		60		rts				rts
.a3b3						_NotZero:
.a3b3		4c 27 98	jmp $9827			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a3b6						PeekByteUnary:
.a3b6		a9 01		lda #$01			lda 	#1
.a3b8		80 0a		bra $a3c4			bra 	PeekUnary
.a3ba						PeekWUnary:
.a3ba		a9 02		lda #$02			lda 	#2
.a3bc		80 06		bra $a3c4			bra 	PeekUnary
.a3be						PeekLUnary:
.a3be		a9 03		lda #$03			lda 	#3
.a3c0		80 02		bra $a3c4			bra 	PeekUnary
.a3c2						PeekDUnary:
.a3c2		a9 04		lda #$04			lda 	#4
.a3c4						PeekUnary:
.a3c4		fa		plx				plx 								; restore position.
.a3c5		48		pha				pha 								; save count to copy on stack
.a3c6		20 94 a6	jsr $a694			jsr		Evaluate16BitInteger 		; address as constant.
.a3c9		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a3cc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a3ce		85 36		sta $36				sta 	zTemp0
.a3d0		b5 60		lda $60,x			lda 	NSMantissa1,x
.a3d2		85 37		sta $37				sta 	zTemp0+1
.a3d4		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; clear the result to zero.
.a3d7		68		pla				pla 								; count in zTemp2
.a3d8		85 3a		sta $3a				sta 	zTemp2
.a3da		da		phx				phx 								; save stack position and offset of read
.a3db		5a		phy				phy
.a3dc		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a3de						_PULoop:
.a3de		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a3e0		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a3e2		c8		iny				iny 								; next byte to write
.a3e3		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a3e4		18		clc				clc
.a3e5		69 08		adc #$08			adc 	#MathStackSize
.a3e7		aa		tax				tax
.a3e8		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a3ea		d0 f2		bne $a3de			bne 	_PULoop
.a3ec		7a		ply				ply 								; restore stack/code pos and exit.
.a3ed		fa		plx				plx
.a3ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a3ef						SgnUnary:
.a3ef		fa		plx				plx 								; restore stack pos
.a3f0		20 62 a6	jsr $a662			jsr 	EvaluateNumber 				; get a float or int
.a3f3		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a3f6		20 36 a7	jsr $a736			jsr 	NSMIsZero 					; if zero
.a3f9		f0 0e		beq $a409			beq 	_SGZero  					; return Int Zero
.a3fb		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a3fd		48		pha				pha
.a3fe		a9 01		lda #$01			lda 	#1 							; set to 1
.a400		20 16 a7	jsr $a716			jsr 	NSMSetByte
.a403		68		pla				pla
.a404		29 80		and #$80			and		#$80 						; copy the sign byte out
.a406		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a408		60		rts				rts
.a409		20 14 a7	jsr $a714	_SGZero:jsr 	NSMSetZero
.a40c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a40d						ValUnary:
.a40d		fa		plx				plx 								; restore stack pos
.a40e		20 23 a4	jsr $a423			jsr 	ValMainCode 				; do the main val() code
.a411		b0 01		bcs $a414			bcs 	_VUError 					; couldn't convert
.a413		60		rts				rts
.a414						_VUError:
.a414		4c c3 a9	jmp $a9c3			jmp 	TypeError
.a417						IsValUnary:
.a417		fa		plx				plx 								; restore stack pos
.a418		20 23 a4	jsr $a423			jsr 	ValMainCode 				; do the main val() code
.a41b		b0 03		bcs $a420			bcs 	_VUBad
.a41d		4c 27 98	jmp $9827			jmp 	ReturnTrue
.a420						_VUBad:
.a420		4c 32 98	jmp $9832			jmp 	ReturnFalse
.a423						ValMainCode:
.a423		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; get a string
.a426		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; check right bracket present
.a429						ValEvaluateZTemp0:
.a429		5a		phy				phy
.a42a		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a42c		f0 17		beq $a445			beq 	_VMCFail2
.a42e		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a430		48		pha				pha 								; save first character
.a431		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a433		d0 01		bne $a436			bne 	_VMCStart
.a435		c8		iny				iny 								; skip over -
.a436						_VMCStart:
.a436		38		sec				sec 								; initialise first time round.
.a437						_VMCNext:
.a437		c8		iny				iny 								; pre-increment
.a438		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a43a		f0 0c		beq $a448			beq 	_VMCSuccess 				; successful.
.a43c		20 04 a0	jsr $a004			jsr 	EncodeNumber 				; send it to the number-builder
.a43f		90 03		bcc $a444			bcc 	_VMCFail 					; if failed, give up.
.a441		18		clc				clc 								; next time round, countinue
.a442		80 f3		bra $a437			bra 	_VMCNext
.a444						_VMCFail:
.a444		68		pla				pla
.a445						_VMCFail2:
.a445		7a		ply				ply
.a446		38		sec				sec
.a447		60		rts				rts
.a448						_VMCSuccess:
.a448		a9 00		lda #$00			lda 	#0 							; construct final
.a44a		20 04 a0	jsr $a004			jsr 	EncodeNumber 				; by sending a duff value.
.a44d		68		pla				pla 								; if it was -ve
.a44e		c9 2d		cmp #$2d			cmp 	#"-"
.a450		d0 03		bne $a455			bne 	_VMCNotNegative
.a452		20 d6 a6	jsr $a6d6			jsr		NSMNegate 					; negate it.
.a455						_VMCNotNegative:
.a455		7a		ply				ply
.a456		18		clc				clc
.a457		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a458						ChrUnary:
.a458		fa		plx				plx 								; restore stack pos
.a459		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a45c		48		pha				pha
.a45d		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a460		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a462		20 23 b1	jsr $b123			jsr 	StringTempAllocate
.a465		68		pla				pla 								; write number to it
.a466		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.a469		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a46a						ItemCountUnary:
.a46a		fa		plx				plx
.a46b		20 6c a6	jsr $a66c			jsr 	EvaluateString
.a46e		e8		inx				inx
.a46f		20 e2 a4	jsr $a4e2			jsr 	ICGetSeperator
.a472		ca		dex				dex
.a473		20 03 a5	jsr $a503			jsr 	ICSetPointer 				; zTemp0 = (string)
.a476		20 14 a7	jsr $a714			jsr 	NSMSetZero 					; zero the result.
.a479		5a		phy				phy
.a47a		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a47c						_ICULoop:
.a47c		c8		iny				iny
.a47d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a47f		cd 95 07	cmp $0795			cmp 	ICSeperator
.a482		d0 02		bne $a486			bne 	_ICUNoMatch
.a484		f6 58		inc $58,x			inc 	NSMantissa0,x
.a486						_ICUNoMatch:
.a486		c9 00		cmp #$00			cmp 	#0
.a488		d0 f2		bne $a47c			bne 	_ICULoop
.a48a		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a48c		7a		ply				ply
.a48d		60		rts				rts
.a48e						ItemGetUnary:
.a48e		fa		plx				plx
.a48f		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; search string
.a492		20 a9 97	jsr $97a9			jsr 	CheckComma
.a495		e8		inx				inx 								; get count
.a496		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.a499		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a49b		f0 61		beq $a4fe			beq 	ICGSRange
.a49d		e8		inx				inx 								; get seperator.
.a49e		20 e2 a4	jsr $a4e2			jsr 	ICGetSeperator
.a4a1		ca		dex				dex
.a4a2		ca		dex				dex
.a4a3		5a		phy				phy
.a4a4		20 03 a5	jsr $a503			jsr 	ICSetPointer 				; zTemp0 points to string.
.a4a7		a0 00		ldy #$00			ldy 	#0
.a4a9		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a4ab		f0 0e		beq $a4bb			beq 	_IGUFoundStart
.a4ad						_IGUFindNext:
.a4ad		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a4af		f0 4d		beq $a4fe			beq 	ICGSRange 					; eol, not found.
.a4b1		c8		iny				iny
.a4b2		cd 95 07	cmp $0795			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a4b5		d0 f6		bne $a4ad			bne 	_IGUFindNext
.a4b7		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a4b9		d0 f2		bne $a4ad			bne 	_IGUFindNext
.a4bb						_IGUFoundStart:
.a4bb		84 38		sty $38				sty 	zTemp1 						; save start
.a4bd		88		dey				dey
.a4be						_IGUFindLength:
.a4be		c8		iny				iny 								; forward till seperator/EOS
.a4bf		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4c1		f0 05		beq $a4c8			beq 	_IGUFoundLength
.a4c3		cd 95 07	cmp $0795			cmp 	ICSeperator
.a4c6		d0 f6		bne $a4be			bne 	_IGUFindLength
.a4c8						_IGUFoundLength:
.a4c8		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a4ca		98		tya				tya 								; calculate length of new string.
.a4cb		38		sec				sec
.a4cc		e5 38		sbc $38				sbc 	zTemp1
.a4ce		20 23 b1	jsr $b123			jsr 	StringTempAllocate 			; allocate bytes for it.
.a4d1		a4 38		ldy $38				ldy 	zTemp1
.a4d3						_IGUCopySub:
.a4d3		c4 39		cpy $39				cpy 	zTemp1+1
.a4d5		f0 08		beq $a4df			beq 	_IGUCopyOver
.a4d7		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4d9		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.a4dc		c8		iny				iny
.a4dd		80 f4		bra $a4d3			bra 	_IGUCopySub
.a4df						_IGUCopyOver:
.a4df		7a		ply				ply
.a4e0		60		rts				rts
>a4e1		db						.byte 	$DB 						; causes a break in the emulator
.a4e2						ICGetSeperator:
.a4e2		20 a9 97	jsr $97a9			jsr 	CheckComma 					; preceding comma
.a4e5		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; seperator string
.a4e8		20 03 a5	jsr $a503			jsr 	ICSetPointer 				; access it
.a4eb		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a4ed		8d 95 07	sta $0795			sta 	ICSeperator
.a4f0		f0 0c		beq $a4fe			beq 	ICGSRange 					; check LEN(seperator) = 1
.a4f2		5a		phy				phy
.a4f3		a0 01		ldy #$01			ldy 	#1
.a4f5		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4f7		d0 05		bne $a4fe			bne 	ICGSRange
.a4f9		7a		ply				ply
.a4fa		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; check following )
.a4fd		60		rts				rts
.a4fe						ICGSRange:
.a4fe		a9 04		lda #$04		lda	#4
.a500		4c ba 97	jmp $97ba		jmp	ErrorHandler
.a503						ICSetPointer:
.a503		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a505		85 36		sta $36				sta 	zTemp0
.a507		b5 60		lda $60,x			lda 	NSMantissa1,x
.a509		85 37		sta $37				sta 	zTemp0+1
.a50b		60		rts				rts
.0795						ICSeperator:
>0795								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a50c						SpcUnary:
.a50c		fa		plx				plx 								; restore stack pos
.a50d		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger			; get value
.a510		5a		phy				phy
.a511		48		pha				pha 								; save count
.a512		20 23 b1	jsr $b123			jsr 	StringTempAllocate
.a515		7a		ply				ply 								; to do count in Y
.a516						_SpcLoop:
.a516		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a518		f0 08		beq $a522			beq 	_SpcExit
.a51a		a9 20		lda #$20			lda 	#32
.a51c		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.a51f		88		dey				dey
.a520		80 f4		bra $a516			bra 	_SpcLoop
.a522						_SpcExit:
.a522		7a		ply				ply
.a523		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a526		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a527						Unary_Str:
.a527		fa		plx				plx
.a528		20 62 a6	jsr $a662			jsr 	EvaluateNumber  			; get number
.a52b		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; closing bracket
.a52e		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a530		20 49 a5	jsr $a549			jsr 	ConvertNumberToString 		; do the conversion.
.a533		a9 21		lda #$21			lda		#33 						; create buffer
.a535		20 23 b1	jsr $b123			jsr 	StringTempAllocate 			; allocate memory
.a538		da		phx				phx  								; copy the converted string into the buffer.
.a539		a2 00		ldx #$00			ldx 	#0
.a53b						_USCopy:
.a53b		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a53e		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.a541		e8		inx				inx
.a542		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a545		d0 f4		bne $a53b			bne 	_USCopy
.a547		fa		plx				plx
.a548		60		rts				rts
.a549						ConvertNumberToString:
.a549		5a		phy				phy 								; save code position
.a54a		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a54d		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a550		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a552		10 09		bpl $a55d			bpl 	_CNTSNotNegative
.a554		29 7f		and #$7f			and 	#$7F 						; make +ve
.a556		95 50		sta $50,x			sta 	NSStatus,x
.a558		a9 2d		lda #$2d			lda 	#"-"
.a55a		20 be a5	jsr $a5be			jsr 	WriteDecimalBuffer
.a55d						_CNTSNotNegative:
.a55d		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a55f		f0 12		beq $a573			beq 	_CNTSNotFloat
.a561		e8		inx				inx 								; round up so we don't get too many 6.999999
.a562		a9 01		lda #$01			lda 	#1
.a564		20 16 a7	jsr $a716			jsr 	NSMSetByte
.a567		ca		dex				dex
.a568		b5 78		lda $78,x			lda		NSExponent,x
.a56a		95 79		sta $79,x			sta 	NSExponent+1,x
.a56c		a9 08		lda #$08			lda 	#NSTFloat
.a56e		95 51		sta $51,x			sta 	NSStatus+1,x
.a570		20 09 9d	jsr $9d09			jsr 	FloatAdd
.a573						_CNTSNotFloat:
.a573		20 a0 a5	jsr $a5a0			jsr 	MakePlusTwoString 			; do the integer part.
.a576		20 cf 9d	jsr $9dcf			jsr 	FloatFractionalPart 		; get the fractional part
.a579		20 80 9e	jsr $9e80			jsr 	NSNormalise					; normalise , exit if zero
.a57c		f0 20		beq $a59e			beq 	_CNTSExit
.a57e		a9 2e		lda #$2e			lda 	#"."
.a580		20 be a5	jsr $a5be			jsr 	WriteDecimalBuffer 			; write decimal place
.a583						_CNTSDecimal:
.a583		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a586		30 16		bmi $a59e			bmi 	_CNTSExit
.a588		e8		inx				inx 								; x 10.0
.a589		a9 0a		lda #$0a			lda 	#10
.a58b		20 16 a7	jsr $a716			jsr 	NSMSetByte
.a58e		a9 08		lda #$08			lda 	#NSTFloat
.a590		95 50		sta $50,x			sta 	NSStatus,x
.a592		ca		dex				dex
.a593		20 4e 9e	jsr $9e4e			jsr 	FloatMultiply
.a596		20 a0 a5	jsr $a5a0			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a599		20 cf 9d	jsr $9dcf			jsr 	FloatFractionalPart 		; get the fractional part
.a59c		80 e5		bra $a583			bra 	_CNTSDecimal 				; keep going.
.a59e						_CNTSExit:
.a59e		7a		ply				ply
.a59f		60		rts				rts
.a5a0						MakePlusTwoString:
.a5a0		da		phx				phx
.a5a1		20 f7 a6	jsr $a6f7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a5a4		e8		inx				inx 								; access it
.a5a5		e8		inx				inx
.a5a6		20 27 9e	jsr $9e27			jsr 	FloatIntegerPart 			; make it an integer
.a5a9		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a5ab		20 39 9c	jsr $9c39			jsr 	ConvertInt32
.a5ae		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a5b0						_MPTSCopy:
.a5b0		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a5b3		20 be a5	jsr $a5be			jsr 	WriteDecimalBuffer
.a5b6		e8		inx				inx
.a5b7		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a5ba		d0 f4		bne $a5b0			bne 	_MPTSCopy
.a5bc		fa		plx				plx
.a5bd		60		rts				rts
.a5be						WriteDecimalBuffer:
.a5be		da		phx				phx
.a5bf		ae 11 04	ldx $0411			ldx 	dbOffset
.a5c2		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a5c5		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a5c8		ee 11 04	inc $0411			inc 	dbOffset
.a5cb		fa		plx				plx
.a5cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5cd						Unary_Left:
.a5cd		fa		plx				plx
.a5ce		18		clc				clc 								; only one parameter
.a5cf		20 32 a6	jsr $a632			jsr 	SubstringInitial 			; set up.
.a5d2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5d4		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5d6		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5d8		80 25		bra $a5ff			bra 	SubstringMain
.a5da						Unary_Right:
.a5da		fa		plx				plx
.a5db		18		clc				clc 								; only one parameter
.a5dc		20 32 a6	jsr $a632			jsr 	SubstringInitial 			; set up.
.a5df		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5e1		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5e3		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a5e5		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5e7		b0 02		bcs $a5eb			bcs 	_URNotUnderflow
.a5e9		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5eb						_URNotUnderflow:
.a5eb		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5ed		80 10		bra $a5ff			bra 	SubstringMain
.a5ef						Unary_Mid:
.a5ef		fa		plx				plx
.a5f0		38		sec				sec 								; two parameters
.a5f1		20 32 a6	jsr $a632			jsr 	SubstringInitial 			; set up.
.a5f4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5f6		f0 04		beq $a5fc			beq 	_UMError
.a5f8		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5fa		80 03		bra $a5ff			bra 	SubstringMain
.a5fc						_UMError:
.a5fc		4c c8 a9	jmp $a9c8			jmp 	ArgumentError
.a5ff						SubstringMain:
.a5ff		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a601		d5 78		cmp $78,x			cmp 	NSExponent,x
.a603		b0 27		bcs $a62c			bcs 	_SSMNull 					; if so, return an empty string.
.a605		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a607		f0 23		beq $a62c			beq 	_SSMNull 					; return empty string.
.a609		18		clc				clc 								; add the offset +1 to the address and
.a60a		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a60c		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a60e		85 36		sta $36				sta 	zTemp0
.a610		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a612		69 00		adc #$00			adc 	#0
.a614		85 37		sta $37				sta 	zTemp0+1
.a616						_SSMNoCarry:
.a616		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a618		20 23 b1	jsr $b123			jsr 	StringTempAllocate 			; allocate that many characters
.a61b		5a		phy				phy 								; save Y
.a61c		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a61e						_SSMCopy:
.a61e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a620		f0 08		beq $a62a			beq 	_SSMEString 				; no more to copy
.a622		20 5c b1	jsr $b15c			jsr 	StringTempWrite 			; and write it out.
.a625		c8		iny				iny
.a626		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a628		d0 f4		bne $a61e			bne 	_SSMCopy
.a62a						_SSMEString:
.a62a		7a		ply				ply
.a62b						_SSMExit:
.a62b		60		rts				rts
.a62c						_SSMNull:
.a62c		a9 00		lda #$00			lda 	#0
.a62e		20 23 b1	jsr $b123			jsr 	StringTempAllocate
.a631		60		rts				rts
.a632						SubstringInitial:
.a632		da		phx				phx 								; save initial stack position
.a633		08		php				php 								; save carry on stack indicating 2 parameters
.a634		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; get a string
.a637		5a		phy				phy 								; calculate length to exponent.
.a638		a0 ff		ldy #$ff			ldy 	#$FF
.a63a						_SIFindLength:
.a63a		c8		iny				iny
.a63b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a63d		d0 fb		bne $a63a			bne 	_SIFindLength
.a63f		98		tya				tya
.a640		95 78		sta $78,x			sta 	NSExponent,x
.a642		7a		ply				ply
.a643		e8		inx				inx
.a644		20 a9 97	jsr $97a9			jsr 	CheckComma 					; comma next
.a647		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get next parameter
.a64a		28		plp				plp 								; is it the last parameter ?
.a64b		90 07		bcc $a654			bcc 	_SSIExit 					; if so, exit.
.a64d		e8		inx				inx
.a64e		20 a9 97	jsr $97a9			jsr 	CheckComma 					; comma next
.a651		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get last parameter
.a654						_SSIExit:
.a654		fa		plx				plx
.a655		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; check closing bracket
.a658		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a659						EvaluateValue:
.a659		48		pha				pha
.a65a		20 be 9c	jsr $9cbe			jsr		EvaluateExpression 			; expression
.a65d		20 81 9f	jsr $9f81			jsr 	Dereference					; derefernce it
.a660		68		pla				pla
.a661		60		rts				rts
.a662						EvaluateNumber:
.a662		20 59 a6	jsr $a659			jsr 	EvaluateValue 				; get a value
.a665		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a667		29 10		and #$10			and 	#NSBIsString
.a669		d0 13		bne $a67e			bne 	HelperTypeError
.a66b		60		rts				rts
.a66c						EvaluateString:
.a66c		20 59 a6	jsr $a659			jsr 	EvaluateValue 				; get a value
.a66f		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a671		29 10		and #$10			and 	#NSBIsString
.a673		f0 09		beq $a67e			beq 	HelperTypeError
.a675						CopyAddressToTemp0:
.a675		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a677		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a679		b5 60		lda $60,x			lda 	NSMantissa1,x
.a67b		85 37		sta $37				sta 	zTemp0+1
.a67d		60		rts				rts
.a67e						HelperTypeError:
.a67e		4c c3 a9	jmp $a9c3			jmp 	TypeError
.a681						EvaluateInteger:
.a681		20 62 a6	jsr $a662			jsr 	EvaluateNumber
.a684		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a686		d0 09		bne $a691			bne 	HelperValueError 			; if not, it's a float.
.a688		60		rts				rts
.a689						EvaluateUnsignedInteger:
.a689		20 81 a6	jsr $a681			jsr 	EvaluateInteger 			; check integer is +ve
.a68c		b5 50		lda $50,x			lda 	NSStatus,x
.a68e		30 01		bmi $a691			bmi 	HelperValueError
.a690		60		rts				rts
.a691						HelperValueError:
.a691		4c c8 a9	jmp $a9c8			jmp 	ArgumentError
.a694						Evaluate16BitInteger:
.a694		20 89 a6	jsr $a689			jsr	 	EvaluateUnsignedInteger		; get integer
.a697		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a699		15 68		ora $68,x			ora 	NSMantissa2,x
.a69b		d0 f4		bne $a691			bne 	HelperValueError
.a69d		60		rts				rts
.a69e						Evaluate16BitIntegerSigned:
.a69e		20 81 a6	jsr $a681			jsr	 	EvaluateInteger				; get integer
.a6a1		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a6a3		15 68		ora $68,x			ora 	NSMantissa2,x
.a6a5		d0 ea		bne $a691			bne 	HelperValueError
.a6a7		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a6a9		10 03		bpl $a6ae			bpl 	_EISNotSigned
.a6ab		20 dd a6	jsr $a6dd			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a6ae						_EISNotSigned:
.a6ae		60		rts				rts
.a6af						Evaluate8BitInteger:
.a6af		20 89 a6	jsr $a689			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a6b2		d0 dd		bne $a691			bne 	HelperValueError
.a6b4		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6b6		15 68		ora $68,x			ora 	NSMantissa2,x
.a6b8		15 60		ora $60,x			ora 	NSMantissa1,x
.a6ba		d0 d5		bne $a691			bne 	HelperValueError
.a6bc		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a6bf						Multiply8x8:
.a6bf		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a6c0		85 36		sta $36			  	sta 	zTemp0
.a6c2		86 37		stx $37				stx 	zTemp0+1
.a6c4		a9 00		lda #$00			lda 	#0
.a6c6		a2 08		ldx #$08			ldx 	#8
.a6c8						_M88Loop:
.a6c8		90 03		bcc $a6cd			bcc 	_M88NoAdd
.a6ca		18		clc				clc
.a6cb		65 37		adc $37				adc 	zTemp0+1
.a6cd						_M88NoAdd:
.a6cd		6a		ror a				ror 	a
.a6ce		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a6d0		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a6d1		d0 f5		bne $a6c8			bne 	_M88Loop
.a6d3		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a6d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6d6						NSMNegate:
.a6d6		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a6d8		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a6da		95 50		sta $50,x			sta 	NSStatus,x
.a6dc		60		rts				rts
.a6dd						NSMNegateMantissa:
.a6dd		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a6de		a9 00		lda #$00			lda 	#0
.a6e0		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a6e2		95 58		sta $58,x			sta 	NSMantissa0,x
.a6e4		a9 00		lda #$00			lda 	#0
.a6e6		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a6e8		95 60		sta $60,x			sta 	NSMantissa1,x
.a6ea		a9 00		lda #$00			lda 	#0
.a6ec		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a6ee		95 68		sta $68,x			sta 	NSMantissa2,x
.a6f0		a9 00		lda #$00			lda 	#0
.a6f2		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a6f4		95 70		sta $70,x			sta 	NSMantissa3,x
.a6f6		60		rts				rts
.a6f7						NSMShiftUpTwo:
.a6f7		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6f9		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a6fb		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6fd		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a6ff		b5 68		lda $68,x			lda 	NSMantissa2,x
.a701		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a703		b5 70		lda $70,x			lda 	NSMantissa3,x
.a705		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a707		b5 78		lda $78,x			lda 	NSExponent,x
.a709		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a70b		b5 50		lda $50,x			lda 	NSStatus,x
.a70d		95 52		sta $52,x			sta 	NSStatus+2,x
.a70f		60		rts				rts
.a710						NSMSetZeroMantissaOnly:
.a710		a9 00		lda #$00			lda 	#0
.a712		80 06		bra $a71a			bra 	NSMSetMantissa
.a714						NSMSetZero:
.a714		a9 00		lda #$00			lda 	#0
.a716						NSMSetByte:
.a716		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a718		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a71a						NSMSetMantissa:
.a71a		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a71c		74 60		stz $60,x			stz 	NSMantissa1,x
.a71e		74 68		stz $68,x			stz 	NSMantissa2,x
.a720		74 70		stz $70,x			stz 	NSMantissa3,x
.a722		60		rts				rts
.a723						NSMShiftLeft:
.a723		18		clc				clc
.a724						NSMRotateLeft:
.a724		36 58		rol $58,x			rol 	NSMantissa0,x
.a726		36 60		rol $60,x			rol		NSMantissa1,x
.a728		36 68		rol $68,x			rol		NSMantissa2,x
.a72a		36 70		rol $70,x			rol		NSMantissa3,x
.a72c		60		rts				rts
.a72d						NSMShiftRight:
.a72d		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a72f		76 68		ror $68,x			ror		NSMantissa2,x
.a731		76 60		ror $60,x			ror		NSMantissa1,x
.a733		76 58		ror $58,x			ror		NSMantissa0,x
.a735		60		rts				rts
.a736						NSMIsZero:
.a736		b5 70		lda $70,x			lda 	NSMantissa3,x
.a738		15 68		ora $68,x			ora		NSMantissa2,x
.a73a		15 60		ora $60,x			ora		NSMantissa1,x
.a73c		15 58		ora $58,x			ora		NSMantissa0,x
.a73e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.a73f						UnaryGetTime:
.a73f		a9 00		lda #$00			lda 	#0
.a741		80 02		bra $a745			bra 	UGDTMain
.a743						UnaryGetDate:
.a743		a9 03		lda #$03			lda 	#3
.a745						UGDTMain:
.a745		fa		plx				plx 								; get stack position back
.a746		48		pha				pha 								; save table offset
.a747		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger			; ignored parameter
.a74a		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; closing )
.a74d		68		pla				pla 								; table offset in A
.a74e		5a		phy				phy 								; saving Y
.a74f		a8		tay				tay 								; table offset in Y
.a750		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a752		20 23 b1	jsr $b123			jsr 	StringTempAllocate
.a755		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a757		48		pha				pha
.a758		64 01		stz $01				stz 	1
.a75a		20 6d a7	jsr $a76d			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a75d		20 68 a7	jsr $a768			jsr 	UGDTColonDigit
.a760		20 68 a7	jsr $a768			jsr 	UGDTColonDigit
.a763		68		pla				pla 								; restore I/O select
.a764		85 01		sta $01				sta 	1
.a766		7a		ply				ply  								; restore code position
.a767		60		rts				rts
.a768						UGDTColonDigit:
.a768		a9 3a		lda #$3a			lda 	#':'
.a76a		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.a76d						UGDTDigit:
.a76d		da		phx				phx 								; save X
.a76e		b9 8d a7	lda $a78d,y			lda 	RTCROffset,y 				; get offset in RTC register
.a771		aa		tax				tax
.a772		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a775		39 93 a7	and $a793,y			and 	RTCRMask,y 					; and with Mask.
.a778		fa		plx				plx
.a779		48		pha				pha 								; output in BCD
.a77a		4a		lsr a				lsr 	a
.a77b		4a		lsr a				lsr 	a
.a77c		4a		lsr a				lsr 	a
.a77d		4a		lsr a				lsr 	a
.a77e		09 30		ora #$30			ora 	#48
.a780		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.a783		68		pla				pla
.a784		29 0f		and #$0f			and 	#15
.a786		09 30		ora #$30			ora 	#48
.a788		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.a78b		c8		iny				iny
.a78c		60		rts				rts
.a78d						RTCROffset:
>a78d		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a793						RTCRMask:
>a793		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.a799						AscGet:
.a799		fa		plx				plx 								; restore stack pos
.a79a						AscGet2:
.a79a		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a79d		20 34 81	jsr $8134	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a7a0		d0 0b		bne $a7ad			bne 	_AGBreak
.a7a2		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; wait for key.
.a7a5		c9 00		cmp #$00			cmp 	#0
.a7a7		f0 f4		beq $a79d			beq 	_AGKey
.a7a9		20 16 a7	jsr $a716			jsr 	NSMSetByte
.a7ac		60		rts				rts
.a7ad						_AGBreak:
.a7ad		a9 01		lda #$01		lda	#1
.a7af		4c ba 97	jmp $97ba		jmp	ErrorHandler
.a7b2						AscInkey:
.a7b2		fa		plx				plx 								; restore stack pos
.a7b3						AscInkey2:
.a7b3		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a7b6		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a7b9		20 16 a7	jsr $a716			jsr 	NSMSetByte
.a7bc		60		rts				rts
.a7bd						ChrGet:
.a7bd		fa		plx				plx
.a7be		20 9a a7	jsr $a79a			jsr 	AscGet2
.a7c1		4c c8 a7	jmp $a7c8			jmp 	GetInkeyToString
.a7c4						ChrInkey:
.a7c4		fa		plx				plx
.a7c5		20 b3 a7	jsr $a7b3			jsr 	AscInkey2
.a7c8						GetInkeyToString:
.a7c8		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a7ca		f0 0b		beq $a7d7			beq 	_GKISNull
.a7cc		48		pha				pha
.a7cd		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a7cf		20 23 b1	jsr $b123			jsr 	StringTempAllocate
.a7d2		68		pla				pla 								; write number to it
.a7d3		20 5c b1	jsr $b15c			jsr 	StringTempWrite
.a7d6		60		rts				rts
.a7d7						_GKISNull:
.a7d7		a9 00		lda #$00			lda 	#0
.a7d9		20 23 b1	jsr $b123			jsr 	StringTempAllocate
.a7dc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/keydown.asm

.a7dd						KeyDown:
.a7dd		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process outstanding events.
.a7e0		fa		plx				plx 								; restore stack pos
.a7e1		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; key to check.
.a7e4		48		pha				pha 								; check right bracket.
.a7e5		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a7e8		68		pla				pla
.a7e9		20 02 82	jsr $8202			jsr 	KeyboardConvertXA 			; get offset and mask.
.a7ec		3d 5f 06	and $065f,x			and 	KeyStatus,x 				; is it zero ?
.a7ef		f0 03		beq $a7f4			beq 	_KeyUp
.a7f1		4c 27 98	jmp $9827			jmp 	ReturnTrue
.a7f4		4c 32 98	jmp $9832	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.a7f7						Unary_Random:
.a7f7		fa		plx				plx
.a7f8		20 48 a8	jsr $a848			jsr 	URCopyToMantissa  			; put random # in mantissa
.a7fb		b1 30		lda ($30),y			lda 	(codePtr),y
.a7fd		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a7ff		f0 08		beq $a809			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a801		e8		inx				inx
.a802		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a805		ca		dex				dex
.a806		20 79 99	jsr $9979			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a809						_URNoModulus:
.a809		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a80b		74 78		stz $78,x			stz 	NSExponent,x
.a80d		20 a1 97	jsr $97a1			jsr 	CheckRightBracket
.a810		60		rts				rts
.a811						Unary_Rnd:
.a811		fa		plx				plx
.a812		20 62 a6	jsr $a662			jsr 	EvaluateNumber 				; number to use.
.a815		20 a1 97	jsr $97a1			jsr 	CheckRightBracket 			; closing bracket
.a818		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a81a		10 20		bpl $a83c			bpl 	_URDontSeed
.a81c		a5 01		lda $01				lda 	1 							; switch to page 0
.a81e		48		pha				pha
.a81f		64 01		stz $01				stz 	1
.a821		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a823		49 17		eor #$17			eor 	#$17
.a825		8d a4 d6	sta $d6a4			sta 	$D6A4
.a828		b5 60		lda $60,x			lda 	NSMantissa1,x
.a82a		49 a5		eor #$a5			eor 	#$A5
.a82c		8d a5 d6	sta $d6a5			sta 	$D6A5
.a82f		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a831		8d a6 d6	sta $d6a6			sta 	$D6A6
.a834		a9 01		lda #$01			lda 	#1
.a836		8d a6 d6	sta $d6a6			sta 	$D6A6
.a839		68		pla				pla
.a83a		85 01		sta $01				sta 	1
.a83c						_URDontSeed:
.a83c		20 48 a8	jsr $a848			jsr 	URCopyToMantissa 			; copy into mantissa
.a83f		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a841		95 78		sta $78,x			sta 	NSExponent,x
.a843		a9 08		lda #$08			lda 	#NSTFloat
.a845		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a847		60		rts				rts
.a848						URCopyToMantissa:
.a848		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a84a		48		pha				pha
.a84b		64 01		stz $01				stz 	1
.a84d		a9 01		lda #$01			lda 	#1
.a84f		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a852		ad a4 d6	lda $d6a4			lda 	$D6A4
.a855		95 58		sta $58,x			sta 	NSMantissa0,x
.a857		ad a5 d6	lda $d6a5			lda 	$D6A5
.a85a		95 60		sta $60,x			sta 	NSMantissa1,x
.a85c		ad a4 d6	lda $d6a4			lda 	$D6A4
.a85f		95 68		sta $68,x			sta 	NSMantissa2,x
.a861		ad a5 d6	lda $d6a5			lda 	$D6A5
.a864		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a866		95 70		sta $70,x			sta 	NSMantissa3,x
.a868		68		pla				pla
.a869		85 01		sta $01				sta 	1
.a86b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a86c						Assemble_ora:
.a86c		20 00 83	jsr $8300		jsr	AssembleGroup1
>a86f		01					.byte $01
.a870						Assemble_and:
.a870		20 00 83	jsr $8300		jsr	AssembleGroup1
>a873		21					.byte $21
.a874						Assemble_eor:
.a874		20 00 83	jsr $8300		jsr	AssembleGroup1
>a877		41					.byte $41
.a878						Assemble_adc:
.a878		20 00 83	jsr $8300		jsr	AssembleGroup1
>a87b		61					.byte $61
.a87c						Assemble_sta:
.a87c		20 00 83	jsr $8300		jsr	AssembleGroup1
>a87f		81					.byte $81
.a880						Assemble_lda:
.a880		20 00 83	jsr $8300		jsr	AssembleGroup1
>a883		a1					.byte $a1
.a884						Assemble_cmp:
.a884		20 00 83	jsr $8300		jsr	AssembleGroup1
>a887		c1					.byte $c1
.a888						Assemble_sbc:
.a888		20 00 83	jsr $8300		jsr	AssembleGroup1
>a88b		e1					.byte $e1
.a88c						Assemble_asl:
.a88c		20 07 83	jsr $8307		jsr	AssembleGroup2
>a88f		02					.byte $02
>a890		75					.byte $75
.a891						Assemble_rol:
.a891		20 07 83	jsr $8307		jsr	AssembleGroup2
>a894		22					.byte $22
>a895		75					.byte $75
.a896						Assemble_lsr:
.a896		20 07 83	jsr $8307		jsr	AssembleGroup2
>a899		42					.byte $42
>a89a		75					.byte $75
.a89b						Assemble_ror:
.a89b		20 07 83	jsr $8307		jsr	AssembleGroup2
>a89e		62					.byte $62
>a89f		75					.byte $75
.a8a0						Assemble_stx:
.a8a0		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8a3		82					.byte $82
>a8a4		50					.byte $50
.a8a5						Assemble_ldx:
.a8a5		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8a8		a2					.byte $a2
>a8a9		d0					.byte $d0
.a8aa						Assemble_dec:
.a8aa		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8ad		c2					.byte $c2
>a8ae		55					.byte $55
.a8af						Assemble_inc:
.a8af		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8b2		e2					.byte $e2
>a8b3		55					.byte $55
.a8b4						Assemble_stz:
.a8b4		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8b7		60					.byte $60
>a8b8		44					.byte $44
.a8b9						Assemble_bit:
.a8b9		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8bc		20					.byte $20
>a8bd		55					.byte $55
.a8be						Assemble_sty:
.a8be		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8c1		80					.byte $80
>a8c2		54					.byte $54
.a8c3						Assemble_ldy:
.a8c3		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8c6		a0					.byte $a0
>a8c7		d5					.byte $d5
.a8c8						Assemble_cpy:
.a8c8		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8cb		c0					.byte $c0
>a8cc		d4					.byte $d4
.a8cd						Assemble_cpx:
.a8cd		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8d0		e0					.byte $e0
>a8d1		d0					.byte $d0
.a8d2						Assemble_tsb:
.a8d2		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8d5		00					.byte $00
>a8d6		50					.byte $50
.a8d7						Assemble_trb:
.a8d7		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8da		10					.byte $10
>a8db		50					.byte $50
.a8dc						Assemble_jsr:
.a8dc		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8df		14					.byte $14
>a8e0		10					.byte $10
.a8e1						Assemble_jmp:
.a8e1		20 07 83	jsr $8307		jsr	AssembleGroup2
>a8e4		40					.byte $40
>a8e5		10					.byte $10
.a8e6						Assemble_bpl:
.a8e6		20 58 83	jsr $8358		jsr	AssembleGroup3
>a8e9		10					.byte $10
.a8ea						Assemble_bmi:
.a8ea		20 58 83	jsr $8358		jsr	AssembleGroup3
>a8ed		30					.byte $30
.a8ee						Assemble_bvc:
.a8ee		20 58 83	jsr $8358		jsr	AssembleGroup3
>a8f1		50					.byte $50
.a8f2						Assemble_bvs:
.a8f2		20 58 83	jsr $8358		jsr	AssembleGroup3
>a8f5		70					.byte $70
.a8f6						Assemble_bcc:
.a8f6		20 58 83	jsr $8358		jsr	AssembleGroup3
>a8f9		90					.byte $90
.a8fa						Assemble_bcs:
.a8fa		20 58 83	jsr $8358		jsr	AssembleGroup3
>a8fd		b0					.byte $b0
.a8fe						Assemble_bne:
.a8fe		20 58 83	jsr $8358		jsr	AssembleGroup3
>a901		d0					.byte $d0
.a902						Assemble_beq:
.a902		20 58 83	jsr $8358		jsr	AssembleGroup3
>a905		f0					.byte $f0
.a906						Assemble_bra:
.a906		20 58 83	jsr $8358		jsr	AssembleGroup3
>a909		80					.byte $80
.a90a						Assemble_brk:
.a90a		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a90d		00					.byte $00
.a90e						Assemble_php:
.a90e		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a911		08					.byte $08
.a912						Assemble_clc:
.a912		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a915		18					.byte $18
.a916						Assemble_plp:
.a916		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a919		28					.byte $28
.a91a						Assemble_sec:
.a91a		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a91d		38					.byte $38
.a91e						Assemble_rti:
.a91e		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a921		40					.byte $40
.a922						Assemble_pha:
.a922		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a925		48					.byte $48
.a926						Assemble_cli:
.a926		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a929		58					.byte $58
.a92a						Assemble_phy:
.a92a		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a92d		5a					.byte $5a
.a92e						Assemble_rts:
.a92e		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a931		60					.byte $60
.a932						Assemble_pla:
.a932		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a935		68					.byte $68
.a936						Assemble_sei:
.a936		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a939		78					.byte $78
.a93a						Assemble_ply:
.a93a		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a93d		7a					.byte $7a
.a93e						Assemble_dey:
.a93e		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a941		88					.byte $88
.a942						Assemble_txa:
.a942		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a945		8a					.byte $8a
.a946						Assemble_tya:
.a946		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a949		98					.byte $98
.a94a						Assemble_txs:
.a94a		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a94d		9a					.byte $9a
.a94e						Assemble_tay:
.a94e		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a951		a8					.byte $a8
.a952						Assemble_tax:
.a952		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a955		aa					.byte $aa
.a956						Assemble_clv:
.a956		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a959		b8					.byte $b8
.a95a						Assemble_tsx:
.a95a		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a95d		ba					.byte $ba
.a95e						Assemble_iny:
.a95e		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a961		c8					.byte $c8
.a962						Assemble_dex:
.a962		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a965		ca					.byte $ca
.a966						Assemble_cld:
.a966		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a969		d8					.byte $d8
.a96a						Assemble_phx:
.a96a		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a96d		da					.byte $da
.a96e						Assemble_stp:
.a96e		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a971		db					.byte $db
.a972						Assemble_inx:
.a972		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a975		e8					.byte $e8
.a976						Assemble_nop:
.a976		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a979		ea					.byte $ea
.a97a						Assemble_sed:
.a97a		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a97d		f8					.byte $f8
.a97e						Assemble_plx:
.a97e		20 8c 83	jsr $838c		jsr	AssembleGroup4
>a981		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a982						DecimalScalarTable:
>a982		66 66 66 66				.dword $66666666 ; 0.1
>a986		de					.byte $de
>a987		1f 85 eb 51				.dword $51eb851f ; 0.01
>a98b		db					.byte $db
>a98c		4c 37 89 41				.dword $4189374c ; 0.001
>a990		d8					.byte $d8
>a991		ac 8b db 68				.dword $68db8bac ; 0.0001
>a995		d4					.byte $d4
>a996		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a99a		d1					.byte $d1
>a99b		83 de 1b 43				.dword $431bde83 ; 1e-06
>a99f		ce					.byte $ce
>a9a0		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a9a4		ca					.byte $ca
>a9a5		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a9a9		c7					.byte $c7
>a9aa		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a9ae		c4					.byte $c4
>a9af		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a9b3		c0					.byte $c0
>a9b4		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a9b8		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a9b9						SyntaxError:
.a9b9		a9 02		lda #$02		lda	#2
.a9bb		4c ba 97	jmp $97ba		jmp	ErrorHandler
.a9be						RangeError:
.a9be		a9 04		lda #$04		lda	#4
.a9c0		4c ba 97	jmp $97ba		jmp	ErrorHandler
.a9c3						TypeError:
.a9c3		a9 05		lda #$05		lda	#5
.a9c5		4c ba 97	jmp $97ba		jmp	ErrorHandler
.a9c8						ArgumentError:
.a9c8		a9 07		lda #$07		lda	#7
.a9ca		4c ba 97	jmp $97ba		jmp	ErrorHandler
.a9cd						NotDoneError:
.a9cd		a9 0c		lda #$0c		lda	#12
.a9cf		4c ba 97	jmp $97ba		jmp	ErrorHandler
.a9d2						ErrorText:
>a9d2		42 72 65 61 6b 00			.text	"Break",0
>a9d8		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a9e0		72 72 6f 72 00
>a9e5		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a9ed		20 62 79 20 7a 65 72 6f 00
>a9f6		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a9fe		61 6e 67 65 00
>aa03		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>aa0b		6d 61 74 63 68 00
>aa11		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>aa19		65 6d 6f 72 79 00
>aa1f		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>aa27		61 72 67 75 6d 65 6e 74 00
>aa30		53 74 6f 70 00				.text	"Stop",0
>aa35		53 74 72 69 6e 67 20 74			.text	"String too long",0
>aa3d		6f 6f 20 6c 6f 6e 67 00
>aa45		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>aa4d		6e 20 66 61 69 6c 65 64 00
>aa56		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>aa5e		61 74 61 00
>aa62		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>aa6a		65 6e 74 65 64 00
>aa70		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>aa78		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>aa84		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>aa8c		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>aa99		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>aaa1		74 68 6f 75 74 20 52 65 70 65 61 74 00
>aaae		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>aab6		68 6f 75 74 20 57 68 69 6c 65 00
>aac1		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>aac9		68 6f 75 74 20 46 6f 72 00
>aad2		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>aada		61 63 6b 20 66 75 6c 6c 00
>aae3		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>aaeb		75 63 74 75 72 65 00
>aaf2		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>aafa		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ab07		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ab0f		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ab1d		41 72 72 61 79 20 73 69			.text	"Array size",0
>ab25		7a 65 00
>ab28		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ab30		79 20 69 6e 64 65 78 00
>ab38		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>ab40		74 20 64 65 63 6c 61 72 65 64 00
>ab4b		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>ab53		20 66 6f 75 6e 64 00
>ab5a		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>ab62		65 72 72 6f 72 00
>ab68		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>ab70		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc65		09 09 32 36 2f 30 31 2f			.text 9,9,"26/01/23 32"
>dc6d		32 33 20 33 32

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.ab76						MemoryDeleteLine:
.ab76		20 95 ab	jsr $ab95			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ab79		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ab7b		a8		tay				tay
.ab7c						_MDDLLoop:
.ab7c		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ab7e		92 30		sta ($30)			sta 	(codePtr)
.ab80		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ab82		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ab84		d0 07		bne $ab8d			bne 	_MDLDLNext
.ab86		a5 31		lda $31				lda 	codePtr+1
.ab88		c5 3b		cmp $3b				cmp 	zTemp2+1
.ab8a		d0 01		bne $ab8d			bne 	_MDLDLNext
.ab8c						_MDDLExit:
.ab8c		60		rts				rts
.ab8d						_MDLDLNext:
.ab8d		e6 30		inc $30				inc 	codePtr						; next byte
.ab8f		d0 eb		bne $ab7c			bne 	_MDDLLoop
.ab91		e6 31		inc $31				inc 	codePtr+1
.ab93		80 e7		bra $ab7c			bra 	_MDDLLoop
.ab95						IMemoryFindEnd:
.ab95		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ab97		85 3a		sta $3a				sta 	0+zTemp2
.ab99		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ab9b		85 3b		sta $3b				sta 	1+zTemp2
.ab9d						_MDLFELoop:
.ab9d		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.ab9f		f0 0b		beq $abac			beq 	_MDLFEExit
.aba1		18		clc				clc
.aba2		65 3a		adc $3a				adc 	zTemp2
.aba4		85 3a		sta $3a				sta 	zTemp2
.aba6		90 f5		bcc $ab9d			bcc 	_MDLFELoop
.aba8		e6 3b		inc $3b				inc 	zTemp2+1
.abaa		80 f1		bra $ab9d			bra 	_MDLFELoop
.abac						_MDLFEExit:
.abac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.abad						MemoryInsertLine:
.abad		08		php				php
.abae		20 95 ab	jsr $ab95			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.abb1		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.abb3		1a		inc a				inc 	a
.abb4		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.abb6		b0 36		bcs $abee			bcs 	_MDLIError 					; no, fail.
.abb8		28		plp				plp 								; do at a specific point or the end ?
.abb9		90 08		bcc $abc3			bcc 	_MDLIFound 					; if specific point already set.
.abbb		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.abbd		85 30		sta $30				sta 	codePtr 					; end.
.abbf		a5 3b		lda $3b				lda 	zTemp2+1
.abc1		85 31		sta $31				sta 	codePtr+1
.abc3						_MDLIFound:
.abc3		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.abc6		a8		tay				tay
.abc7						_MDLIInsert:
.abc7		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.abc9		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.abcb		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.abcd		c5 3a		cmp $3a				cmp 	zTemp2
.abcf		d0 06		bne $abd7			bne 	_MDLINext
.abd1		a5 31		lda $31				lda 	codePtr+1
.abd3		c5 3b		cmp $3b				cmp 	zTemp2+1
.abd5		f0 0a		beq $abe1			beq 	_MDLIHaveSpace
.abd7						_MDLINext:
.abd7		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.abd9		d0 02		bne $abdd			bne 	_MDLINoBorrow
.abdb		c6 3b		dec $3b				dec 	zTemp2+1
.abdd						_MDLINoBorrow:
.abdd		c6 3a		dec $3a				dec 	zTemp2
.abdf		80 e6		bra $abc7			bra 	_MDLIInsert
.abe1						_MDLIHaveSpace:
.abe1		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.abe4		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.abe5						_MDLICopy:
.abe5		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.abe8		91 30		sta ($30),y			sta 	(codePtr),y
.abea		88		dey				dey
.abeb		10 f8		bpl $abe5			bpl 	_MDLICopy
.abed		60		rts				rts
.abee						_MDLIError:
.abee		a9 06		lda #$06		lda	#6
.abf0		4c ba 97	jmp $97ba		jmp	ErrorHandler
.abf3						MDLAppendLine:
.abf3		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.abf5		85 36		sta $36				sta 	zTemp0
.abf7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.abf9		85 38		sta $38				sta 	0+zTemp1
.abfb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.abfd		85 39		sta $39				sta 	1+zTemp1
.abff		b2 38		lda ($38)			lda 	(zTemp1)
.ac01		d0 0a		bne $ac0d			bne 	_MDLANoInitialise
.ac03		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac05		8d 96 07	sta $0796			sta 	0+AppendPointer
.ac08		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac0a		8d 97 07	sta $0797			sta 	1+AppendPointer
.ac0d						_MDLANoInitialise:
.ac0d		18		clc				clc
.ac0e		ad 96 07	lda $0796			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ac11		85 38		sta $38				sta 	zTemp1
.ac13		72 36		adc ($36)			adc 	(zTemp0)
.ac15		8d 96 07	sta $0796			sta 	AppendPointer
.ac18		ad 97 07	lda $0797			lda 	AppendPointer+1
.ac1b		85 39		sta $39				sta 	zTemp1+1
.ac1d		69 00		adc #$00			adc 	#0
.ac1f		8d 97 07	sta $0797			sta 	AppendPointer+1
.ac22		a0 00		ldy #$00			ldy 	#0
.ac24						_MDLACopy:
.ac24		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ac26		91 38		sta ($38),y			sta 	(zTemp1),y
.ac28		c8		iny				iny
.ac29		98		tya				tya
.ac2a		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ac2c		d0 f6		bne $ac24			bne 	_MDLACopy
.ac2e		a9 00		lda #$00			lda 	#0 							; end of program.
.ac30		91 38		sta ($38),y			sta 	(zTemp1),y
.ac32		60		rts				rts
.0796						AppendPointer:
>0796								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.ac33						MemoryNew:
.ac33		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac35		85 30		sta $30				sta 	codePtr
.ac37		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac39		85 31		sta $31				sta 	codePtr+1
.ac3b		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ac3d		92 30		sta ($30)			sta 	(codePtr)
.ac3f		60		rts				rts
.ac40						MemoryInline:
.ac40		98		tya				tya 								; put address into stack,x
.ac41		18		clc				clc  								; get the offset, add codePtr
.ac42		65 30		adc $30				adc 	codePtr
.ac44		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ac46		a5 31		lda $31				lda 	codePtr+1
.ac48		69 00		adc #$00			adc 	#0
.ac4a		95 60		sta $60,x			sta 	NSMantissa1,x
.ac4c		74 68		stz $68,x			stz 	NSMantissa2,x
.ac4e		74 70		stz $70,x			stz 	NSMantissa3,x
.ac50		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.ac51						MemorySearch:
.ac51		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ac53		86 37		stx $37				stx 	zTemp0+1
.ac55		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac57		85 30		sta $30				sta 	codePtr
.ac59		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac5b		85 31		sta $31				sta 	codePtr+1
.ac5d						_MTAXLoop:
.ac5d		b2 30		lda ($30)			lda 	(codePtr)
.ac5f		18		clc				clc
.ac60		f0 21		beq $ac83			beq 	_MTAXExit 					; reached end, exit with CC.
.ac62		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ac64		b1 30		lda ($30),y			lda 	(codePtr),y
.ac66		38		sec				sec
.ac67		e5 36		sbc $36				sbc 	zTemp0
.ac69		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ac6b		c8		iny				iny 								; do the MSB
.ac6c		b1 30		lda ($30),y			lda 	(codePtr),y
.ac6e		e5 37		sbc $37				sbc 	zTemp0+1
.ac70		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ac72		f0 0f		beq $ac83			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ac74		b0 0d		bcs $ac83			bcs 	_MTAXExit 					; current < required exit
.ac76		18		clc				clc
.ac77		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ac79		65 30		adc $30				adc 	codePtr
.ac7b		85 30		sta $30				sta 	codePtr
.ac7d		90 02		bcc $ac81			bcc 	_CREExit
.ac7f		e6 31		inc $31				inc 	codePtr+1 					; carry
.ac81						_CREExit:
.ac81		80 da		bra $ac5d			bra 	_MTAXLoop
.ac83						_MTAXExit:
.ac83		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.ac84						RectangleCommand:
.ac84		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.ac86		80 02		bra $ac8a			bra 	ShapeDrawCmd
.ac88						CircleCommand:
.ac88		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.ac8a						ShapeDrawCmd:
.ac8a		20 14 ad	jsr $ad14			jsr 	RunGraphicsCommand
.ac8d						ShapeDraw:
.ac8d		0d 99 07	ora $0799			ora 	gxFillSolid  				; adjust AXY for solid fill.
.ac90		4c 08 ad	jmp $ad08			jmp 	ExecuteGraphicCommand	 	; and complete
.ac93						SpriteCommand:
.ac93		a2 00		ldx #$00			ldx 	#0
.ac95		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get image number.
.ac98		5a		phy				phy
.ac99		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.ac9b		a6 58		ldx $58				ldx 	NSMantissa0
.ac9d		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.ac9f		b0 0d		bcs $acae			bcs 	_SCRange
.aca1		a0 ff		ldy #$ff			ldy 	#255
.aca3		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aca6		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.aca8		7a		ply				ply
.aca9		20 14 ad	jsr $ad14			jsr 	RunGraphicsCommand
.acac		80 5a		bra $ad08			bra 	ExecuteGraphicCommand
.acae						_SCRange:
.acae		4c be a9	jmp $a9be			jmp 	RangeError
.acb1						ImageCommand:
.acb1		a2 00		ldx #$00			ldx 	#0
.acb3		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get image number.
.acb6		20 14 ad	jsr $ad14			jsr 	RunGraphicsCommand
.acb9						ImageRunDraw:
.acb9		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.acbb		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.acbe		ad 9f 07	lda $079f			lda 	gxDrawScale
.acc1		0a		asl a				asl 	a
.acc2		0a		asl a				asl 	a
.acc3		0a		asl a				asl 	a
.acc4		a8		tay				tay
.acc5		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.acc7		a6 58		ldx $58				ldx 	NSMantissa0
.acc9		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.accc		60		rts				rts
.accd						TextCommand:
.accd		a2 00		ldx #$00			ldx 	#0
.accf		20 6c a6	jsr $a66c			jsr 	EvaluateString 				; get text
.acd2		20 14 ad	jsr $ad14			jsr 	RunGraphicsCommand
.acd5						TextRunDraw:
.acd5		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.acd7		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.acda		a0 00		ldy #$00			ldy 	#0
.acdc						_IRDLoop:
.acdc		a5 60		lda $60				lda 	NSMantissa1 				; access character
.acde		85 37		sta $37				sta 	zTemp0+1
.ace0		a5 58		lda $58				lda 	NSMantissa0
.ace2		85 36		sta $36				sta 	zTemp0
.ace4		b1 36		lda ($36),y			lda 	(zTemp0),y
.ace6		f0 13		beq $acfb			beq 	_IRDExit
.ace8		5a		phy				phy									; save string pos
.ace9		48		pha				pha 								; save char
.acea		ad 9f 07	lda $079f			lda 	gxDrawScale 				; get scale
.aced		0a		asl a				asl 	a
.acee		0a		asl a				asl 	a
.acef		0a		asl a				asl 	a
.acf0		a8		tay				tay
.acf1		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.acf3		fa		plx				plx 								; char to draw
.acf4		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.acf7		7a		ply				ply 								; restore string pos
.acf8		c8		iny				iny
.acf9		90 e1		bcc $acdc			bcc 	_IRDLoop 					; go back if no error.
.acfb						_IRDExit:
.acfb		60		rts				rts
.acfc						PlotCommand:
.acfc		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.acfe		20 14 ad	jsr $ad14			jsr 	RunGraphicsCommand
.ad01		80 05		bra $ad08			bra 	ExecuteGraphicCommand
.ad03						LineCommand:
.ad03		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.ad05		20 14 ad	jsr $ad14			jsr 	RunGraphicsCommand
.ad08						ExecuteGraphicCommand:
.ad08		0d 98 07	ora $0798			ora 	gxCommandID 				; make a full command
.ad0b		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; draw it and exit
.ad0e		b0 01		bcs $ad11			bcs 	_EGCError
.ad10		60		rts				rts
.ad11						_EGCError:
.ad11		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
.ad14						RunGraphicsCommand:
.ad14		8d 98 07	sta $0798			sta 	gxCommandID					; save TODO graphics command.
.ad17		68		pla				pla 								; pop handler address
.ad18		fa		plx				plx
.ad19		1a		inc a				inc 	a
.ad1a		d0 01		bne $ad1d			bne 	_RGINoCarry
.ad1c		e8		inx				inx
.ad1d						_RGINoCarry:
.ad1d		8d 9d 07	sta $079d			sta 	gxHandler
.ad20		8e 9e 07	stx $079e			stx 	gxHandler+1
.ad23						_RGICommandLoop:
.ad23		b1 30		lda ($30),y			lda 	(codePtr),y
.ad25		c8		iny				iny
.ad26		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.ad28		f0 53		beq $ad7d			beq 	_RGI_To
.ad2a		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.ad2c		f0 55		beq $ad83			beq 	_RGI_Here
.ad2e		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.ad30		f0 3d		beq $ad6f			beq 	_RGI_Exit
.ad32		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.ad34		f0 39		beq $ad6f			beq 	_RGI_Exit
.ad36		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.ad38		f0 3e		beq $ad78			beq 	_RGI_Frame
.ad3a		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.ad3c		f0 33		beq $ad71			beq 	_RGI_Solid
.ad3e		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.ad40		f0 4b		beq $ad8d			beq 	_RGI_By
.ad42		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.ad44		f0 17		beq $ad5d			beq 	_RGI_Move2
.ad46		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.ad48		f0 62		beq $adac			beq 	_RGI_Dim
.ad4a		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.ad4c		f0 74		beq $adc2			beq 	_RGI_Colour
.ad4e		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.ad50		f0 70		beq $adc2			beq 	_RGI_Colour
.ad52		ae 98 07	ldx $0798			ldx 	gxCommandID
.ad55		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.ad57		d0 03		bne $ad5c			bne 	_RGI_Move 					; move
.ad59		4c ea ad	jmp $adea			jmp		_RGI_SpriteInstructions
.ad5c						_RGI_Move:
.ad5c		88		dey				dey 								; unpick get.
.ad5d						_RGI_Move2:
.ad5d		20 10 ae	jsr $ae10			jsr 	GCGetCoordinatePair 		; move to here
.ad60		20 37 ae	jsr $ae37			jsr 	GCCopyPairToStore 			; save
.ad63		5a		phy				phy
.ad64		20 2d ae	jsr $ae2d			jsr 	GCLoadAXY 					; load in
.ad67		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.ad69		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad6c		7a		ply				ply
.ad6d		80 b4		bra $ad23			bra 	_RGICommandLoop 			; and go round
.ad6f						_RGI_Exit:
.ad6f		88		dey				dey 								; unpick : / EOL
.ad70		60		rts				rts
.ad71						_RGI_Solid:
.ad71		a9 02		lda #$02			lda 	#2
.ad73		8d 99 07	sta $0799			sta 	gxFillSolid
.ad76		80 ab		bra $ad23			bra 	_RGICommandLoop
.ad78						_RGI_Frame:
.ad78		9c 99 07	stz $0799			stz 	gxFillSolid
.ad7b		80 a6		bra $ad23			bra 	_RGICommandLoop
.ad7d						_RGI_To:
.ad7d		20 10 ae	jsr $ae10			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.ad80		20 37 ae	jsr $ae37			jsr 	GCCopyPairToStore
.ad83						_RGI_Here:
.ad83		5a		phy				phy
.ad84		20 2d ae	jsr $ae2d			jsr 	GCLoadAXY 					; load it into AXY
.ad87		20 e7 ad	jsr $ade7			jsr 	_RGICallHandler 			; go do whatever it is.
.ad8a		7a		ply				ply
.ad8b		80 96		bra $ad23			bra 	_RGICommandLoop 			; and go round
.ad8d						_RGI_By:
.ad8d		20 1d ae	jsr $ae1d			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.ad90		18		clc				clc
.ad91		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ad93		6d 9a 07	adc $079a			adc 	gxXPos
.ad96		8d 9a 07	sta $079a			sta 	gxXPos
.ad99		a5 61		lda $61				lda 	NSMantissa1+1
.ad9b		6d 9b 07	adc $079b			adc 	gxXPos+1
.ad9e		8d 9b 07	sta $079b			sta 	gxXPos+1
.ada1		a5 5a		lda $5a				lda 	NSMantissa0+2
.ada3		18		clc				clc
.ada4		6d 9c 07	adc $079c			adc 	gxYPos
.ada7		8d 9c 07	sta $079c			sta 	gxYPos
.adaa		80 d7		bra $ad83			bra 	_RGI_Here
.adac						_RGI_Dim:
.adac		a2 01		ldx #$01			ldx	 	#1
.adae		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.adb1		a5 59		lda $59				lda 	NSMantissa0+1
.adb3		c9 00		cmp #$00			cmp 	#0
.adb5		f0 2d		beq $ade4			beq 	_RGIRange
.adb7		c9 09		cmp #$09			cmp 	#8+1
.adb9		b0 29		bcs $ade4			bcs		_RGIRange
.adbb		3a		dec a				dec 	a
.adbc		8d 9f 07	sta $079f			sta 	gxDrawScale
.adbf		4c 23 ad	jmp $ad23			jmp 	_RGICommandLoop
.adc2						_RGI_Colour:
.adc2		a2 01		ldx #$01			ldx 	#1 							; colour
.adc4		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.adc7		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.adc9		20 14 a7	jsr $a714			jsr 	NSMSetZero
.adcc		b1 30		lda ($30),y			lda 	(codePtr),y
.adce		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.add0		d0 04		bne $add6			bne 	_RGICDefaultMode
.add2		c8		iny				iny
.add3		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.add6						_RGICDefaultMode:
.add6		5a		phy				phy
.add7		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.add9		a6 59		ldx $59				ldx 	NSMantissa0+1
.addb		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.addd		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ade0		7a		ply				ply
.ade1		4c 23 ad	jmp $ad23			jmp 	_RGICommandLoop 			; and go round
.ade4						_RGIRange:
.ade4		4c be a9	jmp $a9be			jmp 	RangeError
.ade7						_RGICallHandler:
.ade7		6c 9d 07	jmp ($079d)			jmp 	(gxHandler)
.adea						_RGI_SpriteInstructions:
.adea		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.adec		f0 07		beq $adf5			beq 	_RGISpriteOff
.adee		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.adf0		f0 13		beq $ae05			beq 	_RGISetImage
.adf2		4c 5c ad	jmp $ad5c			jmp 	_RGI_Move
.adf5						_RGISpriteOff:
.adf5		5a		phy				phy
.adf6		a0 01		ldy #$01			ldy 	#1
.adf8		a2 00		ldx #$00			ldx 	#0
.adfa						_RGIDoCommandLoop:
.adfa		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.adfc		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.adff		7a		ply				ply
.ae00		b0 e2		bcs $ade4			bcs 	_RGIRange
.ae02		4c 23 ad	jmp $ad23			jmp 	_RGICommandLoop
.ae05						_RGISetImage:
.ae05		a2 01		ldx #$01			ldx 	#1
.ae07		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger
.ae0a		5a		phy				phy
.ae0b		aa		tax				tax
.ae0c		a0 00		ldy #$00			ldy 	#0
.ae0e		80 ea		bra $adfa			bra 	_RGIDoCommandLoop
.ae10						GCGetCoordinatePair:
.ae10		a2 01		ldx #$01			ldx 	#1
.ae12		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.ae15		20 a9 97	jsr $97a9			jsr 	CheckComma
.ae18		e8		inx				inx
.ae19		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.ae1c		60		rts				rts
.ae1d						GCSignedCoordinatePair:
.ae1d		a2 01		ldx #$01			ldx 	#1
.ae1f		20 9e a6	jsr $a69e			jsr 	Evaluate16BitIntegerSigned
.ae22		20 a9 97	jsr $97a9			jsr 	CheckComma
.ae25		e8		inx				inx
.ae26		20 9e a6	jsr $a69e			jsr 	Evaluate16BitIntegerSigned
.ae29		60		rts				rts
.ae2a						_GCCPRange:
.ae2a		4c be a9	jmp $a9be			jmp 	RangeError
.ae2d						GCLoadAXY:
.ae2d		ad 9b 07	lda $079b			lda 	gxXPos+1
.ae30		ae 9a 07	ldx $079a			ldx 	gxXPos
.ae33		ac 9c 07	ldy $079c			ldy 	gxYPos
.ae36		60		rts				rts
.ae37						GCCopyPairToStore:
.ae37		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ae39		8d 9a 07	sta $079a			sta 	gxXPos
.ae3c		a5 61		lda $61				lda 	NSMantissa1+1
.ae3e		8d 9b 07	sta $079b			sta 	gxXPos+1
.ae41		a5 5a		lda $5a				lda 	NSMantissa0+2
.ae43		8d 9c 07	sta $079c			sta 	gxYPos
.ae46		60		rts				rts
.0798						gxCommandID:
>0798								.fill 	1
.0799						gxFillSolid:
>0799								.fill 	1
.079a						gxXPos:
>079a								.fill 	2
.079c						gxYPos:
>079c								.fill 	1
.079d						gxHandler:
>079d								.fill 	2
.079f						gxDrawScale:
>079f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.ae47						BitmapCtrl:
.ae47		b1 30		lda ($30),y			lda 	(codePtr),y
.ae49		c8		iny				iny
.ae4a		a2 01		ldx #$01			ldx 	#1
.ae4c		c9 cc		cmp #$cc			cmp 	#KWD_ON
.ae4e		f0 11		beq $ae61			beq 	BitmapSwitch
.ae50		ca		dex				dex
.ae51		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.ae53		f0 0c		beq $ae61			beq 	BitmapSwitch
.ae55		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get the colour
.ae58		5a		phy				phy
.ae59		aa		tax				tax
.ae5a		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.ae5c		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae5f		7a		ply				ply
.ae60		60		rts				rts
.ae61						BitmapSwitch:
.ae61		5a		phy				phy
.ae62		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.ae64		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.ae66		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae69		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.ae6b		a0 00		ldy #$00			ldy 	#0
.ae6d		a2 ff		ldx #$ff			ldx 	#$FF
.ae6f		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae72		9c 99 07	stz $0799			stz 	gxFillSolid
.ae75		9c 9a 07	stz $079a			stz 	gxXPos
.ae78		9c 9b 07	stz $079b			stz 	gxXPos+1
.ae7b		9c 9c 07	stz $079c			stz 	gxYPos
.ae7e		9c 9f 07	stz $079f			stz 	gxDrawScale
.ae81		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.ae83		a2 00		ldx #$00			ldx 	#0
.ae85		a0 00		ldy #$00			ldy 	#0
.ae87		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae8a		7a		ply				ply
.ae8b		60		rts				rts
.ae8c						SpritesCtrl:
.ae8c		b1 30		lda ($30),y			lda 	(codePtr),y
.ae8e		c8		iny				iny
.ae8f		a2 01		ldx #$01			ldx 	#1
.ae91		c9 cc		cmp #$cc			cmp 	#KWD_ON
.ae93		f0 08		beq $ae9d			beq 	SpriteSwitch
.ae95		ca		dex				dex
.ae96		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.ae98		f0 03		beq $ae9d			beq 	SpriteSwitch
.ae9a		4c b9 a9	jmp $a9b9			jmp 	SyntaxError
.ae9d						SpriteSwitch:
.ae9d		5a		phy				phy
.ae9e		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.aea0		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.aea2		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aea5		7a		ply				ply
.aea6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.aea7						GfxCommand:
.aea7		a2 00		ldx #$00			ldx 	#0
.aea9		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; command
.aeac		20 a9 97	jsr $97a9			jsr 	CheckComma
.aeaf		e8		inx				inx
.aeb0		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; X
.aeb3		20 a9 97	jsr $97a9			jsr 	CheckComma
.aeb6		e8		inx				inx
.aeb7		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; Y
.aeba		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.aebc		4a		lsr a				lsr 	a
.aebd		d0 12		bne $aed1			bne 	_GfxError
.aebf		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.aec1		b0 0e		bcs $aed1			bcs 	_GfxError 					; bit 7 should have been zero
.aec3		5a		phy				phy 								; save pos
.aec4		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.aec6		a6 59		ldx $59				ldx 	NSMantissa0+1
.aec8		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aeca		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aecd		b0 02		bcs $aed1			bcs 	_GfxError
.aecf		7a		ply				ply 								; restore pos and exit.
.aed0		60		rts				rts
.aed1						_GfxError:
.aed1		4c be a9	jmp $a9be			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.aed4						UnaryHit:
.aed4		fa		plx				plx
.aed5		a9 36		lda #$36			lda 	#zTemp0
.aed7		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get sprite number 0
.aeda		20 a9 97	jsr $97a9			jsr 	CheckComma
.aedd		e8		inx				inx
.aede		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get sprite number 1
.aee1		20 a1 97	jsr $97a1			jsr		CheckRightBracket
.aee4		ca		dex				dex 								; fix back up again.
.aee5		da		phx				phx 								; save X/Y
.aee6		5a		phy				phy
.aee7		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.aee9		b5 58		lda $58,x			lda 	NSMantissa0,x
.aeeb		aa		tax				tax
.aeec		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.aeee		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; calculate result
.aef1		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.aef2		7a		ply				ply 								; restore XY
.aef3		fa		plx				plx
.aef4		20 16 a7	jsr $a716			jsr 	NSMSetByte 					; return the hit result
.aef7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.aef8						PaletteCommand:
.aef8		a2 00		ldx #$00			ldx 	#0
.aefa		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; colour
.aefd		20 a9 97	jsr $97a9			jsr 	CheckComma
.af00		e8		inx				inx
.af01		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; r
.af04		20 a9 97	jsr $97a9			jsr 	CheckComma
.af07		e8		inx				inx
.af08		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; g
.af0b		20 a9 97	jsr $97a9			jsr 	CheckComma
.af0e		e8		inx				inx
.af0f		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; b
.af12		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.af14		85 36		sta $36				sta 	zTemp0
.af16		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.af18		85 37		sta $37				sta 	zTemp0+1
.af1a		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.af1c		26 37		rol $37				rol	 	zTemp0+1
.af1e		06 36		asl $36				asl 	zTemp0
.af20		26 37		rol $37				rol	 	zTemp0+1
.af22		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.af24		85 01		sta $01				sta 	1
.af26		5a		phy				phy
.af27		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.af29		92 36		sta ($36)			sta 	(zTemp0)
.af2b		a0 01		ldy #$01			ldy 	#1
.af2d		a5 5a		lda $5a				lda 	NSMantissa0+2
.af2f		91 36		sta ($36),y			sta 	(zTemp0),y
.af31		a5 59		lda $59				lda 	NSMantissa0+1
.af33		c8		iny				iny
.af34		91 36		sta ($36),y			sta 	(zTemp0),y
.af36		7a		ply				ply
.af37		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.af38						ClearScreen:
.af38		5a		phy				phy
.af39		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.af3b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.af3e		7a		ply				ply
.af3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.af40						PingCommand:
.af40		5a		phy				phy 								; save pos
.af41		a9 01		lda #$01			lda 	#1 						; push channel.
.af43		48		pha				pha
.af44		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.af46		a2 06		ldx #$06			ldx 	#6 						; length
.af48		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af4a		80 24		bra $af70			bra 	SoundEffectCommand
.af4c						ZapCommand:
.af4c		5a		phy				phy 								; save pos
.af4d		a9 01		lda #$01			lda 	#1 						; push channel.
.af4f		48		pha				pha
.af50		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.af52		a2 0a		ldx #$0a			ldx 	#10 						; length
.af54		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.af56		80 18		bra $af70			bra 	SoundEffectCommand
.af58						ShootCommand:
.af58		5a		phy				phy 								; save pos
.af59		a9 03		lda #$03			lda 	#3 						; push channel.
.af5b		48		pha				pha
.af5c		a9 20		lda #$20			lda 	#32 						; pitch LSB
.af5e		a2 04		ldx #$04			ldx 	#4 						; length
.af60		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af62		80 0c		bra $af70			bra 	SoundEffectCommand
.af64						Explode:
.af64		5a		phy				phy 								; save pos
.af65		a9 03		lda #$03			lda 	#3 						; push channel.
.af67		48		pha				pha
.af68		a9 50		lda #$50			lda 	#80 						; pitch LSB
.af6a		a2 0a		ldx #$0a			ldx 	#10 						; length
.af6c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af6e		80 00		bra $af70			bra 	SoundEffectCommand
.af70						SoundEffectCommand:
.af70		8d a0 07	sta $07a0			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.af73		9c a1 07	stz $07a1			stz 	SoundCommandBlock+1
.af76		a9 0f		lda #$0f			lda 	#15
.af78		8d a2 07	sta $07a2			sta 	SoundCommandBlock+2
.af7b		8e a3 07	stx $07a3			stx 	SoundCommandBlock+3
.af7e		8c a4 07	sty $07a4			sty 	SoundCommandBlock+4
.af81		9c a5 07	stz $07a5			stz 	SoundCommandBlock+5
.af84		68		pla				pla
.af85		09 10		ora #$10			ora 	#$10  						; execute command $11
.af87		a2 a0		ldx #$a0			ldx 	#(SoundCommandBlock & $FF)
.af89		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.af8b		20 75 80	jsr $8075			jsr 	SNDCommand
.af8e		7a		ply				ply
.af8f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.af90						UnaryPlaying:
.af90		fa		plx				plx
.af91		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; get channel #
.af94		48		pha				pha
.af95		20 a1 97	jsr $97a1			jsr		CheckRightBracket
.af98		68		pla				pla
.af99		c9 04		cmp #$04			cmp 	#4
.af9b		b0 0c		bcs $afa9			bcs 	_UPNotPlaying
.af9d		09 20		ora #$20			ora 	#$20 						; query playing ?
.af9f		20 75 80	jsr $8075			jsr 	SNDCommand
.afa2		c9 00		cmp #$00			cmp 	#0
.afa4		f0 03		beq $afa9			beq 	_UPNotPlaying
.afa6		4c 27 98	jmp $9827			jmp 	ReturnTrue
.afa9						_UPNotPlaying:
.afa9		4c 32 98	jmp $9832			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.afac						SoundCommand:
.afac		b1 30		lda ($30),y			lda 	(codePtr),y
.afae		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.afb0		d0 09		bne $afbb			bne 	_SNDMain
.afb2		c8		iny				iny 								; skip OFF
.afb3		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.afb5		5a		phy				phy
.afb6		20 75 80	jsr $8075			jsr 	SNDCommand
.afb9		7a		ply				ply
.afba		60		rts				rts
.afbb						_SNDMain:
.afbb		a2 00		ldx #$00			ldx 	#0
.afbd		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; channel
.afc0		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.afc2		b0 4b		bcs $b00f			bcs 	_SndError
.afc4		e8		inx				inx 								; do the rest in slot 1.
.afc5		20 a9 97	jsr $97a9			jsr 	CheckComma
.afc8		20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; Pitch
.afcb		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.afcd		c9 10		cmp #$10			cmp 	#16
.afcf		b0 3e		bcs $b00f			bcs 	_SndError
.afd1		8d a1 07	sta $07a1			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.afd4		b5 58		lda $58,x			lda 	NSMantissa0,x
.afd6		8d a0 07	sta $07a0			sta 	SoundCommandBlock
.afd9		20 a9 97	jsr $97a9			jsr 	CheckComma
.afdc		20 af a6	jsr $a6af			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.afdf		8d a3 07	sta $07a3			sta 	SoundCommandBlock+3
.afe2		a9 0f		lda #$0f			lda 	#15
.afe4		8d a2 07	sta $07a2			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.afe7		9c a4 07	stz $07a4			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.afea		9c a5 07	stz $07a5			stz 	SoundCommandBlock+5
.afed		b1 30		lda ($30),y			lda 	(codePtr),y
.afef		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.aff1		d0 0e		bne $b001			bne 	_SNDPlay
.aff3		c8		iny				iny
.aff4		20 9e a6	jsr $a69e			jsr 	Evaluate16BitIntegerSigned 	; Slide
.aff7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.aff9		8d a4 07	sta $07a4			sta 	SoundCommandBlock+4
.affc		b5 60		lda $60,x			lda 	NSMantissa1,x
.affe		8d a5 07	sta $07a5			sta 	SoundCommandBlock+5
.b001						_SNDPlay:
.b001		5a		phy				phy
.b002		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b004		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b006		a2 a0		ldx #$a0			ldx 	#(SoundCommandBlock & $FF)
.b008		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b00a		20 75 80	jsr $8075			jsr 	SNDCommand
.b00d		7a		ply				ply
.b00e		60		rts				rts
.b00f						_SndError:
.b00f		4c be a9	jmp $a9be			jmp 	RangeError
.07a0						SoundCommandBlock:
>07a0								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b012						StackPushByte:
.b012		48		pha				pha 								; save byte on stack
.b013		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b015		d0 08		bne $b01f			bne 	_SPBNoBorrow
.b017		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b019		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b01b		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b01d		90 06		bcc $b025			bcc 	_SPBMemory
.b01f						_SPBNoBorrow:
.b01f		c6 34		dec $34				dec 	basicStack
.b021		68		pla				pla 								; get back and write
.b022		92 34		sta ($34)			sta 	(basicStack)
.b024		60		rts				rts
.b025						_SPBMemory:
.b025		a9 12		lda #$12		lda	#18
.b027		4c ba 97	jmp $97ba		jmp	ErrorHandler
.b02a						StackPopByte:
.b02a		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b02c		e6 34		inc $34				inc 	basicStack
.b02e		d0 02		bne $b032			bne 	_SPBNoCarry
.b030		e6 35		inc $35				inc 	basicStack+1
.b032						_SPBNoCarry:
.b032		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b033						StackOpen:
.b033		48		pha				pha 								; save frame byte
.b034		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b036		0a		asl a				asl 	a 							; claim twice this for storage
.b037		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b039		38		sec				sec 								; so basically subtracting from
.b03a		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b03c		85 34		sta $34				sta 	basicStack
.b03e		b0 09		bcs $b049			bcs 	_SONoBorrow
>b040		db						.byte 	$DB 						; causes a break in the emulator
.b041		c6 35		dec $35				dec 	basicStack+1
.b043		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b045		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b047		90 04		bcc $b04d			bcc 	_SOMemory
.b049						_SONoBorrow:
.b049		68		pla				pla 								; get marker back and write at TOS
.b04a		92 34		sta ($34)			sta 	(basicStack)
.b04c		60		rts				rts
.b04d						_SOMemory:
.b04d		a9 12		lda #$12		lda	#18
.b04f		4c ba 97	jmp $97ba		jmp	ErrorHandler
.b052						StackClose:
.b052		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b054		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b056		0a		asl a				asl 	a 							; claim twice this.
.b057		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b059		85 34		sta $34				sta 	basicStack
.b05b		90 02		bcc $b05f			bcc 	_SCExit
.b05d		e6 35		inc $35				inc 	basicStack+1
.b05f						_SCExit:
.b05f		60		rts				rts
.b060						StackCheckFrame:
.b060		48		pha				pha
.b061						_StackRemoveLocals:
.b061		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b063		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b065		b0 05		bcs $b06c			bcs 	_SCNoLocal
.b067		20 84 90	jsr $9084			jsr 	LocalPopValue 				; restore the local value
.b06a		80 f5		bra $b061			bra 	_StackRemoveLocals 			; gr round again
.b06c						_SCNoLocal:
.b06c		68		pla				pla 								; get the frame check.
.b06d		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b06f		29 f0		and #$f0			and 	#$F0 						; check type bits
.b071		d0 01		bne $b074			bne 	_SCFError 					; different, we have structures mixed up
.b073		60		rts				rts
.b074						_SCFError:
.b074		8a		txa				txa 								; report error X
.b075		4c ba 97	jmp $97ba			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b078						STKSaveCodePosition:
.b078		5a		phy				phy
.b079		98		tya				tya 								; save Y
.b07a		a0 05		ldy #$05			ldy 	#5
.b07c		91 34		sta ($34),y			sta 	(basicStack),y
.b07e		88		dey				dey 								; save Code Pointer
.b07f						_STKSaveLoop:
.b07f		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b082		91 34		sta ($34),y			sta 	(basicStack),y
.b084		88		dey				dey
.b085		d0 f8		bne $b07f			bne 	_STKSaveLoop
.b087		7a		ply				ply
.b088		60		rts				rts
.b089						STKLoadCodePosition:
.b089		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b08b						_STKLoadLoop:
.b08b		b1 34		lda ($34),y			lda 	(basicStack),y
.b08d		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b090		c8		iny				iny
.b091		c0 05		cpy #$05			cpy 	#5
.b093		d0 f6		bne $b08b			bne 	_STKLoadLoop
.b095		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b097		a8		tay				tay
.b098		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b099						StackReset:
.b099		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b09b		85 34		sta $34				sta 	0+basicStack
.b09d		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b09f		85 35		sta $35				sta 	1+basicStack
.b0a1		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b0a3		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b0a5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b0a6						StringConcrete:
.b0a6		5a		phy				phy 								; save position on stack
.b0a7		20 f4 a2	jsr $a2f4			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b0aa		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b0ac		85 38		sta $38				sta 	zTemp1
.b0ae		b5 60		lda $60,x			lda 	NSMantissa1,x
.b0b0		85 39		sta $39				sta 	zTemp1+1
.b0b2		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b0b4						_SALength:
.b0b4		c8		iny				iny
.b0b5		b1 38		lda ($38),y			lda 	(zTemp1),y
.b0b7		d0 fb		bne $b0b4			bne 	_SALength
.b0b9		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b0bb		b0 3d		bcs $b0fa			bcs 	_SALengthError
.b0bd		98		tya				tya 				 				; length of the new string
.b0be		18		clc				clc
.b0bf		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b0c1		90 02		bcc $b0c5			bcc 	_SAHaveLength
.b0c3		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b0c5						_SAHaveLength:
.b0c5		48		pha				pha 								; save length.
.b0c6		38		sec				sec
.b0c7		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b0c9		6d 0a 04	adc $040a			adc 	stringMemory
.b0cc		8d 0a 04	sta $040a			sta 	stringMemory
.b0cf		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b0d1		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b0d3		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b0d5		6d 0b 04	adc $040b			adc 	stringMemory+1
.b0d8		8d 0b 04	sta $040b			sta 	stringMemory+1
.b0db		85 3b		sta $3b				sta 	zTemp2+1
.b0dd		95 60		sta $60,x			sta 	NSMantissa1,x
.b0df		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b0e0		38		sec				sec
.b0e1		e9 03		sbc #$03			sbc 	#3
.b0e3		92 3a		sta ($3a)			sta 	(zTemp2)
.b0e5		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b0e7		a0 01		ldy #$01			ldy 	#1
.b0e9		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b0eb						_SACopyNewString:
.b0eb		a0 00		ldy #$00			ldy 	#0
.b0ed						_SACopyNSLoop:
.b0ed		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b0ef		c8		iny				iny 								; write two on in string storage
.b0f0		c8		iny				iny
.b0f1		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b0f3		88		dey				dey 								; this makes it one one.
.b0f4		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b0f6		d0 f5		bne $b0ed			bne 	_SACopyNSLoop
.b0f8		7a		ply				ply
.b0f9		60		rts				rts
.b0fa						_SALengthError:
.b0fa		a9 09		lda #$09		lda	#9
.b0fc		4c ba 97	jmp $97ba		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b0ff						StringSystemInitialise:
.b0ff		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b101		8d 0a 04	sta $040a			sta 	0+stringMemory
.b104		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b106		8d 0b 04	sta $040b			sta 	1+stringMemory
.b109		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b10c		60		rts				rts
.b10d						StringSpaceInitialise:
.b10d		20 f4 a2	jsr $a2f4			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b110		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b112		8d 0c 04	sta $040c			sta 	stringInitialised
.b115		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b118		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b11b		ad 0b 04	lda $040b			lda 	stringMemory+1
.b11e		3a		dec a				dec 	a
.b11f		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b122		60		rts				rts
.b123						StringTempAllocate:
.b123		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b125		b0 30		bcs $b157			bcs 	_STALength
.b127		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b12a		30 05		bmi $b131			bmi 	_STAAllocate
.b12c		48		pha				pha 								; save value to subtract.
.b12d		20 0d b1	jsr $b10d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b130		68		pla				pla 								; restore it
.b131						_STAAllocate:
.b131		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b133		18		clc				clc  								; deliberate allows one more
.b134		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b137		8d 0d 04	sta $040d			sta 	stringTempPointer
.b13a		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b13c		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b13e		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b141		69 ff		adc #$ff			adc 	#$FF
.b143		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b146		85 3d		sta $3d				sta 	zsTemp+1
.b148		95 60		sta $60,x			sta 	NSMantissa1,x
.b14a		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b14c		74 70		stz $70,x			stz 	NSMantissa3,x
.b14e		a9 10		lda #$10			lda 	#NSTString
.b150		95 50		sta $50,x			sta 	NSStatus,x
.b152		a9 00		lda #$00			lda 	#0 							; clear the target string
.b154		92 3c		sta ($3c)			sta 	(zsTemp)
.b156		60		rts				rts
.b157						_STALength:
.b157		a9 09		lda #$09		lda	#9
.b159		4c ba 97	jmp $97ba		jmp	ErrorHandler
.b15c						StringTempWrite:
.b15c		48		pha				pha
.b15d		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b15f		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b161		d0 02		bne $b165			bne 	_STWNoCarry
.b163		e6 3d		inc $3d				inc 	zsTemp+1
.b165						_STWNoCarry:
.b165		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b167		92 3c		sta ($3c)			sta 	(zsTemp)
.b169		68		pla				pla
.b16a		60		rts				rts

;******  Return to file: _basic.asm

.b16b						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad a8 07	lda $07a8			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c a7 07	sty $07a7			sty 	EXTColumn
.c02d	a02d	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee a6 07	inc $07a6			inc 	EXTRow  					; bump row
.c035	a035	9c a7 07	stz $07a7			stz 	EXTColumn 					; back to column 0
.c038	a038	ad a6 07	lda $07a6			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd aa 07	cmp $07aa			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d a9 07	adc $07a9			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce a7 07	dec $07a7			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c a7 07	stz $07a7			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce a6 07	dec $07a6			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad a6 07	lda $07a6			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce a6 07	dec $07a6			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed a9 07	sbc $07a9			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c a7 07	sty $07a7			sty 	EXTColumn
.c08c	a08c	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c a7 07	sty $07a7			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad aa 07	lda $07aa			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd a6 07	cmp $07a6			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee a6 07	inc $07a6			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d a9 07	adc $07a9			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad a7 07	lda $07a7			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d a7 07	sta $07a7			sta 	EXTColumn
.c0c9	a0c9	cd a9 07	cmp $07a9			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce a7 07	dec $07a7			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d a8 07	and $07a8			and 	EXTTextColour 				; mask out old.
.c135	a135	8d a8 07	sta $07a8			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d a8 07	ora $07a8			ora 	EXTTextColour
.c13c	a13c	8d a8 07	sta $07a8			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad a8 07	lda $07a8			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad a8 07	lda $07a8			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c a6 07	stz $07a6			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c a7 07	stz $07a7			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad a7 07	lda $07a7			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad a6 07	lda $07a6			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 8e 81	jsr $818e			jsr 	KNLGetSingleCharacter 		; get one single character
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad a7 07	lda $07a7			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc a7 07	cpy $07a7			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad a9 07	lda $07a9			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07a6						EXTRow:
>07a6								.fill 	1
.07a7						EXTColumn:
>07a7								.fill 	1
.07a8						EXTTextColour:
>07a8								.fill 	1
.07a9						EXTScreenWidth:
>07a9								.fill 	1
.07aa						EXTScreenHeight:
>07aa								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d a8 07	sta $07a8			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d a9 07	sta $07a9			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d aa 07	sta $07aa			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad a6 07	lda $07a6			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07ab						gxCurrentX:
>07ab								.fill 	2
.07ad						gxCurrentY:
>07ad								.fill 	2
.07af						gxLastX:
>07af								.fill 	2
.07b1						gxLastY:
>07b1								.fill 	2
.07b3						gxX0:
>07b3								.fill 	2
.07b5						gxY0:
>07b5								.fill 	2
.07b7						gxX1:
>07b7								.fill 	2
.07b9						gxY1:
>07b9								.fill 	2
.07bb						gxSpritesOn:
>07bb								.fill 	1
.07bc						gxBitmapsOn:
>07bc								.fill 	1
.07bd						gxBasePage:
>07bd								.fill 	1
.07be						gxSpritePage:
>07be								.fill 	1
.07bf						gxHeight:
>07bf								.fill 	1
.07c0						gxMode:
>07c0								.fill 	1
.07c1						gxColour:
>07c1								.fill 	1
.07c2						gxEORValue:
>07c2								.fill 	1
.07c3						gxANDValue:
>07c3								.fill 	1
.07c4						gxOriginalLUTValue:
>07c4								.fill 	1
.07c5						gxOffset:
>07c5								.fill 	1
.07c6						GSCurrentSpriteID:
>07c6								.fill 	1
.07c7						GSCurrentSpriteAddr:
>07c7								.fill 	2
.07c9						gxSpriteOffsetBase:
>07c9								.fill 	2
.07cb						gxSpriteLow:
>07cb								.fill 	64
.080b						gxSpriteHigh:
>080b								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd ab 07	lda $07ab,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d af 07	sta $07af,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d ad 07	sta $07ad			sta 	gxCurrentY
.c7e7	a7e7	9c ae 07	stz $07ae			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d ab 07	sta $07ab			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d ac 07	sta $07ac			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad ac 07	lda $07ac			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad ab 07	lda $07ab			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad ad 07	lda $07ad			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd bf 07	cmp $07bf			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd ab 07	lda $07ab,x			lda 	gxCurrentX,x
.c819	a819	9d b3 07	sta $07b3,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 4e 08	sta $084e			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 4f 08	stz $084f			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 4c 08	lda $084c			lda 	gxxCentre					; while x <= y
.c848	a848	cd 4d 08	cmp $084d			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 4d 08	lda $084d			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 4c 08	lda $084c			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 4d 08	ldx $084d			ldx	 	gxYCentre
.c875	a875	8d 4d 08	sta $084d			sta 	gxYCentre
.c878	a878	8e 4c 08	stx $084c			stx 	gxxCentre
.c87b	a87b	ad 4f 08	lda $084f			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 4f 08	sta $084f			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 4e 08	lda $084e	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 4f 08	lda $084f			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 4d 08	lda $084d			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 4c 08	lda $084c			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 4e 08	lda $084e			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 4d 08	sbc $084d			sbc 	gxYCentre
.c8bc	a8bc	8d 4d 08	sta $084d			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd b7 07	lda $07b7,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d b3 07	sta $07b3,x			sta 	gxX0,x
.c8d3	a8d3	bd b8 07	lda $07b8,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d b4 07	sta $07b4,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 4f 08	stz $084f			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 4c 08	inc $084c			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 4c 08	lda $084c			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 4c 08	inc $084c			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 4d 08	dec $084d			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 4c 08	lda $084c			lda 	gxxCentre
.c8fc	a8fc	ed 4d 08	sbc $084d			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 4f 08	dec $084f			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad b9 07	lda $07b9			lda 	gxY1
.c935	a935	ed b5 07	sbc $07b5			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 4b 08	sta $084b			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 4c 08	stz $084c			stz 	gxxCentre
.c949	a949	ad 4b 08	lda $084b			lda 	gxRadius
.c94c	a94c	8d 4d 08	sta $084d			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd b7 07	lda $07b7,x			lda 	gxX1,x
.c964	a964	7d b3 07	adc $07b3,x			adc 	gxX0,x
.c967	a967	9d b7 07	sta $07b7,x			sta 	gxX1,x
.c96a	a96a	bd b8 07	lda $07b8,x			lda 	gxX1+1,x
.c96d	a96d	7d b4 07	adc $07b4,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d b8 07	sta $07b8,x			sta 	gxX1+1,x
.c974	a974	7e b7 07	ror $07b7,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.084b						gxRadius:
>084b								.fill 	1
.084c						gxxCentre:
>084c								.fill 	1
.084d						gxYCentre:
>084d								.fill 	1
.084e						gxIsFillMode:
>084e								.fill 	1
.084f						gxYChanged:
>084f								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad bc 07	lda $07bc			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad bf 07	lda $07bf			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d bd 07	adc $07bd			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd bd 07	cmp $07bd			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c bb 07	stz $07bb			stz 	gxSpritesOn
.c9d1	a9d1	9c bc 07	stz $07bc			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e ab 07	stz $07ab,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d bc 07	sta $07bc			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d bd 07	sta $07bd			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e bf 07	stx $07bf			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d bb 07	sta $07bb			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d be 07	sta $07be			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d c9 07	sta $07c9			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d ca 07	sta $07ca			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c c8 07	stz $07c8			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e 0b 08	stz $080b,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac c5 07	ldy $07c5			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d c3 07	and $07c3			and 	gxANDValue
.ca9e	aa9e	4d c2 07	eor $07c2			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 52 08	lda $0852			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad b3 07	lda $07b3			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d b7 07	eor $07b7			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad b4 07	lda $07b4			lda 	gxX0+1
.cac4	aac4	4d b8 07	eor $07b8			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad b9 07	lda $07b9			lda 	gxY1
.cacb	aacb	4d b5 07	eor $07b5			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 54 08	lda $0854			lda 	gxPosition
.cad3	aad3	6d 55 08	adc $0855			adc 	gxAdjust
.cad6	aad6	8d 54 08	sta $0854			sta 	gxPosition
.cad9	aad9	9c 57 08	stz $0857			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 56 08	cmp $0856			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 57 08	dec $0857			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 56 08	sbc $0856			sbc 	gxTotal
.caea	aaea	8d 54 08	sta $0854			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 52 08	lda $0852			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 57 08	lda $0857			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 57 08	lda $0857			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 53 08	lda $0853			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad b3 07	lda $07b3			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce b4 07	dec $07b4			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce b3 07	dec $07b3			dec 	gxX0
.cb1b	ab1b	ce c5 07	dec $07c5			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad c5 07	lda $07c5			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee b3 07	inc $07b3			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee b4 07	inc $07b4			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee c5 07	inc $07c5			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee b5 07	inc $07b5			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad b9 07	lda $07b9			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed b5 07	sbc $07b5			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 51 08	sta $0851			sta 	gxDiffY
.cb63	ab63	9c 53 08	stz $0853			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad b7 07	lda $07b7			lda 	gxX1
.cb6a	ab6a	ed b3 07	sbc $07b3			sbc 	gxX0
.cb6d	ab6d	8d 50 08	sta $0850			sta 	gxDiffX
.cb70	ab70	ad b8 07	lda $07b8			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed b4 07	sbc $07b4			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 50 08	ror $0850			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 50 08	sbc $0850			sbc 	gxDiffX
.cb83	ab83	8d 50 08	sta $0850			sta 	gxDiffX
.cb86	ab86	ce 53 08	dec $0853			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 52 08	stz $0852			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 51 08	lda $0851			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 55 08	sta $0855			sta 	gxAdjust
.cb92	ab92	ad 50 08	lda $0850			lda 	gxDiffX
.cb95	ab95	8d 56 08	sta $0856			sta 	gxTotal
.cb98	ab98	ad 51 08	lda $0851			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 50 08	cmp $0850			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 52 08	dec $0852			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 50 08	lda $0850			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 55 08	sta $0855			sta 	gxAdjust
.cba9	aba9	ad 51 08	lda $0851			lda 	gxDiffY
.cbac	abac	8d 56 08	sta $0856			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 56 08	lda $0856			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 54 08	sta $0854			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.0850						gxDiffX:
>0850								.fill 	1
.0851						gxDiffY:
>0851								.fill 	1
.0852						gxIsDiffYLarger:
>0852								.fill 	1
.0853						gxDXNegative:
>0853								.fill 	1
.0854						gxPosition:
>0854								.fill 	1
.0855						gxAdjust:
>0855								.fill 	1
.0856						gxTotal:
>0856								.fill 	1
.0857						gxAddSelect:
>0857								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e c1 07	stx $07c1			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d c0 07	sta $07c0			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c c3 07	stz $07c3			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae c1 07	ldx $07c1			ldx 	gxColour
.cbc9	abc9	8e c2 07	stx $07c2			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e c3 07	stx $07c3			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c c2 07	stz $07c2			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad c3 07	lda $07c3			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d c3 07	sta $07c3			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac c5 07	ldy $07c5			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d c3 07	and $07c3			and 	gxANDValue
.cbf3	abf3	4d c2 07	eor $07c2			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad b5 07	lda $07b5			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd b9 07	cmp $07b9			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee b5 07	inc $07b5			inc 	gxY0 						; change Y pos
.cc22	ac22	ad b5 07	lda $07b5			lda 	gxY0 						; reached last line
.cc25	ac25	cd b9 07	cmp $07b9			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad b7 07	lda $07b7			lda		gxX1
.cc42	ac42	ed b3 07	sbc $07b3			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad b8 07	lda $07b8			lda 	gxX1+1
.cc4a	ac4a	ed b4 07	sbc $07b4			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad c5 07	lda $07c5			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac c5 07	ldy $07c5			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d c3 07	and $07c3			and 	gxANDValue
.cc67	ac67	4d c2 07	eor $07c2			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d c3 07	and $07c3			and 	gxANDValue
.cc85	ac85	4d c2 07	eor $07c2			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d c3 07	and $07c3			and 	gxANDValue
.cc9d	ac9d	4d c2 07	eor $07c2			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d c5 07	sta $07c5			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 58 08	sta $0858			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 59 08	sta $0859			sta 	gxMask 						; and mask
.ccc4	acc4	ad bc 07	lda $07bc			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad b5 07	lda $07b5			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 5b 08	sty $085b			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 5a 08	stx $085a			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 5d 08	lda $085d			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 5c 08	sta $085c			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 5d 08	bit $085d			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 59 08	lda $0859			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 5c 08	lda $085c			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad b5 07	lda $07b5			lda 	gxY0 						; off screen
.ccfd	acfd	cd bf 07	cmp $07bf			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 58 08	cmp $0858			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d b5 07	sta $07b5			sta 	gxY0
.cd16	ad16	ae 5c 08	ldx $085c			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 58 08	lda $0858			lda 	gxSize
.cd1d	ad1d	6d b3 07	adc $07b3			adc 	gxX0
.cd20	ad20	8d b3 07	sta $07b3			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee b4 07	inc $07b4			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 5a 08	jmp ($085a)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac c5 07	ldy $07c5			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 5c 08	lda $085c			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c c0 07	bit $07c0			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 59 08	lda $0859			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 5d 08	lda $085d			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d c3 07	and $07c3			and 	gxANDValue
.cd61	ad61	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 58 08	cmp $0858			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee b5 07	inc $07b5			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0858						gxSize:
>0858								.fill 	1
.0859						gxMask:
>0859								.fill 	1
.085a						gxAcquireVector:
>085a								.fill 	2
.085c						gxScale:
>085c								.fill 	1
.085d						gxUseMode:
>085d								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d c0 07	eor $07c0			eor 	gxMode
.cd84	ad84	8d 5d 08	sta $085d			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad c1 07	lda $07c1			lda 	gxColour
.cdbd	adbd	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad bb 07	lda $07bb			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d c0 07	eor $07c0			eor 	gxMode
.cdd1	add1	8d 5d 08	sta $085d			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 5e 08	lda $085e			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad be 07	lda $07be			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 5f 08	ldx $085f			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 61 08	adc $0861			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 62 08	adc $0862			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 5e 08	cpy $085e			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad bb 07	lda $07bb			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d c6 07	sta $07c6			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d c8 07	sta $07c8			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d c7 07	sta $07c7			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad bb 07	lda $07bb			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 61 08	lda $0861			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 62 08	lda $0862			lda 	gxSpriteOffset+1
.ce92	ae92	6d c9 07	adc $07c9			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad ca 07	lda $07ca			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 5f 08	lda $085f			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 60 08	ora $0860			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 5f 08	lda $085f			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d 0b 08	ora $080b,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad bb 07	lda $07bb			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d b3 07	adc $07b3			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad b4 07	lda $07b4			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d b5 07	adc $07b5			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e b4 07	lsr $07b4			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e b3 07	ror $07b3			ror 	gxX0
.cf3d	af3d	4e b3 07	lsr $07b3			lsr 	gxX0
.cf40	af40	4e b5 07	lsr $07b5			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e b5 07	lsr $07b5			lsr 	gxY0
.cf46	af46	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d b3 07	ora $07b3			ora 	gxX0
.cf51	af51	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.cf54	af54	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d b5 07	ora $07b5			ora 	gxY0
.cf5c	af5c	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d c4 07	sta $07c4			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad c4 07	lda $07c4			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad b5 07	lda $07b5			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad b3 07	lda $07b3			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d c5 07	sta $07c5			sta 	gxOffset
.cfae	afae	ad b4 07	lda $07b4			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d bd 07	adc $07bd			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad c5 07	lda $07c5			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d c5 07	sta $07c5			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 cb 07	lda $07cb,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d cb 07	ora $07cb,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 0b 08	lda $080b,y			lda 	gxSpriteHigh,y
.d000	b000	7d 0b 08	adc $080b,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 0b 08	lda $080b,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 cb 07	lda $07cb,y			lda 	gxSpriteLow,y
.d02e	b02e	fd cb 07	sbc $07cb,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad be 07	lda $07be			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 62 08	sta $0862			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 5f 08	sta $085f			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 5e 08	sta $085e			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 60 08	sta $0860			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 61 08	sta $0861			sta 	gxSpriteOffset
.d07b	b07b	0e 61 08	asl $0861			asl 	gxSpriteOffset
.d07e	b07e	2e 62 08	rol $0862			rol 	gxSpriteOffset+1
.d081	b081	0e 61 08	asl $0861			asl 	gxSpriteOffset
.d084	b084	2e 62 08	rol $0862			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.085e						gxSizePixels:
>085e								.fill 	1
.085f						gxSizeBits:
>085f								.fill 	1
.0860						gxSpriteLUT:
>0860								.fill 	1
.0861						gxSpriteOffset:
>0861								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad b3 07	lda $07b3			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd b7 07	cmp $07b7			cmp 	gxX1
.d098	b098	ad b4 07	lda $07b4			lda 	gxX0+1
.d09b	b09b	ed b8 07	sbc $07b8			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad b5 07	lda $07b5			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd b9 07	cmp $07b9			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd b3 07	lda $07b3,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 b3 07	lda $07b3,y			lda 	gxX0,y
.d0c8	b0c8	9d b3 07	sta $07b3,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 b3 07	sta $07b3,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d10e	b10e	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d114	b114	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d11c	b11c	45 24 28
>d11f	b11f	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d127	b127	45 24 28
>d12a	b12a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d130	b130	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d138	b138	28
>d139	b139	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d141	b141	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d147	b147	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d14f	b14f	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d157	b157	55 4e 54 28
>d15b	b15b	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d163	b163	54 24 28
>d166	b166	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d16d	b16d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d174	b174	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d17b	b17b	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>d183	b183	4e 28
>d185	b185	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>d18d	b18d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>d193	b193	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>d199	b199	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>d1a0	b1a0	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>d1a6	b1a6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>d1ac	b1ac	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>d1b3	b1b3	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>d1bb	b1bb	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>d1c3	b1c3	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>d1cb	b1cb	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>d1d3	b1d3	47 28
>d1d5	b1d5	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>d1dd	b1dd	28
>d1de	b1de	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>d1e6	b1e6	28
>d1e7	b1e7	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>d1ed	b1ed	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>d1f3	b1f3	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>d1f9	b1f9	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>d200	b200	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>d208	b208	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>d20e	b20e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>d214	b214	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>d219	b219	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>d21d	b21d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>d223	b223	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>d22b	b22b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>d232	b232	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>d239	b239	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>d241	b241	43
>d242	b242	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>d248	b248	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>d24e	b24e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>d255	b255	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>d25b	b25b	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>d25f	b25f	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>d263	b263	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>d269	b269	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>d271	b271	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>d278	b278	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>d27f	b27f	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>d287	b287	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>d28d	b28d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>d292	b292	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>d29a	b29a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>d2a0	b2a0	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>d2a6	b2a6	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>d2ab	b2ab	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>d2b1	b2b1	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>d2b8	b2b8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>d2bd	b2bd	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>d2c3	b2c3	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>d2ca	b2ca	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>d2d2	b2d2	59
>d2d3	b2d3	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>d2d8	b2d8	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>d2dc	b2dc	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>d2e4	b2e4	45
>d2e5	b2e5	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>d2ed	b2ed	45
>d2ee	b2ee	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>d2f4	b2f4	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>d2fa	b2fa	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>d301	b301	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>d308	b308	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>d30f	b30f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>d315	b315	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>d31b	b31b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>d320	b320	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>d327	b327	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>d32e	b32e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>d336	b336	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>d33c	b33c	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>d340	b340	ff					.text	$FF
.d341	b341					KeywordSet1:
>d341	b341	00 65					.text	0,$65,""               ; $80 !0:EOF
>d343	b343	00 58					.text	0,$58,""               ; $81 !1:SH1
>d345	b345	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d347	b347	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d34f	b34f	4c 45
>d351	b351	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d359	b359	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d361	b361	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d368	b368	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d36f	b36f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d374	b374	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d37c	b37c	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d381	b381	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d386	b386	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d38d	b38d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d392	b392	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d39a	b39a	45
>d39b	b39b	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d39f	b39f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d3a6	b3a6	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d3ac	b3ac	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d3b3	b3b3	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d3ba	b3ba	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d3c0	b3c0	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d3c6	b3c6	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $96 MOUSE
>d3cd	b3cd	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $97 NEW
>d3d2	b3d2	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $98 PING
>d3d8	b3d8	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $99 PRINT
>d3df	b3df	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9a RESTORE
>d3e7	b3e7	45
>d3e8	b3e8	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9b RETURN
>d3f0	b3f0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9c RUN
>d3f5	b3f5	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9d SAVE
>d3fb	b3fb	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9e SETDATE
>d403	b403	45
>d404	b404	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9f SETTIME
>d40c	b40c	45
>d40d	b40d	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a0 SHOOT
>d414	b414	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a1 SPRITES
>d41c	b41c	53
>d41d	b41d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a2 STOP
>d423	b423	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a3 VERIFY
>d42b	b42b	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a4 XGO
>d430	b430	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a5 XLOAD
>d437	b437	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a6 ZAP
>d43c	b43c	ff					.text	$FF
.d43d	b43d					KeywordSet2:
>d43d	b43d	00 65					.text	0,$65,""               ; $80 !0:EOF
>d43f	b43f	00 58					.text	0,$58,""               ; $81 !1:SH1
>d441	b441	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d443	b443	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d448	b448	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d44d	b44d	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d452	b452	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d457	b457	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d45c	b45c	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d461	b461	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d466	b466	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d46b	b46b	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d470	b470	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d475	b475	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d47a	b47a	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d47f	b47f	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d484	b484	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d489	b489	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d48e	b48e	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d493	b493	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d498	b498	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d49d	b49d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4a2	b4a2	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4a7	b4a7	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4ac	b4ac	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4b1	b4b1	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4b6	b4b6	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4bb	b4bb	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4c0	b4c0	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4c5	b4c5	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4ca	b4ca	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4cf	b4cf	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4d4	b4d4	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4d9	b4d9	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4de	b4de	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4e3	b4e3	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4e8	b4e8	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4ed	b4ed	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4f2	b4f2	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4f7	b4f7	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4fc	b4fc	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d501	b501	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d506	b506	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d50b	b50b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d510	b510	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d515	b515	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d51a	b51a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d51f	b51f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d524	b524	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d529	b529	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d52e	b52e	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d533	b533	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d538	b538	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d53d	b53d	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d542	b542	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d547	b547	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d54c	b54c	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d551	b551	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d556	b556	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d55b	b55b	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d560	b560	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d565	b565	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d56a	b56a	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d56f	b56f	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d574	b574	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d579	b579	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d57e	b57e	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d583	b583	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d588	b588	ff					.text	$FF
.d589	b589					Export_TKListConvertLine:
.d589	b589	48		pha				pha 								; save indent on the stack
.d58a	b58a	9c 19 04	stz $0419			stz 	tbOffset
.d58d	b58d	9c 29 04	stz $0429			stz 	tokenBuffer
.d590	b590	9c 25 04	stz $0425			stz 	currentListColour
.d593	b593	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d595	b595	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d598	b598	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d59a	b59a	b1 30		lda ($30),y			lda 	(codePtr),y
.d59c	b59c	aa		tax				tax
.d59d	b59d	88		dey				dey
.d59e	b59e	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a0	b5a0	20 83 b7	jsr $b783			jsr 	LCLWriteNumberXA
.d5a3	b5a3	68		pla				pla 								; adjustment to indent
.d5a4	b5a4	48		pha				pha 								; save on stack
.d5a5	b5a5	10 0c		bpl $b5b3			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5a7	b5a7	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5a8	b5a8	6d 22 04	adc $0422			adc 	listIndent
.d5ab	b5ab	8d 22 04	sta $0422			sta 	listIndent
.d5ae	b5ae	10 03		bpl $b5b3			bpl 	_LCNoAdjust
.d5b0	b5b0	9c 22 04	stz $0422			stz 	listIndent
.d5b3	b5b3					_LCNoAdjust:
.d5b3	b5b3	18		clc				clc		 							; work out actual indent.
.d5b4	b5b4	ad 22 04	lda $0422			lda 	listIndent
.d5b7	b5b7	0a		asl a				asl 	a
.d5b8	b5b8	69 07		adc #$07			adc 	#7
.d5ba	b5ba	85 36		sta $36				sta 	zTemp0
.d5bc	b5bc					_LCPadOut:
.d5bc	b5bc	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5be	b5be	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d5c1	b5c1	ad 19 04	lda $0419			lda 	tbOffset
.d5c4	b5c4	c5 36		cmp $36				cmp 	zTemp0
.d5c6	b5c6	d0 f4		bne $b5bc			bne 	_LCPadOut
.d5c8	b5c8	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5ca	b5ca					_LCMainLoop:
.d5ca	b5ca	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5cc	b5cc	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d5cf	b5cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d5d1	b5d1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5d3	b5d3	f0 17		beq $b5ec			beq 	_LCExit
.d5d5	b5d5	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5d7	b5d7	90 1e		bcc $b5f7			bcc 	_LCDoubles
.d5d9	b5d9	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5db	b5db	90 2a		bcc $b607			bcc 	_LCShiftPunc
.d5dd	b5dd	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5df	b5df	90 35		bcc $b616			bcc 	_LCPunctuation
.d5e1	b5e1	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5e3	b5e3	90 51		bcc $b636			bcc 	_LCIdentifiers
.d5e5	b5e5	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5e7	b5e7	90 73		bcc $b65c			bcc 	_LCTokens
.d5e9	b5e9	4c bc b6	jmp $b6bc			jmp 	_LCData 					; 254-5 are data objects
.d5ec	b5ec					_LCExit:
.d5ec	b5ec	68		pla				pla 								; get old indent adjust
.d5ed	b5ed	30 07		bmi $b5f6			bmi 	_LCExit2
.d5ef	b5ef	18		clc				clc 								; add to indent if +ve
.d5f0	b5f0	6d 22 04	adc $0422			adc 	listIndent
.d5f3	b5f3	8d 22 04	sta $0422			sta 	listIndent
.d5f6	b5f6					_LCExit2:
.d5f6	b5f6	60		rts				rts
.d5f7	b5f7					_LCDoubles:
.d5f7	b5f7	48		pha				pha
.d5f8	b5f8	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5f9	b5f9	29 02		and #$02			and 	#2
.d5fb	b5fb	09 3c		ora #$3c			ora 	#60 						; make < >
.d5fd	b5fd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d600	b600	68		pla				pla 								; restore, do lower bit
.d601	b601	29 03		and #$03			and 	#3
.d603	b603	09 3c		ora #$3c			ora 	#60
.d605	b605	80 0f		bra $b616			bra		_LCPunctuation 				; print, increment, loop
.d607	b607					_LCShiftPunc:
.d607	b607	aa		tax				tax 								; save in X
.d608	b608	29 07		and #$07			and 	#7 							; lower 3 bits
.d60a	b60a	f0 02		beq $b60e			beq 	_LCNoAdd
.d60c	b60c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d60e	b60e					_LCNoAdd:
.d60e	b60e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d610	b610	90 02		bcc $b614			bcc 	_LCNoAdd2
.d612	b612	09 20		ora #$20			ora 	#32 						; adds $20
.d614	b614					_LCNoAdd2:
.d614	b614	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d616	b616					_LCPunctuation:
.d616	b616	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d618	b618	d0 03		bne $b61d			bne 	_LCPContinue
.d61a	b61a	20 31 b7	jsr $b731			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d61d	b61d					_LCPContinue:
.d61d	b61d	c9 2e		cmp #$2e			cmp 	#'.'
.d61f	b61f	f0 08		beq $b629			beq 	_LCPIsConstant
.d621	b621	c9 30		cmp #$30			cmp 	#'0'
.d623	b623	90 0b		bcc $b630			bcc 	_LCPNotConstant
.d625	b625	c9 3a		cmp #$3a			cmp 	#'9'+1
.d627	b627	b0 07		bcs $b630			bcs 	_LCPNotConstant
.d629	b629					_LCPIsConstant:
.d629	b629	48		pha				pha
.d62a	b62a	a9 87		lda #$87			lda 	#CLIConstant+$80
.d62c	b62c	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d62f	b62f	68		pla				pla
.d630	b630					_LCPNotConstant:
.d630	b630	c8		iny				iny 								; consume character
.d631	b631	20 1b b7	jsr $b71b			jsr 	LCLWrite 					; write it out.
.d634	b634	80 94		bra $b5ca			bra 	_LCMainLoop 				; go round again.
.d636	b636					_LCIdentifiers:
.d636	b636	18		clc				clc 								; convert to physical address
.d637	b637	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d639	b639	85 37		sta $37				sta 	zTemp0+1
.d63b	b63b	c8		iny				iny
.d63c	b63c	b1 30		lda ($30),y			lda 	(codePtr),y
.d63e	b63e	85 36		sta $36				sta 	zTemp0
.d640	b640	c8		iny				iny
.d641	b641	5a		phy				phy 								; save position
.d642	b642	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d644	b644	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d647	b647	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d649	b649					_LCOutIdentifier:
.d649	b649	c8		iny				iny
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d64c	b64c	29 7f		and #$7f			and 	#$7F
.d64e	b64e	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d651	b651	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d654	b654	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d656	b656	10 f1		bpl $b649			bpl 	_LCOutIdentifier
.d658	b658	7a		ply				ply 								; restore position
.d659	b659	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d65c	b65c					_LCTokens:
.d65c	b65c	aa		tax				tax 								; token in X
.d65d	b65d	a9 3d		lda #$3d			lda 	#((KeywordSet2) & $FF)
.d65f	b65f	85 36		sta $36				sta 	0+zTemp0
.d661	b661	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d663	b663	85 37		sta $37				sta 	1+zTemp0
.d665	b665	e0 82		cpx #$82			cpx 	#$82
.d667	b667	f0 16		beq $b67f			beq 	_LCUseShift
.d669	b669	a9 41		lda #$41			lda 	#((KeywordSet1) & $FF)
.d66b	b66b	85 36		sta $36				sta 	0+zTemp0
.d66d	b66d	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d66f	b66f	85 37		sta $37				sta 	1+zTemp0
.d671	b671	e0 81		cpx #$81			cpx 	#$81
.d673	b673	f0 0a		beq $b67f			beq 	_LCUseShift
.d675	b675	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d677	b677	85 36		sta $36				sta 	0+zTemp0
.d679	b679	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d67b	b67b	85 37		sta $37				sta 	1+zTemp0
.d67d	b67d	80 01		bra $b680			bra 	_LCNoShift
.d67f	b67f					_LCUseShift:
.d67f	b67f	c8		iny				iny
.d680	b680					_LCNoShift:
.d680	b680	20 45 b7	jsr $b745			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d683	b683	b1 30		lda ($30),y			lda 	(codePtr),y
.d685	b685	aa		tax				tax 								; into X
.d686	b686					_LCFindText:
.d686	b686	ca		dex				dex
.d687	b687	10 0e		bpl $b697			bpl 	_LCFoundText 				; found text.
.d689	b689	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d68b	b68b	1a		inc a				inc 	a 							; one extra for size
.d68c	b68c	38		sec				sec 								; one extra for checksum
.d68d	b68d	65 36		adc $36				adc 	zTemp0 						; go to next token
.d68f	b68f	85 36		sta $36				sta 	zTemp0
.d691	b691	90 f3		bcc $b686			bcc 	_LCFindText
.d693	b693	e6 37		inc $37				inc 	zTemp0+1
.d695	b695	80 ef		bra $b686			bra 	_LCFindText
.d697	b697					_LCFoundText:
.d697	b697	5a		phy				phy 								; save List position
.d698	b698	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d69a	b69a	aa		tax				tax
.d69b	b69b	a9 86		lda #$86			lda 	#CLIToken+$80
.d69d	b69d	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6a0	b6a0	a0 02		ldy #$02			ldy 	#2
.d6a2	b6a2					_LCCopyToken:
.d6a2	b6a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6a4	b6a4	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d6a7	b6a7	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6aa	b6aa	c8		iny				iny
.d6ab	b6ab	ca		dex				dex
.d6ac	b6ac	d0 f4		bne $b6a2			bne 	_LCCopyToken
.d6ae	b6ae	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6b0	b6b0	f0 05		beq $b6b7			beq 	_LCNoSpace
.d6b2	b6b2	a9 20		lda #$20			lda 	#' '
.d6b4	b6b4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6b7	b6b7					_LCNoSpace:
.d6b7	b6b7	7a		ply				ply 								; restore position.
.d6b8	b6b8	c8		iny				iny 								; consume token
.d6b9	b6b9	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop 				; and go around again.
.d6bc	b6bc					_LCData:
.d6bc	b6bc	48		pha				pha 								; save type $FE/$FF
.d6bd	b6bd	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6bf	b6bf	c9 fe		cmp #$fe			cmp 	#$FE
.d6c1	b6c1	f0 22		beq $b6e5			beq 	_LCHaveOpener
.d6c3	b6c3	a2 22		ldx #$22			ldx 	#'"'
.d6c5	b6c5	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6c7	b6c7	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6ca	b6ca	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6cc	b6cc	d0 17		bne $b6e5			bne 	_LCHaveOpener
.d6ce	b6ce	88		dey				dey 								; what precedes it ?
.d6cf	b6cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d1	b6d1	c8		iny				iny
.d6d2	b6d2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6d4	b6d4	d0 0f		bne $b6e5			bne 	_LCHaveOpener
.d6d6	b6d6	a9 09		lda #$09			lda 	#9 							; tab
.d6d8	b6d8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6db	b6db	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6dd	b6dd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e0	b6e0	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6e2	b6e2	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6e5	b6e5					_LCHaveOpener:
.d6e5	b6e5	8a		txa				txa 								; output prefix (# or ")
.d6e6	b6e6	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e9	b6e9	c8		iny				iny 								; get count
.d6ea	b6ea	b1 30		lda ($30),y			lda 	(codePtr),y
.d6ec	b6ec	aa		tax				tax
.d6ed	b6ed	c8		iny				iny 								; point at first character
.d6ee	b6ee					_LCOutData:
.d6ee	b6ee	b1 30		lda ($30),y			lda 	(codePtr),y
.d6f0	b6f0	c9 00		cmp #$00			cmp 	#0
.d6f2	b6f2	f0 03		beq $b6f7			beq 	_LCNoPrint
.d6f4	b6f4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6f7	b6f7					_LCNoPrint:
.d6f7	b6f7	c8		iny				iny
.d6f8	b6f8	ca		dex				dex
.d6f9	b6f9	d0 f3		bne $b6ee			bne 	_LCOutData
.d6fb	b6fb	68		pla				pla 								; closing " required ?
.d6fc	b6fc	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6fe	b6fe	d0 0f		bne $b70f			bne 	_LCNoQuote
.d700	b700	a9 22		lda #$22			lda 	#'"'
.d702	b702	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d705	b705	ad a8 07	lda $07a8			lda 	EXTTextColour
.d708	b708	29 0f		and #$0f			and 	#$0F
.d70a	b70a	09 90		ora #$90			ora 	#$90
.d70c	b70c	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d70f	b70f					_LCNoQuote:
.d70f	b70f	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d712	b712					LCLWriteColour:
.d712	b712	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d715	b715	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d718	b718	d0 01		bne $b71b			bne 	LCLWrite 					; if different, output it
.d71a	b71a	60		rts				rts
.d71b	b71b					LCLWrite:
.d71b	b71b	da		phx				phx
.d71c	b71c	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d71f	b71f	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d722	b722	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d725	b725	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d728	b728	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d72a	b72a	30 03		bmi $b72f			bmi 	_LCLNoColour
.d72c	b72c	8d 23 04	sta $0423			sta 	lcLastCharacter
.d72f	b72f					_LCLNoColour:
.d72f	b72f	fa		plx				plx
.d730	b730	60		rts				rts
.d731	b731					LCLDeleteLastSpace:
.d731	b731	48		pha				pha
.d732	b732	da		phx				phx
.d733	b733	ae 19 04	ldx $0419			ldx 	tbOffset
.d736	b736	f0 0a		beq $b742			beq 	_LCDLSExit
.d738	b738	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d73b	b73b	c9 20		cmp #$20			cmp 	#' '
.d73d	b73d	d0 03		bne $b742			bne 	_LCDLSExit
.d73f	b73f	ce 19 04	dec $0419			dec 	tbOffset
.d742	b742					_LCDLSExit:
.d742	b742	fa		plx				plx
.d743	b743	68		pla				pla
.d744	b744	60		rts				rts
.d745	b745					LCLCheckSpaceRequired:
.d745	b745	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d748	b748	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d74a	b74a	f0 1b		beq $b767			beq 	_LCCSRSpace
.d74c	b74c	c9 29		cmp #$29			cmp 	#')'
.d74e	b74e	f0 17		beq $b767			beq 	_LCCSRSpace
.d750	b750	c9 23		cmp #$23			cmp 	#'#'
.d752	b752	f0 13		beq $b767			beq 	_LCCSRSpace
.d754	b754	20 6d b7	jsr $b76d			jsr 	LCLLowerCase 				; saves a little effort
.d757	b757	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d759	b759	90 11		bcc $b76c			bcc 	_LCCSRExit
.d75b	b75b	c9 3a		cmp #$3a			cmp 	#"9"+1
.d75d	b75d	90 08		bcc $b767			bcc 	_LCCSRSpace
.d75f	b75f	c9 61		cmp #$61			cmp 	#"a"
.d761	b761	90 09		bcc $b76c			bcc 	_LCCSRExit
.d763	b763	c9 7b		cmp #$7b			cmp 	#"z"+1
.d765	b765	b0 05		bcs $b76c			bcs 	_LCCSRExit
.d767	b767					_LCCSRSpace:
.d767	b767	a9 20		lda #$20			lda 	#' '
.d769	b769	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d76c	b76c					_LCCSRExit:
.d76c	b76c	60		rts				rts
.d76d	b76d					LCLLowerCase:
.d76d	b76d	c9 41		cmp #$41			cmp 	#"A"
.d76f	b76f	90 06		bcc $b777			bcc 	_LCLLCOut
.d771	b771	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d773	b773	b0 02		bcs $b777			bcs 	_LCLLCOut
.d775	b775	69 20		adc #$20			adc 	#$20
.d777	b777					_LCLLCOut:
.d777	b777	60		rts				rts
.d778	b778					LCLUpperCase:
.d778	b778	c9 61		cmp #$61			cmp 	#"a"
.d77a	b77a	90 06		bcc $b782			bcc 	_LCLUCOut
.d77c	b77c	c9 7b		cmp #$7b			cmp 	#"z"+1
.d77e	b77e	b0 02		bcs $b782			bcs 	_LCLUCOut
.d780	b780	e9 1f		sbc #$1f			sbc 	#$1F
.d782	b782					_LCLUCOut:
.d782	b782	60		rts				rts
.d783	b783					LCLWriteNumberXA:
.d783	b783	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d785	b785					_LCLWNLoop1:
.d785	b785	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d787	b787					_LCLWNLoop2:
.d787	b787	48		pha				pha 								; save initial LSB
.d788	b788	38		sec				sec
.d789	b789	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d78b	b78b	f9 bc b7	sbc $b7bc,y			sbc 	_LCLWNTable,y
.d78e	b78e	48		pha				pha
.d78f	b78f	8a		txa				txa
.d790	b790	f9 bd b7	sbc $b7bd,y			sbc 	_LCLWNTable+1,y
.d793	b793	90 07		bcc $b79c			bcc 	_LCLWNUnderflow
.d795	b795	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d797	b797	aa		tax				tax 								; update X
.d798	b798	68		pla				pla 								; restore A
.d799	b799	7a		ply				ply 								; throw original
.d79a	b79a	80 eb		bra $b787			bra 	_LCLWNLoop2 				; try again.
.d79c	b79c					_LCLWNUnderflow:
.d79c	b79c	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d79e	b79e	d0 06		bne $b7a6			bne 	_LCLWNOut
.d7a0	b7a0	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7a3	b7a3	3a		dec a				dec 	a
.d7a4	b7a4	f0 04		beq $b7aa			beq 	_LCLWNNext
.d7a6	b7a6					_LCLWNOut:
.d7a6	b7a6	98		tya				tya
.d7a7	b7a7	20 b6 b7	jsr $b7b6			jsr 	_LCLWNOutDigit
.d7aa	b7aa					_LCLWNNext:
.d7aa	b7aa	7a		ply				ply 							 	; restore original value.
.d7ab	b7ab	68		pla				pla
.d7ac	b7ac	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7ae	b7ae	c8		iny				iny
.d7af	b7af	c8		iny				iny
.d7b0	b7b0	84 37		sty $37				sty 	zTemp0+1
.d7b2	b7b2	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7b4	b7b4	d0 cf		bne $b785			bne 	_LCLWNLoop1
.d7b6	b7b6					_LCLWNOutDigit:
.d7b6	b7b6	09 30		ora #$30			ora 	#'0'
.d7b8	b7b8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d7bb	b7bb	60		rts				rts
.d7bc	b7bc					_LCLWNTable:
>d7bc	b7bc	10 27						.word 	10000
>d7be	b7be	e8 03						.word 	1000
>d7c0	b7c0	64 00						.word 	100
>d7c2	b7c2	0a 00						.word 	10
.d7c4	b7c4					TOKSearchTable:
.d7c4	b7c4	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7c6	b7c6	85 36		sta $36				sta 	zTemp0
.d7c8	b7c8	a0 00		ldy #$00			ldy 	#0
.d7ca	b7ca	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7cc	b7cc	85 38		sta $38				sta 	zTemp1
.d7ce	b7ce					_TSTLoop:
.d7ce	b7ce	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7d0	b7d0	30 49		bmi $b81b			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7d2	b7d2	f0 2e		beq $b802			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7d4	b7d4	c8		iny				iny 								; get the hash
.d7d5	b7d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7d7	b7d7	88		dey				dey
.d7d8	b7d8	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7db	b7db	d0 25		bne $b802			bne 	_TSTNext
.d7dd	b7dd	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7e0	b7e0	38		sec				sec
.d7e1	b7e1	ed 00 04	sbc $0400			sbc 	identStart
.d7e4	b7e4	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7e6	b7e6	d0 1a		bne $b802			bne 	_TSTNext
.d7e8	b7e8	5a		phy				phy 								; save Y , we might fail to match.
.d7e9	b7e9	c8		iny				iny 								; point to text
.d7ea	b7ea	c8		iny				iny
.d7eb	b7eb	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7ee	b7ee					_TSTCompareName:
.d7ee	b7ee	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7f1	b7f1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7f3	b7f3	d0 0c		bne $b801			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7f5	b7f5	e8		inx				inx
.d7f6	b7f6	c8		iny				iny
.d7f7	b7f7	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7fa	b7fa	d0 f2		bne $b7ee			bne 	_TSTCompareName
.d7fc	b7fc	7a		ply				ply 								; throw Y
.d7fd	b7fd	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7ff	b7ff	38		sec				sec 								; return with CS = passed.
.d800	b800	60		rts				rts
.d801	b801					_TSTNextPullY:
.d801	b801	7a		ply				ply 								; restore current, fall through.
.d802	b802					_TSTNext:
.d802	b802	e6 38		inc $38				inc 	zTemp1 						; token counter
.d804	b804	98		tya				tya
.d805	b805	18		clc				clc
.d806	b806	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d808	b808	1a		inc a				inc 	a 							; +1
.d809	b809	1a		inc a				inc 	a 							; +2
.d80a	b80a	a8		tay				tay
.d80b	b80b	10 c1		bpl $b7ce			bpl 	_TSTLoop 					; if Y < $80 loop back
.d80d	b80d	98		tya				tya 								; add Y to zTemp0 and reset Y
.d80e	b80e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d810	b810	18		clc				clc  								; but have tables > 255 bytes
.d811	b811	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d813	b813	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d815	b815	90 b7		bcc $b7ce			bcc 	_TSTLoop
.d817	b817	e6 37		inc $37				inc 	zTemp0+1
.d819	b819	80 b3		bra $b7ce			bra 	_TSTLoop
.d81b	b81b					_TSTFail:
.d81b	b81b	18		clc				clc
.d81c	b81c	60		rts				rts
.d81d	b81d					Export_TKTokeniseLine:
.d81d	b81d	20 ea b9	jsr $b9ea			jsr 	LCLFixLineBufferCase 		; fix line case
.d820	b820	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d822	b822	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d825	b825	9c 27 04	stz $0427			stz 	tokenLineNumber
.d828	b828	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d82b	b82b	a2 ff		ldx #$ff			ldx 	#$FF
.d82d	b82d					_TKFindFirst:
.d82d	b82d	e8		inx				inx
.d82e	b82e	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d831	b831	f0 62		beq $b895			beq 	_TKExit
.d833	b833	c9 20		cmp #$20			cmp 	#' '
.d835	b835	90 f6		bcc $b82d			bcc 	_TKFindFirst
.d837	b837	c9 30		cmp #$30			cmp 	#'0'
.d839	b839	90 07		bcc $b842			bcc 	_TKNoLineNumber
.d83b	b83b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d83d	b83d	b0 03		bcs $b842			bcs 	_TKNoLineNumber
.d83f	b83f	20 14 ba	jsr $ba14			jsr 	TOKExtractLineNumber
.d842	b842					_TKNoLineNumber:
.d842	b842					_TKTokeniseLoop:
.d842	b842	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d845	b845	f0 4e		beq $b895			beq 	_TKExit
.d847	b847	e8		inx				inx
.d848	b848	c9 20		cmp #$20			cmp 	#' '
.d84a	b84a	f0 f6		beq $b842			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d84c	b84c	ca		dex				dex 								; undo last get, A contains character, X is position.
.d84d	b84d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d84f	b84f	f0 68		beq $b8b9			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d851	b851	c9 41		cmp #$41			cmp 	#'A'
.d853	b853	90 04		bcc $b859			bcc 	_TKTokenisePunctuation
.d855	b855	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d857	b857	90 60		bcc $b8b9			bcc 	_TKTokeniseIdentifier
.d859	b859					_TKTokenisePunctuation:
.d859	b859	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d85b	b85b	f0 2e		beq $b88b			beq 	_TKString
.d85d	b85d	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d85f	b85f	f0 2f		beq $b890			beq 	_TKHexConstant
.d861	b861	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d863	b863	f0 36		beq $b89b			beq 	_TKCheckDouble
.d865	b865	c9 3e		cmp #$3e			cmp 	#'>'
.d867	b867	f0 32		beq $b89b			beq 	_TKCheckDouble
.d869	b869					_TKStandardPunctuation:
.d869	b869	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d86c	b86c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d86e	b86e	90 0e		bcc $b87e			bcc 	_TKNoShift
.d870	b870	48		pha				pha 								; save. we are about to convert this punctuation token from
.d871	b871	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d873	b873	85 36		sta $36				sta 	zTemp0
.d875	b875	68		pla				pla
.d876	b876	29 20		and #$20			and 	#32 						; bit 5
.d878	b878	4a		lsr a				lsr 	a 							; shift into bit 3
.d879	b879	4a		lsr a				lsr 	a
.d87a	b87a	05 36		ora $36				ora 	zTemp0
.d87c	b87c	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d87e	b87e					_TKNoShift:
.d87e	b87e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; write the punctuation character
.d881	b881	e8		inx				inx 								; consume the character
.d882	b882	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d884	b884	d0 bc		bne $b842			bne 	_TKTokeniseLoop 			; and loop round again.
.d886	b886	20 4c b9	jsr $b94c			jsr 	TOKCheckComment 			; comment checl
.d889	b889	80 b7		bra $b842			bra 	_TKTokeniseLoop
.d88b	b88b					_TKString:
.d88b	b88b	20 79 b9	jsr $b979			jsr 	TOKTokenString
.d88e	b88e	80 b2		bra $b842			bra 	_TKTokeniseLoop
.d890	b890					_TKHexConstant:
.d890	b890	20 b4 b9	jsr $b9b4			jsr 	TOKHexConstant
.d893	b893	80 ad		bra $b842			bra 	_TKTokeniseLoop
.d895	b895	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d897	b897	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d89a	b89a	60		rts				rts
.d89b	b89b					_TKCheckDouble:
.d89b	b89b	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d89e	b89e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8a0	b8a0	90 c7		bcc $b869			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8a2	b8a2	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8a4	b8a4	b0 c3		bcs $b869			bcs 	_TKStandardPunctuation
.d8a6	b8a6	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8a9	b8a9	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8ab	b8ab	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8ac	b8ac	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8af	b8af	38		sec				sec
.d8b0	b8b0	e9 3c		sbc #$3c			sbc 	#'<'
.d8b2	b8b2	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8b5	b8b5	e8		inx				inx 								; consume both
.d8b6	b8b6	e8		inx				inx
.d8b7	b8b7	80 89		bra $b842			bra 	_TKTokeniseLoop
.d8b9	b8b9					_TKTokeniseIdentifier:
.d8b9	b8b9	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8bc	b8bc	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8bf	b8bf					_TKCheckLoop:
.d8bf	b8bf	e8		inx				inx 								; look at next, we know first is identifier already.
.d8c0	b8c0	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8c3	b8c3	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8c5	b8c5	f0 f8		beq $b8bf			beq 	_TKCheckLoop
.d8c7	b8c7	c9 30		cmp #$30			cmp	 	#"0"
.d8c9	b8c9	90 0c		bcc $b8d7			bcc 	_TKEndIdentifier
.d8cb	b8cb	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8cd	b8cd	90 f0		bcc $b8bf			bcc 	_TKCheckLoop
.d8cf	b8cf	c9 41		cmp #$41			cmp	 	#"A"
.d8d1	b8d1	90 04		bcc $b8d7			bcc 	_TKEndIdentifier
.d8d3	b8d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8d5	b8d5	90 e8		bcc $b8bf			bcc 	_TKCheckLoop
.d8d7	b8d7					_TKEndIdentifier:
.d8d7	b8d7	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8da	b8da	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8dc	b8dc	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8de	b8de	f0 06		beq $b8e6			beq 	_TKHasTypeCharacter
.d8e0	b8e0	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8e2	b8e2	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8e4	b8e4	d0 07		bne $b8ed			bne 	_TKNoTypeCharacter
.d8e6	b8e6					_TKHasTypeCharacter:
.d8e6	b8e6	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8e9	b8e9	e8		inx				inx 								; consume the type character
.d8ea	b8ea	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8ed	b8ed					_TKNoTypeCharacter:
.d8ed	b8ed	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8ef	b8ef	d0 09		bne $b8fa			bne 	_TKNoArray
.d8f1	b8f1	e8		inx				inx 								; skip the (
.d8f2	b8f2	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8f5	b8f5	09 04		ora #$04			ora 	#$04
.d8f7	b8f7	8d 04 04	sta $0404			sta 	identTypeByte
.d8fa	b8fa					_TKNoArray:
.d8fa	b8fa	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8fd	b8fd	20 d5 b9	jsr $b9d5			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d900	b900	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d902	b902	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d904	b904	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d907	b907	a2 00		ldx #$00			ldx 	#0
.d909	b909	b0 1f		bcs $b92a			bcs 	_TKFoundToken
.d90b	b90b	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d90d	b90d	a9 41		lda #$41			lda 	#(KeywordSet1) & $FF
.d90f	b90f	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d912	b912	a2 81		ldx #$81			ldx 	#$81
.d914	b914	b0 14		bcs $b92a			bcs 	_TKFoundToken
.d916	b916	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d918	b918	a9 3d		lda #$3d			lda 	#(KeywordSet2) & $FF
.d91a	b91a	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d91d	b91d	a2 82		ldx #$82			ldx 	#$82
.d91f	b91f	b0 09		bcs $b92a			bcs 	_TKFoundToken
.d921	b921	20 65 ba	jsr $ba65			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d924	b924	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d927	b927	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d92a	b92a					_TKFoundToken:
.d92a	b92a	48		pha				pha 								; save token
.d92b	b92b	8a		txa				txa 								; shift in X, is there one ?
.d92c	b92c	f0 03		beq $b931			beq 	_TKNoTShift
.d92e	b92e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; if so, write it out
.d931	b931					_TKNoTShift:
.d931	b931	68		pla				pla 								; restore and write token
.d932	b932	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d935	b935	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d937	b937	d0 0d		bne $b946			bne 	_TKNotRem 			 		; not shifted ?
.d939	b939	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d93b	b93b	d0 09		bne $b946			bne 	_TKNotRem
.d93d	b93d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d940	b940	20 4c b9	jsr $b94c			jsr 	TOKCheckComment
.d943	b943	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop
.d946	b946					_TKNotRem:
.d946	b946	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d949	b949	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d94c	b94c					TOKCheckComment:
.d94c	b94c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d94f	b94f	e8		inx				inx
.d950	b950	c9 20		cmp #$20			cmp 	#' '
.d952	b952	f0 f8		beq $b94c			beq 	TOKCheckComment
.d954	b954	ca		dex				dex 								; first non space character
.d955	b955	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d957	b957	f0 1f		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d959	b959	c9 00		cmp #$00			cmp 	#0 							; EOL
.d95b	b95b	f0 1b		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d95d	b95d	da		phx				phx
.d95e	b95e					_TOKCCLowerCase:
.d95e	b95e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d961	b961	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d963	b963	90 09		bcc $b96e			bcc 	_TOKKCNotUC
.d965	b965	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d967	b967	b0 05		bcs $b96e			bcs 	_TOKKCNotUC
.d969	b969	49 20		eor #$20			eor 	#$20
.d96b	b96b	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d96e	b96e					_TOKKCNotUC:
.d96e	b96e	e8		inx				inx
.d96f	b96f	c9 00		cmp #$00			cmp 	#0
.d971	b971	d0 eb		bne $b95e			bne 	_TOKCCLowerCase
.d973	b973	fa		plx				plx
.d974	b974	ca		dex				dex 								; tokenise string expects initial skip.
.d975	b975	20 79 b9	jsr $b979			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d978	b978					_TOKCCExit:
.d978	b978	60		rts				rts
.d979	b979					TOKTokenString:
.d979	b979	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d97b	b97b	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d97e	b97e	e8		inx				inx									; start of quoted string.
.d97f	b97f	da		phx				phx 								; push start of string on top
.d980	b980	ca		dex				dex 								; because we pre-increment
.d981	b981					_TSFindEnd:
.d981	b981	e8		inx				inx
.d982	b982	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d985	b985	f0 04		beq $b98b			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d987	b987	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d989	b989	d0 f6		bne $b981			bne 	_TSFindEnd
.d98b	b98b					_TSEndOfString:
.d98b	b98b	7a		ply				ply  								; so now Y is first character, X is character after end.
.d98c	b98c	48		pha				pha 								; save terminating character
.d98d	b98d	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d990	b990	68		pla				pla 								; terminating character
.d991	b991	f0 01		beq $b994			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d993	b993	e8		inx				inx
.d994	b994					_TSNotQuote:
.d994	b994	60		rts				rts
.d995	b995					TOKWriteBlockXY:
.d995	b995	86 36		stx $36				stx 	zTemp0 						; save end character
.d997	b997	98		tya				tya 								; use 2's complement to work out the byte size
.d998	b998	49 ff		eor #$ff			eor 	#$FF
.d99a	b99a	38		sec				sec
.d99b	b99b	65 36		adc $36				adc 	zTemp0
.d99d	b99d	1a		inc a				inc 	a 							; one extra for NULL
.d99e	b99e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9a1	b9a1					_TOBlockLoop:
.d9a1	b9a1	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9a3	b9a3	f0 09		beq $b9ae			beq 	_TOBlockExit
.d9a5	b9a5	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9a8	b9a8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9ab	b9ab	c8		iny				iny
.d9ac	b9ac	80 f3		bra $b9a1			bra 	_TOBlockLoop
.d9ae	b9ae					_TOBlockExit:
.d9ae	b9ae	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9b0	b9b0	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b3	b9b3	60		rts				rts
.d9b4	b9b4					TOKHexConstant:
.d9b4	b9b4	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9b6	b9b6	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b9	b9b9	e8		inx				inx									; start of quoted string.
.d9ba	b9ba	da		phx				phx 								; push start of constant on top
.d9bb	b9bb	ca		dex				dex
.d9bc	b9bc					_THFindLoop:
.d9bc	b9bc	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9bd	b9bd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9c0	b9c0	c9 30		cmp #$30			cmp 	#"0"
.d9c2	b9c2	90 0c		bcc $b9d0			bcc 	_THFoundEnd
.d9c4	b9c4	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9c6	b9c6	90 f4		bcc $b9bc			bcc 	_THFindLoop
.d9c8	b9c8	c9 41		cmp #$41			cmp 	#"A"
.d9ca	b9ca	90 04		bcc $b9d0			bcc 	_THFoundEnd
.d9cc	b9cc	c9 47		cmp #$47			cmp 	#"F"+1
.d9ce	b9ce	90 ec		bcc $b9bc			bcc 	_THFindLoop
.d9d0	b9d0					_THFoundEnd:
.d9d0	b9d0	7a		ply				ply 								; restore start
.d9d1	b9d1	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; output the block
.d9d4	b9d4	60		rts				rts
.d9d5	b9d5					TOKCalculateHash:
.d9d5	b9d5	da		phx				phx
.d9d6	b9d6	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9d9	b9d9	a9 00		lda #$00			lda 	#0
.d9db	b9db					_TCHLoop:
.d9db	b9db	18		clc				clc
.d9dc	b9dc	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9e3	b9e3	d0 f6		bne $b9db			bne 	_TCHLoop
.d9e5	b9e5	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9e8	b9e8	fa		plx				plx
.d9e9	b9e9	60		rts				rts
.d9ea	b9ea					LCLFixLineBufferCase:
.d9ea	b9ea	a2 00		ldx #$00			ldx 	#0
.d9ec	b9ec					_FLBCLoop:
.d9ec	b9ec	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9ef	b9ef	f0 22		beq $ba13			beq 	_FLBCExit 					; end of string.
.d9f1	b9f1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9f3	b9f3	f0 11		beq $ba06			beq 	_FLBCInQuotes
.d9f5	b9f5	e8		inx				inx
.d9f6	b9f6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9f8	b9f8	90 f2		bcc $b9ec			bcc 	_FLBCLoop
.d9fa	b9fa	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9fc	b9fc	b0 ee		bcs $b9ec			bcs 	_FLBCLoop
.d9fe	b9fe	38		sec				sec 								; make U/C
.d9ff	b9ff	e9 20		sbc #$20			sbc 	#32
.da01	ba01	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da04	ba04	80 e6		bra $b9ec			bra 	_FLBCLoop
.da06	ba06					_FLBCInQuotes:
.da06	ba06	e8		inx				inx 								; advance
.da07	ba07	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da0a	ba0a	f0 07		beq $ba13			beq 	_FLBCExit 					; exit on EOS
.da0c	ba0c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da0e	ba0e	d0 f6		bne $ba06			bne 	_FLBCInQuotes
.da10	ba10	e8		inx				inx 								; skip over it
.da11	ba11	80 d9		bra $b9ec			bra 	_FLBCLoop
.da13	ba13					_FLBCExit:
.da13	ba13	60		rts				rts
.da14	ba14					TOKExtractLineNumber:
.da14	ba14	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da17	ba17	48		pha				pha
.da18	ba18	ad 27 04	lda $0427			lda 	tokenLineNumber
.da1b	ba1b	48		pha				pha
.da1c	ba1c	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 2
.da1f	ba1f	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 4
.da22	ba22	18		clc				clc 								; add stacked value
.da23	ba23	68		pla				pla
.da24	ba24	6d 27 04	adc $0427			adc 	tokenLineNumber
.da27	ba27	8d 27 04	sta $0427			sta 	tokenLineNumber
.da2a	ba2a	68		pla				pla
.da2b	ba2b	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da2e	ba2e	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da31	ba31	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 10
.da34	ba34	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da37	ba37	e8		inx				inx
.da38	ba38	29 0f		and #$0f			and 	#15 						; add to line #
.da3a	ba3a	18		clc				clc
.da3b	ba3b	6d 27 04	adc $0427			adc 	tokenLineNumber
.da3e	ba3e	8d 27 04	sta $0427			sta 	tokenLineNumber
.da41	ba41	90 03		bcc $ba46			bcc 	_TLENNoCarry
.da43	ba43	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da46	ba46					_TLENNoCarry:
.da46	ba46	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da49	ba49	c9 30		cmp #$30			cmp 	#'0'
.da4b	ba4b	90 04		bcc $ba51			bcc 	_TLENExit
.da4d	ba4d	c9 3a		cmp #$3a			cmp 	#'9'+1
.da4f	ba4f	90 c3		bcc $ba14			bcc 	TOKExtractLineNumber
.da51	ba51					_TLENExit:
.da51	ba51	60		rts				rts
.da52	ba52					_LCLNTimes2:
.da52	ba52	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da55	ba55	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da58	ba58	60		rts				rts
.da59	ba59					TOKWriteByte:
.da59	ba59	da		phx				phx
.da5a	ba5a	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da5d	ba5d	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da60	ba60	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da63	ba63	fa		plx				plx
.da64	ba64	60		rts				rts
.da65	ba65					TOKCheckCreateVariableRecord:
.da65	ba65	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da67	ba67	85 36		sta $36				sta 	0+zTemp0
.da69	ba69	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da6b	ba6b	85 37		sta $37				sta 	1+zTemp0
.da6d	ba6d					_CCVSearch:
.da6d	ba6d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da6f	ba6f	f0 2c		beq $ba9d			beq 	_CCVFail
.da71	ba71	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da75	ba75	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da78	ba78	d0 16		bne $ba90			bne 	_CCVNext
.da7a	ba7a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da7c	ba7c	ae 00 04	ldx $0400			ldx 	identStart
.da7f	ba7f					_CCVCompare:
.da7f	ba7f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da82	ba82	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da84	ba84	e8		inx				inx 								; advance pointers
.da85	ba85	c8		iny				iny
.da86	ba86	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da87	ba87	d0 07		bne $ba90			bne 	_CCVNext  					; didn't match go to next.
.da89	ba89	90 f4		bcc $ba7f			bcc 	_CCVCompare 				; not finished yet.
.da8b	ba8b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da8e	ba8e	f0 41		beq $bad1			beq 	_CCVFound 					; yes, we were successful
.da90	ba90					_CCVNext:
.da90	ba90	18		clc				clc 								; go to next record.
.da91	ba91	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da93	ba93	65 36		adc $36				adc 	zTemp0
.da95	ba95	85 36		sta $36				sta 	zTemp0
.da97	ba97	90 d4		bcc $ba6d			bcc 	_CCVSearch
.da99	ba99	e6 37		inc $37				inc 	zTemp0+1
.da9b	ba9b	80 d0		bra $ba6d			bra 	_CCVSearch
.da9d	ba9d					_CCVFail:
.da9d	ba9d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da9f	ba9f	ad 03 04	lda $0403			lda 	identHash
.daa2	baa2	91 36		sta ($36),y			sta 	(zTemp0),y
.daa4	baa4	c8		iny				iny 								; offset 2 is the type byte
.daa5	baa5	ad 04 04	lda $0404			lda 	identTypeByte
.daa8	baa8	91 36		sta ($36),y			sta 	(zTemp0),y
.daaa	baaa	c8		iny				iny
.daab	baab					_CCVData:
.daab	baab	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daad	baad	91 36		sta ($36),y			sta 	(zTemp0),y
.daaf	baaf	c8		iny				iny
.dab0	bab0	c0 08		cpy #$08			cpy 	#8
.dab2	bab2	90 f7		bcc $baab			bcc 	_CCVData
.dab4	bab4	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dab7	bab7					_CCVCopyName:
.dab7	bab7	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	e8		inx				inx
.dabd	babd	c8		iny				iny
.dabe	babe	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dac1	bac1	d0 f4		bne $bab7			bne 	_CCVCopyName
.dac3	bac3	98		tya				tya 								; patch offset
.dac4	bac4	92 36		sta ($36)			sta 	(zTemp0)
.dac6	bac6	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dac8	bac8	91 36		sta ($36),y			sta 	(zTemp0),y
.daca	baca	88		dey				dey
.dacb	bacb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dacd	bacd	09 80		ora #$80			ora 	#$80
.dacf	bacf	91 36		sta ($36),y			sta 	(zTemp0),y
.dad1	bad1					_CCVFound:
.dad1	bad1	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dad3	bad3	38		sec				sec
.dad4	bad4	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dad6	bad6	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dad8	bad8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dadb	badb	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dadd	badd	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dae0	bae0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dae1	bae1					SNDCheckChannel:
.dae1	bae1	aa		tax				tax
.dae2	bae2	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dae5	bae5	d0 38		bne $bb1f			bne 	_SNDCCExit
.dae7	bae7	da		phx				phx 								; save current channel
.dae8	bae8	8a		txa				txa 								; put in A
.dae9	bae9	20 65 bb	jsr $bb65			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.daec	baec	68		pla				pla 								; channel # in A
.daed	baed	90 30		bcc $bb1f			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.daef	baef	a8		tay				tay 								; Y is the channel #
.daf0	baf0	bd 66 08	lda $0866,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.daf3	baf3	99 65 09	sta $0965,y			sta 	SNDPitchLow,y
.daf6	baf6	bd 67 08	lda $0867,x			lda 	SNDQueue+2,x
.daf9	baf9	99 69 09	sta $0969,y			sta 	SNDPitchHigh,y
.dafc	bafc	bd 68 08	lda $0868,x			lda 	SNDQueue+3,x
.daff	baff	99 6d 09	sta $096d,y			sta 	SNDVolume,y
.db02	bb02	bd 69 08	lda $0869,x			lda 	SNDQueue+4,x
.db05	bb05	99 71 09	sta $0971,y			sta 	SNDTimeLeft,y
.db08	bb08	bd 6a 08	lda $086a,x			lda 	SNDQueue+5,x
.db0b	bb0b	99 75 09	sta $0975,y			sta 	SNDAdjustLow,y
.db0e	bb0e	bd 6b 08	lda $086b,x			lda 	SNDQueue+6,x
.db11	bb11	99 79 09	sta $0979,y			sta 	SNDAdjustHigh,y
.db14	bb14	5a		phy				phy 								; save channel #
.db15	bb15	20 7f bb	jsr $bb7f			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db18	bb18	ce 64 08	dec $0864			dec 	SNDLength 					; reduce the queue length.
.db1b	bb1b	68		pla				pla
.db1c	bb1c	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update channel A
.db1f	bb1f					_SNDCCExit:
.db1f	bb1f	60		rts				rts
.db20	bb20					SNDUpdateNote:
.db20	bb20	aa		tax				tax 								; so we can access records
.db21	bb21	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db22	bb22	0a		asl a				asl 	a
.db23	bb23	0a		asl a				asl 	a
.db24	bb24	0a		asl a				asl 	a
.db25	bb25	0a		asl a				asl 	a
.db26	bb26	8d 63 08	sta $0863			sta 	SNDChannelBits
.db29	bb29	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; are we silent
.db2c	bb2c	f0 2e		beq $bb5c			beq 	_SNDUNIsSilent
.db2e	bb2e	ad 63 08	lda $0863			lda 	SNDChannelBits 				; push channel bits on stack
.db31	bb31	48		pha				pha
.db32	bb32	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db35	bb35	29 0f		and #$0f			and 	#$0F
.db37	bb37	0d 63 08	ora $0863			ora 	SNDChannelBits 				; set channel bits
.db3a	bb3a	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db3c	bb3c	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db3f	bb3f	bd 69 09	lda $0969,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db42	bb42	8d 63 08	sta $0863			sta 	SNDChannelBits
.db45	bb45	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x
.db48	bb48	4e 63 08	lsr $0863			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db4b	bb4b	6a		ror a				ror 	a
.db4c	bb4c	4e 63 08	lsr $0863			lsr 	SNDChannelBits
.db4f	bb4f	6a		ror a				ror 	a
.db50	bb50	4a		lsr a				lsr 	a 							; put in bits 0-5
.db51	bb51	4a		lsr a				lsr 	a
.db52	bb52	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write as rest of pitch register
.db55	bb55	68		pla				pla
.db56	bb56	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db58	bb58	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db5b	bb5b	60		rts				rts
.db5c	bb5c					_SNDUNIsSilent:
.db5c	bb5c	ad 63 08	lda $0863			lda 	SNDChannelBits 				; channel bits
.db5f	bb5f	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db61	bb61	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write to the ports
.db64	bb64	60		rts				rts
.db65	bb65					SNDFindNextNoteForA:
.db65	bb65	ac 64 08	ldy $0864			ldy 	SNDLength 					; queue size into Y
.db68	bb68	f0 13		beq $bb7d			beq 	_SNDFNNFail 				; queue empty.
.db6a	bb6a	a2 00		ldx #$00			ldx 	#0
.db6c	bb6c					_SNDFNNSearch:
.db6c	bb6c	dd 65 08	cmp $0865,x			cmp 	SNDQueue,x 					; does it match the channel
.db6f	bb6f	38		sec				sec
.db70	bb70	f0 0c		beq $bb7e			beq 	_SNDFNNExit 				; if so exit with CS.
.db72	bb72	e8		inx				inx 								; next queue slot.
.db73	bb73	e8		inx				inx
.db74	bb74	e8		inx				inx
.db75	bb75	e8		inx				inx
.db76	bb76	e8		inx				inx
.db77	bb77	e8		inx				inx
.db78	bb78	e8		inx				inx
.db79	bb79	e8		inx				inx
.db7a	bb7a	88		dey				dey 								; done the whole queue
.db7b	bb7b	d0 ef		bne $bb6c			bne 	_SNDFNNSearch 				; no, go back.
.db7d	bb7d					_SNDFNNFail:
.db7d	bb7d	18		clc				clc
.db7e	bb7e					_SNDFNNExit:
.db7e	bb7e	60		rts				rts
.db7f	bb7f					SNDDeleteXFromQueue:
.db7f	bb7f	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db81	bb81	f0 09		beq $bb8c			beq 	_SNDDXExit
.db83	bb83	bd 6d 08	lda $086d,x			lda 	SNDQueue+8,x
.db86	bb86	9d 65 08	sta $0865,x			sta 	SNDQueue,x
.db89	bb89	e8		inx				inx
.db8a	bb8a	80 f3		bra $bb7f			bra 	SNDDeleteXFromQueue
.db8c	bb8c					_SNDDXExit:
.db8c	bb8c	60		rts				rts
.0863						SNDChannelBits:
>0863								.fill 	1
.db8d	bb8d					SNDQueueRequest:
.db8d	bb8d	86 36		stx $36				stx 	zTemp0						; save queue address
.db8f	bb8f	84 37		sty $37				sty 	zTemp0+1
.db91	bb91	ae 64 08	ldx $0864			ldx 	SNDLength 					; queue is full, can't take any more.
.db94	bb94	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db96	bb96	f0 21		beq $bbb9			beq 	_SNDQRExit
.db98	bb98	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db9a	bb9a	48		pha				pha
.db9b	bb9b	8a		txa				txa  								; get offset in queue buffer/
.db9c	bb9c	0a		asl a				asl 	a
.db9d	bb9d	0a		asl a				asl 	a
.db9e	bb9e	0a		asl a				asl 	a
.db9f	bb9f	aa		tax				tax
.dba0	bba0	68		pla				pla 								; get back and push again
.dba1	bba1	48		pha				pha
.dba2	bba2	9d 65 08	sta $0865,x			sta 	SNDQueue+0,x 				; save the channel #
.dba5	bba5	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dba7	bba7					_SNDQCopy:
.dba7	bba7	b1 36		lda ($36),y			lda 	(zTemp0),y
.dba9	bba9	e8		inx				inx
.dbaa	bbaa	c8		iny				iny
.dbab	bbab	9d 65 08	sta $0865,x			sta 	SNDQueue,x
.dbae	bbae	c0 06		cpy #$06			cpy 	#6
.dbb0	bbb0	d0 f5		bne $bba7			bne 	_SNDQCopy
.dbb2	bbb2	ee 64 08	inc $0864			inc 	SNDLength 					; bump queue length.
.dbb5	bbb5	68		pla				pla 								; get channel # back
.dbb6	bbb6	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbb9	bbb9					_SNDQRExit:
.dbb9	bbb9	60		rts				rts
.dbba	bbba					SNDSilenceChannel:
.dbba	bbba	aa		tax				tax 								; zero time left.
.dbbb	bbbb	9e 71 09	stz $0971,x			stz 	SNDTimeLeft,x
.dbbe	bbbe	0a		asl a				asl 	a 							; shift into position
.dbbf	bbbf	0a		asl a				asl 	a
.dbc0	bbc0	0a		asl a				asl 	a
.dbc1	bbc1	0a		asl a				asl 	a
.dbc2	bbc2	0a		asl a				asl 	a
.dbc3	bbc3	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbc5	bbc5	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.dbc8	bbc8	60		rts				rts
.dbc9	bbc9					SNDWritePorts:
.dbc9	bbc9	da		phx				phx 								; save X
.dbca	bbca	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbcc	bbcc	64 01		stz $01				stz 	1 							; access I/O page 0
.dbce	bbce	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbd1	bbd1	8d 10 d6	sta $d610			sta 	$D610
.dbd4	bbd4	86 01		stx $01				stx 	1 							; restore I/O
.dbd6	bbd6	fa		plx				plx 								; restore X
.dbd7	bbd7	60		rts				rts
.dbd8	bbd8					Export_SNDCommand:
.dbd8	bbd8	da		phx				phx 								; save XY
.dbd9	bbd9	5a		phy				phy
.dbda	bbda	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbdc	bbdc	f0 1d		beq $bbfb			beq 	_SNDInitialise
.dbde	bbde	90 28		bcc $bc08			bcc 	_SNDExit
.dbe0	bbe0	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbe2	bbe2	f0 17		beq $bbfb			beq 	_SNDSilence
.dbe4	bbe4	b0 22		bcs $bc08			bcs 	_SNDExit
.dbe6	bbe6	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbe8	bbe8	b0 09		bcs $bbf3			bcs 	_SNDQueryPlay
.dbea	bbea	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbec	bbec	b0 1a		bcs $bc08			bcs 	_SNDExit
.dbee	bbee	20 8d bb	jsr $bb8d			jsr 	SNDQueueRequest
.dbf1	bbf1	80 15		bra $bc08			bra 	_SNDExit
.dbf3	bbf3					_SNDQueryPlay:
.dbf3	bbf3	29 03		and #$03			and 	#3 							; get channel #
.dbf5	bbf5	aa		tax				tax
.dbf6	bbf6	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbf9	bbf9	80 0d		bra $bc08			bra 	_SNDExit
.dbfb	bbfb					_SNDInitialise:
.dbfb	bbfb					_SNDSilence:
.dbfb	bbfb	9c 64 08	stz $0864			stz 	SNDLength 					; empty the queue.
.dbfe	bbfe	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc00	bc00					_SNDSilenceLoop:
.dc00	bc00	48		pha				pha
.dc01	bc01	20 ba bb	jsr $bbba			jsr 	SNDSilenceChannel
.dc04	bc04	68		pla				pla
.dc05	bc05	3a		dec a				dec 	a
.dc06	bc06	10 f8		bpl $bc00			bpl 	_SNDSilenceLoop
.dc08	bc08					_SNDExit:
.dc08	bc08	7a		ply				ply
.dc09	bc09	fa		plx				plx
.dc0a	bc0a	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0864						SNDLength:
>0864								.fill 	1
.0865						SNDQueue:
>0865								.fill 	SNDQueueSize * 8
.0965						SNDPitchLow:
>0965								.fill 	4
.0969						SNDPitchHigh:
>0969								.fill 	4
.096d						SNDVolume:
>096d								.fill 	4
.0971						SNDTimeLeft:
>0971								.fill 	4
.0975						SNDAdjustLow:
>0975								.fill 	4
.0979						SNDAdjustHigh:
>0979								.fill 	4
.dc0b	bc0b					Export_SNDUpdate:
.dc0b	bc0b					PagedSNDUpdate:
.dc0b	bc0b	ad 71 09	lda $0971			lda 	SNDTimeLeft+0 				; look at time remaining
.dc0e	bc0e	f0 05		beq $bc15			beq 	_SNDUNot0 					; not playing
.dc10	bc10	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc12	bc12	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel 			; update it.
.dc15	bc15					_SNDUNot0:
.dc15	bc15	ad 72 09	lda $0972			lda 	SNDTimeLeft+1
.dc18	bc18	f0 05		beq $bc1f			beq 	_SNDUNot1
.dc1a	bc1a	a2 01		ldx #$01			ldx 	#1
.dc1c	bc1c	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc1f	bc1f					_SNDUNot1:
.dc1f	bc1f	ad 73 09	lda $0973			lda 	SNDTimeLeft+2
.dc22	bc22	f0 05		beq $bc29			beq 	_SNDUNot2
.dc24	bc24	a2 02		ldx #$02			ldx 	#2
.dc26	bc26	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc29	bc29					_SNDUNot2:
.dc29	bc29	ad 74 09	lda $0974			lda 	SNDTimeLeft+3
.dc2c	bc2c	f0 05		beq $bc33			beq 	_SNDUNot3
.dc2e	bc2e	a2 03		ldx #$03			ldx 	#3
.dc30	bc30	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc33	bc33					_SNDUNot3:
.dc33	bc33	60		rts				rts
.dc34	bc34					SNDUpdateChannel:
.dc34	bc34	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc36	bc36	f0 2c		beq $bc64			beq 	_SNDUCExit
.dc38	bc38	3a		dec a				dec 	a 							; decrement and update timer
.dc39	bc39	9d 71 09	sta $0971,x			sta 	SNDTimeLeft,x
.dc3c	bc3c	f0 1d		beq $bc5b			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc3e	bc3e	bd 75 09	lda $0975,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc41	bc41	1d 79 09	ora $0979,x			ora 	SNDAdjustHigh,x
.dc44	bc44	f0 1e		beq $bc64			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc46	bc46	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc47	bc47	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x
.dc4a	bc4a	7d 75 09	adc $0975,x			adc 	SNDAdjustLow,x
.dc4d	bc4d	9d 65 09	sta $0965,x			sta 	SNDPitchLow,x
.dc50	bc50	bd 69 09	lda $0969,x			lda 	SNDPitchHigh,x
.dc53	bc53	7d 79 09	adc $0979,x			adc 	SNDAdjustHigh,x
.dc56	bc56	29 03		and #$03			and 	#3
.dc58	bc58	9d 69 09	sta $0969,x			sta 	SNDPitchHigh,x
.dc5b	bc5b					_SNDUCUpdate:
.dc5b	bc5b	8a		txa				txa 								; which channel.
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update the current note
.dc60	bc60	68		pla				pla
.dc61	bc61	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; more to do ?
.dc64	bc64					_SNDUCExit:
.dc64	bc64	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
