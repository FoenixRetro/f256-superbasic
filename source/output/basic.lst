
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 18:08:57 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_STACK = 17
=18					ERRID_STRUCT = 18

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_DOWNTO                           = $a4; $a4 DOWNTO
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 ec 81	jsr $81ec			jsr 	NewCommand 					; erase current program
.8006	20 ab 8e	jsr $8eab			jsr 	BackloadProgram
.8009	4c 7c 82	jmp $827c			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 4f 9a	jsr $9a4f			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	0a 85					.word	ShiftLeft                        ; $00 <<
>8016	04 84					.word	BinaryCompareLessEqual           ; $01 <=
>8018	fa 83					.word	BinaryCompareNotEqual            ; $02 <>
>801a	59 98					.word	SyntaxError                      ; $03 !!3
>801c	59 98					.word	SyntaxError                      ; $04 ><
>801e	0e 84					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	0d 85					.word	ShiftRight                       ; $06 >>
>8022	59 98					.word	SyntaxError                      ; $07 !!7
>8024	59 98					.word	SyntaxError                      ; $08 !!8
>8026	59 98					.word	SyntaxError                      ; $09 !!9
>8028	59 98					.word	SyntaxError                      ; $0a !!10
>802a	59 98					.word	SyntaxError                      ; $0b !!11
>802c	59 98					.word	SyntaxError                      ; $0c !!12
>802e	59 98					.word	SyntaxError                      ; $0d !!13
>8030	59 98					.word	SyntaxError                      ; $0e !!14
>8032	59 98					.word	SyntaxError                      ; $0f !!15
>8034	59 98					.word	SyntaxError                      ; $10 @
>8036	59 98					.word	SyntaxError                      ; $11 !!17
>8038	59 98					.word	SyntaxError                      ; $12 !!18
>803a	59 98					.word	SyntaxError                      ; $13 [
>803c	b9 93					.word	IntegerDivide                    ; $14 \
>803e	59 98					.word	SyntaxError                      ; $15 ]
>8040	93 86					.word	EorInteger                       ; $16 ^
>8042	59 98					.word	SyntaxError                      ; $17 _
>8044	59 98					.word	SyntaxError                      ; $18 `
>8046	59 98					.word	SyntaxError                      ; $19 !!25
>8048	59 98					.word	SyntaxError                      ; $1a !!26
>804a	59 98					.word	SyntaxError                      ; $1b {
>804c	4d 86					.word	OraInteger                       ; $1c |
>804e	59 98					.word	SyntaxError                      ; $1d }
>8050	59 98					.word	SyntaxError                      ; $1e ~
>8052	59 98					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	59 98					.word	SyntaxError                      ; $20
>8056	d9 86					.word	WordIndirect                     ; $21 !
>8058	59 98					.word	SyntaxError                      ; $22 "
>805a	59 98					.word	SyntaxError                      ; $23 #
>805c	59 98					.word	SyntaxError                      ; $24 $
>805e	06 94					.word	IntegerModulus                   ; $25 %
>8060	07 86					.word	AndInteger                       ; $26 &
>8062	59 98					.word	SyntaxError                      ; $27 '
>8064	59 98					.word	SyntaxError                      ; $28 (
>8066	59 98					.word	SyntaxError                      ; $29 )
>8068	7b 94					.word	MulInteger                       ; $2a *
>806a	a1 85					.word	AddInteger                       ; $2b +
>806c	59 98					.word	SyntaxError                      ; $2c ,
>806e	dc 85					.word	SubInteger                       ; $2d -
>8070	59 98					.word	SyntaxError                      ; $2e .
>8072	12 96					.word	FDivideCommand                   ; $2f /
>8074	59 98					.word	SyntaxError                      ; $30 0
>8076	59 98					.word	SyntaxError                      ; $31 1
>8078	59 98					.word	SyntaxError                      ; $32 2
>807a	59 98					.word	SyntaxError                      ; $33 3
>807c	59 98					.word	SyntaxError                      ; $34 4
>807e	59 98					.word	SyntaxError                      ; $35 5
>8080	59 98					.word	SyntaxError                      ; $36 6
>8082	59 98					.word	SyntaxError                      ; $37 7
>8084	59 98					.word	SyntaxError                      ; $38 8
>8086	59 98					.word	SyntaxError                      ; $39 9
>8088	59 98					.word	SyntaxError                      ; $3a :
>808a	59 98					.word	SyntaxError                      ; $3b ;
>808c	e6 83					.word	BinaryCompareLess                ; $3c <
>808e	dc 83					.word	BinaryCompareEqual               ; $3d =
>8090	f0 83					.word	BinaryCompareGreater             ; $3e >
>8092	00 87					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	c7 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	d4 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	59 98					.word	SyntaxError                      ; $82 !2:SH2
>809a	58 97					.word	AbsUnary                         ; $83 ABS(
>809c	43 8b					.word	AllocUnary                       ; $84 ALLOC(
>809e	68 97					.word	AscUnary                         ; $85 ASC(
>80a0	e0 8b					.word	ChrUnary                         ; $86 CHR$(
>80a2	d8 83					.word	UnaryFalse                       ; $87 FALSE
>80a4	75 97					.word	FracUnary                        ; $88 FRAC(
>80a6	8b 97					.word	IntUnary                         ; $89 INT(
>80a8	e1 97					.word	IsValUnary                       ; $8a ISVAL(
>80aa	ba 8c					.word	Unary_Left                       ; $8b LEFT$(
>80ac	9d 97					.word	LenUnary                         ; $8c LEN(
>80ae	e4 8c					.word	Unary_Mid                        ; $8d MID$(
>80b0	7d 8b					.word	Unary_Not                        ; $8e NOT(
>80b2	ca 8c					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	93 8b					.word	Unary_Rnd                        ; $90 RND(
>80b6	b7 97					.word	SgnUnary                         ; $91 SGN(
>80b8	f2 8b					.word	SpcUnary                         ; $92 SPC(
>80ba	0d 8c					.word	Unary_Str                        ; $93 STR$(
>80bc	cc 83					.word	UnaryTrue                        ; $94 TRUE
>80be	d7 97					.word	ValUnary                         ; $95 VAL(
>80c0	59 98					.word	SyntaxError                      ; $96 FOR
>80c2	98 81					.word	IfCommand                        ; $97 IF
>80c4	59 98					.word	SyntaxError                      ; $98 PROC
>80c6	5a 82					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	38 83					.word	Command_WHILE                    ; $9a WHILE
>80ca	59 98					.word	SyntaxError                      ; $9b ENDIF
>80cc	59 98					.word	SyntaxError                      ; $9c ENDPROC
>80ce	59 98					.word	SyntaxError                      ; $9d NEXT
>80d0	63 82					.word	Command_UNTIL                    ; $9e UNTIL
>80d2	59 83					.word	Command_WEND                     ; $9f WEND
>80d4	1c 81					.word	CallCommand                      ; $a0 CALL
>80d6	59 98					.word	SyntaxError                      ; $a1 CLS
>80d8	59 98					.word	SyntaxError                      ; $a2 DATA
>80da	59 98					.word	SyntaxError                      ; $a3 DIM
>80dc	59 98					.word	SyntaxError                      ; $a4 DOWNTO
>80de	67 81					.word	Command_GOSUB                    ; $a5 GOSUB
>80e0	85 81					.word	GotoCommand                      ; $a6 GOTO
>80e2	bd 81					.word	LetCommand                       ; $a7 LET
>80e4	f6 81					.word	Command_Print                    ; $a8 PRINT
>80e6	59 98					.word	SyntaxError                      ; $a9 READ
>80e8	4d 82					.word	RemCommand                       ; $aa REM
>80ea	77 81					.word	Command_RETURN                   ; $ab RETURN
>80ec	59 98					.word	SyntaxError                      ; $ac THEN
>80ee	59 98					.word	SyntaxError                      ; $ad TO
.80f0					VectorSet1:
>80f0	59 98					.word	SyntaxError                      ; $80 !0:EOF
>80f2	59 98					.word	SyntaxError                      ; $81 !1:SH1
>80f4	59 98					.word	SyntaxError                      ; $82 !2:SH2
>80f6	0c 81					.word	AssertCommand                    ; $83 ASSERT
>80f8	2a 81					.word	ClearCommand                     ; $84 CLEAR
>80fa	64 81					.word	EndCommand                       ; $85 END
>80fc	59 98					.word	SyntaxError                      ; $86 LIST
>80fe	ec 81					.word	NewCommand                       ; $87 NEW
>8100	59 98					.word	SyntaxError                      ; $88 RESTORE
>8102	7c 82					.word	CommandRUN                       ; $89 RUN
>8104	59 98					.word	SyntaxError                      ; $8a STOP
.8106					VectorSet2:
>8106	59 98					.word	SyntaxError                      ; $80 !0:EOF
>8108	59 98					.word	SyntaxError                      ; $81 !1:SH1
>810a	59 98					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810c					AssertCommand:
.810c	a2 00		ldx #$00			ldx 	#0
.810e	20 85 8d	jsr $8d85			jsr 	EvaluateInteger 			; the assert test
.8111	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; exit if result is non zero.
.8114	d0 05		bne $811b			bne 	_ACExit
.8116	a9 0a		lda #$0a		lda	#10
.8118	4c 67 83	jmp $8367		jmp	ErrorHandler
.811b					_ACExit:
.811b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811c					CallCommand:
.811c	a2 00		ldx #$00			ldx 	#0
.811e	20 9a 8d	jsr $8d9a			jsr 	Evaluate16BitInteger
.8121	ad 10 06	lda $0610			lda 	NSMantissa1
.8124	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8127	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812a					ClearCommand:
.812a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812c	85 36		sta $36				sta 	0+zTemp0
.812e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8130	85 37		sta $37				sta 	1+zTemp0
.8132					_ClearZeroLoop:
.8132	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8134	f0 18		beq $814e			beq 	_ClearZeroEnd
.8136	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8138	a9 00		lda #$00			lda 	#0
.813a					_ClearOneVariable:
.813a	91 36		sta ($36),y			sta 	(zTemp0),y
.813c	c8		iny				iny
.813d	c0 08		cpy #$08			cpy 	#8
.813f	d0 f9		bne $813a			bne 	_ClearOneVariable
.8141	18		clc				clc 								; go to the next variable
.8142	b2 36		lda ($36)			lda 	(zTemp0)
.8144	65 36		adc $36				adc 	zTemp0
.8146	85 36		sta $36				sta 	zTemp0
.8148	90 e8		bcc $8132			bcc 	_ClearZeroLoop
.814a	e6 37		inc $37				inc 	zTemp0+1
.814c	80 e4		bra $8132			bra 	_ClearZeroLoop
.814e					_ClearZeroEnd:
.814e	18		clc				clc
.814f	a5 36		lda $36				lda 	zTemp0
.8151	69 01		adc #$01			adc 	#1
.8153	8d 0c 07	sta $070c			sta 	lowMemPtr
.8156	a5 37		lda $37				lda 	zTemp0+1
.8158	69 00		adc #$00			adc 	#0
.815a	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815d	20 9e 8e	jsr $8e9e			jsr 	StackReset
.8160	20 db 99	jsr $99db			jsr 	StringSystemInitialise
.8163	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8164					EndCommand:
.8164	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8167					Command_GOSUB:
.8167	a2 00		ldx #$00			ldx 	#0
.8169	20 9a 8d	jsr $8d9a			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.816c	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.816e	20 4b 8e	jsr $8e4b			jsr 	StackOpen 					; create frame
.8171	20 7d 8e	jsr $8e7d			jsr 	STKSaveCodePosition 		; save current position
.8174	4c 8a 81	jmp $818a			jmp 	GotoStackX
.8177					Command_RETURN:
.8177	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8179	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.817b	20 72 8e	jsr $8e72			jsr 	StackCheckFrame
.817e	20 8e 8e	jsr $8e8e			jsr 	STKLoadCodePosition 		; restore code position
.8181	20 64 8e	jsr $8e64			jsr 	StackClose
.8184	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8185					GotoCommand:
.8185	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8187	20 9a 8d	jsr $8d9a			jsr 	Evaluate16BitInteger
.818a					GotoStackX:
.818a	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.818d	48		pha				pha 								; it is slightly inefficient, just in cases.
.818e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8191	fa		plx				plx
.8192	20 6e 93	jsr $936e			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8195	4c 87 82	jmp $8287			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8198					IfCommand:
.8198	a2 00		ldx #$00			ldx 	#0 							; If what.
.819a	20 62 8d	jsr $8d62			jsr 	EvaluateNumber
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 ac		cmp #$ac			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.81a1	f0 04		beq $81a7			beq 	_IfOldStyle
.81a3	c9 a6		cmp #$a6			cmp 	#KWD_GOTO
.81a5	d0 13		bne $81ba			bne 	_IfStructured
.81a7					_IfOldStyle:
.81a7	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; is it zero
.81aa	f0 0b		beq $81b7			beq 	_IfFail 					; if fail, go to next line
.81ac	b1 30		lda ($30),y			lda 	(codePtr),y
.81ae	c8		iny				iny 								; consume GOTO or THEN
.81af	c9 a6		cmp #$a6			cmp 	#KWD_GOTO
.81b1	f0 01		beq $81b4			beq 	_IfGoto
.81b3	60		rts				rts 								; if THEN just continue
.81b4					_IfGoto:
.81b4	4c 85 81	jmp $8185			jmp 	GotoCommand
.81b7					_IfFail:
.81b7	4c c7 82	jmp $82c7			jmp 	EOLCommand
.81ba					_IfStructured:
>81ba	db						.byte 	$DB 						; causes a break in the emulator
.81bb	80 fd		bra $81ba			bra 	_IfStructured

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.81bd					LetCommand:
.81bd	a2 00		ldx #$00			ldx 	#0
.81bf	ad 51 87	lda $8751			lda 	PrecedenceLevel+"*"			; precedence > this
.81c2	20 6b 87	jsr $876b			jsr 	EvaluateExpressionAtPrecedence
.81c5	a9 3d		lda #$3d			lda 	#"=" 						; check =
.81c7	20 b0 93	jsr $93b0			jsr 	CheckNextA
.81ca	e8		inx				inx 								; RHS
.81cb	20 69 87	jsr $8769			jsr 	EvaluateExpression
.81ce	ca		dex				dex
.81cf	20 d3 81	jsr $81d3			jsr 	AssignVariable
.81d2	60		rts				rts
.81d3					AssignVariable:
.81d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.81d6	48		pha				pha 								; save a copy
.81d7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.81da	29 10		and #$10			and 	#NSBIsString
.81dc	d0 0b		bne $81e9			bne 	_ASError
.81de	68		pla				pla 								; get back
.81df	29 10		and #$10			and 	#NSBIsString 				; check type
.81e1	d0 03		bne $81e6			bne 	_ASString
.81e3	4c a6 87	jmp $87a6			jmp 	AssignNumber
.81e6					_ASString:
.81e6	4c 14 88	jmp $8814			jmp 	AssignString
.81e9					_ASError:
.81e9	4c 63 98	jmp $9863			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.81ec					NewCommand:
.81ec	20 1d 93	jsr $931d			jsr 	MemoryNew
.81ef	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81f2	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear everything.
.81f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.81f6					Command_Print:
.81f6	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.81f7					_CPLoop:
.81f7	08		php				php 								; save last action flag
.81f8	b1 30		lda ($30),y			lda 	(codePtr),y
.81fa	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81fc	f0 46		beq $8244			beq 	_CPExit
.81fe	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8200	f0 42		beq $8244			beq 	_CPExit
.8202	68		pla				pla 								; throw last action flag
.8203	b1 30		lda ($30),y			lda 	(codePtr),y
.8205	c8		iny				iny
.8206	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8208	f0 37		beq $8241			beq 	_CPContinueWithSameLine
.820a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.820c	f0 2e		beq $823c			beq 	_CPTab
.820e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8210	f0 26		beq $8238			beq 	_CPNewLine
.8212	88		dey				dey 								; undo the get.
.8213	a2 00		ldx #$00			ldx 	#0
.8215	20 59 8d	jsr $8d59			jsr 	EvaluateValue 				; get a value into slot 0
.8218	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.821b	29 10		and #$10			and 	#NSBIsString
.821d	f0 0b		beq $822a			beq 	_CPNumber
.821f	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8222	ad 08 06	lda $0608			lda 	NSMantissa0
.8225	20 b9 83	jsr $83b9			jsr 	PrintStringXA
.8228	80 cc		bra $81f6			bra 	Command_Print 				; loop round clearing carry so NL if end
.822a					_CPNumber:
.822a	a9 05		lda #$05			lda 	#5 							; maximum decimals
.822c	20 2f 8c	jsr $8c2f			jsr 	ConvertNumberToString 		; convert to string
.822f	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8231	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8233	20 b9 83	jsr $83b9			jsr 	PrintStringXA
.8236	80 be		bra $81f6			bra 	Command_Print 				; loop round clearing carry so NL if end
.8238					_CPNewLine:
.8238	a9 0d		lda #$0d			lda 	#13
.823a	80 02		bra $823e			bra 	_CPPrintChar
.823c					_CPTab:
.823c	a9 09		lda #$09			lda 	#9 							; print TAB
.823e					_CPPrintChar:
.823e	20 4f 9a	jsr $9a4f			jsr 	EXTPrintCharacter
.8241					_CPContinueWithSameLine:
.8241	38		sec				sec 								; loop round with carry set, which
.8242	80 b3		bra $81f7			bra 	_CPLoop 					; will inhibit final CR
.8244					_CPExit:
.8244	28		plp				plp 								; get last action flag
.8245	b0 05		bcs $824c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8247	a9 0d		lda #$0d			lda 	#13 						; print new line
.8249	20 4f 9a	jsr $9a4f			jsr 	EXTPrintCharacter
.824c					_CPExit2:
.824c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.824d					RemCommand:
.824d	b1 30		lda ($30),y			lda 	(codePtr),y
.824f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8251	d0 06		bne $8259			bne 	_RMExit
.8253	c8		iny				iny
.8254	98		tya				tya
.8255	38		sec				sec
.8256	71 30		adc ($30),y			adc 	(codePtr),y
.8258	a8		tay				tay
.8259					_RMExit:
.8259	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.825a					Command_REPEAT:
.825a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.825c	20 4b 8e	jsr $8e4b			jsr 	StackOpen
.825f	20 7d 8e	jsr $8e7d			jsr 	STKSaveCodePosition 		; save loop position
.8262	60		rts				rts
.8263					Command_UNTIL:
.8263	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8265	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8267	20 72 8e	jsr $8e72			jsr 	StackCheckFrame
.826a	a2 00		ldx #$00			ldx 	#0
.826c	20 62 8d	jsr $8d62			jsr 	EvaluateNumber 				; work out the number
.826f	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; check if zero
.8272	f0 04		beq $8278			beq 	_CULoopBack 				; if so keep looping
.8274	20 64 8e	jsr $8e64			jsr 	StackClose		 			; return
.8277	60		rts				rts
.8278					_CULoopBack:
.8278	20 8e 8e	jsr $8e8e			jsr 	STKLoadCodePosition 		; loop back
.827b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.827c					CommandRUN:
.827c	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.827f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8281	85 30		sta $30				sta 	codePtr
.8283	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8285	85 31		sta $31				sta 	codePtr+1
.8287					RUNNewLine:
.8287	b2 30		lda ($30)			lda 	(codePtr)
.8289	f0 39		beq $82c4			beq 	CRNoProgram         		; no then END.
.828b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.828d	9a		txs				txs
.828e					RUNCodePointerLine:
.828e	a0 02		ldy #$02			ldy 	#2 							; start of program
.8290					_CRIncMainLoop:
.8290	c8		iny				iny
.8291					_CRMainLoop:
.8291	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8294	b1 30		lda ($30),y			lda 	(codePtr),y
.8296	10 10		bpl $82a8			bpl 	_CRNotKeyword
.8298	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.829a	b0 04		bcs $82a0			bcs 	_CRIsKeyword
.829c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.829e	b0 1e		bcs $82be			bcs		_CRSyntaxError
.82a0					_CRIsKeyword:
.82a0	c8		iny				iny 								; consume command
.82a1	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.82a2	aa		tax				tax 								; put in X for vector jump
.82a3	20 c1 82	jsr $82c1			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.82a6	80 e9		bra $8291			bra 	_CRMainLoop 				; and loop round
.82a8					_CRNotKeyword:
.82a8	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.82aa	f0 e4		beq $8290			beq 	_CRIncMainLoop
.82ac	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.82ae	90 05		bcc $82b5			bcc 	_CRNotVariable
.82b0					_CRGoLet:
.82b0	20 bd 81	jsr $81bd			jsr 	LetCommand
.82b3	80 dc		bra $8291			bra 	_CRMainLoop
.82b5					_CRNotVariable:
.82b5	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.82b7	f0 f7		beq $82b0			beq 	_CRGoLet
.82b9	c9 21		cmp #$21			cmp 	#KWD_PLING
.82bb	f0 f3		beq $82b0			beq 	_CRGoLet
>82bd	db						.byte 	$DB 						; causes a break in the emulator
.82be					_CRSyntaxError:
.82be	4c 59 98	jmp $9859			jmp 	SyntaxError
.82c1					_CRCallVector0:
.82c1	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.82c4					CRNoProgram:
.82c4	4c 64 81	jmp $8164			jmp 	EndCommand
.82c7					EOLCommand:
.82c7	18		clc				clc
.82c8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.82ca	65 30		adc $30				adc 	codePtr
.82cc	85 30		sta $30				sta 	codePtr
.82ce	90 02		bcc $82d2			bcc 	_CREExit
.82d0	e6 31		inc $31				inc 	codePtr+1
.82d2					_CREExit:
.82d2	80 b3		bra $8287			bra 	RunNewLine
.82d4					Shift1Command:
.82d4	b1 30		lda ($30),y			lda 	(codePtr),y
.82d6	c8		iny				iny
.82d7	0a		asl a				asl 	a
.82d8	aa		tax				tax
.82d9	7c f0 80	jmp ($80f0,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/scanforward.asm

.82dc					ScanForward:
.82dc	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.82de	86 37		stx $37				stx 	zTemp0+1
.82e0	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.82e2					_ScanLoop:
.82e2	b1 30		lda ($30),y			lda 	(codePtr),y
.82e4	c8		iny				iny
.82e5	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.82e7	d0 09		bne $82f2			bne 	_ScanGoNext
.82e9	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.82eb	f0 04		beq $82f1			beq 	_ScanMatch
.82ed	c5 37		cmp $37				cmp 	zTemp0+1
.82ef	d0 01		bne $82f2			bne 	_ScanGoNext
.82f1					_ScanMatch:
.82f1	60		rts				rts
.82f2					_ScanGoNext:
.82f2	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.82f4	90 ec		bcc $82e2			bcc 	_ScanLoop
.82f6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.82f8	90 18		bcc $8312			bcc 	_ScanSkipOne
.82fa	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.82fc	b0 2f		bcs $832d			bcs 	_ScanSkipData
.82fe	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8300	90 e0		bcc $82e2			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8302	c9 a0		cmp #$a0			cmp 	#KWC_LAST_STRUCTURE+1
.8304	b0 dc		bcs $82e2			bcs 	_ScanLoop
.8306	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8308	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.830a	b0 d6		bcs $82e2			bcs 	_ScanLoop
.830c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.830e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8310	80 d0		bra $82e2			bra 	_ScanLoop
.8312					_ScanSkipOne:
.8312	c8		iny				iny 								; consume the extra one.
.8313	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8315	d0 cb		bne $82e2			bne 	_ScanLoop
.8317	18		clc				clc
.8318	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.831a	65 30		adc $30				adc 	codePtr
.831c	85 30		sta $30				sta 	codePtr
.831e	90 02		bcc $8322			bcc 	_CREExit
.8320	e6 31		inc $31				inc 	codePtr+1
.8322					_CREExit:
.8322	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8324	b2 30		lda ($30)			lda 	(codePtr)
.8326	d0 ba		bne $82e2			bne 	_ScanLoop 					; if not zero, more to scan
.8328	a9 12		lda #$12		lda	#18
.832a	4c 67 83	jmp $8367		jmp	ErrorHandler
.832d					_ScanSkipData:
.832d	c8		iny				iny 								; point at data length.
.832e	84 39		sty $39				sty 	zTemp1+1 					; add that to Y - this is done because of macros
.8330	b1 30		lda ($30),y			lda 	(codePtr),y
.8332	38		sec				sec 								; add extra one for the length
.8333	65 39		adc $39				adc 	zTemp1+1
.8335	a8		tay				tay
.8336	80 aa		bra $82e2			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8338					Command_WHILE:
.8338	5a		phy				phy 								; save position of the test
.8339	a2 00		ldx #$00			ldx 	#0
.833b	20 62 8d	jsr $8d62			jsr 	EvaluateNumber 				; work out the number
.833e	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; check if zero
.8341	f0 0e		beq $8351			beq 	_WHExitLoop 				; if so exit the loop
.8343	98		tya				tya 								; position *after* test.
.8344	7a		ply				ply 								; restore position before test, at WHILE
.8345	88		dey				dey
.8346	48		pha				pha 								; push after test on the stack
.8347	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8349	20 4b 8e	jsr $8e4b			jsr 	StackOpen
.834c	20 7d 8e	jsr $8e7d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.834f	7a		ply				ply 								; restore the position *after* the test
.8350	60		rts				rts
.8351					_WHExitLoop:
.8351	68		pla				pla 								; throw post loop position
.8352	a9 9f		lda #$9f			lda 	#KWD_WEND 					; scan forward past WEND
.8354	aa		tax				tax
.8355	20 dc 82	jsr $82dc			jsr 	ScanForward
.8358	60		rts				rts
.8359					Command_WEND:
.8359	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.835b	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.835d	20 72 8e	jsr $8e72			jsr 	StackCheckFrame
.8360	20 8e 8e	jsr $8e8e			jsr 	STKLoadCodePosition 		; loop back
.8363	20 64 8e	jsr $8e64			jsr 	StackClose		 			; erase the frame
.8366	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.93a0					CheckRightBracket:
.93a0	b1 30		lda ($30),y			lda 	(codePtr),y
.93a2	c8		iny				iny
.93a3	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.93a5	d0 0f		bne $93b6			bne 	CNAFail
.93a7	60		rts				rts
.93a8					CheckComma:
.93a8	b1 30		lda ($30),y			lda 	(codePtr),y
.93aa	c8		iny				iny
.93ab	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.93ad	d0 07		bne $93b6			bne 	CNAFail
.93af	60		rts				rts
.93b0					CheckNextA:
.93b0	d1 30		cmp ($30),y			cmp 	(codePtr),y
.93b2	d0 02		bne $93b6			bne 	CNAFail
.93b4	c8		iny				iny 								; skip character
.93b5	60		rts				rts 								; and exit
.93b6					CNAFail:
.93b6	4c 59 98	jmp $9859			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8367					ErrorHandler:
.8367	a8		tay				tay 								; find the error text
.8368	f0 42		beq $83ac			beq 	_EHEnd
.836a	a2 00		ldx #$00			ldx 	#0
.836c					_EHFind:
.836c	88		dey				dey 								; found the error text ?
.836d	f0 0a		beq $8379			beq 	_EHFound
.836f					_EHFindZero:
.836f	bd 72 98	lda $9872,x			lda 	ErrorText,x 				; find the next error
.8372	e8		inx				inx
.8373	c9 00		cmp #$00			cmp 	#0
.8375	d0 f8		bne $836f			bne 	_EHFindZero
.8377	80 f3		bra $836c			bra 	_EHFind
.8379					_EHFound:
.8379	bd 72 98	lda $9872,x			lda 	ErrorText,x 				; print the message
.837c	20 4f 9a	jsr $9a4f			jsr 	EXTPrintCharacter
.837f	e8		inx				inx
.8380	bd 72 98	lda $9872,x			lda 	ErrorText,x
.8383	d0 f4		bne $8379			bne 	_EHFound
.8385	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8387	b1 30		lda ($30),y			lda 	(codePtr),y
.8389	d0 05		bne $8390			bne 	_EHAtMsg
.838b	c8		iny				iny
.838c	b1 30		lda ($30),y			lda 	(codePtr),y
.838e	f0 17		beq $83a7			beq 	_EHCREnd
.8390					_EHAtMsg:
.8390	a2 83		ldx #$83			ldx 	#_AtMsg >> 8 				; print " at "
.8392	a9 af		lda #$af			lda 	#_AtMsg & $FF
.8394	20 b9 83	jsr $83b9			jsr 	PrintStringXA
.8397	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8399	b1 30		lda ($30),y			lda 	(codePtr),y
.839b	48		pha				pha
.839c	c8		iny				iny
.839d	b1 30		lda ($30),y			lda 	(codePtr),y
.839f	aa		tax				tax
.83a0	68		pla				pla
.83a1	20 fc 94	jsr $94fc			jsr 	ConvertInt16 				; convert XA to string
.83a4	20 b9 83	jsr $83b9			jsr 	PrintStringXA 				; and print it.
.83a7					_EHCREnd:
.83a7	a9 0d		lda #$0d			lda 	#13 						; new line
.83a9	20 4f 9a	jsr $9a4f			jsr 	EXTPrintCharacter
.83ac					_EHEnd:
.83ac	4c 0c 80	jmp $800c			jmp 	WarmStart
>83af	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>83b7	20 00
.83b9					PrintStringXA:
.83b9	5a		phy				phy
.83ba	86 37		stx $37				stx 	zTemp0+1
.83bc	85 36		sta $36				sta 	zTemp0
.83be	a0 00		ldy #$00			ldy 	#0
.83c0					_PSXALoop:
.83c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.83c2	f0 06		beq $83ca			beq 	_PSXAExit
.83c4	20 4f 9a	jsr $9a4f			jsr 	EXTPrintCharacter
.83c7	c8		iny				iny
.83c8	80 f6		bra $83c0			bra 	_PSXALoop
.83ca					_PSXAExit:
.83ca	7a		ply				ply
.83cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.83cc					UnaryTrue:
.83cc	fa		plx				plx
.83cd					ReturnTrue:
.83cd	a9 01		lda #$01			lda 	#1  						; set to 1
.83cf	20 10 8e	jsr $8e10			jsr 	NSMSetByte
.83d2	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.83d4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.83d7	60		rts				rts
.83d8					UnaryFalse:
.83d8	fa		plx				plx
.83d9					ReturnFalse:
.83d9	4c 0e 8e	jmp $8e0e			jmp 	NSMSetZero 					; set it all to zero
.83dc					BinaryCompareEqual:
.83dc	fa		plx				plx
.83dd	20 18 84	jsr $8418			jsr 	CompareBaseCode
.83e0	c9 00		cmp #$00			cmp 	#0
.83e2	f0 e9		beq $83cd			beq 	ReturnTrue
.83e4	80 f3		bra $83d9			bra 	ReturnFalse
.83e6					BinaryCompareLess:
.83e6	fa		plx				plx
.83e7	20 18 84	jsr $8418			jsr 	CompareBaseCode
.83ea	c9 ff		cmp #$ff			cmp 	#$FF
.83ec	f0 df		beq $83cd			beq 	ReturnTrue
.83ee	80 e9		bra $83d9			bra 	ReturnFalse
.83f0					BinaryCompareGreater:
.83f0	fa		plx				plx
.83f1	20 18 84	jsr $8418			jsr 	CompareBaseCode
.83f4	c9 01		cmp #$01			cmp 	#1
.83f6	f0 d5		beq $83cd			beq 	ReturnTrue
.83f8	80 df		bra $83d9			bra 	ReturnFalse
.83fa					BinaryCompareNotEqual:
.83fa	fa		plx				plx
.83fb	20 18 84	jsr $8418			jsr 	CompareBaseCode
.83fe	c9 00		cmp #$00			cmp 	#0
.8400	d0 cb		bne $83cd			bne 	ReturnTrue
.8402	80 d5		bra $83d9			bra 	ReturnFalse
.8404					BinaryCompareLessEqual:
.8404	fa		plx				plx
.8405	20 18 84	jsr $8418			jsr 	CompareBaseCode
.8408	c9 01		cmp #$01			cmp 	#1
.840a	d0 c1		bne $83cd			bne 	ReturnTrue
.840c	80 cb		bra $83d9			bra 	ReturnFalse
.840e					BinaryCompareGreaterEqual:
.840e	fa		plx				plx
.840f	20 18 84	jsr $8418			jsr 	CompareBaseCode
.8412	c9 ff		cmp #$ff			cmp 	#$FF
.8414	d0 b7		bne $83cd			bne 	ReturnTrue
.8416	80 c1		bra $83d9			bra 	ReturnFalse
.8418					CompareBaseCode:
.8418	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; make both values if references.
.841b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.841e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8421	29 10		and #$10			and 	#NSTString
.8423	d0 40		bne $8465			bne 	_CBCString
.8425	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8428	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.842b	d0 3b		bne $8468			bne 	_CBCFloat
.842d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8430	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8433	29 08		and #$08			and 	#NSTFloat
.8435	d0 31		bne $8468			bne 	_CBCFloat
.8437	20 6b 84	jsr $846b			jsr 	CompareFixMinusZero
.843a	e8		inx				inx
.843b	20 6b 84	jsr $846b			jsr 	CompareFixMinusZero
.843e	ca		dex				dex
.843f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8442	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8445	10 0b		bpl $8452			bpl 	_CDCSameSign
.8447	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.844a	30 16		bmi $8462			bmi 	_CBCLess 					; return $FF
.844c					_CBCGreater:
.844c	a9 01		lda #$01			lda 	#1
.844e	60		rts				rts
.844f					_CBCEqual:
.844f	a9 00		lda #$00			lda 	#0
.8451	60		rts				rts
.8452					_CDCSameSign:
.8452	20 7b 85	jsr $857b			jsr 	SubTopTwoStack 				; unsigned subtract
.8455	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; or the mantissa together
.8458	f0 f5		beq $844f			beq 	_CBCEqual 					; -0 == 0
.845a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.845d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8460	10 ea		bpl $844c			bpl 	_CBCGreater
.8462					_CBCLess:
.8462	a9 ff		lda #$ff			lda 	#$FF
.8464	60		rts				rts
.8465					_CBCString:
.8465	4c d1 84	jmp $84d1			jmp 	CompareStrings
.8468					_CBCFloat:
.8468	4c f8 95	jmp $95f8			jmp 	CompareFloat
.846b					CompareFixMinusZero:
.846b	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero
.846e	d0 03		bne $8473			bne 	_CFXMZNotZero
.8470	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8473					_CFXMZNotZero:
.8473	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8474					StringConcat:
.8474	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8477	3d 01 06	and $0601,x			and 	NSStatus+1,x
.847a	29 18		and #$18			and 	#NSBTypeMask
.847c	c9 10		cmp #$10			cmp 	#NSTString
.847e	d0 4e		bne $84ce			bne		_SCType
.8480	64 38		stz $38				stz 	zTemp1 						; counting total length
.8482	e8		inx				inx
.8483	20 a1 84	jsr $84a1			jsr 	_SCSetupZ0 					; setup for second
.8486	20 ac 84	jsr $84ac			jsr 	_SCLengthZ0 				; length for second
.8489	ca		dex				dex
.848a	20 a1 84	jsr $84a1			jsr 	_SCSetupZ0 					; setup for first
.848d	20 ac 84	jsr $84ac			jsr 	_SCLengthZ0 				; length for first
.8490	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8492	20 fc 99	jsr $99fc			jsr 	StringTempAllocate
.8495	20 bf 84	jsr $84bf			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8498	e8		inx				inx
.8499	20 a1 84	jsr $84a1			jsr 	_SCSetupZ0 					; copy second out
.849c	20 bf 84	jsr $84bf			jsr 	_SCCopy
.849f	ca		dex				dex
.84a0	60		rts				rts
.84a1					_SCSetupZ0:
.84a1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.84a4	85 36		sta $36				sta 	zTemp0
.84a6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84a9	85 37		sta $37				sta 	zTemp0+1
.84ab	60		rts				rts
.84ac					_SCLengthZ0:
.84ac	5a		phy				phy
.84ad	a0 00		ldy #$00			ldy 	#0
.84af					_SCLenLoop:
.84af	b1 36		lda ($36),y			lda 	(zTemp0),y
.84b1	f0 0a		beq $84bd			beq 	_SCLExit
.84b3	c8		iny				iny
.84b4	e6 38		inc $38				inc 	zTemp1
.84b6	10 f7		bpl $84af			bpl		_SCLenLoop
.84b8	a9 09		lda #$09		lda	#9
.84ba	4c 67 83	jmp $8367		jmp	ErrorHandler
.84bd					_SCLExit:
.84bd	7a		ply				ply
.84be	60		rts				rts
.84bf					_SCCopy:
.84bf	5a		phy				phy
.84c0	a0 00		ldy #$00			ldy 	#0
.84c2					_SCCopyLoop:
.84c2	b1 36		lda ($36),y			lda 	(zTemp0),y
.84c4	f0 06		beq $84cc			beq 	_SCCExit
.84c6	20 3a 9a	jsr $9a3a			jsr 	StringTempWrite
.84c9	c8		iny				iny
.84ca	80 f6		bra $84c2			bra 	_SCCopyLoop
.84cc					_SCCExit:
.84cc	7a		ply				ply
.84cd	60		rts				rts
.84ce					_SCType:
.84ce	4c 63 98	jmp $9863			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.93b9					IntegerDivide:
.93b9	fa		plx				plx
.93ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.93bd	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.93c0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93c1	0a		asl a				asl 	a
.93c2	10 05		bpl $93c9			bpl 	_NotRef
.93c4	48		pha				pha
.93c5	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93c8	68		pla				pla
.93c9					_NotRef:
.93c9	0a		asl a				asl 	a
.93ca	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93cc	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93cf	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.93d2	f0 03		beq $93d7			beq 	_IntegerCode 				; if clear, then we have two integers
.93d4	4c 63 98	jmp $9863			jmp 	TypeError 					; anything else, type mismatch.
.93d7					_IntegerCode:
.93d7	20 f9 93	jsr $93f9			jsr 	CheckDivideZero 			; do div zero check
.93da	20 31 94	jsr $9431			jsr 	Int32Divide 				; do the division
.93dd	20 ee 94	jsr $94ee			jsr 	CalculateSign 				; calculate result sign
.93e0					NSMCopyPlusTwoToZero:
.93e0	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.93e3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93e6	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.93e9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93ec	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.93ef	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93f2	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.93f5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.93f8	60		rts				rts
.93f9					CheckDivideZero:
.93f9	e8		inx				inx
.93fa	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero
.93fd	f0 02		beq $9401			beq 	_CDVError
.93ff	ca		dex				dex
.9400	60		rts				rts
.9401					_CDVError:
.9401	a9 03		lda #$03		lda	#3
.9403	4c 67 83	jmp $8367		jmp	ErrorHandler
.9406					IntegerModulus:
.9406	fa		plx				plx
.9407	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.940a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.940d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.940e	0a		asl a				asl 	a
.940f	10 05		bpl $9416			bpl 	_NotRef
.9411	48		pha				pha
.9412	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9415	68		pla				pla
.9416					_NotRef:
.9416	0a		asl a				asl 	a
.9417	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9419	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.941c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.941f	f0 03		beq $9424			beq 	_IntegerCode 				; if clear, then we have two integers
.9421	4c 63 98	jmp $9863			jmp 	TypeError 					; anything else, type mismatch.
.9424					_IntegerCode:
.9424	20 f9 93	jsr $93f9			jsr 	CheckDivideZero 			; do div zero check
.9427	20 31 94	jsr $9431			jsr 	Int32Divide 				; do the division
.942a	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.942d	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9430	60		rts				rts
.9431					Int32Divide:
.9431	48		pha				pha 								; save AXY
.9432	5a		phy				phy
.9433	20 e5 8d	jsr $8de5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9436	20 0a 8e	jsr $8e0a			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9439	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.943b					_I32DivideLoop:
.943b	e8		inx				inx
.943c	e8		inx				inx
.943d	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9440	ca		dex				dex
.9441	ca		dex				dex
.9442	20 24 8e	jsr $8e24			jsr 	NSMRotateLeft
.9445	20 71 94	jsr $9471			jsr 	DivideCheckSubtract 		; check if subtract possible
.9448	90 03		bcc $944d			bcc 	_I32DivideNoCarryIn
.944a	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.944d					_I32DivideNoCarryIn:
.944d	88		dey				dey 								; loop round till division completed.
.944e	d0 eb		bne $943b			bne 	_I32DivideLoop
.9450	7a		ply				ply 								; restore AXY and exit
.9451	68		pla				pla
.9452	60		rts				rts
.9453					Int32ShiftDivide:
.9453	48		pha				pha 								; save AY
.9454	5a		phy				phy
.9455	e8		inx				inx 								; clear S[X+2]
.9456	e8		inx				inx
.9457	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero
.945a	ca		dex				dex
.945b	ca		dex				dex
.945c	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.945e					_I32SDLoop:
.945e	20 71 94	jsr $9471			jsr 	DivideCheckSubtract 		; check if subtract possible
.9461	e8		inx				inx
.9462	e8		inx				inx
.9463	20 24 8e	jsr $8e24			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9466	ca		dex				dex
.9467	ca		dex				dex
.9468	20 24 8e	jsr $8e24			jsr 	NSMRotateLeft
.946b	88		dey				dey 	 							; do 31 times
.946c	d0 f0		bne $945e			bne 	_I32SDLoop
.946e	7a		ply				ply 								; restore AY and exit
.946f	68		pla				pla
.9470	60		rts				rts
.9471					DivideCheckSubtract:
.9471	20 7b 85	jsr $857b			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9474	b0 04		bcs $947a			bcs 	_DCSExit 					; if carry set, then could do, exit
.9476	20 55 85	jsr $8555			jsr 	AddTopTwoStack 				; add it back in
.9479	18		clc				clc 								; and return False
.947a					_DCSExit:
.947a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.947b					MulInteger:
.947b	fa		plx				plx
.947c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.947f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9482	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9483	0a		asl a				asl 	a
.9484	10 05		bpl $948b			bpl 	_NotRef
.9486	48		pha				pha
.9487	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.948a	68		pla				pla
.948b					_NotRef:
.948b	0a		asl a				asl 	a 							; put MSB of type into A:7
.948c	30 0b		bmi $9499			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.948e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9491	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9494	f0 06		beq $949c			beq 	_IntegerCode 				; if clear, then we have two integers
.9496	4c cf 96	jmp $96cf			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9499					_StringData:
.9499	4c 6d 98	jmp $986d			jmp 	NotDoneError							; at least one string - don't know both are strings.
.949c					_IntegerCode:
.949c	20 a9 94	jsr $94a9			jsr 	MultiplyShort
.949f	c9 00		cmp #$00			cmp 	#0
.94a1	f0 05		beq $94a8			beq 	_MIExit
.94a3	a9 04		lda #$04		lda	#4
.94a5	4c 67 83	jmp $8367		jmp	ErrorHandler
.94a8					_MIExit:
.94a8	60		rts				rts
.94a9					MultiplyShort:
.94a9	5a		phy				phy 								; save Y
.94aa	20 e5 8d	jsr $8de5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.94ad	20 0a 8e	jsr $8e0a			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.94b0	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.94b2					_I32MLoop:
.94b2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.94b5	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.94b8	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.94bb	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.94be	f0 28		beq $94e8			beq 	_I32MExit 					; exit if zero
.94c0	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.94c3	29 01		and #$01			and 	#1
.94c5	f0 0e		beq $94d5			beq 	_I32MNoAdd
.94c7	20 55 85	jsr $8555			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.94ca	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.94cd	10 06		bpl $94d5			bpl 	_I32MNoAdd
.94cf					_I32ShiftRight:
.94cf	20 31 8e	jsr $8e31			jsr 	NSMShiftRight 				; shift S[X] right
.94d2	c8		iny				iny 								; increment shift count
.94d3	80 0a		bra $94df			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.94d5					_I32MNoAdd:
.94d5	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.94d8	70 f5		bvs $94cf			bvs 	_I32ShiftRight 				; instead.
.94da	e8		inx				inx
.94db	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.94de	ca		dex				dex
.94df					_I32MShiftUpper:
.94df	e8		inx				inx 								; shift S[X+2] right
.94e0	e8		inx				inx
.94e1	20 31 8e	jsr $8e31			jsr 	NSMShiftRight
.94e4	ca		dex				dex
.94e5	ca		dex				dex
.94e6	80 ca		bra $94b2			bra 	_I32MLoop 					; try again.
.94e8					_I32MExit:
.94e8	20 ee 94	jsr $94ee			jsr 	CalculateSign
.94eb	98		tya				tya 								; shift in A
.94ec	7a		ply				ply 								; restore Y and exit
.94ed	60		rts				rts
.94ee					CalculateSign:
.94ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.94f1	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.94f4	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.94f7	0a		asl a				asl 	a 							; shift bit 7 into carry
.94f8	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.94fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.84d1					CompareStrings:
.84d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.84d4	3d 01 06	and $0601,x			and 	NSStatus+1,x
.84d7	29 10		and #$10			and 	#NSBIsString
.84d9	f0 2c		beq $8507			beq 	_CSTypeError
.84db	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.84de	85 36		sta $36				sta 	zTemp0
.84e0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84e3	85 37		sta $37				sta 	zTemp0+1
.84e5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.84e8	85 38		sta $38				sta 	zTemp1
.84ea	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.84ed	85 39		sta $39				sta 	zTemp1+1
.84ef	5a		phy				phy 								; save Y so we can access strings
.84f0	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.84f2					_CSLoop:
.84f2	c8		iny				iny
.84f3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.84f5	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.84f7	d0 06		bne $84ff			bne 	_CSDifferent
.84f9	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.84fb	d0 f5		bne $84f2			bne 	_CSLoop 					; still comparing
.84fd					_CSExit:
.84fd	7a		ply				ply 								; reached end, return zero in A from EOS
.84fe	60		rts				rts
.84ff					_CSDifferent:
.84ff	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8501	90 fa		bcc $84fd			bcc		_CSExit
.8503	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8505	80 f6		bra $84fd			bra 	_CSExit
.8507					_CSTypeError:
.8507	4c 63 98	jmp $9863			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.850a					ShiftLeft:
.850a	38		sec				sec
.850b	80 01		bra $850e			bra 	ShiftMain
.850d					ShiftRight:
.850d	18		clc				clc
.850e					ShiftMain:
.850e	fa		plx				plx 								; restore X
.850f	08		php				php 								; save direction
.8510	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8513	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8516	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8517	0a		asl a				asl 	a
.8518	10 05		bpl $851f			bpl 	_NotRef
.851a	48		pha				pha
.851b	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.851e	68		pla				pla
.851f					_NotRef:
.851f	0a		asl a				asl 	a
.8520	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8522	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8525	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8528	f0 03		beq $852d			beq 	_IntegerCode 				; if clear, then we have two integers
.852a	4c 63 98	jmp $9863			jmp 	TypeError 					; anything else, type mismatch.
.852d					_IntegerCode:
.852d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8530	29 e0		and #$e0			and 	#$E0
.8532	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8535	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8538	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.853b	d0 13		bne $8550			bne 	_SMExit0 					; if >= 32 it will always return zero.
.853d					_SMLoop:
.853d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8540	30 11		bmi $8553			bmi 	_SMExit 					; exit if done.
.8542	28		plp				plp 								; restore direcition setting
.8543	08		php				php
.8544	90 05		bcc $854b			bcc 	_SMRight
.8546	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; shift left if CS
.8549	80 f2		bra $853d			bra 	_SMLoop
.854b					_SMRight:
.854b	20 31 8e	jsr $8e31			jsr 	NSMShiftRight 				; shift right if CC
.854e	80 ed		bra $853d			bra 	_SMLoop
.8550					_SMExit0:
.8550	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero 					; return zero.
.8553					_SMExit:
.8553	28		plp				plp 								; throw direction
.8554	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8555					AddTopTwoStack:
.8555	18		clc				clc
.8556	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8559	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.855c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.855f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8562	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8565	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8568	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.856b	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.856e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8571	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8574	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8577	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.857a	60		rts				rts
.857b					SubTopTwoStack:
.857b	38		sec				sec
.857c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.857f	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8582	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8585	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8588	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.858b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.858e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8591	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8594	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8597	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.859a	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.859d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85a0	60		rts				rts
.85a1					AddInteger:
.85a1	fa		plx				plx
.85a2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85a5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85a8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85a9	0a		asl a				asl 	a
.85aa	10 05		bpl $85b1			bpl 	_NotRef
.85ac	48		pha				pha
.85ad	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85b0	68		pla				pla
.85b1					_NotRef:
.85b1	0a		asl a				asl 	a 							; put MSB of type into A:7
.85b2	30 0b		bmi $85bf			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.85b4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85b7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85ba	f0 06		beq $85c2			beq 	_IntegerCode 				; if clear, then we have two integers
.85bc	4c 57 95	jmp $9557			jmp 	FloatingPointAdd 							; otherwise at least one float.
.85bf					_StringData:
.85bf	4c 74 84	jmp $8474			jmp 	StringConcat							; at least one string - don't know both are strings.
.85c2					_IntegerCode:
.85c2					AddCode:
.85c2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.85c5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.85c8	10 8b		bpl $8555			bpl 	AddTopTwoStack
.85ca	20 7b 85	jsr $857b			jsr 	SubTopTwoStack 				; do a physical subtraction
.85cd	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.85d0	10 09		bpl $85db			bpl 	_AddExit
.85d2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.85d5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85d8	20 c3 8d	jsr $8dc3			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.85db					_AddExit:
.85db	60		rts				rts
.85dc					SubInteger:
.85dc	fa		plx				plx
.85dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85e0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85e3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85e4	0a		asl a				asl 	a
.85e5	10 05		bpl $85ec			bpl 	_NotRef
.85e7	48		pha				pha
.85e8	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85eb	68		pla				pla
.85ec					_NotRef:
.85ec	0a		asl a				asl 	a 							; put MSB of type into A:7
.85ed	30 0b		bmi $85fa			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.85ef	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85f2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85f5	f0 06		beq $85fd			beq 	_IntegerCode 				; if clear, then we have two integers
.85f7	4c 5c 95	jmp $955c			jmp 	FloatingPointSub 							; otherwise at least one float.
.85fa					_StringData:
.85fa	4c 6d 98	jmp $986d			jmp 	NotDoneError							; at least one string - don't know both are strings.
.85fd					_IntegerCode:
.85fd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8600	49 80		eor #$80			eor 	#$80
.8602	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8605	80 bb		bra $85c2			bra 	AddCode 					; and do the same code as add.
.8607					AndInteger:
.8607	fa		plx				plx
.8608	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.860b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.860e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.860f	0a		asl a				asl 	a
.8610	10 05		bpl $8617			bpl 	_NotRef
.8612	48		pha				pha
.8613	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8616	68		pla				pla
.8617					_NotRef:
.8617	0a		asl a				asl 	a
.8618	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.861a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.861d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8620	f0 03		beq $8625			beq 	_IntegerCode 				; if clear, then we have two integers
.8622	4c 63 98	jmp $9863			jmp 	TypeError 					; anything else, type mismatch.
.8625					_IntegerCode:
.8625	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8628	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.862b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.862e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8631	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8634	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8637	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.863a	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.863d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8640	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8643	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8646	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8649	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.864c	60		rts				rts
.864d					OraInteger:
.864d	fa		plx				plx
.864e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8651	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8654	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8655	0a		asl a				asl 	a
.8656	10 05		bpl $865d			bpl 	_NotRef
.8658	48		pha				pha
.8659	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.865c	68		pla				pla
.865d					_NotRef:
.865d	0a		asl a				asl 	a
.865e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8660	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8663	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8666	f0 03		beq $866b			beq 	_IntegerCode 				; if clear, then we have two integers
.8668	4c 63 98	jmp $9863			jmp 	TypeError 					; anything else, type mismatch.
.866b					_IntegerCode:
.866b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.866e	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8671	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8674	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8677	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.867a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.867d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8680	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8683	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8686	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8689	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.868c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.868f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8692	60		rts				rts
.8693					EorInteger:
.8693	fa		plx				plx
.8694	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8697	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.869a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.869b	0a		asl a				asl 	a
.869c	10 05		bpl $86a3			bpl 	_NotRef
.869e	48		pha				pha
.869f	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86a2	68		pla				pla
.86a3					_NotRef:
.86a3	0a		asl a				asl 	a
.86a4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86a6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86a9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86ac	f0 03		beq $86b1			beq 	_IntegerCode 				; if clear, then we have two integers
.86ae	4c 63 98	jmp $9863			jmp 	TypeError 					; anything else, type mismatch.
.86b1					_IntegerCode:
.86b1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.86b4	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.86b7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86ba	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.86bd	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.86c0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86c3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.86c6	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.86c9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86cc	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.86cf	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.86d2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86d5	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.86d8	60		rts				rts
.86d9					WordIndirect:
.86d9	fa		plx				plx
.86da	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86dd	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86e0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86e1	0a		asl a				asl 	a
.86e2	10 05		bpl $86e9			bpl 	_NotRef
.86e4	48		pha				pha
.86e5	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86e8	68		pla				pla
.86e9					_NotRef:
.86e9	0a		asl a				asl 	a
.86ea	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86ec	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86ef	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86f2	f0 03		beq $86f7			beq 	_IntegerCode 				; if clear, then we have two integers
.86f4	4c 63 98	jmp $9863			jmp 	TypeError 					; anything else, type mismatch.
.86f7					_IntegerCode:
.86f7	20 c2 85	jsr $85c2			jsr 	AddCode 					; add the two values
.86fa	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.86fc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86ff	60		rts				rts
.8700					ByteIndirect:
.8700	fa		plx				plx
.8701	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8704	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8707	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8708	0a		asl a				asl 	a
.8709	10 05		bpl $8710			bpl 	_NotRef
.870b	48		pha				pha
.870c	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.870f	68		pla				pla
.8710					_NotRef:
.8710	0a		asl a				asl 	a
.8711	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8713	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8716	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8719	f0 03		beq $871e			beq 	_IntegerCode 				; if clear, then we have two integers
.871b	4c 63 98	jmp $9863			jmp 	TypeError 					; anything else, type mismatch.
.871e					_IntegerCode:
.871e	20 c2 85	jsr $85c2			jsr 	AddCode 					; add the two values
.8721	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8723	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8726	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.94fc					ConvertInt16:
.94fc	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.94ff	8e 10 06	stx $0610			stx 	NSMantissa1
.9502	9c 18 06	stz $0618			stz 	NSMantissa2
.9505	9c 20 06	stz $0620			stz 	NSMantissa3
.9508	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.950b	a2 00		ldx #$00			ldx 	#0 							; stack level
.950d	a9 0a		lda #$0a			lda 	#10 						; base
.950f	80 00		bra $9511			bra 	ConvertInt32
.9511					ConvertInt32:
.9511	5a		phy				phy
.9512	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9514	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9517	10 08		bpl $9521			bpl 	_CI32NotNeg
.9519	48		pha				pha
.951a	a9 2d		lda #$2d			lda 	#'-'
.951c	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.951f	c8		iny				iny
.9520	68		pla				pla
.9521					_CI32NotNeg:
.9521	20 2f 95	jsr $952f			jsr 	_CI32DivideConvert 			; recursive conversion
.9524	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9526	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9529	7a		ply				ply
.952a	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.952c	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.952e	60		rts				rts
.952f					_CI32DivideConvert:
.952f	e8		inx				inx 								; write to next slot up
.9530	20 10 8e	jsr $8e10			jsr 	NSMSetByte
.9533	ca		dex				dex
.9534	20 31 94	jsr $9431			jsr 	Int32Divide 				; divide
.9537	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.953a	48		pha				pha
.953b	20 e0 93	jsr $93e0			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.953e	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; is it zero ?
.9541	f0 06		beq $9549			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9543	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9546	20 2f 95	jsr $952f			jsr 	_CI32DivideConvert 			; and recusrively call.
.9549					_CI32NoRecurse:
.9549	68		pla				pla 								; remainder
.954a	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.954c	90 02		bcc $9550			bcc 	_CI32NotHex
.954e	69 26		adc #$26			adc 	#6+32
.9550					_CI32NotHex:
.9550	69 30		adc #$30			adc 	#48
.9552	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9555	c8		iny				iny
.9556	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8727					PrecedenceLevel:
>8727	04					.byte	 4	; $00 <<
>8728	02					.byte	 2	; $01 <=
>8729	02					.byte	 2	; $02 <>
>872a	00					.byte	 0	; $03 !!3
>872b	00					.byte	 0	; $04 ><
>872c	02					.byte	 2	; $05 >=
>872d	04					.byte	 4	; $06 >>
>872e	00					.byte	 0	; $07 !!7
>872f	00					.byte	 0	; $08 !!8
>8730	00					.byte	 0	; $09 !!9
>8731	00					.byte	 0	; $0a !!10
>8732	00					.byte	 0	; $0b !!11
>8733	00					.byte	 0	; $0c !!12
>8734	00					.byte	 0	; $0d !!13
>8735	00					.byte	 0	; $0e !!14
>8736	00					.byte	 0	; $0f !!15
>8737	00					.byte	 0	; $10 @
>8738	00					.byte	 0	; $11 !!17
>8739	00					.byte	 0	; $12 !!18
>873a	00					.byte	 0	; $13 [
>873b	04					.byte	 4	; $14 \
>873c	00					.byte	 0	; $15 ]
>873d	01					.byte	 1	; $16 ^
>873e	00					.byte	 0	; $17 _
>873f	00					.byte	 0	; $18 `
>8740	00					.byte	 0	; $19 !!25
>8741	00					.byte	 0	; $1a !!26
>8742	00					.byte	 0	; $1b {
>8743	01					.byte	 1	; $1c |
>8744	00					.byte	 0	; $1d }
>8745	00					.byte	 0	; $1e ~
>8746	00					.byte	 0	; $1f [7m<7F>[m
>8747	00					.byte	 0	; $20
>8748	05					.byte	 5	; $21 !
>8749	00					.byte	 0	; $22 "
>874a	00					.byte	 0	; $23 #
>874b	05					.byte	 5	; $24 $
>874c	04					.byte	 4	; $25 %
>874d	01					.byte	 1	; $26 &
>874e	00					.byte	 0	; $27 '
>874f	00					.byte	 0	; $28 (
>8750	00					.byte	 0	; $29 )
>8751	04					.byte	 4	; $2a *
>8752	03					.byte	 3	; $2b +
>8753	00					.byte	 0	; $2c ,
>8754	03					.byte	 3	; $2d -
>8755	00					.byte	 0	; $2e .
>8756	04					.byte	 4	; $2f /
>8757	00					.byte	 0	; $30 0
>8758	00					.byte	 0	; $31 1
>8759	00					.byte	 0	; $32 2
>875a	00					.byte	 0	; $33 3
>875b	00					.byte	 0	; $34 4
>875c	00					.byte	 0	; $35 5
>875d	00					.byte	 0	; $36 6
>875e	00					.byte	 0	; $37 7
>875f	00					.byte	 0	; $38 8
>8760	00					.byte	 0	; $39 9
>8761	00					.byte	 0	; $3a :
>8762	00					.byte	 0	; $3b ;
>8763	02					.byte	 2	; $3c <
>8764	02					.byte	 2	; $3d =
>8765	02					.byte	 2	; $3e >
>8766	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8767					EvaluateExpressionAt0:
.8767	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8769					EvaluateExpression:
.8769	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.876b					EvaluateExpressionAtPrecedence:
.876b	48		pha				pha 								; save precedence level
.876c	20 3a 8a	jsr $8a3a			jsr 	EvaluateTerm 				; evaluate term into level X.
.876f	68		pla				pla 								; restore precedence level.
.8770					_EXPRLoop:
.8770	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8772	b1 30		lda ($30),y			lda 	(codePtr),y
.8774	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8776	b0 25		bcs $879d			bcs 	_EXPRExit
.8778	da		phx				phx 								; read the operator precedence
.8779	aa		tax				tax
.877a	bd 27 87	lda $8727,x			lda 	PrecedenceLevel,x
.877d	fa		plx				plx
.877e	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8780	f0 1b		beq $879d			beq 	_EXPRExit
.8782	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8784	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8786	c5 37		cmp $37				cmp 	zTemp0+1
.8788	b0 13		bcs $879d			bcs		_EXPRExit 					; if current >= operator exit
.878a	48		pha				pha 								; save current precedence.
.878b	b1 30		lda ($30),y			lda 	(codePtr),y
.878d	c8		iny				iny
.878e	48		pha				pha
.878f	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8791	e8		inx				inx 								; work out the right hand side.
.8792	20 6b 87	jsr $876b			jsr 	EvaluateExpressionAtPrecedence
.8795	ca		dex				dex
.8796	68		pla				pla 								; get operator, call the code.
.8797	20 a0 87	jsr $87a0			jsr 	_EXPRCaller
.879a	68		pla				pla 								; restore precedence level
.879b	80 d3		bra $8770			bra 	_EXPRLoop 					; and go round.
.879d					_EXPRExit:
.879d	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.879f	60		rts				rts
.87a0					_EXPRCaller:
.87a0	da		phx				phx 								; save on stack, first thing is to restore it
.87a1	0a		asl a				asl 	a 							; double so can use vectors into X
.87a2	aa		tax				tax
.87a3	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9557					FloatingPointAdd:
.9557	20 f8 96	jsr $96f8			jsr 	FloatPrepare 				; prepare for floats
.955a	80 0b		bra $9567			bra 	FloatAdd
.955c					FloatingPointSub:
.955c	20 f8 96	jsr $96f8			jsr 	FloatPrepare 				; prepare for floats
.955f					FloatSubtract:
.955f	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9562	49 80		eor #$80			eor 	#$80
.9564	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9567					FloatAdd:
.9567	48		pha				pha
.9568	5a		phy				phy
.9569	20 09 97	jsr $9709			jsr 	NSNormalise 				; normalise S[X]
.956c	f0 54		beq $95c2			beq 	_FAReturn1
.956e	e8		inx				inx 								; normalise S[X+1]
.956f	20 09 97	jsr $9709			jsr 	NSNormalise
.9572	ca		dex				dex
.9573	c9 00		cmp #$00			cmp 	#0
.9575	f0 6f		beq $95e6			beq 	_FAExit 					; if so, just return A
.9577	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.957a	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.957d	f0 1b		beq $959a			beq 	_FAExponentsEqual
.957f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9582	a8		tay				tay
.9583	38		sec				sec 								; do a signed comparison of the exponents.
.9584	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9587	50 02		bvc $958b			bvc 	_FANoSignedChange
.9589	49 80		eor #$80			eor 	#$80
.958b					_FANoSignedChange:
.958b	29 80		and #$80			and 	#$80
.958d	10 03		bpl $9592			bpl 	_FAHaveMax
.958f	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9592					_FAHaveMax:
.9592	20 e9 95	jsr $95e9			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9595	e8		inx				inx
.9596	20 e9 95	jsr $95e9			jsr 	_FAShiftToExponent
.9599	ca		dex				dex
.959a					_FAExponentsEqual:
.959a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.959d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.95a0	30 10		bmi $95b2			bmi 	_FADifferentSigns
.95a2	20 55 85	jsr $8555			jsr 	AddTopTwoStack 				; do the add of the mantissae
.95a5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.95a8	10 3c		bpl $95e6			bpl 	_FAExit 					; if no, we are done.
.95aa	20 31 8e	jsr $8e31			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.95ad	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.95b0	80 34		bra $95e6			bra 	_FAExit
.95b2					_FADifferentSigns:
.95b2	20 7b 85	jsr $857b			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.95b5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.95b8	10 2c		bpl $95e6			bpl 	_FAExit 					; if no, we are done.
.95ba	20 ba 8d	jsr $8dba			jsr 	NSMNegate 					; netate result
.95bd	20 c3 8d	jsr $8dc3			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.95c0	80 24		bra $95e6			bra 	_FAExit
.95c2					_FAReturn1:
.95c2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.95c5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95c8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.95cb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95ce	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.95d1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95d4	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.95d7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95da	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.95dd	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95e0	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.95e3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95e6					_FAExit:
.95e6	7a		ply				ply
.95e7	68		pla				pla
.95e8	60		rts				rts
.95e9					_FAShiftToExponent:
.95e9					_FAShiftToExponent2:
.95e9	98		tya				tya 								; compare Y to exponent
.95ea	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.95ed	f0 08		beq $95f7			beq 	_FASEExit 					; exit if so.
.95ef	20 31 8e	jsr $8e31			jsr 	NSMShiftRight	 			; shift the mantissa right
.95f2	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.95f5	80 f2		bra $95e9			bra 	_FAShiftToExponent2
.95f7					_FASEExit:
.95f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.95f8					CompareFloat:
.95f8	20 5f 95	jsr $955f			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.95fb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.95fe	29 f8		and #$f8			and 	#$F8
.9600	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9603	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9606	f0 09		beq $9611			beq 	_FCExit 					; zero, so approximately identical
.9608	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.960a	3c 00 06	bit $0600,x			bit 	NSStatus,x
.960d	10 02		bpl $9611			bpl 	_FCExit
.960f					_FCNegative:
.960f	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9611					_FCExit:
.9611	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9612					FDivideCommand:
.9612	fa		plx				plx	 								; restore stack position
.9613	20 f8 96	jsr $96f8			jsr 	FloatPrepare 				; prepare for floats
.9616					FloatDivide:
.9616	48		pha				pha
.9617	e8		inx				inx
.9618	20 09 97	jsr $9709			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.961b	ca		dex				dex
.961c	c9 00		cmp #$00			cmp 	#0
.961e	f0 20		beq $9640			beq 	_FDZero
.9620	20 09 97	jsr $9709			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9623	f0 19		beq $963e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9625	20 53 94	jsr $9453			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9628	20 e0 93	jsr $93e0			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.962b	20 09 97	jsr $9709			jsr		NSNormalise 				; renormalise
.962e	20 ee 94	jsr $94ee			jsr 	CalculateSign 				; calculate result sign
.9631	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9634	38		sec				sec
.9635	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9638	38		sec				sec
.9639	e9 1e		sbc #$1e			sbc 	#30
.963b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.963e					_FDExit:
.963e	68		pla				pla
.963f	60		rts				rts
.9640					_FDZero:
.9640	a9 03		lda #$03		lda	#3
.9642	4c 67 83	jmp $8367		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9645					FloatFractionalPart:
.9645	5a		phy				phy
.9646	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9649	29 7f		and #$7f			and 	#$7F
.964b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.964e	20 09 97	jsr $9709			jsr 	NSNormalise
.9651	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9654	38		sec				sec
.9655	e9 e0		sbc #$e0			sbc 	#$E0
.9657	90 31		bcc $968a			bcc 	_FFPExit 					; already fractional
.9659	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.965b	b0 2a		bcs $9687			bcs 	_FFPZero
.965d	a8		tay				tay 								; put count to do in Y
.965e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9661	20 8c 96	jsr $968c			jsr 	_FFPPartial
.9664	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9667	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.966a	20 8c 96	jsr $968c			jsr 	_FFPPartial
.966d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9670	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9673	20 8c 96	jsr $968c			jsr 	_FFPPartial
.9676	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9679	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.967c	20 8c 96	jsr $968c			jsr 	_FFPPartial
.967f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9682	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; zeroed check.
.9685	d0 03		bne $968a			bne 	_FFPExit
.9687					_FFPZero:
.9687	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero
.968a					_FFPExit:
.968a	7a		ply				ply
.968b	60		rts				rts
.968c					_FFPPartial:
.968c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.968e	f0 17		beq $96a7			beq 	_FFFPPExit
.9690	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9692	b0 0c		bcs $96a0			bcs 	_FFFPPWholeByte
.9694	5a		phy				phy
.9695					_FFFPPLeft:
.9695	0a		asl a				asl 	a
.9696	88		dey				dey
.9697	d0 fc		bne $9695			bne 	_FFFPPLeft
.9699	7a		ply				ply
.969a					_FFFPPRight:
.969a	4a		lsr a				lsr 	a
.969b	88		dey				dey
.969c	d0 fc		bne $969a			bne 	_FFFPPRight
.969e	80 07		bra $96a7			bra 	_FFFPPExit
.96a0					_FFFPPWholeByte:
.96a0	98		tya				tya 								; subtract 8 from count
.96a1	38		sec				sec
.96a2	e9 08		sbc #$08			sbc 	#8
.96a4	a8		tay				tay
.96a5	a9 00		lda #$00			lda 	#0 							; and clear all
.96a7					_FFFPPExit:
.96a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.96a8					FloatIntegerPart:
.96a8	48		pha				pha
.96a9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.96ac	f0 1f		beq $96cd			beq 	_FIPExit 					; if so do nothing
.96ae	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; is it zero ?
.96b1	f0 17		beq $96ca			beq 	_FIPZero 					; if so return zero.
.96b3	20 09 97	jsr $9709			jsr 	NSNormalise 				; normalise
.96b6	f0 12		beq $96ca			beq 	_FIPZero 					; normalised to zero, exit zero
.96b8					_FIPShift:
.96b8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.96bb	10 08		bpl $96c5			bpl 	_FIPCheckZero
.96bd	20 31 8e	jsr $8e31			jsr 	NSMShiftRight 				; shift mantissa right
.96c0	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.96c3	80 f3		bra $96b8			bra 	_FIPShift
.96c5					_FIPCheckZero:
.96c5	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; avoid -0 problem
.96c8	d0 03		bne $96cd			bne 	_FIPExit 					; set to zero if mantissa zero.
.96ca					_FIPZero:
.96ca	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero
.96cd					_FIPExit:
.96cd	68		pla				pla
.96ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.96cf					FloatingPointMultiply:
.96cf	20 f8 96	jsr $96f8			jsr 	FloatPrepare 				; prepare for floats
.96d2					FloatMultiply:
.96d2	48		pha				pha
.96d3	20 09 97	jsr $9709			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.96d6	f0 1b		beq $96f3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.96d8	e8		inx				inx
.96d9	20 09 97	jsr $9709			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.96dc	ca		dex				dex
.96dd	c9 00		cmp #$00			cmp 	#0
.96df	f0 0f		beq $96f0			beq 	_FDSetZero
.96e1	20 a9 94	jsr $94a9			jsr 	MultiplyShort 				; calculate the result.
.96e4	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.96e7	18		clc				clc
.96e8	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.96eb	9d 28 06	sta $0628,x			sta 	NSExponent,x
.96ee	80 03		bra $96f3			bra 	_FDExit
.96f0					_FDSetZero:
.96f0	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero 					; return 0
.96f3					_FDExit:
.96f3	20 09 97	jsr $9709			jsr 	NSNormalise 				; normalise the result
.96f6	68		pla				pla
.96f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.96f8					FloatPrepare:
.96f8	20 79 88	jsr $8879			jsr 	DereferenceTopTwo 			; dereference the top two values
.96fb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.96fe	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9701	29 10		and #$10			and 	#NSBIsString
.9703	d0 01		bne $9706			bne 	_FDType
.9705	60		rts				rts
.9706					_FDType:
.9706	4c 63 98	jmp $9863			jmp 	TypeError
.9709					NSNormalise:
.9709	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.970c	29 80		and #$80			and 	#$80
.970e	09 08		ora #$08			ora 	#NSTFloat
.9710	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9713	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; if zero exit
.9716	d0 09		bne $9721			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9718	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.971b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.971e	a9 00		lda #$00			lda 	#0 							; set Z flag
.9720	60		rts				rts
.9721					_NSNormaliseOptimise:
.9721	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9724	d0 22		bne $9748			bne 	_NSNormaliseLoop
.9726	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9729	30 1d		bmi $9748			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.972b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.972e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9731	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9734	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9737	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.973a	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.973d	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9740	38		sec				sec
.9741	e9 08		sbc #$08			sbc 	#8
.9743	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9746	80 d9		bra $9721			bra 	_NSNormaliseOptimise
.9748					_NSNormaliseLoop:
.9748	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.974b	70 08		bvs $9755			bvs 	_NSNExit 					; exit if so with Z flag clear
.974d	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; shift mantissa left
.9750	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9753	80 f3		bra $9748			bra 	_NSNormaliseLoop
.9755					_NSNExit:
.9755	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9757	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.87a6					AssignNumber:
.87a6	5a		phy				phy
.87a7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.87aa	85 36		sta $36				sta 	zTemp0
.87ac	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87af	85 37		sta $37				sta 	zTemp0+1
.87b1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.87b4	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.87b6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87b9	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.87bb	c9 08		cmp #$08			cmp 	#NSTFloat
.87bd	f0 2a		beq $87e9			beq 	_ANFloat
.87bf	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.87c2	f0 05		beq $87c9			beq		_ANNotFloat
.87c4	e8		inx				inx
.87c5	20 a8 96	jsr $96a8			jsr 	FloatIntegerPart 			; make it an integer
.87c8	ca		dex				dex
.87c9					_ANNotFloat:
.87c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.87cc	29 03		and #$03			and 	#3
.87ce	d0 05		bne $87d5			bne 	_ANByteWord
.87d0	20 f5 87	jsr $87f5			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.87d3	80 1e		bra $87f3			bra 	_ANExit
.87d5					_ANByteWord:
.87d5	48		pha				pha 								; save count
.87d6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.87d9	92 36		sta ($36)			sta 	(zTemp0)
.87db	68		pla				pla
.87dc	c9 01		cmp #$01			cmp	 	#1
.87de	f0 13		beq $87f3			beq 	_ANExit
.87e0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.87e3	a0 01		ldy #$01			ldy 	#1
.87e5	91 36		sta ($36),y			sta 	(zTemp0),y
.87e7	80 0a		bra $87f3			bra 	_ANExit
.87e9					_ANFloat:
.87e9	20 f5 87	jsr $87f5			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.87ec	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.87ef	a0 04		ldy #$04			ldy 	#4
.87f1	91 36		sta ($36),y			sta 	(zTemp0),y
.87f3					_ANExit:
.87f3	7a		ply				ply
.87f4	60		rts				rts
.87f5					_ANCopy4PackSign:
.87f5	a0 03		ldy #$03			ldy 	#3
.87f7	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.87fa	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.87fc	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.87ff	91 36		sta ($36),y			sta 	(zTemp0),y
.8801	88		dey				dey
.8802	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8805	91 36		sta ($36),y			sta 	(zTemp0),y
.8807	88		dey				dey
.8808	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.880b	91 36		sta ($36),y			sta 	(zTemp0),y
.880d	88		dey				dey
.880e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8811	91 36		sta ($36),y			sta 	(zTemp0),y
.8813	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8814					AssignString:
.8814	5a		phy				phy
.8815	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8818	85 38		sta $38				sta 	zTemp1
.881a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.881d	85 39		sta $39				sta 	zTemp1+1
.881f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8822	85 36		sta $36				sta 	zTemp0
.8824	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8827	85 37		sta $37				sta 	zTemp0+1
.8829	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.882b	b1 36		lda ($36),y			lda 	(zTemp0),y
.882d	f0 23		beq $8852			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.882f	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8830	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8832	e9 02		sbc #$02			sbc 	#2
.8834	85 3c		sta $3c				sta 	zsTemp
.8836	a0 01		ldy #$01			ldy 	#1
.8838	b1 36		lda ($36),y			lda 	(zTemp0),y
.883a	e9 00		sbc #$00			sbc 	#0
.883c	85 3d		sta $3d				sta 	zsTemp+1
.883e	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8840					_ASGetLength:
.8840	c8		iny				iny
.8841	b1 38		lda ($38),y			lda 	(zTemp1),y
.8843	d0 fb		bne $8840			bne 	_ASGetLength
.8845	98		tya				tya 								; is this length <= current length
.8846	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8848	90 20		bcc $886a			bcc 	_ASCopyString
.884a	f0 1e		beq $886a			beq 	_ASCopyString
.884c	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.884e	a0 01		ldy #$01			ldy 	#1
.8850	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8852					_ASNewStringRequired:
.8852	e8		inx				inx 								; concrete the new string.
.8853	20 81 99	jsr $9981			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8856	ca		dex				dex
.8857	18		clc				clc
.8858	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.885b	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.885d	92 36		sta ($36)			sta 	(zTemp0)
.885f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8862	69 00		adc #$00			adc 	#0
.8864	a0 01		ldy #$01			ldy 	#1
.8866	91 36		sta ($36),y			sta 	(zTemp0),y
.8868	80 0d		bra $8877			bra 	_ASExit
.886a					_ASCopyString:
.886a	a0 00		ldy #$00			ldy 	#0
.886c					_ASCopyLoop:
.886c	b1 38		lda ($38),y			lda 	(zTemp1),y
.886e	c8		iny				iny
.886f	c8		iny				iny
.8870	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8872	88		dey				dey
.8873	c9 00		cmp #$00			cmp 	#0
.8875	d0 f5		bne $886c			bne 	_ASCopyLoop
.8877					_ASExit:
.8877	7a		ply				ply
.8878	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8879					DereferenceTopTwo:
.8879	e8		inx				inx
.887a	20 7e 88	jsr $887e			jsr 	Dereference 				; deref x+1
.887d	ca		dex				dex  								; falls through to deref x
.887e					Dereference:
.887e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8881	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8883	f0 57		beq $88dc			beq 	_DRFExit 					; not a reference
.8885	5a		phy				phy
.8886	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8889	85 36		sta $36				sta 	zTemp0
.888b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.888e	85 37		sta $37				sta 	zTemp0+1
.8890	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8893	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8895	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8898	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.889b	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.889d	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.889f	f0 0f		beq $88b0			beq 	_DRFDereferenceTwo
.88a1	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.88a3	f0 39		beq $88de			beq 	_DRFFull
.88a5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.88a8	29 03		and #$03			and 	#3
.88aa	f0 32		beq $88de			beq 	_DRFFull 					; the whole word
.88ac	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.88ae	f0 07		beq $88b7			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.88b0					_DRFDereferenceTwo:
.88b0	a0 01		ldy #$01			ldy 	#1
.88b2	b1 36		lda ($36),y			lda 	(zTemp0),y
.88b4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88b7					_DRFClear23:
.88b7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.88ba	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.88bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.88c0	29 18		and #$18			and 	#NSBTypeMask
.88c2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88c5	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.88c7	d0 12		bne $88db			bne 	_DRFNotString
.88c9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.88cc	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.88cf	d0 0a		bne $88db			bne 	_DRFNotString
.88d1	a9 dd		lda #$dd			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.88d3	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.88d6	a9 88		lda #$88			lda 	#_DRFNullString >> 8
.88d8	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.88db					_DRFNotString
.88db	7a		ply				ply 								; restore Y and exit
.88dc					_DRFExit:
.88dc	60		rts				rts
.88dd					_DRFNullString:
>88dd	00						.byte 	0
.88de					_DRFFull:
.88de	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.88e0	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88e5	c8		iny				iny
.88e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.88eb	c8		iny				iny
.88ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ee	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.88f1	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.88f4	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.88f7	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.88f9	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.88fc	f0 06		beq $8904			beq 	_DRFNoExponent
.88fe	c8		iny				iny 								; if not, read the exponent as well.
.88ff	b1 36		lda ($36),y			lda 	(zTemp0),y
.8901	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8904					_DRFNoExponent:
.8904	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8907	10 0d		bpl $8916			bpl 	_DRFExit2 					; if not, then exit.
.8909	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.890b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.890e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8911	09 80		ora #$80			ora 	#NSBIsNegative
.8913	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8916					_DRFExit2:
.8916	7a		ply				ply
.8917	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8918					EncodeNumberStart:
.8918	38		sec				sec
.8919	80 01		bra $891c			bra 	EncodeNumberContinue+1
.891b					EncodeNumberContinue:
.891b	18		clc				clc
.891c					EncodeNumber:
.891c	08		php				php 								; save reset.
.891d	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.891f	f0 12		beq $8933			beq 	_ENIsOkay
.8921	c9 30		cmp #$30			cmp 	#"0"
.8923	90 04		bcc $8929			bcc 	_ENBadNumber
.8925	c9 3a		cmp #$3a			cmp 	#"9"+1
.8927	90 0a		bcc $8933			bcc 	_ENIsOkay
.8929					_ENBadNumber:
.8929	28		plp				plp 								; throw saved reset
.892a	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.892d	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.892f	f0 7e		beq $89af			beq 	_ENConstructFinal
.8931					_ENFail:
.8931	18		clc				clc 								; not allowed
.8932	60		rts				rts
.8933					_ENIsOkay:
.8933	28		plp				plp 								; are we restarting
.8934	90 15		bcc $894b			bcc 	_ENNoRestart
.8936					_ENStartEncode:
.8936	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8938	f0 0c		beq $8946			beq 	_ENFirstDP
.893a	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.893c	20 10 8e	jsr $8e10			jsr 	NSMSetByte
.893f	a9 01		lda #$01			lda 	#ESTA_Low
.8941					_ENExitChange:
.8941	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8944	38		sec				sec
.8945	60		rts				rts
.8946					_ENFirstDP:
.8946	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero 					; clear integer part
.8949	80 3f		bra $898a			bra 	_ESTASwitchFloat			; go straight to float and exi
.894b					_ENNoRestart:
.894b	48		pha				pha 								; save on stack.
.894c	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.894f	c9 01		cmp #$01			cmp 	#ESTA_Low
.8951	f0 09		beq $895c			beq  	_ESTALowState
.8953	c9 02		cmp #$02			cmp 	#ESTA_High
.8955	f0 29		beq $8980			beq 	_ESTAHighState
.8957	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8959	f0 3b		beq $8996			beq 	_ESTADecimalState
>895b	db						.byte 	$DB 						; causes a break in the emulator
.895c					_ESTALowState:
.895c	68		pla				pla 								; get value back
.895d	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.895f	f0 29		beq $898a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8961	29 0f		and #$0f			and 	#15 						; make digit
.8963	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8966	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8969	0a		asl a				asl 	a
.896a	0a		asl a				asl 	a
.896b	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.896e	0a		asl a				asl 	a
.896f	6d 06 07	adc $0706			adc 	DigitTemp
.8972	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8975	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8977	90 05		bcc $897e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8979	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.897b	8d 05 07	sta $0705			sta 	EncodeState
.897e					_ESTANoSwitch:
.897e	38		sec				sec
.897f	60		rts				rts
.8980					_ESTAHighState:
.8980	68		pla				pla 								; get value back
.8981	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8983	f0 05		beq $898a			beq 	_ESTASwitchFloat
.8985	20 e9 89	jsr $89e9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8988	38		sec				sec
.8989	60		rts				rts
.898a					_ESTASwitchFloat:
.898a	9c 07 07	stz $0707			stz 	DecimalCount
.898d	e8		inx				inx 								; zero the decimal additive.
.898e	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero
.8991	ca		dex				dex
.8992	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8994	80 ab		bra $8941			bra 	_ENExitChange
.8996					_ESTADecimalState:
.8996	68		pla				pla 								; digit.
.8997	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8999	f0 96		beq $8931			beq 	_ENFail
.899b	e8		inx				inx 								; put digit into fractional part of X+1
.899c	20 e9 89	jsr $89e9			jsr 	ESTAShiftDigitIntoMantissa
.899f	ca		dex				dex
.89a0	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.89a3	ad 07 07	lda $0707			lda 	DecimalCount
.89a6	c9 0b		cmp #$0b			cmp 	#11
.89a8	f0 02		beq $89ac			beq 	_ESTADSFail
.89aa	38		sec				sec
.89ab	60		rts				rts
.89ac					_ESTADSFail:
.89ac	4c 5e 98	jmp $985e			jmp 	RangeError
.89af					_ENConstructFinal:
.89af	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.89b2	f0 33		beq $89e7			beq 	_ENCFExit 					; no decimals
.89b4	5a		phy				phy
.89b5	0a		asl a				asl 	a 							; x 4 and CLC
.89b6	0a		asl a				asl 	a
.89b7	6d 07 07	adc $0707			adc 	DecimalCount
.89ba	a8		tay				tay
.89bb	b9 1d 98	lda $981d,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.89be	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.89c1	b9 1e 98	lda $981e,y			lda 	DecimalScalarTable-5+1,y
.89c4	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.89c7	b9 1f 98	lda $981f,y			lda 	DecimalScalarTable-5+2,y
.89ca	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.89cd	b9 20 98	lda $9820,y			lda 	DecimalScalarTable-5+3,y
.89d0	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.89d3	b9 21 98	lda $9821,y			lda 	DecimalScalarTable-5+4,y
.89d6	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.89d9	a9 08		lda #$08			lda 	#NSTFloat
.89db	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.89de	7a		ply				ply
.89df	e8		inx				inx 								; multiply decimal const by decimal scalar
.89e0	20 d2 96	jsr $96d2			jsr 	FloatMultiply
.89e3	ca		dex				dex
.89e4	20 67 95	jsr $9567			jsr 	FloatAdd 					; add to integer part.
.89e7					_ENCFExit:
.89e7	18		clc				clc 								; reject the digit.
.89e8	60		rts				rts
.89e9					ESTAShiftDigitIntoMantissa:
.89e9	29 0f		and #$0f			and 	#15 						; save digit
.89eb	48		pha				pha
.89ec	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.89ef	48		pha				pha
.89f0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.89f3	48		pha				pha
.89f4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89f7	48		pha				pha
.89f8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89fb	48		pha				pha
.89fc	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; x 2
.89ff	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; x 4
.8a02	18		clc				clc 								; pop mantissa and add
.8a03	68		pla				pla
.8a04	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8a07	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a0a	68		pla				pla
.8a0b	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8a0e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a11	68		pla				pla
.8a12	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8a15	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a18	68		pla				pla
.8a19	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8a1c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8a1f	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; x 10
.8a22	68		pla				pla 								; add digit
.8a23	18		clc				clc
.8a24	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8a27	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a2a	90 0d		bcc $8a39			bcc 	_ESTASDExit
.8a2c	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8a2f	d0 08		bne $8a39			bne 	_ESTASDExit
.8a31	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8a34	d0 03		bne $8a39			bne 	_ESTASDExit
.8a36	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8a39					_ESTASDExit:
.8a39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8a3a					EvaluateTerm:
.8a3a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a3c	30 18		bmi $8a56			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8a3e	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8a40	b0 6f		bcs $8ab1			bcs 	_ETVariable
.8a42	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8a44	90 6e		bcc $8ab4			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8a46	c9 3a		cmp #$3a			cmp 	#'9'+1
.8a48	b0 6a		bcs $8ab4			bcs 	_ETPuncUnary
.8a4a	20 18 89	jsr $8918			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8a4d					_ETNumber:
.8a4d	c8		iny				iny 								; keep encoding until we have the numbers
.8a4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a50	20 1b 89	jsr $891b			jsr 	EncodeNumberContinue
.8a53	b0 f8		bcs $8a4d			bcs 	_ETNumber 					; go back if accepted.
.8a55	60		rts				rts
.8a56					_ETCheckUnary:
.8a56	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8a58	f0 41		beq $8a9b			beq 	_ETString
.8a5a	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8a5c	f0 12		beq $8a70			beq 	_ETHexConstant
.8a5e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8a60	90 0b		bcc $8a6d			bcc 	_ETSyntaxError
.8a62	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8a64	b0 07		bcs $8a6d			bcs 	_ETSyntaxError
.8a66	da		phx				phx 								; push X on the stack
.8a67	0a		asl a				asl 	a 							; put vector x 2 into X
.8a68	aa		tax				tax
.8a69	c8		iny				iny 								; consume unary function token
.8a6a	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8a6d					_ETSyntaxError:
.8a6d	4c 59 98	jmp $9859			jmp 	SyntaxError
.8a70					_ETHexConstant:
.8a70	c8		iny				iny 								; skip #
.8a71	c8		iny				iny 								; skip count
.8a72	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero 					; clear result
.8a75					_ETHLoop:
.8a75	b1 30		lda ($30),y			lda 	(codePtr),y
.8a77	c8		iny				iny 								; and consume
.8a78	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8a7a	f0 1e		beq $8a9a			beq 	_ETHExit
.8a7c	48		pha				pha 								; save on stack.
.8a7d	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; x 2
.8a80	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; x 4
.8a83	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; x 8
.8a86	20 23 8e	jsr $8e23			jsr 	NSMShiftLeft 				; x 16
.8a89	68		pla				pla 								; ASCII
.8a8a	c9 41		cmp #$41			cmp 	#'A'
.8a8c	90 02		bcc $8a90			bcc 	_ETHNotChar
.8a8e	e9 07		sbc #$07			sbc 	#7
.8a90					_ETHNotChar:
.8a90	29 0f		and #$0f			and 	#15 						; digit now
.8a92	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8a95	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a98	80 db		bra $8a75			bra 	_ETHLoop 					; go round.
.8a9a					_ETHExit:
.8a9a	60		rts				rts
.8a9b					_ETString:
.8a9b	c8		iny				iny 								; look at length
.8a9c	b1 30		lda ($30),y			lda 	(codePtr),y
.8a9e	48		pha				pha
.8a9f	c8		iny				iny 								; first character
.8aa0	20 59 93	jsr $9359			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8aa3	68		pla				pla 								; restore count and save
.8aa4	85 36		sta $36				sta 	zTemp0
.8aa6	98		tya				tya 								; add length to Y to skip it.
.8aa7	18		clc				clc
.8aa8	65 36		adc $36				adc 	zTemp0
.8aaa	a8		tay				tay
.8aab	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8aad	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ab0	60		rts				rts
.8ab1					_ETVariable:
.8ab1	4c 0b 8b	jmp $8b0b			jmp 	VariableHandler
.8ab4					_ETPuncUnary:
.8ab4	c8		iny				iny 								; consume the unary character
.8ab5	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8ab7	f0 2d		beq $8ae6			beq 	_ETUnaryNegate
.8ab9	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8abb	f0 39		beq $8af6			beq 	_ETDereference
.8abd	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8abf	f0 43		beq $8b04			beq 	_ETParenthesis
.8ac1	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8ac3	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8ac5	f0 06		beq $8acd			beq 	_ETIndirection
.8ac7	e6 36		inc $36				inc 	zTemp0
.8ac9	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8acb	d0 a0		bne $8a6d			bne 	_ETSyntaxError
.8acd					_ETIndirection:
.8acd	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8acf	1a		inc a				inc 	a
.8ad0	48		pha				pha
.8ad1	20 3a 8a	jsr $8a3a			jsr 	EvaluateTerm				; evaluate the term
.8ad4	20 7e 88	jsr $887e			jsr 	Dereference 				; dereference it.
.8ad7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8ada	d0 07		bne $8ae3			bne 	_ETTypeMismatch
.8adc	68		pla				pla 								; indirection 1-2
.8add	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8adf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ae2	60		rts				rts
.8ae3					_ETTypeMismatch:
.8ae3	4c 63 98	jmp $9863			jmp 	TypeError
.8ae6					_ETUnaryNegate:
.8ae6	20 3a 8a	jsr $8a3a			jsr 	EvaluateTerm				; evaluate the term
.8ae9	20 7e 88	jsr $887e			jsr 	Dereference 				; dereference it.
.8aec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8aef	29 10		and #$10			and 	#NSTString
.8af1	d0 f0		bne $8ae3			bne 	_ETTypeMismatch
.8af3	4c ba 8d	jmp $8dba			jmp 	NSMNegate  					; just toggles the sign bit.
.8af6					_ETDereference:
.8af6	20 3a 8a	jsr $8a3a			jsr 	EvaluateTerm				; evaluate the term
.8af9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8afc	29 20		and #$20			and 	#NSBIsReference
.8afe	f0 e3		beq $8ae3			beq 	_ETTypeMismatch
.8b00	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8b03	60		rts				rts
.8b04					_ETParenthesis:
.8b04	20 69 87	jsr $8769			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8b07	20 a0 93	jsr $93a0			jsr 	CheckRightBracket 			; check for )
.8b0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8b0b					VariableHandler:
.8b0b	b1 30		lda ($30),y			lda 	(codePtr),y
.8b0d	18		clc				clc
.8b0e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b10	85 37		sta $37				sta 	zTemp0+1
.8b12	c8		iny				iny
.8b13	b1 30		lda ($30),y			lda 	(codePtr),y
.8b15	85 36		sta $36				sta 	zTemp0
.8b17	c8		iny				iny
.8b18	18		clc				clc									; copy variable address+3 to mantissa
.8b19	69 03		adc #$03			adc 	#3
.8b1b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b1e	a5 37		lda $37				lda 	zTemp0+1
.8b20	69 00		adc #$00			adc 	#0
.8b22	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b25	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8b28	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8b2b	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8b2e	5a		phy				phy
.8b2f	a0 02		ldy #$02			ldy 	#2 							; read type
.8b31	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b33	7a		ply				ply
.8b34	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8b36	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8b38	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b3b	29 04		and #$04			and 	#NSBIsArray
.8b3d	d0 01		bne $8b40			bne 	_VHArray
.8b3f	60		rts				rts
.8b40					_VHArray:
>8b40	db						.byte 	$DB 						; causes a break in the emulator
.8b41	80 fd		bra $8b40			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9758					AbsUnary:
.9758	fa		plx				plx 								; restore stack pos
.9759	20 62 8d	jsr $8d62			jsr 	EvaluateNumber 				; get a float or int
.975c	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.975f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9762	29 7f		and #$7f			and 	#$7F
.9764	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9767	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8b43					AllocUnary:
.8b43	fa		plx				plx 								; restore stack pos
.8b44	20 9a 8d	jsr $8d9a			jsr 	Evaluate16BitInteger		; get bytes required.
.8b47	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.8b4a	da		phx				phx 								; save X/Y
.8b4b	5a		phy				phy
.8b4c	8a		txa				txa 								; copy X into Y
.8b4d	a8		tay				tay
.8b4e	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8b51	aa		tax				tax
.8b52	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8b55	20 62 8b	jsr $8b62			jsr 	AllocateXABytes 			; allocate memory
.8b58	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8b5b	8a		txa				txa
.8b5c	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8b5f	7a		ply				ply
.8b60	fa		plx				plx
.8b61	60		rts				rts
.8b62					AllocateXABytes:
.8b62	5a		phy				phy
.8b63	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8b66	5a		phy				phy
.8b67	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8b6a	5a		phy				phy
.8b6b	18		clc				clc
.8b6c	6d 0c 07	adc $070c			adc 	lowMemPtr
.8b6f	8d 0c 07	sta $070c			sta 	lowMemPtr
.8b72	8a		txa				txa
.8b73	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8b76	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8b79	fa		plx				plx
.8b7a	68		pla				pla
.8b7b	7a		ply				ply
.8b7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9768					AscUnary:
.9768	fa		plx				plx 								; restore stack pos
.9769	20 6d 8d	jsr $8d6d			jsr 	EvaluateString 				; get a string
.976c	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.976e	20 10 8e	jsr $8e10			jsr 	NSMSetByte
.9771	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.9774	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9775					FracUnary:
.9775	fa		plx				plx 								; restore stack pos
.9776	20 62 8d	jsr $8d62			jsr 	EvaluateNumber 				; get a float or int
.9779	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.977c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.977f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9781	f0 04		beq $9787			beq 	_IUZero
.9783	20 45 96	jsr $9645			jsr 	FloatFractionalPart
.9786	60		rts				rts
.9787					_IUZero:
.9787	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero
.978a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.978b					IntUnary:
.978b	fa		plx				plx 								; restore stack pos
.978c	20 62 8d	jsr $8d62			jsr 	EvaluateNumber 				; get a float or int
.978f	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.9792	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9795	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9797	f0 03		beq $979c			beq 	_IUExit
.9799	20 a8 96	jsr $96a8			jsr 	FloatIntegerPart
.979c					_IUExit:
.979c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.979d					LenUnary:
.979d	fa		plx				plx 								; restore stack pos
.979e	20 6d 8d	jsr $8d6d			jsr 	EvaluateString 				; get a string
.97a1	5a		phy				phy
.97a2	a0 00		ldy #$00			ldy 	#0 							; find length
.97a4					_LenFind:
.97a4	b1 36		lda ($36),y			lda 	(zTemp0),y
.97a6	f0 06		beq $97ae			beq 	_LenExit
.97a8	c8		iny				iny
.97a9	d0 f9		bne $97a4			bne 	_LenFind
.97ab	4c 5e 98	jmp $985e			jmp 	RangeError 					; string > 255
.97ae					_LenExit:
.97ae	98		tya				tya
.97af	20 10 8e	jsr $8e10			jsr 	NSMSetByte
.97b2	7a		ply				ply
.97b3	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.97b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8b7d					Unary_Not:
.8b7d	fa		plx				plx
.8b7e	20 85 8d	jsr $8d85			jsr 	EvaluateInteger 			; get integer
.8b81	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.8b84	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; zero mantissa ?
.8b87	f0 04		beq $8b8d			beq 	_NotZero
.8b89	20 0e 8e	jsr $8e0e			jsr 	NSMSetZero
.8b8c	60		rts				rts
.8b8d					_NotZero:
.8b8d	4c cd 83	jmp $83cd			jmp 	ReturnTrue
.8b90					_UNBad:
.8b90	4c 68 98	jmp $9868			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8b93					Unary_Rnd:
.8b93	20 62 8d	jsr $8d62			jsr 	EvaluateNumber 				; number to use.
.8b96	20 a0 93	jsr $93a0			jsr 	CheckRightBracket 			; closing bracket
.8b99	20 c2 8b	jsr $8bc2			jsr 	Random32Bit 				; generate a number.
.8b9c	ad 08 07	lda $0708			lda 	RandomSeed+0
.8b9f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ba2	ad 09 07	lda $0709			lda 	RandomSeed+1
.8ba5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ba8	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8bab	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8bae	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8bb1	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8bb3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8bb6	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8bb8	8d 28 06	sta $0628			sta 	NSExponent
.8bbb	a9 08		lda #$08			lda 	#NSTFloat
.8bbd	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8bc0	db						.byte 	$DB 						; causes a break in the emulator
.8bc1	60		rts				rts
.8bc2					Random32Bit:
.8bc2	5a		phy				phy
.8bc3	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8bc5	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8bc8	d0 03		bne $8bcd			bne 	_Random1
.8bca	a8		tay				tay 								; if so do it 256 times
.8bcb	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8bcd					_Random1:
.8bcd	0a		asl a				asl 	a 							; LSFR RNG
.8bce	2e 09 07	rol $0709			rol 	RandomSeed+1
.8bd1	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8bd4	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8bd7	90 02		bcc $8bdb			bcc 	_Random2
.8bd9	49 c5		eor #$c5			eor 	#$C5
.8bdb					_Random2:
.8bdb	88		dey				dey
.8bdc	d0 ef		bne $8bcd			bne 	_Random1
.8bde	7a		ply				ply
.8bdf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.97b7					SgnUnary:
.97b7	fa		plx				plx 								; restore stack pos
.97b8	20 62 8d	jsr $8d62			jsr 	EvaluateNumber 				; get a float or int
.97bb	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.97be	20 3e 8e	jsr $8e3e			jsr 	NSMIsZero 					; if zero
.97c1	f0 10		beq $97d3			beq 	_SGZero  					; return Int Zero
.97c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.97c6	48		pha				pha
.97c7	a9 01		lda #$01			lda 	#1 							; set to 1
.97c9	20 10 8e	jsr $8e10			jsr 	NSMSetByte
.97cc	68		pla				pla
.97cd	29 80		and #$80			and		#$80 						; copy the sign byte out
.97cf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97d2	60		rts				rts
.97d3	20 0e 8e	jsr $8e0e	_SGZero:jsr 	NSMSetZero
.97d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.97d7					ValUnary:
.97d7	fa		plx				plx 								; restore stack pos
.97d8	20 ed 97	jsr $97ed			jsr 	ValMainCode 				; do the main val() code
.97db	b0 01		bcs $97de			bcs 	_VUError 					; couldn't convert
.97dd	60		rts				rts
.97de					_VUError:
.97de	4c 63 98	jmp $9863			jmp 	TypeError
.97e1					IsValUnary:
.97e1	fa		plx				plx 								; restore stack pos
.97e2	20 ed 97	jsr $97ed			jsr 	ValMainCode 				; do the main val() code
.97e5	b0 03		bcs $97ea			bcs 	_VUBad
.97e7	4c cd 83	jmp $83cd			jmp 	ReturnTrue
.97ea					_VUBad:
.97ea	4c d9 83	jmp $83d9			jmp 	ReturnFalse
.97ed					ValMainCode:
.97ed	20 6d 8d	jsr $8d6d			jsr 	EvaluateString 				; get a string
.97f0	20 a0 93	jsr $93a0			jsr 	CheckRightBracket 			; check right bracket present
.97f3	5a		phy				phy
.97f4	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.97f6	f0 17		beq $980f			beq 	_VMCFail2
.97f8	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.97fa	48		pha				pha 								; save first character
.97fb	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.97fd	d0 01		bne $9800			bne 	_VMCStart
.97ff	c8		iny				iny 								; skip over -
.9800					_VMCStart:
.9800	38		sec				sec 								; initialise first time round.
.9801					_VMCNext:
.9801	c8		iny				iny 								; pre-increment
.9802	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9804	f0 0c		beq $9812			beq 	_VMCSuccess 				; successful.
.9806	20 1c 89	jsr $891c			jsr 	EncodeNumber 				; send it to the number-builder
.9809	90 03		bcc $980e			bcc 	_VMCFail 					; if failed, give up.
.980b	18		clc				clc 								; next time round, countinue
.980c	80 f3		bra $9801			bra 	_VMCNext
.980e					_VMCFail:
.980e	68		pla				pla
.980f					_VMCFail2:
.980f	7a		ply				ply
.9810	38		sec				sec
.9811	60		rts				rts
.9812					_VMCSuccess:
.9812	a9 00		lda #$00			lda 	#0 							; construct final
.9814	20 1c 89	jsr $891c			jsr 	EncodeNumber
.9817	68		pla				pla
.9818	c9 2d		cmp #$2d			cmp 	#"-"
.981a	d0 03		bne $981f			bne 	_VMCNotNegative
.981c	20 ba 8d	jsr $8dba			jsr		NSMNegate
.981f					_VMCNotNegative:
.981f	7a		ply				ply
.9820	18		clc				clc
.9821	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8be0					ChrUnary:
.8be0	fa		plx				plx 								; restore stack pos
.8be1	20 a6 8d	jsr $8da6			jsr 	Evaluate8BitInteger			; get value
.8be4	48		pha				pha
.8be5	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.8be8	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8bea	20 fc 99	jsr $99fc			jsr 	StringTempAllocate
.8bed	68		pla				pla 								; write number to it
.8bee	20 3a 9a	jsr $9a3a			jsr 	StringTempWrite
.8bf1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8bf2					SpcUnary:
.8bf2	fa		plx				plx 								; restore stack pos
.8bf3	20 a6 8d	jsr $8da6			jsr 	Evaluate8BitInteger			; get value
.8bf6	5a		phy				phy
.8bf7	48		pha				pha 								; save count
.8bf8	20 fc 99	jsr $99fc			jsr 	StringTempAllocate
.8bfb	7a		ply				ply 								; to do count in Y
.8bfc					_SpcLoop:
.8bfc	c0 00		cpy #$00			cpy 	#0
.8bfe	f0 08		beq $8c08			beq 	_SpcExit
.8c00	a9 20		lda #$20			lda 	#32
.8c02	20 3a 9a	jsr $9a3a			jsr 	StringTempWrite
.8c05	88		dey				dey
.8c06	80 f4		bra $8bfc			bra 	_SPCLoop
.8c08					_SpcExit:
.8c08	7a		ply				ply
.8c09	20 a0 93	jsr $93a0			jsr 	CheckRightBracket
.8c0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8c0d					Unary_Str:
.8c0d	fa		plx				plx
.8c0e	20 62 8d	jsr $8d62			jsr 	EvaluateNumber  			; get number
.8c11	20 a0 93	jsr $93a0			jsr 	CheckRightBracket 			; closing bracket
.8c14	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8c16	20 2f 8c	jsr $8c2f			jsr 	ConvertNumberToString 		; do the conversion.
.8c19	a9 21		lda #$21			lda		#33 						; create buffer
.8c1b	20 fc 99	jsr $99fc			jsr 	StringTempAllocate 			; allocate memory
.8c1e	da		phx				phx
.8c1f	a2 00		ldx #$00			ldx 	#0
.8c21					_USCopy:
.8c21	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8c24	20 3a 9a	jsr $9a3a			jsr 	StringTempWrite
.8c27	e8		inx				inx
.8c28	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8c2b	d0 f4		bne $8c21			bne 	_USCopy
.8c2d	fa		plx				plx
.8c2e	60		rts				rts
.8c2f					ConvertNumberToString:
.8c2f	5a		phy				phy 								; save code position
.8c30	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8c33	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8c36	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8c39	10 0a		bpl $8c45			bpl 	_CNTSNotNegative
.8c3b	29 7f		and #$7f			and 	#$7F 						; make +ve
.8c3d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c40	a9 2d		lda #$2d			lda 	#"-"
.8c42	20 ab 8c	jsr $8cab			jsr 	WriteDecimalBuffer
.8c45					_CNTSNotNegative:
.8c45	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8c48	f0 15		beq $8c5f			beq 	_CNTSNotFloat
.8c4a	e8		inx				inx 								; round up
.8c4b	a9 01		lda #$01			lda 	#1
.8c4d	20 10 8e	jsr $8e10			jsr 	NSMSetByte
.8c50	ca		dex				dex
.8c51	bd 28 06	lda $0628,x			lda		NSExponent,x
.8c54	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8c57	a9 08		lda #$08			lda 	#NSTFloat
.8c59	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8c5c	20 67 95	jsr $9567			jsr 	FloatAdd
.8c5f					_CNTSNotFloat:
.8c5f	20 8d 8c	jsr $8c8d			jsr 	MakePlusTwoString
.8c62	20 45 96	jsr $9645			jsr 	FloatFractionalPart 		; get the fractional part
.8c65	20 09 97	jsr $9709			jsr 	NSNormalise					; normalise , exit if zero
.8c68	f0 21		beq $8c8b			beq 	_CNTSExit
.8c6a	a9 2e		lda #$2e			lda 	#"."
.8c6c	20 ab 8c	jsr $8cab			jsr 	WriteDecimalBuffer 			; write decimal place
.8c6f					_CNTSDecimal:
.8c6f	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8c72	30 17		bmi $8c8b			bmi 	_CNTSExit
.8c74	e8		inx				inx 								; x 10.0
.8c75	a9 0a		lda #$0a			lda 	#10
.8c77	20 10 8e	jsr $8e10			jsr 	NSMSetByte
.8c7a	a9 08		lda #$08			lda 	#NSTFloat
.8c7c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c7f	ca		dex				dex
.8c80	20 d2 96	jsr $96d2			jsr 	FloatMultiply
.8c83	20 8d 8c	jsr $8c8d			jsr 	MakePlusTwoString
.8c86	20 45 96	jsr $9645			jsr 	FloatFractionalPart 		; get the fractional part
.8c89	80 e4		bra $8c6f			bra 	_CNTSDecimal 				; keep going.
.8c8b					_CNTSExit:
.8c8b	7a		ply				ply
.8c8c	60		rts				rts
.8c8d					MakePlusTwoString:
.8c8d	da		phx				phx
.8c8e	20 e5 8d	jsr $8de5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8c91	e8		inx				inx 								; access it
.8c92	e8		inx				inx
.8c93	20 a8 96	jsr $96a8			jsr 	FloatIntegerPart 			; make it an integer
.8c96	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8c98	20 11 95	jsr $9511			jsr 	ConvertInt32
.8c9b	a2 00		ldx #$00			ldx	 	#0
.8c9d					_MPTSCopy:
.8c9d	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ca0	20 ab 8c	jsr $8cab			jsr 	WriteDecimalBuffer
.8ca3	e8		inx				inx
.8ca4	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ca7	d0 f4		bne $8c9d			bne 	_MPTSCopy
.8ca9	fa		plx				plx
.8caa	60		rts				rts
.8cab					WriteDecimalBuffer:
.8cab	da		phx				phx
.8cac	ae 14 07	ldx $0714			ldx 	dbOffset
.8caf	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8cb2	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8cb5	ee 14 07	inc $0714			inc 	dbOffset
.8cb8	fa		plx				plx
.8cb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8cba					Unary_Left:
.8cba	fa		plx				plx
.8cbb	18		clc				clc 								; only one parameter
.8cbc	20 31 8d	jsr $8d31			jsr 	SubstringInitial 			; set up.
.8cbf	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8cc2	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8cc5	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8cc8	80 2c		bra $8cf6			bra 	SubstringMain
.8cca					Unary_Right:
.8cca	fa		plx				plx
.8ccb	18		clc				clc 								; only one parameter
.8ccc	20 31 8d	jsr $8d31			jsr 	SubstringInitial 			; set up.
.8ccf	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8cd2	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8cd5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8cd8	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8cdb	b0 02		bcs $8cdf			bcs 	_URNotUnderflow
.8cdd	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8cdf					_URNotUnderFlow:
.8cdf	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8ce2	80 12		bra $8cf6			bra 	SubStringMain
.8ce4					Unary_Mid:
.8ce4	fa		plx				plx
.8ce5	38		sec				sec 								; two parameters
.8ce6	20 31 8d	jsr $8d31			jsr 	SubstringInitial 			; set up.
.8ce9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8cec	f0 05		beq $8cf3			beq 	_UMError
.8cee	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8cf1	80 03		bra $8cf6			bra 	SubStringMain
.8cf3					_UMError:
.8cf3	4c 68 98	jmp $9868			jmp 	ArgumentError
.8cf6					SubStringMain:
.8cf6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8cf9	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8cfc	b0 2d		bcs $8d2b			bcs 	_SSMNull 					; if so, return an empty string.
.8cfe	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8d01	f0 28		beq $8d2b			beq 	_SSMNull 					; return empty string.
.8d03	18		clc				clc 								; add the offset +1 to the address and
.8d04	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8d07	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8d0a	85 36		sta $36				sta 	zTemp0
.8d0c	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8d0f	69 00		adc #$00			adc 	#0
.8d11	85 37		sta $37				sta 	zTemp0+1
.8d13					_SSMNoCarry:
.8d13	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8d16	20 fc 99	jsr $99fc			jsr 	StringTempAllocate 			; allocate that many characters
.8d19	5a		phy				phy 								; save Y
.8d1a	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8d1c					_SSMCopy:
.8d1c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8d1e	f0 09		beq $8d29			beq 	_SSMEString 				; no more to copy
.8d20	20 3a 9a	jsr $9a3a			jsr 	StringTempWrite 			; and write it out.
.8d23	c8		iny				iny
.8d24	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8d27	d0 f3		bne $8d1c			bne 	_SSMCopy
.8d29					_SSMEString:
.8d29	7a		ply				ply
.8d2a					_SSMExit:
.8d2a	60		rts				rts
.8d2b					_SSMNull:
.8d2b	a9 00		lda #$00			lda 	#0
.8d2d	20 fc 99	jsr $99fc			jsr 	StringTempAllocate
.8d30	60		rts				rts
.8d31					SubstringInitial:
.8d31	da		phx				phx 								; save initial stack position
.8d32	08		php				php 								; save carry on stack indicating 2 parameters
.8d33	20 6d 8d	jsr $8d6d			jsr 	EvaluateString 				; get a string
.8d36	5a		phy				phy 								; calculate length to exponent.
.8d37	a0 ff		ldy #$ff			ldy 	#$FF
.8d39					_SIFindLength:
.8d39	c8		iny				iny
.8d3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d3c	d0 fb		bne $8d39			bne 	_SIFindLength
.8d3e	98		tya				tya
.8d3f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8d42	7a		ply				ply
.8d43	e8		inx				inx
.8d44	20 a8 93	jsr $93a8			jsr 	CheckComma 					; comma next
.8d47	20 a6 8d	jsr $8da6			jsr 	Evaluate8BitInteger 		; get next parameter
.8d4a	28		plp				plp 								; is it the last parameter ?
.8d4b	90 07		bcc $8d54			bcc 	_SSIExit 					; if so, exit.
.8d4d	e8		inx				inx
.8d4e	20 a8 93	jsr $93a8			jsr 	CheckComma 					; comma next
.8d51	20 a6 8d	jsr $8da6			jsr 	Evaluate8BitInteger 		; get last parameter
.8d54					_SSIExit:
.8d54	fa		plx				plx
.8d55	20 a0 93	jsr $93a0			jsr 	CheckRightBracket 			; check closing bracket
.8d58	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8d59					EvaluateValue:
.8d59	48		pha				pha
.8d5a	20 69 87	jsr $8769			jsr		EvaluateExpression 			; expression
.8d5d	20 7e 88	jsr $887e			jsr 	Dereference					; derefernce it
.8d60	68		pla				pla
.8d61	60		rts				rts
.8d62					EvaluateNumber:
.8d62	20 59 8d	jsr $8d59			jsr 	EvaluateValue 				; get a value
.8d65	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8d68	29 10		and #$10			and 	#NSBIsString
.8d6a	d0 16		bne $8d82			bne 	HelperTypeError
.8d6c	60		rts				rts
.8d6d					EvaluateString:
.8d6d	20 59 8d	jsr $8d59			jsr 	EvaluateValue 				; get a value
.8d70	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8d73	29 10		and #$10			and 	#NSBIsString
.8d75	f0 0b		beq $8d82			beq 	HelperTypeError
.8d77					CopyAddressToTemp0:
.8d77	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8d7a	85 36		sta $36				sta 	zTemp0
.8d7c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d7f	85 37		sta $37				sta 	zTemp0+1
.8d81	60		rts				rts
.8d82					HelperTypeError:
.8d82	4c 63 98	jmp $9863			jmp 	TypeError
.8d85					EvaluateInteger:
.8d85	20 62 8d	jsr $8d62			jsr 	EvaluateNumber
.8d88	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8d8b	d0 0a		bne $8d97			bne 	HelperValueError 			; if not, it's a float.
.8d8d	60		rts				rts
.8d8e					EvaluateUnsignedInteger:
.8d8e	20 85 8d	jsr $8d85			jsr 	EvaluateInteger 			; check integer is +ve
.8d91	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d94	30 01		bmi $8d97			bmi 	HelperValueError
.8d96	60		rts				rts
.8d97					HelperValueError:
.8d97	4c 68 98	jmp $9868			jmp 	ArgumentError
.8d9a					Evaluate16BitInteger:
.8d9a	20 8e 8d	jsr $8d8e			jsr	 	EvaluateUnsignedInteger		; get integer
.8d9d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8da0	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8da3	d0 f2		bne $8d97			bne 	HelperValueError
.8da5	60		rts				rts
.8da6					Evaluate8BitInteger:
.8da6	20 8e 8d	jsr $8d8e			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8da9	d0 ec		bne $8d97			bne 	HelperValueError
.8dab	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8dae	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8db1	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8db4	d0 e1		bne $8d97			bne 	HelperValueError
.8db6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8db9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8dba					NSMNegate:
.8dba	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8dbd	49 80		eor #$80			eor 	#NSBIsNegative
.8dbf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dc2	60		rts				rts
.8dc3					NSMNegateMantissa:
.8dc3	38		sec				sec
.8dc4	a9 00		lda #$00			lda 	#0
.8dc6	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8dc9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dcc	a9 00		lda #$00			lda 	#0
.8dce	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8dd1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8dd4	a9 00		lda #$00			lda 	#0
.8dd6	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8dd9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ddc	a9 00		lda #$00			lda 	#0
.8dde	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8de1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8de4	60		rts				rts
.8de5					NSMShiftUpTwo:
.8de5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8de8	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8deb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8dee	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8df1	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8df4	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8df7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8dfa	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8dfd	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8e00	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8e03	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e06	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8e09	60		rts				rts
.8e0a					NSMSetZeroMantissaOnly:
.8e0a	a9 00		lda #$00			lda 	#0
.8e0c	80 08		bra $8e16			bra 	NSMSetMantissa
.8e0e					NSMSetZero:
.8e0e	a9 00		lda #$00			lda 	#0
.8e10					NSMSetByte:
.8e10	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8e13	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8e16					NSMSetMantissa:
.8e16	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8e19	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8e1c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8e1f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8e22	60		rts				rts
.8e23					NSMShiftLeft:
.8e23	18		clc				clc
.8e24					NSMRotateLeft:
.8e24	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8e27	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8e2a	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8e2d	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8e30	60		rts				rts
.8e31					NSMShiftRight:
.8e31	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8e34	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8e37	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8e3a	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8e3d	60		rts				rts
.8e3e					NSMIsZero:
.8e3e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8e41	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8e44	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8e47	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8e4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9822					DecimalScalarTable:
>9822	66 66 66 66				.dword $66666666 ; 0.1
>9826	de					.byte $de
>9827	1f 85 eb 51				.dword $51eb851f ; 0.01
>982b	db					.byte $db
>982c	4c 37 89 41				.dword $4189374c ; 0.001
>9830	d8					.byte $d8
>9831	ac 8b db 68				.dword $68db8bac ; 0.0001
>9835	d4					.byte $d4
>9836	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>983a	d1					.byte $d1
>983b	83 de 1b 43				.dword $431bde83 ; 1e-06
>983f	ce					.byte $ce
>9840	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9844	ca					.byte $ca
>9845	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9849	c7					.byte $c7
>984a	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>984e	c4					.byte $c4
>984f	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9853	c0					.byte $c0
>9854	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9858	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9859					SyntaxError:
.9859	a9 02		lda #$02		lda	#2
.985b	4c 67 83	jmp $8367		jmp	ErrorHandler
.985e					RangeError:
.985e	a9 04		lda #$04		lda	#4
.9860	4c 67 83	jmp $8367		jmp	ErrorHandler
.9863					TypeError:
.9863	a9 05		lda #$05		lda	#5
.9865	4c 67 83	jmp $8367		jmp	ErrorHandler
.9868					ArgumentError:
.9868	a9 07		lda #$07		lda	#7
.986a	4c 67 83	jmp $8367		jmp	ErrorHandler
.986d					NotDoneError:
.986d	a9 0c		lda #$0c		lda	#12
.986f	4c 67 83	jmp $8367		jmp	ErrorHandler
.9872					ErrorText:
>9872	42 72 65 61 6b 00			.text	"Break",0
>9878	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9880	72 72 6f 72 00
>9885	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>988d	20 62 79 20 7a 65 72 6f 00
>9896	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>989e	61 6e 67 65 00
>98a3	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>98ab	6d 61 74 63 68 00
>98b1	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>98b9	65 6d 6f 72 79 00
>98bf	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>98c7	61 72 67 75 6d 65 6e 74 00
>98d0	53 74 6f 70 00				.text	"Stop",0
>98d5	53 74 72 69 6e 67 20 74			.text	"String too long",0
>98dd	6f 6f 20 6c 6f 6e 67 00
>98e5	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>98ed	6e 20 66 61 69 6c 65 64 00
>98f6	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>98fe	61 74 61 00
>9902	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>990a	65 6e 74 65 64 00
>9910	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9918	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9924	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>992c	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9939	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9941	74 68 6f 75 74 20 52 65 70 65 61 74 00
>994e	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9956	68 6f 75 74 20 57 68 69 6c 65 00
>9961	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9969	61 63 6b 20 66 75 6c 6c 00
>9972	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>997a	75 63 74 75 72 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8e4b					StackOpen:
.8e4b	48		pha				pha 								; save frame byte
.8e4c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8e4e	0a		asl a				asl 	a 							; claim twice this for storage
.8e4f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8e51	38		sec				sec 								; so basically subtracting from
.8e52	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8e54	85 34		sta $34				sta 	basicStack
.8e56	b0 08		bcs $8e60			bcs 	_SONoBorrow
.8e58	c6 35		dec $35				dec 	basicStack+1
.8e5a	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8e5c	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8e5e	90 04		bcc $8e64			bcc 	_SOMemory
.8e60					_SONoBorrow:
.8e60	68		pla				pla 								; get marker back and write at TOS
.8e61	92 34		sta ($34)			sta 	(basicStack)
.8e63	60		rts				rts
.8e64					_SOMemory:
.8e64							ERR_STACK
.8e64					StackClose:
.8e64	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8e66	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8e68	0a		asl a				asl 	a 							; claim twice this.
.8e69	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8e6b	85 34		sta $34				sta 	basicStack
.8e6d	90 02		bcc $8e71			bcc 	_SCExit
.8e6f	e6 35		inc $35				inc 	basicStack+1
.8e71					_SCExit:
.8e71	60		rts				rts
.8e72					StackCheckFrame:
.8e72	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8e74	29 f0		and #$f0			and 	#$F0 						; check type bits
.8e76	d0 01		bne $8e79			bne 	_SCFError 					; different, we have structures mixed up
.8e78	60		rts				rts
.8e79					_SCFError:
.8e79	8a		txa				txa 								; report error X
.8e7a	4c 67 83	jmp $8367			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8e7d					STKSaveCodePosition:
.8e7d	5a		phy				phy
.8e7e	98		tya				tya 								; save Y
.8e7f	a0 05		ldy #$05			ldy 	#5
.8e81	91 34		sta ($34),y			sta 	(basicStack),y
.8e83	88		dey				dey 								; save Code Pointer
.8e84					_STKSaveLoop:
.8e84	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8e87	91 34		sta ($34),y			sta 	(basicStack),y
.8e89	88		dey				dey
.8e8a	d0 f8		bne $8e84			bne 	_STKSaveLoop
.8e8c	7a		ply				ply
.8e8d	60		rts				rts
.8e8e					STKLoadCodePosition:
.8e8e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8e90					_STKLoadLoop:
.8e90	b1 34		lda ($34),y			lda 	(basicStack),y
.8e92	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8e95	c8		iny				iny
.8e96	c0 05		cpy #$05			cpy 	#5
.8e98	d0 f6		bne $8e90			bne 	_STKLoadLoop
.8e9a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8e9c	a8		tay				tay
.8e9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8e9e					StackReset:
.8e9e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8ea0	85 34		sta $34				sta 	0+basicStack
.8ea2	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8ea4	85 35		sta $35				sta 	1+basicStack
.8ea6	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8ea8	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8eaa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9981					StringConcrete:
.9981	5a		phy				phy 								; save position on stack
.9982	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9985	85 38		sta $38				sta 	zTemp1
.9987	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.998a	85 39		sta $39				sta 	zTemp1+1
.998c	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.998e					_SALength:
.998e	c8		iny				iny
.998f	b1 38		lda ($38),y			lda 	(zTemp1),y
.9991	d0 fb		bne $998e			bne 	_SALength
.9993	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9995	b0 3f		bcs $99d6			bcs 	_SALengthError
.9997	98		tya				tya 				 				; length of the new string
.9998	18		clc				clc
.9999	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.999b	90 02		bcc $999f			bcc 	_SAHaveLength
.999d	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.999f					_SAHaveLength:
.999f	48		pha				pha 								; save length.
.99a0	38		sec				sec
.99a1	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.99a3	6d 0e 07	adc $070e			adc 	StringMemory
.99a6	8d 0e 07	sta $070e			sta 	StringMemory
.99a9	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.99ab	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.99ae	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.99b0	6d 0f 07	adc $070f			adc 	StringMemory+1
.99b3	8d 0f 07	sta $070f			sta 	StringMemory+1
.99b6	85 3b		sta $3b				sta 	zTemp2+1
.99b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.99bb	68		pla				pla 								; save length-3 (chars allowed) in first byte
.99bc	38		sec				sec
.99bd	e9 03		sbc #$03			sbc 	#3
.99bf	92 3a		sta ($3a)			sta 	(zTemp2)
.99c1	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.99c3	a0 01		ldy #$01			ldy 	#1
.99c5	91 3a		sta ($3a),y			sta 	(zTemp2),y
.99c7					_SACopyNewString:
.99c7	a0 00		ldy #$00			ldy 	#0
.99c9					_SACopyNSLoop:
.99c9	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.99cb	c8		iny				iny 								; write two on in string storage
.99cc	c8		iny				iny
.99cd	91 3a		sta ($3a),y			sta 	(zTemp2),y
.99cf	88		dey				dey 								; this makes it one one.
.99d0	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.99d2	d0 f5		bne $99c9			bne 	_SACopyNSLoop
.99d4	7a		ply				ply
.99d5	60		rts				rts
.99d6					_SALengthError:
.99d6	a9 09		lda #$09		lda	#9
.99d8	4c 67 83	jmp $8367		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.99db					StringSystemInitialise:
.99db	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.99dd	8d 0e 07	sta $070e			sta 	0+StringMemory
.99e0	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.99e2	8d 0f 07	sta $070f			sta 	1+StringMemory
.99e5	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.99e8	60		rts				rts
.99e9					StringSpaceInitialise:
.99e9	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.99eb	8d 10 07	sta $0710			sta 	StringInitialised
.99ee	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.99f1	8d 11 07	sta $0711			sta 	StringTempPointer
.99f4	ad 0f 07	lda $070f			lda 	StringMemory+1
.99f7	3a		dec a				dec 	a
.99f8	8d 12 07	sta $0712			sta 	StringTempPointer+1
.99fb	60		rts				rts
.99fc					StringTempAllocate:
.99fc	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.99fe	b0 35		bcs $9a35			bcs 	_STALength
.9a00	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9a03	30 05		bmi $9a0a			bmi 	_STAAllocate
.9a05	48		pha				pha 								; save value to subtract.
.9a06	20 e9 99	jsr $99e9			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9a09	68		pla				pla 								; restore it
.9a0a					_STAAllocate:
.9a0a	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9a0c	18		clc				clc  								; deliberate allows one more
.9a0d	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9a10	8d 11 07	sta $0711			sta 	StringTempPointer
.9a13	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9a16	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9a18	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9a1b	69 ff		adc #$ff			adc 	#$FF
.9a1d	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9a20	85 3d		sta $3d				sta 	zsTemp+1
.9a22	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9a25	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9a28	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9a2b	a9 10		lda #$10			lda 	#NSTString
.9a2d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9a30	a9 00		lda #$00			lda 	#0 							; clear the target string
.9a32	92 3c		sta ($3c)			sta 	(zsTemp)
.9a34	60		rts				rts
.9a35					_STALength:
.9a35	a9 09		lda #$09		lda	#9
.9a37	4c 67 83	jmp $8367		jmp	ErrorHandler
.9a3a					StringTempWrite:
.9a3a	48		pha				pha
.9a3b	92 3c		sta ($3c)			sta 	(zsTemp)
.9a3d	e6 3c		inc $3c				inc 	zsTemp
.9a3f	d0 02		bne $9a43			bne 	_STWNoCarry
.9a41	e6 3d		inc $3d				inc 	zsTemp+1
.9a43					_STWNoCarry:
.9a43	a9 00		lda #$00			lda 	#0
.9a45	92 3c		sta ($3c)			sta 	(zsTemp)
.9a47	68		pla				pla
.9a48	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8eab					BackloadProgram:
.8eab	a2 ff		ldx #$ff			ldx 	#$FF
.8ead	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8eb0	20 da 8e	jsr $8eda			jsr 	BLReadByte
.8eb3	30 1e		bmi $8ed3			bmi 	_BPExit
.8eb5					_BPCopy:
.8eb5	e8		inx				inx  								; copy byte in
.8eb6	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8eb9	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8ebc	20 da 8e	jsr $8eda			jsr 	BLReadByte 					; read next byte
.8ebf	30 0a		bmi $8ecb			bmi 	_BPEndLine 					; -ve = EOL
.8ec1	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8ec3	d0 02		bne $8ec7			bne 	_BPNotTab
.8ec5	a9 20		lda #$20			lda 	#' '
.8ec7					_BPNotTab:
.8ec7	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8ec9	b0 ea		bcs $8eb5			bcs 	_BPCopy
.8ecb					_BPEndLine:
.8ecb	20 9e 90	jsr $909e			jsr 	TokeniseLine 				; tokenise the line.
.8ece	20 2a 93	jsr $932a			jsr 	MemoryAppend 				; append to current program
.8ed1	80 d8		bra $8eab			bra 	BackloadProgram
.8ed3					_BPExit:
.8ed3	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8ed6	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear variables etc.
.8ed9	60		rts				rts
.8eda					BLReadByte:
.8eda					_BLLoad:
.8eda	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8edd	ee db 8e	inc $8edb			inc 	_BLLoad+1
.8ee0	d0 03		bne $8ee5			bne 	_BLNoCarry
.8ee2	ee dc 8e	inc $8edc			inc 	_BLLoad+2
.8ee5					_BLNoCarry:
.8ee5	c9 00		cmp #$00			cmp 	#0
.8ee7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8ee8					TokeniseSearchTable:
.8ee8	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8eea	85 36		sta $36				sta 	zTemp0
.8eec	a0 00		ldy #$00			ldy 	#0
.8eee	a9 80		lda #$80			lda 	#$80 						; token #
.8ef0	85 38		sta $38				sta 	zTemp1
.8ef2					_TSTLoop:
.8ef2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8ef4	30 49		bmi $8f3f			bmi 	_TSTFail 					; -ve = end of table
.8ef6	f0 2e		beq $8f26			beq 	_TSTNext 					; zero, check next it's a dummy
.8ef8	c8		iny				iny 								; get the hash
.8ef9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8efb	88		dey				dey
.8efc	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8eff	d0 25		bne $8f26			bne 	_TSTNext
.8f01	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8f04	38		sec				sec
.8f05	ed 00 07	sbc $0700			sbc 	identStart
.8f08	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8f0a	d0 1a		bne $8f26			bne 	_TSTNext
.8f0c	5a		phy				phy 								; save Y , we might fail
.8f0d	c8		iny				iny 								; point to text
.8f0e	c8		iny				iny
.8f0f	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8f12					_TSTCompareName:
.8f12	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8f15	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8f17	d0 0c		bne $8f25			bne 	_TSTNextPullY 				; fail, pullY and do next
.8f19	e8		inx				inx
.8f1a	c8		iny				iny
.8f1b	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8f1e	d0 f2		bne $8f12			bne 	_TSTCompareName
.8f20	7a		ply				ply 								; throw Y
.8f21	a5 38		lda $38				lda 	zTemp1 						; get token #
.8f23	38		sec				sec 								; return with CS = passed.
.8f24	60		rts				rts
.8f25					_TSTNextPullY:
.8f25	7a		ply				ply 								; restore current, fall through.
.8f26					_TSTNext:
.8f26	e6 38		inc $38				inc 	zTemp1 						; token counter
.8f28	98		tya				tya
.8f29	18		clc				clc
.8f2a	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8f2c	1a		inc a				inc 	a 							; +1
.8f2d	1a		inc a				inc 	a 							; +2
.8f2e	a8		tay				tay
.8f2f	10 c1		bpl $8ef2			bpl 	_TSTLoop 					; if Y < $80 loop back
.8f31	98		tya				tya 								; add Y to zTemp0 and reset Y
.8f32	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8f34	18		clc				clc  								; but have tables > 255 bytes
.8f35	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8f37	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8f39	90 b7		bcc $8ef2			bcc 	_TSTLoop
.8f3b	e6 37		inc $37				inc 	zTemp0+1
.8f3d	80 b3		bra $8ef2			bra 	_TSTLoop
.8f3f					_TSTFail:
.8f3f	18		clc				clc
.8f40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8f41					KeywordSet0:
>8f41	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f43	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f45	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f47	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8f4d	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8f55	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8f5b	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8f62	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8f69	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8f70	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8f76	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8f7e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8f86	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8f8c	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8f93	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8f99	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8fa1	28
>8fa2	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8fa8	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8fae	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8fb4	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8fbb	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8fc1	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8fc7	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8fcc	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8fd0	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8fd6	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8fde	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8fe5	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8fec	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8ff4	43
>8ff5	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8ffb	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>9002	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>9008	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>900e	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>9013	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>9019	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>901e	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a4 DOWNTO
>9026	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>902d	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>9033	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>9038	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>903f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>9045	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>904a	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>9052	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>9058	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>905c	ff					.text	$FF
.905d					KeywordSet1:
>905d	00 65					.text	0,$65,""               ; $80 !0:EOF
>905f	00 58					.text	0,$58,""               ; $81 !1:SH1
>9061	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9063	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>906b	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>9072	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9077	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>907d	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9082	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>908a	45
>908b	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9090	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9096	ff					.text	$FF
.9097					KeywordSet2:
>9097	00 65					.text	0,$65,""               ; $80 !0:EOF
>9099	00 58					.text	0,$58,""               ; $81 !1:SH1
>909b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>909d	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.909e					TokeniseLine:
.909e	20 26 92	jsr $9226			jsr 	FixLineBufferCase 			; fix line case
.90a1	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.90a3	8d 15 07	sta $0715			sta 	tokenOffset
.90a6	9c 16 07	stz $0716			stz 	tokenLineNumber
.90a9	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.90ac	a2 ff		ldx #$ff			ldx 	#$FF
.90ae					_TKFindFirst:
.90ae	e8		inx				inx
.90af	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.90b2	f0 79		beq $912d			beq 	_TKExit
.90b4	c9 20		cmp #$20			cmp 	#' '
.90b6	90 f6		bcc $90ae			bcc 	_TKFindFirst
.90b8	c9 30		cmp #$30			cmp 	#'0'
.90ba	90 07		bcc $90c3			bcc 	_TKNoLineNumber
.90bc	c9 3a		cmp #$3a			cmp 	#'9'+1
.90be	b0 03		bcs $90c3			bcs 	_TKNoLineNumber
.90c0	20 50 92	jsr $9250			jsr 	TokeniseExtractLineNumber
.90c3					_TKNoLineNumber:
.90c3					_TKTokeniseLoop:
.90c3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.90c6	f0 65		beq $912d			beq 	_TKExit
.90c8	e8		inx				inx
.90c9	c9 20		cmp #$20			cmp 	#' '
.90cb	f0 f6		beq $90c3			beq 	_TKTokeniseLoop 			; keep looping if space found.
.90cd	ca		dex				dex 								; undo last get, A contains character, X is position.
.90ce	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.90d0	f0 61		beq $9133			beq 	_TKTokeniseIdentifier
.90d2	c9 41		cmp #$41			cmp 	#'A'
.90d4	90 04		bcc $90da			bcc 	_TKTokenisePunctuation
.90d6	c9 5b		cmp #$5b			cmp 	#'Z'+1
.90d8	90 59		bcc $9133			bcc 	_TKTokeniseIdentifier
.90da					_TKTokenisePunctuation:
.90da	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.90dc	f0 27		beq $9105			beq 	_TKString
.90de	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.90e0	f0 28		beq $910a			beq 	_TKHexConstant
.90e2	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.90e4	f0 29		beq $910f			beq 	_TKCheckDouble
.90e6	c9 3e		cmp #$3e			cmp 	#'>'
.90e8	f0 25		beq $910f			beq 	_TKCheckDouble
.90ea					_TKStandardPunctuation:
.90ea	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.90ed	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.90ef	90 0e		bcc $90ff			bcc 	_TKNoShift
.90f1	48		pha				pha 								; save
.90f2	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.90f4	85 36		sta $36				sta 	zTemp0
.90f6	68		pla				pla
.90f7	29 20		and #$20			and 	#32 						; bit 5
.90f9	4a		lsr a				lsr 	a 							; shift into bit 3
.90fa	4a		lsr a				lsr 	a
.90fb	05 36		ora $36				ora 	zTemp0
.90fd	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.90ff					_TKNoShift:
.90ff	20 95 92	jsr $9295			jsr 	TokeniseWriteByte 			; write the punctuation character
.9102	e8		inx				inx 								; consume the character
.9103	80 be		bra $90c3			bra 	_TKTokeniseLoop 			; and loop round again.
.9105					_TKString:
.9105	20 b5 91	jsr $91b5			jsr 	TokeniseString
.9108	80 b9		bra $90c3			bra 	_TKTokeniseLoop
.910a					_TKHexConstant:
.910a	20 f0 91	jsr $91f0			jsr 	TokeniseHexConstant
.910d	80 b4		bra $90c3			bra 	_TKTokeniseLoop
.910f					_TKCheckDouble:
.910f	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.9112	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9114	90 d4		bcc $90ea			bcc 	_TKStandardPunctuation
.9116	c9 3f		cmp #$3f			cmp 	#'>'+1
.9118	b0 d0		bcs $90ea			bcs 	_TKStandardPunctuation
.911a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.911d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.911f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9120	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9123	38		sec				sec
.9124	e9 3c		sbc #$3c			sbc 	#'<'
.9126	20 95 92	jsr $9295			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9129	e8		inx				inx 								; consume both
.912a	e8		inx				inx
.912b	80 96		bra $90c3			bra 	_TKTokeniseLoop
.912d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.912f	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.9132	60		rts				rts
.9133					_TKTokeniseIdentifier:
.9133	8e 00 07	stx $0700			stx 	identStart 					; save start
.9136	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9139					_TKCheckLoop:
.9139	e8		inx				inx 								; look at next, we know first is identifier.
.913a	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.913d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.913f	f0 f8		beq $9139			beq 	_TKCheckLoop
.9141	c9 30		cmp #$30			cmp	 	#"0"
.9143	90 0c		bcc $9151			bcc 	_TKEndIdentifier
.9145	c9 3a		cmp #$3a			cmp 	#"9"+1
.9147	90 f0		bcc $9139			bcc 	_TKCheckLoop
.9149	c9 41		cmp #$41			cmp	 	#"A"
.914b	90 04		bcc $9151			bcc 	_TKEndIdentifier
.914d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.914f	90 e8		bcc $9139			bcc 	_TKCheckLoop
.9151					_TKEndIdentifier:
.9151	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9154	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9156	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9158	f0 06		beq $9160			beq 	_TKHasTypeCharacter
.915a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.915c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.915e	d0 07		bne $9167			bne 	_TKNoTypeCharacter
.9160					_TKHasTypeCharacter:
.9160	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9163	e8		inx				inx 								; read next
.9164	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9167					_TKNoTypeCharacter:
.9167	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9169	d0 09		bne $9174			bne 	_TKNoArray
.916b	e8		inx				inx 								; skip the (
.916c	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.916f	09 04		ora #$04			ora 	#$04
.9171	8d 04 07	sta $0704			sta 	identTypeByte
.9174					_TKNoArray:
.9174	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9177	20 11 92	jsr $9211			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.917a	a0 8f		ldy #$8f			ldy 	#(KeywordSet0) >> 8
.917c	a9 41		lda #$41			lda 	#(KeywordSet0) & $FF
.917e	20 e8 8e	jsr $8ee8			jsr 	TokeniseSearchTable
.9181	a2 00		ldx #$00			ldx 	#0
.9183	b0 1f		bcs $91a4			bcs 	_TKFoundToken
.9185	a0 90		ldy #$90			ldy 	#(KeywordSet1) >> 8
.9187	a9 5d		lda #$5d			lda 	#(KeywordSet1) & $FF
.9189	20 e8 8e	jsr $8ee8			jsr 	TokeniseSearchTable
.918c	a2 81		ldx #$81			ldx 	#$81
.918e	b0 14		bcs $91a4			bcs 	_TKFoundToken
.9190	a0 90		ldy #$90			ldy 	#(KeywordSet1) >> 8
.9192	a9 5d		lda #$5d			lda 	#(KeywordSet1) & $FF
.9194	20 e8 8e	jsr $8ee8			jsr 	TokeniseSearchTable
.9197	a2 82		ldx #$82			ldx 	#$82
.9199	b0 09		bcs $91a4			bcs 	_TKFoundToken
.919b	20 a1 92	jsr $92a1			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.919e	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.91a1	4c c3 90	jmp $90c3			jmp 	_TKTokeniseLoop 			; and go round again.
.91a4					_TKFoundToken:
.91a4	48		pha				pha 								; save token
.91a5	8a		txa				txa 								; shift in X, is there one ?
.91a6	f0 03		beq $91ab			beq 	_TKNoTShift
.91a8	20 95 92	jsr $9295			jsr 	TokeniseWriteByte 			; if so, write it out
.91ab					_TKNoTShift:
.91ab	68		pla				pla 								; restore and write token
.91ac	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.91af	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.91b2	4c c3 90	jmp $90c3			jmp 	_TKTokeniseLoop 			; and go round again.
.91b5					TokeniseString:
.91b5	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.91b7	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.91ba	e8		inx				inx									; start of quoted string.
.91bb	da		phx				phx 								; push start of string on top
.91bc	ca		dex				dex
.91bd					_TSFindEnd:
.91bd	e8		inx				inx
.91be	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.91c1	f0 04		beq $91c7			beq 	_TSEndOfString
.91c3	c9 22		cmp #$22			cmp 	#'"'
.91c5	d0 f6		bne $91bd			bne 	_TSFindEnd
.91c7					_TSEndOfString:
.91c7	7a		ply				ply  								; so now Y is first character, X is character after end.
.91c8	48		pha				pha 								; save terminating character
.91c9	20 d1 91	jsr $91d1			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.91cc	68		pla				pla 								; terminating character
.91cd	f0 01		beq $91d0			beq 	_TSNotQuote					; if it wasn't EOS skip it
.91cf	e8		inx				inx
.91d0					_TSNotQuote:
.91d0	60		rts				rts
.91d1					TOWriteBlockXY:
.91d1	86 36		stx $36				stx 	zTemp0 						; write end character
.91d3	98		tya				tya
.91d4	49 ff		eor #$ff			eor 	#$FF
.91d6	38		sec				sec
.91d7	65 36		adc $36				adc 	zTemp0
.91d9	1a		inc a				inc 	a 							; one extra for NULL
.91da	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.91dd					_TOBlockLoop:
.91dd	c4 36		cpy $36				cpy 	zTemp0
.91df	f0 09		beq $91ea			beq 	_TOBlockExit
.91e1	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.91e4	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.91e7	c8		iny				iny
.91e8	80 f3		bra $91dd			bra 	_TOBlockLoop
.91ea					_TOBlockExit:
.91ea	a9 00		lda #$00			lda 	#0
.91ec	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.91ef	60		rts				rts
.91f0					TokeniseHexConstant:
.91f0	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.91f2	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.91f5	e8		inx				inx									; start of quoted string.
.91f6	da		phx				phx 								; push start of constant on top
.91f7	ca		dex				dex
.91f8					_THFindLoop:
.91f8	e8		inx				inx
.91f9	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.91fc	c9 30		cmp #$30			cmp 	#"0"
.91fe	90 0c		bcc $920c			bcc 	_THFoundEnd
.9200	c9 3a		cmp #$3a			cmp 	#"9"+1
.9202	90 f4		bcc $91f8			bcc 	_THFindLoop
.9204	c9 41		cmp #$41			cmp 	#"A"
.9206	90 04		bcc $920c			bcc 	_THFoundEnd
.9208	c9 47		cmp #$47			cmp 	#"F"+1
.920a	90 ec		bcc $91f8			bcc 	_THFindLoop
.920c					_THFoundEnd:
.920c	7a		ply				ply 								; restore start
.920d	20 d1 91	jsr $91d1			jsr 	TOWriteBlockXY 				; output the block
.9210	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9211					TokeniseCalculateHash:
.9211	da		phx				phx
.9212	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9215	a9 00		lda #$00			lda 	#0
.9217					_TCHLoop:
.9217	18		clc				clc
.9218	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.921b	e8		inx				inx
.921c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.921f	d0 f6		bne $9217			bne 	_TCHLoop
.9221	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9224	fa		plx				plx
.9225	60		rts				rts
.9226					FixLineBufferCase:
.9226	a2 00		ldx #$00			ldx 	#0
.9228					_FLBCLoop:
.9228	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.922b	f0 22		beq $924f			beq 	_FLBCExit 					; end of string.
.922d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.922f	f0 11		beq $9242			beq 	_FLBCInQuotes
.9231	e8		inx				inx
.9232	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9234	90 f2		bcc $9228			bcc 	_FLBCLoop
.9236	c9 7b		cmp #$7b			cmp 	#'z'+1
.9238	b0 ee		bcs $9228			bcs 	_FLBCLoop
.923a	38		sec				sec 								; make U/C
.923b	e9 20		sbc #$20			sbc 	#32
.923d	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9240	80 e6		bra $9228			bra 	_FLBCLoop
.9242					_FLBCInQuotes:
.9242	e8		inx				inx 								; advance
.9243	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.9246	f0 07		beq $924f			beq 	_FLBCExit 					; exit on EOS
.9248	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.924a	d0 f6		bne $9242			bne 	_FLBCInQuotes
.924c	e8		inx				inx 								; skip over it
.924d	80 d9		bra $9228			bra 	_FLBCLoop
.924f					_FLBCExit:
.924f	60		rts				rts
.9250					TokeniseExtractLineNumber:
.9250	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.9253	48		pha				pha
.9254	ad 16 07	lda $0716			lda 	tokenLineNumber
.9257	48		pha				pha
.9258	20 8e 92	jsr $928e			jsr 	_TELNTimes2 				; line # x 4
.925b	20 8e 92	jsr $928e			jsr 	_TELNTimes2 				; line # x 2
.925e	18		clc				clc 								; add stacked value
.925f	68		pla				pla
.9260	6d 16 07	adc $0716			adc 	tokenLineNumber
.9263	8d 16 07	sta $0716			sta 	tokenLineNumber
.9266	68		pla				pla
.9267	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.926a	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.926d	20 8e 92	jsr $928e			jsr 	_TELNTimes2 				; line # x 10
.9270	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.9273	e8		inx				inx
.9274	29 0f		and #$0f			and 	#15 						; add to line #
.9276	18		clc				clc
.9277	6d 16 07	adc $0716			adc 	tokenLineNumber
.927a	8d 16 07	sta $0716			sta 	tokenLineNumber
.927d	90 03		bcc $9282			bcc 	_TLENNoCarry
.927f	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9282					_TLENNoCarry:
.9282	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9285	c9 30		cmp #$30			cmp 	#'0'
.9287	90 04		bcc $928d			bcc 	_TLENExit
.9289	c9 3a		cmp #$3a			cmp 	#'9'+1
.928b	90 c3		bcc $9250			bcc 	TokeniseExtractLineNumber
.928d					_TLENExit:
.928d	60		rts				rts
.928e					_TELNTimes2:
.928e	0e 16 07	asl $0716			asl 	tokenLineNumber
.9291	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9294	60		rts				rts
.9295					TokeniseWriteByte:
.9295	da		phx				phx
.9296	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9299	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.929c	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.929f	fa		plx				plx
.92a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.92a1					CheckCreateVariableRecord:
.92a1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.92a3	85 36		sta $36				sta 	0+zTemp0
.92a5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.92a7	85 37		sta $37				sta 	1+zTemp0
.92a9					_CCVSearch:
.92a9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.92ab	f0 2c		beq $92d9			beq 	_CCVFail
.92ad	a0 01		ldy #$01			ldy 	#1 							; read the hash
.92af	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.92b1	cd 03 07	cmp $0703			cmp 	identHash
.92b4	d0 16		bne $92cc			bne 	_CCVNext
.92b6	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.92b8	ae 00 07	ldx $0700			ldx 	identStart
.92bb					_CCVCompare:
.92bb	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.92be	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.92c0	e8		inx				inx 								; advance pointers
.92c1	c8		iny				iny
.92c2	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.92c3	d0 07		bne $92cc			bne 	_CCVNext  					; didn't match go to next.
.92c5	90 f4		bcc $92bb			bcc 	_CCVCompare 				; not finished yet.
.92c7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.92ca	f0 41		beq $930d			beq 	_CCVFound 					; yes, we were successful
.92cc					_CCVNext:
.92cc	18		clc				clc
.92cd	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.92cf	65 36		adc $36				adc 	zTemp0
.92d1	85 36		sta $36				sta 	zTemp0
.92d3	90 d4		bcc $92a9			bcc 	_CCVSearch
.92d5	e6 37		inc $37				inc 	zTemp0+1
.92d7	80 d0		bra $92a9			bra 	_CCVSearch
.92d9					_CCVFail:
.92d9	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.92db	ad 03 07	lda $0703			lda 	identHash
.92de	91 36		sta ($36),y			sta 	(zTemp0),y
.92e0	c8		iny				iny 								; offset 2 is the type byte
.92e1	ad 04 07	lda $0704			lda 	identTypeByte
.92e4	91 36		sta ($36),y			sta 	(zTemp0),y
.92e6	c8		iny				iny
.92e7					_CCVData:
.92e7	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.92e9	91 36		sta ($36),y			sta 	(zTemp0),y
.92eb	c8		iny				iny
.92ec	c0 08		cpy #$08			cpy 	#8
.92ee	90 f7		bcc $92e7			bcc 	_CCVData
.92f0	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.92f3					_CCVCopyName:
.92f3	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.92f6	91 36		sta ($36),y			sta 	(zTemp0),y
.92f8	e8		inx				inx
.92f9	c8		iny				iny
.92fa	ec 02 07	cpx $0702			cpx 	identTypeEnd
.92fd	d0 f4		bne $92f3			bne 	_CCVCopyName
.92ff	98		tya				tya 								; patch offset
.9300	92 36		sta ($36)			sta 	(zTemp0)
.9302	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9304	91 36		sta ($36),y			sta 	(zTemp0),y
.9306	88		dey				dey
.9307	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9309	09 80		ora #$80			ora 	#$80
.930b	91 36		sta ($36),y			sta 	(zTemp0),y
.930d					_CCVFound:
.930d	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.930f	38		sec				sec
.9310	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9312	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9314	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.9317	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9319	20 95 92	jsr $9295			jsr 	TokeniseWriteByte
.931c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9a49					MemoryPeek:
.9a49	b2 36		lda ($36)			lda 	(zTemp0)
.9a4b	60		rts				rts
.9a4c					MemoryPoke:
.9a4c	92 36		sta ($36)			sta 	(zTemp0)
.9a4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9a4f					EXTPrintCharacter:
.9a4f	48		pha				pha
.9a50	da		phx				phx
.9a51	5a		phy				phy
.9a52	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9a55	7a		ply				ply
.9a56	fa		plx				plx
.9a57	68		pla				pla
.9a58	60		rts				rts
.9a59					EXTInputSingleCharacter:
.9a59	da		phx				phx
.9a5a	5a		phy				phy
.9a5b					_EISCWait:
.9a5b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9a5e	c9 00		cmp #$00			cmp 	#0
.9a60	f0 f9		beq $9a5b			beq 	_EISCWait
.9a62	7a		ply				ply
.9a63	fa		plx				plx
.9a64	60		rts				rts
.9a65					EXTInputLine:
.9a65	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9a67					_ILLoop:
.9a67	da		phx				phx 								; read character in
.9a68	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9a6b	fa		plx				plx
.9a6c	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9a6e	f0 12		beq $9a82			beq 	_ILBackspace
.9a70	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9a72	f0 15		beq $9a89			beq 	_ILExit
.9a74	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9a76	90 ef		bcc $9a67			bcc 	_ILLoop
.9a78	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9a7a	f0 eb		beq $9a67			beq 	_ILLoop
.9a7c	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9a7f	e8		inx				inx
.9a80	80 e5		bra $9a67			bra 	_ILLoop
.9a82					_ILBackspace:
.9a82	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9a84	f0 e1		beq $9a67			beq 	_ILLoop
.9a86	ca		dex				dex 								; back one.
.9a87	80 de		bra $9a67			bra 	_ILLoop
.9a89					_ILExit:
.9a89	20 4f 9a	jsr $9a4f			jsr 	EXTPrintCharacter
.9a8c	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9a8f	60		rts				rts
.9a90					EXTBreakCheck:
.9a90	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.931d					MemoryNew:
.931d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.931f	85 30		sta $30				sta 	codePtr
.9321	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9323	85 31		sta $31				sta 	codePtr+1
.9325	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9327	92 30		sta ($30)			sta 	(codePtr)
.9329	60		rts				rts
.932a					MemoryAppend:
.932a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.932c	85 30		sta $30				sta 	codePtr
.932e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9330	85 31		sta $31				sta 	codePtr+1
.9332					_MAFindEnd:
.9332	b2 30		lda ($30)			lda 	(codePtr)
.9334	f0 0d		beq $9343			beq 	_MAFoundEnd
.9336	18		clc				clc
.9337	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9339	65 30		adc $30				adc 	codePtr
.933b	85 30		sta $30				sta 	codePtr
.933d	90 02		bcc $9341			bcc 	_CREExit
.933f	e6 31		inc $31				inc 	codePtr+1
.9341					_CREExit:
.9341	80 ef		bra $9332			bra 	_MAFindEnd
.9343					_MAFoundEnd:
.9343	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9346	c0 04		cpy #$04			cpy 	#4 							; blank line
.9348	f0 0e		beq $9358			beq 	_MANoLine
.934a	a9 00		lda #$00			lda 	#0 							; end of program
.934c	91 30		sta ($30),y			sta 	(codePtr),y
.934e					_MACopy:
.934e	88		dey				dey
.934f	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9352	91 30		sta ($30),y			sta 	(codePtr),y
.9354	c0 00		cpy #$00			cpy 	#0
.9356	d0 f6		bne $934e			bne 	_MACopy
.9358					_MANoLine:
.9358	60		rts				rts
.9359					MemoryInline:
.9359	98		tya				tya 								; put address into stack,x
.935a	18		clc				clc
.935b	65 30		adc $30				adc 	codePtr
.935d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9360	a5 31		lda $31				lda 	codePtr+1
.9362	69 00		adc #$00			adc 	#0
.9364	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9367	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.936a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.936d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.936e					MemoryTransferAX:
.936e	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9370	86 37		stx $37				stx 	zTemp0+1
.9372	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9374	85 30		sta $30				sta 	codePtr
.9376	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9378	85 31		sta $31				sta 	codePtr+1
.937a					_MTAXLoop:
.937a	b2 30		lda ($30)			lda 	(codePtr)
.937c	f0 1d		beq $939b			beq 	_MTAXError 					; not found.
.937e	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9380	b1 30		lda ($30),y			lda 	(codePtr),y
.9382	c5 36		cmp $36				cmp 	zTemp0
.9384	d0 07		bne $938d			bne 	_MTAXNext
.9386	c8		iny				iny 								; check MSB
.9387	b1 30		lda ($30),y			lda 	(codePtr),y
.9389	c5 37		cmp $37				cmp 	zTemp0+1
.938b	f0 0d		beq $939a			beq 	_MTAXExit 					; success !
.938d					_MTAXNext:
.938d	18		clc				clc
.938e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9390	65 30		adc $30				adc 	codePtr
.9392	85 30		sta $30				sta 	codePtr
.9394	90 02		bcc $9398			bcc 	_CREExit
.9396	e6 31		inc $31				inc 	codePtr+1
.9398					_CREExit:
.9398	80 e0		bra $937a			bra 	_MTAXLoop
.939a					_MTAXExit:
.939a	60		rts				rts
.939b					_MTAXError:
.939b	a9 0d		lda #$0d		lda	#13
.939d	4c 67 83	jmp $8367		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
