
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Nov 14 22:43:20 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 12 a8	jsr $a812			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.8014	20 50 88	jsr $8850			jsr 	NewCommand 					; erase current program
.8017	20 fc 82	jsr $82fc			jsr 	BackloadProgram
.801a	4c d9 89	jmp $89d9			jmp 	CommandRun
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 4d 6f			.text "Built Monday 14-Nov-2022. Build 2997."
>8064	6e 64 61 79 20 31 34 2d 4e 6f 76 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 32 39 39 37 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8084					AssembleGroup1:
.8084	a9 ff		lda #$ff			lda 	#$FF
.8086	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8089	80 02		bra $808d			bra 	AsmGroup12
.808b					AssembleGroup2:
.808b	a9 00		lda #$00			lda 	#$00
.808d					AsmGroup12:
.808d	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8090	68		pla				pla 								; pop the return address to access the information following.
.8091	fa		plx				plx
.8092	20 1b 81	jsr $811b			jsr 	AccessParameters 			; get opcode and save as base
.8095	8d a4 04	sta $04a4			sta 	BaseOpcode
.8098	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809b	d0 08		bne $80a5			bne 	_AG12HaveMask
.809d	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.809f	20 23 81	jsr $8123			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a2	8d a5 04	sta $04a5			sta 	ModeMask
.80a5					_AG12HaveMask:
.80a5	20 5e 82	jsr $825e			jsr 	TypeAndCalculateOperand 	; get zero page type
.80a8	da		phx				phx 								; save found address mode
.80a9	20 87 81	jsr $8187			jsr 	AssembleModeX
.80ac	fa		plx				plx  								; restore address mode
.80ad	b0 0b		bcs $80ba			bcs 	_AG12Exit
.80af	20 bb 80	jsr $80bb			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b2	20 87 81	jsr $8187			jsr 	AssembleModeX
.80b5	b0 03		bcs $80ba			bcs 	_AG12Exit
.80b7	4c 86 9f	jmp $9f86			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80ba					_AG12Exit:
.80ba	60		rts				rts
.80bb					PromoteToAbsolute:
.80bb	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80bd	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80bf	f0 19		beq $80da			beq 	_PTADo
.80c1	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c3	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c5	f0 13		beq $80da			beq 	_PTADo
.80c7	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80c9	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cb	f0 0d		beq $80da			beq 	_PTADo
.80cd	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80cf	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d1	f0 07		beq $80da			beq 	_PTADo
.80d3	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d5	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d7	f0 01		beq $80da			beq 	_PTADo
.80d9	60		rts				rts
.80da					_PTADo:
.80da	aa		tax				tax
.80db	60		rts				rts
.80dc					AssembleGroup3:
.80dc	68		pla				pla 								; get parameters, which is just the opcode.
.80dd	fa		plx				plx
.80de	20 1b 81	jsr $811b			jsr 	AccessParameters 			; get and output opcode
.80e1	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.80e4	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get a 16 bit operand
.80e7	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ea	38		sec				sec
.80eb	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80ee	48		pha				pha 								; LSB in A
.80ef	ad 10 04	lda $0410			lda 	NSMantissa1
.80f2	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f5	aa		tax				tax 								; MSB in X
.80f6	68		pla				pla
.80f7	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80f8	69 7f		adc #$7f			adc 	#$7F
.80fa	90 01		bcc $80fd			bcc 	_AG3NoCarry
.80fc	e8		inx				inx
.80fd					_AG3NoCarry:
.80fd	38		sec				sec 								; fix back and write out anyways.
.80fe	e9 80		sbc #$80			sbc 	#$80
.8100	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.8103	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8105	f0 0a		beq $8111			beq 	_AG3Exit
.8107	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810a	29 01		and #$01			and 	#1
.810c	f0 03		beq $8111			beq 	_AG3Exit
.810e	4c 8b 9f	jmp $9f8b			jmp 	RangeError 					; no, branch is out of range
.8111					_AG3Exit:
.8111	60		rts				rts
.8112					AssembleGroup4:
.8112	68		pla				pla 								; pop address
.8113	fa		plx				plx
.8114	20 1b 81	jsr $811b			jsr 	AccessParameters 			; access and get first
.8117	20 33 81	jsr $8133			jsr 	AssemblerWriteByte 			; output it.
.811a	60		rts				rts
.811b					AccessParameters:
.811b	8d a1 04	sta $04a1			sta 	ParamStart
.811e	8e a2 04	stx $04a2			stx 	ParamStart+1
.8121	a9 01		lda #$01			lda 	#1
.8123					GetParameter:
.8123	5a		phy				phy
.8124	a8		tay				tay
.8125	ad a1 04	lda $04a1			lda 	ParamStart
.8128	85 36		sta $36				sta 	zTemp0
.812a	ad a2 04	lda $04a2			lda 	ParamStart+1
.812d	85 37		sta $37				sta 	zTemp0+1
.812f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8131	7a		ply				ply
.8132	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8133					AssemblerWriteByte:
.8133	48		pha			pha
.8134	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8137	29 02		and #$02		and 	#2
.8139	f0 1b		beq $8156		beq 	_AWBNoPrint
.813b	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.813e	20 71 81	jsr $8171		jsr 	PrintHex
.8141	ad 9e 04	lda $049e		lda		AssemblerAddress
.8144	20 71 81	jsr $8171		jsr 	PrintHex
.8147	a9 20		lda #$20		lda 	#' '
.8149	20 2a a7	jsr $a72a		jsr 	EXTPrintCharacter
.814c	68		pla			pla 									; print byte
.814d	48		pha			pha
.814e	20 71 81	jsr $8171		jsr 	PrintHex
.8151	a9 0d		lda #$0d		lda 	#13
.8153	20 2a a7	jsr $a72a		jsr 	EXTPrintCharacter
.8156					_AWBNoPrint:
.8156	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8159	85 36		sta $36			sta 	zTemp0
.815b	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.815e	f0 0e		beq $816e		beq 	_AWBRange
.8160	85 37		sta $37			sta 	zTemp0+1
.8162	68		pla			pla 									; write byte out
.8163	92 36		sta ($36)		sta 	(zTemp0)
.8165	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8168	d0 03		bne $816d		bne 	_AWBNoCarry
.816a	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816d					_AWBNoCarry:
.816d	60		rts			rts
.816e					_AWBRange:
.816e	4c 8b 9f	jmp $9f8b		jmp 	RangeError
.8171					PrintHex:
.8171	48		pha				pha
.8172	4a		lsr a				lsr 	a
.8173	4a		lsr a				lsr 	a
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	20 7a 81	jsr $817a			jsr 	_PrintNibble
.8179	68		pla				pla
.817a					_PrintNibble:
.817a	29 0f		and #$0f			and 	#15
.817c	c9 0a		cmp #$0a			cmp 	#10
.817e	90 02		bcc $8182			bcc 	_NoShift
.8180	69 06		adc #$06			adc 	#6
.8182					_NoShift:
.8182	69 30		adc #$30			adc 	#48
.8184	4c 2a a7	jmp $a72a			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8187					AssembleModeX:
.8187	5a		phy				phy
.8188	ad a3 04	lda $04a3			lda 	IsGroup1
.818b	f0 17		beq $81a4			beq 	_AMXGroup2
.818d	8a		txa				txa 							; is it in group # 1
.818e	29 40		and #$40			and 	#AM_ISG1
.8190	f0 50		beq $81e2			beq 	_AMXFail 				; no, give up.
.8192	8a		txa				txa 							; get back.
.8193	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8195	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8197	d0 22		bne $81bb			bne 	_AMXHaveInfo
.8199	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819c	c9 81		cmp #$81			cmp 	#$81
.819e	f0 42		beq $81e2			beq 	_AMXFail
.81a0	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a2	80 17		bra $81bb			bra 	_AMXHaveInfo 			; odd design decision there.
.81a4					_AMXGroup2:
.81a4	8a		txa				txa 							; is it in group 2 ?
.81a5	29 20		and #$20			and 	#AM_ISG2
.81a7	f0 39		beq $81e2			beq 	_AMXFail 				; no, give up.
.81a9	8a		txa				txa 							; get the offset into Y
.81aa	29 1f		and #$1f			and 	#$1F
.81ac	4a		lsr a				lsr 	a 						; make it 0-7.
.81ad	4a		lsr a				lsr  	a
.81ae	a8		tay				tay
.81af	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b2					_AMXCheckOkay:
.81b2	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b3	88		dey				dey
.81b4	10 fc		bpl $81b2			bpl 	_AMXCheckOkay
.81b6	90 2a		bcc $81e2			bcc 	_AMXFail 				; not allowed.
.81b8	8a		txa				txa  							; get mask back
.81b9	29 1f		and #$1f			and 	#$1F
.81bb					_AMXHaveInfo:
.81bb	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81bd	10 05		bpl $81c4			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81bf	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c2	d0 1e		bne $81e2			bne 	_AMXFail
.81c4					_AMXAnySize:
.81c4	18		clc				clc 							; add offset to the base opcode
.81c5	6d a4 04	adc $04a4			adc 	BaseOpcode
.81c8					_AMXOutputCode:
.81c8	20 33 81	jsr $8133			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cb	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81cd	f0 10		beq $81df			beq 	_AMXExit
.81cf	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d2	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.81d5	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d7	30 06		bmi $81df			bmi 	_AMXExit
.81d9	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81dc	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.81df					_AMXExit:
.81df	7a		ply				ply
.81e0	38		sec				sec
.81e1	60		rts				rts
.81e2					_AMXFail:
.81e2	a0 00		ldy #$00			ldy 	#0
.81e4					_AMXCheckOddities:
.81e4	8a		txa				txa
.81e5	d9 0d 82	cmp $820d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81e8	d0 16		bne $8200			bne 	_AMXCONext
.81ea	b9 0b 82	lda $820b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ed	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f0	d0 0e		bne $8200			bne 	_AMXCONext
.81f2	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f4	10 05		bpl $81fb			bpl 	_AMXCONotZero
.81f6	ad 10 04	lda $0410			lda 	NSMantissa1
.81f9	d0 05		bne $8200			bne 	_AMXCONext
.81fb					_AMXCONotZero:
.81fb	b9 0c 82	lda $820c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81fe	80 c8		bra $81c8			bra 	_AMXOutputCode 			; and assemble it
.8200					_AMXCONext:
.8200	c8		iny				iny
.8201	c8		iny				iny
.8202	c8		iny				iny
.8203	b9 0b 82	lda $820b,y			lda 	ExtraOpcode+0,y 		; end of table
.8206	d0 dc		bne $81e4			bne 	_AMXCheckOddities
.8208					_AMXCOFail:
.8208	7a		ply				ply
.8209	18		clc				clc
.820a	60		rts				rts
.820b					ExtraOpcode:
>820b	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>820e	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8211	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8214	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8217	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821a	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821d	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8220	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8223	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8226	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8229	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822a					LabelHere:
.822a	c8		iny				iny 								; skip .
.822b	a2 00		ldx #$00			ldx 	#0 							; get a term
.822d	20 c2 97	jsr $97c2			jsr 	EvaluateTerm 				; get a term
.8230	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8233	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8235	d0 24		bne $825b			bne 	_ALType
.8237	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823a	85 36		sta $36				sta 	zTemp0
.823c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.823f	85 37		sta $37				sta 	zTemp0+1
.8241	5a		phy				phy 								; copy address in.
.8242	a0 01		ldy #$01			ldy 	#1
.8244	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8247	92 36		sta ($36)			sta 	(zTemp0)
.8249	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824c	91 36		sta ($36),y			sta 	(zTemp0),y
.824e	c8		iny				iny
.824f	a9 00		lda #$00			lda 	#0
.8251	91 36		sta ($36),y			sta 	(zTemp0),y
.8253	c8		iny				iny
.8254	91 36		sta ($36),y			sta 	(zTemp0),y
.8256	c8		iny				iny
.8257	91 36		sta ($36),y			sta 	(zTemp0),y
.8259	7a		ply				ply
.825a	60		rts				rts
.825b					_ALType:
.825b	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.825e					TypeAndCalculateOperand:
.825e	b1 30		lda ($30),y			lda 	(codePtr),y
.8260	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8262	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8264	f0 5b		beq $82c1			beq 	_TACOExit
.8266	c9 80		cmp #$80			cmp 	#KWC_EOL
.8268	f0 57		beq $82c1			beq 	_TACOExit
.826a	c8		iny				iny
.826b	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826d	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.826f	f0 51		beq $82c2			beq 	CalculateOperand
.8271	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8273	f0 1f		beq $8294			beq 	_TACOIndirect
.8275	88		dey				dey 								; undo get of first character
.8276	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get operand
.8279	b1 30		lda ($30),y			lda 	(codePtr),y
.827b	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.827f	d0 40		bne $82c1			bne 	_TACOExit
.8281	c8		iny				iny
.8282	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8285	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8287	c9 58		cmp #$58			cmp 	#'X'
.8289	f0 36		beq $82c1			beq 	_TACOExit
.828b	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828d	c9 59		cmp #$59			cmp 	#'Y'
.828f	f0 30		beq $82c1			beq 	_TACOExit
.8291					_TACOSyntax:
.8291	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.8294					_TACOIndirect:
.8294	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get the operand
.8297	b1 30		lda ($30),y			lda 	(codePtr),y
.8299	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829b	f0 17		beq $82b4			beq 	_TACOIndX
.829d	20 20 8d	jsr $8d20			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a0	b1 30		lda ($30),y			lda 	(codePtr),y
.82a2	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a6	d0 19		bne $82c1			bne 	_TACOExit
.82a8	c8		iny				iny
.82a9	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ac	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82ae	d0 e1		bne $8291			bne 	_TACOSyntax
.82b0	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b2	80 0d		bra $82c1			bra 	_TACOExit
.82b4					_TACOIndX:
.82b4	c8		iny				iny
.82b5	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82b8	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82ba	d0 d5		bne $8291			bne 	_TACOSyntax
.82bc	20 20 8d	jsr $8d20			jsr 	CheckRightBracket			; check )
.82bf	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c1					_TACOExit:
.82c1	60		rts				rts
.82c2					CalculateOperand:
.82c2	48		pha				pha
.82c3	da		phx				phx
.82c4	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c6	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.82c9	fa		plx				plx
.82ca	68		pla				pla
.82cb	60		rts				rts
.82cc					TACOCheckXY:
.82cc	b1 30		lda ($30),y			lda 	(codePtr),y
.82ce	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d0	c9 40		cmp #$40			cmp 	#$40
.82d2	d0 21		bne $82f5			bne 	_TCXYFail
.82d4	b1 30		lda ($30),y			lda 	(codePtr),y
.82d6	18		clc				clc
.82d7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82d9	85 37		sta $37				sta 	zTemp0+1
.82db	c8		iny				iny
.82dc	b1 30		lda ($30),y			lda 	(codePtr),y
.82de	c8		iny				iny
.82df	85 36		sta $36				sta 	zTemp0
.82e1	5a		phy				phy 								; save position
.82e2	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e6	d0 0c		bne $82f4			bne 	_TCXYPopFail
.82e8	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ec	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82ee	f0 08		beq $82f8			beq 	_TCXYFound
.82f0	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f2	f0 04		beq $82f8			beq 	_TCXYFound
.82f4					_TCXYPopFail:
.82f4	7a		ply				ply
.82f5					_TCXYFail:
.82f5	a9 00		lda #$00			lda 	#0
.82f7	60		rts				rts
.82f8					_TCXYFound:
.82f8	7a		ply				ply 								; restore position
.82f9	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fc					BackloadProgram:
.82fc	a2 ff		ldx #$ff			ldx 	#$FF
.82fe	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.8301	20 2b 83	jsr $832b			jsr 	BLReadByte
.8304	30 1e		bmi $8324			bmi 	_BPExit
.8306					_BPCopy:
.8306	e8		inx				inx  								; copy byte in
.8307	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.830a	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.830d	20 2b 83	jsr $832b			jsr 	BLReadByte 					; read next byte
.8310	30 0a		bmi $831c			bmi 	_BPEndLine 					; -ve = EOL
.8312	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8314	d0 02		bne $8318			bne 	_BPNotTab
.8316	a9 20		lda #$20			lda 	#' '
.8318					_BPNotTab:
.8318	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.831a	b0 ea		bcs $8306			bcs 	_BPCopy
.831c					_BPEndLine:
.831c	20 b7 b3	jsr $b3b7			jsr 	TokeniseLine 				; tokenise the line.
.831f	20 39 83	jsr $8339			jsr 	EditProgramCode
.8322	80 d8		bra $82fc			bra 	BackloadProgram
.8324					_BPExit:
.8324	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.8327	20 f7 83	jsr $83f7			jsr 	ClearCommand 				; clear variables etc.
.832a	60		rts				rts
.832b					BLReadByte:
.832b					_BLLoad:
.832b	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.832e	ee 2c 83	inc $832c			inc 	_BLLoad+1
.8331	d0 03		bne $8336			bne 	_BLNoCarry
.8333	ee 2d 83	inc $832d			inc 	_BLLoad+2
.8336					_BLNoCarry:
.8336	c9 00		cmp #$00			cmp 	#0
.8338	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8339					EditProgramCode:
.8339	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.833c	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.833f	20 09 a2	jsr $a209			jsr 	MemorySearch
.8342	90 05		bcc $8349			bcc 	_EPCNoDelete 				; reached the end don't delete
.8344	d0 03		bne $8349			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8346	20 2a a1	jsr $a12a			jsr 	MemoryDeleteLine 			; delete the line
.8349					_EPCNoDelete:
.8349	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.834c	c9 80		cmp #$80			cmp 	#KWC_EOL
.834e	f0 0d		beq $835d			beq 	_EPCNoInsert
.8350	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8353	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8356	20 09 a2	jsr $a209			jsr 	MemorySearch
.8359	18		clc				clc 								; insert at this point.
.835a	20 61 a1	jsr $a161			jsr 	MemoryInsertLine 			; insert the line
.835d					_EPCNoInsert:
.835d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835e					WarmStart:
.835e	a2 ff		ldx #$ff			ldx 	#$FF
.8360	9a		txs				txs
.8361	20 40 a8	jsr $a840			jsr 	EXTInputLine 				; get line to lineBuffer
.8364	20 b7 b3	jsr $b3b7			jsr 	TokeniseLine 				; tokenise the line
.8367	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.836a	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.836d	d0 17		bne $8386			bne 	_WSEditCode 				; if so,edit code.
.836f	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8372	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8374	85 30		sta $30				sta 	codePtr
.8376	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8378	85 31		sta $31				sta 	codePtr+1
.837a	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.837d	c9 80		cmp #$80			cmp 	#KWC_EOL
.837f	f0 dd		beq $835e			beq 	WarmStart
.8381	20 eb 89	jsr $89eb			jsr 	RUNCodePointerLine 			; execute that line.
.8384	80 d8		bra $835e			bra 	WarmStart
.8386					_WSEditCode:
.8386	20 39 83	jsr $8339			jsr 	EditProgramCode
.8389	20 f7 83	jsr $83f7			jsr 	ClearCommand
.838c	80 d0		bra $835e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838e					AssembleCommand:
.838e	a2 00		ldx #$00			ldx 	#0
.8390	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; start address
.8393	ad 08 04	lda $0408			lda 	NSMantissa0
.8396	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8399	ad 10 04	lda $0410			lda 	NSMantissa1
.839c	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.839f	20 28 8d	jsr $8d28			jsr 	CheckComma
.83a2	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; options
.83a5	ad 08 04	lda $0408			lda 	NSMantissa0
.83a8	8d a0 04	sta $04a0			sta 	AssemblerControl
.83ab	60		rts				rts
.83ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83ad					AssertCommand:
.83ad	a2 00		ldx #$00			ldx 	#0
.83af	20 48 9d	jsr $9d48			jsr 	EvaluateInteger 			; the assert test
.83b2	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; exit if result is non zero.
.83b5	d0 05		bne $83bc			bne 	_ACExit
.83b7	a9 0a		lda #$0a		lda	#10
.83b9	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.83bc					_ACExit:
.83bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83bd					CallCommand:
.83bd	a2 00		ldx #$00			ldx 	#0
.83bf	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.83c2					_CCClear
.83c2	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c3	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.83c6	e0 04		cpx #$04			cpx 	#4
.83c8	d0 f8		bne $83c2			bne 	_CCClear
.83ca	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83cc					_CCCParam:
.83cc	b1 30		lda ($30),y			lda 	(codePtr),y
.83ce	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83d0	d0 09		bne $83db			bne 	_CCCRun6502
.83d2	c8		iny				iny 								; skip comma
.83d3	e8		inx				inx	 								; next level
.83d4	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d7	e0 03		cpx #$03			cpx 	#3
.83d9	90 f1		bcc $83cc			bcc 	_CCCParam 					; done all 3 ?
.83db					_CCCRun6502:
.83db	5a		phy				phy 								; save position
.83dc	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83df	85 37		sta $37				sta 	zTemp0+1
.83e1	ad 08 04	lda $0408			lda 	NSMantissa0
.83e4	85 36		sta $36				sta 	zTemp0
.83e6	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83e9	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83ec	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83ef	20 f4 83	jsr $83f4			jsr 	_CCCZTemp0 					; call zTemp0
.83f2	7a		ply				ply 								; restore position and exit
.83f3	60		rts				rts
.83f4					_CCCZTemp0:
.83f4	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f7					ClearCommand:
.83f7	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83f9	85 36		sta $36				sta 	0+zTemp0
.83fb	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83fd	85 37		sta $37				sta 	1+zTemp0
.83ff					_ClearZeroLoop:
.83ff	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8401	f0 24		beq $8427			beq 	_ClearZeroEnd
.8403	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8405	a9 00		lda #$00			lda 	#0
.8407					_ClearOneVariable:
.8407	91 36		sta ($36),y			sta 	(zTemp0),y
.8409	c8		iny				iny
.840a	c0 08		cpy #$08			cpy 	#8
.840c	d0 f9		bne $8407			bne 	_ClearOneVariable
.840e	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8410	b1 36		lda ($36),y			lda 	(zTemp0),y
.8412	c9 18		cmp #$18			cmp 	#NSTProcedure
.8414	d0 04		bne $841a			bne 	_ClearNotProcedure
.8416	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8418	91 36		sta ($36),y			sta 	(zTemp0),y
.841a					_ClearNotProcedure:
.841a	18		clc				clc 								; go to the next variable
.841b	b2 36		lda ($36)			lda 	(zTemp0)
.841d	65 36		adc $36				adc 	zTemp0
.841f	85 36		sta $36				sta 	zTemp0
.8421	90 dc		bcc $83ff			bcc 	_ClearZeroLoop
.8423	e6 37		inc $37				inc 	zTemp0+1
.8425	80 d8		bra $83ff			bra 	_ClearZeroLoop
.8427					_ClearZeroEnd:
.8427	18		clc				clc
.8428	a5 36		lda $36				lda 	zTemp0
.842a	69 01		adc #$01			adc 	#1
.842c	8d 8c 04	sta $048c			sta 	lowMemPtr
.842f	a5 37		lda $37				lda 	zTemp0+1
.8431	69 00		adc #$00			adc 	#0
.8433	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8436	20 c3 a2	jsr $a2c3			jsr 	StackReset
.8439	20 2d a3	jsr $a32d			jsr 	StringSystemInitialise
.843c	20 29 8c	jsr $8c29			jsr 	ProcedureScan
.843f	20 a7 89	jsr $89a7			jsr 	Command_Restore
.8442	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8445	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8448	9c a0 04	stz $04a0			stz 	AssemblerControl
.844b	20 c5 99	jsr $99c5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.844f					ClearScreen:
.844f	5a		phy				phy
.8450	a9 0c		lda #$0c			lda 	#12
.8452	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8455	7a		ply				ply
.8456	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8457					Command_Data:
.8457	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8459	a2 80		ldx #$80			ldx 	#KWC_EOL
.845b	20 7b 8c	jsr $8c7b			jsr 	ScanForward
.845e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.845f					DimCommand:
.845f	b1 30		lda ($30),y			lda 	(codePtr),y
.8461	29 c0		and #$c0			and 	#$C0
.8463	c9 40		cmp #$40			cmp 	#$40
.8465	d0 7a		bne $84e1			bne 	_DCSyntax
.8467	b1 30		lda ($30),y			lda 	(codePtr),y
.8469	18		clc				clc
.846a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.846c	85 3f		sta $3f				sta 	zaTemp+1
.846e	c8		iny				iny
.846f	b1 30		lda ($30),y			lda 	(codePtr),y
.8471	c8		iny				iny
.8472	85 3e		sta $3e				sta 	zaTemp
.8474	5a		phy				phy
.8475	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8477	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8479	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.847b	c9 18		cmp #$18			cmp 	#NSTProcedure
.847d	f0 62		beq $84e1			beq 	_DCSyntax
.847f	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8481	29 04		and #$04			and 	#NSBIsArray
.8483	f0 64		beq $84e9			beq 	_DCType
.8485	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8487	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8489	d0 59		bne $84e4			bne 	_DCRedefine
.848b	7a		ply				ply
.848c	20 ec 84	jsr $84ec			jsr 	_DCGetSize 				; get array size, check it.
.848f	5a		phy				phy
.8490	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8492	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8494	7a		ply				ply 							; is there a second (e.g. ,x)
.8495	b1 30		lda ($30),y			lda 	(codePtr),y
.8497	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8499	d0 0a		bne $84a5			bne 	_DCOneDimension
.849b	c8		iny				iny 							; skip comma
.849c	20 ec 84	jsr $84ec			jsr 	_DCGetSize 				; get 2nd array size
.849f	5a		phy				phy
.84a0	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84a2	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a4	7a		ply				ply
.84a5					_DCOneDimension:
.84a5	5a		phy				phy 							; save position
.84a6	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84aa	aa		tax				tax
.84ab	c8		iny				iny
.84ac	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ae	e8		inx				inx 							; bump them.
.84af	1a		inc a				inc 	a
.84b0	20 91 9d	jsr $9d91			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b3	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b5	29 e0		and #$e0			and 	#$E0
.84b7	d0 23		bne $84dc			bne 	_DCSize
.84b9	a0 02		ldy #$02			ldy 	#2 						; get base type
.84bb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84bd	20 fa 84	jsr $84fa			jsr 	ScaleByBaseType 		; scale by base type
.84c0	a5 36		lda $36				lda 	zTemp0
.84c2	a6 37		ldx $37				ldx 	zTemp0+1
.84c4	20 87 99	jsr $9987			jsr 	AllocateXABytes 		; allocate memory
.84c7	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c9	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cb	c8		iny				iny
.84cc	8a		txa				txa
.84cd	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cf	7a		ply				ply 							; get position back
.84d0	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 		; check )
.84d3	b1 30		lda ($30),y			lda 	(codePtr),y
.84d5	c8		iny				iny 							; consume in case
.84d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d8	f0 85		beq $845f			beq 	DimCommand
.84da	88		dey				dey 							; undo consume
.84db	60		rts				rts
.84dc					_DCSize:
.84dc	a9 16		lda #$16		lda	#22
.84de	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.84e1					_DCSyntax:
.84e1	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.84e4					_DCRedefine:
.84e4	a9 15		lda #$15		lda	#21
.84e6	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.84e9					_DCType:
.84e9	4c 90 9f	jmp $9f90			jmp 	TypeError
.84ec					_DCGetSize:
.84ec	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84ee	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 	; get array dimension
.84f1	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f3	f0 e7		beq $84dc			beq 	_DCSize
.84f5	c9 fe		cmp #$fe			cmp 	#254
.84f7	f0 e3		beq $84dc			beq 	_DCSize
.84f9	60		rts				rts
.84fa					ScaleByBaseType:
.84fa	29 10		and #$10			and 	#NSBIsString 			; is it string
.84fc	d0 19		bne $8517			bne 	_SBBTString
.84fe	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8500	48		pha				pha
.8501	a5 36		lda $36				lda 	zTemp0
.8503	48		pha				pha
.8504	06 36		asl $36				asl 	zTemp0 					; x 2
.8506	26 37		rol $37				rol 	zTemp0+1
.8508	06 36		asl $36				asl 	zTemp0 					; x 4
.850a	26 37		rol $37				rol 	zTemp0+1
.850c	68		pla				pla 							; add stacked value = x 5
.850d	65 36		adc $36				adc 	zTemp0
.850f	85 36		sta $36				sta 	zTemp0
.8511	68		pla				pla
.8512	65 37		adc $37				adc 	zTemp0+1
.8514	85 37		sta $37				sta 	zTemp0+1
.8516	60		rts				rts
.8517					_SBBTString:
.8517	06 36		asl $36				asl 	zTemp0
.8519	26 37		rol $37				rol 	zTemp0+1
.851b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.851c					EndCommand:
.851c	4c 5e 83	jmp $835e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.851f					ForCommand:
.851f	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8521	20 5e a2	jsr $a25e			jsr 	StackOpen
.8524	a2 00		ldx #$00			ldx 	#0
.8526	20 c2 97	jsr $97c2			jsr 	EvaluateTerm
.8529	bd 00 04	lda $0400,x			lda 	NSStatus,x
.852c	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.852e	d0 49		bne $8579			bne		_FCError
.8530	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8532	20 30 8d	jsr $8d30			jsr 	CheckNextA
.8535	e8		inx				inx
.8536	20 48 9d	jsr $9d48			jsr 	EvaluateInteger 			; <from> in +1
.8539	b1 30		lda ($30),y			lda 	(codePtr),y
.853b	c8		iny				iny 								; consume it
.853c	48		pha				pha 								; save on stack for later
.853d	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.853f	f0 04		beq $8545			beq 	_FCNoSyntax
.8541	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8543	d0 37		bne $857c			bne 	_FCSyntaxError
.8545					_FCNoSyntax:
.8545	e8		inx				inx
.8546	20 48 9d	jsr $9d48			jsr 	EvaluateInteger
.8549	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save loop back position
.854c	68		pla				pla 								; restore DOWNTO or TO
.854d	5a		phy				phy 								; save Y on the stack
.854e	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8550	f0 02		beq $8554			beq 	_FCNotDownTo
.8552	a9 02		lda #$02			lda 	#2
.8554					_FCNotDownTo:
.8554	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8555	a0 10		ldy #$10			ldy 	#16
.8557	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8559	a0 06		ldy #$06			ldy 	#6
.855b	ad 08 04	lda $0408			lda 	NSMantissa0
.855e	91 34		sta ($34),y			sta 	(basicStack),y
.8560	ad 10 04	lda $0410			lda 	NSMantissa1
.8563	c8		iny				iny
.8564	91 34		sta ($34),y			sta 	(basicStack),y
.8566	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8568	a2 01		ldx #$01			ldx 	#1
.856a	20 7f 85	jsr $857f			jsr 	FCIntegerToStack
.856d	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.856f	a2 02		ldx #$02			ldx 	#2
.8571	20 7f 85	jsr $857f			jsr 	FCIntegerToStack
.8574	20 9f 85	jsr $859f			jsr 	CopyIndexToReference
.8577	7a		ply				ply 								; restore position
.8578	60		rts				rts
.8579					_FCError:
.8579	4c 90 9f	jmp $9f90			jmp 	TypeError
.857c					_FCSyntaxError:
.857c	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.857f					FCIntegerToStack:
.857f	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8582	10 03		bpl $8587			bpl	 	_FCNotNegative
.8584	20 b1 9d	jsr $9db1			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8587					_FCNotNegative:
.8587	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.858a	91 34		sta ($34),y			sta 	(basicStack),y
.858c	c8		iny				iny
.858d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8590	91 34		sta ($34),y			sta 	(basicStack),y
.8592	c8		iny				iny
.8593	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8596	91 34		sta ($34),y			sta 	(basicStack),y
.8598	c8		iny				iny
.8599	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.859c	91 34		sta ($34),y			sta 	(basicStack),y
.859e	60		rts				rts
.859f					CopyIndexToReference:
.859f	5a		phy				phy
.85a0	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.85a2	38		sec				sec 								; (because we copy from offset 8)
.85a3	b1 34		lda ($34),y			lda 	(basicStack),y
.85a5	e9 08		sbc #$08			sbc 	#8
.85a7	85 36		sta $36				sta 	zTemp0
.85a9	c8		iny				iny
.85aa	b1 34		lda ($34),y			lda 	(basicStack),y
.85ac	e9 00		sbc #$00			sbc 	#0
.85ae	85 37		sta $37				sta 	zTemp0+1
.85b0	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85b2	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85b4	b1 34		lda ($34),y			lda 	(basicStack),y
.85b6	0a		asl a				asl 	a 							; into carry
.85b7	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85b9	90 14		bcc $85cf			bcc 	_CITRNormal
.85bb	38		sec				sec
.85bc					_CITRNegative:
.85bc	a9 00		lda #$00			lda 	#0
.85be	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85c0	91 36		sta ($36),y			sta 	(zTemp0),y
.85c2	c8		iny				iny
.85c3	ca		dex				dex
.85c4	d0 f6		bne $85bc			bne 	_CITRNegative
.85c6	88		dey				dey 								; look at MSB of mantissa
.85c7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85c9	09 80		ora #$80			ora 	#$80
.85cb	91 36		sta ($36),y			sta 	(zTemp0),y
.85cd	7a		ply				ply
.85ce	60		rts				rts
.85cf					_CITRNormal:
.85cf	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85d1	91 36		sta ($36),y			sta 	(zTemp0),y
.85d3	c8		iny				iny
.85d4	ca		dex				dex
.85d5	d0 f8		bne $85cf			bne 	_CITRNormal
.85d7	7a		ply				ply 								; and exit.
.85d8	60		rts				rts
.85d9					NextCommand:
.85d9	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85db	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85dd	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.85e0	5a		phy				phy
.85e1	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85e3	b1 34		lda ($34),y			lda 	(basicStack),y
.85e5	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e7	30 02		bmi $85eb			bmi 	_NCStepNeg
.85e9	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85eb					_NCStepNeg:
.85eb	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85ed	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85ef	18		clc				clc
.85f0					_NCBump:
.85f0	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85f2	91 34		sta ($34),y			sta 	(basicStack),y
.85f4	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f6	c8		iny				iny 								; next byte
.85f7	ca		dex				dex 								; do four times
.85f8	d0 f6		bne $85f0			bne 	_NCBump
.85fa	20 9f 85	jsr $859f			jsr		CopyIndexToReference		; copy it to the reference variable.
.85fd	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85ff	b1 34		lda ($34),y			lda 	(basicStack),y
.8601	0a		asl a				asl 	a 							; sign bit to carry
.8602	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8604	85 38		sta $38				sta 	zTemp1
.8606	90 02		bcc $860a			bcc 	_NCCompRev 					; use if step is +ve
.8608	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.860a					_NCCompRev:
.860a	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.860c	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.860e	85 39		sta $39				sta 	zTemp1+1
.8610	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8612	38		sec				sec
.8613					_NCCompare:
.8613	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8615	b1 34		lda ($34),y			lda 	(basicStack),y
.8617	a4 39		ldy $39				ldy 	zTemp1+1
.8619	f1 34		sbc ($34),y			sbc 	(basicStack),y
.861b	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.861d	e6 39		inc $39				inc 	zTemp1+1
.861f	ca		dex				dex 								; do it 4 times.
.8620	d0 f1		bne $8613			bne 	_NCCompare
.8622	50 02		bvc $8626			bvc 	_NCNoOverflow 				; convert to signed comparison
.8624	49 80		eor #$80			eor 	#$80
.8626					_NCNoOverflow:
.8626	7a		ply				ply 								; restore Y position
.8627	0a		asl a				asl 	a 							; is bit 7 set.
.8628	90 04		bcc $862e			bcc 	_NCLoopback 				; if no , >= so loop back
.862a	20 7c a2	jsr $a27c			jsr 	StackClose 					; exit the loop
.862d	60		rts				rts
.862e					_NCLoopBack:
.862e	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; loop back
.8631	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8632					Command_GOSUB:
.8632	a2 00		ldx #$00			ldx 	#0
.8634	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8637	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8639	20 5e a2	jsr $a25e			jsr 	StackOpen 					; create frame
.863c	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save current position
.863f	4c 55 86	jmp $8655			jmp 	GotoStackX
.8642					Command_RETURN:
.8642	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8644	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8646	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.8649	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; restore code position
.864c	20 7c a2	jsr $a27c			jsr 	StackClose
.864f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8650					GotoCommand:
.8650	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8652	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.8655					GotoStackX:
.8655	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8658	48		pha				pha 								; it is slightly inefficient, just in cases.
.8659	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.865c	fa		plx				plx
.865d	20 09 a2	jsr $a209			jsr 	MemorySearch 				; transfer to line number AX.
.8660	90 05		bcc $8667			bcc 	_GotoError 					; not found, off end.
.8662	d0 03		bne $8667			bne 	_GotoError 					; not found exactly
.8664	4c e4 89	jmp $89e4			jmp 	RunNewLine 					; and go straight to new line code.
.8667					_GotoError:
.8667	a9 0d		lda #$0d		lda	#13
.8669	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.866c					IfCommand:
.866c	a2 00		ldx #$00			ldx 	#0 							; If what.
.866e	20 25 9d	jsr $9d25			jsr 	EvaluateNumber
.8671	b1 30		lda ($30),y			lda 	(codePtr),y
.8673	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8675	d0 0a		bne $8681			bne 	_IFStructured
.8677	c8		iny				iny 								; consume THEN
.8678	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; is it zero
.867b	f0 01		beq $867e			beq 	_IfFail 					; if fail, go to next line
.867d	60		rts				rts 								; if THEN just continue
.867e					_IfFail:
.867e	4c 49 8a	jmp $8a49			jmp 	EOLCommand
.8681					_IfStructured:
.8681	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; is it zero
.8684	d0 07		bne $868d			bne 	_IfExit 					; if not, then continue normally.
.8686	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.8688	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.868a	20 7b 8c	jsr $8c7b			jsr 	ScanForward 				; and run from there/
.868d					_IfExit:
.868d	60		rts				rts
.868e					ElseCode:
.868e	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8690	aa		tax				tax 								; so just go to the structure exit
.8691	20 7b 8c	jsr $8c7b			jsr 	ScanForward
.8694	60		rts				rts
.8695					EndIf:
.8695	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8696					LetCommand:
.8696	a2 00		ldx #$00			ldx 	#0
.8698	b1 30		lda ($30),y			lda 	(codePtr),y
.869a	c9 10		cmp #$10			cmp 	#KWD_AT
.869c	d0 16		bne $86b4			bne 	_LCStandard
.869e	c8		iny				iny 								; skip equal
.869f	20 c2 97	jsr $97c2			jsr 	EvaluateTerm 				; get a number
.86a2	20 06 96	jsr $9606			jsr 	Dereference 				; dereference it
.86a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86a8	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86aa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86ad	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86af	d0 10		bne $86c1			bne 	_LCMain
.86b1	4c 90 9f	jmp $9f90			jmp 	TypeError 					; was a reference before.
.86b4					_LCStandard:
.86b4	ad d0 92	lda $92d0			lda 	PrecedenceLevel+"*"			; precedence > this
.86b7	20 ea 92	jsr $92ea			jsr 	EvaluateExpressionAtPrecedence
.86ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86bd	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86bf	f0 0e		beq $86cf			beq 	_LetGoProc 					; it's a procedure call.
.86c1					_LCMain:
.86c1	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86c3	20 30 8d	jsr $8d30			jsr 	CheckNextA
.86c6	e8		inx				inx 								; RHS
.86c7	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue
.86ca	ca		dex				dex
.86cb	20 d2 86	jsr $86d2			jsr 	AssignVariable
.86ce	60		rts				rts
.86cf					_LetGoProc:
.86cf	4c b1 88	jmp $88b1			jmp 	CallProcedure
.86d2					AssignVariable:
.86d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d5	48		pha				pha 								; save a copy
.86d6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86d9	29 10		and #$10			and 	#NSBIsString
.86db	d0 0b		bne $86e8			bne 	_ASError
.86dd	68		pla				pla 								; get back
.86de	29 10		and #$10			and 	#NSBIsString 				; check type
.86e0	d0 03		bne $86e5			bne 	_ASString
.86e2	4c 2e 95	jmp $952e			jmp 	AssignNumber
.86e5					_ASString:
.86e5	4c 9c 95	jmp $959c			jmp 	AssignString
.86e8					_ASError:
.86e8	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86eb					Command_List:
.86eb	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86ee	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86f1	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86f4	a9 ff		lda #$ff			lda 	#$FF
.86f6	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86f9	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86fc	b1 30		lda ($30),y			lda 	(codePtr),y
.86fe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8700	f0 1e		beq $8720			beq 	_CLSecond
.8702	20 7e 87	jsr $877e			jsr 	CLIsDigit 					; if not digit, list all
.8705	b0 24		bcs $872b			bcs 	_CLStart
.8707	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8709	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.870c	b1 30		lda ($30),y			lda 	(codePtr),y
.870e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8710	f0 0e		beq $8720			beq 	_CLSecond 					; if so go get it
.8712	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8715	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8718	ad 14 04	lda $0414			lda 	NSMantissa1+4
.871b	8d 17 04	sta $0417			sta 	NSMantissa1+7
.871e	80 0b		bra $872b			bra 	_CLStart
.8720					_CLSecond:
.8720	c8		iny				iny 								; consume comma
.8721	20 7e 87	jsr $877e			jsr 	CLIsDigit 					; digit found
.8724	b0 05		bcs $872b			bcs 	_CLStart 					; if not, continue listing
.8726	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8728	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.872b					_CLStart
.872b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.872d	85 30		sta $30				sta 	codePtr
.872f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8731	85 31		sta $31				sta 	codePtr+1
.8733					_CLLoop:
.8733	20 6b a8	jsr $a86b			jsr 	EXTBreakCheck 				; break check
.8736	f0 30		beq $8768			beq 	_CLExit
.8738	b2 30		lda ($30)			lda 	(codePtr)
.873a	f0 2c		beq $8768			beq 	_CLExit
.873c	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.873e	20 6b 87	jsr $876b			jsr 	CLCompareLineNo
.8741	90 18		bcc $875b			bcc 	_CLNext
.8743	a2 07		ldx #$07			ldx 	#7
.8745	20 6b 87	jsr $876b			jsr 	CLCompareLineNo
.8748	f0 02		beq $874c			beq 	_CLDoThisOne
.874a	b0 0f		bcs $875b			bcs 	_CLNext
.874c					_CLDoThisOne:
.874c	20 b5 b1	jsr $b1b5			jsr 	ListConvertLine 			; convert line into token Buffer
.874f	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8751	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.8753	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.8756	a9 0d		lda #$0d			lda 	#13 						; new line
.8758	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.875b					_CLNext:
.875b	18		clc				clc
.875c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.875e	65 30		adc $30				adc 	codePtr
.8760	85 30		sta $30				sta 	codePtr
.8762	90 02		bcc $8766			bcc 	_CREExit
.8764	e6 31		inc $31				inc 	codePtr+1
.8766					_CREExit:
.8766	80 cb		bra $8733			bra 	_CLLoop
.8768					_CLExit:
.8768	4c 5e 83	jmp $835e			jmp 	WarmStart
.876b					CLCompareLineNo:
.876b	38		sec				sec
.876c	a0 01		ldy #$01			ldy 	#1
.876e	b1 30		lda ($30),y			lda 	(codePtr),y
.8770	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8773	85 36		sta $36				sta 	zTemp0
.8775	c8		iny				iny
.8776	b1 30		lda ($30),y			lda 	(codePtr),y
.8778	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.877b	05 36		ora $36				ora 	zTemp0
.877d	60		rts				rts
.877e					CLIsDigit:
.877e	b1 30		lda ($30),y			lda 	(codePtr),y
.8780	c9 30		cmp #$30			cmp 	#"0"
.8782	90 03		bcc $8787			bcc	 	_CLIDExitFalse
.8784	c9 3a		cmp #$3a			cmp 	#"9"+1
.8786	60		rts				rts
.8787					_CLIDExitFalse:
.8787	38		sec				sec
.8788	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8789					Command_LOCAL:
.8789	a2 00		ldx #$00			ldx 	#0 							; at level 0
.878b	20 97 87	jsr $8797			jsr 	LocaliseNextTerm 			; convert term to a local.
.878e	b1 30		lda ($30),y			lda 	(codePtr),y
.8790	c8		iny				iny
.8791	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8793	f0 f4		beq $8789			beq 	Command_LOCAL
.8795	88		dey				dey 								; unpick pre-get
.8796	60		rts				rts
.8797					LocaliseNextTerm:
.8797	20 c2 97	jsr $97c2			jsr 	EvaluateTerm 				; evaluate the term
.879a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.879d	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.879f	f0 61		beq $8802			beq		_LNTError
.87a1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a4	85 36		sta $36				sta 	zTemp0
.87a6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87a9	85 37		sta $37				sta  	zTemp0+1
.87ab	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87ae	29 10		and #$10			and 	#NSBIsString
.87b0	d0 1e		bne $87d0			bne 	_LNTPushString
.87b2	5a		phy				phy
.87b3	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87b5					_LNTPushNumLoop:
.87b5	b1 36		lda ($36),y			lda		(zTemp0),y
.87b7	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87ba	c8		iny				iny
.87bb	c0 05		cpy #$05			cpy 	#5
.87bd	d0 f6		bne $87b5			bne 	_LNTPushNumLoop
.87bf	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87c1	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87c4	a5 37		lda $37				lda 	zTemp0+1
.87c6	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87c9	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87cb	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87ce	7a		ply				ply
.87cf	60		rts				rts
.87d0					_LNTPushString:
.87d0	5a		phy				phy
.87d1	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d3	85 38		sta $38				sta 	zTemp1
.87d5	a0 01		ldy #$01			ldy 	#1
.87d7	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d9	85 39		sta $39				sta 	zTemp1+1
.87db	a0 00		ldy #$00			ldy 	#0 							; output string
.87dd	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87df	f0 0a		beq $87eb			beq 	_LNTStringOut
.87e1					_LNTPushStrLoop:
.87e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e3	f0 06		beq $87eb			beq 	_LNTStringOut
.87e5	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87e8	c8		iny				iny
.87e9	80 f6		bra $87e1			bra 	_LNTPushStrLoop
.87eb					_LNTStringOut:
.87eb	98		tya				tya									; output length
.87ec	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87ef	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87f2	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87f5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87f8	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87fb	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87fd	20 3c a2	jsr $a23c			jsr 	StackPushByte
.8800	7a		ply				ply
.8801	60		rts				rts
.8802					_LNTError:
.8802	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.8805					LocalPopValue:
.8805	20 55 a2	jsr $a255			jsr 	StackPopByte
.8808	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.880a	d0 17		bne $8823			bne 	_LPVString
.880c	20 55 a2	jsr $a255			jsr 	StackPopByte 				; address
.880f	85 37		sta $37				sta 	zTemp0+1
.8811	20 55 a2	jsr $a255			jsr 	StackPopByte
.8814	85 36		sta $36				sta 	zTemp0
.8816	5a		phy				phy
.8817	a0 04		ldy #$04			ldy 	#4 							; copy back
.8819					_LPVNumberCopy:
.8819	20 55 a2	jsr $a255			jsr 	StackPopByte
.881c	91 36		sta ($36),y			sta 	(zTemp0),y
.881e	88		dey				dey
.881f	10 f8		bpl $8819			bpl 	_LPVNumberCopy
.8821	7a		ply				ply 								; and complete
.8822	60		rts				rts
.8823					_LPVString:
.8823	20 55 a2	jsr $a255			jsr 	StackPopByte 				; address of record => zTemp0
.8826	85 37		sta $37				sta 	zTemp0+1
.8828	20 55 a2	jsr $a255			jsr 	StackPopByte
.882b	85 36		sta $36				sta 	zTemp0
.882d	5a		phy				phy
.882e	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8830	85 38		sta $38				sta 	zTemp1
.8832	a0 01		ldy #$01			ldy 	#1
.8834	b1 36		lda ($36),y			lda 	(zTemp0),y
.8836	85 39		sta $39				sta 	zTemp1+1
.8838	20 55 a2	jsr $a255			jsr 	StackPopByte 				; # to get => y
.883b	a8		tay				tay
.883c	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.883e	f0 0e		beq $884e			beq 	_LPVStringCopied
.8840	a9 00		lda #$00			lda 	#0 							; NULL on end
.8842	91 38		sta ($38),y			sta 	(zTemp1),y
.8844					_LPVStringCopy:
.8844	88		dey				dey
.8845	30 07		bmi $884e			bmi 	_LPVStringCopied
.8847	20 55 a2	jsr $a255			jsr 	StackPopByte
.884a	91 38		sta ($38),y			sta 	(zTemp1),y
.884c	80 f6		bra $8844			bra 	_LPVStringCopy
.884e					_LPVStringCopied:
.884e	fa		plx				plx
.884f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8850					NewCommand:
.8850	20 e7 a1	jsr $a1e7			jsr 	MemoryNew
.8853	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8856	20 f7 83	jsr $83f7			jsr 	ClearCommand 				; clear everything.
.8859	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.885a					Command_Print:
.885a	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.885b					_CPLoop:
.885b	08		php				php 								; save last action flag
.885c	b1 30		lda ($30),y			lda 	(codePtr),y
.885e	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8860	f0 46		beq $88a8			beq 	_CPExit
.8862	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8864	f0 42		beq $88a8			beq 	_CPExit
.8866	68		pla				pla 								; throw last action flag
.8867	b1 30		lda ($30),y			lda 	(codePtr),y
.8869	c8		iny				iny
.886a	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.886c	f0 37		beq $88a5			beq 	_CPContinueWithSameLine
.886e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8870	f0 2e		beq $88a0			beq 	_CPTab
.8872	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8874	f0 26		beq $889c			beq 	_CPNewLine
.8876	88		dey				dey 								; undo the get.
.8877	a2 00		ldx #$00			ldx 	#0
.8879	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get a value into slot 0
.887c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.887f	29 10		and #$10			and 	#NSBIsString
.8881	f0 0b		beq $888e			beq 	_CPNumber
.8883	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8886	ad 08 04	lda $0408			lda 	NSMantissa0
.8889	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.888c	80 cc		bra $885a			bra 	Command_Print 				; loop round clearing carry so NL if end
.888e					_CPNumber:
.888e	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8890	20 f2 9b	jsr $9bf2			jsr 	ConvertNumberToString 		; convert to string
.8893	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8895	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.8897	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.889a	80 be		bra $885a			bra 	Command_Print 				; loop round clearing carry so NL if end
.889c					_CPNewLine:
.889c	a9 0d		lda #$0d			lda 	#13
.889e	80 02		bra $88a2			bra 	_CPPrintChar
.88a0					_CPTab:
.88a0	a9 09		lda #$09			lda 	#9 							; print TAB
.88a2					_CPPrintChar:
.88a2	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.88a5					_CPContinueWithSameLine:
.88a5	38		sec				sec 								; loop round with carry set, which
.88a6	80 b3		bra $885b			bra 	_CPLoop 					; will inhibit final CR
.88a8					_CPExit:
.88a8	28		plp				plp 								; get last action flag
.88a9	b0 05		bcs $88b0			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88ab	a9 0d		lda #$0d			lda 	#13 						; print new line
.88ad	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.88b0					_CPExit2:
.88b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88b1					CallProcedure:
.88b1	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88b3	b1 30		lda ($30),y			lda 	(codePtr),y
.88b5	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88b7	f0 0c		beq $88c5			beq 	_CPEndParam
.88b9					_CPParamLoop:
.88b9	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get parameter onto stack
.88bc	e8		inx				inx 								; bump next stack
.88bd	b1 30		lda ($30),y			lda 	(codePtr),y
.88bf	c8		iny				iny
.88c0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88c2	f0 f5		beq $88b9			beq 	_CPParamLoop
.88c4	88		dey				dey 								; unpick.
.88c5					_CPEndParam:
.88c5	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88c8	c8		iny				iny									; skip right bracket
.88c9	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88cb	20 5e a2	jsr $a25e			jsr 	StackOpen
.88ce	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save loop position
.88d1	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88d4	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88d6	ad 10 04	lda $0410			lda 	NSMantissa1
.88d9	85 37		sta $37				sta 	zTemp0+1
.88db	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88dd	b2 36		lda ($36)			lda 	(zTemp0)
.88df	85 30		sta $30				sta 	safePtr
.88e1	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e3	85 31		sta $31				sta 	safePtr+1
.88e5	c8		iny				iny
.88e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e8	85 32		sta $32				sta 	safePtr+2
.88ea	c8		iny				iny
.88eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ed	85 33		sta $33				sta 	safePtr+3
.88ef	c8		iny				iny 								; get Y offset -> Y
.88f0	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f2	a8		tay				tay
.88f3	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88f5	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88f8	f0 13		beq $890d			beq 	_ParamExit 					; if so, exit.
.88fa					_ParamExtract:
.88fa	ca		dex				dex 								; put a local term on the level before
.88fb	20 97 87	jsr $8797			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88fe	20 d2 86	jsr $86d2			jsr 	AssignVariable 				; assign stacked value to the variable.
.8901	e8		inx				inx 								; advance to next parameter to do.
.8902	e8		inx				inx
.8903	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8906	f0 05		beq $890d			beq 	_ParamExit
.8908	20 28 8d	jsr $8d28			jsr 	CheckComma 					; comma seperating parameters
.890b	80 ed		bra $88fa			bra 	_ParamExtract
.890d					_ParamExit:
.890d	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; check )
.8910	60		rts				rts 								; and continue from here
.8911					Command_ENDPROC:
.8911	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8913	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8915	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.8918	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; restore code position
.891b	20 7c a2	jsr $a27c			jsr 	StackClose
.891e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.891f					Command_Read:
.891f	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8921	20 c2 97	jsr $97c2			jsr 	EvaluateTerm
.8924	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8927	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8929	f0 4a		beq $8975			beq 	_CRSyntax 					; check reference (bit 0)
.892b	20 be 89	jsr $89be			jsr 	SwapDataCodePtrs 			; swap code and data
.892e	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8931	d0 20		bne $8953			bne 	_CRContinueData
.8933					_CRKeepSearching:
.8933	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8935	aa		tax				tax
.8936	20 7b 8c	jsr $8c7b			jsr 	ScanForward
.8939	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.893b	f0 16		beq $8953			beq 	_CRHaveData 				; found it
.893d	18		clc				clc
.893e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8940	65 30		adc $30				adc 	codePtr
.8942	85 30		sta $30				sta 	codePtr
.8944	90 02		bcc $8948			bcc 	_CREExit
.8946	e6 31		inc $31				inc 	codePtr+1
.8948					_CREExit:
.8948	a0 03		ldy #$03			ldy 	#3 							; start of line.
.894a	b2 30		lda ($30)			lda 	(codePtr)
.894c	d0 e5		bne $8933			bne 	_CRKeepSearching
.894e	a9 0b		lda #$0b		lda	#11
.8950	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8953					_CRHaveData:
.8953					_CRContinueData:
.8953	a2 01		ldx #$01			ldx 	#1
.8955	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8958	ca		dex				dex
.8959	20 d2 86	jsr $86d2			jsr		AssignVariable 				; do the assignment
.895c	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.895f	b1 30		lda ($30),y			lda 	(codePtr),y
.8961	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8963	d0 04		bne $8969			bne 	_CRSwapBack
.8965	c8		iny				iny 								; consume comma
.8966	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8969					_CRSwapBack:
.8969	20 be 89	jsr $89be			jsr 	SwapDataCodePtrs			; swap them back.
.896c	b1 30		lda ($30),y			lda 	(codePtr),y
.896e	c8		iny				iny
.896f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8971	f0 ac		beq $891f			beq 	Command_Read 				; if so go round again.
.8973	88		dey				dey 								; unpick get.
.8974	60		rts				rts
.8975					_CRSyntax:
.8975	4c 86 9f	jmp $9f86			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8978					RemCommand:
.8978	b1 30		lda ($30),y			lda 	(codePtr),y
.897a	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.897c	d0 06		bne $8984			bne 	_RMExit
.897e	c8		iny				iny
.897f	98		tya				tya
.8980	38		sec				sec
.8981	71 30		adc ($30),y			adc 	(codePtr),y
.8983	a8		tay				tay
.8984					_RMExit:
.8984	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8985					Command_REPEAT:
.8985	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8987	20 5e a2	jsr $a25e			jsr 	StackOpen
.898a	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save loop position
.898d	60		rts				rts
.898e					Command_UNTIL:
.898e	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8990	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8992	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.8995	a2 00		ldx #$00			ldx 	#0
.8997	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; work out the number
.899a	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; check if zero
.899d	f0 04		beq $89a3			beq 	_CULoopBack 				; if so keep looping
.899f	20 7c a2	jsr $a27c			jsr 	StackClose		 			; return
.89a2	60		rts				rts
.89a3					_CULoopBack:
.89a3	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; loop back
.89a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89a7					Command_Restore:
.89a7	20 be 89	jsr $89be			jsr 	SwapDataCodePtrs 			; swap code and data
.89aa	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89ac	85 30		sta $30				sta 	codePtr
.89ae	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89b0	85 31		sta $31				sta 	codePtr+1
.89b2	20 be 89	jsr $89be			jsr 	SwapDataCodePtrs 			; put them back
.89b5	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89b7	8d 9b 04	sta $049b			sta 	dataPointer+4
.89ba	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89bd	60		rts				rts
.89be					SwapDataCodePtrs:
.89be	da		phx				phx
.89bf	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89c1					_SDCPLoop:
.89c1	b5 30		lda $30,x			lda 	safePtr,x
.89c3	48		pha				pha
.89c4	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89c7	95 30		sta $30,x			sta 	safePtr,x
.89c9	68		pla				pla
.89ca	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89cd	ca		dex				dex
.89ce	10 f1		bpl $89c1			bpl 	_SDCPLoop
.89d0	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89d3	8c 9b 04	sty $049b			sty 	dataPointer+4
.89d6	a8		tay				tay
.89d7	fa		plx				plx
.89d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89d9					CommandRUN:
.89d9	20 f7 83	jsr $83f7			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89dc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89de	85 30		sta $30				sta 	codePtr
.89e0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e2	85 31		sta $31				sta 	codePtr+1
.89e4					RUNNewLine:
.89e4	b2 30		lda ($30)			lda 	(codePtr)
.89e6	f0 5e		beq $8a46			beq 	CRNoProgram         		; no then END.
.89e8	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89ea	9a		txs				txs
.89eb					RUNCodePointerLine:
.89eb	a0 02		ldy #$02			ldy 	#2 							; start of program
.89ed					_CRIncMainLoop:
.89ed	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89f0	d0 05		bne $89f7			bne 	_CRNoBreakCheck
.89f2	20 6b a8	jsr $a86b			jsr 	EXTBreakCheck 				; break check
.89f5	f0 4a		beq $8a41			beq 	_CRBreak
.89f7					_CRNoBreakCheck:
.89f7	c8		iny				iny
.89f8					_CRMainLoop:
.89f8	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89fb	b1 30		lda ($30),y			lda 	(codePtr),y
.89fd	10 10		bpl $8a0f			bpl 	_CRNotKeyword
.89ff	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a01	b0 04		bcs $8a07			bcs 	_CRIsKeyword
.8a03	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a05	b0 34		bcs $8a3b			bcs		_CRSyntaxError
.8a07					_CRIsKeyword:
.8a07	c8		iny				iny 								; consume command
.8a08	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a09	aa		tax				tax 								; put in X for vector jump
.8a0a	20 3e 8a	jsr $8a3e			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a0d	80 e9		bra $89f8			bra 	_CRMainLoop 				; and loop round
.8a0f					_CRNotKeyword:
.8a0f	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a11	f0 da		beq $89ed			beq 	_CRIncMainLoop
.8a13	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a15	90 05		bcc $8a1c			bcc 	_CRNotVariable
.8a17					_CRGoLet:
.8a17	20 96 86	jsr $8696			jsr 	LetCommand
.8a1a	80 dc		bra $89f8			bra 	_CRMainLoop
.8a1c					_CRNotVariable:
.8a1c	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a1e	f0 f7		beq $8a17			beq 	_CRGoLet
.8a20	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a22	f0 f3		beq $8a17			beq 	_CRGoLet
.8a24	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a26	f0 ef		beq $8a17			beq 	_CRGoLet
.8a28	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a2a	f0 09		beq $8a35			beq 	_CRGoRem
.8a2c	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a2e	d0 0b		bne $8a3b			bne 	_CRSyntaxError
.8a30	20 2a 82	jsr $822a			jsr 	LabelHere
.8a33	80 c3		bra $89f8			bra 	_CRMainLoop
.8a35					_CRGoRem:
.8a35	c8		iny				iny
.8a36	20 78 89	jsr $8978			jsr 	RemCommand
.8a39	80 bd		bra $89f8			bra 	_CRMainLoop
.8a3b					_CRSyntaxError:
.8a3b	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.8a3e					_CRCallVector0:
.8a3e	7c ea 8a	jmp ($8aea,x)			jmp 	(VectorSet0,x)
.8a41					_CRBreak:
.8a41	a9 01		lda #$01		lda	#1
.8a43	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8a46					CRNoProgram:
.8a46	4c 1c 85	jmp $851c			jmp 	EndCommand
.8a49					EOLCommand:
.8a49	18		clc				clc
.8a4a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a4c	65 30		adc $30				adc 	codePtr
.8a4e	85 30		sta $30				sta 	codePtr
.8a50	90 02		bcc $8a54			bcc 	_CREExit
.8a52	e6 31		inc $31				inc 	codePtr+1
.8a54					_CREExit:
.8a54	80 8e		bra $89e4			bra 	RunNewLine
.8a56					Shift1Command:
.8a56	b1 30		lda ($30),y			lda 	(codePtr),y
.8a58	c8		iny				iny
.8a59	0a		asl a				asl 	a
.8a5a	aa		tax				tax
.8a5b	7c 82 8b	jmp ($8b82,x)			jmp 	(VectorSet1,x)
.8a5e					Shift2Command:
.8a5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a60	c8		iny				iny
.8a61	0a		asl a				asl 	a
.8a62	aa		tax				tax
.8a63	7c 9c 8b	jmp ($8b9c,x)			jmp 	(VectorSet2,x)
.8a66					Unused1:
.8a66					Unused2:
.8a66					Unused3:
.8a66					Unused4:
.8a66	4c 86 9f	jmp $9f86			jmp 	SyntaxError
>8a69							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a6a					VectorSetPunc:
>8a6a	26 90					.word	ShiftLeft                        ; $00 <<
>8a6c	dd 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a6e	d3 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a70	86 9f					.word	SyntaxError                      ; $03 !!3
>8a72	86 9f					.word	SyntaxError                      ; $04 ><
>8a74	e7 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a76	29 90					.word	ShiftRight                       ; $06 >>
>8a78	86 9f					.word	SyntaxError                      ; $07 !!7
>8a7a	86 9f					.word	SyntaxError                      ; $08 !!8
>8a7c	86 9f					.word	SyntaxError                      ; $09 !!9
>8a7e	86 9f					.word	SyntaxError                      ; $0a !!10
>8a80	86 9f					.word	SyntaxError                      ; $0b !!11
>8a82	86 9f					.word	SyntaxError                      ; $0c !!12
>8a84	86 9f					.word	SyntaxError                      ; $0d !!13
>8a86	86 9f					.word	SyntaxError                      ; $0e !!14
>8a88	86 9f					.word	SyntaxError                      ; $0f !!15
>8a8a	86 9f					.word	SyntaxError                      ; $10 @
>8a8c	86 9f					.word	SyntaxError                      ; $11 !!17
>8a8e	86 9f					.word	SyntaxError                      ; $12 !!18
>8a90	86 9f					.word	SyntaxError                      ; $13 [
>8a92	aa 8e					.word	IntegerDivide                    ; $14 \
>8a94	86 9f					.word	SyntaxError                      ; $15 ]
>8a96	b7 91					.word	EorInteger                       ; $16 ^
>8a98	86 9f					.word	SyntaxError                      ; $17 _
>8a9a	86 9f					.word	SyntaxError                      ; $18 `
>8a9c	86 9f					.word	SyntaxError                      ; $19 !!25
>8a9e	86 9f					.word	SyntaxError                      ; $1a !!26
>8aa0	86 9f					.word	SyntaxError                      ; $1b {
>8aa2	71 91					.word	OraInteger                       ; $1c |
>8aa4	86 9f					.word	SyntaxError                      ; $1d }
>8aa6	86 9f					.word	SyntaxError                      ; $1e ~
>8aa8	86 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8aaa	86 9f					.word	SyntaxError                      ; $20
>8aac	fd 91					.word	WordIndirect                     ; $21 !
>8aae	86 9f					.word	SyntaxError                      ; $22 "
>8ab0	86 9f					.word	SyntaxError                      ; $23 #
>8ab2	86 9f					.word	SyntaxError                      ; $24 $
>8ab4	f7 8e					.word	IntegerModulus                   ; $25 %
>8ab6	2b 91					.word	AndInteger                       ; $26 &
>8ab8	86 9f					.word	SyntaxError                      ; $27 '
>8aba	86 9f					.word	SyntaxError                      ; $28 (
>8abc	86 9f					.word	SyntaxError                      ; $29 )
>8abe	6c 8f					.word	MulInteger                       ; $2a *
>8ac0	bd 90					.word	AddInteger                       ; $2b +
>8ac2	86 9f					.word	SyntaxError                      ; $2c ,
>8ac4	00 91					.word	SubInteger                       ; $2d -
>8ac6	86 9f					.word	SyntaxError                      ; $2e .
>8ac8	e8 93					.word	FDivideCommand                   ; $2f /
>8aca	86 9f					.word	SyntaxError                      ; $30 0
>8acc	86 9f					.word	SyntaxError                      ; $31 1
>8ace	86 9f					.word	SyntaxError                      ; $32 2
>8ad0	86 9f					.word	SyntaxError                      ; $33 3
>8ad2	86 9f					.word	SyntaxError                      ; $34 4
>8ad4	86 9f					.word	SyntaxError                      ; $35 5
>8ad6	86 9f					.word	SyntaxError                      ; $36 6
>8ad8	86 9f					.word	SyntaxError                      ; $37 7
>8ada	86 9f					.word	SyntaxError                      ; $38 8
>8adc	86 9f					.word	SyntaxError                      ; $39 9
>8ade	86 9f					.word	SyntaxError                      ; $3a :
>8ae0	86 9f					.word	SyntaxError                      ; $3b ;
>8ae2	bf 8d					.word	BinaryCompareLess                ; $3c <
>8ae4	b5 8d					.word	BinaryCompareEqual               ; $3d =
>8ae6	c9 8d					.word	BinaryCompareGreater             ; $3e >
>8ae8	24 92					.word	ByteIndirect                     ; $3f ?
.8aea					VectorSet0:
>8aea	49 8a					.word	EOLCommand                       ; $80 !0:EOF
>8aec	56 8a					.word	Shift1Command                    ; $81 !1:SH1
>8aee	5e 8a					.word	Shift2Command                    ; $82 !2:SH2
>8af0	58 99					.word	AbsUnary                         ; $83 ABS(
>8af2	68 99					.word	AllocUnary                       ; $84 ALLOC(
>8af4	d8 99					.word	AscUnary                         ; $85 ASC(
>8af6	a3 9b					.word	ChrUnary                         ; $86 CHR$(
>8af8	9e a3					.word	UnaryEvent                       ; $87 EVENT(
>8afa	b1 8d					.word	UnaryFalse                       ; $88 FALSE
>8afc	e5 99					.word	FracUnary                        ; $89 FRAC(
>8afe	69 a6					.word	UnaryHit                         ; $8a HIT(
>8b00	fb 99					.word	IntUnary                         ; $8b INT(
>8b02	62 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b04	b6 a6					.word	UnaryJoyB                        ; $8d JOYB(
>8b06	8f a6					.word	UnaryJoyX                        ; $8e JOYX(
>8b08	92 a6					.word	UnaryJoyY                        ; $8f JOYY(
>8b0a	7d 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b0c	0d 9a					.word	LenUnary                         ; $91 LEN(
>8b0e	2b 9a					.word	Unary_Max                        ; $92 MAX(
>8b10	a7 9c					.word	Unary_Mid                        ; $93 MID$(
>8b12	27 9a					.word	Unary_Min                        ; $94 MIN(
>8b14	82 9a					.word	Unary_Not                        ; $95 NOT(
>8b16	98 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b18	8d 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b1a	b7 9a					.word	Unary_Rnd                        ; $98 RND(
>8b1c	38 9b					.word	SgnUnary                         ; $99 SGN(
>8b1e	b5 9b					.word	SpcUnary                         ; $9a SPC(
>8b20	d0 9b					.word	Unary_Str                        ; $9b STR$(
>8b22	0e a7					.word	UnaryTimer                       ; $9c TIMER(
>8b24	a5 8d					.word	UnaryTrue                        ; $9d TRUE
>8b26	58 9b					.word	ValUnary                         ; $9e VAL(
>8b28	1f 85					.word	ForCommand                       ; $9f FOR
>8b2a	6c 86					.word	IfCommand                        ; $a0 IF
>8b2c	66 8a					.word	Unused1                          ; $a1 PROC
>8b2e	85 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b30	f1 8c					.word	Command_WHILE                    ; $a3 WHILE
>8b32	95 86					.word	EndIf                            ; $a4 ENDIF
>8b34	11 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b36	d9 85					.word	NextCommand                      ; $a6 NEXT
>8b38	66 8a					.word	Unused4                          ; $a7 THEN
>8b3a	8e 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b3c	12 8d					.word	Command_WEND                     ; $a9 WEND
>8b3e	86 9f					.word	SyntaxError                      ; $aa BY
>8b40	bd 83					.word	CallCommand                      ; $ab CALL
>8b42	0b a4					.word	CircleCommand                    ; $ac CIRCLE
>8b44	f7 83					.word	ClearCommand                     ; $ad CLEAR
>8b46	4f 84					.word	ClearScreen                      ; $ae CLS
>8b48	86 9f					.word	SyntaxError                      ; $af COLOR
>8b4a	86 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b4c	57 84					.word	Command_Data                     ; $b1 DATA
>8b4e	5f 84					.word	DimCommand                       ; $b2 DIM
>8b50	66 8a					.word	Unused3                          ; $b3 DOWNTO
>8b52	8e 86					.word	ElseCode                         ; $b4 ELSE
>8b54	86 9f					.word	SyntaxError                      ; $b5 FROM
>8b56	37 a6					.word	GfxCommand                       ; $b6 GFX
>8b58	32 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b5a	50 86					.word	GotoCommand                      ; $b8 GOTO
>8b5c	86 9f					.word	SyntaxError                      ; $b9 HERE
>8b5e	35 a4					.word	ImageCommand                     ; $ba IMAGE
>8b60	96 86					.word	LetCommand                       ; $bb LET
>8b62	8a a4					.word	LineCommand                      ; $bc LINE
>8b64	89 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b66	86 9f					.word	SyntaxError                      ; $be OFF
>8b68	86 9f					.word	SyntaxError                      ; $bf ON
>8b6a	86 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b6c	ca a6					.word	PaletteCommand                   ; $c1 PALETTE
>8b6e	83 a4					.word	PlotCommand                      ; $c2 PLOT
>8b70	5a 88					.word	Command_Print                    ; $c3 PRINT
>8b72	1f 89					.word	Command_Read                     ; $c4 READ
>8b74	07 a4					.word	RectangleCommand                 ; $c5 RECT
>8b76	78 89					.word	RemCommand                       ; $c6 REM
>8b78	42 86					.word	Command_RETURN                   ; $c7 RETURN
>8b7a	86 9f					.word	SyntaxError                      ; $c8 SOLID
>8b7c	16 a4					.word	SpriteCommand                    ; $c9 SPRITE
>8b7e	52 a4					.word	TextCommand                      ; $ca TEXT
>8b80	66 8a					.word	Unused2                          ; $cb TO
.8b82					VectorSet1:
>8b82	86 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b84	86 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b86	86 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b88	8e 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b8a	ad 83					.word	AssertCommand                    ; $84 ASSERT
>8b8c	d7 a5					.word	BitmapCtrl                       ; $85 BITMAP
>8b8e	1c 85					.word	EndCommand                       ; $86 END
>8b90	eb 86					.word	Command_List                     ; $87 LIST
>8b92	50 88					.word	NewCommand                       ; $88 NEW
>8b94	a7 89					.word	Command_Restore                  ; $89 RESTORE
>8b96	d9 89					.word	CommandRUN                       ; $8a RUN
>8b98	1c a6					.word	SpritesCtrl                      ; $8b SPRITES
>8b9a	24 8c					.word	StopCommand                      ; $8c STOP
.8b9c					VectorSet2:
>8b9c	86 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b9e	86 9f					.word	SyntaxError                      ; $81 !1:SH1
>8ba0	86 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba2	45 9e					.word	Assemble_adc                     ; $83 ADC
>8ba4	3d 9e					.word	Assemble_and                     ; $84 AND
>8ba6	59 9e					.word	Assemble_asl                     ; $85 ASL
>8ba8	c3 9e					.word	Assemble_bcc                     ; $86 BCC
>8baa	c7 9e					.word	Assemble_bcs                     ; $87 BCS
>8bac	cf 9e					.word	Assemble_beq                     ; $88 BEQ
>8bae	86 9e					.word	Assemble_bit                     ; $89 BIT
>8bb0	b7 9e					.word	Assemble_bmi                     ; $8a BMI
>8bb2	cb 9e					.word	Assemble_bne                     ; $8b BNE
>8bb4	b3 9e					.word	Assemble_bpl                     ; $8c BPL
>8bb6	d3 9e					.word	Assemble_bra                     ; $8d BRA
>8bb8	d7 9e					.word	Assemble_brk                     ; $8e BRK
>8bba	bb 9e					.word	Assemble_bvc                     ; $8f BVC
>8bbc	bf 9e					.word	Assemble_bvs                     ; $90 BVS
>8bbe	df 9e					.word	Assemble_clc                     ; $91 CLC
>8bc0	33 9f					.word	Assemble_cld                     ; $92 CLD
>8bc2	f3 9e					.word	Assemble_cli                     ; $93 CLI
>8bc4	23 9f					.word	Assemble_clv                     ; $94 CLV
>8bc6	51 9e					.word	Assemble_cmp                     ; $95 CMP
>8bc8	9a 9e					.word	Assemble_cpx                     ; $96 CPX
>8bca	95 9e					.word	Assemble_cpy                     ; $97 CPY
>8bcc	77 9e					.word	Assemble_dec                     ; $98 DEC
>8bce	2f 9f					.word	Assemble_dex                     ; $99 DEX
>8bd0	0b 9f					.word	Assemble_dey                     ; $9a DEY
>8bd2	41 9e					.word	Assemble_eor                     ; $9b EOR
>8bd4	7c 9e					.word	Assemble_inc                     ; $9c INC
>8bd6	3f 9f					.word	Assemble_inx                     ; $9d INX
>8bd8	2b 9f					.word	Assemble_iny                     ; $9e INY
>8bda	ae 9e					.word	Assemble_jmp                     ; $9f JMP
>8bdc	a9 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bde	4d 9e					.word	Assemble_lda                     ; $a1 LDA
>8be0	72 9e					.word	Assemble_ldx                     ; $a2 LDX
>8be2	90 9e					.word	Assemble_ldy                     ; $a3 LDY
>8be4	63 9e					.word	Assemble_lsr                     ; $a4 LSR
>8be6	43 9f					.word	Assemble_nop                     ; $a5 NOP
>8be8	39 9e					.word	Assemble_ora                     ; $a6 ORA
>8bea	ef 9e					.word	Assemble_pha                     ; $a7 PHA
>8bec	db 9e					.word	Assemble_php                     ; $a8 PHP
>8bee	37 9f					.word	Assemble_phx                     ; $a9 PHX
>8bf0	f7 9e					.word	Assemble_phy                     ; $aa PHY
>8bf2	ff 9e					.word	Assemble_pla                     ; $ab PLA
>8bf4	e3 9e					.word	Assemble_plp                     ; $ac PLP
>8bf6	4b 9f					.word	Assemble_plx                     ; $ad PLX
>8bf8	07 9f					.word	Assemble_ply                     ; $ae PLY
>8bfa	5e 9e					.word	Assemble_rol                     ; $af ROL
>8bfc	68 9e					.word	Assemble_ror                     ; $b0 ROR
>8bfe	eb 9e					.word	Assemble_rti                     ; $b1 RTI
>8c00	fb 9e					.word	Assemble_rts                     ; $b2 RTS
>8c02	55 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c04	e7 9e					.word	Assemble_sec                     ; $b4 SEC
>8c06	47 9f					.word	Assemble_sed                     ; $b5 SED
>8c08	03 9f					.word	Assemble_sei                     ; $b6 SEI
>8c0a	49 9e					.word	Assemble_sta                     ; $b7 STA
>8c0c	3b 9f					.word	Assemble_stp                     ; $b8 STP
>8c0e	6d 9e					.word	Assemble_stx                     ; $b9 STX
>8c10	8b 9e					.word	Assemble_sty                     ; $ba STY
>8c12	81 9e					.word	Assemble_stz                     ; $bb STZ
>8c14	1f 9f					.word	Assemble_tax                     ; $bc TAX
>8c16	1b 9f					.word	Assemble_tay                     ; $bd TAY
>8c18	a4 9e					.word	Assemble_trb                     ; $be TRB
>8c1a	9f 9e					.word	Assemble_tsb                     ; $bf TSB
>8c1c	27 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c1e	0f 9f					.word	Assemble_txa                     ; $c1 TXA
>8c20	17 9f					.word	Assemble_txs                     ; $c2 TXS
>8c22	13 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c24					StopCommand:
.8c24	a9 08		lda #$08		lda	#8
.8c26	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c29					ProcedureScan:
.8c29	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c2b	85 30		sta $30				sta 	codePtr
.8c2d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c2f	85 31		sta $31				sta 	codePtr+1
.8c31					_PSLoop:
.8c31	b2 30		lda ($30)			lda 	(codePtr)
.8c33	f0 42		beq $8c77			beq 	_PSExit
.8c35	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c37	b1 30		lda ($30),y			lda 	(codePtr),y
.8c39	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c3b	d0 2d		bne $8c6a			bne 	_PSNext
.8c3d	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c40	29 c0		and #$c0			and 	#$C0
.8c42	c9 40		cmp #$40			cmp 	#$40
.8c44	d0 32		bne $8c78			bne 	_PSSyntax
.8c46	b1 30		lda ($30),y			lda 	(codePtr),y
.8c48	18		clc				clc
.8c49	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c4b	85 37		sta $37				sta 	zTemp0+1
.8c4d	c8		iny				iny 								; LSB
.8c4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c50	85 36		sta $36				sta 	zTemp0
.8c52	c8		iny				iny 								; character after variable call.
.8c53	98		tya				tya 								; save Y offset at +7
.8c54	a0 07		ldy #$07			ldy 	#7
.8c56	91 36		sta ($36),y			sta 	(zTemp0),y
.8c58	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c5a	a0 02		ldy #$02			ldy 	#2
.8c5c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5e	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c60					_PSCopy:
.8c60	b5 30		lda $30,x			lda 	safePtr,x
.8c62	c8		iny				iny
.8c63	91 36		sta ($36),y			sta 	(zTemp0),y
.8c65	e8		inx				inx
.8c66	e0 04		cpx #$04			cpx 	#4
.8c68	d0 f6		bne $8c60			bne 	_PSCopy
.8c6a					_PSNext:
.8c6a	18		clc				clc
.8c6b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c6d	65 30		adc $30				adc 	codePtr
.8c6f	85 30		sta $30				sta 	codePtr
.8c71	90 02		bcc $8c75			bcc 	_CREExit
.8c73	e6 31		inc $31				inc 	codePtr+1
.8c75					_CREExit:
.8c75	80 ba		bra $8c31			bra 	_PSLoop
.8c77					_PSExit:
.8c77	60		rts				rts
.8c78					_PSSyntax:
.8c78	4c 86 9f	jmp $9f86			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c7b					ScanForward:
.8c7b	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c7d	86 37		stx $37				stx 	zTemp0+1
.8c7f	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c81					_ScanLoop:
.8c81	b1 30		lda ($30),y			lda 	(codePtr),y
.8c83	c8		iny				iny
.8c84	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c86	d0 0e		bne $8c96			bne 	_ScanGoNext
.8c88	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c8a	f0 04		beq $8c90			beq 	_ScanMatch
.8c8c	c5 37		cmp $37				cmp 	zTemp0+1
.8c8e	d0 06		bne $8c96			bne 	_ScanGoNext
.8c90					_ScanMatch:
.8c90	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c92	d0 01		bne $8c95			bne 	_ScanNotEndEOL
.8c94	88		dey				dey
.8c95					_ScanNotEndEOL:
.8c95	60		rts				rts
.8c96					_ScanGoNext:
.8c96	20 9b 8c	jsr $8c9b			jsr  	ScanForwardOne
.8c99	80 e6		bra $8c81			bra 	_ScanLoop
.8c9b					ScanForwardOne:
.8c9b	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c9d	90 3e		bcc $8cdd			bcc 	_SFWExit
.8c9f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8ca1	90 18		bcc $8cbb			bcc 	_ScanSkipOne
.8ca3	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ca5	b0 2f		bcs $8cd6			bcs 	_ScanSkipData
.8ca7	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8ca9	90 32		bcc $8cdd			bcc 	_SFWExit 					; if not, ordinary keywords.
.8cab	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8cad	b0 2e		bcs $8cdd			bcs 	_SFWExit
.8caf	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cb1	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cb3	b0 28		bcs $8cdd			bcs 	_SFWExit
.8cb5	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cb7	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cb9	80 22		bra $8cdd			bra 	_SFWExit
.8cbb					_ScanSkipOne:
.8cbb	c8		iny				iny 								; consume the extra one.
.8cbc	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cbe	d0 1d		bne $8cdd			bne 	_SFWExit
.8cc0	18		clc				clc
.8cc1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cc3	65 30		adc $30				adc 	codePtr
.8cc5	85 30		sta $30				sta 	codePtr
.8cc7	90 02		bcc $8ccb			bcc 	_CREExit
.8cc9	e6 31		inc $31				inc 	codePtr+1
.8ccb					_CREExit:
.8ccb	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ccd	b2 30		lda ($30)			lda 	(codePtr)
.8ccf	d0 0c		bne $8cdd			bne 	_SFWExit 					; if not zero, more to scan
.8cd1	a9 13		lda #$13		lda	#19
.8cd3	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8cd6					_ScanSkipData:
.8cd6	88		dey				dey 								; point at data token
.8cd7	c8		iny				iny
.8cd8	98		tya				tya
.8cd9	38		sec				sec
.8cda	71 30		adc ($30),y			adc 	(codePtr),y
.8cdc	a8		tay				tay
.8cdd					_SFWExit:
.8cdd	60		rts				rts
.8cde					ScanGetCurrentLineStep:
.8cde	64 38		stz $38				stz 	zTemp1
.8ce0	a0 03		ldy #$03			ldy 	#3
.8ce2					_SGCLSLoop:
.8ce2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce4	c8		iny				iny
.8ce5	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ce7	f0 05		beq $8cee			beq 	_SGCLSExit
.8ce9	20 9b 8c	jsr $8c9b			jsr 	ScanForwardOne
.8cec	80 f4		bra $8ce2			bra 	_SGCLSLoop
.8cee					_SGCLSExit:
.8cee	a5 38		lda $38				lda 	zTemp1
.8cf0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cf1					Command_WHILE:
.8cf1	5a		phy				phy 								; save position of the test
.8cf2	a2 00		ldx #$00			ldx 	#0
.8cf4	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; work out the number
.8cf7	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; check if zero
.8cfa	f0 0e		beq $8d0a			beq 	_WHExitLoop 				; if so exit the loop
.8cfc	98		tya				tya 								; position *after* test.
.8cfd	7a		ply				ply 								; restore position before test, at WHILE
.8cfe	88		dey				dey
.8cff	48		pha				pha 								; push after test on the stack
.8d00	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d02	20 5e a2	jsr $a25e			jsr 	StackOpen
.8d05	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d08	7a		ply				ply 								; restore the position *after* the test
.8d09	60		rts				rts
.8d0a					_WHExitLoop:
.8d0a	68		pla				pla 								; throw post loop position
.8d0b	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d0d	aa		tax				tax
.8d0e	20 7b 8c	jsr $8c7b			jsr 	ScanForward
.8d11	60		rts				rts
.8d12					Command_WEND:
.8d12	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d14	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d16	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.8d19	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; loop back
.8d1c	20 7c a2	jsr $a27c			jsr 	StackClose		 			; erase the frame
.8d1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d20					CheckRightBracket:
.8d20	b1 30		lda ($30),y			lda 	(codePtr),y
.8d22	c8		iny				iny
.8d23	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d25	d0 0f		bne $8d36			bne 	CNAFail
.8d27	60		rts				rts
.8d28					CheckComma:
.8d28	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2a	c8		iny				iny
.8d2b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d2d	d0 07		bne $8d36			bne 	CNAFail
.8d2f	60		rts				rts
.8d30					CheckNextA:
.8d30	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d32	d0 02		bne $8d36			bne 	CNAFail
.8d34	c8		iny				iny 								; skip character
.8d35	60		rts				rts 								; and exit
.8d36					CNAFail:
.8d36	4c 86 9f	jmp $9f86			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d39					ErrorHandler:
.8d39	a8		tay				tay 								; find the error text
.8d3a	f0 49		beq $8d85			beq 	_EHEnd
.8d3c	a2 00		ldx #$00			ldx 	#0
.8d3e	a9 9f		lda #$9f			lda 	#((ErrorText) & $FF)
.8d40	85 36		sta $36				sta 	0+zTemp0
.8d42	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d44	85 37		sta $37				sta 	1+zTemp0
.8d46					_EHFind:
.8d46	88		dey				dey 								; found the error text ?
.8d47	f0 0e		beq $8d57			beq 	_EHFound
.8d49					_EHFindZero:
.8d49	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d4b	e6 36		inc $36				inc 	zTemp0
.8d4d	d0 02		bne $8d51			bne 	_EHFNoCarry
.8d4f	e6 37		inc $37				inc 	zTemp0+1
.8d51					_EHFNoCarry:
.8d51	c9 00		cmp #$00			cmp 	#0
.8d53	d0 f4		bne $8d49			bne 	_EHFindZero
.8d55	80 ef		bra $8d46			bra 	_EHFind
.8d57					_EHFound:
.8d57	a5 36		lda $36				lda 	zTemp0 						; print message
.8d59	a6 37		ldx $37				ldx 	zTemp0+1
.8d5b	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.8d5e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d60	b1 30		lda ($30),y			lda 	(codePtr),y
.8d62	d0 05		bne $8d69			bne 	_EHAtMsg
.8d64	c8		iny				iny
.8d65	b1 30		lda ($30),y			lda 	(codePtr),y
.8d67	f0 17		beq $8d80			beq 	_EHCREnd
.8d69					_EHAtMsg:
.8d69	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d6b	a9 88		lda #$88			lda 	#_AtMsg & $FF
.8d6d	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.8d70	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d72	b1 30		lda ($30),y			lda 	(codePtr),y
.8d74	48		pha				pha
.8d75	c8		iny				iny
.8d76	b1 30		lda ($30),y			lda 	(codePtr),y
.8d78	aa		tax				tax
.8d79	68		pla				pla
.8d7a	20 4b 92	jsr $924b			jsr 	ConvertInt16 				; convert XA to string
.8d7d	20 92 8d	jsr $8d92			jsr 	PrintStringXA 				; and print it.
.8d80					_EHCREnd:
.8d80	a9 0d		lda #$0d			lda 	#13 						; new line
.8d82	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8d85					_EHEnd:
.8d85	4c 5e 83	jmp $835e			jmp 	WarmStart
>8d88	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d90	20 00
.8d92					PrintStringXA:
.8d92	5a		phy				phy
.8d93	86 37		stx $37				stx 	zTemp0+1
.8d95	85 36		sta $36				sta 	zTemp0
.8d97	a0 00		ldy #$00			ldy 	#0
.8d99					_PSXALoop:
.8d99	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d9b	f0 06		beq $8da3			beq 	_PSXAExit
.8d9d	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8da0	c8		iny				iny
.8da1	80 f6		bra $8d99			bra 	_PSXALoop
.8da3					_PSXAExit:
.8da3	7a		ply				ply
.8da4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8da5					UnaryTrue:
.8da5	fa		plx				plx
.8da6					ReturnTrue:
.8da6	a9 01		lda #$01			lda 	#1  						; set to 1
.8da8	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.8dab	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8db0	60		rts				rts
.8db1					UnaryFalse:
.8db1	fa		plx				plx
.8db2					ReturnFalse:
.8db2	4c fc 9d	jmp $9dfc			jmp 	NSMSetZero 					; set it all to zero
.8db5					BinaryCompareEqual:
.8db5	fa		plx				plx
.8db6	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8db9	c9 00		cmp #$00			cmp 	#0
.8dbb	f0 e9		beq $8da6			beq 	ReturnTrue
.8dbd	80 f3		bra $8db2			bra 	ReturnFalse
.8dbf					BinaryCompareLess:
.8dbf	fa		plx				plx
.8dc0	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8dc3	c9 ff		cmp #$ff			cmp 	#$FF
.8dc5	f0 df		beq $8da6			beq 	ReturnTrue
.8dc7	80 e9		bra $8db2			bra 	ReturnFalse
.8dc9					BinaryCompareGreater:
.8dc9	fa		plx				plx
.8dca	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8dcd	c9 01		cmp #$01			cmp 	#1
.8dcf	f0 d5		beq $8da6			beq 	ReturnTrue
.8dd1	80 df		bra $8db2			bra 	ReturnFalse
.8dd3					BinaryCompareNotEqual:
.8dd3	fa		plx				plx
.8dd4	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8dd7	c9 00		cmp #$00			cmp 	#0
.8dd9	d0 cb		bne $8da6			bne 	ReturnTrue
.8ddb	80 d5		bra $8db2			bra 	ReturnFalse
.8ddd					BinaryCompareLessEqual:
.8ddd	fa		plx				plx
.8dde	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8de1	c9 01		cmp #$01			cmp 	#1
.8de3	d0 c1		bne $8da6			bne 	ReturnTrue
.8de5	80 cb		bra $8db2			bra 	ReturnFalse
.8de7					BinaryCompareGreaterEqual:
.8de7	fa		plx				plx
.8de8	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8deb	c9 ff		cmp #$ff			cmp 	#$FF
.8ded	d0 b7		bne $8da6			bne 	ReturnTrue
.8def	80 c1		bra $8db2			bra 	ReturnFalse
.8df1					CompareBaseCode:
.8df1	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; make both values if references.
.8df4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8df7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8dfa	29 10		and #$10			and 	#NSTString
.8dfc	d0 40		bne $8e3e			bne 	_CBCString
.8dfe	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e01	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e04	d0 3b		bne $8e41			bne 	_CBCFloat
.8e06	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e09	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e0c	29 08		and #$08			and 	#NSTFloat
.8e0e	d0 31		bne $8e41			bne 	_CBCFloat
.8e10	20 44 8e	jsr $8e44			jsr 	CompareFixMinusZero
.8e13	e8		inx				inx
.8e14	20 44 8e	jsr $8e44			jsr 	CompareFixMinusZero
.8e17	ca		dex				dex
.8e18	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e1b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e1e	10 0b		bpl $8e2b			bpl 	_CDCSameSign
.8e20	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e23	30 16		bmi $8e3b			bmi 	_CBCLess 					; return $FF
.8e25					_CBCGreater:
.8e25	a9 01		lda #$01			lda 	#1
.8e27	60		rts				rts
.8e28					_CBCEqual:
.8e28	a9 00		lda #$00			lda 	#0
.8e2a	60		rts				rts
.8e2b					_CDCSameSign:
.8e2b	20 97 90	jsr $9097			jsr 	SubTopTwoStack 				; unsigned subtract
.8e2e	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; or the mantissa together
.8e31	f0 f5		beq $8e28			beq 	_CBCEqual 					; -0 == 0
.8e33	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e36	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e39	10 ea		bpl $8e25			bpl 	_CBCGreater
.8e3b					_CBCLess:
.8e3b	a9 ff		lda #$ff			lda 	#$FF
.8e3d	60		rts				rts
.8e3e					_CBCString:
.8e3e	4c ed 8f	jmp $8fed			jmp 	CompareStrings
.8e41					_CBCFloat:
.8e41	4c ce 93	jmp $93ce			jmp 	CompareFloat
.8e44					CompareFixMinusZero:
.8e44	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero
.8e47	d0 03		bne $8e4c			bne 	_CFXMZNotZero
.8e49	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e4c					_CFXMZNotZero:
.8e4c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e4d					StringConcat:
.8e4d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e50	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e53	29 18		and #$18			and 	#NSBTypeMask
.8e55	c9 10		cmp #$10			cmp 	#NSTString
.8e57	d0 4e		bne $8ea7			bne		_SCType
.8e59	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e5b	e8		inx				inx
.8e5c	20 7a 8e	jsr $8e7a			jsr 	_SCSetupZ0 					; setup for second
.8e5f	20 85 8e	jsr $8e85			jsr 	_SCLengthZ0 				; length for second
.8e62	ca		dex				dex
.8e63	20 7a 8e	jsr $8e7a			jsr 	_SCSetupZ0 					; setup for first
.8e66	20 85 8e	jsr $8e85			jsr 	_SCLengthZ0 				; length for first
.8e69	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e6b	20 51 a3	jsr $a351			jsr 	StringTempAllocate
.8e6e	20 98 8e	jsr $8e98			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e71	e8		inx				inx
.8e72	20 7a 8e	jsr $8e7a			jsr 	_SCSetupZ0 					; copy second out
.8e75	20 98 8e	jsr $8e98			jsr 	_SCCopy
.8e78	ca		dex				dex
.8e79	60		rts				rts
.8e7a					_SCSetupZ0:
.8e7a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e7d	85 36		sta $36				sta 	zTemp0
.8e7f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e82	85 37		sta $37				sta 	zTemp0+1
.8e84	60		rts				rts
.8e85					_SCLengthZ0:
.8e85	5a		phy				phy
.8e86	a0 00		ldy #$00			ldy 	#0
.8e88					_SCLenLoop:
.8e88	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e8a	f0 0a		beq $8e96			beq 	_SCLExit
.8e8c	c8		iny				iny
.8e8d	e6 38		inc $38				inc 	zTemp1
.8e8f	10 f7		bpl $8e88			bpl		_SCLenLoop
.8e91	a9 09		lda #$09		lda	#9
.8e93	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8e96					_SCLExit:
.8e96	7a		ply				ply
.8e97	60		rts				rts
.8e98					_SCCopy:
.8e98	5a		phy				phy
.8e99	a0 00		ldy #$00			ldy 	#0
.8e9b					_SCCopyLoop:
.8e9b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9d	f0 06		beq $8ea5			beq 	_SCCExit
.8e9f	20 8f a3	jsr $a38f			jsr 	StringTempWrite
.8ea2	c8		iny				iny
.8ea3	80 f6		bra $8e9b			bra 	_SCCopyLoop
.8ea5					_SCCExit:
.8ea5	7a		ply				ply
.8ea6	60		rts				rts
.8ea7					_SCType:
.8ea7	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8eaa					IntegerDivide:
.8eaa	fa		plx				plx
.8eab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eae	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8eb1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb2	0a		asl a				asl 	a
.8eb3	10 05		bpl $8eba			bpl 	_NotRef
.8eb5	48		pha				pha
.8eb6	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb9	68		pla				pla
.8eba					_NotRef:
.8eba	0a		asl a				asl 	a
.8ebb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ebd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ec0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ec3	f0 03		beq $8ec8			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec5	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.8ec8					_IntegerCode:
.8ec8	20 ea 8e	jsr $8eea			jsr 	CheckDivideZero 			; do div zero check
.8ecb	20 22 8f	jsr $8f22			jsr 	Int32Divide 				; do the division
.8ece	20 df 8f	jsr $8fdf			jsr 	CalculateSign 				; calculate result sign
.8ed1					NSMCopyPlusTwoToZero:
.8ed1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ed4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ed7	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8eda	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8edd	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ee0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ee3	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8ee6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8ee9	60		rts				rts
.8eea					CheckDivideZero:
.8eea	e8		inx				inx
.8eeb	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero
.8eee	f0 02		beq $8ef2			beq 	_CDVError
.8ef0	ca		dex				dex
.8ef1	60		rts				rts
.8ef2					_CDVError:
.8ef2	a9 03		lda #$03		lda	#3
.8ef4	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8ef7					IntegerModulus:
.8ef7	fa		plx				plx
.8ef8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8efb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8efe	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eff	0a		asl a				asl 	a
.8f00	10 05		bpl $8f07			bpl 	_NotRef
.8f02	48		pha				pha
.8f03	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f06	68		pla				pla
.8f07					_NotRef:
.8f07	0a		asl a				asl 	a
.8f08	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f0a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f0d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f10	f0 03		beq $8f15			beq 	_IntegerCode 				; if clear, then we have two integers
.8f12	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.8f15					_IntegerCode:
.8f15					IntegerModulusNoCheck:
.8f15	20 ea 8e	jsr $8eea			jsr 	CheckDivideZero 			; do div zero check
.8f18	20 22 8f	jsr $8f22			jsr 	Int32Divide 				; do the division
.8f1b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f1e	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f21	60		rts				rts
.8f22					Int32Divide:
.8f22	48		pha				pha 								; save AXY
.8f23	5a		phy				phy
.8f24	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f27	20 f8 9d	jsr $9df8			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f2a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f2c					_I32DivideLoop:
.8f2c	e8		inx				inx
.8f2d	e8		inx				inx
.8f2e	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f31	ca		dex				dex
.8f32	ca		dex				dex
.8f33	20 12 9e	jsr $9e12			jsr 	NSMRotateLeft
.8f36	20 62 8f	jsr $8f62			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f39	90 03		bcc $8f3e			bcc 	_I32DivideNoCarryIn
.8f3b	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f3e					_I32DivideNoCarryIn:
.8f3e	88		dey				dey 								; loop round till division completed.
.8f3f	d0 eb		bne $8f2c			bne 	_I32DivideLoop
.8f41	7a		ply				ply 								; restore AXY and exit
.8f42	68		pla				pla
.8f43	60		rts				rts
.8f44					Int32ShiftDivide:
.8f44	48		pha				pha 								; save AY
.8f45	5a		phy				phy
.8f46	e8		inx				inx 								; clear S[X+2]
.8f47	e8		inx				inx
.8f48	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.8f4b	ca		dex				dex
.8f4c	ca		dex				dex
.8f4d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f4f					_I32SDLoop:
.8f4f	20 62 8f	jsr $8f62			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f52	e8		inx				inx
.8f53	e8		inx				inx
.8f54	20 12 9e	jsr $9e12			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f57	ca		dex				dex
.8f58	ca		dex				dex
.8f59	20 12 9e	jsr $9e12			jsr 	NSMRotateLeft
.8f5c	88		dey				dey 	 							; do 31 times
.8f5d	d0 f0		bne $8f4f			bne 	_I32SDLoop
.8f5f	7a		ply				ply 								; restore AY and exit
.8f60	68		pla				pla
.8f61	60		rts				rts
.8f62					DivideCheckSubtract:
.8f62	20 97 90	jsr $9097			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f65	b0 04		bcs $8f6b			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f67	20 71 90	jsr $9071			jsr 	AddTopTwoStack 				; add it back in
.8f6a	18		clc				clc 								; and return False
.8f6b					_DCSExit:
.8f6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f6c					MulInteger:
.8f6c	fa		plx				plx
.8f6d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f70	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f73	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f74	0a		asl a				asl 	a
.8f75	10 05		bpl $8f7c			bpl 	_NotRef
.8f77	48		pha				pha
.8f78	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f7b	68		pla				pla
.8f7c					_NotRef:
.8f7c	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f7d	30 0b		bmi $8f8a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f7f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f82	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f85	f0 06		beq $8f8d			beq 	_IntegerCode 				; if clear, then we have two integers
.8f87	4c a5 94	jmp $94a5			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f8a					_StringData:
.8f8a	4c 9a 9f	jmp $9f9a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f8d					_IntegerCode:
.8f8d	20 9a 8f	jsr $8f9a			jsr 	MultiplyShort
.8f90	c9 00		cmp #$00			cmp 	#0
.8f92	f0 05		beq $8f99			beq 	_MIExit
.8f94	a9 04		lda #$04		lda	#4
.8f96	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8f99					_MIExit:
.8f99	60		rts				rts
.8f9a					MultiplyShort:
.8f9a	5a		phy				phy 								; save Y
.8f9b	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f9e	20 f8 9d	jsr $9df8			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fa1	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fa3					_I32MLoop:
.8fa3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fa6	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fa9	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fac	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8faf	f0 28		beq $8fd9			beq 	_I32MExit 					; exit if zero
.8fb1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fb4	29 01		and #$01			and 	#1
.8fb6	f0 0e		beq $8fc6			beq 	_I32MNoAdd
.8fb8	20 71 90	jsr $9071			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fbb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fbe	10 06		bpl $8fc6			bpl 	_I32MNoAdd
.8fc0					_I32ShiftRight:
.8fc0	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight 				; shift S[X] right
.8fc3	c8		iny				iny 								; increment shift count
.8fc4	80 0a		bra $8fd0			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fc6					_I32MNoAdd:
.8fc6	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fc9	70 f5		bvs $8fc0			bvs 	_I32ShiftRight 				; instead.
.8fcb	e8		inx				inx
.8fcc	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fcf	ca		dex				dex
.8fd0					_I32MShiftUpper:
.8fd0	e8		inx				inx 								; shift S[X+2] right
.8fd1	e8		inx				inx
.8fd2	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight
.8fd5	ca		dex				dex
.8fd6	ca		dex				dex
.8fd7	80 ca		bra $8fa3			bra 	_I32MLoop 					; try again.
.8fd9					_I32MExit:
.8fd9	20 df 8f	jsr $8fdf			jsr 	CalculateSign
.8fdc	98		tya				tya 								; shift in A
.8fdd	7a		ply				ply 								; restore Y and exit
.8fde	60		rts				rts
.8fdf					CalculateSign:
.8fdf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fe2	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fe5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fe8	0a		asl a				asl 	a 							; shift bit 7 into carry
.8fe9	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8fec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8fed					CompareStrings:
.8fed	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8ff0	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8ff3	29 10		and #$10			and 	#NSBIsString
.8ff5	f0 2c		beq $9023			beq 	_CSTypeError
.8ff7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8ffa	85 36		sta $36				sta 	zTemp0
.8ffc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8fff	85 37		sta $37				sta 	zTemp0+1
.9001	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9004	85 38		sta $38				sta 	zTemp1
.9006	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9009	85 39		sta $39				sta 	zTemp1+1
.900b	5a		phy				phy 								; save Y so we can access strings
.900c	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.900e					_CSLoop:
.900e	c8		iny				iny
.900f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9011	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9013	d0 06		bne $901b			bne 	_CSDifferent
.9015	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9017	d0 f5		bne $900e			bne 	_CSLoop 					; still comparing
.9019					_CSExit:
.9019	7a		ply				ply 								; reached end, return zero in A from EOS
.901a	60		rts				rts
.901b					_CSDifferent:
.901b	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.901d	90 fa		bcc $9019			bcc		_CSExit
.901f	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9021	80 f6		bra $9019			bra 	_CSExit
.9023					_CSTypeError:
.9023	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9026					ShiftLeft:
.9026	38		sec				sec
.9027	80 01		bra $902a			bra 	ShiftMain
.9029					ShiftRight:
.9029	18		clc				clc
.902a					ShiftMain:
.902a	fa		plx				plx 								; restore X
.902b	08		php				php 								; save direction
.902c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.902f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9032	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9033	0a		asl a				asl 	a
.9034	10 05		bpl $903b			bpl 	_NotRef
.9036	48		pha				pha
.9037	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.903a	68		pla				pla
.903b					_NotRef:
.903b	0a		asl a				asl 	a
.903c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.903e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9041	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9044	f0 03		beq $9049			beq 	_IntegerCode 				; if clear, then we have two integers
.9046	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.9049					_IntegerCode:
.9049	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.904c	29 e0		and #$e0			and 	#$E0
.904e	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9051	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9054	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9057	d0 13		bne $906c			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9059					_SMLoop:
.9059	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.905c	30 11		bmi $906f			bmi 	_SMExit 					; exit if done.
.905e	28		plp				plp 								; restore direcition setting
.905f	08		php				php
.9060	90 05		bcc $9067			bcc 	_SMRight
.9062	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; shift left if CS
.9065	80 f2		bra $9059			bra 	_SMLoop
.9067					_SMRight:
.9067	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight 				; shift right if CC
.906a	80 ed		bra $9059			bra 	_SMLoop
.906c					_SMExit0:
.906c	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; return zero.
.906f					_SMExit:
.906f	28		plp				plp 								; throw direction
.9070	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9071					AddTopTwoStack:
.9071	18		clc				clc
.9072	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9075	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9078	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.907b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.907e	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9081	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9084	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9087	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.908a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.908d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9090	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9093	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9096	60		rts				rts
.9097					SubTopTwoStack:
.9097	38		sec				sec
.9098	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.909b	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.909e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90a1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90a4	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90a7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90aa	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90ad	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90b0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90b3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90b6	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90b9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90bc	60		rts				rts
.90bd					AddInteger:
.90bd	fa		plx				plx
.90be	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90c1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90c4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c5	0a		asl a				asl 	a
.90c6	10 05		bpl $90cd			bpl 	_NotRef
.90c8	48		pha				pha
.90c9	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90cc	68		pla				pla
.90cd					_NotRef:
.90cd	0a		asl a				asl 	a 							; put MSB of type into A:7
.90ce	30 0b		bmi $90db			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90d0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90d3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90d6	f0 06		beq $90de			beq 	_IntegerCode 				; if clear, then we have two integers
.90d8	4c 25 93	jmp $9325			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90db					_StringData:
.90db	4c 4d 8e	jmp $8e4d			jmp 	StringConcat							; at least one string - don't know both are strings.
.90de					_IntegerCode:
.90de					AddCode:
.90de	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90e1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90e4	10 8b		bpl $9071			bpl 	AddTopTwoStack
.90e6	20 97 90	jsr $9097			jsr 	SubTopTwoStack 				; do a physical subtraction
.90e9	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90ec	10 09		bpl $90f7			bpl 	_AddExit
.90ee	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90f1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90f4	20 b1 9d	jsr $9db1			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.90f7					_AddExit:
.90f7	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; check for -0
.90fa	d0 03		bne $90ff			bne 	_AddNonZero
.90fc	9e 00 04	stz $0400,x			stz 	NSStatus,x
.90ff					_AddNonZero:
.90ff	60		rts				rts
.9100					SubInteger:
.9100	fa		plx				plx
.9101	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9104	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9107	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9108	0a		asl a				asl 	a
.9109	10 05		bpl $9110			bpl 	_NotRef
.910b	48		pha				pha
.910c	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.910f	68		pla				pla
.9110					_NotRef:
.9110	0a		asl a				asl 	a 							; put MSB of type into A:7
.9111	30 0b		bmi $911e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9113	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9116	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9119	f0 06		beq $9121			beq 	_IntegerCode 				; if clear, then we have two integers
.911b	4c 2a 93	jmp $932a			jmp 	FloatingPointSub 							; otherwise at least one float.
.911e					_StringData:
.911e	4c 9a 9f	jmp $9f9a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9121					_IntegerCode:
.9121	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9124	49 80		eor #$80			eor 	#$80
.9126	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9129	80 b3		bra $90de			bra 	AddCode 					; and do the same code as add.
.912b					AndInteger:
.912b	fa		plx				plx
.912c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.912f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9132	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9133	0a		asl a				asl 	a
.9134	10 05		bpl $913b			bpl 	_NotRef
.9136	48		pha				pha
.9137	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.913a	68		pla				pla
.913b					_NotRef:
.913b	0a		asl a				asl 	a
.913c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.913e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9141	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9144	f0 03		beq $9149			beq 	_IntegerCode 				; if clear, then we have two integers
.9146	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.9149					_IntegerCode:
.9149	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.914c	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.914f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9152	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9155	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9158	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.915b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.915e	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9161	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9164	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9167	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.916a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.916d	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9170	60		rts				rts
.9171					OraInteger:
.9171	fa		plx				plx
.9172	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9175	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9178	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9179	0a		asl a				asl 	a
.917a	10 05		bpl $9181			bpl 	_NotRef
.917c	48		pha				pha
.917d	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9180	68		pla				pla
.9181					_NotRef:
.9181	0a		asl a				asl 	a
.9182	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9184	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9187	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.918a	f0 03		beq $918f			beq 	_IntegerCode 				; if clear, then we have two integers
.918c	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.918f					_IntegerCode:
.918f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9192	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9195	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9198	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.919b	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.919e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91a1	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91a4	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91a7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91aa	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91ad	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91b0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91b3	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91b6	60		rts				rts
.91b7					EorInteger:
.91b7	fa		plx				plx
.91b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91bb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91be	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91bf	0a		asl a				asl 	a
.91c0	10 05		bpl $91c7			bpl 	_NotRef
.91c2	48		pha				pha
.91c3	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91c6	68		pla				pla
.91c7					_NotRef:
.91c7	0a		asl a				asl 	a
.91c8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91ca	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91cd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91d0	f0 03		beq $91d5			beq 	_IntegerCode 				; if clear, then we have two integers
.91d2	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.91d5					_IntegerCode:
.91d5	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91d8	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91db	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91de	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91e1	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91e4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91e7	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91ea	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91ed	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91f0	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91f3	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.91f6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91f9	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91fc	60		rts				rts
.91fd					WordIndirect:
.91fd	fa		plx				plx
.91fe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9201	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9204	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9205	0a		asl a				asl 	a
.9206	10 05		bpl $920d			bpl 	_NotRef
.9208	48		pha				pha
.9209	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.920c	68		pla				pla
.920d					_NotRef:
.920d	0a		asl a				asl 	a
.920e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9210	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9213	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9216	f0 03		beq $921b			beq 	_IntegerCode 				; if clear, then we have two integers
.9218	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.921b					_IntegerCode:
.921b	20 de 90	jsr $90de			jsr 	AddCode 					; add the two values
.921e	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9220	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9223	60		rts				rts
.9224					ByteIndirect:
.9224	fa		plx				plx
.9225	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9228	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.922b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.922c	0a		asl a				asl 	a
.922d	10 05		bpl $9234			bpl 	_NotRef
.922f	48		pha				pha
.9230	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9233	68		pla				pla
.9234					_NotRef:
.9234	0a		asl a				asl 	a
.9235	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9237	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.923a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.923d	f0 03		beq $9242			beq 	_IntegerCode 				; if clear, then we have two integers
.923f	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.9242					_IntegerCode:
.9242	20 de 90	jsr $90de			jsr 	AddCode 					; add the two values
.9245	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9247	9d 00 04	sta $0400,x			sta 	NSStatus,x
.924a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.924b					ConvertInt16:
.924b	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.924e	8e 10 04	stx $0410			stx 	NSMantissa1
.9251	9c 18 04	stz $0418			stz 	NSMantissa2
.9254	9c 20 04	stz $0420			stz 	NSMantissa3
.9257	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.925a	a2 00		ldx #$00			ldx 	#0 							; stack level
.925c	a9 0a		lda #$0a			lda 	#10 						; base
.925e	80 00		bra $9260			bra 	ConvertInt32
.9260					ConvertInt32:
.9260	5a		phy				phy
.9261	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9263	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9266	10 08		bpl $9270			bpl 	_CI32NotNeg
.9268	48		pha				pha
.9269	a9 2d		lda #$2d			lda 	#'-'
.926b	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.926e	c8		iny				iny
.926f	68		pla				pla
.9270					_CI32NotNeg:
.9270	20 7e 92	jsr $927e			jsr 	_CI32DivideConvert 			; recursive conversion
.9273	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9275	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.9278	7a		ply				ply
.9279	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.927b	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.927d	60		rts				rts
.927e					_CI32DivideConvert:
.927e	e8		inx				inx 								; write to next slot up
.927f	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9282	ca		dex				dex
.9283	20 22 8f	jsr $8f22			jsr 	Int32Divide 				; divide
.9286	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.9289	48		pha				pha
.928a	20 d1 8e	jsr $8ed1			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.928d	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; is it zero ?
.9290	f0 06		beq $9298			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9292	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9295	20 7e 92	jsr $927e			jsr 	_CI32DivideConvert 			; and recusrively call.
.9298					_CI32NoRecurse:
.9298	68		pla				pla 								; remainder
.9299	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.929b	90 02		bcc $929f			bcc 	_CI32NotHex
.929d	69 26		adc #$26			adc 	#6+32
.929f					_CI32NotHex:
.929f	69 30		adc #$30			adc 	#48
.92a1	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.92a4	c8		iny				iny
.92a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92a6					PrecedenceLevel:
>92a6	04					.byte	 4	; $00 <<
>92a7	02					.byte	 2	; $01 <=
>92a8	02					.byte	 2	; $02 <>
>92a9	00					.byte	 0	; $03 !!3
>92aa	00					.byte	 0	; $04 ><
>92ab	02					.byte	 2	; $05 >=
>92ac	04					.byte	 4	; $06 >>
>92ad	00					.byte	 0	; $07 !!7
>92ae	00					.byte	 0	; $08 !!8
>92af	00					.byte	 0	; $09 !!9
>92b0	00					.byte	 0	; $0a !!10
>92b1	00					.byte	 0	; $0b !!11
>92b2	00					.byte	 0	; $0c !!12
>92b3	00					.byte	 0	; $0d !!13
>92b4	00					.byte	 0	; $0e !!14
>92b5	00					.byte	 0	; $0f !!15
>92b6	00					.byte	 0	; $10 @
>92b7	00					.byte	 0	; $11 !!17
>92b8	00					.byte	 0	; $12 !!18
>92b9	00					.byte	 0	; $13 [
>92ba	04					.byte	 4	; $14 \
>92bb	00					.byte	 0	; $15 ]
>92bc	01					.byte	 1	; $16 ^
>92bd	00					.byte	 0	; $17 _
>92be	00					.byte	 0	; $18 `
>92bf	00					.byte	 0	; $19 !!25
>92c0	00					.byte	 0	; $1a !!26
>92c1	00					.byte	 0	; $1b {
>92c2	01					.byte	 1	; $1c |
>92c3	00					.byte	 0	; $1d }
>92c4	00					.byte	 0	; $1e ~
>92c5	00					.byte	 0	; $1f [7m<7F>[m
>92c6	00					.byte	 0	; $20
>92c7	05					.byte	 5	; $21 !
>92c8	00					.byte	 0	; $22 "
>92c9	00					.byte	 0	; $23 #
>92ca	05					.byte	 5	; $24 $
>92cb	04					.byte	 4	; $25 %
>92cc	01					.byte	 1	; $26 &
>92cd	00					.byte	 0	; $27 '
>92ce	00					.byte	 0	; $28 (
>92cf	00					.byte	 0	; $29 )
>92d0	04					.byte	 4	; $2a *
>92d1	03					.byte	 3	; $2b +
>92d2	00					.byte	 0	; $2c ,
>92d3	03					.byte	 3	; $2d -
>92d4	00					.byte	 0	; $2e .
>92d5	04					.byte	 4	; $2f /
>92d6	00					.byte	 0	; $30 0
>92d7	00					.byte	 0	; $31 1
>92d8	00					.byte	 0	; $32 2
>92d9	00					.byte	 0	; $33 3
>92da	00					.byte	 0	; $34 4
>92db	00					.byte	 0	; $35 5
>92dc	00					.byte	 0	; $36 6
>92dd	00					.byte	 0	; $37 7
>92de	00					.byte	 0	; $38 8
>92df	00					.byte	 0	; $39 9
>92e0	00					.byte	 0	; $3a :
>92e1	00					.byte	 0	; $3b ;
>92e2	02					.byte	 2	; $3c <
>92e3	02					.byte	 2	; $3d =
>92e4	02					.byte	 2	; $3e >
>92e5	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92e6					EvaluateExpressionAt0:
.92e6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92e8					EvaluateExpression:
.92e8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92ea					EvaluateExpressionAtPrecedence:
.92ea	48		pha				pha 								; save precedence level
.92eb	20 c2 97	jsr $97c2			jsr 	EvaluateTerm 				; evaluate term into level X.
.92ee	68		pla				pla 								; restore precedence level.
.92ef					_EXPRLoop:
.92ef	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92f1	b1 30		lda ($30),y			lda 	(codePtr),y
.92f3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92f5	b0 25		bcs $931c			bcs 	_EXPRExit
.92f7	da		phx				phx 								; read the operator precedence
.92f8	aa		tax				tax
.92f9	bd a6 92	lda $92a6,x			lda 	PrecedenceLevel,x
.92fc	fa		plx				plx
.92fd	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.92ff	f0 1b		beq $931c			beq 	_EXPRExit
.9301	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9303	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9305	c5 37		cmp $37				cmp 	zTemp0+1
.9307	b0 13		bcs $931c			bcs		_EXPRExit 					; if current >= operator exit
.9309	48		pha				pha 								; save current precedence.
.930a	b1 30		lda ($30),y			lda 	(codePtr),y
.930c	c8		iny				iny
.930d	48		pha				pha
.930e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9310	e8		inx				inx 								; work out the right hand side.
.9311	20 ea 92	jsr $92ea			jsr 	EvaluateExpressionAtPrecedence
.9314	ca		dex				dex
.9315	68		pla				pla 								; get operator, call the code.
.9316	20 1f 93	jsr $931f			jsr 	_EXPRCaller
.9319	68		pla				pla 								; restore precedence level
.931a	80 d3		bra $92ef			bra 	_EXPRLoop 					; and go round.
.931c					_EXPRExit:
.931c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.931e	60		rts				rts
.931f					_EXPRCaller:
.931f	da		phx				phx 								; save on stack, first thing is to restore it
.9320	0a		asl a				asl 	a 							; double so can use vectors into X
.9321	aa		tax				tax
.9322	7c 6a 8a	jmp ($8a6a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9325					FloatingPointAdd:
.9325	20 ce 94	jsr $94ce			jsr 	FloatPrepare 				; prepare for floats
.9328	80 0b		bra $9335			bra 	FloatAdd
.932a					FloatingPointSub:
.932a	20 ce 94	jsr $94ce			jsr 	FloatPrepare 				; prepare for floats
.932d					FloatSubtract:
.932d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.9330	49 80		eor #$80			eor 	#$80
.9332	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9335					FloatAdd:
.9335	48		pha				pha
.9336	5a		phy				phy
.9337	20 df 94	jsr $94df			jsr 	NSNormalise 				; normalise S[X]
.933a	f0 5c		beq $9398			beq 	_FAReturn1
.933c	e8		inx				inx 								; normalise S[X+1]
.933d	20 df 94	jsr $94df			jsr 	NSNormalise
.9340	ca		dex				dex
.9341	c9 00		cmp #$00			cmp 	#0
.9343	f0 77		beq $93bc			beq 	_FAExit 					; if so, just return A
.9345	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9348	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.934b	f0 1b		beq $9368			beq 	_FAExponentsEqual
.934d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.9350	a8		tay				tay
.9351	38		sec				sec 								; do a signed comparison of the exponents.
.9352	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9355	50 02		bvc $9359			bvc 	_FANoSignedChange
.9357	49 80		eor #$80			eor 	#$80
.9359					_FANoSignedChange:
.9359	29 80		and #$80			and 	#$80
.935b	10 03		bpl $9360			bpl 	_FAHaveMax
.935d	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.9360					_FAHaveMax:
.9360	20 bf 93	jsr $93bf			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9363	e8		inx				inx
.9364	20 bf 93	jsr $93bf			jsr 	_FAShiftToExponent
.9367	ca		dex				dex
.9368					_FAExponentsEqual:
.9368	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.936b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.936e	30 10		bmi $9380			bmi 	_FADifferentSigns
.9370	20 71 90	jsr $9071			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9373	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9376	10 44		bpl $93bc			bpl 	_FAExit 					; if no, we are done.
.9378	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.937b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.937e	80 3c		bra $93bc			bra 	_FAExit
.9380					_FADifferentSigns:
.9380	20 97 90	jsr $9097			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9383	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.9386	10 06		bpl $938e			bpl 	_FACheckZero 				; if no, check for -0
.9388	20 a8 9d	jsr $9da8			jsr 	NSMNegate 					; netate result
.938b	20 b1 9d	jsr $9db1			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.938e					_FACheckZero:
.938e	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero	 				; check for -0
.9391	d0 29		bne $93bc			bne 	_FAExit
.9393	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9396	80 24		bra $93bc			bra 	_FAExit
.9398					_FAReturn1:
.9398	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.939b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.939e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93a1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93a4	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93a7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93aa	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93ad	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93b0	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93b3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93b6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93b9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93bc					_FAExit:
.93bc	7a		ply				ply
.93bd	68		pla				pla
.93be	60		rts				rts
.93bf					_FAShiftToExponent:
.93bf					_FAShiftToExponent2:
.93bf	98		tya				tya 								; compare Y to exponent
.93c0	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93c3	f0 08		beq $93cd			beq 	_FASEExit 					; exit if so.
.93c5	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight	 			; shift the mantissa right
.93c8	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93cb	80 f2		bra $93bf			bra 	_FAShiftToExponent2
.93cd					_FASEExit:
.93cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93ce					CompareFloat:
.93ce	20 2d 93	jsr $932d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93d1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93d4	29 f8		and #$f8			and 	#$F8
.93d6	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93d9	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93dc	f0 09		beq $93e7			beq 	_FCExit 					; zero, so approximately identical
.93de	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93e0	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93e3	10 02		bpl $93e7			bpl 	_FCExit
.93e5					_FCNegative:
.93e5	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93e7					_FCExit:
.93e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93e8					FDivideCommand:
.93e8	fa		plx				plx	 								; restore stack position
.93e9	20 ce 94	jsr $94ce			jsr 	FloatPrepare 				; prepare for floats
.93ec					FloatDivide:
.93ec	48		pha				pha
.93ed	e8		inx				inx
.93ee	20 df 94	jsr $94df			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93f1	ca		dex				dex
.93f2	c9 00		cmp #$00			cmp 	#0
.93f4	f0 20		beq $9416			beq 	_FDZero
.93f6	20 df 94	jsr $94df			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93f9	f0 19		beq $9414			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93fb	20 44 8f	jsr $8f44			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.93fe	20 d1 8e	jsr $8ed1			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9401	20 df 94	jsr $94df			jsr		NSNormalise 				; renormalise
.9404	20 df 8f	jsr $8fdf			jsr 	CalculateSign 				; calculate result sign
.9407	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.940a	38		sec				sec
.940b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.940e	38		sec				sec
.940f	e9 1e		sbc #$1e			sbc 	#30
.9411	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9414					_FDExit:
.9414	68		pla				pla
.9415	60		rts				rts
.9416					_FDZero:
.9416	a9 03		lda #$03		lda	#3
.9418	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.941b					FloatFractionalPart:
.941b	5a		phy				phy
.941c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.941f	29 7f		and #$7f			and 	#$7F
.9421	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9424	20 df 94	jsr $94df			jsr 	NSNormalise
.9427	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.942a	38		sec				sec
.942b	e9 e0		sbc #$e0			sbc 	#$E0
.942d	90 31		bcc $9460			bcc 	_FFPExit 					; already fractional
.942f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9431	b0 2a		bcs $945d			bcs 	_FFPZero
.9433	a8		tay				tay 								; put count to do in Y
.9434	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9437	20 62 94	jsr $9462			jsr 	_FFPPartial
.943a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.943d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9440	20 62 94	jsr $9462			jsr 	_FFPPartial
.9443	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9446	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9449	20 62 94	jsr $9462			jsr 	_FFPPartial
.944c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.944f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9452	20 62 94	jsr $9462			jsr 	_FFPPartial
.9455	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9458	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; zeroed check.
.945b	d0 03		bne $9460			bne 	_FFPExit
.945d					_FFPZero:
.945d	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.9460					_FFPExit:
.9460	7a		ply				ply
.9461	60		rts				rts
.9462					_FFPPartial:
.9462	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9464	f0 17		beq $947d			beq 	_FFFPPExit
.9466	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9468	b0 0c		bcs $9476			bcs 	_FFFPPWholeByte
.946a	5a		phy				phy
.946b					_FFFPPLeft:
.946b	0a		asl a				asl 	a
.946c	88		dey				dey
.946d	d0 fc		bne $946b			bne 	_FFFPPLeft
.946f	7a		ply				ply
.9470					_FFFPPRight:
.9470	4a		lsr a				lsr 	a
.9471	88		dey				dey
.9472	d0 fc		bne $9470			bne 	_FFFPPRight
.9474	80 07		bra $947d			bra 	_FFFPPExit
.9476					_FFFPPWholeByte:
.9476	98		tya				tya 								; subtract 8 from count
.9477	38		sec				sec
.9478	e9 08		sbc #$08			sbc 	#8
.947a	a8		tay				tay
.947b	a9 00		lda #$00			lda 	#0 							; and clear all
.947d					_FFFPPExit:
.947d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.947e					FloatIntegerPart:
.947e	48		pha				pha
.947f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.9482	f0 1f		beq $94a3			beq 	_FIPExit 					; if so do nothing
.9484	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; is it zero ?
.9487	f0 17		beq $94a0			beq 	_FIPZero 					; if so return zero.
.9489	20 df 94	jsr $94df			jsr 	NSNormalise 				; normalise
.948c	f0 12		beq $94a0			beq 	_FIPZero 					; normalised to zero, exit zero
.948e					_FIPShift:
.948e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9491	10 08		bpl $949b			bpl 	_FIPCheckZero
.9493	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight 				; shift mantissa right
.9496	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.9499	80 f3		bra $948e			bra 	_FIPShift
.949b					_FIPCheckZero:
.949b	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; avoid -0 problem
.949e	d0 03		bne $94a3			bne 	_FIPExit 					; set to zero if mantissa zero.
.94a0					_FIPZero:
.94a0	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.94a3					_FIPExit:
.94a3	68		pla				pla
.94a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94a5					FloatingPointMultiply:
.94a5	20 ce 94	jsr $94ce			jsr 	FloatPrepare 				; prepare for floats
.94a8					FloatMultiply:
.94a8	48		pha				pha
.94a9	20 df 94	jsr $94df			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94ac	f0 1b		beq $94c9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94ae	e8		inx				inx
.94af	20 df 94	jsr $94df			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94b2	ca		dex				dex
.94b3	c9 00		cmp #$00			cmp 	#0
.94b5	f0 0f		beq $94c6			beq 	_FDSetZero
.94b7	20 9a 8f	jsr $8f9a			jsr 	MultiplyShort 				; calculate the result.
.94ba	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94bd	18		clc				clc
.94be	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94c1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94c4	80 03		bra $94c9			bra 	_FDExit
.94c6					_FDSetZero:
.94c6	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; return 0
.94c9					_FDExit:
.94c9	20 df 94	jsr $94df			jsr 	NSNormalise 				; normalise the result
.94cc	68		pla				pla
.94cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94ce					FloatPrepare:
.94ce	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; dereference the top two values
.94d1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94d4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94d7	29 10		and #$10			and 	#NSBIsString
.94d9	d0 01		bne $94dc			bne 	_FDType
.94db	60		rts				rts
.94dc					_FDType:
.94dc	4c 90 9f	jmp $9f90			jmp 	TypeError
.94df					NSNormalise:
.94df	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94e2	29 80		and #$80			and 	#$80
.94e4	09 08		ora #$08			ora 	#NSTFloat
.94e6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94e9	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; if zero exit
.94ec	d0 09		bne $94f7			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94ee	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94f1	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94f4	a9 00		lda #$00			lda 	#0 							; set Z flag
.94f6	60		rts				rts
.94f7					_NSNormaliseOptimise:
.94f7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94fa	d0 22		bne $951e			bne 	_NSNormaliseLoop
.94fc	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.94ff	30 1d		bmi $951e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9501	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9504	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9507	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.950a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.950d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9510	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9513	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9516	38		sec				sec
.9517	e9 08		sbc #$08			sbc 	#8
.9519	9d 28 04	sta $0428,x			sta 	NSExponent,x
.951c	80 d9		bra $94f7			bra 	_NSNormaliseOptimise
.951e					_NSNormaliseLoop:
.951e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9521	70 08		bvs $952b			bvs 	_NSNExit 					; exit if so with Z flag clear
.9523	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; shift mantissa left
.9526	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9529	80 f3		bra $951e			bra 	_NSNormaliseLoop
.952b					_NSNExit:
.952b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.952d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.952e					AssignNumber:
.952e	5a		phy				phy
.952f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9532	85 36		sta $36				sta 	zTemp0
.9534	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9537	85 37		sta $37				sta 	zTemp0+1
.9539	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.953c	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.953e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9541	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9543	c9 08		cmp #$08			cmp 	#NSTFloat
.9545	f0 2a		beq $9571			beq 	_ANFloat
.9547	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.954a	f0 05		beq $9551			beq		_ANNotFloat
.954c	e8		inx				inx
.954d	20 7e 94	jsr $947e			jsr 	FloatIntegerPart 			; make it an integer
.9550	ca		dex				dex
.9551					_ANNotFloat:
.9551	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9554	29 03		and #$03			and 	#3
.9556	d0 05		bne $955d			bne 	_ANByteWord
.9558	20 7d 95	jsr $957d			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.955b	80 1e		bra $957b			bra 	_ANExit
.955d					_ANByteWord:
.955d	48		pha				pha 								; save count
.955e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9561	92 36		sta ($36)			sta 	(zTemp0)
.9563	68		pla				pla
.9564	c9 01		cmp #$01			cmp	 	#1
.9566	f0 13		beq $957b			beq 	_ANExit
.9568	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.956b	a0 01		ldy #$01			ldy 	#1
.956d	91 36		sta ($36),y			sta 	(zTemp0),y
.956f	80 0a		bra $957b			bra 	_ANExit
.9571					_ANFloat:
.9571	20 7d 95	jsr $957d			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9574	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9577	a0 04		ldy #$04			ldy 	#4
.9579	91 36		sta ($36),y			sta 	(zTemp0),y
.957b					_ANExit:
.957b	7a		ply				ply
.957c	60		rts				rts
.957d					_ANCopy4PackSign:
.957d	a0 03		ldy #$03			ldy 	#3
.957f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9582	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9584	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9587	91 36		sta ($36),y			sta 	(zTemp0),y
.9589	88		dey				dey
.958a	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.958d	91 36		sta ($36),y			sta 	(zTemp0),y
.958f	88		dey				dey
.9590	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9593	91 36		sta ($36),y			sta 	(zTemp0),y
.9595	88		dey				dey
.9596	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9599	91 36		sta ($36),y			sta 	(zTemp0),y
.959b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.959c					AssignString:
.959c	5a		phy				phy
.959d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95a0	85 38		sta $38				sta 	zTemp1
.95a2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95a5	85 39		sta $39				sta 	zTemp1+1
.95a7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95aa	85 36		sta $36				sta 	zTemp0
.95ac	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95af	85 37		sta $37				sta 	zTemp0+1
.95b1	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b5	f0 23		beq $95da			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95b7	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95b8	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95ba	e9 02		sbc #$02			sbc 	#2
.95bc	85 3c		sta $3c				sta 	zsTemp
.95be	a0 01		ldy #$01			ldy 	#1
.95c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c2	e9 00		sbc #$00			sbc 	#0
.95c4	85 3d		sta $3d				sta 	zsTemp+1
.95c6	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95c8					_ASGetLength:
.95c8	c8		iny				iny
.95c9	b1 38		lda ($38),y			lda 	(zTemp1),y
.95cb	d0 fb		bne $95c8			bne 	_ASGetLength
.95cd	98		tya				tya 								; is this length <= current length
.95ce	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95d0	90 20		bcc $95f2			bcc 	_ASCopyString
.95d2	f0 1e		beq $95f2			beq 	_ASCopyString
.95d4	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95d6	a0 01		ldy #$01			ldy 	#1
.95d8	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95da					_ASNewStringRequired:
.95da	e8		inx				inx 								; concrete the new string.
.95db	20 d0 a2	jsr $a2d0			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95de	ca		dex				dex
.95df	18		clc				clc
.95e0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95e3	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95e5	92 36		sta ($36)			sta 	(zTemp0)
.95e7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ea	69 00		adc #$00			adc 	#0
.95ec	a0 01		ldy #$01			ldy 	#1
.95ee	91 36		sta ($36),y			sta 	(zTemp0),y
.95f0	80 0d		bra $95ff			bra 	_ASExit
.95f2					_ASCopyString:
.95f2	a0 00		ldy #$00			ldy 	#0
.95f4					_ASCopyLoop:
.95f4	b1 38		lda ($38),y			lda 	(zTemp1),y
.95f6	c8		iny				iny
.95f7	c8		iny				iny
.95f8	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95fa	88		dey				dey
.95fb	c9 00		cmp #$00			cmp 	#0
.95fd	d0 f5		bne $95f4			bne 	_ASCopyLoop
.95ff					_ASExit:
.95ff	7a		ply				ply
.9600	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9601					DereferenceTopTwo:
.9601	e8		inx				inx
.9602	20 06 96	jsr $9606			jsr 	Dereference 				; deref x+1
.9605	ca		dex				dex  								; falls through to deref x
.9606					Dereference:
.9606	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9609	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.960b	f0 57		beq $9664			beq 	_DRFExit 					; not a reference
.960d	5a		phy				phy
.960e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9611	85 36		sta $36				sta 	zTemp0
.9613	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9616	85 37		sta $37				sta 	zTemp0+1
.9618	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.961b	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.961d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9620	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9623	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9625	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9627	f0 0f		beq $9638			beq 	_DRFDereferenceTwo
.9629	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.962b	f0 39		beq $9666			beq 	_DRFFull
.962d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9630	29 03		and #$03			and 	#3
.9632	f0 32		beq $9666			beq 	_DRFFull 					; the whole word
.9634	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9636	f0 07		beq $963f			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9638					_DRFDereferenceTwo:
.9638	a0 01		ldy #$01			ldy 	#1
.963a	b1 36		lda ($36),y			lda 	(zTemp0),y
.963c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.963f					_DRFClear23:
.963f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9642	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9645	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9648	29 18		and #$18			and 	#NSBTypeMask
.964a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.964d	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.964f	d0 12		bne $9663			bne 	_DRFNotString
.9651	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9654	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9657	d0 0a		bne $9663			bne 	_DRFNotString
.9659	a9 65		lda #$65			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.965b	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.965e	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.9660	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9663					_DRFNotString
.9663	7a		ply				ply 								; restore Y and exit
.9664					_DRFExit:
.9664	60		rts				rts
.9665					_DRFNullString:
>9665	00						.byte 	0
.9666					_DRFFull:
.9666	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9668	b1 36		lda ($36),y			lda 	(zTemp0),y
.966a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.966d	c8		iny				iny
.966e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9670	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9673	c8		iny				iny
.9674	b1 36		lda ($36),y			lda 	(zTemp0),y
.9676	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9679	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.967c	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.967f	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9681	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9684	f0 06		beq $968c			beq 	_DRFNoExponent
.9686	c8		iny				iny 								; if not, read the exponent as well.
.9687	b1 36		lda ($36),y			lda 	(zTemp0),y
.9689	9d 28 04	sta $0428,x			sta 	NSExponent,x
.968c					_DRFNoExponent:
.968c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.968f	10 0d		bpl $969e			bpl 	_DRFExit2 					; if not, then exit.
.9691	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9693	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9696	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9699	09 80		ora #$80			ora 	#NSBIsNegative
.969b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.969e					_DRFExit2:
.969e	7a		ply				ply
.969f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96a0					EncodeNumberStart:
.96a0	38		sec				sec
.96a1	80 01		bra $96a4			bra 	EncodeNumberContinue+1
.96a3					EncodeNumberContinue:
.96a3	18		clc				clc
.96a4					EncodeNumber:
.96a4	08		php				php 								; save reset.
.96a5	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96a7	f0 12		beq $96bb			beq 	_ENIsOkay
.96a9	c9 30		cmp #$30			cmp 	#"0"
.96ab	90 04		bcc $96b1			bcc 	_ENBadNumber
.96ad	c9 3a		cmp #$3a			cmp 	#"9"+1
.96af	90 0a		bcc $96bb			bcc 	_ENIsOkay
.96b1					_ENBadNumber:
.96b1	28		plp				plp 								; throw saved reset
.96b2	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96b5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96b7	f0 7e		beq $9737			beq 	_ENConstructFinal
.96b9					_ENFail:
.96b9	18		clc				clc 								; not allowed
.96ba	60		rts				rts
.96bb					_ENIsOkay:
.96bb	28		plp				plp 								; are we restarting
.96bc	90 15		bcc $96d3			bcc 	_ENNoRestart
.96be					_ENStartEncode:
.96be	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96c0	f0 0c		beq $96ce			beq 	_ENFirstDP
.96c2	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96c4	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.96c7	a9 01		lda #$01			lda 	#ESTA_Low
.96c9					_ENExitChange:
.96c9	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96cc	38		sec				sec
.96cd	60		rts				rts
.96ce					_ENFirstDP:
.96ce	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; clear integer part
.96d1	80 3f		bra $9712			bra 	_ESTASwitchFloat			; go straight to float and exi
.96d3					_ENNoRestart:
.96d3	48		pha				pha 								; save on stack.
.96d4	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96d7	c9 01		cmp #$01			cmp 	#ESTA_Low
.96d9	f0 09		beq $96e4			beq  	_ESTALowState
.96db	c9 02		cmp #$02			cmp 	#ESTA_High
.96dd	f0 29		beq $9708			beq 	_ESTAHighState
.96df	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96e1	f0 3b		beq $971e			beq 	_ESTADecimalState
>96e3	db						.byte 	$DB 						; causes a break in the emulator
.96e4					_ESTALowState:
.96e4	68		pla				pla 								; get value back
.96e5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96e7	f0 29		beq $9712			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96e9	29 0f		and #$0f			and 	#15 						; make digit
.96eb	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96ee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96f1	0a		asl a				asl 	a
.96f2	0a		asl a				asl 	a
.96f3	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96f6	0a		asl a				asl 	a
.96f7	6d 86 04	adc $0486			adc 	DigitTemp
.96fa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96fd	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.96ff	90 05		bcc $9706			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9701	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9703	8d 85 04	sta $0485			sta 	EncodeState
.9706					_ESTANoSwitch:
.9706	38		sec				sec
.9707	60		rts				rts
.9708					_ESTAHighState:
.9708	68		pla				pla 								; get value back
.9709	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.970b	f0 05		beq $9712			beq 	_ESTASwitchFloat
.970d	20 71 97	jsr $9771			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9710	38		sec				sec
.9711	60		rts				rts
.9712					_ESTASwitchFloat:
.9712	9c 87 04	stz $0487			stz 	DecimalCount
.9715	e8		inx				inx 								; zero the decimal additive.
.9716	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.9719	ca		dex				dex
.971a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.971c	80 ab		bra $96c9			bra 	_ENExitChange
.971e					_ESTADecimalState:
.971e	68		pla				pla 								; digit.
.971f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9721	f0 96		beq $96b9			beq 	_ENFail
.9723	e8		inx				inx 								; put digit into fractional part of X+1
.9724	20 71 97	jsr $9771			jsr 	ESTAShiftDigitIntoMantissa
.9727	ca		dex				dex
.9728	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.972b	ad 87 04	lda $0487			lda 	DecimalCount
.972e	c9 0b		cmp #$0b			cmp 	#11
.9730	f0 02		beq $9734			beq 	_ESTADSFail
.9732	38		sec				sec
.9733	60		rts				rts
.9734					_ESTADSFail:
.9734	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.9737					_ENConstructFinal:
.9737	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.973a	f0 33		beq $976f			beq 	_ENCFExit 					; no decimals
.973c	5a		phy				phy
.973d	0a		asl a				asl 	a 							; x 4 and CLC
.973e	0a		asl a				asl 	a
.973f	6d 87 04	adc $0487			adc 	DecimalCount
.9742	a8		tay				tay
.9743	b9 4a 9f	lda $9f4a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9746	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9749	b9 4b 9f	lda $9f4b,y			lda 	DecimalScalarTable-5+1,y
.974c	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.974f	b9 4c 9f	lda $9f4c,y			lda 	DecimalScalarTable-5+2,y
.9752	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9755	b9 4d 9f	lda $9f4d,y			lda 	DecimalScalarTable-5+3,y
.9758	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.975b	b9 4e 9f	lda $9f4e,y			lda 	DecimalScalarTable-5+4,y
.975e	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9761	a9 08		lda #$08			lda 	#NSTFloat
.9763	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9766	7a		ply				ply
.9767	e8		inx				inx 								; multiply decimal const by decimal scalar
.9768	20 a8 94	jsr $94a8			jsr 	FloatMultiply
.976b	ca		dex				dex
.976c	20 35 93	jsr $9335			jsr 	FloatAdd 					; add to integer part.
.976f					_ENCFExit:
.976f	18		clc				clc 								; reject the digit.
.9770	60		rts				rts
.9771					ESTAShiftDigitIntoMantissa:
.9771	29 0f		and #$0f			and 	#15 						; save digit
.9773	48		pha				pha
.9774	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9777	48		pha				pha
.9778	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.977b	48		pha				pha
.977c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.977f	48		pha				pha
.9780	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9783	48		pha				pha
.9784	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 2
.9787	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 4
.978a	18		clc				clc 								; pop mantissa and add
.978b	68		pla				pla
.978c	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.978f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9792	68		pla				pla
.9793	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9796	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9799	68		pla				pla
.979a	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.979d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97a0	68		pla				pla
.97a1	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97a4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97a7	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 10
.97aa	68		pla				pla 								; add digit
.97ab	18		clc				clc
.97ac	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97af	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b2	90 0d		bcc $97c1			bcc 	_ESTASDExit
.97b4	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97b7	d0 08		bne $97c1			bne 	_ESTASDExit
.97b9	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97bc	d0 03		bne $97c1			bne 	_ESTASDExit
.97be	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97c1					_ESTASDExit:
.97c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97c2					EvaluateTerm:
.97c2	b1 30		lda ($30),y			lda 	(codePtr),y
.97c4	30 18		bmi $97de			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97c6	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97c8	b0 6f		bcs $9839			bcs 	_ETVariable
.97ca	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97cc	90 6e		bcc $983c			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97ce	c9 3a		cmp #$3a			cmp 	#'9'+1
.97d0	b0 6a		bcs $983c			bcs 	_ETPuncUnary
.97d2	20 a0 96	jsr $96a0			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97d5					_ETNumber:
.97d5	c8		iny				iny 								; keep encoding until we have the numbers
.97d6	b1 30		lda ($30),y			lda 	(codePtr),y
.97d8	20 a3 96	jsr $96a3			jsr 	EncodeNumberContinue
.97db	b0 f8		bcs $97d5			bcs 	_ETNumber 					; go back if accepted.
.97dd	60		rts				rts
.97de					_ETCheckUnary:
.97de	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97e0	f0 41		beq $9823			beq 	_ETString
.97e2	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97e4	f0 12		beq $97f8			beq 	_ETHexConstant
.97e6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97e8	90 0b		bcc $97f5			bcc 	_ETSyntaxError
.97ea	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.97ec	b0 07		bcs $97f5			bcs 	_ETSyntaxError
.97ee	da		phx				phx 								; push X on the stack
.97ef	0a		asl a				asl 	a 							; put vector x 2 into X
.97f0	aa		tax				tax
.97f1	c8		iny				iny 								; consume unary function token
.97f2	7c ea 8a	jmp ($8aea,x)			jmp 	(VectorSet0,x) 				; and do it.
.97f5					_ETSyntaxError:
.97f5	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.97f8					_ETHexConstant:
.97f8	c8		iny				iny 								; skip #
.97f9	c8		iny				iny 								; skip count
.97fa	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; clear result
.97fd					_ETHLoop:
.97fd	b1 30		lda ($30),y			lda 	(codePtr),y
.97ff	c8		iny				iny 								; and consume
.9800	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9802	f0 1e		beq $9822			beq 	_ETHExit
.9804	48		pha				pha 								; save on stack.
.9805	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 2
.9808	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 4
.980b	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 8
.980e	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 16
.9811	68		pla				pla 								; ASCII
.9812	c9 41		cmp #$41			cmp 	#'A'
.9814	90 02		bcc $9818			bcc 	_ETHNotChar
.9816	e9 07		sbc #$07			sbc 	#7
.9818					_ETHNotChar:
.9818	29 0f		and #$0f			and 	#15 						; digit now
.981a	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.981d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9820	80 db		bra $97fd			bra 	_ETHLoop 					; go round.
.9822					_ETHExit:
.9822	60		rts				rts
.9823					_ETString:
.9823	c8		iny				iny 								; look at length
.9824	b1 30		lda ($30),y			lda 	(codePtr),y
.9826	48		pha				pha
.9827	c8		iny				iny 								; first character
.9828	20 f4 a1	jsr $a1f4			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.982b	68		pla				pla 								; restore count and save
.982c	85 36		sta $36				sta 	zTemp0
.982e	98		tya				tya 								; add length to Y to skip it.
.982f	18		clc				clc
.9830	65 36		adc $36				adc 	zTemp0
.9832	a8		tay				tay
.9833	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9835	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9838	60		rts				rts
.9839					_ETVariable:
.9839	4c 93 98	jmp $9893			jmp 	VariableHandler
.983c					_ETPuncUnary:
.983c	c8		iny				iny 								; consume the unary character
.983d	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.983f	f0 2d		beq $986e			beq 	_ETUnaryNegate
.9841	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9843	f0 39		beq $987e			beq 	_ETDereference
.9845	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9847	f0 43		beq $988c			beq 	_ETParenthesis
.9849	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.984b	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.984d	f0 06		beq $9855			beq 	_ETIndirection
.984f	e6 36		inc $36				inc 	zTemp0
.9851	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9853	d0 a0		bne $97f5			bne 	_ETSyntaxError
.9855					_ETIndirection:
.9855	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9857	1a		inc a				inc 	a
.9858	48		pha				pha
.9859	20 c2 97	jsr $97c2			jsr 	EvaluateTerm				; evaluate the term
.985c	20 06 96	jsr $9606			jsr 	Dereference 				; dereference it.
.985f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9862	d0 07		bne $986b			bne 	_ETTypeMismatch
.9864	68		pla				pla 								; indirection 1-2
.9865	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9867	9d 00 04	sta $0400,x			sta 	NSStatus,x
.986a	60		rts				rts
.986b					_ETTypeMismatch:
.986b	4c 90 9f	jmp $9f90			jmp 	TypeError
.986e					_ETUnaryNegate:
.986e	20 c2 97	jsr $97c2			jsr 	EvaluateTerm				; evaluate the term
.9871	20 06 96	jsr $9606			jsr 	Dereference 				; dereference it.
.9874	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9877	29 10		and #$10			and 	#NSTString
.9879	d0 f0		bne $986b			bne 	_ETTypeMismatch
.987b	4c a8 9d	jmp $9da8			jmp 	NSMNegate  					; just toggles the sign bit.
.987e					_ETDereference:
.987e	20 c2 97	jsr $97c2			jsr 	EvaluateTerm				; evaluate the term
.9881	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9884	29 20		and #$20			and 	#NSBIsReference
.9886	f0 e3		beq $986b			beq 	_ETTypeMismatch
.9888	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.988b	60		rts				rts
.988c					_ETParenthesis:
.988c	20 e8 92	jsr $92e8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.988f	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; check for )
.9892	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9893					VariableHandler:
.9893	b1 30		lda ($30),y			lda 	(codePtr),y
.9895	18		clc				clc
.9896	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9898	85 37		sta $37				sta 	zTemp0+1
.989a	c8		iny				iny
.989b	b1 30		lda ($30),y			lda 	(codePtr),y
.989d	85 36		sta $36				sta 	zTemp0
.989f	c8		iny				iny
.98a0	18		clc				clc									; copy variable address+3 to mantissa
.98a1	69 03		adc #$03			adc 	#3
.98a3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a6	a5 37		lda $37				lda 	zTemp0+1
.98a8	69 00		adc #$00			adc 	#0
.98aa	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98ad	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98b0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98b3	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98b6	5a		phy				phy
.98b7	a0 02		ldy #$02			ldy 	#2 							; read type
.98b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.98bb	7a		ply				ply
.98bc	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98be	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98c0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98c3	29 04		and #$04			and 	#NSBIsArray
.98c5	d0 01		bne $98c8			bne 	_VHArray
.98c7	60		rts				rts
.98c8					_VHArray:
.98c8	e8		inx				inx
.98c9	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98cc	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98ce	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98d1	b1 30		lda ($30),y			lda 	(codePtr),y
.98d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98d5	d0 06		bne $98dd			bne 	_VHNoSecondIndex
.98d7	c8		iny				iny 								; skip the comma
.98d8	e8		inx				inx
.98d9	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98dc	ca		dex				dex
.98dd					_VHNoSecondIndex:
.98dd	ca		dex				dex 								; set X back.
.98de	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; and check the right bracket.
.98e1	5a		phy				phy 								; save position
.98e2	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98e4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98e6	f0 6b		beq $9953			beq 	_VHBadIndex
.98e8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98eb	85 3e		sta $3e				sta 	zaTemp
.98ed	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98f0	85 3f		sta $3f				sta 	zaTemp+1
.98f2	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98f4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98f6	f0 02		beq $98fa			beq 	_VHHas2Mask
.98f8	a9 ff		lda #$ff			lda 	#$FF
.98fa					_VHHas2Mask:
.98fa	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.98fd	f0 54		beq $9953			beq 	_VHBadIndex
.98ff	0a		asl a				asl 	a 							; carry will be set if a second index
.9900	90 09		bcc $990b			bcc 	_VHCheckFirstIndex
.9902	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9904	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9906	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9909	90 48		bcc $9953			bcc 	_VHBadIndex
.990b					_VHCheckFirstIndex:
.990b	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.990d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990f	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9912	90 3f		bcc $9953			bcc 	_VHBadIndex
.9914	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9916	64 37		stz $37				stz 	zTemp0+1
.9918	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.991b	30 0f		bmi $992c			bmi 	_VHNoMultiply
.991d	da		phx				phx
.991e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9921	48		pha				pha
.9922	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9924	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9926	1a		inc a				inc 	a 							; add 1 for zero base
.9927	fa		plx				plx
.9928	20 91 9d	jsr $9d91			jsr 	Multiply8x8 				; calculate -> Z0
.992b	fa		plx				plx
.992c					_VHNoMultiply:
.992c	18		clc				clc
.992d	a5 36		lda $36				lda 	zTemp0
.992f	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9932	85 36		sta $36				sta 	zTemp0
.9934	a5 37		lda $37				lda 	zTemp0+1
.9936	69 00		adc #$00			adc 	#0
.9938	85 37		sta $37				sta 	zTemp0+1
.993a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.993d	20 fa 84	jsr $84fa			jsr 	ScaleByBaseType
.9940	18		clc				clc
.9941	b2 3e		lda ($3e)			lda 	(zaTemp)
.9943	65 36		adc $36				adc 	zTemp0
.9945	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9948	a0 01		ldy #$01			ldy 	#1
.994a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.994c	65 37		adc $37				adc 	zTemp0+1
.994e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9951	7a		ply				ply 								; restore position
.9952	60		rts				rts
.9953					_VHBadIndex:
.9953	a9 17		lda #$17		lda	#23
.9955	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9958					AbsUnary:
.9958	fa		plx				plx 								; restore stack pos
.9959	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; get a float or int
.995c	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.995f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9962	29 7f		and #$7f			and 	#$7F
.9964	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9967	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9968					AllocUnary:
.9968	fa		plx				plx 								; restore stack pos
.9969	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger		; get bytes required.
.996c	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.996f	da		phx				phx 								; save X/Y
.9970	5a		phy				phy
.9971	8a		txa				txa 								; copy X into Y
.9972	a8		tay				tay
.9973	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9976	aa		tax				tax
.9977	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.997a	20 87 99	jsr $9987			jsr 	AllocateXABytes 			; allocate memory
.997d	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9980	8a		txa				txa
.9981	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9984	7a		ply				ply
.9985	fa		plx				plx
.9986	60		rts				rts
.9987					AllocateXABytes:
.9987	5a		phy				phy
.9988	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.998b	84 36		sty $36				sty 	zTemp0
.998d	5a		phy				phy
.998e	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9991	84 37		sty $37				sty 	zTemp0+1
.9993	5a		phy				phy
.9994	18		clc				clc 								; add to low memory pointer
.9995	6d 8c 04	adc $048c			adc 	lowMemPtr
.9998	8d 8c 04	sta $048c			sta 	lowMemPtr
.999b	8a		txa				txa
.999c	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.999f	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99a2	b0 2f		bcs $99d3			bcs 	CISSMemory
.99a4	20 c5 99	jsr $99c5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99a7					_ClearMemory:
.99a7	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99aa	c5 36		cmp $36				cmp 	zTemp0
.99ac	d0 07		bne $99b5			bne 	_CMClearNext
.99ae	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99b1	c5 37		cmp $37				cmp 	zTemp0+1
.99b3	f0 0c		beq $99c1			beq 	_CMExit
.99b5					_CMClearNext:
.99b5	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99b7	92 36		sta ($36)			sta 	(zTemp0)
.99b9	e6 36		inc $36				inc 	zTemp0
.99bb	d0 ea		bne $99a7			bne 	_ClearMemory
.99bd	e6 37		inc $37				inc		zTemp0+1
.99bf	80 e6		bra $99a7			bra 	_ClearMemory
.99c1					_CMExit:
.99c1	fa		plx				plx
.99c2	68		pla				pla
.99c3	7a		ply				ply
.99c4	60		rts				rts
.99c5					CheckIdentifierStringSpace:
.99c5	48		pha				pha
.99c6	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99c9	18		clc				clc
.99ca	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99cc	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99cf	b0 02		bcs $99d3			bcs 	CISSMemory
.99d1	68		pla				pla
.99d2	60		rts				rts
.99d3					CISSMemory:
.99d3	a9 06		lda #$06		lda	#6
.99d5	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99d8					AscUnary:
.99d8	fa		plx				plx 								; restore stack pos
.99d9	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get a string
.99dc	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99de	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.99e1	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.99e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99e5					FracUnary:
.99e5	fa		plx				plx 								; restore stack pos
.99e6	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; get a float or int
.99e9	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.99ec	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99ef	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99f1	f0 04		beq $99f7			beq 	_IUZero
.99f3	20 1b 94	jsr $941b			jsr 	FloatFractionalPart
.99f6	60		rts				rts
.99f7					_IUZero:
.99f7	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.99fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.99fb					IntUnary:
.99fb	fa		plx				plx 								; restore stack pos
.99fc	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; get a float or int
.99ff	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9a02	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a05	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a07	f0 03		beq $9a0c			beq 	_IUExit
.9a09	20 7e 94	jsr $947e			jsr 	FloatIntegerPart
.9a0c					_IUExit:
.9a0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a0d					LenUnary:
.9a0d	fa		plx				plx 								; restore stack pos
.9a0e	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get a string
.9a11	5a		phy				phy
.9a12	a0 00		ldy #$00			ldy 	#0 							; find length
.9a14					_LenFind:
.9a14	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a16	f0 06		beq $9a1e			beq 	_LenExit
.9a18	c8		iny				iny
.9a19	d0 f9		bne $9a14			bne 	_LenFind
.9a1b	4c 8b 9f	jmp $9f8b			jmp 	RangeError 					; string > 255
.9a1e					_LenExit:
.9a1e	98		tya				tya
.9a1f	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9a22	7a		ply				ply
.9a23	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9a26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a27					Unary_Min:
.9a27	a9 01		lda #$01			lda 	#1
.9a29	80 02		bra $9a2d			bra 	UnaryMinMaxMain
.9a2b					Unary_Max:
.9a2b	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a2d					UnaryMinMaxMain:
.9a2d	fa		plx				plx 								; get index on number stack
.9a2e	48		pha				pha 								; save comparator
.9a2f	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get the first value.
.9a32					_UMMMLoop:
.9a32	b1 30		lda ($30),y			lda 	(codePtr),y
.9a34	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a36	f0 22		beq $9a5a			beq 	_UMMMDone
.9a38	20 28 8d	jsr $8d28			jsr 	CheckComma 					; must be a comma
.9a3b	e8		inx				inx
.9a3c	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue
.9a3f	ca		dex				dex
.9a40	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a43	e8		inx				inx
.9a44	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a47	e8		inx				inx
.9a48	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a4b	ca		dex				dex
.9a4c	ca		dex				dex
.9a4d	85 36		sta $36				sta 	zTemp0 						; save required result
.9a4f	68		pla				pla 								; get and save comparator
.9a50	48		pha				pha
.9a51	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a53	d0 dd		bne $9a32			bne 	_UMMMLoop
.9a55	20 5d 9a	jsr $9a5d			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a58	80 d8		bra $9a32			bra 	_UMMMLoop
.9a5a					_UMMMDone:
.9a5a	68		pla				pla 								; throw the comparator
.9a5b	c8		iny				iny 								; skip )
.9a5c	60		rts				rts
.9a5d					ExpCopyAboveDown:
.9a5d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a60	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a63	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a66	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a69	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a6c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a6f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a72	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a75	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a78	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a7b	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a7e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a81	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a82					Unary_Not:
.9a82	fa		plx				plx
.9a83	20 48 9d	jsr $9d48			jsr 	EvaluateInteger 			; get integer
.9a86	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9a89	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; zero mantissa ?
.9a8c	f0 04		beq $9a92			beq 	_NotZero
.9a8e	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.9a91	60		rts				rts
.9a92					_NotZero:
.9a92	4c a6 8d	jmp $8da6			jmp 	ReturnTrue
.9a95					_UNBad:
.9a95	4c 95 9f	jmp $9f95			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a98					Unary_Random:
.9a98	fa		plx				plx
.9a99	20 17 9b	jsr $9b17			jsr 	Random32Bit 				; get a random number
.9a9c	20 fc 9a	jsr $9afc			jsr 	URCopyToMantissa  			; put in mantissa
.9a9f	b1 30		lda ($30),y			lda 	(codePtr),y
.9aa1	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9aa3	f0 08		beq $9aad			beq 	_URNoModulus
.9aa5	e8		inx				inx
.9aa6	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9aa9	ca		dex				dex
.9aaa	20 15 8f	jsr $8f15			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9aad					_URNoModulus:
.9aad	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ab0	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ab3	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9ab6	60		rts				rts
.9ab7					Unary_Rnd:
.9ab7	fa		plx				plx
.9ab8	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; number to use.
.9abb	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; closing bracket
.9abe	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ac1	f0 2b		beq $9aee			beq 	_URCopySeed
.9ac3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ac6	10 23		bpl $9aeb			bpl 	_URDontSeed
.9ac8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9acb	49 17		eor #$17			eor 	#$17
.9acd	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ad0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ad3	49 a5		eor #$a5			eor 	#$A5
.9ad5	8d 89 04	sta $0489			sta 	RandomSeed+1
.9ad8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9adb	49 c2		eor #$c2			eor 	#$C2
.9add	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9ae0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ae3	49 9d		eor #$9d			eor 	#$9D
.9ae5	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9ae8	20 17 9b	jsr $9b17			jsr 	Random32Bit
.9aeb					_URDontSeed:
.9aeb	20 17 9b	jsr $9b17			jsr 	Random32Bit 				; generate a number.
.9aee					_URCopySeed:
.9aee	20 fc 9a	jsr $9afc			jsr 	URCopyToMantissa 			; copy into mantissa
.9af1	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9af3	8d 28 04	sta $0428			sta 	NSExponent
.9af6	a9 08		lda #$08			lda 	#NSTFloat
.9af8	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9afb	60		rts				rts
.9afc					URCopyToMantissa:
.9afc	ad 88 04	lda $0488			lda 	RandomSeed+0
.9aff	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b02	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b05	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b08	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b0b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b0e	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b11	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b13	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b16	60		rts				rts
.9b17					Random32Bit:
.9b17	5a		phy				phy
.9b18	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b1a	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b1d	d0 03		bne $9b22			bne 	_Random1
.9b1f	a8		tay				tay 								; if so do it 256 times
.9b20	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b22					_Random1:
.9b22	0a		asl a				asl 	a 							; LSFR RNG
.9b23	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b26	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b29	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b2c	90 02		bcc $9b30			bcc 	_Random2
.9b2e	49 c5		eor #$c5			eor 	#$C5
.9b30					_Random2:
.9b30	88		dey				dey
.9b31	d0 ef		bne $9b22			bne 	_Random1
.9b33	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b36	7a		ply				ply
.9b37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b38					SgnUnary:
.9b38	fa		plx				plx 								; restore stack pos
.9b39	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; get a float or int
.9b3c	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9b3f	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; if zero
.9b42	f0 10		beq $9b54			beq 	_SGZero  					; return Int Zero
.9b44	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b47	48		pha				pha
.9b48	a9 01		lda #$01			lda 	#1 							; set to 1
.9b4a	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9b4d	68		pla				pla
.9b4e	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b50	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b53	60		rts				rts
.9b54	20 fc 9d	jsr $9dfc	_SGZero:jsr 	NSMSetZero
.9b57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b58					ValUnary:
.9b58	fa		plx				plx 								; restore stack pos
.9b59	20 6e 9b	jsr $9b6e			jsr 	ValMainCode 				; do the main val() code
.9b5c	b0 01		bcs $9b5f			bcs 	_VUError 					; couldn't convert
.9b5e	60		rts				rts
.9b5f					_VUError:
.9b5f	4c 90 9f	jmp $9f90			jmp 	TypeError
.9b62					IsValUnary:
.9b62	fa		plx				plx 								; restore stack pos
.9b63	20 6e 9b	jsr $9b6e			jsr 	ValMainCode 				; do the main val() code
.9b66	b0 03		bcs $9b6b			bcs 	_VUBad
.9b68	4c a6 8d	jmp $8da6			jmp 	ReturnTrue
.9b6b					_VUBad:
.9b6b	4c b2 8d	jmp $8db2			jmp 	ReturnFalse
.9b6e					ValMainCode:
.9b6e	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get a string
.9b71	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; check right bracket present
.9b74	5a		phy				phy
.9b75	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b77	f0 17		beq $9b90			beq 	_VMCFail2
.9b79	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b7b	48		pha				pha 								; save first character
.9b7c	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b7e	d0 01		bne $9b81			bne 	_VMCStart
.9b80	c8		iny				iny 								; skip over -
.9b81					_VMCStart:
.9b81	38		sec				sec 								; initialise first time round.
.9b82					_VMCNext:
.9b82	c8		iny				iny 								; pre-increment
.9b83	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b85	f0 0c		beq $9b93			beq 	_VMCSuccess 				; successful.
.9b87	20 a4 96	jsr $96a4			jsr 	EncodeNumber 				; send it to the number-builder
.9b8a	90 03		bcc $9b8f			bcc 	_VMCFail 					; if failed, give up.
.9b8c	18		clc				clc 								; next time round, countinue
.9b8d	80 f3		bra $9b82			bra 	_VMCNext
.9b8f					_VMCFail:
.9b8f	68		pla				pla
.9b90					_VMCFail2:
.9b90	7a		ply				ply
.9b91	38		sec				sec
.9b92	60		rts				rts
.9b93					_VMCSuccess:
.9b93	a9 00		lda #$00			lda 	#0 							; construct final
.9b95	20 a4 96	jsr $96a4			jsr 	EncodeNumber
.9b98	68		pla				pla
.9b99	c9 2d		cmp #$2d			cmp 	#"-"
.9b9b	d0 03		bne $9ba0			bne 	_VMCNotNegative
.9b9d	20 a8 9d	jsr $9da8			jsr		NSMNegate
.9ba0					_VMCNotNegative:
.9ba0	7a		ply				ply
.9ba1	18		clc				clc
.9ba2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ba3					ChrUnary:
.9ba3	fa		plx				plx 								; restore stack pos
.9ba4	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger			; get value
.9ba7	48		pha				pha
.9ba8	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9bab	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bad	20 51 a3	jsr $a351			jsr 	StringTempAllocate
.9bb0	68		pla				pla 								; write number to it
.9bb1	20 8f a3	jsr $a38f			jsr 	StringTempWrite
.9bb4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bb5					SpcUnary:
.9bb5	fa		plx				plx 								; restore stack pos
.9bb6	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger			; get value
.9bb9	5a		phy				phy
.9bba	48		pha				pha 								; save count
.9bbb	20 51 a3	jsr $a351			jsr 	StringTempAllocate
.9bbe	7a		ply				ply 								; to do count in Y
.9bbf					_SpcLoop:
.9bbf	c0 00		cpy #$00			cpy 	#0
.9bc1	f0 08		beq $9bcb			beq 	_SpcExit
.9bc3	a9 20		lda #$20			lda 	#32
.9bc5	20 8f a3	jsr $a38f			jsr 	StringTempWrite
.9bc8	88		dey				dey
.9bc9	80 f4		bra $9bbf			bra 	_SPCLoop
.9bcb					_SpcExit:
.9bcb	7a		ply				ply
.9bcc	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9bcf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bd0					Unary_Str:
.9bd0	fa		plx				plx
.9bd1	20 25 9d	jsr $9d25			jsr 	EvaluateNumber  			; get number
.9bd4	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; closing bracket
.9bd7	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bd9	20 f2 9b	jsr $9bf2			jsr 	ConvertNumberToString 		; do the conversion.
.9bdc	a9 21		lda #$21			lda		#33 						; create buffer
.9bde	20 51 a3	jsr $a351			jsr 	StringTempAllocate 			; allocate memory
.9be1	da		phx				phx
.9be2	a2 00		ldx #$00			ldx 	#0
.9be4					_USCopy:
.9be4	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9be7	20 8f a3	jsr $a38f			jsr 	StringTempWrite
.9bea	e8		inx				inx
.9beb	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9bee	d0 f4		bne $9be4			bne 	_USCopy
.9bf0	fa		plx				plx
.9bf1	60		rts				rts
.9bf2					ConvertNumberToString:
.9bf2	5a		phy				phy 								; save code position
.9bf3	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9bf6	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9bf9	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9bfc	10 0a		bpl $9c08			bpl 	_CNTSNotNegative
.9bfe	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c00	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c03	a9 2d		lda #$2d			lda 	#"-"
.9c05	20 6e 9c	jsr $9c6e			jsr 	WriteDecimalBuffer
.9c08					_CNTSNotNegative:
.9c08	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c0b	f0 15		beq $9c22			beq 	_CNTSNotFloat
.9c0d	e8		inx				inx 								; round up
.9c0e	a9 01		lda #$01			lda 	#1
.9c10	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9c13	ca		dex				dex
.9c14	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c17	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c1a	a9 08		lda #$08			lda 	#NSTFloat
.9c1c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c1f	20 35 93	jsr $9335			jsr 	FloatAdd
.9c22					_CNTSNotFloat:
.9c22	20 50 9c	jsr $9c50			jsr 	MakePlusTwoString
.9c25	20 1b 94	jsr $941b			jsr 	FloatFractionalPart 		; get the fractional part
.9c28	20 df 94	jsr $94df			jsr 	NSNormalise					; normalise , exit if zero
.9c2b	f0 21		beq $9c4e			beq 	_CNTSExit
.9c2d	a9 2e		lda #$2e			lda 	#"."
.9c2f	20 6e 9c	jsr $9c6e			jsr 	WriteDecimalBuffer 			; write decimal place
.9c32					_CNTSDecimal:
.9c32	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c35	30 17		bmi $9c4e			bmi 	_CNTSExit
.9c37	e8		inx				inx 								; x 10.0
.9c38	a9 0a		lda #$0a			lda 	#10
.9c3a	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9c3d	a9 08		lda #$08			lda 	#NSTFloat
.9c3f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c42	ca		dex				dex
.9c43	20 a8 94	jsr $94a8			jsr 	FloatMultiply
.9c46	20 50 9c	jsr $9c50			jsr 	MakePlusTwoString
.9c49	20 1b 94	jsr $941b			jsr 	FloatFractionalPart 		; get the fractional part
.9c4c	80 e4		bra $9c32			bra 	_CNTSDecimal 				; keep going.
.9c4e					_CNTSExit:
.9c4e	7a		ply				ply
.9c4f	60		rts				rts
.9c50					MakePlusTwoString:
.9c50	da		phx				phx
.9c51	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c54	e8		inx				inx 								; access it
.9c55	e8		inx				inx
.9c56	20 7e 94	jsr $947e			jsr 	FloatIntegerPart 			; make it an integer
.9c59	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c5b	20 60 92	jsr $9260			jsr 	ConvertInt32
.9c5e	a2 00		ldx #$00			ldx	 	#0
.9c60					_MPTSCopy:
.9c60	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9c63	20 6e 9c	jsr $9c6e			jsr 	WriteDecimalBuffer
.9c66	e8		inx				inx
.9c67	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9c6a	d0 f4		bne $9c60			bne 	_MPTSCopy
.9c6c	fa		plx				plx
.9c6d	60		rts				rts
.9c6e					WriteDecimalBuffer:
.9c6e	da		phx				phx
.9c6f	ae 95 04	ldx $0495			ldx 	dbOffset
.9c72	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.9c75	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.9c78	ee 95 04	inc $0495			inc 	dbOffset
.9c7b	fa		plx				plx
.9c7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c7d					Unary_Left:
.9c7d	fa		plx				plx
.9c7e	18		clc				clc 								; only one parameter
.9c7f	20 f4 9c	jsr $9cf4			jsr 	SubstringInitial 			; set up.
.9c82	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c85	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c88	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c8b	80 2c		bra $9cb9			bra 	SubstringMain
.9c8d					Unary_Right:
.9c8d	fa		plx				plx
.9c8e	18		clc				clc 								; only one parameter
.9c8f	20 f4 9c	jsr $9cf4			jsr 	SubstringInitial 			; set up.
.9c92	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c95	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c98	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9c9b	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9c9e	b0 02		bcs $9ca2			bcs 	_URNotUnderflow
.9ca0	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ca2					_URNotUnderFlow:
.9ca2	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ca5	80 12		bra $9cb9			bra 	SubStringMain
.9ca7					Unary_Mid:
.9ca7	fa		plx				plx
.9ca8	38		sec				sec 								; two parameters
.9ca9	20 f4 9c	jsr $9cf4			jsr 	SubstringInitial 			; set up.
.9cac	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9caf	f0 05		beq $9cb6			beq 	_UMError
.9cb1	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cb4	80 03		bra $9cb9			bra 	SubStringMain
.9cb6					_UMError:
.9cb6	4c 95 9f	jmp $9f95			jmp 	ArgumentError
.9cb9					SubStringMain:
.9cb9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cbc	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cbf	b0 2d		bcs $9cee			bcs 	_SSMNull 					; if so, return an empty string.
.9cc1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cc4	f0 28		beq $9cee			beq 	_SSMNull 					; return empty string.
.9cc6	18		clc				clc 								; add the offset +1 to the address and
.9cc7	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cca	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ccd	85 36		sta $36				sta 	zTemp0
.9ccf	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cd2	69 00		adc #$00			adc 	#0
.9cd4	85 37		sta $37				sta 	zTemp0+1
.9cd6					_SSMNoCarry:
.9cd6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cd9	20 51 a3	jsr $a351			jsr 	StringTempAllocate 			; allocate that many characters
.9cdc	5a		phy				phy 								; save Y
.9cdd	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cdf					_SSMCopy:
.9cdf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9ce1	f0 09		beq $9cec			beq 	_SSMEString 				; no more to copy
.9ce3	20 8f a3	jsr $a38f			jsr 	StringTempWrite 			; and write it out.
.9ce6	c8		iny				iny
.9ce7	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9cea	d0 f3		bne $9cdf			bne 	_SSMCopy
.9cec					_SSMEString:
.9cec	7a		ply				ply
.9ced					_SSMExit:
.9ced	60		rts				rts
.9cee					_SSMNull:
.9cee	a9 00		lda #$00			lda 	#0
.9cf0	20 51 a3	jsr $a351			jsr 	StringTempAllocate
.9cf3	60		rts				rts
.9cf4					SubstringInitial:
.9cf4	da		phx				phx 								; save initial stack position
.9cf5	08		php				php 								; save carry on stack indicating 2 parameters
.9cf6	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get a string
.9cf9	5a		phy				phy 								; calculate length to exponent.
.9cfa	a0 ff		ldy #$ff			ldy 	#$FF
.9cfc					_SIFindLength:
.9cfc	c8		iny				iny
.9cfd	b1 36		lda ($36),y			lda 	(zTemp0),y
.9cff	d0 fb		bne $9cfc			bne 	_SIFindLength
.9d01	98		tya				tya
.9d02	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d05	7a		ply				ply
.9d06	e8		inx				inx
.9d07	20 28 8d	jsr $8d28			jsr 	CheckComma 					; comma next
.9d0a	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get next parameter
.9d0d	28		plp				plp 								; is it the last parameter ?
.9d0e	90 07		bcc $9d17			bcc 	_SSIExit 					; if so, exit.
.9d10	e8		inx				inx
.9d11	20 28 8d	jsr $8d28			jsr 	CheckComma 					; comma next
.9d14	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get last parameter
.9d17					_SSIExit:
.9d17	fa		plx				plx
.9d18	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; check closing bracket
.9d1b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d1c					EvaluateValue:
.9d1c	48		pha				pha
.9d1d	20 e8 92	jsr $92e8			jsr		EvaluateExpression 			; expression
.9d20	20 06 96	jsr $9606			jsr 	Dereference					; derefernce it
.9d23	68		pla				pla
.9d24	60		rts				rts
.9d25					EvaluateNumber:
.9d25	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get a value
.9d28	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d2b	29 10		and #$10			and 	#NSBIsString
.9d2d	d0 16		bne $9d45			bne 	HelperTypeError
.9d2f	60		rts				rts
.9d30					EvaluateString:
.9d30	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get a value
.9d33	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d36	29 10		and #$10			and 	#NSBIsString
.9d38	f0 0b		beq $9d45			beq 	HelperTypeError
.9d3a					CopyAddressToTemp0:
.9d3a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d3d	85 36		sta $36				sta 	zTemp0
.9d3f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d42	85 37		sta $37				sta 	zTemp0+1
.9d44	60		rts				rts
.9d45					HelperTypeError:
.9d45	4c 90 9f	jmp $9f90			jmp 	TypeError
.9d48					EvaluateInteger:
.9d48	20 25 9d	jsr $9d25			jsr 	EvaluateNumber
.9d4b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d4e	d0 0a		bne $9d5a			bne 	HelperValueError 			; if not, it's a float.
.9d50	60		rts				rts
.9d51					EvaluateUnsignedInteger:
.9d51	20 48 9d	jsr $9d48			jsr 	EvaluateInteger 			; check integer is +ve
.9d54	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d57	30 01		bmi $9d5a			bmi 	HelperValueError
.9d59	60		rts				rts
.9d5a					HelperValueError:
.9d5a	4c 95 9f	jmp $9f95			jmp 	ArgumentError
.9d5d					Evaluate16BitInteger:
.9d5d	20 51 9d	jsr $9d51			jsr	 	EvaluateUnsignedInteger		; get integer
.9d60	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d63	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d66	d0 f2		bne $9d5a			bne 	HelperValueError
.9d68	60		rts				rts
.9d69					Evaluate16BitIntegerSigned:
.9d69	20 48 9d	jsr $9d48			jsr	 	EvaluateInteger				; get integer
.9d6c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d6f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d72	d0 e6		bne $9d5a			bne 	HelperValueError
.9d74	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d77	10 03		bpl $9d7c			bpl 	_EISNotSigned
.9d79	20 b1 9d	jsr $9db1			jsr 	NSMNegateMantissa
.9d7c					_EISNotSigned:
.9d7c	60		rts				rts
.9d7d					Evaluate8BitInteger:
.9d7d	20 51 9d	jsr $9d51			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d80	d0 d8		bne $9d5a			bne 	HelperValueError
.9d82	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d85	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d88	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d8b	d0 cd		bne $9d5a			bne 	HelperValueError
.9d8d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d91					Multiply8x8:
.9d91	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d92	85 36		sta $36			  	sta 	zTemp0
.9d94	86 37		stx $37				stx 	zTemp0+1
.9d96	a9 00		lda #$00			lda 	#0
.9d98	a2 08		ldx #$08			ldx 	#8
.9d9a					_M88Loop:
.9d9a	90 03		bcc $9d9f			bcc 	_M88NoAdd
.9d9c	18		clc				clc
.9d9d	65 37		adc $37				adc 	zTemp0+1
.9d9f					_M88NoAdd:
.9d9f	6a		ror a				ror 	a
.9da0	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9da2	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9da3	d0 f5		bne $9d9a			bne 	_M88Loop
.9da5	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9da7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9da8					NSMNegate:
.9da8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dab	49 80		eor #$80			eor 	#NSBIsNegative
.9dad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9db0	60		rts				rts
.9db1					NSMNegateMantissa:
.9db1	38		sec				sec
.9db2	a9 00		lda #$00			lda 	#0
.9db4	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9db7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dba	a9 00		lda #$00			lda 	#0
.9dbc	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dbf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dc2	a9 00		lda #$00			lda 	#0
.9dc4	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dc7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dca	a9 00		lda #$00			lda 	#0
.9dcc	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dcf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd2	60		rts				rts
.9dd3					NSMShiftUpTwo:
.9dd3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dd9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ddc	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ddf	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9de2	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9de5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9de8	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9deb	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9dee	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9df1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df4	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9df7	60		rts				rts
.9df8					NSMSetZeroMantissaOnly:
.9df8	a9 00		lda #$00			lda 	#0
.9dfa	80 08		bra $9e04			bra 	NSMSetMantissa
.9dfc					NSMSetZero:
.9dfc	a9 00		lda #$00			lda 	#0
.9dfe					NSMSetByte:
.9dfe	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e01	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e04					NSMSetMantissa:
.9e04	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e07	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e0a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e0d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e10	60		rts				rts
.9e11					NSMShiftLeft:
.9e11	18		clc				clc
.9e12					NSMRotateLeft:
.9e12	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e15	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e18	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e1b	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e1e	60		rts				rts
.9e1f					NSMShiftRight:
.9e1f	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e22	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e25	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e28	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e2b	60		rts				rts
.9e2c					NSMIsZero:
.9e2c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e2f	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e32	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e35	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e39					Assemble_ora:
.9e39	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e3c	01					.byte $01
.9e3d					Assemble_and:
.9e3d	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e40	21					.byte $21
.9e41					Assemble_eor:
.9e41	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e44	41					.byte $41
.9e45					Assemble_adc:
.9e45	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e48	61					.byte $61
.9e49					Assemble_sta:
.9e49	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e4c	81					.byte $81
.9e4d					Assemble_lda:
.9e4d	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e50	a1					.byte $a1
.9e51					Assemble_cmp:
.9e51	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e54	c1					.byte $c1
.9e55					Assemble_sbc:
.9e55	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e58	e1					.byte $e1
.9e59					Assemble_asl:
.9e59	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e5c	02					.byte $02
>9e5d	75					.byte $75
.9e5e					Assemble_rol:
.9e5e	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e61	22					.byte $22
>9e62	75					.byte $75
.9e63					Assemble_lsr:
.9e63	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e66	42					.byte $42
>9e67	75					.byte $75
.9e68					Assemble_ror:
.9e68	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e6b	62					.byte $62
>9e6c	75					.byte $75
.9e6d					Assemble_stx:
.9e6d	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e70	82					.byte $82
>9e71	50					.byte $50
.9e72					Assemble_ldx:
.9e72	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e75	a2					.byte $a2
>9e76	d0					.byte $d0
.9e77					Assemble_dec:
.9e77	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e7a	c2					.byte $c2
>9e7b	55					.byte $55
.9e7c					Assemble_inc:
.9e7c	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e7f	e2					.byte $e2
>9e80	55					.byte $55
.9e81					Assemble_stz:
.9e81	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e84	60					.byte $60
>9e85	44					.byte $44
.9e86					Assemble_bit:
.9e86	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e89	20					.byte $20
>9e8a	55					.byte $55
.9e8b					Assemble_sty:
.9e8b	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e8e	80					.byte $80
>9e8f	54					.byte $54
.9e90					Assemble_ldy:
.9e90	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e93	a0					.byte $a0
>9e94	d5					.byte $d5
.9e95					Assemble_cpy:
.9e95	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e98	c0					.byte $c0
>9e99	d4					.byte $d4
.9e9a					Assemble_cpx:
.9e9a	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e9d	e0					.byte $e0
>9e9e	d0					.byte $d0
.9e9f					Assemble_tsb:
.9e9f	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ea2	00					.byte $00
>9ea3	50					.byte $50
.9ea4					Assemble_trb:
.9ea4	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ea7	10					.byte $10
>9ea8	50					.byte $50
.9ea9					Assemble_jsr:
.9ea9	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9eac	14					.byte $14
>9ead	10					.byte $10
.9eae					Assemble_jmp:
.9eae	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9eb1	40					.byte $40
>9eb2	10					.byte $10
.9eb3					Assemble_bpl:
.9eb3	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9eb6	10					.byte $10
.9eb7					Assemble_bmi:
.9eb7	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9eba	30					.byte $30
.9ebb					Assemble_bvc:
.9ebb	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ebe	50					.byte $50
.9ebf					Assemble_bvs:
.9ebf	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ec2	70					.byte $70
.9ec3					Assemble_bcc:
.9ec3	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ec6	90					.byte $90
.9ec7					Assemble_bcs:
.9ec7	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9eca	b0					.byte $b0
.9ecb					Assemble_bne:
.9ecb	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ece	d0					.byte $d0
.9ecf					Assemble_beq:
.9ecf	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ed2	f0					.byte $f0
.9ed3					Assemble_bra:
.9ed3	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ed6	80					.byte $80
.9ed7					Assemble_brk:
.9ed7	20 12 81	jsr $8112		jsr	AssembleGroup4
>9eda	00					.byte $00
.9edb					Assemble_php:
.9edb	20 12 81	jsr $8112		jsr	AssembleGroup4
>9ede	08					.byte $08
.9edf					Assemble_clc:
.9edf	20 12 81	jsr $8112		jsr	AssembleGroup4
>9ee2	18					.byte $18
.9ee3					Assemble_plp:
.9ee3	20 12 81	jsr $8112		jsr	AssembleGroup4
>9ee6	28					.byte $28
.9ee7					Assemble_sec:
.9ee7	20 12 81	jsr $8112		jsr	AssembleGroup4
>9eea	38					.byte $38
.9eeb					Assemble_rti:
.9eeb	20 12 81	jsr $8112		jsr	AssembleGroup4
>9eee	40					.byte $40
.9eef					Assemble_pha:
.9eef	20 12 81	jsr $8112		jsr	AssembleGroup4
>9ef2	48					.byte $48
.9ef3					Assemble_cli:
.9ef3	20 12 81	jsr $8112		jsr	AssembleGroup4
>9ef6	58					.byte $58
.9ef7					Assemble_phy:
.9ef7	20 12 81	jsr $8112		jsr	AssembleGroup4
>9efa	5a					.byte $5a
.9efb					Assemble_rts:
.9efb	20 12 81	jsr $8112		jsr	AssembleGroup4
>9efe	60					.byte $60
.9eff					Assemble_pla:
.9eff	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f02	68					.byte $68
.9f03					Assemble_sei:
.9f03	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f06	78					.byte $78
.9f07					Assemble_ply:
.9f07	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f0a	7a					.byte $7a
.9f0b					Assemble_dey:
.9f0b	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f0e	88					.byte $88
.9f0f					Assemble_txa:
.9f0f	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f12	8a					.byte $8a
.9f13					Assemble_tya:
.9f13	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f16	98					.byte $98
.9f17					Assemble_txs:
.9f17	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f1a	9a					.byte $9a
.9f1b					Assemble_tay:
.9f1b	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f1e	a8					.byte $a8
.9f1f					Assemble_tax:
.9f1f	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f22	aa					.byte $aa
.9f23					Assemble_clv:
.9f23	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f26	b8					.byte $b8
.9f27					Assemble_tsx:
.9f27	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f2a	ba					.byte $ba
.9f2b					Assemble_iny:
.9f2b	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f2e	c8					.byte $c8
.9f2f					Assemble_dex:
.9f2f	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f32	ca					.byte $ca
.9f33					Assemble_cld:
.9f33	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f36	d8					.byte $d8
.9f37					Assemble_phx:
.9f37	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f3a	da					.byte $da
.9f3b					Assemble_stp:
.9f3b	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f3e	db					.byte $db
.9f3f					Assemble_inx:
.9f3f	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f42	e8					.byte $e8
.9f43					Assemble_nop:
.9f43	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f46	ea					.byte $ea
.9f47					Assemble_sed:
.9f47	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f4a	f8					.byte $f8
.9f4b					Assemble_plx:
.9f4b	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f4e	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f4f					DecimalScalarTable:
>9f4f	66 66 66 66				.dword $66666666 ; 0.1
>9f53	de					.byte $de
>9f54	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f58	db					.byte $db
>9f59	4c 37 89 41				.dword $4189374c ; 0.001
>9f5d	d8					.byte $d8
>9f5e	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f62	d4					.byte $d4
>9f63	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f67	d1					.byte $d1
>9f68	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f6c	ce					.byte $ce
>9f6d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f71	ca					.byte $ca
>9f72	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f76	c7					.byte $c7
>9f77	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f7b	c4					.byte $c4
>9f7c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f80	c0					.byte $c0
>9f81	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f85	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f86					SyntaxError:
.9f86	a9 02		lda #$02		lda	#2
.9f88	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f8b					RangeError:
.9f8b	a9 04		lda #$04		lda	#4
.9f8d	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f90					TypeError:
.9f90	a9 05		lda #$05		lda	#5
.9f92	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f95					ArgumentError:
.9f95	a9 07		lda #$07		lda	#7
.9f97	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f9a					NotDoneError:
.9f9a	a9 0c		lda #$0c		lda	#12
.9f9c	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f9f					ErrorText:
>9f9f	42 72 65 61 6b 00			.text	"Break",0
>9fa5	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fad	72 72 6f 72 00
>9fb2	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fba	20 62 79 20 7a 65 72 6f 00
>9fc3	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fcb	61 6e 67 65 00
>9fd0	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fd8	6d 61 74 63 68 00
>9fde	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9fe6	65 6d 6f 72 79 00
>9fec	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ff4	61 72 67 75 6d 65 6e 74 00
>9ffd	53 74 6f 70 00				.text	"Stop",0
>a002	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a00a	6f 6f 20 6c 6f 6e 67 00
>a012	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a01a	6e 20 66 61 69 6c 65 64 00
>a023	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a02b	61 74 61 00
>a02f	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a037	65 6e 74 65 64 00
>a03d	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a045	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a051	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a059	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a066	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a06e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a07b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a083	68 6f 75 74 20 57 68 69 6c 65 00
>a08e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a096	68 6f 75 74 20 46 6f 72 00
>a09f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0a7	61 63 6b 20 66 75 6c 6c 00
>a0b0	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0b8	75 63 74 75 72 65 00
>a0bf	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0c7	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0d4	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0dc	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0ea	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0f2	7a 65 00
>a0f5	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a0fd	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a105	42 75 69 6c 74 20 4d 6f			.text "Built Monday 14-Nov-2022. Build 2997."
>a10d	6e 64 61 79 20 31 34 2d 4e 6f 76 2d 32 30 32 32
>a11d	2e 20 42 75 69 6c 64 20 32 39 39 37 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a12a					MemoryDeleteLine:
.a12a	20 49 a1	jsr $a149			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a12d	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a12f	a8		tay				tay
.a130					_MDDLLoop:
.a130	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a132	92 30		sta ($30)			sta 	(codePtr)
.a134	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a136	c5 3a		cmp $3a				cmp 	zTemp2
.a138	d0 07		bne $a141			bne 	_MDLDLNext
.a13a	a5 31		lda $31				lda 	codePtr+1
.a13c	c5 3b		cmp $3b				cmp 	zTemp2+1
.a13e	d0 01		bne $a141			bne 	_MDLDLNext
.a140					_MDDLExit:
.a140	60		rts				rts
.a141					_MDLDLNext:
.a141	e6 30		inc $30				inc 	codePtr						; next byte
.a143	d0 eb		bne $a130			bne 	_MDDLLoop
.a145	e6 31		inc $31				inc 	codePtr+1
.a147	80 e7		bra $a130			bra 	_MDDLLoop
.a149					IMemoryFindEnd:
.a149	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a14b	85 3a		sta $3a				sta 	0+zTemp2
.a14d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a14f	85 3b		sta $3b				sta 	1+zTemp2
.a151					_MDLFELoop:
.a151	b2 3a		lda ($3a)			lda 	(zTemp2)
.a153	f0 0b		beq $a160			beq 	_MDLFEExit
.a155	18		clc				clc
.a156	65 3a		adc $3a				adc 	zTemp2
.a158	85 3a		sta $3a				sta 	zTemp2
.a15a	90 f5		bcc $a151			bcc 	_MDLFELoop
.a15c	e6 3b		inc $3b				inc 	zTemp2+1
.a15e	80 f1		bra $a151			bra 	_MDLFELoop
.a160					_MDLFEExit:
.a160	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a161					MemoryInsertLine:
.a161	08		php				php
.a162	20 49 a1	jsr $a149			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a165	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a167	1a		inc a				inc 	a
.a168	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a16a	b0 36		bcs $a1a2			bcs 	_MDLIError
.a16c	28		plp				plp
.a16d	90 08		bcc $a177			bcc 	_MDLIFound
.a16f	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a171	85 30		sta $30				sta 	codePtr
.a173	a5 3b		lda $3b				lda 	zTemp2+1
.a175	85 31		sta $31				sta 	codePtr+1
.a177					_MDLIFound:
.a177	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a17a	a8		tay				tay
.a17b					_MDLIInsert:
.a17b	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a17d	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a17f	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a181	c5 3a		cmp $3a				cmp 	zTemp2
.a183	d0 06		bne $a18b			bne 	_MDLINext
.a185	a5 31		lda $31				lda 	codePtr+1
.a187	c5 3b		cmp $3b				cmp 	zTemp2+1
.a189	f0 0a		beq $a195			beq 	_MDLIHaveSpace
.a18b					_MDLINext:
.a18b	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a18d	d0 02		bne $a191			bne 	_MDLINoBorrow
.a18f	c6 3b		dec $3b				dec 	zTemp2+1
.a191					_MDLINoBorrow:
.a191	c6 3a		dec $3a				dec 	zTemp2
.a193	80 e6		bra $a17b			bra 	_MDLIInsert
.a195					_MDLIHaveSpace:
.a195	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.a198	88		dey				dey 								; from offset-1 to 0
.a199					_MDLICopy:
.a199	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.a19c	91 30		sta ($30),y			sta 	(codePtr),y
.a19e	88		dey				dey
.a19f	10 f8		bpl $a199			bpl 	_MDLICopy
.a1a1	60		rts				rts
.a1a2					_MDLIError:
.a1a2	a9 06		lda #$06		lda	#6
.a1a4	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.a1a7					MDLAppendLine:
.a1a7	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1a9	85 36		sta $36				sta 	zTemp0
.a1ab	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ad	85 38		sta $38				sta 	0+zTemp1
.a1af	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1b1	85 39		sta $39				sta 	1+zTemp1
.a1b3	b2 38		lda ($38)			lda 	(zTemp1)
.a1b5	d0 0a		bne $a1c1			bne 	_MDLANoInitialise
.a1b7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1b9	8d 2a 06	sta $062a			sta 	0+AppendPointer
.a1bc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1be	8d 2b 06	sta $062b			sta 	1+AppendPointer
.a1c1					_MDLANoInitialise:
.a1c1	18		clc				clc
.a1c2	ad 2a 06	lda $062a			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1c5	85 38		sta $38				sta 	zTemp1
.a1c7	72 36		adc ($36)			adc 	(zTemp0)
.a1c9	8d 2a 06	sta $062a			sta 	AppendPointer
.a1cc	ad 2b 06	lda $062b			lda 	AppendPointer+1
.a1cf	85 39		sta $39				sta 	zTemp1+1
.a1d1	69 00		adc #$00			adc 	#0
.a1d3	8d 2b 06	sta $062b			sta 	AppendPointer+1
.a1d6	a0 00		ldy #$00			ldy 	#0
.a1d8					_MDLACopy:
.a1d8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1da	91 38		sta ($38),y			sta 	(zTemp1),y
.a1dc	c8		iny				iny
.a1dd	98		tya				tya
.a1de	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1e0	d0 f6		bne $a1d8			bne 	_MDLACopy
.a1e2	a9 00		lda #$00			lda 	#0 							; end of program.
.a1e4	91 38		sta ($38),y			sta 	(zTemp1),y
.a1e6	60		rts				rts
.062a					AppendPointer:
>062a							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1e7					MemoryNew:
.a1e7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1e9	85 30		sta $30				sta 	codePtr
.a1eb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1ed	85 31		sta $31				sta 	codePtr+1
.a1ef	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1f1	92 30		sta ($30)			sta 	(codePtr)
.a1f3	60		rts				rts
.a1f4					MemoryInline:
.a1f4	98		tya				tya 								; put address into stack,x
.a1f5	18		clc				clc
.a1f6	65 30		adc $30				adc 	codePtr
.a1f8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1fb	a5 31		lda $31				lda 	codePtr+1
.a1fd	69 00		adc #$00			adc 	#0
.a1ff	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a202	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a205	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a208	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a209					MemorySearch:
.a209	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a20b	86 37		stx $37				stx 	zTemp0+1
.a20d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a20f	85 30		sta $30				sta 	codePtr
.a211	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a213	85 31		sta $31				sta 	codePtr+1
.a215					_MTAXLoop:
.a215	b2 30		lda ($30)			lda 	(codePtr)
.a217	18		clc				clc
.a218	f0 21		beq $a23b			beq 	_MTAXExit 					; reached end, exit with CC.
.a21a	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a21c	b1 30		lda ($30),y			lda 	(codePtr),y
.a21e	38		sec				sec
.a21f	e5 36		sbc $36				sbc 	zTemp0
.a221	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a223	c8		iny				iny 								; do the MSB
.a224	b1 30		lda ($30),y			lda 	(codePtr),y
.a226	e5 37		sbc $37				sbc 	zTemp0+1
.a228	05 38		ora $38				ora 	zTemp1
.a22a	f0 0f		beq $a23b			beq 	_MTAXExit	 				; found
.a22c	b0 0d		bcs $a23b			bcs 	_MTAXExit 					; current < required exit
.a22e	18		clc				clc
.a22f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a231	65 30		adc $30				adc 	codePtr
.a233	85 30		sta $30				sta 	codePtr
.a235	90 02		bcc $a239			bcc 	_CREExit
.a237	e6 31		inc $31				inc 	codePtr+1
.a239					_CREExit:
.a239	80 da		bra $a215			bra 	_MTAXLoop
.a23b					_MTAXExit:
.a23b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a23c					StackPushByte:
.a23c	48		pha				pha 								; save byte
.a23d	a5 34		lda $34				lda 	BasicStack
.a23f	d0 09		bne $a24a			bne 	_SPBNoBorrow
.a241	c6 35		dec $35				dec 	BasicStack+1
.a243	48		pha				pha
.a244	a5 35		lda $35				lda 	BasicStack+1
.a246	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a248	90 06		bcc $a250			bcc 	_SPBMemory
.a24a					_SPBNoBorrow:
.a24a	c6 34		dec $34				dec 	BasicStack
.a24c	68		pla				pla 								; get back and write
.a24d	92 34		sta ($34)			sta 	(BasicStack)
.a24f	60		rts				rts
.a250					_SPBMemory:
.a250	a9 12		lda #$12		lda	#18
.a252	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.a255					StackPopByte:
.a255	b2 34		lda ($34)			lda 	(BasicStack)
.a257	e6 34		inc $34				inc 	BasicStack
.a259	d0 02		bne $a25d			bne 	_SPBNoCarry
.a25b	e6 35		inc $35				inc 	BasicStack+1
.a25d					_SPBNoCarry:
.a25d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a25e					StackOpen:
.a25e	48		pha				pha 								; save frame byte
.a25f	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a261	0a		asl a				asl 	a 							; claim twice this for storage
.a262	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a264	38		sec				sec 								; so basically subtracting from
.a265	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a267	85 34		sta $34				sta 	basicStack
.a269	b0 08		bcs $a273			bcs 	_SONoBorrow
.a26b	c6 35		dec $35				dec 	basicStack+1
.a26d	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a26f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a271	90 04		bcc $a277			bcc 	_SOMemory
.a273					_SONoBorrow:
.a273	68		pla				pla 								; get marker back and write at TOS
.a274	92 34		sta ($34)			sta 	(basicStack)
.a276	60		rts				rts
.a277					_SOMemory:
.a277	a9 12		lda #$12		lda	#18
.a279	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.a27c					StackClose:
.a27c	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a27e	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a280	0a		asl a				asl 	a 							; claim twice this.
.a281	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a283	85 34		sta $34				sta 	basicStack
.a285	90 02		bcc $a289			bcc 	_SCExit
.a287	e6 35		inc $35				inc 	basicStack+1
.a289					_SCExit:
.a289	60		rts				rts
.a28a					StackCheckFrame:
.a28a	48		pha				pha
.a28b					_StackRemoveLocals:
.a28b	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a28d	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a28f	b0 05		bcs $a296			bcs 	_SCNoLocal
.a291	20 05 88	jsr $8805			jsr 	LocalPopValue
.a294	80 f5		bra $a28b			bra 	_StackRemoveLocals
.a296					_SCNoLocal:
.a296	68		pla				pla
.a297	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a299	29 f0		and #$f0			and 	#$F0 						; check type bits
.a29b	d0 01		bne $a29e			bne 	_SCFError 					; different, we have structures mixed up
.a29d	60		rts				rts
.a29e					_SCFError:
.a29e	8a		txa				txa 								; report error X
.a29f	4c 39 8d	jmp $8d39			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a2a2					STKSaveCodePosition:
.a2a2	5a		phy				phy
.a2a3	98		tya				tya 								; save Y
.a2a4	a0 05		ldy #$05			ldy 	#5
.a2a6	91 34		sta ($34),y			sta 	(basicStack),y
.a2a8	88		dey				dey 								; save Code Pointer
.a2a9					_STKSaveLoop:
.a2a9	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a2ac	91 34		sta ($34),y			sta 	(basicStack),y
.a2ae	88		dey				dey
.a2af	d0 f8		bne $a2a9			bne 	_STKSaveLoop
.a2b1	7a		ply				ply
.a2b2	60		rts				rts
.a2b3					STKLoadCodePosition:
.a2b3	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a2b5					_STKLoadLoop:
.a2b5	b1 34		lda ($34),y			lda 	(basicStack),y
.a2b7	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a2ba	c8		iny				iny
.a2bb	c0 05		cpy #$05			cpy 	#5
.a2bd	d0 f6		bne $a2b5			bne 	_STKLoadLoop
.a2bf	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a2c1	a8		tay				tay
.a2c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a2c3					StackReset:
.a2c3	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a2c5	85 34		sta $34				sta 	0+basicStack
.a2c7	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a2c9	85 35		sta $35				sta 	1+basicStack
.a2cb	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a2cd	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a2cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a2d0					StringConcrete:
.a2d0	5a		phy				phy 								; save position on stack
.a2d1	20 c5 99	jsr $99c5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a2d4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a2d7	85 38		sta $38				sta 	zTemp1
.a2d9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2dc	85 39		sta $39				sta 	zTemp1+1
.a2de	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a2e0					_SALength:
.a2e0	c8		iny				iny
.a2e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.a2e3	d0 fb		bne $a2e0			bne 	_SALength
.a2e5	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a2e7	b0 3f		bcs $a328			bcs 	_SALengthError
.a2e9	98		tya				tya 				 				; length of the new string
.a2ea	18		clc				clc
.a2eb	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a2ed	90 02		bcc $a2f1			bcc 	_SAHaveLength
.a2ef	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a2f1					_SAHaveLength:
.a2f1	48		pha				pha 								; save length.
.a2f2	38		sec				sec
.a2f3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a2f5	6d 8e 04	adc $048e			adc 	StringMemory
.a2f8	8d 8e 04	sta $048e			sta 	StringMemory
.a2fb	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a2fd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a300	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a302	6d 8f 04	adc $048f			adc 	StringMemory+1
.a305	8d 8f 04	sta $048f			sta 	StringMemory+1
.a308	85 3b		sta $3b				sta 	zTemp2+1
.a30a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a30d	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a30e	38		sec				sec
.a30f	e9 03		sbc #$03			sbc 	#3
.a311	92 3a		sta ($3a)			sta 	(zTemp2)
.a313	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a315	a0 01		ldy #$01			ldy 	#1
.a317	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a319					_SACopyNewString:
.a319	a0 00		ldy #$00			ldy 	#0
.a31b					_SACopyNSLoop:
.a31b	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a31d	c8		iny				iny 								; write two on in string storage
.a31e	c8		iny				iny
.a31f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a321	88		dey				dey 								; this makes it one one.
.a322	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a324	d0 f5		bne $a31b			bne 	_SACopyNSLoop
.a326	7a		ply				ply
.a327	60		rts				rts
.a328					_SALengthError:
.a328	a9 09		lda #$09		lda	#9
.a32a	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a32d					StringSystemInitialise:
.a32d	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a32f	8d 8e 04	sta $048e			sta 	0+StringMemory
.a332	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a334	8d 8f 04	sta $048f			sta 	1+StringMemory
.a337	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a33a	60		rts				rts
.a33b					StringSpaceInitialise:
.a33b	20 c5 99	jsr $99c5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a33e	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a340	8d 90 04	sta $0490			sta 	StringInitialised
.a343	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a346	8d 91 04	sta $0491			sta 	StringTempPointer
.a349	ad 8f 04	lda $048f			lda 	StringMemory+1
.a34c	3a		dec a				dec 	a
.a34d	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a350	60		rts				rts
.a351					StringTempAllocate:
.a351	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a353	b0 35		bcs $a38a			bcs 	_STALength
.a355	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a358	30 05		bmi $a35f			bmi 	_STAAllocate
.a35a	48		pha				pha 								; save value to subtract.
.a35b	20 3b a3	jsr $a33b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a35e	68		pla				pla 								; restore it
.a35f					_STAAllocate:
.a35f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a361	18		clc				clc  								; deliberate allows one more
.a362	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a365	8d 91 04	sta $0491			sta 	StringTempPointer
.a368	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a36b	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a36d	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a370	69 ff		adc #$ff			adc 	#$FF
.a372	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a375	85 3d		sta $3d				sta 	zsTemp+1
.a377	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a37a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a37d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a380	a9 10		lda #$10			lda 	#NSTString
.a382	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a385	a9 00		lda #$00			lda 	#0 							; clear the target string
.a387	92 3c		sta ($3c)			sta 	(zsTemp)
.a389	60		rts				rts
.a38a					_STALength:
.a38a	a9 09		lda #$09		lda	#9
.a38c	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.a38f					StringTempWrite:
.a38f	48		pha				pha
.a390	92 3c		sta ($3c)			sta 	(zsTemp)
.a392	e6 3c		inc $3c				inc 	zsTemp
.a394	d0 02		bne $a398			bne 	_STWNoCarry
.a396	e6 3d		inc $3d				inc 	zsTemp+1
.a398					_STWNoCarry:
.a398	a9 00		lda #$00			lda 	#0
.a39a	92 3c		sta ($3c)			sta 	(zsTemp)
.a39c	68		pla				pla
.a39d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
.a39e					UnaryEvent:
.a39e	fa		plx				plx
.a39f	20 12 a7	jsr $a712			jsr 	TimerToStackX 				; timer in +0
.a3a2	e8		inx				inx  								; put reference into +1
.a3a3	20 c2 97	jsr $97c2			jsr 	EvaluateTerm
.a3a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a3a9	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a3ab	d0 57		bne $a404			bne 	_UEType
.a3ad	e8		inx				inx 								; put the step in +2
.a3ae	20 28 8d	jsr $8d28			jsr 	CheckComma
.a3b1	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.a3b4	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.a3b7	ca		dex				dex
.a3b8	ca		dex				dex
.a3b9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a3bc	85 36		sta $36				sta 	zTemp0
.a3be	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3c1	85 37		sta $37				sta 	zTemp0+1
.a3c3	5a		phy				phy
.a3c4	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a3c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3c8	30 36		bmi $a400			bmi 	_UEFalse 					; exit if signed.
.a3ca	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a3cc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3cf	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a3d1	c8		iny				iny
.a3d2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3d5	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3d7	c8		iny				iny
.a3d8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3db	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3dd	90 21		bcc $a400			bcc 	_UEFalse 					; no, return FALSE.
.a3df	18		clc				clc
.a3e0	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a3e2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3e5	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a3e8	91 36		sta ($36),y			sta 	(zTemp0),y
.a3ea	c8		iny				iny
.a3eb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3ee	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a3f1	91 36		sta ($36),y			sta 	(zTemp0),y
.a3f3	c8		iny				iny
.a3f4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3f7	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a3fa	91 36		sta ($36),y			sta 	(zTemp0),y
.a3fc	7a		ply				ply
.a3fd	4c a6 8d	jmp $8da6			jmp 	ReturnTrue
.a400					_UEFalse:
.a400	7a		ply				ply 								; restore Y
.a401	4c b2 8d	jmp $8db2			jmp 	ReturnFalse 				; and return False
.a404					_UEType:
.a404	4c 90 9f	jmp $9f90			jmp 	TypeError
.a407					RectangleCommand:
.a407	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a409	80 02		bra $a40d			bra 	ShapeDrawCmd
.a40b					CircleCommand:
.a40b	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a40d					ShapeDrawCmd:
.a40d	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a410					ShapeDraw:
.a410	0d 2d 06	ora $062d			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a413	4c 8f a4	jmp $a48f			jmp 	ExecuteGraphicCommand	 	; and complete
.a416					SpriteCommand:
.a416	a2 00		ldx #$00			ldx 	#0
.a418	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get image number.
.a41b	5a		phy				phy
.a41c	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a41e	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a421	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a423	b0 0d		bcs $a432			bcs 	_SCRange
.a425	a0 ff		ldy #$ff			ldy 	#255
.a427	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a42a	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a42c	7a		ply				ply
.a42d	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a430	80 5d		bra $a48f			bra 	ExecuteGraphicCommand
.a432					_SCRange:
.a432	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.a435					ImageCommand:
.a435	a2 00		ldx #$00			ldx 	#0
.a437	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get image number.
.a43a	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a43d					ImageRunDraw:
.a43d	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a43f	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a442	ad 33 06	lda $0633			lda 	gxDrawScale
.a445	0a		asl a				asl 	a
.a446	0a		asl a				asl 	a
.a447	0a		asl a				asl 	a
.a448	a8		tay				tay
.a449	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a44b	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a44e	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a451	60		rts				rts
.a452					TextCommand:
.a452	a2 00		ldx #$00			ldx 	#0
.a454	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get text
.a457	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a45a					TextRunDraw:
.a45a	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a45c	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a45f	a0 00		ldy #$00			ldy 	#0
.a461					_IRDLoop:
.a461	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a464	85 37		sta $37				sta 	zTemp0+1
.a466	ad 08 04	lda $0408			lda 	NSMantissa0
.a469	85 36		sta $36				sta 	zTemp0
.a46b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a46d	f0 13		beq $a482			beq 	_IRDExit
.a46f	5a		phy				phy									; save string pos
.a470	48		pha				pha 								; save char
.a471	ad 33 06	lda $0633			lda 	gxDrawScale 				; get scale
.a474	0a		asl a				asl 	a
.a475	0a		asl a				asl 	a
.a476	0a		asl a				asl 	a
.a477	a8		tay				tay
.a478	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a47a	fa		plx				plx 								; char to draw
.a47b	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a47e	7a		ply				ply 								; restore string pos
.a47f	c8		iny				iny
.a480	90 df		bcc $a461			bcc 	_IRDLoop 					; go back if no error.
.a482					_IRDExit:
.a482	60		rts				rts
.a483					PlotCommand:
.a483	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a485	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a488	80 05		bra $a48f			bra 	ExecuteGraphicCommand
.a48a					LineCommand:
.a48a	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a48c	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a48f					ExecuteGraphicCommand:
.a48f	0d 2c 06	ora $062c			ora 	gxCommandID 				; make a full command
.a492	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw 				; draw it and exit
.a495	b0 01		bcs $a498			bcs 	_EGCError
.a497	60		rts				rts
.a498					_EGCError:
.a498	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.a49b					RunGraphicsCommand:
.a49b	8d 2c 06	sta $062c			sta 	gxCommandID					; save TODO graphics command.
.a49e	68		pla				pla 								; pop handler address
.a49f	fa		plx				plx
.a4a0	1a		inc a				inc 	a
.a4a1	d0 01		bne $a4a4			bne 	_RGINoCarry
.a4a3	e8		inx				inx
.a4a4					_RGINoCarry:
.a4a4	8d 31 06	sta $0631			sta 	GXHandler
.a4a7	8e 32 06	stx $0632			stx 	GXHandler+1
.a4aa					_RGICommandLoop:
.a4aa	b1 30		lda ($30),y			lda 	(codePtr),y
.a4ac	c8		iny				iny
.a4ad	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a4af	f0 53		beq $a504			beq 	_RGI_To
.a4b1	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a4b3	f0 55		beq $a50a			beq 	_RGI_Here
.a4b5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a4b7	f0 3d		beq $a4f6			beq 	_RGI_Exit
.a4b9	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a4bb	f0 39		beq $a4f6			beq 	_RGI_Exit
.a4bd	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a4bf	f0 3e		beq $a4ff			beq 	_RGI_Frame
.a4c1	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a4c3	f0 33		beq $a4f8			beq 	_RGI_Solid
.a4c5	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a4c7	f0 4b		beq $a514			beq 	_RGI_By
.a4c9	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a4cb	f0 17		beq $a4e4			beq 	_RGI_Move2
.a4cd	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a4cf	f0 65		beq $a536			beq 	_RGI_Dim
.a4d1	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a4d3	f0 78		beq $a54d			beq 	_RGI_Colour
.a4d5	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a4d7	f0 74		beq $a54d			beq 	_RGI_Colour
.a4d9	ae 2c 06	ldx $062c			ldx 	gxCommandID
.a4dc	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a4de	d0 03		bne $a4e3			bne 	_RGI_Move 					; move
.a4e0	4c 77 a5	jmp $a577			jmp		_RGI_SpriteInstructions
.a4e3					_RGI_Move:
.a4e3	88		dey				dey 								; unpick get.
.a4e4					_RGI_Move2:
.a4e4	20 9d a5	jsr $a59d			jsr 	GCGetCoordinatePair 		; move to here
.a4e7	20 c4 a5	jsr $a5c4			jsr 	GCCopyPairToStore 			; save
.a4ea	5a		phy				phy
.a4eb	20 ba a5	jsr $a5ba			jsr 	GCLoadAXY 					; load in
.a4ee	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4f0	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a4f3	7a		ply				ply
.a4f4	80 b4		bra $a4aa			bra 	_RGICommandLoop 			; and go round
.a4f6					_RGI_Exit:
.a4f6	88		dey				dey 								; unpick : / EOL
.a4f7	60		rts				rts
.a4f8					_RGI_Solid:
.a4f8	a9 02		lda #$02			lda 	#2
.a4fa	8d 2d 06	sta $062d			sta 	gxFillSolid
.a4fd	80 ab		bra $a4aa			bra 	_RGICommandLoop
.a4ff					_RGI_Frame:
.a4ff	9c 2d 06	stz $062d			stz 	gxFillSolid
.a502	80 a6		bra $a4aa			bra 	_RGICommandLoop
.a504					_RGI_To:
.a504	20 9d a5	jsr $a59d			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a507	20 c4 a5	jsr $a5c4			jsr 	GCCopyPairToStore
.a50a					_RGI_Here:
.a50a	5a		phy				phy
.a50b	20 ba a5	jsr $a5ba			jsr 	GCLoadAXY 					; load it into AXY
.a50e	20 74 a5	jsr $a574			jsr 	_RGICallHandler 			; go do whatever it is.
.a511	7a		ply				ply
.a512	80 96		bra $a4aa			bra 	_RGICommandLoop 			; and go round
.a514					_RGI_By:
.a514	20 aa a5	jsr $a5aa			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a517	18		clc				clc
.a518	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a51b	6d 2e 06	adc $062e			adc 	gxxPos
.a51e	8d 2e 06	sta $062e			sta 	gxXPos
.a521	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a524	6d 2f 06	adc $062f			adc 	gxxPos+1
.a527	8d 2f 06	sta $062f			sta 	gxXPos+1
.a52a	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a52d	18		clc				clc
.a52e	6d 30 06	adc $0630			adc 	gxYPos
.a531	8d 30 06	sta $0630			sta 	gxYPos
.a534	80 d4		bra $a50a			bra 	_RGI_Here
.a536					_RGI_Dim:
.a536	a2 01		ldx #$01			ldx	 	#1
.a538	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger
.a53b	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a53e	c9 00		cmp #$00			cmp 	#0
.a540	f0 2f		beq $a571			beq 	_RGIRange
.a542	c9 09		cmp #$09			cmp 	#8+1
.a544	b0 2b		bcs $a571			bcs		_RGIRange
.a546	3a		dec a				dec 	a
.a547	8d 33 06	sta $0633			sta 	gxDrawScale
.a54a	4c aa a4	jmp $a4aa			jmp 	_RGICommandLoop
.a54d					_RGI_Colour:
.a54d	a2 01		ldx #$01			ldx 	#1 							; colour
.a54f	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger
.a552	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a554	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.a557	b1 30		lda ($30),y			lda 	(codePtr),y
.a559	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a55b	d0 04		bne $a561			bne 	_RGICDefaultMode
.a55d	c8		iny				iny
.a55e	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger
.a561					_RGICDefaultMode:
.a561	5a		phy				phy
.a562	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a564	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a567	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a56a	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a56d	7a		ply				ply
.a56e	4c aa a4	jmp $a4aa			jmp 	_RGICommandLoop 			; and go round
.a571					_RGIRange:
.a571	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.a574					_RGICallHandler:
.a574	6c 31 06	jmp ($0631)			jmp 	(GXHandler)
.a577					_RGI_SpriteInstructions:
.a577	c9 be		cmp #$be			cmp 	#KWD_OFF
.a579	f0 07		beq $a582			beq 	_RGISpriteOff
.a57b	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a57d	f0 13		beq $a592			beq 	_RGISetImage
.a57f	4c e3 a4	jmp $a4e3			jmp 	_RGI_Move
.a582					_RGISpriteOff:
.a582	5a		phy				phy
.a583	a0 01		ldy #$01			ldy 	#1
.a585	a2 00		ldx #$00			ldx 	#0
.a587					_RGIDoCommandLoop:
.a587	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a589	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a58c	7a		ply				ply
.a58d	b0 e2		bcs $a571			bcs 	_RGIRange
.a58f	4c aa a4	jmp $a4aa			jmp 	_RGICommandLoop
.a592					_RGISetImage:
.a592	a2 01		ldx #$01			ldx 	#1
.a594	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger
.a597	5a		phy				phy
.a598	aa		tax				tax
.a599	a0 00		ldy #$00			ldy 	#0
.a59b	80 ea		bra $a587			bra 	_RGIDoCommandLoop
.a59d					GCGetCoordinatePair:
.a59d	a2 01		ldx #$01			ldx 	#1
.a59f	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.a5a2	20 28 8d	jsr $8d28			jsr 	CheckComma
.a5a5	e8		inx				inx
.a5a6	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.a5a9	60		rts				rts
.a5aa					GCSignedCoordinatePair:
.a5aa	a2 01		ldx #$01			ldx 	#1
.a5ac	20 69 9d	jsr $9d69			jsr 	Evaluate16BitIntegerSigned
.a5af	20 28 8d	jsr $8d28			jsr 	CheckComma
.a5b2	e8		inx				inx
.a5b3	20 69 9d	jsr $9d69			jsr 	Evaluate16BitIntegerSigned
.a5b6	60		rts				rts
.a5b7					_GCCPRange:
.a5b7	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.a5ba					GCLoadAXY:
.a5ba	ad 2f 06	lda $062f			lda 	gxXPos+1
.a5bd	ae 2e 06	ldx $062e			ldx 	gxXPos
.a5c0	ac 30 06	ldy $0630			ldy 	gxYPos
.a5c3	60		rts				rts
.a5c4					GCCopyPairToStore:
.a5c4	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a5c7	8d 2e 06	sta $062e			sta 	gxXPos
.a5ca	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a5cd	8d 2f 06	sta $062f			sta 	gxXPos+1
.a5d0	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a5d3	8d 30 06	sta $0630			sta 	gxYPos
.a5d6	60		rts				rts
.062c					gxCommandID:
>062c							.fill 	1
.062d					gxFillSolid:
>062d							.fill 	1
.062e					gxXPos:
>062e							.fill 	2
.0630					gxYPos:
>0630							.fill 	1
.0631					gxHandler:
>0631							.fill 	2
.0633					gxDrawScale:
>0633							.fill 	1
.a5d7					BitmapCtrl:
.a5d7	b1 30		lda ($30),y			lda 	(codePtr),y
.a5d9	c8		iny				iny
.a5da	a2 01		ldx #$01			ldx 	#1
.a5dc	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a5de	f0 11		beq $a5f1			beq 	BitmapSwitch
.a5e0	ca		dex				dex
.a5e1	c9 be		cmp #$be			cmp 	#KWD_OFF
.a5e3	f0 0c		beq $a5f1			beq 	BitmapSwitch
.a5e5	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get the colour
.a5e8	5a		phy				phy
.a5e9	aa		tax				tax
.a5ea	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a5ec	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a5ef	7a		ply				ply
.a5f0	60		rts				rts
.a5f1					BitmapSwitch:
.a5f1	5a		phy				phy
.a5f2	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5f4	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5f6	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a5f9	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5fb	a0 00		ldy #$00			ldy 	#0
.a5fd	a2 ff		ldx #$ff			ldx 	#$FF
.a5ff	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a602	9c 2d 06	stz $062d			stz 	gxFillSolid
.a605	9c 2e 06	stz $062e			stz 	gxXPos
.a608	9c 2f 06	stz $062f			stz 	gxXPos+1
.a60b	9c 30 06	stz $0630			stz 	gxYPos
.a60e	9c 33 06	stz $0633			stz 	gxDrawScale
.a611	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a613	a2 00		ldx #$00			ldx 	#0
.a615	a0 00		ldy #$00			ldy 	#0
.a617	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a61a	7a		ply				ply
.a61b	60		rts				rts
.a61c					SpritesCtrl:
.a61c	b1 30		lda ($30),y			lda 	(codePtr),y
.a61e	c8		iny				iny
.a61f	a2 01		ldx #$01			ldx 	#1
.a621	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a623	f0 08		beq $a62d			beq 	SpriteSwitch
.a625	ca		dex				dex
.a626	c9 be		cmp #$be			cmp 	#KWD_OFF
.a628	f0 03		beq $a62d			beq 	SpriteSwitch
.a62a	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.a62d					SpriteSwitch:
.a62d	5a		phy				phy
.a62e	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a630	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a632	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a635	7a		ply				ply
.a636	60		rts				rts
.a637					GfxCommand:
.a637	a2 00		ldx #$00			ldx 	#0
.a639	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; command
.a63c	20 28 8d	jsr $8d28			jsr 	CheckComma
.a63f	e8		inx				inx
.a640	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; X
.a643	20 28 8d	jsr $8d28			jsr 	CheckComma
.a646	e8		inx				inx
.a647	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; Y
.a64a	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a64d	4a		lsr a				lsr 	a
.a64e	d0 16		bne $a666			bne 	_GfxError
.a650	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a653	b0 11		bcs $a666			bcs 	_GfxError 					; bit 7 should have been zero
.a655	5a		phy				phy 								; save pos
.a656	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a659	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a65c	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a65f	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw
.a662	b0 02		bcs $a666			bcs 	_GfxError
.a664	7a		ply				ply 								; restore pos and exit.
.a665	60		rts				rts
.a666					_GfxError:
.a666	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.a669					UnaryHit:
.a669	fa		plx				plx
.a66a	a9 36		lda #$36			lda 	#zTemp0
.a66c	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a66f	20 28 8d	jsr $8d28			jsr 	CheckComma
.a672	e8		inx				inx
.a673	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a676	20 20 8d	jsr $8d20			jsr		CheckRightBracket
.a679	ca		dex				dex 								; fix back up again.
.a67a	da		phx				phx 								; save X/Y
.a67b	5a		phy				phy
.a67c	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a67f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a682	aa		tax				tax
.a683	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a685	20 b5 a8	jsr $a8b5			jsr 	GXGraphicDraw 				; calculate result
.a688	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a689	7a		ply				ply 								; restore XY
.a68a	fa		plx				plx
.a68b	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte 					; return the hit result
.a68e	60		rts				rts
.a68f					UnaryJoyX:
.a68f	18		clc				clc
.a690	80 01		bra $a693			bra 	JoyMain
.a692					UnaryJoyY:
.a692	38		sec				sec
.a693					JoyMain:
.a693	fa		plx				plx 								; get pos
.a694	08		php				php 								; save carry (set for Y)
.a695	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a698	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.a69b	20 6e a8	jsr $a86e			jsr 	EXTReadController 			; read the controller.
.a69e	28		plp				plp
.a69f	90 02		bcc $a6a3			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a6a1	4a		lsr a				lsr 	a
.a6a2	4a		lsr a				lsr 	a
.a6a3					_JMNoShift:
.a6a3	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a6a4	b0 0a		bcs $a6b0			bcs 	_JMIsRight
.a6a6	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a6a7	b0 04		bcs $a6ad			bcs 	_JMIsLeft
.a6a9	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; zero result
.a6ac	60		rts				rts
.a6ad					_JMIsLeft:
.a6ad	4c a6 8d	jmp $8da6			jmp 	ReturnTrue
.a6b0					_JMIsRight:
.a6b0	a9 01		lda #$01			lda 	#1
.a6b2	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.a6b5	60		rts				rts
.a6b6					UnaryJoyB:
.a6b6	fa		plx				plx 								; get pos
.a6b7	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6ba	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.a6bd	20 6e a8	jsr $a86e			jsr 	EXTReadController 			; read the controller.
.a6c0	4a		lsr a				lsr 	a
.a6c1	4a		lsr a				lsr 	a
.a6c2	4a		lsr a				lsr 	a
.a6c3	4a		lsr a				lsr 	a
.a6c4	29 01		and #$01			and 	#1
.a6c6	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.a6c9	60		rts				rts
.a6ca					PaletteCommand:
.a6ca	a2 00		ldx #$00			ldx 	#0
.a6cc	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; colour
.a6cf	20 28 8d	jsr $8d28			jsr 	CheckComma
.a6d2	e8		inx				inx
.a6d3	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; r
.a6d6	20 28 8d	jsr $8d28			jsr 	CheckComma
.a6d9	e8		inx				inx
.a6da	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; g
.a6dd	20 28 8d	jsr $8d28			jsr 	CheckComma
.a6e0	e8		inx				inx
.a6e1	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; b
.a6e4	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a6e7	85 36		sta $36				sta 	zTemp0
.a6e9	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a6eb	85 37		sta $37				sta 	zTemp0+1
.a6ed	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a6ef	26 37		rol $37				rol	 	zTemp0+1
.a6f1	06 36		asl $36				asl 	zTemp0
.a6f3	26 37		rol $37				rol	 	zTemp0+1
.a6f5	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a6f7	85 01		sta $01				sta 	1
.a6f9	5a		phy				phy
.a6fa	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a6fd	92 36		sta ($36)			sta 	(zTemp0)
.a6ff	a0 01		ldy #$01			ldy 	#1
.a701	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a704	91 36		sta ($36),y			sta 	(zTemp0),y
.a706	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a709	c8		iny				iny
.a70a	91 36		sta ($36),y			sta 	(zTemp0),y
.a70c	7a		ply				ply
.a70d	60		rts				rts
.a70e					UnaryTimer:
.a70e	fa		plx				plx
.a70f	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.a712					TimerToStackX:
.a712	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; zero result
.a715	64 01		stz $01				stz 	1 							; access I/O
.a717	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a71a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a71d	ad 5a d6	lda $d65a			lda 	$D65A
.a720	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a723	ad 5b d6	lda $d65b			lda 	$D65B
.a726	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a729	60		rts				rts
.a72a					EXTPrintCharacter:
.a72a	48		pha				pha
.a72b	da		phx				phx
.a72c	5a		phy				phy
.a72d	a6 01		ldx $01				ldx 	1
.a72f	da		phx				phx
.a730	ac 35 06	ldy $0635			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a733	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a735	30 3e		bmi $a775			bmi 	_EXPCColour
.a737	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a739	90 3a		bcc $a775			bcc 	_EXPCControl
.a73b	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a73d	86 01		stx $01				stx 	1
.a73f	91 40		sta ($40),y			sta 	(EXTAddress),y
.a741	e6 01		inc $01				inc 	1 							; select colour memory
.a743	ad 36 06	lda $0636			lda 	EXTTextColour
.a746	91 40		sta ($40),y			sta 	(EXTAddress),y
.a748					_EXPCRight:
.a748	c8		iny				iny 								; advance horizontal position
.a749	8c 35 06	sty $0635			sty 	EXTColumn
.a74c	cc 37 06	cpy $0637			cpy 	EXTScreenWidth 				; reached RHS ?
.a74f	90 2d		bcc $a77e			bcc 	_EXPCExit 					; no, then exit.
.a751					_EXPCCRLF:
.a751	9c 35 06	stz $0635			stz 	EXTColumn 					; back to column 0
.a754	ee 34 06	inc $0634			inc 	EXTRow  					; bump row
.a757	ad 34 06	lda $0634			lda 	EXTRow 						; check if reached the bottom ?
.a75a	cd 38 06	cmp $0638			cmp 	EXTScreenHeight 			; if so, then scroll.
.a75d	f0 0e		beq $a76d			beq 	_EXPCScroll
.a75f	18		clc				clc 								; add width to address.
.a760	a5 40		lda $40				lda 	EXTAddress
.a762	6d 37 06	adc $0637			adc 	EXTScreenWidth
.a765	85 40		sta $40				sta 	EXTAddress
.a767	90 15		bcc $a77e			bcc 	_EXPCExit
.a769	e6 41		inc $41				inc 	EXTAddress+1
.a76b	80 11		bra $a77e			bra 	_EXPCExit
.a76d					_EXPCScroll:
.a76d	ce 34 06	dec $0634			dec 	EXTRow 						; the height-1 th line.
.a770	20 af a7	jsr $a7af			jsr 	EXTScreenScroll 			; scroll the screen
.a773	80 09		bra $a77e			bra 	_EXPCExit
.a775					_EXPCColour:
.a775					_EXPCControl:
.a775	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a777	b0 05		bcs $a77e			bcs 	_EXPCExit
.a779	0a		asl a				asl 	a 							; double into X
.a77a	aa		tax				tax
.a77b	7c 8d a7	jmp ($a78d,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a77e					_EXPCExit:
.a77e	20 f3 a7	jsr $a7f3			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a781	68		pla				pla
.a782	85 01		sta $01				sta 	1
.a784	7a		ply				ply
.a785	fa		plx				plx
.a786	68		pla				pla
.a787	60		rts				rts
.a788					_EXPCClearScreen:
.a788	20 b0 a7	jsr $a7b0			jsr		EXTClearScreenCode
.a78b	80 f1		bra $a77e			bra 	_EXPCExit
.a78d					_EXPCActionTable:
>a78d	7e a7						.word 	_EXPCExit 					; 00 Nothing
>a78f	7e a7						.word 	_EXPCExit 					; 01
>a791	7e a7						.word 	_EXPCExit 					; 02
>a793	7e a7						.word 	_EXPCExit 					; 03 Nothing
>a795	7e a7						.word 	_EXPCExit 					; 04 Nothing
>a797	7e a7						.word 	_EXPCExit 					; 05
>a799	7e a7						.word 	_EXPCExit 					; 06
>a79b	7e a7						.word 	_EXPCExit 					; 07 Nothing
>a79d	7e a7						.word 	_EXPCExit 					; 08
>a79f	7e a7						.word 	_EXPCExit 					; 09
>a7a1	7e a7						.word 	_EXPCExit 					; 0A Nothing
>a7a3	7e a7						.word 	_EXPCExit 					; 0B Nothing
>a7a5	88 a7						.word 	_EXPCClearScreen			; 0C CLS
>a7a7	51 a7						.word 	_EXPCCRLF 					; 0D CR/LF
>a7a9	7e a7						.word 	_EXPCExit 					; 0E
>a7ab	7e a7						.word 	_EXPCExit 					; 0F Nothing
>a7ad	7e a7						.word 	_EXPCExit 					; 10
.a7af					EXTScreenScroll:
.a7af	60		rts				rts
.a7b0					EXTClearScreenCode:
.a7b0	a9 02		lda #$02			lda 	#2 							; select text page
.a7b2	85 01		sta $01				sta 	1
.a7b4	a9 20		lda #$20			lda		#32 						; fill with space
.a7b6	20 c3 a7	jsr $a7c3			jsr 	_EXTCSFill
.a7b9	e6 01		inc $01				inc 	1 							; select colour page
.a7bb	ad 36 06	lda $0636			lda 	EXTTextColour
.a7be	20 c3 a7	jsr $a7c3			jsr 	_EXTCSFill
.a7c1	80 22		bra $a7e5			bra 	EXTHomeCursor
.a7c3					_EXTCSFill:
.a7c3	aa		tax				tax
.a7c4	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a7c6	85 40		sta $40				sta 	EXTAddress
.a7c8	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a7ca	85 41		sta $41				sta 	EXTAddress+1
.a7cc					_EXTCSFill1:
.a7cc	a0 00		ldy #$00			ldy 	#0
.a7ce	8a		txa				txa
.a7cf					_EXTCSFill2:
.a7cf	91 40		sta ($40),y			sta 	(EXTAddress),y
.a7d1	c8		iny				iny
.a7d2	d0 fb		bne $a7cf			bne 	_EXTCSFill2
.a7d4	e6 41		inc $41				inc 	EXTAddress+1
.a7d6	a5 41		lda $41				lda 	EXTAddress+1
.a7d8	c9 d2		cmp #$d2			cmp 	#$D2
.a7da	d0 f0		bne $a7cc			bne 	_EXTCSFill1
.a7dc	8a		txa				txa
.a7dd					_EXTCSFill3:
.a7dd	91 40		sta ($40),y			sta 	(EXTAddress),y
.a7df	c8		iny				iny
.a7e0	c0 c0		cpy #$c0			cpy 	#$C0
.a7e2	d0 f9		bne $a7dd			bne 	_EXTCSFill3
.a7e4	60		rts				rts
.a7e5					EXTHomeCursor:
.a7e5	9c 34 06	stz $0634			stz 	EXTRow 						; reset row & column
.a7e8	9c 35 06	stz $0635			stz 	EXTColumn
.a7eb	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a7ed	85 40		sta $40				sta 	EXTAddress
.a7ef	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a7f1	85 41		sta $41				sta 	EXTAddress+1
.a7f3					EXTSetHardwareCursor:
.a7f3	64 01		stz $01				stz 	1 							; I/O Page zero
.a7f5	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a7f7	8d 10 d0	sta $d010			sta 	$D010
.a7fa	a9 b1		lda #$b1			lda 	#$B1
.a7fc	8d 12 d0	sta $d012			sta 	$D012
.a7ff	ad 35 06	lda $0635			lda 	EXTColumn
.a802	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a805	9c 15 d0	stz $d015			stz 	$D015
.a808	ad 34 06	lda $0634			lda 	EXTRow
.a80b	8d 16 d0	sta $d016			sta 	$D016
.a80e	9c 17 d0	stz $d017			stz 	$D017
.a811	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0634					EXTRow:
>0634							.fill 	1
.0635					EXTColumn:
>0635							.fill 	1
.0636					EXTTextColour:
>0636							.fill 	1
.0637					EXTScreenWidth:
>0637							.fill 	1
.0638					EXTScreenHeight:
>0638							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a812					EXTInitialise:
.a812	64 01		stz $01				stz 	1 							; Access I/O
.a814	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a817	9c 08 d0	stz $d008			stz 	$D008
.a81a	9c 09 d0	stz $d009			stz 	$D009
.a81d	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a81f	8d 58 d6	sta $d658			sta 	$D658
.a822	a9 f2		lda #$f2			lda 	#$F2
.a824	8d 36 06	sta $0636			sta 	EXTTextColour
.a827	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a829	8d 37 06	sta $0637			sta 	EXTScreenWidth
.a82c	a9 3c		lda #$3c			lda 	#60
.a82e	8d 38 06	sta $0638			sta 	EXTScreenHeight
.a831	64 01		stz $01				stz 	1
.a833	60		rts				rts
.a834					EXTInputSingleCharacter:
.a834	da		phx				phx
.a835	5a		phy				phy
.a836					_EISCWait:
.a836	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a839	c9 00		cmp #$00			cmp 	#0
.a83b	f0 f9		beq $a836			beq 	_EISCWait
.a83d	7a		ply				ply
.a83e	fa		plx				plx
.a83f	60		rts				rts
.a840					EXTInputLine:
.a840	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a842					_ILLoop:
.a842	da		phx				phx 								; read character in
.a843	20 34 a8	jsr $a834			jsr 	EXTInputSingleCharacter
.a846	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.a849	fa		plx				plx
.a84a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a84c	f0 12		beq $a860			beq 	_ILBackspace
.a84e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a850	f0 15		beq $a867			beq 	_ILExit
.a852	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a854	90 ec		bcc $a842			bcc 	_ILLoop
.a856	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a858	f0 e8		beq $a842			beq 	_ILLoop
.a85a	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.a85d	e8		inx				inx
.a85e	80 e2		bra $a842			bra 	_ILLoop
.a860					_ILBackspace:
.a860	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a862	f0 de		beq $a842			beq 	_ILLoop
.a864	ca		dex				dex 								; back one.
.a865	80 db		bra $a842			bra 	_ILLoop
.a867					_ILExit:
.a867	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a86a	60		rts				rts
.a86b					EXTBreakCheck:
.a86b	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a86e					EXTReadController:
.a86e	da		phx				phx
.a86f	a2 00		ldx #$00			ldx 	#0
.a871	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a873	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a876	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a878	f0 04		beq $a87e			beq 	_NoSet1
.a87a	8a		txa				txa
.a87b	09 01		ora #$01			ora 	#1
.a87d	aa		tax				tax
.a87e					_NoSet1:
.a87e	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a880	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a883	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a885	f0 04		beq $a88b			beq 	_NoSet1
.a887	8a		txa				txa
.a888	09 02		ora #$02			ora 	#2
.a88a	aa		tax				tax
.a88b					_NoSet1:
.a88b	a9 06		lda #$06			lda 	#(($32) >> 3)
.a88d	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a890	29 04		and #$04			and 	#($01 << (($32) & 7))
.a892	f0 04		beq $a898			beq 	_NoSet1
.a894	8a		txa				txa
.a895	09 04		ora #$04			ora 	#4
.a897	aa		tax				tax
.a898					_NoSet1:
.a898	a9 04		lda #$04			lda 	#(($25) >> 3)
.a89a	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a89d	29 20		and #$20			and 	#($01 << (($25) & 7))
.a89f	f0 04		beq $a8a5			beq 	_NoSet1
.a8a1	8a		txa				txa
.a8a2	09 08		ora #$08			ora 	#8
.a8a4	aa		tax				tax
.a8a5					_NoSet1:
.a8a5	a9 04		lda #$04			lda 	#(($26) >> 3)
.a8a7	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8aa	29 40		and #$40			and 	#($01 << (($26) & 7))
.a8ac	f0 04		beq $a8b2			beq 	_NoSet1
.a8ae	8a		txa				txa
.a8af	09 10		ora #$10			ora 	#16
.a8b1	aa		tax				tax
.a8b2					_NoSet1:
.a8b2	8a		txa				txa
.a8b3	fa		plx				plx
.a8b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b636					GRVectorTable:
>b636	b0 aa					.word	GXInitialise             ; $00 Initialise
>b638	ca aa					.word	GXControlBitmap          ; $01 BitmapCtl
>b63a	12 ab					.word	GXControlSprite          ; $02 SpriteCtl
>b63c	62 aa					.word	GXClearBitmap            ; $03 Clear
>b63e	a1 ac					.word	GXSetColourMode          ; $04 Colour
>b640	69 ae					.word	GXFontHandler            ; $05 DrawFont
>b642	b1 ae					.word	GXSpriteHandler          ; $06 DrawSprite
>b644	1d af					.word	GXSelect                 ; $07 SpriteUse
>b646	46 af					.word	GXSelectImage            ; $08 SpriteImage
>b648	cd b0					.word	GXCollide                ; $09 SpriteCollide
>b64a	14 a9					.word	GRUndefined              ; $0a
>b64c	14 a9					.word	GRUndefined              ; $0b
>b64e	14 a9					.word	GRUndefined              ; $0c
>b650	14 a9					.word	GRUndefined              ; $0d
>b652	14 a9					.word	GRUndefined              ; $0e
>b654	14 a9					.word	GRUndefined              ; $0f
>b656	14 a9					.word	GRUndefined              ; $10
>b658	14 a9					.word	GRUndefined              ; $11
>b65a	14 a9					.word	GRUndefined              ; $12
>b65c	14 a9					.word	GRUndefined              ; $13
>b65e	14 a9					.word	GRUndefined              ; $14
>b660	14 a9					.word	GRUndefined              ; $15
>b662	14 a9					.word	GRUndefined              ; $16
>b664	14 a9					.word	GRUndefined              ; $17
>b666	14 a9					.word	GRUndefined              ; $18
>b668	14 a9					.word	GRUndefined              ; $19
>b66a	14 a9					.word	GRUndefined              ; $1a
>b66c	14 a9					.word	GRUndefined              ; $1b
>b66e	14 a9					.word	GRUndefined              ; $1c
>b670	14 a9					.word	GRUndefined              ; $1d
>b672	14 a9					.word	GRUndefined              ; $1e
>b674	14 a9					.word	GRUndefined              ; $1f
>b676	12 a9					.word	GXMove                   ; $20 Move
>b678	6f ab					.word	GXLine                   ; $21 Line
>b67a	ea ac					.word	GXFrameRectangle         ; $22 FrameRect
>b67c	e7 ac					.word	GXFillRectangle          ; $23 FillRect
>b67e	19 a9					.word	GXFrameCircle            ; $24 FrameCircle
>b680	15 a9					.word	GXFillCircle             ; $25 FillCircle
>b682	14 a9					.word	GRUndefined              ; $26
>b684	14 a9					.word	GRUndefined              ; $27
>b686	cf ac					.word	GXPlotPoint              ; $28 Plot
>b688	dc af					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.0639					gxCurrentX:
>0639							.fill 	2
.063b					gxCurrentY:
>063b							.fill 	2
.063d					gxLastX:
>063d							.fill 	2
.063f					gxLastY:
>063f							.fill 	2
.0641					gxX0:
>0641							.fill 	2
.0643					gxY0:
>0643							.fill 	2
.0645					gxX1:
>0645							.fill 	2
.0647					gxY1:
>0647							.fill 	2
.0649					gxSpritesOn:
>0649							.fill 	1
.064a					gxBitmapsOn:
>064a							.fill 	1
.064b					gxBasePage:
>064b							.fill 	1
.064c					gxSpritePage:
>064c							.fill 	1
.064d					gxHeight:
>064d							.fill 	1
.064e					gxMode:
>064e							.fill 	1
.064f					gxColour:
>064f							.fill 	1
.0650					gxEORValue:
>0650							.fill 	1
.0651					gxANDValue:
>0651							.fill 	1
.0652					gxOriginalLUTValue:
>0652							.fill 	1
.0653					gsOffset:
>0653							.fill 	1
.0654					GSCurrentSpriteID:
>0654							.fill 	1
.0655					GSCurrentSpriteAddr:
>0655							.fill 	2
.0657					GXSpriteOffsetBase:
>0657							.fill 	2
.0659					GXSpriteLow:
>0659							.fill 	64
.0699					GXSpriteHigh:
>0699							.fill 	64
.a8b5					GXGraphicDraw:
.a8b5	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.a8b7	b0 06		bcs $a8bf			bcs 	_GDCoordinate
.a8b9	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.a8bb	84 37		sty $37				sty 	gxzTemp0+1
.a8bd	80 4b		bra $a90a			bra 	_GDExecuteA 				; and execute
.a8bf					_GDCoordinate:
.a8bf	48		pha				pha 								; save AXY
.a8c0	da		phx				phx
.a8c1	5a		phy				phy
.a8c2	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.a8c4					_GDCopy1:
.a8c4	bd 39 06	lda $0639,x			lda 	gxCurrentX,x
.a8c7	9d 3d 06	sta $063d,x			sta 	gxLastX,x
.a8ca	ca		dex				dex
.a8cb	10 f7		bpl $a8c4			bpl 	_GDCopy1
.a8cd	68		pla				pla 								; update Y
.a8ce	8d 3b 06	sta $063b			sta 	gxCurrentY
.a8d1	9c 3c 06	stz $063c			stz 	gxCurrentY+1
.a8d4	68		pla				pla
.a8d5	8d 39 06	sta $0639			sta 	gxCurrentX
.a8d8	68		pla				pla 								; get A (command+X.1) back
.a8d9	48		pha				pha
.a8da	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.a8dc	8d 3a 06	sta $063a			sta 	gxCurrentX+1
.a8df	68		pla				pla 								; get command back
.a8e0	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.a8e2	48		pha				pha 								; push back.
.a8e3	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.a8e5	f0 17		beq $a8fe			beq 	_GDCopyToWorkArea
.a8e7	ad 3a 06	lda $063a			lda 	gxCurrentX+1 				; X < 256 X okay
.a8ea	f0 07		beq $a8f3			beq 	_GDCheckY
.a8ec	ad 39 06	lda $0639			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.a8ef	c9 40		cmp #$40			cmp 	#64
.a8f1	b0 08		bcs $a8fb			bcs 	_GDError1
.a8f3					_GDCheckY:
.a8f3	ad 3b 06	lda $063b			lda 	gxCurrentY 					; check Y < Height.
.a8f6	cd 4d 06	cmp $064d			cmp 	gxHeight
.a8f9	90 03		bcc $a8fe			bcc 	_GDCopyToWorkArea
.a8fb					_GDError1:
.a8fb	68		pla				pla
.a8fc					_GDError2:
.a8fc	38		sec				sec
.a8fd	60		rts				rts
.a8fe					_GDCopyToWorkArea:
.a8fe	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.a900					_GDCopy2:
.a900	bd 39 06	lda $0639,x			lda 	gxCurrentX,x
.a903	9d 41 06	sta $0641,x			sta 	gxX0,x
.a906	ca		dex				dex
.a907	10 f7		bpl $a900			bpl 	_GDCopy2
.a909	68		pla				pla 								; get command
.a90a					_GDExecuteA:
.a90a	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.a90c	b0 ee		bcs $a8fc			bcs 	_GDError2
.a90e	aa		tax				tax
.a90f	7c 36 b6	jmp ($b636,x)			jmp 	(GRVectorTable,x)
.a912					GXMove:
.a912	18		clc				clc
.a913	60		rts				rts
.a914					GRUndefined:
>a914	db						.byte 	$DB 						; causes a break in the emulator
.a915					GXFillCircle:
.a915	a9 ff		lda #$ff			lda 	#255
.a917	80 02		bra $a91b			bra 	GXCircle
.a919					GXFrameCircle:
.a919	a9 00		lda #$00			lda 	#0
.a91b					GXCircle:
.a91b	8d dc 06	sta $06dc			sta 	gxIsFillMode					; save Fill flag
.a91e	ad 4a 06	lda $064a			lda 	gxBitmapsOn
.a921	f0 26		beq $a949			beq 	_GXCFail
.a923	20 74 b1	jsr $b174			jsr 	GXSortXY 					; topleft/bottomright
.a926	20 4c b0	jsr $b04c			jsr 	GXOpenBitmap 				; start drawing
.a929	20 1b aa	jsr $aa1b			jsr 	GXCircleSetup 				; set up for drawing
.a92c	9c dd 06	stz $06dd			stz 	gxYChanged
.a92f					_GXCircleDraw:
.a92f	ad da 06	lda $06da			lda 	gXCentre					; while x <= y
.a932	cd db 06	cmp $06db			cmp 	gYCentre
.a935	90 0a		bcc $a941			bcc 	_GXCircleContinue
.a937	d0 03		bne $a93c			bne 	_GXNoLast
.a939	20 4e a9	jsr $a94e			jsr 	GXPlot1
.a93c					_GXNoLast:
.a93c	20 54 b0	jsr $b054			jsr 	GXCloseBitmap 				; close the bitmap
.a93f	18		clc				clc
.a940	60		rts				rts
.a941					_GXCircleContinue:
.a941	20 4b a9	jsr $a94b			jsr 	GXPlot2 					; draw it
.a944	20 c8 a9	jsr $a9c8			jsr 	GXCircleMove 				; adjust the coordinates
.a947	80 e6		bra $a92f			bra 	_GXCircleDraw
.a949					_GXCFail:
.a949	38		sec				sec
.a94a	60		rts				rts
.a94b					GXPlot2:
.a94b	20 4e a9	jsr $a94e			jsr 	GXPlot1 						; plot and swap, fall through does twice
.a94e					GXPlot1:
.a94e	ad db 06	lda $06db			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.a951	f0 03		beq $a956			beq 	_GXPlot1Only
.a953	20 72 a9	jsr $a972			jsr 	GXPlot0 						; plot and negate
.a956					_GXPlot1Only:
.a956	20 72 a9	jsr $a972			jsr 	GXPlot0 						; twice, undoing negation
.a959	ad da 06	lda $06da			lda 	gXCentre 						; swap X and Y
.a95c	ae db 06	ldx $06db			ldx	 	gYCentre
.a95f	8d db 06	sta $06db			sta 	gYCentre
.a962	8e da 06	stx $06da			stx 	gXCentre
.a965	ad dd 06	lda $06dd			lda 	gxYChanged 						; toggle Y Changed flag
.a968	a9 ff		lda #$ff			lda 	#$FF
.a96a	8d dd 06	sta $06dd			sta 	gxYChanged
.a96d	60		rts				rts
.a96e	20 72 a9	jsr $a972			jsr 	GXPlot0 						; do once
.a971	60		rts				rts
.a972	ad dc 06	lda $06dc	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.a975	f0 05		beq $a97c			beq 	_GXPlot0Always
.a977	ad dd 06	lda $06dd			lda 	gxYChanged						; fill mode, only draw if changed.
.a97a	f0 2d		beq $a9a9			beq 	GXPlot0Exit
.a97c					_GXPlot0Always:
.a97c	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.a97e	ad db 06	lda $06db			lda 	gYCentre
.a981	20 aa a9	jsr $a9aa			jsr 	GXSubCopy
.a984	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.a986	ad da 06	lda $06da			lda 	gXCentre
.a989	20 aa a9	jsr $a9aa			jsr 	GXSubCopy
.a98c	48		pha				pha 									; save last offset X
.a98d	20 5c b0	jsr $b05c			jsr 	GXPositionCalc 					; calculate position/offset.
.a990	68		pla				pla
.a991	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.a992	85 36		sta $36				sta 	gxzTemp0
.a994	64 37		stz $37				stz 	gxzTemp0+1
.a996	26 37		rol $37				rol 	gxzTemp0+1
.a998	ad dc 06	lda $06dc			lda 	gxIsFillMode
.a99b	69 80		adc #$80			adc 	#128
.a99d	20 3a ad	jsr $ad3a			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.a9a0	38		sec				sec 									; GY = -GY
.a9a1	a9 00		lda #$00			lda 	#0
.a9a3	ed db 06	sbc $06db			sbc 	gYCentre
.a9a6	8d db 06	sta $06db			sta 	gYCentre
.a9a9					GXPlot0Exit:
.a9a9	60		rts				rts
.a9aa					GXSubCopy:
.a9aa	85 36		sta $36				sta 	gxzTemp0
.a9ac	64 37		stz $37				stz 	gxzTemp0+1
.a9ae	29 80		and #$80			and 	#$80
.a9b0	f0 02		beq $a9b4			beq 	_GXNoSx
.a9b2	c6 37		dec $37				dec 	gxzTemp0+1
.a9b4					_GXNoSx:
.a9b4	38		sec				sec
.a9b5	bd 45 06	lda $0645,x			lda 	gXX1,x
.a9b8	e5 36		sbc $36				sbc 	gxzTemp0
.a9ba	9d 41 06	sta $0641,x			sta 	gXX0,x
.a9bd	bd 46 06	lda $0646,x			lda 	gXX1+1,x
.a9c0	e5 37		sbc $37				sbc 	gxzTemp0+1
.a9c2	9d 42 06	sta $0642,x			sta 	gXX0+1,x
.a9c5	a5 36		lda $36				lda 	gxzTemp0 						; return A
.a9c7	60		rts				rts
.a9c8					GXCircleMove:
.a9c8	9c dd 06	stz $06dd			stz 	gxYChanged 					; clear Y changed flag
.a9cb	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.a9cd	10 0d		bpl $a9dc			bpl 	_GXEMPositive
.a9cf	ee da 06	inc $06da			inc 	gXCentre 					; X++
.a9d2	ad da 06	lda $06da			lda 	gXCentre
.a9d5	20 fb a9	jsr $a9fb			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.a9d8	a9 06		lda #$06			lda 	#6  						; and add 6
.a9da	80 15		bra $a9f1			bra 	_GXEMAddD
.a9dc					_GXEMPositive:
.a9dc	ee da 06	inc $06da			inc 	gXCentre					; X++
.a9df	ce db 06	dec $06db			dec 	gyCentre 					; Y--
.a9e2	38		sec				sec 								; calculate X-Y
.a9e3	ad da 06	lda $06da			lda 	gXCentre
.a9e6	ed db 06	sbc $06db			sbc 	gYCentre
.a9e9	20 fb a9	jsr $a9fb			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.a9ec	a9 0a		lda #$0a			lda 	#10  						; and add 10
.a9ee	ce dd 06	dec $06dd			dec 	gxYChanged
.a9f1					_GXEMAddD:
.a9f1	18		clc				clc
.a9f2	65 38		adc $38				adc 	gxzTemp1
.a9f4	85 38		sta $38				sta 	gxzTemp1
.a9f6	90 02		bcc $a9fa			bcc 	_GXEMNoCarry
.a9f8	e6 39		inc $39				inc 	gxzTemp1+1
.a9fa					_GXEMNoCarry:
.a9fa	60		rts				rts
.a9fb					_GXAdd4TimesToD:
.a9fb	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.a9fd	29 80		and #$80			and 	#$80
.a9ff	f0 02		beq $aa03			beq 	_GXA4Unsigned
.aa01	a9 ff		lda #$ff			lda 	#$FF
.aa03					_GXA4Unsigned:
.aa03	85 37		sta $37				sta 	gxzTemp0+1
.aa05	06 36		asl $36				asl 	gxzTemp0  					; x 4
.aa07	26 37		rol $37				rol 	gxzTemp0+1
.aa09	06 36		asl $36				asl 	gxzTemp0
.aa0b	26 37		rol $37				rol 	gxzTemp0+1
.aa0d	18		clc				clc 								; add
.aa0e	a5 36		lda $36				lda		gxzTemp0
.aa10	65 38		adc $38				adc 	gxzTemp1
.aa12	85 38		sta $38				sta 	gxzTemp1
.aa14	a5 37		lda $37				lda		gxzTemp0+1
.aa16	65 39		adc $39				adc 	gxzTemp1+1
.aa18	85 39		sta $39				sta 	gxzTemp1+1
.aa1a	60		rts				rts
.aa1b					GXCircleSetup:
.aa1b	38		sec				sec
.aa1c	ad 47 06	lda $0647			lda 	gxY1
.aa1f	ed 43 06	sbc $0643			sbc 	gxY0
.aa22	4a		lsr a				lsr 	a
.aa23	8d d9 06	sta $06d9			sta 	gxRadius
.aa26	a2 00		ldx #$00			ldx 	#0
.aa28	20 4a aa	jsr $aa4a			jsr 	_GXCalculateCentre
.aa2b	a2 02		ldx #$02			ldx 	#2
.aa2d	20 4a aa	jsr $aa4a			jsr 	_GXCalculateCentre
.aa30	9c da 06	stz $06da			stz 	gXCentre
.aa33	ad d9 06	lda $06d9			lda 	gxRadius
.aa36	8d db 06	sta $06db			sta 	gYCentre
.aa39	0a		asl a				asl 	a 							; R x 2
.aa3a	85 36		sta $36				sta 	gxzTemp0
.aa3c	38		sec				sec
.aa3d	a9 03		lda #$03			lda 	#3
.aa3f	e5 36		sbc $36				sbc 	gxzTemp0
.aa41	85 38		sta $38				sta 	gxzTemp1
.aa43	a9 00		lda #$00			lda 	#0
.aa45	e9 00		sbc #$00			sbc 	#0
.aa47	85 39		sta $39				sta 	gxzTemp1+1
.aa49	60		rts				rts
.aa4a					_GXCalculateCentre:
.aa4a	38		sec				sec
.aa4b	bd 45 06	lda $0645,x			lda 	gxX1,x
.aa4e	7d 41 06	adc $0641,x			adc 	gXX0,x
.aa51	9d 45 06	sta $0645,x			sta 	gXX1,x
.aa54	bd 46 06	lda $0646,x			lda 	gXX1+1,x
.aa57	7d 42 06	adc $0642,x			adc 	gXX0+1,x
.aa5a	4a		lsr a				lsr 	a
.aa5b	9d 46 06	sta $0646,x			sta 	gXX1+1,x
.aa5e	7e 45 06	ror $0645,x			ror 	gXX1,x
.aa61	60		rts				rts
.06d9					gxRadius:
>06d9							.fill 	1
.06da					gXCentre:
>06da							.fill 	1
.06db					gYCentre:
>06db							.fill 	1
.06dc					gxIsFillMode:
>06dc							.fill 	1
.06dd					gxYChanged:
>06dd							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.aa62					GXClearBitmap:
.aa62	ad 4a 06	lda $064a			lda 	gxBitmapsOn 				; check BMP running.
.aa65	f0 24		beq $aa8b			beq 	_GXCBFail
.aa67	20 4c b0	jsr $b04c			jsr 	GXOpenBitmap 				; start access
.aa6a	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.aa6c	ad 4d 06	lda $064d			lda 	gxHeight
.aa6f	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.aa71	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.aa73					_GXCalcLastPage:
.aa73	98		tya				tya 								; add to base page
.aa74	18		clc				clc
.aa75	6d 4b 06	adc $064b			adc 	gxBasePage
.aa78	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.aa7a					_GXClearAll:
.aa7a	20 8d aa	jsr $aa8d			jsr 	_GXClearBlock 				; clear 8k block
.aa7d	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.aa7f	a5 0b		lda $0b				lda 	GXEditSlot
.aa81	cd 4b 06	cmp $064b			cmp 	gxBasePage 					; until before base page
.aa84	b0 f4		bcs $aa7a			bcs 	_GXClearAll
.aa86	20 54 b0	jsr $b054			jsr 	GXCloseBitmap	 			; stop access
.aa89	18		clc				clc
.aa8a	60		rts				rts
.aa8b					_GXCBFail:
.aa8b	38		sec				sec
.aa8c	60		rts				rts
.aa8d					_GXClearBlock:
.aa8d	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.aa8f	85 38		sta $38				sta 	0+gxzTemp1
.aa91	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.aa93	85 39		sta $39				sta 	1+gxzTemp1
.aa95					_GXCB0:
.aa95	a5 36		lda $36				lda 	gxzTemp0
.aa97	a0 00		ldy #$00			ldy 	#0
.aa99					_GXCB1:
.aa99	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa9b	c8		iny				iny
.aa9c	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa9e	c8		iny				iny
.aa9f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aaa1	c8		iny				iny
.aaa2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aaa4	c8		iny				iny
.aaa5	d0 f2		bne $aa99			bne 	_GXCB1
.aaa7	e6 39		inc $39				inc 	gxzTemp1+1
.aaa9	a5 39		lda $39				lda 	gxzTemp1+1
.aaab	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.aaad	d0 e6		bne $aa95			bne 	_GXCB0
.aaaf	60		rts				rts
.aab0					GXInitialise:
.aab0	64 01		stz $01				stz 	1
.aab2	a9 01		lda #$01			lda 	#1
.aab4	8d 00 d0	sta $d000			sta 	$D000
.aab7	18		clc				clc
.aab8	9c 49 06	stz $0649			stz 	GXSpritesOn
.aabb	9c 4a 06	stz $064a			stz 	GXBitmapsOn
.aabe	a2 0f		ldx #$0f			ldx 	#15
.aac0					_GXIClear:
.aac0	9e 39 06	stz $0639,x			stz 	gxCurrentX,x
.aac3	ca		dex				dex
.aac4	10 fa		bpl $aac0			bpl 	_GXIClear
.aac6	20 61 ab	jsr $ab61			jsr 	GXClearSpriteStore
.aac9	60		rts				rts
.aaca					GXControlBitmap:
.aaca	64 01		stz $01				stz 	1
.aacc	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.aace	29 01		and #$01			and 	#1 							; set bitmap flag
.aad0	8d 4a 06	sta $064a			sta 	gxBitmapsOn
.aad3	4a		lsr a				lsr 	a 							; bit 0 into carry.
.aad4	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.aad7	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.aad9	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.aadb	90 02		bcc $aadf			bcc 	_CBNotOn
.aadd	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.aadf					_CBNotOn:
.aadf	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.aae2	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.aae4	29 07		and #$07			and 	#7
.aae6	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.aae9	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.aaeb	d0 02		bne $aaef			bne 	_CBNotDefault
.aaed	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.aaef					_CBNotDefault:
.aaef	8d 4b 06	sta $064b			sta 	gxBasePage
.aaf2	20 53 ab	jsr $ab53			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.aaf5	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.aaf7	8d 03 d1	sta $d103			sta 	$D103
.aafa	a5 36		lda $36				lda 	gxzTemp0
.aafc	8d 02 d1	sta $d102			sta 	$D102
.aaff	9c 01 d1	stz $d101			stz 	$D101
.ab02	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ab04	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ab07	29 01		and #$01			and 	#1
.ab09	f0 02		beq $ab0d			beq 	_CBHaveHeight
.ab0b	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ab0d					_CBHaveHeight
.ab0d	8e 4d 06	stx $064d			stx 	gxHeight
.ab10	18		clc				clc
.ab11	60		rts				rts
.ab12					GXControlSprite:
.ab12	64 01		stz $01				stz 	1
.ab14	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ab16	29 01		and #$01			and 	#1 							; set sprites flag
.ab18	8d 49 06	sta $0649			sta 	gxSpritesOn
.ab1b	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ab1c	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ab1f	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ab21	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ab23	90 02		bcc $ab27			bcc 	_CSNotOn
.ab25	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ab27					_CSNotOn:
.ab27	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ab2a	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ab2c	d0 02		bne $ab30			bne 	_CSNotDefault
.ab2e	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ab30					_CSNotDefault:
.ab30	8d 4c 06	sta $064c			sta 	gxSpritePage
.ab33	20 53 ab	jsr $ab53			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ab36	a5 36		lda $36				lda 	zTemp0
.ab38	8d 57 06	sta $0657			sta 	GXSpriteOffsetBase
.ab3b	a5 37		lda $37				lda 	zTemp0+1
.ab3d	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase+1
.ab40	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ab42					_CSClear:
.ab42	9e 00 d9	stz $d900,x			stz 	$D900,x
.ab45	9e 00 da	stz $da00,x			stz 	$DA00,x
.ab48	ca		dex				dex
.ab49	d0 f7		bne $ab42			bne 	_CSClear
.ab4b	9c 56 06	stz $0656			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ab4e	20 61 ab	jsr $ab61			jsr 	GXClearSpriteStore
.ab51	18		clc				clc
.ab52	60		rts				rts
.ab53					GXCalculateBaseAddress:
.ab53	85 36		sta $36				sta 	gxzTemp0
.ab55	64 37		stz $37				stz 	gxzTemp0+1
.ab57	a9 05		lda #$05			lda 	#5
.ab59					_GXShift:
.ab59	06 36		asl $36				asl 	gxzTemp0
.ab5b	26 37		rol $37				rol 	gxzTemp0+1
.ab5d	3a		dec a				dec		a
.ab5e	d0 f9		bne $ab59			bne 	_GXShift
.ab60	60		rts				rts
.ab61					GXClearSpriteStore:
.ab61	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ab63					_GXCSSLoop:
.ab63	9e 99 06	stz $0699,x			stz 	GXSpriteHigh,x
.ab66	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ab68	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.ab6b	ca		dex				dex
.ab6c	10 f5		bpl $ab63			bpl 	_GXCSSLoop
.ab6e	60		rts				rts
.ab6f					GXLine:
.ab6f	ad 4a 06	lda $064a			lda 	GXBitmapsOn
.ab72	f0 28		beq $ab9c			beq 	_GXLFail
.ab74	20 4c b0	jsr $b04c			jsr 	GXOpenBitmap
.ab77	20 92 b1	jsr $b192			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ab7a	20 42 ac	jsr $ac42			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ab7d	20 5c b0	jsr $b05c			jsr 	GXPositionCalc 				; calculate position/offset.
.ab80					_GXDrawLoop:
.ab80	ac 53 06	ldy $0653			ldy 	gsOffset 					; draw the pixel
.ab83	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ab85	2d 51 06	and $0651			and 	gxANDValue
.ab88	4d 50 06	eor $0650			eor 	gxEORValue
.ab8b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ab8d	20 9e ab	jsr $ab9e			jsr 	GXLineIsComplete 			; is the line complete ?
.ab90	f0 05		beq $ab97			beq 	_GXLExit
.ab92	20 b9 ab	jsr $abb9			jsr 	GXLineAdvance 				; code as per advance method
.ab95	80 e9		bra $ab80			bra 	_GXDrawLoop
.ab97					_GXLExit:
.ab97	20 54 b0	jsr $b054			jsr 	GXCloseBitmap
.ab9a	18		clc				clc
.ab9b	60		rts				rts
.ab9c					_GXLFail:
.ab9c	38		sec				sec
.ab9d	60		rts				rts
.ab9e					GXLineIsComplete:
.ab9e	ad e0 06	lda $06e0			lda 	GXIsDiffYLarger 			; is dy larger
.aba1	d0 0f		bne $abb2			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.aba3	ad 41 06	lda $0641			lda 	GXX0 						; compare X, LSB and MSB
.aba6	4d 45 06	eor $0645			eor 	GXX1
.aba9	d0 06		bne $abb1			bne 	_GXLICExit
.abab	ad 42 06	lda $0642			lda 	GXX0+1
.abae	4d 46 06	eor $0646			eor 	GXX1+1
.abb1					_GXLICExit:
.abb1	60		rts				rts
.abb2					_GXLICCompareY:
.abb2	ad 47 06	lda $0647			lda 	GXY1
.abb5	4d 43 06	eor $0643			eor 	GXY0
.abb8	60		rts				rts
.abb9					GXLineAdvance:
.abb9	18		clc				clc 								; add adjust to position
.abba	ad e2 06	lda $06e2			lda 	GXPosition
.abbd	6d e3 06	adc $06e3			adc 	GXAdjust
.abc0	8d e2 06	sta $06e2			sta 	GXPosition
.abc3	9c e5 06	stz $06e5			stz 	GXAddSelect 				; clear add select flag
.abc6	b0 05		bcs $abcd			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.abc8	cd e4 06	cmp $06e4			cmp 	GXTotal 					; if exceeded total
.abcb	90 0a		bcc $abd7			bcc 	_GXLANoExtra
.abcd					_GXLAOverflow:
.abcd	ce e5 06	dec $06e5			dec 	GXAddSelect 				; set addselect to $FF
.abd0	38		sec				sec 								; subtract total and write back
.abd1	ed e4 06	sbc $06e4			sbc 	GXTotal
.abd4	8d e2 06	sta $06e2			sta 	GXPosition
.abd7					_GXLANoExtra:
.abd7	ad e0 06	lda $06e0			lda 	GXIsDiffYLarger
.abda	f0 0d		beq $abe9			beq 	_GXDXLarger
.abdc	20 3b ac	jsr $ac3b			jsr 	GXIncrementY
.abdf	ad e5 06	lda $06e5			lda 	GXAddSelect
.abe2	f0 10		beq $abf4			beq 	_GXLAExit
.abe4	20 f5 ab	jsr $abf5			jsr 	GXAdjustX
.abe7	80 0b		bra $abf4			bra 	_GXLAExit
.abe9					_GXDXLarger:
.abe9	20 f5 ab	jsr $abf5			jsr 	GXAdjustX
.abec	ad e5 06	lda $06e5			lda 	GXAddSelect
.abef	f0 03		beq $abf4			beq 	_GXLAExit
.abf1	20 3b ac	jsr $ac3b			jsr 	GXIncrementY
.abf4					_GXLAExit:
.abf4	60		rts				rts
.abf5					GXAdjustX:
.abf5	ad e1 06	lda $06e1			lda 	GXDXNegative
.abf8	10 25		bpl $ac1f			bpl 	_GXAXRight
.abfa	ad 41 06	lda $0641			lda 	GXX0
.abfd	d0 03		bne $ac02			bne 	_GXAXNoBorrow
.abff	ce 42 06	dec $0642			dec 	GXX0+1
.ac02					_GXAXNoBorrow:
.ac02	ce 41 06	dec $0641			dec 	GXX0
.ac05	ce 53 06	dec $0653			dec 	gsOffset 					; pixel left
.ac08	ad 53 06	lda $0653			lda 	gsOffset
.ac0b	c9 ff		cmp #$ff			cmp 	#$FF
.ac0d	d0 0f		bne $ac1e			bne 	_GXAYExit 					; underflow
.ac0f	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ac11	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ac13	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ac15	b0 07		bcs $ac1e			bcs 	_GXAYExit
.ac17	18		clc				clc
.ac18	69 20		adc #$20			adc 	#$20 						; fix up
.ac1a	85 3d		sta $3d				sta 	gxzScreen+1
.ac1c	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ac1e					_GXAYExit:
.ac1e	60		rts				rts
.ac1f					_GXAXRight:
.ac1f	ee 41 06	inc $0641			inc 	GXX0
.ac22	d0 03		bne $ac27			bne 	_GXAXNoCarry
.ac24	ee 42 06	inc $0642			inc 	GXX0+1
.ac27					_GXAXNoCarry:
.ac27	ee 53 06	inc $0653			inc 	gsOffset 					; pixel right
.ac2a	d0 0e		bne $ac3a			bne 	_GXAXExit 					; if not overflowed, exit.
.ac2c	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ac2e	a5 3d		lda $3d				lda 	gxzScreen+1
.ac30	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ac32	90 06		bcc $ac3a			bcc 	_GXAXExit
.ac34	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ac36	85 3d		sta $3d				sta 	gxzScreen+1
.ac38	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ac3a					_GXAXExit:
.ac3a	60		rts				rts
.ac3b					GXIncrementY:
.ac3b	ee 43 06	inc $0643			inc 	GXY0
.ac3e	20 b2 b0	jsr $b0b2			jsr 	GXMovePositionDown
.ac41	60		rts				rts
.ac42					GXLineSetup:
.ac42	ad 47 06	lda $0647			lda 	GXY1
.ac45	38		sec				sec
.ac46	ed 43 06	sbc $0643			sbc 	GXY0
.ac49	4a		lsr a				lsr 	a
.ac4a	8d df 06	sta $06df			sta 	GXDiffY
.ac4d	9c e1 06	stz $06e1			stz 	GXDXNegative 				; clear -ve flag
.ac50	38		sec				sec
.ac51	ad 45 06	lda $0645			lda 	GXX1
.ac54	ed 41 06	sbc $0641			sbc 	GXX0
.ac57	8d de 06	sta $06de			sta 	GXDiffX
.ac5a	ad 46 06	lda $0646			lda 	GXX1+1 						; calculate MSB
.ac5d	ed 42 06	sbc $0642			sbc 	GXX0+1
.ac60	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.ac61	6e de 06	ror $06de			ror 	GXDiffX
.ac64	0a		asl a				asl 	a
.ac65	10 0c		bpl $ac73			bpl 	_GDXNotNegative
.ac67	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.ac69	38		sec				sec
.ac6a	ed de 06	sbc $06de			sbc 	GXDiffX
.ac6d	8d de 06	sta $06de			sta 	GXDiffX
.ac70	ce e1 06	dec $06e1			dec 	GXDXNegative 				; -ve flag = $FF.
.ac73					_GDXNotNegative:
.ac73	9c e0 06	stz $06e0			stz 	GXIsDiffYLarger 			; clear larger flag
.ac76	ad df 06	lda $06df			lda 	GXDiffY 					; set adjust and total.
.ac79	8d e3 06	sta $06e3			sta 	GXAdjust
.ac7c	ad de 06	lda $06de			lda 	GXDiffX
.ac7f	8d e4 06	sta $06e4			sta 	GXTotal
.ac82	ad df 06	lda $06df			lda 	GXDiffY 					; if dy > dx
.ac85	cd de 06	cmp $06de			cmp 	GXDiffX
.ac88	90 0f		bcc $ac99			bcc 	_GDXNotLarger
.ac8a	ce e0 06	dec $06e0			dec 	GXIsDiffYLarger 			; set the dy larger flag
.ac8d	ad de 06	lda $06de			lda 	GXDiffX 					; set adjust and total other way round
.ac90	8d e3 06	sta $06e3			sta 	GXAdjust
.ac93	ad df 06	lda $06df			lda 	GXDiffY
.ac96	8d e4 06	sta $06e4			sta 	GXTotal
.ac99					_GDXNotLarger:
.ac99	ad e4 06	lda $06e4			lda 	GXTotal
.ac9c	4a		lsr a				lsr 	a
.ac9d	8d e2 06	sta $06e2			sta 	GXPosition
.aca0	60		rts				rts
.06de					GXDiffX:
>06de							.fill 	1
.06df					GXDiffY:
>06df							.fill 	1
.06e0					GXIsDiffYLarger:
>06e0							.fill 	1
.06e1					GXDXNegative:
>06e1							.fill 	1
.06e2					GXPosition:
>06e2							.fill 	1
.06e3					GXAdjust:
>06e3							.fill 	1
.06e4					GXTotal:
>06e4							.fill 	1
.06e5					GXAddSelect:
>06e5							.fill 	1
.aca1					GXSetColourMode:
.aca1	a6 36		ldx $36				ldx 	gxzTemp0
.aca3	8e 4f 06	stx $064f			stx 	gxColour 								; set colour
.aca6	a5 37		lda $37				lda 	gxzTemp0+1 								;
.aca8	8d 4e 06	sta $064e			sta 	gxMode 									; set mode
.acab	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.acad	9c 51 06	stz $0651			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.acb0	ae 4f 06	ldx $064f			ldx 	gxColour
.acb3	8e 50 06	stx $0650			stx 	gxEORValue
.acb6	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.acb8	90 03		bcc $acbd			bcc 	_GXSDCNotAndColour
.acba	8e 51 06	stx $0651			stx 	gxANDValue
.acbd					_GXSDCNotAndColour:
.acbd	d0 03		bne $acc2			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.acbf	9c 50 06	stz $0650			stz 	gxEORValue
.acc2					_GXSDCNotAnd:
.acc2	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.acc3	90 08		bcc $accd			bcc 	_GXSDCNoFlip
.acc5	ad 51 06	lda $0651			lda	 	gxANDValue
.acc8	49 ff		eor #$ff			eor 	#$FF
.acca	8d 51 06	sta $0651			sta 	gxANDValue
.accd					_GXSDCNoFlip:
.accd	18		clc				clc
.acce	60		rts				rts
.accf					GXPlotPoint:
.accf	20 4c b0	jsr $b04c			jsr 	GXOpenBitmap 				; start drawing
.acd2	20 5c b0	jsr $b05c			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.acd5	ac 53 06	ldy $0653			ldy 	gsOffset
.acd8	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.acda	2d 51 06	and $0651			and 	gxANDValue
.acdd	4d 50 06	eor $0650			eor 	gxEORValue
.ace0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ace2	20 54 b0	jsr $b054			jsr 	GXCloseBitmap 				; stop drawing and exit
.ace5	18		clc				clc
.ace6	60		rts				rts
.ace7					GXFillRectangle:
.ace7	38		sec				sec
.ace8	80 01		bra $aceb			bra 	GXRectangle
.acea					GXFrameRectangle:
.acea	18		clc				clc
.aceb					GXRectangle:
.aceb	ad 4a 06	lda $064a			lda 	gxBitmapsOn
.acee	f0 35		beq $ad25			beq 	_GXRFail
.acf0	08		php				php 								; save Fill flag (CS)
.acf1	20 4c b0	jsr $b04c			jsr 	GXOpenBitmap 				; start drawing
.acf4	20 74 b1	jsr $b174			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.acf7	20 5c b0	jsr $b05c			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.acfa	38		sec				sec 								; sec = Draw line
.acfb	20 27 ad	jsr $ad27			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.acfe	ad 43 06	lda $0643			lda 	gxY0 						; reached end of rectangle ?
.ad01	cd 47 06	cmp $0647			cmp 	gxY1
.ad04	f0 19		beq $ad1f			beq 	_GXRectangleExit
.ad06					_GXRectLoop:
.ad06	20 b2 b0	jsr $b0b2			jsr 	GXMovePositionDown 			; down one.
.ad09	ee 43 06	inc $0643			inc 	gxY0 						; change Y pos
.ad0c	ad 43 06	lda $0643			lda 	gxY0 						; reached last line
.ad0f	cd 47 06	cmp $0647			cmp 	gXY1
.ad12	f0 07		beq $ad1b			beq 	_GXLastLine
.ad14	28		plp				plp 								; get flag back
.ad15	08		php				php
.ad16	20 27 ad	jsr $ad27			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ad19	80 eb		bra $ad06			bra 	_GXRectLoop
.ad1b					_GXLastLine:
.ad1b	38		sec				sec
.ad1c	20 27 ad	jsr $ad27			jsr 	GXDrawLineX1X0
.ad1f					_GXRectangleExit:
.ad1f	68		pla				pla 								; throw fill flag.
.ad20	20 54 b0	jsr $b054			jsr 	GXCloseBitmap 				; stop drawing and exit
.ad23	18		clc				clc
.ad24	60		rts				rts
.ad25					_GXRFail:
.ad25	38		sec				sec
.ad26	60		rts				rts
.ad27					GXDrawLineX1X0:
.ad27	08		php				php 								; save solid/either-end
.ad28	38		sec				sec
.ad29	ad 45 06	lda $0645			lda		gXX1
.ad2c	ed 41 06	sbc $0641			sbc 	gXX0
.ad2f	85 36		sta $36				sta 	gxzTemp0
.ad31	ad 46 06	lda $0646			lda 	gXX1+1
.ad34	ed 42 06	sbc $0642			sbc 	gXX0+1
.ad37	85 37		sta $37				sta 	gxzTemp0+1
.ad39	28		plp				plp
.ad3a					GXDrawLineTemp0:
.ad3a	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.ad3c	48		pha				pha
.ad3d	a5 3d		lda $3d				lda 	gxzScreen+1
.ad3f	48		pha				pha
.ad40	ad 53 06	lda $0653			lda 	gsOffset
.ad43	48		pha				pha
.ad44	a5 0b		lda $0b				lda 	GXEditSlot
.ad46	48		pha				pha
.ad47	ac 53 06	ldy $0653			ldy 	gsOffset 					; Y offset
.ad4a	90 1e		bcc $ad6a			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.ad4c					_GXDLTLine:
.ad4c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.ad4e	2d 51 06	and $0651			and 	gxANDValue
.ad51	4d 50 06	eor $0650			eor 	gxEORValue
.ad54	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad56	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.ad58	d0 04		bne $ad5e			bne 	_GXDLTNoBorrow
.ad5a	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.ad5c	30 2e		bmi $ad8c			bmi 	_GXDLTExit
.ad5e					_GXDLTNoBorrow:
.ad5e	c6 36		dec $36				dec 	gxzTemp0
.ad60	c8		iny				iny 								; next slot.
.ad61	d0 e9		bne $ad4c			bne 	_GXDLTLine
.ad63	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.ad65	20 9a ad	jsr $ad9a			jsr 	GXDLTCheckWrap				; check for new page.
.ad68	80 e2		bra $ad4c			bra 	_GXDLTLine
.ad6a					_GXDLTEndPoints:
.ad6a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.ad6c	2d 51 06	and $0651			and 	gxANDValue
.ad6f	4d 50 06	eor $0650			eor 	gxEORValue
.ad72	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad74	98		tya				tya 								; advance to right side
.ad75	18		clc				clc
.ad76	65 36		adc $36				adc 	gxzTemp0
.ad78	a8		tay				tay
.ad79	a5 3d		lda $3d				lda 	gxzScreen+1
.ad7b	65 37		adc $37				adc 	gxzTemp0+1
.ad7d	85 3d		sta $3d				sta 	gxzScreen+1
.ad7f	20 9a ad	jsr $ad9a			jsr 	GXDLTCheckWrap 			; fix up.
.ad82	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ad84	2d 51 06	and $0651			and 	gxANDValue
.ad87	4d 50 06	eor $0650			eor 	gxEORValue
.ad8a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad8c					_GXDLTExit:
.ad8c	68		pla				pla
.ad8d	85 0b		sta $0b				sta 	GXEditSlot
.ad8f	68		pla				pla
.ad90	8d 53 06	sta $0653			sta 	gsOffset
.ad93	68		pla				pla
.ad94	85 3d		sta $3d				sta 	gxzScreen+1
.ad96	68		pla				pla
.ad97	85 3c		sta $3c				sta 	gxzScreen
.ad99	60		rts				rts
.ad9a					GXDLTCheckWrap:
.ad9a	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ad9c	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ad9e	90 06		bcc $ada6			bcc 	_GXDLTCWExit
.ada0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ada2	85 3d		sta $3d				sta 	gxzScreen+1
.ada4	e6 0b		inc $0b				inc 	GXEditSlot
.ada6					_GXDLTCWExit:
.ada6	60		rts				rts
.ada7					GXDrawGraphicElement:
.ada7	8d e6 06	sta $06e6			sta 	gxSize 						; save size
.adaa	3a		dec a				dec 	a
.adab	8d e7 06	sta $06e7			sta 	gxMask 						; and mask
.adae	ad 4a 06	lda $064a			lda 	gxBitmapsOn 				; check BMP on
.adb1	f0 67		beq $ae1a			beq 	_GXSLFail
.adb3	ad 43 06	lda $0643			lda 	gxY0 						; push Y on stack
.adb6	48		pha				pha
.adb7	8c e9 06	sty $06e9			sty 	gxAcquireVector+1 			; and acquisition vector
.adba	8e e8 06	stx $06e8			stx 	gxAcquireVector
.adbd	20 4c b0	jsr $b04c			jsr 	gxOpenBitmap 				; open the bitmap.
.adc0	ad eb 06	lda $06eb			lda 	gxUseMode 					; scale bits
.adc3	4a		lsr a				lsr 	a
.adc4	4a		lsr a				lsr 	a
.adc5	4a		lsr a				lsr 	a
.adc6	29 07		and #$07			and		#7
.adc8	1a		inc a				inc 	a
.adc9	8d ea 06	sta $06ea			sta 	gxScale
.adcc	64 38		stz $38				stz 	gxzTemp1					; start first line
.adce					_GXGELoop:
.adce	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.add0	2c eb 06	bit $06eb			bit 	gxUseMode 					; check for flip.
.add3	10 06		bpl $addb			bpl		_GXNoVFlip
.add5	ad e7 06	lda $06e7			lda 	gxMask
.add8	38		sec				sec
.add9	e5 38		sbc $38				sbc 	gxzTemp1
.addb					_GXNoVFlip:
.addb	aa		tax				tax 								; get the Xth line.
.addc	20 1c ae	jsr $ae1c			jsr 	_GXCallAcquire 				; get that data.
.addf	ad ea 06	lda $06ea			lda 	gxScale 					; do scale identical copies of that line.
.ade2	85 39		sta $39				sta 	gxzTemp1+1
.ade4					_GXGELoop2:
.ade4	ad 43 06	lda $0643			lda 	gxY0 						; off screen
.ade7	cd 4d 06	cmp $064d			cmp 	gxHeight
.adea	b0 10		bcs $adfc			bcs 	_GXDGEExit
.adec	20 1f ae	jsr $ae1f			jsr 	GXRenderOneLine 			; render line
.adef	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.adf1	d0 f1		bne $ade4			bne 	_GXGELoop2
.adf3	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.adf5	a5 38		lda $38				lda 	gxzTemp1
.adf7	cd e6 06	cmp $06e6			cmp 	gxSize
.adfa	d0 d2		bne $adce			bne 	_GXGELoop
.adfc					_GXDGEExit:
.adfc	68		pla				pla 								; restore Y for next time
.adfd	8d 43 06	sta $0643			sta 	gxY0
.ae00	ae ea 06	ldx $06ea			ldx 	gxScale 					; get scale (1-8)
.ae03					_GXShiftLeft:
.ae03	18		clc				clc
.ae04	ad e6 06	lda $06e6			lda 	gxSize
.ae07	6d 41 06	adc $0641			adc 	gxX0
.ae0a	8d 41 06	sta $0641			sta 	gxX0
.ae0d	90 03		bcc $ae12			bcc 	_GXSLNoCarry
.ae0f	ee 42 06	inc $0642			inc 	gxX0+1
.ae12					_GXSLNoCarry:
.ae12	ca		dex				dex
.ae13	d0 ee		bne $ae03			bne 	_GXShiftLeft
.ae15	20 54 b0	jsr $b054			jsr 	GXCloseBitmap
.ae18	18		clc				clc
.ae19	60		rts				rts
.ae1a					_GXSLFail:
.ae1a	38		sec				sec
.ae1b	60		rts				rts
.ae1c					_GXCallAcquire:
.ae1c	6c e8 06	jmp ($06e8)			jmp 	(gxAcquireVector)
.ae1f					GXRenderOneLine:
.ae1f	20 5c b0	jsr $b05c			jsr 	GXPositionCalc 				; calculate position/offset.
.ae22	ac 53 06	ldy $0653			ldy 	gsOffset 					; Y contains position.
.ae25	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.ae27					_GXROLLoop1:
.ae27	ad ea 06	lda $06ea			lda 	gxScale 					; set to do 'scale' times
.ae2a	85 3b		sta $3b				sta 	gxzTemp2+1
.ae2c					_GXROLLoop2:
.ae2c	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.ae2e	2c 4e 06	bit $064e			bit 	gxMode 						; check H Flip
.ae31	50 06		bvc $ae39			bvc 	_GXNoHFlip
.ae33	ad e7 06	lda $06e7			lda 	gxMask
.ae36	38		sec				sec
.ae37	e5 3a		sbc $3a				sbc 	gxzTemp2
.ae39					_GXNoHFlip:
.ae39	aa		tax				tax 								; read from the pixel buffer
.ae3a	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.ae3d	d0 07		bne $ae46			bne 	_GXDraw 					; draw if non zero
.ae3f	ad eb 06	lda $06eb			lda 	gxUseMode 					; check to see if solid background
.ae42	29 04		and #$04			and 	#4
.ae44	f0 0a		beq $ae50			beq 	_GXZeroPixel
.ae46					_GXDraw:
.ae46	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ae48	2d 51 06	and $0651			and 	gxANDValue
.ae4b	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.ae4e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae50					_GXZeroPixel:
.ae50	c8		iny				iny 								; advance pointer
.ae51	d0 05		bne $ae58			bne 	_GXNoShift
.ae53	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.ae55	20 9a ad	jsr $ad9a			jsr 	GXDLTCheckWrap				; check for new page.
.ae58					_GXNoShift:
.ae58	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.ae5a	d0 d0		bne $ae2c			bne 	_GXROLLoop2
.ae5c	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.ae5e	a5 3a		lda $3a				lda 	gxzTemp2
.ae60	cd e6 06	cmp $06e6			cmp 	gxSize
.ae63	d0 c2		bne $ae27			bne 	_GXROLLoop1
.ae65	ee 43 06	inc $0643			inc 	gxY0
.ae68	60		rts				rts
.06e6					gxSize:
>06e6							.fill 	1
.06e7					gxMask:
>06e7							.fill 	1
.06e8					gxAcquireVector:
>06e8							.fill 	2
.06ea					gxScale:
>06ea							.fill 	1
.06eb					gxUseMode:
>06eb							.fill 	1
.ae69					GXFontHandler:
.ae69	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ae6b	4d 4e 06	eor $064e			eor 	gxMode
.ae6e	8d eb 06	sta $06eb			sta 	gxUseMode
.ae71	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.ae73	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.ae75	26 37		rol $37				rol	 	gxzTemp0+1
.ae77	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.ae79	26 37		rol $37				rol	 	gxzTemp0+1
.ae7b	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.ae7d	26 37		rol $37				rol	 	gxzTemp0+1
.ae7f	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ae81	09 c0		ora #$c0			ora 	#$C0
.ae83	85 37		sta $37				sta 	gxzTemp0+1
.ae85	a9 08		lda #$08			lda 	#8 							; size 8x8
.ae87	a2 8f		ldx #$8f			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.ae89	a0 ae		ldy #$ae			ldy 	#GXGetGraphicDataFont >> 8
.ae8b	20 a7 ad	jsr $ada7			jsr 	GXDrawGraphicElement
.ae8e	60		rts				rts
.ae8f					GXGetGraphicDataFont:
.ae8f	8a		txa				txa 								; X->Y
.ae90	a8		tay				tay
.ae91	a6 01		ldx $01				ldx 	1 							; preserve old value
.ae93	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.ae95	85 01		sta $01				sta 	1
.ae97	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.ae99	86 01		stx $01				stx 	1 							; put old value back.
.ae9b	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.ae9d					_GXExpand:
.ae9d	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.aea0	0a		asl a				asl 	a 							; shift bit 7 into C
.aea1	90 08		bcc $aeab			bcc 	_GXNoPixel
.aea3	48		pha				pha 								; if set, set pixel buffer to current colour.
.aea4	ad 4f 06	lda $064f			lda 	gxColour
.aea7	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.aeaa	68		pla				pla
.aeab					_GXNoPixel:
.aeab	e8		inx				inx 								; do the whole byte.
.aeac	e0 08		cpx #$08			cpx 	#8
.aeae	d0 ed		bne $ae9d			bne 	_GXExpand
.aeb0	60		rts				rts
.aeb1					GXSpriteHandler:
.aeb1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.aeb3	4d 4e 06	eor $064e			eor 	gxMode
.aeb6	8d eb 06	sta $06eb			sta 	gxUseMode
.aeb9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.aebb	da		phx				phx
.aebc	20 4c b0	jsr $b04c			jsr 	GXOpenBitmap 				; can access sprite information
.aebf	68		pla				pla
.aec0	20 2d b1	jsr $b12d			jsr 	GXFindSprite 				; get the sprite address
.aec3	08		php				php
.aec4	20 54 b0	jsr $b054			jsr 	GXCloseBitmap
.aec7	28		plp				plp
.aec8	b0 0a		bcs $aed4			bcs		_GXSHExit 					; exit if find failed.
.aeca	ad ec 06	lda $06ec			lda 	GXSizePixels 				; return size
.aecd	a2 d5		ldx #$d5			ldx 	#GXSpriteAcquire & $FF
.aecf	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.aed1	20 a7 ad	jsr $ada7			jsr 	GXDrawGraphicElement
.aed4					_GXSHExit:
.aed4	60		rts				rts
.aed5					GXSpriteAcquire:
.aed5	ad 4c 06	lda $064c			lda 	GXSpritePage				; point to base page
.aed8	85 0b		sta $0b				sta 	GXEditSlot
.aeda	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.aedc	a9 00		lda #$00			lda 	#0
.aede	ae ed 06	ldx $06ed			ldx 	GXSizeBits
.aee1					_GXTimesRowNumber:
.aee1	18		clc				clc
.aee2	65 36		adc $36				adc 	zTemp0
.aee4	ca		dex				dex
.aee5	10 fa		bpl $aee1			bpl 	_GXTimesRowNumber
.aee7	64 37		stz $37				stz 	gxzTemp0+1
.aee9	0a		asl a				asl 	a 							; row x 2,4,6,8
.aeea	26 37		rol $37				rol 	gxzTemp0+1
.aeec	0a		asl a				asl 	a 							; row x 4,8,12,16
.aeed	26 37		rol $37				rol 	gxzTemp0+1
.aeef	0a		asl a				asl 	a 							; row x 8,16,24,32
.aef0	26 37		rol $37				rol 	gxzTemp0+1
.aef2	85 36		sta $36				sta 	gxzTemp0
.aef4	18		clc				clc 								; add base address.
.aef5	a5 36		lda $36				lda 	gxzTemp0
.aef7	6d ef 06	adc $06ef			adc 	GXSpriteOffset
.aefa	85 36		sta $36				sta 	gxzTemp0
.aefc	a5 37		lda $37				lda 	gxzTemp0+1
.aefe	6d f0 06	adc $06f0			adc 	GXSpriteOffset+1
.af01					_GXSAFindPage:
.af01	c9 20		cmp #$20			cmp 	#$20 						; on this page
.af03	90 06		bcc $af0b			bcc 	_GXSAFoundPage
.af05	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.af07	e6 0b		inc $0b				inc 	GXEditSlot
.af09	80 f6		bra $af01			bra 	_GXSAFindPage
.af0b					_GXSAFoundPage:
.af0b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.af0d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.af0f	a0 00		ldy #$00			ldy 	#0
.af11					_GXSACopyLoop:
.af11	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.af13	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.af16	c8		iny				iny
.af17	cc ec 06	cpy $06ec			cpy 	GXSizePixels
.af1a	d0 f5		bne $af11			bne 	_GXSACopyLoop
.af1c	60		rts				rts
.af1d					GXSelect:
.af1d	ad 49 06	lda $0649			lda 	gxSpritesOn
.af20	f0 22		beq $af44			beq 	_GXSFail
.af22	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.af24	c9 40		cmp #$40			cmp 	#64
.af26	b0 1c		bcs $af44			bcs 	_GXSFail
.af28	8d 54 06	sta $0654			sta 	GSCurrentSpriteID
.af2b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.af2d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.af2f	06 36		asl $36				asl 	gxzTemp0
.af31	06 36		asl $36				asl 	gxzTemp0
.af33	06 36		asl $36				asl 	gxzTemp0
.af35	2a		rol a				rol 	a
.af36	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.af38	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.af3b	85 37		sta $37				sta 	gxzTemp0+1
.af3d	a5 36		lda $36				lda 	gxzTemp0
.af3f	8d 55 06	sta $0655			sta 	GSCurrentSpriteAddr
.af42	18		clc				clc
.af43	60		rts				rts
.af44					_GXSFail:
.af44	38		sec				sec
.af45	60		rts				rts
.af46					GXSelectImage:
.af46	ad 49 06	lda $0649			lda 	gxSpritesOn
.af49	f0 74		beq $afbf			beq 	_GXSIFail
.af4b	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.af4e	f0 6f		beq $afbf			beq 	_GXSIFail 					; (checking the MSB)
.af50	64 01		stz $01				stz 	1
.af52	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.af54	d0 6b		bne $afc1			bne 	_GXSIHide
.af56	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.af58	48		pha				pha
.af59	20 4c b0	jsr $b04c			jsr 	GXOpenBitmap
.af5c	68		pla				pla
.af5d	20 2d b1	jsr $b12d			jsr 	GXFindSprite
.af60	b0 5a		bcs $afbc			bcs 	_GXSICloseFail 				; no image
.af62	a0 01		ldy #$01			ldy 	#1
.af64	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr
.af67	85 36		sta $36				sta 	gxzTemp0
.af69	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1
.af6c	85 37		sta $37				sta 	gxzTemp0+1
.af6e	ad ef 06	lda $06ef			lda 	GXSpriteOffset
.af71	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.af73	18		clc				clc
.af74	ad f0 06	lda $06f0			lda 	GXSpriteOffset+1
.af77	6d 57 06	adc $0657			adc 	GXSpriteOffsetBase
.af7a	c8		iny				iny
.af7b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.af7d	ad 58 06	lda $0658			lda 	GXSpriteOffsetBase+1
.af80	69 00		adc #$00			adc 	#0
.af82	c8		iny				iny
.af83	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.af85	ad ed 06	lda $06ed			lda 	GXSizeBits 					; get raw size
.af88	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.af8a	2a		rol a				rol 	a 							; x 2
.af8b	0a		asl a				asl 	a 							; x 4
.af8c	0a		asl a				asl 	a 							; x 8
.af8d	0a		asl a				asl 	a 							; x 16
.af8e	0d ee 06	ora $06ee			ora 	GXSpriteLUT 				; Or with LUT
.af91	0a		asl a				asl 	a 							; 1 shift
.af92	09 01		ora #$01			ora 	#1 							; enable sprite.
.af94	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.af96	20 54 b0	jsr $b054			jsr 	GXCloseBitmap
.af99	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.af9c	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.af9f	29 3f		and #$3f			and 	#$3F
.afa1	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.afa4	ad ed 06	lda $06ed			lda 	GXSizeBits 					; get bit size
.afa7	6a		ror a				ror 	a 							; shift into bits 6/7
.afa8	6a		ror a				ror 	a
.afa9	6a		ror a				ror 	a
.afaa	29 c0		and #$c0			and 	#$C0
.afac	1d 99 06	ora $0699,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.afaf	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.afb2	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.afb5	29 7f		and #$7f			and 	#$7F
.afb7	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.afba	18		clc				clc
.afbb	60		rts				rts
.afbc					_GXSICloseFail:
.afbc	20 54 b0	jsr $b054			jsr 	GXCloseBitmap
.afbf					_GXSIFail:
.afbf	38		sec				sec
.afc0	60		rts				rts
.afc1					_GXSIHide:
.afc1	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.afc4	85 36		sta $36				sta 	gxzTemp0
.afc6	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1
.afc9	85 37		sta $37				sta 	gxzTemp0+1
.afcb	a9 00		lda #$00			lda 	#0
.afcd	92 36		sta ($36)			sta 	(gxzTemp0)
.afcf	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; get sprite ID
.afd2	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.afd5	09 80		ora #$80			ora 	#$80
.afd7	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.afda	18		clc				clc
.afdb	60		rts				rts
.afdc					GXMoveSprite:
.afdc	ad 49 06	lda $0649			lda 	gxSpritesOn
.afdf	f0 65		beq $b046			beq 	_GXSIFail
.afe1	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.afe4	f0 60		beq $b046			beq 	_GXSIFail
.afe6	85 37		sta $37				sta 	gxzTemp0+1
.afe8	a0 04		ldy #$04			ldy 	#4
.afea	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr
.afed	85 36		sta $36				sta 	gxzTemp0
.afef	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.aff2	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.aff5	2a		rol a				rol 	a	 						; into bits 0,1.
.aff6	2a		rol a				rol 	a
.aff7	2a		rol a				rol 	a
.aff8	29 03		and #$03			and 	#3
.affa	aa		tax				tax
.affb	bd 48 b0	lda $b048,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.affe	48		pha				pha
.afff	18		clc				clc
.b000	6d 41 06	adc $0641			adc 	gxX0						; copy position.
.b003	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b005	c8		iny				iny
.b006	ad 42 06	lda $0642			lda 	gxX0+1
.b009	69 00		adc #$00			adc 	#0
.b00b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b00d	c8		iny				iny
.b00e	68		pla				pla
.b00f	18		clc				clc
.b010	6d 43 06	adc $0643			adc 	gxY0
.b013	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b015	a9 00		lda #$00			lda 	#0
.b017	69 00		adc #$00			adc 	#0
.b019	c8		iny				iny
.b01a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b01c	4e 42 06	lsr $0642			lsr 	gxX0+1 						; divide X by 4
.b01f	6e 41 06	ror $0641			ror 	gxX0
.b022	4e 41 06	lsr $0641			lsr 	gxX0
.b025	4e 43 06	lsr $0643			lsr 	gxY0 						; divide Y by 4
.b028	4e 43 06	lsr $0643			lsr 	gxY0
.b02b	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b02e	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x
.b031	29 80		and #$80			and 	#$80
.b033	0d 41 06	ora $0641			ora 	gxX0
.b036	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.b039	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.b03c	29 c0		and #$c0			and 	#$C0
.b03e	0d 43 06	ora $0643			ora 	gxY0
.b041	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.b044	18		clc				clc
.b045	60		rts				rts
.b046					_GXSIFail:
.b046	38		sec				sec
.b047	60		rts				rts
.b048					_GXMSOffset:
>b048	1c						.byte 	32-8/2
>b049	18						.byte 	32-16/2
>b04a	14						.byte 	32-24/2
>b04b	10						.byte 	32-32/2
.b04c					GXOpenBitmap:
.b04c	78		sei				sei 								; no interrupts here
.b04d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b04f	8d 52 06	sta $0652			sta 	gxOriginalLUTValue
.b052	58		cli				cli
.b053	60		rts				rts
.b054					GXCloseBitmap:
.b054	78		sei				sei
.b055	ad 52 06	lda $0652			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b058	85 0b		sta $0b				sta 	GXEditSlot
.b05a	58		cli				cli
.b05b	60		rts				rts
.b05c					GXPositionCalc:
.b05c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b05e	48		pha				pha
.b05f	ad 43 06	lda $0643			lda 	GXY0 						; gxzScreen = Y0
.b062	85 3c		sta $3c				sta 	gxzScreen
.b064	64 3d		stz $3d				stz 	gxzScreen+1
.b066	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b068	26 3d		rol $3d				rol 	gxzScreen+1
.b06a	06 3c		asl $3c				asl 	gxzScreen
.b06c	26 3d		rol $3d				rol 	gxzScreen+1
.b06e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b06f	65 3c		adc $3c				adc 	gxzScreen
.b071	85 3c		sta $3c				sta 	gxzScreen
.b073	90 02		bcc $b077			bcc 	_GXPCNoCarry
.b075	e6 3d		inc $3d				inc 	gxzScreen+1
.b077					_GXPCNoCarry:
.b077	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b079	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b07b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b07d	85 36		sta $36				sta 	gxzTemp0
.b07f	64 3d		stz $3d				stz 	gxzScreen+1
.b081	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b083					_GXPCMultiply32:
.b083	06 3c		asl $3c				asl 	gxzScreen
.b085	26 3d		rol $3d				rol 	gxzScreen+1
.b087	3a		dec a				dec 	a
.b088	d0 f9		bne $b083			bne 	_GXPCMultiply32
.b08a	18		clc				clc
.b08b	ad 41 06	lda $0641			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b08e	65 3c		adc $3c				adc 	gxzScreen
.b090	8d 53 06	sta $0653			sta 	gsOffset
.b093	ad 42 06	lda $0642			lda 	GXX0+1
.b096	65 3d		adc $3d				adc 	gxzScreen+1
.b098	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b09a	90 04		bcc $b0a0			bcc 	_GXPCNoOverflow
.b09c	29 1f		and #$1f			and 	#$1F 						; fix it up
.b09e	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b0a0					_GXPCNoOverflow:
.b0a0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b0a2	85 3d		sta $3d				sta 	gxzScreen+1
.b0a4	64 3c		stz $3c				stz 	gxzScreen
.b0a6	18		clc				clc
.b0a7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b0a9	6d 4b 06	adc $064b			adc 	gxBasePage 					; by adding the base page
.b0ac	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b0ae	68		pla				pla
.b0af	85 36		sta $36				sta 	gxzTemp0
.b0b1	60		rts				rts
.b0b2					GXMovePositionDown:
.b0b2	18		clc				clc 								; add 320 to offset/temp+1
.b0b3	ad 53 06	lda $0653			lda 	gsOffset
.b0b6	69 40		adc #$40			adc 	#64
.b0b8	8d 53 06	sta $0653			sta 	gsOffset
.b0bb	a5 3d		lda $3d				lda 	gxzScreen+1
.b0bd	69 01		adc #$01			adc 	#1
.b0bf	85 3d		sta $3d				sta 	gxzScreen+1
.b0c1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b0c3	90 07		bcc $b0cc			bcc 	_GXMPDExit
.b0c5	38		sec				sec  								; next page
.b0c6	e9 20		sbc #$20			sbc 	#$20
.b0c8	85 3d		sta $3d				sta 	gxzScreen+1
.b0ca	e6 0b		inc $0b				inc 	GXEditSlot
.b0cc					_GXMPDExit:
.b0cc	60		rts				rts
.b0cd					GXCollide:
.b0cd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b0cf	aa		tax				tax
.b0d0	05 37		ora $37				ora 	gxzTemp0+1
.b0d2	29 c0		and #$c0			and 	#$C0
.b0d4	38		sec				sec
.b0d5	d0 53		bne $b12a			bne 	_GXCollideFail 				; if either >= 64, fail.
.b0d7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b0d9	b9 59 06	lda $0659,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b0dc	1d 59 06	ora $0659,x			ora 	GXSpriteLow,x
.b0df	30 48		bmi $b129			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b0e1	18		clc				clc 								; need to calculate sum of sizes.
.b0e2	b9 99 06	lda $0699,y			lda 	GXSpriteHigh,y
.b0e5	7d 99 06	adc $0699,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b0e8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b0ea	6a		ror a				ror 	a 							; 5/6/7
.b0eb	4a		lsr a				lsr 	a 							; 4/5/6
.b0ec	4a		lsr a				lsr 	a 							; 3/4/5
.b0ed	4a		lsr a				lsr 	a 							; 2/3/4
.b0ee	18		clc				clc
.b0ef	69 08		adc #$08			adc 	#$08
.b0f1	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b0f2	4a		lsr a				lsr 	a
.b0f3	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b0f5	b9 99 06	lda $0699,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b0f8	29 3f		and #$3f			and 	#$3F
.b0fa	85 39		sta $39				sta 	gxzTemp1+1
.b0fc	38		sec				sec
.b0fd	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.b100	29 3f		and #$3f			and 	#$3F
.b102	e5 39		sbc $39				sbc 	gxzTemp1+1
.b104	b0 03		bcs $b109			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b106	49 ff		eor #$ff			eor 	#$FF
.b108	1a		inc a				inc 	a
.b109					_GXCAbs1:
.b109	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b10b	b0 1c		bcs $b129			bcs 	_GXOkayFail
.b10d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b10f	38		sec				sec 								; calculate |x1-x0|
.b110	b9 59 06	lda $0659,y			lda 	GXSpriteLow,y
.b113	fd 59 06	sbc $0659,x			sbc 	GXSpriteLow,x
.b116	b0 03		bcs $b11b			bcs 	_GXCAbs2
.b118	49 ff		eor #$ff			eor 	#$FF
.b11a	1a		inc a				inc 	a
.b11b					_GXCAbs2:
.b11b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b11d	b0 0a		bcs $b129			bcs 	_GXOkayFail
.b11f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b121	90 02		bcc $b125			bcc 	_GXCHaveLowest
.b123	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b125					_GXCHaveLowest:
.b125	0a		asl a				asl 	a 							; scale to allow for >> 2
.b126	0a		asl a				asl 	a
.b127	18		clc				clc
.b128	60		rts				rts
.b129					_GXOkayFail:
.b129	18		clc				clc
.b12a					_GXCollideFail:
.b12a	a9 ff		lda #$ff			lda 	#$FF
.b12c	60		rts				rts
.b12d					GXFindSprite:
.b12d	aa		tax				tax
.b12e	ad 4c 06	lda $064c			lda 	GXSpritePage 				; access the base page of the sprite
.b131	85 0b		sta $0b				sta 	GXEditSlot
.b133	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b136	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b139	f0 33		beq $b16e			beq 	_GXFSFail
.b13b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b13e	8d f0 06	sta $06f0			sta 	GXSpriteOffset+1
.b141	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b144	48		pha				pha 								; save twice
.b145	48		pha				pha
.b146	29 03		and #$03			and 	#3 							; get sprite size
.b148	8d ed 06	sta $06ed			sta 	GXSizeBits 					; save raw (0-3)
.b14b	aa		tax				tax
.b14c	bd 70 b1	lda $b170,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b14f	8d ec 06	sta $06ec			sta 	GXSizePixels 					; save (8/16/24/32)
.b152	68		pla				pla 								; get LUT
.b153	4a		lsr a				lsr		a
.b154	4a		lsr a				lsr		a
.b155	29 03		and #$03			and 	#3
.b157	8d ee 06	sta $06ee			sta 	GXSpriteLUT
.b15a	68		pla				pla 								; address, neeeds to be x 4
.b15b	29 f0		and #$f0			and 	#$F0
.b15d	8d ef 06	sta $06ef			sta 	GXSpriteOffset
.b160	0e ef 06	asl $06ef			asl 	GXSpriteOffset
.b163	2e f0 06	rol $06f0			rol 	GXSpriteOffset+1
.b166	0e ef 06	asl $06ef			asl 	GXSpriteOffset
.b169	2e f0 06	rol $06f0			rol 	GXSpriteOffset+1
.b16c	18		clc				clc
.b16d	60		rts				rts
.b16e					_GXFSFail:
.b16e	38		sec				sec
.b16f	60		rts				rts
.b170					_GXFXSSTTable:
>b170	08 10 18 20					.byte 	8,16,24,32
.06ec					GXSizePixels:
>06ec							.fill 	1
.06ed					GXSizeBits:
>06ed							.fill 	1
.06ee					GXSpriteLUT:
>06ee							.fill 	1
.06ef					GXSpriteOffset:
>06ef							.fill 	2
.b174					GXSortXY:
.b174	20 92 b1	jsr $b192			jsr 	GXSortY 					; will be sorted on Y now
.b177	ad 41 06	lda $0641			lda 	gxX0 						; compare X0 v X1
.b17a	cd 45 06	cmp $0645			cmp 	gxX1
.b17d	ad 42 06	lda $0642			lda 	gXX0+1
.b180	ed 46 06	sbc $0646			sbc 	gXX1+1
.b183	90 0c		bcc $b191			bcc 	_GXSXYExit 					; X0 < X1 exit
.b185	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b187	a0 04		ldy #$04			ldy 	#4
.b189	20 a6 b1	jsr $b1a6			jsr 	GXSwapXY
.b18c	e8		inx				inx
.b18d	c8		iny				iny
.b18e	20 a6 b1	jsr $b1a6			jsr 	GXSwapXY
.b191					_GXSXYExit:
.b191	60		rts				rts
.b192					GXSortY:
.b192	ad 43 06	lda $0643			lda 	gxY0 						; if Y0 >= Y1
.b195	cd 47 06	cmp $0647			cmp 	gxY1
.b198	90 0b		bcc $b1a5			bcc 	_GXSYSorted
.b19a	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b19c	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b19e					_GXSwap1:
.b19e	20 a6 b1	jsr $b1a6			jsr 	GXSwapXY
.b1a1	88		dey				dey
.b1a2	ca		dex				dex
.b1a3	10 f9		bpl $b19e			bpl 	_GXSwap1
.b1a5					_GXSYSorted:
.b1a5	60		rts				rts
.b1a6					GXSwapXY:
.b1a6	bd 41 06	lda $0641,x			lda 	gxX0,x
.b1a9	48		pha				pha
.b1aa	b9 41 06	lda $0641,y			lda 	gxX0,y
.b1ad	9d 41 06	sta $0641,x			sta 	gxX0,x
.b1b0	68		pla				pla
.b1b1	99 41 06	sta $0641,y			sta 	gxX0,y
.b1b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b68a					KeywordSet0:
>b68a	00 65					.text	0,$65,""               ; $80 !0:EOF
>b68c	00 58					.text	0,$58,""               ; $81 !1:SH1
>b68e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b690	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b696	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b69e	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b6a4	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b6ab	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b6b3	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b6ba	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b6c1	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b6c7	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b6cd	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b6d5	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b6dc	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b6e3	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b6ea	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b6f2	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b6f8	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b6fe	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b705	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b70b	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b711	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b719	28
>b71a	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b722	28
>b723	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b729	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b72f	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b735	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b73c	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b744	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b74a	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b750	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b755	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b759	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b75f	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b767	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b76e	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b775	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b77d	43
>b77e	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b784	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b78a	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b791	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b797	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b79b	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b7a1	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b7a9	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b7b0	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b7b5	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b7bc	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b7c4	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b7ca	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b7cf	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b7d7	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b7dd	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b7e3	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b7e8	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b7ef	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b7f5	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b7fb	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b802	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b807	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b80d	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b814	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b819	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b81d	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b825	45
>b826	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b82e	45
>b82f	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b835	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b83c	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b842	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b848	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b84d	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b855	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b85c	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b864	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>b86a	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>b86e	ff					.text	$FF
.b86f					KeywordSet1:
>b86f	00 65					.text	0,$65,""               ; $80 !0:EOF
>b871	00 58					.text	0,$58,""               ; $81 !1:SH1
>b873	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b875	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>b87d	4c 45
>b87f	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>b887	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>b88f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>b894	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>b89a	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>b89f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>b8a7	45
>b8a8	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>b8ad	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>b8b5	53
>b8b6	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>b8bc	ff					.text	$FF
.b8bd					KeywordSet2:
>b8bd	00 65					.text	0,$65,""               ; $80 !0:EOF
>b8bf	00 58					.text	0,$58,""               ; $81 !1:SH1
>b8c1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b8c3	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>b8c8	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>b8cd	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>b8d2	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>b8d7	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>b8dc	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>b8e1	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>b8e6	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>b8eb	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>b8f0	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>b8f5	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>b8fa	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>b8ff	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>b904	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>b909	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>b90e	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>b913	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>b918	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>b91d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>b922	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>b927	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>b92c	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>b931	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>b936	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>b93b	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>b940	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>b945	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>b94a	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>b94f	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>b954	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>b959	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>b95e	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>b963	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>b968	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>b96d	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>b972	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>b977	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>b97c	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>b981	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>b986	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>b98b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>b990	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>b995	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>b99a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>b99f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>b9a4	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>b9a9	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>b9ae	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>b9b3	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>b9b8	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>b9bd	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>b9c2	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>b9c7	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>b9cc	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>b9d1	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>b9d6	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>b9db	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>b9e0	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>b9e5	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>b9ea	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>b9ef	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>b9f4	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>b9f9	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>b9fe	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ba03	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ba08	ff					.text	$FF
.b1b5					ListConvertLine:
.b1b5	9c 9d 04	stz $049d			stz 	tbOffset
.b1b8	9c aa 04	stz $04aa			stz 	tokenBuffer
.b1bb	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b1bd	b1 30		lda ($30),y			lda 	(codePtr),y
.b1bf	aa		tax				tax
.b1c0	88		dey				dey
.b1c1	b1 30		lda ($30),y			lda 	(codePtr),y
.b1c3	20 4b 92	jsr $924b			jsr 	ConvertInt16
.b1c6	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b1c8	86 37		stx $37				stx 	zTemp0+1
.b1ca	a0 00		ldy #$00			ldy 	#0
.b1cc					_LCCopyNumber:
.b1cc	b1 36		lda ($36),y			lda 	(zTemp0),y
.b1ce	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b1d1	c8		iny				iny
.b1d2	b1 36		lda ($36),y			lda 	(zTemp0),y
.b1d4	d0 f6		bne $b1cc			bne 	_LCCopyNumber
.b1d6	20 de 8c	jsr $8cde			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.b1d9	48		pha				pha 								; save on stack
.b1da	10 0c		bpl $b1e8			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b1dc	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b1dd	6d a6 04	adc $04a6			adc 	listIndent
.b1e0	8d a6 04	sta $04a6			sta 	listIndent
.b1e3	10 03		bpl $b1e8			bpl 	_LCNoAdjust
.b1e5	9c a6 04	stz $04a6			stz 	listIndent
.b1e8					_LCNoAdjust:
.b1e8	18		clc				clc		 							; work out actual indent.
.b1e9	ad a6 04	lda $04a6			lda 	listIndent
.b1ec	0a		asl a				asl 	a
.b1ed	69 06		adc #$06			adc 	#6
.b1ef	85 36		sta $36				sta 	zTemp0
.b1f1					_LCPadOut:
.b1f1	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b1f3	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b1f6	ad 9d 04	lda $049d			lda 	tbOffset
.b1f9	c5 36		cmp $36				cmp 	zTemp0
.b1fb	d0 f4		bne $b1f1			bne 	_LCPadOut
.b1fd	a0 03		ldy #$03			ldy 	#3 							; start position.
.b1ff					_LCMainLoop:
.b1ff	b1 30		lda ($30),y			lda 	(codePtr),y
.b201	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b203	f0 17		beq $b21c			beq 	_LCExit
.b205	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b207	90 1e		bcc $b227			bcc 	_LCDoubles
.b209	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b20b	90 2a		bcc $b237			bcc 	_LCShiftPunc
.b20d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b20f	90 35		bcc $b246			bcc 	_LCPunctuation
.b211	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b213	90 3e		bcc $b253			bcc 	_LCIdentifiers
.b215	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b217	90 5a		bcc $b273			bcc 	_LCTokens
.b219	4c ce b2	jmp $b2ce			jmp 	_LCData 					; 254-5 are data objects
.b21c					_LCExit:
.b21c	68		pla				pla 								; get old indent adjust
.b21d	30 07		bmi $b226			bmi 	_LCExit2
.b21f	18		clc				clc 								; add to indent if +ve
.b220	6d a6 04	adc $04a6			adc 	listIndent
.b223	8d a6 04	sta $04a6			sta 	listIndent
.b226					_LCExit2:
.b226	60		rts				rts
.b227					_LCDoubles:
.b227	48		pha				pha
.b228	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b229	29 02		and #$02			and 	#2
.b22b	09 3c		ora #$3c			ora 	#60 						; make < >
.b22d	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b230	68		pla				pla 								; restore, do lower bit
.b231	29 03		and #$03			and 	#3
.b233	09 3c		ora #$3c			ora 	#60
.b235	80 0f		bra $b246			bra		_LCPunctuation 				; print, increment, loop
.b237					_LCShiftPunc:
.b237	aa		tax				tax 								; save in X
.b238	29 07		and #$07			and 	#7 							; lower 3 bits
.b23a	f0 02		beq $b23e			beq 	_LCNoAdd
.b23c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b23e					_LCNoAdd:
.b23e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b240	90 02		bcc $b244			bcc 	_LCNoAdd2
.b242	09 20		ora #$20			ora 	#32 						; adds $20
.b244					_LCNoAdd2:
.b244	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b246					_LCPunctuation:
.b246	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b248	d0 03		bne $b24d			bne 	_LCPContinue
.b24a	20 09 b3	jsr $b309			jsr 	LCDeleteLastSpace
.b24d					_LCPContinue:
.b24d	c8		iny				iny 								; consume character
.b24e	20 fa b2	jsr $b2fa			jsr 	LCLWrite 					; write it out.
.b251	80 ac		bra $b1ff			bra 	_LCMainLoop 				; go round again.
.b253					_LCIdentifiers:
.b253	18		clc				clc 								; convert to physical address
.b254	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b256	85 37		sta $37				sta 	zTemp0+1
.b258	c8		iny				iny
.b259	b1 30		lda ($30),y			lda 	(codePtr),y
.b25b	85 36		sta $36				sta 	zTemp0
.b25d	c8		iny				iny
.b25e	5a		phy				phy 								; save position
.b25f	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b261					_LCOutIdentifier:
.b261	c8		iny				iny
.b262	b1 36		lda ($36),y			lda 	(zTemp0),y
.b264	29 7f		and #$7f			and 	#$7F
.b266	20 48 b3	jsr $b348			jsr 	LCLLowerCase
.b269	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b26c	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b26e	10 f1		bpl $b261			bpl 	_LCOutIdentifier
.b270	7a		ply				ply 								; restore position
.b271	80 8c		bra $b1ff			bra 	_LCMainLoop
.b273					_LCTokens:
.b273	aa		tax				tax 								; token in X
.b274	a9 bd		lda #$bd			lda 	#((KeywordSet2) & $FF)
.b276	85 36		sta $36				sta 	0+zTemp0
.b278	a9 b8		lda #$b8			lda 	#((KeywordSet2) >> 8)
.b27a	85 37		sta $37				sta 	1+zTemp0
.b27c	e0 82		cpx #$82			cpx 	#$82
.b27e	f0 16		beq $b296			beq 	_LCUseShift
.b280	a9 6f		lda #$6f			lda 	#((KeywordSet1) & $FF)
.b282	85 36		sta $36				sta 	0+zTemp0
.b284	a9 b8		lda #$b8			lda 	#((KeywordSet1) >> 8)
.b286	85 37		sta $37				sta 	1+zTemp0
.b288	e0 81		cpx #$81			cpx 	#$81
.b28a	f0 0a		beq $b296			beq 	_LCUseShift
.b28c	a9 8a		lda #$8a			lda 	#((KeywordSet0) & $FF)
.b28e	85 36		sta $36				sta 	0+zTemp0
.b290	a9 b6		lda #$b6			lda 	#((KeywordSet0) >> 8)
.b292	85 37		sta $37				sta 	1+zTemp0
.b294	80 01		bra $b297			bra 	_LCNoShift
.b296					_LCUseShift:
.b296	c8		iny				iny
.b297					_LCNoShift:
.b297	20 1d b3	jsr $b31d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.b29a	b1 30		lda ($30),y			lda 	(codePtr),y
.b29c	aa		tax				tax 								; into X
.b29d					_LCFindText:
.b29d	ca		dex				dex
.b29e	10 0e		bpl $b2ae			bpl 	_LCFoundText 				; found text.
.b2a0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b2a2	1a		inc a				inc 	a 							; one extra for size
.b2a3	38		sec				sec 								; one extra for checksum
.b2a4	65 36		adc $36				adc 	zTemp0 						; go to next token
.b2a6	85 36		sta $36				sta 	zTemp0
.b2a8	90 f3		bcc $b29d			bcc 	_LCFindText
.b2aa	e6 37		inc $37				inc 	zTemp0+1
.b2ac	80 ef		bra $b29d			bra 	_LCFindText
.b2ae					_LCFoundText:
.b2ae	5a		phy				phy 								; save List position
.b2af	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b2b1	aa		tax				tax
.b2b2	a0 02		ldy #$02			ldy 	#2
.b2b4					_LCCopyToken:
.b2b4	b1 36		lda ($36),y			lda 	(zTemp0),y
.b2b6	20 48 b3	jsr $b348			jsr 	LCLLowerCase
.b2b9	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b2bc	c8		iny				iny
.b2bd	ca		dex				dex
.b2be	d0 f4		bne $b2b4			bne 	_LCCopyToken
.b2c0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b2c2	f0 05		beq $b2c9			beq 	_LCNoSpace
.b2c4	a9 20		lda #$20			lda 	#' '
.b2c6	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b2c9					_LCNoSpace:
.b2c9	7a		ply				ply 								; restore position.
.b2ca	c8		iny				iny 								; consume token
.b2cb	4c ff b1	jmp $b1ff			jmp 	_LCMainLoop 				; and go around again.
.b2ce					_LCData:
.b2ce	48		pha				pha 								; save type $FE/$FF
.b2cf	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b2d1	c9 fe		cmp #$fe			cmp 	#$FE
.b2d3	f0 02		beq $b2d7			beq 	_LCHaveOpener
.b2d5	a2 22		ldx #$22			ldx 	#'"'
.b2d7					_LCHaveOpener:
.b2d7	8a		txa				txa 								; output prefix (# or ")
.b2d8	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b2db	c8		iny				iny 								; get count
.b2dc	b1 30		lda ($30),y			lda 	(codePtr),y
.b2de	aa		tax				tax
.b2df	c8		iny				iny 								; point at first character
.b2e0					_LCOutData:
.b2e0	b1 30		lda ($30),y			lda 	(codePtr),y
.b2e2	c9 00		cmp #$00			cmp 	#0
.b2e4	f0 03		beq $b2e9			beq 	_LCNoPrint
.b2e6	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b2e9					_LCNoPrint:
.b2e9	c8		iny				iny
.b2ea	ca		dex				dex
.b2eb	d0 f3		bne $b2e0			bne 	_LCOutData
.b2ed	68		pla				pla 								; closing " required ?
.b2ee	c9 ff		cmp #$ff			cmp 	#$FF
.b2f0	d0 05		bne $b2f7			bne 	_LCNoQuote
.b2f2	a9 22		lda #$22			lda 	#'"'
.b2f4	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b2f7					_LCNoQuote:
.b2f7	4c ff b1	jmp $b1ff			jmp 	_LCMainLoop
.b2fa					LCLWrite:
.b2fa	da		phx				phx
.b2fb	ae 9d 04	ldx $049d			ldx 	tbOffset
.b2fe	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.b301	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.b304	ee 9d 04	inc $049d			inc 	tbOffset
.b307	fa		plx				plx
.b308	60		rts				rts
.b309					LCDeleteLastSpace:
.b309	48		pha				pha
.b30a	da		phx				phx
.b30b	ae 9d 04	ldx $049d			ldx 	tbOffset
.b30e	f0 0a		beq $b31a			beq 	_LCDLSExit
.b310	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.b313	c9 20		cmp #$20			cmp 	#' '
.b315	d0 03		bne $b31a			bne 	_LCDLSExit
.b317	ce 9d 04	dec $049d			dec 	tbOffset
.b31a					_LCDLSExit:
.b31a	fa		plx				plx
.b31b	68		pla				pla
.b31c	60		rts				rts
.b31d					LCCheckSpaceRequired:
.b31d	ae 9d 04	ldx $049d			ldx 	tbOffset
.b320	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.b323	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b325	f0 1b		beq $b342			beq 	_LCCSRSpace
.b327	c9 29		cmp #$29			cmp 	#')'
.b329	f0 17		beq $b342			beq 	_LCCSRSpace
.b32b	c9 23		cmp #$23			cmp 	#'#'
.b32d	f0 13		beq $b342			beq 	_LCCSRSpace
.b32f	20 48 b3	jsr $b348			jsr 	LCLLowerCase 				; saves a little effort
.b332	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b334	90 11		bcc $b347			bcc 	_LCCSRExit
.b336	c9 3a		cmp #$3a			cmp 	#"9"+1
.b338	90 08		bcc $b342			bcc 	_LCCSRSpace
.b33a	c9 61		cmp #$61			cmp 	#"a"
.b33c	90 09		bcc $b347			bcc 	_LCCSRExit
.b33e	c9 7b		cmp #$7b			cmp 	#"z"+1
.b340	b0 05		bcs $b347			bcs 	_LCCSRExit
.b342					_LCCSRSpace:
.b342	a9 20		lda #$20			lda 	#' '
.b344	20 fa b2	jsr $b2fa			jsr 	LCLWrite
.b347					_LCCSRExit:
.b347	60		rts				rts
.b348					LCLLowerCase:
.b348	c9 41		cmp #$41			cmp 	#"A"
.b34a	90 06		bcc $b352			bcc 	_LCLLCOut
.b34c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b34e	b0 02		bcs $b352			bcs 	_LCLLCOut
.b350	69 20		adc #$20			adc 	#$20
.b352					_LCLLCOut:
.b352	60		rts				rts
.b353					LCLUpperCase:
.b353	c9 61		cmp #$61			cmp 	#"a"
.b355	90 06		bcc $b35d			bcc 	_LCLUCOut
.b357	c9 7b		cmp #$7b			cmp 	#"z"+1
.b359	b0 02		bcs $b35d			bcs 	_LCLUCOut
.b35b	e9 1f		sbc #$1f			sbc 	#$1F
.b35d					_LCLUCOut:
.b35d	60		rts				rts
.b35e					TokeniseSearchTable:
.b35e	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b360	85 36		sta $36				sta 	zTemp0
.b362	a0 00		ldy #$00			ldy 	#0
.b364	a9 80		lda #$80			lda 	#$80 						; token #
.b366	85 38		sta $38				sta 	zTemp1
.b368					_TSTLoop:
.b368	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b36a	30 49		bmi $b3b5			bmi 	_TSTFail 					; -ve = end of table
.b36c	f0 2e		beq $b39c			beq 	_TSTNext 					; zero, check next it's a dummy
.b36e	c8		iny				iny 								; get the hash
.b36f	b1 36		lda ($36),y			lda 	(zTemp0),y
.b371	88		dey				dey
.b372	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b375	d0 25		bne $b39c			bne 	_TSTNext
.b377	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b37a	38		sec				sec
.b37b	ed 80 04	sbc $0480			sbc 	identStart
.b37e	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b380	d0 1a		bne $b39c			bne 	_TSTNext
.b382	5a		phy				phy 								; save Y , we might fail
.b383	c8		iny				iny 								; point to text
.b384	c8		iny				iny
.b385	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b388					_TSTCompareName:
.b388	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.b38b	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b38d	d0 0c		bne $b39b			bne 	_TSTNextPullY 				; fail, pullY and do next
.b38f	e8		inx				inx
.b390	c8		iny				iny
.b391	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b394	d0 f2		bne $b388			bne 	_TSTCompareName
.b396	7a		ply				ply 								; throw Y
.b397	a5 38		lda $38				lda 	zTemp1 						; get token #
.b399	38		sec				sec 								; return with CS = passed.
.b39a	60		rts				rts
.b39b					_TSTNextPullY:
.b39b	7a		ply				ply 								; restore current, fall through.
.b39c					_TSTNext:
.b39c	e6 38		inc $38				inc 	zTemp1 						; token counter
.b39e	98		tya				tya
.b39f	18		clc				clc
.b3a0	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b3a2	1a		inc a				inc 	a 							; +1
.b3a3	1a		inc a				inc 	a 							; +2
.b3a4	a8		tay				tay
.b3a5	10 c1		bpl $b368			bpl 	_TSTLoop 					; if Y < $80 loop back
.b3a7	98		tya				tya 								; add Y to zTemp0 and reset Y
.b3a8	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b3aa	18		clc				clc  								; but have tables > 255 bytes
.b3ab	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b3ad	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b3af	90 b7		bcc $b368			bcc 	_TSTLoop
.b3b1	e6 37		inc $37				inc 	zTemp0+1
.b3b3	80 b3		bra $b368			bra 	_TSTLoop
.b3b5					_TSTFail:
.b3b5	18		clc				clc
.b3b6	60		rts				rts
.b3b7					TokeniseLine:
.b3b7	20 3f b5	jsr $b53f			jsr 	FixLineBufferCase 			; fix line case
.b3ba	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b3bc	8d a7 04	sta $04a7			sta 	tokenOffset
.b3bf	9c a8 04	stz $04a8			stz 	tokenLineNumber
.b3c2	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.b3c5	a2 ff		ldx #$ff			ldx 	#$FF
.b3c7					_TKFindFirst:
.b3c7	e8		inx				inx
.b3c8	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b3cb	f0 79		beq $b446			beq 	_TKExit
.b3cd	c9 20		cmp #$20			cmp 	#' '
.b3cf	90 f6		bcc $b3c7			bcc 	_TKFindFirst
.b3d1	c9 30		cmp #$30			cmp 	#'0'
.b3d3	90 07		bcc $b3dc			bcc 	_TKNoLineNumber
.b3d5	c9 3a		cmp #$3a			cmp 	#'9'+1
.b3d7	b0 03		bcs $b3dc			bcs 	_TKNoLineNumber
.b3d9	20 69 b5	jsr $b569			jsr 	TokeniseExtractLineNumber
.b3dc					_TKNoLineNumber:
.b3dc					_TKTokeniseLoop:
.b3dc	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b3df	f0 65		beq $b446			beq 	_TKExit
.b3e1	e8		inx				inx
.b3e2	c9 20		cmp #$20			cmp 	#' '
.b3e4	f0 f6		beq $b3dc			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b3e6	ca		dex				dex 								; undo last get, A contains character, X is position.
.b3e7	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b3e9	f0 61		beq $b44c			beq 	_TKTokeniseIdentifier
.b3eb	c9 41		cmp #$41			cmp 	#'A'
.b3ed	90 04		bcc $b3f3			bcc 	_TKTokenisePunctuation
.b3ef	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b3f1	90 59		bcc $b44c			bcc 	_TKTokeniseIdentifier
.b3f3					_TKTokenisePunctuation:
.b3f3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b3f5	f0 27		beq $b41e			beq 	_TKString
.b3f7	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b3f9	f0 28		beq $b423			beq 	_TKHexConstant
.b3fb	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b3fd	f0 29		beq $b428			beq 	_TKCheckDouble
.b3ff	c9 3e		cmp #$3e			cmp 	#'>'
.b401	f0 25		beq $b428			beq 	_TKCheckDouble
.b403					_TKStandardPunctuation:
.b403	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.b406	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b408	90 0e		bcc $b418			bcc 	_TKNoShift
.b40a	48		pha				pha 								; save
.b40b	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b40d	85 36		sta $36				sta 	zTemp0
.b40f	68		pla				pla
.b410	29 20		and #$20			and 	#32 						; bit 5
.b412	4a		lsr a				lsr 	a 							; shift into bit 3
.b413	4a		lsr a				lsr 	a
.b414	05 36		ora $36				ora 	zTemp0
.b416	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b418					_TKNoShift:
.b418	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte 			; write the punctuation character
.b41b	e8		inx				inx 								; consume the character
.b41c	80 be		bra $b3dc			bra 	_TKTokeniseLoop 			; and loop round again.
.b41e					_TKString:
.b41e	20 ce b4	jsr $b4ce			jsr 	TokeniseString
.b421	80 b9		bra $b3dc			bra 	_TKTokeniseLoop
.b423					_TKHexConstant:
.b423	20 09 b5	jsr $b509			jsr 	TokeniseHexConstant
.b426	80 b4		bra $b3dc			bra 	_TKTokeniseLoop
.b428					_TKCheckDouble:
.b428	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.b42b	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b42d	90 d4		bcc $b403			bcc 	_TKStandardPunctuation
.b42f	c9 3f		cmp #$3f			cmp 	#'>'+1
.b431	b0 d0		bcs $b403			bcs 	_TKStandardPunctuation
.b433	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b436	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b438	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b439	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b43c	38		sec				sec
.b43d	e9 3c		sbc #$3c			sbc 	#'<'
.b43f	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.b442	e8		inx				inx 								; consume both
.b443	e8		inx				inx
.b444	80 96		bra $b3dc			bra 	_TKTokeniseLoop
.b446	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b448	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b44b	60		rts				rts
.b44c					_TKTokeniseIdentifier:
.b44c	8e 80 04	stx $0480			stx 	identStart 					; save start
.b44f	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b452					_TKCheckLoop:
.b452	e8		inx				inx 								; look at next, we know first is identifier.
.b453	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.b456	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b458	f0 f8		beq $b452			beq 	_TKCheckLoop
.b45a	c9 30		cmp #$30			cmp	 	#"0"
.b45c	90 0c		bcc $b46a			bcc 	_TKEndIdentifier
.b45e	c9 3a		cmp #$3a			cmp 	#"9"+1
.b460	90 f0		bcc $b452			bcc 	_TKCheckLoop
.b462	c9 41		cmp #$41			cmp	 	#"A"
.b464	90 04		bcc $b46a			bcc 	_TKEndIdentifier
.b466	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b468	90 e8		bcc $b452			bcc 	_TKCheckLoop
.b46a					_TKEndIdentifier:
.b46a	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b46d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b46f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b471	f0 06		beq $b479			beq 	_TKHasTypeCharacter
.b473	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b475	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b477	d0 07		bne $b480			bne 	_TKNoTypeCharacter
.b479					_TKHasTypeCharacter:
.b479	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b47c	e8		inx				inx 								; read next
.b47d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b480					_TKNoTypeCharacter:
.b480	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b482	d0 09		bne $b48d			bne 	_TKNoArray
.b484	e8		inx				inx 								; skip the (
.b485	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b488	09 04		ora #$04			ora 	#$04
.b48a	8d 84 04	sta $0484			sta 	identTypeByte
.b48d					_TKNoArray:
.b48d	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b490	20 2a b5	jsr $b52a			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.b493	a0 b6		ldy #$b6			ldy 	#(KeywordSet0) >> 8
.b495	a9 8a		lda #$8a			lda 	#(KeywordSet0) & $FF
.b497	20 5e b3	jsr $b35e			jsr 	TokeniseSearchTable
.b49a	a2 00		ldx #$00			ldx 	#0
.b49c	b0 1f		bcs $b4bd			bcs 	_TKFoundToken
.b49e	a0 b8		ldy #$b8			ldy 	#(KeywordSet1) >> 8
.b4a0	a9 6f		lda #$6f			lda 	#(KeywordSet1) & $FF
.b4a2	20 5e b3	jsr $b35e			jsr 	TokeniseSearchTable
.b4a5	a2 81		ldx #$81			ldx 	#$81
.b4a7	b0 14		bcs $b4bd			bcs 	_TKFoundToken
.b4a9	a0 b8		ldy #$b8			ldy 	#(KeywordSet2) >> 8
.b4ab	a9 bd		lda #$bd			lda 	#(KeywordSet2) & $FF
.b4ad	20 5e b3	jsr $b35e			jsr 	TokeniseSearchTable
.b4b0	a2 82		ldx #$82			ldx 	#$82
.b4b2	b0 09		bcs $b4bd			bcs 	_TKFoundToken
.b4b4	20 ba b5	jsr $b5ba			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.b4b7	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b4ba	4c dc b3	jmp $b3dc			jmp 	_TKTokeniseLoop 			; and go round again.
.b4bd					_TKFoundToken:
.b4bd	48		pha				pha 								; save token
.b4be	8a		txa				txa 								; shift in X, is there one ?
.b4bf	f0 03		beq $b4c4			beq 	_TKNoTShift
.b4c1	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte 			; if so, write it out
.b4c4					_TKNoTShift:
.b4c4	68		pla				pla 								; restore and write token
.b4c5	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b4c8	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b4cb	4c dc b3	jmp $b3dc			jmp 	_TKTokeniseLoop 			; and go round again.
.b4ce					TokeniseString:
.b4ce	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b4d0	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b4d3	e8		inx				inx									; start of quoted string.
.b4d4	da		phx				phx 								; push start of string on top
.b4d5	ca		dex				dex
.b4d6					_TSFindEnd:
.b4d6	e8		inx				inx
.b4d7	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.b4da	f0 04		beq $b4e0			beq 	_TSEndOfString
.b4dc	c9 22		cmp #$22			cmp 	#'"'
.b4de	d0 f6		bne $b4d6			bne 	_TSFindEnd
.b4e0					_TSEndOfString:
.b4e0	7a		ply				ply  								; so now Y is first character, X is character after end.
.b4e1	48		pha				pha 								; save terminating character
.b4e2	20 ea b4	jsr $b4ea			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.b4e5	68		pla				pla 								; terminating character
.b4e6	f0 01		beq $b4e9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b4e8	e8		inx				inx
.b4e9					_TSNotQuote:
.b4e9	60		rts				rts
.b4ea					TOWriteBlockXY:
.b4ea	86 36		stx $36				stx 	zTemp0 						; write end character
.b4ec	98		tya				tya
.b4ed	49 ff		eor #$ff			eor 	#$FF
.b4ef	38		sec				sec
.b4f0	65 36		adc $36				adc 	zTemp0
.b4f2	1a		inc a				inc 	a 							; one extra for NULL
.b4f3	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b4f6					_TOBlockLoop:
.b4f6	c4 36		cpy $36				cpy 	zTemp0
.b4f8	f0 09		beq $b503			beq 	_TOBlockExit
.b4fa	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.b4fd	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b500	c8		iny				iny
.b501	80 f3		bra $b4f6			bra 	_TOBlockLoop
.b503					_TOBlockExit:
.b503	a9 00		lda #$00			lda 	#0
.b505	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b508	60		rts				rts
.b509					TokeniseHexConstant:
.b509	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b50b	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b50e	e8		inx				inx									; start of quoted string.
.b50f	da		phx				phx 								; push start of constant on top
.b510	ca		dex				dex
.b511					_THFindLoop:
.b511	e8		inx				inx
.b512	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b515	c9 30		cmp #$30			cmp 	#"0"
.b517	90 0c		bcc $b525			bcc 	_THFoundEnd
.b519	c9 3a		cmp #$3a			cmp 	#"9"+1
.b51b	90 f4		bcc $b511			bcc 	_THFindLoop
.b51d	c9 41		cmp #$41			cmp 	#"A"
.b51f	90 04		bcc $b525			bcc 	_THFoundEnd
.b521	c9 47		cmp #$47			cmp 	#"F"+1
.b523	90 ec		bcc $b511			bcc 	_THFindLoop
.b525					_THFoundEnd:
.b525	7a		ply				ply 								; restore start
.b526	20 ea b4	jsr $b4ea			jsr 	TOWriteBlockXY 				; output the block
.b529	60		rts				rts
.b52a					TokeniseCalculateHash:
.b52a	da		phx				phx
.b52b	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b52e	a9 00		lda #$00			lda 	#0
.b530					_TCHLoop:
.b530	18		clc				clc
.b531	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.b534	e8		inx				inx
.b535	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b538	d0 f6		bne $b530			bne 	_TCHLoop
.b53a	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b53d	fa		plx				plx
.b53e	60		rts				rts
.b53f					FixLineBufferCase:
.b53f	a2 00		ldx #$00			ldx 	#0
.b541					_FLBCLoop:
.b541	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.b544	f0 22		beq $b568			beq 	_FLBCExit 					; end of string.
.b546	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b548	f0 11		beq $b55b			beq 	_FLBCInQuotes
.b54a	e8		inx				inx
.b54b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b54d	90 f2		bcc $b541			bcc 	_FLBCLoop
.b54f	c9 7b		cmp #$7b			cmp 	#'z'+1
.b551	b0 ee		bcs $b541			bcs 	_FLBCLoop
.b553	38		sec				sec 								; make U/C
.b554	e9 20		sbc #$20			sbc 	#32
.b556	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.b559	80 e6		bra $b541			bra 	_FLBCLoop
.b55b					_FLBCInQuotes:
.b55b	e8		inx				inx 								; advance
.b55c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.b55f	f0 07		beq $b568			beq 	_FLBCExit 					; exit on EOS
.b561	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b563	d0 f6		bne $b55b			bne 	_FLBCInQuotes
.b565	e8		inx				inx 								; skip over it
.b566	80 d9		bra $b541			bra 	_FLBCLoop
.b568					_FLBCExit:
.b568	60		rts				rts
.b569					TokeniseExtractLineNumber:
.b569	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.b56c	48		pha				pha
.b56d	ad a8 04	lda $04a8			lda 	tokenLineNumber
.b570	48		pha				pha
.b571	20 a7 b5	jsr $b5a7			jsr 	_TELNTimes2 				; line # x 4
.b574	20 a7 b5	jsr $b5a7			jsr 	_TELNTimes2 				; line # x 2
.b577	18		clc				clc 								; add stacked value
.b578	68		pla				pla
.b579	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b57c	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b57f	68		pla				pla
.b580	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.b583	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.b586	20 a7 b5	jsr $b5a7			jsr 	_TELNTimes2 				; line # x 10
.b589	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.b58c	e8		inx				inx
.b58d	29 0f		and #$0f			and 	#15 						; add to line #
.b58f	18		clc				clc
.b590	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b593	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b596	90 03		bcc $b59b			bcc 	_TLENNoCarry
.b598	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.b59b					_TLENNoCarry:
.b59b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.b59e	c9 30		cmp #$30			cmp 	#'0'
.b5a0	90 04		bcc $b5a6			bcc 	_TLENExit
.b5a2	c9 3a		cmp #$3a			cmp 	#'9'+1
.b5a4	90 c3		bcc $b569			bcc 	TokeniseExtractLineNumber
.b5a6					_TLENExit:
.b5a6	60		rts				rts
.b5a7					_TELNTimes2:
.b5a7	0e a8 04	asl $04a8			asl 	tokenLineNumber
.b5aa	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.b5ad	60		rts				rts
.b5ae					TokeniseWriteByte:
.b5ae	da		phx				phx
.b5af	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.b5b2	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.b5b5	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.b5b8	fa		plx				plx
.b5b9	60		rts				rts
.b5ba					CheckCreateVariableRecord:
.b5ba	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b5bc	85 36		sta $36				sta 	0+zTemp0
.b5be	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b5c0	85 37		sta $37				sta 	1+zTemp0
.b5c2					_CCVSearch:
.b5c2	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b5c4	f0 2c		beq $b5f2			beq 	_CCVFail
.b5c6	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b5c8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b5ca	cd 83 04	cmp $0483			cmp 	identHash
.b5cd	d0 16		bne $b5e5			bne 	_CCVNext
.b5cf	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b5d1	ae 80 04	ldx $0480			ldx 	identStart
.b5d4					_CCVCompare:
.b5d4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b5d7	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b5d9	e8		inx				inx 								; advance pointers
.b5da	c8		iny				iny
.b5db	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b5dc	d0 07		bne $b5e5			bne 	_CCVNext  					; didn't match go to next.
.b5de	90 f4		bcc $b5d4			bcc 	_CCVCompare 				; not finished yet.
.b5e0	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b5e3	f0 41		beq $b626			beq 	_CCVFound 					; yes, we were successful
.b5e5					_CCVNext:
.b5e5	18		clc				clc
.b5e6	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b5e8	65 36		adc $36				adc 	zTemp0
.b5ea	85 36		sta $36				sta 	zTemp0
.b5ec	90 d4		bcc $b5c2			bcc 	_CCVSearch
.b5ee	e6 37		inc $37				inc 	zTemp0+1
.b5f0	80 d0		bra $b5c2			bra 	_CCVSearch
.b5f2					_CCVFail:
.b5f2	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b5f4	ad 83 04	lda $0483			lda 	identHash
.b5f7	91 36		sta ($36),y			sta 	(zTemp0),y
.b5f9	c8		iny				iny 								; offset 2 is the type byte
.b5fa	ad 84 04	lda $0484			lda 	identTypeByte
.b5fd	91 36		sta ($36),y			sta 	(zTemp0),y
.b5ff	c8		iny				iny
.b600					_CCVData:
.b600	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b602	91 36		sta ($36),y			sta 	(zTemp0),y
.b604	c8		iny				iny
.b605	c0 08		cpy #$08			cpy 	#8
.b607	90 f7		bcc $b600			bcc 	_CCVData
.b609	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b60c					_CCVCopyName:
.b60c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b60f	91 36		sta ($36),y			sta 	(zTemp0),y
.b611	e8		inx				inx
.b612	c8		iny				iny
.b613	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b616	d0 f4		bne $b60c			bne 	_CCVCopyName
.b618	98		tya				tya 								; patch offset
.b619	92 36		sta ($36)			sta 	(zTemp0)
.b61b	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b61d	91 36		sta ($36),y			sta 	(zTemp0),y
.b61f	88		dey				dey
.b620	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b622	09 80		ora #$80			ora 	#$80
.b624	91 36		sta ($36),y			sta 	(zTemp0),y
.b626					_CCVFound:
.b626	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b628	38		sec				sec
.b629	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b62b	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b62d	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b630	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b632	20 ae b5	jsr $b5ae			jsr 	TokeniseWriteByte
.b635	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
