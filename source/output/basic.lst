
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct 13 08:40:03 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_BY                               = $a6; $a6 BY
=$a7					KWD_CALL                             = $a7; $a7 CALL
=$a8					KWD_CIRCLE                           = $a8; $a8 CIRCLE
=$a9					KWD_CLEAR                            = $a9; $a9 CLEAR
=$aa					KWD_CLS                              = $aa; $aa CLS
=$ab					KWD_COLOR                            = $ab; $ab COLOR
=$ac					KWD_COLOUR                           = $ac; $ac COLOUR
=$ad					KWD_DATA                             = $ad; $ad DATA
=$ae					KWD_DIM                              = $ae; $ae DIM
=$af					KWD_DOWNTO                           = $af; $af DOWNTO
=$b0					KWD_ELSE                             = $b0; $b0 ELSE
=$b1					KWD_FROM                             = $b1; $b1 FROM
=$b2					KWD_GFX                              = $b2; $b2 GFX
=$b3					KWD_GOSUB                            = $b3; $b3 GOSUB
=$b4					KWD_GOTO                             = $b4; $b4 GOTO
=$b5					KWD_HERE                             = $b5; $b5 HERE
=$b6					KWD_IMAGE                            = $b6; $b6 IMAGE
=$b7					KWD_LET                              = $b7; $b7 LET
=$b8					KWD_LINE                             = $b8; $b8 LINE
=$b9					KWD_LOCAL                            = $b9; $b9 LOCAL
=$ba					KWD_OUTLINE                          = $ba; $ba OUTLINE
=$bb					KWD_PLOT                             = $bb; $bb PLOT
=$bc					KWD_PRINT                            = $bc; $bc PRINT
=$bd					KWD_READ                             = $bd; $bd READ
=$be					KWD_RECT                             = $be; $be RECT
=$bf					KWD_REM                              = $bf; $bf REM
=$c0					KWD_RETURN                           = $c0; $c0 RETURN
=$c1					KWD_SOLID                            = $c1; $c1 SOLID
=$c2					KWD_SPRITE                           = $c2; $c2 SPRITE
=$c3					KWD_TEXT                             = $c3; $c3 TEXT
=$c4					KWD_TO                               = $c4; $c4 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 66 b4	jsr $b466			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 62 99	jsr $9962			jsr 	PrintStringXA
.8014	20 ff 92	jsr $92ff			jsr 	NewCommand 					; erase current program
.8017	20 ed a5	jsr $a5ed			jsr 	BackloadProgram
.801a	4c 7a 94	jmp $947a			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 68			.text "Built Thursday 13-Oct-2022. Build 1894."
>8065	75 72 73 64 61 79 20 31 33 2d 4f 63 74 2d 32 30
>8075	32 32 2e 20 42 75 69 6c 64 20 31 38 39 34 2e

;******  Return to file: ./common/aa.system/00start.asm

>8084	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8087					GXGraphicDraw:
.8087	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8089	b0 06		bcs $8091			bcs 	_GDCoordinate
.808b	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808d	84 37		sty $37				sty 	gxzTemp0+1
.808f	80 3d		bra $80ce			bra 	_GDExecuteA 				; and execute
.8091					_GDCoordinate:
.8091	48		pha				pha 								; save AXY
.8092	da		phx				phx
.8093	5a		phy				phy
.8094	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8096					_GDCopy1:
.8096	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8099	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809c	ca		dex				dex
.809d	10 f7		bpl $8096			bpl 	_GDCopy1
.809f	68		pla				pla 								; update Y
.80a0	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a3	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a6	68		pla				pla
.80a7	8d 29 06	sta $0629			sta 	gxCurrentX
.80aa	68		pla				pla 								; get A (command+X.1) back
.80ab	48		pha				pha
.80ac	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ae	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b1	f0 07		beq $80ba			beq 	_GDXOkay 					; check X range
.80b3	ad 29 06	lda $0629			lda 	gxCurrentX
.80b6	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b8	b0 1e		bcs $80d8			bcs 	_GDError
.80ba					_GDXOkay:
.80ba	ad 2b 06	lda $062b			lda 	gxCurrentY
.80bd	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c0	b0 16		bcs $80d8			bcs 	_GDError
.80c2	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c4					_GDCopy2:
.80c4	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c7	9d 31 06	sta $0631,x			sta 	gxX0,x
.80ca	ca		dex				dex
.80cb	10 f7		bpl $80c4			bpl 	_GDCopy2
.80cd	68		pla				pla 								; get command back
.80ce					_GDExecuteA:
.80ce	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d0	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d2	b0 05		bcs $80d9			bcs 	_GDError2
.80d4	aa		tax				tax
.80d5	7c de 80	jmp ($80de,x)			jmp 	(GRVectorTable,x)
.80d8					_GDError:
.80d8	68		pla				pla 								; throw command
.80d9					_GDError2:
.80d9	38		sec				sec
.80da	60		rts				rts
.80db					GXMove:
.80db	18		clc				clc
.80dc	60		rts				rts
.80dd					GRUndefined:
>80dd	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80de					GRVectorTable:
>80de	ad 82					.word	GXInitialise             ; $00 Initialise
>80e0	c4 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e2	0c 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e4	5f 82					.word	GXClearBitmap            ; $03 Clear
>80e6	8a 84					.word	GXSetColourMode          ; $04 Colour
>80e8	4e 86					.word	GXFontHandler            ; $05 DrawFont
>80ea	96 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ec	fe 86					.word	GXSelect                 ; $07 SPRUSE
>80ee	24 87					.word	GXSelectImage            ; $08 SPRIMG
>80f0	dd 80					.word	GRUndefined              ; $09
>80f2	dd 80					.word	GRUndefined              ; $0a
>80f4	dd 80					.word	GRUndefined              ; $0b
>80f6	dd 80					.word	GRUndefined              ; $0c
>80f8	dd 80					.word	GRUndefined              ; $0d
>80fa	dd 80					.word	GRUndefined              ; $0e
>80fc	dd 80					.word	GRUndefined              ; $0f
>80fe	db 80					.word	GXMove                   ; $10 Move
>8100	58 83					.word	GXLine                   ; $11 Line
>8102	d3 84					.word	GXFrameRectangle         ; $12 FrameRect
>8104	d0 84					.word	GXFillRectangle          ; $13 FillRect
>8106	16 81					.word	GXFrameCircle            ; $14 FrameCircle
>8108	12 81					.word	GXFillCircle             ; $15 FillCircle
>810a	dd 80					.word	GRUndefined              ; $16
>810c	dd 80					.word	GRUndefined              ; $17
>810e	b8 84					.word	GXPlotPoint              ; $18 Plot
>8110	89 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8112					GXFillCircle:
.8112	a9 ff		lda #$ff			lda 	#255
.8114	80 02		bra $8118			bra 	GXCircle
.8116					GXFrameCircle:
.8116	a9 00		lda #$00			lda 	#0
.8118					GXCircle:
.8118	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811b	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811e	f0 26		beq $8146			beq 	_GXCFail
.8120	20 89 88	jsr $8889			jsr 	GXSortXY 					; topleft/bottomright
.8123	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.8126	20 18 82	jsr $8218			jsr 	GXCircleSetup 				; set up for drawing
.8129	9c 4d 06	stz $064d			stz 	gxYChanged
.812c					_GXCircleDraw:
.812c	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.812f	cd 4b 06	cmp $064b			cmp 	gYCentre
.8132	90 0a		bcc $813e			bcc 	_GXCircleContinue
.8134	d0 03		bne $8139			bne 	_GXNoLast
.8136	20 4b 81	jsr $814b			jsr 	GXPlot1
.8139					_GXNoLast:
.8139	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; close the bitmap
.813c	18		clc				clc
.813d	60		rts				rts
.813e					_GXCircleContinue:
.813e	20 48 81	jsr $8148			jsr 	GXPlot2 					; draw it
.8141	20 c5 81	jsr $81c5			jsr 	GXCircleMove 				; adjust the coordinates
.8144	80 e6		bra $812c			bra 	_GXCircleDraw
.8146					_GXCFail:
.8146	38		sec				sec
.8147	60		rts				rts
.8148					GXPlot2:
.8148	20 4b 81	jsr $814b			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814b					GXPlot1:
.814b	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814e	f0 03		beq $8153			beq 	_GXPlot1Only
.8150	20 6f 81	jsr $816f			jsr 	GXPlot0 						; plot and negate
.8153					_GXPlot1Only:
.8153	20 6f 81	jsr $816f			jsr 	GXPlot0 						; twice, undoing negation
.8156	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.8159	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815c	8d 4b 06	sta $064b			sta 	gYCentre
.815f	8e 4a 06	stx $064a			stx 	gXCentre
.8162	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8165	a9 ff		lda #$ff			lda 	#$FF
.8167	8d 4d 06	sta $064d			sta 	gxYChanged
.816a	60		rts				rts
.816b	20 6f 81	jsr $816f			jsr 	GXPlot0 						; do once
.816e	60		rts				rts
.816f	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8172	f0 05		beq $8179			beq 	_GXPlot0Always
.8174	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8177	f0 2d		beq $81a6			beq 	GXPlot0Exit
.8179					_GXPlot0Always:
.8179	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817b	ad 4b 06	lda $064b			lda 	gYCentre
.817e	20 a7 81	jsr $81a7			jsr 	GXSubCopy
.8181	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8183	ad 4a 06	lda $064a			lda 	gXCentre
.8186	20 a7 81	jsr $81a7			jsr 	GXSubCopy
.8189	48		pha				pha 									; save last offset X
.818a	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 					; calculate position/offset.
.818d	68		pla				pla
.818e	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.818f	85 36		sta $36				sta 	gxzTemp0
.8191	64 37		stz $37				stz 	gxzTemp0+1
.8193	26 37		rol $37				rol 	gxzTemp0+1
.8195	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8198	69 80		adc #$80			adc 	#128
.819a	20 23 85	jsr $8523			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819d	38		sec				sec 									; GY = -GY
.819e	a9 00		lda #$00			lda 	#0
.81a0	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a3	8d 4b 06	sta $064b			sta 	gYCentre
.81a6					GXPlot0Exit:
.81a6	60		rts				rts
.81a7					GXSubCopy:
.81a7	85 36		sta $36				sta 	gxzTemp0
.81a9	64 37		stz $37				stz 	gxzTemp0+1
.81ab	29 80		and #$80			and 	#$80
.81ad	f0 02		beq $81b1			beq 	_GXNoSx
.81af	c6 37		dec $37				dec 	gxzTemp0+1
.81b1					_GXNoSx:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b5	e5 36		sbc $36				sbc 	gxzTemp0
.81b7	9d 31 06	sta $0631,x			sta 	gXX0,x
.81ba	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81bd	e5 37		sbc $37				sbc 	gxzTemp0+1
.81bf	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c2	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c4	60		rts				rts
.81c5					GXCircleMove:
.81c5	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c8	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81ca	10 0d		bpl $81d9			bpl 	_GXEMPositive
.81cc	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81cf	ad 4a 06	lda $064a			lda 	gXCentre
.81d2	20 f8 81	jsr $81f8			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d5	a9 06		lda #$06			lda 	#6  						; and add 6
.81d7	80 15		bra $81ee			bra 	_GXEMAddD
.81d9					_GXEMPositive:
.81d9	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dc	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81df	38		sec				sec 								; calculate X-Y
.81e0	ad 4a 06	lda $064a			lda 	gXCentre
.81e3	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e6	20 f8 81	jsr $81f8			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81e9	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81eb	ce 4d 06	dec $064d			dec 	gxYChanged
.81ee					_GXEMAddD:
.81ee	18		clc				clc
.81ef	65 38		adc $38				adc 	gxzTemp1
.81f1	85 38		sta $38				sta 	gxzTemp1
.81f3	90 02		bcc $81f7			bcc 	_GXEMNoCarry
.81f5	e6 39		inc $39				inc 	gxzTemp1+1
.81f7					_GXEMNoCarry:
.81f7	60		rts				rts
.81f8					_GXAdd4TimesToD:
.81f8	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fa	29 80		and #$80			and 	#$80
.81fc	f0 02		beq $8200			beq 	_GXA4Unsigned
.81fe	a9 ff		lda #$ff			lda 	#$FF
.8200					_GXA4Unsigned:
.8200	85 37		sta $37				sta 	gxzTemp0+1
.8202	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8204	26 37		rol $37				rol 	gxzTemp0+1
.8206	06 36		asl $36				asl 	gxzTemp0
.8208	26 37		rol $37				rol 	gxzTemp0+1
.820a	18		clc				clc 								; add
.820b	a5 36		lda $36				lda		gxzTemp0
.820d	65 38		adc $38				adc 	gxzTemp1
.820f	85 38		sta $38				sta 	gxzTemp1
.8211	a5 37		lda $37				lda		gxzTemp0+1
.8213	65 39		adc $39				adc 	gxzTemp1+1
.8215	85 39		sta $39				sta 	gxzTemp1+1
.8217	60		rts				rts
.8218					GXCircleSetup:
.8218	38		sec				sec
.8219	ad 37 06	lda $0637			lda 	gxY1
.821c	ed 33 06	sbc $0633			sbc 	gxY0
.821f	4a		lsr a				lsr 	a
.8220	8d 49 06	sta $0649			sta 	gxRadius
.8223	a2 00		ldx #$00			ldx 	#0
.8225	20 47 82	jsr $8247			jsr 	_GXCalculateCentre
.8228	a2 02		ldx #$02			ldx 	#2
.822a	20 47 82	jsr $8247			jsr 	_GXCalculateCentre
.822d	9c 4a 06	stz $064a			stz 	gXCentre
.8230	ad 49 06	lda $0649			lda 	gxRadius
.8233	8d 4b 06	sta $064b			sta 	gYCentre
.8236	0a		asl a				asl 	a 							; R x 2
.8237	85 36		sta $36				sta 	gxzTemp0
.8239	38		sec				sec
.823a	a9 03		lda #$03			lda 	#3
.823c	e5 36		sbc $36				sbc 	gxzTemp0
.823e	85 38		sta $38				sta 	gxzTemp1
.8240	a9 00		lda #$00			lda 	#0
.8242	e9 00		sbc #$00			sbc 	#0
.8244	85 39		sta $39				sta 	gxzTemp1+1
.8246	60		rts				rts
.8247					_GXCalculateCentre:
.8247	38		sec				sec
.8248	bd 35 06	lda $0635,x			lda 	gxX1,x
.824b	7d 31 06	adc $0631,x			adc 	gXX0,x
.824e	9d 35 06	sta $0635,x			sta 	gXX1,x
.8251	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8254	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8257	4a		lsr a				lsr 	a
.8258	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825b	7e 35 06	ror $0635,x			ror 	gXX1,x
.825e	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.825f					GXClearBitmap:
.825f	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8262	f0 24		beq $8288			beq 	_GXCBFail
.8264	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start access
.8267	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8269	ad 3d 06	lda $063d			lda 	gxHeight
.826c	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826e	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8270					_GXCalcLastPage:
.8270	98		tya				tya 								; add to base page
.8271	18		clc				clc
.8272	6d 3b 06	adc $063b			adc 	gxBasePage
.8275	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8277					_GXClearAll:
.8277	20 8a 82	jsr $828a			jsr 	_GXClearBlock 				; clear 8k block
.827a	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827c	a5 0b		lda $0b				lda 	GXEditSlot
.827e	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8281	b0 f4		bcs $8277			bcs 	_GXClearAll
.8283	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap	 			; stop access
.8286	18		clc				clc
.8287	60		rts				rts
.8288					_GXCBFail:
.8288	38		sec				sec
.8289	60		rts				rts
.828a					_GXClearBlock:
.828a	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828c	85 38		sta $38				sta 	0+gxzTemp1
.828e	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8290	85 39		sta $39				sta 	1+gxzTemp1
.8292					_GXCB0:
.8292	a5 36		lda $36				lda 	gxzTemp0
.8294	a0 00		ldy #$00			ldy 	#0
.8296					_GXCB1:
.8296	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8298	c8		iny				iny
.8299	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829b	c8		iny				iny
.829c	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829e	c8		iny				iny
.829f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a1	c8		iny				iny
.82a2	d0 f2		bne $8296			bne 	_GXCB1
.82a4	e6 39		inc $39				inc 	gxzTemp1+1
.82a6	a5 39		lda $39				lda 	gxzTemp1+1
.82a8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82aa	d0 e6		bne $8292			bne 	_GXCB0
.82ac	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ad					GXInitialise:
.82ad	64 01		stz $01				stz 	1
.82af	a9 01		lda #$01			lda 	#1
.82b1	8d 00 d0	sta $d000			sta 	$D000
.82b4	18		clc				clc
.82b5	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b8	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bb	a2 0f		ldx #$0f			ldx 	#15
.82bd					_GXIClear:
.82bd	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c0	ca		dex				dex
.82c1	10 fa		bpl $82bd			bpl 	_GXIClear
.82c3	60		rts				rts
.82c4					GXControlBitmap:
.82c4	64 01		stz $01				stz 	1
.82c6	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c8	29 01		and #$01			and 	#1 							; set bitmap flag
.82ca	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82cd	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82ce	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d1	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d3	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d5	90 02		bcc $82d9			bcc 	_CBNotOn
.82d7	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82d9					_CBNotOn:
.82d9	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dc	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82de	29 07		and #$07			and 	#7
.82e0	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e3	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e5	d0 02		bne $82e9			bne 	_CBNotDefault
.82e7	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82e9					_CBNotDefault:
.82e9	8d 3b 06	sta $063b			sta 	gxBasePage
.82ec	20 4a 83	jsr $834a			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82ef	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f1	8d 03 d1	sta $d103			sta 	$D103
.82f4	a5 36		lda $36				lda 	gxzTemp0
.82f6	8d 02 d1	sta $d102			sta 	$D102
.82f9	9c 01 d1	stz $d101			stz 	$D101
.82fc	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82fe	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8301	29 01		and #$01			and 	#1
.8303	f0 02		beq $8307			beq 	_CBHaveHeight
.8305	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8307					_CBHaveHeight
.8307	8e 3d 06	stx $063d			stx 	gxHeight
.830a	18		clc				clc
.830b	60		rts				rts
.830c					GXControlSprite:
.830c	64 01		stz $01				stz 	1
.830e	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8310	29 01		and #$01			and 	#1 							; set sprites flag
.8312	8d 39 06	sta $0639			sta 	gxSpritesOn
.8315	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8316	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8319	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831b	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831d	90 02		bcc $8321			bcc 	_CSNotOn
.831f	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8321					_CSNotOn:
.8321	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8324	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8326	d0 02		bne $832a			bne 	_CSNotDefault
.8328	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832a					_CSNotDefault:
.832a	8d 3c 06	sta $063c			sta 	gxSpritePage
.832d	20 4a 83	jsr $834a			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8330	a5 36		lda $36				lda 	zTemp0
.8332	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8335	a5 37		lda $37				lda 	zTemp0+1
.8337	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833a	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833c					_CSClear:
.833c	9e 00 d9	stz $d900,x			stz 	$D900,x
.833f	9e 00 da	stz $da00,x			stz 	$DA00,x
.8342	ca		dex				dex
.8343	d0 f7		bne $833c			bne 	_CSClear
.8345	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8348	18		clc				clc
.8349	60		rts				rts
.834a					GXCalculateBaseAddress:
.834a	85 36		sta $36				sta 	gxzTemp0
.834c	64 37		stz $37				stz 	gxzTemp0+1
.834e	a9 05		lda #$05			lda 	#5
.8350					_GXShift:
.8350	06 36		asl $36				asl 	gxzTemp0
.8352	26 37		rol $37				rol 	gxzTemp0+1
.8354	3a		dec a				dec		a
.8355	d0 f9		bne $8350			bne 	_GXShift
.8357	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8358					GXLine:
.8358	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835b	f0 28		beq $8385			beq 	_GXLFail
.835d	20 be 87	jsr $87be			jsr 	GXOpenBitmap
.8360	20 a7 88	jsr $88a7			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8363	20 2b 84	jsr $842b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8366	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; calculate position/offset.
.8369					_GXDrawLoop:
.8369	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836e	2d 41 06	and $0641			and 	gxANDValue
.8371	4d 40 06	eor $0640			eor 	gxEORValue
.8374	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8376	20 87 83	jsr $8387			jsr 	GXLineIsComplete 			; is the line complete ?
.8379	f0 05		beq $8380			beq 	_GXLExit
.837b	20 a2 83	jsr $83a2			jsr 	GXLineAdvance 				; code as per advance method
.837e	80 e9		bra $8369			bra 	_GXDrawLoop
.8380					_GXLExit:
.8380	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.8383	18		clc				clc
.8384	60		rts				rts
.8385					_GXLFail:
.8385	38		sec				sec
.8386	60		rts				rts
.8387					GXLineIsComplete:
.8387	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838a	d0 0f		bne $839b			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838c	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.838f	4d 35 06	eor $0635			eor 	GXX1
.8392	d0 06		bne $839a			bne 	_GXLICExit
.8394	ad 32 06	lda $0632			lda 	GXX0+1
.8397	4d 36 06	eor $0636			eor 	GXX1+1
.839a					_GXLICExit:
.839a	60		rts				rts
.839b					_GXLICCompareY:
.839b	ad 37 06	lda $0637			lda 	GXY1
.839e	4d 33 06	eor $0633			eor 	GXY0
.83a1	60		rts				rts
.83a2					GXLineAdvance:
.83a2	18		clc				clc 								; add adjust to position
.83a3	ad 52 06	lda $0652			lda 	GXPosition
.83a6	6d 53 06	adc $0653			adc 	GXAdjust
.83a9	8d 52 06	sta $0652			sta 	GXPosition
.83ac	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83af	b0 05		bcs $83b6			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b1	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b4	90 0a		bcc $83c0			bcc 	_GXLANoExtra
.83b6					_GXLAOverflow:
.83b6	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83b9	38		sec				sec 								; subtract total and write back
.83ba	ed 54 06	sbc $0654			sbc 	GXTotal
.83bd	8d 52 06	sta $0652			sta 	GXPosition
.83c0					_GXLANoExtra:
.83c0	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c3	f0 0d		beq $83d2			beq 	_GXDXLarger
.83c5	20 24 84	jsr $8424			jsr 	GXIncrementY
.83c8	ad 55 06	lda $0655			lda 	GXAddSelect
.83cb	f0 10		beq $83dd			beq 	_GXLAExit
.83cd	20 de 83	jsr $83de			jsr 	GXAdjustX
.83d0	80 0b		bra $83dd			bra 	_GXLAExit
.83d2					_GXDXLarger:
.83d2	20 de 83	jsr $83de			jsr 	GXAdjustX
.83d5	ad 55 06	lda $0655			lda 	GXAddSelect
.83d8	f0 03		beq $83dd			beq 	_GXLAExit
.83da	20 24 84	jsr $8424			jsr 	GXIncrementY
.83dd					_GXLAExit:
.83dd	60		rts				rts
.83de					GXAdjustX:
.83de	ad 51 06	lda $0651			lda 	GXDXNegative
.83e1	10 25		bpl $8408			bpl 	_GXAXRight
.83e3	ad 31 06	lda $0631			lda 	GXX0
.83e6	d0 03		bne $83eb			bne 	_GXAXNoBorrow
.83e8	ce 32 06	dec $0632			dec 	GXX0+1
.83eb					_GXAXNoBorrow:
.83eb	ce 31 06	dec $0631			dec 	GXX0
.83ee	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f1	ad 44 06	lda $0644			lda 	gsOffset
.83f4	c9 ff		cmp #$ff			cmp 	#$FF
.83f6	d0 0f		bne $8407			bne 	_GXAYExit 					; underflow
.83f8	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fa	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fc	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83fe	b0 07		bcs $8407			bcs 	_GXAYExit
.8400	18		clc				clc
.8401	69 20		adc #$20			adc 	#$20 						; fix up
.8403	85 3d		sta $3d				sta 	gxzScreen+1
.8405	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8407					_GXAYExit:
.8407	60		rts				rts
.8408					_GXAXRight:
.8408	ee 31 06	inc $0631			inc 	GXX0
.840b	d0 03		bne $8410			bne 	_GXAXNoCarry
.840d	ee 32 06	inc $0632			inc 	GXX0+1
.8410					_GXAXNoCarry:
.8410	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8413	d0 0e		bne $8423			bne 	_GXAXExit 					; if not overflowed, exit.
.8415	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8417	a5 3d		lda $3d				lda 	gxzScreen+1
.8419	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841b	90 06		bcc $8423			bcc 	_GXAXExit
.841d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.841f	85 3d		sta $3d				sta 	gxzScreen+1
.8421	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8423					_GXAXExit:
.8423	60		rts				rts
.8424					GXIncrementY:
.8424	ee 33 06	inc $0633			inc 	GXY0
.8427	20 32 88	jsr $8832			jsr 	GXMovePositionDown
.842a	60		rts				rts
.842b					GXLineSetup:
.842b	ad 37 06	lda $0637			lda 	GXY1
.842e	38		sec				sec
.842f	ed 33 06	sbc $0633			sbc 	GXY0
.8432	4a		lsr a				lsr 	a
.8433	8d 4f 06	sta $064f			sta 	GXDiffY
.8436	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.8439	38		sec				sec
.843a	ad 35 06	lda $0635			lda 	GXX1
.843d	ed 31 06	sbc $0631			sbc 	GXX0
.8440	8d 4e 06	sta $064e			sta 	GXDiffX
.8443	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8446	ed 32 06	sbc $0632			sbc 	GXX0+1
.8449	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844a	6e 4e 06	ror $064e			ror 	GXDiffX
.844d	0a		asl a				asl 	a
.844e	10 0c		bpl $845c			bpl 	_GDXNotNegative
.8450	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8452	38		sec				sec
.8453	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8456	8d 4e 06	sta $064e			sta 	GXDiffX
.8459	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845c					_GDXNotNegative:
.845c	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.845f	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8462	8d 53 06	sta $0653			sta 	GXAdjust
.8465	ad 4e 06	lda $064e			lda 	GXDiffX
.8468	8d 54 06	sta $0654			sta 	GXTotal
.846b	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846e	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8471	90 0f		bcc $8482			bcc 	_GDXNotLarger
.8473	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8476	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.8479	8d 53 06	sta $0653			sta 	GXAdjust
.847c	ad 4f 06	lda $064f			lda 	GXDiffY
.847f	8d 54 06	sta $0654			sta 	GXTotal
.8482					_GDXNotLarger:
.8482	ad 54 06	lda $0654			lda 	GXTotal
.8485	4a		lsr a				lsr 	a
.8486	8d 52 06	sta $0652			sta 	GXPosition
.8489	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848a					GXSetColourMode:
.848a	a6 36		ldx $36				ldx 	gxzTemp0
.848c	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.848f	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8491	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8494	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8496	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8499	ae 3f 06	ldx $063f			ldx 	gxColour
.849c	8e 40 06	stx $0640			stx 	gxEORValue
.849f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a1	90 03		bcc $84a6			bcc 	_GXSDCNotAndColour
.84a3	8e 41 06	stx $0641			stx 	gxANDValue
.84a6					_GXSDCNotAndColour:
.84a6	d0 03		bne $84ab			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a8	9c 40 06	stz $0640			stz 	gxEORValue
.84ab					_GXSDCNotAnd:
.84ab	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ac	90 08		bcc $84b6			bcc 	_GXSDCNoFlip
.84ae	ad 41 06	lda $0641			lda	 	gxANDValue
.84b1	49 ff		eor #$ff			eor 	#$FF
.84b3	8d 41 06	sta $0641			sta 	gxANDValue
.84b6					_GXSDCNoFlip:
.84b6	18		clc				clc
.84b7	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b8					GXPlotPoint:
.84b8	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.84bb	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84be	ac 44 06	ldy $0644			ldy 	gsOffset
.84c1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c3	2d 41 06	and $0641			and 	gxANDValue
.84c6	4d 40 06	eor $0640			eor 	gxEORValue
.84c9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cb	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ce	18		clc				clc
.84cf	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d0					GXFillRectangle:
.84d0	38		sec				sec
.84d1	80 01		bra $84d4			bra 	GXRectangle
.84d3					GXFrameRectangle:
.84d3	18		clc				clc
.84d4					GXRectangle:
.84d4	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d7	f0 35		beq $850e			beq 	_GXRFail
.84d9	08		php				php 								; save Fill flag (CS)
.84da	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.84dd	20 89 88	jsr $8889			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e0	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e3	38		sec				sec 								; sec = Draw line
.84e4	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e7	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84ea	cd 37 06	cmp $0637			cmp 	gxY1
.84ed	f0 19		beq $8508			beq 	_GXRectangleExit
.84ef					_GXRectLoop:
.84ef	20 32 88	jsr $8832			jsr 	GXMovePositionDown 			; down one.
.84f2	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f5	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f8	cd 37 06	cmp $0637			cmp 	gXY1
.84fb	f0 07		beq $8504			beq 	_GXLastLine
.84fd	28		plp				plp 								; get flag back
.84fe	08		php				php
.84ff	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8502	80 eb		bra $84ef			bra 	_GXRectLoop
.8504					_GXLastLine:
.8504	38		sec				sec
.8505	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0
.8508					_GXRectangleExit:
.8508	68		pla				pla 								; throw fill flag.
.8509	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.850c	18		clc				clc
.850d	60		rts				rts
.850e					_GXRFail:
.850e	38		sec				sec
.850f	60		rts				rts
.8510					GXDrawLineX1X0:
.8510	08		php				php 								; save solid/either-end
.8511	38		sec				sec
.8512	ad 35 06	lda $0635			lda		gXX1
.8515	ed 31 06	sbc $0631			sbc 	gXX0
.8518	85 36		sta $36				sta 	gxzTemp0
.851a	ad 36 06	lda $0636			lda 	gXX1+1
.851d	ed 32 06	sbc $0632			sbc 	gXX0+1
.8520	85 37		sta $37				sta 	gxzTemp0+1
.8522	28		plp				plp
.8523					GXDrawLineTemp0:
.8523	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8525	48		pha				pha
.8526	a5 3d		lda $3d				lda 	gxzScreen+1
.8528	48		pha				pha
.8529	ad 44 06	lda $0644			lda 	gsOffset
.852c	48		pha				pha
.852d	a5 0b		lda $0b				lda 	GXEditSlot
.852f	48		pha				pha
.8530	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8533	90 1e		bcc $8553			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8535					_GXDLTLine:
.8535	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8537	2d 41 06	and $0641			and 	gxANDValue
.853a	4d 40 06	eor $0640			eor 	gxEORValue
.853d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.853f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8541	d0 04		bne $8547			bne 	_GXDLTNoBorrow
.8543	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8545	30 2e		bmi $8575			bmi 	_GXDLTExit
.8547					_GXDLTNoBorrow:
.8547	c6 36		dec $36				dec 	gxzTemp0
.8549	c8		iny				iny 								; next slot.
.854a	d0 e9		bne $8535			bne 	_GXDLTLine
.854c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854e	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap				; check for new page.
.8551	80 e2		bra $8535			bra 	_GXDLTLine
.8553					_GXDLTEndPoints:
.8553	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8555	2d 41 06	and $0641			and 	gxANDValue
.8558	4d 40 06	eor $0640			eor 	gxEORValue
.855b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855d	98		tya				tya 								; advance to right side
.855e	18		clc				clc
.855f	65 36		adc $36				adc 	gxzTemp0
.8561	a8		tay				tay
.8562	a5 3d		lda $3d				lda 	gxzScreen+1
.8564	65 37		adc $37				adc 	gxzTemp0+1
.8566	85 3d		sta $3d				sta 	gxzScreen+1
.8568	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap 			; fix up.
.856b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856d	2d 41 06	and $0641			and 	gxANDValue
.8570	4d 40 06	eor $0640			eor 	gxEORValue
.8573	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8575					_GXDLTExit:
.8575	68		pla				pla
.8576	85 0b		sta $0b				sta 	GXEditSlot
.8578	68		pla				pla
.8579	8d 44 06	sta $0644			sta 	gsOffset
.857c	68		pla				pla
.857d	85 3d		sta $3d				sta 	gxzScreen+1
.857f	68		pla				pla
.8580	85 3c		sta $3c				sta 	gxzScreen
.8582	60		rts				rts
.8583					GXDLTCheckWrap:
.8583	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8585	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8587	90 06		bcc $858f			bcc 	_GXDLTCWExit
.8589	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858b	85 3d		sta $3d				sta 	gxzScreen+1
.858d	e6 0b		inc $0b				inc 	GXEditSlot
.858f					_GXDLTCWExit:
.858f	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8590					GXDrawGraphicElement:
.8590	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8593	3a		dec a				dec 	a
.8594	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8597	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859a	9c 5c 06	stz $065c			stz 	gxHFlip
.859d	2c 5d 06	bit $065d			bit 	gxUseMode
.85a0	10 03		bpl $85a5			bpl 	_GXNotVertical
.85a2	8d 5b 06	sta $065b			sta 	gxVFlip
.85a5					_GXNotVertical:
.85a5	50 03		bvc $85aa			bvc 	_GXNotHorizontal
.85a7	8d 5c 06	sta $065c			sta 	gxHFlip
.85aa					_GXNotHorizontal:
.85aa	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ad	f0 5f		beq $860e			beq 	_GXSLFail
.85af	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b2	48		pha				pha
.85b3	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b6	8e 58 06	stx $0658			stx 	gxAcquireVector
.85b9	20 be 87	jsr $87be			jsr 	gxOpenBitmap 				; open the bitmap.
.85bc	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85bf	4a		lsr a				lsr 	a
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	29 07		and #$07			and		#7
.85c4	1a		inc a				inc 	a
.85c5	8d 5a 06	sta $065a			sta 	gxScale
.85c8	64 38		stz $38				stz 	gxzTemp1						; start first line
.85ca					_GXGELoop:
.85ca	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cc	4d 5b 06	eor $065b			eor 	gxVFlip
.85cf	aa		tax				tax 								; get the Xth line.
.85d0	20 10 86	jsr $8610			jsr 	_GXCallAcquire 				; get that data.
.85d3	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d6	85 39		sta $39				sta 	gxzTemp1+1
.85d8					_GXGELoop2:
.85d8	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85db	cd 3d 06	cmp $063d			cmp 	gxHeight
.85de	b0 10		bcs $85f0			bcs 	_GXDGEExit
.85e0	20 13 86	jsr $8613			jsr 	GXRenderOneLine 			; render line
.85e3	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e5	d0 f1		bne $85d8			bne 	_GXGELoop2
.85e7	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85e9	a5 38		lda $38				lda 	gxzTemp1
.85eb	cd 56 06	cmp $0656			cmp 	gxSize
.85ee	d0 da		bne $85ca			bne 	_GXGELoop
.85f0					_GXDGEExit:
.85f0	68		pla				pla 								; restore Y for next time
.85f1	8d 33 06	sta $0633			sta 	gxY0
.85f4	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f7					_GXShiftLeft:
.85f7	18		clc				clc
.85f8	ad 56 06	lda $0656			lda 	gxSize
.85fb	6d 31 06	adc $0631			adc 	gxX0
.85fe	8d 31 06	sta $0631			sta 	gxX0
.8601	90 03		bcc $8606			bcc 	_GXSLNoCarry
.8603	ee 32 06	inc $0632			inc 	gxX0+1
.8606					_GXSLNoCarry:
.8606	ca		dex				dex
.8607	d0 ee		bne $85f7			bne 	_GXShiftLeft
.8609	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.860c	18		clc				clc
.860d	60		rts				rts
.860e					_GXSLFail:
.860e	38		sec				sec
.860f	60		rts				rts
.8610					_GXCallAcquire:
.8610	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8613					GXRenderOneLine:
.8613	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; calculate position/offset.
.8616	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8619	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861b					_GXROLLoop1:
.861b	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861e	85 3b		sta $3b				sta 	gxzTemp2+1
.8620					_GXROLLoop2:
.8620	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8622	4d 5c 06	eor $065c			eor 	gxHFlip
.8625	aa		tax				tax 								; read from the pixel buffer
.8626	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8629	f0 0a		beq $8635			beq 	_GXZeroPixel 				; don't draw if zero.
.862b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.862d	2d 41 06	and $0641			and 	gxANDValue
.8630	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8633	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8635					_GXZeroPixel:
.8635	c8		iny				iny 								; advance pointer
.8636	d0 05		bne $863d			bne 	_GXNoShift
.8638	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.863a	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap				; check for new page.
.863d					_GXNoShift:
.863d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.863f	d0 df		bne $8620			bne 	_GXROLLoop2
.8641	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8643	a5 3a		lda $3a				lda 	gxzTemp2
.8645	cd 56 06	cmp $0656			cmp 	gxSize
.8648	d0 d1		bne $861b			bne 	_GXROLLoop1
.864a	ee 33 06	inc $0633			inc 	gxY0
.864d	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.864e					GXFontHandler:
.864e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8650	4d 3e 06	eor $063e			eor 	gxMode
.8653	8d 5d 06	sta $065d			sta 	gxUseMode
.8656	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8658	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.865a	26 37		rol $37				rol	 	gxzTemp0+1
.865c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.865e	26 37		rol $37				rol	 	gxzTemp0+1
.8660	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8662	26 37		rol $37				rol	 	gxzTemp0+1
.8664	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8666	09 c0		ora #$c0			ora 	#$C0
.8668	85 37		sta $37				sta 	gxzTemp0+1
.866a	a9 08		lda #$08			lda 	#8 							; size 8x8
.866c	a2 74		ldx #$74			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.866e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8670	20 90 85	jsr $8590			jsr 	GXDrawGraphicElement
.8673	60		rts				rts
.8674					GXGetGraphicDataFont:
.8674	8a		txa				txa 								; X->Y
.8675	a8		tay				tay
.8676	a6 01		ldx $01				ldx 	1 							; preserve old value
.8678	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.867a	85 01		sta $01				sta 	1
.867c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.867e	86 01		stx $01				stx 	1 							; put old value back.
.8680	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8682					_GXExpand:
.8682	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8685	0a		asl a				asl 	a 							; shift bit 7 into C
.8686	90 08		bcc $8690			bcc 	_GXNoPixel
.8688	48		pha				pha 								; if set, set pixel buffer to current colour.
.8689	ad 3f 06	lda $063f			lda 	gxColour
.868c	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.868f	68		pla				pla
.8690					_GXNoPixel:
.8690	e8		inx				inx 								; do the whole byte.
.8691	e0 08		cpx #$08			cpx 	#8
.8693	d0 ed		bne $8682			bne 	_GXExpand
.8695	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8696					GXSpriteHandler:
.8696	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8698	4d 3e 06	eor $063e			eor 	gxMode
.869b	8d 5d 06	sta $065d			sta 	gxUseMode
.869e	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a0	da		phx				phx
.86a1	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; can access sprite information
.86a4	68		pla				pla
.86a5	20 4d 88	jsr $884d			jsr 	GXFindSprite 				; get the sprite address
.86a8	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.86ab	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86ae	a2 b6		ldx #$b6			ldx 	#GXSpriteAcquire & $FF
.86b0	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86b2	20 90 85	jsr $8590			jsr 	GXDrawGraphicElement
.86b5	60		rts				rts
.86b6					GXSpriteAcquire:
.86b6	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86b9	85 0b		sta $0b				sta 	GXEditSlot
.86bb	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86bd	a9 00		lda #$00			lda 	#0
.86bf	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86c2					_GXTimesRowNumber:
.86c2	18		clc				clc
.86c3	65 36		adc $36				adc 	zTemp0
.86c5	ca		dex				dex
.86c6	10 fa		bpl $86c2			bpl 	_GXTimesRowNumber
.86c8	64 37		stz $37				stz 	gxzTemp0+1
.86ca	0a		asl a				asl 	a 							; row x 2,4,6,8
.86cb	26 37		rol $37				rol 	gxzTemp0+1
.86cd	0a		asl a				asl 	a 							; row x 4,8,12,16
.86ce	26 37		rol $37				rol 	gxzTemp0+1
.86d0	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d1	26 37		rol $37				rol 	gxzTemp0+1
.86d3	85 36		sta $36				sta 	gxzTemp0
.86d5	18		clc				clc 								; add base address.
.86d6	a5 36		lda $36				lda 	gxzTemp0
.86d8	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86db	85 36		sta $36				sta 	gxzTemp0
.86dd	a5 37		lda $37				lda 	gxzTemp0+1
.86df	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86e2					_GXSAFindPage:
.86e2	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86e4	90 06		bcc $86ec			bcc 	_GXSAFoundPage
.86e6	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86e8	e6 0b		inc $0b				inc 	GXEditSlot
.86ea	80 f6		bra $86e2			bra 	_GXSAFindPage
.86ec					_GXSAFoundPage:
.86ec	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ee	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f0	a0 00		ldy #$00			ldy 	#0
.86f2					_GXSACopyLoop:
.86f2	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86f4	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86f7	c8		iny				iny
.86f8	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86fb	d0 f5		bne $86f2			bne 	_GXSACopyLoop
.86fd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86fe					GXSelect:
.86fe	ad 39 06	lda $0639			lda 	gxSpritesOn
.8701	f0 1f		beq $8722			beq 	_GXSFail
.8703	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8705	c9 40		cmp #$40			cmp 	#64
.8707	b0 19		bcs $8722			bcs 	_GXSFail
.8709	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.870b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.870d	06 36		asl $36				asl 	gxzTemp0
.870f	06 36		asl $36				asl 	gxzTemp0
.8711	06 36		asl $36				asl 	gxzTemp0
.8713	2a		rol a				rol 	a
.8714	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8716	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.8719	85 37		sta $37				sta 	gxzTemp0+1
.871b	a5 36		lda $36				lda 	gxzTemp0
.871d	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8720	18		clc				clc
.8721	60		rts				rts
.8722					_GXSFail:
.8722	38		sec				sec
.8723	60		rts				rts
.8724					GXSelectImage:
.8724	ad 39 06	lda $0639			lda 	gxSpritesOn
.8727	f0 5e		beq $8787			beq 	_GXSIFail
.8729	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.872c	f0 59		beq $8787			beq 	_GXSIFail
.872e	64 01		stz $01				stz 	1
.8730	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8732	d0 43		bne $8777			bne 	_GXSIHide
.8734	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8736	48		pha				pha
.8737	20 be 87	jsr $87be			jsr 	GXOpenBitmap
.873a	68		pla				pla
.873b	20 4d 88	jsr $884d			jsr 	GXFindSprite
.873e	a0 01		ldy #$01			ldy 	#1
.8740	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8743	85 36		sta $36				sta 	gxzTemp0
.8745	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8748	85 37		sta $37				sta 	gxzTemp0+1
.874a	ad 61 06	lda $0661			lda 	GXSpriteOffset
.874d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.874f	18		clc				clc
.8750	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8753	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8756	c8		iny				iny
.8757	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8759	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.875c	69 00		adc #$00			adc 	#0
.875e	c8		iny				iny
.875f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8761	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8764	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8766	2a		rol a				rol 	a 							; x 2
.8767	0a		asl a				asl 	a 							; x 4
.8768	0a		asl a				asl 	a 							; x 8
.8769	0a		asl a				asl 	a 							; x 16
.876a	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.876d	0a		asl a				asl 	a 							; 1 shift
.876e	09 01		ora #$01			ora 	#1 							; enable sprite.
.8770	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8772	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.8775	18		clc				clc
.8776	60		rts				rts
.8777					_GXSIHide:
.8777	ad 45 06	lda $0645			lda 	GSCurrentSprite
.877a	85 36		sta $36				sta 	gxzTemp0
.877c	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.877f	85 37		sta $37				sta 	gxzTemp0+1
.8781	a9 00		lda #$00			lda 	#0
.8783	92 36		sta ($36)			sta 	(gxzTemp0)
.8785	18		clc				clc
.8786	60		rts				rts
.8787					_GXSIFail:
.8787	38		sec				sec
.8788	60		rts				rts
.8789					GXMoveSprite:
.8789	ad 39 06	lda $0639			lda 	gxSpritesOn
.878c	f0 2e		beq $87bc			beq 	_GXSIFail
.878e	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8791	f0 29		beq $87bc			beq 	_GXSIFail
.8793	85 37		sta $37				sta 	gxzTemp0+1
.8795	a0 04		ldy #$04			ldy 	#4
.8797	ad 45 06	lda $0645			lda 	GSCurrentSprite
.879a	85 36		sta $36				sta 	gxzTemp0
.879c	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.879e	38		sec				sec
.879f	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87a2	4a		lsr a				lsr 	a
.87a3	48		pha				pha
.87a4	18		clc				clc
.87a5	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87a8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87aa	c8		iny				iny
.87ab	ad 32 06	lda $0632			lda 	gxX0+1
.87ae	69 00		adc #$00			adc 	#0
.87b0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b2	c8		iny				iny
.87b3	68		pla				pla
.87b4	18		clc				clc
.87b5	6d 33 06	adc $0633			adc 	gxY0
.87b8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ba	18		clc				clc
.87bb	60		rts				rts
.87bc					_GXSIFail:
.87bc	38		sec				sec
.87bd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87be					GXOpenBitmap:
.87be	78		sei				sei 								; no interrupts here
.87bf	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c1	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c4	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c6	85 00		sta $00				sta 	0
.87c8	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87ca	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87cd	58		cli				cli
.87ce	60		rts				rts
.87cf					GXCloseBitmap:
.87cf	78		sei				sei
.87d0	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d3	85 0b		sta $0b				sta 	GXEditSlot
.87d5	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87d8	85 00		sta $00				sta 	0
.87da	58		cli				cli
.87db	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87dc					GXPositionCalc:
.87dc	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87de	48		pha				pha
.87df	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87e2	85 3c		sta $3c				sta 	gxzScreen
.87e4	64 3d		stz $3d				stz 	gxzScreen+1
.87e6	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87e8	26 3d		rol $3d				rol 	gxzScreen+1
.87ea	06 3c		asl $3c				asl 	gxzScreen
.87ec	26 3d		rol $3d				rol 	gxzScreen+1
.87ee	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87ef	65 3c		adc $3c				adc 	gxzScreen
.87f1	85 3c		sta $3c				sta 	gxzScreen
.87f3	90 02		bcc $87f7			bcc 	_GXPCNoCarry
.87f5	e6 3d		inc $3d				inc 	gxzScreen+1
.87f7					_GXPCNoCarry:
.87f7	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87f9	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87fb	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87fd	85 36		sta $36				sta 	gxzTemp0
.87ff	64 3d		stz $3d				stz 	gxzScreen+1
.8801	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8803					_GXPCMultiply32:
.8803	06 3c		asl $3c				asl 	gxzScreen
.8805	26 3d		rol $3d				rol 	gxzScreen+1
.8807	3a		dec a				dec 	a
.8808	d0 f9		bne $8803			bne 	_GXPCMultiply32
.880a	18		clc				clc
.880b	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.880e	65 3c		adc $3c				adc 	gxzScreen
.8810	8d 44 06	sta $0644			sta 	gsOffset
.8813	ad 32 06	lda $0632			lda 	GXX0+1
.8816	65 3d		adc $3d				adc 	gxzScreen+1
.8818	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.881a	90 04		bcc $8820			bcc 	_GXPCNoOverflow
.881c	29 1f		and #$1f			and 	#$1F 						; fix it up
.881e	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8820					_GXPCNoOverflow:
.8820	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8822	85 3d		sta $3d				sta 	gxzScreen+1
.8824	64 3c		stz $3c				stz 	gxzScreen
.8826	18		clc				clc
.8827	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8829	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.882c	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.882e	68		pla				pla
.882f	85 36		sta $36				sta 	gxzTemp0
.8831	60		rts				rts
.8832					GXMovePositionDown:
.8832	18		clc				clc 								; add 320 to offset/temp+1
.8833	ad 44 06	lda $0644			lda 	gsOffset
.8836	69 40		adc #$40			adc 	#64
.8838	8d 44 06	sta $0644			sta 	gsOffset
.883b	a5 3d		lda $3d				lda 	gxzScreen+1
.883d	69 01		adc #$01			adc 	#1
.883f	85 3d		sta $3d				sta 	gxzScreen+1
.8841	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8843	90 07		bcc $884c			bcc 	_GXMPDExit
.8845	38		sec				sec  								; next page
.8846	e9 20		sbc #$20			sbc 	#$20
.8848	85 3d		sta $3d				sta 	gxzScreen+1
.884a	e6 0b		inc $0b				inc 	GXEditSlot
.884c					_GXMPDExit:
.884c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884d					GXFindSprite:
.884d	aa		tax				tax
.884e	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8851	85 0b		sta $0b				sta 	GXEditSlot
.8853	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8856	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.8859	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.885c	48		pha				pha 								; save twice
.885d	48		pha				pha
.885e	29 03		and #$03			and 	#3 							; get sprite size
.8860	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8863	aa		tax				tax
.8864	bd 85 88	lda $8885,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8867	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.886a	68		pla				pla 								; get LUT
.886b	4a		lsr a				lsr		a
.886c	4a		lsr a				lsr		a
.886d	29 03		and #$03			and 	#3
.886f	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8872	68		pla				pla 								; address, neeeds to be x 4
.8873	29 f0		and #$f0			and 	#$F0
.8875	8d 61 06	sta $0661			sta 	GXSpriteOffset
.8878	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887b	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.887e	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8881	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8884	60		rts				rts
.8885					_GXFXSSTTable:
>8885	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8889					GXSortXY:
.8889	20 a7 88	jsr $88a7			jsr 	GXSortY 					; will be sorted on Y now
.888c	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.888f	cd 35 06	cmp $0635			cmp 	gxX1
.8892	ad 32 06	lda $0632			lda 	gXX0+1
.8895	ed 36 06	sbc $0636			sbc 	gXX1+1
.8898	90 0c		bcc $88a6			bcc 	_GXSXYExit 					; X0 < X1 exit
.889a	a2 00		ldx #$00			ldx 	#0 							; swap them over
.889c	a0 04		ldy #$04			ldy 	#4
.889e	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88a1	e8		inx				inx
.88a2	c8		iny				iny
.88a3	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88a6					_GXSXYExit:
.88a6	60		rts				rts
.88a7					GXSortY:
.88a7	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88aa	cd 37 06	cmp $0637			cmp 	gxY1
.88ad	90 0b		bcc $88ba			bcc 	_GXSYSorted
.88af	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b1	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b3					_GXSwap1:
.88b3	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88b6	88		dey				dey
.88b7	ca		dex				dex
.88b8	10 f9		bpl $88b3			bpl 	_GXSwap1
.88ba					_GXSYSorted:
.88ba	60		rts				rts
.88bb					GXSwapXY:
.88bb	bd 31 06	lda $0631,x			lda 	gxX0,x
.88be	48		pha				pha
.88bf	b9 31 06	lda $0631,y			lda 	gxX0,y
.88c2	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c5	68		pla				pla
.88c6	99 31 06	sta $0631,y			sta 	gxX0,y
.88c9	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.88ca					RunDemos:
.88ca					loop:
.88ca	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.88cc	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88ce	a0 00		ldy #$00			ldy 	#(0)
.88d0	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88d3	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.88d5	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d7	a0 00		ldy #$00			ldy 	#(0)
.88d9	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88dc	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.88de	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.88e0	a0 00		ldy #$00			ldy 	#(0)
.88e2	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88e5	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.88e7	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.88e9	a0 00		ldy #$00			ldy 	#(0)
.88eb	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88ee	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.88f0	a2 82		ldx #$82			ldx 	#((130) & $FF)
.88f2	a0 1e		ldy #$1e			ldy 	#(30)
.88f4	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.88f7	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.88f9	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.88fb	a0 08		ldy #$08			ldy 	#(1*8)
.88fd	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8900	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.8902	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.8904	a0 08		ldy #$08			ldy 	#(1*8)
.8906	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8909	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.890b	a2 00		ldx #$00			ldx 	#((0) & $FF)
.890d	a0 08		ldy #$08			ldy 	#(1*8)
.890f	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8912	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.8914	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8916	a0 08		ldy #$08			ldy 	#(1*8)
.8918	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.891b	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.891d	a2 02		ldx #$02			ldx 	#((2) & $FF)
.891f	a0 08		ldy #$08			ldy 	#(1*8)
.8921	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8924	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8926	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.8928	a0 0a		ldy #$0a			ldy 	#(10)
.892a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.892d	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.892f	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8931	a0 64		ldy #$64			ldy 	#(100)
.8933	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8936	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.8938	a2 03		ldx #$03			ldx 	#((3) & $FF)
.893a	a0 01		ldy #$01			ldy 	#(1)
.893c	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.893f	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.8941	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8943	a0 00		ldy #$00			ldy 	#(0)
.8945	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8948	a9 32		lda #$32			lda 	#((25)*2)+(((200) >> 8) & 1)
.894a	a2 c8		ldx #$c8			ldx 	#((200) & $FF)
.894c	a0 c8		ldy #$c8			ldy 	#(200)
.894e	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8951	a9 0c		lda #$0c			lda 	#((6)*2)+(((4) >> 8) & 1)
.8953	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8955	a0 01		ldy #$01			ldy 	#(1)
.8957	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.895a	a9 0e		lda #$0e			lda 	#((7)*2)+(((1) >> 8) & 1)
.895c	a2 01		ldx #$01			ldx 	#((1) & $FF)
.895e	a0 00		ldy #$00			ldy 	#(0)
.8960	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8963	a9 32		lda #$32			lda 	#((25)*2)+(((100) >> 8) & 1)
.8965	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8967	a0 c8		ldy #$c8			ldy 	#(200)
.8969	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.896c	a9 0c		lda #$0c			lda 	#((6)*2)+(((5) >> 8) & 1)
.896e	a2 05		ldx #$05			ldx 	#((5) & $FF)
.8970	a0 01		ldy #$01			ldy 	#(1)
.8972	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8975	a9 0e		lda #$0e			lda 	#((7)*2)+(((0) >> 8) & 1)
.8977	a2 00		ldx #$00			ldx 	#((0) & $FF)
.8979	a0 00		ldy #$00			ldy 	#(0)
.897b	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.897e	a9 32		lda #$32			lda 	#((25)*2)+(((50) >> 8) & 1)
.8980	a2 32		ldx #$32			ldx 	#((50) & $FF)
.8982	a0 c8		ldy #$c8			ldy 	#(200)
.8984	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8987	60		rts				rts
.8988	20 78 a2	jsr $a278	demo:	jsr 	Random32Bit
.898b	ee 40 06	inc $0640			inc 	gxEORValue
.898e	a9 30		lda #$30			lda 	#24*2
.8990	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8993	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8996	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8999	80 ed		bra $8988			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.899b					AssembleGroup1:
.899b	a9 ff		lda #$ff			lda 	#$FF
.899d	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89a0	80 02		bra $89a4			bra 	AsmGroup12
.89a2					AssembleGroup2:
.89a2	a5 00		lda $00				lda 	$00
.89a4					AsmGroup12:
.89a4	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89a7	68		pla				pla 								; pop the return address to access the information following.
.89a8	fa		plx				plx
.89a9	20 32 8a	jsr $8a32			jsr 	AccessParameters 			; get opcode and save as base
.89ac	8d a4 04	sta $04a4			sta 	BaseOpcode
.89af	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89b2	d0 08		bne $89bc			bne 	_AG12HaveMask
.89b4	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89b6	20 3a 8a	jsr $8a3a			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89b9	8d a5 04	sta $04a5			sta 	ModeMask
.89bc					_AG12HaveMask:
.89bc	20 75 8b	jsr $8b75			jsr 	TypeAndCalculateOperand 	; get zero page type
.89bf	da		phx				phx 								; save found address mode
.89c0	20 9e 8a	jsr $8a9e			jsr 	AssembleModeX
.89c3	fa		plx				plx  								; restore address mode
.89c4	b0 0b		bcs $89d1			bcs 	_AG12Exit
.89c6	20 d2 89	jsr $89d2			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89c9	20 9e 8a	jsr $8a9e			jsr 	AssembleModeX
.89cc	b0 03		bcs $89d1			bcs 	_AG12Exit
.89ce	4c c0 b2	jmp $b2c0			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89d1					_AG12Exit:
.89d1	60		rts				rts
.89d2					PromoteToAbsolute:
.89d2	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89d4	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89d6	f0 19		beq $89f1			beq 	_PTADo
.89d8	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89da	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89dc	f0 13		beq $89f1			beq 	_PTADo
.89de	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89e0	e0 80		cpx #$80			cpx 	#AM_ZEROY
.89e2	f0 0d		beq $89f1			beq 	_PTADo
.89e4	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.89e6	e0 d1		cpx #$d1			cpx 	#AM_IND
.89e8	f0 07		beq $89f1			beq 	_PTADo
.89ea	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.89ec	e0 c0		cpx #$c0			cpx 	#AM_INDX
.89ee	f0 01		beq $89f1			beq 	_PTADo
.89f0	60		rts				rts
.89f1					_PTADo:
.89f1	aa		tax				tax
.89f2	60		rts				rts
.89f3					AssembleGroup3:
.89f3	68		pla				pla 								; get parameters, which is just the opcode.
.89f4	fa		plx				plx
.89f5	20 32 8a	jsr $8a32			jsr 	AccessParameters 			; get and output opcode
.89f8	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte
.89fb	20 d9 8b	jsr $8bd9			jsr 	CalculateOperand 			; get a 16 bit operand
.89fe	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a01	38		sec				sec
.8a02	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a05	48		pha				pha 								; LSB in A
.8a06	ad 10 04	lda $0410			lda 	NSMantissa1
.8a09	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a0c	aa		tax				tax 								; MSB in X
.8a0d	68		pla				pla
.8a0e	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a0f	69 7f		adc #$7f			adc 	#$7F
.8a11	90 01		bcc $8a14			bcc 	_AG3NoCarry
.8a13	e8		inx				inx
.8a14					_AG3NoCarry:
.8a14	38		sec				sec 								; fix back and write out anyways.
.8a15	e9 80		sbc #$80			sbc 	#$80
.8a17	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte
.8a1a	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a1c	f0 0a		beq $8a28			beq 	_AG3Exit
.8a1e	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a21	29 01		and #$01			and 	#1
.8a23	f0 03		beq $8a28			beq 	_AG3Exit
.8a25	4c c5 b2	jmp $b2c5			jmp 	RangeError 					; no, branch is out of range
.8a28					_AG3Exit:
.8a28	60		rts				rts
.8a29					AssembleGroup4:
.8a29	68		pla				pla 								; pop address
.8a2a	fa		plx				plx
.8a2b	20 32 8a	jsr $8a32			jsr 	AccessParameters 			; access and get first
.8a2e	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte 			; output it.
.8a31	60		rts				rts
.8a32					AccessParameters:
.8a32	8d a1 04	sta $04a1			sta 	ParamStart
.8a35	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a38	a9 01		lda #$01			lda 	#1
.8a3a					GetParameter:
.8a3a	5a		phy				phy
.8a3b	a8		tay				tay
.8a3c	ad a1 04	lda $04a1			lda 	ParamStart
.8a3f	85 36		sta $36				sta 	zTemp0
.8a41	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a44	85 37		sta $37				sta 	zTemp0+1
.8a46	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a48	7a		ply				ply
.8a49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a4a					AssemblerWriteByte:
.8a4a	48		pha			pha
.8a4b	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a4e	29 02		and #$02		and 	#2
.8a50	f0 1b		beq $8a6d		beq 	_AWBNoPrint
.8a52	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a55	20 88 8a	jsr $8a88		jsr 	PrintHex
.8a58	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a5b	20 88 8a	jsr $8a88		jsr 	PrintHex
.8a5e	a9 20		lda #$20		lda 	#' '
.8a60	20 77 b4	jsr $b477		jsr 	EXTPrintCharacter
.8a63	68		pla			pla 									; print byte
.8a64	48		pha			pha
.8a65	20 88 8a	jsr $8a88		jsr 	PrintHex
.8a68	a9 0d		lda #$0d		lda 	#13
.8a6a	20 77 b4	jsr $b477		jsr 	EXTPrintCharacter
.8a6d					_AWBNoPrint:
.8a6d	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a70	85 36		sta $36			sta 	zTemp0
.8a72	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a75	f0 0e		beq $8a85		beq 	_AWBRange
.8a77	85 37		sta $37			sta 	zTemp0+1
.8a79	68		pla			pla 									; write byte out
.8a7a	92 36		sta ($36)		sta 	(zTemp0)
.8a7c	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a7f	d0 03		bne $8a84		bne 	_AWBNoCarry
.8a81	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a84					_AWBNoCarry:
.8a84	60		rts			rts
.8a85					_AWBRange:
.8a85	4c c5 b2	jmp $b2c5		jmp 	RangeError
.8a88					PrintHex:
.8a88	48		pha				pha
.8a89	4a		lsr a				lsr 	a
.8a8a	4a		lsr a				lsr 	a
.8a8b	4a		lsr a				lsr 	a
.8a8c	4a		lsr a				lsr 	a
.8a8d	20 91 8a	jsr $8a91			jsr 	_PrintNibble
.8a90	68		pla				pla
.8a91					_PrintNibble:
.8a91	29 0f		and #$0f			and 	#15
.8a93	c9 0a		cmp #$0a			cmp 	#10
.8a95	90 02		bcc $8a99			bcc 	_NoShift
.8a97	69 06		adc #$06			adc 	#6
.8a99					_NoShift:
.8a99	69 30		adc #$30			adc 	#48
.8a9b	4c 77 b4	jmp $b477			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8a9e					AssembleModeX:
.8a9e	5a		phy				phy
.8a9f	ad a3 04	lda $04a3			lda 	IsGroup1
.8aa2	f0 17		beq $8abb			beq 	_AMXGroup2
.8aa4	8a		txa				txa 							; is it in group # 1
.8aa5	29 40		and #$40			and 	#AM_ISG1
.8aa7	f0 50		beq $8af9			beq 	_AMXFail 				; no, give up.
.8aa9	8a		txa				txa 							; get back.
.8aaa	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aac	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8aae	d0 22		bne $8ad2			bne 	_AMXHaveInfo
.8ab0	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ab3	c9 81		cmp #$81			cmp 	#$81
.8ab5	f0 42		beq $8af9			beq 	_AMXFail
.8ab7	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8ab9	80 17		bra $8ad2			bra 	_AMXHaveInfo 			; odd design decision there.
.8abb					_AMXGroup2:
.8abb	8a		txa				txa 							; is it in group 2 ?
.8abc	29 20		and #$20			and 	#AM_ISG2
.8abe	f0 39		beq $8af9			beq 	_AMXFail 				; no, give up.
.8ac0	8a		txa				txa 							; get the offset into Y
.8ac1	29 1f		and #$1f			and 	#$1F
.8ac3	4a		lsr a				lsr 	a 						; make it 0-7.
.8ac4	4a		lsr a				lsr  	a
.8ac5	a8		tay				tay
.8ac6	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8ac9					_AMXCheckOkay:
.8ac9	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8aca	88		dey				dey
.8acb	10 fc		bpl $8ac9			bpl 	_AMXCheckOkay
.8acd	90 2a		bcc $8af9			bcc 	_AMXFail 				; not allowed.
.8acf	8a		txa				txa  							; get mask back
.8ad0	29 1f		and #$1f			and 	#$1F
.8ad2					_AMXHaveInfo:
.8ad2	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8ad4	10 05		bpl $8adb			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8ad6	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8ad9	d0 1e		bne $8af9			bne 	_AMXFail
.8adb					_AMXAnySize:
.8adb	18		clc				clc 							; add offset to the base opcode
.8adc	6d a4 04	adc $04a4			adc 	BaseOpcode
.8adf					_AMXOutputCode:
.8adf	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte 		; write the opcode out.
.8ae2	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8ae4	f0 10		beq $8af6			beq 	_AMXExit
.8ae6	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8ae9	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte
.8aec	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8aee	30 06		bmi $8af6			bmi 	_AMXExit
.8af0	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8af3	20 4a 8a	jsr $8a4a			jsr 	AssemblerWriteByte
.8af6					_AMXExit:
.8af6	7a		ply				ply
.8af7	38		sec				sec
.8af8	60		rts				rts
.8af9					_AMXFail:
.8af9	a0 00		ldy #$00			ldy 	#0
.8afb					_AMXCheckOddities:
.8afb	8a		txa				txa
.8afc	d9 24 8b	cmp $8b24,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8aff	d0 16		bne $8b17			bne 	_AMXCONext
.8b01	b9 22 8b	lda $8b22,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b04	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b07	d0 0e		bne $8b17			bne 	_AMXCONext
.8b09	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b0b	10 05		bpl $8b12			bpl 	_AMXCONotZero
.8b0d	ad 10 04	lda $0410			lda 	NSMantissa1
.8b10	d0 05		bne $8b17			bne 	_AMXCONext
.8b12					_AMXCONotZero:
.8b12	b9 23 8b	lda $8b23,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b15	80 c8		bra $8adf			bra 	_AMXOutputCode 			; and assemble it
.8b17					_AMXCONext:
.8b17	c8		iny				iny
.8b18	c8		iny				iny
.8b19	c8		iny				iny
.8b1a	b9 22 8b	lda $8b22,y			lda 	ExtraOpcode+0,y 		; end of table
.8b1d	d0 dc		bne $8afb			bne 	_AMXCheckOddities
.8b1f					_AMXCOFail:
.8b1f	7a		ply				ply
.8b20	18		clc				clc
.8b21	60		rts				rts
.8b22					ExtraOpcode:
>8b22	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b25	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b28	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b2b	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b2e	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b31	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b34	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b37	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b3a	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b3d	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b40	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b41					LabelHere:
.8b41	c8		iny				iny 								; skip .
.8b42	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b44	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm 				; get a term
.8b47	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b4a	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b4c	d0 24		bne $8b72			bne 	_ALType
.8b4e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b51	85 36		sta $36				sta 	zTemp0
.8b53	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b56	85 37		sta $37				sta 	zTemp0+1
.8b58	5a		phy				phy 								; copy address in.
.8b59	a0 01		ldy #$01			ldy 	#1
.8b5b	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b5e	92 36		sta ($36)			sta 	(zTemp0)
.8b60	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b63	91 36		sta ($36),y			sta 	(zTemp0),y
.8b65	c8		iny				iny
.8b66	a9 00		lda #$00			lda 	#0
.8b68	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6a	c8		iny				iny
.8b6b	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6d	c8		iny				iny
.8b6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8b70	7a		ply				ply
.8b71	60		rts				rts
.8b72					_ALType:
.8b72	4c ca b2	jmp $b2ca			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b75					TypeAndCalculateOperand:
.8b75	b1 30		lda ($30),y			lda 	(codePtr),y
.8b77	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b79	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b7b	f0 5b		beq $8bd8			beq 	_TACOExit
.8b7d	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b7f	f0 57		beq $8bd8			beq 	_TACOExit
.8b81	c8		iny				iny
.8b82	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b84	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b86	f0 51		beq $8bd9			beq 	CalculateOperand
.8b88	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b8a	f0 1f		beq $8bab			beq 	_TACOIndirect
.8b8c	88		dey				dey 								; undo get of first character
.8b8d	20 d9 8b	jsr $8bd9			jsr 	CalculateOperand 			; get operand
.8b90	b1 30		lda ($30),y			lda 	(codePtr),y
.8b92	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b94	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b96	d0 40		bne $8bd8			bne 	_TACOExit
.8b98	c8		iny				iny
.8b99	20 51 ac	jsr $ac51			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b9c	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8b9e	c9 58		cmp #$58			cmp 	#'X'
.8ba0	f0 36		beq $8bd8			beq 	_TACOExit
.8ba2	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ba4	c9 59		cmp #$59			cmp 	#'Y'
.8ba6	f0 30		beq $8bd8			beq 	_TACOExit
.8ba8					_TACOSyntax:
.8ba8	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
.8bab					_TACOIndirect:
.8bab	20 d9 8b	jsr $8bd9			jsr 	CalculateOperand 			; get the operand
.8bae	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bb2	f0 17		beq $8bcb			beq 	_TACOIndX
.8bb4	20 da ac	jsr $acda			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bb7	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb9	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bbb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bbd	d0 19		bne $8bd8			bne 	_TACOExit
.8bbf	c8		iny				iny
.8bc0	20 51 ac	jsr $ac51			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bc3	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8bc5	d0 e1		bne $8ba8			bne 	_TACOSyntax
.8bc7	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bc9	80 0d		bra $8bd8			bra 	_TACOExit
.8bcb					_TACOIndX:
.8bcb	c8		iny				iny
.8bcc	20 51 ac	jsr $ac51			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bcf	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bd1	d0 d5		bne $8ba8			bne 	_TACOSyntax
.8bd3	20 da ac	jsr $acda			jsr 	CheckRightBracket			; check )
.8bd6	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bd8					_TACOExit:
.8bd8	60		rts				rts
.8bd9					CalculateOperand:
.8bd9	48		pha				pha
.8bda	da		phx				phx
.8bdb	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bdd	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger
.8be0	fa		plx				plx
.8be1	68		pla				pla
.8be2	60		rts				rts
.ac51					TACOCheckXY:
.ac51	b1 30		lda ($30),y			lda 	(codePtr),y
.ac53	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ac55	c9 40		cmp #$40			cmp 	#$40
.ac57	d0 21		bne $ac7a			bne 	_TCXYFail
.ac59	b1 30		lda ($30),y			lda 	(codePtr),y
.ac5b	18		clc				clc
.ac5c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ac5e	85 37		sta $37				sta 	zTemp0+1
.ac60	c8		iny				iny
.ac61	b1 30		lda ($30),y			lda 	(codePtr),y
.ac63	c8		iny				iny
.ac64	85 36		sta $36				sta 	zTemp0
.ac66	5a		phy				phy 								; save position
.ac67	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ac69	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac6b	d0 0c		bne $ac79			bne 	_TCXYPopFail
.ac6d	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ac6f	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac71	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ac73	f0 08		beq $ac7d			beq 	_TCXYFound
.ac75	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ac77	f0 04		beq $ac7d			beq 	_TCXYFound
.ac79					_TCXYPopFail:
.ac79	7a		ply				ply
.ac7a					_TCXYFail:
.ac7a	a9 00		lda #$00			lda 	#0
.ac7c	60		rts				rts
.ac7d					_TCXYFound:
.ac7d	7a		ply				ply 								; restore position
.ac7e	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ac80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8be3					EditProgramCode:
.8be3	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8be6	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8be9	20 26 a5	jsr $a526			jsr 	MemorySearch
.8bec	90 05		bcc $8bf3			bcc 	_EPCNoDelete 				; reached the end don't delete
.8bee	d0 03		bne $8bf3			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8bf0	20 bb b4	jsr $b4bb			jsr 	MemoryDeleteLine 			; delete the line
.8bf3					_EPCNoDelete:
.8bf3	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8bf6	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bf8	f0 0d		beq $8c07			beq 	_EPCNoInsert
.8bfa	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8bfd	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c00	20 26 a5	jsr $a526			jsr 	MemorySearch
.8c03	18		clc				clc 								; insert at this point.
.8c04	20 f2 b4	jsr $b4f2			jsr 	MemoryInsertLine 			; insert the line
.8c07					_EPCNoInsert:
.8c07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c08					WarmStart:
.8c08	a2 ff		ldx #$ff			ldx 	#$FF
.8c0a	9a		txs				txs
.8c0b	20 8d b4	jsr $b48d			jsr 	EXTInputLine 				; get line to lineBuffer
.8c0e	20 d2 a9	jsr $a9d2			jsr 	TokeniseLine 				; tokenise the line
.8c11	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8c14	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8c17	d0 17		bne $8c30			bne 	_WSEditCode 				; if so,edit code.
.8c19	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c1c	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8c1e	85 30		sta $30				sta 	codePtr
.8c20	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c22	85 31		sta $31				sta 	codePtr+1
.8c24	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8c27	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c29	f0 dd		beq $8c08			beq 	WarmStart
.8c2b	20 8c 94	jsr $948c			jsr 	RUNCodePointerLine 			; execute that line.
.8c2e	80 d8		bra $8c08			bra 	WarmStart
.8c30					_WSEditCode:
.8c30	20 e3 8b	jsr $8be3			jsr 	EditProgramCode
.8c33	20 a1 8c	jsr $8ca1			jsr 	ClearCommand
.8c36	80 d0		bra $8c08			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c38					AssembleCommand:
.8c38	a2 00		ldx #$00			ldx 	#0
.8c3a	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger 		; start address
.8c3d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c40	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c43	ad 10 04	lda $0410			lda 	NSMantissa1
.8c46	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c49	20 e2 ac	jsr $ace2			jsr 	CheckComma
.8c4c	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; options
.8c4f	ad 08 04	lda $0408			lda 	NSMantissa0
.8c52	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c55	60		rts				rts
.8c56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c57					AssertCommand:
.8c57	a2 00		ldx #$00			ldx 	#0
.8c59	20 3e a4	jsr $a43e			jsr 	EvaluateInteger 			; the assert test
.8c5c	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; exit if result is non zero.
.8c5f	d0 05		bne $8c66			bne 	_ACExit
.8c61	a9 0a		lda #$0a		lda	#10
.8c63	4c 09 99	jmp $9909		jmp	ErrorHandler
.8c66					_ACExit:
.8c66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c67					CallCommand:
.8c67	a2 00		ldx #$00			ldx 	#0
.8c69	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger
.8c6c					_CCClear
.8c6c	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c6d	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero
.8c70	e0 04		cpx #$04			cpx 	#4
.8c72	d0 f8		bne $8c6c			bne 	_CCClear
.8c74	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c76					_CCCParam:
.8c76	b1 30		lda ($30),y			lda 	(codePtr),y
.8c78	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c7a	d0 09		bne $8c85			bne 	_CCCRun6502
.8c7c	c8		iny				iny 								; skip comma
.8c7d	e8		inx				inx	 								; next level
.8c7e	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c81	e0 03		cpx #$03			cpx 	#3
.8c83	90 f1		bcc $8c76			bcc 	_CCCParam 					; done all 3 ?
.8c85					_CCCRun6502:
.8c85	5a		phy				phy 								; save position
.8c86	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c89	85 37		sta $37				sta 	zTemp0+1
.8c8b	ad 08 04	lda $0408			lda 	NSMantissa0
.8c8e	85 36		sta $36				sta 	zTemp0
.8c90	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c93	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c96	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c99	20 9e 8c	jsr $8c9e			jsr 	_CCCZTemp0 					; call zTemp0
.8c9c	7a		ply				ply 								; restore position and exit
.8c9d	60		rts				rts
.8c9e					_CCCZTemp0:
.8c9e	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ca1					ClearCommand:
.8ca1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ca3	85 36		sta $36				sta 	0+zTemp0
.8ca5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ca7	85 37		sta $37				sta 	1+zTemp0
.8ca9					_ClearZeroLoop:
.8ca9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cab	f0 24		beq $8cd1			beq 	_ClearZeroEnd
.8cad	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8caf	a9 00		lda #$00			lda 	#0
.8cb1					_ClearOneVariable:
.8cb1	91 36		sta ($36),y			sta 	(zTemp0),y
.8cb3	c8		iny				iny
.8cb4	c0 08		cpy #$08			cpy 	#8
.8cb6	d0 f9		bne $8cb1			bne 	_ClearOneVariable
.8cb8	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cba	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cbc	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cbe	d0 04		bne $8cc4			bne 	_ClearNotProcedure
.8cc0	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8cc2	91 36		sta ($36),y			sta 	(zTemp0),y
.8cc4					_ClearNotProcedure:
.8cc4	18		clc				clc 								; go to the next variable
.8cc5	b2 36		lda ($36)			lda 	(zTemp0)
.8cc7	65 36		adc $36				adc 	zTemp0
.8cc9	85 36		sta $36				sta 	zTemp0
.8ccb	90 dc		bcc $8ca9			bcc 	_ClearZeroLoop
.8ccd	e6 37		inc $37				inc 	zTemp0+1
.8ccf	80 d8		bra $8ca9			bra 	_ClearZeroLoop
.8cd1					_ClearZeroEnd:
.8cd1	18		clc				clc
.8cd2	a5 36		lda $36				lda 	zTemp0
.8cd4	69 01		adc #$01			adc 	#1
.8cd6	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cd9	a5 37		lda $37				lda 	zTemp0+1
.8cdb	69 00		adc #$00			adc 	#0
.8cdd	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ce0	20 e0 a5	jsr $a5e0			jsr 	StackReset
.8ce3	20 d5 b5	jsr $b5d5			jsr 	StringSystemInitialise
.8ce6	20 29 98	jsr $9829			jsr 	ProcedureScan
.8ce9	20 48 94	jsr $9448			jsr 	Command_Restore
.8cec	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8cef	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8cf2	9c a0 04	stz $04a0			stz 	AssemblerControl
.8cf5	20 d0 a1	jsr $a1d0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8cf8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8cf9					Command_Data:
.8cf9	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8cfb	a2 80		ldx #$80			ldx 	#KWC_EOL
.8cfd	20 7b 98	jsr $987b			jsr 	ScanForward
.8d00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d01					DimCommand:
.8d01	b1 30		lda ($30),y			lda 	(codePtr),y
.8d03	29 c0		and #$c0			and 	#$C0
.8d05	c9 40		cmp #$40			cmp 	#$40
.8d07	d0 7a		bne $8d83			bne 	_DCSyntax
.8d09	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0b	18		clc				clc
.8d0c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d0e	85 3f		sta $3f				sta 	zaTemp+1
.8d10	c8		iny				iny
.8d11	b1 30		lda ($30),y			lda 	(codePtr),y
.8d13	c8		iny				iny
.8d14	85 3e		sta $3e				sta 	zaTemp
.8d16	5a		phy				phy
.8d17	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d19	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d1b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d1d	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d1f	f0 62		beq $8d83			beq 	_DCSyntax
.8d21	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d23	29 04		and #$04			and 	#NSBIsArray
.8d25	f0 64		beq $8d8b			beq 	_DCType
.8d27	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d29	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d2b	d0 59		bne $8d86			bne 	_DCRedefine
.8d2d	7a		ply				ply
.8d2e	20 8e 8d	jsr $8d8e			jsr 	_DCGetSize 				; get array size, check it.
.8d31	5a		phy				phy
.8d32	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d34	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d36	7a		ply				ply 							; is there a second (e.g. ,x)
.8d37	b1 30		lda ($30),y			lda 	(codePtr),y
.8d39	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d3b	d0 0a		bne $8d47			bne 	_DCOneDimension
.8d3d	c8		iny				iny 							; skip comma
.8d3e	20 8e 8d	jsr $8d8e			jsr 	_DCGetSize 				; get 2nd array size
.8d41	5a		phy				phy
.8d42	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d44	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d46	7a		ply				ply
.8d47					_DCOneDimension:
.8d47	5a		phy				phy 							; save position
.8d48	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d4a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4c	aa		tax				tax
.8d4d	c8		iny				iny
.8d4e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d50	e8		inx				inx 							; bump them.
.8d51	1a		inc a				inc 	a
.8d52	20 5c b1	jsr $b15c			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d55	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d57	29 e0		and #$e0			and 	#$E0
.8d59	d0 23		bne $8d7e			bne 	_DCSize
.8d5b	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d5d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d5f	20 9c 8d	jsr $8d9c			jsr 	ScaleByBaseType 		; scale by base type
.8d62	a5 36		lda $36				lda 	zTemp0
.8d64	a6 37		ldx $37				ldx 	zTemp0+1
.8d66	20 92 a1	jsr $a192			jsr 	AllocateXABytes 		; allocate memory
.8d69	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d6b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6d	c8		iny				iny
.8d6e	8a		txa				txa
.8d6f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d71	7a		ply				ply 							; get position back
.8d72	20 da ac	jsr $acda			jsr 	CheckRightBracket 		; check )
.8d75	b1 30		lda ($30),y			lda 	(codePtr),y
.8d77	c8		iny				iny 							; consume in case
.8d78	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d7a	f0 85		beq $8d01			beq 	DimCommand
.8d7c	88		dey				dey 							; undo consume
.8d7d	60		rts				rts
.8d7e					_DCSize:
.8d7e	a9 16		lda #$16		lda	#22
.8d80	4c 09 99	jmp $9909		jmp	ErrorHandler
.8d83					_DCSyntax:
.8d83	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
.8d86					_DCRedefine:
.8d86	a9 15		lda #$15		lda	#21
.8d88	4c 09 99	jmp $9909		jmp	ErrorHandler
.8d8b					_DCType:
.8d8b	4c ca b2	jmp $b2ca			jmp 	TypeError
.8d8e					_DCGetSize:
.8d8e	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d90	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 	; get array dimension
.8d93	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d95	f0 e7		beq $8d7e			beq 	_DCSize
.8d97	c9 fe		cmp #$fe			cmp 	#254
.8d99	f0 e3		beq $8d7e			beq 	_DCSize
.8d9b	60		rts				rts
.8d9c					ScaleByBaseType:
.8d9c	29 10		and #$10			and 	#NSBIsString 			; is it string
.8d9e	d0 19		bne $8db9			bne 	_SBBTString
.8da0	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8da2	48		pha				pha
.8da3	a5 36		lda $36				lda 	zTemp0
.8da5	48		pha				pha
.8da6	06 36		asl $36				asl 	zTemp0 					; x 2
.8da8	26 37		rol $37				rol 	zTemp0+1
.8daa	06 36		asl $36				asl 	zTemp0 					; x 4
.8dac	26 37		rol $37				rol 	zTemp0+1
.8dae	68		pla				pla 							; add stacked value = x 5
.8daf	65 36		adc $36				adc 	zTemp0
.8db1	85 36		sta $36				sta 	zTemp0
.8db3	68		pla				pla
.8db4	65 37		adc $37				adc 	zTemp0+1
.8db6	85 37		sta $37				sta 	zTemp0+1
.8db8	60		rts				rts
.8db9					_SBBTString:
.8db9	06 36		asl $36				asl 	zTemp0
.8dbb	26 37		rol $37				rol 	zTemp0+1
.8dbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8dbe					EndCommand:
.8dbe	4c 08 8c	jmp $8c08			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8dc1					ForCommand:
.8dc1	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8dc3	20 7b a5	jsr $a57b			jsr 	StackOpen
.8dc6	a2 00		ldx #$00			ldx 	#0
.8dc8	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm
.8dcb	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dce	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8dd0	d0 49		bne $8e1b			bne		_FCError
.8dd2	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8dd4	20 ea ac	jsr $acea			jsr 	CheckNextA
.8dd7	e8		inx				inx
.8dd8	20 3e a4	jsr $a43e			jsr 	EvaluateInteger 			; <from> in +1
.8ddb	b1 30		lda ($30),y			lda 	(codePtr),y
.8ddd	c8		iny				iny 								; consume it
.8dde	48		pha				pha 								; save on stack for later
.8ddf	c9 af		cmp #$af			cmp 	#KWD_DOWNTO
.8de1	f0 04		beq $8de7			beq 	_FCNoSyntax
.8de3	c9 c4		cmp #$c4			cmp 	#KWD_TO
.8de5	d0 37		bne $8e1e			bne 	_FCSyntaxError
.8de7					_FCNoSyntax:
.8de7	e8		inx				inx
.8de8	20 3e a4	jsr $a43e			jsr 	EvaluateInteger
.8deb	20 bf a5	jsr $a5bf			jsr 	STKSaveCodePosition 		; save loop back position
.8dee	68		pla				pla 								; restore DOWNTO or TO
.8def	5a		phy				phy 								; save Y on the stack
.8df0	49 af		eor #$af			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8df2	f0 02		beq $8df6			beq 	_FCNotDownTo
.8df4	a9 02		lda #$02			lda 	#2
.8df6					_FCNotDownTo:
.8df6	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8df7	a0 10		ldy #$10			ldy 	#16
.8df9	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dfb	a0 06		ldy #$06			ldy 	#6
.8dfd	ad 08 04	lda $0408			lda 	NSMantissa0
.8e00	91 34		sta ($34),y			sta 	(basicStack),y
.8e02	ad 10 04	lda $0410			lda 	NSMantissa1
.8e05	c8		iny				iny
.8e06	91 34		sta ($34),y			sta 	(basicStack),y
.8e08	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e0a	a2 01		ldx #$01			ldx 	#1
.8e0c	20 21 8e	jsr $8e21			jsr 	FCIntegerToStack
.8e0f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e11	a2 02		ldx #$02			ldx 	#2
.8e13	20 21 8e	jsr $8e21			jsr 	FCIntegerToStack
.8e16	20 41 8e	jsr $8e41			jsr 	CopyIndexToReference
.8e19	7a		ply				ply 								; restore position
.8e1a	60		rts				rts
.8e1b					_FCError:
.8e1b	4c ca b2	jmp $b2ca			jmp 	TypeError
.8e1e					_FCSyntaxError:
.8e1e	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
.8e21					FCIntegerToStack:
.8e21	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8e24	10 03		bpl $8e29			bpl	 	_FCNotNegative
.8e26	20 7c a4	jsr $a47c			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e29					_FCNotNegative:
.8e29	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e2c	91 34		sta ($34),y			sta 	(basicStack),y
.8e2e	c8		iny				iny
.8e2f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e32	91 34		sta ($34),y			sta 	(basicStack),y
.8e34	c8		iny				iny
.8e35	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e38	91 34		sta ($34),y			sta 	(basicStack),y
.8e3a	c8		iny				iny
.8e3b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e3e	91 34		sta ($34),y			sta 	(basicStack),y
.8e40	60		rts				rts
.8e41					CopyIndexToReference:
.8e41	5a		phy				phy
.8e42	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e44	38		sec				sec 								; (because we copy from offset 8)
.8e45	b1 34		lda ($34),y			lda 	(basicStack),y
.8e47	e9 08		sbc #$08			sbc 	#8
.8e49	85 36		sta $36				sta 	zTemp0
.8e4b	c8		iny				iny
.8e4c	b1 34		lda ($34),y			lda 	(basicStack),y
.8e4e	e9 00		sbc #$00			sbc 	#0
.8e50	85 37		sta $37				sta 	zTemp0+1
.8e52	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e54	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e56	b1 34		lda ($34),y			lda 	(basicStack),y
.8e58	0a		asl a				asl 	a 							; into carry
.8e59	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e5b	90 14		bcc $8e71			bcc 	_CITRNormal
.8e5d	38		sec				sec
.8e5e					_CITRNegative:
.8e5e	a9 00		lda #$00			lda 	#0
.8e60	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e62	91 36		sta ($36),y			sta 	(zTemp0),y
.8e64	c8		iny				iny
.8e65	ca		dex				dex
.8e66	d0 f6		bne $8e5e			bne 	_CITRNegative
.8e68	88		dey				dey 								; look at MSB of mantissa
.8e69	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e6b	09 80		ora #$80			ora 	#$80
.8e6d	91 36		sta ($36),y			sta 	(zTemp0),y
.8e6f	7a		ply				ply
.8e70	60		rts				rts
.8e71					_CITRNormal:
.8e71	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e73	91 36		sta ($36),y			sta 	(zTemp0),y
.8e75	c8		iny				iny
.8e76	ca		dex				dex
.8e77	d0 f8		bne $8e71			bne 	_CITRNormal
.8e79	7a		ply				ply 								; and exit.
.8e7a	60		rts				rts
.8e7b					NextCommand:
.8e7b	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e7d	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e7f	20 a7 a5	jsr $a5a7			jsr 	StackCheckFrame
.8e82	5a		phy				phy
.8e83	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e85	b1 34		lda ($34),y			lda 	(basicStack),y
.8e87	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e89	30 02		bmi $8e8d			bmi 	_NCStepNeg
.8e8b	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e8d					_NCStepNeg:
.8e8d	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e8f	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e91	18		clc				clc
.8e92					_NCBump:
.8e92	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e94	91 34		sta ($34),y			sta 	(basicStack),y
.8e96	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e98	c8		iny				iny 								; next byte
.8e99	ca		dex				dex 								; do four times
.8e9a	d0 f6		bne $8e92			bne 	_NCBump
.8e9c	20 41 8e	jsr $8e41			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e9f	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ea1	b1 34		lda ($34),y			lda 	(basicStack),y
.8ea3	0a		asl a				asl 	a 							; sign bit to carry
.8ea4	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ea6	85 38		sta $38				sta 	zTemp1
.8ea8	90 02		bcc $8eac			bcc 	_NCCompRev 					; use if step is +ve
.8eaa	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8eac					_NCCompRev:
.8eac	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8eae	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8eb0	85 39		sta $39				sta 	zTemp1+1
.8eb2	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8eb4	38		sec				sec
.8eb5					_NCCompare:
.8eb5	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8eb7	b1 34		lda ($34),y			lda 	(basicStack),y
.8eb9	a4 39		ldy $39				ldy 	zTemp1+1
.8ebb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ebd	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ebf	e6 39		inc $39				inc 	zTemp1+1
.8ec1	ca		dex				dex 								; do it 4 times.
.8ec2	d0 f1		bne $8eb5			bne 	_NCCompare
.8ec4	50 02		bvc $8ec8			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ec6	49 80		eor #$80			eor 	#$80
.8ec8					_NCNoOverflow:
.8ec8	7a		ply				ply 								; restore Y position
.8ec9	0a		asl a				asl 	a 							; is bit 7 set.
.8eca	90 04		bcc $8ed0			bcc 	_NCLoopback 				; if no , >= so loop back
.8ecc	20 99 a5	jsr $a599			jsr 	StackClose 					; exit the loop
.8ecf	60		rts				rts
.8ed0					_NCLoopBack:
.8ed0	20 d0 a5	jsr $a5d0			jsr 	STKLoadCodePosition 		; loop back
.8ed3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8ed4					RectangleCommand:
.8ed4	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8ed6	80 02		bra $8eda			bra 	ShapeDrawCmd
.8ed8					CircleCommand:
.8ed8	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8eda					ShapeDrawCmd:
.8eda	20 68 8f	jsr $8f68			jsr 	RunGraphicsCommand
.8edd					ShapeDraw:
.8edd	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8ee0	4c 5c 8f	jmp $8f5c			jmp 	ExecuteGraphicCommand	 	; and complete
.8ee3					SpriteCommand:
.8ee3	a2 00		ldx #$00			ldx 	#0
.8ee5	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; get image number.
.8ee8	5a		phy				phy
.8ee9	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8eeb	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8eee	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8ef0	b0 0d		bcs $8eff			bcs 	_SCRange
.8ef2	a0 ff		ldy #$ff			ldy 	#255
.8ef4	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ef7	a9 32		lda #$32			lda 	#25*2
.8ef9	7a		ply				ply
.8efa	20 68 8f	jsr $8f68			jsr 	RunGraphicsCommand
.8efd	80 5d		bra $8f5c			bra 	ExecuteGraphicCommand
.8eff					_SCRange:
.8eff	4c c5 b2	jmp $b2c5			jmp 	RangeError
.8f02					ImageCommand:
.8f02	a2 00		ldx #$00			ldx 	#0
.8f04	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; get image number.
.8f07	20 68 8f	jsr $8f68			jsr 	RunGraphicsCommand
.8f0a					ImageRunDraw:
.8f0a	a9 20		lda #$20			lda 	#16*2 						; move cursor
.8f0c	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f0f	ad 6a 06	lda $066a			lda 	gxDrawScale
.8f12	0a		asl a				asl 	a
.8f13	0a		asl a				asl 	a
.8f14	0a		asl a				asl 	a
.8f15	a8		tay				tay
.8f16	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8f18	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f1b	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f1e	60		rts				rts
.8f1f					TextCommand:
.8f1f	a2 00		ldx #$00			ldx 	#0
.8f21	20 26 a4	jsr $a426			jsr 	EvaluateString 				; get text
.8f24	20 68 8f	jsr $8f68			jsr 	RunGraphicsCommand
.8f27					TextRunDraw:
.8f27	a9 20		lda #$20			lda 	#16*2 						; move cursor
.8f29	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f2c	a0 00		ldy #$00			ldy 	#0
.8f2e					_IRDLoop:
.8f2e	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8f31	85 37		sta $37				sta 	zTemp0+1
.8f33	ad 08 04	lda $0408			lda 	NSMantissa0
.8f36	85 36		sta $36				sta 	zTemp0
.8f38	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f3a	f0 13		beq $8f4f			beq 	_IRDExit
.8f3c	5a		phy				phy									; save string pos
.8f3d	48		pha				pha 								; save char
.8f3e	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8f41	0a		asl a				asl 	a
.8f42	0a		asl a				asl 	a
.8f43	0a		asl a				asl 	a
.8f44	a8		tay				tay
.8f45	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8f47	fa		plx				plx 								; char to draw
.8f48	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f4b	7a		ply				ply 								; restore string pos
.8f4c	c8		iny				iny
.8f4d	90 df		bcc $8f2e			bcc 	_IRDLoop 					; go back if no error.
.8f4f					_IRDExit:
.8f4f	60		rts				rts
.8f50					PlotCommand:
.8f50	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f52	20 68 8f	jsr $8f68			jsr 	RunGraphicsCommand
.8f55	80 05		bra $8f5c			bra 	ExecuteGraphicCommand
.8f57					LineCommand:
.8f57	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f59	20 68 8f	jsr $8f68			jsr 	RunGraphicsCommand
.8f5c					ExecuteGraphicCommand:
.8f5c	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8f5f	20 87 80	jsr $8087			jsr 	GXGraphicDraw 				; draw it and exit
.8f62	b0 01		bcs $8f65			bcs 	_EGCError
.8f64	60		rts				rts
.8f65					_EGCError:
.8f65	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
.8f68					RunGraphicsCommand:
.8f68	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8f6b	68		pla				pla 								; pop handler address
.8f6c	fa		plx				plx
.8f6d	1a		inc a				inc 	a
.8f6e	d0 01		bne $8f71			bne 	_RGINoCarry
.8f70	e8		inx				inx
.8f71					_RGINoCarry:
.8f71	8d 68 06	sta $0668			sta 	GXHandler
.8f74	8e 69 06	stx $0669			stx 	GXHandler+1
.8f77					_RGICommandLoop:
.8f77	b1 30		lda ($30),y			lda 	(codePtr),y
.8f79	c8		iny				iny
.8f7a	c9 c4		cmp #$c4			cmp 	#KWD_TO						; is it TO x,y
.8f7c	f0 53		beq $8fd1			beq 	_RGI_To
.8f7e	c9 b5		cmp #$b5			cmp 	#KWD_HERE 					; do it here.
.8f80	f0 55		beq $8fd7			beq 	_RGI_Here
.8f82	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f84	f0 3d		beq $8fc3			beq 	_RGI_Exit
.8f86	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f88	f0 39		beq $8fc3			beq 	_RGI_Exit
.8f8a	c9 ba		cmp #$ba			cmp 	#KWD_OUTLINE 				; solid or outline
.8f8c	f0 3e		beq $8fcc			beq 	_RGI_Frame
.8f8e	c9 c1		cmp #$c1			cmp 	#KWD_SOLID
.8f90	f0 33		beq $8fc5			beq 	_RGI_Solid
.8f92	c9 a6		cmp #$a6			cmp 	#KWD_BY 					; by offset
.8f94	f0 4b		beq $8fe1			beq 	_RGI_By
.8f96	c9 b1		cmp #$b1			cmp 	#KWD_FROM 					; from
.8f98	f0 17		beq $8fb1			beq 	_RGI_Move2
.8f9a	c9 ae		cmp #$ae			cmp 	#KWD_DIM 					; dim (set scale)
.8f9c	f0 65		beq $9003			beq 	_RGI_Dim
.8f9e	c9 ac		cmp #$ac			cmp 	#KWD_COLOUR 				; colour or Color
.8fa0	f0 78		beq $901a			beq 	_RGI_Colour
.8fa2	c9 ab		cmp #$ab			cmp 	#KWD_COLOR
.8fa4	f0 74		beq $901a			beq 	_RGI_Colour
.8fa6	ae 63 06	ldx $0663			ldx 	gxCommandID
.8fa9	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8fab	d0 03		bne $8fb0			bne 	_RGI_Move 					; move
.8fad	4c 44 90	jmp $9044			jmp		_RGI_SpriteInstructions
.8fb0					_RGI_Move:
.8fb0	88		dey				dey 								; unpick get.
.8fb1					_RGI_Move2:
.8fb1	20 68 90	jsr $9068			jsr 	GCGetCoordinatePair 		; move to here
.8fb4	20 82 90	jsr $9082			jsr 	GCCopyPairToStore 			; save
.8fb7	5a		phy				phy
.8fb8	20 78 90	jsr $9078			jsr 	GCLoadAXY 					; load in
.8fbb	09 20		ora #$20			ora 	#16*2 						; move there
.8fbd	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fc0	7a		ply				ply
.8fc1	80 b4		bra $8f77			bra 	_RGICommandLoop 			; and go round
.8fc3					_RGI_Exit:
.8fc3	88		dey				dey 								; unpick : / EOL
.8fc4	60		rts				rts
.8fc5					_RGI_Solid:
.8fc5	a9 02		lda #$02			lda 	#2
.8fc7	8d 64 06	sta $0664			sta 	gxFillSolid
.8fca	80 ab		bra $8f77			bra 	_RGICommandLoop
.8fcc					_RGI_Frame:
.8fcc	9c 64 06	stz $0664			stz 	gxFillSolid
.8fcf	80 a6		bra $8f77			bra 	_RGICommandLoop
.8fd1					_RGI_To:
.8fd1	20 68 90	jsr $9068			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8fd4	20 82 90	jsr $9082			jsr 	GCCopyPairToStore
.8fd7					_RGI_Here:
.8fd7	5a		phy				phy
.8fd8	20 78 90	jsr $9078			jsr 	GCLoadAXY 					; load it into AXY
.8fdb	20 41 90	jsr $9041			jsr 	_RGICallHandler 			; go do whatever it is.
.8fde	7a		ply				ply
.8fdf	80 96		bra $8f77			bra 	_RGICommandLoop 			; and go round
.8fe1					_RGI_By:
.8fe1	20 68 90	jsr $9068			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8fe4	18		clc				clc
.8fe5	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8fe8	6d 65 06	adc $0665			adc 	gxxPos
.8feb	8d 65 06	sta $0665			sta 	gxXPos
.8fee	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8ff1	6d 66 06	adc $0666			adc 	gxxPos+1
.8ff4	8d 66 06	sta $0666			sta 	gxXPos+1
.8ff7	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8ffa	18		clc				clc
.8ffb	6d 67 06	adc $0667			adc 	gxYPos
.8ffe	8d 67 06	sta $0667			sta 	gxYPos
.9001	80 d4		bra $8fd7			bra 	_RGI_Here
.9003					_RGI_Dim:
.9003	a2 01		ldx #$01			ldx	 	#1
.9005	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger
.9008	ad 09 04	lda $0409			lda 	NSMantissa0+1
.900b	c9 00		cmp #$00			cmp 	#0
.900d	f0 2f		beq $903e			beq 	_RGIRange
.900f	c9 09		cmp #$09			cmp 	#8+1
.9011	b0 2b		bcs $903e			bcs		_RGIRange
.9013	3a		dec a				dec 	a
.9014	8d 6a 06	sta $066a			sta 	gxDrawScale
.9017	4c 77 8f	jmp $8f77			jmp 	_RGICommandLoop
.901a					_RGI_Colour:
.901a	a2 01		ldx #$01			ldx 	#1 							; colour
.901c	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger
.901f	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.9021	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero
.9024	b1 30		lda ($30),y			lda 	(codePtr),y
.9026	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.9028	d0 04		bne $902e			bne 	_RGICDefaultMode
.902a	c8		iny				iny
.902b	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger
.902e					_RGICDefaultMode:
.902e	5a		phy				phy
.902f	a9 08		lda #$08			lda 	#4*2 						; set colour.
.9031	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.9034	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9037	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.903a	7a		ply				ply
.903b	4c 77 8f	jmp $8f77			jmp 	_RGICommandLoop 			; and go round
.903e					_RGIRange:
.903e	4c c5 b2	jmp $b2c5			jmp 	RangeError
.9041					_RGICallHandler:
.9041	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.9044					_RGI_SpriteInstructions:
.9044	c9 90		cmp #$90			cmp 	#KWD_OFF
.9046	f0 07		beq $904f			beq 	_RGISpriteOff
.9048	c9 b6		cmp #$b6			cmp 	#KWD_IMAGE
.904a	f0 11		beq $905d			beq 	_RGISetImage
.904c	4c b0 8f	jmp $8fb0			jmp 	_RGI_Move
.904f					_RGISpriteOff:
.904f	5a		phy				phy
.9050	a0 01		ldy #$01			ldy 	#1
.9052	a2 00		ldx #$00			ldx 	#0
.9054					_RGIDoCommandLoop:
.9054	a9 10		lda #$10			lda 	#8*2
.9056	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9059	7a		ply				ply
.905a	4c 77 8f	jmp $8f77			jmp 	_RGICommandLoop
.905d					_RGISetImage:
.905d	a2 01		ldx #$01			ldx 	#1
.905f	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger
.9062	5a		phy				phy
.9063	aa		tax				tax
.9064	a0 00		ldy #$00			ldy 	#0
.9066	80 ec		bra $9054			bra 	_RGIDoCommandLoop
.9068					GCGetCoordinatePair:
.9068	a2 01		ldx #$01			ldx 	#1
.906a	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger
.906d	20 e2 ac	jsr $ace2			jsr 	CheckComma
.9070	e8		inx				inx
.9071	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger
.9074	60		rts				rts
.9075					_GCCPRange:
.9075	4c c5 b2	jmp $b2c5			jmp 	RangeError
.9078					GCLoadAXY:
.9078	ad 66 06	lda $0666			lda 	gxXPos+1
.907b	ae 65 06	ldx $0665			ldx 	gxXPos
.907e	ac 67 06	ldy $0667			ldy 	gxYPos
.9081	60		rts				rts
.9082					GCCopyPairToStore:
.9082	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9085	8d 65 06	sta $0665			sta 	gxXPos
.9088	ad 11 04	lda $0411			lda 	NSMantissa1+1
.908b	8d 66 06	sta $0666			sta 	gxXPos+1
.908e	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9091	8d 67 06	sta $0667			sta 	gxYPos
.9094	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9095					BitmapCtrl:
.9095	b1 30		lda ($30),y			lda 	(codePtr),y
.9097	c8		iny				iny
.9098	a2 01		ldx #$01			ldx 	#1
.909a	c9 91		cmp #$91			cmp 	#KWD_ON
.909c	f0 11		beq $90af			beq 	BitmapSwitch
.909e	ca		dex				dex
.909f	c9 90		cmp #$90			cmp 	#KWD_OFF
.90a1	f0 0c		beq $90af			beq 	BitmapSwitch
.90a3	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; get the colour
.90a6	5a		phy				phy
.90a7	aa		tax				tax
.90a8	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.90aa	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90ad	7a		ply				ply
.90ae	60		rts				rts
.90af					BitmapSwitch:
.90af	5a		phy				phy
.90b0	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.90b2	a9 02		lda #$02			lda 	#1*2
.90b4	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90b7	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.90b9	a0 00		ldy #$00			ldy 	#0
.90bb	a2 ff		ldx #$ff			ldx 	#$FF
.90bd	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90c0	9c 64 06	stz $0664			stz 	gxFillSolid
.90c3	9c 65 06	stz $0665			stz 	gxXPos
.90c6	9c 66 06	stz $0666			stz 	gxXPos+1
.90c9	9c 67 06	stz $0667			stz 	gxYPos
.90cc	9c 6a 06	stz $066a			stz 	gxDrawScale
.90cf	a9 20		lda #$20			lda 	#16*2 						; home cursor
.90d1	a2 00		ldx #$00			ldx 	#0
.90d3	a0 00		ldy #$00			ldy 	#0
.90d5	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90d8	7a		ply				ply
.90d9	60		rts				rts
.90da					SpritesCtrl:
.90da	b1 30		lda ($30),y			lda 	(codePtr),y
.90dc	c8		iny				iny
.90dd	a2 01		ldx #$01			ldx 	#1
.90df	c9 91		cmp #$91			cmp 	#KWD_ON
.90e1	f0 08		beq $90eb			beq 	SpriteSwitch
.90e3	ca		dex				dex
.90e4	c9 90		cmp #$90			cmp 	#KWD_OFF
.90e6	f0 03		beq $90eb			beq 	SpriteSwitch
.90e8	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
.90eb					SpriteSwitch:
.90eb	5a		phy				phy
.90ec	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90ee	a9 04		lda #$04			lda 	#2*2
.90f0	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90f3	7a		ply				ply
.90f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90f5					GfxCommand:
.90f5	a2 00		ldx #$00			ldx 	#0
.90f7	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; command
.90fa	20 e2 ac	jsr $ace2			jsr 	CheckComma
.90fd	e8		inx				inx
.90fe	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger 		; X
.9101	20 e2 ac	jsr $ace2			jsr 	CheckComma
.9104	e8		inx				inx
.9105	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; Y
.9108	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.910b	4a		lsr a				lsr 	a
.910c	d0 16		bne $9124			bne 	_GfxError
.910e	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.9111	b0 11		bcs $9124			bcs 	_GfxError 					; bit 7 should have been zero
.9113	5a		phy				phy 								; save pos
.9114	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.9117	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.911a	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.911d	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9120	b0 02		bcs $9124			bcs 	_GfxError
.9122	7a		ply				ply 								; restore pos and exit.
.9123	60		rts				rts
.9124					_GfxError:
.9124	4c c5 b2	jmp $b2c5			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.9127					Command_GOSUB:
.9127	a2 00		ldx #$00			ldx 	#0
.9129	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.912c	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.912e	20 7b a5	jsr $a57b			jsr 	StackOpen 					; create frame
.9131	20 bf a5	jsr $a5bf			jsr 	STKSaveCodePosition 		; save current position
.9134	4c 4a 91	jmp $914a			jmp 	GotoStackX
.9137					Command_RETURN:
.9137	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.9139	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.913b	20 a7 a5	jsr $a5a7			jsr 	StackCheckFrame
.913e	20 d0 a5	jsr $a5d0			jsr 	STKLoadCodePosition 		; restore code position
.9141	20 99 a5	jsr $a599			jsr 	StackClose
.9144	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.9145					GotoCommand:
.9145	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.9147	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger
.914a					GotoStackX:
.914a	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.914d	48		pha				pha 								; it is slightly inefficient, just in cases.
.914e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9151	fa		plx				plx
.9152	20 26 a5	jsr $a526			jsr 	MemorySearch 				; transfer to line number AX.
.9155	90 05		bcc $915c			bcc 	_GotoError 					; not found, off end.
.9157	d0 03		bne $915c			bne 	_GotoError 					; not found exactly
.9159	4c 85 94	jmp $9485			jmp 	RunNewLine 					; and go straight to new line code.
.915c					_GotoError:
.915c	a9 0d		lda #$0d		lda	#13
.915e	4c 09 99	jmp $9909		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9161					IfCommand:
.9161	a2 00		ldx #$00			ldx 	#0 							; If what.
.9163	20 1b a4	jsr $a41b			jsr 	EvaluateNumber
.9166	b1 30		lda ($30),y			lda 	(codePtr),y
.9168	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.916a	d0 0a		bne $9176			bne 	_IFStructured
.916c	c8		iny				iny 								; consume THEN
.916d	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; is it zero
.9170	f0 01		beq $9173			beq 	_IfFail 					; if fail, go to next line
.9172	60		rts				rts 								; if THEN just continue
.9173					_IfFail:
.9173	4c ea 94	jmp $94ea			jmp 	EOLCommand
.9176					_IfStructured:
.9176	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; is it zero
.9179	d0 07		bne $9182			bne 	_IfExit 					; if not, then continue normally.
.917b	a9 b0		lda #$b0			lda 	#KWD_ELSE 					; look for else/endif
.917d	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.917f	20 7b 98	jsr $987b			jsr 	ScanForward 				; and run from there/
.9182					_IfExit:
.9182	60		rts				rts
.9183					ElseCode:
.9183	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9185	aa		tax				tax 								; so just go to the structure exit
.9186	20 7b 98	jsr $987b			jsr 	ScanForward
.9189	60		rts				rts
.918a					EndIf:
.918a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.918b					LetCommand:
.918b	a2 00		ldx #$00			ldx 	#0
.918d	b1 30		lda ($30),y			lda 	(codePtr),y
.918f	c9 10		cmp #$10			cmp 	#KWD_AT
.9191	d0 16		bne $91a9			bne 	_LCStandard
.9193	c8		iny				iny 								; skip equal
.9194	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm 				; get a number
.9197	20 27 9e	jsr $9e27			jsr 	Dereference 				; dereference it
.919a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.919d	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.919f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.91a2	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.91a4	d0 10		bne $91b6			bne 	_LCMain
.91a6	4c ca b2	jmp $b2ca			jmp 	TypeError 					; was a reference before.
.91a9					_LCStandard:
.91a9	ad fa 9c	lda $9cfa			lda 	PrecedenceLevel+"*"			; precedence > this
.91ac	20 14 9d	jsr $9d14			jsr 	EvaluateExpressionAtPrecedence
.91af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91b2	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91b4	f0 0e		beq $91c4			beq 	_LetGoProc 					; it's a procedure call.
.91b6					_LCMain:
.91b6	a9 3d		lda #$3d			lda 	#"=" 						; check =
.91b8	20 ea ac	jsr $acea			jsr 	CheckNextA
.91bb	e8		inx				inx 								; RHS
.91bc	20 12 a4	jsr $a412			jsr 	EvaluateValue
.91bf	ca		dex				dex
.91c0	20 c7 91	jsr $91c7			jsr 	AssignVariable
.91c3	60		rts				rts
.91c4					_LetGoProc:
.91c4	4c 60 93	jmp $9360			jmp 	CallProcedure
.91c7					AssignVariable:
.91c7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91ca	48		pha				pha 								; save a copy
.91cb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91ce	29 10		and #$10			and 	#NSBIsString
.91d0	d0 0b		bne $91dd			bne 	_ASError
.91d2	68		pla				pla 								; get back
.91d3	29 10		and #$10			and 	#NSBIsString 				; check type
.91d5	d0 03		bne $91da			bne 	_ASString
.91d7	4c 4f 9d	jmp $9d4f			jmp 	AssignNumber
.91da					_ASString:
.91da	4c bd 9d	jmp $9dbd			jmp 	AssignString
.91dd					_ASError:
.91dd	4c ca b2	jmp $b2ca			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91e0					Command_List:
.91e0	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91e3	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91e6	a9 ff		lda #$ff			lda 	#$FF
.91e8	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91eb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91ee	b1 30		lda ($30),y			lda 	(codePtr),y
.91f0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91f2	f0 1e		beq $9212			beq 	_CLSecond
.91f4	20 70 92	jsr $9270			jsr 	CLIsDigit 					; if not digit, list all
.91f7	b0 24		bcs $921d			bcs 	_CLStart
.91f9	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91fb	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger
.91fe	b1 30		lda ($30),y			lda 	(codePtr),y
.9200	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9202	f0 0e		beq $9212			beq 	_CLSecond 					; if so go get it
.9204	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9207	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.920a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.920d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9210	80 0b		bra $921d			bra 	_CLStart
.9212					_CLSecond:
.9212	c8		iny				iny 								; consume comma
.9213	20 70 92	jsr $9270			jsr 	CLIsDigit 					; digit found
.9216	b0 05		bcs $921d			bcs 	_CLStart 					; if not, continue listing
.9218	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.921a	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger
.921d					_CLStart
.921d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.921f	85 30		sta $30				sta 	codePtr
.9221	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9223	85 31		sta $31				sta 	codePtr+1
.9225					_CLLoop:
.9225	20 b8 b4	jsr $b4b8			jsr 	EXTBreakCheck 				; break check
.9228	f0 30		beq $925a			beq 	_CLExit
.922a	b2 30		lda ($30)			lda 	(codePtr)
.922c	f0 2c		beq $925a			beq 	_CLExit
.922e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9230	20 5d 92	jsr $925d			jsr 	CLCompareLineNo
.9233	90 18		bcc $924d			bcc 	_CLNext
.9235	a2 07		ldx #$07			ldx 	#7
.9237	20 5d 92	jsr $925d			jsr 	CLCompareLineNo
.923a	f0 02		beq $923e			beq 	_CLDoThisOne
.923c	b0 0f		bcs $924d			bcs 	_CLNext
.923e					_CLDoThisOne:
.923e	20 d7 96	jsr $96d7			jsr 	ListConvertLine 			; convert line into token Buffer
.9241	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9243	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.9245	20 62 99	jsr $9962			jsr 	PrintStringXA
.9248	a9 0d		lda #$0d			lda 	#13 						; new line
.924a	20 77 b4	jsr $b477			jsr 	EXTPrintCharacter
.924d					_CLNext:
.924d	18		clc				clc
.924e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9250	65 30		adc $30				adc 	codePtr
.9252	85 30		sta $30				sta 	codePtr
.9254	90 02		bcc $9258			bcc 	_CREExit
.9256	e6 31		inc $31				inc 	codePtr+1
.9258					_CREExit:
.9258	80 cb		bra $9225			bra 	_CLLoop
.925a					_CLExit:
.925a	4c 08 8c	jmp $8c08			jmp 	WarmStart
.925d					CLCompareLineNo:
.925d	38		sec				sec
.925e	a0 01		ldy #$01			ldy 	#1
.9260	b1 30		lda ($30),y			lda 	(codePtr),y
.9262	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9265	85 36		sta $36				sta 	zTemp0
.9267	c8		iny				iny
.9268	b1 30		lda ($30),y			lda 	(codePtr),y
.926a	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.926d	05 36		ora $36				ora 	zTemp0
.926f	60		rts				rts
.9270					CLIsDigit:
.9270	b1 30		lda ($30),y			lda 	(codePtr),y
.9272	c9 30		cmp #$30			cmp 	#"0"
.9274	90 03		bcc $9279			bcc	 	_CLIDExitFalse
.9276	c9 3a		cmp #$3a			cmp 	#"9"+1
.9278	60		rts				rts
.9279					_CLIDExitFalse:
.9279	38		sec				sec
.927a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.927b					Command_LOCAL:
.927b	a2 00		ldx #$00			ldx 	#0 							; at level 0
.927d	20 89 92	jsr $9289			jsr 	LocaliseNextTerm 			; convert term to a local.
.9280	b1 30		lda ($30),y			lda 	(codePtr),y
.9282	c8		iny				iny
.9283	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9285	f0 f4		beq $927b			beq 	Command_LOCAL
.9287	88		dey				dey 								; unpick pre-get
.9288	60		rts				rts
.9289					LocaliseNextTerm:
.9289	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm 				; evaluate the term
.928c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.928f	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9291	f0 69		beq $92fc			beq		_LNTError
.9293	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9296	85 36		sta $36				sta 	zTemp0
.9298	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.929b	85 37		sta $37				sta  	zTemp0+1
.929d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92a0	29 10		and #$10			and 	#NSBIsString
.92a2	d0 22		bne $92c6			bne 	_LNTPushString
.92a4	5a		phy				phy
.92a5	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.92a7					_LNTPushNumLoop:
.92a7	b1 36		lda ($36),y			lda		(zTemp0),y
.92a9	20 59 a5	jsr $a559			jsr 	StackPushByte
.92ac	a9 00		lda #$00			lda 	#0
.92ae	91 36		sta ($36),y			sta 	(zTemp0),y
.92b0	c8		iny				iny
.92b1	c0 05		cpy #$05			cpy 	#5
.92b3	d0 f2		bne $92a7			bne 	_LNTPushNumLoop
.92b5	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.92b7	20 59 a5	jsr $a559			jsr 	StackPushByte
.92ba	a5 37		lda $37				lda 	zTemp0+1
.92bc	20 59 a5	jsr $a559			jsr 	StackPushByte
.92bf	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92c1	20 59 a5	jsr $a559			jsr 	StackPushByte
.92c4	7a		ply				ply
.92c5	60		rts				rts
.92c6					_LNTPushString:
.92c6	5a		phy				phy
.92c7	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92c9	85 38		sta $38				sta 	zTemp1
.92cb	a0 01		ldy #$01			ldy 	#1
.92cd	b1 36		lda ($36),y			lda 	(zTemp0),y
.92cf	85 39		sta $39				sta 	zTemp1+1
.92d1	a0 00		ldy #$00			ldy 	#0 							; output string
.92d3	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92d5	f0 0a		beq $92e1			beq 	_LNTStringOut
.92d7					_LNTPushStrLoop:
.92d7	b1 38		lda ($38),y			lda 	(zTemp1),y
.92d9	f0 06		beq $92e1			beq 	_LNTStringOut
.92db	20 59 a5	jsr $a559			jsr 	StackPushByte
.92de	c8		iny				iny
.92df	80 f6		bra $92d7			bra 	_LNTPushStrLoop
.92e1					_LNTStringOut:
.92e1	98		tya				tya									; output length
.92e2	20 59 a5	jsr $a559			jsr 	StackPushByte
.92e5	a9 00		lda #$00			lda 	#0 							; clear original string.
.92e7	92 38		sta ($38)			sta 	(zTemp1)
.92e9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92ec	20 59 a5	jsr $a559			jsr 	StackPushByte
.92ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92f2	20 59 a5	jsr $a559			jsr 	StackPushByte
.92f5	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92f7	20 59 a5	jsr $a559			jsr 	StackPushByte
.92fa	7a		ply				ply
.92fb	60		rts				rts
.92fc					_LNTError:
.92fc	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
.ac81					LocalPopValue:
.ac81	20 72 a5	jsr $a572			jsr 	StackPopByte
.ac84	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ac86	d0 17		bne $ac9f			bne 	_LPVString
.ac88	20 72 a5	jsr $a572			jsr 	StackPopByte 				; address
.ac8b	85 37		sta $37				sta 	zTemp0+1
.ac8d	20 72 a5	jsr $a572			jsr 	StackPopByte
.ac90	85 36		sta $36				sta 	zTemp0
.ac92	5a		phy				phy
.ac93	a0 04		ldy #$04			ldy 	#4 							; copy back
.ac95					_LPVNumberCopy:
.ac95	20 72 a5	jsr $a572			jsr 	StackPopByte
.ac98	91 36		sta ($36),y			sta 	(zTemp0),y
.ac9a	88		dey				dey
.ac9b	10 f8		bpl $ac95			bpl 	_LPVNumberCopy
.ac9d	7a		ply				ply 								; and complete
.ac9e	60		rts				rts
.ac9f					_LPVString:
.ac9f	20 72 a5	jsr $a572			jsr 	StackPopByte 				; address of record => zTemp0
.aca2	85 37		sta $37				sta 	zTemp0+1
.aca4	20 72 a5	jsr $a572			jsr 	StackPopByte
.aca7	85 36		sta $36				sta 	zTemp0
.aca9	5a		phy				phy
.acaa	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.acac	85 38		sta $38				sta 	zTemp1
.acae	a0 01		ldy #$01			ldy 	#1
.acb0	b1 36		lda ($36),y			lda 	(zTemp0),y
.acb2	85 39		sta $39				sta 	zTemp1+1
.acb4	20 72 a5	jsr $a572			jsr 	StackPopByte 				; # to get => y
.acb7	a8		tay				tay
.acb8	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.acba	f0 0e		beq $acca			beq 	_LPVStringCopied
.acbc	a9 00		lda #$00			lda 	#0 							; NULL on end
.acbe	91 38		sta ($38),y			sta 	(zTemp1),y
.acc0					_LPVStringCopy:
.acc0	88		dey				dey
.acc1	30 07		bmi $acca			bmi 	_LPVStringCopied
.acc3	20 72 a5	jsr $a572			jsr 	StackPopByte
.acc6	91 38		sta ($38),y			sta 	(zTemp1),y
.acc8	80 f6		bra $acc0			bra 	_LPVStringCopy
.acca					_LPVStringCopied:
.acca	fa		plx				plx
.accb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.92ff					NewCommand:
.92ff	20 04 a5	jsr $a504			jsr 	MemoryNew
.9302	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9305	20 a1 8c	jsr $8ca1			jsr 	ClearCommand 				; clear everything.
.9308	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9309					Command_Print:
.9309	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.930a					_CPLoop:
.930a	08		php				php 								; save last action flag
.930b	b1 30		lda ($30),y			lda 	(codePtr),y
.930d	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.930f	f0 46		beq $9357			beq 	_CPExit
.9311	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9313	f0 42		beq $9357			beq 	_CPExit
.9315	68		pla				pla 								; throw last action flag
.9316	b1 30		lda ($30),y			lda 	(codePtr),y
.9318	c8		iny				iny
.9319	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.931b	f0 37		beq $9354			beq 	_CPContinueWithSameLine
.931d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.931f	f0 2e		beq $934f			beq 	_CPTab
.9321	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9323	f0 26		beq $934b			beq 	_CPNewLine
.9325	88		dey				dey 								; undo the get.
.9326	a2 00		ldx #$00			ldx 	#0
.9328	20 12 a4	jsr $a412			jsr 	EvaluateValue 				; get a value into slot 0
.932b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.932e	29 10		and #$10			and 	#NSBIsString
.9330	f0 0b		beq $933d			beq 	_CPNumber
.9332	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9335	ad 08 04	lda $0408			lda 	NSMantissa0
.9338	20 62 99	jsr $9962			jsr 	PrintStringXA
.933b	80 cc		bra $9309			bra 	Command_Print 				; loop round clearing carry so NL if end
.933d					_CPNumber:
.933d	a9 05		lda #$05			lda 	#5 							; maximum decimals
.933f	20 e8 a2	jsr $a2e8			jsr 	ConvertNumberToString 		; convert to string
.9342	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9344	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.9346	20 62 99	jsr $9962			jsr 	PrintStringXA
.9349	80 be		bra $9309			bra 	Command_Print 				; loop round clearing carry so NL if end
.934b					_CPNewLine:
.934b	a9 0d		lda #$0d			lda 	#13
.934d	80 02		bra $9351			bra 	_CPPrintChar
.934f					_CPTab:
.934f	a9 09		lda #$09			lda 	#9 							; print TAB
.9351					_CPPrintChar:
.9351	20 77 b4	jsr $b477			jsr 	EXTPrintCharacter
.9354					_CPContinueWithSameLine:
.9354	38		sec				sec 								; loop round with carry set, which
.9355	80 b3		bra $930a			bra 	_CPLoop 					; will inhibit final CR
.9357					_CPExit:
.9357	28		plp				plp 								; get last action flag
.9358	b0 05		bcs $935f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.935a	a9 0d		lda #$0d			lda 	#13 						; print new line
.935c	20 77 b4	jsr $b477			jsr 	EXTPrintCharacter
.935f					_CPExit2:
.935f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9360					CallProcedure:
.9360	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9362	b1 30		lda ($30),y			lda 	(codePtr),y
.9364	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9366	f0 0c		beq $9374			beq 	_CPEndParam
.9368					_CPParamLoop:
.9368	20 12 9d	jsr $9d12			jsr 	EvaluateExpression 			; get parameter onto stack
.936b	e8		inx				inx 								; bump next stack
.936c	b1 30		lda ($30),y			lda 	(codePtr),y
.936e	c8		iny				iny
.936f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9371	f0 f5		beq $9368			beq 	_CPParamLoop
.9373	88		dey				dey 								; unpick.
.9374					_CPEndParam:
.9374	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.9377	c8		iny				iny									; skip right bracket
.9378	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.937a	20 7b a5	jsr $a57b			jsr 	StackOpen
.937d	20 bf a5	jsr $a5bf			jsr 	STKSaveCodePosition 		; save loop position
.9380	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9383	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9385	ad 10 04	lda $0410			lda 	NSMantissa1
.9388	85 37		sta $37				sta 	zTemp0+1
.938a	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.938c	b2 36		lda ($36)			lda 	(zTemp0)
.938e	85 30		sta $30				sta 	safePtr
.9390	b1 36		lda ($36),y			lda 	(zTemp0),y
.9392	85 31		sta $31				sta 	safePtr+1
.9394	c8		iny				iny
.9395	b1 36		lda ($36),y			lda 	(zTemp0),y
.9397	85 32		sta $32				sta 	safePtr+2
.9399	c8		iny				iny
.939a	b1 36		lda ($36),y			lda 	(zTemp0),y
.939c	85 33		sta $33				sta 	safePtr+3
.939e	c8		iny				iny 								; get Y offset -> Y
.939f	b1 36		lda ($36),y			lda 	(zTemp0),y
.93a1	a8		tay				tay
.93a2	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.93a4	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.93a7	f0 13		beq $93bc			beq 	_ParamExit 					; if so, exit.
.93a9					_ParamExtract:
.93a9	ca		dex				dex 								; put a local term on the level before
.93aa	20 89 92	jsr $9289			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.93ad	20 c7 91	jsr $91c7			jsr 	AssignVariable 				; assign stacked value to the variable.
.93b0	e8		inx				inx 								; advance to next parameter to do.
.93b1	e8		inx				inx
.93b2	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.93b5	f0 05		beq $93bc			beq 	_ParamExit
.93b7	20 e2 ac	jsr $ace2			jsr 	CheckComma 					; comma seperating parameters
.93ba	80 ed		bra $93a9			bra 	_ParamExtract
.93bc					_ParamExit:
.93bc	20 da ac	jsr $acda			jsr 	CheckRightBracket 			; check )
.93bf	60		rts				rts 								; and continue from here
.accc					Command_ENDPROC:
.accc	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.acce	a2 14		ldx #$14			ldx 	#ERRID_PROC
.acd0	20 a7 a5	jsr $a5a7			jsr 	StackCheckFrame
.acd3	20 d0 a5	jsr $a5d0			jsr 	STKLoadCodePosition 		; restore code position
.acd6	20 99 a5	jsr $a599			jsr 	StackClose
.acd9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93c0					Command_Read:
.93c0	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93c2	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm
.93c5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93c8	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93ca	f0 4a		beq $9416			beq 	_CRSyntax 					; check reference (bit 0)
.93cc	20 5f 94	jsr $945f			jsr 	SwapDataCodePtrs 			; swap code and data
.93cf	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93d2	d0 20		bne $93f4			bne 	_CRContinueData
.93d4					_CRKeepSearching:
.93d4	a9 ad		lda #$ad			lda 	#KWD_DATA 					; scan for instruction
.93d6	aa		tax				tax
.93d7	20 7b 98	jsr $987b			jsr 	ScanForward
.93da	c9 ad		cmp #$ad			cmp 	#KWD_DATA 					; found data ?
.93dc	f0 16		beq $93f4			beq 	_CRHaveData 				; found it
.93de	18		clc				clc
.93df	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93e1	65 30		adc $30				adc 	codePtr
.93e3	85 30		sta $30				sta 	codePtr
.93e5	90 02		bcc $93e9			bcc 	_CREExit
.93e7	e6 31		inc $31				inc 	codePtr+1
.93e9					_CREExit:
.93e9	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93eb	b2 30		lda ($30)			lda 	(codePtr)
.93ed	d0 e5		bne $93d4			bne 	_CRKeepSearching
.93ef	a9 0b		lda #$0b		lda	#11
.93f1	4c 09 99	jmp $9909		jmp	ErrorHandler
.93f4					_CRHaveData:
.93f4					_CRContinueData:
.93f4	a2 01		ldx #$01			ldx 	#1
.93f6	20 12 a4	jsr $a412			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93f9	ca		dex				dex
.93fa	20 c7 91	jsr $91c7			jsr		AssignVariable 				; do the assignment
.93fd	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9400	b1 30		lda ($30),y			lda 	(codePtr),y
.9402	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9404	d0 04		bne $940a			bne 	_CRSwapBack
.9406	c8		iny				iny 								; consume comma
.9407	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.940a					_CRSwapBack:
.940a	20 5f 94	jsr $945f			jsr 	SwapDataCodePtrs			; swap them back.
.940d	b1 30		lda ($30),y			lda 	(codePtr),y
.940f	c8		iny				iny
.9410	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9412	f0 ac		beq $93c0			beq 	Command_Read 				; if so go round again.
.9414	88		dey				dey 								; unpick get.
.9415	60		rts				rts
.9416					_CRSyntax:
.9416	4c c0 b2	jmp $b2c0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9419					RemCommand:
.9419	b1 30		lda ($30),y			lda 	(codePtr),y
.941b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.941d	d0 06		bne $9425			bne 	_RMExit
.941f	c8		iny				iny
.9420	98		tya				tya
.9421	38		sec				sec
.9422	71 30		adc ($30),y			adc 	(codePtr),y
.9424	a8		tay				tay
.9425					_RMExit:
.9425	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9426					Command_REPEAT:
.9426	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9428	20 7b a5	jsr $a57b			jsr 	StackOpen
.942b	20 bf a5	jsr $a5bf			jsr 	STKSaveCodePosition 		; save loop position
.942e	60		rts				rts
.942f					Command_UNTIL:
.942f	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9431	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9433	20 a7 a5	jsr $a5a7			jsr 	StackCheckFrame
.9436	a2 00		ldx #$00			ldx 	#0
.9438	20 1b a4	jsr $a41b			jsr 	EvaluateNumber 				; work out the number
.943b	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; check if zero
.943e	f0 04		beq $9444			beq 	_CULoopBack 				; if so keep looping
.9440	20 99 a5	jsr $a599			jsr 	StackClose		 			; return
.9443	60		rts				rts
.9444					_CULoopBack:
.9444	20 d0 a5	jsr $a5d0			jsr 	STKLoadCodePosition 		; loop back
.9447	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9448					Command_Restore:
.9448	20 5f 94	jsr $945f			jsr 	SwapDataCodePtrs 			; swap code and data
.944b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.944d	85 30		sta $30				sta 	codePtr
.944f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9451	85 31		sta $31				sta 	codePtr+1
.9453	20 5f 94	jsr $945f			jsr 	SwapDataCodePtrs 			; put them back
.9456	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9458	8d 9b 04	sta $049b			sta 	dataPointer+4
.945b	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.945e	60		rts				rts
.945f					SwapDataCodePtrs:
.945f	da		phx				phx
.9460	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9462					_SDCPLoop:
.9462	b5 30		lda $30,x			lda 	safePtr,x
.9464	48		pha				pha
.9465	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9468	95 30		sta $30,x			sta 	safePtr,x
.946a	68		pla				pla
.946b	9d 97 04	sta $0497,x			sta 	dataPointer,x
.946e	ca		dex				dex
.946f	10 f1		bpl $9462			bpl 	_SDCPLoop
.9471	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9474	8c 9b 04	sty $049b			sty 	dataPointer+4
.9477	a8		tay				tay
.9478	fa		plx				plx
.9479	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.947a					CommandRUN:
.947a	20 a1 8c	jsr $8ca1			jsr 	ClearCommand 				; clear variable/stacks/etc.
.947d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.947f	85 30		sta $30				sta 	codePtr
.9481	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9483	85 31		sta $31				sta 	codePtr+1
.9485					RUNNewLine:
.9485	b2 30		lda ($30)			lda 	(codePtr)
.9487	f0 5e		beq $94e7			beq 	CRNoProgram         		; no then END.
.9489	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.948b	9a		txs				txs
.948c					RUNCodePointerLine:
.948c	a0 02		ldy #$02			ldy 	#2 							; start of program
.948e					_CRIncMainLoop:
.948e	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9491	d0 05		bne $9498			bne 	_CRNoBreakCheck
.9493	20 b8 b4	jsr $b4b8			jsr 	EXTBreakCheck 				; break check
.9496	f0 4a		beq $94e2			beq 	_CRBreak
.9498					_CRNoBreakCheck:
.9498	c8		iny				iny
.9499					_CRMainLoop:
.9499	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.949c	b1 30		lda ($30),y			lda 	(codePtr),y
.949e	10 10		bpl $94b0			bpl 	_CRNotKeyword
.94a0	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.94a2	b0 04		bcs $94a8			bcs 	_CRIsKeyword
.94a4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.94a6	b0 34		bcs $94dc			bcs		_CRSyntaxError
.94a8					_CRIsKeyword:
.94a8	c8		iny				iny 								; consume command
.94a9	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.94aa	aa		tax				tax 								; put in X for vector jump
.94ab	20 df 94	jsr $94df			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.94ae	80 e9		bra $9499			bra 	_CRMainLoop 				; and loop round
.94b0					_CRNotKeyword:
.94b0	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94b2	f0 da		beq $948e			beq 	_CRIncMainLoop
.94b4	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.94b6	90 05		bcc $94bd			bcc 	_CRNotVariable
.94b8					_CRGoLet:
.94b8	20 8b 91	jsr $918b			jsr 	LetCommand
.94bb	80 dc		bra $9499			bra 	_CRMainLoop
.94bd					_CRNotVariable:
.94bd	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94bf	f0 f7		beq $94b8			beq 	_CRGoLet
.94c1	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94c3	f0 f3		beq $94b8			beq 	_CRGoLet
.94c5	c9 21		cmp #$21			cmp 	#KWD_PLING
.94c7	f0 ef		beq $94b8			beq 	_CRGoLet
.94c9	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94cb	f0 09		beq $94d6			beq 	_CRGoRem
.94cd	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94cf	d0 0b		bne $94dc			bne 	_CRSyntaxError
.94d1	20 41 8b	jsr $8b41			jsr 	LabelHere
.94d4	80 c3		bra $9499			bra 	_CRMainLoop
.94d6					_CRGoRem:
.94d6	c8		iny				iny
.94d7	20 19 94	jsr $9419			jsr 	RemCommand
.94da	80 bd		bra $9499			bra 	_CRMainLoop
.94dc					_CRSyntaxError:
.94dc	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
.94df					_CRCallVector0:
.94df	7c 8a 95	jmp ($958a,x)			jmp 	(VectorSet0,x)
.94e2					_CRBreak:
.94e2	a9 01		lda #$01		lda	#1
.94e4	4c 09 99	jmp $9909		jmp	ErrorHandler
.94e7					CRNoProgram:
.94e7	4c be 8d	jmp $8dbe			jmp 	EndCommand
.94ea					EOLCommand:
.94ea	18		clc				clc
.94eb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94ed	65 30		adc $30				adc 	codePtr
.94ef	85 30		sta $30				sta 	codePtr
.94f1	90 02		bcc $94f5			bcc 	_CREExit
.94f3	e6 31		inc $31				inc 	codePtr+1
.94f5					_CREExit:
.94f5	80 8e		bra $9485			bra 	RunNewLine
.94f7					Shift1Command:
.94f7	b1 30		lda ($30),y			lda 	(codePtr),y
.94f9	c8		iny				iny
.94fa	0a		asl a				asl 	a
.94fb	aa		tax				tax
.94fc	7c 14 96	jmp ($9614,x)			jmp 	(VectorSet1,x)
.94ff					Shift2Command:
.94ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9501	c8		iny				iny
.9502	0a		asl a				asl 	a
.9503	aa		tax				tax
.9504	7c 2e 96	jmp ($962e,x)			jmp 	(VectorSet2,x)
.9507					Unused1:
.9507					Unused2:
.9507					Unused3:
.9507					Unused4:
.9507	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
>950a							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.950a					VectorSetPunc:
>950a	b3 9a					.word	ShiftLeft                        ; $00 <<
>950c	ad 99					.word	BinaryCompareLessEqual           ; $01 <=
>950e	a3 99					.word	BinaryCompareNotEqual            ; $02 <>
>9510	c0 b2					.word	SyntaxError                      ; $03 !!3
>9512	c0 b2					.word	SyntaxError                      ; $04 ><
>9514	b7 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>9516	b6 9a					.word	ShiftRight                       ; $06 >>
>9518	c0 b2					.word	SyntaxError                      ; $07 !!7
>951a	c0 b2					.word	SyntaxError                      ; $08 !!8
>951c	c0 b2					.word	SyntaxError                      ; $09 !!9
>951e	c0 b2					.word	SyntaxError                      ; $0a !!10
>9520	c0 b2					.word	SyntaxError                      ; $0b !!11
>9522	c0 b2					.word	SyntaxError                      ; $0c !!12
>9524	c0 b2					.word	SyntaxError                      ; $0d !!13
>9526	c0 b2					.word	SyntaxError                      ; $0e !!14
>9528	c0 b2					.word	SyntaxError                      ; $0f !!15
>952a	c0 b2					.word	SyntaxError                      ; $10 @
>952c	c0 b2					.word	SyntaxError                      ; $11 !!17
>952e	c0 b2					.word	SyntaxError                      ; $12 !!18
>9530	c0 b2					.word	SyntaxError                      ; $13 [
>9532	f3 ac					.word	IntegerDivide                    ; $14 \
>9534	c0 b2					.word	SyntaxError                      ; $15 ]
>9536	3c 9c					.word	EorInteger                       ; $16 ^
>9538	c0 b2					.word	SyntaxError                      ; $17 _
>953a	c0 b2					.word	SyntaxError                      ; $18 `
>953c	c0 b2					.word	SyntaxError                      ; $19 !!25
>953e	c0 b2					.word	SyntaxError                      ; $1a !!26
>9540	c0 b2					.word	SyntaxError                      ; $1b {
>9542	f6 9b					.word	OraInteger                       ; $1c |
>9544	c0 b2					.word	SyntaxError                      ; $1d }
>9546	c0 b2					.word	SyntaxError                      ; $1e ~
>9548	c0 b2					.word	SyntaxError                      ; $1f [7m<7F>[m
>954a	c0 b2					.word	SyntaxError                      ; $20
>954c	82 9c					.word	WordIndirect                     ; $21 !
>954e	c0 b2					.word	SyntaxError                      ; $22 "
>9550	c0 b2					.word	SyntaxError                      ; $23 #
>9552	c0 b2					.word	SyntaxError                      ; $24 $
>9554	40 ad					.word	IntegerModulus                   ; $25 %
>9556	b0 9b					.word	AndInteger                       ; $26 &
>9558	c0 b2					.word	SyntaxError                      ; $27 '
>955a	c0 b2					.word	SyntaxError                      ; $28 (
>955c	c0 b2					.word	SyntaxError                      ; $29 )
>955e	b5 ad					.word	MulInteger                       ; $2a *
>9560	4a 9b					.word	AddInteger                       ; $2b +
>9562	c0 b2					.word	SyntaxError                      ; $2c ,
>9564	85 9b					.word	SubInteger                       ; $2d -
>9566	c0 b2					.word	SyntaxError                      ; $2e .
>9568	4c af					.word	FDivideCommand                   ; $2f /
>956a	c0 b2					.word	SyntaxError                      ; $30 0
>956c	c0 b2					.word	SyntaxError                      ; $31 1
>956e	c0 b2					.word	SyntaxError                      ; $32 2
>9570	c0 b2					.word	SyntaxError                      ; $33 3
>9572	c0 b2					.word	SyntaxError                      ; $34 4
>9574	c0 b2					.word	SyntaxError                      ; $35 5
>9576	c0 b2					.word	SyntaxError                      ; $36 6
>9578	c0 b2					.word	SyntaxError                      ; $37 7
>957a	c0 b2					.word	SyntaxError                      ; $38 8
>957c	c0 b2					.word	SyntaxError                      ; $39 9
>957e	c0 b2					.word	SyntaxError                      ; $3a :
>9580	c0 b2					.word	SyntaxError                      ; $3b ;
>9582	8f 99					.word	BinaryCompareLess                ; $3c <
>9584	85 99					.word	BinaryCompareEqual               ; $3d =
>9586	99 99					.word	BinaryCompareGreater             ; $3e >
>9588	a9 9c					.word	ByteIndirect                     ; $3f ?
.958a					VectorSet0:
>958a	ea 94					.word	EOLCommand                       ; $80 !0:EOF
>958c	f7 94					.word	Shift1Command                    ; $81 !1:SH1
>958e	ff 94					.word	Shift2Command                    ; $82 !2:SH2
>9590	92 b0					.word	AbsUnary                         ; $83 ABS(
>9592	73 a1					.word	AllocUnary                       ; $84 ALLOC(
>9594	a2 b0					.word	AscUnary                         ; $85 ASC(
>9596	99 a2					.word	ChrUnary                         ; $86 CHR$(
>9598	c0 b2					.word	SyntaxError                      ; $87 EVENT(
>959a	81 99					.word	UnaryFalse                       ; $88 FALSE
>959c	af b0					.word	FracUnary                        ; $89 FRAC(
>959e	c5 b0					.word	IntUnary                         ; $8a INT(
>95a0	1b b1					.word	IsValUnary                       ; $8b ISVAL(
>95a2	73 a3					.word	Unary_Left                       ; $8c LEFT$(
>95a4	d7 b0					.word	LenUnary                         ; $8d LEN(
>95a6	9d a3					.word	Unary_Mid                        ; $8e MID$(
>95a8	e3 a1					.word	Unary_Not                        ; $8f NOT(
>95aa	c0 b2					.word	SyntaxError                      ; $90 OFF
>95ac	c0 b2					.word	SyntaxError                      ; $91 ON
>95ae	f9 a1					.word	Unary_Random                     ; $92 RANDOM(
>95b0	83 a3					.word	Unary_Right                      ; $93 RIGHT$(
>95b2	18 a2					.word	Unary_Rnd                        ; $94 RND(
>95b4	f1 b0					.word	SgnUnary                         ; $95 SGN(
>95b6	ab a2					.word	SpcUnary                         ; $96 SPC(
>95b8	c6 a2					.word	Unary_Str                        ; $97 STR$(
>95ba	bb 96					.word	UnaryTimer                       ; $98 TIMER(
>95bc	75 99					.word	UnaryTrue                        ; $99 TRUE
>95be	11 b1					.word	ValUnary                         ; $9a VAL(
>95c0	c1 8d					.word	ForCommand                       ; $9b FOR
>95c2	61 91					.word	IfCommand                        ; $9c IF
>95c4	07 95					.word	Unused1                          ; $9d PROC
>95c6	26 94					.word	Command_REPEAT                   ; $9e REPEAT
>95c8	da 98					.word	Command_WHILE                    ; $9f WHILE
>95ca	8a 91					.word	EndIf                            ; $a0 ENDIF
>95cc	cc ac					.word	Command_ENDPROC                  ; $a1 ENDPROC
>95ce	7b 8e					.word	NextCommand                      ; $a2 NEXT
>95d0	07 95					.word	Unused4                          ; $a3 THEN
>95d2	2f 94					.word	Command_UNTIL                    ; $a4 UNTIL
>95d4	fb 98					.word	Command_WEND                     ; $a5 WEND
>95d6	c0 b2					.word	SyntaxError                      ; $a6 BY
>95d8	67 8c					.word	CallCommand                      ; $a7 CALL
>95da	d8 8e					.word	CircleCommand                    ; $a8 CIRCLE
>95dc	a1 8c					.word	ClearCommand                     ; $a9 CLEAR
>95de	c0 b2					.word	SyntaxError                      ; $aa CLS
>95e0	c0 b2					.word	SyntaxError                      ; $ab COLOR
>95e2	c0 b2					.word	SyntaxError                      ; $ac COLOUR
>95e4	f9 8c					.word	Command_Data                     ; $ad DATA
>95e6	01 8d					.word	DimCommand                       ; $ae DIM
>95e8	07 95					.word	Unused3                          ; $af DOWNTO
>95ea	83 91					.word	ElseCode                         ; $b0 ELSE
>95ec	c0 b2					.word	SyntaxError                      ; $b1 FROM
>95ee	f5 90					.word	GfxCommand                       ; $b2 GFX
>95f0	27 91					.word	Command_GOSUB                    ; $b3 GOSUB
>95f2	45 91					.word	GotoCommand                      ; $b4 GOTO
>95f4	c0 b2					.word	SyntaxError                      ; $b5 HERE
>95f6	02 8f					.word	ImageCommand                     ; $b6 IMAGE
>95f8	8b 91					.word	LetCommand                       ; $b7 LET
>95fa	57 8f					.word	LineCommand                      ; $b8 LINE
>95fc	7b 92					.word	Command_LOCAL                    ; $b9 LOCAL
>95fe	c0 b2					.word	SyntaxError                      ; $ba OUTLINE
>9600	50 8f					.word	PlotCommand                      ; $bb PLOT
>9602	09 93					.word	Command_Print                    ; $bc PRINT
>9604	c0 93					.word	Command_Read                     ; $bd READ
>9606	d4 8e					.word	RectangleCommand                 ; $be RECT
>9608	19 94					.word	RemCommand                       ; $bf REM
>960a	37 91					.word	Command_RETURN                   ; $c0 RETURN
>960c	c0 b2					.word	SyntaxError                      ; $c1 SOLID
>960e	e3 8e					.word	SpriteCommand                    ; $c2 SPRITE
>9610	1f 8f					.word	TextCommand                      ; $c3 TEXT
>9612	07 95					.word	Unused2                          ; $c4 TO
.9614					VectorSet1:
>9614	c0 b2					.word	SyntaxError                      ; $80 !0:EOF
>9616	c0 b2					.word	SyntaxError                      ; $81 !1:SH1
>9618	c0 b2					.word	SyntaxError                      ; $82 !2:SH2
>961a	38 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>961c	57 8c					.word	AssertCommand                    ; $84 ASSERT
>961e	95 90					.word	BitmapCtrl                       ; $85 BITMAP
>9620	be 8d					.word	EndCommand                       ; $86 END
>9622	e0 91					.word	Command_List                     ; $87 LIST
>9624	ff 92					.word	NewCommand                       ; $88 NEW
>9626	48 94					.word	Command_Restore                  ; $89 RESTORE
>9628	7a 94					.word	CommandRUN                       ; $8a RUN
>962a	da 90					.word	SpritesCtrl                      ; $8b SPRITES
>962c	b6 96					.word	StopCommand                      ; $8c STOP
.962e					VectorSet2:
>962e	c0 b2					.word	SyntaxError                      ; $80 !0:EOF
>9630	c0 b2					.word	SyntaxError                      ; $81 !1:SH1
>9632	c0 b2					.word	SyntaxError                      ; $82 !2:SH2
>9634	7f b1					.word	Assemble_adc                     ; $83 ADC
>9636	77 b1					.word	Assemble_and                     ; $84 AND
>9638	93 b1					.word	Assemble_asl                     ; $85 ASL
>963a	fd b1					.word	Assemble_bcc                     ; $86 BCC
>963c	01 b2					.word	Assemble_bcs                     ; $87 BCS
>963e	09 b2					.word	Assemble_beq                     ; $88 BEQ
>9640	c0 b1					.word	Assemble_bit                     ; $89 BIT
>9642	f1 b1					.word	Assemble_bmi                     ; $8a BMI
>9644	05 b2					.word	Assemble_bne                     ; $8b BNE
>9646	ed b1					.word	Assemble_bpl                     ; $8c BPL
>9648	0d b2					.word	Assemble_bra                     ; $8d BRA
>964a	11 b2					.word	Assemble_brk                     ; $8e BRK
>964c	f5 b1					.word	Assemble_bvc                     ; $8f BVC
>964e	f9 b1					.word	Assemble_bvs                     ; $90 BVS
>9650	19 b2					.word	Assemble_clc                     ; $91 CLC
>9652	6d b2					.word	Assemble_cld                     ; $92 CLD
>9654	2d b2					.word	Assemble_cli                     ; $93 CLI
>9656	5d b2					.word	Assemble_clv                     ; $94 CLV
>9658	8b b1					.word	Assemble_cmp                     ; $95 CMP
>965a	d4 b1					.word	Assemble_cpx                     ; $96 CPX
>965c	cf b1					.word	Assemble_cpy                     ; $97 CPY
>965e	b1 b1					.word	Assemble_dec                     ; $98 DEC
>9660	69 b2					.word	Assemble_dex                     ; $99 DEX
>9662	45 b2					.word	Assemble_dey                     ; $9a DEY
>9664	7b b1					.word	Assemble_eor                     ; $9b EOR
>9666	b6 b1					.word	Assemble_inc                     ; $9c INC
>9668	79 b2					.word	Assemble_inx                     ; $9d INX
>966a	65 b2					.word	Assemble_iny                     ; $9e INY
>966c	e8 b1					.word	Assemble_jmp                     ; $9f JMP
>966e	e3 b1					.word	Assemble_jsr                     ; $a0 JSR
>9670	87 b1					.word	Assemble_lda                     ; $a1 LDA
>9672	ac b1					.word	Assemble_ldx                     ; $a2 LDX
>9674	ca b1					.word	Assemble_ldy                     ; $a3 LDY
>9676	9d b1					.word	Assemble_lsr                     ; $a4 LSR
>9678	7d b2					.word	Assemble_nop                     ; $a5 NOP
>967a	73 b1					.word	Assemble_ora                     ; $a6 ORA
>967c	29 b2					.word	Assemble_pha                     ; $a7 PHA
>967e	15 b2					.word	Assemble_php                     ; $a8 PHP
>9680	71 b2					.word	Assemble_phx                     ; $a9 PHX
>9682	31 b2					.word	Assemble_phy                     ; $aa PHY
>9684	39 b2					.word	Assemble_pla                     ; $ab PLA
>9686	1d b2					.word	Assemble_plp                     ; $ac PLP
>9688	85 b2					.word	Assemble_plx                     ; $ad PLX
>968a	41 b2					.word	Assemble_ply                     ; $ae PLY
>968c	98 b1					.word	Assemble_rol                     ; $af ROL
>968e	a2 b1					.word	Assemble_ror                     ; $b0 ROR
>9690	25 b2					.word	Assemble_rti                     ; $b1 RTI
>9692	35 b2					.word	Assemble_rts                     ; $b2 RTS
>9694	8f b1					.word	Assemble_sbc                     ; $b3 SBC
>9696	21 b2					.word	Assemble_sec                     ; $b4 SEC
>9698	81 b2					.word	Assemble_sed                     ; $b5 SED
>969a	3d b2					.word	Assemble_sei                     ; $b6 SEI
>969c	83 b1					.word	Assemble_sta                     ; $b7 STA
>969e	75 b2					.word	Assemble_stp                     ; $b8 STP
>96a0	a7 b1					.word	Assemble_stx                     ; $b9 STX
>96a2	c5 b1					.word	Assemble_sty                     ; $ba STY
>96a4	bb b1					.word	Assemble_stz                     ; $bb STZ
>96a6	59 b2					.word	Assemble_tax                     ; $bc TAX
>96a8	55 b2					.word	Assemble_tay                     ; $bd TAY
>96aa	de b1					.word	Assemble_trb                     ; $be TRB
>96ac	d9 b1					.word	Assemble_tsb                     ; $bf TSB
>96ae	61 b2					.word	Assemble_tsx                     ; $c0 TSX
>96b0	49 b2					.word	Assemble_txa                     ; $c1 TXA
>96b2	51 b2					.word	Assemble_txs                     ; $c2 TXS
>96b4	4d b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96b6					StopCommand:
.96b6	a9 08		lda #$08		lda	#8
.96b8	4c 09 99	jmp $9909		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96bb					UnaryTimer:
.96bb	fa		plx				plx
.96bc	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero 					; zero result
.96bf	64 01		stz $01				stz 	1 							; access I/O
.96c1	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96c4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96c7	ad 5a d6	lda $d65a			lda 	$D65A
.96ca	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96cd	ad 5b d6	lda $d65b			lda 	$D65B
.96d0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96d3	20 da ac	jsr $acda			jsr 	CheckRightBracket
.96d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96d7					ListConvertLine:
.96d7	9c 9d 04	stz $049d			stz 	tbOffset
.96da	9c a9 04	stz $04a9			stz 	tokenBuffer
.96dd	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96df	b1 30		lda ($30),y			lda 	(codePtr),y
.96e1	aa		tax				tax
.96e2	88		dey				dey
.96e3	b1 30		lda ($30),y			lda 	(codePtr),y
.96e5	20 36 ae	jsr $ae36			jsr 	ConvertInt16
.96e8	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96ea	86 37		stx $37				stx 	zTemp0+1
.96ec	a0 00		ldy #$00			ldy 	#0
.96ee					_LCCopyNumber:
.96ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.96f0	20 f0 97	jsr $97f0			jsr 	LCLWrite
.96f3	c8		iny				iny
.96f4	b1 36		lda ($36),y			lda 	(zTemp0),y
.96f6	d0 f6		bne $96ee			bne 	_LCCopyNumber
.96f8					_LCPadOut:
.96f8	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.96fa	20 f0 97	jsr $97f0			jsr 	LCLWrite
.96fd	ad 9d 04	lda $049d			lda 	tbOffset
.9700	c9 06		cmp #$06			cmp 	#6
.9702	d0 f4		bne $96f8			bne 	_LCPadOut
.9704	a0 03		ldy #$03			ldy 	#3 							; start position.
.9706					_LCMainLoop:
.9706	b1 30		lda ($30),y			lda 	(codePtr),y
.9708	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.970a	f0 17		beq $9723			beq 	_LCExit
.970c	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.970e	90 14		bcc $9724			bcc 	_LCDoubles
.9710	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9712	90 20		bcc $9734			bcc 	_LCShiftPunc
.9714	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9716	90 2b		bcc $9743			bcc 	_LCPunctuation
.9718	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.971a	90 2d		bcc $9749			bcc 	_LCIdentifiers
.971c	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.971e	90 49		bcc $9769			bcc 	_LCTokens
.9720	4c c4 97	jmp $97c4			jmp 	_LCData 					; 254-5 are data objects
.9723					_LCExit:
.9723	60		rts				rts
.9724					_LCDoubles:
.9724	48		pha				pha
.9725	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9726	29 02		and #$02			and 	#2
.9728	09 3c		ora #$3c			ora 	#60 						; make < >
.972a	20 f0 97	jsr $97f0			jsr 	LCLWrite
.972d	68		pla				pla 								; restore, do lower bit
.972e	29 03		and #$03			and 	#3
.9730	09 3c		ora #$3c			ora 	#60
.9732	80 0f		bra $9743			bra		_LCPunctuation 				; print, increment, loop
.9734					_LCShiftPunc:
.9734	aa		tax				tax 								; save in X
.9735	29 07		and #$07			and 	#7 							; lower 3 bits
.9737	f0 02		beq $973b			beq 	_LCNoAdd
.9739	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.973b					_LCNoAdd:
.973b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.973d	90 02		bcc $9741			bcc 	_LCNoAdd2
.973f	09 20		ora #$20			ora 	#32 						; adds $20
.9741					_LCNoAdd2:
.9741	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9743					_LCPunctuation:
.9743	c8		iny				iny 								; consume character
.9744	20 f0 97	jsr $97f0			jsr 	LCLWrite 					; write it out.
.9747	80 bd		bra $9706			bra 	_LCMainLoop 				; go round again.
.9749					_LCIdentifiers:
.9749	18		clc				clc 								; convert to physical address
.974a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.974c	85 37		sta $37				sta 	zTemp0+1
.974e	c8		iny				iny
.974f	b1 30		lda ($30),y			lda 	(codePtr),y
.9751	85 36		sta $36				sta 	zTemp0
.9753	c8		iny				iny
.9754	5a		phy				phy 								; save position
.9755	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9757					_LCOutIdentifier:
.9757	c8		iny				iny
.9758	b1 36		lda ($36),y			lda 	(zTemp0),y
.975a	29 7f		and #$7f			and 	#$7F
.975c	20 1e 98	jsr $981e			jsr 	LCLLowerCase
.975f	20 f0 97	jsr $97f0			jsr 	LCLWrite
.9762	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9764	10 f1		bpl $9757			bpl 	_LCOutIdentifier
.9766	7a		ply				ply 								; restore position
.9767	80 9d		bra $9706			bra 	_LCMainLoop
.9769					_LCTokens:
.9769	aa		tax				tax 								; token in X
.976a	a9 86		lda #$86			lda 	#((KeywordSet2) & $FF)
.976c	85 36		sta $36				sta 	0+zTemp0
.976e	a9 a8		lda #$a8			lda 	#((KeywordSet2) >> 8)
.9770	85 37		sta $37				sta 	1+zTemp0
.9772	e0 82		cpx #$82			cpx 	#$82
.9774	f0 16		beq $978c			beq 	_LCUseShift
.9776	a9 38		lda #$38			lda 	#((KeywordSet1) & $FF)
.9778	85 36		sta $36				sta 	0+zTemp0
.977a	a9 a8		lda #$a8			lda 	#((KeywordSet1) >> 8)
.977c	85 37		sta $37				sta 	1+zTemp0
.977e	e0 81		cpx #$81			cpx 	#$81
.9780	f0 0a		beq $978c			beq 	_LCUseShift
.9782	a9 83		lda #$83			lda 	#((KeywordSet0) & $FF)
.9784	85 36		sta $36				sta 	0+zTemp0
.9786	a9 a6		lda #$a6			lda 	#((KeywordSet0) >> 8)
.9788	85 37		sta $37				sta 	1+zTemp0
.978a	80 01		bra $978d			bra 	_LCNoShift
.978c					_LCUseShift:
.978c	c8		iny				iny
.978d					_LCNoShift:
.978d	20 ff 97	jsr $97ff			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9790	b1 30		lda ($30),y			lda 	(codePtr),y
.9792	aa		tax				tax 								; into X
.9793					_LCFindText:
.9793	ca		dex				dex
.9794	10 0e		bpl $97a4			bpl 	_LCFoundText 				; found text.
.9796	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9798	1a		inc a				inc 	a 							; one extra for size
.9799	38		sec				sec 								; one extra for checksum
.979a	65 36		adc $36				adc 	zTemp0 						; go to next token
.979c	85 36		sta $36				sta 	zTemp0
.979e	90 f3		bcc $9793			bcc 	_LCFindText
.97a0	e6 37		inc $37				inc 	zTemp0+1
.97a2	80 ef		bra $9793			bra 	_LCFindText
.97a4					_LCFoundText:
.97a4	5a		phy				phy 								; save List position
.97a5	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.97a7	aa		tax				tax
.97a8	a0 02		ldy #$02			ldy 	#2
.97aa					_LCCopyToken:
.97aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.97ac	20 1e 98	jsr $981e			jsr 	LCLLowerCase
.97af	20 f0 97	jsr $97f0			jsr 	LCLWrite
.97b2	c8		iny				iny
.97b3	ca		dex				dex
.97b4	d0 f4		bne $97aa			bne 	_LCCopyToken
.97b6	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.97b8	f0 05		beq $97bf			beq 	_LCNoSpace
.97ba	a9 20		lda #$20			lda 	#' '
.97bc	20 f0 97	jsr $97f0			jsr 	LCLWrite
.97bf					_LCNoSpace:
.97bf	7a		ply				ply 								; restore position.
.97c0	c8		iny				iny 								; consume token
.97c1	4c 06 97	jmp $9706			jmp 	_LCMainLoop 				; and go around again.
.97c4					_LCData:
.97c4	48		pha				pha 								; save type $FE/$FF
.97c5	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.97c7	c9 fe		cmp #$fe			cmp 	#$FE
.97c9	f0 02		beq $97cd			beq 	_LCHaveOpener
.97cb	a2 22		ldx #$22			ldx 	#'"'
.97cd					_LCHaveOpener:
.97cd	8a		txa				txa 								; output prefix (# or ")
.97ce	20 f0 97	jsr $97f0			jsr 	LCLWrite
.97d1	c8		iny				iny 								; get count
.97d2	b1 30		lda ($30),y			lda 	(codePtr),y
.97d4	aa		tax				tax
.97d5	c8		iny				iny 								; point at first character
.97d6					_LCOutData:
.97d6	b1 30		lda ($30),y			lda 	(codePtr),y
.97d8	c9 00		cmp #$00			cmp 	#0
.97da	f0 03		beq $97df			beq 	_LCNoPrint
.97dc	20 f0 97	jsr $97f0			jsr 	LCLWrite
.97df					_LCNoPrint:
.97df	c8		iny				iny
.97e0	ca		dex				dex
.97e1	d0 f3		bne $97d6			bne 	_LCOutData
.97e3	68		pla				pla 								; closing " required ?
.97e4	c9 ff		cmp #$ff			cmp 	#$FF
.97e6	d0 05		bne $97ed			bne 	_LCNoQuote
.97e8	a9 22		lda #$22			lda 	#'"'
.97ea	20 f0 97	jsr $97f0			jsr 	LCLWrite
.97ed					_LCNoQuote:
.97ed	4c 06 97	jmp $9706			jmp 	_LCMainLoop
.97f0					LCLWrite:
.97f0	da		phx				phx
.97f1	ae 9d 04	ldx $049d			ldx 	tbOffset
.97f4	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.97f7	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.97fa	ee 9d 04	inc $049d			inc 	tbOffset
.97fd	fa		plx				plx
.97fe	60		rts				rts
.97ff					LCCheckSpaceRequired:
.97ff	ae 9d 04	ldx $049d			ldx 	tbOffset
.9802	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9805	20 1e 98	jsr $981e			jsr 	LCLLowerCase 				; saves a little effort
.9808	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.980a	90 11		bcc $981d			bcc 	_LCCSRExit
.980c	c9 3a		cmp #$3a			cmp 	#"9"+1
.980e	90 08		bcc $9818			bcc 	_LCCSRSpace
.9810	c9 61		cmp #$61			cmp 	#"a"
.9812	90 09		bcc $981d			bcc 	_LCCSRExit
.9814	c9 7b		cmp #$7b			cmp 	#"z"+1
.9816	b0 05		bcs $981d			bcs 	_LCCSRExit
.9818					_LCCSRSpace:
.9818	a9 20		lda #$20			lda 	#' '
.981a	20 f0 97	jsr $97f0			jsr 	LCLWrite
.981d					_LCCSRExit:
.981d	60		rts				rts
.981e					LCLLowerCase:
.981e	c9 41		cmp #$41			cmp 	#"A"
.9820	90 06		bcc $9828			bcc 	_LCLLCOut
.9822	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9824	b0 02		bcs $9828			bcs 	_LCLLCOut
.9826	69 20		adc #$20			adc 	#$20
.9828					_LCLLCOut:
.9828	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9829					ProcedureScan:
.9829	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.982b	85 30		sta $30				sta 	codePtr
.982d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.982f	85 31		sta $31				sta 	codePtr+1
.9831					_PSLoop:
.9831	b2 30		lda ($30)			lda 	(codePtr)
.9833	f0 42		beq $9877			beq 	_PSExit
.9835	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9837	b1 30		lda ($30),y			lda 	(codePtr),y
.9839	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.983b	d0 2d		bne $986a			bne 	_PSNext
.983d	c8		iny				iny 								; get the address of the record to zTemp0 and
.983e	b1 30		lda ($30),y			lda 	(codePtr),y
.9840	29 c0		and #$c0			and 	#$C0
.9842	c9 40		cmp #$40			cmp 	#$40
.9844	d0 32		bne $9878			bne 	_PSSyntax
.9846	b1 30		lda ($30),y			lda 	(codePtr),y
.9848	18		clc				clc
.9849	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.984b	85 37		sta $37				sta 	zTemp0+1
.984d	c8		iny				iny 								; LSB
.984e	b1 30		lda ($30),y			lda 	(codePtr),y
.9850	85 36		sta $36				sta 	zTemp0
.9852	c8		iny				iny 								; character after variable call.
.9853	98		tya				tya 								; save Y offset at +7
.9854	a0 07		ldy #$07			ldy 	#7
.9856	91 36		sta ($36),y			sta 	(zTemp0),y
.9858	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.985a	a0 02		ldy #$02			ldy 	#2
.985c	91 36		sta ($36),y			sta 	(zTemp0),y
.985e	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9860					_PSCopy:
.9860	b5 30		lda $30,x			lda 	safePtr,x
.9862	c8		iny				iny
.9863	91 36		sta ($36),y			sta 	(zTemp0),y
.9865	e8		inx				inx
.9866	e0 04		cpx #$04			cpx 	#4
.9868	d0 f6		bne $9860			bne 	_PSCopy
.986a					_PSNext:
.986a	18		clc				clc
.986b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.986d	65 30		adc $30				adc 	codePtr
.986f	85 30		sta $30				sta 	codePtr
.9871	90 02		bcc $9875			bcc 	_CREExit
.9873	e6 31		inc $31				inc 	codePtr+1
.9875					_CREExit:
.9875	80 ba		bra $9831			bra 	_PSLoop
.9877					_PSExit:
.9877	60		rts				rts
.9878					_PSSyntax:
.9878	4c c0 b2	jmp $b2c0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.987b					ScanForward:
.987b	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.987d	86 37		stx $37				stx 	zTemp0+1
.987f	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9881					_ScanLoop:
.9881	b1 30		lda ($30),y			lda 	(codePtr),y
.9883	c8		iny				iny
.9884	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9886	d0 0e		bne $9896			bne 	_ScanGoNext
.9888	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.988a	f0 04		beq $9890			beq 	_ScanMatch
.988c	c5 37		cmp $37				cmp 	zTemp0+1
.988e	d0 06		bne $9896			bne 	_ScanGoNext
.9890					_ScanMatch:
.9890	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9892	d0 01		bne $9895			bne 	_ScanNotEndEOL
.9894	88		dey				dey
.9895					_ScanNotEndEOL:
.9895	60		rts				rts
.9896					_ScanGoNext:
.9896	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9898	90 e7		bcc $9881			bcc 	_ScanLoop
.989a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.989c	90 18		bcc $98b6			bcc 	_ScanSkipOne
.989e	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.98a0	b0 2f		bcs $98d1			bcs 	_ScanSkipData
.98a2	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.98a4	90 db		bcc $9881			bcc 	_ScanLoop 					; if not, ordinary keywords.
.98a6	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.98a8	b0 d7		bcs $9881			bcs 	_ScanLoop
.98aa	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.98ac	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.98ae	b0 d1		bcs $9881			bcs 	_ScanLoop
.98b0	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.98b2	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.98b4	80 cb		bra $9881			bra 	_ScanLoop
.98b6					_ScanSkipOne:
.98b6	c8		iny				iny 								; consume the extra one.
.98b7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.98b9	d0 c6		bne $9881			bne 	_ScanLoop
.98bb	18		clc				clc
.98bc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98be	65 30		adc $30				adc 	codePtr
.98c0	85 30		sta $30				sta 	codePtr
.98c2	90 02		bcc $98c6			bcc 	_CREExit
.98c4	e6 31		inc $31				inc 	codePtr+1
.98c6					_CREExit:
.98c6	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.98c8	b2 30		lda ($30)			lda 	(codePtr)
.98ca	d0 b5		bne $9881			bne 	_ScanLoop 					; if not zero, more to scan
.98cc	a9 13		lda #$13		lda	#19
.98ce	4c 09 99	jmp $9909		jmp	ErrorHandler
.98d1					_ScanSkipData:
.98d1	88		dey				dey 								; point at data token
.98d2	c8		iny				iny
.98d3	98		tya				tya
.98d4	38		sec				sec
.98d5	71 30		adc ($30),y			adc 	(codePtr),y
.98d7	a8		tay				tay
.98d8	80 a7		bra $9881			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.98da					Command_WHILE:
.98da	5a		phy				phy 								; save position of the test
.98db	a2 00		ldx #$00			ldx 	#0
.98dd	20 1b a4	jsr $a41b			jsr 	EvaluateNumber 				; work out the number
.98e0	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; check if zero
.98e3	f0 0e		beq $98f3			beq 	_WHExitLoop 				; if so exit the loop
.98e5	98		tya				tya 								; position *after* test.
.98e6	7a		ply				ply 								; restore position before test, at WHILE
.98e7	88		dey				dey
.98e8	48		pha				pha 								; push after test on the stack
.98e9	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.98eb	20 7b a5	jsr $a57b			jsr 	StackOpen
.98ee	20 bf a5	jsr $a5bf			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.98f1	7a		ply				ply 								; restore the position *after* the test
.98f2	60		rts				rts
.98f3					_WHExitLoop:
.98f3	68		pla				pla 								; throw post loop position
.98f4	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.98f6	aa		tax				tax
.98f7	20 7b 98	jsr $987b			jsr 	ScanForward
.98fa	60		rts				rts
.98fb					Command_WEND:
.98fb	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.98fd	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.98ff	20 a7 a5	jsr $a5a7			jsr 	StackCheckFrame
.9902	20 d0 a5	jsr $a5d0			jsr 	STKLoadCodePosition 		; loop back
.9905	20 99 a5	jsr $a599			jsr 	StackClose		 			; erase the frame
.9908	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.acda					CheckRightBracket:
.acda	b1 30		lda ($30),y			lda 	(codePtr),y
.acdc	c8		iny				iny
.acdd	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.acdf	d0 0f		bne $acf0			bne 	CNAFail
.ace1	60		rts				rts
.ace2					CheckComma:
.ace2	b1 30		lda ($30),y			lda 	(codePtr),y
.ace4	c8		iny				iny
.ace5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ace7	d0 07		bne $acf0			bne 	CNAFail
.ace9	60		rts				rts
.acea					CheckNextA:
.acea	d1 30		cmp ($30),y			cmp 	(codePtr),y
.acec	d0 02		bne $acf0			bne 	CNAFail
.acee	c8		iny				iny 								; skip character
.acef	60		rts				rts 								; and exit
.acf0					CNAFail:
.acf0	4c c0 b2	jmp $b2c0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9909					ErrorHandler:
.9909	a8		tay				tay 								; find the error text
.990a	f0 49		beq $9955			beq 	_EHEnd
.990c	a2 00		ldx #$00			ldx 	#0
.990e	a9 d9		lda #$d9			lda 	#((ErrorText) & $FF)
.9910	85 36		sta $36				sta 	0+zTemp0
.9912	a9 b2		lda #$b2			lda 	#((ErrorText) >> 8)
.9914	85 37		sta $37				sta 	1+zTemp0
.9916					_EHFind:
.9916	88		dey				dey 								; found the error text ?
.9917	f0 0e		beq $9927			beq 	_EHFound
.9919					_EHFindZero:
.9919	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.991b	e6 36		inc $36				inc 	zTemp0
.991d	d0 02		bne $9921			bne 	_EHFNoCarry
.991f	e6 37		inc $37				inc 	zTemp0+1
.9921					_EHFNoCarry:
.9921	c9 00		cmp #$00			cmp 	#0
.9923	d0 f4		bne $9919			bne 	_EHFindZero
.9925	80 ef		bra $9916			bra 	_EHFind
.9927					_EHFound:
.9927	a5 36		lda $36				lda 	zTemp0 						; print message
.9929	a6 37		ldx $37				ldx 	zTemp0+1
.992b	20 62 99	jsr $9962			jsr 	PrintStringXA
.992e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9930	b1 30		lda ($30),y			lda 	(codePtr),y
.9932	d0 05		bne $9939			bne 	_EHAtMsg
.9934	c8		iny				iny
.9935	b1 30		lda ($30),y			lda 	(codePtr),y
.9937	f0 17		beq $9950			beq 	_EHCREnd
.9939					_EHAtMsg:
.9939	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.993b	a9 58		lda #$58			lda 	#_AtMsg & $FF
.993d	20 62 99	jsr $9962			jsr 	PrintStringXA
.9940	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9942	b1 30		lda ($30),y			lda 	(codePtr),y
.9944	48		pha				pha
.9945	c8		iny				iny
.9946	b1 30		lda ($30),y			lda 	(codePtr),y
.9948	aa		tax				tax
.9949	68		pla				pla
.994a	20 36 ae	jsr $ae36			jsr 	ConvertInt16 				; convert XA to string
.994d	20 62 99	jsr $9962			jsr 	PrintStringXA 				; and print it.
.9950					_EHCREnd:
.9950	a9 0d		lda #$0d			lda 	#13 						; new line
.9952	20 77 b4	jsr $b477			jsr 	EXTPrintCharacter
.9955					_EHEnd:
.9955	4c 08 8c	jmp $8c08			jmp 	WarmStart
>9958	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9960	20 00
.9962					PrintStringXA:
.9962	5a		phy				phy
.9963	86 37		stx $37				stx 	zTemp0+1
.9965	85 36		sta $36				sta 	zTemp0
.9967	a0 00		ldy #$00			ldy 	#0
.9969					_PSXALoop:
.9969	b1 36		lda ($36),y			lda 	(zTemp0),y
.996b	f0 06		beq $9973			beq 	_PSXAExit
.996d	20 77 b4	jsr $b477			jsr 	EXTPrintCharacter
.9970	c8		iny				iny
.9971	80 f6		bra $9969			bra 	_PSXALoop
.9973					_PSXAExit:
.9973	7a		ply				ply
.9974	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9975					UnaryTrue:
.9975	fa		plx				plx
.9976					ReturnTrue:
.9976	a9 01		lda #$01			lda 	#1  						; set to 1
.9978	20 c9 a4	jsr $a4c9			jsr 	NSMSetByte
.997b	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.997d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9980	60		rts				rts
.9981					UnaryFalse:
.9981	fa		plx				plx
.9982					ReturnFalse:
.9982	4c c7 a4	jmp $a4c7			jmp 	NSMSetZero 					; set it all to zero
.9985					BinaryCompareEqual:
.9985	fa		plx				plx
.9986	20 c1 99	jsr $99c1			jsr 	CompareBaseCode
.9989	c9 00		cmp #$00			cmp 	#0
.998b	f0 e9		beq $9976			beq 	ReturnTrue
.998d	80 f3		bra $9982			bra 	ReturnFalse
.998f					BinaryCompareLess:
.998f	fa		plx				plx
.9990	20 c1 99	jsr $99c1			jsr 	CompareBaseCode
.9993	c9 ff		cmp #$ff			cmp 	#$FF
.9995	f0 df		beq $9976			beq 	ReturnTrue
.9997	80 e9		bra $9982			bra 	ReturnFalse
.9999					BinaryCompareGreater:
.9999	fa		plx				plx
.999a	20 c1 99	jsr $99c1			jsr 	CompareBaseCode
.999d	c9 01		cmp #$01			cmp 	#1
.999f	f0 d5		beq $9976			beq 	ReturnTrue
.99a1	80 df		bra $9982			bra 	ReturnFalse
.99a3					BinaryCompareNotEqual:
.99a3	fa		plx				plx
.99a4	20 c1 99	jsr $99c1			jsr 	CompareBaseCode
.99a7	c9 00		cmp #$00			cmp 	#0
.99a9	d0 cb		bne $9976			bne 	ReturnTrue
.99ab	80 d5		bra $9982			bra 	ReturnFalse
.99ad					BinaryCompareLessEqual:
.99ad	fa		plx				plx
.99ae	20 c1 99	jsr $99c1			jsr 	CompareBaseCode
.99b1	c9 01		cmp #$01			cmp 	#1
.99b3	d0 c1		bne $9976			bne 	ReturnTrue
.99b5	80 cb		bra $9982			bra 	ReturnFalse
.99b7					BinaryCompareGreaterEqual:
.99b7	fa		plx				plx
.99b8	20 c1 99	jsr $99c1			jsr 	CompareBaseCode
.99bb	c9 ff		cmp #$ff			cmp 	#$FF
.99bd	d0 b7		bne $9976			bne 	ReturnTrue
.99bf	80 c1		bra $9982			bra 	ReturnFalse
.99c1					CompareBaseCode:
.99c1	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; make both values if references.
.99c4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.99c7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99ca	29 10		and #$10			and 	#NSTString
.99cc	d0 40		bne $9a0e			bne 	_CBCString
.99ce	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.99d1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99d4	d0 3b		bne $9a11			bne 	_CBCFloat
.99d6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99d9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99dc	29 08		and #$08			and 	#NSTFloat
.99de	d0 31		bne $9a11			bne 	_CBCFloat
.99e0	20 14 9a	jsr $9a14			jsr 	CompareFixMinusZero
.99e3	e8		inx				inx
.99e4	20 14 9a	jsr $9a14			jsr 	CompareFixMinusZero
.99e7	ca		dex				dex
.99e8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.99eb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.99ee	10 0b		bpl $99fb			bpl 	_CDCSameSign
.99f0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.99f3	30 16		bmi $9a0b			bmi 	_CBCLess 					; return $FF
.99f5					_CBCGreater:
.99f5	a9 01		lda #$01			lda 	#1
.99f7	60		rts				rts
.99f8					_CBCEqual:
.99f8	a9 00		lda #$00			lda 	#0
.99fa	60		rts				rts
.99fb					_CDCSameSign:
.99fb	20 24 9b	jsr $9b24			jsr 	SubTopTwoStack 				; unsigned subtract
.99fe	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; or the mantissa together
.9a01	f0 f5		beq $99f8			beq 	_CBCEqual 					; -0 == 0
.9a03	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9a06	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9a09	10 ea		bpl $99f5			bpl 	_CBCGreater
.9a0b					_CBCLess:
.9a0b	a9 ff		lda #$ff			lda 	#$FF
.9a0d	60		rts				rts
.9a0e					_CBCString:
.9a0e	4c 7a 9a	jmp $9a7a			jmp 	CompareStrings
.9a11					_CBCFloat:
.9a11	4c 32 af	jmp $af32			jmp 	CompareFloat
.9a14					CompareFixMinusZero:
.9a14	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero
.9a17	d0 03		bne $9a1c			bne 	_CFXMZNotZero
.9a19	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9a1c					_CFXMZNotZero:
.9a1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9a1d					StringConcat:
.9a1d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a20	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a23	29 18		and #$18			and 	#NSBTypeMask
.9a25	c9 10		cmp #$10			cmp 	#NSTString
.9a27	d0 4e		bne $9a77			bne		_SCType
.9a29	64 38		stz $38				stz 	zTemp1 						; counting total length
.9a2b	e8		inx				inx
.9a2c	20 4a 9a	jsr $9a4a			jsr 	_SCSetupZ0 					; setup for second
.9a2f	20 55 9a	jsr $9a55			jsr 	_SCLengthZ0 				; length for second
.9a32	ca		dex				dex
.9a33	20 4a 9a	jsr $9a4a			jsr 	_SCSetupZ0 					; setup for first
.9a36	20 55 9a	jsr $9a55			jsr 	_SCLengthZ0 				; length for first
.9a39	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9a3b	20 f9 b5	jsr $b5f9			jsr 	StringTempAllocate
.9a3e	20 68 9a	jsr $9a68			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9a41	e8		inx				inx
.9a42	20 4a 9a	jsr $9a4a			jsr 	_SCSetupZ0 					; copy second out
.9a45	20 68 9a	jsr $9a68			jsr 	_SCCopy
.9a48	ca		dex				dex
.9a49	60		rts				rts
.9a4a					_SCSetupZ0:
.9a4a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a4d	85 36		sta $36				sta 	zTemp0
.9a4f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a52	85 37		sta $37				sta 	zTemp0+1
.9a54	60		rts				rts
.9a55					_SCLengthZ0:
.9a55	5a		phy				phy
.9a56	a0 00		ldy #$00			ldy 	#0
.9a58					_SCLenLoop:
.9a58	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a5a	f0 0a		beq $9a66			beq 	_SCLExit
.9a5c	c8		iny				iny
.9a5d	e6 38		inc $38				inc 	zTemp1
.9a5f	10 f7		bpl $9a58			bpl		_SCLenLoop
.9a61	a9 09		lda #$09		lda	#9
.9a63	4c 09 99	jmp $9909		jmp	ErrorHandler
.9a66					_SCLExit:
.9a66	7a		ply				ply
.9a67	60		rts				rts
.9a68					_SCCopy:
.9a68	5a		phy				phy
.9a69	a0 00		ldy #$00			ldy 	#0
.9a6b					_SCCopyLoop:
.9a6b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a6d	f0 06		beq $9a75			beq 	_SCCExit
.9a6f	20 37 b6	jsr $b637			jsr 	StringTempWrite
.9a72	c8		iny				iny
.9a73	80 f6		bra $9a6b			bra 	_SCCopyLoop
.9a75					_SCCExit:
.9a75	7a		ply				ply
.9a76	60		rts				rts
.9a77					_SCType:
.9a77	4c ca b2	jmp $b2ca			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.acf3					IntegerDivide:
.acf3	fa		plx				plx
.acf4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.acf7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.acfa	0a		asl a				asl 	a 							; shift reference bit into sign bit
.acfb	0a		asl a				asl 	a
.acfc	10 05		bpl $ad03			bpl 	_NotRef
.acfe	48		pha				pha
.acff	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad02	68		pla				pla
.ad03					_NotRef:
.ad03	0a		asl a				asl 	a
.ad04	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad06	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad09	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad0c	f0 03		beq $ad11			beq 	_IntegerCode 				; if clear, then we have two integers
.ad0e	4c ca b2	jmp $b2ca			jmp 	TypeError 					; anything else, type mismatch.
.ad11					_IntegerCode:
.ad11	20 33 ad	jsr $ad33			jsr 	CheckDivideZero 			; do div zero check
.ad14	20 6b ad	jsr $ad6b			jsr 	Int32Divide 				; do the division
.ad17	20 28 ae	jsr $ae28			jsr 	CalculateSign 				; calculate result sign
.ad1a					NSMCopyPlusTwoToZero:
.ad1a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ad1d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ad20	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ad23	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad26	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ad29	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ad2c	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ad2f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ad32	60		rts				rts
.ad33					CheckDivideZero:
.ad33	e8		inx				inx
.ad34	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero
.ad37	f0 02		beq $ad3b			beq 	_CDVError
.ad39	ca		dex				dex
.ad3a	60		rts				rts
.ad3b					_CDVError:
.ad3b	a9 03		lda #$03		lda	#3
.ad3d	4c 09 99	jmp $9909		jmp	ErrorHandler
.ad40					IntegerModulus:
.ad40	fa		plx				plx
.ad41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad44	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad47	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad48	0a		asl a				asl 	a
.ad49	10 05		bpl $ad50			bpl 	_NotRef
.ad4b	48		pha				pha
.ad4c	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad4f	68		pla				pla
.ad50					_NotRef:
.ad50	0a		asl a				asl 	a
.ad51	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad53	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad56	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad59	f0 03		beq $ad5e			beq 	_IntegerCode 				; if clear, then we have two integers
.ad5b	4c ca b2	jmp $b2ca			jmp 	TypeError 					; anything else, type mismatch.
.ad5e					_IntegerCode:
.ad5e					IntegerModulusNoCheck:
.ad5e	20 33 ad	jsr $ad33			jsr 	CheckDivideZero 			; do div zero check
.ad61	20 6b ad	jsr $ad6b			jsr 	Int32Divide 				; do the division
.ad64	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ad67	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ad6a	60		rts				rts
.ad6b					Int32Divide:
.ad6b	48		pha				pha 								; save AXY
.ad6c	5a		phy				phy
.ad6d	20 9e a4	jsr $a49e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ad70	20 c3 a4	jsr $a4c3			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ad73	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ad75					_I32DivideLoop:
.ad75	e8		inx				inx
.ad76	e8		inx				inx
.ad77	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ad7a	ca		dex				dex
.ad7b	ca		dex				dex
.ad7c	20 dd a4	jsr $a4dd			jsr 	NSMRotateLeft
.ad7f	20 ab ad	jsr $adab			jsr 	DivideCheckSubtract 		; check if subtract possible
.ad82	90 03		bcc $ad87			bcc 	_I32DivideNoCarryIn
.ad84	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ad87					_I32DivideNoCarryIn:
.ad87	88		dey				dey 								; loop round till division completed.
.ad88	d0 eb		bne $ad75			bne 	_I32DivideLoop
.ad8a	7a		ply				ply 								; restore AXY and exit
.ad8b	68		pla				pla
.ad8c	60		rts				rts
.ad8d					Int32ShiftDivide:
.ad8d	48		pha				pha 								; save AY
.ad8e	5a		phy				phy
.ad8f	e8		inx				inx 								; clear S[X+2]
.ad90	e8		inx				inx
.ad91	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero
.ad94	ca		dex				dex
.ad95	ca		dex				dex
.ad96	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.ad98					_I32SDLoop:
.ad98	20 ab ad	jsr $adab			jsr 	DivideCheckSubtract 		; check if subtract possible
.ad9b	e8		inx				inx
.ad9c	e8		inx				inx
.ad9d	20 dd a4	jsr $a4dd			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.ada0	ca		dex				dex
.ada1	ca		dex				dex
.ada2	20 dd a4	jsr $a4dd			jsr 	NSMRotateLeft
.ada5	88		dey				dey 	 							; do 31 times
.ada6	d0 f0		bne $ad98			bne 	_I32SDLoop
.ada8	7a		ply				ply 								; restore AY and exit
.ada9	68		pla				pla
.adaa	60		rts				rts
.adab					DivideCheckSubtract:
.adab	20 24 9b	jsr $9b24			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.adae	b0 04		bcs $adb4			bcs 	_DCSExit 					; if carry set, then could do, exit
.adb0	20 fe 9a	jsr $9afe			jsr 	AddTopTwoStack 				; add it back in
.adb3	18		clc				clc 								; and return False
.adb4					_DCSExit:
.adb4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.adb5					MulInteger:
.adb5	fa		plx				plx
.adb6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.adb9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.adbc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.adbd	0a		asl a				asl 	a
.adbe	10 05		bpl $adc5			bpl 	_NotRef
.adc0	48		pha				pha
.adc1	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.adc4	68		pla				pla
.adc5					_NotRef:
.adc5	0a		asl a				asl 	a 							; put MSB of type into A:7
.adc6	30 0b		bmi $add3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.adc8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.adcb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.adce	f0 06		beq $add6			beq 	_IntegerCode 				; if clear, then we have two integers
.add0	4c 09 b0	jmp $b009			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.add3					_StringData:
.add3	4c d4 b2	jmp $b2d4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.add6					_IntegerCode:
.add6	20 e3 ad	jsr $ade3			jsr 	MultiplyShort
.add9	c9 00		cmp #$00			cmp 	#0
.addb	f0 05		beq $ade2			beq 	_MIExit
.addd	a9 04		lda #$04		lda	#4
.addf	4c 09 99	jmp $9909		jmp	ErrorHandler
.ade2					_MIExit:
.ade2	60		rts				rts
.ade3					MultiplyShort:
.ade3	5a		phy				phy 								; save Y
.ade4	20 9e a4	jsr $a49e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ade7	20 c3 a4	jsr $a4c3			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.adea	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.adec					_I32MLoop:
.adec	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.adef	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.adf2	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.adf5	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.adf8	f0 28		beq $ae22			beq 	_I32MExit 					; exit if zero
.adfa	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.adfd	29 01		and #$01			and 	#1
.adff	f0 0e		beq $ae0f			beq 	_I32MNoAdd
.ae01	20 fe 9a	jsr $9afe			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ae04	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.ae07	10 06		bpl $ae0f			bpl 	_I32MNoAdd
.ae09					_I32ShiftRight:
.ae09	20 ea a4	jsr $a4ea			jsr 	NSMShiftRight 				; shift S[X] right
.ae0c	c8		iny				iny 								; increment shift count
.ae0d	80 0a		bra $ae19			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.ae0f					_I32MNoAdd:
.ae0f	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ae12	70 f5		bvs $ae09			bvs 	_I32ShiftRight 				; instead.
.ae14	e8		inx				inx
.ae15	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ae18	ca		dex				dex
.ae19					_I32MShiftUpper:
.ae19	e8		inx				inx 								; shift S[X+2] right
.ae1a	e8		inx				inx
.ae1b	20 ea a4	jsr $a4ea			jsr 	NSMShiftRight
.ae1e	ca		dex				dex
.ae1f	ca		dex				dex
.ae20	80 ca		bra $adec			bra 	_I32MLoop 					; try again.
.ae22					_I32MExit:
.ae22	20 28 ae	jsr $ae28			jsr 	CalculateSign
.ae25	98		tya				tya 								; shift in A
.ae26	7a		ply				ply 								; restore Y and exit
.ae27	60		rts				rts
.ae28					CalculateSign:
.ae28	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ae2b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ae2e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ae31	0a		asl a				asl 	a 							; shift bit 7 into carry
.ae32	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ae35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a7a					CompareStrings:
.9a7a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9a7d	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a80	29 10		and #$10			and 	#NSBIsString
.9a82	f0 2c		beq $9ab0			beq 	_CSTypeError
.9a84	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a87	85 36		sta $36				sta 	zTemp0
.9a89	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a8c	85 37		sta $37				sta 	zTemp0+1
.9a8e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a91	85 38		sta $38				sta 	zTemp1
.9a93	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a96	85 39		sta $39				sta 	zTemp1+1
.9a98	5a		phy				phy 								; save Y so we can access strings
.9a99	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a9b					_CSLoop:
.9a9b	c8		iny				iny
.9a9c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a9e	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9aa0	d0 06		bne $9aa8			bne 	_CSDifferent
.9aa2	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9aa4	d0 f5		bne $9a9b			bne 	_CSLoop 					; still comparing
.9aa6					_CSExit:
.9aa6	7a		ply				ply 								; reached end, return zero in A from EOS
.9aa7	60		rts				rts
.9aa8					_CSDifferent:
.9aa8	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9aaa	90 fa		bcc $9aa6			bcc		_CSExit
.9aac	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9aae	80 f6		bra $9aa6			bra 	_CSExit
.9ab0					_CSTypeError:
.9ab0	4c ca b2	jmp $b2ca			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9ab3					ShiftLeft:
.9ab3	38		sec				sec
.9ab4	80 01		bra $9ab7			bra 	ShiftMain
.9ab6					ShiftRight:
.9ab6	18		clc				clc
.9ab7					ShiftMain:
.9ab7	fa		plx				plx 								; restore X
.9ab8	08		php				php 								; save direction
.9ab9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9abc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9abf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ac0	0a		asl a				asl 	a
.9ac1	10 05		bpl $9ac8			bpl 	_NotRef
.9ac3	48		pha				pha
.9ac4	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ac7	68		pla				pla
.9ac8					_NotRef:
.9ac8	0a		asl a				asl 	a
.9ac9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9acb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ace	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ad1	f0 03		beq $9ad6			beq 	_IntegerCode 				; if clear, then we have two integers
.9ad3	4c ca b2	jmp $b2ca			jmp 	TypeError 					; anything else, type mismatch.
.9ad6					_IntegerCode:
.9ad6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ad9	29 e0		and #$e0			and 	#$E0
.9adb	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ade	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9ae1	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ae4	d0 13		bne $9af9			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9ae6					_SMLoop:
.9ae6	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9ae9	30 11		bmi $9afc			bmi 	_SMExit 					; exit if done.
.9aeb	28		plp				plp 								; restore direcition setting
.9aec	08		php				php
.9aed	90 05		bcc $9af4			bcc 	_SMRight
.9aef	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; shift left if CS
.9af2	80 f2		bra $9ae6			bra 	_SMLoop
.9af4					_SMRight:
.9af4	20 ea a4	jsr $a4ea			jsr 	NSMShiftRight 				; shift right if CC
.9af7	80 ed		bra $9ae6			bra 	_SMLoop
.9af9					_SMExit0:
.9af9	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero 					; return zero.
.9afc					_SMExit:
.9afc	28		plp				plp 								; throw direction
.9afd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9afe					AddTopTwoStack:
.9afe	18		clc				clc
.9aff	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b02	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9b05	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b08	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b0b	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9b0e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b11	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b14	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9b17	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b1a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b1d	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b20	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b23	60		rts				rts
.9b24					SubTopTwoStack:
.9b24	38		sec				sec
.9b25	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b28	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9b2b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b2e	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b31	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9b34	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b37	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b3a	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9b3d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b40	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b43	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9b46	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b49	60		rts				rts
.9b4a					AddInteger:
.9b4a	fa		plx				plx
.9b4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b4e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b51	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b52	0a		asl a				asl 	a
.9b53	10 05		bpl $9b5a			bpl 	_NotRef
.9b55	48		pha				pha
.9b56	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b59	68		pla				pla
.9b5a					_NotRef:
.9b5a	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b5b	30 0b		bmi $9b68			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b5d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b60	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b63	f0 06		beq $9b6b			beq 	_IntegerCode 				; if clear, then we have two integers
.9b65	4c 91 ae	jmp $ae91			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b68					_StringData:
.9b68	4c 1d 9a	jmp $9a1d			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b6b					_IntegerCode:
.9b6b					AddCode:
.9b6b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b6e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b71	10 8b		bpl $9afe			bpl 	AddTopTwoStack
.9b73	20 24 9b	jsr $9b24			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b76	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b79	10 09		bpl $9b84			bpl 	_AddExit
.9b7b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b7e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b81	20 7c a4	jsr $a47c			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b84					_AddExit:
.9b84	60		rts				rts
.9b85					SubInteger:
.9b85	fa		plx				plx
.9b86	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b89	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b8c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b8d	0a		asl a				asl 	a
.9b8e	10 05		bpl $9b95			bpl 	_NotRef
.9b90	48		pha				pha
.9b91	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b94	68		pla				pla
.9b95					_NotRef:
.9b95	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b96	30 0b		bmi $9ba3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b98	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b9b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b9e	f0 06		beq $9ba6			beq 	_IntegerCode 				; if clear, then we have two integers
.9ba0	4c 96 ae	jmp $ae96			jmp 	FloatingPointSub 							; otherwise at least one float.
.9ba3					_StringData:
.9ba3	4c d4 b2	jmp $b2d4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9ba6					_IntegerCode:
.9ba6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9ba9	49 80		eor #$80			eor 	#$80
.9bab	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9bae	80 bb		bra $9b6b			bra 	AddCode 					; and do the same code as add.
.9bb0					AndInteger:
.9bb0	fa		plx				plx
.9bb1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bb4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bb7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bb8	0a		asl a				asl 	a
.9bb9	10 05		bpl $9bc0			bpl 	_NotRef
.9bbb	48		pha				pha
.9bbc	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bbf	68		pla				pla
.9bc0					_NotRef:
.9bc0	0a		asl a				asl 	a
.9bc1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bc3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bc6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bc9	f0 03		beq $9bce			beq 	_IntegerCode 				; if clear, then we have two integers
.9bcb	4c ca b2	jmp $b2ca			jmp 	TypeError 					; anything else, type mismatch.
.9bce					_IntegerCode:
.9bce	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bd1	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9bd4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bd7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bda	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9bdd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9be0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9be3	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9be6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9be9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bec	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9bef	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bf2	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9bf5	60		rts				rts
.9bf6					OraInteger:
.9bf6	fa		plx				plx
.9bf7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bfa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bfd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bfe	0a		asl a				asl 	a
.9bff	10 05		bpl $9c06			bpl 	_NotRef
.9c01	48		pha				pha
.9c02	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c05	68		pla				pla
.9c06					_NotRef:
.9c06	0a		asl a				asl 	a
.9c07	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c09	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c0c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c0f	f0 03		beq $9c14			beq 	_IntegerCode 				; if clear, then we have two integers
.9c11	4c ca b2	jmp $b2ca			jmp 	TypeError 					; anything else, type mismatch.
.9c14					_IntegerCode:
.9c14	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c17	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9c1a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c1d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c20	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c23	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c26	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c29	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9c2c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c2f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c32	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9c35	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c38	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c3b	60		rts				rts
.9c3c					EorInteger:
.9c3c	fa		plx				plx
.9c3d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c40	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c43	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c44	0a		asl a				asl 	a
.9c45	10 05		bpl $9c4c			bpl 	_NotRef
.9c47	48		pha				pha
.9c48	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c4b	68		pla				pla
.9c4c					_NotRef:
.9c4c	0a		asl a				asl 	a
.9c4d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c4f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c52	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c55	f0 03		beq $9c5a			beq 	_IntegerCode 				; if clear, then we have two integers
.9c57	4c ca b2	jmp $b2ca			jmp 	TypeError 					; anything else, type mismatch.
.9c5a					_IntegerCode:
.9c5a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c5d	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9c60	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c63	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c66	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9c69	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c6c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c6f	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9c72	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c75	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c78	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9c7b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c7e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c81	60		rts				rts
.9c82					WordIndirect:
.9c82	fa		plx				plx
.9c83	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c86	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c89	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c8a	0a		asl a				asl 	a
.9c8b	10 05		bpl $9c92			bpl 	_NotRef
.9c8d	48		pha				pha
.9c8e	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c91	68		pla				pla
.9c92					_NotRef:
.9c92	0a		asl a				asl 	a
.9c93	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c95	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c98	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c9b	f0 03		beq $9ca0			beq 	_IntegerCode 				; if clear, then we have two integers
.9c9d	4c ca b2	jmp $b2ca			jmp 	TypeError 					; anything else, type mismatch.
.9ca0					_IntegerCode:
.9ca0	20 6b 9b	jsr $9b6b			jsr 	AddCode 					; add the two values
.9ca3	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9ca5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ca8	60		rts				rts
.9ca9					ByteIndirect:
.9ca9	fa		plx				plx
.9caa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cad	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cb0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cb1	0a		asl a				asl 	a
.9cb2	10 05		bpl $9cb9			bpl 	_NotRef
.9cb4	48		pha				pha
.9cb5	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cb8	68		pla				pla
.9cb9					_NotRef:
.9cb9	0a		asl a				asl 	a
.9cba	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cbc	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cbf	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cc2	f0 03		beq $9cc7			beq 	_IntegerCode 				; if clear, then we have two integers
.9cc4	4c ca b2	jmp $b2ca			jmp 	TypeError 					; anything else, type mismatch.
.9cc7					_IntegerCode:
.9cc7	20 6b 9b	jsr $9b6b			jsr 	AddCode 					; add the two values
.9cca	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9ccc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ccf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ae36					ConvertInt16:
.ae36	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ae39	8e 10 04	stx $0410			stx 	NSMantissa1
.ae3c	9c 18 04	stz $0418			stz 	NSMantissa2
.ae3f	9c 20 04	stz $0420			stz 	NSMantissa3
.ae42	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ae45	a2 00		ldx #$00			ldx 	#0 							; stack level
.ae47	a9 0a		lda #$0a			lda 	#10 						; base
.ae49	80 00		bra $ae4b			bra 	ConvertInt32
.ae4b					ConvertInt32:
.ae4b	5a		phy				phy
.ae4c	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ae4e	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ae51	10 08		bpl $ae5b			bpl 	_CI32NotNeg
.ae53	48		pha				pha
.ae54	a9 2d		lda #$2d			lda 	#'-'
.ae56	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae59	c8		iny				iny
.ae5a	68		pla				pla
.ae5b					_CI32NotNeg:
.ae5b	20 69 ae	jsr $ae69			jsr 	_CI32DivideConvert 			; recursive conversion
.ae5e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ae60	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae63	7a		ply				ply
.ae64	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ae66	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ae68	60		rts				rts
.ae69					_CI32DivideConvert:
.ae69	e8		inx				inx 								; write to next slot up
.ae6a	20 c9 a4	jsr $a4c9			jsr 	NSMSetByte
.ae6d	ca		dex				dex
.ae6e	20 6b ad	jsr $ad6b			jsr 	Int32Divide 				; divide
.ae71	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ae74	48		pha				pha
.ae75	20 1a ad	jsr $ad1a			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ae78	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; is it zero ?
.ae7b	f0 06		beq $ae83			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.ae7d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.ae80	20 69 ae	jsr $ae69			jsr 	_CI32DivideConvert 			; and recusrively call.
.ae83					_CI32NoRecurse:
.ae83	68		pla				pla 								; remainder
.ae84	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.ae86	90 02		bcc $ae8a			bcc 	_CI32NotHex
.ae88	69 26		adc #$26			adc 	#6+32
.ae8a					_CI32NotHex:
.ae8a	69 30		adc #$30			adc 	#48
.ae8c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.ae8f	c8		iny				iny
.ae90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cd0					PrecedenceLevel:
>9cd0	04					.byte	 4	; $00 <<
>9cd1	02					.byte	 2	; $01 <=
>9cd2	02					.byte	 2	; $02 <>
>9cd3	00					.byte	 0	; $03 !!3
>9cd4	00					.byte	 0	; $04 ><
>9cd5	02					.byte	 2	; $05 >=
>9cd6	04					.byte	 4	; $06 >>
>9cd7	00					.byte	 0	; $07 !!7
>9cd8	00					.byte	 0	; $08 !!8
>9cd9	00					.byte	 0	; $09 !!9
>9cda	00					.byte	 0	; $0a !!10
>9cdb	00					.byte	 0	; $0b !!11
>9cdc	00					.byte	 0	; $0c !!12
>9cdd	00					.byte	 0	; $0d !!13
>9cde	00					.byte	 0	; $0e !!14
>9cdf	00					.byte	 0	; $0f !!15
>9ce0	00					.byte	 0	; $10 @
>9ce1	00					.byte	 0	; $11 !!17
>9ce2	00					.byte	 0	; $12 !!18
>9ce3	00					.byte	 0	; $13 [
>9ce4	04					.byte	 4	; $14 \
>9ce5	00					.byte	 0	; $15 ]
>9ce6	01					.byte	 1	; $16 ^
>9ce7	00					.byte	 0	; $17 _
>9ce8	00					.byte	 0	; $18 `
>9ce9	00					.byte	 0	; $19 !!25
>9cea	00					.byte	 0	; $1a !!26
>9ceb	00					.byte	 0	; $1b {
>9cec	01					.byte	 1	; $1c |
>9ced	00					.byte	 0	; $1d }
>9cee	00					.byte	 0	; $1e ~
>9cef	00					.byte	 0	; $1f [7m<7F>[m
>9cf0	00					.byte	 0	; $20
>9cf1	05					.byte	 5	; $21 !
>9cf2	00					.byte	 0	; $22 "
>9cf3	00					.byte	 0	; $23 #
>9cf4	05					.byte	 5	; $24 $
>9cf5	04					.byte	 4	; $25 %
>9cf6	01					.byte	 1	; $26 &
>9cf7	00					.byte	 0	; $27 '
>9cf8	00					.byte	 0	; $28 (
>9cf9	00					.byte	 0	; $29 )
>9cfa	04					.byte	 4	; $2a *
>9cfb	03					.byte	 3	; $2b +
>9cfc	00					.byte	 0	; $2c ,
>9cfd	03					.byte	 3	; $2d -
>9cfe	00					.byte	 0	; $2e .
>9cff	04					.byte	 4	; $2f /
>9d00	00					.byte	 0	; $30 0
>9d01	00					.byte	 0	; $31 1
>9d02	00					.byte	 0	; $32 2
>9d03	00					.byte	 0	; $33 3
>9d04	00					.byte	 0	; $34 4
>9d05	00					.byte	 0	; $35 5
>9d06	00					.byte	 0	; $36 6
>9d07	00					.byte	 0	; $37 7
>9d08	00					.byte	 0	; $38 8
>9d09	00					.byte	 0	; $39 9
>9d0a	00					.byte	 0	; $3a :
>9d0b	00					.byte	 0	; $3b ;
>9d0c	02					.byte	 2	; $3c <
>9d0d	02					.byte	 2	; $3d =
>9d0e	02					.byte	 2	; $3e >
>9d0f	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9d10					EvaluateExpressionAt0:
.9d10	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9d12					EvaluateExpression:
.9d12	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d14					EvaluateExpressionAtPrecedence:
.9d14	48		pha				pha 								; save precedence level
.9d15	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d18	68		pla				pla 								; restore precedence level.
.9d19					_EXPRLoop:
.9d19	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d1b	b1 30		lda ($30),y			lda 	(codePtr),y
.9d1d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d1f	b0 25		bcs $9d46			bcs 	_EXPRExit
.9d21	da		phx				phx 								; read the operator precedence
.9d22	aa		tax				tax
.9d23	bd d0 9c	lda $9cd0,x			lda 	PrecedenceLevel,x
.9d26	fa		plx				plx
.9d27	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d29	f0 1b		beq $9d46			beq 	_EXPRExit
.9d2b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d2d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d2f	c5 37		cmp $37				cmp 	zTemp0+1
.9d31	b0 13		bcs $9d46			bcs		_EXPRExit 					; if current >= operator exit
.9d33	48		pha				pha 								; save current precedence.
.9d34	b1 30		lda ($30),y			lda 	(codePtr),y
.9d36	c8		iny				iny
.9d37	48		pha				pha
.9d38	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d3a	e8		inx				inx 								; work out the right hand side.
.9d3b	20 14 9d	jsr $9d14			jsr 	EvaluateExpressionAtPrecedence
.9d3e	ca		dex				dex
.9d3f	68		pla				pla 								; get operator, call the code.
.9d40	20 49 9d	jsr $9d49			jsr 	_EXPRCaller
.9d43	68		pla				pla 								; restore precedence level
.9d44	80 d3		bra $9d19			bra 	_EXPRLoop 					; and go round.
.9d46					_EXPRExit:
.9d46	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d48	60		rts				rts
.9d49					_EXPRCaller:
.9d49	da		phx				phx 								; save on stack, first thing is to restore it
.9d4a	0a		asl a				asl 	a 							; double so can use vectors into X
.9d4b	aa		tax				tax
.9d4c	7c 0a 95	jmp ($950a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.ae91					FloatingPointAdd:
.ae91	20 32 b0	jsr $b032			jsr 	FloatPrepare 				; prepare for floats
.ae94	80 0b		bra $aea1			bra 	FloatAdd
.ae96					FloatingPointSub:
.ae96	20 32 b0	jsr $b032			jsr 	FloatPrepare 				; prepare for floats
.ae99					FloatSubtract:
.ae99	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.ae9c	49 80		eor #$80			eor 	#$80
.ae9e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.aea1					FloatAdd:
.aea1	48		pha				pha
.aea2	5a		phy				phy
.aea3	20 43 b0	jsr $b043			jsr 	NSNormalise 				; normalise S[X]
.aea6	f0 54		beq $aefc			beq 	_FAReturn1
.aea8	e8		inx				inx 								; normalise S[X+1]
.aea9	20 43 b0	jsr $b043			jsr 	NSNormalise
.aeac	ca		dex				dex
.aead	c9 00		cmp #$00			cmp 	#0
.aeaf	f0 6f		beq $af20			beq 	_FAExit 					; if so, just return A
.aeb1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.aeb4	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.aeb7	f0 1b		beq $aed4			beq 	_FAExponentsEqual
.aeb9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.aebc	a8		tay				tay
.aebd	38		sec				sec 								; do a signed comparison of the exponents.
.aebe	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aec1	50 02		bvc $aec5			bvc 	_FANoSignedChange
.aec3	49 80		eor #$80			eor 	#$80
.aec5					_FANoSignedChange:
.aec5	29 80		and #$80			and 	#$80
.aec7	10 03		bpl $aecc			bpl 	_FAHaveMax
.aec9	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.aecc					_FAHaveMax:
.aecc	20 23 af	jsr $af23			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.aecf	e8		inx				inx
.aed0	20 23 af	jsr $af23			jsr 	_FAShiftToExponent
.aed3	ca		dex				dex
.aed4					_FAExponentsEqual:
.aed4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.aed7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aeda	30 10		bmi $aeec			bmi 	_FADifferentSigns
.aedc	20 fe 9a	jsr $9afe			jsr 	AddTopTwoStack 				; do the add of the mantissae
.aedf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.aee2	10 3c		bpl $af20			bpl 	_FAExit 					; if no, we are done.
.aee4	20 ea a4	jsr $a4ea			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.aee7	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.aeea	80 34		bra $af20			bra 	_FAExit
.aeec					_FADifferentSigns:
.aeec	20 24 9b	jsr $9b24			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.aeef	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.aef2	10 2c		bpl $af20			bpl 	_FAExit 					; if no, we are done.
.aef4	20 73 a4	jsr $a473			jsr 	NSMNegate 					; netate result
.aef7	20 7c a4	jsr $a47c			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.aefa	80 24		bra $af20			bra 	_FAExit
.aefc					_FAReturn1:
.aefc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.aeff	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af02	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.af05	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af08	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.af0b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af0e	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.af11	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af14	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.af17	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af1a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.af1d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af20					_FAExit:
.af20	7a		ply				ply
.af21	68		pla				pla
.af22	60		rts				rts
.af23					_FAShiftToExponent:
.af23					_FAShiftToExponent2:
.af23	98		tya				tya 								; compare Y to exponent
.af24	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.af27	f0 08		beq $af31			beq 	_FASEExit 					; exit if so.
.af29	20 ea a4	jsr $a4ea			jsr 	NSMShiftRight	 			; shift the mantissa right
.af2c	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.af2f	80 f2		bra $af23			bra 	_FAShiftToExponent2
.af31					_FASEExit:
.af31	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.af32					CompareFloat:
.af32	20 99 ae	jsr $ae99			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.af35	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.af38	29 f8		and #$f8			and 	#$F8
.af3a	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.af3d	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.af40	f0 09		beq $af4b			beq 	_FCExit 					; zero, so approximately identical
.af42	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.af44	3c 00 04	bit $0400,x			bit 	NSStatus,x
.af47	10 02		bpl $af4b			bpl 	_FCExit
.af49					_FCNegative:
.af49	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.af4b					_FCExit:
.af4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.af4c					FDivideCommand:
.af4c	fa		plx				plx	 								; restore stack position
.af4d	20 32 b0	jsr $b032			jsr 	FloatPrepare 				; prepare for floats
.af50					FloatDivide:
.af50	48		pha				pha
.af51	e8		inx				inx
.af52	20 43 b0	jsr $b043			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.af55	ca		dex				dex
.af56	c9 00		cmp #$00			cmp 	#0
.af58	f0 20		beq $af7a			beq 	_FDZero
.af5a	20 43 b0	jsr $b043			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.af5d	f0 19		beq $af78			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.af5f	20 8d ad	jsr $ad8d			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.af62	20 1a ad	jsr $ad1a			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.af65	20 43 b0	jsr $b043			jsr		NSNormalise 				; renormalise
.af68	20 28 ae	jsr $ae28			jsr 	CalculateSign 				; calculate result sign
.af6b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.af6e	38		sec				sec
.af6f	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af72	38		sec				sec
.af73	e9 1e		sbc #$1e			sbc 	#30
.af75	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af78					_FDExit:
.af78	68		pla				pla
.af79	60		rts				rts
.af7a					_FDZero:
.af7a	a9 03		lda #$03		lda	#3
.af7c	4c 09 99	jmp $9909		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.af7f					FloatFractionalPart:
.af7f	5a		phy				phy
.af80	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.af83	29 7f		and #$7f			and 	#$7F
.af85	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af88	20 43 b0	jsr $b043			jsr 	NSNormalise
.af8b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.af8e	38		sec				sec
.af8f	e9 e0		sbc #$e0			sbc 	#$E0
.af91	90 31		bcc $afc4			bcc 	_FFPExit 					; already fractional
.af93	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.af95	b0 2a		bcs $afc1			bcs 	_FFPZero
.af97	a8		tay				tay 								; put count to do in Y
.af98	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.af9b	20 c6 af	jsr $afc6			jsr 	_FFPPartial
.af9e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afa1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.afa4	20 c6 af	jsr $afc6			jsr 	_FFPPartial
.afa7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afaa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.afad	20 c6 af	jsr $afc6			jsr 	_FFPPartial
.afb0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afb3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.afb6	20 c6 af	jsr $afc6			jsr 	_FFPPartial
.afb9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afbc	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; zeroed check.
.afbf	d0 03		bne $afc4			bne 	_FFPExit
.afc1					_FFPZero:
.afc1	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero
.afc4					_FFPExit:
.afc4	7a		ply				ply
.afc5	60		rts				rts
.afc6					_FFPPartial:
.afc6	c0 00		cpy #$00			cpy 	#0 							; no more to do
.afc8	f0 17		beq $afe1			beq 	_FFFPPExit
.afca	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.afcc	b0 0c		bcs $afda			bcs 	_FFFPPWholeByte
.afce	5a		phy				phy
.afcf					_FFFPPLeft:
.afcf	0a		asl a				asl 	a
.afd0	88		dey				dey
.afd1	d0 fc		bne $afcf			bne 	_FFFPPLeft
.afd3	7a		ply				ply
.afd4					_FFFPPRight:
.afd4	4a		lsr a				lsr 	a
.afd5	88		dey				dey
.afd6	d0 fc		bne $afd4			bne 	_FFFPPRight
.afd8	80 07		bra $afe1			bra 	_FFFPPExit
.afda					_FFFPPWholeByte:
.afda	98		tya				tya 								; subtract 8 from count
.afdb	38		sec				sec
.afdc	e9 08		sbc #$08			sbc 	#8
.afde	a8		tay				tay
.afdf	a9 00		lda #$00			lda 	#0 							; and clear all
.afe1					_FFFPPExit:
.afe1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.afe2					FloatIntegerPart:
.afe2	48		pha				pha
.afe3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.afe6	f0 1f		beq $b007			beq 	_FIPExit 					; if so do nothing
.afe8	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; is it zero ?
.afeb	f0 17		beq $b004			beq 	_FIPZero 					; if so return zero.
.afed	20 43 b0	jsr $b043			jsr 	NSNormalise 				; normalise
.aff0	f0 12		beq $b004			beq 	_FIPZero 					; normalised to zero, exit zero
.aff2					_FIPShift:
.aff2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.aff5	10 08		bpl $afff			bpl 	_FIPCheckZero
.aff7	20 ea a4	jsr $a4ea			jsr 	NSMShiftRight 				; shift mantissa right
.affa	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.affd	80 f3		bra $aff2			bra 	_FIPShift
.afff					_FIPCheckZero:
.afff	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; avoid -0 problem
.b002	d0 03		bne $b007			bne 	_FIPExit 					; set to zero if mantissa zero.
.b004					_FIPZero:
.b004	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero
.b007					_FIPExit:
.b007	68		pla				pla
.b008	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b009					FloatingPointMultiply:
.b009	20 32 b0	jsr $b032			jsr 	FloatPrepare 				; prepare for floats
.b00c					FloatMultiply:
.b00c	48		pha				pha
.b00d	20 43 b0	jsr $b043			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b010	f0 1b		beq $b02d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b012	e8		inx				inx
.b013	20 43 b0	jsr $b043			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b016	ca		dex				dex
.b017	c9 00		cmp #$00			cmp 	#0
.b019	f0 0f		beq $b02a			beq 	_FDSetZero
.b01b	20 e3 ad	jsr $ade3			jsr 	MultiplyShort 				; calculate the result.
.b01e	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b021	18		clc				clc
.b022	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b025	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b028	80 03		bra $b02d			bra 	_FDExit
.b02a					_FDSetZero:
.b02a	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero 					; return 0
.b02d					_FDExit:
.b02d	20 43 b0	jsr $b043			jsr 	NSNormalise 				; normalise the result
.b030	68		pla				pla
.b031	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b032					FloatPrepare:
.b032	20 22 9e	jsr $9e22			jsr 	DereferenceTopTwo 			; dereference the top two values
.b035	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b038	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b03b	29 10		and #$10			and 	#NSBIsString
.b03d	d0 01		bne $b040			bne 	_FDType
.b03f	60		rts				rts
.b040					_FDType:
.b040	4c ca b2	jmp $b2ca			jmp 	TypeError
.b043					NSNormalise:
.b043	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b046	29 80		and #$80			and 	#$80
.b048	09 08		ora #$08			ora 	#NSTFloat
.b04a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b04d	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; if zero exit
.b050	d0 09		bne $b05b			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b052	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b055	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b058	a9 00		lda #$00			lda 	#0 							; set Z flag
.b05a	60		rts				rts
.b05b					_NSNormaliseOptimise:
.b05b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b05e	d0 22		bne $b082			bne 	_NSNormaliseLoop
.b060	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b063	30 1d		bmi $b082			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b065	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b068	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b06b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b06e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b071	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b074	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b077	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b07a	38		sec				sec
.b07b	e9 08		sbc #$08			sbc 	#8
.b07d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b080	80 d9		bra $b05b			bra 	_NSNormaliseOptimise
.b082					_NSNormaliseLoop:
.b082	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b085	70 08		bvs $b08f			bvs 	_NSNExit 					; exit if so with Z flag clear
.b087	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; shift mantissa left
.b08a	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b08d	80 f3		bra $b082			bra 	_NSNormaliseLoop
.b08f					_NSNExit:
.b08f	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b091	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d4f					AssignNumber:
.9d4f	5a		phy				phy
.9d50	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d53	85 36		sta $36				sta 	zTemp0
.9d55	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d58	85 37		sta $37				sta 	zTemp0+1
.9d5a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9d5d	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d5f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d62	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d64	c9 08		cmp #$08			cmp 	#NSTFloat
.9d66	f0 2a		beq $9d92			beq 	_ANFloat
.9d68	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9d6b	f0 05		beq $9d72			beq		_ANNotFloat
.9d6d	e8		inx				inx
.9d6e	20 e2 af	jsr $afe2			jsr 	FloatIntegerPart 			; make it an integer
.9d71	ca		dex				dex
.9d72					_ANNotFloat:
.9d72	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d75	29 03		and #$03			and 	#3
.9d77	d0 05		bne $9d7e			bne 	_ANByteWord
.9d79	20 9e 9d	jsr $9d9e			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d7c	80 1e		bra $9d9c			bra 	_ANExit
.9d7e					_ANByteWord:
.9d7e	48		pha				pha 								; save count
.9d7f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9d82	92 36		sta ($36)			sta 	(zTemp0)
.9d84	68		pla				pla
.9d85	c9 01		cmp #$01			cmp	 	#1
.9d87	f0 13		beq $9d9c			beq 	_ANExit
.9d89	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9d8c	a0 01		ldy #$01			ldy 	#1
.9d8e	91 36		sta ($36),y			sta 	(zTemp0),y
.9d90	80 0a		bra $9d9c			bra 	_ANExit
.9d92					_ANFloat:
.9d92	20 9e 9d	jsr $9d9e			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d95	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d98	a0 04		ldy #$04			ldy 	#4
.9d9a	91 36		sta ($36),y			sta 	(zTemp0),y
.9d9c					_ANExit:
.9d9c	7a		ply				ply
.9d9d	60		rts				rts
.9d9e					_ANCopy4PackSign:
.9d9e	a0 03		ldy #$03			ldy 	#3
.9da0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9da3	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9da5	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9da8	91 36		sta ($36),y			sta 	(zTemp0),y
.9daa	88		dey				dey
.9dab	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9dae	91 36		sta ($36),y			sta 	(zTemp0),y
.9db0	88		dey				dey
.9db1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9db4	91 36		sta ($36),y			sta 	(zTemp0),y
.9db6	88		dey				dey
.9db7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dba	91 36		sta ($36),y			sta 	(zTemp0),y
.9dbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9dbd					AssignString:
.9dbd	5a		phy				phy
.9dbe	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dc1	85 38		sta $38				sta 	zTemp1
.9dc3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9dc6	85 39		sta $39				sta 	zTemp1+1
.9dc8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dcb	85 36		sta $36				sta 	zTemp0
.9dcd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dd0	85 37		sta $37				sta 	zTemp0+1
.9dd2	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9dd4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dd6	f0 23		beq $9dfb			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dd8	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9dd9	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9ddb	e9 02		sbc #$02			sbc 	#2
.9ddd	85 3c		sta $3c				sta 	zsTemp
.9ddf	a0 01		ldy #$01			ldy 	#1
.9de1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9de3	e9 00		sbc #$00			sbc 	#0
.9de5	85 3d		sta $3d				sta 	zsTemp+1
.9de7	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9de9					_ASGetLength:
.9de9	c8		iny				iny
.9dea	b1 38		lda ($38),y			lda 	(zTemp1),y
.9dec	d0 fb		bne $9de9			bne 	_ASGetLength
.9dee	98		tya				tya 								; is this length <= current length
.9def	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9df1	90 20		bcc $9e13			bcc 	_ASCopyString
.9df3	f0 1e		beq $9e13			beq 	_ASCopyString
.9df5	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9df7	a0 01		ldy #$01			ldy 	#1
.9df9	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9dfb					_ASNewStringRequired:
.9dfb	e8		inx				inx 								; concrete the new string.
.9dfc	20 78 b5	jsr $b578			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9dff	ca		dex				dex
.9e00	18		clc				clc
.9e01	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e04	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e06	92 36		sta ($36)			sta 	(zTemp0)
.9e08	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e0b	69 00		adc #$00			adc 	#0
.9e0d	a0 01		ldy #$01			ldy 	#1
.9e0f	91 36		sta ($36),y			sta 	(zTemp0),y
.9e11	80 0d		bra $9e20			bra 	_ASExit
.9e13					_ASCopyString:
.9e13	a0 00		ldy #$00			ldy 	#0
.9e15					_ASCopyLoop:
.9e15	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e17	c8		iny				iny
.9e18	c8		iny				iny
.9e19	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e1b	88		dey				dey
.9e1c	c9 00		cmp #$00			cmp 	#0
.9e1e	d0 f5		bne $9e15			bne 	_ASCopyLoop
.9e20					_ASExit:
.9e20	7a		ply				ply
.9e21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e22					DereferenceTopTwo:
.9e22	e8		inx				inx
.9e23	20 27 9e	jsr $9e27			jsr 	Dereference 				; deref x+1
.9e26	ca		dex				dex  								; falls through to deref x
.9e27					Dereference:
.9e27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9e2a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9e2c	f0 57		beq $9e85			beq 	_DRFExit 					; not a reference
.9e2e	5a		phy				phy
.9e2f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e32	85 36		sta $36				sta 	zTemp0
.9e34	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e37	85 37		sta $37				sta 	zTemp0+1
.9e39	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9e3c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e3e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9e44	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e46	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e48	f0 0f		beq $9e59			beq 	_DRFDereferenceTwo
.9e4a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e4c	f0 39		beq $9e87			beq 	_DRFFull
.9e4e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e51	29 03		and #$03			and 	#3
.9e53	f0 32		beq $9e87			beq 	_DRFFull 					; the whole word
.9e55	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e57	f0 07		beq $9e60			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e59					_DRFDereferenceTwo:
.9e59	a0 01		ldy #$01			ldy 	#1
.9e5b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e5d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e60					_DRFClear23:
.9e60	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e63	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e66	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9e69	29 18		and #$18			and 	#NSBTypeMask
.9e6b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e6e	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e70	d0 12		bne $9e84			bne 	_DRFNotString
.9e72	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9e75	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e78	d0 0a		bne $9e84			bne 	_DRFNotString
.9e7a	a9 86		lda #$86			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e7c	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9e7f	a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e81	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9e84					_DRFNotString
.9e84	7a		ply				ply 								; restore Y and exit
.9e85					_DRFExit:
.9e85	60		rts				rts
.9e86					_DRFNullString:
>9e86	00						.byte 	0
.9e87					_DRFFull:
.9e87	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e89	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e8b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e8e	c8		iny				iny
.9e8f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e91	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e94	c8		iny				iny
.9e95	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e97	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e9a	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9e9d	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9ea0	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9ea2	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9ea5	f0 06		beq $9ead			beq 	_DRFNoExponent
.9ea7	c8		iny				iny 								; if not, read the exponent as well.
.9ea8	b1 36		lda ($36),y			lda 	(zTemp0),y
.9eaa	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9ead					_DRFNoExponent:
.9ead	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9eb0	10 0d		bpl $9ebf			bpl 	_DRFExit2 					; if not, then exit.
.9eb2	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9eb4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9eb7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9eba	09 80		ora #$80			ora 	#NSBIsNegative
.9ebc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ebf					_DRFExit2:
.9ebf	7a		ply				ply
.9ec0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9ec1					EncodeNumberStart:
.9ec1	38		sec				sec
.9ec2	80 01		bra $9ec5			bra 	EncodeNumberContinue+1
.9ec4					EncodeNumberContinue:
.9ec4	18		clc				clc
.9ec5					EncodeNumber:
.9ec5	08		php				php 								; save reset.
.9ec6	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9ec8	f0 12		beq $9edc			beq 	_ENIsOkay
.9eca	c9 30		cmp #$30			cmp 	#"0"
.9ecc	90 04		bcc $9ed2			bcc 	_ENBadNumber
.9ece	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ed0	90 0a		bcc $9edc			bcc 	_ENIsOkay
.9ed2					_ENBadNumber:
.9ed2	28		plp				plp 								; throw saved reset
.9ed3	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9ed6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ed8	f0 7e		beq $9f58			beq 	_ENConstructFinal
.9eda					_ENFail:
.9eda	18		clc				clc 								; not allowed
.9edb	60		rts				rts
.9edc					_ENIsOkay:
.9edc	28		plp				plp 								; are we restarting
.9edd	90 15		bcc $9ef4			bcc 	_ENNoRestart
.9edf					_ENStartEncode:
.9edf	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9ee1	f0 0c		beq $9eef			beq 	_ENFirstDP
.9ee3	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ee5	20 c9 a4	jsr $a4c9			jsr 	NSMSetByte
.9ee8	a9 01		lda #$01			lda 	#ESTA_Low
.9eea					_ENExitChange:
.9eea	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9eed	38		sec				sec
.9eee	60		rts				rts
.9eef					_ENFirstDP:
.9eef	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero 					; clear integer part
.9ef2	80 3f		bra $9f33			bra 	_ESTASwitchFloat			; go straight to float and exi
.9ef4					_ENNoRestart:
.9ef4	48		pha				pha 								; save on stack.
.9ef5	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9ef8	c9 01		cmp #$01			cmp 	#ESTA_Low
.9efa	f0 09		beq $9f05			beq  	_ESTALowState
.9efc	c9 02		cmp #$02			cmp 	#ESTA_High
.9efe	f0 29		beq $9f29			beq 	_ESTAHighState
.9f00	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f02	f0 3b		beq $9f3f			beq 	_ESTADecimalState
>9f04	db						.byte 	$DB 						; causes a break in the emulator
.9f05					_ESTALowState:
.9f05	68		pla				pla 								; get value back
.9f06	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9f08	f0 29		beq $9f33			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f0a	29 0f		and #$0f			and 	#15 						; make digit
.9f0c	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9f0f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9f12	0a		asl a				asl 	a
.9f13	0a		asl a				asl 	a
.9f14	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f17	0a		asl a				asl 	a
.9f18	6d 86 04	adc $0486			adc 	DigitTemp
.9f1b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f1e	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f20	90 05		bcc $9f27			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f22	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f24	8d 85 04	sta $0485			sta 	EncodeState
.9f27					_ESTANoSwitch:
.9f27	38		sec				sec
.9f28	60		rts				rts
.9f29					_ESTAHighState:
.9f29	68		pla				pla 								; get value back
.9f2a	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f2c	f0 05		beq $9f33			beq 	_ESTASwitchFloat
.9f2e	20 92 9f	jsr $9f92			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f31	38		sec				sec
.9f32	60		rts				rts
.9f33					_ESTASwitchFloat:
.9f33	9c 87 04	stz $0487			stz 	DecimalCount
.9f36	e8		inx				inx 								; zero the decimal additive.
.9f37	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero
.9f3a	ca		dex				dex
.9f3b	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f3d	80 ab		bra $9eea			bra 	_ENExitChange
.9f3f					_ESTADecimalState:
.9f3f	68		pla				pla 								; digit.
.9f40	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f42	f0 96		beq $9eda			beq 	_ENFail
.9f44	e8		inx				inx 								; put digit into fractional part of X+1
.9f45	20 92 9f	jsr $9f92			jsr 	ESTAShiftDigitIntoMantissa
.9f48	ca		dex				dex
.9f49	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9f4c	ad 87 04	lda $0487			lda 	DecimalCount
.9f4f	c9 0b		cmp #$0b			cmp 	#11
.9f51	f0 02		beq $9f55			beq 	_ESTADSFail
.9f53	38		sec				sec
.9f54	60		rts				rts
.9f55					_ESTADSFail:
.9f55	4c c5 b2	jmp $b2c5			jmp 	RangeError
.9f58					_ENConstructFinal:
.9f58	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9f5b	f0 33		beq $9f90			beq 	_ENCFExit 					; no decimals
.9f5d	5a		phy				phy
.9f5e	0a		asl a				asl 	a 							; x 4 and CLC
.9f5f	0a		asl a				asl 	a
.9f60	6d 87 04	adc $0487			adc 	DecimalCount
.9f63	a8		tay				tay
.9f64	b9 84 b2	lda $b284,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f67	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f6a	b9 85 b2	lda $b285,y			lda 	DecimalScalarTable-5+1,y
.9f6d	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f70	b9 86 b2	lda $b286,y			lda 	DecimalScalarTable-5+2,y
.9f73	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f76	b9 87 b2	lda $b287,y			lda 	DecimalScalarTable-5+3,y
.9f79	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f7c	b9 88 b2	lda $b288,y			lda 	DecimalScalarTable-5+4,y
.9f7f	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f82	a9 08		lda #$08			lda 	#NSTFloat
.9f84	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f87	7a		ply				ply
.9f88	e8		inx				inx 								; multiply decimal const by decimal scalar
.9f89	20 0c b0	jsr $b00c			jsr 	FloatMultiply
.9f8c	ca		dex				dex
.9f8d	20 a1 ae	jsr $aea1			jsr 	FloatAdd 					; add to integer part.
.9f90					_ENCFExit:
.9f90	18		clc				clc 								; reject the digit.
.9f91	60		rts				rts
.9f92					ESTAShiftDigitIntoMantissa:
.9f92	29 0f		and #$0f			and 	#15 						; save digit
.9f94	48		pha				pha
.9f95	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f98	48		pha				pha
.9f99	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f9c	48		pha				pha
.9f9d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fa0	48		pha				pha
.9fa1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fa4	48		pha				pha
.9fa5	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; x 2
.9fa8	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; x 4
.9fab	18		clc				clc 								; pop mantissa and add
.9fac	68		pla				pla
.9fad	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fb0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fb3	68		pla				pla
.9fb4	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9fb7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fba	68		pla				pla
.9fbb	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9fbe	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fc1	68		pla				pla
.9fc2	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9fc5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9fc8	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; x 10
.9fcb	68		pla				pla 								; add digit
.9fcc	18		clc				clc
.9fcd	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fd0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fd3	90 0d		bcc $9fe2			bcc 	_ESTASDExit
.9fd5	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9fd8	d0 08		bne $9fe2			bne 	_ESTASDExit
.9fda	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9fdd	d0 03		bne $9fe2			bne 	_ESTASDExit
.9fdf	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9fe2					_ESTASDExit:
.9fe2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fe3					EvaluateTerm:
.9fe3	b1 30		lda ($30),y			lda 	(codePtr),y
.9fe5	30 18		bmi $9fff			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fe7	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fe9	b0 6f		bcs $a05a			bcs 	_ETVariable
.9feb	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fed	90 6e		bcc $a05d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fef	c9 3a		cmp #$3a			cmp 	#'9'+1
.9ff1	b0 6a		bcs $a05d			bcs 	_ETPuncUnary
.9ff3	20 c1 9e	jsr $9ec1			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9ff6					_ETNumber:
.9ff6	c8		iny				iny 								; keep encoding until we have the numbers
.9ff7	b1 30		lda ($30),y			lda 	(codePtr),y
.9ff9	20 c4 9e	jsr $9ec4			jsr 	EncodeNumberContinue
.9ffc	b0 f8		bcs $9ff6			bcs 	_ETNumber 					; go back if accepted.
.9ffe	60		rts				rts
.9fff					_ETCheckUnary:
.9fff	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a001	f0 41		beq $a044			beq 	_ETString
.a003	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a005	f0 12		beq $a019			beq 	_ETHexConstant
.a007	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a009	90 0b		bcc $a016			bcc 	_ETSyntaxError
.a00b	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.a00d	b0 07		bcs $a016			bcs 	_ETSyntaxError
.a00f	da		phx				phx 								; push X on the stack
.a010	0a		asl a				asl 	a 							; put vector x 2 into X
.a011	aa		tax				tax
.a012	c8		iny				iny 								; consume unary function token
.a013	7c 8a 95	jmp ($958a,x)			jmp 	(VectorSet0,x) 				; and do it.
.a016					_ETSyntaxError:
.a016	4c c0 b2	jmp $b2c0			jmp 	SyntaxError
.a019					_ETHexConstant:
.a019	c8		iny				iny 								; skip #
.a01a	c8		iny				iny 								; skip count
.a01b	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero 					; clear result
.a01e					_ETHLoop:
.a01e	b1 30		lda ($30),y			lda 	(codePtr),y
.a020	c8		iny				iny 								; and consume
.a021	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a023	f0 1e		beq $a043			beq 	_ETHExit
.a025	48		pha				pha 								; save on stack.
.a026	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; x 2
.a029	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; x 4
.a02c	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; x 8
.a02f	20 dc a4	jsr $a4dc			jsr 	NSMShiftLeft 				; x 16
.a032	68		pla				pla 								; ASCII
.a033	c9 41		cmp #$41			cmp 	#'A'
.a035	90 02		bcc $a039			bcc 	_ETHNotChar
.a037	e9 07		sbc #$07			sbc 	#7
.a039					_ETHNotChar:
.a039	29 0f		and #$0f			and 	#15 						; digit now
.a03b	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a03e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a041	80 db		bra $a01e			bra 	_ETHLoop 					; go round.
.a043					_ETHExit:
.a043	60		rts				rts
.a044					_ETString:
.a044	c8		iny				iny 								; look at length
.a045	b1 30		lda ($30),y			lda 	(codePtr),y
.a047	48		pha				pha
.a048	c8		iny				iny 								; first character
.a049	20 11 a5	jsr $a511			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a04c	68		pla				pla 								; restore count and save
.a04d	85 36		sta $36				sta 	zTemp0
.a04f	98		tya				tya 								; add length to Y to skip it.
.a050	18		clc				clc
.a051	65 36		adc $36				adc 	zTemp0
.a053	a8		tay				tay
.a054	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a056	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a059	60		rts				rts
.a05a					_ETVariable:
.a05a	4c b4 a0	jmp $a0b4			jmp 	VariableHandler
.a05d					_ETPuncUnary:
.a05d	c8		iny				iny 								; consume the unary character
.a05e	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a060	f0 2d		beq $a08f			beq 	_ETUnaryNegate
.a062	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a064	f0 39		beq $a09f			beq 	_ETDereference
.a066	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a068	f0 43		beq $a0ad			beq 	_ETParenthesis
.a06a	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a06c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a06e	f0 06		beq $a076			beq 	_ETIndirection
.a070	e6 36		inc $36				inc 	zTemp0
.a072	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a074	d0 a0		bne $a016			bne 	_ETSyntaxError
.a076					_ETIndirection:
.a076	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a078	1a		inc a				inc 	a
.a079	48		pha				pha
.a07a	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm				; evaluate the term
.a07d	20 27 9e	jsr $9e27			jsr 	Dereference 				; dereference it.
.a080	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a083	d0 07		bne $a08c			bne 	_ETTypeMismatch
.a085	68		pla				pla 								; indirection 1-2
.a086	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a088	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a08b	60		rts				rts
.a08c					_ETTypeMismatch:
.a08c	4c ca b2	jmp $b2ca			jmp 	TypeError
.a08f					_ETUnaryNegate:
.a08f	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm				; evaluate the term
.a092	20 27 9e	jsr $9e27			jsr 	Dereference 				; dereference it.
.a095	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a098	29 10		and #$10			and 	#NSTString
.a09a	d0 f0		bne $a08c			bne 	_ETTypeMismatch
.a09c	4c 73 a4	jmp $a473			jmp 	NSMNegate  					; just toggles the sign bit.
.a09f					_ETDereference:
.a09f	20 e3 9f	jsr $9fe3			jsr 	EvaluateTerm				; evaluate the term
.a0a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a0a5	29 20		and #$20			and 	#NSBIsReference
.a0a7	f0 e3		beq $a08c			beq 	_ETTypeMismatch
.a0a9	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a0ac	60		rts				rts
.a0ad					_ETParenthesis:
.a0ad	20 12 9d	jsr $9d12			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a0b0	20 da ac	jsr $acda			jsr 	CheckRightBracket 			; check for )
.a0b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a0b4					VariableHandler:
.a0b4	b1 30		lda ($30),y			lda 	(codePtr),y
.a0b6	18		clc				clc
.a0b7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a0b9	85 37		sta $37				sta 	zTemp0+1
.a0bb	c8		iny				iny
.a0bc	b1 30		lda ($30),y			lda 	(codePtr),y
.a0be	85 36		sta $36				sta 	zTemp0
.a0c0	c8		iny				iny
.a0c1	18		clc				clc									; copy variable address+3 to mantissa
.a0c2	69 03		adc #$03			adc 	#3
.a0c4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0c7	a5 37		lda $37				lda 	zTemp0+1
.a0c9	69 00		adc #$00			adc 	#0
.a0cb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0ce	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0d1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0d4	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a0d7	5a		phy				phy
.a0d8	a0 02		ldy #$02			ldy 	#2 							; read type
.a0da	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0dc	7a		ply				ply
.a0dd	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0df	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0e1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0e4	29 04		and #$04			and 	#NSBIsArray
.a0e6	d0 01		bne $a0e9			bne 	_VHArray
.a0e8	60		rts				rts
.a0e9					_VHArray:
.a0e9	e8		inx				inx
.a0ea	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0ed	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0ef	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a0f2	b1 30		lda ($30),y			lda 	(codePtr),y
.a0f4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0f6	d0 06		bne $a0fe			bne 	_VHNoSecondIndex
.a0f8	c8		iny				iny 								; skip the comma
.a0f9	e8		inx				inx
.a0fa	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0fd	ca		dex				dex
.a0fe					_VHNoSecondIndex:
.a0fe	ca		dex				dex 								; set X back.
.a0ff	20 da ac	jsr $acda			jsr 	CheckRightBracket 			; and check the right bracket.
.a102	5a		phy				phy 								; save position
.a103	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a106	85 3e		sta $3e				sta 	zaTemp
.a108	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a10b	85 3f		sta $3f				sta 	zaTemp+1
.a10d	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a10f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a111	f0 02		beq $a115			beq 	_VHHas2Mask
.a113	a9 ff		lda #$ff			lda 	#$FF
.a115					_VHHas2Mask:
.a115	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a118	f0 54		beq $a16e			beq 	_VHBadIndex
.a11a	0a		asl a				asl 	a 							; carry will be set if a second index
.a11b	90 09		bcc $a126			bcc 	_VHCheckFirstIndex
.a11d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a11f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a121	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a124	90 48		bcc $a16e			bcc 	_VHBadIndex
.a126					_VHCheckFirstIndex:
.a126	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a128	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a12a	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a12d	90 3f		bcc $a16e			bcc 	_VHBadIndex
.a12f	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a131	64 37		stz $37				stz 	zTemp0+1
.a133	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a136	30 0f		bmi $a147			bmi 	_VHNoMultiply
.a138	da		phx				phx
.a139	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a13c	48		pha				pha
.a13d	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a13f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a141	1a		inc a				inc 	a 							; add 1 for zero base
.a142	fa		plx				plx
.a143	20 5c b1	jsr $b15c			jsr 	Multiply8x8 				; calculate -> Z0
.a146	fa		plx				plx
.a147					_VHNoMultiply:
.a147	18		clc				clc
.a148	a5 36		lda $36				lda 	zTemp0
.a14a	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a14d	85 36		sta $36				sta 	zTemp0
.a14f	a5 37		lda $37				lda 	zTemp0+1
.a151	69 00		adc #$00			adc 	#0
.a153	85 37		sta $37				sta 	zTemp0+1
.a155	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a158	20 9c 8d	jsr $8d9c			jsr 	ScaleByBaseType
.a15b	18		clc				clc
.a15c	b2 3e		lda ($3e)			lda 	(zaTemp)
.a15e	65 36		adc $36				adc 	zTemp0
.a160	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a163	a0 01		ldy #$01			ldy 	#1
.a165	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a167	65 37		adc $37				adc 	zTemp0+1
.a169	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a16c	7a		ply				ply 								; restore position
.a16d	60		rts				rts
.a16e					_VHBadIndex:
.a16e	a9 17		lda #$17		lda	#23
.a170	4c 09 99	jmp $9909		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b092					AbsUnary:
.b092	fa		plx				plx 								; restore stack pos
.b093	20 1b a4	jsr $a41b			jsr 	EvaluateNumber 				; get a float or int
.b096	20 da ac	jsr $acda			jsr 	CheckRightBracket
.b099	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b09c	29 7f		and #$7f			and 	#$7F
.b09e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a173					AllocUnary:
.a173	fa		plx				plx 								; restore stack pos
.a174	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger		; get bytes required.
.a177	20 da ac	jsr $acda			jsr 	CheckRightBracket
.a17a	da		phx				phx 								; save X/Y
.a17b	5a		phy				phy
.a17c	8a		txa				txa 								; copy X into Y
.a17d	a8		tay				tay
.a17e	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a181	aa		tax				tax
.a182	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a185	20 92 a1	jsr $a192			jsr 	AllocateXABytes 			; allocate memory
.a188	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a18b	8a		txa				txa
.a18c	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a18f	7a		ply				ply
.a190	fa		plx				plx
.a191	60		rts				rts
.a192					AllocateXABytes:
.a192	5a		phy				phy
.a193	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a196	84 36		sty $36				sty 	zTemp0
.a198	5a		phy				phy
.a199	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a19c	84 37		sty $37				sty 	zTemp0+1
.a19e	5a		phy				phy
.a19f	18		clc				clc 								; add to low memory pointer
.a1a0	6d 8c 04	adc $048c			adc 	lowMemPtr
.a1a3	8d 8c 04	sta $048c			sta 	lowMemPtr
.a1a6	8a		txa				txa
.a1a7	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a1aa	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a1ad	b0 2f		bcs $a1de			bcs 	CISSMemory
.a1af	20 d0 a1	jsr $a1d0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a1b2					_ClearMemory:
.a1b2	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a1b5	c5 36		cmp $36				cmp 	zTemp0
.a1b7	d0 07		bne $a1c0			bne 	_CMClearNext
.a1b9	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a1bc	c5 37		cmp $37				cmp 	zTemp0+1
.a1be	f0 0c		beq $a1cc			beq 	_CMExit
.a1c0					_CMClearNext:
.a1c0	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a1c2	92 36		sta ($36)			sta 	(zTemp0)
.a1c4	e6 36		inc $36				inc 	zTemp0
.a1c6	d0 ea		bne $a1b2			bne 	_ClearMemory
.a1c8	e6 37		inc $37				inc		zTemp0+1
.a1ca	80 e6		bra $a1b2			bra 	_ClearMemory
.a1cc					_CMExit:
.a1cc	fa		plx				plx
.a1cd	68		pla				pla
.a1ce	7a		ply				ply
.a1cf	60		rts				rts
.a1d0					CheckIdentifierStringSpace:
.a1d0	48		pha				pha
.a1d1	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a1d4	18		clc				clc
.a1d5	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1d7	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a1da	b0 02		bcs $a1de			bcs 	CISSMemory
.a1dc	68		pla				pla
.a1dd	60		rts				rts
.a1de					CISSMemory:
.a1de	a9 06		lda #$06		lda	#6
.a1e0	4c 09 99	jmp $9909		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b0a2					AscUnary:
.b0a2	fa		plx				plx 								; restore stack pos
.b0a3	20 26 a4	jsr $a426			jsr 	EvaluateString 				; get a string
.b0a6	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b0a8	20 c9 a4	jsr $a4c9			jsr 	NSMSetByte
.b0ab	20 da ac	jsr $acda			jsr 	CheckRightBracket
.b0ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b0af					FracUnary:
.b0af	fa		plx				plx 								; restore stack pos
.b0b0	20 1b a4	jsr $a41b			jsr 	EvaluateNumber 				; get a float or int
.b0b3	20 da ac	jsr $acda			jsr 	CheckRightBracket
.b0b6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0b9	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0bb	f0 04		beq $b0c1			beq 	_IUZero
.b0bd	20 7f af	jsr $af7f			jsr 	FloatFractionalPart
.b0c0	60		rts				rts
.b0c1					_IUZero:
.b0c1	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero
.b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b0c5					IntUnary:
.b0c5	fa		plx				plx 								; restore stack pos
.b0c6	20 1b a4	jsr $a41b			jsr 	EvaluateNumber 				; get a float or int
.b0c9	20 da ac	jsr $acda			jsr 	CheckRightBracket
.b0cc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0cf	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0d1	f0 03		beq $b0d6			beq 	_IUExit
.b0d3	20 e2 af	jsr $afe2			jsr 	FloatIntegerPart
.b0d6					_IUExit:
.b0d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b0d7					LenUnary:
.b0d7	fa		plx				plx 								; restore stack pos
.b0d8	20 26 a4	jsr $a426			jsr 	EvaluateString 				; get a string
.b0db	5a		phy				phy
.b0dc	a0 00		ldy #$00			ldy 	#0 							; find length
.b0de					_LenFind:
.b0de	b1 36		lda ($36),y			lda 	(zTemp0),y
.b0e0	f0 06		beq $b0e8			beq 	_LenExit
.b0e2	c8		iny				iny
.b0e3	d0 f9		bne $b0de			bne 	_LenFind
.b0e5	4c c5 b2	jmp $b2c5			jmp 	RangeError 					; string > 255
.b0e8					_LenExit:
.b0e8	98		tya				tya
.b0e9	20 c9 a4	jsr $a4c9			jsr 	NSMSetByte
.b0ec	7a		ply				ply
.b0ed	20 da ac	jsr $acda			jsr 	CheckRightBracket
.b0f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a1e3					Unary_Not:
.a1e3	fa		plx				plx
.a1e4	20 3e a4	jsr $a43e			jsr 	EvaluateInteger 			; get integer
.a1e7	20 da ac	jsr $acda			jsr 	CheckRightBracket
.a1ea	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; zero mantissa ?
.a1ed	f0 04		beq $a1f3			beq 	_NotZero
.a1ef	20 c7 a4	jsr $a4c7			jsr 	NSMSetZero
.a1f2	60		rts				rts
.a1f3					_NotZero:
.a1f3	4c 76 99	jmp $9976			jmp 	ReturnTrue
.a1f6					_UNBad:
.a1f6	4c cf b2	jmp $b2cf			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a1f9					Unary_Random:
.a1f9	fa		plx				plx
.a1fa	20 78 a2	jsr $a278			jsr 	Random32Bit 				; get a random number
.a1fd	20 5d a2	jsr $a25d			jsr 	URCopyToMantissa  			; put in mantissa
.a200	b1 30		lda ($30),y			lda 	(codePtr),y
.a202	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a204	f0 08		beq $a20e			beq 	_URNoModulus
.a206	e8		inx				inx
.a207	20 53 a4	jsr $a453			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a20a	ca		dex				dex
.a20b	20 5e ad	jsr $ad5e			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a20e					_URNoModulus:
.a20e	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a211	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a214	20 da ac	jsr $acda			jsr 	CheckRightBracket
.a217	60		rts				rts
.a218					Unary_Rnd:
.a218	fa		plx				plx
.a219	20 1b a4	jsr $a41b			jsr 	EvaluateNumber 				; number to use.
.a21c	20 da ac	jsr $acda			jsr 	CheckRightBracket 			; closing bracket
.a21f	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a222	f0 2b		beq $a24f			beq 	_URCopySeed
.a224	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a227	10 23		bpl $a24c			bpl 	_URDontSeed
.a229	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a22c	49 17		eor #$17			eor 	#$17
.a22e	8d 88 04	sta $0488			sta 	RandomSeed+0
.a231	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a234	49 a5		eor #$a5			eor 	#$A5
.a236	8d 89 04	sta $0489			sta 	RandomSeed+1
.a239	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a23c	49 c2		eor #$c2			eor 	#$C2
.a23e	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a241	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a244	49 9d		eor #$9d			eor 	#$9D
.a246	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a249	20 78 a2	jsr $a278			jsr 	Random32Bit
.a24c					_URDontSeed:
.a24c	20 78 a2	jsr $a278			jsr 	Random32Bit 				; generate a number.
.a24f					_URCopySeed:
.a24f	20 5d a2	jsr $a25d			jsr 	URCopyToMantissa 			; copy into mantissa
.a252	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a254	8d 28 04	sta $0428			sta 	NSExponent
.a257	a9 08		lda #$08			lda 	#NSTFloat
.a259	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a25c	60		rts				rts
.a25d					URCopyToMantissa:
.a25d	ad 88 04	lda $0488			lda 	RandomSeed+0
.a260	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a263	ad 89 04	lda $0489			lda 	RandomSeed+1
.a266	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a269	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a26c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a26f	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a272	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a274	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a277	60		rts				rts
.a278					Random32Bit:
.a278	5a		phy				phy
.a279	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a27b	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a27e	d0 03		bne $a283			bne 	_Random1
.a280	a8		tay				tay 								; if so do it 256 times
.a281	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a283					_Random1:
.a283	0a		asl a				asl 	a 							; LSFR RNG
.a284	2e 89 04	rol $0489			rol 	RandomSeed+1
.a287	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a28a	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a28d	90 02		bcc $a291			bcc 	_Random2
.a28f	49 c5		eor #$c5			eor 	#$C5
.a291					_Random2:
.a291	88		dey				dey
.a292	d0 ef		bne $a283			bne 	_Random1
.a294	8d 88 04	sta $0488			sta 	RandomSeed+0
.a297	7a		ply				ply
.a298	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b0f1					SgnUnary:
.b0f1	fa		plx				plx 								; restore stack pos
.b0f2	20 1b a4	jsr $a41b			jsr 	EvaluateNumber 				; get a float or int
.b0f5	20 da ac	jsr $acda			jsr 	CheckRightBracket
.b0f8	20 f7 a4	jsr $a4f7			jsr 	NSMIsZero 					; if zero
.b0fb	f0 10		beq $b10d			beq 	_SGZero  					; return Int Zero
.b0fd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b100	48		pha				pha
.b101	a9 01		lda #$01			lda 	#1 							; set to 1
.b103	20 c9 a4	jsr $a4c9			jsr 	NSMSetByte
.b106	68		pla				pla
.b107	29 80		and #$80			and		#$80 						; copy the sign byte out
.b109	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b10c	60		rts				rts
.b10d	20 c7 a4	jsr $a4c7	_SGZero:jsr 	NSMSetZero
.b110	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b111					ValUnary:
.b111	fa		plx				plx 								; restore stack pos
.b112	20 27 b1	jsr $b127			jsr 	ValMainCode 				; do the main val() code
.b115	b0 01		bcs $b118			bcs 	_VUError 					; couldn't convert
.b117	60		rts				rts
.b118					_VUError:
.b118	4c ca b2	jmp $b2ca			jmp 	TypeError
.b11b					IsValUnary:
.b11b	fa		plx				plx 								; restore stack pos
.b11c	20 27 b1	jsr $b127			jsr 	ValMainCode 				; do the main val() code
.b11f	b0 03		bcs $b124			bcs 	_VUBad
.b121	4c 76 99	jmp $9976			jmp 	ReturnTrue
.b124					_VUBad:
.b124	4c 82 99	jmp $9982			jmp 	ReturnFalse
.b127					ValMainCode:
.b127	20 26 a4	jsr $a426			jsr 	EvaluateString 				; get a string
.b12a	20 da ac	jsr $acda			jsr 	CheckRightBracket 			; check right bracket present
.b12d	5a		phy				phy
.b12e	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b130	f0 17		beq $b149			beq 	_VMCFail2
.b132	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b134	48		pha				pha 								; save first character
.b135	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b137	d0 01		bne $b13a			bne 	_VMCStart
.b139	c8		iny				iny 								; skip over -
.b13a					_VMCStart:
.b13a	38		sec				sec 								; initialise first time round.
.b13b					_VMCNext:
.b13b	c8		iny				iny 								; pre-increment
.b13c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b13e	f0 0c		beq $b14c			beq 	_VMCSuccess 				; successful.
.b140	20 c5 9e	jsr $9ec5			jsr 	EncodeNumber 				; send it to the number-builder
.b143	90 03		bcc $b148			bcc 	_VMCFail 					; if failed, give up.
.b145	18		clc				clc 								; next time round, countinue
.b146	80 f3		bra $b13b			bra 	_VMCNext
.b148					_VMCFail:
.b148	68		pla				pla
.b149					_VMCFail2:
.b149	7a		ply				ply
.b14a	38		sec				sec
.b14b	60		rts				rts
.b14c					_VMCSuccess:
.b14c	a9 00		lda #$00			lda 	#0 							; construct final
.b14e	20 c5 9e	jsr $9ec5			jsr 	EncodeNumber
.b151	68		pla				pla
.b152	c9 2d		cmp #$2d			cmp 	#"-"
.b154	d0 03		bne $b159			bne 	_VMCNotNegative
.b156	20 73 a4	jsr $a473			jsr		NSMNegate
.b159					_VMCNotNegative:
.b159	7a		ply				ply
.b15a	18		clc				clc
.b15b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a299					ChrUnary:
.a299	fa		plx				plx 								; restore stack pos
.a29a	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger			; get value
.a29d	48		pha				pha
.a29e	20 da ac	jsr $acda			jsr 	CheckRightBracket
.a2a1	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a2a3	20 f9 b5	jsr $b5f9			jsr 	StringTempAllocate
.a2a6	68		pla				pla 								; write number to it
.a2a7	20 37 b6	jsr $b637			jsr 	StringTempWrite
.a2aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a2ab					SpcUnary:
.a2ab	fa		plx				plx 								; restore stack pos
.a2ac	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger			; get value
.a2af	5a		phy				phy
.a2b0	48		pha				pha 								; save count
.a2b1	20 f9 b5	jsr $b5f9			jsr 	StringTempAllocate
.a2b4	7a		ply				ply 								; to do count in Y
.a2b5					_SpcLoop:
.a2b5	c0 00		cpy #$00			cpy 	#0
.a2b7	f0 08		beq $a2c1			beq 	_SpcExit
.a2b9	a9 20		lda #$20			lda 	#32
.a2bb	20 37 b6	jsr $b637			jsr 	StringTempWrite
.a2be	88		dey				dey
.a2bf	80 f4		bra $a2b5			bra 	_SPCLoop
.a2c1					_SpcExit:
.a2c1	7a		ply				ply
.a2c2	20 da ac	jsr $acda			jsr 	CheckRightBracket
.a2c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a2c6					Unary_Str:
.a2c6	fa		plx				plx
.a2c7	20 1b a4	jsr $a41b			jsr 	EvaluateNumber  			; get number
.a2ca	20 da ac	jsr $acda			jsr 	CheckRightBracket 			; closing bracket
.a2cd	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a2cf	20 e8 a2	jsr $a2e8			jsr 	ConvertNumberToString 		; do the conversion.
.a2d2	a9 21		lda #$21			lda		#33 						; create buffer
.a2d4	20 f9 b5	jsr $b5f9			jsr 	StringTempAllocate 			; allocate memory
.a2d7	da		phx				phx
.a2d8	a2 00		ldx #$00			ldx 	#0
.a2da					_USCopy:
.a2da	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2dd	20 37 b6	jsr $b637			jsr 	StringTempWrite
.a2e0	e8		inx				inx
.a2e1	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2e4	d0 f4		bne $a2da			bne 	_USCopy
.a2e6	fa		plx				plx
.a2e7	60		rts				rts
.a2e8					ConvertNumberToString:
.a2e8	5a		phy				phy 								; save code position
.a2e9	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a2ec	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a2ef	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a2f2	10 0a		bpl $a2fe			bpl 	_CNTSNotNegative
.a2f4	29 7f		and #$7f			and 	#$7F 						; make +ve
.a2f6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2f9	a9 2d		lda #$2d			lda 	#"-"
.a2fb	20 64 a3	jsr $a364			jsr 	WriteDecimalBuffer
.a2fe					_CNTSNotNegative:
.a2fe	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a301	f0 15		beq $a318			beq 	_CNTSNotFloat
.a303	e8		inx				inx 								; round up
.a304	a9 01		lda #$01			lda 	#1
.a306	20 c9 a4	jsr $a4c9			jsr 	NSMSetByte
.a309	ca		dex				dex
.a30a	bd 28 04	lda $0428,x			lda		NSExponent,x
.a30d	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a310	a9 08		lda #$08			lda 	#NSTFloat
.a312	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a315	20 a1 ae	jsr $aea1			jsr 	FloatAdd
.a318					_CNTSNotFloat:
.a318	20 46 a3	jsr $a346			jsr 	MakePlusTwoString
.a31b	20 7f af	jsr $af7f			jsr 	FloatFractionalPart 		; get the fractional part
.a31e	20 43 b0	jsr $b043			jsr 	NSNormalise					; normalise , exit if zero
.a321	f0 21		beq $a344			beq 	_CNTSExit
.a323	a9 2e		lda #$2e			lda 	#"."
.a325	20 64 a3	jsr $a364			jsr 	WriteDecimalBuffer 			; write decimal place
.a328					_CNTSDecimal:
.a328	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a32b	30 17		bmi $a344			bmi 	_CNTSExit
.a32d	e8		inx				inx 								; x 10.0
.a32e	a9 0a		lda #$0a			lda 	#10
.a330	20 c9 a4	jsr $a4c9			jsr 	NSMSetByte
.a333	a9 08		lda #$08			lda 	#NSTFloat
.a335	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a338	ca		dex				dex
.a339	20 0c b0	jsr $b00c			jsr 	FloatMultiply
.a33c	20 46 a3	jsr $a346			jsr 	MakePlusTwoString
.a33f	20 7f af	jsr $af7f			jsr 	FloatFractionalPart 		; get the fractional part
.a342	80 e4		bra $a328			bra 	_CNTSDecimal 				; keep going.
.a344					_CNTSExit:
.a344	7a		ply				ply
.a345	60		rts				rts
.a346					MakePlusTwoString:
.a346	da		phx				phx
.a347	20 9e a4	jsr $a49e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a34a	e8		inx				inx 								; access it
.a34b	e8		inx				inx
.a34c	20 e2 af	jsr $afe2			jsr 	FloatIntegerPart 			; make it an integer
.a34f	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a351	20 4b ae	jsr $ae4b			jsr 	ConvertInt32
.a354	a2 00		ldx #$00			ldx	 	#0
.a356					_MPTSCopy:
.a356	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a359	20 64 a3	jsr $a364			jsr 	WriteDecimalBuffer
.a35c	e8		inx				inx
.a35d	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a360	d0 f4		bne $a356			bne 	_MPTSCopy
.a362	fa		plx				plx
.a363	60		rts				rts
.a364					WriteDecimalBuffer:
.a364	da		phx				phx
.a365	ae 95 04	ldx $0495			ldx 	dbOffset
.a368	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a36b	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a36e	ee 95 04	inc $0495			inc 	dbOffset
.a371	fa		plx				plx
.a372	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a373					Unary_Left:
.a373	fa		plx				plx
.a374	18		clc				clc 								; only one parameter
.a375	20 ea a3	jsr $a3ea			jsr 	SubstringInitial 			; set up.
.a378	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a37b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a37e	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a381	80 2c		bra $a3af			bra 	SubstringMain
.a383					Unary_Right:
.a383	fa		plx				plx
.a384	18		clc				clc 								; only one parameter
.a385	20 ea a3	jsr $a3ea			jsr 	SubstringInitial 			; set up.
.a388	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a38b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a38e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a391	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a394	b0 02		bcs $a398			bcs 	_URNotUnderflow
.a396	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a398					_URNotUnderFlow:
.a398	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a39b	80 12		bra $a3af			bra 	SubStringMain
.a39d					Unary_Mid:
.a39d	fa		plx				plx
.a39e	38		sec				sec 								; two parameters
.a39f	20 ea a3	jsr $a3ea			jsr 	SubstringInitial 			; set up.
.a3a2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a3a5	f0 05		beq $a3ac			beq 	_UMError
.a3a7	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a3aa	80 03		bra $a3af			bra 	SubStringMain
.a3ac					_UMError:
.a3ac	4c cf b2	jmp $b2cf			jmp 	ArgumentError
.a3af					SubStringMain:
.a3af	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a3b2	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a3b5	b0 2d		bcs $a3e4			bcs 	_SSMNull 					; if so, return an empty string.
.a3b7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a3ba	f0 28		beq $a3e4			beq 	_SSMNull 					; return empty string.
.a3bc	18		clc				clc 								; add the offset +1 to the address and
.a3bd	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a3c0	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a3c3	85 36		sta $36				sta 	zTemp0
.a3c5	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a3c8	69 00		adc #$00			adc 	#0
.a3ca	85 37		sta $37				sta 	zTemp0+1
.a3cc					_SSMNoCarry:
.a3cc	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a3cf	20 f9 b5	jsr $b5f9			jsr 	StringTempAllocate 			; allocate that many characters
.a3d2	5a		phy				phy 								; save Y
.a3d3	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a3d5					_SSMCopy:
.a3d5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a3d7	f0 09		beq $a3e2			beq 	_SSMEString 				; no more to copy
.a3d9	20 37 b6	jsr $b637			jsr 	StringTempWrite 			; and write it out.
.a3dc	c8		iny				iny
.a3dd	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a3e0	d0 f3		bne $a3d5			bne 	_SSMCopy
.a3e2					_SSMEString:
.a3e2	7a		ply				ply
.a3e3					_SSMExit:
.a3e3	60		rts				rts
.a3e4					_SSMNull:
.a3e4	a9 00		lda #$00			lda 	#0
.a3e6	20 f9 b5	jsr $b5f9			jsr 	StringTempAllocate
.a3e9	60		rts				rts
.a3ea					SubstringInitial:
.a3ea	da		phx				phx 								; save initial stack position
.a3eb	08		php				php 								; save carry on stack indicating 2 parameters
.a3ec	20 26 a4	jsr $a426			jsr 	EvaluateString 				; get a string
.a3ef	5a		phy				phy 								; calculate length to exponent.
.a3f0	a0 ff		ldy #$ff			ldy 	#$FF
.a3f2					_SIFindLength:
.a3f2	c8		iny				iny
.a3f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3f5	d0 fb		bne $a3f2			bne 	_SIFindLength
.a3f7	98		tya				tya
.a3f8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3fb	7a		ply				ply
.a3fc	e8		inx				inx
.a3fd	20 e2 ac	jsr $ace2			jsr 	CheckComma 					; comma next
.a400	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; get next parameter
.a403	28		plp				plp 								; is it the last parameter ?
.a404	90 07		bcc $a40d			bcc 	_SSIExit 					; if so, exit.
.a406	e8		inx				inx
.a407	20 e2 ac	jsr $ace2			jsr 	CheckComma 					; comma next
.a40a	20 5f a4	jsr $a45f			jsr 	Evaluate8BitInteger 		; get last parameter
.a40d					_SSIExit:
.a40d	fa		plx				plx
.a40e	20 da ac	jsr $acda			jsr 	CheckRightBracket 			; check closing bracket
.a411	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a412					EvaluateValue:
.a412	48		pha				pha
.a413	20 12 9d	jsr $9d12			jsr		EvaluateExpression 			; expression
.a416	20 27 9e	jsr $9e27			jsr 	Dereference					; derefernce it
.a419	68		pla				pla
.a41a	60		rts				rts
.a41b					EvaluateNumber:
.a41b	20 12 a4	jsr $a412			jsr 	EvaluateValue 				; get a value
.a41e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a421	29 10		and #$10			and 	#NSBIsString
.a423	d0 16		bne $a43b			bne 	HelperTypeError
.a425	60		rts				rts
.a426					EvaluateString:
.a426	20 12 a4	jsr $a412			jsr 	EvaluateValue 				; get a value
.a429	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a42c	29 10		and #$10			and 	#NSBIsString
.a42e	f0 0b		beq $a43b			beq 	HelperTypeError
.a430					CopyAddressToTemp0:
.a430	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a433	85 36		sta $36				sta 	zTemp0
.a435	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a438	85 37		sta $37				sta 	zTemp0+1
.a43a	60		rts				rts
.a43b					HelperTypeError:
.a43b	4c ca b2	jmp $b2ca			jmp 	TypeError
.a43e					EvaluateInteger:
.a43e	20 1b a4	jsr $a41b			jsr 	EvaluateNumber
.a441	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a444	d0 0a		bne $a450			bne 	HelperValueError 			; if not, it's a float.
.a446	60		rts				rts
.a447					EvaluateUnsignedInteger:
.a447	20 3e a4	jsr $a43e			jsr 	EvaluateInteger 			; check integer is +ve
.a44a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a44d	30 01		bmi $a450			bmi 	HelperValueError
.a44f	60		rts				rts
.a450					HelperValueError:
.a450	4c cf b2	jmp $b2cf			jmp 	ArgumentError
.a453					Evaluate16BitInteger:
.a453	20 47 a4	jsr $a447			jsr	 	EvaluateUnsignedInteger		; get integer
.a456	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a459	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a45c	d0 f2		bne $a450			bne 	HelperValueError
.a45e	60		rts				rts
.a45f					Evaluate8BitInteger:
.a45f	20 47 a4	jsr $a447			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a462	d0 ec		bne $a450			bne 	HelperValueError
.a464	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a467	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a46a	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a46d	d0 e1		bne $a450			bne 	HelperValueError
.a46f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a472	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b15c					Multiply8x8:
.b15c	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b15d	85 36		sta $36			  	sta 	zTemp0
.b15f	86 37		stx $37				stx 	zTemp0+1
.b161	a9 00		lda #$00			lda 	#0
.b163	a2 08		ldx #$08			ldx 	#8
.b165					_M88Loop:
.b165	90 03		bcc $b16a			bcc 	_M88NoAdd
.b167	18		clc				clc
.b168	65 37		adc $37				adc 	zTemp0+1
.b16a					_M88NoAdd:
.b16a	6a		ror a				ror 	a
.b16b	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b16d	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b16e	d0 f5		bne $b165			bne 	_M88Loop
.b170	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b172	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a473					NSMNegate:
.a473	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a476	49 80		eor #$80			eor 	#NSBIsNegative
.a478	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a47b	60		rts				rts
.a47c					NSMNegateMantissa:
.a47c	38		sec				sec
.a47d	a9 00		lda #$00			lda 	#0
.a47f	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a482	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a485	a9 00		lda #$00			lda 	#0
.a487	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a48a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a48d	a9 00		lda #$00			lda 	#0
.a48f	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a492	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a495	a9 00		lda #$00			lda 	#0
.a497	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a49a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a49d	60		rts				rts
.a49e					NSMShiftUpTwo:
.a49e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4a1	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4a4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4a7	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a4aa	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a4ad	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a4b0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4b3	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a4b6	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a4b9	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a4bc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4bf	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a4c2	60		rts				rts
.a4c3					NSMSetZeroMantissaOnly:
.a4c3	a9 00		lda #$00			lda 	#0
.a4c5	80 08		bra $a4cf			bra 	NSMSetMantissa
.a4c7					NSMSetZero:
.a4c7	a9 00		lda #$00			lda 	#0
.a4c9					NSMSetByte:
.a4c9	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a4cc	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a4cf					NSMSetMantissa:
.a4cf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a4d2	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a4d5	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a4d8	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a4db	60		rts				rts
.a4dc					NSMShiftLeft:
.a4dc	18		clc				clc
.a4dd					NSMRotateLeft:
.a4dd	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a4e0	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a4e3	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a4e6	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a4e9	60		rts				rts
.a4ea					NSMShiftRight:
.a4ea	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a4ed	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a4f0	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a4f3	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a4f6	60		rts				rts
.a4f7					NSMIsZero:
.a4f7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4fa	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a4fd	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a500	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a503	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b173					Assemble_ora:
.b173	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b176	01					.byte $01
.b177					Assemble_and:
.b177	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b17a	21					.byte $21
.b17b					Assemble_eor:
.b17b	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b17e	41					.byte $41
.b17f					Assemble_adc:
.b17f	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b182	61					.byte $61
.b183					Assemble_sta:
.b183	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b186	81					.byte $81
.b187					Assemble_lda:
.b187	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b18a	a1					.byte $a1
.b18b					Assemble_cmp:
.b18b	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b18e	c1					.byte $c1
.b18f					Assemble_sbc:
.b18f	20 9b 89	jsr $899b		jsr	AssembleGroup1
>b192	e1					.byte $e1
.b193					Assemble_asl:
.b193	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b196	02					.byte $02
>b197	75					.byte $75
.b198					Assemble_rol:
.b198	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b19b	22					.byte $22
>b19c	75					.byte $75
.b19d					Assemble_lsr:
.b19d	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1a0	42					.byte $42
>b1a1	75					.byte $75
.b1a2					Assemble_ror:
.b1a2	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1a5	62					.byte $62
>b1a6	75					.byte $75
.b1a7					Assemble_stx:
.b1a7	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1aa	82					.byte $82
>b1ab	50					.byte $50
.b1ac					Assemble_ldx:
.b1ac	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1af	a2					.byte $a2
>b1b0	d0					.byte $d0
.b1b1					Assemble_dec:
.b1b1	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1b4	c2					.byte $c2
>b1b5	55					.byte $55
.b1b6					Assemble_inc:
.b1b6	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1b9	e2					.byte $e2
>b1ba	55					.byte $55
.b1bb					Assemble_stz:
.b1bb	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1be	60					.byte $60
>b1bf	44					.byte $44
.b1c0					Assemble_bit:
.b1c0	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1c3	20					.byte $20
>b1c4	55					.byte $55
.b1c5					Assemble_sty:
.b1c5	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1c8	80					.byte $80
>b1c9	54					.byte $54
.b1ca					Assemble_ldy:
.b1ca	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1cd	a0					.byte $a0
>b1ce	d5					.byte $d5
.b1cf					Assemble_cpy:
.b1cf	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1d2	c0					.byte $c0
>b1d3	d4					.byte $d4
.b1d4					Assemble_cpx:
.b1d4	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1d7	e0					.byte $e0
>b1d8	d0					.byte $d0
.b1d9					Assemble_tsb:
.b1d9	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1dc	00					.byte $00
>b1dd	50					.byte $50
.b1de					Assemble_trb:
.b1de	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1e1	10					.byte $10
>b1e2	50					.byte $50
.b1e3					Assemble_jsr:
.b1e3	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1e6	14					.byte $14
>b1e7	10					.byte $10
.b1e8					Assemble_jmp:
.b1e8	20 a2 89	jsr $89a2		jsr	AssembleGroup2
>b1eb	40					.byte $40
>b1ec	10					.byte $10
.b1ed					Assemble_bpl:
.b1ed	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b1f0	10					.byte $10
.b1f1					Assemble_bmi:
.b1f1	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b1f4	30					.byte $30
.b1f5					Assemble_bvc:
.b1f5	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b1f8	50					.byte $50
.b1f9					Assemble_bvs:
.b1f9	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b1fc	70					.byte $70
.b1fd					Assemble_bcc:
.b1fd	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b200	90					.byte $90
.b201					Assemble_bcs:
.b201	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b204	b0					.byte $b0
.b205					Assemble_bne:
.b205	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b208	d0					.byte $d0
.b209					Assemble_beq:
.b209	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b20c	f0					.byte $f0
.b20d					Assemble_bra:
.b20d	20 f3 89	jsr $89f3		jsr	AssembleGroup3
>b210	80					.byte $80
.b211					Assemble_brk:
.b211	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b214	00					.byte $00
.b215					Assemble_php:
.b215	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b218	08					.byte $08
.b219					Assemble_clc:
.b219	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b21c	18					.byte $18
.b21d					Assemble_plp:
.b21d	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b220	28					.byte $28
.b221					Assemble_sec:
.b221	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b224	38					.byte $38
.b225					Assemble_rti:
.b225	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b228	40					.byte $40
.b229					Assemble_pha:
.b229	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b22c	48					.byte $48
.b22d					Assemble_cli:
.b22d	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b230	58					.byte $58
.b231					Assemble_phy:
.b231	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b234	5a					.byte $5a
.b235					Assemble_rts:
.b235	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b238	60					.byte $60
.b239					Assemble_pla:
.b239	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b23c	68					.byte $68
.b23d					Assemble_sei:
.b23d	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b240	78					.byte $78
.b241					Assemble_ply:
.b241	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b244	7a					.byte $7a
.b245					Assemble_dey:
.b245	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b248	88					.byte $88
.b249					Assemble_txa:
.b249	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b24c	8a					.byte $8a
.b24d					Assemble_tya:
.b24d	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b250	98					.byte $98
.b251					Assemble_txs:
.b251	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b254	9a					.byte $9a
.b255					Assemble_tay:
.b255	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b258	a8					.byte $a8
.b259					Assemble_tax:
.b259	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b25c	aa					.byte $aa
.b25d					Assemble_clv:
.b25d	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b260	b8					.byte $b8
.b261					Assemble_tsx:
.b261	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b264	ba					.byte $ba
.b265					Assemble_iny:
.b265	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b268	c8					.byte $c8
.b269					Assemble_dex:
.b269	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b26c	ca					.byte $ca
.b26d					Assemble_cld:
.b26d	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b270	d8					.byte $d8
.b271					Assemble_phx:
.b271	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b274	da					.byte $da
.b275					Assemble_stp:
.b275	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b278	db					.byte $db
.b279					Assemble_inx:
.b279	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b27c	e8					.byte $e8
.b27d					Assemble_nop:
.b27d	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b280	ea					.byte $ea
.b281					Assemble_sed:
.b281	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b284	f8					.byte $f8
.b285					Assemble_plx:
.b285	20 29 8a	jsr $8a29		jsr	AssembleGroup4
>b288	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b289					DecimalScalarTable:
>b289	66 66 66 66				.dword $66666666 ; 0.1
>b28d	de					.byte $de
>b28e	1f 85 eb 51				.dword $51eb851f ; 0.01
>b292	db					.byte $db
>b293	4c 37 89 41				.dword $4189374c ; 0.001
>b297	d8					.byte $d8
>b298	ac 8b db 68				.dword $68db8bac ; 0.0001
>b29c	d4					.byte $d4
>b29d	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b2a1	d1					.byte $d1
>b2a2	83 de 1b 43				.dword $431bde83 ; 1e-06
>b2a6	ce					.byte $ce
>b2a7	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b2ab	ca					.byte $ca
>b2ac	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b2b0	c7					.byte $c7
>b2b1	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b2b5	c4					.byte $c4
>b2b6	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b2ba	c0					.byte $c0
>b2bb	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b2bf	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b2c0					SyntaxError:
.b2c0	a9 02		lda #$02		lda	#2
.b2c2	4c 09 99	jmp $9909		jmp	ErrorHandler
.b2c5					RangeError:
.b2c5	a9 04		lda #$04		lda	#4
.b2c7	4c 09 99	jmp $9909		jmp	ErrorHandler
.b2ca					TypeError:
.b2ca	a9 05		lda #$05		lda	#5
.b2cc	4c 09 99	jmp $9909		jmp	ErrorHandler
.b2cf					ArgumentError:
.b2cf	a9 07		lda #$07		lda	#7
.b2d1	4c 09 99	jmp $9909		jmp	ErrorHandler
.b2d4					NotDoneError:
.b2d4	a9 0c		lda #$0c		lda	#12
.b2d6	4c 09 99	jmp $9909		jmp	ErrorHandler
.b2d9					ErrorText:
>b2d9	42 72 65 61 6b 00			.text	"Break",0
>b2df	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b2e7	72 72 6f 72 00
>b2ec	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b2f4	20 62 79 20 7a 65 72 6f 00
>b2fd	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b305	61 6e 67 65 00
>b30a	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b312	6d 61 74 63 68 00
>b318	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b320	65 6d 6f 72 79 00
>b326	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b32e	61 72 67 75 6d 65 6e 74 00
>b337	53 74 6f 70 00				.text	"Stop",0
>b33c	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b344	6f 6f 20 6c 6f 6e 67 00
>b34c	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b354	6e 20 66 61 69 6c 65 64 00
>b35d	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b365	61 74 61 00
>b369	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b371	65 6e 74 65 64 00
>b377	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b37f	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b38b	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b393	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b3a0	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b3a8	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b3b5	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b3bd	68 6f 75 74 20 57 68 69 6c 65 00
>b3c8	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b3d0	68 6f 75 74 20 46 6f 72 00
>b3d9	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b3e1	61 63 6b 20 66 75 6c 6c 00
>b3ea	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b3f2	75 63 74 75 72 65 00
>b3f9	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b401	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b40e	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b416	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b424	41 72 72 61 79 20 73 69			.text	"Array size",0
>b42c	7a 65 00
>b42f	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b437	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b43f	42 75 69 6c 74 20 54 68			.text "Built Thursday 13-Oct-2022. Build 1894."
>b447	75 72 73 64 61 79 20 31 33 2d 4f 63 74 2d 32 30
>b457	32 32 2e 20 42 75 69 6c 64 20 31 38 39 34 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b466					EXTInitialise:
.b466	64 01		stz $01				stz 	1 							; Access I/O
.b468	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b46b	9c 08 d0	stz $d008			stz 	$D008
.b46e	9c 09 d0	stz $d009			stz 	$D009
.b471	a9 01		lda #$01			lda 	#1 							; Timer On at 70Hz
.b473	8d 58 d6	sta $d658			sta 	$D658
.b476	60		rts				rts
.b477					EXTPrintCharacter:
.b477	48		pha				pha
.b478	da		phx				phx
.b479	5a		phy				phy
.b47a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b47d	7a		ply				ply
.b47e	fa		plx				plx
.b47f	68		pla				pla
.b480	60		rts				rts
.b481					EXTInputSingleCharacter:
.b481	da		phx				phx
.b482	5a		phy				phy
.b483					_EISCWait:
.b483	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b486	c9 00		cmp #$00			cmp 	#0
.b488	f0 f9		beq $b483			beq 	_EISCWait
.b48a	7a		ply				ply
.b48b	fa		plx				plx
.b48c	60		rts				rts
.b48d					EXTInputLine:
.b48d	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b48f					_ILLoop:
.b48f	da		phx				phx 								; read character in
.b490	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b493	fa		plx				plx
.b494	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b496	f0 12		beq $b4aa			beq 	_ILBackspace
.b498	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b49a	f0 15		beq $b4b1			beq 	_ILExit
.b49c	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b49e	90 ef		bcc $b48f			bcc 	_ILLoop
.b4a0	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b4a2	f0 eb		beq $b48f			beq 	_ILLoop
.b4a4	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b4a7	e8		inx				inx
.b4a8	80 e5		bra $b48f			bra 	_ILLoop
.b4aa					_ILBackspace:
.b4aa	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b4ac	f0 e1		beq $b48f			beq 	_ILLoop
.b4ae	ca		dex				dex 								; back one.
.b4af	80 de		bra $b48f			bra 	_ILLoop
.b4b1					_ILExit:
.b4b1	20 77 b4	jsr $b477			jsr 	EXTPrintCharacter
.b4b4	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b4b7	60		rts				rts
.b4b8					EXTBreakCheck:
.b4b8	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b4bb					MemoryDeleteLine:
.b4bb	20 da b4	jsr $b4da			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b4be	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b4c0	a8		tay				tay
.b4c1					_MDDLLoop:
.b4c1	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b4c3	92 30		sta ($30)			sta 	(codePtr)
.b4c5	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b4c7	c5 3a		cmp $3a				cmp 	zTemp2
.b4c9	d0 07		bne $b4d2			bne 	_MDLDLNext
.b4cb	a5 31		lda $31				lda 	codePtr+1
.b4cd	c5 3b		cmp $3b				cmp 	zTemp2+1
.b4cf	d0 01		bne $b4d2			bne 	_MDLDLNext
.b4d1					_MDDLExit:
.b4d1	60		rts				rts
.b4d2					_MDLDLNext:
.b4d2	e6 30		inc $30				inc 	codePtr						; next byte
.b4d4	d0 eb		bne $b4c1			bne 	_MDDLLoop
.b4d6	e6 31		inc $31				inc 	codePtr+1
.b4d8	80 e7		bra $b4c1			bra 	_MDDLLoop
.b4da					IMemoryFindEnd:
.b4da	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b4dc	85 3a		sta $3a				sta 	0+zTemp2
.b4de	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b4e0	85 3b		sta $3b				sta 	1+zTemp2
.b4e2					_MDLFELoop:
.b4e2	b2 3a		lda ($3a)			lda 	(zTemp2)
.b4e4	f0 0b		beq $b4f1			beq 	_MDLFEExit
.b4e6	18		clc				clc
.b4e7	65 3a		adc $3a				adc 	zTemp2
.b4e9	85 3a		sta $3a				sta 	zTemp2
.b4eb	90 f5		bcc $b4e2			bcc 	_MDLFELoop
.b4ed	e6 3b		inc $3b				inc 	zTemp2+1
.b4ef	80 f1		bra $b4e2			bra 	_MDLFELoop
.b4f1					_MDLFEExit:
.b4f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b4f2					MemoryInsertLine:
.b4f2	08		php				php
.b4f3	20 da b4	jsr $b4da			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b4f6	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b4f8	1a		inc a				inc 	a
.b4f9	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b4fb	b0 36		bcs $b533			bcs 	_MDLIError
.b4fd	28		plp				plp
.b4fe	90 08		bcc $b508			bcc 	_MDLIFound
.b500	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b502	85 30		sta $30				sta 	codePtr
.b504	a5 3b		lda $3b				lda 	zTemp2+1
.b506	85 31		sta $31				sta 	codePtr+1
.b508					_MDLIFound:
.b508	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b50b	a8		tay				tay
.b50c					_MDLIInsert:
.b50c	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b50e	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b510	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b512	c5 3a		cmp $3a				cmp 	zTemp2
.b514	d0 06		bne $b51c			bne 	_MDLINext
.b516	a5 31		lda $31				lda 	codePtr+1
.b518	c5 3b		cmp $3b				cmp 	zTemp2+1
.b51a	f0 0a		beq $b526			beq 	_MDLIHaveSpace
.b51c					_MDLINext:
.b51c	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b51e	d0 02		bne $b522			bne 	_MDLINoBorrow
.b520	c6 3b		dec $3b				dec 	zTemp2+1
.b522					_MDLINoBorrow:
.b522	c6 3a		dec $3a				dec 	zTemp2
.b524	80 e6		bra $b50c			bra 	_MDLIInsert
.b526					_MDLIHaveSpace:
.b526	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b529	88		dey				dey 								; from offset-1 to 0
.b52a					_MDLICopy:
.b52a	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b52d	91 30		sta ($30),y			sta 	(codePtr),y
.b52f	88		dey				dey
.b530	10 f8		bpl $b52a			bpl 	_MDLICopy
.b532	60		rts				rts
.b533					_MDLIError:
.b533	a9 06		lda #$06		lda	#6
.b535	4c 09 99	jmp $9909		jmp	ErrorHandler
.b538					MDLAppendLine:
.b538	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b53a	85 36		sta $36				sta 	zTemp0
.b53c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b53e	85 38		sta $38				sta 	0+zTemp1
.b540	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b542	85 39		sta $39				sta 	1+zTemp1
.b544	b2 38		lda ($38)			lda 	(zTemp1)
.b546	d0 0a		bne $b552			bne 	_MDLANoInitialise
.b548	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b54a	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b54d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b54f	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b552					_MDLANoInitialise:
.b552	18		clc				clc
.b553	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b556	85 38		sta $38				sta 	zTemp1
.b558	72 36		adc ($36)			adc 	(zTemp0)
.b55a	8d 6b 06	sta $066b			sta 	AppendPointer
.b55d	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b560	85 39		sta $39				sta 	zTemp1+1
.b562	69 00		adc #$00			adc 	#0
.b564	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b567	a0 00		ldy #$00			ldy 	#0
.b569					_MDLACopy:
.b569	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b56b	91 38		sta ($38),y			sta 	(zTemp1),y
.b56d	c8		iny				iny
.b56e	98		tya				tya
.b56f	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b571	d0 f6		bne $b569			bne 	_MDLACopy
.b573	a9 00		lda #$00			lda 	#0 							; end of program.
.b575	91 38		sta ($38),y			sta 	(zTemp1),y
.b577	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a504					MemoryNew:
.a504	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a506	85 30		sta $30				sta 	codePtr
.a508	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a50a	85 31		sta $31				sta 	codePtr+1
.a50c	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a50e	92 30		sta ($30)			sta 	(codePtr)
.a510	60		rts				rts
.a511					MemoryInline:
.a511	98		tya				tya 								; put address into stack,x
.a512	18		clc				clc
.a513	65 30		adc $30				adc 	codePtr
.a515	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a518	a5 31		lda $31				lda 	codePtr+1
.a51a	69 00		adc #$00			adc 	#0
.a51c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a51f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a522	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a525	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a526					MemorySearch:
.a526	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a528	86 37		stx $37				stx 	zTemp0+1
.a52a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a52c	85 30		sta $30				sta 	codePtr
.a52e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a530	85 31		sta $31				sta 	codePtr+1
.a532					_MTAXLoop:
.a532	b2 30		lda ($30)			lda 	(codePtr)
.a534	18		clc				clc
.a535	f0 21		beq $a558			beq 	_MTAXExit 					; reached end, exit with CC.
.a537	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a539	b1 30		lda ($30),y			lda 	(codePtr),y
.a53b	38		sec				sec
.a53c	e5 36		sbc $36				sbc 	zTemp0
.a53e	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a540	c8		iny				iny 								; do the MSB
.a541	b1 30		lda ($30),y			lda 	(codePtr),y
.a543	e5 37		sbc $37				sbc 	zTemp0+1
.a545	05 38		ora $38				ora 	zTemp1
.a547	f0 0f		beq $a558			beq 	_MTAXExit	 				; found
.a549	b0 0d		bcs $a558			bcs 	_MTAXExit 					; current < required exit
.a54b	18		clc				clc
.a54c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a54e	65 30		adc $30				adc 	codePtr
.a550	85 30		sta $30				sta 	codePtr
.a552	90 02		bcc $a556			bcc 	_CREExit
.a554	e6 31		inc $31				inc 	codePtr+1
.a556					_CREExit:
.a556	80 da		bra $a532			bra 	_MTAXLoop
.a558					_MTAXExit:
.a558	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a559					StackPushByte:
.a559	48		pha				pha 								; save byte
.a55a	a5 34		lda $34				lda 	BasicStack
.a55c	d0 09		bne $a567			bne 	_SPBNoBorrow
.a55e	c6 35		dec $35				dec 	BasicStack+1
.a560	48		pha				pha
.a561	a5 35		lda $35				lda 	BasicStack+1
.a563	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a565	90 06		bcc $a56d			bcc 	_SPBMemory
.a567					_SPBNoBorrow:
.a567	c6 34		dec $34				dec 	BasicStack
.a569	68		pla				pla 								; get back and write
.a56a	92 34		sta ($34)			sta 	(BasicStack)
.a56c	60		rts				rts
.a56d					_SPBMemory:
.a56d	a9 12		lda #$12		lda	#18
.a56f	4c 09 99	jmp $9909		jmp	ErrorHandler
.a572					StackPopByte:
.a572	b2 34		lda ($34)			lda 	(BasicStack)
.a574	e6 34		inc $34				inc 	BasicStack
.a576	d0 02		bne $a57a			bne 	_SPBNoCarry
.a578	e6 35		inc $35				inc 	BasicStack+1
.a57a					_SPBNoCarry:
.a57a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a57b					StackOpen:
.a57b	48		pha				pha 								; save frame byte
.a57c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a57e	0a		asl a				asl 	a 							; claim twice this for storage
.a57f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a581	38		sec				sec 								; so basically subtracting from
.a582	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a584	85 34		sta $34				sta 	basicStack
.a586	b0 08		bcs $a590			bcs 	_SONoBorrow
.a588	c6 35		dec $35				dec 	basicStack+1
.a58a	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a58c	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a58e	90 04		bcc $a594			bcc 	_SOMemory
.a590					_SONoBorrow:
.a590	68		pla				pla 								; get marker back and write at TOS
.a591	92 34		sta ($34)			sta 	(basicStack)
.a593	60		rts				rts
.a594					_SOMemory:
.a594	a9 12		lda #$12		lda	#18
.a596	4c 09 99	jmp $9909		jmp	ErrorHandler
.a599					StackClose:
.a599	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a59b	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a59d	0a		asl a				asl 	a 							; claim twice this.
.a59e	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a5a0	85 34		sta $34				sta 	basicStack
.a5a2	90 02		bcc $a5a6			bcc 	_SCExit
.a5a4	e6 35		inc $35				inc 	basicStack+1
.a5a6					_SCExit:
.a5a6	60		rts				rts
.a5a7					StackCheckFrame:
.a5a7	48		pha				pha
.a5a8					_StackRemoveLocals:
.a5a8	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a5aa	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a5ac	b0 05		bcs $a5b3			bcs 	_SCNoLocal
.a5ae	20 81 ac	jsr $ac81			jsr 	LocalPopValue
.a5b1	80 f5		bra $a5a8			bra 	_StackRemoveLocals
.a5b3					_SCNoLocal:
.a5b3	68		pla				pla
.a5b4	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a5b6	29 f0		and #$f0			and 	#$F0 						; check type bits
.a5b8	d0 01		bne $a5bb			bne 	_SCFError 					; different, we have structures mixed up
.a5ba	60		rts				rts
.a5bb					_SCFError:
.a5bb	8a		txa				txa 								; report error X
.a5bc	4c 09 99	jmp $9909			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a5bf					STKSaveCodePosition:
.a5bf	5a		phy				phy
.a5c0	98		tya				tya 								; save Y
.a5c1	a0 05		ldy #$05			ldy 	#5
.a5c3	91 34		sta ($34),y			sta 	(basicStack),y
.a5c5	88		dey				dey 								; save Code Pointer
.a5c6					_STKSaveLoop:
.a5c6	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a5c9	91 34		sta ($34),y			sta 	(basicStack),y
.a5cb	88		dey				dey
.a5cc	d0 f8		bne $a5c6			bne 	_STKSaveLoop
.a5ce	7a		ply				ply
.a5cf	60		rts				rts
.a5d0					STKLoadCodePosition:
.a5d0	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a5d2					_STKLoadLoop:
.a5d2	b1 34		lda ($34),y			lda 	(basicStack),y
.a5d4	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a5d7	c8		iny				iny
.a5d8	c0 05		cpy #$05			cpy 	#5
.a5da	d0 f6		bne $a5d2			bne 	_STKLoadLoop
.a5dc	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a5de	a8		tay				tay
.a5df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a5e0					StackReset:
.a5e0	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a5e2	85 34		sta $34				sta 	0+basicStack
.a5e4	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a5e6	85 35		sta $35				sta 	1+basicStack
.a5e8	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a5ea	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a5ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b578					StringConcrete:
.b578	5a		phy				phy 								; save position on stack
.b579	20 d0 a1	jsr $a1d0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b57c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b57f	85 38		sta $38				sta 	zTemp1
.b581	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b584	85 39		sta $39				sta 	zTemp1+1
.b586	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b588					_SALength:
.b588	c8		iny				iny
.b589	b1 38		lda ($38),y			lda 	(zTemp1),y
.b58b	d0 fb		bne $b588			bne 	_SALength
.b58d	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b58f	b0 3f		bcs $b5d0			bcs 	_SALengthError
.b591	98		tya				tya 				 				; length of the new string
.b592	18		clc				clc
.b593	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b595	90 02		bcc $b599			bcc 	_SAHaveLength
.b597	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b599					_SAHaveLength:
.b599	48		pha				pha 								; save length.
.b59a	38		sec				sec
.b59b	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b59d	6d 8e 04	adc $048e			adc 	StringMemory
.b5a0	8d 8e 04	sta $048e			sta 	StringMemory
.b5a3	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b5a5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b5a8	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b5aa	6d 8f 04	adc $048f			adc 	StringMemory+1
.b5ad	8d 8f 04	sta $048f			sta 	StringMemory+1
.b5b0	85 3b		sta $3b				sta 	zTemp2+1
.b5b2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b5b5	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b5b6	38		sec				sec
.b5b7	e9 03		sbc #$03			sbc 	#3
.b5b9	92 3a		sta ($3a)			sta 	(zTemp2)
.b5bb	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b5bd	a0 01		ldy #$01			ldy 	#1
.b5bf	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b5c1					_SACopyNewString:
.b5c1	a0 00		ldy #$00			ldy 	#0
.b5c3					_SACopyNSLoop:
.b5c3	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b5c5	c8		iny				iny 								; write two on in string storage
.b5c6	c8		iny				iny
.b5c7	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b5c9	88		dey				dey 								; this makes it one one.
.b5ca	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b5cc	d0 f5		bne $b5c3			bne 	_SACopyNSLoop
.b5ce	7a		ply				ply
.b5cf	60		rts				rts
.b5d0					_SALengthError:
.b5d0	a9 09		lda #$09		lda	#9
.b5d2	4c 09 99	jmp $9909		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b5d5					StringSystemInitialise:
.b5d5	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b5d7	8d 8e 04	sta $048e			sta 	0+StringMemory
.b5da	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b5dc	8d 8f 04	sta $048f			sta 	1+StringMemory
.b5df	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b5e2	60		rts				rts
.b5e3					StringSpaceInitialise:
.b5e3	20 d0 a1	jsr $a1d0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b5e6	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b5e8	8d 90 04	sta $0490			sta 	StringInitialised
.b5eb	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b5ee	8d 91 04	sta $0491			sta 	StringTempPointer
.b5f1	ad 8f 04	lda $048f			lda 	StringMemory+1
.b5f4	3a		dec a				dec 	a
.b5f5	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b5f8	60		rts				rts
.b5f9					StringTempAllocate:
.b5f9	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b5fb	b0 35		bcs $b632			bcs 	_STALength
.b5fd	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b600	30 05		bmi $b607			bmi 	_STAAllocate
.b602	48		pha				pha 								; save value to subtract.
.b603	20 e3 b5	jsr $b5e3			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b606	68		pla				pla 								; restore it
.b607					_STAAllocate:
.b607	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b609	18		clc				clc  								; deliberate allows one more
.b60a	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b60d	8d 91 04	sta $0491			sta 	StringTempPointer
.b610	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b613	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b615	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b618	69 ff		adc #$ff			adc 	#$FF
.b61a	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b61d	85 3d		sta $3d				sta 	zsTemp+1
.b61f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b622	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b625	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b628	a9 10		lda #$10			lda 	#NSTString
.b62a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b62d	a9 00		lda #$00			lda 	#0 							; clear the target string
.b62f	92 3c		sta ($3c)			sta 	(zsTemp)
.b631	60		rts				rts
.b632					_STALength:
.b632	a9 09		lda #$09		lda	#9
.b634	4c 09 99	jmp $9909		jmp	ErrorHandler
.b637					StringTempWrite:
.b637	48		pha				pha
.b638	92 3c		sta ($3c)			sta 	(zsTemp)
.b63a	e6 3c		inc $3c				inc 	zsTemp
.b63c	d0 02		bne $b640			bne 	_STWNoCarry
.b63e	e6 3d		inc $3d				inc 	zsTemp+1
.b640					_STWNoCarry:
.b640	a9 00		lda #$00			lda 	#0
.b642	92 3c		sta ($3c)			sta 	(zsTemp)
.b644	68		pla				pla
.b645	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a5ed					BackloadProgram:
.a5ed	a2 ff		ldx #$ff			ldx 	#$FF
.a5ef	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a5f2	20 1c a6	jsr $a61c			jsr 	BLReadByte
.a5f5	30 1e		bmi $a615			bmi 	_BPExit
.a5f7					_BPCopy:
.a5f7	e8		inx				inx  								; copy byte in
.a5f8	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a5fb	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a5fe	20 1c a6	jsr $a61c			jsr 	BLReadByte 					; read next byte
.a601	30 0a		bmi $a60d			bmi 	_BPEndLine 					; -ve = EOL
.a603	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a605	d0 02		bne $a609			bne 	_BPNotTab
.a607	a9 20		lda #$20			lda 	#' '
.a609					_BPNotTab:
.a609	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a60b	b0 ea		bcs $a5f7			bcs 	_BPCopy
.a60d					_BPEndLine:
.a60d	20 d2 a9	jsr $a9d2			jsr 	TokeniseLine 				; tokenise the line.
.a610	20 e3 8b	jsr $8be3			jsr 	EditProgramCode
.a613	80 d8		bra $a5ed			bra 	BackloadProgram
.a615					_BPExit:
.a615	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a618	20 a1 8c	jsr $8ca1			jsr 	ClearCommand 				; clear variables etc.
.a61b	60		rts				rts
.a61c					BLReadByte:
.a61c					_BLLoad:
.a61c	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a61f	ee 1d a6	inc $a61d			inc 	_BLLoad+1
.a622	d0 03		bne $a627			bne 	_BLNoCarry
.a624	ee 1e a6	inc $a61e			inc 	_BLLoad+2
.a627					_BLNoCarry:
.a627	c9 00		cmp #$00			cmp 	#0
.a629	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a62a					TokeniseSearchTable:
.a62a	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a62c	85 36		sta $36				sta 	zTemp0
.a62e	a0 00		ldy #$00			ldy 	#0
.a630	a9 80		lda #$80			lda 	#$80 						; token #
.a632	85 38		sta $38				sta 	zTemp1
.a634					_TSTLoop:
.a634	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a636	30 49		bmi $a681			bmi 	_TSTFail 					; -ve = end of table
.a638	f0 2e		beq $a668			beq 	_TSTNext 					; zero, check next it's a dummy
.a63a	c8		iny				iny 								; get the hash
.a63b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a63d	88		dey				dey
.a63e	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a641	d0 25		bne $a668			bne 	_TSTNext
.a643	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a646	38		sec				sec
.a647	ed 80 04	sbc $0480			sbc 	identStart
.a64a	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a64c	d0 1a		bne $a668			bne 	_TSTNext
.a64e	5a		phy				phy 								; save Y , we might fail
.a64f	c8		iny				iny 								; point to text
.a650	c8		iny				iny
.a651	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a654					_TSTCompareName:
.a654	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a657	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a659	d0 0c		bne $a667			bne 	_TSTNextPullY 				; fail, pullY and do next
.a65b	e8		inx				inx
.a65c	c8		iny				iny
.a65d	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a660	d0 f2		bne $a654			bne 	_TSTCompareName
.a662	7a		ply				ply 								; throw Y
.a663	a5 38		lda $38				lda 	zTemp1 						; get token #
.a665	38		sec				sec 								; return with CS = passed.
.a666	60		rts				rts
.a667					_TSTNextPullY:
.a667	7a		ply				ply 								; restore current, fall through.
.a668					_TSTNext:
.a668	e6 38		inc $38				inc 	zTemp1 						; token counter
.a66a	98		tya				tya
.a66b	18		clc				clc
.a66c	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a66e	1a		inc a				inc 	a 							; +1
.a66f	1a		inc a				inc 	a 							; +2
.a670	a8		tay				tay
.a671	10 c1		bpl $a634			bpl 	_TSTLoop 					; if Y < $80 loop back
.a673	98		tya				tya 								; add Y to zTemp0 and reset Y
.a674	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a676	18		clc				clc  								; but have tables > 255 bytes
.a677	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a679	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a67b	90 b7		bcc $a634			bcc 	_TSTLoop
.a67d	e6 37		inc $37				inc 	zTemp0+1
.a67f	80 b3		bra $a634			bra 	_TSTLoop
.a681					_TSTFail:
.a681	18		clc				clc
.a682	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a683					KeywordSet0:
>a683	00 65					.text	0,$65,""               ; $80 !0:EOF
>a685	00 58					.text	0,$58,""               ; $81 !1:SH1
>a687	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a689	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a68f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a697	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a69d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a6a4	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a6ac	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a6b3	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a6ba	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a6c0	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a6c8	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a6d0	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a6d6	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a6dd	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a6e3	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a6e8	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a6ec	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a6f4	28
>a6f5	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a6fd	28
>a6fe	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a704	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a70a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a710	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a717	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a71f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a725	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a72b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a730	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a734	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a73a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a742	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a749	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a750	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a758	43
>a759	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a75f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a765	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a76c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a772	02 9b 42 59				.text	2,$9b,"BY"             ; $a6 BY
>a776	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a7 CALL
>a77c	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a8 CIRCLE
>a784	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $a9 CLEAR
>a78b	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $aa CLS
>a790	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ab COLOR
>a797	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ac COLOUR
>a79f	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ad DATA
>a7a5	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ae DIM
>a7aa	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $af DOWNTO
>a7b2	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b0 ELSE
>a7b8	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b1 FROM
>a7be	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b2 GFX
>a7c3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b3 GOSUB
>a7ca	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b4 GOTO
>a7d0	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b5 HERE
>a7d6	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b6 IMAGE
>a7dd	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b7 LET
>a7e2	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b8 LINE
>a7e8	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b9 LOCAL
>a7ef	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ba OUTLINE
>a7f7	45
>a7f8	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $bb PLOT
>a7fe	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $bc PRINT
>a805	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $bd READ
>a80b	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $be RECT
>a811	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $bf REM
>a816	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c0 RETURN
>a81e	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c1 SOLID
>a825	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c2 SPRITE
>a82d	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c3 TEXT
>a833	02 a3 54 4f				.text	2,$a3,"TO"             ; $c4 TO
>a837	ff					.text	$FF
.a838					KeywordSet1:
>a838	00 65					.text	0,$65,""               ; $80 !0:EOF
>a83a	00 58					.text	0,$58,""               ; $81 !1:SH1
>a83c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a83e	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a846	4c 45
>a848	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a850	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a858	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a85d	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a863	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a868	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a870	45
>a871	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a876	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a87e	53
>a87f	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a885	ff					.text	$FF
.a886					KeywordSet2:
>a886	00 65					.text	0,$65,""               ; $80 !0:EOF
>a888	00 58					.text	0,$58,""               ; $81 !1:SH1
>a88a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a88c	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a891	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a896	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a89b	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a8a0	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a8a5	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a8aa	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a8af	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a8b4	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a8b9	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a8be	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a8c3	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a8c8	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a8cd	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a8d2	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a8d7	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a8dc	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a8e1	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a8e6	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a8eb	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a8f0	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a8f5	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a8fa	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a8ff	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a904	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a909	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a90e	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a913	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a918	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a91d	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a922	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a927	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a92c	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a931	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a936	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a93b	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a940	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a945	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a94a	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a94f	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a954	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a959	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a95e	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a963	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a968	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a96d	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a972	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a977	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a97c	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a981	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a986	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a98b	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a990	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a995	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a99a	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a99f	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a9a4	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a9a9	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a9ae	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a9b3	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a9b8	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a9bd	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a9c2	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a9c7	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a9cc	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a9d1	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a9d2					TokeniseLine:
.a9d2	20 5a ab	jsr $ab5a			jsr 	FixLineBufferCase 			; fix line case
.a9d5	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a9d7	8d a6 04	sta $04a6			sta 	tokenOffset
.a9da	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a9dd	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a9e0	a2 ff		ldx #$ff			ldx 	#$FF
.a9e2					_TKFindFirst:
.a9e2	e8		inx				inx
.a9e3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a9e6	f0 79		beq $aa61			beq 	_TKExit
.a9e8	c9 20		cmp #$20			cmp 	#' '
.a9ea	90 f6		bcc $a9e2			bcc 	_TKFindFirst
.a9ec	c9 30		cmp #$30			cmp 	#'0'
.a9ee	90 07		bcc $a9f7			bcc 	_TKNoLineNumber
.a9f0	c9 3a		cmp #$3a			cmp 	#'9'+1
.a9f2	b0 03		bcs $a9f7			bcs 	_TKNoLineNumber
.a9f4	20 84 ab	jsr $ab84			jsr 	TokeniseExtractLineNumber
.a9f7					_TKNoLineNumber:
.a9f7					_TKTokeniseLoop:
.a9f7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a9fa	f0 65		beq $aa61			beq 	_TKExit
.a9fc	e8		inx				inx
.a9fd	c9 20		cmp #$20			cmp 	#' '
.a9ff	f0 f6		beq $a9f7			beq 	_TKTokeniseLoop 			; keep looping if space found.
.aa01	ca		dex				dex 								; undo last get, A contains character, X is position.
.aa02	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.aa04	f0 61		beq $aa67			beq 	_TKTokeniseIdentifier
.aa06	c9 41		cmp #$41			cmp 	#'A'
.aa08	90 04		bcc $aa0e			bcc 	_TKTokenisePunctuation
.aa0a	c9 5b		cmp #$5b			cmp 	#'Z'+1
.aa0c	90 59		bcc $aa67			bcc 	_TKTokeniseIdentifier
.aa0e					_TKTokenisePunctuation:
.aa0e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.aa10	f0 27		beq $aa39			beq 	_TKString
.aa12	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aa14	f0 28		beq $aa3e			beq 	_TKHexConstant
.aa16	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aa18	f0 29		beq $aa43			beq 	_TKCheckDouble
.aa1a	c9 3e		cmp #$3e			cmp 	#'>'
.aa1c	f0 25		beq $aa43			beq 	_TKCheckDouble
.aa1e					_TKStandardPunctuation:
.aa1e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.aa21	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aa23	90 0e		bcc $aa33			bcc 	_TKNoShift
.aa25	48		pha				pha 								; save
.aa26	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aa28	85 36		sta $36				sta 	zTemp0
.aa2a	68		pla				pla
.aa2b	29 20		and #$20			and 	#32 						; bit 5
.aa2d	4a		lsr a				lsr 	a 							; shift into bit 3
.aa2e	4a		lsr a				lsr 	a
.aa2f	05 36		ora $36				ora 	zTemp0
.aa31	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aa33					_TKNoShift:
.aa33	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte 			; write the punctuation character
.aa36	e8		inx				inx 								; consume the character
.aa37	80 be		bra $a9f7			bra 	_TKTokeniseLoop 			; and loop round again.
.aa39					_TKString:
.aa39	20 e9 aa	jsr $aae9			jsr 	TokeniseString
.aa3c	80 b9		bra $a9f7			bra 	_TKTokeniseLoop
.aa3e					_TKHexConstant:
.aa3e	20 24 ab	jsr $ab24			jsr 	TokeniseHexConstant
.aa41	80 b4		bra $a9f7			bra 	_TKTokeniseLoop
.aa43					_TKCheckDouble:
.aa43	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aa46	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aa48	90 d4		bcc $aa1e			bcc 	_TKStandardPunctuation
.aa4a	c9 3f		cmp #$3f			cmp 	#'>'+1
.aa4c	b0 d0		bcs $aa1e			bcs 	_TKStandardPunctuation
.aa4e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aa51	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aa53	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aa54	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aa57	38		sec				sec
.aa58	e9 3c		sbc #$3c			sbc 	#'<'
.aa5a	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.aa5d	e8		inx				inx 								; consume both
.aa5e	e8		inx				inx
.aa5f	80 96		bra $a9f7			bra 	_TKTokeniseLoop
.aa61	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.aa63	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.aa66	60		rts				rts
.aa67					_TKTokeniseIdentifier:
.aa67	8e 80 04	stx $0480			stx 	identStart 					; save start
.aa6a	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.aa6d					_TKCheckLoop:
.aa6d	e8		inx				inx 								; look at next, we know first is identifier.
.aa6e	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.aa71	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.aa73	f0 f8		beq $aa6d			beq 	_TKCheckLoop
.aa75	c9 30		cmp #$30			cmp	 	#"0"
.aa77	90 0c		bcc $aa85			bcc 	_TKEndIdentifier
.aa79	c9 3a		cmp #$3a			cmp 	#"9"+1
.aa7b	90 f0		bcc $aa6d			bcc 	_TKCheckLoop
.aa7d	c9 41		cmp #$41			cmp	 	#"A"
.aa7f	90 04		bcc $aa85			bcc 	_TKEndIdentifier
.aa81	c9 5b		cmp #$5b			cmp 	#"Z"+1
.aa83	90 e8		bcc $aa6d			bcc 	_TKCheckLoop
.aa85					_TKEndIdentifier:
.aa85	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.aa88	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.aa8a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.aa8c	f0 06		beq $aa94			beq 	_TKHasTypeCharacter
.aa8e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.aa90	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.aa92	d0 07		bne $aa9b			bne 	_TKNoTypeCharacter
.aa94					_TKHasTypeCharacter:
.aa94	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.aa97	e8		inx				inx 								; read next
.aa98	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa9b					_TKNoTypeCharacter:
.aa9b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.aa9d	d0 09		bne $aaa8			bne 	_TKNoArray
.aa9f	e8		inx				inx 								; skip the (
.aaa0	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.aaa3	09 04		ora #$04			ora 	#$04
.aaa5	8d 84 04	sta $0484			sta 	identTypeByte
.aaa8					_TKNoArray:
.aaa8	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.aaab	20 45 ab	jsr $ab45			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.aaae	a0 a6		ldy #$a6			ldy 	#(KeywordSet0) >> 8
.aab0	a9 83		lda #$83			lda 	#(KeywordSet0) & $FF
.aab2	20 2a a6	jsr $a62a			jsr 	TokeniseSearchTable
.aab5	a2 00		ldx #$00			ldx 	#0
.aab7	b0 1f		bcs $aad8			bcs 	_TKFoundToken
.aab9	a0 a8		ldy #$a8			ldy 	#(KeywordSet1) >> 8
.aabb	a9 38		lda #$38			lda 	#(KeywordSet1) & $FF
.aabd	20 2a a6	jsr $a62a			jsr 	TokeniseSearchTable
.aac0	a2 81		ldx #$81			ldx 	#$81
.aac2	b0 14		bcs $aad8			bcs 	_TKFoundToken
.aac4	a0 a8		ldy #$a8			ldy 	#(KeywordSet2) >> 8
.aac6	a9 86		lda #$86			lda 	#(KeywordSet2) & $FF
.aac8	20 2a a6	jsr $a62a			jsr 	TokeniseSearchTable
.aacb	a2 82		ldx #$82			ldx 	#$82
.aacd	b0 09		bcs $aad8			bcs 	_TKFoundToken
.aacf	20 d5 ab	jsr $abd5			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.aad2	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aad5	4c f7 a9	jmp $a9f7			jmp 	_TKTokeniseLoop 			; and go round again.
.aad8					_TKFoundToken:
.aad8	48		pha				pha 								; save token
.aad9	8a		txa				txa 								; shift in X, is there one ?
.aada	f0 03		beq $aadf			beq 	_TKNoTShift
.aadc	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte 			; if so, write it out
.aadf					_TKNoTShift:
.aadf	68		pla				pla 								; restore and write token
.aae0	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.aae3	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aae6	4c f7 a9	jmp $a9f7			jmp 	_TKTokeniseLoop 			; and go round again.
.aae9					TokeniseString:
.aae9	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.aaeb	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.aaee	e8		inx				inx									; start of quoted string.
.aaef	da		phx				phx 								; push start of string on top
.aaf0	ca		dex				dex
.aaf1					_TSFindEnd:
.aaf1	e8		inx				inx
.aaf2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.aaf5	f0 04		beq $aafb			beq 	_TSEndOfString
.aaf7	c9 22		cmp #$22			cmp 	#'"'
.aaf9	d0 f6		bne $aaf1			bne 	_TSFindEnd
.aafb					_TSEndOfString:
.aafb	7a		ply				ply  								; so now Y is first character, X is character after end.
.aafc	48		pha				pha 								; save terminating character
.aafd	20 05 ab	jsr $ab05			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ab00	68		pla				pla 								; terminating character
.ab01	f0 01		beq $ab04			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ab03	e8		inx				inx
.ab04					_TSNotQuote:
.ab04	60		rts				rts
.ab05					TOWriteBlockXY:
.ab05	86 36		stx $36				stx 	zTemp0 						; write end character
.ab07	98		tya				tya
.ab08	49 ff		eor #$ff			eor 	#$FF
.ab0a	38		sec				sec
.ab0b	65 36		adc $36				adc 	zTemp0
.ab0d	1a		inc a				inc 	a 							; one extra for NULL
.ab0e	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.ab11					_TOBlockLoop:
.ab11	c4 36		cpy $36				cpy 	zTemp0
.ab13	f0 09		beq $ab1e			beq 	_TOBlockExit
.ab15	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.ab18	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.ab1b	c8		iny				iny
.ab1c	80 f3		bra $ab11			bra 	_TOBlockLoop
.ab1e					_TOBlockExit:
.ab1e	a9 00		lda #$00			lda 	#0
.ab20	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.ab23	60		rts				rts
.ab24					TokeniseHexConstant:
.ab24	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ab26	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.ab29	e8		inx				inx									; start of quoted string.
.ab2a	da		phx				phx 								; push start of constant on top
.ab2b	ca		dex				dex
.ab2c					_THFindLoop:
.ab2c	e8		inx				inx
.ab2d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab30	c9 30		cmp #$30			cmp 	#"0"
.ab32	90 0c		bcc $ab40			bcc 	_THFoundEnd
.ab34	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab36	90 f4		bcc $ab2c			bcc 	_THFindLoop
.ab38	c9 41		cmp #$41			cmp 	#"A"
.ab3a	90 04		bcc $ab40			bcc 	_THFoundEnd
.ab3c	c9 47		cmp #$47			cmp 	#"F"+1
.ab3e	90 ec		bcc $ab2c			bcc 	_THFindLoop
.ab40					_THFoundEnd:
.ab40	7a		ply				ply 								; restore start
.ab41	20 05 ab	jsr $ab05			jsr 	TOWriteBlockXY 				; output the block
.ab44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ab45					TokeniseCalculateHash:
.ab45	da		phx				phx
.ab46	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ab49	a9 00		lda #$00			lda 	#0
.ab4b					_TCHLoop:
.ab4b	18		clc				clc
.ab4c	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.ab4f	e8		inx				inx
.ab50	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ab53	d0 f6		bne $ab4b			bne 	_TCHLoop
.ab55	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ab58	fa		plx				plx
.ab59	60		rts				rts
.ab5a					FixLineBufferCase:
.ab5a	a2 00		ldx #$00			ldx 	#0
.ab5c					_FLBCLoop:
.ab5c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ab5f	f0 22		beq $ab83			beq 	_FLBCExit 					; end of string.
.ab61	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ab63	f0 11		beq $ab76			beq 	_FLBCInQuotes
.ab65	e8		inx				inx
.ab66	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ab68	90 f2		bcc $ab5c			bcc 	_FLBCLoop
.ab6a	c9 7b		cmp #$7b			cmp 	#'z'+1
.ab6c	b0 ee		bcs $ab5c			bcs 	_FLBCLoop
.ab6e	38		sec				sec 								; make U/C
.ab6f	e9 20		sbc #$20			sbc 	#32
.ab71	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ab74	80 e6		bra $ab5c			bra 	_FLBCLoop
.ab76					_FLBCInQuotes:
.ab76	e8		inx				inx 								; advance
.ab77	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ab7a	f0 07		beq $ab83			beq 	_FLBCExit 					; exit on EOS
.ab7c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ab7e	d0 f6		bne $ab76			bne 	_FLBCInQuotes
.ab80	e8		inx				inx 								; skip over it
.ab81	80 d9		bra $ab5c			bra 	_FLBCLoop
.ab83					_FLBCExit:
.ab83	60		rts				rts
.ab84					TokeniseExtractLineNumber:
.ab84	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.ab87	48		pha				pha
.ab88	ad a7 04	lda $04a7			lda 	tokenLineNumber
.ab8b	48		pha				pha
.ab8c	20 c2 ab	jsr $abc2			jsr 	_TELNTimes2 				; line # x 4
.ab8f	20 c2 ab	jsr $abc2			jsr 	_TELNTimes2 				; line # x 2
.ab92	18		clc				clc 								; add stacked value
.ab93	68		pla				pla
.ab94	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ab97	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ab9a	68		pla				pla
.ab9b	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.ab9e	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.aba1	20 c2 ab	jsr $abc2			jsr 	_TELNTimes2 				; line # x 10
.aba4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.aba7	e8		inx				inx
.aba8	29 0f		and #$0f			and 	#15 						; add to line #
.abaa	18		clc				clc
.abab	6d a7 04	adc $04a7			adc 	tokenLineNumber
.abae	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abb1	90 03		bcc $abb6			bcc 	_TLENNoCarry
.abb3	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.abb6					_TLENNoCarry:
.abb6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.abb9	c9 30		cmp #$30			cmp 	#'0'
.abbb	90 04		bcc $abc1			bcc 	_TLENExit
.abbd	c9 3a		cmp #$3a			cmp 	#'9'+1
.abbf	90 c3		bcc $ab84			bcc 	TokeniseExtractLineNumber
.abc1					_TLENExit:
.abc1	60		rts				rts
.abc2					_TELNTimes2:
.abc2	0e a7 04	asl $04a7			asl 	tokenLineNumber
.abc5	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.abc8	60		rts				rts
.abc9					TokeniseWriteByte:
.abc9	da		phx				phx
.abca	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.abcd	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.abd0	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.abd3	fa		plx				plx
.abd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.abd5					CheckCreateVariableRecord:
.abd5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.abd7	85 36		sta $36				sta 	0+zTemp0
.abd9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.abdb	85 37		sta $37				sta 	1+zTemp0
.abdd					_CCVSearch:
.abdd	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.abdf	f0 2c		beq $ac0d			beq 	_CCVFail
.abe1	a0 01		ldy #$01			ldy 	#1 							; read the hash
.abe3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.abe5	cd 83 04	cmp $0483			cmp 	identHash
.abe8	d0 16		bne $ac00			bne 	_CCVNext
.abea	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.abec	ae 80 04	ldx $0480			ldx 	identStart
.abef					_CCVCompare:
.abef	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.abf2	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.abf4	e8		inx				inx 								; advance pointers
.abf5	c8		iny				iny
.abf6	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.abf7	d0 07		bne $ac00			bne 	_CCVNext  					; didn't match go to next.
.abf9	90 f4		bcc $abef			bcc 	_CCVCompare 				; not finished yet.
.abfb	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.abfe	f0 41		beq $ac41			beq 	_CCVFound 					; yes, we were successful
.ac00					_CCVNext:
.ac00	18		clc				clc
.ac01	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ac03	65 36		adc $36				adc 	zTemp0
.ac05	85 36		sta $36				sta 	zTemp0
.ac07	90 d4		bcc $abdd			bcc 	_CCVSearch
.ac09	e6 37		inc $37				inc 	zTemp0+1
.ac0b	80 d0		bra $abdd			bra 	_CCVSearch
.ac0d					_CCVFail:
.ac0d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ac0f	ad 83 04	lda $0483			lda 	identHash
.ac12	91 36		sta ($36),y			sta 	(zTemp0),y
.ac14	c8		iny				iny 								; offset 2 is the type byte
.ac15	ad 84 04	lda $0484			lda 	identTypeByte
.ac18	91 36		sta ($36),y			sta 	(zTemp0),y
.ac1a	c8		iny				iny
.ac1b					_CCVData:
.ac1b	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ac1d	91 36		sta ($36),y			sta 	(zTemp0),y
.ac1f	c8		iny				iny
.ac20	c0 08		cpy #$08			cpy 	#8
.ac22	90 f7		bcc $ac1b			bcc 	_CCVData
.ac24	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ac27					_CCVCopyName:
.ac27	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ac2a	91 36		sta ($36),y			sta 	(zTemp0),y
.ac2c	e8		inx				inx
.ac2d	c8		iny				iny
.ac2e	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ac31	d0 f4		bne $ac27			bne 	_CCVCopyName
.ac33	98		tya				tya 								; patch offset
.ac34	92 36		sta ($36)			sta 	(zTemp0)
.ac36	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ac38	91 36		sta ($36),y			sta 	(zTemp0),y
.ac3a	88		dey				dey
.ac3b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ac3d	09 80		ora #$80			ora 	#$80
.ac3f	91 36		sta ($36),y			sta 	(zTemp0),y
.ac41					_CCVFound:
.ac41	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ac43	38		sec				sec
.ac44	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ac46	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ac48	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.ac4b	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ac4d	20 c9 ab	jsr $abc9			jsr 	TokeniseWriteByte
.ac50	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
