
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Thu Jan  5 09:08:01 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$280						MemoryStorage = $280
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$0800						VariableSpace = $0800
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0280						identStart:
>0280								.fill 	1
.0281						identTypeStart:
>0281								.fill 	1
.0282						identTypeEnd:
>0282								.fill 	1
.0283						identHash:
>0283								.fill 	1
.0284						identTypeByte:
>0284								.fill 	1	 						; (see tokenising.pdf)
.0285						encodeState:
>0285								.fill 	1
.0286						digitTemp:
>0286								.fill 	1
.0287						decimalCount:
>0287								.fill 	1
.0288						randomSeed:
>0288								.fill 	4
.028c						lowMemPtr:
>028c								.fill 	2
.028e						stringMemory:
>028e								.fill 	2
.0290						stringInitialised:
>0290								.fill 	1
.0291						stringTempPointer:
>0291								.fill 	2
.0293						breakCheck:
>0293								.fill 	1
.0294						decimalPlaces:
>0294								.fill 	1
.0295						dbOffset:
>0295								.fill 	1
.0296						lastParameter:
>0296								.fill 	1
.0297						dataPointer:
>0297								.fill 	5
.029c						inDataStatement:
>029c								.fill 	1
.029d						tbOffset:
>029d								.fill 	1
.029e						AssemblerAddress:
>029e								.fill 	2
.02a0						AssemblerControl:
>02a0								.fill 	1
.02a1						ParamStart:
>02a1								.fill 	2
.02a3						IsGroup1:
>02a3								.fill 	1
.02a4						BaseOpcode:
>02a4								.fill 	1
.02a5						ModeMask:
>02a5								.fill 	1
.02a6						listIndent:
>02a6								.fill 	1
.02a7						lcLastCharacter:
>02a7								.fill 	1
.02a8						isPrintFlag:
>02a8								.fill 	1
.02a9						currentListColour:
>02a9								.fill 	1
.02aa						tokenOffset:
>02aa								.fill 	1
.02ab						tokenLineNumber:
>02ab								.fill 	2
.02ad						tokenBuffer:
>02ad								.fill 	253
.03aa						lineBuffer:
>03aa								.fill 	253
.04a7						numberBuffer:
>04a7								.fill 	34
.04c9						decimalBuffer:
>04c9								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_CPRINT                           = $b8; $b8 CPRINT
=$b9						KWD_DATA                             = $b9; $b9 DATA
=$ba						KWD_DIM                              = $ba; $ba DIM
=$bb						KWD_DOWNTO                           = $bb; $bb DOWNTO
=$bc						KWD_ELSE                             = $bc; $bc ELSE
=$bd						KWD_FROM                             = $bd; $bd FROM
=$be						KWD_GFX                              = $be; $be GFX
=$bf						KWD_GOSUB                            = $bf; $bf GOSUB
=$c0						KWD_GOTO                             = $c0; $c0 GOTO
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_INPUT                            = $c3; $c3 INPUT
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_PRINT                            = $d0; $d0 PRINT
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_RETURN                           = $d4; $d4 RETURN
=$d5						KWD_SOLID                            = $d5; $d5 SOLID
=$d6						KWD_SOUND                            = $d6; $d6 SOUND
=$d7						KWD_SPRITE                           = $d7; $d7 SPRITE
=$d8						KWD_TEXT                             = $d8; $d8 TEXT
=$d9						KWD_TO                               = $d9; $d9 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c b7 80	jmp $80b7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 4b bc	jsr $bc4b		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 0d bc	jsr $bc0d		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 5c bc	jsr $bc5c		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 57 bc	jsr $bc57		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 b1 bc	jsr $bcb1		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 bb bc	jsr $bcbb		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLReadBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 dd bc	jsr $bcdd		jsr	Export_KNLReadBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLWriteBlock:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 1a bd	jsr $bd1a		jsr	Export_KNLWriteBlock
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						KNLCloseFile:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 97 bc	jsr $bc97		jsr	Export_KNLCloseFile
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						GXGraphicDraw:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDCommand:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 80 bb	jsr $bb80		jsr	Export_SNDCommand
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						SNDUpdate:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 b3 bb	jsr $bbb3		jsr	Export_SNDUpdate
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKListConvertLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 31 b5	jsr $b531		jsr	Export_TKListConvertLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts
.80ad						TKTokeniseLine:
.80ad		e6 0d		inc $0d			inc 8+5
.80af		20 c5 b7	jsr $b7c5		jsr	Export_TKTokeniseLine
.80b2		08		php			php
.80b3		c6 0d		dec $0d			dec 8+5
.80b5		28		plp			plp
.80b6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80b7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80b9		9a		txs				txs
.80ba		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80bc		09 80		ora #$80			ora 	#$80
.80be		85 00		sta $00				sta 	0
.80c0		20 be a9	jsr $a9be			jsr		UpdateFont 					; update font if between FPGA updates.
.80c3		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.80c6		9c df 04	stz $04df			stz 	DefaultDrive 				; zero the default drive.
.80c9		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cb		aa		tax				tax
.80cc		a8		tay				tay
.80cd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.80d0		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d2		20 8f 80	jsr $808f			jsr 	SNDCommand
.80d5		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80da		a9 09		lda #$09			lda 	#9
.80dc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80df		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80e2		64 01		stz $01				stz 	1
.80e4		ad ad d6	lda $d6ad			lda 	$D6AD
.80e7		20 41 82	jsr $8241			jsr 	PrintHex
.80ea		ad ac d6	lda $d6ac			lda 	$D6AC
.80ed		20 41 82	jsr $8241			jsr 	PrintHex
.80f0		ad ab d6	lda $d6ab			lda 	$D6AB
.80f3		20 41 82	jsr $8241			jsr 	PrintHex
.80f6		ad aa d6	lda $d6aa			lda 	$D6AA
.80f9		20 41 82	jsr $8241			jsr 	PrintHex
.80fc		a9 20		lda #$20			lda 	#32
.80fe		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8101		ad a8 d6	lda $d6a8			lda 	$D6A8
.8104		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8107		ad a9 d6	lda $d6a9			lda 	$D6A9
.810a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.810d		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.810f		a9 1d		lda #$1d			lda 	#Prompt & $FF
.8111		20 0e 93	jsr $930e			jsr 	PrintStringXA
.8114		20 0d 8d	jsr $8d0d			jsr 	NewProgram 					; erase current program
.8117		4c 84 84	jmp $8484			jmp 	WarmStart					; make same size.
.811a		4c 84 84	jmp $8484			jmp 	WarmStart
>811d		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>811f		09 09 30 35 2f 30 31 2f			.text 9,9,"05/01/23 23"
>8127		32 33 20 32 33

;******  Return to file: ./common/aa.system/00start.asm

>812c		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.8130						ProcessEvents:
.8130		a9 ca		lda #$ca			lda     #<event 					; tell kernel where events go.
.8132		85 f0		sta $f0				sta     kernel.args.events+0
.8134		a9 06		lda #$06			lda     #>event
.8136		85 f1		sta $f1				sta     kernel.args.events+1
.8138		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.813b		b0 16		bcs $8153			bcs 	_PEExitZ 					; nothing left to process.
.813d		ad ca 06	lda $06ca			lda 	event.type 					; go back if event not key.pressed.
.8140		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8142		d0 ec		bne $8130			bne 	ProcessEvents
.8144		ad d0 06	lda $06d0			lda	 	event.key.flags 			; is event.key.flags = 0 ?
.8147		d0 e7		bne $8130			bne 	ProcessEvents
.8149		ad cf 06	lda $06cf			lda 	event.key.ascii 			; is it Ctrl+C
.814c		c9 03		cmp #$03			cmp 	#3
.814e		d0 e0		bne $8130			bne 	ProcessEvents  				; no, keep going.
.8150		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8152		60		rts				rts
.8153						_PEExitZ:
.8153		a9 00		lda #$00			lda 	#0
.8155		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8156						AssembleGroup1:
.8156		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8158		8d a5 02	sta $02a5			sta 	ModeMask 					; initialise the mode mask - all for all
.815b		80 02		bra $815f			bra 	AsmGroup12
.815d						AssembleGroup2:
.815d		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.815f						AsmGroup12:
.815f		8d a3 02	sta $02a3			sta 	IsGroup1 					; save the 'group 1' flag
.8162		68		pla				pla 								; pop the return address to access the information following.
.8163		fa		plx				plx
.8164		20 eb 81	jsr $81eb			jsr 	AccessParameters 			; get opcode and save as base
.8167		8d a4 02	sta $02a4			sta 	BaseOpcode
.816a		ad a3 02	lda $02a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.816d		d0 08		bne $8177			bne 	_AG12HaveMask
.816f		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8171		20 f3 81	jsr $81f3			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8174		8d a5 02	sta $02a5			sta 	ModeMask
.8177						_AG12HaveMask:
.8177		20 27 83	jsr $8327			jsr 	TypeAndCalculateOperand 	; get zero page type
.817a		da		phx				phx 								; save found address mode
.817b		20 57 82	jsr $8257			jsr 	AssembleModeX
.817e		fa		plx				plx  								; restore address mode
.817f		b0 0b		bcs $818c			bcs 	_AG12Exit
.8181		20 8d 81	jsr $818d			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8184		20 57 82	jsr $8257			jsr 	AssembleModeX
.8187		b0 03		bcs $818c			bcs 	_AG12Exit
.8189		4c 7e a3	jmp $a37e			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.818c						_AG12Exit:
.818c		60		rts				rts
.818d						PromoteToAbsolute:
.818d		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.818f		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8191		f0 19		beq $81ac			beq 	_PTADo
.8193		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8195		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8197		f0 13		beq $81ac			beq 	_PTADo
.8199		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.819b		e0 80		cpx #$80			cpx 	#AM_ZEROY
.819d		f0 0d		beq $81ac			beq 	_PTADo
.819f		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.81a1		e0 d1		cpx #$d1			cpx 	#AM_IND
.81a3		f0 07		beq $81ac			beq 	_PTADo
.81a5		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.81a7		e0 c0		cpx #$c0			cpx 	#AM_INDX
.81a9		f0 01		beq $81ac			beq 	_PTADo
.81ab		60		rts				rts
.81ac						_PTADo:
.81ac		aa		tax				tax
.81ad		60		rts				rts
.81ae						AssembleGroup3:
.81ae		68		pla				pla 								; get parameters, which is just the opcode.
.81af		fa		plx				plx
.81b0		20 eb 81	jsr $81eb			jsr 	AccessParameters 			; get and output opcode
.81b3		20 03 82	jsr $8203			jsr 	AssemblerWriteByte
.81b6		20 8b 83	jsr $838b			jsr 	CalculateOperand 			; get a 16 bit operand
.81b9		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.81bb		38		sec				sec
.81bc		ed 9e 02	sbc $029e			sbc 	AssemblerAddress
.81bf		48		pha				pha 								; LSB in A
.81c0		a5 60		lda $60				lda 	NSMantissa1
.81c2		ed 9f 02	sbc $029f			sbc 	AssemblerAddress+1
.81c5		aa		tax				tax 								; MSB in X
.81c6		68		pla				pla
.81c7		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.81c8		69 7f		adc #$7f			adc 	#$7F
.81ca		90 01		bcc $81cd			bcc 	_AG3NoCarry
.81cc		e8		inx				inx
.81cd						_AG3NoCarry:
.81cd		38		sec				sec 								; fix back and write out anyways.
.81ce		e9 80		sbc #$80			sbc 	#$80
.81d0		20 03 82	jsr $8203			jsr 	AssemblerWriteByte
.81d3		e0 00		cpx #$00			cpx 	#0 							; was it in range
.81d5		f0 0a		beq $81e1			beq 	_AG3Exit
.81d7		ad a0 02	lda $02a0			lda 	AssemblerControl 			; are we allowing bad values ?
.81da		29 01		and #$01			and 	#1
.81dc		f0 03		beq $81e1			beq 	_AG3Exit
.81de		4c 83 a3	jmp $a383			jmp 	RangeError 					; no, branch is out of range
.81e1						_AG3Exit:
.81e1		60		rts				rts
.81e2						AssembleGroup4:
.81e2		68		pla				pla 								; pop address
.81e3		fa		plx				plx
.81e4		20 eb 81	jsr $81eb			jsr 	AccessParameters 			; access and get first
.81e7		20 03 82	jsr $8203			jsr 	AssemblerWriteByte 			; output it.
.81ea		60		rts				rts
.81eb						AccessParameters:
.81eb		8d a1 02	sta $02a1			sta 	ParamStart
.81ee		8e a2 02	stx $02a2			stx 	ParamStart+1
.81f1		a9 01		lda #$01			lda 	#1
.81f3						GetParameter:
.81f3		5a		phy				phy
.81f4		a8		tay				tay
.81f5		ad a1 02	lda $02a1			lda 	ParamStart
.81f8		85 36		sta $36				sta 	zTemp0
.81fa		ad a2 02	lda $02a2			lda 	ParamStart+1
.81fd		85 37		sta $37				sta 	zTemp0+1
.81ff		b1 36		lda ($36),y			lda 	(zTemp0),y
.8201		7a		ply				ply
.8202		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8203						AssemblerWriteByte:
.8203		48		pha			pha
.8204		ad a0 02	lda $02a0		lda 	AssemblerControl 				; check printing bytes ?
.8207		29 02		and #$02		and 	#2
.8209		f0 1b		beq $8226		beq 	_AWBNoPrint
.820b		ad 9f 02	lda $029f		lda		AssemblerAddress+1 				; print address
.820e		20 41 82	jsr $8241		jsr 	PrintHex
.8211		ad 9e 02	lda $029e		lda		AssemblerAddress
.8214		20 41 82	jsr $8241		jsr 	PrintHex
.8217		a9 20		lda #$20		lda 	#' '
.8219		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.821c		68		pla			pla 									; print byte
.821d		48		pha			pha
.821e		20 41 82	jsr $8241		jsr 	PrintHex
.8221		a9 0d		lda #$0d		lda 	#13
.8223		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8226						_AWBNoPrint:
.8226		ad 9e 02	lda $029e		lda		AssemblerAddress				; copy address to zTemp0
.8229		85 36		sta $36			sta 	zTemp0
.822b		ad 9f 02	lda $029f		lda		AssemblerAddress+1
.822e		f0 0e		beq $823e		beq 	_AWBRange
.8230		85 37		sta $37			sta 	zTemp0+1
.8232		68		pla			pla 									; write byte out
.8233		92 36		sta ($36)		sta 	(zTemp0)
.8235		ee 9e 02	inc $029e		inc 	AssemblerAddress 				; bump address
.8238		d0 03		bne $823d		bne 	_AWBNoCarry
.823a		ee 9f 02	inc $029f		inc 	AssemblerAddress+1
.823d						_AWBNoCarry:
.823d		60		rts			rts
.823e						_AWBRange:
.823e		4c 83 a3	jmp $a383		jmp 	RangeError
.8241						PrintHex:
.8241		48		pha				pha
.8242		4a		lsr a				lsr 	a
.8243		4a		lsr a				lsr 	a
.8244		4a		lsr a				lsr 	a
.8245		4a		lsr a				lsr 	a
.8246		20 4a 82	jsr $824a			jsr 	_PrintNibble
.8249		68		pla				pla
.824a						_PrintNibble:
.824a		29 0f		and #$0f			and 	#15
.824c		c9 0a		cmp #$0a			cmp 	#10
.824e		90 02		bcc $8252			bcc 	_NoShift
.8250		69 06		adc #$06			adc 	#6
.8252						_NoShift:
.8252		69 30		adc #$30			adc 	#48
.8254		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8257						AssembleModeX:
.8257		5a		phy				phy
.8258		ad a3 02	lda $02a3			lda 	IsGroup1
.825b		f0 17		beq $8274			beq 	_AMXGroup2
.825d		8a		txa				txa 							; is it in group # 1
.825e		29 40		and #$40			and 	#AM_ISG1
.8260		f0 4d		beq $82af			beq 	_AMXFail 				; no, give up.
.8262		8a		txa				txa 							; get back.
.8263		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8265		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8267		d0 22		bne $828b			bne 	_AMXHaveInfo
.8269		ad a4 02	lda $02a4			lda 	BaseOpcode 				; cannot store immediate.
.826c		c9 81		cmp #$81			cmp 	#$81
.826e		f0 3f		beq $82af			beq 	_AMXFail
.8270		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8272		80 17		bra $828b			bra 	_AMXHaveInfo 			; odd design decision there.
.8274						_AMXGroup2:
.8274		8a		txa				txa 							; is it in group 2 ?
.8275		29 20		and #$20			and 	#AM_ISG2
.8277		f0 36		beq $82af			beq 	_AMXFail 				; no, give up.
.8279		8a		txa				txa 							; get the offset into Y
.827a		29 1f		and #$1f			and 	#$1F
.827c		4a		lsr a				lsr 	a 						; make it 0-7.
.827d		4a		lsr a				lsr  	a
.827e		a8		tay				tay
.827f		ad a5 02	lda $02a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8282						_AMXCheckOkay:
.8282		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8283		88		dey				dey
.8284		10 fc		bpl $8282			bpl 	_AMXCheckOkay
.8286		90 27		bcc $82af			bcc 	_AMXFail 				; not allowed.
.8288		8a		txa				txa  							; get mask back
.8289		29 1f		and #$1f			and 	#$1F
.828b						_AMXHaveInfo:
.828b		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.828d		10 04		bpl $8293			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.828f		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8291		d0 1c		bne $82af			bne 	_AMXFail
.8293						_AMXAnySize:
.8293		18		clc				clc 							; add offset to the base opcode
.8294		6d a4 02	adc $02a4			adc 	BaseOpcode
.8297						_AMXOutputCode:
.8297		20 03 82	jsr $8203			jsr 	AssemblerWriteByte 		; write the opcode out.
.829a		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.829c		f0 0e		beq $82ac			beq 	_AMXExit
.829e		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.82a0		20 03 82	jsr $8203			jsr 	AssemblerWriteByte
.82a3		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.82a5		30 05		bmi $82ac			bmi 	_AMXExit
.82a7		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.82a9		20 03 82	jsr $8203			jsr 	AssemblerWriteByte
.82ac						_AMXExit:
.82ac		7a		ply				ply
.82ad		38		sec				sec
.82ae		60		rts				rts
.82af						_AMXFail:
.82af		a0 00		ldy #$00			ldy 	#0
.82b1						_AMXCheckOddities:
.82b1		8a		txa				txa
.82b2		d9 d9 82	cmp $82d9,y			cmp 	ExtraOpcode+2,y 		; match address mode
.82b5		d0 15		bne $82cc			bne 	_AMXCONext
.82b7		b9 d7 82	lda $82d7,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.82ba		cd a4 02	cmp $02a4			cmp 	BaseOpcode
.82bd		d0 0d		bne $82cc			bne 	_AMXCONext
.82bf		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.82c1		10 04		bpl $82c7			bpl 	_AMXCONotZero
.82c3		a5 60		lda $60				lda 	NSMantissa1
.82c5		d0 05		bne $82cc			bne 	_AMXCONext
.82c7						_AMXCONotZero:
.82c7		b9 d8 82	lda $82d8,y			lda 	ExtraOpcode+1,y 		; get new opcode
.82ca		80 cb		bra $8297			bra 	_AMXOutputCode 			; and assemble it
.82cc						_AMXCONext:
.82cc		c8		iny				iny
.82cd		c8		iny				iny
.82ce		c8		iny				iny
.82cf		b9 d7 82	lda $82d7,y			lda 	ExtraOpcode+0,y 		; end of table
.82d2		d0 dd		bne $82b1			bne 	_AMXCheckOddities
.82d4						_AMXCOFail:
.82d4		7a		ply				ply
.82d5		18		clc				clc
.82d6		60		rts				rts
.82d7						ExtraOpcode:
>82d7		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>82da		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>82dd		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>82e0		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>82e3		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>82e6		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>82e9		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>82ec		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>82ef		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>82f2		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>82f5		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.82f6						LabelHere:
.82f6		c8		iny				iny 								; skip .
.82f7		a2 00		ldx #$00			ldx 	#0 							; get a term
.82f9		20 03 9c	jsr $9c03			jsr 	EvaluateTerm
.82fc		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.82fe		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8300		d0 22		bne $8324			bne 	_ALType 					; otherwise typing error
.8302		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8304		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8306		b5 60		lda $60,x			lda 	NSMantissa1,x
.8308		85 37		sta $37				sta 	zTemp0+1
.830a		5a		phy				phy 								; copy address in (64k)
.830b		a0 01		ldy #$01			ldy 	#1
.830d		ad 9e 02	lda $029e			lda	 	AssemblerAddress
.8310		92 36		sta ($36)			sta 	(zTemp0)
.8312		ad 9f 02	lda $029f			lda	 	AssemblerAddress+1
.8315		91 36		sta ($36),y			sta 	(zTemp0),y
.8317		c8		iny				iny
.8318		a9 00		lda #$00			lda 	#0 							; zero the rest.
.831a		91 36		sta ($36),y			sta 	(zTemp0),y
.831c		c8		iny				iny
.831d		91 36		sta ($36),y			sta 	(zTemp0),y
.831f		c8		iny				iny
.8320		91 36		sta ($36),y			sta 	(zTemp0),y
.8322		7a		ply				ply
.8323		60		rts				rts
.8324						_ALType:
.8324		4c 88 a3	jmp $a388			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8327						TypeAndCalculateOperand:
.8327		b1 30		lda ($30),y			lda 	(codePtr),y
.8329		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.832b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.832d		f0 5b		beq $838a			beq 	_TACOExit
.832f		c9 80		cmp #$80			cmp 	#KWC_EOL
.8331		f0 57		beq $838a			beq 	_TACOExit
.8333		c8		iny				iny
.8334		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8336		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8338		f0 51		beq $838b			beq 	CalculateOperand
.833a		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.833c		f0 1f		beq $835d			beq 	_TACOIndirect
.833e		88		dey				dey 								; undo get of first character
.833f		20 8b 83	jsr $838b			jsr 	CalculateOperand 			; get operand
.8342		b1 30		lda ($30),y			lda 	(codePtr),y
.8344		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8346		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8348		d0 40		bne $838a			bne 	_TACOExit
.834a		c8		iny				iny
.834b		20 95 83	jsr $8395			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.834e		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8350		c9 58		cmp #$58			cmp 	#'X'
.8352		f0 36		beq $838a			beq 	_TACOExit
.8354		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8356		c9 59		cmp #$59			cmp 	#'Y'
.8358		f0 30		beq $838a			beq 	_TACOExit
.835a						_TACOSyntax:
.835a		4c 7e a3	jmp $a37e			jmp 	SyntaxError
.835d						_TACOIndirect:
.835d		20 8b 83	jsr $838b			jsr 	CalculateOperand 			; get the operand
.8360		b1 30		lda ($30),y			lda 	(codePtr),y
.8362		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8364		f0 17		beq $837d			beq 	_TACOIndX
.8366		20 9c 92	jsr $929c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8369		b1 30		lda ($30),y			lda 	(codePtr),y
.836b		a2 d1		ldx #$d1			ldx 	#AM_IND
.836d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.836f		d0 19		bne $838a			bne 	_TACOExit
.8371		c8		iny				iny
.8372		20 95 83	jsr $8395			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8375		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8377		d0 e1		bne $835a			bne 	_TACOSyntax
.8379		a2 d0		ldx #$d0			ldx 	#AM_INDY
.837b		80 0d		bra $838a			bra 	_TACOExit
.837d						_TACOIndX:
.837d		c8		iny				iny
.837e		20 95 83	jsr $8395			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8381		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8383		d0 d5		bne $835a			bne 	_TACOSyntax
.8385		20 9c 92	jsr $929c			jsr 	CheckRightBracket			; check )
.8388		a2 c0		ldx #$c0			ldx 	#AM_INDX
.838a						_TACOExit:
.838a		60		rts				rts
.838b						CalculateOperand:
.838b		48		pha				pha
.838c		da		phx				phx
.838d		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.838f		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger
.8392		fa		plx				plx
.8393		68		pla				pla
.8394		60		rts				rts
.8395						TACOCheckXY:
.8395		b1 30		lda ($30),y			lda 	(codePtr),y
.8397		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8399		c9 40		cmp #$40			cmp 	#$40
.839b		d0 21		bne $83be			bne 	_TCXYFail
.839d		b1 30		lda ($30),y			lda 	(codePtr),y
.839f		18		clc				clc
.83a0		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.83a2		85 37		sta $37				sta 	zTemp0+1
.83a4		c8		iny				iny
.83a5		b1 30		lda ($30),y			lda 	(codePtr),y
.83a7		c8		iny				iny
.83a8		85 36		sta $36				sta 	zTemp0
.83aa		5a		phy				phy 								; save position
.83ab		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.83ad		b1 36		lda ($36),y			lda 	(zTemp0),y
.83af		d0 0c		bne $83bd			bne 	_TCXYPopFail
.83b1		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.83b3		b1 36		lda ($36),y			lda 	(zTemp0),y
.83b5		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.83b7		f0 08		beq $83c1			beq 	_TCXYFound
.83b9		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.83bb		f0 04		beq $83c1			beq 	_TCXYFound
.83bd						_TCXYPopFail:
.83bd		7a		ply				ply
.83be						_TCXYFail:
.83be		a9 00		lda #$00			lda 	#0
.83c0		60		rts				rts
.83c1						_TCXYFound:
.83c1		7a		ply				ply 								; restore position
.83c2		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.83c4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.83c5						BackloadProgram:
.83c5		20 0d 8d	jsr $8d0d			jsr 	NewProgram 					; does the actual NEW.
.83c8		a2 84		ldx #$84			ldx 	#_BLLoad >> 8
.83ca		a9 1c		lda #$1c			lda 	#_BLLoad & $FF
.83cc		20 0e 93	jsr $930e			jsr 	PrintStringXA
.83cf		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.83d1		8d d9 04	sta $04d9			sta 	BackLoadPage
.83d4		a9 00		lda #$00			lda 	#(($6000) & $FF)
.83d6		8d da 04	sta $04da			sta 	0+BackLoadPointer
.83d9		a9 60		lda #$60			lda 	#(($6000) >> 8)
.83db		8d db 04	sta $04db			sta 	1+BackLoadPointer
.83de		a9 ff		lda #$ff			lda 	#$FF
.83e0		8d fa ff	sta $fffa			sta 	$FFFA
.83e3						_BPLoop:
.83e3		a2 ff		ldx #$ff			ldx 	#$FF
.83e5		20 31 84	jsr $8431			jsr 	BLReadByte 					; read a byte
.83e8		c9 00		cmp #$00			cmp 	#0
.83ea		f0 29		beq $8415			beq 	_BPExit 					; if 0 exit
.83ec		30 27		bmi $8415			bmi 	_BPExit 					; if -ve exit
.83ee						_BPCopy:
.83ee		e8		inx				inx  								; copy byte into the lineBuffer
.83ef		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.83f2		9e ab 03	stz $03ab,x			stz 	lineBuffer+1,x
.83f5		20 31 84	jsr $8431			jsr 	BLReadByte 					; read next byte
.83f8		30 0a		bmi $8404			bmi 	_BPEndLine 					; -ve = EOL
.83fa		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.83fc		d0 02		bne $8400			bne 	_BPNotTab
.83fe		a9 20		lda #$20			lda 	#' '
.8400						_BPNotTab:
.8400		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8402		b0 ea		bcs $83ee			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8404						_BPEndLine:
.8404		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8407		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.840a		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.840d		f0 d4		beq $83e3			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.840f		38		sec				sec 								; append not insert
.8410		20 e7 a8	jsr $a8e7			jsr 	MemoryInsertLine 			; append to current program
.8413		80 ce		bra $83e3			bra 	_BPLoop
.8415						_BPExit:
.8415		9c fa ff	stz $fffa			stz 	$FFFA
.8418		20 3a 86	jsr $863a			jsr 	ClearCommand 				; clear variables etc.
.841b		60		rts				rts
.841c						_BLLoad:
>841c		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8424		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8431						BLReadByte:
.8431		da		phx				phx
.8432		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8434		ad d9 04	lda $04d9			lda 	BackLoadPage	 			; set current page
.8437		85 0b		sta $0b				sta 	8+3
.8439		ad da 04	lda $04da			lda 	BackLoadPointer 			; copy pointer to zTemp0
.843c		85 36		sta $36				sta 	zTemp0
.843e		ad db 04	lda $04db			lda 	BackLoadPointer+1
.8441		85 37		sta $37				sta 	zTemp0+1
.8443		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.8445		ee da 04	inc $04da			inc 	BackLoadPointer 			; bump pointer
.8448		d0 0f		bne $8459			bne 	_BLNoCarry
.844a		ee db 04	inc $04db			inc 	BackLoadPointer+1
.844d		10 0a		bpl $8459			bpl 	_BLNoCarry 					; need a new page
.844f		48		pha				pha
.8450		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8452		8d db 04	sta $04db			sta 	BackLoadPointer+1
.8455		ee d9 04	inc $04d9			inc 	BackLoadPage 				; next page from source.
.8458		68		pla				pla
.8459						_BLNoCarry:
.8459		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.845b		fa		plx				plx
.845c		c9 00		cmp #$00			cmp 	#0
.845e		60		rts				rts
.04d9						BackLoadPage:
>04d9								.fill  	1
.04da						BackLoadPointer:
>04da								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.845f						EditProgramCode:
.845f		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; try to find the line.
.8462		ae ac 02	ldx $02ac			ldx 	tokenLineNumber+1
.8465		20 8b a9	jsr $a98b			jsr 	MemorySearch
.8468		90 05		bcc $846f			bcc 	_EPCNoDelete 				; reached the end : don't delete
.846a		d0 03		bne $846f			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.846c		20 b0 a8	jsr $a8b0			jsr 	MemoryDeleteLine 			; delete the line
.846f						_EPCNoDelete:
.846f		ad ad 02	lda $02ad			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8472		c9 80		cmp #$80			cmp 	#KWC_EOL
.8474		f0 0d		beq $8483			beq 	_EPCNoInsert
.8476		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8479		ae ac 02	ldx $02ac			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.847c		20 8b a9	jsr $a98b			jsr 	MemorySearch
.847f		18		clc				clc 								; insert at this point.
.8480		20 e7 a8	jsr $a8e7			jsr 	MemoryInsertLine 			; insert the line
.8483						_EPCNoInsert:
.8483		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8484						WarmStart:
.8484		a2 ff		ldx #$ff			ldx 	#$FF
.8486		9a		txs				txs
.8487		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8489		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.848c		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.848f		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line
.8492		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number <> 0
.8495		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.8498		d0 17		bne $84b1			bne 	_WSEditCode 				; if so,edit code.
.849a		9c aa 02	stz $02aa			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.849d		a9 aa		lda #$aa			lda 	#((tokenOffset) & $FF)
.849f		85 30		sta $30				sta 	codePtr
.84a1		a9 02		lda #$02			lda 	#((tokenOffset) >> 8)
.84a3		85 31		sta $31				sta 	codePtr+1
.84a5		ad ad 02	lda $02ad			lda 	tokenBuffer 				; nothing to run
.84a8		c9 80		cmp #$80			cmp 	#KWC_EOL
.84aa		f0 d8		beq $8484			beq 	WarmStart
.84ac		20 9d 8e	jsr $8e9d			jsr 	RUNCodePointerLine 			; execute that line.
.84af		80 d3		bra $8484			bra 	WarmStart
.84b1						_WSEditCode:
.84b1		20 5f 84	jsr $845f			jsr 	EditProgramCode 			; edit the program code
.84b4		20 3a 86	jsr $863a			jsr 	ClearCommand 				; clear all variables etc.
.84b7		80 cb		bra $8484			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.84b9						AssembleCommand:
.84b9		a2 00		ldx #$00			ldx 	#0
.84bb		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger 		; start address
.84be		a5 58		lda $58				lda 	NSMantissa0
.84c0		8d 9e 02	sta $029e			sta 	AssemblerAddress
.84c3		a5 60		lda $60				lda 	NSMantissa1
.84c5		8d 9f 02	sta $029f			sta 	AssemblerAddress+1
.84c8		20 a4 92	jsr $92a4			jsr 	CheckComma
.84cb		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; options 0-3
.84ce		a5 58		lda $58				lda 	NSMantissa0
.84d0		8d a0 02	sta $02a0			sta 	AssemblerControl
.84d3		60		rts				rts
.84d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84d5						AssertCommand:
.84d5		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.84d7		20 6d a1	jsr $a16d			jsr 	EvaluateInteger 			; the assert test
.84da		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; exit if result is non zero.
.84dd		d0 05		bne $84e4			bne 	_ACExit
.84df		a9 0a		lda #$0a		lda	#10
.84e1		4c b5 92	jmp $92b5		jmp	ErrorHandler
.84e4						_ACExit:
.84e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.84e5						Command_BLoad:
.84e5		a2 00		ldx #$00			ldx 	#0
.84e7		20 58 a1	jsr $a158			jsr 	EvaluateString 				; file name to load
.84ea		20 a4 92	jsr $92a4			jsr 	CheckComma 					; consume comma
.84ed		e8		inx				inx
.84ee		20 6d a1	jsr $a16d			jsr 	EvaluateInteger 			; load address (full physical address)
.84f1		5a		phy				phy
.84f2		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.84f4		a6 60		ldx $60				ldx 	NSMantissa1
.84f6		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.84f9		b0 4c		bcs $8547			bcs 	CBLErrorHandler 			; error, so fail.
.84fb		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.84fe		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8500		20 4a 85	jsr $854a			jsr 	BLOpenPhysicalMemory 		; open for access.
.8503						_BLReadFile:
.8503		ad e1 04	lda $04e1			lda 	CurrentFileStream
.8506		20 67 80	jsr $8067			jsr 	KNLReadBlock 				; read next block
.8509		b0 22		bcs $852d			bcs 	_BLFileError 				; file error, which might be EOF.
.850b		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.850d		f0 f4		beq $8503			beq 	_BLReadFile
.850f		8d de 04	sta $04de			sta 	BLCopyCounter 				; counter.
.8512		ac dd 04	ldy $04dd			ldy 	BLYOffset 					; copy the buffer out here
.8515		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8517						_BLCopyLoop:
.8517		bd d2 06	lda $06d2,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.851a		91 3a		sta ($3a),y			sta 	(zTemp2),y
.851c		c8		iny				iny
.851d		d0 03		bne $8522			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.851f		20 72 85	jsr $8572			jsr 	BLAdvancePhysicalMemory
.8522						_BLNoAdjust:
.8522		e8		inx				inx
.8523		ce de 04	dec $04de			dec 	BLCopyCounter
.8526		d0 ef		bne $8517			bne 	_BLCopyLoop
.8528		8c dd 04	sty $04dd			sty 	BLYOffset 					; update Y offset
.852b		80 d6		bra $8503			bra 	_BLReadFile 				; go ask for more.
.852d						_BLFileError:
.852d		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.852f		d0 16		bne $8547			bne 	CBLErrorHandler				; no, it's an actual error
.8531		20 6c 85	jsr $856c			jsr 	BLClosePhysicalMemory 		; close the access.
.8534		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; close the file
.8537		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.853a		7a		ply				ply
.853b		60		rts				rts
.853c						CBLCloseError:
.853c		48		pha				pha
.853d		20 6c 85	jsr $856c			jsr 	BLClosePhysicalMemory
.8540		ad e1 04	lda $04e1			lda 	CurrentFileStream
.8543		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8546		68		pla				pla
.8547						CBLErrorHandler:
.8547		4c f6 8b	jmp $8bf6			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.854a						BLOpenPhysicalMemory:
.854a		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.854c		8d dc 04	sta $04dc			sta 	BLNormalMapping
.854f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8551		8d dd 04	sta $04dd			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.8554		64 3a		stz $3a				stz 	zTemp2
.8556		b5 60		lda $60,x			lda 	NSMantissa1,x
.8558		29 1f		and #$1f			and 	#$1F
.855a		09 60		ora #$60			ora 	#BLAccessPage << 5
.855c		85 3b		sta $3b				sta 	zTemp2+1
.855e		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8560		16 60		asl $60,x			asl 	NSMantissa1,x
.8562		2a		rol a				rol 	a
.8563		16 60		asl $60,x			asl 	NSMantissa1,x
.8565		2a		rol a				rol 	a
.8566		16 60		asl $60,x			asl 	NSMantissa1,x
.8568		2a		rol a				rol 	a
.8569		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.856b		60		rts				rts
.856c						BLClosePhysicalMemory:
.856c		ad dc 04	lda $04dc			lda 	BLNormalMapping
.856f		85 0b		sta $0b				sta 	BLAccessPage+8
.8571		60		rts				rts
.8572						BLAdvancePhysicalMemory:
.8572		48		pha				pha
.8573		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8575		a5 3b		lda $3b				lda 	zTemp2+1
.8577		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8579		d0 06		bne $8581			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.857b		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.857d		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.857f		85 3b		sta $3b				sta 	zTemp2+1
.8581						_BLAPMExit:
.8581		68		pla				pla
.8582		60		rts				rts
.04dc						BLNormalMapping:
>04dc								.fill 	1
.04dd						BLYOffset:
>04dd								.fill 	1
.04de						BLCopyCounter:
>04de								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.8583						Command_BSave:
.8583		a2 00		ldx #$00			ldx 	#0
.8585		20 58 a1	jsr $a158			jsr 	EvaluateString 				; file name to load
.8588		20 a4 92	jsr $92a4			jsr 	CheckComma 					; consume comma
.858b		e8		inx				inx
.858c		20 6d a1	jsr $a16d			jsr 	EvaluateInteger 			; load address (full physical address)
.858f		20 a4 92	jsr $92a4			jsr 	CheckComma 					; consume comma
.8592		e8		inx				inx
.8593		20 6d a1	jsr $a16d			jsr 	EvaluateInteger 			; data length (3 bytes only)
.8596		5a		phy				phy
.8597		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8599		a6 60		ldx $60				ldx 	NSMantissa1
.859b		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for reading
.859e		b0 62		bcs $8602			bcs 	CBSErrorHandler 			; error, so fail.
.85a0		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.85a3		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.85a5		20 4a 85	jsr $854a			jsr 	BLOpenPhysicalMemory 		; open for access.
.85a8		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.85aa		ac dd 04	ldy $04dd			ldy 	BLYOffset 					; used for data offset.
.85ad						_BSWriteToFileLoop:
.85ad		38		sec				sec 								; pre decrement count.
.85ae		a5 5a		lda $5a				lda 	NSMantissa0+2
.85b0		e9 01		sbc #$01			sbc 	#1
.85b2		85 5a		sta $5a				sta 	NSMantissa0+2
.85b4		a5 62		lda $62				lda 	NSMantissa1+2
.85b6		e9 00		sbc #$00			sbc 	#0
.85b8		85 62		sta $62				sta 	NSMantissa1+2
.85ba		a5 6a		lda $6a				lda 	NSMantissa2+2
.85bc		e9 00		sbc #$00			sbc 	#0
.85be		85 6a		sta $6a				sta 	NSMantissa2+2
.85c0		30 15		bmi $85d7			bmi 	_BSFileComplete 			; undercounted, so exit.
.85c2		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.85c4		9d d2 06	sta $06d2,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.85c7		e8		inx				inx
.85c8		c8		iny				iny 								; next byte
.85c9		d0 03		bne $85ce			bne 	_BSNoCheck
.85cb		20 72 85	jsr $8572			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.85ce						_BSNoCheck:
.85ce		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.85d0		d0 db		bne $85ad			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.85d2		20 e5 85	jsr $85e5			jsr 	BSFlushBuffer 				; yes, flush the buffer
.85d5		80 d6		bra $85ad			bra 	_BSWriteToFileLoop 			; and keep on going
.85d7						_BSFileComplete:
.85d7		20 e5 85	jsr $85e5			jsr 	BSFlushBuffer 				; write the buffer remainder.
.85da		20 6c 85	jsr $856c			jsr 	BLClosePhysicalMemory 		; close the access.
.85dd		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; close the file
.85e0		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.85e3		7a		ply				ply
.85e4		60		rts				rts
.85e5						BSFlushBuffer:
.85e5		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.85e7		f0 0d		beq $85f6			beq 	_BSFBExit 					; if so, exit.
.85e9		a9 d2		lda #$d2			lda 	#KNLReadBuffer & $FF 		; where to write from.
.85eb		85 36		sta $36				sta 	zTemp0
.85ed		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.85ef		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.85f1		20 5a 91	jsr $915a			jsr 	CLWriteByteBlock 			; write it.
.85f4		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.85f6						_BSFBExit:
.85f6		60		rts				rts
.85f7						CBSSCloseError:
.85f7		48		pha				pha
.85f8		20 6c 85	jsr $856c			jsr 	BLClosePhysicalMemory
.85fb		ad e1 04	lda $04e1			lda 	CurrentFileStream
.85fe		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8601		68		pla				pla
.8602						CBSErrorHandler:
.8602		4c f6 8b	jmp $8bf6			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8605						CallCommand:
.8605		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8607		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger
.860a						_CCClear
.860a		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.860b		20 00 a2	jsr $a200			jsr 	NSMSetZero 					; these are optional sequentially.
.860e		e0 04		cpx #$04			cpx 	#4
.8610		d0 f8		bne $860a			bne 	_CCClear
.8612		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8614						_CCCParam:
.8614		b1 30		lda ($30),y			lda 	(codePtr),y
.8616		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8618		d0 09		bne $8623			bne 	_CCCRun6502
.861a		c8		iny				iny 								; skip comma
.861b		e8		inx				inx	 								; next level
.861c		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.861f		e0 03		cpx #$03			cpx 	#3
.8621		90 f1		bcc $8614			bcc 	_CCCParam 					; done all 3 ?
.8623						_CCCRun6502:
.8623		5a		phy				phy 								; save position
.8624		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8626		85 37		sta $37				sta 	zTemp0+1
.8628		a5 58		lda $58				lda 	NSMantissa0
.862a		85 36		sta $36				sta 	zTemp0
.862c		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.862e		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8630		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8632		20 37 86	jsr $8637			jsr 	_CCCZTemp0 					; call zTemp0
.8635		7a		ply				ply 								; restore position and exit
.8636		60		rts				rts
.8637						_CCCZTemp0:
.8637		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.863a						ClearCommand:
.863a		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.863c		85 36		sta $36				sta 	0+zTemp0
.863e		a9 08		lda #$08			lda 	#((VariableSpace) >> 8)
.8640		85 37		sta $37				sta 	1+zTemp0
.8642						_ClearZeroLoop:
.8642		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8644		f0 24		beq $866a			beq 	_ClearZeroEnd
.8646		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8648		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.864a						_ClearOneVariable:
.864a		91 36		sta ($36),y			sta 	(zTemp0),y
.864c		c8		iny				iny
.864d		c0 08		cpy #$08			cpy 	#8
.864f		d0 f9		bne $864a			bne 	_ClearOneVariable
.8651		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8653		b1 36		lda ($36),y			lda 	(zTemp0),y
.8655		c9 18		cmp #$18			cmp 	#NSTProcedure
.8657		d0 04		bne $865d			bne 	_ClearNotProcedure
.8659		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.865b		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.865d						_ClearNotProcedure:
.865d		18		clc				clc 								; go to the next variable
.865e		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8660		65 36		adc $36				adc 	zTemp0
.8662		85 36		sta $36				sta 	zTemp0
.8664		90 dc		bcc $8642			bcc 	_ClearZeroLoop
.8666		e6 37		inc $37				inc 	zTemp0+1
.8668		80 d8		bra $8642			bra 	_ClearZeroLoop
.866a						_ClearZeroEnd:
.866a		18		clc				clc
.866b		a5 36		lda $36				lda 	zTemp0
.866d		69 01		adc #$01			adc 	#1
.866f		8d 8c 02	sta $028c			sta 	lowMemPtr
.8672		a5 37		lda $37				lda 	zTemp0+1
.8674		69 00		adc #$00			adc 	#0
.8676		8d 8d 02	sta $028d			sta 	lowMemPtr+1
.8679		20 45 b3	jsr $b345			jsr 	StackReset
.867c		20 ab b3	jsr $b3ab			jsr 	StringSystemInitialise
.867f		20 a5 91	jsr $91a5			jsr 	ProcedureScan
.8682		20 4c 8e	jsr $8e4c			jsr 	Command_Restore
.8685		9c 9e 02	stz $029e			stz 	AssemblerAddress
.8688		9c 9f 02	stz $029f			stz 	AssemblerAddress+1
.868b		9c a0 02	stz $02a0			stz 	AssemblerControl
.868e		20 ef 9d	jsr $9def			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8691		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8692						ClearScreen:
.8692		5a		phy				phy
.8693		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8695		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8698		7a		ply				ply
.8699		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.869a						Command_Data:
.869a		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.869c		a2 80		ldx #$80			ldx 	#KWC_EOL
.869e		20 f7 91	jsr $91f7			jsr 	ScanForward
.86a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.86a2						DimCommand:
.86a2		b1 30		lda ($30),y			lda 	(codePtr),y
.86a4		29 c0		and #$c0			and 	#$C0
.86a6		c9 40		cmp #$40			cmp 	#$40
.86a8		d0 7a		bne $8724			bne 	_DCSyntax 				; n o, error.
.86aa		b1 30		lda ($30),y			lda 	(codePtr),y
.86ac		18		clc				clc
.86ad		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.86af		85 3f		sta $3f				sta 	zaTemp+1
.86b1		c8		iny				iny
.86b2		b1 30		lda ($30),y			lda 	(codePtr),y
.86b4		c8		iny				iny
.86b5		85 3e		sta $3e				sta 	zaTemp
.86b7		5a		phy				phy
.86b8		a0 02		ldy #$02			ldy 	#2 						; read type byte
.86ba		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86bc		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.86be		c9 18		cmp #$18			cmp 	#NSTProcedure
.86c0		f0 62		beq $8724			beq 	_DCSyntax
.86c2		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.86c4		29 04		and #$04			and 	#NSBIsArray
.86c6		f0 64		beq $872c			beq 	_DCType
.86c8		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.86ca		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86cc		d0 59		bne $8727			bne 	_DCRedefine
.86ce		7a		ply				ply
.86cf		20 2f 87	jsr $872f			jsr 	_DCGetSize 				; get array size, check it.
.86d2		5a		phy				phy
.86d3		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.86d5		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.86d7		7a		ply				ply 							; is there a second (e.g. ,x)
.86d8		b1 30		lda ($30),y			lda 	(codePtr),y
.86da		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86dc		d0 0a		bne $86e8			bne 	_DCOneDimension
.86de		c8		iny				iny 							; skip comma
.86df		20 2f 87	jsr $872f			jsr 	_DCGetSize 				; get 2nd array size
.86e2		5a		phy				phy
.86e3		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.86e5		91 3e		sta ($3e),y			sta 	(zaTemp),y
.86e7		7a		ply				ply
.86e8						_DCOneDimension:
.86e8		5a		phy				phy 							; save position
.86e9		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.86eb		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86ed		aa		tax				tax
.86ee		c8		iny				iny
.86ef		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86f1		e8		inx				inx 							; bump them.
.86f2		1a		inc a				inc 	a
.86f3		20 ab a1	jsr $a1ab			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.86f6		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.86f8		29 e0		and #$e0			and 	#$E0
.86fa		d0 23		bne $871f			bne 	_DCSize
.86fc		a0 02		ldy #$02			ldy 	#2 						; get base type
.86fe		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8700		20 3d 87	jsr $873d			jsr 	ScaleByBaseType 		; scale by base type
.8703		a5 36		lda $36				lda 	zTemp0
.8705		a6 37		ldx $37				ldx 	zTemp0+1
.8707		20 b1 9d	jsr $9db1			jsr 	AllocateXABytes 		; allocate memory
.870a		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.870c		91 3e		sta ($3e),y			sta 	(zaTemp),y
.870e		c8		iny				iny
.870f		8a		txa				txa
.8710		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8712		7a		ply				ply 							; get position back
.8713		20 9c 92	jsr $929c			jsr 	CheckRightBracket 		; check )
.8716		b1 30		lda ($30),y			lda 	(codePtr),y
.8718		c8		iny				iny 							; consume in case
.8719		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.871b		f0 85		beq $86a2			beq 	DimCommand
.871d		88		dey				dey 							; undo consume
.871e		60		rts				rts
.871f						_DCSize:
.871f		a9 16		lda #$16		lda	#22
.8721		4c b5 92	jmp $92b5		jmp	ErrorHandler
.8724						_DCSyntax:
.8724		4c 7e a3	jmp $a37e			jmp 	SyntaxError
.8727						_DCRedefine:
.8727		a9 15		lda #$15		lda	#21
.8729		4c b5 92	jmp $92b5		jmp	ErrorHandler
.872c						_DCType:
.872c		4c 88 a3	jmp $a388			jmp 	TypeError
.872f						_DCGetSize:
.872f		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8731		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 	; get array dimension
.8734		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8736		f0 e7		beq $871f			beq 	_DCSize
.8738		c9 fe		cmp #$fe			cmp 	#254
.873a		f0 e3		beq $871f			beq 	_DCSize
.873c		60		rts				rts
.873d						ScaleByBaseType:
.873d		29 10		and #$10			and 	#NSBIsString 			; is it string
.873f		d0 19		bne $875a			bne 	_SBBTString
.8741		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8743		48		pha				pha
.8744		a5 36		lda $36				lda 	zTemp0
.8746		48		pha				pha
.8747		06 36		asl $36				asl 	zTemp0 					; x 2
.8749		26 37		rol $37				rol 	zTemp0+1
.874b		06 36		asl $36				asl 	zTemp0 					; x 4
.874d		26 37		rol $37				rol 	zTemp0+1
.874f		68		pla				pla 							; add stacked value = x 5
.8750		65 36		adc $36				adc 	zTemp0
.8752		85 36		sta $36				sta 	zTemp0
.8754		68		pla				pla
.8755		65 37		adc $37				adc 	zTemp0+1
.8757		85 37		sta $37				sta 	zTemp0+1
.8759		60		rts				rts
.875a						_SBBTString:
.875a		06 36		asl $36				asl 	zTemp0
.875c		26 37		rol $37				rol 	zTemp0+1
.875e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.875f						Command_Dir:
.875f		ad df 04	lda $04df			lda     DefaultDrive				; set drive to list.
.8762		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8764		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8766		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8769		b0 56		bcs $87c1			bcs     _CDExit
.876b						_CDEventLoop:
.876b		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.876e		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8771		b0 f8		bcs $876b			bcs     _CDEventLoop
.8773		ad ca 06	lda $06ca			lda     event.type
.8776		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.8778		f0 47		beq $87c1			beq    	_CDExit
.877a		20 7f 87	jsr $877f			jsr     _CDMessages 				; handle various messages
.877d		80 ec		bra $876b			bra     _CDEventLoop
.877f						_CDMessages:
.877f		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8781		f0 15		beq $8798			beq     _CDEVRead
.8783		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8785		f0 19		beq $87a0			beq     _CDEVVolume
.8787		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.8789		f0 17		beq $87a2			beq     _CDEVFile
.878b		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.878d		f0 28		beq $87b7			beq     _CDEVFree
.878f		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8791		f0 26		beq $87b9			beq     _CDEVEOF
.8793		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8795		f0 22		beq $87b9			beq     _CDEVEOF
.8797		60		rts				rts
.8798						_CDEVRead:
.8798		ad cd 06	lda $06cd			lda     event.directory.stream
.879b		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.879d		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.87a0						_CDEVVolume:
.87a0		80 f6		bra $8798			bra     _CDEVRead
.87a2						_CDEVFile:
.87a2		a9 20		lda #$20			lda 	#32
.87a4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.87a7		ad cf 06	lda $06cf			lda     event.directory.file.len
.87aa		20 c4 87	jsr $87c4			jsr     _CDReadData
.87ad		20 0e 93	jsr $930e			jsr 	PrintStringXA
.87b0		a9 0d		lda #$0d			lda 	#13
.87b2		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.87b5		80 e1		bra $8798			bra     _CDEVRead
.87b7						_CDEVFree:
.87b7		80 00		bra $87b9			bra     _CDEVEOF
.87b9						_CDEVEOF:
.87b9		ad cd 06	lda $06cd			lda     event.directory.stream
.87bc		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.87be		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.87c1						_CDExit:
.87c1		4c 84 84	jmp $8484			jmp 	WarmStart
.87c4						_CDReadData:
.87c4		85 fd		sta $fd				sta     kernel.args.recv.buflen
.87c6		a9 aa		lda #$aa			lda     #lineBuffer & $FF
.87c8		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.87ca		a9 03		lda #$03			lda     #lineBuffer >> 8
.87cc		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.87ce		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.87d1		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.87d3		9e aa 03	stz $03aa,x			stz     lineBuffer,x
.87d6		a9 aa		lda #$aa			lda 	#lineBuffer & $FF
.87d8		a2 03		ldx #$03			ldx 	#lineBuffer >> 8
.87da		60		rts				rts
.87db						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.87db						Command_Drive:
.87db		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger
.87de		8d df 04	sta $04df			sta 	DefaultDrive
.87e1		60		rts				rts
.04df						DefaultDrive:
>04df								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.87e2						EndCommand:
.87e2		4c 84 84	jmp $8484			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.87e5						ForCommand:
.87e5		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.87e7		20 df b2	jsr $b2df			jsr 	StackOpen
.87ea		a2 00		ldx #$00			ldx 	#0
.87ec		20 03 9c	jsr $9c03			jsr 	EvaluateTerm
.87ef		b5 50		lda $50,x			lda 	NSStatus,x
.87f1		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.87f3		d0 47		bne $883c			bne		_FCError
.87f5		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.87f7		20 ac 92	jsr $92ac			jsr 	CheckNextA
.87fa		e8		inx				inx
.87fb		20 6d a1	jsr $a16d			jsr 	EvaluateInteger 			; <from> in +1
.87fe		b1 30		lda ($30),y			lda 	(codePtr),y
.8800		c8		iny				iny 								; consume it
.8801		48		pha				pha 								; save on stack for later
.8802		c9 bb		cmp #$bb			cmp 	#KWD_DOWNTO
.8804		f0 04		beq $880a			beq 	_FCNoSyntax
.8806		c9 d9		cmp #$d9			cmp 	#KWD_TO
.8808		d0 35		bne $883f			bne 	_FCSyntaxError
.880a						_FCNoSyntax:
.880a		e8		inx				inx
.880b		20 6d a1	jsr $a16d			jsr 	EvaluateInteger
.880e		20 24 b3	jsr $b324			jsr 	STKSaveCodePosition 		; save loop back position
.8811		68		pla				pla 								; restore DOWNTO or TO
.8812		5a		phy				phy 								; save Y on the stack
.8813		49 bb		eor #$bb			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8815		f0 02		beq $8819			beq 	_FCNotDownTo
.8817		a9 02		lda #$02			lda 	#2
.8819						_FCNotDownTo:
.8819		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.881a		a0 10		ldy #$10			ldy 	#16
.881c		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.881e		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8820		a5 58		lda $58				lda 	NSMantissa0
.8822		91 34		sta ($34),y			sta 	(basicStack),y
.8824		a5 60		lda $60				lda 	NSMantissa1
.8826		c8		iny				iny
.8827		91 34		sta ($34),y			sta 	(basicStack),y
.8829		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.882b		a2 01		ldx #$01			ldx 	#1
.882d		20 42 88	jsr $8842			jsr 	FCIntegerToStack
.8830		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8832		a2 02		ldx #$02			ldx 	#2
.8834		20 42 88	jsr $8842			jsr 	FCIntegerToStack
.8837		20 5d 88	jsr $885d			jsr 	CopyIndexToReference
.883a		7a		ply				ply 								; restore position
.883b		60		rts				rts
.883c						_FCError:
.883c		4c 88 a3	jmp $a388			jmp 	TypeError
.883f						_FCSyntaxError:
.883f		4c 7e a3	jmp $a37e			jmp 	SyntaxError
.8842						FCIntegerToStack:
.8842		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8844		10 03		bpl $8849			bpl	 	_FCNotNegative
.8846		20 c9 a1	jsr $a1c9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8849						_FCNotNegative:
.8849		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.884b		91 34		sta ($34),y			sta 	(basicStack),y
.884d		c8		iny				iny
.884e		b5 60		lda $60,x			lda 	NSMantissa1,x
.8850		91 34		sta ($34),y			sta 	(basicStack),y
.8852		c8		iny				iny
.8853		b5 68		lda $68,x			lda 	NSMantissa2,x
.8855		91 34		sta ($34),y			sta 	(basicStack),y
.8857		c8		iny				iny
.8858		b5 70		lda $70,x			lda 	NSMantissa3,x
.885a		91 34		sta ($34),y			sta 	(basicStack),y
.885c		60		rts				rts
.885d						CopyIndexToReference:
.885d		5a		phy				phy
.885e		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8860		38		sec				sec 								; (because we copy from offset 8)
.8861		b1 34		lda ($34),y			lda 	(basicStack),y
.8863		e9 08		sbc #$08			sbc 	#8
.8865		85 36		sta $36				sta 	zTemp0
.8867		c8		iny				iny
.8868		b1 34		lda ($34),y			lda 	(basicStack),y
.886a		e9 00		sbc #$00			sbc 	#0
.886c		85 37		sta $37				sta 	zTemp0+1
.886e		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8870		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8872		b1 34		lda ($34),y			lda 	(basicStack),y
.8874		0a		asl a				asl 	a 							; into carry
.8875		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8877		90 14		bcc $888d			bcc 	_CITRNormal
.8879		38		sec				sec
.887a						_CITRNegative:
.887a		a9 00		lda #$00			lda 	#0
.887c		f1 34		sbc ($34),y			sbc 	(basicStack),y
.887e		91 36		sta ($36),y			sta 	(zTemp0),y
.8880		c8		iny				iny
.8881		ca		dex				dex
.8882		d0 f6		bne $887a			bne 	_CITRNegative
.8884		88		dey				dey 								; look at MSB of mantissa
.8885		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8887		09 80		ora #$80			ora 	#$80
.8889		91 36		sta ($36),y			sta 	(zTemp0),y
.888b		7a		ply				ply
.888c		60		rts				rts
.888d						_CITRNormal:
.888d		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.888f		91 36		sta ($36),y			sta 	(zTemp0),y
.8891		c8		iny				iny
.8892		ca		dex				dex
.8893		d0 f8		bne $888d			bne 	_CITRNormal
.8895		7a		ply				ply 								; and exit.
.8896		60		rts				rts
.8897						NextCommand:
.8897		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8899		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.889b		20 0c b3	jsr $b30c			jsr 	StackCheckFrame
.889e		5a		phy				phy
.889f		a0 10		ldy #$10			ldy 	#16 						; get the step count
.88a1		b1 34		lda ($34),y			lda 	(basicStack),y
.88a3		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.88a5		30 02		bmi $88a9			bmi 	_NCStepNeg
.88a7		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.88a9						_NCStepNeg:
.88a9		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.88ab		a2 04		ldx #$04			ldx 	#4 							; count to bump
.88ad		18		clc				clc
.88ae						_NCBump:
.88ae		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.88b0		91 34		sta ($34),y			sta 	(basicStack),y
.88b2		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.88b4		c8		iny				iny 								; next byte
.88b5		ca		dex				dex 								; do four times
.88b6		d0 f6		bne $88ae			bne 	_NCBump
.88b8		20 5d 88	jsr $885d			jsr		CopyIndexToReference		; copy it to the reference variable.
.88bb		a0 10		ldy #$10			ldy 	#16 						; get step count again
.88bd		b1 34		lda ($34),y			lda 	(basicStack),y
.88bf		0a		asl a				asl 	a 							; sign bit to carry
.88c0		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.88c2		85 38		sta $38				sta 	zTemp1
.88c4		90 02		bcc $88c8			bcc 	_NCCompRev 					; use if step is +ve
.88c6		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.88c8						_NCCompRev:
.88c8		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.88ca		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.88cc		85 39		sta $39				sta 	zTemp1+1
.88ce		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.88d0		38		sec				sec
.88d1						_NCCompare:
.88d1		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.88d3		b1 34		lda ($34),y			lda 	(basicStack),y
.88d5		a4 39		ldy $39				ldy 	zTemp1+1
.88d7		f1 34		sbc ($34),y			sbc 	(basicStack),y
.88d9		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.88db		e6 39		inc $39				inc 	zTemp1+1
.88dd		ca		dex				dex 								; do it 4 times.
.88de		d0 f1		bne $88d1			bne 	_NCCompare
.88e0		50 02		bvc $88e4			bvc 	_NCNoOverflow 				; convert to signed comparison
.88e2		49 80		eor #$80			eor 	#$80
.88e4						_NCNoOverflow:
.88e4		7a		ply				ply 								; restore Y position
.88e5		0a		asl a				asl 	a 							; is bit 7 set.
.88e6		90 04		bcc $88ec			bcc 	_NCLoopBack 				; if no , >= so loop back
.88e8		20 fe b2	jsr $b2fe			jsr 	StackClose 					; exit the loop
.88eb		60		rts				rts
.88ec						_NCLoopBack:
.88ec		20 35 b3	jsr $b335			jsr 	STKLoadCodePosition 		; loop back
.88ef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.88f0						Command_GOSUB:
.88f0		a2 00		ldx #$00			ldx 	#0
.88f2		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.88f5		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.88f7		20 df b2	jsr $b2df			jsr 	StackOpen 					; create frame
.88fa		20 24 b3	jsr $b324			jsr 	STKSaveCodePosition 		; save current position
.88fd		4c 13 89	jmp $8913			jmp 	GotoStackX
.8900						Command_RETURN:
.8900		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8902		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8904		20 0c b3	jsr $b30c			jsr 	StackCheckFrame
.8907		20 35 b3	jsr $b335			jsr 	STKLoadCodePosition 		; restore code position
.890a		20 fe b2	jsr $b2fe			jsr 	StackClose
.890d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.890e						GotoCommand:
.890e		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8910		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger
.8913						GotoStackX:
.8913		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8915		48		pha				pha 								; it is slightly inefficient, just in cases.
.8916		b5 58		lda $58,x			lda 	NSMantissa0,x
.8918		fa		plx				plx
.8919		20 8b a9	jsr $a98b			jsr 	MemorySearch 				; transfer to line number AX.
.891c		90 05		bcc $8923			bcc 	_GotoError 					; not found, off end.
.891e		d0 03		bne $8923			bne 	_GotoError 					; not found exactly
.8920		4c 96 8e	jmp $8e96			jmp 	RunNewLine 					; and go straight to new line code.
.8923						_GotoError:
.8923		a9 0d		lda #$0d		lda	#13
.8925		4c b5 92	jmp $92b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8928						IfCommand:
.8928		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.892a		20 4e a1	jsr $a14e			jsr 	EvaluateNumber
.892d		b1 30		lda ($30),y			lda 	(codePtr),y
.892f		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8931		d0 0a		bne $893d			bne 	_IfStructured 				; we still support it.
.8933		c8		iny				iny 								; consume THEN
.8934		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; is it zero
.8937		f0 01		beq $893a			beq 	_IfFail 					; if fail, go to next line
.8939		60		rts				rts 								; if THEN just continue
.893a						_IfFail:
.893a		4c 7e 8e	jmp $8e7e			jmp 	EOLCommand
.893d						_IfStructured:
.893d		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; is it zero
.8940		d0 07		bne $8949			bne 	_IfExit 					; if not, then continue normally.
.8942		a9 bc		lda #$bc			lda 	#KWD_ELSE 					; look for else/endif
.8944		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8946		20 f7 91	jsr $91f7			jsr 	ScanForward 				; and run from there
.8949						_IfExit:
.8949		60		rts				rts
.894a						ElseCode:
.894a		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.894c		aa		tax				tax 								; so just go to the structure exit
.894d		20 f7 91	jsr $91f7			jsr 	ScanForward
.8950		60		rts				rts
.8951						EndIf:
.8951		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8952						Command_Input:
.8952		9c a8 02	stz $02a8			stz 	isPrintFlag
.8955		80 0c		bra $8963			bra 	Command_IP_Main
.8957						Command_CPrint:
.8957		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8959		8d a8 02	sta $02a8			sta 	isPrintFlag 				; clear input flag
.895c		80 05		bra $8963			bra 	Command_IP_Main
.895e						Command_Print:
.895e		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8960		8d a8 02	sta $02a8			sta 	isPrintFlag 				; clear input flag
.8963						Command_IP_Main:
.8963		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8964						_CPLoop:
.8964		08		php				php 								; save last action flag
.8965		b1 30		lda ($30),y			lda 	(codePtr),y
.8967		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8969		f0 54		beq $89bf			beq 	_CPExit
.896b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.896d		f0 50		beq $89bf			beq 	_CPExit
.896f		68		pla				pla 								; throw last action flag
.8970		b1 30		lda ($30),y			lda 	(codePtr),y
.8972		c8		iny				iny
.8973		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8975		f0 45		beq $89bc			beq 	_CPContinueWithSameLine
.8977		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8979		f0 3c		beq $89b7			beq 	_CPTab
.897b		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.897d		f0 34		beq $89b3			beq 	_CPNewLine
.897f		88		dey				dey 								; undo the get.
.8980		20 b7 97	jsr $97b7			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8983		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8985		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8987		f0 0d		beq $8996			beq 	_CPIsValue 					; no, display it.
.8989		ad a8 02	lda $02a8			lda 	isPrintFlag 				; if print, dereference and print.
.898c		d0 05		bne $8993			bne 	_CPIsPrint 					; otherwise display.
.898e		20 c8 89	jsr $89c8			jsr 	CIInputValue 				; input a value to the reference
.8991		80 20		bra $89b3			bra 	_CPNewLine
.8993						_CPIsPrint:
.8993		20 7c 9a	jsr $9a7c			jsr 	Dereference 				; dereference if required.
.8996						_CPIsValue:
.8996		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8998		29 10		and #$10			and 	#NSBIsString
.899a		f0 09		beq $89a5			beq 	_CPNumber
.899c		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.899e		a5 58		lda $58				lda 	NSMantissa0
.89a0		20 2b 8a	jsr $8a2b			jsr 	CPPrintStringXA
.89a3		80 be		bra $8963			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.89a5						_CPNumber:
.89a5		a9 05		lda #$05			lda 	#5 							; maximum decimals
.89a7		20 35 a0	jsr $a035			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.89aa		a2 04		ldx #$04			ldx 	#decimalBuffer >> 8
.89ac		a9 c9		lda #$c9			lda 	#decimalBuffer & $FF
.89ae		20 2b 8a	jsr $8a2b			jsr 	CPPrintStringXA 			; print it.
.89b1		80 b0		bra $8963			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.89b3						_CPNewLine:
.89b3		a9 0d		lda #$0d			lda 	#13
.89b5		80 02		bra $89b9			bra 	_CPPrintCharDirect
.89b7						_CPTab:
.89b7		a9 09		lda #$09			lda 	#9 							; print TAB
.89b9						_CPPrintCharDirect:
.89b9		20 46 8a	jsr $8a46			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.89bc						_CPContinueWithSameLine:
.89bc		38		sec				sec 								; loop round with carry set, which
.89bd		80 a5		bra $8964			bra 	_CPLoop 					; will inhibit final CR
.89bf						_CPExit:
.89bf		28		plp				plp 								; get last action flag
.89c0		b0 05		bcs $89c7			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.89c2		a9 0d		lda #$0d			lda 	#13 						; print new line
.89c4		20 46 8a	jsr $8a46			jsr 	CPPVControl
.89c7						_CPExit2:
.89c7		60		rts				rts
.89c8						CIInputValue:
.89c8		a2 00		ldx #$00			ldx 	#0 							; input a line.
.89ca						_CIInputLine:
.89ca		20 49 8a	jsr $8a49			jsr 	CPInputVector 				; get key
.89cd		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.89cf		f0 1f		beq $89f0			beq 	_CIHaveValue
.89d1		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.89d3		f0 11		beq $89e6			beq 	_CIBackspace
.89d5		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.89d7		90 f1		bcc $89ca			bcc 	_CIInputLine
.89d9		e0 50		cpx #$50			cpx 	#80 						; max length
.89db		b0 ed		bcs $89ca			bcs 	_CIInputLine
.89dd		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.89e0		e8		inx				inx
.89e1		20 3e 8a	jsr $8a3e			jsr 	CPPrintVector 				; echo it.
.89e4		80 e4		bra $89ca			bra 	_CIInputLine
.89e6						_CIBackspace:
.89e6		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.89e8		f0 e0		beq $89ca			beq 	_CIInputLine
.89ea		20 3e 8a	jsr $8a3e			jsr 	CPPrintVector 				; echo it.
.89ed		ca		dex				dex
.89ee		80 da		bra $89ca			bra 	_CIInputLine
.89f0						_CIHaveValue:
.89f0		9e aa 03	stz $03aa,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.89f3		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.89f5		29 10		and #$10			and 	#NSBIsString
.89f7		f0 17		beq $8a10			beq 	_CIAssignNumber 			; assign a number
.89f9		a2 01		ldx #$01			ldx 	#1
.89fb		a9 aa		lda #$aa			lda 	#lineBuffer & $FF 			; set up to point to new string
.89fd		95 58		sta $58,x			sta 	NSMantissa0,x
.89ff		a9 03		lda #$03			lda 	#lineBuffer >> 8
.8a01		95 60		sta $60,x			sta 	NSMantissa1,x
.8a03		74 68		stz $68,x			stz 	NSMantissa2,x
.8a05		74 70		stz $70,x			stz 	NSMantissa3,x
.8a07		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8a09		95 50		sta $50,x			sta  	NSStatus,x
.8a0b		ca		dex				dex 								; X = 0
.8a0c		20 85 8a	jsr $8a85			jsr 	AssignVariable
.8a0f		60		rts				rts
.8a10						_CIAssignNumber:
.8a10		a9 aa		lda #$aa			lda 	#lineBuffer & $FF 			; set up to point to new string
.8a12		85 36		sta $36				sta 	zTemp0
.8a14		a9 03		lda #$03			lda 	#lineBuffer >> 8
.8a16		85 37		sta $37				sta 	zTemp0+1
.8a18		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8a1a		20 b7 9f	jsr $9fb7			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8a1d		90 07		bcc $8a26			bcc 	_CIIsOkay
.8a1f		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8a21		20 3e 8a	jsr $8a3e			jsr 	CPPrintVector
.8a24		80 a2		bra $89c8			bra 	CIInputValue
.8a26						_CIIsOkay:
.8a26		ca		dex				dex 								; X = 0
.8a27		20 85 8a	jsr $8a85			jsr 	AssignVariable
.8a2a		60		rts				rts
.8a2b						CPPrintStringXA:
.8a2b		5a		phy				phy
.8a2c		86 37		stx $37				stx 	zTemp0+1
.8a2e		85 36		sta $36				sta 	zTemp0
.8a30		a0 00		ldy #$00			ldy 	#0
.8a32						_PSXALoop:
.8a32		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a34		f0 06		beq $8a3c			beq 	_PSXAExit
.8a36		20 3e 8a	jsr $8a3e			jsr 	CPPrintVector
.8a39		c8		iny				iny
.8a3a		80 f6		bra $8a32			bra 	_PSXALoop
.8a3c						_PSXAExit:
.8a3c		7a		ply				ply
.8a3d		60		rts				rts
.8a3e						CPPrintVector:
.8a3e		2c a8 02	bit $02a8			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8a41		30 03		bmi $8a46			bmi 	CPPVControl
.8a43		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8a46						CPPVControl:
.8a46		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8a49						CPInputVector:
.8a49		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8a4c						LetCommand:
.8a4c		a2 00		ldx #$00			ldx 	#0
.8a4e		b1 30		lda ($30),y			lda 	(codePtr),y
.8a50		c9 10		cmp #$10			cmp 	#KWD_AT
.8a52		d0 14		bne $8a68			bne 	_LCStandard
.8a54		c8		iny				iny 								; skip equal
.8a55		20 03 9c	jsr $9c03			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8a58		20 7c 9a	jsr $9a7c			jsr 	Dereference 				; dereference it to a value
.8a5b		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8a5d		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8a5f		95 50		sta $50,x			sta 	NSStatus,x
.8a61		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8a63		d0 0f		bne $8a74			bne 	_LCMain
.8a65		4c 88 a3	jmp $a388			jmp 	TypeError 					; was a reference before.
.8a68						_LCStandard:
.8a68		ad a1 97	lda $97a1			lda 	PrecedenceLevel+"*"			; precedence > this
.8a6b		20 bb 97	jsr $97bb			jsr 	EvaluateExpressionAtPrecedence
.8a6e		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8a70		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8a72		f0 0e		beq $8a82			beq 	_LetGoProc 					; it's a procedure call.
.8a74						_LCMain:
.8a74		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8a76		20 ac 92	jsr $92ac			jsr 	CheckNextA
.8a79		e8		inx				inx 								; RHS
.8a7a		20 45 a1	jsr $a145			jsr 	EvaluateValue
.8a7d		ca		dex				dex
.8a7e		20 85 8a	jsr $8a85			jsr 	AssignVariable
.8a81		60		rts				rts
.8a82						_LetGoProc:
.8a82		4c 54 8d	jmp $8d54			jmp 	CallProcedure
.8a85						AssignVariable:
.8a85		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8a87		48		pha				pha 								; save a copy
.8a88		55 51		eor $51,x			eor 	NSStatus+1,x
.8a8a		29 10		and #$10			and 	#NSBIsString
.8a8c		d0 0b		bne $8a99			bne 	_ASError
.8a8e		68		pla				pla 								; get back
.8a8f		29 10		and #$10			and 	#NSBIsString 				; check type
.8a91		d0 03		bne $8a96			bne 	_ASString
.8a93		4c ba 99	jmp $99ba			jmp 	AssignNumber
.8a96						_ASString:
.8a96		4c 18 9a	jmp $9a18			jmp 	AssignString
.8a99						_ASError:
.8a99		4c 88 a3	jmp $a388			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8a9c						Command_List:
.8a9c		9c a6 02	stz $02a6			stz 	listIndent 					; reset indent.
.8a9f		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8aa1		20 8f 80	jsr $808f			jsr 	SNDCommand
.8aa4		b1 30		lda ($30),y			lda 	(codePtr),y
.8aa6		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8aa8		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8aaa		f0 72		beq $8b1e			beq 	_CLListProcedure
.8aac		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8aae		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8ab0		a9 ff		lda #$ff			lda 	#$FF
.8ab2		85 5f		sta $5f				sta 	NSMantissa0+7
.8ab4		85 67		sta $67				sta 	NSMantissa1+7
.8ab6		b1 30		lda ($30),y			lda 	(codePtr),y
.8ab8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8aba		f0 1a		beq $8ad6			beq 	_CLSecond
.8abc		20 9b 8b	jsr $8b9b			jsr 	CLIsDigit 					; if not digit, list all
.8abf		b0 20		bcs $8ae1			bcs 	_CLStart
.8ac1		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8ac3		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger
.8ac6		b1 30		lda ($30),y			lda 	(codePtr),y
.8ac8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8aca		f0 0a		beq $8ad6			beq 	_CLSecond 					; if so go get it
.8acc		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8ace		85 5f		sta $5f				sta 	NSMantissa0+7
.8ad0		a5 64		lda $64				lda 	NSMantissa1+4
.8ad2		85 67		sta $67				sta 	NSMantissa1+7
.8ad4		80 0b		bra $8ae1			bra 	_CLStart
.8ad6						_CLSecond:
.8ad6		c8		iny				iny 								; consume comma
.8ad7		20 9b 8b	jsr $8b9b			jsr 	CLIsDigit 					; digit found
.8ada		b0 05		bcs $8ae1			bcs 	_CLStart 					; if not, continue listing
.8adc		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8ade		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger
.8ae1						_CLStart
.8ae1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ae3		85 30		sta $30				sta 	codePtr
.8ae5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ae7		85 31		sta $31				sta 	codePtr+1
.8ae9						_CLLoop:
.8ae9		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8aeb		f0 03		beq $8af0			beq 	_NoEvents					; if zero, skip with Z flag set.
.8aed		20 30 81	jsr $8130			jsr 	ProcessEvents
.8af0						_NoEvents:
.8af0		d0 27		bne $8b19			bne 	_CLBreak
.8af2		b2 30		lda ($30)			lda 	(codePtr)
.8af4		f0 20		beq $8b16			beq 	_CLExit
.8af6		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8af8		20 8a 8b	jsr $8b8a			jsr 	CLCompareLineNo
.8afb		90 0c		bcc $8b09			bcc 	_CLNext
.8afd		a2 07		ldx #$07			ldx 	#7
.8aff		20 8a 8b	jsr $8b8a			jsr 	CLCompareLineNo
.8b02		f0 02		beq $8b06			beq 	_CLDoThisOne
.8b04		b0 03		bcs $8b09			bcs 	_CLNext
.8b06						_CLDoThisOne:
.8b06		20 77 8b	jsr $8b77			jsr 	CLListOneLine 				; routine to list the current line.
.8b09						_CLNext:
.8b09		18		clc				clc
.8b0a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b0c		65 30		adc $30				adc 	codePtr
.8b0e		85 30		sta $30				sta 	codePtr
.8b10		90 02		bcc $8b14			bcc 	_CREExit
.8b12		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b14						_CREExit:
.8b14		80 d3		bra $8ae9			bra 	_CLLoop
.8b16						_CLExit:
.8b16		4c 84 84	jmp $8484			jmp 	WarmStart
.8b19						_CLBreak:
.8b19		a9 01		lda #$01		lda	#1
.8b1b		4c b5 92	jmp $92b5		jmp	ErrorHandler
.8b1e						_CLListProcedure:
.8b1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8b20		85 38		sta $38				sta 	zTemp1
.8b22		c8		iny				iny
.8b23		b1 30		lda ($30),y			lda 	(codePtr),y
.8b25		85 39		sta $39				sta 	zTemp1+1
.8b27		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b29		85 30		sta $30				sta 	codePtr
.8b2b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b2d		85 31		sta $31				sta 	codePtr+1
.8b2f						_CLLPSearch:
.8b2f		b2 30		lda ($30)			lda 	(codePtr)
.8b31		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8b33		f0 e1		beq $8b16			beq 	_CLExit
.8b35		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8b37		b1 30		lda ($30),y			lda 	(codePtr),y
.8b39		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8b3b		d0 0e		bne $8b4b			bne 	_CLLPNext
.8b3d		c8		iny				iny 								; check if PROC this.
.8b3e		b1 30		lda ($30),y			lda 	(codePtr),y
.8b40		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8b42		d0 07		bne $8b4b			bne 	_CLLPNext
.8b44		c8		iny				iny
.8b45		b1 30		lda ($30),y			lda 	(codePtr),y
.8b47		c5 39		cmp $39				cmp 	zTemp1+1
.8b49		f0 0d		beq $8b58			beq 	_CLLPFound
.8b4b						_CLLPNext:
.8b4b		18		clc				clc
.8b4c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b4e		65 30		adc $30				adc 	codePtr
.8b50		85 30		sta $30				sta 	codePtr
.8b52		90 02		bcc $8b56			bcc 	_CREExit
.8b54		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b56						_CREExit:
.8b56		80 d7		bra $8b2f			bra 	_CLLPSearch
.8b58						_CLLPFound:
.8b58		b2 30		lda ($30)			lda 	(codePtr)
.8b5a		f0 ba		beq $8b16			beq 	_CLExit
.8b5c		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8b5e		b1 30		lda ($30),y			lda 	(codePtr),y
.8b60		48		pha				pha
.8b61		20 77 8b	jsr $8b77			jsr 	CLListOneLine 				; list line and go forward
.8b64		18		clc				clc
.8b65		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b67		65 30		adc $30				adc 	codePtr
.8b69		85 30		sta $30				sta 	codePtr
.8b6b		90 02		bcc $8b6f			bcc 	_CREExit
.8b6d		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b6f						_CREExit:
.8b6f		68		pla				pla 								; reached ENDPROC ?
.8b70		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.8b72		d0 e4		bne $8b58			bne 	_CLLPFound
.8b74		4c 84 84	jmp $8484			jmp 	WarmStart
.8b77						CLListOneLine:
.8b77		20 5a 92	jsr $925a			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8b7a		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.8b7d		a2 02		ldx #$02			ldx 	#(tokenBuffer >> 8) 		; print that line
.8b7f		a9 ad		lda #$ad			lda 	#(tokenBuffer & $FF)
.8b81		20 0e 93	jsr $930e			jsr 	PrintStringXA
.8b84		a9 0d		lda #$0d			lda 	#13 						; new line
.8b86		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8b89		60		rts				rts
.8b8a						CLCompareLineNo:
.8b8a		38		sec				sec
.8b8b		a0 01		ldy #$01			ldy 	#1
.8b8d		b1 30		lda ($30),y			lda 	(codePtr),y
.8b8f		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8b91		85 36		sta $36				sta 	zTemp0
.8b93		c8		iny				iny
.8b94		b1 30		lda ($30),y			lda 	(codePtr),y
.8b96		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8b98		05 36		ora $36				ora 	zTemp0
.8b9a		60		rts				rts
.8b9b						CLIsDigit:
.8b9b		b1 30		lda ($30),y			lda 	(codePtr),y
.8b9d		c9 30		cmp #$30			cmp 	#"0"
.8b9f		90 03		bcc $8ba4			bcc	 	_CLIDExitFalse
.8ba1		c9 3a		cmp #$3a			cmp 	#"9"+1
.8ba3		60		rts				rts
.8ba4						_CLIDExitFalse:
.8ba4		38		sec				sec
.8ba5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8ba6						Command_Load:
.8ba6		20 58 a1	jsr $a158			jsr 	EvaluateString 				; file name to load
.8ba9		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8bab		a5 36		lda $36				lda 	zTemp0
.8bad		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8bb0		b0 44		bcs $8bf6			bcs 	CLErrorHandler 				; error, so fail.
.8bb2		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.8bb5		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8bb8		20 0d 8d	jsr $8d0d			jsr 	NewProgram 					; does the actual NEW.
.8bbb		9c e0 04	stz $04e0			stz 	LoadEOFFlag 				; clear EOF Flag.
.8bbe						_CLLoop:
.8bbe		20 04 8c	jsr $8c04			jsr 	LoadReadLine 				; get next line.
.8bc1		f0 10		beq $8bd3			beq 	_CLExit 					; end, exit.
.8bc3		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8bc6		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.8bc9		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.8bcc		f0 f0		beq $8bbe			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8bce		20 5f 84	jsr $845f			jsr 	EditProgramCode 			; do the editing etc.
.8bd1		80 eb		bra $8bbe			bra 	_CLLoop
.8bd3						_CLExit:
.8bd3		ad e1 04	lda $04e1			lda 	CurrentFileStream
.8bd6		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8bd9						CLComplete:
.8bd9		a9 e3		lda #$e3			lda 	#_CLCMsg & $FF
.8bdb		a2 8b		ldx #$8b			ldx 	#_CLCMsg >> 8
.8bdd		20 0e 93	jsr $930e			jsr 	PrintStringXA
.8be0		4c 84 84	jmp $8484			jmp 	WarmStart
.8be3						_CLCMsg:
>8be3		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8beb		2e 0d 00
.8bee						CLCloseError:
.8bee		48		pha				pha
.8bef		ad e1 04	lda $04e1			lda 	CurrentFileStream
.8bf2		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8bf5		68		pla				pla
.8bf6						CLErrorHandler:
.8bf6		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8bf8		f0 05		beq $8bff			beq 	_CLEHNotFound
.8bfa		a9 1a		lda #$1a		lda	#26
.8bfc		4c b5 92	jmp $92b5		jmp	ErrorHandler
.8bff						_CLEHNotFound:
.8bff		a9 19		lda #$19		lda	#25
.8c01		4c b5 92	jmp $92b5		jmp	ErrorHandler
.8c04						LoadReadLine:
.8c04		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8c06		20 20 8c	jsr $8c20			jsr 	LoadReadCharacter
.8c09		f0 14		beq $8c1f			beq 	_LRLExit 					; eof ?
.8c0b		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8c0d		90 f5		bcc $8c04			bcc 	LoadReadLine
.8c0f						_LRLLoop:
.8c0f		9d aa 03	sta $03aa,x			sta 	lineBuffer,x 				; write into line buffer
.8c12		9e ab 03	stz $03ab,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8c15		e8		inx				inx
.8c16		20 20 8c	jsr $8c20			jsr 	LoadReadCharacter 			; next line
.8c19		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8c1b		b0 f2		bcs $8c0f			bcs 	_LRLLoop
.8c1d		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8c1f						_LRLExit:
.8c1f		60		rts				rts
.8c20						LoadReadCharacter:
.8c20		da		phx				phx
.8c21		5a		phy				phy
.8c22		ad e0 04	lda $04e0			lda 	LoadEOFFlag 				; already done EOF.
.8c25		d0 0c		bne $8c33			bne 	_LRCIsEOF
.8c27		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8c2a		90 09		bcc $8c35			bcc		_LRCExit 					; read okay.
.8c2c		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8c2e		d0 be		bne $8bee			bne 	CLCloseError
.8c30		ce e0 04	dec $04e0			dec 	LoadEOFFlag
.8c33						_LRCIsEOF:
.8c33		a9 00		lda #$00			lda 	#0
.8c35						_LRCExit:
.8c35		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8c37		d0 02		bne $8c3b			bne 	_LRCNotTab
.8c39		a9 20		lda #$20			lda 	#' '
.8c3b						_LRCNotTab:
.8c3b		c9 0a		cmp #$0a			cmp 	#$0A
.8c3d		d0 02		bne $8c41			bne 	_LRCNotLF
.8c3f		a9 0d		lda #$0d			lda 	#$0D
.8c41						_LRCNotLF:
.8c41		7a		ply				ply
.8c42		fa		plx				plx
.8c43		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8c45		60		rts				rts
.04e0						LoadEOFFlag:
>04e0								.fill 	1
.04e1						CurrentFileStream:
>04e1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8c46						Command_LOCAL:
.8c46		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8c48		20 54 8c	jsr $8c54			jsr 	LocaliseNextTerm 			; convert term to a local.
.8c4b		b1 30		lda ($30),y			lda 	(codePtr),y
.8c4d		c8		iny				iny
.8c4e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c50		f0 f4		beq $8c46			beq 	Command_LOCAL 				; if so, localise another variable.
.8c52		88		dey				dey 								; unpick pre-get
.8c53		60		rts				rts
.8c54						LocaliseNextTerm:
.8c54		20 03 9c	jsr $9c03			jsr 	EvaluateTerm 				; evaluate the term
.8c57		b5 50		lda $50,x			lda 	NSStatus,x
.8c59		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8c5b		f0 5c		beq $8cb9			beq		_LNTError
.8c5d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8c5f		85 36		sta $36				sta 	zTemp0
.8c61		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c63		85 37		sta $37				sta  	zTemp0+1
.8c65		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8c67		29 10		and #$10			and 	#NSBIsString
.8c69		d0 1e		bne $8c89			bne 	_LNTPushString
.8c6b		5a		phy				phy
.8c6c		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8c6e						_LNTPushNumLoop:
.8c6e		b1 36		lda ($36),y			lda		(zTemp0),y
.8c70		20 be b2	jsr $b2be			jsr 	StackPushByte
.8c73		c8		iny				iny
.8c74		c0 05		cpy #$05			cpy 	#5
.8c76		d0 f6		bne $8c6e			bne 	_LNTPushNumLoop
.8c78		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8c7a		20 be b2	jsr $b2be			jsr 	StackPushByte
.8c7d		a5 37		lda $37				lda 	zTemp0+1
.8c7f		20 be b2	jsr $b2be			jsr 	StackPushByte
.8c82		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8c84		20 be b2	jsr $b2be			jsr 	StackPushByte
.8c87		7a		ply				ply
.8c88		60		rts				rts
.8c89						_LNTPushString:
.8c89		5a		phy				phy
.8c8a		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8c8c		85 38		sta $38				sta 	zTemp1
.8c8e		a0 01		ldy #$01			ldy 	#1
.8c90		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c92		85 39		sta $39				sta 	zTemp1+1
.8c94		a0 00		ldy #$00			ldy 	#0 							; output string
.8c96		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8c98		f0 0a		beq $8ca4			beq 	_LNTStringOut
.8c9a						_LNTPushStrLoop:
.8c9a		b1 38		lda ($38),y			lda 	(zTemp1),y
.8c9c		f0 06		beq $8ca4			beq 	_LNTStringOut
.8c9e		20 be b2	jsr $b2be			jsr 	StackPushByte
.8ca1		c8		iny				iny
.8ca2		80 f6		bra $8c9a			bra 	_LNTPushStrLoop
.8ca4						_LNTStringOut:
.8ca4		98		tya				tya									; output length (chars written).
.8ca5		20 be b2	jsr $b2be			jsr 	StackPushByte
.8ca8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8caa		20 be b2	jsr $b2be			jsr 	StackPushByte
.8cad		b5 60		lda $60,x			lda 	NSMantissa1,x
.8caf		20 be b2	jsr $b2be			jsr 	StackPushByte
.8cb2		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8cb4		20 be b2	jsr $b2be			jsr 	StackPushByte
.8cb7		7a		ply				ply
.8cb8		60		rts				rts
.8cb9						_LNTError:
.8cb9		4c 7e a3	jmp $a37e			jmp 	SyntaxError
.8cbc						LocalPopValue:
.8cbc		20 d6 b2	jsr $b2d6			jsr 	StackPopByte
.8cbf		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8cc1		d0 17		bne $8cda			bne 	_LPVString
.8cc3		20 d6 b2	jsr $b2d6			jsr 	StackPopByte 				; address
.8cc6		85 37		sta $37				sta 	zTemp0+1
.8cc8		20 d6 b2	jsr $b2d6			jsr 	StackPopByte
.8ccb		85 36		sta $36				sta 	zTemp0
.8ccd		5a		phy				phy
.8cce		a0 04		ldy #$04			ldy 	#4 							; copy back
.8cd0						_LPVNumberCopy:
.8cd0		20 d6 b2	jsr $b2d6			jsr 	StackPopByte
.8cd3		91 36		sta ($36),y			sta 	(zTemp0),y
.8cd5		88		dey				dey
.8cd6		10 f8		bpl $8cd0			bpl 	_LPVNumberCopy
.8cd8		7a		ply				ply 								; and complete
.8cd9		60		rts				rts
.8cda						_LPVString:
.8cda		20 d6 b2	jsr $b2d6			jsr 	StackPopByte 				; address of record copied to zTemp0
.8cdd		85 37		sta $37				sta 	zTemp0+1
.8cdf		20 d6 b2	jsr $b2d6			jsr 	StackPopByte
.8ce2		85 36		sta $36				sta 	zTemp0
.8ce4		5a		phy				phy
.8ce5		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8ce7		85 38		sta $38				sta 	zTemp1
.8ce9		a0 01		ldy #$01			ldy 	#1
.8ceb		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ced		85 39		sta $39				sta 	zTemp1+1
.8cef		20 d6 b2	jsr $b2d6			jsr 	StackPopByte 				; # chars to get => y
.8cf2		a8		tay				tay
.8cf3		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8cf5		f0 0e		beq $8d05			beq 	_LPVStringCopied
.8cf7		a9 00		lda #$00			lda 	#0 							; NULL on end
.8cf9		91 38		sta ($38),y			sta 	(zTemp1),y
.8cfb						_LPVStringCopy:
.8cfb		88		dey				dey
.8cfc		30 07		bmi $8d05			bmi 	_LPVStringCopied
.8cfe		20 d6 b2	jsr $b2d6			jsr 	StackPopByte
.8d01		91 38		sta ($38),y			sta 	(zTemp1),y
.8d03		80 f6		bra $8cfb			bra 	_LPVStringCopy
.8d05						_LPVStringCopied:
.8d05		fa		plx				plx
.8d06		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8d07						NewCommand:
.8d07		20 0d 8d	jsr $8d0d			jsr 	NewProgram 					; does the actual NEW.
.8d0a		4c 84 84	jmp $8484			jmp 	WarmStart 					; and warm starts straight away.
.8d0d						NewProgram:
.8d0d		20 6d a9	jsr $a96d			jsr 	MemoryNew
.8d10		9c 00 08	stz $0800			stz 	VariableSpace 				; erase all variables.
.8d13		20 3a 86	jsr $863a			jsr 	ClearCommand 				; clear everything.
.8d16		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8d17						PokeBCommand:
.8d17		a9 01		lda #$01			lda 	#1
.8d19		80 0c		bra $8d27			bra 	PokeCommand
.8d1b						PokeWCommand:
.8d1b		a9 02		lda #$02			lda 	#2
.8d1d		80 08		bra $8d27			bra 	PokeCommand
.8d1f						PokeLCommand:
.8d1f		a9 03		lda #$03			lda 	#3
.8d21		80 04		bra $8d27			bra 	PokeCommand
.8d23						PokeDCommand:
.8d23		a9 04		lda #$04			lda 	#4
.8d25		80 00		bra $8d27			bra 	PokeCommand
.8d27						PokeCommand:
.8d27		48		pha				pha 								; save count on stack
.8d28		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8d2a		20 80 a1	jsr $a180			jsr		Evaluate16BitInteger 		; address
.8d2d		20 a4 92	jsr $92a4			jsr 	CheckComma
.8d30		e8		inx				inx
.8d31		20 6d a1	jsr $a16d			jsr		EvaluateInteger 			; data
.8d34		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8d36		85 36		sta $36				sta 	zTemp0
.8d38		a5 60		lda $60				lda 	NSMantissa1
.8d3a		85 37		sta $37				sta 	zTemp0+1
.8d3c		68		pla				pla 								; count -> zTemp1
.8d3d		85 38		sta $38				sta 	zTemp1
.8d3f		5a		phy				phy 								; save Y position.
.8d40		a0 00		ldy #$00			ldy 	#0 							; index to write
.8d42		a2 00		ldx #$00			ldx 	#0 							; index to read
.8d44						_PCLoop:
.8d44		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8d46		91 36		sta ($36),y			sta 	(zTemp0),y
.8d48		c8		iny				iny 								; next byte to write
.8d49		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8d4a		18		clc				clc
.8d4b		69 08		adc #$08			adc 	#MathStackSize
.8d4d		aa		tax				tax
.8d4e		c6 38		dec $38				dec 	zTemp1 						; done them all
.8d50		d0 f2		bne $8d44			bne 	_PCLoop
.8d52		7a		ply				ply 								; restore position.
.8d53		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8d54						CallProcedure:
.8d54		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8d56		b1 30		lda ($30),y			lda 	(codePtr),y
.8d58		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8d5a		f0 0c		beq $8d68			beq 	_CPEndParam
.8d5c						_CPParamLoop:
.8d5c		20 45 a1	jsr $a145			jsr 	EvaluateValue 				; get parameter onto stack
.8d5f		e8		inx				inx 								; bump next stack
.8d60		b1 30		lda ($30),y			lda 	(codePtr),y
.8d62		c8		iny				iny
.8d63		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8d65		f0 f5		beq $8d5c			beq 	_CPParamLoop
.8d67		88		dey				dey 								; unpick.
.8d68						_CPEndParam:
.8d68		8e 96 02	stx $0296			stx 	lastParameter 				; save the last parameters index.
.8d6b		c8		iny				iny									; skip right bracket
.8d6c		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8d6e		20 df b2	jsr $b2df			jsr 	StackOpen
.8d71		20 24 b3	jsr $b324			jsr 	STKSaveCodePosition 		; save loop position
.8d74		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8d76		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8d78		a5 60		lda $60				lda 	NSMantissa1
.8d7a		85 37		sta $37				sta 	zTemp0+1
.8d7c		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8d7e		b2 36		lda ($36)			lda 	(zTemp0)
.8d80		85 30		sta $30				sta 	safePtr
.8d82		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d84		85 31		sta $31				sta 	safePtr+1
.8d86		c8		iny				iny
.8d87		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d89		85 32		sta $32				sta 	safePtr+2
.8d8b		c8		iny				iny
.8d8c		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d8e		85 33		sta $33				sta 	safePtr+3
.8d90		c8		iny				iny 								; get Y offset -> Y
.8d91		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d93		a8		tay				tay
.8d94		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8d96		ec 96 02	cpx $0296			cpx	 	lastParameter 				; check zero parameters at the start
.8d99		f0 13		beq $8dae			beq 	_ParamExit 					; if so, exit.
.8d9b						_ParamExtract:
.8d9b		ca		dex				dex 								; put a local term on the level before
.8d9c		20 54 8c	jsr $8c54			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8d9f		20 85 8a	jsr $8a85			jsr 	AssignVariable 				; assign stacked value to the variable.
.8da2		e8		inx				inx 								; advance to next parameter to do.
.8da3		e8		inx				inx
.8da4		ec 96 02	cpx $0296			cpx 	lastParameter 				; are we done ?
.8da7		f0 05		beq $8dae			beq 	_ParamExit
.8da9		20 a4 92	jsr $92a4			jsr 	CheckComma 					; comma seperating parameters
.8dac		80 ed		bra $8d9b			bra 	_ParamExtract
.8dae						_ParamExit:
.8dae		20 9c 92	jsr $929c			jsr 	CheckRightBracket 			; check )
.8db1		60		rts				rts 								; and continue from here
.8db2						Command_ENDPROC:
.8db2		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8db4		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8db6		20 0c b3	jsr $b30c			jsr 	StackCheckFrame
.8db9		20 35 b3	jsr $b335			jsr 	STKLoadCodePosition 		; restore code position
.8dbc		20 fe b2	jsr $b2fe			jsr 	StackClose
.8dbf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8dc0						Command_Read:
.8dc0		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8dc2		20 03 9c	jsr $9c03			jsr 	EvaluateTerm
.8dc5		b5 50		lda $50,x			lda 	NSStatus,x
.8dc7		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8dc9		f0 4f		beq $8e1a			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8dcb		20 63 8e	jsr $8e63			jsr 	SwapDataCodePtrs 			; swap code and data
.8dce		ad 9c 02	lda $029c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8dd1		d0 25		bne $8df8			bne 	_CRContinueData  			; forward for the next one.
.8dd3		b2 30		lda ($30)			lda 	(codePtr)
.8dd5		f0 1c		beq $8df3			beq 	_CRNoData
.8dd7						_CRKeepSearching:
.8dd7		a9 b9		lda #$b9			lda 	#KWD_DATA 					; scan for instruction
.8dd9		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ddb		20 f7 91	jsr $91f7			jsr 	ScanForward
.8dde		c9 b9		cmp #$b9			cmp 	#KWD_DATA 					; found data ?
.8de0		f0 16		beq $8df8			beq 	_CRHaveData 				; found it
.8de2		18		clc				clc
.8de3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8de5		65 30		adc $30				adc 	codePtr
.8de7		85 30		sta $30				sta 	codePtr
.8de9		90 02		bcc $8ded			bcc 	_CREExit
.8deb		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ded						_CREExit:
.8ded		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8def		b2 30		lda ($30)			lda 	(codePtr)
.8df1		d0 e4		bne $8dd7			bne 	_CRKeepSearching
.8df3						_CRNoData:
.8df3		a9 0b		lda #$0b		lda	#11
.8df5		4c b5 92	jmp $92b5		jmp	ErrorHandler
.8df8						_CRHaveData:
.8df8						_CRContinueData:
.8df8		a2 01		ldx #$01			ldx 	#1
.8dfa		20 45 a1	jsr $a145			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8dfd		ca		dex				dex
.8dfe		20 85 8a	jsr $8a85			jsr		AssignVariable 				; do the assignment
.8e01		9c 9c 02	stz $029c			stz 	inDataStatement 			; clear in data flag
.8e04		b1 30		lda ($30),y			lda 	(codePtr),y
.8e06		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8e08		d0 04		bne $8e0e			bne 	_CRSwapBack
.8e0a		c8		iny				iny 								; consume comma
.8e0b		ee 9c 02	inc $029c			inc 	inDataStatement 			; set in data statement currently.
.8e0e						_CRSwapBack:
.8e0e		20 63 8e	jsr $8e63			jsr 	SwapDataCodePtrs			; swap them back.
.8e11		b1 30		lda ($30),y			lda 	(codePtr),y
.8e13		c8		iny				iny
.8e14		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e16		f0 a8		beq $8dc0			beq 	Command_Read 				; if so go round again.
.8e18		88		dey				dey 								; unpick get.
.8e19		60		rts				rts
.8e1a						_CRSyntax:
.8e1a		4c 7e a3	jmp $a37e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8e1d						RemCommand:
.8e1d		b1 30		lda ($30),y			lda 	(codePtr),y
.8e1f		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8e21		d0 06		bne $8e29			bne 	_RMExit
.8e23		c8		iny				iny 								; point to offset
.8e24		98		tya				tya 								; A = offset position
.8e25		38		sec				sec 								; add size +1 hence SEC
.8e26		71 30		adc ($30),y			adc 	(codePtr),y
.8e28		a8		tay				tay 								; make current position.
.8e29						_RMExit:
.8e29		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8e2a						Command_REPEAT:
.8e2a		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8e2c		20 df b2	jsr $b2df			jsr 	StackOpen
.8e2f		20 24 b3	jsr $b324			jsr 	STKSaveCodePosition 		; save loop position
.8e32		60		rts				rts
.8e33						Command_UNTIL:
.8e33		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8e35		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8e37		20 0c b3	jsr $b30c			jsr 	StackCheckFrame
.8e3a		a2 00		ldx #$00			ldx 	#0
.8e3c		20 4e a1	jsr $a14e			jsr 	EvaluateNumber 				; work out the number
.8e3f		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; check if zero
.8e42		f0 04		beq $8e48			beq 	_CULoopBack 				; if so keep looping
.8e44		20 fe b2	jsr $b2fe			jsr 	StackClose		 			; return
.8e47		60		rts				rts
.8e48						_CULoopBack:
.8e48		20 35 b3	jsr $b335			jsr 	STKLoadCodePosition 		; loop back
.8e4b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8e4c						Command_Restore:
.8e4c		20 63 8e	jsr $8e63			jsr 	SwapDataCodePtrs 			; swap code and data
.8e4f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e51		85 30		sta $30				sta 	codePtr
.8e53		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e55		85 31		sta $31				sta 	codePtr+1
.8e57		20 63 8e	jsr $8e63			jsr 	SwapDataCodePtrs 			; put them back
.8e5a		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8e5c		8d 9b 02	sta $029b			sta 	dataPointer+4   			; (read checks not EOF)
.8e5f		9c 9c 02	stz $029c			stz 	inDataStatement 			; not in data statement
.8e62		60		rts				rts
.8e63						SwapDataCodePtrs:
.8e63		da		phx				phx
.8e64		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8e66						_SDCPLoop:
.8e66		b5 30		lda $30,x			lda 	safePtr,x
.8e68		48		pha				pha
.8e69		bd 97 02	lda $0297,x			lda 	dataPointer,x
.8e6c		95 30		sta $30,x			sta 	safePtr,x
.8e6e		68		pla				pla
.8e6f		9d 97 02	sta $0297,x			sta 	dataPointer,x
.8e72		ca		dex				dex
.8e73		10 f1		bpl $8e66			bpl 	_SDCPLoop
.8e75		ad 9b 02	lda $029b			lda 	dataPointer+4 				; swap Y position over.
.8e78		8c 9b 02	sty $029b			sty 	dataPointer+4
.8e7b		a8		tay				tay
.8e7c		fa		plx				plx
.8e7d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8e7e						EOLCommand:
.8e7e		18		clc				clc
.8e7f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e81		65 30		adc $30				adc 	codePtr
.8e83		85 30		sta $30				sta 	codePtr
.8e85		90 02		bcc $8e89			bcc 	_CREExit
.8e87		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e89						_CREExit:
.8e89		80 0b		bra $8e96			bra 	RunNewLine
.8e8b						CommandRUN:
.8e8b		20 3a 86	jsr $863a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8e8e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e90		85 30		sta $30				sta 	codePtr
.8e92		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e94		85 31		sta $31				sta 	codePtr+1
.8e96						RunNewLine:
.8e96		b2 30		lda ($30)			lda 	(codePtr)
.8e98		f0 74		beq $8f0e			beq 	CRNoProgram         		; no then END.
.8e9a		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8e9c		9a		txs				txs
.8e9d						RUNCodePointerLine:
.8e9d		a0 02		ldy #$02			ldy 	#2 							; start of program
.8e9f						_CRIncMainLoop:
.8e9f		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8ea1		f0 03		beq $8ea6			beq 	_NoEvents					; if zero, skip with Z flag set.
.8ea3		20 30 81	jsr $8130			jsr 	ProcessEvents
.8ea6						_NoEvents:
.8ea6		d0 61		bne $8f09			bne 	_CRBreak
.8ea8		a5 01		lda $01				lda 	1 							; save I/O 0
.8eaa		48		pha				pha
.8eab		64 01		stz $01				stz 	1 							; access I/O Page 0
.8ead		38		sec				sec 								; calculate timer - LastTick
.8eae		ad 59 d6	lda $d659			lda 	$D659
.8eb1		cd e2 04	cmp $04e2			cmp 	LastTick
.8eb4		f0 06		beq $8ebc			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8eb6		8d e2 04	sta $04e2			sta 	LastTick 					; update last timer
.8eb9		20 2b a2	jsr $a22b			jsr 	TickHandler 							; go do the code.
.8ebc						_NoFireTick:
.8ebc		68		pla				pla 								; restore I/O 0
.8ebd		85 01		sta $01				sta 	1
.8ebf						_CRNoBreakCheck:
.8ebf		c8		iny				iny									; next token
.8ec0						_CRMainLoop:
.8ec0		9c 90 02	stz $0290			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8ec3		b1 30		lda ($30),y			lda 	(codePtr),y
.8ec5		10 10		bpl $8ed7			bpl 	_CRNotKeyword				; not a token.
.8ec7		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8ec9		b0 04		bcs $8ecf			bcs 	_CRIsKeyword
.8ecb		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8ecd		b0 34		bcs $8f03			bcs		_CRSyntaxError
.8ecf						_CRIsKeyword:
.8ecf		c8		iny				iny 								; consume command
.8ed0		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8ed1		aa		tax				tax 								; put in X for vector jump
.8ed2		20 06 8f	jsr $8f06			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8ed5		80 e9		bra $8ec0			bra 	_CRMainLoop 				; and loop round
.8ed7						_CRNotKeyword:
.8ed7		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8ed9		f0 c4		beq $8e9f			beq 	_CRIncMainLoop
.8edb		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8edd		90 05		bcc $8ee4			bcc 	_CRNotVariable
.8edf						_CRGoLet:
.8edf		20 4c 8a	jsr $8a4c			jsr 	LetCommand
.8ee2		80 dc		bra $8ec0			bra 	_CRMainLoop
.8ee4						_CRNotVariable:
.8ee4		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8ee6		f0 f7		beq $8edf			beq 	_CRGoLet
.8ee8		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8eea		f0 f3		beq $8edf			beq 	_CRGoLet
.8eec		c9 21		cmp #$21			cmp 	#KWD_PLING
.8eee		f0 ef		beq $8edf			beq 	_CRGoLet
.8ef0		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8ef2		f0 09		beq $8efd			beq 	_CRGoRem
.8ef4		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8ef6		d0 0b		bne $8f03			bne 	_CRSyntaxError
.8ef8		20 f6 82	jsr $82f6			jsr 	LabelHere
.8efb		80 c3		bra $8ec0			bra 	_CRMainLoop
.8efd						_CRGoRem:
.8efd		c8		iny				iny
.8efe		20 1d 8e	jsr $8e1d			jsr 	RemCommand
.8f01		80 bd		bra $8ec0			bra 	_CRMainLoop
.8f03						_CRSyntaxError:
.8f03		4c 7e a3	jmp $a37e			jmp 	SyntaxError
.8f06						_CRCallVector0:
.8f06		7c a4 8f	jmp ($8fa4,x)			jmp 	(VectorSet0,x)
.8f09						_CRBreak:
.8f09		a9 01		lda #$01		lda	#1
.8f0b		4c b5 92	jmp $92b5		jmp	ErrorHandler
.8f0e						CRNoProgram:
.8f0e		4c e2 87	jmp $87e2			jmp 	EndCommand
.8f11						Shift1Command:
.8f11		b1 30		lda ($30),y			lda 	(codePtr),y
.8f13		c8		iny				iny
.8f14		0a		asl a				asl 	a
.8f15		aa		tax				tax
.8f16		7c 58 90	jmp ($9058,x)			jmp 	(VectorSet1,x)
.8f19						Shift2Command:
.8f19		b1 30		lda ($30),y			lda 	(codePtr),y
.8f1b		c8		iny				iny
.8f1c		0a		asl a				asl 	a
.8f1d		aa		tax				tax
.8f1e		7c 94 90	jmp ($9094,x)			jmp 	(VectorSet2,x)
.8f21						Unused1:
.8f21						Unused2:
.8f21						Unused3:
.8f21						Unused4:
.8f21		4c 7e a3	jmp $a37e			jmp 	SyntaxError
>8f24								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8f24						VectorSetPunc:
>8f24		6d 95					.word	ShiftLeft                        ; $00 <<
>8f26		58 93					.word	BinaryCompareLessEqual           ; $01 <=
>8f28		4e 93					.word	BinaryCompareNotEqual            ; $02 <>
>8f2a		7e a3					.word	SyntaxError                      ; $03 !!3
>8f2c		7e a3					.word	SyntaxError                      ; $04 ><
>8f2e		62 93					.word	BinaryCompareGreaterEqual        ; $05 >=
>8f30		70 95					.word	ShiftRight                       ; $06 >>
>8f32		7e a3					.word	SyntaxError                      ; $07 !!7
>8f34		7e a3					.word	SyntaxError                      ; $08 !!8
>8f36		7e a3					.word	SyntaxError                      ; $09 !!9
>8f38		7e a3					.word	SyntaxError                      ; $0a !!10
>8f3a		7e a3					.word	SyntaxError                      ; $0b !!11
>8f3c		7e a3					.word	SyntaxError                      ; $0c !!12
>8f3e		7e a3					.word	SyntaxError                      ; $0d !!13
>8f40		7e a3					.word	SyntaxError                      ; $0e !!14
>8f42		7e a3					.word	SyntaxError                      ; $0f !!15
>8f44		7e a3					.word	SyntaxError                      ; $10 @
>8f46		7e a3					.word	SyntaxError                      ; $11 !!17
>8f48		7e a3					.word	SyntaxError                      ; $12 !!18
>8f4a		7e a3					.word	SyntaxError                      ; $13 [
>8f4c		19 94					.word	IntegerDivide                    ; $14 \
>8f4e		7e a3					.word	SyntaxError                      ; $15 ]
>8f50		ab 96					.word	EorInteger                       ; $16 ^
>8f52		7e a3					.word	SyntaxError                      ; $17 _
>8f54		7e a3					.word	SyntaxError                      ; $18 `
>8f56		7e a3					.word	SyntaxError                      ; $19 !!25
>8f58		7e a3					.word	SyntaxError                      ; $1a !!26
>8f5a		7e a3					.word	SyntaxError                      ; $1b {
>8f5c		76 96					.word	OraInteger                       ; $1c |
>8f5e		7e a3					.word	SyntaxError                      ; $1d }
>8f60		7e a3					.word	SyntaxError                      ; $1e ~
>8f62		7e a3					.word	SyntaxError                      ; $1f [7m<7F>[m
>8f64		7e a3					.word	SyntaxError                      ; $20
>8f66		e0 96					.word	WordIndirect                     ; $21 !
>8f68		7e a3					.word	SyntaxError                      ; $22 "
>8f6a		7e a3					.word	SyntaxError                      ; $23 #
>8f6c		7e a3					.word	SyntaxError                      ; $24 $
>8f6e		5a 94					.word	IntegerModulus                   ; $25 %
>8f70		41 96					.word	AndInteger                       ; $26 &
>8f72		7e a3					.word	SyntaxError                      ; $27 '
>8f74		7e a3					.word	SyntaxError                      ; $28 (
>8f76		7e a3					.word	SyntaxError                      ; $29 )
>8f78		c8 94					.word	MulInteger                       ; $2a *
>8f7a		e3 95					.word	AddInteger                       ; $2b +
>8f7c		7e a3					.word	SyntaxError                      ; $2c ,
>8f7e		1c 96					.word	SubInteger                       ; $2d -
>8f80		7e a3					.word	SyntaxError                      ; $2e .
>8f82		9a 98					.word	FDivideCommand                   ; $2f /
>8f84		7e a3					.word	SyntaxError                      ; $30 0
>8f86		7e a3					.word	SyntaxError                      ; $31 1
>8f88		7e a3					.word	SyntaxError                      ; $32 2
>8f8a		7e a3					.word	SyntaxError                      ; $33 3
>8f8c		7e a3					.word	SyntaxError                      ; $34 4
>8f8e		7e a3					.word	SyntaxError                      ; $35 5
>8f90		7e a3					.word	SyntaxError                      ; $36 6
>8f92		7e a3					.word	SyntaxError                      ; $37 7
>8f94		7e a3					.word	SyntaxError                      ; $38 8
>8f96		7e a3					.word	SyntaxError                      ; $39 9
>8f98		7e a3					.word	SyntaxError                      ; $3a :
>8f9a		7e a3					.word	SyntaxError                      ; $3b ;
>8f9c		3a 93					.word	BinaryCompareLess                ; $3c <
>8f9e		30 93					.word	BinaryCompareEqual               ; $3d =
>8fa0		44 93					.word	BinaryCompareGreater             ; $3e >
>8fa2		02 97					.word	ByteIndirect                     ; $3f ?
.8fa4						VectorSet0:
>8fa4		7e 8e					.word	EOLCommand                       ; $80 !0:EOF
>8fa6		11 8f					.word	Shift1Command                    ; $81 !1:SH1
>8fa8		19 8f					.word	Shift2Command                    ; $82 !2:SH2
>8faa		84 9d					.word	AbsUnary                         ; $83 ABS(
>8fac		92 9d					.word	AllocUnary                       ; $84 ALLOC(
>8fae		02 9e					.word	AscUnary                         ; $85 ASC(
>8fb0		e6 9f					.word	ChrUnary                         ; $86 CHR$(
>8fb2		01 a8					.word	UnaryEvent                       ; $87 EVENT(
>8fb4		2c 93					.word	UnaryFalse                       ; $88 FALSE
>8fb6		0f 9e					.word	FracUnary                        ; $89 FRAC(
>8fb8		7e a3					.word	SyntaxError                      ; $8a GETDATE$(
>8fba		7e a3					.word	SyntaxError                      ; $8b GETTIME$(
>8fbc		8b a7					.word	UnaryHit                         ; $8c HIT(
>8fbe		24 9e					.word	IntUnary                         ; $8d INT(
>8fc0		a5 9f					.word	IsValUnary                       ; $8e ISVAL(
>8fc2		85 a8					.word	UnaryJoyB                        ; $8f JOYB(
>8fc4		5e a8					.word	UnaryJoyX                        ; $90 JOYX(
>8fc6		61 a8					.word	UnaryJoyY                        ; $91 JOYY(
>8fc8		b9 a0					.word	Unary_Left                       ; $92 LEFT$(
>8fca		35 9e					.word	LenUnary                         ; $93 LEN(
>8fcc		53 9e					.word	Unary_Max                        ; $94 MAX(
>8fce		db a0					.word	Unary_Mid                        ; $95 MID$(
>8fd0		4f 9e					.word	Unary_Min                        ; $96 MIN(
>8fd2		9e 9e					.word	Unary_Not                        ; $97 NOT(
>8fd4		b1 9e					.word	PeekByteUnary                    ; $98 PEEK(
>8fd6		bd 9e					.word	PeekDUnary                       ; $99 PEEKD(
>8fd8		b9 9e					.word	PeekLUnary                       ; $9a PEEKL(
>8fda		b5 9e					.word	PeekWUnary                       ; $9b PEEKW(
>8fdc		3c b2					.word	UnaryPlaying                     ; $9c PLAYING(
>8fde		ea 9e					.word	Unary_Random                     ; $9d RANDOM(
>8fe0		c6 a0					.word	Unary_Right                      ; $9e RIGHT$(
>8fe2		07 9f					.word	Unary_Rnd                        ; $9f RND(
>8fe4		7d 9f					.word	SgnUnary                         ; $a0 SGN(
>8fe6		f8 9f					.word	SpcUnary                         ; $a1 SPC(
>8fe8		13 a0					.word	Unary_Str                        ; $a2 STR$(
>8fea		97 a8					.word	UnaryTimer                       ; $a3 TIMER(
>8fec		21 93					.word	UnaryTrue                        ; $a4 TRUE
>8fee		9b 9f					.word	ValUnary                         ; $a5 VAL(
>8ff0		e5 87					.word	ForCommand                       ; $a6 FOR
>8ff2		28 89					.word	IfCommand                        ; $a7 IF
>8ff4		21 8f					.word	Unused1                          ; $a8 PROC
>8ff6		2a 8e					.word	Command_REPEAT                   ; $a9 REPEAT
>8ff8		6d 92					.word	Command_WHILE                    ; $aa WHILE
>8ffa		51 89					.word	EndIf                            ; $ab ENDIF
>8ffc		b2 8d					.word	Command_ENDPROC                  ; $ac ENDPROC
>8ffe		97 88					.word	NextCommand                      ; $ad NEXT
>9000		21 8f					.word	Unused4                          ; $ae THEN
>9002		33 8e					.word	Command_UNTIL                    ; $af UNTIL
>9004		8e 92					.word	Command_WEND                     ; $b0 WEND
>9006		7e a3					.word	SyntaxError                      ; $b1 BY
>9008		05 86					.word	CallCommand                      ; $b2 CALL
>900a		3f a5					.word	CircleCommand                    ; $b3 CIRCLE
>900c		3a 86					.word	ClearCommand                     ; $b4 CLEAR
>900e		92 86					.word	ClearScreen                      ; $b5 CLS
>9010		7e a3					.word	SyntaxError                      ; $b6 COLOR
>9012		7e a3					.word	SyntaxError                      ; $b7 COLOUR
>9014		57 89					.word	Command_CPrint                   ; $b8 CPRINT
>9016		9a 86					.word	Command_Data                     ; $b9 DATA
>9018		a2 86					.word	DimCommand                       ; $ba DIM
>901a		21 8f					.word	Unused3                          ; $bb DOWNTO
>901c		4a 89					.word	ElseCode                         ; $bc ELSE
>901e		7e a3					.word	SyntaxError                      ; $bd FROM
>9020		5e a7					.word	GfxCommand                       ; $be GFX
>9022		f0 88					.word	Command_GOSUB                    ; $bf GOSUB
>9024		0e 89					.word	GotoCommand                      ; $c0 GOTO
>9026		7e a3					.word	SyntaxError                      ; $c1 HERE
>9028		68 a5					.word	ImageCommand                     ; $c2 IMAGE
>902a		52 89					.word	Command_Input                    ; $c3 INPUT
>902c		4c 8a					.word	LetCommand                       ; $c4 LET
>902e		ba a5					.word	LineCommand                      ; $c5 LINE
>9030		46 8c					.word	Command_LOCAL                    ; $c6 LOCAL
>9032		7e a3					.word	SyntaxError                      ; $c7 OFF
>9034		7e a3					.word	SyntaxError                      ; $c8 ON
>9036		7e a3					.word	SyntaxError                      ; $c9 OUTLINE
>9038		af a7					.word	PaletteCommand                   ; $ca PALETTE
>903a		b3 a5					.word	PlotCommand                      ; $cb PLOT
>903c		17 8d					.word	PokeBCommand                     ; $cc POKE
>903e		23 8d					.word	PokeDCommand                     ; $cd POKED
>9040		1f 8d					.word	PokeLCommand                     ; $ce POKEL
>9042		1b 8d					.word	PokeWCommand                     ; $cf POKEW
>9044		5e 89					.word	Command_Print                    ; $d0 PRINT
>9046		c0 8d					.word	Command_Read                     ; $d1 READ
>9048		3b a5					.word	RectangleCommand                 ; $d2 RECT
>904a		1d 8e					.word	RemCommand                       ; $d3 REM
>904c		00 89					.word	Command_RETURN                   ; $d4 RETURN
>904e		7e a3					.word	SyntaxError                      ; $d5 SOLID
>9050		58 b2					.word	SoundCommand                     ; $d6 SOUND
>9052		4a a5					.word	SpriteCommand                    ; $d7 SPRITE
>9054		84 a5					.word	TextCommand                      ; $d8 TEXT
>9056		21 8f					.word	Unused2                          ; $d9 TO
.9058						VectorSet1:
>9058		7e a3					.word	SyntaxError                      ; $80 !0:EOF
>905a		7e a3					.word	SyntaxError                      ; $81 !1:SH1
>905c		7e a3					.word	SyntaxError                      ; $82 !2:SH2
>905e		b9 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>9060		d5 84					.word	AssertCommand                    ; $84 ASSERT
>9062		fe a6					.word	BitmapCtrl                       ; $85 BITMAP
>9064		e5 84					.word	Command_BLoad                    ; $86 BLOAD
>9066		83 85					.word	Command_BSave                    ; $87 BSAVE
>9068		5f 87					.word	Command_Dir                      ; $88 DIR
>906a		db 87					.word	Command_Drive                    ; $89 DRIVE
>906c		e2 87					.word	EndCommand                       ; $8a END
>906e		10 b2					.word	Explode                          ; $8b EXPLODE
>9070		7e a3					.word	SyntaxError                      ; $8c GO
>9072		7e a3					.word	SyntaxError                      ; $8d HIMEM
>9074		9c 8a					.word	Command_List                     ; $8e LIST
>9076		a6 8b					.word	Command_Load                     ; $8f LOAD
>9078		07 8d					.word	NewCommand                       ; $90 NEW
>907a		ec b1					.word	PingCommand                      ; $91 PING
>907c		4c 8e					.word	Command_Restore                  ; $92 RESTORE
>907e		8b 8e					.word	CommandRUN                       ; $93 RUN
>9080		1c 91					.word	Command_Save                     ; $94 SAVE
>9082		7e a3					.word	SyntaxError                      ; $95 SETDATE
>9084		7e a3					.word	SyntaxError                      ; $96 SETTIME
>9086		04 b2					.word	ShootCommand                     ; $97 SHOOT
>9088		43 a7					.word	SpritesCtrl                      ; $98 SPRITES
>908a		a0 91					.word	StopCommand                      ; $99 STOP
>908c		17 b4					.word	Command_VERIFY                   ; $9a VERIFY
>908e		f8 a7					.word	XGoCommand                       ; $9b XGO
>9090		ef a7					.word	XLoadCommand                     ; $9c XLOAD
>9092		f8 b1					.word	ZapCommand                       ; $9d ZAP
.9094						VectorSet2:
>9094		7e a3					.word	SyntaxError                      ; $80 !0:EOF
>9096		7e a3					.word	SyntaxError                      ; $81 !1:SH1
>9098		7e a3					.word	SyntaxError                      ; $82 !2:SH2
>909a		3d a2					.word	Assemble_adc                     ; $83 ADC
>909c		35 a2					.word	Assemble_and                     ; $84 AND
>909e		51 a2					.word	Assemble_asl                     ; $85 ASL
>90a0		bb a2					.word	Assemble_bcc                     ; $86 BCC
>90a2		bf a2					.word	Assemble_bcs                     ; $87 BCS
>90a4		c7 a2					.word	Assemble_beq                     ; $88 BEQ
>90a6		7e a2					.word	Assemble_bit                     ; $89 BIT
>90a8		af a2					.word	Assemble_bmi                     ; $8a BMI
>90aa		c3 a2					.word	Assemble_bne                     ; $8b BNE
>90ac		ab a2					.word	Assemble_bpl                     ; $8c BPL
>90ae		cb a2					.word	Assemble_bra                     ; $8d BRA
>90b0		cf a2					.word	Assemble_brk                     ; $8e BRK
>90b2		b3 a2					.word	Assemble_bvc                     ; $8f BVC
>90b4		b7 a2					.word	Assemble_bvs                     ; $90 BVS
>90b6		d7 a2					.word	Assemble_clc                     ; $91 CLC
>90b8		2b a3					.word	Assemble_cld                     ; $92 CLD
>90ba		eb a2					.word	Assemble_cli                     ; $93 CLI
>90bc		1b a3					.word	Assemble_clv                     ; $94 CLV
>90be		49 a2					.word	Assemble_cmp                     ; $95 CMP
>90c0		92 a2					.word	Assemble_cpx                     ; $96 CPX
>90c2		8d a2					.word	Assemble_cpy                     ; $97 CPY
>90c4		6f a2					.word	Assemble_dec                     ; $98 DEC
>90c6		27 a3					.word	Assemble_dex                     ; $99 DEX
>90c8		03 a3					.word	Assemble_dey                     ; $9a DEY
>90ca		39 a2					.word	Assemble_eor                     ; $9b EOR
>90cc		74 a2					.word	Assemble_inc                     ; $9c INC
>90ce		37 a3					.word	Assemble_inx                     ; $9d INX
>90d0		23 a3					.word	Assemble_iny                     ; $9e INY
>90d2		a6 a2					.word	Assemble_jmp                     ; $9f JMP
>90d4		a1 a2					.word	Assemble_jsr                     ; $a0 JSR
>90d6		45 a2					.word	Assemble_lda                     ; $a1 LDA
>90d8		6a a2					.word	Assemble_ldx                     ; $a2 LDX
>90da		88 a2					.word	Assemble_ldy                     ; $a3 LDY
>90dc		5b a2					.word	Assemble_lsr                     ; $a4 LSR
>90de		3b a3					.word	Assemble_nop                     ; $a5 NOP
>90e0		31 a2					.word	Assemble_ora                     ; $a6 ORA
>90e2		e7 a2					.word	Assemble_pha                     ; $a7 PHA
>90e4		d3 a2					.word	Assemble_php                     ; $a8 PHP
>90e6		2f a3					.word	Assemble_phx                     ; $a9 PHX
>90e8		ef a2					.word	Assemble_phy                     ; $aa PHY
>90ea		f7 a2					.word	Assemble_pla                     ; $ab PLA
>90ec		db a2					.word	Assemble_plp                     ; $ac PLP
>90ee		43 a3					.word	Assemble_plx                     ; $ad PLX
>90f0		ff a2					.word	Assemble_ply                     ; $ae PLY
>90f2		56 a2					.word	Assemble_rol                     ; $af ROL
>90f4		60 a2					.word	Assemble_ror                     ; $b0 ROR
>90f6		e3 a2					.word	Assemble_rti                     ; $b1 RTI
>90f8		f3 a2					.word	Assemble_rts                     ; $b2 RTS
>90fa		4d a2					.word	Assemble_sbc                     ; $b3 SBC
>90fc		df a2					.word	Assemble_sec                     ; $b4 SEC
>90fe		3f a3					.word	Assemble_sed                     ; $b5 SED
>9100		fb a2					.word	Assemble_sei                     ; $b6 SEI
>9102		41 a2					.word	Assemble_sta                     ; $b7 STA
>9104		33 a3					.word	Assemble_stp                     ; $b8 STP
>9106		65 a2					.word	Assemble_stx                     ; $b9 STX
>9108		83 a2					.word	Assemble_sty                     ; $ba STY
>910a		79 a2					.word	Assemble_stz                     ; $bb STZ
>910c		17 a3					.word	Assemble_tax                     ; $bc TAX
>910e		13 a3					.word	Assemble_tay                     ; $bd TAY
>9110		9c a2					.word	Assemble_trb                     ; $be TRB
>9112		97 a2					.word	Assemble_tsb                     ; $bf TSB
>9114		1f a3					.word	Assemble_tsx                     ; $c0 TSX
>9116		07 a3					.word	Assemble_txa                     ; $c1 TXA
>9118		0f a3					.word	Assemble_txs                     ; $c2 TXS
>911a		0b a3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.911c						Command_Save:
.911c		20 58 a1	jsr $a158			jsr 	EvaluateString 				; file name to load
.911f		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9121		a5 36		lda $36				lda 	zTemp0
.9123		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.9126		b0 2f		bcs $9157			bcs 	CSErrorHandler 				; error, so fail.
.9128		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.912b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.912d		85 30		sta $30				sta 	codePtr
.912f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9131		85 31		sta $31				sta 	codePtr+1
.9133						_CSLoop:
.9133		b2 30		lda ($30)			lda 	(codePtr)
.9135		f0 17		beq $914e			beq 	_CSExit
.9137		20 7b 91	jsr $917b			jsr 	CSGetCleanLine
.913a		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.913c		85 36		sta $36				sta 	zTemp0
.913e		20 5a 91	jsr $915a			jsr 	CLWriteByteBlock 			; write the block out.
.9141		18		clc				clc
.9142		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9144		65 30		adc $30				adc 	codePtr
.9146		85 30		sta $30				sta 	codePtr
.9148		90 02		bcc $914c			bcc 	_CREExit
.914a		e6 31		inc $31				inc 	codePtr+1 					; carry
.914c						_CREExit:
.914c		80 e5		bra $9133			bra 	_CSLoop
.914e						_CSExit:
.914e		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; close file
.9151		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.9154		4c d9 8b	jmp $8bd9			jmp 	CLComplete 					; display complete message.
.9157						CSErrorHandler:
.9157		4c f6 8b	jmp $8bf6			jmp 	CLErrorHandler
.915a						CLWriteByteBlock:
.915a		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.915c		f0 1c		beq $917a			beq 	_CLWBBExit					; if so, exit
.915e		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; stream to write, count in X
.9161		20 71 80	jsr $8071			jsr 	KNLWriteBlock 				; call one write attempt
.9164		b0 f1		bcs $9157			bcs 	CSErrorHandler 				; error occurred
.9166		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.9168		8a		txa				txa 								; subtract bytes written from X, total count.
.9169		38		sec				sec
.916a		e5 38		sbc $38				sbc 	zTemp1
.916c		aa		tax				tax
.916d		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.916e		a5 36		lda $36				lda 	zTemp0
.9170		65 38		adc $38				adc 	zTemp1
.9172		85 36		sta $36				sta 	zTemp0
.9174		90 e4		bcc $915a			bcc 	CLWriteByteBlock
.9176		e6 37		inc $37				inc 	zTemp0+1
.9178		80 e0		bra $915a			bra 	CLWriteByteBlock 			; and retry write out.
.917a						_CLWBBExit:
.917a		60		rts				rts
.917b						CSGetCleanLine:
.917b		a9 00		lda #$00			lda 	#0 							; no indent.
.917d		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.9180		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9182		a0 00		ldy #$00			ldy 	#0
.9184						_CSClean:
.9184		b9 ad 02	lda $02ad,y			lda 	tokenBuffer,y
.9187		f0 09		beq $9192			beq 	_CSDoneClean
.9189		30 04		bmi $918f			bmi 	_CSIgnoreCharacter
.918b		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.918e		e8		inx				inx
.918f						_CSIgnoreCharacter:
.918f		c8		iny				iny
.9190		80 f2		bra $9184			bra 	_CSClean
.9192						_CSDoneClean:
.9192		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9194		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.9197		e8		inx				inx
.9198		9e aa 03	stz $03aa,x			stz 	lineBuffer,x
.919b		a0 03		ldy #$03			ldy 	#(lineBuffer >> 8) 			; line address in YA
.919d		a9 aa		lda #$aa			lda 	#(lineBuffer & $FF)
.919f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.91a0						StopCommand:
.91a0		a9 08		lda #$08		lda	#8
.91a2		4c b5 92	jmp $92b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.91a5						ProcedureScan:
.91a5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91a7		85 30		sta $30				sta 	codePtr
.91a9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91ab		85 31		sta $31				sta 	codePtr+1
.91ad						_PSLoop:
.91ad		b2 30		lda ($30)			lda 	(codePtr)
.91af		f0 42		beq $91f3			beq 	_PSExit
.91b1		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.91b3		b1 30		lda ($30),y			lda 	(codePtr),y
.91b5		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.91b7		d0 2d		bne $91e6			bne 	_PSNext
.91b9		c8		iny				iny 								; get the address of the record to zTemp0 and
.91ba		b1 30		lda ($30),y			lda 	(codePtr),y
.91bc		29 c0		and #$c0			and 	#$C0
.91be		c9 40		cmp #$40			cmp 	#$40
.91c0		d0 32		bne $91f4			bne 	_PSSyntax
.91c2		b1 30		lda ($30),y			lda 	(codePtr),y
.91c4		18		clc				clc
.91c5		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.91c7		85 37		sta $37				sta 	zTemp0+1
.91c9		c8		iny				iny 								; LSB
.91ca		b1 30		lda ($30),y			lda 	(codePtr),y
.91cc		85 36		sta $36				sta 	zTemp0
.91ce		c8		iny				iny 								; character after variable call.
.91cf		98		tya				tya 								; save Y offset at +7 (exponent slot)
.91d0		a0 07		ldy #$07			ldy 	#7
.91d2		91 36		sta ($36),y			sta 	(zTemp0),y
.91d4		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.91d6		a0 02		ldy #$02			ldy 	#2
.91d8		91 36		sta ($36),y			sta 	(zTemp0),y
.91da		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.91dc						_PSCopy:
.91dc		b5 30		lda $30,x			lda 	safePtr,x
.91de		c8		iny				iny
.91df		91 36		sta ($36),y			sta 	(zTemp0),y
.91e1		e8		inx				inx
.91e2		e0 04		cpx #$04			cpx 	#4
.91e4		d0 f6		bne $91dc			bne 	_PSCopy
.91e6						_PSNext:
.91e6		18		clc				clc
.91e7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.91e9		65 30		adc $30				adc 	codePtr
.91eb		85 30		sta $30				sta 	codePtr
.91ed		90 02		bcc $91f1			bcc 	_CREExit
.91ef		e6 31		inc $31				inc 	codePtr+1 					; carry
.91f1						_CREExit:
.91f1		80 ba		bra $91ad			bra 	_PSLoop
.91f3						_PSExit:
.91f3		60		rts				rts
.91f4						_PSSyntax:
.91f4		4c 7e a3	jmp $a37e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.91f7						ScanForward:
.91f7		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.91f9		86 37		stx $37				stx 	zTemp0+1
.91fb		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.91fd						_ScanLoop:
.91fd		b1 30		lda ($30),y			lda 	(codePtr),y
.91ff		c8		iny				iny
.9200		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9202		d0 0e		bne $9212			bne 	_ScanGoNext
.9204		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9206		f0 04		beq $920c			beq 	_ScanMatch
.9208		c5 37		cmp $37				cmp 	zTemp0+1
.920a		d0 06		bne $9212			bne 	_ScanGoNext
.920c						_ScanMatch:
.920c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.920e		d0 01		bne $9211			bne 	_ScanNotEndEOL
.9210		88		dey				dey
.9211						_ScanNotEndEOL:
.9211		60		rts				rts
.9212						_ScanGoNext:
.9212		20 17 92	jsr $9217			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9215		80 e6		bra $91fd			bra 	_ScanLoop
.9217						ScanForwardOne:
.9217		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9219		90 3e		bcc $9259			bcc 	_SFWExit
.921b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.921d		90 18		bcc $9237			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.921f		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9221		b0 2f		bcs $9252			bcs 	_ScanSkipData
.9223		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9225		90 32		bcc $9259			bcc 	_SFWExit 					; if not, ordinary keywords.
.9227		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.9229		b0 2e		bcs $9259			bcs 	_SFWExit
.922b		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.922d		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.922f		b0 28		bcs $9259			bcs 	_SFWExit
.9231		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9233		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9235		80 22		bra $9259			bra 	_SFWExit
.9237						_ScanSkipOne:
.9237		c8		iny				iny 								; consume the extra one.
.9238		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.923a		d0 1d		bne $9259			bne 	_SFWExit
.923c		18		clc				clc
.923d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.923f		65 30		adc $30				adc 	codePtr
.9241		85 30		sta $30				sta 	codePtr
.9243		90 02		bcc $9247			bcc 	_CREExit
.9245		e6 31		inc $31				inc 	codePtr+1 					; carry
.9247						_CREExit:
.9247		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9249		b2 30		lda ($30)			lda 	(codePtr)
.924b		d0 0c		bne $9259			bne 	_SFWExit 					; if not zero, more to scan
.924d		a9 13		lda #$13		lda	#19
.924f		4c b5 92	jmp $92b5		jmp	ErrorHandler
.9252						_ScanSkipData:
.9252		88		dey				dey 								; point at data token
.9253		c8		iny				iny 								; point to offset
.9254		98		tya				tya 								; A = offset position
.9255		38		sec				sec 								; add size +1 hence SEC
.9256		71 30		adc ($30),y			adc 	(codePtr),y
.9258		a8		tay				tay 								; make current position.
.9259						_SFWExit:
.9259		60		rts				rts
.925a						ScanGetCurrentLineStep:
.925a		64 38		stz $38				stz 	zTemp1
.925c		a0 03		ldy #$03			ldy 	#3
.925e						_SGCLSLoop:
.925e		b1 30		lda ($30),y			lda 	(codePtr),y
.9260		c8		iny				iny
.9261		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9263		f0 05		beq $926a			beq 	_SGCLSExit
.9265		20 17 92	jsr $9217			jsr 	ScanForwardOne
.9268		80 f4		bra $925e			bra 	_SGCLSLoop
.926a						_SGCLSExit:
.926a		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.926c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.926d						Command_WHILE:
.926d		5a		phy				phy 								; save position of the test
.926e		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9270		20 4e a1	jsr $a14e			jsr 	EvaluateNumber
.9273		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; check if zero
.9276		f0 0e		beq $9286			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9278		98		tya				tya 								; position *after* test.
.9279		7a		ply				ply 								; restore position before test, at WHILE
.927a		88		dey				dey 								; so we execute the WHILE command again.
.927b		48		pha				pha 								; push after test on the stack
.927c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.927e		20 df b2	jsr $b2df			jsr 	StackOpen
.9281		20 24 b3	jsr $b324			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9284		7a		ply				ply 								; restore the position *after* the test
.9285		60		rts				rts
.9286						_WHExitLoop:
.9286		68		pla				pla 								; throw post loop position
.9287		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.9289		aa		tax				tax
.928a		20 f7 91	jsr $91f7			jsr 	ScanForward
.928d		60		rts				rts
.928e						Command_WEND:
.928e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9290		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9292		20 0c b3	jsr $b30c			jsr 	StackCheckFrame
.9295		20 35 b3	jsr $b335			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9298		20 fe b2	jsr $b2fe			jsr 	StackClose		 			; erase the frame
.929b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.929c						CheckRightBracket:
.929c		b1 30		lda ($30),y			lda 	(codePtr),y
.929e		c8		iny				iny
.929f		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.92a1		d0 0f		bne $92b2			bne 	CNAFail
.92a3		60		rts				rts
.92a4						CheckComma:
.92a4		b1 30		lda ($30),y			lda 	(codePtr),y
.92a6		c8		iny				iny
.92a7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.92a9		d0 07		bne $92b2			bne 	CNAFail
.92ab		60		rts				rts
.92ac						CheckNextA:
.92ac		d1 30		cmp ($30),y			cmp 	(codePtr),y
.92ae		d0 02		bne $92b2			bne 	CNAFail
.92b0		c8		iny				iny 								; skip character
.92b1		60		rts				rts 								; and exit
.92b2						CNAFail:
.92b2		4c 7e a3	jmp $a37e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.92b5						ErrorHandler:
.92b5		a8		tay				tay 								; find the error text
.92b6		f0 49		beq $9301			beq 	_EHEnd
.92b8		a2 00		ldx #$00			ldx 	#0
.92ba		a9 97		lda #$97			lda 	#((ErrorText) & $FF)
.92bc		85 36		sta $36				sta 	0+zTemp0
.92be		a9 a3		lda #$a3			lda 	#((ErrorText) >> 8)
.92c0		85 37		sta $37				sta 	1+zTemp0
.92c2						_EHFind:
.92c2		88		dey				dey 								; keep looking through text
.92c3		f0 0e		beq $92d3			beq 	_EHFound
.92c5						_EHFindZero:
.92c5		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.92c7		e6 36		inc $36				inc 	zTemp0
.92c9		d0 02		bne $92cd			bne 	_EHFNoCarry
.92cb		e6 37		inc $37				inc 	zTemp0+1
.92cd						_EHFNoCarry:
.92cd		c9 00		cmp #$00			cmp 	#0
.92cf		d0 f4		bne $92c5			bne 	_EHFindZero
.92d1		80 ef		bra $92c2			bra 	_EHFind
.92d3						_EHFound:
.92d3		a5 36		lda $36				lda 	zTemp0 						; print message
.92d5		a6 37		ldx $37				ldx 	zTemp0+1
.92d7		20 0e 93	jsr $930e			jsr 	PrintStringXA
.92da		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.92dc		b1 30		lda ($30),y			lda 	(codePtr),y
.92de		d0 05		bne $92e5			bne 	_EHAtMsg
.92e0		c8		iny				iny
.92e1		b1 30		lda ($30),y			lda 	(codePtr),y
.92e3		f0 17		beq $92fc			beq 	_EHCREnd
.92e5						_EHAtMsg:
.92e5		a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.92e7		a9 04		lda #$04			lda 	#_AtMsg & $FF
.92e9		20 0e 93	jsr $930e			jsr 	PrintStringXA
.92ec		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.92ee		b1 30		lda ($30),y			lda 	(codePtr),y
.92f0		48		pha				pha
.92f1		c8		iny				iny
.92f2		b1 30		lda ($30),y			lda 	(codePtr),y
.92f4		aa		tax				tax
.92f5		68		pla				pla
.92f6		20 24 97	jsr $9724			jsr 	ConvertInt16 				; convert XA to string
.92f9		20 0e 93	jsr $930e			jsr 	PrintStringXA 				; and print it.
.92fc						_EHCREnd:
.92fc		a9 0d		lda #$0d			lda 	#13 						; new line
.92fe		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9301						_EHEnd:
.9301		4c 84 84	jmp $8484			jmp 	WarmStart
>9304		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>930c		20 00
.930e						PrintStringXA:
.930e		5a		phy				phy
.930f		86 37		stx $37				stx 	zTemp0+1
.9311		85 36		sta $36				sta 	zTemp0
.9313		a0 00		ldy #$00			ldy 	#0
.9315						_PSXALoop:
.9315		b1 36		lda ($36),y			lda 	(zTemp0),y
.9317		f0 06		beq $931f			beq 	_PSXAExit
.9319		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.931c		c8		iny				iny
.931d		80 f6		bra $9315			bra 	_PSXALoop
.931f						_PSXAExit:
.931f		7a		ply				ply
.9320		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9321						UnaryTrue:
.9321		fa		plx				plx
.9322						ReturnTrue:
.9322		a9 01		lda #$01			lda 	#1  						; set to 1
.9324		20 02 a2	jsr $a202			jsr 	NSMSetByte
.9327		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9329		95 50		sta $50,x			sta 	NSStatus,x
.932b		60		rts				rts
.932c						UnaryFalse:
.932c		fa		plx				plx
.932d						ReturnFalse:
.932d		4c 00 a2	jmp $a200			jmp 	NSMSetZero 					; set it all to zero
.9330						BinaryCompareEqual:
.9330		fa		plx				plx
.9331		20 6c 93	jsr $936c			jsr 	CompareBaseCode
.9334		c9 00		cmp #$00			cmp 	#0
.9336		f0 ea		beq $9322			beq 	ReturnTrue
.9338		80 f3		bra $932d			bra 	ReturnFalse
.933a						BinaryCompareLess:
.933a		fa		plx				plx
.933b		20 6c 93	jsr $936c			jsr 	CompareBaseCode
.933e		c9 ff		cmp #$ff			cmp 	#$FF
.9340		f0 e0		beq $9322			beq 	ReturnTrue
.9342		80 e9		bra $932d			bra 	ReturnFalse
.9344						BinaryCompareGreater:
.9344		fa		plx				plx
.9345		20 6c 93	jsr $936c			jsr 	CompareBaseCode
.9348		c9 01		cmp #$01			cmp 	#1
.934a		f0 d6		beq $9322			beq 	ReturnTrue
.934c		80 df		bra $932d			bra 	ReturnFalse
.934e						BinaryCompareNotEqual:
.934e		fa		plx				plx
.934f		20 6c 93	jsr $936c			jsr 	CompareBaseCode
.9352		c9 00		cmp #$00			cmp 	#0
.9354		d0 cc		bne $9322			bne 	ReturnTrue
.9356		80 d5		bra $932d			bra 	ReturnFalse
.9358						BinaryCompareLessEqual:
.9358		fa		plx				plx
.9359		20 6c 93	jsr $936c			jsr 	CompareBaseCode
.935c		c9 01		cmp #$01			cmp 	#1
.935e		d0 c2		bne $9322			bne 	ReturnTrue
.9360		80 cb		bra $932d			bra 	ReturnFalse
.9362						BinaryCompareGreaterEqual:
.9362		fa		plx				plx
.9363		20 6c 93	jsr $936c			jsr 	CompareBaseCode
.9366		c9 ff		cmp #$ff			cmp 	#$FF
.9368		d0 b8		bne $9322			bne 	ReturnTrue
.936a		80 c1		bra $932d			bra 	ReturnFalse
.936c						CompareBaseCode:
.936c		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; make both values if references.
.936f		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9371		15 51		ora $51,x			ora 	NSStatus+1,x
.9373		29 10		and #$10			and 	#NSTString
.9375		d0 37		bne $93ae			bne 	_CBCString 					; if so do string code, which will check if both.
.9377		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9379		15 79		ora $79,x			ora 	NSExponent+1,x
.937b		d0 34		bne $93b1			bne 	_CBCFloat
.937d		b5 50		lda $50,x			lda 	NSStatus,x
.937f		15 51		ora $51,x			ora 	NSStatus+1,x
.9381		29 08		and #$08			and 	#NSTFloat
.9383		d0 2c		bne $93b1			bne 	_CBCFloat
.9385		20 b4 93	jsr $93b4			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9388		e8		inx				inx
.9389		20 b4 93	jsr $93b4			jsr 	CompareFixMinusZero
.938c		ca		dex				dex
.938d		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.938f		55 51		eor $51,x			eor 	NSStatus+1,x
.9391		10 0a		bpl $939d			bpl 	_CDCSameSign
.9393		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9395		30 14		bmi $93ab			bmi 	_CBCLess 					; return $FF
.9397						_CBCGreater:
.9397		a9 01		lda #$01			lda 	#1
.9399		60		rts				rts
.939a						_CBCEqual:
.939a		a9 00		lda #$00			lda 	#0
.939c		60		rts				rts
.939d						_CDCSameSign:
.939d		20 c9 95	jsr $95c9			jsr 	SubTopTwoStack 				; unsigned subtract
.93a0		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; or the mantissa together
.93a3		f0 f5		beq $939a			beq 	_CBCEqual 					; -0 == 0
.93a5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.93a7		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.93a9		10 ec		bpl $9397			bpl 	_CBCGreater
.93ab						_CBCLess:
.93ab		a9 ff		lda #$ff			lda 	#$FF
.93ad		60		rts				rts
.93ae						_CBCString:
.93ae		4c 3a 95	jmp $953a			jmp 	CompareStrings
.93b1						_CBCFloat:
.93b1		4c 84 98	jmp $9884			jmp 	CompareFloat
.93b4						CompareFixMinusZero:
.93b4		20 22 a2	jsr $a222			jsr 	NSMIsZero
.93b7		d0 02		bne $93bb			bne 	_CFXMZNotZero
.93b9		74 50		stz $50,x			stz 	NSStatus,x
.93bb						_CFXMZNotZero:
.93bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.93bc						StringConcat:
.93bc		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.93be		35 51		and $51,x			and 	NSStatus+1,x
.93c0		29 18		and #$18			and 	#NSBTypeMask
.93c2		c9 10		cmp #$10			cmp 	#NSTString
.93c4		d0 50		bne $9416			bne		_SCType
.93c6		64 38		stz $38				stz 	zTemp1 						; counting total length
.93c8		e8		inx				inx
.93c9		20 e7 93	jsr $93e7			jsr 	_SCSetupZ0 					; setup for second
.93cc		20 f0 93	jsr $93f0			jsr 	_SCLengthZ0 				; length for second
.93cf		ca		dex				dex
.93d0		20 e7 93	jsr $93e7			jsr 	_SCSetupZ0 					; setup for first
.93d3		20 f0 93	jsr $93f0			jsr 	_SCLengthZ0 				; length for first
.93d6		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.93d8		20 cf b3	jsr $b3cf			jsr 	StringTempAllocate
.93db		20 07 94	jsr $9407			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.93de		e8		inx				inx
.93df		20 e7 93	jsr $93e7			jsr 	_SCSetupZ0 					; copy second out
.93e2		20 07 94	jsr $9407			jsr 	_SCCopy
.93e5		ca		dex				dex
.93e6		60		rts				rts
.93e7						_SCSetupZ0:
.93e7		b5 58		lda $58,x			lda 	NSMantissa0,x
.93e9		85 36		sta $36				sta 	zTemp0
.93eb		b5 60		lda $60,x			lda 	NSMantissa1,x
.93ed		85 37		sta $37				sta 	zTemp0+1
.93ef		60		rts				rts
.93f0						_SCLengthZ0:
.93f0		5a		phy				phy
.93f1		a0 00		ldy #$00			ldy 	#0
.93f3						_SCLenLoop:
.93f3		b1 36		lda ($36),y			lda 	(zTemp0),y
.93f5		f0 0e		beq $9405			beq 	_SCLExit
.93f7		c8		iny				iny
.93f8		e6 38		inc $38				inc 	zTemp1
.93fa		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.93fc		c9 fd		cmp #$fd			cmp 	#253
.93fe		d0 f3		bne $93f3			bne		_SCLenLoop
.9400		a9 09		lda #$09		lda	#9
.9402		4c b5 92	jmp $92b5		jmp	ErrorHandler
.9405						_SCLExit:
.9405		7a		ply				ply
.9406		60		rts				rts
.9407						_SCCopy:
.9407		5a		phy				phy
.9408		a0 00		ldy #$00			ldy 	#0
.940a						_SCCopyLoop:
.940a		b1 36		lda ($36),y			lda 	(zTemp0),y
.940c		f0 06		beq $9414			beq 	_SCCExit
.940e		20 08 b4	jsr $b408			jsr 	StringTempWrite
.9411		c8		iny				iny
.9412		80 f6		bra $940a			bra 	_SCCopyLoop
.9414						_SCCExit:
.9414		7a		ply				ply
.9415		60		rts				rts
.9416						_SCType:
.9416		4c 88 a3	jmp $a388			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9419						IntegerDivide:
.9419		fa		plx				plx
.941a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.941c		15 51		ora $51,x			ora 	NSStatus+1,x
.941e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.941f		0a		asl a				asl 	a
.9420		10 05		bpl $9427			bpl 	_NotRef
.9422		48		pha				pha
.9423		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9426		68		pla				pla
.9427						_NotRef:
.9427		0a		asl a				asl 	a
.9428		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.942a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.942c		15 79		ora $79,x			ora 	NSExponent+1,x
.942e		f0 03		beq $9433			beq 	_IntegerCode 				; if clear, then we have two integers
.9430		4c 88 a3	jmp $a388			jmp 	TypeError 					; anything else, type mismatch.
.9433						_IntegerCode:
.9433		20 4d 94	jsr $944d			jsr 	CheckDivideZero 			; do div zero check
.9436		20 7f 94	jsr $947f			jsr 	Int32Divide 				; do the division
.9439		20 30 95	jsr $9530			jsr 	CalculateSign 				; calculate result sign
.943c						NSMCopyPlusTwoToZero:
.943c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.943e		95 58		sta $58,x			sta 	NSMantissa0,x
.9440		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9442		95 60		sta $60,x			sta 	NSMantissa1,x
.9444		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9446		95 68		sta $68,x			sta 	NSMantissa2,x
.9448		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.944a		95 70		sta $70,x			sta 	NSMantissa3,x
.944c		60		rts				rts
.944d						CheckDivideZero:
.944d		e8		inx				inx
.944e		20 22 a2	jsr $a222			jsr 	NSMIsZero
.9451		f0 02		beq $9455			beq 	_CDVError
.9453		ca		dex				dex
.9454		60		rts				rts
.9455						_CDVError:
.9455		a9 03		lda #$03		lda	#3
.9457		4c b5 92	jmp $92b5		jmp	ErrorHandler
.945a						IntegerModulus:
.945a		fa		plx				plx
.945b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.945d		15 51		ora $51,x			ora 	NSStatus+1,x
.945f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9460		0a		asl a				asl 	a
.9461		10 05		bpl $9468			bpl 	_NotRef
.9463		48		pha				pha
.9464		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9467		68		pla				pla
.9468						_NotRef:
.9468		0a		asl a				asl 	a
.9469		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.946b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.946d		15 79		ora $79,x			ora 	NSExponent+1,x
.946f		f0 03		beq $9474			beq 	_IntegerCode 				; if clear, then we have two integers
.9471		4c 88 a3	jmp $a388			jmp 	TypeError 					; anything else, type mismatch.
.9474						_IntegerCode:
.9474						IntegerModulusNoCheck:
.9474		20 4d 94	jsr $944d			jsr 	CheckDivideZero 			; do div zero check
.9477		20 7f 94	jsr $947f			jsr 	Int32Divide 				; do the division
.947a		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.947c		56 50		lsr $50,x			lsr 	NSStatus,x
.947e		60		rts				rts
.947f						Int32Divide:
.947f		48		pha				pha 								; save AXY
.9480		5a		phy				phy
.9481		20 e3 a1	jsr $a1e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9484		20 fc a1	jsr $a1fc			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9487		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9489						_I32DivideLoop:
.9489		e8		inx				inx
.948a		e8		inx				inx
.948b		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.948e		ca		dex				dex
.948f		ca		dex				dex
.9490		20 10 a2	jsr $a210			jsr 	NSMRotateLeft
.9493		20 be 94	jsr $94be			jsr 	DivideCheckSubtract 		; check if subtract possible
.9496		90 02		bcc $949a			bcc 	_I32DivideNoCarryIn
.9498		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.949a						_I32DivideNoCarryIn:
.949a		88		dey				dey 								; loop round till division completed.
.949b		d0 ec		bne $9489			bne 	_I32DivideLoop
.949d		7a		ply				ply 								; restore AXY and exit
.949e		68		pla				pla
.949f		60		rts				rts
.94a0						Int32ShiftDivide:
.94a0		48		pha				pha 								; save AY
.94a1		5a		phy				phy
.94a2		e8		inx				inx 								; clear S[X+2]
.94a3		e8		inx				inx
.94a4		20 00 a2	jsr $a200			jsr 	NSMSetZero
.94a7		ca		dex				dex
.94a8		ca		dex				dex
.94a9		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.94ab						_I32SDLoop:
.94ab		20 be 94	jsr $94be			jsr 	DivideCheckSubtract 		; check if subtract possible
.94ae		e8		inx				inx
.94af		e8		inx				inx
.94b0		20 10 a2	jsr $a210			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.94b3		ca		dex				dex
.94b4		ca		dex				dex
.94b5		20 10 a2	jsr $a210			jsr 	NSMRotateLeft
.94b8		88		dey				dey 	 							; do 31 times
.94b9		d0 f0		bne $94ab			bne 	_I32SDLoop
.94bb		7a		ply				ply 								; restore AY and exit
.94bc		68		pla				pla
.94bd		60		rts				rts
.94be						DivideCheckSubtract:
.94be		20 c9 95	jsr $95c9			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.94c1		b0 04		bcs $94c7			bcs 	_DCSExit 					; if carry set, then could do, exit
.94c3		20 af 95	jsr $95af			jsr 	AddTopTwoStack 				; add it back in
.94c6		18		clc				clc 								; and return False
.94c7						_DCSExit:
.94c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.94c8						MulInteger:
.94c8		fa		plx				plx
.94c9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94cb		15 51		ora $51,x			ora 	NSStatus+1,x
.94cd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94ce		0a		asl a				asl 	a
.94cf		10 05		bpl $94d6			bpl 	_NotRef
.94d1		48		pha				pha
.94d2		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94d5		68		pla				pla
.94d6						_NotRef:
.94d6		0a		asl a				asl 	a 							; put MSB of type into A:7
.94d7		30 09		bmi $94e2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94d9		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94db		15 79		ora $79,x			ora 	NSExponent+1,x
.94dd		f0 06		beq $94e5			beq 	_IntegerCode 				; if clear, then we have two integers
.94df		4c 46 99	jmp $9946			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.94e2						_StringData:
.94e2		4c 92 a3	jmp $a392			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94e5						_IntegerCode:
.94e5		20 f2 94	jsr $94f2			jsr 	MultiplyShort
.94e8		c9 00		cmp #$00			cmp 	#0
.94ea		f0 05		beq $94f1			beq 	_MIExit
.94ec		a9 04		lda #$04		lda	#4
.94ee		4c b5 92	jmp $92b5		jmp	ErrorHandler
.94f1						_MIExit:
.94f1		60		rts				rts
.94f2						MultiplyShort:
.94f2		5a		phy				phy 								; save Y
.94f3		20 e3 a1	jsr $a1e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.94f6		20 fc a1	jsr $a1fc			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.94f9		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.94fb						_I32MLoop:
.94fb		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.94fd		15 62		ora $62,x			ora 	NSMantissa1+2,x
.94ff		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9501		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9503		f0 25		beq $952a			beq 	_I32MExit 					; exit if zero
.9505		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9507		29 01		and #$01			and 	#1
.9509		f0 0d		beq $9518			beq 	_I32MNoAdd
.950b		20 af 95	jsr $95af			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.950e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9510		10 06		bpl $9518			bpl 	_I32MNoAdd
.9512						_I32ShiftRight:
.9512		20 19 a2	jsr $a219			jsr 	NSMShiftRight 				; shift S[X] right
.9515		c8		iny				iny 								; increment shift count
.9516		80 09		bra $9521			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9518						_I32MNoAdd:
.9518		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.951a		70 f6		bvs $9512			bvs 	_I32ShiftRight 				; instead.
.951c		e8		inx				inx
.951d		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9520		ca		dex				dex
.9521						_I32MShiftUpper:
.9521		e8		inx				inx 								; shift S[X+2] right
.9522		e8		inx				inx
.9523		20 19 a2	jsr $a219			jsr 	NSMShiftRight
.9526		ca		dex				dex
.9527		ca		dex				dex
.9528		80 d1		bra $94fb			bra 	_I32MLoop 					; try again.
.952a						_I32MExit:
.952a		20 30 95	jsr $9530			jsr 	CalculateSign
.952d		98		tya				tya 								; shift in A
.952e		7a		ply				ply 								; restore Y and exit
.952f		60		rts				rts
.9530						CalculateSign:
.9530		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9532		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9534		55 51		eor $51,x			eor 	NSStatus+1,x
.9536		0a		asl a				asl 	a 							; shift bit 7 into carry
.9537		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9539		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.953a						CompareStrings:
.953a		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.953c		35 51		and $51,x			and 	NSStatus+1,x
.953e		29 10		and #$10			and 	#NSBIsString
.9540		f0 28		beq $956a			beq 	_CSTypeError
.9542		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9544		85 36		sta $36				sta 	zTemp0
.9546		b5 60		lda $60,x			lda 	NSMantissa1,x
.9548		85 37		sta $37				sta 	zTemp0+1
.954a		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.954c		85 38		sta $38				sta 	zTemp1
.954e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9550		85 39		sta $39				sta 	zTemp1+1
.9552		5a		phy				phy 								; save Y so we can access strings
.9553		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9555						_CSLoop:
.9555		c8		iny				iny
.9556		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9558		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.955a		d0 06		bne $9562			bne 	_CSDifferent
.955c		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.955e		d0 f5		bne $9555			bne 	_CSLoop 					; still comparing
.9560						_CSExit:
.9560		7a		ply				ply 								; reached end, return zero in A from EOS
.9561		60		rts				rts
.9562						_CSDifferent:
.9562		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9564		90 fa		bcc $9560			bcc		_CSExit
.9566		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9568		80 f6		bra $9560			bra 	_CSExit
.956a						_CSTypeError:
.956a		4c 88 a3	jmp $a388			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.956d						ShiftLeft:
.956d		38		sec				sec 								; common code, carry determines which way.
.956e		80 01		bra $9571			bra 	ShiftMain
.9570						ShiftRight:
.9570		18		clc				clc
.9571						ShiftMain:
.9571		fa		plx				plx 								; restore X
.9572		08		php				php 								; save direction
.9573		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9575		15 51		ora $51,x			ora 	NSStatus+1,x
.9577		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9578		0a		asl a				asl 	a
.9579		10 05		bpl $9580			bpl 	_NotRef
.957b		48		pha				pha
.957c		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.957f		68		pla				pla
.9580						_NotRef:
.9580		0a		asl a				asl 	a
.9581		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9583		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9585		15 79		ora $79,x			ora 	NSExponent+1,x
.9587		f0 03		beq $958c			beq 	_IntegerCode 				; if clear, then we have two integers
.9589		4c 88 a3	jmp $a388			jmp 	TypeError 					; anything else, type mismatch.
.958c						_IntegerCode:
.958c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.958e		29 e0		and #$e0			and 	#$E0
.9590		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9592		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9594		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9596		d0 12		bne $95aa			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9598						_SMLoop:
.9598		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.959a		30 11		bmi $95ad			bmi 	_SMExit 					; exit if done.
.959c		28		plp				plp 								; restore direction setting
.959d		08		php				php
.959e		90 05		bcc $95a5			bcc 	_SMRight
.95a0		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; shift left if CS
.95a3		80 f3		bra $9598			bra 	_SMLoop
.95a5						_SMRight:
.95a5		20 19 a2	jsr $a219			jsr 	NSMShiftRight 				; shift right if CC
.95a8		80 ee		bra $9598			bra 	_SMLoop
.95aa						_SMExit0:
.95aa		20 00 a2	jsr $a200			jsr 	NSMSetZero 					; return zero.
.95ad						_SMExit:
.95ad		28		plp				plp 								; throw direction
.95ae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.95af						AddTopTwoStack:
.95af		18		clc				clc
.95b0		b5 58		lda $58,x			lda		NSMantissa0,x
.95b2		75 59		adc $59,x			adc 		NSMantissa0+1,x
.95b4		95 58		sta $58,x			sta 	NSMantissa0,x
.95b6		b5 60		lda $60,x			lda		NSMantissa1,x
.95b8		75 61		adc $61,x			adc 		NSMantissa1+1,x
.95ba		95 60		sta $60,x			sta 	NSMantissa1,x
.95bc		b5 68		lda $68,x			lda		NSMantissa2,x
.95be		75 69		adc $69,x			adc 		NSMantissa2+1,x
.95c0		95 68		sta $68,x			sta 	NSMantissa2,x
.95c2		b5 70		lda $70,x			lda		NSMantissa3,x
.95c4		75 71		adc $71,x			adc 		NSMantissa3+1,x
.95c6		95 70		sta $70,x			sta 	NSMantissa3,x
.95c8		60		rts				rts
.95c9						SubTopTwoStack:
.95c9		38		sec				sec
.95ca		b5 58		lda $58,x			lda		NSMantissa0,x
.95cc		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.95ce		95 58		sta $58,x			sta 	NSMantissa0,x
.95d0		b5 60		lda $60,x			lda		NSMantissa1,x
.95d2		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.95d4		95 60		sta $60,x			sta 	NSMantissa1,x
.95d6		b5 68		lda $68,x			lda		NSMantissa2,x
.95d8		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.95da		95 68		sta $68,x			sta 	NSMantissa2,x
.95dc		b5 70		lda $70,x			lda		NSMantissa3,x
.95de		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.95e0		95 70		sta $70,x			sta 	NSMantissa3,x
.95e2		60		rts				rts
.95e3						AddInteger:
.95e3		fa		plx				plx
.95e4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95e6		15 51		ora $51,x			ora 	NSStatus+1,x
.95e8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95e9		0a		asl a				asl 	a
.95ea		10 05		bpl $95f1			bpl 	_NotRef
.95ec		48		pha				pha
.95ed		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95f0		68		pla				pla
.95f1						_NotRef:
.95f1		0a		asl a				asl 	a 							; put MSB of type into A:7
.95f2		30 09		bmi $95fd			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95f4		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95f6		15 79		ora $79,x			ora 	NSExponent+1,x
.95f8		f0 06		beq $9600			beq 	_IntegerCode 				; if clear, then we have two integers
.95fa		4c f6 97	jmp $97f6			jmp 	FloatingPointAdd 							; otherwise at least one float.
.95fd						_StringData:
.95fd		4c bc 93	jmp $93bc			jmp 	StringConcat							; at least one string - don't know both are strings.
.9600						_IntegerCode:
.9600						AddCode:
.9600		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9602		55 51		eor $51,x			eor 	NSStatus+1,x
.9604		10 a9		bpl $95af			bpl 	AddTopTwoStack
.9606		20 c9 95	jsr $95c9			jsr 	SubTopTwoStack 				; do a physical subtraction
.9609		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.960b		10 07		bpl $9614			bpl 	_AddExit
.960d		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.960f		95 50		sta $50,x			sta 	NSStatus,x
.9611		20 c9 a1	jsr $a1c9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9614						_AddExit:
.9614		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; check for -0
.9617		d0 02		bne $961b			bne 	_AddNonZero
.9619		74 50		stz $50,x			stz 	NSStatus,x
.961b						_AddNonZero:
.961b		60		rts				rts
.961c						SubInteger:
.961c		fa		plx				plx
.961d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.961f		15 51		ora $51,x			ora 	NSStatus+1,x
.9621		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9622		0a		asl a				asl 	a
.9623		10 05		bpl $962a			bpl 	_NotRef
.9625		48		pha				pha
.9626		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9629		68		pla				pla
.962a						_NotRef:
.962a		0a		asl a				asl 	a 							; put MSB of type into A:7
.962b		30 09		bmi $9636			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.962d		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.962f		15 79		ora $79,x			ora 	NSExponent+1,x
.9631		f0 06		beq $9639			beq 	_IntegerCode 				; if clear, then we have two integers
.9633		4c fb 97	jmp $97fb			jmp 	FloatingPointSub 							; otherwise at least one float.
.9636						_StringData:
.9636		4c 92 a3	jmp $a392			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9639						_IntegerCode:
.9639		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.963b		49 80		eor #$80			eor 	#$80
.963d		95 51		sta $51,x			sta 	NSStatus+1,x
.963f		80 bf		bra $9600			bra 	AddCode 					; and do the same code as add.
.9641						AndInteger:
.9641		fa		plx				plx
.9642		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9644		15 51		ora $51,x			ora 	NSStatus+1,x
.9646		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9647		0a		asl a				asl 	a
.9648		10 05		bpl $964f			bpl 	_NotRef
.964a		48		pha				pha
.964b		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.964e		68		pla				pla
.964f						_NotRef:
.964f		0a		asl a				asl 	a
.9650		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9652		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9654		15 79		ora $79,x			ora 	NSExponent+1,x
.9656		f0 03		beq $965b			beq 	_IntegerCode 				; if clear, then we have two integers
.9658		4c 88 a3	jmp $a388			jmp 	TypeError 					; anything else, type mismatch.
.965b						_IntegerCode:
.965b		b5 58		lda $58,x			lda		NSMantissa0,x
.965d		35 59		and $59,x			and 		NSMantissa0+1,x
.965f		95 58		sta $58,x			sta 	NSMantissa0,x
.9661		b5 60		lda $60,x			lda		NSMantissa1,x
.9663		35 61		and $61,x			and 		NSMantissa1+1,x
.9665		95 60		sta $60,x			sta 	NSMantissa1,x
.9667		b5 68		lda $68,x			lda		NSMantissa2,x
.9669		35 69		and $69,x			and 		NSMantissa2+1,x
.966b		95 68		sta $68,x			sta 	NSMantissa2,x
.966d		b5 70		lda $70,x			lda		NSMantissa3,x
.966f		35 71		and $71,x			and 		NSMantissa3+1,x
.9671		95 70		sta $70,x			sta 	NSMantissa3,x
.9673		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9675		60		rts				rts
.9676						OraInteger:
.9676		fa		plx				plx
.9677		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9679		15 51		ora $51,x			ora 	NSStatus+1,x
.967b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.967c		0a		asl a				asl 	a
.967d		10 05		bpl $9684			bpl 	_NotRef
.967f		48		pha				pha
.9680		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9683		68		pla				pla
.9684						_NotRef:
.9684		0a		asl a				asl 	a
.9685		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9687		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9689		15 79		ora $79,x			ora 	NSExponent+1,x
.968b		f0 03		beq $9690			beq 	_IntegerCode 				; if clear, then we have two integers
.968d		4c 88 a3	jmp $a388			jmp 	TypeError 					; anything else, type mismatch.
.9690						_IntegerCode:
.9690		b5 58		lda $58,x			lda		NSMantissa0,x
.9692		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9694		95 58		sta $58,x			sta 	NSMantissa0,x
.9696		b5 60		lda $60,x			lda		NSMantissa1,x
.9698		15 61		ora $61,x			ora 		NSMantissa1+1,x
.969a		95 60		sta $60,x			sta 	NSMantissa1,x
.969c		b5 68		lda $68,x			lda		NSMantissa2,x
.969e		15 69		ora $69,x			ora 		NSMantissa2+1,x
.96a0		95 68		sta $68,x			sta 	NSMantissa2,x
.96a2		b5 70		lda $70,x			lda		NSMantissa3,x
.96a4		15 71		ora $71,x			ora 		NSMantissa3+1,x
.96a6		95 70		sta $70,x			sta 	NSMantissa3,x
.96a8		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.96aa		60		rts				rts
.96ab						EorInteger:
.96ab		fa		plx				plx
.96ac		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96ae		15 51		ora $51,x			ora 	NSStatus+1,x
.96b0		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96b1		0a		asl a				asl 	a
.96b2		10 05		bpl $96b9			bpl 	_NotRef
.96b4		48		pha				pha
.96b5		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96b8		68		pla				pla
.96b9						_NotRef:
.96b9		0a		asl a				asl 	a
.96ba		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96bc		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96be		15 79		ora $79,x			ora 	NSExponent+1,x
.96c0		f0 03		beq $96c5			beq 	_IntegerCode 				; if clear, then we have two integers
.96c2		4c 88 a3	jmp $a388			jmp 	TypeError 					; anything else, type mismatch.
.96c5						_IntegerCode:
.96c5		b5 58		lda $58,x			lda		NSMantissa0,x
.96c7		55 59		eor $59,x			eor 		NSMantissa0+1,x
.96c9		95 58		sta $58,x			sta 	NSMantissa0,x
.96cb		b5 60		lda $60,x			lda		NSMantissa1,x
.96cd		55 61		eor $61,x			eor 		NSMantissa1+1,x
.96cf		95 60		sta $60,x			sta 	NSMantissa1,x
.96d1		b5 68		lda $68,x			lda		NSMantissa2,x
.96d3		55 69		eor $69,x			eor 		NSMantissa2+1,x
.96d5		95 68		sta $68,x			sta 	NSMantissa2,x
.96d7		b5 70		lda $70,x			lda		NSMantissa3,x
.96d9		55 71		eor $71,x			eor 		NSMantissa3+1,x
.96db		95 70		sta $70,x			sta 	NSMantissa3,x
.96dd		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.96df		60		rts				rts
.96e0						WordIndirect:
.96e0		fa		plx				plx
.96e1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96e3		15 51		ora $51,x			ora 	NSStatus+1,x
.96e5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96e6		0a		asl a				asl 	a
.96e7		10 05		bpl $96ee			bpl 	_NotRef
.96e9		48		pha				pha
.96ea		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96ed		68		pla				pla
.96ee						_NotRef:
.96ee		0a		asl a				asl 	a
.96ef		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96f1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96f3		15 79		ora $79,x			ora 	NSExponent+1,x
.96f5		f0 03		beq $96fa			beq 	_IntegerCode 				; if clear, then we have two integers
.96f7		4c 88 a3	jmp $a388			jmp 	TypeError 					; anything else, type mismatch.
.96fa						_IntegerCode:
.96fa		20 00 96	jsr $9600			jsr 	AddCode 					; add the two values
.96fd		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.96ff		95 50		sta $50,x			sta 	NSStatus,x
.9701		60		rts				rts
.9702						ByteIndirect:
.9702		fa		plx				plx
.9703		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9705		15 51		ora $51,x			ora 	NSStatus+1,x
.9707		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9708		0a		asl a				asl 	a
.9709		10 05		bpl $9710			bpl 	_NotRef
.970b		48		pha				pha
.970c		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.970f		68		pla				pla
.9710						_NotRef:
.9710		0a		asl a				asl 	a
.9711		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9713		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9715		15 79		ora $79,x			ora 	NSExponent+1,x
.9717		f0 03		beq $971c			beq 	_IntegerCode 				; if clear, then we have two integers
.9719		4c 88 a3	jmp $a388			jmp 	TypeError 					; anything else, type mismatch.
.971c						_IntegerCode:
.971c		20 00 96	jsr $9600			jsr 	AddCode 					; add the two values
.971f		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9721		95 50		sta $50,x			sta 	NSStatus,x
.9723		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9724						ConvertInt16:
.9724		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9726		86 60		stx $60				stx 	NSMantissa1
.9728		64 68		stz $68				stz 	NSMantissa2
.972a		64 70		stz $70				stz 	NSMantissa3
.972c		64 50		stz $50				stz 	NSStatus 					; positive integer
.972e		a2 00		ldx #$00			ldx 	#0 							; stack level
.9730		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9732		80 00		bra $9734			bra 	ConvertInt32
.9734						ConvertInt32:
.9734		5a		phy				phy
.9735		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9737		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9739		10 08		bpl $9743			bpl 	_CI32NotNeg
.973b		48		pha				pha
.973c		a9 2d		lda #$2d			lda 	#'-'
.973e		99 a7 04	sta $04a7,y			sta 	numberBuffer,y
.9741		c8		iny				iny
.9742		68		pla				pla
.9743						_CI32NotNeg:
.9743		20 51 97	jsr $9751			jsr 	_CI32DivideConvert 			; recursive conversion
.9746		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9748		99 a7 04	sta $04a7,y			sta 	numberBuffer,y
.974b		7a		ply				ply
.974c		a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.974e		a9 a7		lda #$a7			lda 	#numberBuffer & $FF
.9750		60		rts				rts
.9751						_CI32DivideConvert:
.9751		e8		inx				inx 								; write to next slot up
.9752		20 02 a2	jsr $a202			jsr 	NSMSetByte 		 			; write the base out.
.9755		ca		dex				dex
.9756		20 7f 94	jsr $947f			jsr 	Int32Divide 				; divide
.9759		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.975b		48		pha				pha
.975c		20 3c 94	jsr $943c			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.975f		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; is it zero ?
.9762		f0 05		beq $9769			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9764		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9766		20 51 97	jsr $9751			jsr 	_CI32DivideConvert 			; and recusrively call.
.9769						_CI32NoRecurse:
.9769		68		pla				pla 								; remainder
.976a		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.976c		90 02		bcc $9770			bcc 	_CI32NotHex
.976e		69 26		adc #$26			adc 	#6+32
.9770						_CI32NotHex:
.9770		69 30		adc #$30			adc 	#48
.9772		99 a7 04	sta $04a7,y			sta 	numberBuffer,y 				; write out and exit
.9775		c8		iny				iny
.9776		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9777						PrecedenceLevel:
>9777		04					.byte	 4	; $00 <<
>9778		02					.byte	 2	; $01 <=
>9779		02					.byte	 2	; $02 <>
>977a		00					.byte	 0	; $03 !!3
>977b		00					.byte	 0	; $04 ><
>977c		02					.byte	 2	; $05 >=
>977d		04					.byte	 4	; $06 >>
>977e		00					.byte	 0	; $07 !!7
>977f		00					.byte	 0	; $08 !!8
>9780		00					.byte	 0	; $09 !!9
>9781		00					.byte	 0	; $0a !!10
>9782		00					.byte	 0	; $0b !!11
>9783		00					.byte	 0	; $0c !!12
>9784		00					.byte	 0	; $0d !!13
>9785		00					.byte	 0	; $0e !!14
>9786		00					.byte	 0	; $0f !!15
>9787		00					.byte	 0	; $10 @
>9788		00					.byte	 0	; $11 !!17
>9789		00					.byte	 0	; $12 !!18
>978a		00					.byte	 0	; $13 [
>978b		04					.byte	 4	; $14 \
>978c		00					.byte	 0	; $15 ]
>978d		01					.byte	 1	; $16 ^
>978e		00					.byte	 0	; $17 _
>978f		00					.byte	 0	; $18 `
>9790		00					.byte	 0	; $19 !!25
>9791		00					.byte	 0	; $1a !!26
>9792		00					.byte	 0	; $1b {
>9793		01					.byte	 1	; $1c |
>9794		00					.byte	 0	; $1d }
>9795		00					.byte	 0	; $1e ~
>9796		00					.byte	 0	; $1f [7m<7F>[m
>9797		00					.byte	 0	; $20
>9798		05					.byte	 5	; $21 !
>9799		00					.byte	 0	; $22 "
>979a		00					.byte	 0	; $23 #
>979b		05					.byte	 5	; $24 $
>979c		04					.byte	 4	; $25 %
>979d		01					.byte	 1	; $26 &
>979e		00					.byte	 0	; $27 '
>979f		00					.byte	 0	; $28 (
>97a0		00					.byte	 0	; $29 )
>97a1		04					.byte	 4	; $2a *
>97a2		03					.byte	 3	; $2b +
>97a3		00					.byte	 0	; $2c ,
>97a4		03					.byte	 3	; $2d -
>97a5		00					.byte	 0	; $2e .
>97a6		04					.byte	 4	; $2f /
>97a7		00					.byte	 0	; $30 0
>97a8		00					.byte	 0	; $31 1
>97a9		00					.byte	 0	; $32 2
>97aa		00					.byte	 0	; $33 3
>97ab		00					.byte	 0	; $34 4
>97ac		00					.byte	 0	; $35 5
>97ad		00					.byte	 0	; $36 6
>97ae		00					.byte	 0	; $37 7
>97af		00					.byte	 0	; $38 8
>97b0		00					.byte	 0	; $39 9
>97b1		00					.byte	 0	; $3a :
>97b2		00					.byte	 0	; $3b ;
>97b3		02					.byte	 2	; $3c <
>97b4		02					.byte	 2	; $3d =
>97b5		02					.byte	 2	; $3e >
>97b6		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.97b7						EvaluateExpressionAt0:
.97b7		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.97b9						EvaluateExpression:
.97b9		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.97bb						EvaluateExpressionAtPrecedence:
.97bb		48		pha				pha 								; save precedence level
.97bc		20 03 9c	jsr $9c03			jsr 	EvaluateTerm 				; evaluate term into level X.
.97bf		68		pla				pla 								; restore precedence level.
.97c0						_EXPRLoop:
.97c0		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.97c2		b1 30		lda ($30),y			lda 	(codePtr),y
.97c4		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.97c6		b0 25		bcs $97ed			bcs 	_EXPRExit
.97c8		da		phx				phx 								; read the operator precedence
.97c9		aa		tax				tax
.97ca		bd 77 97	lda $9777,x			lda 	PrecedenceLevel,x
.97cd		fa		plx				plx
.97ce		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.97d0		f0 1b		beq $97ed			beq 	_EXPRExit
.97d2		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.97d4		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.97d6		c5 37		cmp $37				cmp 	zTemp0+1
.97d8		b0 13		bcs $97ed			bcs		_EXPRExit 					; if current >= operator exit
.97da		48		pha				pha 								; save current precedence.
.97db		b1 30		lda ($30),y			lda 	(codePtr),y
.97dd		c8		iny				iny
.97de		48		pha				pha
.97df		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.97e1		e8		inx				inx 								; work out the right hand side.
.97e2		20 bb 97	jsr $97bb			jsr 	EvaluateExpressionAtPrecedence
.97e5		ca		dex				dex
.97e6		68		pla				pla 								; get operator, call the code.
.97e7		20 f0 97	jsr $97f0			jsr 	_EXPRCaller
.97ea		68		pla				pla 								; restore precedence level
.97eb		80 d3		bra $97c0			bra 	_EXPRLoop 					; and go round.
.97ed						_EXPRExit:
.97ed		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.97ef		60		rts				rts
.97f0						_EXPRCaller:
.97f0		da		phx				phx 								; save on stack, first thing is to restore it
.97f1		0a		asl a				asl 	a 							; double so can use vectors into X
.97f2		aa		tax				tax
.97f3		7c 24 8f	jmp ($8f24,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.97f6						FloatingPointAdd:
.97f6		20 6c 99	jsr $996c			jsr 	FloatPrepare 				; prepare for floats
.97f9		80 09		bra $9804			bra 	FloatAdd
.97fb						FloatingPointSub:
.97fb		20 6c 99	jsr $996c			jsr 	FloatPrepare 				; prepare for floats
.97fe						FloatSubtract:
.97fe		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9800		49 80		eor #$80			eor 	#$80
.9802		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9804						FloatAdd:
.9804		48		pha				pha
.9805		5a		phy				phy
.9806		20 7b 99	jsr $997b			jsr 	NSNormalise 				; normalise S[X]
.9809		f0 51		beq $985c			beq 	_FAReturn1
.980b		e8		inx				inx 								; normalise S[X+1]
.980c		20 7b 99	jsr $997b			jsr 	NSNormalise
.980f		ca		dex				dex
.9810		c9 00		cmp #$00			cmp 	#0
.9812		f0 60		beq $9874			beq 	_FAExit 					; if so, just return A
.9814		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9816		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9818		f0 18		beq $9832			beq 	_FAExponentsEqual
.981a		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.981c		a8		tay				tay
.981d		38		sec				sec 								; do a signed comparison of the exponents.
.981e		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9820		50 02		bvc $9824			bvc 	_FANoSignedChange
.9822		49 80		eor #$80			eor 	#$80
.9824						_FANoSignedChange:
.9824		29 80		and #$80			and 	#$80
.9826		10 02		bpl $982a			bpl 	_FAHaveMax
.9828		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.982a						_FAHaveMax:
.982a		20 77 98	jsr $9877			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.982d		e8		inx				inx
.982e		20 77 98	jsr $9877			jsr 	_FAShiftToExponent
.9831		ca		dex				dex
.9832						_FAExponentsEqual:
.9832		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9834		55 51		eor $51,x			eor 	NSStatus+1,x
.9836		30 0e		bmi $9846			bmi 	_FADifferentSigns
.9838		20 af 95	jsr $95af			jsr 	AddTopTwoStack 				; do the add of the mantissae
.983b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.983d		10 35		bpl $9874			bpl 	_FAExit 					; if no, we are done.
.983f		20 19 a2	jsr $a219			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9842		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9844		80 2e		bra $9874			bra 	_FAExit
.9846						_FADifferentSigns:
.9846		20 c9 95	jsr $95c9			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9849		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.984b		10 06		bpl $9853			bpl 	_FACheckZero 				; if no, check for -0
.984d		20 c2 a1	jsr $a1c2			jsr 	NSMNegate 					; netate result
.9850		20 c9 a1	jsr $a1c9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9853						_FACheckZero:
.9853		20 22 a2	jsr $a222			jsr 	NSMIsZero	 				; check for -0
.9856		d0 1c		bne $9874			bne 	_FAExit
.9858		74 50		stz $50,x			stz 	NSStatus,x
.985a		80 18		bra $9874			bra 	_FAExit
.985c						_FAReturn1:
.985c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.985e		95 58		sta $58,x			sta 	NSMantissa0,x
.9860		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9862		95 60		sta $60,x			sta 	NSMantissa1,x
.9864		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9866		95 68		sta $68,x			sta 	NSMantissa2,x
.9868		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.986a		95 70		sta $70,x			sta 	NSMantissa3,x
.986c		b5 79		lda $79,x			lda 	NSExponent+1,x
.986e		95 78		sta $78,x			sta 	NSExponent,x
.9870		b5 51		lda $51,x			lda 	NSStatus+1,x
.9872		95 50		sta $50,x			sta 	NSStatus,x
.9874						_FAExit:
.9874		7a		ply				ply
.9875		68		pla				pla
.9876		60		rts				rts
.9877						_FAShiftToExponent:
.9877						_FAShiftToExponent2:
.9877		98		tya				tya 								; compare Y to exponent
.9878		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.987a		f0 07		beq $9883			beq 	_FASEExit 					; exit if so.
.987c		20 19 a2	jsr $a219			jsr 	NSMShiftRight	 			; shift the mantissa right
.987f		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9881		80 f4		bra $9877			bra 	_FAShiftToExponent2
.9883						_FASEExit:
.9883		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9884						CompareFloat:
.9884		20 fe 97	jsr $97fe			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9887		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9889		29 f8		and #$f8			and 	#$F8
.988b		15 68		ora $68,x			ora 	NSMantissa2,x
.988d		15 70		ora $70,x			ora 	NSMantissa3,x
.988f		f0 08		beq $9899			beq 	_FCExit 					; zero, so approximately identical
.9891		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9893		34 50		bit $50,x			bit 	NSStatus,x
.9895		10 02		bpl $9899			bpl 	_FCExit
.9897						_FCNegative:
.9897		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9899						_FCExit:
.9899		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.989a						FDivideCommand:
.989a		fa		plx				plx	 								; restore stack position
.989b		20 6c 99	jsr $996c			jsr 	FloatPrepare 				; prepare for floats
.989e						FloatDivide:
.989e		48		pha				pha
.989f		e8		inx				inx
.98a0		20 7b 99	jsr $997b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.98a3		ca		dex				dex
.98a4		c9 00		cmp #$00			cmp 	#0
.98a6		f0 1d		beq $98c5			beq 	_FDZero
.98a8		20 7b 99	jsr $997b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.98ab		f0 16		beq $98c3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.98ad		20 a0 94	jsr $94a0			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.98b0		20 3c 94	jsr $943c			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.98b3		20 7b 99	jsr $997b			jsr		NSNormalise 				; renormalise
.98b6		20 30 95	jsr $9530			jsr 	CalculateSign 				; calculate result sign
.98b9		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.98bb		38		sec				sec
.98bc		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.98be		38		sec				sec
.98bf		e9 1e		sbc #$1e			sbc 	#30
.98c1		95 78		sta $78,x			sta 	NSExponent,x
.98c3						_FDExit:
.98c3		68		pla				pla
.98c4		60		rts				rts
.98c5						_FDZero:
.98c5		a9 03		lda #$03		lda	#3
.98c7		4c b5 92	jmp $92b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.98ca						FloatFractionalPart:
.98ca		5a		phy				phy
.98cb		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.98cd		29 7f		and #$7f			and 	#$7F
.98cf		95 50		sta $50,x			sta 	NSStatus,x
.98d1		20 7b 99	jsr $997b			jsr 	NSNormalise
.98d4		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.98d6		38		sec				sec
.98d7		e9 e0		sbc #$e0			sbc 	#$E0
.98d9		90 29		bcc $9904			bcc 	_FFPExit 					; already fractional
.98db		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.98dd		b0 22		bcs $9901			bcs 	_FFPZero
.98df		a8		tay				tay 								; put count to do in Y
.98e0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.98e2		20 06 99	jsr $9906			jsr 	_FFPPartial
.98e5		95 70		sta $70,x			sta 	NSMantissa3,x
.98e7		b5 68		lda $68,x			lda 	NSMantissa2,x
.98e9		20 06 99	jsr $9906			jsr 	_FFPPartial
.98ec		95 68		sta $68,x			sta 	NSMantissa2,x
.98ee		b5 60		lda $60,x			lda 	NSMantissa1,x
.98f0		20 06 99	jsr $9906			jsr 	_FFPPartial
.98f3		95 60		sta $60,x			sta 	NSMantissa1,x
.98f5		b5 58		lda $58,x			lda 	NSMantissa0,x
.98f7		20 06 99	jsr $9906			jsr 	_FFPPartial
.98fa		95 58		sta $58,x			sta 	NSMantissa0,x
.98fc		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; zeroed check.
.98ff		d0 03		bne $9904			bne 	_FFPExit
.9901						_FFPZero:
.9901		20 00 a2	jsr $a200			jsr 	NSMSetZero
.9904						_FFPExit:
.9904		7a		ply				ply
.9905		60		rts				rts
.9906						_FFPPartial:
.9906		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9908		f0 17		beq $9921			beq 	_FFFPPExit
.990a		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.990c		b0 0c		bcs $991a			bcs 	_FFFPPWholeByte
.990e		5a		phy				phy
.990f						_FFFPPLeft:
.990f		0a		asl a				asl 	a
.9910		88		dey				dey
.9911		d0 fc		bne $990f			bne 	_FFFPPLeft
.9913		7a		ply				ply
.9914						_FFFPPRight:
.9914		4a		lsr a				lsr 	a
.9915		88		dey				dey
.9916		d0 fc		bne $9914			bne 	_FFFPPRight
.9918		80 07		bra $9921			bra 	_FFFPPExit
.991a						_FFFPPWholeByte:
.991a		98		tya				tya 								; subtract 8 from count
.991b		38		sec				sec
.991c		e9 08		sbc #$08			sbc 	#8
.991e		a8		tay				tay
.991f		a9 00		lda #$00			lda 	#0 							; and clear all
.9921						_FFFPPExit:
.9921		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9922						FloatIntegerPart:
.9922		48		pha				pha
.9923		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9925		f0 1d		beq $9944			beq 	_FIPExit 					; if so do nothing
.9927		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; is it zero ?
.992a		f0 15		beq $9941			beq 	_FIPZero 					; if so return zero.
.992c		20 7b 99	jsr $997b			jsr 	NSNormalise 				; normalise
.992f		f0 10		beq $9941			beq 	_FIPZero 					; normalised to zero, exit zero
.9931						_FIPShift:
.9931		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9933		10 07		bpl $993c			bpl 	_FIPCheckZero
.9935		20 19 a2	jsr $a219			jsr 	NSMShiftRight 				; shift mantissa right
.9938		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.993a		80 f5		bra $9931			bra 	_FIPShift
.993c						_FIPCheckZero:
.993c		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; avoid -0 problem
.993f		d0 03		bne $9944			bne 	_FIPExit 					; set to zero if mantissa zero.
.9941						_FIPZero:
.9941		20 00 a2	jsr $a200			jsr 	NSMSetZero
.9944						_FIPExit:
.9944		68		pla				pla
.9945		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9946						FloatingPointMultiply:
.9946		20 6c 99	jsr $996c			jsr 	FloatPrepare 				; prepare for floats
.9949						FloatMultiply:
.9949		48		pha				pha
.994a		20 7b 99	jsr $997b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.994d		f0 18		beq $9967			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.994f		e8		inx				inx
.9950		20 7b 99	jsr $997b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9953		ca		dex				dex
.9954		c9 00		cmp #$00			cmp 	#0
.9956		f0 0c		beq $9964			beq 	_FDSetZero
.9958		20 f2 94	jsr $94f2			jsr 	MultiplyShort 				; calculate the result.
.995b		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.995d		18		clc				clc
.995e		75 79		adc $79,x			adc 	NSExponent+1,x
.9960		95 78		sta $78,x			sta 	NSExponent,x
.9962		80 03		bra $9967			bra 	_FDExit
.9964						_FDSetZero:
.9964		20 00 a2	jsr $a200			jsr 	NSMSetZero 					; return 0
.9967						_FDExit:
.9967		20 7b 99	jsr $997b			jsr 	NSNormalise 				; normalise the result
.996a		68		pla				pla
.996b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.996c						FloatPrepare:
.996c		20 77 9a	jsr $9a77			jsr 	DereferenceTopTwo 			; dereference the top two values
.996f		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9971		15 51		ora $51,x			ora 	NSStatus+1,x
.9973		29 10		and #$10			and 	#NSBIsString
.9975		d0 01		bne $9978			bne 	_FDType
.9977		60		rts				rts
.9978						_FDType:
.9978		4c 88 a3	jmp $a388			jmp 	TypeError
.997b						NSNormalise:
.997b		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.997d		29 80		and #$80			and 	#$80
.997f		09 08		ora #$08			ora 	#NSTFloat
.9981		95 50		sta $50,x			sta 	NSStatus,x
.9983		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; if zero exit
.9986		d0 07		bne $998f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9988		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.998a		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.998c		a9 00		lda #$00			lda 	#0 							; set Z flag
.998e		60		rts				rts
.998f						_NSNormaliseOptimise:
.998f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9991		d0 19		bne $99ac			bne 	_NSNormaliseLoop
.9993		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9995		30 15		bmi $99ac			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9997		95 70		sta $70,x			sta 	NSMantissa3,x
.9999		b5 60		lda $60,x			lda 	NSMantissa1,x
.999b		95 68		sta $68,x			sta 	NSMantissa2,x
.999d		b5 58		lda $58,x			lda 	NSMantissa0,x
.999f		95 60		sta $60,x			sta 	NSMantissa1,x
.99a1		74 58		stz $58,x			stz 	NSMantissa0,x
.99a3		b5 78		lda $78,x			lda 	NSExponent,x
.99a5		38		sec				sec
.99a6		e9 08		sbc #$08			sbc 	#8
.99a8		95 78		sta $78,x			sta 	NSExponent,x
.99aa		80 e3		bra $998f			bra 	_NSNormaliseOptimise
.99ac						_NSNormaliseLoop:
.99ac		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.99ae		70 07		bvs $99b7			bvs 	_NSNExit 					; exit if so with Z flag clear
.99b0		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; shift mantissa left
.99b3		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.99b5		80 f5		bra $99ac			bra 	_NSNormaliseLoop
.99b7						_NSNExit:
.99b7		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.99b9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.99ba						AssignNumber:
.99ba		5a		phy				phy
.99bb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.99bd		85 36		sta $36				sta 	zTemp0
.99bf		b5 60		lda $60,x			lda 	NSMantissa1,x
.99c1		85 37		sta $37				sta 	zTemp0+1
.99c3		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.99c5		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.99c7		95 50		sta $50,x			sta 	NSStatus,x
.99c9		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.99cb		c9 08		cmp #$08			cmp 	#NSTFloat
.99cd		f0 24		beq $99f3			beq 	_ANFloat
.99cf		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.99d1		f0 03		beq $99d6			beq		_ANNotFloat
.99d3		4c 83 a3	jmp $a383			jmp 	RangeError					; if it is, report an error.
.99d6						_ANNotFloat:
.99d6		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.99d8		29 03		and #$03			and 	#3
.99da		d0 05		bne $99e1			bne 	_ANByteWord
.99dc		20 fe 99	jsr $99fe			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.99df		80 1b		bra $99fc			bra 	_ANExit
.99e1						_ANByteWord:
.99e1		48		pha				pha 								; save count
.99e2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.99e4		92 36		sta ($36)			sta 	(zTemp0)
.99e6		68		pla				pla
.99e7		c9 01		cmp #$01			cmp	 	#1
.99e9		f0 11		beq $99fc			beq 	_ANExit
.99eb		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.99ed		a0 01		ldy #$01			ldy 	#1
.99ef		91 36		sta ($36),y			sta 	(zTemp0),y
.99f1		80 09		bra $99fc			bra 	_ANExit
.99f3						_ANFloat:
.99f3		20 fe 99	jsr $99fe			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.99f6		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.99f8		a0 04		ldy #$04			ldy 	#4
.99fa		91 36		sta ($36),y			sta 	(zTemp0),y
.99fc						_ANExit:
.99fc		7a		ply				ply
.99fd		60		rts				rts
.99fe						_ANCopy4PackSign:
.99fe		a0 03		ldy #$03			ldy 	#3
.9a00		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9a02		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9a04		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9a06		91 36		sta ($36),y			sta 	(zTemp0),y
.9a08		88		dey				dey
.9a09		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9a0b		91 36		sta ($36),y			sta 	(zTemp0),y
.9a0d		88		dey				dey
.9a0e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a10		91 36		sta ($36),y			sta 	(zTemp0),y
.9a12		88		dey				dey
.9a13		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9a15		91 36		sta ($36),y			sta 	(zTemp0),y
.9a17		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9a18						AssignString:
.9a18		5a		phy				phy
.9a19		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9a1b		85 38		sta $38				sta 	zTemp1
.9a1d		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a1f		85 39		sta $39				sta 	zTemp1+1
.9a21		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a23		85 36		sta $36				sta 	zTemp0
.9a25		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a27		85 37		sta $37				sta 	zTemp0+1
.9a29		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9a2b		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a2d		f0 23		beq $9a52			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9a2f		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9a30		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9a32		e9 02		sbc #$02			sbc 	#2
.9a34		85 3c		sta $3c				sta 	zsTemp
.9a36		a0 01		ldy #$01			ldy 	#1
.9a38		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a3a		e9 00		sbc #$00			sbc 	#0
.9a3c		85 3d		sta $3d				sta 	zsTemp+1
.9a3e		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9a40						_ASGetLength:
.9a40		c8		iny				iny
.9a41		b1 38		lda ($38),y			lda 	(zTemp1),y
.9a43		d0 fb		bne $9a40			bne 	_ASGetLength
.9a45		98		tya				tya 								; is this length <= current length
.9a46		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9a48		90 1e		bcc $9a68			bcc 	_ASCopyString
.9a4a		f0 1c		beq $9a68			beq 	_ASCopyString
.9a4c		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9a4e		a0 01		ldy #$01			ldy 	#1
.9a50		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9a52						_ASNewStringRequired:
.9a52		e8		inx				inx 								; concrete the new string.
.9a53		20 52 b3	jsr $b352			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9a56		ca		dex				dex
.9a57		18		clc				clc
.9a58		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9a5a		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9a5c		92 36		sta ($36)			sta 	(zTemp0)
.9a5e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a60		69 00		adc #$00			adc 	#0
.9a62		a0 01		ldy #$01			ldy 	#1
.9a64		91 36		sta ($36),y			sta 	(zTemp0),y
.9a66		80 0d		bra $9a75			bra 	_ASExit
.9a68						_ASCopyString:
.9a68		a0 00		ldy #$00			ldy 	#0
.9a6a						_ASCopyLoop:
.9a6a		b1 38		lda ($38),y			lda 	(zTemp1),y
.9a6c		c8		iny				iny
.9a6d		c8		iny				iny
.9a6e		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9a70		88		dey				dey
.9a71		c9 00		cmp #$00			cmp 	#0
.9a73		d0 f5		bne $9a6a			bne 	_ASCopyLoop
.9a75						_ASExit:
.9a75		7a		ply				ply
.9a76		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9a77						DereferenceTopTwo:
.9a77		e8		inx				inx
.9a78		20 7c 9a	jsr $9a7c			jsr 	Dereference 				; deref x+1
.9a7b		ca		dex				dex  								; falls through to deref x
.9a7c						Dereference:
.9a7c		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9a7e		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9a80		f0 48		beq $9aca			beq 	_DRFExit 					; not a reference, so exit.
.9a82		5a		phy				phy
.9a83		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9a85		85 36		sta $36				sta 	zTemp0
.9a87		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a89		85 37		sta $37				sta 	zTemp0+1
.9a8b		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9a8d		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9a8f		95 58		sta $58,x			sta 	NSMantissa0,x
.9a91		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9a93		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9a95		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9a97		f0 0e		beq $9aa7			beq 	_DRFDereferenceTwo
.9a99		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9a9b		f0 2f		beq $9acc			beq 	_DRFFull
.9a9d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9a9f		29 03		and #$03			and 	#3
.9aa1		f0 29		beq $9acc			beq 	_DRFFull 					; the whole word
.9aa3		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9aa5		f0 06		beq $9aad			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9aa7						_DRFDereferenceTwo:
.9aa7		a0 01		ldy #$01			ldy 	#1
.9aa9		b1 36		lda ($36),y			lda 	(zTemp0),y
.9aab		95 60		sta $60,x			sta 	NSMantissa1,x
.9aad						_DRFClear23:
.9aad		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9aaf		74 70		stz $70,x			stz 	NSMantissa3,x
.9ab1		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9ab3		29 18		and #$18			and 	#NSBTypeMask
.9ab5		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9ab7		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9ab9		d0 0e		bne $9ac9			bne 	_DRFNotString
.9abb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9abd		15 60		ora $60,x			ora 	NSMantissa1,x
.9abf		d0 08		bne $9ac9			bne 	_DRFNotString
.9ac1		a9 cb		lda #$cb			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9ac3		95 58		sta $58,x			sta 	NSMantissa0,x
.9ac5		a9 9a		lda #$9a			lda 	#_DRFNullString >> 8
.9ac7		95 60		sta $60,x			sta 	NSMantissa1,x
.9ac9						_DRFNotString
.9ac9		7a		ply				ply 								; restore Y and exit
.9aca						_DRFExit:
.9aca		60		rts				rts
.9acb						_DRFNullString:
>9acb		00						.byte 	0
.9acc						_DRFFull:
.9acc		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9ace		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ad0		95 60		sta $60,x			sta 	NSMantissa1,x
.9ad2		c8		iny				iny
.9ad3		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ad5		95 68		sta $68,x			sta 	NSMantissa2,x
.9ad7		c8		iny				iny
.9ad8		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ada		95 70		sta $70,x			sta 	NSMantissa3,x
.9adc		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9ade		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9ae0		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9ae2		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9ae4		f0 05		beq $9aeb			beq 	_DRFNoExponent
.9ae6		c8		iny				iny 								; if not, read the exponent as well.
.9ae7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ae9		95 78		sta $78,x			sta 	NSExponent,x
.9aeb						_DRFNoExponent:
.9aeb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9aed		10 0a		bpl $9af9			bpl 	_DRFExit2 					; if not, then exit.
.9aef		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9af1		95 70		sta $70,x			sta 	NSMantissa3,x
.9af3		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9af5		09 80		ora #$80			ora 	#NSBIsNegative
.9af7		95 50		sta $50,x			sta 	NSStatus,x
.9af9						_DRFExit2:
.9af9		7a		ply				ply
.9afa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9afb						EncodeNumberStart:
.9afb		38		sec				sec
.9afc		80 01		bra $9aff			bra 	EncodeNumberContinue+1
.9afe						EncodeNumberContinue:
.9afe		18		clc				clc
.9aff						EncodeNumber:
.9aff		08		php				php 								; save reset flag.
.9b00		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9b02		f0 12		beq $9b16			beq 	_ENIsOkay
.9b04		c9 30		cmp #$30			cmp 	#"0"
.9b06		90 04		bcc $9b0c			bcc 	_ENBadNumber
.9b08		c9 3a		cmp #$3a			cmp 	#"9"+1
.9b0a		90 0a		bcc $9b16			bcc 	_ENIsOkay
.9b0c						_ENBadNumber:
.9b0c		28		plp				plp 								; throw saved reset
.9b0d		ad 85 02	lda $0285			lda 	encodeState 				; if in decimal mode, construct final number
.9b10		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9b12		f0 7b		beq $9b8f			beq 	_ENConstructFinal
.9b14						_ENFail:
.9b14		18		clc				clc 								; not allowed
.9b15		60		rts				rts
.9b16						_ENIsOkay:
.9b16		28		plp				plp 								; are we restarting
.9b17		90 15		bcc $9b2e			bcc 	_ENNoRestart
.9b19						_ENStartEncode:
.9b19		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9b1b		f0 0c		beq $9b29			beq 	_ENFirstDP
.9b1d		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9b1f		20 02 a2	jsr $a202			jsr 	NSMSetByte 					; in single byte mode.
.9b22		a9 01		lda #$01			lda 	#ESTA_Low
.9b24						_ENExitChange:
.9b24		8d 85 02	sta $0285			sta 	encodeState 				; save new state
.9b27		38		sec				sec
.9b28		60		rts				rts
.9b29						_ENFirstDP:
.9b29		20 00 a2	jsr $a200			jsr 	NSMSetZero 					; clear integer part
.9b2c		80 3c		bra $9b6a			bra 	_ESTASwitchFloat			; go straight to float and exi
.9b2e						_ENNoRestart:
.9b2e		48		pha				pha 								; save digit or DP on stack.
.9b2f		ad 85 02	lda $0285			lda 	encodeState 				; get current state
.9b32		c9 01		cmp #$01			cmp 	#ESTA_Low
.9b34		f0 09		beq $9b3f			beq  	_ESTALowState
.9b36		c9 02		cmp #$02			cmp 	#ESTA_High
.9b38		f0 26		beq $9b60			beq 	_ESTAHighState
.9b3a		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9b3c		f0 38		beq $9b76			beq 	_ESTADecimalState
>9b3e		db						.byte 	$DB 						; causes a break in the emulator
.9b3f						_ESTALowState:
.9b3f		68		pla				pla 								; get value back
.9b40		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9b42		f0 26		beq $9b6a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9b44		29 0f		and #$0f			and 	#15 						; make digit
.9b46		8d 86 02	sta $0286			sta 	digitTemp 					; save it.
.9b49		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9b4b		0a		asl a				asl 	a
.9b4c		0a		asl a				asl 	a
.9b4d		75 58		adc $58,x			adc 	NSMantissa0,x
.9b4f		0a		asl a				asl 	a
.9b50		6d 86 02	adc $0286			adc 	digitTemp
.9b53		95 58		sta $58,x			sta 	NSMantissa0,x
.9b55		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9b57		90 05		bcc $9b5e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9b59		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9b5b		8d 85 02	sta $0285			sta 	encodeState
.9b5e						_ESTANoSwitch:
.9b5e		38		sec				sec
.9b5f		60		rts				rts
.9b60						_ESTAHighState:
.9b60		68		pla				pla 								; get value back
.9b61		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9b63		f0 05		beq $9b6a			beq 	_ESTASwitchFloat
.9b65		20 c3 9b	jsr $9bc3			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9b68		38		sec				sec
.9b69		60		rts				rts
.9b6a						_ESTASwitchFloat:
.9b6a		9c 87 02	stz $0287			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9b6d		e8		inx				inx 								; zero the decimal additive.
.9b6e		20 00 a2	jsr $a200			jsr 	NSMSetZero
.9b71		ca		dex				dex
.9b72		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9b74		80 ae		bra $9b24			bra 	_ENExitChange
.9b76						_ESTADecimalState:
.9b76		68		pla				pla 								; digit.
.9b77		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9b79		f0 99		beq $9b14			beq 	_ENFail
.9b7b		e8		inx				inx 								; put digit into fractional part of X+1
.9b7c		20 c3 9b	jsr $9bc3			jsr 	ESTAShiftDigitIntoMantissa
.9b7f		ca		dex				dex
.9b80		ee 87 02	inc $0287			inc 	decimalCount 				; bump the count of decimals
.9b83		ad 87 02	lda $0287			lda 	decimalCount 				; too many decimal digits.
.9b86		c9 0b		cmp #$0b			cmp 	#11
.9b88		f0 02		beq $9b8c			beq 	_ESTADSFail
.9b8a		38		sec				sec
.9b8b		60		rts				rts
.9b8c						_ESTADSFail:
.9b8c		4c 83 a3	jmp $a383			jmp 	RangeError
.9b8f						_ENConstructFinal:
.9b8f		ad 87 02	lda $0287			lda 	decimalCount 				; get decimal count
.9b92		f0 2d		beq $9bc1			beq 	_ENCFExit 					; no decimals
.9b94		5a		phy				phy
.9b95		0a		asl a				asl 	a 							; x 4 and CLC
.9b96		0a		asl a				asl 	a
.9b97		6d 87 02	adc $0287			adc 	decimalCount
.9b9a		a8		tay				tay
.9b9b		b9 42 a3	lda $a342,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9b9e		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9ba0		b9 43 a3	lda $a343,y			lda 	DecimalScalarTable-5+1,y
.9ba3		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9ba5		b9 44 a3	lda $a344,y			lda 	DecimalScalarTable-5+2,y
.9ba8		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9baa		b9 45 a3	lda $a345,y			lda 	DecimalScalarTable-5+3,y
.9bad		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9baf		b9 46 a3	lda $a346,y			lda 	DecimalScalarTable-5+4,y
.9bb2		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9bb4		a9 08		lda #$08			lda 	#NSTFloat
.9bb6		95 52		sta $52,x			sta 	NSStatus+2,x
.9bb8		7a		ply				ply
.9bb9		e8		inx				inx 								; multiply decimal const by decimal scalar
.9bba		20 49 99	jsr $9949			jsr 	FloatMultiply
.9bbd		ca		dex				dex
.9bbe		20 04 98	jsr $9804			jsr 	FloatAdd 					; add to integer part.
.9bc1						_ENCFExit:
.9bc1		18		clc				clc 								; reject the digit.
.9bc2		60		rts				rts
.9bc3						ESTAShiftDigitIntoMantissa:
.9bc3		29 0f		and #$0f			and 	#15 						; save digit
.9bc5		48		pha				pha
.9bc6		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9bc8		48		pha				pha
.9bc9		b5 68		lda $68,x			lda 	NSMantissa2,x
.9bcb		48		pha				pha
.9bcc		b5 60		lda $60,x			lda 	NSMantissa1,x
.9bce		48		pha				pha
.9bcf		b5 58		lda $58,x			lda 	NSMantissa0,x
.9bd1		48		pha				pha
.9bd2		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; x 2
.9bd5		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; x 4
.9bd8		18		clc				clc 								; pop mantissa and add
.9bd9		68		pla				pla
.9bda		75 58		adc $58,x			adc 	NSMantissa0,x
.9bdc		95 58		sta $58,x			sta 	NSMantissa0,x
.9bde		68		pla				pla
.9bdf		75 60		adc $60,x			adc 	NSMantissa1,x
.9be1		95 60		sta $60,x			sta 	NSMantissa1,x
.9be3		68		pla				pla
.9be4		75 68		adc $68,x			adc 	NSMantissa2,x
.9be6		95 68		sta $68,x			sta 	NSMantissa2,x
.9be8		68		pla				pla
.9be9		75 70		adc $70,x			adc 	NSMantissa3,x
.9beb		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9bed		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; x 10
.9bf0		68		pla				pla 								; add digit
.9bf1		18		clc				clc
.9bf2		75 58		adc $58,x			adc 	NSMantissa0,x
.9bf4		95 58		sta $58,x			sta 	NSMantissa0,x
.9bf6		90 0a		bcc $9c02			bcc 	_ESTASDExit
.9bf8		f6 60		inc $60,x			inc 	NSMantissa1,x
.9bfa		d0 06		bne $9c02			bne 	_ESTASDExit
.9bfc		f6 68		inc $68,x			inc 	NSMantissa2,x
.9bfe		d0 02		bne $9c02			bne 	_ESTASDExit
.9c00		f6 70		inc $70,x			inc 	NSMantissa3,x
.9c02						_ESTASDExit:
.9c02		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9c03						EvaluateTerm:
.9c03		b1 30		lda ($30),y			lda 	(codePtr),y
.9c05		30 18		bmi $9c1f			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9c07		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9c09		b0 6c		bcs $9c77			bcs 	_ETVariable
.9c0b		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9c0d		90 6b		bcc $9c7a			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9c0f		c9 3a		cmp #$3a			cmp 	#'9'+1
.9c11		b0 67		bcs $9c7a			bcs 	_ETPuncUnary
.9c13		20 fb 9a	jsr $9afb			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9c16						_ETNumber:
.9c16		c8		iny				iny 								; keep encoding until we have the numbers
.9c17		b1 30		lda ($30),y			lda 	(codePtr),y
.9c19		20 fe 9a	jsr $9afe			jsr 	EncodeNumberContinue
.9c1c		b0 f8		bcs $9c16			bcs 	_ETNumber 					; go back if accepted.
.9c1e		60		rts				rts
.9c1f						_ETCheckUnary:
.9c1f		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9c21		f0 3f		beq $9c62			beq 	_ETString
.9c23		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9c25		f0 12		beq $9c39			beq 	_ETHexConstant
.9c27		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9c29		90 0b		bcc $9c36			bcc 	_ETSyntaxError
.9c2b		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9c2d		b0 07		bcs $9c36			bcs 	_ETSyntaxError
.9c2f		da		phx				phx 								; push X on the stack
.9c30		0a		asl a				asl 	a 							; put vector x 2 into X
.9c31		aa		tax				tax
.9c32		c8		iny				iny 								; consume unary function token
.9c33		7c a4 8f	jmp ($8fa4,x)			jmp 	(VectorSet0,x) 				; and do it.
.9c36						_ETSyntaxError:
.9c36		4c 7e a3	jmp $a37e			jmp 	SyntaxError
.9c39						_ETHexConstant:
.9c39		c8		iny				iny 								; skip #
.9c3a		c8		iny				iny 								; skip count
.9c3b		20 00 a2	jsr $a200			jsr 	NSMSetZero 					; clear result
.9c3e						_ETHLoop:
.9c3e		b1 30		lda ($30),y			lda 	(codePtr),y
.9c40		c8		iny				iny 								; and consume
.9c41		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9c43		f0 1c		beq $9c61			beq 	_ETHExit
.9c45		48		pha				pha 								; save on stack.
.9c46		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; x 2
.9c49		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; x 4
.9c4c		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; x 8
.9c4f		20 0f a2	jsr $a20f			jsr 	NSMShiftLeft 				; x 16
.9c52		68		pla				pla 								; ASCII
.9c53		c9 41		cmp #$41			cmp 	#'A'
.9c55		90 02		bcc $9c59			bcc 	_ETHNotChar
.9c57		e9 07		sbc #$07			sbc 	#7
.9c59						_ETHNotChar:
.9c59		29 0f		and #$0f			and 	#15 						; digit now
.9c5b		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9c5d		95 58		sta $58,x			sta 	NSMantissa0,x
.9c5f		80 dd		bra $9c3e			bra 	_ETHLoop 					; go round.
.9c61						_ETHExit:
.9c61		60		rts				rts
.9c62						_ETString:
.9c62		c8		iny				iny 								; look at length
.9c63		b1 30		lda ($30),y			lda 	(codePtr),y
.9c65		48		pha				pha
.9c66		c8		iny				iny 								; first character
.9c67		20 7a a9	jsr $a97a			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9c6a		68		pla				pla 								; restore count and save
.9c6b		85 36		sta $36				sta 	zTemp0
.9c6d		98		tya				tya 								; add length to Y to skip it.
.9c6e		18		clc				clc
.9c6f		65 36		adc $36				adc 	zTemp0
.9c71		a8		tay				tay
.9c72		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9c74		95 50		sta $50,x			sta 	NSStatus,x
.9c76		60		rts				rts
.9c77						_ETVariable:
.9c77		4c cc 9c	jmp $9ccc			jmp 	VariableHandler
.9c7a						_ETPuncUnary:
.9c7a		c8		iny				iny 								; consume the unary character
.9c7b		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9c7d		f0 2b		beq $9caa			beq 	_ETUnaryNegate
.9c7f		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9c81		f0 36		beq $9cb9			beq 	_ETDereference
.9c83		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9c85		f0 3e		beq $9cc5			beq 	_ETParenthesis
.9c87		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9c89		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9c8b		f0 06		beq $9c93			beq 	_ETIndirection
.9c8d		e6 36		inc $36				inc 	zTemp0
.9c8f		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9c91		d0 a3		bne $9c36			bne 	_ETSyntaxError
.9c93						_ETIndirection:
.9c93		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9c95		1a		inc a				inc 	a
.9c96		48		pha				pha
.9c97		20 03 9c	jsr $9c03			jsr 	EvaluateTerm				; evaluate the term
.9c9a		20 7c 9a	jsr $9a7c			jsr 	Dereference 				; dereference it.
.9c9d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9c9f		d0 06		bne $9ca7			bne 	_ETTypeMismatch
.9ca1		68		pla				pla 								; indirection 1-2
.9ca2		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9ca4		95 50		sta $50,x			sta 	NSStatus,x
.9ca6		60		rts				rts
.9ca7						_ETTypeMismatch:
.9ca7		4c 88 a3	jmp $a388			jmp 	TypeError
.9caa						_ETUnaryNegate:
.9caa		20 03 9c	jsr $9c03			jsr 	EvaluateTerm				; evaluate the term
.9cad		20 7c 9a	jsr $9a7c			jsr 	Dereference 				; dereference it.
.9cb0		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9cb2		29 10		and #$10			and 	#NSTString
.9cb4		d0 f1		bne $9ca7			bne 	_ETTypeMismatch
.9cb6		4c c2 a1	jmp $a1c2			jmp 	NSMNegate  					; just toggles the sign bit.
.9cb9						_ETDereference:
.9cb9		20 03 9c	jsr $9c03			jsr 	EvaluateTerm				; evaluate the term
.9cbc		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9cbe		29 20		and #$20			and 	#NSBIsReference
.9cc0		f0 e5		beq $9ca7			beq 	_ETTypeMismatch
.9cc2		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9cc4		60		rts				rts
.9cc5						_ETParenthesis:
.9cc5		20 b9 97	jsr $97b9			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9cc8		20 9c 92	jsr $929c			jsr 	CheckRightBracket 			; check for )
.9ccb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9ccc						VariableHandler:
.9ccc		b1 30		lda ($30),y			lda 	(codePtr),y
.9cce		18		clc				clc
.9ccf		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.9cd1		85 37		sta $37				sta 	zTemp0+1
.9cd3		c8		iny				iny
.9cd4		b1 30		lda ($30),y			lda 	(codePtr),y
.9cd6		85 36		sta $36				sta 	zTemp0
.9cd8		c8		iny				iny
.9cd9		18		clc				clc									; copy variable address+3 to mantissa
.9cda		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9cdc		95 58		sta $58,x			sta 	NSMantissa0,x
.9cde		a5 37		lda $37				lda 	zTemp0+1
.9ce0		69 00		adc #$00			adc 	#0
.9ce2		95 60		sta $60,x			sta 	NSMantissa1,x
.9ce4		74 68		stz $68,x			stz 	NSMantissa2,x
.9ce6		74 70		stz $70,x			stz 	NSMantissa3,x
.9ce8		74 78		stz $78,x			stz 	NSExponent,x
.9cea		5a		phy				phy
.9ceb		a0 02		ldy #$02			ldy 	#2 							; read type
.9ced		b1 36		lda ($36),y			lda 	(zTemp0),y
.9cef		7a		ply				ply
.9cf0		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9cf2		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9cf4		95 50		sta $50,x			sta 	NSStatus,x
.9cf6		29 04		and #$04			and 	#NSBIsArray
.9cf8		d0 01		bne $9cfb			bne 	_VHArray
.9cfa		60		rts				rts
.9cfb						_VHArray:
.9cfb		e8		inx				inx
.9cfc		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9cff		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9d01		95 51		sta $51,x			sta 	NSStatus+1,x
.9d03		b1 30		lda ($30),y			lda 	(codePtr),y
.9d05		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9d07		d0 06		bne $9d0f			bne 	_VHNoSecondIndex
.9d09		c8		iny				iny 								; skip the comma
.9d0a		e8		inx				inx
.9d0b		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9d0e		ca		dex				dex
.9d0f						_VHNoSecondIndex:
.9d0f		ca		dex				dex 								; set X back.
.9d10		20 9c 92	jsr $929c			jsr 	CheckRightBracket 			; and check the right bracket.
.9d13		5a		phy				phy 								; save position
.9d14		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9d16		85 3e		sta $3e				sta 	zaTemp
.9d18		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d1a		85 3f		sta $3f				sta 	zaTemp+1
.9d1c		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9d1e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d20		f0 5d		beq $9d7f			beq 	_VHBadArray
.9d22		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9d24		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d26		f0 02		beq $9d2a			beq 	_VHHas2Mask
.9d28		a9 ff		lda #$ff			lda 	#$FF
.9d2a						_VHHas2Mask:
.9d2a		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9d2c		f0 4c		beq $9d7a			beq 	_VHBadIndex
.9d2e		0a		asl a				asl 	a 							; carry will be set if a second index
.9d2f		90 08		bcc $9d39			bcc 	_VHCheckFirstIndex
.9d31		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9d33		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d35		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9d37		90 41		bcc $9d7a			bcc 	_VHBadIndex
.9d39						_VHCheckFirstIndex:
.9d39		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9d3b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d3d		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9d3f		90 39		bcc $9d7a			bcc 	_VHBadIndex
.9d41		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9d43		64 37		stz $37				stz 	zTemp0+1
.9d45		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9d47		30 0e		bmi $9d57			bmi 	_VHNoMultiply
.9d49		da		phx				phx
.9d4a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9d4c		48		pha				pha
.9d4d		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9d4f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d51		1a		inc a				inc 	a 							; add 1 for zero base
.9d52		fa		plx				plx
.9d53		20 ab a1	jsr $a1ab			jsr 	Multiply8x8 				; calculate -> Z0
.9d56		fa		plx				plx
.9d57						_VHNoMultiply:
.9d57		18		clc				clc
.9d58		a5 36		lda $36				lda 	zTemp0
.9d5a		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9d5c		85 36		sta $36				sta 	zTemp0
.9d5e		a5 37		lda $37				lda 	zTemp0+1
.9d60		69 00		adc #$00			adc 	#0
.9d62		85 37		sta $37				sta 	zTemp0+1
.9d64		b5 50		lda $50,x			lda 	NSStatus,x
.9d66		20 3d 87	jsr $873d			jsr 	ScaleByBaseType
.9d69		18		clc				clc
.9d6a		b2 3e		lda ($3e)			lda 	(zaTemp)
.9d6c		65 36		adc $36				adc 	zTemp0
.9d6e		95 58		sta $58,x			sta 	NSMantissa0,x
.9d70		a0 01		ldy #$01			ldy 	#1
.9d72		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d74		65 37		adc $37				adc 	zTemp0+1
.9d76		95 60		sta $60,x			sta 	NSMantissa1,x
.9d78		7a		ply				ply 								; restore position
.9d79		60		rts				rts
.9d7a						_VHBadIndex:
.9d7a		a9 17		lda #$17		lda	#23
.9d7c		4c b5 92	jmp $92b5		jmp	ErrorHandler
.9d7f						_VHBadArray:
.9d7f		a9 18		lda #$18		lda	#24
.9d81		4c b5 92	jmp $92b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9d84						AbsUnary:
.9d84		fa		plx				plx 								; restore stack pos
.9d85		20 4e a1	jsr $a14e			jsr 	EvaluateNumber 				; get a float or int
.9d88		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9d8b		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9d8d		29 7f		and #$7f			and 	#$7F
.9d8f		95 50		sta $50,x			sta 	NSStatus,x
.9d91		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9d92						AllocUnary:
.9d92		fa		plx				plx 								; restore stack pos
.9d93		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger		; get bytes required.
.9d96		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9d99		da		phx				phx 								; save X/Y
.9d9a		5a		phy				phy
.9d9b		8a		txa				txa 								; copy X into Y
.9d9c		a8		tay				tay
.9d9d		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9da0		aa		tax				tax
.9da1		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9da4		20 b1 9d	jsr $9db1			jsr 	AllocateXABytes 			; allocate memory
.9da7		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9daa		8a		txa				txa 	 							; typing is 16 bit integer.
.9dab		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9dae		7a		ply				ply
.9daf		fa		plx				plx
.9db0		60		rts				rts
.9db1						AllocateXABytes:
.9db1		5a		phy				phy
.9db2		ac 8c 02	ldy $028c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9db5		84 36		sty $36				sty 	zTemp0
.9db7		5a		phy				phy
.9db8		ac 8d 02	ldy $028d			ldy 	lowMemPtr+1
.9dbb		84 37		sty $37				sty 	zTemp0+1
.9dbd		5a		phy				phy
.9dbe		18		clc				clc 								; add to low memory pointer
.9dbf		6d 8c 02	adc $028c			adc 	lowMemPtr
.9dc2		8d 8c 02	sta $028c			sta 	lowMemPtr
.9dc5		8a		txa				txa
.9dc6		6d 8d 02	adc $028d			adc 	lowMemPtr+1
.9dc9		8d 8d 02	sta $028d			sta 	lowMemPtr+1
.9dcc		b0 2f		bcs $9dfd			bcs 	CISSMemory
.9dce		20 ef 9d	jsr $9def			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9dd1						_ClearMemory:
.9dd1		ad 8c 02	lda $028c			lda 	lowMemPtr 					; cleared all memory allocated
.9dd4		c5 36		cmp $36				cmp 	zTemp0
.9dd6		d0 07		bne $9ddf			bne 	_CMClearNext
.9dd8		ad 8d 02	lda $028d			lda 	lowMemPtr+1
.9ddb		c5 37		cmp $37				cmp 	zTemp0+1
.9ddd		f0 0c		beq $9deb			beq 	_CMExit
.9ddf						_CMClearNext:
.9ddf		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9de1		92 36		sta ($36)			sta 	(zTemp0)
.9de3		e6 36		inc $36				inc 	zTemp0
.9de5		d0 ea		bne $9dd1			bne 	_ClearMemory
.9de7		e6 37		inc $37				inc		zTemp0+1
.9de9		80 e6		bra $9dd1			bra 	_ClearMemory
.9deb						_CMExit:
.9deb		fa		plx				plx
.9dec		68		pla				pla
.9ded		7a		ply				ply
.9dee		60		rts				rts
.9def						CheckIdentifierStringSpace:
.9def		48		pha				pha
.9df0		ad 8d 02	lda $028d			lda 	lowMemPtr+1 				; get low memory pointer
.9df3		18		clc				clc
.9df4		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9df6		cd 8f 02	cmp $028f			cmp 	stringMemory+1 				; is it >= StringMemory
.9df9		b0 02		bcs $9dfd			bcs 	CISSMemory
.9dfb		68		pla				pla
.9dfc		60		rts				rts
.9dfd						CISSMemory:
.9dfd		a9 06		lda #$06		lda	#6
.9dff		4c b5 92	jmp $92b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9e02						AscUnary:
.9e02		fa		plx				plx 								; restore stack pos
.9e03		20 58 a1	jsr $a158			jsr 	EvaluateString 				; get a string
.9e06		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9e08		20 02 a2	jsr $a202			jsr 	NSMSetByte 					; ASC("") will return zero.
.9e0b		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9e0e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9e0f						FracUnary:
.9e0f		fa		plx				plx 								; restore stack pos
.9e10		20 4e a1	jsr $a14e			jsr 	EvaluateNumber 				; get a float or int
.9e13		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9e16		b5 50		lda $50,x			lda 	NSStatus,x
.9e18		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9e1a		f0 04		beq $9e20			beq 	_IUZero
.9e1c		20 ca 98	jsr $98ca			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9e1f		60		rts				rts
.9e20						_IUZero:
.9e20		20 00 a2	jsr $a200			jsr 	NSMSetZero
.9e23		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9e24						IntUnary:
.9e24		fa		plx				plx 								; restore stack pos
.9e25		20 4e a1	jsr $a14e			jsr 	EvaluateNumber 				; get a float or int
.9e28		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9e2b		b5 50		lda $50,x			lda 	NSStatus,x
.9e2d		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9e2f		f0 03		beq $9e34			beq 	_IUExit
.9e31		20 22 99	jsr $9922			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9e34						_IUExit:
.9e34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9e35						LenUnary:
.9e35		fa		plx				plx 								; restore stack pos
.9e36		20 58 a1	jsr $a158			jsr 	EvaluateString 				; get a string
.9e39		5a		phy				phy
.9e3a		a0 00		ldy #$00			ldy 	#0 							; find length
.9e3c						_LenFind:
.9e3c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9e3e		f0 06		beq $9e46			beq 	_LenExit
.9e40		c8		iny				iny
.9e41		d0 f9		bne $9e3c			bne 	_LenFind
.9e43		4c 83 a3	jmp $a383			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9e46						_LenExit:
.9e46		98		tya				tya		 							; return length
.9e47		20 02 a2	jsr $a202			jsr 	NSMSetByte
.9e4a		7a		ply				ply
.9e4b		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9e4e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9e4f						Unary_Min:
.9e4f		a9 01		lda #$01			lda 	#1
.9e51		80 02		bra $9e55			bra 	UnaryMinMaxMain
.9e53						Unary_Max:
.9e53		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9e55						UnaryMinMaxMain:
.9e55		fa		plx				plx 								; get index on number stack
.9e56		48		pha				pha 								; save comparator
.9e57		20 45 a1	jsr $a145			jsr 	EvaluateValue 				; get the first value.
.9e5a						_UMMMLoop:
.9e5a		b1 30		lda ($30),y			lda 	(codePtr),y
.9e5c		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9e5e		f0 22		beq $9e82			beq 	_UMMMDone
.9e60		20 a4 92	jsr $92a4			jsr 	CheckComma 					; must be a comma
.9e63		e8		inx				inx
.9e64		20 45 a1	jsr $a145			jsr 	EvaluateValue
.9e67		ca		dex				dex
.9e68		20 e3 a1	jsr $a1e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9e6b		e8		inx				inx
.9e6c		20 e3 a1	jsr $a1e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9e6f		e8		inx				inx
.9e70		20 6c 93	jsr $936c			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9e73		ca		dex				dex
.9e74		ca		dex				dex
.9e75		85 36		sta $36				sta 	zTemp0 						; save required result
.9e77		68		pla				pla 								; get and save comparator
.9e78		48		pha				pha
.9e79		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9e7b		d0 dd		bne $9e5a			bne 	_UMMMLoop
.9e7d		20 85 9e	jsr $9e85			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9e80		80 d8		bra $9e5a			bra 	_UMMMLoop
.9e82						_UMMMDone:
.9e82		68		pla				pla 								; throw the comparator
.9e83		c8		iny				iny 								; skip )
.9e84		60		rts				rts
.9e85						ExpCopyAboveDown:
.9e85		b5 51		lda $51,x			lda 	NSStatus+1,x
.9e87		95 50		sta $50,x			sta 	NSStatus,x
.9e89		b5 79		lda $79,x			lda 	NSExponent+1,x
.9e8b		95 78		sta $78,x			sta 	NSExponent,x
.9e8d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9e8f		95 58		sta $58,x			sta 	NSMantissa0,x
.9e91		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9e93		95 60		sta $60,x			sta 	NSMantissa1,x
.9e95		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9e97		95 68		sta $68,x			sta 	NSMantissa2,x
.9e99		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9e9b		95 70		sta $70,x			sta 	NSMantissa3,x
.9e9d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9e9e						Unary_Not:
.9e9e		fa		plx				plx
.9e9f		20 6d a1	jsr $a16d			jsr 	EvaluateInteger 			; get integer
.9ea2		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9ea5		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; zero mantissa ?
.9ea8		f0 04		beq $9eae			beq 	_NotZero
.9eaa		20 00 a2	jsr $a200			jsr 	NSMSetZero
.9ead		60		rts				rts
.9eae						_NotZero:
.9eae		4c 22 93	jmp $9322			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9eb1						PeekByteUnary:
.9eb1		a9 01		lda #$01			lda 	#1
.9eb3		80 0a		bra $9ebf			bra 	PeekUnary
.9eb5						PeekWUnary:
.9eb5		a9 02		lda #$02			lda 	#2
.9eb7		80 06		bra $9ebf			bra 	PeekUnary
.9eb9						PeekLUnary:
.9eb9		a9 03		lda #$03			lda 	#3
.9ebb		80 02		bra $9ebf			bra 	PeekUnary
.9ebd						PeekDUnary:
.9ebd		a9 04		lda #$04			lda 	#4
.9ebf						PeekUnary:
.9ebf		fa		plx				plx 								; restore position.
.9ec0		48		pha				pha 								; save count to copy on stack
.9ec1		20 80 a1	jsr $a180			jsr		Evaluate16BitInteger 		; address as constant.
.9ec4		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9ec7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9ec9		85 36		sta $36				sta 	zTemp0
.9ecb		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ecd		85 37		sta $37				sta 	zTemp0+1
.9ecf		20 00 a2	jsr $a200			jsr 	NSMSetZero 					; clear the result to zero.
.9ed2		68		pla				pla 								; count in zTemp2
.9ed3		85 3a		sta $3a				sta 	zTemp2
.9ed5		da		phx				phx 								; save stack position and offset of read
.9ed6		5a		phy				phy
.9ed7		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9ed9						_PULoop:
.9ed9		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9edb		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9edd		c8		iny				iny 								; next byte to write
.9ede		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9edf		18		clc				clc
.9ee0		69 08		adc #$08			adc 	#MathStackSize
.9ee2		aa		tax				tax
.9ee3		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9ee5		d0 f2		bne $9ed9			bne 	_PULoop
.9ee7		7a		ply				ply 								; restore stack/code pos and exit.
.9ee8		fa		plx				plx
.9ee9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9eea						Unary_Random:
.9eea		fa		plx				plx
.9eeb		20 5c 9f	jsr $9f5c			jsr 	Random32Bit 				; get a random number
.9eee		20 45 9f	jsr $9f45			jsr 	URCopyToMantissa  			; put in mantissa
.9ef1		b1 30		lda ($30),y			lda 	(codePtr),y
.9ef3		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9ef5		f0 08		beq $9eff			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9ef7		e8		inx				inx
.9ef8		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9efb		ca		dex				dex
.9efc		20 74 94	jsr $9474			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9eff						_URNoModulus:
.9eff		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9f01		74 78		stz $78,x			stz 	NSExponent,x
.9f03		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9f06		60		rts				rts
.9f07						Unary_Rnd:
.9f07		fa		plx				plx
.9f08		20 4e a1	jsr $a14e			jsr 	EvaluateNumber 				; number to use.
.9f0b		20 9c 92	jsr $929c			jsr 	CheckRightBracket 			; closing bracket
.9f0e		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9f11		f0 26		beq $9f39			beq 	_URCopySeed
.9f13		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9f15		10 1f		bpl $9f36			bpl 	_URDontSeed
.9f17		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9f19		49 17		eor #$17			eor 	#$17
.9f1b		8d 88 02	sta $0288			sta 	randomSeed+0
.9f1e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f20		49 a5		eor #$a5			eor 	#$A5
.9f22		8d 89 02	sta $0289			sta 	randomSeed+1
.9f25		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f27		49 c2		eor #$c2			eor 	#$C2
.9f29		8d 8a 02	sta $028a			sta 	randomSeed+2
.9f2c		b5 70		lda $70,x			lda 	NSMantissa3,x
.9f2e		49 9d		eor #$9d			eor 	#$9D
.9f30		8d 8b 02	sta $028b			sta 	randomSeed+3
.9f33		20 5c 9f	jsr $9f5c			jsr 	Random32Bit
.9f36						_URDontSeed:
.9f36		20 5c 9f	jsr $9f5c			jsr 	Random32Bit 				; generate a number
.9f39						_URCopySeed:
.9f39		20 45 9f	jsr $9f45			jsr 	URCopyToMantissa 			; copy into mantissa
.9f3c		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9f3e		95 78		sta $78,x			sta 	NSExponent,x
.9f40		a9 08		lda #$08			lda 	#NSTFloat
.9f42		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9f44		60		rts				rts
.9f45						URCopyToMantissa:
.9f45		ad 88 02	lda $0288			lda 	randomSeed+0
.9f48		95 58		sta $58,x			sta 	NSMantissa0,x
.9f4a		ad 89 02	lda $0289			lda 	randomSeed+1
.9f4d		95 60		sta $60,x			sta 	NSMantissa1,x
.9f4f		ad 8a 02	lda $028a			lda 	randomSeed+2
.9f52		95 68		sta $68,x			sta 	NSMantissa2,x
.9f54		ad 8b 02	lda $028b			lda 	randomSeed+3
.9f57		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9f59		95 70		sta $70,x			sta 	NSMantissa3,x
.9f5b		60		rts				rts
.9f5c						Random32Bit:
.9f5c		5a		phy				phy
.9f5d		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9f5f		ad 88 02	lda $0288			lda 	randomSeed+0 				; check the seed isn't zero
.9f62		d0 03		bne $9f67			bne 	_Random1
.9f64		a8		tay				tay 								; if so do it 256 times
.9f65		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9f67						_Random1:
.9f67		0a		asl a				asl 	a 							; LSFR RNG
.9f68		2e 89 02	rol $0289			rol 	randomSeed+1
.9f6b		2e 8a 02	rol $028a			rol 	randomSeed+2
.9f6e		2e 8b 02	rol $028b			rol 	randomSeed+3
.9f71		90 02		bcc $9f75			bcc 	_Random2
.9f73		49 c5		eor #$c5			eor 	#$C5
.9f75						_Random2:
.9f75		88		dey				dey
.9f76		d0 ef		bne $9f67			bne 	_Random1
.9f78		8d 88 02	sta $0288			sta 	randomSeed+0
.9f7b		7a		ply				ply
.9f7c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9f7d						SgnUnary:
.9f7d		fa		plx				plx 								; restore stack pos
.9f7e		20 4e a1	jsr $a14e			jsr 	EvaluateNumber 				; get a float or int
.9f81		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9f84		20 22 a2	jsr $a222			jsr 	NSMIsZero 					; if zero
.9f87		f0 0e		beq $9f97			beq 	_SGZero  					; return Int Zero
.9f89		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9f8b		48		pha				pha
.9f8c		a9 01		lda #$01			lda 	#1 							; set to 1
.9f8e		20 02 a2	jsr $a202			jsr 	NSMSetByte
.9f91		68		pla				pla
.9f92		29 80		and #$80			and		#$80 						; copy the sign byte out
.9f94		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9f96		60		rts				rts
.9f97		20 00 a2	jsr $a200	_SGZero:jsr 	NSMSetZero
.9f9a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9f9b						ValUnary:
.9f9b		fa		plx				plx 								; restore stack pos
.9f9c		20 b1 9f	jsr $9fb1			jsr 	ValMainCode 				; do the main val() code
.9f9f		b0 01		bcs $9fa2			bcs 	_VUError 					; couldn't convert
.9fa1		60		rts				rts
.9fa2						_VUError:
.9fa2		4c 88 a3	jmp $a388			jmp 	TypeError
.9fa5						IsValUnary:
.9fa5		fa		plx				plx 								; restore stack pos
.9fa6		20 b1 9f	jsr $9fb1			jsr 	ValMainCode 				; do the main val() code
.9fa9		b0 03		bcs $9fae			bcs 	_VUBad
.9fab		4c 22 93	jmp $9322			jmp 	ReturnTrue
.9fae						_VUBad:
.9fae		4c 2d 93	jmp $932d			jmp 	ReturnFalse
.9fb1						ValMainCode:
.9fb1		20 58 a1	jsr $a158			jsr 	EvaluateString 				; get a string
.9fb4		20 9c 92	jsr $929c			jsr 	CheckRightBracket 			; check right bracket present
.9fb7						ValEvaluateZTemp0:
.9fb7		5a		phy				phy
.9fb8		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9fba		f0 17		beq $9fd3			beq 	_VMCFail2
.9fbc		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9fbe		48		pha				pha 								; save first character
.9fbf		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9fc1		d0 01		bne $9fc4			bne 	_VMCStart
.9fc3		c8		iny				iny 								; skip over -
.9fc4						_VMCStart:
.9fc4		38		sec				sec 								; initialise first time round.
.9fc5						_VMCNext:
.9fc5		c8		iny				iny 								; pre-increment
.9fc6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9fc8		f0 0c		beq $9fd6			beq 	_VMCSuccess 				; successful.
.9fca		20 ff 9a	jsr $9aff			jsr 	EncodeNumber 				; send it to the number-builder
.9fcd		90 03		bcc $9fd2			bcc 	_VMCFail 					; if failed, give up.
.9fcf		18		clc				clc 								; next time round, countinue
.9fd0		80 f3		bra $9fc5			bra 	_VMCNext
.9fd2						_VMCFail:
.9fd2		68		pla				pla
.9fd3						_VMCFail2:
.9fd3		7a		ply				ply
.9fd4		38		sec				sec
.9fd5		60		rts				rts
.9fd6						_VMCSuccess:
.9fd6		a9 00		lda #$00			lda 	#0 							; construct final
.9fd8		20 ff 9a	jsr $9aff			jsr 	EncodeNumber 				; by sending a duff value.
.9fdb		68		pla				pla 								; if it was -ve
.9fdc		c9 2d		cmp #$2d			cmp 	#"-"
.9fde		d0 03		bne $9fe3			bne 	_VMCNotNegative
.9fe0		20 c2 a1	jsr $a1c2			jsr		NSMNegate 					; negate it.
.9fe3						_VMCNotNegative:
.9fe3		7a		ply				ply
.9fe4		18		clc				clc
.9fe5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9fe6						ChrUnary:
.9fe6		fa		plx				plx 								; restore stack pos
.9fe7		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9fea		48		pha				pha
.9feb		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.9fee		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9ff0		20 cf b3	jsr $b3cf			jsr 	StringTempAllocate
.9ff3		68		pla				pla 								; write number to it
.9ff4		20 08 b4	jsr $b408			jsr 	StringTempWrite
.9ff7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9ff8						SpcUnary:
.9ff8		fa		plx				plx 								; restore stack pos
.9ff9		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger			; get value
.9ffc		5a		phy				phy
.9ffd		48		pha				pha 								; save count
.9ffe		20 cf b3	jsr $b3cf			jsr 	StringTempAllocate
.a001		7a		ply				ply 								; to do count in Y
.a002						_SpcLoop:
.a002		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a004		f0 08		beq $a00e			beq 	_SpcExit
.a006		a9 20		lda #$20			lda 	#32
.a008		20 08 b4	jsr $b408			jsr 	StringTempWrite
.a00b		88		dey				dey
.a00c		80 f4		bra $a002			bra 	_SpcLoop
.a00e						_SpcExit:
.a00e		7a		ply				ply
.a00f		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.a012		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a013						Unary_Str:
.a013		fa		plx				plx
.a014		20 4e a1	jsr $a14e			jsr 	EvaluateNumber  			; get number
.a017		20 9c 92	jsr $929c			jsr 	CheckRightBracket 			; closing bracket
.a01a		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a01c		20 35 a0	jsr $a035			jsr 	ConvertNumberToString 		; do the conversion.
.a01f		a9 21		lda #$21			lda		#33 						; create buffer
.a021		20 cf b3	jsr $b3cf			jsr 	StringTempAllocate 			; allocate memory
.a024		da		phx				phx  								; copy the converted string into the buffer.
.a025		a2 00		ldx #$00			ldx 	#0
.a027						_USCopy:
.a027		bd c9 04	lda $04c9,x			lda 	decimalBuffer,x
.a02a		20 08 b4	jsr $b408			jsr 	StringTempWrite
.a02d		e8		inx				inx
.a02e		bd c9 04	lda $04c9,x			lda 	decimalBuffer,x
.a031		d0 f4		bne $a027			bne 	_USCopy
.a033		fa		plx				plx
.a034		60		rts				rts
.a035						ConvertNumberToString:
.a035		5a		phy				phy 								; save code position
.a036		8d 94 02	sta $0294			sta 	decimalPlaces	 			; save number of DPs.
.a039		9c 95 02	stz $0295			stz 	dbOffset 					; offset into decimal buffer = start.
.a03c		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a03e		10 09		bpl $a049			bpl 	_CNTSNotNegative
.a040		29 7f		and #$7f			and 	#$7F 						; make +ve
.a042		95 50		sta $50,x			sta 	NSStatus,x
.a044		a9 2d		lda #$2d			lda 	#"-"
.a046		20 aa a0	jsr $a0aa			jsr 	WriteDecimalBuffer
.a049						_CNTSNotNegative:
.a049		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a04b		f0 12		beq $a05f			beq 	_CNTSNotFloat
.a04d		e8		inx				inx 								; round up so we don't get too many 6.999999
.a04e		a9 01		lda #$01			lda 	#1
.a050		20 02 a2	jsr $a202			jsr 	NSMSetByte
.a053		ca		dex				dex
.a054		b5 78		lda $78,x			lda		NSExponent,x
.a056		95 79		sta $79,x			sta 	NSExponent+1,x
.a058		a9 08		lda #$08			lda 	#NSTFloat
.a05a		95 51		sta $51,x			sta 	NSStatus+1,x
.a05c		20 04 98	jsr $9804			jsr 	FloatAdd
.a05f						_CNTSNotFloat:
.a05f		20 8c a0	jsr $a08c			jsr 	MakePlusTwoString 			; do the integer part.
.a062		20 ca 98	jsr $98ca			jsr 	FloatFractionalPart 		; get the fractional part
.a065		20 7b 99	jsr $997b			jsr 	NSNormalise					; normalise , exit if zero
.a068		f0 20		beq $a08a			beq 	_CNTSExit
.a06a		a9 2e		lda #$2e			lda 	#"."
.a06c		20 aa a0	jsr $a0aa			jsr 	WriteDecimalBuffer 			; write decimal place
.a06f						_CNTSDecimal:
.a06f		ce 94 02	dec $0294			dec 	decimalPlaces 				; done all the decimals
.a072		30 16		bmi $a08a			bmi 	_CNTSExit
.a074		e8		inx				inx 								; x 10.0
.a075		a9 0a		lda #$0a			lda 	#10
.a077		20 02 a2	jsr $a202			jsr 	NSMSetByte
.a07a		a9 08		lda #$08			lda 	#NSTFloat
.a07c		95 50		sta $50,x			sta 	NSStatus,x
.a07e		ca		dex				dex
.a07f		20 49 99	jsr $9949			jsr 	FloatMultiply
.a082		20 8c a0	jsr $a08c			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a085		20 ca 98	jsr $98ca			jsr 	FloatFractionalPart 		; get the fractional part
.a088		80 e5		bra $a06f			bra 	_CNTSDecimal 				; keep going.
.a08a						_CNTSExit:
.a08a		7a		ply				ply
.a08b		60		rts				rts
.a08c						MakePlusTwoString:
.a08c		da		phx				phx
.a08d		20 e3 a1	jsr $a1e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a090		e8		inx				inx 								; access it
.a091		e8		inx				inx
.a092		20 22 99	jsr $9922			jsr 	FloatIntegerPart 			; make it an integer
.a095		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a097		20 34 97	jsr $9734			jsr 	ConvertInt32
.a09a		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a09c						_MPTSCopy:
.a09c		bd a7 04	lda $04a7,x			lda 	numberBuffer,x
.a09f		20 aa a0	jsr $a0aa			jsr 	WriteDecimalBuffer
.a0a2		e8		inx				inx
.a0a3		bd a7 04	lda $04a7,x			lda 	numberBuffer,x
.a0a6		d0 f4		bne $a09c			bne 	_MPTSCopy
.a0a8		fa		plx				plx
.a0a9		60		rts				rts
.a0aa						WriteDecimalBuffer:
.a0aa		da		phx				phx
.a0ab		ae 95 02	ldx $0295			ldx 	dbOffset
.a0ae		9d c9 04	sta $04c9,x			sta 	decimalBuffer,x
.a0b1		9e ca 04	stz $04ca,x			stz 	decimalBuffer+1,x
.a0b4		ee 95 02	inc $0295			inc 	dbOffset
.a0b7		fa		plx				plx
.a0b8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a0b9						Unary_Left:
.a0b9		fa		plx				plx
.a0ba		18		clc				clc 								; only one parameter
.a0bb		20 1e a1	jsr $a11e			jsr 	SubstringInitial 			; set up.
.a0be		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a0c0		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a0c2		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a0c4		80 25		bra $a0eb			bra 	SubstringMain
.a0c6						Unary_Right:
.a0c6		fa		plx				plx
.a0c7		18		clc				clc 								; only one parameter
.a0c8		20 1e a1	jsr $a11e			jsr 	SubstringInitial 			; set up.
.a0cb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a0cd		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a0cf		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a0d1		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a0d3		b0 02		bcs $a0d7			bcs 	_URNotUnderflow
.a0d5		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a0d7						_URNotUnderflow:
.a0d7		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a0d9		80 10		bra $a0eb			bra 	SubstringMain
.a0db						Unary_Mid:
.a0db		fa		plx				plx
.a0dc		38		sec				sec 								; two parameters
.a0dd		20 1e a1	jsr $a11e			jsr 	SubstringInitial 			; set up.
.a0e0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a0e2		f0 04		beq $a0e8			beq 	_UMError
.a0e4		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a0e6		80 03		bra $a0eb			bra 	SubstringMain
.a0e8						_UMError:
.a0e8		4c 8d a3	jmp $a38d			jmp 	ArgumentError
.a0eb						SubstringMain:
.a0eb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a0ed		d5 78		cmp $78,x			cmp 	NSExponent,x
.a0ef		b0 27		bcs $a118			bcs 	_SSMNull 					; if so, return an empty string.
.a0f1		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a0f3		f0 23		beq $a118			beq 	_SSMNull 					; return empty string.
.a0f5		18		clc				clc 								; add the offset +1 to the address and
.a0f6		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a0f8		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a0fa		85 36		sta $36				sta 	zTemp0
.a0fc		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a0fe		69 00		adc #$00			adc 	#0
.a100		85 37		sta $37				sta 	zTemp0+1
.a102						_SSMNoCarry:
.a102		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a104		20 cf b3	jsr $b3cf			jsr 	StringTempAllocate 			; allocate that many characters
.a107		5a		phy				phy 								; save Y
.a108		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a10a						_SSMCopy:
.a10a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a10c		f0 08		beq $a116			beq 	_SSMEString 				; no more to copy
.a10e		20 08 b4	jsr $b408			jsr 	StringTempWrite 			; and write it out.
.a111		c8		iny				iny
.a112		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a114		d0 f4		bne $a10a			bne 	_SSMCopy
.a116						_SSMEString:
.a116		7a		ply				ply
.a117						_SSMExit:
.a117		60		rts				rts
.a118						_SSMNull:
.a118		a9 00		lda #$00			lda 	#0
.a11a		20 cf b3	jsr $b3cf			jsr 	StringTempAllocate
.a11d		60		rts				rts
.a11e						SubstringInitial:
.a11e		da		phx				phx 								; save initial stack position
.a11f		08		php				php 								; save carry on stack indicating 2 parameters
.a120		20 58 a1	jsr $a158			jsr 	EvaluateString 				; get a string
.a123		5a		phy				phy 								; calculate length to exponent.
.a124		a0 ff		ldy #$ff			ldy 	#$FF
.a126						_SIFindLength:
.a126		c8		iny				iny
.a127		b1 36		lda ($36),y			lda 	(zTemp0),y
.a129		d0 fb		bne $a126			bne 	_SIFindLength
.a12b		98		tya				tya
.a12c		95 78		sta $78,x			sta 	NSExponent,x
.a12e		7a		ply				ply
.a12f		e8		inx				inx
.a130		20 a4 92	jsr $92a4			jsr 	CheckComma 					; comma next
.a133		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get next parameter
.a136		28		plp				plp 								; is it the last parameter ?
.a137		90 07		bcc $a140			bcc 	_SSIExit 					; if so, exit.
.a139		e8		inx				inx
.a13a		20 a4 92	jsr $92a4			jsr 	CheckComma 					; comma next
.a13d		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get last parameter
.a140						_SSIExit:
.a140		fa		plx				plx
.a141		20 9c 92	jsr $929c			jsr 	CheckRightBracket 			; check closing bracket
.a144		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a145						EvaluateValue:
.a145		48		pha				pha
.a146		20 b9 97	jsr $97b9			jsr		EvaluateExpression 			; expression
.a149		20 7c 9a	jsr $9a7c			jsr 	Dereference					; derefernce it
.a14c		68		pla				pla
.a14d		60		rts				rts
.a14e						EvaluateNumber:
.a14e		20 45 a1	jsr $a145			jsr 	EvaluateValue 				; get a value
.a151		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a153		29 10		and #$10			and 	#NSBIsString
.a155		d0 13		bne $a16a			bne 	HelperTypeError
.a157		60		rts				rts
.a158						EvaluateString:
.a158		20 45 a1	jsr $a145			jsr 	EvaluateValue 				; get a value
.a15b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a15d		29 10		and #$10			and 	#NSBIsString
.a15f		f0 09		beq $a16a			beq 	HelperTypeError
.a161						CopyAddressToTemp0:
.a161		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a163		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a165		b5 60		lda $60,x			lda 	NSMantissa1,x
.a167		85 37		sta $37				sta 	zTemp0+1
.a169		60		rts				rts
.a16a						HelperTypeError:
.a16a		4c 88 a3	jmp $a388			jmp 	TypeError
.a16d						EvaluateInteger:
.a16d		20 4e a1	jsr $a14e			jsr 	EvaluateNumber
.a170		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a172		d0 09		bne $a17d			bne 	HelperValueError 			; if not, it's a float.
.a174		60		rts				rts
.a175						EvaluateUnsignedInteger:
.a175		20 6d a1	jsr $a16d			jsr 	EvaluateInteger 			; check integer is +ve
.a178		b5 50		lda $50,x			lda 	NSStatus,x
.a17a		30 01		bmi $a17d			bmi 	HelperValueError
.a17c		60		rts				rts
.a17d						HelperValueError:
.a17d		4c 8d a3	jmp $a38d			jmp 	ArgumentError
.a180						Evaluate16BitInteger:
.a180		20 75 a1	jsr $a175			jsr	 	EvaluateUnsignedInteger		; get integer
.a183		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a185		15 68		ora $68,x			ora 	NSMantissa2,x
.a187		d0 f4		bne $a17d			bne 	HelperValueError
.a189		60		rts				rts
.a18a						Evaluate16BitIntegerSigned:
.a18a		20 6d a1	jsr $a16d			jsr	 	EvaluateInteger				; get integer
.a18d		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a18f		15 68		ora $68,x			ora 	NSMantissa2,x
.a191		d0 ea		bne $a17d			bne 	HelperValueError
.a193		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a195		10 03		bpl $a19a			bpl 	_EISNotSigned
.a197		20 c9 a1	jsr $a1c9			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a19a						_EISNotSigned:
.a19a		60		rts				rts
.a19b						Evaluate8BitInteger:
.a19b		20 75 a1	jsr $a175			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a19e		d0 dd		bne $a17d			bne 	HelperValueError
.a1a0		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a1a2		15 68		ora $68,x			ora 	NSMantissa2,x
.a1a4		15 60		ora $60,x			ora 	NSMantissa1,x
.a1a6		d0 d5		bne $a17d			bne 	HelperValueError
.a1a8		b5 58		lda $58,x			lda 	NSMantissa0,x
.a1aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a1ab						Multiply8x8:
.a1ab		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a1ac		85 36		sta $36			  	sta 	zTemp0
.a1ae		86 37		stx $37				stx 	zTemp0+1
.a1b0		a9 00		lda #$00			lda 	#0
.a1b2		a2 08		ldx #$08			ldx 	#8
.a1b4						_M88Loop:
.a1b4		90 03		bcc $a1b9			bcc 	_M88NoAdd
.a1b6		18		clc				clc
.a1b7		65 37		adc $37				adc 	zTemp0+1
.a1b9						_M88NoAdd:
.a1b9		6a		ror a				ror 	a
.a1ba		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a1bc		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a1bd		d0 f5		bne $a1b4			bne 	_M88Loop
.a1bf		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a1c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a1c2						NSMNegate:
.a1c2		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a1c4		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a1c6		95 50		sta $50,x			sta 	NSStatus,x
.a1c8		60		rts				rts
.a1c9						NSMNegateMantissa:
.a1c9		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a1ca		a9 00		lda #$00			lda 	#0
.a1cc		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a1ce		95 58		sta $58,x			sta 	NSMantissa0,x
.a1d0		a9 00		lda #$00			lda 	#0
.a1d2		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a1d4		95 60		sta $60,x			sta 	NSMantissa1,x
.a1d6		a9 00		lda #$00			lda 	#0
.a1d8		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a1da		95 68		sta $68,x			sta 	NSMantissa2,x
.a1dc		a9 00		lda #$00			lda 	#0
.a1de		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a1e0		95 70		sta $70,x			sta 	NSMantissa3,x
.a1e2		60		rts				rts
.a1e3						NSMShiftUpTwo:
.a1e3		b5 58		lda $58,x			lda 	NSMantissa0,x
.a1e5		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1e7		b5 60		lda $60,x			lda 	NSMantissa1,x
.a1e9		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a1eb		b5 68		lda $68,x			lda 	NSMantissa2,x
.a1ed		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a1ef		b5 70		lda $70,x			lda 	NSMantissa3,x
.a1f1		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a1f3		b5 78		lda $78,x			lda 	NSExponent,x
.a1f5		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a1f7		b5 50		lda $50,x			lda 	NSStatus,x
.a1f9		95 52		sta $52,x			sta 	NSStatus+2,x
.a1fb		60		rts				rts
.a1fc						NSMSetZeroMantissaOnly:
.a1fc		a9 00		lda #$00			lda 	#0
.a1fe		80 06		bra $a206			bra 	NSMSetMantissa
.a200						NSMSetZero:
.a200		a9 00		lda #$00			lda 	#0
.a202						NSMSetByte:
.a202		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a204		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a206						NSMSetMantissa:
.a206		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a208		74 60		stz $60,x			stz 	NSMantissa1,x
.a20a		74 68		stz $68,x			stz 	NSMantissa2,x
.a20c		74 70		stz $70,x			stz 	NSMantissa3,x
.a20e		60		rts				rts
.a20f						NSMShiftLeft:
.a20f		18		clc				clc
.a210						NSMRotateLeft:
.a210		36 58		rol $58,x			rol 	NSMantissa0,x
.a212		36 60		rol $60,x			rol		NSMantissa1,x
.a214		36 68		rol $68,x			rol		NSMantissa2,x
.a216		36 70		rol $70,x			rol		NSMantissa3,x
.a218		60		rts				rts
.a219						NSMShiftRight:
.a219		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a21b		76 68		ror $68,x			ror		NSMantissa2,x
.a21d		76 60		ror $60,x			ror		NSMantissa1,x
.a21f		76 58		ror $58,x			ror		NSMantissa0,x
.a221		60		rts				rts
.a222						NSMIsZero:
.a222		b5 70		lda $70,x			lda 	NSMantissa3,x
.a224		15 68		ora $68,x			ora		NSMantissa2,x
.a226		15 60		ora $60,x			ora		NSMantissa1,x
.a228		15 58		ora $58,x			ora		NSMantissa0,x
.a22a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a22b						TickHandler:
.a22b		5a		phy				phy 								; need to preserve Y
.a22c		20 99 80	jsr $8099			jsr 	SNDUpdate 					; update sound
.a22f		7a		ply				ply
.a230		60		rts				rts
.04e2						LastTick:
>04e2								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a231						Assemble_ora:
.a231		20 56 81	jsr $8156		jsr	AssembleGroup1
>a234		01					.byte $01
.a235						Assemble_and:
.a235		20 56 81	jsr $8156		jsr	AssembleGroup1
>a238		21					.byte $21
.a239						Assemble_eor:
.a239		20 56 81	jsr $8156		jsr	AssembleGroup1
>a23c		41					.byte $41
.a23d						Assemble_adc:
.a23d		20 56 81	jsr $8156		jsr	AssembleGroup1
>a240		61					.byte $61
.a241						Assemble_sta:
.a241		20 56 81	jsr $8156		jsr	AssembleGroup1
>a244		81					.byte $81
.a245						Assemble_lda:
.a245		20 56 81	jsr $8156		jsr	AssembleGroup1
>a248		a1					.byte $a1
.a249						Assemble_cmp:
.a249		20 56 81	jsr $8156		jsr	AssembleGroup1
>a24c		c1					.byte $c1
.a24d						Assemble_sbc:
.a24d		20 56 81	jsr $8156		jsr	AssembleGroup1
>a250		e1					.byte $e1
.a251						Assemble_asl:
.a251		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a254		02					.byte $02
>a255		75					.byte $75
.a256						Assemble_rol:
.a256		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a259		22					.byte $22
>a25a		75					.byte $75
.a25b						Assemble_lsr:
.a25b		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a25e		42					.byte $42
>a25f		75					.byte $75
.a260						Assemble_ror:
.a260		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a263		62					.byte $62
>a264		75					.byte $75
.a265						Assemble_stx:
.a265		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a268		82					.byte $82
>a269		50					.byte $50
.a26a						Assemble_ldx:
.a26a		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a26d		a2					.byte $a2
>a26e		d0					.byte $d0
.a26f						Assemble_dec:
.a26f		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a272		c2					.byte $c2
>a273		55					.byte $55
.a274						Assemble_inc:
.a274		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a277		e2					.byte $e2
>a278		55					.byte $55
.a279						Assemble_stz:
.a279		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a27c		60					.byte $60
>a27d		44					.byte $44
.a27e						Assemble_bit:
.a27e		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a281		20					.byte $20
>a282		55					.byte $55
.a283						Assemble_sty:
.a283		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a286		80					.byte $80
>a287		54					.byte $54
.a288						Assemble_ldy:
.a288		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a28b		a0					.byte $a0
>a28c		d5					.byte $d5
.a28d						Assemble_cpy:
.a28d		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a290		c0					.byte $c0
>a291		d4					.byte $d4
.a292						Assemble_cpx:
.a292		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a295		e0					.byte $e0
>a296		d0					.byte $d0
.a297						Assemble_tsb:
.a297		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a29a		00					.byte $00
>a29b		50					.byte $50
.a29c						Assemble_trb:
.a29c		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a29f		10					.byte $10
>a2a0		50					.byte $50
.a2a1						Assemble_jsr:
.a2a1		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a2a4		14					.byte $14
>a2a5		10					.byte $10
.a2a6						Assemble_jmp:
.a2a6		20 5d 81	jsr $815d		jsr	AssembleGroup2
>a2a9		40					.byte $40
>a2aa		10					.byte $10
.a2ab						Assemble_bpl:
.a2ab		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2ae		10					.byte $10
.a2af						Assemble_bmi:
.a2af		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2b2		30					.byte $30
.a2b3						Assemble_bvc:
.a2b3		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2b6		50					.byte $50
.a2b7						Assemble_bvs:
.a2b7		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2ba		70					.byte $70
.a2bb						Assemble_bcc:
.a2bb		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2be		90					.byte $90
.a2bf						Assemble_bcs:
.a2bf		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2c2		b0					.byte $b0
.a2c3						Assemble_bne:
.a2c3		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2c6		d0					.byte $d0
.a2c7						Assemble_beq:
.a2c7		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2ca		f0					.byte $f0
.a2cb						Assemble_bra:
.a2cb		20 ae 81	jsr $81ae		jsr	AssembleGroup3
>a2ce		80					.byte $80
.a2cf						Assemble_brk:
.a2cf		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2d2		00					.byte $00
.a2d3						Assemble_php:
.a2d3		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2d6		08					.byte $08
.a2d7						Assemble_clc:
.a2d7		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2da		18					.byte $18
.a2db						Assemble_plp:
.a2db		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2de		28					.byte $28
.a2df						Assemble_sec:
.a2df		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2e2		38					.byte $38
.a2e3						Assemble_rti:
.a2e3		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2e6		40					.byte $40
.a2e7						Assemble_pha:
.a2e7		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2ea		48					.byte $48
.a2eb						Assemble_cli:
.a2eb		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2ee		58					.byte $58
.a2ef						Assemble_phy:
.a2ef		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2f2		5a					.byte $5a
.a2f3						Assemble_rts:
.a2f3		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2f6		60					.byte $60
.a2f7						Assemble_pla:
.a2f7		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2fa		68					.byte $68
.a2fb						Assemble_sei:
.a2fb		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a2fe		78					.byte $78
.a2ff						Assemble_ply:
.a2ff		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a302		7a					.byte $7a
.a303						Assemble_dey:
.a303		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a306		88					.byte $88
.a307						Assemble_txa:
.a307		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a30a		8a					.byte $8a
.a30b						Assemble_tya:
.a30b		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a30e		98					.byte $98
.a30f						Assemble_txs:
.a30f		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a312		9a					.byte $9a
.a313						Assemble_tay:
.a313		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a316		a8					.byte $a8
.a317						Assemble_tax:
.a317		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a31a		aa					.byte $aa
.a31b						Assemble_clv:
.a31b		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a31e		b8					.byte $b8
.a31f						Assemble_tsx:
.a31f		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a322		ba					.byte $ba
.a323						Assemble_iny:
.a323		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a326		c8					.byte $c8
.a327						Assemble_dex:
.a327		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a32a		ca					.byte $ca
.a32b						Assemble_cld:
.a32b		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a32e		d8					.byte $d8
.a32f						Assemble_phx:
.a32f		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a332		da					.byte $da
.a333						Assemble_stp:
.a333		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a336		db					.byte $db
.a337						Assemble_inx:
.a337		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a33a		e8					.byte $e8
.a33b						Assemble_nop:
.a33b		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a33e		ea					.byte $ea
.a33f						Assemble_sed:
.a33f		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a342		f8					.byte $f8
.a343						Assemble_plx:
.a343		20 e2 81	jsr $81e2		jsr	AssembleGroup4
>a346		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a347						DecimalScalarTable:
>a347		66 66 66 66				.dword $66666666 ; 0.1
>a34b		de					.byte $de
>a34c		1f 85 eb 51				.dword $51eb851f ; 0.01
>a350		db					.byte $db
>a351		4c 37 89 41				.dword $4189374c ; 0.001
>a355		d8					.byte $d8
>a356		ac 8b db 68				.dword $68db8bac ; 0.0001
>a35a		d4					.byte $d4
>a35b		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a35f		d1					.byte $d1
>a360		83 de 1b 43				.dword $431bde83 ; 1e-06
>a364		ce					.byte $ce
>a365		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a369		ca					.byte $ca
>a36a		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a36e		c7					.byte $c7
>a36f		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a373		c4					.byte $c4
>a374		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a378		c0					.byte $c0
>a379		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a37d		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a37e						SyntaxError:
.a37e		a9 02		lda #$02		lda	#2
.a380		4c b5 92	jmp $92b5		jmp	ErrorHandler
.a383						RangeError:
.a383		a9 04		lda #$04		lda	#4
.a385		4c b5 92	jmp $92b5		jmp	ErrorHandler
.a388						TypeError:
.a388		a9 05		lda #$05		lda	#5
.a38a		4c b5 92	jmp $92b5		jmp	ErrorHandler
.a38d						ArgumentError:
.a38d		a9 07		lda #$07		lda	#7
.a38f		4c b5 92	jmp $92b5		jmp	ErrorHandler
.a392						NotDoneError:
.a392		a9 0c		lda #$0c		lda	#12
.a394		4c b5 92	jmp $92b5		jmp	ErrorHandler
.a397						ErrorText:
>a397		42 72 65 61 6b 00			.text	"Break",0
>a39d		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a3a5		72 72 6f 72 00
>a3aa		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a3b2		20 62 79 20 7a 65 72 6f 00
>a3bb		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a3c3		61 6e 67 65 00
>a3c8		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a3d0		6d 61 74 63 68 00
>a3d6		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a3de		65 6d 6f 72 79 00
>a3e4		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a3ec		61 72 67 75 6d 65 6e 74 00
>a3f5		53 74 6f 70 00				.text	"Stop",0
>a3fa		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a402		6f 6f 20 6c 6f 6e 67 00
>a40a		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a412		6e 20 66 61 69 6c 65 64 00
>a41b		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a423		61 74 61 00
>a427		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a42f		65 6e 74 65 64 00
>a435		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a43d		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a449		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a451		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a45e		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a466		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a473		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a47b		68 6f 75 74 20 57 68 69 6c 65 00
>a486		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a48e		68 6f 75 74 20 46 6f 72 00
>a497		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a49f		61 63 6b 20 66 75 6c 6c 00
>a4a8		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a4b0		75 63 74 75 72 65 00
>a4b7		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a4bf		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a4cc		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a4d4		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a4e2		41 72 72 61 79 20 73 69			.text	"Array size",0
>a4ea		7a 65 00
>a4ed		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a4f5		79 20 69 6e 64 65 78 00
>a4fd		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a505		74 20 64 65 63 6c 61 72 65 64 00
>a510		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a518		20 66 6f 75 6e 64 00
>a51f		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a527		65 72 72 6f 72 00
>a52d		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a535		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dd54		09 09 30 35 2f 30 31 2f			.text 9,9,"05/01/23 23"
>dd5c		32 33 20 32 33

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a53b						RectangleCommand:
.a53b		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a53d		80 02		bra $a541			bra 	ShapeDrawCmd
.a53f						CircleCommand:
.a53f		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a541						ShapeDrawCmd:
.a541		20 cb a5	jsr $a5cb			jsr 	RunGraphicsCommand
.a544						ShapeDraw:
.a544		0d e4 04	ora $04e4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a547		4c bf a5	jmp $a5bf			jmp 	ExecuteGraphicCommand	 	; and complete
.a54a						SpriteCommand:
.a54a		a2 00		ldx #$00			ldx 	#0
.a54c		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get image number.
.a54f		5a		phy				phy
.a550		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a552		a6 58		ldx $58				ldx 	NSMantissa0
.a554		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a556		b0 0d		bcs $a565			bcs 	_SCRange
.a558		a0 ff		ldy #$ff			ldy 	#255
.a55a		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a55d		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a55f		7a		ply				ply
.a560		20 cb a5	jsr $a5cb			jsr 	RunGraphicsCommand
.a563		80 5a		bra $a5bf			bra 	ExecuteGraphicCommand
.a565						_SCRange:
.a565		4c 83 a3	jmp $a383			jmp 	RangeError
.a568						ImageCommand:
.a568		a2 00		ldx #$00			ldx 	#0
.a56a		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get image number.
.a56d		20 cb a5	jsr $a5cb			jsr 	RunGraphicsCommand
.a570						ImageRunDraw:
.a570		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a572		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a575		ad ea 04	lda $04ea			lda 	gxDrawScale
.a578		0a		asl a				asl 	a
.a579		0a		asl a				asl 	a
.a57a		0a		asl a				asl 	a
.a57b		a8		tay				tay
.a57c		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a57e		a6 58		ldx $58				ldx 	NSMantissa0
.a580		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a583		60		rts				rts
.a584						TextCommand:
.a584		a2 00		ldx #$00			ldx 	#0
.a586		20 58 a1	jsr $a158			jsr 	EvaluateString 				; get text
.a589		20 cb a5	jsr $a5cb			jsr 	RunGraphicsCommand
.a58c						TextRunDraw:
.a58c		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a58e		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a591		a0 00		ldy #$00			ldy 	#0
.a593						_IRDLoop:
.a593		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a595		85 37		sta $37				sta 	zTemp0+1
.a597		a5 58		lda $58				lda 	NSMantissa0
.a599		85 36		sta $36				sta 	zTemp0
.a59b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a59d		f0 13		beq $a5b2			beq 	_IRDExit
.a59f		5a		phy				phy									; save string pos
.a5a0		48		pha				pha 								; save char
.a5a1		ad ea 04	lda $04ea			lda 	gxDrawScale 				; get scale
.a5a4		0a		asl a				asl 	a
.a5a5		0a		asl a				asl 	a
.a5a6		0a		asl a				asl 	a
.a5a7		a8		tay				tay
.a5a8		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a5aa		fa		plx				plx 								; char to draw
.a5ab		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5ae		7a		ply				ply 								; restore string pos
.a5af		c8		iny				iny
.a5b0		90 e1		bcc $a593			bcc 	_IRDLoop 					; go back if no error.
.a5b2						_IRDExit:
.a5b2		60		rts				rts
.a5b3						PlotCommand:
.a5b3		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a5b5		20 cb a5	jsr $a5cb			jsr 	RunGraphicsCommand
.a5b8		80 05		bra $a5bf			bra 	ExecuteGraphicCommand
.a5ba						LineCommand:
.a5ba		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a5bc		20 cb a5	jsr $a5cb			jsr 	RunGraphicsCommand
.a5bf						ExecuteGraphicCommand:
.a5bf		0d e3 04	ora $04e3			ora 	gxCommandID 				; make a full command
.a5c2		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.a5c5		b0 01		bcs $a5c8			bcs 	_EGCError
.a5c7		60		rts				rts
.a5c8						_EGCError:
.a5c8		4c 7e a3	jmp $a37e			jmp 	SyntaxError
.a5cb						RunGraphicsCommand:
.a5cb		8d e3 04	sta $04e3			sta 	gxCommandID					; save TODO graphics command.
.a5ce		68		pla				pla 								; pop handler address
.a5cf		fa		plx				plx
.a5d0		1a		inc a				inc 	a
.a5d1		d0 01		bne $a5d4			bne 	_RGINoCarry
.a5d3		e8		inx				inx
.a5d4						_RGINoCarry:
.a5d4		8d e8 04	sta $04e8			sta 	gxHandler
.a5d7		8e e9 04	stx $04e9			stx 	gxHandler+1
.a5da						_RGICommandLoop:
.a5da		b1 30		lda ($30),y			lda 	(codePtr),y
.a5dc		c8		iny				iny
.a5dd		c9 d9		cmp #$d9			cmp 	#KWD_TO						; is it TO x,y
.a5df		f0 53		beq $a634			beq 	_RGI_To
.a5e1		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a5e3		f0 55		beq $a63a			beq 	_RGI_Here
.a5e5		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a5e7		f0 3d		beq $a626			beq 	_RGI_Exit
.a5e9		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a5eb		f0 39		beq $a626			beq 	_RGI_Exit
.a5ed		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a5ef		f0 3e		beq $a62f			beq 	_RGI_Frame
.a5f1		c9 d5		cmp #$d5			cmp 	#KWD_SOLID
.a5f3		f0 33		beq $a628			beq 	_RGI_Solid
.a5f5		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a5f7		f0 4b		beq $a644			beq 	_RGI_By
.a5f9		c9 bd		cmp #$bd			cmp 	#KWD_FROM 					; from
.a5fb		f0 17		beq $a614			beq 	_RGI_Move2
.a5fd		c9 ba		cmp #$ba			cmp 	#KWD_DIM 					; dim (set scale)
.a5ff		f0 62		beq $a663			beq 	_RGI_Dim
.a601		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a603		f0 74		beq $a679			beq 	_RGI_Colour
.a605		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a607		f0 70		beq $a679			beq 	_RGI_Colour
.a609		ae e3 04	ldx $04e3			ldx 	gxCommandID
.a60c		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a60e		d0 03		bne $a613			bne 	_RGI_Move 					; move
.a610		4c a1 a6	jmp $a6a1			jmp		_RGI_SpriteInstructions
.a613						_RGI_Move:
.a613		88		dey				dey 								; unpick get.
.a614						_RGI_Move2:
.a614		20 c7 a6	jsr $a6c7			jsr 	GCGetCoordinatePair 		; move to here
.a617		20 ee a6	jsr $a6ee			jsr 	GCCopyPairToStore 			; save
.a61a		5a		phy				phy
.a61b		20 e4 a6	jsr $a6e4			jsr 	GCLoadAXY 					; load in
.a61e		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a620		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a623		7a		ply				ply
.a624		80 b4		bra $a5da			bra 	_RGICommandLoop 			; and go round
.a626						_RGI_Exit:
.a626		88		dey				dey 								; unpick : / EOL
.a627		60		rts				rts
.a628						_RGI_Solid:
.a628		a9 02		lda #$02			lda 	#2
.a62a		8d e4 04	sta $04e4			sta 	gxFillSolid
.a62d		80 ab		bra $a5da			bra 	_RGICommandLoop
.a62f						_RGI_Frame:
.a62f		9c e4 04	stz $04e4			stz 	gxFillSolid
.a632		80 a6		bra $a5da			bra 	_RGICommandLoop
.a634						_RGI_To:
.a634		20 c7 a6	jsr $a6c7			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a637		20 ee a6	jsr $a6ee			jsr 	GCCopyPairToStore
.a63a						_RGI_Here:
.a63a		5a		phy				phy
.a63b		20 e4 a6	jsr $a6e4			jsr 	GCLoadAXY 					; load it into AXY
.a63e		20 9e a6	jsr $a69e			jsr 	_RGICallHandler 			; go do whatever it is.
.a641		7a		ply				ply
.a642		80 96		bra $a5da			bra 	_RGICommandLoop 			; and go round
.a644						_RGI_By:
.a644		20 d4 a6	jsr $a6d4			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a647		18		clc				clc
.a648		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a64a		6d e5 04	adc $04e5			adc 	gxXPos
.a64d		8d e5 04	sta $04e5			sta 	gxXPos
.a650		a5 61		lda $61				lda 	NSMantissa1+1
.a652		6d e6 04	adc $04e6			adc 	gxXPos+1
.a655		8d e6 04	sta $04e6			sta 	gxXPos+1
.a658		a5 5a		lda $5a				lda 	NSMantissa0+2
.a65a		18		clc				clc
.a65b		6d e7 04	adc $04e7			adc 	gxYPos
.a65e		8d e7 04	sta $04e7			sta 	gxYPos
.a661		80 d7		bra $a63a			bra 	_RGI_Here
.a663						_RGI_Dim:
.a663		a2 01		ldx #$01			ldx	 	#1
.a665		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger
.a668		a5 59		lda $59				lda 	NSMantissa0+1
.a66a		c9 00		cmp #$00			cmp 	#0
.a66c		f0 2d		beq $a69b			beq 	_RGIRange
.a66e		c9 09		cmp #$09			cmp 	#8+1
.a670		b0 29		bcs $a69b			bcs		_RGIRange
.a672		3a		dec a				dec 	a
.a673		8d ea 04	sta $04ea			sta 	gxDrawScale
.a676		4c da a5	jmp $a5da			jmp 	_RGICommandLoop
.a679						_RGI_Colour:
.a679		a2 01		ldx #$01			ldx 	#1 							; colour
.a67b		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger
.a67e		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a680		20 00 a2	jsr $a200			jsr 	NSMSetZero
.a683		b1 30		lda ($30),y			lda 	(codePtr),y
.a685		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a687		d0 04		bne $a68d			bne 	_RGICDefaultMode
.a689		c8		iny				iny
.a68a		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger
.a68d						_RGICDefaultMode:
.a68d		5a		phy				phy
.a68e		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a690		a6 59		ldx $59				ldx 	NSMantissa0+1
.a692		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a694		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a697		7a		ply				ply
.a698		4c da a5	jmp $a5da			jmp 	_RGICommandLoop 			; and go round
.a69b						_RGIRange:
.a69b		4c 83 a3	jmp $a383			jmp 	RangeError
.a69e						_RGICallHandler:
.a69e		6c e8 04	jmp ($04e8)			jmp 	(gxHandler)
.a6a1						_RGI_SpriteInstructions:
.a6a1		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a6a3		f0 07		beq $a6ac			beq 	_RGISpriteOff
.a6a5		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a6a7		f0 13		beq $a6bc			beq 	_RGISetImage
.a6a9		4c 13 a6	jmp $a613			jmp 	_RGI_Move
.a6ac						_RGISpriteOff:
.a6ac		5a		phy				phy
.a6ad		a0 01		ldy #$01			ldy 	#1
.a6af		a2 00		ldx #$00			ldx 	#0
.a6b1						_RGIDoCommandLoop:
.a6b1		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a6b3		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a6b6		7a		ply				ply
.a6b7		b0 e2		bcs $a69b			bcs 	_RGIRange
.a6b9		4c da a5	jmp $a5da			jmp 	_RGICommandLoop
.a6bc						_RGISetImage:
.a6bc		a2 01		ldx #$01			ldx 	#1
.a6be		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger
.a6c1		5a		phy				phy
.a6c2		aa		tax				tax
.a6c3		a0 00		ldy #$00			ldy 	#0
.a6c5		80 ea		bra $a6b1			bra 	_RGIDoCommandLoop
.a6c7						GCGetCoordinatePair:
.a6c7		a2 01		ldx #$01			ldx 	#1
.a6c9		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger
.a6cc		20 a4 92	jsr $92a4			jsr 	CheckComma
.a6cf		e8		inx				inx
.a6d0		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger
.a6d3		60		rts				rts
.a6d4						GCSignedCoordinatePair:
.a6d4		a2 01		ldx #$01			ldx 	#1
.a6d6		20 8a a1	jsr $a18a			jsr 	Evaluate16BitIntegerSigned
.a6d9		20 a4 92	jsr $92a4			jsr 	CheckComma
.a6dc		e8		inx				inx
.a6dd		20 8a a1	jsr $a18a			jsr 	Evaluate16BitIntegerSigned
.a6e0		60		rts				rts
.a6e1						_GCCPRange:
.a6e1		4c 83 a3	jmp $a383			jmp 	RangeError
.a6e4						GCLoadAXY:
.a6e4		ad e6 04	lda $04e6			lda 	gxXPos+1
.a6e7		ae e5 04	ldx $04e5			ldx 	gxXPos
.a6ea		ac e7 04	ldy $04e7			ldy 	gxYPos
.a6ed		60		rts				rts
.a6ee						GCCopyPairToStore:
.a6ee		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a6f0		8d e5 04	sta $04e5			sta 	gxXPos
.a6f3		a5 61		lda $61				lda 	NSMantissa1+1
.a6f5		8d e6 04	sta $04e6			sta 	gxXPos+1
.a6f8		a5 5a		lda $5a				lda 	NSMantissa0+2
.a6fa		8d e7 04	sta $04e7			sta 	gxYPos
.a6fd		60		rts				rts
.04e3						gxCommandID:
>04e3								.fill 	1
.04e4						gxFillSolid:
>04e4								.fill 	1
.04e5						gxXPos:
>04e5								.fill 	2
.04e7						gxYPos:
>04e7								.fill 	1
.04e8						gxHandler:
>04e8								.fill 	2
.04ea						gxDrawScale:
>04ea								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a6fe						BitmapCtrl:
.a6fe		b1 30		lda ($30),y			lda 	(codePtr),y
.a700		c8		iny				iny
.a701		a2 01		ldx #$01			ldx 	#1
.a703		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a705		f0 11		beq $a718			beq 	BitmapSwitch
.a707		ca		dex				dex
.a708		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a70a		f0 0c		beq $a718			beq 	BitmapSwitch
.a70c		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get the colour
.a70f		5a		phy				phy
.a710		aa		tax				tax
.a711		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a713		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a716		7a		ply				ply
.a717		60		rts				rts
.a718						BitmapSwitch:
.a718		5a		phy				phy
.a719		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a71b		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a71d		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a720		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a722		a0 00		ldy #$00			ldy 	#0
.a724		a2 ff		ldx #$ff			ldx 	#$FF
.a726		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a729		9c e4 04	stz $04e4			stz 	gxFillSolid
.a72c		9c e5 04	stz $04e5			stz 	gxXPos
.a72f		9c e6 04	stz $04e6			stz 	gxXPos+1
.a732		9c e7 04	stz $04e7			stz 	gxYPos
.a735		9c ea 04	stz $04ea			stz 	gxDrawScale
.a738		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a73a		a2 00		ldx #$00			ldx 	#0
.a73c		a0 00		ldy #$00			ldy 	#0
.a73e		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a741		7a		ply				ply
.a742		60		rts				rts
.a743						SpritesCtrl:
.a743		b1 30		lda ($30),y			lda 	(codePtr),y
.a745		c8		iny				iny
.a746		a2 01		ldx #$01			ldx 	#1
.a748		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a74a		f0 08		beq $a754			beq 	SpriteSwitch
.a74c		ca		dex				dex
.a74d		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a74f		f0 03		beq $a754			beq 	SpriteSwitch
.a751		4c 7e a3	jmp $a37e			jmp 	SyntaxError
.a754						SpriteSwitch:
.a754		5a		phy				phy
.a755		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a757		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a759		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a75c		7a		ply				ply
.a75d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a75e						GfxCommand:
.a75e		a2 00		ldx #$00			ldx 	#0
.a760		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; command
.a763		20 a4 92	jsr $92a4			jsr 	CheckComma
.a766		e8		inx				inx
.a767		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger 		; X
.a76a		20 a4 92	jsr $92a4			jsr 	CheckComma
.a76d		e8		inx				inx
.a76e		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; Y
.a771		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a773		4a		lsr a				lsr 	a
.a774		d0 12		bne $a788			bne 	_GfxError
.a776		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a778		b0 0e		bcs $a788			bcs 	_GfxError 					; bit 7 should have been zero
.a77a		5a		phy				phy 								; save pos
.a77b		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a77d		a6 59		ldx $59				ldx 	NSMantissa0+1
.a77f		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a781		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a784		b0 02		bcs $a788			bcs 	_GfxError
.a786		7a		ply				ply 								; restore pos and exit.
.a787		60		rts				rts
.a788						_GfxError:
.a788		4c 83 a3	jmp $a383			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a78b						UnaryHit:
.a78b		fa		plx				plx
.a78c		a9 36		lda #$36			lda 	#zTemp0
.a78e		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a791		20 a4 92	jsr $92a4			jsr 	CheckComma
.a794		e8		inx				inx
.a795		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a798		20 9c 92	jsr $929c			jsr		CheckRightBracket
.a79b		ca		dex				dex 								; fix back up again.
.a79c		da		phx				phx 								; save X/Y
.a79d		5a		phy				phy
.a79e		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a7a0		b5 58		lda $58,x			lda 	NSMantissa0,x
.a7a2		aa		tax				tax
.a7a3		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a7a5		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; calculate result
.a7a8		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a7a9		7a		ply				ply 								; restore XY
.a7aa		fa		plx				plx
.a7ab		20 02 a2	jsr $a202			jsr 	NSMSetByte 					; return the hit result
.a7ae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a7af						PaletteCommand:
.a7af		a2 00		ldx #$00			ldx 	#0
.a7b1		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; colour
.a7b4		20 a4 92	jsr $92a4			jsr 	CheckComma
.a7b7		e8		inx				inx
.a7b8		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger 		; r
.a7bb		20 a4 92	jsr $92a4			jsr 	CheckComma
.a7be		e8		inx				inx
.a7bf		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; g
.a7c2		20 a4 92	jsr $92a4			jsr 	CheckComma
.a7c5		e8		inx				inx
.a7c6		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; b
.a7c9		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a7cb		85 36		sta $36				sta 	zTemp0
.a7cd		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a7cf		85 37		sta $37				sta 	zTemp0+1
.a7d1		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a7d3		26 37		rol $37				rol	 	zTemp0+1
.a7d5		06 36		asl $36				asl 	zTemp0
.a7d7		26 37		rol $37				rol	 	zTemp0+1
.a7d9		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a7db		85 01		sta $01				sta 	1
.a7dd		5a		phy				phy
.a7de		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a7e0		92 36		sta ($36)			sta 	(zTemp0)
.a7e2		a0 01		ldy #$01			ldy 	#1
.a7e4		a5 5a		lda $5a				lda 	NSMantissa0+2
.a7e6		91 36		sta ($36),y			sta 	(zTemp0),y
.a7e8		a5 59		lda $59				lda 	NSMantissa0+1
.a7ea		c8		iny				iny
.a7eb		91 36		sta ($36),y			sta 	(zTemp0),y
.a7ed		7a		ply				ply
.a7ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a7ef						XLoadCommand:
.a7ef		20 0d 8d	jsr $8d0d			jsr 	NewProgram
.a7f2		20 c5 83	jsr $83c5			jsr 	BackloadProgram
.a7f5		4c 84 84	jmp $8484			jmp 	WarmStart
.a7f8						XGoCommand:
.a7f8		20 0d 8d	jsr $8d0d			jsr 	NewProgram
.a7fb		20 c5 83	jsr $83c5			jsr 	BackloadProgram
.a7fe		4c 8b 8e	jmp $8e8b			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a801						UnaryEvent:
.a801		fa		plx				plx
.a802		20 9b a8	jsr $a89b			jsr 	TimerToStackX 				; timer in +0
.a805		e8		inx				inx  								; put reference into +1
.a806		20 03 9c	jsr $9c03			jsr 	EvaluateTerm
.a809		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a80b		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a80d		d0 4c		bne $a85b			bne 	_UEType
.a80f		e8		inx				inx 								; put the step in +2
.a810		20 a4 92	jsr $92a4			jsr 	CheckComma
.a813		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger
.a816		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.a819		ca		dex				dex
.a81a		ca		dex				dex
.a81b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a81d		85 36		sta $36				sta 	zTemp0
.a81f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a821		85 37		sta $37				sta 	zTemp0+1
.a823		5a		phy				phy
.a824		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a826		b1 36		lda ($36),y			lda 	(zTemp0),y
.a828		30 2d		bmi $a857			bmi 	_UEFalse 					; exit if signed.
.a82a		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a82c		b5 58		lda $58,x			lda 	NSMantissa0,x
.a82e		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a830		c8		iny				iny
.a831		b5 60		lda $60,x			lda 	NSMantissa1,x
.a833		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a835		c8		iny				iny
.a836		b5 68		lda $68,x			lda 	NSMantissa2,x
.a838		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a83a		90 1b		bcc $a857			bcc 	_UEFalse 					; no, return FALSE.
.a83c		18		clc				clc
.a83d		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a83f		b5 58		lda $58,x			lda 	NSMantissa0,x
.a841		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a843		91 36		sta ($36),y			sta 	(zTemp0),y
.a845		c8		iny				iny
.a846		b5 60		lda $60,x			lda 	NSMantissa1,x
.a848		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a84a		91 36		sta ($36),y			sta 	(zTemp0),y
.a84c		c8		iny				iny
.a84d		b5 68		lda $68,x			lda 	NSMantissa2,x
.a84f		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a851		91 36		sta ($36),y			sta 	(zTemp0),y
.a853		7a		ply				ply
.a854		4c 22 93	jmp $9322			jmp 	ReturnTrue
.a857						_UEFalse:
.a857		7a		ply				ply 								; restore Y
.a858		4c 2d 93	jmp $932d			jmp 	ReturnFalse 				; and return False
.a85b						_UEType:
.a85b		4c 88 a3	jmp $a388			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a85e						UnaryJoyX:
.a85e		18		clc				clc
.a85f		80 01		bra $a862			bra 	JoyMain
.a861						UnaryJoyY:
.a861		38		sec				sec
.a862						JoyMain:
.a862		fa		plx				plx 								; get pos
.a863		08		php				php 								; save carry (set for Y)
.a864		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a867		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.a86a		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a86d		28		plp				plp
.a86e		b0 02		bcs $a872			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a870		4a		lsr a				lsr 	a
.a871		4a		lsr a				lsr 	a
.a872						_JMNoShift:
.a872		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a873		b0 07		bcs $a87c			bcs 	JMIsLeft
.a875		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a876		b0 07		bcs $a87f			bcs 	JMIsRight
.a878		20 00 a2	jsr $a200			jsr 	NSMSetZero 					; zero result
.a87b		60		rts				rts
.a87c						JMIsLeft:
.a87c		4c 22 93	jmp $9322			jmp 	ReturnTrue
.a87f						JMIsRight:
.a87f		a9 01		lda #$01			lda 	#1
.a881		20 02 a2	jsr $a202			jsr 	NSMSetByte
.a884		60		rts				rts
.a885						UnaryJoyB:
.a885		fa		plx				plx 								; get pos
.a886		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a889		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.a88c		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a88f		29 10		and #$10			and 	#$10
.a891		d0 e9		bne $a87c			bne 	JMIsLeft
.a893		20 00 a2	jsr $a200			jsr 	NSMSetZero
.a896		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a897						UnaryTimer:
.a897		fa		plx				plx
.a898		20 9c 92	jsr $929c			jsr 	CheckRightBracket
.a89b						TimerToStackX:
.a89b		20 00 a2	jsr $a200			jsr 	NSMSetZero 					; zero result
.a89e		64 01		stz $01				stz 	1 							; access I/O
.a8a0		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a8a3		95 58		sta $58,x			sta 	NSMantissa0,x
.a8a5		ad 5a d6	lda $d65a			lda 	$D65A
.a8a8		95 60		sta $60,x			sta 	NSMantissa1,x
.a8aa		ad 5b d6	lda $d65b			lda 	$D65B
.a8ad		95 68		sta $68,x			sta 	NSMantissa2,x
.a8af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a8b0						MemoryDeleteLine:
.a8b0		20 cf a8	jsr $a8cf			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8b3		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a8b5		a8		tay				tay
.a8b6						_MDDLLoop:
.a8b6		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a8b8		92 30		sta ($30)			sta 	(codePtr)
.a8ba		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a8bc		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a8be		d0 07		bne $a8c7			bne 	_MDLDLNext
.a8c0		a5 31		lda $31				lda 	codePtr+1
.a8c2		c5 3b		cmp $3b				cmp 	zTemp2+1
.a8c4		d0 01		bne $a8c7			bne 	_MDLDLNext
.a8c6						_MDDLExit:
.a8c6		60		rts				rts
.a8c7						_MDLDLNext:
.a8c7		e6 30		inc $30				inc 	codePtr						; next byte
.a8c9		d0 eb		bne $a8b6			bne 	_MDDLLoop
.a8cb		e6 31		inc $31				inc 	codePtr+1
.a8cd		80 e7		bra $a8b6			bra 	_MDDLLoop
.a8cf						IMemoryFindEnd:
.a8cf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8d1		85 3a		sta $3a				sta 	0+zTemp2
.a8d3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8d5		85 3b		sta $3b				sta 	1+zTemp2
.a8d7						_MDLFELoop:
.a8d7		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a8d9		f0 0b		beq $a8e6			beq 	_MDLFEExit
.a8db		18		clc				clc
.a8dc		65 3a		adc $3a				adc 	zTemp2
.a8de		85 3a		sta $3a				sta 	zTemp2
.a8e0		90 f5		bcc $a8d7			bcc 	_MDLFELoop
.a8e2		e6 3b		inc $3b				inc 	zTemp2+1
.a8e4		80 f1		bra $a8d7			bra 	_MDLFELoop
.a8e6						_MDLFEExit:
.a8e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a8e7						MemoryInsertLine:
.a8e7		08		php				php
.a8e8		20 cf a8	jsr $a8cf			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8eb		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a8ed		1a		inc a				inc 	a
.a8ee		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a8f0		b0 36		bcs $a928			bcs 	_MDLIError 					; no, fail.
.a8f2		28		plp				plp 								; do at a specific point or the end ?
.a8f3		90 08		bcc $a8fd			bcc 	_MDLIFound 					; if specific point already set.
.a8f5		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a8f7		85 30		sta $30				sta 	codePtr 					; end.
.a8f9		a5 3b		lda $3b				lda 	zTemp2+1
.a8fb		85 31		sta $31				sta 	codePtr+1
.a8fd						_MDLIFound:
.a8fd		ad aa 02	lda $02aa			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a900		a8		tay				tay
.a901						_MDLIInsert:
.a901		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a903		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a905		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a907		c5 3a		cmp $3a				cmp 	zTemp2
.a909		d0 06		bne $a911			bne 	_MDLINext
.a90b		a5 31		lda $31				lda 	codePtr+1
.a90d		c5 3b		cmp $3b				cmp 	zTemp2+1
.a90f		f0 0a		beq $a91b			beq 	_MDLIHaveSpace
.a911						_MDLINext:
.a911		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a913		d0 02		bne $a917			bne 	_MDLINoBorrow
.a915		c6 3b		dec $3b				dec 	zTemp2+1
.a917						_MDLINoBorrow:
.a917		c6 3a		dec $3a				dec 	zTemp2
.a919		80 e6		bra $a901			bra 	_MDLIInsert
.a91b						_MDLIHaveSpace:
.a91b		ac aa 02	ldy $02aa			ldy 	tokenOffset 				; bytes to copy
.a91e		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a91f						_MDLICopy:
.a91f		b9 aa 02	lda $02aa,y			lda 	tokenOffset,y
.a922		91 30		sta ($30),y			sta 	(codePtr),y
.a924		88		dey				dey
.a925		10 f8		bpl $a91f			bpl 	_MDLICopy
.a927		60		rts				rts
.a928						_MDLIError:
.a928		a9 06		lda #$06		lda	#6
.a92a		4c b5 92	jmp $92b5		jmp	ErrorHandler
.a92d						MDLAppendLine:
.a92d		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a92f		85 36		sta $36				sta 	zTemp0
.a931		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a933		85 38		sta $38				sta 	0+zTemp1
.a935		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a937		85 39		sta $39				sta 	1+zTemp1
.a939		b2 38		lda ($38)			lda 	(zTemp1)
.a93b		d0 0a		bne $a947			bne 	_MDLANoInitialise
.a93d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a93f		8d eb 04	sta $04eb			sta 	0+AppendPointer
.a942		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a944		8d ec 04	sta $04ec			sta 	1+AppendPointer
.a947						_MDLANoInitialise:
.a947		18		clc				clc
.a948		ad eb 04	lda $04eb			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a94b		85 38		sta $38				sta 	zTemp1
.a94d		72 36		adc ($36)			adc 	(zTemp0)
.a94f		8d eb 04	sta $04eb			sta 	AppendPointer
.a952		ad ec 04	lda $04ec			lda 	AppendPointer+1
.a955		85 39		sta $39				sta 	zTemp1+1
.a957		69 00		adc #$00			adc 	#0
.a959		8d ec 04	sta $04ec			sta 	AppendPointer+1
.a95c		a0 00		ldy #$00			ldy 	#0
.a95e						_MDLACopy:
.a95e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a960		91 38		sta ($38),y			sta 	(zTemp1),y
.a962		c8		iny				iny
.a963		98		tya				tya
.a964		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a966		d0 f6		bne $a95e			bne 	_MDLACopy
.a968		a9 00		lda #$00			lda 	#0 							; end of program.
.a96a		91 38		sta ($38),y			sta 	(zTemp1),y
.a96c		60		rts				rts
.04eb						AppendPointer:
>04eb								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a96d						MemoryNew:
.a96d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a96f		85 30		sta $30				sta 	codePtr
.a971		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a973		85 31		sta $31				sta 	codePtr+1
.a975		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a977		92 30		sta ($30)			sta 	(codePtr)
.a979		60		rts				rts
.a97a						MemoryInline:
.a97a		98		tya				tya 								; put address into stack,x
.a97b		18		clc				clc  								; get the offset, add codePtr
.a97c		65 30		adc $30				adc 	codePtr
.a97e		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a980		a5 31		lda $31				lda 	codePtr+1
.a982		69 00		adc #$00			adc 	#0
.a984		95 60		sta $60,x			sta 	NSMantissa1,x
.a986		74 68		stz $68,x			stz 	NSMantissa2,x
.a988		74 70		stz $70,x			stz 	NSMantissa3,x
.a98a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a98b						MemorySearch:
.a98b		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a98d		86 37		stx $37				stx 	zTemp0+1
.a98f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a991		85 30		sta $30				sta 	codePtr
.a993		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a995		85 31		sta $31				sta 	codePtr+1
.a997						_MTAXLoop:
.a997		b2 30		lda ($30)			lda 	(codePtr)
.a999		18		clc				clc
.a99a		f0 21		beq $a9bd			beq 	_MTAXExit 					; reached end, exit with CC.
.a99c		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a99e		b1 30		lda ($30),y			lda 	(codePtr),y
.a9a0		38		sec				sec
.a9a1		e5 36		sbc $36				sbc 	zTemp0
.a9a3		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a9a5		c8		iny				iny 								; do the MSB
.a9a6		b1 30		lda ($30),y			lda 	(codePtr),y
.a9a8		e5 37		sbc $37				sbc 	zTemp0+1
.a9aa		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a9ac		f0 0f		beq $a9bd			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a9ae		b0 0d		bcs $a9bd			bcs 	_MTAXExit 					; current < required exit
.a9b0		18		clc				clc
.a9b1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a9b3		65 30		adc $30				adc 	codePtr
.a9b5		85 30		sta $30				sta 	codePtr
.a9b7		90 02		bcc $a9bb			bcc 	_CREExit
.a9b9		e6 31		inc $31				inc 	codePtr+1 					; carry
.a9bb						_CREExit:
.a9bb		80 da		bra $a997			bra 	_MTAXLoop
.a9bd						_MTAXExit:
.a9bd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a9be						UpdateFont:
.a9be		a5 01		lda $01				lda 	1 							; save position
.a9c0		48		pha				pha
.a9c1		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a9c3		85 01		sta $01				sta 	1
.a9c5		a9 ec		lda #$ec			lda 	#((FontBinary) & $FF)
.a9c7		85 36		sta $36				sta 	0+zTemp0
.a9c9		a9 a9		lda #$a9			lda 	#((FontBinary) >> 8)
.a9cb		85 37		sta $37				sta 	1+zTemp0
.a9cd		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a9cf		85 38		sta $38				sta 	0+zTemp1
.a9d1		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a9d3		85 39		sta $39				sta 	1+zTemp1
.a9d5						_UFCopy1:
.a9d5		a0 00		ldy #$00			ldy 	#0
.a9d7						_UFCopy2:
.a9d7		b1 36		lda ($36),y			lda 	(zTemp0),y
.a9d9		91 38		sta ($38),y			sta 	(zTemp1),y
.a9db		c8		iny				iny
.a9dc		d0 f9		bne $a9d7			bne 	_UFCopy2
.a9de		e6 37		inc $37				inc 	zTemp0+1
.a9e0		e6 39		inc $39				inc 	zTemp1+1
.a9e2		a5 39		lda $39				lda 	zTemp1+1
.a9e4		c9 c8		cmp #$c8			cmp 	#$C8
.a9e6		d0 ed		bne $a9d5			bne 	_UFCopy1
.a9e8		68		pla				pla 								; restore.
.a9e9		85 01		sta $01				sta 	1
.a9eb		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a9ec						FontBinary:
>a9ec		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a9f4		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>aa04		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>aa14		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>aa24		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>aa34		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>aa44		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>aa54		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>aa64		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>aa74		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>aa84		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>aa94		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>aaa4		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>aab4		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>aac4		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>aad4		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>aae4		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>aaf4		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>ab04		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>ab14		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>ab24		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>ab34		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>ab44		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>ab54		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>ab64		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>ab74		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>ab84		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>ab94		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aba4		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>abb4		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>abc4		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>abd4		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>abe4		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>abf4		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>ac04		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>ac14		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>ac24		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>ac34		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>ac44		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>ac54		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>ac64		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ac74		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ac84		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ac94		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>aca4		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>acb4		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>acc4		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>acd4		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>ace4		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>acf4		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>ad04		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>ad14		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>ad24		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>ad34		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>ad44		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>ad54		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>ad64		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>ad74		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ad84		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ad94		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>ada4		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>adb4		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>adc4		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>add4		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ade4		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>adf4		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ae04		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ae14		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ae24		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ae34		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ae44		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ae54		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ae64		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ae74		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ae84		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ae94		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>aea4		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>aeb4		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>aec4		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>aed4		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>aee4		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>aef4		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>af04		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>af14		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>af24		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>af34		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>af44		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>af54		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>af64		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>af74		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>af84		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>af94		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>afa4		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>afb4		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>afc4		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>afd4		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>afe4		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>aff4		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b004		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b014		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b024		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b034		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b044		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b054		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b064		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b074		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b084		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b094		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b0a4		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>b0b4		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>b0c4		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>b0d4		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>b0e4		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>b0f4		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>b104		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>b114		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b124		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b134		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b144		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b154		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b164		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b174		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b184		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b194		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b1a4		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b1b4		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b1c4		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b1d4		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b1e4		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b1ec						PingCommand:
.b1ec		5a		phy				phy 								; save pos
.b1ed		a9 01		lda #$01			lda 	#1 						; push channel.
.b1ef		48		pha				pha
.b1f0		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b1f2		a2 06		ldx #$06			ldx 	#6 						; length
.b1f4		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b1f6		80 24		bra $b21c			bra 	SoundEffectCommand
.b1f8						ZapCommand:
.b1f8		5a		phy				phy 								; save pos
.b1f9		a9 01		lda #$01			lda 	#1 						; push channel.
.b1fb		48		pha				pha
.b1fc		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b1fe		a2 0a		ldx #$0a			ldx 	#10 						; length
.b200		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b202		80 18		bra $b21c			bra 	SoundEffectCommand
.b204						ShootCommand:
.b204		5a		phy				phy 								; save pos
.b205		a9 03		lda #$03			lda 	#3 						; push channel.
.b207		48		pha				pha
.b208		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b20a		a2 04		ldx #$04			ldx 	#4 						; length
.b20c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b20e		80 0c		bra $b21c			bra 	SoundEffectCommand
.b210						Explode:
.b210		5a		phy				phy 								; save pos
.b211		a9 03		lda #$03			lda 	#3 						; push channel.
.b213		48		pha				pha
.b214		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b216		a2 0a		ldx #$0a			ldx 	#10 						; length
.b218		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b21a		80 00		bra $b21c			bra 	SoundEffectCommand
.b21c						SoundEffectCommand:
.b21c		8d ed 04	sta $04ed			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b21f		9c ee 04	stz $04ee			stz 	SoundCommandBlock+1
.b222		a9 0f		lda #$0f			lda 	#15
.b224		8d ef 04	sta $04ef			sta 	SoundCommandBlock+2
.b227		8e f0 04	stx $04f0			stx 	SoundCommandBlock+3
.b22a		8c f1 04	sty $04f1			sty 	SoundCommandBlock+4
.b22d		9c f2 04	stz $04f2			stz 	SoundCommandBlock+5
.b230		68		pla				pla
.b231		09 10		ora #$10			ora 	#$10  						; execute command $11
.b233		a2 ed		ldx #$ed			ldx 	#(SoundCommandBlock & $FF)
.b235		a0 04		ldy #$04			ldy 	#(SoundCommandBlock >> 8)
.b237		20 8f 80	jsr $808f			jsr 	SNDCommand
.b23a		7a		ply				ply
.b23b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b23c						UnaryPlaying:
.b23c		fa		plx				plx
.b23d		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; get channel #
.b240		48		pha				pha
.b241		20 9c 92	jsr $929c			jsr		CheckRightBracket
.b244		68		pla				pla
.b245		c9 04		cmp #$04			cmp 	#4
.b247		b0 0c		bcs $b255			bcs 	_UPNotPlaying
.b249		09 20		ora #$20			ora 	#$20 						; query playing ?
.b24b		20 8f 80	jsr $808f			jsr 	SNDCommand
.b24e		c9 00		cmp #$00			cmp 	#0
.b250		f0 03		beq $b255			beq 	_UPNotPlaying
.b252		4c 22 93	jmp $9322			jmp 	ReturnTrue
.b255						_UPNotPlaying:
.b255		4c 2d 93	jmp $932d			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b258						SoundCommand:
.b258		b1 30		lda ($30),y			lda 	(codePtr),y
.b25a		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b25c		d0 09		bne $b267			bne 	_SNDMain
.b25e		c8		iny				iny 								; skip OFF
.b25f		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b261		5a		phy				phy
.b262		20 8f 80	jsr $808f			jsr 	SNDCommand
.b265		7a		ply				ply
.b266		60		rts				rts
.b267						_SNDMain:
.b267		a2 00		ldx #$00			ldx 	#0
.b269		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; channel
.b26c		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b26e		b0 4b		bcs $b2bb			bcs 	_SndError
.b270		e8		inx				inx 								; do the rest in slot 1.
.b271		20 a4 92	jsr $92a4			jsr 	CheckComma
.b274		20 80 a1	jsr $a180			jsr 	Evaluate16BitInteger 		; Pitch
.b277		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b279		c9 10		cmp #$10			cmp 	#16
.b27b		b0 3e		bcs $b2bb			bcs 	_SndError
.b27d		8d ee 04	sta $04ee			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b280		b5 58		lda $58,x			lda 	NSMantissa0,x
.b282		8d ed 04	sta $04ed			sta 	SoundCommandBlock
.b285		20 a4 92	jsr $92a4			jsr 	CheckComma
.b288		20 9b a1	jsr $a19b			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b28b		8d f0 04	sta $04f0			sta 	SoundCommandBlock+3
.b28e		a9 0f		lda #$0f			lda 	#15
.b290		8d ef 04	sta $04ef			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b293		9c f1 04	stz $04f1			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b296		9c f2 04	stz $04f2			stz 	SoundCommandBlock+5
.b299		b1 30		lda ($30),y			lda 	(codePtr),y
.b29b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b29d		d0 0e		bne $b2ad			bne 	_SNDPlay
.b29f		c8		iny				iny
.b2a0		20 8a a1	jsr $a18a			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b2a3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b2a5		8d f1 04	sta $04f1			sta 	SoundCommandBlock+4
.b2a8		b5 60		lda $60,x			lda 	NSMantissa1,x
.b2aa		8d f2 04	sta $04f2			sta 	SoundCommandBlock+5
.b2ad						_SNDPlay:
.b2ad		5a		phy				phy
.b2ae		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b2b0		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b2b2		a2 ed		ldx #$ed			ldx 	#(SoundCommandBlock & $FF)
.b2b4		a0 04		ldy #$04			ldy 	#(SoundCommandBlock >> 8)
.b2b6		20 8f 80	jsr $808f			jsr 	SNDCommand
.b2b9		7a		ply				ply
.b2ba		60		rts				rts
.b2bb						_SndError:
.b2bb		4c 83 a3	jmp $a383			jmp 	RangeError
.04ed						SoundCommandBlock:
>04ed								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b2be						StackPushByte:
.b2be		48		pha				pha 								; save byte on stack
.b2bf		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b2c1		d0 08		bne $b2cb			bne 	_SPBNoBorrow
.b2c3		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b2c5		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b2c7		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b2c9		90 06		bcc $b2d1			bcc 	_SPBMemory
.b2cb						_SPBNoBorrow:
.b2cb		c6 34		dec $34				dec 	basicStack
.b2cd		68		pla				pla 								; get back and write
.b2ce		92 34		sta ($34)			sta 	(basicStack)
.b2d0		60		rts				rts
.b2d1						_SPBMemory:
.b2d1		a9 12		lda #$12		lda	#18
.b2d3		4c b5 92	jmp $92b5		jmp	ErrorHandler
.b2d6						StackPopByte:
.b2d6		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b2d8		e6 34		inc $34				inc 	basicStack
.b2da		d0 02		bne $b2de			bne 	_SPBNoCarry
.b2dc		e6 35		inc $35				inc 	basicStack+1
.b2de						_SPBNoCarry:
.b2de		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b2df						StackOpen:
.b2df		48		pha				pha 								; save frame byte
.b2e0		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b2e2		0a		asl a				asl 	a 							; claim twice this for storage
.b2e3		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b2e5		38		sec				sec 								; so basically subtracting from
.b2e6		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b2e8		85 34		sta $34				sta 	basicStack
.b2ea		b0 09		bcs $b2f5			bcs 	_SONoBorrow
>b2ec		db						.byte 	$DB 						; causes a break in the emulator
.b2ed		c6 35		dec $35				dec 	basicStack+1
.b2ef		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b2f1		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b2f3		90 04		bcc $b2f9			bcc 	_SOMemory
.b2f5						_SONoBorrow:
.b2f5		68		pla				pla 								; get marker back and write at TOS
.b2f6		92 34		sta ($34)			sta 	(basicStack)
.b2f8		60		rts				rts
.b2f9						_SOMemory:
.b2f9		a9 12		lda #$12		lda	#18
.b2fb		4c b5 92	jmp $92b5		jmp	ErrorHandler
.b2fe						StackClose:
.b2fe		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b300		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b302		0a		asl a				asl 	a 							; claim twice this.
.b303		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b305		85 34		sta $34				sta 	basicStack
.b307		90 02		bcc $b30b			bcc 	_SCExit
.b309		e6 35		inc $35				inc 	basicStack+1
.b30b						_SCExit:
.b30b		60		rts				rts
.b30c						StackCheckFrame:
.b30c		48		pha				pha
.b30d						_StackRemoveLocals:
.b30d		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b30f		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b311		b0 05		bcs $b318			bcs 	_SCNoLocal
.b313		20 bc 8c	jsr $8cbc			jsr 	LocalPopValue 				; restore the local value
.b316		80 f5		bra $b30d			bra 	_StackRemoveLocals 			; gr round again
.b318						_SCNoLocal:
.b318		68		pla				pla 								; get the frame check.
.b319		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b31b		29 f0		and #$f0			and 	#$F0 						; check type bits
.b31d		d0 01		bne $b320			bne 	_SCFError 					; different, we have structures mixed up
.b31f		60		rts				rts
.b320						_SCFError:
.b320		8a		txa				txa 								; report error X
.b321		4c b5 92	jmp $92b5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b324						STKSaveCodePosition:
.b324		5a		phy				phy
.b325		98		tya				tya 								; save Y
.b326		a0 05		ldy #$05			ldy 	#5
.b328		91 34		sta ($34),y			sta 	(basicStack),y
.b32a		88		dey				dey 								; save Code Pointer
.b32b						_STKSaveLoop:
.b32b		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b32e		91 34		sta ($34),y			sta 	(basicStack),y
.b330		88		dey				dey
.b331		d0 f8		bne $b32b			bne 	_STKSaveLoop
.b333		7a		ply				ply
.b334		60		rts				rts
.b335						STKLoadCodePosition:
.b335		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b337						_STKLoadLoop:
.b337		b1 34		lda ($34),y			lda 	(basicStack),y
.b339		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b33c		c8		iny				iny
.b33d		c0 05		cpy #$05			cpy 	#5
.b33f		d0 f6		bne $b337			bne 	_STKLoadLoop
.b341		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b343		a8		tay				tay
.b344		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b345						StackReset:
.b345		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b347		85 34		sta $34				sta 	0+basicStack
.b349		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b34b		85 35		sta $35				sta 	1+basicStack
.b34d		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b34f		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b351		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b352						StringConcrete:
.b352		5a		phy				phy 								; save position on stack
.b353		20 ef 9d	jsr $9def			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b356		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b358		85 38		sta $38				sta 	zTemp1
.b35a		b5 60		lda $60,x			lda 	NSMantissa1,x
.b35c		85 39		sta $39				sta 	zTemp1+1
.b35e		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b360						_SALength:
.b360		c8		iny				iny
.b361		b1 38		lda ($38),y			lda 	(zTemp1),y
.b363		d0 fb		bne $b360			bne 	_SALength
.b365		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b367		b0 3d		bcs $b3a6			bcs 	_SALengthError
.b369		98		tya				tya 				 				; length of the new string
.b36a		18		clc				clc
.b36b		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b36d		90 02		bcc $b371			bcc 	_SAHaveLength
.b36f		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b371						_SAHaveLength:
.b371		48		pha				pha 								; save length.
.b372		38		sec				sec
.b373		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b375		6d 8e 02	adc $028e			adc 	stringMemory
.b378		8d 8e 02	sta $028e			sta 	stringMemory
.b37b		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b37d		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b37f		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b381		6d 8f 02	adc $028f			adc 	stringMemory+1
.b384		8d 8f 02	sta $028f			sta 	stringMemory+1
.b387		85 3b		sta $3b				sta 	zTemp2+1
.b389		95 60		sta $60,x			sta 	NSMantissa1,x
.b38b		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b38c		38		sec				sec
.b38d		e9 03		sbc #$03			sbc 	#3
.b38f		92 3a		sta ($3a)			sta 	(zTemp2)
.b391		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b393		a0 01		ldy #$01			ldy 	#1
.b395		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b397						_SACopyNewString:
.b397		a0 00		ldy #$00			ldy 	#0
.b399						_SACopyNSLoop:
.b399		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b39b		c8		iny				iny 								; write two on in string storage
.b39c		c8		iny				iny
.b39d		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b39f		88		dey				dey 								; this makes it one one.
.b3a0		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b3a2		d0 f5		bne $b399			bne 	_SACopyNSLoop
.b3a4		7a		ply				ply
.b3a5		60		rts				rts
.b3a6						_SALengthError:
.b3a6		a9 09		lda #$09		lda	#9
.b3a8		4c b5 92	jmp $92b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b3ab						StringSystemInitialise:
.b3ab		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b3ad		8d 8e 02	sta $028e			sta 	0+stringMemory
.b3b0		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b3b2		8d 8f 02	sta $028f			sta 	1+stringMemory
.b3b5		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b3b8		60		rts				rts
.b3b9						StringSpaceInitialise:
.b3b9		20 ef 9d	jsr $9def			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b3bc		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b3be		8d 90 02	sta $0290			sta 	stringInitialised
.b3c1		ad 8e 02	lda $028e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b3c4		8d 91 02	sta $0291			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b3c7		ad 8f 02	lda $028f			lda 	stringMemory+1
.b3ca		3a		dec a				dec 	a
.b3cb		8d 92 02	sta $0292			sta 	stringTempPointer+1
.b3ce		60		rts				rts
.b3cf						StringTempAllocate:
.b3cf		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b3d1		b0 30		bcs $b403			bcs 	_STALength
.b3d3		2c 90 02	bit $0290			bit 	stringInitialised 			; already initialised
.b3d6		30 05		bmi $b3dd			bmi 	_STAAllocate
.b3d8		48		pha				pha 								; save value to subtract.
.b3d9		20 b9 b3	jsr $b3b9			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b3dc		68		pla				pla 								; restore it
.b3dd						_STAAllocate:
.b3dd		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b3df		18		clc				clc  								; deliberate allows one more
.b3e0		6d 91 02	adc $0291			adc 	stringTempPointer 			; subtract from temp pointer
.b3e3		8d 91 02	sta $0291			sta 	stringTempPointer
.b3e6		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b3e8		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b3ea		ad 92 02	lda $0292			lda 	stringTempPointer+1
.b3ed		69 ff		adc #$ff			adc 	#$FF
.b3ef		8d 92 02	sta $0292			sta 	stringTempPointer+1
.b3f2		85 3d		sta $3d				sta 	zsTemp+1
.b3f4		95 60		sta $60,x			sta 	NSMantissa1,x
.b3f6		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b3f8		74 70		stz $70,x			stz 	NSMantissa3,x
.b3fa		a9 10		lda #$10			lda 	#NSTString
.b3fc		95 50		sta $50,x			sta 	NSStatus,x
.b3fe		a9 00		lda #$00			lda 	#0 							; clear the target string
.b400		92 3c		sta ($3c)			sta 	(zsTemp)
.b402		60		rts				rts
.b403						_STALength:
.b403		a9 09		lda #$09		lda	#9
.b405		4c b5 92	jmp $92b5		jmp	ErrorHandler
.b408						StringTempWrite:
.b408		48		pha				pha
.b409		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b40b		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b40d		d0 02		bne $b411			bne 	_STWNoCarry
.b40f		e6 3d		inc $3d				inc 	zsTemp+1
.b411						_STWNoCarry:
.b411		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b413		92 3c		sta ($3c)			sta 	(zsTemp)
.b415		68		pla				pla
.b416		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b417						Command_VERIFY:
.b417		20 58 a1	jsr $a158			jsr 	EvaluateString 				; file name to verify
.b41a		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b41c		a5 36		lda $36				lda 	zTemp0
.b41e		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b421		b0 4b		bcs $b46e			bcs 	_CVErrorHandler 			; error, so fail.
.b423		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.b426		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b429		9c e0 04	stz $04e0			stz 	LoadEOFFlag 				; clear EOF Flag.
.b42c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b42e		85 30		sta $30				sta 	codePtr
.b430		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b432		85 31		sta $31				sta 	codePtr+1
.b434						_CVLoop:
.b434		20 04 8c	jsr $8c04			jsr 	LoadReadLine 				; get next line.
.b437		f0 27		beq $b460			beq 	_CVExit 					; end, exit.
.b439		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.b43c		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.b43f		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.b442		f0 f0		beq $b434			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b444		a0 00		ldy #$00			ldy 	#0 							; start compare
.b446						_CVCompareLoop:
.b446		b1 30		lda ($30),y			lda 	(codePtr),y
.b448		d9 aa 02	cmp $02aa,y			cmp 	tokenOffset,y 				; compare against actual code.
.b44b		d0 1c		bne $b469			bne 	_CVCompareError
.b44d		c8		iny				iny
.b44e		cc aa 02	cpy $02aa			cpy 	tokenOffset 				; until done whole line of code
.b451		d0 f3		bne $b446			bne 	_CVCompareLoop
.b453		18		clc				clc
.b454		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b456		65 30		adc $30				adc 	codePtr
.b458		85 30		sta $30				sta 	codePtr
.b45a		90 02		bcc $b45e			bcc 	_CREExit
.b45c		e6 31		inc $31				inc 	codePtr+1 					; carry
.b45e						_CREExit:
.b45e		80 d4		bra $b434			bra 	_CVLoop
.b460						_CVExit:
.b460		ad e1 04	lda $04e1			lda 	CurrentFileStream
.b463		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.b466		4c d9 8b	jmp $8bd9			jmp 	CLComplete
.b469						_CVCompareError:
.b469		a9 1b		lda #$1b		lda	#27
.b46b		4c b5 92	jmp $92b5		jmp	ErrorHandler
.b46e						_CVErrorHandler:
.b46e		4c f6 8b	jmp $8bf6			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b471						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad f5 04	lda $04f5			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c f4 04	sty $04f4			sty 	EXTColumn
.c02d	a02d	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee f3 04	inc $04f3			inc 	EXTRow  					; bump row
.c035	a035	9c f4 04	stz $04f4			stz 	EXTColumn 					; back to column 0
.c038	a038	ad f3 04	lda $04f3			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd f7 04	cmp $04f7			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d f6 04	adc $04f6			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce f4 04	dec $04f4			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c f4 04	stz $04f4			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce f3 04	dec $04f3			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad f3 04	lda $04f3			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce f3 04	dec $04f3			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed f6 04	sbc $04f6			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c f4 04	sty $04f4			sty 	EXTColumn
.c08c	a08c	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c f4 04	sty $04f4			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad f7 04	lda $04f7			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd f3 04	cmp $04f3			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee f3 04	inc $04f3			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d f6 04	adc $04f6			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad f4 04	lda $04f4			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d f4 04	sta $04f4			sta 	EXTColumn
.c0c9	a0c9	cd f6 04	cmp $04f6			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce f4 04	dec $04f4			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d f5 04	and $04f5			and 	EXTTextColour 				; mask out old.
.c135	a135	8d f5 04	sta $04f5			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d f5 04	ora $04f5			ora 	EXTTextColour
.c13c	a13c	8d f5 04	sta $04f5			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad f5 04	lda $04f5			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad f5 04	lda $04f5			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c f3 04	stz $04f3			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c f4 04	stz $04f4			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad f4 04	lda $04f4			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad f3 04	lda $04f3			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 0d bc	jsr $bc0d			jsr 	PagedInputSingleCharacter
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad f4 04	lda $04f4			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 aa 03	sta $03aa,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 aa 03	lda $03aa,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 aa 03	sta $03aa,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc f4 04	cpy $04f4			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad f6 04	lda $04f6			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.04f3						EXTRow:
>04f3								.fill 	1
.04f4						EXTColumn:
>04f4								.fill 	1
.04f5						EXTTextColour:
>04f5								.fill 	1
.04f6						EXTScreenWidth:
>04f6								.fill 	1
.04f7						EXTScreenHeight:
>04f7								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d f5 04	sta $04f5			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d f6 04	sta $04f6			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d f7 04	sta $04f7			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad f3 04	lda $04f3			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$4a7						gxPixelBuffer = numberBuffer
.04f8						gxCurrentX:
>04f8								.fill 	2
.04fa						gxCurrentY:
>04fa								.fill 	2
.04fc						gxLastX:
>04fc								.fill 	2
.04fe						gxLastY:
>04fe								.fill 	2
.0500						gxX0:
>0500								.fill 	2
.0502						gxY0:
>0502								.fill 	2
.0504						gxX1:
>0504								.fill 	2
.0506						gxY1:
>0506								.fill 	2
.0508						gxSpritesOn:
>0508								.fill 	1
.0509						gxBitmapsOn:
>0509								.fill 	1
.050a						gxBasePage:
>050a								.fill 	1
.050b						gxSpritePage:
>050b								.fill 	1
.050c						gxHeight:
>050c								.fill 	1
.050d						gxMode:
>050d								.fill 	1
.050e						gxColour:
>050e								.fill 	1
.050f						gxEORValue:
>050f								.fill 	1
.0510						gxANDValue:
>0510								.fill 	1
.0511						gxOriginalLUTValue:
>0511								.fill 	1
.0512						gxOffset:
>0512								.fill 	1
.0513						GSCurrentSpriteID:
>0513								.fill 	1
.0514						GSCurrentSpriteAddr:
>0514								.fill 	2
.0516						gxSpriteOffsetBase:
>0516								.fill 	2
.0518						gxSpriteLow:
>0518								.fill 	64
.0558						gxSpriteHigh:
>0558								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd f8 04	lda $04f8,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d fc 04	sta $04fc,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d fa 04	sta $04fa			sta 	gxCurrentY
.c7e7	a7e7	9c fb 04	stz $04fb			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d f8 04	sta $04f8			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d f9 04	sta $04f9			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad f9 04	lda $04f9			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad f8 04	lda $04f8			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad fa 04	lda $04fa			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 0c 05	cmp $050c			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd f8 04	lda $04f8,x			lda 	gxCurrentX,x
.c819	a819	9d 00 05	sta $0500,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 9b 05	sta $059b			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 09 05	lda $0509			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 9c 05	stz $059c			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 99 05	lda $0599			lda 	gxxCentre					; while x <= y
.c848	a848	cd 9a 05	cmp $059a			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 9a 05	lda $059a			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 99 05	lda $0599			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 9a 05	ldx $059a			ldx	 	gxYCentre
.c875	a875	8d 9a 05	sta $059a			sta 	gxYCentre
.c878	a878	8e 99 05	stx $0599			stx 	gxxCentre
.c87b	a87b	ad 9c 05	lda $059c			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 9c 05	sta $059c			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 9b 05	lda $059b	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 9c 05	lda $059c			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 9a 05	lda $059a			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 99 05	lda $0599			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 9b 05	lda $059b			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 9a 05	sbc $059a			sbc 	gxYCentre
.c8bc	a8bc	8d 9a 05	sta $059a			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 04 05	lda $0504,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 00 05	sta $0500,x			sta 	gxX0,x
.c8d3	a8d3	bd 05 05	lda $0505,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 01 05	sta $0501,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 9c 05	stz $059c			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 99 05	inc $0599			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 99 05	lda $0599			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 99 05	inc $0599			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 9a 05	dec $059a			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 99 05	lda $0599			lda 	gxxCentre
.c8fc	a8fc	ed 9a 05	sbc $059a			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 9c 05	dec $059c			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 06 05	lda $0506			lda 	gxY1
.c935	a935	ed 02 05	sbc $0502			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 98 05	sta $0598			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 99 05	stz $0599			stz 	gxxCentre
.c949	a949	ad 98 05	lda $0598			lda 	gxRadius
.c94c	a94c	8d 9a 05	sta $059a			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 04 05	lda $0504,x			lda 	gxX1,x
.c964	a964	7d 00 05	adc $0500,x			adc 	gxX0,x
.c967	a967	9d 04 05	sta $0504,x			sta 	gxX1,x
.c96a	a96a	bd 05 05	lda $0505,x			lda 	gxX1+1,x
.c96d	a96d	7d 01 05	adc $0501,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 05 05	sta $0505,x			sta 	gxX1+1,x
.c974	a974	7e 04 05	ror $0504,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0598						gxRadius:
>0598								.fill 	1
.0599						gxxCentre:
>0599								.fill 	1
.059a						gxYCentre:
>059a								.fill 	1
.059b						gxIsFillMode:
>059b								.fill 	1
.059c						gxYChanged:
>059c								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 09 05	lda $0509			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 0c 05	lda $050c			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 0a 05	adc $050a			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 0a 05	cmp $050a			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 08 05	stz $0508			stz 	gxSpritesOn
.c9d1	a9d1	9c 09 05	stz $0509			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e f8 04	stz $04f8,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 09 05	sta $0509			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 0a 05	sta $050a			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 0c 05	stx $050c			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 08 05	sta $0508			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 0b 05	sta $050b			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d 16 05	sta $0516			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d 17 05	sta $0517			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c 15 05	stz $0515			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e 58 05	stz $0558,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 09 05	lda $0509			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac 12 05	ldy $0512			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d 10 05	and $0510			and 	gxANDValue
.ca9e	aa9e	4d 0f 05	eor $050f			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 9f 05	lda $059f			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 00 05	lda $0500			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 04 05	eor $0504			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 01 05	lda $0501			lda 	gxX0+1
.cac4	aac4	4d 05 05	eor $0505			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 06 05	lda $0506			lda 	gxY1
.cacb	aacb	4d 02 05	eor $0502			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad a1 05	lda $05a1			lda 	gxPosition
.cad3	aad3	6d a2 05	adc $05a2			adc 	gxAdjust
.cad6	aad6	8d a1 05	sta $05a1			sta 	gxPosition
.cad9	aad9	9c a4 05	stz $05a4			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd a3 05	cmp $05a3			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce a4 05	dec $05a4			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed a3 05	sbc $05a3			sbc 	gxTotal
.caea	aaea	8d a1 05	sta $05a1			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 9f 05	lda $059f			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad a4 05	lda $05a4			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad a4 05	lda $05a4			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad a0 05	lda $05a0			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 00 05	lda $0500			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 01 05	dec $0501			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 00 05	dec $0500			dec 	gxX0
.cb1b	ab1b	ce 12 05	dec $0512			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad 12 05	lda $0512			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 00 05	inc $0500			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 01 05	inc $0501			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee 12 05	inc $0512			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 02 05	inc $0502			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 06 05	lda $0506			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 02 05	sbc $0502			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 9e 05	sta $059e			sta 	gxDiffY
.cb63	ab63	9c a0 05	stz $05a0			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 04 05	lda $0504			lda 	gxX1
.cb6a	ab6a	ed 00 05	sbc $0500			sbc 	gxX0
.cb6d	ab6d	8d 9d 05	sta $059d			sta 	gxDiffX
.cb70	ab70	ad 05 05	lda $0505			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 01 05	sbc $0501			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 9d 05	ror $059d			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 9d 05	sbc $059d			sbc 	gxDiffX
.cb83	ab83	8d 9d 05	sta $059d			sta 	gxDiffX
.cb86	ab86	ce a0 05	dec $05a0			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 9f 05	stz $059f			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 9e 05	lda $059e			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d a2 05	sta $05a2			sta 	gxAdjust
.cb92	ab92	ad 9d 05	lda $059d			lda 	gxDiffX
.cb95	ab95	8d a3 05	sta $05a3			sta 	gxTotal
.cb98	ab98	ad 9e 05	lda $059e			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 9d 05	cmp $059d			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 9f 05	dec $059f			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 9d 05	lda $059d			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d a2 05	sta $05a2			sta 	gxAdjust
.cba9	aba9	ad 9e 05	lda $059e			lda 	gxDiffY
.cbac	abac	8d a3 05	sta $05a3			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad a3 05	lda $05a3			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d a1 05	sta $05a1			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.059d						gxDiffX:
>059d								.fill 	1
.059e						gxDiffY:
>059e								.fill 	1
.059f						gxIsDiffYLarger:
>059f								.fill 	1
.05a0						gxDXNegative:
>05a0								.fill 	1
.05a1						gxPosition:
>05a1								.fill 	1
.05a2						gxAdjust:
>05a2								.fill 	1
.05a3						gxTotal:
>05a3								.fill 	1
.05a4						gxAddSelect:
>05a4								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 0e 05	stx $050e			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 0d 05	sta $050d			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c 10 05	stz $0510			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 0e 05	ldx $050e			ldx 	gxColour
.cbc9	abc9	8e 0f 05	stx $050f			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e 10 05	stx $0510			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c 0f 05	stz $050f			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad 10 05	lda $0510			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d 10 05	sta $0510			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac 12 05	ldy $0512			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d 10 05	and $0510			and 	gxANDValue
.cbf3	abf3	4d 0f 05	eor $050f			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 09 05	lda $0509			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 02 05	lda $0502			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 06 05	cmp $0506			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 02 05	inc $0502			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 02 05	lda $0502			lda 	gxY0 						; reached last line
.cc25	ac25	cd 06 05	cmp $0506			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 04 05	lda $0504			lda		gxX1
.cc42	ac42	ed 00 05	sbc $0500			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 05 05	lda $0505			lda 	gxX1+1
.cc4a	ac4a	ed 01 05	sbc $0501			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad 12 05	lda $0512			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac 12 05	ldy $0512			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d 10 05	and $0510			and 	gxANDValue
.cc67	ac67	4d 0f 05	eor $050f			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d 10 05	and $0510			and 	gxANDValue
.cc85	ac85	4d 0f 05	eor $050f			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d 10 05	and $0510			and 	gxANDValue
.cc9d	ac9d	4d 0f 05	eor $050f			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d 12 05	sta $0512			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d a5 05	sta $05a5			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d a6 05	sta $05a6			sta 	gxMask 						; and mask
.ccc4	acc4	ad 09 05	lda $0509			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 02 05	lda $0502			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c a8 05	sty $05a8			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e a7 05	stx $05a7			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad aa 05	lda $05aa			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d a9 05	sta $05a9			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c aa 05	bit $05aa			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad a6 05	lda $05a6			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad a9 05	lda $05a9			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 02 05	lda $0502			lda 	gxY0 						; off screen
.ccfd	acfd	cd 0c 05	cmp $050c			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd a5 05	cmp $05a5			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 02 05	sta $0502			sta 	gxY0
.cd16	ad16	ae a9 05	ldx $05a9			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad a5 05	lda $05a5			lda 	gxSize
.cd1d	ad1d	6d 00 05	adc $0500			adc 	gxX0
.cd20	ad20	8d 00 05	sta $0500			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 01 05	inc $0501			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c a7 05	jmp ($05a7)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac 12 05	ldy $0512			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad a9 05	lda $05a9			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 0d 05	bit $050d			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad a6 05	lda $05a6			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd a7 04	lda $04a7,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad aa 05	lda $05aa			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d 10 05	and $0510			and 	gxANDValue
.cd61	ad61	5d a7 04	eor $04a7,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd a5 05	cmp $05a5			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 02 05	inc $0502			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.05a5						gxSize:
>05a5								.fill 	1
.05a6						gxMask:
>05a6								.fill 	1
.05a7						gxAcquireVector:
>05a7								.fill 	2
.05a9						gxScale:
>05a9								.fill 	1
.05aa						gxUseMode:
>05aa								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 0d 05	eor $050d			eor 	gxMode
.cd84	ad84	8d aa 05	sta $05aa			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e a7 04	stz $04a7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 0e 05	lda $050e			lda 	gxColour
.cdbd	adbd	9d a7 04	sta $04a7,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 08 05	lda $0508			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 0d 05	eor $050d			eor 	gxMode
.cdd1	add1	8d aa 05	sta $05aa			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad ab 05	lda $05ab			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 0b 05	lda $050b			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae ac 05	ldx $05ac			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d ae 05	adc $05ae			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d af 05	adc $05af			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 a7 04	sta $04a7,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc ab 05	cpy $05ab			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 08 05	lda $0508			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d 13 05	sta $0513			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d 15 05	sta $0515			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d 14 05	sta $0514			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 08 05	lda $0508			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad ae 05	lda $05ae			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad af 05	lda $05af			lda 	gxSpriteOffset+1
.ce92	ae92	6d 16 05	adc $0516			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad 17 05	lda $0517			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad ac 05	lda $05ac			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d ad 05	ora $05ad			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad ac 05	lda $05ac			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d 58 05	ora $0558,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 08 05	lda $0508			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 00 05	adc $0500			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 01 05	lda $0501			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 02 05	adc $0502			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 01 05	lsr $0501			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 00 05	ror $0500			ror 	gxX0
.cf3d	af3d	4e 00 05	lsr $0500			lsr 	gxX0
.cf40	af40	4e 02 05	lsr $0502			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 02 05	lsr $0502			lsr 	gxY0
.cf46	af46	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 00 05	ora $0500			ora 	gxX0
.cf51	af51	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.cf54	af54	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 02 05	ora $0502			ora 	gxY0
.cf5c	af5c	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d 11 05	sta $0511			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad 11 05	lda $0511			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 02 05	lda $0502			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 00 05	lda $0500			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d 12 05	sta $0512			sta 	gxOffset
.cfae	afae	ad 01 05	lda $0501			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 0a 05	adc $050a			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad 12 05	lda $0512			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d 12 05	sta $0512			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 18 05	lda $0518,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d 18 05	ora $0518,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 58 05	lda $0558,y			lda 	gxSpriteHigh,y
.d000	b000	7d 58 05	adc $0558,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 58 05	lda $0558,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 18 05	lda $0518,y			lda 	gxSpriteLow,y
.d02e	b02e	fd 18 05	sbc $0518,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 0b 05	lda $050b			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d af 05	sta $05af			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d ac 05	sta $05ac			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d ab 05	sta $05ab			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d ad 05	sta $05ad			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d ae 05	sta $05ae			sta 	gxSpriteOffset
.d07b	b07b	0e ae 05	asl $05ae			asl 	gxSpriteOffset
.d07e	b07e	2e af 05	rol $05af			rol 	gxSpriteOffset+1
.d081	b081	0e ae 05	asl $05ae			asl 	gxSpriteOffset
.d084	b084	2e af 05	rol $05af			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.05ab						gxSizePixels:
>05ab								.fill 	1
.05ac						gxSizeBits:
>05ac								.fill 	1
.05ad						gxSpriteLUT:
>05ad								.fill 	1
.05ae						gxSpriteOffset:
>05ae								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 00 05	lda $0500			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 04 05	cmp $0504			cmp 	gxX1
.d098	b098	ad 01 05	lda $0501			lda 	gxX0+1
.d09b	b09b	ed 05 05	sbc $0505			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 02 05	lda $0502			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 06 05	cmp $0506			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 00 05	lda $0500,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 00 05	lda $0500,y			lda 	gxX0,y
.d0c8	b0c8	9d 00 05	sta $0500,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 00 05	sta $0500,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d10f	b10f	45 24 28
>d112	b112	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d11a	b11a	45 24 28
>d11d	b11d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d123	b123	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d129	b129	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d131	b131	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d138	b138	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d13f	b13f	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d146	b146	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d14e	b14e	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d154	b154	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d15a	b15a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d161	b161	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d167	b167	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d16d	b16d	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d174	b174	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d17c	b17c	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d184	b184	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d18c	b18c	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d194	b194	47 28
>d196	b196	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d19e	b19e	28
>d19f	b19f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d1a7	b1a7	28
>d1a8	b1a8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1ae	b1ae	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1b4	b1b4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1ba	b1ba	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1c1	b1c1	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1c9	b1c9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1cf	b1cf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1d5	b1d5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1da	b1da	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1de	b1de	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1e4	b1e4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1ec	b1ec	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1f3	b1f3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1fa	b1fa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d202	b202	43
>d203	b203	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d209	b209	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d20f	b20f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d216	b216	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d21c	b21c	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d220	b220	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d226	b226	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d22e	b22e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d235	b235	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d23a	b23a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d241	b241	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d249	b249	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $b8 CPRINT
>d251	b251	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b9 DATA
>d257	b257	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ba DIM
>d25c	b25c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bb DOWNTO
>d264	b264	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bc ELSE
>d26a	b26a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bd FROM
>d270	b270	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $be GFX
>d275	b275	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bf GOSUB
>d27c	b27c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $c0 GOTO
>d282	b282	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d288	b288	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d28f	b28f	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c3 INPUT
>d296	b296	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d29b	b29b	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2a1	b2a1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2a8	b2a8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2ad	b2ad	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2b1	b2b1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2b9	b2b9	45
>d2ba	b2ba	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2c2	b2c2	45
>d2c3	b2c3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2c9	b2c9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2cf	b2cf	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2d6	b2d6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d2dd	b2dd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d2e4	b2e4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $d0 PRINT
>d2eb	b2eb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d2f1	b2f1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d2f7	b2f7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d2fc	b2fc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d4 RETURN
>d304	b304	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d5 SOLID
>d30b	b30b	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d6 SOUND
>d312	b312	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d7 SPRITE
>d31a	b31a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d8 TEXT
>d320	b320	02 a3 54 4f				.text	2,$a3,"TO"             ; $d9 TO
>d324	b324	ff					.text	$FF
.d325	b325					KeywordSet1:
>d325	b325	00 65					.text	0,$65,""               ; $80 !0:EOF
>d327	b327	00 58					.text	0,$58,""               ; $81 !1:SH1
>d329	b329	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d32b	b32b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d333	b333	4c 45
>d335	b335	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d33d	b33d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d345	b345	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d34c	b34c	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d353	b353	03 df 44 49 52				.text	3,$df,"DIR"            ; $88 DIR
>d358	b358	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $89 DRIVE
>d35f	b35f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8a END
>d364	b364	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8b EXPLODE
>d36c	b36c	45
>d36d	b36d	02 96 47 4f				.text	2,$96,"GO"             ; $8c GO
>d371	b371	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $8d HIMEM
>d378	b378	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8e LIST
>d37e	b37e	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8f LOAD
>d384	b384	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $90 NEW
>d389	b389	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $91 PING
>d38f	b38f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $92 RESTORE
>d397	b397	45
>d398	b398	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $93 RUN
>d39d	b39d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $94 SAVE
>d3a3	b3a3	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $95 SETDATE
>d3ab	b3ab	45
>d3ac	b3ac	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $96 SETTIME
>d3b4	b3b4	45
>d3b5	b3b5	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $97 SHOOT
>d3bc	b3bc	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $98 SPRITES
>d3c4	b3c4	53
>d3c5	b3c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $99 STOP
>d3cb	b3cb	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $9a VERIFY
>d3d3	b3d3	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $9b XGO
>d3d8	b3d8	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $9c XLOAD
>d3df	b3df	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9d ZAP
>d3e4	b3e4	ff					.text	$FF
.d3e5	b3e5					KeywordSet2:
>d3e5	b3e5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3e7	b3e7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3e9	b3e9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3eb	b3eb	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3f0	b3f0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3f5	b3f5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3fa	b3fa	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3ff	b3ff	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d404	b404	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d409	b409	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d40e	b40e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d413	b413	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d418	b418	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d41d	b41d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d422	b422	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d427	b427	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d42c	b42c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d431	b431	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d436	b436	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d43b	b43b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d440	b440	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d445	b445	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d44a	b44a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d44f	b44f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d454	b454	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d459	b459	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d45e	b45e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d463	b463	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d468	b468	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d46d	b46d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d472	b472	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d477	b477	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d47c	b47c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d481	b481	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d486	b486	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d48b	b48b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d490	b490	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d495	b495	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d49a	b49a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d49f	b49f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4a4	b4a4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4a9	b4a9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ae	b4ae	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4b3	b4b3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4b8	b4b8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4bd	b4bd	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4c2	b4c2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4c7	b4c7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4cc	b4cc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4d1	b4d1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4d6	b4d6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4db	b4db	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4e0	b4e0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4e5	b4e5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ea	b4ea	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ef	b4ef	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4f4	b4f4	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4f9	b4f9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4fe	b4fe	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d503	b503	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d508	b508	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d50d	b50d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d512	b512	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d517	b517	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d51c	b51c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d521	b521	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d526	b526	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d52b	b52b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d530	b530	ff					.text	$FF
.d531	b531					Export_TKListConvertLine:
.d531	b531	48		pha				pha 								; save indent on the stack
.d532	b532	9c 9d 02	stz $029d			stz 	tbOffset
.d535	b535	9c ad 02	stz $02ad			stz 	tokenBuffer
.d538	b538	9c a9 02	stz $02a9			stz 	currentListColour
.d53b	b53b	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d53d	b53d	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d540	b540	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d542	b542	b1 30		lda ($30),y			lda 	(codePtr),y
.d544	b544	aa		tax				tax
.d545	b545	88		dey				dey
.d546	b546	b1 30		lda ($30),y			lda 	(codePtr),y
.d548	b548	20 2b b7	jsr $b72b			jsr 	LCLWriteNumberXA
.d54b	b54b	68		pla				pla 								; adjustment to indent
.d54c	b54c	48		pha				pha 								; save on stack
.d54d	b54d	10 0c		bpl $b55b			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d54f	b54f	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d550	b550	6d a6 02	adc $02a6			adc 	listIndent
.d553	b553	8d a6 02	sta $02a6			sta 	listIndent
.d556	b556	10 03		bpl $b55b			bpl 	_LCNoAdjust
.d558	b558	9c a6 02	stz $02a6			stz 	listIndent
.d55b	b55b					_LCNoAdjust:
.d55b	b55b	18		clc				clc		 							; work out actual indent.
.d55c	b55c	ad a6 02	lda $02a6			lda 	listIndent
.d55f	b55f	0a		asl a				asl 	a
.d560	b560	69 07		adc #$07			adc 	#7
.d562	b562	85 36		sta $36				sta 	zTemp0
.d564	b564					_LCPadOut:
.d564	b564	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d566	b566	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d569	b569	ad 9d 02	lda $029d			lda 	tbOffset
.d56c	b56c	c5 36		cmp $36				cmp 	zTemp0
.d56e	b56e	d0 f4		bne $b564			bne 	_LCPadOut
.d570	b570	a0 03		ldy #$03			ldy 	#3 							; start position.
.d572	b572					_LCMainLoop:
.d572	b572	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d574	b574	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d577	b577	b1 30		lda ($30),y			lda 	(codePtr),y
.d579	b579	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d57b	b57b	f0 17		beq $b594			beq 	_LCExit
.d57d	b57d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d57f	b57f	90 1e		bcc $b59f			bcc 	_LCDoubles
.d581	b581	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d583	b583	90 2a		bcc $b5af			bcc 	_LCShiftPunc
.d585	b585	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d587	b587	90 35		bcc $b5be			bcc 	_LCPunctuation
.d589	b589	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d58b	b58b	90 51		bcc $b5de			bcc 	_LCIdentifiers
.d58d	b58d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d58f	b58f	90 73		bcc $b604			bcc 	_LCTokens
.d591	b591	4c 64 b6	jmp $b664			jmp 	_LCData 					; 254-5 are data objects
.d594	b594					_LCExit:
.d594	b594	68		pla				pla 								; get old indent adjust
.d595	b595	30 07		bmi $b59e			bmi 	_LCExit2
.d597	b597	18		clc				clc 								; add to indent if +ve
.d598	b598	6d a6 02	adc $02a6			adc 	listIndent
.d59b	b59b	8d a6 02	sta $02a6			sta 	listIndent
.d59e	b59e					_LCExit2:
.d59e	b59e	60		rts				rts
.d59f	b59f					_LCDoubles:
.d59f	b59f	48		pha				pha
.d5a0	b5a0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5a1	b5a1	29 02		and #$02			and 	#2
.d5a3	b5a3	09 3c		ora #$3c			ora 	#60 						; make < >
.d5a5	b5a5	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5a8	b5a8	68		pla				pla 								; restore, do lower bit
.d5a9	b5a9	29 03		and #$03			and 	#3
.d5ab	b5ab	09 3c		ora #$3c			ora 	#60
.d5ad	b5ad	80 0f		bra $b5be			bra		_LCPunctuation 				; print, increment, loop
.d5af	b5af					_LCShiftPunc:
.d5af	b5af	aa		tax				tax 								; save in X
.d5b0	b5b0	29 07		and #$07			and 	#7 							; lower 3 bits
.d5b2	b5b2	f0 02		beq $b5b6			beq 	_LCNoAdd
.d5b4	b5b4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5b6	b5b6					_LCNoAdd:
.d5b6	b5b6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5b8	b5b8	90 02		bcc $b5bc			bcc 	_LCNoAdd2
.d5ba	b5ba	09 20		ora #$20			ora 	#32 						; adds $20
.d5bc	b5bc					_LCNoAdd2:
.d5bc	b5bc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5be	b5be					_LCPunctuation:
.d5be	b5be	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5c0	b5c0	d0 03		bne $b5c5			bne 	_LCPContinue
.d5c2	b5c2	20 d9 b6	jsr $b6d9			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5c5	b5c5					_LCPContinue:
.d5c5	b5c5	c9 2e		cmp #$2e			cmp 	#'.'
.d5c7	b5c7	f0 08		beq $b5d1			beq 	_LCPIsConstant
.d5c9	b5c9	c9 30		cmp #$30			cmp 	#'0'
.d5cb	b5cb	90 0b		bcc $b5d8			bcc 	_LCPNotConstant
.d5cd	b5cd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5cf	b5cf	b0 07		bcs $b5d8			bcs 	_LCPNotConstant
.d5d1	b5d1					_LCPIsConstant:
.d5d1	b5d1	48		pha				pha
.d5d2	b5d2	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5d4	b5d4	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5d7	b5d7	68		pla				pla
.d5d8	b5d8					_LCPNotConstant:
.d5d8	b5d8	c8		iny				iny 								; consume character
.d5d9	b5d9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite 					; write it out.
.d5dc	b5dc	80 94		bra $b572			bra 	_LCMainLoop 				; go round again.
.d5de	b5de					_LCIdentifiers:
.d5de	b5de	18		clc				clc 								; convert to physical address
.d5df	b5df	69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5e1	b5e1	85 37		sta $37				sta 	zTemp0+1
.d5e3	b5e3	c8		iny				iny
.d5e4	b5e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e6	b5e6	85 36		sta $36				sta 	zTemp0
.d5e8	b5e8	c8		iny				iny
.d5e9	b5e9	5a		phy				phy 								; save position
.d5ea	b5ea	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5ec	b5ec	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5ef	b5ef	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5f1	b5f1					_LCOutIdentifier:
.d5f1	b5f1	c8		iny				iny
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5f4	b5f4	29 7f		and #$7f			and 	#$7F
.d5f6	b5f6	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d5f9	b5f9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5fc	b5fc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5fe	b5fe	10 f1		bpl $b5f1			bpl 	_LCOutIdentifier
.d600	b600	7a		ply				ply 								; restore position
.d601	b601	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d604	b604					_LCTokens:
.d604	b604	aa		tax				tax 								; token in X
.d605	b605	a9 e5		lda #$e5			lda 	#((KeywordSet2) & $FF)
.d607	b607	85 36		sta $36				sta 	0+zTemp0
.d609	b609	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d60b	b60b	85 37		sta $37				sta 	1+zTemp0
.d60d	b60d	e0 82		cpx #$82			cpx 	#$82
.d60f	b60f	f0 16		beq $b627			beq 	_LCUseShift
.d611	b611	a9 25		lda #$25			lda 	#((KeywordSet1) & $FF)
.d613	b613	85 36		sta $36				sta 	0+zTemp0
.d615	b615	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d617	b617	85 37		sta $37				sta 	1+zTemp0
.d619	b619	e0 81		cpx #$81			cpx 	#$81
.d61b	b61b	f0 0a		beq $b627			beq 	_LCUseShift
.d61d	b61d	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d61f	b61f	85 36		sta $36				sta 	0+zTemp0
.d621	b621	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d623	b623	85 37		sta $37				sta 	1+zTemp0
.d625	b625	80 01		bra $b628			bra 	_LCNoShift
.d627	b627					_LCUseShift:
.d627	b627	c8		iny				iny
.d628	b628					_LCNoShift:
.d628	b628	20 ed b6	jsr $b6ed			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d62b	b62b	b1 30		lda ($30),y			lda 	(codePtr),y
.d62d	b62d	aa		tax				tax 								; into X
.d62e	b62e					_LCFindText:
.d62e	b62e	ca		dex				dex
.d62f	b62f	10 0e		bpl $b63f			bpl 	_LCFoundText 				; found text.
.d631	b631	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d633	b633	1a		inc a				inc 	a 							; one extra for size
.d634	b634	38		sec				sec 								; one extra for checksum
.d635	b635	65 36		adc $36				adc 	zTemp0 						; go to next token
.d637	b637	85 36		sta $36				sta 	zTemp0
.d639	b639	90 f3		bcc $b62e			bcc 	_LCFindText
.d63b	b63b	e6 37		inc $37				inc 	zTemp0+1
.d63d	b63d	80 ef		bra $b62e			bra 	_LCFindText
.d63f	b63f					_LCFoundText:
.d63f	b63f	5a		phy				phy 								; save List position
.d640	b640	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d642	b642	aa		tax				tax
.d643	b643	a9 86		lda #$86			lda 	#CLIToken+$80
.d645	b645	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d648	b648	a0 02		ldy #$02			ldy 	#2
.d64a	b64a					_LCCopyToken:
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y
.d64c	b64c	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d64f	b64f	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d652	b652	c8		iny				iny
.d653	b653	ca		dex				dex
.d654	b654	d0 f4		bne $b64a			bne 	_LCCopyToken
.d656	b656	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d658	b658	f0 05		beq $b65f			beq 	_LCNoSpace
.d65a	b65a	a9 20		lda #$20			lda 	#' '
.d65c	b65c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d65f	b65f					_LCNoSpace:
.d65f	b65f	7a		ply				ply 								; restore position.
.d660	b660	c8		iny				iny 								; consume token
.d661	b661	4c 72 b5	jmp $b572			jmp 	_LCMainLoop 				; and go around again.
.d664	b664					_LCData:
.d664	b664	48		pha				pha 								; save type $FE/$FF
.d665	b665	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d667	b667	c9 fe		cmp #$fe			cmp 	#$FE
.d669	b669	f0 22		beq $b68d			beq 	_LCHaveOpener
.d66b	b66b	a2 22		ldx #$22			ldx 	#'"'
.d66d	b66d	a9 8f		lda #$8f			lda 	#CLIData+$80
.d66f	b66f	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d672	b672	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d674	b674	d0 17		bne $b68d			bne 	_LCHaveOpener
.d676	b676	88		dey				dey 								; what precedes it ?
.d677	b677	b1 30		lda ($30),y			lda 	(codePtr),y
.d679	b679	c8		iny				iny
.d67a	b67a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d67c	b67c	d0 0f		bne $b68d			bne 	_LCHaveOpener
.d67e	b67e	a9 09		lda #$09			lda 	#9 							; tab
.d680	b680	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d683	b683	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d685	b685	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d688	b688	a9 85		lda #$85			lda 	#CLIFComment+$80
.d68a	b68a	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d68d	b68d					_LCHaveOpener:
.d68d	b68d	8a		txa				txa 								; output prefix (# or ")
.d68e	b68e	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d691	b691	c8		iny				iny 								; get count
.d692	b692	b1 30		lda ($30),y			lda 	(codePtr),y
.d694	b694	aa		tax				tax
.d695	b695	c8		iny				iny 								; point at first character
.d696	b696					_LCOutData:
.d696	b696	b1 30		lda ($30),y			lda 	(codePtr),y
.d698	b698	c9 00		cmp #$00			cmp 	#0
.d69a	b69a	f0 03		beq $b69f			beq 	_LCNoPrint
.d69c	b69c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d69f	b69f					_LCNoPrint:
.d69f	b69f	c8		iny				iny
.d6a0	b6a0	ca		dex				dex
.d6a1	b6a1	d0 f3		bne $b696			bne 	_LCOutData
.d6a3	b6a3	68		pla				pla 								; closing " required ?
.d6a4	b6a4	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6a6	b6a6	d0 0f		bne $b6b7			bne 	_LCNoQuote
.d6a8	b6a8	a9 22		lda #$22			lda 	#'"'
.d6aa	b6aa	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6ad	b6ad	ad f5 04	lda $04f5			lda 	EXTTextColour
.d6b0	b6b0	29 0f		and #$0f			and 	#$0F
.d6b2	b6b2	09 90		ora #$90			ora 	#$90
.d6b4	b6b4	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6b7	b6b7					_LCNoQuote:
.d6b7	b6b7	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d6ba	b6ba					LCLWriteColour:
.d6ba	b6ba	cd a9 02	cmp $02a9			cmp 	currentListColour 			; has the colour changed
.d6bd	b6bd	8d a9 02	sta $02a9			sta 	currentListColour 			; (update it anyway)
.d6c0	b6c0	d0 01		bne $b6c3			bne 	LCLWrite 					; if different, output it
.d6c2	b6c2	60		rts				rts
.d6c3	b6c3					LCLWrite:
.d6c3	b6c3	da		phx				phx
.d6c4	b6c4	ae 9d 02	ldx $029d			ldx 	tbOffset 					; write out make ASCIIZ
.d6c7	b6c7	9d ad 02	sta $02ad,x			sta 	tokenBuffer,x
.d6ca	b6ca	9e ae 02	stz $02ae,x			stz 	tokenBuffer+1,x
.d6cd	b6cd	ee 9d 02	inc $029d			inc 	tbOffset 					; bump the position
.d6d0	b6d0	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6d2	b6d2	30 03		bmi $b6d7			bmi 	_LCLNoColour
.d6d4	b6d4	8d a7 02	sta $02a7			sta 	lcLastCharacter
.d6d7	b6d7					_LCLNoColour:
.d6d7	b6d7	fa		plx				plx
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					LCLDeleteLastSpace:
.d6d9	b6d9	48		pha				pha
.d6da	b6da	da		phx				phx
.d6db	b6db	ae 9d 02	ldx $029d			ldx 	tbOffset
.d6de	b6de	f0 0a		beq $b6ea			beq 	_LCDLSExit
.d6e0	b6e0	bd ac 02	lda $02ac,x			lda 	tokenBuffer-1,x
.d6e3	b6e3	c9 20		cmp #$20			cmp 	#' '
.d6e5	b6e5	d0 03		bne $b6ea			bne 	_LCDLSExit
.d6e7	b6e7	ce 9d 02	dec $029d			dec 	tbOffset
.d6ea	b6ea					_LCDLSExit:
.d6ea	b6ea	fa		plx				plx
.d6eb	b6eb	68		pla				pla
.d6ec	b6ec	60		rts				rts
.d6ed	b6ed					LCLCheckSpaceRequired:
.d6ed	b6ed	ad a7 02	lda $02a7			lda 	lcLastCharacter 			; check last character
.d6f0	b6f0	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6f2	b6f2	f0 1b		beq $b70f			beq 	_LCCSRSpace
.d6f4	b6f4	c9 29		cmp #$29			cmp 	#')'
.d6f6	b6f6	f0 17		beq $b70f			beq 	_LCCSRSpace
.d6f8	b6f8	c9 23		cmp #$23			cmp 	#'#'
.d6fa	b6fa	f0 13		beq $b70f			beq 	_LCCSRSpace
.d6fc	b6fc	20 15 b7	jsr $b715			jsr 	LCLLowerCase 				; saves a little effort
.d6ff	b6ff	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d701	b701	90 11		bcc $b714			bcc 	_LCCSRExit
.d703	b703	c9 3a		cmp #$3a			cmp 	#"9"+1
.d705	b705	90 08		bcc $b70f			bcc 	_LCCSRSpace
.d707	b707	c9 61		cmp #$61			cmp 	#"a"
.d709	b709	90 09		bcc $b714			bcc 	_LCCSRExit
.d70b	b70b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d70d	b70d	b0 05		bcs $b714			bcs 	_LCCSRExit
.d70f	b70f					_LCCSRSpace:
.d70f	b70f	a9 20		lda #$20			lda 	#' '
.d711	b711	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d714	b714					_LCCSRExit:
.d714	b714	60		rts				rts
.d715	b715					LCLLowerCase:
.d715	b715	c9 41		cmp #$41			cmp 	#"A"
.d717	b717	90 06		bcc $b71f			bcc 	_LCLLCOut
.d719	b719	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d71b	b71b	b0 02		bcs $b71f			bcs 	_LCLLCOut
.d71d	b71d	69 20		adc #$20			adc 	#$20
.d71f	b71f					_LCLLCOut:
.d71f	b71f	60		rts				rts
.d720	b720					LCLUpperCase:
.d720	b720	c9 61		cmp #$61			cmp 	#"a"
.d722	b722	90 06		bcc $b72a			bcc 	_LCLUCOut
.d724	b724	c9 7b		cmp #$7b			cmp 	#"z"+1
.d726	b726	b0 02		bcs $b72a			bcs 	_LCLUCOut
.d728	b728	e9 1f		sbc #$1f			sbc 	#$1F
.d72a	b72a					_LCLUCOut:
.d72a	b72a	60		rts				rts
.d72b	b72b					LCLWriteNumberXA:
.d72b	b72b	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d72d	b72d					_LCLWNLoop1:
.d72d	b72d	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d72f	b72f					_LCLWNLoop2:
.d72f	b72f	48		pha				pha 								; save initial LSB
.d730	b730	38		sec				sec
.d731	b731	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d733	b733	f9 64 b7	sbc $b764,y			sbc 	_LCLWNTable,y
.d736	b736	48		pha				pha
.d737	b737	8a		txa				txa
.d738	b738	f9 65 b7	sbc $b765,y			sbc 	_LCLWNTable+1,y
.d73b	b73b	90 07		bcc $b744			bcc 	_LCLWNUnderflow
.d73d	b73d	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d73f	b73f	aa		tax				tax 								; update X
.d740	b740	68		pla				pla 								; restore A
.d741	b741	7a		ply				ply 								; throw original
.d742	b742	80 eb		bra $b72f			bra 	_LCLWNLoop2 				; try again.
.d744	b744					_LCLWNUnderflow:
.d744	b744	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d746	b746	d0 06		bne $b74e			bne 	_LCLWNOut
.d748	b748	ad 9d 02	lda $029d			lda 	tbOffset 					; suppress leading zeroes
.d74b	b74b	3a		dec a				dec 	a
.d74c	b74c	f0 04		beq $b752			beq 	_LCLWNNext
.d74e	b74e					_LCLWNOut:
.d74e	b74e	98		tya				tya
.d74f	b74f	20 5e b7	jsr $b75e			jsr 	_LCLWNOutDigit
.d752	b752					_LCLWNNext:
.d752	b752	7a		ply				ply 							 	; restore original value.
.d753	b753	68		pla				pla
.d754	b754	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d756	b756	c8		iny				iny
.d757	b757	c8		iny				iny
.d758	b758	84 37		sty $37				sty 	zTemp0+1
.d75a	b75a	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d75c	b75c	d0 cf		bne $b72d			bne 	_LCLWNLoop1
.d75e	b75e					_LCLWNOutDigit:
.d75e	b75e	09 30		ora #$30			ora 	#'0'
.d760	b760	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d763	b763	60		rts				rts
.d764	b764					_LCLWNTable:
>d764	b764	10 27						.word 	10000
>d766	b766	e8 03						.word 	1000
>d768	b768	64 00						.word 	100
>d76a	b76a	0a 00						.word 	10
.d76c	b76c					TOKSearchTable:
.d76c	b76c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d76e	b76e	85 36		sta $36				sta 	zTemp0
.d770	b770	a0 00		ldy #$00			ldy 	#0
.d772	b772	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d774	b774	85 38		sta $38				sta 	zTemp1
.d776	b776					_TSTLoop:
.d776	b776	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d778	b778	30 49		bmi $b7c3			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d77a	b77a	f0 2e		beq $b7aa			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d77c	b77c	c8		iny				iny 								; get the hash
.d77d	b77d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d77f	b77f	88		dey				dey
.d780	b780	cd 83 02	cmp $0283			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d783	b783	d0 25		bne $b7aa			bne 	_TSTNext
.d785	b785	ad 82 02	lda $0282			lda 	identTypeEnd 				; get length of identifier from end-start
.d788	b788	38		sec				sec
.d789	b789	ed 80 02	sbc $0280			sbc 	identStart
.d78c	b78c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d78e	b78e	d0 1a		bne $b7aa			bne 	_TSTNext
.d790	b790	5a		phy				phy 								; save Y , we might fail to match.
.d791	b791	c8		iny				iny 								; point to text
.d792	b792	c8		iny				iny
.d793	b793	ae 80 02	ldx $0280			ldx 	identStart 					; offset in line buffer in X
.d796	b796					_TSTCompareName:
.d796	b796	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; compare text.
.d799	b799	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d79b	b79b	d0 0c		bne $b7a9			bne 	_TSTNextPullY 				; fail, pullY and do next
.d79d	b79d	e8		inx				inx
.d79e	b79e	c8		iny				iny
.d79f	b79f	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; complete match.
.d7a2	b7a2	d0 f2		bne $b796			bne 	_TSTCompareName
.d7a4	b7a4	7a		ply				ply 								; throw Y
.d7a5	b7a5	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7a7	b7a7	38		sec				sec 								; return with CS = passed.
.d7a8	b7a8	60		rts				rts
.d7a9	b7a9					_TSTNextPullY:
.d7a9	b7a9	7a		ply				ply 								; restore current, fall through.
.d7aa	b7aa					_TSTNext:
.d7aa	b7aa	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ac	b7ac	98		tya				tya
.d7ad	b7ad	18		clc				clc
.d7ae	b7ae	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7b0	b7b0	1a		inc a				inc 	a 							; +1
.d7b1	b7b1	1a		inc a				inc 	a 							; +2
.d7b2	b7b2	a8		tay				tay
.d7b3	b7b3	10 c1		bpl $b776			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7b5	b7b5	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7b6	b7b6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7b8	b7b8	18		clc				clc  								; but have tables > 255 bytes
.d7b9	b7b9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7bb	b7bb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7bd	b7bd	90 b7		bcc $b776			bcc 	_TSTLoop
.d7bf	b7bf	e6 37		inc $37				inc 	zTemp0+1
.d7c1	b7c1	80 b3		bra $b776			bra 	_TSTLoop
.d7c3	b7c3					_TSTFail:
.d7c3	b7c3	18		clc				clc
.d7c4	b7c4	60		rts				rts
.d7c5	b7c5					Export_TKTokeniseLine:
.d7c5	b7c5	20 92 b9	jsr $b992			jsr 	LCLFixLineBufferCase 		; fix line case
.d7c8	b7c8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7ca	b7ca	8d aa 02	sta $02aa			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7cd	b7cd	9c ab 02	stz $02ab			stz 	tokenLineNumber
.d7d0	b7d0	9c ac 02	stz $02ac			stz 	tokenLineNumber+1
.d7d3	b7d3	a2 ff		ldx #$ff			ldx 	#$FF
.d7d5	b7d5					_TKFindFirst:
.d7d5	b7d5	e8		inx				inx
.d7d6	b7d6	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.d7d9	b7d9	f0 62		beq $b83d			beq 	_TKExit
.d7db	b7db	c9 20		cmp #$20			cmp 	#' '
.d7dd	b7dd	90 f6		bcc $b7d5			bcc 	_TKFindFirst
.d7df	b7df	c9 30		cmp #$30			cmp 	#'0'
.d7e1	b7e1	90 07		bcc $b7ea			bcc 	_TKNoLineNumber
.d7e3	b7e3	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7e5	b7e5	b0 03		bcs $b7ea			bcs 	_TKNoLineNumber
.d7e7	b7e7	20 bc b9	jsr $b9bc			jsr 	TOKExtractLineNumber
.d7ea	b7ea					_TKNoLineNumber:
.d7ea	b7ea					_TKTokeniseLoop:
.d7ea	b7ea	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ed	b7ed	f0 4e		beq $b83d			beq 	_TKExit
.d7ef	b7ef	e8		inx				inx
.d7f0	b7f0	c9 20		cmp #$20			cmp 	#' '
.d7f2	b7f2	f0 f6		beq $b7ea			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7f4	b7f4	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7f5	b7f5	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7f7	b7f7	f0 68		beq $b861			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7f9	b7f9	c9 41		cmp #$41			cmp 	#'A'
.d7fb	b7fb	90 04		bcc $b801			bcc 	_TKTokenisePunctuation
.d7fd	b7fd	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7ff	b7ff	90 60		bcc $b861			bcc 	_TKTokeniseIdentifier
.d801	b801					_TKTokenisePunctuation:
.d801	b801	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d803	b803	f0 2e		beq $b833			beq 	_TKString
.d805	b805	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d807	b807	f0 2f		beq $b838			beq 	_TKHexConstant
.d809	b809	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d80b	b80b	f0 36		beq $b843			beq 	_TKCheckDouble
.d80d	b80d	c9 3e		cmp #$3e			cmp 	#'>'
.d80f	b80f	f0 32		beq $b843			beq 	_TKCheckDouble
.d811	b811					_TKStandardPunctuation:
.d811	b811	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d814	b814	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d816	b816	90 0e		bcc $b826			bcc 	_TKNoShift
.d818	b818	48		pha				pha 								; save. we are about to convert this punctuation token from
.d819	b819	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d81b	b81b	85 36		sta $36				sta 	zTemp0
.d81d	b81d	68		pla				pla
.d81e	b81e	29 20		and #$20			and 	#32 						; bit 5
.d820	b820	4a		lsr a				lsr 	a 							; shift into bit 3
.d821	b821	4a		lsr a				lsr 	a
.d822	b822	05 36		ora $36				ora 	zTemp0
.d824	b824	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d826	b826					_TKNoShift:
.d826	b826	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; write the punctuation character
.d829	b829	e8		inx				inx 								; consume the character
.d82a	b82a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d82c	b82c	d0 bc		bne $b7ea			bne 	_TKTokeniseLoop 			; and loop round again.
.d82e	b82e	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment 			; comment checl
.d831	b831	80 b7		bra $b7ea			bra 	_TKTokeniseLoop
.d833	b833					_TKString:
.d833	b833	20 21 b9	jsr $b921			jsr 	TOKTokenString
.d836	b836	80 b2		bra $b7ea			bra 	_TKTokeniseLoop
.d838	b838					_TKHexConstant:
.d838	b838	20 5c b9	jsr $b95c			jsr 	TOKHexConstant
.d83b	b83b	80 ad		bra $b7ea			bra 	_TKTokeniseLoop
.d83d	b83d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d83f	b83f	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d842	b842	60		rts				rts
.d843	b843					_TKCheckDouble:
.d843	b843	bd ab 03	lda $03ab,x			lda 	lineBuffer+1,x 				; get next character
.d846	b846	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d848	b848	90 c7		bcc $b811			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d84a	b84a	c9 3f		cmp #$3f			cmp 	#'>'+1
.d84c	b84c	b0 c3		bcs $b811			bcs 	_TKStandardPunctuation
.d84e	b84e	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d851	b851	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d853	b853	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d854	b854	7d ab 03	adc $03ab,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d857	b857	38		sec				sec
.d858	b858	e9 3c		sbc #$3c			sbc 	#'<'
.d85a	b85a	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; this is in the range 0-7
.d85d	b85d	e8		inx				inx 								; consume both
.d85e	b85e	e8		inx				inx
.d85f	b85f	80 89		bra $b7ea			bra 	_TKTokeniseLoop
.d861	b861					_TKTokeniseIdentifier:
.d861	b861	8e 80 02	stx $0280			stx 	identStart 					; save start
.d864	b864	9c 84 02	stz $0284			stz 	identTypeByte 				; zero the type byte
.d867	b867					_TKCheckLoop:
.d867	b867	e8		inx				inx 								; look at next, we know first is identifier already.
.d868	b868	bd aa 03	lda $03aa,x			lda  	lineBuffer,x
.d86b	b86b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d86d	b86d	f0 f8		beq $b867			beq 	_TKCheckLoop
.d86f	b86f	c9 30		cmp #$30			cmp	 	#"0"
.d871	b871	90 0c		bcc $b87f			bcc 	_TKEndIdentifier
.d873	b873	c9 3a		cmp #$3a			cmp 	#"9"+1
.d875	b875	90 f0		bcc $b867			bcc 	_TKCheckLoop
.d877	b877	c9 41		cmp #$41			cmp	 	#"A"
.d879	b879	90 04		bcc $b87f			bcc 	_TKEndIdentifier
.d87b	b87b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d87d	b87d	90 e8		bcc $b867			bcc 	_TKCheckLoop
.d87f	b87f					_TKEndIdentifier:
.d87f	b87f	8e 81 02	stx $0281			stx 	identTypeStart 				; save start of type text (if any !)
.d882	b882	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d884	b884	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d886	b886	f0 06		beq $b88e			beq 	_TKHasTypeCharacter
.d888	b888	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d88a	b88a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d88c	b88c	d0 07		bne $b895			bne 	_TKNoTypeCharacter
.d88e	b88e					_TKHasTypeCharacter:
.d88e	b88e	8c 84 02	sty $0284			sty 	identTypeByte 				; has # or $, save the type
.d891	b891	e8		inx				inx 								; consume the type character
.d892	b892	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.d895	b895					_TKNoTypeCharacter:
.d895	b895	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d897	b897	d0 09		bne $b8a2			bne 	_TKNoArray
.d899	b899	e8		inx				inx 								; skip the (
.d89a	b89a	ad 84 02	lda $0284			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d89d	b89d	09 04		ora #$04			ora 	#$04
.d89f	b89f	8d 84 02	sta $0284			sta 	identTypeByte
.d8a2	b8a2					_TKNoArray:
.d8a2	b8a2	8e 82 02	stx $0282			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8a5	b8a5	20 7d b9	jsr $b97d			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8a8	b8a8	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8aa	b8aa	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8ac	b8ac	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8af	b8af	a2 00		ldx #$00			ldx 	#0
.d8b1	b8b1	b0 1f		bcs $b8d2			bcs 	_TKFoundToken
.d8b3	b8b3	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8b5	b8b5	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.d8b7	b8b7	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8ba	b8ba	a2 81		ldx #$81			ldx 	#$81
.d8bc	b8bc	b0 14		bcs $b8d2			bcs 	_TKFoundToken
.d8be	b8be	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d8c0	b8c0	a9 e5		lda #$e5			lda 	#(KeywordSet2) & $FF
.d8c2	b8c2	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8c5	b8c5	a2 82		ldx #$82			ldx 	#$82
.d8c7	b8c7	b0 09		bcs $b8d2			bcs 	_TKFoundToken
.d8c9	b8c9	20 0d ba	jsr $ba0d			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8cc	b8cc	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; X points to following byte
.d8cf	b8cf	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8d2	b8d2					_TKFoundToken:
.d8d2	b8d2	48		pha				pha 								; save token
.d8d3	b8d3	8a		txa				txa 								; shift in X, is there one ?
.d8d4	b8d4	f0 03		beq $b8d9			beq 	_TKNoTShift
.d8d6	b8d6	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; if so, write it out
.d8d9	b8d9					_TKNoTShift:
.d8d9	b8d9	68		pla				pla 								; restore and write token
.d8da	b8da	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d8dd	b8dd	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8df	b8df	d0 0d		bne $b8ee			bne 	_TKNotRem 			 		; not shifted ?
.d8e1	b8e1	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d8e3	b8e3	d0 09		bne $b8ee			bne 	_TKNotRem
.d8e5	b8e5	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; check if comment follows.
.d8e8	b8e8	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment
.d8eb	b8eb	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop
.d8ee	b8ee					_TKNotRem:
.d8ee	b8ee	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; X points to following byte
.d8f1	b8f1	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8f4	b8f4					TOKCheckComment:
.d8f4	b8f4	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; skip over space
.d8f7	b8f7	e8		inx				inx
.d8f8	b8f8	c9 20		cmp #$20			cmp 	#' '
.d8fa	b8fa	f0 f8		beq $b8f4			beq 	TOKCheckComment
.d8fc	b8fc	ca		dex				dex 								; first non space character
.d8fd	b8fd	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8ff	b8ff	f0 1f		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d901	b901	c9 00		cmp #$00			cmp 	#0 							; EOL
.d903	b903	f0 1b		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d905	b905	da		phx				phx
.d906	b906					_TOKCCLowerCase:
.d906	b906	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d909	b909	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d90b	b90b	90 09		bcc $b916			bcc 	_TOKKCNotUC
.d90d	b90d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d90f	b90f	b0 05		bcs $b916			bcs 	_TOKKCNotUC
.d911	b911	49 20		eor #$20			eor 	#$20
.d913	b913	9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.d916	b916					_TOKKCNotUC:
.d916	b916	e8		inx				inx
.d917	b917	c9 00		cmp #$00			cmp 	#0
.d919	b919	d0 eb		bne $b906			bne 	_TOKCCLowerCase
.d91b	b91b	fa		plx				plx
.d91c	b91c	ca		dex				dex 								; tokenise string expects initial skip.
.d91d	b91d	20 21 b9	jsr $b921			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d920	b920					_TOKCCExit:
.d920	b920	60		rts				rts
.d921	b921					TOKTokenString:
.d921	b921	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d923	b923	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d926	b926	e8		inx				inx									; start of quoted string.
.d927	b927	da		phx				phx 								; push start of string on top
.d928	b928	ca		dex				dex 								; because we pre-increment
.d929	b929					_TSFindEnd:
.d929	b929	e8		inx				inx
.d92a	b92a	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; next character
.d92d	b92d	f0 04		beq $b933			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d92f	b92f	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d931	b931	d0 f6		bne $b929			bne 	_TSFindEnd
.d933	b933					_TSEndOfString:
.d933	b933	7a		ply				ply  								; so now Y is first character, X is character after end.
.d934	b934	48		pha				pha 								; save terminating character
.d935	b935	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d938	b938	68		pla				pla 								; terminating character
.d939	b939	f0 01		beq $b93c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d93b	b93b	e8		inx				inx
.d93c	b93c					_TSNotQuote:
.d93c	b93c	60		rts				rts
.d93d	b93d					TOKWriteBlockXY:
.d93d	b93d	86 36		stx $36				stx 	zTemp0 						; save end character
.d93f	b93f	98		tya				tya 								; use 2's complement to work out the byte size
.d940	b940	49 ff		eor #$ff			eor 	#$FF
.d942	b942	38		sec				sec
.d943	b943	65 36		adc $36				adc 	zTemp0
.d945	b945	1a		inc a				inc 	a 							; one extra for NULL
.d946	b946	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d949	b949					_TOBlockLoop:
.d949	b949	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d94b	b94b	f0 09		beq $b956			beq 	_TOBlockExit
.d94d	b94d	b9 aa 03	lda $03aa,y			lda 	lineBuffer,y 				; write byte out.
.d950	b950	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d953	b953	c8		iny				iny
.d954	b954	80 f3		bra $b949			bra 	_TOBlockLoop
.d956	b956					_TOBlockExit:
.d956	b956	a9 00		lda #$00			lda 	#0 							; add NULL.
.d958	b958	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d95b	b95b	60		rts				rts
.d95c	b95c					TOKHexConstant:
.d95c	b95c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d95e	b95e	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d961	b961	e8		inx				inx									; start of quoted string.
.d962	b962	da		phx				phx 								; push start of constant on top
.d963	b963	ca		dex				dex
.d964	b964					_THFindLoop:
.d964	b964	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d965	b965	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; the hex constant is.
.d968	b968	c9 30		cmp #$30			cmp 	#"0"
.d96a	b96a	90 0c		bcc $b978			bcc 	_THFoundEnd
.d96c	b96c	c9 3a		cmp #$3a			cmp 	#"9"+1
.d96e	b96e	90 f4		bcc $b964			bcc 	_THFindLoop
.d970	b970	c9 41		cmp #$41			cmp 	#"A"
.d972	b972	90 04		bcc $b978			bcc 	_THFoundEnd
.d974	b974	c9 47		cmp #$47			cmp 	#"F"+1
.d976	b976	90 ec		bcc $b964			bcc 	_THFindLoop
.d978	b978					_THFoundEnd:
.d978	b978	7a		ply				ply 								; restore start
.d979	b979	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; output the block
.d97c	b97c	60		rts				rts
.d97d	b97d					TOKCalculateHash:
.d97d	b97d	da		phx				phx
.d97e	b97e	ae 80 02	ldx $0280			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d981	b981	a9 00		lda #$00			lda 	#0
.d983	b983					_TCHLoop:
.d983	b983	18		clc				clc
.d984	b984	7d aa 03	adc $03aa,x			adc 	lineBuffer,x
.d987	b987	e8		inx				inx
.d988	b988	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d98b	b98b	d0 f6		bne $b983			bne 	_TCHLoop
.d98d	b98d	8d 83 02	sta $0283			sta 	identHash 					; save the hash
.d990	b990	fa		plx				plx
.d991	b991	60		rts				rts
.d992	b992					LCLFixLineBufferCase:
.d992	b992	a2 00		ldx #$00			ldx 	#0
.d994	b994					_FLBCLoop:
.d994	b994	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get next character
.d997	b997	f0 22		beq $b9bb			beq 	_FLBCExit 					; end of string.
.d999	b999	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d99b	b99b	f0 11		beq $b9ae			beq 	_FLBCInQuotes
.d99d	b99d	e8		inx				inx
.d99e	b99e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9a0	b9a0	90 f2		bcc $b994			bcc 	_FLBCLoop
.d9a2	b9a2	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9a4	b9a4	b0 ee		bcs $b994			bcs 	_FLBCLoop
.d9a6	b9a6	38		sec				sec 								; make U/C
.d9a7	b9a7	e9 20		sbc #$20			sbc 	#32
.d9a9	b9a9	9d a9 03	sta $03a9,x			sta	 	lineBuffer-1,x 				; write back
.d9ac	b9ac	80 e6		bra $b994			bra 	_FLBCLoop
.d9ae	b9ae					_FLBCInQuotes:
.d9ae	b9ae	e8		inx				inx 								; advance
.d9af	b9af	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get next
.d9b2	b9b2	f0 07		beq $b9bb			beq 	_FLBCExit 					; exit on EOS
.d9b4	b9b4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9b6	b9b6	d0 f6		bne $b9ae			bne 	_FLBCInQuotes
.d9b8	b9b8	e8		inx				inx 								; skip over it
.d9b9	b9b9	80 d9		bra $b994			bra 	_FLBCLoop
.d9bb	b9bb					_FLBCExit:
.d9bb	b9bb	60		rts				rts
.d9bc	b9bc					TOKExtractLineNumber:
.d9bc	b9bc	ad ac 02	lda $02ac			lda 	tokenLineNumber+1 			; push current value on stack
.d9bf	b9bf	48		pha				pha
.d9c0	b9c0	ad ab 02	lda $02ab			lda 	tokenLineNumber
.d9c3	b9c3	48		pha				pha
.d9c4	b9c4	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 2
.d9c7	b9c7	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 4
.d9ca	b9ca	18		clc				clc 								; add stacked value
.d9cb	b9cb	68		pla				pla
.d9cc	b9cc	6d ab 02	adc $02ab			adc 	tokenLineNumber
.d9cf	b9cf	8d ab 02	sta $02ab			sta 	tokenLineNumber
.d9d2	b9d2	68		pla				pla
.d9d3	b9d3	6d ac 02	adc $02ac			adc 	tokenLineNumber+1
.d9d6	b9d6	8d ac 02	sta $02ac			sta 	tokenLineNumber+1 			; line # x 5
.d9d9	b9d9	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 10
.d9dc	b9dc	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get and consume character
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	29 0f		and #$0f			and 	#15 						; add to line #
.d9e2	b9e2	18		clc				clc
.d9e3	b9e3	6d ab 02	adc $02ab			adc 	tokenLineNumber
.d9e6	b9e6	8d ab 02	sta $02ab			sta 	tokenLineNumber
.d9e9	b9e9	90 03		bcc $b9ee			bcc 	_TLENNoCarry
.d9eb	b9eb	ee ac 02	inc $02ac			inc 	tokenLineNumber+1
.d9ee	b9ee					_TLENNoCarry:
.d9ee	b9ee	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; more digits ?
.d9f1	b9f1	c9 30		cmp #$30			cmp 	#'0'
.d9f3	b9f3	90 04		bcc $b9f9			bcc 	_TLENExit
.d9f5	b9f5	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9f7	b9f7	90 c3		bcc $b9bc			bcc 	TOKExtractLineNumber
.d9f9	b9f9					_TLENExit:
.d9f9	b9f9	60		rts				rts
.d9fa	b9fa					_LCLNTimes2:
.d9fa	b9fa	0e ab 02	asl $02ab			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9fd	b9fd	2e ac 02	rol $02ac			rol 	tokenLineNumber+1
.da00	ba00	60		rts				rts
.da01	ba01					TOKWriteByte:
.da01	ba01	da		phx				phx
.da02	ba02	ae aa 02	ldx $02aa			ldx 	tokenOffset 				; next slot to write to
.da05	ba05	9d aa 02	sta $02aa,x			sta 	tokenOffset,x 				; write byte out
.da08	ba08	ee aa 02	inc $02aa			inc 	tokenOffset 				; advance slot.
.da0b	ba0b	fa		plx				plx
.da0c	ba0c	60		rts				rts
.da0d	ba0d					TOKCheckCreateVariableRecord:
.da0d	ba0d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da0f	ba0f	85 36		sta $36				sta 	0+zTemp0
.da11	ba11	a9 08		lda #$08			lda 	#((VariableSpace) >> 8)
.da13	ba13	85 37		sta $37				sta 	1+zTemp0
.da15	ba15					_CCVSearch:
.da15	ba15	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da17	ba17	f0 2c		beq $ba45			beq 	_CCVFail
.da19	ba19	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da1b	ba1b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da1d	ba1d	cd 83 02	cmp $0283			cmp 	identHash 	  				; if not, try the next.
.da20	ba20	d0 16		bne $ba38			bne 	_CCVNext
.da22	ba22	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da24	ba24	ae 80 02	ldx $0280			ldx 	identStart
.da27	ba27					_CCVCompare:
.da27	ba27	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da2a	ba2a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da2c	ba2c	e8		inx				inx 								; advance pointers
.da2d	ba2d	c8		iny				iny
.da2e	ba2e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da2f	ba2f	d0 07		bne $ba38			bne 	_CCVNext  					; didn't match go to next.
.da31	ba31	90 f4		bcc $ba27			bcc 	_CCVCompare 				; not finished yet.
.da33	ba33	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; matched whole thing ?
.da36	ba36	f0 41		beq $ba79			beq 	_CCVFound 					; yes, we were successful
.da38	ba38					_CCVNext:
.da38	ba38	18		clc				clc 								; go to next record.
.da39	ba39	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da3b	ba3b	65 36		adc $36				adc 	zTemp0
.da3d	ba3d	85 36		sta $36				sta 	zTemp0
.da3f	ba3f	90 d4		bcc $ba15			bcc 	_CCVSearch
.da41	ba41	e6 37		inc $37				inc 	zTemp0+1
.da43	ba43	80 d0		bra $ba15			bra 	_CCVSearch
.da45	ba45					_CCVFail:
.da45	ba45	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da47	ba47	ad 83 02	lda $0283			lda 	identHash
.da4a	ba4a	91 36		sta ($36),y			sta 	(zTemp0),y
.da4c	ba4c	c8		iny				iny 								; offset 2 is the type byte
.da4d	ba4d	ad 84 02	lda $0284			lda 	identTypeByte
.da50	ba50	91 36		sta ($36),y			sta 	(zTemp0),y
.da52	ba52	c8		iny				iny
.da53	ba53					_CCVData:
.da53	ba53	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da55	ba55	91 36		sta ($36),y			sta 	(zTemp0),y
.da57	ba57	c8		iny				iny
.da58	ba58	c0 08		cpy #$08			cpy 	#8
.da5a	ba5a	90 f7		bcc $ba53			bcc 	_CCVData
.da5c	ba5c	ae 80 02	ldx $0280			ldx 	identStart 					; copy name into 8 on.
.da5f	ba5f					_CCVCopyName:
.da5f	ba5f	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.da62	ba62	91 36		sta ($36),y			sta 	(zTemp0),y
.da64	ba64	e8		inx				inx
.da65	ba65	c8		iny				iny
.da66	ba66	ec 82 02	cpx $0282			cpx 	identTypeEnd
.da69	ba69	d0 f4		bne $ba5f			bne 	_CCVCopyName
.da6b	ba6b	98		tya				tya 								; patch offset
.da6c	ba6c	92 36		sta ($36)			sta 	(zTemp0)
.da6e	ba6e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da70	ba70	91 36		sta ($36),y			sta 	(zTemp0),y
.da72	ba72	88		dey				dey
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da75	ba75	09 80		ora #$80			ora 	#$80
.da77	ba77	91 36		sta ($36),y			sta 	(zTemp0),y
.da79	ba79					_CCVFound:
.da79	ba79	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da7b	ba7b	38		sec				sec
.da7c	ba7c	e9 08		sbc #$08			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da7e	ba7e	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da80	ba80	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da83	ba83	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da85	ba85	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da88	ba88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da89	ba89					SNDCheckChannel:
.da89	ba89	aa		tax				tax
.da8a	ba8a	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da8d	ba8d	d0 38		bne $bac7			bne 	_SNDCCExit
.da8f	ba8f	da		phx				phx 								; save current channel
.da90	ba90	8a		txa				txa 								; put in A
.da91	ba91	20 0d bb	jsr $bb0d			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da94	ba94	68		pla				pla 								; channel # in A
.da95	ba95	90 30		bcc $bac7			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da97	ba97	a8		tay				tay 								; Y is the channel #
.da98	ba98	bd b3 05	lda $05b3,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da9b	ba9b	99 b2 06	sta $06b2,y			sta 	SNDPitchLow,y
.da9e	ba9e	bd b4 05	lda $05b4,x			lda 	SNDQueue+2,x
.daa1	baa1	99 b6 06	sta $06b6,y			sta 	SNDPitchHigh,y
.daa4	baa4	bd b5 05	lda $05b5,x			lda 	SNDQueue+3,x
.daa7	baa7	99 ba 06	sta $06ba,y			sta 	SNDVolume,y
.daaa	baaa	bd b6 05	lda $05b6,x			lda 	SNDQueue+4,x
.daad	baad	99 be 06	sta $06be,y			sta 	SNDTimeLeft,y
.dab0	bab0	bd b7 05	lda $05b7,x			lda 	SNDQueue+5,x
.dab3	bab3	99 c2 06	sta $06c2,y			sta 	SNDAdjustLow,y
.dab6	bab6	bd b8 05	lda $05b8,x			lda 	SNDQueue+6,x
.dab9	bab9	99 c6 06	sta $06c6,y			sta 	SNDAdjustHigh,y
.dabc	babc	5a		phy				phy 								; save channel #
.dabd	babd	20 27 bb	jsr $bb27			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dac0	bac0	ce b1 05	dec $05b1			dec 	SNDLength 					; reduce the queue length.
.dac3	bac3	68		pla				pla
.dac4	bac4	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update channel A
.dac7	bac7					_SNDCCExit:
.dac7	bac7	60		rts				rts
.dac8	bac8					SNDUpdateNote:
.dac8	bac8	aa		tax				tax 								; so we can access records
.dac9	bac9	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.daca	baca	0a		asl a				asl 	a
.dacb	bacb	0a		asl a				asl 	a
.dacc	bacc	0a		asl a				asl 	a
.dacd	bacd	0a		asl a				asl 	a
.dace	bace	8d b0 05	sta $05b0			sta 	SNDChannelBits
.dad1	bad1	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; are we silent
.dad4	bad4	f0 2e		beq $bb04			beq 	_SNDUNIsSilent
.dad6	bad6	ad b0 05	lda $05b0			lda 	SNDChannelBits 				; push channel bits on stack
.dad9	bad9	48		pha				pha
.dada	bada	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dadd	badd	29 0f		and #$0f			and 	#$0F
.dadf	badf	0d b0 05	ora $05b0			ora 	SNDChannelBits 				; set channel bits
.dae2	bae2	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dae4	bae4	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.dae7	bae7	bd b6 06	lda $06b6,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daea	baea	8d b0 05	sta $05b0			sta 	SNDChannelBits
.daed	baed	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x
.daf0	baf0	4e b0 05	lsr $05b0			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.daf3	baf3	6a		ror a				ror 	a
.daf4	baf4	4e b0 05	lsr $05b0			lsr 	SNDChannelBits
.daf7	baf7	6a		ror a				ror 	a
.daf8	baf8	4a		lsr a				lsr 	a 							; put in bits 0-5
.daf9	baf9	4a		lsr a				lsr 	a
.dafa	bafa	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write as rest of pitch register
.dafd	bafd	68		pla				pla
.dafe	bafe	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db00	bb00	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db03	bb03	60		rts				rts
.db04	bb04					_SNDUNIsSilent:
.db04	bb04	ad b0 05	lda $05b0			lda 	SNDChannelBits 				; channel bits
.db07	bb07	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db09	bb09	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write to the ports
.db0c	bb0c	60		rts				rts
.db0d	bb0d					SNDFindNextNoteForA:
.db0d	bb0d	ac b1 05	ldy $05b1			ldy 	SNDLength 					; queue size into Y
.db10	bb10	f0 13		beq $bb25			beq 	_SNDFNNFail 				; queue empty.
.db12	bb12	a2 00		ldx #$00			ldx 	#0
.db14	bb14					_SNDFNNSearch:
.db14	bb14	dd b2 05	cmp $05b2,x			cmp 	SNDQueue,x 					; does it match the channel
.db17	bb17	38		sec				sec
.db18	bb18	f0 0c		beq $bb26			beq 	_SNDFNNExit 				; if so exit with CS.
.db1a	bb1a	e8		inx				inx 								; next queue slot.
.db1b	bb1b	e8		inx				inx
.db1c	bb1c	e8		inx				inx
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	e8		inx				inx
.db1f	bb1f	e8		inx				inx
.db20	bb20	e8		inx				inx
.db21	bb21	e8		inx				inx
.db22	bb22	88		dey				dey 								; done the whole queue
.db23	bb23	d0 ef		bne $bb14			bne 	_SNDFNNSearch 				; no, go back.
.db25	bb25					_SNDFNNFail:
.db25	bb25	18		clc				clc
.db26	bb26					_SNDFNNExit:
.db26	bb26	60		rts				rts
.db27	bb27					SNDDeleteXFromQueue:
.db27	bb27	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db29	bb29	f0 09		beq $bb34			beq 	_SNDDXExit
.db2b	bb2b	bd ba 05	lda $05ba,x			lda 	SNDQueue+8,x
.db2e	bb2e	9d b2 05	sta $05b2,x			sta 	SNDQueue,x
.db31	bb31	e8		inx				inx
.db32	bb32	80 f3		bra $bb27			bra 	SNDDeleteXFromQueue
.db34	bb34					_SNDDXExit:
.db34	bb34	60		rts				rts
.05b0						SNDChannelBits:
>05b0								.fill 	1
.db35	bb35					SNDQueueRequest:
.db35	bb35	86 36		stx $36				stx 	zTemp0						; save queue address
.db37	bb37	84 37		sty $37				sty 	zTemp0+1
.db39	bb39	ae b1 05	ldx $05b1			ldx 	SNDLength 					; queue is full, can't take any more.
.db3c	bb3c	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db3e	bb3e	f0 21		beq $bb61			beq 	_SNDQRExit
.db40	bb40	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db42	bb42	48		pha				pha
.db43	bb43	8a		txa				txa  								; get offset in queue buffer/
.db44	bb44	0a		asl a				asl 	a
.db45	bb45	0a		asl a				asl 	a
.db46	bb46	0a		asl a				asl 	a
.db47	bb47	aa		tax				tax
.db48	bb48	68		pla				pla 								; get back and push again
.db49	bb49	48		pha				pha
.db4a	bb4a	9d b2 05	sta $05b2,x			sta 	SNDQueue+0,x 				; save the channel #
.db4d	bb4d	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db4f	bb4f					_SNDQCopy:
.db4f	bb4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.db51	bb51	e8		inx				inx
.db52	bb52	c8		iny				iny
.db53	bb53	9d b2 05	sta $05b2,x			sta 	SNDQueue,x
.db56	bb56	c0 06		cpy #$06			cpy 	#6
.db58	bb58	d0 f5		bne $bb4f			bne 	_SNDQCopy
.db5a	bb5a	ee b1 05	inc $05b1			inc 	SNDLength 					; bump queue length.
.db5d	bb5d	68		pla				pla 								; get channel # back
.db5e	bb5e	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db61	bb61					_SNDQRExit:
.db61	bb61	60		rts				rts
.db62	bb62					SNDSilenceChannel:
.db62	bb62	aa		tax				tax 								; zero time left.
.db63	bb63	9e be 06	stz $06be,x			stz 	SNDTimeLeft,x
.db66	bb66	0a		asl a				asl 	a 							; shift into position
.db67	bb67	0a		asl a				asl 	a
.db68	bb68	0a		asl a				asl 	a
.db69	bb69	0a		asl a				asl 	a
.db6a	bb6a	0a		asl a				asl 	a
.db6b	bb6b	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db6d	bb6d	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db70	bb70	60		rts				rts
.db71	bb71					SNDWritePorts:
.db71	bb71	da		phx				phx 								; save X
.db72	bb72	a6 01		ldx $01				ldx 	1 							; save I/O status
.db74	bb74	64 01		stz $01				stz 	1 							; access I/O page 0
.db76	bb76	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db79	bb79	8d 10 d6	sta $d610			sta 	$D610
.db7c	bb7c	86 01		stx $01				stx 	1 							; restore I/O
.db7e	bb7e	fa		plx				plx 								; restore X
.db7f	bb7f	60		rts				rts
.db80	bb80					Export_SNDCommand:
.db80	bb80	da		phx				phx 								; save XY
.db81	bb81	5a		phy				phy
.db82	bb82	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db84	bb84	f0 1d		beq $bba3			beq 	_SNDInitialise
.db86	bb86	90 28		bcc $bbb0			bcc 	_SNDExit
.db88	bb88	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db8a	bb8a	f0 17		beq $bba3			beq 	_SNDSilence
.db8c	bb8c	b0 22		bcs $bbb0			bcs 	_SNDExit
.db8e	bb8e	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db90	bb90	b0 09		bcs $bb9b			bcs 	_SNDQueryPlay
.db92	bb92	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db94	bb94	b0 1a		bcs $bbb0			bcs 	_SNDExit
.db96	bb96	20 35 bb	jsr $bb35			jsr 	SNDQueueRequest
.db99	bb99	80 15		bra $bbb0			bra 	_SNDExit
.db9b	bb9b					_SNDQueryPlay:
.db9b	bb9b	29 03		and #$03			and 	#3 							; get channel #
.db9d	bb9d	aa		tax				tax
.db9e	bb9e	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dba1	bba1	80 0d		bra $bbb0			bra 	_SNDExit
.dba3	bba3					_SNDInitialise:
.dba3	bba3					_SNDSilence:
.dba3	bba3	9c b1 05	stz $05b1			stz 	SNDLength 					; empty the queue.
.dba6	bba6	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dba8	bba8					_SNDSilenceLoop:
.dba8	bba8	48		pha				pha
.dba9	bba9	20 62 bb	jsr $bb62			jsr 	SNDSilenceChannel
.dbac	bbac	68		pla				pla
.dbad	bbad	3a		dec a				dec 	a
.dbae	bbae	10 f8		bpl $bba8			bpl 	_SNDSilenceLoop
.dbb0	bbb0					_SNDExit:
.dbb0	bbb0	7a		ply				ply
.dbb1	bbb1	fa		plx				plx
.dbb2	bbb2	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.05b1						SNDLength:
>05b1								.fill 	1
.05b2						SNDQueue:
>05b2								.fill 	SNDQueueSize * 8
.06b2						SNDPitchLow:
>06b2								.fill 	4
.06b6						SNDPitchHigh:
>06b6								.fill 	4
.06ba						SNDVolume:
>06ba								.fill 	4
.06be						SNDTimeLeft:
>06be								.fill 	4
.06c2						SNDAdjustLow:
>06c2								.fill 	4
.06c6						SNDAdjustHigh:
>06c6								.fill 	4
.dbb3	bbb3					Export_SNDUpdate:
.dbb3	bbb3					PagedSNDUpdate:
.dbb3	bbb3	ad be 06	lda $06be			lda 	SNDTimeLeft+0 				; look at time remaining
.dbb6	bbb6	f0 05		beq $bbbd			beq 	_SNDUNot0 					; not playing
.dbb8	bbb8	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbba	bbba	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel 			; update it.
.dbbd	bbbd					_SNDUNot0:
.dbbd	bbbd	ad bf 06	lda $06bf			lda 	SNDTimeLeft+1
.dbc0	bbc0	f0 05		beq $bbc7			beq 	_SNDUNot1
.dbc2	bbc2	a2 01		ldx #$01			ldx 	#1
.dbc4	bbc4	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbc7	bbc7					_SNDUNot1:
.dbc7	bbc7	ad c0 06	lda $06c0			lda 	SNDTimeLeft+2
.dbca	bbca	f0 05		beq $bbd1			beq 	_SNDUNot2
.dbcc	bbcc	a2 02		ldx #$02			ldx 	#2
.dbce	bbce	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbd1	bbd1					_SNDUNot2:
.dbd1	bbd1	ad c1 06	lda $06c1			lda 	SNDTimeLeft+3
.dbd4	bbd4	f0 05		beq $bbdb			beq 	_SNDUNot3
.dbd6	bbd6	a2 03		ldx #$03			ldx 	#3
.dbd8	bbd8	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbdb	bbdb					_SNDUNot3:
.dbdb	bbdb	60		rts				rts
.dbdc	bbdc					SNDUpdateChannel:
.dbdc	bbdc	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbde	bbde	f0 2c		beq $bc0c			beq 	_SNDUCExit
.dbe0	bbe0	3a		dec a				dec 	a 							; decrement and update timer
.dbe1	bbe1	9d be 06	sta $06be,x			sta 	SNDTimeLeft,x
.dbe4	bbe4	f0 1d		beq $bc03			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbe6	bbe6	bd c2 06	lda $06c2,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbe9	bbe9	1d c6 06	ora $06c6,x			ora 	SNDAdjustHigh,x
.dbec	bbec	f0 1e		beq $bc0c			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbee	bbee	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbef	bbef	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x
.dbf2	bbf2	7d c2 06	adc $06c2,x			adc 	SNDAdjustLow,x
.dbf5	bbf5	9d b2 06	sta $06b2,x			sta 	SNDPitchLow,x
.dbf8	bbf8	bd b6 06	lda $06b6,x			lda 	SNDPitchHigh,x
.dbfb	bbfb	7d c6 06	adc $06c6,x			adc 	SNDAdjustHigh,x
.dbfe	bbfe	29 03		and #$03			and 	#3
.dc00	bc00	9d b6 06	sta $06b6,x			sta 	SNDPitchHigh,x
.dc03	bc03					_SNDUCUpdate:
.dc03	bc03	8a		txa				txa 								; which channel.
.dc04	bc04	48		pha				pha
.dc05	bc05	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update the current note
.dc08	bc08	68		pla				pla
.dc09	bc09	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; more to do ?
.dc0c	bc0c					_SNDUCExit:
.dc0c	bc0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc0d	bc0d					Export_KNLInputSingleCharacter:
.dc0d	bc0d					PagedInputSingleCharacter:
.dc0d	bc0d	da		phx				phx
.dc0e	bc0e	5a		phy				phy
.dc0f	bc0f					_EISCWait:
.dc0f	bc0f	a5 01		lda $01				lda 	1 							; save I/O 0
.dc11	bc11	48		pha				pha
.dc12	bc12	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc14	bc14	38		sec				sec 								; calculate timer - LastTick
.dc15	bc15	ad 59 d6	lda $d659			lda 	$D659
.dc18	bc18	cd e2 04	cmp $04e2			cmp 	LastTick
.dc1b	bc1b	f0 06		beq $bc23			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.dc1d	bc1d	8d e2 04	sta $04e2			sta 	LastTick 					; update last timer
.dc20	bc20	20 b3 bb	jsr $bbb3			jsr 	PagedSNDUpdate 							; go do the code.
.dc23	bc23					_NoFireTick:
.dc23	bc23	68		pla				pla 								; restore I/O 0
.dc24	bc24	85 01		sta $01				sta 	1
.dc26	bc26	20 30 bc	jsr $bc30			jsr 	CheckKeyPressed
.dc29	bc29	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc2b	bc2b	f0 e2		beq $bc0f			beq 	_EISCWait
.dc2d	bc2d	7a		ply				ply
.dc2e	bc2e	fa		plx				plx
.dc2f	bc2f	60		rts				rts
.dc30	bc30					Export_KNLInkey:
.dc30	bc30					CheckKeyPressed:
.dc30	bc30	a9 ca		lda #$ca			lda     #<event 					; tell kernel where events go.
.dc32	bc32	85 f0		sta $f0				sta     kernel.args.events+0
.dc34	bc34	a9 06		lda #$06			lda     #>event
.dc36	bc36	85 f1		sta $f1				sta     kernel.args.events+1
.dc38	bc38	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc3b	bc3b	b0 0b		bcs $bc48			bcs 	_CKPNoEvent 				; no event
.dc3d	bc3d	ad ca 06	lda $06ca			lda     event.type
.dc40	bc40	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc42	bc42	d0 04		bne $bc48			bne 	_CKPNoEvent
.dc44	bc44	ad cf 06	lda $06cf			lda     event.key.ascii
.dc47	bc47	60		rts				rts
.dc48	bc48					_CKPNoEvent:
.dc48	bc48	a9 00		lda #$00			lda 	#0
.dc4a	bc4a	60		rts				rts
.dc4b	bc4b					Export_EXTReadController:
.dc4b	bc4b	da		phx				phx
.dc4c	bc4c	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc4e	bc4e	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc50	bc50	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc53	bc53	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc55	bc55	fa		plx				plx
.dc56	bc56	60		rts				rts
.06ca						event
>06ca						type        .byte   ?   ; Enum above
>06cb						buf         .byte   ?   ; page id or zero
>06cc						ext         .byte   ?   ; page id or zero
.06cd						key
>06cd						keyboard    .byte   ?   ; Keyboard ID
>06ce						raw         .byte   ?   ; Raw key ID
>06cf						ascii       .byte   ?   ; ASCII value
>06d0						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.06cd						mouse
.06cd						delta
>06cd						x           .byte   ?
>06ce						y           .byte   ?
>06cf						z           .byte   ?
>06d0						buttons     .byte   ?
.06cd						clicks
>06cd						inner       .byte   ?
>06ce						middle      .byte   ?
>06cf						outer       .byte   ?
.06cd						joystick
>06cd						joy0        .byte   ?
>06ce						joy1        .byte   ?
.06cd						udp
>06cd						token       .byte   ?   ; TODO: break out into fields
.06cd						file
>06cd						stream      .byte   ?
>06ce						cookie      .byte   ?
.06cf						data
>06cf						requested   .byte   ?   ; Requested number of bytes to read
>06d0						read        .byte   ?   ; Number of bytes actually read
.06cf						wrote
>06cf						requested   .byte   ?   ; Requested number of bytes to read
>06d0						wrote       .byte   ?   ; Number of bytes actually read
.06cd						directory
>06cd						stream      .byte   ?
>06ce						cookie      .byte   ?
.06cf						volume
>06cf						len         .byte   ?   ; Length of volname (in buf)
>06d0						flags       .byte   ?   ; block size, text encoding
.06cf						file
>06cf						len         .byte   ?
>06d0						flags       .byte   ?   ; block scale, text encoding, approx size
.06cf						free
>06cf						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc57	bc57					Export_KNLOpenFileWrite:
.dc57	bc57	48		pha				pha
.dc58	bc58	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc5a	bc5a	80 03		bra $bc5f			bra 	KNLOpenStart
.dc5c	bc5c					Export_KNLOpenFileRead:
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc5f	bc5f					KNLOpenStart:
.dc5f	bc5f	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc61	bc61	68		pla				pla
.dc62	bc62	20 9d bc	jsr $bc9d			jsr 	KNLSetupFileName
.dc65	bc65	a9 ca		lda #$ca			lda     #event & $FF 				; tell kernel where to store event data
.dc67	bc67	85 f0		sta $f0				sta     kernel.args.events+0
.dc69	bc69	a9 06		lda #$06			lda     #event >> 8
.dc6b	bc6b	85 f1		sta $f1				sta     kernel.args.events+1
.dc6d	bc6d	ad df 04	lda $04df			lda 	DefaultDrive 				; currently drive zero only.
.dc70	bc70	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc72	bc72	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc75	bc75	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc77	bc77	b0 1d		bcs $bc96			bcs     _out
.dc79	bc79					_loop
.dc79	bc79	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc7c	bc7c	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc7f	bc7f	b0 f8		bcs $bc79			bcs     _loop
.dc81	bc81	ad ca 06	lda $06ca			lda 	event.type
.dc84	bc84	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc86	bc86	f0 0a		beq $bc92			beq 	_success
.dc88	bc88	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc8a	bc8a	f0 0a		beq $bc96			beq 	_out
.dc8c	bc8c	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc8e	bc8e	f0 06		beq $bc96			beq 	_out
.dc90	bc90	80 e7		bra $bc79			bra     _loop
.dc92	bc92					_success
.dc92	bc92	ad cd 06	lda $06cd			lda     event.file.stream
.dc95	bc95	18		clc				clc
.dc96	bc96					_out
.dc96	bc96	60		rts				rts
.dc97	bc97					Export_KNLCloseFile:
.dc97	bc97	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc99	bc99	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc9c	bc9c	60		rts				rts
.dc9d	bc9d					KNLSetupFileName:
.dc9d	bc9d	5a		phy				phy 								; save Y on stack
.dc9e	bc9e	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dca0	bca0	86 37		stx $37				stx 	zTemp0+1
.dca2	bca2	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dca4	bca4	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dca6	bca6	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dca8	bca8					_KNLGetLength:
.dca8	bca8	c8		iny				iny
.dca9	bca9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dcab	bcab	d0 fb		bne $bca8			bne 	_KNLGetLength
.dcad	bcad	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dcaf	bcaf	7a		ply				ply
.dcb0	bcb0	60		rts				rts
=64						KNLReadBufferLen = 64 								; read buffer size.
.06d1						KNLStream:
>06d1								.byte   ?
.06d2						KNLReadBuffer:
>06d2								.fill   KNLReadBufferLen
.0712						KNLNext:
>0712								.byte   ?
.0713						KNLEnd:
>0713								.byte   ?
.dcb1	bcb1					Export_KNLReadByteInit:
.dcb1	bcb1	8d d1 06	sta $06d1			sta     KNLStream 					; save stream
.dcb4	bcb4	9c 12 07	stz $0712			stz     KNLNext 					; reset buffer
.dcb7	bcb7	9c 13 07	stz $0713			stz     KNLEnd
.dcba	bcba	60		rts				rts
.dcbb	bcbb					Export_KNLReadByte:
.dcbb	bcbb	da		phx				phx
.dcbc	bcbc	ae 12 07	ldx $0712			ldx     KNLNext 					; all data consumed ?
.dcbf	bcbf	ec 13 07	cpx $0713			cpx     KNLEnd
.dcc2	bcc2	d0 10		bne $bcd4			bne     _KNLRBGetNextByte
.dcc4	bcc4	ad d1 06	lda $06d1			lda     KNLStream
.dcc7	bcc7	20 dd bc	jsr $bcdd			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dcca	bcca	b0 0f		bcs $bcdb			bcs     _KNLRBError 				; error has occurred on read.
.dccc	bccc	8d 13 07	sta $0713			sta     KNLEnd 						; # read is the number available
.dccf	bccf	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcd1	bcd1	8e 12 07	stx $0712			stx     KNLNext
.dcd4	bcd4					_KNLRBGetNextByte:
.dcd4	bcd4	bd d2 06	lda $06d2,x			lda     KNLReadBuffer,x 			; get the next data item
.dcd7	bcd7	ee 12 07	inc $0712			inc     KNLNext 					; and advance the index
.dcda	bcda	18		clc				clc 								; succeeded
.dcdb	bcdb					_KNLRBError:
.dcdb	bcdb	fa		plx				plx
.dcdc	bcdc	60		rts				rts
.dcdd	bcdd					Export_KNLReadBlock:
.dcdd	bcdd					KNLRBGetNextBlock:
.dcdd	bcdd	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcdf	bcdf	a9 40		lda #$40			lda     #KNLReadBufferLen 			; set bytes to read.
.dce1	bce1	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dce3	bce3	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dce6	bce6	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dce8	bce8	b0 2e		bcs $bd18			bcs     _KGNBExitFail               ; report as general error
.dcea	bcea					_KGRBEventLoop:
.dcea	bcea	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dced	bced	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcf0	bcf0	b0 f8		bcs $bcea			bcs     _KGRBEventLoop
.dcf2	bcf2	ad ca 06	lda $06ca			lda 	event.type 					; get event
.dcf5	bcf5	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcf7	bcf7	f0 0a		beq $bd03			beq     _KNLRBGetNextByte
.dcf9	bcf9	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcfb	bcfb	f0 1b		beq $bd18			beq 	_KGNBExitFail
.dcfd	bcfd	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcff	bcff	f0 17		beq $bd18			beq 	_KGNBExitFail
.dd01	bd01	80 e7		bra $bcea			bra 	_KGRBEventLoop
.dd03	bd03					_KNLRBGetNextByte:
.dd03	bd03	a9 d2		lda #$d2			lda     #<KNLReadBuffer 					; Set the target buffer
.dd05	bd05	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd07	bd07	a9 06		lda #$06			lda     #>KNLReadBuffer
.dd09	bd09	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd0b	bd0b	ad d0 06	lda $06d0			lda     event.file.data.read 		; Set the target length
.dd0e	bd0e	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd10	bd10	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd13	bd13	ad d0 06	lda $06d0			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd16	bd16	18		clc				clc
.dd17	bd17	60		rts				rts
.dd18	bd18					_KGNBExitFail:
.dd18	bd18	38		sec				sec
.dd19	bd19	60		rts				rts
.dd1a	bd1a					Export_KNLWriteBlock:
.dd1a	bd1a	da		phx				phx
.dd1b	bd1b	5a		phy				phy
.dd1c	bd1c	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd1e	bd1e	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd20	bd20	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd22	bd22	a5 37		lda $37				lda     zTemp0+1
.dd24	bd24	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd26	bd26	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd28	bd28	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd2b	bd2b	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd2d	bd2d	b0 21		bcs $bd50			bcs 	_KWBFailed
.dd2f	bd2f					_KNLWLoop:
.dd2f	bd2f	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd32	bd32	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd35	bd35	b0 f8		bcs $bd2f			bcs     _KNLWLoop
.dd37	bd37	ad ca 06	lda $06ca			lda     event.type 					; various errors.
.dd3a	bd3a	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd3c	bd3c	f0 12		beq $bd50			beq 	_KWBFailed
.dd3e	bd3e	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd40	bd40	f0 0e		beq $bd50			beq 	_KWBFailed
.dd42	bd42	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd44	bd44	f0 0a		beq $bd50			beq 	_KWBFailed
.dd46	bd46	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd48	bd48	d0 e5		bne $bd2f			bne 	_KNLWLoop
.dd4a	bd4a	18		clc				clc
.dd4b	bd4b	ad d0 06	lda $06d0			lda    event.file.wrote.wrote 		; get bytes written.
.dd4e	bd4e	80 01		bra $bd51			bra 	_KWBExit
.dd50	bd50					_KWBFailed:
.dd50	bd50	38		sec				sec
.dd51	bd51					_KWBExit:
.dd51	bd51	7a		ply				ply
.dd52	bd52	fa		plx				plx
.dd53	bd53	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
