
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 12:09:43 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 ea 92	jsr $92ea			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 8f 84	jsr $848f			jsr 	RunDemos
.8013	20 cd 8c	jsr $8ccd			jsr 	NewCommand 					; erase current program
.8016	20 6f 9f	jsr $9f6f			jsr 	BackloadProgram
.8019	4c 29 88	jmp $8829			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1045."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 30 34 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/circle.asm

.8084					GXFillCircle:
.8084	a9 ff		lda #$ff			lda 	#255
.8086	80 02		bra $808a			bra 	GXCircle
.8088					GXFrameCircle:
.8088	a9 00		lda #$00			lda 	#0
.808a					GXCircle:
.808a	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.808d	20 7b 85	jsr $857b			jsr 	GXSortXY 					; topleft/bottomright
.8090	20 f2 84	jsr $84f2			jsr 	GXOpenBitmap 				; start drawing
.8093	20 82 81	jsr $8182			jsr 	GXCircleSetup 				; set up for drawing
.8096	9c 46 06	stz $0646			stz 	gYChanged
.8099					_GXCircleDraw:
.8099	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.809c	cd 44 06	cmp $0644			cmp 	gY
.809f	90 09		bcc $80aa			bcc 	_GXCircleContinue
.80a1	d0 03		bne $80a6			bne 	_GXNoLast
.80a3	20 b5 80	jsr $80b5			jsr 	GXPlot1
.80a6					_GXNoLast:
.80a6	20 03 85	jsr $8503			jsr 	GXCloseBitmap 				; close the bitmap
.80a9	60		rts				rts
.80aa					_GXCircleContinue:
.80aa	20 b2 80	jsr $80b2			jsr 	GXPlot2 					; draw it
.80ad	20 2f 81	jsr $812f			jsr 	GXCircleMove 				; adjust the coordinates
.80b0	80 e7		bra $8099			bra 	_GXCircleDraw
.80b2					GXPlot2:
.80b2	20 b5 80	jsr $80b5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80b5					GXPlot1:
.80b5	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.80b8	f0 03		beq $80bd			beq 	_GXPlot1Only
.80ba	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; plot and negate
.80bd					_GXPlot1Only:
.80bd	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; twice, undoing negation
.80c0	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.80c3	ae 44 06	ldx $0644			ldx	 	gY
.80c6	8d 44 06	sta $0644			sta 	gY
.80c9	8e 43 06	stx $0643			stx 	gX
.80cc	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.80cf	a9 ff		lda #$ff			lda 	#$FF
.80d1	8d 46 06	sta $0646			sta 	gYChanged
.80d4	60		rts				rts
.80d5	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; do once
.80d8	60		rts				rts
.80d9	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.80dc	f0 05		beq $80e3			beq 	_GXPlot0Always
.80de	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.80e1	f0 2d		beq $8110			beq 	GXPlot0Exit
.80e3					_GXPlot0Always:
.80e3	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.80e5	ad 44 06	lda $0644			lda 	gY
.80e8	20 11 81	jsr $8111			jsr 	GXSubCopy
.80eb	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.80ed	ad 43 06	lda $0643			lda 	gX
.80f0	20 11 81	jsr $8111			jsr 	GXSubCopy
.80f3	48		pha				pha 									; save last offset X
.80f4	20 10 85	jsr $8510			jsr 	GXPositionCalc 					; calculate position/offset.
.80f7	68		pla				pla
.80f8	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.80f9	85 36		sta $36				sta 	gzTemp0
.80fb	64 37		stz $37				stz 	gzTemp0+1
.80fd	26 37		rol $37				rol 	gzTemp0+1
.80ff	ad 45 06	lda $0645			lda 	gIsFillMode
.8102	69 80		adc #$80			adc 	#128
.8104	20 88 83	jsr $8388			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8107	38		sec				sec 									; GY = -GY
.8108	a9 00		lda #$00			lda 	#0
.810a	ed 44 06	sbc $0644			sbc 	gY
.810d	8d 44 06	sta $0644			sta 	gY
.8110					GXPlot0Exit:
.8110	60		rts				rts
.8111					GXSubCopy:
.8111	85 36		sta $36				sta 	gzTemp0
.8113	64 37		stz $37				stz 	gzTemp0+1
.8115	29 80		and #$80			and 	#$80
.8117	f0 02		beq $811b			beq 	_GXNoSx
.8119	c6 37		dec $37				dec 	gzTemp0+1
.811b					_GXNoSx:
.811b	38		sec				sec
.811c	bd 35 06	lda $0635,x			lda 	gXX1,x
.811f	e5 36		sbc $36				sbc 	gzTemp0
.8121	9d 31 06	sta $0631,x			sta 	gXX0,x
.8124	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8127	e5 37		sbc $37				sbc 	gzTemp0+1
.8129	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.812c	a5 36		lda $36				lda 	gzTemp0 						; return A
.812e	60		rts				rts
.812f					GXCircleMove:
.812f	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.8132	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8134	10 0d		bpl $8143			bpl 	_GXEMPositive
.8136	ee 43 06	inc $0643			inc 	gX 							; X++
.8139	ad 43 06	lda $0643			lda 	gX
.813c	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.813f	a9 06		lda #$06			lda 	#6  						; and add 6
.8141	80 15		bra $8158			bra 	_GXEMAddD
.8143					_GXEMPositive:
.8143	ee 43 06	inc $0643			inc 	gX 							; X++
.8146	ce 44 06	dec $0644			dec 	gy 							; Y--
.8149	38		sec				sec 								; calculate X-Y
.814a	ad 43 06	lda $0643			lda 	gX
.814d	ed 44 06	sbc $0644			sbc 	gY
.8150	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8153	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8155	ce 46 06	dec $0646			dec 	gYChanged
.8158					_GXEMAddD:
.8158	18		clc				clc
.8159	65 38		adc $38				adc 	gzTemp1
.815b	85 38		sta $38				sta 	gzTemp1
.815d	90 02		bcc $8161			bcc 	_GXEMNoCarry
.815f	e6 39		inc $39				inc 	gzTemp1+1
.8161					_GXEMNoCarry:
.8161	60		rts				rts
.8162					_GXAdd4TimesToD:
.8162	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8164	29 80		and #$80			and 	#$80
.8166	f0 02		beq $816a			beq 	_GXA4Unsigned
.8168	a9 ff		lda #$ff			lda 	#$FF
.816a					_GXA4Unsigned:
.816a	85 37		sta $37				sta 	gzTemp0+1
.816c	06 36		asl $36				asl 	gzTemp0  					; x 4
.816e	26 37		rol $37				rol 	gzTemp0+1
.8170	06 36		asl $36				asl 	gzTemp0
.8172	26 37		rol $37				rol 	gzTemp0+1
.8174	18		clc				clc 								; add
.8175	a5 36		lda $36				lda		gzTemp0
.8177	65 38		adc $38				adc 	gzTemp1
.8179	85 38		sta $38				sta 	gzTemp1
.817b	a5 37		lda $37				lda		gzTemp0+1
.817d	65 39		adc $39				adc 	gzTemp1+1
.817f	85 39		sta $39				sta 	gzTemp1+1
.8181	60		rts				rts
.8182					GXCircleSetup:
.8182	38		sec				sec
.8183	ad 37 06	lda $0637			lda 	gxY1
.8186	ed 33 06	sbc $0633			sbc 	gxY0
.8189	4a		lsr a				lsr 	a
.818a	8d 42 06	sta $0642			sta 	gRadius
.818d	a2 00		ldx #$00			ldx 	#0
.818f	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8192	a2 02		ldx #$02			ldx 	#2
.8194	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8197	9c 43 06	stz $0643			stz 	gX
.819a	ad 42 06	lda $0642			lda 	gRadius
.819d	8d 44 06	sta $0644			sta 	gY
.81a0	0a		asl a				asl 	a 							; R x 2
.81a1	85 36		sta $36				sta 	gzTemp0
.81a3	38		sec				sec
.81a4	a9 03		lda #$03			lda 	#3
.81a6	e5 36		sbc $36				sbc 	gzTemp0
.81a8	85 38		sta $38				sta 	gzTemp1
.81aa	a9 00		lda #$00			lda 	#0
.81ac	e9 00		sbc #$00			sbc 	#0
.81ae	85 39		sta $39				sta 	gzTemp1+1
.81b0	60		rts				rts
.81b1					_GXCalculateCentre:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gxX1,x
.81b5	7d 31 06	adc $0631,x			adc 	gXX0,x
.81b8	9d 35 06	sta $0635,x			sta 	gXX1,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81c1	4a		lsr a				lsr 	a
.81c2	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81c5	7e 35 06	ror $0635,x			ror 	gXX1,x
.81c8	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.81c9					GXClearBitmap:
.81c9	48		pha				pha
.81ca	5a		phy				phy
.81cb	20 f2 84	jsr $84f2			jsr 	GXOpenBitmap 				; start access
.81ce	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.81d0	ad 3a 06	lda $063a			lda 	gxHeight
.81d3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.81d5	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.81d7					_GXCalcLastPage:
.81d7	98		tya				tya 								; add to base page
.81d8	18		clc				clc
.81d9	6d 39 06	adc $0639			adc 	gxBasePage
.81dc	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.81de					_GXClearAll:
.81de	20 f0 81	jsr $81f0			jsr 	_GXClearBlock 				; clear 8k block
.81e1	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.81e3	a5 0b		lda $0b				lda 	GFXEditSlot
.81e5	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.81e8	b0 f4		bcs $81de			bcs 	_GXClearAll
.81ea	20 03 85	jsr $8503			jsr 	GXCloseBitmap	 			; stop access
.81ed	7a		ply				ply
.81ee	68		pla				pla
.81ef	60		rts				rts
.81f0					_GXClearBlock:
.81f0	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.81f2	85 38		sta $38				sta 	0+gzTemp1
.81f4	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.81f6	85 39		sta $39				sta 	1+gzTemp1
.81f8					_GXCB0:
.81f8	a5 36		lda $36				lda 	gzTemp0
.81fa	a0 00		ldy #$00			ldy 	#0
.81fc					_GXCB1:
.81fc	91 38		sta ($38),y			sta 	(gzTemp1),y
.81fe	c8		iny				iny
.81ff	91 38		sta ($38),y			sta 	(gzTemp1),y
.8201	c8		iny				iny
.8202	91 38		sta ($38),y			sta 	(gzTemp1),y
.8204	c8		iny				iny
.8205	91 38		sta ($38),y			sta 	(gzTemp1),y
.8207	c8		iny				iny
.8208	d0 f2		bne $81fc			bne 	_GXCB1
.820a	e6 39		inc $39				inc 	gzTemp1+1
.820c	a5 39		lda $39				lda 	gzTemp1+1
.820e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8210	d0 e6		bne $81f8			bne 	_GXCB0
.8212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8213					GXLine:
.8213	20 f2 84	jsr $84f2			jsr 	GXOpenBitmap
.8216	20 99 85	jsr $8599			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8219	20 de 82	jsr $82de			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.821c	20 10 85	jsr $8510			jsr 	GXPositionCalc 				; calculate position/offset.
.821f					_GXDrawLoop:
.821f	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8222	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.8224	2d 3e 06	and $063e			and 	gxANDValue
.8227	4d 3d 06	eor $063d			eor 	gxEORValue
.822a	91 3a		sta ($3a),y			sta 	(gsTemp),y
.822c	20 3a 82	jsr $823a			jsr 	GXLineIsComplete 			; is the line complete ?
.822f	f0 05		beq $8236			beq 	_GXLExit
.8231	20 55 82	jsr $8255			jsr 	GXLineAdvance 				; code as per advance method
.8234	80 e9		bra $821f			bra 	_GXDrawLoop
.8236					_GXLExit:
.8236	20 03 85	jsr $8503			jsr 	GXCloseBitmap
.8239	60		rts				rts
.823a					GXLineIsComplete:
.823a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.823d	d0 0f		bne $824e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.823f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8242	4d 35 06	eor $0635			eor 	GXX1
.8245	d0 06		bne $824d			bne 	_GXLICExit
.8247	ad 32 06	lda $0632			lda 	GXX0+1
.824a	4d 36 06	eor $0636			eor 	GXX1+1
.824d					_GXLICExit:
.824d	60		rts				rts
.824e					_GXLICCompareY:
.824e	ad 37 06	lda $0637			lda 	GXY1
.8251	4d 33 06	eor $0633			eor 	GXY0
.8254	60		rts				rts
.8255					GXLineAdvance:
.8255	18		clc				clc 								; add adjust to position
.8256	ad 4b 06	lda $064b			lda 	GXPosition
.8259	6d 4c 06	adc $064c			adc 	GXAdjust
.825c	8d 4b 06	sta $064b			sta 	GXPosition
.825f	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8262	b0 05		bcs $8269			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8264	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8267	90 0a		bcc $8273			bcc 	_GXLANoExtra
.8269					_GXLAOverflow:
.8269	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.826c	38		sec				sec 								; subtract total and write back
.826d	ed 4d 06	sbc $064d			sbc 	GXTotal
.8270	8d 4b 06	sta $064b			sta 	GXPosition
.8273					_GXLANoExtra:
.8273	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8276	f0 0d		beq $8285			beq 	_GXDXLarger
.8278	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.827b	ad 4e 06	lda $064e			lda 	GXAddSelect
.827e	f0 10		beq $8290			beq 	_GXLAExit
.8280	20 91 82	jsr $8291			jsr 	GXAdjustX
.8283	80 0b		bra $8290			bra 	_GXLAExit
.8285					_GXDXLarger:
.8285	20 91 82	jsr $8291			jsr 	GXAdjustX
.8288	ad 4e 06	lda $064e			lda 	GXAddSelect
.828b	f0 03		beq $8290			beq 	_GXLAExit
.828d	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.8290					_GXLAExit:
.8290	60		rts				rts
.8291					GXAdjustX:
.8291	ad 4a 06	lda $064a			lda 	GXDXNegative
.8294	10 25		bpl $82bb			bpl 	_GXAXRight
.8296	ad 31 06	lda $0631			lda 	GXX0
.8299	d0 03		bne $829e			bne 	_GXAXNoBorrow
.829b	ce 32 06	dec $0632			dec 	GXX0+1
.829e					_GXAXNoBorrow:
.829e	ce 31 06	dec $0631			dec 	GXX0
.82a1	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.82a4	ad 41 06	lda $0641			lda 	gsOffset
.82a7	c9 ff		cmp #$ff			cmp 	#$FF
.82a9	d0 0f		bne $82ba			bne 	_GXAYExit 					; underflow
.82ab	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.82ad	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.82af	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.82b1	b0 07		bcs $82ba			bcs 	_GXAYExit
.82b3	18		clc				clc
.82b4	69 20		adc #$20			adc 	#$20 						; fix up
.82b6	85 3b		sta $3b				sta 	gsTemp+1
.82b8	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82ba					_GXAYExit:
.82ba	60		rts				rts
.82bb					_GXAXRight:
.82bb	ee 31 06	inc $0631			inc 	GXX0
.82be	d0 03		bne $82c3			bne 	_GXAXNoCarry
.82c0	ee 32 06	inc $0632			inc 	GXX0+1
.82c3					_GXAXNoCarry:
.82c3	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.82c6	d0 0e		bne $82d6			bne 	_GXAXExit 					; if not overflowed, exit.
.82c8	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.82ca	a5 3b		lda $3b				lda 	gsTemp+1
.82cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ce	90 06		bcc $82d6			bcc 	_GXAXExit
.82d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82d2	85 3b		sta $3b				sta 	gsTemp+1
.82d4	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82d6					_GXAXExit:
.82d6	60		rts				rts
.82d7					GXIncrementY:
.82d7	ee 33 06	inc $0633			inc 	GXY0
.82da	20 60 85	jsr $8560			jsr 	GXMovePositionDown
.82dd	60		rts				rts
.82de					GXLineSetup:
.82de	ad 37 06	lda $0637			lda 	GXY1
.82e1	38		sec				sec
.82e2	ed 33 06	sbc $0633			sbc 	GXY0
.82e5	4a		lsr a				lsr 	a
.82e6	8d 48 06	sta $0648			sta 	GXDiffY
.82e9	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.82ec	38		sec				sec
.82ed	ad 35 06	lda $0635			lda 	GXX1
.82f0	ed 31 06	sbc $0631			sbc 	GXX0
.82f3	8d 47 06	sta $0647			sta 	GXDiffX
.82f6	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82f9	ed 32 06	sbc $0632			sbc 	GXX0+1
.82fc	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82fd	6e 47 06	ror $0647			ror 	GXDiffX
.8300	0a		asl a				asl 	a
.8301	10 0c		bpl $830f			bpl 	_GDXNotNegative
.8303	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8305	38		sec				sec
.8306	ed 47 06	sbc $0647			sbc 	GXDiffX
.8309	8d 47 06	sta $0647			sta 	GXDiffX
.830c	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.830f					_GDXNotNegative:
.830f	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8312	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8315	8d 4c 06	sta $064c			sta 	GXAdjust
.8318	ad 47 06	lda $0647			lda 	GXDiffX
.831b	8d 4d 06	sta $064d			sta 	GXTotal
.831e	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8321	cd 47 06	cmp $0647			cmp 	GXDiffX
.8324	90 0f		bcc $8335			bcc 	_GDXNotLarger
.8326	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8329	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.832c	8d 4c 06	sta $064c			sta 	GXAdjust
.832f	ad 48 06	lda $0648			lda 	GXDiffY
.8332	8d 4d 06	sta $064d			sta 	GXTotal
.8335					_GDXNotLarger:
.8335	ad 4d 06	lda $064d			lda 	GXTotal
.8338	4a		lsr a				lsr 	a
.8339	8d 4b 06	sta $064b			sta 	GXPosition
.833c	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.833d					GXFillRectangle:
.833d	38		sec				sec
.833e	80 01		bra $8341			bra 	GXRectangle
.8340					GXFrameRectangle:
.8340	18		clc				clc
.8341					GXRectangle:
.8341	08		php				php 								; save Fill flag (CS)
.8342	20 f2 84	jsr $84f2			jsr 	GXOpenBitmap 				; start drawing
.8345	20 7b 85	jsr $857b			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8348	20 10 85	jsr $8510			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.834b	38		sec				sec 								; sec = Draw line
.834c	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.834f	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8352	cd 37 06	cmp $0637			cmp 	gxY1
.8355	f0 19		beq $8370			beq 	_GXRectangleExit
.8357					_GXRectLoop:
.8357	20 60 85	jsr $8560			jsr 	GXMovePositionDown 			; down one.
.835a	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.835d	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8360	cd 37 06	cmp $0637			cmp 	gXY1
.8363	f0 07		beq $836c			beq 	_GXLastLine
.8365	28		plp				plp 								; get flag back
.8366	08		php				php
.8367	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw horizontal line
.836a	80 eb		bra $8357			bra 	_GXRectLoop
.836c					_GXLastLine:
.836c	38		sec				sec
.836d	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0
.8370					_GXRectangleExit:
.8370	68		pla				pla 								; throw fill flag.
.8371	20 03 85	jsr $8503			jsr 	GXCloseBitmap 				; stop drawing and exit
.8374	60		rts				rts
.8375					GXDrawLineX1X0:
.8375	08		php				php 								; save solid/either-end
.8376	38		sec				sec
.8377	ad 35 06	lda $0635			lda		gXX1
.837a	ed 31 06	sbc $0631			sbc 	gXX0
.837d	85 36		sta $36				sta 	gzTemp0
.837f	ad 36 06	lda $0636			lda 	gXX1+1
.8382	ed 32 06	sbc $0632			sbc 	gXX0+1
.8385	85 37		sta $37				sta 	gzTemp0+1
.8387	28		plp				plp
.8388					GXDrawLineTemp0:
.8388	a5 3a		lda $3a				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.838a	48		pha				pha
.838b	a5 3b		lda $3b				lda 	gsTemp+1
.838d	48		pha				pha
.838e	ad 41 06	lda $0641			lda 	gsOffset
.8391	48		pha				pha
.8392	a5 0b		lda $0b				lda 	GFXEditSlot
.8394	48		pha				pha
.8395	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8398	90 1e		bcc $83b8			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.839a					_GXDLTLine:
.839a	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.839c	2d 3e 06	and $063e			and 	gxANDValue
.839f	4d 3d 06	eor $063d			eor 	gxEORValue
.83a2	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83a4	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.83a6	d0 04		bne $83ac			bne 	_GXDLTNoBorrow
.83a8	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.83aa	30 2e		bmi $83da			bmi 	_GXDLTExit
.83ac					_GXDLTNoBorrow:
.83ac	c6 36		dec $36				dec 	gzTemp0
.83ae	c8		iny				iny 								; next slot.
.83af	d0 e9		bne $839a			bne 	_GXDLTLine
.83b1	e6 3b		inc $3b				inc 	gsTemp+1 					; carry to next
.83b3	20 e8 83	jsr $83e8			jsr 	_GXDLTCheckWrap				; check for new page.
.83b6	80 e2		bra $839a			bra 	_GXDLTLine
.83b8					_GXDLTEndPoints:
.83b8	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.83ba	2d 3e 06	and $063e			and 	gxANDValue
.83bd	4d 3d 06	eor $063d			eor 	gxEORValue
.83c0	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83c2	98		tya				tya 								; advance to right side
.83c3	18		clc				clc
.83c4	65 36		adc $36				adc 	gzTemp0
.83c6	a8		tay				tay
.83c7	a5 3b		lda $3b				lda 	gsTemp+1
.83c9	65 37		adc $37				adc 	gzTemp0+1
.83cb	85 3b		sta $3b				sta 	gsTemp+1
.83cd	20 e8 83	jsr $83e8			jsr 	_GXDLTCheckWrap 			; fix up.
.83d0	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel on the right
.83d2	2d 3e 06	and $063e			and 	gxANDValue
.83d5	4d 3d 06	eor $063d			eor 	gxEORValue
.83d8	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83da					_GXDLTExit:
.83da	68		pla				pla
.83db	85 0b		sta $0b				sta 	GFXEditSlot
.83dd	68		pla				pla
.83de	8d 41 06	sta $0641			sta 	gsOffset
.83e1	68		pla				pla
.83e2	85 3b		sta $3b				sta 	gsTemp+1
.83e4	68		pla				pla
.83e5	85 3a		sta $3a				sta 	gsTemp
.83e7	60		rts				rts
.83e8					_GXDLTCheckWrap:
.83e8	a5 3b		lda $3b				lda 	gsTemp+1 					; check end of page
.83ea	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ec	90 06		bcc $83f4			bcc 	_GXDLTCWExit
.83ee	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f0	85 3b		sta $3b				sta 	gsTemp+1
.83f2	e6 0b		inc $0b				inc 	GFXEditSlot
.83f4					_GXDLTCWExit:
.83f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.83f5					GraphicDraw:
.83f5	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.83f7	b0 06		bcs $83ff			bcs 	_GDCoordinate
.83f9	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.83fb	84 37		sty $37				sty 	gzTemp0+1
.83fd	80 2c		bra $842b			bra 	_GDExecuteA 				; and execute
.83ff					_GDCoordinate:
.83ff	48		pha				pha 								; save AXY
.8400	da		phx				phx
.8401	5a		phy				phy
.8402	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8404					_GDCopy1:
.8404	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8407	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.840a	ca		dex				dex
.840b	10 f7		bpl $8404			bpl 	_GDCopy1
.840d	68		pla				pla 								; update Y
.840e	8d 2b 06	sta $062b			sta 	gxCurrentY
.8411	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.8414	68		pla				pla
.8415	8d 29 06	sta $0629			sta 	gxCurrentX
.8418	68		pla				pla 								; get A (command+X.1) back
.8419	48		pha				pha
.841a	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.841c	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.841f	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.8421					_GDCopy2:
.8421	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8424	9d 31 06	sta $0631,x			sta 	gxX0,x
.8427	ca		dex				dex
.8428	10 f7		bpl $8421			bpl 	_GDCopy2
.842a	68		pla				pla 								; get command back
.842b					_GDExecuteA:
.842b	29 fe		and #$fe			and 	#$FE 						; lose LSB
.842d	aa		tax				tax
.842e	7c 32 84	jmp ($8432,x)			jmp 	(GDVectors,x)
.8431					GXMove:
.8431	60		rts				rts
.8432					GDVectors:
>8432							.fill 	2 							; $00 		; Open/Close Bitmap
>8434	c9 81						.word 	GXClearBitmap 				; $01 	  	: Clear Bitmap to X
>8436	5e 84						.word 	GXSetColourMode 			; $02 		; Set colour and drawing mode
>8438	67 84						.word 	GXSetDrawMode 				; $03 		; Set all mode bits
>843a							.fill 	12*2 						; $04-$0F 	: Reserved
>8452	31 84						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8454	13 82						.word 	GXLine 						; $11 		: Draw line
>8456	40 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8458	3d 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>845a	88 80						.word 	GXFrameCircle 				; $14 		; Framed circle
>845c	84 80						.word 	GXFillCircle 				; $15 		; Filled circle
.845e					GXSetColourMode:
.845e	a6 36		ldx $36				ldx 	gzTemp0
.8460	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.8463	a5 37		lda $37				lda 	gzTemp0+1 								; mode
.8465	80 05		bra $846c			bra 	GXSetDrawCode
.8467					GXSetDrawMode:
.8467	a5 36		lda $36				lda 	gzTemp0
.8469	8d 3b 06	sta $063b			sta 	gxMode 									; set drawing mode for chars/sprites
.846c					GXSetDrawCode:
.846c	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.846e	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8471	ae 3c 06	ldx $063c			ldx 	gxColour
.8474	8e 3d 06	stx $063d			stx 	gxEORValue
.8477	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8479	90 03		bcc $847e			bcc 	_GXSDCNotAndColour
.847b	8e 3e 06	stx $063e			stx 	gxANDValue
.847e					_GXSDCNotAndColour:
.847e	d0 03		bne $8483			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.8480	9c 3d 06	stz $063d			stz 	gxEORValue
.8483					_GXSDCNotAnd:
.8483	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8484	90 08		bcc $848e			bcc 	_GXSDCNoFlip
.8486	ad 3e 06	lda $063e			lda	 	gxANDValue
.8489	49 ff		eor #$ff			eor 	#$FF
.848b	8d 3e 06	sta $063e			sta 	gxANDValue
.848e					_GXSDCNoFlip:
.848e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.848f					RunDemos:
.848f	64 01		stz $01				stz 	1
.8491	a9 0f		lda #$0f			lda 	#$0F
.8493	8d 00 d0	sta $d000			sta 	$D000
.8496	a9 01		lda #$01			lda 	#1
.8498	8d 00 d1	sta $d100			sta 	$D100
.849b	9c 01 d1	stz $d101			stz 	$D101
.849e	9c 02 d1	stz $d102			stz 	$D102
.84a1	a9 02		lda #$02			lda 	#2
.84a3	8d 03 d1	sta $d103			sta 	$D103
.84a6	a9 10		lda #$10			lda 	#16
.84a8	8d 39 06	sta $0639			sta 	gxBasePage
.84ab	a9 f0		lda #$f0			lda 	#240
.84ad	8d 3a 06	sta $063a			sta 	gxHeight
.84b0					loop:
.84b0	a9 02		lda #$02			lda 	#((1)*2)+(((4) >> 8) & 1)
.84b2	a2 04		ldx #$04			ldx 	#((4) & $FF)
.84b4	a0 00		ldy #$00			ldy 	#(0)
.84b6	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84b9	a9 04		lda #$04			lda 	#((2)*2)+((($1C) >> 8) & 1)
.84bb	a2 1c		ldx #$1c			ldx 	#(($1C) & $FF)
.84bd	a0 01		ldy #$01			ldy 	#(1)
.84bf	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84c2	a9 20		lda #$20			lda 	#((16)*2)+(((0) >> 8) & 1)
.84c4	a2 00		ldx #$00			ldx 	#((0) & $FF)
.84c6	a0 00		ldy #$00			ldy 	#(0)
.84c8	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84cb	a9 2b		lda #$2b			lda 	#((21)*2)+(((319) >> 8) & 1)
.84cd	a2 3f		ldx #$3f			ldx 	#((319) & $FF)
.84cf	a0 ef		ldy #$ef			ldy 	#(239)
.84d1	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84d4	a9 2a		lda #$2a			lda 	#((21)*2)+(((0) >> 8) & 1)
.84d6	a2 00		ldx #$00			ldx 	#((0) & $FF)
.84d8	a0 00		ldy #$00			ldy 	#(0)
.84da	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84dd	60		rts				rts
.84de	20 fa 9b	jsr $9bfa	demo:	jsr 	Random32Bit
.84e1	ee 3d 06	inc $063d			inc 	gxEORValue
.84e4	a9 2a		lda #$2a			lda 	#21*2
.84e6	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.84e9	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.84ec	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84ef	80 ed		bra $84de			bra 	demo
.84f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.84f2					GXOpenBitmap:
.84f2	78		sei				sei 								; no interrupts here
.84f3	a5 00		lda $00				lda 	0 							; save original MMU Control register
.84f5	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.84f8	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.84fa	85 00		sta $00				sta 	0
.84fc	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.84fe	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.8501	58		cli				cli
.8502	60		rts				rts
.8503					GXCloseBitmap:
.8503	78		sei				sei
.8504	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8507	85 0b		sta $0b				sta 	GFXEditSlot
.8509	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.850c	85 00		sta $00				sta 	0
.850e	58		cli				cli
.850f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.8510					GXPositionCalc:
.8510	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.8513	85 3a		sta $3a				sta 	gsTemp
.8515	64 3b		stz $3b				stz 	gsTemp+1
.8517	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.8519	26 3b		rol $3b				rol 	gsTemp+1
.851b	06 3a		asl $3a				asl 	gsTemp
.851d	26 3b		rol $3b				rol 	gsTemp+1
.851f	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8520	65 3a		adc $3a				adc 	gsTemp
.8522	85 3a		sta $3a				sta 	gsTemp
.8524	90 02		bcc $8528			bcc 	_GXPCNoCarry
.8526	e6 3b		inc $3b				inc 	gsTemp+1
.8528					_GXPCNoCarry:
.8528	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.852a	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.852c	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.852e	85 36		sta $36				sta 	gzTemp0
.8530	64 3b		stz $3b				stz 	gsTemp+1
.8532	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8534					_GXPCMultiply32:
.8534	06 3a		asl $3a				asl 	gsTemp
.8536	26 3b		rol $3b				rol 	gsTemp+1
.8538	3a		dec a				dec 	a
.8539	d0 f9		bne $8534			bne 	_GXPCMultiply32
.853b	18		clc				clc
.853c	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.853f	65 3a		adc $3a				adc 	gsTemp
.8541	8d 41 06	sta $0641			sta 	gsOffset
.8544	ad 32 06	lda $0632			lda 	GXX0+1
.8547	65 3b		adc $3b				adc 	gsTemp+1
.8549	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.854b	90 04		bcc $8551			bcc 	_GXPCNoOverflow
.854d	29 1f		and #$1f			and 	#$1F 						; fix it up
.854f	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8551					_GXPCNoOverflow:
.8551	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8553	85 3b		sta $3b				sta 	gsTemp+1
.8555	64 3a		stz $3a				stz 	gsTemp
.8557	18		clc				clc
.8558	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.855a	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.855d	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.855f	60		rts				rts
.8560					GXMovePositionDown:
.8560	18		clc				clc 								; add 320 to offset/temp+1
.8561	ad 41 06	lda $0641			lda 	gsOffset
.8564	69 40		adc #$40			adc 	#64
.8566	8d 41 06	sta $0641			sta 	gsOffset
.8569	a5 3b		lda $3b				lda 	gsTemp+1
.856b	69 01		adc #$01			adc 	#1
.856d	85 3b		sta $3b				sta 	gsTemp+1
.856f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8571	90 07		bcc $857a			bcc 	_GXMPDExit
.8573	38		sec				sec  								; next page
.8574	e9 20		sbc #$20			sbc 	#$20
.8576	85 3b		sta $3b				sta 	gsTemp+1
.8578	e6 0b		inc $0b				inc 	GFXEditSlot
.857a					_GXMPDExit:
.857a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.857b					GXSortXY:
.857b	20 99 85	jsr $8599			jsr 	GXSortY 					; will be sorted on Y now
.857e	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8581	cd 35 06	cmp $0635			cmp 	gxX1
.8584	ad 32 06	lda $0632			lda 	gXX0+1
.8587	ed 36 06	sbc $0636			sbc 	gXX1+1
.858a	90 0c		bcc $8598			bcc 	_GXSXYExit 					; X0 < X1 exit
.858c	a2 00		ldx #$00			ldx 	#0 							; swap them over
.858e	a0 04		ldy #$04			ldy 	#4
.8590	20 ad 85	jsr $85ad			jsr 	GXSwapXY
.8593	e8		inx				inx
.8594	c8		iny				iny
.8595	20 ad 85	jsr $85ad			jsr 	GXSwapXY
.8598					_GXSXYExit:
.8598	60		rts				rts
.8599					GXSortY:
.8599	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.859c	cd 37 06	cmp $0637			cmp 	gxY1
.859f	90 0b		bcc $85ac			bcc 	_GXSYSorted
.85a1	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.85a3	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.85a5					_GXSwap1:
.85a5	20 ad 85	jsr $85ad			jsr 	GXSwapXY
.85a8	88		dey				dey
.85a9	ca		dex				dex
.85aa	10 f9		bpl $85a5			bpl 	_GXSwap1
.85ac					_GXSYSorted:
.85ac	60		rts				rts
.85ad					GXSwapXY:
.85ad	bd 31 06	lda $0631,x			lda 	gxX0,x
.85b0	48		pha				pha
.85b1	b9 31 06	lda $0631,y			lda 	gxX0,y
.85b4	9d 31 06	sta $0631,x			sta 	gxX0,x
.85b7	68		pla				pla
.85b8	99 31 06	sta $0631,y			sta 	gxX0,y
.85bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.85bc					AssembleGroup1:
.85bc	a9 ff		lda #$ff			lda 	#$FF
.85be	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.85c1	80 02		bra $85c5			bra 	AsmGroup12
.85c3					AssembleGroup2:
.85c3	a5 00		lda $00				lda 	$00
.85c5					AsmGroup12:
.85c5	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.85c8	68		pla				pla 								; pop the return address to access the information following.
.85c9	fa		plx				plx
.85ca	20 53 86	jsr $8653			jsr 	AccessParameters 			; get opcode and save as base
.85cd	8d a4 04	sta $04a4			sta 	BaseOpcode
.85d0	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.85d3	d0 08		bne $85dd			bne 	_AG12HaveMask
.85d5	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.85d7	20 5b 86	jsr $865b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.85da	8d a5 04	sta $04a5			sta 	ModeMask
.85dd					_AG12HaveMask:
.85dd	20 96 87	jsr $8796			jsr 	TypeAndCalculateOperand 	; get zero page type
.85e0	da		phx				phx 								; save found address mode
.85e1	20 bf 86	jsr $86bf			jsr 	AssembleModeX
.85e4	fa		plx				plx  								; restore address mode
.85e5	b0 0b		bcs $85f2			bcs 	_AG12Exit
.85e7	20 f3 85	jsr $85f3			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.85ea	20 bf 86	jsr $86bf			jsr 	AssembleModeX
.85ed	b0 03		bcs $85f2			bcs 	_AG12Exit
.85ef	4c b0 ab	jmp $abb0			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.85f2					_AG12Exit:
.85f2	60		rts				rts
.85f3					PromoteToAbsolute:
.85f3	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.85f5	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.85f7	f0 19		beq $8612			beq 	_PTADo
.85f9	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.85fb	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.85fd	f0 13		beq $8612			beq 	_PTADo
.85ff	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8601	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8603	f0 0d		beq $8612			beq 	_PTADo
.8605	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8607	e0 d1		cpx #$d1			cpx 	#AM_IND
.8609	f0 07		beq $8612			beq 	_PTADo
.860b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.860d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.860f	f0 01		beq $8612			beq 	_PTADo
.8611	60		rts				rts
.8612					_PTADo:
.8612	aa		tax				tax
.8613	60		rts				rts
.8614					AssembleGroup3:
.8614	68		pla				pla 								; get parameters, which is just the opcode.
.8615	fa		plx				plx
.8616	20 53 86	jsr $8653			jsr 	AccessParameters 			; get and output opcode
.8619	20 6b 86	jsr $866b			jsr 	AssemblerWriteByte
.861c	20 fa 87	jsr $87fa			jsr 	CalculateOperand 			; get a 16 bit operand
.861f	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8622	38		sec				sec
.8623	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8626	48		pha				pha 								; LSB in A
.8627	ad 10 04	lda $0410			lda 	NSMantissa1
.862a	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.862d	aa		tax				tax 								; MSB in X
.862e	68		pla				pla
.862f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8630	69 7f		adc #$7f			adc 	#$7F
.8632	90 01		bcc $8635			bcc 	_AG3NoCarry
.8634	e8		inx				inx
.8635					_AG3NoCarry:
.8635	38		sec				sec 								; fix back and write out anyways.
.8636	e9 80		sbc #$80			sbc 	#$80
.8638	20 6b 86	jsr $866b			jsr 	AssemblerWriteByte
.863b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.863d	f0 0a		beq $8649			beq 	_AG3Exit
.863f	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8642	29 01		and #$01			and 	#1
.8644	f0 03		beq $8649			beq 	_AG3Exit
.8646	4c b5 ab	jmp $abb5			jmp 	RangeError 					; no, branch is out of range
.8649					_AG3Exit:
.8649	60		rts				rts
.864a					AssembleGroup4:
.864a	68		pla				pla 								; pop address
.864b	fa		plx				plx
.864c	20 53 86	jsr $8653			jsr 	AccessParameters 			; access and get first
.864f	20 6b 86	jsr $866b			jsr 	AssemblerWriteByte 			; output it.
.8652	60		rts				rts
.8653					AccessParameters:
.8653	8d a1 04	sta $04a1			sta 	ParamStart
.8656	8e a2 04	stx $04a2			stx 	ParamStart+1
.8659	a9 01		lda #$01			lda 	#1
.865b					GetParameter:
.865b	5a		phy				phy
.865c	a8		tay				tay
.865d	ad a1 04	lda $04a1			lda 	ParamStart
.8660	85 36		sta $36				sta 	zTemp0
.8662	ad a2 04	lda $04a2			lda 	ParamStart+1
.8665	85 37		sta $37				sta 	zTemp0+1
.8667	b1 36		lda ($36),y			lda 	(zTemp0),y
.8669	7a		ply				ply
.866a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.866b					AssemblerWriteByte:
.866b	48		pha			pha
.866c	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.866f	29 02		and #$02		and 	#2
.8671	f0 1b		beq $868e		beq 	_AWBNoPrint
.8673	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8676	20 a9 86	jsr $86a9		jsr 	PrintHex
.8679	ad 9e 04	lda $049e		lda		AssemblerAddress
.867c	20 a9 86	jsr $86a9		jsr 	PrintHex
.867f	a9 20		lda #$20		lda 	#' '
.8681	20 54 ad	jsr $ad54		jsr 	EXTPrintCharacter
.8684	68		pla			pla 									; print byte
.8685	48		pha			pha
.8686	20 a9 86	jsr $86a9		jsr 	PrintHex
.8689	a9 0d		lda #$0d		lda 	#13
.868b	20 54 ad	jsr $ad54		jsr 	EXTPrintCharacter
.868e					_AWBNoPrint:
.868e	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8691	85 36		sta $36			sta 	zTemp0
.8693	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8696	f0 0e		beq $86a6		beq 	_AWBRange
.8698	85 37		sta $37			sta 	zTemp0+1
.869a	68		pla			pla 									; write byte out
.869b	92 36		sta ($36)		sta 	(zTemp0)
.869d	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.86a0	d0 03		bne $86a5		bne 	_AWBNoCarry
.86a2	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.86a5					_AWBNoCarry:
.86a5	60		rts			rts
.86a6					_AWBRange:
.86a6	4c b5 ab	jmp $abb5		jmp 	RangeError
.86a9					PrintHex:
.86a9	48		pha				pha
.86aa	4a		lsr a				lsr 	a
.86ab	4a		lsr a				lsr 	a
.86ac	4a		lsr a				lsr 	a
.86ad	4a		lsr a				lsr 	a
.86ae	20 b2 86	jsr $86b2			jsr 	_PrintNibble
.86b1	68		pla				pla
.86b2					_PrintNibble:
.86b2	29 0f		and #$0f			and 	#15
.86b4	c9 0a		cmp #$0a			cmp 	#10
.86b6	90 02		bcc $86ba			bcc 	_NoShift
.86b8	69 06		adc #$06			adc 	#6
.86ba					_NoShift:
.86ba	69 30		adc #$30			adc 	#48
.86bc	4c 54 ad	jmp $ad54			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.86bf					AssembleModeX:
.86bf	5a		phy				phy
.86c0	ad a3 04	lda $04a3			lda 	IsGroup1
.86c3	f0 17		beq $86dc			beq 	_AMXGroup2
.86c5	8a		txa				txa 							; is it in group # 1
.86c6	29 40		and #$40			and 	#AM_ISG1
.86c8	f0 50		beq $871a			beq 	_AMXFail 				; no, give up.
.86ca	8a		txa				txa 							; get back.
.86cb	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.86cd	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.86cf	d0 22		bne $86f3			bne 	_AMXHaveInfo
.86d1	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.86d4	c9 81		cmp #$81			cmp 	#$81
.86d6	f0 42		beq $871a			beq 	_AMXFail
.86d8	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.86da	80 17		bra $86f3			bra 	_AMXHaveInfo 			; odd design decision there.
.86dc					_AMXGroup2:
.86dc	8a		txa				txa 							; is it in group 2 ?
.86dd	29 20		and #$20			and 	#AM_ISG2
.86df	f0 39		beq $871a			beq 	_AMXFail 				; no, give up.
.86e1	8a		txa				txa 							; get the offset into Y
.86e2	29 1f		and #$1f			and 	#$1F
.86e4	4a		lsr a				lsr 	a 						; make it 0-7.
.86e5	4a		lsr a				lsr  	a
.86e6	a8		tay				tay
.86e7	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.86ea					_AMXCheckOkay:
.86ea	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.86eb	88		dey				dey
.86ec	10 fc		bpl $86ea			bpl 	_AMXCheckOkay
.86ee	90 2a		bcc $871a			bcc 	_AMXFail 				; not allowed.
.86f0	8a		txa				txa  							; get mask back
.86f1	29 1f		and #$1f			and 	#$1F
.86f3					_AMXHaveInfo:
.86f3	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.86f5	10 05		bpl $86fc			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.86f7	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.86fa	d0 1e		bne $871a			bne 	_AMXFail
.86fc					_AMXAnySize:
.86fc	18		clc				clc 							; add offset to the base opcode
.86fd	6d a4 04	adc $04a4			adc 	BaseOpcode
.8700					_AMXOutputCode:
.8700	20 6b 86	jsr $866b			jsr 	AssemblerWriteByte 		; write the opcode out.
.8703	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8705	f0 10		beq $8717			beq 	_AMXExit
.8707	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.870a	20 6b 86	jsr $866b			jsr 	AssemblerWriteByte
.870d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.870f	30 06		bmi $8717			bmi 	_AMXExit
.8711	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8714	20 6b 86	jsr $866b			jsr 	AssemblerWriteByte
.8717					_AMXExit:
.8717	7a		ply				ply
.8718	38		sec				sec
.8719	60		rts				rts
.871a					_AMXFail:
.871a	a0 00		ldy #$00			ldy 	#0
.871c					_AMXCheckOddities:
.871c	8a		txa				txa
.871d	d9 45 87	cmp $8745,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8720	d0 16		bne $8738			bne 	_AMXCONext
.8722	b9 43 87	lda $8743,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8725	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8728	d0 0e		bne $8738			bne 	_AMXCONext
.872a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.872c	10 05		bpl $8733			bpl 	_AMXCONotZero
.872e	ad 10 04	lda $0410			lda 	NSMantissa1
.8731	d0 05		bne $8738			bne 	_AMXCONext
.8733					_AMXCONotZero:
.8733	b9 44 87	lda $8744,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8736	80 c8		bra $8700			bra 	_AMXOutputCode 			; and assemble it
.8738					_AMXCONext:
.8738	c8		iny				iny
.8739	c8		iny				iny
.873a	c8		iny				iny
.873b	b9 43 87	lda $8743,y			lda 	ExtraOpcode+0,y 		; end of table
.873e	d0 dc		bne $871c			bne 	_AMXCheckOddities
.8740					_AMXCOFail:
.8740	7a		ply				ply
.8741	18		clc				clc
.8742	60		rts				rts
.8743					ExtraOpcode:
>8743	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8746	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8749	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>874c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>874f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8752	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8755	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8758	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>875b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>875e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8761	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8762					LabelHere:
.8762	c8		iny				iny 								; skip .
.8763	a2 00		ldx #$00			ldx 	#0 							; get a term
.8765	20 6b 99	jsr $996b			jsr 	EvaluateTerm 				; get a term
.8768	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.876b	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.876d	d0 24		bne $8793			bne 	_ALType
.876f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8772	85 36		sta $36				sta 	zTemp0
.8774	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8777	85 37		sta $37				sta 	zTemp0+1
.8779	5a		phy				phy 								; copy address in.
.877a	a0 01		ldy #$01			ldy 	#1
.877c	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.877f	92 36		sta ($36)			sta 	(zTemp0)
.8781	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8784	91 36		sta ($36),y			sta 	(zTemp0),y
.8786	c8		iny				iny
.8787	a9 00		lda #$00			lda 	#0
.8789	91 36		sta ($36),y			sta 	(zTemp0),y
.878b	c8		iny				iny
.878c	91 36		sta ($36),y			sta 	(zTemp0),y
.878e	c8		iny				iny
.878f	91 36		sta ($36),y			sta 	(zTemp0),y
.8791	7a		ply				ply
.8792	60		rts				rts
.8793					_ALType:
.8793	4c ba ab	jmp $abba			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8796					TypeAndCalculateOperand:
.8796	b1 30		lda ($30),y			lda 	(codePtr),y
.8798	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.879a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.879c	f0 5b		beq $87f9			beq 	_TACOExit
.879e	c9 80		cmp #$80			cmp 	#KWC_EOL
.87a0	f0 57		beq $87f9			beq 	_TACOExit
.87a2	c8		iny				iny
.87a3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.87a5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.87a7	f0 51		beq $87fa			beq 	CalculateOperand
.87a9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.87ab	f0 1f		beq $87cc			beq 	_TACOIndirect
.87ad	88		dey				dey 								; undo get of first character
.87ae	20 fa 87	jsr $87fa			jsr 	CalculateOperand 			; get operand
.87b1	b1 30		lda ($30),y			lda 	(codePtr),y
.87b3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.87b5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b7	d0 40		bne $87f9			bne 	_TACOExit
.87b9	c8		iny				iny
.87ba	20 41 a5	jsr $a541			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.87bd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.87bf	c9 58		cmp #$58			cmp 	#'X'
.87c1	f0 36		beq $87f9			beq 	_TACOExit
.87c3	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.87c5	c9 59		cmp #$59			cmp 	#'Y'
.87c7	f0 30		beq $87f9			beq 	_TACOExit
.87c9					_TACOSyntax:
.87c9	4c b0 ab	jmp $abb0			jmp 	SyntaxError
.87cc					_TACOIndirect:
.87cc	20 fa 87	jsr $87fa			jsr 	CalculateOperand 			; get the operand
.87cf	b1 30		lda ($30),y			lda 	(codePtr),y
.87d1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.87d3	f0 17		beq $87ec			beq 	_TACOIndX
.87d5	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.87d8	b1 30		lda ($30),y			lda 	(codePtr),y
.87da	a2 d1		ldx #$d1			ldx 	#AM_IND
.87dc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.87de	d0 19		bne $87f9			bne 	_TACOExit
.87e0	c8		iny				iny
.87e1	20 41 a5	jsr $a541			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.87e4	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.87e6	d0 e1		bne $87c9			bne 	_TACOSyntax
.87e8	a2 d0		ldx #$d0			ldx 	#AM_INDY
.87ea	80 0d		bra $87f9			bra 	_TACOExit
.87ec					_TACOIndX:
.87ec	c8		iny				iny
.87ed	20 41 a5	jsr $a541			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.87f0	c9 58		cmp #$58			cmp 	#'X' 						; check X
.87f2	d0 d5		bne $87c9			bne 	_TACOSyntax
.87f4	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket			; check )
.87f7	a2 c0		ldx #$c0			ldx 	#AM_INDX
.87f9					_TACOExit:
.87f9	60		rts				rts
.87fa					CalculateOperand:
.87fa	48		pha				pha
.87fb	da		phx				phx
.87fc	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.87fe	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger
.8801	fa		plx				plx
.8802	68		pla				pla
.8803	60		rts				rts
.a541					TACOCheckXY:
.a541	b1 30		lda ($30),y			lda 	(codePtr),y
.a543	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a545	c9 40		cmp #$40			cmp 	#$40
.a547	d0 21		bne $a56a			bne 	_TCXYFail
.a549	b1 30		lda ($30),y			lda 	(codePtr),y
.a54b	18		clc				clc
.a54c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a54e	85 37		sta $37				sta 	zTemp0+1
.a550	c8		iny				iny
.a551	b1 30		lda ($30),y			lda 	(codePtr),y
.a553	c8		iny				iny
.a554	85 36		sta $36				sta 	zTemp0
.a556	5a		phy				phy 								; save position
.a557	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a559	b1 36		lda ($36),y			lda 	(zTemp0),y
.a55b	d0 0c		bne $a569			bne 	_TCXYPopFail
.a55d	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a55f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a561	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a563	f0 08		beq $a56d			beq 	_TCXYFound
.a565	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a567	f0 04		beq $a56d			beq 	_TCXYFound
.a569					_TCXYPopFail:
.a569	7a		ply				ply
.a56a					_TCXYFail:
.a56a	a9 00		lda #$00			lda 	#0
.a56c	60		rts				rts
.a56d					_TCXYFound:
.a56d	7a		ply				ply 								; restore position
.a56e	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a570	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8804					EditProgramCode:
.8804	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8807	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.880a	20 a8 9e	jsr $9ea8			jsr 	MemorySearch
.880d	90 05		bcc $8814			bcc 	_EPCNoDelete 				; reached the end don't delete
.880f	d0 03		bne $8814			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8811	20 98 ad	jsr $ad98			jsr 	MemoryDeleteLine 			; delete the line
.8814					_EPCNoDelete:
.8814	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8817	c9 80		cmp #$80			cmp 	#KWC_EOL
.8819	f0 0d		beq $8828			beq 	_EPCNoInsert
.881b	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.881e	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8821	20 a8 9e	jsr $9ea8			jsr 	MemorySearch
.8824	18		clc				clc 								; insert at this point.
.8825	20 cf ad	jsr $adcf			jsr 	MemoryInsertLine 			; insert the line
.8828					_EPCNoInsert:
.8828	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8829					WarmStart:
.8829	a2 ff		ldx #$ff			ldx 	#$FF
.882b	9a		txs				txs
.882c	20 6a ad	jsr $ad6a			jsr 	EXTInputLine 				; get line to lineBuffer
.882f	20 c2 a2	jsr $a2c2			jsr 	TokeniseLine 				; tokenise the line
.8832	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8835	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8838	d0 17		bne $8851			bne 	_WSEditCode 				; if so,edit code.
.883a	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.883d	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.883f	85 30		sta $30				sta 	codePtr
.8841	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8843	85 31		sta $31				sta 	codePtr+1
.8845	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8848	c9 80		cmp #$80			cmp 	#KWC_EOL
.884a	f0 dd		beq $8829			beq 	WarmStart
.884c	20 5a 8e	jsr $8e5a			jsr 	RUNCodePointerLine 			; execute that line.
.884f	80 d8		bra $8829			bra 	WarmStart
.8851					_WSEditCode:
.8851	20 04 88	jsr $8804			jsr 	EditProgramCode
.8854	20 c2 88	jsr $88c2			jsr 	ClearCommand
.8857	80 d0		bra $8829			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8859					AssembleCommand:
.8859	a2 00		ldx #$00			ldx 	#0
.885b	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger 		; start address
.885e	ad 08 04	lda $0408			lda 	NSMantissa0
.8861	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8864	ad 10 04	lda $0410			lda 	NSMantissa1
.8867	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.886a	20 d2 a5	jsr $a5d2			jsr 	CheckComma
.886d	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger 		; options
.8870	ad 08 04	lda $0408			lda 	NSMantissa0
.8873	8d a0 04	sta $04a0			sta 	AssemblerControl
.8876	60		rts				rts
.8877	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8878					AssertCommand:
.8878	a2 00		ldx #$00			ldx 	#0
.887a	20 c0 9d	jsr $9dc0			jsr 	EvaluateInteger 			; the assert test
.887d	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; exit if result is non zero.
.8880	d0 05		bne $8887			bne 	_ACExit
.8882	a9 0a		lda #$0a		lda	#10
.8884	4c 91 92	jmp $9291		jmp	ErrorHandler
.8887					_ACExit:
.8887	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8888					CallCommand:
.8888	a2 00		ldx #$00			ldx 	#0
.888a	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger
.888d					_CCClear
.888d	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.888e	20 49 9e	jsr $9e49			jsr 	NSMSetZero
.8891	e0 04		cpx #$04			cpx 	#4
.8893	d0 f8		bne $888d			bne 	_CCClear
.8895	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8897					_CCCParam:
.8897	b1 30		lda ($30),y			lda 	(codePtr),y
.8899	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.889b	d0 09		bne $88a6			bne 	_CCCRun6502
.889d	c8		iny				iny 								; skip comma
.889e	e8		inx				inx	 								; next level
.889f	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger 		; get A/X/Y
.88a2	e0 03		cpx #$03			cpx 	#3
.88a4	90 f1		bcc $8897			bcc 	_CCCParam 					; done all 3 ?
.88a6					_CCCRun6502:
.88a6	5a		phy				phy 								; save position
.88a7	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.88aa	85 37		sta $37				sta 	zTemp0+1
.88ac	ad 08 04	lda $0408			lda 	NSMantissa0
.88af	85 36		sta $36				sta 	zTemp0
.88b1	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.88b4	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.88b7	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.88ba	20 bf 88	jsr $88bf			jsr 	_CCCZTemp0 					; call zTemp0
.88bd	7a		ply				ply 								; restore position and exit
.88be	60		rts				rts
.88bf					_CCCZTemp0:
.88bf	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.88c2					ClearCommand:
.88c2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.88c4	85 36		sta $36				sta 	0+zTemp0
.88c6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.88c8	85 37		sta $37				sta 	1+zTemp0
.88ca					_ClearZeroLoop:
.88ca	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.88cc	f0 24		beq $88f2			beq 	_ClearZeroEnd
.88ce	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.88d0	a9 00		lda #$00			lda 	#0
.88d2					_ClearOneVariable:
.88d2	91 36		sta ($36),y			sta 	(zTemp0),y
.88d4	c8		iny				iny
.88d5	c0 08		cpy #$08			cpy 	#8
.88d7	d0 f9		bne $88d2			bne 	_ClearOneVariable
.88d9	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.88db	b1 36		lda ($36),y			lda 	(zTemp0),y
.88dd	c9 18		cmp #$18			cmp 	#NSTProcedure
.88df	d0 04		bne $88e5			bne 	_ClearNotProcedure
.88e1	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.88e3	91 36		sta ($36),y			sta 	(zTemp0),y
.88e5					_ClearNotProcedure:
.88e5	18		clc				clc 								; go to the next variable
.88e6	b2 36		lda ($36)			lda 	(zTemp0)
.88e8	65 36		adc $36				adc 	zTemp0
.88ea	85 36		sta $36				sta 	zTemp0
.88ec	90 dc		bcc $88ca			bcc 	_ClearZeroLoop
.88ee	e6 37		inc $37				inc 	zTemp0+1
.88f0	80 d8		bra $88ca			bra 	_ClearZeroLoop
.88f2					_ClearZeroEnd:
.88f2	18		clc				clc
.88f3	a5 36		lda $36				lda 	zTemp0
.88f5	69 01		adc #$01			adc 	#1
.88f7	8d 8c 04	sta $048c			sta 	lowMemPtr
.88fa	a5 37		lda $37				lda 	zTemp0+1
.88fc	69 00		adc #$00			adc 	#0
.88fe	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8901	20 62 9f	jsr $9f62			jsr 	StackReset
.8904	20 b2 ae	jsr $aeb2			jsr 	StringSystemInitialise
.8907	20 b1 91	jsr $91b1			jsr 	ProcedureScan
.890a	20 16 8e	jsr $8e16			jsr 	Command_Restore
.890d	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8910	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8913	9c a0 04	stz $04a0			stz 	AssemblerControl
.8916	20 58 9b	jsr $9b58			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8919	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.891a					Command_Data:
.891a	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.891c	a2 80		ldx #$80			ldx 	#KWC_EOL
.891e	20 03 92	jsr $9203			jsr 	ScanForward
.8921	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8922					DimCommand:
.8922	b1 30		lda ($30),y			lda 	(codePtr),y
.8924	29 c0		and #$c0			and 	#$C0
.8926	c9 40		cmp #$40			cmp 	#$40
.8928	d0 7a		bne $89a4			bne 	_DCSyntax
.892a	b1 30		lda ($30),y			lda 	(codePtr),y
.892c	18		clc				clc
.892d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.892f	85 3f		sta $3f				sta 	zaTemp+1
.8931	c8		iny				iny
.8932	b1 30		lda ($30),y			lda 	(codePtr),y
.8934	c8		iny				iny
.8935	85 3e		sta $3e				sta 	zaTemp
.8937	5a		phy				phy
.8938	a0 02		ldy #$02			ldy 	#2 						; read type byte
.893a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.893c	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.893e	c9 18		cmp #$18			cmp 	#NSTProcedure
.8940	f0 62		beq $89a4			beq 	_DCSyntax
.8942	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8944	29 04		and #$04			and 	#NSBIsArray
.8946	f0 64		beq $89ac			beq 	_DCType
.8948	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.894a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.894c	d0 59		bne $89a7			bne 	_DCRedefine
.894e	7a		ply				ply
.894f	20 af 89	jsr $89af			jsr 	_DCGetSize 				; get array size, check it.
.8952	5a		phy				phy
.8953	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8955	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8957	7a		ply				ply 							; is there a second (e.g. ,x)
.8958	b1 30		lda ($30),y			lda 	(codePtr),y
.895a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.895c	d0 0a		bne $8968			bne 	_DCOneDimension
.895e	c8		iny				iny 							; skip comma
.895f	20 af 89	jsr $89af			jsr 	_DCGetSize 				; get 2nd array size
.8962	5a		phy				phy
.8963	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8965	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8967	7a		ply				ply
.8968					_DCOneDimension:
.8968	5a		phy				phy 							; save position
.8969	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.896b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.896d	aa		tax				tax
.896e	c8		iny				iny
.896f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8971	e8		inx				inx 							; bump them.
.8972	1a		inc a				inc 	a
.8973	20 4c aa	jsr $aa4c			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8976	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8978	29 e0		and #$e0			and 	#$E0
.897a	d0 23		bne $899f			bne 	_DCSize
.897c	a0 02		ldy #$02			ldy 	#2 						; get base type
.897e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8980	20 bd 89	jsr $89bd			jsr 	ScaleByBaseType 		; scale by base type
.8983	a5 36		lda $36				lda 	zTemp0
.8985	a6 37		ldx $37				ldx 	zTemp0+1
.8987	20 1a 9b	jsr $9b1a			jsr 	AllocateXABytes 		; allocate memory
.898a	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.898c	91 3e		sta ($3e),y			sta 	(zaTemp),y
.898e	c8		iny				iny
.898f	8a		txa				txa
.8990	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8992	7a		ply				ply 							; get position back
.8993	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket 		; check )
.8996	b1 30		lda ($30),y			lda 	(codePtr),y
.8998	c8		iny				iny 							; consume in case
.8999	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.899b	f0 85		beq $8922			beq 	DimCommand
.899d	88		dey				dey 							; undo consume
.899e	60		rts				rts
.899f					_DCSize:
.899f	a9 16		lda #$16		lda	#22
.89a1	4c 91 92	jmp $9291		jmp	ErrorHandler
.89a4					_DCSyntax:
.89a4	4c b0 ab	jmp $abb0			jmp 	SyntaxError
.89a7					_DCRedefine:
.89a7	a9 15		lda #$15		lda	#21
.89a9	4c 91 92	jmp $9291		jmp	ErrorHandler
.89ac					_DCType:
.89ac	4c ba ab	jmp $abba			jmp 	TypeError
.89af					_DCGetSize:
.89af	a2 00		ldx #$00			ldx 	#0 						; get first index.
.89b1	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger 	; get array dimension
.89b4	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.89b6	f0 e7		beq $899f			beq 	_DCSize
.89b8	c9 fe		cmp #$fe			cmp 	#254
.89ba	f0 e3		beq $899f			beq 	_DCSize
.89bc	60		rts				rts
.89bd					ScaleByBaseType:
.89bd	29 10		and #$10			and 	#NSBIsString 			; is it string
.89bf	d0 19		bne $89da			bne 	_SBBTString
.89c1	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.89c3	48		pha				pha
.89c4	a5 36		lda $36				lda 	zTemp0
.89c6	48		pha				pha
.89c7	06 36		asl $36				asl 	zTemp0 					; x 2
.89c9	26 37		rol $37				rol 	zTemp0+1
.89cb	06 36		asl $36				asl 	zTemp0 					; x 4
.89cd	26 37		rol $37				rol 	zTemp0+1
.89cf	68		pla				pla 							; add stacked value = x 5
.89d0	65 36		adc $36				adc 	zTemp0
.89d2	85 36		sta $36				sta 	zTemp0
.89d4	68		pla				pla
.89d5	65 37		adc $37				adc 	zTemp0+1
.89d7	85 37		sta $37				sta 	zTemp0+1
.89d9	60		rts				rts
.89da					_SBBTString:
.89da	06 36		asl $36				asl 	zTemp0
.89dc	26 37		rol $37				rol 	zTemp0+1
.89de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.89df					EndCommand:
.89df	4c 29 88	jmp $8829			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.89e2					ForCommand:
.89e2	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.89e4	20 fd 9e	jsr $9efd			jsr 	StackOpen
.89e7	a2 00		ldx #$00			ldx 	#0
.89e9	20 6b 99	jsr $996b			jsr 	EvaluateTerm
.89ec	bd 00 04	lda $0400,x			lda 	NSStatus,x
.89ef	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.89f1	d0 49		bne $8a3c			bne		_FCError
.89f3	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.89f5	20 da a5	jsr $a5da			jsr 	CheckNextA
.89f8	e8		inx				inx
.89f9	20 c0 9d	jsr $9dc0			jsr 	EvaluateInteger 			; <from> in +1
.89fc	b1 30		lda ($30),y			lda 	(codePtr),y
.89fe	c8		iny				iny 								; consume it
.89ff	48		pha				pha 								; save on stack for later
.8a00	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8a02	f0 04		beq $8a08			beq 	_FCNoSyntax
.8a04	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8a06	d0 37		bne $8a3f			bne 	_FCSyntaxError
.8a08					_FCNoSyntax:
.8a08	e8		inx				inx
.8a09	20 c0 9d	jsr $9dc0			jsr 	EvaluateInteger
.8a0c	20 41 9f	jsr $9f41			jsr 	STKSaveCodePosition 		; save loop back position
.8a0f	68		pla				pla 								; restore DOWNTO or TO
.8a10	5a		phy				phy 								; save Y on the stack
.8a11	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8a13	f0 02		beq $8a17			beq 	_FCNotDownTo
.8a15	a9 02		lda #$02			lda 	#2
.8a17					_FCNotDownTo:
.8a17	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8a18	a0 10		ldy #$10			ldy 	#16
.8a1a	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8a1c	a0 06		ldy #$06			ldy 	#6
.8a1e	ad 08 04	lda $0408			lda 	NSMantissa0
.8a21	91 34		sta ($34),y			sta 	(basicStack),y
.8a23	ad 10 04	lda $0410			lda 	NSMantissa1
.8a26	c8		iny				iny
.8a27	91 34		sta ($34),y			sta 	(basicStack),y
.8a29	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8a2b	a2 01		ldx #$01			ldx 	#1
.8a2d	20 42 8a	jsr $8a42			jsr 	FCIntegerToStack
.8a30	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8a32	a2 02		ldx #$02			ldx 	#2
.8a34	20 42 8a	jsr $8a42			jsr 	FCIntegerToStack
.8a37	20 62 8a	jsr $8a62			jsr 	CopyIndexToReference
.8a3a	7a		ply				ply 								; restore position
.8a3b	60		rts				rts
.8a3c					_FCError:
.8a3c	4c ba ab	jmp $abba			jmp 	TypeError
.8a3f					_FCSyntaxError:
.8a3f	4c b0 ab	jmp $abb0			jmp 	SyntaxError
.8a42					FCIntegerToStack:
.8a42	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8a45	10 03		bpl $8a4a			bpl	 	_FCNotNegative
.8a47	20 fe 9d	jsr $9dfe			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8a4a					_FCNotNegative:
.8a4a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8a4d	91 34		sta ($34),y			sta 	(basicStack),y
.8a4f	c8		iny				iny
.8a50	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a53	91 34		sta ($34),y			sta 	(basicStack),y
.8a55	c8		iny				iny
.8a56	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8a59	91 34		sta ($34),y			sta 	(basicStack),y
.8a5b	c8		iny				iny
.8a5c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8a5f	91 34		sta ($34),y			sta 	(basicStack),y
.8a61	60		rts				rts
.8a62					CopyIndexToReference:
.8a62	5a		phy				phy
.8a63	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8a65	38		sec				sec 								; (because we copy from offset 8)
.8a66	b1 34		lda ($34),y			lda 	(basicStack),y
.8a68	e9 08		sbc #$08			sbc 	#8
.8a6a	85 36		sta $36				sta 	zTemp0
.8a6c	c8		iny				iny
.8a6d	b1 34		lda ($34),y			lda 	(basicStack),y
.8a6f	e9 00		sbc #$00			sbc 	#0
.8a71	85 37		sta $37				sta 	zTemp0+1
.8a73	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8a75	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a77	b1 34		lda ($34),y			lda 	(basicStack),y
.8a79	0a		asl a				asl 	a 							; into carry
.8a7a	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a7c	90 14		bcc $8a92			bcc 	_CITRNormal
.8a7e	38		sec				sec
.8a7f					_CITRNegative:
.8a7f	a9 00		lda #$00			lda 	#0
.8a81	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a83	91 36		sta ($36),y			sta 	(zTemp0),y
.8a85	c8		iny				iny
.8a86	ca		dex				dex
.8a87	d0 f6		bne $8a7f			bne 	_CITRNegative
.8a89	88		dey				dey 								; look at MSB of mantissa
.8a8a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a8c	09 80		ora #$80			ora 	#$80
.8a8e	91 36		sta ($36),y			sta 	(zTemp0),y
.8a90	7a		ply				ply
.8a91	60		rts				rts
.8a92					_CITRNormal:
.8a92	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a94	91 36		sta ($36),y			sta 	(zTemp0),y
.8a96	c8		iny				iny
.8a97	ca		dex				dex
.8a98	d0 f8		bne $8a92			bne 	_CITRNormal
.8a9a	7a		ply				ply 								; and exit.
.8a9b	60		rts				rts
.8a9c					NextCommand:
.8a9c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a9e	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8aa0	20 29 9f	jsr $9f29			jsr 	StackCheckFrame
.8aa3	5a		phy				phy
.8aa4	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8aa6	b1 34		lda ($34),y			lda 	(basicStack),y
.8aa8	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8aaa	30 02		bmi $8aae			bmi 	_NCStepNeg
.8aac	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8aae					_NCStepNeg:
.8aae	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8ab0	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8ab2	18		clc				clc
.8ab3					_NCBump:
.8ab3	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8ab5	91 34		sta ($34),y			sta 	(basicStack),y
.8ab7	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8ab9	c8		iny				iny 								; next byte
.8aba	ca		dex				dex 								; do four times
.8abb	d0 f6		bne $8ab3			bne 	_NCBump
.8abd	20 62 8a	jsr $8a62			jsr		CopyIndexToReference		; copy it to the reference variable.
.8ac0	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ac2	b1 34		lda ($34),y			lda 	(basicStack),y
.8ac4	0a		asl a				asl 	a 							; sign bit to carry
.8ac5	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ac7	85 38		sta $38				sta 	zTemp1
.8ac9	90 02		bcc $8acd			bcc 	_NCCompRev 					; use if step is +ve
.8acb	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8acd					_NCCompRev:
.8acd	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8acf	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8ad1	85 39		sta $39				sta 	zTemp1+1
.8ad3	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8ad5	38		sec				sec
.8ad6					_NCCompare:
.8ad6	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8ad8	b1 34		lda ($34),y			lda 	(basicStack),y
.8ada	a4 39		ldy $39				ldy 	zTemp1+1
.8adc	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ade	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ae0	e6 39		inc $39				inc 	zTemp1+1
.8ae2	ca		dex				dex 								; do it 4 times.
.8ae3	d0 f1		bne $8ad6			bne 	_NCCompare
.8ae5	50 02		bvc $8ae9			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ae7	49 80		eor #$80			eor 	#$80
.8ae9					_NCNoOverflow:
.8ae9	7a		ply				ply 								; restore Y position
.8aea	0a		asl a				asl 	a 							; is bit 7 set.
.8aeb	90 04		bcc $8af1			bcc 	_NCLoopback 				; if no , >= so loop back
.8aed	20 1b 9f	jsr $9f1b			jsr 	StackClose 					; exit the loop
.8af0	60		rts				rts
.8af1					_NCLoopBack:
.8af1	20 52 9f	jsr $9f52			jsr 	STKLoadCodePosition 		; loop back
.8af4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8af5					Command_GOSUB:
.8af5	a2 00		ldx #$00			ldx 	#0
.8af7	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8afa	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8afc	20 fd 9e	jsr $9efd			jsr 	StackOpen 					; create frame
.8aff	20 41 9f	jsr $9f41			jsr 	STKSaveCodePosition 		; save current position
.8b02	4c 18 8b	jmp $8b18			jmp 	GotoStackX
.8b05					Command_RETURN:
.8b05	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8b07	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8b09	20 29 9f	jsr $9f29			jsr 	StackCheckFrame
.8b0c	20 52 9f	jsr $9f52			jsr 	STKLoadCodePosition 		; restore code position
.8b0f	20 1b 9f	jsr $9f1b			jsr 	StackClose
.8b12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8b13					GotoCommand:
.8b13	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8b15	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger
.8b18					GotoStackX:
.8b18	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8b1b	48		pha				pha 								; it is slightly inefficient, just in cases.
.8b1c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8b1f	fa		plx				plx
.8b20	20 a8 9e	jsr $9ea8			jsr 	MemorySearch 				; transfer to line number AX.
.8b23	90 05		bcc $8b2a			bcc 	_GotoError 					; not found, off end.
.8b25	d0 03		bne $8b2a			bne 	_GotoError 					; not found exactly
.8b27	4c 53 8e	jmp $8e53			jmp 	RunNewLine 					; and go straight to new line code.
.8b2a					_GotoError:
.8b2a	a9 0d		lda #$0d		lda	#13
.8b2c	4c 91 92	jmp $9291		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8b2f					IfCommand:
.8b2f	a2 00		ldx #$00			ldx 	#0 							; If what.
.8b31	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber
.8b34	b1 30		lda ($30),y			lda 	(codePtr),y
.8b36	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8b38	d0 0a		bne $8b44			bne 	_IFStructured
.8b3a	c8		iny				iny 								; consume THEN
.8b3b	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; is it zero
.8b3e	f0 01		beq $8b41			beq 	_IfFail 					; if fail, go to next line
.8b40	60		rts				rts 								; if THEN just continue
.8b41					_IfFail:
.8b41	4c b8 8e	jmp $8eb8			jmp 	EOLCommand
.8b44					_IfStructured:
.8b44	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; is it zero
.8b47	d0 07		bne $8b50			bne 	_IfExit 					; if not, then continue normally.
.8b49	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8b4b	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8b4d	20 03 92	jsr $9203			jsr 	ScanForward 				; and run from there/
.8b50					_IfExit:
.8b50	60		rts				rts
.8b51					ElseCode:
.8b51	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8b53	aa		tax				tax 								; so just go to the structure exit
.8b54	20 03 92	jsr $9203			jsr 	ScanForward
.8b57	60		rts				rts
.8b58					EndIf:
.8b58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b59					LetCommand:
.8b59	a2 00		ldx #$00			ldx 	#0
.8b5b	b1 30		lda ($30),y			lda 	(codePtr),y
.8b5d	c9 10		cmp #$10			cmp 	#KWD_AT
.8b5f	d0 16		bne $8b77			bne 	_LCStandard
.8b61	c8		iny				iny 								; skip equal
.8b62	20 6b 99	jsr $996b			jsr 	EvaluateTerm 				; get a number
.8b65	20 af 97	jsr $97af			jsr 	Dereference 				; dereference it
.8b68	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8b6b	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b6d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8b70	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b72	d0 10		bne $8b84			bne 	_LCMain
.8b74	4c ba ab	jmp $abba			jmp 	TypeError 					; was a reference before.
.8b77					_LCStandard:
.8b77	ad 82 96	lda $9682			lda 	PrecedenceLevel+"*"			; precedence > this
.8b7a	20 9c 96	jsr $969c			jsr 	EvaluateExpressionAtPrecedence
.8b7d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8b80	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8b82	f0 0e		beq $8b92			beq 	_LetGoProc 					; it's a procedure call.
.8b84					_LCMain:
.8b84	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8b86	20 da a5	jsr $a5da			jsr 	CheckNextA
.8b89	e8		inx				inx 								; RHS
.8b8a	20 94 9d	jsr $9d94			jsr 	EvaluateValue
.8b8d	ca		dex				dex
.8b8e	20 95 8b	jsr $8b95			jsr 	AssignVariable
.8b91	60		rts				rts
.8b92					_LetGoProc:
.8b92	4c 2e 8d	jmp $8d2e			jmp 	CallProcedure
.8b95					AssignVariable:
.8b95	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8b98	48		pha				pha 								; save a copy
.8b99	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8b9c	29 10		and #$10			and 	#NSBIsString
.8b9e	d0 0b		bne $8bab			bne 	_ASError
.8ba0	68		pla				pla 								; get back
.8ba1	29 10		and #$10			and 	#NSBIsString 				; check type
.8ba3	d0 03		bne $8ba8			bne 	_ASString
.8ba5	4c d7 96	jmp $96d7			jmp 	AssignNumber
.8ba8					_ASString:
.8ba8	4c 45 97	jmp $9745			jmp 	AssignString
.8bab					_ASError:
.8bab	4c ba ab	jmp $abba			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bae					Command_List:
.8bae	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8bb1	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8bb4	a9 ff		lda #$ff			lda 	#$FF
.8bb6	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8bb9	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8bbc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bc0	f0 1e		beq $8be0			beq 	_CLSecond
.8bc2	20 3e 8c	jsr $8c3e			jsr 	CLIsDigit 					; if not digit, list all
.8bc5	b0 24		bcs $8beb			bcs 	_CLStart
.8bc7	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8bc9	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger
.8bcc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bce	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bd0	f0 0e		beq $8be0			beq 	_CLSecond 					; if so go get it
.8bd2	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8bd5	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8bd8	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8bdb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8bde	80 0b		bra $8beb			bra 	_CLStart
.8be0					_CLSecond:
.8be0	c8		iny				iny 								; consume comma
.8be1	20 3e 8c	jsr $8c3e			jsr 	CLIsDigit 					; digit found
.8be4	b0 05		bcs $8beb			bcs 	_CLStart 					; if not, continue listing
.8be6	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8be8	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger
.8beb					_CLStart
.8beb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bed	85 30		sta $30				sta 	codePtr
.8bef	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bf1	85 31		sta $31				sta 	codePtr+1
.8bf3					_CLLoop:
.8bf3	20 95 ad	jsr $ad95			jsr 	EXTBreakCheck 				; break check
.8bf6	f0 30		beq $8c28			beq 	_CLExit
.8bf8	b2 30		lda ($30)			lda 	(codePtr)
.8bfa	f0 2c		beq $8c28			beq 	_CLExit
.8bfc	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8bfe	20 2b 8c	jsr $8c2b			jsr 	CLCompareLineNo
.8c01	90 18		bcc $8c1b			bcc 	_CLNext
.8c03	a2 07		ldx #$07			ldx 	#7
.8c05	20 2b 8c	jsr $8c2b			jsr 	CLCompareLineNo
.8c08	f0 02		beq $8c0c			beq 	_CLDoThisOne
.8c0a	b0 0f		bcs $8c1b			bcs 	_CLNext
.8c0c					_CLDoThisOne:
.8c0c	20 5f 90	jsr $905f			jsr 	ListConvertLine 			; convert line into token Buffer
.8c0f	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8c11	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8c13	20 ea 92	jsr $92ea			jsr 	PrintStringXA
.8c16	a9 0d		lda #$0d			lda 	#13 						; new line
.8c18	20 54 ad	jsr $ad54			jsr 	EXTPrintCharacter
.8c1b					_CLNext:
.8c1b	18		clc				clc
.8c1c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c1e	65 30		adc $30				adc 	codePtr
.8c20	85 30		sta $30				sta 	codePtr
.8c22	90 02		bcc $8c26			bcc 	_CREExit
.8c24	e6 31		inc $31				inc 	codePtr+1
.8c26					_CREExit:
.8c26	80 cb		bra $8bf3			bra 	_CLLoop
.8c28					_CLExit:
.8c28	4c 29 88	jmp $8829			jmp 	WarmStart
.8c2b					CLCompareLineNo:
.8c2b	38		sec				sec
.8c2c	a0 01		ldy #$01			ldy 	#1
.8c2e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c30	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8c33	85 36		sta $36				sta 	zTemp0
.8c35	c8		iny				iny
.8c36	b1 30		lda ($30),y			lda 	(codePtr),y
.8c38	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8c3b	05 36		ora $36				ora 	zTemp0
.8c3d	60		rts				rts
.8c3e					CLIsDigit:
.8c3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c40	c9 30		cmp #$30			cmp 	#"0"
.8c42	90 03		bcc $8c47			bcc	 	_CLIDExitFalse
.8c44	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c46	60		rts				rts
.8c47					_CLIDExitFalse:
.8c47	38		sec				sec
.8c48	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8c49					Command_LOCAL:
.8c49	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8c4b	20 57 8c	jsr $8c57			jsr 	LocaliseNextTerm 			; convert term to a local.
.8c4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c50	c8		iny				iny
.8c51	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c53	f0 f4		beq $8c49			beq 	Command_LOCAL
.8c55	88		dey				dey 								; unpick pre-get
.8c56	60		rts				rts
.8c57					LocaliseNextTerm:
.8c57	20 6b 99	jsr $996b			jsr 	EvaluateTerm 				; evaluate the term
.8c5a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c5d	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8c5f	f0 69		beq $8cca			beq		_LNTError
.8c61	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8c64	85 36		sta $36				sta 	zTemp0
.8c66	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c69	85 37		sta $37				sta  	zTemp0+1
.8c6b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c6e	29 10		and #$10			and 	#NSBIsString
.8c70	d0 22		bne $8c94			bne 	_LNTPushString
.8c72	5a		phy				phy
.8c73	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8c75					_LNTPushNumLoop:
.8c75	b1 36		lda ($36),y			lda		(zTemp0),y
.8c77	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8c7a	a9 00		lda #$00			lda 	#0
.8c7c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7e	c8		iny				iny
.8c7f	c0 05		cpy #$05			cpy 	#5
.8c81	d0 f2		bne $8c75			bne 	_LNTPushNumLoop
.8c83	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8c85	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8c88	a5 37		lda $37				lda 	zTemp0+1
.8c8a	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8c8d	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8c8f	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8c92	7a		ply				ply
.8c93	60		rts				rts
.8c94					_LNTPushString:
.8c94	5a		phy				phy
.8c95	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8c97	85 38		sta $38				sta 	zTemp1
.8c99	a0 01		ldy #$01			ldy 	#1
.8c9b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c9d	85 39		sta $39				sta 	zTemp1+1
.8c9f	a0 00		ldy #$00			ldy 	#0 							; output string
.8ca1	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8ca3	f0 0a		beq $8caf			beq 	_LNTStringOut
.8ca5					_LNTPushStrLoop:
.8ca5	b1 38		lda ($38),y			lda 	(zTemp1),y
.8ca7	f0 06		beq $8caf			beq 	_LNTStringOut
.8ca9	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8cac	c8		iny				iny
.8cad	80 f6		bra $8ca5			bra 	_LNTPushStrLoop
.8caf					_LNTStringOut:
.8caf	98		tya				tya									; output length
.8cb0	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8cb3	a9 00		lda #$00			lda 	#0 							; clear original string.
.8cb5	92 38		sta ($38)			sta 	(zTemp1)
.8cb7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8cba	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8cbd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8cc0	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8cc3	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8cc5	20 db 9e	jsr $9edb			jsr 	StackPushByte
.8cc8	7a		ply				ply
.8cc9	60		rts				rts
.8cca					_LNTError:
.8cca	4c b0 ab	jmp $abb0			jmp 	SyntaxError
.a571					LocalPopValue:
.a571	20 f4 9e	jsr $9ef4			jsr 	StackPopByte
.a574	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a576	d0 17		bne $a58f			bne 	_LPVString
.a578	20 f4 9e	jsr $9ef4			jsr 	StackPopByte 				; address
.a57b	85 37		sta $37				sta 	zTemp0+1
.a57d	20 f4 9e	jsr $9ef4			jsr 	StackPopByte
.a580	85 36		sta $36				sta 	zTemp0
.a582	5a		phy				phy
.a583	a0 04		ldy #$04			ldy 	#4 							; copy back
.a585					_LPVNumberCopy:
.a585	20 f4 9e	jsr $9ef4			jsr 	StackPopByte
.a588	91 36		sta ($36),y			sta 	(zTemp0),y
.a58a	88		dey				dey
.a58b	10 f8		bpl $a585			bpl 	_LPVNumberCopy
.a58d	7a		ply				ply 								; and complete
.a58e	60		rts				rts
.a58f					_LPVString:
.a58f	20 f4 9e	jsr $9ef4			jsr 	StackPopByte 				; address of record => zTemp0
.a592	85 37		sta $37				sta 	zTemp0+1
.a594	20 f4 9e	jsr $9ef4			jsr 	StackPopByte
.a597	85 36		sta $36				sta 	zTemp0
.a599	5a		phy				phy
.a59a	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a59c	85 38		sta $38				sta 	zTemp1
.a59e	a0 01		ldy #$01			ldy 	#1
.a5a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.a5a2	85 39		sta $39				sta 	zTemp1+1
.a5a4	20 f4 9e	jsr $9ef4			jsr 	StackPopByte 				; # to get => y
.a5a7	a8		tay				tay
.a5a8	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a5aa	f0 0e		beq $a5ba			beq 	_LPVStringCopied
.a5ac	a9 00		lda #$00			lda 	#0 							; NULL on end
.a5ae	91 38		sta ($38),y			sta 	(zTemp1),y
.a5b0					_LPVStringCopy:
.a5b0	88		dey				dey
.a5b1	30 07		bmi $a5ba			bmi 	_LPVStringCopied
.a5b3	20 f4 9e	jsr $9ef4			jsr 	StackPopByte
.a5b6	91 38		sta ($38),y			sta 	(zTemp1),y
.a5b8	80 f6		bra $a5b0			bra 	_LPVStringCopy
.a5ba					_LPVStringCopied:
.a5ba	fa		plx				plx
.a5bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8ccd					NewCommand:
.8ccd	20 86 9e	jsr $9e86			jsr 	MemoryNew
.8cd0	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8cd3	20 c2 88	jsr $88c2			jsr 	ClearCommand 				; clear everything.
.8cd6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8cd7					Command_Print:
.8cd7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8cd8					_CPLoop:
.8cd8	08		php				php 								; save last action flag
.8cd9	b1 30		lda ($30),y			lda 	(codePtr),y
.8cdb	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8cdd	f0 46		beq $8d25			beq 	_CPExit
.8cdf	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ce1	f0 42		beq $8d25			beq 	_CPExit
.8ce3	68		pla				pla 								; throw last action flag
.8ce4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce6	c8		iny				iny
.8ce7	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8ce9	f0 37		beq $8d22			beq 	_CPContinueWithSameLine
.8ceb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8ced	f0 2e		beq $8d1d			beq 	_CPTab
.8cef	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8cf1	f0 26		beq $8d19			beq 	_CPNewLine
.8cf3	88		dey				dey 								; undo the get.
.8cf4	a2 00		ldx #$00			ldx 	#0
.8cf6	20 94 9d	jsr $9d94			jsr 	EvaluateValue 				; get a value into slot 0
.8cf9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8cfc	29 10		and #$10			and 	#NSBIsString
.8cfe	f0 0b		beq $8d0b			beq 	_CPNumber
.8d00	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8d03	ad 08 04	lda $0408			lda 	NSMantissa0
.8d06	20 ea 92	jsr $92ea			jsr 	PrintStringXA
.8d09	80 cc		bra $8cd7			bra 	Command_Print 				; loop round clearing carry so NL if end
.8d0b					_CPNumber:
.8d0b	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8d0d	20 6a 9c	jsr $9c6a			jsr 	ConvertNumberToString 		; convert to string
.8d10	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8d12	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8d14	20 ea 92	jsr $92ea			jsr 	PrintStringXA
.8d17	80 be		bra $8cd7			bra 	Command_Print 				; loop round clearing carry so NL if end
.8d19					_CPNewLine:
.8d19	a9 0d		lda #$0d			lda 	#13
.8d1b	80 02		bra $8d1f			bra 	_CPPrintChar
.8d1d					_CPTab:
.8d1d	a9 09		lda #$09			lda 	#9 							; print TAB
.8d1f					_CPPrintChar:
.8d1f	20 54 ad	jsr $ad54			jsr 	EXTPrintCharacter
.8d22					_CPContinueWithSameLine:
.8d22	38		sec				sec 								; loop round with carry set, which
.8d23	80 b3		bra $8cd8			bra 	_CPLoop 					; will inhibit final CR
.8d25					_CPExit:
.8d25	28		plp				plp 								; get last action flag
.8d26	b0 05		bcs $8d2d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8d28	a9 0d		lda #$0d			lda 	#13 						; print new line
.8d2a	20 54 ad	jsr $ad54			jsr 	EXTPrintCharacter
.8d2d					_CPExit2:
.8d2d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8d2e					CallProcedure:
.8d2e	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8d30	b1 30		lda ($30),y			lda 	(codePtr),y
.8d32	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8d34	f0 0c		beq $8d42			beq 	_CPEndParam
.8d36					_CPParamLoop:
.8d36	20 9a 96	jsr $969a			jsr 	EvaluateExpression 			; get parameter onto stack
.8d39	e8		inx				inx 								; bump next stack
.8d3a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3c	c8		iny				iny
.8d3d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8d3f	f0 f5		beq $8d36			beq 	_CPParamLoop
.8d41	88		dey				dey 								; unpick.
.8d42					_CPEndParam:
.8d42	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8d45	c8		iny				iny									; skip right bracket
.8d46	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8d48	20 fd 9e	jsr $9efd			jsr 	StackOpen
.8d4b	20 41 9f	jsr $9f41			jsr 	STKSaveCodePosition 		; save loop position
.8d4e	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8d51	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8d53	ad 10 04	lda $0410			lda 	NSMantissa1
.8d56	85 37		sta $37				sta 	zTemp0+1
.8d58	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8d5a	b2 36		lda ($36)			lda 	(zTemp0)
.8d5c	85 30		sta $30				sta 	safePtr
.8d5e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d60	85 31		sta $31				sta 	safePtr+1
.8d62	c8		iny				iny
.8d63	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d65	85 32		sta $32				sta 	safePtr+2
.8d67	c8		iny				iny
.8d68	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d6a	85 33		sta $33				sta 	safePtr+3
.8d6c	c8		iny				iny 								; get Y offset -> Y
.8d6d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d6f	a8		tay				tay
.8d70	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8d72	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8d75	f0 13		beq $8d8a			beq 	_ParamExit 					; if so, exit.
.8d77					_ParamExtract:
.8d77	ca		dex				dex 								; put a local term on the level before
.8d78	20 57 8c	jsr $8c57			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8d7b	20 95 8b	jsr $8b95			jsr 	AssignVariable 				; assign stacked value to the variable.
.8d7e	e8		inx				inx 								; advance to next parameter to do.
.8d7f	e8		inx				inx
.8d80	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8d83	f0 05		beq $8d8a			beq 	_ParamExit
.8d85	20 d2 a5	jsr $a5d2			jsr 	CheckComma 					; comma seperating parameters
.8d88	80 ed		bra $8d77			bra 	_ParamExtract
.8d8a					_ParamExit:
.8d8a	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket 			; check )
.8d8d	60		rts				rts 								; and continue from here
.a5bc					Command_ENDPROC:
.a5bc	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a5be	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a5c0	20 29 9f	jsr $9f29			jsr 	StackCheckFrame
.a5c3	20 52 9f	jsr $9f52			jsr 	STKLoadCodePosition 		; restore code position
.a5c6	20 1b 9f	jsr $9f1b			jsr 	StackClose
.a5c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8d8e					Command_Read:
.8d8e	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8d90	20 6b 99	jsr $996b			jsr 	EvaluateTerm
.8d93	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d96	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8d98	f0 4a		beq $8de4			beq 	_CRSyntax 					; check reference (bit 0)
.8d9a	20 2d 8e	jsr $8e2d			jsr 	SwapDataCodePtrs 			; swap code and data
.8d9d	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8da0	d0 20		bne $8dc2			bne 	_CRContinueData
.8da2					_CRKeepSearching:
.8da2	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8da4	aa		tax				tax
.8da5	20 03 92	jsr $9203			jsr 	ScanForward
.8da8	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8daa	f0 16		beq $8dc2			beq 	_CRHaveData 				; found it
.8dac	18		clc				clc
.8dad	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8daf	65 30		adc $30				adc 	codePtr
.8db1	85 30		sta $30				sta 	codePtr
.8db3	90 02		bcc $8db7			bcc 	_CREExit
.8db5	e6 31		inc $31				inc 	codePtr+1
.8db7					_CREExit:
.8db7	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8db9	b2 30		lda ($30)			lda 	(codePtr)
.8dbb	d0 e5		bne $8da2			bne 	_CRKeepSearching
.8dbd	a9 0b		lda #$0b		lda	#11
.8dbf	4c 91 92	jmp $9291		jmp	ErrorHandler
.8dc2					_CRHaveData:
.8dc2					_CRContinueData:
.8dc2	a2 01		ldx #$01			ldx 	#1
.8dc4	20 94 9d	jsr $9d94			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8dc7	ca		dex				dex
.8dc8	20 95 8b	jsr $8b95			jsr		AssignVariable 				; do the assignment
.8dcb	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8dce	b1 30		lda ($30),y			lda 	(codePtr),y
.8dd0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8dd2	d0 04		bne $8dd8			bne 	_CRSwapBack
.8dd4	c8		iny				iny 								; consume comma
.8dd5	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8dd8					_CRSwapBack:
.8dd8	20 2d 8e	jsr $8e2d			jsr 	SwapDataCodePtrs			; swap them back.
.8ddb	b1 30		lda ($30),y			lda 	(codePtr),y
.8ddd	c8		iny				iny
.8dde	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8de0	f0 ac		beq $8d8e			beq 	Command_Read 				; if so go round again.
.8de2	88		dey				dey 								; unpick get.
.8de3	60		rts				rts
.8de4					_CRSyntax:
.8de4	4c b0 ab	jmp $abb0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8de7					RemCommand:
.8de7	b1 30		lda ($30),y			lda 	(codePtr),y
.8de9	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8deb	d0 06		bne $8df3			bne 	_RMExit
.8ded	c8		iny				iny
.8dee	98		tya				tya
.8def	38		sec				sec
.8df0	71 30		adc ($30),y			adc 	(codePtr),y
.8df2	a8		tay				tay
.8df3					_RMExit:
.8df3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8df4					Command_REPEAT:
.8df4	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8df6	20 fd 9e	jsr $9efd			jsr 	StackOpen
.8df9	20 41 9f	jsr $9f41			jsr 	STKSaveCodePosition 		; save loop position
.8dfc	60		rts				rts
.8dfd					Command_UNTIL:
.8dfd	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8dff	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8e01	20 29 9f	jsr $9f29			jsr 	StackCheckFrame
.8e04	a2 00		ldx #$00			ldx 	#0
.8e06	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber 				; work out the number
.8e09	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; check if zero
.8e0c	f0 04		beq $8e12			beq 	_CULoopBack 				; if so keep looping
.8e0e	20 1b 9f	jsr $9f1b			jsr 	StackClose		 			; return
.8e11	60		rts				rts
.8e12					_CULoopBack:
.8e12	20 52 9f	jsr $9f52			jsr 	STKLoadCodePosition 		; loop back
.8e15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8e16					Command_Restore:
.8e16	20 2d 8e	jsr $8e2d			jsr 	SwapDataCodePtrs 			; swap code and data
.8e19	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e1b	85 30		sta $30				sta 	codePtr
.8e1d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e1f	85 31		sta $31				sta 	codePtr+1
.8e21	20 2d 8e	jsr $8e2d			jsr 	SwapDataCodePtrs 			; put them back
.8e24	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8e26	8d 9b 04	sta $049b			sta 	dataPointer+4
.8e29	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8e2c	60		rts				rts
.8e2d					SwapDataCodePtrs:
.8e2d	da		phx				phx
.8e2e	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8e30					_SDCPLoop:
.8e30	b5 30		lda $30,x			lda 	safePtr,x
.8e32	48		pha				pha
.8e33	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8e36	95 30		sta $30,x			sta 	safePtr,x
.8e38	68		pla				pla
.8e39	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8e3c	ca		dex				dex
.8e3d	10 f1		bpl $8e30			bpl 	_SDCPLoop
.8e3f	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8e42	8c 9b 04	sty $049b			sty 	dataPointer+4
.8e45	a8		tay				tay
.8e46	fa		plx				plx
.8e47	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8e48					CommandRUN:
.8e48	20 c2 88	jsr $88c2			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8e4b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e4d	85 30		sta $30				sta 	codePtr
.8e4f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e51	85 31		sta $31				sta 	codePtr+1
.8e53					RUNNewLine:
.8e53	b2 30		lda ($30)			lda 	(codePtr)
.8e55	f0 5e		beq $8eb5			beq 	CRNoProgram         		; no then END.
.8e57	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8e59	9a		txs				txs
.8e5a					RUNCodePointerLine:
.8e5a	a0 02		ldy #$02			ldy 	#2 							; start of program
.8e5c					_CRIncMainLoop:
.8e5c	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8e5f	d0 05		bne $8e66			bne 	_CRNoBreakCheck
.8e61	20 95 ad	jsr $ad95			jsr 	EXTBreakCheck 				; break check
.8e64	f0 4a		beq $8eb0			beq 	_CRBreak
.8e66					_CRNoBreakCheck:
.8e66	c8		iny				iny
.8e67					_CRMainLoop:
.8e67	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8e6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6c	10 10		bpl $8e7e			bpl 	_CRNotKeyword
.8e6e	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8e70	b0 04		bcs $8e76			bcs 	_CRIsKeyword
.8e72	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8e74	b0 34		bcs $8eaa			bcs		_CRSyntaxError
.8e76					_CRIsKeyword:
.8e76	c8		iny				iny 								; consume command
.8e77	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8e78	aa		tax				tax 								; put in X for vector jump
.8e79	20 ad 8e	jsr $8ead			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8e7c	80 e9		bra $8e67			bra 	_CRMainLoop 				; and loop round
.8e7e					_CRNotKeyword:
.8e7e	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8e80	f0 da		beq $8e5c			beq 	_CRIncMainLoop
.8e82	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8e84	90 05		bcc $8e8b			bcc 	_CRNotVariable
.8e86					_CRGoLet:
.8e86	20 59 8b	jsr $8b59			jsr 	LetCommand
.8e89	80 dc		bra $8e67			bra 	_CRMainLoop
.8e8b					_CRNotVariable:
.8e8b	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8e8d	f0 f7		beq $8e86			beq 	_CRGoLet
.8e8f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8e91	f0 f3		beq $8e86			beq 	_CRGoLet
.8e93	c9 21		cmp #$21			cmp 	#KWD_PLING
.8e95	f0 ef		beq $8e86			beq 	_CRGoLet
.8e97	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8e99	f0 09		beq $8ea4			beq 	_CRGoRem
.8e9b	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8e9d	d0 0b		bne $8eaa			bne 	_CRSyntaxError
.8e9f	20 62 87	jsr $8762			jsr 	LabelHere
.8ea2	80 c3		bra $8e67			bra 	_CRMainLoop
.8ea4					_CRGoRem:
.8ea4	c8		iny				iny
.8ea5	20 e7 8d	jsr $8de7			jsr 	RemCommand
.8ea8	80 bd		bra $8e67			bra 	_CRMainLoop
.8eaa					_CRSyntaxError:
.8eaa	4c b0 ab	jmp $abb0			jmp 	SyntaxError
.8ead					_CRCallVector0:
.8ead	7c 58 8f	jmp ($8f58,x)			jmp 	(VectorSet0,x)
.8eb0					_CRBreak:
.8eb0	a9 01		lda #$01		lda	#1
.8eb2	4c 91 92	jmp $9291		jmp	ErrorHandler
.8eb5					CRNoProgram:
.8eb5	4c df 89	jmp $89df			jmp 	EndCommand
.8eb8					EOLCommand:
.8eb8	18		clc				clc
.8eb9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ebb	65 30		adc $30				adc 	codePtr
.8ebd	85 30		sta $30				sta 	codePtr
.8ebf	90 02		bcc $8ec3			bcc 	_CREExit
.8ec1	e6 31		inc $31				inc 	codePtr+1
.8ec3					_CREExit:
.8ec3	80 8e		bra $8e53			bra 	RunNewLine
.8ec5					Shift1Command:
.8ec5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ec7	c8		iny				iny
.8ec8	0a		asl a				asl 	a
.8ec9	aa		tax				tax
.8eca	7c ba 8f	jmp ($8fba,x)			jmp 	(VectorSet1,x)
.8ecd					Shift2Command:
.8ecd	b1 30		lda ($30),y			lda 	(codePtr),y
.8ecf	c8		iny				iny
.8ed0	0a		asl a				asl 	a
.8ed1	aa		tax				tax
.8ed2	7c d2 8f	jmp ($8fd2,x)			jmp 	(VectorSet2,x)
.8ed5					Unused1:
.8ed5					Unused2:
.8ed5					Unused3:
.8ed5					Unused4:
.8ed5	4c b0 ab	jmp $abb0			jmp 	SyntaxError
>8ed8							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8ed8					VectorSetPunc:
>8ed8	3b 94					.word	ShiftLeft                        ; $00 <<
>8eda	35 93					.word	BinaryCompareLessEqual           ; $01 <=
>8edc	2b 93					.word	BinaryCompareNotEqual            ; $02 <>
>8ede	b0 ab					.word	SyntaxError                      ; $03 !!3
>8ee0	b0 ab					.word	SyntaxError                      ; $04 ><
>8ee2	3f 93					.word	BinaryCompareGreaterEqual        ; $05 >=
>8ee4	3e 94					.word	ShiftRight                       ; $06 >>
>8ee6	b0 ab					.word	SyntaxError                      ; $07 !!7
>8ee8	b0 ab					.word	SyntaxError                      ; $08 !!8
>8eea	b0 ab					.word	SyntaxError                      ; $09 !!9
>8eec	b0 ab					.word	SyntaxError                      ; $0a !!10
>8eee	b0 ab					.word	SyntaxError                      ; $0b !!11
>8ef0	b0 ab					.word	SyntaxError                      ; $0c !!12
>8ef2	b0 ab					.word	SyntaxError                      ; $0d !!13
>8ef4	b0 ab					.word	SyntaxError                      ; $0e !!14
>8ef6	b0 ab					.word	SyntaxError                      ; $0f !!15
>8ef8	b0 ab					.word	SyntaxError                      ; $10 @
>8efa	b0 ab					.word	SyntaxError                      ; $11 !!17
>8efc	b0 ab					.word	SyntaxError                      ; $12 !!18
>8efe	b0 ab					.word	SyntaxError                      ; $13 [
>8f00	e3 a5					.word	IntegerDivide                    ; $14 \
>8f02	b0 ab					.word	SyntaxError                      ; $15 ]
>8f04	c4 95					.word	EorInteger                       ; $16 ^
>8f06	b0 ab					.word	SyntaxError                      ; $17 _
>8f08	b0 ab					.word	SyntaxError                      ; $18 `
>8f0a	b0 ab					.word	SyntaxError                      ; $19 !!25
>8f0c	b0 ab					.word	SyntaxError                      ; $1a !!26
>8f0e	b0 ab					.word	SyntaxError                      ; $1b {
>8f10	7e 95					.word	OraInteger                       ; $1c |
>8f12	b0 ab					.word	SyntaxError                      ; $1d }
>8f14	b0 ab					.word	SyntaxError                      ; $1e ~
>8f16	b0 ab					.word	SyntaxError                      ; $1f [7m<7F>[m
>8f18	b0 ab					.word	SyntaxError                      ; $20
>8f1a	0a 96					.word	WordIndirect                     ; $21 !
>8f1c	b0 ab					.word	SyntaxError                      ; $22 "
>8f1e	b0 ab					.word	SyntaxError                      ; $23 #
>8f20	b0 ab					.word	SyntaxError                      ; $24 $
>8f22	30 a6					.word	IntegerModulus                   ; $25 %
>8f24	38 95					.word	AndInteger                       ; $26 &
>8f26	b0 ab					.word	SyntaxError                      ; $27 '
>8f28	b0 ab					.word	SyntaxError                      ; $28 (
>8f2a	b0 ab					.word	SyntaxError                      ; $29 )
>8f2c	a5 a6					.word	MulInteger                       ; $2a *
>8f2e	d2 94					.word	AddInteger                       ; $2b +
>8f30	b0 ab					.word	SyntaxError                      ; $2c ,
>8f32	0d 95					.word	SubInteger                       ; $2d -
>8f34	b0 ab					.word	SyntaxError                      ; $2e .
>8f36	3c a8					.word	FDivideCommand                   ; $2f /
>8f38	b0 ab					.word	SyntaxError                      ; $30 0
>8f3a	b0 ab					.word	SyntaxError                      ; $31 1
>8f3c	b0 ab					.word	SyntaxError                      ; $32 2
>8f3e	b0 ab					.word	SyntaxError                      ; $33 3
>8f40	b0 ab					.word	SyntaxError                      ; $34 4
>8f42	b0 ab					.word	SyntaxError                      ; $35 5
>8f44	b0 ab					.word	SyntaxError                      ; $36 6
>8f46	b0 ab					.word	SyntaxError                      ; $37 7
>8f48	b0 ab					.word	SyntaxError                      ; $38 8
>8f4a	b0 ab					.word	SyntaxError                      ; $39 9
>8f4c	b0 ab					.word	SyntaxError                      ; $3a :
>8f4e	b0 ab					.word	SyntaxError                      ; $3b ;
>8f50	17 93					.word	BinaryCompareLess                ; $3c <
>8f52	0d 93					.word	BinaryCompareEqual               ; $3d =
>8f54	21 93					.word	BinaryCompareGreater             ; $3e >
>8f56	31 96					.word	ByteIndirect                     ; $3f ?
.8f58					VectorSet0:
>8f58	b8 8e					.word	EOLCommand                       ; $80 !0:EOF
>8f5a	c5 8e					.word	Shift1Command                    ; $81 !1:SH1
>8f5c	cd 8e					.word	Shift2Command                    ; $82 !2:SH2
>8f5e	82 a9					.word	AbsUnary                         ; $83 ABS(
>8f60	fb 9a					.word	AllocUnary                       ; $84 ALLOC(
>8f62	92 a9					.word	AscUnary                         ; $85 ASC(
>8f64	1b 9c					.word	ChrUnary                         ; $86 CHR$(
>8f66	09 93					.word	UnaryFalse                       ; $87 FALSE
>8f68	9f a9					.word	FracUnary                        ; $88 FRAC(
>8f6a	b5 a9					.word	IntUnary                         ; $89 INT(
>8f6c	0b aa					.word	IsValUnary                       ; $8a ISVAL(
>8f6e	f5 9c					.word	Unary_Left                       ; $8b LEFT$(
>8f70	c7 a9					.word	LenUnary                         ; $8c LEN(
>8f72	1f 9d					.word	Unary_Mid                        ; $8d MID$(
>8f74	6b 9b					.word	Unary_Not                        ; $8e NOT(
>8f76	81 9b					.word	Unary_Random                     ; $8f RANDOM(
>8f78	05 9d					.word	Unary_Right                      ; $90 RIGHT$(
>8f7a	9a 9b					.word	Unary_Rnd                        ; $91 RND(
>8f7c	e1 a9					.word	SgnUnary                         ; $92 SGN(
>8f7e	2d 9c					.word	SpcUnary                         ; $93 SPC(
>8f80	48 9c					.word	Unary_Str                        ; $94 STR$(
>8f82	fd 92					.word	UnaryTrue                        ; $95 TRUE
>8f84	01 aa					.word	ValUnary                         ; $96 VAL(
>8f86	e2 89					.word	ForCommand                       ; $97 FOR
>8f88	2f 8b					.word	IfCommand                        ; $98 IF
>8f8a	d5 8e					.word	Unused1                          ; $99 PROC
>8f8c	f4 8d					.word	Command_REPEAT                   ; $9a REPEAT
>8f8e	62 92					.word	Command_WHILE                    ; $9b WHILE
>8f90	58 8b					.word	EndIf                            ; $9c ENDIF
>8f92	bc a5					.word	Command_ENDPROC                  ; $9d ENDPROC
>8f94	9c 8a					.word	NextCommand                      ; $9e NEXT
>8f96	d5 8e					.word	Unused4                          ; $9f THEN
>8f98	fd 8d					.word	Command_UNTIL                    ; $a0 UNTIL
>8f9a	83 92					.word	Command_WEND                     ; $a1 WEND
>8f9c	88 88					.word	CallCommand                      ; $a2 CALL
>8f9e	b0 ab					.word	SyntaxError                      ; $a3 CLS
>8fa0	1a 89					.word	Command_Data                     ; $a4 DATA
>8fa2	22 89					.word	DimCommand                       ; $a5 DIM
>8fa4	d5 8e					.word	Unused3                          ; $a6 DOWNTO
>8fa6	51 8b					.word	ElseCode                         ; $a7 ELSE
>8fa8	f5 8a					.word	Command_GOSUB                    ; $a8 GOSUB
>8faa	13 8b					.word	GotoCommand                      ; $a9 GOTO
>8fac	59 8b					.word	LetCommand                       ; $aa LET
>8fae	49 8c					.word	Command_LOCAL                    ; $ab LOCAL
>8fb0	d7 8c					.word	Command_Print                    ; $ac PRINT
>8fb2	8e 8d					.word	Command_Read                     ; $ad READ
>8fb4	e7 8d					.word	RemCommand                       ; $ae REM
>8fb6	05 8b					.word	Command_RETURN                   ; $af RETURN
>8fb8	d5 8e					.word	Unused2                          ; $b0 TO
.8fba					VectorSet1:
>8fba	b0 ab					.word	SyntaxError                      ; $80 !0:EOF
>8fbc	b0 ab					.word	SyntaxError                      ; $81 !1:SH1
>8fbe	b0 ab					.word	SyntaxError                      ; $82 !2:SH2
>8fc0	59 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>8fc2	78 88					.word	AssertCommand                    ; $84 ASSERT
>8fc4	c2 88					.word	ClearCommand                     ; $85 CLEAR
>8fc6	df 89					.word	EndCommand                       ; $86 END
>8fc8	ae 8b					.word	Command_List                     ; $87 LIST
>8fca	cd 8c					.word	NewCommand                       ; $88 NEW
>8fcc	16 8e					.word	Command_Restore                  ; $89 RESTORE
>8fce	48 8e					.word	CommandRUN                       ; $8a RUN
>8fd0	5a 90					.word	StopCommand                      ; $8b STOP
.8fd2					VectorSet2:
>8fd2	b0 ab					.word	SyntaxError                      ; $80 !0:EOF
>8fd4	b0 ab					.word	SyntaxError                      ; $81 !1:SH1
>8fd6	b0 ab					.word	SyntaxError                      ; $82 !2:SH2
>8fd8	6f aa					.word	Assemble_adc                     ; $83 ADC
>8fda	67 aa					.word	Assemble_and                     ; $84 AND
>8fdc	83 aa					.word	Assemble_asl                     ; $85 ASL
>8fde	ed aa					.word	Assemble_bcc                     ; $86 BCC
>8fe0	f1 aa					.word	Assemble_bcs                     ; $87 BCS
>8fe2	f9 aa					.word	Assemble_beq                     ; $88 BEQ
>8fe4	b0 aa					.word	Assemble_bit                     ; $89 BIT
>8fe6	e1 aa					.word	Assemble_bmi                     ; $8a BMI
>8fe8	f5 aa					.word	Assemble_bne                     ; $8b BNE
>8fea	dd aa					.word	Assemble_bpl                     ; $8c BPL
>8fec	fd aa					.word	Assemble_bra                     ; $8d BRA
>8fee	01 ab					.word	Assemble_brk                     ; $8e BRK
>8ff0	e5 aa					.word	Assemble_bvc                     ; $8f BVC
>8ff2	e9 aa					.word	Assemble_bvs                     ; $90 BVS
>8ff4	09 ab					.word	Assemble_clc                     ; $91 CLC
>8ff6	5d ab					.word	Assemble_cld                     ; $92 CLD
>8ff8	1d ab					.word	Assemble_cli                     ; $93 CLI
>8ffa	4d ab					.word	Assemble_clv                     ; $94 CLV
>8ffc	7b aa					.word	Assemble_cmp                     ; $95 CMP
>8ffe	c4 aa					.word	Assemble_cpx                     ; $96 CPX
>9000	bf aa					.word	Assemble_cpy                     ; $97 CPY
>9002	a1 aa					.word	Assemble_dec                     ; $98 DEC
>9004	59 ab					.word	Assemble_dex                     ; $99 DEX
>9006	35 ab					.word	Assemble_dey                     ; $9a DEY
>9008	6b aa					.word	Assemble_eor                     ; $9b EOR
>900a	a6 aa					.word	Assemble_inc                     ; $9c INC
>900c	69 ab					.word	Assemble_inx                     ; $9d INX
>900e	55 ab					.word	Assemble_iny                     ; $9e INY
>9010	d8 aa					.word	Assemble_jmp                     ; $9f JMP
>9012	d3 aa					.word	Assemble_jsr                     ; $a0 JSR
>9014	77 aa					.word	Assemble_lda                     ; $a1 LDA
>9016	9c aa					.word	Assemble_ldx                     ; $a2 LDX
>9018	ba aa					.word	Assemble_ldy                     ; $a3 LDY
>901a	8d aa					.word	Assemble_lsr                     ; $a4 LSR
>901c	6d ab					.word	Assemble_nop                     ; $a5 NOP
>901e	63 aa					.word	Assemble_ora                     ; $a6 ORA
>9020	19 ab					.word	Assemble_pha                     ; $a7 PHA
>9022	05 ab					.word	Assemble_php                     ; $a8 PHP
>9024	61 ab					.word	Assemble_phx                     ; $a9 PHX
>9026	21 ab					.word	Assemble_phy                     ; $aa PHY
>9028	29 ab					.word	Assemble_pla                     ; $ab PLA
>902a	0d ab					.word	Assemble_plp                     ; $ac PLP
>902c	75 ab					.word	Assemble_plx                     ; $ad PLX
>902e	31 ab					.word	Assemble_ply                     ; $ae PLY
>9030	88 aa					.word	Assemble_rol                     ; $af ROL
>9032	92 aa					.word	Assemble_ror                     ; $b0 ROR
>9034	15 ab					.word	Assemble_rti                     ; $b1 RTI
>9036	25 ab					.word	Assemble_rts                     ; $b2 RTS
>9038	7f aa					.word	Assemble_sbc                     ; $b3 SBC
>903a	11 ab					.word	Assemble_sec                     ; $b4 SEC
>903c	71 ab					.word	Assemble_sed                     ; $b5 SED
>903e	2d ab					.word	Assemble_sei                     ; $b6 SEI
>9040	73 aa					.word	Assemble_sta                     ; $b7 STA
>9042	65 ab					.word	Assemble_stp                     ; $b8 STP
>9044	97 aa					.word	Assemble_stx                     ; $b9 STX
>9046	b5 aa					.word	Assemble_sty                     ; $ba STY
>9048	ab aa					.word	Assemble_stz                     ; $bb STZ
>904a	49 ab					.word	Assemble_tax                     ; $bc TAX
>904c	45 ab					.word	Assemble_tay                     ; $bd TAY
>904e	ce aa					.word	Assemble_trb                     ; $be TRB
>9050	c9 aa					.word	Assemble_tsb                     ; $bf TSB
>9052	51 ab					.word	Assemble_tsx                     ; $c0 TSX
>9054	39 ab					.word	Assemble_txa                     ; $c1 TXA
>9056	41 ab					.word	Assemble_txs                     ; $c2 TXS
>9058	3d ab					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.905a					StopCommand:
.905a	a9 08		lda #$08		lda	#8
.905c	4c 91 92	jmp $9291		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.905f					ListConvertLine:
.905f	9c 9d 04	stz $049d			stz 	tbOffset
.9062	9c a9 04	stz $04a9			stz 	tokenBuffer
.9065	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9067	b1 30		lda ($30),y			lda 	(codePtr),y
.9069	aa		tax				tax
.906a	88		dey				dey
.906b	b1 30		lda ($30),y			lda 	(codePtr),y
.906d	20 26 a7	jsr $a726			jsr 	ConvertInt16
.9070	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9072	86 37		stx $37				stx 	zTemp0+1
.9074	a0 00		ldy #$00			ldy 	#0
.9076					_LCCopyNumber:
.9076	b1 36		lda ($36),y			lda 	(zTemp0),y
.9078	20 78 91	jsr $9178			jsr 	LCLWrite
.907b	c8		iny				iny
.907c	b1 36		lda ($36),y			lda 	(zTemp0),y
.907e	d0 f6		bne $9076			bne 	_LCCopyNumber
.9080					_LCPadOut:
.9080	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9082	20 78 91	jsr $9178			jsr 	LCLWrite
.9085	ad 9d 04	lda $049d			lda 	tbOffset
.9088	c9 06		cmp #$06			cmp 	#6
.908a	d0 f4		bne $9080			bne 	_LCPadOut
.908c	a0 03		ldy #$03			ldy 	#3 							; start position.
.908e					_LCMainLoop:
.908e	b1 30		lda ($30),y			lda 	(codePtr),y
.9090	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9092	f0 17		beq $90ab			beq 	_LCExit
.9094	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9096	90 14		bcc $90ac			bcc 	_LCDoubles
.9098	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.909a	90 20		bcc $90bc			bcc 	_LCShiftPunc
.909c	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.909e	90 2b		bcc $90cb			bcc 	_LCPunctuation
.90a0	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.90a2	90 2d		bcc $90d1			bcc 	_LCIdentifiers
.90a4	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.90a6	90 49		bcc $90f1			bcc 	_LCTokens
.90a8	4c 4c 91	jmp $914c			jmp 	_LCData 					; 254-5 are data objects
.90ab					_LCExit:
.90ab	60		rts				rts
.90ac					_LCDoubles:
.90ac	48		pha				pha
.90ad	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.90ae	29 02		and #$02			and 	#2
.90b0	09 3c		ora #$3c			ora 	#60 						; make < >
.90b2	20 78 91	jsr $9178			jsr 	LCLWrite
.90b5	68		pla				pla 								; restore, do lower bit
.90b6	29 03		and #$03			and 	#3
.90b8	09 3c		ora #$3c			ora 	#60
.90ba	80 0f		bra $90cb			bra		_LCPunctuation 				; print, increment, loop
.90bc					_LCShiftPunc:
.90bc	aa		tax				tax 								; save in X
.90bd	29 07		and #$07			and 	#7 							; lower 3 bits
.90bf	f0 02		beq $90c3			beq 	_LCNoAdd
.90c1	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.90c3					_LCNoAdd:
.90c3	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.90c5	90 02		bcc $90c9			bcc 	_LCNoAdd2
.90c7	09 20		ora #$20			ora 	#32 						; adds $20
.90c9					_LCNoAdd2:
.90c9	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.90cb					_LCPunctuation:
.90cb	c8		iny				iny 								; consume character
.90cc	20 78 91	jsr $9178			jsr 	LCLWrite 					; write it out.
.90cf	80 bd		bra $908e			bra 	_LCMainLoop 				; go round again.
.90d1					_LCIdentifiers:
.90d1	18		clc				clc 								; convert to physical address
.90d2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.90d4	85 37		sta $37				sta 	zTemp0+1
.90d6	c8		iny				iny
.90d7	b1 30		lda ($30),y			lda 	(codePtr),y
.90d9	85 36		sta $36				sta 	zTemp0
.90db	c8		iny				iny
.90dc	5a		phy				phy 								; save position
.90dd	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.90df					_LCOutIdentifier:
.90df	c8		iny				iny
.90e0	b1 36		lda ($36),y			lda 	(zTemp0),y
.90e2	29 7f		and #$7f			and 	#$7F
.90e4	20 a6 91	jsr $91a6			jsr 	LCLLowerCase
.90e7	20 78 91	jsr $9178			jsr 	LCLWrite
.90ea	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.90ec	10 f1		bpl $90df			bpl 	_LCOutIdentifier
.90ee	7a		ply				ply 								; restore position
.90ef	80 9d		bra $908e			bra 	_LCMainLoop
.90f1					_LCTokens:
.90f1	aa		tax				tax 								; token in X
.90f2	a9 76		lda #$76			lda 	#((KeywordSet2) & $FF)
.90f4	85 36		sta $36				sta 	0+zTemp0
.90f6	a9 a1		lda #$a1			lda 	#((KeywordSet2) >> 8)
.90f8	85 37		sta $37				sta 	1+zTemp0
.90fa	e0 82		cpx #$82			cpx 	#$82
.90fc	f0 16		beq $9114			beq 	_LCUseShift
.90fe	a9 32		lda #$32			lda 	#((KeywordSet1) & $FF)
.9100	85 36		sta $36				sta 	0+zTemp0
.9102	a9 a1		lda #$a1			lda 	#((KeywordSet1) >> 8)
.9104	85 37		sta $37				sta 	1+zTemp0
.9106	e0 81		cpx #$81			cpx 	#$81
.9108	f0 0a		beq $9114			beq 	_LCUseShift
.910a	a9 00		lda #$00			lda 	#((KeywordSet0) & $FF)
.910c	85 36		sta $36				sta 	0+zTemp0
.910e	a9 a0		lda #$a0			lda 	#((KeywordSet0) >> 8)
.9110	85 37		sta $37				sta 	1+zTemp0
.9112	80 01		bra $9115			bra 	_LCNoShift
.9114					_LCUseShift:
.9114	c8		iny				iny
.9115					_LCNoShift:
.9115	20 87 91	jsr $9187			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9118	b1 30		lda ($30),y			lda 	(codePtr),y
.911a	aa		tax				tax 								; into X
.911b					_LCFindText:
.911b	ca		dex				dex
.911c	10 0e		bpl $912c			bpl 	_LCFoundText 				; found text.
.911e	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9120	1a		inc a				inc 	a 							; one extra for size
.9121	38		sec				sec 								; one extra for checksum
.9122	65 36		adc $36				adc 	zTemp0 						; go to next token
.9124	85 36		sta $36				sta 	zTemp0
.9126	90 f3		bcc $911b			bcc 	_LCFindText
.9128	e6 37		inc $37				inc 	zTemp0+1
.912a	80 ef		bra $911b			bra 	_LCFindText
.912c					_LCFoundText:
.912c	5a		phy				phy 								; save List position
.912d	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.912f	aa		tax				tax
.9130	a0 02		ldy #$02			ldy 	#2
.9132					_LCCopyToken:
.9132	b1 36		lda ($36),y			lda 	(zTemp0),y
.9134	20 a6 91	jsr $91a6			jsr 	LCLLowerCase
.9137	20 78 91	jsr $9178			jsr 	LCLWrite
.913a	c8		iny				iny
.913b	ca		dex				dex
.913c	d0 f4		bne $9132			bne 	_LCCopyToken
.913e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9140	f0 05		beq $9147			beq 	_LCNoSpace
.9142	a9 20		lda #$20			lda 	#' '
.9144	20 78 91	jsr $9178			jsr 	LCLWrite
.9147					_LCNoSpace:
.9147	7a		ply				ply 								; restore position.
.9148	c8		iny				iny 								; consume token
.9149	4c 8e 90	jmp $908e			jmp 	_LCMainLoop 				; and go around again.
.914c					_LCData:
.914c	48		pha				pha 								; save type $FE/$FF
.914d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.914f	c9 fe		cmp #$fe			cmp 	#$FE
.9151	f0 02		beq $9155			beq 	_LCHaveOpener
.9153	a2 22		ldx #$22			ldx 	#'"'
.9155					_LCHaveOpener:
.9155	8a		txa				txa 								; output prefix (# or ")
.9156	20 78 91	jsr $9178			jsr 	LCLWrite
.9159	c8		iny				iny 								; get count
.915a	b1 30		lda ($30),y			lda 	(codePtr),y
.915c	aa		tax				tax
.915d	c8		iny				iny 								; point at first character
.915e					_LCOutData:
.915e	b1 30		lda ($30),y			lda 	(codePtr),y
.9160	c9 00		cmp #$00			cmp 	#0
.9162	f0 03		beq $9167			beq 	_LCNoPrint
.9164	20 78 91	jsr $9178			jsr 	LCLWrite
.9167					_LCNoPrint:
.9167	c8		iny				iny
.9168	ca		dex				dex
.9169	d0 f3		bne $915e			bne 	_LCOutData
.916b	68		pla				pla 								; closing " required ?
.916c	c9 ff		cmp #$ff			cmp 	#$FF
.916e	d0 05		bne $9175			bne 	_LCNoQuote
.9170	a9 22		lda #$22			lda 	#'"'
.9172	20 78 91	jsr $9178			jsr 	LCLWrite
.9175					_LCNoQuote:
.9175	4c 8e 90	jmp $908e			jmp 	_LCMainLoop
.9178					LCLWrite:
.9178	da		phx				phx
.9179	ae 9d 04	ldx $049d			ldx 	tbOffset
.917c	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.917f	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9182	ee 9d 04	inc $049d			inc 	tbOffset
.9185	fa		plx				plx
.9186	60		rts				rts
.9187					LCCheckSpaceRequired:
.9187	ae 9d 04	ldx $049d			ldx 	tbOffset
.918a	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.918d	20 a6 91	jsr $91a6			jsr 	LCLLowerCase 				; saves a little effort
.9190	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9192	90 11		bcc $91a5			bcc 	_LCCSRExit
.9194	c9 3a		cmp #$3a			cmp 	#"9"+1
.9196	90 08		bcc $91a0			bcc 	_LCCSRSpace
.9198	c9 61		cmp #$61			cmp 	#"a"
.919a	90 09		bcc $91a5			bcc 	_LCCSRExit
.919c	c9 7b		cmp #$7b			cmp 	#"z"+1
.919e	b0 05		bcs $91a5			bcs 	_LCCSRExit
.91a0					_LCCSRSpace:
.91a0	a9 20		lda #$20			lda 	#' '
.91a2	20 78 91	jsr $9178			jsr 	LCLWrite
.91a5					_LCCSRExit:
.91a5	60		rts				rts
.91a6					LCLLowerCase:
.91a6	c9 41		cmp #$41			cmp 	#"A"
.91a8	90 06		bcc $91b0			bcc 	_LCLLCOut
.91aa	c9 5b		cmp #$5b			cmp 	#"Z"+1
.91ac	b0 02		bcs $91b0			bcs 	_LCLLCOut
.91ae	69 20		adc #$20			adc 	#$20
.91b0					_LCLLCOut:
.91b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.91b1					ProcedureScan:
.91b1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91b3	85 30		sta $30				sta 	codePtr
.91b5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91b7	85 31		sta $31				sta 	codePtr+1
.91b9					_PSLoop:
.91b9	b2 30		lda ($30)			lda 	(codePtr)
.91bb	f0 42		beq $91ff			beq 	_PSExit
.91bd	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.91bf	b1 30		lda ($30),y			lda 	(codePtr),y
.91c1	c9 99		cmp #$99			cmp 	#KWD_PROC
.91c3	d0 2d		bne $91f2			bne 	_PSNext
.91c5	c8		iny				iny 								; get the address of the record to zTemp0 and
.91c6	b1 30		lda ($30),y			lda 	(codePtr),y
.91c8	29 c0		and #$c0			and 	#$C0
.91ca	c9 40		cmp #$40			cmp 	#$40
.91cc	d0 32		bne $9200			bne 	_PSSyntax
.91ce	b1 30		lda ($30),y			lda 	(codePtr),y
.91d0	18		clc				clc
.91d1	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.91d3	85 37		sta $37				sta 	zTemp0+1
.91d5	c8		iny				iny 								; LSB
.91d6	b1 30		lda ($30),y			lda 	(codePtr),y
.91d8	85 36		sta $36				sta 	zTemp0
.91da	c8		iny				iny 								; character after variable call.
.91db	98		tya				tya 								; save Y offset at +7
.91dc	a0 07		ldy #$07			ldy 	#7
.91de	91 36		sta ($36),y			sta 	(zTemp0),y
.91e0	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.91e2	a0 02		ldy #$02			ldy 	#2
.91e4	91 36		sta ($36),y			sta 	(zTemp0),y
.91e6	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.91e8					_PSCopy:
.91e8	b5 30		lda $30,x			lda 	safePtr,x
.91ea	c8		iny				iny
.91eb	91 36		sta ($36),y			sta 	(zTemp0),y
.91ed	e8		inx				inx
.91ee	e0 04		cpx #$04			cpx 	#4
.91f0	d0 f6		bne $91e8			bne 	_PSCopy
.91f2					_PSNext:
.91f2	18		clc				clc
.91f3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91f5	65 30		adc $30				adc 	codePtr
.91f7	85 30		sta $30				sta 	codePtr
.91f9	90 02		bcc $91fd			bcc 	_CREExit
.91fb	e6 31		inc $31				inc 	codePtr+1
.91fd					_CREExit:
.91fd	80 ba		bra $91b9			bra 	_PSLoop
.91ff					_PSExit:
.91ff	60		rts				rts
.9200					_PSSyntax:
.9200	4c b0 ab	jmp $abb0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9203					ScanForward:
.9203	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9205	86 37		stx $37				stx 	zTemp0+1
.9207	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9209					_ScanLoop:
.9209	b1 30		lda ($30),y			lda 	(codePtr),y
.920b	c8		iny				iny
.920c	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.920e	d0 0e		bne $921e			bne 	_ScanGoNext
.9210	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9212	f0 04		beq $9218			beq 	_ScanMatch
.9214	c5 37		cmp $37				cmp 	zTemp0+1
.9216	d0 06		bne $921e			bne 	_ScanGoNext
.9218					_ScanMatch:
.9218	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.921a	d0 01		bne $921d			bne 	_ScanNotEndEOL
.921c	88		dey				dey
.921d					_ScanNotEndEOL:
.921d	60		rts				rts
.921e					_ScanGoNext:
.921e	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9220	90 e7		bcc $9209			bcc 	_ScanLoop
.9222	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9224	90 18		bcc $923e			bcc 	_ScanSkipOne
.9226	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9228	b0 2f		bcs $9259			bcs 	_ScanSkipData
.922a	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.922c	90 db		bcc $9209			bcc 	_ScanLoop 					; if not, ordinary keywords.
.922e	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.9230	b0 d7		bcs $9209			bcs 	_ScanLoop
.9232	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9234	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9236	b0 d1		bcs $9209			bcs 	_ScanLoop
.9238	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.923a	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.923c	80 cb		bra $9209			bra 	_ScanLoop
.923e					_ScanSkipOne:
.923e	c8		iny				iny 								; consume the extra one.
.923f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9241	d0 c6		bne $9209			bne 	_ScanLoop
.9243	18		clc				clc
.9244	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9246	65 30		adc $30				adc 	codePtr
.9248	85 30		sta $30				sta 	codePtr
.924a	90 02		bcc $924e			bcc 	_CREExit
.924c	e6 31		inc $31				inc 	codePtr+1
.924e					_CREExit:
.924e	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9250	b2 30		lda ($30)			lda 	(codePtr)
.9252	d0 b5		bne $9209			bne 	_ScanLoop 					; if not zero, more to scan
.9254	a9 13		lda #$13		lda	#19
.9256	4c 91 92	jmp $9291		jmp	ErrorHandler
.9259					_ScanSkipData:
.9259	88		dey				dey 								; point at data token
.925a	c8		iny				iny
.925b	98		tya				tya
.925c	38		sec				sec
.925d	71 30		adc ($30),y			adc 	(codePtr),y
.925f	a8		tay				tay
.9260	80 a7		bra $9209			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9262					Command_WHILE:
.9262	5a		phy				phy 								; save position of the test
.9263	a2 00		ldx #$00			ldx 	#0
.9265	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber 				; work out the number
.9268	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; check if zero
.926b	f0 0e		beq $927b			beq 	_WHExitLoop 				; if so exit the loop
.926d	98		tya				tya 								; position *after* test.
.926e	7a		ply				ply 								; restore position before test, at WHILE
.926f	88		dey				dey
.9270	48		pha				pha 								; push after test on the stack
.9271	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9273	20 fd 9e	jsr $9efd			jsr 	StackOpen
.9276	20 41 9f	jsr $9f41			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9279	7a		ply				ply 								; restore the position *after* the test
.927a	60		rts				rts
.927b					_WHExitLoop:
.927b	68		pla				pla 								; throw post loop position
.927c	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.927e	aa		tax				tax
.927f	20 03 92	jsr $9203			jsr 	ScanForward
.9282	60		rts				rts
.9283					Command_WEND:
.9283	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9285	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9287	20 29 9f	jsr $9f29			jsr 	StackCheckFrame
.928a	20 52 9f	jsr $9f52			jsr 	STKLoadCodePosition 		; loop back
.928d	20 1b 9f	jsr $9f1b			jsr 	StackClose		 			; erase the frame
.9290	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a5ca					CheckRightBracket:
.a5ca	b1 30		lda ($30),y			lda 	(codePtr),y
.a5cc	c8		iny				iny
.a5cd	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a5cf	d0 0f		bne $a5e0			bne 	CNAFail
.a5d1	60		rts				rts
.a5d2					CheckComma:
.a5d2	b1 30		lda ($30),y			lda 	(codePtr),y
.a5d4	c8		iny				iny
.a5d5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a5d7	d0 07		bne $a5e0			bne 	CNAFail
.a5d9	60		rts				rts
.a5da					CheckNextA:
.a5da	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a5dc	d0 02		bne $a5e0			bne 	CNAFail
.a5de	c8		iny				iny 								; skip character
.a5df	60		rts				rts 								; and exit
.a5e0					CNAFail:
.a5e0	4c b0 ab	jmp $abb0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9291					ErrorHandler:
.9291	a8		tay				tay 								; find the error text
.9292	f0 49		beq $92dd			beq 	_EHEnd
.9294	a2 00		ldx #$00			ldx 	#0
.9296	a9 c9		lda #$c9			lda 	#((ErrorText) & $FF)
.9298	85 36		sta $36				sta 	0+zTemp0
.929a	a9 ab		lda #$ab			lda 	#((ErrorText) >> 8)
.929c	85 37		sta $37				sta 	1+zTemp0
.929e					_EHFind:
.929e	88		dey				dey 								; found the error text ?
.929f	f0 0e		beq $92af			beq 	_EHFound
.92a1					_EHFindZero:
.92a1	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.92a3	e6 36		inc $36				inc 	zTemp0
.92a5	d0 02		bne $92a9			bne 	_EHFNoCarry
.92a7	e6 37		inc $37				inc 	zTemp0+1
.92a9					_EHFNoCarry:
.92a9	c9 00		cmp #$00			cmp 	#0
.92ab	d0 f4		bne $92a1			bne 	_EHFindZero
.92ad	80 ef		bra $929e			bra 	_EHFind
.92af					_EHFound:
.92af	a5 36		lda $36				lda 	zTemp0 						; print message
.92b1	a6 37		ldx $37				ldx 	zTemp0+1
.92b3	20 ea 92	jsr $92ea			jsr 	PrintStringXA
.92b6	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.92b8	b1 30		lda ($30),y			lda 	(codePtr),y
.92ba	d0 05		bne $92c1			bne 	_EHAtMsg
.92bc	c8		iny				iny
.92bd	b1 30		lda ($30),y			lda 	(codePtr),y
.92bf	f0 17		beq $92d8			beq 	_EHCREnd
.92c1					_EHAtMsg:
.92c1	a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.92c3	a9 e0		lda #$e0			lda 	#_AtMsg & $FF
.92c5	20 ea 92	jsr $92ea			jsr 	PrintStringXA
.92c8	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.92ca	b1 30		lda ($30),y			lda 	(codePtr),y
.92cc	48		pha				pha
.92cd	c8		iny				iny
.92ce	b1 30		lda ($30),y			lda 	(codePtr),y
.92d0	aa		tax				tax
.92d1	68		pla				pla
.92d2	20 26 a7	jsr $a726			jsr 	ConvertInt16 				; convert XA to string
.92d5	20 ea 92	jsr $92ea			jsr 	PrintStringXA 				; and print it.
.92d8					_EHCREnd:
.92d8	a9 0d		lda #$0d			lda 	#13 						; new line
.92da	20 54 ad	jsr $ad54			jsr 	EXTPrintCharacter
.92dd					_EHEnd:
.92dd	4c 29 88	jmp $8829			jmp 	WarmStart
>92e0	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>92e8	20 00
.92ea					PrintStringXA:
.92ea	5a		phy				phy
.92eb	86 37		stx $37				stx 	zTemp0+1
.92ed	85 36		sta $36				sta 	zTemp0
.92ef	a0 00		ldy #$00			ldy 	#0
.92f1					_PSXALoop:
.92f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.92f3	f0 06		beq $92fb			beq 	_PSXAExit
.92f5	20 54 ad	jsr $ad54			jsr 	EXTPrintCharacter
.92f8	c8		iny				iny
.92f9	80 f6		bra $92f1			bra 	_PSXALoop
.92fb					_PSXAExit:
.92fb	7a		ply				ply
.92fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.92fd					UnaryTrue:
.92fd	fa		plx				plx
.92fe					ReturnTrue:
.92fe	a9 01		lda #$01			lda 	#1  						; set to 1
.9300	20 4b 9e	jsr $9e4b			jsr 	NSMSetByte
.9303	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9305	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9308	60		rts				rts
.9309					UnaryFalse:
.9309	fa		plx				plx
.930a					ReturnFalse:
.930a	4c 49 9e	jmp $9e49			jmp 	NSMSetZero 					; set it all to zero
.930d					BinaryCompareEqual:
.930d	fa		plx				plx
.930e	20 49 93	jsr $9349			jsr 	CompareBaseCode
.9311	c9 00		cmp #$00			cmp 	#0
.9313	f0 e9		beq $92fe			beq 	ReturnTrue
.9315	80 f3		bra $930a			bra 	ReturnFalse
.9317					BinaryCompareLess:
.9317	fa		plx				plx
.9318	20 49 93	jsr $9349			jsr 	CompareBaseCode
.931b	c9 ff		cmp #$ff			cmp 	#$FF
.931d	f0 df		beq $92fe			beq 	ReturnTrue
.931f	80 e9		bra $930a			bra 	ReturnFalse
.9321					BinaryCompareGreater:
.9321	fa		plx				plx
.9322	20 49 93	jsr $9349			jsr 	CompareBaseCode
.9325	c9 01		cmp #$01			cmp 	#1
.9327	f0 d5		beq $92fe			beq 	ReturnTrue
.9329	80 df		bra $930a			bra 	ReturnFalse
.932b					BinaryCompareNotEqual:
.932b	fa		plx				plx
.932c	20 49 93	jsr $9349			jsr 	CompareBaseCode
.932f	c9 00		cmp #$00			cmp 	#0
.9331	d0 cb		bne $92fe			bne 	ReturnTrue
.9333	80 d5		bra $930a			bra 	ReturnFalse
.9335					BinaryCompareLessEqual:
.9335	fa		plx				plx
.9336	20 49 93	jsr $9349			jsr 	CompareBaseCode
.9339	c9 01		cmp #$01			cmp 	#1
.933b	d0 c1		bne $92fe			bne 	ReturnTrue
.933d	80 cb		bra $930a			bra 	ReturnFalse
.933f					BinaryCompareGreaterEqual:
.933f	fa		plx				plx
.9340	20 49 93	jsr $9349			jsr 	CompareBaseCode
.9343	c9 ff		cmp #$ff			cmp 	#$FF
.9345	d0 b7		bne $92fe			bne 	ReturnTrue
.9347	80 c1		bra $930a			bra 	ReturnFalse
.9349					CompareBaseCode:
.9349	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; make both values if references.
.934c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.934f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9352	29 10		and #$10			and 	#NSTString
.9354	d0 40		bne $9396			bne 	_CBCString
.9356	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9359	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.935c	d0 3b		bne $9399			bne 	_CBCFloat
.935e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9361	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9364	29 08		and #$08			and 	#NSTFloat
.9366	d0 31		bne $9399			bne 	_CBCFloat
.9368	20 9c 93	jsr $939c			jsr 	CompareFixMinusZero
.936b	e8		inx				inx
.936c	20 9c 93	jsr $939c			jsr 	CompareFixMinusZero
.936f	ca		dex				dex
.9370	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9373	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9376	10 0b		bpl $9383			bpl 	_CDCSameSign
.9378	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.937b	30 16		bmi $9393			bmi 	_CBCLess 					; return $FF
.937d					_CBCGreater:
.937d	a9 01		lda #$01			lda 	#1
.937f	60		rts				rts
.9380					_CBCEqual:
.9380	a9 00		lda #$00			lda 	#0
.9382	60		rts				rts
.9383					_CDCSameSign:
.9383	20 ac 94	jsr $94ac			jsr 	SubTopTwoStack 				; unsigned subtract
.9386	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; or the mantissa together
.9389	f0 f5		beq $9380			beq 	_CBCEqual 					; -0 == 0
.938b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.938e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9391	10 ea		bpl $937d			bpl 	_CBCGreater
.9393					_CBCLess:
.9393	a9 ff		lda #$ff			lda 	#$FF
.9395	60		rts				rts
.9396					_CBCString:
.9396	4c 02 94	jmp $9402			jmp 	CompareStrings
.9399					_CBCFloat:
.9399	4c 22 a8	jmp $a822			jmp 	CompareFloat
.939c					CompareFixMinusZero:
.939c	20 79 9e	jsr $9e79			jsr 	NSMIsZero
.939f	d0 03		bne $93a4			bne 	_CFXMZNotZero
.93a1	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93a4					_CFXMZNotZero:
.93a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.93a5					StringConcat:
.93a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.93a8	3d 01 04	and $0401,x			and 	NSStatus+1,x
.93ab	29 18		and #$18			and 	#NSBTypeMask
.93ad	c9 10		cmp #$10			cmp 	#NSTString
.93af	d0 4e		bne $93ff			bne		_SCType
.93b1	64 38		stz $38				stz 	zTemp1 						; counting total length
.93b3	e8		inx				inx
.93b4	20 d2 93	jsr $93d2			jsr 	_SCSetupZ0 					; setup for second
.93b7	20 dd 93	jsr $93dd			jsr 	_SCLengthZ0 				; length for second
.93ba	ca		dex				dex
.93bb	20 d2 93	jsr $93d2			jsr 	_SCSetupZ0 					; setup for first
.93be	20 dd 93	jsr $93dd			jsr 	_SCLengthZ0 				; length for first
.93c1	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.93c3	20 d6 ae	jsr $aed6			jsr 	StringTempAllocate
.93c6	20 f0 93	jsr $93f0			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.93c9	e8		inx				inx
.93ca	20 d2 93	jsr $93d2			jsr 	_SCSetupZ0 					; copy second out
.93cd	20 f0 93	jsr $93f0			jsr 	_SCCopy
.93d0	ca		dex				dex
.93d1	60		rts				rts
.93d2					_SCSetupZ0:
.93d2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.93d5	85 36		sta $36				sta 	zTemp0
.93d7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93da	85 37		sta $37				sta 	zTemp0+1
.93dc	60		rts				rts
.93dd					_SCLengthZ0:
.93dd	5a		phy				phy
.93de	a0 00		ldy #$00			ldy 	#0
.93e0					_SCLenLoop:
.93e0	b1 36		lda ($36),y			lda 	(zTemp0),y
.93e2	f0 0a		beq $93ee			beq 	_SCLExit
.93e4	c8		iny				iny
.93e5	e6 38		inc $38				inc 	zTemp1
.93e7	10 f7		bpl $93e0			bpl		_SCLenLoop
.93e9	a9 09		lda #$09		lda	#9
.93eb	4c 91 92	jmp $9291		jmp	ErrorHandler
.93ee					_SCLExit:
.93ee	7a		ply				ply
.93ef	60		rts				rts
.93f0					_SCCopy:
.93f0	5a		phy				phy
.93f1	a0 00		ldy #$00			ldy 	#0
.93f3					_SCCopyLoop:
.93f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.93f5	f0 06		beq $93fd			beq 	_SCCExit
.93f7	20 14 af	jsr $af14			jsr 	StringTempWrite
.93fa	c8		iny				iny
.93fb	80 f6		bra $93f3			bra 	_SCCopyLoop
.93fd					_SCCExit:
.93fd	7a		ply				ply
.93fe	60		rts				rts
.93ff					_SCType:
.93ff	4c ba ab	jmp $abba			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a5e3					IntegerDivide:
.a5e3	fa		plx				plx
.a5e4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a5e7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a5ea	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a5eb	0a		asl a				asl 	a
.a5ec	10 05		bpl $a5f3			bpl 	_NotRef
.a5ee	48		pha				pha
.a5ef	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a5f2	68		pla				pla
.a5f3					_NotRef:
.a5f3	0a		asl a				asl 	a
.a5f4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a5f6	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a5f9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a5fc	f0 03		beq $a601			beq 	_IntegerCode 				; if clear, then we have two integers
.a5fe	4c ba ab	jmp $abba			jmp 	TypeError 					; anything else, type mismatch.
.a601					_IntegerCode:
.a601	20 23 a6	jsr $a623			jsr 	CheckDivideZero 			; do div zero check
.a604	20 5b a6	jsr $a65b			jsr 	Int32Divide 				; do the division
.a607	20 18 a7	jsr $a718			jsr 	CalculateSign 				; calculate result sign
.a60a					NSMCopyPlusTwoToZero:
.a60a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a60d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a610	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a613	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a616	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a619	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a61c	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a61f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a622	60		rts				rts
.a623					CheckDivideZero:
.a623	e8		inx				inx
.a624	20 79 9e	jsr $9e79			jsr 	NSMIsZero
.a627	f0 02		beq $a62b			beq 	_CDVError
.a629	ca		dex				dex
.a62a	60		rts				rts
.a62b					_CDVError:
.a62b	a9 03		lda #$03		lda	#3
.a62d	4c 91 92	jmp $9291		jmp	ErrorHandler
.a630					IntegerModulus:
.a630	fa		plx				plx
.a631	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a634	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a637	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a638	0a		asl a				asl 	a
.a639	10 05		bpl $a640			bpl 	_NotRef
.a63b	48		pha				pha
.a63c	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a63f	68		pla				pla
.a640					_NotRef:
.a640	0a		asl a				asl 	a
.a641	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a643	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a646	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a649	f0 03		beq $a64e			beq 	_IntegerCode 				; if clear, then we have two integers
.a64b	4c ba ab	jmp $abba			jmp 	TypeError 					; anything else, type mismatch.
.a64e					_IntegerCode:
.a64e					IntegerModulusNoCheck:
.a64e	20 23 a6	jsr $a623			jsr 	CheckDivideZero 			; do div zero check
.a651	20 5b a6	jsr $a65b			jsr 	Int32Divide 				; do the division
.a654	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a657	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a65a	60		rts				rts
.a65b					Int32Divide:
.a65b	48		pha				pha 								; save AXY
.a65c	5a		phy				phy
.a65d	20 20 9e	jsr $9e20			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a660	20 45 9e	jsr $9e45			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a663	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a665					_I32DivideLoop:
.a665	e8		inx				inx
.a666	e8		inx				inx
.a667	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a66a	ca		dex				dex
.a66b	ca		dex				dex
.a66c	20 5f 9e	jsr $9e5f			jsr 	NSMRotateLeft
.a66f	20 9b a6	jsr $a69b			jsr 	DivideCheckSubtract 		; check if subtract possible
.a672	90 03		bcc $a677			bcc 	_I32DivideNoCarryIn
.a674	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a677					_I32DivideNoCarryIn:
.a677	88		dey				dey 								; loop round till division completed.
.a678	d0 eb		bne $a665			bne 	_I32DivideLoop
.a67a	7a		ply				ply 								; restore AXY and exit
.a67b	68		pla				pla
.a67c	60		rts				rts
.a67d					Int32ShiftDivide:
.a67d	48		pha				pha 								; save AY
.a67e	5a		phy				phy
.a67f	e8		inx				inx 								; clear S[X+2]
.a680	e8		inx				inx
.a681	20 49 9e	jsr $9e49			jsr 	NSMSetZero
.a684	ca		dex				dex
.a685	ca		dex				dex
.a686	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a688					_I32SDLoop:
.a688	20 9b a6	jsr $a69b			jsr 	DivideCheckSubtract 		; check if subtract possible
.a68b	e8		inx				inx
.a68c	e8		inx				inx
.a68d	20 5f 9e	jsr $9e5f			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a690	ca		dex				dex
.a691	ca		dex				dex
.a692	20 5f 9e	jsr $9e5f			jsr 	NSMRotateLeft
.a695	88		dey				dey 	 							; do 31 times
.a696	d0 f0		bne $a688			bne 	_I32SDLoop
.a698	7a		ply				ply 								; restore AY and exit
.a699	68		pla				pla
.a69a	60		rts				rts
.a69b					DivideCheckSubtract:
.a69b	20 ac 94	jsr $94ac			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a69e	b0 04		bcs $a6a4			bcs 	_DCSExit 					; if carry set, then could do, exit
.a6a0	20 86 94	jsr $9486			jsr 	AddTopTwoStack 				; add it back in
.a6a3	18		clc				clc 								; and return False
.a6a4					_DCSExit:
.a6a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a6a5					MulInteger:
.a6a5	fa		plx				plx
.a6a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a6a9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a6ac	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a6ad	0a		asl a				asl 	a
.a6ae	10 05		bpl $a6b5			bpl 	_NotRef
.a6b0	48		pha				pha
.a6b1	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a6b4	68		pla				pla
.a6b5					_NotRef:
.a6b5	0a		asl a				asl 	a 							; put MSB of type into A:7
.a6b6	30 0b		bmi $a6c3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a6b8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a6bb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a6be	f0 06		beq $a6c6			beq 	_IntegerCode 				; if clear, then we have two integers
.a6c0	4c f9 a8	jmp $a8f9			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a6c3					_StringData:
.a6c3	4c c4 ab	jmp $abc4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a6c6					_IntegerCode:
.a6c6	20 d3 a6	jsr $a6d3			jsr 	MultiplyShort
.a6c9	c9 00		cmp #$00			cmp 	#0
.a6cb	f0 05		beq $a6d2			beq 	_MIExit
.a6cd	a9 04		lda #$04		lda	#4
.a6cf	4c 91 92	jmp $9291		jmp	ErrorHandler
.a6d2					_MIExit:
.a6d2	60		rts				rts
.a6d3					MultiplyShort:
.a6d3	5a		phy				phy 								; save Y
.a6d4	20 20 9e	jsr $9e20			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a6d7	20 45 9e	jsr $9e45			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a6da	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a6dc					_I32MLoop:
.a6dc	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a6df	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a6e2	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a6e5	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a6e8	f0 28		beq $a712			beq 	_I32MExit 					; exit if zero
.a6ea	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a6ed	29 01		and #$01			and 	#1
.a6ef	f0 0e		beq $a6ff			beq 	_I32MNoAdd
.a6f1	20 86 94	jsr $9486			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a6f4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a6f7	10 06		bpl $a6ff			bpl 	_I32MNoAdd
.a6f9					_I32ShiftRight:
.a6f9	20 6c 9e	jsr $9e6c			jsr 	NSMShiftRight 				; shift S[X] right
.a6fc	c8		iny				iny 								; increment shift count
.a6fd	80 0a		bra $a709			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a6ff					_I32MNoAdd:
.a6ff	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a702	70 f5		bvs $a6f9			bvs 	_I32ShiftRight 				; instead.
.a704	e8		inx				inx
.a705	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a708	ca		dex				dex
.a709					_I32MShiftUpper:
.a709	e8		inx				inx 								; shift S[X+2] right
.a70a	e8		inx				inx
.a70b	20 6c 9e	jsr $9e6c			jsr 	NSMShiftRight
.a70e	ca		dex				dex
.a70f	ca		dex				dex
.a710	80 ca		bra $a6dc			bra 	_I32MLoop 					; try again.
.a712					_I32MExit:
.a712	20 18 a7	jsr $a718			jsr 	CalculateSign
.a715	98		tya				tya 								; shift in A
.a716	7a		ply				ply 								; restore Y and exit
.a717	60		rts				rts
.a718					CalculateSign:
.a718	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a71b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a71e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a721	0a		asl a				asl 	a 							; shift bit 7 into carry
.a722	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a725	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9402					CompareStrings:
.9402	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9405	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9408	29 10		and #$10			and 	#NSBIsString
.940a	f0 2c		beq $9438			beq 	_CSTypeError
.940c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.940f	85 36		sta $36				sta 	zTemp0
.9411	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9414	85 37		sta $37				sta 	zTemp0+1
.9416	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9419	85 38		sta $38				sta 	zTemp1
.941b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.941e	85 39		sta $39				sta 	zTemp1+1
.9420	5a		phy				phy 								; save Y so we can access strings
.9421	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9423					_CSLoop:
.9423	c8		iny				iny
.9424	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9426	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9428	d0 06		bne $9430			bne 	_CSDifferent
.942a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.942c	d0 f5		bne $9423			bne 	_CSLoop 					; still comparing
.942e					_CSExit:
.942e	7a		ply				ply 								; reached end, return zero in A from EOS
.942f	60		rts				rts
.9430					_CSDifferent:
.9430	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9432	90 fa		bcc $942e			bcc		_CSExit
.9434	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9436	80 f6		bra $942e			bra 	_CSExit
.9438					_CSTypeError:
.9438	4c ba ab	jmp $abba			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.943b					ShiftLeft:
.943b	38		sec				sec
.943c	80 01		bra $943f			bra 	ShiftMain
.943e					ShiftRight:
.943e	18		clc				clc
.943f					ShiftMain:
.943f	fa		plx				plx 								; restore X
.9440	08		php				php 								; save direction
.9441	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9444	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9447	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9448	0a		asl a				asl 	a
.9449	10 05		bpl $9450			bpl 	_NotRef
.944b	48		pha				pha
.944c	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.944f	68		pla				pla
.9450					_NotRef:
.9450	0a		asl a				asl 	a
.9451	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9453	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9456	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9459	f0 03		beq $945e			beq 	_IntegerCode 				; if clear, then we have two integers
.945b	4c ba ab	jmp $abba			jmp 	TypeError 					; anything else, type mismatch.
.945e					_IntegerCode:
.945e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9461	29 e0		and #$e0			and 	#$E0
.9463	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9466	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9469	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.946c	d0 13		bne $9481			bne 	_SMExit0 					; if >= 32 it will always return zero.
.946e					_SMLoop:
.946e	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9471	30 11		bmi $9484			bmi 	_SMExit 					; exit if done.
.9473	28		plp				plp 								; restore direcition setting
.9474	08		php				php
.9475	90 05		bcc $947c			bcc 	_SMRight
.9477	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; shift left if CS
.947a	80 f2		bra $946e			bra 	_SMLoop
.947c					_SMRight:
.947c	20 6c 9e	jsr $9e6c			jsr 	NSMShiftRight 				; shift right if CC
.947f	80 ed		bra $946e			bra 	_SMLoop
.9481					_SMExit0:
.9481	20 49 9e	jsr $9e49			jsr 	NSMSetZero 					; return zero.
.9484					_SMExit:
.9484	28		plp				plp 								; throw direction
.9485	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9486					AddTopTwoStack:
.9486	18		clc				clc
.9487	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.948a	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.948d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9490	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9493	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9496	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9499	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.949c	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.949f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94a2	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94a5	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.94a8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94ab	60		rts				rts
.94ac					SubTopTwoStack:
.94ac	38		sec				sec
.94ad	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.94b0	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.94b3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94b6	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.94b9	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.94bc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94bf	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.94c2	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.94c5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94c8	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94cb	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.94ce	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94d1	60		rts				rts
.94d2					AddInteger:
.94d2	fa		plx				plx
.94d3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94d6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94d9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94da	0a		asl a				asl 	a
.94db	10 05		bpl $94e2			bpl 	_NotRef
.94dd	48		pha				pha
.94de	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94e1	68		pla				pla
.94e2					_NotRef:
.94e2	0a		asl a				asl 	a 							; put MSB of type into A:7
.94e3	30 0b		bmi $94f0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94e5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94e8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94eb	f0 06		beq $94f3			beq 	_IntegerCode 				; if clear, then we have two integers
.94ed	4c 81 a7	jmp $a781			jmp 	FloatingPointAdd 							; otherwise at least one float.
.94f0					_StringData:
.94f0	4c a5 93	jmp $93a5			jmp 	StringConcat							; at least one string - don't know both are strings.
.94f3					_IntegerCode:
.94f3					AddCode:
.94f3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.94f6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.94f9	10 8b		bpl $9486			bpl 	AddTopTwoStack
.94fb	20 ac 94	jsr $94ac			jsr 	SubTopTwoStack 				; do a physical subtraction
.94fe	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9501	10 09		bpl $950c			bpl 	_AddExit
.9503	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9506	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9509	20 fe 9d	jsr $9dfe			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.950c					_AddExit:
.950c	60		rts				rts
.950d					SubInteger:
.950d	fa		plx				plx
.950e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9511	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9514	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9515	0a		asl a				asl 	a
.9516	10 05		bpl $951d			bpl 	_NotRef
.9518	48		pha				pha
.9519	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.951c	68		pla				pla
.951d					_NotRef:
.951d	0a		asl a				asl 	a 							; put MSB of type into A:7
.951e	30 0b		bmi $952b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9520	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9523	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9526	f0 06		beq $952e			beq 	_IntegerCode 				; if clear, then we have two integers
.9528	4c 86 a7	jmp $a786			jmp 	FloatingPointSub 							; otherwise at least one float.
.952b					_StringData:
.952b	4c c4 ab	jmp $abc4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.952e					_IntegerCode:
.952e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9531	49 80		eor #$80			eor 	#$80
.9533	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9536	80 bb		bra $94f3			bra 	AddCode 					; and do the same code as add.
.9538					AndInteger:
.9538	fa		plx				plx
.9539	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.953c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.953f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9540	0a		asl a				asl 	a
.9541	10 05		bpl $9548			bpl 	_NotRef
.9543	48		pha				pha
.9544	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9547	68		pla				pla
.9548					_NotRef:
.9548	0a		asl a				asl 	a
.9549	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.954b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.954e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9551	f0 03		beq $9556			beq 	_IntegerCode 				; if clear, then we have two integers
.9553	4c ba ab	jmp $abba			jmp 	TypeError 					; anything else, type mismatch.
.9556					_IntegerCode:
.9556	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9559	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.955c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.955f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9562	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9565	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9568	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.956b	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.956e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9571	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9574	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9577	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.957a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.957d	60		rts				rts
.957e					OraInteger:
.957e	fa		plx				plx
.957f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9582	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9585	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9586	0a		asl a				asl 	a
.9587	10 05		bpl $958e			bpl 	_NotRef
.9589	48		pha				pha
.958a	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.958d	68		pla				pla
.958e					_NotRef:
.958e	0a		asl a				asl 	a
.958f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9591	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9594	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9597	f0 03		beq $959c			beq 	_IntegerCode 				; if clear, then we have two integers
.9599	4c ba ab	jmp $abba			jmp 	TypeError 					; anything else, type mismatch.
.959c					_IntegerCode:
.959c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.959f	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.95a2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95a5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95a8	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.95ab	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95ae	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95b1	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.95b4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95b7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95ba	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.95bd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95c0	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.95c3	60		rts				rts
.95c4					EorInteger:
.95c4	fa		plx				plx
.95c5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95c8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95cb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95cc	0a		asl a				asl 	a
.95cd	10 05		bpl $95d4			bpl 	_NotRef
.95cf	48		pha				pha
.95d0	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95d3	68		pla				pla
.95d4					_NotRef:
.95d4	0a		asl a				asl 	a
.95d5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95d7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95da	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95dd	f0 03		beq $95e2			beq 	_IntegerCode 				; if clear, then we have two integers
.95df	4c ba ab	jmp $abba			jmp 	TypeError 					; anything else, type mismatch.
.95e2					_IntegerCode:
.95e2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95e5	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.95e8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95eb	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95ee	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.95f1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95f4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95f7	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.95fa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95fd	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9600	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9603	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9606	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9609	60		rts				rts
.960a					WordIndirect:
.960a	fa		plx				plx
.960b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.960e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9611	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9612	0a		asl a				asl 	a
.9613	10 05		bpl $961a			bpl 	_NotRef
.9615	48		pha				pha
.9616	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9619	68		pla				pla
.961a					_NotRef:
.961a	0a		asl a				asl 	a
.961b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.961d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9620	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9623	f0 03		beq $9628			beq 	_IntegerCode 				; if clear, then we have two integers
.9625	4c ba ab	jmp $abba			jmp 	TypeError 					; anything else, type mismatch.
.9628					_IntegerCode:
.9628	20 f3 94	jsr $94f3			jsr 	AddCode 					; add the two values
.962b	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.962d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9630	60		rts				rts
.9631					ByteIndirect:
.9631	fa		plx				plx
.9632	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9635	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9638	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9639	0a		asl a				asl 	a
.963a	10 05		bpl $9641			bpl 	_NotRef
.963c	48		pha				pha
.963d	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9640	68		pla				pla
.9641					_NotRef:
.9641	0a		asl a				asl 	a
.9642	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9644	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9647	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.964a	f0 03		beq $964f			beq 	_IntegerCode 				; if clear, then we have two integers
.964c	4c ba ab	jmp $abba			jmp 	TypeError 					; anything else, type mismatch.
.964f					_IntegerCode:
.964f	20 f3 94	jsr $94f3			jsr 	AddCode 					; add the two values
.9652	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9654	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9657	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a726					ConvertInt16:
.a726	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a729	8e 10 04	stx $0410			stx 	NSMantissa1
.a72c	9c 18 04	stz $0418			stz 	NSMantissa2
.a72f	9c 20 04	stz $0420			stz 	NSMantissa3
.a732	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a735	a2 00		ldx #$00			ldx 	#0 							; stack level
.a737	a9 0a		lda #$0a			lda 	#10 						; base
.a739	80 00		bra $a73b			bra 	ConvertInt32
.a73b					ConvertInt32:
.a73b	5a		phy				phy
.a73c	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a73e	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a741	10 08		bpl $a74b			bpl 	_CI32NotNeg
.a743	48		pha				pha
.a744	a9 2d		lda #$2d			lda 	#'-'
.a746	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a749	c8		iny				iny
.a74a	68		pla				pla
.a74b					_CI32NotNeg:
.a74b	20 59 a7	jsr $a759			jsr 	_CI32DivideConvert 			; recursive conversion
.a74e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a750	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a753	7a		ply				ply
.a754	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a756	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a758	60		rts				rts
.a759					_CI32DivideConvert:
.a759	e8		inx				inx 								; write to next slot up
.a75a	20 4b 9e	jsr $9e4b			jsr 	NSMSetByte
.a75d	ca		dex				dex
.a75e	20 5b a6	jsr $a65b			jsr 	Int32Divide 				; divide
.a761	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a764	48		pha				pha
.a765	20 0a a6	jsr $a60a			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a768	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; is it zero ?
.a76b	f0 06		beq $a773			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a76d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a770	20 59 a7	jsr $a759			jsr 	_CI32DivideConvert 			; and recusrively call.
.a773					_CI32NoRecurse:
.a773	68		pla				pla 								; remainder
.a774	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a776	90 02		bcc $a77a			bcc 	_CI32NotHex
.a778	69 26		adc #$26			adc 	#6+32
.a77a					_CI32NotHex:
.a77a	69 30		adc #$30			adc 	#48
.a77c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a77f	c8		iny				iny
.a780	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9658					PrecedenceLevel:
>9658	04					.byte	 4	; $00 <<
>9659	02					.byte	 2	; $01 <=
>965a	02					.byte	 2	; $02 <>
>965b	00					.byte	 0	; $03 !!3
>965c	00					.byte	 0	; $04 ><
>965d	02					.byte	 2	; $05 >=
>965e	04					.byte	 4	; $06 >>
>965f	00					.byte	 0	; $07 !!7
>9660	00					.byte	 0	; $08 !!8
>9661	00					.byte	 0	; $09 !!9
>9662	00					.byte	 0	; $0a !!10
>9663	00					.byte	 0	; $0b !!11
>9664	00					.byte	 0	; $0c !!12
>9665	00					.byte	 0	; $0d !!13
>9666	00					.byte	 0	; $0e !!14
>9667	00					.byte	 0	; $0f !!15
>9668	00					.byte	 0	; $10 @
>9669	00					.byte	 0	; $11 !!17
>966a	00					.byte	 0	; $12 !!18
>966b	00					.byte	 0	; $13 [
>966c	04					.byte	 4	; $14 \
>966d	00					.byte	 0	; $15 ]
>966e	01					.byte	 1	; $16 ^
>966f	00					.byte	 0	; $17 _
>9670	00					.byte	 0	; $18 `
>9671	00					.byte	 0	; $19 !!25
>9672	00					.byte	 0	; $1a !!26
>9673	00					.byte	 0	; $1b {
>9674	01					.byte	 1	; $1c |
>9675	00					.byte	 0	; $1d }
>9676	00					.byte	 0	; $1e ~
>9677	00					.byte	 0	; $1f [7m<7F>[m
>9678	00					.byte	 0	; $20
>9679	05					.byte	 5	; $21 !
>967a	00					.byte	 0	; $22 "
>967b	00					.byte	 0	; $23 #
>967c	05					.byte	 5	; $24 $
>967d	04					.byte	 4	; $25 %
>967e	01					.byte	 1	; $26 &
>967f	00					.byte	 0	; $27 '
>9680	00					.byte	 0	; $28 (
>9681	00					.byte	 0	; $29 )
>9682	04					.byte	 4	; $2a *
>9683	03					.byte	 3	; $2b +
>9684	00					.byte	 0	; $2c ,
>9685	03					.byte	 3	; $2d -
>9686	00					.byte	 0	; $2e .
>9687	04					.byte	 4	; $2f /
>9688	00					.byte	 0	; $30 0
>9689	00					.byte	 0	; $31 1
>968a	00					.byte	 0	; $32 2
>968b	00					.byte	 0	; $33 3
>968c	00					.byte	 0	; $34 4
>968d	00					.byte	 0	; $35 5
>968e	00					.byte	 0	; $36 6
>968f	00					.byte	 0	; $37 7
>9690	00					.byte	 0	; $38 8
>9691	00					.byte	 0	; $39 9
>9692	00					.byte	 0	; $3a :
>9693	00					.byte	 0	; $3b ;
>9694	02					.byte	 2	; $3c <
>9695	02					.byte	 2	; $3d =
>9696	02					.byte	 2	; $3e >
>9697	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9698					EvaluateExpressionAt0:
.9698	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.969a					EvaluateExpression:
.969a	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.969c					EvaluateExpressionAtPrecedence:
.969c	48		pha				pha 								; save precedence level
.969d	20 6b 99	jsr $996b			jsr 	EvaluateTerm 				; evaluate term into level X.
.96a0	68		pla				pla 								; restore precedence level.
.96a1					_EXPRLoop:
.96a1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.96a3	b1 30		lda ($30),y			lda 	(codePtr),y
.96a5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.96a7	b0 25		bcs $96ce			bcs 	_EXPRExit
.96a9	da		phx				phx 								; read the operator precedence
.96aa	aa		tax				tax
.96ab	bd 58 96	lda $9658,x			lda 	PrecedenceLevel,x
.96ae	fa		plx				plx
.96af	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.96b1	f0 1b		beq $96ce			beq 	_EXPRExit
.96b3	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.96b5	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.96b7	c5 37		cmp $37				cmp 	zTemp0+1
.96b9	b0 13		bcs $96ce			bcs		_EXPRExit 					; if current >= operator exit
.96bb	48		pha				pha 								; save current precedence.
.96bc	b1 30		lda ($30),y			lda 	(codePtr),y
.96be	c8		iny				iny
.96bf	48		pha				pha
.96c0	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.96c2	e8		inx				inx 								; work out the right hand side.
.96c3	20 9c 96	jsr $969c			jsr 	EvaluateExpressionAtPrecedence
.96c6	ca		dex				dex
.96c7	68		pla				pla 								; get operator, call the code.
.96c8	20 d1 96	jsr $96d1			jsr 	_EXPRCaller
.96cb	68		pla				pla 								; restore precedence level
.96cc	80 d3		bra $96a1			bra 	_EXPRLoop 					; and go round.
.96ce					_EXPRExit:
.96ce	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.96d0	60		rts				rts
.96d1					_EXPRCaller:
.96d1	da		phx				phx 								; save on stack, first thing is to restore it
.96d2	0a		asl a				asl 	a 							; double so can use vectors into X
.96d3	aa		tax				tax
.96d4	7c d8 8e	jmp ($8ed8,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a781					FloatingPointAdd:
.a781	20 22 a9	jsr $a922			jsr 	FloatPrepare 				; prepare for floats
.a784	80 0b		bra $a791			bra 	FloatAdd
.a786					FloatingPointSub:
.a786	20 22 a9	jsr $a922			jsr 	FloatPrepare 				; prepare for floats
.a789					FloatSubtract:
.a789	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a78c	49 80		eor #$80			eor 	#$80
.a78e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a791					FloatAdd:
.a791	48		pha				pha
.a792	5a		phy				phy
.a793	20 33 a9	jsr $a933			jsr 	NSNormalise 				; normalise S[X]
.a796	f0 54		beq $a7ec			beq 	_FAReturn1
.a798	e8		inx				inx 								; normalise S[X+1]
.a799	20 33 a9	jsr $a933			jsr 	NSNormalise
.a79c	ca		dex				dex
.a79d	c9 00		cmp #$00			cmp 	#0
.a79f	f0 6f		beq $a810			beq 	_FAExit 					; if so, just return A
.a7a1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a7a4	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a7a7	f0 1b		beq $a7c4			beq 	_FAExponentsEqual
.a7a9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a7ac	a8		tay				tay
.a7ad	38		sec				sec 								; do a signed comparison of the exponents.
.a7ae	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a7b1	50 02		bvc $a7b5			bvc 	_FANoSignedChange
.a7b3	49 80		eor #$80			eor 	#$80
.a7b5					_FANoSignedChange:
.a7b5	29 80		and #$80			and 	#$80
.a7b7	10 03		bpl $a7bc			bpl 	_FAHaveMax
.a7b9	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a7bc					_FAHaveMax:
.a7bc	20 13 a8	jsr $a813			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a7bf	e8		inx				inx
.a7c0	20 13 a8	jsr $a813			jsr 	_FAShiftToExponent
.a7c3	ca		dex				dex
.a7c4					_FAExponentsEqual:
.a7c4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a7c7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a7ca	30 10		bmi $a7dc			bmi 	_FADifferentSigns
.a7cc	20 86 94	jsr $9486			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a7cf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a7d2	10 3c		bpl $a810			bpl 	_FAExit 					; if no, we are done.
.a7d4	20 6c 9e	jsr $9e6c			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a7d7	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a7da	80 34		bra $a810			bra 	_FAExit
.a7dc					_FADifferentSigns:
.a7dc	20 ac 94	jsr $94ac			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a7df	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a7e2	10 2c		bpl $a810			bpl 	_FAExit 					; if no, we are done.
.a7e4	20 f5 9d	jsr $9df5			jsr 	NSMNegate 					; netate result
.a7e7	20 fe 9d	jsr $9dfe			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a7ea	80 24		bra $a810			bra 	_FAExit
.a7ec					_FAReturn1:
.a7ec	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a7ef	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a7f2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a7f5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7f8	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a7fb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a7fe	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a801	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a804	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a807	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a80a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a80d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a810					_FAExit:
.a810	7a		ply				ply
.a811	68		pla				pla
.a812	60		rts				rts
.a813					_FAShiftToExponent:
.a813					_FAShiftToExponent2:
.a813	98		tya				tya 								; compare Y to exponent
.a814	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a817	f0 08		beq $a821			beq 	_FASEExit 					; exit if so.
.a819	20 6c 9e	jsr $9e6c			jsr 	NSMShiftRight	 			; shift the mantissa right
.a81c	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a81f	80 f2		bra $a813			bra 	_FAShiftToExponent2
.a821					_FASEExit:
.a821	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a822					CompareFloat:
.a822	20 89 a7	jsr $a789			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a825	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a828	29 f8		and #$f8			and 	#$F8
.a82a	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a82d	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a830	f0 09		beq $a83b			beq 	_FCExit 					; zero, so approximately identical
.a832	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a834	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a837	10 02		bpl $a83b			bpl 	_FCExit
.a839					_FCNegative:
.a839	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a83b					_FCExit:
.a83b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a83c					FDivideCommand:
.a83c	fa		plx				plx	 								; restore stack position
.a83d	20 22 a9	jsr $a922			jsr 	FloatPrepare 				; prepare for floats
.a840					FloatDivide:
.a840	48		pha				pha
.a841	e8		inx				inx
.a842	20 33 a9	jsr $a933			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a845	ca		dex				dex
.a846	c9 00		cmp #$00			cmp 	#0
.a848	f0 20		beq $a86a			beq 	_FDZero
.a84a	20 33 a9	jsr $a933			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a84d	f0 19		beq $a868			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a84f	20 7d a6	jsr $a67d			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a852	20 0a a6	jsr $a60a			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a855	20 33 a9	jsr $a933			jsr		NSNormalise 				; renormalise
.a858	20 18 a7	jsr $a718			jsr 	CalculateSign 				; calculate result sign
.a85b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a85e	38		sec				sec
.a85f	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a862	38		sec				sec
.a863	e9 1e		sbc #$1e			sbc 	#30
.a865	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a868					_FDExit:
.a868	68		pla				pla
.a869	60		rts				rts
.a86a					_FDZero:
.a86a	a9 03		lda #$03		lda	#3
.a86c	4c 91 92	jmp $9291		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a86f					FloatFractionalPart:
.a86f	5a		phy				phy
.a870	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a873	29 7f		and #$7f			and 	#$7F
.a875	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a878	20 33 a9	jsr $a933			jsr 	NSNormalise
.a87b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a87e	38		sec				sec
.a87f	e9 e0		sbc #$e0			sbc 	#$E0
.a881	90 31		bcc $a8b4			bcc 	_FFPExit 					; already fractional
.a883	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a885	b0 2a		bcs $a8b1			bcs 	_FFPZero
.a887	a8		tay				tay 								; put count to do in Y
.a888	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a88b	20 b6 a8	jsr $a8b6			jsr 	_FFPPartial
.a88e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a891	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a894	20 b6 a8	jsr $a8b6			jsr 	_FFPPartial
.a897	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a89a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a89d	20 b6 a8	jsr $a8b6			jsr 	_FFPPartial
.a8a0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a8a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a8a6	20 b6 a8	jsr $a8b6			jsr 	_FFPPartial
.a8a9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a8ac	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; zeroed check.
.a8af	d0 03		bne $a8b4			bne 	_FFPExit
.a8b1					_FFPZero:
.a8b1	20 49 9e	jsr $9e49			jsr 	NSMSetZero
.a8b4					_FFPExit:
.a8b4	7a		ply				ply
.a8b5	60		rts				rts
.a8b6					_FFPPartial:
.a8b6	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a8b8	f0 17		beq $a8d1			beq 	_FFFPPExit
.a8ba	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a8bc	b0 0c		bcs $a8ca			bcs 	_FFFPPWholeByte
.a8be	5a		phy				phy
.a8bf					_FFFPPLeft:
.a8bf	0a		asl a				asl 	a
.a8c0	88		dey				dey
.a8c1	d0 fc		bne $a8bf			bne 	_FFFPPLeft
.a8c3	7a		ply				ply
.a8c4					_FFFPPRight:
.a8c4	4a		lsr a				lsr 	a
.a8c5	88		dey				dey
.a8c6	d0 fc		bne $a8c4			bne 	_FFFPPRight
.a8c8	80 07		bra $a8d1			bra 	_FFFPPExit
.a8ca					_FFFPPWholeByte:
.a8ca	98		tya				tya 								; subtract 8 from count
.a8cb	38		sec				sec
.a8cc	e9 08		sbc #$08			sbc 	#8
.a8ce	a8		tay				tay
.a8cf	a9 00		lda #$00			lda 	#0 							; and clear all
.a8d1					_FFFPPExit:
.a8d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a8d2					FloatIntegerPart:
.a8d2	48		pha				pha
.a8d3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a8d6	f0 1f		beq $a8f7			beq 	_FIPExit 					; if so do nothing
.a8d8	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; is it zero ?
.a8db	f0 17		beq $a8f4			beq 	_FIPZero 					; if so return zero.
.a8dd	20 33 a9	jsr $a933			jsr 	NSNormalise 				; normalise
.a8e0	f0 12		beq $a8f4			beq 	_FIPZero 					; normalised to zero, exit zero
.a8e2					_FIPShift:
.a8e2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a8e5	10 08		bpl $a8ef			bpl 	_FIPCheckZero
.a8e7	20 6c 9e	jsr $9e6c			jsr 	NSMShiftRight 				; shift mantissa right
.a8ea	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a8ed	80 f3		bra $a8e2			bra 	_FIPShift
.a8ef					_FIPCheckZero:
.a8ef	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; avoid -0 problem
.a8f2	d0 03		bne $a8f7			bne 	_FIPExit 					; set to zero if mantissa zero.
.a8f4					_FIPZero:
.a8f4	20 49 9e	jsr $9e49			jsr 	NSMSetZero
.a8f7					_FIPExit:
.a8f7	68		pla				pla
.a8f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a8f9					FloatingPointMultiply:
.a8f9	20 22 a9	jsr $a922			jsr 	FloatPrepare 				; prepare for floats
.a8fc					FloatMultiply:
.a8fc	48		pha				pha
.a8fd	20 33 a9	jsr $a933			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a900	f0 1b		beq $a91d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a902	e8		inx				inx
.a903	20 33 a9	jsr $a933			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a906	ca		dex				dex
.a907	c9 00		cmp #$00			cmp 	#0
.a909	f0 0f		beq $a91a			beq 	_FDSetZero
.a90b	20 d3 a6	jsr $a6d3			jsr 	MultiplyShort 				; calculate the result.
.a90e	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a911	18		clc				clc
.a912	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a915	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a918	80 03		bra $a91d			bra 	_FDExit
.a91a					_FDSetZero:
.a91a	20 49 9e	jsr $9e49			jsr 	NSMSetZero 					; return 0
.a91d					_FDExit:
.a91d	20 33 a9	jsr $a933			jsr 	NSNormalise 				; normalise the result
.a920	68		pla				pla
.a921	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a922					FloatPrepare:
.a922	20 aa 97	jsr $97aa			jsr 	DereferenceTopTwo 			; dereference the top two values
.a925	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a928	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a92b	29 10		and #$10			and 	#NSBIsString
.a92d	d0 01		bne $a930			bne 	_FDType
.a92f	60		rts				rts
.a930					_FDType:
.a930	4c ba ab	jmp $abba			jmp 	TypeError
.a933					NSNormalise:
.a933	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a936	29 80		and #$80			and 	#$80
.a938	09 08		ora #$08			ora 	#NSTFloat
.a93a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a93d	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; if zero exit
.a940	d0 09		bne $a94b			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a942	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a945	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a948	a9 00		lda #$00			lda 	#0 							; set Z flag
.a94a	60		rts				rts
.a94b					_NSNormaliseOptimise:
.a94b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a94e	d0 22		bne $a972			bne 	_NSNormaliseLoop
.a950	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a953	30 1d		bmi $a972			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a955	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a958	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a95b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a95e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a961	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a964	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a967	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a96a	38		sec				sec
.a96b	e9 08		sbc #$08			sbc 	#8
.a96d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a970	80 d9		bra $a94b			bra 	_NSNormaliseOptimise
.a972					_NSNormaliseLoop:
.a972	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a975	70 08		bvs $a97f			bvs 	_NSNExit 					; exit if so with Z flag clear
.a977	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; shift mantissa left
.a97a	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a97d	80 f3		bra $a972			bra 	_NSNormaliseLoop
.a97f					_NSNExit:
.a97f	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a981	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.96d7					AssignNumber:
.96d7	5a		phy				phy
.96d8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.96db	85 36		sta $36				sta 	zTemp0
.96dd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96e0	85 37		sta $37				sta 	zTemp0+1
.96e2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.96e5	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.96e7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96ea	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.96ec	c9 08		cmp #$08			cmp 	#NSTFloat
.96ee	f0 2a		beq $971a			beq 	_ANFloat
.96f0	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.96f3	f0 05		beq $96fa			beq		_ANNotFloat
.96f5	e8		inx				inx
.96f6	20 d2 a8	jsr $a8d2			jsr 	FloatIntegerPart 			; make it an integer
.96f9	ca		dex				dex
.96fa					_ANNotFloat:
.96fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.96fd	29 03		and #$03			and 	#3
.96ff	d0 05		bne $9706			bne 	_ANByteWord
.9701	20 26 97	jsr $9726			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9704	80 1e		bra $9724			bra 	_ANExit
.9706					_ANByteWord:
.9706	48		pha				pha 								; save count
.9707	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.970a	92 36		sta ($36)			sta 	(zTemp0)
.970c	68		pla				pla
.970d	c9 01		cmp #$01			cmp	 	#1
.970f	f0 13		beq $9724			beq 	_ANExit
.9711	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9714	a0 01		ldy #$01			ldy 	#1
.9716	91 36		sta ($36),y			sta 	(zTemp0),y
.9718	80 0a		bra $9724			bra 	_ANExit
.971a					_ANFloat:
.971a	20 26 97	jsr $9726			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.971d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9720	a0 04		ldy #$04			ldy 	#4
.9722	91 36		sta ($36),y			sta 	(zTemp0),y
.9724					_ANExit:
.9724	7a		ply				ply
.9725	60		rts				rts
.9726					_ANCopy4PackSign:
.9726	a0 03		ldy #$03			ldy 	#3
.9728	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.972b	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.972d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9730	91 36		sta ($36),y			sta 	(zTemp0),y
.9732	88		dey				dey
.9733	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9736	91 36		sta ($36),y			sta 	(zTemp0),y
.9738	88		dey				dey
.9739	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.973c	91 36		sta ($36),y			sta 	(zTemp0),y
.973e	88		dey				dey
.973f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9742	91 36		sta ($36),y			sta 	(zTemp0),y
.9744	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9745					AssignString:
.9745	5a		phy				phy
.9746	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9749	85 38		sta $38				sta 	zTemp1
.974b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.974e	85 39		sta $39				sta 	zTemp1+1
.9750	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9753	85 36		sta $36				sta 	zTemp0
.9755	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9758	85 37		sta $37				sta 	zTemp0+1
.975a	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.975c	b1 36		lda ($36),y			lda 	(zTemp0),y
.975e	f0 23		beq $9783			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9760	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9761	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9763	e9 02		sbc #$02			sbc 	#2
.9765	85 3c		sta $3c				sta 	zsTemp
.9767	a0 01		ldy #$01			ldy 	#1
.9769	b1 36		lda ($36),y			lda 	(zTemp0),y
.976b	e9 00		sbc #$00			sbc 	#0
.976d	85 3d		sta $3d				sta 	zsTemp+1
.976f	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9771					_ASGetLength:
.9771	c8		iny				iny
.9772	b1 38		lda ($38),y			lda 	(zTemp1),y
.9774	d0 fb		bne $9771			bne 	_ASGetLength
.9776	98		tya				tya 								; is this length <= current length
.9777	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9779	90 20		bcc $979b			bcc 	_ASCopyString
.977b	f0 1e		beq $979b			beq 	_ASCopyString
.977d	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.977f	a0 01		ldy #$01			ldy 	#1
.9781	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9783					_ASNewStringRequired:
.9783	e8		inx				inx 								; concrete the new string.
.9784	20 55 ae	jsr $ae55			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9787	ca		dex				dex
.9788	18		clc				clc
.9789	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.978c	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.978e	92 36		sta ($36)			sta 	(zTemp0)
.9790	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9793	69 00		adc #$00			adc 	#0
.9795	a0 01		ldy #$01			ldy 	#1
.9797	91 36		sta ($36),y			sta 	(zTemp0),y
.9799	80 0d		bra $97a8			bra 	_ASExit
.979b					_ASCopyString:
.979b	a0 00		ldy #$00			ldy 	#0
.979d					_ASCopyLoop:
.979d	b1 38		lda ($38),y			lda 	(zTemp1),y
.979f	c8		iny				iny
.97a0	c8		iny				iny
.97a1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.97a3	88		dey				dey
.97a4	c9 00		cmp #$00			cmp 	#0
.97a6	d0 f5		bne $979d			bne 	_ASCopyLoop
.97a8					_ASExit:
.97a8	7a		ply				ply
.97a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.97aa					DereferenceTopTwo:
.97aa	e8		inx				inx
.97ab	20 af 97	jsr $97af			jsr 	Dereference 				; deref x+1
.97ae	ca		dex				dex  								; falls through to deref x
.97af					Dereference:
.97af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.97b2	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.97b4	f0 57		beq $980d			beq 	_DRFExit 					; not a reference
.97b6	5a		phy				phy
.97b7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.97ba	85 36		sta $36				sta 	zTemp0
.97bc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97bf	85 37		sta $37				sta 	zTemp0+1
.97c1	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.97c4	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.97c6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97c9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.97cc	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.97ce	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.97d0	f0 0f		beq $97e1			beq 	_DRFDereferenceTwo
.97d2	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.97d4	f0 39		beq $980f			beq 	_DRFFull
.97d6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.97d9	29 03		and #$03			and 	#3
.97db	f0 32		beq $980f			beq 	_DRFFull 					; the whole word
.97dd	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.97df	f0 07		beq $97e8			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.97e1					_DRFDereferenceTwo:
.97e1	a0 01		ldy #$01			ldy 	#1
.97e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.97e5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97e8					_DRFClear23:
.97e8	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.97eb	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.97ee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.97f1	29 18		and #$18			and 	#NSBTypeMask
.97f3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97f6	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.97f8	d0 12		bne $980c			bne 	_DRFNotString
.97fa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.97fd	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9800	d0 0a		bne $980c			bne 	_DRFNotString
.9802	a9 0e		lda #$0e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9804	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9807	a9 98		lda #$98			lda 	#_DRFNullString >> 8
.9809	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.980c					_DRFNotString
.980c	7a		ply				ply 								; restore Y and exit
.980d					_DRFExit:
.980d	60		rts				rts
.980e					_DRFNullString:
>980e	00						.byte 	0
.980f					_DRFFull:
.980f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9811	b1 36		lda ($36),y			lda 	(zTemp0),y
.9813	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9816	c8		iny				iny
.9817	b1 36		lda ($36),y			lda 	(zTemp0),y
.9819	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.981c	c8		iny				iny
.981d	b1 36		lda ($36),y			lda 	(zTemp0),y
.981f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9822	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9825	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9828	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.982a	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.982d	f0 06		beq $9835			beq 	_DRFNoExponent
.982f	c8		iny				iny 								; if not, read the exponent as well.
.9830	b1 36		lda ($36),y			lda 	(zTemp0),y
.9832	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9835					_DRFNoExponent:
.9835	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9838	10 0d		bpl $9847			bpl 	_DRFExit2 					; if not, then exit.
.983a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.983c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.983f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9842	09 80		ora #$80			ora 	#NSBIsNegative
.9844	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9847					_DRFExit2:
.9847	7a		ply				ply
.9848	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9849					EncodeNumberStart:
.9849	38		sec				sec
.984a	80 01		bra $984d			bra 	EncodeNumberContinue+1
.984c					EncodeNumberContinue:
.984c	18		clc				clc
.984d					EncodeNumber:
.984d	08		php				php 								; save reset.
.984e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9850	f0 12		beq $9864			beq 	_ENIsOkay
.9852	c9 30		cmp #$30			cmp 	#"0"
.9854	90 04		bcc $985a			bcc 	_ENBadNumber
.9856	c9 3a		cmp #$3a			cmp 	#"9"+1
.9858	90 0a		bcc $9864			bcc 	_ENIsOkay
.985a					_ENBadNumber:
.985a	28		plp				plp 								; throw saved reset
.985b	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.985e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9860	f0 7e		beq $98e0			beq 	_ENConstructFinal
.9862					_ENFail:
.9862	18		clc				clc 								; not allowed
.9863	60		rts				rts
.9864					_ENIsOkay:
.9864	28		plp				plp 								; are we restarting
.9865	90 15		bcc $987c			bcc 	_ENNoRestart
.9867					_ENStartEncode:
.9867	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9869	f0 0c		beq $9877			beq 	_ENFirstDP
.986b	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.986d	20 4b 9e	jsr $9e4b			jsr 	NSMSetByte
.9870	a9 01		lda #$01			lda 	#ESTA_Low
.9872					_ENExitChange:
.9872	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9875	38		sec				sec
.9876	60		rts				rts
.9877					_ENFirstDP:
.9877	20 49 9e	jsr $9e49			jsr 	NSMSetZero 					; clear integer part
.987a	80 3f		bra $98bb			bra 	_ESTASwitchFloat			; go straight to float and exi
.987c					_ENNoRestart:
.987c	48		pha				pha 								; save on stack.
.987d	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9880	c9 01		cmp #$01			cmp 	#ESTA_Low
.9882	f0 09		beq $988d			beq  	_ESTALowState
.9884	c9 02		cmp #$02			cmp 	#ESTA_High
.9886	f0 29		beq $98b1			beq 	_ESTAHighState
.9888	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.988a	f0 3b		beq $98c7			beq 	_ESTADecimalState
>988c	db						.byte 	$DB 						; causes a break in the emulator
.988d					_ESTALowState:
.988d	68		pla				pla 								; get value back
.988e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9890	f0 29		beq $98bb			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9892	29 0f		and #$0f			and 	#15 						; make digit
.9894	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9897	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.989a	0a		asl a				asl 	a
.989b	0a		asl a				asl 	a
.989c	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.989f	0a		asl a				asl 	a
.98a0	6d 86 04	adc $0486			adc 	DigitTemp
.98a3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.98a8	90 05		bcc $98af			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.98aa	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.98ac	8d 85 04	sta $0485			sta 	EncodeState
.98af					_ESTANoSwitch:
.98af	38		sec				sec
.98b0	60		rts				rts
.98b1					_ESTAHighState:
.98b1	68		pla				pla 								; get value back
.98b2	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.98b4	f0 05		beq $98bb			beq 	_ESTASwitchFloat
.98b6	20 1a 99	jsr $991a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.98b9	38		sec				sec
.98ba	60		rts				rts
.98bb					_ESTASwitchFloat:
.98bb	9c 87 04	stz $0487			stz 	DecimalCount
.98be	e8		inx				inx 								; zero the decimal additive.
.98bf	20 49 9e	jsr $9e49			jsr 	NSMSetZero
.98c2	ca		dex				dex
.98c3	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.98c5	80 ab		bra $9872			bra 	_ENExitChange
.98c7					_ESTADecimalState:
.98c7	68		pla				pla 								; digit.
.98c8	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.98ca	f0 96		beq $9862			beq 	_ENFail
.98cc	e8		inx				inx 								; put digit into fractional part of X+1
.98cd	20 1a 99	jsr $991a			jsr 	ESTAShiftDigitIntoMantissa
.98d0	ca		dex				dex
.98d1	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.98d4	ad 87 04	lda $0487			lda 	DecimalCount
.98d7	c9 0b		cmp #$0b			cmp 	#11
.98d9	f0 02		beq $98dd			beq 	_ESTADSFail
.98db	38		sec				sec
.98dc	60		rts				rts
.98dd					_ESTADSFail:
.98dd	4c b5 ab	jmp $abb5			jmp 	RangeError
.98e0					_ENConstructFinal:
.98e0	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.98e3	f0 33		beq $9918			beq 	_ENCFExit 					; no decimals
.98e5	5a		phy				phy
.98e6	0a		asl a				asl 	a 							; x 4 and CLC
.98e7	0a		asl a				asl 	a
.98e8	6d 87 04	adc $0487			adc 	DecimalCount
.98eb	a8		tay				tay
.98ec	b9 74 ab	lda $ab74,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.98ef	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.98f2	b9 75 ab	lda $ab75,y			lda 	DecimalScalarTable-5+1,y
.98f5	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.98f8	b9 76 ab	lda $ab76,y			lda 	DecimalScalarTable-5+2,y
.98fb	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.98fe	b9 77 ab	lda $ab77,y			lda 	DecimalScalarTable-5+3,y
.9901	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9904	b9 78 ab	lda $ab78,y			lda 	DecimalScalarTable-5+4,y
.9907	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.990a	a9 08		lda #$08			lda 	#NSTFloat
.990c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.990f	7a		ply				ply
.9910	e8		inx				inx 								; multiply decimal const by decimal scalar
.9911	20 fc a8	jsr $a8fc			jsr 	FloatMultiply
.9914	ca		dex				dex
.9915	20 91 a7	jsr $a791			jsr 	FloatAdd 					; add to integer part.
.9918					_ENCFExit:
.9918	18		clc				clc 								; reject the digit.
.9919	60		rts				rts
.991a					ESTAShiftDigitIntoMantissa:
.991a	29 0f		and #$0f			and 	#15 						; save digit
.991c	48		pha				pha
.991d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9920	48		pha				pha
.9921	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9924	48		pha				pha
.9925	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9928	48		pha				pha
.9929	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.992c	48		pha				pha
.992d	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; x 2
.9930	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; x 4
.9933	18		clc				clc 								; pop mantissa and add
.9934	68		pla				pla
.9935	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9938	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.993b	68		pla				pla
.993c	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.993f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9942	68		pla				pla
.9943	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9946	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9949	68		pla				pla
.994a	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.994d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9950	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; x 10
.9953	68		pla				pla 								; add digit
.9954	18		clc				clc
.9955	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9958	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.995b	90 0d		bcc $996a			bcc 	_ESTASDExit
.995d	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9960	d0 08		bne $996a			bne 	_ESTASDExit
.9962	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9965	d0 03		bne $996a			bne 	_ESTASDExit
.9967	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.996a					_ESTASDExit:
.996a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.996b					EvaluateTerm:
.996b	b1 30		lda ($30),y			lda 	(codePtr),y
.996d	30 18		bmi $9987			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.996f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9971	b0 6f		bcs $99e2			bcs 	_ETVariable
.9973	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9975	90 6e		bcc $99e5			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9977	c9 3a		cmp #$3a			cmp 	#'9'+1
.9979	b0 6a		bcs $99e5			bcs 	_ETPuncUnary
.997b	20 49 98	jsr $9849			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.997e					_ETNumber:
.997e	c8		iny				iny 								; keep encoding until we have the numbers
.997f	b1 30		lda ($30),y			lda 	(codePtr),y
.9981	20 4c 98	jsr $984c			jsr 	EncodeNumberContinue
.9984	b0 f8		bcs $997e			bcs 	_ETNumber 					; go back if accepted.
.9986	60		rts				rts
.9987					_ETCheckUnary:
.9987	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9989	f0 41		beq $99cc			beq 	_ETString
.998b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.998d	f0 12		beq $99a1			beq 	_ETHexConstant
.998f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9991	90 0b		bcc $999e			bcc 	_ETSyntaxError
.9993	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9995	b0 07		bcs $999e			bcs 	_ETSyntaxError
.9997	da		phx				phx 								; push X on the stack
.9998	0a		asl a				asl 	a 							; put vector x 2 into X
.9999	aa		tax				tax
.999a	c8		iny				iny 								; consume unary function token
.999b	7c 58 8f	jmp ($8f58,x)			jmp 	(VectorSet0,x) 				; and do it.
.999e					_ETSyntaxError:
.999e	4c b0 ab	jmp $abb0			jmp 	SyntaxError
.99a1					_ETHexConstant:
.99a1	c8		iny				iny 								; skip #
.99a2	c8		iny				iny 								; skip count
.99a3	20 49 9e	jsr $9e49			jsr 	NSMSetZero 					; clear result
.99a6					_ETHLoop:
.99a6	b1 30		lda ($30),y			lda 	(codePtr),y
.99a8	c8		iny				iny 								; and consume
.99a9	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.99ab	f0 1e		beq $99cb			beq 	_ETHExit
.99ad	48		pha				pha 								; save on stack.
.99ae	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; x 2
.99b1	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; x 4
.99b4	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; x 8
.99b7	20 5e 9e	jsr $9e5e			jsr 	NSMShiftLeft 				; x 16
.99ba	68		pla				pla 								; ASCII
.99bb	c9 41		cmp #$41			cmp 	#'A'
.99bd	90 02		bcc $99c1			bcc 	_ETHNotChar
.99bf	e9 07		sbc #$07			sbc 	#7
.99c1					_ETHNotChar:
.99c1	29 0f		and #$0f			and 	#15 						; digit now
.99c3	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.99c6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99c9	80 db		bra $99a6			bra 	_ETHLoop 					; go round.
.99cb					_ETHExit:
.99cb	60		rts				rts
.99cc					_ETString:
.99cc	c8		iny				iny 								; look at length
.99cd	b1 30		lda ($30),y			lda 	(codePtr),y
.99cf	48		pha				pha
.99d0	c8		iny				iny 								; first character
.99d1	20 93 9e	jsr $9e93			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.99d4	68		pla				pla 								; restore count and save
.99d5	85 36		sta $36				sta 	zTemp0
.99d7	98		tya				tya 								; add length to Y to skip it.
.99d8	18		clc				clc
.99d9	65 36		adc $36				adc 	zTemp0
.99db	a8		tay				tay
.99dc	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.99de	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99e1	60		rts				rts
.99e2					_ETVariable:
.99e2	4c 3c 9a	jmp $9a3c			jmp 	VariableHandler
.99e5					_ETPuncUnary:
.99e5	c8		iny				iny 								; consume the unary character
.99e6	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.99e8	f0 2d		beq $9a17			beq 	_ETUnaryNegate
.99ea	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.99ec	f0 39		beq $9a27			beq 	_ETDereference
.99ee	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.99f0	f0 43		beq $9a35			beq 	_ETParenthesis
.99f2	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.99f4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.99f6	f0 06		beq $99fe			beq 	_ETIndirection
.99f8	e6 36		inc $36				inc 	zTemp0
.99fa	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.99fc	d0 a0		bne $999e			bne 	_ETSyntaxError
.99fe					_ETIndirection:
.99fe	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9a00	1a		inc a				inc 	a
.9a01	48		pha				pha
.9a02	20 6b 99	jsr $996b			jsr 	EvaluateTerm				; evaluate the term
.9a05	20 af 97	jsr $97af			jsr 	Dereference 				; dereference it.
.9a08	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9a0b	d0 07		bne $9a14			bne 	_ETTypeMismatch
.9a0d	68		pla				pla 								; indirection 1-2
.9a0e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9a10	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a13	60		rts				rts
.9a14					_ETTypeMismatch:
.9a14	4c ba ab	jmp $abba			jmp 	TypeError
.9a17					_ETUnaryNegate:
.9a17	20 6b 99	jsr $996b			jsr 	EvaluateTerm				; evaluate the term
.9a1a	20 af 97	jsr $97af			jsr 	Dereference 				; dereference it.
.9a1d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9a20	29 10		and #$10			and 	#NSTString
.9a22	d0 f0		bne $9a14			bne 	_ETTypeMismatch
.9a24	4c f5 9d	jmp $9df5			jmp 	NSMNegate  					; just toggles the sign bit.
.9a27					_ETDereference:
.9a27	20 6b 99	jsr $996b			jsr 	EvaluateTerm				; evaluate the term
.9a2a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9a2d	29 20		and #$20			and 	#NSBIsReference
.9a2f	f0 e3		beq $9a14			beq 	_ETTypeMismatch
.9a31	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9a34	60		rts				rts
.9a35					_ETParenthesis:
.9a35	20 9a 96	jsr $969a			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9a38	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket 			; check for )
.9a3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9a3c					VariableHandler:
.9a3c	b1 30		lda ($30),y			lda 	(codePtr),y
.9a3e	18		clc				clc
.9a3f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9a41	85 37		sta $37				sta 	zTemp0+1
.9a43	c8		iny				iny
.9a44	b1 30		lda ($30),y			lda 	(codePtr),y
.9a46	85 36		sta $36				sta 	zTemp0
.9a48	c8		iny				iny
.9a49	18		clc				clc									; copy variable address+3 to mantissa
.9a4a	69 03		adc #$03			adc 	#3
.9a4c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a4f	a5 37		lda $37				lda 	zTemp0+1
.9a51	69 00		adc #$00			adc 	#0
.9a53	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a56	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9a59	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9a5c	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9a5f	5a		phy				phy
.9a60	a0 02		ldy #$02			ldy 	#2 							; read type
.9a62	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a64	7a		ply				ply
.9a65	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9a67	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9a69	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a6c	29 04		and #$04			and 	#NSBIsArray
.9a6e	d0 01		bne $9a71			bne 	_VHArray
.9a70	60		rts				rts
.9a71					_VHArray:
.9a71	e8		inx				inx
.9a72	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9a75	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9a77	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9a7a	b1 30		lda ($30),y			lda 	(codePtr),y
.9a7c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9a7e	d0 06		bne $9a86			bne 	_VHNoSecondIndex
.9a80	c8		iny				iny 								; skip the comma
.9a81	e8		inx				inx
.9a82	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9a85	ca		dex				dex
.9a86					_VHNoSecondIndex:
.9a86	ca		dex				dex 								; set X back.
.9a87	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket 			; and check the right bracket.
.9a8a	5a		phy				phy 								; save position
.9a8b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9a8e	85 3e		sta $3e				sta 	zaTemp
.9a90	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a93	85 3f		sta $3f				sta 	zaTemp+1
.9a95	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9a97	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a99	f0 02		beq $9a9d			beq 	_VHHas2Mask
.9a9b	a9 ff		lda #$ff			lda 	#$FF
.9a9d					_VHHas2Mask:
.9a9d	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9aa0	f0 54		beq $9af6			beq 	_VHBadIndex
.9aa2	0a		asl a				asl 	a 							; carry will be set if a second index
.9aa3	90 09		bcc $9aae			bcc 	_VHCheckFirstIndex
.9aa5	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9aa7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9aa9	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9aac	90 48		bcc $9af6			bcc 	_VHBadIndex
.9aae					_VHCheckFirstIndex:
.9aae	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9ab0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ab2	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9ab5	90 3f		bcc $9af6			bcc 	_VHBadIndex
.9ab7	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9ab9	64 37		stz $37				stz 	zTemp0+1
.9abb	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9abe	30 0f		bmi $9acf			bmi 	_VHNoMultiply
.9ac0	da		phx				phx
.9ac1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9ac4	48		pha				pha
.9ac5	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9ac7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ac9	1a		inc a				inc 	a 							; add 1 for zero base
.9aca	fa		plx				plx
.9acb	20 4c aa	jsr $aa4c			jsr 	Multiply8x8 				; calculate -> Z0
.9ace	fa		plx				plx
.9acf					_VHNoMultiply:
.9acf	18		clc				clc
.9ad0	a5 36		lda $36				lda 	zTemp0
.9ad2	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ad5	85 36		sta $36				sta 	zTemp0
.9ad7	a5 37		lda $37				lda 	zTemp0+1
.9ad9	69 00		adc #$00			adc 	#0
.9adb	85 37		sta $37				sta 	zTemp0+1
.9add	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ae0	20 bd 89	jsr $89bd			jsr 	ScaleByBaseType
.9ae3	18		clc				clc
.9ae4	b2 3e		lda ($3e)			lda 	(zaTemp)
.9ae6	65 36		adc $36				adc 	zTemp0
.9ae8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9aeb	a0 01		ldy #$01			ldy 	#1
.9aed	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9aef	65 37		adc $37				adc 	zTemp0+1
.9af1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9af4	7a		ply				ply 								; restore position
.9af5	60		rts				rts
.9af6					_VHBadIndex:
.9af6	a9 17		lda #$17		lda	#23
.9af8	4c 91 92	jmp $9291		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a982					AbsUnary:
.a982	fa		plx				plx 								; restore stack pos
.a983	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber 				; get a float or int
.a986	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.a989	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a98c	29 7f		and #$7f			and 	#$7F
.a98e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a991	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9afb					AllocUnary:
.9afb	fa		plx				plx 								; restore stack pos
.9afc	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger		; get bytes required.
.9aff	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.9b02	da		phx				phx 								; save X/Y
.9b03	5a		phy				phy
.9b04	8a		txa				txa 								; copy X into Y
.9b05	a8		tay				tay
.9b06	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9b09	aa		tax				tax
.9b0a	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9b0d	20 1a 9b	jsr $9b1a			jsr 	AllocateXABytes 			; allocate memory
.9b10	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9b13	8a		txa				txa
.9b14	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9b17	7a		ply				ply
.9b18	fa		plx				plx
.9b19	60		rts				rts
.9b1a					AllocateXABytes:
.9b1a	5a		phy				phy
.9b1b	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9b1e	84 36		sty $36				sty 	zTemp0
.9b20	5a		phy				phy
.9b21	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9b24	84 37		sty $37				sty 	zTemp0+1
.9b26	5a		phy				phy
.9b27	18		clc				clc 								; add to low memory pointer
.9b28	6d 8c 04	adc $048c			adc 	lowMemPtr
.9b2b	8d 8c 04	sta $048c			sta 	lowMemPtr
.9b2e	8a		txa				txa
.9b2f	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9b32	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9b35	b0 2f		bcs $9b66			bcs 	CISSMemory
.9b37	20 58 9b	jsr $9b58			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9b3a					_ClearMemory:
.9b3a	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9b3d	c5 36		cmp $36				cmp 	zTemp0
.9b3f	d0 07		bne $9b48			bne 	_CMClearNext
.9b41	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9b44	c5 37		cmp $37				cmp 	zTemp0+1
.9b46	f0 0c		beq $9b54			beq 	_CMExit
.9b48					_CMClearNext:
.9b48	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9b4a	92 36		sta ($36)			sta 	(zTemp0)
.9b4c	e6 36		inc $36				inc 	zTemp0
.9b4e	d0 ea		bne $9b3a			bne 	_ClearMemory
.9b50	e6 37		inc $37				inc		zTemp0+1
.9b52	80 e6		bra $9b3a			bra 	_ClearMemory
.9b54					_CMExit:
.9b54	fa		plx				plx
.9b55	68		pla				pla
.9b56	7a		ply				ply
.9b57	60		rts				rts
.9b58					CheckIdentifierStringSpace:
.9b58	48		pha				pha
.9b59	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9b5c	18		clc				clc
.9b5d	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9b5f	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9b62	b0 02		bcs $9b66			bcs 	CISSMemory
.9b64	68		pla				pla
.9b65	60		rts				rts
.9b66					CISSMemory:
.9b66	a9 06		lda #$06		lda	#6
.9b68	4c 91 92	jmp $9291		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a992					AscUnary:
.a992	fa		plx				plx 								; restore stack pos
.a993	20 a8 9d	jsr $9da8			jsr 	EvaluateString 				; get a string
.a996	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a998	20 4b 9e	jsr $9e4b			jsr 	NSMSetByte
.a99b	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.a99e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a99f					FracUnary:
.a99f	fa		plx				plx 								; restore stack pos
.a9a0	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber 				; get a float or int
.a9a3	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.a9a6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a9a9	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a9ab	f0 04		beq $a9b1			beq 	_IUZero
.a9ad	20 6f a8	jsr $a86f			jsr 	FloatFractionalPart
.a9b0	60		rts				rts
.a9b1					_IUZero:
.a9b1	20 49 9e	jsr $9e49			jsr 	NSMSetZero
.a9b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a9b5					IntUnary:
.a9b5	fa		plx				plx 								; restore stack pos
.a9b6	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber 				; get a float or int
.a9b9	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.a9bc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a9bf	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a9c1	f0 03		beq $a9c6			beq 	_IUExit
.a9c3	20 d2 a8	jsr $a8d2			jsr 	FloatIntegerPart
.a9c6					_IUExit:
.a9c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a9c7					LenUnary:
.a9c7	fa		plx				plx 								; restore stack pos
.a9c8	20 a8 9d	jsr $9da8			jsr 	EvaluateString 				; get a string
.a9cb	5a		phy				phy
.a9cc	a0 00		ldy #$00			ldy 	#0 							; find length
.a9ce					_LenFind:
.a9ce	b1 36		lda ($36),y			lda 	(zTemp0),y
.a9d0	f0 06		beq $a9d8			beq 	_LenExit
.a9d2	c8		iny				iny
.a9d3	d0 f9		bne $a9ce			bne 	_LenFind
.a9d5	4c b5 ab	jmp $abb5			jmp 	RangeError 					; string > 255
.a9d8					_LenExit:
.a9d8	98		tya				tya
.a9d9	20 4b 9e	jsr $9e4b			jsr 	NSMSetByte
.a9dc	7a		ply				ply
.a9dd	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.a9e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b6b					Unary_Not:
.9b6b	fa		plx				plx
.9b6c	20 c0 9d	jsr $9dc0			jsr 	EvaluateInteger 			; get integer
.9b6f	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.9b72	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; zero mantissa ?
.9b75	f0 04		beq $9b7b			beq 	_NotZero
.9b77	20 49 9e	jsr $9e49			jsr 	NSMSetZero
.9b7a	60		rts				rts
.9b7b					_NotZero:
.9b7b	4c fe 92	jmp $92fe			jmp 	ReturnTrue
.9b7e					_UNBad:
.9b7e	4c bf ab	jmp $abbf			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b81					Unary_Random:
.9b81	fa		plx				plx
.9b82	20 fa 9b	jsr $9bfa			jsr 	Random32Bit 				; get a random number
.9b85	20 df 9b	jsr $9bdf			jsr 	URCopyToMantissa  			; put in mantissa
.9b88	e8		inx				inx
.9b89	20 d5 9d	jsr $9dd5			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b8c	ca		dex				dex
.9b8d	20 4e a6	jsr $a64e			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9b90	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9b93	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9b96	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.9b99	60		rts				rts
.9b9a					Unary_Rnd:
.9b9a	fa		plx				plx
.9b9b	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber 				; number to use.
.9b9e	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket 			; closing bracket
.9ba1	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ba4	f0 2b		beq $9bd1			beq 	_URCopySeed
.9ba6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ba9	10 23		bpl $9bce			bpl 	_URDontSeed
.9bab	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9bae	49 17		eor #$17			eor 	#$17
.9bb0	8d 88 04	sta $0488			sta 	RandomSeed+0
.9bb3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bb6	49 a5		eor #$a5			eor 	#$A5
.9bb8	8d 89 04	sta $0489			sta 	RandomSeed+1
.9bbb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9bbe	49 c2		eor #$c2			eor 	#$C2
.9bc0	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9bc3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9bc6	49 9d		eor #$9d			eor 	#$9D
.9bc8	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9bcb	20 fa 9b	jsr $9bfa			jsr 	Random32Bit
.9bce					_URDontSeed:
.9bce	20 fa 9b	jsr $9bfa			jsr 	Random32Bit 				; generate a number.
.9bd1					_URCopySeed:
.9bd1	20 df 9b	jsr $9bdf			jsr 	URCopyToMantissa 			; copy into mantissa
.9bd4	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9bd6	8d 28 04	sta $0428			sta 	NSExponent
.9bd9	a9 08		lda #$08			lda 	#NSTFloat
.9bdb	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9bde	60		rts				rts
.9bdf					URCopyToMantissa:
.9bdf	ad 88 04	lda $0488			lda 	RandomSeed+0
.9be2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9be5	ad 89 04	lda $0489			lda 	RandomSeed+1
.9be8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9beb	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9bee	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bf1	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9bf4	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9bf6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bf9	60		rts				rts
.9bfa					Random32Bit:
.9bfa	5a		phy				phy
.9bfb	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9bfd	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9c00	d0 03		bne $9c05			bne 	_Random1
.9c02	a8		tay				tay 								; if so do it 256 times
.9c03	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9c05					_Random1:
.9c05	0a		asl a				asl 	a 							; LSFR RNG
.9c06	2e 89 04	rol $0489			rol 	RandomSeed+1
.9c09	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9c0c	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9c0f	90 02		bcc $9c13			bcc 	_Random2
.9c11	49 c5		eor #$c5			eor 	#$C5
.9c13					_Random2:
.9c13	88		dey				dey
.9c14	d0 ef		bne $9c05			bne 	_Random1
.9c16	8d 88 04	sta $0488			sta 	RandomSeed+0
.9c19	7a		ply				ply
.9c1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a9e1					SgnUnary:
.a9e1	fa		plx				plx 								; restore stack pos
.a9e2	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber 				; get a float or int
.a9e5	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.a9e8	20 79 9e	jsr $9e79			jsr 	NSMIsZero 					; if zero
.a9eb	f0 10		beq $a9fd			beq 	_SGZero  					; return Int Zero
.a9ed	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a9f0	48		pha				pha
.a9f1	a9 01		lda #$01			lda 	#1 							; set to 1
.a9f3	20 4b 9e	jsr $9e4b			jsr 	NSMSetByte
.a9f6	68		pla				pla
.a9f7	29 80		and #$80			and		#$80 						; copy the sign byte out
.a9f9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9fc	60		rts				rts
.a9fd	20 49 9e	jsr $9e49	_SGZero:jsr 	NSMSetZero
.aa00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.aa01					ValUnary:
.aa01	fa		plx				plx 								; restore stack pos
.aa02	20 17 aa	jsr $aa17			jsr 	ValMainCode 				; do the main val() code
.aa05	b0 01		bcs $aa08			bcs 	_VUError 					; couldn't convert
.aa07	60		rts				rts
.aa08					_VUError:
.aa08	4c ba ab	jmp $abba			jmp 	TypeError
.aa0b					IsValUnary:
.aa0b	fa		plx				plx 								; restore stack pos
.aa0c	20 17 aa	jsr $aa17			jsr 	ValMainCode 				; do the main val() code
.aa0f	b0 03		bcs $aa14			bcs 	_VUBad
.aa11	4c fe 92	jmp $92fe			jmp 	ReturnTrue
.aa14					_VUBad:
.aa14	4c 0a 93	jmp $930a			jmp 	ReturnFalse
.aa17					ValMainCode:
.aa17	20 a8 9d	jsr $9da8			jsr 	EvaluateString 				; get a string
.aa1a	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket 			; check right bracket present
.aa1d	5a		phy				phy
.aa1e	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.aa20	f0 17		beq $aa39			beq 	_VMCFail2
.aa22	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.aa24	48		pha				pha 								; save first character
.aa25	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.aa27	d0 01		bne $aa2a			bne 	_VMCStart
.aa29	c8		iny				iny 								; skip over -
.aa2a					_VMCStart:
.aa2a	38		sec				sec 								; initialise first time round.
.aa2b					_VMCNext:
.aa2b	c8		iny				iny 								; pre-increment
.aa2c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.aa2e	f0 0c		beq $aa3c			beq 	_VMCSuccess 				; successful.
.aa30	20 4d 98	jsr $984d			jsr 	EncodeNumber 				; send it to the number-builder
.aa33	90 03		bcc $aa38			bcc 	_VMCFail 					; if failed, give up.
.aa35	18		clc				clc 								; next time round, countinue
.aa36	80 f3		bra $aa2b			bra 	_VMCNext
.aa38					_VMCFail:
.aa38	68		pla				pla
.aa39					_VMCFail2:
.aa39	7a		ply				ply
.aa3a	38		sec				sec
.aa3b	60		rts				rts
.aa3c					_VMCSuccess:
.aa3c	a9 00		lda #$00			lda 	#0 							; construct final
.aa3e	20 4d 98	jsr $984d			jsr 	EncodeNumber
.aa41	68		pla				pla
.aa42	c9 2d		cmp #$2d			cmp 	#"-"
.aa44	d0 03		bne $aa49			bne 	_VMCNotNegative
.aa46	20 f5 9d	jsr $9df5			jsr		NSMNegate
.aa49					_VMCNotNegative:
.aa49	7a		ply				ply
.aa4a	18		clc				clc
.aa4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9c1b					ChrUnary:
.9c1b	fa		plx				plx 								; restore stack pos
.9c1c	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger			; get value
.9c1f	48		pha				pha
.9c20	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.9c23	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c25	20 d6 ae	jsr $aed6			jsr 	StringTempAllocate
.9c28	68		pla				pla 								; write number to it
.9c29	20 14 af	jsr $af14			jsr 	StringTempWrite
.9c2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c2d					SpcUnary:
.9c2d	fa		plx				plx 								; restore stack pos
.9c2e	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger			; get value
.9c31	5a		phy				phy
.9c32	48		pha				pha 								; save count
.9c33	20 d6 ae	jsr $aed6			jsr 	StringTempAllocate
.9c36	7a		ply				ply 								; to do count in Y
.9c37					_SpcLoop:
.9c37	c0 00		cpy #$00			cpy 	#0
.9c39	f0 08		beq $9c43			beq 	_SpcExit
.9c3b	a9 20		lda #$20			lda 	#32
.9c3d	20 14 af	jsr $af14			jsr 	StringTempWrite
.9c40	88		dey				dey
.9c41	80 f4		bra $9c37			bra 	_SPCLoop
.9c43					_SpcExit:
.9c43	7a		ply				ply
.9c44	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket
.9c47	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9c48					Unary_Str:
.9c48	fa		plx				plx
.9c49	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber  			; get number
.9c4c	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket 			; closing bracket
.9c4f	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c51	20 6a 9c	jsr $9c6a			jsr 	ConvertNumberToString 		; do the conversion.
.9c54	a9 21		lda #$21			lda		#33 						; create buffer
.9c56	20 d6 ae	jsr $aed6			jsr 	StringTempAllocate 			; allocate memory
.9c59	da		phx				phx
.9c5a	a2 00		ldx #$00			ldx 	#0
.9c5c					_USCopy:
.9c5c	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c5f	20 14 af	jsr $af14			jsr 	StringTempWrite
.9c62	e8		inx				inx
.9c63	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c66	d0 f4		bne $9c5c			bne 	_USCopy
.9c68	fa		plx				plx
.9c69	60		rts				rts
.9c6a					ConvertNumberToString:
.9c6a	5a		phy				phy 								; save code position
.9c6b	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c6e	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c71	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c74	10 0a		bpl $9c80			bpl 	_CNTSNotNegative
.9c76	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c78	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c7b	a9 2d		lda #$2d			lda 	#"-"
.9c7d	20 e6 9c	jsr $9ce6			jsr 	WriteDecimalBuffer
.9c80					_CNTSNotNegative:
.9c80	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c83	f0 15		beq $9c9a			beq 	_CNTSNotFloat
.9c85	e8		inx				inx 								; round up
.9c86	a9 01		lda #$01			lda 	#1
.9c88	20 4b 9e	jsr $9e4b			jsr 	NSMSetByte
.9c8b	ca		dex				dex
.9c8c	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c8f	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c92	a9 08		lda #$08			lda 	#NSTFloat
.9c94	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c97	20 91 a7	jsr $a791			jsr 	FloatAdd
.9c9a					_CNTSNotFloat:
.9c9a	20 c8 9c	jsr $9cc8			jsr 	MakePlusTwoString
.9c9d	20 6f a8	jsr $a86f			jsr 	FloatFractionalPart 		; get the fractional part
.9ca0	20 33 a9	jsr $a933			jsr 	NSNormalise					; normalise , exit if zero
.9ca3	f0 21		beq $9cc6			beq 	_CNTSExit
.9ca5	a9 2e		lda #$2e			lda 	#"."
.9ca7	20 e6 9c	jsr $9ce6			jsr 	WriteDecimalBuffer 			; write decimal place
.9caa					_CNTSDecimal:
.9caa	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9cad	30 17		bmi $9cc6			bmi 	_CNTSExit
.9caf	e8		inx				inx 								; x 10.0
.9cb0	a9 0a		lda #$0a			lda 	#10
.9cb2	20 4b 9e	jsr $9e4b			jsr 	NSMSetByte
.9cb5	a9 08		lda #$08			lda 	#NSTFloat
.9cb7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cba	ca		dex				dex
.9cbb	20 fc a8	jsr $a8fc			jsr 	FloatMultiply
.9cbe	20 c8 9c	jsr $9cc8			jsr 	MakePlusTwoString
.9cc1	20 6f a8	jsr $a86f			jsr 	FloatFractionalPart 		; get the fractional part
.9cc4	80 e4		bra $9caa			bra 	_CNTSDecimal 				; keep going.
.9cc6					_CNTSExit:
.9cc6	7a		ply				ply
.9cc7	60		rts				rts
.9cc8					MakePlusTwoString:
.9cc8	da		phx				phx
.9cc9	20 20 9e	jsr $9e20			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9ccc	e8		inx				inx 								; access it
.9ccd	e8		inx				inx
.9cce	20 d2 a8	jsr $a8d2			jsr 	FloatIntegerPart 			; make it an integer
.9cd1	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9cd3	20 3b a7	jsr $a73b			jsr 	ConvertInt32
.9cd6	a2 00		ldx #$00			ldx	 	#0
.9cd8					_MPTSCopy:
.9cd8	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9cdb	20 e6 9c	jsr $9ce6			jsr 	WriteDecimalBuffer
.9cde	e8		inx				inx
.9cdf	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9ce2	d0 f4		bne $9cd8			bne 	_MPTSCopy
.9ce4	fa		plx				plx
.9ce5	60		rts				rts
.9ce6					WriteDecimalBuffer:
.9ce6	da		phx				phx
.9ce7	ae 95 04	ldx $0495			ldx 	dbOffset
.9cea	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9ced	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9cf0	ee 95 04	inc $0495			inc 	dbOffset
.9cf3	fa		plx				plx
.9cf4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9cf5					Unary_Left:
.9cf5	fa		plx				plx
.9cf6	18		clc				clc 								; only one parameter
.9cf7	20 6c 9d	jsr $9d6c			jsr 	SubstringInitial 			; set up.
.9cfa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9cfd	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9d00	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9d03	80 2c		bra $9d31			bra 	SubstringMain
.9d05					Unary_Right:
.9d05	fa		plx				plx
.9d06	18		clc				clc 								; only one parameter
.9d07	20 6c 9d	jsr $9d6c			jsr 	SubstringInitial 			; set up.
.9d0a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9d0d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9d10	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9d13	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9d16	b0 02		bcs $9d1a			bcs 	_URNotUnderflow
.9d18	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d1a					_URNotUnderFlow:
.9d1a	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d1d	80 12		bra $9d31			bra 	SubStringMain
.9d1f					Unary_Mid:
.9d1f	fa		plx				plx
.9d20	38		sec				sec 								; two parameters
.9d21	20 6c 9d	jsr $9d6c			jsr 	SubstringInitial 			; set up.
.9d24	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d27	f0 05		beq $9d2e			beq 	_UMError
.9d29	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d2c	80 03		bra $9d31			bra 	SubStringMain
.9d2e					_UMError:
.9d2e	4c bf ab	jmp $abbf			jmp 	ArgumentError
.9d31					SubStringMain:
.9d31	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d34	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9d37	b0 2d		bcs $9d66			bcs 	_SSMNull 					; if so, return an empty string.
.9d39	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d3c	f0 28		beq $9d66			beq 	_SSMNull 					; return empty string.
.9d3e	18		clc				clc 								; add the offset +1 to the address and
.9d3f	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9d42	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9d45	85 36		sta $36				sta 	zTemp0
.9d47	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9d4a	69 00		adc #$00			adc 	#0
.9d4c	85 37		sta $37				sta 	zTemp0+1
.9d4e					_SSMNoCarry:
.9d4e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d51	20 d6 ae	jsr $aed6			jsr 	StringTempAllocate 			; allocate that many characters
.9d54	5a		phy				phy 								; save Y
.9d55	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d57					_SSMCopy:
.9d57	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d59	f0 09		beq $9d64			beq 	_SSMEString 				; no more to copy
.9d5b	20 14 af	jsr $af14			jsr 	StringTempWrite 			; and write it out.
.9d5e	c8		iny				iny
.9d5f	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d62	d0 f3		bne $9d57			bne 	_SSMCopy
.9d64					_SSMEString:
.9d64	7a		ply				ply
.9d65					_SSMExit:
.9d65	60		rts				rts
.9d66					_SSMNull:
.9d66	a9 00		lda #$00			lda 	#0
.9d68	20 d6 ae	jsr $aed6			jsr 	StringTempAllocate
.9d6b	60		rts				rts
.9d6c					SubstringInitial:
.9d6c	da		phx				phx 								; save initial stack position
.9d6d	08		php				php 								; save carry on stack indicating 2 parameters
.9d6e	20 a8 9d	jsr $9da8			jsr 	EvaluateString 				; get a string
.9d71	5a		phy				phy 								; calculate length to exponent.
.9d72	a0 ff		ldy #$ff			ldy 	#$FF
.9d74					_SIFindLength:
.9d74	c8		iny				iny
.9d75	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d77	d0 fb		bne $9d74			bne 	_SIFindLength
.9d79	98		tya				tya
.9d7a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d7d	7a		ply				ply
.9d7e	e8		inx				inx
.9d7f	20 d2 a5	jsr $a5d2			jsr 	CheckComma 					; comma next
.9d82	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger 		; get next parameter
.9d85	28		plp				plp 								; is it the last parameter ?
.9d86	90 07		bcc $9d8f			bcc 	_SSIExit 					; if so, exit.
.9d88	e8		inx				inx
.9d89	20 d2 a5	jsr $a5d2			jsr 	CheckComma 					; comma next
.9d8c	20 e1 9d	jsr $9de1			jsr 	Evaluate8BitInteger 		; get last parameter
.9d8f					_SSIExit:
.9d8f	fa		plx				plx
.9d90	20 ca a5	jsr $a5ca			jsr 	CheckRightBracket 			; check closing bracket
.9d93	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d94					EvaluateValue:
.9d94	48		pha				pha
.9d95	20 9a 96	jsr $969a			jsr		EvaluateExpression 			; expression
.9d98	20 af 97	jsr $97af			jsr 	Dereference					; derefernce it
.9d9b	68		pla				pla
.9d9c	60		rts				rts
.9d9d					EvaluateNumber:
.9d9d	20 94 9d	jsr $9d94			jsr 	EvaluateValue 				; get a value
.9da0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9da3	29 10		and #$10			and 	#NSBIsString
.9da5	d0 16		bne $9dbd			bne 	HelperTypeError
.9da7	60		rts				rts
.9da8					EvaluateString:
.9da8	20 94 9d	jsr $9d94			jsr 	EvaluateValue 				; get a value
.9dab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9dae	29 10		and #$10			and 	#NSBIsString
.9db0	f0 0b		beq $9dbd			beq 	HelperTypeError
.9db2					CopyAddressToTemp0:
.9db2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9db5	85 36		sta $36				sta 	zTemp0
.9db7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dba	85 37		sta $37				sta 	zTemp0+1
.9dbc	60		rts				rts
.9dbd					HelperTypeError:
.9dbd	4c ba ab	jmp $abba			jmp 	TypeError
.9dc0					EvaluateInteger:
.9dc0	20 9d 9d	jsr $9d9d			jsr 	EvaluateNumber
.9dc3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9dc6	d0 0a		bne $9dd2			bne 	HelperValueError 			; if not, it's a float.
.9dc8	60		rts				rts
.9dc9					EvaluateUnsignedInteger:
.9dc9	20 c0 9d	jsr $9dc0			jsr 	EvaluateInteger 			; check integer is +ve
.9dcc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dcf	30 01		bmi $9dd2			bmi 	HelperValueError
.9dd1	60		rts				rts
.9dd2					HelperValueError:
.9dd2	4c bf ab	jmp $abbf			jmp 	ArgumentError
.9dd5					Evaluate16BitInteger:
.9dd5	20 c9 9d	jsr $9dc9			jsr	 	EvaluateUnsignedInteger		; get integer
.9dd8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9ddb	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9dde	d0 f2		bne $9dd2			bne 	HelperValueError
.9de0	60		rts				rts
.9de1					Evaluate8BitInteger:
.9de1	20 c9 9d	jsr $9dc9			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9de4	d0 ec		bne $9dd2			bne 	HelperValueError
.9de6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9de9	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9dec	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9def	d0 e1		bne $9dd2			bne 	HelperValueError
.9df1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9df4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.aa4c					Multiply8x8:
.aa4c	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.aa4d	85 36		sta $36			  	sta 	zTemp0
.aa4f	86 37		stx $37				stx 	zTemp0+1
.aa51	a9 00		lda #$00			lda 	#0
.aa53	a2 08		ldx #$08			ldx 	#8
.aa55					_M88Loop:
.aa55	90 03		bcc $aa5a			bcc 	_M88NoAdd
.aa57	18		clc				clc
.aa58	65 37		adc $37				adc 	zTemp0+1
.aa5a					_M88NoAdd:
.aa5a	6a		ror a				ror 	a
.aa5b	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.aa5d	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.aa5e	d0 f5		bne $aa55			bne 	_M88Loop
.aa60	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.aa62	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9df5					NSMNegate:
.9df5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df8	49 80		eor #$80			eor 	#NSBIsNegative
.9dfa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dfd	60		rts				rts
.9dfe					NSMNegateMantissa:
.9dfe	38		sec				sec
.9dff	a9 00		lda #$00			lda 	#0
.9e01	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9e04	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e07	a9 00		lda #$00			lda 	#0
.9e09	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9e0c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e0f	a9 00		lda #$00			lda 	#0
.9e11	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9e14	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e17	a9 00		lda #$00			lda 	#0
.9e19	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9e1c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e1f	60		rts				rts
.9e20					NSMShiftUpTwo:
.9e20	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e23	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e26	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e29	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9e2c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e2f	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9e32	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e35	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e38	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e3b	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e3e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e41	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e44	60		rts				rts
.9e45					NSMSetZeroMantissaOnly:
.9e45	a9 00		lda #$00			lda 	#0
.9e47	80 08		bra $9e51			bra 	NSMSetMantissa
.9e49					NSMSetZero:
.9e49	a9 00		lda #$00			lda 	#0
.9e4b					NSMSetByte:
.9e4b	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e4e	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e51					NSMSetMantissa:
.9e51	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e54	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e57	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e5a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e5d	60		rts				rts
.9e5e					NSMShiftLeft:
.9e5e	18		clc				clc
.9e5f					NSMRotateLeft:
.9e5f	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e62	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e65	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e68	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e6b	60		rts				rts
.9e6c					NSMShiftRight:
.9e6c	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e6f	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e72	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e75	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e78	60		rts				rts
.9e79					NSMIsZero:
.9e79	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e7c	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e7f	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e82	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aa63					Assemble_ora:
.aa63	20 bc 85	jsr $85bc		jsr	AssembleGroup1
>aa66	01					.byte $01
.aa67					Assemble_and:
.aa67	20 bc 85	jsr $85bc		jsr	AssembleGroup1
>aa6a	21					.byte $21
.aa6b					Assemble_eor:
.aa6b	20 bc 85	jsr $85bc		jsr	AssembleGroup1
>aa6e	41					.byte $41
.aa6f					Assemble_adc:
.aa6f	20 bc 85	jsr $85bc		jsr	AssembleGroup1
>aa72	61					.byte $61
.aa73					Assemble_sta:
.aa73	20 bc 85	jsr $85bc		jsr	AssembleGroup1
>aa76	81					.byte $81
.aa77					Assemble_lda:
.aa77	20 bc 85	jsr $85bc		jsr	AssembleGroup1
>aa7a	a1					.byte $a1
.aa7b					Assemble_cmp:
.aa7b	20 bc 85	jsr $85bc		jsr	AssembleGroup1
>aa7e	c1					.byte $c1
.aa7f					Assemble_sbc:
.aa7f	20 bc 85	jsr $85bc		jsr	AssembleGroup1
>aa82	e1					.byte $e1
.aa83					Assemble_asl:
.aa83	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aa86	02					.byte $02
>aa87	75					.byte $75
.aa88					Assemble_rol:
.aa88	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aa8b	22					.byte $22
>aa8c	75					.byte $75
.aa8d					Assemble_lsr:
.aa8d	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aa90	42					.byte $42
>aa91	75					.byte $75
.aa92					Assemble_ror:
.aa92	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aa95	62					.byte $62
>aa96	75					.byte $75
.aa97					Assemble_stx:
.aa97	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aa9a	82					.byte $82
>aa9b	50					.byte $50
.aa9c					Assemble_ldx:
.aa9c	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aa9f	a2					.byte $a2
>aaa0	d0					.byte $d0
.aaa1					Assemble_dec:
.aaa1	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aaa4	c2					.byte $c2
>aaa5	55					.byte $55
.aaa6					Assemble_inc:
.aaa6	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aaa9	e2					.byte $e2
>aaaa	55					.byte $55
.aaab					Assemble_stz:
.aaab	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aaae	60					.byte $60
>aaaf	44					.byte $44
.aab0					Assemble_bit:
.aab0	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aab3	20					.byte $20
>aab4	55					.byte $55
.aab5					Assemble_sty:
.aab5	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aab8	80					.byte $80
>aab9	54					.byte $54
.aaba					Assemble_ldy:
.aaba	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aabd	a0					.byte $a0
>aabe	d5					.byte $d5
.aabf					Assemble_cpy:
.aabf	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aac2	c0					.byte $c0
>aac3	d4					.byte $d4
.aac4					Assemble_cpx:
.aac4	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aac7	e0					.byte $e0
>aac8	d0					.byte $d0
.aac9					Assemble_tsb:
.aac9	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aacc	00					.byte $00
>aacd	50					.byte $50
.aace					Assemble_trb:
.aace	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aad1	10					.byte $10
>aad2	50					.byte $50
.aad3					Assemble_jsr:
.aad3	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aad6	14					.byte $14
>aad7	10					.byte $10
.aad8					Assemble_jmp:
.aad8	20 c3 85	jsr $85c3		jsr	AssembleGroup2
>aadb	40					.byte $40
>aadc	10					.byte $10
.aadd					Assemble_bpl:
.aadd	20 14 86	jsr $8614		jsr	AssembleGroup3
>aae0	10					.byte $10
.aae1					Assemble_bmi:
.aae1	20 14 86	jsr $8614		jsr	AssembleGroup3
>aae4	30					.byte $30
.aae5					Assemble_bvc:
.aae5	20 14 86	jsr $8614		jsr	AssembleGroup3
>aae8	50					.byte $50
.aae9					Assemble_bvs:
.aae9	20 14 86	jsr $8614		jsr	AssembleGroup3
>aaec	70					.byte $70
.aaed					Assemble_bcc:
.aaed	20 14 86	jsr $8614		jsr	AssembleGroup3
>aaf0	90					.byte $90
.aaf1					Assemble_bcs:
.aaf1	20 14 86	jsr $8614		jsr	AssembleGroup3
>aaf4	b0					.byte $b0
.aaf5					Assemble_bne:
.aaf5	20 14 86	jsr $8614		jsr	AssembleGroup3
>aaf8	d0					.byte $d0
.aaf9					Assemble_beq:
.aaf9	20 14 86	jsr $8614		jsr	AssembleGroup3
>aafc	f0					.byte $f0
.aafd					Assemble_bra:
.aafd	20 14 86	jsr $8614		jsr	AssembleGroup3
>ab00	80					.byte $80
.ab01					Assemble_brk:
.ab01	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab04	00					.byte $00
.ab05					Assemble_php:
.ab05	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab08	08					.byte $08
.ab09					Assemble_clc:
.ab09	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab0c	18					.byte $18
.ab0d					Assemble_plp:
.ab0d	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab10	28					.byte $28
.ab11					Assemble_sec:
.ab11	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab14	38					.byte $38
.ab15					Assemble_rti:
.ab15	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab18	40					.byte $40
.ab19					Assemble_pha:
.ab19	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab1c	48					.byte $48
.ab1d					Assemble_cli:
.ab1d	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab20	58					.byte $58
.ab21					Assemble_phy:
.ab21	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab24	5a					.byte $5a
.ab25					Assemble_rts:
.ab25	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab28	60					.byte $60
.ab29					Assemble_pla:
.ab29	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab2c	68					.byte $68
.ab2d					Assemble_sei:
.ab2d	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab30	78					.byte $78
.ab31					Assemble_ply:
.ab31	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab34	7a					.byte $7a
.ab35					Assemble_dey:
.ab35	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab38	88					.byte $88
.ab39					Assemble_txa:
.ab39	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab3c	8a					.byte $8a
.ab3d					Assemble_tya:
.ab3d	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab40	98					.byte $98
.ab41					Assemble_txs:
.ab41	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab44	9a					.byte $9a
.ab45					Assemble_tay:
.ab45	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab48	a8					.byte $a8
.ab49					Assemble_tax:
.ab49	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab4c	aa					.byte $aa
.ab4d					Assemble_clv:
.ab4d	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab50	b8					.byte $b8
.ab51					Assemble_tsx:
.ab51	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab54	ba					.byte $ba
.ab55					Assemble_iny:
.ab55	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab58	c8					.byte $c8
.ab59					Assemble_dex:
.ab59	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab5c	ca					.byte $ca
.ab5d					Assemble_cld:
.ab5d	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab60	d8					.byte $d8
.ab61					Assemble_phx:
.ab61	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab64	da					.byte $da
.ab65					Assemble_stp:
.ab65	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab68	db					.byte $db
.ab69					Assemble_inx:
.ab69	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab6c	e8					.byte $e8
.ab6d					Assemble_nop:
.ab6d	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab70	ea					.byte $ea
.ab71					Assemble_sed:
.ab71	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab74	f8					.byte $f8
.ab75					Assemble_plx:
.ab75	20 4a 86	jsr $864a		jsr	AssembleGroup4
>ab78	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ab79					DecimalScalarTable:
>ab79	66 66 66 66				.dword $66666666 ; 0.1
>ab7d	de					.byte $de
>ab7e	1f 85 eb 51				.dword $51eb851f ; 0.01
>ab82	db					.byte $db
>ab83	4c 37 89 41				.dword $4189374c ; 0.001
>ab87	d8					.byte $d8
>ab88	ac 8b db 68				.dword $68db8bac ; 0.0001
>ab8c	d4					.byte $d4
>ab8d	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ab91	d1					.byte $d1
>ab92	83 de 1b 43				.dword $431bde83 ; 1e-06
>ab96	ce					.byte $ce
>ab97	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ab9b	ca					.byte $ca
>ab9c	89 3b e6 55				.dword $55e63b89 ; 1e-08
>aba0	c7					.byte $c7
>aba1	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>aba5	c4					.byte $c4
>aba6	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>abaa	c0					.byte $c0
>abab	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>abaf	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.abb0					SyntaxError:
.abb0	a9 02		lda #$02		lda	#2
.abb2	4c 91 92	jmp $9291		jmp	ErrorHandler
.abb5					RangeError:
.abb5	a9 04		lda #$04		lda	#4
.abb7	4c 91 92	jmp $9291		jmp	ErrorHandler
.abba					TypeError:
.abba	a9 05		lda #$05		lda	#5
.abbc	4c 91 92	jmp $9291		jmp	ErrorHandler
.abbf					ArgumentError:
.abbf	a9 07		lda #$07		lda	#7
.abc1	4c 91 92	jmp $9291		jmp	ErrorHandler
.abc4					NotDoneError:
.abc4	a9 0c		lda #$0c		lda	#12
.abc6	4c 91 92	jmp $9291		jmp	ErrorHandler
.abc9					ErrorText:
>abc9	42 72 65 61 6b 00			.text	"Break",0
>abcf	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>abd7	72 72 6f 72 00
>abdc	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>abe4	20 62 79 20 7a 65 72 6f 00
>abed	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>abf5	61 6e 67 65 00
>abfa	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ac02	6d 61 74 63 68 00
>ac08	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ac10	65 6d 6f 72 79 00
>ac16	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ac1e	61 72 67 75 6d 65 6e 74 00
>ac27	53 74 6f 70 00				.text	"Stop",0
>ac2c	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ac34	6f 6f 20 6c 6f 6e 67 00
>ac3c	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ac44	6e 20 66 61 69 6c 65 64 00
>ac4d	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ac55	61 74 61 00
>ac59	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ac61	65 6e 74 65 64 00
>ac67	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ac6f	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ac7b	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ac83	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ac90	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ac98	74 68 6f 75 74 20 52 65 70 65 61 74 00
>aca5	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>acad	68 6f 75 74 20 57 68 69 6c 65 00
>acb8	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>acc0	68 6f 75 74 20 46 6f 72 00
>acc9	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>acd1	61 63 6b 20 66 75 6c 6c 00
>acda	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ace2	75 63 74 75 72 65 00
>ace9	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>acf1	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>acfe	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ad06	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ad14	41 72 72 61 79 20 73 69			.text	"Array size",0
>ad1c	7a 65 00
>ad1f	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ad27	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ad2f	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1045."
>ad37	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>ad47	2e 20 42 75 69 6c 64 20 31 30 34 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ad54					EXTPrintCharacter:
.ad54	48		pha				pha
.ad55	da		phx				phx
.ad56	5a		phy				phy
.ad57	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ad5a	7a		ply				ply
.ad5b	fa		plx				plx
.ad5c	68		pla				pla
.ad5d	60		rts				rts
.ad5e					EXTInputSingleCharacter:
.ad5e	da		phx				phx
.ad5f	5a		phy				phy
.ad60					_EISCWait:
.ad60	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ad63	c9 00		cmp #$00			cmp 	#0
.ad65	f0 f9		beq $ad60			beq 	_EISCWait
.ad67	7a		ply				ply
.ad68	fa		plx				plx
.ad69	60		rts				rts
.ad6a					EXTInputLine:
.ad6a	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ad6c					_ILLoop:
.ad6c	da		phx				phx 								; read character in
.ad6d	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ad70	fa		plx				plx
.ad71	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ad73	f0 12		beq $ad87			beq 	_ILBackspace
.ad75	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ad77	f0 15		beq $ad8e			beq 	_ILExit
.ad79	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ad7b	90 ef		bcc $ad6c			bcc 	_ILLoop
.ad7d	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ad7f	f0 eb		beq $ad6c			beq 	_ILLoop
.ad81	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ad84	e8		inx				inx
.ad85	80 e5		bra $ad6c			bra 	_ILLoop
.ad87					_ILBackspace:
.ad87	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ad89	f0 e1		beq $ad6c			beq 	_ILLoop
.ad8b	ca		dex				dex 								; back one.
.ad8c	80 de		bra $ad6c			bra 	_ILLoop
.ad8e					_ILExit:
.ad8e	20 54 ad	jsr $ad54			jsr 	EXTPrintCharacter
.ad91	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ad94	60		rts				rts
.ad95					EXTBreakCheck:
.ad95	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ad98					MemoryDeleteLine:
.ad98	20 b7 ad	jsr $adb7			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad9b	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ad9d	a8		tay				tay
.ad9e					_MDDLLoop:
.ad9e	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ada0	92 30		sta ($30)			sta 	(codePtr)
.ada2	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ada4	c5 3a		cmp $3a				cmp 	zTemp2
.ada6	d0 07		bne $adaf			bne 	_MDLDLNext
.ada8	a5 31		lda $31				lda 	codePtr+1
.adaa	c5 3b		cmp $3b				cmp 	zTemp2+1
.adac	d0 01		bne $adaf			bne 	_MDLDLNext
.adae					_MDDLExit:
.adae	60		rts				rts
.adaf					_MDLDLNext:
.adaf	e6 30		inc $30				inc 	codePtr						; next byte
.adb1	d0 eb		bne $ad9e			bne 	_MDDLLoop
.adb3	e6 31		inc $31				inc 	codePtr+1
.adb5	80 e7		bra $ad9e			bra 	_MDDLLoop
.adb7					IMemoryFindEnd:
.adb7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adb9	85 3a		sta $3a				sta 	0+zTemp2
.adbb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adbd	85 3b		sta $3b				sta 	1+zTemp2
.adbf					_MDLFELoop:
.adbf	b2 3a		lda ($3a)			lda 	(zTemp2)
.adc1	f0 0b		beq $adce			beq 	_MDLFEExit
.adc3	18		clc				clc
.adc4	65 3a		adc $3a				adc 	zTemp2
.adc6	85 3a		sta $3a				sta 	zTemp2
.adc8	90 f5		bcc $adbf			bcc 	_MDLFELoop
.adca	e6 3b		inc $3b				inc 	zTemp2+1
.adcc	80 f1		bra $adbf			bra 	_MDLFELoop
.adce					_MDLFEExit:
.adce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.adcf					MemoryInsertLine:
.adcf	08		php				php
.add0	20 b7 ad	jsr $adb7			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.add3	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.add5	1a		inc a				inc 	a
.add6	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.add8	b0 36		bcs $ae10			bcs 	_MDLIError
.adda	28		plp				plp
.addb	90 08		bcc $ade5			bcc 	_MDLIFound
.addd	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.addf	85 30		sta $30				sta 	codePtr
.ade1	a5 3b		lda $3b				lda 	zTemp2+1
.ade3	85 31		sta $31				sta 	codePtr+1
.ade5					_MDLIFound:
.ade5	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ade8	a8		tay				tay
.ade9					_MDLIInsert:
.ade9	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.adeb	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.aded	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.adef	c5 3a		cmp $3a				cmp 	zTemp2
.adf1	d0 06		bne $adf9			bne 	_MDLINext
.adf3	a5 31		lda $31				lda 	codePtr+1
.adf5	c5 3b		cmp $3b				cmp 	zTemp2+1
.adf7	f0 0a		beq $ae03			beq 	_MDLIHaveSpace
.adf9					_MDLINext:
.adf9	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.adfb	d0 02		bne $adff			bne 	_MDLINoBorrow
.adfd	c6 3b		dec $3b				dec 	zTemp2+1
.adff					_MDLINoBorrow:
.adff	c6 3a		dec $3a				dec 	zTemp2
.ae01	80 e6		bra $ade9			bra 	_MDLIInsert
.ae03					_MDLIHaveSpace:
.ae03	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.ae06	88		dey				dey 								; from offset-1 to 0
.ae07					_MDLICopy:
.ae07	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.ae0a	91 30		sta ($30),y			sta 	(codePtr),y
.ae0c	88		dey				dey
.ae0d	10 f8		bpl $ae07			bpl 	_MDLICopy
.ae0f	60		rts				rts
.ae10					_MDLIError:
.ae10	a9 06		lda #$06		lda	#6
.ae12	4c 91 92	jmp $9291		jmp	ErrorHandler
.ae15					MDLAppendLine:
.ae15	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ae17	85 36		sta $36				sta 	zTemp0
.ae19	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae1b	85 38		sta $38				sta 	0+zTemp1
.ae1d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae1f	85 39		sta $39				sta 	1+zTemp1
.ae21	b2 38		lda ($38)			lda 	(zTemp1)
.ae23	d0 0a		bne $ae2f			bne 	_MDLANoInitialise
.ae25	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae27	8d 4f 06	sta $064f			sta 	0+AppendPointer
.ae2a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae2c	8d 50 06	sta $0650			sta 	1+AppendPointer
.ae2f					_MDLANoInitialise:
.ae2f	18		clc				clc
.ae30	ad 4f 06	lda $064f			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ae33	85 38		sta $38				sta 	zTemp1
.ae35	72 36		adc ($36)			adc 	(zTemp0)
.ae37	8d 4f 06	sta $064f			sta 	AppendPointer
.ae3a	ad 50 06	lda $0650			lda 	AppendPointer+1
.ae3d	85 39		sta $39				sta 	zTemp1+1
.ae3f	69 00		adc #$00			adc 	#0
.ae41	8d 50 06	sta $0650			sta 	AppendPointer+1
.ae44	a0 00		ldy #$00			ldy 	#0
.ae46					_MDLACopy:
.ae46	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ae48	91 38		sta ($38),y			sta 	(zTemp1),y
.ae4a	c8		iny				iny
.ae4b	98		tya				tya
.ae4c	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ae4e	d0 f6		bne $ae46			bne 	_MDLACopy
.ae50	a9 00		lda #$00			lda 	#0 							; end of program.
.ae52	91 38		sta ($38),y			sta 	(zTemp1),y
.ae54	60		rts				rts
.064f					AppendPointer:
>064f							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9e86					MemoryNew:
.9e86	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e88	85 30		sta $30				sta 	codePtr
.9e8a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e8c	85 31		sta $31				sta 	codePtr+1
.9e8e	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9e90	92 30		sta ($30)			sta 	(codePtr)
.9e92	60		rts				rts
.9e93					MemoryInline:
.9e93	98		tya				tya 								; put address into stack,x
.9e94	18		clc				clc
.9e95	65 30		adc $30				adc 	codePtr
.9e97	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e9a	a5 31		lda $31				lda 	codePtr+1
.9e9c	69 00		adc #$00			adc 	#0
.9e9e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ea1	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9ea4	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ea7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9ea8					MemorySearch:
.9ea8	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9eaa	86 37		stx $37				stx 	zTemp0+1
.9eac	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9eae	85 30		sta $30				sta 	codePtr
.9eb0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9eb2	85 31		sta $31				sta 	codePtr+1
.9eb4					_MTAXLoop:
.9eb4	b2 30		lda ($30)			lda 	(codePtr)
.9eb6	18		clc				clc
.9eb7	f0 21		beq $9eda			beq 	_MTAXExit 					; reached end, exit with CC.
.9eb9	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9ebb	b1 30		lda ($30),y			lda 	(codePtr),y
.9ebd	38		sec				sec
.9ebe	e5 36		sbc $36				sbc 	zTemp0
.9ec0	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9ec2	c8		iny				iny 								; do the MSB
.9ec3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ec5	e5 37		sbc $37				sbc 	zTemp0+1
.9ec7	05 38		ora $38				ora 	zTemp1
.9ec9	f0 0f		beq $9eda			beq 	_MTAXExit	 				; found
.9ecb	b0 0d		bcs $9eda			bcs 	_MTAXExit 					; current < required exit
.9ecd	18		clc				clc
.9ece	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9ed0	65 30		adc $30				adc 	codePtr
.9ed2	85 30		sta $30				sta 	codePtr
.9ed4	90 02		bcc $9ed8			bcc 	_CREExit
.9ed6	e6 31		inc $31				inc 	codePtr+1
.9ed8					_CREExit:
.9ed8	80 da		bra $9eb4			bra 	_MTAXLoop
.9eda					_MTAXExit:
.9eda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9edb					StackPushByte:
.9edb	48		pha				pha 								; save byte
.9edc	a5 34		lda $34				lda 	BasicStack
.9ede	d0 09		bne $9ee9			bne 	_SPBNoBorrow
.9ee0	c6 35		dec $35				dec 	BasicStack+1
.9ee2	48		pha				pha
.9ee3	a5 35		lda $35				lda 	BasicStack+1
.9ee5	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9ee7	90 06		bcc $9eef			bcc 	_SPBMemory
.9ee9					_SPBNoBorrow:
.9ee9	c6 34		dec $34				dec 	BasicStack
.9eeb	68		pla				pla 								; get back and write
.9eec	92 34		sta ($34)			sta 	(BasicStack)
.9eee	60		rts				rts
.9eef					_SPBMemory:
.9eef	a9 12		lda #$12		lda	#18
.9ef1	4c 91 92	jmp $9291		jmp	ErrorHandler
.9ef4					StackPopByte:
.9ef4	b2 34		lda ($34)			lda 	(BasicStack)
.9ef6	e6 34		inc $34				inc 	BasicStack
.9ef8	d0 02		bne $9efc			bne 	_SPBNoCarry
.9efa	e6 35		inc $35				inc 	BasicStack+1
.9efc					_SPBNoCarry:
.9efc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9efd					StackOpen:
.9efd	48		pha				pha 								; save frame byte
.9efe	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9f00	0a		asl a				asl 	a 							; claim twice this for storage
.9f01	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9f03	38		sec				sec 								; so basically subtracting from
.9f04	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9f06	85 34		sta $34				sta 	basicStack
.9f08	b0 08		bcs $9f12			bcs 	_SONoBorrow
.9f0a	c6 35		dec $35				dec 	basicStack+1
.9f0c	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9f0e	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9f10	90 04		bcc $9f16			bcc 	_SOMemory
.9f12					_SONoBorrow:
.9f12	68		pla				pla 								; get marker back and write at TOS
.9f13	92 34		sta ($34)			sta 	(basicStack)
.9f15	60		rts				rts
.9f16					_SOMemory:
.9f16	a9 12		lda #$12		lda	#18
.9f18	4c 91 92	jmp $9291		jmp	ErrorHandler
.9f1b					StackClose:
.9f1b	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9f1d	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9f1f	0a		asl a				asl 	a 							; claim twice this.
.9f20	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9f22	85 34		sta $34				sta 	basicStack
.9f24	90 02		bcc $9f28			bcc 	_SCExit
.9f26	e6 35		inc $35				inc 	basicStack+1
.9f28					_SCExit:
.9f28	60		rts				rts
.9f29					StackCheckFrame:
.9f29	48		pha				pha
.9f2a					_StackRemoveLocals:
.9f2a	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9f2c	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9f2e	b0 05		bcs $9f35			bcs 	_SCNoLocal
.9f30	20 71 a5	jsr $a571			jsr 	LocalPopValue
.9f33	80 f5		bra $9f2a			bra 	_StackRemoveLocals
.9f35					_SCNoLocal:
.9f35	68		pla				pla
.9f36	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9f38	29 f0		and #$f0			and 	#$F0 						; check type bits
.9f3a	d0 01		bne $9f3d			bne 	_SCFError 					; different, we have structures mixed up
.9f3c	60		rts				rts
.9f3d					_SCFError:
.9f3d	8a		txa				txa 								; report error X
.9f3e	4c 91 92	jmp $9291			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9f41					STKSaveCodePosition:
.9f41	5a		phy				phy
.9f42	98		tya				tya 								; save Y
.9f43	a0 05		ldy #$05			ldy 	#5
.9f45	91 34		sta ($34),y			sta 	(basicStack),y
.9f47	88		dey				dey 								; save Code Pointer
.9f48					_STKSaveLoop:
.9f48	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9f4b	91 34		sta ($34),y			sta 	(basicStack),y
.9f4d	88		dey				dey
.9f4e	d0 f8		bne $9f48			bne 	_STKSaveLoop
.9f50	7a		ply				ply
.9f51	60		rts				rts
.9f52					STKLoadCodePosition:
.9f52	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9f54					_STKLoadLoop:
.9f54	b1 34		lda ($34),y			lda 	(basicStack),y
.9f56	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9f59	c8		iny				iny
.9f5a	c0 05		cpy #$05			cpy 	#5
.9f5c	d0 f6		bne $9f54			bne 	_STKLoadLoop
.9f5e	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9f60	a8		tay				tay
.9f61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9f62					StackReset:
.9f62	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9f64	85 34		sta $34				sta 	0+basicStack
.9f66	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9f68	85 35		sta $35				sta 	1+basicStack
.9f6a	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9f6c	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9f6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.ae55					StringConcrete:
.ae55	5a		phy				phy 								; save position on stack
.ae56	20 58 9b	jsr $9b58			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ae59	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.ae5c	85 38		sta $38				sta 	zTemp1
.ae5e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ae61	85 39		sta $39				sta 	zTemp1+1
.ae63	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.ae65					_SALength:
.ae65	c8		iny				iny
.ae66	b1 38		lda ($38),y			lda 	(zTemp1),y
.ae68	d0 fb		bne $ae65			bne 	_SALength
.ae6a	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ae6c	b0 3f		bcs $aead			bcs 	_SALengthError
.ae6e	98		tya				tya 				 				; length of the new string
.ae6f	18		clc				clc
.ae70	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ae72	90 02		bcc $ae76			bcc 	_SAHaveLength
.ae74	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.ae76					_SAHaveLength:
.ae76	48		pha				pha 								; save length.
.ae77	38		sec				sec
.ae78	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.ae7a	6d 8e 04	adc $048e			adc 	StringMemory
.ae7d	8d 8e 04	sta $048e			sta 	StringMemory
.ae80	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.ae82	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.ae85	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.ae87	6d 8f 04	adc $048f			adc 	StringMemory+1
.ae8a	8d 8f 04	sta $048f			sta 	StringMemory+1
.ae8d	85 3b		sta $3b				sta 	zTemp2+1
.ae8f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae92	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ae93	38		sec				sec
.ae94	e9 03		sbc #$03			sbc 	#3
.ae96	92 3a		sta ($3a)			sta 	(zTemp2)
.ae98	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.ae9a	a0 01		ldy #$01			ldy 	#1
.ae9c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ae9e					_SACopyNewString:
.ae9e	a0 00		ldy #$00			ldy 	#0
.aea0					_SACopyNSLoop:
.aea0	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.aea2	c8		iny				iny 								; write two on in string storage
.aea3	c8		iny				iny
.aea4	91 3a		sta ($3a),y			sta 	(zTemp2),y
.aea6	88		dey				dey 								; this makes it one one.
.aea7	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.aea9	d0 f5		bne $aea0			bne 	_SACopyNSLoop
.aeab	7a		ply				ply
.aeac	60		rts				rts
.aead					_SALengthError:
.aead	a9 09		lda #$09		lda	#9
.aeaf	4c 91 92	jmp $9291		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.aeb2					StringSystemInitialise:
.aeb2	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.aeb4	8d 8e 04	sta $048e			sta 	0+StringMemory
.aeb7	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.aeb9	8d 8f 04	sta $048f			sta 	1+StringMemory
.aebc	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.aebf	60		rts				rts
.aec0					StringSpaceInitialise:
.aec0	20 58 9b	jsr $9b58			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.aec3	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.aec5	8d 90 04	sta $0490			sta 	StringInitialised
.aec8	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.aecb	8d 91 04	sta $0491			sta 	StringTempPointer
.aece	ad 8f 04	lda $048f			lda 	StringMemory+1
.aed1	3a		dec a				dec 	a
.aed2	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aed5	60		rts				rts
.aed6					StringTempAllocate:
.aed6	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.aed8	b0 35		bcs $af0f			bcs 	_STALength
.aeda	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.aedd	30 05		bmi $aee4			bmi 	_STAAllocate
.aedf	48		pha				pha 								; save value to subtract.
.aee0	20 c0 ae	jsr $aec0			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.aee3	68		pla				pla 								; restore it
.aee4					_STAAllocate:
.aee4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.aee6	18		clc				clc  								; deliberate allows one more
.aee7	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.aeea	8d 91 04	sta $0491			sta 	StringTempPointer
.aeed	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.aef0	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.aef2	ad 92 04	lda $0492			lda 	StringTempPointer+1
.aef5	69 ff		adc #$ff			adc 	#$FF
.aef7	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aefa	85 3d		sta $3d				sta 	zsTemp+1
.aefc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aeff	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.af02	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.af05	a9 10		lda #$10			lda 	#NSTString
.af07	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af0a	a9 00		lda #$00			lda 	#0 							; clear the target string
.af0c	92 3c		sta ($3c)			sta 	(zsTemp)
.af0e	60		rts				rts
.af0f					_STALength:
.af0f	a9 09		lda #$09		lda	#9
.af11	4c 91 92	jmp $9291		jmp	ErrorHandler
.af14					StringTempWrite:
.af14	48		pha				pha
.af15	92 3c		sta ($3c)			sta 	(zsTemp)
.af17	e6 3c		inc $3c				inc 	zsTemp
.af19	d0 02		bne $af1d			bne 	_STWNoCarry
.af1b	e6 3d		inc $3d				inc 	zsTemp+1
.af1d					_STWNoCarry:
.af1d	a9 00		lda #$00			lda 	#0
.af1f	92 3c		sta ($3c)			sta 	(zsTemp)
.af21	68		pla				pla
.af22	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9f6f					BackloadProgram:
.9f6f	a2 ff		ldx #$ff			ldx 	#$FF
.9f71	20 99 9f	jsr $9f99			jsr 	BLReadByte
.9f74	30 1f		bmi $9f95			bmi 	_BPExit
.9f76					_BPCopy:
.9f76	e8		inx				inx  								; copy byte in
.9f77	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9f7a	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9f7d	20 99 9f	jsr $9f99			jsr 	BLReadByte 					; read next byte
.9f80	30 0a		bmi $9f8c			bmi 	_BPEndLine 					; -ve = EOL
.9f82	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9f84	d0 02		bne $9f88			bne 	_BPNotTab
.9f86	a9 20		lda #$20			lda 	#' '
.9f88					_BPNotTab:
.9f88	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9f8a	b0 ea		bcs $9f76			bcs 	_BPCopy
.9f8c					_BPEndLine:
.9f8c	20 c2 a2	jsr $a2c2			jsr 	TokeniseLine 				; tokenise the line.
.9f8f	38		sec				sec 								; append not insert
.9f90	20 cf ad	jsr $adcf			jsr 	MemoryInsertLine 			; append to current program
.9f93	80 da		bra $9f6f			bra 	BackloadProgram
.9f95					_BPExit:
.9f95	20 c2 88	jsr $88c2			jsr 	ClearCommand 				; clear variables etc.
.9f98	60		rts				rts
.9f99					BLReadByte:
.9f99					_BLLoad:
.9f99	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9f9c	ee 9a 9f	inc $9f9a			inc 	_BLLoad+1
.9f9f	d0 03		bne $9fa4			bne 	_BLNoCarry
.9fa1	ee 9b 9f	inc $9f9b			inc 	_BLLoad+2
.9fa4					_BLNoCarry:
.9fa4	c9 00		cmp #$00			cmp 	#0
.9fa6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9fa7					TokeniseSearchTable:
.9fa7	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9fa9	85 36		sta $36				sta 	zTemp0
.9fab	a0 00		ldy #$00			ldy 	#0
.9fad	a9 80		lda #$80			lda 	#$80 						; token #
.9faf	85 38		sta $38				sta 	zTemp1
.9fb1					_TSTLoop:
.9fb1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9fb3	30 49		bmi $9ffe			bmi 	_TSTFail 					; -ve = end of table
.9fb5	f0 2e		beq $9fe5			beq 	_TSTNext 					; zero, check next it's a dummy
.9fb7	c8		iny				iny 								; get the hash
.9fb8	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fba	88		dey				dey
.9fbb	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9fbe	d0 25		bne $9fe5			bne 	_TSTNext
.9fc0	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9fc3	38		sec				sec
.9fc4	ed 80 04	sbc $0480			sbc 	identStart
.9fc7	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9fc9	d0 1a		bne $9fe5			bne 	_TSTNext
.9fcb	5a		phy				phy 								; save Y , we might fail
.9fcc	c8		iny				iny 								; point to text
.9fcd	c8		iny				iny
.9fce	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9fd1					_TSTCompareName:
.9fd1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9fd4	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9fd6	d0 0c		bne $9fe4			bne 	_TSTNextPullY 				; fail, pullY and do next
.9fd8	e8		inx				inx
.9fd9	c8		iny				iny
.9fda	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9fdd	d0 f2		bne $9fd1			bne 	_TSTCompareName
.9fdf	7a		ply				ply 								; throw Y
.9fe0	a5 38		lda $38				lda 	zTemp1 						; get token #
.9fe2	38		sec				sec 								; return with CS = passed.
.9fe3	60		rts				rts
.9fe4					_TSTNextPullY:
.9fe4	7a		ply				ply 								; restore current, fall through.
.9fe5					_TSTNext:
.9fe5	e6 38		inc $38				inc 	zTemp1 						; token counter
.9fe7	98		tya				tya
.9fe8	18		clc				clc
.9fe9	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9feb	1a		inc a				inc 	a 							; +1
.9fec	1a		inc a				inc 	a 							; +2
.9fed	a8		tay				tay
.9fee	10 c1		bpl $9fb1			bpl 	_TSTLoop 					; if Y < $80 loop back
.9ff0	98		tya				tya 								; add Y to zTemp0 and reset Y
.9ff1	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9ff3	18		clc				clc  								; but have tables > 255 bytes
.9ff4	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9ff6	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9ff8	90 b7		bcc $9fb1			bcc 	_TSTLoop
.9ffa	e6 37		inc $37				inc 	zTemp0+1
.9ffc	80 b3		bra $9fb1			bra 	_TSTLoop
.9ffe					_TSTFail:
.9ffe	18		clc				clc
.9fff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a000					KeywordSet0:
>a000	00 65					.text	0,$65,""               ; $80 !0:EOF
>a002	00 58					.text	0,$58,""               ; $81 !1:SH1
>a004	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a006	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a00c	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a014	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a01a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a021	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a028	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a02f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a035	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a03d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a045	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a04b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a052	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a058	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a060	28
>a061	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a069	28
>a06a	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a070	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a076	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a07c	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a083	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a089	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a08f	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a094	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a098	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a09e	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a0a6	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a0ad	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a0b4	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a0bc	43
>a0bd	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a0c3	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a0c9	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a0d0	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a0d6	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a0dc	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a0e1	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a0e7	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a0ec	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a0f4	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a0fa	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a101	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a107	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a10c	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a113	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a11a	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a120	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a125	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a12d	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a131	ff					.text	$FF
.a132					KeywordSet1:
>a132	00 65					.text	0,$65,""               ; $80 !0:EOF
>a134	00 58					.text	0,$58,""               ; $81 !1:SH1
>a136	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a138	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a140	4c 45
>a142	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a14a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a151	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a156	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a15c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a161	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a169	45
>a16a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a16f	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a175	ff					.text	$FF
.a176					KeywordSet2:
>a176	00 65					.text	0,$65,""               ; $80 !0:EOF
>a178	00 58					.text	0,$58,""               ; $81 !1:SH1
>a17a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a17c	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a181	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a186	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a18b	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a190	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a195	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a19a	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a19f	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a1a4	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a1a9	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a1ae	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a1b3	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a1b8	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a1bd	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a1c2	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a1c7	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a1cc	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a1d1	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a1d6	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a1db	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a1e0	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a1e5	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a1ea	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a1ef	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a1f4	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a1f9	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a1fe	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a203	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a208	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a20d	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a212	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a217	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a21c	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a221	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a226	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a22b	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a230	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a235	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a23a	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a23f	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a244	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a249	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a24e	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a253	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a258	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a25d	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a262	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a267	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a26c	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a271	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a276	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a27b	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a280	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a285	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a28a	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a28f	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a294	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a299	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a29e	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a2a3	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a2a8	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a2ad	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a2b2	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a2b7	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a2bc	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a2c1	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a2c2					TokeniseLine:
.a2c2	20 4a a4	jsr $a44a			jsr 	FixLineBufferCase 			; fix line case
.a2c5	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a2c7	8d a6 04	sta $04a6			sta 	tokenOffset
.a2ca	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a2cd	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a2d0	a2 ff		ldx #$ff			ldx 	#$FF
.a2d2					_TKFindFirst:
.a2d2	e8		inx				inx
.a2d3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a2d6	f0 79		beq $a351			beq 	_TKExit
.a2d8	c9 20		cmp #$20			cmp 	#' '
.a2da	90 f6		bcc $a2d2			bcc 	_TKFindFirst
.a2dc	c9 30		cmp #$30			cmp 	#'0'
.a2de	90 07		bcc $a2e7			bcc 	_TKNoLineNumber
.a2e0	c9 3a		cmp #$3a			cmp 	#'9'+1
.a2e2	b0 03		bcs $a2e7			bcs 	_TKNoLineNumber
.a2e4	20 74 a4	jsr $a474			jsr 	TokeniseExtractLineNumber
.a2e7					_TKNoLineNumber:
.a2e7					_TKTokeniseLoop:
.a2e7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a2ea	f0 65		beq $a351			beq 	_TKExit
.a2ec	e8		inx				inx
.a2ed	c9 20		cmp #$20			cmp 	#' '
.a2ef	f0 f6		beq $a2e7			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a2f1	ca		dex				dex 								; undo last get, A contains character, X is position.
.a2f2	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a2f4	f0 61		beq $a357			beq 	_TKTokeniseIdentifier
.a2f6	c9 41		cmp #$41			cmp 	#'A'
.a2f8	90 04		bcc $a2fe			bcc 	_TKTokenisePunctuation
.a2fa	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a2fc	90 59		bcc $a357			bcc 	_TKTokeniseIdentifier
.a2fe					_TKTokenisePunctuation:
.a2fe	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a300	f0 27		beq $a329			beq 	_TKString
.a302	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a304	f0 28		beq $a32e			beq 	_TKHexConstant
.a306	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a308	f0 29		beq $a333			beq 	_TKCheckDouble
.a30a	c9 3e		cmp #$3e			cmp 	#'>'
.a30c	f0 25		beq $a333			beq 	_TKCheckDouble
.a30e					_TKStandardPunctuation:
.a30e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a311	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a313	90 0e		bcc $a323			bcc 	_TKNoShift
.a315	48		pha				pha 								; save
.a316	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a318	85 36		sta $36				sta 	zTemp0
.a31a	68		pla				pla
.a31b	29 20		and #$20			and 	#32 						; bit 5
.a31d	4a		lsr a				lsr 	a 							; shift into bit 3
.a31e	4a		lsr a				lsr 	a
.a31f	05 36		ora $36				ora 	zTemp0
.a321	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a323					_TKNoShift:
.a323	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte 			; write the punctuation character
.a326	e8		inx				inx 								; consume the character
.a327	80 be		bra $a2e7			bra 	_TKTokeniseLoop 			; and loop round again.
.a329					_TKString:
.a329	20 d9 a3	jsr $a3d9			jsr 	TokeniseString
.a32c	80 b9		bra $a2e7			bra 	_TKTokeniseLoop
.a32e					_TKHexConstant:
.a32e	20 14 a4	jsr $a414			jsr 	TokeniseHexConstant
.a331	80 b4		bra $a2e7			bra 	_TKTokeniseLoop
.a333					_TKCheckDouble:
.a333	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a336	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a338	90 d4		bcc $a30e			bcc 	_TKStandardPunctuation
.a33a	c9 3f		cmp #$3f			cmp 	#'>'+1
.a33c	b0 d0		bcs $a30e			bcs 	_TKStandardPunctuation
.a33e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a341	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a343	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a344	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a347	38		sec				sec
.a348	e9 3c		sbc #$3c			sbc 	#'<'
.a34a	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a34d	e8		inx				inx 								; consume both
.a34e	e8		inx				inx
.a34f	80 96		bra $a2e7			bra 	_TKTokeniseLoop
.a351	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a353	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a356	60		rts				rts
.a357					_TKTokeniseIdentifier:
.a357	8e 80 04	stx $0480			stx 	identStart 					; save start
.a35a	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a35d					_TKCheckLoop:
.a35d	e8		inx				inx 								; look at next, we know first is identifier.
.a35e	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a361	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a363	f0 f8		beq $a35d			beq 	_TKCheckLoop
.a365	c9 30		cmp #$30			cmp	 	#"0"
.a367	90 0c		bcc $a375			bcc 	_TKEndIdentifier
.a369	c9 3a		cmp #$3a			cmp 	#"9"+1
.a36b	90 f0		bcc $a35d			bcc 	_TKCheckLoop
.a36d	c9 41		cmp #$41			cmp	 	#"A"
.a36f	90 04		bcc $a375			bcc 	_TKEndIdentifier
.a371	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a373	90 e8		bcc $a35d			bcc 	_TKCheckLoop
.a375					_TKEndIdentifier:
.a375	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a378	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a37a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a37c	f0 06		beq $a384			beq 	_TKHasTypeCharacter
.a37e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a380	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a382	d0 07		bne $a38b			bne 	_TKNoTypeCharacter
.a384					_TKHasTypeCharacter:
.a384	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a387	e8		inx				inx 								; read next
.a388	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a38b					_TKNoTypeCharacter:
.a38b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a38d	d0 09		bne $a398			bne 	_TKNoArray
.a38f	e8		inx				inx 								; skip the (
.a390	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a393	09 04		ora #$04			ora 	#$04
.a395	8d 84 04	sta $0484			sta 	identTypeByte
.a398					_TKNoArray:
.a398	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a39b	20 35 a4	jsr $a435			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a39e	a0 a0		ldy #$a0			ldy 	#(KeywordSet0) >> 8
.a3a0	a9 00		lda #$00			lda 	#(KeywordSet0) & $FF
.a3a2	20 a7 9f	jsr $9fa7			jsr 	TokeniseSearchTable
.a3a5	a2 00		ldx #$00			ldx 	#0
.a3a7	b0 1f		bcs $a3c8			bcs 	_TKFoundToken
.a3a9	a0 a1		ldy #$a1			ldy 	#(KeywordSet1) >> 8
.a3ab	a9 32		lda #$32			lda 	#(KeywordSet1) & $FF
.a3ad	20 a7 9f	jsr $9fa7			jsr 	TokeniseSearchTable
.a3b0	a2 81		ldx #$81			ldx 	#$81
.a3b2	b0 14		bcs $a3c8			bcs 	_TKFoundToken
.a3b4	a0 a1		ldy #$a1			ldy 	#(KeywordSet2) >> 8
.a3b6	a9 76		lda #$76			lda 	#(KeywordSet2) & $FF
.a3b8	20 a7 9f	jsr $9fa7			jsr 	TokeniseSearchTable
.a3bb	a2 82		ldx #$82			ldx 	#$82
.a3bd	b0 09		bcs $a3c8			bcs 	_TKFoundToken
.a3bf	20 c5 a4	jsr $a4c5			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a3c2	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a3c5	4c e7 a2	jmp $a2e7			jmp 	_TKTokeniseLoop 			; and go round again.
.a3c8					_TKFoundToken:
.a3c8	48		pha				pha 								; save token
.a3c9	8a		txa				txa 								; shift in X, is there one ?
.a3ca	f0 03		beq $a3cf			beq 	_TKNoTShift
.a3cc	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte 			; if so, write it out
.a3cf					_TKNoTShift:
.a3cf	68		pla				pla 								; restore and write token
.a3d0	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a3d3	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a3d6	4c e7 a2	jmp $a2e7			jmp 	_TKTokeniseLoop 			; and go round again.
.a3d9					TokeniseString:
.a3d9	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a3db	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a3de	e8		inx				inx									; start of quoted string.
.a3df	da		phx				phx 								; push start of string on top
.a3e0	ca		dex				dex
.a3e1					_TSFindEnd:
.a3e1	e8		inx				inx
.a3e2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a3e5	f0 04		beq $a3eb			beq 	_TSEndOfString
.a3e7	c9 22		cmp #$22			cmp 	#'"'
.a3e9	d0 f6		bne $a3e1			bne 	_TSFindEnd
.a3eb					_TSEndOfString:
.a3eb	7a		ply				ply  								; so now Y is first character, X is character after end.
.a3ec	48		pha				pha 								; save terminating character
.a3ed	20 f5 a3	jsr $a3f5			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a3f0	68		pla				pla 								; terminating character
.a3f1	f0 01		beq $a3f4			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a3f3	e8		inx				inx
.a3f4					_TSNotQuote:
.a3f4	60		rts				rts
.a3f5					TOWriteBlockXY:
.a3f5	86 36		stx $36				stx 	zTemp0 						; write end character
.a3f7	98		tya				tya
.a3f8	49 ff		eor #$ff			eor 	#$FF
.a3fa	38		sec				sec
.a3fb	65 36		adc $36				adc 	zTemp0
.a3fd	1a		inc a				inc 	a 							; one extra for NULL
.a3fe	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a401					_TOBlockLoop:
.a401	c4 36		cpy $36				cpy 	zTemp0
.a403	f0 09		beq $a40e			beq 	_TOBlockExit
.a405	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a408	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a40b	c8		iny				iny
.a40c	80 f3		bra $a401			bra 	_TOBlockLoop
.a40e					_TOBlockExit:
.a40e	a9 00		lda #$00			lda 	#0
.a410	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a413	60		rts				rts
.a414					TokeniseHexConstant:
.a414	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a416	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a419	e8		inx				inx									; start of quoted string.
.a41a	da		phx				phx 								; push start of constant on top
.a41b	ca		dex				dex
.a41c					_THFindLoop:
.a41c	e8		inx				inx
.a41d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a420	c9 30		cmp #$30			cmp 	#"0"
.a422	90 0c		bcc $a430			bcc 	_THFoundEnd
.a424	c9 3a		cmp #$3a			cmp 	#"9"+1
.a426	90 f4		bcc $a41c			bcc 	_THFindLoop
.a428	c9 41		cmp #$41			cmp 	#"A"
.a42a	90 04		bcc $a430			bcc 	_THFoundEnd
.a42c	c9 47		cmp #$47			cmp 	#"F"+1
.a42e	90 ec		bcc $a41c			bcc 	_THFindLoop
.a430					_THFoundEnd:
.a430	7a		ply				ply 								; restore start
.a431	20 f5 a3	jsr $a3f5			jsr 	TOWriteBlockXY 				; output the block
.a434	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a435					TokeniseCalculateHash:
.a435	da		phx				phx
.a436	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a439	a9 00		lda #$00			lda 	#0
.a43b					_TCHLoop:
.a43b	18		clc				clc
.a43c	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a43f	e8		inx				inx
.a440	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a443	d0 f6		bne $a43b			bne 	_TCHLoop
.a445	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a448	fa		plx				plx
.a449	60		rts				rts
.a44a					FixLineBufferCase:
.a44a	a2 00		ldx #$00			ldx 	#0
.a44c					_FLBCLoop:
.a44c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a44f	f0 22		beq $a473			beq 	_FLBCExit 					; end of string.
.a451	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a453	f0 11		beq $a466			beq 	_FLBCInQuotes
.a455	e8		inx				inx
.a456	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a458	90 f2		bcc $a44c			bcc 	_FLBCLoop
.a45a	c9 7b		cmp #$7b			cmp 	#'z'+1
.a45c	b0 ee		bcs $a44c			bcs 	_FLBCLoop
.a45e	38		sec				sec 								; make U/C
.a45f	e9 20		sbc #$20			sbc 	#32
.a461	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a464	80 e6		bra $a44c			bra 	_FLBCLoop
.a466					_FLBCInQuotes:
.a466	e8		inx				inx 								; advance
.a467	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a46a	f0 07		beq $a473			beq 	_FLBCExit 					; exit on EOS
.a46c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a46e	d0 f6		bne $a466			bne 	_FLBCInQuotes
.a470	e8		inx				inx 								; skip over it
.a471	80 d9		bra $a44c			bra 	_FLBCLoop
.a473					_FLBCExit:
.a473	60		rts				rts
.a474					TokeniseExtractLineNumber:
.a474	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a477	48		pha				pha
.a478	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a47b	48		pha				pha
.a47c	20 b2 a4	jsr $a4b2			jsr 	_TELNTimes2 				; line # x 4
.a47f	20 b2 a4	jsr $a4b2			jsr 	_TELNTimes2 				; line # x 2
.a482	18		clc				clc 								; add stacked value
.a483	68		pla				pla
.a484	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a487	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a48a	68		pla				pla
.a48b	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a48e	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a491	20 b2 a4	jsr $a4b2			jsr 	_TELNTimes2 				; line # x 10
.a494	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a497	e8		inx				inx
.a498	29 0f		and #$0f			and 	#15 						; add to line #
.a49a	18		clc				clc
.a49b	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a49e	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a4a1	90 03		bcc $a4a6			bcc 	_TLENNoCarry
.a4a3	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a4a6					_TLENNoCarry:
.a4a6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a4a9	c9 30		cmp #$30			cmp 	#'0'
.a4ab	90 04		bcc $a4b1			bcc 	_TLENExit
.a4ad	c9 3a		cmp #$3a			cmp 	#'9'+1
.a4af	90 c3		bcc $a474			bcc 	TokeniseExtractLineNumber
.a4b1					_TLENExit:
.a4b1	60		rts				rts
.a4b2					_TELNTimes2:
.a4b2	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a4b5	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a4b8	60		rts				rts
.a4b9					TokeniseWriteByte:
.a4b9	da		phx				phx
.a4ba	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a4bd	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a4c0	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a4c3	fa		plx				plx
.a4c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a4c5					CheckCreateVariableRecord:
.a4c5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a4c7	85 36		sta $36				sta 	0+zTemp0
.a4c9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a4cb	85 37		sta $37				sta 	1+zTemp0
.a4cd					_CCVSearch:
.a4cd	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a4cf	f0 2c		beq $a4fd			beq 	_CCVFail
.a4d1	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a4d3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a4d5	cd 83 04	cmp $0483			cmp 	identHash
.a4d8	d0 16		bne $a4f0			bne 	_CCVNext
.a4da	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a4dc	ae 80 04	ldx $0480			ldx 	identStart
.a4df					_CCVCompare:
.a4df	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a4e2	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a4e4	e8		inx				inx 								; advance pointers
.a4e5	c8		iny				iny
.a4e6	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a4e7	d0 07		bne $a4f0			bne 	_CCVNext  					; didn't match go to next.
.a4e9	90 f4		bcc $a4df			bcc 	_CCVCompare 				; not finished yet.
.a4eb	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a4ee	f0 41		beq $a531			beq 	_CCVFound 					; yes, we were successful
.a4f0					_CCVNext:
.a4f0	18		clc				clc
.a4f1	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a4f3	65 36		adc $36				adc 	zTemp0
.a4f5	85 36		sta $36				sta 	zTemp0
.a4f7	90 d4		bcc $a4cd			bcc 	_CCVSearch
.a4f9	e6 37		inc $37				inc 	zTemp0+1
.a4fb	80 d0		bra $a4cd			bra 	_CCVSearch
.a4fd					_CCVFail:
.a4fd	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a4ff	ad 83 04	lda $0483			lda 	identHash
.a502	91 36		sta ($36),y			sta 	(zTemp0),y
.a504	c8		iny				iny 								; offset 2 is the type byte
.a505	ad 84 04	lda $0484			lda 	identTypeByte
.a508	91 36		sta ($36),y			sta 	(zTemp0),y
.a50a	c8		iny				iny
.a50b					_CCVData:
.a50b	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a50d	91 36		sta ($36),y			sta 	(zTemp0),y
.a50f	c8		iny				iny
.a510	c0 08		cpy #$08			cpy 	#8
.a512	90 f7		bcc $a50b			bcc 	_CCVData
.a514	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a517					_CCVCopyName:
.a517	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a51a	91 36		sta ($36),y			sta 	(zTemp0),y
.a51c	e8		inx				inx
.a51d	c8		iny				iny
.a51e	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a521	d0 f4		bne $a517			bne 	_CCVCopyName
.a523	98		tya				tya 								; patch offset
.a524	92 36		sta ($36)			sta 	(zTemp0)
.a526	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a528	91 36		sta ($36),y			sta 	(zTemp0),y
.a52a	88		dey				dey
.a52b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a52d	09 80		ora #$80			ora 	#$80
.a52f	91 36		sta ($36),y			sta 	(zTemp0),y
.a531					_CCVFound:
.a531	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a533	38		sec				sec
.a534	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a536	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a538	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a53b	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a53d	20 b9 a4	jsr $a4b9			jsr 	TokeniseWriteByte
.a540	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
