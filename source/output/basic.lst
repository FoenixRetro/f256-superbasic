
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 19 14:40:42 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_JOYBLPAREN                       = $8c; $8c JOYB(
=$8d					KWD_JOYXLPAREN                       = $8d; $8d JOYX(
=$8e					KWD_JOYYLPAREN                       = $8e; $8e JOYY(
=$8f					KWD_LEFTDOLLARLPAREN                 = $8f; $8f LEFT$(
=$90					KWD_LENLPAREN                        = $90; $90 LEN(
=$91					KWD_MIDDOLLARLPAREN                  = $91; $91 MID$(
=$92					KWD_NOTLPAREN                        = $92; $92 NOT(
=$93					KWD_RANDOMLPAREN                     = $93; $93 RANDOM(
=$94					KWD_RIGHTDOLLARLPAREN                = $94; $94 RIGHT$(
=$95					KWD_RNDLPAREN                        = $95; $95 RND(
=$96					KWD_SGNLPAREN                        = $96; $96 SGN(
=$97					KWD_SPCLPAREN                        = $97; $97 SPC(
=$98					KWD_STRDOLLARLPAREN                  = $98; $98 STR$(
=$99					KWD_TIMERLPAREN                      = $99; $99 TIMER(
=$9a					KWD_TRUE                             = $9a; $9a TRUE
=$9b					KWD_VALLPAREN                        = $9b; $9b VAL(
=$9c					KWD_FOR                              = $9c; $9c FOR
=$9d					KWD_IF                               = $9d; $9d IF
=$9e					KWD_PROC                             = $9e; $9e PROC
=$9f					KWD_REPEAT                           = $9f; $9f REPEAT
=$a0					KWD_WHILE                            = $a0; $a0 WHILE
=$a1					KWD_ENDIF                            = $a1; $a1 ENDIF
=$a2					KWD_ENDPROC                          = $a2; $a2 ENDPROC
=$a3					KWD_NEXT                             = $a3; $a3 NEXT
=$a4					KWD_THEN                             = $a4; $a4 THEN
=$a5					KWD_UNTIL                            = $a5; $a5 UNTIL
=$a6					KWD_WEND                             = $a6; $a6 WEND
=$a7					KWD_BY                               = $a7; $a7 BY
=$a8					KWD_CALL                             = $a8; $a8 CALL
=$a9					KWD_CIRCLE                           = $a9; $a9 CIRCLE
=$aa					KWD_CLEAR                            = $aa; $aa CLEAR
=$ab					KWD_CLS                              = $ab; $ab CLS
=$ac					KWD_COLOR                            = $ac; $ac COLOR
=$ad					KWD_COLOUR                           = $ad; $ad COLOUR
=$ae					KWD_DATA                             = $ae; $ae DATA
=$af					KWD_DIM                              = $af; $af DIM
=$b0					KWD_DOWNTO                           = $b0; $b0 DOWNTO
=$b1					KWD_ELSE                             = $b1; $b1 ELSE
=$b2					KWD_FROM                             = $b2; $b2 FROM
=$b3					KWD_GFX                              = $b3; $b3 GFX
=$b4					KWD_GOSUB                            = $b4; $b4 GOSUB
=$b5					KWD_GOTO                             = $b5; $b5 GOTO
=$b6					KWD_HERE                             = $b6; $b6 HERE
=$b7					KWD_IMAGE                            = $b7; $b7 IMAGE
=$b8					KWD_LET                              = $b8; $b8 LET
=$b9					KWD_LINE                             = $b9; $b9 LINE
=$ba					KWD_LOCAL                            = $ba; $ba LOCAL
=$bb					KWD_OFF                              = $bb; $bb OFF
=$bc					KWD_ON                               = $bc; $bc ON
=$bd					KWD_OUTLINE                          = $bd; $bd OUTLINE
=$be					KWD_PLOT                             = $be; $be PLOT
=$bf					KWD_PRINT                            = $bf; $bf PRINT
=$c0					KWD_READ                             = $c0; $c0 READ
=$c1					KWD_RECT                             = $c1; $c1 RECT
=$c2					KWD_REM                              = $c2; $c2 REM
=$c3					KWD_RETURN                           = $c3; $c3 RETURN
=$c4					KWD_SOLID                            = $c4; $c4 SOLID
=$c5					KWD_SPRITE                           = $c5; $c5 SPRITE
=$c6					KWD_TEXT                             = $c6; $c6 TEXT
=$c7					KWD_TO                               = $c7; $c7 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9c					KWC_FIRST_STRUCTURE = $9c
=$a1					KWC_FIRST_STRUCTURE_DEC = $a1
=$a6					KWC_LAST_STRUCTURE = $a6
=$83					KWC_FIRST_UNARY = $83
=$9b					KWC_LAST_UNARY = $9b

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 8a b4	jsr $b48a			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 56 99	jsr $9956			jsr 	PrintStringXA
.8014	20 ed 92	jsr $92ed			jsr 	NewCommand 					; erase current program
.8017	20 fb a5	jsr $a5fb			jsr 	BackloadProgram
.801a	4c 68 94	jmp $9468			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 19-Oct-2022. Build 2104."
>8065	64 6e 65 73 64 61 79 20 31 39 2d 4f 63 74 2d 32
>8075	30 32 32 2e 20 42 75 69 6c 64 20 32 31 30 34 2e

;******  Return to file: ./common/aa.system/00start.asm

>8085	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8088					GXGraphicDraw:
.8088	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.808a	b0 06		bcs $8092			bcs 	_GDCoordinate
.808c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808e	84 37		sty $37				sty 	gxzTemp0+1
.8090	80 3d		bra $80cf			bra 	_GDExecuteA 				; and execute
.8092					_GDCoordinate:
.8092	48		pha				pha 								; save AXY
.8093	da		phx				phx
.8094	5a		phy				phy
.8095	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8097					_GDCopy1:
.8097	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.809a	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809d	ca		dex				dex
.809e	10 f7		bpl $8097			bpl 	_GDCopy1
.80a0	68		pla				pla 								; update Y
.80a1	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a4	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a7	68		pla				pla
.80a8	8d 29 06	sta $0629			sta 	gxCurrentX
.80ab	68		pla				pla 								; get A (command+X.1) back
.80ac	48		pha				pha
.80ad	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80af	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b2	f0 07		beq $80bb			beq 	_GDXOkay 					; check X range
.80b4	ad 29 06	lda $0629			lda 	gxCurrentX
.80b7	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b9	b0 1e		bcs $80d9			bcs 	_GDError
.80bb					_GDXOkay:
.80bb	ad 2b 06	lda $062b			lda 	gxCurrentY
.80be	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c1	b0 16		bcs $80d9			bcs 	_GDError
.80c3	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c5					_GDCopy2:
.80c5	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c8	9d 31 06	sta $0631,x			sta 	gxX0,x
.80cb	ca		dex				dex
.80cc	10 f7		bpl $80c5			bpl 	_GDCopy2
.80ce	68		pla				pla 								; get command back
.80cf					_GDExecuteA:
.80cf	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d1	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d3	b0 05		bcs $80da			bcs 	_GDError2
.80d5	aa		tax				tax
.80d6	7c df 80	jmp ($80df,x)			jmp 	(GRVectorTable,x)
.80d9					_GDError:
.80d9	68		pla				pla 								; throw command
.80da					_GDError2:
.80da	38		sec				sec
.80db	60		rts				rts
.80dc					GXMove:
.80dc	18		clc				clc
.80dd	60		rts				rts
.80de					GRUndefined:
>80de	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80df					GRVectorTable:
>80df	ae 82					.word	GXInitialise             ; $00 Initialise
>80e1	c5 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e3	0d 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e5	60 82					.word	GXClearBitmap            ; $03 Clear
>80e7	8b 84					.word	GXSetColourMode          ; $04 Colour
>80e9	56 86					.word	GXFontHandler            ; $05 DrawFont
>80eb	9e 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ed	06 87					.word	GXSelect                 ; $07 SPRUSE
>80ef	2c 87					.word	GXSelectImage            ; $08 SPRIMG
>80f1	de 80					.word	GRUndefined              ; $09
>80f3	de 80					.word	GRUndefined              ; $0a
>80f5	de 80					.word	GRUndefined              ; $0b
>80f7	de 80					.word	GRUndefined              ; $0c
>80f9	de 80					.word	GRUndefined              ; $0d
>80fb	de 80					.word	GRUndefined              ; $0e
>80fd	de 80					.word	GRUndefined              ; $0f
>80ff	dc 80					.word	GXMove                   ; $10 Move
>8101	59 83					.word	GXLine                   ; $11 Line
>8103	d4 84					.word	GXFrameRectangle         ; $12 FrameRect
>8105	d1 84					.word	GXFillRectangle          ; $13 FillRect
>8107	17 81					.word	GXFrameCircle            ; $14 FrameCircle
>8109	13 81					.word	GXFillCircle             ; $15 FillCircle
>810b	de 80					.word	GRUndefined              ; $16
>810d	de 80					.word	GRUndefined              ; $17
>810f	b9 84					.word	GXPlotPoint              ; $18 Plot
>8111	91 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8113					GXFillCircle:
.8113	a9 ff		lda #$ff			lda 	#255
.8115	80 02		bra $8119			bra 	GXCircle
.8117					GXFrameCircle:
.8117	a9 00		lda #$00			lda 	#0
.8119					GXCircle:
.8119	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811c	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811f	f0 26		beq $8147			beq 	_GXCFail
.8121	20 91 88	jsr $8891			jsr 	GXSortXY 					; topleft/bottomright
.8124	20 c6 87	jsr $87c6			jsr 	GXOpenBitmap 				; start drawing
.8127	20 19 82	jsr $8219			jsr 	GXCircleSetup 				; set up for drawing
.812a	9c 4d 06	stz $064d			stz 	gxYChanged
.812d					_GXCircleDraw:
.812d	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.8130	cd 4b 06	cmp $064b			cmp 	gYCentre
.8133	90 0a		bcc $813f			bcc 	_GXCircleContinue
.8135	d0 03		bne $813a			bne 	_GXNoLast
.8137	20 4c 81	jsr $814c			jsr 	GXPlot1
.813a					_GXNoLast:
.813a	20 d7 87	jsr $87d7			jsr 	GXCloseBitmap 				; close the bitmap
.813d	18		clc				clc
.813e	60		rts				rts
.813f					_GXCircleContinue:
.813f	20 49 81	jsr $8149			jsr 	GXPlot2 					; draw it
.8142	20 c6 81	jsr $81c6			jsr 	GXCircleMove 				; adjust the coordinates
.8145	80 e6		bra $812d			bra 	_GXCircleDraw
.8147					_GXCFail:
.8147	38		sec				sec
.8148	60		rts				rts
.8149					GXPlot2:
.8149	20 4c 81	jsr $814c			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814c					GXPlot1:
.814c	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814f	f0 03		beq $8154			beq 	_GXPlot1Only
.8151	20 70 81	jsr $8170			jsr 	GXPlot0 						; plot and negate
.8154					_GXPlot1Only:
.8154	20 70 81	jsr $8170			jsr 	GXPlot0 						; twice, undoing negation
.8157	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.815a	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815d	8d 4b 06	sta $064b			sta 	gYCentre
.8160	8e 4a 06	stx $064a			stx 	gXCentre
.8163	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8166	a9 ff		lda #$ff			lda 	#$FF
.8168	8d 4d 06	sta $064d			sta 	gxYChanged
.816b	60		rts				rts
.816c	20 70 81	jsr $8170			jsr 	GXPlot0 						; do once
.816f	60		rts				rts
.8170	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8173	f0 05		beq $817a			beq 	_GXPlot0Always
.8175	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8178	f0 2d		beq $81a7			beq 	GXPlot0Exit
.817a					_GXPlot0Always:
.817a	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817c	ad 4b 06	lda $064b			lda 	gYCentre
.817f	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.8182	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8184	ad 4a 06	lda $064a			lda 	gXCentre
.8187	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.818a	48		pha				pha 									; save last offset X
.818b	20 e4 87	jsr $87e4			jsr 	GXPositionCalc 					; calculate position/offset.
.818e	68		pla				pla
.818f	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8190	85 36		sta $36				sta 	gxzTemp0
.8192	64 37		stz $37				stz 	gxzTemp0+1
.8194	26 37		rol $37				rol 	gxzTemp0+1
.8196	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8199	69 80		adc #$80			adc 	#128
.819b	20 24 85	jsr $8524			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819e	38		sec				sec 									; GY = -GY
.819f	a9 00		lda #$00			lda 	#0
.81a1	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a4	8d 4b 06	sta $064b			sta 	gYCentre
.81a7					GXPlot0Exit:
.81a7	60		rts				rts
.81a8					GXSubCopy:
.81a8	85 36		sta $36				sta 	gxzTemp0
.81aa	64 37		stz $37				stz 	gxzTemp0+1
.81ac	29 80		and #$80			and 	#$80
.81ae	f0 02		beq $81b2			beq 	_GXNoSx
.81b0	c6 37		dec $37				dec 	gxzTemp0+1
.81b2					_GXNoSx:
.81b2	38		sec				sec
.81b3	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b6	e5 36		sbc $36				sbc 	gxzTemp0
.81b8	9d 31 06	sta $0631,x			sta 	gXX0,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c0	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c3	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c5	60		rts				rts
.81c6					GXCircleMove:
.81c6	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c9	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81cb	10 0d		bpl $81da			bpl 	_GXEMPositive
.81cd	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81d0	ad 4a 06	lda $064a			lda 	gXCentre
.81d3	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d6	a9 06		lda #$06			lda 	#6  						; and add 6
.81d8	80 15		bra $81ef			bra 	_GXEMAddD
.81da					_GXEMPositive:
.81da	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dd	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81e0	38		sec				sec 								; calculate X-Y
.81e1	ad 4a 06	lda $064a			lda 	gXCentre
.81e4	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e7	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81ea	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ec	ce 4d 06	dec $064d			dec 	gxYChanged
.81ef					_GXEMAddD:
.81ef	18		clc				clc
.81f0	65 38		adc $38				adc 	gxzTemp1
.81f2	85 38		sta $38				sta 	gxzTemp1
.81f4	90 02		bcc $81f8			bcc 	_GXEMNoCarry
.81f6	e6 39		inc $39				inc 	gxzTemp1+1
.81f8					_GXEMNoCarry:
.81f8	60		rts				rts
.81f9					_GXAdd4TimesToD:
.81f9	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fb	29 80		and #$80			and 	#$80
.81fd	f0 02		beq $8201			beq 	_GXA4Unsigned
.81ff	a9 ff		lda #$ff			lda 	#$FF
.8201					_GXA4Unsigned:
.8201	85 37		sta $37				sta 	gxzTemp0+1
.8203	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8205	26 37		rol $37				rol 	gxzTemp0+1
.8207	06 36		asl $36				asl 	gxzTemp0
.8209	26 37		rol $37				rol 	gxzTemp0+1
.820b	18		clc				clc 								; add
.820c	a5 36		lda $36				lda		gxzTemp0
.820e	65 38		adc $38				adc 	gxzTemp1
.8210	85 38		sta $38				sta 	gxzTemp1
.8212	a5 37		lda $37				lda		gxzTemp0+1
.8214	65 39		adc $39				adc 	gxzTemp1+1
.8216	85 39		sta $39				sta 	gxzTemp1+1
.8218	60		rts				rts
.8219					GXCircleSetup:
.8219	38		sec				sec
.821a	ad 37 06	lda $0637			lda 	gxY1
.821d	ed 33 06	sbc $0633			sbc 	gxY0
.8220	4a		lsr a				lsr 	a
.8221	8d 49 06	sta $0649			sta 	gxRadius
.8224	a2 00		ldx #$00			ldx 	#0
.8226	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.8229	a2 02		ldx #$02			ldx 	#2
.822b	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.822e	9c 4a 06	stz $064a			stz 	gXCentre
.8231	ad 49 06	lda $0649			lda 	gxRadius
.8234	8d 4b 06	sta $064b			sta 	gYCentre
.8237	0a		asl a				asl 	a 							; R x 2
.8238	85 36		sta $36				sta 	gxzTemp0
.823a	38		sec				sec
.823b	a9 03		lda #$03			lda 	#3
.823d	e5 36		sbc $36				sbc 	gxzTemp0
.823f	85 38		sta $38				sta 	gxzTemp1
.8241	a9 00		lda #$00			lda 	#0
.8243	e9 00		sbc #$00			sbc 	#0
.8245	85 39		sta $39				sta 	gxzTemp1+1
.8247	60		rts				rts
.8248					_GXCalculateCentre:
.8248	38		sec				sec
.8249	bd 35 06	lda $0635,x			lda 	gxX1,x
.824c	7d 31 06	adc $0631,x			adc 	gXX0,x
.824f	9d 35 06	sta $0635,x			sta 	gXX1,x
.8252	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8255	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8258	4a		lsr a				lsr 	a
.8259	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825c	7e 35 06	ror $0635,x			ror 	gXX1,x
.825f	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8260					GXClearBitmap:
.8260	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8263	f0 24		beq $8289			beq 	_GXCBFail
.8265	20 c6 87	jsr $87c6			jsr 	GXOpenBitmap 				; start access
.8268	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.826a	ad 3d 06	lda $063d			lda 	gxHeight
.826d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8271					_GXCalcLastPage:
.8271	98		tya				tya 								; add to base page
.8272	18		clc				clc
.8273	6d 3b 06	adc $063b			adc 	gxBasePage
.8276	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8278					_GXClearAll:
.8278	20 8b 82	jsr $828b			jsr 	_GXClearBlock 				; clear 8k block
.827b	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827d	a5 0b		lda $0b				lda 	GXEditSlot
.827f	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8282	b0 f4		bcs $8278			bcs 	_GXClearAll
.8284	20 d7 87	jsr $87d7			jsr 	GXCloseBitmap	 			; stop access
.8287	18		clc				clc
.8288	60		rts				rts
.8289					_GXCBFail:
.8289	38		sec				sec
.828a	60		rts				rts
.828b					_GXClearBlock:
.828b	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828d	85 38		sta $38				sta 	0+gxzTemp1
.828f	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8291	85 39		sta $39				sta 	1+gxzTemp1
.8293					_GXCB0:
.8293	a5 36		lda $36				lda 	gxzTemp0
.8295	a0 00		ldy #$00			ldy 	#0
.8297					_GXCB1:
.8297	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8299	c8		iny				iny
.829a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829c	c8		iny				iny
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	d0 f2		bne $8297			bne 	_GXCB1
.82a5	e6 39		inc $39				inc 	gxzTemp1+1
.82a7	a5 39		lda $39				lda 	gxzTemp1+1
.82a9	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82ab	d0 e6		bne $8293			bne 	_GXCB0
.82ad	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ae					GXInitialise:
.82ae	64 01		stz $01				stz 	1
.82b0	a9 01		lda #$01			lda 	#1
.82b2	8d 00 d0	sta $d000			sta 	$D000
.82b5	18		clc				clc
.82b6	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b9	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bc	a2 0f		ldx #$0f			ldx 	#15
.82be					_GXIClear:
.82be	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c1	ca		dex				dex
.82c2	10 fa		bpl $82be			bpl 	_GXIClear
.82c4	60		rts				rts
.82c5					GXControlBitmap:
.82c5	64 01		stz $01				stz 	1
.82c7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c9	29 01		and #$01			and 	#1 							; set bitmap flag
.82cb	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82ce	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82cf	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d6	90 02		bcc $82da			bcc 	_CBNotOn
.82d8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82da					_CBNotOn:
.82da	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dd	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82df	29 07		and #$07			and 	#7
.82e1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e6	d0 02		bne $82ea			bne 	_CBNotDefault
.82e8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82ea					_CBNotDefault:
.82ea	8d 3b 06	sta $063b			sta 	gxBasePage
.82ed	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f0	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f2	8d 03 d1	sta $d103			sta 	$D103
.82f5	a5 36		lda $36				lda 	gxzTemp0
.82f7	8d 02 d1	sta $d102			sta 	$D102
.82fa	9c 01 d1	stz $d101			stz 	$D101
.82fd	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82ff	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8302	29 01		and #$01			and 	#1
.8304	f0 02		beq $8308			beq 	_CBHaveHeight
.8306	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8308					_CBHaveHeight
.8308	8e 3d 06	stx $063d			stx 	gxHeight
.830b	18		clc				clc
.830c	60		rts				rts
.830d					GXControlSprite:
.830d	64 01		stz $01				stz 	1
.830f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8311	29 01		and #$01			and 	#1 							; set sprites flag
.8313	8d 39 06	sta $0639			sta 	gxSpritesOn
.8316	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8317	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.831a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831e	90 02		bcc $8322			bcc 	_CSNotOn
.8320	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8322					_CSNotOn:
.8322	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8325	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8327	d0 02		bne $832b			bne 	_CSNotDefault
.8329	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832b					_CSNotDefault:
.832b	8d 3c 06	sta $063c			sta 	gxSpritePage
.832e	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8331	a5 36		lda $36				lda 	zTemp0
.8333	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8336	a5 37		lda $37				lda 	zTemp0+1
.8338	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833d					_CSClear:
.833d	9e 00 d9	stz $d900,x			stz 	$D900,x
.8340	9e 00 da	stz $da00,x			stz 	$DA00,x
.8343	ca		dex				dex
.8344	d0 f7		bne $833d			bne 	_CSClear
.8346	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8349	18		clc				clc
.834a	60		rts				rts
.834b					GXCalculateBaseAddress:
.834b	85 36		sta $36				sta 	gxzTemp0
.834d	64 37		stz $37				stz 	gxzTemp0+1
.834f	a9 05		lda #$05			lda 	#5
.8351					_GXShift:
.8351	06 36		asl $36				asl 	gxzTemp0
.8353	26 37		rol $37				rol 	gxzTemp0+1
.8355	3a		dec a				dec		a
.8356	d0 f9		bne $8351			bne 	_GXShift
.8358	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8359					GXLine:
.8359	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835c	f0 28		beq $8386			beq 	_GXLFail
.835e	20 c6 87	jsr $87c6			jsr 	GXOpenBitmap
.8361	20 af 88	jsr $88af			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8364	20 2c 84	jsr $842c			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8367	20 e4 87	jsr $87e4			jsr 	GXPositionCalc 				; calculate position/offset.
.836a					_GXDrawLoop:
.836a	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836f	2d 41 06	and $0641			and 	gxANDValue
.8372	4d 40 06	eor $0640			eor 	gxEORValue
.8375	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8377	20 88 83	jsr $8388			jsr 	GXLineIsComplete 			; is the line complete ?
.837a	f0 05		beq $8381			beq 	_GXLExit
.837c	20 a3 83	jsr $83a3			jsr 	GXLineAdvance 				; code as per advance method
.837f	80 e9		bra $836a			bra 	_GXDrawLoop
.8381					_GXLExit:
.8381	20 d7 87	jsr $87d7			jsr 	GXCloseBitmap
.8384	18		clc				clc
.8385	60		rts				rts
.8386					_GXLFail:
.8386	38		sec				sec
.8387	60		rts				rts
.8388					GXLineIsComplete:
.8388	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838b	d0 0f		bne $839c			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838d	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8390	4d 35 06	eor $0635			eor 	GXX1
.8393	d0 06		bne $839b			bne 	_GXLICExit
.8395	ad 32 06	lda $0632			lda 	GXX0+1
.8398	4d 36 06	eor $0636			eor 	GXX1+1
.839b					_GXLICExit:
.839b	60		rts				rts
.839c					_GXLICCompareY:
.839c	ad 37 06	lda $0637			lda 	GXY1
.839f	4d 33 06	eor $0633			eor 	GXY0
.83a2	60		rts				rts
.83a3					GXLineAdvance:
.83a3	18		clc				clc 								; add adjust to position
.83a4	ad 52 06	lda $0652			lda 	GXPosition
.83a7	6d 53 06	adc $0653			adc 	GXAdjust
.83aa	8d 52 06	sta $0652			sta 	GXPosition
.83ad	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83b0	b0 05		bcs $83b7			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b2	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b5	90 0a		bcc $83c1			bcc 	_GXLANoExtra
.83b7					_GXLAOverflow:
.83b7	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83ba	38		sec				sec 								; subtract total and write back
.83bb	ed 54 06	sbc $0654			sbc 	GXTotal
.83be	8d 52 06	sta $0652			sta 	GXPosition
.83c1					_GXLANoExtra:
.83c1	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c4	f0 0d		beq $83d3			beq 	_GXDXLarger
.83c6	20 25 84	jsr $8425			jsr 	GXIncrementY
.83c9	ad 55 06	lda $0655			lda 	GXAddSelect
.83cc	f0 10		beq $83de			beq 	_GXLAExit
.83ce	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d1	80 0b		bra $83de			bra 	_GXLAExit
.83d3					_GXDXLarger:
.83d3	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d6	ad 55 06	lda $0655			lda 	GXAddSelect
.83d9	f0 03		beq $83de			beq 	_GXLAExit
.83db	20 25 84	jsr $8425			jsr 	GXIncrementY
.83de					_GXLAExit:
.83de	60		rts				rts
.83df					GXAdjustX:
.83df	ad 51 06	lda $0651			lda 	GXDXNegative
.83e2	10 25		bpl $8409			bpl 	_GXAXRight
.83e4	ad 31 06	lda $0631			lda 	GXX0
.83e7	d0 03		bne $83ec			bne 	_GXAXNoBorrow
.83e9	ce 32 06	dec $0632			dec 	GXX0+1
.83ec					_GXAXNoBorrow:
.83ec	ce 31 06	dec $0631			dec 	GXX0
.83ef	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f2	ad 44 06	lda $0644			lda 	gsOffset
.83f5	c9 ff		cmp #$ff			cmp 	#$FF
.83f7	d0 0f		bne $8408			bne 	_GXAYExit 					; underflow
.83f9	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fb	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fd	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83ff	b0 07		bcs $8408			bcs 	_GXAYExit
.8401	18		clc				clc
.8402	69 20		adc #$20			adc 	#$20 						; fix up
.8404	85 3d		sta $3d				sta 	gxzScreen+1
.8406	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8408					_GXAYExit:
.8408	60		rts				rts
.8409					_GXAXRight:
.8409	ee 31 06	inc $0631			inc 	GXX0
.840c	d0 03		bne $8411			bne 	_GXAXNoCarry
.840e	ee 32 06	inc $0632			inc 	GXX0+1
.8411					_GXAXNoCarry:
.8411	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8414	d0 0e		bne $8424			bne 	_GXAXExit 					; if not overflowed, exit.
.8416	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8418	a5 3d		lda $3d				lda 	gxzScreen+1
.841a	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841c	90 06		bcc $8424			bcc 	_GXAXExit
.841e	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8420	85 3d		sta $3d				sta 	gxzScreen+1
.8422	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8424					_GXAXExit:
.8424	60		rts				rts
.8425					GXIncrementY:
.8425	ee 33 06	inc $0633			inc 	GXY0
.8428	20 3a 88	jsr $883a			jsr 	GXMovePositionDown
.842b	60		rts				rts
.842c					GXLineSetup:
.842c	ad 37 06	lda $0637			lda 	GXY1
.842f	38		sec				sec
.8430	ed 33 06	sbc $0633			sbc 	GXY0
.8433	4a		lsr a				lsr 	a
.8434	8d 4f 06	sta $064f			sta 	GXDiffY
.8437	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.843a	38		sec				sec
.843b	ad 35 06	lda $0635			lda 	GXX1
.843e	ed 31 06	sbc $0631			sbc 	GXX0
.8441	8d 4e 06	sta $064e			sta 	GXDiffX
.8444	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8447	ed 32 06	sbc $0632			sbc 	GXX0+1
.844a	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844b	6e 4e 06	ror $064e			ror 	GXDiffX
.844e	0a		asl a				asl 	a
.844f	10 0c		bpl $845d			bpl 	_GDXNotNegative
.8451	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8453	38		sec				sec
.8454	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8457	8d 4e 06	sta $064e			sta 	GXDiffX
.845a	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845d					_GDXNotNegative:
.845d	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.8460	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8463	8d 53 06	sta $0653			sta 	GXAdjust
.8466	ad 4e 06	lda $064e			lda 	GXDiffX
.8469	8d 54 06	sta $0654			sta 	GXTotal
.846c	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846f	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8472	90 0f		bcc $8483			bcc 	_GDXNotLarger
.8474	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8477	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.847a	8d 53 06	sta $0653			sta 	GXAdjust
.847d	ad 4f 06	lda $064f			lda 	GXDiffY
.8480	8d 54 06	sta $0654			sta 	GXTotal
.8483					_GDXNotLarger:
.8483	ad 54 06	lda $0654			lda 	GXTotal
.8486	4a		lsr a				lsr 	a
.8487	8d 52 06	sta $0652			sta 	GXPosition
.848a	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848b					GXSetColourMode:
.848b	a6 36		ldx $36				ldx 	gxzTemp0
.848d	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.8490	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8492	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8495	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8497	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.849a	ae 3f 06	ldx $063f			ldx 	gxColour
.849d	8e 40 06	stx $0640			stx 	gxEORValue
.84a0	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a2	90 03		bcc $84a7			bcc 	_GXSDCNotAndColour
.84a4	8e 41 06	stx $0641			stx 	gxANDValue
.84a7					_GXSDCNotAndColour:
.84a7	d0 03		bne $84ac			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a9	9c 40 06	stz $0640			stz 	gxEORValue
.84ac					_GXSDCNotAnd:
.84ac	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ad	90 08		bcc $84b7			bcc 	_GXSDCNoFlip
.84af	ad 41 06	lda $0641			lda	 	gxANDValue
.84b2	49 ff		eor #$ff			eor 	#$FF
.84b4	8d 41 06	sta $0641			sta 	gxANDValue
.84b7					_GXSDCNoFlip:
.84b7	18		clc				clc
.84b8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b9					GXPlotPoint:
.84b9	20 c6 87	jsr $87c6			jsr 	GXOpenBitmap 				; start drawing
.84bc	20 e4 87	jsr $87e4			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84bf	ac 44 06	ldy $0644			ldy 	gsOffset
.84c2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c4	2d 41 06	and $0641			and 	gxANDValue
.84c7	4d 40 06	eor $0640			eor 	gxEORValue
.84ca	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cc	20 d7 87	jsr $87d7			jsr 	GXCloseBitmap 				; stop drawing and exit
.84cf	18		clc				clc
.84d0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d1					GXFillRectangle:
.84d1	38		sec				sec
.84d2	80 01		bra $84d5			bra 	GXRectangle
.84d4					GXFrameRectangle:
.84d4	18		clc				clc
.84d5					GXRectangle:
.84d5	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d8	f0 35		beq $850f			beq 	_GXRFail
.84da	08		php				php 								; save Fill flag (CS)
.84db	20 c6 87	jsr $87c6			jsr 	GXOpenBitmap 				; start drawing
.84de	20 91 88	jsr $8891			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e1	20 e4 87	jsr $87e4			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e4	38		sec				sec 								; sec = Draw line
.84e5	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e8	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84eb	cd 37 06	cmp $0637			cmp 	gxY1
.84ee	f0 19		beq $8509			beq 	_GXRectangleExit
.84f0					_GXRectLoop:
.84f0	20 3a 88	jsr $883a			jsr 	GXMovePositionDown 			; down one.
.84f3	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f6	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f9	cd 37 06	cmp $0637			cmp 	gXY1
.84fc	f0 07		beq $8505			beq 	_GXLastLine
.84fe	28		plp				plp 								; get flag back
.84ff	08		php				php
.8500	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8503	80 eb		bra $84f0			bra 	_GXRectLoop
.8505					_GXLastLine:
.8505	38		sec				sec
.8506	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0
.8509					_GXRectangleExit:
.8509	68		pla				pla 								; throw fill flag.
.850a	20 d7 87	jsr $87d7			jsr 	GXCloseBitmap 				; stop drawing and exit
.850d	18		clc				clc
.850e	60		rts				rts
.850f					_GXRFail:
.850f	38		sec				sec
.8510	60		rts				rts
.8511					GXDrawLineX1X0:
.8511	08		php				php 								; save solid/either-end
.8512	38		sec				sec
.8513	ad 35 06	lda $0635			lda		gXX1
.8516	ed 31 06	sbc $0631			sbc 	gXX0
.8519	85 36		sta $36				sta 	gxzTemp0
.851b	ad 36 06	lda $0636			lda 	gXX1+1
.851e	ed 32 06	sbc $0632			sbc 	gXX0+1
.8521	85 37		sta $37				sta 	gxzTemp0+1
.8523	28		plp				plp
.8524					GXDrawLineTemp0:
.8524	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8526	48		pha				pha
.8527	a5 3d		lda $3d				lda 	gxzScreen+1
.8529	48		pha				pha
.852a	ad 44 06	lda $0644			lda 	gsOffset
.852d	48		pha				pha
.852e	a5 0b		lda $0b				lda 	GXEditSlot
.8530	48		pha				pha
.8531	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8534	90 1e		bcc $8554			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8536					_GXDLTLine:
.8536	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8538	2d 41 06	and $0641			and 	gxANDValue
.853b	4d 40 06	eor $0640			eor 	gxEORValue
.853e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8540	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8542	d0 04		bne $8548			bne 	_GXDLTNoBorrow
.8544	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8546	30 2e		bmi $8576			bmi 	_GXDLTExit
.8548					_GXDLTNoBorrow:
.8548	c6 36		dec $36				dec 	gxzTemp0
.854a	c8		iny				iny 								; next slot.
.854b	d0 e9		bne $8536			bne 	_GXDLTLine
.854d	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854f	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.8552	80 e2		bra $8536			bra 	_GXDLTLine
.8554					_GXDLTEndPoints:
.8554	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8556	2d 41 06	and $0641			and 	gxANDValue
.8559	4d 40 06	eor $0640			eor 	gxEORValue
.855c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855e	98		tya				tya 								; advance to right side
.855f	18		clc				clc
.8560	65 36		adc $36				adc 	gxzTemp0
.8562	a8		tay				tay
.8563	a5 3d		lda $3d				lda 	gxzScreen+1
.8565	65 37		adc $37				adc 	gxzTemp0+1
.8567	85 3d		sta $3d				sta 	gxzScreen+1
.8569	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap 			; fix up.
.856c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856e	2d 41 06	and $0641			and 	gxANDValue
.8571	4d 40 06	eor $0640			eor 	gxEORValue
.8574	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8576					_GXDLTExit:
.8576	68		pla				pla
.8577	85 0b		sta $0b				sta 	GXEditSlot
.8579	68		pla				pla
.857a	8d 44 06	sta $0644			sta 	gsOffset
.857d	68		pla				pla
.857e	85 3d		sta $3d				sta 	gxzScreen+1
.8580	68		pla				pla
.8581	85 3c		sta $3c				sta 	gxzScreen
.8583	60		rts				rts
.8584					GXDLTCheckWrap:
.8584	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8586	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8588	90 06		bcc $8590			bcc 	_GXDLTCWExit
.858a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858c	85 3d		sta $3d				sta 	gxzScreen+1
.858e	e6 0b		inc $0b				inc 	GXEditSlot
.8590					_GXDLTCWExit:
.8590	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8591					GXDrawGraphicElement:
.8591	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8594	3a		dec a				dec 	a
.8595	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8598	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859b	9c 5c 06	stz $065c			stz 	gxHFlip
.859e	2c 5d 06	bit $065d			bit 	gxUseMode
.85a1	10 03		bpl $85a6			bpl 	_GXNotVertical
.85a3	8d 5b 06	sta $065b			sta 	gxVFlip
.85a6					_GXNotVertical:
.85a6	50 03		bvc $85ab			bvc 	_GXNotHorizontal
.85a8	8d 5c 06	sta $065c			sta 	gxHFlip
.85ab					_GXNotHorizontal:
.85ab	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ae	f0 5f		beq $860f			beq 	_GXSLFail
.85b0	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b3	48		pha				pha
.85b4	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b7	8e 58 06	stx $0658			stx 	gxAcquireVector
.85ba	20 c6 87	jsr $87c6			jsr 	gxOpenBitmap 				; open the bitmap.
.85bd	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	4a		lsr a				lsr 	a
.85c3	29 07		and #$07			and		#7
.85c5	1a		inc a				inc 	a
.85c6	8d 5a 06	sta $065a			sta 	gxScale
.85c9	64 38		stz $38				stz 	gxzTemp1					; start first line
.85cb					_GXGELoop:
.85cb	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cd	4d 5b 06	eor $065b			eor 	gxVFlip
.85d0	aa		tax				tax 								; get the Xth line.
.85d1	20 11 86	jsr $8611			jsr 	_GXCallAcquire 				; get that data.
.85d4	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d7	85 39		sta $39				sta 	gxzTemp1+1
.85d9					_GXGELoop2:
.85d9	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85dc	cd 3d 06	cmp $063d			cmp 	gxHeight
.85df	b0 10		bcs $85f1			bcs 	_GXDGEExit
.85e1	20 14 86	jsr $8614			jsr 	GXRenderOneLine 			; render line
.85e4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e6	d0 f1		bne $85d9			bne 	_GXGELoop2
.85e8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85ea	a5 38		lda $38				lda 	gxzTemp1
.85ec	cd 56 06	cmp $0656			cmp 	gxSize
.85ef	d0 da		bne $85cb			bne 	_GXGELoop
.85f1					_GXDGEExit:
.85f1	68		pla				pla 								; restore Y for next time
.85f2	8d 33 06	sta $0633			sta 	gxY0
.85f5	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f8					_GXShiftLeft:
.85f8	18		clc				clc
.85f9	ad 56 06	lda $0656			lda 	gxSize
.85fc	6d 31 06	adc $0631			adc 	gxX0
.85ff	8d 31 06	sta $0631			sta 	gxX0
.8602	90 03		bcc $8607			bcc 	_GXSLNoCarry
.8604	ee 32 06	inc $0632			inc 	gxX0+1
.8607					_GXSLNoCarry:
.8607	ca		dex				dex
.8608	d0 ee		bne $85f8			bne 	_GXShiftLeft
.860a	20 d7 87	jsr $87d7			jsr 	GXCloseBitmap
.860d	18		clc				clc
.860e	60		rts				rts
.860f					_GXSLFail:
.860f	38		sec				sec
.8610	60		rts				rts
.8611					_GXCallAcquire:
.8611	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8614					GXRenderOneLine:
.8614	20 e4 87	jsr $87e4			jsr 	GXPositionCalc 				; calculate position/offset.
.8617	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.861a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861c					_GXROLLoop1:
.861c	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861f	85 3b		sta $3b				sta 	gxzTemp2+1
.8621					_GXROLLoop2:
.8621	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8623	4d 5c 06	eor $065c			eor 	gxHFlip
.8626	aa		tax				tax 								; read from the pixel buffer
.8627	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.862a	d0 07		bne $8633			bne 	_GXDraw 					; draw if non zero
.862c	ad 5d 06	lda $065d			lda 	gxUseMode 					; check to see if solid background
.862f	29 04		and #$04			and 	#4
.8631	f0 0a		beq $863d			beq 	_GXZeroPixel
.8633					_GXDraw:
.8633	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8635	2d 41 06	and $0641			and 	gxANDValue
.8638	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.863b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.863d					_GXZeroPixel:
.863d	c8		iny				iny 								; advance pointer
.863e	d0 05		bne $8645			bne 	_GXNoShift
.8640	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8642	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.8645					_GXNoShift:
.8645	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8647	d0 d8		bne $8621			bne 	_GXROLLoop2
.8649	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.864b	a5 3a		lda $3a				lda 	gxzTemp2
.864d	cd 56 06	cmp $0656			cmp 	gxSize
.8650	d0 ca		bne $861c			bne 	_GXROLLoop1
.8652	ee 33 06	inc $0633			inc 	gxY0
.8655	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8656					GXFontHandler:
.8656	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8658	4d 3e 06	eor $063e			eor 	gxMode
.865b	8d 5d 06	sta $065d			sta 	gxUseMode
.865e	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8660	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8662	26 37		rol $37				rol	 	gxzTemp0+1
.8664	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.8666	26 37		rol $37				rol	 	gxzTemp0+1
.8668	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.866a	26 37		rol $37				rol	 	gxzTemp0+1
.866c	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.866e	09 c0		ora #$c0			ora 	#$C0
.8670	85 37		sta $37				sta 	gxzTemp0+1
.8672	a9 08		lda #$08			lda 	#8 							; size 8x8
.8674	a2 7c		ldx #$7c			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8676	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8678	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.867b	60		rts				rts
.867c					GXGetGraphicDataFont:
.867c	8a		txa				txa 								; X->Y
.867d	a8		tay				tay
.867e	a6 01		ldx $01				ldx 	1 							; preserve old value
.8680	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8682	85 01		sta $01				sta 	1
.8684	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.8686	86 01		stx $01				stx 	1 							; put old value back.
.8688	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.868a					_GXExpand:
.868a	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.868d	0a		asl a				asl 	a 							; shift bit 7 into C
.868e	90 08		bcc $8698			bcc 	_GXNoPixel
.8690	48		pha				pha 								; if set, set pixel buffer to current colour.
.8691	ad 3f 06	lda $063f			lda 	gxColour
.8694	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8697	68		pla				pla
.8698					_GXNoPixel:
.8698	e8		inx				inx 								; do the whole byte.
.8699	e0 08		cpx #$08			cpx 	#8
.869b	d0 ed		bne $868a			bne 	_GXExpand
.869d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.869e					GXSpriteHandler:
.869e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86a0	4d 3e 06	eor $063e			eor 	gxMode
.86a3	8d 5d 06	sta $065d			sta 	gxUseMode
.86a6	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a8	da		phx				phx
.86a9	20 c6 87	jsr $87c6			jsr 	GXOpenBitmap 				; can access sprite information
.86ac	68		pla				pla
.86ad	20 55 88	jsr $8855			jsr 	GXFindSprite 				; get the sprite address
.86b0	20 d7 87	jsr $87d7			jsr 	GXCloseBitmap
.86b3	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86b6	a2 be		ldx #$be			ldx 	#GXSpriteAcquire & $FF
.86b8	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86ba	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.86bd	60		rts				rts
.86be					GXSpriteAcquire:
.86be	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86c1	85 0b		sta $0b				sta 	GXEditSlot
.86c3	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86c5	a9 00		lda #$00			lda 	#0
.86c7	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86ca					_GXTimesRowNumber:
.86ca	18		clc				clc
.86cb	65 36		adc $36				adc 	zTemp0
.86cd	ca		dex				dex
.86ce	10 fa		bpl $86ca			bpl 	_GXTimesRowNumber
.86d0	64 37		stz $37				stz 	gxzTemp0+1
.86d2	0a		asl a				asl 	a 							; row x 2,4,6,8
.86d3	26 37		rol $37				rol 	gxzTemp0+1
.86d5	0a		asl a				asl 	a 							; row x 4,8,12,16
.86d6	26 37		rol $37				rol 	gxzTemp0+1
.86d8	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d9	26 37		rol $37				rol 	gxzTemp0+1
.86db	85 36		sta $36				sta 	gxzTemp0
.86dd	18		clc				clc 								; add base address.
.86de	a5 36		lda $36				lda 	gxzTemp0
.86e0	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86e3	85 36		sta $36				sta 	gxzTemp0
.86e5	a5 37		lda $37				lda 	gxzTemp0+1
.86e7	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86ea					_GXSAFindPage:
.86ea	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86ec	90 06		bcc $86f4			bcc 	_GXSAFoundPage
.86ee	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86f0	e6 0b		inc $0b				inc 	GXEditSlot
.86f2	80 f6		bra $86ea			bra 	_GXSAFindPage
.86f4					_GXSAFoundPage:
.86f4	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86f6	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f8	a0 00		ldy #$00			ldy 	#0
.86fa					_GXSACopyLoop:
.86fa	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86fc	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86ff	c8		iny				iny
.8700	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.8703	d0 f5		bne $86fa			bne 	_GXSACopyLoop
.8705	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.8706					GXSelect:
.8706	ad 39 06	lda $0639			lda 	gxSpritesOn
.8709	f0 1f		beq $872a			beq 	_GXSFail
.870b	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.870d	c9 40		cmp #$40			cmp 	#64
.870f	b0 19		bcs $872a			bcs 	_GXSFail
.8711	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8713	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8715	06 36		asl $36				asl 	gxzTemp0
.8717	06 36		asl $36				asl 	gxzTemp0
.8719	06 36		asl $36				asl 	gxzTemp0
.871b	2a		rol a				rol 	a
.871c	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.871e	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.8721	85 37		sta $37				sta 	gxzTemp0+1
.8723	a5 36		lda $36				lda 	gxzTemp0
.8725	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8728	18		clc				clc
.8729	60		rts				rts
.872a					_GXSFail:
.872a	38		sec				sec
.872b	60		rts				rts
.872c					GXSelectImage:
.872c	ad 39 06	lda $0639			lda 	gxSpritesOn
.872f	f0 5e		beq $878f			beq 	_GXSIFail
.8731	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8734	f0 59		beq $878f			beq 	_GXSIFail
.8736	64 01		stz $01				stz 	1
.8738	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.873a	d0 43		bne $877f			bne 	_GXSIHide
.873c	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.873e	48		pha				pha
.873f	20 c6 87	jsr $87c6			jsr 	GXOpenBitmap
.8742	68		pla				pla
.8743	20 55 88	jsr $8855			jsr 	GXFindSprite
.8746	a0 01		ldy #$01			ldy 	#1
.8748	ad 45 06	lda $0645			lda 	GSCurrentSprite
.874b	85 36		sta $36				sta 	gxzTemp0
.874d	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8750	85 37		sta $37				sta 	gxzTemp0+1
.8752	ad 61 06	lda $0661			lda 	GXSpriteOffset
.8755	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8757	18		clc				clc
.8758	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.875b	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.875e	c8		iny				iny
.875f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8761	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.8764	69 00		adc #$00			adc 	#0
.8766	c8		iny				iny
.8767	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8769	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.876c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.876e	2a		rol a				rol 	a 							; x 2
.876f	0a		asl a				asl 	a 							; x 4
.8770	0a		asl a				asl 	a 							; x 8
.8771	0a		asl a				asl 	a 							; x 16
.8772	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.8775	0a		asl a				asl 	a 							; 1 shift
.8776	09 01		ora #$01			ora 	#1 							; enable sprite.
.8778	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.877a	20 d7 87	jsr $87d7			jsr 	GXCloseBitmap
.877d	18		clc				clc
.877e	60		rts				rts
.877f					_GXSIHide:
.877f	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8782	85 36		sta $36				sta 	gxzTemp0
.8784	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8787	85 37		sta $37				sta 	gxzTemp0+1
.8789	a9 00		lda #$00			lda 	#0
.878b	92 36		sta ($36)			sta 	(gxzTemp0)
.878d	18		clc				clc
.878e	60		rts				rts
.878f					_GXSIFail:
.878f	38		sec				sec
.8790	60		rts				rts
.8791					GXMoveSprite:
.8791	ad 39 06	lda $0639			lda 	gxSpritesOn
.8794	f0 2e		beq $87c4			beq 	_GXSIFail
.8796	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8799	f0 29		beq $87c4			beq 	_GXSIFail
.879b	85 37		sta $37				sta 	gxzTemp0+1
.879d	a0 04		ldy #$04			ldy 	#4
.879f	ad 45 06	lda $0645			lda 	GSCurrentSprite
.87a2	85 36		sta $36				sta 	gxzTemp0
.87a4	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87a6	38		sec				sec
.87a7	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87aa	4a		lsr a				lsr 	a
.87ab	48		pha				pha
.87ac	18		clc				clc
.87ad	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87b0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b2	c8		iny				iny
.87b3	ad 32 06	lda $0632			lda 	gxX0+1
.87b6	69 00		adc #$00			adc 	#0
.87b8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ba	c8		iny				iny
.87bb	68		pla				pla
.87bc	18		clc				clc
.87bd	6d 33 06	adc $0633			adc 	gxY0
.87c0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c2	18		clc				clc
.87c3	60		rts				rts
.87c4					_GXSIFail:
.87c4	38		sec				sec
.87c5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87c6					GXOpenBitmap:
.87c6	78		sei				sei 								; no interrupts here
.87c7	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c9	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87cc	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87ce	85 00		sta $00				sta 	0
.87d0	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87d2	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87d5	58		cli				cli
.87d6	60		rts				rts
.87d7					GXCloseBitmap:
.87d7	78		sei				sei
.87d8	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87db	85 0b		sta $0b				sta 	GXEditSlot
.87dd	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87e0	85 00		sta $00				sta 	0
.87e2	58		cli				cli
.87e3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87e4					GXPositionCalc:
.87e4	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87e6	48		pha				pha
.87e7	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87ea	85 3c		sta $3c				sta 	gxzScreen
.87ec	64 3d		stz $3d				stz 	gxzScreen+1
.87ee	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87f0	26 3d		rol $3d				rol 	gxzScreen+1
.87f2	06 3c		asl $3c				asl 	gxzScreen
.87f4	26 3d		rol $3d				rol 	gxzScreen+1
.87f6	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87f7	65 3c		adc $3c				adc 	gxzScreen
.87f9	85 3c		sta $3c				sta 	gxzScreen
.87fb	90 02		bcc $87ff			bcc 	_GXPCNoCarry
.87fd	e6 3d		inc $3d				inc 	gxzScreen+1
.87ff					_GXPCNoCarry:
.87ff	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8801	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8803	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8805	85 36		sta $36				sta 	gxzTemp0
.8807	64 3d		stz $3d				stz 	gxzScreen+1
.8809	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.880b					_GXPCMultiply32:
.880b	06 3c		asl $3c				asl 	gxzScreen
.880d	26 3d		rol $3d				rol 	gxzScreen+1
.880f	3a		dec a				dec 	a
.8810	d0 f9		bne $880b			bne 	_GXPCMultiply32
.8812	18		clc				clc
.8813	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8816	65 3c		adc $3c				adc 	gxzScreen
.8818	8d 44 06	sta $0644			sta 	gsOffset
.881b	ad 32 06	lda $0632			lda 	GXX0+1
.881e	65 3d		adc $3d				adc 	gxzScreen+1
.8820	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8822	90 04		bcc $8828			bcc 	_GXPCNoOverflow
.8824	29 1f		and #$1f			and 	#$1F 						; fix it up
.8826	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8828					_GXPCNoOverflow:
.8828	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.882a	85 3d		sta $3d				sta 	gxzScreen+1
.882c	64 3c		stz $3c				stz 	gxzScreen
.882e	18		clc				clc
.882f	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8831	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.8834	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.8836	68		pla				pla
.8837	85 36		sta $36				sta 	gxzTemp0
.8839	60		rts				rts
.883a					GXMovePositionDown:
.883a	18		clc				clc 								; add 320 to offset/temp+1
.883b	ad 44 06	lda $0644			lda 	gsOffset
.883e	69 40		adc #$40			adc 	#64
.8840	8d 44 06	sta $0644			sta 	gsOffset
.8843	a5 3d		lda $3d				lda 	gxzScreen+1
.8845	69 01		adc #$01			adc 	#1
.8847	85 3d		sta $3d				sta 	gxzScreen+1
.8849	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.884b	90 07		bcc $8854			bcc 	_GXMPDExit
.884d	38		sec				sec  								; next page
.884e	e9 20		sbc #$20			sbc 	#$20
.8850	85 3d		sta $3d				sta 	gxzScreen+1
.8852	e6 0b		inc $0b				inc 	GXEditSlot
.8854					_GXMPDExit:
.8854	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8855					GXFindSprite:
.8855	aa		tax				tax
.8856	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8859	85 0b		sta $0b				sta 	GXEditSlot
.885b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.885e	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.8861	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8864	48		pha				pha 								; save twice
.8865	48		pha				pha
.8866	29 03		and #$03			and 	#3 							; get sprite size
.8868	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.886b	aa		tax				tax
.886c	bd 8d 88	lda $888d,x			lda 	_GXFXSSTTable,x 			; read sprite size
.886f	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.8872	68		pla				pla 								; get LUT
.8873	4a		lsr a				lsr		a
.8874	4a		lsr a				lsr		a
.8875	29 03		and #$03			and 	#3
.8877	8d 60 06	sta $0660			sta 	GXSpriteLUT
.887a	68		pla				pla 								; address, neeeds to be x 4
.887b	29 f0		and #$f0			and 	#$F0
.887d	8d 61 06	sta $0661			sta 	GXSpriteOffset
.8880	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8883	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8886	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8889	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.888c	60		rts				rts
.888d					_GXFXSSTTable:
>888d	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8891					GXSortXY:
.8891	20 af 88	jsr $88af			jsr 	GXSortY 					; will be sorted on Y now
.8894	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8897	cd 35 06	cmp $0635			cmp 	gxX1
.889a	ad 32 06	lda $0632			lda 	gXX0+1
.889d	ed 36 06	sbc $0636			sbc 	gXX1+1
.88a0	90 0c		bcc $88ae			bcc 	_GXSXYExit 					; X0 < X1 exit
.88a2	a2 00		ldx #$00			ldx 	#0 							; swap them over
.88a4	a0 04		ldy #$04			ldy 	#4
.88a6	20 c3 88	jsr $88c3			jsr 	GXSwapXY
.88a9	e8		inx				inx
.88aa	c8		iny				iny
.88ab	20 c3 88	jsr $88c3			jsr 	GXSwapXY
.88ae					_GXSXYExit:
.88ae	60		rts				rts
.88af					GXSortY:
.88af	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88b2	cd 37 06	cmp $0637			cmp 	gxY1
.88b5	90 0b		bcc $88c2			bcc 	_GXSYSorted
.88b7	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b9	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88bb					_GXSwap1:
.88bb	20 c3 88	jsr $88c3			jsr 	GXSwapXY
.88be	88		dey				dey
.88bf	ca		dex				dex
.88c0	10 f9		bpl $88bb			bpl 	_GXSwap1
.88c2					_GXSYSorted:
.88c2	60		rts				rts
.88c3					GXSwapXY:
.88c3	bd 31 06	lda $0631,x			lda 	gxX0,x
.88c6	48		pha				pha
.88c7	b9 31 06	lda $0631,y			lda 	gxX0,y
.88ca	9d 31 06	sta $0631,x			sta 	gxX0,x
.88cd	68		pla				pla
.88ce	99 31 06	sta $0631,y			sta 	gxX0,y
.88d1	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88d2					AssembleGroup1:
.88d2	a9 ff		lda #$ff			lda 	#$FF
.88d4	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88d7	80 02		bra $88db			bra 	AsmGroup12
.88d9					AssembleGroup2:
.88d9	a5 00		lda $00				lda 	$00
.88db					AsmGroup12:
.88db	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88de	68		pla				pla 								; pop the return address to access the information following.
.88df	fa		plx				plx
.88e0	20 69 89	jsr $8969			jsr 	AccessParameters 			; get opcode and save as base
.88e3	8d a4 04	sta $04a4			sta 	BaseOpcode
.88e6	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.88e9	d0 08		bne $88f3			bne 	_AG12HaveMask
.88eb	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.88ed	20 71 89	jsr $8971			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.88f0	8d a5 04	sta $04a5			sta 	ModeMask
.88f3					_AG12HaveMask:
.88f3	20 ac 8a	jsr $8aac			jsr 	TypeAndCalculateOperand 	; get zero page type
.88f6	da		phx				phx 								; save found address mode
.88f7	20 d5 89	jsr $89d5			jsr 	AssembleModeX
.88fa	fa		plx				plx  								; restore address mode
.88fb	b0 0b		bcs $8908			bcs 	_AG12Exit
.88fd	20 09 89	jsr $8909			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8900	20 d5 89	jsr $89d5			jsr 	AssembleModeX
.8903	b0 03		bcs $8908			bcs 	_AG12Exit
.8905	4c e3 b2	jmp $b2e3			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8908					_AG12Exit:
.8908	60		rts				rts
.8909					PromoteToAbsolute:
.8909	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.890b	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.890d	f0 19		beq $8928			beq 	_PTADo
.890f	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8911	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8913	f0 13		beq $8928			beq 	_PTADo
.8915	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8917	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8919	f0 0d		beq $8928			beq 	_PTADo
.891b	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.891d	e0 d1		cpx #$d1			cpx 	#AM_IND
.891f	f0 07		beq $8928			beq 	_PTADo
.8921	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8923	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8925	f0 01		beq $8928			beq 	_PTADo
.8927	60		rts				rts
.8928					_PTADo:
.8928	aa		tax				tax
.8929	60		rts				rts
.892a					AssembleGroup3:
.892a	68		pla				pla 								; get parameters, which is just the opcode.
.892b	fa		plx				plx
.892c	20 69 89	jsr $8969			jsr 	AccessParameters 			; get and output opcode
.892f	20 81 89	jsr $8981			jsr 	AssemblerWriteByte
.8932	20 10 8b	jsr $8b10			jsr 	CalculateOperand 			; get a 16 bit operand
.8935	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8938	38		sec				sec
.8939	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.893c	48		pha				pha 								; LSB in A
.893d	ad 10 04	lda $0410			lda 	NSMantissa1
.8940	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8943	aa		tax				tax 								; MSB in X
.8944	68		pla				pla
.8945	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8946	69 7f		adc #$7f			adc 	#$7F
.8948	90 01		bcc $894b			bcc 	_AG3NoCarry
.894a	e8		inx				inx
.894b					_AG3NoCarry:
.894b	38		sec				sec 								; fix back and write out anyways.
.894c	e9 80		sbc #$80			sbc 	#$80
.894e	20 81 89	jsr $8981			jsr 	AssemblerWriteByte
.8951	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8953	f0 0a		beq $895f			beq 	_AG3Exit
.8955	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8958	29 01		and #$01			and 	#1
.895a	f0 03		beq $895f			beq 	_AG3Exit
.895c	4c e8 b2	jmp $b2e8			jmp 	RangeError 					; no, branch is out of range
.895f					_AG3Exit:
.895f	60		rts				rts
.8960					AssembleGroup4:
.8960	68		pla				pla 								; pop address
.8961	fa		plx				plx
.8962	20 69 89	jsr $8969			jsr 	AccessParameters 			; access and get first
.8965	20 81 89	jsr $8981			jsr 	AssemblerWriteByte 			; output it.
.8968	60		rts				rts
.8969					AccessParameters:
.8969	8d a1 04	sta $04a1			sta 	ParamStart
.896c	8e a2 04	stx $04a2			stx 	ParamStart+1
.896f	a9 01		lda #$01			lda 	#1
.8971					GetParameter:
.8971	5a		phy				phy
.8972	a8		tay				tay
.8973	ad a1 04	lda $04a1			lda 	ParamStart
.8976	85 36		sta $36				sta 	zTemp0
.8978	ad a2 04	lda $04a2			lda 	ParamStart+1
.897b	85 37		sta $37				sta 	zTemp0+1
.897d	b1 36		lda ($36),y			lda 	(zTemp0),y
.897f	7a		ply				ply
.8980	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8981					AssemblerWriteByte:
.8981	48		pha			pha
.8982	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8985	29 02		and #$02		and 	#2
.8987	f0 1b		beq $89a4		beq 	_AWBNoPrint
.8989	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.898c	20 bf 89	jsr $89bf		jsr 	PrintHex
.898f	ad 9e 04	lda $049e		lda		AssemblerAddress
.8992	20 bf 89	jsr $89bf		jsr 	PrintHex
.8995	a9 20		lda #$20		lda 	#' '
.8997	20 9e b4	jsr $b49e		jsr 	EXTPrintCharacter
.899a	68		pla			pla 									; print byte
.899b	48		pha			pha
.899c	20 bf 89	jsr $89bf		jsr 	PrintHex
.899f	a9 0d		lda #$0d		lda 	#13
.89a1	20 9e b4	jsr $b49e		jsr 	EXTPrintCharacter
.89a4					_AWBNoPrint:
.89a4	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89a7	85 36		sta $36			sta 	zTemp0
.89a9	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89ac	f0 0e		beq $89bc		beq 	_AWBRange
.89ae	85 37		sta $37			sta 	zTemp0+1
.89b0	68		pla			pla 									; write byte out
.89b1	92 36		sta ($36)		sta 	(zTemp0)
.89b3	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89b6	d0 03		bne $89bb		bne 	_AWBNoCarry
.89b8	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89bb					_AWBNoCarry:
.89bb	60		rts			rts
.89bc					_AWBRange:
.89bc	4c e8 b2	jmp $b2e8		jmp 	RangeError
.89bf					PrintHex:
.89bf	48		pha				pha
.89c0	4a		lsr a				lsr 	a
.89c1	4a		lsr a				lsr 	a
.89c2	4a		lsr a				lsr 	a
.89c3	4a		lsr a				lsr 	a
.89c4	20 c8 89	jsr $89c8			jsr 	_PrintNibble
.89c7	68		pla				pla
.89c8					_PrintNibble:
.89c8	29 0f		and #$0f			and 	#15
.89ca	c9 0a		cmp #$0a			cmp 	#10
.89cc	90 02		bcc $89d0			bcc 	_NoShift
.89ce	69 06		adc #$06			adc 	#6
.89d0					_NoShift:
.89d0	69 30		adc #$30			adc 	#48
.89d2	4c 9e b4	jmp $b49e			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89d5					AssembleModeX:
.89d5	5a		phy				phy
.89d6	ad a3 04	lda $04a3			lda 	IsGroup1
.89d9	f0 17		beq $89f2			beq 	_AMXGroup2
.89db	8a		txa				txa 							; is it in group # 1
.89dc	29 40		and #$40			and 	#AM_ISG1
.89de	f0 50		beq $8a30			beq 	_AMXFail 				; no, give up.
.89e0	8a		txa				txa 							; get back.
.89e1	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.89e3	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.89e5	d0 22		bne $8a09			bne 	_AMXHaveInfo
.89e7	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.89ea	c9 81		cmp #$81			cmp 	#$81
.89ec	f0 42		beq $8a30			beq 	_AMXFail
.89ee	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.89f0	80 17		bra $8a09			bra 	_AMXHaveInfo 			; odd design decision there.
.89f2					_AMXGroup2:
.89f2	8a		txa				txa 							; is it in group 2 ?
.89f3	29 20		and #$20			and 	#AM_ISG2
.89f5	f0 39		beq $8a30			beq 	_AMXFail 				; no, give up.
.89f7	8a		txa				txa 							; get the offset into Y
.89f8	29 1f		and #$1f			and 	#$1F
.89fa	4a		lsr a				lsr 	a 						; make it 0-7.
.89fb	4a		lsr a				lsr  	a
.89fc	a8		tay				tay
.89fd	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a00					_AMXCheckOkay:
.8a00	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a01	88		dey				dey
.8a02	10 fc		bpl $8a00			bpl 	_AMXCheckOkay
.8a04	90 2a		bcc $8a30			bcc 	_AMXFail 				; not allowed.
.8a06	8a		txa				txa  							; get mask back
.8a07	29 1f		and #$1f			and 	#$1F
.8a09					_AMXHaveInfo:
.8a09	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a0b	10 05		bpl $8a12			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a0d	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a10	d0 1e		bne $8a30			bne 	_AMXFail
.8a12					_AMXAnySize:
.8a12	18		clc				clc 							; add offset to the base opcode
.8a13	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a16					_AMXOutputCode:
.8a16	20 81 89	jsr $8981			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a19	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a1b	f0 10		beq $8a2d			beq 	_AMXExit
.8a1d	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a20	20 81 89	jsr $8981			jsr 	AssemblerWriteByte
.8a23	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a25	30 06		bmi $8a2d			bmi 	_AMXExit
.8a27	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a2a	20 81 89	jsr $8981			jsr 	AssemblerWriteByte
.8a2d					_AMXExit:
.8a2d	7a		ply				ply
.8a2e	38		sec				sec
.8a2f	60		rts				rts
.8a30					_AMXFail:
.8a30	a0 00		ldy #$00			ldy 	#0
.8a32					_AMXCheckOddities:
.8a32	8a		txa				txa
.8a33	d9 5b 8a	cmp $8a5b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a36	d0 16		bne $8a4e			bne 	_AMXCONext
.8a38	b9 59 8a	lda $8a59,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a3b	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a3e	d0 0e		bne $8a4e			bne 	_AMXCONext
.8a40	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a42	10 05		bpl $8a49			bpl 	_AMXCONotZero
.8a44	ad 10 04	lda $0410			lda 	NSMantissa1
.8a47	d0 05		bne $8a4e			bne 	_AMXCONext
.8a49					_AMXCONotZero:
.8a49	b9 5a 8a	lda $8a5a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a4c	80 c8		bra $8a16			bra 	_AMXOutputCode 			; and assemble it
.8a4e					_AMXCONext:
.8a4e	c8		iny				iny
.8a4f	c8		iny				iny
.8a50	c8		iny				iny
.8a51	b9 59 8a	lda $8a59,y			lda 	ExtraOpcode+0,y 		; end of table
.8a54	d0 dc		bne $8a32			bne 	_AMXCheckOddities
.8a56					_AMXCOFail:
.8a56	7a		ply				ply
.8a57	18		clc				clc
.8a58	60		rts				rts
.8a59					ExtraOpcode:
>8a59	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a5c	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a5f	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a62	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a65	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a68	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a6b	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a6e	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a71	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a74	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a77	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a78					LabelHere:
.8a78	c8		iny				iny 								; skip .
.8a79	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a7b	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm 				; get a term
.8a7e	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a81	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a83	d0 24		bne $8aa9			bne 	_ALType
.8a85	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a88	85 36		sta $36				sta 	zTemp0
.8a8a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a8d	85 37		sta $37				sta 	zTemp0+1
.8a8f	5a		phy				phy 								; copy address in.
.8a90	a0 01		ldy #$01			ldy 	#1
.8a92	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8a95	92 36		sta ($36)			sta 	(zTemp0)
.8a97	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8a9a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9c	c8		iny				iny
.8a9d	a9 00		lda #$00			lda 	#0
.8a9f	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa1	c8		iny				iny
.8aa2	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa4	c8		iny				iny
.8aa5	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa7	7a		ply				ply
.8aa8	60		rts				rts
.8aa9					_ALType:
.8aa9	4c ed b2	jmp $b2ed			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8aac					TypeAndCalculateOperand:
.8aac	b1 30		lda ($30),y			lda 	(codePtr),y
.8aae	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ab0	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ab2	f0 5b		beq $8b0f			beq 	_TACOExit
.8ab4	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ab6	f0 57		beq $8b0f			beq 	_TACOExit
.8ab8	c8		iny				iny
.8ab9	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8abb	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8abd	f0 51		beq $8b10			beq 	CalculateOperand
.8abf	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ac1	f0 1f		beq $8ae2			beq 	_TACOIndirect
.8ac3	88		dey				dey 								; undo get of first character
.8ac4	20 10 8b	jsr $8b10			jsr 	CalculateOperand 			; get operand
.8ac7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ac9	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8acb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8acd	d0 40		bne $8b0f			bne 	_TACOExit
.8acf	c8		iny				iny
.8ad0	20 74 ac	jsr $ac74			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8ad3	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8ad5	c9 58		cmp #$58			cmp 	#'X'
.8ad7	f0 36		beq $8b0f			beq 	_TACOExit
.8ad9	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8adb	c9 59		cmp #$59			cmp 	#'Y'
.8add	f0 30		beq $8b0f			beq 	_TACOExit
.8adf					_TACOSyntax:
.8adf	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
.8ae2					_TACOIndirect:
.8ae2	20 10 8b	jsr $8b10			jsr 	CalculateOperand 			; get the operand
.8ae5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8ae9	f0 17		beq $8b02			beq 	_TACOIndX
.8aeb	20 fd ac	jsr $acfd			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8aee	b1 30		lda ($30),y			lda 	(codePtr),y
.8af0	a2 d1		ldx #$d1			ldx 	#AM_IND
.8af2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8af4	d0 19		bne $8b0f			bne 	_TACOExit
.8af6	c8		iny				iny
.8af7	20 74 ac	jsr $ac74			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8afa	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8afc	d0 e1		bne $8adf			bne 	_TACOSyntax
.8afe	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b00	80 0d		bra $8b0f			bra 	_TACOExit
.8b02					_TACOIndX:
.8b02	c8		iny				iny
.8b03	20 74 ac	jsr $ac74			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b06	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b08	d0 d5		bne $8adf			bne 	_TACOSyntax
.8b0a	20 fd ac	jsr $acfd			jsr 	CheckRightBracket			; check )
.8b0d	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b0f					_TACOExit:
.8b0f	60		rts				rts
.8b10					CalculateOperand:
.8b10	48		pha				pha
.8b11	da		phx				phx
.8b12	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b14	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger
.8b17	fa		plx				plx
.8b18	68		pla				pla
.8b19	60		rts				rts
.ac74					TACOCheckXY:
.ac74	b1 30		lda ($30),y			lda 	(codePtr),y
.ac76	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ac78	c9 40		cmp #$40			cmp 	#$40
.ac7a	d0 21		bne $ac9d			bne 	_TCXYFail
.ac7c	b1 30		lda ($30),y			lda 	(codePtr),y
.ac7e	18		clc				clc
.ac7f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ac81	85 37		sta $37				sta 	zTemp0+1
.ac83	c8		iny				iny
.ac84	b1 30		lda ($30),y			lda 	(codePtr),y
.ac86	c8		iny				iny
.ac87	85 36		sta $36				sta 	zTemp0
.ac89	5a		phy				phy 								; save position
.ac8a	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ac8c	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac8e	d0 0c		bne $ac9c			bne 	_TCXYPopFail
.ac90	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ac92	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac94	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ac96	f0 08		beq $aca0			beq 	_TCXYFound
.ac98	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ac9a	f0 04		beq $aca0			beq 	_TCXYFound
.ac9c					_TCXYPopFail:
.ac9c	7a		ply				ply
.ac9d					_TCXYFail:
.ac9d	a9 00		lda #$00			lda 	#0
.ac9f	60		rts				rts
.aca0					_TCXYFound:
.aca0	7a		ply				ply 								; restore position
.aca1	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.aca3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b1a					EditProgramCode:
.8b1a	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b1d	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8b20	20 34 a5	jsr $a534			jsr 	MemorySearch
.8b23	90 05		bcc $8b2a			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b25	d0 03		bne $8b2a			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b27	20 29 b5	jsr $b529			jsr 	MemoryDeleteLine 			; delete the line
.8b2a					_EPCNoDelete:
.8b2a	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8b2d	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b2f	f0 0d		beq $8b3e			beq 	_EPCNoInsert
.8b31	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b34	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b37	20 34 a5	jsr $a534			jsr 	MemorySearch
.8b3a	18		clc				clc 								; insert at this point.
.8b3b	20 60 b5	jsr $b560			jsr 	MemoryInsertLine 			; insert the line
.8b3e					_EPCNoInsert:
.8b3e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b3f					WarmStart:
.8b3f	a2 ff		ldx #$ff			ldx 	#$FF
.8b41	9a		txs				txs
.8b42	20 b4 b4	jsr $b4b4			jsr 	EXTInputLine 				; get line to lineBuffer
.8b45	20 f5 a9	jsr $a9f5			jsr 	TokeniseLine 				; tokenise the line
.8b48	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8b4b	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8b4e	d0 17		bne $8b67			bne 	_WSEditCode 				; if so,edit code.
.8b50	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b53	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8b55	85 30		sta $30				sta 	codePtr
.8b57	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b59	85 31		sta $31				sta 	codePtr+1
.8b5b	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8b5e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b60	f0 dd		beq $8b3f			beq 	WarmStart
.8b62	20 7a 94	jsr $947a			jsr 	RUNCodePointerLine 			; execute that line.
.8b65	80 d8		bra $8b3f			bra 	WarmStart
.8b67					_WSEditCode:
.8b67	20 1a 8b	jsr $8b1a			jsr 	EditProgramCode
.8b6a	20 d8 8b	jsr $8bd8			jsr 	ClearCommand
.8b6d	80 d0		bra $8b3f			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b6f					AssembleCommand:
.8b6f	a2 00		ldx #$00			ldx 	#0
.8b71	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger 		; start address
.8b74	ad 08 04	lda $0408			lda 	NSMantissa0
.8b77	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b7a	ad 10 04	lda $0410			lda 	NSMantissa1
.8b7d	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b80	20 05 ad	jsr $ad05			jsr 	CheckComma
.8b83	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; options
.8b86	ad 08 04	lda $0408			lda 	NSMantissa0
.8b89	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b8c	60		rts				rts
.8b8d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b8e					AssertCommand:
.8b8e	a2 00		ldx #$00			ldx 	#0
.8b90	20 38 a4	jsr $a438			jsr 	EvaluateInteger 			; the assert test
.8b93	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; exit if result is non zero.
.8b96	d0 05		bne $8b9d			bne 	_ACExit
.8b98	a9 0a		lda #$0a		lda	#10
.8b9a	4c fd 98	jmp $98fd		jmp	ErrorHandler
.8b9d					_ACExit:
.8b9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8b9e					CallCommand:
.8b9e	a2 00		ldx #$00			ldx 	#0
.8ba0	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger
.8ba3					_CCClear
.8ba3	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8ba4	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero
.8ba7	e0 04		cpx #$04			cpx 	#4
.8ba9	d0 f8		bne $8ba3			bne 	_CCClear
.8bab	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8bad					_CCCParam:
.8bad	b1 30		lda ($30),y			lda 	(codePtr),y
.8baf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bb1	d0 09		bne $8bbc			bne 	_CCCRun6502
.8bb3	c8		iny				iny 								; skip comma
.8bb4	e8		inx				inx	 								; next level
.8bb5	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bb8	e0 03		cpx #$03			cpx 	#3
.8bba	90 f1		bcc $8bad			bcc 	_CCCParam 					; done all 3 ?
.8bbc					_CCCRun6502:
.8bbc	5a		phy				phy 								; save position
.8bbd	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bc0	85 37		sta $37				sta 	zTemp0+1
.8bc2	ad 08 04	lda $0408			lda 	NSMantissa0
.8bc5	85 36		sta $36				sta 	zTemp0
.8bc7	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bca	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bcd	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bd0	20 d5 8b	jsr $8bd5			jsr 	_CCCZTemp0 					; call zTemp0
.8bd3	7a		ply				ply 								; restore position and exit
.8bd4	60		rts				rts
.8bd5					_CCCZTemp0:
.8bd5	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8bd8					ClearCommand:
.8bd8	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bda	85 36		sta $36				sta 	0+zTemp0
.8bdc	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bde	85 37		sta $37				sta 	1+zTemp0
.8be0					_ClearZeroLoop:
.8be0	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8be2	f0 24		beq $8c08			beq 	_ClearZeroEnd
.8be4	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8be6	a9 00		lda #$00			lda 	#0
.8be8					_ClearOneVariable:
.8be8	91 36		sta ($36),y			sta 	(zTemp0),y
.8bea	c8		iny				iny
.8beb	c0 08		cpy #$08			cpy 	#8
.8bed	d0 f9		bne $8be8			bne 	_ClearOneVariable
.8bef	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8bf1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bf3	c9 18		cmp #$18			cmp 	#NSTProcedure
.8bf5	d0 04		bne $8bfb			bne 	_ClearNotProcedure
.8bf7	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8bf9	91 36		sta ($36),y			sta 	(zTemp0),y
.8bfb					_ClearNotProcedure:
.8bfb	18		clc				clc 								; go to the next variable
.8bfc	b2 36		lda ($36)			lda 	(zTemp0)
.8bfe	65 36		adc $36				adc 	zTemp0
.8c00	85 36		sta $36				sta 	zTemp0
.8c02	90 dc		bcc $8be0			bcc 	_ClearZeroLoop
.8c04	e6 37		inc $37				inc 	zTemp0+1
.8c06	80 d8		bra $8be0			bra 	_ClearZeroLoop
.8c08					_ClearZeroEnd:
.8c08	18		clc				clc
.8c09	a5 36		lda $36				lda 	zTemp0
.8c0b	69 01		adc #$01			adc 	#1
.8c0d	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c10	a5 37		lda $37				lda 	zTemp0+1
.8c12	69 00		adc #$00			adc 	#0
.8c14	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c17	20 ee a5	jsr $a5ee			jsr 	StackReset
.8c1a	20 43 b6	jsr $b643			jsr 	StringSystemInitialise
.8c1d	20 1d 98	jsr $981d			jsr 	ProcedureScan
.8c20	20 36 94	jsr $9436			jsr 	Command_Restore
.8c23	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c26	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c29	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c2c	20 ca a1	jsr $a1ca			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c30					ClearScreen:
.8c30	5a		phy				phy
.8c31	20 9b b4	jsr $b49b			jsr 	EXTClearScreen
.8c34	7a		ply				ply
.8c35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c36					Command_Data:
.8c36	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c38	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c3a	20 6f 98	jsr $986f			jsr 	ScanForward
.8c3d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c3e					DimCommand:
.8c3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c40	29 c0		and #$c0			and 	#$C0
.8c42	c9 40		cmp #$40			cmp 	#$40
.8c44	d0 7a		bne $8cc0			bne 	_DCSyntax
.8c46	b1 30		lda ($30),y			lda 	(codePtr),y
.8c48	18		clc				clc
.8c49	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c4b	85 3f		sta $3f				sta 	zaTemp+1
.8c4d	c8		iny				iny
.8c4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c50	c8		iny				iny
.8c51	85 3e		sta $3e				sta 	zaTemp
.8c53	5a		phy				phy
.8c54	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c56	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c58	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c5a	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c5c	f0 62		beq $8cc0			beq 	_DCSyntax
.8c5e	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c60	29 04		and #$04			and 	#NSBIsArray
.8c62	f0 64		beq $8cc8			beq 	_DCType
.8c64	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c66	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c68	d0 59		bne $8cc3			bne 	_DCRedefine
.8c6a	7a		ply				ply
.8c6b	20 cb 8c	jsr $8ccb			jsr 	_DCGetSize 				; get array size, check it.
.8c6e	5a		phy				phy
.8c6f	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c71	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c73	7a		ply				ply 							; is there a second (e.g. ,x)
.8c74	b1 30		lda ($30),y			lda 	(codePtr),y
.8c76	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c78	d0 0a		bne $8c84			bne 	_DCOneDimension
.8c7a	c8		iny				iny 							; skip comma
.8c7b	20 cb 8c	jsr $8ccb			jsr 	_DCGetSize 				; get 2nd array size
.8c7e	5a		phy				phy
.8c7f	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c81	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c83	7a		ply				ply
.8c84					_DCOneDimension:
.8c84	5a		phy				phy 							; save position
.8c85	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c87	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c89	aa		tax				tax
.8c8a	c8		iny				iny
.8c8b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c8d	e8		inx				inx 							; bump them.
.8c8e	1a		inc a				inc 	a
.8c8f	20 7f b1	jsr $b17f			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8c92	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8c94	29 e0		and #$e0			and 	#$E0
.8c96	d0 23		bne $8cbb			bne 	_DCSize
.8c98	a0 02		ldy #$02			ldy 	#2 						; get base type
.8c9a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c9c	20 d9 8c	jsr $8cd9			jsr 	ScaleByBaseType 		; scale by base type
.8c9f	a5 36		lda $36				lda 	zTemp0
.8ca1	a6 37		ldx $37				ldx 	zTemp0+1
.8ca3	20 8c a1	jsr $a18c			jsr 	AllocateXABytes 		; allocate memory
.8ca6	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8ca8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8caa	c8		iny				iny
.8cab	8a		txa				txa
.8cac	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cae	7a		ply				ply 							; get position back
.8caf	20 fd ac	jsr $acfd			jsr 	CheckRightBracket 		; check )
.8cb2	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb4	c8		iny				iny 							; consume in case
.8cb5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cb7	f0 85		beq $8c3e			beq 	DimCommand
.8cb9	88		dey				dey 							; undo consume
.8cba	60		rts				rts
.8cbb					_DCSize:
.8cbb	a9 16		lda #$16		lda	#22
.8cbd	4c fd 98	jmp $98fd		jmp	ErrorHandler
.8cc0					_DCSyntax:
.8cc0	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
.8cc3					_DCRedefine:
.8cc3	a9 15		lda #$15		lda	#21
.8cc5	4c fd 98	jmp $98fd		jmp	ErrorHandler
.8cc8					_DCType:
.8cc8	4c ed b2	jmp $b2ed			jmp 	TypeError
.8ccb					_DCGetSize:
.8ccb	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8ccd	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 	; get array dimension
.8cd0	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cd2	f0 e7		beq $8cbb			beq 	_DCSize
.8cd4	c9 fe		cmp #$fe			cmp 	#254
.8cd6	f0 e3		beq $8cbb			beq 	_DCSize
.8cd8	60		rts				rts
.8cd9					ScaleByBaseType:
.8cd9	29 10		and #$10			and 	#NSBIsString 			; is it string
.8cdb	d0 19		bne $8cf6			bne 	_SBBTString
.8cdd	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cdf	48		pha				pha
.8ce0	a5 36		lda $36				lda 	zTemp0
.8ce2	48		pha				pha
.8ce3	06 36		asl $36				asl 	zTemp0 					; x 2
.8ce5	26 37		rol $37				rol 	zTemp0+1
.8ce7	06 36		asl $36				asl 	zTemp0 					; x 4
.8ce9	26 37		rol $37				rol 	zTemp0+1
.8ceb	68		pla				pla 							; add stacked value = x 5
.8cec	65 36		adc $36				adc 	zTemp0
.8cee	85 36		sta $36				sta 	zTemp0
.8cf0	68		pla				pla
.8cf1	65 37		adc $37				adc 	zTemp0+1
.8cf3	85 37		sta $37				sta 	zTemp0+1
.8cf5	60		rts				rts
.8cf6					_SBBTString:
.8cf6	06 36		asl $36				asl 	zTemp0
.8cf8	26 37		rol $37				rol 	zTemp0+1
.8cfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8cfb					EndCommand:
.8cfb	4c 3f 8b	jmp $8b3f			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8cfe					UnaryEvent:
.8cfe	fa		plx				plx
.8cff	20 b3 96	jsr $96b3			jsr 	TimerToStackX 				; timer in +0
.8d02	e8		inx				inx  								; put reference into +1
.8d03	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm
.8d06	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d09	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d0b	d0 57		bne $8d64			bne 	_UEType
.8d0d	e8		inx				inx 								; put the step in +2
.8d0e	20 05 ad	jsr $ad05			jsr 	CheckComma
.8d11	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger
.8d14	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.8d17	ca		dex				dex
.8d18	ca		dex				dex
.8d19	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy reference to zTemp0
.8d1c	85 36		sta $36				sta 	zTemp0
.8d1e	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8d21	85 37		sta $37				sta 	zTemp0+1
.8d23	5a		phy				phy
.8d24	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d26	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d28	30 36		bmi $8d60			bmi 	_UEFalse
.8d2a	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d2f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d31	c8		iny				iny
.8d32	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d35	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d37	c8		iny				iny
.8d38	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d3b	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d3d	90 21		bcc $8d60			bcc 	_UEFalse 					; no, return FALSE.
.8d3f	18		clc				clc
.8d40	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d42	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d45	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d48	91 36		sta ($36),y			sta 	(zTemp0),y
.8d4a	c8		iny				iny
.8d4b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d4e	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d51	91 36		sta ($36),y			sta 	(zTemp0),y
.8d53	c8		iny				iny
.8d54	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d57	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d5a	91 36		sta ($36),y			sta 	(zTemp0),y
.8d5c	7a		ply				ply
.8d5d	4c 6a 99	jmp $996a			jmp 	ReturnTrue
.8d60					_UEFalse:
.8d60	7a		ply				ply 								; restore Y
.8d61	4c 76 99	jmp $9976			jmp 	ReturnFalse 				; and return False
.8d64					_UEType:
.8d64	4c ed b2	jmp $b2ed			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d67					ForCommand:
.8d67	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d69	20 89 a5	jsr $a589			jsr 	StackOpen
.8d6c	a2 00		ldx #$00			ldx 	#0
.8d6e	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm
.8d71	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d74	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d76	d0 49		bne $8dc1			bne		_FCError
.8d78	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d7a	20 0d ad	jsr $ad0d			jsr 	CheckNextA
.8d7d	e8		inx				inx
.8d7e	20 38 a4	jsr $a438			jsr 	EvaluateInteger 			; <from> in +1
.8d81	b1 30		lda ($30),y			lda 	(codePtr),y
.8d83	c8		iny				iny 								; consume it
.8d84	48		pha				pha 								; save on stack for later
.8d85	c9 b0		cmp #$b0			cmp 	#KWD_DOWNTO
.8d87	f0 04		beq $8d8d			beq 	_FCNoSyntax
.8d89	c9 c7		cmp #$c7			cmp 	#KWD_TO
.8d8b	d0 37		bne $8dc4			bne 	_FCSyntaxError
.8d8d					_FCNoSyntax:
.8d8d	e8		inx				inx
.8d8e	20 38 a4	jsr $a438			jsr 	EvaluateInteger
.8d91	20 cd a5	jsr $a5cd			jsr 	STKSaveCodePosition 		; save loop back position
.8d94	68		pla				pla 								; restore DOWNTO or TO
.8d95	5a		phy				phy 								; save Y on the stack
.8d96	49 b0		eor #$b0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8d98	f0 02		beq $8d9c			beq 	_FCNotDownTo
.8d9a	a9 02		lda #$02			lda 	#2
.8d9c					_FCNotDownTo:
.8d9c	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8d9d	a0 10		ldy #$10			ldy 	#16
.8d9f	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8da1	a0 06		ldy #$06			ldy 	#6
.8da3	ad 08 04	lda $0408			lda 	NSMantissa0
.8da6	91 34		sta ($34),y			sta 	(basicStack),y
.8da8	ad 10 04	lda $0410			lda 	NSMantissa1
.8dab	c8		iny				iny
.8dac	91 34		sta ($34),y			sta 	(basicStack),y
.8dae	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8db0	a2 01		ldx #$01			ldx 	#1
.8db2	20 c7 8d	jsr $8dc7			jsr 	FCIntegerToStack
.8db5	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8db7	a2 02		ldx #$02			ldx 	#2
.8db9	20 c7 8d	jsr $8dc7			jsr 	FCIntegerToStack
.8dbc	20 e7 8d	jsr $8de7			jsr 	CopyIndexToReference
.8dbf	7a		ply				ply 								; restore position
.8dc0	60		rts				rts
.8dc1					_FCError:
.8dc1	4c ed b2	jmp $b2ed			jmp 	TypeError
.8dc4					_FCSyntaxError:
.8dc4	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
.8dc7					FCIntegerToStack:
.8dc7	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dca	10 03		bpl $8dcf			bpl	 	_FCNotNegative
.8dcc	20 8a a4	jsr $a48a			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8dcf					_FCNotNegative:
.8dcf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8dd2	91 34		sta ($34),y			sta 	(basicStack),y
.8dd4	c8		iny				iny
.8dd5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dd8	91 34		sta ($34),y			sta 	(basicStack),y
.8dda	c8		iny				iny
.8ddb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dde	91 34		sta ($34),y			sta 	(basicStack),y
.8de0	c8		iny				iny
.8de1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8de4	91 34		sta ($34),y			sta 	(basicStack),y
.8de6	60		rts				rts
.8de7					CopyIndexToReference:
.8de7	5a		phy				phy
.8de8	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8dea	38		sec				sec 								; (because we copy from offset 8)
.8deb	b1 34		lda ($34),y			lda 	(basicStack),y
.8ded	e9 08		sbc #$08			sbc 	#8
.8def	85 36		sta $36				sta 	zTemp0
.8df1	c8		iny				iny
.8df2	b1 34		lda ($34),y			lda 	(basicStack),y
.8df4	e9 00		sbc #$00			sbc 	#0
.8df6	85 37		sta $37				sta 	zTemp0+1
.8df8	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8dfa	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8dfc	b1 34		lda ($34),y			lda 	(basicStack),y
.8dfe	0a		asl a				asl 	a 							; into carry
.8dff	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e01	90 14		bcc $8e17			bcc 	_CITRNormal
.8e03	38		sec				sec
.8e04					_CITRNegative:
.8e04	a9 00		lda #$00			lda 	#0
.8e06	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e08	91 36		sta ($36),y			sta 	(zTemp0),y
.8e0a	c8		iny				iny
.8e0b	ca		dex				dex
.8e0c	d0 f6		bne $8e04			bne 	_CITRNegative
.8e0e	88		dey				dey 								; look at MSB of mantissa
.8e0f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e11	09 80		ora #$80			ora 	#$80
.8e13	91 36		sta ($36),y			sta 	(zTemp0),y
.8e15	7a		ply				ply
.8e16	60		rts				rts
.8e17					_CITRNormal:
.8e17	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e19	91 36		sta ($36),y			sta 	(zTemp0),y
.8e1b	c8		iny				iny
.8e1c	ca		dex				dex
.8e1d	d0 f8		bne $8e17			bne 	_CITRNormal
.8e1f	7a		ply				ply 								; and exit.
.8e20	60		rts				rts
.8e21					NextCommand:
.8e21	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e23	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e25	20 b5 a5	jsr $a5b5			jsr 	StackCheckFrame
.8e28	5a		phy				phy
.8e29	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e2b	b1 34		lda ($34),y			lda 	(basicStack),y
.8e2d	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e2f	30 02		bmi $8e33			bmi 	_NCStepNeg
.8e31	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e33					_NCStepNeg:
.8e33	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e35	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e37	18		clc				clc
.8e38					_NCBump:
.8e38	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e3a	91 34		sta ($34),y			sta 	(basicStack),y
.8e3c	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e3e	c8		iny				iny 								; next byte
.8e3f	ca		dex				dex 								; do four times
.8e40	d0 f6		bne $8e38			bne 	_NCBump
.8e42	20 e7 8d	jsr $8de7			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e45	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e47	b1 34		lda ($34),y			lda 	(basicStack),y
.8e49	0a		asl a				asl 	a 							; sign bit to carry
.8e4a	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e4c	85 38		sta $38				sta 	zTemp1
.8e4e	90 02		bcc $8e52			bcc 	_NCCompRev 					; use if step is +ve
.8e50	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e52					_NCCompRev:
.8e52	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e54	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e56	85 39		sta $39				sta 	zTemp1+1
.8e58	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e5a	38		sec				sec
.8e5b					_NCCompare:
.8e5b	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e5d	b1 34		lda ($34),y			lda 	(basicStack),y
.8e5f	a4 39		ldy $39				ldy 	zTemp1+1
.8e61	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e63	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e65	e6 39		inc $39				inc 	zTemp1+1
.8e67	ca		dex				dex 								; do it 4 times.
.8e68	d0 f1		bne $8e5b			bne 	_NCCompare
.8e6a	50 02		bvc $8e6e			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e6c	49 80		eor #$80			eor 	#$80
.8e6e					_NCNoOverflow:
.8e6e	7a		ply				ply 								; restore Y position
.8e6f	0a		asl a				asl 	a 							; is bit 7 set.
.8e70	90 04		bcc $8e76			bcc 	_NCLoopback 				; if no , >= so loop back
.8e72	20 a7 a5	jsr $a5a7			jsr 	StackClose 					; exit the loop
.8e75	60		rts				rts
.8e76					_NCLoopBack:
.8e76	20 de a5	jsr $a5de			jsr 	STKLoadCodePosition 		; loop back
.8e79	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e7a					RectangleCommand:
.8e7a	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e7c	80 02		bra $8e80			bra 	ShapeDrawCmd
.8e7e					CircleCommand:
.8e7e	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8e80					ShapeDrawCmd:
.8e80	20 0e 8f	jsr $8f0e			jsr 	RunGraphicsCommand
.8e83					ShapeDraw:
.8e83	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8e86	4c 02 8f	jmp $8f02			jmp 	ExecuteGraphicCommand	 	; and complete
.8e89					SpriteCommand:
.8e89	a2 00		ldx #$00			ldx 	#0
.8e8b	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; get image number.
.8e8e	5a		phy				phy
.8e8f	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8e91	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8e94	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8e96	b0 0d		bcs $8ea5			bcs 	_SCRange
.8e98	a0 ff		ldy #$ff			ldy 	#255
.8e9a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8e9d	a9 32		lda #$32			lda 	#25*2
.8e9f	7a		ply				ply
.8ea0	20 0e 8f	jsr $8f0e			jsr 	RunGraphicsCommand
.8ea3	80 5d		bra $8f02			bra 	ExecuteGraphicCommand
.8ea5					_SCRange:
.8ea5	4c e8 b2	jmp $b2e8			jmp 	RangeError
.8ea8					ImageCommand:
.8ea8	a2 00		ldx #$00			ldx 	#0
.8eaa	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; get image number.
.8ead	20 0e 8f	jsr $8f0e			jsr 	RunGraphicsCommand
.8eb0					ImageRunDraw:
.8eb0	09 20		ora #$20			ora 	#16*2 						; move cursor
.8eb2	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8eb5	ad 6a 06	lda $066a			lda 	gxDrawScale
.8eb8	0a		asl a				asl 	a
.8eb9	0a		asl a				asl 	a
.8eba	0a		asl a				asl 	a
.8ebb	a8		tay				tay
.8ebc	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8ebe	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ec1	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ec4	60		rts				rts
.8ec5					TextCommand:
.8ec5	a2 00		ldx #$00			ldx 	#0
.8ec7	20 20 a4	jsr $a420			jsr 	EvaluateString 				; get text
.8eca	20 0e 8f	jsr $8f0e			jsr 	RunGraphicsCommand
.8ecd					TextRunDraw:
.8ecd	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ecf	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ed2	a0 00		ldy #$00			ldy 	#0
.8ed4					_IRDLoop:
.8ed4	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ed7	85 37		sta $37				sta 	zTemp0+1
.8ed9	ad 08 04	lda $0408			lda 	NSMantissa0
.8edc	85 36		sta $36				sta 	zTemp0
.8ede	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ee0	f0 13		beq $8ef5			beq 	_IRDExit
.8ee2	5a		phy				phy									; save string pos
.8ee3	48		pha				pha 								; save char
.8ee4	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8ee7	0a		asl a				asl 	a
.8ee8	0a		asl a				asl 	a
.8ee9	0a		asl a				asl 	a
.8eea	a8		tay				tay
.8eeb	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8eed	fa		plx				plx 								; char to draw
.8eee	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ef1	7a		ply				ply 								; restore string pos
.8ef2	c8		iny				iny
.8ef3	90 df		bcc $8ed4			bcc 	_IRDLoop 					; go back if no error.
.8ef5					_IRDExit:
.8ef5	60		rts				rts
.8ef6					PlotCommand:
.8ef6	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8ef8	20 0e 8f	jsr $8f0e			jsr 	RunGraphicsCommand
.8efb	80 05		bra $8f02			bra 	ExecuteGraphicCommand
.8efd					LineCommand:
.8efd	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8eff	20 0e 8f	jsr $8f0e			jsr 	RunGraphicsCommand
.8f02					ExecuteGraphicCommand:
.8f02	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8f05	20 88 80	jsr $8088			jsr 	GXGraphicDraw 				; draw it and exit
.8f08	b0 01		bcs $8f0b			bcs 	_EGCError
.8f0a	60		rts				rts
.8f0b					_EGCError:
.8f0b	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
.8f0e					RunGraphicsCommand:
.8f0e	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8f11	68		pla				pla 								; pop handler address
.8f12	fa		plx				plx
.8f13	1a		inc a				inc 	a
.8f14	d0 01		bne $8f17			bne 	_RGINoCarry
.8f16	e8		inx				inx
.8f17					_RGINoCarry:
.8f17	8d 68 06	sta $0668			sta 	GXHandler
.8f1a	8e 69 06	stx $0669			stx 	GXHandler+1
.8f1d					_RGICommandLoop:
.8f1d	b1 30		lda ($30),y			lda 	(codePtr),y
.8f1f	c8		iny				iny
.8f20	c9 c7		cmp #$c7			cmp 	#KWD_TO						; is it TO x,y
.8f22	f0 53		beq $8f77			beq 	_RGI_To
.8f24	c9 b6		cmp #$b6			cmp 	#KWD_HERE 					; do it here.
.8f26	f0 55		beq $8f7d			beq 	_RGI_Here
.8f28	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f2a	f0 3d		beq $8f69			beq 	_RGI_Exit
.8f2c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f2e	f0 39		beq $8f69			beq 	_RGI_Exit
.8f30	c9 bd		cmp #$bd			cmp 	#KWD_OUTLINE 				; solid or outline
.8f32	f0 3e		beq $8f72			beq 	_RGI_Frame
.8f34	c9 c4		cmp #$c4			cmp 	#KWD_SOLID
.8f36	f0 33		beq $8f6b			beq 	_RGI_Solid
.8f38	c9 a7		cmp #$a7			cmp 	#KWD_BY 					; by offset
.8f3a	f0 4b		beq $8f87			beq 	_RGI_By
.8f3c	c9 b2		cmp #$b2			cmp 	#KWD_FROM 					; from
.8f3e	f0 17		beq $8f57			beq 	_RGI_Move2
.8f40	c9 af		cmp #$af			cmp 	#KWD_DIM 					; dim (set scale)
.8f42	f0 65		beq $8fa9			beq 	_RGI_Dim
.8f44	c9 ad		cmp #$ad			cmp 	#KWD_COLOUR 				; colour or Color
.8f46	f0 78		beq $8fc0			beq 	_RGI_Colour
.8f48	c9 ac		cmp #$ac			cmp 	#KWD_COLOR
.8f4a	f0 74		beq $8fc0			beq 	_RGI_Colour
.8f4c	ae 63 06	ldx $0663			ldx 	gxCommandID
.8f4f	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f51	d0 03		bne $8f56			bne 	_RGI_Move 					; move
.8f53	4c ea 8f	jmp $8fea			jmp		_RGI_SpriteInstructions
.8f56					_RGI_Move:
.8f56	88		dey				dey 								; unpick get.
.8f57					_RGI_Move2:
.8f57	20 0e 90	jsr $900e			jsr 	GCGetCoordinatePair 		; move to here
.8f5a	20 35 90	jsr $9035			jsr 	GCCopyPairToStore 			; save
.8f5d	5a		phy				phy
.8f5e	20 2b 90	jsr $902b			jsr 	GCLoadAXY 					; load in
.8f61	09 20		ora #$20			ora 	#16*2 						; move there
.8f63	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f66	7a		ply				ply
.8f67	80 b4		bra $8f1d			bra 	_RGICommandLoop 			; and go round
.8f69					_RGI_Exit:
.8f69	88		dey				dey 								; unpick : / EOL
.8f6a	60		rts				rts
.8f6b					_RGI_Solid:
.8f6b	a9 02		lda #$02			lda 	#2
.8f6d	8d 64 06	sta $0664			sta 	gxFillSolid
.8f70	80 ab		bra $8f1d			bra 	_RGICommandLoop
.8f72					_RGI_Frame:
.8f72	9c 64 06	stz $0664			stz 	gxFillSolid
.8f75	80 a6		bra $8f1d			bra 	_RGICommandLoop
.8f77					_RGI_To:
.8f77	20 0e 90	jsr $900e			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f7a	20 35 90	jsr $9035			jsr 	GCCopyPairToStore
.8f7d					_RGI_Here:
.8f7d	5a		phy				phy
.8f7e	20 2b 90	jsr $902b			jsr 	GCLoadAXY 					; load it into AXY
.8f81	20 e7 8f	jsr $8fe7			jsr 	_RGICallHandler 			; go do whatever it is.
.8f84	7a		ply				ply
.8f85	80 96		bra $8f1d			bra 	_RGICommandLoop 			; and go round
.8f87					_RGI_By:
.8f87	20 1b 90	jsr $901b			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8f8a	18		clc				clc
.8f8b	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f8e	6d 65 06	adc $0665			adc 	gxxPos
.8f91	8d 65 06	sta $0665			sta 	gxXPos
.8f94	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8f97	6d 66 06	adc $0666			adc 	gxxPos+1
.8f9a	8d 66 06	sta $0666			sta 	gxXPos+1
.8f9d	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fa0	18		clc				clc
.8fa1	6d 67 06	adc $0667			adc 	gxYPos
.8fa4	8d 67 06	sta $0667			sta 	gxYPos
.8fa7	80 d4		bra $8f7d			bra 	_RGI_Here
.8fa9					_RGI_Dim:
.8fa9	a2 01		ldx #$01			ldx	 	#1
.8fab	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger
.8fae	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fb1	c9 00		cmp #$00			cmp 	#0
.8fb3	f0 2f		beq $8fe4			beq 	_RGIRange
.8fb5	c9 09		cmp #$09			cmp 	#8+1
.8fb7	b0 2b		bcs $8fe4			bcs		_RGIRange
.8fb9	3a		dec a				dec 	a
.8fba	8d 6a 06	sta $066a			sta 	gxDrawScale
.8fbd	4c 1d 8f	jmp $8f1d			jmp 	_RGICommandLoop
.8fc0					_RGI_Colour:
.8fc0	a2 01		ldx #$01			ldx 	#1 							; colour
.8fc2	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger
.8fc5	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fc7	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero
.8fca	b1 30		lda ($30),y			lda 	(codePtr),y
.8fcc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fce	d0 04		bne $8fd4			bne 	_RGICDefaultMode
.8fd0	c8		iny				iny
.8fd1	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger
.8fd4					_RGICDefaultMode:
.8fd4	5a		phy				phy
.8fd5	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8fd7	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8fda	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8fdd	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fe0	7a		ply				ply
.8fe1	4c 1d 8f	jmp $8f1d			jmp 	_RGICommandLoop 			; and go round
.8fe4					_RGIRange:
.8fe4	4c e8 b2	jmp $b2e8			jmp 	RangeError
.8fe7					_RGICallHandler:
.8fe7	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.8fea					_RGI_SpriteInstructions:
.8fea	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.8fec	f0 07		beq $8ff5			beq 	_RGISpriteOff
.8fee	c9 b7		cmp #$b7			cmp 	#KWD_IMAGE
.8ff0	f0 11		beq $9003			beq 	_RGISetImage
.8ff2	4c 56 8f	jmp $8f56			jmp 	_RGI_Move
.8ff5					_RGISpriteOff:
.8ff5	5a		phy				phy
.8ff6	a0 01		ldy #$01			ldy 	#1
.8ff8	a2 00		ldx #$00			ldx 	#0
.8ffa					_RGIDoCommandLoop:
.8ffa	a9 10		lda #$10			lda 	#8*2
.8ffc	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fff	7a		ply				ply
.9000	4c 1d 8f	jmp $8f1d			jmp 	_RGICommandLoop
.9003					_RGISetImage:
.9003	a2 01		ldx #$01			ldx 	#1
.9005	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger
.9008	5a		phy				phy
.9009	aa		tax				tax
.900a	a0 00		ldy #$00			ldy 	#0
.900c	80 ec		bra $8ffa			bra 	_RGIDoCommandLoop
.900e					GCGetCoordinatePair:
.900e	a2 01		ldx #$01			ldx 	#1
.9010	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger
.9013	20 05 ad	jsr $ad05			jsr 	CheckComma
.9016	e8		inx				inx
.9017	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger
.901a	60		rts				rts
.901b					GCSignedCoordinatePair:
.901b	a2 01		ldx #$01			ldx 	#1
.901d	20 59 a4	jsr $a459			jsr 	Evaluate16BitIntegerSigned
.9020	20 05 ad	jsr $ad05			jsr 	CheckComma
.9023	e8		inx				inx
.9024	20 59 a4	jsr $a459			jsr 	Evaluate16BitIntegerSigned
.9027	60		rts				rts
.9028					_GCCPRange:
.9028	4c e8 b2	jmp $b2e8			jmp 	RangeError
.902b					GCLoadAXY:
.902b	ad 66 06	lda $0666			lda 	gxXPos+1
.902e	ae 65 06	ldx $0665			ldx 	gxXPos
.9031	ac 67 06	ldy $0667			ldy 	gxYPos
.9034	60		rts				rts
.9035					GCCopyPairToStore:
.9035	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9038	8d 65 06	sta $0665			sta 	gxXPos
.903b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.903e	8d 66 06	sta $0666			sta 	gxXPos+1
.9041	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9044	8d 67 06	sta $0667			sta 	gxYPos
.9047	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9048					BitmapCtrl:
.9048	b1 30		lda ($30),y			lda 	(codePtr),y
.904a	c8		iny				iny
.904b	a2 01		ldx #$01			ldx 	#1
.904d	c9 bc		cmp #$bc			cmp 	#KWD_ON
.904f	f0 11		beq $9062			beq 	BitmapSwitch
.9051	ca		dex				dex
.9052	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.9054	f0 0c		beq $9062			beq 	BitmapSwitch
.9056	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; get the colour
.9059	5a		phy				phy
.905a	aa		tax				tax
.905b	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.905d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9060	7a		ply				ply
.9061	60		rts				rts
.9062					BitmapSwitch:
.9062	5a		phy				phy
.9063	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9065	a9 02		lda #$02			lda 	#1*2
.9067	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.906a	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.906c	a0 00		ldy #$00			ldy 	#0
.906e	a2 ff		ldx #$ff			ldx 	#$FF
.9070	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9073	9c 64 06	stz $0664			stz 	gxFillSolid
.9076	9c 65 06	stz $0665			stz 	gxXPos
.9079	9c 66 06	stz $0666			stz 	gxXPos+1
.907c	9c 67 06	stz $0667			stz 	gxYPos
.907f	9c 6a 06	stz $066a			stz 	gxDrawScale
.9082	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9084	a2 00		ldx #$00			ldx 	#0
.9086	a0 00		ldy #$00			ldy 	#0
.9088	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.908b	7a		ply				ply
.908c	60		rts				rts
.908d					SpritesCtrl:
.908d	b1 30		lda ($30),y			lda 	(codePtr),y
.908f	c8		iny				iny
.9090	a2 01		ldx #$01			ldx 	#1
.9092	c9 bc		cmp #$bc			cmp 	#KWD_ON
.9094	f0 08		beq $909e			beq 	SpriteSwitch
.9096	ca		dex				dex
.9097	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.9099	f0 03		beq $909e			beq 	SpriteSwitch
.909b	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
.909e					SpriteSwitch:
.909e	5a		phy				phy
.909f	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90a1	a9 04		lda #$04			lda 	#2*2
.90a3	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90a6	7a		ply				ply
.90a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90a8					GfxCommand:
.90a8	a2 00		ldx #$00			ldx 	#0
.90aa	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; command
.90ad	20 05 ad	jsr $ad05			jsr 	CheckComma
.90b0	e8		inx				inx
.90b1	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger 		; X
.90b4	20 05 ad	jsr $ad05			jsr 	CheckComma
.90b7	e8		inx				inx
.90b8	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; Y
.90bb	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90be	4a		lsr a				lsr 	a
.90bf	d0 16		bne $90d7			bne 	_GfxError
.90c1	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90c4	b0 11		bcs $90d7			bcs 	_GfxError 					; bit 7 should have been zero
.90c6	5a		phy				phy 								; save pos
.90c7	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90ca	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90cd	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90d0	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90d3	b0 02		bcs $90d7			bcs 	_GfxError
.90d5	7a		ply				ply 								; restore pos and exit.
.90d6	60		rts				rts
.90d7					_GfxError:
.90d7	4c e8 b2	jmp $b2e8			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90da					Command_GOSUB:
.90da	a2 00		ldx #$00			ldx 	#0
.90dc	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.90df	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.90e1	20 89 a5	jsr $a589			jsr 	StackOpen 					; create frame
.90e4	20 cd a5	jsr $a5cd			jsr 	STKSaveCodePosition 		; save current position
.90e7	4c fd 90	jmp $90fd			jmp 	GotoStackX
.90ea					Command_RETURN:
.90ea	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.90ec	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.90ee	20 b5 a5	jsr $a5b5			jsr 	StackCheckFrame
.90f1	20 de a5	jsr $a5de			jsr 	STKLoadCodePosition 		; restore code position
.90f4	20 a7 a5	jsr $a5a7			jsr 	StackClose
.90f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.90f8					GotoCommand:
.90f8	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.90fa	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger
.90fd					GotoStackX:
.90fd	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9100	48		pha				pha 								; it is slightly inefficient, just in cases.
.9101	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9104	fa		plx				plx
.9105	20 34 a5	jsr $a534			jsr 	MemorySearch 				; transfer to line number AX.
.9108	90 05		bcc $910f			bcc 	_GotoError 					; not found, off end.
.910a	d0 03		bne $910f			bne 	_GotoError 					; not found exactly
.910c	4c 73 94	jmp $9473			jmp 	RunNewLine 					; and go straight to new line code.
.910f					_GotoError:
.910f	a9 0d		lda #$0d		lda	#13
.9111	4c fd 98	jmp $98fd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9114					IfCommand:
.9114	a2 00		ldx #$00			ldx 	#0 							; If what.
.9116	20 15 a4	jsr $a415			jsr 	EvaluateNumber
.9119	b1 30		lda ($30),y			lda 	(codePtr),y
.911b	c9 a4		cmp #$a4			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.911d	d0 0a		bne $9129			bne 	_IFStructured
.911f	c8		iny				iny 								; consume THEN
.9120	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; is it zero
.9123	f0 01		beq $9126			beq 	_IfFail 					; if fail, go to next line
.9125	60		rts				rts 								; if THEN just continue
.9126					_IfFail:
.9126	4c d8 94	jmp $94d8			jmp 	EOLCommand
.9129					_IfStructured:
.9129	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; is it zero
.912c	d0 07		bne $9135			bne 	_IfExit 					; if not, then continue normally.
.912e	a9 b1		lda #$b1			lda 	#KWD_ELSE 					; look for else/endif
.9130	a2 a1		ldx #$a1			ldx 	#KWD_ENDIF
.9132	20 6f 98	jsr $986f			jsr 	ScanForward 				; and run from there/
.9135					_IfExit:
.9135	60		rts				rts
.9136					ElseCode:
.9136	a9 a1		lda #$a1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9138	aa		tax				tax 								; so just go to the structure exit
.9139	20 6f 98	jsr $986f			jsr 	ScanForward
.913c	60		rts				rts
.913d					EndIf:
.913d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.913e					UnaryJoyX:
.913e	18		clc				clc
.913f	80 01		bra $9142			bra 	JoyMain
.9141					UnaryJoyY:
.9141	38		sec				sec
.9142					JoyMain:
.9142	fa		plx				plx 								; get pos
.9143	08		php				php 								; save carry (set for Y)
.9144	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9147	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.914a	20 e2 b4	jsr $b4e2			jsr 	EXTReadController 			; read the controller.
.914d	28		plp				plp
.914e	90 02		bcc $9152			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9150	4a		lsr a				lsr 	a
.9151	4a		lsr a				lsr 	a
.9152					_JMNoShift:
.9152	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9153	b0 0a		bcs $915f			bcs 	_JMIsRight
.9155	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9156	b0 04		bcs $915c			bcs 	_JMIsLeft
.9158	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero 					; zero result
.915b	60		rts				rts
.915c					_JMIsLeft:
.915c	4c 6a 99	jmp $996a			jmp 	ReturnTrue
.915f					_JMIsRight:
.915f	a9 01		lda #$01			lda 	#1
.9161	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.9164	60		rts				rts
.9165					UnaryJoyB:
.9165	fa		plx				plx 								; get pos
.9166	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9169	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.916c	20 e2 b4	jsr $b4e2			jsr 	EXTReadController 			; read the controller.
.916f	4a		lsr a				lsr 	a
.9170	4a		lsr a				lsr 	a
.9171	4a		lsr a				lsr 	a
.9172	4a		lsr a				lsr 	a
.9173	29 01		and #$01			and 	#1
.9175	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.9178	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9179					LetCommand:
.9179	a2 00		ldx #$00			ldx 	#0
.917b	b1 30		lda ($30),y			lda 	(codePtr),y
.917d	c9 10		cmp #$10			cmp 	#KWD_AT
.917f	d0 16		bne $9197			bne 	_LCStandard
.9181	c8		iny				iny 								; skip equal
.9182	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm 				; get a number
.9185	20 1b 9e	jsr $9e1b			jsr 	Dereference 				; dereference it
.9188	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.918b	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.918d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9190	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.9192	d0 10		bne $91a4			bne 	_LCMain
.9194	4c ed b2	jmp $b2ed			jmp 	TypeError 					; was a reference before.
.9197					_LCStandard:
.9197	ad ee 9c	lda $9cee			lda 	PrecedenceLevel+"*"			; precedence > this
.919a	20 08 9d	jsr $9d08			jsr 	EvaluateExpressionAtPrecedence
.919d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91a0	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91a2	f0 0e		beq $91b2			beq 	_LetGoProc 					; it's a procedure call.
.91a4					_LCMain:
.91a4	a9 3d		lda #$3d			lda 	#"=" 						; check =
.91a6	20 0d ad	jsr $ad0d			jsr 	CheckNextA
.91a9	e8		inx				inx 								; RHS
.91aa	20 0c a4	jsr $a40c			jsr 	EvaluateValue
.91ad	ca		dex				dex
.91ae	20 b5 91	jsr $91b5			jsr 	AssignVariable
.91b1	60		rts				rts
.91b2					_LetGoProc:
.91b2	4c 4e 93	jmp $934e			jmp 	CallProcedure
.91b5					AssignVariable:
.91b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91b8	48		pha				pha 								; save a copy
.91b9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91bc	29 10		and #$10			and 	#NSBIsString
.91be	d0 0b		bne $91cb			bne 	_ASError
.91c0	68		pla				pla 								; get back
.91c1	29 10		and #$10			and 	#NSBIsString 				; check type
.91c3	d0 03		bne $91c8			bne 	_ASString
.91c5	4c 43 9d	jmp $9d43			jmp 	AssignNumber
.91c8					_ASString:
.91c8	4c b1 9d	jmp $9db1			jmp 	AssignString
.91cb					_ASError:
.91cb	4c ed b2	jmp $b2ed			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91ce					Command_List:
.91ce	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91d1	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91d4	a9 ff		lda #$ff			lda 	#$FF
.91d6	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91d9	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91dc	b1 30		lda ($30),y			lda 	(codePtr),y
.91de	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91e0	f0 1e		beq $9200			beq 	_CLSecond
.91e2	20 5e 92	jsr $925e			jsr 	CLIsDigit 					; if not digit, list all
.91e5	b0 24		bcs $920b			bcs 	_CLStart
.91e7	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91e9	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger
.91ec	b1 30		lda ($30),y			lda 	(codePtr),y
.91ee	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91f0	f0 0e		beq $9200			beq 	_CLSecond 					; if so go get it
.91f2	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.91f5	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91f8	ad 14 04	lda $0414			lda 	NSMantissa1+4
.91fb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91fe	80 0b		bra $920b			bra 	_CLStart
.9200					_CLSecond:
.9200	c8		iny				iny 								; consume comma
.9201	20 5e 92	jsr $925e			jsr 	CLIsDigit 					; digit found
.9204	b0 05		bcs $920b			bcs 	_CLStart 					; if not, continue listing
.9206	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9208	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger
.920b					_CLStart
.920b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.920d	85 30		sta $30				sta 	codePtr
.920f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9211	85 31		sta $31				sta 	codePtr+1
.9213					_CLLoop:
.9213	20 df b4	jsr $b4df			jsr 	EXTBreakCheck 				; break check
.9216	f0 30		beq $9248			beq 	_CLExit
.9218	b2 30		lda ($30)			lda 	(codePtr)
.921a	f0 2c		beq $9248			beq 	_CLExit
.921c	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.921e	20 4b 92	jsr $924b			jsr 	CLCompareLineNo
.9221	90 18		bcc $923b			bcc 	_CLNext
.9223	a2 07		ldx #$07			ldx 	#7
.9225	20 4b 92	jsr $924b			jsr 	CLCompareLineNo
.9228	f0 02		beq $922c			beq 	_CLDoThisOne
.922a	b0 0f		bcs $923b			bcs 	_CLNext
.922c					_CLDoThisOne:
.922c	20 cb 96	jsr $96cb			jsr 	ListConvertLine 			; convert line into token Buffer
.922f	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9231	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.9233	20 56 99	jsr $9956			jsr 	PrintStringXA
.9236	a9 0d		lda #$0d			lda 	#13 						; new line
.9238	20 9e b4	jsr $b49e			jsr 	EXTPrintCharacter
.923b					_CLNext:
.923b	18		clc				clc
.923c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.923e	65 30		adc $30				adc 	codePtr
.9240	85 30		sta $30				sta 	codePtr
.9242	90 02		bcc $9246			bcc 	_CREExit
.9244	e6 31		inc $31				inc 	codePtr+1
.9246					_CREExit:
.9246	80 cb		bra $9213			bra 	_CLLoop
.9248					_CLExit:
.9248	4c 3f 8b	jmp $8b3f			jmp 	WarmStart
.924b					CLCompareLineNo:
.924b	38		sec				sec
.924c	a0 01		ldy #$01			ldy 	#1
.924e	b1 30		lda ($30),y			lda 	(codePtr),y
.9250	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9253	85 36		sta $36				sta 	zTemp0
.9255	c8		iny				iny
.9256	b1 30		lda ($30),y			lda 	(codePtr),y
.9258	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.925b	05 36		ora $36				ora 	zTemp0
.925d	60		rts				rts
.925e					CLIsDigit:
.925e	b1 30		lda ($30),y			lda 	(codePtr),y
.9260	c9 30		cmp #$30			cmp 	#"0"
.9262	90 03		bcc $9267			bcc	 	_CLIDExitFalse
.9264	c9 3a		cmp #$3a			cmp 	#"9"+1
.9266	60		rts				rts
.9267					_CLIDExitFalse:
.9267	38		sec				sec
.9268	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9269					Command_LOCAL:
.9269	a2 00		ldx #$00			ldx 	#0 							; at level 0
.926b	20 77 92	jsr $9277			jsr 	LocaliseNextTerm 			; convert term to a local.
.926e	b1 30		lda ($30),y			lda 	(codePtr),y
.9270	c8		iny				iny
.9271	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9273	f0 f4		beq $9269			beq 	Command_LOCAL
.9275	88		dey				dey 								; unpick pre-get
.9276	60		rts				rts
.9277					LocaliseNextTerm:
.9277	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm 				; evaluate the term
.927a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.927d	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.927f	f0 69		beq $92ea			beq		_LNTError
.9281	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9284	85 36		sta $36				sta 	zTemp0
.9286	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9289	85 37		sta $37				sta  	zTemp0+1
.928b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.928e	29 10		and #$10			and 	#NSBIsString
.9290	d0 22		bne $92b4			bne 	_LNTPushString
.9292	5a		phy				phy
.9293	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9295					_LNTPushNumLoop:
.9295	b1 36		lda ($36),y			lda		(zTemp0),y
.9297	20 67 a5	jsr $a567			jsr 	StackPushByte
.929a	a9 00		lda #$00			lda 	#0
.929c	91 36		sta ($36),y			sta 	(zTemp0),y
.929e	c8		iny				iny
.929f	c0 05		cpy #$05			cpy 	#5
.92a1	d0 f2		bne $9295			bne 	_LNTPushNumLoop
.92a3	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.92a5	20 67 a5	jsr $a567			jsr 	StackPushByte
.92a8	a5 37		lda $37				lda 	zTemp0+1
.92aa	20 67 a5	jsr $a567			jsr 	StackPushByte
.92ad	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92af	20 67 a5	jsr $a567			jsr 	StackPushByte
.92b2	7a		ply				ply
.92b3	60		rts				rts
.92b4					_LNTPushString:
.92b4	5a		phy				phy
.92b5	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92b7	85 38		sta $38				sta 	zTemp1
.92b9	a0 01		ldy #$01			ldy 	#1
.92bb	b1 36		lda ($36),y			lda 	(zTemp0),y
.92bd	85 39		sta $39				sta 	zTemp1+1
.92bf	a0 00		ldy #$00			ldy 	#0 							; output string
.92c1	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92c3	f0 0a		beq $92cf			beq 	_LNTStringOut
.92c5					_LNTPushStrLoop:
.92c5	b1 38		lda ($38),y			lda 	(zTemp1),y
.92c7	f0 06		beq $92cf			beq 	_LNTStringOut
.92c9	20 67 a5	jsr $a567			jsr 	StackPushByte
.92cc	c8		iny				iny
.92cd	80 f6		bra $92c5			bra 	_LNTPushStrLoop
.92cf					_LNTStringOut:
.92cf	98		tya				tya									; output length
.92d0	20 67 a5	jsr $a567			jsr 	StackPushByte
.92d3	a9 00		lda #$00			lda 	#0 							; clear original string.
.92d5	92 38		sta ($38)			sta 	(zTemp1)
.92d7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92da	20 67 a5	jsr $a567			jsr 	StackPushByte
.92dd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92e0	20 67 a5	jsr $a567			jsr 	StackPushByte
.92e3	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92e5	20 67 a5	jsr $a567			jsr 	StackPushByte
.92e8	7a		ply				ply
.92e9	60		rts				rts
.92ea					_LNTError:
.92ea	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
.aca4					LocalPopValue:
.aca4	20 80 a5	jsr $a580			jsr 	StackPopByte
.aca7	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.aca9	d0 17		bne $acc2			bne 	_LPVString
.acab	20 80 a5	jsr $a580			jsr 	StackPopByte 				; address
.acae	85 37		sta $37				sta 	zTemp0+1
.acb0	20 80 a5	jsr $a580			jsr 	StackPopByte
.acb3	85 36		sta $36				sta 	zTemp0
.acb5	5a		phy				phy
.acb6	a0 04		ldy #$04			ldy 	#4 							; copy back
.acb8					_LPVNumberCopy:
.acb8	20 80 a5	jsr $a580			jsr 	StackPopByte
.acbb	91 36		sta ($36),y			sta 	(zTemp0),y
.acbd	88		dey				dey
.acbe	10 f8		bpl $acb8			bpl 	_LPVNumberCopy
.acc0	7a		ply				ply 								; and complete
.acc1	60		rts				rts
.acc2					_LPVString:
.acc2	20 80 a5	jsr $a580			jsr 	StackPopByte 				; address of record => zTemp0
.acc5	85 37		sta $37				sta 	zTemp0+1
.acc7	20 80 a5	jsr $a580			jsr 	StackPopByte
.acca	85 36		sta $36				sta 	zTemp0
.accc	5a		phy				phy
.accd	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.accf	85 38		sta $38				sta 	zTemp1
.acd1	a0 01		ldy #$01			ldy 	#1
.acd3	b1 36		lda ($36),y			lda 	(zTemp0),y
.acd5	85 39		sta $39				sta 	zTemp1+1
.acd7	20 80 a5	jsr $a580			jsr 	StackPopByte 				; # to get => y
.acda	a8		tay				tay
.acdb	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.acdd	f0 0e		beq $aced			beq 	_LPVStringCopied
.acdf	a9 00		lda #$00			lda 	#0 							; NULL on end
.ace1	91 38		sta ($38),y			sta 	(zTemp1),y
.ace3					_LPVStringCopy:
.ace3	88		dey				dey
.ace4	30 07		bmi $aced			bmi 	_LPVStringCopied
.ace6	20 80 a5	jsr $a580			jsr 	StackPopByte
.ace9	91 38		sta ($38),y			sta 	(zTemp1),y
.aceb	80 f6		bra $ace3			bra 	_LPVStringCopy
.aced					_LPVStringCopied:
.aced	fa		plx				plx
.acee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.92ed					NewCommand:
.92ed	20 12 a5	jsr $a512			jsr 	MemoryNew
.92f0	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.92f3	20 d8 8b	jsr $8bd8			jsr 	ClearCommand 				; clear everything.
.92f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.92f7					Command_Print:
.92f7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.92f8					_CPLoop:
.92f8	08		php				php 								; save last action flag
.92f9	b1 30		lda ($30),y			lda 	(codePtr),y
.92fb	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.92fd	f0 46		beq $9345			beq 	_CPExit
.92ff	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9301	f0 42		beq $9345			beq 	_CPExit
.9303	68		pla				pla 								; throw last action flag
.9304	b1 30		lda ($30),y			lda 	(codePtr),y
.9306	c8		iny				iny
.9307	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9309	f0 37		beq $9342			beq 	_CPContinueWithSameLine
.930b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.930d	f0 2e		beq $933d			beq 	_CPTab
.930f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9311	f0 26		beq $9339			beq 	_CPNewLine
.9313	88		dey				dey 								; undo the get.
.9314	a2 00		ldx #$00			ldx 	#0
.9316	20 0c a4	jsr $a40c			jsr 	EvaluateValue 				; get a value into slot 0
.9319	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.931c	29 10		and #$10			and 	#NSBIsString
.931e	f0 0b		beq $932b			beq 	_CPNumber
.9320	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9323	ad 08 04	lda $0408			lda 	NSMantissa0
.9326	20 56 99	jsr $9956			jsr 	PrintStringXA
.9329	80 cc		bra $92f7			bra 	Command_Print 				; loop round clearing carry so NL if end
.932b					_CPNumber:
.932b	a9 05		lda #$05			lda 	#5 							; maximum decimals
.932d	20 e2 a2	jsr $a2e2			jsr 	ConvertNumberToString 		; convert to string
.9330	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9332	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.9334	20 56 99	jsr $9956			jsr 	PrintStringXA
.9337	80 be		bra $92f7			bra 	Command_Print 				; loop round clearing carry so NL if end
.9339					_CPNewLine:
.9339	a9 0d		lda #$0d			lda 	#13
.933b	80 02		bra $933f			bra 	_CPPrintChar
.933d					_CPTab:
.933d	a9 09		lda #$09			lda 	#9 							; print TAB
.933f					_CPPrintChar:
.933f	20 9e b4	jsr $b49e			jsr 	EXTPrintCharacter
.9342					_CPContinueWithSameLine:
.9342	38		sec				sec 								; loop round with carry set, which
.9343	80 b3		bra $92f8			bra 	_CPLoop 					; will inhibit final CR
.9345					_CPExit:
.9345	28		plp				plp 								; get last action flag
.9346	b0 05		bcs $934d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.9348	a9 0d		lda #$0d			lda 	#13 						; print new line
.934a	20 9e b4	jsr $b49e			jsr 	EXTPrintCharacter
.934d					_CPExit2:
.934d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.934e					CallProcedure:
.934e	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9350	b1 30		lda ($30),y			lda 	(codePtr),y
.9352	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9354	f0 0c		beq $9362			beq 	_CPEndParam
.9356					_CPParamLoop:
.9356	20 06 9d	jsr $9d06			jsr 	EvaluateExpression 			; get parameter onto stack
.9359	e8		inx				inx 								; bump next stack
.935a	b1 30		lda ($30),y			lda 	(codePtr),y
.935c	c8		iny				iny
.935d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.935f	f0 f5		beq $9356			beq 	_CPParamLoop
.9361	88		dey				dey 								; unpick.
.9362					_CPEndParam:
.9362	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.9365	c8		iny				iny									; skip right bracket
.9366	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9368	20 89 a5	jsr $a589			jsr 	StackOpen
.936b	20 cd a5	jsr $a5cd			jsr 	STKSaveCodePosition 		; save loop position
.936e	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9371	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9373	ad 10 04	lda $0410			lda 	NSMantissa1
.9376	85 37		sta $37				sta 	zTemp0+1
.9378	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.937a	b2 36		lda ($36)			lda 	(zTemp0)
.937c	85 30		sta $30				sta 	safePtr
.937e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9380	85 31		sta $31				sta 	safePtr+1
.9382	c8		iny				iny
.9383	b1 36		lda ($36),y			lda 	(zTemp0),y
.9385	85 32		sta $32				sta 	safePtr+2
.9387	c8		iny				iny
.9388	b1 36		lda ($36),y			lda 	(zTemp0),y
.938a	85 33		sta $33				sta 	safePtr+3
.938c	c8		iny				iny 								; get Y offset -> Y
.938d	b1 36		lda ($36),y			lda 	(zTemp0),y
.938f	a8		tay				tay
.9390	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9392	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.9395	f0 13		beq $93aa			beq 	_ParamExit 					; if so, exit.
.9397					_ParamExtract:
.9397	ca		dex				dex 								; put a local term on the level before
.9398	20 77 92	jsr $9277			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.939b	20 b5 91	jsr $91b5			jsr 	AssignVariable 				; assign stacked value to the variable.
.939e	e8		inx				inx 								; advance to next parameter to do.
.939f	e8		inx				inx
.93a0	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.93a3	f0 05		beq $93aa			beq 	_ParamExit
.93a5	20 05 ad	jsr $ad05			jsr 	CheckComma 					; comma seperating parameters
.93a8	80 ed		bra $9397			bra 	_ParamExtract
.93aa					_ParamExit:
.93aa	20 fd ac	jsr $acfd			jsr 	CheckRightBracket 			; check )
.93ad	60		rts				rts 								; and continue from here
.acef					Command_ENDPROC:
.acef	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.acf1	a2 14		ldx #$14			ldx 	#ERRID_PROC
.acf3	20 b5 a5	jsr $a5b5			jsr 	StackCheckFrame
.acf6	20 de a5	jsr $a5de			jsr 	STKLoadCodePosition 		; restore code position
.acf9	20 a7 a5	jsr $a5a7			jsr 	StackClose
.acfc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93ae					Command_Read:
.93ae	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93b0	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm
.93b3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93b6	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93b8	f0 4a		beq $9404			beq 	_CRSyntax 					; check reference (bit 0)
.93ba	20 4d 94	jsr $944d			jsr 	SwapDataCodePtrs 			; swap code and data
.93bd	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93c0	d0 20		bne $93e2			bne 	_CRContinueData
.93c2					_CRKeepSearching:
.93c2	a9 ae		lda #$ae			lda 	#KWD_DATA 					; scan for instruction
.93c4	aa		tax				tax
.93c5	20 6f 98	jsr $986f			jsr 	ScanForward
.93c8	c9 ae		cmp #$ae			cmp 	#KWD_DATA 					; found data ?
.93ca	f0 16		beq $93e2			beq 	_CRHaveData 				; found it
.93cc	18		clc				clc
.93cd	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93cf	65 30		adc $30				adc 	codePtr
.93d1	85 30		sta $30				sta 	codePtr
.93d3	90 02		bcc $93d7			bcc 	_CREExit
.93d5	e6 31		inc $31				inc 	codePtr+1
.93d7					_CREExit:
.93d7	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93d9	b2 30		lda ($30)			lda 	(codePtr)
.93db	d0 e5		bne $93c2			bne 	_CRKeepSearching
.93dd	a9 0b		lda #$0b		lda	#11
.93df	4c fd 98	jmp $98fd		jmp	ErrorHandler
.93e2					_CRHaveData:
.93e2					_CRContinueData:
.93e2	a2 01		ldx #$01			ldx 	#1
.93e4	20 0c a4	jsr $a40c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93e7	ca		dex				dex
.93e8	20 b5 91	jsr $91b5			jsr		AssignVariable 				; do the assignment
.93eb	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.93ee	b1 30		lda ($30),y			lda 	(codePtr),y
.93f0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.93f2	d0 04		bne $93f8			bne 	_CRSwapBack
.93f4	c8		iny				iny 								; consume comma
.93f5	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.93f8					_CRSwapBack:
.93f8	20 4d 94	jsr $944d			jsr 	SwapDataCodePtrs			; swap them back.
.93fb	b1 30		lda ($30),y			lda 	(codePtr),y
.93fd	c8		iny				iny
.93fe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9400	f0 ac		beq $93ae			beq 	Command_Read 				; if so go round again.
.9402	88		dey				dey 								; unpick get.
.9403	60		rts				rts
.9404					_CRSyntax:
.9404	4c e3 b2	jmp $b2e3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9407					RemCommand:
.9407	b1 30		lda ($30),y			lda 	(codePtr),y
.9409	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.940b	d0 06		bne $9413			bne 	_RMExit
.940d	c8		iny				iny
.940e	98		tya				tya
.940f	38		sec				sec
.9410	71 30		adc ($30),y			adc 	(codePtr),y
.9412	a8		tay				tay
.9413					_RMExit:
.9413	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9414					Command_REPEAT:
.9414	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9416	20 89 a5	jsr $a589			jsr 	StackOpen
.9419	20 cd a5	jsr $a5cd			jsr 	STKSaveCodePosition 		; save loop position
.941c	60		rts				rts
.941d					Command_UNTIL:
.941d	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.941f	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9421	20 b5 a5	jsr $a5b5			jsr 	StackCheckFrame
.9424	a2 00		ldx #$00			ldx 	#0
.9426	20 15 a4	jsr $a415			jsr 	EvaluateNumber 				; work out the number
.9429	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; check if zero
.942c	f0 04		beq $9432			beq 	_CULoopBack 				; if so keep looping
.942e	20 a7 a5	jsr $a5a7			jsr 	StackClose		 			; return
.9431	60		rts				rts
.9432					_CULoopBack:
.9432	20 de a5	jsr $a5de			jsr 	STKLoadCodePosition 		; loop back
.9435	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9436					Command_Restore:
.9436	20 4d 94	jsr $944d			jsr 	SwapDataCodePtrs 			; swap code and data
.9439	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.943b	85 30		sta $30				sta 	codePtr
.943d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.943f	85 31		sta $31				sta 	codePtr+1
.9441	20 4d 94	jsr $944d			jsr 	SwapDataCodePtrs 			; put them back
.9444	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9446	8d 9b 04	sta $049b			sta 	dataPointer+4
.9449	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.944c	60		rts				rts
.944d					SwapDataCodePtrs:
.944d	da		phx				phx
.944e	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9450					_SDCPLoop:
.9450	b5 30		lda $30,x			lda 	safePtr,x
.9452	48		pha				pha
.9453	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9456	95 30		sta $30,x			sta 	safePtr,x
.9458	68		pla				pla
.9459	9d 97 04	sta $0497,x			sta 	dataPointer,x
.945c	ca		dex				dex
.945d	10 f1		bpl $9450			bpl 	_SDCPLoop
.945f	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9462	8c 9b 04	sty $049b			sty 	dataPointer+4
.9465	a8		tay				tay
.9466	fa		plx				plx
.9467	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9468					CommandRUN:
.9468	20 d8 8b	jsr $8bd8			jsr 	ClearCommand 				; clear variable/stacks/etc.
.946b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.946d	85 30		sta $30				sta 	codePtr
.946f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9471	85 31		sta $31				sta 	codePtr+1
.9473					RUNNewLine:
.9473	b2 30		lda ($30)			lda 	(codePtr)
.9475	f0 5e		beq $94d5			beq 	CRNoProgram         		; no then END.
.9477	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9479	9a		txs				txs
.947a					RUNCodePointerLine:
.947a	a0 02		ldy #$02			ldy 	#2 							; start of program
.947c					_CRIncMainLoop:
.947c	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.947f	d0 05		bne $9486			bne 	_CRNoBreakCheck
.9481	20 df b4	jsr $b4df			jsr 	EXTBreakCheck 				; break check
.9484	f0 4a		beq $94d0			beq 	_CRBreak
.9486					_CRNoBreakCheck:
.9486	c8		iny				iny
.9487					_CRMainLoop:
.9487	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.948a	b1 30		lda ($30),y			lda 	(codePtr),y
.948c	10 10		bpl $949e			bpl 	_CRNotKeyword
.948e	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9490	b0 04		bcs $9496			bcs 	_CRIsKeyword
.9492	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9494	b0 34		bcs $94ca			bcs		_CRSyntaxError
.9496					_CRIsKeyword:
.9496	c8		iny				iny 								; consume command
.9497	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9498	aa		tax				tax 								; put in X for vector jump
.9499	20 cd 94	jsr $94cd			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.949c	80 e9		bra $9487			bra 	_CRMainLoop 				; and loop round
.949e					_CRNotKeyword:
.949e	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94a0	f0 da		beq $947c			beq 	_CRIncMainLoop
.94a2	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.94a4	90 05		bcc $94ab			bcc 	_CRNotVariable
.94a6					_CRGoLet:
.94a6	20 79 91	jsr $9179			jsr 	LetCommand
.94a9	80 dc		bra $9487			bra 	_CRMainLoop
.94ab					_CRNotVariable:
.94ab	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94ad	f0 f7		beq $94a6			beq 	_CRGoLet
.94af	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94b1	f0 f3		beq $94a6			beq 	_CRGoLet
.94b3	c9 21		cmp #$21			cmp 	#KWD_PLING
.94b5	f0 ef		beq $94a6			beq 	_CRGoLet
.94b7	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94b9	f0 09		beq $94c4			beq 	_CRGoRem
.94bb	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94bd	d0 0b		bne $94ca			bne 	_CRSyntaxError
.94bf	20 78 8a	jsr $8a78			jsr 	LabelHere
.94c2	80 c3		bra $9487			bra 	_CRMainLoop
.94c4					_CRGoRem:
.94c4	c8		iny				iny
.94c5	20 07 94	jsr $9407			jsr 	RemCommand
.94c8	80 bd		bra $9487			bra 	_CRMainLoop
.94ca					_CRSyntaxError:
.94ca	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
.94cd					_CRCallVector0:
.94cd	7c 78 95	jmp ($9578,x)			jmp 	(VectorSet0,x)
.94d0					_CRBreak:
.94d0	a9 01		lda #$01		lda	#1
.94d2	4c fd 98	jmp $98fd		jmp	ErrorHandler
.94d5					CRNoProgram:
.94d5	4c fb 8c	jmp $8cfb			jmp 	EndCommand
.94d8					EOLCommand:
.94d8	18		clc				clc
.94d9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94db	65 30		adc $30				adc 	codePtr
.94dd	85 30		sta $30				sta 	codePtr
.94df	90 02		bcc $94e3			bcc 	_CREExit
.94e1	e6 31		inc $31				inc 	codePtr+1
.94e3					_CREExit:
.94e3	80 8e		bra $9473			bra 	RunNewLine
.94e5					Shift1Command:
.94e5	b1 30		lda ($30),y			lda 	(codePtr),y
.94e7	c8		iny				iny
.94e8	0a		asl a				asl 	a
.94e9	aa		tax				tax
.94ea	7c 08 96	jmp ($9608,x)			jmp 	(VectorSet1,x)
.94ed					Shift2Command:
.94ed	b1 30		lda ($30),y			lda 	(codePtr),y
.94ef	c8		iny				iny
.94f0	0a		asl a				asl 	a
.94f1	aa		tax				tax
.94f2	7c 22 96	jmp ($9622,x)			jmp 	(VectorSet2,x)
.94f5					Unused1:
.94f5					Unused2:
.94f5					Unused3:
.94f5					Unused4:
.94f5	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
>94f8							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.94f8					VectorSetPunc:
>94f8	a7 9a					.word	ShiftLeft                        ; $00 <<
>94fa	a1 99					.word	BinaryCompareLessEqual           ; $01 <=
>94fc	97 99					.word	BinaryCompareNotEqual            ; $02 <>
>94fe	e3 b2					.word	SyntaxError                      ; $03 !!3
>9500	e3 b2					.word	SyntaxError                      ; $04 ><
>9502	ab 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>9504	aa 9a					.word	ShiftRight                       ; $06 >>
>9506	e3 b2					.word	SyntaxError                      ; $07 !!7
>9508	e3 b2					.word	SyntaxError                      ; $08 !!8
>950a	e3 b2					.word	SyntaxError                      ; $09 !!9
>950c	e3 b2					.word	SyntaxError                      ; $0a !!10
>950e	e3 b2					.word	SyntaxError                      ; $0b !!11
>9510	e3 b2					.word	SyntaxError                      ; $0c !!12
>9512	e3 b2					.word	SyntaxError                      ; $0d !!13
>9514	e3 b2					.word	SyntaxError                      ; $0e !!14
>9516	e3 b2					.word	SyntaxError                      ; $0f !!15
>9518	e3 b2					.word	SyntaxError                      ; $10 @
>951a	e3 b2					.word	SyntaxError                      ; $11 !!17
>951c	e3 b2					.word	SyntaxError                      ; $12 !!18
>951e	e3 b2					.word	SyntaxError                      ; $13 [
>9520	16 ad					.word	IntegerDivide                    ; $14 \
>9522	e3 b2					.word	SyntaxError                      ; $15 ]
>9524	30 9c					.word	EorInteger                       ; $16 ^
>9526	e3 b2					.word	SyntaxError                      ; $17 _
>9528	e3 b2					.word	SyntaxError                      ; $18 `
>952a	e3 b2					.word	SyntaxError                      ; $19 !!25
>952c	e3 b2					.word	SyntaxError                      ; $1a !!26
>952e	e3 b2					.word	SyntaxError                      ; $1b {
>9530	ea 9b					.word	OraInteger                       ; $1c |
>9532	e3 b2					.word	SyntaxError                      ; $1d }
>9534	e3 b2					.word	SyntaxError                      ; $1e ~
>9536	e3 b2					.word	SyntaxError                      ; $1f [7m<7F>[m
>9538	e3 b2					.word	SyntaxError                      ; $20
>953a	76 9c					.word	WordIndirect                     ; $21 !
>953c	e3 b2					.word	SyntaxError                      ; $22 "
>953e	e3 b2					.word	SyntaxError                      ; $23 #
>9540	e3 b2					.word	SyntaxError                      ; $24 $
>9542	63 ad					.word	IntegerModulus                   ; $25 %
>9544	a4 9b					.word	AndInteger                       ; $26 &
>9546	e3 b2					.word	SyntaxError                      ; $27 '
>9548	e3 b2					.word	SyntaxError                      ; $28 (
>954a	e3 b2					.word	SyntaxError                      ; $29 )
>954c	d8 ad					.word	MulInteger                       ; $2a *
>954e	3e 9b					.word	AddInteger                       ; $2b +
>9550	e3 b2					.word	SyntaxError                      ; $2c ,
>9552	79 9b					.word	SubInteger                       ; $2d -
>9554	e3 b2					.word	SyntaxError                      ; $2e .
>9556	6f af					.word	FDivideCommand                   ; $2f /
>9558	e3 b2					.word	SyntaxError                      ; $30 0
>955a	e3 b2					.word	SyntaxError                      ; $31 1
>955c	e3 b2					.word	SyntaxError                      ; $32 2
>955e	e3 b2					.word	SyntaxError                      ; $33 3
>9560	e3 b2					.word	SyntaxError                      ; $34 4
>9562	e3 b2					.word	SyntaxError                      ; $35 5
>9564	e3 b2					.word	SyntaxError                      ; $36 6
>9566	e3 b2					.word	SyntaxError                      ; $37 7
>9568	e3 b2					.word	SyntaxError                      ; $38 8
>956a	e3 b2					.word	SyntaxError                      ; $39 9
>956c	e3 b2					.word	SyntaxError                      ; $3a :
>956e	e3 b2					.word	SyntaxError                      ; $3b ;
>9570	83 99					.word	BinaryCompareLess                ; $3c <
>9572	79 99					.word	BinaryCompareEqual               ; $3d =
>9574	8d 99					.word	BinaryCompareGreater             ; $3e >
>9576	9d 9c					.word	ByteIndirect                     ; $3f ?
.9578					VectorSet0:
>9578	d8 94					.word	EOLCommand                       ; $80 !0:EOF
>957a	e5 94					.word	Shift1Command                    ; $81 !1:SH1
>957c	ed 94					.word	Shift2Command                    ; $82 !2:SH2
>957e	b5 b0					.word	AbsUnary                         ; $83 ABS(
>9580	6d a1					.word	AllocUnary                       ; $84 ALLOC(
>9582	c5 b0					.word	AscUnary                         ; $85 ASC(
>9584	93 a2					.word	ChrUnary                         ; $86 CHR$(
>9586	fe 8c					.word	UnaryEvent                       ; $87 EVENT(
>9588	75 99					.word	UnaryFalse                       ; $88 FALSE
>958a	d2 b0					.word	FracUnary                        ; $89 FRAC(
>958c	e8 b0					.word	IntUnary                         ; $8a INT(
>958e	3e b1					.word	IsValUnary                       ; $8b ISVAL(
>9590	65 91					.word	UnaryJoyB                        ; $8c JOYB(
>9592	3e 91					.word	UnaryJoyX                        ; $8d JOYX(
>9594	41 91					.word	UnaryJoyY                        ; $8e JOYY(
>9596	6d a3					.word	Unary_Left                       ; $8f LEFT$(
>9598	fa b0					.word	LenUnary                         ; $90 LEN(
>959a	97 a3					.word	Unary_Mid                        ; $91 MID$(
>959c	dd a1					.word	Unary_Not                        ; $92 NOT(
>959e	f3 a1					.word	Unary_Random                     ; $93 RANDOM(
>95a0	7d a3					.word	Unary_Right                      ; $94 RIGHT$(
>95a2	12 a2					.word	Unary_Rnd                        ; $95 RND(
>95a4	14 b1					.word	SgnUnary                         ; $96 SGN(
>95a6	a5 a2					.word	SpcUnary                         ; $97 SPC(
>95a8	c0 a2					.word	Unary_Str                        ; $98 STR$(
>95aa	af 96					.word	UnaryTimer                       ; $99 TIMER(
>95ac	69 99					.word	UnaryTrue                        ; $9a TRUE
>95ae	34 b1					.word	ValUnary                         ; $9b VAL(
>95b0	67 8d					.word	ForCommand                       ; $9c FOR
>95b2	14 91					.word	IfCommand                        ; $9d IF
>95b4	f5 94					.word	Unused1                          ; $9e PROC
>95b6	14 94					.word	Command_REPEAT                   ; $9f REPEAT
>95b8	ce 98					.word	Command_WHILE                    ; $a0 WHILE
>95ba	3d 91					.word	EndIf                            ; $a1 ENDIF
>95bc	ef ac					.word	Command_ENDPROC                  ; $a2 ENDPROC
>95be	21 8e					.word	NextCommand                      ; $a3 NEXT
>95c0	f5 94					.word	Unused4                          ; $a4 THEN
>95c2	1d 94					.word	Command_UNTIL                    ; $a5 UNTIL
>95c4	ef 98					.word	Command_WEND                     ; $a6 WEND
>95c6	e3 b2					.word	SyntaxError                      ; $a7 BY
>95c8	9e 8b					.word	CallCommand                      ; $a8 CALL
>95ca	7e 8e					.word	CircleCommand                    ; $a9 CIRCLE
>95cc	d8 8b					.word	ClearCommand                     ; $aa CLEAR
>95ce	30 8c					.word	ClearScreen                      ; $ab CLS
>95d0	e3 b2					.word	SyntaxError                      ; $ac COLOR
>95d2	e3 b2					.word	SyntaxError                      ; $ad COLOUR
>95d4	36 8c					.word	Command_Data                     ; $ae DATA
>95d6	3e 8c					.word	DimCommand                       ; $af DIM
>95d8	f5 94					.word	Unused3                          ; $b0 DOWNTO
>95da	36 91					.word	ElseCode                         ; $b1 ELSE
>95dc	e3 b2					.word	SyntaxError                      ; $b2 FROM
>95de	a8 90					.word	GfxCommand                       ; $b3 GFX
>95e0	da 90					.word	Command_GOSUB                    ; $b4 GOSUB
>95e2	f8 90					.word	GotoCommand                      ; $b5 GOTO
>95e4	e3 b2					.word	SyntaxError                      ; $b6 HERE
>95e6	a8 8e					.word	ImageCommand                     ; $b7 IMAGE
>95e8	79 91					.word	LetCommand                       ; $b8 LET
>95ea	fd 8e					.word	LineCommand                      ; $b9 LINE
>95ec	69 92					.word	Command_LOCAL                    ; $ba LOCAL
>95ee	e3 b2					.word	SyntaxError                      ; $bb OFF
>95f0	e3 b2					.word	SyntaxError                      ; $bc ON
>95f2	e3 b2					.word	SyntaxError                      ; $bd OUTLINE
>95f4	f6 8e					.word	PlotCommand                      ; $be PLOT
>95f6	f7 92					.word	Command_Print                    ; $bf PRINT
>95f8	ae 93					.word	Command_Read                     ; $c0 READ
>95fa	7a 8e					.word	RectangleCommand                 ; $c1 RECT
>95fc	07 94					.word	RemCommand                       ; $c2 REM
>95fe	ea 90					.word	Command_RETURN                   ; $c3 RETURN
>9600	e3 b2					.word	SyntaxError                      ; $c4 SOLID
>9602	89 8e					.word	SpriteCommand                    ; $c5 SPRITE
>9604	c5 8e					.word	TextCommand                      ; $c6 TEXT
>9606	f5 94					.word	Unused2                          ; $c7 TO
.9608					VectorSet1:
>9608	e3 b2					.word	SyntaxError                      ; $80 !0:EOF
>960a	e3 b2					.word	SyntaxError                      ; $81 !1:SH1
>960c	e3 b2					.word	SyntaxError                      ; $82 !2:SH2
>960e	6f 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9610	8e 8b					.word	AssertCommand                    ; $84 ASSERT
>9612	48 90					.word	BitmapCtrl                       ; $85 BITMAP
>9614	fb 8c					.word	EndCommand                       ; $86 END
>9616	ce 91					.word	Command_List                     ; $87 LIST
>9618	ed 92					.word	NewCommand                       ; $88 NEW
>961a	36 94					.word	Command_Restore                  ; $89 RESTORE
>961c	68 94					.word	CommandRUN                       ; $8a RUN
>961e	8d 90					.word	SpritesCtrl                      ; $8b SPRITES
>9620	aa 96					.word	StopCommand                      ; $8c STOP
.9622					VectorSet2:
>9622	e3 b2					.word	SyntaxError                      ; $80 !0:EOF
>9624	e3 b2					.word	SyntaxError                      ; $81 !1:SH1
>9626	e3 b2					.word	SyntaxError                      ; $82 !2:SH2
>9628	a2 b1					.word	Assemble_adc                     ; $83 ADC
>962a	9a b1					.word	Assemble_and                     ; $84 AND
>962c	b6 b1					.word	Assemble_asl                     ; $85 ASL
>962e	20 b2					.word	Assemble_bcc                     ; $86 BCC
>9630	24 b2					.word	Assemble_bcs                     ; $87 BCS
>9632	2c b2					.word	Assemble_beq                     ; $88 BEQ
>9634	e3 b1					.word	Assemble_bit                     ; $89 BIT
>9636	14 b2					.word	Assemble_bmi                     ; $8a BMI
>9638	28 b2					.word	Assemble_bne                     ; $8b BNE
>963a	10 b2					.word	Assemble_bpl                     ; $8c BPL
>963c	30 b2					.word	Assemble_bra                     ; $8d BRA
>963e	34 b2					.word	Assemble_brk                     ; $8e BRK
>9640	18 b2					.word	Assemble_bvc                     ; $8f BVC
>9642	1c b2					.word	Assemble_bvs                     ; $90 BVS
>9644	3c b2					.word	Assemble_clc                     ; $91 CLC
>9646	90 b2					.word	Assemble_cld                     ; $92 CLD
>9648	50 b2					.word	Assemble_cli                     ; $93 CLI
>964a	80 b2					.word	Assemble_clv                     ; $94 CLV
>964c	ae b1					.word	Assemble_cmp                     ; $95 CMP
>964e	f7 b1					.word	Assemble_cpx                     ; $96 CPX
>9650	f2 b1					.word	Assemble_cpy                     ; $97 CPY
>9652	d4 b1					.word	Assemble_dec                     ; $98 DEC
>9654	8c b2					.word	Assemble_dex                     ; $99 DEX
>9656	68 b2					.word	Assemble_dey                     ; $9a DEY
>9658	9e b1					.word	Assemble_eor                     ; $9b EOR
>965a	d9 b1					.word	Assemble_inc                     ; $9c INC
>965c	9c b2					.word	Assemble_inx                     ; $9d INX
>965e	88 b2					.word	Assemble_iny                     ; $9e INY
>9660	0b b2					.word	Assemble_jmp                     ; $9f JMP
>9662	06 b2					.word	Assemble_jsr                     ; $a0 JSR
>9664	aa b1					.word	Assemble_lda                     ; $a1 LDA
>9666	cf b1					.word	Assemble_ldx                     ; $a2 LDX
>9668	ed b1					.word	Assemble_ldy                     ; $a3 LDY
>966a	c0 b1					.word	Assemble_lsr                     ; $a4 LSR
>966c	a0 b2					.word	Assemble_nop                     ; $a5 NOP
>966e	96 b1					.word	Assemble_ora                     ; $a6 ORA
>9670	4c b2					.word	Assemble_pha                     ; $a7 PHA
>9672	38 b2					.word	Assemble_php                     ; $a8 PHP
>9674	94 b2					.word	Assemble_phx                     ; $a9 PHX
>9676	54 b2					.word	Assemble_phy                     ; $aa PHY
>9678	5c b2					.word	Assemble_pla                     ; $ab PLA
>967a	40 b2					.word	Assemble_plp                     ; $ac PLP
>967c	a8 b2					.word	Assemble_plx                     ; $ad PLX
>967e	64 b2					.word	Assemble_ply                     ; $ae PLY
>9680	bb b1					.word	Assemble_rol                     ; $af ROL
>9682	c5 b1					.word	Assemble_ror                     ; $b0 ROR
>9684	48 b2					.word	Assemble_rti                     ; $b1 RTI
>9686	58 b2					.word	Assemble_rts                     ; $b2 RTS
>9688	b2 b1					.word	Assemble_sbc                     ; $b3 SBC
>968a	44 b2					.word	Assemble_sec                     ; $b4 SEC
>968c	a4 b2					.word	Assemble_sed                     ; $b5 SED
>968e	60 b2					.word	Assemble_sei                     ; $b6 SEI
>9690	a6 b1					.word	Assemble_sta                     ; $b7 STA
>9692	98 b2					.word	Assemble_stp                     ; $b8 STP
>9694	ca b1					.word	Assemble_stx                     ; $b9 STX
>9696	e8 b1					.word	Assemble_sty                     ; $ba STY
>9698	de b1					.word	Assemble_stz                     ; $bb STZ
>969a	7c b2					.word	Assemble_tax                     ; $bc TAX
>969c	78 b2					.word	Assemble_tay                     ; $bd TAY
>969e	01 b2					.word	Assemble_trb                     ; $be TRB
>96a0	fc b1					.word	Assemble_tsb                     ; $bf TSB
>96a2	84 b2					.word	Assemble_tsx                     ; $c0 TSX
>96a4	6c b2					.word	Assemble_txa                     ; $c1 TXA
>96a6	74 b2					.word	Assemble_txs                     ; $c2 TXS
>96a8	70 b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96aa					StopCommand:
.96aa	a9 08		lda #$08		lda	#8
.96ac	4c fd 98	jmp $98fd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96af					UnaryTimer:
.96af	fa		plx				plx
.96b0	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.96b3					TimerToStackX:
.96b3	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero 					; zero result
.96b6	64 01		stz $01				stz 	1 							; access I/O
.96b8	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96bb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96be	ad 5a d6	lda $d65a			lda 	$D65A
.96c1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96c4	ad 5b d6	lda $d65b			lda 	$D65B
.96c7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96cb					ListConvertLine:
.96cb	9c 9d 04	stz $049d			stz 	tbOffset
.96ce	9c a9 04	stz $04a9			stz 	tokenBuffer
.96d1	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96d3	b1 30		lda ($30),y			lda 	(codePtr),y
.96d5	aa		tax				tax
.96d6	88		dey				dey
.96d7	b1 30		lda ($30),y			lda 	(codePtr),y
.96d9	20 59 ae	jsr $ae59			jsr 	ConvertInt16
.96dc	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96de	86 37		stx $37				stx 	zTemp0+1
.96e0	a0 00		ldy #$00			ldy 	#0
.96e2					_LCCopyNumber:
.96e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.96e4	20 e4 97	jsr $97e4			jsr 	LCLWrite
.96e7	c8		iny				iny
.96e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.96ea	d0 f6		bne $96e2			bne 	_LCCopyNumber
.96ec					_LCPadOut:
.96ec	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.96ee	20 e4 97	jsr $97e4			jsr 	LCLWrite
.96f1	ad 9d 04	lda $049d			lda 	tbOffset
.96f4	c9 06		cmp #$06			cmp 	#6
.96f6	d0 f4		bne $96ec			bne 	_LCPadOut
.96f8	a0 03		ldy #$03			ldy 	#3 							; start position.
.96fa					_LCMainLoop:
.96fa	b1 30		lda ($30),y			lda 	(codePtr),y
.96fc	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.96fe	f0 17		beq $9717			beq 	_LCExit
.9700	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9702	90 14		bcc $9718			bcc 	_LCDoubles
.9704	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9706	90 20		bcc $9728			bcc 	_LCShiftPunc
.9708	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.970a	90 2b		bcc $9737			bcc 	_LCPunctuation
.970c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.970e	90 2d		bcc $973d			bcc 	_LCIdentifiers
.9710	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9712	90 49		bcc $975d			bcc 	_LCTokens
.9714	4c b8 97	jmp $97b8			jmp 	_LCData 					; 254-5 are data objects
.9717					_LCExit:
.9717	60		rts				rts
.9718					_LCDoubles:
.9718	48		pha				pha
.9719	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.971a	29 02		and #$02			and 	#2
.971c	09 3c		ora #$3c			ora 	#60 						; make < >
.971e	20 e4 97	jsr $97e4			jsr 	LCLWrite
.9721	68		pla				pla 								; restore, do lower bit
.9722	29 03		and #$03			and 	#3
.9724	09 3c		ora #$3c			ora 	#60
.9726	80 0f		bra $9737			bra		_LCPunctuation 				; print, increment, loop
.9728					_LCShiftPunc:
.9728	aa		tax				tax 								; save in X
.9729	29 07		and #$07			and 	#7 							; lower 3 bits
.972b	f0 02		beq $972f			beq 	_LCNoAdd
.972d	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.972f					_LCNoAdd:
.972f	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9731	90 02		bcc $9735			bcc 	_LCNoAdd2
.9733	09 20		ora #$20			ora 	#32 						; adds $20
.9735					_LCNoAdd2:
.9735	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9737					_LCPunctuation:
.9737	c8		iny				iny 								; consume character
.9738	20 e4 97	jsr $97e4			jsr 	LCLWrite 					; write it out.
.973b	80 bd		bra $96fa			bra 	_LCMainLoop 				; go round again.
.973d					_LCIdentifiers:
.973d	18		clc				clc 								; convert to physical address
.973e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9740	85 37		sta $37				sta 	zTemp0+1
.9742	c8		iny				iny
.9743	b1 30		lda ($30),y			lda 	(codePtr),y
.9745	85 36		sta $36				sta 	zTemp0
.9747	c8		iny				iny
.9748	5a		phy				phy 								; save position
.9749	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.974b					_LCOutIdentifier:
.974b	c8		iny				iny
.974c	b1 36		lda ($36),y			lda 	(zTemp0),y
.974e	29 7f		and #$7f			and 	#$7F
.9750	20 12 98	jsr $9812			jsr 	LCLLowerCase
.9753	20 e4 97	jsr $97e4			jsr 	LCLWrite
.9756	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9758	10 f1		bpl $974b			bpl 	_LCOutIdentifier
.975a	7a		ply				ply 								; restore position
.975b	80 9d		bra $96fa			bra 	_LCMainLoop
.975d					_LCTokens:
.975d	aa		tax				tax 								; token in X
.975e	a9 a9		lda #$a9			lda 	#((KeywordSet2) & $FF)
.9760	85 36		sta $36				sta 	0+zTemp0
.9762	a9 a8		lda #$a8			lda 	#((KeywordSet2) >> 8)
.9764	85 37		sta $37				sta 	1+zTemp0
.9766	e0 82		cpx #$82			cpx 	#$82
.9768	f0 16		beq $9780			beq 	_LCUseShift
.976a	a9 5b		lda #$5b			lda 	#((KeywordSet1) & $FF)
.976c	85 36		sta $36				sta 	0+zTemp0
.976e	a9 a8		lda #$a8			lda 	#((KeywordSet1) >> 8)
.9770	85 37		sta $37				sta 	1+zTemp0
.9772	e0 81		cpx #$81			cpx 	#$81
.9774	f0 0a		beq $9780			beq 	_LCUseShift
.9776	a9 91		lda #$91			lda 	#((KeywordSet0) & $FF)
.9778	85 36		sta $36				sta 	0+zTemp0
.977a	a9 a6		lda #$a6			lda 	#((KeywordSet0) >> 8)
.977c	85 37		sta $37				sta 	1+zTemp0
.977e	80 01		bra $9781			bra 	_LCNoShift
.9780					_LCUseShift:
.9780	c8		iny				iny
.9781					_LCNoShift:
.9781	20 f3 97	jsr $97f3			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9784	b1 30		lda ($30),y			lda 	(codePtr),y
.9786	aa		tax				tax 								; into X
.9787					_LCFindText:
.9787	ca		dex				dex
.9788	10 0e		bpl $9798			bpl 	_LCFoundText 				; found text.
.978a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.978c	1a		inc a				inc 	a 							; one extra for size
.978d	38		sec				sec 								; one extra for checksum
.978e	65 36		adc $36				adc 	zTemp0 						; go to next token
.9790	85 36		sta $36				sta 	zTemp0
.9792	90 f3		bcc $9787			bcc 	_LCFindText
.9794	e6 37		inc $37				inc 	zTemp0+1
.9796	80 ef		bra $9787			bra 	_LCFindText
.9798					_LCFoundText:
.9798	5a		phy				phy 								; save List position
.9799	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.979b	aa		tax				tax
.979c	a0 02		ldy #$02			ldy 	#2
.979e					_LCCopyToken:
.979e	b1 36		lda ($36),y			lda 	(zTemp0),y
.97a0	20 12 98	jsr $9812			jsr 	LCLLowerCase
.97a3	20 e4 97	jsr $97e4			jsr 	LCLWrite
.97a6	c8		iny				iny
.97a7	ca		dex				dex
.97a8	d0 f4		bne $979e			bne 	_LCCopyToken
.97aa	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.97ac	f0 05		beq $97b3			beq 	_LCNoSpace
.97ae	a9 20		lda #$20			lda 	#' '
.97b0	20 e4 97	jsr $97e4			jsr 	LCLWrite
.97b3					_LCNoSpace:
.97b3	7a		ply				ply 								; restore position.
.97b4	c8		iny				iny 								; consume token
.97b5	4c fa 96	jmp $96fa			jmp 	_LCMainLoop 				; and go around again.
.97b8					_LCData:
.97b8	48		pha				pha 								; save type $FE/$FF
.97b9	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.97bb	c9 fe		cmp #$fe			cmp 	#$FE
.97bd	f0 02		beq $97c1			beq 	_LCHaveOpener
.97bf	a2 22		ldx #$22			ldx 	#'"'
.97c1					_LCHaveOpener:
.97c1	8a		txa				txa 								; output prefix (# or ")
.97c2	20 e4 97	jsr $97e4			jsr 	LCLWrite
.97c5	c8		iny				iny 								; get count
.97c6	b1 30		lda ($30),y			lda 	(codePtr),y
.97c8	aa		tax				tax
.97c9	c8		iny				iny 								; point at first character
.97ca					_LCOutData:
.97ca	b1 30		lda ($30),y			lda 	(codePtr),y
.97cc	c9 00		cmp #$00			cmp 	#0
.97ce	f0 03		beq $97d3			beq 	_LCNoPrint
.97d0	20 e4 97	jsr $97e4			jsr 	LCLWrite
.97d3					_LCNoPrint:
.97d3	c8		iny				iny
.97d4	ca		dex				dex
.97d5	d0 f3		bne $97ca			bne 	_LCOutData
.97d7	68		pla				pla 								; closing " required ?
.97d8	c9 ff		cmp #$ff			cmp 	#$FF
.97da	d0 05		bne $97e1			bne 	_LCNoQuote
.97dc	a9 22		lda #$22			lda 	#'"'
.97de	20 e4 97	jsr $97e4			jsr 	LCLWrite
.97e1					_LCNoQuote:
.97e1	4c fa 96	jmp $96fa			jmp 	_LCMainLoop
.97e4					LCLWrite:
.97e4	da		phx				phx
.97e5	ae 9d 04	ldx $049d			ldx 	tbOffset
.97e8	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.97eb	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.97ee	ee 9d 04	inc $049d			inc 	tbOffset
.97f1	fa		plx				plx
.97f2	60		rts				rts
.97f3					LCCheckSpaceRequired:
.97f3	ae 9d 04	ldx $049d			ldx 	tbOffset
.97f6	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.97f9	20 12 98	jsr $9812			jsr 	LCLLowerCase 				; saves a little effort
.97fc	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.97fe	90 11		bcc $9811			bcc 	_LCCSRExit
.9800	c9 3a		cmp #$3a			cmp 	#"9"+1
.9802	90 08		bcc $980c			bcc 	_LCCSRSpace
.9804	c9 61		cmp #$61			cmp 	#"a"
.9806	90 09		bcc $9811			bcc 	_LCCSRExit
.9808	c9 7b		cmp #$7b			cmp 	#"z"+1
.980a	b0 05		bcs $9811			bcs 	_LCCSRExit
.980c					_LCCSRSpace:
.980c	a9 20		lda #$20			lda 	#' '
.980e	20 e4 97	jsr $97e4			jsr 	LCLWrite
.9811					_LCCSRExit:
.9811	60		rts				rts
.9812					LCLLowerCase:
.9812	c9 41		cmp #$41			cmp 	#"A"
.9814	90 06		bcc $981c			bcc 	_LCLLCOut
.9816	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9818	b0 02		bcs $981c			bcs 	_LCLLCOut
.981a	69 20		adc #$20			adc 	#$20
.981c					_LCLLCOut:
.981c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.981d					ProcedureScan:
.981d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.981f	85 30		sta $30				sta 	codePtr
.9821	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9823	85 31		sta $31				sta 	codePtr+1
.9825					_PSLoop:
.9825	b2 30		lda ($30)			lda 	(codePtr)
.9827	f0 42		beq $986b			beq 	_PSExit
.9829	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.982b	b1 30		lda ($30),y			lda 	(codePtr),y
.982d	c9 9e		cmp #$9e			cmp 	#KWD_PROC
.982f	d0 2d		bne $985e			bne 	_PSNext
.9831	c8		iny				iny 								; get the address of the record to zTemp0 and
.9832	b1 30		lda ($30),y			lda 	(codePtr),y
.9834	29 c0		and #$c0			and 	#$C0
.9836	c9 40		cmp #$40			cmp 	#$40
.9838	d0 32		bne $986c			bne 	_PSSyntax
.983a	b1 30		lda ($30),y			lda 	(codePtr),y
.983c	18		clc				clc
.983d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.983f	85 37		sta $37				sta 	zTemp0+1
.9841	c8		iny				iny 								; LSB
.9842	b1 30		lda ($30),y			lda 	(codePtr),y
.9844	85 36		sta $36				sta 	zTemp0
.9846	c8		iny				iny 								; character after variable call.
.9847	98		tya				tya 								; save Y offset at +7
.9848	a0 07		ldy #$07			ldy 	#7
.984a	91 36		sta ($36),y			sta 	(zTemp0),y
.984c	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.984e	a0 02		ldy #$02			ldy 	#2
.9850	91 36		sta ($36),y			sta 	(zTemp0),y
.9852	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9854					_PSCopy:
.9854	b5 30		lda $30,x			lda 	safePtr,x
.9856	c8		iny				iny
.9857	91 36		sta ($36),y			sta 	(zTemp0),y
.9859	e8		inx				inx
.985a	e0 04		cpx #$04			cpx 	#4
.985c	d0 f6		bne $9854			bne 	_PSCopy
.985e					_PSNext:
.985e	18		clc				clc
.985f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9861	65 30		adc $30				adc 	codePtr
.9863	85 30		sta $30				sta 	codePtr
.9865	90 02		bcc $9869			bcc 	_CREExit
.9867	e6 31		inc $31				inc 	codePtr+1
.9869					_CREExit:
.9869	80 ba		bra $9825			bra 	_PSLoop
.986b					_PSExit:
.986b	60		rts				rts
.986c					_PSSyntax:
.986c	4c e3 b2	jmp $b2e3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.986f					ScanForward:
.986f	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9871	86 37		stx $37				stx 	zTemp0+1
.9873	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9875					_ScanLoop:
.9875	b1 30		lda ($30),y			lda 	(codePtr),y
.9877	c8		iny				iny
.9878	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.987a	d0 0e		bne $988a			bne 	_ScanGoNext
.987c	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.987e	f0 04		beq $9884			beq 	_ScanMatch
.9880	c5 37		cmp $37				cmp 	zTemp0+1
.9882	d0 06		bne $988a			bne 	_ScanGoNext
.9884					_ScanMatch:
.9884	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9886	d0 01		bne $9889			bne 	_ScanNotEndEOL
.9888	88		dey				dey
.9889					_ScanNotEndEOL:
.9889	60		rts				rts
.988a					_ScanGoNext:
.988a	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.988c	90 e7		bcc $9875			bcc 	_ScanLoop
.988e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9890	90 18		bcc $98aa			bcc 	_ScanSkipOne
.9892	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9894	b0 2f		bcs $98c5			bcs 	_ScanSkipData
.9896	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9898	90 db		bcc $9875			bcc 	_ScanLoop 					; if not, ordinary keywords.
.989a	c9 a7		cmp #$a7			cmp 	#KWC_LAST_STRUCTURE+1
.989c	b0 d7		bcs $9875			bcs 	_ScanLoop
.989e	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.98a0	c9 a1		cmp #$a1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.98a2	b0 d1		bcs $9875			bcs 	_ScanLoop
.98a4	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.98a6	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.98a8	80 cb		bra $9875			bra 	_ScanLoop
.98aa					_ScanSkipOne:
.98aa	c8		iny				iny 								; consume the extra one.
.98ab	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.98ad	d0 c6		bne $9875			bne 	_ScanLoop
.98af	18		clc				clc
.98b0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98b2	65 30		adc $30				adc 	codePtr
.98b4	85 30		sta $30				sta 	codePtr
.98b6	90 02		bcc $98ba			bcc 	_CREExit
.98b8	e6 31		inc $31				inc 	codePtr+1
.98ba					_CREExit:
.98ba	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.98bc	b2 30		lda ($30)			lda 	(codePtr)
.98be	d0 b5		bne $9875			bne 	_ScanLoop 					; if not zero, more to scan
.98c0	a9 13		lda #$13		lda	#19
.98c2	4c fd 98	jmp $98fd		jmp	ErrorHandler
.98c5					_ScanSkipData:
.98c5	88		dey				dey 								; point at data token
.98c6	c8		iny				iny
.98c7	98		tya				tya
.98c8	38		sec				sec
.98c9	71 30		adc ($30),y			adc 	(codePtr),y
.98cb	a8		tay				tay
.98cc	80 a7		bra $9875			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.98ce					Command_WHILE:
.98ce	5a		phy				phy 								; save position of the test
.98cf	a2 00		ldx #$00			ldx 	#0
.98d1	20 15 a4	jsr $a415			jsr 	EvaluateNumber 				; work out the number
.98d4	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; check if zero
.98d7	f0 0e		beq $98e7			beq 	_WHExitLoop 				; if so exit the loop
.98d9	98		tya				tya 								; position *after* test.
.98da	7a		ply				ply 								; restore position before test, at WHILE
.98db	88		dey				dey
.98dc	48		pha				pha 								; push after test on the stack
.98dd	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.98df	20 89 a5	jsr $a589			jsr 	StackOpen
.98e2	20 cd a5	jsr $a5cd			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.98e5	7a		ply				ply 								; restore the position *after* the test
.98e6	60		rts				rts
.98e7					_WHExitLoop:
.98e7	68		pla				pla 								; throw post loop position
.98e8	a9 a6		lda #$a6			lda 	#KWD_WEND 					; scan forward past WEND
.98ea	aa		tax				tax
.98eb	20 6f 98	jsr $986f			jsr 	ScanForward
.98ee	60		rts				rts
.98ef					Command_WEND:
.98ef	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.98f1	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.98f3	20 b5 a5	jsr $a5b5			jsr 	StackCheckFrame
.98f6	20 de a5	jsr $a5de			jsr 	STKLoadCodePosition 		; loop back
.98f9	20 a7 a5	jsr $a5a7			jsr 	StackClose		 			; erase the frame
.98fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.acfd					CheckRightBracket:
.acfd	b1 30		lda ($30),y			lda 	(codePtr),y
.acff	c8		iny				iny
.ad00	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ad02	d0 0f		bne $ad13			bne 	CNAFail
.ad04	60		rts				rts
.ad05					CheckComma:
.ad05	b1 30		lda ($30),y			lda 	(codePtr),y
.ad07	c8		iny				iny
.ad08	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ad0a	d0 07		bne $ad13			bne 	CNAFail
.ad0c	60		rts				rts
.ad0d					CheckNextA:
.ad0d	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ad0f	d0 02		bne $ad13			bne 	CNAFail
.ad11	c8		iny				iny 								; skip character
.ad12	60		rts				rts 								; and exit
.ad13					CNAFail:
.ad13	4c e3 b2	jmp $b2e3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.98fd					ErrorHandler:
.98fd	a8		tay				tay 								; find the error text
.98fe	f0 49		beq $9949			beq 	_EHEnd
.9900	a2 00		ldx #$00			ldx 	#0
.9902	a9 fc		lda #$fc			lda 	#((ErrorText) & $FF)
.9904	85 36		sta $36				sta 	0+zTemp0
.9906	a9 b2		lda #$b2			lda 	#((ErrorText) >> 8)
.9908	85 37		sta $37				sta 	1+zTemp0
.990a					_EHFind:
.990a	88		dey				dey 								; found the error text ?
.990b	f0 0e		beq $991b			beq 	_EHFound
.990d					_EHFindZero:
.990d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.990f	e6 36		inc $36				inc 	zTemp0
.9911	d0 02		bne $9915			bne 	_EHFNoCarry
.9913	e6 37		inc $37				inc 	zTemp0+1
.9915					_EHFNoCarry:
.9915	c9 00		cmp #$00			cmp 	#0
.9917	d0 f4		bne $990d			bne 	_EHFindZero
.9919	80 ef		bra $990a			bra 	_EHFind
.991b					_EHFound:
.991b	a5 36		lda $36				lda 	zTemp0 						; print message
.991d	a6 37		ldx $37				ldx 	zTemp0+1
.991f	20 56 99	jsr $9956			jsr 	PrintStringXA
.9922	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9924	b1 30		lda ($30),y			lda 	(codePtr),y
.9926	d0 05		bne $992d			bne 	_EHAtMsg
.9928	c8		iny				iny
.9929	b1 30		lda ($30),y			lda 	(codePtr),y
.992b	f0 17		beq $9944			beq 	_EHCREnd
.992d					_EHAtMsg:
.992d	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.992f	a9 4c		lda #$4c			lda 	#_AtMsg & $FF
.9931	20 56 99	jsr $9956			jsr 	PrintStringXA
.9934	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9936	b1 30		lda ($30),y			lda 	(codePtr),y
.9938	48		pha				pha
.9939	c8		iny				iny
.993a	b1 30		lda ($30),y			lda 	(codePtr),y
.993c	aa		tax				tax
.993d	68		pla				pla
.993e	20 59 ae	jsr $ae59			jsr 	ConvertInt16 				; convert XA to string
.9941	20 56 99	jsr $9956			jsr 	PrintStringXA 				; and print it.
.9944					_EHCREnd:
.9944	a9 0d		lda #$0d			lda 	#13 						; new line
.9946	20 9e b4	jsr $b49e			jsr 	EXTPrintCharacter
.9949					_EHEnd:
.9949	4c 3f 8b	jmp $8b3f			jmp 	WarmStart
>994c	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9954	20 00
.9956					PrintStringXA:
.9956	5a		phy				phy
.9957	86 37		stx $37				stx 	zTemp0+1
.9959	85 36		sta $36				sta 	zTemp0
.995b	a0 00		ldy #$00			ldy 	#0
.995d					_PSXALoop:
.995d	b1 36		lda ($36),y			lda 	(zTemp0),y
.995f	f0 06		beq $9967			beq 	_PSXAExit
.9961	20 9e b4	jsr $b49e			jsr 	EXTPrintCharacter
.9964	c8		iny				iny
.9965	80 f6		bra $995d			bra 	_PSXALoop
.9967					_PSXAExit:
.9967	7a		ply				ply
.9968	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9969					UnaryTrue:
.9969	fa		plx				plx
.996a					ReturnTrue:
.996a	a9 01		lda #$01			lda 	#1  						; set to 1
.996c	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.996f	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9971	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9974	60		rts				rts
.9975					UnaryFalse:
.9975	fa		plx				plx
.9976					ReturnFalse:
.9976	4c d5 a4	jmp $a4d5			jmp 	NSMSetZero 					; set it all to zero
.9979					BinaryCompareEqual:
.9979	fa		plx				plx
.997a	20 b5 99	jsr $99b5			jsr 	CompareBaseCode
.997d	c9 00		cmp #$00			cmp 	#0
.997f	f0 e9		beq $996a			beq 	ReturnTrue
.9981	80 f3		bra $9976			bra 	ReturnFalse
.9983					BinaryCompareLess:
.9983	fa		plx				plx
.9984	20 b5 99	jsr $99b5			jsr 	CompareBaseCode
.9987	c9 ff		cmp #$ff			cmp 	#$FF
.9989	f0 df		beq $996a			beq 	ReturnTrue
.998b	80 e9		bra $9976			bra 	ReturnFalse
.998d					BinaryCompareGreater:
.998d	fa		plx				plx
.998e	20 b5 99	jsr $99b5			jsr 	CompareBaseCode
.9991	c9 01		cmp #$01			cmp 	#1
.9993	f0 d5		beq $996a			beq 	ReturnTrue
.9995	80 df		bra $9976			bra 	ReturnFalse
.9997					BinaryCompareNotEqual:
.9997	fa		plx				plx
.9998	20 b5 99	jsr $99b5			jsr 	CompareBaseCode
.999b	c9 00		cmp #$00			cmp 	#0
.999d	d0 cb		bne $996a			bne 	ReturnTrue
.999f	80 d5		bra $9976			bra 	ReturnFalse
.99a1					BinaryCompareLessEqual:
.99a1	fa		plx				plx
.99a2	20 b5 99	jsr $99b5			jsr 	CompareBaseCode
.99a5	c9 01		cmp #$01			cmp 	#1
.99a7	d0 c1		bne $996a			bne 	ReturnTrue
.99a9	80 cb		bra $9976			bra 	ReturnFalse
.99ab					BinaryCompareGreaterEqual:
.99ab	fa		plx				plx
.99ac	20 b5 99	jsr $99b5			jsr 	CompareBaseCode
.99af	c9 ff		cmp #$ff			cmp 	#$FF
.99b1	d0 b7		bne $996a			bne 	ReturnTrue
.99b3	80 c1		bra $9976			bra 	ReturnFalse
.99b5					CompareBaseCode:
.99b5	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; make both values if references.
.99b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.99bb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99be	29 10		and #$10			and 	#NSTString
.99c0	d0 40		bne $9a02			bne 	_CBCString
.99c2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.99c5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99c8	d0 3b		bne $9a05			bne 	_CBCFloat
.99ca	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99cd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99d0	29 08		and #$08			and 	#NSTFloat
.99d2	d0 31		bne $9a05			bne 	_CBCFloat
.99d4	20 08 9a	jsr $9a08			jsr 	CompareFixMinusZero
.99d7	e8		inx				inx
.99d8	20 08 9a	jsr $9a08			jsr 	CompareFixMinusZero
.99db	ca		dex				dex
.99dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.99df	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.99e2	10 0b		bpl $99ef			bpl 	_CDCSameSign
.99e4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.99e7	30 16		bmi $99ff			bmi 	_CBCLess 					; return $FF
.99e9					_CBCGreater:
.99e9	a9 01		lda #$01			lda 	#1
.99eb	60		rts				rts
.99ec					_CBCEqual:
.99ec	a9 00		lda #$00			lda 	#0
.99ee	60		rts				rts
.99ef					_CDCSameSign:
.99ef	20 18 9b	jsr $9b18			jsr 	SubTopTwoStack 				; unsigned subtract
.99f2	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; or the mantissa together
.99f5	f0 f5		beq $99ec			beq 	_CBCEqual 					; -0 == 0
.99f7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.99fa	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.99fd	10 ea		bpl $99e9			bpl 	_CBCGreater
.99ff					_CBCLess:
.99ff	a9 ff		lda #$ff			lda 	#$FF
.9a01	60		rts				rts
.9a02					_CBCString:
.9a02	4c 6e 9a	jmp $9a6e			jmp 	CompareStrings
.9a05					_CBCFloat:
.9a05	4c 55 af	jmp $af55			jmp 	CompareFloat
.9a08					CompareFixMinusZero:
.9a08	20 05 a5	jsr $a505			jsr 	NSMIsZero
.9a0b	d0 03		bne $9a10			bne 	_CFXMZNotZero
.9a0d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9a10					_CFXMZNotZero:
.9a10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9a11					StringConcat:
.9a11	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a14	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a17	29 18		and #$18			and 	#NSBTypeMask
.9a19	c9 10		cmp #$10			cmp 	#NSTString
.9a1b	d0 4e		bne $9a6b			bne		_SCType
.9a1d	64 38		stz $38				stz 	zTemp1 						; counting total length
.9a1f	e8		inx				inx
.9a20	20 3e 9a	jsr $9a3e			jsr 	_SCSetupZ0 					; setup for second
.9a23	20 49 9a	jsr $9a49			jsr 	_SCLengthZ0 				; length for second
.9a26	ca		dex				dex
.9a27	20 3e 9a	jsr $9a3e			jsr 	_SCSetupZ0 					; setup for first
.9a2a	20 49 9a	jsr $9a49			jsr 	_SCLengthZ0 				; length for first
.9a2d	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9a2f	20 67 b6	jsr $b667			jsr 	StringTempAllocate
.9a32	20 5c 9a	jsr $9a5c			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9a35	e8		inx				inx
.9a36	20 3e 9a	jsr $9a3e			jsr 	_SCSetupZ0 					; copy second out
.9a39	20 5c 9a	jsr $9a5c			jsr 	_SCCopy
.9a3c	ca		dex				dex
.9a3d	60		rts				rts
.9a3e					_SCSetupZ0:
.9a3e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a41	85 36		sta $36				sta 	zTemp0
.9a43	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a46	85 37		sta $37				sta 	zTemp0+1
.9a48	60		rts				rts
.9a49					_SCLengthZ0:
.9a49	5a		phy				phy
.9a4a	a0 00		ldy #$00			ldy 	#0
.9a4c					_SCLenLoop:
.9a4c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a4e	f0 0a		beq $9a5a			beq 	_SCLExit
.9a50	c8		iny				iny
.9a51	e6 38		inc $38				inc 	zTemp1
.9a53	10 f7		bpl $9a4c			bpl		_SCLenLoop
.9a55	a9 09		lda #$09		lda	#9
.9a57	4c fd 98	jmp $98fd		jmp	ErrorHandler
.9a5a					_SCLExit:
.9a5a	7a		ply				ply
.9a5b	60		rts				rts
.9a5c					_SCCopy:
.9a5c	5a		phy				phy
.9a5d	a0 00		ldy #$00			ldy 	#0
.9a5f					_SCCopyLoop:
.9a5f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a61	f0 06		beq $9a69			beq 	_SCCExit
.9a63	20 a5 b6	jsr $b6a5			jsr 	StringTempWrite
.9a66	c8		iny				iny
.9a67	80 f6		bra $9a5f			bra 	_SCCopyLoop
.9a69					_SCCExit:
.9a69	7a		ply				ply
.9a6a	60		rts				rts
.9a6b					_SCType:
.9a6b	4c ed b2	jmp $b2ed			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ad16					IntegerDivide:
.ad16	fa		plx				plx
.ad17	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad1a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad1d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad1e	0a		asl a				asl 	a
.ad1f	10 05		bpl $ad26			bpl 	_NotRef
.ad21	48		pha				pha
.ad22	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad25	68		pla				pla
.ad26					_NotRef:
.ad26	0a		asl a				asl 	a
.ad27	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad29	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad2c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad2f	f0 03		beq $ad34			beq 	_IntegerCode 				; if clear, then we have two integers
.ad31	4c ed b2	jmp $b2ed			jmp 	TypeError 					; anything else, type mismatch.
.ad34					_IntegerCode:
.ad34	20 56 ad	jsr $ad56			jsr 	CheckDivideZero 			; do div zero check
.ad37	20 8e ad	jsr $ad8e			jsr 	Int32Divide 				; do the division
.ad3a	20 4b ae	jsr $ae4b			jsr 	CalculateSign 				; calculate result sign
.ad3d					NSMCopyPlusTwoToZero:
.ad3d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ad40	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ad43	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ad46	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad49	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ad4c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ad4f	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ad52	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ad55	60		rts				rts
.ad56					CheckDivideZero:
.ad56	e8		inx				inx
.ad57	20 05 a5	jsr $a505			jsr 	NSMIsZero
.ad5a	f0 02		beq $ad5e			beq 	_CDVError
.ad5c	ca		dex				dex
.ad5d	60		rts				rts
.ad5e					_CDVError:
.ad5e	a9 03		lda #$03		lda	#3
.ad60	4c fd 98	jmp $98fd		jmp	ErrorHandler
.ad63					IntegerModulus:
.ad63	fa		plx				plx
.ad64	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad67	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad6a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad6b	0a		asl a				asl 	a
.ad6c	10 05		bpl $ad73			bpl 	_NotRef
.ad6e	48		pha				pha
.ad6f	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad72	68		pla				pla
.ad73					_NotRef:
.ad73	0a		asl a				asl 	a
.ad74	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad76	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad79	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad7c	f0 03		beq $ad81			beq 	_IntegerCode 				; if clear, then we have two integers
.ad7e	4c ed b2	jmp $b2ed			jmp 	TypeError 					; anything else, type mismatch.
.ad81					_IntegerCode:
.ad81					IntegerModulusNoCheck:
.ad81	20 56 ad	jsr $ad56			jsr 	CheckDivideZero 			; do div zero check
.ad84	20 8e ad	jsr $ad8e			jsr 	Int32Divide 				; do the division
.ad87	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ad8a	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ad8d	60		rts				rts
.ad8e					Int32Divide:
.ad8e	48		pha				pha 								; save AXY
.ad8f	5a		phy				phy
.ad90	20 ac a4	jsr $a4ac			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ad93	20 d1 a4	jsr $a4d1			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ad96	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ad98					_I32DivideLoop:
.ad98	e8		inx				inx
.ad99	e8		inx				inx
.ad9a	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ad9d	ca		dex				dex
.ad9e	ca		dex				dex
.ad9f	20 eb a4	jsr $a4eb			jsr 	NSMRotateLeft
.ada2	20 ce ad	jsr $adce			jsr 	DivideCheckSubtract 		; check if subtract possible
.ada5	90 03		bcc $adaa			bcc 	_I32DivideNoCarryIn
.ada7	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.adaa					_I32DivideNoCarryIn:
.adaa	88		dey				dey 								; loop round till division completed.
.adab	d0 eb		bne $ad98			bne 	_I32DivideLoop
.adad	7a		ply				ply 								; restore AXY and exit
.adae	68		pla				pla
.adaf	60		rts				rts
.adb0					Int32ShiftDivide:
.adb0	48		pha				pha 								; save AY
.adb1	5a		phy				phy
.adb2	e8		inx				inx 								; clear S[X+2]
.adb3	e8		inx				inx
.adb4	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero
.adb7	ca		dex				dex
.adb8	ca		dex				dex
.adb9	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.adbb					_I32SDLoop:
.adbb	20 ce ad	jsr $adce			jsr 	DivideCheckSubtract 		; check if subtract possible
.adbe	e8		inx				inx
.adbf	e8		inx				inx
.adc0	20 eb a4	jsr $a4eb			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.adc3	ca		dex				dex
.adc4	ca		dex				dex
.adc5	20 eb a4	jsr $a4eb			jsr 	NSMRotateLeft
.adc8	88		dey				dey 	 							; do 31 times
.adc9	d0 f0		bne $adbb			bne 	_I32SDLoop
.adcb	7a		ply				ply 								; restore AY and exit
.adcc	68		pla				pla
.adcd	60		rts				rts
.adce					DivideCheckSubtract:
.adce	20 18 9b	jsr $9b18			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.add1	b0 04		bcs $add7			bcs 	_DCSExit 					; if carry set, then could do, exit
.add3	20 f2 9a	jsr $9af2			jsr 	AddTopTwoStack 				; add it back in
.add6	18		clc				clc 								; and return False
.add7					_DCSExit:
.add7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.add8					MulInteger:
.add8	fa		plx				plx
.add9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.addc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.addf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ade0	0a		asl a				asl 	a
.ade1	10 05		bpl $ade8			bpl 	_NotRef
.ade3	48		pha				pha
.ade4	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ade7	68		pla				pla
.ade8					_NotRef:
.ade8	0a		asl a				asl 	a 							; put MSB of type into A:7
.ade9	30 0b		bmi $adf6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.adeb	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.adee	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.adf1	f0 06		beq $adf9			beq 	_IntegerCode 				; if clear, then we have two integers
.adf3	4c 2c b0	jmp $b02c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.adf6					_StringData:
.adf6	4c f7 b2	jmp $b2f7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.adf9					_IntegerCode:
.adf9	20 06 ae	jsr $ae06			jsr 	MultiplyShort
.adfc	c9 00		cmp #$00			cmp 	#0
.adfe	f0 05		beq $ae05			beq 	_MIExit
.ae00	a9 04		lda #$04		lda	#4
.ae02	4c fd 98	jmp $98fd		jmp	ErrorHandler
.ae05					_MIExit:
.ae05	60		rts				rts
.ae06					MultiplyShort:
.ae06	5a		phy				phy 								; save Y
.ae07	20 ac a4	jsr $a4ac			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae0a	20 d1 a4	jsr $a4d1			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ae0d	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ae0f					_I32MLoop:
.ae0f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ae12	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ae15	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ae18	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ae1b	f0 28		beq $ae45			beq 	_I32MExit 					; exit if zero
.ae1d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.ae20	29 01		and #$01			and 	#1
.ae22	f0 0e		beq $ae32			beq 	_I32MNoAdd
.ae24	20 f2 9a	jsr $9af2			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ae27	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.ae2a	10 06		bpl $ae32			bpl 	_I32MNoAdd
.ae2c					_I32ShiftRight:
.ae2c	20 f8 a4	jsr $a4f8			jsr 	NSMShiftRight 				; shift S[X] right
.ae2f	c8		iny				iny 								; increment shift count
.ae30	80 0a		bra $ae3c			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.ae32					_I32MNoAdd:
.ae32	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ae35	70 f5		bvs $ae2c			bvs 	_I32ShiftRight 				; instead.
.ae37	e8		inx				inx
.ae38	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ae3b	ca		dex				dex
.ae3c					_I32MShiftUpper:
.ae3c	e8		inx				inx 								; shift S[X+2] right
.ae3d	e8		inx				inx
.ae3e	20 f8 a4	jsr $a4f8			jsr 	NSMShiftRight
.ae41	ca		dex				dex
.ae42	ca		dex				dex
.ae43	80 ca		bra $ae0f			bra 	_I32MLoop 					; try again.
.ae45					_I32MExit:
.ae45	20 4b ae	jsr $ae4b			jsr 	CalculateSign
.ae48	98		tya				tya 								; shift in A
.ae49	7a		ply				ply 								; restore Y and exit
.ae4a	60		rts				rts
.ae4b					CalculateSign:
.ae4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ae4e	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ae51	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ae54	0a		asl a				asl 	a 							; shift bit 7 into carry
.ae55	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ae58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a6e					CompareStrings:
.9a6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9a71	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a74	29 10		and #$10			and 	#NSBIsString
.9a76	f0 2c		beq $9aa4			beq 	_CSTypeError
.9a78	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a7b	85 36		sta $36				sta 	zTemp0
.9a7d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a80	85 37		sta $37				sta 	zTemp0+1
.9a82	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a85	85 38		sta $38				sta 	zTemp1
.9a87	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a8a	85 39		sta $39				sta 	zTemp1+1
.9a8c	5a		phy				phy 								; save Y so we can access strings
.9a8d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a8f					_CSLoop:
.9a8f	c8		iny				iny
.9a90	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a92	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a94	d0 06		bne $9a9c			bne 	_CSDifferent
.9a96	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a98	d0 f5		bne $9a8f			bne 	_CSLoop 					; still comparing
.9a9a					_CSExit:
.9a9a	7a		ply				ply 								; reached end, return zero in A from EOS
.9a9b	60		rts				rts
.9a9c					_CSDifferent:
.9a9c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a9e	90 fa		bcc $9a9a			bcc		_CSExit
.9aa0	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9aa2	80 f6		bra $9a9a			bra 	_CSExit
.9aa4					_CSTypeError:
.9aa4	4c ed b2	jmp $b2ed			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9aa7					ShiftLeft:
.9aa7	38		sec				sec
.9aa8	80 01		bra $9aab			bra 	ShiftMain
.9aaa					ShiftRight:
.9aaa	18		clc				clc
.9aab					ShiftMain:
.9aab	fa		plx				plx 								; restore X
.9aac	08		php				php 								; save direction
.9aad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ab0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ab3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ab4	0a		asl a				asl 	a
.9ab5	10 05		bpl $9abc			bpl 	_NotRef
.9ab7	48		pha				pha
.9ab8	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9abb	68		pla				pla
.9abc					_NotRef:
.9abc	0a		asl a				asl 	a
.9abd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9abf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ac2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ac5	f0 03		beq $9aca			beq 	_IntegerCode 				; if clear, then we have two integers
.9ac7	4c ed b2	jmp $b2ed			jmp 	TypeError 					; anything else, type mismatch.
.9aca					_IntegerCode:
.9aca	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9acd	29 e0		and #$e0			and 	#$E0
.9acf	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ad2	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9ad5	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ad8	d0 13		bne $9aed			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9ada					_SMLoop:
.9ada	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9add	30 11		bmi $9af0			bmi 	_SMExit 					; exit if done.
.9adf	28		plp				plp 								; restore direcition setting
.9ae0	08		php				php
.9ae1	90 05		bcc $9ae8			bcc 	_SMRight
.9ae3	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; shift left if CS
.9ae6	80 f2		bra $9ada			bra 	_SMLoop
.9ae8					_SMRight:
.9ae8	20 f8 a4	jsr $a4f8			jsr 	NSMShiftRight 				; shift right if CC
.9aeb	80 ed		bra $9ada			bra 	_SMLoop
.9aed					_SMExit0:
.9aed	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero 					; return zero.
.9af0					_SMExit:
.9af0	28		plp				plp 								; throw direction
.9af1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9af2					AddTopTwoStack:
.9af2	18		clc				clc
.9af3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9af6	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9af9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9afc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9aff	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9b02	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b05	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b08	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9b0b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b0e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b11	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b14	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b17	60		rts				rts
.9b18					SubTopTwoStack:
.9b18	38		sec				sec
.9b19	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b1c	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9b1f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b22	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b25	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9b28	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b2b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b2e	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9b31	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b34	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b37	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9b3a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b3d	60		rts				rts
.9b3e					AddInteger:
.9b3e	fa		plx				plx
.9b3f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b42	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b45	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b46	0a		asl a				asl 	a
.9b47	10 05		bpl $9b4e			bpl 	_NotRef
.9b49	48		pha				pha
.9b4a	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b4d	68		pla				pla
.9b4e					_NotRef:
.9b4e	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b4f	30 0b		bmi $9b5c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b51	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b54	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b57	f0 06		beq $9b5f			beq 	_IntegerCode 				; if clear, then we have two integers
.9b59	4c b4 ae	jmp $aeb4			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b5c					_StringData:
.9b5c	4c 11 9a	jmp $9a11			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b5f					_IntegerCode:
.9b5f					AddCode:
.9b5f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b62	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b65	10 8b		bpl $9af2			bpl 	AddTopTwoStack
.9b67	20 18 9b	jsr $9b18			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b6a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b6d	10 09		bpl $9b78			bpl 	_AddExit
.9b6f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b72	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b75	20 8a a4	jsr $a48a			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b78					_AddExit:
.9b78	60		rts				rts
.9b79					SubInteger:
.9b79	fa		plx				plx
.9b7a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b7d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b80	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b81	0a		asl a				asl 	a
.9b82	10 05		bpl $9b89			bpl 	_NotRef
.9b84	48		pha				pha
.9b85	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b88	68		pla				pla
.9b89					_NotRef:
.9b89	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b8a	30 0b		bmi $9b97			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b8c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b8f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b92	f0 06		beq $9b9a			beq 	_IntegerCode 				; if clear, then we have two integers
.9b94	4c b9 ae	jmp $aeb9			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b97					_StringData:
.9b97	4c f7 b2	jmp $b2f7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b9a					_IntegerCode:
.9b9a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9b9d	49 80		eor #$80			eor 	#$80
.9b9f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9ba2	80 bb		bra $9b5f			bra 	AddCode 					; and do the same code as add.
.9ba4					AndInteger:
.9ba4	fa		plx				plx
.9ba5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ba8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bab	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bac	0a		asl a				asl 	a
.9bad	10 05		bpl $9bb4			bpl 	_NotRef
.9baf	48		pha				pha
.9bb0	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bb3	68		pla				pla
.9bb4					_NotRef:
.9bb4	0a		asl a				asl 	a
.9bb5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bb7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bba	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bbd	f0 03		beq $9bc2			beq 	_IntegerCode 				; if clear, then we have two integers
.9bbf	4c ed b2	jmp $b2ed			jmp 	TypeError 					; anything else, type mismatch.
.9bc2					_IntegerCode:
.9bc2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bc5	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9bc8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bcb	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bce	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9bd1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bd4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bd7	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9bda	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bdd	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9be0	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9be3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9be6	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9be9	60		rts				rts
.9bea					OraInteger:
.9bea	fa		plx				plx
.9beb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bee	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bf1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bf2	0a		asl a				asl 	a
.9bf3	10 05		bpl $9bfa			bpl 	_NotRef
.9bf5	48		pha				pha
.9bf6	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bf9	68		pla				pla
.9bfa					_NotRef:
.9bfa	0a		asl a				asl 	a
.9bfb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bfd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c00	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c03	f0 03		beq $9c08			beq 	_IntegerCode 				; if clear, then we have two integers
.9c05	4c ed b2	jmp $b2ed			jmp 	TypeError 					; anything else, type mismatch.
.9c08					_IntegerCode:
.9c08	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c0b	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9c0e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c11	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c14	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c17	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c1a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c1d	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9c20	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c23	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c26	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9c29	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c2c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c2f	60		rts				rts
.9c30					EorInteger:
.9c30	fa		plx				plx
.9c31	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c34	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c37	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c38	0a		asl a				asl 	a
.9c39	10 05		bpl $9c40			bpl 	_NotRef
.9c3b	48		pha				pha
.9c3c	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c3f	68		pla				pla
.9c40					_NotRef:
.9c40	0a		asl a				asl 	a
.9c41	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c43	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c46	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c49	f0 03		beq $9c4e			beq 	_IntegerCode 				; if clear, then we have two integers
.9c4b	4c ed b2	jmp $b2ed			jmp 	TypeError 					; anything else, type mismatch.
.9c4e					_IntegerCode:
.9c4e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c51	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9c54	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c57	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c5a	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9c5d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c60	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c63	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9c66	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c69	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c6c	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9c6f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c72	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c75	60		rts				rts
.9c76					WordIndirect:
.9c76	fa		plx				plx
.9c77	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c7a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c7d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c7e	0a		asl a				asl 	a
.9c7f	10 05		bpl $9c86			bpl 	_NotRef
.9c81	48		pha				pha
.9c82	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c85	68		pla				pla
.9c86					_NotRef:
.9c86	0a		asl a				asl 	a
.9c87	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c89	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c8c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c8f	f0 03		beq $9c94			beq 	_IntegerCode 				; if clear, then we have two integers
.9c91	4c ed b2	jmp $b2ed			jmp 	TypeError 					; anything else, type mismatch.
.9c94					_IntegerCode:
.9c94	20 5f 9b	jsr $9b5f			jsr 	AddCode 					; add the two values
.9c97	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c99	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c9c	60		rts				rts
.9c9d					ByteIndirect:
.9c9d	fa		plx				plx
.9c9e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ca1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ca4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ca5	0a		asl a				asl 	a
.9ca6	10 05		bpl $9cad			bpl 	_NotRef
.9ca8	48		pha				pha
.9ca9	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cac	68		pla				pla
.9cad					_NotRef:
.9cad	0a		asl a				asl 	a
.9cae	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cb0	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cb3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cb6	f0 03		beq $9cbb			beq 	_IntegerCode 				; if clear, then we have two integers
.9cb8	4c ed b2	jmp $b2ed			jmp 	TypeError 					; anything else, type mismatch.
.9cbb					_IntegerCode:
.9cbb	20 5f 9b	jsr $9b5f			jsr 	AddCode 					; add the two values
.9cbe	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9cc0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ae59					ConvertInt16:
.ae59	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ae5c	8e 10 04	stx $0410			stx 	NSMantissa1
.ae5f	9c 18 04	stz $0418			stz 	NSMantissa2
.ae62	9c 20 04	stz $0420			stz 	NSMantissa3
.ae65	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ae68	a2 00		ldx #$00			ldx 	#0 							; stack level
.ae6a	a9 0a		lda #$0a			lda 	#10 						; base
.ae6c	80 00		bra $ae6e			bra 	ConvertInt32
.ae6e					ConvertInt32:
.ae6e	5a		phy				phy
.ae6f	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ae71	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ae74	10 08		bpl $ae7e			bpl 	_CI32NotNeg
.ae76	48		pha				pha
.ae77	a9 2d		lda #$2d			lda 	#'-'
.ae79	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae7c	c8		iny				iny
.ae7d	68		pla				pla
.ae7e					_CI32NotNeg:
.ae7e	20 8c ae	jsr $ae8c			jsr 	_CI32DivideConvert 			; recursive conversion
.ae81	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ae83	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae86	7a		ply				ply
.ae87	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ae89	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ae8b	60		rts				rts
.ae8c					_CI32DivideConvert:
.ae8c	e8		inx				inx 								; write to next slot up
.ae8d	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.ae90	ca		dex				dex
.ae91	20 8e ad	jsr $ad8e			jsr 	Int32Divide 				; divide
.ae94	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ae97	48		pha				pha
.ae98	20 3d ad	jsr $ad3d			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ae9b	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; is it zero ?
.ae9e	f0 06		beq $aea6			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.aea0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.aea3	20 8c ae	jsr $ae8c			jsr 	_CI32DivideConvert 			; and recusrively call.
.aea6					_CI32NoRecurse:
.aea6	68		pla				pla 								; remainder
.aea7	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.aea9	90 02		bcc $aead			bcc 	_CI32NotHex
.aeab	69 26		adc #$26			adc 	#6+32
.aead					_CI32NotHex:
.aead	69 30		adc #$30			adc 	#48
.aeaf	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.aeb2	c8		iny				iny
.aeb3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cc4					PrecedenceLevel:
>9cc4	04					.byte	 4	; $00 <<
>9cc5	02					.byte	 2	; $01 <=
>9cc6	02					.byte	 2	; $02 <>
>9cc7	00					.byte	 0	; $03 !!3
>9cc8	00					.byte	 0	; $04 ><
>9cc9	02					.byte	 2	; $05 >=
>9cca	04					.byte	 4	; $06 >>
>9ccb	00					.byte	 0	; $07 !!7
>9ccc	00					.byte	 0	; $08 !!8
>9ccd	00					.byte	 0	; $09 !!9
>9cce	00					.byte	 0	; $0a !!10
>9ccf	00					.byte	 0	; $0b !!11
>9cd0	00					.byte	 0	; $0c !!12
>9cd1	00					.byte	 0	; $0d !!13
>9cd2	00					.byte	 0	; $0e !!14
>9cd3	00					.byte	 0	; $0f !!15
>9cd4	00					.byte	 0	; $10 @
>9cd5	00					.byte	 0	; $11 !!17
>9cd6	00					.byte	 0	; $12 !!18
>9cd7	00					.byte	 0	; $13 [
>9cd8	04					.byte	 4	; $14 \
>9cd9	00					.byte	 0	; $15 ]
>9cda	01					.byte	 1	; $16 ^
>9cdb	00					.byte	 0	; $17 _
>9cdc	00					.byte	 0	; $18 `
>9cdd	00					.byte	 0	; $19 !!25
>9cde	00					.byte	 0	; $1a !!26
>9cdf	00					.byte	 0	; $1b {
>9ce0	01					.byte	 1	; $1c |
>9ce1	00					.byte	 0	; $1d }
>9ce2	00					.byte	 0	; $1e ~
>9ce3	00					.byte	 0	; $1f [7m<7F>[m
>9ce4	00					.byte	 0	; $20
>9ce5	05					.byte	 5	; $21 !
>9ce6	00					.byte	 0	; $22 "
>9ce7	00					.byte	 0	; $23 #
>9ce8	05					.byte	 5	; $24 $
>9ce9	04					.byte	 4	; $25 %
>9cea	01					.byte	 1	; $26 &
>9ceb	00					.byte	 0	; $27 '
>9cec	00					.byte	 0	; $28 (
>9ced	00					.byte	 0	; $29 )
>9cee	04					.byte	 4	; $2a *
>9cef	03					.byte	 3	; $2b +
>9cf0	00					.byte	 0	; $2c ,
>9cf1	03					.byte	 3	; $2d -
>9cf2	00					.byte	 0	; $2e .
>9cf3	04					.byte	 4	; $2f /
>9cf4	00					.byte	 0	; $30 0
>9cf5	00					.byte	 0	; $31 1
>9cf6	00					.byte	 0	; $32 2
>9cf7	00					.byte	 0	; $33 3
>9cf8	00					.byte	 0	; $34 4
>9cf9	00					.byte	 0	; $35 5
>9cfa	00					.byte	 0	; $36 6
>9cfb	00					.byte	 0	; $37 7
>9cfc	00					.byte	 0	; $38 8
>9cfd	00					.byte	 0	; $39 9
>9cfe	00					.byte	 0	; $3a :
>9cff	00					.byte	 0	; $3b ;
>9d00	02					.byte	 2	; $3c <
>9d01	02					.byte	 2	; $3d =
>9d02	02					.byte	 2	; $3e >
>9d03	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9d04					EvaluateExpressionAt0:
.9d04	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9d06					EvaluateExpression:
.9d06	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d08					EvaluateExpressionAtPrecedence:
.9d08	48		pha				pha 								; save precedence level
.9d09	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d0c	68		pla				pla 								; restore precedence level.
.9d0d					_EXPRLoop:
.9d0d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d0f	b1 30		lda ($30),y			lda 	(codePtr),y
.9d11	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d13	b0 25		bcs $9d3a			bcs 	_EXPRExit
.9d15	da		phx				phx 								; read the operator precedence
.9d16	aa		tax				tax
.9d17	bd c4 9c	lda $9cc4,x			lda 	PrecedenceLevel,x
.9d1a	fa		plx				plx
.9d1b	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d1d	f0 1b		beq $9d3a			beq 	_EXPRExit
.9d1f	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d21	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d23	c5 37		cmp $37				cmp 	zTemp0+1
.9d25	b0 13		bcs $9d3a			bcs		_EXPRExit 					; if current >= operator exit
.9d27	48		pha				pha 								; save current precedence.
.9d28	b1 30		lda ($30),y			lda 	(codePtr),y
.9d2a	c8		iny				iny
.9d2b	48		pha				pha
.9d2c	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d2e	e8		inx				inx 								; work out the right hand side.
.9d2f	20 08 9d	jsr $9d08			jsr 	EvaluateExpressionAtPrecedence
.9d32	ca		dex				dex
.9d33	68		pla				pla 								; get operator, call the code.
.9d34	20 3d 9d	jsr $9d3d			jsr 	_EXPRCaller
.9d37	68		pla				pla 								; restore precedence level
.9d38	80 d3		bra $9d0d			bra 	_EXPRLoop 					; and go round.
.9d3a					_EXPRExit:
.9d3a	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d3c	60		rts				rts
.9d3d					_EXPRCaller:
.9d3d	da		phx				phx 								; save on stack, first thing is to restore it
.9d3e	0a		asl a				asl 	a 							; double so can use vectors into X
.9d3f	aa		tax				tax
.9d40	7c f8 94	jmp ($94f8,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.aeb4					FloatingPointAdd:
.aeb4	20 55 b0	jsr $b055			jsr 	FloatPrepare 				; prepare for floats
.aeb7	80 0b		bra $aec4			bra 	FloatAdd
.aeb9					FloatingPointSub:
.aeb9	20 55 b0	jsr $b055			jsr 	FloatPrepare 				; prepare for floats
.aebc					FloatSubtract:
.aebc	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.aebf	49 80		eor #$80			eor 	#$80
.aec1	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.aec4					FloatAdd:
.aec4	48		pha				pha
.aec5	5a		phy				phy
.aec6	20 66 b0	jsr $b066			jsr 	NSNormalise 				; normalise S[X]
.aec9	f0 54		beq $af1f			beq 	_FAReturn1
.aecb	e8		inx				inx 								; normalise S[X+1]
.aecc	20 66 b0	jsr $b066			jsr 	NSNormalise
.aecf	ca		dex				dex
.aed0	c9 00		cmp #$00			cmp 	#0
.aed2	f0 6f		beq $af43			beq 	_FAExit 					; if so, just return A
.aed4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.aed7	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.aeda	f0 1b		beq $aef7			beq 	_FAExponentsEqual
.aedc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.aedf	a8		tay				tay
.aee0	38		sec				sec 								; do a signed comparison of the exponents.
.aee1	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aee4	50 02		bvc $aee8			bvc 	_FANoSignedChange
.aee6	49 80		eor #$80			eor 	#$80
.aee8					_FANoSignedChange:
.aee8	29 80		and #$80			and 	#$80
.aeea	10 03		bpl $aeef			bpl 	_FAHaveMax
.aeec	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.aeef					_FAHaveMax:
.aeef	20 46 af	jsr $af46			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.aef2	e8		inx				inx
.aef3	20 46 af	jsr $af46			jsr 	_FAShiftToExponent
.aef6	ca		dex				dex
.aef7					_FAExponentsEqual:
.aef7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.aefa	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aefd	30 10		bmi $af0f			bmi 	_FADifferentSigns
.aeff	20 f2 9a	jsr $9af2			jsr 	AddTopTwoStack 				; do the add of the mantissae
.af02	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.af05	10 3c		bpl $af43			bpl 	_FAExit 					; if no, we are done.
.af07	20 f8 a4	jsr $a4f8			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.af0a	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.af0d	80 34		bra $af43			bra 	_FAExit
.af0f					_FADifferentSigns:
.af0f	20 18 9b	jsr $9b18			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.af12	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.af15	10 2c		bpl $af43			bpl 	_FAExit 					; if no, we are done.
.af17	20 81 a4	jsr $a481			jsr 	NSMNegate 					; netate result
.af1a	20 8a a4	jsr $a48a			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.af1d	80 24		bra $af43			bra 	_FAExit
.af1f					_FAReturn1:
.af1f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.af22	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af25	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.af28	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af2b	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.af2e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af31	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.af34	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af37	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.af3a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af3d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.af40	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af43					_FAExit:
.af43	7a		ply				ply
.af44	68		pla				pla
.af45	60		rts				rts
.af46					_FAShiftToExponent:
.af46					_FAShiftToExponent2:
.af46	98		tya				tya 								; compare Y to exponent
.af47	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.af4a	f0 08		beq $af54			beq 	_FASEExit 					; exit if so.
.af4c	20 f8 a4	jsr $a4f8			jsr 	NSMShiftRight	 			; shift the mantissa right
.af4f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.af52	80 f2		bra $af46			bra 	_FAShiftToExponent2
.af54					_FASEExit:
.af54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.af55					CompareFloat:
.af55	20 bc ae	jsr $aebc			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.af58	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.af5b	29 f8		and #$f8			and 	#$F8
.af5d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.af60	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.af63	f0 09		beq $af6e			beq 	_FCExit 					; zero, so approximately identical
.af65	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.af67	3c 00 04	bit $0400,x			bit 	NSStatus,x
.af6a	10 02		bpl $af6e			bpl 	_FCExit
.af6c					_FCNegative:
.af6c	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.af6e					_FCExit:
.af6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.af6f					FDivideCommand:
.af6f	fa		plx				plx	 								; restore stack position
.af70	20 55 b0	jsr $b055			jsr 	FloatPrepare 				; prepare for floats
.af73					FloatDivide:
.af73	48		pha				pha
.af74	e8		inx				inx
.af75	20 66 b0	jsr $b066			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.af78	ca		dex				dex
.af79	c9 00		cmp #$00			cmp 	#0
.af7b	f0 20		beq $af9d			beq 	_FDZero
.af7d	20 66 b0	jsr $b066			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.af80	f0 19		beq $af9b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.af82	20 b0 ad	jsr $adb0			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.af85	20 3d ad	jsr $ad3d			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.af88	20 66 b0	jsr $b066			jsr		NSNormalise 				; renormalise
.af8b	20 4b ae	jsr $ae4b			jsr 	CalculateSign 				; calculate result sign
.af8e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.af91	38		sec				sec
.af92	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af95	38		sec				sec
.af96	e9 1e		sbc #$1e			sbc 	#30
.af98	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af9b					_FDExit:
.af9b	68		pla				pla
.af9c	60		rts				rts
.af9d					_FDZero:
.af9d	a9 03		lda #$03		lda	#3
.af9f	4c fd 98	jmp $98fd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.afa2					FloatFractionalPart:
.afa2	5a		phy				phy
.afa3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.afa6	29 7f		and #$7f			and 	#$7F
.afa8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.afab	20 66 b0	jsr $b066			jsr 	NSNormalise
.afae	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.afb1	38		sec				sec
.afb2	e9 e0		sbc #$e0			sbc 	#$E0
.afb4	90 31		bcc $afe7			bcc 	_FFPExit 					; already fractional
.afb6	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.afb8	b0 2a		bcs $afe4			bcs 	_FFPZero
.afba	a8		tay				tay 								; put count to do in Y
.afbb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.afbe	20 e9 af	jsr $afe9			jsr 	_FFPPartial
.afc1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afc4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.afc7	20 e9 af	jsr $afe9			jsr 	_FFPPartial
.afca	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afcd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.afd0	20 e9 af	jsr $afe9			jsr 	_FFPPartial
.afd3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afd6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.afd9	20 e9 af	jsr $afe9			jsr 	_FFPPartial
.afdc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afdf	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; zeroed check.
.afe2	d0 03		bne $afe7			bne 	_FFPExit
.afe4					_FFPZero:
.afe4	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero
.afe7					_FFPExit:
.afe7	7a		ply				ply
.afe8	60		rts				rts
.afe9					_FFPPartial:
.afe9	c0 00		cpy #$00			cpy 	#0 							; no more to do
.afeb	f0 17		beq $b004			beq 	_FFFPPExit
.afed	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.afef	b0 0c		bcs $affd			bcs 	_FFFPPWholeByte
.aff1	5a		phy				phy
.aff2					_FFFPPLeft:
.aff2	0a		asl a				asl 	a
.aff3	88		dey				dey
.aff4	d0 fc		bne $aff2			bne 	_FFFPPLeft
.aff6	7a		ply				ply
.aff7					_FFFPPRight:
.aff7	4a		lsr a				lsr 	a
.aff8	88		dey				dey
.aff9	d0 fc		bne $aff7			bne 	_FFFPPRight
.affb	80 07		bra $b004			bra 	_FFFPPExit
.affd					_FFFPPWholeByte:
.affd	98		tya				tya 								; subtract 8 from count
.affe	38		sec				sec
.afff	e9 08		sbc #$08			sbc 	#8
.b001	a8		tay				tay
.b002	a9 00		lda #$00			lda 	#0 							; and clear all
.b004					_FFFPPExit:
.b004	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b005					FloatIntegerPart:
.b005	48		pha				pha
.b006	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b009	f0 1f		beq $b02a			beq 	_FIPExit 					; if so do nothing
.b00b	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; is it zero ?
.b00e	f0 17		beq $b027			beq 	_FIPZero 					; if so return zero.
.b010	20 66 b0	jsr $b066			jsr 	NSNormalise 				; normalise
.b013	f0 12		beq $b027			beq 	_FIPZero 					; normalised to zero, exit zero
.b015					_FIPShift:
.b015	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b018	10 08		bpl $b022			bpl 	_FIPCheckZero
.b01a	20 f8 a4	jsr $a4f8			jsr 	NSMShiftRight 				; shift mantissa right
.b01d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b020	80 f3		bra $b015			bra 	_FIPShift
.b022					_FIPCheckZero:
.b022	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; avoid -0 problem
.b025	d0 03		bne $b02a			bne 	_FIPExit 					; set to zero if mantissa zero.
.b027					_FIPZero:
.b027	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero
.b02a					_FIPExit:
.b02a	68		pla				pla
.b02b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b02c					FloatingPointMultiply:
.b02c	20 55 b0	jsr $b055			jsr 	FloatPrepare 				; prepare for floats
.b02f					FloatMultiply:
.b02f	48		pha				pha
.b030	20 66 b0	jsr $b066			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b033	f0 1b		beq $b050			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b035	e8		inx				inx
.b036	20 66 b0	jsr $b066			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b039	ca		dex				dex
.b03a	c9 00		cmp #$00			cmp 	#0
.b03c	f0 0f		beq $b04d			beq 	_FDSetZero
.b03e	20 06 ae	jsr $ae06			jsr 	MultiplyShort 				; calculate the result.
.b041	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b044	18		clc				clc
.b045	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b048	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b04b	80 03		bra $b050			bra 	_FDExit
.b04d					_FDSetZero:
.b04d	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero 					; return 0
.b050					_FDExit:
.b050	20 66 b0	jsr $b066			jsr 	NSNormalise 				; normalise the result
.b053	68		pla				pla
.b054	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b055					FloatPrepare:
.b055	20 16 9e	jsr $9e16			jsr 	DereferenceTopTwo 			; dereference the top two values
.b058	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b05b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b05e	29 10		and #$10			and 	#NSBIsString
.b060	d0 01		bne $b063			bne 	_FDType
.b062	60		rts				rts
.b063					_FDType:
.b063	4c ed b2	jmp $b2ed			jmp 	TypeError
.b066					NSNormalise:
.b066	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b069	29 80		and #$80			and 	#$80
.b06b	09 08		ora #$08			ora 	#NSTFloat
.b06d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b070	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; if zero exit
.b073	d0 09		bne $b07e			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b075	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b078	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b07b	a9 00		lda #$00			lda 	#0 							; set Z flag
.b07d	60		rts				rts
.b07e					_NSNormaliseOptimise:
.b07e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b081	d0 22		bne $b0a5			bne 	_NSNormaliseLoop
.b083	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b086	30 1d		bmi $b0a5			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b088	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b08b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b08e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b091	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b094	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b097	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b09a	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b09d	38		sec				sec
.b09e	e9 08		sbc #$08			sbc 	#8
.b0a0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0a3	80 d9		bra $b07e			bra 	_NSNormaliseOptimise
.b0a5					_NSNormaliseLoop:
.b0a5	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b0a8	70 08		bvs $b0b2			bvs 	_NSNExit 					; exit if so with Z flag clear
.b0aa	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; shift mantissa left
.b0ad	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b0b0	80 f3		bra $b0a5			bra 	_NSNormaliseLoop
.b0b2					_NSNExit:
.b0b2	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b0b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d43					AssignNumber:
.9d43	5a		phy				phy
.9d44	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d47	85 36		sta $36				sta 	zTemp0
.9d49	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d4c	85 37		sta $37				sta 	zTemp0+1
.9d4e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9d51	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d53	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d56	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d58	c9 08		cmp #$08			cmp 	#NSTFloat
.9d5a	f0 2a		beq $9d86			beq 	_ANFloat
.9d5c	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9d5f	f0 05		beq $9d66			beq		_ANNotFloat
.9d61	e8		inx				inx
.9d62	20 05 b0	jsr $b005			jsr 	FloatIntegerPart 			; make it an integer
.9d65	ca		dex				dex
.9d66					_ANNotFloat:
.9d66	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d69	29 03		and #$03			and 	#3
.9d6b	d0 05		bne $9d72			bne 	_ANByteWord
.9d6d	20 92 9d	jsr $9d92			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d70	80 1e		bra $9d90			bra 	_ANExit
.9d72					_ANByteWord:
.9d72	48		pha				pha 								; save count
.9d73	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9d76	92 36		sta ($36)			sta 	(zTemp0)
.9d78	68		pla				pla
.9d79	c9 01		cmp #$01			cmp	 	#1
.9d7b	f0 13		beq $9d90			beq 	_ANExit
.9d7d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9d80	a0 01		ldy #$01			ldy 	#1
.9d82	91 36		sta ($36),y			sta 	(zTemp0),y
.9d84	80 0a		bra $9d90			bra 	_ANExit
.9d86					_ANFloat:
.9d86	20 92 9d	jsr $9d92			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d89	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d8c	a0 04		ldy #$04			ldy 	#4
.9d8e	91 36		sta ($36),y			sta 	(zTemp0),y
.9d90					_ANExit:
.9d90	7a		ply				ply
.9d91	60		rts				rts
.9d92					_ANCopy4PackSign:
.9d92	a0 03		ldy #$03			ldy 	#3
.9d94	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9d97	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9d99	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9d9c	91 36		sta ($36),y			sta 	(zTemp0),y
.9d9e	88		dey				dey
.9d9f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9da2	91 36		sta ($36),y			sta 	(zTemp0),y
.9da4	88		dey				dey
.9da5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9da8	91 36		sta ($36),y			sta 	(zTemp0),y
.9daa	88		dey				dey
.9dab	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dae	91 36		sta ($36),y			sta 	(zTemp0),y
.9db0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9db1					AssignString:
.9db1	5a		phy				phy
.9db2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9db5	85 38		sta $38				sta 	zTemp1
.9db7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9dba	85 39		sta $39				sta 	zTemp1+1
.9dbc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dbf	85 36		sta $36				sta 	zTemp0
.9dc1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dc4	85 37		sta $37				sta 	zTemp0+1
.9dc6	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9dc8	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dca	f0 23		beq $9def			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dcc	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9dcd	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9dcf	e9 02		sbc #$02			sbc 	#2
.9dd1	85 3c		sta $3c				sta 	zsTemp
.9dd3	a0 01		ldy #$01			ldy 	#1
.9dd5	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dd7	e9 00		sbc #$00			sbc 	#0
.9dd9	85 3d		sta $3d				sta 	zsTemp+1
.9ddb	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9ddd					_ASGetLength:
.9ddd	c8		iny				iny
.9dde	b1 38		lda ($38),y			lda 	(zTemp1),y
.9de0	d0 fb		bne $9ddd			bne 	_ASGetLength
.9de2	98		tya				tya 								; is this length <= current length
.9de3	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9de5	90 20		bcc $9e07			bcc 	_ASCopyString
.9de7	f0 1e		beq $9e07			beq 	_ASCopyString
.9de9	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9deb	a0 01		ldy #$01			ldy 	#1
.9ded	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9def					_ASNewStringRequired:
.9def	e8		inx				inx 								; concrete the new string.
.9df0	20 e6 b5	jsr $b5e6			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9df3	ca		dex				dex
.9df4	18		clc				clc
.9df5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9df8	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9dfa	92 36		sta ($36)			sta 	(zTemp0)
.9dfc	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9dff	69 00		adc #$00			adc 	#0
.9e01	a0 01		ldy #$01			ldy 	#1
.9e03	91 36		sta ($36),y			sta 	(zTemp0),y
.9e05	80 0d		bra $9e14			bra 	_ASExit
.9e07					_ASCopyString:
.9e07	a0 00		ldy #$00			ldy 	#0
.9e09					_ASCopyLoop:
.9e09	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e0b	c8		iny				iny
.9e0c	c8		iny				iny
.9e0d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e0f	88		dey				dey
.9e10	c9 00		cmp #$00			cmp 	#0
.9e12	d0 f5		bne $9e09			bne 	_ASCopyLoop
.9e14					_ASExit:
.9e14	7a		ply				ply
.9e15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e16					DereferenceTopTwo:
.9e16	e8		inx				inx
.9e17	20 1b 9e	jsr $9e1b			jsr 	Dereference 				; deref x+1
.9e1a	ca		dex				dex  								; falls through to deref x
.9e1b					Dereference:
.9e1b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9e1e	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9e20	f0 57		beq $9e79			beq 	_DRFExit 					; not a reference
.9e22	5a		phy				phy
.9e23	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e26	85 36		sta $36				sta 	zTemp0
.9e28	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e2b	85 37		sta $37				sta 	zTemp0+1
.9e2d	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9e30	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e32	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9e38	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e3a	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e3c	f0 0f		beq $9e4d			beq 	_DRFDereferenceTwo
.9e3e	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e40	f0 39		beq $9e7b			beq 	_DRFFull
.9e42	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e45	29 03		and #$03			and 	#3
.9e47	f0 32		beq $9e7b			beq 	_DRFFull 					; the whole word
.9e49	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e4b	f0 07		beq $9e54			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e4d					_DRFDereferenceTwo:
.9e4d	a0 01		ldy #$01			ldy 	#1
.9e4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e51	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e54					_DRFClear23:
.9e54	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e57	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e5a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9e5d	29 18		and #$18			and 	#NSBTypeMask
.9e5f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e62	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e64	d0 12		bne $9e78			bne 	_DRFNotString
.9e66	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9e69	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e6c	d0 0a		bne $9e78			bne 	_DRFNotString
.9e6e	a9 7a		lda #$7a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e70	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9e73	a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e75	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9e78					_DRFNotString
.9e78	7a		ply				ply 								; restore Y and exit
.9e79					_DRFExit:
.9e79	60		rts				rts
.9e7a					_DRFNullString:
>9e7a	00						.byte 	0
.9e7b					_DRFFull:
.9e7b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e7d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e7f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e82	c8		iny				iny
.9e83	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e85	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e88	c8		iny				iny
.9e89	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e8b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e8e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9e91	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9e94	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e96	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9e99	f0 06		beq $9ea1			beq 	_DRFNoExponent
.9e9b	c8		iny				iny 								; if not, read the exponent as well.
.9e9c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e9e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9ea1					_DRFNoExponent:
.9ea1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9ea4	10 0d		bpl $9eb3			bpl 	_DRFExit2 					; if not, then exit.
.9ea6	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ea8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9eab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9eae	09 80		ora #$80			ora 	#NSBIsNegative
.9eb0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9eb3					_DRFExit2:
.9eb3	7a		ply				ply
.9eb4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9eb5					EncodeNumberStart:
.9eb5	38		sec				sec
.9eb6	80 01		bra $9eb9			bra 	EncodeNumberContinue+1
.9eb8					EncodeNumberContinue:
.9eb8	18		clc				clc
.9eb9					EncodeNumber:
.9eb9	08		php				php 								; save reset.
.9eba	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9ebc	f0 12		beq $9ed0			beq 	_ENIsOkay
.9ebe	c9 30		cmp #$30			cmp 	#"0"
.9ec0	90 04		bcc $9ec6			bcc 	_ENBadNumber
.9ec2	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ec4	90 0a		bcc $9ed0			bcc 	_ENIsOkay
.9ec6					_ENBadNumber:
.9ec6	28		plp				plp 								; throw saved reset
.9ec7	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9eca	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ecc	f0 7e		beq $9f4c			beq 	_ENConstructFinal
.9ece					_ENFail:
.9ece	18		clc				clc 								; not allowed
.9ecf	60		rts				rts
.9ed0					_ENIsOkay:
.9ed0	28		plp				plp 								; are we restarting
.9ed1	90 15		bcc $9ee8			bcc 	_ENNoRestart
.9ed3					_ENStartEncode:
.9ed3	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9ed5	f0 0c		beq $9ee3			beq 	_ENFirstDP
.9ed7	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ed9	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.9edc	a9 01		lda #$01			lda 	#ESTA_Low
.9ede					_ENExitChange:
.9ede	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ee1	38		sec				sec
.9ee2	60		rts				rts
.9ee3					_ENFirstDP:
.9ee3	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero 					; clear integer part
.9ee6	80 3f		bra $9f27			bra 	_ESTASwitchFloat			; go straight to float and exi
.9ee8					_ENNoRestart:
.9ee8	48		pha				pha 								; save on stack.
.9ee9	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9eec	c9 01		cmp #$01			cmp 	#ESTA_Low
.9eee	f0 09		beq $9ef9			beq  	_ESTALowState
.9ef0	c9 02		cmp #$02			cmp 	#ESTA_High
.9ef2	f0 29		beq $9f1d			beq 	_ESTAHighState
.9ef4	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ef6	f0 3b		beq $9f33			beq 	_ESTADecimalState
>9ef8	db						.byte 	$DB 						; causes a break in the emulator
.9ef9					_ESTALowState:
.9ef9	68		pla				pla 								; get value back
.9efa	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9efc	f0 29		beq $9f27			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9efe	29 0f		and #$0f			and 	#15 						; make digit
.9f00	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9f03	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9f06	0a		asl a				asl 	a
.9f07	0a		asl a				asl 	a
.9f08	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f0b	0a		asl a				asl 	a
.9f0c	6d 86 04	adc $0486			adc 	DigitTemp
.9f0f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f12	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f14	90 05		bcc $9f1b			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f16	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f18	8d 85 04	sta $0485			sta 	EncodeState
.9f1b					_ESTANoSwitch:
.9f1b	38		sec				sec
.9f1c	60		rts				rts
.9f1d					_ESTAHighState:
.9f1d	68		pla				pla 								; get value back
.9f1e	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f20	f0 05		beq $9f27			beq 	_ESTASwitchFloat
.9f22	20 86 9f	jsr $9f86			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f25	38		sec				sec
.9f26	60		rts				rts
.9f27					_ESTASwitchFloat:
.9f27	9c 87 04	stz $0487			stz 	DecimalCount
.9f2a	e8		inx				inx 								; zero the decimal additive.
.9f2b	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero
.9f2e	ca		dex				dex
.9f2f	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f31	80 ab		bra $9ede			bra 	_ENExitChange
.9f33					_ESTADecimalState:
.9f33	68		pla				pla 								; digit.
.9f34	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f36	f0 96		beq $9ece			beq 	_ENFail
.9f38	e8		inx				inx 								; put digit into fractional part of X+1
.9f39	20 86 9f	jsr $9f86			jsr 	ESTAShiftDigitIntoMantissa
.9f3c	ca		dex				dex
.9f3d	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9f40	ad 87 04	lda $0487			lda 	DecimalCount
.9f43	c9 0b		cmp #$0b			cmp 	#11
.9f45	f0 02		beq $9f49			beq 	_ESTADSFail
.9f47	38		sec				sec
.9f48	60		rts				rts
.9f49					_ESTADSFail:
.9f49	4c e8 b2	jmp $b2e8			jmp 	RangeError
.9f4c					_ENConstructFinal:
.9f4c	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9f4f	f0 33		beq $9f84			beq 	_ENCFExit 					; no decimals
.9f51	5a		phy				phy
.9f52	0a		asl a				asl 	a 							; x 4 and CLC
.9f53	0a		asl a				asl 	a
.9f54	6d 87 04	adc $0487			adc 	DecimalCount
.9f57	a8		tay				tay
.9f58	b9 a7 b2	lda $b2a7,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f5b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f5e	b9 a8 b2	lda $b2a8,y			lda 	DecimalScalarTable-5+1,y
.9f61	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f64	b9 a9 b2	lda $b2a9,y			lda 	DecimalScalarTable-5+2,y
.9f67	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f6a	b9 aa b2	lda $b2aa,y			lda 	DecimalScalarTable-5+3,y
.9f6d	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f70	b9 ab b2	lda $b2ab,y			lda 	DecimalScalarTable-5+4,y
.9f73	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f76	a9 08		lda #$08			lda 	#NSTFloat
.9f78	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f7b	7a		ply				ply
.9f7c	e8		inx				inx 								; multiply decimal const by decimal scalar
.9f7d	20 2f b0	jsr $b02f			jsr 	FloatMultiply
.9f80	ca		dex				dex
.9f81	20 c4 ae	jsr $aec4			jsr 	FloatAdd 					; add to integer part.
.9f84					_ENCFExit:
.9f84	18		clc				clc 								; reject the digit.
.9f85	60		rts				rts
.9f86					ESTAShiftDigitIntoMantissa:
.9f86	29 0f		and #$0f			and 	#15 						; save digit
.9f88	48		pha				pha
.9f89	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f8c	48		pha				pha
.9f8d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f90	48		pha				pha
.9f91	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f94	48		pha				pha
.9f95	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f98	48		pha				pha
.9f99	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; x 2
.9f9c	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; x 4
.9f9f	18		clc				clc 								; pop mantissa and add
.9fa0	68		pla				pla
.9fa1	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fa4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fa7	68		pla				pla
.9fa8	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9fab	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fae	68		pla				pla
.9faf	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9fb2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fb5	68		pla				pla
.9fb6	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9fb9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9fbc	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; x 10
.9fbf	68		pla				pla 								; add digit
.9fc0	18		clc				clc
.9fc1	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fc4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fc7	90 0d		bcc $9fd6			bcc 	_ESTASDExit
.9fc9	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9fcc	d0 08		bne $9fd6			bne 	_ESTASDExit
.9fce	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9fd1	d0 03		bne $9fd6			bne 	_ESTASDExit
.9fd3	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9fd6					_ESTASDExit:
.9fd6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fd7					EvaluateTerm:
.9fd7	b1 30		lda ($30),y			lda 	(codePtr),y
.9fd9	30 18		bmi $9ff3			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fdb	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fdd	b0 6f		bcs $a04e			bcs 	_ETVariable
.9fdf	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fe1	90 6e		bcc $a051			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fe3	c9 3a		cmp #$3a			cmp 	#'9'+1
.9fe5	b0 6a		bcs $a051			bcs 	_ETPuncUnary
.9fe7	20 b5 9e	jsr $9eb5			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9fea					_ETNumber:
.9fea	c8		iny				iny 								; keep encoding until we have the numbers
.9feb	b1 30		lda ($30),y			lda 	(codePtr),y
.9fed	20 b8 9e	jsr $9eb8			jsr 	EncodeNumberContinue
.9ff0	b0 f8		bcs $9fea			bcs 	_ETNumber 					; go back if accepted.
.9ff2	60		rts				rts
.9ff3					_ETCheckUnary:
.9ff3	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9ff5	f0 41		beq $a038			beq 	_ETString
.9ff7	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9ff9	f0 12		beq $a00d			beq 	_ETHexConstant
.9ffb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9ffd	90 0b		bcc $a00a			bcc 	_ETSyntaxError
.9fff	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1
.a001	b0 07		bcs $a00a			bcs 	_ETSyntaxError
.a003	da		phx				phx 								; push X on the stack
.a004	0a		asl a				asl 	a 							; put vector x 2 into X
.a005	aa		tax				tax
.a006	c8		iny				iny 								; consume unary function token
.a007	7c 78 95	jmp ($9578,x)			jmp 	(VectorSet0,x) 				; and do it.
.a00a					_ETSyntaxError:
.a00a	4c e3 b2	jmp $b2e3			jmp 	SyntaxError
.a00d					_ETHexConstant:
.a00d	c8		iny				iny 								; skip #
.a00e	c8		iny				iny 								; skip count
.a00f	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero 					; clear result
.a012					_ETHLoop:
.a012	b1 30		lda ($30),y			lda 	(codePtr),y
.a014	c8		iny				iny 								; and consume
.a015	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a017	f0 1e		beq $a037			beq 	_ETHExit
.a019	48		pha				pha 								; save on stack.
.a01a	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; x 2
.a01d	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; x 4
.a020	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; x 8
.a023	20 ea a4	jsr $a4ea			jsr 	NSMShiftLeft 				; x 16
.a026	68		pla				pla 								; ASCII
.a027	c9 41		cmp #$41			cmp 	#'A'
.a029	90 02		bcc $a02d			bcc 	_ETHNotChar
.a02b	e9 07		sbc #$07			sbc 	#7
.a02d					_ETHNotChar:
.a02d	29 0f		and #$0f			and 	#15 						; digit now
.a02f	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a032	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a035	80 db		bra $a012			bra 	_ETHLoop 					; go round.
.a037					_ETHExit:
.a037	60		rts				rts
.a038					_ETString:
.a038	c8		iny				iny 								; look at length
.a039	b1 30		lda ($30),y			lda 	(codePtr),y
.a03b	48		pha				pha
.a03c	c8		iny				iny 								; first character
.a03d	20 1f a5	jsr $a51f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a040	68		pla				pla 								; restore count and save
.a041	85 36		sta $36				sta 	zTemp0
.a043	98		tya				tya 								; add length to Y to skip it.
.a044	18		clc				clc
.a045	65 36		adc $36				adc 	zTemp0
.a047	a8		tay				tay
.a048	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a04a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a04d	60		rts				rts
.a04e					_ETVariable:
.a04e	4c a8 a0	jmp $a0a8			jmp 	VariableHandler
.a051					_ETPuncUnary:
.a051	c8		iny				iny 								; consume the unary character
.a052	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a054	f0 2d		beq $a083			beq 	_ETUnaryNegate
.a056	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a058	f0 39		beq $a093			beq 	_ETDereference
.a05a	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a05c	f0 43		beq $a0a1			beq 	_ETParenthesis
.a05e	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a060	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a062	f0 06		beq $a06a			beq 	_ETIndirection
.a064	e6 36		inc $36				inc 	zTemp0
.a066	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a068	d0 a0		bne $a00a			bne 	_ETSyntaxError
.a06a					_ETIndirection:
.a06a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a06c	1a		inc a				inc 	a
.a06d	48		pha				pha
.a06e	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm				; evaluate the term
.a071	20 1b 9e	jsr $9e1b			jsr 	Dereference 				; dereference it.
.a074	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a077	d0 07		bne $a080			bne 	_ETTypeMismatch
.a079	68		pla				pla 								; indirection 1-2
.a07a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a07c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a07f	60		rts				rts
.a080					_ETTypeMismatch:
.a080	4c ed b2	jmp $b2ed			jmp 	TypeError
.a083					_ETUnaryNegate:
.a083	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm				; evaluate the term
.a086	20 1b 9e	jsr $9e1b			jsr 	Dereference 				; dereference it.
.a089	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a08c	29 10		and #$10			and 	#NSTString
.a08e	d0 f0		bne $a080			bne 	_ETTypeMismatch
.a090	4c 81 a4	jmp $a481			jmp 	NSMNegate  					; just toggles the sign bit.
.a093					_ETDereference:
.a093	20 d7 9f	jsr $9fd7			jsr 	EvaluateTerm				; evaluate the term
.a096	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a099	29 20		and #$20			and 	#NSBIsReference
.a09b	f0 e3		beq $a080			beq 	_ETTypeMismatch
.a09d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a0a0	60		rts				rts
.a0a1					_ETParenthesis:
.a0a1	20 06 9d	jsr $9d06			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a0a4	20 fd ac	jsr $acfd			jsr 	CheckRightBracket 			; check for )
.a0a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a0a8					VariableHandler:
.a0a8	b1 30		lda ($30),y			lda 	(codePtr),y
.a0aa	18		clc				clc
.a0ab	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a0ad	85 37		sta $37				sta 	zTemp0+1
.a0af	c8		iny				iny
.a0b0	b1 30		lda ($30),y			lda 	(codePtr),y
.a0b2	85 36		sta $36				sta 	zTemp0
.a0b4	c8		iny				iny
.a0b5	18		clc				clc									; copy variable address+3 to mantissa
.a0b6	69 03		adc #$03			adc 	#3
.a0b8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0bb	a5 37		lda $37				lda 	zTemp0+1
.a0bd	69 00		adc #$00			adc 	#0
.a0bf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0c2	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0c5	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0c8	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a0cb	5a		phy				phy
.a0cc	a0 02		ldy #$02			ldy 	#2 							; read type
.a0ce	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0d0	7a		ply				ply
.a0d1	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0d3	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0d5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0d8	29 04		and #$04			and 	#NSBIsArray
.a0da	d0 01		bne $a0dd			bne 	_VHArray
.a0dc	60		rts				rts
.a0dd					_VHArray:
.a0dd	e8		inx				inx
.a0de	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0e1	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0e3	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a0e6	b1 30		lda ($30),y			lda 	(codePtr),y
.a0e8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0ea	d0 06		bne $a0f2			bne 	_VHNoSecondIndex
.a0ec	c8		iny				iny 								; skip the comma
.a0ed	e8		inx				inx
.a0ee	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0f1	ca		dex				dex
.a0f2					_VHNoSecondIndex:
.a0f2	ca		dex				dex 								; set X back.
.a0f3	20 fd ac	jsr $acfd			jsr 	CheckRightBracket 			; and check the right bracket.
.a0f6	5a		phy				phy 								; save position
.a0f7	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a0f9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0fb	f0 6b		beq $a168			beq 	_VHBadIndex
.a0fd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a100	85 3e		sta $3e				sta 	zaTemp
.a102	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a105	85 3f		sta $3f				sta 	zaTemp+1
.a107	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a109	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a10b	f0 02		beq $a10f			beq 	_VHHas2Mask
.a10d	a9 ff		lda #$ff			lda 	#$FF
.a10f					_VHHas2Mask:
.a10f	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a112	f0 54		beq $a168			beq 	_VHBadIndex
.a114	0a		asl a				asl 	a 							; carry will be set if a second index
.a115	90 09		bcc $a120			bcc 	_VHCheckFirstIndex
.a117	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a119	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a11b	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a11e	90 48		bcc $a168			bcc 	_VHBadIndex
.a120					_VHCheckFirstIndex:
.a120	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a122	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a124	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a127	90 3f		bcc $a168			bcc 	_VHBadIndex
.a129	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a12b	64 37		stz $37				stz 	zTemp0+1
.a12d	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a130	30 0f		bmi $a141			bmi 	_VHNoMultiply
.a132	da		phx				phx
.a133	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a136	48		pha				pha
.a137	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a139	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a13b	1a		inc a				inc 	a 							; add 1 for zero base
.a13c	fa		plx				plx
.a13d	20 7f b1	jsr $b17f			jsr 	Multiply8x8 				; calculate -> Z0
.a140	fa		plx				plx
.a141					_VHNoMultiply:
.a141	18		clc				clc
.a142	a5 36		lda $36				lda 	zTemp0
.a144	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a147	85 36		sta $36				sta 	zTemp0
.a149	a5 37		lda $37				lda 	zTemp0+1
.a14b	69 00		adc #$00			adc 	#0
.a14d	85 37		sta $37				sta 	zTemp0+1
.a14f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a152	20 d9 8c	jsr $8cd9			jsr 	ScaleByBaseType
.a155	18		clc				clc
.a156	b2 3e		lda ($3e)			lda 	(zaTemp)
.a158	65 36		adc $36				adc 	zTemp0
.a15a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a15d	a0 01		ldy #$01			ldy 	#1
.a15f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a161	65 37		adc $37				adc 	zTemp0+1
.a163	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a166	7a		ply				ply 								; restore position
.a167	60		rts				rts
.a168					_VHBadIndex:
.a168	a9 17		lda #$17		lda	#23
.a16a	4c fd 98	jmp $98fd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b0b5					AbsUnary:
.b0b5	fa		plx				plx 								; restore stack pos
.b0b6	20 15 a4	jsr $a415			jsr 	EvaluateNumber 				; get a float or int
.b0b9	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.b0bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b0bf	29 7f		and #$7f			and 	#$7F
.b0c1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a16d					AllocUnary:
.a16d	fa		plx				plx 								; restore stack pos
.a16e	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger		; get bytes required.
.a171	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.a174	da		phx				phx 								; save X/Y
.a175	5a		phy				phy
.a176	8a		txa				txa 								; copy X into Y
.a177	a8		tay				tay
.a178	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a17b	aa		tax				tax
.a17c	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a17f	20 8c a1	jsr $a18c			jsr 	AllocateXABytes 			; allocate memory
.a182	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a185	8a		txa				txa
.a186	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a189	7a		ply				ply
.a18a	fa		plx				plx
.a18b	60		rts				rts
.a18c					AllocateXABytes:
.a18c	5a		phy				phy
.a18d	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a190	84 36		sty $36				sty 	zTemp0
.a192	5a		phy				phy
.a193	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a196	84 37		sty $37				sty 	zTemp0+1
.a198	5a		phy				phy
.a199	18		clc				clc 								; add to low memory pointer
.a19a	6d 8c 04	adc $048c			adc 	lowMemPtr
.a19d	8d 8c 04	sta $048c			sta 	lowMemPtr
.a1a0	8a		txa				txa
.a1a1	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a1a4	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a1a7	b0 2f		bcs $a1d8			bcs 	CISSMemory
.a1a9	20 ca a1	jsr $a1ca			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a1ac					_ClearMemory:
.a1ac	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a1af	c5 36		cmp $36				cmp 	zTemp0
.a1b1	d0 07		bne $a1ba			bne 	_CMClearNext
.a1b3	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a1b6	c5 37		cmp $37				cmp 	zTemp0+1
.a1b8	f0 0c		beq $a1c6			beq 	_CMExit
.a1ba					_CMClearNext:
.a1ba	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a1bc	92 36		sta ($36)			sta 	(zTemp0)
.a1be	e6 36		inc $36				inc 	zTemp0
.a1c0	d0 ea		bne $a1ac			bne 	_ClearMemory
.a1c2	e6 37		inc $37				inc		zTemp0+1
.a1c4	80 e6		bra $a1ac			bra 	_ClearMemory
.a1c6					_CMExit:
.a1c6	fa		plx				plx
.a1c7	68		pla				pla
.a1c8	7a		ply				ply
.a1c9	60		rts				rts
.a1ca					CheckIdentifierStringSpace:
.a1ca	48		pha				pha
.a1cb	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a1ce	18		clc				clc
.a1cf	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1d1	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a1d4	b0 02		bcs $a1d8			bcs 	CISSMemory
.a1d6	68		pla				pla
.a1d7	60		rts				rts
.a1d8					CISSMemory:
.a1d8	a9 06		lda #$06		lda	#6
.a1da	4c fd 98	jmp $98fd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b0c5					AscUnary:
.b0c5	fa		plx				plx 								; restore stack pos
.b0c6	20 20 a4	jsr $a420			jsr 	EvaluateString 				; get a string
.b0c9	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b0cb	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.b0ce	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.b0d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b0d2					FracUnary:
.b0d2	fa		plx				plx 								; restore stack pos
.b0d3	20 15 a4	jsr $a415			jsr 	EvaluateNumber 				; get a float or int
.b0d6	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.b0d9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0dc	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0de	f0 04		beq $b0e4			beq 	_IUZero
.b0e0	20 a2 af	jsr $afa2			jsr 	FloatFractionalPart
.b0e3	60		rts				rts
.b0e4					_IUZero:
.b0e4	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero
.b0e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b0e8					IntUnary:
.b0e8	fa		plx				plx 								; restore stack pos
.b0e9	20 15 a4	jsr $a415			jsr 	EvaluateNumber 				; get a float or int
.b0ec	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.b0ef	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0f2	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0f4	f0 03		beq $b0f9			beq 	_IUExit
.b0f6	20 05 b0	jsr $b005			jsr 	FloatIntegerPart
.b0f9					_IUExit:
.b0f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b0fa					LenUnary:
.b0fa	fa		plx				plx 								; restore stack pos
.b0fb	20 20 a4	jsr $a420			jsr 	EvaluateString 				; get a string
.b0fe	5a		phy				phy
.b0ff	a0 00		ldy #$00			ldy 	#0 							; find length
.b101					_LenFind:
.b101	b1 36		lda ($36),y			lda 	(zTemp0),y
.b103	f0 06		beq $b10b			beq 	_LenExit
.b105	c8		iny				iny
.b106	d0 f9		bne $b101			bne 	_LenFind
.b108	4c e8 b2	jmp $b2e8			jmp 	RangeError 					; string > 255
.b10b					_LenExit:
.b10b	98		tya				tya
.b10c	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.b10f	7a		ply				ply
.b110	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.b113	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a1dd					Unary_Not:
.a1dd	fa		plx				plx
.a1de	20 38 a4	jsr $a438			jsr 	EvaluateInteger 			; get integer
.a1e1	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.a1e4	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; zero mantissa ?
.a1e7	f0 04		beq $a1ed			beq 	_NotZero
.a1e9	20 d5 a4	jsr $a4d5			jsr 	NSMSetZero
.a1ec	60		rts				rts
.a1ed					_NotZero:
.a1ed	4c 6a 99	jmp $996a			jmp 	ReturnTrue
.a1f0					_UNBad:
.a1f0	4c f2 b2	jmp $b2f2			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a1f3					Unary_Random:
.a1f3	fa		plx				plx
.a1f4	20 72 a2	jsr $a272			jsr 	Random32Bit 				; get a random number
.a1f7	20 57 a2	jsr $a257			jsr 	URCopyToMantissa  			; put in mantissa
.a1fa	b1 30		lda ($30),y			lda 	(codePtr),y
.a1fc	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a1fe	f0 08		beq $a208			beq 	_URNoModulus
.a200	e8		inx				inx
.a201	20 4d a4	jsr $a44d			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a204	ca		dex				dex
.a205	20 81 ad	jsr $ad81			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a208					_URNoModulus:
.a208	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a20b	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a20e	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.a211	60		rts				rts
.a212					Unary_Rnd:
.a212	fa		plx				plx
.a213	20 15 a4	jsr $a415			jsr 	EvaluateNumber 				; number to use.
.a216	20 fd ac	jsr $acfd			jsr 	CheckRightBracket 			; closing bracket
.a219	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a21c	f0 2b		beq $a249			beq 	_URCopySeed
.a21e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a221	10 23		bpl $a246			bpl 	_URDontSeed
.a223	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a226	49 17		eor #$17			eor 	#$17
.a228	8d 88 04	sta $0488			sta 	RandomSeed+0
.a22b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a22e	49 a5		eor #$a5			eor 	#$A5
.a230	8d 89 04	sta $0489			sta 	RandomSeed+1
.a233	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a236	49 c2		eor #$c2			eor 	#$C2
.a238	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a23b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a23e	49 9d		eor #$9d			eor 	#$9D
.a240	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a243	20 72 a2	jsr $a272			jsr 	Random32Bit
.a246					_URDontSeed:
.a246	20 72 a2	jsr $a272			jsr 	Random32Bit 				; generate a number.
.a249					_URCopySeed:
.a249	20 57 a2	jsr $a257			jsr 	URCopyToMantissa 			; copy into mantissa
.a24c	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a24e	8d 28 04	sta $0428			sta 	NSExponent
.a251	a9 08		lda #$08			lda 	#NSTFloat
.a253	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a256	60		rts				rts
.a257					URCopyToMantissa:
.a257	ad 88 04	lda $0488			lda 	RandomSeed+0
.a25a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a25d	ad 89 04	lda $0489			lda 	RandomSeed+1
.a260	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a263	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a266	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a269	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a26c	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a26e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a271	60		rts				rts
.a272					Random32Bit:
.a272	5a		phy				phy
.a273	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a275	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a278	d0 03		bne $a27d			bne 	_Random1
.a27a	a8		tay				tay 								; if so do it 256 times
.a27b	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a27d					_Random1:
.a27d	0a		asl a				asl 	a 							; LSFR RNG
.a27e	2e 89 04	rol $0489			rol 	RandomSeed+1
.a281	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a284	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a287	90 02		bcc $a28b			bcc 	_Random2
.a289	49 c5		eor #$c5			eor 	#$C5
.a28b					_Random2:
.a28b	88		dey				dey
.a28c	d0 ef		bne $a27d			bne 	_Random1
.a28e	8d 88 04	sta $0488			sta 	RandomSeed+0
.a291	7a		ply				ply
.a292	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b114					SgnUnary:
.b114	fa		plx				plx 								; restore stack pos
.b115	20 15 a4	jsr $a415			jsr 	EvaluateNumber 				; get a float or int
.b118	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.b11b	20 05 a5	jsr $a505			jsr 	NSMIsZero 					; if zero
.b11e	f0 10		beq $b130			beq 	_SGZero  					; return Int Zero
.b120	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b123	48		pha				pha
.b124	a9 01		lda #$01			lda 	#1 							; set to 1
.b126	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.b129	68		pla				pla
.b12a	29 80		and #$80			and		#$80 						; copy the sign byte out
.b12c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b12f	60		rts				rts
.b130	20 d5 a4	jsr $a4d5	_SGZero:jsr 	NSMSetZero
.b133	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b134					ValUnary:
.b134	fa		plx				plx 								; restore stack pos
.b135	20 4a b1	jsr $b14a			jsr 	ValMainCode 				; do the main val() code
.b138	b0 01		bcs $b13b			bcs 	_VUError 					; couldn't convert
.b13a	60		rts				rts
.b13b					_VUError:
.b13b	4c ed b2	jmp $b2ed			jmp 	TypeError
.b13e					IsValUnary:
.b13e	fa		plx				plx 								; restore stack pos
.b13f	20 4a b1	jsr $b14a			jsr 	ValMainCode 				; do the main val() code
.b142	b0 03		bcs $b147			bcs 	_VUBad
.b144	4c 6a 99	jmp $996a			jmp 	ReturnTrue
.b147					_VUBad:
.b147	4c 76 99	jmp $9976			jmp 	ReturnFalse
.b14a					ValMainCode:
.b14a	20 20 a4	jsr $a420			jsr 	EvaluateString 				; get a string
.b14d	20 fd ac	jsr $acfd			jsr 	CheckRightBracket 			; check right bracket present
.b150	5a		phy				phy
.b151	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b153	f0 17		beq $b16c			beq 	_VMCFail2
.b155	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b157	48		pha				pha 								; save first character
.b158	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b15a	d0 01		bne $b15d			bne 	_VMCStart
.b15c	c8		iny				iny 								; skip over -
.b15d					_VMCStart:
.b15d	38		sec				sec 								; initialise first time round.
.b15e					_VMCNext:
.b15e	c8		iny				iny 								; pre-increment
.b15f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b161	f0 0c		beq $b16f			beq 	_VMCSuccess 				; successful.
.b163	20 b9 9e	jsr $9eb9			jsr 	EncodeNumber 				; send it to the number-builder
.b166	90 03		bcc $b16b			bcc 	_VMCFail 					; if failed, give up.
.b168	18		clc				clc 								; next time round, countinue
.b169	80 f3		bra $b15e			bra 	_VMCNext
.b16b					_VMCFail:
.b16b	68		pla				pla
.b16c					_VMCFail2:
.b16c	7a		ply				ply
.b16d	38		sec				sec
.b16e	60		rts				rts
.b16f					_VMCSuccess:
.b16f	a9 00		lda #$00			lda 	#0 							; construct final
.b171	20 b9 9e	jsr $9eb9			jsr 	EncodeNumber
.b174	68		pla				pla
.b175	c9 2d		cmp #$2d			cmp 	#"-"
.b177	d0 03		bne $b17c			bne 	_VMCNotNegative
.b179	20 81 a4	jsr $a481			jsr		NSMNegate
.b17c					_VMCNotNegative:
.b17c	7a		ply				ply
.b17d	18		clc				clc
.b17e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a293					ChrUnary:
.a293	fa		plx				plx 								; restore stack pos
.a294	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger			; get value
.a297	48		pha				pha
.a298	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.a29b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a29d	20 67 b6	jsr $b667			jsr 	StringTempAllocate
.a2a0	68		pla				pla 								; write number to it
.a2a1	20 a5 b6	jsr $b6a5			jsr 	StringTempWrite
.a2a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a2a5					SpcUnary:
.a2a5	fa		plx				plx 								; restore stack pos
.a2a6	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger			; get value
.a2a9	5a		phy				phy
.a2aa	48		pha				pha 								; save count
.a2ab	20 67 b6	jsr $b667			jsr 	StringTempAllocate
.a2ae	7a		ply				ply 								; to do count in Y
.a2af					_SpcLoop:
.a2af	c0 00		cpy #$00			cpy 	#0
.a2b1	f0 08		beq $a2bb			beq 	_SpcExit
.a2b3	a9 20		lda #$20			lda 	#32
.a2b5	20 a5 b6	jsr $b6a5			jsr 	StringTempWrite
.a2b8	88		dey				dey
.a2b9	80 f4		bra $a2af			bra 	_SPCLoop
.a2bb					_SpcExit:
.a2bb	7a		ply				ply
.a2bc	20 fd ac	jsr $acfd			jsr 	CheckRightBracket
.a2bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a2c0					Unary_Str:
.a2c0	fa		plx				plx
.a2c1	20 15 a4	jsr $a415			jsr 	EvaluateNumber  			; get number
.a2c4	20 fd ac	jsr $acfd			jsr 	CheckRightBracket 			; closing bracket
.a2c7	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a2c9	20 e2 a2	jsr $a2e2			jsr 	ConvertNumberToString 		; do the conversion.
.a2cc	a9 21		lda #$21			lda		#33 						; create buffer
.a2ce	20 67 b6	jsr $b667			jsr 	StringTempAllocate 			; allocate memory
.a2d1	da		phx				phx
.a2d2	a2 00		ldx #$00			ldx 	#0
.a2d4					_USCopy:
.a2d4	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2d7	20 a5 b6	jsr $b6a5			jsr 	StringTempWrite
.a2da	e8		inx				inx
.a2db	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2de	d0 f4		bne $a2d4			bne 	_USCopy
.a2e0	fa		plx				plx
.a2e1	60		rts				rts
.a2e2					ConvertNumberToString:
.a2e2	5a		phy				phy 								; save code position
.a2e3	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a2e6	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a2e9	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a2ec	10 0a		bpl $a2f8			bpl 	_CNTSNotNegative
.a2ee	29 7f		and #$7f			and 	#$7F 						; make +ve
.a2f0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2f3	a9 2d		lda #$2d			lda 	#"-"
.a2f5	20 5e a3	jsr $a35e			jsr 	WriteDecimalBuffer
.a2f8					_CNTSNotNegative:
.a2f8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a2fb	f0 15		beq $a312			beq 	_CNTSNotFloat
.a2fd	e8		inx				inx 								; round up
.a2fe	a9 01		lda #$01			lda 	#1
.a300	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.a303	ca		dex				dex
.a304	bd 28 04	lda $0428,x			lda		NSExponent,x
.a307	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a30a	a9 08		lda #$08			lda 	#NSTFloat
.a30c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a30f	20 c4 ae	jsr $aec4			jsr 	FloatAdd
.a312					_CNTSNotFloat:
.a312	20 40 a3	jsr $a340			jsr 	MakePlusTwoString
.a315	20 a2 af	jsr $afa2			jsr 	FloatFractionalPart 		; get the fractional part
.a318	20 66 b0	jsr $b066			jsr 	NSNormalise					; normalise , exit if zero
.a31b	f0 21		beq $a33e			beq 	_CNTSExit
.a31d	a9 2e		lda #$2e			lda 	#"."
.a31f	20 5e a3	jsr $a35e			jsr 	WriteDecimalBuffer 			; write decimal place
.a322					_CNTSDecimal:
.a322	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a325	30 17		bmi $a33e			bmi 	_CNTSExit
.a327	e8		inx				inx 								; x 10.0
.a328	a9 0a		lda #$0a			lda 	#10
.a32a	20 d7 a4	jsr $a4d7			jsr 	NSMSetByte
.a32d	a9 08		lda #$08			lda 	#NSTFloat
.a32f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a332	ca		dex				dex
.a333	20 2f b0	jsr $b02f			jsr 	FloatMultiply
.a336	20 40 a3	jsr $a340			jsr 	MakePlusTwoString
.a339	20 a2 af	jsr $afa2			jsr 	FloatFractionalPart 		; get the fractional part
.a33c	80 e4		bra $a322			bra 	_CNTSDecimal 				; keep going.
.a33e					_CNTSExit:
.a33e	7a		ply				ply
.a33f	60		rts				rts
.a340					MakePlusTwoString:
.a340	da		phx				phx
.a341	20 ac a4	jsr $a4ac			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a344	e8		inx				inx 								; access it
.a345	e8		inx				inx
.a346	20 05 b0	jsr $b005			jsr 	FloatIntegerPart 			; make it an integer
.a349	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a34b	20 6e ae	jsr $ae6e			jsr 	ConvertInt32
.a34e	a2 00		ldx #$00			ldx	 	#0
.a350					_MPTSCopy:
.a350	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a353	20 5e a3	jsr $a35e			jsr 	WriteDecimalBuffer
.a356	e8		inx				inx
.a357	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a35a	d0 f4		bne $a350			bne 	_MPTSCopy
.a35c	fa		plx				plx
.a35d	60		rts				rts
.a35e					WriteDecimalBuffer:
.a35e	da		phx				phx
.a35f	ae 95 04	ldx $0495			ldx 	dbOffset
.a362	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a365	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a368	ee 95 04	inc $0495			inc 	dbOffset
.a36b	fa		plx				plx
.a36c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a36d					Unary_Left:
.a36d	fa		plx				plx
.a36e	18		clc				clc 								; only one parameter
.a36f	20 e4 a3	jsr $a3e4			jsr 	SubstringInitial 			; set up.
.a372	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a375	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a378	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a37b	80 2c		bra $a3a9			bra 	SubstringMain
.a37d					Unary_Right:
.a37d	fa		plx				plx
.a37e	18		clc				clc 								; only one parameter
.a37f	20 e4 a3	jsr $a3e4			jsr 	SubstringInitial 			; set up.
.a382	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a385	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a388	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a38b	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a38e	b0 02		bcs $a392			bcs 	_URNotUnderflow
.a390	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a392					_URNotUnderFlow:
.a392	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a395	80 12		bra $a3a9			bra 	SubStringMain
.a397					Unary_Mid:
.a397	fa		plx				plx
.a398	38		sec				sec 								; two parameters
.a399	20 e4 a3	jsr $a3e4			jsr 	SubstringInitial 			; set up.
.a39c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a39f	f0 05		beq $a3a6			beq 	_UMError
.a3a1	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a3a4	80 03		bra $a3a9			bra 	SubStringMain
.a3a6					_UMError:
.a3a6	4c f2 b2	jmp $b2f2			jmp 	ArgumentError
.a3a9					SubStringMain:
.a3a9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a3ac	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a3af	b0 2d		bcs $a3de			bcs 	_SSMNull 					; if so, return an empty string.
.a3b1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a3b4	f0 28		beq $a3de			beq 	_SSMNull 					; return empty string.
.a3b6	18		clc				clc 								; add the offset +1 to the address and
.a3b7	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a3ba	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a3bd	85 36		sta $36				sta 	zTemp0
.a3bf	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a3c2	69 00		adc #$00			adc 	#0
.a3c4	85 37		sta $37				sta 	zTemp0+1
.a3c6					_SSMNoCarry:
.a3c6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a3c9	20 67 b6	jsr $b667			jsr 	StringTempAllocate 			; allocate that many characters
.a3cc	5a		phy				phy 								; save Y
.a3cd	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a3cf					_SSMCopy:
.a3cf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a3d1	f0 09		beq $a3dc			beq 	_SSMEString 				; no more to copy
.a3d3	20 a5 b6	jsr $b6a5			jsr 	StringTempWrite 			; and write it out.
.a3d6	c8		iny				iny
.a3d7	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a3da	d0 f3		bne $a3cf			bne 	_SSMCopy
.a3dc					_SSMEString:
.a3dc	7a		ply				ply
.a3dd					_SSMExit:
.a3dd	60		rts				rts
.a3de					_SSMNull:
.a3de	a9 00		lda #$00			lda 	#0
.a3e0	20 67 b6	jsr $b667			jsr 	StringTempAllocate
.a3e3	60		rts				rts
.a3e4					SubstringInitial:
.a3e4	da		phx				phx 								; save initial stack position
.a3e5	08		php				php 								; save carry on stack indicating 2 parameters
.a3e6	20 20 a4	jsr $a420			jsr 	EvaluateString 				; get a string
.a3e9	5a		phy				phy 								; calculate length to exponent.
.a3ea	a0 ff		ldy #$ff			ldy 	#$FF
.a3ec					_SIFindLength:
.a3ec	c8		iny				iny
.a3ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3ef	d0 fb		bne $a3ec			bne 	_SIFindLength
.a3f1	98		tya				tya
.a3f2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3f5	7a		ply				ply
.a3f6	e8		inx				inx
.a3f7	20 05 ad	jsr $ad05			jsr 	CheckComma 					; comma next
.a3fa	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; get next parameter
.a3fd	28		plp				plp 								; is it the last parameter ?
.a3fe	90 07		bcc $a407			bcc 	_SSIExit 					; if so, exit.
.a400	e8		inx				inx
.a401	20 05 ad	jsr $ad05			jsr 	CheckComma 					; comma next
.a404	20 6d a4	jsr $a46d			jsr 	Evaluate8BitInteger 		; get last parameter
.a407					_SSIExit:
.a407	fa		plx				plx
.a408	20 fd ac	jsr $acfd			jsr 	CheckRightBracket 			; check closing bracket
.a40b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a40c					EvaluateValue:
.a40c	48		pha				pha
.a40d	20 06 9d	jsr $9d06			jsr		EvaluateExpression 			; expression
.a410	20 1b 9e	jsr $9e1b			jsr 	Dereference					; derefernce it
.a413	68		pla				pla
.a414	60		rts				rts
.a415					EvaluateNumber:
.a415	20 0c a4	jsr $a40c			jsr 	EvaluateValue 				; get a value
.a418	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a41b	29 10		and #$10			and 	#NSBIsString
.a41d	d0 16		bne $a435			bne 	HelperTypeError
.a41f	60		rts				rts
.a420					EvaluateString:
.a420	20 0c a4	jsr $a40c			jsr 	EvaluateValue 				; get a value
.a423	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a426	29 10		and #$10			and 	#NSBIsString
.a428	f0 0b		beq $a435			beq 	HelperTypeError
.a42a					CopyAddressToTemp0:
.a42a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a42d	85 36		sta $36				sta 	zTemp0
.a42f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a432	85 37		sta $37				sta 	zTemp0+1
.a434	60		rts				rts
.a435					HelperTypeError:
.a435	4c ed b2	jmp $b2ed			jmp 	TypeError
.a438					EvaluateInteger:
.a438	20 15 a4	jsr $a415			jsr 	EvaluateNumber
.a43b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a43e	d0 0a		bne $a44a			bne 	HelperValueError 			; if not, it's a float.
.a440	60		rts				rts
.a441					EvaluateUnsignedInteger:
.a441	20 38 a4	jsr $a438			jsr 	EvaluateInteger 			; check integer is +ve
.a444	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a447	30 01		bmi $a44a			bmi 	HelperValueError
.a449	60		rts				rts
.a44a					HelperValueError:
.a44a	4c f2 b2	jmp $b2f2			jmp 	ArgumentError
.a44d					Evaluate16BitInteger:
.a44d	20 41 a4	jsr $a441			jsr	 	EvaluateUnsignedInteger		; get integer
.a450	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a453	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a456	d0 f2		bne $a44a			bne 	HelperValueError
.a458	60		rts				rts
.a459					Evaluate16BitIntegerSigned:
.a459	20 38 a4	jsr $a438			jsr	 	EvaluateInteger				; get integer
.a45c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a45f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a462	d0 e6		bne $a44a			bne 	HelperValueError
.a464	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a467	10 03		bpl $a46c			bpl 	_EISNotSigned
.a469	20 8a a4	jsr $a48a			jsr 	NSMNegateMantissa
.a46c					_EISNotSigned:
.a46c	60		rts				rts
.a46d					Evaluate8BitInteger:
.a46d	20 41 a4	jsr $a441			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a470	d0 d8		bne $a44a			bne 	HelperValueError
.a472	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a475	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a478	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a47b	d0 cd		bne $a44a			bne 	HelperValueError
.a47d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a480	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b17f					Multiply8x8:
.b17f	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b180	85 36		sta $36			  	sta 	zTemp0
.b182	86 37		stx $37				stx 	zTemp0+1
.b184	a9 00		lda #$00			lda 	#0
.b186	a2 08		ldx #$08			ldx 	#8
.b188					_M88Loop:
.b188	90 03		bcc $b18d			bcc 	_M88NoAdd
.b18a	18		clc				clc
.b18b	65 37		adc $37				adc 	zTemp0+1
.b18d					_M88NoAdd:
.b18d	6a		ror a				ror 	a
.b18e	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b190	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b191	d0 f5		bne $b188			bne 	_M88Loop
.b193	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b195	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a481					NSMNegate:
.a481	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a484	49 80		eor #$80			eor 	#NSBIsNegative
.a486	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a489	60		rts				rts
.a48a					NSMNegateMantissa:
.a48a	38		sec				sec
.a48b	a9 00		lda #$00			lda 	#0
.a48d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a490	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a493	a9 00		lda #$00			lda 	#0
.a495	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a498	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a49b	a9 00		lda #$00			lda 	#0
.a49d	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a4a0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a4a3	a9 00		lda #$00			lda 	#0
.a4a5	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a4a8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4ab	60		rts				rts
.a4ac					NSMShiftUpTwo:
.a4ac	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4af	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4b2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4b5	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a4b8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a4bb	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a4be	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4c1	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a4c4	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a4c7	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a4ca	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4cd	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a4d0	60		rts				rts
.a4d1					NSMSetZeroMantissaOnly:
.a4d1	a9 00		lda #$00			lda 	#0
.a4d3	80 08		bra $a4dd			bra 	NSMSetMantissa
.a4d5					NSMSetZero:
.a4d5	a9 00		lda #$00			lda 	#0
.a4d7					NSMSetByte:
.a4d7	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a4da	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a4dd					NSMSetMantissa:
.a4dd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a4e0	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a4e3	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a4e6	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a4e9	60		rts				rts
.a4ea					NSMShiftLeft:
.a4ea	18		clc				clc
.a4eb					NSMRotateLeft:
.a4eb	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a4ee	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a4f1	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a4f4	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a4f7	60		rts				rts
.a4f8					NSMShiftRight:
.a4f8	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a4fb	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a4fe	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a501	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a504	60		rts				rts
.a505					NSMIsZero:
.a505	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a508	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a50b	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a50e	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a511	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b196					Assemble_ora:
.b196	20 d2 88	jsr $88d2		jsr	AssembleGroup1
>b199	01					.byte $01
.b19a					Assemble_and:
.b19a	20 d2 88	jsr $88d2		jsr	AssembleGroup1
>b19d	21					.byte $21
.b19e					Assemble_eor:
.b19e	20 d2 88	jsr $88d2		jsr	AssembleGroup1
>b1a1	41					.byte $41
.b1a2					Assemble_adc:
.b1a2	20 d2 88	jsr $88d2		jsr	AssembleGroup1
>b1a5	61					.byte $61
.b1a6					Assemble_sta:
.b1a6	20 d2 88	jsr $88d2		jsr	AssembleGroup1
>b1a9	81					.byte $81
.b1aa					Assemble_lda:
.b1aa	20 d2 88	jsr $88d2		jsr	AssembleGroup1
>b1ad	a1					.byte $a1
.b1ae					Assemble_cmp:
.b1ae	20 d2 88	jsr $88d2		jsr	AssembleGroup1
>b1b1	c1					.byte $c1
.b1b2					Assemble_sbc:
.b1b2	20 d2 88	jsr $88d2		jsr	AssembleGroup1
>b1b5	e1					.byte $e1
.b1b6					Assemble_asl:
.b1b6	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1b9	02					.byte $02
>b1ba	75					.byte $75
.b1bb					Assemble_rol:
.b1bb	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1be	22					.byte $22
>b1bf	75					.byte $75
.b1c0					Assemble_lsr:
.b1c0	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1c3	42					.byte $42
>b1c4	75					.byte $75
.b1c5					Assemble_ror:
.b1c5	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1c8	62					.byte $62
>b1c9	75					.byte $75
.b1ca					Assemble_stx:
.b1ca	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1cd	82					.byte $82
>b1ce	50					.byte $50
.b1cf					Assemble_ldx:
.b1cf	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1d2	a2					.byte $a2
>b1d3	d0					.byte $d0
.b1d4					Assemble_dec:
.b1d4	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1d7	c2					.byte $c2
>b1d8	55					.byte $55
.b1d9					Assemble_inc:
.b1d9	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1dc	e2					.byte $e2
>b1dd	55					.byte $55
.b1de					Assemble_stz:
.b1de	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1e1	60					.byte $60
>b1e2	44					.byte $44
.b1e3					Assemble_bit:
.b1e3	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1e6	20					.byte $20
>b1e7	55					.byte $55
.b1e8					Assemble_sty:
.b1e8	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1eb	80					.byte $80
>b1ec	54					.byte $54
.b1ed					Assemble_ldy:
.b1ed	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1f0	a0					.byte $a0
>b1f1	d5					.byte $d5
.b1f2					Assemble_cpy:
.b1f2	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1f5	c0					.byte $c0
>b1f6	d4					.byte $d4
.b1f7					Assemble_cpx:
.b1f7	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1fa	e0					.byte $e0
>b1fb	d0					.byte $d0
.b1fc					Assemble_tsb:
.b1fc	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b1ff	00					.byte $00
>b200	50					.byte $50
.b201					Assemble_trb:
.b201	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b204	10					.byte $10
>b205	50					.byte $50
.b206					Assemble_jsr:
.b206	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b209	14					.byte $14
>b20a	10					.byte $10
.b20b					Assemble_jmp:
.b20b	20 d9 88	jsr $88d9		jsr	AssembleGroup2
>b20e	40					.byte $40
>b20f	10					.byte $10
.b210					Assemble_bpl:
.b210	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b213	10					.byte $10
.b214					Assemble_bmi:
.b214	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b217	30					.byte $30
.b218					Assemble_bvc:
.b218	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b21b	50					.byte $50
.b21c					Assemble_bvs:
.b21c	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b21f	70					.byte $70
.b220					Assemble_bcc:
.b220	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b223	90					.byte $90
.b224					Assemble_bcs:
.b224	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b227	b0					.byte $b0
.b228					Assemble_bne:
.b228	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b22b	d0					.byte $d0
.b22c					Assemble_beq:
.b22c	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b22f	f0					.byte $f0
.b230					Assemble_bra:
.b230	20 2a 89	jsr $892a		jsr	AssembleGroup3
>b233	80					.byte $80
.b234					Assemble_brk:
.b234	20 60 89	jsr $8960		jsr	AssembleGroup4
>b237	00					.byte $00
.b238					Assemble_php:
.b238	20 60 89	jsr $8960		jsr	AssembleGroup4
>b23b	08					.byte $08
.b23c					Assemble_clc:
.b23c	20 60 89	jsr $8960		jsr	AssembleGroup4
>b23f	18					.byte $18
.b240					Assemble_plp:
.b240	20 60 89	jsr $8960		jsr	AssembleGroup4
>b243	28					.byte $28
.b244					Assemble_sec:
.b244	20 60 89	jsr $8960		jsr	AssembleGroup4
>b247	38					.byte $38
.b248					Assemble_rti:
.b248	20 60 89	jsr $8960		jsr	AssembleGroup4
>b24b	40					.byte $40
.b24c					Assemble_pha:
.b24c	20 60 89	jsr $8960		jsr	AssembleGroup4
>b24f	48					.byte $48
.b250					Assemble_cli:
.b250	20 60 89	jsr $8960		jsr	AssembleGroup4
>b253	58					.byte $58
.b254					Assemble_phy:
.b254	20 60 89	jsr $8960		jsr	AssembleGroup4
>b257	5a					.byte $5a
.b258					Assemble_rts:
.b258	20 60 89	jsr $8960		jsr	AssembleGroup4
>b25b	60					.byte $60
.b25c					Assemble_pla:
.b25c	20 60 89	jsr $8960		jsr	AssembleGroup4
>b25f	68					.byte $68
.b260					Assemble_sei:
.b260	20 60 89	jsr $8960		jsr	AssembleGroup4
>b263	78					.byte $78
.b264					Assemble_ply:
.b264	20 60 89	jsr $8960		jsr	AssembleGroup4
>b267	7a					.byte $7a
.b268					Assemble_dey:
.b268	20 60 89	jsr $8960		jsr	AssembleGroup4
>b26b	88					.byte $88
.b26c					Assemble_txa:
.b26c	20 60 89	jsr $8960		jsr	AssembleGroup4
>b26f	8a					.byte $8a
.b270					Assemble_tya:
.b270	20 60 89	jsr $8960		jsr	AssembleGroup4
>b273	98					.byte $98
.b274					Assemble_txs:
.b274	20 60 89	jsr $8960		jsr	AssembleGroup4
>b277	9a					.byte $9a
.b278					Assemble_tay:
.b278	20 60 89	jsr $8960		jsr	AssembleGroup4
>b27b	a8					.byte $a8
.b27c					Assemble_tax:
.b27c	20 60 89	jsr $8960		jsr	AssembleGroup4
>b27f	aa					.byte $aa
.b280					Assemble_clv:
.b280	20 60 89	jsr $8960		jsr	AssembleGroup4
>b283	b8					.byte $b8
.b284					Assemble_tsx:
.b284	20 60 89	jsr $8960		jsr	AssembleGroup4
>b287	ba					.byte $ba
.b288					Assemble_iny:
.b288	20 60 89	jsr $8960		jsr	AssembleGroup4
>b28b	c8					.byte $c8
.b28c					Assemble_dex:
.b28c	20 60 89	jsr $8960		jsr	AssembleGroup4
>b28f	ca					.byte $ca
.b290					Assemble_cld:
.b290	20 60 89	jsr $8960		jsr	AssembleGroup4
>b293	d8					.byte $d8
.b294					Assemble_phx:
.b294	20 60 89	jsr $8960		jsr	AssembleGroup4
>b297	da					.byte $da
.b298					Assemble_stp:
.b298	20 60 89	jsr $8960		jsr	AssembleGroup4
>b29b	db					.byte $db
.b29c					Assemble_inx:
.b29c	20 60 89	jsr $8960		jsr	AssembleGroup4
>b29f	e8					.byte $e8
.b2a0					Assemble_nop:
.b2a0	20 60 89	jsr $8960		jsr	AssembleGroup4
>b2a3	ea					.byte $ea
.b2a4					Assemble_sed:
.b2a4	20 60 89	jsr $8960		jsr	AssembleGroup4
>b2a7	f8					.byte $f8
.b2a8					Assemble_plx:
.b2a8	20 60 89	jsr $8960		jsr	AssembleGroup4
>b2ab	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b2ac					DecimalScalarTable:
>b2ac	66 66 66 66				.dword $66666666 ; 0.1
>b2b0	de					.byte $de
>b2b1	1f 85 eb 51				.dword $51eb851f ; 0.01
>b2b5	db					.byte $db
>b2b6	4c 37 89 41				.dword $4189374c ; 0.001
>b2ba	d8					.byte $d8
>b2bb	ac 8b db 68				.dword $68db8bac ; 0.0001
>b2bf	d4					.byte $d4
>b2c0	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b2c4	d1					.byte $d1
>b2c5	83 de 1b 43				.dword $431bde83 ; 1e-06
>b2c9	ce					.byte $ce
>b2ca	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b2ce	ca					.byte $ca
>b2cf	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b2d3	c7					.byte $c7
>b2d4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b2d8	c4					.byte $c4
>b2d9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b2dd	c0					.byte $c0
>b2de	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b2e2	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b2e3					SyntaxError:
.b2e3	a9 02		lda #$02		lda	#2
.b2e5	4c fd 98	jmp $98fd		jmp	ErrorHandler
.b2e8					RangeError:
.b2e8	a9 04		lda #$04		lda	#4
.b2ea	4c fd 98	jmp $98fd		jmp	ErrorHandler
.b2ed					TypeError:
.b2ed	a9 05		lda #$05		lda	#5
.b2ef	4c fd 98	jmp $98fd		jmp	ErrorHandler
.b2f2					ArgumentError:
.b2f2	a9 07		lda #$07		lda	#7
.b2f4	4c fd 98	jmp $98fd		jmp	ErrorHandler
.b2f7					NotDoneError:
.b2f7	a9 0c		lda #$0c		lda	#12
.b2f9	4c fd 98	jmp $98fd		jmp	ErrorHandler
.b2fc					ErrorText:
>b2fc	42 72 65 61 6b 00			.text	"Break",0
>b302	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b30a	72 72 6f 72 00
>b30f	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b317	20 62 79 20 7a 65 72 6f 00
>b320	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b328	61 6e 67 65 00
>b32d	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b335	6d 61 74 63 68 00
>b33b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b343	65 6d 6f 72 79 00
>b349	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b351	61 72 67 75 6d 65 6e 74 00
>b35a	53 74 6f 70 00				.text	"Stop",0
>b35f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b367	6f 6f 20 6c 6f 6e 67 00
>b36f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b377	6e 20 66 61 69 6c 65 64 00
>b380	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b388	61 74 61 00
>b38c	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b394	65 6e 74 65 64 00
>b39a	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b3a2	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b3ae	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b3b6	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b3c3	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b3cb	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b3d8	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b3e0	68 6f 75 74 20 57 68 69 6c 65 00
>b3eb	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b3f3	68 6f 75 74 20 46 6f 72 00
>b3fc	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b404	61 63 6b 20 66 75 6c 6c 00
>b40d	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b415	75 63 74 75 72 65 00
>b41c	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b424	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b431	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b439	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b447	41 72 72 61 79 20 73 69			.text	"Array size",0
>b44f	7a 65 00
>b452	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b45a	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b462	42 75 69 6c 74 20 57 65			.text "Built Wednesday 19-Oct-2022. Build 2104."
>b46a	64 6e 65 73 64 61 79 20 31 39 2d 4f 63 74 2d 32
>b47a	30 32 32 2e 20 42 75 69 6c 64 20 32 31 30 34 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b48a					EXTInitialise:
.b48a	64 01		stz $01				stz 	1 							; Access I/O
.b48c	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b48f	9c 08 d0	stz $d008			stz 	$D008
.b492	9c 09 d0	stz $d009			stz 	$D009
.b495	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b497	8d 58 d6	sta $d658			sta 	$D658
.b49a	60		rts				rts
.b49b					EXTClearScreen:
.b49b	4c ea ff	jmp $ffea			jmp 	$FFEA
.b49e					EXTPrintCharacter:
.b49e	48		pha				pha
.b49f	da		phx				phx
.b4a0	5a		phy				phy
.b4a1	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b4a4	7a		ply				ply
.b4a5	fa		plx				plx
.b4a6	68		pla				pla
.b4a7	60		rts				rts
.b4a8					EXTInputSingleCharacter:
.b4a8	da		phx				phx
.b4a9	5a		phy				phy
.b4aa					_EISCWait:
.b4aa	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b4ad	c9 00		cmp #$00			cmp 	#0
.b4af	f0 f9		beq $b4aa			beq 	_EISCWait
.b4b1	7a		ply				ply
.b4b2	fa		plx				plx
.b4b3	60		rts				rts
.b4b4					EXTInputLine:
.b4b4	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b4b6					_ILLoop:
.b4b6	da		phx				phx 								; read character in
.b4b7	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b4ba	fa		plx				plx
.b4bb	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b4bd	f0 12		beq $b4d1			beq 	_ILBackspace
.b4bf	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b4c1	f0 15		beq $b4d8			beq 	_ILExit
.b4c3	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b4c5	90 ef		bcc $b4b6			bcc 	_ILLoop
.b4c7	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b4c9	f0 eb		beq $b4b6			beq 	_ILLoop
.b4cb	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b4ce	e8		inx				inx
.b4cf	80 e5		bra $b4b6			bra 	_ILLoop
.b4d1					_ILBackspace:
.b4d1	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b4d3	f0 e1		beq $b4b6			beq 	_ILLoop
.b4d5	ca		dex				dex 								; back one.
.b4d6	80 de		bra $b4b6			bra 	_ILLoop
.b4d8					_ILExit:
.b4d8	20 9e b4	jsr $b49e			jsr 	EXTPrintCharacter
.b4db	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b4de	60		rts				rts
.b4df					EXTBreakCheck:
.b4df	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b4e2					EXTReadController:
.b4e2	da		phx				phx
.b4e3	a2 00		ldx #$00			ldx 	#0
.b4e5	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b4e7	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4ea	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b4ec	f0 04		beq $b4f2			beq 	_NoSet1
.b4ee	8a		txa				txa
.b4ef	09 01		ora #$01			ora 	#1
.b4f1	aa		tax				tax
.b4f2					_NoSet1:
.b4f2	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b4f4	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4f7	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b4f9	f0 04		beq $b4ff			beq 	_NoSet1
.b4fb	8a		txa				txa
.b4fc	09 02		ora #$02			ora 	#2
.b4fe	aa		tax				tax
.b4ff					_NoSet1:
.b4ff	a9 06		lda #$06			lda 	#(($32) >> 3)
.b501	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b504	29 04		and #$04			and 	#($01 << (($32) & 7))
.b506	f0 04		beq $b50c			beq 	_NoSet1
.b508	8a		txa				txa
.b509	09 04		ora #$04			ora 	#4
.b50b	aa		tax				tax
.b50c					_NoSet1:
.b50c	a9 04		lda #$04			lda 	#(($25) >> 3)
.b50e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b511	29 20		and #$20			and 	#($01 << (($25) & 7))
.b513	f0 04		beq $b519			beq 	_NoSet1
.b515	8a		txa				txa
.b516	09 08		ora #$08			ora 	#8
.b518	aa		tax				tax
.b519					_NoSet1:
.b519	a9 04		lda #$04			lda 	#(($26) >> 3)
.b51b	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b51e	29 40		and #$40			and 	#($01 << (($26) & 7))
.b520	f0 04		beq $b526			beq 	_NoSet1
.b522	8a		txa				txa
.b523	09 10		ora #$10			ora 	#16
.b525	aa		tax				tax
.b526					_NoSet1:
.b526	8a		txa				txa
.b527	fa		plx				plx
.b528	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b529					MemoryDeleteLine:
.b529	20 48 b5	jsr $b548			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b52c	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b52e	a8		tay				tay
.b52f					_MDDLLoop:
.b52f	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b531	92 30		sta ($30)			sta 	(codePtr)
.b533	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b535	c5 3a		cmp $3a				cmp 	zTemp2
.b537	d0 07		bne $b540			bne 	_MDLDLNext
.b539	a5 31		lda $31				lda 	codePtr+1
.b53b	c5 3b		cmp $3b				cmp 	zTemp2+1
.b53d	d0 01		bne $b540			bne 	_MDLDLNext
.b53f					_MDDLExit:
.b53f	60		rts				rts
.b540					_MDLDLNext:
.b540	e6 30		inc $30				inc 	codePtr						; next byte
.b542	d0 eb		bne $b52f			bne 	_MDDLLoop
.b544	e6 31		inc $31				inc 	codePtr+1
.b546	80 e7		bra $b52f			bra 	_MDDLLoop
.b548					IMemoryFindEnd:
.b548	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b54a	85 3a		sta $3a				sta 	0+zTemp2
.b54c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b54e	85 3b		sta $3b				sta 	1+zTemp2
.b550					_MDLFELoop:
.b550	b2 3a		lda ($3a)			lda 	(zTemp2)
.b552	f0 0b		beq $b55f			beq 	_MDLFEExit
.b554	18		clc				clc
.b555	65 3a		adc $3a				adc 	zTemp2
.b557	85 3a		sta $3a				sta 	zTemp2
.b559	90 f5		bcc $b550			bcc 	_MDLFELoop
.b55b	e6 3b		inc $3b				inc 	zTemp2+1
.b55d	80 f1		bra $b550			bra 	_MDLFELoop
.b55f					_MDLFEExit:
.b55f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b560					MemoryInsertLine:
.b560	08		php				php
.b561	20 48 b5	jsr $b548			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b564	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b566	1a		inc a				inc 	a
.b567	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b569	b0 36		bcs $b5a1			bcs 	_MDLIError
.b56b	28		plp				plp
.b56c	90 08		bcc $b576			bcc 	_MDLIFound
.b56e	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b570	85 30		sta $30				sta 	codePtr
.b572	a5 3b		lda $3b				lda 	zTemp2+1
.b574	85 31		sta $31				sta 	codePtr+1
.b576					_MDLIFound:
.b576	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b579	a8		tay				tay
.b57a					_MDLIInsert:
.b57a	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b57c	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b57e	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b580	c5 3a		cmp $3a				cmp 	zTemp2
.b582	d0 06		bne $b58a			bne 	_MDLINext
.b584	a5 31		lda $31				lda 	codePtr+1
.b586	c5 3b		cmp $3b				cmp 	zTemp2+1
.b588	f0 0a		beq $b594			beq 	_MDLIHaveSpace
.b58a					_MDLINext:
.b58a	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b58c	d0 02		bne $b590			bne 	_MDLINoBorrow
.b58e	c6 3b		dec $3b				dec 	zTemp2+1
.b590					_MDLINoBorrow:
.b590	c6 3a		dec $3a				dec 	zTemp2
.b592	80 e6		bra $b57a			bra 	_MDLIInsert
.b594					_MDLIHaveSpace:
.b594	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b597	88		dey				dey 								; from offset-1 to 0
.b598					_MDLICopy:
.b598	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b59b	91 30		sta ($30),y			sta 	(codePtr),y
.b59d	88		dey				dey
.b59e	10 f8		bpl $b598			bpl 	_MDLICopy
.b5a0	60		rts				rts
.b5a1					_MDLIError:
.b5a1	a9 06		lda #$06		lda	#6
.b5a3	4c fd 98	jmp $98fd		jmp	ErrorHandler
.b5a6					MDLAppendLine:
.b5a6	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b5a8	85 36		sta $36				sta 	zTemp0
.b5aa	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5ac	85 38		sta $38				sta 	0+zTemp1
.b5ae	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5b0	85 39		sta $39				sta 	1+zTemp1
.b5b2	b2 38		lda ($38)			lda 	(zTemp1)
.b5b4	d0 0a		bne $b5c0			bne 	_MDLANoInitialise
.b5b6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5b8	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b5bb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5bd	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b5c0					_MDLANoInitialise:
.b5c0	18		clc				clc
.b5c1	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b5c4	85 38		sta $38				sta 	zTemp1
.b5c6	72 36		adc ($36)			adc 	(zTemp0)
.b5c8	8d 6b 06	sta $066b			sta 	AppendPointer
.b5cb	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b5ce	85 39		sta $39				sta 	zTemp1+1
.b5d0	69 00		adc #$00			adc 	#0
.b5d2	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b5d5	a0 00		ldy #$00			ldy 	#0
.b5d7					_MDLACopy:
.b5d7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b5d9	91 38		sta ($38),y			sta 	(zTemp1),y
.b5db	c8		iny				iny
.b5dc	98		tya				tya
.b5dd	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b5df	d0 f6		bne $b5d7			bne 	_MDLACopy
.b5e1	a9 00		lda #$00			lda 	#0 							; end of program.
.b5e3	91 38		sta ($38),y			sta 	(zTemp1),y
.b5e5	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a512					MemoryNew:
.a512	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a514	85 30		sta $30				sta 	codePtr
.a516	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a518	85 31		sta $31				sta 	codePtr+1
.a51a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a51c	92 30		sta ($30)			sta 	(codePtr)
.a51e	60		rts				rts
.a51f					MemoryInline:
.a51f	98		tya				tya 								; put address into stack,x
.a520	18		clc				clc
.a521	65 30		adc $30				adc 	codePtr
.a523	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a526	a5 31		lda $31				lda 	codePtr+1
.a528	69 00		adc #$00			adc 	#0
.a52a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a52d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a530	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a533	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a534					MemorySearch:
.a534	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a536	86 37		stx $37				stx 	zTemp0+1
.a538	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a53a	85 30		sta $30				sta 	codePtr
.a53c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a53e	85 31		sta $31				sta 	codePtr+1
.a540					_MTAXLoop:
.a540	b2 30		lda ($30)			lda 	(codePtr)
.a542	18		clc				clc
.a543	f0 21		beq $a566			beq 	_MTAXExit 					; reached end, exit with CC.
.a545	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a547	b1 30		lda ($30),y			lda 	(codePtr),y
.a549	38		sec				sec
.a54a	e5 36		sbc $36				sbc 	zTemp0
.a54c	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a54e	c8		iny				iny 								; do the MSB
.a54f	b1 30		lda ($30),y			lda 	(codePtr),y
.a551	e5 37		sbc $37				sbc 	zTemp0+1
.a553	05 38		ora $38				ora 	zTemp1
.a555	f0 0f		beq $a566			beq 	_MTAXExit	 				; found
.a557	b0 0d		bcs $a566			bcs 	_MTAXExit 					; current < required exit
.a559	18		clc				clc
.a55a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a55c	65 30		adc $30				adc 	codePtr
.a55e	85 30		sta $30				sta 	codePtr
.a560	90 02		bcc $a564			bcc 	_CREExit
.a562	e6 31		inc $31				inc 	codePtr+1
.a564					_CREExit:
.a564	80 da		bra $a540			bra 	_MTAXLoop
.a566					_MTAXExit:
.a566	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a567					StackPushByte:
.a567	48		pha				pha 								; save byte
.a568	a5 34		lda $34				lda 	BasicStack
.a56a	d0 09		bne $a575			bne 	_SPBNoBorrow
.a56c	c6 35		dec $35				dec 	BasicStack+1
.a56e	48		pha				pha
.a56f	a5 35		lda $35				lda 	BasicStack+1
.a571	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a573	90 06		bcc $a57b			bcc 	_SPBMemory
.a575					_SPBNoBorrow:
.a575	c6 34		dec $34				dec 	BasicStack
.a577	68		pla				pla 								; get back and write
.a578	92 34		sta ($34)			sta 	(BasicStack)
.a57a	60		rts				rts
.a57b					_SPBMemory:
.a57b	a9 12		lda #$12		lda	#18
.a57d	4c fd 98	jmp $98fd		jmp	ErrorHandler
.a580					StackPopByte:
.a580	b2 34		lda ($34)			lda 	(BasicStack)
.a582	e6 34		inc $34				inc 	BasicStack
.a584	d0 02		bne $a588			bne 	_SPBNoCarry
.a586	e6 35		inc $35				inc 	BasicStack+1
.a588					_SPBNoCarry:
.a588	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a589					StackOpen:
.a589	48		pha				pha 								; save frame byte
.a58a	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a58c	0a		asl a				asl 	a 							; claim twice this for storage
.a58d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a58f	38		sec				sec 								; so basically subtracting from
.a590	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a592	85 34		sta $34				sta 	basicStack
.a594	b0 08		bcs $a59e			bcs 	_SONoBorrow
.a596	c6 35		dec $35				dec 	basicStack+1
.a598	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a59a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a59c	90 04		bcc $a5a2			bcc 	_SOMemory
.a59e					_SONoBorrow:
.a59e	68		pla				pla 								; get marker back and write at TOS
.a59f	92 34		sta ($34)			sta 	(basicStack)
.a5a1	60		rts				rts
.a5a2					_SOMemory:
.a5a2	a9 12		lda #$12		lda	#18
.a5a4	4c fd 98	jmp $98fd		jmp	ErrorHandler
.a5a7					StackClose:
.a5a7	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a5a9	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a5ab	0a		asl a				asl 	a 							; claim twice this.
.a5ac	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a5ae	85 34		sta $34				sta 	basicStack
.a5b0	90 02		bcc $a5b4			bcc 	_SCExit
.a5b2	e6 35		inc $35				inc 	basicStack+1
.a5b4					_SCExit:
.a5b4	60		rts				rts
.a5b5					StackCheckFrame:
.a5b5	48		pha				pha
.a5b6					_StackRemoveLocals:
.a5b6	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a5b8	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a5ba	b0 05		bcs $a5c1			bcs 	_SCNoLocal
.a5bc	20 a4 ac	jsr $aca4			jsr 	LocalPopValue
.a5bf	80 f5		bra $a5b6			bra 	_StackRemoveLocals
.a5c1					_SCNoLocal:
.a5c1	68		pla				pla
.a5c2	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a5c4	29 f0		and #$f0			and 	#$F0 						; check type bits
.a5c6	d0 01		bne $a5c9			bne 	_SCFError 					; different, we have structures mixed up
.a5c8	60		rts				rts
.a5c9					_SCFError:
.a5c9	8a		txa				txa 								; report error X
.a5ca	4c fd 98	jmp $98fd			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a5cd					STKSaveCodePosition:
.a5cd	5a		phy				phy
.a5ce	98		tya				tya 								; save Y
.a5cf	a0 05		ldy #$05			ldy 	#5
.a5d1	91 34		sta ($34),y			sta 	(basicStack),y
.a5d3	88		dey				dey 								; save Code Pointer
.a5d4					_STKSaveLoop:
.a5d4	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a5d7	91 34		sta ($34),y			sta 	(basicStack),y
.a5d9	88		dey				dey
.a5da	d0 f8		bne $a5d4			bne 	_STKSaveLoop
.a5dc	7a		ply				ply
.a5dd	60		rts				rts
.a5de					STKLoadCodePosition:
.a5de	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a5e0					_STKLoadLoop:
.a5e0	b1 34		lda ($34),y			lda 	(basicStack),y
.a5e2	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a5e5	c8		iny				iny
.a5e6	c0 05		cpy #$05			cpy 	#5
.a5e8	d0 f6		bne $a5e0			bne 	_STKLoadLoop
.a5ea	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a5ec	a8		tay				tay
.a5ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a5ee					StackReset:
.a5ee	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a5f0	85 34		sta $34				sta 	0+basicStack
.a5f2	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a5f4	85 35		sta $35				sta 	1+basicStack
.a5f6	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a5f8	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a5fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b5e6					StringConcrete:
.b5e6	5a		phy				phy 								; save position on stack
.b5e7	20 ca a1	jsr $a1ca			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b5ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b5ed	85 38		sta $38				sta 	zTemp1
.b5ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b5f2	85 39		sta $39				sta 	zTemp1+1
.b5f4	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b5f6					_SALength:
.b5f6	c8		iny				iny
.b5f7	b1 38		lda ($38),y			lda 	(zTemp1),y
.b5f9	d0 fb		bne $b5f6			bne 	_SALength
.b5fb	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b5fd	b0 3f		bcs $b63e			bcs 	_SALengthError
.b5ff	98		tya				tya 				 				; length of the new string
.b600	18		clc				clc
.b601	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b603	90 02		bcc $b607			bcc 	_SAHaveLength
.b605	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b607					_SAHaveLength:
.b607	48		pha				pha 								; save length.
.b608	38		sec				sec
.b609	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b60b	6d 8e 04	adc $048e			adc 	StringMemory
.b60e	8d 8e 04	sta $048e			sta 	StringMemory
.b611	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b613	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b616	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b618	6d 8f 04	adc $048f			adc 	StringMemory+1
.b61b	8d 8f 04	sta $048f			sta 	StringMemory+1
.b61e	85 3b		sta $3b				sta 	zTemp2+1
.b620	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b623	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b624	38		sec				sec
.b625	e9 03		sbc #$03			sbc 	#3
.b627	92 3a		sta ($3a)			sta 	(zTemp2)
.b629	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b62b	a0 01		ldy #$01			ldy 	#1
.b62d	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b62f					_SACopyNewString:
.b62f	a0 00		ldy #$00			ldy 	#0
.b631					_SACopyNSLoop:
.b631	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b633	c8		iny				iny 								; write two on in string storage
.b634	c8		iny				iny
.b635	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b637	88		dey				dey 								; this makes it one one.
.b638	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b63a	d0 f5		bne $b631			bne 	_SACopyNSLoop
.b63c	7a		ply				ply
.b63d	60		rts				rts
.b63e					_SALengthError:
.b63e	a9 09		lda #$09		lda	#9
.b640	4c fd 98	jmp $98fd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b643					StringSystemInitialise:
.b643	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b645	8d 8e 04	sta $048e			sta 	0+StringMemory
.b648	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b64a	8d 8f 04	sta $048f			sta 	1+StringMemory
.b64d	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b650	60		rts				rts
.b651					StringSpaceInitialise:
.b651	20 ca a1	jsr $a1ca			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b654	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b656	8d 90 04	sta $0490			sta 	StringInitialised
.b659	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b65c	8d 91 04	sta $0491			sta 	StringTempPointer
.b65f	ad 8f 04	lda $048f			lda 	StringMemory+1
.b662	3a		dec a				dec 	a
.b663	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b666	60		rts				rts
.b667					StringTempAllocate:
.b667	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b669	b0 35		bcs $b6a0			bcs 	_STALength
.b66b	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b66e	30 05		bmi $b675			bmi 	_STAAllocate
.b670	48		pha				pha 								; save value to subtract.
.b671	20 51 b6	jsr $b651			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b674	68		pla				pla 								; restore it
.b675					_STAAllocate:
.b675	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b677	18		clc				clc  								; deliberate allows one more
.b678	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b67b	8d 91 04	sta $0491			sta 	StringTempPointer
.b67e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b681	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b683	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b686	69 ff		adc #$ff			adc 	#$FF
.b688	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b68b	85 3d		sta $3d				sta 	zsTemp+1
.b68d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b690	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b693	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b696	a9 10		lda #$10			lda 	#NSTString
.b698	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b69b	a9 00		lda #$00			lda 	#0 							; clear the target string
.b69d	92 3c		sta ($3c)			sta 	(zsTemp)
.b69f	60		rts				rts
.b6a0					_STALength:
.b6a0	a9 09		lda #$09		lda	#9
.b6a2	4c fd 98	jmp $98fd		jmp	ErrorHandler
.b6a5					StringTempWrite:
.b6a5	48		pha				pha
.b6a6	92 3c		sta ($3c)			sta 	(zsTemp)
.b6a8	e6 3c		inc $3c				inc 	zsTemp
.b6aa	d0 02		bne $b6ae			bne 	_STWNoCarry
.b6ac	e6 3d		inc $3d				inc 	zsTemp+1
.b6ae					_STWNoCarry:
.b6ae	a9 00		lda #$00			lda 	#0
.b6b0	92 3c		sta ($3c)			sta 	(zsTemp)
.b6b2	68		pla				pla
.b6b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a5fb					BackloadProgram:
.a5fb	a2 ff		ldx #$ff			ldx 	#$FF
.a5fd	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a600	20 2a a6	jsr $a62a			jsr 	BLReadByte
.a603	30 1e		bmi $a623			bmi 	_BPExit
.a605					_BPCopy:
.a605	e8		inx				inx  								; copy byte in
.a606	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a609	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a60c	20 2a a6	jsr $a62a			jsr 	BLReadByte 					; read next byte
.a60f	30 0a		bmi $a61b			bmi 	_BPEndLine 					; -ve = EOL
.a611	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a613	d0 02		bne $a617			bne 	_BPNotTab
.a615	a9 20		lda #$20			lda 	#' '
.a617					_BPNotTab:
.a617	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a619	b0 ea		bcs $a605			bcs 	_BPCopy
.a61b					_BPEndLine:
.a61b	20 f5 a9	jsr $a9f5			jsr 	TokeniseLine 				; tokenise the line.
.a61e	20 1a 8b	jsr $8b1a			jsr 	EditProgramCode
.a621	80 d8		bra $a5fb			bra 	BackloadProgram
.a623					_BPExit:
.a623	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a626	20 d8 8b	jsr $8bd8			jsr 	ClearCommand 				; clear variables etc.
.a629	60		rts				rts
.a62a					BLReadByte:
.a62a					_BLLoad:
.a62a	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a62d	ee 2b a6	inc $a62b			inc 	_BLLoad+1
.a630	d0 03		bne $a635			bne 	_BLNoCarry
.a632	ee 2c a6	inc $a62c			inc 	_BLLoad+2
.a635					_BLNoCarry:
.a635	c9 00		cmp #$00			cmp 	#0
.a637	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a638					TokeniseSearchTable:
.a638	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a63a	85 36		sta $36				sta 	zTemp0
.a63c	a0 00		ldy #$00			ldy 	#0
.a63e	a9 80		lda #$80			lda 	#$80 						; token #
.a640	85 38		sta $38				sta 	zTemp1
.a642					_TSTLoop:
.a642	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a644	30 49		bmi $a68f			bmi 	_TSTFail 					; -ve = end of table
.a646	f0 2e		beq $a676			beq 	_TSTNext 					; zero, check next it's a dummy
.a648	c8		iny				iny 								; get the hash
.a649	b1 36		lda ($36),y			lda 	(zTemp0),y
.a64b	88		dey				dey
.a64c	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a64f	d0 25		bne $a676			bne 	_TSTNext
.a651	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a654	38		sec				sec
.a655	ed 80 04	sbc $0480			sbc 	identStart
.a658	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a65a	d0 1a		bne $a676			bne 	_TSTNext
.a65c	5a		phy				phy 								; save Y , we might fail
.a65d	c8		iny				iny 								; point to text
.a65e	c8		iny				iny
.a65f	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a662					_TSTCompareName:
.a662	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a665	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a667	d0 0c		bne $a675			bne 	_TSTNextPullY 				; fail, pullY and do next
.a669	e8		inx				inx
.a66a	c8		iny				iny
.a66b	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a66e	d0 f2		bne $a662			bne 	_TSTCompareName
.a670	7a		ply				ply 								; throw Y
.a671	a5 38		lda $38				lda 	zTemp1 						; get token #
.a673	38		sec				sec 								; return with CS = passed.
.a674	60		rts				rts
.a675					_TSTNextPullY:
.a675	7a		ply				ply 								; restore current, fall through.
.a676					_TSTNext:
.a676	e6 38		inc $38				inc 	zTemp1 						; token counter
.a678	98		tya				tya
.a679	18		clc				clc
.a67a	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a67c	1a		inc a				inc 	a 							; +1
.a67d	1a		inc a				inc 	a 							; +2
.a67e	a8		tay				tay
.a67f	10 c1		bpl $a642			bpl 	_TSTLoop 					; if Y < $80 loop back
.a681	98		tya				tya 								; add Y to zTemp0 and reset Y
.a682	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a684	18		clc				clc  								; but have tables > 255 bytes
.a685	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a687	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a689	90 b7		bcc $a642			bcc 	_TSTLoop
.a68b	e6 37		inc $37				inc 	zTemp0+1
.a68d	80 b3		bra $a642			bra 	_TSTLoop
.a68f					_TSTFail:
.a68f	18		clc				clc
.a690	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a691					KeywordSet0:
>a691	00 65					.text	0,$65,""               ; $80 !0:EOF
>a693	00 58					.text	0,$58,""               ; $81 !1:SH1
>a695	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a697	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a69d	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a6a5	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a6ab	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a6b2	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a6ba	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a6c1	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a6c8	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a6ce	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a6d6	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8c JOYB(
>a6dd	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8d JOYX(
>a6e4	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8e JOYY(
>a6eb	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8f LEFT$(
>a6f3	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $90 LEN(
>a6f9	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $91 MID$(
>a700	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $92 NOT(
>a706	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $93 RANDOM(
>a70e	28
>a70f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $94 RIGHT$(
>a717	28
>a718	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $95 RND(
>a71e	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $96 SGN(
>a724	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $97 SPC(
>a72a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $98 STR$(
>a731	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $99 TIMER(
>a739	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9a TRUE
>a73f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9b VAL(
>a745	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9c FOR
>a74a	02 8f 49 46				.text	2,$8f,"IF"             ; $9d IF
>a74e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9e PROC
>a754	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9f REPEAT
>a75c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a0 WHILE
>a763	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a1 ENDIF
>a76a	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a2 ENDPROC
>a772	43
>a773	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a3 NEXT
>a779	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a4 THEN
>a77f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a5 UNTIL
>a786	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a6 WEND
>a78c	02 9b 42 59				.text	2,$9b,"BY"             ; $a7 BY
>a790	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a8 CALL
>a796	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a9 CIRCLE
>a79e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $aa CLEAR
>a7a5	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ab CLS
>a7aa	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ac COLOR
>a7b1	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ad COLOUR
>a7b9	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ae DATA
>a7bf	03 da 44 49 4d				.text	3,$da,"DIM"            ; $af DIM
>a7c4	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b0 DOWNTO
>a7cc	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b1 ELSE
>a7d2	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b2 FROM
>a7d8	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b3 GFX
>a7dd	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b4 GOSUB
>a7e4	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b5 GOTO
>a7ea	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b6 HERE
>a7f0	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b7 IMAGE
>a7f7	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b8 LET
>a7fc	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b9 LINE
>a802	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ba LOCAL
>a809	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bb OFF
>a80e	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bc ON
>a812	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $bd OUTLINE
>a81a	45
>a81b	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $be PLOT
>a821	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $bf PRINT
>a828	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c0 READ
>a82e	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c1 RECT
>a834	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c2 REM
>a839	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c3 RETURN
>a841	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c4 SOLID
>a848	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c5 SPRITE
>a850	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c6 TEXT
>a856	02 a3 54 4f				.text	2,$a3,"TO"             ; $c7 TO
>a85a	ff					.text	$FF
.a85b					KeywordSet1:
>a85b	00 65					.text	0,$65,""               ; $80 !0:EOF
>a85d	00 58					.text	0,$58,""               ; $81 !1:SH1
>a85f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a861	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a869	4c 45
>a86b	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a873	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a87b	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a880	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a886	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a88b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a893	45
>a894	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a899	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a8a1	53
>a8a2	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a8a8	ff					.text	$FF
.a8a9					KeywordSet2:
>a8a9	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8ab	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8ad	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8af	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a8b4	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a8b9	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a8be	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a8c3	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a8c8	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a8cd	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a8d2	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a8d7	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a8dc	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a8e1	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a8e6	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a8eb	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a8f0	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a8f5	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a8fa	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a8ff	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a904	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a909	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a90e	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a913	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a918	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a91d	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a922	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a927	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a92c	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a931	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a936	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a93b	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a940	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a945	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a94a	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a94f	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a954	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a959	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a95e	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a963	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a968	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a96d	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a972	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a977	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a97c	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a981	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a986	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a98b	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a990	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a995	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a99a	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a99f	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a9a4	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a9a9	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a9ae	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a9b3	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a9b8	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a9bd	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a9c2	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a9c7	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a9cc	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a9d1	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a9d6	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a9db	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a9e0	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a9e5	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a9ea	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a9ef	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a9f4	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a9f5					TokeniseLine:
.a9f5	20 7d ab	jsr $ab7d			jsr 	FixLineBufferCase 			; fix line case
.a9f8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a9fa	8d a6 04	sta $04a6			sta 	tokenOffset
.a9fd	9c a7 04	stz $04a7			stz 	tokenLineNumber
.aa00	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.aa03	a2 ff		ldx #$ff			ldx 	#$FF
.aa05					_TKFindFirst:
.aa05	e8		inx				inx
.aa06	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa09	f0 79		beq $aa84			beq 	_TKExit
.aa0b	c9 20		cmp #$20			cmp 	#' '
.aa0d	90 f6		bcc $aa05			bcc 	_TKFindFirst
.aa0f	c9 30		cmp #$30			cmp 	#'0'
.aa11	90 07		bcc $aa1a			bcc 	_TKNoLineNumber
.aa13	c9 3a		cmp #$3a			cmp 	#'9'+1
.aa15	b0 03		bcs $aa1a			bcs 	_TKNoLineNumber
.aa17	20 a7 ab	jsr $aba7			jsr 	TokeniseExtractLineNumber
.aa1a					_TKNoLineNumber:
.aa1a					_TKTokeniseLoop:
.aa1a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.aa1d	f0 65		beq $aa84			beq 	_TKExit
.aa1f	e8		inx				inx
.aa20	c9 20		cmp #$20			cmp 	#' '
.aa22	f0 f6		beq $aa1a			beq 	_TKTokeniseLoop 			; keep looping if space found.
.aa24	ca		dex				dex 								; undo last get, A contains character, X is position.
.aa25	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.aa27	f0 61		beq $aa8a			beq 	_TKTokeniseIdentifier
.aa29	c9 41		cmp #$41			cmp 	#'A'
.aa2b	90 04		bcc $aa31			bcc 	_TKTokenisePunctuation
.aa2d	c9 5b		cmp #$5b			cmp 	#'Z'+1
.aa2f	90 59		bcc $aa8a			bcc 	_TKTokeniseIdentifier
.aa31					_TKTokenisePunctuation:
.aa31	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.aa33	f0 27		beq $aa5c			beq 	_TKString
.aa35	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aa37	f0 28		beq $aa61			beq 	_TKHexConstant
.aa39	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aa3b	f0 29		beq $aa66			beq 	_TKCheckDouble
.aa3d	c9 3e		cmp #$3e			cmp 	#'>'
.aa3f	f0 25		beq $aa66			beq 	_TKCheckDouble
.aa41					_TKStandardPunctuation:
.aa41	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.aa44	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aa46	90 0e		bcc $aa56			bcc 	_TKNoShift
.aa48	48		pha				pha 								; save
.aa49	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aa4b	85 36		sta $36				sta 	zTemp0
.aa4d	68		pla				pla
.aa4e	29 20		and #$20			and 	#32 						; bit 5
.aa50	4a		lsr a				lsr 	a 							; shift into bit 3
.aa51	4a		lsr a				lsr 	a
.aa52	05 36		ora $36				ora 	zTemp0
.aa54	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aa56					_TKNoShift:
.aa56	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte 			; write the punctuation character
.aa59	e8		inx				inx 								; consume the character
.aa5a	80 be		bra $aa1a			bra 	_TKTokeniseLoop 			; and loop round again.
.aa5c					_TKString:
.aa5c	20 0c ab	jsr $ab0c			jsr 	TokeniseString
.aa5f	80 b9		bra $aa1a			bra 	_TKTokeniseLoop
.aa61					_TKHexConstant:
.aa61	20 47 ab	jsr $ab47			jsr 	TokeniseHexConstant
.aa64	80 b4		bra $aa1a			bra 	_TKTokeniseLoop
.aa66					_TKCheckDouble:
.aa66	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aa69	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aa6b	90 d4		bcc $aa41			bcc 	_TKStandardPunctuation
.aa6d	c9 3f		cmp #$3f			cmp 	#'>'+1
.aa6f	b0 d0		bcs $aa41			bcs 	_TKStandardPunctuation
.aa71	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aa74	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aa76	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aa77	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aa7a	38		sec				sec
.aa7b	e9 3c		sbc #$3c			sbc 	#'<'
.aa7d	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.aa80	e8		inx				inx 								; consume both
.aa81	e8		inx				inx
.aa82	80 96		bra $aa1a			bra 	_TKTokeniseLoop
.aa84	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.aa86	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.aa89	60		rts				rts
.aa8a					_TKTokeniseIdentifier:
.aa8a	8e 80 04	stx $0480			stx 	identStart 					; save start
.aa8d	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.aa90					_TKCheckLoop:
.aa90	e8		inx				inx 								; look at next, we know first is identifier.
.aa91	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.aa94	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.aa96	f0 f8		beq $aa90			beq 	_TKCheckLoop
.aa98	c9 30		cmp #$30			cmp	 	#"0"
.aa9a	90 0c		bcc $aaa8			bcc 	_TKEndIdentifier
.aa9c	c9 3a		cmp #$3a			cmp 	#"9"+1
.aa9e	90 f0		bcc $aa90			bcc 	_TKCheckLoop
.aaa0	c9 41		cmp #$41			cmp	 	#"A"
.aaa2	90 04		bcc $aaa8			bcc 	_TKEndIdentifier
.aaa4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.aaa6	90 e8		bcc $aa90			bcc 	_TKCheckLoop
.aaa8					_TKEndIdentifier:
.aaa8	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.aaab	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.aaad	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.aaaf	f0 06		beq $aab7			beq 	_TKHasTypeCharacter
.aab1	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.aab3	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.aab5	d0 07		bne $aabe			bne 	_TKNoTypeCharacter
.aab7					_TKHasTypeCharacter:
.aab7	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.aaba	e8		inx				inx 								; read next
.aabb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aabe					_TKNoTypeCharacter:
.aabe	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.aac0	d0 09		bne $aacb			bne 	_TKNoArray
.aac2	e8		inx				inx 								; skip the (
.aac3	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.aac6	09 04		ora #$04			ora 	#$04
.aac8	8d 84 04	sta $0484			sta 	identTypeByte
.aacb					_TKNoArray:
.aacb	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.aace	20 68 ab	jsr $ab68			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.aad1	a0 a6		ldy #$a6			ldy 	#(KeywordSet0) >> 8
.aad3	a9 91		lda #$91			lda 	#(KeywordSet0) & $FF
.aad5	20 38 a6	jsr $a638			jsr 	TokeniseSearchTable
.aad8	a2 00		ldx #$00			ldx 	#0
.aada	b0 1f		bcs $aafb			bcs 	_TKFoundToken
.aadc	a0 a8		ldy #$a8			ldy 	#(KeywordSet1) >> 8
.aade	a9 5b		lda #$5b			lda 	#(KeywordSet1) & $FF
.aae0	20 38 a6	jsr $a638			jsr 	TokeniseSearchTable
.aae3	a2 81		ldx #$81			ldx 	#$81
.aae5	b0 14		bcs $aafb			bcs 	_TKFoundToken
.aae7	a0 a8		ldy #$a8			ldy 	#(KeywordSet2) >> 8
.aae9	a9 a9		lda #$a9			lda 	#(KeywordSet2) & $FF
.aaeb	20 38 a6	jsr $a638			jsr 	TokeniseSearchTable
.aaee	a2 82		ldx #$82			ldx 	#$82
.aaf0	b0 09		bcs $aafb			bcs 	_TKFoundToken
.aaf2	20 f8 ab	jsr $abf8			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.aaf5	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aaf8	4c 1a aa	jmp $aa1a			jmp 	_TKTokeniseLoop 			; and go round again.
.aafb					_TKFoundToken:
.aafb	48		pha				pha 								; save token
.aafc	8a		txa				txa 								; shift in X, is there one ?
.aafd	f0 03		beq $ab02			beq 	_TKNoTShift
.aaff	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte 			; if so, write it out
.ab02					_TKNoTShift:
.ab02	68		pla				pla 								; restore and write token
.ab03	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.ab06	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ab09	4c 1a aa	jmp $aa1a			jmp 	_TKTokeniseLoop 			; and go round again.
.ab0c					TokeniseString:
.ab0c	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ab0e	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.ab11	e8		inx				inx									; start of quoted string.
.ab12	da		phx				phx 								; push start of string on top
.ab13	ca		dex				dex
.ab14					_TSFindEnd:
.ab14	e8		inx				inx
.ab15	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.ab18	f0 04		beq $ab1e			beq 	_TSEndOfString
.ab1a	c9 22		cmp #$22			cmp 	#'"'
.ab1c	d0 f6		bne $ab14			bne 	_TSFindEnd
.ab1e					_TSEndOfString:
.ab1e	7a		ply				ply  								; so now Y is first character, X is character after end.
.ab1f	48		pha				pha 								; save terminating character
.ab20	20 28 ab	jsr $ab28			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ab23	68		pla				pla 								; terminating character
.ab24	f0 01		beq $ab27			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ab26	e8		inx				inx
.ab27					_TSNotQuote:
.ab27	60		rts				rts
.ab28					TOWriteBlockXY:
.ab28	86 36		stx $36				stx 	zTemp0 						; write end character
.ab2a	98		tya				tya
.ab2b	49 ff		eor #$ff			eor 	#$FF
.ab2d	38		sec				sec
.ab2e	65 36		adc $36				adc 	zTemp0
.ab30	1a		inc a				inc 	a 							; one extra for NULL
.ab31	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.ab34					_TOBlockLoop:
.ab34	c4 36		cpy $36				cpy 	zTemp0
.ab36	f0 09		beq $ab41			beq 	_TOBlockExit
.ab38	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.ab3b	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.ab3e	c8		iny				iny
.ab3f	80 f3		bra $ab34			bra 	_TOBlockLoop
.ab41					_TOBlockExit:
.ab41	a9 00		lda #$00			lda 	#0
.ab43	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.ab46	60		rts				rts
.ab47					TokeniseHexConstant:
.ab47	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ab49	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.ab4c	e8		inx				inx									; start of quoted string.
.ab4d	da		phx				phx 								; push start of constant on top
.ab4e	ca		dex				dex
.ab4f					_THFindLoop:
.ab4f	e8		inx				inx
.ab50	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab53	c9 30		cmp #$30			cmp 	#"0"
.ab55	90 0c		bcc $ab63			bcc 	_THFoundEnd
.ab57	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab59	90 f4		bcc $ab4f			bcc 	_THFindLoop
.ab5b	c9 41		cmp #$41			cmp 	#"A"
.ab5d	90 04		bcc $ab63			bcc 	_THFoundEnd
.ab5f	c9 47		cmp #$47			cmp 	#"F"+1
.ab61	90 ec		bcc $ab4f			bcc 	_THFindLoop
.ab63					_THFoundEnd:
.ab63	7a		ply				ply 								; restore start
.ab64	20 28 ab	jsr $ab28			jsr 	TOWriteBlockXY 				; output the block
.ab67	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ab68					TokeniseCalculateHash:
.ab68	da		phx				phx
.ab69	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ab6c	a9 00		lda #$00			lda 	#0
.ab6e					_TCHLoop:
.ab6e	18		clc				clc
.ab6f	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.ab72	e8		inx				inx
.ab73	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ab76	d0 f6		bne $ab6e			bne 	_TCHLoop
.ab78	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ab7b	fa		plx				plx
.ab7c	60		rts				rts
.ab7d					FixLineBufferCase:
.ab7d	a2 00		ldx #$00			ldx 	#0
.ab7f					_FLBCLoop:
.ab7f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ab82	f0 22		beq $aba6			beq 	_FLBCExit 					; end of string.
.ab84	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ab86	f0 11		beq $ab99			beq 	_FLBCInQuotes
.ab88	e8		inx				inx
.ab89	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ab8b	90 f2		bcc $ab7f			bcc 	_FLBCLoop
.ab8d	c9 7b		cmp #$7b			cmp 	#'z'+1
.ab8f	b0 ee		bcs $ab7f			bcs 	_FLBCLoop
.ab91	38		sec				sec 								; make U/C
.ab92	e9 20		sbc #$20			sbc 	#32
.ab94	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ab97	80 e6		bra $ab7f			bra 	_FLBCLoop
.ab99					_FLBCInQuotes:
.ab99	e8		inx				inx 								; advance
.ab9a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ab9d	f0 07		beq $aba6			beq 	_FLBCExit 					; exit on EOS
.ab9f	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.aba1	d0 f6		bne $ab99			bne 	_FLBCInQuotes
.aba3	e8		inx				inx 								; skip over it
.aba4	80 d9		bra $ab7f			bra 	_FLBCLoop
.aba6					_FLBCExit:
.aba6	60		rts				rts
.aba7					TokeniseExtractLineNumber:
.aba7	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.abaa	48		pha				pha
.abab	ad a7 04	lda $04a7			lda 	tokenLineNumber
.abae	48		pha				pha
.abaf	20 e5 ab	jsr $abe5			jsr 	_TELNTimes2 				; line # x 4
.abb2	20 e5 ab	jsr $abe5			jsr 	_TELNTimes2 				; line # x 2
.abb5	18		clc				clc 								; add stacked value
.abb6	68		pla				pla
.abb7	6d a7 04	adc $04a7			adc 	tokenLineNumber
.abba	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abbd	68		pla				pla
.abbe	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.abc1	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.abc4	20 e5 ab	jsr $abe5			jsr 	_TELNTimes2 				; line # x 10
.abc7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.abca	e8		inx				inx
.abcb	29 0f		and #$0f			and 	#15 						; add to line #
.abcd	18		clc				clc
.abce	6d a7 04	adc $04a7			adc 	tokenLineNumber
.abd1	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abd4	90 03		bcc $abd9			bcc 	_TLENNoCarry
.abd6	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.abd9					_TLENNoCarry:
.abd9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.abdc	c9 30		cmp #$30			cmp 	#'0'
.abde	90 04		bcc $abe4			bcc 	_TLENExit
.abe0	c9 3a		cmp #$3a			cmp 	#'9'+1
.abe2	90 c3		bcc $aba7			bcc 	TokeniseExtractLineNumber
.abe4					_TLENExit:
.abe4	60		rts				rts
.abe5					_TELNTimes2:
.abe5	0e a7 04	asl $04a7			asl 	tokenLineNumber
.abe8	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.abeb	60		rts				rts
.abec					TokeniseWriteByte:
.abec	da		phx				phx
.abed	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.abf0	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.abf3	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.abf6	fa		plx				plx
.abf7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.abf8					CheckCreateVariableRecord:
.abf8	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.abfa	85 36		sta $36				sta 	0+zTemp0
.abfc	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.abfe	85 37		sta $37				sta 	1+zTemp0
.ac00					_CCVSearch:
.ac00	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ac02	f0 2c		beq $ac30			beq 	_CCVFail
.ac04	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ac06	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ac08	cd 83 04	cmp $0483			cmp 	identHash
.ac0b	d0 16		bne $ac23			bne 	_CCVNext
.ac0d	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ac0f	ae 80 04	ldx $0480			ldx 	identStart
.ac12					_CCVCompare:
.ac12	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ac15	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ac17	e8		inx				inx 								; advance pointers
.ac18	c8		iny				iny
.ac19	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ac1a	d0 07		bne $ac23			bne 	_CCVNext  					; didn't match go to next.
.ac1c	90 f4		bcc $ac12			bcc 	_CCVCompare 				; not finished yet.
.ac1e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ac21	f0 41		beq $ac64			beq 	_CCVFound 					; yes, we were successful
.ac23					_CCVNext:
.ac23	18		clc				clc
.ac24	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ac26	65 36		adc $36				adc 	zTemp0
.ac28	85 36		sta $36				sta 	zTemp0
.ac2a	90 d4		bcc $ac00			bcc 	_CCVSearch
.ac2c	e6 37		inc $37				inc 	zTemp0+1
.ac2e	80 d0		bra $ac00			bra 	_CCVSearch
.ac30					_CCVFail:
.ac30	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ac32	ad 83 04	lda $0483			lda 	identHash
.ac35	91 36		sta ($36),y			sta 	(zTemp0),y
.ac37	c8		iny				iny 								; offset 2 is the type byte
.ac38	ad 84 04	lda $0484			lda 	identTypeByte
.ac3b	91 36		sta ($36),y			sta 	(zTemp0),y
.ac3d	c8		iny				iny
.ac3e					_CCVData:
.ac3e	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ac40	91 36		sta ($36),y			sta 	(zTemp0),y
.ac42	c8		iny				iny
.ac43	c0 08		cpy #$08			cpy 	#8
.ac45	90 f7		bcc $ac3e			bcc 	_CCVData
.ac47	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ac4a					_CCVCopyName:
.ac4a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ac4d	91 36		sta ($36),y			sta 	(zTemp0),y
.ac4f	e8		inx				inx
.ac50	c8		iny				iny
.ac51	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ac54	d0 f4		bne $ac4a			bne 	_CCVCopyName
.ac56	98		tya				tya 								; patch offset
.ac57	92 36		sta ($36)			sta 	(zTemp0)
.ac59	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ac5b	91 36		sta ($36),y			sta 	(zTemp0),y
.ac5d	88		dey				dey
.ac5e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ac60	09 80		ora #$80			ora 	#$80
.ac62	91 36		sta ($36),y			sta 	(zTemp0),y
.ac64					_CCVFound:
.ac64	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ac66	38		sec				sec
.ac67	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ac69	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ac6b	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.ac6e	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ac70	20 ec ab	jsr $abec			jsr 	TokeniseWriteByte
.ac73	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
