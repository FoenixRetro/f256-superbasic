
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Tue Jan  3 10:30:14 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_CPRINT                           = $b8; $b8 CPRINT
=$b9						KWD_DATA                             = $b9; $b9 DATA
=$ba						KWD_DIM                              = $ba; $ba DIM
=$bb						KWD_DOWNTO                           = $bb; $bb DOWNTO
=$bc						KWD_ELSE                             = $bc; $bc ELSE
=$bd						KWD_FROM                             = $bd; $bd FROM
=$be						KWD_GFX                              = $be; $be GFX
=$bf						KWD_GOSUB                            = $bf; $bf GOSUB
=$c0						KWD_GOTO                             = $c0; $c0 GOTO
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_INPUT                            = $c3; $c3 INPUT
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_PRINT                            = $d0; $d0 PRINT
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_RETURN                           = $d4; $d4 RETURN
=$d5						KWD_SOLID                            = $d5; $d5 SOLID
=$d6						KWD_SOUND                            = $d6; $d6 SOUND
=$d7						KWD_SPRITE                           = $d7; $d7 SPRITE
=$d8						KWD_TEXT                             = $d8; $d8 TEXT
=$d9						KWD_TO                               = $d9; $d9 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c b7 80	jmp $80b7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 4b bc	jsr $bc4b		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 0d bc	jsr $bc0d		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 5c bc	jsr $bc5c		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 57 bc	jsr $bc57		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 b1 bc	jsr $bcb1		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 bb bc	jsr $bcbb		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLReadBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 dd bc	jsr $bcdd		jsr	Export_KNLReadBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLWriteBlock:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 1a bd	jsr $bd1a		jsr	Export_KNLWriteBlock
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						KNLCloseFile:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 97 bc	jsr $bc97		jsr	Export_KNLCloseFile
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						GXGraphicDraw:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDCommand:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 80 bb	jsr $bb80		jsr	Export_SNDCommand
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						SNDUpdate:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 b3 bb	jsr $bbb3		jsr	Export_SNDUpdate
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKListConvertLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 31 b5	jsr $b531		jsr	Export_TKListConvertLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts
.80ad						TKTokeniseLine:
.80ad		e6 0d		inc $0d			inc 8+5
.80af		20 c5 b7	jsr $b7c5		jsr	Export_TKTokeniseLine
.80b2		08		php			php
.80b3		c6 0d		dec $0d			dec 8+5
.80b5		28		plp			plp
.80b6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80b7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80b9		9a		txs				txs
.80ba		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80bc		09 80		ora #$80			ora 	#$80
.80be		85 00		sta $00				sta 	0
.80c0		20 e0 a8	jsr $a8e0			jsr		UpdateFont 					; update font if between FPGA updates.
.80c3		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.80c6		9c 5f 06	stz $065f			stz 	DefaultDrive 				; zero the default drive.
.80c9		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cb		aa		tax				tax
.80cc		a8		tay				tay
.80cd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.80d0		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d2		20 8f 80	jsr $808f			jsr 	SNDCommand
.80d5		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80d7		a9 e5		lda #$e5			lda 	#Prompt & $FF
.80d9		20 30 92	jsr $9230			jsr 	PrintStringXA
.80dc		20 2b 8c	jsr $8c2b			jsr 	NewProgram 					; erase current program
.80df		4c 28 84	jmp $8428			jmp 	WarmStart					; make same size.
.80e2		4c 28 84	jmp $8428			jmp 	WarmStart
>80e5		8d				Prompt:	.text 	128+13
>80e6		0d 0d						.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80e8		09 09 30 33 2f 30 31 2f			.text 9,9,"03/01/23  23"
>80f0		32 33 20 20 32 33

;******  Return to file: ./common/aa.system/00start.asm

>80f6		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80fa						AssembleGroup1:
.80fa		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80fc		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80ff		80 02		bra $8103			bra 	AsmGroup12
.8101						AssembleGroup2:
.8101		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8103						AsmGroup12:
.8103		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.8106		68		pla				pla 								; pop the return address to access the information following.
.8107		fa		plx				plx
.8108		20 8f 81	jsr $818f			jsr 	AccessParameters 			; get opcode and save as base
.810b		8d 24 04	sta $0424			sta 	BaseOpcode
.810e		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8111		d0 08		bne $811b			bne 	_AG12HaveMask
.8113		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8115		20 97 81	jsr $8197			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8118		8d 25 04	sta $0425			sta 	ModeMask
.811b						_AG12HaveMask:
.811b		20 cb 82	jsr $82cb			jsr 	TypeAndCalculateOperand 	; get zero page type
.811e		da		phx				phx 								; save found address mode
.811f		20 fb 81	jsr $81fb			jsr 	AssembleModeX
.8122		fa		plx				plx  								; restore address mode
.8123		b0 0b		bcs $8130			bcs 	_AG12Exit
.8125		20 31 81	jsr $8131			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8128		20 fb 81	jsr $81fb			jsr 	AssembleModeX
.812b		b0 03		bcs $8130			bcs 	_AG12Exit
.812d		4c a0 a2	jmp $a2a0			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8130						_AG12Exit:
.8130		60		rts				rts
.8131						PromoteToAbsolute:
.8131		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8133		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8135		f0 19		beq $8150			beq 	_PTADo
.8137		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8139		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.813b		f0 13		beq $8150			beq 	_PTADo
.813d		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.813f		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8141		f0 0d		beq $8150			beq 	_PTADo
.8143		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8145		e0 d1		cpx #$d1			cpx 	#AM_IND
.8147		f0 07		beq $8150			beq 	_PTADo
.8149		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.814b		e0 c0		cpx #$c0			cpx 	#AM_INDX
.814d		f0 01		beq $8150			beq 	_PTADo
.814f		60		rts				rts
.8150						_PTADo:
.8150		aa		tax				tax
.8151		60		rts				rts
.8152						AssembleGroup3:
.8152		68		pla				pla 								; get parameters, which is just the opcode.
.8153		fa		plx				plx
.8154		20 8f 81	jsr $818f			jsr 	AccessParameters 			; get and output opcode
.8157		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.815a		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get a 16 bit operand
.815d		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.815f		38		sec				sec
.8160		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8163		48		pha				pha 								; LSB in A
.8164		a5 60		lda $60				lda 	NSMantissa1
.8166		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8169		aa		tax				tax 								; MSB in X
.816a		68		pla				pla
.816b		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.816c		69 7f		adc #$7f			adc 	#$7F
.816e		90 01		bcc $8171			bcc 	_AG3NoCarry
.8170		e8		inx				inx
.8171						_AG3NoCarry:
.8171		38		sec				sec 								; fix back and write out anyways.
.8172		e9 80		sbc #$80			sbc 	#$80
.8174		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8177		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8179		f0 0a		beq $8185			beq 	_AG3Exit
.817b		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.817e		29 01		and #$01			and 	#1
.8180		f0 03		beq $8185			beq 	_AG3Exit
.8182		4c a5 a2	jmp $a2a5			jmp 	RangeError 					; no, branch is out of range
.8185						_AG3Exit:
.8185		60		rts				rts
.8186						AssembleGroup4:
.8186		68		pla				pla 								; pop address
.8187		fa		plx				plx
.8188		20 8f 81	jsr $818f			jsr 	AccessParameters 			; access and get first
.818b		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte 			; output it.
.818e		60		rts				rts
.818f						AccessParameters:
.818f		8d 21 04	sta $0421			sta 	ParamStart
.8192		8e 22 04	stx $0422			stx 	ParamStart+1
.8195		a9 01		lda #$01			lda 	#1
.8197						GetParameter:
.8197		5a		phy				phy
.8198		a8		tay				tay
.8199		ad 21 04	lda $0421			lda 	ParamStart
.819c		85 36		sta $36				sta 	zTemp0
.819e		ad 22 04	lda $0422			lda 	ParamStart+1
.81a1		85 37		sta $37				sta 	zTemp0+1
.81a3		b1 36		lda ($36),y			lda 	(zTemp0),y
.81a5		7a		ply				ply
.81a6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81a7						AssemblerWriteByte:
.81a7		48		pha			pha
.81a8		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.81ab		29 02		and #$02		and 	#2
.81ad		f0 1b		beq $81ca		beq 	_AWBNoPrint
.81af		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.81b2		20 e5 81	jsr $81e5		jsr 	PrintHex
.81b5		ad 1e 04	lda $041e		lda		AssemblerAddress
.81b8		20 e5 81	jsr $81e5		jsr 	PrintHex
.81bb		a9 20		lda #$20		lda 	#' '
.81bd		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81c0		68		pla			pla 									; print byte
.81c1		48		pha			pha
.81c2		20 e5 81	jsr $81e5		jsr 	PrintHex
.81c5		a9 0d		lda #$0d		lda 	#13
.81c7		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81ca						_AWBNoPrint:
.81ca		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81cd		85 36		sta $36			sta 	zTemp0
.81cf		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81d2		f0 0e		beq $81e2		beq 	_AWBRange
.81d4		85 37		sta $37			sta 	zTemp0+1
.81d6		68		pla			pla 									; write byte out
.81d7		92 36		sta ($36)		sta 	(zTemp0)
.81d9		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81dc		d0 03		bne $81e1		bne 	_AWBNoCarry
.81de		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81e1						_AWBNoCarry:
.81e1		60		rts			rts
.81e2						_AWBRange:
.81e2		4c a5 a2	jmp $a2a5		jmp 	RangeError
.81e5						PrintHex:
.81e5		48		pha				pha
.81e6		4a		lsr a				lsr 	a
.81e7		4a		lsr a				lsr 	a
.81e8		4a		lsr a				lsr 	a
.81e9		4a		lsr a				lsr 	a
.81ea		20 ee 81	jsr $81ee			jsr 	_PrintNibble
.81ed		68		pla				pla
.81ee						_PrintNibble:
.81ee		29 0f		and #$0f			and 	#15
.81f0		c9 0a		cmp #$0a			cmp 	#10
.81f2		90 02		bcc $81f6			bcc 	_NoShift
.81f4		69 06		adc #$06			adc 	#6
.81f6						_NoShift:
.81f6		69 30		adc #$30			adc 	#48
.81f8		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81fb						AssembleModeX:
.81fb		5a		phy				phy
.81fc		ad 23 04	lda $0423			lda 	IsGroup1
.81ff		f0 17		beq $8218			beq 	_AMXGroup2
.8201		8a		txa				txa 							; is it in group # 1
.8202		29 40		and #$40			and 	#AM_ISG1
.8204		f0 4d		beq $8253			beq 	_AMXFail 				; no, give up.
.8206		8a		txa				txa 							; get back.
.8207		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8209		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.820b		d0 22		bne $822f			bne 	_AMXHaveInfo
.820d		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.8210		c9 81		cmp #$81			cmp 	#$81
.8212		f0 3f		beq $8253			beq 	_AMXFail
.8214		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8216		80 17		bra $822f			bra 	_AMXHaveInfo 			; odd design decision there.
.8218						_AMXGroup2:
.8218		8a		txa				txa 							; is it in group 2 ?
.8219		29 20		and #$20			and 	#AM_ISG2
.821b		f0 36		beq $8253			beq 	_AMXFail 				; no, give up.
.821d		8a		txa				txa 							; get the offset into Y
.821e		29 1f		and #$1f			and 	#$1F
.8220		4a		lsr a				lsr 	a 						; make it 0-7.
.8221		4a		lsr a				lsr  	a
.8222		a8		tay				tay
.8223		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8226						_AMXCheckOkay:
.8226		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8227		88		dey				dey
.8228		10 fc		bpl $8226			bpl 	_AMXCheckOkay
.822a		90 27		bcc $8253			bcc 	_AMXFail 				; not allowed.
.822c		8a		txa				txa  							; get mask back
.822d		29 1f		and #$1f			and 	#$1F
.822f						_AMXHaveInfo:
.822f		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8231		10 04		bpl $8237			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8233		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8235		d0 1c		bne $8253			bne 	_AMXFail
.8237						_AMXAnySize:
.8237		18		clc				clc 							; add offset to the base opcode
.8238		6d 24 04	adc $0424			adc 	BaseOpcode
.823b						_AMXOutputCode:
.823b		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte 		; write the opcode out.
.823e		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8240		f0 0e		beq $8250			beq 	_AMXExit
.8242		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8244		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8247		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8249		30 05		bmi $8250			bmi 	_AMXExit
.824b		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.824d		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8250						_AMXExit:
.8250		7a		ply				ply
.8251		38		sec				sec
.8252		60		rts				rts
.8253						_AMXFail:
.8253		a0 00		ldy #$00			ldy 	#0
.8255						_AMXCheckOddities:
.8255		8a		txa				txa
.8256		d9 7d 82	cmp $827d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8259		d0 15		bne $8270			bne 	_AMXCONext
.825b		b9 7b 82	lda $827b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.825e		cd 24 04	cmp $0424			cmp 	BaseOpcode
.8261		d0 0d		bne $8270			bne 	_AMXCONext
.8263		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8265		10 04		bpl $826b			bpl 	_AMXCONotZero
.8267		a5 60		lda $60				lda 	NSMantissa1
.8269		d0 05		bne $8270			bne 	_AMXCONext
.826b						_AMXCONotZero:
.826b		b9 7c 82	lda $827c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.826e		80 cb		bra $823b			bra 	_AMXOutputCode 			; and assemble it
.8270						_AMXCONext:
.8270		c8		iny				iny
.8271		c8		iny				iny
.8272		c8		iny				iny
.8273		b9 7b 82	lda $827b,y			lda 	ExtraOpcode+0,y 		; end of table
.8276		d0 dd		bne $8255			bne 	_AMXCheckOddities
.8278						_AMXCOFail:
.8278		7a		ply				ply
.8279		18		clc				clc
.827a		60		rts				rts
.827b						ExtraOpcode:
>827b		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>827e		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8281		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8284		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8287		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>828a		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>828d		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8290		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8293		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8296		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8299		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.829a						LabelHere:
.829a		c8		iny				iny 								; skip .
.829b		a2 00		ldx #$00			ldx 	#0 							; get a term
.829d		20 25 9b	jsr $9b25			jsr 	EvaluateTerm
.82a0		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.82a2		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82a4		d0 22		bne $82c8			bne 	_ALType 					; otherwise typing error
.82a6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82a8		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82aa		b5 60		lda $60,x			lda 	NSMantissa1,x
.82ac		85 37		sta $37				sta 	zTemp0+1
.82ae		5a		phy				phy 								; copy address in (64k)
.82af		a0 01		ldy #$01			ldy 	#1
.82b1		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.82b4		92 36		sta ($36)			sta 	(zTemp0)
.82b6		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.82b9		91 36		sta ($36),y			sta 	(zTemp0),y
.82bb		c8		iny				iny
.82bc		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82be		91 36		sta ($36),y			sta 	(zTemp0),y
.82c0		c8		iny				iny
.82c1		91 36		sta ($36),y			sta 	(zTemp0),y
.82c3		c8		iny				iny
.82c4		91 36		sta ($36),y			sta 	(zTemp0),y
.82c6		7a		ply				ply
.82c7		60		rts				rts
.82c8						_ALType:
.82c8		4c aa a2	jmp $a2aa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82cb						TypeAndCalculateOperand:
.82cb		b1 30		lda ($30),y			lda 	(codePtr),y
.82cd		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82cf		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82d1		f0 5b		beq $832e			beq 	_TACOExit
.82d3		c9 80		cmp #$80			cmp 	#KWC_EOL
.82d5		f0 57		beq $832e			beq 	_TACOExit
.82d7		c8		iny				iny
.82d8		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82da		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82dc		f0 51		beq $832f			beq 	CalculateOperand
.82de		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82e0		f0 1f		beq $8301			beq 	_TACOIndirect
.82e2		88		dey				dey 								; undo get of first character
.82e3		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get operand
.82e6		b1 30		lda ($30),y			lda 	(codePtr),y
.82e8		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82ea		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ec		d0 40		bne $832e			bne 	_TACOExit
.82ee		c8		iny				iny
.82ef		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82f2		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82f4		c9 58		cmp #$58			cmp 	#'X'
.82f6		f0 36		beq $832e			beq 	_TACOExit
.82f8		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82fa		c9 59		cmp #$59			cmp 	#'Y'
.82fc		f0 30		beq $832e			beq 	_TACOExit
.82fe						_TACOSyntax:
.82fe		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
.8301						_TACOIndirect:
.8301		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get the operand
.8304		b1 30		lda ($30),y			lda 	(codePtr),y
.8306		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8308		f0 17		beq $8321			beq 	_TACOIndX
.830a		20 be 91	jsr $91be			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.830d		b1 30		lda ($30),y			lda 	(codePtr),y
.830f		a2 d1		ldx #$d1			ldx 	#AM_IND
.8311		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8313		d0 19		bne $832e			bne 	_TACOExit
.8315		c8		iny				iny
.8316		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8319		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.831b		d0 e1		bne $82fe			bne 	_TACOSyntax
.831d		a2 d0		ldx #$d0			ldx 	#AM_INDY
.831f		80 0d		bra $832e			bra 	_TACOExit
.8321						_TACOIndX:
.8321		c8		iny				iny
.8322		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8325		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8327		d0 d5		bne $82fe			bne 	_TACOSyntax
.8329		20 be 91	jsr $91be			jsr 	CheckRightBracket			; check )
.832c		a2 c0		ldx #$c0			ldx 	#AM_INDX
.832e						_TACOExit:
.832e		60		rts				rts
.832f						CalculateOperand:
.832f		48		pha				pha
.8330		da		phx				phx
.8331		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8333		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger
.8336		fa		plx				plx
.8337		68		pla				pla
.8338		60		rts				rts
.8339						TACOCheckXY:
.8339		b1 30		lda ($30),y			lda 	(codePtr),y
.833b		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.833d		c9 40		cmp #$40			cmp 	#$40
.833f		d0 21		bne $8362			bne 	_TCXYFail
.8341		b1 30		lda ($30),y			lda 	(codePtr),y
.8343		18		clc				clc
.8344		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8346		85 37		sta $37				sta 	zTemp0+1
.8348		c8		iny				iny
.8349		b1 30		lda ($30),y			lda 	(codePtr),y
.834b		c8		iny				iny
.834c		85 36		sta $36				sta 	zTemp0
.834e		5a		phy				phy 								; save position
.834f		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8351		b1 36		lda ($36),y			lda 	(zTemp0),y
.8353		d0 0c		bne $8361			bne 	_TCXYPopFail
.8355		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8357		b1 36		lda ($36),y			lda 	(zTemp0),y
.8359		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.835b		f0 08		beq $8365			beq 	_TCXYFound
.835d		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.835f		f0 04		beq $8365			beq 	_TCXYFound
.8361						_TCXYPopFail:
.8361		7a		ply				ply
.8362						_TCXYFail:
.8362		a9 00		lda #$00			lda 	#0
.8364		60		rts				rts
.8365						_TCXYFound:
.8365		7a		ply				ply 								; restore position
.8366		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8368		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8369						BackloadProgram:
.8369		20 2b 8c	jsr $8c2b			jsr 	NewProgram 					; does the actual NEW.
.836c		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.836e		a9 c0		lda #$c0			lda 	#_BLLoad & $FF
.8370		20 30 92	jsr $9230			jsr 	PrintStringXA
.8373		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8375		8d 59 06	sta $0659			sta 	BackLoadPage
.8378		a9 00		lda #$00			lda 	#(($6000) & $FF)
.837a		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.837d		a9 60		lda #$60			lda 	#(($6000) >> 8)
.837f		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8382		a9 ff		lda #$ff			lda 	#$FF
.8384		8d fa ff	sta $fffa			sta 	$FFFA
.8387						_BPLoop:
.8387		a2 ff		ldx #$ff			ldx 	#$FF
.8389		20 d5 83	jsr $83d5			jsr 	BLReadByte 					; read a byte
.838c		c9 00		cmp #$00			cmp 	#0
.838e		f0 29		beq $83b9			beq 	_BPExit 					; if 0 exit
.8390		30 27		bmi $83b9			bmi 	_BPExit 					; if -ve exit
.8392						_BPCopy:
.8392		e8		inx				inx  								; copy byte into the lineBuffer
.8393		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8396		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8399		20 d5 83	jsr $83d5			jsr 	BLReadByte 					; read next byte
.839c		30 0a		bmi $83a8			bmi 	_BPEndLine 					; -ve = EOL
.839e		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.83a0		d0 02		bne $83a4			bne 	_BPNotTab
.83a2		a9 20		lda #$20			lda 	#' '
.83a4						_BPNotTab:
.83a4		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83a6		b0 ea		bcs $8392			bcs 	_BPCopy 					; until a control character, should be 13 received.
.83a8						_BPEndLine:
.83a8		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.83ab		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.83ae		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.83b1		f0 d4		beq $8387			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83b3		38		sec				sec 								; append not insert
.83b4		20 09 a8	jsr $a809			jsr 	MemoryInsertLine 			; append to current program
.83b7		80 ce		bra $8387			bra 	_BPLoop
.83b9						_BPExit:
.83b9		9c fa ff	stz $fffa			stz 	$FFFA
.83bc		20 5c 85	jsr $855c			jsr 	ClearCommand 				; clear variables etc.
.83bf		60		rts				rts
.83c0						_BLLoad:
>83c0		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83c8		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83d5						BLReadByte:
.83d5		da		phx				phx
.83d6		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83d8		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83db		85 0b		sta $0b				sta 	8+3
.83dd		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83e0		85 36		sta $36				sta 	zTemp0
.83e2		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83e5		85 37		sta $37				sta 	zTemp0+1
.83e7		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83e9		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83ec		d0 0f		bne $83fd			bne 	_BLNoCarry
.83ee		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83f1		10 0a		bpl $83fd			bpl 	_BLNoCarry 					; need a new page
.83f3		48		pha				pha
.83f4		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83f6		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83f9		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83fc		68		pla				pla
.83fd						_BLNoCarry:
.83fd		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83ff		fa		plx				plx
.8400		c9 00		cmp #$00			cmp 	#0
.8402		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8403						EditProgramCode:
.8403		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.8406		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.8409		20 ad a8	jsr $a8ad			jsr 	MemorySearch
.840c		90 05		bcc $8413			bcc 	_EPCNoDelete 				; reached the end : don't delete
.840e		d0 03		bne $8413			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8410		20 d2 a7	jsr $a7d2			jsr 	MemoryDeleteLine 			; delete the line
.8413						_EPCNoDelete:
.8413		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8416		c9 80		cmp #$80			cmp 	#KWC_EOL
.8418		f0 0d		beq $8427			beq 	_EPCNoInsert
.841a		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.841d		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8420		20 ad a8	jsr $a8ad			jsr 	MemorySearch
.8423		18		clc				clc 								; insert at this point.
.8424		20 09 a8	jsr $a809			jsr 	MemoryInsertLine 			; insert the line
.8427						_EPCNoInsert:
.8427		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8428						WarmStart:
.8428		a2 ff		ldx #$ff			ldx 	#$FF
.842a		9a		txs				txs
.842b		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.842d		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8430		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8433		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line
.8436		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8439		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.843c		d0 17		bne $8455			bne 	_WSEditCode 				; if so,edit code.
.843e		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8441		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8443		85 30		sta $30				sta 	codePtr
.8445		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8447		85 31		sta $31				sta 	codePtr+1
.8449		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.844c		c9 80		cmp #$80			cmp 	#KWC_EOL
.844e		f0 d8		beq $8428			beq 	WarmStart
.8450		20 bb 8d	jsr $8dbb			jsr 	RUNCodePointerLine 			; execute that line.
.8453		80 d3		bra $8428			bra 	WarmStart
.8455						_WSEditCode:
.8455		20 03 84	jsr $8403			jsr 	EditProgramCode 			; edit the program code
.8458		20 5c 85	jsr $855c			jsr 	ClearCommand 				; clear all variables etc.
.845b		80 cb		bra $8428			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.845d						AssembleCommand:
.845d		a2 00		ldx #$00			ldx 	#0
.845f		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger 		; start address
.8462		a5 58		lda $58				lda 	NSMantissa0
.8464		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8467		a5 60		lda $60				lda 	NSMantissa1
.8469		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.846c		20 c6 91	jsr $91c6			jsr 	CheckComma
.846f		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; options 0-3
.8472		a5 58		lda $58				lda 	NSMantissa0
.8474		8d 20 04	sta $0420			sta 	AssemblerControl
.8477		60		rts				rts
.8478		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8479						AssertCommand:
.8479		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.847b		20 8f a0	jsr $a08f			jsr 	EvaluateInteger 			; the assert test
.847e		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; exit if result is non zero.
.8481		d0 05		bne $8488			bne 	_ACExit
.8483		a9 0a		lda #$0a		lda	#10
.8485		4c d7 91	jmp $91d7		jmp	ErrorHandler
.8488						_ACExit:
.8488		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.8489						Command_BLoad:
.8489		a2 00		ldx #$00			ldx 	#0
.848b		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; file name to load
.848e		20 c6 91	jsr $91c6			jsr 	CheckComma 					; consume comma
.8491		e8		inx				inx
.8492		20 8f a0	jsr $a08f			jsr 	EvaluateInteger 			; load address (full physical address)
.8495		5a		phy				phy
.8496		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8498		a6 60		ldx $60				ldx 	NSMantissa1
.849a		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.849d		b0 4c		bcs $84eb			bcs 	CBLErrorHandler 			; error, so fail.
.849f		8d 61 06	sta $0661			sta 	CurrentFileStream 			; save the reading stream.
.84a2		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.84a4		20 ee 84	jsr $84ee			jsr 	BLOpenPhysicalMemory 		; open for access.
.84a7						_BLReadFile:
.84a7		ad 61 06	lda $0661			lda 	CurrentFileStream
.84aa		20 67 80	jsr $8067			jsr 	KNLReadBlock 				; read next block
.84ad		b0 22		bcs $84d1			bcs 	_BLFileError 				; file error, which might be EOF.
.84af		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.84b1		f0 f4		beq $84a7			beq 	_BLReadFile
.84b3		8d 5e 06	sta $065e			sta 	BLCopyCounter 				; counter.
.84b6		ac 5d 06	ldy $065d			ldy 	BLYOffset 					; copy the buffer out here
.84b9		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.84bb						_BLCopyLoop:
.84bb		bd 52 08	lda $0852,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.84be		91 3a		sta ($3a),y			sta 	(zTemp2),y
.84c0		c8		iny				iny
.84c1		d0 03		bne $84c6			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.84c3		20 16 85	jsr $8516			jsr 	BLAdvancePhysicalMemory
.84c6						_BLNoAdjust:
.84c6		e8		inx				inx
.84c7		ce 5e 06	dec $065e			dec 	BLCopyCounter
.84ca		d0 ef		bne $84bb			bne 	_BLCopyLoop
.84cc		8c 5d 06	sty $065d			sty 	BLYOffset 					; update Y offset
.84cf		80 d6		bra $84a7			bra 	_BLReadFile 				; go ask for more.
.84d1						_BLFileError:
.84d1		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.84d3		d0 16		bne $84eb			bne 	CBLErrorHandler				; no, it's an actual error
.84d5		20 10 85	jsr $8510			jsr 	BLClosePhysicalMemory 		; close the access.
.84d8		ad 61 06	lda $0661			lda 	CurrentFileStream 			; close the file
.84db		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.84de		7a		ply				ply
.84df		60		rts				rts
.84e0						CBLCloseError:
.84e0		48		pha				pha
.84e1		20 10 85	jsr $8510			jsr 	BLClosePhysicalMemory
.84e4		ad 61 06	lda $0661			lda 	CurrentFileStream
.84e7		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.84ea		68		pla				pla
.84eb						CBLErrorHandler:
.84eb		4c 14 8b	jmp $8b14			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.84ee						BLOpenPhysicalMemory:
.84ee		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.84f0		8d 5c 06	sta $065c			sta 	BLNormalMapping
.84f3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.84f5		8d 5d 06	sta $065d			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.84f8		64 3a		stz $3a				stz 	zTemp2
.84fa		b5 60		lda $60,x			lda 	NSMantissa1,x
.84fc		29 1f		and #$1f			and 	#$1F
.84fe		09 60		ora #$60			ora 	#BLAccessPage << 5
.8500		85 3b		sta $3b				sta 	zTemp2+1
.8502		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8504		16 60		asl $60,x			asl 	NSMantissa1,x
.8506		2a		rol a				rol 	a
.8507		16 60		asl $60,x			asl 	NSMantissa1,x
.8509		2a		rol a				rol 	a
.850a		16 60		asl $60,x			asl 	NSMantissa1,x
.850c		2a		rol a				rol 	a
.850d		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.850f		60		rts				rts
.8510						BLClosePhysicalMemory:
.8510		ad 5c 06	lda $065c			lda 	BLNormalMapping
.8513		85 0b		sta $0b				sta 	BLAccessPage+8
.8515		60		rts				rts
.8516						BLAdvancePhysicalMemory:
.8516		48		pha				pha
.8517		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8519		a5 3b		lda $3b				lda 	zTemp2+1
.851b		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.851d		d0 06		bne $8525			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.851f		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8521		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8523		85 3b		sta $3b				sta 	zTemp2+1
.8525						_BLAPMExit:
.8525		68		pla				pla
.8526		60		rts				rts
.065c						BLNormalMapping:
>065c								.fill 	1
.065d						BLYOffset:
>065d								.fill 	1
.065e						BLCopyCounter:
>065e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8527						CallCommand:
.8527		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8529		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger
.852c						_CCClear
.852c		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.852d		20 22 a1	jsr $a122			jsr 	NSMSetZero 					; these are optional sequentially.
.8530		e0 04		cpx #$04			cpx 	#4
.8532		d0 f8		bne $852c			bne 	_CCClear
.8534		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8536						_CCCParam:
.8536		b1 30		lda ($30),y			lda 	(codePtr),y
.8538		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.853a		d0 09		bne $8545			bne 	_CCCRun6502
.853c		c8		iny				iny 								; skip comma
.853d		e8		inx				inx	 								; next level
.853e		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8541		e0 03		cpx #$03			cpx 	#3
.8543		90 f1		bcc $8536			bcc 	_CCCParam 					; done all 3 ?
.8545						_CCCRun6502:
.8545		5a		phy				phy 								; save position
.8546		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8548		85 37		sta $37				sta 	zTemp0+1
.854a		a5 58		lda $58				lda 	NSMantissa0
.854c		85 36		sta $36				sta 	zTemp0
.854e		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8550		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8552		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8554		20 59 85	jsr $8559			jsr 	_CCCZTemp0 					; call zTemp0
.8557		7a		ply				ply 								; restore position and exit
.8558		60		rts				rts
.8559						_CCCZTemp0:
.8559		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.855c						ClearCommand:
.855c		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.855e		85 36		sta $36				sta 	0+zTemp0
.8560		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8562		85 37		sta $37				sta 	1+zTemp0
.8564						_ClearZeroLoop:
.8564		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8566		f0 24		beq $858c			beq 	_ClearZeroEnd
.8568		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.856a		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.856c						_ClearOneVariable:
.856c		91 36		sta ($36),y			sta 	(zTemp0),y
.856e		c8		iny				iny
.856f		c0 08		cpy #$08			cpy 	#8
.8571		d0 f9		bne $856c			bne 	_ClearOneVariable
.8573		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8575		b1 36		lda ($36),y			lda 	(zTemp0),y
.8577		c9 18		cmp #$18			cmp 	#NSTProcedure
.8579		d0 04		bne $857f			bne 	_ClearNotProcedure
.857b		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.857d		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.857f						_ClearNotProcedure:
.857f		18		clc				clc 								; go to the next variable
.8580		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8582		65 36		adc $36				adc 	zTemp0
.8584		85 36		sta $36				sta 	zTemp0
.8586		90 dc		bcc $8564			bcc 	_ClearZeroLoop
.8588		e6 37		inc $37				inc 	zTemp0+1
.858a		80 d8		bra $8564			bra 	_ClearZeroLoop
.858c						_ClearZeroEnd:
.858c		18		clc				clc
.858d		a5 36		lda $36				lda 	zTemp0
.858f		69 01		adc #$01			adc 	#1
.8591		8d 0c 04	sta $040c			sta 	lowMemPtr
.8594		a5 37		lda $37				lda 	zTemp0+1
.8596		69 00		adc #$00			adc 	#0
.8598		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.859b		20 67 b2	jsr $b267			jsr 	StackReset
.859e		20 cd b2	jsr $b2cd			jsr 	StringSystemInitialise
.85a1		20 c7 90	jsr $90c7			jsr 	ProcedureScan
.85a4		20 6a 8d	jsr $8d6a			jsr 	Command_Restore
.85a7		9c 1e 04	stz $041e			stz 	AssemblerAddress
.85aa		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.85ad		9c 20 04	stz $0420			stz 	AssemblerControl
.85b0		20 11 9d	jsr $9d11			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.85b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.85b4						ClearScreen:
.85b4		5a		phy				phy
.85b5		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.85b7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.85ba		7a		ply				ply
.85bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.85bc						Command_Data:
.85bc		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.85be		a2 80		ldx #$80			ldx 	#KWC_EOL
.85c0		20 19 91	jsr $9119			jsr 	ScanForward
.85c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.85c4						DimCommand:
.85c4		b1 30		lda ($30),y			lda 	(codePtr),y
.85c6		29 c0		and #$c0			and 	#$C0
.85c8		c9 40		cmp #$40			cmp 	#$40
.85ca		d0 7a		bne $8646			bne 	_DCSyntax 				; n o, error.
.85cc		b1 30		lda ($30),y			lda 	(codePtr),y
.85ce		18		clc				clc
.85cf		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.85d1		85 3f		sta $3f				sta 	zaTemp+1
.85d3		c8		iny				iny
.85d4		b1 30		lda ($30),y			lda 	(codePtr),y
.85d6		c8		iny				iny
.85d7		85 3e		sta $3e				sta 	zaTemp
.85d9		5a		phy				phy
.85da		a0 02		ldy #$02			ldy 	#2 						; read type byte
.85dc		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85de		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.85e0		c9 18		cmp #$18			cmp 	#NSTProcedure
.85e2		f0 62		beq $8646			beq 	_DCSyntax
.85e4		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.85e6		29 04		and #$04			and 	#NSBIsArray
.85e8		f0 64		beq $864e			beq 	_DCType
.85ea		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.85ec		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85ee		d0 59		bne $8649			bne 	_DCRedefine
.85f0		7a		ply				ply
.85f1		20 51 86	jsr $8651			jsr 	_DCGetSize 				; get array size, check it.
.85f4		5a		phy				phy
.85f5		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.85f7		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.85f9		7a		ply				ply 							; is there a second (e.g. ,x)
.85fa		b1 30		lda ($30),y			lda 	(codePtr),y
.85fc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.85fe		d0 0a		bne $860a			bne 	_DCOneDimension
.8600		c8		iny				iny 							; skip comma
.8601		20 51 86	jsr $8651			jsr 	_DCGetSize 				; get 2nd array size
.8604		5a		phy				phy
.8605		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8607		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8609		7a		ply				ply
.860a						_DCOneDimension:
.860a		5a		phy				phy 							; save position
.860b		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.860d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.860f		aa		tax				tax
.8610		c8		iny				iny
.8611		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8613		e8		inx				inx 							; bump them.
.8614		1a		inc a				inc 	a
.8615		20 cd a0	jsr $a0cd			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8618		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.861a		29 e0		and #$e0			and 	#$E0
.861c		d0 23		bne $8641			bne 	_DCSize
.861e		a0 02		ldy #$02			ldy 	#2 						; get base type
.8620		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8622		20 5f 86	jsr $865f			jsr 	ScaleByBaseType 		; scale by base type
.8625		a5 36		lda $36				lda 	zTemp0
.8627		a6 37		ldx $37				ldx 	zTemp0+1
.8629		20 d3 9c	jsr $9cd3			jsr 	AllocateXABytes 		; allocate memory
.862c		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.862e		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8630		c8		iny				iny
.8631		8a		txa				txa
.8632		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8634		7a		ply				ply 							; get position back
.8635		20 be 91	jsr $91be			jsr 	CheckRightBracket 		; check )
.8638		b1 30		lda ($30),y			lda 	(codePtr),y
.863a		c8		iny				iny 							; consume in case
.863b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.863d		f0 85		beq $85c4			beq 	DimCommand
.863f		88		dey				dey 							; undo consume
.8640		60		rts				rts
.8641						_DCSize:
.8641		a9 16		lda #$16		lda	#22
.8643		4c d7 91	jmp $91d7		jmp	ErrorHandler
.8646						_DCSyntax:
.8646		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
.8649						_DCRedefine:
.8649		a9 15		lda #$15		lda	#21
.864b		4c d7 91	jmp $91d7		jmp	ErrorHandler
.864e						_DCType:
.864e		4c aa a2	jmp $a2aa			jmp 	TypeError
.8651						_DCGetSize:
.8651		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8653		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 	; get array dimension
.8656		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8658		f0 e7		beq $8641			beq 	_DCSize
.865a		c9 fe		cmp #$fe			cmp 	#254
.865c		f0 e3		beq $8641			beq 	_DCSize
.865e		60		rts				rts
.865f						ScaleByBaseType:
.865f		29 10		and #$10			and 	#NSBIsString 			; is it string
.8661		d0 19		bne $867c			bne 	_SBBTString
.8663		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8665		48		pha				pha
.8666		a5 36		lda $36				lda 	zTemp0
.8668		48		pha				pha
.8669		06 36		asl $36				asl 	zTemp0 					; x 2
.866b		26 37		rol $37				rol 	zTemp0+1
.866d		06 36		asl $36				asl 	zTemp0 					; x 4
.866f		26 37		rol $37				rol 	zTemp0+1
.8671		68		pla				pla 							; add stacked value = x 5
.8672		65 36		adc $36				adc 	zTemp0
.8674		85 36		sta $36				sta 	zTemp0
.8676		68		pla				pla
.8677		65 37		adc $37				adc 	zTemp0+1
.8679		85 37		sta $37				sta 	zTemp0+1
.867b		60		rts				rts
.867c						_SBBTString:
.867c		06 36		asl $36				asl 	zTemp0
.867e		26 37		rol $37				rol 	zTemp0+1
.8680		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.8681						Command_Dir:
.8681		ad 5f 06	lda $065f			lda     DefaultDrive				; set drive to list.
.8684		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8686		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8688		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.868b		b0 56		bcs $86e3			bcs     _CDExit
.868d						_CDEventLoop:
.868d		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8690		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8693		b0 f8		bcs $868d			bcs     _CDEventLoop
.8695		ad 4a 08	lda $084a			lda     event.type
.8698		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.869a		f0 47		beq $86e3			beq    	_CDExit
.869c		20 a1 86	jsr $86a1			jsr     _CDMessages 				; handle various messages
.869f		80 ec		bra $868d			bra     _CDEventLoop
.86a1						_CDMessages:
.86a1		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.86a3		f0 15		beq $86ba			beq     _CDEVRead
.86a5		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.86a7		f0 19		beq $86c2			beq     _CDEVVolume
.86a9		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.86ab		f0 17		beq $86c4			beq     _CDEVFile
.86ad		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.86af		f0 28		beq $86d9			beq     _CDEVFree
.86b1		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.86b3		f0 26		beq $86db			beq     _CDEVEOF
.86b5		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.86b7		f0 22		beq $86db			beq     _CDEVEOF
.86b9		60		rts				rts
.86ba						_CDEVRead:
.86ba		ad 4d 08	lda $084d			lda     event.directory.stream
.86bd		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.86bf		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.86c2						_CDEVVolume:
.86c2		80 f6		bra $86ba			bra     _CDEVRead
.86c4						_CDEVFile:
.86c4		a9 20		lda #$20			lda 	#32
.86c6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.86c9		ad 4f 08	lda $084f			lda     event.directory.file.len
.86cc		20 e6 86	jsr $86e6			jsr     _CDReadData
.86cf		20 30 92	jsr $9230			jsr 	PrintStringXA
.86d2		a9 0d		lda #$0d			lda 	#13
.86d4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.86d7		80 e1		bra $86ba			bra     _CDEVRead
.86d9						_CDEVFree:
.86d9		80 00		bra $86db			bra     _CDEVEOF
.86db						_CDEVEOF:
.86db		ad 4d 08	lda $084d			lda     event.directory.stream
.86de		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.86e0		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.86e3						_CDExit:
.86e3		4c 28 84	jmp $8428			jmp 	WarmStart
.86e6						_CDReadData:
.86e6		85 fd		sta $fd				sta     kernel.args.recv.buflen
.86e8		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.86ea		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.86ec		a9 05		lda #$05			lda     #lineBuffer >> 8
.86ee		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.86f0		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.86f3		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.86f5		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.86f8		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.86fa		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.86fc		60		rts				rts
.86fd						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.86fd						Command_Drive:
.86fd		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger
.8700		8d 5f 06	sta $065f			sta 	DefaultDrive
.8703		60		rts				rts
.065f						DefaultDrive:
>065f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8704						EndCommand:
.8704		4c 28 84	jmp $8428			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8707						ForCommand:
.8707		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8709		20 01 b2	jsr $b201			jsr 	StackOpen
.870c		a2 00		ldx #$00			ldx 	#0
.870e		20 25 9b	jsr $9b25			jsr 	EvaluateTerm
.8711		b5 50		lda $50,x			lda 	NSStatus,x
.8713		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8715		d0 47		bne $875e			bne		_FCError
.8717		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8719		20 ce 91	jsr $91ce			jsr 	CheckNextA
.871c		e8		inx				inx
.871d		20 8f a0	jsr $a08f			jsr 	EvaluateInteger 			; <from> in +1
.8720		b1 30		lda ($30),y			lda 	(codePtr),y
.8722		c8		iny				iny 								; consume it
.8723		48		pha				pha 								; save on stack for later
.8724		c9 bb		cmp #$bb			cmp 	#KWD_DOWNTO
.8726		f0 04		beq $872c			beq 	_FCNoSyntax
.8728		c9 d9		cmp #$d9			cmp 	#KWD_TO
.872a		d0 35		bne $8761			bne 	_FCSyntaxError
.872c						_FCNoSyntax:
.872c		e8		inx				inx
.872d		20 8f a0	jsr $a08f			jsr 	EvaluateInteger
.8730		20 46 b2	jsr $b246			jsr 	STKSaveCodePosition 		; save loop back position
.8733		68		pla				pla 								; restore DOWNTO or TO
.8734		5a		phy				phy 								; save Y on the stack
.8735		49 bb		eor #$bb			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8737		f0 02		beq $873b			beq 	_FCNotDownTo
.8739		a9 02		lda #$02			lda 	#2
.873b						_FCNotDownTo:
.873b		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.873c		a0 10		ldy #$10			ldy 	#16
.873e		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8740		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8742		a5 58		lda $58				lda 	NSMantissa0
.8744		91 34		sta ($34),y			sta 	(basicStack),y
.8746		a5 60		lda $60				lda 	NSMantissa1
.8748		c8		iny				iny
.8749		91 34		sta ($34),y			sta 	(basicStack),y
.874b		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.874d		a2 01		ldx #$01			ldx 	#1
.874f		20 64 87	jsr $8764			jsr 	FCIntegerToStack
.8752		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8754		a2 02		ldx #$02			ldx 	#2
.8756		20 64 87	jsr $8764			jsr 	FCIntegerToStack
.8759		20 7f 87	jsr $877f			jsr 	CopyIndexToReference
.875c		7a		ply				ply 								; restore position
.875d		60		rts				rts
.875e						_FCError:
.875e		4c aa a2	jmp $a2aa			jmp 	TypeError
.8761						_FCSyntaxError:
.8761		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
.8764						FCIntegerToStack:
.8764		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8766		10 03		bpl $876b			bpl	 	_FCNotNegative
.8768		20 eb a0	jsr $a0eb			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.876b						_FCNotNegative:
.876b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.876d		91 34		sta ($34),y			sta 	(basicStack),y
.876f		c8		iny				iny
.8770		b5 60		lda $60,x			lda 	NSMantissa1,x
.8772		91 34		sta ($34),y			sta 	(basicStack),y
.8774		c8		iny				iny
.8775		b5 68		lda $68,x			lda 	NSMantissa2,x
.8777		91 34		sta ($34),y			sta 	(basicStack),y
.8779		c8		iny				iny
.877a		b5 70		lda $70,x			lda 	NSMantissa3,x
.877c		91 34		sta ($34),y			sta 	(basicStack),y
.877e		60		rts				rts
.877f						CopyIndexToReference:
.877f		5a		phy				phy
.8780		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8782		38		sec				sec 								; (because we copy from offset 8)
.8783		b1 34		lda ($34),y			lda 	(basicStack),y
.8785		e9 08		sbc #$08			sbc 	#8
.8787		85 36		sta $36				sta 	zTemp0
.8789		c8		iny				iny
.878a		b1 34		lda ($34),y			lda 	(basicStack),y
.878c		e9 00		sbc #$00			sbc 	#0
.878e		85 37		sta $37				sta 	zTemp0+1
.8790		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8792		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8794		b1 34		lda ($34),y			lda 	(basicStack),y
.8796		0a		asl a				asl 	a 							; into carry
.8797		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8799		90 14		bcc $87af			bcc 	_CITRNormal
.879b		38		sec				sec
.879c						_CITRNegative:
.879c		a9 00		lda #$00			lda 	#0
.879e		f1 34		sbc ($34),y			sbc 	(basicStack),y
.87a0		91 36		sta ($36),y			sta 	(zTemp0),y
.87a2		c8		iny				iny
.87a3		ca		dex				dex
.87a4		d0 f6		bne $879c			bne 	_CITRNegative
.87a6		88		dey				dey 								; look at MSB of mantissa
.87a7		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.87a9		09 80		ora #$80			ora 	#$80
.87ab		91 36		sta ($36),y			sta 	(zTemp0),y
.87ad		7a		ply				ply
.87ae		60		rts				rts
.87af						_CITRNormal:
.87af		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.87b1		91 36		sta ($36),y			sta 	(zTemp0),y
.87b3		c8		iny				iny
.87b4		ca		dex				dex
.87b5		d0 f8		bne $87af			bne 	_CITRNormal
.87b7		7a		ply				ply 								; and exit.
.87b8		60		rts				rts
.87b9						NextCommand:
.87b9		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.87bb		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.87bd		20 2e b2	jsr $b22e			jsr 	StackCheckFrame
.87c0		5a		phy				phy
.87c1		a0 10		ldy #$10			ldy 	#16 						; get the step count
.87c3		b1 34		lda ($34),y			lda 	(basicStack),y
.87c5		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.87c7		30 02		bmi $87cb			bmi 	_NCStepNeg
.87c9		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.87cb						_NCStepNeg:
.87cb		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.87cd		a2 04		ldx #$04			ldx 	#4 							; count to bump
.87cf		18		clc				clc
.87d0						_NCBump:
.87d0		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.87d2		91 34		sta ($34),y			sta 	(basicStack),y
.87d4		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.87d6		c8		iny				iny 								; next byte
.87d7		ca		dex				dex 								; do four times
.87d8		d0 f6		bne $87d0			bne 	_NCBump
.87da		20 7f 87	jsr $877f			jsr		CopyIndexToReference		; copy it to the reference variable.
.87dd		a0 10		ldy #$10			ldy 	#16 						; get step count again
.87df		b1 34		lda ($34),y			lda 	(basicStack),y
.87e1		0a		asl a				asl 	a 							; sign bit to carry
.87e2		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.87e4		85 38		sta $38				sta 	zTemp1
.87e6		90 02		bcc $87ea			bcc 	_NCCompRev 					; use if step is +ve
.87e8		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.87ea						_NCCompRev:
.87ea		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.87ec		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.87ee		85 39		sta $39				sta 	zTemp1+1
.87f0		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.87f2		38		sec				sec
.87f3						_NCCompare:
.87f3		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.87f5		b1 34		lda ($34),y			lda 	(basicStack),y
.87f7		a4 39		ldy $39				ldy 	zTemp1+1
.87f9		f1 34		sbc ($34),y			sbc 	(basicStack),y
.87fb		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.87fd		e6 39		inc $39				inc 	zTemp1+1
.87ff		ca		dex				dex 								; do it 4 times.
.8800		d0 f1		bne $87f3			bne 	_NCCompare
.8802		50 02		bvc $8806			bvc 	_NCNoOverflow 				; convert to signed comparison
.8804		49 80		eor #$80			eor 	#$80
.8806						_NCNoOverflow:
.8806		7a		ply				ply 								; restore Y position
.8807		0a		asl a				asl 	a 							; is bit 7 set.
.8808		90 04		bcc $880e			bcc 	_NCLoopBack 				; if no , >= so loop back
.880a		20 20 b2	jsr $b220			jsr 	StackClose 					; exit the loop
.880d		60		rts				rts
.880e						_NCLoopBack:
.880e		20 57 b2	jsr $b257			jsr 	STKLoadCodePosition 		; loop back
.8811		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8812						Command_GOSUB:
.8812		a2 00		ldx #$00			ldx 	#0
.8814		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8817		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8819		20 01 b2	jsr $b201			jsr 	StackOpen 					; create frame
.881c		20 46 b2	jsr $b246			jsr 	STKSaveCodePosition 		; save current position
.881f		4c 35 88	jmp $8835			jmp 	GotoStackX
.8822						Command_RETURN:
.8822		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8824		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8826		20 2e b2	jsr $b22e			jsr 	StackCheckFrame
.8829		20 57 b2	jsr $b257			jsr 	STKLoadCodePosition 		; restore code position
.882c		20 20 b2	jsr $b220			jsr 	StackClose
.882f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8830						GotoCommand:
.8830		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8832		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger
.8835						GotoStackX:
.8835		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8837		48		pha				pha 								; it is slightly inefficient, just in cases.
.8838		b5 58		lda $58,x			lda 	NSMantissa0,x
.883a		fa		plx				plx
.883b		20 ad a8	jsr $a8ad			jsr 	MemorySearch 				; transfer to line number AX.
.883e		90 05		bcc $8845			bcc 	_GotoError 					; not found, off end.
.8840		d0 03		bne $8845			bne 	_GotoError 					; not found exactly
.8842		4c b4 8d	jmp $8db4			jmp 	RunNewLine 					; and go straight to new line code.
.8845						_GotoError:
.8845		a9 0d		lda #$0d		lda	#13
.8847		4c d7 91	jmp $91d7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.884a						IfCommand:
.884a		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.884c		20 70 a0	jsr $a070			jsr 	EvaluateNumber
.884f		b1 30		lda ($30),y			lda 	(codePtr),y
.8851		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8853		d0 0a		bne $885f			bne 	_IfStructured 				; we still support it.
.8855		c8		iny				iny 								; consume THEN
.8856		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; is it zero
.8859		f0 01		beq $885c			beq 	_IfFail 					; if fail, go to next line
.885b		60		rts				rts 								; if THEN just continue
.885c						_IfFail:
.885c		4c 9c 8d	jmp $8d9c			jmp 	EOLCommand
.885f						_IfStructured:
.885f		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; is it zero
.8862		d0 07		bne $886b			bne 	_IfExit 					; if not, then continue normally.
.8864		a9 bc		lda #$bc			lda 	#KWD_ELSE 					; look for else/endif
.8866		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8868		20 19 91	jsr $9119			jsr 	ScanForward 				; and run from there
.886b						_IfExit:
.886b		60		rts				rts
.886c						ElseCode:
.886c		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.886e		aa		tax				tax 								; so just go to the structure exit
.886f		20 19 91	jsr $9119			jsr 	ScanForward
.8872		60		rts				rts
.8873						EndIf:
.8873		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8874						Command_Input:
.8874		9c 28 04	stz $0428			stz 	isPrintFlag
.8877		80 0c		bra $8885			bra 	Command_IP_Main
.8879						Command_CPrint:
.8879		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.887b		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.887e		80 05		bra $8885			bra 	Command_IP_Main
.8880						Command_Print:
.8880		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8882		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8885						Command_IP_Main:
.8885		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8886						_CPLoop:
.8886		08		php				php 								; save last action flag
.8887		b1 30		lda ($30),y			lda 	(codePtr),y
.8889		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.888b		f0 54		beq $88e1			beq 	_CPExit
.888d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.888f		f0 50		beq $88e1			beq 	_CPExit
.8891		68		pla				pla 								; throw last action flag
.8892		b1 30		lda ($30),y			lda 	(codePtr),y
.8894		c8		iny				iny
.8895		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8897		f0 45		beq $88de			beq 	_CPContinueWithSameLine
.8899		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.889b		f0 3c		beq $88d9			beq 	_CPTab
.889d		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.889f		f0 34		beq $88d5			beq 	_CPNewLine
.88a1		88		dey				dey 								; undo the get.
.88a2		20 d9 96	jsr $96d9			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.88a5		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.88a7		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.88a9		f0 0d		beq $88b8			beq 	_CPIsValue 					; no, display it.
.88ab		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.88ae		d0 05		bne $88b5			bne 	_CPIsPrint 					; otherwise display.
.88b0		20 ea 88	jsr $88ea			jsr 	CIInputValue 				; input a value to the reference
.88b3		80 20		bra $88d5			bra 	_CPNewLine
.88b5						_CPIsPrint:
.88b5		20 9e 99	jsr $999e			jsr 	Dereference 				; dereference if required.
.88b8						_CPIsValue:
.88b8		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.88ba		29 10		and #$10			and 	#NSBIsString
.88bc		f0 09		beq $88c7			beq 	_CPNumber
.88be		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.88c0		a5 58		lda $58				lda 	NSMantissa0
.88c2		20 4d 89	jsr $894d			jsr 	CPPrintStringXA
.88c5		80 be		bra $8885			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.88c7						_CPNumber:
.88c7		a9 05		lda #$05			lda 	#5 							; maximum decimals
.88c9		20 57 9f	jsr $9f57			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.88cc		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.88ce		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.88d0		20 4d 89	jsr $894d			jsr 	CPPrintStringXA 			; print it.
.88d3		80 b0		bra $8885			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.88d5						_CPNewLine:
.88d5		a9 0d		lda #$0d			lda 	#13
.88d7		80 02		bra $88db			bra 	_CPPrintCharDirect
.88d9						_CPTab:
.88d9		a9 09		lda #$09			lda 	#9 							; print TAB
.88db						_CPPrintCharDirect:
.88db		20 68 89	jsr $8968			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.88de						_CPContinueWithSameLine:
.88de		38		sec				sec 								; loop round with carry set, which
.88df		80 a5		bra $8886			bra 	_CPLoop 					; will inhibit final CR
.88e1						_CPExit:
.88e1		28		plp				plp 								; get last action flag
.88e2		b0 05		bcs $88e9			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88e4		a9 0d		lda #$0d			lda 	#13 						; print new line
.88e6		20 68 89	jsr $8968			jsr 	CPPVControl
.88e9						_CPExit2:
.88e9		60		rts				rts
.88ea						CIInputValue:
.88ea		a2 00		ldx #$00			ldx 	#0 							; input a line.
.88ec						_CIInputLine:
.88ec		20 6b 89	jsr $896b			jsr 	CPInputVector 				; get key
.88ef		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.88f1		f0 1f		beq $8912			beq 	_CIHaveValue
.88f3		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.88f5		f0 11		beq $8908			beq 	_CIBackspace
.88f7		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.88f9		90 f1		bcc $88ec			bcc 	_CIInputLine
.88fb		e0 50		cpx #$50			cpx 	#80 						; max length
.88fd		b0 ed		bcs $88ec			bcs 	_CIInputLine
.88ff		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8902		e8		inx				inx
.8903		20 60 89	jsr $8960			jsr 	CPPrintVector 				; echo it.
.8906		80 e4		bra $88ec			bra 	_CIInputLine
.8908						_CIBackspace:
.8908		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.890a		f0 e0		beq $88ec			beq 	_CIInputLine
.890c		20 60 89	jsr $8960			jsr 	CPPrintVector 				; echo it.
.890f		ca		dex				dex
.8910		80 da		bra $88ec			bra 	_CIInputLine
.8912						_CIHaveValue:
.8912		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8915		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8917		29 10		and #$10			and 	#NSBIsString
.8919		f0 17		beq $8932			beq 	_CIAssignNumber 			; assign a number
.891b		a2 01		ldx #$01			ldx 	#1
.891d		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.891f		95 58		sta $58,x			sta 	NSMantissa0,x
.8921		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8923		95 60		sta $60,x			sta 	NSMantissa1,x
.8925		74 68		stz $68,x			stz 	NSMantissa2,x
.8927		74 70		stz $70,x			stz 	NSMantissa3,x
.8929		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.892b		95 50		sta $50,x			sta  	NSStatus,x
.892d		ca		dex				dex 								; X = 0
.892e		20 a7 89	jsr $89a7			jsr 	AssignVariable
.8931		60		rts				rts
.8932						_CIAssignNumber:
.8932		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8934		85 36		sta $36				sta 	zTemp0
.8936		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8938		85 37		sta $37				sta 	zTemp0+1
.893a		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.893c		20 d9 9e	jsr $9ed9			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.893f		90 07		bcc $8948			bcc 	_CIIsOkay
.8941		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8943		20 60 89	jsr $8960			jsr 	CPPrintVector
.8946		80 a2		bra $88ea			bra 	CIInputValue
.8948						_CIIsOkay:
.8948		ca		dex				dex 								; X = 0
.8949		20 a7 89	jsr $89a7			jsr 	AssignVariable
.894c		60		rts				rts
.894d						CPPrintStringXA:
.894d		5a		phy				phy
.894e		86 37		stx $37				stx 	zTemp0+1
.8950		85 36		sta $36				sta 	zTemp0
.8952		a0 00		ldy #$00			ldy 	#0
.8954						_PSXALoop:
.8954		b1 36		lda ($36),y			lda 	(zTemp0),y
.8956		f0 06		beq $895e			beq 	_PSXAExit
.8958		20 60 89	jsr $8960			jsr 	CPPrintVector
.895b		c8		iny				iny
.895c		80 f6		bra $8954			bra 	_PSXALoop
.895e						_PSXAExit:
.895e		7a		ply				ply
.895f		60		rts				rts
.8960						CPPrintVector:
.8960		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8963		30 03		bmi $8968			bmi 	CPPVControl
.8965		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8968						CPPVControl:
.8968		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.896b						CPInputVector:
.896b		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.896e						LetCommand:
.896e		a2 00		ldx #$00			ldx 	#0
.8970		b1 30		lda ($30),y			lda 	(codePtr),y
.8972		c9 10		cmp #$10			cmp 	#KWD_AT
.8974		d0 14		bne $898a			bne 	_LCStandard
.8976		c8		iny				iny 								; skip equal
.8977		20 25 9b	jsr $9b25			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.897a		20 9e 99	jsr $999e			jsr 	Dereference 				; dereference it to a value
.897d		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.897f		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8981		95 50		sta $50,x			sta 	NSStatus,x
.8983		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8985		d0 0f		bne $8996			bne 	_LCMain
.8987		4c aa a2	jmp $a2aa			jmp 	TypeError 					; was a reference before.
.898a						_LCStandard:
.898a		ad c3 96	lda $96c3			lda 	PrecedenceLevel+"*"			; precedence > this
.898d		20 dd 96	jsr $96dd			jsr 	EvaluateExpressionAtPrecedence
.8990		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8992		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8994		f0 0e		beq $89a4			beq 	_LetGoProc 					; it's a procedure call.
.8996						_LCMain:
.8996		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8998		20 ce 91	jsr $91ce			jsr 	CheckNextA
.899b		e8		inx				inx 								; RHS
.899c		20 67 a0	jsr $a067			jsr 	EvaluateValue
.899f		ca		dex				dex
.89a0		20 a7 89	jsr $89a7			jsr 	AssignVariable
.89a3		60		rts				rts
.89a4						_LetGoProc:
.89a4		4c 72 8c	jmp $8c72			jmp 	CallProcedure
.89a7						AssignVariable:
.89a7		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.89a9		48		pha				pha 								; save a copy
.89aa		55 51		eor $51,x			eor 	NSStatus+1,x
.89ac		29 10		and #$10			and 	#NSBIsString
.89ae		d0 0b		bne $89bb			bne 	_ASError
.89b0		68		pla				pla 								; get back
.89b1		29 10		and #$10			and 	#NSBIsString 				; check type
.89b3		d0 03		bne $89b8			bne 	_ASString
.89b5		4c dc 98	jmp $98dc			jmp 	AssignNumber
.89b8						_ASString:
.89b8		4c 3a 99	jmp $993a			jmp 	AssignString
.89bb						_ASError:
.89bb		4c aa a2	jmp $a2aa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.89be						Command_List:
.89be		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.89c1		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.89c3		20 8f 80	jsr $808f			jsr 	SNDCommand
.89c6		b1 30		lda ($30),y			lda 	(codePtr),y
.89c8		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.89ca		c9 40		cmp #$40			cmp 	#$40  						; of code.
.89cc		f0 6e		beq $8a3c			beq 	_CLListProcedure
.89ce		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.89d0		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.89d2		a9 ff		lda #$ff			lda 	#$FF
.89d4		85 5f		sta $5f				sta 	NSMantissa0+7
.89d6		85 67		sta $67				sta 	NSMantissa1+7
.89d8		b1 30		lda ($30),y			lda 	(codePtr),y
.89da		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89dc		f0 1a		beq $89f8			beq 	_CLSecond
.89de		20 b9 8a	jsr $8ab9			jsr 	CLIsDigit 					; if not digit, list all
.89e1		b0 20		bcs $8a03			bcs 	_CLStart
.89e3		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.89e5		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger
.89e8		b1 30		lda ($30),y			lda 	(codePtr),y
.89ea		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89ec		f0 0a		beq $89f8			beq 	_CLSecond 					; if so go get it
.89ee		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.89f0		85 5f		sta $5f				sta 	NSMantissa0+7
.89f2		a5 64		lda $64				lda 	NSMantissa1+4
.89f4		85 67		sta $67				sta 	NSMantissa1+7
.89f6		80 0b		bra $8a03			bra 	_CLStart
.89f8						_CLSecond:
.89f8		c8		iny				iny 								; consume comma
.89f9		20 b9 8a	jsr $8ab9			jsr 	CLIsDigit 					; digit found
.89fc		b0 05		bcs $8a03			bcs 	_CLStart 					; if not, continue listing
.89fe		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8a00		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger
.8a03						_CLStart
.8a03		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a05		85 30		sta $30				sta 	codePtr
.8a07		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a09		85 31		sta $31				sta 	codePtr+1
.8a0b						_CLLoop:
.8a0b		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8a0e		f0 27		beq $8a37			beq 	_CLBreak
.8a10		b2 30		lda ($30)			lda 	(codePtr)
.8a12		f0 20		beq $8a34			beq 	_CLExit
.8a14		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8a16		20 a8 8a	jsr $8aa8			jsr 	CLCompareLineNo
.8a19		90 0c		bcc $8a27			bcc 	_CLNext
.8a1b		a2 07		ldx #$07			ldx 	#7
.8a1d		20 a8 8a	jsr $8aa8			jsr 	CLCompareLineNo
.8a20		f0 02		beq $8a24			beq 	_CLDoThisOne
.8a22		b0 03		bcs $8a27			bcs 	_CLNext
.8a24						_CLDoThisOne:
.8a24		20 95 8a	jsr $8a95			jsr 	CLListOneLine 				; routine to list the current line.
.8a27						_CLNext:
.8a27		18		clc				clc
.8a28		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8a2a		65 30		adc $30				adc 	codePtr
.8a2c		85 30		sta $30				sta 	codePtr
.8a2e		90 02		bcc $8a32			bcc 	_CREExit
.8a30		e6 31		inc $31				inc 	codePtr+1 					; carry
.8a32						_CREExit:
.8a32		80 d7		bra $8a0b			bra 	_CLLoop
.8a34						_CLExit:
.8a34		4c 28 84	jmp $8428			jmp 	WarmStart
.8a37						_CLBreak:
.8a37		a9 01		lda #$01		lda	#1
.8a39		4c d7 91	jmp $91d7		jmp	ErrorHandler
.8a3c						_CLListProcedure:
.8a3c		b1 30		lda ($30),y			lda 	(codePtr),y
.8a3e		85 38		sta $38				sta 	zTemp1
.8a40		c8		iny				iny
.8a41		b1 30		lda ($30),y			lda 	(codePtr),y
.8a43		85 39		sta $39				sta 	zTemp1+1
.8a45		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a47		85 30		sta $30				sta 	codePtr
.8a49		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a4b		85 31		sta $31				sta 	codePtr+1
.8a4d						_CLLPSearch:
.8a4d		b2 30		lda ($30)			lda 	(codePtr)
.8a4f		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8a51		f0 e1		beq $8a34			beq 	_CLExit
.8a53		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8a55		b1 30		lda ($30),y			lda 	(codePtr),y
.8a57		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8a59		d0 0e		bne $8a69			bne 	_CLLPNext
.8a5b		c8		iny				iny 								; check if PROC this.
.8a5c		b1 30		lda ($30),y			lda 	(codePtr),y
.8a5e		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8a60		d0 07		bne $8a69			bne 	_CLLPNext
.8a62		c8		iny				iny
.8a63		b1 30		lda ($30),y			lda 	(codePtr),y
.8a65		c5 39		cmp $39				cmp 	zTemp1+1
.8a67		f0 0d		beq $8a76			beq 	_CLLPFound
.8a69						_CLLPNext:
.8a69		18		clc				clc
.8a6a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8a6c		65 30		adc $30				adc 	codePtr
.8a6e		85 30		sta $30				sta 	codePtr
.8a70		90 02		bcc $8a74			bcc 	_CREExit
.8a72		e6 31		inc $31				inc 	codePtr+1 					; carry
.8a74						_CREExit:
.8a74		80 d7		bra $8a4d			bra 	_CLLPSearch
.8a76						_CLLPFound:
.8a76		b2 30		lda ($30)			lda 	(codePtr)
.8a78		f0 ba		beq $8a34			beq 	_CLExit
.8a7a		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8a7c		b1 30		lda ($30),y			lda 	(codePtr),y
.8a7e		48		pha				pha
.8a7f		20 95 8a	jsr $8a95			jsr 	CLListOneLine 				; list line and go forward
.8a82		18		clc				clc
.8a83		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8a85		65 30		adc $30				adc 	codePtr
.8a87		85 30		sta $30				sta 	codePtr
.8a89		90 02		bcc $8a8d			bcc 	_CREExit
.8a8b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8a8d						_CREExit:
.8a8d		68		pla				pla 								; reached ENDPROC ?
.8a8e		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.8a90		d0 e4		bne $8a76			bne 	_CLLPFound
.8a92		4c 28 84	jmp $8428			jmp 	WarmStart
.8a95						CLListOneLine:
.8a95		20 7c 91	jsr $917c			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8a98		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.8a9b		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8a9d		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8a9f		20 30 92	jsr $9230			jsr 	PrintStringXA
.8aa2		a9 0d		lda #$0d			lda 	#13 						; new line
.8aa4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8aa7		60		rts				rts
.8aa8						CLCompareLineNo:
.8aa8		38		sec				sec
.8aa9		a0 01		ldy #$01			ldy 	#1
.8aab		b1 30		lda ($30),y			lda 	(codePtr),y
.8aad		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8aaf		85 36		sta $36				sta 	zTemp0
.8ab1		c8		iny				iny
.8ab2		b1 30		lda ($30),y			lda 	(codePtr),y
.8ab4		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8ab6		05 36		ora $36				ora 	zTemp0
.8ab8		60		rts				rts
.8ab9						CLIsDigit:
.8ab9		b1 30		lda ($30),y			lda 	(codePtr),y
.8abb		c9 30		cmp #$30			cmp 	#"0"
.8abd		90 03		bcc $8ac2			bcc	 	_CLIDExitFalse
.8abf		c9 3a		cmp #$3a			cmp 	#"9"+1
.8ac1		60		rts				rts
.8ac2						_CLIDExitFalse:
.8ac2		38		sec				sec
.8ac3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8ac4						Command_Load:
.8ac4		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; file name to load
.8ac7		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8ac9		a5 36		lda $36				lda 	zTemp0
.8acb		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8ace		b0 44		bcs $8b14			bcs 	CLErrorHandler 				; error, so fail.
.8ad0		8d 61 06	sta $0661			sta 	CurrentFileStream 			; save the reading stream.
.8ad3		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8ad6		20 2b 8c	jsr $8c2b			jsr 	NewProgram 					; does the actual NEW.
.8ad9		9c 60 06	stz $0660			stz 	LoadEOFFlag 				; clear EOF Flag.
.8adc						_CLLoop:
.8adc		20 22 8b	jsr $8b22			jsr 	LoadReadLine 				; get next line.
.8adf		f0 10		beq $8af1			beq 	_CLExit 					; end, exit.
.8ae1		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8ae4		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8ae7		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8aea		f0 f0		beq $8adc			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8aec		20 03 84	jsr $8403			jsr 	EditProgramCode 			; do the editing etc.
.8aef		80 eb		bra $8adc			bra 	_CLLoop
.8af1						_CLExit:
.8af1		ad 61 06	lda $0661			lda 	CurrentFileStream
.8af4		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8af7						CLComplete:
.8af7		a9 01		lda #$01			lda 	#_CLCMsg & $FF
.8af9		a2 8b		ldx #$8b			ldx 	#_CLCMsg >> 8
.8afb		20 30 92	jsr $9230			jsr 	PrintStringXA
.8afe		4c 28 84	jmp $8428			jmp 	WarmStart
.8b01						_CLCMsg:
>8b01		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8b09		2e 0d 00
.8b0c						CLCloseError:
.8b0c		48		pha				pha
.8b0d		ad 61 06	lda $0661			lda 	CurrentFileStream
.8b10		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8b13		68		pla				pla
.8b14						CLErrorHandler:
.8b14		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8b16		f0 05		beq $8b1d			beq 	_CLEHNotFound
.8b18		a9 1a		lda #$1a		lda	#26
.8b1a		4c d7 91	jmp $91d7		jmp	ErrorHandler
.8b1d						_CLEHNotFound:
.8b1d		a9 19		lda #$19		lda	#25
.8b1f		4c d7 91	jmp $91d7		jmp	ErrorHandler
.8b22						LoadReadLine:
.8b22		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8b24		20 3e 8b	jsr $8b3e			jsr 	LoadReadCharacter
.8b27		f0 14		beq $8b3d			beq 	_LRLExit 					; eof ?
.8b29		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8b2b		90 f5		bcc $8b22			bcc 	LoadReadLine
.8b2d						_LRLLoop:
.8b2d		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8b30		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8b33		e8		inx				inx
.8b34		20 3e 8b	jsr $8b3e			jsr 	LoadReadCharacter 			; next line
.8b37		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8b39		b0 f2		bcs $8b2d			bcs 	_LRLLoop
.8b3b		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8b3d						_LRLExit:
.8b3d		60		rts				rts
.8b3e						LoadReadCharacter:
.8b3e		da		phx				phx
.8b3f		5a		phy				phy
.8b40		ad 60 06	lda $0660			lda 	LoadEOFFlag 				; already done EOF.
.8b43		d0 0c		bne $8b51			bne 	_LRCIsEOF
.8b45		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8b48		90 09		bcc $8b53			bcc		_LRCExit 					; read okay.
.8b4a		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8b4c		d0 be		bne $8b0c			bne 	CLCloseError
.8b4e		ce 60 06	dec $0660			dec 	LoadEOFFlag
.8b51						_LRCIsEOF:
.8b51		a9 00		lda #$00			lda 	#0
.8b53						_LRCExit:
.8b53		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8b55		d0 02		bne $8b59			bne 	_LRCNotTab
.8b57		a9 20		lda #$20			lda 	#' '
.8b59						_LRCNotTab:
.8b59		c9 0a		cmp #$0a			cmp 	#$0A
.8b5b		d0 02		bne $8b5f			bne 	_LRCNotLF
.8b5d		a9 0d		lda #$0d			lda 	#$0D
.8b5f						_LRCNotLF:
.8b5f		7a		ply				ply
.8b60		fa		plx				plx
.8b61		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b63		60		rts				rts
.0660						LoadEOFFlag:
>0660								.fill 	1
.0661						CurrentFileStream:
>0661								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8b64						Command_LOCAL:
.8b64		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8b66		20 72 8b	jsr $8b72			jsr 	LocaliseNextTerm 			; convert term to a local.
.8b69		b1 30		lda ($30),y			lda 	(codePtr),y
.8b6b		c8		iny				iny
.8b6c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b6e		f0 f4		beq $8b64			beq 	Command_LOCAL 				; if so, localise another variable.
.8b70		88		dey				dey 								; unpick pre-get
.8b71		60		rts				rts
.8b72						LocaliseNextTerm:
.8b72		20 25 9b	jsr $9b25			jsr 	EvaluateTerm 				; evaluate the term
.8b75		b5 50		lda $50,x			lda 	NSStatus,x
.8b77		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8b79		f0 5c		beq $8bd7			beq		_LNTError
.8b7b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8b7d		85 36		sta $36				sta 	zTemp0
.8b7f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8b81		85 37		sta $37				sta  	zTemp0+1
.8b83		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8b85		29 10		and #$10			and 	#NSBIsString
.8b87		d0 1e		bne $8ba7			bne 	_LNTPushString
.8b89		5a		phy				phy
.8b8a		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8b8c						_LNTPushNumLoop:
.8b8c		b1 36		lda ($36),y			lda		(zTemp0),y
.8b8e		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8b91		c8		iny				iny
.8b92		c0 05		cpy #$05			cpy 	#5
.8b94		d0 f6		bne $8b8c			bne 	_LNTPushNumLoop
.8b96		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8b98		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8b9b		a5 37		lda $37				lda 	zTemp0+1
.8b9d		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8ba0		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8ba2		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8ba5		7a		ply				ply
.8ba6		60		rts				rts
.8ba7						_LNTPushString:
.8ba7		5a		phy				phy
.8ba8		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8baa		85 38		sta $38				sta 	zTemp1
.8bac		a0 01		ldy #$01			ldy 	#1
.8bae		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bb0		85 39		sta $39				sta 	zTemp1+1
.8bb2		a0 00		ldy #$00			ldy 	#0 							; output string
.8bb4		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8bb6		f0 0a		beq $8bc2			beq 	_LNTStringOut
.8bb8						_LNTPushStrLoop:
.8bb8		b1 38		lda ($38),y			lda 	(zTemp1),y
.8bba		f0 06		beq $8bc2			beq 	_LNTStringOut
.8bbc		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8bbf		c8		iny				iny
.8bc0		80 f6		bra $8bb8			bra 	_LNTPushStrLoop
.8bc2						_LNTStringOut:
.8bc2		98		tya				tya									; output length (chars written).
.8bc3		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8bc6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8bc8		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8bcb		b5 60		lda $60,x			lda 	NSMantissa1,x
.8bcd		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8bd0		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8bd2		20 e0 b1	jsr $b1e0			jsr 	StackPushByte
.8bd5		7a		ply				ply
.8bd6		60		rts				rts
.8bd7						_LNTError:
.8bd7		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
.8bda						LocalPopValue:
.8bda		20 f8 b1	jsr $b1f8			jsr 	StackPopByte
.8bdd		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8bdf		d0 17		bne $8bf8			bne 	_LPVString
.8be1		20 f8 b1	jsr $b1f8			jsr 	StackPopByte 				; address
.8be4		85 37		sta $37				sta 	zTemp0+1
.8be6		20 f8 b1	jsr $b1f8			jsr 	StackPopByte
.8be9		85 36		sta $36				sta 	zTemp0
.8beb		5a		phy				phy
.8bec		a0 04		ldy #$04			ldy 	#4 							; copy back
.8bee						_LPVNumberCopy:
.8bee		20 f8 b1	jsr $b1f8			jsr 	StackPopByte
.8bf1		91 36		sta ($36),y			sta 	(zTemp0),y
.8bf3		88		dey				dey
.8bf4		10 f8		bpl $8bee			bpl 	_LPVNumberCopy
.8bf6		7a		ply				ply 								; and complete
.8bf7		60		rts				rts
.8bf8						_LPVString:
.8bf8		20 f8 b1	jsr $b1f8			jsr 	StackPopByte 				; address of record copied to zTemp0
.8bfb		85 37		sta $37				sta 	zTemp0+1
.8bfd		20 f8 b1	jsr $b1f8			jsr 	StackPopByte
.8c00		85 36		sta $36				sta 	zTemp0
.8c02		5a		phy				phy
.8c03		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8c05		85 38		sta $38				sta 	zTemp1
.8c07		a0 01		ldy #$01			ldy 	#1
.8c09		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c0b		85 39		sta $39				sta 	zTemp1+1
.8c0d		20 f8 b1	jsr $b1f8			jsr 	StackPopByte 				; # chars to get => y
.8c10		a8		tay				tay
.8c11		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8c13		f0 0e		beq $8c23			beq 	_LPVStringCopied
.8c15		a9 00		lda #$00			lda 	#0 							; NULL on end
.8c17		91 38		sta ($38),y			sta 	(zTemp1),y
.8c19						_LPVStringCopy:
.8c19		88		dey				dey
.8c1a		30 07		bmi $8c23			bmi 	_LPVStringCopied
.8c1c		20 f8 b1	jsr $b1f8			jsr 	StackPopByte
.8c1f		91 38		sta ($38),y			sta 	(zTemp1),y
.8c21		80 f6		bra $8c19			bra 	_LPVStringCopy
.8c23						_LPVStringCopied:
.8c23		fa		plx				plx
.8c24		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8c25						NewCommand:
.8c25		20 2b 8c	jsr $8c2b			jsr 	NewProgram 					; does the actual NEW.
.8c28		4c 28 84	jmp $8428			jmp 	WarmStart 					; and warm starts straight away.
.8c2b						NewProgram:
.8c2b		20 8f a8	jsr $a88f			jsr 	MemoryNew
.8c2e		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8c31		20 5c 85	jsr $855c			jsr 	ClearCommand 				; clear everything.
.8c34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8c35						PokeBCommand:
.8c35		a9 01		lda #$01			lda 	#1
.8c37		80 0c		bra $8c45			bra 	PokeCommand
.8c39						PokeWCommand:
.8c39		a9 02		lda #$02			lda 	#2
.8c3b		80 08		bra $8c45			bra 	PokeCommand
.8c3d						PokeLCommand:
.8c3d		a9 03		lda #$03			lda 	#3
.8c3f		80 04		bra $8c45			bra 	PokeCommand
.8c41						PokeDCommand:
.8c41		a9 04		lda #$04			lda 	#4
.8c43		80 00		bra $8c45			bra 	PokeCommand
.8c45						PokeCommand:
.8c45		48		pha				pha 								; save count on stack
.8c46		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8c48		20 a2 a0	jsr $a0a2			jsr		Evaluate16BitInteger 		; address
.8c4b		20 c6 91	jsr $91c6			jsr 	CheckComma
.8c4e		e8		inx				inx
.8c4f		20 8f a0	jsr $a08f			jsr		EvaluateInteger 			; data
.8c52		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8c54		85 36		sta $36				sta 	zTemp0
.8c56		a5 60		lda $60				lda 	NSMantissa1
.8c58		85 37		sta $37				sta 	zTemp0+1
.8c5a		68		pla				pla 								; count -> zTemp1
.8c5b		85 38		sta $38				sta 	zTemp1
.8c5d		5a		phy				phy 								; save Y position.
.8c5e		a0 00		ldy #$00			ldy 	#0 							; index to write
.8c60		a2 00		ldx #$00			ldx 	#0 							; index to read
.8c62						_PCLoop:
.8c62		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8c64		91 36		sta ($36),y			sta 	(zTemp0),y
.8c66		c8		iny				iny 								; next byte to write
.8c67		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8c68		18		clc				clc
.8c69		69 08		adc #$08			adc 	#MathStackSize
.8c6b		aa		tax				tax
.8c6c		c6 38		dec $38				dec 	zTemp1 						; done them all
.8c6e		d0 f2		bne $8c62			bne 	_PCLoop
.8c70		7a		ply				ply 								; restore position.
.8c71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8c72						CallProcedure:
.8c72		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8c74		b1 30		lda ($30),y			lda 	(codePtr),y
.8c76		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8c78		f0 0c		beq $8c86			beq 	_CPEndParam
.8c7a						_CPParamLoop:
.8c7a		20 67 a0	jsr $a067			jsr 	EvaluateValue 				; get parameter onto stack
.8c7d		e8		inx				inx 								; bump next stack
.8c7e		b1 30		lda ($30),y			lda 	(codePtr),y
.8c80		c8		iny				iny
.8c81		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8c83		f0 f5		beq $8c7a			beq 	_CPParamLoop
.8c85		88		dey				dey 								; unpick.
.8c86						_CPEndParam:
.8c86		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8c89		c8		iny				iny									; skip right bracket
.8c8a		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8c8c		20 01 b2	jsr $b201			jsr 	StackOpen
.8c8f		20 46 b2	jsr $b246			jsr 	STKSaveCodePosition 		; save loop position
.8c92		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8c94		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8c96		a5 60		lda $60				lda 	NSMantissa1
.8c98		85 37		sta $37				sta 	zTemp0+1
.8c9a		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8c9c		b2 36		lda ($36)			lda 	(zTemp0)
.8c9e		85 30		sta $30				sta 	safePtr
.8ca0		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ca2		85 31		sta $31				sta 	safePtr+1
.8ca4		c8		iny				iny
.8ca5		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ca7		85 32		sta $32				sta 	safePtr+2
.8ca9		c8		iny				iny
.8caa		b1 36		lda ($36),y			lda 	(zTemp0),y
.8cac		85 33		sta $33				sta 	safePtr+3
.8cae		c8		iny				iny 								; get Y offset -> Y
.8caf		b1 36		lda ($36),y			lda 	(zTemp0),y
.8cb1		a8		tay				tay
.8cb2		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8cb4		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8cb7		f0 13		beq $8ccc			beq 	_ParamExit 					; if so, exit.
.8cb9						_ParamExtract:
.8cb9		ca		dex				dex 								; put a local term on the level before
.8cba		20 72 8b	jsr $8b72			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8cbd		20 a7 89	jsr $89a7			jsr 	AssignVariable 				; assign stacked value to the variable.
.8cc0		e8		inx				inx 								; advance to next parameter to do.
.8cc1		e8		inx				inx
.8cc2		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8cc5		f0 05		beq $8ccc			beq 	_ParamExit
.8cc7		20 c6 91	jsr $91c6			jsr 	CheckComma 					; comma seperating parameters
.8cca		80 ed		bra $8cb9			bra 	_ParamExtract
.8ccc						_ParamExit:
.8ccc		20 be 91	jsr $91be			jsr 	CheckRightBracket 			; check )
.8ccf		60		rts				rts 								; and continue from here
.8cd0						Command_ENDPROC:
.8cd0		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8cd2		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8cd4		20 2e b2	jsr $b22e			jsr 	StackCheckFrame
.8cd7		20 57 b2	jsr $b257			jsr 	STKLoadCodePosition 		; restore code position
.8cda		20 20 b2	jsr $b220			jsr 	StackClose
.8cdd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8cde						Command_Read:
.8cde		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8ce0		20 25 9b	jsr $9b25			jsr 	EvaluateTerm
.8ce3		b5 50		lda $50,x			lda 	NSStatus,x
.8ce5		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ce7		f0 4f		beq $8d38			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8ce9		20 81 8d	jsr $8d81			jsr 	SwapDataCodePtrs 			; swap code and data
.8cec		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8cef		d0 25		bne $8d16			bne 	_CRContinueData  			; forward for the next one.
.8cf1		b2 30		lda ($30)			lda 	(codePtr)
.8cf3		f0 1c		beq $8d11			beq 	_CRNoData
.8cf5						_CRKeepSearching:
.8cf5		a9 b9		lda #$b9			lda 	#KWD_DATA 					; scan for instruction
.8cf7		a2 80		ldx #$80			ldx 	#KWC_EOL
.8cf9		20 19 91	jsr $9119			jsr 	ScanForward
.8cfc		c9 b9		cmp #$b9			cmp 	#KWD_DATA 					; found data ?
.8cfe		f0 16		beq $8d16			beq 	_CRHaveData 				; found it
.8d00		18		clc				clc
.8d01		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d03		65 30		adc $30				adc 	codePtr
.8d05		85 30		sta $30				sta 	codePtr
.8d07		90 02		bcc $8d0b			bcc 	_CREExit
.8d09		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d0b						_CREExit:
.8d0b		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8d0d		b2 30		lda ($30)			lda 	(codePtr)
.8d0f		d0 e4		bne $8cf5			bne 	_CRKeepSearching
.8d11						_CRNoData:
.8d11		a9 0b		lda #$0b		lda	#11
.8d13		4c d7 91	jmp $91d7		jmp	ErrorHandler
.8d16						_CRHaveData:
.8d16						_CRContinueData:
.8d16		a2 01		ldx #$01			ldx 	#1
.8d18		20 67 a0	jsr $a067			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8d1b		ca		dex				dex
.8d1c		20 a7 89	jsr $89a7			jsr		AssignVariable 				; do the assignment
.8d1f		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8d22		b1 30		lda ($30),y			lda 	(codePtr),y
.8d24		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8d26		d0 04		bne $8d2c			bne 	_CRSwapBack
.8d28		c8		iny				iny 								; consume comma
.8d29		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8d2c						_CRSwapBack:
.8d2c		20 81 8d	jsr $8d81			jsr 	SwapDataCodePtrs			; swap them back.
.8d2f		b1 30		lda ($30),y			lda 	(codePtr),y
.8d31		c8		iny				iny
.8d32		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d34		f0 a8		beq $8cde			beq 	Command_Read 				; if so go round again.
.8d36		88		dey				dey 								; unpick get.
.8d37		60		rts				rts
.8d38						_CRSyntax:
.8d38		4c a0 a2	jmp $a2a0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8d3b						RemCommand:
.8d3b		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3d		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8d3f		d0 06		bne $8d47			bne 	_RMExit
.8d41		c8		iny				iny 								; point to offset
.8d42		98		tya				tya 								; A = offset position
.8d43		38		sec				sec 								; add size +1 hence SEC
.8d44		71 30		adc ($30),y			adc 	(codePtr),y
.8d46		a8		tay				tay 								; make current position.
.8d47						_RMExit:
.8d47		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8d48						Command_REPEAT:
.8d48		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8d4a		20 01 b2	jsr $b201			jsr 	StackOpen
.8d4d		20 46 b2	jsr $b246			jsr 	STKSaveCodePosition 		; save loop position
.8d50		60		rts				rts
.8d51						Command_UNTIL:
.8d51		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8d53		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8d55		20 2e b2	jsr $b22e			jsr 	StackCheckFrame
.8d58		a2 00		ldx #$00			ldx 	#0
.8d5a		20 70 a0	jsr $a070			jsr 	EvaluateNumber 				; work out the number
.8d5d		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; check if zero
.8d60		f0 04		beq $8d66			beq 	_CULoopBack 				; if so keep looping
.8d62		20 20 b2	jsr $b220			jsr 	StackClose		 			; return
.8d65		60		rts				rts
.8d66						_CULoopBack:
.8d66		20 57 b2	jsr $b257			jsr 	STKLoadCodePosition 		; loop back
.8d69		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8d6a						Command_Restore:
.8d6a		20 81 8d	jsr $8d81			jsr 	SwapDataCodePtrs 			; swap code and data
.8d6d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d6f		85 30		sta $30				sta 	codePtr
.8d71		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d73		85 31		sta $31				sta 	codePtr+1
.8d75		20 81 8d	jsr $8d81			jsr 	SwapDataCodePtrs 			; put them back
.8d78		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8d7a		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8d7d		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8d80		60		rts				rts
.8d81						SwapDataCodePtrs:
.8d81		da		phx				phx
.8d82		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8d84						_SDCPLoop:
.8d84		b5 30		lda $30,x			lda 	safePtr,x
.8d86		48		pha				pha
.8d87		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8d8a		95 30		sta $30,x			sta 	safePtr,x
.8d8c		68		pla				pla
.8d8d		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8d90		ca		dex				dex
.8d91		10 f1		bpl $8d84			bpl 	_SDCPLoop
.8d93		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8d96		8c 1b 04	sty $041b			sty 	dataPointer+4
.8d99		a8		tay				tay
.8d9a		fa		plx				plx
.8d9b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8d9c						EOLCommand:
.8d9c		18		clc				clc
.8d9d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d9f		65 30		adc $30				adc 	codePtr
.8da1		85 30		sta $30				sta 	codePtr
.8da3		90 02		bcc $8da7			bcc 	_CREExit
.8da5		e6 31		inc $31				inc 	codePtr+1 					; carry
.8da7						_CREExit:
.8da7		80 0b		bra $8db4			bra 	RunNewLine
.8da9						CommandRUN:
.8da9		20 5c 85	jsr $855c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8dac		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8dae		85 30		sta $30				sta 	codePtr
.8db0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8db2		85 31		sta $31				sta 	codePtr+1
.8db4						RunNewLine:
.8db4		b2 30		lda ($30)			lda 	(codePtr)
.8db6		f0 78		beq $8e30			beq 	CRNoProgram         		; no then END.
.8db8		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8dba		9a		txs				txs
.8dbb						RUNCodePointerLine:
.8dbb		a0 02		ldy #$02			ldy 	#2 							; start of program
.8dbd						_CRIncMainLoop:
.8dbd		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8dc0		d0 1f		bne $8de1			bne 	_CRNoBreakCheck
.8dc2		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8dc5		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8dc8		f0 61		beq $8e2b			beq 	_CRBreak
.8dca		a5 01		lda $01				lda 	1 							; save I/O 0
.8dcc		48		pha				pha
.8dcd		64 01		stz $01				stz 	1 							; access I/O Page 0
.8dcf		38		sec				sec 								; calculate timer - LastTick
.8dd0		ad 59 d6	lda $d659			lda 	$D659
.8dd3		cd 62 06	cmp $0662			cmp 	LastTick
.8dd6		f0 06		beq $8dde			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8dd8		8d 62 06	sta $0662			sta 	LastTick 					; update last timer
.8ddb		20 4d a1	jsr $a14d			jsr 	TickHandler 							; go do the code.
.8dde						_NoFireTick:
.8dde		68		pla				pla 								; restore I/O 0
.8ddf		85 01		sta $01				sta 	1
.8de1						_CRNoBreakCheck:
.8de1		c8		iny				iny									; next token
.8de2						_CRMainLoop:
.8de2		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8de5		b1 30		lda ($30),y			lda 	(codePtr),y
.8de7		10 10		bpl $8df9			bpl 	_CRNotKeyword				; not a token.
.8de9		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8deb		b0 04		bcs $8df1			bcs 	_CRIsKeyword
.8ded		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8def		b0 34		bcs $8e25			bcs		_CRSyntaxError
.8df1						_CRIsKeyword:
.8df1		c8		iny				iny 								; consume command
.8df2		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8df3		aa		tax				tax 								; put in X for vector jump
.8df4		20 28 8e	jsr $8e28			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8df7		80 e9		bra $8de2			bra 	_CRMainLoop 				; and loop round
.8df9						_CRNotKeyword:
.8df9		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8dfb		f0 c0		beq $8dbd			beq 	_CRIncMainLoop
.8dfd		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8dff		90 05		bcc $8e06			bcc 	_CRNotVariable
.8e01						_CRGoLet:
.8e01		20 6e 89	jsr $896e			jsr 	LetCommand
.8e04		80 dc		bra $8de2			bra 	_CRMainLoop
.8e06						_CRNotVariable:
.8e06		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8e08		f0 f7		beq $8e01			beq 	_CRGoLet
.8e0a		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8e0c		f0 f3		beq $8e01			beq 	_CRGoLet
.8e0e		c9 21		cmp #$21			cmp 	#KWD_PLING
.8e10		f0 ef		beq $8e01			beq 	_CRGoLet
.8e12		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8e14		f0 09		beq $8e1f			beq 	_CRGoRem
.8e16		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8e18		d0 0b		bne $8e25			bne 	_CRSyntaxError
.8e1a		20 9a 82	jsr $829a			jsr 	LabelHere
.8e1d		80 c3		bra $8de2			bra 	_CRMainLoop
.8e1f						_CRGoRem:
.8e1f		c8		iny				iny
.8e20		20 3b 8d	jsr $8d3b			jsr 	RemCommand
.8e23		80 bd		bra $8de2			bra 	_CRMainLoop
.8e25						_CRSyntaxError:
.8e25		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
.8e28						_CRCallVector0:
.8e28		7c c6 8e	jmp ($8ec6,x)			jmp 	(VectorSet0,x)
.8e2b						_CRBreak:
.8e2b		a9 01		lda #$01		lda	#1
.8e2d		4c d7 91	jmp $91d7		jmp	ErrorHandler
.8e30						CRNoProgram:
.8e30		4c 04 87	jmp $8704			jmp 	EndCommand
.8e33						Shift1Command:
.8e33		b1 30		lda ($30),y			lda 	(codePtr),y
.8e35		c8		iny				iny
.8e36		0a		asl a				asl 	a
.8e37		aa		tax				tax
.8e38		7c 7a 8f	jmp ($8f7a,x)			jmp 	(VectorSet1,x)
.8e3b						Shift2Command:
.8e3b		b1 30		lda ($30),y			lda 	(codePtr),y
.8e3d		c8		iny				iny
.8e3e		0a		asl a				asl 	a
.8e3f		aa		tax				tax
.8e40		7c b6 8f	jmp ($8fb6,x)			jmp 	(VectorSet2,x)
.8e43						Unused1:
.8e43						Unused2:
.8e43						Unused3:
.8e43						Unused4:
.8e43		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
>8e46								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8e46						VectorSetPunc:
>8e46		8f 94					.word	ShiftLeft                        ; $00 <<
>8e48		7a 92					.word	BinaryCompareLessEqual           ; $01 <=
>8e4a		70 92					.word	BinaryCompareNotEqual            ; $02 <>
>8e4c		a0 a2					.word	SyntaxError                      ; $03 !!3
>8e4e		a0 a2					.word	SyntaxError                      ; $04 ><
>8e50		84 92					.word	BinaryCompareGreaterEqual        ; $05 >=
>8e52		92 94					.word	ShiftRight                       ; $06 >>
>8e54		a0 a2					.word	SyntaxError                      ; $07 !!7
>8e56		a0 a2					.word	SyntaxError                      ; $08 !!8
>8e58		a0 a2					.word	SyntaxError                      ; $09 !!9
>8e5a		a0 a2					.word	SyntaxError                      ; $0a !!10
>8e5c		a0 a2					.word	SyntaxError                      ; $0b !!11
>8e5e		a0 a2					.word	SyntaxError                      ; $0c !!12
>8e60		a0 a2					.word	SyntaxError                      ; $0d !!13
>8e62		a0 a2					.word	SyntaxError                      ; $0e !!14
>8e64		a0 a2					.word	SyntaxError                      ; $0f !!15
>8e66		a0 a2					.word	SyntaxError                      ; $10 @
>8e68		a0 a2					.word	SyntaxError                      ; $11 !!17
>8e6a		a0 a2					.word	SyntaxError                      ; $12 !!18
>8e6c		a0 a2					.word	SyntaxError                      ; $13 [
>8e6e		3b 93					.word	IntegerDivide                    ; $14 \
>8e70		a0 a2					.word	SyntaxError                      ; $15 ]
>8e72		cd 95					.word	EorInteger                       ; $16 ^
>8e74		a0 a2					.word	SyntaxError                      ; $17 _
>8e76		a0 a2					.word	SyntaxError                      ; $18 `
>8e78		a0 a2					.word	SyntaxError                      ; $19 !!25
>8e7a		a0 a2					.word	SyntaxError                      ; $1a !!26
>8e7c		a0 a2					.word	SyntaxError                      ; $1b {
>8e7e		98 95					.word	OraInteger                       ; $1c |
>8e80		a0 a2					.word	SyntaxError                      ; $1d }
>8e82		a0 a2					.word	SyntaxError                      ; $1e ~
>8e84		a0 a2					.word	SyntaxError                      ; $1f [7m<7F>[m
>8e86		a0 a2					.word	SyntaxError                      ; $20
>8e88		02 96					.word	WordIndirect                     ; $21 !
>8e8a		a0 a2					.word	SyntaxError                      ; $22 "
>8e8c		a0 a2					.word	SyntaxError                      ; $23 #
>8e8e		a0 a2					.word	SyntaxError                      ; $24 $
>8e90		7c 93					.word	IntegerModulus                   ; $25 %
>8e92		63 95					.word	AndInteger                       ; $26 &
>8e94		a0 a2					.word	SyntaxError                      ; $27 '
>8e96		a0 a2					.word	SyntaxError                      ; $28 (
>8e98		a0 a2					.word	SyntaxError                      ; $29 )
>8e9a		ea 93					.word	MulInteger                       ; $2a *
>8e9c		05 95					.word	AddInteger                       ; $2b +
>8e9e		a0 a2					.word	SyntaxError                      ; $2c ,
>8ea0		3e 95					.word	SubInteger                       ; $2d -
>8ea2		a0 a2					.word	SyntaxError                      ; $2e .
>8ea4		bc 97					.word	FDivideCommand                   ; $2f /
>8ea6		a0 a2					.word	SyntaxError                      ; $30 0
>8ea8		a0 a2					.word	SyntaxError                      ; $31 1
>8eaa		a0 a2					.word	SyntaxError                      ; $32 2
>8eac		a0 a2					.word	SyntaxError                      ; $33 3
>8eae		a0 a2					.word	SyntaxError                      ; $34 4
>8eb0		a0 a2					.word	SyntaxError                      ; $35 5
>8eb2		a0 a2					.word	SyntaxError                      ; $36 6
>8eb4		a0 a2					.word	SyntaxError                      ; $37 7
>8eb6		a0 a2					.word	SyntaxError                      ; $38 8
>8eb8		a0 a2					.word	SyntaxError                      ; $39 9
>8eba		a0 a2					.word	SyntaxError                      ; $3a :
>8ebc		a0 a2					.word	SyntaxError                      ; $3b ;
>8ebe		5c 92					.word	BinaryCompareLess                ; $3c <
>8ec0		52 92					.word	BinaryCompareEqual               ; $3d =
>8ec2		66 92					.word	BinaryCompareGreater             ; $3e >
>8ec4		24 96					.word	ByteIndirect                     ; $3f ?
.8ec6						VectorSet0:
>8ec6		9c 8d					.word	EOLCommand                       ; $80 !0:EOF
>8ec8		33 8e					.word	Shift1Command                    ; $81 !1:SH1
>8eca		3b 8e					.word	Shift2Command                    ; $82 !2:SH2
>8ecc		a6 9c					.word	AbsUnary                         ; $83 ABS(
>8ece		b4 9c					.word	AllocUnary                       ; $84 ALLOC(
>8ed0		24 9d					.word	AscUnary                         ; $85 ASC(
>8ed2		08 9f					.word	ChrUnary                         ; $86 CHR$(
>8ed4		23 a7					.word	UnaryEvent                       ; $87 EVENT(
>8ed6		4e 92					.word	UnaryFalse                       ; $88 FALSE
>8ed8		31 9d					.word	FracUnary                        ; $89 FRAC(
>8eda		a0 a2					.word	SyntaxError                      ; $8a GETDATE$(
>8edc		a0 a2					.word	SyntaxError                      ; $8b GETTIME$(
>8ede		ad a6					.word	UnaryHit                         ; $8c HIT(
>8ee0		46 9d					.word	IntUnary                         ; $8d INT(
>8ee2		c7 9e					.word	IsValUnary                       ; $8e ISVAL(
>8ee4		a7 a7					.word	UnaryJoyB                        ; $8f JOYB(
>8ee6		80 a7					.word	UnaryJoyX                        ; $90 JOYX(
>8ee8		83 a7					.word	UnaryJoyY                        ; $91 JOYY(
>8eea		db 9f					.word	Unary_Left                       ; $92 LEFT$(
>8eec		57 9d					.word	LenUnary                         ; $93 LEN(
>8eee		75 9d					.word	Unary_Max                        ; $94 MAX(
>8ef0		fd 9f					.word	Unary_Mid                        ; $95 MID$(
>8ef2		71 9d					.word	Unary_Min                        ; $96 MIN(
>8ef4		c0 9d					.word	Unary_Not                        ; $97 NOT(
>8ef6		d3 9d					.word	PeekByteUnary                    ; $98 PEEK(
>8ef8		df 9d					.word	PeekDUnary                       ; $99 PEEKD(
>8efa		db 9d					.word	PeekLUnary                       ; $9a PEEKL(
>8efc		d7 9d					.word	PeekWUnary                       ; $9b PEEKW(
>8efe		5e b1					.word	UnaryPlaying                     ; $9c PLAYING(
>8f00		0c 9e					.word	Unary_Random                     ; $9d RANDOM(
>8f02		e8 9f					.word	Unary_Right                      ; $9e RIGHT$(
>8f04		29 9e					.word	Unary_Rnd                        ; $9f RND(
>8f06		9f 9e					.word	SgnUnary                         ; $a0 SGN(
>8f08		1a 9f					.word	SpcUnary                         ; $a1 SPC(
>8f0a		35 9f					.word	Unary_Str                        ; $a2 STR$(
>8f0c		b9 a7					.word	UnaryTimer                       ; $a3 TIMER(
>8f0e		43 92					.word	UnaryTrue                        ; $a4 TRUE
>8f10		bd 9e					.word	ValUnary                         ; $a5 VAL(
>8f12		07 87					.word	ForCommand                       ; $a6 FOR
>8f14		4a 88					.word	IfCommand                        ; $a7 IF
>8f16		43 8e					.word	Unused1                          ; $a8 PROC
>8f18		48 8d					.word	Command_REPEAT                   ; $a9 REPEAT
>8f1a		8f 91					.word	Command_WHILE                    ; $aa WHILE
>8f1c		73 88					.word	EndIf                            ; $ab ENDIF
>8f1e		d0 8c					.word	Command_ENDPROC                  ; $ac ENDPROC
>8f20		b9 87					.word	NextCommand                      ; $ad NEXT
>8f22		43 8e					.word	Unused4                          ; $ae THEN
>8f24		51 8d					.word	Command_UNTIL                    ; $af UNTIL
>8f26		b0 91					.word	Command_WEND                     ; $b0 WEND
>8f28		a0 a2					.word	SyntaxError                      ; $b1 BY
>8f2a		27 85					.word	CallCommand                      ; $b2 CALL
>8f2c		61 a4					.word	CircleCommand                    ; $b3 CIRCLE
>8f2e		5c 85					.word	ClearCommand                     ; $b4 CLEAR
>8f30		b4 85					.word	ClearScreen                      ; $b5 CLS
>8f32		a0 a2					.word	SyntaxError                      ; $b6 COLOR
>8f34		a0 a2					.word	SyntaxError                      ; $b7 COLOUR
>8f36		79 88					.word	Command_CPrint                   ; $b8 CPRINT
>8f38		bc 85					.word	Command_Data                     ; $b9 DATA
>8f3a		c4 85					.word	DimCommand                       ; $ba DIM
>8f3c		43 8e					.word	Unused3                          ; $bb DOWNTO
>8f3e		6c 88					.word	ElseCode                         ; $bc ELSE
>8f40		a0 a2					.word	SyntaxError                      ; $bd FROM
>8f42		80 a6					.word	GfxCommand                       ; $be GFX
>8f44		12 88					.word	Command_GOSUB                    ; $bf GOSUB
>8f46		30 88					.word	GotoCommand                      ; $c0 GOTO
>8f48		a0 a2					.word	SyntaxError                      ; $c1 HERE
>8f4a		8a a4					.word	ImageCommand                     ; $c2 IMAGE
>8f4c		74 88					.word	Command_Input                    ; $c3 INPUT
>8f4e		6e 89					.word	LetCommand                       ; $c4 LET
>8f50		dc a4					.word	LineCommand                      ; $c5 LINE
>8f52		64 8b					.word	Command_LOCAL                    ; $c6 LOCAL
>8f54		a0 a2					.word	SyntaxError                      ; $c7 OFF
>8f56		a0 a2					.word	SyntaxError                      ; $c8 ON
>8f58		a0 a2					.word	SyntaxError                      ; $c9 OUTLINE
>8f5a		d1 a6					.word	PaletteCommand                   ; $ca PALETTE
>8f5c		d5 a4					.word	PlotCommand                      ; $cb PLOT
>8f5e		35 8c					.word	PokeBCommand                     ; $cc POKE
>8f60		41 8c					.word	PokeDCommand                     ; $cd POKED
>8f62		3d 8c					.word	PokeLCommand                     ; $ce POKEL
>8f64		39 8c					.word	PokeWCommand                     ; $cf POKEW
>8f66		80 88					.word	Command_Print                    ; $d0 PRINT
>8f68		de 8c					.word	Command_Read                     ; $d1 READ
>8f6a		5d a4					.word	RectangleCommand                 ; $d2 RECT
>8f6c		3b 8d					.word	RemCommand                       ; $d3 REM
>8f6e		22 88					.word	Command_RETURN                   ; $d4 RETURN
>8f70		a0 a2					.word	SyntaxError                      ; $d5 SOLID
>8f72		7a b1					.word	SoundCommand                     ; $d6 SOUND
>8f74		6c a4					.word	SpriteCommand                    ; $d7 SPRITE
>8f76		a6 a4					.word	TextCommand                      ; $d8 TEXT
>8f78		43 8e					.word	Unused2                          ; $d9 TO
.8f7a						VectorSet1:
>8f7a		a0 a2					.word	SyntaxError                      ; $80 !0:EOF
>8f7c		a0 a2					.word	SyntaxError                      ; $81 !1:SH1
>8f7e		a0 a2					.word	SyntaxError                      ; $82 !2:SH2
>8f80		5d 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8f82		79 84					.word	AssertCommand                    ; $84 ASSERT
>8f84		20 a6					.word	BitmapCtrl                       ; $85 BITMAP
>8f86		89 84					.word	Command_BLoad                    ; $86 BLOAD
>8f88		a0 a2					.word	SyntaxError                      ; $87 BSAVE
>8f8a		81 86					.word	Command_Dir                      ; $88 DIR
>8f8c		fd 86					.word	Command_Drive                    ; $89 DRIVE
>8f8e		04 87					.word	EndCommand                       ; $8a END
>8f90		32 b1					.word	Explode                          ; $8b EXPLODE
>8f92		a0 a2					.word	SyntaxError                      ; $8c GO
>8f94		a0 a2					.word	SyntaxError                      ; $8d HIMEM
>8f96		be 89					.word	Command_List                     ; $8e LIST
>8f98		c4 8a					.word	Command_Load                     ; $8f LOAD
>8f9a		25 8c					.word	NewCommand                       ; $90 NEW
>8f9c		0e b1					.word	PingCommand                      ; $91 PING
>8f9e		6a 8d					.word	Command_Restore                  ; $92 RESTORE
>8fa0		a9 8d					.word	CommandRUN                       ; $93 RUN
>8fa2		3e 90					.word	Command_Save                     ; $94 SAVE
>8fa4		a0 a2					.word	SyntaxError                      ; $95 SETDATE
>8fa6		a0 a2					.word	SyntaxError                      ; $96 SETTIME
>8fa8		26 b1					.word	ShootCommand                     ; $97 SHOOT
>8faa		65 a6					.word	SpritesCtrl                      ; $98 SPRITES
>8fac		c2 90					.word	StopCommand                      ; $99 STOP
>8fae		39 b3					.word	Command_VERIFY                   ; $9a VERIFY
>8fb0		1a a7					.word	XGoCommand                       ; $9b XGO
>8fb2		11 a7					.word	XLoadCommand                     ; $9c XLOAD
>8fb4		1a b1					.word	ZapCommand                       ; $9d ZAP
.8fb6						VectorSet2:
>8fb6		a0 a2					.word	SyntaxError                      ; $80 !0:EOF
>8fb8		a0 a2					.word	SyntaxError                      ; $81 !1:SH1
>8fba		a0 a2					.word	SyntaxError                      ; $82 !2:SH2
>8fbc		5f a1					.word	Assemble_adc                     ; $83 ADC
>8fbe		57 a1					.word	Assemble_and                     ; $84 AND
>8fc0		73 a1					.word	Assemble_asl                     ; $85 ASL
>8fc2		dd a1					.word	Assemble_bcc                     ; $86 BCC
>8fc4		e1 a1					.word	Assemble_bcs                     ; $87 BCS
>8fc6		e9 a1					.word	Assemble_beq                     ; $88 BEQ
>8fc8		a0 a1					.word	Assemble_bit                     ; $89 BIT
>8fca		d1 a1					.word	Assemble_bmi                     ; $8a BMI
>8fcc		e5 a1					.word	Assemble_bne                     ; $8b BNE
>8fce		cd a1					.word	Assemble_bpl                     ; $8c BPL
>8fd0		ed a1					.word	Assemble_bra                     ; $8d BRA
>8fd2		f1 a1					.word	Assemble_brk                     ; $8e BRK
>8fd4		d5 a1					.word	Assemble_bvc                     ; $8f BVC
>8fd6		d9 a1					.word	Assemble_bvs                     ; $90 BVS
>8fd8		f9 a1					.word	Assemble_clc                     ; $91 CLC
>8fda		4d a2					.word	Assemble_cld                     ; $92 CLD
>8fdc		0d a2					.word	Assemble_cli                     ; $93 CLI
>8fde		3d a2					.word	Assemble_clv                     ; $94 CLV
>8fe0		6b a1					.word	Assemble_cmp                     ; $95 CMP
>8fe2		b4 a1					.word	Assemble_cpx                     ; $96 CPX
>8fe4		af a1					.word	Assemble_cpy                     ; $97 CPY
>8fe6		91 a1					.word	Assemble_dec                     ; $98 DEC
>8fe8		49 a2					.word	Assemble_dex                     ; $99 DEX
>8fea		25 a2					.word	Assemble_dey                     ; $9a DEY
>8fec		5b a1					.word	Assemble_eor                     ; $9b EOR
>8fee		96 a1					.word	Assemble_inc                     ; $9c INC
>8ff0		59 a2					.word	Assemble_inx                     ; $9d INX
>8ff2		45 a2					.word	Assemble_iny                     ; $9e INY
>8ff4		c8 a1					.word	Assemble_jmp                     ; $9f JMP
>8ff6		c3 a1					.word	Assemble_jsr                     ; $a0 JSR
>8ff8		67 a1					.word	Assemble_lda                     ; $a1 LDA
>8ffa		8c a1					.word	Assemble_ldx                     ; $a2 LDX
>8ffc		aa a1					.word	Assemble_ldy                     ; $a3 LDY
>8ffe		7d a1					.word	Assemble_lsr                     ; $a4 LSR
>9000		5d a2					.word	Assemble_nop                     ; $a5 NOP
>9002		53 a1					.word	Assemble_ora                     ; $a6 ORA
>9004		09 a2					.word	Assemble_pha                     ; $a7 PHA
>9006		f5 a1					.word	Assemble_php                     ; $a8 PHP
>9008		51 a2					.word	Assemble_phx                     ; $a9 PHX
>900a		11 a2					.word	Assemble_phy                     ; $aa PHY
>900c		19 a2					.word	Assemble_pla                     ; $ab PLA
>900e		fd a1					.word	Assemble_plp                     ; $ac PLP
>9010		65 a2					.word	Assemble_plx                     ; $ad PLX
>9012		21 a2					.word	Assemble_ply                     ; $ae PLY
>9014		78 a1					.word	Assemble_rol                     ; $af ROL
>9016		82 a1					.word	Assemble_ror                     ; $b0 ROR
>9018		05 a2					.word	Assemble_rti                     ; $b1 RTI
>901a		15 a2					.word	Assemble_rts                     ; $b2 RTS
>901c		6f a1					.word	Assemble_sbc                     ; $b3 SBC
>901e		01 a2					.word	Assemble_sec                     ; $b4 SEC
>9020		61 a2					.word	Assemble_sed                     ; $b5 SED
>9022		1d a2					.word	Assemble_sei                     ; $b6 SEI
>9024		63 a1					.word	Assemble_sta                     ; $b7 STA
>9026		55 a2					.word	Assemble_stp                     ; $b8 STP
>9028		87 a1					.word	Assemble_stx                     ; $b9 STX
>902a		a5 a1					.word	Assemble_sty                     ; $ba STY
>902c		9b a1					.word	Assemble_stz                     ; $bb STZ
>902e		39 a2					.word	Assemble_tax                     ; $bc TAX
>9030		35 a2					.word	Assemble_tay                     ; $bd TAY
>9032		be a1					.word	Assemble_trb                     ; $be TRB
>9034		b9 a1					.word	Assemble_tsb                     ; $bf TSB
>9036		41 a2					.word	Assemble_tsx                     ; $c0 TSX
>9038		29 a2					.word	Assemble_txa                     ; $c1 TXA
>903a		31 a2					.word	Assemble_txs                     ; $c2 TXS
>903c		2d a2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.903e						Command_Save:
.903e		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; file name to load
.9041		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9043		a5 36		lda $36				lda 	zTemp0
.9045		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.9048		b0 2f		bcs $9079			bcs 	CSErrorHandler 				; error, so fail.
.904a		8d 61 06	sta $0661			sta 	CurrentFileStream 			; save the reading stream.
.904d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.904f		85 30		sta $30				sta 	codePtr
.9051		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9053		85 31		sta $31				sta 	codePtr+1
.9055						_CSLoop:
.9055		b2 30		lda ($30)			lda 	(codePtr)
.9057		f0 17		beq $9070			beq 	_CSExit
.9059		20 9d 90	jsr $909d			jsr 	CSGetCleanLine
.905c		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.905e		85 36		sta $36				sta 	zTemp0
.9060		20 7c 90	jsr $907c			jsr 	CLWriteByteBlock 			; write the block out.
.9063		18		clc				clc
.9064		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9066		65 30		adc $30				adc 	codePtr
.9068		85 30		sta $30				sta 	codePtr
.906a		90 02		bcc $906e			bcc 	_CREExit
.906c		e6 31		inc $31				inc 	codePtr+1 					; carry
.906e						_CREExit:
.906e		80 e5		bra $9055			bra 	_CSLoop
.9070						_CSExit:
.9070		ad 61 06	lda $0661			lda 	CurrentFileStream 			; close file
.9073		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.9076		4c f7 8a	jmp $8af7			jmp 	CLComplete 					; display complete message.
.9079						CSErrorHandler:
.9079		4c 14 8b	jmp $8b14			jmp 	CLErrorHandler
.907c						CLWriteByteBlock:
.907c		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.907e		f0 1c		beq $909c			beq 	_CLWBBExit					; if so, exit
.9080		ad 61 06	lda $0661			lda 	CurrentFileStream 			; stream to write, count in X
.9083		20 71 80	jsr $8071			jsr 	KNLWriteBlock 				; call one write attempt
.9086		b0 f1		bcs $9079			bcs 	CSErrorHandler 				; error occurred
.9088		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.908a		8a		txa				txa 								; subtract bytes written from X, total count.
.908b		38		sec				sec
.908c		e5 38		sbc $38				sbc 	zTemp1
.908e		aa		tax				tax
.908f		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.9090		a5 36		lda $36				lda 	zTemp0
.9092		65 38		adc $38				adc 	zTemp1
.9094		85 36		sta $36				sta 	zTemp0
.9096		90 e4		bcc $907c			bcc 	CLWriteByteBlock
.9098		e6 37		inc $37				inc 	zTemp0+1
.909a		80 e0		bra $907c			bra 	CLWriteByteBlock 			; and retry write out.
.909c						_CLWBBExit:
.909c		60		rts				rts
.909d						CSGetCleanLine:
.909d		a9 00		lda #$00			lda 	#0 							; no indent.
.909f		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.90a2		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.90a4		a0 00		ldy #$00			ldy 	#0
.90a6						_CSClean:
.90a6		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.90a9		f0 09		beq $90b4			beq 	_CSDoneClean
.90ab		30 04		bmi $90b1			bmi 	_CSIgnoreCharacter
.90ad		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.90b0		e8		inx				inx
.90b1						_CSIgnoreCharacter:
.90b1		c8		iny				iny
.90b2		80 f2		bra $90a6			bra 	_CSClean
.90b4						_CSDoneClean:
.90b4		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.90b6		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.90b9		e8		inx				inx
.90ba		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.90bd		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.90bf		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.90c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.90c2						StopCommand:
.90c2		a9 08		lda #$08		lda	#8
.90c4		4c d7 91	jmp $91d7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.90c7						ProcedureScan:
.90c7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90c9		85 30		sta $30				sta 	codePtr
.90cb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90cd		85 31		sta $31				sta 	codePtr+1
.90cf						_PSLoop:
.90cf		b2 30		lda ($30)			lda 	(codePtr)
.90d1		f0 42		beq $9115			beq 	_PSExit
.90d3		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.90d5		b1 30		lda ($30),y			lda 	(codePtr),y
.90d7		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.90d9		d0 2d		bne $9108			bne 	_PSNext
.90db		c8		iny				iny 								; get the address of the record to zTemp0 and
.90dc		b1 30		lda ($30),y			lda 	(codePtr),y
.90de		29 c0		and #$c0			and 	#$C0
.90e0		c9 40		cmp #$40			cmp 	#$40
.90e2		d0 32		bne $9116			bne 	_PSSyntax
.90e4		b1 30		lda ($30),y			lda 	(codePtr),y
.90e6		18		clc				clc
.90e7		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.90e9		85 37		sta $37				sta 	zTemp0+1
.90eb		c8		iny				iny 								; LSB
.90ec		b1 30		lda ($30),y			lda 	(codePtr),y
.90ee		85 36		sta $36				sta 	zTemp0
.90f0		c8		iny				iny 								; character after variable call.
.90f1		98		tya				tya 								; save Y offset at +7 (exponent slot)
.90f2		a0 07		ldy #$07			ldy 	#7
.90f4		91 36		sta ($36),y			sta 	(zTemp0),y
.90f6		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.90f8		a0 02		ldy #$02			ldy 	#2
.90fa		91 36		sta ($36),y			sta 	(zTemp0),y
.90fc		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.90fe						_PSCopy:
.90fe		b5 30		lda $30,x			lda 	safePtr,x
.9100		c8		iny				iny
.9101		91 36		sta ($36),y			sta 	(zTemp0),y
.9103		e8		inx				inx
.9104		e0 04		cpx #$04			cpx 	#4
.9106		d0 f6		bne $90fe			bne 	_PSCopy
.9108						_PSNext:
.9108		18		clc				clc
.9109		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.910b		65 30		adc $30				adc 	codePtr
.910d		85 30		sta $30				sta 	codePtr
.910f		90 02		bcc $9113			bcc 	_CREExit
.9111		e6 31		inc $31				inc 	codePtr+1 					; carry
.9113						_CREExit:
.9113		80 ba		bra $90cf			bra 	_PSLoop
.9115						_PSExit:
.9115		60		rts				rts
.9116						_PSSyntax:
.9116		4c a0 a2	jmp $a2a0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9119						ScanForward:
.9119		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.911b		86 37		stx $37				stx 	zTemp0+1
.911d		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.911f						_ScanLoop:
.911f		b1 30		lda ($30),y			lda 	(codePtr),y
.9121		c8		iny				iny
.9122		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9124		d0 0e		bne $9134			bne 	_ScanGoNext
.9126		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9128		f0 04		beq $912e			beq 	_ScanMatch
.912a		c5 37		cmp $37				cmp 	zTemp0+1
.912c		d0 06		bne $9134			bne 	_ScanGoNext
.912e						_ScanMatch:
.912e		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9130		d0 01		bne $9133			bne 	_ScanNotEndEOL
.9132		88		dey				dey
.9133						_ScanNotEndEOL:
.9133		60		rts				rts
.9134						_ScanGoNext:
.9134		20 39 91	jsr $9139			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9137		80 e6		bra $911f			bra 	_ScanLoop
.9139						ScanForwardOne:
.9139		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.913b		90 3e		bcc $917b			bcc 	_SFWExit
.913d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.913f		90 18		bcc $9159			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9141		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9143		b0 2f		bcs $9174			bcs 	_ScanSkipData
.9145		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9147		90 32		bcc $917b			bcc 	_SFWExit 					; if not, ordinary keywords.
.9149		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.914b		b0 2e		bcs $917b			bcs 	_SFWExit
.914d		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.914f		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9151		b0 28		bcs $917b			bcs 	_SFWExit
.9153		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9155		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9157		80 22		bra $917b			bra 	_SFWExit
.9159						_ScanSkipOne:
.9159		c8		iny				iny 								; consume the extra one.
.915a		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.915c		d0 1d		bne $917b			bne 	_SFWExit
.915e		18		clc				clc
.915f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9161		65 30		adc $30				adc 	codePtr
.9163		85 30		sta $30				sta 	codePtr
.9165		90 02		bcc $9169			bcc 	_CREExit
.9167		e6 31		inc $31				inc 	codePtr+1 					; carry
.9169						_CREExit:
.9169		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.916b		b2 30		lda ($30)			lda 	(codePtr)
.916d		d0 0c		bne $917b			bne 	_SFWExit 					; if not zero, more to scan
.916f		a9 13		lda #$13		lda	#19
.9171		4c d7 91	jmp $91d7		jmp	ErrorHandler
.9174						_ScanSkipData:
.9174		88		dey				dey 								; point at data token
.9175		c8		iny				iny 								; point to offset
.9176		98		tya				tya 								; A = offset position
.9177		38		sec				sec 								; add size +1 hence SEC
.9178		71 30		adc ($30),y			adc 	(codePtr),y
.917a		a8		tay				tay 								; make current position.
.917b						_SFWExit:
.917b		60		rts				rts
.917c						ScanGetCurrentLineStep:
.917c		64 38		stz $38				stz 	zTemp1
.917e		a0 03		ldy #$03			ldy 	#3
.9180						_SGCLSLoop:
.9180		b1 30		lda ($30),y			lda 	(codePtr),y
.9182		c8		iny				iny
.9183		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9185		f0 05		beq $918c			beq 	_SGCLSExit
.9187		20 39 91	jsr $9139			jsr 	ScanForwardOne
.918a		80 f4		bra $9180			bra 	_SGCLSLoop
.918c						_SGCLSExit:
.918c		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.918e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.918f						Command_WHILE:
.918f		5a		phy				phy 								; save position of the test
.9190		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9192		20 70 a0	jsr $a070			jsr 	EvaluateNumber
.9195		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; check if zero
.9198		f0 0e		beq $91a8			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.919a		98		tya				tya 								; position *after* test.
.919b		7a		ply				ply 								; restore position before test, at WHILE
.919c		88		dey				dey 								; so we execute the WHILE command again.
.919d		48		pha				pha 								; push after test on the stack
.919e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.91a0		20 01 b2	jsr $b201			jsr 	StackOpen
.91a3		20 46 b2	jsr $b246			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.91a6		7a		ply				ply 								; restore the position *after* the test
.91a7		60		rts				rts
.91a8						_WHExitLoop:
.91a8		68		pla				pla 								; throw post loop position
.91a9		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.91ab		aa		tax				tax
.91ac		20 19 91	jsr $9119			jsr 	ScanForward
.91af		60		rts				rts
.91b0						Command_WEND:
.91b0		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.91b2		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.91b4		20 2e b2	jsr $b22e			jsr 	StackCheckFrame
.91b7		20 57 b2	jsr $b257			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.91ba		20 20 b2	jsr $b220			jsr 	StackClose		 			; erase the frame
.91bd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.91be						CheckRightBracket:
.91be		b1 30		lda ($30),y			lda 	(codePtr),y
.91c0		c8		iny				iny
.91c1		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.91c3		d0 0f		bne $91d4			bne 	CNAFail
.91c5		60		rts				rts
.91c6						CheckComma:
.91c6		b1 30		lda ($30),y			lda 	(codePtr),y
.91c8		c8		iny				iny
.91c9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.91cb		d0 07		bne $91d4			bne 	CNAFail
.91cd		60		rts				rts
.91ce						CheckNextA:
.91ce		d1 30		cmp ($30),y			cmp 	(codePtr),y
.91d0		d0 02		bne $91d4			bne 	CNAFail
.91d2		c8		iny				iny 								; skip character
.91d3		60		rts				rts 								; and exit
.91d4						CNAFail:
.91d4		4c a0 a2	jmp $a2a0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.91d7						ErrorHandler:
.91d7		a8		tay				tay 								; find the error text
.91d8		f0 49		beq $9223			beq 	_EHEnd
.91da		a2 00		ldx #$00			ldx 	#0
.91dc		a9 b9		lda #$b9			lda 	#((ErrorText) & $FF)
.91de		85 36		sta $36				sta 	0+zTemp0
.91e0		a9 a2		lda #$a2			lda 	#((ErrorText) >> 8)
.91e2		85 37		sta $37				sta 	1+zTemp0
.91e4						_EHFind:
.91e4		88		dey				dey 								; keep looking through text
.91e5		f0 0e		beq $91f5			beq 	_EHFound
.91e7						_EHFindZero:
.91e7		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.91e9		e6 36		inc $36				inc 	zTemp0
.91eb		d0 02		bne $91ef			bne 	_EHFNoCarry
.91ed		e6 37		inc $37				inc 	zTemp0+1
.91ef						_EHFNoCarry:
.91ef		c9 00		cmp #$00			cmp 	#0
.91f1		d0 f4		bne $91e7			bne 	_EHFindZero
.91f3		80 ef		bra $91e4			bra 	_EHFind
.91f5						_EHFound:
.91f5		a5 36		lda $36				lda 	zTemp0 						; print message
.91f7		a6 37		ldx $37				ldx 	zTemp0+1
.91f9		20 30 92	jsr $9230			jsr 	PrintStringXA
.91fc		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.91fe		b1 30		lda ($30),y			lda 	(codePtr),y
.9200		d0 05		bne $9207			bne 	_EHAtMsg
.9202		c8		iny				iny
.9203		b1 30		lda ($30),y			lda 	(codePtr),y
.9205		f0 17		beq $921e			beq 	_EHCREnd
.9207						_EHAtMsg:
.9207		a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.9209		a9 26		lda #$26			lda 	#_AtMsg & $FF
.920b		20 30 92	jsr $9230			jsr 	PrintStringXA
.920e		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9210		b1 30		lda ($30),y			lda 	(codePtr),y
.9212		48		pha				pha
.9213		c8		iny				iny
.9214		b1 30		lda ($30),y			lda 	(codePtr),y
.9216		aa		tax				tax
.9217		68		pla				pla
.9218		20 46 96	jsr $9646			jsr 	ConvertInt16 				; convert XA to string
.921b		20 30 92	jsr $9230			jsr 	PrintStringXA 				; and print it.
.921e						_EHCREnd:
.921e		a9 0d		lda #$0d			lda 	#13 						; new line
.9220		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9223						_EHEnd:
.9223		4c 28 84	jmp $8428			jmp 	WarmStart
>9226		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>922e		20 00
.9230						PrintStringXA:
.9230		5a		phy				phy
.9231		86 37		stx $37				stx 	zTemp0+1
.9233		85 36		sta $36				sta 	zTemp0
.9235		a0 00		ldy #$00			ldy 	#0
.9237						_PSXALoop:
.9237		b1 36		lda ($36),y			lda 	(zTemp0),y
.9239		f0 06		beq $9241			beq 	_PSXAExit
.923b		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.923e		c8		iny				iny
.923f		80 f6		bra $9237			bra 	_PSXALoop
.9241						_PSXAExit:
.9241		7a		ply				ply
.9242		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9243						UnaryTrue:
.9243		fa		plx				plx
.9244						ReturnTrue:
.9244		a9 01		lda #$01			lda 	#1  						; set to 1
.9246		20 24 a1	jsr $a124			jsr 	NSMSetByte
.9249		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.924b		95 50		sta $50,x			sta 	NSStatus,x
.924d		60		rts				rts
.924e						UnaryFalse:
.924e		fa		plx				plx
.924f						ReturnFalse:
.924f		4c 22 a1	jmp $a122			jmp 	NSMSetZero 					; set it all to zero
.9252						BinaryCompareEqual:
.9252		fa		plx				plx
.9253		20 8e 92	jsr $928e			jsr 	CompareBaseCode
.9256		c9 00		cmp #$00			cmp 	#0
.9258		f0 ea		beq $9244			beq 	ReturnTrue
.925a		80 f3		bra $924f			bra 	ReturnFalse
.925c						BinaryCompareLess:
.925c		fa		plx				plx
.925d		20 8e 92	jsr $928e			jsr 	CompareBaseCode
.9260		c9 ff		cmp #$ff			cmp 	#$FF
.9262		f0 e0		beq $9244			beq 	ReturnTrue
.9264		80 e9		bra $924f			bra 	ReturnFalse
.9266						BinaryCompareGreater:
.9266		fa		plx				plx
.9267		20 8e 92	jsr $928e			jsr 	CompareBaseCode
.926a		c9 01		cmp #$01			cmp 	#1
.926c		f0 d6		beq $9244			beq 	ReturnTrue
.926e		80 df		bra $924f			bra 	ReturnFalse
.9270						BinaryCompareNotEqual:
.9270		fa		plx				plx
.9271		20 8e 92	jsr $928e			jsr 	CompareBaseCode
.9274		c9 00		cmp #$00			cmp 	#0
.9276		d0 cc		bne $9244			bne 	ReturnTrue
.9278		80 d5		bra $924f			bra 	ReturnFalse
.927a						BinaryCompareLessEqual:
.927a		fa		plx				plx
.927b		20 8e 92	jsr $928e			jsr 	CompareBaseCode
.927e		c9 01		cmp #$01			cmp 	#1
.9280		d0 c2		bne $9244			bne 	ReturnTrue
.9282		80 cb		bra $924f			bra 	ReturnFalse
.9284						BinaryCompareGreaterEqual:
.9284		fa		plx				plx
.9285		20 8e 92	jsr $928e			jsr 	CompareBaseCode
.9288		c9 ff		cmp #$ff			cmp 	#$FF
.928a		d0 b8		bne $9244			bne 	ReturnTrue
.928c		80 c1		bra $924f			bra 	ReturnFalse
.928e						CompareBaseCode:
.928e		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; make both values if references.
.9291		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9293		15 51		ora $51,x			ora 	NSStatus+1,x
.9295		29 10		and #$10			and 	#NSTString
.9297		d0 37		bne $92d0			bne 	_CBCString 					; if so do string code, which will check if both.
.9299		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.929b		15 79		ora $79,x			ora 	NSExponent+1,x
.929d		d0 34		bne $92d3			bne 	_CBCFloat
.929f		b5 50		lda $50,x			lda 	NSStatus,x
.92a1		15 51		ora $51,x			ora 	NSStatus+1,x
.92a3		29 08		and #$08			and 	#NSTFloat
.92a5		d0 2c		bne $92d3			bne 	_CBCFloat
.92a7		20 d6 92	jsr $92d6			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.92aa		e8		inx				inx
.92ab		20 d6 92	jsr $92d6			jsr 	CompareFixMinusZero
.92ae		ca		dex				dex
.92af		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.92b1		55 51		eor $51,x			eor 	NSStatus+1,x
.92b3		10 0a		bpl $92bf			bpl 	_CDCSameSign
.92b5		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.92b7		30 14		bmi $92cd			bmi 	_CBCLess 					; return $FF
.92b9						_CBCGreater:
.92b9		a9 01		lda #$01			lda 	#1
.92bb		60		rts				rts
.92bc						_CBCEqual:
.92bc		a9 00		lda #$00			lda 	#0
.92be		60		rts				rts
.92bf						_CDCSameSign:
.92bf		20 eb 94	jsr $94eb			jsr 	SubTopTwoStack 				; unsigned subtract
.92c2		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; or the mantissa together
.92c5		f0 f5		beq $92bc			beq 	_CBCEqual 					; -0 == 0
.92c7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.92c9		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.92cb		10 ec		bpl $92b9			bpl 	_CBCGreater
.92cd						_CBCLess:
.92cd		a9 ff		lda #$ff			lda 	#$FF
.92cf		60		rts				rts
.92d0						_CBCString:
.92d0		4c 5c 94	jmp $945c			jmp 	CompareStrings
.92d3						_CBCFloat:
.92d3		4c a6 97	jmp $97a6			jmp 	CompareFloat
.92d6						CompareFixMinusZero:
.92d6		20 44 a1	jsr $a144			jsr 	NSMIsZero
.92d9		d0 02		bne $92dd			bne 	_CFXMZNotZero
.92db		74 50		stz $50,x			stz 	NSStatus,x
.92dd						_CFXMZNotZero:
.92dd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.92de						StringConcat:
.92de		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.92e0		35 51		and $51,x			and 	NSStatus+1,x
.92e2		29 18		and #$18			and 	#NSBTypeMask
.92e4		c9 10		cmp #$10			cmp 	#NSTString
.92e6		d0 50		bne $9338			bne		_SCType
.92e8		64 38		stz $38				stz 	zTemp1 						; counting total length
.92ea		e8		inx				inx
.92eb		20 09 93	jsr $9309			jsr 	_SCSetupZ0 					; setup for second
.92ee		20 12 93	jsr $9312			jsr 	_SCLengthZ0 				; length for second
.92f1		ca		dex				dex
.92f2		20 09 93	jsr $9309			jsr 	_SCSetupZ0 					; setup for first
.92f5		20 12 93	jsr $9312			jsr 	_SCLengthZ0 				; length for first
.92f8		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.92fa		20 f1 b2	jsr $b2f1			jsr 	StringTempAllocate
.92fd		20 29 93	jsr $9329			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9300		e8		inx				inx
.9301		20 09 93	jsr $9309			jsr 	_SCSetupZ0 					; copy second out
.9304		20 29 93	jsr $9329			jsr 	_SCCopy
.9307		ca		dex				dex
.9308		60		rts				rts
.9309						_SCSetupZ0:
.9309		b5 58		lda $58,x			lda 	NSMantissa0,x
.930b		85 36		sta $36				sta 	zTemp0
.930d		b5 60		lda $60,x			lda 	NSMantissa1,x
.930f		85 37		sta $37				sta 	zTemp0+1
.9311		60		rts				rts
.9312						_SCLengthZ0:
.9312		5a		phy				phy
.9313		a0 00		ldy #$00			ldy 	#0
.9315						_SCLenLoop:
.9315		b1 36		lda ($36),y			lda 	(zTemp0),y
.9317		f0 0e		beq $9327			beq 	_SCLExit
.9319		c8		iny				iny
.931a		e6 38		inc $38				inc 	zTemp1
.931c		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.931e		c9 fd		cmp #$fd			cmp 	#253
.9320		d0 f3		bne $9315			bne		_SCLenLoop
.9322		a9 09		lda #$09		lda	#9
.9324		4c d7 91	jmp $91d7		jmp	ErrorHandler
.9327						_SCLExit:
.9327		7a		ply				ply
.9328		60		rts				rts
.9329						_SCCopy:
.9329		5a		phy				phy
.932a		a0 00		ldy #$00			ldy 	#0
.932c						_SCCopyLoop:
.932c		b1 36		lda ($36),y			lda 	(zTemp0),y
.932e		f0 06		beq $9336			beq 	_SCCExit
.9330		20 2a b3	jsr $b32a			jsr 	StringTempWrite
.9333		c8		iny				iny
.9334		80 f6		bra $932c			bra 	_SCCopyLoop
.9336						_SCCExit:
.9336		7a		ply				ply
.9337		60		rts				rts
.9338						_SCType:
.9338		4c aa a2	jmp $a2aa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.933b						IntegerDivide:
.933b		fa		plx				plx
.933c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.933e		15 51		ora $51,x			ora 	NSStatus+1,x
.9340		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9341		0a		asl a				asl 	a
.9342		10 05		bpl $9349			bpl 	_NotRef
.9344		48		pha				pha
.9345		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9348		68		pla				pla
.9349						_NotRef:
.9349		0a		asl a				asl 	a
.934a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.934c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.934e		15 79		ora $79,x			ora 	NSExponent+1,x
.9350		f0 03		beq $9355			beq 	_IntegerCode 				; if clear, then we have two integers
.9352		4c aa a2	jmp $a2aa			jmp 	TypeError 					; anything else, type mismatch.
.9355						_IntegerCode:
.9355		20 6f 93	jsr $936f			jsr 	CheckDivideZero 			; do div zero check
.9358		20 a1 93	jsr $93a1			jsr 	Int32Divide 				; do the division
.935b		20 52 94	jsr $9452			jsr 	CalculateSign 				; calculate result sign
.935e						NSMCopyPlusTwoToZero:
.935e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9360		95 58		sta $58,x			sta 	NSMantissa0,x
.9362		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9364		95 60		sta $60,x			sta 	NSMantissa1,x
.9366		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9368		95 68		sta $68,x			sta 	NSMantissa2,x
.936a		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.936c		95 70		sta $70,x			sta 	NSMantissa3,x
.936e		60		rts				rts
.936f						CheckDivideZero:
.936f		e8		inx				inx
.9370		20 44 a1	jsr $a144			jsr 	NSMIsZero
.9373		f0 02		beq $9377			beq 	_CDVError
.9375		ca		dex				dex
.9376		60		rts				rts
.9377						_CDVError:
.9377		a9 03		lda #$03		lda	#3
.9379		4c d7 91	jmp $91d7		jmp	ErrorHandler
.937c						IntegerModulus:
.937c		fa		plx				plx
.937d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.937f		15 51		ora $51,x			ora 	NSStatus+1,x
.9381		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9382		0a		asl a				asl 	a
.9383		10 05		bpl $938a			bpl 	_NotRef
.9385		48		pha				pha
.9386		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9389		68		pla				pla
.938a						_NotRef:
.938a		0a		asl a				asl 	a
.938b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.938d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.938f		15 79		ora $79,x			ora 	NSExponent+1,x
.9391		f0 03		beq $9396			beq 	_IntegerCode 				; if clear, then we have two integers
.9393		4c aa a2	jmp $a2aa			jmp 	TypeError 					; anything else, type mismatch.
.9396						_IntegerCode:
.9396						IntegerModulusNoCheck:
.9396		20 6f 93	jsr $936f			jsr 	CheckDivideZero 			; do div zero check
.9399		20 a1 93	jsr $93a1			jsr 	Int32Divide 				; do the division
.939c		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.939e		56 50		lsr $50,x			lsr 	NSStatus,x
.93a0		60		rts				rts
.93a1						Int32Divide:
.93a1		48		pha				pha 								; save AXY
.93a2		5a		phy				phy
.93a3		20 05 a1	jsr $a105			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.93a6		20 1e a1	jsr $a11e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.93a9		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.93ab						_I32DivideLoop:
.93ab		e8		inx				inx
.93ac		e8		inx				inx
.93ad		20 31 a1	jsr $a131			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.93b0		ca		dex				dex
.93b1		ca		dex				dex
.93b2		20 32 a1	jsr $a132			jsr 	NSMRotateLeft
.93b5		20 e0 93	jsr $93e0			jsr 	DivideCheckSubtract 		; check if subtract possible
.93b8		90 02		bcc $93bc			bcc 	_I32DivideNoCarryIn
.93ba		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.93bc						_I32DivideNoCarryIn:
.93bc		88		dey				dey 								; loop round till division completed.
.93bd		d0 ec		bne $93ab			bne 	_I32DivideLoop
.93bf		7a		ply				ply 								; restore AXY and exit
.93c0		68		pla				pla
.93c1		60		rts				rts
.93c2						Int32ShiftDivide:
.93c2		48		pha				pha 								; save AY
.93c3		5a		phy				phy
.93c4		e8		inx				inx 								; clear S[X+2]
.93c5		e8		inx				inx
.93c6		20 22 a1	jsr $a122			jsr 	NSMSetZero
.93c9		ca		dex				dex
.93ca		ca		dex				dex
.93cb		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.93cd						_I32SDLoop:
.93cd		20 e0 93	jsr $93e0			jsr 	DivideCheckSubtract 		; check if subtract possible
.93d0		e8		inx				inx
.93d1		e8		inx				inx
.93d2		20 32 a1	jsr $a132			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.93d5		ca		dex				dex
.93d6		ca		dex				dex
.93d7		20 32 a1	jsr $a132			jsr 	NSMRotateLeft
.93da		88		dey				dey 	 							; do 31 times
.93db		d0 f0		bne $93cd			bne 	_I32SDLoop
.93dd		7a		ply				ply 								; restore AY and exit
.93de		68		pla				pla
.93df		60		rts				rts
.93e0						DivideCheckSubtract:
.93e0		20 eb 94	jsr $94eb			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.93e3		b0 04		bcs $93e9			bcs 	_DCSExit 					; if carry set, then could do, exit
.93e5		20 d1 94	jsr $94d1			jsr 	AddTopTwoStack 				; add it back in
.93e8		18		clc				clc 								; and return False
.93e9						_DCSExit:
.93e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.93ea						MulInteger:
.93ea		fa		plx				plx
.93eb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93ed		15 51		ora $51,x			ora 	NSStatus+1,x
.93ef		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93f0		0a		asl a				asl 	a
.93f1		10 05		bpl $93f8			bpl 	_NotRef
.93f3		48		pha				pha
.93f4		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93f7		68		pla				pla
.93f8						_NotRef:
.93f8		0a		asl a				asl 	a 							; put MSB of type into A:7
.93f9		30 09		bmi $9404			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.93fb		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93fd		15 79		ora $79,x			ora 	NSExponent+1,x
.93ff		f0 06		beq $9407			beq 	_IntegerCode 				; if clear, then we have two integers
.9401		4c 68 98	jmp $9868			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9404						_StringData:
.9404		4c b4 a2	jmp $a2b4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9407						_IntegerCode:
.9407		20 14 94	jsr $9414			jsr 	MultiplyShort
.940a		c9 00		cmp #$00			cmp 	#0
.940c		f0 05		beq $9413			beq 	_MIExit
.940e		a9 04		lda #$04		lda	#4
.9410		4c d7 91	jmp $91d7		jmp	ErrorHandler
.9413						_MIExit:
.9413		60		rts				rts
.9414						MultiplyShort:
.9414		5a		phy				phy 								; save Y
.9415		20 05 a1	jsr $a105			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9418		20 1e a1	jsr $a11e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.941b		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.941d						_I32MLoop:
.941d		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.941f		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9421		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9423		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9425		f0 25		beq $944c			beq 	_I32MExit 					; exit if zero
.9427		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9429		29 01		and #$01			and 	#1
.942b		f0 0d		beq $943a			beq 	_I32MNoAdd
.942d		20 d1 94	jsr $94d1			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9430		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9432		10 06		bpl $943a			bpl 	_I32MNoAdd
.9434						_I32ShiftRight:
.9434		20 3b a1	jsr $a13b			jsr 	NSMShiftRight 				; shift S[X] right
.9437		c8		iny				iny 								; increment shift count
.9438		80 09		bra $9443			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.943a						_I32MNoAdd:
.943a		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.943c		70 f6		bvs $9434			bvs 	_I32ShiftRight 				; instead.
.943e		e8		inx				inx
.943f		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9442		ca		dex				dex
.9443						_I32MShiftUpper:
.9443		e8		inx				inx 								; shift S[X+2] right
.9444		e8		inx				inx
.9445		20 3b a1	jsr $a13b			jsr 	NSMShiftRight
.9448		ca		dex				dex
.9449		ca		dex				dex
.944a		80 d1		bra $941d			bra 	_I32MLoop 					; try again.
.944c						_I32MExit:
.944c		20 52 94	jsr $9452			jsr 	CalculateSign
.944f		98		tya				tya 								; shift in A
.9450		7a		ply				ply 								; restore Y and exit
.9451		60		rts				rts
.9452						CalculateSign:
.9452		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9454		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9456		55 51		eor $51,x			eor 	NSStatus+1,x
.9458		0a		asl a				asl 	a 							; shift bit 7 into carry
.9459		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.945b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.945c						CompareStrings:
.945c		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.945e		35 51		and $51,x			and 	NSStatus+1,x
.9460		29 10		and #$10			and 	#NSBIsString
.9462		f0 28		beq $948c			beq 	_CSTypeError
.9464		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9466		85 36		sta $36				sta 	zTemp0
.9468		b5 60		lda $60,x			lda 	NSMantissa1,x
.946a		85 37		sta $37				sta 	zTemp0+1
.946c		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.946e		85 38		sta $38				sta 	zTemp1
.9470		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9472		85 39		sta $39				sta 	zTemp1+1
.9474		5a		phy				phy 								; save Y so we can access strings
.9475		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9477						_CSLoop:
.9477		c8		iny				iny
.9478		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.947a		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.947c		d0 06		bne $9484			bne 	_CSDifferent
.947e		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9480		d0 f5		bne $9477			bne 	_CSLoop 					; still comparing
.9482						_CSExit:
.9482		7a		ply				ply 								; reached end, return zero in A from EOS
.9483		60		rts				rts
.9484						_CSDifferent:
.9484		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9486		90 fa		bcc $9482			bcc		_CSExit
.9488		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.948a		80 f6		bra $9482			bra 	_CSExit
.948c						_CSTypeError:
.948c		4c aa a2	jmp $a2aa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.948f						ShiftLeft:
.948f		38		sec				sec 								; common code, carry determines which way.
.9490		80 01		bra $9493			bra 	ShiftMain
.9492						ShiftRight:
.9492		18		clc				clc
.9493						ShiftMain:
.9493		fa		plx				plx 								; restore X
.9494		08		php				php 								; save direction
.9495		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9497		15 51		ora $51,x			ora 	NSStatus+1,x
.9499		0a		asl a				asl 	a 							; shift reference bit into sign bit
.949a		0a		asl a				asl 	a
.949b		10 05		bpl $94a2			bpl 	_NotRef
.949d		48		pha				pha
.949e		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94a1		68		pla				pla
.94a2						_NotRef:
.94a2		0a		asl a				asl 	a
.94a3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94a5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94a7		15 79		ora $79,x			ora 	NSExponent+1,x
.94a9		f0 03		beq $94ae			beq 	_IntegerCode 				; if clear, then we have two integers
.94ab		4c aa a2	jmp $a2aa			jmp 	TypeError 					; anything else, type mismatch.
.94ae						_IntegerCode:
.94ae		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.94b0		29 e0		and #$e0			and 	#$E0
.94b2		15 61		ora $61,x			ora 	NSMantissa1+1,x
.94b4		15 69		ora $69,x			ora 	NSMantissa2+1,x
.94b6		15 71		ora $71,x			ora 	NSMantissa3+1,x
.94b8		d0 12		bne $94cc			bne 	_SMExit0 					; if >= 32 it will always return zero.
.94ba						_SMLoop:
.94ba		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.94bc		30 11		bmi $94cf			bmi 	_SMExit 					; exit if done.
.94be		28		plp				plp 								; restore direction setting
.94bf		08		php				php
.94c0		90 05		bcc $94c7			bcc 	_SMRight
.94c2		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; shift left if CS
.94c5		80 f3		bra $94ba			bra 	_SMLoop
.94c7						_SMRight:
.94c7		20 3b a1	jsr $a13b			jsr 	NSMShiftRight 				; shift right if CC
.94ca		80 ee		bra $94ba			bra 	_SMLoop
.94cc						_SMExit0:
.94cc		20 22 a1	jsr $a122			jsr 	NSMSetZero 					; return zero.
.94cf						_SMExit:
.94cf		28		plp				plp 								; throw direction
.94d0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.94d1						AddTopTwoStack:
.94d1		18		clc				clc
.94d2		b5 58		lda $58,x			lda		NSMantissa0,x
.94d4		75 59		adc $59,x			adc 		NSMantissa0+1,x
.94d6		95 58		sta $58,x			sta 	NSMantissa0,x
.94d8		b5 60		lda $60,x			lda		NSMantissa1,x
.94da		75 61		adc $61,x			adc 		NSMantissa1+1,x
.94dc		95 60		sta $60,x			sta 	NSMantissa1,x
.94de		b5 68		lda $68,x			lda		NSMantissa2,x
.94e0		75 69		adc $69,x			adc 		NSMantissa2+1,x
.94e2		95 68		sta $68,x			sta 	NSMantissa2,x
.94e4		b5 70		lda $70,x			lda		NSMantissa3,x
.94e6		75 71		adc $71,x			adc 		NSMantissa3+1,x
.94e8		95 70		sta $70,x			sta 	NSMantissa3,x
.94ea		60		rts				rts
.94eb						SubTopTwoStack:
.94eb		38		sec				sec
.94ec		b5 58		lda $58,x			lda		NSMantissa0,x
.94ee		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.94f0		95 58		sta $58,x			sta 	NSMantissa0,x
.94f2		b5 60		lda $60,x			lda		NSMantissa1,x
.94f4		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.94f6		95 60		sta $60,x			sta 	NSMantissa1,x
.94f8		b5 68		lda $68,x			lda		NSMantissa2,x
.94fa		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.94fc		95 68		sta $68,x			sta 	NSMantissa2,x
.94fe		b5 70		lda $70,x			lda		NSMantissa3,x
.9500		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9502		95 70		sta $70,x			sta 	NSMantissa3,x
.9504		60		rts				rts
.9505						AddInteger:
.9505		fa		plx				plx
.9506		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9508		15 51		ora $51,x			ora 	NSStatus+1,x
.950a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.950b		0a		asl a				asl 	a
.950c		10 05		bpl $9513			bpl 	_NotRef
.950e		48		pha				pha
.950f		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9512		68		pla				pla
.9513						_NotRef:
.9513		0a		asl a				asl 	a 							; put MSB of type into A:7
.9514		30 09		bmi $951f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9516		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9518		15 79		ora $79,x			ora 	NSExponent+1,x
.951a		f0 06		beq $9522			beq 	_IntegerCode 				; if clear, then we have two integers
.951c		4c 18 97	jmp $9718			jmp 	FloatingPointAdd 							; otherwise at least one float.
.951f						_StringData:
.951f		4c de 92	jmp $92de			jmp 	StringConcat							; at least one string - don't know both are strings.
.9522						_IntegerCode:
.9522						AddCode:
.9522		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9524		55 51		eor $51,x			eor 	NSStatus+1,x
.9526		10 a9		bpl $94d1			bpl 	AddTopTwoStack
.9528		20 eb 94	jsr $94eb			jsr 	SubTopTwoStack 				; do a physical subtraction
.952b		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.952d		10 07		bpl $9536			bpl 	_AddExit
.952f		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9531		95 50		sta $50,x			sta 	NSStatus,x
.9533		20 eb a0	jsr $a0eb			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9536						_AddExit:
.9536		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; check for -0
.9539		d0 02		bne $953d			bne 	_AddNonZero
.953b		74 50		stz $50,x			stz 	NSStatus,x
.953d						_AddNonZero:
.953d		60		rts				rts
.953e						SubInteger:
.953e		fa		plx				plx
.953f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9541		15 51		ora $51,x			ora 	NSStatus+1,x
.9543		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9544		0a		asl a				asl 	a
.9545		10 05		bpl $954c			bpl 	_NotRef
.9547		48		pha				pha
.9548		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.954b		68		pla				pla
.954c						_NotRef:
.954c		0a		asl a				asl 	a 							; put MSB of type into A:7
.954d		30 09		bmi $9558			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.954f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9551		15 79		ora $79,x			ora 	NSExponent+1,x
.9553		f0 06		beq $955b			beq 	_IntegerCode 				; if clear, then we have two integers
.9555		4c 1d 97	jmp $971d			jmp 	FloatingPointSub 							; otherwise at least one float.
.9558						_StringData:
.9558		4c b4 a2	jmp $a2b4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.955b						_IntegerCode:
.955b		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.955d		49 80		eor #$80			eor 	#$80
.955f		95 51		sta $51,x			sta 	NSStatus+1,x
.9561		80 bf		bra $9522			bra 	AddCode 					; and do the same code as add.
.9563						AndInteger:
.9563		fa		plx				plx
.9564		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9566		15 51		ora $51,x			ora 	NSStatus+1,x
.9568		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9569		0a		asl a				asl 	a
.956a		10 05		bpl $9571			bpl 	_NotRef
.956c		48		pha				pha
.956d		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9570		68		pla				pla
.9571						_NotRef:
.9571		0a		asl a				asl 	a
.9572		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9574		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9576		15 79		ora $79,x			ora 	NSExponent+1,x
.9578		f0 03		beq $957d			beq 	_IntegerCode 				; if clear, then we have two integers
.957a		4c aa a2	jmp $a2aa			jmp 	TypeError 					; anything else, type mismatch.
.957d						_IntegerCode:
.957d		b5 58		lda $58,x			lda		NSMantissa0,x
.957f		35 59		and $59,x			and 		NSMantissa0+1,x
.9581		95 58		sta $58,x			sta 	NSMantissa0,x
.9583		b5 60		lda $60,x			lda		NSMantissa1,x
.9585		35 61		and $61,x			and 		NSMantissa1+1,x
.9587		95 60		sta $60,x			sta 	NSMantissa1,x
.9589		b5 68		lda $68,x			lda		NSMantissa2,x
.958b		35 69		and $69,x			and 		NSMantissa2+1,x
.958d		95 68		sta $68,x			sta 	NSMantissa2,x
.958f		b5 70		lda $70,x			lda		NSMantissa3,x
.9591		35 71		and $71,x			and 		NSMantissa3+1,x
.9593		95 70		sta $70,x			sta 	NSMantissa3,x
.9595		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9597		60		rts				rts
.9598						OraInteger:
.9598		fa		plx				plx
.9599		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.959b		15 51		ora $51,x			ora 	NSStatus+1,x
.959d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.959e		0a		asl a				asl 	a
.959f		10 05		bpl $95a6			bpl 	_NotRef
.95a1		48		pha				pha
.95a2		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95a5		68		pla				pla
.95a6						_NotRef:
.95a6		0a		asl a				asl 	a
.95a7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95a9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95ab		15 79		ora $79,x			ora 	NSExponent+1,x
.95ad		f0 03		beq $95b2			beq 	_IntegerCode 				; if clear, then we have two integers
.95af		4c aa a2	jmp $a2aa			jmp 	TypeError 					; anything else, type mismatch.
.95b2						_IntegerCode:
.95b2		b5 58		lda $58,x			lda		NSMantissa0,x
.95b4		15 59		ora $59,x			ora 		NSMantissa0+1,x
.95b6		95 58		sta $58,x			sta 	NSMantissa0,x
.95b8		b5 60		lda $60,x			lda		NSMantissa1,x
.95ba		15 61		ora $61,x			ora 		NSMantissa1+1,x
.95bc		95 60		sta $60,x			sta 	NSMantissa1,x
.95be		b5 68		lda $68,x			lda		NSMantissa2,x
.95c0		15 69		ora $69,x			ora 		NSMantissa2+1,x
.95c2		95 68		sta $68,x			sta 	NSMantissa2,x
.95c4		b5 70		lda $70,x			lda		NSMantissa3,x
.95c6		15 71		ora $71,x			ora 		NSMantissa3+1,x
.95c8		95 70		sta $70,x			sta 	NSMantissa3,x
.95ca		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.95cc		60		rts				rts
.95cd						EorInteger:
.95cd		fa		plx				plx
.95ce		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95d0		15 51		ora $51,x			ora 	NSStatus+1,x
.95d2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95d3		0a		asl a				asl 	a
.95d4		10 05		bpl $95db			bpl 	_NotRef
.95d6		48		pha				pha
.95d7		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95da		68		pla				pla
.95db						_NotRef:
.95db		0a		asl a				asl 	a
.95dc		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95de		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95e0		15 79		ora $79,x			ora 	NSExponent+1,x
.95e2		f0 03		beq $95e7			beq 	_IntegerCode 				; if clear, then we have two integers
.95e4		4c aa a2	jmp $a2aa			jmp 	TypeError 					; anything else, type mismatch.
.95e7						_IntegerCode:
.95e7		b5 58		lda $58,x			lda		NSMantissa0,x
.95e9		55 59		eor $59,x			eor 		NSMantissa0+1,x
.95eb		95 58		sta $58,x			sta 	NSMantissa0,x
.95ed		b5 60		lda $60,x			lda		NSMantissa1,x
.95ef		55 61		eor $61,x			eor 		NSMantissa1+1,x
.95f1		95 60		sta $60,x			sta 	NSMantissa1,x
.95f3		b5 68		lda $68,x			lda		NSMantissa2,x
.95f5		55 69		eor $69,x			eor 		NSMantissa2+1,x
.95f7		95 68		sta $68,x			sta 	NSMantissa2,x
.95f9		b5 70		lda $70,x			lda		NSMantissa3,x
.95fb		55 71		eor $71,x			eor 		NSMantissa3+1,x
.95fd		95 70		sta $70,x			sta 	NSMantissa3,x
.95ff		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9601		60		rts				rts
.9602						WordIndirect:
.9602		fa		plx				plx
.9603		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9605		15 51		ora $51,x			ora 	NSStatus+1,x
.9607		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9608		0a		asl a				asl 	a
.9609		10 05		bpl $9610			bpl 	_NotRef
.960b		48		pha				pha
.960c		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.960f		68		pla				pla
.9610						_NotRef:
.9610		0a		asl a				asl 	a
.9611		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9613		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9615		15 79		ora $79,x			ora 	NSExponent+1,x
.9617		f0 03		beq $961c			beq 	_IntegerCode 				; if clear, then we have two integers
.9619		4c aa a2	jmp $a2aa			jmp 	TypeError 					; anything else, type mismatch.
.961c						_IntegerCode:
.961c		20 22 95	jsr $9522			jsr 	AddCode 					; add the two values
.961f		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9621		95 50		sta $50,x			sta 	NSStatus,x
.9623		60		rts				rts
.9624						ByteIndirect:
.9624		fa		plx				plx
.9625		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9627		15 51		ora $51,x			ora 	NSStatus+1,x
.9629		0a		asl a				asl 	a 							; shift reference bit into sign bit
.962a		0a		asl a				asl 	a
.962b		10 05		bpl $9632			bpl 	_NotRef
.962d		48		pha				pha
.962e		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9631		68		pla				pla
.9632						_NotRef:
.9632		0a		asl a				asl 	a
.9633		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9635		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9637		15 79		ora $79,x			ora 	NSExponent+1,x
.9639		f0 03		beq $963e			beq 	_IntegerCode 				; if clear, then we have two integers
.963b		4c aa a2	jmp $a2aa			jmp 	TypeError 					; anything else, type mismatch.
.963e						_IntegerCode:
.963e		20 22 95	jsr $9522			jsr 	AddCode 					; add the two values
.9641		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9643		95 50		sta $50,x			sta 	NSStatus,x
.9645		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9646						ConvertInt16:
.9646		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9648		86 60		stx $60				stx 	NSMantissa1
.964a		64 68		stz $68				stz 	NSMantissa2
.964c		64 70		stz $70				stz 	NSMantissa3
.964e		64 50		stz $50				stz 	NSStatus 					; positive integer
.9650		a2 00		ldx #$00			ldx 	#0 							; stack level
.9652		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9654		80 00		bra $9656			bra 	ConvertInt32
.9656						ConvertInt32:
.9656		5a		phy				phy
.9657		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9659		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.965b		10 08		bpl $9665			bpl 	_CI32NotNeg
.965d		48		pha				pha
.965e		a9 2d		lda #$2d			lda 	#'-'
.9660		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9663		c8		iny				iny
.9664		68		pla				pla
.9665						_CI32NotNeg:
.9665		20 73 96	jsr $9673			jsr 	_CI32DivideConvert 			; recursive conversion
.9668		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.966a		99 27 06	sta $0627,y			sta 	numberBuffer,y
.966d		7a		ply				ply
.966e		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9670		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9672		60		rts				rts
.9673						_CI32DivideConvert:
.9673		e8		inx				inx 								; write to next slot up
.9674		20 24 a1	jsr $a124			jsr 	NSMSetByte 		 			; write the base out.
.9677		ca		dex				dex
.9678		20 a1 93	jsr $93a1			jsr 	Int32Divide 				; divide
.967b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.967d		48		pha				pha
.967e		20 5e 93	jsr $935e			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9681		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; is it zero ?
.9684		f0 05		beq $968b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9686		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9688		20 73 96	jsr $9673			jsr 	_CI32DivideConvert 			; and recusrively call.
.968b						_CI32NoRecurse:
.968b		68		pla				pla 								; remainder
.968c		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.968e		90 02		bcc $9692			bcc 	_CI32NotHex
.9690		69 26		adc #$26			adc 	#6+32
.9692						_CI32NotHex:
.9692		69 30		adc #$30			adc 	#48
.9694		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.9697		c8		iny				iny
.9698		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9699						PrecedenceLevel:
>9699		04					.byte	 4	; $00 <<
>969a		02					.byte	 2	; $01 <=
>969b		02					.byte	 2	; $02 <>
>969c		00					.byte	 0	; $03 !!3
>969d		00					.byte	 0	; $04 ><
>969e		02					.byte	 2	; $05 >=
>969f		04					.byte	 4	; $06 >>
>96a0		00					.byte	 0	; $07 !!7
>96a1		00					.byte	 0	; $08 !!8
>96a2		00					.byte	 0	; $09 !!9
>96a3		00					.byte	 0	; $0a !!10
>96a4		00					.byte	 0	; $0b !!11
>96a5		00					.byte	 0	; $0c !!12
>96a6		00					.byte	 0	; $0d !!13
>96a7		00					.byte	 0	; $0e !!14
>96a8		00					.byte	 0	; $0f !!15
>96a9		00					.byte	 0	; $10 @
>96aa		00					.byte	 0	; $11 !!17
>96ab		00					.byte	 0	; $12 !!18
>96ac		00					.byte	 0	; $13 [
>96ad		04					.byte	 4	; $14 \
>96ae		00					.byte	 0	; $15 ]
>96af		01					.byte	 1	; $16 ^
>96b0		00					.byte	 0	; $17 _
>96b1		00					.byte	 0	; $18 `
>96b2		00					.byte	 0	; $19 !!25
>96b3		00					.byte	 0	; $1a !!26
>96b4		00					.byte	 0	; $1b {
>96b5		01					.byte	 1	; $1c |
>96b6		00					.byte	 0	; $1d }
>96b7		00					.byte	 0	; $1e ~
>96b8		00					.byte	 0	; $1f [7m<7F>[m
>96b9		00					.byte	 0	; $20
>96ba		05					.byte	 5	; $21 !
>96bb		00					.byte	 0	; $22 "
>96bc		00					.byte	 0	; $23 #
>96bd		05					.byte	 5	; $24 $
>96be		04					.byte	 4	; $25 %
>96bf		01					.byte	 1	; $26 &
>96c0		00					.byte	 0	; $27 '
>96c1		00					.byte	 0	; $28 (
>96c2		00					.byte	 0	; $29 )
>96c3		04					.byte	 4	; $2a *
>96c4		03					.byte	 3	; $2b +
>96c5		00					.byte	 0	; $2c ,
>96c6		03					.byte	 3	; $2d -
>96c7		00					.byte	 0	; $2e .
>96c8		04					.byte	 4	; $2f /
>96c9		00					.byte	 0	; $30 0
>96ca		00					.byte	 0	; $31 1
>96cb		00					.byte	 0	; $32 2
>96cc		00					.byte	 0	; $33 3
>96cd		00					.byte	 0	; $34 4
>96ce		00					.byte	 0	; $35 5
>96cf		00					.byte	 0	; $36 6
>96d0		00					.byte	 0	; $37 7
>96d1		00					.byte	 0	; $38 8
>96d2		00					.byte	 0	; $39 9
>96d3		00					.byte	 0	; $3a :
>96d4		00					.byte	 0	; $3b ;
>96d5		02					.byte	 2	; $3c <
>96d6		02					.byte	 2	; $3d =
>96d7		02					.byte	 2	; $3e >
>96d8		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.96d9						EvaluateExpressionAt0:
.96d9		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.96db						EvaluateExpression:
.96db		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.96dd						EvaluateExpressionAtPrecedence:
.96dd		48		pha				pha 								; save precedence level
.96de		20 25 9b	jsr $9b25			jsr 	EvaluateTerm 				; evaluate term into level X.
.96e1		68		pla				pla 								; restore precedence level.
.96e2						_EXPRLoop:
.96e2		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.96e4		b1 30		lda ($30),y			lda 	(codePtr),y
.96e6		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.96e8		b0 25		bcs $970f			bcs 	_EXPRExit
.96ea		da		phx				phx 								; read the operator precedence
.96eb		aa		tax				tax
.96ec		bd 99 96	lda $9699,x			lda 	PrecedenceLevel,x
.96ef		fa		plx				plx
.96f0		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.96f2		f0 1b		beq $970f			beq 	_EXPRExit
.96f4		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.96f6		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.96f8		c5 37		cmp $37				cmp 	zTemp0+1
.96fa		b0 13		bcs $970f			bcs		_EXPRExit 					; if current >= operator exit
.96fc		48		pha				pha 								; save current precedence.
.96fd		b1 30		lda ($30),y			lda 	(codePtr),y
.96ff		c8		iny				iny
.9700		48		pha				pha
.9701		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9703		e8		inx				inx 								; work out the right hand side.
.9704		20 dd 96	jsr $96dd			jsr 	EvaluateExpressionAtPrecedence
.9707		ca		dex				dex
.9708		68		pla				pla 								; get operator, call the code.
.9709		20 12 97	jsr $9712			jsr 	_EXPRCaller
.970c		68		pla				pla 								; restore precedence level
.970d		80 d3		bra $96e2			bra 	_EXPRLoop 					; and go round.
.970f						_EXPRExit:
.970f		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9711		60		rts				rts
.9712						_EXPRCaller:
.9712		da		phx				phx 								; save on stack, first thing is to restore it
.9713		0a		asl a				asl 	a 							; double so can use vectors into X
.9714		aa		tax				tax
.9715		7c 46 8e	jmp ($8e46,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9718						FloatingPointAdd:
.9718		20 8e 98	jsr $988e			jsr 	FloatPrepare 				; prepare for floats
.971b		80 09		bra $9726			bra 	FloatAdd
.971d						FloatingPointSub:
.971d		20 8e 98	jsr $988e			jsr 	FloatPrepare 				; prepare for floats
.9720						FloatSubtract:
.9720		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9722		49 80		eor #$80			eor 	#$80
.9724		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9726						FloatAdd:
.9726		48		pha				pha
.9727		5a		phy				phy
.9728		20 9d 98	jsr $989d			jsr 	NSNormalise 				; normalise S[X]
.972b		f0 51		beq $977e			beq 	_FAReturn1
.972d		e8		inx				inx 								; normalise S[X+1]
.972e		20 9d 98	jsr $989d			jsr 	NSNormalise
.9731		ca		dex				dex
.9732		c9 00		cmp #$00			cmp 	#0
.9734		f0 60		beq $9796			beq 	_FAExit 					; if so, just return A
.9736		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9738		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.973a		f0 18		beq $9754			beq 	_FAExponentsEqual
.973c		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.973e		a8		tay				tay
.973f		38		sec				sec 								; do a signed comparison of the exponents.
.9740		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9742		50 02		bvc $9746			bvc 	_FANoSignedChange
.9744		49 80		eor #$80			eor 	#$80
.9746						_FANoSignedChange:
.9746		29 80		and #$80			and 	#$80
.9748		10 02		bpl $974c			bpl 	_FAHaveMax
.974a		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.974c						_FAHaveMax:
.974c		20 99 97	jsr $9799			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.974f		e8		inx				inx
.9750		20 99 97	jsr $9799			jsr 	_FAShiftToExponent
.9753		ca		dex				dex
.9754						_FAExponentsEqual:
.9754		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9756		55 51		eor $51,x			eor 	NSStatus+1,x
.9758		30 0e		bmi $9768			bmi 	_FADifferentSigns
.975a		20 d1 94	jsr $94d1			jsr 	AddTopTwoStack 				; do the add of the mantissae
.975d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.975f		10 35		bpl $9796			bpl 	_FAExit 					; if no, we are done.
.9761		20 3b a1	jsr $a13b			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9764		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9766		80 2e		bra $9796			bra 	_FAExit
.9768						_FADifferentSigns:
.9768		20 eb 94	jsr $94eb			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.976b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.976d		10 06		bpl $9775			bpl 	_FACheckZero 				; if no, check for -0
.976f		20 e4 a0	jsr $a0e4			jsr 	NSMNegate 					; netate result
.9772		20 eb a0	jsr $a0eb			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9775						_FACheckZero:
.9775		20 44 a1	jsr $a144			jsr 	NSMIsZero	 				; check for -0
.9778		d0 1c		bne $9796			bne 	_FAExit
.977a		74 50		stz $50,x			stz 	NSStatus,x
.977c		80 18		bra $9796			bra 	_FAExit
.977e						_FAReturn1:
.977e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9780		95 58		sta $58,x			sta 	NSMantissa0,x
.9782		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9784		95 60		sta $60,x			sta 	NSMantissa1,x
.9786		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9788		95 68		sta $68,x			sta 	NSMantissa2,x
.978a		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.978c		95 70		sta $70,x			sta 	NSMantissa3,x
.978e		b5 79		lda $79,x			lda 	NSExponent+1,x
.9790		95 78		sta $78,x			sta 	NSExponent,x
.9792		b5 51		lda $51,x			lda 	NSStatus+1,x
.9794		95 50		sta $50,x			sta 	NSStatus,x
.9796						_FAExit:
.9796		7a		ply				ply
.9797		68		pla				pla
.9798		60		rts				rts
.9799						_FAShiftToExponent:
.9799						_FAShiftToExponent2:
.9799		98		tya				tya 								; compare Y to exponent
.979a		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.979c		f0 07		beq $97a5			beq 	_FASEExit 					; exit if so.
.979e		20 3b a1	jsr $a13b			jsr 	NSMShiftRight	 			; shift the mantissa right
.97a1		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.97a3		80 f4		bra $9799			bra 	_FAShiftToExponent2
.97a5						_FASEExit:
.97a5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.97a6						CompareFloat:
.97a6		20 20 97	jsr $9720			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.97a9		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.97ab		29 f8		and #$f8			and 	#$F8
.97ad		15 68		ora $68,x			ora 	NSMantissa2,x
.97af		15 70		ora $70,x			ora 	NSMantissa3,x
.97b1		f0 08		beq $97bb			beq 	_FCExit 					; zero, so approximately identical
.97b3		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.97b5		34 50		bit $50,x			bit 	NSStatus,x
.97b7		10 02		bpl $97bb			bpl 	_FCExit
.97b9						_FCNegative:
.97b9		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.97bb						_FCExit:
.97bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.97bc						FDivideCommand:
.97bc		fa		plx				plx	 								; restore stack position
.97bd		20 8e 98	jsr $988e			jsr 	FloatPrepare 				; prepare for floats
.97c0						FloatDivide:
.97c0		48		pha				pha
.97c1		e8		inx				inx
.97c2		20 9d 98	jsr $989d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97c5		ca		dex				dex
.97c6		c9 00		cmp #$00			cmp 	#0
.97c8		f0 1d		beq $97e7			beq 	_FDZero
.97ca		20 9d 98	jsr $989d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97cd		f0 16		beq $97e5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.97cf		20 c2 93	jsr $93c2			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.97d2		20 5e 93	jsr $935e			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.97d5		20 9d 98	jsr $989d			jsr		NSNormalise 				; renormalise
.97d8		20 52 94	jsr $9452			jsr 	CalculateSign 				; calculate result sign
.97db		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.97dd		38		sec				sec
.97de		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.97e0		38		sec				sec
.97e1		e9 1e		sbc #$1e			sbc 	#30
.97e3		95 78		sta $78,x			sta 	NSExponent,x
.97e5						_FDExit:
.97e5		68		pla				pla
.97e6		60		rts				rts
.97e7						_FDZero:
.97e7		a9 03		lda #$03		lda	#3
.97e9		4c d7 91	jmp $91d7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.97ec						FloatFractionalPart:
.97ec		5a		phy				phy
.97ed		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.97ef		29 7f		and #$7f			and 	#$7F
.97f1		95 50		sta $50,x			sta 	NSStatus,x
.97f3		20 9d 98	jsr $989d			jsr 	NSNormalise
.97f6		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.97f8		38		sec				sec
.97f9		e9 e0		sbc #$e0			sbc 	#$E0
.97fb		90 29		bcc $9826			bcc 	_FFPExit 					; already fractional
.97fd		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.97ff		b0 22		bcs $9823			bcs 	_FFPZero
.9801		a8		tay				tay 								; put count to do in Y
.9802		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9804		20 28 98	jsr $9828			jsr 	_FFPPartial
.9807		95 70		sta $70,x			sta 	NSMantissa3,x
.9809		b5 68		lda $68,x			lda 	NSMantissa2,x
.980b		20 28 98	jsr $9828			jsr 	_FFPPartial
.980e		95 68		sta $68,x			sta 	NSMantissa2,x
.9810		b5 60		lda $60,x			lda 	NSMantissa1,x
.9812		20 28 98	jsr $9828			jsr 	_FFPPartial
.9815		95 60		sta $60,x			sta 	NSMantissa1,x
.9817		b5 58		lda $58,x			lda 	NSMantissa0,x
.9819		20 28 98	jsr $9828			jsr 	_FFPPartial
.981c		95 58		sta $58,x			sta 	NSMantissa0,x
.981e		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; zeroed check.
.9821		d0 03		bne $9826			bne 	_FFPExit
.9823						_FFPZero:
.9823		20 22 a1	jsr $a122			jsr 	NSMSetZero
.9826						_FFPExit:
.9826		7a		ply				ply
.9827		60		rts				rts
.9828						_FFPPartial:
.9828		c0 00		cpy #$00			cpy 	#0 							; no more to do
.982a		f0 17		beq $9843			beq 	_FFFPPExit
.982c		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.982e		b0 0c		bcs $983c			bcs 	_FFFPPWholeByte
.9830		5a		phy				phy
.9831						_FFFPPLeft:
.9831		0a		asl a				asl 	a
.9832		88		dey				dey
.9833		d0 fc		bne $9831			bne 	_FFFPPLeft
.9835		7a		ply				ply
.9836						_FFFPPRight:
.9836		4a		lsr a				lsr 	a
.9837		88		dey				dey
.9838		d0 fc		bne $9836			bne 	_FFFPPRight
.983a		80 07		bra $9843			bra 	_FFFPPExit
.983c						_FFFPPWholeByte:
.983c		98		tya				tya 								; subtract 8 from count
.983d		38		sec				sec
.983e		e9 08		sbc #$08			sbc 	#8
.9840		a8		tay				tay
.9841		a9 00		lda #$00			lda 	#0 							; and clear all
.9843						_FFFPPExit:
.9843		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9844						FloatIntegerPart:
.9844		48		pha				pha
.9845		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9847		f0 1d		beq $9866			beq 	_FIPExit 					; if so do nothing
.9849		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; is it zero ?
.984c		f0 15		beq $9863			beq 	_FIPZero 					; if so return zero.
.984e		20 9d 98	jsr $989d			jsr 	NSNormalise 				; normalise
.9851		f0 10		beq $9863			beq 	_FIPZero 					; normalised to zero, exit zero
.9853						_FIPShift:
.9853		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9855		10 07		bpl $985e			bpl 	_FIPCheckZero
.9857		20 3b a1	jsr $a13b			jsr 	NSMShiftRight 				; shift mantissa right
.985a		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.985c		80 f5		bra $9853			bra 	_FIPShift
.985e						_FIPCheckZero:
.985e		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; avoid -0 problem
.9861		d0 03		bne $9866			bne 	_FIPExit 					; set to zero if mantissa zero.
.9863						_FIPZero:
.9863		20 22 a1	jsr $a122			jsr 	NSMSetZero
.9866						_FIPExit:
.9866		68		pla				pla
.9867		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9868						FloatingPointMultiply:
.9868		20 8e 98	jsr $988e			jsr 	FloatPrepare 				; prepare for floats
.986b						FloatMultiply:
.986b		48		pha				pha
.986c		20 9d 98	jsr $989d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.986f		f0 18		beq $9889			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9871		e8		inx				inx
.9872		20 9d 98	jsr $989d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9875		ca		dex				dex
.9876		c9 00		cmp #$00			cmp 	#0
.9878		f0 0c		beq $9886			beq 	_FDSetZero
.987a		20 14 94	jsr $9414			jsr 	MultiplyShort 				; calculate the result.
.987d		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.987f		18		clc				clc
.9880		75 79		adc $79,x			adc 	NSExponent+1,x
.9882		95 78		sta $78,x			sta 	NSExponent,x
.9884		80 03		bra $9889			bra 	_FDExit
.9886						_FDSetZero:
.9886		20 22 a1	jsr $a122			jsr 	NSMSetZero 					; return 0
.9889						_FDExit:
.9889		20 9d 98	jsr $989d			jsr 	NSNormalise 				; normalise the result
.988c		68		pla				pla
.988d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.988e						FloatPrepare:
.988e		20 99 99	jsr $9999			jsr 	DereferenceTopTwo 			; dereference the top two values
.9891		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9893		15 51		ora $51,x			ora 	NSStatus+1,x
.9895		29 10		and #$10			and 	#NSBIsString
.9897		d0 01		bne $989a			bne 	_FDType
.9899		60		rts				rts
.989a						_FDType:
.989a		4c aa a2	jmp $a2aa			jmp 	TypeError
.989d						NSNormalise:
.989d		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.989f		29 80		and #$80			and 	#$80
.98a1		09 08		ora #$08			ora 	#NSTFloat
.98a3		95 50		sta $50,x			sta 	NSStatus,x
.98a5		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; if zero exit
.98a8		d0 07		bne $98b1			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.98aa		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.98ac		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.98ae		a9 00		lda #$00			lda 	#0 							; set Z flag
.98b0		60		rts				rts
.98b1						_NSNormaliseOptimise:
.98b1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.98b3		d0 19		bne $98ce			bne 	_NSNormaliseLoop
.98b5		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.98b7		30 15		bmi $98ce			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.98b9		95 70		sta $70,x			sta 	NSMantissa3,x
.98bb		b5 60		lda $60,x			lda 	NSMantissa1,x
.98bd		95 68		sta $68,x			sta 	NSMantissa2,x
.98bf		b5 58		lda $58,x			lda 	NSMantissa0,x
.98c1		95 60		sta $60,x			sta 	NSMantissa1,x
.98c3		74 58		stz $58,x			stz 	NSMantissa0,x
.98c5		b5 78		lda $78,x			lda 	NSExponent,x
.98c7		38		sec				sec
.98c8		e9 08		sbc #$08			sbc 	#8
.98ca		95 78		sta $78,x			sta 	NSExponent,x
.98cc		80 e3		bra $98b1			bra 	_NSNormaliseOptimise
.98ce						_NSNormaliseLoop:
.98ce		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.98d0		70 07		bvs $98d9			bvs 	_NSNExit 					; exit if so with Z flag clear
.98d2		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; shift mantissa left
.98d5		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.98d7		80 f5		bra $98ce			bra 	_NSNormaliseLoop
.98d9						_NSNExit:
.98d9		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.98db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.98dc						AssignNumber:
.98dc		5a		phy				phy
.98dd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.98df		85 36		sta $36				sta 	zTemp0
.98e1		b5 60		lda $60,x			lda 	NSMantissa1,x
.98e3		85 37		sta $37				sta 	zTemp0+1
.98e5		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.98e7		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.98e9		95 50		sta $50,x			sta 	NSStatus,x
.98eb		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.98ed		c9 08		cmp #$08			cmp 	#NSTFloat
.98ef		f0 24		beq $9915			beq 	_ANFloat
.98f1		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.98f3		f0 03		beq $98f8			beq		_ANNotFloat
.98f5		4c a5 a2	jmp $a2a5			jmp 	RangeError					; if it is, report an error.
.98f8						_ANNotFloat:
.98f8		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.98fa		29 03		and #$03			and 	#3
.98fc		d0 05		bne $9903			bne 	_ANByteWord
.98fe		20 20 99	jsr $9920			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9901		80 1b		bra $991e			bra 	_ANExit
.9903						_ANByteWord:
.9903		48		pha				pha 								; save count
.9904		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9906		92 36		sta ($36)			sta 	(zTemp0)
.9908		68		pla				pla
.9909		c9 01		cmp #$01			cmp	 	#1
.990b		f0 11		beq $991e			beq 	_ANExit
.990d		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.990f		a0 01		ldy #$01			ldy 	#1
.9911		91 36		sta ($36),y			sta 	(zTemp0),y
.9913		80 09		bra $991e			bra 	_ANExit
.9915						_ANFloat:
.9915		20 20 99	jsr $9920			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9918		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.991a		a0 04		ldy #$04			ldy 	#4
.991c		91 36		sta ($36),y			sta 	(zTemp0),y
.991e						_ANExit:
.991e		7a		ply				ply
.991f		60		rts				rts
.9920						_ANCopy4PackSign:
.9920		a0 03		ldy #$03			ldy 	#3
.9922		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9924		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9926		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9928		91 36		sta ($36),y			sta 	(zTemp0),y
.992a		88		dey				dey
.992b		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.992d		91 36		sta ($36),y			sta 	(zTemp0),y
.992f		88		dey				dey
.9930		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9932		91 36		sta ($36),y			sta 	(zTemp0),y
.9934		88		dey				dey
.9935		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9937		91 36		sta ($36),y			sta 	(zTemp0),y
.9939		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.993a						AssignString:
.993a		5a		phy				phy
.993b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.993d		85 38		sta $38				sta 	zTemp1
.993f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9941		85 39		sta $39				sta 	zTemp1+1
.9943		b5 58		lda $58,x			lda 	NSMantissa0,x
.9945		85 36		sta $36				sta 	zTemp0
.9947		b5 60		lda $60,x			lda 	NSMantissa1,x
.9949		85 37		sta $37				sta 	zTemp0+1
.994b		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.994d		b1 36		lda ($36),y			lda 	(zTemp0),y
.994f		f0 23		beq $9974			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9951		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9952		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9954		e9 02		sbc #$02			sbc 	#2
.9956		85 3c		sta $3c				sta 	zsTemp
.9958		a0 01		ldy #$01			ldy 	#1
.995a		b1 36		lda ($36),y			lda 	(zTemp0),y
.995c		e9 00		sbc #$00			sbc 	#0
.995e		85 3d		sta $3d				sta 	zsTemp+1
.9960		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9962						_ASGetLength:
.9962		c8		iny				iny
.9963		b1 38		lda ($38),y			lda 	(zTemp1),y
.9965		d0 fb		bne $9962			bne 	_ASGetLength
.9967		98		tya				tya 								; is this length <= current length
.9968		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.996a		90 1e		bcc $998a			bcc 	_ASCopyString
.996c		f0 1c		beq $998a			beq 	_ASCopyString
.996e		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9970		a0 01		ldy #$01			ldy 	#1
.9972		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9974						_ASNewStringRequired:
.9974		e8		inx				inx 								; concrete the new string.
.9975		20 74 b2	jsr $b274			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9978		ca		dex				dex
.9979		18		clc				clc
.997a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.997c		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.997e		92 36		sta ($36)			sta 	(zTemp0)
.9980		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9982		69 00		adc #$00			adc 	#0
.9984		a0 01		ldy #$01			ldy 	#1
.9986		91 36		sta ($36),y			sta 	(zTemp0),y
.9988		80 0d		bra $9997			bra 	_ASExit
.998a						_ASCopyString:
.998a		a0 00		ldy #$00			ldy 	#0
.998c						_ASCopyLoop:
.998c		b1 38		lda ($38),y			lda 	(zTemp1),y
.998e		c8		iny				iny
.998f		c8		iny				iny
.9990		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9992		88		dey				dey
.9993		c9 00		cmp #$00			cmp 	#0
.9995		d0 f5		bne $998c			bne 	_ASCopyLoop
.9997						_ASExit:
.9997		7a		ply				ply
.9998		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9999						DereferenceTopTwo:
.9999		e8		inx				inx
.999a		20 9e 99	jsr $999e			jsr 	Dereference 				; deref x+1
.999d		ca		dex				dex  								; falls through to deref x
.999e						Dereference:
.999e		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.99a0		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.99a2		f0 48		beq $99ec			beq 	_DRFExit 					; not a reference, so exit.
.99a4		5a		phy				phy
.99a5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.99a7		85 36		sta $36				sta 	zTemp0
.99a9		b5 60		lda $60,x			lda 	NSMantissa1,x
.99ab		85 37		sta $37				sta 	zTemp0+1
.99ad		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.99af		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.99b1		95 58		sta $58,x			sta 	NSMantissa0,x
.99b3		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.99b5		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.99b7		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.99b9		f0 0e		beq $99c9			beq 	_DRFDereferenceTwo
.99bb		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.99bd		f0 2f		beq $99ee			beq 	_DRFFull
.99bf		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.99c1		29 03		and #$03			and 	#3
.99c3		f0 29		beq $99ee			beq 	_DRFFull 					; the whole word
.99c5		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.99c7		f0 06		beq $99cf			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.99c9						_DRFDereferenceTwo:
.99c9		a0 01		ldy #$01			ldy 	#1
.99cb		b1 36		lda ($36),y			lda 	(zTemp0),y
.99cd		95 60		sta $60,x			sta 	NSMantissa1,x
.99cf						_DRFClear23:
.99cf		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.99d1		74 70		stz $70,x			stz 	NSMantissa3,x
.99d3		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.99d5		29 18		and #$18			and 	#NSBTypeMask
.99d7		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.99d9		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.99db		d0 0e		bne $99eb			bne 	_DRFNotString
.99dd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.99df		15 60		ora $60,x			ora 	NSMantissa1,x
.99e1		d0 08		bne $99eb			bne 	_DRFNotString
.99e3		a9 ed		lda #$ed			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.99e5		95 58		sta $58,x			sta 	NSMantissa0,x
.99e7		a9 99		lda #$99			lda 	#_DRFNullString >> 8
.99e9		95 60		sta $60,x			sta 	NSMantissa1,x
.99eb						_DRFNotString
.99eb		7a		ply				ply 								; restore Y and exit
.99ec						_DRFExit:
.99ec		60		rts				rts
.99ed						_DRFNullString:
>99ed		00						.byte 	0
.99ee						_DRFFull:
.99ee		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.99f0		b1 36		lda ($36),y			lda 	(zTemp0),y
.99f2		95 60		sta $60,x			sta 	NSMantissa1,x
.99f4		c8		iny				iny
.99f5		b1 36		lda ($36),y			lda 	(zTemp0),y
.99f7		95 68		sta $68,x			sta 	NSMantissa2,x
.99f9		c8		iny				iny
.99fa		b1 36		lda ($36),y			lda 	(zTemp0),y
.99fc		95 70		sta $70,x			sta 	NSMantissa3,x
.99fe		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9a00		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9a02		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9a04		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9a06		f0 05		beq $9a0d			beq 	_DRFNoExponent
.9a08		c8		iny				iny 								; if not, read the exponent as well.
.9a09		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a0b		95 78		sta $78,x			sta 	NSExponent,x
.9a0d						_DRFNoExponent:
.9a0d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9a0f		10 0a		bpl $9a1b			bpl 	_DRFExit2 					; if not, then exit.
.9a11		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9a13		95 70		sta $70,x			sta 	NSMantissa3,x
.9a15		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9a17		09 80		ora #$80			ora 	#NSBIsNegative
.9a19		95 50		sta $50,x			sta 	NSStatus,x
.9a1b						_DRFExit2:
.9a1b		7a		ply				ply
.9a1c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9a1d						EncodeNumberStart:
.9a1d		38		sec				sec
.9a1e		80 01		bra $9a21			bra 	EncodeNumberContinue+1
.9a20						EncodeNumberContinue:
.9a20		18		clc				clc
.9a21						EncodeNumber:
.9a21		08		php				php 								; save reset flag.
.9a22		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a24		f0 12		beq $9a38			beq 	_ENIsOkay
.9a26		c9 30		cmp #$30			cmp 	#"0"
.9a28		90 04		bcc $9a2e			bcc 	_ENBadNumber
.9a2a		c9 3a		cmp #$3a			cmp 	#"9"+1
.9a2c		90 0a		bcc $9a38			bcc 	_ENIsOkay
.9a2e						_ENBadNumber:
.9a2e		28		plp				plp 								; throw saved reset
.9a2f		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9a32		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a34		f0 7b		beq $9ab1			beq 	_ENConstructFinal
.9a36						_ENFail:
.9a36		18		clc				clc 								; not allowed
.9a37		60		rts				rts
.9a38						_ENIsOkay:
.9a38		28		plp				plp 								; are we restarting
.9a39		90 15		bcc $9a50			bcc 	_ENNoRestart
.9a3b						_ENStartEncode:
.9a3b		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9a3d		f0 0c		beq $9a4b			beq 	_ENFirstDP
.9a3f		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9a41		20 24 a1	jsr $a124			jsr 	NSMSetByte 					; in single byte mode.
.9a44		a9 01		lda #$01			lda 	#ESTA_Low
.9a46						_ENExitChange:
.9a46		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9a49		38		sec				sec
.9a4a		60		rts				rts
.9a4b						_ENFirstDP:
.9a4b		20 22 a1	jsr $a122			jsr 	NSMSetZero 					; clear integer part
.9a4e		80 3c		bra $9a8c			bra 	_ESTASwitchFloat			; go straight to float and exi
.9a50						_ENNoRestart:
.9a50		48		pha				pha 								; save digit or DP on stack.
.9a51		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9a54		c9 01		cmp #$01			cmp 	#ESTA_Low
.9a56		f0 09		beq $9a61			beq  	_ESTALowState
.9a58		c9 02		cmp #$02			cmp 	#ESTA_High
.9a5a		f0 26		beq $9a82			beq 	_ESTAHighState
.9a5c		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a5e		f0 38		beq $9a98			beq 	_ESTADecimalState
>9a60		db						.byte 	$DB 						; causes a break in the emulator
.9a61						_ESTALowState:
.9a61		68		pla				pla 								; get value back
.9a62		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a64		f0 26		beq $9a8c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a66		29 0f		and #$0f			and 	#15 						; make digit
.9a68		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9a6b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9a6d		0a		asl a				asl 	a
.9a6e		0a		asl a				asl 	a
.9a6f		75 58		adc $58,x			adc 	NSMantissa0,x
.9a71		0a		asl a				asl 	a
.9a72		6d 06 04	adc $0406			adc 	digitTemp
.9a75		95 58		sta $58,x			sta 	NSMantissa0,x
.9a77		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9a79		90 05		bcc $9a80			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9a7b		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9a7d		8d 05 04	sta $0405			sta 	encodeState
.9a80						_ESTANoSwitch:
.9a80		38		sec				sec
.9a81		60		rts				rts
.9a82						_ESTAHighState:
.9a82		68		pla				pla 								; get value back
.9a83		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9a85		f0 05		beq $9a8c			beq 	_ESTASwitchFloat
.9a87		20 e5 9a	jsr $9ae5			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9a8a		38		sec				sec
.9a8b		60		rts				rts
.9a8c						_ESTASwitchFloat:
.9a8c		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9a8f		e8		inx				inx 								; zero the decimal additive.
.9a90		20 22 a1	jsr $a122			jsr 	NSMSetZero
.9a93		ca		dex				dex
.9a94		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9a96		80 ae		bra $9a46			bra 	_ENExitChange
.9a98						_ESTADecimalState:
.9a98		68		pla				pla 								; digit.
.9a99		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9a9b		f0 99		beq $9a36			beq 	_ENFail
.9a9d		e8		inx				inx 								; put digit into fractional part of X+1
.9a9e		20 e5 9a	jsr $9ae5			jsr 	ESTAShiftDigitIntoMantissa
.9aa1		ca		dex				dex
.9aa2		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9aa5		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9aa8		c9 0b		cmp #$0b			cmp 	#11
.9aaa		f0 02		beq $9aae			beq 	_ESTADSFail
.9aac		38		sec				sec
.9aad		60		rts				rts
.9aae						_ESTADSFail:
.9aae		4c a5 a2	jmp $a2a5			jmp 	RangeError
.9ab1						_ENConstructFinal:
.9ab1		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9ab4		f0 2d		beq $9ae3			beq 	_ENCFExit 					; no decimals
.9ab6		5a		phy				phy
.9ab7		0a		asl a				asl 	a 							; x 4 and CLC
.9ab8		0a		asl a				asl 	a
.9ab9		6d 07 04	adc $0407			adc 	decimalCount
.9abc		a8		tay				tay
.9abd		b9 64 a2	lda $a264,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9ac0		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9ac2		b9 65 a2	lda $a265,y			lda 	DecimalScalarTable-5+1,y
.9ac5		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9ac7		b9 66 a2	lda $a266,y			lda 	DecimalScalarTable-5+2,y
.9aca		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9acc		b9 67 a2	lda $a267,y			lda 	DecimalScalarTable-5+3,y
.9acf		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9ad1		b9 68 a2	lda $a268,y			lda 	DecimalScalarTable-5+4,y
.9ad4		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9ad6		a9 08		lda #$08			lda 	#NSTFloat
.9ad8		95 52		sta $52,x			sta 	NSStatus+2,x
.9ada		7a		ply				ply
.9adb		e8		inx				inx 								; multiply decimal const by decimal scalar
.9adc		20 6b 98	jsr $986b			jsr 	FloatMultiply
.9adf		ca		dex				dex
.9ae0		20 26 97	jsr $9726			jsr 	FloatAdd 					; add to integer part.
.9ae3						_ENCFExit:
.9ae3		18		clc				clc 								; reject the digit.
.9ae4		60		rts				rts
.9ae5						ESTAShiftDigitIntoMantissa:
.9ae5		29 0f		and #$0f			and 	#15 						; save digit
.9ae7		48		pha				pha
.9ae8		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9aea		48		pha				pha
.9aeb		b5 68		lda $68,x			lda 	NSMantissa2,x
.9aed		48		pha				pha
.9aee		b5 60		lda $60,x			lda 	NSMantissa1,x
.9af0		48		pha				pha
.9af1		b5 58		lda $58,x			lda 	NSMantissa0,x
.9af3		48		pha				pha
.9af4		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; x 2
.9af7		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; x 4
.9afa		18		clc				clc 								; pop mantissa and add
.9afb		68		pla				pla
.9afc		75 58		adc $58,x			adc 	NSMantissa0,x
.9afe		95 58		sta $58,x			sta 	NSMantissa0,x
.9b00		68		pla				pla
.9b01		75 60		adc $60,x			adc 	NSMantissa1,x
.9b03		95 60		sta $60,x			sta 	NSMantissa1,x
.9b05		68		pla				pla
.9b06		75 68		adc $68,x			adc 	NSMantissa2,x
.9b08		95 68		sta $68,x			sta 	NSMantissa2,x
.9b0a		68		pla				pla
.9b0b		75 70		adc $70,x			adc 	NSMantissa3,x
.9b0d		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9b0f		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; x 10
.9b12		68		pla				pla 								; add digit
.9b13		18		clc				clc
.9b14		75 58		adc $58,x			adc 	NSMantissa0,x
.9b16		95 58		sta $58,x			sta 	NSMantissa0,x
.9b18		90 0a		bcc $9b24			bcc 	_ESTASDExit
.9b1a		f6 60		inc $60,x			inc 	NSMantissa1,x
.9b1c		d0 06		bne $9b24			bne 	_ESTASDExit
.9b1e		f6 68		inc $68,x			inc 	NSMantissa2,x
.9b20		d0 02		bne $9b24			bne 	_ESTASDExit
.9b22		f6 70		inc $70,x			inc 	NSMantissa3,x
.9b24						_ESTASDExit:
.9b24		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9b25						EvaluateTerm:
.9b25		b1 30		lda ($30),y			lda 	(codePtr),y
.9b27		30 18		bmi $9b41			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9b29		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9b2b		b0 6c		bcs $9b99			bcs 	_ETVariable
.9b2d		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9b2f		90 6b		bcc $9b9c			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9b31		c9 3a		cmp #$3a			cmp 	#'9'+1
.9b33		b0 67		bcs $9b9c			bcs 	_ETPuncUnary
.9b35		20 1d 9a	jsr $9a1d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9b38						_ETNumber:
.9b38		c8		iny				iny 								; keep encoding until we have the numbers
.9b39		b1 30		lda ($30),y			lda 	(codePtr),y
.9b3b		20 20 9a	jsr $9a20			jsr 	EncodeNumberContinue
.9b3e		b0 f8		bcs $9b38			bcs 	_ETNumber 					; go back if accepted.
.9b40		60		rts				rts
.9b41						_ETCheckUnary:
.9b41		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b43		f0 3f		beq $9b84			beq 	_ETString
.9b45		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b47		f0 12		beq $9b5b			beq 	_ETHexConstant
.9b49		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b4b		90 0b		bcc $9b58			bcc 	_ETSyntaxError
.9b4d		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9b4f		b0 07		bcs $9b58			bcs 	_ETSyntaxError
.9b51		da		phx				phx 								; push X on the stack
.9b52		0a		asl a				asl 	a 							; put vector x 2 into X
.9b53		aa		tax				tax
.9b54		c8		iny				iny 								; consume unary function token
.9b55		7c c6 8e	jmp ($8ec6,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b58						_ETSyntaxError:
.9b58		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
.9b5b						_ETHexConstant:
.9b5b		c8		iny				iny 								; skip #
.9b5c		c8		iny				iny 								; skip count
.9b5d		20 22 a1	jsr $a122			jsr 	NSMSetZero 					; clear result
.9b60						_ETHLoop:
.9b60		b1 30		lda ($30),y			lda 	(codePtr),y
.9b62		c8		iny				iny 								; and consume
.9b63		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b65		f0 1c		beq $9b83			beq 	_ETHExit
.9b67		48		pha				pha 								; save on stack.
.9b68		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; x 2
.9b6b		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; x 4
.9b6e		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; x 8
.9b71		20 31 a1	jsr $a131			jsr 	NSMShiftLeft 				; x 16
.9b74		68		pla				pla 								; ASCII
.9b75		c9 41		cmp #$41			cmp 	#'A'
.9b77		90 02		bcc $9b7b			bcc 	_ETHNotChar
.9b79		e9 07		sbc #$07			sbc 	#7
.9b7b						_ETHNotChar:
.9b7b		29 0f		and #$0f			and 	#15 						; digit now
.9b7d		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9b7f		95 58		sta $58,x			sta 	NSMantissa0,x
.9b81		80 dd		bra $9b60			bra 	_ETHLoop 					; go round.
.9b83						_ETHExit:
.9b83		60		rts				rts
.9b84						_ETString:
.9b84		c8		iny				iny 								; look at length
.9b85		b1 30		lda ($30),y			lda 	(codePtr),y
.9b87		48		pha				pha
.9b88		c8		iny				iny 								; first character
.9b89		20 9c a8	jsr $a89c			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9b8c		68		pla				pla 								; restore count and save
.9b8d		85 36		sta $36				sta 	zTemp0
.9b8f		98		tya				tya 								; add length to Y to skip it.
.9b90		18		clc				clc
.9b91		65 36		adc $36				adc 	zTemp0
.9b93		a8		tay				tay
.9b94		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9b96		95 50		sta $50,x			sta 	NSStatus,x
.9b98		60		rts				rts
.9b99						_ETVariable:
.9b99		4c ee 9b	jmp $9bee			jmp 	VariableHandler
.9b9c						_ETPuncUnary:
.9b9c		c8		iny				iny 								; consume the unary character
.9b9d		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9b9f		f0 2b		beq $9bcc			beq 	_ETUnaryNegate
.9ba1		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9ba3		f0 36		beq $9bdb			beq 	_ETDereference
.9ba5		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9ba7		f0 3e		beq $9be7			beq 	_ETParenthesis
.9ba9		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9bab		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9bad		f0 06		beq $9bb5			beq 	_ETIndirection
.9baf		e6 36		inc $36				inc 	zTemp0
.9bb1		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9bb3		d0 a3		bne $9b58			bne 	_ETSyntaxError
.9bb5						_ETIndirection:
.9bb5		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9bb7		1a		inc a				inc 	a
.9bb8		48		pha				pha
.9bb9		20 25 9b	jsr $9b25			jsr 	EvaluateTerm				; evaluate the term
.9bbc		20 9e 99	jsr $999e			jsr 	Dereference 				; dereference it.
.9bbf		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9bc1		d0 06		bne $9bc9			bne 	_ETTypeMismatch
.9bc3		68		pla				pla 								; indirection 1-2
.9bc4		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9bc6		95 50		sta $50,x			sta 	NSStatus,x
.9bc8		60		rts				rts
.9bc9						_ETTypeMismatch:
.9bc9		4c aa a2	jmp $a2aa			jmp 	TypeError
.9bcc						_ETUnaryNegate:
.9bcc		20 25 9b	jsr $9b25			jsr 	EvaluateTerm				; evaluate the term
.9bcf		20 9e 99	jsr $999e			jsr 	Dereference 				; dereference it.
.9bd2		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9bd4		29 10		and #$10			and 	#NSTString
.9bd6		d0 f1		bne $9bc9			bne 	_ETTypeMismatch
.9bd8		4c e4 a0	jmp $a0e4			jmp 	NSMNegate  					; just toggles the sign bit.
.9bdb						_ETDereference:
.9bdb		20 25 9b	jsr $9b25			jsr 	EvaluateTerm				; evaluate the term
.9bde		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9be0		29 20		and #$20			and 	#NSBIsReference
.9be2		f0 e5		beq $9bc9			beq 	_ETTypeMismatch
.9be4		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9be6		60		rts				rts
.9be7						_ETParenthesis:
.9be7		20 db 96	jsr $96db			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9bea		20 be 91	jsr $91be			jsr 	CheckRightBracket 			; check for )
.9bed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9bee						VariableHandler:
.9bee		b1 30		lda ($30),y			lda 	(codePtr),y
.9bf0		18		clc				clc
.9bf1		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9bf3		85 37		sta $37				sta 	zTemp0+1
.9bf5		c8		iny				iny
.9bf6		b1 30		lda ($30),y			lda 	(codePtr),y
.9bf8		85 36		sta $36				sta 	zTemp0
.9bfa		c8		iny				iny
.9bfb		18		clc				clc									; copy variable address+3 to mantissa
.9bfc		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9bfe		95 58		sta $58,x			sta 	NSMantissa0,x
.9c00		a5 37		lda $37				lda 	zTemp0+1
.9c02		69 00		adc #$00			adc 	#0
.9c04		95 60		sta $60,x			sta 	NSMantissa1,x
.9c06		74 68		stz $68,x			stz 	NSMantissa2,x
.9c08		74 70		stz $70,x			stz 	NSMantissa3,x
.9c0a		74 78		stz $78,x			stz 	NSExponent,x
.9c0c		5a		phy				phy
.9c0d		a0 02		ldy #$02			ldy 	#2 							; read type
.9c0f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c11		7a		ply				ply
.9c12		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9c14		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9c16		95 50		sta $50,x			sta 	NSStatus,x
.9c18		29 04		and #$04			and 	#NSBIsArray
.9c1a		d0 01		bne $9c1d			bne 	_VHArray
.9c1c		60		rts				rts
.9c1d						_VHArray:
.9c1d		e8		inx				inx
.9c1e		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9c21		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9c23		95 51		sta $51,x			sta 	NSStatus+1,x
.9c25		b1 30		lda ($30),y			lda 	(codePtr),y
.9c27		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9c29		d0 06		bne $9c31			bne 	_VHNoSecondIndex
.9c2b		c8		iny				iny 								; skip the comma
.9c2c		e8		inx				inx
.9c2d		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c30		ca		dex				dex
.9c31						_VHNoSecondIndex:
.9c31		ca		dex				dex 								; set X back.
.9c32		20 be 91	jsr $91be			jsr 	CheckRightBracket 			; and check the right bracket.
.9c35		5a		phy				phy 								; save position
.9c36		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9c38		85 3e		sta $3e				sta 	zaTemp
.9c3a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c3c		85 3f		sta $3f				sta 	zaTemp+1
.9c3e		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9c40		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c42		f0 5d		beq $9ca1			beq 	_VHBadArray
.9c44		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c46		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c48		f0 02		beq $9c4c			beq 	_VHHas2Mask
.9c4a		a9 ff		lda #$ff			lda 	#$FF
.9c4c						_VHHas2Mask:
.9c4c		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c4e		f0 4c		beq $9c9c			beq 	_VHBadIndex
.9c50		0a		asl a				asl 	a 							; carry will be set if a second index
.9c51		90 08		bcc $9c5b			bcc 	_VHCheckFirstIndex
.9c53		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c55		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c57		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9c59		90 41		bcc $9c9c			bcc 	_VHBadIndex
.9c5b						_VHCheckFirstIndex:
.9c5b		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c5d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c5f		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9c61		90 39		bcc $9c9c			bcc 	_VHBadIndex
.9c63		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9c65		64 37		stz $37				stz 	zTemp0+1
.9c67		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9c69		30 0e		bmi $9c79			bmi 	_VHNoMultiply
.9c6b		da		phx				phx
.9c6c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9c6e		48		pha				pha
.9c6f		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9c71		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c73		1a		inc a				inc 	a 							; add 1 for zero base
.9c74		fa		plx				plx
.9c75		20 cd a0	jsr $a0cd			jsr 	Multiply8x8 				; calculate -> Z0
.9c78		fa		plx				plx
.9c79						_VHNoMultiply:
.9c79		18		clc				clc
.9c7a		a5 36		lda $36				lda 	zTemp0
.9c7c		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9c7e		85 36		sta $36				sta 	zTemp0
.9c80		a5 37		lda $37				lda 	zTemp0+1
.9c82		69 00		adc #$00			adc 	#0
.9c84		85 37		sta $37				sta 	zTemp0+1
.9c86		b5 50		lda $50,x			lda 	NSStatus,x
.9c88		20 5f 86	jsr $865f			jsr 	ScaleByBaseType
.9c8b		18		clc				clc
.9c8c		b2 3e		lda ($3e)			lda 	(zaTemp)
.9c8e		65 36		adc $36				adc 	zTemp0
.9c90		95 58		sta $58,x			sta 	NSMantissa0,x
.9c92		a0 01		ldy #$01			ldy 	#1
.9c94		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c96		65 37		adc $37				adc 	zTemp0+1
.9c98		95 60		sta $60,x			sta 	NSMantissa1,x
.9c9a		7a		ply				ply 								; restore position
.9c9b		60		rts				rts
.9c9c						_VHBadIndex:
.9c9c		a9 17		lda #$17		lda	#23
.9c9e		4c d7 91	jmp $91d7		jmp	ErrorHandler
.9ca1						_VHBadArray:
.9ca1		a9 18		lda #$18		lda	#24
.9ca3		4c d7 91	jmp $91d7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9ca6						AbsUnary:
.9ca6		fa		plx				plx 								; restore stack pos
.9ca7		20 70 a0	jsr $a070			jsr 	EvaluateNumber 				; get a float or int
.9caa		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9cad		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9caf		29 7f		and #$7f			and 	#$7F
.9cb1		95 50		sta $50,x			sta 	NSStatus,x
.9cb3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9cb4						AllocUnary:
.9cb4		fa		plx				plx 								; restore stack pos
.9cb5		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger		; get bytes required.
.9cb8		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9cbb		da		phx				phx 								; save X/Y
.9cbc		5a		phy				phy
.9cbd		8a		txa				txa 								; copy X into Y
.9cbe		a8		tay				tay
.9cbf		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9cc2		aa		tax				tax
.9cc3		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9cc6		20 d3 9c	jsr $9cd3			jsr 	AllocateXABytes 			; allocate memory
.9cc9		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9ccc		8a		txa				txa 	 							; typing is 16 bit integer.
.9ccd		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9cd0		7a		ply				ply
.9cd1		fa		plx				plx
.9cd2		60		rts				rts
.9cd3						AllocateXABytes:
.9cd3		5a		phy				phy
.9cd4		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9cd7		84 36		sty $36				sty 	zTemp0
.9cd9		5a		phy				phy
.9cda		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9cdd		84 37		sty $37				sty 	zTemp0+1
.9cdf		5a		phy				phy
.9ce0		18		clc				clc 								; add to low memory pointer
.9ce1		6d 0c 04	adc $040c			adc 	lowMemPtr
.9ce4		8d 0c 04	sta $040c			sta 	lowMemPtr
.9ce7		8a		txa				txa
.9ce8		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9ceb		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9cee		b0 2f		bcs $9d1f			bcs 	CISSMemory
.9cf0		20 11 9d	jsr $9d11			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9cf3						_ClearMemory:
.9cf3		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9cf6		c5 36		cmp $36				cmp 	zTemp0
.9cf8		d0 07		bne $9d01			bne 	_CMClearNext
.9cfa		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9cfd		c5 37		cmp $37				cmp 	zTemp0+1
.9cff		f0 0c		beq $9d0d			beq 	_CMExit
.9d01						_CMClearNext:
.9d01		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9d03		92 36		sta ($36)			sta 	(zTemp0)
.9d05		e6 36		inc $36				inc 	zTemp0
.9d07		d0 ea		bne $9cf3			bne 	_ClearMemory
.9d09		e6 37		inc $37				inc		zTemp0+1
.9d0b		80 e6		bra $9cf3			bra 	_ClearMemory
.9d0d						_CMExit:
.9d0d		fa		plx				plx
.9d0e		68		pla				pla
.9d0f		7a		ply				ply
.9d10		60		rts				rts
.9d11						CheckIdentifierStringSpace:
.9d11		48		pha				pha
.9d12		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9d15		18		clc				clc
.9d16		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9d18		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9d1b		b0 02		bcs $9d1f			bcs 	CISSMemory
.9d1d		68		pla				pla
.9d1e		60		rts				rts
.9d1f						CISSMemory:
.9d1f		a9 06		lda #$06		lda	#6
.9d21		4c d7 91	jmp $91d7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9d24						AscUnary:
.9d24		fa		plx				plx 								; restore stack pos
.9d25		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; get a string
.9d28		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9d2a		20 24 a1	jsr $a124			jsr 	NSMSetByte 					; ASC("") will return zero.
.9d2d		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9d30		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9d31						FracUnary:
.9d31		fa		plx				plx 								; restore stack pos
.9d32		20 70 a0	jsr $a070			jsr 	EvaluateNumber 				; get a float or int
.9d35		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9d38		b5 50		lda $50,x			lda 	NSStatus,x
.9d3a		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d3c		f0 04		beq $9d42			beq 	_IUZero
.9d3e		20 ec 97	jsr $97ec			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9d41		60		rts				rts
.9d42						_IUZero:
.9d42		20 22 a1	jsr $a122			jsr 	NSMSetZero
.9d45		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9d46						IntUnary:
.9d46		fa		plx				plx 								; restore stack pos
.9d47		20 70 a0	jsr $a070			jsr 	EvaluateNumber 				; get a float or int
.9d4a		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9d4d		b5 50		lda $50,x			lda 	NSStatus,x
.9d4f		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d51		f0 03		beq $9d56			beq 	_IUExit
.9d53		20 44 98	jsr $9844			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9d56						_IUExit:
.9d56		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9d57						LenUnary:
.9d57		fa		plx				plx 								; restore stack pos
.9d58		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; get a string
.9d5b		5a		phy				phy
.9d5c		a0 00		ldy #$00			ldy 	#0 							; find length
.9d5e						_LenFind:
.9d5e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9d60		f0 06		beq $9d68			beq 	_LenExit
.9d62		c8		iny				iny
.9d63		d0 f9		bne $9d5e			bne 	_LenFind
.9d65		4c a5 a2	jmp $a2a5			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9d68						_LenExit:
.9d68		98		tya				tya		 							; return length
.9d69		20 24 a1	jsr $a124			jsr 	NSMSetByte
.9d6c		7a		ply				ply
.9d6d		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9d70		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9d71						Unary_Min:
.9d71		a9 01		lda #$01			lda 	#1
.9d73		80 02		bra $9d77			bra 	UnaryMinMaxMain
.9d75						Unary_Max:
.9d75		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9d77						UnaryMinMaxMain:
.9d77		fa		plx				plx 								; get index on number stack
.9d78		48		pha				pha 								; save comparator
.9d79		20 67 a0	jsr $a067			jsr 	EvaluateValue 				; get the first value.
.9d7c						_UMMMLoop:
.9d7c		b1 30		lda ($30),y			lda 	(codePtr),y
.9d7e		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9d80		f0 22		beq $9da4			beq 	_UMMMDone
.9d82		20 c6 91	jsr $91c6			jsr 	CheckComma 					; must be a comma
.9d85		e8		inx				inx
.9d86		20 67 a0	jsr $a067			jsr 	EvaluateValue
.9d89		ca		dex				dex
.9d8a		20 05 a1	jsr $a105			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9d8d		e8		inx				inx
.9d8e		20 05 a1	jsr $a105			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9d91		e8		inx				inx
.9d92		20 8e 92	jsr $928e			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9d95		ca		dex				dex
.9d96		ca		dex				dex
.9d97		85 36		sta $36				sta 	zTemp0 						; save required result
.9d99		68		pla				pla 								; get and save comparator
.9d9a		48		pha				pha
.9d9b		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9d9d		d0 dd		bne $9d7c			bne 	_UMMMLoop
.9d9f		20 a7 9d	jsr $9da7			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9da2		80 d8		bra $9d7c			bra 	_UMMMLoop
.9da4						_UMMMDone:
.9da4		68		pla				pla 								; throw the comparator
.9da5		c8		iny				iny 								; skip )
.9da6		60		rts				rts
.9da7						ExpCopyAboveDown:
.9da7		b5 51		lda $51,x			lda 	NSStatus+1,x
.9da9		95 50		sta $50,x			sta 	NSStatus,x
.9dab		b5 79		lda $79,x			lda 	NSExponent+1,x
.9dad		95 78		sta $78,x			sta 	NSExponent,x
.9daf		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9db1		95 58		sta $58,x			sta 	NSMantissa0,x
.9db3		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9db5		95 60		sta $60,x			sta 	NSMantissa1,x
.9db7		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9db9		95 68		sta $68,x			sta 	NSMantissa2,x
.9dbb		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9dbd		95 70		sta $70,x			sta 	NSMantissa3,x
.9dbf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9dc0						Unary_Not:
.9dc0		fa		plx				plx
.9dc1		20 8f a0	jsr $a08f			jsr 	EvaluateInteger 			; get integer
.9dc4		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9dc7		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; zero mantissa ?
.9dca		f0 04		beq $9dd0			beq 	_NotZero
.9dcc		20 22 a1	jsr $a122			jsr 	NSMSetZero
.9dcf		60		rts				rts
.9dd0						_NotZero:
.9dd0		4c 44 92	jmp $9244			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9dd3						PeekByteUnary:
.9dd3		a9 01		lda #$01			lda 	#1
.9dd5		80 0a		bra $9de1			bra 	PeekUnary
.9dd7						PeekWUnary:
.9dd7		a9 02		lda #$02			lda 	#2
.9dd9		80 06		bra $9de1			bra 	PeekUnary
.9ddb						PeekLUnary:
.9ddb		a9 03		lda #$03			lda 	#3
.9ddd		80 02		bra $9de1			bra 	PeekUnary
.9ddf						PeekDUnary:
.9ddf		a9 04		lda #$04			lda 	#4
.9de1						PeekUnary:
.9de1		fa		plx				plx 								; restore position.
.9de2		48		pha				pha 								; save count to copy on stack
.9de3		20 a2 a0	jsr $a0a2			jsr		Evaluate16BitInteger 		; address as constant.
.9de6		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9de9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9deb		85 36		sta $36				sta 	zTemp0
.9ded		b5 60		lda $60,x			lda 	NSMantissa1,x
.9def		85 37		sta $37				sta 	zTemp0+1
.9df1		20 22 a1	jsr $a122			jsr 	NSMSetZero 					; clear the result to zero.
.9df4		68		pla				pla 								; count in zTemp2
.9df5		85 3a		sta $3a				sta 	zTemp2
.9df7		da		phx				phx 								; save stack position and offset of read
.9df8		5a		phy				phy
.9df9		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9dfb						_PULoop:
.9dfb		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9dfd		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9dff		c8		iny				iny 								; next byte to write
.9e00		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9e01		18		clc				clc
.9e02		69 08		adc #$08			adc 	#MathStackSize
.9e04		aa		tax				tax
.9e05		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9e07		d0 f2		bne $9dfb			bne 	_PULoop
.9e09		7a		ply				ply 								; restore stack/code pos and exit.
.9e0a		fa		plx				plx
.9e0b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9e0c						Unary_Random:
.9e0c		fa		plx				plx
.9e0d		20 7e 9e	jsr $9e7e			jsr 	Random32Bit 				; get a random number
.9e10		20 67 9e	jsr $9e67			jsr 	URCopyToMantissa  			; put in mantissa
.9e13		b1 30		lda ($30),y			lda 	(codePtr),y
.9e15		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9e17		f0 08		beq $9e21			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9e19		e8		inx				inx
.9e1a		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9e1d		ca		dex				dex
.9e1e		20 96 93	jsr $9396			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9e21						_URNoModulus:
.9e21		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9e23		74 78		stz $78,x			stz 	NSExponent,x
.9e25		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9e28		60		rts				rts
.9e29						Unary_Rnd:
.9e29		fa		plx				plx
.9e2a		20 70 a0	jsr $a070			jsr 	EvaluateNumber 				; number to use.
.9e2d		20 be 91	jsr $91be			jsr 	CheckRightBracket 			; closing bracket
.9e30		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9e33		f0 26		beq $9e5b			beq 	_URCopySeed
.9e35		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9e37		10 1f		bpl $9e58			bpl 	_URDontSeed
.9e39		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9e3b		49 17		eor #$17			eor 	#$17
.9e3d		8d 08 04	sta $0408			sta 	randomSeed+0
.9e40		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e42		49 a5		eor #$a5			eor 	#$A5
.9e44		8d 09 04	sta $0409			sta 	randomSeed+1
.9e47		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e49		49 c2		eor #$c2			eor 	#$C2
.9e4b		8d 0a 04	sta $040a			sta 	randomSeed+2
.9e4e		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e50		49 9d		eor #$9d			eor 	#$9D
.9e52		8d 0b 04	sta $040b			sta 	randomSeed+3
.9e55		20 7e 9e	jsr $9e7e			jsr 	Random32Bit
.9e58						_URDontSeed:
.9e58		20 7e 9e	jsr $9e7e			jsr 	Random32Bit 				; generate a number
.9e5b						_URCopySeed:
.9e5b		20 67 9e	jsr $9e67			jsr 	URCopyToMantissa 			; copy into mantissa
.9e5e		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9e60		95 78		sta $78,x			sta 	NSExponent,x
.9e62		a9 08		lda #$08			lda 	#NSTFloat
.9e64		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9e66		60		rts				rts
.9e67						URCopyToMantissa:
.9e67		ad 08 04	lda $0408			lda 	randomSeed+0
.9e6a		95 58		sta $58,x			sta 	NSMantissa0,x
.9e6c		ad 09 04	lda $0409			lda 	randomSeed+1
.9e6f		95 60		sta $60,x			sta 	NSMantissa1,x
.9e71		ad 0a 04	lda $040a			lda 	randomSeed+2
.9e74		95 68		sta $68,x			sta 	NSMantissa2,x
.9e76		ad 0b 04	lda $040b			lda 	randomSeed+3
.9e79		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9e7b		95 70		sta $70,x			sta 	NSMantissa3,x
.9e7d		60		rts				rts
.9e7e						Random32Bit:
.9e7e		5a		phy				phy
.9e7f		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9e81		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9e84		d0 03		bne $9e89			bne 	_Random1
.9e86		a8		tay				tay 								; if so do it 256 times
.9e87		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9e89						_Random1:
.9e89		0a		asl a				asl 	a 							; LSFR RNG
.9e8a		2e 09 04	rol $0409			rol 	randomSeed+1
.9e8d		2e 0a 04	rol $040a			rol 	randomSeed+2
.9e90		2e 0b 04	rol $040b			rol 	randomSeed+3
.9e93		90 02		bcc $9e97			bcc 	_Random2
.9e95		49 c5		eor #$c5			eor 	#$C5
.9e97						_Random2:
.9e97		88		dey				dey
.9e98		d0 ef		bne $9e89			bne 	_Random1
.9e9a		8d 08 04	sta $0408			sta 	randomSeed+0
.9e9d		7a		ply				ply
.9e9e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9e9f						SgnUnary:
.9e9f		fa		plx				plx 								; restore stack pos
.9ea0		20 70 a0	jsr $a070			jsr 	EvaluateNumber 				; get a float or int
.9ea3		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9ea6		20 44 a1	jsr $a144			jsr 	NSMIsZero 					; if zero
.9ea9		f0 0e		beq $9eb9			beq 	_SGZero  					; return Int Zero
.9eab		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9ead		48		pha				pha
.9eae		a9 01		lda #$01			lda 	#1 							; set to 1
.9eb0		20 24 a1	jsr $a124			jsr 	NSMSetByte
.9eb3		68		pla				pla
.9eb4		29 80		and #$80			and		#$80 						; copy the sign byte out
.9eb6		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9eb8		60		rts				rts
.9eb9		20 22 a1	jsr $a122	_SGZero:jsr 	NSMSetZero
.9ebc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9ebd						ValUnary:
.9ebd		fa		plx				plx 								; restore stack pos
.9ebe		20 d3 9e	jsr $9ed3			jsr 	ValMainCode 				; do the main val() code
.9ec1		b0 01		bcs $9ec4			bcs 	_VUError 					; couldn't convert
.9ec3		60		rts				rts
.9ec4						_VUError:
.9ec4		4c aa a2	jmp $a2aa			jmp 	TypeError
.9ec7						IsValUnary:
.9ec7		fa		plx				plx 								; restore stack pos
.9ec8		20 d3 9e	jsr $9ed3			jsr 	ValMainCode 				; do the main val() code
.9ecb		b0 03		bcs $9ed0			bcs 	_VUBad
.9ecd		4c 44 92	jmp $9244			jmp 	ReturnTrue
.9ed0						_VUBad:
.9ed0		4c 4f 92	jmp $924f			jmp 	ReturnFalse
.9ed3						ValMainCode:
.9ed3		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; get a string
.9ed6		20 be 91	jsr $91be			jsr 	CheckRightBracket 			; check right bracket present
.9ed9						ValEvaluateZTemp0:
.9ed9		5a		phy				phy
.9eda		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9edc		f0 17		beq $9ef5			beq 	_VMCFail2
.9ede		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9ee0		48		pha				pha 								; save first character
.9ee1		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9ee3		d0 01		bne $9ee6			bne 	_VMCStart
.9ee5		c8		iny				iny 								; skip over -
.9ee6						_VMCStart:
.9ee6		38		sec				sec 								; initialise first time round.
.9ee7						_VMCNext:
.9ee7		c8		iny				iny 								; pre-increment
.9ee8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9eea		f0 0c		beq $9ef8			beq 	_VMCSuccess 				; successful.
.9eec		20 21 9a	jsr $9a21			jsr 	EncodeNumber 				; send it to the number-builder
.9eef		90 03		bcc $9ef4			bcc 	_VMCFail 					; if failed, give up.
.9ef1		18		clc				clc 								; next time round, countinue
.9ef2		80 f3		bra $9ee7			bra 	_VMCNext
.9ef4						_VMCFail:
.9ef4		68		pla				pla
.9ef5						_VMCFail2:
.9ef5		7a		ply				ply
.9ef6		38		sec				sec
.9ef7		60		rts				rts
.9ef8						_VMCSuccess:
.9ef8		a9 00		lda #$00			lda 	#0 							; construct final
.9efa		20 21 9a	jsr $9a21			jsr 	EncodeNumber 				; by sending a duff value.
.9efd		68		pla				pla 								; if it was -ve
.9efe		c9 2d		cmp #$2d			cmp 	#"-"
.9f00		d0 03		bne $9f05			bne 	_VMCNotNegative
.9f02		20 e4 a0	jsr $a0e4			jsr		NSMNegate 					; negate it.
.9f05						_VMCNotNegative:
.9f05		7a		ply				ply
.9f06		18		clc				clc
.9f07		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9f08						ChrUnary:
.9f08		fa		plx				plx 								; restore stack pos
.9f09		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9f0c		48		pha				pha
.9f0d		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9f10		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9f12		20 f1 b2	jsr $b2f1			jsr 	StringTempAllocate
.9f15		68		pla				pla 								; write number to it
.9f16		20 2a b3	jsr $b32a			jsr 	StringTempWrite
.9f19		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9f1a						SpcUnary:
.9f1a		fa		plx				plx 								; restore stack pos
.9f1b		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger			; get value
.9f1e		5a		phy				phy
.9f1f		48		pha				pha 								; save count
.9f20		20 f1 b2	jsr $b2f1			jsr 	StringTempAllocate
.9f23		7a		ply				ply 								; to do count in Y
.9f24						_SpcLoop:
.9f24		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9f26		f0 08		beq $9f30			beq 	_SpcExit
.9f28		a9 20		lda #$20			lda 	#32
.9f2a		20 2a b3	jsr $b32a			jsr 	StringTempWrite
.9f2d		88		dey				dey
.9f2e		80 f4		bra $9f24			bra 	_SpcLoop
.9f30						_SpcExit:
.9f30		7a		ply				ply
.9f31		20 be 91	jsr $91be			jsr 	CheckRightBracket
.9f34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9f35						Unary_Str:
.9f35		fa		plx				plx
.9f36		20 70 a0	jsr $a070			jsr 	EvaluateNumber  			; get number
.9f39		20 be 91	jsr $91be			jsr 	CheckRightBracket 			; closing bracket
.9f3c		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9f3e		20 57 9f	jsr $9f57			jsr 	ConvertNumberToString 		; do the conversion.
.9f41		a9 21		lda #$21			lda		#33 						; create buffer
.9f43		20 f1 b2	jsr $b2f1			jsr 	StringTempAllocate 			; allocate memory
.9f46		da		phx				phx  								; copy the converted string into the buffer.
.9f47		a2 00		ldx #$00			ldx 	#0
.9f49						_USCopy:
.9f49		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9f4c		20 2a b3	jsr $b32a			jsr 	StringTempWrite
.9f4f		e8		inx				inx
.9f50		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9f53		d0 f4		bne $9f49			bne 	_USCopy
.9f55		fa		plx				plx
.9f56		60		rts				rts
.9f57						ConvertNumberToString:
.9f57		5a		phy				phy 								; save code position
.9f58		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9f5b		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9f5e		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9f60		10 09		bpl $9f6b			bpl 	_CNTSNotNegative
.9f62		29 7f		and #$7f			and 	#$7F 						; make +ve
.9f64		95 50		sta $50,x			sta 	NSStatus,x
.9f66		a9 2d		lda #$2d			lda 	#"-"
.9f68		20 cc 9f	jsr $9fcc			jsr 	WriteDecimalBuffer
.9f6b						_CNTSNotNegative:
.9f6b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9f6d		f0 12		beq $9f81			beq 	_CNTSNotFloat
.9f6f		e8		inx				inx 								; round up so we don't get too many 6.999999
.9f70		a9 01		lda #$01			lda 	#1
.9f72		20 24 a1	jsr $a124			jsr 	NSMSetByte
.9f75		ca		dex				dex
.9f76		b5 78		lda $78,x			lda		NSExponent,x
.9f78		95 79		sta $79,x			sta 	NSExponent+1,x
.9f7a		a9 08		lda #$08			lda 	#NSTFloat
.9f7c		95 51		sta $51,x			sta 	NSStatus+1,x
.9f7e		20 26 97	jsr $9726			jsr 	FloatAdd
.9f81						_CNTSNotFloat:
.9f81		20 ae 9f	jsr $9fae			jsr 	MakePlusTwoString 			; do the integer part.
.9f84		20 ec 97	jsr $97ec			jsr 	FloatFractionalPart 		; get the fractional part
.9f87		20 9d 98	jsr $989d			jsr 	NSNormalise					; normalise , exit if zero
.9f8a		f0 20		beq $9fac			beq 	_CNTSExit
.9f8c		a9 2e		lda #$2e			lda 	#"."
.9f8e		20 cc 9f	jsr $9fcc			jsr 	WriteDecimalBuffer 			; write decimal place
.9f91						_CNTSDecimal:
.9f91		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9f94		30 16		bmi $9fac			bmi 	_CNTSExit
.9f96		e8		inx				inx 								; x 10.0
.9f97		a9 0a		lda #$0a			lda 	#10
.9f99		20 24 a1	jsr $a124			jsr 	NSMSetByte
.9f9c		a9 08		lda #$08			lda 	#NSTFloat
.9f9e		95 50		sta $50,x			sta 	NSStatus,x
.9fa0		ca		dex				dex
.9fa1		20 6b 98	jsr $986b			jsr 	FloatMultiply
.9fa4		20 ae 9f	jsr $9fae			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9fa7		20 ec 97	jsr $97ec			jsr 	FloatFractionalPart 		; get the fractional part
.9faa		80 e5		bra $9f91			bra 	_CNTSDecimal 				; keep going.
.9fac						_CNTSExit:
.9fac		7a		ply				ply
.9fad		60		rts				rts
.9fae						MakePlusTwoString:
.9fae		da		phx				phx
.9faf		20 05 a1	jsr $a105			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9fb2		e8		inx				inx 								; access it
.9fb3		e8		inx				inx
.9fb4		20 44 98	jsr $9844			jsr 	FloatIntegerPart 			; make it an integer
.9fb7		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9fb9		20 56 96	jsr $9656			jsr 	ConvertInt32
.9fbc		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9fbe						_MPTSCopy:
.9fbe		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9fc1		20 cc 9f	jsr $9fcc			jsr 	WriteDecimalBuffer
.9fc4		e8		inx				inx
.9fc5		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9fc8		d0 f4		bne $9fbe			bne 	_MPTSCopy
.9fca		fa		plx				plx
.9fcb		60		rts				rts
.9fcc						WriteDecimalBuffer:
.9fcc		da		phx				phx
.9fcd		ae 15 04	ldx $0415			ldx 	dbOffset
.9fd0		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9fd3		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9fd6		ee 15 04	inc $0415			inc 	dbOffset
.9fd9		fa		plx				plx
.9fda		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9fdb						Unary_Left:
.9fdb		fa		plx				plx
.9fdc		18		clc				clc 								; only one parameter
.9fdd		20 40 a0	jsr $a040			jsr 	SubstringInitial 			; set up.
.9fe0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9fe2		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9fe4		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9fe6		80 25		bra $a00d			bra 	SubstringMain
.9fe8						Unary_Right:
.9fe8		fa		plx				plx
.9fe9		18		clc				clc 								; only one parameter
.9fea		20 40 a0	jsr $a040			jsr 	SubstringInitial 			; set up.
.9fed		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9fef		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9ff1		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9ff3		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9ff5		b0 02		bcs $9ff9			bcs 	_URNotUnderflow
.9ff7		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ff9						_URNotUnderflow:
.9ff9		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ffb		80 10		bra $a00d			bra 	SubstringMain
.9ffd						Unary_Mid:
.9ffd		fa		plx				plx
.9ffe		38		sec				sec 								; two parameters
.9fff		20 40 a0	jsr $a040			jsr 	SubstringInitial 			; set up.
.a002		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a004		f0 04		beq $a00a			beq 	_UMError
.a006		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a008		80 03		bra $a00d			bra 	SubstringMain
.a00a						_UMError:
.a00a		4c af a2	jmp $a2af			jmp 	ArgumentError
.a00d						SubstringMain:
.a00d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a00f		d5 78		cmp $78,x			cmp 	NSExponent,x
.a011		b0 27		bcs $a03a			bcs 	_SSMNull 					; if so, return an empty string.
.a013		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a015		f0 23		beq $a03a			beq 	_SSMNull 					; return empty string.
.a017		18		clc				clc 								; add the offset +1 to the address and
.a018		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a01a		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a01c		85 36		sta $36				sta 	zTemp0
.a01e		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a020		69 00		adc #$00			adc 	#0
.a022		85 37		sta $37				sta 	zTemp0+1
.a024						_SSMNoCarry:
.a024		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a026		20 f1 b2	jsr $b2f1			jsr 	StringTempAllocate 			; allocate that many characters
.a029		5a		phy				phy 								; save Y
.a02a		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a02c						_SSMCopy:
.a02c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a02e		f0 08		beq $a038			beq 	_SSMEString 				; no more to copy
.a030		20 2a b3	jsr $b32a			jsr 	StringTempWrite 			; and write it out.
.a033		c8		iny				iny
.a034		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a036		d0 f4		bne $a02c			bne 	_SSMCopy
.a038						_SSMEString:
.a038		7a		ply				ply
.a039						_SSMExit:
.a039		60		rts				rts
.a03a						_SSMNull:
.a03a		a9 00		lda #$00			lda 	#0
.a03c		20 f1 b2	jsr $b2f1			jsr 	StringTempAllocate
.a03f		60		rts				rts
.a040						SubstringInitial:
.a040		da		phx				phx 								; save initial stack position
.a041		08		php				php 								; save carry on stack indicating 2 parameters
.a042		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; get a string
.a045		5a		phy				phy 								; calculate length to exponent.
.a046		a0 ff		ldy #$ff			ldy 	#$FF
.a048						_SIFindLength:
.a048		c8		iny				iny
.a049		b1 36		lda ($36),y			lda 	(zTemp0),y
.a04b		d0 fb		bne $a048			bne 	_SIFindLength
.a04d		98		tya				tya
.a04e		95 78		sta $78,x			sta 	NSExponent,x
.a050		7a		ply				ply
.a051		e8		inx				inx
.a052		20 c6 91	jsr $91c6			jsr 	CheckComma 					; comma next
.a055		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get next parameter
.a058		28		plp				plp 								; is it the last parameter ?
.a059		90 07		bcc $a062			bcc 	_SSIExit 					; if so, exit.
.a05b		e8		inx				inx
.a05c		20 c6 91	jsr $91c6			jsr 	CheckComma 					; comma next
.a05f		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get last parameter
.a062						_SSIExit:
.a062		fa		plx				plx
.a063		20 be 91	jsr $91be			jsr 	CheckRightBracket 			; check closing bracket
.a066		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a067						EvaluateValue:
.a067		48		pha				pha
.a068		20 db 96	jsr $96db			jsr		EvaluateExpression 			; expression
.a06b		20 9e 99	jsr $999e			jsr 	Dereference					; derefernce it
.a06e		68		pla				pla
.a06f		60		rts				rts
.a070						EvaluateNumber:
.a070		20 67 a0	jsr $a067			jsr 	EvaluateValue 				; get a value
.a073		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a075		29 10		and #$10			and 	#NSBIsString
.a077		d0 13		bne $a08c			bne 	HelperTypeError
.a079		60		rts				rts
.a07a						EvaluateString:
.a07a		20 67 a0	jsr $a067			jsr 	EvaluateValue 				; get a value
.a07d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a07f		29 10		and #$10			and 	#NSBIsString
.a081		f0 09		beq $a08c			beq 	HelperTypeError
.a083						CopyAddressToTemp0:
.a083		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a085		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a087		b5 60		lda $60,x			lda 	NSMantissa1,x
.a089		85 37		sta $37				sta 	zTemp0+1
.a08b		60		rts				rts
.a08c						HelperTypeError:
.a08c		4c aa a2	jmp $a2aa			jmp 	TypeError
.a08f						EvaluateInteger:
.a08f		20 70 a0	jsr $a070			jsr 	EvaluateNumber
.a092		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a094		d0 09		bne $a09f			bne 	HelperValueError 			; if not, it's a float.
.a096		60		rts				rts
.a097						EvaluateUnsignedInteger:
.a097		20 8f a0	jsr $a08f			jsr 	EvaluateInteger 			; check integer is +ve
.a09a		b5 50		lda $50,x			lda 	NSStatus,x
.a09c		30 01		bmi $a09f			bmi 	HelperValueError
.a09e		60		rts				rts
.a09f						HelperValueError:
.a09f		4c af a2	jmp $a2af			jmp 	ArgumentError
.a0a2						Evaluate16BitInteger:
.a0a2		20 97 a0	jsr $a097			jsr	 	EvaluateUnsignedInteger		; get integer
.a0a5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a0a7		15 68		ora $68,x			ora 	NSMantissa2,x
.a0a9		d0 f4		bne $a09f			bne 	HelperValueError
.a0ab		60		rts				rts
.a0ac						Evaluate16BitIntegerSigned:
.a0ac		20 8f a0	jsr $a08f			jsr	 	EvaluateInteger				; get integer
.a0af		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a0b1		15 68		ora $68,x			ora 	NSMantissa2,x
.a0b3		d0 ea		bne $a09f			bne 	HelperValueError
.a0b5		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a0b7		10 03		bpl $a0bc			bpl 	_EISNotSigned
.a0b9		20 eb a0	jsr $a0eb			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a0bc						_EISNotSigned:
.a0bc		60		rts				rts
.a0bd						Evaluate8BitInteger:
.a0bd		20 97 a0	jsr $a097			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a0c0		d0 dd		bne $a09f			bne 	HelperValueError
.a0c2		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a0c4		15 68		ora $68,x			ora 	NSMantissa2,x
.a0c6		15 60		ora $60,x			ora 	NSMantissa1,x
.a0c8		d0 d5		bne $a09f			bne 	HelperValueError
.a0ca		b5 58		lda $58,x			lda 	NSMantissa0,x
.a0cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a0cd						Multiply8x8:
.a0cd		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a0ce		85 36		sta $36			  	sta 	zTemp0
.a0d0		86 37		stx $37				stx 	zTemp0+1
.a0d2		a9 00		lda #$00			lda 	#0
.a0d4		a2 08		ldx #$08			ldx 	#8
.a0d6						_M88Loop:
.a0d6		90 03		bcc $a0db			bcc 	_M88NoAdd
.a0d8		18		clc				clc
.a0d9		65 37		adc $37				adc 	zTemp0+1
.a0db						_M88NoAdd:
.a0db		6a		ror a				ror 	a
.a0dc		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a0de		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a0df		d0 f5		bne $a0d6			bne 	_M88Loop
.a0e1		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a0e3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a0e4						NSMNegate:
.a0e4		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a0e6		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a0e8		95 50		sta $50,x			sta 	NSStatus,x
.a0ea		60		rts				rts
.a0eb						NSMNegateMantissa:
.a0eb		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a0ec		a9 00		lda #$00			lda 	#0
.a0ee		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a0f0		95 58		sta $58,x			sta 	NSMantissa0,x
.a0f2		a9 00		lda #$00			lda 	#0
.a0f4		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a0f6		95 60		sta $60,x			sta 	NSMantissa1,x
.a0f8		a9 00		lda #$00			lda 	#0
.a0fa		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a0fc		95 68		sta $68,x			sta 	NSMantissa2,x
.a0fe		a9 00		lda #$00			lda 	#0
.a100		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a102		95 70		sta $70,x			sta 	NSMantissa3,x
.a104		60		rts				rts
.a105						NSMShiftUpTwo:
.a105		b5 58		lda $58,x			lda 	NSMantissa0,x
.a107		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a109		b5 60		lda $60,x			lda 	NSMantissa1,x
.a10b		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a10d		b5 68		lda $68,x			lda 	NSMantissa2,x
.a10f		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a111		b5 70		lda $70,x			lda 	NSMantissa3,x
.a113		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a115		b5 78		lda $78,x			lda 	NSExponent,x
.a117		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a119		b5 50		lda $50,x			lda 	NSStatus,x
.a11b		95 52		sta $52,x			sta 	NSStatus+2,x
.a11d		60		rts				rts
.a11e						NSMSetZeroMantissaOnly:
.a11e		a9 00		lda #$00			lda 	#0
.a120		80 06		bra $a128			bra 	NSMSetMantissa
.a122						NSMSetZero:
.a122		a9 00		lda #$00			lda 	#0
.a124						NSMSetByte:
.a124		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a126		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a128						NSMSetMantissa:
.a128		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a12a		74 60		stz $60,x			stz 	NSMantissa1,x
.a12c		74 68		stz $68,x			stz 	NSMantissa2,x
.a12e		74 70		stz $70,x			stz 	NSMantissa3,x
.a130		60		rts				rts
.a131						NSMShiftLeft:
.a131		18		clc				clc
.a132						NSMRotateLeft:
.a132		36 58		rol $58,x			rol 	NSMantissa0,x
.a134		36 60		rol $60,x			rol		NSMantissa1,x
.a136		36 68		rol $68,x			rol		NSMantissa2,x
.a138		36 70		rol $70,x			rol		NSMantissa3,x
.a13a		60		rts				rts
.a13b						NSMShiftRight:
.a13b		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a13d		76 68		ror $68,x			ror		NSMantissa2,x
.a13f		76 60		ror $60,x			ror		NSMantissa1,x
.a141		76 58		ror $58,x			ror		NSMantissa0,x
.a143		60		rts				rts
.a144						NSMIsZero:
.a144		b5 70		lda $70,x			lda 	NSMantissa3,x
.a146		15 68		ora $68,x			ora		NSMantissa2,x
.a148		15 60		ora $60,x			ora		NSMantissa1,x
.a14a		15 58		ora $58,x			ora		NSMantissa0,x
.a14c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a14d						TickHandler:
.a14d		5a		phy				phy 								; need to preserve Y
.a14e		20 99 80	jsr $8099			jsr 	SNDUpdate 					; update sound
.a151		7a		ply				ply
.a152		60		rts				rts
.0662						LastTick:
>0662								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a153						Assemble_ora:
.a153		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a156		01					.byte $01
.a157						Assemble_and:
.a157		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a15a		21					.byte $21
.a15b						Assemble_eor:
.a15b		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a15e		41					.byte $41
.a15f						Assemble_adc:
.a15f		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a162		61					.byte $61
.a163						Assemble_sta:
.a163		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a166		81					.byte $81
.a167						Assemble_lda:
.a167		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a16a		a1					.byte $a1
.a16b						Assemble_cmp:
.a16b		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a16e		c1					.byte $c1
.a16f						Assemble_sbc:
.a16f		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a172		e1					.byte $e1
.a173						Assemble_asl:
.a173		20 01 81	jsr $8101		jsr	AssembleGroup2
>a176		02					.byte $02
>a177		75					.byte $75
.a178						Assemble_rol:
.a178		20 01 81	jsr $8101		jsr	AssembleGroup2
>a17b		22					.byte $22
>a17c		75					.byte $75
.a17d						Assemble_lsr:
.a17d		20 01 81	jsr $8101		jsr	AssembleGroup2
>a180		42					.byte $42
>a181		75					.byte $75
.a182						Assemble_ror:
.a182		20 01 81	jsr $8101		jsr	AssembleGroup2
>a185		62					.byte $62
>a186		75					.byte $75
.a187						Assemble_stx:
.a187		20 01 81	jsr $8101		jsr	AssembleGroup2
>a18a		82					.byte $82
>a18b		50					.byte $50
.a18c						Assemble_ldx:
.a18c		20 01 81	jsr $8101		jsr	AssembleGroup2
>a18f		a2					.byte $a2
>a190		d0					.byte $d0
.a191						Assemble_dec:
.a191		20 01 81	jsr $8101		jsr	AssembleGroup2
>a194		c2					.byte $c2
>a195		55					.byte $55
.a196						Assemble_inc:
.a196		20 01 81	jsr $8101		jsr	AssembleGroup2
>a199		e2					.byte $e2
>a19a		55					.byte $55
.a19b						Assemble_stz:
.a19b		20 01 81	jsr $8101		jsr	AssembleGroup2
>a19e		60					.byte $60
>a19f		44					.byte $44
.a1a0						Assemble_bit:
.a1a0		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1a3		20					.byte $20
>a1a4		55					.byte $55
.a1a5						Assemble_sty:
.a1a5		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1a8		80					.byte $80
>a1a9		54					.byte $54
.a1aa						Assemble_ldy:
.a1aa		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1ad		a0					.byte $a0
>a1ae		d5					.byte $d5
.a1af						Assemble_cpy:
.a1af		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1b2		c0					.byte $c0
>a1b3		d4					.byte $d4
.a1b4						Assemble_cpx:
.a1b4		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1b7		e0					.byte $e0
>a1b8		d0					.byte $d0
.a1b9						Assemble_tsb:
.a1b9		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1bc		00					.byte $00
>a1bd		50					.byte $50
.a1be						Assemble_trb:
.a1be		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1c1		10					.byte $10
>a1c2		50					.byte $50
.a1c3						Assemble_jsr:
.a1c3		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1c6		14					.byte $14
>a1c7		10					.byte $10
.a1c8						Assemble_jmp:
.a1c8		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1cb		40					.byte $40
>a1cc		10					.byte $10
.a1cd						Assemble_bpl:
.a1cd		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1d0		10					.byte $10
.a1d1						Assemble_bmi:
.a1d1		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1d4		30					.byte $30
.a1d5						Assemble_bvc:
.a1d5		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1d8		50					.byte $50
.a1d9						Assemble_bvs:
.a1d9		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1dc		70					.byte $70
.a1dd						Assemble_bcc:
.a1dd		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1e0		90					.byte $90
.a1e1						Assemble_bcs:
.a1e1		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1e4		b0					.byte $b0
.a1e5						Assemble_bne:
.a1e5		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1e8		d0					.byte $d0
.a1e9						Assemble_beq:
.a1e9		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1ec		f0					.byte $f0
.a1ed						Assemble_bra:
.a1ed		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1f0		80					.byte $80
.a1f1						Assemble_brk:
.a1f1		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1f4		00					.byte $00
.a1f5						Assemble_php:
.a1f5		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1f8		08					.byte $08
.a1f9						Assemble_clc:
.a1f9		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1fc		18					.byte $18
.a1fd						Assemble_plp:
.a1fd		20 86 81	jsr $8186		jsr	AssembleGroup4
>a200		28					.byte $28
.a201						Assemble_sec:
.a201		20 86 81	jsr $8186		jsr	AssembleGroup4
>a204		38					.byte $38
.a205						Assemble_rti:
.a205		20 86 81	jsr $8186		jsr	AssembleGroup4
>a208		40					.byte $40
.a209						Assemble_pha:
.a209		20 86 81	jsr $8186		jsr	AssembleGroup4
>a20c		48					.byte $48
.a20d						Assemble_cli:
.a20d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a210		58					.byte $58
.a211						Assemble_phy:
.a211		20 86 81	jsr $8186		jsr	AssembleGroup4
>a214		5a					.byte $5a
.a215						Assemble_rts:
.a215		20 86 81	jsr $8186		jsr	AssembleGroup4
>a218		60					.byte $60
.a219						Assemble_pla:
.a219		20 86 81	jsr $8186		jsr	AssembleGroup4
>a21c		68					.byte $68
.a21d						Assemble_sei:
.a21d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a220		78					.byte $78
.a221						Assemble_ply:
.a221		20 86 81	jsr $8186		jsr	AssembleGroup4
>a224		7a					.byte $7a
.a225						Assemble_dey:
.a225		20 86 81	jsr $8186		jsr	AssembleGroup4
>a228		88					.byte $88
.a229						Assemble_txa:
.a229		20 86 81	jsr $8186		jsr	AssembleGroup4
>a22c		8a					.byte $8a
.a22d						Assemble_tya:
.a22d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a230		98					.byte $98
.a231						Assemble_txs:
.a231		20 86 81	jsr $8186		jsr	AssembleGroup4
>a234		9a					.byte $9a
.a235						Assemble_tay:
.a235		20 86 81	jsr $8186		jsr	AssembleGroup4
>a238		a8					.byte $a8
.a239						Assemble_tax:
.a239		20 86 81	jsr $8186		jsr	AssembleGroup4
>a23c		aa					.byte $aa
.a23d						Assemble_clv:
.a23d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a240		b8					.byte $b8
.a241						Assemble_tsx:
.a241		20 86 81	jsr $8186		jsr	AssembleGroup4
>a244		ba					.byte $ba
.a245						Assemble_iny:
.a245		20 86 81	jsr $8186		jsr	AssembleGroup4
>a248		c8					.byte $c8
.a249						Assemble_dex:
.a249		20 86 81	jsr $8186		jsr	AssembleGroup4
>a24c		ca					.byte $ca
.a24d						Assemble_cld:
.a24d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a250		d8					.byte $d8
.a251						Assemble_phx:
.a251		20 86 81	jsr $8186		jsr	AssembleGroup4
>a254		da					.byte $da
.a255						Assemble_stp:
.a255		20 86 81	jsr $8186		jsr	AssembleGroup4
>a258		db					.byte $db
.a259						Assemble_inx:
.a259		20 86 81	jsr $8186		jsr	AssembleGroup4
>a25c		e8					.byte $e8
.a25d						Assemble_nop:
.a25d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a260		ea					.byte $ea
.a261						Assemble_sed:
.a261		20 86 81	jsr $8186		jsr	AssembleGroup4
>a264		f8					.byte $f8
.a265						Assemble_plx:
.a265		20 86 81	jsr $8186		jsr	AssembleGroup4
>a268		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a269						DecimalScalarTable:
>a269		66 66 66 66				.dword $66666666 ; 0.1
>a26d		de					.byte $de
>a26e		1f 85 eb 51				.dword $51eb851f ; 0.01
>a272		db					.byte $db
>a273		4c 37 89 41				.dword $4189374c ; 0.001
>a277		d8					.byte $d8
>a278		ac 8b db 68				.dword $68db8bac ; 0.0001
>a27c		d4					.byte $d4
>a27d		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a281		d1					.byte $d1
>a282		83 de 1b 43				.dword $431bde83 ; 1e-06
>a286		ce					.byte $ce
>a287		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a28b		ca					.byte $ca
>a28c		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a290		c7					.byte $c7
>a291		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a295		c4					.byte $c4
>a296		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a29a		c0					.byte $c0
>a29b		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a29f		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a2a0						SyntaxError:
.a2a0		a9 02		lda #$02		lda	#2
.a2a2		4c d7 91	jmp $91d7		jmp	ErrorHandler
.a2a5						RangeError:
.a2a5		a9 04		lda #$04		lda	#4
.a2a7		4c d7 91	jmp $91d7		jmp	ErrorHandler
.a2aa						TypeError:
.a2aa		a9 05		lda #$05		lda	#5
.a2ac		4c d7 91	jmp $91d7		jmp	ErrorHandler
.a2af						ArgumentError:
.a2af		a9 07		lda #$07		lda	#7
.a2b1		4c d7 91	jmp $91d7		jmp	ErrorHandler
.a2b4						NotDoneError:
.a2b4		a9 0c		lda #$0c		lda	#12
.a2b6		4c d7 91	jmp $91d7		jmp	ErrorHandler
.a2b9						ErrorText:
>a2b9		42 72 65 61 6b 00			.text	"Break",0
>a2bf		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a2c7		72 72 6f 72 00
>a2cc		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a2d4		20 62 79 20 7a 65 72 6f 00
>a2dd		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a2e5		61 6e 67 65 00
>a2ea		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a2f2		6d 61 74 63 68 00
>a2f8		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a300		65 6d 6f 72 79 00
>a306		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a30e		61 72 67 75 6d 65 6e 74 00
>a317		53 74 6f 70 00				.text	"Stop",0
>a31c		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a324		6f 6f 20 6c 6f 6e 67 00
>a32c		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a334		6e 20 66 61 69 6c 65 64 00
>a33d		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a345		61 74 61 00
>a349		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a351		65 6e 74 65 64 00
>a357		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a35f		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a36b		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a373		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a380		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a388		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a395		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a39d		68 6f 75 74 20 57 68 69 6c 65 00
>a3a8		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a3b0		68 6f 75 74 20 46 6f 72 00
>a3b9		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a3c1		61 63 6b 20 66 75 6c 6c 00
>a3ca		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a3d2		75 63 74 75 72 65 00
>a3d9		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a3e1		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a3ee		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a3f6		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a404		41 72 72 61 79 20 73 69			.text	"Array size",0
>a40c		7a 65 00
>a40f		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a417		79 20 69 6e 64 65 78 00
>a41f		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a427		74 20 64 65 63 6c 61 72 65 64 00
>a432		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a43a		20 66 6f 75 6e 64 00
>a441		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a449		65 72 72 6f 72 00
>a44f		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a457		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dd54		09 09 30 33 2f 30 31 2f			.text 9,9,"03/01/23  23"
>dd5c		32 33 20 20 32 33

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a45d						RectangleCommand:
.a45d		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a45f		80 02		bra $a463			bra 	ShapeDrawCmd
.a461						CircleCommand:
.a461		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a463						ShapeDrawCmd:
.a463		20 ed a4	jsr $a4ed			jsr 	RunGraphicsCommand
.a466						ShapeDraw:
.a466		0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a469		4c e1 a4	jmp $a4e1			jmp 	ExecuteGraphicCommand	 	; and complete
.a46c						SpriteCommand:
.a46c		a2 00		ldx #$00			ldx 	#0
.a46e		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get image number.
.a471		5a		phy				phy
.a472		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a474		a6 58		ldx $58				ldx 	NSMantissa0
.a476		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a478		b0 0d		bcs $a487			bcs 	_SCRange
.a47a		a0 ff		ldy #$ff			ldy 	#255
.a47c		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a47f		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a481		7a		ply				ply
.a482		20 ed a4	jsr $a4ed			jsr 	RunGraphicsCommand
.a485		80 5a		bra $a4e1			bra 	ExecuteGraphicCommand
.a487						_SCRange:
.a487		4c a5 a2	jmp $a2a5			jmp 	RangeError
.a48a						ImageCommand:
.a48a		a2 00		ldx #$00			ldx 	#0
.a48c		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get image number.
.a48f		20 ed a4	jsr $a4ed			jsr 	RunGraphicsCommand
.a492						ImageRunDraw:
.a492		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a494		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a497		ad 6a 06	lda $066a			lda 	gxDrawScale
.a49a		0a		asl a				asl 	a
.a49b		0a		asl a				asl 	a
.a49c		0a		asl a				asl 	a
.a49d		a8		tay				tay
.a49e		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a4a0		a6 58		ldx $58				ldx 	NSMantissa0
.a4a2		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4a5		60		rts				rts
.a4a6						TextCommand:
.a4a6		a2 00		ldx #$00			ldx 	#0
.a4a8		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; get text
.a4ab		20 ed a4	jsr $a4ed			jsr 	RunGraphicsCommand
.a4ae						TextRunDraw:
.a4ae		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a4b0		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4b3		a0 00		ldy #$00			ldy 	#0
.a4b5						_IRDLoop:
.a4b5		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a4b7		85 37		sta $37				sta 	zTemp0+1
.a4b9		a5 58		lda $58				lda 	NSMantissa0
.a4bb		85 36		sta $36				sta 	zTemp0
.a4bd		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4bf		f0 13		beq $a4d4			beq 	_IRDExit
.a4c1		5a		phy				phy									; save string pos
.a4c2		48		pha				pha 								; save char
.a4c3		ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.a4c6		0a		asl a				asl 	a
.a4c7		0a		asl a				asl 	a
.a4c8		0a		asl a				asl 	a
.a4c9		a8		tay				tay
.a4ca		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a4cc		fa		plx				plx 								; char to draw
.a4cd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4d0		7a		ply				ply 								; restore string pos
.a4d1		c8		iny				iny
.a4d2		90 e1		bcc $a4b5			bcc 	_IRDLoop 					; go back if no error.
.a4d4						_IRDExit:
.a4d4		60		rts				rts
.a4d5						PlotCommand:
.a4d5		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a4d7		20 ed a4	jsr $a4ed			jsr 	RunGraphicsCommand
.a4da		80 05		bra $a4e1			bra 	ExecuteGraphicCommand
.a4dc						LineCommand:
.a4dc		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a4de		20 ed a4	jsr $a4ed			jsr 	RunGraphicsCommand
.a4e1						ExecuteGraphicCommand:
.a4e1		0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.a4e4		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.a4e7		b0 01		bcs $a4ea			bcs 	_EGCError
.a4e9		60		rts				rts
.a4ea						_EGCError:
.a4ea		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
.a4ed						RunGraphicsCommand:
.a4ed		8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.a4f0		68		pla				pla 								; pop handler address
.a4f1		fa		plx				plx
.a4f2		1a		inc a				inc 	a
.a4f3		d0 01		bne $a4f6			bne 	_RGINoCarry
.a4f5		e8		inx				inx
.a4f6						_RGINoCarry:
.a4f6		8d 68 06	sta $0668			sta 	gxHandler
.a4f9		8e 69 06	stx $0669			stx 	gxHandler+1
.a4fc						_RGICommandLoop:
.a4fc		b1 30		lda ($30),y			lda 	(codePtr),y
.a4fe		c8		iny				iny
.a4ff		c9 d9		cmp #$d9			cmp 	#KWD_TO						; is it TO x,y
.a501		f0 53		beq $a556			beq 	_RGI_To
.a503		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a505		f0 55		beq $a55c			beq 	_RGI_Here
.a507		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a509		f0 3d		beq $a548			beq 	_RGI_Exit
.a50b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a50d		f0 39		beq $a548			beq 	_RGI_Exit
.a50f		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a511		f0 3e		beq $a551			beq 	_RGI_Frame
.a513		c9 d5		cmp #$d5			cmp 	#KWD_SOLID
.a515		f0 33		beq $a54a			beq 	_RGI_Solid
.a517		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a519		f0 4b		beq $a566			beq 	_RGI_By
.a51b		c9 bd		cmp #$bd			cmp 	#KWD_FROM 					; from
.a51d		f0 17		beq $a536			beq 	_RGI_Move2
.a51f		c9 ba		cmp #$ba			cmp 	#KWD_DIM 					; dim (set scale)
.a521		f0 62		beq $a585			beq 	_RGI_Dim
.a523		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a525		f0 74		beq $a59b			beq 	_RGI_Colour
.a527		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a529		f0 70		beq $a59b			beq 	_RGI_Colour
.a52b		ae 63 06	ldx $0663			ldx 	gxCommandID
.a52e		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a530		d0 03		bne $a535			bne 	_RGI_Move 					; move
.a532		4c c3 a5	jmp $a5c3			jmp		_RGI_SpriteInstructions
.a535						_RGI_Move:
.a535		88		dey				dey 								; unpick get.
.a536						_RGI_Move2:
.a536		20 e9 a5	jsr $a5e9			jsr 	GCGetCoordinatePair 		; move to here
.a539		20 10 a6	jsr $a610			jsr 	GCCopyPairToStore 			; save
.a53c		5a		phy				phy
.a53d		20 06 a6	jsr $a606			jsr 	GCLoadAXY 					; load in
.a540		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a542		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a545		7a		ply				ply
.a546		80 b4		bra $a4fc			bra 	_RGICommandLoop 			; and go round
.a548						_RGI_Exit:
.a548		88		dey				dey 								; unpick : / EOL
.a549		60		rts				rts
.a54a						_RGI_Solid:
.a54a		a9 02		lda #$02			lda 	#2
.a54c		8d 64 06	sta $0664			sta 	gxFillSolid
.a54f		80 ab		bra $a4fc			bra 	_RGICommandLoop
.a551						_RGI_Frame:
.a551		9c 64 06	stz $0664			stz 	gxFillSolid
.a554		80 a6		bra $a4fc			bra 	_RGICommandLoop
.a556						_RGI_To:
.a556		20 e9 a5	jsr $a5e9			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a559		20 10 a6	jsr $a610			jsr 	GCCopyPairToStore
.a55c						_RGI_Here:
.a55c		5a		phy				phy
.a55d		20 06 a6	jsr $a606			jsr 	GCLoadAXY 					; load it into AXY
.a560		20 c0 a5	jsr $a5c0			jsr 	_RGICallHandler 			; go do whatever it is.
.a563		7a		ply				ply
.a564		80 96		bra $a4fc			bra 	_RGICommandLoop 			; and go round
.a566						_RGI_By:
.a566		20 f6 a5	jsr $a5f6			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a569		18		clc				clc
.a56a		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a56c		6d 65 06	adc $0665			adc 	gxXPos
.a56f		8d 65 06	sta $0665			sta 	gxXPos
.a572		a5 61		lda $61				lda 	NSMantissa1+1
.a574		6d 66 06	adc $0666			adc 	gxXPos+1
.a577		8d 66 06	sta $0666			sta 	gxXPos+1
.a57a		a5 5a		lda $5a				lda 	NSMantissa0+2
.a57c		18		clc				clc
.a57d		6d 67 06	adc $0667			adc 	gxYPos
.a580		8d 67 06	sta $0667			sta 	gxYPos
.a583		80 d7		bra $a55c			bra 	_RGI_Here
.a585						_RGI_Dim:
.a585		a2 01		ldx #$01			ldx	 	#1
.a587		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger
.a58a		a5 59		lda $59				lda 	NSMantissa0+1
.a58c		c9 00		cmp #$00			cmp 	#0
.a58e		f0 2d		beq $a5bd			beq 	_RGIRange
.a590		c9 09		cmp #$09			cmp 	#8+1
.a592		b0 29		bcs $a5bd			bcs		_RGIRange
.a594		3a		dec a				dec 	a
.a595		8d 6a 06	sta $066a			sta 	gxDrawScale
.a598		4c fc a4	jmp $a4fc			jmp 	_RGICommandLoop
.a59b						_RGI_Colour:
.a59b		a2 01		ldx #$01			ldx 	#1 							; colour
.a59d		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger
.a5a0		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a5a2		20 22 a1	jsr $a122			jsr 	NSMSetZero
.a5a5		b1 30		lda ($30),y			lda 	(codePtr),y
.a5a7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a5a9		d0 04		bne $a5af			bne 	_RGICDefaultMode
.a5ab		c8		iny				iny
.a5ac		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger
.a5af						_RGICDefaultMode:
.a5af		5a		phy				phy
.a5b0		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a5b2		a6 59		ldx $59				ldx 	NSMantissa0+1
.a5b4		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a5b6		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5b9		7a		ply				ply
.a5ba		4c fc a4	jmp $a4fc			jmp 	_RGICommandLoop 			; and go round
.a5bd						_RGIRange:
.a5bd		4c a5 a2	jmp $a2a5			jmp 	RangeError
.a5c0						_RGICallHandler:
.a5c0		6c 68 06	jmp ($0668)			jmp 	(gxHandler)
.a5c3						_RGI_SpriteInstructions:
.a5c3		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a5c5		f0 07		beq $a5ce			beq 	_RGISpriteOff
.a5c7		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a5c9		f0 13		beq $a5de			beq 	_RGISetImage
.a5cb		4c 35 a5	jmp $a535			jmp 	_RGI_Move
.a5ce						_RGISpriteOff:
.a5ce		5a		phy				phy
.a5cf		a0 01		ldy #$01			ldy 	#1
.a5d1		a2 00		ldx #$00			ldx 	#0
.a5d3						_RGIDoCommandLoop:
.a5d3		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a5d5		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5d8		7a		ply				ply
.a5d9		b0 e2		bcs $a5bd			bcs 	_RGIRange
.a5db		4c fc a4	jmp $a4fc			jmp 	_RGICommandLoop
.a5de						_RGISetImage:
.a5de		a2 01		ldx #$01			ldx 	#1
.a5e0		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger
.a5e3		5a		phy				phy
.a5e4		aa		tax				tax
.a5e5		a0 00		ldy #$00			ldy 	#0
.a5e7		80 ea		bra $a5d3			bra 	_RGIDoCommandLoop
.a5e9						GCGetCoordinatePair:
.a5e9		a2 01		ldx #$01			ldx 	#1
.a5eb		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger
.a5ee		20 c6 91	jsr $91c6			jsr 	CheckComma
.a5f1		e8		inx				inx
.a5f2		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger
.a5f5		60		rts				rts
.a5f6						GCSignedCoordinatePair:
.a5f6		a2 01		ldx #$01			ldx 	#1
.a5f8		20 ac a0	jsr $a0ac			jsr 	Evaluate16BitIntegerSigned
.a5fb		20 c6 91	jsr $91c6			jsr 	CheckComma
.a5fe		e8		inx				inx
.a5ff		20 ac a0	jsr $a0ac			jsr 	Evaluate16BitIntegerSigned
.a602		60		rts				rts
.a603						_GCCPRange:
.a603		4c a5 a2	jmp $a2a5			jmp 	RangeError
.a606						GCLoadAXY:
.a606		ad 66 06	lda $0666			lda 	gxXPos+1
.a609		ae 65 06	ldx $0665			ldx 	gxXPos
.a60c		ac 67 06	ldy $0667			ldy 	gxYPos
.a60f		60		rts				rts
.a610						GCCopyPairToStore:
.a610		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a612		8d 65 06	sta $0665			sta 	gxXPos
.a615		a5 61		lda $61				lda 	NSMantissa1+1
.a617		8d 66 06	sta $0666			sta 	gxXPos+1
.a61a		a5 5a		lda $5a				lda 	NSMantissa0+2
.a61c		8d 67 06	sta $0667			sta 	gxYPos
.a61f		60		rts				rts
.0663						gxCommandID:
>0663								.fill 	1
.0664						gxFillSolid:
>0664								.fill 	1
.0665						gxXPos:
>0665								.fill 	2
.0667						gxYPos:
>0667								.fill 	1
.0668						gxHandler:
>0668								.fill 	2
.066a						gxDrawScale:
>066a								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a620						BitmapCtrl:
.a620		b1 30		lda ($30),y			lda 	(codePtr),y
.a622		c8		iny				iny
.a623		a2 01		ldx #$01			ldx 	#1
.a625		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a627		f0 11		beq $a63a			beq 	BitmapSwitch
.a629		ca		dex				dex
.a62a		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a62c		f0 0c		beq $a63a			beq 	BitmapSwitch
.a62e		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get the colour
.a631		5a		phy				phy
.a632		aa		tax				tax
.a633		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a635		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a638		7a		ply				ply
.a639		60		rts				rts
.a63a						BitmapSwitch:
.a63a		5a		phy				phy
.a63b		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a63d		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a63f		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a642		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a644		a0 00		ldy #$00			ldy 	#0
.a646		a2 ff		ldx #$ff			ldx 	#$FF
.a648		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a64b		9c 64 06	stz $0664			stz 	gxFillSolid
.a64e		9c 65 06	stz $0665			stz 	gxXPos
.a651		9c 66 06	stz $0666			stz 	gxXPos+1
.a654		9c 67 06	stz $0667			stz 	gxYPos
.a657		9c 6a 06	stz $066a			stz 	gxDrawScale
.a65a		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a65c		a2 00		ldx #$00			ldx 	#0
.a65e		a0 00		ldy #$00			ldy 	#0
.a660		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a663		7a		ply				ply
.a664		60		rts				rts
.a665						SpritesCtrl:
.a665		b1 30		lda ($30),y			lda 	(codePtr),y
.a667		c8		iny				iny
.a668		a2 01		ldx #$01			ldx 	#1
.a66a		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a66c		f0 08		beq $a676			beq 	SpriteSwitch
.a66e		ca		dex				dex
.a66f		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a671		f0 03		beq $a676			beq 	SpriteSwitch
.a673		4c a0 a2	jmp $a2a0			jmp 	SyntaxError
.a676						SpriteSwitch:
.a676		5a		phy				phy
.a677		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a679		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a67b		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a67e		7a		ply				ply
.a67f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a680						GfxCommand:
.a680		a2 00		ldx #$00			ldx 	#0
.a682		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; command
.a685		20 c6 91	jsr $91c6			jsr 	CheckComma
.a688		e8		inx				inx
.a689		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger 		; X
.a68c		20 c6 91	jsr $91c6			jsr 	CheckComma
.a68f		e8		inx				inx
.a690		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; Y
.a693		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a695		4a		lsr a				lsr 	a
.a696		d0 12		bne $a6aa			bne 	_GfxError
.a698		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a69a		b0 0e		bcs $a6aa			bcs 	_GfxError 					; bit 7 should have been zero
.a69c		5a		phy				phy 								; save pos
.a69d		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a69f		a6 59		ldx $59				ldx 	NSMantissa0+1
.a6a1		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a6a3		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a6a6		b0 02		bcs $a6aa			bcs 	_GfxError
.a6a8		7a		ply				ply 								; restore pos and exit.
.a6a9		60		rts				rts
.a6aa						_GfxError:
.a6aa		4c a5 a2	jmp $a2a5			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a6ad						UnaryHit:
.a6ad		fa		plx				plx
.a6ae		a9 36		lda #$36			lda 	#zTemp0
.a6b0		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a6b3		20 c6 91	jsr $91c6			jsr 	CheckComma
.a6b6		e8		inx				inx
.a6b7		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a6ba		20 be 91	jsr $91be			jsr		CheckRightBracket
.a6bd		ca		dex				dex 								; fix back up again.
.a6be		da		phx				phx 								; save X/Y
.a6bf		5a		phy				phy
.a6c0		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a6c2		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6c4		aa		tax				tax
.a6c5		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a6c7		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; calculate result
.a6ca		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a6cb		7a		ply				ply 								; restore XY
.a6cc		fa		plx				plx
.a6cd		20 24 a1	jsr $a124			jsr 	NSMSetByte 					; return the hit result
.a6d0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a6d1						PaletteCommand:
.a6d1		a2 00		ldx #$00			ldx 	#0
.a6d3		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; colour
.a6d6		20 c6 91	jsr $91c6			jsr 	CheckComma
.a6d9		e8		inx				inx
.a6da		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger 		; r
.a6dd		20 c6 91	jsr $91c6			jsr 	CheckComma
.a6e0		e8		inx				inx
.a6e1		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; g
.a6e4		20 c6 91	jsr $91c6			jsr 	CheckComma
.a6e7		e8		inx				inx
.a6e8		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; b
.a6eb		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a6ed		85 36		sta $36				sta 	zTemp0
.a6ef		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a6f1		85 37		sta $37				sta 	zTemp0+1
.a6f3		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a6f5		26 37		rol $37				rol	 	zTemp0+1
.a6f7		06 36		asl $36				asl 	zTemp0
.a6f9		26 37		rol $37				rol	 	zTemp0+1
.a6fb		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a6fd		85 01		sta $01				sta 	1
.a6ff		5a		phy				phy
.a700		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a702		92 36		sta ($36)			sta 	(zTemp0)
.a704		a0 01		ldy #$01			ldy 	#1
.a706		a5 5a		lda $5a				lda 	NSMantissa0+2
.a708		91 36		sta ($36),y			sta 	(zTemp0),y
.a70a		a5 59		lda $59				lda 	NSMantissa0+1
.a70c		c8		iny				iny
.a70d		91 36		sta ($36),y			sta 	(zTemp0),y
.a70f		7a		ply				ply
.a710		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a711						XLoadCommand:
.a711		20 2b 8c	jsr $8c2b			jsr 	NewProgram
.a714		20 69 83	jsr $8369			jsr 	BackloadProgram
.a717		4c 28 84	jmp $8428			jmp 	WarmStart
.a71a						XGoCommand:
.a71a		20 2b 8c	jsr $8c2b			jsr 	NewProgram
.a71d		20 69 83	jsr $8369			jsr 	BackloadProgram
.a720		4c a9 8d	jmp $8da9			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a723						UnaryEvent:
.a723		fa		plx				plx
.a724		20 bd a7	jsr $a7bd			jsr 	TimerToStackX 				; timer in +0
.a727		e8		inx				inx  								; put reference into +1
.a728		20 25 9b	jsr $9b25			jsr 	EvaluateTerm
.a72b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a72d		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a72f		d0 4c		bne $a77d			bne 	_UEType
.a731		e8		inx				inx 								; put the step in +2
.a732		20 c6 91	jsr $91c6			jsr 	CheckComma
.a735		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger
.a738		20 be 91	jsr $91be			jsr 	CheckRightBracket
.a73b		ca		dex				dex
.a73c		ca		dex				dex
.a73d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a73f		85 36		sta $36				sta 	zTemp0
.a741		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a743		85 37		sta $37				sta 	zTemp0+1
.a745		5a		phy				phy
.a746		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a748		b1 36		lda ($36),y			lda 	(zTemp0),y
.a74a		30 2d		bmi $a779			bmi 	_UEFalse 					; exit if signed.
.a74c		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a74e		b5 58		lda $58,x			lda 	NSMantissa0,x
.a750		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a752		c8		iny				iny
.a753		b5 60		lda $60,x			lda 	NSMantissa1,x
.a755		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a757		c8		iny				iny
.a758		b5 68		lda $68,x			lda 	NSMantissa2,x
.a75a		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a75c		90 1b		bcc $a779			bcc 	_UEFalse 					; no, return FALSE.
.a75e		18		clc				clc
.a75f		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a761		b5 58		lda $58,x			lda 	NSMantissa0,x
.a763		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a765		91 36		sta ($36),y			sta 	(zTemp0),y
.a767		c8		iny				iny
.a768		b5 60		lda $60,x			lda 	NSMantissa1,x
.a76a		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a76c		91 36		sta ($36),y			sta 	(zTemp0),y
.a76e		c8		iny				iny
.a76f		b5 68		lda $68,x			lda 	NSMantissa2,x
.a771		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a773		91 36		sta ($36),y			sta 	(zTemp0),y
.a775		7a		ply				ply
.a776		4c 44 92	jmp $9244			jmp 	ReturnTrue
.a779						_UEFalse:
.a779		7a		ply				ply 								; restore Y
.a77a		4c 4f 92	jmp $924f			jmp 	ReturnFalse 				; and return False
.a77d						_UEType:
.a77d		4c aa a2	jmp $a2aa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a780						UnaryJoyX:
.a780		18		clc				clc
.a781		80 01		bra $a784			bra 	JoyMain
.a783						UnaryJoyY:
.a783		38		sec				sec
.a784						JoyMain:
.a784		fa		plx				plx 								; get pos
.a785		08		php				php 								; save carry (set for Y)
.a786		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a789		20 be 91	jsr $91be			jsr 	CheckRightBracket
.a78c		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a78f		28		plp				plp
.a790		b0 02		bcs $a794			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a792		4a		lsr a				lsr 	a
.a793		4a		lsr a				lsr 	a
.a794						_JMNoShift:
.a794		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a795		b0 07		bcs $a79e			bcs 	JMIsLeft
.a797		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a798		b0 07		bcs $a7a1			bcs 	JMIsRight
.a79a		20 22 a1	jsr $a122			jsr 	NSMSetZero 					; zero result
.a79d		60		rts				rts
.a79e						JMIsLeft:
.a79e		4c 44 92	jmp $9244			jmp 	ReturnTrue
.a7a1						JMIsRight:
.a7a1		a9 01		lda #$01			lda 	#1
.a7a3		20 24 a1	jsr $a124			jsr 	NSMSetByte
.a7a6		60		rts				rts
.a7a7						UnaryJoyB:
.a7a7		fa		plx				plx 								; get pos
.a7a8		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a7ab		20 be 91	jsr $91be			jsr 	CheckRightBracket
.a7ae		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a7b1		29 10		and #$10			and 	#$10
.a7b3		d0 e9		bne $a79e			bne 	JMIsLeft
.a7b5		20 22 a1	jsr $a122			jsr 	NSMSetZero
.a7b8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a7b9						UnaryTimer:
.a7b9		fa		plx				plx
.a7ba		20 be 91	jsr $91be			jsr 	CheckRightBracket
.a7bd						TimerToStackX:
.a7bd		20 22 a1	jsr $a122			jsr 	NSMSetZero 					; zero result
.a7c0		64 01		stz $01				stz 	1 							; access I/O
.a7c2		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a7c5		95 58		sta $58,x			sta 	NSMantissa0,x
.a7c7		ad 5a d6	lda $d65a			lda 	$D65A
.a7ca		95 60		sta $60,x			sta 	NSMantissa1,x
.a7cc		ad 5b d6	lda $d65b			lda 	$D65B
.a7cf		95 68		sta $68,x			sta 	NSMantissa2,x
.a7d1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a7d2						MemoryDeleteLine:
.a7d2		20 f1 a7	jsr $a7f1			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a7d5		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a7d7		a8		tay				tay
.a7d8						_MDDLLoop:
.a7d8		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a7da		92 30		sta ($30)			sta 	(codePtr)
.a7dc		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a7de		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a7e0		d0 07		bne $a7e9			bne 	_MDLDLNext
.a7e2		a5 31		lda $31				lda 	codePtr+1
.a7e4		c5 3b		cmp $3b				cmp 	zTemp2+1
.a7e6		d0 01		bne $a7e9			bne 	_MDLDLNext
.a7e8						_MDDLExit:
.a7e8		60		rts				rts
.a7e9						_MDLDLNext:
.a7e9		e6 30		inc $30				inc 	codePtr						; next byte
.a7eb		d0 eb		bne $a7d8			bne 	_MDDLLoop
.a7ed		e6 31		inc $31				inc 	codePtr+1
.a7ef		80 e7		bra $a7d8			bra 	_MDDLLoop
.a7f1						IMemoryFindEnd:
.a7f1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7f3		85 3a		sta $3a				sta 	0+zTemp2
.a7f5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7f7		85 3b		sta $3b				sta 	1+zTemp2
.a7f9						_MDLFELoop:
.a7f9		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a7fb		f0 0b		beq $a808			beq 	_MDLFEExit
.a7fd		18		clc				clc
.a7fe		65 3a		adc $3a				adc 	zTemp2
.a800		85 3a		sta $3a				sta 	zTemp2
.a802		90 f5		bcc $a7f9			bcc 	_MDLFELoop
.a804		e6 3b		inc $3b				inc 	zTemp2+1
.a806		80 f1		bra $a7f9			bra 	_MDLFELoop
.a808						_MDLFEExit:
.a808		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a809						MemoryInsertLine:
.a809		08		php				php
.a80a		20 f1 a7	jsr $a7f1			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a80d		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a80f		1a		inc a				inc 	a
.a810		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a812		b0 36		bcs $a84a			bcs 	_MDLIError 					; no, fail.
.a814		28		plp				plp 								; do at a specific point or the end ?
.a815		90 08		bcc $a81f			bcc 	_MDLIFound 					; if specific point already set.
.a817		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a819		85 30		sta $30				sta 	codePtr 					; end.
.a81b		a5 3b		lda $3b				lda 	zTemp2+1
.a81d		85 31		sta $31				sta 	codePtr+1
.a81f						_MDLIFound:
.a81f		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a822		a8		tay				tay
.a823						_MDLIInsert:
.a823		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a825		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a827		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a829		c5 3a		cmp $3a				cmp 	zTemp2
.a82b		d0 06		bne $a833			bne 	_MDLINext
.a82d		a5 31		lda $31				lda 	codePtr+1
.a82f		c5 3b		cmp $3b				cmp 	zTemp2+1
.a831		f0 0a		beq $a83d			beq 	_MDLIHaveSpace
.a833						_MDLINext:
.a833		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a835		d0 02		bne $a839			bne 	_MDLINoBorrow
.a837		c6 3b		dec $3b				dec 	zTemp2+1
.a839						_MDLINoBorrow:
.a839		c6 3a		dec $3a				dec 	zTemp2
.a83b		80 e6		bra $a823			bra 	_MDLIInsert
.a83d						_MDLIHaveSpace:
.a83d		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a840		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a841						_MDLICopy:
.a841		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a844		91 30		sta ($30),y			sta 	(codePtr),y
.a846		88		dey				dey
.a847		10 f8		bpl $a841			bpl 	_MDLICopy
.a849		60		rts				rts
.a84a						_MDLIError:
.a84a		a9 06		lda #$06		lda	#6
.a84c		4c d7 91	jmp $91d7		jmp	ErrorHandler
.a84f						MDLAppendLine:
.a84f		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a851		85 36		sta $36				sta 	zTemp0
.a853		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a855		85 38		sta $38				sta 	0+zTemp1
.a857		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a859		85 39		sta $39				sta 	1+zTemp1
.a85b		b2 38		lda ($38)			lda 	(zTemp1)
.a85d		d0 0a		bne $a869			bne 	_MDLANoInitialise
.a85f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a861		8d 6b 06	sta $066b			sta 	0+AppendPointer
.a864		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a866		8d 6c 06	sta $066c			sta 	1+AppendPointer
.a869						_MDLANoInitialise:
.a869		18		clc				clc
.a86a		ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a86d		85 38		sta $38				sta 	zTemp1
.a86f		72 36		adc ($36)			adc 	(zTemp0)
.a871		8d 6b 06	sta $066b			sta 	AppendPointer
.a874		ad 6c 06	lda $066c			lda 	AppendPointer+1
.a877		85 39		sta $39				sta 	zTemp1+1
.a879		69 00		adc #$00			adc 	#0
.a87b		8d 6c 06	sta $066c			sta 	AppendPointer+1
.a87e		a0 00		ldy #$00			ldy 	#0
.a880						_MDLACopy:
.a880		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a882		91 38		sta ($38),y			sta 	(zTemp1),y
.a884		c8		iny				iny
.a885		98		tya				tya
.a886		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a888		d0 f6		bne $a880			bne 	_MDLACopy
.a88a		a9 00		lda #$00			lda 	#0 							; end of program.
.a88c		91 38		sta ($38),y			sta 	(zTemp1),y
.a88e		60		rts				rts
.066b						AppendPointer:
>066b								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a88f						MemoryNew:
.a88f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a891		85 30		sta $30				sta 	codePtr
.a893		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a895		85 31		sta $31				sta 	codePtr+1
.a897		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a899		92 30		sta ($30)			sta 	(codePtr)
.a89b		60		rts				rts
.a89c						MemoryInline:
.a89c		98		tya				tya 								; put address into stack,x
.a89d		18		clc				clc  								; get the offset, add codePtr
.a89e		65 30		adc $30				adc 	codePtr
.a8a0		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a8a2		a5 31		lda $31				lda 	codePtr+1
.a8a4		69 00		adc #$00			adc 	#0
.a8a6		95 60		sta $60,x			sta 	NSMantissa1,x
.a8a8		74 68		stz $68,x			stz 	NSMantissa2,x
.a8aa		74 70		stz $70,x			stz 	NSMantissa3,x
.a8ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a8ad						MemorySearch:
.a8ad		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a8af		86 37		stx $37				stx 	zTemp0+1
.a8b1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8b3		85 30		sta $30				sta 	codePtr
.a8b5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8b7		85 31		sta $31				sta 	codePtr+1
.a8b9						_MTAXLoop:
.a8b9		b2 30		lda ($30)			lda 	(codePtr)
.a8bb		18		clc				clc
.a8bc		f0 21		beq $a8df			beq 	_MTAXExit 					; reached end, exit with CC.
.a8be		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a8c0		b1 30		lda ($30),y			lda 	(codePtr),y
.a8c2		38		sec				sec
.a8c3		e5 36		sbc $36				sbc 	zTemp0
.a8c5		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a8c7		c8		iny				iny 								; do the MSB
.a8c8		b1 30		lda ($30),y			lda 	(codePtr),y
.a8ca		e5 37		sbc $37				sbc 	zTemp0+1
.a8cc		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a8ce		f0 0f		beq $a8df			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a8d0		b0 0d		bcs $a8df			bcs 	_MTAXExit 					; current < required exit
.a8d2		18		clc				clc
.a8d3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a8d5		65 30		adc $30				adc 	codePtr
.a8d7		85 30		sta $30				sta 	codePtr
.a8d9		90 02		bcc $a8dd			bcc 	_CREExit
.a8db		e6 31		inc $31				inc 	codePtr+1 					; carry
.a8dd						_CREExit:
.a8dd		80 da		bra $a8b9			bra 	_MTAXLoop
.a8df						_MTAXExit:
.a8df		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a8e0						UpdateFont:
.a8e0		a5 01		lda $01				lda 	1 							; save position
.a8e2		48		pha				pha
.a8e3		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a8e5		85 01		sta $01				sta 	1
.a8e7		a9 0e		lda #$0e			lda 	#((FontBinary) & $FF)
.a8e9		85 36		sta $36				sta 	0+zTemp0
.a8eb		a9 a9		lda #$a9			lda 	#((FontBinary) >> 8)
.a8ed		85 37		sta $37				sta 	1+zTemp0
.a8ef		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a8f1		85 38		sta $38				sta 	0+zTemp1
.a8f3		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a8f5		85 39		sta $39				sta 	1+zTemp1
.a8f7						_UFCopy1:
.a8f7		a0 00		ldy #$00			ldy 	#0
.a8f9						_UFCopy2:
.a8f9		b1 36		lda ($36),y			lda 	(zTemp0),y
.a8fb		91 38		sta ($38),y			sta 	(zTemp1),y
.a8fd		c8		iny				iny
.a8fe		d0 f9		bne $a8f9			bne 	_UFCopy2
.a900		e6 37		inc $37				inc 	zTemp0+1
.a902		e6 39		inc $39				inc 	zTemp1+1
.a904		a5 39		lda $39				lda 	zTemp1+1
.a906		c9 c8		cmp #$c8			cmp 	#$C8
.a908		d0 ed		bne $a8f7			bne 	_UFCopy1
.a90a		68		pla				pla 								; restore.
.a90b		85 01		sta $01				sta 	1
.a90d		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a90e						FontBinary:
>a90e		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a916		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a926		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a936		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a946		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a956		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a966		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a976		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a986		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a996		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a9a6		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a9b6		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a9c6		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a9d6		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a9e6		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a9f6		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>aa06		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>aa16		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>aa26		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>aa36		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>aa46		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>aa56		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>aa66		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>aa76		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>aa86		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>aa96		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>aaa6		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>aab6		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aac6		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>aad6		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>aae6		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>aaf6		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>ab06		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>ab16		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>ab26		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>ab36		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>ab46		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>ab56		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>ab66		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>ab76		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>ab86		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ab96		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>aba6		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>abb6		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>abc6		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>abd6		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>abe6		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>abf6		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>ac06		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>ac16		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>ac26		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>ac36		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>ac46		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>ac56		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>ac66		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>ac76		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>ac86		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>ac96		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>aca6		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>acb6		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>acc6		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>acd6		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ace6		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>acf6		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ad06		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ad16		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ad26		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ad36		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ad46		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ad56		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ad66		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ad76		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ad86		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ad96		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ada6		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>adb6		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>adc6		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>add6		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ade6		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>adf6		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ae06		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ae16		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ae26		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ae36		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ae46		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ae56		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ae66		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ae76		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ae86		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ae96		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>aea6		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>aeb6		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>aec6		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>aed6		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>aee6		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>aef6		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>af06		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>af16		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>af26		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>af36		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>af46		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>af56		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>af66		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>af76		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>af86		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>af96		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>afa6		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>afb6		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>afc6		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>afd6		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>afe6		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>aff6		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>b006		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>b016		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>b026		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>b036		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b046		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b056		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b066		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b076		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b086		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b096		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b0a6		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b0b6		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b0c6		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b0d6		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b0e6		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b0f6		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b106		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b10e						PingCommand:
.b10e		5a		phy				phy 								; save pos
.b10f		a9 01		lda #$01			lda 	#1 						; push channel.
.b111		48		pha				pha
.b112		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b114		a2 06		ldx #$06			ldx 	#6 						; length
.b116		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b118		80 24		bra $b13e			bra 	SoundEffectCommand
.b11a						ZapCommand:
.b11a		5a		phy				phy 								; save pos
.b11b		a9 01		lda #$01			lda 	#1 						; push channel.
.b11d		48		pha				pha
.b11e		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b120		a2 0a		ldx #$0a			ldx 	#10 						; length
.b122		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b124		80 18		bra $b13e			bra 	SoundEffectCommand
.b126						ShootCommand:
.b126		5a		phy				phy 								; save pos
.b127		a9 03		lda #$03			lda 	#3 						; push channel.
.b129		48		pha				pha
.b12a		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b12c		a2 04		ldx #$04			ldx 	#4 						; length
.b12e		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b130		80 0c		bra $b13e			bra 	SoundEffectCommand
.b132						Explode:
.b132		5a		phy				phy 								; save pos
.b133		a9 03		lda #$03			lda 	#3 						; push channel.
.b135		48		pha				pha
.b136		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b138		a2 0a		ldx #$0a			ldx 	#10 						; length
.b13a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b13c		80 00		bra $b13e			bra 	SoundEffectCommand
.b13e						SoundEffectCommand:
.b13e		8d 6d 06	sta $066d			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b141		9c 6e 06	stz $066e			stz 	SoundCommandBlock+1
.b144		a9 0f		lda #$0f			lda 	#15
.b146		8d 6f 06	sta $066f			sta 	SoundCommandBlock+2
.b149		8e 70 06	stx $0670			stx 	SoundCommandBlock+3
.b14c		8c 71 06	sty $0671			sty 	SoundCommandBlock+4
.b14f		9c 72 06	stz $0672			stz 	SoundCommandBlock+5
.b152		68		pla				pla
.b153		09 10		ora #$10			ora 	#$10  						; execute command $11
.b155		a2 6d		ldx #$6d			ldx 	#(SoundCommandBlock & $FF)
.b157		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b159		20 8f 80	jsr $808f			jsr 	SNDCommand
.b15c		7a		ply				ply
.b15d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b15e						UnaryPlaying:
.b15e		fa		plx				plx
.b15f		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; get channel #
.b162		48		pha				pha
.b163		20 be 91	jsr $91be			jsr		CheckRightBracket
.b166		68		pla				pla
.b167		c9 04		cmp #$04			cmp 	#4
.b169		b0 0c		bcs $b177			bcs 	_UPNotPlaying
.b16b		09 20		ora #$20			ora 	#$20 						; query playing ?
.b16d		20 8f 80	jsr $808f			jsr 	SNDCommand
.b170		c9 00		cmp #$00			cmp 	#0
.b172		f0 03		beq $b177			beq 	_UPNotPlaying
.b174		4c 44 92	jmp $9244			jmp 	ReturnTrue
.b177						_UPNotPlaying:
.b177		4c 4f 92	jmp $924f			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b17a						SoundCommand:
.b17a		b1 30		lda ($30),y			lda 	(codePtr),y
.b17c		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b17e		d0 09		bne $b189			bne 	_SNDMain
.b180		c8		iny				iny 								; skip OFF
.b181		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b183		5a		phy				phy
.b184		20 8f 80	jsr $808f			jsr 	SNDCommand
.b187		7a		ply				ply
.b188		60		rts				rts
.b189						_SNDMain:
.b189		a2 00		ldx #$00			ldx 	#0
.b18b		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; channel
.b18e		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b190		b0 4b		bcs $b1dd			bcs 	_SndError
.b192		e8		inx				inx 								; do the rest in slot 1.
.b193		20 c6 91	jsr $91c6			jsr 	CheckComma
.b196		20 a2 a0	jsr $a0a2			jsr 	Evaluate16BitInteger 		; Pitch
.b199		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b19b		c9 10		cmp #$10			cmp 	#16
.b19d		b0 3e		bcs $b1dd			bcs 	_SndError
.b19f		8d 6e 06	sta $066e			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b1a2		b5 58		lda $58,x			lda 	NSMantissa0,x
.b1a4		8d 6d 06	sta $066d			sta 	SoundCommandBlock
.b1a7		20 c6 91	jsr $91c6			jsr 	CheckComma
.b1aa		20 bd a0	jsr $a0bd			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b1ad		8d 70 06	sta $0670			sta 	SoundCommandBlock+3
.b1b0		a9 0f		lda #$0f			lda 	#15
.b1b2		8d 6f 06	sta $066f			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b1b5		9c 71 06	stz $0671			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b1b8		9c 72 06	stz $0672			stz 	SoundCommandBlock+5
.b1bb		b1 30		lda ($30),y			lda 	(codePtr),y
.b1bd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b1bf		d0 0e		bne $b1cf			bne 	_SNDPlay
.b1c1		c8		iny				iny
.b1c2		20 ac a0	jsr $a0ac			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b1c5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b1c7		8d 71 06	sta $0671			sta 	SoundCommandBlock+4
.b1ca		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1cc		8d 72 06	sta $0672			sta 	SoundCommandBlock+5
.b1cf						_SNDPlay:
.b1cf		5a		phy				phy
.b1d0		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b1d2		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b1d4		a2 6d		ldx #$6d			ldx 	#(SoundCommandBlock & $FF)
.b1d6		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b1d8		20 8f 80	jsr $808f			jsr 	SNDCommand
.b1db		7a		ply				ply
.b1dc		60		rts				rts
.b1dd						_SndError:
.b1dd		4c a5 a2	jmp $a2a5			jmp 	RangeError
.066d						SoundCommandBlock:
>066d								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b1e0						StackPushByte:
.b1e0		48		pha				pha 								; save byte on stack
.b1e1		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b1e3		d0 08		bne $b1ed			bne 	_SPBNoBorrow
.b1e5		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b1e7		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b1e9		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b1eb		90 06		bcc $b1f3			bcc 	_SPBMemory
.b1ed						_SPBNoBorrow:
.b1ed		c6 34		dec $34				dec 	basicStack
.b1ef		68		pla				pla 								; get back and write
.b1f0		92 34		sta ($34)			sta 	(basicStack)
.b1f2		60		rts				rts
.b1f3						_SPBMemory:
.b1f3		a9 12		lda #$12		lda	#18
.b1f5		4c d7 91	jmp $91d7		jmp	ErrorHandler
.b1f8						StackPopByte:
.b1f8		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b1fa		e6 34		inc $34				inc 	basicStack
.b1fc		d0 02		bne $b200			bne 	_SPBNoCarry
.b1fe		e6 35		inc $35				inc 	basicStack+1
.b200						_SPBNoCarry:
.b200		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b201						StackOpen:
.b201		48		pha				pha 								; save frame byte
.b202		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b204		0a		asl a				asl 	a 							; claim twice this for storage
.b205		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b207		38		sec				sec 								; so basically subtracting from
.b208		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b20a		85 34		sta $34				sta 	basicStack
.b20c		b0 09		bcs $b217			bcs 	_SONoBorrow
>b20e		db						.byte 	$DB 						; causes a break in the emulator
.b20f		c6 35		dec $35				dec 	basicStack+1
.b211		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b213		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b215		90 04		bcc $b21b			bcc 	_SOMemory
.b217						_SONoBorrow:
.b217		68		pla				pla 								; get marker back and write at TOS
.b218		92 34		sta ($34)			sta 	(basicStack)
.b21a		60		rts				rts
.b21b						_SOMemory:
.b21b		a9 12		lda #$12		lda	#18
.b21d		4c d7 91	jmp $91d7		jmp	ErrorHandler
.b220						StackClose:
.b220		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b222		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b224		0a		asl a				asl 	a 							; claim twice this.
.b225		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b227		85 34		sta $34				sta 	basicStack
.b229		90 02		bcc $b22d			bcc 	_SCExit
.b22b		e6 35		inc $35				inc 	basicStack+1
.b22d						_SCExit:
.b22d		60		rts				rts
.b22e						StackCheckFrame:
.b22e		48		pha				pha
.b22f						_StackRemoveLocals:
.b22f		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b231		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b233		b0 05		bcs $b23a			bcs 	_SCNoLocal
.b235		20 da 8b	jsr $8bda			jsr 	LocalPopValue 				; restore the local value
.b238		80 f5		bra $b22f			bra 	_StackRemoveLocals 			; gr round again
.b23a						_SCNoLocal:
.b23a		68		pla				pla 								; get the frame check.
.b23b		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b23d		29 f0		and #$f0			and 	#$F0 						; check type bits
.b23f		d0 01		bne $b242			bne 	_SCFError 					; different, we have structures mixed up
.b241		60		rts				rts
.b242						_SCFError:
.b242		8a		txa				txa 								; report error X
.b243		4c d7 91	jmp $91d7			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b246						STKSaveCodePosition:
.b246		5a		phy				phy
.b247		98		tya				tya 								; save Y
.b248		a0 05		ldy #$05			ldy 	#5
.b24a		91 34		sta ($34),y			sta 	(basicStack),y
.b24c		88		dey				dey 								; save Code Pointer
.b24d						_STKSaveLoop:
.b24d		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b250		91 34		sta ($34),y			sta 	(basicStack),y
.b252		88		dey				dey
.b253		d0 f8		bne $b24d			bne 	_STKSaveLoop
.b255		7a		ply				ply
.b256		60		rts				rts
.b257						STKLoadCodePosition:
.b257		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b259						_STKLoadLoop:
.b259		b1 34		lda ($34),y			lda 	(basicStack),y
.b25b		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b25e		c8		iny				iny
.b25f		c0 05		cpy #$05			cpy 	#5
.b261		d0 f6		bne $b259			bne 	_STKLoadLoop
.b263		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b265		a8		tay				tay
.b266		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b267						StackReset:
.b267		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b269		85 34		sta $34				sta 	0+basicStack
.b26b		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b26d		85 35		sta $35				sta 	1+basicStack
.b26f		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b271		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b273		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b274						StringConcrete:
.b274		5a		phy				phy 								; save position on stack
.b275		20 11 9d	jsr $9d11			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b278		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b27a		85 38		sta $38				sta 	zTemp1
.b27c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b27e		85 39		sta $39				sta 	zTemp1+1
.b280		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b282						_SALength:
.b282		c8		iny				iny
.b283		b1 38		lda ($38),y			lda 	(zTemp1),y
.b285		d0 fb		bne $b282			bne 	_SALength
.b287		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b289		b0 3d		bcs $b2c8			bcs 	_SALengthError
.b28b		98		tya				tya 				 				; length of the new string
.b28c		18		clc				clc
.b28d		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b28f		90 02		bcc $b293			bcc 	_SAHaveLength
.b291		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b293						_SAHaveLength:
.b293		48		pha				pha 								; save length.
.b294		38		sec				sec
.b295		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b297		6d 0e 04	adc $040e			adc 	stringMemory
.b29a		8d 0e 04	sta $040e			sta 	stringMemory
.b29d		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b29f		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b2a1		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b2a3		6d 0f 04	adc $040f			adc 	stringMemory+1
.b2a6		8d 0f 04	sta $040f			sta 	stringMemory+1
.b2a9		85 3b		sta $3b				sta 	zTemp2+1
.b2ab		95 60		sta $60,x			sta 	NSMantissa1,x
.b2ad		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b2ae		38		sec				sec
.b2af		e9 03		sbc #$03			sbc 	#3
.b2b1		92 3a		sta ($3a)			sta 	(zTemp2)
.b2b3		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b2b5		a0 01		ldy #$01			ldy 	#1
.b2b7		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b2b9						_SACopyNewString:
.b2b9		a0 00		ldy #$00			ldy 	#0
.b2bb						_SACopyNSLoop:
.b2bb		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b2bd		c8		iny				iny 								; write two on in string storage
.b2be		c8		iny				iny
.b2bf		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b2c1		88		dey				dey 								; this makes it one one.
.b2c2		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b2c4		d0 f5		bne $b2bb			bne 	_SACopyNSLoop
.b2c6		7a		ply				ply
.b2c7		60		rts				rts
.b2c8						_SALengthError:
.b2c8		a9 09		lda #$09		lda	#9
.b2ca		4c d7 91	jmp $91d7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b2cd						StringSystemInitialise:
.b2cd		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b2cf		8d 0e 04	sta $040e			sta 	0+stringMemory
.b2d2		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b2d4		8d 0f 04	sta $040f			sta 	1+stringMemory
.b2d7		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b2da		60		rts				rts
.b2db						StringSpaceInitialise:
.b2db		20 11 9d	jsr $9d11			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b2de		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b2e0		8d 10 04	sta $0410			sta 	stringInitialised
.b2e3		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b2e6		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b2e9		ad 0f 04	lda $040f			lda 	stringMemory+1
.b2ec		3a		dec a				dec 	a
.b2ed		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b2f0		60		rts				rts
.b2f1						StringTempAllocate:
.b2f1		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b2f3		b0 30		bcs $b325			bcs 	_STALength
.b2f5		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b2f8		30 05		bmi $b2ff			bmi 	_STAAllocate
.b2fa		48		pha				pha 								; save value to subtract.
.b2fb		20 db b2	jsr $b2db			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b2fe		68		pla				pla 								; restore it
.b2ff						_STAAllocate:
.b2ff		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b301		18		clc				clc  								; deliberate allows one more
.b302		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b305		8d 11 04	sta $0411			sta 	stringTempPointer
.b308		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b30a		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b30c		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b30f		69 ff		adc #$ff			adc 	#$FF
.b311		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b314		85 3d		sta $3d				sta 	zsTemp+1
.b316		95 60		sta $60,x			sta 	NSMantissa1,x
.b318		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b31a		74 70		stz $70,x			stz 	NSMantissa3,x
.b31c		a9 10		lda #$10			lda 	#NSTString
.b31e		95 50		sta $50,x			sta 	NSStatus,x
.b320		a9 00		lda #$00			lda 	#0 							; clear the target string
.b322		92 3c		sta ($3c)			sta 	(zsTemp)
.b324		60		rts				rts
.b325						_STALength:
.b325		a9 09		lda #$09		lda	#9
.b327		4c d7 91	jmp $91d7		jmp	ErrorHandler
.b32a						StringTempWrite:
.b32a		48		pha				pha
.b32b		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b32d		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b32f		d0 02		bne $b333			bne 	_STWNoCarry
.b331		e6 3d		inc $3d				inc 	zsTemp+1
.b333						_STWNoCarry:
.b333		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b335		92 3c		sta ($3c)			sta 	(zsTemp)
.b337		68		pla				pla
.b338		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b339						Command_VERIFY:
.b339		20 7a a0	jsr $a07a			jsr 	EvaluateString 				; file name to verify
.b33c		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b33e		a5 36		lda $36				lda 	zTemp0
.b340		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b343		b0 4b		bcs $b390			bcs 	_CVErrorHandler 			; error, so fail.
.b345		8d 61 06	sta $0661			sta 	CurrentFileStream 			; save the reading stream.
.b348		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b34b		9c 60 06	stz $0660			stz 	LoadEOFFlag 				; clear EOF Flag.
.b34e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b350		85 30		sta $30				sta 	codePtr
.b352		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b354		85 31		sta $31				sta 	codePtr+1
.b356						_CVLoop:
.b356		20 22 8b	jsr $8b22			jsr 	LoadReadLine 				; get next line.
.b359		f0 27		beq $b382			beq 	_CVExit 					; end, exit.
.b35b		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.b35e		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.b361		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.b364		f0 f0		beq $b356			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b366		a0 00		ldy #$00			ldy 	#0 							; start compare
.b368						_CVCompareLoop:
.b368		b1 30		lda ($30),y			lda 	(codePtr),y
.b36a		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.b36d		d0 1c		bne $b38b			bne 	_CVCompareError
.b36f		c8		iny				iny
.b370		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.b373		d0 f3		bne $b368			bne 	_CVCompareLoop
.b375		18		clc				clc
.b376		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b378		65 30		adc $30				adc 	codePtr
.b37a		85 30		sta $30				sta 	codePtr
.b37c		90 02		bcc $b380			bcc 	_CREExit
.b37e		e6 31		inc $31				inc 	codePtr+1 					; carry
.b380						_CREExit:
.b380		80 d4		bra $b356			bra 	_CVLoop
.b382						_CVExit:
.b382		ad 61 06	lda $0661			lda 	CurrentFileStream
.b385		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.b388		4c f7 8a	jmp $8af7			jmp 	CLComplete
.b38b						_CVCompareError:
.b38b		a9 1b		lda #$1b		lda	#27
.b38d		4c d7 91	jmp $91d7		jmp	ErrorHandler
.b390						_CVErrorHandler:
.b390		4c 14 8b	jmp $8b14			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b393						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 74 06	ldy $0674			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 74 06	ldy $0674			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 75 06	lda $0675			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 74 06	sty $0674			sty 	EXTColumn
.c02d	a02d	cc 76 06	cpy $0676			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 73 06	inc $0673			inc 	EXTRow  					; bump row
.c035	a035	9c 74 06	stz $0674			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 73 06	lda $0673			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 77 06	cmp $0677			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 76 06	adc $0676			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 74 06	dec $0674			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 74 06	stz $0674			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 73 06	dec $0673			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 73 06	lda $0673			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 73 06	dec $0673			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 76 06	sbc $0676			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 74 06	sty $0674			sty 	EXTColumn
.c08c	a08c	cc 76 06	cpy $0676			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 74 06	sty $0674			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 77 06	lda $0677			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 73 06	cmp $0673			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 73 06	inc $0673			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 76 06	adc $0676			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 74 06	lda $0674			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 74 06	sta $0674			sta 	EXTColumn
.c0c9	a0c9	cd 76 06	cmp $0676			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 74 06	dec $0674			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 76 06	ldy $0676			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 76 06	cpy $0676			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 75 06	and $0675			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 75 06	sta $0675			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 75 06	ora $0675			ora 	EXTTextColour
.c13c	a13c	8d 75 06	sta $0675			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 75 06	lda $0675			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 75 06	lda $0675			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 73 06	stz $0673			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 74 06	stz $0674			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 74 06	lda $0674			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 73 06	lda $0673			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 0d bc	jsr $bc0d			jsr 	PagedInputSingleCharacter
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad 74 06	lda $0674			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac 74 06	ldy $0674			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc 76 06	cpy $0676			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac 74 06	ldy $0674			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc 76 06	cpy $0676			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac 76 06	ldy $0676			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc 74 06	cpy $0674			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad 76 06	lda $0676			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac 76 06	ldy $0676			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0673						EXTRow:
>0673								.fill 	1
.0674						EXTColumn:
>0674								.fill 	1
.0675						EXTTextColour:
>0675								.fill 	1
.0676						EXTScreenWidth:
>0676								.fill 	1
.0677						EXTScreenHeight:
>0677								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d 75 06	sta $0675			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d 76 06	sta $0676			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d 77 06	sta $0677			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad 73 06	lda $0673			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0678						gxCurrentX:
>0678								.fill 	2
.067a						gxCurrentY:
>067a								.fill 	2
.067c						gxLastX:
>067c								.fill 	2
.067e						gxLastY:
>067e								.fill 	2
.0680						gxX0:
>0680								.fill 	2
.0682						gxY0:
>0682								.fill 	2
.0684						gxX1:
>0684								.fill 	2
.0686						gxY1:
>0686								.fill 	2
.0688						gxSpritesOn:
>0688								.fill 	1
.0689						gxBitmapsOn:
>0689								.fill 	1
.068a						gxBasePage:
>068a								.fill 	1
.068b						gxSpritePage:
>068b								.fill 	1
.068c						gxHeight:
>068c								.fill 	1
.068d						gxMode:
>068d								.fill 	1
.068e						gxColour:
>068e								.fill 	1
.068f						gxEORValue:
>068f								.fill 	1
.0690						gxANDValue:
>0690								.fill 	1
.0691						gxOriginalLUTValue:
>0691								.fill 	1
.0692						gxOffset:
>0692								.fill 	1
.0693						GSCurrentSpriteID:
>0693								.fill 	1
.0694						GSCurrentSpriteAddr:
>0694								.fill 	2
.0696						gxSpriteOffsetBase:
>0696								.fill 	2
.0698						gxSpriteLow:
>0698								.fill 	64
.06d8						gxSpriteHigh:
>06d8								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd 78 06	lda $0678,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d 7c 06	sta $067c,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d 7a 06	sta $067a			sta 	gxCurrentY
.c7e7	a7e7	9c 7b 06	stz $067b			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d 78 06	sta $0678			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d 79 06	sta $0679			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad 79 06	lda $0679			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad 78 06	lda $0678			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad 7a 06	lda $067a			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 8c 06	cmp $068c			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd 78 06	lda $0678,x			lda 	gxCurrentX,x
.c819	a819	9d 80 06	sta $0680,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 1b 07	sta $071b			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 89 06	lda $0689			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 1c 07	stz $071c			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 19 07	lda $0719			lda 	gxxCentre					; while x <= y
.c848	a848	cd 1a 07	cmp $071a			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 1a 07	lda $071a			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 19 07	lda $0719			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 1a 07	ldx $071a			ldx	 	gxYCentre
.c875	a875	8d 1a 07	sta $071a			sta 	gxYCentre
.c878	a878	8e 19 07	stx $0719			stx 	gxxCentre
.c87b	a87b	ad 1c 07	lda $071c			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 1c 07	sta $071c			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 1b 07	lda $071b	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 1c 07	lda $071c			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 1a 07	lda $071a			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 19 07	lda $0719			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 1b 07	lda $071b			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 1a 07	sbc $071a			sbc 	gxYCentre
.c8bc	a8bc	8d 1a 07	sta $071a			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 84 06	lda $0684,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 80 06	sta $0680,x			sta 	gxX0,x
.c8d3	a8d3	bd 85 06	lda $0685,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 81 06	sta $0681,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 1c 07	stz $071c			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 19 07	inc $0719			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 19 07	lda $0719			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 19 07	inc $0719			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 1a 07	dec $071a			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 19 07	lda $0719			lda 	gxxCentre
.c8fc	a8fc	ed 1a 07	sbc $071a			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 1c 07	dec $071c			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 86 06	lda $0686			lda 	gxY1
.c935	a935	ed 82 06	sbc $0682			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 18 07	sta $0718			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 19 07	stz $0719			stz 	gxxCentre
.c949	a949	ad 18 07	lda $0718			lda 	gxRadius
.c94c	a94c	8d 1a 07	sta $071a			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 84 06	lda $0684,x			lda 	gxX1,x
.c964	a964	7d 80 06	adc $0680,x			adc 	gxX0,x
.c967	a967	9d 84 06	sta $0684,x			sta 	gxX1,x
.c96a	a96a	bd 85 06	lda $0685,x			lda 	gxX1+1,x
.c96d	a96d	7d 81 06	adc $0681,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 85 06	sta $0685,x			sta 	gxX1+1,x
.c974	a974	7e 84 06	ror $0684,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0718						gxRadius:
>0718								.fill 	1
.0719						gxxCentre:
>0719								.fill 	1
.071a						gxYCentre:
>071a								.fill 	1
.071b						gxIsFillMode:
>071b								.fill 	1
.071c						gxYChanged:
>071c								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 89 06	lda $0689			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 8c 06	lda $068c			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 8a 06	adc $068a			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 8a 06	cmp $068a			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 88 06	stz $0688			stz 	gxSpritesOn
.c9d1	a9d1	9c 89 06	stz $0689			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e 78 06	stz $0678,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 89 06	sta $0689			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 8a 06	sta $068a			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 8c 06	stx $068c			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 88 06	sta $0688			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 8b 06	sta $068b			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d 96 06	sta $0696			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d 97 06	sta $0697			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c 95 06	stz $0695			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e d8 06	stz $06d8,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d 98 06	sta $0698,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 89 06	lda $0689			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac 92 06	ldy $0692			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d 90 06	and $0690			and 	gxANDValue
.ca9e	aa9e	4d 8f 06	eor $068f			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 1f 07	lda $071f			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 80 06	lda $0680			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 84 06	eor $0684			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 81 06	lda $0681			lda 	gxX0+1
.cac4	aac4	4d 85 06	eor $0685			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 86 06	lda $0686			lda 	gxY1
.cacb	aacb	4d 82 06	eor $0682			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 21 07	lda $0721			lda 	gxPosition
.cad3	aad3	6d 22 07	adc $0722			adc 	gxAdjust
.cad6	aad6	8d 21 07	sta $0721			sta 	gxPosition
.cad9	aad9	9c 24 07	stz $0724			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 23 07	cmp $0723			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 24 07	dec $0724			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 23 07	sbc $0723			sbc 	gxTotal
.caea	aaea	8d 21 07	sta $0721			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 1f 07	lda $071f			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 24 07	lda $0724			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 24 07	lda $0724			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 20 07	lda $0720			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 80 06	lda $0680			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 81 06	dec $0681			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 80 06	dec $0680			dec 	gxX0
.cb1b	ab1b	ce 92 06	dec $0692			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad 92 06	lda $0692			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 80 06	inc $0680			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 81 06	inc $0681			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee 92 06	inc $0692			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 82 06	inc $0682			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 86 06	lda $0686			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 82 06	sbc $0682			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 1e 07	sta $071e			sta 	gxDiffY
.cb63	ab63	9c 20 07	stz $0720			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 84 06	lda $0684			lda 	gxX1
.cb6a	ab6a	ed 80 06	sbc $0680			sbc 	gxX0
.cb6d	ab6d	8d 1d 07	sta $071d			sta 	gxDiffX
.cb70	ab70	ad 85 06	lda $0685			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 81 06	sbc $0681			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 1d 07	ror $071d			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 1d 07	sbc $071d			sbc 	gxDiffX
.cb83	ab83	8d 1d 07	sta $071d			sta 	gxDiffX
.cb86	ab86	ce 20 07	dec $0720			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 1f 07	stz $071f			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 1e 07	lda $071e			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 22 07	sta $0722			sta 	gxAdjust
.cb92	ab92	ad 1d 07	lda $071d			lda 	gxDiffX
.cb95	ab95	8d 23 07	sta $0723			sta 	gxTotal
.cb98	ab98	ad 1e 07	lda $071e			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 1d 07	cmp $071d			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 1f 07	dec $071f			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 1d 07	lda $071d			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 22 07	sta $0722			sta 	gxAdjust
.cba9	aba9	ad 1e 07	lda $071e			lda 	gxDiffY
.cbac	abac	8d 23 07	sta $0723			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 23 07	lda $0723			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 21 07	sta $0721			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.071d						gxDiffX:
>071d								.fill 	1
.071e						gxDiffY:
>071e								.fill 	1
.071f						gxIsDiffYLarger:
>071f								.fill 	1
.0720						gxDXNegative:
>0720								.fill 	1
.0721						gxPosition:
>0721								.fill 	1
.0722						gxAdjust:
>0722								.fill 	1
.0723						gxTotal:
>0723								.fill 	1
.0724						gxAddSelect:
>0724								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 8e 06	stx $068e			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 8d 06	sta $068d			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c 90 06	stz $0690			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 8e 06	ldx $068e			ldx 	gxColour
.cbc9	abc9	8e 8f 06	stx $068f			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e 90 06	stx $0690			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c 8f 06	stz $068f			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad 90 06	lda $0690			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d 90 06	sta $0690			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac 92 06	ldy $0692			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d 90 06	and $0690			and 	gxANDValue
.cbf3	abf3	4d 8f 06	eor $068f			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 89 06	lda $0689			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 82 06	lda $0682			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 86 06	cmp $0686			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 82 06	inc $0682			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 82 06	lda $0682			lda 	gxY0 						; reached last line
.cc25	ac25	cd 86 06	cmp $0686			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 84 06	lda $0684			lda		gxX1
.cc42	ac42	ed 80 06	sbc $0680			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 85 06	lda $0685			lda 	gxX1+1
.cc4a	ac4a	ed 81 06	sbc $0681			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad 92 06	lda $0692			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac 92 06	ldy $0692			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d 90 06	and $0690			and 	gxANDValue
.cc67	ac67	4d 8f 06	eor $068f			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d 90 06	and $0690			and 	gxANDValue
.cc85	ac85	4d 8f 06	eor $068f			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d 90 06	and $0690			and 	gxANDValue
.cc9d	ac9d	4d 8f 06	eor $068f			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d 92 06	sta $0692			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 25 07	sta $0725			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 26 07	sta $0726			sta 	gxMask 						; and mask
.ccc4	acc4	ad 89 06	lda $0689			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 82 06	lda $0682			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 28 07	sty $0728			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 27 07	stx $0727			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 2a 07	lda $072a			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 29 07	sta $0729			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 2a 07	bit $072a			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 26 07	lda $0726			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 29 07	lda $0729			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 82 06	lda $0682			lda 	gxY0 						; off screen
.ccfd	acfd	cd 8c 06	cmp $068c			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 25 07	cmp $0725			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 82 06	sta $0682			sta 	gxY0
.cd16	ad16	ae 29 07	ldx $0729			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 25 07	lda $0725			lda 	gxSize
.cd1d	ad1d	6d 80 06	adc $0680			adc 	gxX0
.cd20	ad20	8d 80 06	sta $0680			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 81 06	inc $0681			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 27 07	jmp ($0727)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac 92 06	ldy $0692			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 29 07	lda $0729			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 8d 06	bit $068d			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 26 07	lda $0726			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 2a 07	lda $072a			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d 90 06	and $0690			and 	gxANDValue
.cd61	ad61	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 25 07	cmp $0725			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 82 06	inc $0682			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0725						gxSize:
>0725								.fill 	1
.0726						gxMask:
>0726								.fill 	1
.0727						gxAcquireVector:
>0727								.fill 	2
.0729						gxScale:
>0729								.fill 	1
.072a						gxUseMode:
>072a								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 8d 06	eor $068d			eor 	gxMode
.cd84	ad84	8d 2a 07	sta $072a			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 8e 06	lda $068e			lda 	gxColour
.cdbd	adbd	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 88 06	lda $0688			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 8d 06	eor $068d			eor 	gxMode
.cdd1	add1	8d 2a 07	sta $072a			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 2b 07	lda $072b			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 8b 06	lda $068b			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 2c 07	ldx $072c			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 2e 07	adc $072e			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 2f 07	adc $072f			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 2b 07	cpy $072b			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 88 06	lda $0688			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d 93 06	sta $0693			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d 95 06	sta $0695			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d 94 06	sta $0694			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 88 06	lda $0688			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad 95 06	lda $0695			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad 94 06	lda $0694			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad 95 06	lda $0695			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 2e 07	lda $072e			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 2f 07	lda $072f			lda 	gxSpriteOffset+1
.ce92	ae92	6d 96 06	adc $0696			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad 97 06	lda $0697			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 2c 07	lda $072c			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 2d 07	ora $072d			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae 93 06	ldx $0693			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd d8 06	lda $06d8,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d d8 06	sta $06d8,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 2c 07	lda $072c			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d d8 06	ora $06d8,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d d8 06	sta $06d8,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd 98 06	lda $0698,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d 98 06	sta $0698,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad 94 06	lda $0694			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad 95 06	lda $0695			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae 93 06	ldx $0693			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd 98 06	lda $0698,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d 98 06	sta $0698,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 88 06	lda $0688			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad 95 06	lda $0695			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad 94 06	lda $0694			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae 93 06	ldx $0693			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd d8 06	lda $06d8,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 80 06	adc $0680			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 81 06	lda $0681			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 82 06	adc $0682			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 81 06	lsr $0681			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 80 06	ror $0680			ror 	gxX0
.cf3d	af3d	4e 80 06	lsr $0680			lsr 	gxX0
.cf40	af40	4e 82 06	lsr $0682			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 82 06	lsr $0682			lsr 	gxY0
.cf46	af46	ae 93 06	ldx $0693			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd 98 06	lda $0698,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 80 06	ora $0680			ora 	gxX0
.cf51	af51	9d 98 06	sta $0698,x			sta 	gxSpriteLow,x
.cf54	af54	bd d8 06	lda $06d8,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 82 06	ora $0682			ora 	gxY0
.cf5c	af5c	9d d8 06	sta $06d8,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d 91 06	sta $0691			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad 91 06	lda $0691			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 82 06	lda $0682			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 80 06	lda $0680			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d 92 06	sta $0692			sta 	gxOffset
.cfae	afae	ad 81 06	lda $0681			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 8a 06	adc $068a			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad 92 06	lda $0692			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d 92 06	sta $0692			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 98 06	lda $0698,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d 98 06	ora $0698,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 d8 06	lda $06d8,y			lda 	gxSpriteHigh,y
.d000	b000	7d d8 06	adc $06d8,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 d8 06	lda $06d8,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd d8 06	lda $06d8,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 98 06	lda $0698,y			lda 	gxSpriteLow,y
.d02e	b02e	fd 98 06	sbc $0698,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 8b 06	lda $068b			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 2f 07	sta $072f			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 2c 07	sta $072c			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 2b 07	sta $072b			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 2d 07	sta $072d			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 2e 07	sta $072e			sta 	gxSpriteOffset
.d07b	b07b	0e 2e 07	asl $072e			asl 	gxSpriteOffset
.d07e	b07e	2e 2f 07	rol $072f			rol 	gxSpriteOffset+1
.d081	b081	0e 2e 07	asl $072e			asl 	gxSpriteOffset
.d084	b084	2e 2f 07	rol $072f			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.072b						gxSizePixels:
>072b								.fill 	1
.072c						gxSizeBits:
>072c								.fill 	1
.072d						gxSpriteLUT:
>072d								.fill 	1
.072e						gxSpriteOffset:
>072e								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 80 06	lda $0680			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 84 06	cmp $0684			cmp 	gxX1
.d098	b098	ad 81 06	lda $0681			lda 	gxX0+1
.d09b	b09b	ed 85 06	sbc $0685			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 82 06	lda $0682			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 86 06	cmp $0686			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 80 06	lda $0680,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 80 06	lda $0680,y			lda 	gxX0,y
.d0c8	b0c8	9d 80 06	sta $0680,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 80 06	sta $0680,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d10f	b10f	45 24 28
>d112	b112	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d11a	b11a	45 24 28
>d11d	b11d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d123	b123	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d129	b129	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d131	b131	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d138	b138	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d13f	b13f	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d146	b146	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d14e	b14e	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d154	b154	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d15a	b15a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d161	b161	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d167	b167	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d16d	b16d	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d174	b174	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d17c	b17c	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d184	b184	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d18c	b18c	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d194	b194	47 28
>d196	b196	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d19e	b19e	28
>d19f	b19f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d1a7	b1a7	28
>d1a8	b1a8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1ae	b1ae	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1b4	b1b4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1ba	b1ba	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1c1	b1c1	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1c9	b1c9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1cf	b1cf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1d5	b1d5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1da	b1da	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1de	b1de	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1e4	b1e4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1ec	b1ec	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1f3	b1f3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1fa	b1fa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d202	b202	43
>d203	b203	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d209	b209	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d20f	b20f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d216	b216	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d21c	b21c	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d220	b220	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d226	b226	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d22e	b22e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d235	b235	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d23a	b23a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d241	b241	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d249	b249	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $b8 CPRINT
>d251	b251	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b9 DATA
>d257	b257	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ba DIM
>d25c	b25c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bb DOWNTO
>d264	b264	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bc ELSE
>d26a	b26a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bd FROM
>d270	b270	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $be GFX
>d275	b275	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bf GOSUB
>d27c	b27c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $c0 GOTO
>d282	b282	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d288	b288	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d28f	b28f	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c3 INPUT
>d296	b296	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d29b	b29b	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2a1	b2a1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2a8	b2a8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2ad	b2ad	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2b1	b2b1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2b9	b2b9	45
>d2ba	b2ba	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2c2	b2c2	45
>d2c3	b2c3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2c9	b2c9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2cf	b2cf	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2d6	b2d6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d2dd	b2dd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d2e4	b2e4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $d0 PRINT
>d2eb	b2eb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d2f1	b2f1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d2f7	b2f7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d2fc	b2fc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d4 RETURN
>d304	b304	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d5 SOLID
>d30b	b30b	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d6 SOUND
>d312	b312	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d7 SPRITE
>d31a	b31a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d8 TEXT
>d320	b320	02 a3 54 4f				.text	2,$a3,"TO"             ; $d9 TO
>d324	b324	ff					.text	$FF
.d325	b325					KeywordSet1:
>d325	b325	00 65					.text	0,$65,""               ; $80 !0:EOF
>d327	b327	00 58					.text	0,$58,""               ; $81 !1:SH1
>d329	b329	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d32b	b32b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d333	b333	4c 45
>d335	b335	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d33d	b33d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d345	b345	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d34c	b34c	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d353	b353	03 df 44 49 52				.text	3,$df,"DIR"            ; $88 DIR
>d358	b358	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $89 DRIVE
>d35f	b35f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8a END
>d364	b364	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8b EXPLODE
>d36c	b36c	45
>d36d	b36d	02 96 47 4f				.text	2,$96,"GO"             ; $8c GO
>d371	b371	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $8d HIMEM
>d378	b378	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8e LIST
>d37e	b37e	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8f LOAD
>d384	b384	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $90 NEW
>d389	b389	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $91 PING
>d38f	b38f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $92 RESTORE
>d397	b397	45
>d398	b398	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $93 RUN
>d39d	b39d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $94 SAVE
>d3a3	b3a3	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $95 SETDATE
>d3ab	b3ab	45
>d3ac	b3ac	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $96 SETTIME
>d3b4	b3b4	45
>d3b5	b3b5	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $97 SHOOT
>d3bc	b3bc	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $98 SPRITES
>d3c4	b3c4	53
>d3c5	b3c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $99 STOP
>d3cb	b3cb	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $9a VERIFY
>d3d3	b3d3	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $9b XGO
>d3d8	b3d8	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $9c XLOAD
>d3df	b3df	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9d ZAP
>d3e4	b3e4	ff					.text	$FF
.d3e5	b3e5					KeywordSet2:
>d3e5	b3e5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3e7	b3e7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3e9	b3e9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3eb	b3eb	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3f0	b3f0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3f5	b3f5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3fa	b3fa	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3ff	b3ff	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d404	b404	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d409	b409	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d40e	b40e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d413	b413	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d418	b418	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d41d	b41d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d422	b422	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d427	b427	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d42c	b42c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d431	b431	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d436	b436	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d43b	b43b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d440	b440	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d445	b445	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d44a	b44a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d44f	b44f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d454	b454	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d459	b459	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d45e	b45e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d463	b463	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d468	b468	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d46d	b46d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d472	b472	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d477	b477	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d47c	b47c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d481	b481	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d486	b486	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d48b	b48b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d490	b490	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d495	b495	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d49a	b49a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d49f	b49f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4a4	b4a4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4a9	b4a9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ae	b4ae	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4b3	b4b3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4b8	b4b8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4bd	b4bd	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4c2	b4c2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4c7	b4c7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4cc	b4cc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4d1	b4d1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4d6	b4d6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4db	b4db	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4e0	b4e0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4e5	b4e5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ea	b4ea	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ef	b4ef	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4f4	b4f4	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4f9	b4f9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4fe	b4fe	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d503	b503	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d508	b508	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d50d	b50d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d512	b512	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d517	b517	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d51c	b51c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d521	b521	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d526	b526	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d52b	b52b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d530	b530	ff					.text	$FF
.d531	b531					Export_TKListConvertLine:
.d531	b531	48		pha				pha 								; save indent on the stack
.d532	b532	9c 1d 04	stz $041d			stz 	tbOffset
.d535	b535	9c 2d 04	stz $042d			stz 	tokenBuffer
.d538	b538	9c 29 04	stz $0429			stz 	currentListColour
.d53b	b53b	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d53d	b53d	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d540	b540	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d542	b542	b1 30		lda ($30),y			lda 	(codePtr),y
.d544	b544	aa		tax				tax
.d545	b545	88		dey				dey
.d546	b546	b1 30		lda ($30),y			lda 	(codePtr),y
.d548	b548	20 2b b7	jsr $b72b			jsr 	LCLWriteNumberXA
.d54b	b54b	68		pla				pla 								; adjustment to indent
.d54c	b54c	48		pha				pha 								; save on stack
.d54d	b54d	10 0c		bpl $b55b			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d54f	b54f	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d550	b550	6d 26 04	adc $0426			adc 	listIndent
.d553	b553	8d 26 04	sta $0426			sta 	listIndent
.d556	b556	10 03		bpl $b55b			bpl 	_LCNoAdjust
.d558	b558	9c 26 04	stz $0426			stz 	listIndent
.d55b	b55b					_LCNoAdjust:
.d55b	b55b	18		clc				clc		 							; work out actual indent.
.d55c	b55c	ad 26 04	lda $0426			lda 	listIndent
.d55f	b55f	0a		asl a				asl 	a
.d560	b560	69 07		adc #$07			adc 	#7
.d562	b562	85 36		sta $36				sta 	zTemp0
.d564	b564					_LCPadOut:
.d564	b564	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d566	b566	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d569	b569	ad 1d 04	lda $041d			lda 	tbOffset
.d56c	b56c	c5 36		cmp $36				cmp 	zTemp0
.d56e	b56e	d0 f4		bne $b564			bne 	_LCPadOut
.d570	b570	a0 03		ldy #$03			ldy 	#3 							; start position.
.d572	b572					_LCMainLoop:
.d572	b572	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d574	b574	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d577	b577	b1 30		lda ($30),y			lda 	(codePtr),y
.d579	b579	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d57b	b57b	f0 17		beq $b594			beq 	_LCExit
.d57d	b57d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d57f	b57f	90 1e		bcc $b59f			bcc 	_LCDoubles
.d581	b581	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d583	b583	90 2a		bcc $b5af			bcc 	_LCShiftPunc
.d585	b585	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d587	b587	90 35		bcc $b5be			bcc 	_LCPunctuation
.d589	b589	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d58b	b58b	90 51		bcc $b5de			bcc 	_LCIdentifiers
.d58d	b58d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d58f	b58f	90 73		bcc $b604			bcc 	_LCTokens
.d591	b591	4c 64 b6	jmp $b664			jmp 	_LCData 					; 254-5 are data objects
.d594	b594					_LCExit:
.d594	b594	68		pla				pla 								; get old indent adjust
.d595	b595	30 07		bmi $b59e			bmi 	_LCExit2
.d597	b597	18		clc				clc 								; add to indent if +ve
.d598	b598	6d 26 04	adc $0426			adc 	listIndent
.d59b	b59b	8d 26 04	sta $0426			sta 	listIndent
.d59e	b59e					_LCExit2:
.d59e	b59e	60		rts				rts
.d59f	b59f					_LCDoubles:
.d59f	b59f	48		pha				pha
.d5a0	b5a0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5a1	b5a1	29 02		and #$02			and 	#2
.d5a3	b5a3	09 3c		ora #$3c			ora 	#60 						; make < >
.d5a5	b5a5	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5a8	b5a8	68		pla				pla 								; restore, do lower bit
.d5a9	b5a9	29 03		and #$03			and 	#3
.d5ab	b5ab	09 3c		ora #$3c			ora 	#60
.d5ad	b5ad	80 0f		bra $b5be			bra		_LCPunctuation 				; print, increment, loop
.d5af	b5af					_LCShiftPunc:
.d5af	b5af	aa		tax				tax 								; save in X
.d5b0	b5b0	29 07		and #$07			and 	#7 							; lower 3 bits
.d5b2	b5b2	f0 02		beq $b5b6			beq 	_LCNoAdd
.d5b4	b5b4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5b6	b5b6					_LCNoAdd:
.d5b6	b5b6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5b8	b5b8	90 02		bcc $b5bc			bcc 	_LCNoAdd2
.d5ba	b5ba	09 20		ora #$20			ora 	#32 						; adds $20
.d5bc	b5bc					_LCNoAdd2:
.d5bc	b5bc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5be	b5be					_LCPunctuation:
.d5be	b5be	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5c0	b5c0	d0 03		bne $b5c5			bne 	_LCPContinue
.d5c2	b5c2	20 d9 b6	jsr $b6d9			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5c5	b5c5					_LCPContinue:
.d5c5	b5c5	c9 2e		cmp #$2e			cmp 	#'.'
.d5c7	b5c7	f0 08		beq $b5d1			beq 	_LCPIsConstant
.d5c9	b5c9	c9 30		cmp #$30			cmp 	#'0'
.d5cb	b5cb	90 0b		bcc $b5d8			bcc 	_LCPNotConstant
.d5cd	b5cd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5cf	b5cf	b0 07		bcs $b5d8			bcs 	_LCPNotConstant
.d5d1	b5d1					_LCPIsConstant:
.d5d1	b5d1	48		pha				pha
.d5d2	b5d2	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5d4	b5d4	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5d7	b5d7	68		pla				pla
.d5d8	b5d8					_LCPNotConstant:
.d5d8	b5d8	c8		iny				iny 								; consume character
.d5d9	b5d9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite 					; write it out.
.d5dc	b5dc	80 94		bra $b572			bra 	_LCMainLoop 				; go round again.
.d5de	b5de					_LCIdentifiers:
.d5de	b5de	18		clc				clc 								; convert to physical address
.d5df	b5df	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5e1	b5e1	85 37		sta $37				sta 	zTemp0+1
.d5e3	b5e3	c8		iny				iny
.d5e4	b5e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e6	b5e6	85 36		sta $36				sta 	zTemp0
.d5e8	b5e8	c8		iny				iny
.d5e9	b5e9	5a		phy				phy 								; save position
.d5ea	b5ea	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5ec	b5ec	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5ef	b5ef	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5f1	b5f1					_LCOutIdentifier:
.d5f1	b5f1	c8		iny				iny
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5f4	b5f4	29 7f		and #$7f			and 	#$7F
.d5f6	b5f6	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d5f9	b5f9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5fc	b5fc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5fe	b5fe	10 f1		bpl $b5f1			bpl 	_LCOutIdentifier
.d600	b600	7a		ply				ply 								; restore position
.d601	b601	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d604	b604					_LCTokens:
.d604	b604	aa		tax				tax 								; token in X
.d605	b605	a9 e5		lda #$e5			lda 	#((KeywordSet2) & $FF)
.d607	b607	85 36		sta $36				sta 	0+zTemp0
.d609	b609	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d60b	b60b	85 37		sta $37				sta 	1+zTemp0
.d60d	b60d	e0 82		cpx #$82			cpx 	#$82
.d60f	b60f	f0 16		beq $b627			beq 	_LCUseShift
.d611	b611	a9 25		lda #$25			lda 	#((KeywordSet1) & $FF)
.d613	b613	85 36		sta $36				sta 	0+zTemp0
.d615	b615	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d617	b617	85 37		sta $37				sta 	1+zTemp0
.d619	b619	e0 81		cpx #$81			cpx 	#$81
.d61b	b61b	f0 0a		beq $b627			beq 	_LCUseShift
.d61d	b61d	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d61f	b61f	85 36		sta $36				sta 	0+zTemp0
.d621	b621	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d623	b623	85 37		sta $37				sta 	1+zTemp0
.d625	b625	80 01		bra $b628			bra 	_LCNoShift
.d627	b627					_LCUseShift:
.d627	b627	c8		iny				iny
.d628	b628					_LCNoShift:
.d628	b628	20 ed b6	jsr $b6ed			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d62b	b62b	b1 30		lda ($30),y			lda 	(codePtr),y
.d62d	b62d	aa		tax				tax 								; into X
.d62e	b62e					_LCFindText:
.d62e	b62e	ca		dex				dex
.d62f	b62f	10 0e		bpl $b63f			bpl 	_LCFoundText 				; found text.
.d631	b631	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d633	b633	1a		inc a				inc 	a 							; one extra for size
.d634	b634	38		sec				sec 								; one extra for checksum
.d635	b635	65 36		adc $36				adc 	zTemp0 						; go to next token
.d637	b637	85 36		sta $36				sta 	zTemp0
.d639	b639	90 f3		bcc $b62e			bcc 	_LCFindText
.d63b	b63b	e6 37		inc $37				inc 	zTemp0+1
.d63d	b63d	80 ef		bra $b62e			bra 	_LCFindText
.d63f	b63f					_LCFoundText:
.d63f	b63f	5a		phy				phy 								; save List position
.d640	b640	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d642	b642	aa		tax				tax
.d643	b643	a9 86		lda #$86			lda 	#CLIToken+$80
.d645	b645	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d648	b648	a0 02		ldy #$02			ldy 	#2
.d64a	b64a					_LCCopyToken:
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y
.d64c	b64c	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d64f	b64f	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d652	b652	c8		iny				iny
.d653	b653	ca		dex				dex
.d654	b654	d0 f4		bne $b64a			bne 	_LCCopyToken
.d656	b656	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d658	b658	f0 05		beq $b65f			beq 	_LCNoSpace
.d65a	b65a	a9 20		lda #$20			lda 	#' '
.d65c	b65c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d65f	b65f					_LCNoSpace:
.d65f	b65f	7a		ply				ply 								; restore position.
.d660	b660	c8		iny				iny 								; consume token
.d661	b661	4c 72 b5	jmp $b572			jmp 	_LCMainLoop 				; and go around again.
.d664	b664					_LCData:
.d664	b664	48		pha				pha 								; save type $FE/$FF
.d665	b665	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d667	b667	c9 fe		cmp #$fe			cmp 	#$FE
.d669	b669	f0 22		beq $b68d			beq 	_LCHaveOpener
.d66b	b66b	a2 22		ldx #$22			ldx 	#'"'
.d66d	b66d	a9 8f		lda #$8f			lda 	#CLIData+$80
.d66f	b66f	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d672	b672	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d674	b674	d0 17		bne $b68d			bne 	_LCHaveOpener
.d676	b676	88		dey				dey 								; what precedes it ?
.d677	b677	b1 30		lda ($30),y			lda 	(codePtr),y
.d679	b679	c8		iny				iny
.d67a	b67a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d67c	b67c	d0 0f		bne $b68d			bne 	_LCHaveOpener
.d67e	b67e	a9 09		lda #$09			lda 	#9 							; tab
.d680	b680	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d683	b683	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d685	b685	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d688	b688	a9 85		lda #$85			lda 	#CLIFComment+$80
.d68a	b68a	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d68d	b68d					_LCHaveOpener:
.d68d	b68d	8a		txa				txa 								; output prefix (# or ")
.d68e	b68e	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d691	b691	c8		iny				iny 								; get count
.d692	b692	b1 30		lda ($30),y			lda 	(codePtr),y
.d694	b694	aa		tax				tax
.d695	b695	c8		iny				iny 								; point at first character
.d696	b696					_LCOutData:
.d696	b696	b1 30		lda ($30),y			lda 	(codePtr),y
.d698	b698	c9 00		cmp #$00			cmp 	#0
.d69a	b69a	f0 03		beq $b69f			beq 	_LCNoPrint
.d69c	b69c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d69f	b69f					_LCNoPrint:
.d69f	b69f	c8		iny				iny
.d6a0	b6a0	ca		dex				dex
.d6a1	b6a1	d0 f3		bne $b696			bne 	_LCOutData
.d6a3	b6a3	68		pla				pla 								; closing " required ?
.d6a4	b6a4	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6a6	b6a6	d0 0f		bne $b6b7			bne 	_LCNoQuote
.d6a8	b6a8	a9 22		lda #$22			lda 	#'"'
.d6aa	b6aa	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6ad	b6ad	ad 75 06	lda $0675			lda 	EXTTextColour
.d6b0	b6b0	29 0f		and #$0f			and 	#$0F
.d6b2	b6b2	09 90		ora #$90			ora 	#$90
.d6b4	b6b4	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6b7	b6b7					_LCNoQuote:
.d6b7	b6b7	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d6ba	b6ba					LCLWriteColour:
.d6ba	b6ba	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6bd	b6bd	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d6c0	b6c0	d0 01		bne $b6c3			bne 	LCLWrite 					; if different, output it
.d6c2	b6c2	60		rts				rts
.d6c3	b6c3					LCLWrite:
.d6c3	b6c3	da		phx				phx
.d6c4	b6c4	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d6c7	b6c7	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d6ca	b6ca	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d6cd	b6cd	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d6d0	b6d0	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6d2	b6d2	30 03		bmi $b6d7			bmi 	_LCLNoColour
.d6d4	b6d4	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6d7	b6d7					_LCLNoColour:
.d6d7	b6d7	fa		plx				plx
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					LCLDeleteLastSpace:
.d6d9	b6d9	48		pha				pha
.d6da	b6da	da		phx				phx
.d6db	b6db	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6de	b6de	f0 0a		beq $b6ea			beq 	_LCDLSExit
.d6e0	b6e0	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6e3	b6e3	c9 20		cmp #$20			cmp 	#' '
.d6e5	b6e5	d0 03		bne $b6ea			bne 	_LCDLSExit
.d6e7	b6e7	ce 1d 04	dec $041d			dec 	tbOffset
.d6ea	b6ea					_LCDLSExit:
.d6ea	b6ea	fa		plx				plx
.d6eb	b6eb	68		pla				pla
.d6ec	b6ec	60		rts				rts
.d6ed	b6ed					LCLCheckSpaceRequired:
.d6ed	b6ed	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6f0	b6f0	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6f2	b6f2	f0 1b		beq $b70f			beq 	_LCCSRSpace
.d6f4	b6f4	c9 29		cmp #$29			cmp 	#')'
.d6f6	b6f6	f0 17		beq $b70f			beq 	_LCCSRSpace
.d6f8	b6f8	c9 23		cmp #$23			cmp 	#'#'
.d6fa	b6fa	f0 13		beq $b70f			beq 	_LCCSRSpace
.d6fc	b6fc	20 15 b7	jsr $b715			jsr 	LCLLowerCase 				; saves a little effort
.d6ff	b6ff	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d701	b701	90 11		bcc $b714			bcc 	_LCCSRExit
.d703	b703	c9 3a		cmp #$3a			cmp 	#"9"+1
.d705	b705	90 08		bcc $b70f			bcc 	_LCCSRSpace
.d707	b707	c9 61		cmp #$61			cmp 	#"a"
.d709	b709	90 09		bcc $b714			bcc 	_LCCSRExit
.d70b	b70b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d70d	b70d	b0 05		bcs $b714			bcs 	_LCCSRExit
.d70f	b70f					_LCCSRSpace:
.d70f	b70f	a9 20		lda #$20			lda 	#' '
.d711	b711	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d714	b714					_LCCSRExit:
.d714	b714	60		rts				rts
.d715	b715					LCLLowerCase:
.d715	b715	c9 41		cmp #$41			cmp 	#"A"
.d717	b717	90 06		bcc $b71f			bcc 	_LCLLCOut
.d719	b719	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d71b	b71b	b0 02		bcs $b71f			bcs 	_LCLLCOut
.d71d	b71d	69 20		adc #$20			adc 	#$20
.d71f	b71f					_LCLLCOut:
.d71f	b71f	60		rts				rts
.d720	b720					LCLUpperCase:
.d720	b720	c9 61		cmp #$61			cmp 	#"a"
.d722	b722	90 06		bcc $b72a			bcc 	_LCLUCOut
.d724	b724	c9 7b		cmp #$7b			cmp 	#"z"+1
.d726	b726	b0 02		bcs $b72a			bcs 	_LCLUCOut
.d728	b728	e9 1f		sbc #$1f			sbc 	#$1F
.d72a	b72a					_LCLUCOut:
.d72a	b72a	60		rts				rts
.d72b	b72b					LCLWriteNumberXA:
.d72b	b72b	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d72d	b72d					_LCLWNLoop1:
.d72d	b72d	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d72f	b72f					_LCLWNLoop2:
.d72f	b72f	48		pha				pha 								; save initial LSB
.d730	b730	38		sec				sec
.d731	b731	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d733	b733	f9 64 b7	sbc $b764,y			sbc 	_LCLWNTable,y
.d736	b736	48		pha				pha
.d737	b737	8a		txa				txa
.d738	b738	f9 65 b7	sbc $b765,y			sbc 	_LCLWNTable+1,y
.d73b	b73b	90 07		bcc $b744			bcc 	_LCLWNUnderflow
.d73d	b73d	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d73f	b73f	aa		tax				tax 								; update X
.d740	b740	68		pla				pla 								; restore A
.d741	b741	7a		ply				ply 								; throw original
.d742	b742	80 eb		bra $b72f			bra 	_LCLWNLoop2 				; try again.
.d744	b744					_LCLWNUnderflow:
.d744	b744	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d746	b746	d0 06		bne $b74e			bne 	_LCLWNOut
.d748	b748	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d74b	b74b	3a		dec a				dec 	a
.d74c	b74c	f0 04		beq $b752			beq 	_LCLWNNext
.d74e	b74e					_LCLWNOut:
.d74e	b74e	98		tya				tya
.d74f	b74f	20 5e b7	jsr $b75e			jsr 	_LCLWNOutDigit
.d752	b752					_LCLWNNext:
.d752	b752	7a		ply				ply 							 	; restore original value.
.d753	b753	68		pla				pla
.d754	b754	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d756	b756	c8		iny				iny
.d757	b757	c8		iny				iny
.d758	b758	84 37		sty $37				sty 	zTemp0+1
.d75a	b75a	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d75c	b75c	d0 cf		bne $b72d			bne 	_LCLWNLoop1
.d75e	b75e					_LCLWNOutDigit:
.d75e	b75e	09 30		ora #$30			ora 	#'0'
.d760	b760	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d763	b763	60		rts				rts
.d764	b764					_LCLWNTable:
>d764	b764	10 27						.word 	10000
>d766	b766	e8 03						.word 	1000
>d768	b768	64 00						.word 	100
>d76a	b76a	0a 00						.word 	10
.d76c	b76c					TOKSearchTable:
.d76c	b76c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d76e	b76e	85 36		sta $36				sta 	zTemp0
.d770	b770	a0 00		ldy #$00			ldy 	#0
.d772	b772	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d774	b774	85 38		sta $38				sta 	zTemp1
.d776	b776					_TSTLoop:
.d776	b776	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d778	b778	30 49		bmi $b7c3			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d77a	b77a	f0 2e		beq $b7aa			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d77c	b77c	c8		iny				iny 								; get the hash
.d77d	b77d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d77f	b77f	88		dey				dey
.d780	b780	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d783	b783	d0 25		bne $b7aa			bne 	_TSTNext
.d785	b785	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d788	b788	38		sec				sec
.d789	b789	ed 00 04	sbc $0400			sbc 	identStart
.d78c	b78c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d78e	b78e	d0 1a		bne $b7aa			bne 	_TSTNext
.d790	b790	5a		phy				phy 								; save Y , we might fail to match.
.d791	b791	c8		iny				iny 								; point to text
.d792	b792	c8		iny				iny
.d793	b793	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d796	b796					_TSTCompareName:
.d796	b796	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d799	b799	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d79b	b79b	d0 0c		bne $b7a9			bne 	_TSTNextPullY 				; fail, pullY and do next
.d79d	b79d	e8		inx				inx
.d79e	b79e	c8		iny				iny
.d79f	b79f	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7a2	b7a2	d0 f2		bne $b796			bne 	_TSTCompareName
.d7a4	b7a4	7a		ply				ply 								; throw Y
.d7a5	b7a5	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7a7	b7a7	38		sec				sec 								; return with CS = passed.
.d7a8	b7a8	60		rts				rts
.d7a9	b7a9					_TSTNextPullY:
.d7a9	b7a9	7a		ply				ply 								; restore current, fall through.
.d7aa	b7aa					_TSTNext:
.d7aa	b7aa	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ac	b7ac	98		tya				tya
.d7ad	b7ad	18		clc				clc
.d7ae	b7ae	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7b0	b7b0	1a		inc a				inc 	a 							; +1
.d7b1	b7b1	1a		inc a				inc 	a 							; +2
.d7b2	b7b2	a8		tay				tay
.d7b3	b7b3	10 c1		bpl $b776			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7b5	b7b5	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7b6	b7b6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7b8	b7b8	18		clc				clc  								; but have tables > 255 bytes
.d7b9	b7b9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7bb	b7bb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7bd	b7bd	90 b7		bcc $b776			bcc 	_TSTLoop
.d7bf	b7bf	e6 37		inc $37				inc 	zTemp0+1
.d7c1	b7c1	80 b3		bra $b776			bra 	_TSTLoop
.d7c3	b7c3					_TSTFail:
.d7c3	b7c3	18		clc				clc
.d7c4	b7c4	60		rts				rts
.d7c5	b7c5					Export_TKTokeniseLine:
.d7c5	b7c5	20 92 b9	jsr $b992			jsr 	LCLFixLineBufferCase 		; fix line case
.d7c8	b7c8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7ca	b7ca	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7cd	b7cd	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d7d0	b7d0	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d7d3	b7d3	a2 ff		ldx #$ff			ldx 	#$FF
.d7d5	b7d5					_TKFindFirst:
.d7d5	b7d5	e8		inx				inx
.d7d6	b7d6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7d9	b7d9	f0 62		beq $b83d			beq 	_TKExit
.d7db	b7db	c9 20		cmp #$20			cmp 	#' '
.d7dd	b7dd	90 f6		bcc $b7d5			bcc 	_TKFindFirst
.d7df	b7df	c9 30		cmp #$30			cmp 	#'0'
.d7e1	b7e1	90 07		bcc $b7ea			bcc 	_TKNoLineNumber
.d7e3	b7e3	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7e5	b7e5	b0 03		bcs $b7ea			bcs 	_TKNoLineNumber
.d7e7	b7e7	20 bc b9	jsr $b9bc			jsr 	TOKExtractLineNumber
.d7ea	b7ea					_TKNoLineNumber:
.d7ea	b7ea					_TKTokeniseLoop:
.d7ea	b7ea	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ed	b7ed	f0 4e		beq $b83d			beq 	_TKExit
.d7ef	b7ef	e8		inx				inx
.d7f0	b7f0	c9 20		cmp #$20			cmp 	#' '
.d7f2	b7f2	f0 f6		beq $b7ea			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7f4	b7f4	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7f5	b7f5	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7f7	b7f7	f0 68		beq $b861			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7f9	b7f9	c9 41		cmp #$41			cmp 	#'A'
.d7fb	b7fb	90 04		bcc $b801			bcc 	_TKTokenisePunctuation
.d7fd	b7fd	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7ff	b7ff	90 60		bcc $b861			bcc 	_TKTokeniseIdentifier
.d801	b801					_TKTokenisePunctuation:
.d801	b801	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d803	b803	f0 2e		beq $b833			beq 	_TKString
.d805	b805	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d807	b807	f0 2f		beq $b838			beq 	_TKHexConstant
.d809	b809	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d80b	b80b	f0 36		beq $b843			beq 	_TKCheckDouble
.d80d	b80d	c9 3e		cmp #$3e			cmp 	#'>'
.d80f	b80f	f0 32		beq $b843			beq 	_TKCheckDouble
.d811	b811					_TKStandardPunctuation:
.d811	b811	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d814	b814	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d816	b816	90 0e		bcc $b826			bcc 	_TKNoShift
.d818	b818	48		pha				pha 								; save. we are about to convert this punctuation token from
.d819	b819	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d81b	b81b	85 36		sta $36				sta 	zTemp0
.d81d	b81d	68		pla				pla
.d81e	b81e	29 20		and #$20			and 	#32 						; bit 5
.d820	b820	4a		lsr a				lsr 	a 							; shift into bit 3
.d821	b821	4a		lsr a				lsr 	a
.d822	b822	05 36		ora $36				ora 	zTemp0
.d824	b824	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d826	b826					_TKNoShift:
.d826	b826	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; write the punctuation character
.d829	b829	e8		inx				inx 								; consume the character
.d82a	b82a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d82c	b82c	d0 bc		bne $b7ea			bne 	_TKTokeniseLoop 			; and loop round again.
.d82e	b82e	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment 			; comment checl
.d831	b831	80 b7		bra $b7ea			bra 	_TKTokeniseLoop
.d833	b833					_TKString:
.d833	b833	20 21 b9	jsr $b921			jsr 	TOKTokenString
.d836	b836	80 b2		bra $b7ea			bra 	_TKTokeniseLoop
.d838	b838					_TKHexConstant:
.d838	b838	20 5c b9	jsr $b95c			jsr 	TOKHexConstant
.d83b	b83b	80 ad		bra $b7ea			bra 	_TKTokeniseLoop
.d83d	b83d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d83f	b83f	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d842	b842	60		rts				rts
.d843	b843					_TKCheckDouble:
.d843	b843	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d846	b846	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d848	b848	90 c7		bcc $b811			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d84a	b84a	c9 3f		cmp #$3f			cmp 	#'>'+1
.d84c	b84c	b0 c3		bcs $b811			bcs 	_TKStandardPunctuation
.d84e	b84e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d851	b851	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d853	b853	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d854	b854	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d857	b857	38		sec				sec
.d858	b858	e9 3c		sbc #$3c			sbc 	#'<'
.d85a	b85a	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; this is in the range 0-7
.d85d	b85d	e8		inx				inx 								; consume both
.d85e	b85e	e8		inx				inx
.d85f	b85f	80 89		bra $b7ea			bra 	_TKTokeniseLoop
.d861	b861					_TKTokeniseIdentifier:
.d861	b861	8e 00 04	stx $0400			stx 	identStart 					; save start
.d864	b864	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d867	b867					_TKCheckLoop:
.d867	b867	e8		inx				inx 								; look at next, we know first is identifier already.
.d868	b868	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d86b	b86b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d86d	b86d	f0 f8		beq $b867			beq 	_TKCheckLoop
.d86f	b86f	c9 30		cmp #$30			cmp	 	#"0"
.d871	b871	90 0c		bcc $b87f			bcc 	_TKEndIdentifier
.d873	b873	c9 3a		cmp #$3a			cmp 	#"9"+1
.d875	b875	90 f0		bcc $b867			bcc 	_TKCheckLoop
.d877	b877	c9 41		cmp #$41			cmp	 	#"A"
.d879	b879	90 04		bcc $b87f			bcc 	_TKEndIdentifier
.d87b	b87b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d87d	b87d	90 e8		bcc $b867			bcc 	_TKCheckLoop
.d87f	b87f					_TKEndIdentifier:
.d87f	b87f	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d882	b882	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d884	b884	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d886	b886	f0 06		beq $b88e			beq 	_TKHasTypeCharacter
.d888	b888	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d88a	b88a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d88c	b88c	d0 07		bne $b895			bne 	_TKNoTypeCharacter
.d88e	b88e					_TKHasTypeCharacter:
.d88e	b88e	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d891	b891	e8		inx				inx 								; consume the type character
.d892	b892	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d895	b895					_TKNoTypeCharacter:
.d895	b895	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d897	b897	d0 09		bne $b8a2			bne 	_TKNoArray
.d899	b899	e8		inx				inx 								; skip the (
.d89a	b89a	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d89d	b89d	09 04		ora #$04			ora 	#$04
.d89f	b89f	8d 04 04	sta $0404			sta 	identTypeByte
.d8a2	b8a2					_TKNoArray:
.d8a2	b8a2	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8a5	b8a5	20 7d b9	jsr $b97d			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8a8	b8a8	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8aa	b8aa	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8ac	b8ac	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8af	b8af	a2 00		ldx #$00			ldx 	#0
.d8b1	b8b1	b0 1f		bcs $b8d2			bcs 	_TKFoundToken
.d8b3	b8b3	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8b5	b8b5	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.d8b7	b8b7	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8ba	b8ba	a2 81		ldx #$81			ldx 	#$81
.d8bc	b8bc	b0 14		bcs $b8d2			bcs 	_TKFoundToken
.d8be	b8be	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d8c0	b8c0	a9 e5		lda #$e5			lda 	#(KeywordSet2) & $FF
.d8c2	b8c2	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8c5	b8c5	a2 82		ldx #$82			ldx 	#$82
.d8c7	b8c7	b0 09		bcs $b8d2			bcs 	_TKFoundToken
.d8c9	b8c9	20 0d ba	jsr $ba0d			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8cc	b8cc	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8cf	b8cf	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8d2	b8d2					_TKFoundToken:
.d8d2	b8d2	48		pha				pha 								; save token
.d8d3	b8d3	8a		txa				txa 								; shift in X, is there one ?
.d8d4	b8d4	f0 03		beq $b8d9			beq 	_TKNoTShift
.d8d6	b8d6	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; if so, write it out
.d8d9	b8d9					_TKNoTShift:
.d8d9	b8d9	68		pla				pla 								; restore and write token
.d8da	b8da	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d8dd	b8dd	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8df	b8df	d0 0d		bne $b8ee			bne 	_TKNotRem 			 		; not shifted ?
.d8e1	b8e1	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d8e3	b8e3	d0 09		bne $b8ee			bne 	_TKNotRem
.d8e5	b8e5	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8e8	b8e8	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment
.d8eb	b8eb	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop
.d8ee	b8ee					_TKNotRem:
.d8ee	b8ee	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8f1	b8f1	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8f4	b8f4					TOKCheckComment:
.d8f4	b8f4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8f7	b8f7	e8		inx				inx
.d8f8	b8f8	c9 20		cmp #$20			cmp 	#' '
.d8fa	b8fa	f0 f8		beq $b8f4			beq 	TOKCheckComment
.d8fc	b8fc	ca		dex				dex 								; first non space character
.d8fd	b8fd	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8ff	b8ff	f0 1f		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d901	b901	c9 00		cmp #$00			cmp 	#0 							; EOL
.d903	b903	f0 1b		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d905	b905	da		phx				phx
.d906	b906					_TOKCCLowerCase:
.d906	b906	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d909	b909	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d90b	b90b	90 09		bcc $b916			bcc 	_TOKKCNotUC
.d90d	b90d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d90f	b90f	b0 05		bcs $b916			bcs 	_TOKKCNotUC
.d911	b911	49 20		eor #$20			eor 	#$20
.d913	b913	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d916	b916					_TOKKCNotUC:
.d916	b916	e8		inx				inx
.d917	b917	c9 00		cmp #$00			cmp 	#0
.d919	b919	d0 eb		bne $b906			bne 	_TOKCCLowerCase
.d91b	b91b	fa		plx				plx
.d91c	b91c	ca		dex				dex 								; tokenise string expects initial skip.
.d91d	b91d	20 21 b9	jsr $b921			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d920	b920					_TOKCCExit:
.d920	b920	60		rts				rts
.d921	b921					TOKTokenString:
.d921	b921	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d923	b923	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d926	b926	e8		inx				inx									; start of quoted string.
.d927	b927	da		phx				phx 								; push start of string on top
.d928	b928	ca		dex				dex 								; because we pre-increment
.d929	b929					_TSFindEnd:
.d929	b929	e8		inx				inx
.d92a	b92a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d92d	b92d	f0 04		beq $b933			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d92f	b92f	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d931	b931	d0 f6		bne $b929			bne 	_TSFindEnd
.d933	b933					_TSEndOfString:
.d933	b933	7a		ply				ply  								; so now Y is first character, X is character after end.
.d934	b934	48		pha				pha 								; save terminating character
.d935	b935	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d938	b938	68		pla				pla 								; terminating character
.d939	b939	f0 01		beq $b93c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d93b	b93b	e8		inx				inx
.d93c	b93c					_TSNotQuote:
.d93c	b93c	60		rts				rts
.d93d	b93d					TOKWriteBlockXY:
.d93d	b93d	86 36		stx $36				stx 	zTemp0 						; save end character
.d93f	b93f	98		tya				tya 								; use 2's complement to work out the byte size
.d940	b940	49 ff		eor #$ff			eor 	#$FF
.d942	b942	38		sec				sec
.d943	b943	65 36		adc $36				adc 	zTemp0
.d945	b945	1a		inc a				inc 	a 							; one extra for NULL
.d946	b946	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d949	b949					_TOBlockLoop:
.d949	b949	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d94b	b94b	f0 09		beq $b956			beq 	_TOBlockExit
.d94d	b94d	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d950	b950	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d953	b953	c8		iny				iny
.d954	b954	80 f3		bra $b949			bra 	_TOBlockLoop
.d956	b956					_TOBlockExit:
.d956	b956	a9 00		lda #$00			lda 	#0 							; add NULL.
.d958	b958	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d95b	b95b	60		rts				rts
.d95c	b95c					TOKHexConstant:
.d95c	b95c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d95e	b95e	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d961	b961	e8		inx				inx									; start of quoted string.
.d962	b962	da		phx				phx 								; push start of constant on top
.d963	b963	ca		dex				dex
.d964	b964					_THFindLoop:
.d964	b964	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d965	b965	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d968	b968	c9 30		cmp #$30			cmp 	#"0"
.d96a	b96a	90 0c		bcc $b978			bcc 	_THFoundEnd
.d96c	b96c	c9 3a		cmp #$3a			cmp 	#"9"+1
.d96e	b96e	90 f4		bcc $b964			bcc 	_THFindLoop
.d970	b970	c9 41		cmp #$41			cmp 	#"A"
.d972	b972	90 04		bcc $b978			bcc 	_THFoundEnd
.d974	b974	c9 47		cmp #$47			cmp 	#"F"+1
.d976	b976	90 ec		bcc $b964			bcc 	_THFindLoop
.d978	b978					_THFoundEnd:
.d978	b978	7a		ply				ply 								; restore start
.d979	b979	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; output the block
.d97c	b97c	60		rts				rts
.d97d	b97d					TOKCalculateHash:
.d97d	b97d	da		phx				phx
.d97e	b97e	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d981	b981	a9 00		lda #$00			lda 	#0
.d983	b983					_TCHLoop:
.d983	b983	18		clc				clc
.d984	b984	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d987	b987	e8		inx				inx
.d988	b988	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d98b	b98b	d0 f6		bne $b983			bne 	_TCHLoop
.d98d	b98d	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d990	b990	fa		plx				plx
.d991	b991	60		rts				rts
.d992	b992					LCLFixLineBufferCase:
.d992	b992	a2 00		ldx #$00			ldx 	#0
.d994	b994					_FLBCLoop:
.d994	b994	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d997	b997	f0 22		beq $b9bb			beq 	_FLBCExit 					; end of string.
.d999	b999	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d99b	b99b	f0 11		beq $b9ae			beq 	_FLBCInQuotes
.d99d	b99d	e8		inx				inx
.d99e	b99e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9a0	b9a0	90 f2		bcc $b994			bcc 	_FLBCLoop
.d9a2	b9a2	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9a4	b9a4	b0 ee		bcs $b994			bcs 	_FLBCLoop
.d9a6	b9a6	38		sec				sec 								; make U/C
.d9a7	b9a7	e9 20		sbc #$20			sbc 	#32
.d9a9	b9a9	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9ac	b9ac	80 e6		bra $b994			bra 	_FLBCLoop
.d9ae	b9ae					_FLBCInQuotes:
.d9ae	b9ae	e8		inx				inx 								; advance
.d9af	b9af	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9b2	b9b2	f0 07		beq $b9bb			beq 	_FLBCExit 					; exit on EOS
.d9b4	b9b4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9b6	b9b6	d0 f6		bne $b9ae			bne 	_FLBCInQuotes
.d9b8	b9b8	e8		inx				inx 								; skip over it
.d9b9	b9b9	80 d9		bra $b994			bra 	_FLBCLoop
.d9bb	b9bb					_FLBCExit:
.d9bb	b9bb	60		rts				rts
.d9bc	b9bc					TOKExtractLineNumber:
.d9bc	b9bc	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d9bf	b9bf	48		pha				pha
.d9c0	b9c0	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d9c3	b9c3	48		pha				pha
.d9c4	b9c4	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 2
.d9c7	b9c7	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 4
.d9ca	b9ca	18		clc				clc 								; add stacked value
.d9cb	b9cb	68		pla				pla
.d9cc	b9cc	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9cf	b9cf	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9d2	b9d2	68		pla				pla
.d9d3	b9d3	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9d6	b9d6	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9d9	b9d9	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 10
.d9dc	b9dc	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	29 0f		and #$0f			and 	#15 						; add to line #
.d9e2	b9e2	18		clc				clc
.d9e3	b9e3	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9e6	b9e6	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9e9	b9e9	90 03		bcc $b9ee			bcc 	_TLENNoCarry
.d9eb	b9eb	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ee	b9ee					_TLENNoCarry:
.d9ee	b9ee	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9f1	b9f1	c9 30		cmp #$30			cmp 	#'0'
.d9f3	b9f3	90 04		bcc $b9f9			bcc 	_TLENExit
.d9f5	b9f5	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9f7	b9f7	90 c3		bcc $b9bc			bcc 	TOKExtractLineNumber
.d9f9	b9f9					_TLENExit:
.d9f9	b9f9	60		rts				rts
.d9fa	b9fa					_LCLNTimes2:
.d9fa	b9fa	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9fd	b9fd	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da00	ba00	60		rts				rts
.da01	ba01					TOKWriteByte:
.da01	ba01	da		phx				phx
.da02	ba02	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da05	ba05	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da08	ba08	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da0b	ba0b	fa		plx				plx
.da0c	ba0c	60		rts				rts
.da0d	ba0d					TOKCheckCreateVariableRecord:
.da0d	ba0d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da0f	ba0f	85 36		sta $36				sta 	0+zTemp0
.da11	ba11	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da13	ba13	85 37		sta $37				sta 	1+zTemp0
.da15	ba15					_CCVSearch:
.da15	ba15	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da17	ba17	f0 2c		beq $ba45			beq 	_CCVFail
.da19	ba19	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da1b	ba1b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da1d	ba1d	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da20	ba20	d0 16		bne $ba38			bne 	_CCVNext
.da22	ba22	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da24	ba24	ae 00 04	ldx $0400			ldx 	identStart
.da27	ba27					_CCVCompare:
.da27	ba27	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da2a	ba2a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da2c	ba2c	e8		inx				inx 								; advance pointers
.da2d	ba2d	c8		iny				iny
.da2e	ba2e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da2f	ba2f	d0 07		bne $ba38			bne 	_CCVNext  					; didn't match go to next.
.da31	ba31	90 f4		bcc $ba27			bcc 	_CCVCompare 				; not finished yet.
.da33	ba33	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da36	ba36	f0 41		beq $ba79			beq 	_CCVFound 					; yes, we were successful
.da38	ba38					_CCVNext:
.da38	ba38	18		clc				clc 								; go to next record.
.da39	ba39	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da3b	ba3b	65 36		adc $36				adc 	zTemp0
.da3d	ba3d	85 36		sta $36				sta 	zTemp0
.da3f	ba3f	90 d4		bcc $ba15			bcc 	_CCVSearch
.da41	ba41	e6 37		inc $37				inc 	zTemp0+1
.da43	ba43	80 d0		bra $ba15			bra 	_CCVSearch
.da45	ba45					_CCVFail:
.da45	ba45	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da47	ba47	ad 03 04	lda $0403			lda 	identHash
.da4a	ba4a	91 36		sta ($36),y			sta 	(zTemp0),y
.da4c	ba4c	c8		iny				iny 								; offset 2 is the type byte
.da4d	ba4d	ad 04 04	lda $0404			lda 	identTypeByte
.da50	ba50	91 36		sta ($36),y			sta 	(zTemp0),y
.da52	ba52	c8		iny				iny
.da53	ba53					_CCVData:
.da53	ba53	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da55	ba55	91 36		sta ($36),y			sta 	(zTemp0),y
.da57	ba57	c8		iny				iny
.da58	ba58	c0 08		cpy #$08			cpy 	#8
.da5a	ba5a	90 f7		bcc $ba53			bcc 	_CCVData
.da5c	ba5c	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da5f	ba5f					_CCVCopyName:
.da5f	ba5f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da62	ba62	91 36		sta ($36),y			sta 	(zTemp0),y
.da64	ba64	e8		inx				inx
.da65	ba65	c8		iny				iny
.da66	ba66	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da69	ba69	d0 f4		bne $ba5f			bne 	_CCVCopyName
.da6b	ba6b	98		tya				tya 								; patch offset
.da6c	ba6c	92 36		sta ($36)			sta 	(zTemp0)
.da6e	ba6e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da70	ba70	91 36		sta ($36),y			sta 	(zTemp0),y
.da72	ba72	88		dey				dey
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da75	ba75	09 80		ora #$80			ora 	#$80
.da77	ba77	91 36		sta ($36),y			sta 	(zTemp0),y
.da79	ba79					_CCVFound:
.da79	ba79	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da7b	ba7b	38		sec				sec
.da7c	ba7c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da7e	ba7e	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da80	ba80	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da83	ba83	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da85	ba85	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da88	ba88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da89	ba89					SNDCheckChannel:
.da89	ba89	aa		tax				tax
.da8a	ba8a	bd 3e 08	lda $083e,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da8d	ba8d	d0 38		bne $bac7			bne 	_SNDCCExit
.da8f	ba8f	da		phx				phx 								; save current channel
.da90	ba90	8a		txa				txa 								; put in A
.da91	ba91	20 0d bb	jsr $bb0d			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da94	ba94	68		pla				pla 								; channel # in A
.da95	ba95	90 30		bcc $bac7			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da97	ba97	a8		tay				tay 								; Y is the channel #
.da98	ba98	bd 33 07	lda $0733,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da9b	ba9b	99 32 08	sta $0832,y			sta 	SNDPitchLow,y
.da9e	ba9e	bd 34 07	lda $0734,x			lda 	SNDQueue+2,x
.daa1	baa1	99 36 08	sta $0836,y			sta 	SNDPitchHigh,y
.daa4	baa4	bd 35 07	lda $0735,x			lda 	SNDQueue+3,x
.daa7	baa7	99 3a 08	sta $083a,y			sta 	SNDVolume,y
.daaa	baaa	bd 36 07	lda $0736,x			lda 	SNDQueue+4,x
.daad	baad	99 3e 08	sta $083e,y			sta 	SNDTimeLeft,y
.dab0	bab0	bd 37 07	lda $0737,x			lda 	SNDQueue+5,x
.dab3	bab3	99 42 08	sta $0842,y			sta 	SNDAdjustLow,y
.dab6	bab6	bd 38 07	lda $0738,x			lda 	SNDQueue+6,x
.dab9	bab9	99 46 08	sta $0846,y			sta 	SNDAdjustHigh,y
.dabc	babc	5a		phy				phy 								; save channel #
.dabd	babd	20 27 bb	jsr $bb27			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dac0	bac0	ce 31 07	dec $0731			dec 	SNDLength 					; reduce the queue length.
.dac3	bac3	68		pla				pla
.dac4	bac4	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update channel A
.dac7	bac7					_SNDCCExit:
.dac7	bac7	60		rts				rts
.dac8	bac8					SNDUpdateNote:
.dac8	bac8	aa		tax				tax 								; so we can access records
.dac9	bac9	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.daca	baca	0a		asl a				asl 	a
.dacb	bacb	0a		asl a				asl 	a
.dacc	bacc	0a		asl a				asl 	a
.dacd	bacd	0a		asl a				asl 	a
.dace	bace	8d 30 07	sta $0730			sta 	SNDChannelBits
.dad1	bad1	bd 3e 08	lda $083e,x			lda 	SNDTimeLeft,x 				; are we silent
.dad4	bad4	f0 2e		beq $bb04			beq 	_SNDUNIsSilent
.dad6	bad6	ad 30 07	lda $0730			lda 	SNDChannelBits 				; push channel bits on stack
.dad9	bad9	48		pha				pha
.dada	bada	bd 32 08	lda $0832,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dadd	badd	29 0f		and #$0f			and 	#$0F
.dadf	badf	0d 30 07	ora $0730			ora 	SNDChannelBits 				; set channel bits
.dae2	bae2	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dae4	bae4	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.dae7	bae7	bd 36 08	lda $0836,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daea	baea	8d 30 07	sta $0730			sta 	SNDChannelBits
.daed	baed	bd 32 08	lda $0832,x			lda 	SNDPitchLow,x
.daf0	baf0	4e 30 07	lsr $0730			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.daf3	baf3	6a		ror a				ror 	a
.daf4	baf4	4e 30 07	lsr $0730			lsr 	SNDChannelBits
.daf7	baf7	6a		ror a				ror 	a
.daf8	baf8	4a		lsr a				lsr 	a 							; put in bits 0-5
.daf9	baf9	4a		lsr a				lsr 	a
.dafa	bafa	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write as rest of pitch register
.dafd	bafd	68		pla				pla
.dafe	bafe	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db00	bb00	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db03	bb03	60		rts				rts
.db04	bb04					_SNDUNIsSilent:
.db04	bb04	ad 30 07	lda $0730			lda 	SNDChannelBits 				; channel bits
.db07	bb07	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db09	bb09	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write to the ports
.db0c	bb0c	60		rts				rts
.db0d	bb0d					SNDFindNextNoteForA:
.db0d	bb0d	ac 31 07	ldy $0731			ldy 	SNDLength 					; queue size into Y
.db10	bb10	f0 13		beq $bb25			beq 	_SNDFNNFail 				; queue empty.
.db12	bb12	a2 00		ldx #$00			ldx 	#0
.db14	bb14					_SNDFNNSearch:
.db14	bb14	dd 32 07	cmp $0732,x			cmp 	SNDQueue,x 					; does it match the channel
.db17	bb17	38		sec				sec
.db18	bb18	f0 0c		beq $bb26			beq 	_SNDFNNExit 				; if so exit with CS.
.db1a	bb1a	e8		inx				inx 								; next queue slot.
.db1b	bb1b	e8		inx				inx
.db1c	bb1c	e8		inx				inx
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	e8		inx				inx
.db1f	bb1f	e8		inx				inx
.db20	bb20	e8		inx				inx
.db21	bb21	e8		inx				inx
.db22	bb22	88		dey				dey 								; done the whole queue
.db23	bb23	d0 ef		bne $bb14			bne 	_SNDFNNSearch 				; no, go back.
.db25	bb25					_SNDFNNFail:
.db25	bb25	18		clc				clc
.db26	bb26					_SNDFNNExit:
.db26	bb26	60		rts				rts
.db27	bb27					SNDDeleteXFromQueue:
.db27	bb27	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db29	bb29	f0 09		beq $bb34			beq 	_SNDDXExit
.db2b	bb2b	bd 3a 07	lda $073a,x			lda 	SNDQueue+8,x
.db2e	bb2e	9d 32 07	sta $0732,x			sta 	SNDQueue,x
.db31	bb31	e8		inx				inx
.db32	bb32	80 f3		bra $bb27			bra 	SNDDeleteXFromQueue
.db34	bb34					_SNDDXExit:
.db34	bb34	60		rts				rts
.0730						SNDChannelBits:
>0730								.fill 	1
.db35	bb35					SNDQueueRequest:
.db35	bb35	86 36		stx $36				stx 	zTemp0						; save queue address
.db37	bb37	84 37		sty $37				sty 	zTemp0+1
.db39	bb39	ae 31 07	ldx $0731			ldx 	SNDLength 					; queue is full, can't take any more.
.db3c	bb3c	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db3e	bb3e	f0 21		beq $bb61			beq 	_SNDQRExit
.db40	bb40	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db42	bb42	48		pha				pha
.db43	bb43	8a		txa				txa  								; get offset in queue buffer/
.db44	bb44	0a		asl a				asl 	a
.db45	bb45	0a		asl a				asl 	a
.db46	bb46	0a		asl a				asl 	a
.db47	bb47	aa		tax				tax
.db48	bb48	68		pla				pla 								; get back and push again
.db49	bb49	48		pha				pha
.db4a	bb4a	9d 32 07	sta $0732,x			sta 	SNDQueue+0,x 				; save the channel #
.db4d	bb4d	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db4f	bb4f					_SNDQCopy:
.db4f	bb4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.db51	bb51	e8		inx				inx
.db52	bb52	c8		iny				iny
.db53	bb53	9d 32 07	sta $0732,x			sta 	SNDQueue,x
.db56	bb56	c0 06		cpy #$06			cpy 	#6
.db58	bb58	d0 f5		bne $bb4f			bne 	_SNDQCopy
.db5a	bb5a	ee 31 07	inc $0731			inc 	SNDLength 					; bump queue length.
.db5d	bb5d	68		pla				pla 								; get channel # back
.db5e	bb5e	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db61	bb61					_SNDQRExit:
.db61	bb61	60		rts				rts
.db62	bb62					SNDSilenceChannel:
.db62	bb62	aa		tax				tax 								; zero time left.
.db63	bb63	9e 3e 08	stz $083e,x			stz 	SNDTimeLeft,x
.db66	bb66	0a		asl a				asl 	a 							; shift into position
.db67	bb67	0a		asl a				asl 	a
.db68	bb68	0a		asl a				asl 	a
.db69	bb69	0a		asl a				asl 	a
.db6a	bb6a	0a		asl a				asl 	a
.db6b	bb6b	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db6d	bb6d	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db70	bb70	60		rts				rts
.db71	bb71					SNDWritePorts:
.db71	bb71	da		phx				phx 								; save X
.db72	bb72	a6 01		ldx $01				ldx 	1 							; save I/O status
.db74	bb74	64 01		stz $01				stz 	1 							; access I/O page 0
.db76	bb76	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db79	bb79	8d 10 d6	sta $d610			sta 	$D610
.db7c	bb7c	86 01		stx $01				stx 	1 							; restore I/O
.db7e	bb7e	fa		plx				plx 								; restore X
.db7f	bb7f	60		rts				rts
.db80	bb80					Export_SNDCommand:
.db80	bb80	da		phx				phx 								; save XY
.db81	bb81	5a		phy				phy
.db82	bb82	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db84	bb84	f0 1d		beq $bba3			beq 	_SNDInitialise
.db86	bb86	90 28		bcc $bbb0			bcc 	_SNDExit
.db88	bb88	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db8a	bb8a	f0 17		beq $bba3			beq 	_SNDSilence
.db8c	bb8c	b0 22		bcs $bbb0			bcs 	_SNDExit
.db8e	bb8e	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db90	bb90	b0 09		bcs $bb9b			bcs 	_SNDQueryPlay
.db92	bb92	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db94	bb94	b0 1a		bcs $bbb0			bcs 	_SNDExit
.db96	bb96	20 35 bb	jsr $bb35			jsr 	SNDQueueRequest
.db99	bb99	80 15		bra $bbb0			bra 	_SNDExit
.db9b	bb9b					_SNDQueryPlay:
.db9b	bb9b	29 03		and #$03			and 	#3 							; get channel #
.db9d	bb9d	aa		tax				tax
.db9e	bb9e	bd 3e 08	lda $083e,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dba1	bba1	80 0d		bra $bbb0			bra 	_SNDExit
.dba3	bba3					_SNDInitialise:
.dba3	bba3					_SNDSilence:
.dba3	bba3	9c 31 07	stz $0731			stz 	SNDLength 					; empty the queue.
.dba6	bba6	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dba8	bba8					_SNDSilenceLoop:
.dba8	bba8	48		pha				pha
.dba9	bba9	20 62 bb	jsr $bb62			jsr 	SNDSilenceChannel
.dbac	bbac	68		pla				pla
.dbad	bbad	3a		dec a				dec 	a
.dbae	bbae	10 f8		bpl $bba8			bpl 	_SNDSilenceLoop
.dbb0	bbb0					_SNDExit:
.dbb0	bbb0	7a		ply				ply
.dbb1	bbb1	fa		plx				plx
.dbb2	bbb2	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0731						SNDLength:
>0731								.fill 	1
.0732						SNDQueue:
>0732								.fill 	SNDQueueSize * 8
.0832						SNDPitchLow:
>0832								.fill 	4
.0836						SNDPitchHigh:
>0836								.fill 	4
.083a						SNDVolume:
>083a								.fill 	4
.083e						SNDTimeLeft:
>083e								.fill 	4
.0842						SNDAdjustLow:
>0842								.fill 	4
.0846						SNDAdjustHigh:
>0846								.fill 	4
.dbb3	bbb3					Export_SNDUpdate:
.dbb3	bbb3					PagedSNDUpdate:
.dbb3	bbb3	ad 3e 08	lda $083e			lda 	SNDTimeLeft+0 				; look at time remaining
.dbb6	bbb6	f0 05		beq $bbbd			beq 	_SNDUNot0 					; not playing
.dbb8	bbb8	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbba	bbba	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel 			; update it.
.dbbd	bbbd					_SNDUNot0:
.dbbd	bbbd	ad 3f 08	lda $083f			lda 	SNDTimeLeft+1
.dbc0	bbc0	f0 05		beq $bbc7			beq 	_SNDUNot1
.dbc2	bbc2	a2 01		ldx #$01			ldx 	#1
.dbc4	bbc4	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbc7	bbc7					_SNDUNot1:
.dbc7	bbc7	ad 40 08	lda $0840			lda 	SNDTimeLeft+2
.dbca	bbca	f0 05		beq $bbd1			beq 	_SNDUNot2
.dbcc	bbcc	a2 02		ldx #$02			ldx 	#2
.dbce	bbce	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbd1	bbd1					_SNDUNot2:
.dbd1	bbd1	ad 41 08	lda $0841			lda 	SNDTimeLeft+3
.dbd4	bbd4	f0 05		beq $bbdb			beq 	_SNDUNot3
.dbd6	bbd6	a2 03		ldx #$03			ldx 	#3
.dbd8	bbd8	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbdb	bbdb					_SNDUNot3:
.dbdb	bbdb	60		rts				rts
.dbdc	bbdc					SNDUpdateChannel:
.dbdc	bbdc	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbde	bbde	f0 2c		beq $bc0c			beq 	_SNDUCExit
.dbe0	bbe0	3a		dec a				dec 	a 							; decrement and update timer
.dbe1	bbe1	9d 3e 08	sta $083e,x			sta 	SNDTimeLeft,x
.dbe4	bbe4	f0 1d		beq $bc03			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbe6	bbe6	bd 42 08	lda $0842,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbe9	bbe9	1d 46 08	ora $0846,x			ora 	SNDAdjustHigh,x
.dbec	bbec	f0 1e		beq $bc0c			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbee	bbee	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbef	bbef	bd 32 08	lda $0832,x			lda 	SNDPitchLow,x
.dbf2	bbf2	7d 42 08	adc $0842,x			adc 	SNDAdjustLow,x
.dbf5	bbf5	9d 32 08	sta $0832,x			sta 	SNDPitchLow,x
.dbf8	bbf8	bd 36 08	lda $0836,x			lda 	SNDPitchHigh,x
.dbfb	bbfb	7d 46 08	adc $0846,x			adc 	SNDAdjustHigh,x
.dbfe	bbfe	29 03		and #$03			and 	#3
.dc00	bc00	9d 36 08	sta $0836,x			sta 	SNDPitchHigh,x
.dc03	bc03					_SNDUCUpdate:
.dc03	bc03	8a		txa				txa 								; which channel.
.dc04	bc04	48		pha				pha
.dc05	bc05	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update the current note
.dc08	bc08	68		pla				pla
.dc09	bc09	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; more to do ?
.dc0c	bc0c					_SNDUCExit:
.dc0c	bc0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc0d	bc0d					Export_KNLInputSingleCharacter:
.dc0d	bc0d					PagedInputSingleCharacter:
.dc0d	bc0d	da		phx				phx
.dc0e	bc0e	5a		phy				phy
.dc0f	bc0f					_EISCWait:
.dc0f	bc0f	a5 01		lda $01				lda 	1 							; save I/O 0
.dc11	bc11	48		pha				pha
.dc12	bc12	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc14	bc14	38		sec				sec 								; calculate timer - LastTick
.dc15	bc15	ad 59 d6	lda $d659			lda 	$D659
.dc18	bc18	cd 62 06	cmp $0662			cmp 	LastTick
.dc1b	bc1b	f0 06		beq $bc23			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.dc1d	bc1d	8d 62 06	sta $0662			sta 	LastTick 					; update last timer
.dc20	bc20	20 b3 bb	jsr $bbb3			jsr 	PagedSNDUpdate 							; go do the code.
.dc23	bc23					_NoFireTick:
.dc23	bc23	68		pla				pla 								; restore I/O 0
.dc24	bc24	85 01		sta $01				sta 	1
.dc26	bc26	20 30 bc	jsr $bc30			jsr 	CheckKeyPressed
.dc29	bc29	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc2b	bc2b	f0 e2		beq $bc0f			beq 	_EISCWait
.dc2d	bc2d	7a		ply				ply
.dc2e	bc2e	fa		plx				plx
.dc2f	bc2f	60		rts				rts
.dc30	bc30					Export_KNLInkey:
.dc30	bc30					CheckKeyPressed:
.dc30	bc30	a9 4a		lda #$4a			lda     #<event 					; tell kernel where events go.
.dc32	bc32	85 f0		sta $f0				sta     kernel.args.events+0
.dc34	bc34	a9 08		lda #$08			lda     #>event
.dc36	bc36	85 f1		sta $f1				sta     kernel.args.events+1
.dc38	bc38	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc3b	bc3b	b0 0b		bcs $bc48			bcs 	_CKPNoEvent 				; no event
.dc3d	bc3d	ad 4a 08	lda $084a			lda     event.type
.dc40	bc40	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc42	bc42	d0 04		bne $bc48			bne 	_CKPNoEvent
.dc44	bc44	ad 4f 08	lda $084f			lda     event.key.ascii
.dc47	bc47	60		rts				rts
.dc48	bc48					_CKPNoEvent:
.dc48	bc48	a9 00		lda #$00			lda 	#0
.dc4a	bc4a	60		rts				rts
.dc4b	bc4b					Export_EXTReadController:
.dc4b	bc4b	da		phx				phx
.dc4c	bc4c	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc4e	bc4e	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc50	bc50	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc53	bc53	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc55	bc55	fa		plx				plx
.dc56	bc56	60		rts				rts
.084a						event
>084a						type        .byte   ?   ; Enum above
>084b						buf         .byte   ?   ; page id or zero
>084c						ext         .byte   ?   ; page id or zero
.084d						key
>084d						keyboard    .byte   ?   ; Keyboard ID
>084e						raw         .byte   ?   ; Raw key ID
>084f						ascii       .byte   ?   ; ASCII value
>0850						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.084d						mouse
.084d						delta
>084d						x           .byte   ?
>084e						y           .byte   ?
>084f						z           .byte   ?
>0850						buttons     .byte   ?
.084d						clicks
>084d						inner       .byte   ?
>084e						middle      .byte   ?
>084f						outer       .byte   ?
.084d						udp
>084d						token       .byte   ?   ; TODO: break out into fields
.084d						file
>084d						stream      .byte   ?
>084e						cookie      .byte   ?
.084f						data
>084f						requested   .byte   ?   ; Requested number of bytes to read
>0850						read        .byte   ?   ; Number of bytes actually read
.084f						wrote
>084f						requested   .byte   ?   ; Requested number of bytes to read
>0850						wrote       .byte   ?   ; Number of bytes actually read
.084d						directory
>084d						stream      .byte   ?
>084e						cookie      .byte   ?
.084f						volume
>084f						len         .byte   ?   ; Length of volname (in buf)
>0850						flags       .byte   ?   ; block size, text encoding
.084f						file
>084f						len         .byte   ?
>0850						flags       .byte   ?   ; block scale, text encoding, approx size
.084f						free
>084f						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc57	bc57					Export_KNLOpenFileWrite:
.dc57	bc57	48		pha				pha
.dc58	bc58	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc5a	bc5a	80 03		bra $bc5f			bra 	KNLOpenStart
.dc5c	bc5c					Export_KNLOpenFileRead:
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc5f	bc5f					KNLOpenStart:
.dc5f	bc5f	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc61	bc61	68		pla				pla
.dc62	bc62	20 9d bc	jsr $bc9d			jsr 	KNLSetupFileName
.dc65	bc65	a9 4a		lda #$4a			lda     #event & $FF 				; tell kernel where to store event data
.dc67	bc67	85 f0		sta $f0				sta     kernel.args.events+0
.dc69	bc69	a9 08		lda #$08			lda     #event >> 8
.dc6b	bc6b	85 f1		sta $f1				sta     kernel.args.events+1
.dc6d	bc6d	ad 5f 06	lda $065f			lda 	DefaultDrive 				; currently drive zero only.
.dc70	bc70	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc72	bc72	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc75	bc75	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc77	bc77	b0 1d		bcs $bc96			bcs     _out
.dc79	bc79					_loop
.dc79	bc79	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc7c	bc7c	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc7f	bc7f	b0 f8		bcs $bc79			bcs     _loop
.dc81	bc81	ad 4a 08	lda $084a			lda 	event.type
.dc84	bc84	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc86	bc86	f0 0a		beq $bc92			beq 	_success
.dc88	bc88	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc8a	bc8a	f0 0a		beq $bc96			beq 	_out
.dc8c	bc8c	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc8e	bc8e	f0 06		beq $bc96			beq 	_out
.dc90	bc90	80 e7		bra $bc79			bra     _loop
.dc92	bc92					_success
.dc92	bc92	ad 4d 08	lda $084d			lda     event.file.stream
.dc95	bc95	18		clc				clc
.dc96	bc96					_out
.dc96	bc96	60		rts				rts
.dc97	bc97					Export_KNLCloseFile:
.dc97	bc97	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc99	bc99	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc9c	bc9c	60		rts				rts
.dc9d	bc9d					KNLSetupFileName:
.dc9d	bc9d	5a		phy				phy 								; save Y on stack
.dc9e	bc9e	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dca0	bca0	86 37		stx $37				stx 	zTemp0+1
.dca2	bca2	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dca4	bca4	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dca6	bca6	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dca8	bca8					_KNLGetLength:
.dca8	bca8	c8		iny				iny
.dca9	bca9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dcab	bcab	d0 fb		bne $bca8			bne 	_KNLGetLength
.dcad	bcad	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dcaf	bcaf	7a		ply				ply
.dcb0	bcb0	60		rts				rts
=64						KNLReadBufferLen = 64 								; read buffer size.
.0851						KNLStream:
>0851								.byte   ?
.0852						KNLReadBuffer:
>0852								.fill   KNLReadBufferLen
.0892						KNLNext:
>0892								.byte   ?
.0893						KNLEnd:
>0893								.byte   ?
.dcb1	bcb1					Export_KNLReadByteInit:
.dcb1	bcb1	8d 51 08	sta $0851			sta     KNLStream 					; save stream
.dcb4	bcb4	9c 92 08	stz $0892			stz     KNLNext 					; reset buffer
.dcb7	bcb7	9c 93 08	stz $0893			stz     KNLEnd
.dcba	bcba	60		rts				rts
.dcbb	bcbb					Export_KNLReadByte:
.dcbb	bcbb	da		phx				phx
.dcbc	bcbc	ae 92 08	ldx $0892			ldx     KNLNext 					; all data consumed ?
.dcbf	bcbf	ec 93 08	cpx $0893			cpx     KNLEnd
.dcc2	bcc2	d0 10		bne $bcd4			bne     _KNLRBGetNextByte
.dcc4	bcc4	ad 51 08	lda $0851			lda     KNLStream
.dcc7	bcc7	20 dd bc	jsr $bcdd			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dcca	bcca	b0 0f		bcs $bcdb			bcs     _KNLRBError 				; error has occurred on read.
.dccc	bccc	8d 93 08	sta $0893			sta     KNLEnd 						; # read is the number available
.dccf	bccf	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcd1	bcd1	8e 92 08	stx $0892			stx     KNLNext
.dcd4	bcd4					_KNLRBGetNextByte:
.dcd4	bcd4	bd 52 08	lda $0852,x			lda     KNLReadBuffer,x 			; get the next data item
.dcd7	bcd7	ee 92 08	inc $0892			inc     KNLNext 					; and advance the index
.dcda	bcda	18		clc				clc 								; succeeded
.dcdb	bcdb					_KNLRBError:
.dcdb	bcdb	fa		plx				plx
.dcdc	bcdc	60		rts				rts
.dcdd	bcdd					Export_KNLReadBlock:
.dcdd	bcdd					KNLRBGetNextBlock:
.dcdd	bcdd	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcdf	bcdf	a9 40		lda #$40			lda     #KNLReadBufferLen 			; set bytes to read.
.dce1	bce1	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dce3	bce3	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dce6	bce6	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dce8	bce8	b0 2e		bcs $bd18			bcs     _KGNBExitFail               ; report as general error
.dcea	bcea					_KGRBEventLoop:
.dcea	bcea	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dced	bced	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcf0	bcf0	b0 f8		bcs $bcea			bcs     _KGRBEventLoop
.dcf2	bcf2	ad 4a 08	lda $084a			lda 	event.type 					; get event
.dcf5	bcf5	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcf7	bcf7	f0 0a		beq $bd03			beq     _KNLRBGetNextByte
.dcf9	bcf9	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcfb	bcfb	f0 1b		beq $bd18			beq 	_KGNBExitFail
.dcfd	bcfd	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcff	bcff	f0 17		beq $bd18			beq 	_KGNBExitFail
.dd01	bd01	80 e7		bra $bcea			bra 	_KGRBEventLoop
.dd03	bd03					_KNLRBGetNextByte:
.dd03	bd03	a9 52		lda #$52			lda     #<KNLReadBuffer 					; Set the target buffer
.dd05	bd05	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd07	bd07	a9 08		lda #$08			lda     #>KNLReadBuffer
.dd09	bd09	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd0b	bd0b	ad 50 08	lda $0850			lda     event.file.data.read 		; Set the target length
.dd0e	bd0e	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd10	bd10	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd13	bd13	ad 50 08	lda $0850			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd16	bd16	18		clc				clc
.dd17	bd17	60		rts				rts
.dd18	bd18					_KGNBExitFail:
.dd18	bd18	38		sec				sec
.dd19	bd19	60		rts				rts
.dd1a	bd1a					Export_KNLWriteBlock:
.dd1a	bd1a	da		phx				phx
.dd1b	bd1b	5a		phy				phy
.dd1c	bd1c	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd1e	bd1e	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd20	bd20	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd22	bd22	a5 37		lda $37				lda     zTemp0+1
.dd24	bd24	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd26	bd26	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd28	bd28	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd2b	bd2b	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd2d	bd2d	b0 21		bcs $bd50			bcs 	_KWBFailed
.dd2f	bd2f					_KNLWLoop:
.dd2f	bd2f	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd32	bd32	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd35	bd35	b0 f8		bcs $bd2f			bcs     _KNLWLoop
.dd37	bd37	ad 4a 08	lda $084a			lda     event.type 					; various errors.
.dd3a	bd3a	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd3c	bd3c	f0 12		beq $bd50			beq 	_KWBFailed
.dd3e	bd3e	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd40	bd40	f0 0e		beq $bd50			beq 	_KWBFailed
.dd42	bd42	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd44	bd44	f0 0a		beq $bd50			beq 	_KWBFailed
.dd46	bd46	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd48	bd48	d0 e5		bne $bd2f			bne 	_KNLWLoop
.dd4a	bd4a	18		clc				clc
.dd4b	bd4b	ad 50 08	lda $0850			lda    event.file.wrote.wrote 		; get bytes written.
.dd4e	bd4e	80 01		bra $bd51			bra 	_KWBExit
.dd50	bd50					_KWBFailed:
.dd50	bd50	38		sec				sec
.dd51	bd51					_KWBExit:
.dd51	bd51	7a		ply				ply
.dd52	bd52	fa		plx				plx
.dd53	bd53	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
