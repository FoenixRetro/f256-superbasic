
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct 11 07:44:47 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 b6 94	jsr $94b6			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 2f 87	jsr $872f			jsr 	RunDemos
.8013	20 98 8e	jsr $8e98			jsr 	NewCommand 					; erase current program
.8016	20 3b a1	jsr $a13b			jsr 	BackloadProgram
.8019	4c f4 89	jmp $89f4			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1322."
>8064	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>8074	32 2e 20 42 75 69 6c 64 20 31 33 32 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24					GXSpritePage = 24
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gzTemp0+1
.808d	80 2c		bra $80bb			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8097	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a1	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 29 06	sta $0629			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80af	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80b1					_GDCopy2:
.80b1	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80b4	9d 31 06	sta $0631,x			sta 	gxX0,x
.80b7	ca		dex				dex
.80b8	10 f7		bpl $80b1			bpl 	_GDCopy2
.80ba	68		pla				pla 								; get command back
.80bb					_GDExecuteA:
.80bb	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80bd	aa		tax				tax
.80be	7c c3 80	jmp ($80c3,x)			jmp 	(GRVectorTable,x)
.80c1					GXMove:
.80c1	60		rts				rts
.80c2					GRUndefined:
>80c2	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

.80c3					GRVectorTable:
>80c3	c2 80					.word	GRUndefined              ; $00
>80c5	c2 80					.word	GRUndefined              ; $01
>80c7	48 82					.word	GXClearBitmap            ; $02 Clear
>80c9	bc 83					.word	GXSetColourMode          ; $03 Colour
>80cb	6e 85					.word	GXFontHandler            ; $04 DrawFont
>80cd	b6 85					.word	GXSpriteHandler          ; $05 DrawSprite
>80cf	c2 80					.word	GRUndefined              ; $06
>80d1	c2 80					.word	GRUndefined              ; $07
>80d3	c2 80					.word	GRUndefined              ; $08
>80d5	c2 80					.word	GRUndefined              ; $09
>80d7	c2 80					.word	GRUndefined              ; $0a
>80d9	c2 80					.word	GRUndefined              ; $0b
>80db	c2 80					.word	GRUndefined              ; $0c
>80dd	c2 80					.word	GRUndefined              ; $0d
>80df	c2 80					.word	GRUndefined              ; $0e
>80e1	c2 80					.word	GRUndefined              ; $0f
>80e3	c1 80					.word	GXMove                   ; $10 Move
>80e5	92 82					.word	GXLine                   ; $11 Line
>80e7	03 84					.word	GXFrameRectangle         ; $12 FrameRect
>80e9	00 84					.word	GXFillRectangle          ; $13 FillRect
>80eb	07 81					.word	GXFrameCircle            ; $14 FrameCircle
>80ed	03 81					.word	GXFillCircle             ; $15 FillCircle
>80ef	c2 80					.word	GRUndefined              ; $16
>80f1	c2 80					.word	GRUndefined              ; $17
>80f3	e9 83					.word	GXPlotPoint              ; $18 Plot
>80f5	c2 80					.word	GRUndefined              ; $19
>80f7	c2 80					.word	GRUndefined              ; $1a
>80f9	c2 80					.word	GRUndefined              ; $1b
>80fb	c2 80					.word	GRUndefined              ; $1c
>80fd	c2 80					.word	GRUndefined              ; $1d
>80ff	c2 80					.word	GRUndefined              ; $1e
>8101	c2 80					.word	GRUndefined              ; $1f

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8103					GXFillCircle:
.8103	a9 ff		lda #$ff			lda 	#255
.8105	80 02		bra $8109			bra 	GXCircle
.8107					GXFrameCircle:
.8107	a9 00		lda #$00			lda 	#0
.8109					GXCircle:
.8109	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.810c	20 ee 86	jsr $86ee			jsr 	GXSortXY 					; topleft/bottomright
.810f	20 23 86	jsr $8623			jsr 	GXOpenBitmap 				; start drawing
.8112	20 01 82	jsr $8201			jsr 	GXCircleSetup 				; set up for drawing
.8115	9c 46 06	stz $0646			stz 	gYChanged
.8118					_GXCircleDraw:
.8118	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.811b	cd 44 06	cmp $0644			cmp 	gY
.811e	90 09		bcc $8129			bcc 	_GXCircleContinue
.8120	d0 03		bne $8125			bne 	_GXNoLast
.8122	20 34 81	jsr $8134			jsr 	GXPlot1
.8125					_GXNoLast:
.8125	20 34 86	jsr $8634			jsr 	GXCloseBitmap 				; close the bitmap
.8128	60		rts				rts
.8129					_GXCircleContinue:
.8129	20 31 81	jsr $8131			jsr 	GXPlot2 					; draw it
.812c	20 ae 81	jsr $81ae			jsr 	GXCircleMove 				; adjust the coordinates
.812f	80 e7		bra $8118			bra 	_GXCircleDraw
.8131					GXPlot2:
.8131	20 34 81	jsr $8134			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8134					GXPlot1:
.8134	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.8137	f0 03		beq $813c			beq 	_GXPlot1Only
.8139	20 58 81	jsr $8158			jsr 	GXPlot0 						; plot and negate
.813c					_GXPlot1Only:
.813c	20 58 81	jsr $8158			jsr 	GXPlot0 						; twice, undoing negation
.813f	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.8142	ae 44 06	ldx $0644			ldx	 	gY
.8145	8d 44 06	sta $0644			sta 	gY
.8148	8e 43 06	stx $0643			stx 	gX
.814b	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.814e	a9 ff		lda #$ff			lda 	#$FF
.8150	8d 46 06	sta $0646			sta 	gYChanged
.8153	60		rts				rts
.8154	20 58 81	jsr $8158			jsr 	GXPlot0 						; do once
.8157	60		rts				rts
.8158	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.815b	f0 05		beq $8162			beq 	_GXPlot0Always
.815d	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.8160	f0 2d		beq $818f			beq 	GXPlot0Exit
.8162					_GXPlot0Always:
.8162	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8164	ad 44 06	lda $0644			lda 	gY
.8167	20 90 81	jsr $8190			jsr 	GXSubCopy
.816a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.816c	ad 43 06	lda $0643			lda 	gX
.816f	20 90 81	jsr $8190			jsr 	GXSubCopy
.8172	48		pha				pha 									; save last offset X
.8173	20 41 86	jsr $8641			jsr 	GXPositionCalc 					; calculate position/offset.
.8176	68		pla				pla
.8177	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.8178	85 36		sta $36				sta 	gzTemp0
.817a	64 37		stz $37				stz 	gzTemp0+1
.817c	26 37		rol $37				rol 	gzTemp0+1
.817e	ad 45 06	lda $0645			lda 	gIsFillMode
.8181	69 80		adc #$80			adc 	#128
.8183	20 4b 84	jsr $844b			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8186	38		sec				sec 									; GY = -GY
.8187	a9 00		lda #$00			lda 	#0
.8189	ed 44 06	sbc $0644			sbc 	gY
.818c	8d 44 06	sta $0644			sta 	gY
.818f					GXPlot0Exit:
.818f	60		rts				rts
.8190					GXSubCopy:
.8190	85 36		sta $36				sta 	gzTemp0
.8192	64 37		stz $37				stz 	gzTemp0+1
.8194	29 80		and #$80			and 	#$80
.8196	f0 02		beq $819a			beq 	_GXNoSx
.8198	c6 37		dec $37				dec 	gzTemp0+1
.819a					_GXNoSx:
.819a	38		sec				sec
.819b	bd 35 06	lda $0635,x			lda 	gXX1,x
.819e	e5 36		sbc $36				sbc 	gzTemp0
.81a0	9d 31 06	sta $0631,x			sta 	gXX0,x
.81a3	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81a6	e5 37		sbc $37				sbc 	gzTemp0+1
.81a8	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81ab	a5 36		lda $36				lda 	gzTemp0 						; return A
.81ad	60		rts				rts
.81ae					GXCircleMove:
.81ae	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.81b1	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.81b3	10 0d		bpl $81c2			bpl 	_GXEMPositive
.81b5	ee 43 06	inc $0643			inc 	gX 							; X++
.81b8	ad 43 06	lda $0643			lda 	gX
.81bb	20 e1 81	jsr $81e1			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81be	a9 06		lda #$06			lda 	#6  						; and add 6
.81c0	80 15		bra $81d7			bra 	_GXEMAddD
.81c2					_GXEMPositive:
.81c2	ee 43 06	inc $0643			inc 	gX 							; X++
.81c5	ce 44 06	dec $0644			dec 	gy 							; Y--
.81c8	38		sec				sec 								; calculate X-Y
.81c9	ad 43 06	lda $0643			lda 	gX
.81cc	ed 44 06	sbc $0644			sbc 	gY
.81cf	20 e1 81	jsr $81e1			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d2	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81d4	ce 46 06	dec $0646			dec 	gYChanged
.81d7					_GXEMAddD:
.81d7	18		clc				clc
.81d8	65 38		adc $38				adc 	gzTemp1
.81da	85 38		sta $38				sta 	gzTemp1
.81dc	90 02		bcc $81e0			bcc 	_GXEMNoCarry
.81de	e6 39		inc $39				inc 	gzTemp1+1
.81e0					_GXEMNoCarry:
.81e0	60		rts				rts
.81e1					_GXAdd4TimesToD:
.81e1	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.81e3	29 80		and #$80			and 	#$80
.81e5	f0 02		beq $81e9			beq 	_GXA4Unsigned
.81e7	a9 ff		lda #$ff			lda 	#$FF
.81e9					_GXA4Unsigned:
.81e9	85 37		sta $37				sta 	gzTemp0+1
.81eb	06 36		asl $36				asl 	gzTemp0  					; x 4
.81ed	26 37		rol $37				rol 	gzTemp0+1
.81ef	06 36		asl $36				asl 	gzTemp0
.81f1	26 37		rol $37				rol 	gzTemp0+1
.81f3	18		clc				clc 								; add
.81f4	a5 36		lda $36				lda		gzTemp0
.81f6	65 38		adc $38				adc 	gzTemp1
.81f8	85 38		sta $38				sta 	gzTemp1
.81fa	a5 37		lda $37				lda		gzTemp0+1
.81fc	65 39		adc $39				adc 	gzTemp1+1
.81fe	85 39		sta $39				sta 	gzTemp1+1
.8200	60		rts				rts
.8201					GXCircleSetup:
.8201	38		sec				sec
.8202	ad 37 06	lda $0637			lda 	gxY1
.8205	ed 33 06	sbc $0633			sbc 	gxY0
.8208	4a		lsr a				lsr 	a
.8209	8d 42 06	sta $0642			sta 	gRadius
.820c	a2 00		ldx #$00			ldx 	#0
.820e	20 30 82	jsr $8230			jsr 	_GXCalculateCentre
.8211	a2 02		ldx #$02			ldx 	#2
.8213	20 30 82	jsr $8230			jsr 	_GXCalculateCentre
.8216	9c 43 06	stz $0643			stz 	gX
.8219	ad 42 06	lda $0642			lda 	gRadius
.821c	8d 44 06	sta $0644			sta 	gY
.821f	0a		asl a				asl 	a 							; R x 2
.8220	85 36		sta $36				sta 	gzTemp0
.8222	38		sec				sec
.8223	a9 03		lda #$03			lda 	#3
.8225	e5 36		sbc $36				sbc 	gzTemp0
.8227	85 38		sta $38				sta 	gzTemp1
.8229	a9 00		lda #$00			lda 	#0
.822b	e9 00		sbc #$00			sbc 	#0
.822d	85 39		sta $39				sta 	gzTemp1+1
.822f	60		rts				rts
.8230					_GXCalculateCentre:
.8230	38		sec				sec
.8231	bd 35 06	lda $0635,x			lda 	gxX1,x
.8234	7d 31 06	adc $0631,x			adc 	gXX0,x
.8237	9d 35 06	sta $0635,x			sta 	gXX1,x
.823a	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.823d	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8240	4a		lsr a				lsr 	a
.8241	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.8244	7e 35 06	ror $0635,x			ror 	gXX1,x
.8247	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8248					GXClearBitmap:
.8248	48		pha				pha
.8249	5a		phy				phy
.824a	20 23 86	jsr $8623			jsr 	GXOpenBitmap 				; start access
.824d	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.824f	ad 3a 06	lda $063a			lda 	gxHeight
.8252	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8254	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8256					_GXCalcLastPage:
.8256	98		tya				tya 								; add to base page
.8257	18		clc				clc
.8258	6d 39 06	adc $0639			adc 	gxBasePage
.825b	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.825d					_GXClearAll:
.825d	20 6f 82	jsr $826f			jsr 	_GXClearBlock 				; clear 8k block
.8260	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.8262	a5 0b		lda $0b				lda 	GFXEditSlot
.8264	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.8267	b0 f4		bcs $825d			bcs 	_GXClearAll
.8269	20 34 86	jsr $8634			jsr 	GXCloseBitmap	 			; stop access
.826c	7a		ply				ply
.826d	68		pla				pla
.826e	60		rts				rts
.826f					_GXClearBlock:
.826f	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8271	85 38		sta $38				sta 	0+gzTemp1
.8273	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8275	85 39		sta $39				sta 	1+gzTemp1
.8277					_GXCB0:
.8277	a5 36		lda $36				lda 	gzTemp0
.8279	a0 00		ldy #$00			ldy 	#0
.827b					_GXCB1:
.827b	91 38		sta ($38),y			sta 	(gzTemp1),y
.827d	c8		iny				iny
.827e	91 38		sta ($38),y			sta 	(gzTemp1),y
.8280	c8		iny				iny
.8281	91 38		sta ($38),y			sta 	(gzTemp1),y
.8283	c8		iny				iny
.8284	91 38		sta ($38),y			sta 	(gzTemp1),y
.8286	c8		iny				iny
.8287	d0 f2		bne $827b			bne 	_GXCB1
.8289	e6 39		inc $39				inc 	gzTemp1+1
.828b	a5 39		lda $39				lda 	gzTemp1+1
.828d	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.828f	d0 e6		bne $8277			bne 	_GXCB0
.8291	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8292					GXLine:
.8292	20 23 86	jsr $8623			jsr 	GXOpenBitmap
.8295	20 0c 87	jsr $870c			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8298	20 5d 83	jsr $835d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.829b	20 41 86	jsr $8641			jsr 	GXPositionCalc 				; calculate position/offset.
.829e					_GXDrawLoop:
.829e	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.82a1	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.82a3	2d 3e 06	and $063e			and 	gxANDValue
.82a6	4d 3d 06	eor $063d			eor 	gxEORValue
.82a9	91 3c		sta ($3c),y			sta 	(gsTemp),y
.82ab	20 b9 82	jsr $82b9			jsr 	GXLineIsComplete 			; is the line complete ?
.82ae	f0 05		beq $82b5			beq 	_GXLExit
.82b0	20 d4 82	jsr $82d4			jsr 	GXLineAdvance 				; code as per advance method
.82b3	80 e9		bra $829e			bra 	_GXDrawLoop
.82b5					_GXLExit:
.82b5	20 34 86	jsr $8634			jsr 	GXCloseBitmap
.82b8	60		rts				rts
.82b9					GXLineIsComplete:
.82b9	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.82bc	d0 0f		bne $82cd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.82be	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.82c1	4d 35 06	eor $0635			eor 	GXX1
.82c4	d0 06		bne $82cc			bne 	_GXLICExit
.82c6	ad 32 06	lda $0632			lda 	GXX0+1
.82c9	4d 36 06	eor $0636			eor 	GXX1+1
.82cc					_GXLICExit:
.82cc	60		rts				rts
.82cd					_GXLICCompareY:
.82cd	ad 37 06	lda $0637			lda 	GXY1
.82d0	4d 33 06	eor $0633			eor 	GXY0
.82d3	60		rts				rts
.82d4					GXLineAdvance:
.82d4	18		clc				clc 								; add adjust to position
.82d5	ad 4b 06	lda $064b			lda 	GXPosition
.82d8	6d 4c 06	adc $064c			adc 	GXAdjust
.82db	8d 4b 06	sta $064b			sta 	GXPosition
.82de	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.82e1	b0 05		bcs $82e8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.82e3	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.82e6	90 0a		bcc $82f2			bcc 	_GXLANoExtra
.82e8					_GXLAOverflow:
.82e8	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.82eb	38		sec				sec 								; subtract total and write back
.82ec	ed 4d 06	sbc $064d			sbc 	GXTotal
.82ef	8d 4b 06	sta $064b			sta 	GXPosition
.82f2					_GXLANoExtra:
.82f2	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.82f5	f0 0d		beq $8304			beq 	_GXDXLarger
.82f7	20 56 83	jsr $8356			jsr 	GXIncrementY
.82fa	ad 4e 06	lda $064e			lda 	GXAddSelect
.82fd	f0 10		beq $830f			beq 	_GXLAExit
.82ff	20 10 83	jsr $8310			jsr 	GXAdjustX
.8302	80 0b		bra $830f			bra 	_GXLAExit
.8304					_GXDXLarger:
.8304	20 10 83	jsr $8310			jsr 	GXAdjustX
.8307	ad 4e 06	lda $064e			lda 	GXAddSelect
.830a	f0 03		beq $830f			beq 	_GXLAExit
.830c	20 56 83	jsr $8356			jsr 	GXIncrementY
.830f					_GXLAExit:
.830f	60		rts				rts
.8310					GXAdjustX:
.8310	ad 4a 06	lda $064a			lda 	GXDXNegative
.8313	10 25		bpl $833a			bpl 	_GXAXRight
.8315	ad 31 06	lda $0631			lda 	GXX0
.8318	d0 03		bne $831d			bne 	_GXAXNoBorrow
.831a	ce 32 06	dec $0632			dec 	GXX0+1
.831d					_GXAXNoBorrow:
.831d	ce 31 06	dec $0631			dec 	GXX0
.8320	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.8323	ad 41 06	lda $0641			lda 	gsOffset
.8326	c9 ff		cmp #$ff			cmp 	#$FF
.8328	d0 0f		bne $8339			bne 	_GXAYExit 					; underflow
.832a	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.832c	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.832e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8330	b0 07		bcs $8339			bcs 	_GXAYExit
.8332	18		clc				clc
.8333	69 20		adc #$20			adc 	#$20 						; fix up
.8335	85 3d		sta $3d				sta 	gsTemp+1
.8337	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.8339					_GXAYExit:
.8339	60		rts				rts
.833a					_GXAXRight:
.833a	ee 31 06	inc $0631			inc 	GXX0
.833d	d0 03		bne $8342			bne 	_GXAXNoCarry
.833f	ee 32 06	inc $0632			inc 	GXX0+1
.8342					_GXAXNoCarry:
.8342	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.8345	d0 0e		bne $8355			bne 	_GXAXExit 					; if not overflowed, exit.
.8347	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.8349	a5 3d		lda $3d				lda 	gsTemp+1
.834b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.834d	90 06		bcc $8355			bcc 	_GXAXExit
.834f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8351	85 3d		sta $3d				sta 	gsTemp+1
.8353	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.8355					_GXAXExit:
.8355	60		rts				rts
.8356					GXIncrementY:
.8356	ee 33 06	inc $0633			inc 	GXY0
.8359	20 97 86	jsr $8697			jsr 	GXMovePositionDown
.835c	60		rts				rts
.835d					GXLineSetup:
.835d	ad 37 06	lda $0637			lda 	GXY1
.8360	38		sec				sec
.8361	ed 33 06	sbc $0633			sbc 	GXY0
.8364	4a		lsr a				lsr 	a
.8365	8d 48 06	sta $0648			sta 	GXDiffY
.8368	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.836b	38		sec				sec
.836c	ad 35 06	lda $0635			lda 	GXX1
.836f	ed 31 06	sbc $0631			sbc 	GXX0
.8372	8d 47 06	sta $0647			sta 	GXDiffX
.8375	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8378	ed 32 06	sbc $0632			sbc 	GXX0+1
.837b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.837c	6e 47 06	ror $0647			ror 	GXDiffX
.837f	0a		asl a				asl 	a
.8380	10 0c		bpl $838e			bpl 	_GDXNotNegative
.8382	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8384	38		sec				sec
.8385	ed 47 06	sbc $0647			sbc 	GXDiffX
.8388	8d 47 06	sta $0647			sta 	GXDiffX
.838b	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.838e					_GDXNotNegative:
.838e	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8391	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8394	8d 4c 06	sta $064c			sta 	GXAdjust
.8397	ad 47 06	lda $0647			lda 	GXDiffX
.839a	8d 4d 06	sta $064d			sta 	GXTotal
.839d	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.83a0	cd 47 06	cmp $0647			cmp 	GXDiffX
.83a3	90 0f		bcc $83b4			bcc 	_GDXNotLarger
.83a5	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.83a8	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.83ab	8d 4c 06	sta $064c			sta 	GXAdjust
.83ae	ad 48 06	lda $0648			lda 	GXDiffY
.83b1	8d 4d 06	sta $064d			sta 	GXTotal
.83b4					_GDXNotLarger:
.83b4	ad 4d 06	lda $064d			lda 	GXTotal
.83b7	4a		lsr a				lsr 	a
.83b8	8d 4b 06	sta $064b			sta 	GXPosition
.83bb	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.83bc					GXSetColourMode:
.83bc	a6 36		ldx $36				ldx 	gzTemp0
.83be	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.83c1	a5 37		lda $37				lda 	gzTemp0+1 								;
.83c3	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.83c6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.83c8	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.83cb	ae 3c 06	ldx $063c			ldx 	gxColour
.83ce	8e 3d 06	stx $063d			stx 	gxEORValue
.83d1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.83d3	90 03		bcc $83d8			bcc 	_GXSDCNotAndColour
.83d5	8e 3e 06	stx $063e			stx 	gxANDValue
.83d8					_GXSDCNotAndColour:
.83d8	d0 03		bne $83dd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.83da	9c 3d 06	stz $063d			stz 	gxEORValue
.83dd					_GXSDCNotAnd:
.83dd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.83de	90 08		bcc $83e8			bcc 	_GXSDCNoFlip
.83e0	ad 3e 06	lda $063e			lda	 	gxANDValue
.83e3	49 ff		eor #$ff			eor 	#$FF
.83e5	8d 3e 06	sta $063e			sta 	gxANDValue
.83e8					_GXSDCNoFlip:
.83e8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.83e9					GXPlotPoint:
.83e9	20 23 86	jsr $8623			jsr 	GXOpenBitmap 				; start drawing
.83ec	20 41 86	jsr $8641			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.83ef	ac 41 06	ldy $0641			ldy 	gsOffset
.83f2	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.83f4	2d 3e 06	and $063e			and 	gxANDValue
.83f7	4d 3d 06	eor $063d			eor 	gxEORValue
.83fa	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83fc	20 34 86	jsr $8634			jsr 	GXCloseBitmap 				; stop drawing and exit
.83ff	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.8400					GXFillRectangle:
.8400	38		sec				sec
.8401	80 01		bra $8404			bra 	GXRectangle
.8403					GXFrameRectangle:
.8403	18		clc				clc
.8404					GXRectangle:
.8404	08		php				php 								; save Fill flag (CS)
.8405	20 23 86	jsr $8623			jsr 	GXOpenBitmap 				; start drawing
.8408	20 ee 86	jsr $86ee			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.840b	20 41 86	jsr $8641			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.840e	38		sec				sec 								; sec = Draw line
.840f	20 38 84	jsr $8438			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8412	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8415	cd 37 06	cmp $0637			cmp 	gxY1
.8418	f0 19		beq $8433			beq 	_GXRectangleExit
.841a					_GXRectLoop:
.841a	20 97 86	jsr $8697			jsr 	GXMovePositionDown 			; down one.
.841d	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.8420	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8423	cd 37 06	cmp $0637			cmp 	gXY1
.8426	f0 07		beq $842f			beq 	_GXLastLine
.8428	28		plp				plp 								; get flag back
.8429	08		php				php
.842a	20 38 84	jsr $8438			jsr 	GXDrawLineX1X0 				; draw horizontal line
.842d	80 eb		bra $841a			bra 	_GXRectLoop
.842f					_GXLastLine:
.842f	38		sec				sec
.8430	20 38 84	jsr $8438			jsr 	GXDrawLineX1X0
.8433					_GXRectangleExit:
.8433	68		pla				pla 								; throw fill flag.
.8434	20 34 86	jsr $8634			jsr 	GXCloseBitmap 				; stop drawing and exit
.8437	60		rts				rts
.8438					GXDrawLineX1X0:
.8438	08		php				php 								; save solid/either-end
.8439	38		sec				sec
.843a	ad 35 06	lda $0635			lda		gXX1
.843d	ed 31 06	sbc $0631			sbc 	gXX0
.8440	85 36		sta $36				sta 	gzTemp0
.8442	ad 36 06	lda $0636			lda 	gXX1+1
.8445	ed 32 06	sbc $0632			sbc 	gXX0+1
.8448	85 37		sta $37				sta 	gzTemp0+1
.844a	28		plp				plp
.844b					GXDrawLineTemp0:
.844b	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.844d	48		pha				pha
.844e	a5 3d		lda $3d				lda 	gsTemp+1
.8450	48		pha				pha
.8451	ad 41 06	lda $0641			lda 	gsOffset
.8454	48		pha				pha
.8455	a5 0b		lda $0b				lda 	GFXEditSlot
.8457	48		pha				pha
.8458	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.845b	90 1e		bcc $847b			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.845d					_GXDLTLine:
.845d	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.845f	2d 3e 06	and $063e			and 	gxANDValue
.8462	4d 3d 06	eor $063d			eor 	gxEORValue
.8465	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8467	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.8469	d0 04		bne $846f			bne 	_GXDLTNoBorrow
.846b	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.846d	30 2e		bmi $849d			bmi 	_GXDLTExit
.846f					_GXDLTNoBorrow:
.846f	c6 36		dec $36				dec 	gzTemp0
.8471	c8		iny				iny 								; next slot.
.8472	d0 e9		bne $845d			bne 	_GXDLTLine
.8474	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.8476	20 ab 84	jsr $84ab			jsr 	GXDLTCheckWrap				; check for new page.
.8479	80 e2		bra $845d			bra 	_GXDLTLine
.847b					_GXDLTEndPoints:
.847b	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.847d	2d 3e 06	and $063e			and 	gxANDValue
.8480	4d 3d 06	eor $063d			eor 	gxEORValue
.8483	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8485	98		tya				tya 								; advance to right side
.8486	18		clc				clc
.8487	65 36		adc $36				adc 	gzTemp0
.8489	a8		tay				tay
.848a	a5 3d		lda $3d				lda 	gsTemp+1
.848c	65 37		adc $37				adc 	gzTemp0+1
.848e	85 3d		sta $3d				sta 	gsTemp+1
.8490	20 ab 84	jsr $84ab			jsr 	GXDLTCheckWrap 			; fix up.
.8493	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.8495	2d 3e 06	and $063e			and 	gxANDValue
.8498	4d 3d 06	eor $063d			eor 	gxEORValue
.849b	91 3c		sta ($3c),y			sta 	(gsTemp),y
.849d					_GXDLTExit:
.849d	68		pla				pla
.849e	85 0b		sta $0b				sta 	GFXEditSlot
.84a0	68		pla				pla
.84a1	8d 41 06	sta $0641			sta 	gsOffset
.84a4	68		pla				pla
.84a5	85 3d		sta $3d				sta 	gsTemp+1
.84a7	68		pla				pla
.84a8	85 3c		sta $3c				sta 	gsTemp
.84aa	60		rts				rts
.84ab					GXDLTCheckWrap:
.84ab	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.84ad	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.84af	90 06		bcc $84b7			bcc 	_GXDLTCWExit
.84b1	e9 20		sbc #$20			sbc 	#$20 						; fix up
.84b3	85 3d		sta $3d				sta 	gsTemp+1
.84b5	e6 0b		inc $0b				inc 	GFXEditSlot
.84b7					_GXDLTCWExit:
.84b7	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.84b8					GXDrawGraphicElement:
.84b8	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.84bb	3a		dec a				dec 	a
.84bc	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.84bf	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.84c2	9c 55 06	stz $0655			stz 	gxHFlip
.84c5	2c 56 06	bit $0656			bit 	gxUseMode
.84c8	10 03		bpl $84cd			bpl 	_GXNotVertical
.84ca	8d 54 06	sta $0654			sta 	gxVFlip
.84cd					_GXNotVertical:
.84cd	50 03		bvc $84d2			bvc 	_GXNotHorizontal
.84cf	8d 55 06	sta $0655			sta 	gxHFlip
.84d2					_GXNotHorizontal:
.84d2	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.84d5	48		pha				pha
.84d6	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.84d9	8e 51 06	stx $0651			stx 	gxAcquireVector
.84dc	20 23 86	jsr $8623			jsr 	gxOpenBitmap 				; open the bitmap.
.84df	ad 56 06	lda $0656			lda 	gxUseMode 					; scale bits
.84e2	4a		lsr a				lsr 	a
.84e3	4a		lsr a				lsr 	a
.84e4	4a		lsr a				lsr 	a
.84e5	29 07		and #$07			and		#7
.84e7	1a		inc a				inc 	a
.84e8	8d 53 06	sta $0653			sta 	gxScale
.84eb	64 38		stz $38				stz 	gzTemp1						; start first line
.84ed					_GXGELoop:
.84ed	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.84ef	4d 54 06	eor $0654			eor 	gxVFlip
.84f2	aa		tax				tax 								; get the Xth line.
.84f3	20 30 85	jsr $8530			jsr 	_GXCallAcquire 				; get that data.
.84f6	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.84f9	85 39		sta $39				sta 	gzTemp1+1
.84fb					_GXGELoop2:
.84fb	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.84fe	cd 3a 06	cmp $063a			cmp 	gxHeight
.8501	b0 10		bcs $8513			bcs 	_GXDGEExit
.8503	20 33 85	jsr $8533			jsr 	GXRenderOneLine 			; render line
.8506	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.8508	d0 f1		bne $84fb			bne 	_GXGELoop2
.850a	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.850c	a5 38		lda $38				lda 	gzTemp1
.850e	cd 4f 06	cmp $064f			cmp 	gxSize
.8511	d0 da		bne $84ed			bne 	_GXGELoop
.8513					_GXDGEExit:
.8513	68		pla				pla 								; restore Y for next time
.8514	8d 33 06	sta $0633			sta 	gxY0
.8517	ae 53 06	ldx $0653			ldx 	gxScale 					; get scale (1-8)
.851a					_GXShiftLeft:
.851a	18		clc				clc
.851b	ad 4f 06	lda $064f			lda 	gxSize
.851e	6d 31 06	adc $0631			adc 	gxX0
.8521	8d 31 06	sta $0631			sta 	gxX0
.8524	90 03		bcc $8529			bcc 	_GXSLNoCarry
.8526	ee 32 06	inc $0632			inc 	gxX0+1
.8529					_GXSLNoCarry:
.8529	ca		dex				dex
.852a	d0 ee		bne $851a			bne 	_GXShiftLeft
.852c	20 34 86	jsr $8634			jsr 	GXCloseBitmap
.852f	60		rts				rts
.8530					_GXCallAcquire:
.8530	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.8533					GXRenderOneLine:
.8533	20 41 86	jsr $8641			jsr 	GXPositionCalc 				; calculate position/offset.
.8536	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.8539	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.853b					_GXROLLoop1:
.853b	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.853e	85 3b		sta $3b				sta 	gzTemp2+1
.8540					_GXROLLoop2:
.8540	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.8542	4d 55 06	eor $0655			eor 	gxHFlip
.8545	aa		tax				tax 								; read from the pixel buffer
.8546	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8549	f0 0a		beq $8555			beq 	_GXZeroPixel 				; don't draw if zero.
.854b	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.854d	2d 3e 06	and $063e			and 	gxANDValue
.8550	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8553	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8555					_GXZeroPixel:
.8555	c8		iny				iny 								; advance pointer
.8556	d0 05		bne $855d			bne 	_GXNoShift
.8558	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.855a	20 ab 84	jsr $84ab			jsr 	GXDLTCheckWrap				; check for new page.
.855d					_GXNoShift:
.855d	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.855f	d0 df		bne $8540			bne 	_GXROLLoop2
.8561	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.8563	a5 3a		lda $3a				lda 	gzTemp2
.8565	cd 4f 06	cmp $064f			cmp 	gxSize
.8568	d0 d1		bne $853b			bne 	_GXROLLoop1
.856a	ee 33 06	inc $0633			inc 	gxY0
.856d	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.0655					gxHFlip:
>0655							.fill 	1
.0656					gxUseMode:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.856e					GXFontHandler:
.856e	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.8570	4d 3b 06	eor $063b			eor 	gxMode
.8573	8d 56 06	sta $0656			sta 	gxUseMode
.8576	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.8578	06 36		asl $36				asl	 	gzTemp0 					; x 2
.857a	26 37		rol $37				rol	 	gzTemp0+1
.857c	06 36		asl $36				asl	 	gzTemp0 					; x 4
.857e	26 37		rol $37				rol	 	gzTemp0+1
.8580	06 36		asl $36				asl	 	gzTemp0 					; x 8
.8582	26 37		rol $37				rol	 	gzTemp0+1
.8584	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.8586	09 c0		ora #$c0			ora 	#$C0
.8588	85 37		sta $37				sta 	gzTemp0+1
.858a	a9 08		lda #$08			lda 	#8 							; size 8x8
.858c	a2 94		ldx #$94			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.858e	a0 85		ldy #$85			ldy 	#GXGetGraphicDataFont >> 8
.8590	20 b8 84	jsr $84b8			jsr 	GXDrawGraphicElement
.8593	60		rts				rts
.8594					GXGetGraphicDataFont:
.8594	8a		txa				txa 								; X->Y
.8595	a8		tay				tay
.8596	a6 01		ldx $01				ldx 	1 							; preserve old value
.8598	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.859a	85 01		sta $01				sta 	1
.859c	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.859e	86 01		stx $01				stx 	1 							; put old value back.
.85a0	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.85a2					_GXExpand:
.85a2	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.85a5	0a		asl a				asl 	a 							; shift bit 7 into C
.85a6	90 08		bcc $85b0			bcc 	_GXNoPixel
.85a8	48		pha				pha 								; if set, set pixel buffer to current colour.
.85a9	ad 3c 06	lda $063c			lda 	gxColour
.85ac	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.85af	68		pla				pla
.85b0					_GXNoPixel:
.85b0	e8		inx				inx 								; do the whole byte.
.85b1	e0 08		cpx #$08			cpx 	#8
.85b3	d0 ed		bne $85a2			bne 	_GXExpand
.85b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.85b6					GXSpriteHandler:
.85b6	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.85b8	4d 3b 06	eor $063b			eor 	gxMode
.85bb	8d 56 06	sta $0656			sta 	gxUseMode
.85be	a9 18		lda #$18			lda 	#GXSpritePage
.85c0	8d 57 06	sta $0657			sta 	GXSpriteBasePage
.85c3	a6 36		ldx $36				ldx 	gzTemp0 					; sprite #
.85c5	da		phx				phx
.85c6	20 23 86	jsr $8623			jsr 	GXOpenBitmap 				; can access sprite information
.85c9	68		pla				pla
.85ca	20 b2 86	jsr $86b2			jsr 	GXFindSprite 				; get the sprite address
.85cd	20 34 86	jsr $8634			jsr 	GXCloseBitmap
.85d0	ad 58 06	lda $0658			lda 	GXSSize 					; return size
.85d3	a2 db		ldx #$db			ldx 	#GXSpriteAcquire & $FF
.85d5	a0 85		ldy #$85			ldy 	#GXSpriteAcquire >> 8
.85d7	20 b8 84	jsr $84b8			jsr 	GXDrawGraphicElement
.85da	60		rts				rts
.85db					GXSpriteAcquire:
.85db	ad 57 06	lda $0657			lda 	GXspriteBasePage			; point to base page
.85de	85 0b		sta $0b				sta 	GFXEditSlot
.85e0	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.85e2	a9 00		lda #$00			lda 	#0
.85e4	ae 59 06	ldx $0659			ldx 	GXSSizeRaw
.85e7					_GXTimesRowNumber:
.85e7	18		clc				clc
.85e8	65 36		adc $36				adc 	zTemp0
.85ea	ca		dex				dex
.85eb	10 fa		bpl $85e7			bpl 	_GXTimesRowNumber
.85ed	64 37		stz $37				stz 	gzTemp0+1
.85ef	0a		asl a				asl 	a 							; row x 2,4,6,8
.85f0	26 37		rol $37				rol 	gzTemp0+1
.85f2	0a		asl a				asl 	a 							; row x 4,8,12,16
.85f3	26 37		rol $37				rol 	gzTemp0+1
.85f5	0a		asl a				asl 	a 							; row x 8,16,24,32
.85f6	26 37		rol $37				rol 	gzTemp0+1
.85f8	85 36		sta $36				sta 	gzTemp0
.85fa	18		clc				clc 								; add base address.
.85fb	a5 36		lda $36				lda 	gzTemp0
.85fd	6d 5b 06	adc $065b			adc 	GXSAddress
.8600	85 36		sta $36				sta 	gzTemp0
.8602	a5 37		lda $37				lda 	gzTemp0+1
.8604	6d 5c 06	adc $065c			adc 	GXSAddress+1
.8607					_GXSAFindPage:
.8607	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8609	90 06		bcc $8611			bcc 	_GXSAFoundPage
.860b	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.860d	e6 0b		inc $0b				inc 	GFXEditSlot
.860f	80 f6		bra $8607			bra 	_GXSAFindPage
.8611					_GXSAFoundPage:
.8611	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8613	85 37		sta $37				sta 	gzTemp0+1 					; gzTemp0 now points to the page
.8615	a0 00		ldy #$00			ldy 	#0
.8617					_GXSACopyLoop:
.8617	b1 36		lda ($36),y			lda 	(gzTemp0),y
.8619	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.861c	c8		iny				iny
.861d	cc 58 06	cpy $0658			cpy 	GXSSize
.8620	d0 f5		bne $8617			bne 	_GXSACopyLoop
.8622	60		rts				rts
.0657					GXSpriteBasePage:
>0657							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8623					GXOpenBitmap:
.8623	78		sei				sei 								; no interrupts here
.8624	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8626	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.8629	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.862b	85 00		sta $00				sta 	0
.862d	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.862f	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.8632	58		cli				cli
.8633	60		rts				rts
.8634					GXCloseBitmap:
.8634	78		sei				sei
.8635	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8638	85 0b		sta $0b				sta 	GFXEditSlot
.863a	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.863d	85 00		sta $00				sta 	0
.863f	58		cli				cli
.8640	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8641					GXPositionCalc:
.8641	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.8643	48		pha				pha
.8644	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.8647	85 3c		sta $3c				sta 	gsTemp
.8649	64 3d		stz $3d				stz 	gsTemp+1
.864b	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.864d	26 3d		rol $3d				rol 	gsTemp+1
.864f	06 3c		asl $3c				asl 	gsTemp
.8651	26 3d		rol $3d				rol 	gsTemp+1
.8653	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8654	65 3c		adc $3c				adc 	gsTemp
.8656	85 3c		sta $3c				sta 	gsTemp
.8658	90 02		bcc $865c			bcc 	_GXPCNoCarry
.865a	e6 3d		inc $3d				inc 	gsTemp+1
.865c					_GXPCNoCarry:
.865c	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.865e	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8660	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.8662	85 36		sta $36				sta 	gzTemp0
.8664	64 3d		stz $3d				stz 	gsTemp+1
.8666	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8668					_GXPCMultiply32:
.8668	06 3c		asl $3c				asl 	gsTemp
.866a	26 3d		rol $3d				rol 	gsTemp+1
.866c	3a		dec a				dec 	a
.866d	d0 f9		bne $8668			bne 	_GXPCMultiply32
.866f	18		clc				clc
.8670	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.8673	65 3c		adc $3c				adc 	gsTemp
.8675	8d 41 06	sta $0641			sta 	gsOffset
.8678	ad 32 06	lda $0632			lda 	GXX0+1
.867b	65 3d		adc $3d				adc 	gsTemp+1
.867d	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.867f	90 04		bcc $8685			bcc 	_GXPCNoOverflow
.8681	29 1f		and #$1f			and 	#$1F 						; fix it up
.8683	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8685					_GXPCNoOverflow:
.8685	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8687	85 3d		sta $3d				sta 	gsTemp+1
.8689	64 3c		stz $3c				stz 	gsTemp
.868b	18		clc				clc
.868c	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.868e	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8691	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8693	68		pla				pla
.8694	85 36		sta $36				sta 	gzTemp0
.8696	60		rts				rts
.8697					GXMovePositionDown:
.8697	18		clc				clc 								; add 320 to offset/temp+1
.8698	ad 41 06	lda $0641			lda 	gsOffset
.869b	69 40		adc #$40			adc 	#64
.869d	8d 41 06	sta $0641			sta 	gsOffset
.86a0	a5 3d		lda $3d				lda 	gsTemp+1
.86a2	69 01		adc #$01			adc 	#1
.86a4	85 3d		sta $3d				sta 	gsTemp+1
.86a6	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.86a8	90 07		bcc $86b1			bcc 	_GXMPDExit
.86aa	38		sec				sec  								; next page
.86ab	e9 20		sbc #$20			sbc 	#$20
.86ad	85 3d		sta $3d				sta 	gsTemp+1
.86af	e6 0b		inc $0b				inc 	GFXEditSlot
.86b1					_GXMPDExit:
.86b1	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.86b2					GXFindSprite:
.86b2	aa		tax				tax
.86b3	ad 57 06	lda $0657			lda 	GXSpriteBasePage 			; access the base page of the sprite
.86b6	85 0b		sta $0b				sta 	GFXEditSlot
.86b8	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.86bb	8d 5c 06	sta $065c			sta 	GXSAddress+1
.86be	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.86c1	48		pha				pha 								; save twice
.86c2	48		pha				pha
.86c3	29 03		and #$03			and 	#3 							; get sprite size
.86c5	8d 59 06	sta $0659			sta 	GXSSizeRaw 					; save raw (0-3)
.86c8	aa		tax				tax
.86c9	bd ea 86	lda $86ea,x			lda 	_GXFXSSTTable,x 			; read sprite size
.86cc	8d 58 06	sta $0658			sta 	GXSSize 					; save (8/16/24/32)
.86cf	68		pla				pla 								; get LUT
.86d0	4a		lsr a				lsr		a
.86d1	4a		lsr a				lsr		a
.86d2	29 03		and #$03			and 	#3
.86d4	8d 5a 06	sta $065a			sta 	GXSLUT
.86d7	68		pla				pla 								; address, neeeds to be x 4
.86d8	29 f0		and #$f0			and 	#$F0
.86da	8d 5b 06	sta $065b			sta 	GXSAddress
.86dd	0e 5b 06	asl $065b			asl 	GXSAddress
.86e0	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86e3	0e 5b 06	asl $065b			asl 	GXSAddress
.86e6	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86e9	60		rts				rts
.86ea					_GXFXSSTTable:
>86ea	08 10 18 20					.byte 	8,16,24,32
.0658					GXSSize:
>0658							.fill 	1
.0659					GXSSizeRaw:
>0659							.fill 	1
.065a					GXSLUT:
>065a							.fill 	1
.065b					GXSAddress:
>065b							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.86ee					GXSortXY:
.86ee	20 0c 87	jsr $870c			jsr 	GXSortY 					; will be sorted on Y now
.86f1	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.86f4	cd 35 06	cmp $0635			cmp 	gxX1
.86f7	ad 32 06	lda $0632			lda 	gXX0+1
.86fa	ed 36 06	sbc $0636			sbc 	gXX1+1
.86fd	90 0c		bcc $870b			bcc 	_GXSXYExit 					; X0 < X1 exit
.86ff	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8701	a0 04		ldy #$04			ldy 	#4
.8703	20 20 87	jsr $8720			jsr 	GXSwapXY
.8706	e8		inx				inx
.8707	c8		iny				iny
.8708	20 20 87	jsr $8720			jsr 	GXSwapXY
.870b					_GXSXYExit:
.870b	60		rts				rts
.870c					GXSortY:
.870c	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.870f	cd 37 06	cmp $0637			cmp 	gxY1
.8712	90 0b		bcc $871f			bcc 	_GXSYSorted
.8714	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8716	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8718					_GXSwap1:
.8718	20 20 87	jsr $8720			jsr 	GXSwapXY
.871b	88		dey				dey
.871c	ca		dex				dex
.871d	10 f9		bpl $8718			bpl 	_GXSwap1
.871f					_GXSYSorted:
.871f	60		rts				rts
.8720					GXSwapXY:
.8720	bd 31 06	lda $0631,x			lda 	gxX0,x
.8723	48		pha				pha
.8724	b9 31 06	lda $0631,y			lda 	gxX0,y
.8727	9d 31 06	sta $0631,x			sta 	gxX0,x
.872a	68		pla				pla
.872b	99 31 06	sta $0631,y			sta 	gxX0,y
.872e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.872f					RunDemos:
.872f	64 01		stz $01				stz 	1
.8731	a9 0f		lda #$0f			lda 	#$0F
.8733	8d 00 d0	sta $d000			sta 	$D000
.8736	a9 01		lda #$01			lda 	#1
.8738	8d 00 d1	sta $d100			sta 	$D100
.873b	9c 01 d1	stz $d101			stz 	$D101
.873e	9c 02 d1	stz $d102			stz 	$D102
.8741	a9 01		lda #$01			lda 	#1
.8743	8d 03 d1	sta $d103			sta 	$D103
.8746	a9 08		lda #$08			lda 	#8
.8748	8d 39 06	sta $0639			sta 	gxBasePage
.874b	a9 f0		lda #$f0			lda 	#240
.874d	8d 3a 06	sta $063a			sta 	gxHeight
.8750					loop:
.8750	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.8752	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.8754	a0 00		ldy #$00			ldy 	#(0)
.8756	20 85 80	jsr $8085			jsr 	GraphicDraw
.8759	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.875b	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.875d	a0 00		ldy #$00			ldy 	#(0)
.875f	20 85 80	jsr $8085			jsr 	GraphicDraw
.8762	a9 30		lda #$30			lda 	#((24)*2)+(((100) >> 8) & 1)
.8764	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8766	a0 28		ldy #$28			ldy 	#(40)
.8768	20 85 80	jsr $8085			jsr 	GraphicDraw
.876b	a9 30		lda #$30			lda 	#((24)*2)+(((102) >> 8) & 1)
.876d	a2 66		ldx #$66			ldx 	#((102) & $FF)
.876f	a0 28		ldy #$28			ldy 	#(40)
.8771	20 85 80	jsr $8085			jsr 	GraphicDraw
.8774	20 c6 9d	jsr $9dc6	demo:	jsr 	Random32Bit
.8777	ee 3d 06	inc $063d			inc 	gxEORValue
.877a	a9 30		lda #$30			lda 	#24*2
.877c	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.877f	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8782	20 85 80	jsr $8085			jsr 	GraphicDraw
.8785	80 ed		bra $8774			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8787					AssembleGroup1:
.8787	a9 ff		lda #$ff			lda 	#$FF
.8789	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.878c	80 02		bra $8790			bra 	AsmGroup12
.878e					AssembleGroup2:
.878e	a5 00		lda $00				lda 	$00
.8790					AsmGroup12:
.8790	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8793	68		pla				pla 								; pop the return address to access the information following.
.8794	fa		plx				plx
.8795	20 1e 88	jsr $881e			jsr 	AccessParameters 			; get opcode and save as base
.8798	8d a4 04	sta $04a4			sta 	BaseOpcode
.879b	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.879e	d0 08		bne $87a8			bne 	_AG12HaveMask
.87a0	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.87a2	20 26 88	jsr $8826			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.87a5	8d a5 04	sta $04a5			sta 	ModeMask
.87a8					_AG12HaveMask:
.87a8	20 61 89	jsr $8961			jsr 	TypeAndCalculateOperand 	; get zero page type
.87ab	da		phx				phx 								; save found address mode
.87ac	20 8a 88	jsr $888a			jsr 	AssembleModeX
.87af	fa		plx				plx  								; restore address mode
.87b0	b0 0b		bcs $87bd			bcs 	_AG12Exit
.87b2	20 be 87	jsr $87be			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.87b5	20 8a 88	jsr $888a			jsr 	AssembleModeX
.87b8	b0 03		bcs $87bd			bcs 	_AG12Exit
.87ba	4c 7c ad	jmp $ad7c			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.87bd					_AG12Exit:
.87bd	60		rts				rts
.87be					PromoteToAbsolute:
.87be	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.87c0	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.87c2	f0 19		beq $87dd			beq 	_PTADo
.87c4	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.87c6	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.87c8	f0 13		beq $87dd			beq 	_PTADo
.87ca	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.87cc	e0 80		cpx #$80			cpx 	#AM_ZEROY
.87ce	f0 0d		beq $87dd			beq 	_PTADo
.87d0	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.87d2	e0 d1		cpx #$d1			cpx 	#AM_IND
.87d4	f0 07		beq $87dd			beq 	_PTADo
.87d6	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.87d8	e0 c0		cpx #$c0			cpx 	#AM_INDX
.87da	f0 01		beq $87dd			beq 	_PTADo
.87dc	60		rts				rts
.87dd					_PTADo:
.87dd	aa		tax				tax
.87de	60		rts				rts
.87df					AssembleGroup3:
.87df	68		pla				pla 								; get parameters, which is just the opcode.
.87e0	fa		plx				plx
.87e1	20 1e 88	jsr $881e			jsr 	AccessParameters 			; get and output opcode
.87e4	20 36 88	jsr $8836			jsr 	AssemblerWriteByte
.87e7	20 c5 89	jsr $89c5			jsr 	CalculateOperand 			; get a 16 bit operand
.87ea	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.87ed	38		sec				sec
.87ee	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.87f1	48		pha				pha 								; LSB in A
.87f2	ad 10 04	lda $0410			lda 	NSMantissa1
.87f5	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.87f8	aa		tax				tax 								; MSB in X
.87f9	68		pla				pla
.87fa	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.87fb	69 7f		adc #$7f			adc 	#$7F
.87fd	90 01		bcc $8800			bcc 	_AG3NoCarry
.87ff	e8		inx				inx
.8800					_AG3NoCarry:
.8800	38		sec				sec 								; fix back and write out anyways.
.8801	e9 80		sbc #$80			sbc 	#$80
.8803	20 36 88	jsr $8836			jsr 	AssemblerWriteByte
.8806	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8808	f0 0a		beq $8814			beq 	_AG3Exit
.880a	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.880d	29 01		and #$01			and 	#1
.880f	f0 03		beq $8814			beq 	_AG3Exit
.8811	4c 81 ad	jmp $ad81			jmp 	RangeError 					; no, branch is out of range
.8814					_AG3Exit:
.8814	60		rts				rts
.8815					AssembleGroup4:
.8815	68		pla				pla 								; pop address
.8816	fa		plx				plx
.8817	20 1e 88	jsr $881e			jsr 	AccessParameters 			; access and get first
.881a	20 36 88	jsr $8836			jsr 	AssemblerWriteByte 			; output it.
.881d	60		rts				rts
.881e					AccessParameters:
.881e	8d a1 04	sta $04a1			sta 	ParamStart
.8821	8e a2 04	stx $04a2			stx 	ParamStart+1
.8824	a9 01		lda #$01			lda 	#1
.8826					GetParameter:
.8826	5a		phy				phy
.8827	a8		tay				tay
.8828	ad a1 04	lda $04a1			lda 	ParamStart
.882b	85 36		sta $36				sta 	zTemp0
.882d	ad a2 04	lda $04a2			lda 	ParamStart+1
.8830	85 37		sta $37				sta 	zTemp0+1
.8832	b1 36		lda ($36),y			lda 	(zTemp0),y
.8834	7a		ply				ply
.8835	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8836					AssemblerWriteByte:
.8836	48		pha			pha
.8837	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.883a	29 02		and #$02		and 	#2
.883c	f0 1b		beq $8859		beq 	_AWBNoPrint
.883e	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8841	20 74 88	jsr $8874		jsr 	PrintHex
.8844	ad 9e 04	lda $049e		lda		AssemblerAddress
.8847	20 74 88	jsr $8874		jsr 	PrintHex
.884a	a9 20		lda #$20		lda 	#' '
.884c	20 21 af	jsr $af21		jsr 	EXTPrintCharacter
.884f	68		pla			pla 									; print byte
.8850	48		pha			pha
.8851	20 74 88	jsr $8874		jsr 	PrintHex
.8854	a9 0d		lda #$0d		lda 	#13
.8856	20 21 af	jsr $af21		jsr 	EXTPrintCharacter
.8859					_AWBNoPrint:
.8859	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.885c	85 36		sta $36			sta 	zTemp0
.885e	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8861	f0 0e		beq $8871		beq 	_AWBRange
.8863	85 37		sta $37			sta 	zTemp0+1
.8865	68		pla			pla 									; write byte out
.8866	92 36		sta ($36)		sta 	(zTemp0)
.8868	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.886b	d0 03		bne $8870		bne 	_AWBNoCarry
.886d	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8870					_AWBNoCarry:
.8870	60		rts			rts
.8871					_AWBRange:
.8871	4c 81 ad	jmp $ad81		jmp 	RangeError
.8874					PrintHex:
.8874	48		pha				pha
.8875	4a		lsr a				lsr 	a
.8876	4a		lsr a				lsr 	a
.8877	4a		lsr a				lsr 	a
.8878	4a		lsr a				lsr 	a
.8879	20 7d 88	jsr $887d			jsr 	_PrintNibble
.887c	68		pla				pla
.887d					_PrintNibble:
.887d	29 0f		and #$0f			and 	#15
.887f	c9 0a		cmp #$0a			cmp 	#10
.8881	90 02		bcc $8885			bcc 	_NoShift
.8883	69 06		adc #$06			adc 	#6
.8885					_NoShift:
.8885	69 30		adc #$30			adc 	#48
.8887	4c 21 af	jmp $af21			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.888a					AssembleModeX:
.888a	5a		phy				phy
.888b	ad a3 04	lda $04a3			lda 	IsGroup1
.888e	f0 17		beq $88a7			beq 	_AMXGroup2
.8890	8a		txa				txa 							; is it in group # 1
.8891	29 40		and #$40			and 	#AM_ISG1
.8893	f0 50		beq $88e5			beq 	_AMXFail 				; no, give up.
.8895	8a		txa				txa 							; get back.
.8896	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8898	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.889a	d0 22		bne $88be			bne 	_AMXHaveInfo
.889c	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.889f	c9 81		cmp #$81			cmp 	#$81
.88a1	f0 42		beq $88e5			beq 	_AMXFail
.88a3	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.88a5	80 17		bra $88be			bra 	_AMXHaveInfo 			; odd design decision there.
.88a7					_AMXGroup2:
.88a7	8a		txa				txa 							; is it in group 2 ?
.88a8	29 20		and #$20			and 	#AM_ISG2
.88aa	f0 39		beq $88e5			beq 	_AMXFail 				; no, give up.
.88ac	8a		txa				txa 							; get the offset into Y
.88ad	29 1f		and #$1f			and 	#$1F
.88af	4a		lsr a				lsr 	a 						; make it 0-7.
.88b0	4a		lsr a				lsr  	a
.88b1	a8		tay				tay
.88b2	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.88b5					_AMXCheckOkay:
.88b5	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.88b6	88		dey				dey
.88b7	10 fc		bpl $88b5			bpl 	_AMXCheckOkay
.88b9	90 2a		bcc $88e5			bcc 	_AMXFail 				; not allowed.
.88bb	8a		txa				txa  							; get mask back
.88bc	29 1f		and #$1f			and 	#$1F
.88be					_AMXHaveInfo:
.88be	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.88c0	10 05		bpl $88c7			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.88c2	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.88c5	d0 1e		bne $88e5			bne 	_AMXFail
.88c7					_AMXAnySize:
.88c7	18		clc				clc 							; add offset to the base opcode
.88c8	6d a4 04	adc $04a4			adc 	BaseOpcode
.88cb					_AMXOutputCode:
.88cb	20 36 88	jsr $8836			jsr 	AssemblerWriteByte 		; write the opcode out.
.88ce	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.88d0	f0 10		beq $88e2			beq 	_AMXExit
.88d2	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.88d5	20 36 88	jsr $8836			jsr 	AssemblerWriteByte
.88d8	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.88da	30 06		bmi $88e2			bmi 	_AMXExit
.88dc	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.88df	20 36 88	jsr $8836			jsr 	AssemblerWriteByte
.88e2					_AMXExit:
.88e2	7a		ply				ply
.88e3	38		sec				sec
.88e4	60		rts				rts
.88e5					_AMXFail:
.88e5	a0 00		ldy #$00			ldy 	#0
.88e7					_AMXCheckOddities:
.88e7	8a		txa				txa
.88e8	d9 10 89	cmp $8910,y			cmp 	ExtraOpcode+2,y 		; match address mode
.88eb	d0 16		bne $8903			bne 	_AMXCONext
.88ed	b9 0e 89	lda $890e,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.88f0	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.88f3	d0 0e		bne $8903			bne 	_AMXCONext
.88f5	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.88f7	10 05		bpl $88fe			bpl 	_AMXCONotZero
.88f9	ad 10 04	lda $0410			lda 	NSMantissa1
.88fc	d0 05		bne $8903			bne 	_AMXCONext
.88fe					_AMXCONotZero:
.88fe	b9 0f 89	lda $890f,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8901	80 c8		bra $88cb			bra 	_AMXOutputCode 			; and assemble it
.8903					_AMXCONext:
.8903	c8		iny				iny
.8904	c8		iny				iny
.8905	c8		iny				iny
.8906	b9 0e 89	lda $890e,y			lda 	ExtraOpcode+0,y 		; end of table
.8909	d0 dc		bne $88e7			bne 	_AMXCheckOddities
.890b					_AMXCOFail:
.890b	7a		ply				ply
.890c	18		clc				clc
.890d	60		rts				rts
.890e					ExtraOpcode:
>890e	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8911	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8914	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8917	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>891a	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>891d	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8920	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8923	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8926	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8929	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>892c	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.892d					LabelHere:
.892d	c8		iny				iny 								; skip .
.892e	a2 00		ldx #$00			ldx 	#0 							; get a term
.8930	20 37 9b	jsr $9b37			jsr 	EvaluateTerm 				; get a term
.8933	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8936	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8938	d0 24		bne $895e			bne 	_ALType
.893a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.893d	85 36		sta $36				sta 	zTemp0
.893f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8942	85 37		sta $37				sta 	zTemp0+1
.8944	5a		phy				phy 								; copy address in.
.8945	a0 01		ldy #$01			ldy 	#1
.8947	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.894a	92 36		sta ($36)			sta 	(zTemp0)
.894c	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.894f	91 36		sta ($36),y			sta 	(zTemp0),y
.8951	c8		iny				iny
.8952	a9 00		lda #$00			lda 	#0
.8954	91 36		sta ($36),y			sta 	(zTemp0),y
.8956	c8		iny				iny
.8957	91 36		sta ($36),y			sta 	(zTemp0),y
.8959	c8		iny				iny
.895a	91 36		sta ($36),y			sta 	(zTemp0),y
.895c	7a		ply				ply
.895d	60		rts				rts
.895e					_ALType:
.895e	4c 86 ad	jmp $ad86			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8961					TypeAndCalculateOperand:
.8961	b1 30		lda ($30),y			lda 	(codePtr),y
.8963	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8965	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8967	f0 5b		beq $89c4			beq 	_TACOExit
.8969	c9 80		cmp #$80			cmp 	#KWC_EOL
.896b	f0 57		beq $89c4			beq 	_TACOExit
.896d	c8		iny				iny
.896e	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8970	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8972	f0 51		beq $89c5			beq 	CalculateOperand
.8974	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8976	f0 1f		beq $8997			beq 	_TACOIndirect
.8978	88		dey				dey 								; undo get of first character
.8979	20 c5 89	jsr $89c5			jsr 	CalculateOperand 			; get operand
.897c	b1 30		lda ($30),y			lda 	(codePtr),y
.897e	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8980	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8982	d0 40		bne $89c4			bne 	_TACOExit
.8984	c8		iny				iny
.8985	20 0d a7	jsr $a70d			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8988	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.898a	c9 58		cmp #$58			cmp 	#'X'
.898c	f0 36		beq $89c4			beq 	_TACOExit
.898e	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8990	c9 59		cmp #$59			cmp 	#'Y'
.8992	f0 30		beq $89c4			beq 	_TACOExit
.8994					_TACOSyntax:
.8994	4c 7c ad	jmp $ad7c			jmp 	SyntaxError
.8997					_TACOIndirect:
.8997	20 c5 89	jsr $89c5			jsr 	CalculateOperand 			; get the operand
.899a	b1 30		lda ($30),y			lda 	(codePtr),y
.899c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.899e	f0 17		beq $89b7			beq 	_TACOIndX
.89a0	20 96 a7	jsr $a796			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.89a3	b1 30		lda ($30),y			lda 	(codePtr),y
.89a5	a2 d1		ldx #$d1			ldx 	#AM_IND
.89a7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.89a9	d0 19		bne $89c4			bne 	_TACOExit
.89ab	c8		iny				iny
.89ac	20 0d a7	jsr $a70d			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.89af	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.89b1	d0 e1		bne $8994			bne 	_TACOSyntax
.89b3	a2 d0		ldx #$d0			ldx 	#AM_INDY
.89b5	80 0d		bra $89c4			bra 	_TACOExit
.89b7					_TACOIndX:
.89b7	c8		iny				iny
.89b8	20 0d a7	jsr $a70d			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.89bb	c9 58		cmp #$58			cmp 	#'X' 						; check X
.89bd	d0 d5		bne $8994			bne 	_TACOSyntax
.89bf	20 96 a7	jsr $a796			jsr 	CheckRightBracket			; check )
.89c2	a2 c0		ldx #$c0			ldx 	#AM_INDX
.89c4					_TACOExit:
.89c4	60		rts				rts
.89c5					CalculateOperand:
.89c5	48		pha				pha
.89c6	da		phx				phx
.89c7	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.89c9	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger
.89cc	fa		plx				plx
.89cd	68		pla				pla
.89ce	60		rts				rts
.a70d					TACOCheckXY:
.a70d	b1 30		lda ($30),y			lda 	(codePtr),y
.a70f	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a711	c9 40		cmp #$40			cmp 	#$40
.a713	d0 21		bne $a736			bne 	_TCXYFail
.a715	b1 30		lda ($30),y			lda 	(codePtr),y
.a717	18		clc				clc
.a718	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a71a	85 37		sta $37				sta 	zTemp0+1
.a71c	c8		iny				iny
.a71d	b1 30		lda ($30),y			lda 	(codePtr),y
.a71f	c8		iny				iny
.a720	85 36		sta $36				sta 	zTemp0
.a722	5a		phy				phy 								; save position
.a723	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a725	b1 36		lda ($36),y			lda 	(zTemp0),y
.a727	d0 0c		bne $a735			bne 	_TCXYPopFail
.a729	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a72b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a72d	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a72f	f0 08		beq $a739			beq 	_TCXYFound
.a731	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a733	f0 04		beq $a739			beq 	_TCXYFound
.a735					_TCXYPopFail:
.a735	7a		ply				ply
.a736					_TCXYFail:
.a736	a9 00		lda #$00			lda 	#0
.a738	60		rts				rts
.a739					_TCXYFound:
.a739	7a		ply				ply 								; restore position
.a73a	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a73c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.89cf					EditProgramCode:
.89cf	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.89d2	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.89d5	20 74 a0	jsr $a074			jsr 	MemorySearch
.89d8	90 05		bcc $89df			bcc 	_EPCNoDelete 				; reached the end don't delete
.89da	d0 03		bne $89df			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.89dc	20 65 af	jsr $af65			jsr 	MemoryDeleteLine 			; delete the line
.89df					_EPCNoDelete:
.89df	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.89e2	c9 80		cmp #$80			cmp 	#KWC_EOL
.89e4	f0 0d		beq $89f3			beq 	_EPCNoInsert
.89e6	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.89e9	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.89ec	20 74 a0	jsr $a074			jsr 	MemorySearch
.89ef	18		clc				clc 								; insert at this point.
.89f0	20 9c af	jsr $af9c			jsr 	MemoryInsertLine 			; insert the line
.89f3					_EPCNoInsert:
.89f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.89f4					WarmStart:
.89f4	a2 ff		ldx #$ff			ldx 	#$FF
.89f6	9a		txs				txs
.89f7	20 37 af	jsr $af37			jsr 	EXTInputLine 				; get line to lineBuffer
.89fa	20 8e a4	jsr $a48e			jsr 	TokeniseLine 				; tokenise the line
.89fd	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8a00	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8a03	d0 17		bne $8a1c			bne 	_WSEditCode 				; if so,edit code.
.8a05	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8a08	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8a0a	85 30		sta $30				sta 	codePtr
.8a0c	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8a0e	85 31		sta $31				sta 	codePtr+1
.8a10	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8a13	c9 80		cmp #$80			cmp 	#KWC_EOL
.8a15	f0 dd		beq $89f4			beq 	WarmStart
.8a17	20 25 90	jsr $9025			jsr 	RUNCodePointerLine 			; execute that line.
.8a1a	80 d8		bra $89f4			bra 	WarmStart
.8a1c					_WSEditCode:
.8a1c	20 cf 89	jsr $89cf			jsr 	EditProgramCode
.8a1f	20 8d 8a	jsr $8a8d			jsr 	ClearCommand
.8a22	80 d0		bra $89f4			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8a24					AssembleCommand:
.8a24	a2 00		ldx #$00			ldx 	#0
.8a26	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger 		; start address
.8a29	ad 08 04	lda $0408			lda 	NSMantissa0
.8a2c	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8a2f	ad 10 04	lda $0410			lda 	NSMantissa1
.8a32	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8a35	20 9e a7	jsr $a79e			jsr 	CheckComma
.8a38	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger 		; options
.8a3b	ad 08 04	lda $0408			lda 	NSMantissa0
.8a3e	8d a0 04	sta $04a0			sta 	AssemblerControl
.8a41	60		rts				rts
.8a42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8a43					AssertCommand:
.8a43	a2 00		ldx #$00			ldx 	#0
.8a45	20 8c 9f	jsr $9f8c			jsr 	EvaluateInteger 			; the assert test
.8a48	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; exit if result is non zero.
.8a4b	d0 05		bne $8a52			bne 	_ACExit
.8a4d	a9 0a		lda #$0a		lda	#10
.8a4f	4c 5d 94	jmp $945d		jmp	ErrorHandler
.8a52					_ACExit:
.8a52	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8a53					CallCommand:
.8a53	a2 00		ldx #$00			ldx 	#0
.8a55	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger
.8a58					_CCClear
.8a58	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8a59	20 15 a0	jsr $a015			jsr 	NSMSetZero
.8a5c	e0 04		cpx #$04			cpx 	#4
.8a5e	d0 f8		bne $8a58			bne 	_CCClear
.8a60	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8a62					_CCCParam:
.8a62	b1 30		lda ($30),y			lda 	(codePtr),y
.8a64	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a66	d0 09		bne $8a71			bne 	_CCCRun6502
.8a68	c8		iny				iny 								; skip comma
.8a69	e8		inx				inx	 								; next level
.8a6a	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8a6d	e0 03		cpx #$03			cpx 	#3
.8a6f	90 f1		bcc $8a62			bcc 	_CCCParam 					; done all 3 ?
.8a71					_CCCRun6502:
.8a71	5a		phy				phy 								; save position
.8a72	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8a75	85 37		sta $37				sta 	zTemp0+1
.8a77	ad 08 04	lda $0408			lda 	NSMantissa0
.8a7a	85 36		sta $36				sta 	zTemp0
.8a7c	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8a7f	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8a82	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8a85	20 8a 8a	jsr $8a8a			jsr 	_CCCZTemp0 					; call zTemp0
.8a88	7a		ply				ply 								; restore position and exit
.8a89	60		rts				rts
.8a8a					_CCCZTemp0:
.8a8a	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8a8d					ClearCommand:
.8a8d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8a8f	85 36		sta $36				sta 	0+zTemp0
.8a91	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8a93	85 37		sta $37				sta 	1+zTemp0
.8a95					_ClearZeroLoop:
.8a95	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8a97	f0 24		beq $8abd			beq 	_ClearZeroEnd
.8a99	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8a9b	a9 00		lda #$00			lda 	#0
.8a9d					_ClearOneVariable:
.8a9d	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9f	c8		iny				iny
.8aa0	c0 08		cpy #$08			cpy 	#8
.8aa2	d0 f9		bne $8a9d			bne 	_ClearOneVariable
.8aa4	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8aa6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa8	c9 18		cmp #$18			cmp 	#NSTProcedure
.8aaa	d0 04		bne $8ab0			bne 	_ClearNotProcedure
.8aac	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8aae	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab0					_ClearNotProcedure:
.8ab0	18		clc				clc 								; go to the next variable
.8ab1	b2 36		lda ($36)			lda 	(zTemp0)
.8ab3	65 36		adc $36				adc 	zTemp0
.8ab5	85 36		sta $36				sta 	zTemp0
.8ab7	90 dc		bcc $8a95			bcc 	_ClearZeroLoop
.8ab9	e6 37		inc $37				inc 	zTemp0+1
.8abb	80 d8		bra $8a95			bra 	_ClearZeroLoop
.8abd					_ClearZeroEnd:
.8abd	18		clc				clc
.8abe	a5 36		lda $36				lda 	zTemp0
.8ac0	69 01		adc #$01			adc 	#1
.8ac2	8d 8c 04	sta $048c			sta 	lowMemPtr
.8ac5	a5 37		lda $37				lda 	zTemp0+1
.8ac7	69 00		adc #$00			adc 	#0
.8ac9	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8acc	20 2e a1	jsr $a12e			jsr 	StackReset
.8acf	20 7f b0	jsr $b07f			jsr 	StringSystemInitialise
.8ad2	20 7d 93	jsr $937d			jsr 	ProcedureScan
.8ad5	20 e1 8f	jsr $8fe1			jsr 	Command_Restore
.8ad8	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8adb	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8ade	9c a0 04	stz $04a0			stz 	AssemblerControl
.8ae1	20 24 9d	jsr $9d24			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8ae4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8ae5					Command_Data:
.8ae5	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8ae7	a2 80		ldx #$80			ldx 	#KWC_EOL
.8ae9	20 cf 93	jsr $93cf			jsr 	ScanForward
.8aec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8aed					DimCommand:
.8aed	b1 30		lda ($30),y			lda 	(codePtr),y
.8aef	29 c0		and #$c0			and 	#$C0
.8af1	c9 40		cmp #$40			cmp 	#$40
.8af3	d0 7a		bne $8b6f			bne 	_DCSyntax
.8af5	b1 30		lda ($30),y			lda 	(codePtr),y
.8af7	18		clc				clc
.8af8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8afa	85 3f		sta $3f				sta 	zaTemp+1
.8afc	c8		iny				iny
.8afd	b1 30		lda ($30),y			lda 	(codePtr),y
.8aff	c8		iny				iny
.8b00	85 3e		sta $3e				sta 	zaTemp
.8b02	5a		phy				phy
.8b03	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8b05	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b07	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8b09	c9 18		cmp #$18			cmp 	#NSTProcedure
.8b0b	f0 62		beq $8b6f			beq 	_DCSyntax
.8b0d	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8b0f	29 04		and #$04			and 	#NSBIsArray
.8b11	f0 64		beq $8b77			beq 	_DCType
.8b13	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8b15	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b17	d0 59		bne $8b72			bne 	_DCRedefine
.8b19	7a		ply				ply
.8b1a	20 7a 8b	jsr $8b7a			jsr 	_DCGetSize 				; get array size, check it.
.8b1d	5a		phy				phy
.8b1e	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8b20	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8b22	7a		ply				ply 							; is there a second (e.g. ,x)
.8b23	b1 30		lda ($30),y			lda 	(codePtr),y
.8b25	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b27	d0 0a		bne $8b33			bne 	_DCOneDimension
.8b29	c8		iny				iny 							; skip comma
.8b2a	20 7a 8b	jsr $8b7a			jsr 	_DCGetSize 				; get 2nd array size
.8b2d	5a		phy				phy
.8b2e	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8b30	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b32	7a		ply				ply
.8b33					_DCOneDimension:
.8b33	5a		phy				phy 							; save position
.8b34	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8b36	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b38	aa		tax				tax
.8b39	c8		iny				iny
.8b3a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b3c	e8		inx				inx 							; bump them.
.8b3d	1a		inc a				inc 	a
.8b3e	20 18 ac	jsr $ac18			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8b41	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8b43	29 e0		and #$e0			and 	#$E0
.8b45	d0 23		bne $8b6a			bne 	_DCSize
.8b47	a0 02		ldy #$02			ldy 	#2 						; get base type
.8b49	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b4b	20 88 8b	jsr $8b88			jsr 	ScaleByBaseType 		; scale by base type
.8b4e	a5 36		lda $36				lda 	zTemp0
.8b50	a6 37		ldx $37				ldx 	zTemp0+1
.8b52	20 e6 9c	jsr $9ce6			jsr 	AllocateXABytes 		; allocate memory
.8b55	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8b57	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b59	c8		iny				iny
.8b5a	8a		txa				txa
.8b5b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b5d	7a		ply				ply 							; get position back
.8b5e	20 96 a7	jsr $a796			jsr 	CheckRightBracket 		; check )
.8b61	b1 30		lda ($30),y			lda 	(codePtr),y
.8b63	c8		iny				iny 							; consume in case
.8b64	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8b66	f0 85		beq $8aed			beq 	DimCommand
.8b68	88		dey				dey 							; undo consume
.8b69	60		rts				rts
.8b6a					_DCSize:
.8b6a	a9 16		lda #$16		lda	#22
.8b6c	4c 5d 94	jmp $945d		jmp	ErrorHandler
.8b6f					_DCSyntax:
.8b6f	4c 7c ad	jmp $ad7c			jmp 	SyntaxError
.8b72					_DCRedefine:
.8b72	a9 15		lda #$15		lda	#21
.8b74	4c 5d 94	jmp $945d		jmp	ErrorHandler
.8b77					_DCType:
.8b77	4c 86 ad	jmp $ad86			jmp 	TypeError
.8b7a					_DCGetSize:
.8b7a	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8b7c	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger 	; get array dimension
.8b7f	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8b81	f0 e7		beq $8b6a			beq 	_DCSize
.8b83	c9 fe		cmp #$fe			cmp 	#254
.8b85	f0 e3		beq $8b6a			beq 	_DCSize
.8b87	60		rts				rts
.8b88					ScaleByBaseType:
.8b88	29 10		and #$10			and 	#NSBIsString 			; is it string
.8b8a	d0 19		bne $8ba5			bne 	_SBBTString
.8b8c	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8b8e	48		pha				pha
.8b8f	a5 36		lda $36				lda 	zTemp0
.8b91	48		pha				pha
.8b92	06 36		asl $36				asl 	zTemp0 					; x 2
.8b94	26 37		rol $37				rol 	zTemp0+1
.8b96	06 36		asl $36				asl 	zTemp0 					; x 4
.8b98	26 37		rol $37				rol 	zTemp0+1
.8b9a	68		pla				pla 							; add stacked value = x 5
.8b9b	65 36		adc $36				adc 	zTemp0
.8b9d	85 36		sta $36				sta 	zTemp0
.8b9f	68		pla				pla
.8ba0	65 37		adc $37				adc 	zTemp0+1
.8ba2	85 37		sta $37				sta 	zTemp0+1
.8ba4	60		rts				rts
.8ba5					_SBBTString:
.8ba5	06 36		asl $36				asl 	zTemp0
.8ba7	26 37		rol $37				rol 	zTemp0+1
.8ba9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8baa					EndCommand:
.8baa	4c f4 89	jmp $89f4			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8bad					ForCommand:
.8bad	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8baf	20 c9 a0	jsr $a0c9			jsr 	StackOpen
.8bb2	a2 00		ldx #$00			ldx 	#0
.8bb4	20 37 9b	jsr $9b37			jsr 	EvaluateTerm
.8bb7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8bba	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8bbc	d0 49		bne $8c07			bne		_FCError
.8bbe	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8bc0	20 a6 a7	jsr $a7a6			jsr 	CheckNextA
.8bc3	e8		inx				inx
.8bc4	20 8c 9f	jsr $9f8c			jsr 	EvaluateInteger 			; <from> in +1
.8bc7	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc9	c8		iny				iny 								; consume it
.8bca	48		pha				pha 								; save on stack for later
.8bcb	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8bcd	f0 04		beq $8bd3			beq 	_FCNoSyntax
.8bcf	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8bd1	d0 37		bne $8c0a			bne 	_FCSyntaxError
.8bd3					_FCNoSyntax:
.8bd3	e8		inx				inx
.8bd4	20 8c 9f	jsr $9f8c			jsr 	EvaluateInteger
.8bd7	20 0d a1	jsr $a10d			jsr 	STKSaveCodePosition 		; save loop back position
.8bda	68		pla				pla 								; restore DOWNTO or TO
.8bdb	5a		phy				phy 								; save Y on the stack
.8bdc	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8bde	f0 02		beq $8be2			beq 	_FCNotDownTo
.8be0	a9 02		lda #$02			lda 	#2
.8be2					_FCNotDownTo:
.8be2	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8be3	a0 10		ldy #$10			ldy 	#16
.8be5	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8be7	a0 06		ldy #$06			ldy 	#6
.8be9	ad 08 04	lda $0408			lda 	NSMantissa0
.8bec	91 34		sta ($34),y			sta 	(basicStack),y
.8bee	ad 10 04	lda $0410			lda 	NSMantissa1
.8bf1	c8		iny				iny
.8bf2	91 34		sta ($34),y			sta 	(basicStack),y
.8bf4	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8bf6	a2 01		ldx #$01			ldx 	#1
.8bf8	20 0d 8c	jsr $8c0d			jsr 	FCIntegerToStack
.8bfb	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8bfd	a2 02		ldx #$02			ldx 	#2
.8bff	20 0d 8c	jsr $8c0d			jsr 	FCIntegerToStack
.8c02	20 2d 8c	jsr $8c2d			jsr 	CopyIndexToReference
.8c05	7a		ply				ply 								; restore position
.8c06	60		rts				rts
.8c07					_FCError:
.8c07	4c 86 ad	jmp $ad86			jmp 	TypeError
.8c0a					_FCSyntaxError:
.8c0a	4c 7c ad	jmp $ad7c			jmp 	SyntaxError
.8c0d					FCIntegerToStack:
.8c0d	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8c10	10 03		bpl $8c15			bpl	 	_FCNotNegative
.8c12	20 ca 9f	jsr $9fca			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c15					_FCNotNegative:
.8c15	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c18	91 34		sta ($34),y			sta 	(basicStack),y
.8c1a	c8		iny				iny
.8c1b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c1e	91 34		sta ($34),y			sta 	(basicStack),y
.8c20	c8		iny				iny
.8c21	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8c24	91 34		sta ($34),y			sta 	(basicStack),y
.8c26	c8		iny				iny
.8c27	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8c2a	91 34		sta ($34),y			sta 	(basicStack),y
.8c2c	60		rts				rts
.8c2d					CopyIndexToReference:
.8c2d	5a		phy				phy
.8c2e	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c30	38		sec				sec 								; (because we copy from offset 8)
.8c31	b1 34		lda ($34),y			lda 	(basicStack),y
.8c33	e9 08		sbc #$08			sbc 	#8
.8c35	85 36		sta $36				sta 	zTemp0
.8c37	c8		iny				iny
.8c38	b1 34		lda ($34),y			lda 	(basicStack),y
.8c3a	e9 00		sbc #$00			sbc 	#0
.8c3c	85 37		sta $37				sta 	zTemp0+1
.8c3e	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c40	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8c42	b1 34		lda ($34),y			lda 	(basicStack),y
.8c44	0a		asl a				asl 	a 							; into carry
.8c45	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8c47	90 14		bcc $8c5d			bcc 	_CITRNormal
.8c49	38		sec				sec
.8c4a					_CITRNegative:
.8c4a	a9 00		lda #$00			lda 	#0
.8c4c	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c4e	91 36		sta ($36),y			sta 	(zTemp0),y
.8c50	c8		iny				iny
.8c51	ca		dex				dex
.8c52	d0 f6		bne $8c4a			bne 	_CITRNegative
.8c54	88		dey				dey 								; look at MSB of mantissa
.8c55	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8c57	09 80		ora #$80			ora 	#$80
.8c59	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5b	7a		ply				ply
.8c5c	60		rts				rts
.8c5d					_CITRNormal:
.8c5d	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8c5f	91 36		sta ($36),y			sta 	(zTemp0),y
.8c61	c8		iny				iny
.8c62	ca		dex				dex
.8c63	d0 f8		bne $8c5d			bne 	_CITRNormal
.8c65	7a		ply				ply 								; and exit.
.8c66	60		rts				rts
.8c67					NextCommand:
.8c67	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8c69	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8c6b	20 f5 a0	jsr $a0f5			jsr 	StackCheckFrame
.8c6e	5a		phy				phy
.8c6f	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8c71	b1 34		lda ($34),y			lda 	(basicStack),y
.8c73	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8c75	30 02		bmi $8c79			bmi 	_NCStepNeg
.8c77	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8c79					_NCStepNeg:
.8c79	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8c7b	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8c7d	18		clc				clc
.8c7e					_NCBump:
.8c7e	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8c80	91 34		sta ($34),y			sta 	(basicStack),y
.8c82	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8c84	c8		iny				iny 								; next byte
.8c85	ca		dex				dex 								; do four times
.8c86	d0 f6		bne $8c7e			bne 	_NCBump
.8c88	20 2d 8c	jsr $8c2d			jsr		CopyIndexToReference		; copy it to the reference variable.
.8c8b	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8c8d	b1 34		lda ($34),y			lda 	(basicStack),y
.8c8f	0a		asl a				asl 	a 							; sign bit to carry
.8c90	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8c92	85 38		sta $38				sta 	zTemp1
.8c94	90 02		bcc $8c98			bcc 	_NCCompRev 					; use if step is +ve
.8c96	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8c98					_NCCompRev:
.8c98	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8c9a	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8c9c	85 39		sta $39				sta 	zTemp1+1
.8c9e	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8ca0	38		sec				sec
.8ca1					_NCCompare:
.8ca1	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8ca3	b1 34		lda ($34),y			lda 	(basicStack),y
.8ca5	a4 39		ldy $39				ldy 	zTemp1+1
.8ca7	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ca9	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8cab	e6 39		inc $39				inc 	zTemp1+1
.8cad	ca		dex				dex 								; do it 4 times.
.8cae	d0 f1		bne $8ca1			bne 	_NCCompare
.8cb0	50 02		bvc $8cb4			bvc 	_NCNoOverflow 				; convert to signed comparison
.8cb2	49 80		eor #$80			eor 	#$80
.8cb4					_NCNoOverflow:
.8cb4	7a		ply				ply 								; restore Y position
.8cb5	0a		asl a				asl 	a 							; is bit 7 set.
.8cb6	90 04		bcc $8cbc			bcc 	_NCLoopback 				; if no , >= so loop back
.8cb8	20 e7 a0	jsr $a0e7			jsr 	StackClose 					; exit the loop
.8cbb	60		rts				rts
.8cbc					_NCLoopBack:
.8cbc	20 1e a1	jsr $a11e			jsr 	STKLoadCodePosition 		; loop back
.8cbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8cc0					Command_GOSUB:
.8cc0	a2 00		ldx #$00			ldx 	#0
.8cc2	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8cc5	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8cc7	20 c9 a0	jsr $a0c9			jsr 	StackOpen 					; create frame
.8cca	20 0d a1	jsr $a10d			jsr 	STKSaveCodePosition 		; save current position
.8ccd	4c e3 8c	jmp $8ce3			jmp 	GotoStackX
.8cd0					Command_RETURN:
.8cd0	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8cd2	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8cd4	20 f5 a0	jsr $a0f5			jsr 	StackCheckFrame
.8cd7	20 1e a1	jsr $a11e			jsr 	STKLoadCodePosition 		; restore code position
.8cda	20 e7 a0	jsr $a0e7			jsr 	StackClose
.8cdd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8cde					GotoCommand:
.8cde	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8ce0	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger
.8ce3					GotoStackX:
.8ce3	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8ce6	48		pha				pha 								; it is slightly inefficient, just in cases.
.8ce7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8cea	fa		plx				plx
.8ceb	20 74 a0	jsr $a074			jsr 	MemorySearch 				; transfer to line number AX.
.8cee	90 05		bcc $8cf5			bcc 	_GotoError 					; not found, off end.
.8cf0	d0 03		bne $8cf5			bne 	_GotoError 					; not found exactly
.8cf2	4c 1e 90	jmp $901e			jmp 	RunNewLine 					; and go straight to new line code.
.8cf5					_GotoError:
.8cf5	a9 0d		lda #$0d		lda	#13
.8cf7	4c 5d 94	jmp $945d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8cfa					IfCommand:
.8cfa	a2 00		ldx #$00			ldx 	#0 							; If what.
.8cfc	20 69 9f	jsr $9f69			jsr 	EvaluateNumber
.8cff	b1 30		lda ($30),y			lda 	(codePtr),y
.8d01	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8d03	d0 0a		bne $8d0f			bne 	_IFStructured
.8d05	c8		iny				iny 								; consume THEN
.8d06	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; is it zero
.8d09	f0 01		beq $8d0c			beq 	_IfFail 					; if fail, go to next line
.8d0b	60		rts				rts 								; if THEN just continue
.8d0c					_IfFail:
.8d0c	4c 83 90	jmp $9083			jmp 	EOLCommand
.8d0f					_IfStructured:
.8d0f	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; is it zero
.8d12	d0 07		bne $8d1b			bne 	_IfExit 					; if not, then continue normally.
.8d14	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8d16	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8d18	20 cf 93	jsr $93cf			jsr 	ScanForward 				; and run from there/
.8d1b					_IfExit:
.8d1b	60		rts				rts
.8d1c					ElseCode:
.8d1c	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d1e	aa		tax				tax 								; so just go to the structure exit
.8d1f	20 cf 93	jsr $93cf			jsr 	ScanForward
.8d22	60		rts				rts
.8d23					EndIf:
.8d23	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8d24					LetCommand:
.8d24	a2 00		ldx #$00			ldx 	#0
.8d26	b1 30		lda ($30),y			lda 	(codePtr),y
.8d28	c9 10		cmp #$10			cmp 	#KWD_AT
.8d2a	d0 16		bne $8d42			bne 	_LCStandard
.8d2c	c8		iny				iny 								; skip equal
.8d2d	20 37 9b	jsr $9b37			jsr 	EvaluateTerm 				; get a number
.8d30	20 7b 99	jsr $997b			jsr 	Dereference 				; dereference it
.8d33	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8d36	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8d38	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8d3b	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8d3d	d0 10		bne $8d4f			bne 	_LCMain
.8d3f	4c 86 ad	jmp $ad86			jmp 	TypeError 					; was a reference before.
.8d42					_LCStandard:
.8d42	ad 4e 98	lda $984e			lda 	PrecedenceLevel+"*"			; precedence > this
.8d45	20 68 98	jsr $9868			jsr 	EvaluateExpressionAtPrecedence
.8d48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8d4b	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8d4d	f0 0e		beq $8d5d			beq 	_LetGoProc 					; it's a procedure call.
.8d4f					_LCMain:
.8d4f	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8d51	20 a6 a7	jsr $a7a6			jsr 	CheckNextA
.8d54	e8		inx				inx 								; RHS
.8d55	20 60 9f	jsr $9f60			jsr 	EvaluateValue
.8d58	ca		dex				dex
.8d59	20 60 8d	jsr $8d60			jsr 	AssignVariable
.8d5c	60		rts				rts
.8d5d					_LetGoProc:
.8d5d	4c f9 8e	jmp $8ef9			jmp 	CallProcedure
.8d60					AssignVariable:
.8d60	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8d63	48		pha				pha 								; save a copy
.8d64	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8d67	29 10		and #$10			and 	#NSBIsString
.8d69	d0 0b		bne $8d76			bne 	_ASError
.8d6b	68		pla				pla 								; get back
.8d6c	29 10		and #$10			and 	#NSBIsString 				; check type
.8d6e	d0 03		bne $8d73			bne 	_ASString
.8d70	4c a3 98	jmp $98a3			jmp 	AssignNumber
.8d73					_ASString:
.8d73	4c 11 99	jmp $9911			jmp 	AssignString
.8d76					_ASError:
.8d76	4c 86 ad	jmp $ad86			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8d79					Command_List:
.8d79	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8d7c	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8d7f	a9 ff		lda #$ff			lda 	#$FF
.8d81	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8d84	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8d87	b1 30		lda ($30),y			lda 	(codePtr),y
.8d89	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d8b	f0 1e		beq $8dab			beq 	_CLSecond
.8d8d	20 09 8e	jsr $8e09			jsr 	CLIsDigit 					; if not digit, list all
.8d90	b0 24		bcs $8db6			bcs 	_CLStart
.8d92	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8d94	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger
.8d97	b1 30		lda ($30),y			lda 	(codePtr),y
.8d99	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d9b	f0 0e		beq $8dab			beq 	_CLSecond 					; if so go get it
.8d9d	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8da0	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8da3	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8da6	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8da9	80 0b		bra $8db6			bra 	_CLStart
.8dab					_CLSecond:
.8dab	c8		iny				iny 								; consume comma
.8dac	20 09 8e	jsr $8e09			jsr 	CLIsDigit 					; digit found
.8daf	b0 05		bcs $8db6			bcs 	_CLStart 					; if not, continue listing
.8db1	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8db3	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger
.8db6					_CLStart
.8db6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8db8	85 30		sta $30				sta 	codePtr
.8dba	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8dbc	85 31		sta $31				sta 	codePtr+1
.8dbe					_CLLoop:
.8dbe	20 62 af	jsr $af62			jsr 	EXTBreakCheck 				; break check
.8dc1	f0 30		beq $8df3			beq 	_CLExit
.8dc3	b2 30		lda ($30)			lda 	(codePtr)
.8dc5	f0 2c		beq $8df3			beq 	_CLExit
.8dc7	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8dc9	20 f6 8d	jsr $8df6			jsr 	CLCompareLineNo
.8dcc	90 18		bcc $8de6			bcc 	_CLNext
.8dce	a2 07		ldx #$07			ldx 	#7
.8dd0	20 f6 8d	jsr $8df6			jsr 	CLCompareLineNo
.8dd3	f0 02		beq $8dd7			beq 	_CLDoThisOne
.8dd5	b0 0f		bcs $8de6			bcs 	_CLNext
.8dd7					_CLDoThisOne:
.8dd7	20 2b 92	jsr $922b			jsr 	ListConvertLine 			; convert line into token Buffer
.8dda	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8ddc	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8dde	20 b6 94	jsr $94b6			jsr 	PrintStringXA
.8de1	a9 0d		lda #$0d			lda 	#13 						; new line
.8de3	20 21 af	jsr $af21			jsr 	EXTPrintCharacter
.8de6					_CLNext:
.8de6	18		clc				clc
.8de7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8de9	65 30		adc $30				adc 	codePtr
.8deb	85 30		sta $30				sta 	codePtr
.8ded	90 02		bcc $8df1			bcc 	_CREExit
.8def	e6 31		inc $31				inc 	codePtr+1
.8df1					_CREExit:
.8df1	80 cb		bra $8dbe			bra 	_CLLoop
.8df3					_CLExit:
.8df3	4c f4 89	jmp $89f4			jmp 	WarmStart
.8df6					CLCompareLineNo:
.8df6	38		sec				sec
.8df7	a0 01		ldy #$01			ldy 	#1
.8df9	b1 30		lda ($30),y			lda 	(codePtr),y
.8dfb	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8dfe	85 36		sta $36				sta 	zTemp0
.8e00	c8		iny				iny
.8e01	b1 30		lda ($30),y			lda 	(codePtr),y
.8e03	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8e06	05 36		ora $36				ora 	zTemp0
.8e08	60		rts				rts
.8e09					CLIsDigit:
.8e09	b1 30		lda ($30),y			lda 	(codePtr),y
.8e0b	c9 30		cmp #$30			cmp 	#"0"
.8e0d	90 03		bcc $8e12			bcc	 	_CLIDExitFalse
.8e0f	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e11	60		rts				rts
.8e12					_CLIDExitFalse:
.8e12	38		sec				sec
.8e13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8e14					Command_LOCAL:
.8e14	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8e16	20 22 8e	jsr $8e22			jsr 	LocaliseNextTerm 			; convert term to a local.
.8e19	b1 30		lda ($30),y			lda 	(codePtr),y
.8e1b	c8		iny				iny
.8e1c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e1e	f0 f4		beq $8e14			beq 	Command_LOCAL
.8e20	88		dey				dey 								; unpick pre-get
.8e21	60		rts				rts
.8e22					LocaliseNextTerm:
.8e22	20 37 9b	jsr $9b37			jsr 	EvaluateTerm 				; evaluate the term
.8e25	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e28	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8e2a	f0 69		beq $8e95			beq		_LNTError
.8e2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8e2f	85 36		sta $36				sta 	zTemp0
.8e31	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e34	85 37		sta $37				sta  	zTemp0+1
.8e36	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e39	29 10		and #$10			and 	#NSBIsString
.8e3b	d0 22		bne $8e5f			bne 	_LNTPushString
.8e3d	5a		phy				phy
.8e3e	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8e40					_LNTPushNumLoop:
.8e40	b1 36		lda ($36),y			lda		(zTemp0),y
.8e42	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e45	a9 00		lda #$00			lda 	#0
.8e47	91 36		sta ($36),y			sta 	(zTemp0),y
.8e49	c8		iny				iny
.8e4a	c0 05		cpy #$05			cpy 	#5
.8e4c	d0 f2		bne $8e40			bne 	_LNTPushNumLoop
.8e4e	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8e50	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e53	a5 37		lda $37				lda 	zTemp0+1
.8e55	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e58	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e5a	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e5d	7a		ply				ply
.8e5e	60		rts				rts
.8e5f					_LNTPushString:
.8e5f	5a		phy				phy
.8e60	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e62	85 38		sta $38				sta 	zTemp1
.8e64	a0 01		ldy #$01			ldy 	#1
.8e66	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e68	85 39		sta $39				sta 	zTemp1+1
.8e6a	a0 00		ldy #$00			ldy 	#0 							; output string
.8e6c	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8e6e	f0 0a		beq $8e7a			beq 	_LNTStringOut
.8e70					_LNTPushStrLoop:
.8e70	b1 38		lda ($38),y			lda 	(zTemp1),y
.8e72	f0 06		beq $8e7a			beq 	_LNTStringOut
.8e74	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e77	c8		iny				iny
.8e78	80 f6		bra $8e70			bra 	_LNTPushStrLoop
.8e7a					_LNTStringOut:
.8e7a	98		tya				tya									; output length
.8e7b	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e7e	a9 00		lda #$00			lda 	#0 							; clear original string.
.8e80	92 38		sta ($38)			sta 	(zTemp1)
.8e82	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e85	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e88	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e8b	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e8e	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e90	20 a7 a0	jsr $a0a7			jsr 	StackPushByte
.8e93	7a		ply				ply
.8e94	60		rts				rts
.8e95					_LNTError:
.8e95	4c 7c ad	jmp $ad7c			jmp 	SyntaxError
.a73d					LocalPopValue:
.a73d	20 c0 a0	jsr $a0c0			jsr 	StackPopByte
.a740	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a742	d0 17		bne $a75b			bne 	_LPVString
.a744	20 c0 a0	jsr $a0c0			jsr 	StackPopByte 				; address
.a747	85 37		sta $37				sta 	zTemp0+1
.a749	20 c0 a0	jsr $a0c0			jsr 	StackPopByte
.a74c	85 36		sta $36				sta 	zTemp0
.a74e	5a		phy				phy
.a74f	a0 04		ldy #$04			ldy 	#4 							; copy back
.a751					_LPVNumberCopy:
.a751	20 c0 a0	jsr $a0c0			jsr 	StackPopByte
.a754	91 36		sta ($36),y			sta 	(zTemp0),y
.a756	88		dey				dey
.a757	10 f8		bpl $a751			bpl 	_LPVNumberCopy
.a759	7a		ply				ply 								; and complete
.a75a	60		rts				rts
.a75b					_LPVString:
.a75b	20 c0 a0	jsr $a0c0			jsr 	StackPopByte 				; address of record => zTemp0
.a75e	85 37		sta $37				sta 	zTemp0+1
.a760	20 c0 a0	jsr $a0c0			jsr 	StackPopByte
.a763	85 36		sta $36				sta 	zTemp0
.a765	5a		phy				phy
.a766	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a768	85 38		sta $38				sta 	zTemp1
.a76a	a0 01		ldy #$01			ldy 	#1
.a76c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a76e	85 39		sta $39				sta 	zTemp1+1
.a770	20 c0 a0	jsr $a0c0			jsr 	StackPopByte 				; # to get => y
.a773	a8		tay				tay
.a774	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a776	f0 0e		beq $a786			beq 	_LPVStringCopied
.a778	a9 00		lda #$00			lda 	#0 							; NULL on end
.a77a	91 38		sta ($38),y			sta 	(zTemp1),y
.a77c					_LPVStringCopy:
.a77c	88		dey				dey
.a77d	30 07		bmi $a786			bmi 	_LPVStringCopied
.a77f	20 c0 a0	jsr $a0c0			jsr 	StackPopByte
.a782	91 38		sta ($38),y			sta 	(zTemp1),y
.a784	80 f6		bra $a77c			bra 	_LPVStringCopy
.a786					_LPVStringCopied:
.a786	fa		plx				plx
.a787	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e98					NewCommand:
.8e98	20 52 a0	jsr $a052			jsr 	MemoryNew
.8e9b	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e9e	20 8d 8a	jsr $8a8d			jsr 	ClearCommand 				; clear everything.
.8ea1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8ea2					Command_Print:
.8ea2	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ea3					_CPLoop:
.8ea3	08		php				php 								; save last action flag
.8ea4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ea6	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ea8	f0 46		beq $8ef0			beq 	_CPExit
.8eaa	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8eac	f0 42		beq $8ef0			beq 	_CPExit
.8eae	68		pla				pla 								; throw last action flag
.8eaf	b1 30		lda ($30),y			lda 	(codePtr),y
.8eb1	c8		iny				iny
.8eb2	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8eb4	f0 37		beq $8eed			beq 	_CPContinueWithSameLine
.8eb6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8eb8	f0 2e		beq $8ee8			beq 	_CPTab
.8eba	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8ebc	f0 26		beq $8ee4			beq 	_CPNewLine
.8ebe	88		dey				dey 								; undo the get.
.8ebf	a2 00		ldx #$00			ldx 	#0
.8ec1	20 60 9f	jsr $9f60			jsr 	EvaluateValue 				; get a value into slot 0
.8ec4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8ec7	29 10		and #$10			and 	#NSBIsString
.8ec9	f0 0b		beq $8ed6			beq 	_CPNumber
.8ecb	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8ece	ad 08 04	lda $0408			lda 	NSMantissa0
.8ed1	20 b6 94	jsr $94b6			jsr 	PrintStringXA
.8ed4	80 cc		bra $8ea2			bra 	Command_Print 				; loop round clearing carry so NL if end
.8ed6					_CPNumber:
.8ed6	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8ed8	20 36 9e	jsr $9e36			jsr 	ConvertNumberToString 		; convert to string
.8edb	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8edd	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8edf	20 b6 94	jsr $94b6			jsr 	PrintStringXA
.8ee2	80 be		bra $8ea2			bra 	Command_Print 				; loop round clearing carry so NL if end
.8ee4					_CPNewLine:
.8ee4	a9 0d		lda #$0d			lda 	#13
.8ee6	80 02		bra $8eea			bra 	_CPPrintChar
.8ee8					_CPTab:
.8ee8	a9 09		lda #$09			lda 	#9 							; print TAB
.8eea					_CPPrintChar:
.8eea	20 21 af	jsr $af21			jsr 	EXTPrintCharacter
.8eed					_CPContinueWithSameLine:
.8eed	38		sec				sec 								; loop round with carry set, which
.8eee	80 b3		bra $8ea3			bra 	_CPLoop 					; will inhibit final CR
.8ef0					_CPExit:
.8ef0	28		plp				plp 								; get last action flag
.8ef1	b0 05		bcs $8ef8			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8ef3	a9 0d		lda #$0d			lda 	#13 						; print new line
.8ef5	20 21 af	jsr $af21			jsr 	EXTPrintCharacter
.8ef8					_CPExit2:
.8ef8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8ef9					CallProcedure:
.8ef9	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8efb	b1 30		lda ($30),y			lda 	(codePtr),y
.8efd	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8eff	f0 0c		beq $8f0d			beq 	_CPEndParam
.8f01					_CPParamLoop:
.8f01	20 66 98	jsr $9866			jsr 	EvaluateExpression 			; get parameter onto stack
.8f04	e8		inx				inx 								; bump next stack
.8f05	b1 30		lda ($30),y			lda 	(codePtr),y
.8f07	c8		iny				iny
.8f08	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8f0a	f0 f5		beq $8f01			beq 	_CPParamLoop
.8f0c	88		dey				dey 								; unpick.
.8f0d					_CPEndParam:
.8f0d	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8f10	c8		iny				iny									; skip right bracket
.8f11	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8f13	20 c9 a0	jsr $a0c9			jsr 	StackOpen
.8f16	20 0d a1	jsr $a10d			jsr 	STKSaveCodePosition 		; save loop position
.8f19	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8f1c	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8f1e	ad 10 04	lda $0410			lda 	NSMantissa1
.8f21	85 37		sta $37				sta 	zTemp0+1
.8f23	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8f25	b2 36		lda ($36)			lda 	(zTemp0)
.8f27	85 30		sta $30				sta 	safePtr
.8f29	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f2b	85 31		sta $31				sta 	safePtr+1
.8f2d	c8		iny				iny
.8f2e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f30	85 32		sta $32				sta 	safePtr+2
.8f32	c8		iny				iny
.8f33	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f35	85 33		sta $33				sta 	safePtr+3
.8f37	c8		iny				iny 								; get Y offset -> Y
.8f38	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f3a	a8		tay				tay
.8f3b	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8f3d	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8f40	f0 13		beq $8f55			beq 	_ParamExit 					; if so, exit.
.8f42					_ParamExtract:
.8f42	ca		dex				dex 								; put a local term on the level before
.8f43	20 22 8e	jsr $8e22			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8f46	20 60 8d	jsr $8d60			jsr 	AssignVariable 				; assign stacked value to the variable.
.8f49	e8		inx				inx 								; advance to next parameter to do.
.8f4a	e8		inx				inx
.8f4b	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8f4e	f0 05		beq $8f55			beq 	_ParamExit
.8f50	20 9e a7	jsr $a79e			jsr 	CheckComma 					; comma seperating parameters
.8f53	80 ed		bra $8f42			bra 	_ParamExtract
.8f55					_ParamExit:
.8f55	20 96 a7	jsr $a796			jsr 	CheckRightBracket 			; check )
.8f58	60		rts				rts 								; and continue from here
.a788					Command_ENDPROC:
.a788	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a78a	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a78c	20 f5 a0	jsr $a0f5			jsr 	StackCheckFrame
.a78f	20 1e a1	jsr $a11e			jsr 	STKLoadCodePosition 		; restore code position
.a792	20 e7 a0	jsr $a0e7			jsr 	StackClose
.a795	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8f59					Command_Read:
.8f59	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8f5b	20 37 9b	jsr $9b37			jsr 	EvaluateTerm
.8f5e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f61	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8f63	f0 4a		beq $8faf			beq 	_CRSyntax 					; check reference (bit 0)
.8f65	20 f8 8f	jsr $8ff8			jsr 	SwapDataCodePtrs 			; swap code and data
.8f68	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8f6b	d0 20		bne $8f8d			bne 	_CRContinueData
.8f6d					_CRKeepSearching:
.8f6d	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8f6f	aa		tax				tax
.8f70	20 cf 93	jsr $93cf			jsr 	ScanForward
.8f73	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8f75	f0 16		beq $8f8d			beq 	_CRHaveData 				; found it
.8f77	18		clc				clc
.8f78	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f7a	65 30		adc $30				adc 	codePtr
.8f7c	85 30		sta $30				sta 	codePtr
.8f7e	90 02		bcc $8f82			bcc 	_CREExit
.8f80	e6 31		inc $31				inc 	codePtr+1
.8f82					_CREExit:
.8f82	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f84	b2 30		lda ($30)			lda 	(codePtr)
.8f86	d0 e5		bne $8f6d			bne 	_CRKeepSearching
.8f88	a9 0b		lda #$0b		lda	#11
.8f8a	4c 5d 94	jmp $945d		jmp	ErrorHandler
.8f8d					_CRHaveData:
.8f8d					_CRContinueData:
.8f8d	a2 01		ldx #$01			ldx 	#1
.8f8f	20 60 9f	jsr $9f60			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8f92	ca		dex				dex
.8f93	20 60 8d	jsr $8d60			jsr		AssignVariable 				; do the assignment
.8f96	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8f99	b1 30		lda ($30),y			lda 	(codePtr),y
.8f9b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8f9d	d0 04		bne $8fa3			bne 	_CRSwapBack
.8f9f	c8		iny				iny 								; consume comma
.8fa0	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8fa3					_CRSwapBack:
.8fa3	20 f8 8f	jsr $8ff8			jsr 	SwapDataCodePtrs			; swap them back.
.8fa6	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa8	c8		iny				iny
.8fa9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8fab	f0 ac		beq $8f59			beq 	Command_Read 				; if so go round again.
.8fad	88		dey				dey 								; unpick get.
.8fae	60		rts				rts
.8faf					_CRSyntax:
.8faf	4c 7c ad	jmp $ad7c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8fb2					RemCommand:
.8fb2	b1 30		lda ($30),y			lda 	(codePtr),y
.8fb4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8fb6	d0 06		bne $8fbe			bne 	_RMExit
.8fb8	c8		iny				iny
.8fb9	98		tya				tya
.8fba	38		sec				sec
.8fbb	71 30		adc ($30),y			adc 	(codePtr),y
.8fbd	a8		tay				tay
.8fbe					_RMExit:
.8fbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8fbf					Command_REPEAT:
.8fbf	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8fc1	20 c9 a0	jsr $a0c9			jsr 	StackOpen
.8fc4	20 0d a1	jsr $a10d			jsr 	STKSaveCodePosition 		; save loop position
.8fc7	60		rts				rts
.8fc8					Command_UNTIL:
.8fc8	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8fca	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8fcc	20 f5 a0	jsr $a0f5			jsr 	StackCheckFrame
.8fcf	a2 00		ldx #$00			ldx 	#0
.8fd1	20 69 9f	jsr $9f69			jsr 	EvaluateNumber 				; work out the number
.8fd4	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; check if zero
.8fd7	f0 04		beq $8fdd			beq 	_CULoopBack 				; if so keep looping
.8fd9	20 e7 a0	jsr $a0e7			jsr 	StackClose		 			; return
.8fdc	60		rts				rts
.8fdd					_CULoopBack:
.8fdd	20 1e a1	jsr $a11e			jsr 	STKLoadCodePosition 		; loop back
.8fe0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8fe1					Command_Restore:
.8fe1	20 f8 8f	jsr $8ff8			jsr 	SwapDataCodePtrs 			; swap code and data
.8fe4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fe6	85 30		sta $30				sta 	codePtr
.8fe8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fea	85 31		sta $31				sta 	codePtr+1
.8fec	20 f8 8f	jsr $8ff8			jsr 	SwapDataCodePtrs 			; put them back
.8fef	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8ff1	8d 9b 04	sta $049b			sta 	dataPointer+4
.8ff4	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8ff7	60		rts				rts
.8ff8					SwapDataCodePtrs:
.8ff8	da		phx				phx
.8ff9	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8ffb					_SDCPLoop:
.8ffb	b5 30		lda $30,x			lda 	safePtr,x
.8ffd	48		pha				pha
.8ffe	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9001	95 30		sta $30,x			sta 	safePtr,x
.9003	68		pla				pla
.9004	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9007	ca		dex				dex
.9008	10 f1		bpl $8ffb			bpl 	_SDCPLoop
.900a	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.900d	8c 9b 04	sty $049b			sty 	dataPointer+4
.9010	a8		tay				tay
.9011	fa		plx				plx
.9012	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9013					CommandRUN:
.9013	20 8d 8a	jsr $8a8d			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9016	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9018	85 30		sta $30				sta 	codePtr
.901a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.901c	85 31		sta $31				sta 	codePtr+1
.901e					RUNNewLine:
.901e	b2 30		lda ($30)			lda 	(codePtr)
.9020	f0 5e		beq $9080			beq 	CRNoProgram         		; no then END.
.9022	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9024	9a		txs				txs
.9025					RUNCodePointerLine:
.9025	a0 02		ldy #$02			ldy 	#2 							; start of program
.9027					_CRIncMainLoop:
.9027	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.902a	d0 05		bne $9031			bne 	_CRNoBreakCheck
.902c	20 62 af	jsr $af62			jsr 	EXTBreakCheck 				; break check
.902f	f0 4a		beq $907b			beq 	_CRBreak
.9031					_CRNoBreakCheck:
.9031	c8		iny				iny
.9032					_CRMainLoop:
.9032	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9035	b1 30		lda ($30),y			lda 	(codePtr),y
.9037	10 10		bpl $9049			bpl 	_CRNotKeyword
.9039	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.903b	b0 04		bcs $9041			bcs 	_CRIsKeyword
.903d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.903f	b0 34		bcs $9075			bcs		_CRSyntaxError
.9041					_CRIsKeyword:
.9041	c8		iny				iny 								; consume command
.9042	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9043	aa		tax				tax 								; put in X for vector jump
.9044	20 78 90	jsr $9078			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9047	80 e9		bra $9032			bra 	_CRMainLoop 				; and loop round
.9049					_CRNotKeyword:
.9049	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.904b	f0 da		beq $9027			beq 	_CRIncMainLoop
.904d	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.904f	90 05		bcc $9056			bcc 	_CRNotVariable
.9051					_CRGoLet:
.9051	20 24 8d	jsr $8d24			jsr 	LetCommand
.9054	80 dc		bra $9032			bra 	_CRMainLoop
.9056					_CRNotVariable:
.9056	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9058	f0 f7		beq $9051			beq 	_CRGoLet
.905a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.905c	f0 f3		beq $9051			beq 	_CRGoLet
.905e	c9 21		cmp #$21			cmp 	#KWD_PLING
.9060	f0 ef		beq $9051			beq 	_CRGoLet
.9062	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9064	f0 09		beq $906f			beq 	_CRGoRem
.9066	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9068	d0 0b		bne $9075			bne 	_CRSyntaxError
.906a	20 2d 89	jsr $892d			jsr 	LabelHere
.906d	80 c3		bra $9032			bra 	_CRMainLoop
.906f					_CRGoRem:
.906f	c8		iny				iny
.9070	20 b2 8f	jsr $8fb2			jsr 	RemCommand
.9073	80 bd		bra $9032			bra 	_CRMainLoop
.9075					_CRSyntaxError:
.9075	4c 7c ad	jmp $ad7c			jmp 	SyntaxError
.9078					_CRCallVector0:
.9078	7c 24 91	jmp ($9124,x)			jmp 	(VectorSet0,x)
.907b					_CRBreak:
.907b	a9 01		lda #$01		lda	#1
.907d	4c 5d 94	jmp $945d		jmp	ErrorHandler
.9080					CRNoProgram:
.9080	4c aa 8b	jmp $8baa			jmp 	EndCommand
.9083					EOLCommand:
.9083	18		clc				clc
.9084	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9086	65 30		adc $30				adc 	codePtr
.9088	85 30		sta $30				sta 	codePtr
.908a	90 02		bcc $908e			bcc 	_CREExit
.908c	e6 31		inc $31				inc 	codePtr+1
.908e					_CREExit:
.908e	80 8e		bra $901e			bra 	RunNewLine
.9090					Shift1Command:
.9090	b1 30		lda ($30),y			lda 	(codePtr),y
.9092	c8		iny				iny
.9093	0a		asl a				asl 	a
.9094	aa		tax				tax
.9095	7c 86 91	jmp ($9186,x)			jmp 	(VectorSet1,x)
.9098					Shift2Command:
.9098	b1 30		lda ($30),y			lda 	(codePtr),y
.909a	c8		iny				iny
.909b	0a		asl a				asl 	a
.909c	aa		tax				tax
.909d	7c 9e 91	jmp ($919e,x)			jmp 	(VectorSet2,x)
.90a0					Unused1:
.90a0					Unused2:
.90a0					Unused3:
.90a0					Unused4:
.90a0	4c 7c ad	jmp $ad7c			jmp 	SyntaxError
>90a3							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.90a4					VectorSetPunc:
>90a4	07 96					.word	ShiftLeft                        ; $00 <<
>90a6	01 95					.word	BinaryCompareLessEqual           ; $01 <=
>90a8	f7 94					.word	BinaryCompareNotEqual            ; $02 <>
>90aa	7c ad					.word	SyntaxError                      ; $03 !!3
>90ac	7c ad					.word	SyntaxError                      ; $04 ><
>90ae	0b 95					.word	BinaryCompareGreaterEqual        ; $05 >=
>90b0	0a 96					.word	ShiftRight                       ; $06 >>
>90b2	7c ad					.word	SyntaxError                      ; $07 !!7
>90b4	7c ad					.word	SyntaxError                      ; $08 !!8
>90b6	7c ad					.word	SyntaxError                      ; $09 !!9
>90b8	7c ad					.word	SyntaxError                      ; $0a !!10
>90ba	7c ad					.word	SyntaxError                      ; $0b !!11
>90bc	7c ad					.word	SyntaxError                      ; $0c !!12
>90be	7c ad					.word	SyntaxError                      ; $0d !!13
>90c0	7c ad					.word	SyntaxError                      ; $0e !!14
>90c2	7c ad					.word	SyntaxError                      ; $0f !!15
>90c4	7c ad					.word	SyntaxError                      ; $10 @
>90c6	7c ad					.word	SyntaxError                      ; $11 !!17
>90c8	7c ad					.word	SyntaxError                      ; $12 !!18
>90ca	7c ad					.word	SyntaxError                      ; $13 [
>90cc	af a7					.word	IntegerDivide                    ; $14 \
>90ce	7c ad					.word	SyntaxError                      ; $15 ]
>90d0	90 97					.word	EorInteger                       ; $16 ^
>90d2	7c ad					.word	SyntaxError                      ; $17 _
>90d4	7c ad					.word	SyntaxError                      ; $18 `
>90d6	7c ad					.word	SyntaxError                      ; $19 !!25
>90d8	7c ad					.word	SyntaxError                      ; $1a !!26
>90da	7c ad					.word	SyntaxError                      ; $1b {
>90dc	4a 97					.word	OraInteger                       ; $1c |
>90de	7c ad					.word	SyntaxError                      ; $1d }
>90e0	7c ad					.word	SyntaxError                      ; $1e ~
>90e2	7c ad					.word	SyntaxError                      ; $1f [7m<7F>[m
>90e4	7c ad					.word	SyntaxError                      ; $20
>90e6	d6 97					.word	WordIndirect                     ; $21 !
>90e8	7c ad					.word	SyntaxError                      ; $22 "
>90ea	7c ad					.word	SyntaxError                      ; $23 #
>90ec	7c ad					.word	SyntaxError                      ; $24 $
>90ee	fc a7					.word	IntegerModulus                   ; $25 %
>90f0	04 97					.word	AndInteger                       ; $26 &
>90f2	7c ad					.word	SyntaxError                      ; $27 '
>90f4	7c ad					.word	SyntaxError                      ; $28 (
>90f6	7c ad					.word	SyntaxError                      ; $29 )
>90f8	71 a8					.word	MulInteger                       ; $2a *
>90fa	9e 96					.word	AddInteger                       ; $2b +
>90fc	7c ad					.word	SyntaxError                      ; $2c ,
>90fe	d9 96					.word	SubInteger                       ; $2d -
>9100	7c ad					.word	SyntaxError                      ; $2e .
>9102	08 aa					.word	FDivideCommand                   ; $2f /
>9104	7c ad					.word	SyntaxError                      ; $30 0
>9106	7c ad					.word	SyntaxError                      ; $31 1
>9108	7c ad					.word	SyntaxError                      ; $32 2
>910a	7c ad					.word	SyntaxError                      ; $33 3
>910c	7c ad					.word	SyntaxError                      ; $34 4
>910e	7c ad					.word	SyntaxError                      ; $35 5
>9110	7c ad					.word	SyntaxError                      ; $36 6
>9112	7c ad					.word	SyntaxError                      ; $37 7
>9114	7c ad					.word	SyntaxError                      ; $38 8
>9116	7c ad					.word	SyntaxError                      ; $39 9
>9118	7c ad					.word	SyntaxError                      ; $3a :
>911a	7c ad					.word	SyntaxError                      ; $3b ;
>911c	e3 94					.word	BinaryCompareLess                ; $3c <
>911e	d9 94					.word	BinaryCompareEqual               ; $3d =
>9120	ed 94					.word	BinaryCompareGreater             ; $3e >
>9122	fd 97					.word	ByteIndirect                     ; $3f ?
.9124					VectorSet0:
>9124	83 90					.word	EOLCommand                       ; $80 !0:EOF
>9126	90 90					.word	Shift1Command                    ; $81 !1:SH1
>9128	98 90					.word	Shift2Command                    ; $82 !2:SH2
>912a	4e ab					.word	AbsUnary                         ; $83 ABS(
>912c	c7 9c					.word	AllocUnary                       ; $84 ALLOC(
>912e	5e ab					.word	AscUnary                         ; $85 ASC(
>9130	e7 9d					.word	ChrUnary                         ; $86 CHR$(
>9132	d5 94					.word	UnaryFalse                       ; $87 FALSE
>9134	6b ab					.word	FracUnary                        ; $88 FRAC(
>9136	81 ab					.word	IntUnary                         ; $89 INT(
>9138	d7 ab					.word	IsValUnary                       ; $8a ISVAL(
>913a	c1 9e					.word	Unary_Left                       ; $8b LEFT$(
>913c	93 ab					.word	LenUnary                         ; $8c LEN(
>913e	eb 9e					.word	Unary_Mid                        ; $8d MID$(
>9140	37 9d					.word	Unary_Not                        ; $8e NOT(
>9142	4d 9d					.word	Unary_Random                     ; $8f RANDOM(
>9144	d1 9e					.word	Unary_Right                      ; $90 RIGHT$(
>9146	66 9d					.word	Unary_Rnd                        ; $91 RND(
>9148	ad ab					.word	SgnUnary                         ; $92 SGN(
>914a	f9 9d					.word	SpcUnary                         ; $93 SPC(
>914c	14 9e					.word	Unary_Str                        ; $94 STR$(
>914e	c9 94					.word	UnaryTrue                        ; $95 TRUE
>9150	cd ab					.word	ValUnary                         ; $96 VAL(
>9152	ad 8b					.word	ForCommand                       ; $97 FOR
>9154	fa 8c					.word	IfCommand                        ; $98 IF
>9156	a0 90					.word	Unused1                          ; $99 PROC
>9158	bf 8f					.word	Command_REPEAT                   ; $9a REPEAT
>915a	2e 94					.word	Command_WHILE                    ; $9b WHILE
>915c	23 8d					.word	EndIf                            ; $9c ENDIF
>915e	88 a7					.word	Command_ENDPROC                  ; $9d ENDPROC
>9160	67 8c					.word	NextCommand                      ; $9e NEXT
>9162	a0 90					.word	Unused4                          ; $9f THEN
>9164	c8 8f					.word	Command_UNTIL                    ; $a0 UNTIL
>9166	4f 94					.word	Command_WEND                     ; $a1 WEND
>9168	53 8a					.word	CallCommand                      ; $a2 CALL
>916a	7c ad					.word	SyntaxError                      ; $a3 CLS
>916c	e5 8a					.word	Command_Data                     ; $a4 DATA
>916e	ed 8a					.word	DimCommand                       ; $a5 DIM
>9170	a0 90					.word	Unused3                          ; $a6 DOWNTO
>9172	1c 8d					.word	ElseCode                         ; $a7 ELSE
>9174	c0 8c					.word	Command_GOSUB                    ; $a8 GOSUB
>9176	de 8c					.word	GotoCommand                      ; $a9 GOTO
>9178	24 8d					.word	LetCommand                       ; $aa LET
>917a	14 8e					.word	Command_LOCAL                    ; $ab LOCAL
>917c	a2 8e					.word	Command_Print                    ; $ac PRINT
>917e	59 8f					.word	Command_Read                     ; $ad READ
>9180	b2 8f					.word	RemCommand                       ; $ae REM
>9182	d0 8c					.word	Command_RETURN                   ; $af RETURN
>9184	a0 90					.word	Unused2                          ; $b0 TO
.9186					VectorSet1:
>9186	7c ad					.word	SyntaxError                      ; $80 !0:EOF
>9188	7c ad					.word	SyntaxError                      ; $81 !1:SH1
>918a	7c ad					.word	SyntaxError                      ; $82 !2:SH2
>918c	24 8a					.word	AssembleCommand                  ; $83 ASSEMBLE
>918e	43 8a					.word	AssertCommand                    ; $84 ASSERT
>9190	8d 8a					.word	ClearCommand                     ; $85 CLEAR
>9192	aa 8b					.word	EndCommand                       ; $86 END
>9194	79 8d					.word	Command_List                     ; $87 LIST
>9196	98 8e					.word	NewCommand                       ; $88 NEW
>9198	e1 8f					.word	Command_Restore                  ; $89 RESTORE
>919a	13 90					.word	CommandRUN                       ; $8a RUN
>919c	26 92					.word	StopCommand                      ; $8b STOP
.919e					VectorSet2:
>919e	7c ad					.word	SyntaxError                      ; $80 !0:EOF
>91a0	7c ad					.word	SyntaxError                      ; $81 !1:SH1
>91a2	7c ad					.word	SyntaxError                      ; $82 !2:SH2
>91a4	3b ac					.word	Assemble_adc                     ; $83 ADC
>91a6	33 ac					.word	Assemble_and                     ; $84 AND
>91a8	4f ac					.word	Assemble_asl                     ; $85 ASL
>91aa	b9 ac					.word	Assemble_bcc                     ; $86 BCC
>91ac	bd ac					.word	Assemble_bcs                     ; $87 BCS
>91ae	c5 ac					.word	Assemble_beq                     ; $88 BEQ
>91b0	7c ac					.word	Assemble_bit                     ; $89 BIT
>91b2	ad ac					.word	Assemble_bmi                     ; $8a BMI
>91b4	c1 ac					.word	Assemble_bne                     ; $8b BNE
>91b6	a9 ac					.word	Assemble_bpl                     ; $8c BPL
>91b8	c9 ac					.word	Assemble_bra                     ; $8d BRA
>91ba	cd ac					.word	Assemble_brk                     ; $8e BRK
>91bc	b1 ac					.word	Assemble_bvc                     ; $8f BVC
>91be	b5 ac					.word	Assemble_bvs                     ; $90 BVS
>91c0	d5 ac					.word	Assemble_clc                     ; $91 CLC
>91c2	29 ad					.word	Assemble_cld                     ; $92 CLD
>91c4	e9 ac					.word	Assemble_cli                     ; $93 CLI
>91c6	19 ad					.word	Assemble_clv                     ; $94 CLV
>91c8	47 ac					.word	Assemble_cmp                     ; $95 CMP
>91ca	90 ac					.word	Assemble_cpx                     ; $96 CPX
>91cc	8b ac					.word	Assemble_cpy                     ; $97 CPY
>91ce	6d ac					.word	Assemble_dec                     ; $98 DEC
>91d0	25 ad					.word	Assemble_dex                     ; $99 DEX
>91d2	01 ad					.word	Assemble_dey                     ; $9a DEY
>91d4	37 ac					.word	Assemble_eor                     ; $9b EOR
>91d6	72 ac					.word	Assemble_inc                     ; $9c INC
>91d8	35 ad					.word	Assemble_inx                     ; $9d INX
>91da	21 ad					.word	Assemble_iny                     ; $9e INY
>91dc	a4 ac					.word	Assemble_jmp                     ; $9f JMP
>91de	9f ac					.word	Assemble_jsr                     ; $a0 JSR
>91e0	43 ac					.word	Assemble_lda                     ; $a1 LDA
>91e2	68 ac					.word	Assemble_ldx                     ; $a2 LDX
>91e4	86 ac					.word	Assemble_ldy                     ; $a3 LDY
>91e6	59 ac					.word	Assemble_lsr                     ; $a4 LSR
>91e8	39 ad					.word	Assemble_nop                     ; $a5 NOP
>91ea	2f ac					.word	Assemble_ora                     ; $a6 ORA
>91ec	e5 ac					.word	Assemble_pha                     ; $a7 PHA
>91ee	d1 ac					.word	Assemble_php                     ; $a8 PHP
>91f0	2d ad					.word	Assemble_phx                     ; $a9 PHX
>91f2	ed ac					.word	Assemble_phy                     ; $aa PHY
>91f4	f5 ac					.word	Assemble_pla                     ; $ab PLA
>91f6	d9 ac					.word	Assemble_plp                     ; $ac PLP
>91f8	41 ad					.word	Assemble_plx                     ; $ad PLX
>91fa	fd ac					.word	Assemble_ply                     ; $ae PLY
>91fc	54 ac					.word	Assemble_rol                     ; $af ROL
>91fe	5e ac					.word	Assemble_ror                     ; $b0 ROR
>9200	e1 ac					.word	Assemble_rti                     ; $b1 RTI
>9202	f1 ac					.word	Assemble_rts                     ; $b2 RTS
>9204	4b ac					.word	Assemble_sbc                     ; $b3 SBC
>9206	dd ac					.word	Assemble_sec                     ; $b4 SEC
>9208	3d ad					.word	Assemble_sed                     ; $b5 SED
>920a	f9 ac					.word	Assemble_sei                     ; $b6 SEI
>920c	3f ac					.word	Assemble_sta                     ; $b7 STA
>920e	31 ad					.word	Assemble_stp                     ; $b8 STP
>9210	63 ac					.word	Assemble_stx                     ; $b9 STX
>9212	81 ac					.word	Assemble_sty                     ; $ba STY
>9214	77 ac					.word	Assemble_stz                     ; $bb STZ
>9216	15 ad					.word	Assemble_tax                     ; $bc TAX
>9218	11 ad					.word	Assemble_tay                     ; $bd TAY
>921a	9a ac					.word	Assemble_trb                     ; $be TRB
>921c	95 ac					.word	Assemble_tsb                     ; $bf TSB
>921e	1d ad					.word	Assemble_tsx                     ; $c0 TSX
>9220	05 ad					.word	Assemble_txa                     ; $c1 TXA
>9222	0d ad					.word	Assemble_txs                     ; $c2 TXS
>9224	09 ad					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9226					StopCommand:
.9226	a9 08		lda #$08		lda	#8
.9228	4c 5d 94	jmp $945d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.922b					ListConvertLine:
.922b	9c 9d 04	stz $049d			stz 	tbOffset
.922e	9c a9 04	stz $04a9			stz 	tokenBuffer
.9231	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9233	b1 30		lda ($30),y			lda 	(codePtr),y
.9235	aa		tax				tax
.9236	88		dey				dey
.9237	b1 30		lda ($30),y			lda 	(codePtr),y
.9239	20 f2 a8	jsr $a8f2			jsr 	ConvertInt16
.923c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.923e	86 37		stx $37				stx 	zTemp0+1
.9240	a0 00		ldy #$00			ldy 	#0
.9242					_LCCopyNumber:
.9242	b1 36		lda ($36),y			lda 	(zTemp0),y
.9244	20 44 93	jsr $9344			jsr 	LCLWrite
.9247	c8		iny				iny
.9248	b1 36		lda ($36),y			lda 	(zTemp0),y
.924a	d0 f6		bne $9242			bne 	_LCCopyNumber
.924c					_LCPadOut:
.924c	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.924e	20 44 93	jsr $9344			jsr 	LCLWrite
.9251	ad 9d 04	lda $049d			lda 	tbOffset
.9254	c9 06		cmp #$06			cmp 	#6
.9256	d0 f4		bne $924c			bne 	_LCPadOut
.9258	a0 03		ldy #$03			ldy 	#3 							; start position.
.925a					_LCMainLoop:
.925a	b1 30		lda ($30),y			lda 	(codePtr),y
.925c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.925e	f0 17		beq $9277			beq 	_LCExit
.9260	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9262	90 14		bcc $9278			bcc 	_LCDoubles
.9264	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9266	90 20		bcc $9288			bcc 	_LCShiftPunc
.9268	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.926a	90 2b		bcc $9297			bcc 	_LCPunctuation
.926c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.926e	90 2d		bcc $929d			bcc 	_LCIdentifiers
.9270	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9272	90 49		bcc $92bd			bcc 	_LCTokens
.9274	4c 18 93	jmp $9318			jmp 	_LCData 					; 254-5 are data objects
.9277					_LCExit:
.9277	60		rts				rts
.9278					_LCDoubles:
.9278	48		pha				pha
.9279	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.927a	29 02		and #$02			and 	#2
.927c	09 3c		ora #$3c			ora 	#60 						; make < >
.927e	20 44 93	jsr $9344			jsr 	LCLWrite
.9281	68		pla				pla 								; restore, do lower bit
.9282	29 03		and #$03			and 	#3
.9284	09 3c		ora #$3c			ora 	#60
.9286	80 0f		bra $9297			bra		_LCPunctuation 				; print, increment, loop
.9288					_LCShiftPunc:
.9288	aa		tax				tax 								; save in X
.9289	29 07		and #$07			and 	#7 							; lower 3 bits
.928b	f0 02		beq $928f			beq 	_LCNoAdd
.928d	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.928f					_LCNoAdd:
.928f	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9291	90 02		bcc $9295			bcc 	_LCNoAdd2
.9293	09 20		ora #$20			ora 	#32 						; adds $20
.9295					_LCNoAdd2:
.9295	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9297					_LCPunctuation:
.9297	c8		iny				iny 								; consume character
.9298	20 44 93	jsr $9344			jsr 	LCLWrite 					; write it out.
.929b	80 bd		bra $925a			bra 	_LCMainLoop 				; go round again.
.929d					_LCIdentifiers:
.929d	18		clc				clc 								; convert to physical address
.929e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92a0	85 37		sta $37				sta 	zTemp0+1
.92a2	c8		iny				iny
.92a3	b1 30		lda ($30),y			lda 	(codePtr),y
.92a5	85 36		sta $36				sta 	zTemp0
.92a7	c8		iny				iny
.92a8	5a		phy				phy 								; save position
.92a9	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.92ab					_LCOutIdentifier:
.92ab	c8		iny				iny
.92ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ae	29 7f		and #$7f			and 	#$7F
.92b0	20 72 93	jsr $9372			jsr 	LCLLowerCase
.92b3	20 44 93	jsr $9344			jsr 	LCLWrite
.92b6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.92b8	10 f1		bpl $92ab			bpl 	_LCOutIdentifier
.92ba	7a		ply				ply 								; restore position
.92bb	80 9d		bra $925a			bra 	_LCMainLoop
.92bd					_LCTokens:
.92bd	aa		tax				tax 								; token in X
.92be	a9 42		lda #$42			lda 	#((KeywordSet2) & $FF)
.92c0	85 36		sta $36				sta 	0+zTemp0
.92c2	a9 a3		lda #$a3			lda 	#((KeywordSet2) >> 8)
.92c4	85 37		sta $37				sta 	1+zTemp0
.92c6	e0 82		cpx #$82			cpx 	#$82
.92c8	f0 16		beq $92e0			beq 	_LCUseShift
.92ca	a9 fe		lda #$fe			lda 	#((KeywordSet1) & $FF)
.92cc	85 36		sta $36				sta 	0+zTemp0
.92ce	a9 a2		lda #$a2			lda 	#((KeywordSet1) >> 8)
.92d0	85 37		sta $37				sta 	1+zTemp0
.92d2	e0 81		cpx #$81			cpx 	#$81
.92d4	f0 0a		beq $92e0			beq 	_LCUseShift
.92d6	a9 cc		lda #$cc			lda 	#((KeywordSet0) & $FF)
.92d8	85 36		sta $36				sta 	0+zTemp0
.92da	a9 a1		lda #$a1			lda 	#((KeywordSet0) >> 8)
.92dc	85 37		sta $37				sta 	1+zTemp0
.92de	80 01		bra $92e1			bra 	_LCNoShift
.92e0					_LCUseShift:
.92e0	c8		iny				iny
.92e1					_LCNoShift:
.92e1	20 53 93	jsr $9353			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.92e4	b1 30		lda ($30),y			lda 	(codePtr),y
.92e6	aa		tax				tax 								; into X
.92e7					_LCFindText:
.92e7	ca		dex				dex
.92e8	10 0e		bpl $92f8			bpl 	_LCFoundText 				; found text.
.92ea	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.92ec	1a		inc a				inc 	a 							; one extra for size
.92ed	38		sec				sec 								; one extra for checksum
.92ee	65 36		adc $36				adc 	zTemp0 						; go to next token
.92f0	85 36		sta $36				sta 	zTemp0
.92f2	90 f3		bcc $92e7			bcc 	_LCFindText
.92f4	e6 37		inc $37				inc 	zTemp0+1
.92f6	80 ef		bra $92e7			bra 	_LCFindText
.92f8					_LCFoundText:
.92f8	5a		phy				phy 								; save List position
.92f9	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.92fb	aa		tax				tax
.92fc	a0 02		ldy #$02			ldy 	#2
.92fe					_LCCopyToken:
.92fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.9300	20 72 93	jsr $9372			jsr 	LCLLowerCase
.9303	20 44 93	jsr $9344			jsr 	LCLWrite
.9306	c8		iny				iny
.9307	ca		dex				dex
.9308	d0 f4		bne $92fe			bne 	_LCCopyToken
.930a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.930c	f0 05		beq $9313			beq 	_LCNoSpace
.930e	a9 20		lda #$20			lda 	#' '
.9310	20 44 93	jsr $9344			jsr 	LCLWrite
.9313					_LCNoSpace:
.9313	7a		ply				ply 								; restore position.
.9314	c8		iny				iny 								; consume token
.9315	4c 5a 92	jmp $925a			jmp 	_LCMainLoop 				; and go around again.
.9318					_LCData:
.9318	48		pha				pha 								; save type $FE/$FF
.9319	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.931b	c9 fe		cmp #$fe			cmp 	#$FE
.931d	f0 02		beq $9321			beq 	_LCHaveOpener
.931f	a2 22		ldx #$22			ldx 	#'"'
.9321					_LCHaveOpener:
.9321	8a		txa				txa 								; output prefix (# or ")
.9322	20 44 93	jsr $9344			jsr 	LCLWrite
.9325	c8		iny				iny 								; get count
.9326	b1 30		lda ($30),y			lda 	(codePtr),y
.9328	aa		tax				tax
.9329	c8		iny				iny 								; point at first character
.932a					_LCOutData:
.932a	b1 30		lda ($30),y			lda 	(codePtr),y
.932c	c9 00		cmp #$00			cmp 	#0
.932e	f0 03		beq $9333			beq 	_LCNoPrint
.9330	20 44 93	jsr $9344			jsr 	LCLWrite
.9333					_LCNoPrint:
.9333	c8		iny				iny
.9334	ca		dex				dex
.9335	d0 f3		bne $932a			bne 	_LCOutData
.9337	68		pla				pla 								; closing " required ?
.9338	c9 ff		cmp #$ff			cmp 	#$FF
.933a	d0 05		bne $9341			bne 	_LCNoQuote
.933c	a9 22		lda #$22			lda 	#'"'
.933e	20 44 93	jsr $9344			jsr 	LCLWrite
.9341					_LCNoQuote:
.9341	4c 5a 92	jmp $925a			jmp 	_LCMainLoop
.9344					LCLWrite:
.9344	da		phx				phx
.9345	ae 9d 04	ldx $049d			ldx 	tbOffset
.9348	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.934b	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.934e	ee 9d 04	inc $049d			inc 	tbOffset
.9351	fa		plx				plx
.9352	60		rts				rts
.9353					LCCheckSpaceRequired:
.9353	ae 9d 04	ldx $049d			ldx 	tbOffset
.9356	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9359	20 72 93	jsr $9372			jsr 	LCLLowerCase 				; saves a little effort
.935c	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.935e	90 11		bcc $9371			bcc 	_LCCSRExit
.9360	c9 3a		cmp #$3a			cmp 	#"9"+1
.9362	90 08		bcc $936c			bcc 	_LCCSRSpace
.9364	c9 61		cmp #$61			cmp 	#"a"
.9366	90 09		bcc $9371			bcc 	_LCCSRExit
.9368	c9 7b		cmp #$7b			cmp 	#"z"+1
.936a	b0 05		bcs $9371			bcs 	_LCCSRExit
.936c					_LCCSRSpace:
.936c	a9 20		lda #$20			lda 	#' '
.936e	20 44 93	jsr $9344			jsr 	LCLWrite
.9371					_LCCSRExit:
.9371	60		rts				rts
.9372					LCLLowerCase:
.9372	c9 41		cmp #$41			cmp 	#"A"
.9374	90 06		bcc $937c			bcc 	_LCLLCOut
.9376	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9378	b0 02		bcs $937c			bcs 	_LCLLCOut
.937a	69 20		adc #$20			adc 	#$20
.937c					_LCLLCOut:
.937c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.937d					ProcedureScan:
.937d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.937f	85 30		sta $30				sta 	codePtr
.9381	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9383	85 31		sta $31				sta 	codePtr+1
.9385					_PSLoop:
.9385	b2 30		lda ($30)			lda 	(codePtr)
.9387	f0 42		beq $93cb			beq 	_PSExit
.9389	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.938b	b1 30		lda ($30),y			lda 	(codePtr),y
.938d	c9 99		cmp #$99			cmp 	#KWD_PROC
.938f	d0 2d		bne $93be			bne 	_PSNext
.9391	c8		iny				iny 								; get the address of the record to zTemp0 and
.9392	b1 30		lda ($30),y			lda 	(codePtr),y
.9394	29 c0		and #$c0			and 	#$C0
.9396	c9 40		cmp #$40			cmp 	#$40
.9398	d0 32		bne $93cc			bne 	_PSSyntax
.939a	b1 30		lda ($30),y			lda 	(codePtr),y
.939c	18		clc				clc
.939d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.939f	85 37		sta $37				sta 	zTemp0+1
.93a1	c8		iny				iny 								; LSB
.93a2	b1 30		lda ($30),y			lda 	(codePtr),y
.93a4	85 36		sta $36				sta 	zTemp0
.93a6	c8		iny				iny 								; character after variable call.
.93a7	98		tya				tya 								; save Y offset at +7
.93a8	a0 07		ldy #$07			ldy 	#7
.93aa	91 36		sta ($36),y			sta 	(zTemp0),y
.93ac	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.93ae	a0 02		ldy #$02			ldy 	#2
.93b0	91 36		sta ($36),y			sta 	(zTemp0),y
.93b2	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.93b4					_PSCopy:
.93b4	b5 30		lda $30,x			lda 	safePtr,x
.93b6	c8		iny				iny
.93b7	91 36		sta ($36),y			sta 	(zTemp0),y
.93b9	e8		inx				inx
.93ba	e0 04		cpx #$04			cpx 	#4
.93bc	d0 f6		bne $93b4			bne 	_PSCopy
.93be					_PSNext:
.93be	18		clc				clc
.93bf	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93c1	65 30		adc $30				adc 	codePtr
.93c3	85 30		sta $30				sta 	codePtr
.93c5	90 02		bcc $93c9			bcc 	_CREExit
.93c7	e6 31		inc $31				inc 	codePtr+1
.93c9					_CREExit:
.93c9	80 ba		bra $9385			bra 	_PSLoop
.93cb					_PSExit:
.93cb	60		rts				rts
.93cc					_PSSyntax:
.93cc	4c 7c ad	jmp $ad7c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.93cf					ScanForward:
.93cf	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.93d1	86 37		stx $37				stx 	zTemp0+1
.93d3	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.93d5					_ScanLoop:
.93d5	b1 30		lda ($30),y			lda 	(codePtr),y
.93d7	c8		iny				iny
.93d8	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.93da	d0 0e		bne $93ea			bne 	_ScanGoNext
.93dc	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.93de	f0 04		beq $93e4			beq 	_ScanMatch
.93e0	c5 37		cmp $37				cmp 	zTemp0+1
.93e2	d0 06		bne $93ea			bne 	_ScanGoNext
.93e4					_ScanMatch:
.93e4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.93e6	d0 01		bne $93e9			bne 	_ScanNotEndEOL
.93e8	88		dey				dey
.93e9					_ScanNotEndEOL:
.93e9	60		rts				rts
.93ea					_ScanGoNext:
.93ea	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.93ec	90 e7		bcc $93d5			bcc 	_ScanLoop
.93ee	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.93f0	90 18		bcc $940a			bcc 	_ScanSkipOne
.93f2	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.93f4	b0 2f		bcs $9425			bcs 	_ScanSkipData
.93f6	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.93f8	90 db		bcc $93d5			bcc 	_ScanLoop 					; if not, ordinary keywords.
.93fa	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.93fc	b0 d7		bcs $93d5			bcs 	_ScanLoop
.93fe	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9400	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9402	b0 d1		bcs $93d5			bcs 	_ScanLoop
.9404	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9406	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9408	80 cb		bra $93d5			bra 	_ScanLoop
.940a					_ScanSkipOne:
.940a	c8		iny				iny 								; consume the extra one.
.940b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.940d	d0 c6		bne $93d5			bne 	_ScanLoop
.940f	18		clc				clc
.9410	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9412	65 30		adc $30				adc 	codePtr
.9414	85 30		sta $30				sta 	codePtr
.9416	90 02		bcc $941a			bcc 	_CREExit
.9418	e6 31		inc $31				inc 	codePtr+1
.941a					_CREExit:
.941a	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.941c	b2 30		lda ($30)			lda 	(codePtr)
.941e	d0 b5		bne $93d5			bne 	_ScanLoop 					; if not zero, more to scan
.9420	a9 13		lda #$13		lda	#19
.9422	4c 5d 94	jmp $945d		jmp	ErrorHandler
.9425					_ScanSkipData:
.9425	88		dey				dey 								; point at data token
.9426	c8		iny				iny
.9427	98		tya				tya
.9428	38		sec				sec
.9429	71 30		adc ($30),y			adc 	(codePtr),y
.942b	a8		tay				tay
.942c	80 a7		bra $93d5			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.942e					Command_WHILE:
.942e	5a		phy				phy 								; save position of the test
.942f	a2 00		ldx #$00			ldx 	#0
.9431	20 69 9f	jsr $9f69			jsr 	EvaluateNumber 				; work out the number
.9434	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; check if zero
.9437	f0 0e		beq $9447			beq 	_WHExitLoop 				; if so exit the loop
.9439	98		tya				tya 								; position *after* test.
.943a	7a		ply				ply 								; restore position before test, at WHILE
.943b	88		dey				dey
.943c	48		pha				pha 								; push after test on the stack
.943d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.943f	20 c9 a0	jsr $a0c9			jsr 	StackOpen
.9442	20 0d a1	jsr $a10d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9445	7a		ply				ply 								; restore the position *after* the test
.9446	60		rts				rts
.9447					_WHExitLoop:
.9447	68		pla				pla 								; throw post loop position
.9448	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.944a	aa		tax				tax
.944b	20 cf 93	jsr $93cf			jsr 	ScanForward
.944e	60		rts				rts
.944f					Command_WEND:
.944f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9451	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9453	20 f5 a0	jsr $a0f5			jsr 	StackCheckFrame
.9456	20 1e a1	jsr $a11e			jsr 	STKLoadCodePosition 		; loop back
.9459	20 e7 a0	jsr $a0e7			jsr 	StackClose		 			; erase the frame
.945c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a796					CheckRightBracket:
.a796	b1 30		lda ($30),y			lda 	(codePtr),y
.a798	c8		iny				iny
.a799	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a79b	d0 0f		bne $a7ac			bne 	CNAFail
.a79d	60		rts				rts
.a79e					CheckComma:
.a79e	b1 30		lda ($30),y			lda 	(codePtr),y
.a7a0	c8		iny				iny
.a7a1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a7a3	d0 07		bne $a7ac			bne 	CNAFail
.a7a5	60		rts				rts
.a7a6					CheckNextA:
.a7a6	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a7a8	d0 02		bne $a7ac			bne 	CNAFail
.a7aa	c8		iny				iny 								; skip character
.a7ab	60		rts				rts 								; and exit
.a7ac					CNAFail:
.a7ac	4c 7c ad	jmp $ad7c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.945d					ErrorHandler:
.945d	a8		tay				tay 								; find the error text
.945e	f0 49		beq $94a9			beq 	_EHEnd
.9460	a2 00		ldx #$00			ldx 	#0
.9462	a9 95		lda #$95			lda 	#((ErrorText) & $FF)
.9464	85 36		sta $36				sta 	0+zTemp0
.9466	a9 ad		lda #$ad			lda 	#((ErrorText) >> 8)
.9468	85 37		sta $37				sta 	1+zTemp0
.946a					_EHFind:
.946a	88		dey				dey 								; found the error text ?
.946b	f0 0e		beq $947b			beq 	_EHFound
.946d					_EHFindZero:
.946d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.946f	e6 36		inc $36				inc 	zTemp0
.9471	d0 02		bne $9475			bne 	_EHFNoCarry
.9473	e6 37		inc $37				inc 	zTemp0+1
.9475					_EHFNoCarry:
.9475	c9 00		cmp #$00			cmp 	#0
.9477	d0 f4		bne $946d			bne 	_EHFindZero
.9479	80 ef		bra $946a			bra 	_EHFind
.947b					_EHFound:
.947b	a5 36		lda $36				lda 	zTemp0 						; print message
.947d	a6 37		ldx $37				ldx 	zTemp0+1
.947f	20 b6 94	jsr $94b6			jsr 	PrintStringXA
.9482	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9484	b1 30		lda ($30),y			lda 	(codePtr),y
.9486	d0 05		bne $948d			bne 	_EHAtMsg
.9488	c8		iny				iny
.9489	b1 30		lda ($30),y			lda 	(codePtr),y
.948b	f0 17		beq $94a4			beq 	_EHCREnd
.948d					_EHAtMsg:
.948d	a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.948f	a9 ac		lda #$ac			lda 	#_AtMsg & $FF
.9491	20 b6 94	jsr $94b6			jsr 	PrintStringXA
.9494	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9496	b1 30		lda ($30),y			lda 	(codePtr),y
.9498	48		pha				pha
.9499	c8		iny				iny
.949a	b1 30		lda ($30),y			lda 	(codePtr),y
.949c	aa		tax				tax
.949d	68		pla				pla
.949e	20 f2 a8	jsr $a8f2			jsr 	ConvertInt16 				; convert XA to string
.94a1	20 b6 94	jsr $94b6			jsr 	PrintStringXA 				; and print it.
.94a4					_EHCREnd:
.94a4	a9 0d		lda #$0d			lda 	#13 						; new line
.94a6	20 21 af	jsr $af21			jsr 	EXTPrintCharacter
.94a9					_EHEnd:
.94a9	4c f4 89	jmp $89f4			jmp 	WarmStart
>94ac	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>94b4	20 00
.94b6					PrintStringXA:
.94b6	5a		phy				phy
.94b7	86 37		stx $37				stx 	zTemp0+1
.94b9	85 36		sta $36				sta 	zTemp0
.94bb	a0 00		ldy #$00			ldy 	#0
.94bd					_PSXALoop:
.94bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.94bf	f0 06		beq $94c7			beq 	_PSXAExit
.94c1	20 21 af	jsr $af21			jsr 	EXTPrintCharacter
.94c4	c8		iny				iny
.94c5	80 f6		bra $94bd			bra 	_PSXALoop
.94c7					_PSXAExit:
.94c7	7a		ply				ply
.94c8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.94c9					UnaryTrue:
.94c9	fa		plx				plx
.94ca					ReturnTrue:
.94ca	a9 01		lda #$01			lda 	#1  						; set to 1
.94cc	20 17 a0	jsr $a017			jsr 	NSMSetByte
.94cf	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.94d1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94d4	60		rts				rts
.94d5					UnaryFalse:
.94d5	fa		plx				plx
.94d6					ReturnFalse:
.94d6	4c 15 a0	jmp $a015			jmp 	NSMSetZero 					; set it all to zero
.94d9					BinaryCompareEqual:
.94d9	fa		plx				plx
.94da	20 15 95	jsr $9515			jsr 	CompareBaseCode
.94dd	c9 00		cmp #$00			cmp 	#0
.94df	f0 e9		beq $94ca			beq 	ReturnTrue
.94e1	80 f3		bra $94d6			bra 	ReturnFalse
.94e3					BinaryCompareLess:
.94e3	fa		plx				plx
.94e4	20 15 95	jsr $9515			jsr 	CompareBaseCode
.94e7	c9 ff		cmp #$ff			cmp 	#$FF
.94e9	f0 df		beq $94ca			beq 	ReturnTrue
.94eb	80 e9		bra $94d6			bra 	ReturnFalse
.94ed					BinaryCompareGreater:
.94ed	fa		plx				plx
.94ee	20 15 95	jsr $9515			jsr 	CompareBaseCode
.94f1	c9 01		cmp #$01			cmp 	#1
.94f3	f0 d5		beq $94ca			beq 	ReturnTrue
.94f5	80 df		bra $94d6			bra 	ReturnFalse
.94f7					BinaryCompareNotEqual:
.94f7	fa		plx				plx
.94f8	20 15 95	jsr $9515			jsr 	CompareBaseCode
.94fb	c9 00		cmp #$00			cmp 	#0
.94fd	d0 cb		bne $94ca			bne 	ReturnTrue
.94ff	80 d5		bra $94d6			bra 	ReturnFalse
.9501					BinaryCompareLessEqual:
.9501	fa		plx				plx
.9502	20 15 95	jsr $9515			jsr 	CompareBaseCode
.9505	c9 01		cmp #$01			cmp 	#1
.9507	d0 c1		bne $94ca			bne 	ReturnTrue
.9509	80 cb		bra $94d6			bra 	ReturnFalse
.950b					BinaryCompareGreaterEqual:
.950b	fa		plx				plx
.950c	20 15 95	jsr $9515			jsr 	CompareBaseCode
.950f	c9 ff		cmp #$ff			cmp 	#$FF
.9511	d0 b7		bne $94ca			bne 	ReturnTrue
.9513	80 c1		bra $94d6			bra 	ReturnFalse
.9515					CompareBaseCode:
.9515	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; make both values if references.
.9518	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.951b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.951e	29 10		and #$10			and 	#NSTString
.9520	d0 40		bne $9562			bne 	_CBCString
.9522	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9525	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9528	d0 3b		bne $9565			bne 	_CBCFloat
.952a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.952d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9530	29 08		and #$08			and 	#NSTFloat
.9532	d0 31		bne $9565			bne 	_CBCFloat
.9534	20 68 95	jsr $9568			jsr 	CompareFixMinusZero
.9537	e8		inx				inx
.9538	20 68 95	jsr $9568			jsr 	CompareFixMinusZero
.953b	ca		dex				dex
.953c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.953f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9542	10 0b		bpl $954f			bpl 	_CDCSameSign
.9544	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9547	30 16		bmi $955f			bmi 	_CBCLess 					; return $FF
.9549					_CBCGreater:
.9549	a9 01		lda #$01			lda 	#1
.954b	60		rts				rts
.954c					_CBCEqual:
.954c	a9 00		lda #$00			lda 	#0
.954e	60		rts				rts
.954f					_CDCSameSign:
.954f	20 78 96	jsr $9678			jsr 	SubTopTwoStack 				; unsigned subtract
.9552	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; or the mantissa together
.9555	f0 f5		beq $954c			beq 	_CBCEqual 					; -0 == 0
.9557	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.955a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.955d	10 ea		bpl $9549			bpl 	_CBCGreater
.955f					_CBCLess:
.955f	a9 ff		lda #$ff			lda 	#$FF
.9561	60		rts				rts
.9562					_CBCString:
.9562	4c ce 95	jmp $95ce			jmp 	CompareStrings
.9565					_CBCFloat:
.9565	4c ee a9	jmp $a9ee			jmp 	CompareFloat
.9568					CompareFixMinusZero:
.9568	20 45 a0	jsr $a045			jsr 	NSMIsZero
.956b	d0 03		bne $9570			bne 	_CFXMZNotZero
.956d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9570					_CFXMZNotZero:
.9570	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9571					StringConcat:
.9571	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9574	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9577	29 18		and #$18			and 	#NSBTypeMask
.9579	c9 10		cmp #$10			cmp 	#NSTString
.957b	d0 4e		bne $95cb			bne		_SCType
.957d	64 38		stz $38				stz 	zTemp1 						; counting total length
.957f	e8		inx				inx
.9580	20 9e 95	jsr $959e			jsr 	_SCSetupZ0 					; setup for second
.9583	20 a9 95	jsr $95a9			jsr 	_SCLengthZ0 				; length for second
.9586	ca		dex				dex
.9587	20 9e 95	jsr $959e			jsr 	_SCSetupZ0 					; setup for first
.958a	20 a9 95	jsr $95a9			jsr 	_SCLengthZ0 				; length for first
.958d	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.958f	20 a3 b0	jsr $b0a3			jsr 	StringTempAllocate
.9592	20 bc 95	jsr $95bc			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9595	e8		inx				inx
.9596	20 9e 95	jsr $959e			jsr 	_SCSetupZ0 					; copy second out
.9599	20 bc 95	jsr $95bc			jsr 	_SCCopy
.959c	ca		dex				dex
.959d	60		rts				rts
.959e					_SCSetupZ0:
.959e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95a1	85 36		sta $36				sta 	zTemp0
.95a3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95a6	85 37		sta $37				sta 	zTemp0+1
.95a8	60		rts				rts
.95a9					_SCLengthZ0:
.95a9	5a		phy				phy
.95aa	a0 00		ldy #$00			ldy 	#0
.95ac					_SCLenLoop:
.95ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.95ae	f0 0a		beq $95ba			beq 	_SCLExit
.95b0	c8		iny				iny
.95b1	e6 38		inc $38				inc 	zTemp1
.95b3	10 f7		bpl $95ac			bpl		_SCLenLoop
.95b5	a9 09		lda #$09		lda	#9
.95b7	4c 5d 94	jmp $945d		jmp	ErrorHandler
.95ba					_SCLExit:
.95ba	7a		ply				ply
.95bb	60		rts				rts
.95bc					_SCCopy:
.95bc	5a		phy				phy
.95bd	a0 00		ldy #$00			ldy 	#0
.95bf					_SCCopyLoop:
.95bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c1	f0 06		beq $95c9			beq 	_SCCExit
.95c3	20 e1 b0	jsr $b0e1			jsr 	StringTempWrite
.95c6	c8		iny				iny
.95c7	80 f6		bra $95bf			bra 	_SCCopyLoop
.95c9					_SCCExit:
.95c9	7a		ply				ply
.95ca	60		rts				rts
.95cb					_SCType:
.95cb	4c 86 ad	jmp $ad86			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a7af					IntegerDivide:
.a7af	fa		plx				plx
.a7b0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a7b3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7b6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7b7	0a		asl a				asl 	a
.a7b8	10 05		bpl $a7bf			bpl 	_NotRef
.a7ba	48		pha				pha
.a7bb	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7be	68		pla				pla
.a7bf					_NotRef:
.a7bf	0a		asl a				asl 	a
.a7c0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a7c2	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7c5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a7c8	f0 03		beq $a7cd			beq 	_IntegerCode 				; if clear, then we have two integers
.a7ca	4c 86 ad	jmp $ad86			jmp 	TypeError 					; anything else, type mismatch.
.a7cd					_IntegerCode:
.a7cd	20 ef a7	jsr $a7ef			jsr 	CheckDivideZero 			; do div zero check
.a7d0	20 27 a8	jsr $a827			jsr 	Int32Divide 				; do the division
.a7d3	20 e4 a8	jsr $a8e4			jsr 	CalculateSign 				; calculate result sign
.a7d6					NSMCopyPlusTwoToZero:
.a7d6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a7d9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a7dc	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a7df	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7e2	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a7e5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a7e8	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a7eb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a7ee	60		rts				rts
.a7ef					CheckDivideZero:
.a7ef	e8		inx				inx
.a7f0	20 45 a0	jsr $a045			jsr 	NSMIsZero
.a7f3	f0 02		beq $a7f7			beq 	_CDVError
.a7f5	ca		dex				dex
.a7f6	60		rts				rts
.a7f7					_CDVError:
.a7f7	a9 03		lda #$03		lda	#3
.a7f9	4c 5d 94	jmp $945d		jmp	ErrorHandler
.a7fc					IntegerModulus:
.a7fc	fa		plx				plx
.a7fd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a800	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a803	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a804	0a		asl a				asl 	a
.a805	10 05		bpl $a80c			bpl 	_NotRef
.a807	48		pha				pha
.a808	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a80b	68		pla				pla
.a80c					_NotRef:
.a80c	0a		asl a				asl 	a
.a80d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a80f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a812	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a815	f0 03		beq $a81a			beq 	_IntegerCode 				; if clear, then we have two integers
.a817	4c 86 ad	jmp $ad86			jmp 	TypeError 					; anything else, type mismatch.
.a81a					_IntegerCode:
.a81a					IntegerModulusNoCheck:
.a81a	20 ef a7	jsr $a7ef			jsr 	CheckDivideZero 			; do div zero check
.a81d	20 27 a8	jsr $a827			jsr 	Int32Divide 				; do the division
.a820	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a823	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a826	60		rts				rts
.a827					Int32Divide:
.a827	48		pha				pha 								; save AXY
.a828	5a		phy				phy
.a829	20 ec 9f	jsr $9fec			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a82c	20 11 a0	jsr $a011			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a82f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a831					_I32DivideLoop:
.a831	e8		inx				inx
.a832	e8		inx				inx
.a833	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a836	ca		dex				dex
.a837	ca		dex				dex
.a838	20 2b a0	jsr $a02b			jsr 	NSMRotateLeft
.a83b	20 67 a8	jsr $a867			jsr 	DivideCheckSubtract 		; check if subtract possible
.a83e	90 03		bcc $a843			bcc 	_I32DivideNoCarryIn
.a840	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a843					_I32DivideNoCarryIn:
.a843	88		dey				dey 								; loop round till division completed.
.a844	d0 eb		bne $a831			bne 	_I32DivideLoop
.a846	7a		ply				ply 								; restore AXY and exit
.a847	68		pla				pla
.a848	60		rts				rts
.a849					Int32ShiftDivide:
.a849	48		pha				pha 								; save AY
.a84a	5a		phy				phy
.a84b	e8		inx				inx 								; clear S[X+2]
.a84c	e8		inx				inx
.a84d	20 15 a0	jsr $a015			jsr 	NSMSetZero
.a850	ca		dex				dex
.a851	ca		dex				dex
.a852	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a854					_I32SDLoop:
.a854	20 67 a8	jsr $a867			jsr 	DivideCheckSubtract 		; check if subtract possible
.a857	e8		inx				inx
.a858	e8		inx				inx
.a859	20 2b a0	jsr $a02b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a85c	ca		dex				dex
.a85d	ca		dex				dex
.a85e	20 2b a0	jsr $a02b			jsr 	NSMRotateLeft
.a861	88		dey				dey 	 							; do 31 times
.a862	d0 f0		bne $a854			bne 	_I32SDLoop
.a864	7a		ply				ply 								; restore AY and exit
.a865	68		pla				pla
.a866	60		rts				rts
.a867					DivideCheckSubtract:
.a867	20 78 96	jsr $9678			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a86a	b0 04		bcs $a870			bcs 	_DCSExit 					; if carry set, then could do, exit
.a86c	20 52 96	jsr $9652			jsr 	AddTopTwoStack 				; add it back in
.a86f	18		clc				clc 								; and return False
.a870					_DCSExit:
.a870	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a871					MulInteger:
.a871	fa		plx				plx
.a872	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a875	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a878	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a879	0a		asl a				asl 	a
.a87a	10 05		bpl $a881			bpl 	_NotRef
.a87c	48		pha				pha
.a87d	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a880	68		pla				pla
.a881					_NotRef:
.a881	0a		asl a				asl 	a 							; put MSB of type into A:7
.a882	30 0b		bmi $a88f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a884	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a887	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a88a	f0 06		beq $a892			beq 	_IntegerCode 				; if clear, then we have two integers
.a88c	4c c5 aa	jmp $aac5			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a88f					_StringData:
.a88f	4c 90 ad	jmp $ad90			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a892					_IntegerCode:
.a892	20 9f a8	jsr $a89f			jsr 	MultiplyShort
.a895	c9 00		cmp #$00			cmp 	#0
.a897	f0 05		beq $a89e			beq 	_MIExit
.a899	a9 04		lda #$04		lda	#4
.a89b	4c 5d 94	jmp $945d		jmp	ErrorHandler
.a89e					_MIExit:
.a89e	60		rts				rts
.a89f					MultiplyShort:
.a89f	5a		phy				phy 								; save Y
.a8a0	20 ec 9f	jsr $9fec			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a8a3	20 11 a0	jsr $a011			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a8a6	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a8a8					_I32MLoop:
.a8a8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a8ab	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a8ae	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a8b1	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a8b4	f0 28		beq $a8de			beq 	_I32MExit 					; exit if zero
.a8b6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a8b9	29 01		and #$01			and 	#1
.a8bb	f0 0e		beq $a8cb			beq 	_I32MNoAdd
.a8bd	20 52 96	jsr $9652			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a8c0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a8c3	10 06		bpl $a8cb			bpl 	_I32MNoAdd
.a8c5					_I32ShiftRight:
.a8c5	20 38 a0	jsr $a038			jsr 	NSMShiftRight 				; shift S[X] right
.a8c8	c8		iny				iny 								; increment shift count
.a8c9	80 0a		bra $a8d5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a8cb					_I32MNoAdd:
.a8cb	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a8ce	70 f5		bvs $a8c5			bvs 	_I32ShiftRight 				; instead.
.a8d0	e8		inx				inx
.a8d1	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a8d4	ca		dex				dex
.a8d5					_I32MShiftUpper:
.a8d5	e8		inx				inx 								; shift S[X+2] right
.a8d6	e8		inx				inx
.a8d7	20 38 a0	jsr $a038			jsr 	NSMShiftRight
.a8da	ca		dex				dex
.a8db	ca		dex				dex
.a8dc	80 ca		bra $a8a8			bra 	_I32MLoop 					; try again.
.a8de					_I32MExit:
.a8de	20 e4 a8	jsr $a8e4			jsr 	CalculateSign
.a8e1	98		tya				tya 								; shift in A
.a8e2	7a		ply				ply 								; restore Y and exit
.a8e3	60		rts				rts
.a8e4					CalculateSign:
.a8e4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a8e7	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a8ea	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a8ed	0a		asl a				asl 	a 							; shift bit 7 into carry
.a8ee	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a8f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.95ce					CompareStrings:
.95ce	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.95d1	3d 01 04	and $0401,x			and 	NSStatus+1,x
.95d4	29 10		and #$10			and 	#NSBIsString
.95d6	f0 2c		beq $9604			beq 	_CSTypeError
.95d8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.95db	85 36		sta $36				sta 	zTemp0
.95dd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95e0	85 37		sta $37				sta 	zTemp0+1
.95e2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95e5	85 38		sta $38				sta 	zTemp1
.95e7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ea	85 39		sta $39				sta 	zTemp1+1
.95ec	5a		phy				phy 								; save Y so we can access strings
.95ed	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.95ef					_CSLoop:
.95ef	c8		iny				iny
.95f0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.95f2	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.95f4	d0 06		bne $95fc			bne 	_CSDifferent
.95f6	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.95f8	d0 f5		bne $95ef			bne 	_CSLoop 					; still comparing
.95fa					_CSExit:
.95fa	7a		ply				ply 								; reached end, return zero in A from EOS
.95fb	60		rts				rts
.95fc					_CSDifferent:
.95fc	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.95fe	90 fa		bcc $95fa			bcc		_CSExit
.9600	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9602	80 f6		bra $95fa			bra 	_CSExit
.9604					_CSTypeError:
.9604	4c 86 ad	jmp $ad86			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9607					ShiftLeft:
.9607	38		sec				sec
.9608	80 01		bra $960b			bra 	ShiftMain
.960a					ShiftRight:
.960a	18		clc				clc
.960b					ShiftMain:
.960b	fa		plx				plx 								; restore X
.960c	08		php				php 								; save direction
.960d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9610	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9613	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9614	0a		asl a				asl 	a
.9615	10 05		bpl $961c			bpl 	_NotRef
.9617	48		pha				pha
.9618	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.961b	68		pla				pla
.961c					_NotRef:
.961c	0a		asl a				asl 	a
.961d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.961f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9622	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9625	f0 03		beq $962a			beq 	_IntegerCode 				; if clear, then we have two integers
.9627	4c 86 ad	jmp $ad86			jmp 	TypeError 					; anything else, type mismatch.
.962a					_IntegerCode:
.962a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.962d	29 e0		and #$e0			and 	#$E0
.962f	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9632	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9635	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9638	d0 13		bne $964d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.963a					_SMLoop:
.963a	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.963d	30 11		bmi $9650			bmi 	_SMExit 					; exit if done.
.963f	28		plp				plp 								; restore direcition setting
.9640	08		php				php
.9641	90 05		bcc $9648			bcc 	_SMRight
.9643	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; shift left if CS
.9646	80 f2		bra $963a			bra 	_SMLoop
.9648					_SMRight:
.9648	20 38 a0	jsr $a038			jsr 	NSMShiftRight 				; shift right if CC
.964b	80 ed		bra $963a			bra 	_SMLoop
.964d					_SMExit0:
.964d	20 15 a0	jsr $a015			jsr 	NSMSetZero 					; return zero.
.9650					_SMExit:
.9650	28		plp				plp 								; throw direction
.9651	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9652					AddTopTwoStack:
.9652	18		clc				clc
.9653	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9656	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9659	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.965c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.965f	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9662	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9665	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9668	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.966b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.966e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9671	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9674	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9677	60		rts				rts
.9678					SubTopTwoStack:
.9678	38		sec				sec
.9679	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.967c	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.967f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9682	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9685	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9688	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.968b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.968e	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9691	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9694	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9697	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.969a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.969d	60		rts				rts
.969e					AddInteger:
.969e	fa		plx				plx
.969f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96a2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96a5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96a6	0a		asl a				asl 	a
.96a7	10 05		bpl $96ae			bpl 	_NotRef
.96a9	48		pha				pha
.96aa	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96ad	68		pla				pla
.96ae					_NotRef:
.96ae	0a		asl a				asl 	a 							; put MSB of type into A:7
.96af	30 0b		bmi $96bc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96b1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96b4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96b7	f0 06		beq $96bf			beq 	_IntegerCode 				; if clear, then we have two integers
.96b9	4c 4d a9	jmp $a94d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96bc					_StringData:
.96bc	4c 71 95	jmp $9571			jmp 	StringConcat							; at least one string - don't know both are strings.
.96bf					_IntegerCode:
.96bf					AddCode:
.96bf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96c2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.96c5	10 8b		bpl $9652			bpl 	AddTopTwoStack
.96c7	20 78 96	jsr $9678			jsr 	SubTopTwoStack 				; do a physical subtraction
.96ca	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96cd	10 09		bpl $96d8			bpl 	_AddExit
.96cf	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96d2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96d5	20 ca 9f	jsr $9fca			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.96d8					_AddExit:
.96d8	60		rts				rts
.96d9					SubInteger:
.96d9	fa		plx				plx
.96da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96dd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96e0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96e1	0a		asl a				asl 	a
.96e2	10 05		bpl $96e9			bpl 	_NotRef
.96e4	48		pha				pha
.96e5	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96e8	68		pla				pla
.96e9					_NotRef:
.96e9	0a		asl a				asl 	a 							; put MSB of type into A:7
.96ea	30 0b		bmi $96f7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96ec	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96ef	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96f2	f0 06		beq $96fa			beq 	_IntegerCode 				; if clear, then we have two integers
.96f4	4c 52 a9	jmp $a952			jmp 	FloatingPointSub 							; otherwise at least one float.
.96f7					_StringData:
.96f7	4c 90 ad	jmp $ad90			jmp 	NotDoneError							; at least one string - don't know both are strings.
.96fa					_IntegerCode:
.96fa	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.96fd	49 80		eor #$80			eor 	#$80
.96ff	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9702	80 bb		bra $96bf			bra 	AddCode 					; and do the same code as add.
.9704					AndInteger:
.9704	fa		plx				plx
.9705	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9708	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.970b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.970c	0a		asl a				asl 	a
.970d	10 05		bpl $9714			bpl 	_NotRef
.970f	48		pha				pha
.9710	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9713	68		pla				pla
.9714					_NotRef:
.9714	0a		asl a				asl 	a
.9715	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9717	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.971a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.971d	f0 03		beq $9722			beq 	_IntegerCode 				; if clear, then we have two integers
.971f	4c 86 ad	jmp $ad86			jmp 	TypeError 					; anything else, type mismatch.
.9722					_IntegerCode:
.9722	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9725	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9728	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.972b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.972e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9731	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9734	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9737	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.973a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.973d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9740	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9743	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9746	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9749	60		rts				rts
.974a					OraInteger:
.974a	fa		plx				plx
.974b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.974e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9751	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9752	0a		asl a				asl 	a
.9753	10 05		bpl $975a			bpl 	_NotRef
.9755	48		pha				pha
.9756	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9759	68		pla				pla
.975a					_NotRef:
.975a	0a		asl a				asl 	a
.975b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.975d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9760	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9763	f0 03		beq $9768			beq 	_IntegerCode 				; if clear, then we have two integers
.9765	4c 86 ad	jmp $ad86			jmp 	TypeError 					; anything else, type mismatch.
.9768					_IntegerCode:
.9768	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.976b	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.976e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9771	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9774	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9777	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.977a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.977d	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9780	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9783	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9786	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9789	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.978c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.978f	60		rts				rts
.9790					EorInteger:
.9790	fa		plx				plx
.9791	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9794	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9797	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9798	0a		asl a				asl 	a
.9799	10 05		bpl $97a0			bpl 	_NotRef
.979b	48		pha				pha
.979c	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.979f	68		pla				pla
.97a0					_NotRef:
.97a0	0a		asl a				asl 	a
.97a1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97a3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97a6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97a9	f0 03		beq $97ae			beq 	_IntegerCode 				; if clear, then we have two integers
.97ab	4c 86 ad	jmp $ad86			jmp 	TypeError 					; anything else, type mismatch.
.97ae					_IntegerCode:
.97ae	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.97b1	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.97b4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.97ba	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.97bd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97c0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.97c3	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.97c6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97c9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.97cc	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.97cf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97d2	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.97d5	60		rts				rts
.97d6					WordIndirect:
.97d6	fa		plx				plx
.97d7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97da	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97dd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97de	0a		asl a				asl 	a
.97df	10 05		bpl $97e6			bpl 	_NotRef
.97e1	48		pha				pha
.97e2	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e5	68		pla				pla
.97e6					_NotRef:
.97e6	0a		asl a				asl 	a
.97e7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97e9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ec	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97ef	f0 03		beq $97f4			beq 	_IntegerCode 				; if clear, then we have two integers
.97f1	4c 86 ad	jmp $ad86			jmp 	TypeError 					; anything else, type mismatch.
.97f4					_IntegerCode:
.97f4	20 bf 96	jsr $96bf			jsr 	AddCode 					; add the two values
.97f7	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97f9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97fc	60		rts				rts
.97fd					ByteIndirect:
.97fd	fa		plx				plx
.97fe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9801	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9804	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9805	0a		asl a				asl 	a
.9806	10 05		bpl $980d			bpl 	_NotRef
.9808	48		pha				pha
.9809	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.980c	68		pla				pla
.980d					_NotRef:
.980d	0a		asl a				asl 	a
.980e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9810	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9813	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9816	f0 03		beq $981b			beq 	_IntegerCode 				; if clear, then we have two integers
.9818	4c 86 ad	jmp $ad86			jmp 	TypeError 					; anything else, type mismatch.
.981b					_IntegerCode:
.981b	20 bf 96	jsr $96bf			jsr 	AddCode 					; add the two values
.981e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9820	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9823	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a8f2					ConvertInt16:
.a8f2	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a8f5	8e 10 04	stx $0410			stx 	NSMantissa1
.a8f8	9c 18 04	stz $0418			stz 	NSMantissa2
.a8fb	9c 20 04	stz $0420			stz 	NSMantissa3
.a8fe	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a901	a2 00		ldx #$00			ldx 	#0 							; stack level
.a903	a9 0a		lda #$0a			lda 	#10 						; base
.a905	80 00		bra $a907			bra 	ConvertInt32
.a907					ConvertInt32:
.a907	5a		phy				phy
.a908	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a90a	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a90d	10 08		bpl $a917			bpl 	_CI32NotNeg
.a90f	48		pha				pha
.a910	a9 2d		lda #$2d			lda 	#'-'
.a912	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a915	c8		iny				iny
.a916	68		pla				pla
.a917					_CI32NotNeg:
.a917	20 25 a9	jsr $a925			jsr 	_CI32DivideConvert 			; recursive conversion
.a91a	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a91c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a91f	7a		ply				ply
.a920	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a922	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a924	60		rts				rts
.a925					_CI32DivideConvert:
.a925	e8		inx				inx 								; write to next slot up
.a926	20 17 a0	jsr $a017			jsr 	NSMSetByte
.a929	ca		dex				dex
.a92a	20 27 a8	jsr $a827			jsr 	Int32Divide 				; divide
.a92d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a930	48		pha				pha
.a931	20 d6 a7	jsr $a7d6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a934	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; is it zero ?
.a937	f0 06		beq $a93f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a939	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a93c	20 25 a9	jsr $a925			jsr 	_CI32DivideConvert 			; and recusrively call.
.a93f					_CI32NoRecurse:
.a93f	68		pla				pla 								; remainder
.a940	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a942	90 02		bcc $a946			bcc 	_CI32NotHex
.a944	69 26		adc #$26			adc 	#6+32
.a946					_CI32NotHex:
.a946	69 30		adc #$30			adc 	#48
.a948	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a94b	c8		iny				iny
.a94c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9824					PrecedenceLevel:
>9824	04					.byte	 4	; $00 <<
>9825	02					.byte	 2	; $01 <=
>9826	02					.byte	 2	; $02 <>
>9827	00					.byte	 0	; $03 !!3
>9828	00					.byte	 0	; $04 ><
>9829	02					.byte	 2	; $05 >=
>982a	04					.byte	 4	; $06 >>
>982b	00					.byte	 0	; $07 !!7
>982c	00					.byte	 0	; $08 !!8
>982d	00					.byte	 0	; $09 !!9
>982e	00					.byte	 0	; $0a !!10
>982f	00					.byte	 0	; $0b !!11
>9830	00					.byte	 0	; $0c !!12
>9831	00					.byte	 0	; $0d !!13
>9832	00					.byte	 0	; $0e !!14
>9833	00					.byte	 0	; $0f !!15
>9834	00					.byte	 0	; $10 @
>9835	00					.byte	 0	; $11 !!17
>9836	00					.byte	 0	; $12 !!18
>9837	00					.byte	 0	; $13 [
>9838	04					.byte	 4	; $14 \
>9839	00					.byte	 0	; $15 ]
>983a	01					.byte	 1	; $16 ^
>983b	00					.byte	 0	; $17 _
>983c	00					.byte	 0	; $18 `
>983d	00					.byte	 0	; $19 !!25
>983e	00					.byte	 0	; $1a !!26
>983f	00					.byte	 0	; $1b {
>9840	01					.byte	 1	; $1c |
>9841	00					.byte	 0	; $1d }
>9842	00					.byte	 0	; $1e ~
>9843	00					.byte	 0	; $1f [7m<7F>[m
>9844	00					.byte	 0	; $20
>9845	05					.byte	 5	; $21 !
>9846	00					.byte	 0	; $22 "
>9847	00					.byte	 0	; $23 #
>9848	05					.byte	 5	; $24 $
>9849	04					.byte	 4	; $25 %
>984a	01					.byte	 1	; $26 &
>984b	00					.byte	 0	; $27 '
>984c	00					.byte	 0	; $28 (
>984d	00					.byte	 0	; $29 )
>984e	04					.byte	 4	; $2a *
>984f	03					.byte	 3	; $2b +
>9850	00					.byte	 0	; $2c ,
>9851	03					.byte	 3	; $2d -
>9852	00					.byte	 0	; $2e .
>9853	04					.byte	 4	; $2f /
>9854	00					.byte	 0	; $30 0
>9855	00					.byte	 0	; $31 1
>9856	00					.byte	 0	; $32 2
>9857	00					.byte	 0	; $33 3
>9858	00					.byte	 0	; $34 4
>9859	00					.byte	 0	; $35 5
>985a	00					.byte	 0	; $36 6
>985b	00					.byte	 0	; $37 7
>985c	00					.byte	 0	; $38 8
>985d	00					.byte	 0	; $39 9
>985e	00					.byte	 0	; $3a :
>985f	00					.byte	 0	; $3b ;
>9860	02					.byte	 2	; $3c <
>9861	02					.byte	 2	; $3d =
>9862	02					.byte	 2	; $3e >
>9863	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9864					EvaluateExpressionAt0:
.9864	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9866					EvaluateExpression:
.9866	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9868					EvaluateExpressionAtPrecedence:
.9868	48		pha				pha 								; save precedence level
.9869	20 37 9b	jsr $9b37			jsr 	EvaluateTerm 				; evaluate term into level X.
.986c	68		pla				pla 								; restore precedence level.
.986d					_EXPRLoop:
.986d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.986f	b1 30		lda ($30),y			lda 	(codePtr),y
.9871	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9873	b0 25		bcs $989a			bcs 	_EXPRExit
.9875	da		phx				phx 								; read the operator precedence
.9876	aa		tax				tax
.9877	bd 24 98	lda $9824,x			lda 	PrecedenceLevel,x
.987a	fa		plx				plx
.987b	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.987d	f0 1b		beq $989a			beq 	_EXPRExit
.987f	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9881	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9883	c5 37		cmp $37				cmp 	zTemp0+1
.9885	b0 13		bcs $989a			bcs		_EXPRExit 					; if current >= operator exit
.9887	48		pha				pha 								; save current precedence.
.9888	b1 30		lda ($30),y			lda 	(codePtr),y
.988a	c8		iny				iny
.988b	48		pha				pha
.988c	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.988e	e8		inx				inx 								; work out the right hand side.
.988f	20 68 98	jsr $9868			jsr 	EvaluateExpressionAtPrecedence
.9892	ca		dex				dex
.9893	68		pla				pla 								; get operator, call the code.
.9894	20 9d 98	jsr $989d			jsr 	_EXPRCaller
.9897	68		pla				pla 								; restore precedence level
.9898	80 d3		bra $986d			bra 	_EXPRLoop 					; and go round.
.989a					_EXPRExit:
.989a	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.989c	60		rts				rts
.989d					_EXPRCaller:
.989d	da		phx				phx 								; save on stack, first thing is to restore it
.989e	0a		asl a				asl 	a 							; double so can use vectors into X
.989f	aa		tax				tax
.98a0	7c a4 90	jmp ($90a4,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a94d					FloatingPointAdd:
.a94d	20 ee aa	jsr $aaee			jsr 	FloatPrepare 				; prepare for floats
.a950	80 0b		bra $a95d			bra 	FloatAdd
.a952					FloatingPointSub:
.a952	20 ee aa	jsr $aaee			jsr 	FloatPrepare 				; prepare for floats
.a955					FloatSubtract:
.a955	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a958	49 80		eor #$80			eor 	#$80
.a95a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a95d					FloatAdd:
.a95d	48		pha				pha
.a95e	5a		phy				phy
.a95f	20 ff aa	jsr $aaff			jsr 	NSNormalise 				; normalise S[X]
.a962	f0 54		beq $a9b8			beq 	_FAReturn1
.a964	e8		inx				inx 								; normalise S[X+1]
.a965	20 ff aa	jsr $aaff			jsr 	NSNormalise
.a968	ca		dex				dex
.a969	c9 00		cmp #$00			cmp 	#0
.a96b	f0 6f		beq $a9dc			beq 	_FAExit 					; if so, just return A
.a96d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a970	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a973	f0 1b		beq $a990			beq 	_FAExponentsEqual
.a975	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a978	a8		tay				tay
.a979	38		sec				sec 								; do a signed comparison of the exponents.
.a97a	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a97d	50 02		bvc $a981			bvc 	_FANoSignedChange
.a97f	49 80		eor #$80			eor 	#$80
.a981					_FANoSignedChange:
.a981	29 80		and #$80			and 	#$80
.a983	10 03		bpl $a988			bpl 	_FAHaveMax
.a985	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a988					_FAHaveMax:
.a988	20 df a9	jsr $a9df			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a98b	e8		inx				inx
.a98c	20 df a9	jsr $a9df			jsr 	_FAShiftToExponent
.a98f	ca		dex				dex
.a990					_FAExponentsEqual:
.a990	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a993	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a996	30 10		bmi $a9a8			bmi 	_FADifferentSigns
.a998	20 52 96	jsr $9652			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a99b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a99e	10 3c		bpl $a9dc			bpl 	_FAExit 					; if no, we are done.
.a9a0	20 38 a0	jsr $a038			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a9a3	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a9a6	80 34		bra $a9dc			bra 	_FAExit
.a9a8					_FADifferentSigns:
.a9a8	20 78 96	jsr $9678			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a9ab	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a9ae	10 2c		bpl $a9dc			bpl 	_FAExit 					; if no, we are done.
.a9b0	20 c1 9f	jsr $9fc1			jsr 	NSMNegate 					; netate result
.a9b3	20 ca 9f	jsr $9fca			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a9b6	80 24		bra $a9dc			bra 	_FAExit
.a9b8					_FAReturn1:
.a9b8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a9bb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a9be	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a9c1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9c4	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a9c7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a9ca	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a9cd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a9d0	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a9d3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a9d6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a9d9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9dc					_FAExit:
.a9dc	7a		ply				ply
.a9dd	68		pla				pla
.a9de	60		rts				rts
.a9df					_FAShiftToExponent:
.a9df					_FAShiftToExponent2:
.a9df	98		tya				tya 								; compare Y to exponent
.a9e0	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a9e3	f0 08		beq $a9ed			beq 	_FASEExit 					; exit if so.
.a9e5	20 38 a0	jsr $a038			jsr 	NSMShiftRight	 			; shift the mantissa right
.a9e8	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a9eb	80 f2		bra $a9df			bra 	_FAShiftToExponent2
.a9ed					_FASEExit:
.a9ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a9ee					CompareFloat:
.a9ee	20 55 a9	jsr $a955			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a9f1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a9f4	29 f8		and #$f8			and 	#$F8
.a9f6	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a9f9	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a9fc	f0 09		beq $aa07			beq 	_FCExit 					; zero, so approximately identical
.a9fe	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.aa00	3c 00 04	bit $0400,x			bit 	NSStatus,x
.aa03	10 02		bpl $aa07			bpl 	_FCExit
.aa05					_FCNegative:
.aa05	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.aa07					_FCExit:
.aa07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.aa08					FDivideCommand:
.aa08	fa		plx				plx	 								; restore stack position
.aa09	20 ee aa	jsr $aaee			jsr 	FloatPrepare 				; prepare for floats
.aa0c					FloatDivide:
.aa0c	48		pha				pha
.aa0d	e8		inx				inx
.aa0e	20 ff aa	jsr $aaff			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aa11	ca		dex				dex
.aa12	c9 00		cmp #$00			cmp 	#0
.aa14	f0 20		beq $aa36			beq 	_FDZero
.aa16	20 ff aa	jsr $aaff			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aa19	f0 19		beq $aa34			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aa1b	20 49 a8	jsr $a849			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.aa1e	20 d6 a7	jsr $a7d6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.aa21	20 ff aa	jsr $aaff			jsr		NSNormalise 				; renormalise
.aa24	20 e4 a8	jsr $a8e4			jsr 	CalculateSign 				; calculate result sign
.aa27	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.aa2a	38		sec				sec
.aa2b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aa2e	38		sec				sec
.aa2f	e9 1e		sbc #$1e			sbc 	#30
.aa31	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa34					_FDExit:
.aa34	68		pla				pla
.aa35	60		rts				rts
.aa36					_FDZero:
.aa36	a9 03		lda #$03		lda	#3
.aa38	4c 5d 94	jmp $945d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.aa3b					FloatFractionalPart:
.aa3b	5a		phy				phy
.aa3c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.aa3f	29 7f		and #$7f			and 	#$7F
.aa41	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa44	20 ff aa	jsr $aaff			jsr 	NSNormalise
.aa47	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.aa4a	38		sec				sec
.aa4b	e9 e0		sbc #$e0			sbc 	#$E0
.aa4d	90 31		bcc $aa80			bcc 	_FFPExit 					; already fractional
.aa4f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.aa51	b0 2a		bcs $aa7d			bcs 	_FFPZero
.aa53	a8		tay				tay 								; put count to do in Y
.aa54	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.aa57	20 82 aa	jsr $aa82			jsr 	_FFPPartial
.aa5a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa5d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.aa60	20 82 aa	jsr $aa82			jsr 	_FFPPartial
.aa63	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa66	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa69	20 82 aa	jsr $aa82			jsr 	_FFPPartial
.aa6c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa6f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa72	20 82 aa	jsr $aa82			jsr 	_FFPPartial
.aa75	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aa78	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; zeroed check.
.aa7b	d0 03		bne $aa80			bne 	_FFPExit
.aa7d					_FFPZero:
.aa7d	20 15 a0	jsr $a015			jsr 	NSMSetZero
.aa80					_FFPExit:
.aa80	7a		ply				ply
.aa81	60		rts				rts
.aa82					_FFPPartial:
.aa82	c0 00		cpy #$00			cpy 	#0 							; no more to do
.aa84	f0 17		beq $aa9d			beq 	_FFFPPExit
.aa86	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.aa88	b0 0c		bcs $aa96			bcs 	_FFFPPWholeByte
.aa8a	5a		phy				phy
.aa8b					_FFFPPLeft:
.aa8b	0a		asl a				asl 	a
.aa8c	88		dey				dey
.aa8d	d0 fc		bne $aa8b			bne 	_FFFPPLeft
.aa8f	7a		ply				ply
.aa90					_FFFPPRight:
.aa90	4a		lsr a				lsr 	a
.aa91	88		dey				dey
.aa92	d0 fc		bne $aa90			bne 	_FFFPPRight
.aa94	80 07		bra $aa9d			bra 	_FFFPPExit
.aa96					_FFFPPWholeByte:
.aa96	98		tya				tya 								; subtract 8 from count
.aa97	38		sec				sec
.aa98	e9 08		sbc #$08			sbc 	#8
.aa9a	a8		tay				tay
.aa9b	a9 00		lda #$00			lda 	#0 							; and clear all
.aa9d					_FFFPPExit:
.aa9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aa9e					FloatIntegerPart:
.aa9e	48		pha				pha
.aa9f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.aaa2	f0 1f		beq $aac3			beq 	_FIPExit 					; if so do nothing
.aaa4	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; is it zero ?
.aaa7	f0 17		beq $aac0			beq 	_FIPZero 					; if so return zero.
.aaa9	20 ff aa	jsr $aaff			jsr 	NSNormalise 				; normalise
.aaac	f0 12		beq $aac0			beq 	_FIPZero 					; normalised to zero, exit zero
.aaae					_FIPShift:
.aaae	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.aab1	10 08		bpl $aabb			bpl 	_FIPCheckZero
.aab3	20 38 a0	jsr $a038			jsr 	NSMShiftRight 				; shift mantissa right
.aab6	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.aab9	80 f3		bra $aaae			bra 	_FIPShift
.aabb					_FIPCheckZero:
.aabb	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; avoid -0 problem
.aabe	d0 03		bne $aac3			bne 	_FIPExit 					; set to zero if mantissa zero.
.aac0					_FIPZero:
.aac0	20 15 a0	jsr $a015			jsr 	NSMSetZero
.aac3					_FIPExit:
.aac3	68		pla				pla
.aac4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.aac5					FloatingPointMultiply:
.aac5	20 ee aa	jsr $aaee			jsr 	FloatPrepare 				; prepare for floats
.aac8					FloatMultiply:
.aac8	48		pha				pha
.aac9	20 ff aa	jsr $aaff			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aacc	f0 1b		beq $aae9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aace	e8		inx				inx
.aacf	20 ff aa	jsr $aaff			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aad2	ca		dex				dex
.aad3	c9 00		cmp #$00			cmp 	#0
.aad5	f0 0f		beq $aae6			beq 	_FDSetZero
.aad7	20 9f a8	jsr $a89f			jsr 	MultiplyShort 				; calculate the result.
.aada	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.aadd	18		clc				clc
.aade	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.aae1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aae4	80 03		bra $aae9			bra 	_FDExit
.aae6					_FDSetZero:
.aae6	20 15 a0	jsr $a015			jsr 	NSMSetZero 					; return 0
.aae9					_FDExit:
.aae9	20 ff aa	jsr $aaff			jsr 	NSNormalise 				; normalise the result
.aaec	68		pla				pla
.aaed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aaee					FloatPrepare:
.aaee	20 76 99	jsr $9976			jsr 	DereferenceTopTwo 			; dereference the top two values
.aaf1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.aaf4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aaf7	29 10		and #$10			and 	#NSBIsString
.aaf9	d0 01		bne $aafc			bne 	_FDType
.aafb	60		rts				rts
.aafc					_FDType:
.aafc	4c 86 ad	jmp $ad86			jmp 	TypeError
.aaff					NSNormalise:
.aaff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.ab02	29 80		and #$80			and 	#$80
.ab04	09 08		ora #$08			ora 	#NSTFloat
.ab06	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab09	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; if zero exit
.ab0c	d0 09		bne $ab17			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ab0e	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ab11	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ab14	a9 00		lda #$00			lda 	#0 							; set Z flag
.ab16	60		rts				rts
.ab17					_NSNormaliseOptimise:
.ab17	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.ab1a	d0 22		bne $ab3e			bne 	_NSNormaliseLoop
.ab1c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.ab1f	30 1d		bmi $ab3e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.ab21	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ab24	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ab27	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ab2a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ab2d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab30	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.ab33	bd 28 04	lda $0428,x			lda 	NSExponent,x
.ab36	38		sec				sec
.ab37	e9 08		sbc #$08			sbc 	#8
.ab39	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ab3c	80 d9		bra $ab17			bra 	_NSNormaliseOptimise
.ab3e					_NSNormaliseLoop:
.ab3e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.ab41	70 08		bvs $ab4b			bvs 	_NSNExit 					; exit if so with Z flag clear
.ab43	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; shift mantissa left
.ab46	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.ab49	80 f3		bra $ab3e			bra 	_NSNormaliseLoop
.ab4b					_NSNExit:
.ab4b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ab4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.98a3					AssignNumber:
.98a3	5a		phy				phy
.98a4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.98a7	85 36		sta $36				sta 	zTemp0
.98a9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98ac	85 37		sta $37				sta 	zTemp0+1
.98ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.98b1	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.98b3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98b6	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.98b8	c9 08		cmp #$08			cmp 	#NSTFloat
.98ba	f0 2a		beq $98e6			beq 	_ANFloat
.98bc	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.98bf	f0 05		beq $98c6			beq		_ANNotFloat
.98c1	e8		inx				inx
.98c2	20 9e aa	jsr $aa9e			jsr 	FloatIntegerPart 			; make it an integer
.98c5	ca		dex				dex
.98c6					_ANNotFloat:
.98c6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.98c9	29 03		and #$03			and 	#3
.98cb	d0 05		bne $98d2			bne 	_ANByteWord
.98cd	20 f2 98	jsr $98f2			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.98d0	80 1e		bra $98f0			bra 	_ANExit
.98d2					_ANByteWord:
.98d2	48		pha				pha 								; save count
.98d3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.98d6	92 36		sta ($36)			sta 	(zTemp0)
.98d8	68		pla				pla
.98d9	c9 01		cmp #$01			cmp	 	#1
.98db	f0 13		beq $98f0			beq 	_ANExit
.98dd	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.98e0	a0 01		ldy #$01			ldy 	#1
.98e2	91 36		sta ($36),y			sta 	(zTemp0),y
.98e4	80 0a		bra $98f0			bra 	_ANExit
.98e6					_ANFloat:
.98e6	20 f2 98	jsr $98f2			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.98e9	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.98ec	a0 04		ldy #$04			ldy 	#4
.98ee	91 36		sta ($36),y			sta 	(zTemp0),y
.98f0					_ANExit:
.98f0	7a		ply				ply
.98f1	60		rts				rts
.98f2					_ANCopy4PackSign:
.98f2	a0 03		ldy #$03			ldy 	#3
.98f4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.98f7	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.98f9	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.98fc	91 36		sta ($36),y			sta 	(zTemp0),y
.98fe	88		dey				dey
.98ff	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9902	91 36		sta ($36),y			sta 	(zTemp0),y
.9904	88		dey				dey
.9905	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9908	91 36		sta ($36),y			sta 	(zTemp0),y
.990a	88		dey				dey
.990b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.990e	91 36		sta ($36),y			sta 	(zTemp0),y
.9910	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9911					AssignString:
.9911	5a		phy				phy
.9912	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9915	85 38		sta $38				sta 	zTemp1
.9917	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.991a	85 39		sta $39				sta 	zTemp1+1
.991c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.991f	85 36		sta $36				sta 	zTemp0
.9921	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9924	85 37		sta $37				sta 	zTemp0+1
.9926	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9928	b1 36		lda ($36),y			lda 	(zTemp0),y
.992a	f0 23		beq $994f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.992c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.992d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.992f	e9 02		sbc #$02			sbc 	#2
.9931	85 3c		sta $3c				sta 	zsTemp
.9933	a0 01		ldy #$01			ldy 	#1
.9935	b1 36		lda ($36),y			lda 	(zTemp0),y
.9937	e9 00		sbc #$00			sbc 	#0
.9939	85 3d		sta $3d				sta 	zsTemp+1
.993b	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.993d					_ASGetLength:
.993d	c8		iny				iny
.993e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9940	d0 fb		bne $993d			bne 	_ASGetLength
.9942	98		tya				tya 								; is this length <= current length
.9943	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9945	90 20		bcc $9967			bcc 	_ASCopyString
.9947	f0 1e		beq $9967			beq 	_ASCopyString
.9949	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.994b	a0 01		ldy #$01			ldy 	#1
.994d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.994f					_ASNewStringRequired:
.994f	e8		inx				inx 								; concrete the new string.
.9950	20 22 b0	jsr $b022			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9953	ca		dex				dex
.9954	18		clc				clc
.9955	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9958	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.995a	92 36		sta ($36)			sta 	(zTemp0)
.995c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.995f	69 00		adc #$00			adc 	#0
.9961	a0 01		ldy #$01			ldy 	#1
.9963	91 36		sta ($36),y			sta 	(zTemp0),y
.9965	80 0d		bra $9974			bra 	_ASExit
.9967					_ASCopyString:
.9967	a0 00		ldy #$00			ldy 	#0
.9969					_ASCopyLoop:
.9969	b1 38		lda ($38),y			lda 	(zTemp1),y
.996b	c8		iny				iny
.996c	c8		iny				iny
.996d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.996f	88		dey				dey
.9970	c9 00		cmp #$00			cmp 	#0
.9972	d0 f5		bne $9969			bne 	_ASCopyLoop
.9974					_ASExit:
.9974	7a		ply				ply
.9975	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9976					DereferenceTopTwo:
.9976	e8		inx				inx
.9977	20 7b 99	jsr $997b			jsr 	Dereference 				; deref x+1
.997a	ca		dex				dex  								; falls through to deref x
.997b					Dereference:
.997b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.997e	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9980	f0 57		beq $99d9			beq 	_DRFExit 					; not a reference
.9982	5a		phy				phy
.9983	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9986	85 36		sta $36				sta 	zTemp0
.9988	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.998b	85 37		sta $37				sta 	zTemp0+1
.998d	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9990	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9992	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9995	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9998	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.999a	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.999c	f0 0f		beq $99ad			beq 	_DRFDereferenceTwo
.999e	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.99a0	f0 39		beq $99db			beq 	_DRFFull
.99a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.99a5	29 03		and #$03			and 	#3
.99a7	f0 32		beq $99db			beq 	_DRFFull 					; the whole word
.99a9	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.99ab	f0 07		beq $99b4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.99ad					_DRFDereferenceTwo:
.99ad	a0 01		ldy #$01			ldy 	#1
.99af	b1 36		lda ($36),y			lda 	(zTemp0),y
.99b1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99b4					_DRFClear23:
.99b4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.99b7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.99ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.99bd	29 18		and #$18			and 	#NSBTypeMask
.99bf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99c2	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.99c4	d0 12		bne $99d8			bne 	_DRFNotString
.99c6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.99c9	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.99cc	d0 0a		bne $99d8			bne 	_DRFNotString
.99ce	a9 da		lda #$da			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.99d0	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.99d3	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.99d5	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.99d8					_DRFNotString
.99d8	7a		ply				ply 								; restore Y and exit
.99d9					_DRFExit:
.99d9	60		rts				rts
.99da					_DRFNullString:
>99da	00						.byte 	0
.99db					_DRFFull:
.99db	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.99dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.99df	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99e2	c8		iny				iny
.99e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.99e5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.99e8	c8		iny				iny
.99e9	b1 36		lda ($36),y			lda 	(zTemp0),y
.99eb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99ee	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.99f1	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.99f4	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.99f6	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.99f9	f0 06		beq $9a01			beq 	_DRFNoExponent
.99fb	c8		iny				iny 								; if not, read the exponent as well.
.99fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.99fe	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a01					_DRFNoExponent:
.9a01	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9a04	10 0d		bpl $9a13			bpl 	_DRFExit2 					; if not, then exit.
.9a06	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9a08	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a0b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9a0e	09 80		ora #$80			ora 	#NSBIsNegative
.9a10	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a13					_DRFExit2:
.9a13	7a		ply				ply
.9a14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9a15					EncodeNumberStart:
.9a15	38		sec				sec
.9a16	80 01		bra $9a19			bra 	EncodeNumberContinue+1
.9a18					EncodeNumberContinue:
.9a18	18		clc				clc
.9a19					EncodeNumber:
.9a19	08		php				php 								; save reset.
.9a1a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a1c	f0 12		beq $9a30			beq 	_ENIsOkay
.9a1e	c9 30		cmp #$30			cmp 	#"0"
.9a20	90 04		bcc $9a26			bcc 	_ENBadNumber
.9a22	c9 3a		cmp #$3a			cmp 	#"9"+1
.9a24	90 0a		bcc $9a30			bcc 	_ENIsOkay
.9a26					_ENBadNumber:
.9a26	28		plp				plp 								; throw saved reset
.9a27	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9a2a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a2c	f0 7e		beq $9aac			beq 	_ENConstructFinal
.9a2e					_ENFail:
.9a2e	18		clc				clc 								; not allowed
.9a2f	60		rts				rts
.9a30					_ENIsOkay:
.9a30	28		plp				plp 								; are we restarting
.9a31	90 15		bcc $9a48			bcc 	_ENNoRestart
.9a33					_ENStartEncode:
.9a33	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9a35	f0 0c		beq $9a43			beq 	_ENFirstDP
.9a37	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9a39	20 17 a0	jsr $a017			jsr 	NSMSetByte
.9a3c	a9 01		lda #$01			lda 	#ESTA_Low
.9a3e					_ENExitChange:
.9a3e	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9a41	38		sec				sec
.9a42	60		rts				rts
.9a43					_ENFirstDP:
.9a43	20 15 a0	jsr $a015			jsr 	NSMSetZero 					; clear integer part
.9a46	80 3f		bra $9a87			bra 	_ESTASwitchFloat			; go straight to float and exi
.9a48					_ENNoRestart:
.9a48	48		pha				pha 								; save on stack.
.9a49	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9a4c	c9 01		cmp #$01			cmp 	#ESTA_Low
.9a4e	f0 09		beq $9a59			beq  	_ESTALowState
.9a50	c9 02		cmp #$02			cmp 	#ESTA_High
.9a52	f0 29		beq $9a7d			beq 	_ESTAHighState
.9a54	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a56	f0 3b		beq $9a93			beq 	_ESTADecimalState
>9a58	db						.byte 	$DB 						; causes a break in the emulator
.9a59					_ESTALowState:
.9a59	68		pla				pla 								; get value back
.9a5a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a5c	f0 29		beq $9a87			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a5e	29 0f		and #$0f			and 	#15 						; make digit
.9a60	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9a63	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9a66	0a		asl a				asl 	a
.9a67	0a		asl a				asl 	a
.9a68	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a6b	0a		asl a				asl 	a
.9a6c	6d 86 04	adc $0486			adc 	DigitTemp
.9a6f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a72	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9a74	90 05		bcc $9a7b			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9a76	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9a78	8d 85 04	sta $0485			sta 	EncodeState
.9a7b					_ESTANoSwitch:
.9a7b	38		sec				sec
.9a7c	60		rts				rts
.9a7d					_ESTAHighState:
.9a7d	68		pla				pla 								; get value back
.9a7e	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9a80	f0 05		beq $9a87			beq 	_ESTASwitchFloat
.9a82	20 e6 9a	jsr $9ae6			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9a85	38		sec				sec
.9a86	60		rts				rts
.9a87					_ESTASwitchFloat:
.9a87	9c 87 04	stz $0487			stz 	DecimalCount
.9a8a	e8		inx				inx 								; zero the decimal additive.
.9a8b	20 15 a0	jsr $a015			jsr 	NSMSetZero
.9a8e	ca		dex				dex
.9a8f	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9a91	80 ab		bra $9a3e			bra 	_ENExitChange
.9a93					_ESTADecimalState:
.9a93	68		pla				pla 								; digit.
.9a94	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9a96	f0 96		beq $9a2e			beq 	_ENFail
.9a98	e8		inx				inx 								; put digit into fractional part of X+1
.9a99	20 e6 9a	jsr $9ae6			jsr 	ESTAShiftDigitIntoMantissa
.9a9c	ca		dex				dex
.9a9d	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9aa0	ad 87 04	lda $0487			lda 	DecimalCount
.9aa3	c9 0b		cmp #$0b			cmp 	#11
.9aa5	f0 02		beq $9aa9			beq 	_ESTADSFail
.9aa7	38		sec				sec
.9aa8	60		rts				rts
.9aa9					_ESTADSFail:
.9aa9	4c 81 ad	jmp $ad81			jmp 	RangeError
.9aac					_ENConstructFinal:
.9aac	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9aaf	f0 33		beq $9ae4			beq 	_ENCFExit 					; no decimals
.9ab1	5a		phy				phy
.9ab2	0a		asl a				asl 	a 							; x 4 and CLC
.9ab3	0a		asl a				asl 	a
.9ab4	6d 87 04	adc $0487			adc 	DecimalCount
.9ab7	a8		tay				tay
.9ab8	b9 40 ad	lda $ad40,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9abb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9abe	b9 41 ad	lda $ad41,y			lda 	DecimalScalarTable-5+1,y
.9ac1	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ac4	b9 42 ad	lda $ad42,y			lda 	DecimalScalarTable-5+2,y
.9ac7	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9aca	b9 43 ad	lda $ad43,y			lda 	DecimalScalarTable-5+3,y
.9acd	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ad0	b9 44 ad	lda $ad44,y			lda 	DecimalScalarTable-5+4,y
.9ad3	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ad6	a9 08		lda #$08			lda 	#NSTFloat
.9ad8	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9adb	7a		ply				ply
.9adc	e8		inx				inx 								; multiply decimal const by decimal scalar
.9add	20 c8 aa	jsr $aac8			jsr 	FloatMultiply
.9ae0	ca		dex				dex
.9ae1	20 5d a9	jsr $a95d			jsr 	FloatAdd 					; add to integer part.
.9ae4					_ENCFExit:
.9ae4	18		clc				clc 								; reject the digit.
.9ae5	60		rts				rts
.9ae6					ESTAShiftDigitIntoMantissa:
.9ae6	29 0f		and #$0f			and 	#15 						; save digit
.9ae8	48		pha				pha
.9ae9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9aec	48		pha				pha
.9aed	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9af0	48		pha				pha
.9af1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9af4	48		pha				pha
.9af5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9af8	48		pha				pha
.9af9	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; x 2
.9afc	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; x 4
.9aff	18		clc				clc 								; pop mantissa and add
.9b00	68		pla				pla
.9b01	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b04	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b07	68		pla				pla
.9b08	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9b0b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b0e	68		pla				pla
.9b0f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9b12	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b15	68		pla				pla
.9b16	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9b19	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9b1c	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; x 10
.9b1f	68		pla				pla 								; add digit
.9b20	18		clc				clc
.9b21	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b24	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b27	90 0d		bcc $9b36			bcc 	_ESTASDExit
.9b29	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9b2c	d0 08		bne $9b36			bne 	_ESTASDExit
.9b2e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9b31	d0 03		bne $9b36			bne 	_ESTASDExit
.9b33	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9b36					_ESTASDExit:
.9b36	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9b37					EvaluateTerm:
.9b37	b1 30		lda ($30),y			lda 	(codePtr),y
.9b39	30 18		bmi $9b53			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9b3b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9b3d	b0 6f		bcs $9bae			bcs 	_ETVariable
.9b3f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9b41	90 6e		bcc $9bb1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9b43	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b45	b0 6a		bcs $9bb1			bcs 	_ETPuncUnary
.9b47	20 15 9a	jsr $9a15			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9b4a					_ETNumber:
.9b4a	c8		iny				iny 								; keep encoding until we have the numbers
.9b4b	b1 30		lda ($30),y			lda 	(codePtr),y
.9b4d	20 18 9a	jsr $9a18			jsr 	EncodeNumberContinue
.9b50	b0 f8		bcs $9b4a			bcs 	_ETNumber 					; go back if accepted.
.9b52	60		rts				rts
.9b53					_ETCheckUnary:
.9b53	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b55	f0 41		beq $9b98			beq 	_ETString
.9b57	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b59	f0 12		beq $9b6d			beq 	_ETHexConstant
.9b5b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b5d	90 0b		bcc $9b6a			bcc 	_ETSyntaxError
.9b5f	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9b61	b0 07		bcs $9b6a			bcs 	_ETSyntaxError
.9b63	da		phx				phx 								; push X on the stack
.9b64	0a		asl a				asl 	a 							; put vector x 2 into X
.9b65	aa		tax				tax
.9b66	c8		iny				iny 								; consume unary function token
.9b67	7c 24 91	jmp ($9124,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b6a					_ETSyntaxError:
.9b6a	4c 7c ad	jmp $ad7c			jmp 	SyntaxError
.9b6d					_ETHexConstant:
.9b6d	c8		iny				iny 								; skip #
.9b6e	c8		iny				iny 								; skip count
.9b6f	20 15 a0	jsr $a015			jsr 	NSMSetZero 					; clear result
.9b72					_ETHLoop:
.9b72	b1 30		lda ($30),y			lda 	(codePtr),y
.9b74	c8		iny				iny 								; and consume
.9b75	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b77	f0 1e		beq $9b97			beq 	_ETHExit
.9b79	48		pha				pha 								; save on stack.
.9b7a	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; x 2
.9b7d	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; x 4
.9b80	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; x 8
.9b83	20 2a a0	jsr $a02a			jsr 	NSMShiftLeft 				; x 16
.9b86	68		pla				pla 								; ASCII
.9b87	c9 41		cmp #$41			cmp 	#'A'
.9b89	90 02		bcc $9b8d			bcc 	_ETHNotChar
.9b8b	e9 07		sbc #$07			sbc 	#7
.9b8d					_ETHNotChar:
.9b8d	29 0f		and #$0f			and 	#15 						; digit now
.9b8f	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9b92	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b95	80 db		bra $9b72			bra 	_ETHLoop 					; go round.
.9b97					_ETHExit:
.9b97	60		rts				rts
.9b98					_ETString:
.9b98	c8		iny				iny 								; look at length
.9b99	b1 30		lda ($30),y			lda 	(codePtr),y
.9b9b	48		pha				pha
.9b9c	c8		iny				iny 								; first character
.9b9d	20 5f a0	jsr $a05f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9ba0	68		pla				pla 								; restore count and save
.9ba1	85 36		sta $36				sta 	zTemp0
.9ba3	98		tya				tya 								; add length to Y to skip it.
.9ba4	18		clc				clc
.9ba5	65 36		adc $36				adc 	zTemp0
.9ba7	a8		tay				tay
.9ba8	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9baa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bad	60		rts				rts
.9bae					_ETVariable:
.9bae	4c 08 9c	jmp $9c08			jmp 	VariableHandler
.9bb1					_ETPuncUnary:
.9bb1	c8		iny				iny 								; consume the unary character
.9bb2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9bb4	f0 2d		beq $9be3			beq 	_ETUnaryNegate
.9bb6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9bb8	f0 39		beq $9bf3			beq 	_ETDereference
.9bba	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9bbc	f0 43		beq $9c01			beq 	_ETParenthesis
.9bbe	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9bc0	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9bc2	f0 06		beq $9bca			beq 	_ETIndirection
.9bc4	e6 36		inc $36				inc 	zTemp0
.9bc6	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9bc8	d0 a0		bne $9b6a			bne 	_ETSyntaxError
.9bca					_ETIndirection:
.9bca	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9bcc	1a		inc a				inc 	a
.9bcd	48		pha				pha
.9bce	20 37 9b	jsr $9b37			jsr 	EvaluateTerm				; evaluate the term
.9bd1	20 7b 99	jsr $997b			jsr 	Dereference 				; dereference it.
.9bd4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9bd7	d0 07		bne $9be0			bne 	_ETTypeMismatch
.9bd9	68		pla				pla 								; indirection 1-2
.9bda	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9bdc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bdf	60		rts				rts
.9be0					_ETTypeMismatch:
.9be0	4c 86 ad	jmp $ad86			jmp 	TypeError
.9be3					_ETUnaryNegate:
.9be3	20 37 9b	jsr $9b37			jsr 	EvaluateTerm				; evaluate the term
.9be6	20 7b 99	jsr $997b			jsr 	Dereference 				; dereference it.
.9be9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9bec	29 10		and #$10			and 	#NSTString
.9bee	d0 f0		bne $9be0			bne 	_ETTypeMismatch
.9bf0	4c c1 9f	jmp $9fc1			jmp 	NSMNegate  					; just toggles the sign bit.
.9bf3					_ETDereference:
.9bf3	20 37 9b	jsr $9b37			jsr 	EvaluateTerm				; evaluate the term
.9bf6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9bf9	29 20		and #$20			and 	#NSBIsReference
.9bfb	f0 e3		beq $9be0			beq 	_ETTypeMismatch
.9bfd	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9c00	60		rts				rts
.9c01					_ETParenthesis:
.9c01	20 66 98	jsr $9866			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9c04	20 96 a7	jsr $a796			jsr 	CheckRightBracket 			; check for )
.9c07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9c08					VariableHandler:
.9c08	b1 30		lda ($30),y			lda 	(codePtr),y
.9c0a	18		clc				clc
.9c0b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9c0d	85 37		sta $37				sta 	zTemp0+1
.9c0f	c8		iny				iny
.9c10	b1 30		lda ($30),y			lda 	(codePtr),y
.9c12	85 36		sta $36				sta 	zTemp0
.9c14	c8		iny				iny
.9c15	18		clc				clc									; copy variable address+3 to mantissa
.9c16	69 03		adc #$03			adc 	#3
.9c18	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c1b	a5 37		lda $37				lda 	zTemp0+1
.9c1d	69 00		adc #$00			adc 	#0
.9c1f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c22	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9c25	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9c28	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9c2b	5a		phy				phy
.9c2c	a0 02		ldy #$02			ldy 	#2 							; read type
.9c2e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c30	7a		ply				ply
.9c31	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9c33	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9c35	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c38	29 04		and #$04			and 	#NSBIsArray
.9c3a	d0 01		bne $9c3d			bne 	_VHArray
.9c3c	60		rts				rts
.9c3d					_VHArray:
.9c3d	e8		inx				inx
.9c3e	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9c41	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9c43	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c46	b1 30		lda ($30),y			lda 	(codePtr),y
.9c48	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9c4a	d0 06		bne $9c52			bne 	_VHNoSecondIndex
.9c4c	c8		iny				iny 								; skip the comma
.9c4d	e8		inx				inx
.9c4e	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c51	ca		dex				dex
.9c52					_VHNoSecondIndex:
.9c52	ca		dex				dex 								; set X back.
.9c53	20 96 a7	jsr $a796			jsr 	CheckRightBracket 			; and check the right bracket.
.9c56	5a		phy				phy 								; save position
.9c57	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9c5a	85 3e		sta $3e				sta 	zaTemp
.9c5c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c5f	85 3f		sta $3f				sta 	zaTemp+1
.9c61	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c63	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c65	f0 02		beq $9c69			beq 	_VHHas2Mask
.9c67	a9 ff		lda #$ff			lda 	#$FF
.9c69					_VHHas2Mask:
.9c69	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c6c	f0 54		beq $9cc2			beq 	_VHBadIndex
.9c6e	0a		asl a				asl 	a 							; carry will be set if a second index
.9c6f	90 09		bcc $9c7a			bcc 	_VHCheckFirstIndex
.9c71	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c73	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c75	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9c78	90 48		bcc $9cc2			bcc 	_VHBadIndex
.9c7a					_VHCheckFirstIndex:
.9c7a	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c7c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c7e	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9c81	90 3f		bcc $9cc2			bcc 	_VHBadIndex
.9c83	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9c85	64 37		stz $37				stz 	zTemp0+1
.9c87	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9c8a	30 0f		bmi $9c9b			bmi 	_VHNoMultiply
.9c8c	da		phx				phx
.9c8d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9c90	48		pha				pha
.9c91	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9c93	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c95	1a		inc a				inc 	a 							; add 1 for zero base
.9c96	fa		plx				plx
.9c97	20 18 ac	jsr $ac18			jsr 	Multiply8x8 				; calculate -> Z0
.9c9a	fa		plx				plx
.9c9b					_VHNoMultiply:
.9c9b	18		clc				clc
.9c9c	a5 36		lda $36				lda 	zTemp0
.9c9e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ca1	85 36		sta $36				sta 	zTemp0
.9ca3	a5 37		lda $37				lda 	zTemp0+1
.9ca5	69 00		adc #$00			adc 	#0
.9ca7	85 37		sta $37				sta 	zTemp0+1
.9ca9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9cac	20 88 8b	jsr $8b88			jsr 	ScaleByBaseType
.9caf	18		clc				clc
.9cb0	b2 3e		lda ($3e)			lda 	(zaTemp)
.9cb2	65 36		adc $36				adc 	zTemp0
.9cb4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cb7	a0 01		ldy #$01			ldy 	#1
.9cb9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cbb	65 37		adc $37				adc 	zTemp0+1
.9cbd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cc0	7a		ply				ply 								; restore position
.9cc1	60		rts				rts
.9cc2					_VHBadIndex:
.9cc2	a9 17		lda #$17		lda	#23
.9cc4	4c 5d 94	jmp $945d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ab4e					AbsUnary:
.ab4e	fa		plx				plx 								; restore stack pos
.ab4f	20 69 9f	jsr $9f69			jsr 	EvaluateNumber 				; get a float or int
.ab52	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.ab55	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.ab58	29 7f		and #$7f			and 	#$7F
.ab5a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab5d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9cc7					AllocUnary:
.9cc7	fa		plx				plx 								; restore stack pos
.9cc8	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger		; get bytes required.
.9ccb	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.9cce	da		phx				phx 								; save X/Y
.9ccf	5a		phy				phy
.9cd0	8a		txa				txa 								; copy X into Y
.9cd1	a8		tay				tay
.9cd2	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9cd5	aa		tax				tax
.9cd6	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9cd9	20 e6 9c	jsr $9ce6			jsr 	AllocateXABytes 			; allocate memory
.9cdc	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9cdf	8a		txa				txa
.9ce0	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9ce3	7a		ply				ply
.9ce4	fa		plx				plx
.9ce5	60		rts				rts
.9ce6					AllocateXABytes:
.9ce6	5a		phy				phy
.9ce7	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9cea	84 36		sty $36				sty 	zTemp0
.9cec	5a		phy				phy
.9ced	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9cf0	84 37		sty $37				sty 	zTemp0+1
.9cf2	5a		phy				phy
.9cf3	18		clc				clc 								; add to low memory pointer
.9cf4	6d 8c 04	adc $048c			adc 	lowMemPtr
.9cf7	8d 8c 04	sta $048c			sta 	lowMemPtr
.9cfa	8a		txa				txa
.9cfb	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9cfe	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9d01	b0 2f		bcs $9d32			bcs 	CISSMemory
.9d03	20 24 9d	jsr $9d24			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9d06					_ClearMemory:
.9d06	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9d09	c5 36		cmp $36				cmp 	zTemp0
.9d0b	d0 07		bne $9d14			bne 	_CMClearNext
.9d0d	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9d10	c5 37		cmp $37				cmp 	zTemp0+1
.9d12	f0 0c		beq $9d20			beq 	_CMExit
.9d14					_CMClearNext:
.9d14	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9d16	92 36		sta ($36)			sta 	(zTemp0)
.9d18	e6 36		inc $36				inc 	zTemp0
.9d1a	d0 ea		bne $9d06			bne 	_ClearMemory
.9d1c	e6 37		inc $37				inc		zTemp0+1
.9d1e	80 e6		bra $9d06			bra 	_ClearMemory
.9d20					_CMExit:
.9d20	fa		plx				plx
.9d21	68		pla				pla
.9d22	7a		ply				ply
.9d23	60		rts				rts
.9d24					CheckIdentifierStringSpace:
.9d24	48		pha				pha
.9d25	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9d28	18		clc				clc
.9d29	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9d2b	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9d2e	b0 02		bcs $9d32			bcs 	CISSMemory
.9d30	68		pla				pla
.9d31	60		rts				rts
.9d32					CISSMemory:
.9d32	a9 06		lda #$06		lda	#6
.9d34	4c 5d 94	jmp $945d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ab5e					AscUnary:
.ab5e	fa		plx				plx 								; restore stack pos
.ab5f	20 74 9f	jsr $9f74			jsr 	EvaluateString 				; get a string
.ab62	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.ab64	20 17 a0	jsr $a017			jsr 	NSMSetByte
.ab67	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.ab6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ab6b					FracUnary:
.ab6b	fa		plx				plx 								; restore stack pos
.ab6c	20 69 9f	jsr $9f69			jsr 	EvaluateNumber 				; get a float or int
.ab6f	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.ab72	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab75	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab77	f0 04		beq $ab7d			beq 	_IUZero
.ab79	20 3b aa	jsr $aa3b			jsr 	FloatFractionalPart
.ab7c	60		rts				rts
.ab7d					_IUZero:
.ab7d	20 15 a0	jsr $a015			jsr 	NSMSetZero
.ab80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ab81					IntUnary:
.ab81	fa		plx				plx 								; restore stack pos
.ab82	20 69 9f	jsr $9f69			jsr 	EvaluateNumber 				; get a float or int
.ab85	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.ab88	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab8b	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab8d	f0 03		beq $ab92			beq 	_IUExit
.ab8f	20 9e aa	jsr $aa9e			jsr 	FloatIntegerPart
.ab92					_IUExit:
.ab92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ab93					LenUnary:
.ab93	fa		plx				plx 								; restore stack pos
.ab94	20 74 9f	jsr $9f74			jsr 	EvaluateString 				; get a string
.ab97	5a		phy				phy
.ab98	a0 00		ldy #$00			ldy 	#0 							; find length
.ab9a					_LenFind:
.ab9a	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab9c	f0 06		beq $aba4			beq 	_LenExit
.ab9e	c8		iny				iny
.ab9f	d0 f9		bne $ab9a			bne 	_LenFind
.aba1	4c 81 ad	jmp $ad81			jmp 	RangeError 					; string > 255
.aba4					_LenExit:
.aba4	98		tya				tya
.aba5	20 17 a0	jsr $a017			jsr 	NSMSetByte
.aba8	7a		ply				ply
.aba9	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.abac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9d37					Unary_Not:
.9d37	fa		plx				plx
.9d38	20 8c 9f	jsr $9f8c			jsr 	EvaluateInteger 			; get integer
.9d3b	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.9d3e	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; zero mantissa ?
.9d41	f0 04		beq $9d47			beq 	_NotZero
.9d43	20 15 a0	jsr $a015			jsr 	NSMSetZero
.9d46	60		rts				rts
.9d47					_NotZero:
.9d47	4c ca 94	jmp $94ca			jmp 	ReturnTrue
.9d4a					_UNBad:
.9d4a	4c 8b ad	jmp $ad8b			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9d4d					Unary_Random:
.9d4d	fa		plx				plx
.9d4e	20 c6 9d	jsr $9dc6			jsr 	Random32Bit 				; get a random number
.9d51	20 ab 9d	jsr $9dab			jsr 	URCopyToMantissa  			; put in mantissa
.9d54	e8		inx				inx
.9d55	20 a1 9f	jsr $9fa1			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d58	ca		dex				dex
.9d59	20 1a a8	jsr $a81a			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9d5c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9d5f	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9d62	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.9d65	60		rts				rts
.9d66					Unary_Rnd:
.9d66	fa		plx				plx
.9d67	20 69 9f	jsr $9f69			jsr 	EvaluateNumber 				; number to use.
.9d6a	20 96 a7	jsr $a796			jsr 	CheckRightBracket 			; closing bracket
.9d6d	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d70	f0 2b		beq $9d9d			beq 	_URCopySeed
.9d72	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d75	10 23		bpl $9d9a			bpl 	_URDontSeed
.9d77	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d7a	49 17		eor #$17			eor 	#$17
.9d7c	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d7f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d82	49 a5		eor #$a5			eor 	#$A5
.9d84	8d 89 04	sta $0489			sta 	RandomSeed+1
.9d87	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9d8a	49 c2		eor #$c2			eor 	#$C2
.9d8c	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9d8f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9d92	49 9d		eor #$9d			eor 	#$9D
.9d94	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9d97	20 c6 9d	jsr $9dc6			jsr 	Random32Bit
.9d9a					_URDontSeed:
.9d9a	20 c6 9d	jsr $9dc6			jsr 	Random32Bit 				; generate a number.
.9d9d					_URCopySeed:
.9d9d	20 ab 9d	jsr $9dab			jsr 	URCopyToMantissa 			; copy into mantissa
.9da0	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9da2	8d 28 04	sta $0428			sta 	NSExponent
.9da5	a9 08		lda #$08			lda 	#NSTFloat
.9da7	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9daa	60		rts				rts
.9dab					URCopyToMantissa:
.9dab	ad 88 04	lda $0488			lda 	RandomSeed+0
.9dae	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db1	ad 89 04	lda $0489			lda 	RandomSeed+1
.9db4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9db7	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9dba	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dbd	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9dc0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9dc2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dc5	60		rts				rts
.9dc6					Random32Bit:
.9dc6	5a		phy				phy
.9dc7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9dc9	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9dcc	d0 03		bne $9dd1			bne 	_Random1
.9dce	a8		tay				tay 								; if so do it 256 times
.9dcf	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9dd1					_Random1:
.9dd1	0a		asl a				asl 	a 							; LSFR RNG
.9dd2	2e 89 04	rol $0489			rol 	RandomSeed+1
.9dd5	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9dd8	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9ddb	90 02		bcc $9ddf			bcc 	_Random2
.9ddd	49 c5		eor #$c5			eor 	#$C5
.9ddf					_Random2:
.9ddf	88		dey				dey
.9de0	d0 ef		bne $9dd1			bne 	_Random1
.9de2	8d 88 04	sta $0488			sta 	RandomSeed+0
.9de5	7a		ply				ply
.9de6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.abad					SgnUnary:
.abad	fa		plx				plx 								; restore stack pos
.abae	20 69 9f	jsr $9f69			jsr 	EvaluateNumber 				; get a float or int
.abb1	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.abb4	20 45 a0	jsr $a045			jsr 	NSMIsZero 					; if zero
.abb7	f0 10		beq $abc9			beq 	_SGZero  					; return Int Zero
.abb9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.abbc	48		pha				pha
.abbd	a9 01		lda #$01			lda 	#1 							; set to 1
.abbf	20 17 a0	jsr $a017			jsr 	NSMSetByte
.abc2	68		pla				pla
.abc3	29 80		and #$80			and		#$80 						; copy the sign byte out
.abc5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.abc8	60		rts				rts
.abc9	20 15 a0	jsr $a015	_SGZero:jsr 	NSMSetZero
.abcc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.abcd					ValUnary:
.abcd	fa		plx				plx 								; restore stack pos
.abce	20 e3 ab	jsr $abe3			jsr 	ValMainCode 				; do the main val() code
.abd1	b0 01		bcs $abd4			bcs 	_VUError 					; couldn't convert
.abd3	60		rts				rts
.abd4					_VUError:
.abd4	4c 86 ad	jmp $ad86			jmp 	TypeError
.abd7					IsValUnary:
.abd7	fa		plx				plx 								; restore stack pos
.abd8	20 e3 ab	jsr $abe3			jsr 	ValMainCode 				; do the main val() code
.abdb	b0 03		bcs $abe0			bcs 	_VUBad
.abdd	4c ca 94	jmp $94ca			jmp 	ReturnTrue
.abe0					_VUBad:
.abe0	4c d6 94	jmp $94d6			jmp 	ReturnFalse
.abe3					ValMainCode:
.abe3	20 74 9f	jsr $9f74			jsr 	EvaluateString 				; get a string
.abe6	20 96 a7	jsr $a796			jsr 	CheckRightBracket 			; check right bracket present
.abe9	5a		phy				phy
.abea	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.abec	f0 17		beq $ac05			beq 	_VMCFail2
.abee	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.abf0	48		pha				pha 								; save first character
.abf1	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.abf3	d0 01		bne $abf6			bne 	_VMCStart
.abf5	c8		iny				iny 								; skip over -
.abf6					_VMCStart:
.abf6	38		sec				sec 								; initialise first time round.
.abf7					_VMCNext:
.abf7	c8		iny				iny 								; pre-increment
.abf8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.abfa	f0 0c		beq $ac08			beq 	_VMCSuccess 				; successful.
.abfc	20 19 9a	jsr $9a19			jsr 	EncodeNumber 				; send it to the number-builder
.abff	90 03		bcc $ac04			bcc 	_VMCFail 					; if failed, give up.
.ac01	18		clc				clc 								; next time round, countinue
.ac02	80 f3		bra $abf7			bra 	_VMCNext
.ac04					_VMCFail:
.ac04	68		pla				pla
.ac05					_VMCFail2:
.ac05	7a		ply				ply
.ac06	38		sec				sec
.ac07	60		rts				rts
.ac08					_VMCSuccess:
.ac08	a9 00		lda #$00			lda 	#0 							; construct final
.ac0a	20 19 9a	jsr $9a19			jsr 	EncodeNumber
.ac0d	68		pla				pla
.ac0e	c9 2d		cmp #$2d			cmp 	#"-"
.ac10	d0 03		bne $ac15			bne 	_VMCNotNegative
.ac12	20 c1 9f	jsr $9fc1			jsr		NSMNegate
.ac15					_VMCNotNegative:
.ac15	7a		ply				ply
.ac16	18		clc				clc
.ac17	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9de7					ChrUnary:
.9de7	fa		plx				plx 								; restore stack pos
.9de8	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger			; get value
.9deb	48		pha				pha
.9dec	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.9def	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9df1	20 a3 b0	jsr $b0a3			jsr 	StringTempAllocate
.9df4	68		pla				pla 								; write number to it
.9df5	20 e1 b0	jsr $b0e1			jsr 	StringTempWrite
.9df8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9df9					SpcUnary:
.9df9	fa		plx				plx 								; restore stack pos
.9dfa	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger			; get value
.9dfd	5a		phy				phy
.9dfe	48		pha				pha 								; save count
.9dff	20 a3 b0	jsr $b0a3			jsr 	StringTempAllocate
.9e02	7a		ply				ply 								; to do count in Y
.9e03					_SpcLoop:
.9e03	c0 00		cpy #$00			cpy 	#0
.9e05	f0 08		beq $9e0f			beq 	_SpcExit
.9e07	a9 20		lda #$20			lda 	#32
.9e09	20 e1 b0	jsr $b0e1			jsr 	StringTempWrite
.9e0c	88		dey				dey
.9e0d	80 f4		bra $9e03			bra 	_SPCLoop
.9e0f					_SpcExit:
.9e0f	7a		ply				ply
.9e10	20 96 a7	jsr $a796			jsr 	CheckRightBracket
.9e13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e14					Unary_Str:
.9e14	fa		plx				plx
.9e15	20 69 9f	jsr $9f69			jsr 	EvaluateNumber  			; get number
.9e18	20 96 a7	jsr $a796			jsr 	CheckRightBracket 			; closing bracket
.9e1b	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9e1d	20 36 9e	jsr $9e36			jsr 	ConvertNumberToString 		; do the conversion.
.9e20	a9 21		lda #$21			lda		#33 						; create buffer
.9e22	20 a3 b0	jsr $b0a3			jsr 	StringTempAllocate 			; allocate memory
.9e25	da		phx				phx
.9e26	a2 00		ldx #$00			ldx 	#0
.9e28					_USCopy:
.9e28	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9e2b	20 e1 b0	jsr $b0e1			jsr 	StringTempWrite
.9e2e	e8		inx				inx
.9e2f	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9e32	d0 f4		bne $9e28			bne 	_USCopy
.9e34	fa		plx				plx
.9e35	60		rts				rts
.9e36					ConvertNumberToString:
.9e36	5a		phy				phy 								; save code position
.9e37	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9e3a	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9e3d	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9e40	10 0a		bpl $9e4c			bpl 	_CNTSNotNegative
.9e42	29 7f		and #$7f			and 	#$7F 						; make +ve
.9e44	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e47	a9 2d		lda #$2d			lda 	#"-"
.9e49	20 b2 9e	jsr $9eb2			jsr 	WriteDecimalBuffer
.9e4c					_CNTSNotNegative:
.9e4c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9e4f	f0 15		beq $9e66			beq 	_CNTSNotFloat
.9e51	e8		inx				inx 								; round up
.9e52	a9 01		lda #$01			lda 	#1
.9e54	20 17 a0	jsr $a017			jsr 	NSMSetByte
.9e57	ca		dex				dex
.9e58	bd 28 04	lda $0428,x			lda		NSExponent,x
.9e5b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9e5e	a9 08		lda #$08			lda 	#NSTFloat
.9e60	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9e63	20 5d a9	jsr $a95d			jsr 	FloatAdd
.9e66					_CNTSNotFloat:
.9e66	20 94 9e	jsr $9e94			jsr 	MakePlusTwoString
.9e69	20 3b aa	jsr $aa3b			jsr 	FloatFractionalPart 		; get the fractional part
.9e6c	20 ff aa	jsr $aaff			jsr 	NSNormalise					; normalise , exit if zero
.9e6f	f0 21		beq $9e92			beq 	_CNTSExit
.9e71	a9 2e		lda #$2e			lda 	#"."
.9e73	20 b2 9e	jsr $9eb2			jsr 	WriteDecimalBuffer 			; write decimal place
.9e76					_CNTSDecimal:
.9e76	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9e79	30 17		bmi $9e92			bmi 	_CNTSExit
.9e7b	e8		inx				inx 								; x 10.0
.9e7c	a9 0a		lda #$0a			lda 	#10
.9e7e	20 17 a0	jsr $a017			jsr 	NSMSetByte
.9e81	a9 08		lda #$08			lda 	#NSTFloat
.9e83	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e86	ca		dex				dex
.9e87	20 c8 aa	jsr $aac8			jsr 	FloatMultiply
.9e8a	20 94 9e	jsr $9e94			jsr 	MakePlusTwoString
.9e8d	20 3b aa	jsr $aa3b			jsr 	FloatFractionalPart 		; get the fractional part
.9e90	80 e4		bra $9e76			bra 	_CNTSDecimal 				; keep going.
.9e92					_CNTSExit:
.9e92	7a		ply				ply
.9e93	60		rts				rts
.9e94					MakePlusTwoString:
.9e94	da		phx				phx
.9e95	20 ec 9f	jsr $9fec			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9e98	e8		inx				inx 								; access it
.9e99	e8		inx				inx
.9e9a	20 9e aa	jsr $aa9e			jsr 	FloatIntegerPart 			; make it an integer
.9e9d	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9e9f	20 07 a9	jsr $a907			jsr 	ConvertInt32
.9ea2	a2 00		ldx #$00			ldx	 	#0
.9ea4					_MPTSCopy:
.9ea4	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9ea7	20 b2 9e	jsr $9eb2			jsr 	WriteDecimalBuffer
.9eaa	e8		inx				inx
.9eab	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9eae	d0 f4		bne $9ea4			bne 	_MPTSCopy
.9eb0	fa		plx				plx
.9eb1	60		rts				rts
.9eb2					WriteDecimalBuffer:
.9eb2	da		phx				phx
.9eb3	ae 95 04	ldx $0495			ldx 	dbOffset
.9eb6	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9eb9	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9ebc	ee 95 04	inc $0495			inc 	dbOffset
.9ebf	fa		plx				plx
.9ec0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9ec1					Unary_Left:
.9ec1	fa		plx				plx
.9ec2	18		clc				clc 								; only one parameter
.9ec3	20 38 9f	jsr $9f38			jsr 	SubstringInitial 			; set up.
.9ec6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9ec9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ecc	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ecf	80 2c		bra $9efd			bra 	SubstringMain
.9ed1					Unary_Right:
.9ed1	fa		plx				plx
.9ed2	18		clc				clc 								; only one parameter
.9ed3	20 38 9f	jsr $9f38			jsr 	SubstringInitial 			; set up.
.9ed6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9ed9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9edc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9edf	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9ee2	b0 02		bcs $9ee6			bcs 	_URNotUnderflow
.9ee4	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ee6					_URNotUnderFlow:
.9ee6	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ee9	80 12		bra $9efd			bra 	SubStringMain
.9eeb					Unary_Mid:
.9eeb	fa		plx				plx
.9eec	38		sec				sec 								; two parameters
.9eed	20 38 9f	jsr $9f38			jsr 	SubstringInitial 			; set up.
.9ef0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ef3	f0 05		beq $9efa			beq 	_UMError
.9ef5	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ef8	80 03		bra $9efd			bra 	SubStringMain
.9efa					_UMError:
.9efa	4c 8b ad	jmp $ad8b			jmp 	ArgumentError
.9efd					SubStringMain:
.9efd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9f00	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9f03	b0 2d		bcs $9f32			bcs 	_SSMNull 					; if so, return an empty string.
.9f05	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9f08	f0 28		beq $9f32			beq 	_SSMNull 					; return empty string.
.9f0a	18		clc				clc 								; add the offset +1 to the address and
.9f0b	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9f0e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9f11	85 36		sta $36				sta 	zTemp0
.9f13	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9f16	69 00		adc #$00			adc 	#0
.9f18	85 37		sta $37				sta 	zTemp0+1
.9f1a					_SSMNoCarry:
.9f1a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f1d	20 a3 b0	jsr $b0a3			jsr 	StringTempAllocate 			; allocate that many characters
.9f20	5a		phy				phy 								; save Y
.9f21	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f23					_SSMCopy:
.9f23	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f25	f0 09		beq $9f30			beq 	_SSMEString 				; no more to copy
.9f27	20 e1 b0	jsr $b0e1			jsr 	StringTempWrite 			; and write it out.
.9f2a	c8		iny				iny
.9f2b	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9f2e	d0 f3		bne $9f23			bne 	_SSMCopy
.9f30					_SSMEString:
.9f30	7a		ply				ply
.9f31					_SSMExit:
.9f31	60		rts				rts
.9f32					_SSMNull:
.9f32	a9 00		lda #$00			lda 	#0
.9f34	20 a3 b0	jsr $b0a3			jsr 	StringTempAllocate
.9f37	60		rts				rts
.9f38					SubstringInitial:
.9f38	da		phx				phx 								; save initial stack position
.9f39	08		php				php 								; save carry on stack indicating 2 parameters
.9f3a	20 74 9f	jsr $9f74			jsr 	EvaluateString 				; get a string
.9f3d	5a		phy				phy 								; calculate length to exponent.
.9f3e	a0 ff		ldy #$ff			ldy 	#$FF
.9f40					_SIFindLength:
.9f40	c8		iny				iny
.9f41	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f43	d0 fb		bne $9f40			bne 	_SIFindLength
.9f45	98		tya				tya
.9f46	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f49	7a		ply				ply
.9f4a	e8		inx				inx
.9f4b	20 9e a7	jsr $a79e			jsr 	CheckComma 					; comma next
.9f4e	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger 		; get next parameter
.9f51	28		plp				plp 								; is it the last parameter ?
.9f52	90 07		bcc $9f5b			bcc 	_SSIExit 					; if so, exit.
.9f54	e8		inx				inx
.9f55	20 9e a7	jsr $a79e			jsr 	CheckComma 					; comma next
.9f58	20 ad 9f	jsr $9fad			jsr 	Evaluate8BitInteger 		; get last parameter
.9f5b					_SSIExit:
.9f5b	fa		plx				plx
.9f5c	20 96 a7	jsr $a796			jsr 	CheckRightBracket 			; check closing bracket
.9f5f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9f60					EvaluateValue:
.9f60	48		pha				pha
.9f61	20 66 98	jsr $9866			jsr		EvaluateExpression 			; expression
.9f64	20 7b 99	jsr $997b			jsr 	Dereference					; derefernce it
.9f67	68		pla				pla
.9f68	60		rts				rts
.9f69					EvaluateNumber:
.9f69	20 60 9f	jsr $9f60			jsr 	EvaluateValue 				; get a value
.9f6c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f6f	29 10		and #$10			and 	#NSBIsString
.9f71	d0 16		bne $9f89			bne 	HelperTypeError
.9f73	60		rts				rts
.9f74					EvaluateString:
.9f74	20 60 9f	jsr $9f60			jsr 	EvaluateValue 				; get a value
.9f77	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f7a	29 10		and #$10			and 	#NSBIsString
.9f7c	f0 0b		beq $9f89			beq 	HelperTypeError
.9f7e					CopyAddressToTemp0:
.9f7e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9f81	85 36		sta $36				sta 	zTemp0
.9f83	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f86	85 37		sta $37				sta 	zTemp0+1
.9f88	60		rts				rts
.9f89					HelperTypeError:
.9f89	4c 86 ad	jmp $ad86			jmp 	TypeError
.9f8c					EvaluateInteger:
.9f8c	20 69 9f	jsr $9f69			jsr 	EvaluateNumber
.9f8f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9f92	d0 0a		bne $9f9e			bne 	HelperValueError 			; if not, it's a float.
.9f94	60		rts				rts
.9f95					EvaluateUnsignedInteger:
.9f95	20 8c 9f	jsr $9f8c			jsr 	EvaluateInteger 			; check integer is +ve
.9f98	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f9b	30 01		bmi $9f9e			bmi 	HelperValueError
.9f9d	60		rts				rts
.9f9e					HelperValueError:
.9f9e	4c 8b ad	jmp $ad8b			jmp 	ArgumentError
.9fa1					Evaluate16BitInteger:
.9fa1	20 95 9f	jsr $9f95			jsr	 	EvaluateUnsignedInteger		; get integer
.9fa4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9fa7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9faa	d0 f2		bne $9f9e			bne 	HelperValueError
.9fac	60		rts				rts
.9fad					Evaluate8BitInteger:
.9fad	20 95 9f	jsr $9f95			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9fb0	d0 ec		bne $9f9e			bne 	HelperValueError
.9fb2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9fb5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9fb8	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9fbb	d0 e1		bne $9f9e			bne 	HelperValueError
.9fbd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ac18					Multiply8x8:
.ac18	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ac19	85 36		sta $36			  	sta 	zTemp0
.ac1b	86 37		stx $37				stx 	zTemp0+1
.ac1d	a9 00		lda #$00			lda 	#0
.ac1f	a2 08		ldx #$08			ldx 	#8
.ac21					_M88Loop:
.ac21	90 03		bcc $ac26			bcc 	_M88NoAdd
.ac23	18		clc				clc
.ac24	65 37		adc $37				adc 	zTemp0+1
.ac26					_M88NoAdd:
.ac26	6a		ror a				ror 	a
.ac27	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ac29	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ac2a	d0 f5		bne $ac21			bne 	_M88Loop
.ac2c	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ac2e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9fc1					NSMNegate:
.9fc1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9fc4	49 80		eor #$80			eor 	#NSBIsNegative
.9fc6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fc9	60		rts				rts
.9fca					NSMNegateMantissa:
.9fca	38		sec				sec
.9fcb	a9 00		lda #$00			lda 	#0
.9fcd	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9fd0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fd3	a9 00		lda #$00			lda 	#0
.9fd5	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9fd8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fdb	a9 00		lda #$00			lda 	#0
.9fdd	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9fe0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fe3	a9 00		lda #$00			lda 	#0
.9fe5	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9fe8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9feb	60		rts				rts
.9fec					NSMShiftUpTwo:
.9fec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fef	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ff2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ff5	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ff8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9ffb	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9ffe	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a001	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a004	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a007	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a00a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a00d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a010	60		rts				rts
.a011					NSMSetZeroMantissaOnly:
.a011	a9 00		lda #$00			lda 	#0
.a013	80 08		bra $a01d			bra 	NSMSetMantissa
.a015					NSMSetZero:
.a015	a9 00		lda #$00			lda 	#0
.a017					NSMSetByte:
.a017	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a01a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a01d					NSMSetMantissa:
.a01d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a020	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a023	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a026	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a029	60		rts				rts
.a02a					NSMShiftLeft:
.a02a	18		clc				clc
.a02b					NSMRotateLeft:
.a02b	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a02e	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a031	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a034	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a037	60		rts				rts
.a038					NSMShiftRight:
.a038	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a03b	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a03e	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a041	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a044	60		rts				rts
.a045					NSMIsZero:
.a045	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a048	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a04b	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a04e	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a051	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ac2f					Assemble_ora:
.ac2f	20 87 87	jsr $8787		jsr	AssembleGroup1
>ac32	01					.byte $01
.ac33					Assemble_and:
.ac33	20 87 87	jsr $8787		jsr	AssembleGroup1
>ac36	21					.byte $21
.ac37					Assemble_eor:
.ac37	20 87 87	jsr $8787		jsr	AssembleGroup1
>ac3a	41					.byte $41
.ac3b					Assemble_adc:
.ac3b	20 87 87	jsr $8787		jsr	AssembleGroup1
>ac3e	61					.byte $61
.ac3f					Assemble_sta:
.ac3f	20 87 87	jsr $8787		jsr	AssembleGroup1
>ac42	81					.byte $81
.ac43					Assemble_lda:
.ac43	20 87 87	jsr $8787		jsr	AssembleGroup1
>ac46	a1					.byte $a1
.ac47					Assemble_cmp:
.ac47	20 87 87	jsr $8787		jsr	AssembleGroup1
>ac4a	c1					.byte $c1
.ac4b					Assemble_sbc:
.ac4b	20 87 87	jsr $8787		jsr	AssembleGroup1
>ac4e	e1					.byte $e1
.ac4f					Assemble_asl:
.ac4f	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac52	02					.byte $02
>ac53	75					.byte $75
.ac54					Assemble_rol:
.ac54	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac57	22					.byte $22
>ac58	75					.byte $75
.ac59					Assemble_lsr:
.ac59	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac5c	42					.byte $42
>ac5d	75					.byte $75
.ac5e					Assemble_ror:
.ac5e	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac61	62					.byte $62
>ac62	75					.byte $75
.ac63					Assemble_stx:
.ac63	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac66	82					.byte $82
>ac67	50					.byte $50
.ac68					Assemble_ldx:
.ac68	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac6b	a2					.byte $a2
>ac6c	d0					.byte $d0
.ac6d					Assemble_dec:
.ac6d	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac70	c2					.byte $c2
>ac71	55					.byte $55
.ac72					Assemble_inc:
.ac72	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac75	e2					.byte $e2
>ac76	55					.byte $55
.ac77					Assemble_stz:
.ac77	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac7a	60					.byte $60
>ac7b	44					.byte $44
.ac7c					Assemble_bit:
.ac7c	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac7f	20					.byte $20
>ac80	55					.byte $55
.ac81					Assemble_sty:
.ac81	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac84	80					.byte $80
>ac85	54					.byte $54
.ac86					Assemble_ldy:
.ac86	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac89	a0					.byte $a0
>ac8a	d5					.byte $d5
.ac8b					Assemble_cpy:
.ac8b	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac8e	c0					.byte $c0
>ac8f	d4					.byte $d4
.ac90					Assemble_cpx:
.ac90	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac93	e0					.byte $e0
>ac94	d0					.byte $d0
.ac95					Assemble_tsb:
.ac95	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac98	00					.byte $00
>ac99	50					.byte $50
.ac9a					Assemble_trb:
.ac9a	20 8e 87	jsr $878e		jsr	AssembleGroup2
>ac9d	10					.byte $10
>ac9e	50					.byte $50
.ac9f					Assemble_jsr:
.ac9f	20 8e 87	jsr $878e		jsr	AssembleGroup2
>aca2	14					.byte $14
>aca3	10					.byte $10
.aca4					Assemble_jmp:
.aca4	20 8e 87	jsr $878e		jsr	AssembleGroup2
>aca7	40					.byte $40
>aca8	10					.byte $10
.aca9					Assemble_bpl:
.aca9	20 df 87	jsr $87df		jsr	AssembleGroup3
>acac	10					.byte $10
.acad					Assemble_bmi:
.acad	20 df 87	jsr $87df		jsr	AssembleGroup3
>acb0	30					.byte $30
.acb1					Assemble_bvc:
.acb1	20 df 87	jsr $87df		jsr	AssembleGroup3
>acb4	50					.byte $50
.acb5					Assemble_bvs:
.acb5	20 df 87	jsr $87df		jsr	AssembleGroup3
>acb8	70					.byte $70
.acb9					Assemble_bcc:
.acb9	20 df 87	jsr $87df		jsr	AssembleGroup3
>acbc	90					.byte $90
.acbd					Assemble_bcs:
.acbd	20 df 87	jsr $87df		jsr	AssembleGroup3
>acc0	b0					.byte $b0
.acc1					Assemble_bne:
.acc1	20 df 87	jsr $87df		jsr	AssembleGroup3
>acc4	d0					.byte $d0
.acc5					Assemble_beq:
.acc5	20 df 87	jsr $87df		jsr	AssembleGroup3
>acc8	f0					.byte $f0
.acc9					Assemble_bra:
.acc9	20 df 87	jsr $87df		jsr	AssembleGroup3
>accc	80					.byte $80
.accd					Assemble_brk:
.accd	20 15 88	jsr $8815		jsr	AssembleGroup4
>acd0	00					.byte $00
.acd1					Assemble_php:
.acd1	20 15 88	jsr $8815		jsr	AssembleGroup4
>acd4	08					.byte $08
.acd5					Assemble_clc:
.acd5	20 15 88	jsr $8815		jsr	AssembleGroup4
>acd8	18					.byte $18
.acd9					Assemble_plp:
.acd9	20 15 88	jsr $8815		jsr	AssembleGroup4
>acdc	28					.byte $28
.acdd					Assemble_sec:
.acdd	20 15 88	jsr $8815		jsr	AssembleGroup4
>ace0	38					.byte $38
.ace1					Assemble_rti:
.ace1	20 15 88	jsr $8815		jsr	AssembleGroup4
>ace4	40					.byte $40
.ace5					Assemble_pha:
.ace5	20 15 88	jsr $8815		jsr	AssembleGroup4
>ace8	48					.byte $48
.ace9					Assemble_cli:
.ace9	20 15 88	jsr $8815		jsr	AssembleGroup4
>acec	58					.byte $58
.aced					Assemble_phy:
.aced	20 15 88	jsr $8815		jsr	AssembleGroup4
>acf0	5a					.byte $5a
.acf1					Assemble_rts:
.acf1	20 15 88	jsr $8815		jsr	AssembleGroup4
>acf4	60					.byte $60
.acf5					Assemble_pla:
.acf5	20 15 88	jsr $8815		jsr	AssembleGroup4
>acf8	68					.byte $68
.acf9					Assemble_sei:
.acf9	20 15 88	jsr $8815		jsr	AssembleGroup4
>acfc	78					.byte $78
.acfd					Assemble_ply:
.acfd	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad00	7a					.byte $7a
.ad01					Assemble_dey:
.ad01	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad04	88					.byte $88
.ad05					Assemble_txa:
.ad05	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad08	8a					.byte $8a
.ad09					Assemble_tya:
.ad09	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad0c	98					.byte $98
.ad0d					Assemble_txs:
.ad0d	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad10	9a					.byte $9a
.ad11					Assemble_tay:
.ad11	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad14	a8					.byte $a8
.ad15					Assemble_tax:
.ad15	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad18	aa					.byte $aa
.ad19					Assemble_clv:
.ad19	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad1c	b8					.byte $b8
.ad1d					Assemble_tsx:
.ad1d	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad20	ba					.byte $ba
.ad21					Assemble_iny:
.ad21	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad24	c8					.byte $c8
.ad25					Assemble_dex:
.ad25	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad28	ca					.byte $ca
.ad29					Assemble_cld:
.ad29	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad2c	d8					.byte $d8
.ad2d					Assemble_phx:
.ad2d	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad30	da					.byte $da
.ad31					Assemble_stp:
.ad31	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad34	db					.byte $db
.ad35					Assemble_inx:
.ad35	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad38	e8					.byte $e8
.ad39					Assemble_nop:
.ad39	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad3c	ea					.byte $ea
.ad3d					Assemble_sed:
.ad3d	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad40	f8					.byte $f8
.ad41					Assemble_plx:
.ad41	20 15 88	jsr $8815		jsr	AssembleGroup4
>ad44	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ad45					DecimalScalarTable:
>ad45	66 66 66 66				.dword $66666666 ; 0.1
>ad49	de					.byte $de
>ad4a	1f 85 eb 51				.dword $51eb851f ; 0.01
>ad4e	db					.byte $db
>ad4f	4c 37 89 41				.dword $4189374c ; 0.001
>ad53	d8					.byte $d8
>ad54	ac 8b db 68				.dword $68db8bac ; 0.0001
>ad58	d4					.byte $d4
>ad59	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ad5d	d1					.byte $d1
>ad5e	83 de 1b 43				.dword $431bde83 ; 1e-06
>ad62	ce					.byte $ce
>ad63	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ad67	ca					.byte $ca
>ad68	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ad6c	c7					.byte $c7
>ad6d	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ad71	c4					.byte $c4
>ad72	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ad76	c0					.byte $c0
>ad77	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ad7b	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ad7c					SyntaxError:
.ad7c	a9 02		lda #$02		lda	#2
.ad7e	4c 5d 94	jmp $945d		jmp	ErrorHandler
.ad81					RangeError:
.ad81	a9 04		lda #$04		lda	#4
.ad83	4c 5d 94	jmp $945d		jmp	ErrorHandler
.ad86					TypeError:
.ad86	a9 05		lda #$05		lda	#5
.ad88	4c 5d 94	jmp $945d		jmp	ErrorHandler
.ad8b					ArgumentError:
.ad8b	a9 07		lda #$07		lda	#7
.ad8d	4c 5d 94	jmp $945d		jmp	ErrorHandler
.ad90					NotDoneError:
.ad90	a9 0c		lda #$0c		lda	#12
.ad92	4c 5d 94	jmp $945d		jmp	ErrorHandler
.ad95					ErrorText:
>ad95	42 72 65 61 6b 00			.text	"Break",0
>ad9b	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ada3	72 72 6f 72 00
>ada8	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>adb0	20 62 79 20 7a 65 72 6f 00
>adb9	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>adc1	61 6e 67 65 00
>adc6	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>adce	6d 61 74 63 68 00
>add4	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>addc	65 6d 6f 72 79 00
>ade2	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>adea	61 72 67 75 6d 65 6e 74 00
>adf3	53 74 6f 70 00				.text	"Stop",0
>adf8	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ae00	6f 6f 20 6c 6f 6e 67 00
>ae08	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ae10	6e 20 66 61 69 6c 65 64 00
>ae19	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ae21	61 74 61 00
>ae25	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ae2d	65 6e 74 65 64 00
>ae33	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ae3b	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ae47	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ae4f	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ae5c	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ae64	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ae71	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ae79	68 6f 75 74 20 57 68 69 6c 65 00
>ae84	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ae8c	68 6f 75 74 20 46 6f 72 00
>ae95	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ae9d	61 63 6b 20 66 75 6c 6c 00
>aea6	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>aeae	75 63 74 75 72 65 00
>aeb5	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>aebd	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>aeca	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>aed2	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>aee0	41 72 72 61 79 20 73 69			.text	"Array size",0
>aee8	7a 65 00
>aeeb	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>aef3	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>aefb	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1322."
>af03	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>af13	32 2e 20 42 75 69 6c 64 20 31 33 32 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.af21					EXTPrintCharacter:
.af21	48		pha				pha
.af22	da		phx				phx
.af23	5a		phy				phy
.af24	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.af27	7a		ply				ply
.af28	fa		plx				plx
.af29	68		pla				pla
.af2a	60		rts				rts
.af2b					EXTInputSingleCharacter:
.af2b	da		phx				phx
.af2c	5a		phy				phy
.af2d					_EISCWait:
.af2d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.af30	c9 00		cmp #$00			cmp 	#0
.af32	f0 f9		beq $af2d			beq 	_EISCWait
.af34	7a		ply				ply
.af35	fa		plx				plx
.af36	60		rts				rts
.af37					EXTInputLine:
.af37	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.af39					_ILLoop:
.af39	da		phx				phx 								; read character in
.af3a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.af3d	fa		plx				plx
.af3e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.af40	f0 12		beq $af54			beq 	_ILBackspace
.af42	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.af44	f0 15		beq $af5b			beq 	_ILExit
.af46	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.af48	90 ef		bcc $af39			bcc 	_ILLoop
.af4a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.af4c	f0 eb		beq $af39			beq 	_ILLoop
.af4e	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.af51	e8		inx				inx
.af52	80 e5		bra $af39			bra 	_ILLoop
.af54					_ILBackspace:
.af54	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.af56	f0 e1		beq $af39			beq 	_ILLoop
.af58	ca		dex				dex 								; back one.
.af59	80 de		bra $af39			bra 	_ILLoop
.af5b					_ILExit:
.af5b	20 21 af	jsr $af21			jsr 	EXTPrintCharacter
.af5e	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.af61	60		rts				rts
.af62					EXTBreakCheck:
.af62	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.af65					MemoryDeleteLine:
.af65	20 84 af	jsr $af84			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.af68	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.af6a	a8		tay				tay
.af6b					_MDDLLoop:
.af6b	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.af6d	92 30		sta ($30)			sta 	(codePtr)
.af6f	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.af71	c5 3a		cmp $3a				cmp 	zTemp2
.af73	d0 07		bne $af7c			bne 	_MDLDLNext
.af75	a5 31		lda $31				lda 	codePtr+1
.af77	c5 3b		cmp $3b				cmp 	zTemp2+1
.af79	d0 01		bne $af7c			bne 	_MDLDLNext
.af7b					_MDDLExit:
.af7b	60		rts				rts
.af7c					_MDLDLNext:
.af7c	e6 30		inc $30				inc 	codePtr						; next byte
.af7e	d0 eb		bne $af6b			bne 	_MDDLLoop
.af80	e6 31		inc $31				inc 	codePtr+1
.af82	80 e7		bra $af6b			bra 	_MDDLLoop
.af84					IMemoryFindEnd:
.af84	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af86	85 3a		sta $3a				sta 	0+zTemp2
.af88	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af8a	85 3b		sta $3b				sta 	1+zTemp2
.af8c					_MDLFELoop:
.af8c	b2 3a		lda ($3a)			lda 	(zTemp2)
.af8e	f0 0b		beq $af9b			beq 	_MDLFEExit
.af90	18		clc				clc
.af91	65 3a		adc $3a				adc 	zTemp2
.af93	85 3a		sta $3a				sta 	zTemp2
.af95	90 f5		bcc $af8c			bcc 	_MDLFELoop
.af97	e6 3b		inc $3b				inc 	zTemp2+1
.af99	80 f1		bra $af8c			bra 	_MDLFELoop
.af9b					_MDLFEExit:
.af9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.af9c					MemoryInsertLine:
.af9c	08		php				php
.af9d	20 84 af	jsr $af84			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.afa0	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.afa2	1a		inc a				inc 	a
.afa3	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.afa5	b0 36		bcs $afdd			bcs 	_MDLIError
.afa7	28		plp				plp
.afa8	90 08		bcc $afb2			bcc 	_MDLIFound
.afaa	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.afac	85 30		sta $30				sta 	codePtr
.afae	a5 3b		lda $3b				lda 	zTemp2+1
.afb0	85 31		sta $31				sta 	codePtr+1
.afb2					_MDLIFound:
.afb2	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.afb5	a8		tay				tay
.afb6					_MDLIInsert:
.afb6	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.afb8	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.afba	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.afbc	c5 3a		cmp $3a				cmp 	zTemp2
.afbe	d0 06		bne $afc6			bne 	_MDLINext
.afc0	a5 31		lda $31				lda 	codePtr+1
.afc2	c5 3b		cmp $3b				cmp 	zTemp2+1
.afc4	f0 0a		beq $afd0			beq 	_MDLIHaveSpace
.afc6					_MDLINext:
.afc6	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.afc8	d0 02		bne $afcc			bne 	_MDLINoBorrow
.afca	c6 3b		dec $3b				dec 	zTemp2+1
.afcc					_MDLINoBorrow:
.afcc	c6 3a		dec $3a				dec 	zTemp2
.afce	80 e6		bra $afb6			bra 	_MDLIInsert
.afd0					_MDLIHaveSpace:
.afd0	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.afd3	88		dey				dey 								; from offset-1 to 0
.afd4					_MDLICopy:
.afd4	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.afd7	91 30		sta ($30),y			sta 	(codePtr),y
.afd9	88		dey				dey
.afda	10 f8		bpl $afd4			bpl 	_MDLICopy
.afdc	60		rts				rts
.afdd					_MDLIError:
.afdd	a9 06		lda #$06		lda	#6
.afdf	4c 5d 94	jmp $945d		jmp	ErrorHandler
.afe2					MDLAppendLine:
.afe2	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.afe4	85 36		sta $36				sta 	zTemp0
.afe6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.afe8	85 38		sta $38				sta 	0+zTemp1
.afea	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.afec	85 39		sta $39				sta 	1+zTemp1
.afee	b2 38		lda ($38)			lda 	(zTemp1)
.aff0	d0 0a		bne $affc			bne 	_MDLANoInitialise
.aff2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aff4	8d 5d 06	sta $065d			sta 	0+AppendPointer
.aff7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aff9	8d 5e 06	sta $065e			sta 	1+AppendPointer
.affc					_MDLANoInitialise:
.affc	18		clc				clc
.affd	ad 5d 06	lda $065d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b000	85 38		sta $38				sta 	zTemp1
.b002	72 36		adc ($36)			adc 	(zTemp0)
.b004	8d 5d 06	sta $065d			sta 	AppendPointer
.b007	ad 5e 06	lda $065e			lda 	AppendPointer+1
.b00a	85 39		sta $39				sta 	zTemp1+1
.b00c	69 00		adc #$00			adc 	#0
.b00e	8d 5e 06	sta $065e			sta 	AppendPointer+1
.b011	a0 00		ldy #$00			ldy 	#0
.b013					_MDLACopy:
.b013	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b015	91 38		sta ($38),y			sta 	(zTemp1),y
.b017	c8		iny				iny
.b018	98		tya				tya
.b019	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b01b	d0 f6		bne $b013			bne 	_MDLACopy
.b01d	a9 00		lda #$00			lda 	#0 							; end of program.
.b01f	91 38		sta ($38),y			sta 	(zTemp1),y
.b021	60		rts				rts
.065d					AppendPointer:
>065d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a052					MemoryNew:
.a052	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a054	85 30		sta $30				sta 	codePtr
.a056	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a058	85 31		sta $31				sta 	codePtr+1
.a05a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a05c	92 30		sta ($30)			sta 	(codePtr)
.a05e	60		rts				rts
.a05f					MemoryInline:
.a05f	98		tya				tya 								; put address into stack,x
.a060	18		clc				clc
.a061	65 30		adc $30				adc 	codePtr
.a063	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a066	a5 31		lda $31				lda 	codePtr+1
.a068	69 00		adc #$00			adc 	#0
.a06a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a06d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a070	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a073	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a074					MemorySearch:
.a074	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a076	86 37		stx $37				stx 	zTemp0+1
.a078	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a07a	85 30		sta $30				sta 	codePtr
.a07c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a07e	85 31		sta $31				sta 	codePtr+1
.a080					_MTAXLoop:
.a080	b2 30		lda ($30)			lda 	(codePtr)
.a082	18		clc				clc
.a083	f0 21		beq $a0a6			beq 	_MTAXExit 					; reached end, exit with CC.
.a085	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a087	b1 30		lda ($30),y			lda 	(codePtr),y
.a089	38		sec				sec
.a08a	e5 36		sbc $36				sbc 	zTemp0
.a08c	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a08e	c8		iny				iny 								; do the MSB
.a08f	b1 30		lda ($30),y			lda 	(codePtr),y
.a091	e5 37		sbc $37				sbc 	zTemp0+1
.a093	05 38		ora $38				ora 	zTemp1
.a095	f0 0f		beq $a0a6			beq 	_MTAXExit	 				; found
.a097	b0 0d		bcs $a0a6			bcs 	_MTAXExit 					; current < required exit
.a099	18		clc				clc
.a09a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a09c	65 30		adc $30				adc 	codePtr
.a09e	85 30		sta $30				sta 	codePtr
.a0a0	90 02		bcc $a0a4			bcc 	_CREExit
.a0a2	e6 31		inc $31				inc 	codePtr+1
.a0a4					_CREExit:
.a0a4	80 da		bra $a080			bra 	_MTAXLoop
.a0a6					_MTAXExit:
.a0a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a0a7					StackPushByte:
.a0a7	48		pha				pha 								; save byte
.a0a8	a5 34		lda $34				lda 	BasicStack
.a0aa	d0 09		bne $a0b5			bne 	_SPBNoBorrow
.a0ac	c6 35		dec $35				dec 	BasicStack+1
.a0ae	48		pha				pha
.a0af	a5 35		lda $35				lda 	BasicStack+1
.a0b1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a0b3	90 06		bcc $a0bb			bcc 	_SPBMemory
.a0b5					_SPBNoBorrow:
.a0b5	c6 34		dec $34				dec 	BasicStack
.a0b7	68		pla				pla 								; get back and write
.a0b8	92 34		sta ($34)			sta 	(BasicStack)
.a0ba	60		rts				rts
.a0bb					_SPBMemory:
.a0bb	a9 12		lda #$12		lda	#18
.a0bd	4c 5d 94	jmp $945d		jmp	ErrorHandler
.a0c0					StackPopByte:
.a0c0	b2 34		lda ($34)			lda 	(BasicStack)
.a0c2	e6 34		inc $34				inc 	BasicStack
.a0c4	d0 02		bne $a0c8			bne 	_SPBNoCarry
.a0c6	e6 35		inc $35				inc 	BasicStack+1
.a0c8					_SPBNoCarry:
.a0c8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a0c9					StackOpen:
.a0c9	48		pha				pha 								; save frame byte
.a0ca	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a0cc	0a		asl a				asl 	a 							; claim twice this for storage
.a0cd	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a0cf	38		sec				sec 								; so basically subtracting from
.a0d0	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a0d2	85 34		sta $34				sta 	basicStack
.a0d4	b0 08		bcs $a0de			bcs 	_SONoBorrow
.a0d6	c6 35		dec $35				dec 	basicStack+1
.a0d8	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a0da	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a0dc	90 04		bcc $a0e2			bcc 	_SOMemory
.a0de					_SONoBorrow:
.a0de	68		pla				pla 								; get marker back and write at TOS
.a0df	92 34		sta ($34)			sta 	(basicStack)
.a0e1	60		rts				rts
.a0e2					_SOMemory:
.a0e2	a9 12		lda #$12		lda	#18
.a0e4	4c 5d 94	jmp $945d		jmp	ErrorHandler
.a0e7					StackClose:
.a0e7	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a0e9	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a0eb	0a		asl a				asl 	a 							; claim twice this.
.a0ec	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a0ee	85 34		sta $34				sta 	basicStack
.a0f0	90 02		bcc $a0f4			bcc 	_SCExit
.a0f2	e6 35		inc $35				inc 	basicStack+1
.a0f4					_SCExit:
.a0f4	60		rts				rts
.a0f5					StackCheckFrame:
.a0f5	48		pha				pha
.a0f6					_StackRemoveLocals:
.a0f6	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a0f8	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a0fa	b0 05		bcs $a101			bcs 	_SCNoLocal
.a0fc	20 3d a7	jsr $a73d			jsr 	LocalPopValue
.a0ff	80 f5		bra $a0f6			bra 	_StackRemoveLocals
.a101					_SCNoLocal:
.a101	68		pla				pla
.a102	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a104	29 f0		and #$f0			and 	#$F0 						; check type bits
.a106	d0 01		bne $a109			bne 	_SCFError 					; different, we have structures mixed up
.a108	60		rts				rts
.a109					_SCFError:
.a109	8a		txa				txa 								; report error X
.a10a	4c 5d 94	jmp $945d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a10d					STKSaveCodePosition:
.a10d	5a		phy				phy
.a10e	98		tya				tya 								; save Y
.a10f	a0 05		ldy #$05			ldy 	#5
.a111	91 34		sta ($34),y			sta 	(basicStack),y
.a113	88		dey				dey 								; save Code Pointer
.a114					_STKSaveLoop:
.a114	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a117	91 34		sta ($34),y			sta 	(basicStack),y
.a119	88		dey				dey
.a11a	d0 f8		bne $a114			bne 	_STKSaveLoop
.a11c	7a		ply				ply
.a11d	60		rts				rts
.a11e					STKLoadCodePosition:
.a11e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a120					_STKLoadLoop:
.a120	b1 34		lda ($34),y			lda 	(basicStack),y
.a122	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a125	c8		iny				iny
.a126	c0 05		cpy #$05			cpy 	#5
.a128	d0 f6		bne $a120			bne 	_STKLoadLoop
.a12a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a12c	a8		tay				tay
.a12d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a12e					StackReset:
.a12e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a130	85 34		sta $34				sta 	0+basicStack
.a132	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a134	85 35		sta $35				sta 	1+basicStack
.a136	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a138	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a13a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b022					StringConcrete:
.b022	5a		phy				phy 								; save position on stack
.b023	20 24 9d	jsr $9d24			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b026	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b029	85 38		sta $38				sta 	zTemp1
.b02b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b02e	85 39		sta $39				sta 	zTemp1+1
.b030	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b032					_SALength:
.b032	c8		iny				iny
.b033	b1 38		lda ($38),y			lda 	(zTemp1),y
.b035	d0 fb		bne $b032			bne 	_SALength
.b037	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b039	b0 3f		bcs $b07a			bcs 	_SALengthError
.b03b	98		tya				tya 				 				; length of the new string
.b03c	18		clc				clc
.b03d	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b03f	90 02		bcc $b043			bcc 	_SAHaveLength
.b041	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b043					_SAHaveLength:
.b043	48		pha				pha 								; save length.
.b044	38		sec				sec
.b045	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b047	6d 8e 04	adc $048e			adc 	StringMemory
.b04a	8d 8e 04	sta $048e			sta 	StringMemory
.b04d	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b04f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b052	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b054	6d 8f 04	adc $048f			adc 	StringMemory+1
.b057	8d 8f 04	sta $048f			sta 	StringMemory+1
.b05a	85 3b		sta $3b				sta 	zTemp2+1
.b05c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b05f	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b060	38		sec				sec
.b061	e9 03		sbc #$03			sbc 	#3
.b063	92 3a		sta ($3a)			sta 	(zTemp2)
.b065	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b067	a0 01		ldy #$01			ldy 	#1
.b069	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b06b					_SACopyNewString:
.b06b	a0 00		ldy #$00			ldy 	#0
.b06d					_SACopyNSLoop:
.b06d	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b06f	c8		iny				iny 								; write two on in string storage
.b070	c8		iny				iny
.b071	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b073	88		dey				dey 								; this makes it one one.
.b074	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b076	d0 f5		bne $b06d			bne 	_SACopyNSLoop
.b078	7a		ply				ply
.b079	60		rts				rts
.b07a					_SALengthError:
.b07a	a9 09		lda #$09		lda	#9
.b07c	4c 5d 94	jmp $945d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b07f					StringSystemInitialise:
.b07f	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b081	8d 8e 04	sta $048e			sta 	0+StringMemory
.b084	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b086	8d 8f 04	sta $048f			sta 	1+StringMemory
.b089	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b08c	60		rts				rts
.b08d					StringSpaceInitialise:
.b08d	20 24 9d	jsr $9d24			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b090	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b092	8d 90 04	sta $0490			sta 	StringInitialised
.b095	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b098	8d 91 04	sta $0491			sta 	StringTempPointer
.b09b	ad 8f 04	lda $048f			lda 	StringMemory+1
.b09e	3a		dec a				dec 	a
.b09f	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b0a2	60		rts				rts
.b0a3					StringTempAllocate:
.b0a3	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b0a5	b0 35		bcs $b0dc			bcs 	_STALength
.b0a7	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b0aa	30 05		bmi $b0b1			bmi 	_STAAllocate
.b0ac	48		pha				pha 								; save value to subtract.
.b0ad	20 8d b0	jsr $b08d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b0b0	68		pla				pla 								; restore it
.b0b1					_STAAllocate:
.b0b1	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b0b3	18		clc				clc  								; deliberate allows one more
.b0b4	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b0b7	8d 91 04	sta $0491			sta 	StringTempPointer
.b0ba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b0bd	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b0bf	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b0c2	69 ff		adc #$ff			adc 	#$FF
.b0c4	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b0c7	85 3d		sta $3d				sta 	zsTemp+1
.b0c9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b0cc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b0cf	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b0d2	a9 10		lda #$10			lda 	#NSTString
.b0d4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0d7	a9 00		lda #$00			lda 	#0 							; clear the target string
.b0d9	92 3c		sta ($3c)			sta 	(zsTemp)
.b0db	60		rts				rts
.b0dc					_STALength:
.b0dc	a9 09		lda #$09		lda	#9
.b0de	4c 5d 94	jmp $945d		jmp	ErrorHandler
.b0e1					StringTempWrite:
.b0e1	48		pha				pha
.b0e2	92 3c		sta ($3c)			sta 	(zsTemp)
.b0e4	e6 3c		inc $3c				inc 	zsTemp
.b0e6	d0 02		bne $b0ea			bne 	_STWNoCarry
.b0e8	e6 3d		inc $3d				inc 	zsTemp+1
.b0ea					_STWNoCarry:
.b0ea	a9 00		lda #$00			lda 	#0
.b0ec	92 3c		sta ($3c)			sta 	(zsTemp)
.b0ee	68		pla				pla
.b0ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a13b					BackloadProgram:
.a13b	a2 ff		ldx #$ff			ldx 	#$FF
.a13d	20 65 a1	jsr $a165			jsr 	BLReadByte
.a140	30 1f		bmi $a161			bmi 	_BPExit
.a142					_BPCopy:
.a142	e8		inx				inx  								; copy byte in
.a143	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a146	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a149	20 65 a1	jsr $a165			jsr 	BLReadByte 					; read next byte
.a14c	30 0a		bmi $a158			bmi 	_BPEndLine 					; -ve = EOL
.a14e	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a150	d0 02		bne $a154			bne 	_BPNotTab
.a152	a9 20		lda #$20			lda 	#' '
.a154					_BPNotTab:
.a154	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a156	b0 ea		bcs $a142			bcs 	_BPCopy
.a158					_BPEndLine:
.a158	20 8e a4	jsr $a48e			jsr 	TokeniseLine 				; tokenise the line.
.a15b	38		sec				sec 								; append not insert
.a15c	20 9c af	jsr $af9c			jsr 	MemoryInsertLine 			; append to current program
.a15f	80 da		bra $a13b			bra 	BackloadProgram
.a161					_BPExit:
.a161	20 8d 8a	jsr $8a8d			jsr 	ClearCommand 				; clear variables etc.
.a164	60		rts				rts
.a165					BLReadByte:
.a165					_BLLoad:
.a165	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a168	ee 66 a1	inc $a166			inc 	_BLLoad+1
.a16b	d0 03		bne $a170			bne 	_BLNoCarry
.a16d	ee 67 a1	inc $a167			inc 	_BLLoad+2
.a170					_BLNoCarry:
.a170	c9 00		cmp #$00			cmp 	#0
.a172	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a173					TokeniseSearchTable:
.a173	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a175	85 36		sta $36				sta 	zTemp0
.a177	a0 00		ldy #$00			ldy 	#0
.a179	a9 80		lda #$80			lda 	#$80 						; token #
.a17b	85 38		sta $38				sta 	zTemp1
.a17d					_TSTLoop:
.a17d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a17f	30 49		bmi $a1ca			bmi 	_TSTFail 					; -ve = end of table
.a181	f0 2e		beq $a1b1			beq 	_TSTNext 					; zero, check next it's a dummy
.a183	c8		iny				iny 								; get the hash
.a184	b1 36		lda ($36),y			lda 	(zTemp0),y
.a186	88		dey				dey
.a187	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a18a	d0 25		bne $a1b1			bne 	_TSTNext
.a18c	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a18f	38		sec				sec
.a190	ed 80 04	sbc $0480			sbc 	identStart
.a193	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a195	d0 1a		bne $a1b1			bne 	_TSTNext
.a197	5a		phy				phy 								; save Y , we might fail
.a198	c8		iny				iny 								; point to text
.a199	c8		iny				iny
.a19a	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a19d					_TSTCompareName:
.a19d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a1a0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a1a2	d0 0c		bne $a1b0			bne 	_TSTNextPullY 				; fail, pullY and do next
.a1a4	e8		inx				inx
.a1a5	c8		iny				iny
.a1a6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a1a9	d0 f2		bne $a19d			bne 	_TSTCompareName
.a1ab	7a		ply				ply 								; throw Y
.a1ac	a5 38		lda $38				lda 	zTemp1 						; get token #
.a1ae	38		sec				sec 								; return with CS = passed.
.a1af	60		rts				rts
.a1b0					_TSTNextPullY:
.a1b0	7a		ply				ply 								; restore current, fall through.
.a1b1					_TSTNext:
.a1b1	e6 38		inc $38				inc 	zTemp1 						; token counter
.a1b3	98		tya				tya
.a1b4	18		clc				clc
.a1b5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a1b7	1a		inc a				inc 	a 							; +1
.a1b8	1a		inc a				inc 	a 							; +2
.a1b9	a8		tay				tay
.a1ba	10 c1		bpl $a17d			bpl 	_TSTLoop 					; if Y < $80 loop back
.a1bc	98		tya				tya 								; add Y to zTemp0 and reset Y
.a1bd	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a1bf	18		clc				clc  								; but have tables > 255 bytes
.a1c0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a1c2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a1c4	90 b7		bcc $a17d			bcc 	_TSTLoop
.a1c6	e6 37		inc $37				inc 	zTemp0+1
.a1c8	80 b3		bra $a17d			bra 	_TSTLoop
.a1ca					_TSTFail:
.a1ca	18		clc				clc
.a1cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a1cc					KeywordSet0:
>a1cc	00 65					.text	0,$65,""               ; $80 !0:EOF
>a1ce	00 58					.text	0,$58,""               ; $81 !1:SH1
>a1d0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a1d2	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a1d8	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a1e0	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a1e6	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a1ed	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a1f4	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a1fb	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a201	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a209	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a211	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a217	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a21e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a224	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a22c	28
>a22d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a235	28
>a236	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a23c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a242	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a248	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a24f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a255	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a25b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a260	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a264	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a26a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a272	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a279	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a280	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a288	43
>a289	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a28f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a295	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a29c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a2a2	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a2a8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a2ad	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a2b3	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a2b8	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a2c0	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a2c6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a2cd	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a2d3	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a2d8	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a2df	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a2e6	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a2ec	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a2f1	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a2f9	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a2fd	ff					.text	$FF
.a2fe					KeywordSet1:
>a2fe	00 65					.text	0,$65,""               ; $80 !0:EOF
>a300	00 58					.text	0,$58,""               ; $81 !1:SH1
>a302	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a304	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a30c	4c 45
>a30e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a316	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a31d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a322	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a328	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a32d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a335	45
>a336	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a33b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a341	ff					.text	$FF
.a342					KeywordSet2:
>a342	00 65					.text	0,$65,""               ; $80 !0:EOF
>a344	00 58					.text	0,$58,""               ; $81 !1:SH1
>a346	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a348	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a34d	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a352	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a357	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a35c	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a361	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a366	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a36b	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a370	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a375	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a37a	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a37f	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a384	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a389	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a38e	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a393	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a398	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a39d	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a3a2	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a3a7	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a3ac	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a3b1	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a3b6	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a3bb	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a3c0	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a3c5	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a3ca	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a3cf	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a3d4	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a3d9	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a3de	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a3e3	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a3e8	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a3ed	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a3f2	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a3f7	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a3fc	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a401	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a406	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a40b	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a410	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a415	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a41a	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a41f	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a424	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a429	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a42e	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a433	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a438	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a43d	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a442	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a447	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a44c	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a451	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a456	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a45b	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a460	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a465	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a46a	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a46f	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a474	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a479	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a47e	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a483	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a488	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a48d	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a48e					TokeniseLine:
.a48e	20 16 a6	jsr $a616			jsr 	FixLineBufferCase 			; fix line case
.a491	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a493	8d a6 04	sta $04a6			sta 	tokenOffset
.a496	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a499	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a49c	a2 ff		ldx #$ff			ldx 	#$FF
.a49e					_TKFindFirst:
.a49e	e8		inx				inx
.a49f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a4a2	f0 79		beq $a51d			beq 	_TKExit
.a4a4	c9 20		cmp #$20			cmp 	#' '
.a4a6	90 f6		bcc $a49e			bcc 	_TKFindFirst
.a4a8	c9 30		cmp #$30			cmp 	#'0'
.a4aa	90 07		bcc $a4b3			bcc 	_TKNoLineNumber
.a4ac	c9 3a		cmp #$3a			cmp 	#'9'+1
.a4ae	b0 03		bcs $a4b3			bcs 	_TKNoLineNumber
.a4b0	20 40 a6	jsr $a640			jsr 	TokeniseExtractLineNumber
.a4b3					_TKNoLineNumber:
.a4b3					_TKTokeniseLoop:
.a4b3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a4b6	f0 65		beq $a51d			beq 	_TKExit
.a4b8	e8		inx				inx
.a4b9	c9 20		cmp #$20			cmp 	#' '
.a4bb	f0 f6		beq $a4b3			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a4bd	ca		dex				dex 								; undo last get, A contains character, X is position.
.a4be	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a4c0	f0 61		beq $a523			beq 	_TKTokeniseIdentifier
.a4c2	c9 41		cmp #$41			cmp 	#'A'
.a4c4	90 04		bcc $a4ca			bcc 	_TKTokenisePunctuation
.a4c6	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a4c8	90 59		bcc $a523			bcc 	_TKTokeniseIdentifier
.a4ca					_TKTokenisePunctuation:
.a4ca	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a4cc	f0 27		beq $a4f5			beq 	_TKString
.a4ce	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a4d0	f0 28		beq $a4fa			beq 	_TKHexConstant
.a4d2	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a4d4	f0 29		beq $a4ff			beq 	_TKCheckDouble
.a4d6	c9 3e		cmp #$3e			cmp 	#'>'
.a4d8	f0 25		beq $a4ff			beq 	_TKCheckDouble
.a4da					_TKStandardPunctuation:
.a4da	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a4dd	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a4df	90 0e		bcc $a4ef			bcc 	_TKNoShift
.a4e1	48		pha				pha 								; save
.a4e2	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a4e4	85 36		sta $36				sta 	zTemp0
.a4e6	68		pla				pla
.a4e7	29 20		and #$20			and 	#32 						; bit 5
.a4e9	4a		lsr a				lsr 	a 							; shift into bit 3
.a4ea	4a		lsr a				lsr 	a
.a4eb	05 36		ora $36				ora 	zTemp0
.a4ed	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a4ef					_TKNoShift:
.a4ef	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte 			; write the punctuation character
.a4f2	e8		inx				inx 								; consume the character
.a4f3	80 be		bra $a4b3			bra 	_TKTokeniseLoop 			; and loop round again.
.a4f5					_TKString:
.a4f5	20 a5 a5	jsr $a5a5			jsr 	TokeniseString
.a4f8	80 b9		bra $a4b3			bra 	_TKTokeniseLoop
.a4fa					_TKHexConstant:
.a4fa	20 e0 a5	jsr $a5e0			jsr 	TokeniseHexConstant
.a4fd	80 b4		bra $a4b3			bra 	_TKTokeniseLoop
.a4ff					_TKCheckDouble:
.a4ff	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a502	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a504	90 d4		bcc $a4da			bcc 	_TKStandardPunctuation
.a506	c9 3f		cmp #$3f			cmp 	#'>'+1
.a508	b0 d0		bcs $a4da			bcs 	_TKStandardPunctuation
.a50a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a50d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a50f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a510	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a513	38		sec				sec
.a514	e9 3c		sbc #$3c			sbc 	#'<'
.a516	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a519	e8		inx				inx 								; consume both
.a51a	e8		inx				inx
.a51b	80 96		bra $a4b3			bra 	_TKTokeniseLoop
.a51d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a51f	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a522	60		rts				rts
.a523					_TKTokeniseIdentifier:
.a523	8e 80 04	stx $0480			stx 	identStart 					; save start
.a526	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a529					_TKCheckLoop:
.a529	e8		inx				inx 								; look at next, we know first is identifier.
.a52a	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a52d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a52f	f0 f8		beq $a529			beq 	_TKCheckLoop
.a531	c9 30		cmp #$30			cmp	 	#"0"
.a533	90 0c		bcc $a541			bcc 	_TKEndIdentifier
.a535	c9 3a		cmp #$3a			cmp 	#"9"+1
.a537	90 f0		bcc $a529			bcc 	_TKCheckLoop
.a539	c9 41		cmp #$41			cmp	 	#"A"
.a53b	90 04		bcc $a541			bcc 	_TKEndIdentifier
.a53d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a53f	90 e8		bcc $a529			bcc 	_TKCheckLoop
.a541					_TKEndIdentifier:
.a541	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a544	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a546	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a548	f0 06		beq $a550			beq 	_TKHasTypeCharacter
.a54a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a54c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a54e	d0 07		bne $a557			bne 	_TKNoTypeCharacter
.a550					_TKHasTypeCharacter:
.a550	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a553	e8		inx				inx 								; read next
.a554	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a557					_TKNoTypeCharacter:
.a557	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a559	d0 09		bne $a564			bne 	_TKNoArray
.a55b	e8		inx				inx 								; skip the (
.a55c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a55f	09 04		ora #$04			ora 	#$04
.a561	8d 84 04	sta $0484			sta 	identTypeByte
.a564					_TKNoArray:
.a564	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a567	20 01 a6	jsr $a601			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a56a	a0 a1		ldy #$a1			ldy 	#(KeywordSet0) >> 8
.a56c	a9 cc		lda #$cc			lda 	#(KeywordSet0) & $FF
.a56e	20 73 a1	jsr $a173			jsr 	TokeniseSearchTable
.a571	a2 00		ldx #$00			ldx 	#0
.a573	b0 1f		bcs $a594			bcs 	_TKFoundToken
.a575	a0 a2		ldy #$a2			ldy 	#(KeywordSet1) >> 8
.a577	a9 fe		lda #$fe			lda 	#(KeywordSet1) & $FF
.a579	20 73 a1	jsr $a173			jsr 	TokeniseSearchTable
.a57c	a2 81		ldx #$81			ldx 	#$81
.a57e	b0 14		bcs $a594			bcs 	_TKFoundToken
.a580	a0 a3		ldy #$a3			ldy 	#(KeywordSet2) >> 8
.a582	a9 42		lda #$42			lda 	#(KeywordSet2) & $FF
.a584	20 73 a1	jsr $a173			jsr 	TokeniseSearchTable
.a587	a2 82		ldx #$82			ldx 	#$82
.a589	b0 09		bcs $a594			bcs 	_TKFoundToken
.a58b	20 91 a6	jsr $a691			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a58e	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a591	4c b3 a4	jmp $a4b3			jmp 	_TKTokeniseLoop 			; and go round again.
.a594					_TKFoundToken:
.a594	48		pha				pha 								; save token
.a595	8a		txa				txa 								; shift in X, is there one ?
.a596	f0 03		beq $a59b			beq 	_TKNoTShift
.a598	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte 			; if so, write it out
.a59b					_TKNoTShift:
.a59b	68		pla				pla 								; restore and write token
.a59c	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a59f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a5a2	4c b3 a4	jmp $a4b3			jmp 	_TKTokeniseLoop 			; and go round again.
.a5a5					TokeniseString:
.a5a5	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a5a7	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a5aa	e8		inx				inx									; start of quoted string.
.a5ab	da		phx				phx 								; push start of string on top
.a5ac	ca		dex				dex
.a5ad					_TSFindEnd:
.a5ad	e8		inx				inx
.a5ae	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a5b1	f0 04		beq $a5b7			beq 	_TSEndOfString
.a5b3	c9 22		cmp #$22			cmp 	#'"'
.a5b5	d0 f6		bne $a5ad			bne 	_TSFindEnd
.a5b7					_TSEndOfString:
.a5b7	7a		ply				ply  								; so now Y is first character, X is character after end.
.a5b8	48		pha				pha 								; save terminating character
.a5b9	20 c1 a5	jsr $a5c1			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a5bc	68		pla				pla 								; terminating character
.a5bd	f0 01		beq $a5c0			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a5bf	e8		inx				inx
.a5c0					_TSNotQuote:
.a5c0	60		rts				rts
.a5c1					TOWriteBlockXY:
.a5c1	86 36		stx $36				stx 	zTemp0 						; write end character
.a5c3	98		tya				tya
.a5c4	49 ff		eor #$ff			eor 	#$FF
.a5c6	38		sec				sec
.a5c7	65 36		adc $36				adc 	zTemp0
.a5c9	1a		inc a				inc 	a 							; one extra for NULL
.a5ca	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a5cd					_TOBlockLoop:
.a5cd	c4 36		cpy $36				cpy 	zTemp0
.a5cf	f0 09		beq $a5da			beq 	_TOBlockExit
.a5d1	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a5d4	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a5d7	c8		iny				iny
.a5d8	80 f3		bra $a5cd			bra 	_TOBlockLoop
.a5da					_TOBlockExit:
.a5da	a9 00		lda #$00			lda 	#0
.a5dc	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a5df	60		rts				rts
.a5e0					TokeniseHexConstant:
.a5e0	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a5e2	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a5e5	e8		inx				inx									; start of quoted string.
.a5e6	da		phx				phx 								; push start of constant on top
.a5e7	ca		dex				dex
.a5e8					_THFindLoop:
.a5e8	e8		inx				inx
.a5e9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a5ec	c9 30		cmp #$30			cmp 	#"0"
.a5ee	90 0c		bcc $a5fc			bcc 	_THFoundEnd
.a5f0	c9 3a		cmp #$3a			cmp 	#"9"+1
.a5f2	90 f4		bcc $a5e8			bcc 	_THFindLoop
.a5f4	c9 41		cmp #$41			cmp 	#"A"
.a5f6	90 04		bcc $a5fc			bcc 	_THFoundEnd
.a5f8	c9 47		cmp #$47			cmp 	#"F"+1
.a5fa	90 ec		bcc $a5e8			bcc 	_THFindLoop
.a5fc					_THFoundEnd:
.a5fc	7a		ply				ply 								; restore start
.a5fd	20 c1 a5	jsr $a5c1			jsr 	TOWriteBlockXY 				; output the block
.a600	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a601					TokeniseCalculateHash:
.a601	da		phx				phx
.a602	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a605	a9 00		lda #$00			lda 	#0
.a607					_TCHLoop:
.a607	18		clc				clc
.a608	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a60b	e8		inx				inx
.a60c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a60f	d0 f6		bne $a607			bne 	_TCHLoop
.a611	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a614	fa		plx				plx
.a615	60		rts				rts
.a616					FixLineBufferCase:
.a616	a2 00		ldx #$00			ldx 	#0
.a618					_FLBCLoop:
.a618	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a61b	f0 22		beq $a63f			beq 	_FLBCExit 					; end of string.
.a61d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a61f	f0 11		beq $a632			beq 	_FLBCInQuotes
.a621	e8		inx				inx
.a622	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a624	90 f2		bcc $a618			bcc 	_FLBCLoop
.a626	c9 7b		cmp #$7b			cmp 	#'z'+1
.a628	b0 ee		bcs $a618			bcs 	_FLBCLoop
.a62a	38		sec				sec 								; make U/C
.a62b	e9 20		sbc #$20			sbc 	#32
.a62d	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a630	80 e6		bra $a618			bra 	_FLBCLoop
.a632					_FLBCInQuotes:
.a632	e8		inx				inx 								; advance
.a633	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a636	f0 07		beq $a63f			beq 	_FLBCExit 					; exit on EOS
.a638	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a63a	d0 f6		bne $a632			bne 	_FLBCInQuotes
.a63c	e8		inx				inx 								; skip over it
.a63d	80 d9		bra $a618			bra 	_FLBCLoop
.a63f					_FLBCExit:
.a63f	60		rts				rts
.a640					TokeniseExtractLineNumber:
.a640	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a643	48		pha				pha
.a644	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a647	48		pha				pha
.a648	20 7e a6	jsr $a67e			jsr 	_TELNTimes2 				; line # x 4
.a64b	20 7e a6	jsr $a67e			jsr 	_TELNTimes2 				; line # x 2
.a64e	18		clc				clc 								; add stacked value
.a64f	68		pla				pla
.a650	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a653	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a656	68		pla				pla
.a657	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a65a	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a65d	20 7e a6	jsr $a67e			jsr 	_TELNTimes2 				; line # x 10
.a660	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a663	e8		inx				inx
.a664	29 0f		and #$0f			and 	#15 						; add to line #
.a666	18		clc				clc
.a667	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a66a	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a66d	90 03		bcc $a672			bcc 	_TLENNoCarry
.a66f	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a672					_TLENNoCarry:
.a672	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a675	c9 30		cmp #$30			cmp 	#'0'
.a677	90 04		bcc $a67d			bcc 	_TLENExit
.a679	c9 3a		cmp #$3a			cmp 	#'9'+1
.a67b	90 c3		bcc $a640			bcc 	TokeniseExtractLineNumber
.a67d					_TLENExit:
.a67d	60		rts				rts
.a67e					_TELNTimes2:
.a67e	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a681	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a684	60		rts				rts
.a685					TokeniseWriteByte:
.a685	da		phx				phx
.a686	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a689	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a68c	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a68f	fa		plx				plx
.a690	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a691					CheckCreateVariableRecord:
.a691	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a693	85 36		sta $36				sta 	0+zTemp0
.a695	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a697	85 37		sta $37				sta 	1+zTemp0
.a699					_CCVSearch:
.a699	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a69b	f0 2c		beq $a6c9			beq 	_CCVFail
.a69d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a69f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a6a1	cd 83 04	cmp $0483			cmp 	identHash
.a6a4	d0 16		bne $a6bc			bne 	_CCVNext
.a6a6	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a6a8	ae 80 04	ldx $0480			ldx 	identStart
.a6ab					_CCVCompare:
.a6ab	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a6ae	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a6b0	e8		inx				inx 								; advance pointers
.a6b1	c8		iny				iny
.a6b2	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a6b3	d0 07		bne $a6bc			bne 	_CCVNext  					; didn't match go to next.
.a6b5	90 f4		bcc $a6ab			bcc 	_CCVCompare 				; not finished yet.
.a6b7	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a6ba	f0 41		beq $a6fd			beq 	_CCVFound 					; yes, we were successful
.a6bc					_CCVNext:
.a6bc	18		clc				clc
.a6bd	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a6bf	65 36		adc $36				adc 	zTemp0
.a6c1	85 36		sta $36				sta 	zTemp0
.a6c3	90 d4		bcc $a699			bcc 	_CCVSearch
.a6c5	e6 37		inc $37				inc 	zTemp0+1
.a6c7	80 d0		bra $a699			bra 	_CCVSearch
.a6c9					_CCVFail:
.a6c9	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a6cb	ad 83 04	lda $0483			lda 	identHash
.a6ce	91 36		sta ($36),y			sta 	(zTemp0),y
.a6d0	c8		iny				iny 								; offset 2 is the type byte
.a6d1	ad 84 04	lda $0484			lda 	identTypeByte
.a6d4	91 36		sta ($36),y			sta 	(zTemp0),y
.a6d6	c8		iny				iny
.a6d7					_CCVData:
.a6d7	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a6d9	91 36		sta ($36),y			sta 	(zTemp0),y
.a6db	c8		iny				iny
.a6dc	c0 08		cpy #$08			cpy 	#8
.a6de	90 f7		bcc $a6d7			bcc 	_CCVData
.a6e0	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a6e3					_CCVCopyName:
.a6e3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a6e6	91 36		sta ($36),y			sta 	(zTemp0),y
.a6e8	e8		inx				inx
.a6e9	c8		iny				iny
.a6ea	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a6ed	d0 f4		bne $a6e3			bne 	_CCVCopyName
.a6ef	98		tya				tya 								; patch offset
.a6f0	92 36		sta ($36)			sta 	(zTemp0)
.a6f2	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a6f4	91 36		sta ($36),y			sta 	(zTemp0),y
.a6f6	88		dey				dey
.a6f7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a6f9	09 80		ora #$80			ora 	#$80
.a6fb	91 36		sta ($36),y			sta 	(zTemp0),y
.a6fd					_CCVFound:
.a6fd	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a6ff	38		sec				sec
.a700	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a702	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a704	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a707	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a709	20 85 a6	jsr $a685			jsr 	TokeniseWriteByte
.a70c	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
