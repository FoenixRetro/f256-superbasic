
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 08:49:15 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 91 81	jsr $8191			jsr 	NewCommand 					; erase current program
.8006	20 3a 8d	jsr $8d3a			jsr 	BackloadProgram
.8009	4c ff 81	jmp $81ff			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 35 98	jsr $9835			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	02 84					.word	ShiftLeft                        ; $00 <<
>8016	fc 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	f2 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	b3 96					.word	SyntaxError                      ; $03 !!3
>801c	b3 96					.word	SyntaxError                      ; $04 ><
>801e	06 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	05 84					.word	ShiftRight                       ; $06 >>
>8022	b3 96					.word	SyntaxError                      ; $07 !!7
>8024	b3 96					.word	SyntaxError                      ; $08 !!8
>8026	b3 96					.word	SyntaxError                      ; $09 !!9
>8028	b3 96					.word	SyntaxError                      ; $0a !!10
>802a	b3 96					.word	SyntaxError                      ; $0b !!11
>802c	b3 96					.word	SyntaxError                      ; $0c !!12
>802e	b3 96					.word	SyntaxError                      ; $0d !!13
>8030	b3 96					.word	SyntaxError                      ; $0e !!14
>8032	b3 96					.word	SyntaxError                      ; $0f !!15
>8034	b3 96					.word	SyntaxError                      ; $10 @
>8036	b3 96					.word	SyntaxError                      ; $11 !!17
>8038	b3 96					.word	SyntaxError                      ; $12 !!18
>803a	b3 96					.word	SyntaxError                      ; $13 [
>803c	13 92					.word	IntegerDivide                    ; $14 \
>803e	b3 96					.word	SyntaxError                      ; $15 ]
>8040	8b 85					.word	EorInteger                       ; $16 ^
>8042	b3 96					.word	SyntaxError                      ; $17 _
>8044	b3 96					.word	SyntaxError                      ; $18 `
>8046	b3 96					.word	SyntaxError                      ; $19 !!25
>8048	b3 96					.word	SyntaxError                      ; $1a !!26
>804a	b3 96					.word	SyntaxError                      ; $1b {
>804c	45 85					.word	OraInteger                       ; $1c |
>804e	b3 96					.word	SyntaxError                      ; $1d }
>8050	b3 96					.word	SyntaxError                      ; $1e ~
>8052	b3 96					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	b3 96					.word	SyntaxError                      ; $20
>8056	d1 85					.word	WordIndirect                     ; $21 !
>8058	b3 96					.word	SyntaxError                      ; $22 "
>805a	b3 96					.word	SyntaxError                      ; $23 #
>805c	b3 96					.word	SyntaxError                      ; $24 $
>805e	60 92					.word	IntegerModulus                   ; $25 %
>8060	ff 84					.word	AndInteger                       ; $26 &
>8062	b3 96					.word	SyntaxError                      ; $27 '
>8064	b3 96					.word	SyntaxError                      ; $28 (
>8066	b3 96					.word	SyntaxError                      ; $29 )
>8068	d5 92					.word	MulInteger                       ; $2a *
>806a	99 84					.word	AddInteger                       ; $2b +
>806c	b3 96					.word	SyntaxError                      ; $2c ,
>806e	d4 84					.word	SubInteger                       ; $2d -
>8070	b3 96					.word	SyntaxError                      ; $2e .
>8072	6c 94					.word	FDivideCommand                   ; $2f /
>8074	b3 96					.word	SyntaxError                      ; $30 0
>8076	b3 96					.word	SyntaxError                      ; $31 1
>8078	b3 96					.word	SyntaxError                      ; $32 2
>807a	b3 96					.word	SyntaxError                      ; $33 3
>807c	b3 96					.word	SyntaxError                      ; $34 4
>807e	b3 96					.word	SyntaxError                      ; $35 5
>8080	b3 96					.word	SyntaxError                      ; $36 6
>8082	b3 96					.word	SyntaxError                      ; $37 7
>8084	b3 96					.word	SyntaxError                      ; $38 8
>8086	b3 96					.word	SyntaxError                      ; $39 9
>8088	b3 96					.word	SyntaxError                      ; $3a :
>808a	b3 96					.word	SyntaxError                      ; $3b ;
>808c	de 82					.word	BinaryCompareLess                ; $3c <
>808e	d4 82					.word	BinaryCompareEqual               ; $3d =
>8090	e8 82					.word	BinaryCompareGreater             ; $3e >
>8092	f8 85					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	4a 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	57 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	b3 96					.word	SyntaxError                      ; $82 !2:SH2
>809a	b2 95					.word	AbsUnary                         ; $83 ABS(
>809c	32 8a					.word	AllocUnary                       ; $84 ALLOC(
>809e	c2 95					.word	AscUnary                         ; $85 ASC(
>80a0	cf 8a					.word	ChrUnary                         ; $86 CHR$(
>80a2	d0 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	cf 95					.word	FracUnary                        ; $88 FRAC(
>80a6	e5 95					.word	IntUnary                         ; $89 INT(
>80a8	3b 96					.word	IsValUnary                       ; $8a ISVAL(
>80aa	a9 8b					.word	Unary_Left                       ; $8b LEFT$(
>80ac	f7 95					.word	LenUnary                         ; $8c LEN(
>80ae	d3 8b					.word	Unary_Mid                        ; $8d MID$(
>80b0	6c 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	b9 8b					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	82 8a					.word	Unary_Rnd                        ; $90 RND(
>80b6	11 96					.word	SgnUnary                         ; $91 SGN(
>80b8	e1 8a					.word	SpcUnary                         ; $92 SPC(
>80ba	fc 8a					.word	Unary_Str                        ; $93 STR$(
>80bc	c4 82					.word	UnaryTrue                        ; $94 TRUE
>80be	31 96					.word	ValUnary                         ; $95 VAL(
>80c0	b3 96					.word	SyntaxError                      ; $96 FOR
>80c2	b3 96					.word	SyntaxError                      ; $97 IF
>80c4	b3 96					.word	SyntaxError                      ; $98 PROC
>80c6	b3 96					.word	SyntaxError                      ; $99 REPEAT
>80c8	b3 96					.word	SyntaxError                      ; $9a WHILE
>80ca	b3 96					.word	SyntaxError                      ; $9b ENDIF
>80cc	b3 96					.word	SyntaxError                      ; $9c ENDPROC
>80ce	b3 96					.word	SyntaxError                      ; $9d NEXT
>80d0	b3 96					.word	SyntaxError                      ; $9e UNTIL
>80d2	b3 96					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	b3 96					.word	SyntaxError                      ; $a1 CLS
>80d8	b3 96					.word	SyntaxError                      ; $a2 DATA
>80da	b3 96					.word	SyntaxError                      ; $a3 DIM
>80dc	b3 96					.word	SyntaxError                      ; $a4 GOSUB
>80de	b3 96					.word	SyntaxError                      ; $a5 GOTO
>80e0	62 81					.word	LetCommand                       ; $a6 LET
>80e2	9b 81					.word	Command_Print                    ; $a7 PRINT
>80e4	b3 96					.word	SyntaxError                      ; $a8 READ
>80e6	f2 81					.word	RemCommand                       ; $a9 REM
>80e8	b3 96					.word	SyntaxError                      ; $aa RETURN
>80ea	b3 96					.word	SyntaxError                      ; $ab THEN
>80ec	b3 96					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	b3 96					.word	SyntaxError                      ; $80 !0:EOF
>80f0	b3 96					.word	SyntaxError                      ; $81 !1:SH1
>80f2	b3 96					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	b3 96					.word	SyntaxError                      ; $86 LIST
>80fc	91 81					.word	NewCommand                       ; $87 NEW
>80fe	b3 96					.word	SyntaxError                      ; $88 RESTORE
>8100	ff 81					.word	CommandRUN                       ; $89 RUN
>8102	b3 96					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	b3 96					.word	SyntaxError                      ; $80 !0:EOF
>8106	b3 96					.word	SyntaxError                      ; $81 !1:SH1
>8108	b3 96					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 74 8c	jsr $8c74			jsr 	EvaluateInteger 			; the assert test
.810f	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 5f 82	jmp $825f		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 89 8c	jsr $8c89			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 c1 97	jsr $97c1			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8162					LetCommand:
.8162	a2 00		ldx #$00			ldx 	#0
.8164	ad 49 86	lda $8649			lda 	PrecedenceLevel+"*"			; precedence > this
.8167	20 63 86	jsr $8663			jsr 	EvaluateExpressionAtPrecedence
.816a	a9 3d		lda #$3d			lda 	#"=" 						; check =
.816c	20 0a 92	jsr $920a			jsr 	CheckNextA
.816f	e8		inx				inx 								; RHS
.8170	20 61 86	jsr $8661			jsr 	EvaluateExpression
.8173	ca		dex				dex
.8174	20 78 81	jsr $8178			jsr 	AssignVariable
.8177	60		rts				rts
.8178					AssignVariable:
.8178	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.817b	48		pha				pha 								; save a copy
.817c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.817f	29 10		and #$10			and 	#NSBIsString
.8181	d0 0b		bne $818e			bne 	_ASError
.8183	68		pla				pla 								; get back
.8184	29 10		and #$10			and 	#NSBIsString 				; check type
.8186	d0 03		bne $818b			bne 	_ASString
.8188	4c 9e 86	jmp $869e			jmp 	AssignNumber
.818b					_ASString:
.818b	4c 0c 87	jmp $870c			jmp 	AssignString
.818e					_ASError:
.818e	4c bd 96	jmp $96bd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8191					NewCommand:
.8191	20 a7 91	jsr $91a7			jsr 	MemoryNew
.8194	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8197	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.819a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.819b					Command_Print:
.819b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.819c					_CPLoop:
.819c	08		php				php 								; save last action flag
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81a1	f0 46		beq $81e9			beq 	_CPExit
.81a3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81a5	f0 42		beq $81e9			beq 	_CPExit
.81a7	68		pla				pla 								; throw last action flag
.81a8	b1 30		lda ($30),y			lda 	(codePtr),y
.81aa	c8		iny				iny
.81ab	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81ad	f0 37		beq $81e6			beq 	_CPContinueWithSameLine
.81af	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81b1	f0 2e		beq $81e1			beq 	_CPTab
.81b3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81b5	f0 26		beq $81dd			beq 	_CPNewLine
.81b7	88		dey				dey 								; undo the get.
.81b8	a2 00		ldx #$00			ldx 	#0
.81ba	20 48 8c	jsr $8c48			jsr 	EvaluateValue 				; get a value into slot 0
.81bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81c0	29 10		and #$10			and 	#NSBIsString
.81c2	f0 0b		beq $81cf			beq 	_CPNumber
.81c4	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81c7	ad 08 06	lda $0608			lda 	NSMantissa0
.81ca	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81cd	80 cc		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81cf					_CPNumber:
.81cf	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81d1	20 1e 8b	jsr $8b1e			jsr 	ConvertNumberToString 		; convert to string
.81d4	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81d6	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81d8	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81db	80 be		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81dd					_CPNewLine:
.81dd	a9 0d		lda #$0d			lda 	#13
.81df	80 02		bra $81e3			bra 	_CPPrintChar
.81e1					_CPTab:
.81e1	a9 09		lda #$09			lda 	#9 							; print TAB
.81e3					_CPPrintChar:
.81e3	20 35 98	jsr $9835			jsr 	EXTPrintCharacter
.81e6					_CPContinueWithSameLine:
.81e6	38		sec				sec 								; loop round with carry set, which
.81e7	80 b3		bra $819c			bra 	_CPLoop 					; will inhibit final CR
.81e9					_CPExit:
.81e9	28		plp				plp 								; get last action flag
.81ea	b0 05		bcs $81f1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81ec	a9 0d		lda #$0d			lda 	#13 						; print new line
.81ee	20 35 98	jsr $9835			jsr 	EXTPrintCharacter
.81f1					_CPExit2:
.81f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.81f2					RemCommand:
.81f2	b1 30		lda ($30),y			lda 	(codePtr),y
.81f4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81f6	d0 06		bne $81fe			bne 	_RMExit
.81f8	c8		iny				iny
.81f9	98		tya				tya
.81fa	38		sec				sec
.81fb	71 30		adc ($30),y			adc 	(codePtr),y
.81fd	a8		tay				tay
.81fe					_RMExit:
.81fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.81ff					CommandRUN:
.81ff	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8202	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8204	85 30		sta $30				sta 	codePtr
.8206	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8208	85 31		sta $31				sta 	codePtr+1
.820a					RUNNewLine:
.820a	b2 30		lda ($30)			lda 	(codePtr)
.820c	f0 39		beq $8247			beq 	CRNoProgram         		; no then END.
.820e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8210	9a		txs				txs
.8211					RUNCodePointerLine:
.8211	a0 02		ldy #$02			ldy 	#2 							; start of program
.8213					_CRIncMainLoop:
.8213	c8		iny				iny
.8214					_CRMainLoop:
.8214	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8217	b1 30		lda ($30),y			lda 	(codePtr),y
.8219	10 10		bpl $822b			bpl 	_CRNotKeyword
.821b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.821d	b0 04		bcs $8223			bcs 	_CRIsKeyword
.821f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8221	b0 1e		bcs $8241			bcs		_CRSyntaxError
.8223					_CRIsKeyword:
.8223	c8		iny				iny 								; consume command
.8224	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8225	aa		tax				tax 								; put in X for vector jump
.8226	20 44 82	jsr $8244			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8229	80 e9		bra $8214			bra 	_CRMainLoop 				; and loop round
.822b					_CRNotKeyword:
.822b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.822d	f0 e4		beq $8213			beq 	_CRIncMainLoop
.822f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8231	90 05		bcc $8238			bcc 	_CRNotVariable
.8233					_CRGoLet:
.8233	20 62 81	jsr $8162			jsr 	LetCommand
.8236	80 dc		bra $8214			bra 	_CRMainLoop
.8238					_CRNotVariable:
.8238	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.823a	f0 f7		beq $8233			beq 	_CRGoLet
.823c	c9 21		cmp #$21			cmp 	#KWD_PLING
.823e	f0 f3		beq $8233			beq 	_CRGoLet
>8240	db						.byte 	$DB 						; causes a break in the emulator
.8241					_CRSyntaxError:
.8241	4c b3 96	jmp $96b3			jmp 	SyntaxError
.8244					_CRCallVector0:
.8244	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8247					CRNoProgram:
.8247	4c 5f 81	jmp $815f			jmp 	EndCommand
.824a					EOLCommand:
.824a	18		clc				clc
.824b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.824d	65 30		adc $30				adc 	codePtr
.824f	85 30		sta $30				sta 	codePtr
.8251	90 02		bcc $8255			bcc 	_CREExit
.8253	e6 31		inc $31				inc 	codePtr+1
.8255					_CREExit:
.8255	80 b3		bra $820a			bra 	RunNewLine
.8257					Shift1Command:
.8257	b1 30		lda ($30),y			lda 	(codePtr),y
.8259	c8		iny				iny
.825a	0a		asl a				asl 	a
.825b	aa		tax				tax
.825c	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.91fa					CheckRightBracket:
.91fa	b1 30		lda ($30),y			lda 	(codePtr),y
.91fc	c8		iny				iny
.91fd	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.91ff	d0 0f		bne $9210			bne 	CNAFail
.9201	60		rts				rts
.9202					CheckComma:
.9202	b1 30		lda ($30),y			lda 	(codePtr),y
.9204	c8		iny				iny
.9205	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9207	d0 07		bne $9210			bne 	CNAFail
.9209	60		rts				rts
.920a					CheckNextA:
.920a	d1 30		cmp ($30),y			cmp 	(codePtr),y
.920c	d0 02		bne $9210			bne 	CNAFail
.920e	c8		iny				iny 								; skip character
.920f	60		rts				rts 								; and exit
.9210					CNAFail:
.9210	4c b3 96	jmp $96b3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.825f					ErrorHandler:
.825f	a8		tay				tay 								; find the error text
.8260	f0 42		beq $82a4			beq 	_EHEnd
.8262	a2 00		ldx #$00			ldx 	#0
.8264					_EHFind:
.8264	88		dey				dey 								; found the error text ?
.8265	f0 0a		beq $8271			beq 	_EHFound
.8267					_EHFindZero:
.8267	bd cc 96	lda $96cc,x			lda 	ErrorText,x 				; find the next error
.826a	e8		inx				inx
.826b	c9 00		cmp #$00			cmp 	#0
.826d	d0 f8		bne $8267			bne 	_EHFindZero
.826f	80 f3		bra $8264			bra 	_EHFind
.8271					_EHFound:
.8271	bd cc 96	lda $96cc,x			lda 	ErrorText,x 				; print the message
.8274	20 35 98	jsr $9835			jsr 	EXTPrintCharacter
.8277	e8		inx				inx
.8278	bd cc 96	lda $96cc,x			lda 	ErrorText,x
.827b	d0 f4		bne $8271			bne 	_EHFound
.827d	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.827f	b1 30		lda ($30),y			lda 	(codePtr),y
.8281	d0 05		bne $8288			bne 	_EHAtMsg
.8283	c8		iny				iny
.8284	b1 30		lda ($30),y			lda 	(codePtr),y
.8286	f0 17		beq $829f			beq 	_EHCREnd
.8288					_EHAtMsg:
.8288	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.828a	a9 a7		lda #$a7			lda 	#_AtMsg & $FF
.828c	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.828f	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8291	b1 30		lda ($30),y			lda 	(codePtr),y
.8293	48		pha				pha
.8294	c8		iny				iny
.8295	b1 30		lda ($30),y			lda 	(codePtr),y
.8297	aa		tax				tax
.8298	68		pla				pla
.8299	20 56 93	jsr $9356			jsr 	ConvertInt16 				; convert XA to string
.829c	20 b1 82	jsr $82b1			jsr 	PrintStringXA 				; and print it.
.829f					_EHCREnd:
.829f	a9 0d		lda #$0d			lda 	#13 						; new line
.82a1	20 35 98	jsr $9835			jsr 	EXTPrintCharacter
.82a4					_EHEnd:
.82a4	4c 0c 80	jmp $800c			jmp 	WarmStart
>82a7	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82af	20 00
.82b1					PrintStringXA:
.82b1	5a		phy				phy
.82b2	86 37		stx $37				stx 	zTemp0+1
.82b4	85 36		sta $36				sta 	zTemp0
.82b6	a0 00		ldy #$00			ldy 	#0
.82b8					_PSXALoop:
.82b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ba	f0 06		beq $82c2			beq 	_PSXAExit
.82bc	20 35 98	jsr $9835			jsr 	EXTPrintCharacter
.82bf	c8		iny				iny
.82c0	80 f6		bra $82b8			bra 	_PSXALoop
.82c2					_PSXAExit:
.82c2	7a		ply				ply
.82c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82c4					UnaryTrue:
.82c4	fa		plx				plx
.82c5					ReturnTrue:
.82c5	a9 01		lda #$01			lda 	#1  						; set to 1
.82c7	20 ff 8c	jsr $8cff			jsr 	NSMSetByte
.82ca	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82cf	60		rts				rts
.82d0					UnaryFalse:
.82d0	fa		plx				plx
.82d1					ReturnFalse:
.82d1	4c fd 8c	jmp $8cfd			jmp 	NSMSetZero 					; set it all to zero
.82d4					BinaryCompareEqual:
.82d4	fa		plx				plx
.82d5	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82d8	c9 00		cmp #$00			cmp 	#0
.82da	f0 e9		beq $82c5			beq 	ReturnTrue
.82dc	80 f3		bra $82d1			bra 	ReturnFalse
.82de					BinaryCompareLess:
.82de	fa		plx				plx
.82df	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82e2	c9 ff		cmp #$ff			cmp 	#$FF
.82e4	f0 df		beq $82c5			beq 	ReturnTrue
.82e6	80 e9		bra $82d1			bra 	ReturnFalse
.82e8					BinaryCompareGreater:
.82e8	fa		plx				plx
.82e9	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82ec	c9 01		cmp #$01			cmp 	#1
.82ee	f0 d5		beq $82c5			beq 	ReturnTrue
.82f0	80 df		bra $82d1			bra 	ReturnFalse
.82f2					BinaryCompareNotEqual:
.82f2	fa		plx				plx
.82f3	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82f6	c9 00		cmp #$00			cmp 	#0
.82f8	d0 cb		bne $82c5			bne 	ReturnTrue
.82fa	80 d5		bra $82d1			bra 	ReturnFalse
.82fc					BinaryCompareLessEqual:
.82fc	fa		plx				plx
.82fd	20 10 83	jsr $8310			jsr 	CompareBaseCode
.8300	c9 01		cmp #$01			cmp 	#1
.8302	d0 c1		bne $82c5			bne 	ReturnTrue
.8304	80 cb		bra $82d1			bra 	ReturnFalse
.8306					BinaryCompareGreaterEqual:
.8306	fa		plx				plx
.8307	20 10 83	jsr $8310			jsr 	CompareBaseCode
.830a	c9 ff		cmp #$ff			cmp 	#$FF
.830c	d0 b7		bne $82c5			bne 	ReturnTrue
.830e	80 c1		bra $82d1			bra 	ReturnFalse
.8310					CompareBaseCode:
.8310	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; make both values if references.
.8313	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8316	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8319	29 10		and #$10			and 	#NSTString
.831b	d0 40		bne $835d			bne 	_CBCString
.831d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8320	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8323	d0 3b		bne $8360			bne 	_CBCFloat
.8325	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8328	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.832b	29 08		and #$08			and 	#NSTFloat
.832d	d0 31		bne $8360			bne 	_CBCFloat
.832f	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8332	e8		inx				inx
.8333	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8336	ca		dex				dex
.8337	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.833a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.833d	10 0b		bpl $834a			bpl 	_CDCSameSign
.833f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8342	30 16		bmi $835a			bmi 	_CBCLess 					; return $FF
.8344					_CBCGreater:
.8344	a9 01		lda #$01			lda 	#1
.8346	60		rts				rts
.8347					_CBCEqual:
.8347	a9 00		lda #$00			lda 	#0
.8349	60		rts				rts
.834a					_CDCSameSign:
.834a	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; unsigned subtract
.834d	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; or the mantissa together
.8350	f0 f5		beq $8347			beq 	_CBCEqual 					; -0 == 0
.8352	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8355	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8358	10 ea		bpl $8344			bpl 	_CBCGreater
.835a					_CBCLess:
.835a	a9 ff		lda #$ff			lda 	#$FF
.835c	60		rts				rts
.835d					_CBCString:
.835d	4c c9 83	jmp $83c9			jmp 	CompareStrings
.8360					_CBCFloat:
.8360	4c 52 94	jmp $9452			jmp 	CompareFloat
.8363					CompareFixMinusZero:
.8363	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero
.8366	d0 03		bne $836b			bne 	_CFXMZNotZero
.8368	9e 00 06	stz $0600,x			stz 	NSStatus,x
.836b					_CFXMZNotZero:
.836b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.836c					StringConcat:
.836c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.836f	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8372	29 18		and #$18			and 	#NSBTypeMask
.8374	c9 10		cmp #$10			cmp 	#NSTString
.8376	d0 4e		bne $83c6			bne		_SCType
.8378	64 38		stz $38				stz 	zTemp1 						; counting total length
.837a	e8		inx				inx
.837b	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for second
.837e	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for second
.8381	ca		dex				dex
.8382	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for first
.8385	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for first
.8388	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.838a	20 e2 97	jsr $97e2			jsr 	StringTempAllocate
.838d	20 b7 83	jsr $83b7			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8390	e8		inx				inx
.8391	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; copy second out
.8394	20 b7 83	jsr $83b7			jsr 	_SCCopy
.8397	ca		dex				dex
.8398	60		rts				rts
.8399					_SCSetupZ0:
.8399	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.839c	85 36		sta $36				sta 	zTemp0
.839e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83a1	85 37		sta $37				sta 	zTemp0+1
.83a3	60		rts				rts
.83a4					_SCLengthZ0:
.83a4	5a		phy				phy
.83a5	a0 00		ldy #$00			ldy 	#0
.83a7					_SCLenLoop:
.83a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a9	f0 0a		beq $83b5			beq 	_SCLExit
.83ab	c8		iny				iny
.83ac	e6 38		inc $38				inc 	zTemp1
.83ae	10 f7		bpl $83a7			bpl		_SCLenLoop
.83b0	a9 09		lda #$09		lda	#9
.83b2	4c 5f 82	jmp $825f		jmp	ErrorHandler
.83b5					_SCLExit:
.83b5	7a		ply				ply
.83b6	60		rts				rts
.83b7					_SCCopy:
.83b7	5a		phy				phy
.83b8	a0 00		ldy #$00			ldy 	#0
.83ba					_SCCopyLoop:
.83ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bc	f0 06		beq $83c4			beq 	_SCCExit
.83be	20 20 98	jsr $9820			jsr 	StringTempWrite
.83c1	c8		iny				iny
.83c2	80 f6		bra $83ba			bra 	_SCCopyLoop
.83c4					_SCCExit:
.83c4	7a		ply				ply
.83c5	60		rts				rts
.83c6					_SCType:
.83c6	4c bd 96	jmp $96bd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9213					IntegerDivide:
.9213	fa		plx				plx
.9214	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9217	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.921a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.921b	0a		asl a				asl 	a
.921c	10 05		bpl $9223			bpl 	_NotRef
.921e	48		pha				pha
.921f	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9222	68		pla				pla
.9223					_NotRef:
.9223	0a		asl a				asl 	a
.9224	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9226	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9229	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.922c	f0 03		beq $9231			beq 	_IntegerCode 				; if clear, then we have two integers
.922e	4c bd 96	jmp $96bd			jmp 	TypeError 					; anything else, type mismatch.
.9231					_IntegerCode:
.9231	20 53 92	jsr $9253			jsr 	CheckDivideZero 			; do div zero check
.9234	20 8b 92	jsr $928b			jsr 	Int32Divide 				; do the division
.9237	20 48 93	jsr $9348			jsr 	CalculateSign 				; calculate result sign
.923a					NSMCopyPlusTwoToZero:
.923a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.923d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9240	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9243	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9246	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9249	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.924c	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.924f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9252	60		rts				rts
.9253					CheckDivideZero:
.9253	e8		inx				inx
.9254	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero
.9257	f0 02		beq $925b			beq 	_CDVError
.9259	ca		dex				dex
.925a	60		rts				rts
.925b					_CDVError:
.925b	a9 03		lda #$03		lda	#3
.925d	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9260					IntegerModulus:
.9260	fa		plx				plx
.9261	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9264	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9267	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9268	0a		asl a				asl 	a
.9269	10 05		bpl $9270			bpl 	_NotRef
.926b	48		pha				pha
.926c	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.926f	68		pla				pla
.9270					_NotRef:
.9270	0a		asl a				asl 	a
.9271	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9273	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9276	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9279	f0 03		beq $927e			beq 	_IntegerCode 				; if clear, then we have two integers
.927b	4c bd 96	jmp $96bd			jmp 	TypeError 					; anything else, type mismatch.
.927e					_IntegerCode:
.927e	20 53 92	jsr $9253			jsr 	CheckDivideZero 			; do div zero check
.9281	20 8b 92	jsr $928b			jsr 	Int32Divide 				; do the division
.9284	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9287	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.928a	60		rts				rts
.928b					Int32Divide:
.928b	48		pha				pha 								; save AXY
.928c	5a		phy				phy
.928d	20 d4 8c	jsr $8cd4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9290	20 f9 8c	jsr $8cf9			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9293	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9295					_I32DivideLoop:
.9295	e8		inx				inx
.9296	e8		inx				inx
.9297	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.929a	ca		dex				dex
.929b	ca		dex				dex
.929c	20 13 8d	jsr $8d13			jsr 	NSMRotateLeft
.929f	20 cb 92	jsr $92cb			jsr 	DivideCheckSubtract 		; check if subtract possible
.92a2	90 03		bcc $92a7			bcc 	_I32DivideNoCarryIn
.92a4	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.92a7					_I32DivideNoCarryIn:
.92a7	88		dey				dey 								; loop round till division completed.
.92a8	d0 eb		bne $9295			bne 	_I32DivideLoop
.92aa	7a		ply				ply 								; restore AXY and exit
.92ab	68		pla				pla
.92ac	60		rts				rts
.92ad					Int32ShiftDivide:
.92ad	48		pha				pha 								; save AY
.92ae	5a		phy				phy
.92af	e8		inx				inx 								; clear S[X+2]
.92b0	e8		inx				inx
.92b1	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero
.92b4	ca		dex				dex
.92b5	ca		dex				dex
.92b6	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.92b8					_I32SDLoop:
.92b8	20 cb 92	jsr $92cb			jsr 	DivideCheckSubtract 		; check if subtract possible
.92bb	e8		inx				inx
.92bc	e8		inx				inx
.92bd	20 13 8d	jsr $8d13			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.92c0	ca		dex				dex
.92c1	ca		dex				dex
.92c2	20 13 8d	jsr $8d13			jsr 	NSMRotateLeft
.92c5	88		dey				dey 	 							; do 31 times
.92c6	d0 f0		bne $92b8			bne 	_I32SDLoop
.92c8	7a		ply				ply 								; restore AY and exit
.92c9	68		pla				pla
.92ca	60		rts				rts
.92cb					DivideCheckSubtract:
.92cb	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.92ce	b0 04		bcs $92d4			bcs 	_DCSExit 					; if carry set, then could do, exit
.92d0	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; add it back in
.92d3	18		clc				clc 								; and return False
.92d4					_DCSExit:
.92d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.92d5					MulInteger:
.92d5	fa		plx				plx
.92d6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.92d9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.92dc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92dd	0a		asl a				asl 	a
.92de	10 05		bpl $92e5			bpl 	_NotRef
.92e0	48		pha				pha
.92e1	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92e4	68		pla				pla
.92e5					_NotRef:
.92e5	0a		asl a				asl 	a 							; put MSB of type into A:7
.92e6	30 0b		bmi $92f3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92e8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92eb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.92ee	f0 06		beq $92f6			beq 	_IntegerCode 				; if clear, then we have two integers
.92f0	4c 29 95	jmp $9529			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.92f3					_StringData:
.92f3	4c c7 96	jmp $96c7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.92f6					_IntegerCode:
.92f6	20 03 93	jsr $9303			jsr 	MultiplyShort
.92f9	c9 00		cmp #$00			cmp 	#0
.92fb	f0 05		beq $9302			beq 	_MIExit
.92fd	a9 04		lda #$04		lda	#4
.92ff	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9302					_MIExit:
.9302	60		rts				rts
.9303					MultiplyShort:
.9303	5a		phy				phy 								; save Y
.9304	20 d4 8c	jsr $8cd4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9307	20 f9 8c	jsr $8cf9			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.930a	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.930c					_I32MLoop:
.930c	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.930f	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9312	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9315	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9318	f0 28		beq $9342			beq 	_I32MExit 					; exit if zero
.931a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.931d	29 01		and #$01			and 	#1
.931f	f0 0e		beq $932f			beq 	_I32MNoAdd
.9321	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9324	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9327	10 06		bpl $932f			bpl 	_I32MNoAdd
.9329					_I32ShiftRight:
.9329	20 20 8d	jsr $8d20			jsr 	NSMShiftRight 				; shift S[X] right
.932c	c8		iny				iny 								; increment shift count
.932d	80 0a		bra $9339			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.932f					_I32MNoAdd:
.932f	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9332	70 f5		bvs $9329			bvs 	_I32ShiftRight 				; instead.
.9334	e8		inx				inx
.9335	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9338	ca		dex				dex
.9339					_I32MShiftUpper:
.9339	e8		inx				inx 								; shift S[X+2] right
.933a	e8		inx				inx
.933b	20 20 8d	jsr $8d20			jsr 	NSMShiftRight
.933e	ca		dex				dex
.933f	ca		dex				dex
.9340	80 ca		bra $930c			bra 	_I32MLoop 					; try again.
.9342					_I32MExit:
.9342	20 48 93	jsr $9348			jsr 	CalculateSign
.9345	98		tya				tya 								; shift in A
.9346	7a		ply				ply 								; restore Y and exit
.9347	60		rts				rts
.9348					CalculateSign:
.9348	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.934b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.934e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9351	0a		asl a				asl 	a 							; shift bit 7 into carry
.9352	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9355	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.83c9					CompareStrings:
.83c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83cc	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83cf	29 10		and #$10			and 	#NSBIsString
.83d1	f0 2c		beq $83ff			beq 	_CSTypeError
.83d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83d6	85 36		sta $36				sta 	zTemp0
.83d8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83db	85 37		sta $37				sta 	zTemp0+1
.83dd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83e0	85 38		sta $38				sta 	zTemp1
.83e2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83e5	85 39		sta $39				sta 	zTemp1+1
.83e7	5a		phy				phy 								; save Y so we can access strings
.83e8	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83ea					_CSLoop:
.83ea	c8		iny				iny
.83eb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83ed	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83ef	d0 06		bne $83f7			bne 	_CSDifferent
.83f1	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83f3	d0 f5		bne $83ea			bne 	_CSLoop 					; still comparing
.83f5					_CSExit:
.83f5	7a		ply				ply 								; reached end, return zero in A from EOS
.83f6	60		rts				rts
.83f7					_CSDifferent:
.83f7	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83f9	90 fa		bcc $83f5			bcc		_CSExit
.83fb	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83fd	80 f6		bra $83f5			bra 	_CSExit
.83ff					_CSTypeError:
.83ff	4c bd 96	jmp $96bd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8402					ShiftLeft:
.8402	38		sec				sec
.8403	80 01		bra $8406			bra 	ShiftMain
.8405					ShiftRight:
.8405	18		clc				clc
.8406					ShiftMain:
.8406	fa		plx				plx 								; restore X
.8407	08		php				php 								; save direction
.8408	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.840b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.840e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.840f	0a		asl a				asl 	a
.8410	10 05		bpl $8417			bpl 	_NotRef
.8412	48		pha				pha
.8413	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8416	68		pla				pla
.8417					_NotRef:
.8417	0a		asl a				asl 	a
.8418	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.841a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.841d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8420	f0 03		beq $8425			beq 	_IntegerCode 				; if clear, then we have two integers
.8422	4c bd 96	jmp $96bd			jmp 	TypeError 					; anything else, type mismatch.
.8425					_IntegerCode:
.8425	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8428	29 e0		and #$e0			and 	#$E0
.842a	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.842d	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8430	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8433	d0 13		bne $8448			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8435					_SMLoop:
.8435	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8438	30 11		bmi $844b			bmi 	_SMExit 					; exit if done.
.843a	28		plp				plp 								; restore direcition setting
.843b	08		php				php
.843c	90 05		bcc $8443			bcc 	_SMRight
.843e	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; shift left if CS
.8441	80 f2		bra $8435			bra 	_SMLoop
.8443					_SMRight:
.8443	20 20 8d	jsr $8d20			jsr 	NSMShiftRight 				; shift right if CC
.8446	80 ed		bra $8435			bra 	_SMLoop
.8448					_SMExit0:
.8448	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero 					; return zero.
.844b					_SMExit:
.844b	28		plp				plp 								; throw direction
.844c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.844d					AddTopTwoStack:
.844d	18		clc				clc
.844e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8451	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8454	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8457	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.845a	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.845d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8460	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8463	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8466	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8469	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.846c	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.846f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8472	60		rts				rts
.8473					SubTopTwoStack:
.8473	38		sec				sec
.8474	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8477	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.847a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.847d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8480	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8483	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8486	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8489	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.848c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.848f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8492	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8495	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8498	60		rts				rts
.8499					AddInteger:
.8499	fa		plx				plx
.849a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.849d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84a0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84a1	0a		asl a				asl 	a
.84a2	10 05		bpl $84a9			bpl 	_NotRef
.84a4	48		pha				pha
.84a5	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84a8	68		pla				pla
.84a9					_NotRef:
.84a9	0a		asl a				asl 	a 							; put MSB of type into A:7
.84aa	30 0b		bmi $84b7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84ac	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84af	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84b2	f0 06		beq $84ba			beq 	_IntegerCode 				; if clear, then we have two integers
.84b4	4c b1 93	jmp $93b1			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84b7					_StringData:
.84b7	4c 6c 83	jmp $836c			jmp 	StringConcat							; at least one string - don't know both are strings.
.84ba					_IntegerCode:
.84ba					AddCode:
.84ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84bd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84c0	10 8b		bpl $844d			bpl 	AddTopTwoStack
.84c2	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; do a physical subtraction
.84c5	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84c8	10 09		bpl $84d3			bpl 	_AddExit
.84ca	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84cd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84d0	20 b2 8c	jsr $8cb2			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84d3					_AddExit:
.84d3	60		rts				rts
.84d4					SubInteger:
.84d4	fa		plx				plx
.84d5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84d8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84db	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84dc	0a		asl a				asl 	a
.84dd	10 05		bpl $84e4			bpl 	_NotRef
.84df	48		pha				pha
.84e0	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84e3	68		pla				pla
.84e4					_NotRef:
.84e4	0a		asl a				asl 	a 							; put MSB of type into A:7
.84e5	30 0b		bmi $84f2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84e7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84ea	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ed	f0 06		beq $84f5			beq 	_IntegerCode 				; if clear, then we have two integers
.84ef	4c b6 93	jmp $93b6			jmp 	FloatingPointSub 							; otherwise at least one float.
.84f2					_StringData:
.84f2	4c c7 96	jmp $96c7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84f5					_IntegerCode:
.84f5	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84f8	49 80		eor #$80			eor 	#$80
.84fa	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84fd	80 bb		bra $84ba			bra 	AddCode 					; and do the same code as add.
.84ff					AndInteger:
.84ff	fa		plx				plx
.8500	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8503	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8506	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8507	0a		asl a				asl 	a
.8508	10 05		bpl $850f			bpl 	_NotRef
.850a	48		pha				pha
.850b	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.850e	68		pla				pla
.850f					_NotRef:
.850f	0a		asl a				asl 	a
.8510	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8512	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8515	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8518	f0 03		beq $851d			beq 	_IntegerCode 				; if clear, then we have two integers
.851a	4c bd 96	jmp $96bd			jmp 	TypeError 					; anything else, type mismatch.
.851d					_IntegerCode:
.851d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8520	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8523	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8526	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8529	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.852c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.852f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8532	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8535	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8538	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.853b	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.853e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8541	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8544	60		rts				rts
.8545					OraInteger:
.8545	fa		plx				plx
.8546	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8549	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.854c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.854d	0a		asl a				asl 	a
.854e	10 05		bpl $8555			bpl 	_NotRef
.8550	48		pha				pha
.8551	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8554	68		pla				pla
.8555					_NotRef:
.8555	0a		asl a				asl 	a
.8556	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8558	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.855b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.855e	f0 03		beq $8563			beq 	_IntegerCode 				; if clear, then we have two integers
.8560	4c bd 96	jmp $96bd			jmp 	TypeError 					; anything else, type mismatch.
.8563					_IntegerCode:
.8563	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8566	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8569	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.856c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.856f	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8572	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8575	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8578	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.857b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.857e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8581	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8584	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8587	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.858a	60		rts				rts
.858b					EorInteger:
.858b	fa		plx				plx
.858c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.858f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8592	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8593	0a		asl a				asl 	a
.8594	10 05		bpl $859b			bpl 	_NotRef
.8596	48		pha				pha
.8597	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.859a	68		pla				pla
.859b					_NotRef:
.859b	0a		asl a				asl 	a
.859c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.859e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85a1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85a4	f0 03		beq $85a9			beq 	_IntegerCode 				; if clear, then we have two integers
.85a6	4c bd 96	jmp $96bd			jmp 	TypeError 					; anything else, type mismatch.
.85a9					_IntegerCode:
.85a9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85ac	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85b2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85b5	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85bb	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85be	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85c4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85c7	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85ca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85cd	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85d0	60		rts				rts
.85d1					WordIndirect:
.85d1	fa		plx				plx
.85d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85d9	0a		asl a				asl 	a
.85da	10 05		bpl $85e1			bpl 	_NotRef
.85dc	48		pha				pha
.85dd	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85e0	68		pla				pla
.85e1					_NotRef:
.85e1	0a		asl a				asl 	a
.85e2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85e4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85e7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85ea	f0 03		beq $85ef			beq 	_IntegerCode 				; if clear, then we have two integers
.85ec	4c bd 96	jmp $96bd			jmp 	TypeError 					; anything else, type mismatch.
.85ef					_IntegerCode:
.85ef	20 ba 84	jsr $84ba			jsr 	AddCode 					; add the two values
.85f2	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.85f4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85f7	60		rts				rts
.85f8					ByteIndirect:
.85f8	fa		plx				plx
.85f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85fc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8600	0a		asl a				asl 	a
.8601	10 05		bpl $8608			bpl 	_NotRef
.8603	48		pha				pha
.8604	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8607	68		pla				pla
.8608					_NotRef:
.8608	0a		asl a				asl 	a
.8609	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.860b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.860e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8611	f0 03		beq $8616			beq 	_IntegerCode 				; if clear, then we have two integers
.8613	4c bd 96	jmp $96bd			jmp 	TypeError 					; anything else, type mismatch.
.8616					_IntegerCode:
.8616	20 ba 84	jsr $84ba			jsr 	AddCode 					; add the two values
.8619	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.861b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.861e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9356					ConvertInt16:
.9356	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9359	8e 10 06	stx $0610			stx 	NSMantissa1
.935c	9c 18 06	stz $0618			stz 	NSMantissa2
.935f	9c 20 06	stz $0620			stz 	NSMantissa3
.9362	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9365	a2 00		ldx #$00			ldx 	#0 							; stack level
.9367	a9 0a		lda #$0a			lda 	#10 						; base
.9369	80 00		bra $936b			bra 	ConvertInt32
.936b					ConvertInt32:
.936b	5a		phy				phy
.936c	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.936e	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9371	10 08		bpl $937b			bpl 	_CI32NotNeg
.9373	48		pha				pha
.9374	a9 2d		lda #$2d			lda 	#'-'
.9376	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9379	c8		iny				iny
.937a	68		pla				pla
.937b					_CI32NotNeg:
.937b	20 89 93	jsr $9389			jsr 	_CI32DivideConvert 			; recursive conversion
.937e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9380	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9383	7a		ply				ply
.9384	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9386	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9388	60		rts				rts
.9389					_CI32DivideConvert:
.9389	e8		inx				inx 								; write to next slot up
.938a	20 ff 8c	jsr $8cff			jsr 	NSMSetByte
.938d	ca		dex				dex
.938e	20 8b 92	jsr $928b			jsr 	Int32Divide 				; divide
.9391	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9394	48		pha				pha
.9395	20 3a 92	jsr $923a			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9398	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; is it zero ?
.939b	f0 06		beq $93a3			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.939d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93a0	20 89 93	jsr $9389			jsr 	_CI32DivideConvert 			; and recusrively call.
.93a3					_CI32NoRecurse:
.93a3	68		pla				pla 								; remainder
.93a4	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.93a6	90 02		bcc $93aa			bcc 	_CI32NotHex
.93a8	69 26		adc #$26			adc 	#6+32
.93aa					_CI32NotHex:
.93aa	69 30		adc #$30			adc 	#48
.93ac	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.93af	c8		iny				iny
.93b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.861f					PrecedenceLevel:
>861f	04					.byte	 4	; $00 <<
>8620	02					.byte	 2	; $01 <=
>8621	02					.byte	 2	; $02 <>
>8622	00					.byte	 0	; $03 !!3
>8623	00					.byte	 0	; $04 ><
>8624	02					.byte	 2	; $05 >=
>8625	04					.byte	 4	; $06 >>
>8626	00					.byte	 0	; $07 !!7
>8627	00					.byte	 0	; $08 !!8
>8628	00					.byte	 0	; $09 !!9
>8629	00					.byte	 0	; $0a !!10
>862a	00					.byte	 0	; $0b !!11
>862b	00					.byte	 0	; $0c !!12
>862c	00					.byte	 0	; $0d !!13
>862d	00					.byte	 0	; $0e !!14
>862e	00					.byte	 0	; $0f !!15
>862f	00					.byte	 0	; $10 @
>8630	00					.byte	 0	; $11 !!17
>8631	00					.byte	 0	; $12 !!18
>8632	00					.byte	 0	; $13 [
>8633	04					.byte	 4	; $14 \
>8634	00					.byte	 0	; $15 ]
>8635	01					.byte	 1	; $16 ^
>8636	00					.byte	 0	; $17 _
>8637	00					.byte	 0	; $18 `
>8638	00					.byte	 0	; $19 !!25
>8639	00					.byte	 0	; $1a !!26
>863a	00					.byte	 0	; $1b {
>863b	01					.byte	 1	; $1c |
>863c	00					.byte	 0	; $1d }
>863d	00					.byte	 0	; $1e ~
>863e	00					.byte	 0	; $1f [7m<7F>[m
>863f	00					.byte	 0	; $20
>8640	05					.byte	 5	; $21 !
>8641	00					.byte	 0	; $22 "
>8642	00					.byte	 0	; $23 #
>8643	05					.byte	 5	; $24 $
>8644	04					.byte	 4	; $25 %
>8645	01					.byte	 1	; $26 &
>8646	00					.byte	 0	; $27 '
>8647	00					.byte	 0	; $28 (
>8648	00					.byte	 0	; $29 )
>8649	04					.byte	 4	; $2a *
>864a	03					.byte	 3	; $2b +
>864b	00					.byte	 0	; $2c ,
>864c	03					.byte	 3	; $2d -
>864d	00					.byte	 0	; $2e .
>864e	04					.byte	 4	; $2f /
>864f	00					.byte	 0	; $30 0
>8650	00					.byte	 0	; $31 1
>8651	00					.byte	 0	; $32 2
>8652	00					.byte	 0	; $33 3
>8653	00					.byte	 0	; $34 4
>8654	00					.byte	 0	; $35 5
>8655	00					.byte	 0	; $36 6
>8656	00					.byte	 0	; $37 7
>8657	00					.byte	 0	; $38 8
>8658	00					.byte	 0	; $39 9
>8659	00					.byte	 0	; $3a :
>865a	00					.byte	 0	; $3b ;
>865b	02					.byte	 2	; $3c <
>865c	02					.byte	 2	; $3d =
>865d	02					.byte	 2	; $3e >
>865e	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.865f					EvaluateExpressionAt0:
.865f	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8661					EvaluateExpression:
.8661	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8663					EvaluateExpressionAtPrecedence:
.8663	48		pha				pha 								; save precedence level
.8664	20 29 89	jsr $8929			jsr 	EvaluateTerm 				; evaluate term into level X.
.8667	68		pla				pla 								; restore precedence level.
.8668					_EXPRLoop:
.8668	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.866a	b1 30		lda ($30),y			lda 	(codePtr),y
.866c	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.866e	b0 25		bcs $8695			bcs 	_EXPRExit
.8670	da		phx				phx 								; read the operator precedence
.8671	aa		tax				tax
.8672	bd 1f 86	lda $861f,x			lda 	PrecedenceLevel,x
.8675	fa		plx				plx
.8676	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8678	f0 1b		beq $8695			beq 	_EXPRExit
.867a	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.867c	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.867e	c5 37		cmp $37				cmp 	zTemp0+1
.8680	b0 13		bcs $8695			bcs		_EXPRExit 					; if current >= operator exit
.8682	48		pha				pha 								; save current precedence.
.8683	b1 30		lda ($30),y			lda 	(codePtr),y
.8685	c8		iny				iny
.8686	48		pha				pha
.8687	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8689	e8		inx				inx 								; work out the right hand side.
.868a	20 63 86	jsr $8663			jsr 	EvaluateExpressionAtPrecedence
.868d	ca		dex				dex
.868e	68		pla				pla 								; get operator, call the code.
.868f	20 98 86	jsr $8698			jsr 	_EXPRCaller
.8692	68		pla				pla 								; restore precedence level
.8693	80 d3		bra $8668			bra 	_EXPRLoop 					; and go round.
.8695					_EXPRExit:
.8695	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8697	60		rts				rts
.8698					_EXPRCaller:
.8698	da		phx				phx 								; save on stack, first thing is to restore it
.8699	0a		asl a				asl 	a 							; double so can use vectors into X
.869a	aa		tax				tax
.869b	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.93b1					FloatingPointAdd:
.93b1	20 52 95	jsr $9552			jsr 	FloatPrepare 				; prepare for floats
.93b4	80 0b		bra $93c1			bra 	FloatAdd
.93b6					FloatingPointSub:
.93b6	20 52 95	jsr $9552			jsr 	FloatPrepare 				; prepare for floats
.93b9					FloatSubtract:
.93b9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.93bc	49 80		eor #$80			eor 	#$80
.93be	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.93c1					FloatAdd:
.93c1	48		pha				pha
.93c2	5a		phy				phy
.93c3	20 63 95	jsr $9563			jsr 	NSNormalise 				; normalise S[X]
.93c6	f0 54		beq $941c			beq 	_FAReturn1
.93c8	e8		inx				inx 								; normalise S[X+1]
.93c9	20 63 95	jsr $9563			jsr 	NSNormalise
.93cc	ca		dex				dex
.93cd	c9 00		cmp #$00			cmp 	#0
.93cf	f0 6f		beq $9440			beq 	_FAExit 					; if so, just return A
.93d1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.93d4	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.93d7	f0 1b		beq $93f4			beq 	_FAExponentsEqual
.93d9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.93dc	a8		tay				tay
.93dd	38		sec				sec 								; do a signed comparison of the exponents.
.93de	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.93e1	50 02		bvc $93e5			bvc 	_FANoSignedChange
.93e3	49 80		eor #$80			eor 	#$80
.93e5					_FANoSignedChange:
.93e5	29 80		and #$80			and 	#$80
.93e7	10 03		bpl $93ec			bpl 	_FAHaveMax
.93e9	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.93ec					_FAHaveMax:
.93ec	20 43 94	jsr $9443			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.93ef	e8		inx				inx
.93f0	20 43 94	jsr $9443			jsr 	_FAShiftToExponent
.93f3	ca		dex				dex
.93f4					_FAExponentsEqual:
.93f4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.93f7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.93fa	30 10		bmi $940c			bmi 	_FADifferentSigns
.93fc	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.93ff	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9402	10 3c		bpl $9440			bpl 	_FAExit 					; if no, we are done.
.9404	20 20 8d	jsr $8d20			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9407	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.940a	80 34		bra $9440			bra 	_FAExit
.940c					_FADifferentSigns:
.940c	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.940f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9412	10 2c		bpl $9440			bpl 	_FAExit 					; if no, we are done.
.9414	20 a9 8c	jsr $8ca9			jsr 	NSMNegate 					; netate result
.9417	20 b2 8c	jsr $8cb2			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.941a	80 24		bra $9440			bra 	_FAExit
.941c					_FAReturn1:
.941c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.941f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9422	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9425	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9428	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.942b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.942e	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9431	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9434	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9437	9d 28 06	sta $0628,x			sta 	NSExponent,x
.943a	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.943d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9440					_FAExit:
.9440	7a		ply				ply
.9441	68		pla				pla
.9442	60		rts				rts
.9443					_FAShiftToExponent:
.9443					_FAShiftToExponent2:
.9443	98		tya				tya 								; compare Y to exponent
.9444	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9447	f0 08		beq $9451			beq 	_FASEExit 					; exit if so.
.9449	20 20 8d	jsr $8d20			jsr 	NSMShiftRight	 			; shift the mantissa right
.944c	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.944f	80 f2		bra $9443			bra 	_FAShiftToExponent2
.9451					_FASEExit:
.9451	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9452					CompareFloat:
.9452	20 b9 93	jsr $93b9			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9455	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9458	29 f8		and #$f8			and 	#$F8
.945a	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.945d	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9460	f0 09		beq $946b			beq 	_FCExit 					; zero, so approximately identical
.9462	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9464	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9467	10 02		bpl $946b			bpl 	_FCExit
.9469					_FCNegative:
.9469	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.946b					_FCExit:
.946b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.946c					FDivideCommand:
.946c	fa		plx				plx	 								; restore stack position
.946d	20 52 95	jsr $9552			jsr 	FloatPrepare 				; prepare for floats
.9470					FloatDivide:
.9470	48		pha				pha
.9471	e8		inx				inx
.9472	20 63 95	jsr $9563			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9475	ca		dex				dex
.9476	c9 00		cmp #$00			cmp 	#0
.9478	f0 20		beq $949a			beq 	_FDZero
.947a	20 63 95	jsr $9563			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.947d	f0 19		beq $9498			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.947f	20 ad 92	jsr $92ad			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9482	20 3a 92	jsr $923a			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9485	20 63 95	jsr $9563			jsr		NSNormalise 				; renormalise
.9488	20 48 93	jsr $9348			jsr 	CalculateSign 				; calculate result sign
.948b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.948e	38		sec				sec
.948f	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9492	38		sec				sec
.9493	e9 1e		sbc #$1e			sbc 	#30
.9495	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9498					_FDExit:
.9498	68		pla				pla
.9499	60		rts				rts
.949a					_FDZero:
.949a	a9 03		lda #$03		lda	#3
.949c	4c 5f 82	jmp $825f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.949f					FloatFractionalPart:
.949f	5a		phy				phy
.94a0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.94a3	29 7f		and #$7f			and 	#$7F
.94a5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94a8	20 63 95	jsr $9563			jsr 	NSNormalise
.94ab	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.94ae	38		sec				sec
.94af	e9 e0		sbc #$e0			sbc 	#$E0
.94b1	90 31		bcc $94e4			bcc 	_FFPExit 					; already fractional
.94b3	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.94b5	b0 2a		bcs $94e1			bcs 	_FFPZero
.94b7	a8		tay				tay 								; put count to do in Y
.94b8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.94bb	20 e6 94	jsr $94e6			jsr 	_FFPPartial
.94be	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94c1	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.94c4	20 e6 94	jsr $94e6			jsr 	_FFPPartial
.94c7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94ca	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94cd	20 e6 94	jsr $94e6			jsr 	_FFPPartial
.94d0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.94d6	20 e6 94	jsr $94e6			jsr 	_FFPPartial
.94d9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94dc	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; zeroed check.
.94df	d0 03		bne $94e4			bne 	_FFPExit
.94e1					_FFPZero:
.94e1	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero
.94e4					_FFPExit:
.94e4	7a		ply				ply
.94e5	60		rts				rts
.94e6					_FFPPartial:
.94e6	c0 00		cpy #$00			cpy 	#0 							; no more to do
.94e8	f0 17		beq $9501			beq 	_FFFPPExit
.94ea	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.94ec	b0 0c		bcs $94fa			bcs 	_FFFPPWholeByte
.94ee	5a		phy				phy
.94ef					_FFFPPLeft:
.94ef	0a		asl a				asl 	a
.94f0	88		dey				dey
.94f1	d0 fc		bne $94ef			bne 	_FFFPPLeft
.94f3	7a		ply				ply
.94f4					_FFFPPRight:
.94f4	4a		lsr a				lsr 	a
.94f5	88		dey				dey
.94f6	d0 fc		bne $94f4			bne 	_FFFPPRight
.94f8	80 07		bra $9501			bra 	_FFFPPExit
.94fa					_FFFPPWholeByte:
.94fa	98		tya				tya 								; subtract 8 from count
.94fb	38		sec				sec
.94fc	e9 08		sbc #$08			sbc 	#8
.94fe	a8		tay				tay
.94ff	a9 00		lda #$00			lda 	#0 							; and clear all
.9501					_FFFPPExit:
.9501	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9502					FloatIntegerPart:
.9502	48		pha				pha
.9503	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9506	f0 1f		beq $9527			beq 	_FIPExit 					; if so do nothing
.9508	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; is it zero ?
.950b	f0 17		beq $9524			beq 	_FIPZero 					; if so return zero.
.950d	20 63 95	jsr $9563			jsr 	NSNormalise 				; normalise
.9510	f0 12		beq $9524			beq 	_FIPZero 					; normalised to zero, exit zero
.9512					_FIPShift:
.9512	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9515	10 08		bpl $951f			bpl 	_FIPCheckZero
.9517	20 20 8d	jsr $8d20			jsr 	NSMShiftRight 				; shift mantissa right
.951a	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.951d	80 f3		bra $9512			bra 	_FIPShift
.951f					_FIPCheckZero:
.951f	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; avoid -0 problem
.9522	d0 03		bne $9527			bne 	_FIPExit 					; set to zero if mantissa zero.
.9524					_FIPZero:
.9524	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero
.9527					_FIPExit:
.9527	68		pla				pla
.9528	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9529					FloatingPointMultiply:
.9529	20 52 95	jsr $9552			jsr 	FloatPrepare 				; prepare for floats
.952c					FloatMultiply:
.952c	48		pha				pha
.952d	20 63 95	jsr $9563			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9530	f0 1b		beq $954d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9532	e8		inx				inx
.9533	20 63 95	jsr $9563			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9536	ca		dex				dex
.9537	c9 00		cmp #$00			cmp 	#0
.9539	f0 0f		beq $954a			beq 	_FDSetZero
.953b	20 03 93	jsr $9303			jsr 	MultiplyShort 				; calculate the result.
.953e	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9541	18		clc				clc
.9542	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9545	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9548	80 03		bra $954d			bra 	_FDExit
.954a					_FDSetZero:
.954a	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero 					; return 0
.954d					_FDExit:
.954d	20 63 95	jsr $9563			jsr 	NSNormalise 				; normalise the result
.9550	68		pla				pla
.9551	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9552					FloatPrepare:
.9552	20 68 87	jsr $8768			jsr 	DereferenceTopTwo 			; dereference the top two values
.9555	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9558	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.955b	29 10		and #$10			and 	#NSBIsString
.955d	d0 01		bne $9560			bne 	_FDType
.955f	60		rts				rts
.9560					_FDType:
.9560	4c bd 96	jmp $96bd			jmp 	TypeError
.9563					NSNormalise:
.9563	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9566	29 80		and #$80			and 	#$80
.9568	09 08		ora #$08			ora 	#NSTFloat
.956a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.956d	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; if zero exit
.9570	d0 09		bne $957b			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9572	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9575	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9578	a9 00		lda #$00			lda 	#0 							; set Z flag
.957a	60		rts				rts
.957b					_NSNormaliseOptimise:
.957b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.957e	d0 22		bne $95a2			bne 	_NSNormaliseLoop
.9580	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9583	30 1d		bmi $95a2			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9585	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9588	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.958b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.958e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9591	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9594	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9597	bd 28 06	lda $0628,x			lda 	NSExponent,x
.959a	38		sec				sec
.959b	e9 08		sbc #$08			sbc 	#8
.959d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95a0	80 d9		bra $957b			bra 	_NSNormaliseOptimise
.95a2					_NSNormaliseLoop:
.95a2	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.95a5	70 08		bvs $95af			bvs 	_NSNExit 					; exit if so with Z flag clear
.95a7	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; shift mantissa left
.95aa	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.95ad	80 f3		bra $95a2			bra 	_NSNormaliseLoop
.95af					_NSNExit:
.95af	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.95b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.869e					AssignNumber:
.869e	5a		phy				phy
.869f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.86a2	85 36		sta $36				sta 	zTemp0
.86a4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a7	85 37		sta $37				sta 	zTemp0+1
.86a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.86ac	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.86ae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86b1	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.86b3	c9 08		cmp #$08			cmp 	#NSTFloat
.86b5	f0 2a		beq $86e1			beq 	_ANFloat
.86b7	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.86ba	f0 05		beq $86c1			beq		_ANNotFloat
.86bc	e8		inx				inx
.86bd	20 02 95	jsr $9502			jsr 	FloatIntegerPart 			; make it an integer
.86c0	ca		dex				dex
.86c1					_ANNotFloat:
.86c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.86c4	29 03		and #$03			and 	#3
.86c6	d0 05		bne $86cd			bne 	_ANByteWord
.86c8	20 ed 86	jsr $86ed			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.86cb	80 1e		bra $86eb			bra 	_ANExit
.86cd					_ANByteWord:
.86cd	48		pha				pha 								; save count
.86ce	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.86d1	92 36		sta ($36)			sta 	(zTemp0)
.86d3	68		pla				pla
.86d4	c9 01		cmp #$01			cmp	 	#1
.86d6	f0 13		beq $86eb			beq 	_ANExit
.86d8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.86db	a0 01		ldy #$01			ldy 	#1
.86dd	91 36		sta ($36),y			sta 	(zTemp0),y
.86df	80 0a		bra $86eb			bra 	_ANExit
.86e1					_ANFloat:
.86e1	20 ed 86	jsr $86ed			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.86e4	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.86e7	a0 04		ldy #$04			ldy 	#4
.86e9	91 36		sta ($36),y			sta 	(zTemp0),y
.86eb					_ANExit:
.86eb	7a		ply				ply
.86ec	60		rts				rts
.86ed					_ANCopy4PackSign:
.86ed	a0 03		ldy #$03			ldy 	#3
.86ef	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.86f2	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.86f4	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.86f7	91 36		sta ($36),y			sta 	(zTemp0),y
.86f9	88		dey				dey
.86fa	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.86fd	91 36		sta ($36),y			sta 	(zTemp0),y
.86ff	88		dey				dey
.8700	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8703	91 36		sta ($36),y			sta 	(zTemp0),y
.8705	88		dey				dey
.8706	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8709	91 36		sta ($36),y			sta 	(zTemp0),y
.870b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.870c					AssignString:
>870c	db						.byte 	$DB 						; causes a break in the emulator
.870d	5a		phy				phy
.870e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8711	85 38		sta $38				sta 	zTemp1
.8713	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8716	85 39		sta $39				sta 	zTemp1+1
.8718	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 				; the high byte of the target address
.871b	f0 23		beq $8740			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.871d	38		sec				sec 								; put Address-2 in zTemp0 - this is the size/status/string record
.871e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; of concreted strings
.8721	e9 02		sbc #$02			sbc 	#2
.8723	85 36		sta $36				sta 	zTemp0
.8725	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8728	e9 00		sbc #$00			sbc 	#0
.872a	85 37		sta $37				sta 	zTemp0+1
.872c	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.872e					_ASGetLength:
.872e	c8		iny				iny
.872f	b1 38		lda ($38),y			lda 	(zTemp1),y
.8731	d0 fb		bne $872e			bne 	_ASGetLength
.8733	98		tya				tya 								; is this length <= current length
.8734	d2 36		cmp ($36)			cmp 	(zTemp0)
.8736	90 20		bcc $8758			bcc 	_ASCopyString
.8738	f0 1e		beq $8758			beq 	_ASCopyString
.873a	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.873c	a0 01		ldy #$01			ldy 	#1
.873e	91 36		sta ($36),y			sta 	(zTemp0),y
.8740					_ASNewStringRequired:
.8740	e8		inx				inx 								; concrete the new string.
.8741	20 6a 97	jsr $976a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0)
.8744	ca		dex				dex
.8745	18		clc				clc
.8746	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8749	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.874b	92 36		sta ($36)			sta 	(zTemp0)
.874d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8750	69 00		adc #$00			adc 	#0
.8752	a0 01		ldy #$01			ldy 	#1
.8754	91 36		sta ($36),y			sta 	(zTemp0),y
.8756	80 0e		bra $8766			bra 	_ASExit
.8758					_ASCopyString:
.8758	a0 00		ldy #$00			ldy 	#0
.875a					_ASCopyLoop:
.875a	b1 38		lda ($38),y			lda 	(zTemp1),y
.875c	c8		iny				iny
.875d	c8		iny				iny
.875e	91 36		sta ($36),y			sta 	(zTemp0),y
.8760	88		dey				dey
.8761	88		dey				dey
.8762	c9 00		cmp #$00			cmp 	#0
.8764	d0 f4		bne $875a			bne 	_ASCopyLoop
.8766					_ASExit:
.8766	7a		ply				ply
.8767	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8768					DereferenceTopTwo:
.8768	e8		inx				inx
.8769	20 6d 87	jsr $876d			jsr 	Dereference 				; deref x+1
.876c	ca		dex				dex  								; falls through to deref x
.876d					Dereference:
.876d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8770	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8772	f0 57		beq $87cb			beq 	_DRFExit 					; not a reference
.8774	5a		phy				phy
.8775	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8778	85 36		sta $36				sta 	zTemp0
.877a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.877d	85 37		sta $37				sta 	zTemp0+1
.877f	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8782	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8784	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8787	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.878a	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.878c	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.878e	f0 0f		beq $879f			beq 	_DRFDereferenceTwo
.8790	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8792	f0 39		beq $87cd			beq 	_DRFFull
.8794	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8797	29 03		and #$03			and 	#3
.8799	f0 32		beq $87cd			beq 	_DRFFull 					; the whole word
.879b	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.879d	f0 07		beq $87a6			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.879f					_DRFDereferenceTwo:
.879f	a0 01		ldy #$01			ldy 	#1
.87a1	b1 36		lda ($36),y			lda 	(zTemp0),y
.87a3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87a6					_DRFClear23:
.87a6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.87a9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.87af	29 18		and #$18			and 	#NSBTypeMask
.87b1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87b4	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.87b6	d0 12		bne $87ca			bne 	_DRFNotString
.87b8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.87bb	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.87be	d0 0a		bne $87ca			bne 	_DRFNotString
.87c0	a9 cc		lda #$cc			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.87c2	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.87c5	a9 87		lda #$87			lda 	#_DRFNullString >> 8
.87c7	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.87ca					_DRFNotString
.87ca	7a		ply				ply 								; restore Y and exit
.87cb					_DRFExit:
.87cb	60		rts				rts
.87cc					_DRFNullString:
>87cc	00						.byte 	0
.87cd					_DRFFull:
.87cd	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.87cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87d4	c8		iny				iny
.87d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87da	c8		iny				iny
.87db	b1 36		lda ($36),y			lda 	(zTemp0),y
.87dd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87e0	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.87e3	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.87e6	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.87e8	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.87eb	f0 06		beq $87f3			beq 	_DRFNoExponent
.87ed	c8		iny				iny 								; if not, read the exponent as well.
.87ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.87f0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.87f3					_DRFNoExponent:
.87f3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.87f6	10 0d		bpl $8805			bpl 	_DRFExit2 					; if not, then exit.
.87f8	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.87fa	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8800	09 80		ora #$80			ora 	#NSBIsNegative
.8802	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8805					_DRFExit2:
.8805	7a		ply				ply
.8806	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8807					EncodeNumberStart:
.8807	38		sec				sec
.8808	80 01		bra $880b			bra 	EncodeNumberContinue+1
.880a					EncodeNumberContinue:
.880a	18		clc				clc
.880b					EncodeNumber:
.880b	08		php				php 								; save reset.
.880c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.880e	f0 12		beq $8822			beq 	_ENIsOkay
.8810	c9 30		cmp #$30			cmp 	#"0"
.8812	90 04		bcc $8818			bcc 	_ENBadNumber
.8814	c9 3a		cmp #$3a			cmp 	#"9"+1
.8816	90 0a		bcc $8822			bcc 	_ENIsOkay
.8818					_ENBadNumber:
.8818	28		plp				plp 								; throw saved reset
.8819	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.881c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.881e	f0 7e		beq $889e			beq 	_ENConstructFinal
.8820					_ENFail:
.8820	18		clc				clc 								; not allowed
.8821	60		rts				rts
.8822					_ENIsOkay:
.8822	28		plp				plp 								; are we restarting
.8823	90 15		bcc $883a			bcc 	_ENNoRestart
.8825					_ENStartEncode:
.8825	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8827	f0 0c		beq $8835			beq 	_ENFirstDP
.8829	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.882b	20 ff 8c	jsr $8cff			jsr 	NSMSetByte
.882e	a9 01		lda #$01			lda 	#ESTA_Low
.8830					_ENExitChange:
.8830	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8833	38		sec				sec
.8834	60		rts				rts
.8835					_ENFirstDP:
.8835	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero 					; clear integer part
.8838	80 3f		bra $8879			bra 	_ESTASwitchFloat			; go straight to float and exi
.883a					_ENNoRestart:
.883a	48		pha				pha 								; save on stack.
.883b	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.883e	c9 01		cmp #$01			cmp 	#ESTA_Low
.8840	f0 09		beq $884b			beq  	_ESTALowState
.8842	c9 02		cmp #$02			cmp 	#ESTA_High
.8844	f0 29		beq $886f			beq 	_ESTAHighState
.8846	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8848	f0 3b		beq $8885			beq 	_ESTADecimalState
>884a	db						.byte 	$DB 						; causes a break in the emulator
.884b					_ESTALowState:
.884b	68		pla				pla 								; get value back
.884c	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.884e	f0 29		beq $8879			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8850	29 0f		and #$0f			and 	#15 						; make digit
.8852	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8855	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8858	0a		asl a				asl 	a
.8859	0a		asl a				asl 	a
.885a	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.885d	0a		asl a				asl 	a
.885e	6d 06 07	adc $0706			adc 	DigitTemp
.8861	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8864	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8866	90 05		bcc $886d			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8868	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.886a	8d 05 07	sta $0705			sta 	EncodeState
.886d					_ESTANoSwitch:
.886d	38		sec				sec
.886e	60		rts				rts
.886f					_ESTAHighState:
.886f	68		pla				pla 								; get value back
.8870	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8872	f0 05		beq $8879			beq 	_ESTASwitchFloat
.8874	20 d8 88	jsr $88d8			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8877	38		sec				sec
.8878	60		rts				rts
.8879					_ESTASwitchFloat:
.8879	9c 07 07	stz $0707			stz 	DecimalCount
.887c	e8		inx				inx 								; zero the decimal additive.
.887d	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero
.8880	ca		dex				dex
.8881	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8883	80 ab		bra $8830			bra 	_ENExitChange
.8885					_ESTADecimalState:
.8885	68		pla				pla 								; digit.
.8886	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8888	f0 96		beq $8820			beq 	_ENFail
.888a	e8		inx				inx 								; put digit into fractional part of X+1
.888b	20 d8 88	jsr $88d8			jsr 	ESTAShiftDigitIntoMantissa
.888e	ca		dex				dex
.888f	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8892	ad 07 07	lda $0707			lda 	DecimalCount
.8895	c9 0b		cmp #$0b			cmp 	#11
.8897	f0 02		beq $889b			beq 	_ESTADSFail
.8899	38		sec				sec
.889a	60		rts				rts
.889b					_ESTADSFail:
.889b	4c b8 96	jmp $96b8			jmp 	RangeError
.889e					_ENConstructFinal:
.889e	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.88a1	f0 33		beq $88d6			beq 	_ENCFExit 					; no decimals
.88a3	5a		phy				phy
.88a4	0a		asl a				asl 	a 							; x 4 and CLC
.88a5	0a		asl a				asl 	a
.88a6	6d 07 07	adc $0707			adc 	DecimalCount
.88a9	a8		tay				tay
.88aa	b9 77 96	lda $9677,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.88ad	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88b0	b9 78 96	lda $9678,y			lda 	DecimalScalarTable-5+1,y
.88b3	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.88b6	b9 79 96	lda $9679,y			lda 	DecimalScalarTable-5+2,y
.88b9	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.88bc	b9 7a 96	lda $967a,y			lda 	DecimalScalarTable-5+3,y
.88bf	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.88c2	b9 7b 96	lda $967b,y			lda 	DecimalScalarTable-5+4,y
.88c5	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.88c8	a9 08		lda #$08			lda 	#NSTFloat
.88ca	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.88cd	7a		ply				ply
.88ce	e8		inx				inx 								; multiply decimal const by decimal scalar
.88cf	20 2c 95	jsr $952c			jsr 	FloatMultiply
.88d2	ca		dex				dex
.88d3	20 c1 93	jsr $93c1			jsr 	FloatAdd 					; add to integer part.
.88d6					_ENCFExit:
.88d6	18		clc				clc 								; reject the digit.
.88d7	60		rts				rts
.88d8					ESTAShiftDigitIntoMantissa:
.88d8	29 0f		and #$0f			and 	#15 						; save digit
.88da	48		pha				pha
.88db	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.88de	48		pha				pha
.88df	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.88e2	48		pha				pha
.88e3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88e6	48		pha				pha
.88e7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.88ea	48		pha				pha
.88eb	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; x 2
.88ee	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; x 4
.88f1	18		clc				clc 								; pop mantissa and add
.88f2	68		pla				pla
.88f3	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.88f6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88f9	68		pla				pla
.88fa	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.88fd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8900	68		pla				pla
.8901	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8904	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8907	68		pla				pla
.8908	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.890b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.890e	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; x 10
.8911	68		pla				pla 								; add digit
.8912	18		clc				clc
.8913	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8916	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8919	90 0d		bcc $8928			bcc 	_ESTASDExit
.891b	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.891e	d0 08		bne $8928			bne 	_ESTASDExit
.8920	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8923	d0 03		bne $8928			bne 	_ESTASDExit
.8925	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8928					_ESTASDExit:
.8928	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8929					EvaluateTerm:
.8929	b1 30		lda ($30),y			lda 	(codePtr),y
.892b	30 18		bmi $8945			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.892d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.892f	b0 6f		bcs $89a0			bcs 	_ETVariable
.8931	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8933	90 6e		bcc $89a3			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8935	c9 3a		cmp #$3a			cmp 	#'9'+1
.8937	b0 6a		bcs $89a3			bcs 	_ETPuncUnary
.8939	20 07 88	jsr $8807			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.893c					_ETNumber:
.893c	c8		iny				iny 								; keep encoding until we have the numbers
.893d	b1 30		lda ($30),y			lda 	(codePtr),y
.893f	20 0a 88	jsr $880a			jsr 	EncodeNumberContinue
.8942	b0 f8		bcs $893c			bcs 	_ETNumber 					; go back if accepted.
.8944	60		rts				rts
.8945					_ETCheckUnary:
.8945	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8947	f0 41		beq $898a			beq 	_ETString
.8949	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.894b	f0 12		beq $895f			beq 	_ETHexConstant
.894d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.894f	90 0b		bcc $895c			bcc 	_ETSyntaxError
.8951	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8953	b0 07		bcs $895c			bcs 	_ETSyntaxError
.8955	da		phx				phx 								; push X on the stack
.8956	0a		asl a				asl 	a 							; put vector x 2 into X
.8957	aa		tax				tax
.8958	c8		iny				iny 								; consume unary function token
.8959	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.895c					_ETSyntaxError:
.895c	4c b3 96	jmp $96b3			jmp 	SyntaxError
.895f					_ETHexConstant:
.895f	c8		iny				iny 								; skip #
.8960	c8		iny				iny 								; skip count
.8961	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero 					; clear result
.8964					_ETHLoop:
.8964	b1 30		lda ($30),y			lda 	(codePtr),y
.8966	c8		iny				iny 								; and consume
.8967	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8969	f0 1e		beq $8989			beq 	_ETHExit
.896b	48		pha				pha 								; save on stack.
.896c	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; x 2
.896f	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; x 4
.8972	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; x 8
.8975	20 12 8d	jsr $8d12			jsr 	NSMShiftLeft 				; x 16
.8978	68		pla				pla 								; ASCII
.8979	c9 41		cmp #$41			cmp 	#'A'
.897b	90 02		bcc $897f			bcc 	_ETHNotChar
.897d	e9 07		sbc #$07			sbc 	#7
.897f					_ETHNotChar:
.897f	29 0f		and #$0f			and 	#15 						; digit now
.8981	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8984	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8987	80 db		bra $8964			bra 	_ETHLoop 					; go round.
.8989					_ETHExit:
.8989	60		rts				rts
.898a					_ETString:
.898a	c8		iny				iny 								; look at length
.898b	b1 30		lda ($30),y			lda 	(codePtr),y
.898d	48		pha				pha
.898e	c8		iny				iny 								; first character
.898f	20 e3 91	jsr $91e3			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8992	68		pla				pla 								; restore count and save
.8993	85 36		sta $36				sta 	zTemp0
.8995	98		tya				tya 								; add length to Y to skip it.
.8996	18		clc				clc
.8997	65 36		adc $36				adc 	zTemp0
.8999	a8		tay				tay
.899a	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.899c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.899f	60		rts				rts
.89a0					_ETVariable:
.89a0	4c fa 89	jmp $89fa			jmp 	VariableHandler
.89a3					_ETPuncUnary:
.89a3	c8		iny				iny 								; consume the unary character
.89a4	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.89a6	f0 2d		beq $89d5			beq 	_ETUnaryNegate
.89a8	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.89aa	f0 39		beq $89e5			beq 	_ETDereference
.89ac	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.89ae	f0 43		beq $89f3			beq 	_ETParenthesis
.89b0	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.89b2	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.89b4	f0 06		beq $89bc			beq 	_ETIndirection
.89b6	e6 36		inc $36				inc 	zTemp0
.89b8	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.89ba	d0 a0		bne $895c			bne 	_ETSyntaxError
.89bc					_ETIndirection:
.89bc	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.89be	1a		inc a				inc 	a
.89bf	48		pha				pha
.89c0	20 29 89	jsr $8929			jsr 	EvaluateTerm				; evaluate the term
.89c3	20 6d 87	jsr $876d			jsr 	Dereference 				; dereference it.
.89c6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.89c9	d0 07		bne $89d2			bne 	_ETTypeMismatch
.89cb	68		pla				pla 								; indirection 1-2
.89cc	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.89ce	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89d1	60		rts				rts
.89d2					_ETTypeMismatch:
.89d2	4c bd 96	jmp $96bd			jmp 	TypeError
.89d5					_ETUnaryNegate:
.89d5	20 29 89	jsr $8929			jsr 	EvaluateTerm				; evaluate the term
.89d8	20 6d 87	jsr $876d			jsr 	Dereference 				; dereference it.
.89db	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.89de	29 10		and #$10			and 	#NSTString
.89e0	d0 f0		bne $89d2			bne 	_ETTypeMismatch
.89e2	4c a9 8c	jmp $8ca9			jmp 	NSMNegate  					; just toggles the sign bit.
.89e5					_ETDereference:
.89e5	20 29 89	jsr $8929			jsr 	EvaluateTerm				; evaluate the term
.89e8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.89eb	29 20		and #$20			and 	#NSBIsReference
.89ed	f0 e3		beq $89d2			beq 	_ETTypeMismatch
.89ef	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.89f2	60		rts				rts
.89f3					_ETParenthesis:
.89f3	20 61 86	jsr $8661			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.89f6	20 fa 91	jsr $91fa			jsr 	CheckRightBracket 			; check for )
.89f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.89fa					VariableHandler:
.89fa	b1 30		lda ($30),y			lda 	(codePtr),y
.89fc	18		clc				clc
.89fd	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.89ff	85 37		sta $37				sta 	zTemp0+1
.8a01	c8		iny				iny
.8a02	b1 30		lda ($30),y			lda 	(codePtr),y
.8a04	85 36		sta $36				sta 	zTemp0
.8a06	c8		iny				iny
.8a07	18		clc				clc									; copy variable address+3 to mantissa
.8a08	69 03		adc #$03			adc 	#3
.8a0a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a0d	a5 37		lda $37				lda 	zTemp0+1
.8a0f	69 00		adc #$00			adc 	#0
.8a11	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a14	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a17	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a1a	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8a1d	5a		phy				phy
.8a1e	a0 02		ldy #$02			ldy 	#2 							; read type
.8a20	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a22	7a		ply				ply
.8a23	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8a25	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8a27	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a2a	29 04		and #$04			and 	#NSBIsArray
.8a2c	d0 01		bne $8a2f			bne 	_VHArray
.8a2e	60		rts				rts
.8a2f					_VHArray:
>8a2f	db						.byte 	$DB 						; causes a break in the emulator
.8a30	80 fd		bra $8a2f			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.95b2					AbsUnary:
.95b2	fa		plx				plx 								; restore stack pos
.95b3	20 51 8c	jsr $8c51			jsr 	EvaluateNumber 				; get a float or int
.95b6	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.95b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.95bc	29 7f		and #$7f			and 	#$7F
.95be	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8a32					AllocUnary:
.8a32	fa		plx				plx 								; restore stack pos
.8a33	20 89 8c	jsr $8c89			jsr 	Evaluate16BitInteger		; get bytes required.
.8a36	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.8a39	da		phx				phx 								; save X/Y
.8a3a	5a		phy				phy
.8a3b	8a		txa				txa 								; copy X into Y
.8a3c	a8		tay				tay
.8a3d	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8a40	aa		tax				tax
.8a41	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8a44	20 51 8a	jsr $8a51			jsr 	AllocateXABytes 			; allocate memory
.8a47	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8a4a	8a		txa				txa
.8a4b	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8a4e	7a		ply				ply
.8a4f	fa		plx				plx
.8a50	60		rts				rts
.8a51					AllocateXABytes:
.8a51	5a		phy				phy
.8a52	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8a55	5a		phy				phy
.8a56	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8a59	5a		phy				phy
.8a5a	18		clc				clc
.8a5b	6d 0c 07	adc $070c			adc 	lowMemPtr
.8a5e	8d 0c 07	sta $070c			sta 	lowMemPtr
.8a61	8a		txa				txa
.8a62	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8a65	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8a68	fa		plx				plx
.8a69	68		pla				pla
.8a6a	7a		ply				ply
.8a6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.95c2					AscUnary:
.95c2	fa		plx				plx 								; restore stack pos
.95c3	20 5c 8c	jsr $8c5c			jsr 	EvaluateString 				; get a string
.95c6	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.95c8	20 ff 8c	jsr $8cff			jsr 	NSMSetByte
.95cb	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.95ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.95cf					FracUnary:
.95cf	fa		plx				plx 								; restore stack pos
.95d0	20 51 8c	jsr $8c51			jsr 	EvaluateNumber 				; get a float or int
.95d3	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.95d6	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95d9	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.95db	f0 04		beq $95e1			beq 	_IUZero
.95dd	20 9f 94	jsr $949f			jsr 	FloatFractionalPart
.95e0	60		rts				rts
.95e1					_IUZero:
.95e1	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero
.95e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.95e5					IntUnary:
.95e5	fa		plx				plx 								; restore stack pos
.95e6	20 51 8c	jsr $8c51			jsr 	EvaluateNumber 				; get a float or int
.95e9	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.95ec	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95ef	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.95f1	f0 03		beq $95f6			beq 	_IUExit
.95f3	20 02 95	jsr $9502			jsr 	FloatIntegerPart
.95f6					_IUExit:
.95f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.95f7					LenUnary:
.95f7	fa		plx				plx 								; restore stack pos
.95f8	20 5c 8c	jsr $8c5c			jsr 	EvaluateString 				; get a string
.95fb	5a		phy				phy
.95fc	a0 00		ldy #$00			ldy 	#0 							; find length
.95fe					_LenFind:
.95fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.9600	f0 06		beq $9608			beq 	_LenExit
.9602	c8		iny				iny
.9603	d0 f9		bne $95fe			bne 	_LenFind
.9605	4c b8 96	jmp $96b8			jmp 	RangeError 					; string > 255
.9608					_LenExit:
.9608	98		tya				tya
.9609	20 ff 8c	jsr $8cff			jsr 	NSMSetByte
.960c	7a		ply				ply
.960d	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.9610	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8a6c					Unary_Not:
.8a6c	fa		plx				plx
.8a6d	20 74 8c	jsr $8c74			jsr 	EvaluateInteger 			; get integer
.8a70	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.8a73	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; zero mantissa ?
.8a76	f0 04		beq $8a7c			beq 	_NotZero
.8a78	20 fd 8c	jsr $8cfd			jsr 	NSMSetZero
.8a7b	60		rts				rts
.8a7c					_NotZero:
.8a7c	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.8a7f					_UNBad:
.8a7f	4c c2 96	jmp $96c2			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8a82					Unary_Rnd:
.8a82	20 51 8c	jsr $8c51			jsr 	EvaluateNumber 				; number to use.
.8a85	20 fa 91	jsr $91fa			jsr 	CheckRightBracket 			; closing bracket
.8a88	20 b1 8a	jsr $8ab1			jsr 	Random32Bit 				; generate a number.
.8a8b	ad 08 07	lda $0708			lda 	RandomSeed+0
.8a8e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a91	ad 09 07	lda $0709			lda 	RandomSeed+1
.8a94	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a97	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8a9a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a9d	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8aa0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8aa2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8aa5	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8aa7	8d 28 06	sta $0628			sta 	NSExponent
.8aaa	a9 08		lda #$08			lda 	#NSTFloat
.8aac	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8aaf	db						.byte 	$DB 						; causes a break in the emulator
.8ab0	60		rts				rts
.8ab1					Random32Bit:
.8ab1	5a		phy				phy
.8ab2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8ab4	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8ab7	d0 03		bne $8abc			bne 	_Random1
.8ab9	a8		tay				tay 								; if so do it 256 times
.8aba	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8abc					_Random1:
.8abc	0a		asl a				asl 	a 							; LSFR RNG
.8abd	2e 09 07	rol $0709			rol 	RandomSeed+1
.8ac0	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8ac3	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8ac6	90 02		bcc $8aca			bcc 	_Random2
.8ac8	49 c5		eor #$c5			eor 	#$C5
.8aca					_Random2:
.8aca	88		dey				dey
.8acb	d0 ef		bne $8abc			bne 	_Random1
.8acd	7a		ply				ply
.8ace	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9611					SgnUnary:
.9611	fa		plx				plx 								; restore stack pos
.9612	20 51 8c	jsr $8c51			jsr 	EvaluateNumber 				; get a float or int
.9615	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.9618	20 2d 8d	jsr $8d2d			jsr 	NSMIsZero 					; if zero
.961b	f0 10		beq $962d			beq 	_SGZero  					; return Int Zero
.961d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9620	48		pha				pha
.9621	a9 01		lda #$01			lda 	#1 							; set to 1
.9623	20 ff 8c	jsr $8cff			jsr 	NSMSetByte
.9626	68		pla				pla
.9627	29 80		and #$80			and		#$80 						; copy the sign byte out
.9629	9d 00 06	sta $0600,x			sta 	NSStatus,x
.962c	60		rts				rts
.962d	20 fd 8c	jsr $8cfd	_SGZero:jsr 	NSMSetZero
.9630	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9631					ValUnary:
.9631	fa		plx				plx 								; restore stack pos
.9632	20 47 96	jsr $9647			jsr 	ValMainCode 				; do the main val() code
.9635	b0 01		bcs $9638			bcs 	_VUError 					; couldn't convert
.9637	60		rts				rts
.9638					_VUError:
.9638	4c bd 96	jmp $96bd			jmp 	TypeError
.963b					IsValUnary:
.963b	fa		plx				plx 								; restore stack pos
.963c	20 47 96	jsr $9647			jsr 	ValMainCode 				; do the main val() code
.963f	b0 03		bcs $9644			bcs 	_VUBad
.9641	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.9644					_VUBad:
.9644	4c d1 82	jmp $82d1			jmp 	ReturnFalse
.9647					ValMainCode:
.9647	20 5c 8c	jsr $8c5c			jsr 	EvaluateString 				; get a string
.964a	20 fa 91	jsr $91fa			jsr 	CheckRightBracket 			; check right bracket present
.964d	5a		phy				phy
.964e	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9650	f0 17		beq $9669			beq 	_VMCFail2
.9652	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9654	48		pha				pha 								; save first character
.9655	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9657	d0 01		bne $965a			bne 	_VMCStart
.9659	c8		iny				iny 								; skip over -
.965a					_VMCStart:
.965a	38		sec				sec 								; initialise first time round.
.965b					_VMCNext:
.965b	c8		iny				iny 								; pre-increment
.965c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.965e	f0 0c		beq $966c			beq 	_VMCSuccess 				; successful.
.9660	20 0b 88	jsr $880b			jsr 	EncodeNumber 				; send it to the number-builder
.9663	90 03		bcc $9668			bcc 	_VMCFail 					; if failed, give up.
.9665	18		clc				clc 								; next time round, countinue
.9666	80 f3		bra $965b			bra 	_VMCNext
.9668					_VMCFail:
.9668	68		pla				pla
.9669					_VMCFail2:
.9669	7a		ply				ply
.966a	38		sec				sec
.966b	60		rts				rts
.966c					_VMCSuccess:
.966c	a9 00		lda #$00			lda 	#0 							; construct final
.966e	20 0b 88	jsr $880b			jsr 	EncodeNumber
.9671	68		pla				pla
.9672	c9 2d		cmp #$2d			cmp 	#"-"
.9674	d0 03		bne $9679			bne 	_VMCNotNegative
.9676	20 a9 8c	jsr $8ca9			jsr		NSMNegate
.9679					_VMCNotNegative:
.9679	7a		ply				ply
.967a	18		clc				clc
.967b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8acf					ChrUnary:
.8acf	fa		plx				plx 								; restore stack pos
.8ad0	20 95 8c	jsr $8c95			jsr 	Evaluate8BitInteger			; get value
.8ad3	48		pha				pha
.8ad4	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.8ad7	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8ad9	20 e2 97	jsr $97e2			jsr 	StringTempAllocate
.8adc	68		pla				pla 								; write number to it
.8add	20 20 98	jsr $9820			jsr 	StringTempWrite
.8ae0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8ae1					SpcUnary:
.8ae1	fa		plx				plx 								; restore stack pos
.8ae2	20 95 8c	jsr $8c95			jsr 	Evaluate8BitInteger			; get value
.8ae5	5a		phy				phy
.8ae6	48		pha				pha 								; save count
.8ae7	20 e2 97	jsr $97e2			jsr 	StringTempAllocate
.8aea	7a		ply				ply 								; to do count in Y
.8aeb					_SpcLoop:
.8aeb	c0 00		cpy #$00			cpy 	#0
.8aed	f0 08		beq $8af7			beq 	_SpcExit
.8aef	a9 20		lda #$20			lda 	#32
.8af1	20 20 98	jsr $9820			jsr 	StringTempWrite
.8af4	88		dey				dey
.8af5	80 f4		bra $8aeb			bra 	_SPCLoop
.8af7					_SpcExit:
.8af7	7a		ply				ply
.8af8	20 fa 91	jsr $91fa			jsr 	CheckRightBracket
.8afb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8afc					Unary_Str:
.8afc	fa		plx				plx
.8afd	20 51 8c	jsr $8c51			jsr 	EvaluateNumber  			; get number
.8b00	20 fa 91	jsr $91fa			jsr 	CheckRightBracket 			; closing bracket
.8b03	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8b05	20 1e 8b	jsr $8b1e			jsr 	ConvertNumberToString 		; do the conversion.
.8b08	a9 21		lda #$21			lda		#33 						; create buffer
.8b0a	20 e2 97	jsr $97e2			jsr 	StringTempAllocate 			; allocate memory
.8b0d	da		phx				phx
.8b0e	a2 00		ldx #$00			ldx 	#0
.8b10					_USCopy:
.8b10	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b13	20 20 98	jsr $9820			jsr 	StringTempWrite
.8b16	e8		inx				inx
.8b17	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b1a	d0 f4		bne $8b10			bne 	_USCopy
.8b1c	fa		plx				plx
.8b1d	60		rts				rts
.8b1e					ConvertNumberToString:
.8b1e	5a		phy				phy 								; save code position
.8b1f	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8b22	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8b25	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8b28	10 0a		bpl $8b34			bpl 	_CNTSNotNegative
.8b2a	29 7f		and #$7f			and 	#$7F 						; make +ve
.8b2c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b2f	a9 2d		lda #$2d			lda 	#"-"
.8b31	20 9a 8b	jsr $8b9a			jsr 	WriteDecimalBuffer
.8b34					_CNTSNotNegative:
.8b34	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8b37	f0 15		beq $8b4e			beq 	_CNTSNotFloat
.8b39	e8		inx				inx 								; round up
.8b3a	a9 01		lda #$01			lda 	#1
.8b3c	20 ff 8c	jsr $8cff			jsr 	NSMSetByte
.8b3f	ca		dex				dex
.8b40	bd 28 06	lda $0628,x			lda		NSExponent,x
.8b43	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8b46	a9 08		lda #$08			lda 	#NSTFloat
.8b48	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8b4b	20 c1 93	jsr $93c1			jsr 	FloatAdd
.8b4e					_CNTSNotFloat:
.8b4e	20 7c 8b	jsr $8b7c			jsr 	MakePlusTwoString
.8b51	20 9f 94	jsr $949f			jsr 	FloatFractionalPart 		; get the fractional part
.8b54	20 63 95	jsr $9563			jsr 	NSNormalise					; normalise , exit if zero
.8b57	f0 21		beq $8b7a			beq 	_CNTSExit
.8b59	a9 2e		lda #$2e			lda 	#"."
.8b5b	20 9a 8b	jsr $8b9a			jsr 	WriteDecimalBuffer 			; write decimal place
.8b5e					_CNTSDecimal:
.8b5e	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8b61	30 17		bmi $8b7a			bmi 	_CNTSExit
.8b63	e8		inx				inx 								; x 10.0
.8b64	a9 0a		lda #$0a			lda 	#10
.8b66	20 ff 8c	jsr $8cff			jsr 	NSMSetByte
.8b69	a9 08		lda #$08			lda 	#NSTFloat
.8b6b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b6e	ca		dex				dex
.8b6f	20 2c 95	jsr $952c			jsr 	FloatMultiply
.8b72	20 7c 8b	jsr $8b7c			jsr 	MakePlusTwoString
.8b75	20 9f 94	jsr $949f			jsr 	FloatFractionalPart 		; get the fractional part
.8b78	80 e4		bra $8b5e			bra 	_CNTSDecimal 				; keep going.
.8b7a					_CNTSExit:
.8b7a	7a		ply				ply
.8b7b	60		rts				rts
.8b7c					MakePlusTwoString:
.8b7c	da		phx				phx
.8b7d	20 d4 8c	jsr $8cd4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8b80	e8		inx				inx 								; access it
.8b81	e8		inx				inx
.8b82	20 02 95	jsr $9502			jsr 	FloatIntegerPart 			; make it an integer
.8b85	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8b87	20 6b 93	jsr $936b			jsr 	ConvertInt32
.8b8a	a2 00		ldx #$00			ldx	 	#0
.8b8c					_MPTSCopy:
.8b8c	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8b8f	20 9a 8b	jsr $8b9a			jsr 	WriteDecimalBuffer
.8b92	e8		inx				inx
.8b93	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8b96	d0 f4		bne $8b8c			bne 	_MPTSCopy
.8b98	fa		plx				plx
.8b99	60		rts				rts
.8b9a					WriteDecimalBuffer:
.8b9a	da		phx				phx
.8b9b	ae 14 07	ldx $0714			ldx 	dbOffset
.8b9e	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8ba1	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8ba4	ee 14 07	inc $0714			inc 	dbOffset
.8ba7	fa		plx				plx
.8ba8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8ba9					Unary_Left:
.8ba9	fa		plx				plx
.8baa	18		clc				clc 								; only one parameter
.8bab	20 20 8c	jsr $8c20			jsr 	SubstringInitial 			; set up.
.8bae	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8bb1	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bb4	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8bb7	80 2c		bra $8be5			bra 	SubstringMain
.8bb9					Unary_Right:
.8bb9	fa		plx				plx
.8bba	18		clc				clc 								; only one parameter
.8bbb	20 20 8c	jsr $8c20			jsr 	SubstringInitial 			; set up.
.8bbe	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8bc1	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bc4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8bc7	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8bca	b0 02		bcs $8bce			bcs 	_URNotUnderflow
.8bcc	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8bce					_URNotUnderFlow:
.8bce	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8bd1	80 12		bra $8be5			bra 	SubStringMain
.8bd3					Unary_Mid:
.8bd3	fa		plx				plx
.8bd4	38		sec				sec 								; two parameters
.8bd5	20 20 8c	jsr $8c20			jsr 	SubstringInitial 			; set up.
.8bd8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8bdb	f0 05		beq $8be2			beq 	_UMError
.8bdd	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8be0	80 03		bra $8be5			bra 	SubStringMain
.8be2					_UMError:
.8be2	4c c2 96	jmp $96c2			jmp 	ArgumentError
.8be5					SubStringMain:
.8be5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8be8	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8beb	b0 2d		bcs $8c1a			bcs 	_SSMNull 					; if so, return an empty string.
.8bed	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8bf0	f0 28		beq $8c1a			beq 	_SSMNull 					; return empty string.
.8bf2	18		clc				clc 								; add the offset +1 to the address and
.8bf3	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8bf6	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8bf9	85 36		sta $36				sta 	zTemp0
.8bfb	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8bfe	69 00		adc #$00			adc 	#0
.8c00	85 37		sta $37				sta 	zTemp0+1
.8c02					_SSMNoCarry:
.8c02	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8c05	20 e2 97	jsr $97e2			jsr 	StringTempAllocate 			; allocate that many characters
.8c08	5a		phy				phy 								; save Y
.8c09	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8c0b					_SSMCopy:
.8c0b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8c0d	f0 09		beq $8c18			beq 	_SSMEString 				; no more to copy
.8c0f	20 20 98	jsr $9820			jsr 	StringTempWrite 			; and write it out.
.8c12	c8		iny				iny
.8c13	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8c16	d0 f3		bne $8c0b			bne 	_SSMCopy
.8c18					_SSMEString:
.8c18	7a		ply				ply
.8c19					_SSMExit:
.8c19	60		rts				rts
.8c1a					_SSMNull:
.8c1a	a9 00		lda #$00			lda 	#0
.8c1c	20 e2 97	jsr $97e2			jsr 	StringTempAllocate
.8c1f	60		rts				rts
.8c20					SubstringInitial:
.8c20	da		phx				phx 								; save initial stack position
.8c21	08		php				php 								; save carry on stack indicating 2 parameters
.8c22	20 5c 8c	jsr $8c5c			jsr 	EvaluateString 				; get a string
.8c25	5a		phy				phy 								; calculate length to exponent.
.8c26	a0 ff		ldy #$ff			ldy 	#$FF
.8c28					_SIFindLength:
.8c28	c8		iny				iny
.8c29	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c2b	d0 fb		bne $8c28			bne 	_SIFindLength
.8c2d	98		tya				tya
.8c2e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8c31	7a		ply				ply
.8c32	e8		inx				inx
.8c33	20 02 92	jsr $9202			jsr 	CheckComma 					; comma next
.8c36	20 95 8c	jsr $8c95			jsr 	Evaluate8BitInteger 		; get next parameter
.8c39	28		plp				plp 								; is it the last parameter ?
.8c3a	90 07		bcc $8c43			bcc 	_SSIExit 					; if so, exit.
.8c3c	e8		inx				inx
.8c3d	20 02 92	jsr $9202			jsr 	CheckComma 					; comma next
.8c40	20 95 8c	jsr $8c95			jsr 	Evaluate8BitInteger 		; get last parameter
.8c43					_SSIExit:
.8c43	fa		plx				plx
.8c44	20 fa 91	jsr $91fa			jsr 	CheckRightBracket 			; check closing bracket
.8c47	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8c48					EvaluateValue:
.8c48	48		pha				pha
.8c49	20 61 86	jsr $8661			jsr		EvaluateExpression 			; expression
.8c4c	20 6d 87	jsr $876d			jsr 	Dereference					; derefernce it
.8c4f	68		pla				pla
.8c50	60		rts				rts
.8c51					EvaluateNumber:
.8c51	20 48 8c	jsr $8c48			jsr 	EvaluateValue 				; get a value
.8c54	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c57	29 10		and #$10			and 	#NSBIsString
.8c59	d0 16		bne $8c71			bne 	HelperTypeError
.8c5b	60		rts				rts
.8c5c					EvaluateString:
.8c5c	20 48 8c	jsr $8c48			jsr 	EvaluateValue 				; get a value
.8c5f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c62	29 10		and #$10			and 	#NSBIsString
.8c64	f0 0b		beq $8c71			beq 	HelperTypeError
.8c66					CopyAddressToTemp0:
.8c66	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8c69	85 36		sta $36				sta 	zTemp0
.8c6b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c6e	85 37		sta $37				sta 	zTemp0+1
.8c70	60		rts				rts
.8c71					HelperTypeError:
.8c71	4c bd 96	jmp $96bd			jmp 	TypeError
.8c74					EvaluateInteger:
.8c74	20 51 8c	jsr $8c51			jsr 	EvaluateNumber
.8c77	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8c7a	d0 0a		bne $8c86			bne 	HelperValueError 			; if not, it's a float.
.8c7c	60		rts				rts
.8c7d					EvaluateUnsignedInteger:
.8c7d	20 74 8c	jsr $8c74			jsr 	EvaluateInteger 			; check integer is +ve
.8c80	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c83	30 01		bmi $8c86			bmi 	HelperValueError
.8c85	60		rts				rts
.8c86					HelperValueError:
.8c86	4c c2 96	jmp $96c2			jmp 	ArgumentError
.8c89					Evaluate16BitInteger:
.8c89	20 7d 8c	jsr $8c7d			jsr	 	EvaluateUnsignedInteger		; get integer
.8c8c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8c8f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8c92	d0 f2		bne $8c86			bne 	HelperValueError
.8c94	60		rts				rts
.8c95					Evaluate8BitInteger:
.8c95	20 7d 8c	jsr $8c7d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8c98	d0 ec		bne $8c86			bne 	HelperValueError
.8c9a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8c9d	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ca0	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8ca3	d0 e1		bne $8c86			bne 	HelperValueError
.8ca5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ca8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8ca9					NSMNegate:
.8ca9	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cac	49 80		eor #$80			eor 	#NSBIsNegative
.8cae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cb1	60		rts				rts
.8cb2					NSMNegateMantissa:
.8cb2	38		sec				sec
.8cb3	a9 00		lda #$00			lda 	#0
.8cb5	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8cb8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cbb	a9 00		lda #$00			lda 	#0
.8cbd	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8cc0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8cc3	a9 00		lda #$00			lda 	#0
.8cc5	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8cc8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ccb	a9 00		lda #$00			lda 	#0
.8ccd	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8cd0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cd3	60		rts				rts
.8cd4					NSMShiftUpTwo:
.8cd4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8cd7	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8cda	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cdd	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8ce0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8ce3	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8ce6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8ce9	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8cec	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8cef	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8cf2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cf5	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8cf8	60		rts				rts
.8cf9					NSMSetZeroMantissaOnly:
.8cf9	a9 00		lda #$00			lda 	#0
.8cfb	80 08		bra $8d05			bra 	NSMSetMantissa
.8cfd					NSMSetZero:
.8cfd	a9 00		lda #$00			lda 	#0
.8cff					NSMSetByte:
.8cff	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8d02	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8d05					NSMSetMantissa:
.8d05	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8d08	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8d0b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8d0e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d11	60		rts				rts
.8d12					NSMShiftLeft:
.8d12	18		clc				clc
.8d13					NSMRotateLeft:
.8d13	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8d16	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8d19	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8d1c	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8d1f	60		rts				rts
.8d20					NSMShiftRight:
.8d20	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8d23	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8d26	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8d29	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8d2c	60		rts				rts
.8d2d					NSMIsZero:
.8d2d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d30	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8d33	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8d36	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8d39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.967c					DecimalScalarTable:
>967c	66 66 66 66				.dword $66666666 ; 0.1
>9680	de					.byte $de
>9681	1f 85 eb 51				.dword $51eb851f ; 0.01
>9685	db					.byte $db
>9686	4c 37 89 41				.dword $4189374c ; 0.001
>968a	d8					.byte $d8
>968b	ac 8b db 68				.dword $68db8bac ; 0.0001
>968f	d4					.byte $d4
>9690	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9694	d1					.byte $d1
>9695	83 de 1b 43				.dword $431bde83 ; 1e-06
>9699	ce					.byte $ce
>969a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>969e	ca					.byte $ca
>969f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>96a3	c7					.byte $c7
>96a4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>96a8	c4					.byte $c4
>96a9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>96ad	c0					.byte $c0
>96ae	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>96b2	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.96b3					SyntaxError:
.96b3	a9 02		lda #$02		lda	#2
.96b5	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96b8					RangeError:
.96b8	a9 04		lda #$04		lda	#4
.96ba	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96bd					TypeError:
.96bd	a9 05		lda #$05		lda	#5
.96bf	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96c2					ArgumentError:
.96c2	a9 07		lda #$07		lda	#7
.96c4	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96c7					NotDoneError:
.96c7	a9 0c		lda #$0c		lda	#12
.96c9	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96cc					ErrorText:
>96cc	42 72 65 61 6b 00			.text	"Break",0
>96d2	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>96da	72 72 6f 72 00
>96df	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>96e7	20 62 79 20 7a 65 72 6f 00
>96f0	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>96f8	61 6e 67 65 00
>96fd	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9705	6d 61 74 63 68 00
>970b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9713	65 6d 6f 72 79 00
>9719	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9721	61 72 67 75 6d 65 6e 74 00
>972a	53 74 6f 70 00				.text	"Stop",0
>972f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9737	6f 6f 20 6c 6f 6e 67 00
>973f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9747	6e 20 66 61 69 6c 65 64 00
>9750	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9758	61 74 61 00
>975c	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9764	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.976a					StringConcrete:
.976a	5a		phy				phy 								; save position on stack
.976b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.976e	85 38		sta $38				sta 	zTemp1
.9770	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9773	85 39		sta $39				sta 	zTemp1+1
.9775	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9777					_SALength:
.9777	c8		iny				iny
.9778	b1 38		lda ($38),y			lda 	(zTemp1),y
.977a	d0 fb		bne $9777			bne 	_SALength
.977c	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.977e	b0 3c		bcs $97bc			bcs 	_SALengthError
.9780	98		tya				tya 				 				; length of the new string
.9781	18		clc				clc
.9782	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9784	90 02		bcc $9788			bcc 	_SAHaveLength
.9786	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9788					_SAHaveLength:
.9788	48		pha				pha 								; save length.
.9789	38		sec				sec
.978a	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.978c	6d 0e 07	adc $070e			adc 	StringMemory
.978f	8d 0e 07	sta $070e			sta 	StringMemory
.9792	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9794	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9797	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9799	6d 0f 07	adc $070f			adc 	StringMemory+1
.979c	8d 0f 07	sta $070f			sta 	StringMemory+1
.979f	85 3b		sta $3b				sta 	zTemp2+1
.97a1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97a4	68		pla				pla 								; save length in first byte
.97a5	92 3a		sta ($3a)			sta 	(zTemp2)
.97a7	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.97a9	a0 01		ldy #$01			ldy 	#1
.97ab	91 3a		sta ($3a),y			sta 	(zTemp2),y
.97ad					_SACopyNewString:
.97ad	a0 00		ldy #$00			ldy 	#0
.97af					_SACopyNSLoop:
.97af	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.97b1	c8		iny				iny 								; write two on in string storage
.97b2	c8		iny				iny
.97b3	91 3a		sta ($3a),y			sta 	(zTemp2),y
.97b5	88		dey				dey 								; this makes it one one.
.97b6	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.97b8	d0 f5		bne $97af			bne 	_SACopyNSLoop
.97ba	7a		ply				ply
.97bb	60		rts				rts
.97bc					_SALengthError:
.97bc	a9 09		lda #$09		lda	#9
.97be	4c 5f 82	jmp $825f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.97c1					StringSystemInitialise:
.97c1	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.97c3	8d 0e 07	sta $070e			sta 	0+StringMemory
.97c6	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.97c8	8d 0f 07	sta $070f			sta 	1+StringMemory
.97cb	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.97ce	60		rts				rts
.97cf					StringSpaceInitialise:
.97cf	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.97d1	8d 10 07	sta $0710			sta 	StringInitialised
.97d4	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.97d7	8d 11 07	sta $0711			sta 	StringTempPointer
.97da	ad 0f 07	lda $070f			lda 	StringMemory+1
.97dd	3a		dec a				dec 	a
.97de	8d 12 07	sta $0712			sta 	StringTempPointer+1
.97e1	60		rts				rts
.97e2					StringTempAllocate:
.97e2	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.97e4	b0 35		bcs $981b			bcs 	_STALength
.97e6	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.97e9	30 05		bmi $97f0			bmi 	_STAAllocate
.97eb	48		pha				pha 								; save value to subtract.
.97ec	20 cf 97	jsr $97cf			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.97ef	68		pla				pla 								; restore it
.97f0					_STAAllocate:
.97f0	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.97f2	18		clc				clc  								; deliberate allows one more
.97f3	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.97f6	8d 11 07	sta $0711			sta 	StringTempPointer
.97f9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.97fc	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.97fe	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9801	69 ff		adc #$ff			adc 	#$FF
.9803	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9806	85 3d		sta $3d				sta 	zsTemp+1
.9808	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.980b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.980e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9811	a9 10		lda #$10			lda 	#NSTString
.9813	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9816	a9 00		lda #$00			lda 	#0 							; clear the target string
.9818	92 3c		sta ($3c)			sta 	(zsTemp)
.981a	60		rts				rts
.981b					_STALength:
.981b	a9 09		lda #$09		lda	#9
.981d	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9820					StringTempWrite:
.9820	48		pha				pha
.9821	92 3c		sta ($3c)			sta 	(zsTemp)
.9823	e6 3c		inc $3c				inc 	zsTemp
.9825	d0 02		bne $9829			bne 	_STWNoCarry
.9827	e6 3d		inc $3d				inc 	zsTemp+1
.9829					_STWNoCarry:
.9829	a9 00		lda #$00			lda 	#0
.982b	92 3c		sta ($3c)			sta 	(zsTemp)
.982d	68		pla				pla
.982e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8d3a					BackloadProgram:
.8d3a	a2 ff		ldx #$ff			ldx 	#$FF
.8d3c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8d3f	20 66 8d	jsr $8d66			jsr 	BLReadByte
.8d42	30 1e		bmi $8d62			bmi 	_BPExit
.8d44					_BPCopy:
.8d44	e8		inx				inx  								; copy byte in
.8d45	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8d48	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8d4b	20 66 8d	jsr $8d66			jsr 	BLReadByte 					; read next byte
.8d4e	30 0a		bmi $8d5a			bmi 	_BPEndLine 					; -ve = EOL
.8d50	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8d52	d0 02		bne $8d56			bne 	_BPNotTab
.8d54	a9 20		lda #$20			lda 	#' '
.8d56					_BPNotTab:
.8d56	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8d58	b0 ea		bcs $8d44			bcs 	_BPCopy
.8d5a					_BPEndLine:
.8d5a	20 22 8f	jsr $8f22			jsr 	TokeniseLine 				; tokenise the line.
.8d5d	20 b4 91	jsr $91b4			jsr 	MemoryAppend 				; append to current program
.8d60	80 d8		bra $8d3a			bra 	BackloadProgram
.8d62					_BPExit:
.8d62	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8d65	60		rts				rts
.8d66					BLReadByte:
.8d66					_BLLoad:
.8d66	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8d69	ee 67 8d	inc $8d67			inc 	_BLLoad+1
.8d6c	d0 03		bne $8d71			bne 	_BLNoCarry
.8d6e	ee 68 8d	inc $8d68			inc 	_BLLoad+2
.8d71					_BLNoCarry:
.8d71	c9 00		cmp #$00			cmp 	#0
.8d73	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8d74					TokeniseSearchTable:
.8d74	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8d76	85 36		sta $36				sta 	zTemp0
.8d78	a0 00		ldy #$00			ldy 	#0
.8d7a	a9 80		lda #$80			lda 	#$80 						; token #
.8d7c	85 38		sta $38				sta 	zTemp1
.8d7e					_TSTLoop:
.8d7e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8d80	30 49		bmi $8dcb			bmi 	_TSTFail 					; -ve = end of table
.8d82	f0 2e		beq $8db2			beq 	_TSTNext 					; zero, check next it's a dummy
.8d84	c8		iny				iny 								; get the hash
.8d85	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d87	88		dey				dey
.8d88	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8d8b	d0 25		bne $8db2			bne 	_TSTNext
.8d8d	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8d90	38		sec				sec
.8d91	ed 00 07	sbc $0700			sbc 	identStart
.8d94	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8d96	d0 1a		bne $8db2			bne 	_TSTNext
.8d98	5a		phy				phy 								; save Y , we might fail
.8d99	c8		iny				iny 								; point to text
.8d9a	c8		iny				iny
.8d9b	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8d9e					_TSTCompareName:
.8d9e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8da1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8da3	d0 0c		bne $8db1			bne 	_TSTNextPullY 				; fail, pullY and do next
.8da5	e8		inx				inx
.8da6	c8		iny				iny
.8da7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8daa	d0 f2		bne $8d9e			bne 	_TSTCompareName
.8dac	7a		ply				ply 								; throw Y
.8dad	a5 38		lda $38				lda 	zTemp1 						; get token #
.8daf	38		sec				sec 								; return with CS = passed.
.8db0	60		rts				rts
.8db1					_TSTNextPullY:
.8db1	7a		ply				ply 								; restore current, fall through.
.8db2					_TSTNext:
.8db2	e6 38		inc $38				inc 	zTemp1 						; token counter
.8db4	98		tya				tya
.8db5	18		clc				clc
.8db6	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8db8	1a		inc a				inc 	a 							; +1
.8db9	1a		inc a				inc 	a 							; +2
.8dba	a8		tay				tay
.8dbb	10 c1		bpl $8d7e			bpl 	_TSTLoop 					; if Y < $80 loop back
.8dbd	98		tya				tya 								; add Y to zTemp0 and reset Y
.8dbe	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8dc0	18		clc				clc  								; but have tables > 255 bytes
.8dc1	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8dc3	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8dc5	90 b7		bcc $8d7e			bcc 	_TSTLoop
.8dc7	e6 37		inc $37				inc 	zTemp0+1
.8dc9	80 b3		bra $8d7e			bra 	_TSTLoop
.8dcb					_TSTFail:
.8dcb	18		clc				clc
.8dcc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8dcd					KeywordSet0:
>8dcd	00 65					.text	0,$65,""               ; $80 !0:EOF
>8dcf	00 58					.text	0,$58,""               ; $81 !1:SH1
>8dd1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8dd3	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8dd9	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8de1	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8de7	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8dee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8df5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8dfc	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8e02	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8e0a	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8e12	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8e18	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8e1f	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8e25	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8e2d	28
>8e2e	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8e34	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8e3a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8e40	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8e47	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8e4d	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8e53	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8e58	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8e5c	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8e62	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8e6a	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8e71	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8e78	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8e80	43
>8e81	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8e87	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8e8e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8e94	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8e9a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8e9f	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8ea5	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8eaa	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8eb1	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8eb7	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8ebc	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8ec3	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8ec9	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8ece	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8ed6	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8edc	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8ee0	ff					.text	$FF
.8ee1					KeywordSet1:
>8ee1	00 65					.text	0,$65,""               ; $80 !0:EOF
>8ee3	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ee5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ee7	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8eef	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8ef6	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8efb	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8f01	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8f06	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8f0e	45
>8f0f	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8f14	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8f1a	ff					.text	$FF
.8f1b					KeywordSet2:
>8f1b	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f1d	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f1f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f21	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8f22					TokeniseLine:
.8f22	20 aa 90	jsr $90aa			jsr 	FixLineBufferCase 			; fix line case
.8f25	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8f27	8d 15 07	sta $0715			sta 	tokenOffset
.8f2a	9c 16 07	stz $0716			stz 	tokenLineNumber
.8f2d	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8f30	a2 ff		ldx #$ff			ldx 	#$FF
.8f32					_TKFindFirst:
.8f32	e8		inx				inx
.8f33	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f36	f0 79		beq $8fb1			beq 	_TKExit
.8f38	c9 20		cmp #$20			cmp 	#' '
.8f3a	90 f6		bcc $8f32			bcc 	_TKFindFirst
.8f3c	c9 30		cmp #$30			cmp 	#'0'
.8f3e	90 07		bcc $8f47			bcc 	_TKNoLineNumber
.8f40	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f42	b0 03		bcs $8f47			bcs 	_TKNoLineNumber
.8f44	20 d4 90	jsr $90d4			jsr 	TokeniseExtractLineNumber
.8f47					_TKNoLineNumber:
.8f47					_TKTokeniseLoop:
.8f47	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8f4a	f0 65		beq $8fb1			beq 	_TKExit
.8f4c	e8		inx				inx
.8f4d	c9 20		cmp #$20			cmp 	#' '
.8f4f	f0 f6		beq $8f47			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8f51	ca		dex				dex 								; undo last get, A contains character, X is position.
.8f52	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8f54	f0 61		beq $8fb7			beq 	_TKTokeniseIdentifier
.8f56	c9 41		cmp #$41			cmp 	#'A'
.8f58	90 04		bcc $8f5e			bcc 	_TKTokenisePunctuation
.8f5a	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8f5c	90 59		bcc $8fb7			bcc 	_TKTokeniseIdentifier
.8f5e					_TKTokenisePunctuation:
.8f5e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8f60	f0 27		beq $8f89			beq 	_TKString
.8f62	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8f64	f0 28		beq $8f8e			beq 	_TKHexConstant
.8f66	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8f68	f0 29		beq $8f93			beq 	_TKCheckDouble
.8f6a	c9 3e		cmp #$3e			cmp 	#'>'
.8f6c	f0 25		beq $8f93			beq 	_TKCheckDouble
.8f6e					_TKStandardPunctuation:
.8f6e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8f71	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8f73	90 0e		bcc $8f83			bcc 	_TKNoShift
.8f75	48		pha				pha 								; save
.8f76	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8f78	85 36		sta $36				sta 	zTemp0
.8f7a	68		pla				pla
.8f7b	29 20		and #$20			and 	#32 						; bit 5
.8f7d	4a		lsr a				lsr 	a 							; shift into bit 3
.8f7e	4a		lsr a				lsr 	a
.8f7f	05 36		ora $36				ora 	zTemp0
.8f81	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8f83					_TKNoShift:
.8f83	20 19 91	jsr $9119			jsr 	TokeniseWriteByte 			; write the punctuation character
.8f86	e8		inx				inx 								; consume the character
.8f87	80 be		bra $8f47			bra 	_TKTokeniseLoop 			; and loop round again.
.8f89					_TKString:
.8f89	20 39 90	jsr $9039			jsr 	TokeniseString
.8f8c	80 b9		bra $8f47			bra 	_TKTokeniseLoop
.8f8e					_TKHexConstant:
.8f8e	20 74 90	jsr $9074			jsr 	TokeniseHexConstant
.8f91	80 b4		bra $8f47			bra 	_TKTokeniseLoop
.8f93					_TKCheckDouble:
.8f93	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8f96	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8f98	90 d4		bcc $8f6e			bcc 	_TKStandardPunctuation
.8f9a	c9 3f		cmp #$3f			cmp 	#'>'+1
.8f9c	b0 d0		bcs $8f6e			bcs 	_TKStandardPunctuation
.8f9e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8fa1	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8fa3	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8fa4	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8fa7	38		sec				sec
.8fa8	e9 3c		sbc #$3c			sbc 	#'<'
.8faa	20 19 91	jsr $9119			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8fad	e8		inx				inx 								; consume both
.8fae	e8		inx				inx
.8faf	80 96		bra $8f47			bra 	_TKTokeniseLoop
.8fb1	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8fb3	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.8fb6	60		rts				rts
.8fb7					_TKTokeniseIdentifier:
.8fb7	8e 00 07	stx $0700			stx 	identStart 					; save start
.8fba	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8fbd					_TKCheckLoop:
.8fbd	e8		inx				inx 								; look at next, we know first is identifier.
.8fbe	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8fc1	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8fc3	f0 f8		beq $8fbd			beq 	_TKCheckLoop
.8fc5	c9 30		cmp #$30			cmp	 	#"0"
.8fc7	90 0c		bcc $8fd5			bcc 	_TKEndIdentifier
.8fc9	c9 3a		cmp #$3a			cmp 	#"9"+1
.8fcb	90 f0		bcc $8fbd			bcc 	_TKCheckLoop
.8fcd	c9 41		cmp #$41			cmp	 	#"A"
.8fcf	90 04		bcc $8fd5			bcc 	_TKEndIdentifier
.8fd1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8fd3	90 e8		bcc $8fbd			bcc 	_TKCheckLoop
.8fd5					_TKEndIdentifier:
.8fd5	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8fd8	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8fda	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8fdc	f0 06		beq $8fe4			beq 	_TKHasTypeCharacter
.8fde	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8fe0	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8fe2	d0 07		bne $8feb			bne 	_TKNoTypeCharacter
.8fe4					_TKHasTypeCharacter:
.8fe4	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8fe7	e8		inx				inx 								; read next
.8fe8	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8feb					_TKNoTypeCharacter:
.8feb	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8fed	d0 09		bne $8ff8			bne 	_TKNoArray
.8fef	e8		inx				inx 								; skip the (
.8ff0	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8ff3	09 04		ora #$04			ora 	#$04
.8ff5	8d 04 07	sta $0704			sta 	identTypeByte
.8ff8					_TKNoArray:
.8ff8	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8ffb	20 95 90	jsr $9095			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8ffe	a0 8d		ldy #$8d			ldy 	#(KeywordSet0) >> 8
.9000	a9 cd		lda #$cd			lda 	#(KeywordSet0) & $FF
.9002	20 74 8d	jsr $8d74			jsr 	TokeniseSearchTable
.9005	a2 00		ldx #$00			ldx 	#0
.9007	b0 1f		bcs $9028			bcs 	_TKFoundToken
.9009	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.900b	a9 e1		lda #$e1			lda 	#(KeywordSet1) & $FF
.900d	20 74 8d	jsr $8d74			jsr 	TokeniseSearchTable
.9010	a2 81		ldx #$81			ldx 	#$81
.9012	b0 14		bcs $9028			bcs 	_TKFoundToken
.9014	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.9016	a9 e1		lda #$e1			lda 	#(KeywordSet1) & $FF
.9018	20 74 8d	jsr $8d74			jsr 	TokeniseSearchTable
.901b	a2 82		ldx #$82			ldx 	#$82
.901d	b0 09		bcs $9028			bcs 	_TKFoundToken
.901f	20 25 91	jsr $9125			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9022	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9025	4c 47 8f	jmp $8f47			jmp 	_TKTokeniseLoop 			; and go round again.
.9028					_TKFoundToken:
.9028	48		pha				pha 								; save token
.9029	8a		txa				txa 								; shift in X, is there one ?
.902a	f0 03		beq $902f			beq 	_TKNoTShift
.902c	20 19 91	jsr $9119			jsr 	TokeniseWriteByte 			; if so, write it out
.902f					_TKNoTShift:
.902f	68		pla				pla 								; restore and write token
.9030	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.9033	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9036	4c 47 8f	jmp $8f47			jmp 	_TKTokeniseLoop 			; and go round again.
.9039					TokeniseString:
.9039	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.903b	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.903e	e8		inx				inx									; start of quoted string.
.903f	da		phx				phx 								; push start of string on top
.9040	ca		dex				dex
.9041					_TSFindEnd:
.9041	e8		inx				inx
.9042	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.9045	f0 04		beq $904b			beq 	_TSEndOfString
.9047	c9 22		cmp #$22			cmp 	#'"'
.9049	d0 f6		bne $9041			bne 	_TSFindEnd
.904b					_TSEndOfString:
.904b	7a		ply				ply  								; so now Y is first character, X is character after end.
.904c	48		pha				pha 								; save terminating character
.904d	20 55 90	jsr $9055			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9050	68		pla				pla 								; terminating character
.9051	f0 01		beq $9054			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9053	e8		inx				inx
.9054					_TSNotQuote:
.9054	60		rts				rts
.9055					TOWriteBlockXY:
.9055	86 36		stx $36				stx 	zTemp0 						; write end character
.9057	98		tya				tya
.9058	49 ff		eor #$ff			eor 	#$FF
.905a	38		sec				sec
.905b	65 36		adc $36				adc 	zTemp0
.905d	1a		inc a				inc 	a 							; one extra for NULL
.905e	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.9061					_TOBlockLoop:
.9061	c4 36		cpy $36				cpy 	zTemp0
.9063	f0 09		beq $906e			beq 	_TOBlockExit
.9065	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.9068	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.906b	c8		iny				iny
.906c	80 f3		bra $9061			bra 	_TOBlockLoop
.906e					_TOBlockExit:
.906e	a9 00		lda #$00			lda 	#0
.9070	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.9073	60		rts				rts
.9074					TokeniseHexConstant:
.9074	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9076	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.9079	e8		inx				inx									; start of quoted string.
.907a	da		phx				phx 								; push start of constant on top
.907b	ca		dex				dex
.907c					_THFindLoop:
.907c	e8		inx				inx
.907d	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9080	c9 30		cmp #$30			cmp 	#"0"
.9082	90 0c		bcc $9090			bcc 	_THFoundEnd
.9084	c9 3a		cmp #$3a			cmp 	#"9"+1
.9086	90 f4		bcc $907c			bcc 	_THFindLoop
.9088	c9 41		cmp #$41			cmp 	#"A"
.908a	90 04		bcc $9090			bcc 	_THFoundEnd
.908c	c9 47		cmp #$47			cmp 	#"F"+1
.908e	90 ec		bcc $907c			bcc 	_THFindLoop
.9090					_THFoundEnd:
.9090	7a		ply				ply 								; restore start
.9091	20 55 90	jsr $9055			jsr 	TOWriteBlockXY 				; output the block
.9094	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9095					TokeniseCalculateHash:
.9095	da		phx				phx
.9096	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9099	a9 00		lda #$00			lda 	#0
.909b					_TCHLoop:
.909b	18		clc				clc
.909c	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.909f	e8		inx				inx
.90a0	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.90a3	d0 f6		bne $909b			bne 	_TCHLoop
.90a5	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.90a8	fa		plx				plx
.90a9	60		rts				rts
.90aa					FixLineBufferCase:
.90aa	a2 00		ldx #$00			ldx 	#0
.90ac					_FLBCLoop:
.90ac	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.90af	f0 22		beq $90d3			beq 	_FLBCExit 					; end of string.
.90b1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.90b3	f0 11		beq $90c6			beq 	_FLBCInQuotes
.90b5	e8		inx				inx
.90b6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.90b8	90 f2		bcc $90ac			bcc 	_FLBCLoop
.90ba	c9 7b		cmp #$7b			cmp 	#'z'+1
.90bc	b0 ee		bcs $90ac			bcs 	_FLBCLoop
.90be	38		sec				sec 								; make U/C
.90bf	e9 20		sbc #$20			sbc 	#32
.90c1	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.90c4	80 e6		bra $90ac			bra 	_FLBCLoop
.90c6					_FLBCInQuotes:
.90c6	e8		inx				inx 								; advance
.90c7	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.90ca	f0 07		beq $90d3			beq 	_FLBCExit 					; exit on EOS
.90cc	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.90ce	d0 f6		bne $90c6			bne 	_FLBCInQuotes
.90d0	e8		inx				inx 								; skip over it
.90d1	80 d9		bra $90ac			bra 	_FLBCLoop
.90d3					_FLBCExit:
.90d3	60		rts				rts
.90d4					TokeniseExtractLineNumber:
.90d4	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.90d7	48		pha				pha
.90d8	ad 16 07	lda $0716			lda 	tokenLineNumber
.90db	48		pha				pha
.90dc	20 12 91	jsr $9112			jsr 	_TELNTimes2 				; line # x 4
.90df	20 12 91	jsr $9112			jsr 	_TELNTimes2 				; line # x 2
.90e2	18		clc				clc 								; add stacked value
.90e3	68		pla				pla
.90e4	6d 16 07	adc $0716			adc 	tokenLineNumber
.90e7	8d 16 07	sta $0716			sta 	tokenLineNumber
.90ea	68		pla				pla
.90eb	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.90ee	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.90f1	20 12 91	jsr $9112			jsr 	_TELNTimes2 				; line # x 10
.90f4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.90f7	e8		inx				inx
.90f8	29 0f		and #$0f			and 	#15 						; add to line #
.90fa	18		clc				clc
.90fb	6d 16 07	adc $0716			adc 	tokenLineNumber
.90fe	8d 16 07	sta $0716			sta 	tokenLineNumber
.9101	90 03		bcc $9106			bcc 	_TLENNoCarry
.9103	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9106					_TLENNoCarry:
.9106	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9109	c9 30		cmp #$30			cmp 	#'0'
.910b	90 04		bcc $9111			bcc 	_TLENExit
.910d	c9 3a		cmp #$3a			cmp 	#'9'+1
.910f	90 c3		bcc $90d4			bcc 	TokeniseExtractLineNumber
.9111					_TLENExit:
.9111	60		rts				rts
.9112					_TELNTimes2:
.9112	0e 16 07	asl $0716			asl 	tokenLineNumber
.9115	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9118	60		rts				rts
.9119					TokeniseWriteByte:
.9119	da		phx				phx
.911a	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.911d	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9120	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9123	fa		plx				plx
.9124	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9125					CheckCreateVariableRecord:
.9125	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9127	85 36		sta $36				sta 	0+zTemp0
.9129	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.912b	85 37		sta $37				sta 	1+zTemp0
.912d	20 f8 91	jsr $91f8			jsr 	VariableOpen 				; make variable space available
.9130					_CCVSearch:
.9130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9132	f0 2c		beq $9160			beq 	_CCVFail
.9134	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9136	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9138	cd 03 07	cmp $0703			cmp 	identHash
.913b	d0 16		bne $9153			bne 	_CCVNext
.913d	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.913f	ae 00 07	ldx $0700			ldx 	identStart
.9142					_CCVCompare:
.9142	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9145	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9147	e8		inx				inx 								; advance pointers
.9148	c8		iny				iny
.9149	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.914a	d0 07		bne $9153			bne 	_CCVNext  					; didn't match go to next.
.914c	90 f4		bcc $9142			bcc 	_CCVCompare 				; not finished yet.
.914e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9151	f0 41		beq $9194			beq 	_CCVFound 					; yes, we were successful
.9153					_CCVNext:
.9153	18		clc				clc
.9154	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9156	65 36		adc $36				adc 	zTemp0
.9158	85 36		sta $36				sta 	zTemp0
.915a	90 d4		bcc $9130			bcc 	_CCVSearch
.915c	e6 37		inc $37				inc 	zTemp0+1
.915e	80 d0		bra $9130			bra 	_CCVSearch
.9160					_CCVFail:
.9160	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9162	ad 03 07	lda $0703			lda 	identHash
.9165	91 36		sta ($36),y			sta 	(zTemp0),y
.9167	c8		iny				iny 								; offset 2 is the type byte
.9168	ad 04 07	lda $0704			lda 	identTypeByte
.916b	91 36		sta ($36),y			sta 	(zTemp0),y
.916d	c8		iny				iny
.916e					_CCVData:
.916e	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9170	91 36		sta ($36),y			sta 	(zTemp0),y
.9172	c8		iny				iny
.9173	c0 08		cpy #$08			cpy 	#8
.9175	90 f7		bcc $916e			bcc 	_CCVData
.9177	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.917a					_CCVCopyName:
.917a	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.917d	91 36		sta ($36),y			sta 	(zTemp0),y
.917f	e8		inx				inx
.9180	c8		iny				iny
.9181	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9184	d0 f4		bne $917a			bne 	_CCVCopyName
.9186	98		tya				tya 								; patch offset
.9187	92 36		sta ($36)			sta 	(zTemp0)
.9189	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.918b	91 36		sta ($36),y			sta 	(zTemp0),y
.918d	88		dey				dey
.918e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9190	09 80		ora #$80			ora 	#$80
.9192	91 36		sta ($36),y			sta 	(zTemp0),y
.9194					_CCVFound:
.9194	20 f9 91	jsr $91f9			jsr 	VariableClose 				; map out variables, perhaps.
.9197	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9199	38		sec				sec
.919a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.919c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.919e	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.91a1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.91a3	20 19 91	jsr $9119			jsr 	TokeniseWriteByte
.91a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.982f					MemoryPeek:
.982f	b2 36		lda ($36)			lda 	(zTemp0)
.9831	60		rts				rts
.9832					MemoryPoke:
.9832	92 36		sta ($36)			sta 	(zTemp0)
.9834	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9835					EXTPrintCharacter:
.9835	48		pha				pha
.9836	da		phx				phx
.9837	5a		phy				phy
.9838	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.983b	7a		ply				ply
.983c	fa		plx				plx
.983d	68		pla				pla
.983e	60		rts				rts
.983f					EXTInputSingleCharacter:
.983f	da		phx				phx
.9840	5a		phy				phy
.9841					_EISCWait:
.9841	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9844	c9 00		cmp #$00			cmp 	#0
.9846	f0 f9		beq $9841			beq 	_EISCWait
.9848	7a		ply				ply
.9849	fa		plx				plx
.984a	60		rts				rts
.984b					EXTInputLine:
.984b	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.984d					_ILLoop:
.984d	da		phx				phx 								; read character in
.984e	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9851	fa		plx				plx
.9852	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9854	f0 12		beq $9868			beq 	_ILBackspace
.9856	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9858	f0 15		beq $986f			beq 	_ILExit
.985a	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.985c	90 ef		bcc $984d			bcc 	_ILLoop
.985e	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9860	f0 eb		beq $984d			beq 	_ILLoop
.9862	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9865	e8		inx				inx
.9866	80 e5		bra $984d			bra 	_ILLoop
.9868					_ILBackspace:
.9868	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.986a	f0 e1		beq $984d			beq 	_ILLoop
.986c	ca		dex				dex 								; back one.
.986d	80 de		bra $984d			bra 	_ILLoop
.986f					_ILExit:
.986f	20 35 98	jsr $9835			jsr 	EXTPrintCharacter
.9872	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9875	60		rts				rts
.9876					EXTBreakCheck:
.9876	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.91a7					MemoryNew:
.91a7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91a9	85 30		sta $30				sta 	codePtr
.91ab	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91ad	85 31		sta $31				sta 	codePtr+1
.91af	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.91b1	92 30		sta ($30)			sta 	(codePtr)
.91b3	60		rts				rts
.91b4					MemoryAppend:
.91b4	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91b6	85 30		sta $30				sta 	codePtr
.91b8	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91ba	85 31		sta $31				sta 	codePtr+1
.91bc					_MAFindEnd:
.91bc	b2 30		lda ($30)			lda 	(codePtr)
.91be	f0 0d		beq $91cd			beq 	_MAFoundEnd
.91c0	18		clc				clc
.91c1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91c3	65 30		adc $30				adc 	codePtr
.91c5	85 30		sta $30				sta 	codePtr
.91c7	90 02		bcc $91cb			bcc 	_CREExit
.91c9	e6 31		inc $31				inc 	codePtr+1
.91cb					_CREExit:
.91cb	80 ef		bra $91bc			bra 	_MAFindEnd
.91cd					_MAFoundEnd:
.91cd	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.91d0	c0 04		cpy #$04			cpy 	#4 							; blank line
.91d2	f0 0e		beq $91e2			beq 	_MANoLine
.91d4	a9 00		lda #$00			lda 	#0 							; end of program
.91d6	91 30		sta ($30),y			sta 	(codePtr),y
.91d8					_MACopy:
.91d8	88		dey				dey
.91d9	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.91dc	91 30		sta ($30),y			sta 	(codePtr),y
.91de	c0 00		cpy #$00			cpy 	#0
.91e0	d0 f6		bne $91d8			bne 	_MACopy
.91e2					_MANoLine:
.91e2	60		rts				rts
.91e3					MemoryInline:
.91e3	98		tya				tya 								; put address into stack,x
.91e4	18		clc				clc
.91e5	65 30		adc $30				adc 	codePtr
.91e7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91ea	a5 31		lda $31				lda 	codePtr+1
.91ec	69 00		adc #$00			adc 	#0
.91ee	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91f1	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.91f4	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.91f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/variable.asm

.91f8					VariableOpen:
.91f8	60		rts				rts
.91f9					VariableClose:
.91f9	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
