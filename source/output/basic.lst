
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Mon Jan  2 12:17:18 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_CPRINT                           = $b8; $b8 CPRINT
=$b9						KWD_DATA                             = $b9; $b9 DATA
=$ba						KWD_DIM                              = $ba; $ba DIM
=$bb						KWD_DOWNTO                           = $bb; $bb DOWNTO
=$bc						KWD_ELSE                             = $bc; $bc ELSE
=$bd						KWD_FROM                             = $bd; $bd FROM
=$be						KWD_GFX                              = $be; $be GFX
=$bf						KWD_GOSUB                            = $bf; $bf GOSUB
=$c0						KWD_GOTO                             = $c0; $c0 GOTO
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_INPUT                            = $c3; $c3 INPUT
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_PRINT                            = $d0; $d0 PRINT
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_RETURN                           = $d4; $d4 RETURN
=$d5						KWD_SOLID                            = $d5; $d5 SOLID
=$d6						KWD_SOUND                            = $d6; $d6 SOUND
=$d7						KWD_SPRITE                           = $d7; $d7 SPRITE
=$d8						KWD_TEXT                             = $d8; $d8 TEXT
=$d9						KWD_TO                               = $d9; $d9 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c ad 80	jmp $80ad	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 4b bc	jsr $bc4b		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 0d bc	jsr $bc0d		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 5c bc	jsr $bc5c		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 57 bc	jsr $bc57		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 b1 bc	jsr $bcb1		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 bb bc	jsr $bcbb		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLWriteBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 1a bd	jsr $bd1a		jsr	Export_KNLWriteBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLCloseFile:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 97 bc	jsr $bc97		jsr	Export_KNLCloseFile
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						GXGraphicDraw:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						SNDCommand:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 80 bb	jsr $bb80		jsr	Export_SNDCommand
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDUpdate:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 b3 bb	jsr $bbb3		jsr	Export_SNDUpdate
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						TKListConvertLine:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 31 b5	jsr $b531		jsr	Export_TKListConvertLine
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKTokeniseLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 c5 b7	jsr $b7c5		jsr	Export_TKTokeniseLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80ad		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80af		9a		txs				txs
.80b0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80b2		09 80		ora #$80			ora 	#$80
.80b4		85 00		sta $00				sta 	0
.80b6		20 38 a8	jsr $a838			jsr		UpdateFont 					; update font if between FPGA updates.
.80b9		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.80bc		9c 5c 06	stz $065c			stz 	DefaultDrive 				; zero the default drive.
.80bf		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c1		aa		tax				tax
.80c2		a8		tay				tay
.80c3		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.80c6		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80c8		20 85 80	jsr $8085			jsr 	SNDCommand
.80cb		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80cd		a9 db		lda #$db			lda 	#Prompt & $FF
.80cf		20 88 91	jsr $9188			jsr 	PrintStringXA
.80d2		20 83 8b	jsr $8b83			jsr 	NewProgram 					; erase current program
.80d5		4c 1e 84	jmp $841e			jmp 	WarmStart					; make same size.
.80d8		4c 1e 84	jmp $841e			jmp 	WarmStart
>80db		8d				Prompt:	.text 	128+13
>80dc		0d 0d						.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80de		09 09 30 32 2f 30 31 2f			.text 9,9,"02/01/23  23"
>80e6		32 33 20 20 32 33

;******  Return to file: ./common/aa.system/00start.asm

>80ec		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80f0						AssembleGroup1:
.80f0		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80f2		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80f5		80 02		bra $80f9			bra 	AsmGroup12
.80f7						AssembleGroup2:
.80f7		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80f9						AsmGroup12:
.80f9		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80fc		68		pla				pla 								; pop the return address to access the information following.
.80fd		fa		plx				plx
.80fe		20 85 81	jsr $8185			jsr 	AccessParameters 			; get opcode and save as base
.8101		8d 24 04	sta $0424			sta 	BaseOpcode
.8104		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8107		d0 08		bne $8111			bne 	_AG12HaveMask
.8109		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.810b		20 8d 81	jsr $818d			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.810e		8d 25 04	sta $0425			sta 	ModeMask
.8111						_AG12HaveMask:
.8111		20 c1 82	jsr $82c1			jsr 	TypeAndCalculateOperand 	; get zero page type
.8114		da		phx				phx 								; save found address mode
.8115		20 f1 81	jsr $81f1			jsr 	AssembleModeX
.8118		fa		plx				plx  								; restore address mode
.8119		b0 0b		bcs $8126			bcs 	_AG12Exit
.811b		20 27 81	jsr $8127			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.811e		20 f1 81	jsr $81f1			jsr 	AssembleModeX
.8121		b0 03		bcs $8126			bcs 	_AG12Exit
.8123		4c f8 a1	jmp $a1f8			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8126						_AG12Exit:
.8126		60		rts				rts
.8127						PromoteToAbsolute:
.8127		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8129		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.812b		f0 19		beq $8146			beq 	_PTADo
.812d		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.812f		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8131		f0 13		beq $8146			beq 	_PTADo
.8133		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8135		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8137		f0 0d		beq $8146			beq 	_PTADo
.8139		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.813b		e0 d1		cpx #$d1			cpx 	#AM_IND
.813d		f0 07		beq $8146			beq 	_PTADo
.813f		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8141		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8143		f0 01		beq $8146			beq 	_PTADo
.8145		60		rts				rts
.8146						_PTADo:
.8146		aa		tax				tax
.8147		60		rts				rts
.8148						AssembleGroup3:
.8148		68		pla				pla 								; get parameters, which is just the opcode.
.8149		fa		plx				plx
.814a		20 85 81	jsr $8185			jsr 	AccessParameters 			; get and output opcode
.814d		20 9d 81	jsr $819d			jsr 	AssemblerWriteByte
.8150		20 25 83	jsr $8325			jsr 	CalculateOperand 			; get a 16 bit operand
.8153		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8155		38		sec				sec
.8156		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8159		48		pha				pha 								; LSB in A
.815a		a5 60		lda $60				lda 	NSMantissa1
.815c		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.815f		aa		tax				tax 								; MSB in X
.8160		68		pla				pla
.8161		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8162		69 7f		adc #$7f			adc 	#$7F
.8164		90 01		bcc $8167			bcc 	_AG3NoCarry
.8166		e8		inx				inx
.8167						_AG3NoCarry:
.8167		38		sec				sec 								; fix back and write out anyways.
.8168		e9 80		sbc #$80			sbc 	#$80
.816a		20 9d 81	jsr $819d			jsr 	AssemblerWriteByte
.816d		e0 00		cpx #$00			cpx 	#0 							; was it in range
.816f		f0 0a		beq $817b			beq 	_AG3Exit
.8171		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.8174		29 01		and #$01			and 	#1
.8176		f0 03		beq $817b			beq 	_AG3Exit
.8178		4c fd a1	jmp $a1fd			jmp 	RangeError 					; no, branch is out of range
.817b						_AG3Exit:
.817b		60		rts				rts
.817c						AssembleGroup4:
.817c		68		pla				pla 								; pop address
.817d		fa		plx				plx
.817e		20 85 81	jsr $8185			jsr 	AccessParameters 			; access and get first
.8181		20 9d 81	jsr $819d			jsr 	AssemblerWriteByte 			; output it.
.8184		60		rts				rts
.8185						AccessParameters:
.8185		8d 21 04	sta $0421			sta 	ParamStart
.8188		8e 22 04	stx $0422			stx 	ParamStart+1
.818b		a9 01		lda #$01			lda 	#1
.818d						GetParameter:
.818d		5a		phy				phy
.818e		a8		tay				tay
.818f		ad 21 04	lda $0421			lda 	ParamStart
.8192		85 36		sta $36				sta 	zTemp0
.8194		ad 22 04	lda $0422			lda 	ParamStart+1
.8197		85 37		sta $37				sta 	zTemp0+1
.8199		b1 36		lda ($36),y			lda 	(zTemp0),y
.819b		7a		ply				ply
.819c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.819d						AssemblerWriteByte:
.819d		48		pha			pha
.819e		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.81a1		29 02		and #$02		and 	#2
.81a3		f0 1b		beq $81c0		beq 	_AWBNoPrint
.81a5		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.81a8		20 db 81	jsr $81db		jsr 	PrintHex
.81ab		ad 1e 04	lda $041e		lda		AssemblerAddress
.81ae		20 db 81	jsr $81db		jsr 	PrintHex
.81b1		a9 20		lda #$20		lda 	#' '
.81b3		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81b6		68		pla			pla 									; print byte
.81b7		48		pha			pha
.81b8		20 db 81	jsr $81db		jsr 	PrintHex
.81bb		a9 0d		lda #$0d		lda 	#13
.81bd		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81c0						_AWBNoPrint:
.81c0		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81c3		85 36		sta $36			sta 	zTemp0
.81c5		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81c8		f0 0e		beq $81d8		beq 	_AWBRange
.81ca		85 37		sta $37			sta 	zTemp0+1
.81cc		68		pla			pla 									; write byte out
.81cd		92 36		sta ($36)		sta 	(zTemp0)
.81cf		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81d2		d0 03		bne $81d7		bne 	_AWBNoCarry
.81d4		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81d7						_AWBNoCarry:
.81d7		60		rts			rts
.81d8						_AWBRange:
.81d8		4c fd a1	jmp $a1fd		jmp 	RangeError
.81db						PrintHex:
.81db		48		pha				pha
.81dc		4a		lsr a				lsr 	a
.81dd		4a		lsr a				lsr 	a
.81de		4a		lsr a				lsr 	a
.81df		4a		lsr a				lsr 	a
.81e0		20 e4 81	jsr $81e4			jsr 	_PrintNibble
.81e3		68		pla				pla
.81e4						_PrintNibble:
.81e4		29 0f		and #$0f			and 	#15
.81e6		c9 0a		cmp #$0a			cmp 	#10
.81e8		90 02		bcc $81ec			bcc 	_NoShift
.81ea		69 06		adc #$06			adc 	#6
.81ec						_NoShift:
.81ec		69 30		adc #$30			adc 	#48
.81ee		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81f1						AssembleModeX:
.81f1		5a		phy				phy
.81f2		ad 23 04	lda $0423			lda 	IsGroup1
.81f5		f0 17		beq $820e			beq 	_AMXGroup2
.81f7		8a		txa				txa 							; is it in group # 1
.81f8		29 40		and #$40			and 	#AM_ISG1
.81fa		f0 4d		beq $8249			beq 	_AMXFail 				; no, give up.
.81fc		8a		txa				txa 							; get back.
.81fd		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81ff		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8201		d0 22		bne $8225			bne 	_AMXHaveInfo
.8203		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.8206		c9 81		cmp #$81			cmp 	#$81
.8208		f0 3f		beq $8249			beq 	_AMXFail
.820a		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.820c		80 17		bra $8225			bra 	_AMXHaveInfo 			; odd design decision there.
.820e						_AMXGroup2:
.820e		8a		txa				txa 							; is it in group 2 ?
.820f		29 20		and #$20			and 	#AM_ISG2
.8211		f0 36		beq $8249			beq 	_AMXFail 				; no, give up.
.8213		8a		txa				txa 							; get the offset into Y
.8214		29 1f		and #$1f			and 	#$1F
.8216		4a		lsr a				lsr 	a 						; make it 0-7.
.8217		4a		lsr a				lsr  	a
.8218		a8		tay				tay
.8219		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.821c						_AMXCheckOkay:
.821c		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.821d		88		dey				dey
.821e		10 fc		bpl $821c			bpl 	_AMXCheckOkay
.8220		90 27		bcc $8249			bcc 	_AMXFail 				; not allowed.
.8222		8a		txa				txa  							; get mask back
.8223		29 1f		and #$1f			and 	#$1F
.8225						_AMXHaveInfo:
.8225		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8227		10 04		bpl $822d			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8229		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.822b		d0 1c		bne $8249			bne 	_AMXFail
.822d						_AMXAnySize:
.822d		18		clc				clc 							; add offset to the base opcode
.822e		6d 24 04	adc $0424			adc 	BaseOpcode
.8231						_AMXOutputCode:
.8231		20 9d 81	jsr $819d			jsr 	AssemblerWriteByte 		; write the opcode out.
.8234		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8236		f0 0e		beq $8246			beq 	_AMXExit
.8238		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.823a		20 9d 81	jsr $819d			jsr 	AssemblerWriteByte
.823d		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.823f		30 05		bmi $8246			bmi 	_AMXExit
.8241		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8243		20 9d 81	jsr $819d			jsr 	AssemblerWriteByte
.8246						_AMXExit:
.8246		7a		ply				ply
.8247		38		sec				sec
.8248		60		rts				rts
.8249						_AMXFail:
.8249		a0 00		ldy #$00			ldy 	#0
.824b						_AMXCheckOddities:
.824b		8a		txa				txa
.824c		d9 73 82	cmp $8273,y			cmp 	ExtraOpcode+2,y 		; match address mode
.824f		d0 15		bne $8266			bne 	_AMXCONext
.8251		b9 71 82	lda $8271,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8254		cd 24 04	cmp $0424			cmp 	BaseOpcode
.8257		d0 0d		bne $8266			bne 	_AMXCONext
.8259		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.825b		10 04		bpl $8261			bpl 	_AMXCONotZero
.825d		a5 60		lda $60				lda 	NSMantissa1
.825f		d0 05		bne $8266			bne 	_AMXCONext
.8261						_AMXCONotZero:
.8261		b9 72 82	lda $8272,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8264		80 cb		bra $8231			bra 	_AMXOutputCode 			; and assemble it
.8266						_AMXCONext:
.8266		c8		iny				iny
.8267		c8		iny				iny
.8268		c8		iny				iny
.8269		b9 71 82	lda $8271,y			lda 	ExtraOpcode+0,y 		; end of table
.826c		d0 dd		bne $824b			bne 	_AMXCheckOddities
.826e						_AMXCOFail:
.826e		7a		ply				ply
.826f		18		clc				clc
.8270		60		rts				rts
.8271						ExtraOpcode:
>8271		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8274		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8277		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>827a		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>827d		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8280		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8283		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8286		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8289		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>828c		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>828f		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8290						LabelHere:
.8290		c8		iny				iny 								; skip .
.8291		a2 00		ldx #$00			ldx 	#0 							; get a term
.8293		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm
.8296		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8298		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.829a		d0 22		bne $82be			bne 	_ALType 					; otherwise typing error
.829c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.829e		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82a0		b5 60		lda $60,x			lda 	NSMantissa1,x
.82a2		85 37		sta $37				sta 	zTemp0+1
.82a4		5a		phy				phy 								; copy address in (64k)
.82a5		a0 01		ldy #$01			ldy 	#1
.82a7		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.82aa		92 36		sta ($36)			sta 	(zTemp0)
.82ac		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.82af		91 36		sta ($36),y			sta 	(zTemp0),y
.82b1		c8		iny				iny
.82b2		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82b4		91 36		sta ($36),y			sta 	(zTemp0),y
.82b6		c8		iny				iny
.82b7		91 36		sta ($36),y			sta 	(zTemp0),y
.82b9		c8		iny				iny
.82ba		91 36		sta ($36),y			sta 	(zTemp0),y
.82bc		7a		ply				ply
.82bd		60		rts				rts
.82be						_ALType:
.82be		4c 02 a2	jmp $a202			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82c1						TypeAndCalculateOperand:
.82c1		b1 30		lda ($30),y			lda 	(codePtr),y
.82c3		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82c5		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82c7		f0 5b		beq $8324			beq 	_TACOExit
.82c9		c9 80		cmp #$80			cmp 	#KWC_EOL
.82cb		f0 57		beq $8324			beq 	_TACOExit
.82cd		c8		iny				iny
.82ce		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82d0		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82d2		f0 51		beq $8325			beq 	CalculateOperand
.82d4		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82d6		f0 1f		beq $82f7			beq 	_TACOIndirect
.82d8		88		dey				dey 								; undo get of first character
.82d9		20 25 83	jsr $8325			jsr 	CalculateOperand 			; get operand
.82dc		b1 30		lda ($30),y			lda 	(codePtr),y
.82de		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82e0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82e2		d0 40		bne $8324			bne 	_TACOExit
.82e4		c8		iny				iny
.82e5		20 2f 83	jsr $832f			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82e8		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82ea		c9 58		cmp #$58			cmp 	#'X'
.82ec		f0 36		beq $8324			beq 	_TACOExit
.82ee		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82f0		c9 59		cmp #$59			cmp 	#'Y'
.82f2		f0 30		beq $8324			beq 	_TACOExit
.82f4						_TACOSyntax:
.82f4		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
.82f7						_TACOIndirect:
.82f7		20 25 83	jsr $8325			jsr 	CalculateOperand 			; get the operand
.82fa		b1 30		lda ($30),y			lda 	(codePtr),y
.82fc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82fe		f0 17		beq $8317			beq 	_TACOIndX
.8300		20 16 91	jsr $9116			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8303		b1 30		lda ($30),y			lda 	(codePtr),y
.8305		a2 d1		ldx #$d1			ldx 	#AM_IND
.8307		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8309		d0 19		bne $8324			bne 	_TACOExit
.830b		c8		iny				iny
.830c		20 2f 83	jsr $832f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.830f		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8311		d0 e1		bne $82f4			bne 	_TACOSyntax
.8313		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8315		80 0d		bra $8324			bra 	_TACOExit
.8317						_TACOIndX:
.8317		c8		iny				iny
.8318		20 2f 83	jsr $832f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.831b		c9 58		cmp #$58			cmp 	#'X' 						; check X
.831d		d0 d5		bne $82f4			bne 	_TACOSyntax
.831f		20 16 91	jsr $9116			jsr 	CheckRightBracket			; check )
.8322		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8324						_TACOExit:
.8324		60		rts				rts
.8325						CalculateOperand:
.8325		48		pha				pha
.8326		da		phx				phx
.8327		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8329		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger
.832c		fa		plx				plx
.832d		68		pla				pla
.832e		60		rts				rts
.832f						TACOCheckXY:
.832f		b1 30		lda ($30),y			lda 	(codePtr),y
.8331		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8333		c9 40		cmp #$40			cmp 	#$40
.8335		d0 21		bne $8358			bne 	_TCXYFail
.8337		b1 30		lda ($30),y			lda 	(codePtr),y
.8339		18		clc				clc
.833a		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.833c		85 37		sta $37				sta 	zTemp0+1
.833e		c8		iny				iny
.833f		b1 30		lda ($30),y			lda 	(codePtr),y
.8341		c8		iny				iny
.8342		85 36		sta $36				sta 	zTemp0
.8344		5a		phy				phy 								; save position
.8345		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8347		b1 36		lda ($36),y			lda 	(zTemp0),y
.8349		d0 0c		bne $8357			bne 	_TCXYPopFail
.834b		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.834d		b1 36		lda ($36),y			lda 	(zTemp0),y
.834f		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8351		f0 08		beq $835b			beq 	_TCXYFound
.8353		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8355		f0 04		beq $835b			beq 	_TCXYFound
.8357						_TCXYPopFail:
.8357		7a		ply				ply
.8358						_TCXYFail:
.8358		a9 00		lda #$00			lda 	#0
.835a		60		rts				rts
.835b						_TCXYFound:
.835b		7a		ply				ply 								; restore position
.835c		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.835e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.835f						BackloadProgram:
.835f		20 83 8b	jsr $8b83			jsr 	NewProgram 					; does the actual NEW.
.8362		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.8364		a9 b6		lda #$b6			lda 	#_BLLoad & $FF
.8366		20 88 91	jsr $9188			jsr 	PrintStringXA
.8369		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.836b		8d 59 06	sta $0659			sta 	BackLoadPage
.836e		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8370		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.8373		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8375		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8378		a9 ff		lda #$ff			lda 	#$FF
.837a		8d fa ff	sta $fffa			sta 	$FFFA
.837d						_BPLoop:
.837d		a2 ff		ldx #$ff			ldx 	#$FF
.837f		20 cb 83	jsr $83cb			jsr 	BLReadByte 					; read a byte
.8382		c9 00		cmp #$00			cmp 	#0
.8384		f0 29		beq $83af			beq 	_BPExit 					; if 0 exit
.8386		30 27		bmi $83af			bmi 	_BPExit 					; if -ve exit
.8388						_BPCopy:
.8388		e8		inx				inx  								; copy byte into the lineBuffer
.8389		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.838c		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.838f		20 cb 83	jsr $83cb			jsr 	BLReadByte 					; read next byte
.8392		30 0a		bmi $839e			bmi 	_BPEndLine 					; -ve = EOL
.8394		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8396		d0 02		bne $839a			bne 	_BPNotTab
.8398		a9 20		lda #$20			lda 	#' '
.839a						_BPNotTab:
.839a		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.839c		b0 ea		bcs $8388			bcs 	_BPCopy 					; until a control character, should be 13 received.
.839e						_BPEndLine:
.839e		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.83a1		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.83a4		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.83a7		f0 d4		beq $837d			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83a9		38		sec				sec 								; append not insert
.83aa		20 61 a7	jsr $a761			jsr 	MemoryInsertLine 			; append to current program
.83ad		80 ce		bra $837d			bra 	_BPLoop
.83af						_BPExit:
.83af		9c fa ff	stz $fffa			stz 	$FFFA
.83b2		20 b4 84	jsr $84b4			jsr 	ClearCommand 				; clear variables etc.
.83b5		60		rts				rts
.83b6						_BLLoad:
>83b6		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83be		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83cb						BLReadByte:
.83cb		da		phx				phx
.83cc		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83ce		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83d1		85 0b		sta $0b				sta 	8+3
.83d3		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83d6		85 36		sta $36				sta 	zTemp0
.83d8		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83db		85 37		sta $37				sta 	zTemp0+1
.83dd		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83df		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83e2		d0 0f		bne $83f3			bne 	_BLNoCarry
.83e4		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83e7		10 0a		bpl $83f3			bpl 	_BLNoCarry 					; need a new page
.83e9		48		pha				pha
.83ea		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83ec		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83ef		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83f2		68		pla				pla
.83f3						_BLNoCarry:
.83f3		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83f5		fa		plx				plx
.83f6		c9 00		cmp #$00			cmp 	#0
.83f8		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83f9						EditProgramCode:
.83f9		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.83fc		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.83ff		20 05 a8	jsr $a805			jsr 	MemorySearch
.8402		90 05		bcc $8409			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8404		d0 03		bne $8409			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8406		20 2a a7	jsr $a72a			jsr 	MemoryDeleteLine 			; delete the line
.8409						_EPCNoDelete:
.8409		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.840c		c9 80		cmp #$80			cmp 	#KWC_EOL
.840e		f0 0d		beq $841d			beq 	_EPCNoInsert
.8410		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8413		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8416		20 05 a8	jsr $a805			jsr 	MemorySearch
.8419		18		clc				clc 								; insert at this point.
.841a		20 61 a7	jsr $a761			jsr 	MemoryInsertLine 			; insert the line
.841d						_EPCNoInsert:
.841d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.841e						WarmStart:
.841e		a2 ff		ldx #$ff			ldx 	#$FF
.8420		9a		txs				txs
.8421		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8423		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8426		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8429		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line
.842c		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.842f		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8432		d0 17		bne $844b			bne 	_WSEditCode 				; if so,edit code.
.8434		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8437		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8439		85 30		sta $30				sta 	codePtr
.843b		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.843d		85 31		sta $31				sta 	codePtr+1
.843f		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.8442		c9 80		cmp #$80			cmp 	#KWC_EOL
.8444		f0 d8		beq $841e			beq 	WarmStart
.8446		20 13 8d	jsr $8d13			jsr 	RUNCodePointerLine 			; execute that line.
.8449		80 d3		bra $841e			bra 	WarmStart
.844b						_WSEditCode:
.844b		20 f9 83	jsr $83f9			jsr 	EditProgramCode 			; edit the program code
.844e		20 b4 84	jsr $84b4			jsr 	ClearCommand 				; clear all variables etc.
.8451		80 cb		bra $841e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8453						AssembleCommand:
.8453		a2 00		ldx #$00			ldx 	#0
.8455		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger 		; start address
.8458		a5 58		lda $58				lda 	NSMantissa0
.845a		8d 1e 04	sta $041e			sta 	AssemblerAddress
.845d		a5 60		lda $60				lda 	NSMantissa1
.845f		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.8462		20 1e 91	jsr $911e			jsr 	CheckComma
.8465		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; options 0-3
.8468		a5 58		lda $58				lda 	NSMantissa0
.846a		8d 20 04	sta $0420			sta 	AssemblerControl
.846d		60		rts				rts
.846e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.846f						AssertCommand:
.846f		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8471		20 e7 9f	jsr $9fe7			jsr 	EvaluateInteger 			; the assert test
.8474		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; exit if result is non zero.
.8477		d0 05		bne $847e			bne 	_ACExit
.8479		a9 0a		lda #$0a		lda	#10
.847b		4c 2f 91	jmp $912f		jmp	ErrorHandler
.847e						_ACExit:
.847e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.847f						CallCommand:
.847f		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8481		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger
.8484						_CCClear
.8484		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8485		20 7a a0	jsr $a07a			jsr 	NSMSetZero 					; these are optional sequentially.
.8488		e0 04		cpx #$04			cpx 	#4
.848a		d0 f8		bne $8484			bne 	_CCClear
.848c		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.848e						_CCCParam:
.848e		b1 30		lda ($30),y			lda 	(codePtr),y
.8490		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8492		d0 09		bne $849d			bne 	_CCCRun6502
.8494		c8		iny				iny 								; skip comma
.8495		e8		inx				inx	 								; next level
.8496		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8499		e0 03		cpx #$03			cpx 	#3
.849b		90 f1		bcc $848e			bcc 	_CCCParam 					; done all 3 ?
.849d						_CCCRun6502:
.849d		5a		phy				phy 								; save position
.849e		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.84a0		85 37		sta $37				sta 	zTemp0+1
.84a2		a5 58		lda $58				lda 	NSMantissa0
.84a4		85 36		sta $36				sta 	zTemp0
.84a6		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.84a8		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.84aa		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.84ac		20 b1 84	jsr $84b1			jsr 	_CCCZTemp0 					; call zTemp0
.84af		7a		ply				ply 								; restore position and exit
.84b0		60		rts				rts
.84b1						_CCCZTemp0:
.84b1		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84b4						ClearCommand:
.84b4		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84b6		85 36		sta $36				sta 	0+zTemp0
.84b8		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84ba		85 37		sta $37				sta 	1+zTemp0
.84bc						_ClearZeroLoop:
.84bc		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.84be		f0 24		beq $84e4			beq 	_ClearZeroEnd
.84c0		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84c2		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.84c4						_ClearOneVariable:
.84c4		91 36		sta ($36),y			sta 	(zTemp0),y
.84c6		c8		iny				iny
.84c7		c0 08		cpy #$08			cpy 	#8
.84c9		d0 f9		bne $84c4			bne 	_ClearOneVariable
.84cb		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84cd		b1 36		lda ($36),y			lda 	(zTemp0),y
.84cf		c9 18		cmp #$18			cmp 	#NSTProcedure
.84d1		d0 04		bne $84d7			bne 	_ClearNotProcedure
.84d3		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84d5		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84d7						_ClearNotProcedure:
.84d7		18		clc				clc 								; go to the next variable
.84d8		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84da		65 36		adc $36				adc 	zTemp0
.84dc		85 36		sta $36				sta 	zTemp0
.84de		90 dc		bcc $84bc			bcc 	_ClearZeroLoop
.84e0		e6 37		inc $37				inc 	zTemp0+1
.84e2		80 d8		bra $84bc			bra 	_ClearZeroLoop
.84e4						_ClearZeroEnd:
.84e4		18		clc				clc
.84e5		a5 36		lda $36				lda 	zTemp0
.84e7		69 01		adc #$01			adc 	#1
.84e9		8d 0c 04	sta $040c			sta 	lowMemPtr
.84ec		a5 37		lda $37				lda 	zTemp0+1
.84ee		69 00		adc #$00			adc 	#0
.84f0		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84f3		20 bf b1	jsr $b1bf			jsr 	StackReset
.84f6		20 25 b2	jsr $b225			jsr 	StringSystemInitialise
.84f9		20 1f 90	jsr $901f			jsr 	ProcedureScan
.84fc		20 c2 8c	jsr $8cc2			jsr 	Command_Restore
.84ff		9c 1e 04	stz $041e			stz 	AssemblerAddress
.8502		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.8505		9c 20 04	stz $0420			stz 	AssemblerControl
.8508		20 69 9c	jsr $9c69			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.850b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.850c						ClearScreen:
.850c		5a		phy				phy
.850d		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.850f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8512		7a		ply				ply
.8513		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8514						Command_Data:
.8514		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8516		a2 80		ldx #$80			ldx 	#KWC_EOL
.8518		20 71 90	jsr $9071			jsr 	ScanForward
.851b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.851c						DimCommand:
.851c		b1 30		lda ($30),y			lda 	(codePtr),y
.851e		29 c0		and #$c0			and 	#$C0
.8520		c9 40		cmp #$40			cmp 	#$40
.8522		d0 7a		bne $859e			bne 	_DCSyntax 				; n o, error.
.8524		b1 30		lda ($30),y			lda 	(codePtr),y
.8526		18		clc				clc
.8527		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8529		85 3f		sta $3f				sta 	zaTemp+1
.852b		c8		iny				iny
.852c		b1 30		lda ($30),y			lda 	(codePtr),y
.852e		c8		iny				iny
.852f		85 3e		sta $3e				sta 	zaTemp
.8531		5a		phy				phy
.8532		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8534		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8536		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8538		c9 18		cmp #$18			cmp 	#NSTProcedure
.853a		f0 62		beq $859e			beq 	_DCSyntax
.853c		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.853e		29 04		and #$04			and 	#NSBIsArray
.8540		f0 64		beq $85a6			beq 	_DCType
.8542		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8544		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8546		d0 59		bne $85a1			bne 	_DCRedefine
.8548		7a		ply				ply
.8549		20 a9 85	jsr $85a9			jsr 	_DCGetSize 				; get array size, check it.
.854c		5a		phy				phy
.854d		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.854f		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8551		7a		ply				ply 							; is there a second (e.g. ,x)
.8552		b1 30		lda ($30),y			lda 	(codePtr),y
.8554		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8556		d0 0a		bne $8562			bne 	_DCOneDimension
.8558		c8		iny				iny 							; skip comma
.8559		20 a9 85	jsr $85a9			jsr 	_DCGetSize 				; get 2nd array size
.855c		5a		phy				phy
.855d		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.855f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8561		7a		ply				ply
.8562						_DCOneDimension:
.8562		5a		phy				phy 							; save position
.8563		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8565		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8567		aa		tax				tax
.8568		c8		iny				iny
.8569		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.856b		e8		inx				inx 							; bump them.
.856c		1a		inc a				inc 	a
.856d		20 25 a0	jsr $a025			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8570		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8572		29 e0		and #$e0			and 	#$E0
.8574		d0 23		bne $8599			bne 	_DCSize
.8576		a0 02		ldy #$02			ldy 	#2 						; get base type
.8578		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857a		20 b7 85	jsr $85b7			jsr 	ScaleByBaseType 		; scale by base type
.857d		a5 36		lda $36				lda 	zTemp0
.857f		a6 37		ldx $37				ldx 	zTemp0+1
.8581		20 2b 9c	jsr $9c2b			jsr 	AllocateXABytes 		; allocate memory
.8584		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8586		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8588		c8		iny				iny
.8589		8a		txa				txa
.858a		91 3e		sta ($3e),y			sta 	(zaTemp),y
.858c		7a		ply				ply 							; get position back
.858d		20 16 91	jsr $9116			jsr 	CheckRightBracket 		; check )
.8590		b1 30		lda ($30),y			lda 	(codePtr),y
.8592		c8		iny				iny 							; consume in case
.8593		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8595		f0 85		beq $851c			beq 	DimCommand
.8597		88		dey				dey 							; undo consume
.8598		60		rts				rts
.8599						_DCSize:
.8599		a9 16		lda #$16		lda	#22
.859b		4c 2f 91	jmp $912f		jmp	ErrorHandler
.859e						_DCSyntax:
.859e		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
.85a1						_DCRedefine:
.85a1		a9 15		lda #$15		lda	#21
.85a3		4c 2f 91	jmp $912f		jmp	ErrorHandler
.85a6						_DCType:
.85a6		4c 02 a2	jmp $a202			jmp 	TypeError
.85a9						_DCGetSize:
.85a9		a2 00		ldx #$00			ldx 	#0 						; get first index.
.85ab		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 	; get array dimension
.85ae		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85b0		f0 e7		beq $8599			beq 	_DCSize
.85b2		c9 fe		cmp #$fe			cmp 	#254
.85b4		f0 e3		beq $8599			beq 	_DCSize
.85b6		60		rts				rts
.85b7						ScaleByBaseType:
.85b7		29 10		and #$10			and 	#NSBIsString 			; is it string
.85b9		d0 19		bne $85d4			bne 	_SBBTString
.85bb		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85bd		48		pha				pha
.85be		a5 36		lda $36				lda 	zTemp0
.85c0		48		pha				pha
.85c1		06 36		asl $36				asl 	zTemp0 					; x 2
.85c3		26 37		rol $37				rol 	zTemp0+1
.85c5		06 36		asl $36				asl 	zTemp0 					; x 4
.85c7		26 37		rol $37				rol 	zTemp0+1
.85c9		68		pla				pla 							; add stacked value = x 5
.85ca		65 36		adc $36				adc 	zTemp0
.85cc		85 36		sta $36				sta 	zTemp0
.85ce		68		pla				pla
.85cf		65 37		adc $37				adc 	zTemp0+1
.85d1		85 37		sta $37				sta 	zTemp0+1
.85d3		60		rts				rts
.85d4						_SBBTString:
.85d4		06 36		asl $36				asl 	zTemp0
.85d6		26 37		rol $37				rol 	zTemp0+1
.85d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.85d9						Command_Dir:
.85d9		ad 5c 06	lda $065c			lda     DefaultDrive				; set drive to list.
.85dc		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.85de		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.85e0		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.85e3		b0 56		bcs $863b			bcs     _CDExit
.85e5						_CDEventLoop:
.85e5		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.85e8		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.85eb		b0 f8		bcs $85e5			bcs     _CDEventLoop
.85ed		ad 47 08	lda $0847			lda     event.type
.85f0		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.85f2		f0 47		beq $863b			beq    	_CDExit
.85f4		20 f9 85	jsr $85f9			jsr     _CDMessages 				; handle various messages
.85f7		80 ec		bra $85e5			bra     _CDEventLoop
.85f9						_CDMessages:
.85f9		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.85fb		f0 15		beq $8612			beq     _CDEVRead
.85fd		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.85ff		f0 19		beq $861a			beq     _CDEVVolume
.8601		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.8603		f0 17		beq $861c			beq     _CDEVFile
.8605		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8607		f0 28		beq $8631			beq     _CDEVFree
.8609		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.860b		f0 26		beq $8633			beq     _CDEVEOF
.860d		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.860f		f0 22		beq $8633			beq     _CDEVEOF
.8611		60		rts				rts
.8612						_CDEVRead:
.8612		ad 4a 08	lda $084a			lda     event.directory.stream
.8615		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8617		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.861a						_CDEVVolume:
.861a		80 f6		bra $8612			bra     _CDEVRead
.861c						_CDEVFile:
.861c		a9 20		lda #$20			lda 	#32
.861e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8621		ad 4c 08	lda $084c			lda     event.directory.file.len
.8624		20 3e 86	jsr $863e			jsr     _CDReadData
.8627		20 88 91	jsr $9188			jsr 	PrintStringXA
.862a		a9 0d		lda #$0d			lda 	#13
.862c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.862f		80 e1		bra $8612			bra     _CDEVRead
.8631						_CDEVFree:
.8631		80 00		bra $8633			bra     _CDEVEOF
.8633						_CDEVEOF:
.8633		ad 4a 08	lda $084a			lda     event.directory.stream
.8636		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8638		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.863b						_CDExit:
.863b		4c 1e 84	jmp $841e			jmp 	WarmStart
.863e						_CDReadData:
.863e		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8640		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.8642		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8644		a9 05		lda #$05			lda     #lineBuffer >> 8
.8646		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8648		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.864b		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.864d		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.8650		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.8652		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8654		60		rts				rts
.8655						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.8655						Command_Drive:
.8655		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger
.8658		8d 5c 06	sta $065c			sta 	DefaultDrive
.865b		60		rts				rts
.065c						DefaultDrive:
>065c								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.865c						EndCommand:
.865c		4c 1e 84	jmp $841e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.865f						ForCommand:
.865f		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8661		20 59 b1	jsr $b159			jsr 	StackOpen
.8664		a2 00		ldx #$00			ldx 	#0
.8666		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm
.8669		b5 50		lda $50,x			lda 	NSStatus,x
.866b		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.866d		d0 47		bne $86b6			bne		_FCError
.866f		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8671		20 26 91	jsr $9126			jsr 	CheckNextA
.8674		e8		inx				inx
.8675		20 e7 9f	jsr $9fe7			jsr 	EvaluateInteger 			; <from> in +1
.8678		b1 30		lda ($30),y			lda 	(codePtr),y
.867a		c8		iny				iny 								; consume it
.867b		48		pha				pha 								; save on stack for later
.867c		c9 bb		cmp #$bb			cmp 	#KWD_DOWNTO
.867e		f0 04		beq $8684			beq 	_FCNoSyntax
.8680		c9 d9		cmp #$d9			cmp 	#KWD_TO
.8682		d0 35		bne $86b9			bne 	_FCSyntaxError
.8684						_FCNoSyntax:
.8684		e8		inx				inx
.8685		20 e7 9f	jsr $9fe7			jsr 	EvaluateInteger
.8688		20 9e b1	jsr $b19e			jsr 	STKSaveCodePosition 		; save loop back position
.868b		68		pla				pla 								; restore DOWNTO or TO
.868c		5a		phy				phy 								; save Y on the stack
.868d		49 bb		eor #$bb			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.868f		f0 02		beq $8693			beq 	_FCNotDownTo
.8691		a9 02		lda #$02			lda 	#2
.8693						_FCNotDownTo:
.8693		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8694		a0 10		ldy #$10			ldy 	#16
.8696		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8698		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.869a		a5 58		lda $58				lda 	NSMantissa0
.869c		91 34		sta ($34),y			sta 	(basicStack),y
.869e		a5 60		lda $60				lda 	NSMantissa1
.86a0		c8		iny				iny
.86a1		91 34		sta ($34),y			sta 	(basicStack),y
.86a3		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.86a5		a2 01		ldx #$01			ldx 	#1
.86a7		20 bc 86	jsr $86bc			jsr 	FCIntegerToStack
.86aa		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.86ac		a2 02		ldx #$02			ldx 	#2
.86ae		20 bc 86	jsr $86bc			jsr 	FCIntegerToStack
.86b1		20 d7 86	jsr $86d7			jsr 	CopyIndexToReference
.86b4		7a		ply				ply 								; restore position
.86b5		60		rts				rts
.86b6						_FCError:
.86b6		4c 02 a2	jmp $a202			jmp 	TypeError
.86b9						_FCSyntaxError:
.86b9		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
.86bc						FCIntegerToStack:
.86bc		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.86be		10 03		bpl $86c3			bpl	 	_FCNotNegative
.86c0		20 43 a0	jsr $a043			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.86c3						_FCNotNegative:
.86c3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.86c5		91 34		sta ($34),y			sta 	(basicStack),y
.86c7		c8		iny				iny
.86c8		b5 60		lda $60,x			lda 	NSMantissa1,x
.86ca		91 34		sta ($34),y			sta 	(basicStack),y
.86cc		c8		iny				iny
.86cd		b5 68		lda $68,x			lda 	NSMantissa2,x
.86cf		91 34		sta ($34),y			sta 	(basicStack),y
.86d1		c8		iny				iny
.86d2		b5 70		lda $70,x			lda 	NSMantissa3,x
.86d4		91 34		sta ($34),y			sta 	(basicStack),y
.86d6		60		rts				rts
.86d7						CopyIndexToReference:
.86d7		5a		phy				phy
.86d8		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.86da		38		sec				sec 								; (because we copy from offset 8)
.86db		b1 34		lda ($34),y			lda 	(basicStack),y
.86dd		e9 08		sbc #$08			sbc 	#8
.86df		85 36		sta $36				sta 	zTemp0
.86e1		c8		iny				iny
.86e2		b1 34		lda ($34),y			lda 	(basicStack),y
.86e4		e9 00		sbc #$00			sbc 	#0
.86e6		85 37		sta $37				sta 	zTemp0+1
.86e8		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.86ea		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.86ec		b1 34		lda ($34),y			lda 	(basicStack),y
.86ee		0a		asl a				asl 	a 							; into carry
.86ef		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.86f1		90 14		bcc $8707			bcc 	_CITRNormal
.86f3		38		sec				sec
.86f4						_CITRNegative:
.86f4		a9 00		lda #$00			lda 	#0
.86f6		f1 34		sbc ($34),y			sbc 	(basicStack),y
.86f8		91 36		sta ($36),y			sta 	(zTemp0),y
.86fa		c8		iny				iny
.86fb		ca		dex				dex
.86fc		d0 f6		bne $86f4			bne 	_CITRNegative
.86fe		88		dey				dey 								; look at MSB of mantissa
.86ff		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8701		09 80		ora #$80			ora 	#$80
.8703		91 36		sta ($36),y			sta 	(zTemp0),y
.8705		7a		ply				ply
.8706		60		rts				rts
.8707						_CITRNormal:
.8707		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8709		91 36		sta ($36),y			sta 	(zTemp0),y
.870b		c8		iny				iny
.870c		ca		dex				dex
.870d		d0 f8		bne $8707			bne 	_CITRNormal
.870f		7a		ply				ply 								; and exit.
.8710		60		rts				rts
.8711						NextCommand:
.8711		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8713		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8715		20 86 b1	jsr $b186			jsr 	StackCheckFrame
.8718		5a		phy				phy
.8719		a0 10		ldy #$10			ldy 	#16 						; get the step count
.871b		b1 34		lda ($34),y			lda 	(basicStack),y
.871d		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.871f		30 02		bmi $8723			bmi 	_NCStepNeg
.8721		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8723						_NCStepNeg:
.8723		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8725		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8727		18		clc				clc
.8728						_NCBump:
.8728		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.872a		91 34		sta ($34),y			sta 	(basicStack),y
.872c		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.872e		c8		iny				iny 								; next byte
.872f		ca		dex				dex 								; do four times
.8730		d0 f6		bne $8728			bne 	_NCBump
.8732		20 d7 86	jsr $86d7			jsr		CopyIndexToReference		; copy it to the reference variable.
.8735		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8737		b1 34		lda ($34),y			lda 	(basicStack),y
.8739		0a		asl a				asl 	a 							; sign bit to carry
.873a		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.873c		85 38		sta $38				sta 	zTemp1
.873e		90 02		bcc $8742			bcc 	_NCCompRev 					; use if step is +ve
.8740		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8742						_NCCompRev:
.8742		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8744		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8746		85 39		sta $39				sta 	zTemp1+1
.8748		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.874a		38		sec				sec
.874b						_NCCompare:
.874b		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.874d		b1 34		lda ($34),y			lda 	(basicStack),y
.874f		a4 39		ldy $39				ldy 	zTemp1+1
.8751		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8753		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8755		e6 39		inc $39				inc 	zTemp1+1
.8757		ca		dex				dex 								; do it 4 times.
.8758		d0 f1		bne $874b			bne 	_NCCompare
.875a		50 02		bvc $875e			bvc 	_NCNoOverflow 				; convert to signed comparison
.875c		49 80		eor #$80			eor 	#$80
.875e						_NCNoOverflow:
.875e		7a		ply				ply 								; restore Y position
.875f		0a		asl a				asl 	a 							; is bit 7 set.
.8760		90 04		bcc $8766			bcc 	_NCLoopBack 				; if no , >= so loop back
.8762		20 78 b1	jsr $b178			jsr 	StackClose 					; exit the loop
.8765		60		rts				rts
.8766						_NCLoopBack:
.8766		20 af b1	jsr $b1af			jsr 	STKLoadCodePosition 		; loop back
.8769		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.876a						Command_GOSUB:
.876a		a2 00		ldx #$00			ldx 	#0
.876c		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.876f		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8771		20 59 b1	jsr $b159			jsr 	StackOpen 					; create frame
.8774		20 9e b1	jsr $b19e			jsr 	STKSaveCodePosition 		; save current position
.8777		4c 8d 87	jmp $878d			jmp 	GotoStackX
.877a						Command_RETURN:
.877a		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.877c		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.877e		20 86 b1	jsr $b186			jsr 	StackCheckFrame
.8781		20 af b1	jsr $b1af			jsr 	STKLoadCodePosition 		; restore code position
.8784		20 78 b1	jsr $b178			jsr 	StackClose
.8787		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8788						GotoCommand:
.8788		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.878a		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger
.878d						GotoStackX:
.878d		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.878f		48		pha				pha 								; it is slightly inefficient, just in cases.
.8790		b5 58		lda $58,x			lda 	NSMantissa0,x
.8792		fa		plx				plx
.8793		20 05 a8	jsr $a805			jsr 	MemorySearch 				; transfer to line number AX.
.8796		90 05		bcc $879d			bcc 	_GotoError 					; not found, off end.
.8798		d0 03		bne $879d			bne 	_GotoError 					; not found exactly
.879a		4c 0c 8d	jmp $8d0c			jmp 	RunNewLine 					; and go straight to new line code.
.879d						_GotoError:
.879d		a9 0d		lda #$0d		lda	#13
.879f		4c 2f 91	jmp $912f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.87a2						IfCommand:
.87a2		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.87a4		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber
.87a7		b1 30		lda ($30),y			lda 	(codePtr),y
.87a9		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.87ab		d0 0a		bne $87b7			bne 	_IfStructured 				; we still support it.
.87ad		c8		iny				iny 								; consume THEN
.87ae		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; is it zero
.87b1		f0 01		beq $87b4			beq 	_IfFail 					; if fail, go to next line
.87b3		60		rts				rts 								; if THEN just continue
.87b4						_IfFail:
.87b4		4c f4 8c	jmp $8cf4			jmp 	EOLCommand
.87b7						_IfStructured:
.87b7		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; is it zero
.87ba		d0 07		bne $87c3			bne 	_IfExit 					; if not, then continue normally.
.87bc		a9 bc		lda #$bc			lda 	#KWD_ELSE 					; look for else/endif
.87be		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.87c0		20 71 90	jsr $9071			jsr 	ScanForward 				; and run from there
.87c3						_IfExit:
.87c3		60		rts				rts
.87c4						ElseCode:
.87c4		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.87c6		aa		tax				tax 								; so just go to the structure exit
.87c7		20 71 90	jsr $9071			jsr 	ScanForward
.87ca		60		rts				rts
.87cb						EndIf:
.87cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.87cc						Command_Input:
.87cc		9c 28 04	stz $0428			stz 	isPrintFlag
.87cf		80 0c		bra $87dd			bra 	Command_IP_Main
.87d1						Command_CPrint:
.87d1		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.87d3		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.87d6		80 05		bra $87dd			bra 	Command_IP_Main
.87d8						Command_Print:
.87d8		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.87da		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.87dd						Command_IP_Main:
.87dd		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87de						_CPLoop:
.87de		08		php				php 								; save last action flag
.87df		b1 30		lda ($30),y			lda 	(codePtr),y
.87e1		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.87e3		f0 54		beq $8839			beq 	_CPExit
.87e5		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87e7		f0 50		beq $8839			beq 	_CPExit
.87e9		68		pla				pla 								; throw last action flag
.87ea		b1 30		lda ($30),y			lda 	(codePtr),y
.87ec		c8		iny				iny
.87ed		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.87ef		f0 45		beq $8836			beq 	_CPContinueWithSameLine
.87f1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.87f3		f0 3c		beq $8831			beq 	_CPTab
.87f5		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.87f7		f0 34		beq $882d			beq 	_CPNewLine
.87f9		88		dey				dey 								; undo the get.
.87fa		20 31 96	jsr $9631			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.87fd		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.87ff		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8801		f0 0d		beq $8810			beq 	_CPIsValue 					; no, display it.
.8803		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.8806		d0 05		bne $880d			bne 	_CPIsPrint 					; otherwise display.
.8808		20 42 88	jsr $8842			jsr 	CIInputValue 				; input a value to the reference
.880b		80 20		bra $882d			bra 	_CPNewLine
.880d						_CPIsPrint:
.880d		20 f6 98	jsr $98f6			jsr 	Dereference 				; dereference if required.
.8810						_CPIsValue:
.8810		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8812		29 10		and #$10			and 	#NSBIsString
.8814		f0 09		beq $881f			beq 	_CPNumber
.8816		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8818		a5 58		lda $58				lda 	NSMantissa0
.881a		20 a5 88	jsr $88a5			jsr 	CPPrintStringXA
.881d		80 be		bra $87dd			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.881f						_CPNumber:
.881f		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8821		20 af 9e	jsr $9eaf			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8824		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8826		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8828		20 a5 88	jsr $88a5			jsr 	CPPrintStringXA 			; print it.
.882b		80 b0		bra $87dd			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.882d						_CPNewLine:
.882d		a9 0d		lda #$0d			lda 	#13
.882f		80 02		bra $8833			bra 	_CPPrintCharDirect
.8831						_CPTab:
.8831		a9 09		lda #$09			lda 	#9 							; print TAB
.8833						_CPPrintCharDirect:
.8833		20 c0 88	jsr $88c0			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8836						_CPContinueWithSameLine:
.8836		38		sec				sec 								; loop round with carry set, which
.8837		80 a5		bra $87de			bra 	_CPLoop 					; will inhibit final CR
.8839						_CPExit:
.8839		28		plp				plp 								; get last action flag
.883a		b0 05		bcs $8841			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.883c		a9 0d		lda #$0d			lda 	#13 						; print new line
.883e		20 c0 88	jsr $88c0			jsr 	CPPVControl
.8841						_CPExit2:
.8841		60		rts				rts
.8842						CIInputValue:
.8842		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8844						_CIInputLine:
.8844		20 c3 88	jsr $88c3			jsr 	CPInputVector 				; get key
.8847		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8849		f0 1f		beq $886a			beq 	_CIHaveValue
.884b		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.884d		f0 11		beq $8860			beq 	_CIBackspace
.884f		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8851		90 f1		bcc $8844			bcc 	_CIInputLine
.8853		e0 50		cpx #$50			cpx 	#80 						; max length
.8855		b0 ed		bcs $8844			bcs 	_CIInputLine
.8857		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.885a		e8		inx				inx
.885b		20 b8 88	jsr $88b8			jsr 	CPPrintVector 				; echo it.
.885e		80 e4		bra $8844			bra 	_CIInputLine
.8860						_CIBackspace:
.8860		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8862		f0 e0		beq $8844			beq 	_CIInputLine
.8864		20 b8 88	jsr $88b8			jsr 	CPPrintVector 				; echo it.
.8867		ca		dex				dex
.8868		80 da		bra $8844			bra 	_CIInputLine
.886a						_CIHaveValue:
.886a		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.886d		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.886f		29 10		and #$10			and 	#NSBIsString
.8871		f0 17		beq $888a			beq 	_CIAssignNumber 			; assign a number
.8873		a2 01		ldx #$01			ldx 	#1
.8875		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8877		95 58		sta $58,x			sta 	NSMantissa0,x
.8879		a9 05		lda #$05			lda 	#lineBuffer >> 8
.887b		95 60		sta $60,x			sta 	NSMantissa1,x
.887d		74 68		stz $68,x			stz 	NSMantissa2,x
.887f		74 70		stz $70,x			stz 	NSMantissa3,x
.8881		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8883		95 50		sta $50,x			sta  	NSStatus,x
.8885		ca		dex				dex 								; X = 0
.8886		20 ff 88	jsr $88ff			jsr 	AssignVariable
.8889		60		rts				rts
.888a						_CIAssignNumber:
.888a		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.888c		85 36		sta $36				sta 	zTemp0
.888e		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8890		85 37		sta $37				sta 	zTemp0+1
.8892		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8894		20 31 9e	jsr $9e31			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8897		90 07		bcc $88a0			bcc 	_CIIsOkay
.8899		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.889b		20 b8 88	jsr $88b8			jsr 	CPPrintVector
.889e		80 a2		bra $8842			bra 	CIInputValue
.88a0						_CIIsOkay:
.88a0		ca		dex				dex 								; X = 0
.88a1		20 ff 88	jsr $88ff			jsr 	AssignVariable
.88a4		60		rts				rts
.88a5						CPPrintStringXA:
.88a5		5a		phy				phy
.88a6		86 37		stx $37				stx 	zTemp0+1
.88a8		85 36		sta $36				sta 	zTemp0
.88aa		a0 00		ldy #$00			ldy 	#0
.88ac						_PSXALoop:
.88ac		b1 36		lda ($36),y			lda 	(zTemp0),y
.88ae		f0 06		beq $88b6			beq 	_PSXAExit
.88b0		20 b8 88	jsr $88b8			jsr 	CPPrintVector
.88b3		c8		iny				iny
.88b4		80 f6		bra $88ac			bra 	_PSXALoop
.88b6						_PSXAExit:
.88b6		7a		ply				ply
.88b7		60		rts				rts
.88b8						CPPrintVector:
.88b8		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.88bb		30 03		bmi $88c0			bmi 	CPPVControl
.88bd		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.88c0						CPPVControl:
.88c0		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.88c3						CPInputVector:
.88c3		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.88c6						LetCommand:
.88c6		a2 00		ldx #$00			ldx 	#0
.88c8		b1 30		lda ($30),y			lda 	(codePtr),y
.88ca		c9 10		cmp #$10			cmp 	#KWD_AT
.88cc		d0 14		bne $88e2			bne 	_LCStandard
.88ce		c8		iny				iny 								; skip equal
.88cf		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.88d2		20 f6 98	jsr $98f6			jsr 	Dereference 				; dereference it to a value
.88d5		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.88d7		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.88d9		95 50		sta $50,x			sta 	NSStatus,x
.88db		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.88dd		d0 0f		bne $88ee			bne 	_LCMain
.88df		4c 02 a2	jmp $a202			jmp 	TypeError 					; was a reference before.
.88e2						_LCStandard:
.88e2		ad 1b 96	lda $961b			lda 	PrecedenceLevel+"*"			; precedence > this
.88e5		20 35 96	jsr $9635			jsr 	EvaluateExpressionAtPrecedence
.88e8		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.88ea		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.88ec		f0 0e		beq $88fc			beq 	_LetGoProc 					; it's a procedure call.
.88ee						_LCMain:
.88ee		a9 3d		lda #$3d			lda 	#"=" 						; check =
.88f0		20 26 91	jsr $9126			jsr 	CheckNextA
.88f3		e8		inx				inx 								; RHS
.88f4		20 bf 9f	jsr $9fbf			jsr 	EvaluateValue
.88f7		ca		dex				dex
.88f8		20 ff 88	jsr $88ff			jsr 	AssignVariable
.88fb		60		rts				rts
.88fc						_LetGoProc:
.88fc		4c ca 8b	jmp $8bca			jmp 	CallProcedure
.88ff						AssignVariable:
.88ff		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8901		48		pha				pha 								; save a copy
.8902		55 51		eor $51,x			eor 	NSStatus+1,x
.8904		29 10		and #$10			and 	#NSBIsString
.8906		d0 0b		bne $8913			bne 	_ASError
.8908		68		pla				pla 								; get back
.8909		29 10		and #$10			and 	#NSBIsString 				; check type
.890b		d0 03		bne $8910			bne 	_ASString
.890d		4c 34 98	jmp $9834			jmp 	AssignNumber
.8910						_ASString:
.8910		4c 92 98	jmp $9892			jmp 	AssignString
.8913						_ASError:
.8913		4c 02 a2	jmp $a202			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8916						Command_List:
.8916		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8919		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.891b		20 85 80	jsr $8085			jsr 	SNDCommand
.891e		b1 30		lda ($30),y			lda 	(codePtr),y
.8920		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8922		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8924		f0 6e		beq $8994			beq 	_CLListProcedure
.8926		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8928		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.892a		a9 ff		lda #$ff			lda 	#$FF
.892c		85 5f		sta $5f				sta 	NSMantissa0+7
.892e		85 67		sta $67				sta 	NSMantissa1+7
.8930		b1 30		lda ($30),y			lda 	(codePtr),y
.8932		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8934		f0 1a		beq $8950			beq 	_CLSecond
.8936		20 11 8a	jsr $8a11			jsr 	CLIsDigit 					; if not digit, list all
.8939		b0 20		bcs $895b			bcs 	_CLStart
.893b		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.893d		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger
.8940		b1 30		lda ($30),y			lda 	(codePtr),y
.8942		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8944		f0 0a		beq $8950			beq 	_CLSecond 					; if so go get it
.8946		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8948		85 5f		sta $5f				sta 	NSMantissa0+7
.894a		a5 64		lda $64				lda 	NSMantissa1+4
.894c		85 67		sta $67				sta 	NSMantissa1+7
.894e		80 0b		bra $895b			bra 	_CLStart
.8950						_CLSecond:
.8950		c8		iny				iny 								; consume comma
.8951		20 11 8a	jsr $8a11			jsr 	CLIsDigit 					; digit found
.8954		b0 05		bcs $895b			bcs 	_CLStart 					; if not, continue listing
.8956		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8958		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger
.895b						_CLStart
.895b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.895d		85 30		sta $30				sta 	codePtr
.895f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8961		85 31		sta $31				sta 	codePtr+1
.8963						_CLLoop:
.8963		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8966		f0 27		beq $898f			beq 	_CLBreak
.8968		b2 30		lda ($30)			lda 	(codePtr)
.896a		f0 20		beq $898c			beq 	_CLExit
.896c		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.896e		20 00 8a	jsr $8a00			jsr 	CLCompareLineNo
.8971		90 0c		bcc $897f			bcc 	_CLNext
.8973		a2 07		ldx #$07			ldx 	#7
.8975		20 00 8a	jsr $8a00			jsr 	CLCompareLineNo
.8978		f0 02		beq $897c			beq 	_CLDoThisOne
.897a		b0 03		bcs $897f			bcs 	_CLNext
.897c						_CLDoThisOne:
.897c		20 ed 89	jsr $89ed			jsr 	CLListOneLine 				; routine to list the current line.
.897f						_CLNext:
.897f		18		clc				clc
.8980		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8982		65 30		adc $30				adc 	codePtr
.8984		85 30		sta $30				sta 	codePtr
.8986		90 02		bcc $898a			bcc 	_CREExit
.8988		e6 31		inc $31				inc 	codePtr+1 					; carry
.898a						_CREExit:
.898a		80 d7		bra $8963			bra 	_CLLoop
.898c						_CLExit:
.898c		4c 1e 84	jmp $841e			jmp 	WarmStart
.898f						_CLBreak:
.898f		a9 01		lda #$01		lda	#1
.8991		4c 2f 91	jmp $912f		jmp	ErrorHandler
.8994						_CLListProcedure:
.8994		b1 30		lda ($30),y			lda 	(codePtr),y
.8996		85 38		sta $38				sta 	zTemp1
.8998		c8		iny				iny
.8999		b1 30		lda ($30),y			lda 	(codePtr),y
.899b		85 39		sta $39				sta 	zTemp1+1
.899d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.899f		85 30		sta $30				sta 	codePtr
.89a1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89a3		85 31		sta $31				sta 	codePtr+1
.89a5						_CLLPSearch:
.89a5		b2 30		lda ($30)			lda 	(codePtr)
.89a7		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.89a9		f0 e1		beq $898c			beq 	_CLExit
.89ab		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.89ad		b1 30		lda ($30),y			lda 	(codePtr),y
.89af		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.89b1		d0 0e		bne $89c1			bne 	_CLLPNext
.89b3		c8		iny				iny 								; check if PROC this.
.89b4		b1 30		lda ($30),y			lda 	(codePtr),y
.89b6		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.89b8		d0 07		bne $89c1			bne 	_CLLPNext
.89ba		c8		iny				iny
.89bb		b1 30		lda ($30),y			lda 	(codePtr),y
.89bd		c5 39		cmp $39				cmp 	zTemp1+1
.89bf		f0 0d		beq $89ce			beq 	_CLLPFound
.89c1						_CLLPNext:
.89c1		18		clc				clc
.89c2		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.89c4		65 30		adc $30				adc 	codePtr
.89c6		85 30		sta $30				sta 	codePtr
.89c8		90 02		bcc $89cc			bcc 	_CREExit
.89ca		e6 31		inc $31				inc 	codePtr+1 					; carry
.89cc						_CREExit:
.89cc		80 d7		bra $89a5			bra 	_CLLPSearch
.89ce						_CLLPFound:
.89ce		b2 30		lda ($30)			lda 	(codePtr)
.89d0		f0 ba		beq $898c			beq 	_CLExit
.89d2		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.89d4		b1 30		lda ($30),y			lda 	(codePtr),y
.89d6		48		pha				pha
.89d7		20 ed 89	jsr $89ed			jsr 	CLListOneLine 				; list line and go forward
.89da		18		clc				clc
.89db		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.89dd		65 30		adc $30				adc 	codePtr
.89df		85 30		sta $30				sta 	codePtr
.89e1		90 02		bcc $89e5			bcc 	_CREExit
.89e3		e6 31		inc $31				inc 	codePtr+1 					; carry
.89e5						_CREExit:
.89e5		68		pla				pla 								; reached ENDPROC ?
.89e6		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.89e8		d0 e4		bne $89ce			bne 	_CLLPFound
.89ea		4c 1e 84	jmp $841e			jmp 	WarmStart
.89ed						CLListOneLine:
.89ed		20 d4 90	jsr $90d4			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.89f0		20 99 80	jsr $8099			jsr 	TKListConvertLine 			; convert line into token Buffer
.89f3		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.89f5		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.89f7		20 88 91	jsr $9188			jsr 	PrintStringXA
.89fa		a9 0d		lda #$0d			lda 	#13 						; new line
.89fc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.89ff		60		rts				rts
.8a00						CLCompareLineNo:
.8a00		38		sec				sec
.8a01		a0 01		ldy #$01			ldy 	#1
.8a03		b1 30		lda ($30),y			lda 	(codePtr),y
.8a05		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8a07		85 36		sta $36				sta 	zTemp0
.8a09		c8		iny				iny
.8a0a		b1 30		lda ($30),y			lda 	(codePtr),y
.8a0c		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8a0e		05 36		ora $36				ora 	zTemp0
.8a10		60		rts				rts
.8a11						CLIsDigit:
.8a11		b1 30		lda ($30),y			lda 	(codePtr),y
.8a13		c9 30		cmp #$30			cmp 	#"0"
.8a15		90 03		bcc $8a1a			bcc	 	_CLIDExitFalse
.8a17		c9 3a		cmp #$3a			cmp 	#"9"+1
.8a19		60		rts				rts
.8a1a						_CLIDExitFalse:
.8a1a		38		sec				sec
.8a1b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8a1c						Command_Load:
.8a1c		20 d2 9f	jsr $9fd2			jsr 	EvaluateString 				; file name to load
.8a1f		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a21		a5 36		lda $36				lda 	zTemp0
.8a23		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8a26		b0 44		bcs $8a6c			bcs 	CLErrorHandler 				; error, so fail.
.8a28		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.8a2b		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8a2e		20 83 8b	jsr $8b83			jsr 	NewProgram 					; does the actual NEW.
.8a31		9c 5d 06	stz $065d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a34						_CLLoop:
.8a34		20 7a 8a	jsr $8a7a			jsr 	LoadReadLine 				; get next line.
.8a37		f0 10		beq $8a49			beq 	_CLExit 					; end, exit.
.8a39		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.8a3c		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8a3f		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8a42		f0 f0		beq $8a34			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a44		20 f9 83	jsr $83f9			jsr 	EditProgramCode 			; do the editing etc.
.8a47		80 eb		bra $8a34			bra 	_CLLoop
.8a49						_CLExit:
.8a49		ad 5e 06	lda $065e			lda 	CurrentFileStream
.8a4c		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8a4f						CLComplete:
.8a4f		a9 59		lda #$59			lda 	#_CLCMsg & $FF
.8a51		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8a53		20 88 91	jsr $9188			jsr 	PrintStringXA
.8a56		4c 1e 84	jmp $841e			jmp 	WarmStart
.8a59						_CLCMsg:
>8a59		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8a61		2e 0d 00
.8a64						CLCloseError:
.8a64		48		pha				pha
.8a65		ad 5e 06	lda $065e			lda 	CurrentFileStream
.8a68		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8a6b		68		pla				pla
.8a6c						CLErrorHandler:
.8a6c		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8a6e		f0 05		beq $8a75			beq 	_CLEHNotFound
.8a70		a9 1a		lda #$1a		lda	#26
.8a72		4c 2f 91	jmp $912f		jmp	ErrorHandler
.8a75						_CLEHNotFound:
.8a75		a9 19		lda #$19		lda	#25
.8a77		4c 2f 91	jmp $912f		jmp	ErrorHandler
.8a7a						LoadReadLine:
.8a7a		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8a7c		20 96 8a	jsr $8a96			jsr 	LoadReadCharacter
.8a7f		f0 14		beq $8a95			beq 	_LRLExit 					; eof ?
.8a81		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8a83		90 f5		bcc $8a7a			bcc 	LoadReadLine
.8a85						_LRLLoop:
.8a85		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8a88		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8a8b		e8		inx				inx
.8a8c		20 96 8a	jsr $8a96			jsr 	LoadReadCharacter 			; next line
.8a8f		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8a91		b0 f2		bcs $8a85			bcs 	_LRLLoop
.8a93		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8a95						_LRLExit:
.8a95		60		rts				rts
.8a96						LoadReadCharacter:
.8a96		da		phx				phx
.8a97		5a		phy				phy
.8a98		ad 5d 06	lda $065d			lda 	LoadEOFFlag 				; already done EOF.
.8a9b		d0 0c		bne $8aa9			bne 	_LRCIsEOF
.8a9d		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8aa0		90 09		bcc $8aab			bcc		_LRCExit 					; read okay.
.8aa2		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8aa4		d0 be		bne $8a64			bne 	CLCloseError
.8aa6		ce 5d 06	dec $065d			dec 	LoadEOFFlag
.8aa9						_LRCIsEOF:
.8aa9		a9 00		lda #$00			lda 	#0
.8aab						_LRCExit:
.8aab		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8aad		d0 02		bne $8ab1			bne 	_LRCNotTab
.8aaf		a9 20		lda #$20			lda 	#' '
.8ab1						_LRCNotTab:
.8ab1		c9 0a		cmp #$0a			cmp 	#$0A
.8ab3		d0 02		bne $8ab7			bne 	_LRCNotLF
.8ab5		a9 0d		lda #$0d			lda 	#$0D
.8ab7						_LRCNotLF:
.8ab7		7a		ply				ply
.8ab8		fa		plx				plx
.8ab9		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8abb		60		rts				rts
.065d						LoadEOFFlag:
>065d								.fill 	1
.065e						CurrentFileStream:
>065e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8abc						Command_LOCAL:
.8abc		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8abe		20 ca 8a	jsr $8aca			jsr 	LocaliseNextTerm 			; convert term to a local.
.8ac1		b1 30		lda ($30),y			lda 	(codePtr),y
.8ac3		c8		iny				iny
.8ac4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ac6		f0 f4		beq $8abc			beq 	Command_LOCAL 				; if so, localise another variable.
.8ac8		88		dey				dey 								; unpick pre-get
.8ac9		60		rts				rts
.8aca						LocaliseNextTerm:
.8aca		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm 				; evaluate the term
.8acd		b5 50		lda $50,x			lda 	NSStatus,x
.8acf		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8ad1		f0 5c		beq $8b2f			beq		_LNTError
.8ad3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8ad5		85 36		sta $36				sta 	zTemp0
.8ad7		b5 60		lda $60,x			lda 	NSMantissa1,x
.8ad9		85 37		sta $37				sta  	zTemp0+1
.8adb		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8add		29 10		and #$10			and 	#NSBIsString
.8adf		d0 1e		bne $8aff			bne 	_LNTPushString
.8ae1		5a		phy				phy
.8ae2		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8ae4						_LNTPushNumLoop:
.8ae4		b1 36		lda ($36),y			lda		(zTemp0),y
.8ae6		20 38 b1	jsr $b138			jsr 	StackPushByte
.8ae9		c8		iny				iny
.8aea		c0 05		cpy #$05			cpy 	#5
.8aec		d0 f6		bne $8ae4			bne 	_LNTPushNumLoop
.8aee		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8af0		20 38 b1	jsr $b138			jsr 	StackPushByte
.8af3		a5 37		lda $37				lda 	zTemp0+1
.8af5		20 38 b1	jsr $b138			jsr 	StackPushByte
.8af8		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8afa		20 38 b1	jsr $b138			jsr 	StackPushByte
.8afd		7a		ply				ply
.8afe		60		rts				rts
.8aff						_LNTPushString:
.8aff		5a		phy				phy
.8b00		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8b02		85 38		sta $38				sta 	zTemp1
.8b04		a0 01		ldy #$01			ldy 	#1
.8b06		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b08		85 39		sta $39				sta 	zTemp1+1
.8b0a		a0 00		ldy #$00			ldy 	#0 							; output string
.8b0c		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8b0e		f0 0a		beq $8b1a			beq 	_LNTStringOut
.8b10						_LNTPushStrLoop:
.8b10		b1 38		lda ($38),y			lda 	(zTemp1),y
.8b12		f0 06		beq $8b1a			beq 	_LNTStringOut
.8b14		20 38 b1	jsr $b138			jsr 	StackPushByte
.8b17		c8		iny				iny
.8b18		80 f6		bra $8b10			bra 	_LNTPushStrLoop
.8b1a						_LNTStringOut:
.8b1a		98		tya				tya									; output length (chars written).
.8b1b		20 38 b1	jsr $b138			jsr 	StackPushByte
.8b1e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8b20		20 38 b1	jsr $b138			jsr 	StackPushByte
.8b23		b5 60		lda $60,x			lda 	NSMantissa1,x
.8b25		20 38 b1	jsr $b138			jsr 	StackPushByte
.8b28		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8b2a		20 38 b1	jsr $b138			jsr 	StackPushByte
.8b2d		7a		ply				ply
.8b2e		60		rts				rts
.8b2f						_LNTError:
.8b2f		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
.8b32						LocalPopValue:
.8b32		20 50 b1	jsr $b150			jsr 	StackPopByte
.8b35		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8b37		d0 17		bne $8b50			bne 	_LPVString
.8b39		20 50 b1	jsr $b150			jsr 	StackPopByte 				; address
.8b3c		85 37		sta $37				sta 	zTemp0+1
.8b3e		20 50 b1	jsr $b150			jsr 	StackPopByte
.8b41		85 36		sta $36				sta 	zTemp0
.8b43		5a		phy				phy
.8b44		a0 04		ldy #$04			ldy 	#4 							; copy back
.8b46						_LPVNumberCopy:
.8b46		20 50 b1	jsr $b150			jsr 	StackPopByte
.8b49		91 36		sta ($36),y			sta 	(zTemp0),y
.8b4b		88		dey				dey
.8b4c		10 f8		bpl $8b46			bpl 	_LPVNumberCopy
.8b4e		7a		ply				ply 								; and complete
.8b4f		60		rts				rts
.8b50						_LPVString:
.8b50		20 50 b1	jsr $b150			jsr 	StackPopByte 				; address of record copied to zTemp0
.8b53		85 37		sta $37				sta 	zTemp0+1
.8b55		20 50 b1	jsr $b150			jsr 	StackPopByte
.8b58		85 36		sta $36				sta 	zTemp0
.8b5a		5a		phy				phy
.8b5b		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8b5d		85 38		sta $38				sta 	zTemp1
.8b5f		a0 01		ldy #$01			ldy 	#1
.8b61		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b63		85 39		sta $39				sta 	zTemp1+1
.8b65		20 50 b1	jsr $b150			jsr 	StackPopByte 				; # chars to get => y
.8b68		a8		tay				tay
.8b69		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8b6b		f0 0e		beq $8b7b			beq 	_LPVStringCopied
.8b6d		a9 00		lda #$00			lda 	#0 							; NULL on end
.8b6f		91 38		sta ($38),y			sta 	(zTemp1),y
.8b71						_LPVStringCopy:
.8b71		88		dey				dey
.8b72		30 07		bmi $8b7b			bmi 	_LPVStringCopied
.8b74		20 50 b1	jsr $b150			jsr 	StackPopByte
.8b77		91 38		sta ($38),y			sta 	(zTemp1),y
.8b79		80 f6		bra $8b71			bra 	_LPVStringCopy
.8b7b						_LPVStringCopied:
.8b7b		fa		plx				plx
.8b7c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8b7d						NewCommand:
.8b7d		20 83 8b	jsr $8b83			jsr 	NewProgram 					; does the actual NEW.
.8b80		4c 1e 84	jmp $841e			jmp 	WarmStart 					; and warm starts straight away.
.8b83						NewProgram:
.8b83		20 e7 a7	jsr $a7e7			jsr 	MemoryNew
.8b86		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8b89		20 b4 84	jsr $84b4			jsr 	ClearCommand 				; clear everything.
.8b8c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8b8d						PokeBCommand:
.8b8d		a9 01		lda #$01			lda 	#1
.8b8f		80 0c		bra $8b9d			bra 	PokeCommand
.8b91						PokeWCommand:
.8b91		a9 02		lda #$02			lda 	#2
.8b93		80 08		bra $8b9d			bra 	PokeCommand
.8b95						PokeLCommand:
.8b95		a9 03		lda #$03			lda 	#3
.8b97		80 04		bra $8b9d			bra 	PokeCommand
.8b99						PokeDCommand:
.8b99		a9 04		lda #$04			lda 	#4
.8b9b		80 00		bra $8b9d			bra 	PokeCommand
.8b9d						PokeCommand:
.8b9d		48		pha				pha 								; save count on stack
.8b9e		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8ba0		20 fa 9f	jsr $9ffa			jsr		Evaluate16BitInteger 		; address
.8ba3		20 1e 91	jsr $911e			jsr 	CheckComma
.8ba6		e8		inx				inx
.8ba7		20 e7 9f	jsr $9fe7			jsr		EvaluateInteger 			; data
.8baa		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8bac		85 36		sta $36				sta 	zTemp0
.8bae		a5 60		lda $60				lda 	NSMantissa1
.8bb0		85 37		sta $37				sta 	zTemp0+1
.8bb2		68		pla				pla 								; count -> zTemp1
.8bb3		85 38		sta $38				sta 	zTemp1
.8bb5		5a		phy				phy 								; save Y position.
.8bb6		a0 00		ldy #$00			ldy 	#0 							; index to write
.8bb8		a2 00		ldx #$00			ldx 	#0 							; index to read
.8bba						_PCLoop:
.8bba		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8bbc		91 36		sta ($36),y			sta 	(zTemp0),y
.8bbe		c8		iny				iny 								; next byte to write
.8bbf		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8bc0		18		clc				clc
.8bc1		69 08		adc #$08			adc 	#MathStackSize
.8bc3		aa		tax				tax
.8bc4		c6 38		dec $38				dec 	zTemp1 						; done them all
.8bc6		d0 f2		bne $8bba			bne 	_PCLoop
.8bc8		7a		ply				ply 								; restore position.
.8bc9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8bca						CallProcedure:
.8bca		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8bcc		b1 30		lda ($30),y			lda 	(codePtr),y
.8bce		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8bd0		f0 0c		beq $8bde			beq 	_CPEndParam
.8bd2						_CPParamLoop:
.8bd2		20 bf 9f	jsr $9fbf			jsr 	EvaluateValue 				; get parameter onto stack
.8bd5		e8		inx				inx 								; bump next stack
.8bd6		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd8		c8		iny				iny
.8bd9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8bdb		f0 f5		beq $8bd2			beq 	_CPParamLoop
.8bdd		88		dey				dey 								; unpick.
.8bde						_CPEndParam:
.8bde		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8be1		c8		iny				iny									; skip right bracket
.8be2		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8be4		20 59 b1	jsr $b159			jsr 	StackOpen
.8be7		20 9e b1	jsr $b19e			jsr 	STKSaveCodePosition 		; save loop position
.8bea		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8bec		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8bee		a5 60		lda $60				lda 	NSMantissa1
.8bf0		85 37		sta $37				sta 	zTemp0+1
.8bf2		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8bf4		b2 36		lda ($36)			lda 	(zTemp0)
.8bf6		85 30		sta $30				sta 	safePtr
.8bf8		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bfa		85 31		sta $31				sta 	safePtr+1
.8bfc		c8		iny				iny
.8bfd		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bff		85 32		sta $32				sta 	safePtr+2
.8c01		c8		iny				iny
.8c02		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c04		85 33		sta $33				sta 	safePtr+3
.8c06		c8		iny				iny 								; get Y offset -> Y
.8c07		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c09		a8		tay				tay
.8c0a		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8c0c		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8c0f		f0 13		beq $8c24			beq 	_ParamExit 					; if so, exit.
.8c11						_ParamExtract:
.8c11		ca		dex				dex 								; put a local term on the level before
.8c12		20 ca 8a	jsr $8aca			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8c15		20 ff 88	jsr $88ff			jsr 	AssignVariable 				; assign stacked value to the variable.
.8c18		e8		inx				inx 								; advance to next parameter to do.
.8c19		e8		inx				inx
.8c1a		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8c1d		f0 05		beq $8c24			beq 	_ParamExit
.8c1f		20 1e 91	jsr $911e			jsr 	CheckComma 					; comma seperating parameters
.8c22		80 ed		bra $8c11			bra 	_ParamExtract
.8c24						_ParamExit:
.8c24		20 16 91	jsr $9116			jsr 	CheckRightBracket 			; check )
.8c27		60		rts				rts 								; and continue from here
.8c28						Command_ENDPROC:
.8c28		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8c2a		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8c2c		20 86 b1	jsr $b186			jsr 	StackCheckFrame
.8c2f		20 af b1	jsr $b1af			jsr 	STKLoadCodePosition 		; restore code position
.8c32		20 78 b1	jsr $b178			jsr 	StackClose
.8c35		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8c36						Command_Read:
.8c36		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8c38		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm
.8c3b		b5 50		lda $50,x			lda 	NSStatus,x
.8c3d		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8c3f		f0 4f		beq $8c90			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8c41		20 d9 8c	jsr $8cd9			jsr 	SwapDataCodePtrs 			; swap code and data
.8c44		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8c47		d0 25		bne $8c6e			bne 	_CRContinueData  			; forward for the next one.
.8c49		b2 30		lda ($30)			lda 	(codePtr)
.8c4b		f0 1c		beq $8c69			beq 	_CRNoData
.8c4d						_CRKeepSearching:
.8c4d		a9 b9		lda #$b9			lda 	#KWD_DATA 					; scan for instruction
.8c4f		a2 80		ldx #$80			ldx 	#KWC_EOL
.8c51		20 71 90	jsr $9071			jsr 	ScanForward
.8c54		c9 b9		cmp #$b9			cmp 	#KWD_DATA 					; found data ?
.8c56		f0 16		beq $8c6e			beq 	_CRHaveData 				; found it
.8c58		18		clc				clc
.8c59		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c5b		65 30		adc $30				adc 	codePtr
.8c5d		85 30		sta $30				sta 	codePtr
.8c5f		90 02		bcc $8c63			bcc 	_CREExit
.8c61		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c63						_CREExit:
.8c63		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8c65		b2 30		lda ($30)			lda 	(codePtr)
.8c67		d0 e4		bne $8c4d			bne 	_CRKeepSearching
.8c69						_CRNoData:
.8c69		a9 0b		lda #$0b		lda	#11
.8c6b		4c 2f 91	jmp $912f		jmp	ErrorHandler
.8c6e						_CRHaveData:
.8c6e						_CRContinueData:
.8c6e		a2 01		ldx #$01			ldx 	#1
.8c70		20 bf 9f	jsr $9fbf			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8c73		ca		dex				dex
.8c74		20 ff 88	jsr $88ff			jsr		AssignVariable 				; do the assignment
.8c77		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8c7a		b1 30		lda ($30),y			lda 	(codePtr),y
.8c7c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8c7e		d0 04		bne $8c84			bne 	_CRSwapBack
.8c80		c8		iny				iny 								; consume comma
.8c81		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8c84						_CRSwapBack:
.8c84		20 d9 8c	jsr $8cd9			jsr 	SwapDataCodePtrs			; swap them back.
.8c87		b1 30		lda ($30),y			lda 	(codePtr),y
.8c89		c8		iny				iny
.8c8a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c8c		f0 a8		beq $8c36			beq 	Command_Read 				; if so go round again.
.8c8e		88		dey				dey 								; unpick get.
.8c8f		60		rts				rts
.8c90						_CRSyntax:
.8c90		4c f8 a1	jmp $a1f8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8c93						RemCommand:
.8c93		b1 30		lda ($30),y			lda 	(codePtr),y
.8c95		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8c97		d0 06		bne $8c9f			bne 	_RMExit
.8c99		c8		iny				iny 								; point to offset
.8c9a		98		tya				tya 								; A = offset position
.8c9b		38		sec				sec 								; add size +1 hence SEC
.8c9c		71 30		adc ($30),y			adc 	(codePtr),y
.8c9e		a8		tay				tay 								; make current position.
.8c9f						_RMExit:
.8c9f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8ca0						Command_REPEAT:
.8ca0		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ca2		20 59 b1	jsr $b159			jsr 	StackOpen
.8ca5		20 9e b1	jsr $b19e			jsr 	STKSaveCodePosition 		; save loop position
.8ca8		60		rts				rts
.8ca9						Command_UNTIL:
.8ca9		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8cab		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8cad		20 86 b1	jsr $b186			jsr 	StackCheckFrame
.8cb0		a2 00		ldx #$00			ldx 	#0
.8cb2		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber 				; work out the number
.8cb5		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; check if zero
.8cb8		f0 04		beq $8cbe			beq 	_CULoopBack 				; if so keep looping
.8cba		20 78 b1	jsr $b178			jsr 	StackClose		 			; return
.8cbd		60		rts				rts
.8cbe						_CULoopBack:
.8cbe		20 af b1	jsr $b1af			jsr 	STKLoadCodePosition 		; loop back
.8cc1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8cc2						Command_Restore:
.8cc2		20 d9 8c	jsr $8cd9			jsr 	SwapDataCodePtrs 			; swap code and data
.8cc5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cc7		85 30		sta $30				sta 	codePtr
.8cc9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ccb		85 31		sta $31				sta 	codePtr+1
.8ccd		20 d9 8c	jsr $8cd9			jsr 	SwapDataCodePtrs 			; put them back
.8cd0		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8cd2		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8cd5		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8cd8		60		rts				rts
.8cd9						SwapDataCodePtrs:
.8cd9		da		phx				phx
.8cda		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8cdc						_SDCPLoop:
.8cdc		b5 30		lda $30,x			lda 	safePtr,x
.8cde		48		pha				pha
.8cdf		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8ce2		95 30		sta $30,x			sta 	safePtr,x
.8ce4		68		pla				pla
.8ce5		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8ce8		ca		dex				dex
.8ce9		10 f1		bpl $8cdc			bpl 	_SDCPLoop
.8ceb		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8cee		8c 1b 04	sty $041b			sty 	dataPointer+4
.8cf1		a8		tay				tay
.8cf2		fa		plx				plx
.8cf3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8cf4						EOLCommand:
.8cf4		18		clc				clc
.8cf5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cf7		65 30		adc $30				adc 	codePtr
.8cf9		85 30		sta $30				sta 	codePtr
.8cfb		90 02		bcc $8cff			bcc 	_CREExit
.8cfd		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cff						_CREExit:
.8cff		80 0b		bra $8d0c			bra 	RunNewLine
.8d01						CommandRUN:
.8d01		20 b4 84	jsr $84b4			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8d04		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d06		85 30		sta $30				sta 	codePtr
.8d08		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d0a		85 31		sta $31				sta 	codePtr+1
.8d0c						RunNewLine:
.8d0c		b2 30		lda ($30)			lda 	(codePtr)
.8d0e		f0 78		beq $8d88			beq 	CRNoProgram         		; no then END.
.8d10		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8d12		9a		txs				txs
.8d13						RUNCodePointerLine:
.8d13		a0 02		ldy #$02			ldy 	#2 							; start of program
.8d15						_CRIncMainLoop:
.8d15		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8d18		d0 1f		bne $8d39			bne 	_CRNoBreakCheck
.8d1a		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8d1d		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8d20		f0 61		beq $8d83			beq 	_CRBreak
.8d22		a5 01		lda $01				lda 	1 							; save I/O 0
.8d24		48		pha				pha
.8d25		64 01		stz $01				stz 	1 							; access I/O Page 0
.8d27		38		sec				sec 								; calculate timer - LastTick
.8d28		ad 59 d6	lda $d659			lda 	$D659
.8d2b		cd 5f 06	cmp $065f			cmp 	LastTick
.8d2e		f0 06		beq $8d36			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8d30		8d 5f 06	sta $065f			sta 	LastTick 					; update last timer
.8d33		20 a5 a0	jsr $a0a5			jsr 	TickHandler 							; go do the code.
.8d36						_NoFireTick:
.8d36		68		pla				pla 								; restore I/O 0
.8d37		85 01		sta $01				sta 	1
.8d39						_CRNoBreakCheck:
.8d39		c8		iny				iny									; next token
.8d3a						_CRMainLoop:
.8d3a		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8d3d		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3f		10 10		bpl $8d51			bpl 	_CRNotKeyword				; not a token.
.8d41		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8d43		b0 04		bcs $8d49			bcs 	_CRIsKeyword
.8d45		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8d47		b0 34		bcs $8d7d			bcs		_CRSyntaxError
.8d49						_CRIsKeyword:
.8d49		c8		iny				iny 								; consume command
.8d4a		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8d4b		aa		tax				tax 								; put in X for vector jump
.8d4c		20 80 8d	jsr $8d80			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8d4f		80 e9		bra $8d3a			bra 	_CRMainLoop 				; and loop round
.8d51						_CRNotKeyword:
.8d51		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8d53		f0 c0		beq $8d15			beq 	_CRIncMainLoop
.8d55		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8d57		90 05		bcc $8d5e			bcc 	_CRNotVariable
.8d59						_CRGoLet:
.8d59		20 c6 88	jsr $88c6			jsr 	LetCommand
.8d5c		80 dc		bra $8d3a			bra 	_CRMainLoop
.8d5e						_CRNotVariable:
.8d5e		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8d60		f0 f7		beq $8d59			beq 	_CRGoLet
.8d62		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8d64		f0 f3		beq $8d59			beq 	_CRGoLet
.8d66		c9 21		cmp #$21			cmp 	#KWD_PLING
.8d68		f0 ef		beq $8d59			beq 	_CRGoLet
.8d6a		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8d6c		f0 09		beq $8d77			beq 	_CRGoRem
.8d6e		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8d70		d0 0b		bne $8d7d			bne 	_CRSyntaxError
.8d72		20 90 82	jsr $8290			jsr 	LabelHere
.8d75		80 c3		bra $8d3a			bra 	_CRMainLoop
.8d77						_CRGoRem:
.8d77		c8		iny				iny
.8d78		20 93 8c	jsr $8c93			jsr 	RemCommand
.8d7b		80 bd		bra $8d3a			bra 	_CRMainLoop
.8d7d						_CRSyntaxError:
.8d7d		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
.8d80						_CRCallVector0:
.8d80		7c 1e 8e	jmp ($8e1e,x)			jmp 	(VectorSet0,x)
.8d83						_CRBreak:
.8d83		a9 01		lda #$01		lda	#1
.8d85		4c 2f 91	jmp $912f		jmp	ErrorHandler
.8d88						CRNoProgram:
.8d88		4c 5c 86	jmp $865c			jmp 	EndCommand
.8d8b						Shift1Command:
.8d8b		b1 30		lda ($30),y			lda 	(codePtr),y
.8d8d		c8		iny				iny
.8d8e		0a		asl a				asl 	a
.8d8f		aa		tax				tax
.8d90		7c d2 8e	jmp ($8ed2,x)			jmp 	(VectorSet1,x)
.8d93						Shift2Command:
.8d93		b1 30		lda ($30),y			lda 	(codePtr),y
.8d95		c8		iny				iny
.8d96		0a		asl a				asl 	a
.8d97		aa		tax				tax
.8d98		7c 0e 8f	jmp ($8f0e,x)			jmp 	(VectorSet2,x)
.8d9b						Unused1:
.8d9b						Unused2:
.8d9b						Unused3:
.8d9b						Unused4:
.8d9b		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
>8d9e								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8d9e						VectorSetPunc:
>8d9e		e7 93					.word	ShiftLeft                        ; $00 <<
>8da0		d2 91					.word	BinaryCompareLessEqual           ; $01 <=
>8da2		c8 91					.word	BinaryCompareNotEqual            ; $02 <>
>8da4		f8 a1					.word	SyntaxError                      ; $03 !!3
>8da6		f8 a1					.word	SyntaxError                      ; $04 ><
>8da8		dc 91					.word	BinaryCompareGreaterEqual        ; $05 >=
>8daa		ea 93					.word	ShiftRight                       ; $06 >>
>8dac		f8 a1					.word	SyntaxError                      ; $07 !!7
>8dae		f8 a1					.word	SyntaxError                      ; $08 !!8
>8db0		f8 a1					.word	SyntaxError                      ; $09 !!9
>8db2		f8 a1					.word	SyntaxError                      ; $0a !!10
>8db4		f8 a1					.word	SyntaxError                      ; $0b !!11
>8db6		f8 a1					.word	SyntaxError                      ; $0c !!12
>8db8		f8 a1					.word	SyntaxError                      ; $0d !!13
>8dba		f8 a1					.word	SyntaxError                      ; $0e !!14
>8dbc		f8 a1					.word	SyntaxError                      ; $0f !!15
>8dbe		f8 a1					.word	SyntaxError                      ; $10 @
>8dc0		f8 a1					.word	SyntaxError                      ; $11 !!17
>8dc2		f8 a1					.word	SyntaxError                      ; $12 !!18
>8dc4		f8 a1					.word	SyntaxError                      ; $13 [
>8dc6		93 92					.word	IntegerDivide                    ; $14 \
>8dc8		f8 a1					.word	SyntaxError                      ; $15 ]
>8dca		25 95					.word	EorInteger                       ; $16 ^
>8dcc		f8 a1					.word	SyntaxError                      ; $17 _
>8dce		f8 a1					.word	SyntaxError                      ; $18 `
>8dd0		f8 a1					.word	SyntaxError                      ; $19 !!25
>8dd2		f8 a1					.word	SyntaxError                      ; $1a !!26
>8dd4		f8 a1					.word	SyntaxError                      ; $1b {
>8dd6		f0 94					.word	OraInteger                       ; $1c |
>8dd8		f8 a1					.word	SyntaxError                      ; $1d }
>8dda		f8 a1					.word	SyntaxError                      ; $1e ~
>8ddc		f8 a1					.word	SyntaxError                      ; $1f [7m<7F>[m
>8dde		f8 a1					.word	SyntaxError                      ; $20
>8de0		5a 95					.word	WordIndirect                     ; $21 !
>8de2		f8 a1					.word	SyntaxError                      ; $22 "
>8de4		f8 a1					.word	SyntaxError                      ; $23 #
>8de6		f8 a1					.word	SyntaxError                      ; $24 $
>8de8		d4 92					.word	IntegerModulus                   ; $25 %
>8dea		bb 94					.word	AndInteger                       ; $26 &
>8dec		f8 a1					.word	SyntaxError                      ; $27 '
>8dee		f8 a1					.word	SyntaxError                      ; $28 (
>8df0		f8 a1					.word	SyntaxError                      ; $29 )
>8df2		42 93					.word	MulInteger                       ; $2a *
>8df4		5d 94					.word	AddInteger                       ; $2b +
>8df6		f8 a1					.word	SyntaxError                      ; $2c ,
>8df8		96 94					.word	SubInteger                       ; $2d -
>8dfa		f8 a1					.word	SyntaxError                      ; $2e .
>8dfc		14 97					.word	FDivideCommand                   ; $2f /
>8dfe		f8 a1					.word	SyntaxError                      ; $30 0
>8e00		f8 a1					.word	SyntaxError                      ; $31 1
>8e02		f8 a1					.word	SyntaxError                      ; $32 2
>8e04		f8 a1					.word	SyntaxError                      ; $33 3
>8e06		f8 a1					.word	SyntaxError                      ; $34 4
>8e08		f8 a1					.word	SyntaxError                      ; $35 5
>8e0a		f8 a1					.word	SyntaxError                      ; $36 6
>8e0c		f8 a1					.word	SyntaxError                      ; $37 7
>8e0e		f8 a1					.word	SyntaxError                      ; $38 8
>8e10		f8 a1					.word	SyntaxError                      ; $39 9
>8e12		f8 a1					.word	SyntaxError                      ; $3a :
>8e14		f8 a1					.word	SyntaxError                      ; $3b ;
>8e16		b4 91					.word	BinaryCompareLess                ; $3c <
>8e18		aa 91					.word	BinaryCompareEqual               ; $3d =
>8e1a		be 91					.word	BinaryCompareGreater             ; $3e >
>8e1c		7c 95					.word	ByteIndirect                     ; $3f ?
.8e1e						VectorSet0:
>8e1e		f4 8c					.word	EOLCommand                       ; $80 !0:EOF
>8e20		8b 8d					.word	Shift1Command                    ; $81 !1:SH1
>8e22		93 8d					.word	Shift2Command                    ; $82 !2:SH2
>8e24		fe 9b					.word	AbsUnary                         ; $83 ABS(
>8e26		0c 9c					.word	AllocUnary                       ; $84 ALLOC(
>8e28		7c 9c					.word	AscUnary                         ; $85 ASC(
>8e2a		60 9e					.word	ChrUnary                         ; $86 CHR$(
>8e2c		7b a6					.word	UnaryEvent                       ; $87 EVENT(
>8e2e		a6 91					.word	UnaryFalse                       ; $88 FALSE
>8e30		89 9c					.word	FracUnary                        ; $89 FRAC(
>8e32		f8 a1					.word	SyntaxError                      ; $8a GETDATE$(
>8e34		f8 a1					.word	SyntaxError                      ; $8b GETTIME$(
>8e36		05 a6					.word	UnaryHit                         ; $8c HIT(
>8e38		9e 9c					.word	IntUnary                         ; $8d INT(
>8e3a		1f 9e					.word	IsValUnary                       ; $8e ISVAL(
>8e3c		ff a6					.word	UnaryJoyB                        ; $8f JOYB(
>8e3e		d8 a6					.word	UnaryJoyX                        ; $90 JOYX(
>8e40		db a6					.word	UnaryJoyY                        ; $91 JOYY(
>8e42		33 9f					.word	Unary_Left                       ; $92 LEFT$(
>8e44		af 9c					.word	LenUnary                         ; $93 LEN(
>8e46		cd 9c					.word	Unary_Max                        ; $94 MAX(
>8e48		55 9f					.word	Unary_Mid                        ; $95 MID$(
>8e4a		c9 9c					.word	Unary_Min                        ; $96 MIN(
>8e4c		18 9d					.word	Unary_Not                        ; $97 NOT(
>8e4e		2b 9d					.word	PeekByteUnary                    ; $98 PEEK(
>8e50		37 9d					.word	PeekDUnary                       ; $99 PEEKD(
>8e52		33 9d					.word	PeekLUnary                       ; $9a PEEKL(
>8e54		2f 9d					.word	PeekWUnary                       ; $9b PEEKW(
>8e56		b6 b0					.word	UnaryPlaying                     ; $9c PLAYING(
>8e58		64 9d					.word	Unary_Random                     ; $9d RANDOM(
>8e5a		40 9f					.word	Unary_Right                      ; $9e RIGHT$(
>8e5c		81 9d					.word	Unary_Rnd                        ; $9f RND(
>8e5e		f7 9d					.word	SgnUnary                         ; $a0 SGN(
>8e60		72 9e					.word	SpcUnary                         ; $a1 SPC(
>8e62		8d 9e					.word	Unary_Str                        ; $a2 STR$(
>8e64		11 a7					.word	UnaryTimer                       ; $a3 TIMER(
>8e66		9b 91					.word	UnaryTrue                        ; $a4 TRUE
>8e68		15 9e					.word	ValUnary                         ; $a5 VAL(
>8e6a		5f 86					.word	ForCommand                       ; $a6 FOR
>8e6c		a2 87					.word	IfCommand                        ; $a7 IF
>8e6e		9b 8d					.word	Unused1                          ; $a8 PROC
>8e70		a0 8c					.word	Command_REPEAT                   ; $a9 REPEAT
>8e72		e7 90					.word	Command_WHILE                    ; $aa WHILE
>8e74		cb 87					.word	EndIf                            ; $ab ENDIF
>8e76		28 8c					.word	Command_ENDPROC                  ; $ac ENDPROC
>8e78		11 87					.word	NextCommand                      ; $ad NEXT
>8e7a		9b 8d					.word	Unused4                          ; $ae THEN
>8e7c		a9 8c					.word	Command_UNTIL                    ; $af UNTIL
>8e7e		08 91					.word	Command_WEND                     ; $b0 WEND
>8e80		f8 a1					.word	SyntaxError                      ; $b1 BY
>8e82		7f 84					.word	CallCommand                      ; $b2 CALL
>8e84		b9 a3					.word	CircleCommand                    ; $b3 CIRCLE
>8e86		b4 84					.word	ClearCommand                     ; $b4 CLEAR
>8e88		0c 85					.word	ClearScreen                      ; $b5 CLS
>8e8a		f8 a1					.word	SyntaxError                      ; $b6 COLOR
>8e8c		f8 a1					.word	SyntaxError                      ; $b7 COLOUR
>8e8e		d1 87					.word	Command_CPrint                   ; $b8 CPRINT
>8e90		14 85					.word	Command_Data                     ; $b9 DATA
>8e92		1c 85					.word	DimCommand                       ; $ba DIM
>8e94		9b 8d					.word	Unused3                          ; $bb DOWNTO
>8e96		c4 87					.word	ElseCode                         ; $bc ELSE
>8e98		f8 a1					.word	SyntaxError                      ; $bd FROM
>8e9a		d8 a5					.word	GfxCommand                       ; $be GFX
>8e9c		6a 87					.word	Command_GOSUB                    ; $bf GOSUB
>8e9e		88 87					.word	GotoCommand                      ; $c0 GOTO
>8ea0		f8 a1					.word	SyntaxError                      ; $c1 HERE
>8ea2		e2 a3					.word	ImageCommand                     ; $c2 IMAGE
>8ea4		cc 87					.word	Command_Input                    ; $c3 INPUT
>8ea6		c6 88					.word	LetCommand                       ; $c4 LET
>8ea8		34 a4					.word	LineCommand                      ; $c5 LINE
>8eaa		bc 8a					.word	Command_LOCAL                    ; $c6 LOCAL
>8eac		f8 a1					.word	SyntaxError                      ; $c7 OFF
>8eae		f8 a1					.word	SyntaxError                      ; $c8 ON
>8eb0		f8 a1					.word	SyntaxError                      ; $c9 OUTLINE
>8eb2		29 a6					.word	PaletteCommand                   ; $ca PALETTE
>8eb4		2d a4					.word	PlotCommand                      ; $cb PLOT
>8eb6		8d 8b					.word	PokeBCommand                     ; $cc POKE
>8eb8		99 8b					.word	PokeDCommand                     ; $cd POKED
>8eba		95 8b					.word	PokeLCommand                     ; $ce POKEL
>8ebc		91 8b					.word	PokeWCommand                     ; $cf POKEW
>8ebe		d8 87					.word	Command_Print                    ; $d0 PRINT
>8ec0		36 8c					.word	Command_Read                     ; $d1 READ
>8ec2		b5 a3					.word	RectangleCommand                 ; $d2 RECT
>8ec4		93 8c					.word	RemCommand                       ; $d3 REM
>8ec6		7a 87					.word	Command_RETURN                   ; $d4 RETURN
>8ec8		f8 a1					.word	SyntaxError                      ; $d5 SOLID
>8eca		d2 b0					.word	SoundCommand                     ; $d6 SOUND
>8ecc		c4 a3					.word	SpriteCommand                    ; $d7 SPRITE
>8ece		fe a3					.word	TextCommand                      ; $d8 TEXT
>8ed0		9b 8d					.word	Unused2                          ; $d9 TO
.8ed2						VectorSet1:
>8ed2		f8 a1					.word	SyntaxError                      ; $80 !0:EOF
>8ed4		f8 a1					.word	SyntaxError                      ; $81 !1:SH1
>8ed6		f8 a1					.word	SyntaxError                      ; $82 !2:SH2
>8ed8		53 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8eda		6f 84					.word	AssertCommand                    ; $84 ASSERT
>8edc		78 a5					.word	BitmapCtrl                       ; $85 BITMAP
>8ede		f8 a1					.word	SyntaxError                      ; $86 BLOAD
>8ee0		f8 a1					.word	SyntaxError                      ; $87 BSAVE
>8ee2		d9 85					.word	Command_Dir                      ; $88 DIR
>8ee4		55 86					.word	Command_Drive                    ; $89 DRIVE
>8ee6		5c 86					.word	EndCommand                       ; $8a END
>8ee8		8a b0					.word	Explode                          ; $8b EXPLODE
>8eea		f8 a1					.word	SyntaxError                      ; $8c GO
>8eec		f8 a1					.word	SyntaxError                      ; $8d HIMEM
>8eee		16 89					.word	Command_List                     ; $8e LIST
>8ef0		1c 8a					.word	Command_Load                     ; $8f LOAD
>8ef2		7d 8b					.word	NewCommand                       ; $90 NEW
>8ef4		66 b0					.word	PingCommand                      ; $91 PING
>8ef6		c2 8c					.word	Command_Restore                  ; $92 RESTORE
>8ef8		01 8d					.word	CommandRUN                       ; $93 RUN
>8efa		96 8f					.word	Command_Save                     ; $94 SAVE
>8efc		f8 a1					.word	SyntaxError                      ; $95 SETDATE
>8efe		f8 a1					.word	SyntaxError                      ; $96 SETTIME
>8f00		7e b0					.word	ShootCommand                     ; $97 SHOOT
>8f02		bd a5					.word	SpritesCtrl                      ; $98 SPRITES
>8f04		1a 90					.word	StopCommand                      ; $99 STOP
>8f06		91 b2					.word	Command_VERIFY                   ; $9a VERIFY
>8f08		72 a6					.word	XGoCommand                       ; $9b XGO
>8f0a		69 a6					.word	XLoadCommand                     ; $9c XLOAD
>8f0c		72 b0					.word	ZapCommand                       ; $9d ZAP
.8f0e						VectorSet2:
>8f0e		f8 a1					.word	SyntaxError                      ; $80 !0:EOF
>8f10		f8 a1					.word	SyntaxError                      ; $81 !1:SH1
>8f12		f8 a1					.word	SyntaxError                      ; $82 !2:SH2
>8f14		b7 a0					.word	Assemble_adc                     ; $83 ADC
>8f16		af a0					.word	Assemble_and                     ; $84 AND
>8f18		cb a0					.word	Assemble_asl                     ; $85 ASL
>8f1a		35 a1					.word	Assemble_bcc                     ; $86 BCC
>8f1c		39 a1					.word	Assemble_bcs                     ; $87 BCS
>8f1e		41 a1					.word	Assemble_beq                     ; $88 BEQ
>8f20		f8 a0					.word	Assemble_bit                     ; $89 BIT
>8f22		29 a1					.word	Assemble_bmi                     ; $8a BMI
>8f24		3d a1					.word	Assemble_bne                     ; $8b BNE
>8f26		25 a1					.word	Assemble_bpl                     ; $8c BPL
>8f28		45 a1					.word	Assemble_bra                     ; $8d BRA
>8f2a		49 a1					.word	Assemble_brk                     ; $8e BRK
>8f2c		2d a1					.word	Assemble_bvc                     ; $8f BVC
>8f2e		31 a1					.word	Assemble_bvs                     ; $90 BVS
>8f30		51 a1					.word	Assemble_clc                     ; $91 CLC
>8f32		a5 a1					.word	Assemble_cld                     ; $92 CLD
>8f34		65 a1					.word	Assemble_cli                     ; $93 CLI
>8f36		95 a1					.word	Assemble_clv                     ; $94 CLV
>8f38		c3 a0					.word	Assemble_cmp                     ; $95 CMP
>8f3a		0c a1					.word	Assemble_cpx                     ; $96 CPX
>8f3c		07 a1					.word	Assemble_cpy                     ; $97 CPY
>8f3e		e9 a0					.word	Assemble_dec                     ; $98 DEC
>8f40		a1 a1					.word	Assemble_dex                     ; $99 DEX
>8f42		7d a1					.word	Assemble_dey                     ; $9a DEY
>8f44		b3 a0					.word	Assemble_eor                     ; $9b EOR
>8f46		ee a0					.word	Assemble_inc                     ; $9c INC
>8f48		b1 a1					.word	Assemble_inx                     ; $9d INX
>8f4a		9d a1					.word	Assemble_iny                     ; $9e INY
>8f4c		20 a1					.word	Assemble_jmp                     ; $9f JMP
>8f4e		1b a1					.word	Assemble_jsr                     ; $a0 JSR
>8f50		bf a0					.word	Assemble_lda                     ; $a1 LDA
>8f52		e4 a0					.word	Assemble_ldx                     ; $a2 LDX
>8f54		02 a1					.word	Assemble_ldy                     ; $a3 LDY
>8f56		d5 a0					.word	Assemble_lsr                     ; $a4 LSR
>8f58		b5 a1					.word	Assemble_nop                     ; $a5 NOP
>8f5a		ab a0					.word	Assemble_ora                     ; $a6 ORA
>8f5c		61 a1					.word	Assemble_pha                     ; $a7 PHA
>8f5e		4d a1					.word	Assemble_php                     ; $a8 PHP
>8f60		a9 a1					.word	Assemble_phx                     ; $a9 PHX
>8f62		69 a1					.word	Assemble_phy                     ; $aa PHY
>8f64		71 a1					.word	Assemble_pla                     ; $ab PLA
>8f66		55 a1					.word	Assemble_plp                     ; $ac PLP
>8f68		bd a1					.word	Assemble_plx                     ; $ad PLX
>8f6a		79 a1					.word	Assemble_ply                     ; $ae PLY
>8f6c		d0 a0					.word	Assemble_rol                     ; $af ROL
>8f6e		da a0					.word	Assemble_ror                     ; $b0 ROR
>8f70		5d a1					.word	Assemble_rti                     ; $b1 RTI
>8f72		6d a1					.word	Assemble_rts                     ; $b2 RTS
>8f74		c7 a0					.word	Assemble_sbc                     ; $b3 SBC
>8f76		59 a1					.word	Assemble_sec                     ; $b4 SEC
>8f78		b9 a1					.word	Assemble_sed                     ; $b5 SED
>8f7a		75 a1					.word	Assemble_sei                     ; $b6 SEI
>8f7c		bb a0					.word	Assemble_sta                     ; $b7 STA
>8f7e		ad a1					.word	Assemble_stp                     ; $b8 STP
>8f80		df a0					.word	Assemble_stx                     ; $b9 STX
>8f82		fd a0					.word	Assemble_sty                     ; $ba STY
>8f84		f3 a0					.word	Assemble_stz                     ; $bb STZ
>8f86		91 a1					.word	Assemble_tax                     ; $bc TAX
>8f88		8d a1					.word	Assemble_tay                     ; $bd TAY
>8f8a		16 a1					.word	Assemble_trb                     ; $be TRB
>8f8c		11 a1					.word	Assemble_tsb                     ; $bf TSB
>8f8e		99 a1					.word	Assemble_tsx                     ; $c0 TSX
>8f90		81 a1					.word	Assemble_txa                     ; $c1 TXA
>8f92		89 a1					.word	Assemble_txs                     ; $c2 TXS
>8f94		85 a1					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.8f96						Command_Save:
.8f96		20 d2 9f	jsr $9fd2			jsr 	EvaluateString 				; file name to load
.8f99		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8f9b		a5 36		lda $36				lda 	zTemp0
.8f9d		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.8fa0		b0 2f		bcs $8fd1			bcs 	CSErrorHandler 				; error, so fail.
.8fa2		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.8fa5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fa7		85 30		sta $30				sta 	codePtr
.8fa9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fab		85 31		sta $31				sta 	codePtr+1
.8fad						_CSLoop:
.8fad		b2 30		lda ($30)			lda 	(codePtr)
.8faf		f0 17		beq $8fc8			beq 	_CSExit
.8fb1		20 f5 8f	jsr $8ff5			jsr 	CSGetCleanLine
.8fb4		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8fb6		85 36		sta $36				sta 	zTemp0
.8fb8		20 d4 8f	jsr $8fd4			jsr 	CLWriteByteBlock 			; write the block out.
.8fbb		18		clc				clc
.8fbc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fbe		65 30		adc $30				adc 	codePtr
.8fc0		85 30		sta $30				sta 	codePtr
.8fc2		90 02		bcc $8fc6			bcc 	_CREExit
.8fc4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fc6						_CREExit:
.8fc6		80 e5		bra $8fad			bra 	_CSLoop
.8fc8						_CSExit:
.8fc8		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; close file
.8fcb		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8fce		4c 4f 8a	jmp $8a4f			jmp 	CLComplete 					; display complete message.
.8fd1						CSErrorHandler:
.8fd1		4c 6c 8a	jmp $8a6c			jmp 	CLErrorHandler
.8fd4						CLWriteByteBlock:
.8fd4		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8fd6		f0 1c		beq $8ff4			beq 	_CLWBBExit					; if so, exit
.8fd8		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; stream to write, count in X
.8fdb		20 67 80	jsr $8067			jsr 	KNLWriteBlock 				; call one write attempt
.8fde		b0 f1		bcs $8fd1			bcs 	CSErrorHandler 				; error occurred
.8fe0		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8fe2		8a		txa				txa 								; subtract bytes written from X, total count.
.8fe3		38		sec				sec
.8fe4		e5 38		sbc $38				sbc 	zTemp1
.8fe6		aa		tax				tax
.8fe7		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8fe8		a5 36		lda $36				lda 	zTemp0
.8fea		65 38		adc $38				adc 	zTemp1
.8fec		85 36		sta $36				sta 	zTemp0
.8fee		90 e4		bcc $8fd4			bcc 	CLWriteByteBlock
.8ff0		e6 37		inc $37				inc 	zTemp0+1
.8ff2		80 e0		bra $8fd4			bra 	CLWriteByteBlock 			; and retry write out.
.8ff4						_CLWBBExit:
.8ff4		60		rts				rts
.8ff5						CSGetCleanLine:
.8ff5		a9 00		lda #$00			lda 	#0 							; no indent.
.8ff7		20 99 80	jsr $8099			jsr 	TKListConvertLine 			; convert line into token Buffer
.8ffa		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8ffc		a0 00		ldy #$00			ldy 	#0
.8ffe						_CSClean:
.8ffe		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.9001		f0 09		beq $900c			beq 	_CSDoneClean
.9003		30 04		bmi $9009			bmi 	_CSIgnoreCharacter
.9005		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9008		e8		inx				inx
.9009						_CSIgnoreCharacter:
.9009		c8		iny				iny
.900a		80 f2		bra $8ffe			bra 	_CSClean
.900c						_CSDoneClean:
.900c		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.900e		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9011		e8		inx				inx
.9012		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.9015		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.9017		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.9019		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.901a						StopCommand:
.901a		a9 08		lda #$08		lda	#8
.901c		4c 2f 91	jmp $912f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.901f						ProcedureScan:
.901f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9021		85 30		sta $30				sta 	codePtr
.9023		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9025		85 31		sta $31				sta 	codePtr+1
.9027						_PSLoop:
.9027		b2 30		lda ($30)			lda 	(codePtr)
.9029		f0 42		beq $906d			beq 	_PSExit
.902b		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.902d		b1 30		lda ($30),y			lda 	(codePtr),y
.902f		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.9031		d0 2d		bne $9060			bne 	_PSNext
.9033		c8		iny				iny 								; get the address of the record to zTemp0 and
.9034		b1 30		lda ($30),y			lda 	(codePtr),y
.9036		29 c0		and #$c0			and 	#$C0
.9038		c9 40		cmp #$40			cmp 	#$40
.903a		d0 32		bne $906e			bne 	_PSSyntax
.903c		b1 30		lda ($30),y			lda 	(codePtr),y
.903e		18		clc				clc
.903f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9041		85 37		sta $37				sta 	zTemp0+1
.9043		c8		iny				iny 								; LSB
.9044		b1 30		lda ($30),y			lda 	(codePtr),y
.9046		85 36		sta $36				sta 	zTemp0
.9048		c8		iny				iny 								; character after variable call.
.9049		98		tya				tya 								; save Y offset at +7 (exponent slot)
.904a		a0 07		ldy #$07			ldy 	#7
.904c		91 36		sta ($36),y			sta 	(zTemp0),y
.904e		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9050		a0 02		ldy #$02			ldy 	#2
.9052		91 36		sta ($36),y			sta 	(zTemp0),y
.9054		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9056						_PSCopy:
.9056		b5 30		lda $30,x			lda 	safePtr,x
.9058		c8		iny				iny
.9059		91 36		sta ($36),y			sta 	(zTemp0),y
.905b		e8		inx				inx
.905c		e0 04		cpx #$04			cpx 	#4
.905e		d0 f6		bne $9056			bne 	_PSCopy
.9060						_PSNext:
.9060		18		clc				clc
.9061		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9063		65 30		adc $30				adc 	codePtr
.9065		85 30		sta $30				sta 	codePtr
.9067		90 02		bcc $906b			bcc 	_CREExit
.9069		e6 31		inc $31				inc 	codePtr+1 					; carry
.906b						_CREExit:
.906b		80 ba		bra $9027			bra 	_PSLoop
.906d						_PSExit:
.906d		60		rts				rts
.906e						_PSSyntax:
.906e		4c f8 a1	jmp $a1f8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9071						ScanForward:
.9071		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9073		86 37		stx $37				stx 	zTemp0+1
.9075		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9077						_ScanLoop:
.9077		b1 30		lda ($30),y			lda 	(codePtr),y
.9079		c8		iny				iny
.907a		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.907c		d0 0e		bne $908c			bne 	_ScanGoNext
.907e		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9080		f0 04		beq $9086			beq 	_ScanMatch
.9082		c5 37		cmp $37				cmp 	zTemp0+1
.9084		d0 06		bne $908c			bne 	_ScanGoNext
.9086						_ScanMatch:
.9086		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9088		d0 01		bne $908b			bne 	_ScanNotEndEOL
.908a		88		dey				dey
.908b						_ScanNotEndEOL:
.908b		60		rts				rts
.908c						_ScanGoNext:
.908c		20 91 90	jsr $9091			jsr  	ScanForwardOne 				; allows for shifts and so on.
.908f		80 e6		bra $9077			bra 	_ScanLoop
.9091						ScanForwardOne:
.9091		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9093		90 3e		bcc $90d3			bcc 	_SFWExit
.9095		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9097		90 18		bcc $90b1			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9099		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.909b		b0 2f		bcs $90cc			bcs 	_ScanSkipData
.909d		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.909f		90 32		bcc $90d3			bcc 	_SFWExit 					; if not, ordinary keywords.
.90a1		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.90a3		b0 2e		bcs $90d3			bcs 	_SFWExit
.90a5		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.90a7		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.90a9		b0 28		bcs $90d3			bcs 	_SFWExit
.90ab		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.90ad		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.90af		80 22		bra $90d3			bra 	_SFWExit
.90b1						_ScanSkipOne:
.90b1		c8		iny				iny 								; consume the extra one.
.90b2		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.90b4		d0 1d		bne $90d3			bne 	_SFWExit
.90b6		18		clc				clc
.90b7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90b9		65 30		adc $30				adc 	codePtr
.90bb		85 30		sta $30				sta 	codePtr
.90bd		90 02		bcc $90c1			bcc 	_CREExit
.90bf		e6 31		inc $31				inc 	codePtr+1 					; carry
.90c1						_CREExit:
.90c1		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.90c3		b2 30		lda ($30)			lda 	(codePtr)
.90c5		d0 0c		bne $90d3			bne 	_SFWExit 					; if not zero, more to scan
.90c7		a9 13		lda #$13		lda	#19
.90c9		4c 2f 91	jmp $912f		jmp	ErrorHandler
.90cc						_ScanSkipData:
.90cc		88		dey				dey 								; point at data token
.90cd		c8		iny				iny 								; point to offset
.90ce		98		tya				tya 								; A = offset position
.90cf		38		sec				sec 								; add size +1 hence SEC
.90d0		71 30		adc ($30),y			adc 	(codePtr),y
.90d2		a8		tay				tay 								; make current position.
.90d3						_SFWExit:
.90d3		60		rts				rts
.90d4						ScanGetCurrentLineStep:
.90d4		64 38		stz $38				stz 	zTemp1
.90d6		a0 03		ldy #$03			ldy 	#3
.90d8						_SGCLSLoop:
.90d8		b1 30		lda ($30),y			lda 	(codePtr),y
.90da		c8		iny				iny
.90db		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.90dd		f0 05		beq $90e4			beq 	_SGCLSExit
.90df		20 91 90	jsr $9091			jsr 	ScanForwardOne
.90e2		80 f4		bra $90d8			bra 	_SGCLSLoop
.90e4						_SGCLSExit:
.90e4		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.90e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.90e7						Command_WHILE:
.90e7		5a		phy				phy 								; save position of the test
.90e8		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.90ea		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber
.90ed		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; check if zero
.90f0		f0 0e		beq $9100			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.90f2		98		tya				tya 								; position *after* test.
.90f3		7a		ply				ply 								; restore position before test, at WHILE
.90f4		88		dey				dey 								; so we execute the WHILE command again.
.90f5		48		pha				pha 								; push after test on the stack
.90f6		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.90f8		20 59 b1	jsr $b159			jsr 	StackOpen
.90fb		20 9e b1	jsr $b19e			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.90fe		7a		ply				ply 								; restore the position *after* the test
.90ff		60		rts				rts
.9100						_WHExitLoop:
.9100		68		pla				pla 								; throw post loop position
.9101		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.9103		aa		tax				tax
.9104		20 71 90	jsr $9071			jsr 	ScanForward
.9107		60		rts				rts
.9108						Command_WEND:
.9108		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.910a		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.910c		20 86 b1	jsr $b186			jsr 	StackCheckFrame
.910f		20 af b1	jsr $b1af			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9112		20 78 b1	jsr $b178			jsr 	StackClose		 			; erase the frame
.9115		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9116						CheckRightBracket:
.9116		b1 30		lda ($30),y			lda 	(codePtr),y
.9118		c8		iny				iny
.9119		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.911b		d0 0f		bne $912c			bne 	CNAFail
.911d		60		rts				rts
.911e						CheckComma:
.911e		b1 30		lda ($30),y			lda 	(codePtr),y
.9120		c8		iny				iny
.9121		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9123		d0 07		bne $912c			bne 	CNAFail
.9125		60		rts				rts
.9126						CheckNextA:
.9126		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9128		d0 02		bne $912c			bne 	CNAFail
.912a		c8		iny				iny 								; skip character
.912b		60		rts				rts 								; and exit
.912c						CNAFail:
.912c		4c f8 a1	jmp $a1f8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.912f						ErrorHandler:
.912f		a8		tay				tay 								; find the error text
.9130		f0 49		beq $917b			beq 	_EHEnd
.9132		a2 00		ldx #$00			ldx 	#0
.9134		a9 11		lda #$11			lda 	#((ErrorText) & $FF)
.9136		85 36		sta $36				sta 	0+zTemp0
.9138		a9 a2		lda #$a2			lda 	#((ErrorText) >> 8)
.913a		85 37		sta $37				sta 	1+zTemp0
.913c						_EHFind:
.913c		88		dey				dey 								; keep looking through text
.913d		f0 0e		beq $914d			beq 	_EHFound
.913f						_EHFindZero:
.913f		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9141		e6 36		inc $36				inc 	zTemp0
.9143		d0 02		bne $9147			bne 	_EHFNoCarry
.9145		e6 37		inc $37				inc 	zTemp0+1
.9147						_EHFNoCarry:
.9147		c9 00		cmp #$00			cmp 	#0
.9149		d0 f4		bne $913f			bne 	_EHFindZero
.914b		80 ef		bra $913c			bra 	_EHFind
.914d						_EHFound:
.914d		a5 36		lda $36				lda 	zTemp0 						; print message
.914f		a6 37		ldx $37				ldx 	zTemp0+1
.9151		20 88 91	jsr $9188			jsr 	PrintStringXA
.9154		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9156		b1 30		lda ($30),y			lda 	(codePtr),y
.9158		d0 05		bne $915f			bne 	_EHAtMsg
.915a		c8		iny				iny
.915b		b1 30		lda ($30),y			lda 	(codePtr),y
.915d		f0 17		beq $9176			beq 	_EHCREnd
.915f						_EHAtMsg:
.915f		a2 91		ldx #$91			ldx 	#_AtMsg >> 8 				; print " at "
.9161		a9 7e		lda #$7e			lda 	#_AtMsg & $FF
.9163		20 88 91	jsr $9188			jsr 	PrintStringXA
.9166		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9168		b1 30		lda ($30),y			lda 	(codePtr),y
.916a		48		pha				pha
.916b		c8		iny				iny
.916c		b1 30		lda ($30),y			lda 	(codePtr),y
.916e		aa		tax				tax
.916f		68		pla				pla
.9170		20 9e 95	jsr $959e			jsr 	ConvertInt16 				; convert XA to string
.9173		20 88 91	jsr $9188			jsr 	PrintStringXA 				; and print it.
.9176						_EHCREnd:
.9176		a9 0d		lda #$0d			lda 	#13 						; new line
.9178		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.917b						_EHEnd:
.917b		4c 1e 84	jmp $841e			jmp 	WarmStart
>917e		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9186		20 00
.9188						PrintStringXA:
.9188		5a		phy				phy
.9189		86 37		stx $37				stx 	zTemp0+1
.918b		85 36		sta $36				sta 	zTemp0
.918d		a0 00		ldy #$00			ldy 	#0
.918f						_PSXALoop:
.918f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9191		f0 06		beq $9199			beq 	_PSXAExit
.9193		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9196		c8		iny				iny
.9197		80 f6		bra $918f			bra 	_PSXALoop
.9199						_PSXAExit:
.9199		7a		ply				ply
.919a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.919b						UnaryTrue:
.919b		fa		plx				plx
.919c						ReturnTrue:
.919c		a9 01		lda #$01			lda 	#1  						; set to 1
.919e		20 7c a0	jsr $a07c			jsr 	NSMSetByte
.91a1		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.91a3		95 50		sta $50,x			sta 	NSStatus,x
.91a5		60		rts				rts
.91a6						UnaryFalse:
.91a6		fa		plx				plx
.91a7						ReturnFalse:
.91a7		4c 7a a0	jmp $a07a			jmp 	NSMSetZero 					; set it all to zero
.91aa						BinaryCompareEqual:
.91aa		fa		plx				plx
.91ab		20 e6 91	jsr $91e6			jsr 	CompareBaseCode
.91ae		c9 00		cmp #$00			cmp 	#0
.91b0		f0 ea		beq $919c			beq 	ReturnTrue
.91b2		80 f3		bra $91a7			bra 	ReturnFalse
.91b4						BinaryCompareLess:
.91b4		fa		plx				plx
.91b5		20 e6 91	jsr $91e6			jsr 	CompareBaseCode
.91b8		c9 ff		cmp #$ff			cmp 	#$FF
.91ba		f0 e0		beq $919c			beq 	ReturnTrue
.91bc		80 e9		bra $91a7			bra 	ReturnFalse
.91be						BinaryCompareGreater:
.91be		fa		plx				plx
.91bf		20 e6 91	jsr $91e6			jsr 	CompareBaseCode
.91c2		c9 01		cmp #$01			cmp 	#1
.91c4		f0 d6		beq $919c			beq 	ReturnTrue
.91c6		80 df		bra $91a7			bra 	ReturnFalse
.91c8						BinaryCompareNotEqual:
.91c8		fa		plx				plx
.91c9		20 e6 91	jsr $91e6			jsr 	CompareBaseCode
.91cc		c9 00		cmp #$00			cmp 	#0
.91ce		d0 cc		bne $919c			bne 	ReturnTrue
.91d0		80 d5		bra $91a7			bra 	ReturnFalse
.91d2						BinaryCompareLessEqual:
.91d2		fa		plx				plx
.91d3		20 e6 91	jsr $91e6			jsr 	CompareBaseCode
.91d6		c9 01		cmp #$01			cmp 	#1
.91d8		d0 c2		bne $919c			bne 	ReturnTrue
.91da		80 cb		bra $91a7			bra 	ReturnFalse
.91dc						BinaryCompareGreaterEqual:
.91dc		fa		plx				plx
.91dd		20 e6 91	jsr $91e6			jsr 	CompareBaseCode
.91e0		c9 ff		cmp #$ff			cmp 	#$FF
.91e2		d0 b8		bne $919c			bne 	ReturnTrue
.91e4		80 c1		bra $91a7			bra 	ReturnFalse
.91e6						CompareBaseCode:
.91e6		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; make both values if references.
.91e9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.91eb		15 51		ora $51,x			ora 	NSStatus+1,x
.91ed		29 10		and #$10			and 	#NSTString
.91ef		d0 37		bne $9228			bne 	_CBCString 					; if so do string code, which will check if both.
.91f1		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.91f3		15 79		ora $79,x			ora 	NSExponent+1,x
.91f5		d0 34		bne $922b			bne 	_CBCFloat
.91f7		b5 50		lda $50,x			lda 	NSStatus,x
.91f9		15 51		ora $51,x			ora 	NSStatus+1,x
.91fb		29 08		and #$08			and 	#NSTFloat
.91fd		d0 2c		bne $922b			bne 	_CBCFloat
.91ff		20 2e 92	jsr $922e			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9202		e8		inx				inx
.9203		20 2e 92	jsr $922e			jsr 	CompareFixMinusZero
.9206		ca		dex				dex
.9207		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9209		55 51		eor $51,x			eor 	NSStatus+1,x
.920b		10 0a		bpl $9217			bpl 	_CDCSameSign
.920d		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.920f		30 14		bmi $9225			bmi 	_CBCLess 					; return $FF
.9211						_CBCGreater:
.9211		a9 01		lda #$01			lda 	#1
.9213		60		rts				rts
.9214						_CBCEqual:
.9214		a9 00		lda #$00			lda 	#0
.9216		60		rts				rts
.9217						_CDCSameSign:
.9217		20 43 94	jsr $9443			jsr 	SubTopTwoStack 				; unsigned subtract
.921a		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; or the mantissa together
.921d		f0 f5		beq $9214			beq 	_CBCEqual 					; -0 == 0
.921f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9221		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9223		10 ec		bpl $9211			bpl 	_CBCGreater
.9225						_CBCLess:
.9225		a9 ff		lda #$ff			lda 	#$FF
.9227		60		rts				rts
.9228						_CBCString:
.9228		4c b4 93	jmp $93b4			jmp 	CompareStrings
.922b						_CBCFloat:
.922b		4c fe 96	jmp $96fe			jmp 	CompareFloat
.922e						CompareFixMinusZero:
.922e		20 9c a0	jsr $a09c			jsr 	NSMIsZero
.9231		d0 02		bne $9235			bne 	_CFXMZNotZero
.9233		74 50		stz $50,x			stz 	NSStatus,x
.9235						_CFXMZNotZero:
.9235		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9236						StringConcat:
.9236		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9238		35 51		and $51,x			and 	NSStatus+1,x
.923a		29 18		and #$18			and 	#NSBTypeMask
.923c		c9 10		cmp #$10			cmp 	#NSTString
.923e		d0 50		bne $9290			bne		_SCType
.9240		64 38		stz $38				stz 	zTemp1 						; counting total length
.9242		e8		inx				inx
.9243		20 61 92	jsr $9261			jsr 	_SCSetupZ0 					; setup for second
.9246		20 6a 92	jsr $926a			jsr 	_SCLengthZ0 				; length for second
.9249		ca		dex				dex
.924a		20 61 92	jsr $9261			jsr 	_SCSetupZ0 					; setup for first
.924d		20 6a 92	jsr $926a			jsr 	_SCLengthZ0 				; length for first
.9250		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9252		20 49 b2	jsr $b249			jsr 	StringTempAllocate
.9255		20 81 92	jsr $9281			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9258		e8		inx				inx
.9259		20 61 92	jsr $9261			jsr 	_SCSetupZ0 					; copy second out
.925c		20 81 92	jsr $9281			jsr 	_SCCopy
.925f		ca		dex				dex
.9260		60		rts				rts
.9261						_SCSetupZ0:
.9261		b5 58		lda $58,x			lda 	NSMantissa0,x
.9263		85 36		sta $36				sta 	zTemp0
.9265		b5 60		lda $60,x			lda 	NSMantissa1,x
.9267		85 37		sta $37				sta 	zTemp0+1
.9269		60		rts				rts
.926a						_SCLengthZ0:
.926a		5a		phy				phy
.926b		a0 00		ldy #$00			ldy 	#0
.926d						_SCLenLoop:
.926d		b1 36		lda ($36),y			lda 	(zTemp0),y
.926f		f0 0e		beq $927f			beq 	_SCLExit
.9271		c8		iny				iny
.9272		e6 38		inc $38				inc 	zTemp1
.9274		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9276		c9 fd		cmp #$fd			cmp 	#253
.9278		d0 f3		bne $926d			bne		_SCLenLoop
.927a		a9 09		lda #$09		lda	#9
.927c		4c 2f 91	jmp $912f		jmp	ErrorHandler
.927f						_SCLExit:
.927f		7a		ply				ply
.9280		60		rts				rts
.9281						_SCCopy:
.9281		5a		phy				phy
.9282		a0 00		ldy #$00			ldy 	#0
.9284						_SCCopyLoop:
.9284		b1 36		lda ($36),y			lda 	(zTemp0),y
.9286		f0 06		beq $928e			beq 	_SCCExit
.9288		20 82 b2	jsr $b282			jsr 	StringTempWrite
.928b		c8		iny				iny
.928c		80 f6		bra $9284			bra 	_SCCopyLoop
.928e						_SCCExit:
.928e		7a		ply				ply
.928f		60		rts				rts
.9290						_SCType:
.9290		4c 02 a2	jmp $a202			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9293						IntegerDivide:
.9293		fa		plx				plx
.9294		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9296		15 51		ora $51,x			ora 	NSStatus+1,x
.9298		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9299		0a		asl a				asl 	a
.929a		10 05		bpl $92a1			bpl 	_NotRef
.929c		48		pha				pha
.929d		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92a0		68		pla				pla
.92a1						_NotRef:
.92a1		0a		asl a				asl 	a
.92a2		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92a4		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92a6		15 79		ora $79,x			ora 	NSExponent+1,x
.92a8		f0 03		beq $92ad			beq 	_IntegerCode 				; if clear, then we have two integers
.92aa		4c 02 a2	jmp $a202			jmp 	TypeError 					; anything else, type mismatch.
.92ad						_IntegerCode:
.92ad		20 c7 92	jsr $92c7			jsr 	CheckDivideZero 			; do div zero check
.92b0		20 f9 92	jsr $92f9			jsr 	Int32Divide 				; do the division
.92b3		20 aa 93	jsr $93aa			jsr 	CalculateSign 				; calculate result sign
.92b6						NSMCopyPlusTwoToZero:
.92b6		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.92b8		95 58		sta $58,x			sta 	NSMantissa0,x
.92ba		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.92bc		95 60		sta $60,x			sta 	NSMantissa1,x
.92be		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.92c0		95 68		sta $68,x			sta 	NSMantissa2,x
.92c2		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.92c4		95 70		sta $70,x			sta 	NSMantissa3,x
.92c6		60		rts				rts
.92c7						CheckDivideZero:
.92c7		e8		inx				inx
.92c8		20 9c a0	jsr $a09c			jsr 	NSMIsZero
.92cb		f0 02		beq $92cf			beq 	_CDVError
.92cd		ca		dex				dex
.92ce		60		rts				rts
.92cf						_CDVError:
.92cf		a9 03		lda #$03		lda	#3
.92d1		4c 2f 91	jmp $912f		jmp	ErrorHandler
.92d4						IntegerModulus:
.92d4		fa		plx				plx
.92d5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92d7		15 51		ora $51,x			ora 	NSStatus+1,x
.92d9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92da		0a		asl a				asl 	a
.92db		10 05		bpl $92e2			bpl 	_NotRef
.92dd		48		pha				pha
.92de		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92e1		68		pla				pla
.92e2						_NotRef:
.92e2		0a		asl a				asl 	a
.92e3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92e5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92e7		15 79		ora $79,x			ora 	NSExponent+1,x
.92e9		f0 03		beq $92ee			beq 	_IntegerCode 				; if clear, then we have two integers
.92eb		4c 02 a2	jmp $a202			jmp 	TypeError 					; anything else, type mismatch.
.92ee						_IntegerCode:
.92ee						IntegerModulusNoCheck:
.92ee		20 c7 92	jsr $92c7			jsr 	CheckDivideZero 			; do div zero check
.92f1		20 f9 92	jsr $92f9			jsr 	Int32Divide 				; do the division
.92f4		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.92f6		56 50		lsr $50,x			lsr 	NSStatus,x
.92f8		60		rts				rts
.92f9						Int32Divide:
.92f9		48		pha				pha 								; save AXY
.92fa		5a		phy				phy
.92fb		20 5d a0	jsr $a05d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.92fe		20 76 a0	jsr $a076			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9301		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9303						_I32DivideLoop:
.9303		e8		inx				inx
.9304		e8		inx				inx
.9305		20 89 a0	jsr $a089			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9308		ca		dex				dex
.9309		ca		dex				dex
.930a		20 8a a0	jsr $a08a			jsr 	NSMRotateLeft
.930d		20 38 93	jsr $9338			jsr 	DivideCheckSubtract 		; check if subtract possible
.9310		90 02		bcc $9314			bcc 	_I32DivideNoCarryIn
.9312		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9314						_I32DivideNoCarryIn:
.9314		88		dey				dey 								; loop round till division completed.
.9315		d0 ec		bne $9303			bne 	_I32DivideLoop
.9317		7a		ply				ply 								; restore AXY and exit
.9318		68		pla				pla
.9319		60		rts				rts
.931a						Int32ShiftDivide:
.931a		48		pha				pha 								; save AY
.931b		5a		phy				phy
.931c		e8		inx				inx 								; clear S[X+2]
.931d		e8		inx				inx
.931e		20 7a a0	jsr $a07a			jsr 	NSMSetZero
.9321		ca		dex				dex
.9322		ca		dex				dex
.9323		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9325						_I32SDLoop:
.9325		20 38 93	jsr $9338			jsr 	DivideCheckSubtract 		; check if subtract possible
.9328		e8		inx				inx
.9329		e8		inx				inx
.932a		20 8a a0	jsr $a08a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.932d		ca		dex				dex
.932e		ca		dex				dex
.932f		20 8a a0	jsr $a08a			jsr 	NSMRotateLeft
.9332		88		dey				dey 	 							; do 31 times
.9333		d0 f0		bne $9325			bne 	_I32SDLoop
.9335		7a		ply				ply 								; restore AY and exit
.9336		68		pla				pla
.9337		60		rts				rts
.9338						DivideCheckSubtract:
.9338		20 43 94	jsr $9443			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.933b		b0 04		bcs $9341			bcs 	_DCSExit 					; if carry set, then could do, exit
.933d		20 29 94	jsr $9429			jsr 	AddTopTwoStack 				; add it back in
.9340		18		clc				clc 								; and return False
.9341						_DCSExit:
.9341		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9342						MulInteger:
.9342		fa		plx				plx
.9343		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9345		15 51		ora $51,x			ora 	NSStatus+1,x
.9347		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9348		0a		asl a				asl 	a
.9349		10 05		bpl $9350			bpl 	_NotRef
.934b		48		pha				pha
.934c		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.934f		68		pla				pla
.9350						_NotRef:
.9350		0a		asl a				asl 	a 							; put MSB of type into A:7
.9351		30 09		bmi $935c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9353		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9355		15 79		ora $79,x			ora 	NSExponent+1,x
.9357		f0 06		beq $935f			beq 	_IntegerCode 				; if clear, then we have two integers
.9359		4c c0 97	jmp $97c0			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.935c						_StringData:
.935c		4c 0c a2	jmp $a20c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.935f						_IntegerCode:
.935f		20 6c 93	jsr $936c			jsr 	MultiplyShort
.9362		c9 00		cmp #$00			cmp 	#0
.9364		f0 05		beq $936b			beq 	_MIExit
.9366		a9 04		lda #$04		lda	#4
.9368		4c 2f 91	jmp $912f		jmp	ErrorHandler
.936b						_MIExit:
.936b		60		rts				rts
.936c						MultiplyShort:
.936c		5a		phy				phy 								; save Y
.936d		20 5d a0	jsr $a05d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9370		20 76 a0	jsr $a076			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9373		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9375						_I32MLoop:
.9375		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9377		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9379		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.937b		15 72		ora $72,x			ora 	NSMantissa3+2,x
.937d		f0 25		beq $93a4			beq 	_I32MExit 					; exit if zero
.937f		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9381		29 01		and #$01			and 	#1
.9383		f0 0d		beq $9392			beq 	_I32MNoAdd
.9385		20 29 94	jsr $9429			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9388		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.938a		10 06		bpl $9392			bpl 	_I32MNoAdd
.938c						_I32ShiftRight:
.938c		20 93 a0	jsr $a093			jsr 	NSMShiftRight 				; shift S[X] right
.938f		c8		iny				iny 								; increment shift count
.9390		80 09		bra $939b			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9392						_I32MNoAdd:
.9392		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9394		70 f6		bvs $938c			bvs 	_I32ShiftRight 				; instead.
.9396		e8		inx				inx
.9397		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.939a		ca		dex				dex
.939b						_I32MShiftUpper:
.939b		e8		inx				inx 								; shift S[X+2] right
.939c		e8		inx				inx
.939d		20 93 a0	jsr $a093			jsr 	NSMShiftRight
.93a0		ca		dex				dex
.93a1		ca		dex				dex
.93a2		80 d1		bra $9375			bra 	_I32MLoop 					; try again.
.93a4						_I32MExit:
.93a4		20 aa 93	jsr $93aa			jsr 	CalculateSign
.93a7		98		tya				tya 								; shift in A
.93a8		7a		ply				ply 								; restore Y and exit
.93a9		60		rts				rts
.93aa						CalculateSign:
.93aa		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.93ac		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.93ae		55 51		eor $51,x			eor 	NSStatus+1,x
.93b0		0a		asl a				asl 	a 							; shift bit 7 into carry
.93b1		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.93b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.93b4						CompareStrings:
.93b4		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.93b6		35 51		and $51,x			and 	NSStatus+1,x
.93b8		29 10		and #$10			and 	#NSBIsString
.93ba		f0 28		beq $93e4			beq 	_CSTypeError
.93bc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.93be		85 36		sta $36				sta 	zTemp0
.93c0		b5 60		lda $60,x			lda 	NSMantissa1,x
.93c2		85 37		sta $37				sta 	zTemp0+1
.93c4		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.93c6		85 38		sta $38				sta 	zTemp1
.93c8		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.93ca		85 39		sta $39				sta 	zTemp1+1
.93cc		5a		phy				phy 								; save Y so we can access strings
.93cd		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.93cf						_CSLoop:
.93cf		c8		iny				iny
.93d0		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.93d2		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.93d4		d0 06		bne $93dc			bne 	_CSDifferent
.93d6		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.93d8		d0 f5		bne $93cf			bne 	_CSLoop 					; still comparing
.93da						_CSExit:
.93da		7a		ply				ply 								; reached end, return zero in A from EOS
.93db		60		rts				rts
.93dc						_CSDifferent:
.93dc		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.93de		90 fa		bcc $93da			bcc		_CSExit
.93e0		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.93e2		80 f6		bra $93da			bra 	_CSExit
.93e4						_CSTypeError:
.93e4		4c 02 a2	jmp $a202			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.93e7						ShiftLeft:
.93e7		38		sec				sec 								; common code, carry determines which way.
.93e8		80 01		bra $93eb			bra 	ShiftMain
.93ea						ShiftRight:
.93ea		18		clc				clc
.93eb						ShiftMain:
.93eb		fa		plx				plx 								; restore X
.93ec		08		php				php 								; save direction
.93ed		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93ef		15 51		ora $51,x			ora 	NSStatus+1,x
.93f1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93f2		0a		asl a				asl 	a
.93f3		10 05		bpl $93fa			bpl 	_NotRef
.93f5		48		pha				pha
.93f6		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93f9		68		pla				pla
.93fa						_NotRef:
.93fa		0a		asl a				asl 	a
.93fb		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93fd		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93ff		15 79		ora $79,x			ora 	NSExponent+1,x
.9401		f0 03		beq $9406			beq 	_IntegerCode 				; if clear, then we have two integers
.9403		4c 02 a2	jmp $a202			jmp 	TypeError 					; anything else, type mismatch.
.9406						_IntegerCode:
.9406		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9408		29 e0		and #$e0			and 	#$E0
.940a		15 61		ora $61,x			ora 	NSMantissa1+1,x
.940c		15 69		ora $69,x			ora 	NSMantissa2+1,x
.940e		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9410		d0 12		bne $9424			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9412						_SMLoop:
.9412		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9414		30 11		bmi $9427			bmi 	_SMExit 					; exit if done.
.9416		28		plp				plp 								; restore direction setting
.9417		08		php				php
.9418		90 05		bcc $941f			bcc 	_SMRight
.941a		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; shift left if CS
.941d		80 f3		bra $9412			bra 	_SMLoop
.941f						_SMRight:
.941f		20 93 a0	jsr $a093			jsr 	NSMShiftRight 				; shift right if CC
.9422		80 ee		bra $9412			bra 	_SMLoop
.9424						_SMExit0:
.9424		20 7a a0	jsr $a07a			jsr 	NSMSetZero 					; return zero.
.9427						_SMExit:
.9427		28		plp				plp 								; throw direction
.9428		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9429						AddTopTwoStack:
.9429		18		clc				clc
.942a		b5 58		lda $58,x			lda		NSMantissa0,x
.942c		75 59		adc $59,x			adc 		NSMantissa0+1,x
.942e		95 58		sta $58,x			sta 	NSMantissa0,x
.9430		b5 60		lda $60,x			lda		NSMantissa1,x
.9432		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9434		95 60		sta $60,x			sta 	NSMantissa1,x
.9436		b5 68		lda $68,x			lda		NSMantissa2,x
.9438		75 69		adc $69,x			adc 		NSMantissa2+1,x
.943a		95 68		sta $68,x			sta 	NSMantissa2,x
.943c		b5 70		lda $70,x			lda		NSMantissa3,x
.943e		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9440		95 70		sta $70,x			sta 	NSMantissa3,x
.9442		60		rts				rts
.9443						SubTopTwoStack:
.9443		38		sec				sec
.9444		b5 58		lda $58,x			lda		NSMantissa0,x
.9446		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9448		95 58		sta $58,x			sta 	NSMantissa0,x
.944a		b5 60		lda $60,x			lda		NSMantissa1,x
.944c		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.944e		95 60		sta $60,x			sta 	NSMantissa1,x
.9450		b5 68		lda $68,x			lda		NSMantissa2,x
.9452		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9454		95 68		sta $68,x			sta 	NSMantissa2,x
.9456		b5 70		lda $70,x			lda		NSMantissa3,x
.9458		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.945a		95 70		sta $70,x			sta 	NSMantissa3,x
.945c		60		rts				rts
.945d						AddInteger:
.945d		fa		plx				plx
.945e		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9460		15 51		ora $51,x			ora 	NSStatus+1,x
.9462		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9463		0a		asl a				asl 	a
.9464		10 05		bpl $946b			bpl 	_NotRef
.9466		48		pha				pha
.9467		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.946a		68		pla				pla
.946b						_NotRef:
.946b		0a		asl a				asl 	a 							; put MSB of type into A:7
.946c		30 09		bmi $9477			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.946e		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9470		15 79		ora $79,x			ora 	NSExponent+1,x
.9472		f0 06		beq $947a			beq 	_IntegerCode 				; if clear, then we have two integers
.9474		4c 70 96	jmp $9670			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9477						_StringData:
.9477		4c 36 92	jmp $9236			jmp 	StringConcat							; at least one string - don't know both are strings.
.947a						_IntegerCode:
.947a						AddCode:
.947a		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.947c		55 51		eor $51,x			eor 	NSStatus+1,x
.947e		10 a9		bpl $9429			bpl 	AddTopTwoStack
.9480		20 43 94	jsr $9443			jsr 	SubTopTwoStack 				; do a physical subtraction
.9483		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9485		10 07		bpl $948e			bpl 	_AddExit
.9487		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9489		95 50		sta $50,x			sta 	NSStatus,x
.948b		20 43 a0	jsr $a043			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.948e						_AddExit:
.948e		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; check for -0
.9491		d0 02		bne $9495			bne 	_AddNonZero
.9493		74 50		stz $50,x			stz 	NSStatus,x
.9495						_AddNonZero:
.9495		60		rts				rts
.9496						SubInteger:
.9496		fa		plx				plx
.9497		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9499		15 51		ora $51,x			ora 	NSStatus+1,x
.949b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.949c		0a		asl a				asl 	a
.949d		10 05		bpl $94a4			bpl 	_NotRef
.949f		48		pha				pha
.94a0		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94a3		68		pla				pla
.94a4						_NotRef:
.94a4		0a		asl a				asl 	a 							; put MSB of type into A:7
.94a5		30 09		bmi $94b0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94a7		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94a9		15 79		ora $79,x			ora 	NSExponent+1,x
.94ab		f0 06		beq $94b3			beq 	_IntegerCode 				; if clear, then we have two integers
.94ad		4c 75 96	jmp $9675			jmp 	FloatingPointSub 							; otherwise at least one float.
.94b0						_StringData:
.94b0		4c 0c a2	jmp $a20c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94b3						_IntegerCode:
.94b3		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.94b5		49 80		eor #$80			eor 	#$80
.94b7		95 51		sta $51,x			sta 	NSStatus+1,x
.94b9		80 bf		bra $947a			bra 	AddCode 					; and do the same code as add.
.94bb						AndInteger:
.94bb		fa		plx				plx
.94bc		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94be		15 51		ora $51,x			ora 	NSStatus+1,x
.94c0		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94c1		0a		asl a				asl 	a
.94c2		10 05		bpl $94c9			bpl 	_NotRef
.94c4		48		pha				pha
.94c5		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94c8		68		pla				pla
.94c9						_NotRef:
.94c9		0a		asl a				asl 	a
.94ca		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94cc		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94ce		15 79		ora $79,x			ora 	NSExponent+1,x
.94d0		f0 03		beq $94d5			beq 	_IntegerCode 				; if clear, then we have two integers
.94d2		4c 02 a2	jmp $a202			jmp 	TypeError 					; anything else, type mismatch.
.94d5						_IntegerCode:
.94d5		b5 58		lda $58,x			lda		NSMantissa0,x
.94d7		35 59		and $59,x			and 		NSMantissa0+1,x
.94d9		95 58		sta $58,x			sta 	NSMantissa0,x
.94db		b5 60		lda $60,x			lda		NSMantissa1,x
.94dd		35 61		and $61,x			and 		NSMantissa1+1,x
.94df		95 60		sta $60,x			sta 	NSMantissa1,x
.94e1		b5 68		lda $68,x			lda		NSMantissa2,x
.94e3		35 69		and $69,x			and 		NSMantissa2+1,x
.94e5		95 68		sta $68,x			sta 	NSMantissa2,x
.94e7		b5 70		lda $70,x			lda		NSMantissa3,x
.94e9		35 71		and $71,x			and 		NSMantissa3+1,x
.94eb		95 70		sta $70,x			sta 	NSMantissa3,x
.94ed		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.94ef		60		rts				rts
.94f0						OraInteger:
.94f0		fa		plx				plx
.94f1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94f3		15 51		ora $51,x			ora 	NSStatus+1,x
.94f5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94f6		0a		asl a				asl 	a
.94f7		10 05		bpl $94fe			bpl 	_NotRef
.94f9		48		pha				pha
.94fa		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94fd		68		pla				pla
.94fe						_NotRef:
.94fe		0a		asl a				asl 	a
.94ff		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9501		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9503		15 79		ora $79,x			ora 	NSExponent+1,x
.9505		f0 03		beq $950a			beq 	_IntegerCode 				; if clear, then we have two integers
.9507		4c 02 a2	jmp $a202			jmp 	TypeError 					; anything else, type mismatch.
.950a						_IntegerCode:
.950a		b5 58		lda $58,x			lda		NSMantissa0,x
.950c		15 59		ora $59,x			ora 		NSMantissa0+1,x
.950e		95 58		sta $58,x			sta 	NSMantissa0,x
.9510		b5 60		lda $60,x			lda		NSMantissa1,x
.9512		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9514		95 60		sta $60,x			sta 	NSMantissa1,x
.9516		b5 68		lda $68,x			lda		NSMantissa2,x
.9518		15 69		ora $69,x			ora 		NSMantissa2+1,x
.951a		95 68		sta $68,x			sta 	NSMantissa2,x
.951c		b5 70		lda $70,x			lda		NSMantissa3,x
.951e		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9520		95 70		sta $70,x			sta 	NSMantissa3,x
.9522		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9524		60		rts				rts
.9525						EorInteger:
.9525		fa		plx				plx
.9526		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9528		15 51		ora $51,x			ora 	NSStatus+1,x
.952a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.952b		0a		asl a				asl 	a
.952c		10 05		bpl $9533			bpl 	_NotRef
.952e		48		pha				pha
.952f		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9532		68		pla				pla
.9533						_NotRef:
.9533		0a		asl a				asl 	a
.9534		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9536		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9538		15 79		ora $79,x			ora 	NSExponent+1,x
.953a		f0 03		beq $953f			beq 	_IntegerCode 				; if clear, then we have two integers
.953c		4c 02 a2	jmp $a202			jmp 	TypeError 					; anything else, type mismatch.
.953f						_IntegerCode:
.953f		b5 58		lda $58,x			lda		NSMantissa0,x
.9541		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9543		95 58		sta $58,x			sta 	NSMantissa0,x
.9545		b5 60		lda $60,x			lda		NSMantissa1,x
.9547		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9549		95 60		sta $60,x			sta 	NSMantissa1,x
.954b		b5 68		lda $68,x			lda		NSMantissa2,x
.954d		55 69		eor $69,x			eor 		NSMantissa2+1,x
.954f		95 68		sta $68,x			sta 	NSMantissa2,x
.9551		b5 70		lda $70,x			lda		NSMantissa3,x
.9553		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9555		95 70		sta $70,x			sta 	NSMantissa3,x
.9557		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9559		60		rts				rts
.955a						WordIndirect:
.955a		fa		plx				plx
.955b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.955d		15 51		ora $51,x			ora 	NSStatus+1,x
.955f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9560		0a		asl a				asl 	a
.9561		10 05		bpl $9568			bpl 	_NotRef
.9563		48		pha				pha
.9564		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9567		68		pla				pla
.9568						_NotRef:
.9568		0a		asl a				asl 	a
.9569		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.956b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.956d		15 79		ora $79,x			ora 	NSExponent+1,x
.956f		f0 03		beq $9574			beq 	_IntegerCode 				; if clear, then we have two integers
.9571		4c 02 a2	jmp $a202			jmp 	TypeError 					; anything else, type mismatch.
.9574						_IntegerCode:
.9574		20 7a 94	jsr $947a			jsr 	AddCode 					; add the two values
.9577		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9579		95 50		sta $50,x			sta 	NSStatus,x
.957b		60		rts				rts
.957c						ByteIndirect:
.957c		fa		plx				plx
.957d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.957f		15 51		ora $51,x			ora 	NSStatus+1,x
.9581		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9582		0a		asl a				asl 	a
.9583		10 05		bpl $958a			bpl 	_NotRef
.9585		48		pha				pha
.9586		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9589		68		pla				pla
.958a						_NotRef:
.958a		0a		asl a				asl 	a
.958b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.958d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.958f		15 79		ora $79,x			ora 	NSExponent+1,x
.9591		f0 03		beq $9596			beq 	_IntegerCode 				; if clear, then we have two integers
.9593		4c 02 a2	jmp $a202			jmp 	TypeError 					; anything else, type mismatch.
.9596						_IntegerCode:
.9596		20 7a 94	jsr $947a			jsr 	AddCode 					; add the two values
.9599		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.959b		95 50		sta $50,x			sta 	NSStatus,x
.959d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.959e						ConvertInt16:
.959e		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.95a0		86 60		stx $60				stx 	NSMantissa1
.95a2		64 68		stz $68				stz 	NSMantissa2
.95a4		64 70		stz $70				stz 	NSMantissa3
.95a6		64 50		stz $50				stz 	NSStatus 					; positive integer
.95a8		a2 00		ldx #$00			ldx 	#0 							; stack level
.95aa		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.95ac		80 00		bra $95ae			bra 	ConvertInt32
.95ae						ConvertInt32:
.95ae		5a		phy				phy
.95af		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.95b1		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.95b3		10 08		bpl $95bd			bpl 	_CI32NotNeg
.95b5		48		pha				pha
.95b6		a9 2d		lda #$2d			lda 	#'-'
.95b8		99 27 06	sta $0627,y			sta 	numberBuffer,y
.95bb		c8		iny				iny
.95bc		68		pla				pla
.95bd						_CI32NotNeg:
.95bd		20 cb 95	jsr $95cb			jsr 	_CI32DivideConvert 			; recursive conversion
.95c0		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.95c2		99 27 06	sta $0627,y			sta 	numberBuffer,y
.95c5		7a		ply				ply
.95c6		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.95c8		a9 27		lda #$27			lda 	#numberBuffer & $FF
.95ca		60		rts				rts
.95cb						_CI32DivideConvert:
.95cb		e8		inx				inx 								; write to next slot up
.95cc		20 7c a0	jsr $a07c			jsr 	NSMSetByte 		 			; write the base out.
.95cf		ca		dex				dex
.95d0		20 f9 92	jsr $92f9			jsr 	Int32Divide 				; divide
.95d3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.95d5		48		pha				pha
.95d6		20 b6 92	jsr $92b6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.95d9		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; is it zero ?
.95dc		f0 05		beq $95e3			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.95de		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.95e0		20 cb 95	jsr $95cb			jsr 	_CI32DivideConvert 			; and recusrively call.
.95e3						_CI32NoRecurse:
.95e3		68		pla				pla 								; remainder
.95e4		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.95e6		90 02		bcc $95ea			bcc 	_CI32NotHex
.95e8		69 26		adc #$26			adc 	#6+32
.95ea						_CI32NotHex:
.95ea		69 30		adc #$30			adc 	#48
.95ec		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.95ef		c8		iny				iny
.95f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.95f1						PrecedenceLevel:
>95f1		04					.byte	 4	; $00 <<
>95f2		02					.byte	 2	; $01 <=
>95f3		02					.byte	 2	; $02 <>
>95f4		00					.byte	 0	; $03 !!3
>95f5		00					.byte	 0	; $04 ><
>95f6		02					.byte	 2	; $05 >=
>95f7		04					.byte	 4	; $06 >>
>95f8		00					.byte	 0	; $07 !!7
>95f9		00					.byte	 0	; $08 !!8
>95fa		00					.byte	 0	; $09 !!9
>95fb		00					.byte	 0	; $0a !!10
>95fc		00					.byte	 0	; $0b !!11
>95fd		00					.byte	 0	; $0c !!12
>95fe		00					.byte	 0	; $0d !!13
>95ff		00					.byte	 0	; $0e !!14
>9600		00					.byte	 0	; $0f !!15
>9601		00					.byte	 0	; $10 @
>9602		00					.byte	 0	; $11 !!17
>9603		00					.byte	 0	; $12 !!18
>9604		00					.byte	 0	; $13 [
>9605		04					.byte	 4	; $14 \
>9606		00					.byte	 0	; $15 ]
>9607		01					.byte	 1	; $16 ^
>9608		00					.byte	 0	; $17 _
>9609		00					.byte	 0	; $18 `
>960a		00					.byte	 0	; $19 !!25
>960b		00					.byte	 0	; $1a !!26
>960c		00					.byte	 0	; $1b {
>960d		01					.byte	 1	; $1c |
>960e		00					.byte	 0	; $1d }
>960f		00					.byte	 0	; $1e ~
>9610		00					.byte	 0	; $1f [7m<7F>[m
>9611		00					.byte	 0	; $20
>9612		05					.byte	 5	; $21 !
>9613		00					.byte	 0	; $22 "
>9614		00					.byte	 0	; $23 #
>9615		05					.byte	 5	; $24 $
>9616		04					.byte	 4	; $25 %
>9617		01					.byte	 1	; $26 &
>9618		00					.byte	 0	; $27 '
>9619		00					.byte	 0	; $28 (
>961a		00					.byte	 0	; $29 )
>961b		04					.byte	 4	; $2a *
>961c		03					.byte	 3	; $2b +
>961d		00					.byte	 0	; $2c ,
>961e		03					.byte	 3	; $2d -
>961f		00					.byte	 0	; $2e .
>9620		04					.byte	 4	; $2f /
>9621		00					.byte	 0	; $30 0
>9622		00					.byte	 0	; $31 1
>9623		00					.byte	 0	; $32 2
>9624		00					.byte	 0	; $33 3
>9625		00					.byte	 0	; $34 4
>9626		00					.byte	 0	; $35 5
>9627		00					.byte	 0	; $36 6
>9628		00					.byte	 0	; $37 7
>9629		00					.byte	 0	; $38 8
>962a		00					.byte	 0	; $39 9
>962b		00					.byte	 0	; $3a :
>962c		00					.byte	 0	; $3b ;
>962d		02					.byte	 2	; $3c <
>962e		02					.byte	 2	; $3d =
>962f		02					.byte	 2	; $3e >
>9630		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9631						EvaluateExpressionAt0:
.9631		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9633						EvaluateExpression:
.9633		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9635						EvaluateExpressionAtPrecedence:
.9635		48		pha				pha 								; save precedence level
.9636		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm 				; evaluate term into level X.
.9639		68		pla				pla 								; restore precedence level.
.963a						_EXPRLoop:
.963a		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.963c		b1 30		lda ($30),y			lda 	(codePtr),y
.963e		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9640		b0 25		bcs $9667			bcs 	_EXPRExit
.9642		da		phx				phx 								; read the operator precedence
.9643		aa		tax				tax
.9644		bd f1 95	lda $95f1,x			lda 	PrecedenceLevel,x
.9647		fa		plx				plx
.9648		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.964a		f0 1b		beq $9667			beq 	_EXPRExit
.964c		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.964e		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9650		c5 37		cmp $37				cmp 	zTemp0+1
.9652		b0 13		bcs $9667			bcs		_EXPRExit 					; if current >= operator exit
.9654		48		pha				pha 								; save current precedence.
.9655		b1 30		lda ($30),y			lda 	(codePtr),y
.9657		c8		iny				iny
.9658		48		pha				pha
.9659		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.965b		e8		inx				inx 								; work out the right hand side.
.965c		20 35 96	jsr $9635			jsr 	EvaluateExpressionAtPrecedence
.965f		ca		dex				dex
.9660		68		pla				pla 								; get operator, call the code.
.9661		20 6a 96	jsr $966a			jsr 	_EXPRCaller
.9664		68		pla				pla 								; restore precedence level
.9665		80 d3		bra $963a			bra 	_EXPRLoop 					; and go round.
.9667						_EXPRExit:
.9667		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9669		60		rts				rts
.966a						_EXPRCaller:
.966a		da		phx				phx 								; save on stack, first thing is to restore it
.966b		0a		asl a				asl 	a 							; double so can use vectors into X
.966c		aa		tax				tax
.966d		7c 9e 8d	jmp ($8d9e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9670						FloatingPointAdd:
.9670		20 e6 97	jsr $97e6			jsr 	FloatPrepare 				; prepare for floats
.9673		80 09		bra $967e			bra 	FloatAdd
.9675						FloatingPointSub:
.9675		20 e6 97	jsr $97e6			jsr 	FloatPrepare 				; prepare for floats
.9678						FloatSubtract:
.9678		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.967a		49 80		eor #$80			eor 	#$80
.967c		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.967e						FloatAdd:
.967e		48		pha				pha
.967f		5a		phy				phy
.9680		20 f5 97	jsr $97f5			jsr 	NSNormalise 				; normalise S[X]
.9683		f0 51		beq $96d6			beq 	_FAReturn1
.9685		e8		inx				inx 								; normalise S[X+1]
.9686		20 f5 97	jsr $97f5			jsr 	NSNormalise
.9689		ca		dex				dex
.968a		c9 00		cmp #$00			cmp 	#0
.968c		f0 60		beq $96ee			beq 	_FAExit 					; if so, just return A
.968e		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9690		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9692		f0 18		beq $96ac			beq 	_FAExponentsEqual
.9694		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9696		a8		tay				tay
.9697		38		sec				sec 								; do a signed comparison of the exponents.
.9698		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.969a		50 02		bvc $969e			bvc 	_FANoSignedChange
.969c		49 80		eor #$80			eor 	#$80
.969e						_FANoSignedChange:
.969e		29 80		and #$80			and 	#$80
.96a0		10 02		bpl $96a4			bpl 	_FAHaveMax
.96a2		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.96a4						_FAHaveMax:
.96a4		20 f1 96	jsr $96f1			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.96a7		e8		inx				inx
.96a8		20 f1 96	jsr $96f1			jsr 	_FAShiftToExponent
.96ab		ca		dex				dex
.96ac						_FAExponentsEqual:
.96ac		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.96ae		55 51		eor $51,x			eor 	NSStatus+1,x
.96b0		30 0e		bmi $96c0			bmi 	_FADifferentSigns
.96b2		20 29 94	jsr $9429			jsr 	AddTopTwoStack 				; do the add of the mantissae
.96b5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.96b7		10 35		bpl $96ee			bpl 	_FAExit 					; if no, we are done.
.96b9		20 93 a0	jsr $a093			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.96bc		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.96be		80 2e		bra $96ee			bra 	_FAExit
.96c0						_FADifferentSigns:
.96c0		20 43 94	jsr $9443			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.96c3		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.96c5		10 06		bpl $96cd			bpl 	_FACheckZero 				; if no, check for -0
.96c7		20 3c a0	jsr $a03c			jsr 	NSMNegate 					; netate result
.96ca		20 43 a0	jsr $a043			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.96cd						_FACheckZero:
.96cd		20 9c a0	jsr $a09c			jsr 	NSMIsZero	 				; check for -0
.96d0		d0 1c		bne $96ee			bne 	_FAExit
.96d2		74 50		stz $50,x			stz 	NSStatus,x
.96d4		80 18		bra $96ee			bra 	_FAExit
.96d6						_FAReturn1:
.96d6		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.96d8		95 58		sta $58,x			sta 	NSMantissa0,x
.96da		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96dc		95 60		sta $60,x			sta 	NSMantissa1,x
.96de		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.96e0		95 68		sta $68,x			sta 	NSMantissa2,x
.96e2		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.96e4		95 70		sta $70,x			sta 	NSMantissa3,x
.96e6		b5 79		lda $79,x			lda 	NSExponent+1,x
.96e8		95 78		sta $78,x			sta 	NSExponent,x
.96ea		b5 51		lda $51,x			lda 	NSStatus+1,x
.96ec		95 50		sta $50,x			sta 	NSStatus,x
.96ee						_FAExit:
.96ee		7a		ply				ply
.96ef		68		pla				pla
.96f0		60		rts				rts
.96f1						_FAShiftToExponent:
.96f1						_FAShiftToExponent2:
.96f1		98		tya				tya 								; compare Y to exponent
.96f2		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.96f4		f0 07		beq $96fd			beq 	_FASEExit 					; exit if so.
.96f6		20 93 a0	jsr $a093			jsr 	NSMShiftRight	 			; shift the mantissa right
.96f9		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.96fb		80 f4		bra $96f1			bra 	_FAShiftToExponent2
.96fd						_FASEExit:
.96fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.96fe						CompareFloat:
.96fe		20 78 96	jsr $9678			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9701		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9703		29 f8		and #$f8			and 	#$F8
.9705		15 68		ora $68,x			ora 	NSMantissa2,x
.9707		15 70		ora $70,x			ora 	NSMantissa3,x
.9709		f0 08		beq $9713			beq 	_FCExit 					; zero, so approximately identical
.970b		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.970d		34 50		bit $50,x			bit 	NSStatus,x
.970f		10 02		bpl $9713			bpl 	_FCExit
.9711						_FCNegative:
.9711		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9713						_FCExit:
.9713		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9714						FDivideCommand:
.9714		fa		plx				plx	 								; restore stack position
.9715		20 e6 97	jsr $97e6			jsr 	FloatPrepare 				; prepare for floats
.9718						FloatDivide:
.9718		48		pha				pha
.9719		e8		inx				inx
.971a		20 f5 97	jsr $97f5			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.971d		ca		dex				dex
.971e		c9 00		cmp #$00			cmp 	#0
.9720		f0 1d		beq $973f			beq 	_FDZero
.9722		20 f5 97	jsr $97f5			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9725		f0 16		beq $973d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9727		20 1a 93	jsr $931a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.972a		20 b6 92	jsr $92b6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.972d		20 f5 97	jsr $97f5			jsr		NSNormalise 				; renormalise
.9730		20 aa 93	jsr $93aa			jsr 	CalculateSign 				; calculate result sign
.9733		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9735		38		sec				sec
.9736		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9738		38		sec				sec
.9739		e9 1e		sbc #$1e			sbc 	#30
.973b		95 78		sta $78,x			sta 	NSExponent,x
.973d						_FDExit:
.973d		68		pla				pla
.973e		60		rts				rts
.973f						_FDZero:
.973f		a9 03		lda #$03		lda	#3
.9741		4c 2f 91	jmp $912f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9744						FloatFractionalPart:
.9744		5a		phy				phy
.9745		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9747		29 7f		and #$7f			and 	#$7F
.9749		95 50		sta $50,x			sta 	NSStatus,x
.974b		20 f5 97	jsr $97f5			jsr 	NSNormalise
.974e		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9750		38		sec				sec
.9751		e9 e0		sbc #$e0			sbc 	#$E0
.9753		90 29		bcc $977e			bcc 	_FFPExit 					; already fractional
.9755		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9757		b0 22		bcs $977b			bcs 	_FFPZero
.9759		a8		tay				tay 								; put count to do in Y
.975a		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.975c		20 80 97	jsr $9780			jsr 	_FFPPartial
.975f		95 70		sta $70,x			sta 	NSMantissa3,x
.9761		b5 68		lda $68,x			lda 	NSMantissa2,x
.9763		20 80 97	jsr $9780			jsr 	_FFPPartial
.9766		95 68		sta $68,x			sta 	NSMantissa2,x
.9768		b5 60		lda $60,x			lda 	NSMantissa1,x
.976a		20 80 97	jsr $9780			jsr 	_FFPPartial
.976d		95 60		sta $60,x			sta 	NSMantissa1,x
.976f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9771		20 80 97	jsr $9780			jsr 	_FFPPartial
.9774		95 58		sta $58,x			sta 	NSMantissa0,x
.9776		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; zeroed check.
.9779		d0 03		bne $977e			bne 	_FFPExit
.977b						_FFPZero:
.977b		20 7a a0	jsr $a07a			jsr 	NSMSetZero
.977e						_FFPExit:
.977e		7a		ply				ply
.977f		60		rts				rts
.9780						_FFPPartial:
.9780		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9782		f0 17		beq $979b			beq 	_FFFPPExit
.9784		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9786		b0 0c		bcs $9794			bcs 	_FFFPPWholeByte
.9788		5a		phy				phy
.9789						_FFFPPLeft:
.9789		0a		asl a				asl 	a
.978a		88		dey				dey
.978b		d0 fc		bne $9789			bne 	_FFFPPLeft
.978d		7a		ply				ply
.978e						_FFFPPRight:
.978e		4a		lsr a				lsr 	a
.978f		88		dey				dey
.9790		d0 fc		bne $978e			bne 	_FFFPPRight
.9792		80 07		bra $979b			bra 	_FFFPPExit
.9794						_FFFPPWholeByte:
.9794		98		tya				tya 								; subtract 8 from count
.9795		38		sec				sec
.9796		e9 08		sbc #$08			sbc 	#8
.9798		a8		tay				tay
.9799		a9 00		lda #$00			lda 	#0 							; and clear all
.979b						_FFFPPExit:
.979b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.979c						FloatIntegerPart:
.979c		48		pha				pha
.979d		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.979f		f0 1d		beq $97be			beq 	_FIPExit 					; if so do nothing
.97a1		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; is it zero ?
.97a4		f0 15		beq $97bb			beq 	_FIPZero 					; if so return zero.
.97a6		20 f5 97	jsr $97f5			jsr 	NSNormalise 				; normalise
.97a9		f0 10		beq $97bb			beq 	_FIPZero 					; normalised to zero, exit zero
.97ab						_FIPShift:
.97ab		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.97ad		10 07		bpl $97b6			bpl 	_FIPCheckZero
.97af		20 93 a0	jsr $a093			jsr 	NSMShiftRight 				; shift mantissa right
.97b2		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.97b4		80 f5		bra $97ab			bra 	_FIPShift
.97b6						_FIPCheckZero:
.97b6		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; avoid -0 problem
.97b9		d0 03		bne $97be			bne 	_FIPExit 					; set to zero if mantissa zero.
.97bb						_FIPZero:
.97bb		20 7a a0	jsr $a07a			jsr 	NSMSetZero
.97be						_FIPExit:
.97be		68		pla				pla
.97bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.97c0						FloatingPointMultiply:
.97c0		20 e6 97	jsr $97e6			jsr 	FloatPrepare 				; prepare for floats
.97c3						FloatMultiply:
.97c3		48		pha				pha
.97c4		20 f5 97	jsr $97f5			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97c7		f0 18		beq $97e1			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.97c9		e8		inx				inx
.97ca		20 f5 97	jsr $97f5			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97cd		ca		dex				dex
.97ce		c9 00		cmp #$00			cmp 	#0
.97d0		f0 0c		beq $97de			beq 	_FDSetZero
.97d2		20 6c 93	jsr $936c			jsr 	MultiplyShort 				; calculate the result.
.97d5		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.97d7		18		clc				clc
.97d8		75 79		adc $79,x			adc 	NSExponent+1,x
.97da		95 78		sta $78,x			sta 	NSExponent,x
.97dc		80 03		bra $97e1			bra 	_FDExit
.97de						_FDSetZero:
.97de		20 7a a0	jsr $a07a			jsr 	NSMSetZero 					; return 0
.97e1						_FDExit:
.97e1		20 f5 97	jsr $97f5			jsr 	NSNormalise 				; normalise the result
.97e4		68		pla				pla
.97e5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.97e6						FloatPrepare:
.97e6		20 f1 98	jsr $98f1			jsr 	DereferenceTopTwo 			; dereference the top two values
.97e9		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.97eb		15 51		ora $51,x			ora 	NSStatus+1,x
.97ed		29 10		and #$10			and 	#NSBIsString
.97ef		d0 01		bne $97f2			bne 	_FDType
.97f1		60		rts				rts
.97f2						_FDType:
.97f2		4c 02 a2	jmp $a202			jmp 	TypeError
.97f5						NSNormalise:
.97f5		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.97f7		29 80		and #$80			and 	#$80
.97f9		09 08		ora #$08			ora 	#NSTFloat
.97fb		95 50		sta $50,x			sta 	NSStatus,x
.97fd		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; if zero exit
.9800		d0 07		bne $9809			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9802		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9804		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9806		a9 00		lda #$00			lda 	#0 							; set Z flag
.9808		60		rts				rts
.9809						_NSNormaliseOptimise:
.9809		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.980b		d0 19		bne $9826			bne 	_NSNormaliseLoop
.980d		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.980f		30 15		bmi $9826			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9811		95 70		sta $70,x			sta 	NSMantissa3,x
.9813		b5 60		lda $60,x			lda 	NSMantissa1,x
.9815		95 68		sta $68,x			sta 	NSMantissa2,x
.9817		b5 58		lda $58,x			lda 	NSMantissa0,x
.9819		95 60		sta $60,x			sta 	NSMantissa1,x
.981b		74 58		stz $58,x			stz 	NSMantissa0,x
.981d		b5 78		lda $78,x			lda 	NSExponent,x
.981f		38		sec				sec
.9820		e9 08		sbc #$08			sbc 	#8
.9822		95 78		sta $78,x			sta 	NSExponent,x
.9824		80 e3		bra $9809			bra 	_NSNormaliseOptimise
.9826						_NSNormaliseLoop:
.9826		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9828		70 07		bvs $9831			bvs 	_NSNExit 					; exit if so with Z flag clear
.982a		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; shift mantissa left
.982d		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.982f		80 f5		bra $9826			bra 	_NSNormaliseLoop
.9831						_NSNExit:
.9831		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9833		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9834						AssignNumber:
.9834		5a		phy				phy
.9835		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9837		85 36		sta $36				sta 	zTemp0
.9839		b5 60		lda $60,x			lda 	NSMantissa1,x
.983b		85 37		sta $37				sta 	zTemp0+1
.983d		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.983f		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9841		95 50		sta $50,x			sta 	NSStatus,x
.9843		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9845		c9 08		cmp #$08			cmp 	#NSTFloat
.9847		f0 24		beq $986d			beq 	_ANFloat
.9849		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.984b		f0 03		beq $9850			beq		_ANNotFloat
.984d		4c fd a1	jmp $a1fd			jmp 	RangeError					; if it is, report an error.
.9850						_ANNotFloat:
.9850		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9852		29 03		and #$03			and 	#3
.9854		d0 05		bne $985b			bne 	_ANByteWord
.9856		20 78 98	jsr $9878			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9859		80 1b		bra $9876			bra 	_ANExit
.985b						_ANByteWord:
.985b		48		pha				pha 								; save count
.985c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.985e		92 36		sta ($36)			sta 	(zTemp0)
.9860		68		pla				pla
.9861		c9 01		cmp #$01			cmp	 	#1
.9863		f0 11		beq $9876			beq 	_ANExit
.9865		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9867		a0 01		ldy #$01			ldy 	#1
.9869		91 36		sta ($36),y			sta 	(zTemp0),y
.986b		80 09		bra $9876			bra 	_ANExit
.986d						_ANFloat:
.986d		20 78 98	jsr $9878			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9870		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9872		a0 04		ldy #$04			ldy 	#4
.9874		91 36		sta ($36),y			sta 	(zTemp0),y
.9876						_ANExit:
.9876		7a		ply				ply
.9877		60		rts				rts
.9878						_ANCopy4PackSign:
.9878		a0 03		ldy #$03			ldy 	#3
.987a		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.987c		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.987e		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9880		91 36		sta ($36),y			sta 	(zTemp0),y
.9882		88		dey				dey
.9883		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9885		91 36		sta ($36),y			sta 	(zTemp0),y
.9887		88		dey				dey
.9888		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.988a		91 36		sta ($36),y			sta 	(zTemp0),y
.988c		88		dey				dey
.988d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.988f		91 36		sta ($36),y			sta 	(zTemp0),y
.9891		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9892						AssignString:
.9892		5a		phy				phy
.9893		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9895		85 38		sta $38				sta 	zTemp1
.9897		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9899		85 39		sta $39				sta 	zTemp1+1
.989b		b5 58		lda $58,x			lda 	NSMantissa0,x
.989d		85 36		sta $36				sta 	zTemp0
.989f		b5 60		lda $60,x			lda 	NSMantissa1,x
.98a1		85 37		sta $37				sta 	zTemp0+1
.98a3		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.98a5		b1 36		lda ($36),y			lda 	(zTemp0),y
.98a7		f0 23		beq $98cc			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.98a9		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.98aa		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.98ac		e9 02		sbc #$02			sbc 	#2
.98ae		85 3c		sta $3c				sta 	zsTemp
.98b0		a0 01		ldy #$01			ldy 	#1
.98b2		b1 36		lda ($36),y			lda 	(zTemp0),y
.98b4		e9 00		sbc #$00			sbc 	#0
.98b6		85 3d		sta $3d				sta 	zsTemp+1
.98b8		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.98ba						_ASGetLength:
.98ba		c8		iny				iny
.98bb		b1 38		lda ($38),y			lda 	(zTemp1),y
.98bd		d0 fb		bne $98ba			bne 	_ASGetLength
.98bf		98		tya				tya 								; is this length <= current length
.98c0		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.98c2		90 1e		bcc $98e2			bcc 	_ASCopyString
.98c4		f0 1c		beq $98e2			beq 	_ASCopyString
.98c6		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.98c8		a0 01		ldy #$01			ldy 	#1
.98ca		91 3c		sta ($3c),y			sta 	(zsTemp),y
.98cc						_ASNewStringRequired:
.98cc		e8		inx				inx 								; concrete the new string.
.98cd		20 cc b1	jsr $b1cc			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.98d0		ca		dex				dex
.98d1		18		clc				clc
.98d2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.98d4		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.98d6		92 36		sta ($36)			sta 	(zTemp0)
.98d8		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.98da		69 00		adc #$00			adc 	#0
.98dc		a0 01		ldy #$01			ldy 	#1
.98de		91 36		sta ($36),y			sta 	(zTemp0),y
.98e0		80 0d		bra $98ef			bra 	_ASExit
.98e2						_ASCopyString:
.98e2		a0 00		ldy #$00			ldy 	#0
.98e4						_ASCopyLoop:
.98e4		b1 38		lda ($38),y			lda 	(zTemp1),y
.98e6		c8		iny				iny
.98e7		c8		iny				iny
.98e8		91 3c		sta ($3c),y			sta 	(zsTemp),y
.98ea		88		dey				dey
.98eb		c9 00		cmp #$00			cmp 	#0
.98ed		d0 f5		bne $98e4			bne 	_ASCopyLoop
.98ef						_ASExit:
.98ef		7a		ply				ply
.98f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.98f1						DereferenceTopTwo:
.98f1		e8		inx				inx
.98f2		20 f6 98	jsr $98f6			jsr 	Dereference 				; deref x+1
.98f5		ca		dex				dex  								; falls through to deref x
.98f6						Dereference:
.98f6		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.98f8		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.98fa		f0 48		beq $9944			beq 	_DRFExit 					; not a reference, so exit.
.98fc		5a		phy				phy
.98fd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.98ff		85 36		sta $36				sta 	zTemp0
.9901		b5 60		lda $60,x			lda 	NSMantissa1,x
.9903		85 37		sta $37				sta 	zTemp0+1
.9905		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9907		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9909		95 58		sta $58,x			sta 	NSMantissa0,x
.990b		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.990d		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.990f		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9911		f0 0e		beq $9921			beq 	_DRFDereferenceTwo
.9913		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9915		f0 2f		beq $9946			beq 	_DRFFull
.9917		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9919		29 03		and #$03			and 	#3
.991b		f0 29		beq $9946			beq 	_DRFFull 					; the whole word
.991d		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.991f		f0 06		beq $9927			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9921						_DRFDereferenceTwo:
.9921		a0 01		ldy #$01			ldy 	#1
.9923		b1 36		lda ($36),y			lda 	(zTemp0),y
.9925		95 60		sta $60,x			sta 	NSMantissa1,x
.9927						_DRFClear23:
.9927		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9929		74 70		stz $70,x			stz 	NSMantissa3,x
.992b		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.992d		29 18		and #$18			and 	#NSBTypeMask
.992f		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9931		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9933		d0 0e		bne $9943			bne 	_DRFNotString
.9935		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9937		15 60		ora $60,x			ora 	NSMantissa1,x
.9939		d0 08		bne $9943			bne 	_DRFNotString
.993b		a9 45		lda #$45			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.993d		95 58		sta $58,x			sta 	NSMantissa0,x
.993f		a9 99		lda #$99			lda 	#_DRFNullString >> 8
.9941		95 60		sta $60,x			sta 	NSMantissa1,x
.9943						_DRFNotString
.9943		7a		ply				ply 								; restore Y and exit
.9944						_DRFExit:
.9944		60		rts				rts
.9945						_DRFNullString:
>9945		00						.byte 	0
.9946						_DRFFull:
.9946		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9948		b1 36		lda ($36),y			lda 	(zTemp0),y
.994a		95 60		sta $60,x			sta 	NSMantissa1,x
.994c		c8		iny				iny
.994d		b1 36		lda ($36),y			lda 	(zTemp0),y
.994f		95 68		sta $68,x			sta 	NSMantissa2,x
.9951		c8		iny				iny
.9952		b1 36		lda ($36),y			lda 	(zTemp0),y
.9954		95 70		sta $70,x			sta 	NSMantissa3,x
.9956		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9958		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.995a		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.995c		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.995e		f0 05		beq $9965			beq 	_DRFNoExponent
.9960		c8		iny				iny 								; if not, read the exponent as well.
.9961		b1 36		lda ($36),y			lda 	(zTemp0),y
.9963		95 78		sta $78,x			sta 	NSExponent,x
.9965						_DRFNoExponent:
.9965		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9967		10 0a		bpl $9973			bpl 	_DRFExit2 					; if not, then exit.
.9969		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.996b		95 70		sta $70,x			sta 	NSMantissa3,x
.996d		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.996f		09 80		ora #$80			ora 	#NSBIsNegative
.9971		95 50		sta $50,x			sta 	NSStatus,x
.9973						_DRFExit2:
.9973		7a		ply				ply
.9974		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9975						EncodeNumberStart:
.9975		38		sec				sec
.9976		80 01		bra $9979			bra 	EncodeNumberContinue+1
.9978						EncodeNumberContinue:
.9978		18		clc				clc
.9979						EncodeNumber:
.9979		08		php				php 								; save reset flag.
.997a		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.997c		f0 12		beq $9990			beq 	_ENIsOkay
.997e		c9 30		cmp #$30			cmp 	#"0"
.9980		90 04		bcc $9986			bcc 	_ENBadNumber
.9982		c9 3a		cmp #$3a			cmp 	#"9"+1
.9984		90 0a		bcc $9990			bcc 	_ENIsOkay
.9986						_ENBadNumber:
.9986		28		plp				plp 								; throw saved reset
.9987		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.998a		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.998c		f0 7b		beq $9a09			beq 	_ENConstructFinal
.998e						_ENFail:
.998e		18		clc				clc 								; not allowed
.998f		60		rts				rts
.9990						_ENIsOkay:
.9990		28		plp				plp 								; are we restarting
.9991		90 15		bcc $99a8			bcc 	_ENNoRestart
.9993						_ENStartEncode:
.9993		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9995		f0 0c		beq $99a3			beq 	_ENFirstDP
.9997		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9999		20 7c a0	jsr $a07c			jsr 	NSMSetByte 					; in single byte mode.
.999c		a9 01		lda #$01			lda 	#ESTA_Low
.999e						_ENExitChange:
.999e		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.99a1		38		sec				sec
.99a2		60		rts				rts
.99a3						_ENFirstDP:
.99a3		20 7a a0	jsr $a07a			jsr 	NSMSetZero 					; clear integer part
.99a6		80 3c		bra $99e4			bra 	_ESTASwitchFloat			; go straight to float and exi
.99a8						_ENNoRestart:
.99a8		48		pha				pha 								; save digit or DP on stack.
.99a9		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.99ac		c9 01		cmp #$01			cmp 	#ESTA_Low
.99ae		f0 09		beq $99b9			beq  	_ESTALowState
.99b0		c9 02		cmp #$02			cmp 	#ESTA_High
.99b2		f0 26		beq $99da			beq 	_ESTAHighState
.99b4		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.99b6		f0 38		beq $99f0			beq 	_ESTADecimalState
>99b8		db						.byte 	$DB 						; causes a break in the emulator
.99b9						_ESTALowState:
.99b9		68		pla				pla 								; get value back
.99ba		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.99bc		f0 26		beq $99e4			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.99be		29 0f		and #$0f			and 	#15 						; make digit
.99c0		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.99c3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.99c5		0a		asl a				asl 	a
.99c6		0a		asl a				asl 	a
.99c7		75 58		adc $58,x			adc 	NSMantissa0,x
.99c9		0a		asl a				asl 	a
.99ca		6d 06 04	adc $0406			adc 	digitTemp
.99cd		95 58		sta $58,x			sta 	NSMantissa0,x
.99cf		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.99d1		90 05		bcc $99d8			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.99d3		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.99d5		8d 05 04	sta $0405			sta 	encodeState
.99d8						_ESTANoSwitch:
.99d8		38		sec				sec
.99d9		60		rts				rts
.99da						_ESTAHighState:
.99da		68		pla				pla 								; get value back
.99db		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.99dd		f0 05		beq $99e4			beq 	_ESTASwitchFloat
.99df		20 3d 9a	jsr $9a3d			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.99e2		38		sec				sec
.99e3		60		rts				rts
.99e4						_ESTASwitchFloat:
.99e4		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.99e7		e8		inx				inx 								; zero the decimal additive.
.99e8		20 7a a0	jsr $a07a			jsr 	NSMSetZero
.99eb		ca		dex				dex
.99ec		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.99ee		80 ae		bra $999e			bra 	_ENExitChange
.99f0						_ESTADecimalState:
.99f0		68		pla				pla 								; digit.
.99f1		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.99f3		f0 99		beq $998e			beq 	_ENFail
.99f5		e8		inx				inx 								; put digit into fractional part of X+1
.99f6		20 3d 9a	jsr $9a3d			jsr 	ESTAShiftDigitIntoMantissa
.99f9		ca		dex				dex
.99fa		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.99fd		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9a00		c9 0b		cmp #$0b			cmp 	#11
.9a02		f0 02		beq $9a06			beq 	_ESTADSFail
.9a04		38		sec				sec
.9a05		60		rts				rts
.9a06						_ESTADSFail:
.9a06		4c fd a1	jmp $a1fd			jmp 	RangeError
.9a09						_ENConstructFinal:
.9a09		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9a0c		f0 2d		beq $9a3b			beq 	_ENCFExit 					; no decimals
.9a0e		5a		phy				phy
.9a0f		0a		asl a				asl 	a 							; x 4 and CLC
.9a10		0a		asl a				asl 	a
.9a11		6d 07 04	adc $0407			adc 	decimalCount
.9a14		a8		tay				tay
.9a15		b9 bc a1	lda $a1bc,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9a18		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9a1a		b9 bd a1	lda $a1bd,y			lda 	DecimalScalarTable-5+1,y
.9a1d		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9a1f		b9 be a1	lda $a1be,y			lda 	DecimalScalarTable-5+2,y
.9a22		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9a24		b9 bf a1	lda $a1bf,y			lda 	DecimalScalarTable-5+3,y
.9a27		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9a29		b9 c0 a1	lda $a1c0,y			lda 	DecimalScalarTable-5+4,y
.9a2c		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9a2e		a9 08		lda #$08			lda 	#NSTFloat
.9a30		95 52		sta $52,x			sta 	NSStatus+2,x
.9a32		7a		ply				ply
.9a33		e8		inx				inx 								; multiply decimal const by decimal scalar
.9a34		20 c3 97	jsr $97c3			jsr 	FloatMultiply
.9a37		ca		dex				dex
.9a38		20 7e 96	jsr $967e			jsr 	FloatAdd 					; add to integer part.
.9a3b						_ENCFExit:
.9a3b		18		clc				clc 								; reject the digit.
.9a3c		60		rts				rts
.9a3d						ESTAShiftDigitIntoMantissa:
.9a3d		29 0f		and #$0f			and 	#15 						; save digit
.9a3f		48		pha				pha
.9a40		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9a42		48		pha				pha
.9a43		b5 68		lda $68,x			lda 	NSMantissa2,x
.9a45		48		pha				pha
.9a46		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a48		48		pha				pha
.9a49		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a4b		48		pha				pha
.9a4c		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; x 2
.9a4f		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; x 4
.9a52		18		clc				clc 								; pop mantissa and add
.9a53		68		pla				pla
.9a54		75 58		adc $58,x			adc 	NSMantissa0,x
.9a56		95 58		sta $58,x			sta 	NSMantissa0,x
.9a58		68		pla				pla
.9a59		75 60		adc $60,x			adc 	NSMantissa1,x
.9a5b		95 60		sta $60,x			sta 	NSMantissa1,x
.9a5d		68		pla				pla
.9a5e		75 68		adc $68,x			adc 	NSMantissa2,x
.9a60		95 68		sta $68,x			sta 	NSMantissa2,x
.9a62		68		pla				pla
.9a63		75 70		adc $70,x			adc 	NSMantissa3,x
.9a65		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9a67		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; x 10
.9a6a		68		pla				pla 								; add digit
.9a6b		18		clc				clc
.9a6c		75 58		adc $58,x			adc 	NSMantissa0,x
.9a6e		95 58		sta $58,x			sta 	NSMantissa0,x
.9a70		90 0a		bcc $9a7c			bcc 	_ESTASDExit
.9a72		f6 60		inc $60,x			inc 	NSMantissa1,x
.9a74		d0 06		bne $9a7c			bne 	_ESTASDExit
.9a76		f6 68		inc $68,x			inc 	NSMantissa2,x
.9a78		d0 02		bne $9a7c			bne 	_ESTASDExit
.9a7a		f6 70		inc $70,x			inc 	NSMantissa3,x
.9a7c						_ESTASDExit:
.9a7c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9a7d						EvaluateTerm:
.9a7d		b1 30		lda ($30),y			lda 	(codePtr),y
.9a7f		30 18		bmi $9a99			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9a81		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9a83		b0 6c		bcs $9af1			bcs 	_ETVariable
.9a85		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9a87		90 6b		bcc $9af4			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9a89		c9 3a		cmp #$3a			cmp 	#'9'+1
.9a8b		b0 67		bcs $9af4			bcs 	_ETPuncUnary
.9a8d		20 75 99	jsr $9975			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9a90						_ETNumber:
.9a90		c8		iny				iny 								; keep encoding until we have the numbers
.9a91		b1 30		lda ($30),y			lda 	(codePtr),y
.9a93		20 78 99	jsr $9978			jsr 	EncodeNumberContinue
.9a96		b0 f8		bcs $9a90			bcs 	_ETNumber 					; go back if accepted.
.9a98		60		rts				rts
.9a99						_ETCheckUnary:
.9a99		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9a9b		f0 3f		beq $9adc			beq 	_ETString
.9a9d		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9a9f		f0 12		beq $9ab3			beq 	_ETHexConstant
.9aa1		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9aa3		90 0b		bcc $9ab0			bcc 	_ETSyntaxError
.9aa5		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9aa7		b0 07		bcs $9ab0			bcs 	_ETSyntaxError
.9aa9		da		phx				phx 								; push X on the stack
.9aaa		0a		asl a				asl 	a 							; put vector x 2 into X
.9aab		aa		tax				tax
.9aac		c8		iny				iny 								; consume unary function token
.9aad		7c 1e 8e	jmp ($8e1e,x)			jmp 	(VectorSet0,x) 				; and do it.
.9ab0						_ETSyntaxError:
.9ab0		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
.9ab3						_ETHexConstant:
.9ab3		c8		iny				iny 								; skip #
.9ab4		c8		iny				iny 								; skip count
.9ab5		20 7a a0	jsr $a07a			jsr 	NSMSetZero 					; clear result
.9ab8						_ETHLoop:
.9ab8		b1 30		lda ($30),y			lda 	(codePtr),y
.9aba		c8		iny				iny 								; and consume
.9abb		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9abd		f0 1c		beq $9adb			beq 	_ETHExit
.9abf		48		pha				pha 								; save on stack.
.9ac0		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; x 2
.9ac3		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; x 4
.9ac6		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; x 8
.9ac9		20 89 a0	jsr $a089			jsr 	NSMShiftLeft 				; x 16
.9acc		68		pla				pla 								; ASCII
.9acd		c9 41		cmp #$41			cmp 	#'A'
.9acf		90 02		bcc $9ad3			bcc 	_ETHNotChar
.9ad1		e9 07		sbc #$07			sbc 	#7
.9ad3						_ETHNotChar:
.9ad3		29 0f		and #$0f			and 	#15 						; digit now
.9ad5		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9ad7		95 58		sta $58,x			sta 	NSMantissa0,x
.9ad9		80 dd		bra $9ab8			bra 	_ETHLoop 					; go round.
.9adb						_ETHExit:
.9adb		60		rts				rts
.9adc						_ETString:
.9adc		c8		iny				iny 								; look at length
.9add		b1 30		lda ($30),y			lda 	(codePtr),y
.9adf		48		pha				pha
.9ae0		c8		iny				iny 								; first character
.9ae1		20 f4 a7	jsr $a7f4			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9ae4		68		pla				pla 								; restore count and save
.9ae5		85 36		sta $36				sta 	zTemp0
.9ae7		98		tya				tya 								; add length to Y to skip it.
.9ae8		18		clc				clc
.9ae9		65 36		adc $36				adc 	zTemp0
.9aeb		a8		tay				tay
.9aec		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9aee		95 50		sta $50,x			sta 	NSStatus,x
.9af0		60		rts				rts
.9af1						_ETVariable:
.9af1		4c 46 9b	jmp $9b46			jmp 	VariableHandler
.9af4						_ETPuncUnary:
.9af4		c8		iny				iny 								; consume the unary character
.9af5		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9af7		f0 2b		beq $9b24			beq 	_ETUnaryNegate
.9af9		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9afb		f0 36		beq $9b33			beq 	_ETDereference
.9afd		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9aff		f0 3e		beq $9b3f			beq 	_ETParenthesis
.9b01		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9b03		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9b05		f0 06		beq $9b0d			beq 	_ETIndirection
.9b07		e6 36		inc $36				inc 	zTemp0
.9b09		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9b0b		d0 a3		bne $9ab0			bne 	_ETSyntaxError
.9b0d						_ETIndirection:
.9b0d		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9b0f		1a		inc a				inc 	a
.9b10		48		pha				pha
.9b11		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm				; evaluate the term
.9b14		20 f6 98	jsr $98f6			jsr 	Dereference 				; dereference it.
.9b17		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9b19		d0 06		bne $9b21			bne 	_ETTypeMismatch
.9b1b		68		pla				pla 								; indirection 1-2
.9b1c		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9b1e		95 50		sta $50,x			sta 	NSStatus,x
.9b20		60		rts				rts
.9b21						_ETTypeMismatch:
.9b21		4c 02 a2	jmp $a202			jmp 	TypeError
.9b24						_ETUnaryNegate:
.9b24		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm				; evaluate the term
.9b27		20 f6 98	jsr $98f6			jsr 	Dereference 				; dereference it.
.9b2a		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9b2c		29 10		and #$10			and 	#NSTString
.9b2e		d0 f1		bne $9b21			bne 	_ETTypeMismatch
.9b30		4c 3c a0	jmp $a03c			jmp 	NSMNegate  					; just toggles the sign bit.
.9b33						_ETDereference:
.9b33		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm				; evaluate the term
.9b36		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9b38		29 20		and #$20			and 	#NSBIsReference
.9b3a		f0 e5		beq $9b21			beq 	_ETTypeMismatch
.9b3c		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9b3e		60		rts				rts
.9b3f						_ETParenthesis:
.9b3f		20 33 96	jsr $9633			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9b42		20 16 91	jsr $9116			jsr 	CheckRightBracket 			; check for )
.9b45		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9b46						VariableHandler:
.9b46		b1 30		lda ($30),y			lda 	(codePtr),y
.9b48		18		clc				clc
.9b49		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9b4b		85 37		sta $37				sta 	zTemp0+1
.9b4d		c8		iny				iny
.9b4e		b1 30		lda ($30),y			lda 	(codePtr),y
.9b50		85 36		sta $36				sta 	zTemp0
.9b52		c8		iny				iny
.9b53		18		clc				clc									; copy variable address+3 to mantissa
.9b54		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9b56		95 58		sta $58,x			sta 	NSMantissa0,x
.9b58		a5 37		lda $37				lda 	zTemp0+1
.9b5a		69 00		adc #$00			adc 	#0
.9b5c		95 60		sta $60,x			sta 	NSMantissa1,x
.9b5e		74 68		stz $68,x			stz 	NSMantissa2,x
.9b60		74 70		stz $70,x			stz 	NSMantissa3,x
.9b62		74 78		stz $78,x			stz 	NSExponent,x
.9b64		5a		phy				phy
.9b65		a0 02		ldy #$02			ldy 	#2 							; read type
.9b67		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b69		7a		ply				ply
.9b6a		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9b6c		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9b6e		95 50		sta $50,x			sta 	NSStatus,x
.9b70		29 04		and #$04			and 	#NSBIsArray
.9b72		d0 01		bne $9b75			bne 	_VHArray
.9b74		60		rts				rts
.9b75						_VHArray:
.9b75		e8		inx				inx
.9b76		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9b79		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9b7b		95 51		sta $51,x			sta 	NSStatus+1,x
.9b7d		b1 30		lda ($30),y			lda 	(codePtr),y
.9b7f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9b81		d0 06		bne $9b89			bne 	_VHNoSecondIndex
.9b83		c8		iny				iny 								; skip the comma
.9b84		e8		inx				inx
.9b85		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9b88		ca		dex				dex
.9b89						_VHNoSecondIndex:
.9b89		ca		dex				dex 								; set X back.
.9b8a		20 16 91	jsr $9116			jsr 	CheckRightBracket 			; and check the right bracket.
.9b8d		5a		phy				phy 								; save position
.9b8e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9b90		85 3e		sta $3e				sta 	zaTemp
.9b92		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b94		85 3f		sta $3f				sta 	zaTemp+1
.9b96		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9b98		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b9a		f0 5d		beq $9bf9			beq 	_VHBadArray
.9b9c		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9b9e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ba0		f0 02		beq $9ba4			beq 	_VHHas2Mask
.9ba2		a9 ff		lda #$ff			lda 	#$FF
.9ba4						_VHHas2Mask:
.9ba4		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9ba6		f0 4c		beq $9bf4			beq 	_VHBadIndex
.9ba8		0a		asl a				asl 	a 							; carry will be set if a second index
.9ba9		90 08		bcc $9bb3			bcc 	_VHCheckFirstIndex
.9bab		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9bad		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9baf		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9bb1		90 41		bcc $9bf4			bcc 	_VHBadIndex
.9bb3						_VHCheckFirstIndex:
.9bb3		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9bb5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bb7		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9bb9		90 39		bcc $9bf4			bcc 	_VHBadIndex
.9bbb		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9bbd		64 37		stz $37				stz 	zTemp0+1
.9bbf		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9bc1		30 0e		bmi $9bd1			bmi 	_VHNoMultiply
.9bc3		da		phx				phx
.9bc4		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9bc6		48		pha				pha
.9bc7		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9bc9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bcb		1a		inc a				inc 	a 							; add 1 for zero base
.9bcc		fa		plx				plx
.9bcd		20 25 a0	jsr $a025			jsr 	Multiply8x8 				; calculate -> Z0
.9bd0		fa		plx				plx
.9bd1						_VHNoMultiply:
.9bd1		18		clc				clc
.9bd2		a5 36		lda $36				lda 	zTemp0
.9bd4		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9bd6		85 36		sta $36				sta 	zTemp0
.9bd8		a5 37		lda $37				lda 	zTemp0+1
.9bda		69 00		adc #$00			adc 	#0
.9bdc		85 37		sta $37				sta 	zTemp0+1
.9bde		b5 50		lda $50,x			lda 	NSStatus,x
.9be0		20 b7 85	jsr $85b7			jsr 	ScaleByBaseType
.9be3		18		clc				clc
.9be4		b2 3e		lda ($3e)			lda 	(zaTemp)
.9be6		65 36		adc $36				adc 	zTemp0
.9be8		95 58		sta $58,x			sta 	NSMantissa0,x
.9bea		a0 01		ldy #$01			ldy 	#1
.9bec		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bee		65 37		adc $37				adc 	zTemp0+1
.9bf0		95 60		sta $60,x			sta 	NSMantissa1,x
.9bf2		7a		ply				ply 								; restore position
.9bf3		60		rts				rts
.9bf4						_VHBadIndex:
.9bf4		a9 17		lda #$17		lda	#23
.9bf6		4c 2f 91	jmp $912f		jmp	ErrorHandler
.9bf9						_VHBadArray:
.9bf9		a9 18		lda #$18		lda	#24
.9bfb		4c 2f 91	jmp $912f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9bfe						AbsUnary:
.9bfe		fa		plx				plx 								; restore stack pos
.9bff		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber 				; get a float or int
.9c02		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9c05		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9c07		29 7f		and #$7f			and 	#$7F
.9c09		95 50		sta $50,x			sta 	NSStatus,x
.9c0b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9c0c						AllocUnary:
.9c0c		fa		plx				plx 								; restore stack pos
.9c0d		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger		; get bytes required.
.9c10		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9c13		da		phx				phx 								; save X/Y
.9c14		5a		phy				phy
.9c15		8a		txa				txa 								; copy X into Y
.9c16		a8		tay				tay
.9c17		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9c1a		aa		tax				tax
.9c1b		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9c1e		20 2b 9c	jsr $9c2b			jsr 	AllocateXABytes 			; allocate memory
.9c21		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9c24		8a		txa				txa 	 							; typing is 16 bit integer.
.9c25		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9c28		7a		ply				ply
.9c29		fa		plx				plx
.9c2a		60		rts				rts
.9c2b						AllocateXABytes:
.9c2b		5a		phy				phy
.9c2c		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9c2f		84 36		sty $36				sty 	zTemp0
.9c31		5a		phy				phy
.9c32		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9c35		84 37		sty $37				sty 	zTemp0+1
.9c37		5a		phy				phy
.9c38		18		clc				clc 								; add to low memory pointer
.9c39		6d 0c 04	adc $040c			adc 	lowMemPtr
.9c3c		8d 0c 04	sta $040c			sta 	lowMemPtr
.9c3f		8a		txa				txa
.9c40		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9c43		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9c46		b0 2f		bcs $9c77			bcs 	CISSMemory
.9c48		20 69 9c	jsr $9c69			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9c4b						_ClearMemory:
.9c4b		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9c4e		c5 36		cmp $36				cmp 	zTemp0
.9c50		d0 07		bne $9c59			bne 	_CMClearNext
.9c52		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9c55		c5 37		cmp $37				cmp 	zTemp0+1
.9c57		f0 0c		beq $9c65			beq 	_CMExit
.9c59						_CMClearNext:
.9c59		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9c5b		92 36		sta ($36)			sta 	(zTemp0)
.9c5d		e6 36		inc $36				inc 	zTemp0
.9c5f		d0 ea		bne $9c4b			bne 	_ClearMemory
.9c61		e6 37		inc $37				inc		zTemp0+1
.9c63		80 e6		bra $9c4b			bra 	_ClearMemory
.9c65						_CMExit:
.9c65		fa		plx				plx
.9c66		68		pla				pla
.9c67		7a		ply				ply
.9c68		60		rts				rts
.9c69						CheckIdentifierStringSpace:
.9c69		48		pha				pha
.9c6a		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9c6d		18		clc				clc
.9c6e		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9c70		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9c73		b0 02		bcs $9c77			bcs 	CISSMemory
.9c75		68		pla				pla
.9c76		60		rts				rts
.9c77						CISSMemory:
.9c77		a9 06		lda #$06		lda	#6
.9c79		4c 2f 91	jmp $912f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9c7c						AscUnary:
.9c7c		fa		plx				plx 								; restore stack pos
.9c7d		20 d2 9f	jsr $9fd2			jsr 	EvaluateString 				; get a string
.9c80		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9c82		20 7c a0	jsr $a07c			jsr 	NSMSetByte 					; ASC("") will return zero.
.9c85		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9c88		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9c89						FracUnary:
.9c89		fa		plx				plx 								; restore stack pos
.9c8a		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber 				; get a float or int
.9c8d		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9c90		b5 50		lda $50,x			lda 	NSStatus,x
.9c92		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9c94		f0 04		beq $9c9a			beq 	_IUZero
.9c96		20 44 97	jsr $9744			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9c99		60		rts				rts
.9c9a						_IUZero:
.9c9a		20 7a a0	jsr $a07a			jsr 	NSMSetZero
.9c9d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9c9e						IntUnary:
.9c9e		fa		plx				plx 								; restore stack pos
.9c9f		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber 				; get a float or int
.9ca2		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9ca5		b5 50		lda $50,x			lda 	NSStatus,x
.9ca7		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ca9		f0 03		beq $9cae			beq 	_IUExit
.9cab		20 9c 97	jsr $979c			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9cae						_IUExit:
.9cae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9caf						LenUnary:
.9caf		fa		plx				plx 								; restore stack pos
.9cb0		20 d2 9f	jsr $9fd2			jsr 	EvaluateString 				; get a string
.9cb3		5a		phy				phy
.9cb4		a0 00		ldy #$00			ldy 	#0 							; find length
.9cb6						_LenFind:
.9cb6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9cb8		f0 06		beq $9cc0			beq 	_LenExit
.9cba		c8		iny				iny
.9cbb		d0 f9		bne $9cb6			bne 	_LenFind
.9cbd		4c fd a1	jmp $a1fd			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9cc0						_LenExit:
.9cc0		98		tya				tya		 							; return length
.9cc1		20 7c a0	jsr $a07c			jsr 	NSMSetByte
.9cc4		7a		ply				ply
.9cc5		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9cc8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9cc9						Unary_Min:
.9cc9		a9 01		lda #$01			lda 	#1
.9ccb		80 02		bra $9ccf			bra 	UnaryMinMaxMain
.9ccd						Unary_Max:
.9ccd		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9ccf						UnaryMinMaxMain:
.9ccf		fa		plx				plx 								; get index on number stack
.9cd0		48		pha				pha 								; save comparator
.9cd1		20 bf 9f	jsr $9fbf			jsr 	EvaluateValue 				; get the first value.
.9cd4						_UMMMLoop:
.9cd4		b1 30		lda ($30),y			lda 	(codePtr),y
.9cd6		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9cd8		f0 22		beq $9cfc			beq 	_UMMMDone
.9cda		20 1e 91	jsr $911e			jsr 	CheckComma 					; must be a comma
.9cdd		e8		inx				inx
.9cde		20 bf 9f	jsr $9fbf			jsr 	EvaluateValue
.9ce1		ca		dex				dex
.9ce2		20 5d a0	jsr $a05d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9ce5		e8		inx				inx
.9ce6		20 5d a0	jsr $a05d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9ce9		e8		inx				inx
.9cea		20 e6 91	jsr $91e6			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9ced		ca		dex				dex
.9cee		ca		dex				dex
.9cef		85 36		sta $36				sta 	zTemp0 						; save required result
.9cf1		68		pla				pla 								; get and save comparator
.9cf2		48		pha				pha
.9cf3		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9cf5		d0 dd		bne $9cd4			bne 	_UMMMLoop
.9cf7		20 ff 9c	jsr $9cff			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9cfa		80 d8		bra $9cd4			bra 	_UMMMLoop
.9cfc						_UMMMDone:
.9cfc		68		pla				pla 								; throw the comparator
.9cfd		c8		iny				iny 								; skip )
.9cfe		60		rts				rts
.9cff						ExpCopyAboveDown:
.9cff		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d01		95 50		sta $50,x			sta 	NSStatus,x
.9d03		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d05		95 78		sta $78,x			sta 	NSExponent,x
.9d07		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d09		95 58		sta $58,x			sta 	NSMantissa0,x
.9d0b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d0d		95 60		sta $60,x			sta 	NSMantissa1,x
.9d0f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d11		95 68		sta $68,x			sta 	NSMantissa2,x
.9d13		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d15		95 70		sta $70,x			sta 	NSMantissa3,x
.9d17		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9d18						Unary_Not:
.9d18		fa		plx				plx
.9d19		20 e7 9f	jsr $9fe7			jsr 	EvaluateInteger 			; get integer
.9d1c		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9d1f		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; zero mantissa ?
.9d22		f0 04		beq $9d28			beq 	_NotZero
.9d24		20 7a a0	jsr $a07a			jsr 	NSMSetZero
.9d27		60		rts				rts
.9d28						_NotZero:
.9d28		4c 9c 91	jmp $919c			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9d2b						PeekByteUnary:
.9d2b		a9 01		lda #$01			lda 	#1
.9d2d		80 0a		bra $9d39			bra 	PeekUnary
.9d2f						PeekWUnary:
.9d2f		a9 02		lda #$02			lda 	#2
.9d31		80 06		bra $9d39			bra 	PeekUnary
.9d33						PeekLUnary:
.9d33		a9 03		lda #$03			lda 	#3
.9d35		80 02		bra $9d39			bra 	PeekUnary
.9d37						PeekDUnary:
.9d37		a9 04		lda #$04			lda 	#4
.9d39						PeekUnary:
.9d39		fa		plx				plx 								; restore position.
.9d3a		48		pha				pha 								; save count to copy on stack
.9d3b		20 fa 9f	jsr $9ffa			jsr		Evaluate16BitInteger 		; address as constant.
.9d3e		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9d41		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9d43		85 36		sta $36				sta 	zTemp0
.9d45		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d47		85 37		sta $37				sta 	zTemp0+1
.9d49		20 7a a0	jsr $a07a			jsr 	NSMSetZero 					; clear the result to zero.
.9d4c		68		pla				pla 								; count in zTemp2
.9d4d		85 3a		sta $3a				sta 	zTemp2
.9d4f		da		phx				phx 								; save stack position and offset of read
.9d50		5a		phy				phy
.9d51		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9d53						_PULoop:
.9d53		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9d55		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9d57		c8		iny				iny 								; next byte to write
.9d58		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9d59		18		clc				clc
.9d5a		69 08		adc #$08			adc 	#MathStackSize
.9d5c		aa		tax				tax
.9d5d		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9d5f		d0 f2		bne $9d53			bne 	_PULoop
.9d61		7a		ply				ply 								; restore stack/code pos and exit.
.9d62		fa		plx				plx
.9d63		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9d64						Unary_Random:
.9d64		fa		plx				plx
.9d65		20 d6 9d	jsr $9dd6			jsr 	Random32Bit 				; get a random number
.9d68		20 bf 9d	jsr $9dbf			jsr 	URCopyToMantissa  			; put in mantissa
.9d6b		b1 30		lda ($30),y			lda 	(codePtr),y
.9d6d		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9d6f		f0 08		beq $9d79			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9d71		e8		inx				inx
.9d72		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d75		ca		dex				dex
.9d76		20 ee 92	jsr $92ee			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9d79						_URNoModulus:
.9d79		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9d7b		74 78		stz $78,x			stz 	NSExponent,x
.9d7d		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9d80		60		rts				rts
.9d81						Unary_Rnd:
.9d81		fa		plx				plx
.9d82		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber 				; number to use.
.9d85		20 16 91	jsr $9116			jsr 	CheckRightBracket 			; closing bracket
.9d88		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d8b		f0 26		beq $9db3			beq 	_URCopySeed
.9d8d		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d8f		10 1f		bpl $9db0			bpl 	_URDontSeed
.9d91		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d93		49 17		eor #$17			eor 	#$17
.9d95		8d 08 04	sta $0408			sta 	randomSeed+0
.9d98		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d9a		49 a5		eor #$a5			eor 	#$A5
.9d9c		8d 09 04	sta $0409			sta 	randomSeed+1
.9d9f		b5 68		lda $68,x			lda 	NSMantissa2,x
.9da1		49 c2		eor #$c2			eor 	#$C2
.9da3		8d 0a 04	sta $040a			sta 	randomSeed+2
.9da6		b5 70		lda $70,x			lda 	NSMantissa3,x
.9da8		49 9d		eor #$9d			eor 	#$9D
.9daa		8d 0b 04	sta $040b			sta 	randomSeed+3
.9dad		20 d6 9d	jsr $9dd6			jsr 	Random32Bit
.9db0						_URDontSeed:
.9db0		20 d6 9d	jsr $9dd6			jsr 	Random32Bit 				; generate a number
.9db3						_URCopySeed:
.9db3		20 bf 9d	jsr $9dbf			jsr 	URCopyToMantissa 			; copy into mantissa
.9db6		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9db8		95 78		sta $78,x			sta 	NSExponent,x
.9dba		a9 08		lda #$08			lda 	#NSTFloat
.9dbc		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9dbe		60		rts				rts
.9dbf						URCopyToMantissa:
.9dbf		ad 08 04	lda $0408			lda 	randomSeed+0
.9dc2		95 58		sta $58,x			sta 	NSMantissa0,x
.9dc4		ad 09 04	lda $0409			lda 	randomSeed+1
.9dc7		95 60		sta $60,x			sta 	NSMantissa1,x
.9dc9		ad 0a 04	lda $040a			lda 	randomSeed+2
.9dcc		95 68		sta $68,x			sta 	NSMantissa2,x
.9dce		ad 0b 04	lda $040b			lda 	randomSeed+3
.9dd1		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9dd3		95 70		sta $70,x			sta 	NSMantissa3,x
.9dd5		60		rts				rts
.9dd6						Random32Bit:
.9dd6		5a		phy				phy
.9dd7		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9dd9		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9ddc		d0 03		bne $9de1			bne 	_Random1
.9dde		a8		tay				tay 								; if so do it 256 times
.9ddf		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9de1						_Random1:
.9de1		0a		asl a				asl 	a 							; LSFR RNG
.9de2		2e 09 04	rol $0409			rol 	randomSeed+1
.9de5		2e 0a 04	rol $040a			rol 	randomSeed+2
.9de8		2e 0b 04	rol $040b			rol 	randomSeed+3
.9deb		90 02		bcc $9def			bcc 	_Random2
.9ded		49 c5		eor #$c5			eor 	#$C5
.9def						_Random2:
.9def		88		dey				dey
.9df0		d0 ef		bne $9de1			bne 	_Random1
.9df2		8d 08 04	sta $0408			sta 	randomSeed+0
.9df5		7a		ply				ply
.9df6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9df7						SgnUnary:
.9df7		fa		plx				plx 								; restore stack pos
.9df8		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber 				; get a float or int
.9dfb		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9dfe		20 9c a0	jsr $a09c			jsr 	NSMIsZero 					; if zero
.9e01		f0 0e		beq $9e11			beq 	_SGZero  					; return Int Zero
.9e03		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9e05		48		pha				pha
.9e06		a9 01		lda #$01			lda 	#1 							; set to 1
.9e08		20 7c a0	jsr $a07c			jsr 	NSMSetByte
.9e0b		68		pla				pla
.9e0c		29 80		and #$80			and		#$80 						; copy the sign byte out
.9e0e		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9e10		60		rts				rts
.9e11		20 7a a0	jsr $a07a	_SGZero:jsr 	NSMSetZero
.9e14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9e15						ValUnary:
.9e15		fa		plx				plx 								; restore stack pos
.9e16		20 2b 9e	jsr $9e2b			jsr 	ValMainCode 				; do the main val() code
.9e19		b0 01		bcs $9e1c			bcs 	_VUError 					; couldn't convert
.9e1b		60		rts				rts
.9e1c						_VUError:
.9e1c		4c 02 a2	jmp $a202			jmp 	TypeError
.9e1f						IsValUnary:
.9e1f		fa		plx				plx 								; restore stack pos
.9e20		20 2b 9e	jsr $9e2b			jsr 	ValMainCode 				; do the main val() code
.9e23		b0 03		bcs $9e28			bcs 	_VUBad
.9e25		4c 9c 91	jmp $919c			jmp 	ReturnTrue
.9e28						_VUBad:
.9e28		4c a7 91	jmp $91a7			jmp 	ReturnFalse
.9e2b						ValMainCode:
.9e2b		20 d2 9f	jsr $9fd2			jsr 	EvaluateString 				; get a string
.9e2e		20 16 91	jsr $9116			jsr 	CheckRightBracket 			; check right bracket present
.9e31						ValEvaluateZTemp0:
.9e31		5a		phy				phy
.9e32		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9e34		f0 17		beq $9e4d			beq 	_VMCFail2
.9e36		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9e38		48		pha				pha 								; save first character
.9e39		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9e3b		d0 01		bne $9e3e			bne 	_VMCStart
.9e3d		c8		iny				iny 								; skip over -
.9e3e						_VMCStart:
.9e3e		38		sec				sec 								; initialise first time round.
.9e3f						_VMCNext:
.9e3f		c8		iny				iny 								; pre-increment
.9e40		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9e42		f0 0c		beq $9e50			beq 	_VMCSuccess 				; successful.
.9e44		20 79 99	jsr $9979			jsr 	EncodeNumber 				; send it to the number-builder
.9e47		90 03		bcc $9e4c			bcc 	_VMCFail 					; if failed, give up.
.9e49		18		clc				clc 								; next time round, countinue
.9e4a		80 f3		bra $9e3f			bra 	_VMCNext
.9e4c						_VMCFail:
.9e4c		68		pla				pla
.9e4d						_VMCFail2:
.9e4d		7a		ply				ply
.9e4e		38		sec				sec
.9e4f		60		rts				rts
.9e50						_VMCSuccess:
.9e50		a9 00		lda #$00			lda 	#0 							; construct final
.9e52		20 79 99	jsr $9979			jsr 	EncodeNumber 				; by sending a duff value.
.9e55		68		pla				pla 								; if it was -ve
.9e56		c9 2d		cmp #$2d			cmp 	#"-"
.9e58		d0 03		bne $9e5d			bne 	_VMCNotNegative
.9e5a		20 3c a0	jsr $a03c			jsr		NSMNegate 					; negate it.
.9e5d						_VMCNotNegative:
.9e5d		7a		ply				ply
.9e5e		18		clc				clc
.9e5f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9e60						ChrUnary:
.9e60		fa		plx				plx 								; restore stack pos
.9e61		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9e64		48		pha				pha
.9e65		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9e68		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9e6a		20 49 b2	jsr $b249			jsr 	StringTempAllocate
.9e6d		68		pla				pla 								; write number to it
.9e6e		20 82 b2	jsr $b282			jsr 	StringTempWrite
.9e71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9e72						SpcUnary:
.9e72		fa		plx				plx 								; restore stack pos
.9e73		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger			; get value
.9e76		5a		phy				phy
.9e77		48		pha				pha 								; save count
.9e78		20 49 b2	jsr $b249			jsr 	StringTempAllocate
.9e7b		7a		ply				ply 								; to do count in Y
.9e7c						_SpcLoop:
.9e7c		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9e7e		f0 08		beq $9e88			beq 	_SpcExit
.9e80		a9 20		lda #$20			lda 	#32
.9e82		20 82 b2	jsr $b282			jsr 	StringTempWrite
.9e85		88		dey				dey
.9e86		80 f4		bra $9e7c			bra 	_SpcLoop
.9e88						_SpcExit:
.9e88		7a		ply				ply
.9e89		20 16 91	jsr $9116			jsr 	CheckRightBracket
.9e8c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e8d						Unary_Str:
.9e8d		fa		plx				plx
.9e8e		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber  			; get number
.9e91		20 16 91	jsr $9116			jsr 	CheckRightBracket 			; closing bracket
.9e94		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9e96		20 af 9e	jsr $9eaf			jsr 	ConvertNumberToString 		; do the conversion.
.9e99		a9 21		lda #$21			lda		#33 						; create buffer
.9e9b		20 49 b2	jsr $b249			jsr 	StringTempAllocate 			; allocate memory
.9e9e		da		phx				phx  								; copy the converted string into the buffer.
.9e9f		a2 00		ldx #$00			ldx 	#0
.9ea1						_USCopy:
.9ea1		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9ea4		20 82 b2	jsr $b282			jsr 	StringTempWrite
.9ea7		e8		inx				inx
.9ea8		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9eab		d0 f4		bne $9ea1			bne 	_USCopy
.9ead		fa		plx				plx
.9eae		60		rts				rts
.9eaf						ConvertNumberToString:
.9eaf		5a		phy				phy 								; save code position
.9eb0		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9eb3		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9eb6		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9eb8		10 09		bpl $9ec3			bpl 	_CNTSNotNegative
.9eba		29 7f		and #$7f			and 	#$7F 						; make +ve
.9ebc		95 50		sta $50,x			sta 	NSStatus,x
.9ebe		a9 2d		lda #$2d			lda 	#"-"
.9ec0		20 24 9f	jsr $9f24			jsr 	WriteDecimalBuffer
.9ec3						_CNTSNotNegative:
.9ec3		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9ec5		f0 12		beq $9ed9			beq 	_CNTSNotFloat
.9ec7		e8		inx				inx 								; round up so we don't get too many 6.999999
.9ec8		a9 01		lda #$01			lda 	#1
.9eca		20 7c a0	jsr $a07c			jsr 	NSMSetByte
.9ecd		ca		dex				dex
.9ece		b5 78		lda $78,x			lda		NSExponent,x
.9ed0		95 79		sta $79,x			sta 	NSExponent+1,x
.9ed2		a9 08		lda #$08			lda 	#NSTFloat
.9ed4		95 51		sta $51,x			sta 	NSStatus+1,x
.9ed6		20 7e 96	jsr $967e			jsr 	FloatAdd
.9ed9						_CNTSNotFloat:
.9ed9		20 06 9f	jsr $9f06			jsr 	MakePlusTwoString 			; do the integer part.
.9edc		20 44 97	jsr $9744			jsr 	FloatFractionalPart 		; get the fractional part
.9edf		20 f5 97	jsr $97f5			jsr 	NSNormalise					; normalise , exit if zero
.9ee2		f0 20		beq $9f04			beq 	_CNTSExit
.9ee4		a9 2e		lda #$2e			lda 	#"."
.9ee6		20 24 9f	jsr $9f24			jsr 	WriteDecimalBuffer 			; write decimal place
.9ee9						_CNTSDecimal:
.9ee9		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9eec		30 16		bmi $9f04			bmi 	_CNTSExit
.9eee		e8		inx				inx 								; x 10.0
.9eef		a9 0a		lda #$0a			lda 	#10
.9ef1		20 7c a0	jsr $a07c			jsr 	NSMSetByte
.9ef4		a9 08		lda #$08			lda 	#NSTFloat
.9ef6		95 50		sta $50,x			sta 	NSStatus,x
.9ef8		ca		dex				dex
.9ef9		20 c3 97	jsr $97c3			jsr 	FloatMultiply
.9efc		20 06 9f	jsr $9f06			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9eff		20 44 97	jsr $9744			jsr 	FloatFractionalPart 		; get the fractional part
.9f02		80 e5		bra $9ee9			bra 	_CNTSDecimal 				; keep going.
.9f04						_CNTSExit:
.9f04		7a		ply				ply
.9f05		60		rts				rts
.9f06						MakePlusTwoString:
.9f06		da		phx				phx
.9f07		20 5d a0	jsr $a05d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9f0a		e8		inx				inx 								; access it
.9f0b		e8		inx				inx
.9f0c		20 9c 97	jsr $979c			jsr 	FloatIntegerPart 			; make it an integer
.9f0f		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9f11		20 ae 95	jsr $95ae			jsr 	ConvertInt32
.9f14		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9f16						_MPTSCopy:
.9f16		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9f19		20 24 9f	jsr $9f24			jsr 	WriteDecimalBuffer
.9f1c		e8		inx				inx
.9f1d		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9f20		d0 f4		bne $9f16			bne 	_MPTSCopy
.9f22		fa		plx				plx
.9f23		60		rts				rts
.9f24						WriteDecimalBuffer:
.9f24		da		phx				phx
.9f25		ae 15 04	ldx $0415			ldx 	dbOffset
.9f28		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9f2b		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9f2e		ee 15 04	inc $0415			inc 	dbOffset
.9f31		fa		plx				plx
.9f32		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9f33						Unary_Left:
.9f33		fa		plx				plx
.9f34		18		clc				clc 								; only one parameter
.9f35		20 98 9f	jsr $9f98			jsr 	SubstringInitial 			; set up.
.9f38		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9f3a		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f3c		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9f3e		80 25		bra $9f65			bra 	SubstringMain
.9f40						Unary_Right:
.9f40		fa		plx				plx
.9f41		18		clc				clc 								; only one parameter
.9f42		20 98 9f	jsr $9f98			jsr 	SubstringInitial 			; set up.
.9f45		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9f47		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f49		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9f4b		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9f4d		b0 02		bcs $9f51			bcs 	_URNotUnderflow
.9f4f		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9f51						_URNotUnderflow:
.9f51		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9f53		80 10		bra $9f65			bra 	SubstringMain
.9f55						Unary_Mid:
.9f55		fa		plx				plx
.9f56		38		sec				sec 								; two parameters
.9f57		20 98 9f	jsr $9f98			jsr 	SubstringInitial 			; set up.
.9f5a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9f5c		f0 04		beq $9f62			beq 	_UMError
.9f5e		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9f60		80 03		bra $9f65			bra 	SubstringMain
.9f62						_UMError:
.9f62		4c 07 a2	jmp $a207			jmp 	ArgumentError
.9f65						SubstringMain:
.9f65		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9f67		d5 78		cmp $78,x			cmp 	NSExponent,x
.9f69		b0 27		bcs $9f92			bcs 	_SSMNull 					; if so, return an empty string.
.9f6b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9f6d		f0 23		beq $9f92			beq 	_SSMNull 					; return empty string.
.9f6f		18		clc				clc 								; add the offset +1 to the address and
.9f70		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9f72		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9f74		85 36		sta $36				sta 	zTemp0
.9f76		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9f78		69 00		adc #$00			adc 	#0
.9f7a		85 37		sta $37				sta 	zTemp0+1
.9f7c						_SSMNoCarry:
.9f7c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f7e		20 49 b2	jsr $b249			jsr 	StringTempAllocate 			; allocate that many characters
.9f81		5a		phy				phy 								; save Y
.9f82		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f84						_SSMCopy:
.9f84		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f86		f0 08		beq $9f90			beq 	_SSMEString 				; no more to copy
.9f88		20 82 b2	jsr $b282			jsr 	StringTempWrite 			; and write it out.
.9f8b		c8		iny				iny
.9f8c		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9f8e		d0 f4		bne $9f84			bne 	_SSMCopy
.9f90						_SSMEString:
.9f90		7a		ply				ply
.9f91						_SSMExit:
.9f91		60		rts				rts
.9f92						_SSMNull:
.9f92		a9 00		lda #$00			lda 	#0
.9f94		20 49 b2	jsr $b249			jsr 	StringTempAllocate
.9f97		60		rts				rts
.9f98						SubstringInitial:
.9f98		da		phx				phx 								; save initial stack position
.9f99		08		php				php 								; save carry on stack indicating 2 parameters
.9f9a		20 d2 9f	jsr $9fd2			jsr 	EvaluateString 				; get a string
.9f9d		5a		phy				phy 								; calculate length to exponent.
.9f9e		a0 ff		ldy #$ff			ldy 	#$FF
.9fa0						_SIFindLength:
.9fa0		c8		iny				iny
.9fa1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fa3		d0 fb		bne $9fa0			bne 	_SIFindLength
.9fa5		98		tya				tya
.9fa6		95 78		sta $78,x			sta 	NSExponent,x
.9fa8		7a		ply				ply
.9fa9		e8		inx				inx
.9faa		20 1e 91	jsr $911e			jsr 	CheckComma 					; comma next
.9fad		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get next parameter
.9fb0		28		plp				plp 								; is it the last parameter ?
.9fb1		90 07		bcc $9fba			bcc 	_SSIExit 					; if so, exit.
.9fb3		e8		inx				inx
.9fb4		20 1e 91	jsr $911e			jsr 	CheckComma 					; comma next
.9fb7		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get last parameter
.9fba						_SSIExit:
.9fba		fa		plx				plx
.9fbb		20 16 91	jsr $9116			jsr 	CheckRightBracket 			; check closing bracket
.9fbe		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9fbf						EvaluateValue:
.9fbf		48		pha				pha
.9fc0		20 33 96	jsr $9633			jsr		EvaluateExpression 			; expression
.9fc3		20 f6 98	jsr $98f6			jsr 	Dereference					; derefernce it
.9fc6		68		pla				pla
.9fc7		60		rts				rts
.9fc8						EvaluateNumber:
.9fc8		20 bf 9f	jsr $9fbf			jsr 	EvaluateValue 				; get a value
.9fcb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9fcd		29 10		and #$10			and 	#NSBIsString
.9fcf		d0 13		bne $9fe4			bne 	HelperTypeError
.9fd1		60		rts				rts
.9fd2						EvaluateString:
.9fd2		20 bf 9f	jsr $9fbf			jsr 	EvaluateValue 				; get a value
.9fd5		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9fd7		29 10		and #$10			and 	#NSBIsString
.9fd9		f0 09		beq $9fe4			beq 	HelperTypeError
.9fdb						CopyAddressToTemp0:
.9fdb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9fdd		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9fdf		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fe1		85 37		sta $37				sta 	zTemp0+1
.9fe3		60		rts				rts
.9fe4						HelperTypeError:
.9fe4		4c 02 a2	jmp $a202			jmp 	TypeError
.9fe7						EvaluateInteger:
.9fe7		20 c8 9f	jsr $9fc8			jsr 	EvaluateNumber
.9fea		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9fec		d0 09		bne $9ff7			bne 	HelperValueError 			; if not, it's a float.
.9fee		60		rts				rts
.9fef						EvaluateUnsignedInteger:
.9fef		20 e7 9f	jsr $9fe7			jsr 	EvaluateInteger 			; check integer is +ve
.9ff2		b5 50		lda $50,x			lda 	NSStatus,x
.9ff4		30 01		bmi $9ff7			bmi 	HelperValueError
.9ff6		60		rts				rts
.9ff7						HelperValueError:
.9ff7		4c 07 a2	jmp $a207			jmp 	ArgumentError
.9ffa						Evaluate16BitInteger:
.9ffa		20 ef 9f	jsr $9fef			jsr	 	EvaluateUnsignedInteger		; get integer
.9ffd		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9fff		15 68		ora $68,x			ora 	NSMantissa2,x
.a001		d0 f4		bne $9ff7			bne 	HelperValueError
.a003		60		rts				rts
.a004						Evaluate16BitIntegerSigned:
.a004		20 e7 9f	jsr $9fe7			jsr	 	EvaluateInteger				; get integer
.a007		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a009		15 68		ora $68,x			ora 	NSMantissa2,x
.a00b		d0 ea		bne $9ff7			bne 	HelperValueError
.a00d		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a00f		10 03		bpl $a014			bpl 	_EISNotSigned
.a011		20 43 a0	jsr $a043			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a014						_EISNotSigned:
.a014		60		rts				rts
.a015						Evaluate8BitInteger:
.a015		20 ef 9f	jsr $9fef			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a018		d0 dd		bne $9ff7			bne 	HelperValueError
.a01a		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a01c		15 68		ora $68,x			ora 	NSMantissa2,x
.a01e		15 60		ora $60,x			ora 	NSMantissa1,x
.a020		d0 d5		bne $9ff7			bne 	HelperValueError
.a022		b5 58		lda $58,x			lda 	NSMantissa0,x
.a024		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a025						Multiply8x8:
.a025		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a026		85 36		sta $36			  	sta 	zTemp0
.a028		86 37		stx $37				stx 	zTemp0+1
.a02a		a9 00		lda #$00			lda 	#0
.a02c		a2 08		ldx #$08			ldx 	#8
.a02e						_M88Loop:
.a02e		90 03		bcc $a033			bcc 	_M88NoAdd
.a030		18		clc				clc
.a031		65 37		adc $37				adc 	zTemp0+1
.a033						_M88NoAdd:
.a033		6a		ror a				ror 	a
.a034		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a036		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a037		d0 f5		bne $a02e			bne 	_M88Loop
.a039		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a03b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a03c						NSMNegate:
.a03c		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a03e		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a040		95 50		sta $50,x			sta 	NSStatus,x
.a042		60		rts				rts
.a043						NSMNegateMantissa:
.a043		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a044		a9 00		lda #$00			lda 	#0
.a046		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a048		95 58		sta $58,x			sta 	NSMantissa0,x
.a04a		a9 00		lda #$00			lda 	#0
.a04c		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a04e		95 60		sta $60,x			sta 	NSMantissa1,x
.a050		a9 00		lda #$00			lda 	#0
.a052		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a054		95 68		sta $68,x			sta 	NSMantissa2,x
.a056		a9 00		lda #$00			lda 	#0
.a058		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a05a		95 70		sta $70,x			sta 	NSMantissa3,x
.a05c		60		rts				rts
.a05d						NSMShiftUpTwo:
.a05d		b5 58		lda $58,x			lda 	NSMantissa0,x
.a05f		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a061		b5 60		lda $60,x			lda 	NSMantissa1,x
.a063		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a065		b5 68		lda $68,x			lda 	NSMantissa2,x
.a067		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a069		b5 70		lda $70,x			lda 	NSMantissa3,x
.a06b		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a06d		b5 78		lda $78,x			lda 	NSExponent,x
.a06f		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a071		b5 50		lda $50,x			lda 	NSStatus,x
.a073		95 52		sta $52,x			sta 	NSStatus+2,x
.a075		60		rts				rts
.a076						NSMSetZeroMantissaOnly:
.a076		a9 00		lda #$00			lda 	#0
.a078		80 06		bra $a080			bra 	NSMSetMantissa
.a07a						NSMSetZero:
.a07a		a9 00		lda #$00			lda 	#0
.a07c						NSMSetByte:
.a07c		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a07e		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a080						NSMSetMantissa:
.a080		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a082		74 60		stz $60,x			stz 	NSMantissa1,x
.a084		74 68		stz $68,x			stz 	NSMantissa2,x
.a086		74 70		stz $70,x			stz 	NSMantissa3,x
.a088		60		rts				rts
.a089						NSMShiftLeft:
.a089		18		clc				clc
.a08a						NSMRotateLeft:
.a08a		36 58		rol $58,x			rol 	NSMantissa0,x
.a08c		36 60		rol $60,x			rol		NSMantissa1,x
.a08e		36 68		rol $68,x			rol		NSMantissa2,x
.a090		36 70		rol $70,x			rol		NSMantissa3,x
.a092		60		rts				rts
.a093						NSMShiftRight:
.a093		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a095		76 68		ror $68,x			ror		NSMantissa2,x
.a097		76 60		ror $60,x			ror		NSMantissa1,x
.a099		76 58		ror $58,x			ror		NSMantissa0,x
.a09b		60		rts				rts
.a09c						NSMIsZero:
.a09c		b5 70		lda $70,x			lda 	NSMantissa3,x
.a09e		15 68		ora $68,x			ora		NSMantissa2,x
.a0a0		15 60		ora $60,x			ora		NSMantissa1,x
.a0a2		15 58		ora $58,x			ora		NSMantissa0,x
.a0a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a0a5						TickHandler:
.a0a5		5a		phy				phy 								; need to preserve Y
.a0a6		20 8f 80	jsr $808f			jsr 	SNDUpdate 					; update sound
.a0a9		7a		ply				ply
.a0aa		60		rts				rts
.065f						LastTick:
>065f								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a0ab						Assemble_ora:
.a0ab		20 f0 80	jsr $80f0		jsr	AssembleGroup1
>a0ae		01					.byte $01
.a0af						Assemble_and:
.a0af		20 f0 80	jsr $80f0		jsr	AssembleGroup1
>a0b2		21					.byte $21
.a0b3						Assemble_eor:
.a0b3		20 f0 80	jsr $80f0		jsr	AssembleGroup1
>a0b6		41					.byte $41
.a0b7						Assemble_adc:
.a0b7		20 f0 80	jsr $80f0		jsr	AssembleGroup1
>a0ba		61					.byte $61
.a0bb						Assemble_sta:
.a0bb		20 f0 80	jsr $80f0		jsr	AssembleGroup1
>a0be		81					.byte $81
.a0bf						Assemble_lda:
.a0bf		20 f0 80	jsr $80f0		jsr	AssembleGroup1
>a0c2		a1					.byte $a1
.a0c3						Assemble_cmp:
.a0c3		20 f0 80	jsr $80f0		jsr	AssembleGroup1
>a0c6		c1					.byte $c1
.a0c7						Assemble_sbc:
.a0c7		20 f0 80	jsr $80f0		jsr	AssembleGroup1
>a0ca		e1					.byte $e1
.a0cb						Assemble_asl:
.a0cb		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0ce		02					.byte $02
>a0cf		75					.byte $75
.a0d0						Assemble_rol:
.a0d0		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0d3		22					.byte $22
>a0d4		75					.byte $75
.a0d5						Assemble_lsr:
.a0d5		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0d8		42					.byte $42
>a0d9		75					.byte $75
.a0da						Assemble_ror:
.a0da		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0dd		62					.byte $62
>a0de		75					.byte $75
.a0df						Assemble_stx:
.a0df		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0e2		82					.byte $82
>a0e3		50					.byte $50
.a0e4						Assemble_ldx:
.a0e4		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0e7		a2					.byte $a2
>a0e8		d0					.byte $d0
.a0e9						Assemble_dec:
.a0e9		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0ec		c2					.byte $c2
>a0ed		55					.byte $55
.a0ee						Assemble_inc:
.a0ee		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0f1		e2					.byte $e2
>a0f2		55					.byte $55
.a0f3						Assemble_stz:
.a0f3		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0f6		60					.byte $60
>a0f7		44					.byte $44
.a0f8						Assemble_bit:
.a0f8		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a0fb		20					.byte $20
>a0fc		55					.byte $55
.a0fd						Assemble_sty:
.a0fd		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a100		80					.byte $80
>a101		54					.byte $54
.a102						Assemble_ldy:
.a102		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a105		a0					.byte $a0
>a106		d5					.byte $d5
.a107						Assemble_cpy:
.a107		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a10a		c0					.byte $c0
>a10b		d4					.byte $d4
.a10c						Assemble_cpx:
.a10c		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a10f		e0					.byte $e0
>a110		d0					.byte $d0
.a111						Assemble_tsb:
.a111		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a114		00					.byte $00
>a115		50					.byte $50
.a116						Assemble_trb:
.a116		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a119		10					.byte $10
>a11a		50					.byte $50
.a11b						Assemble_jsr:
.a11b		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a11e		14					.byte $14
>a11f		10					.byte $10
.a120						Assemble_jmp:
.a120		20 f7 80	jsr $80f7		jsr	AssembleGroup2
>a123		40					.byte $40
>a124		10					.byte $10
.a125						Assemble_bpl:
.a125		20 48 81	jsr $8148		jsr	AssembleGroup3
>a128		10					.byte $10
.a129						Assemble_bmi:
.a129		20 48 81	jsr $8148		jsr	AssembleGroup3
>a12c		30					.byte $30
.a12d						Assemble_bvc:
.a12d		20 48 81	jsr $8148		jsr	AssembleGroup3
>a130		50					.byte $50
.a131						Assemble_bvs:
.a131		20 48 81	jsr $8148		jsr	AssembleGroup3
>a134		70					.byte $70
.a135						Assemble_bcc:
.a135		20 48 81	jsr $8148		jsr	AssembleGroup3
>a138		90					.byte $90
.a139						Assemble_bcs:
.a139		20 48 81	jsr $8148		jsr	AssembleGroup3
>a13c		b0					.byte $b0
.a13d						Assemble_bne:
.a13d		20 48 81	jsr $8148		jsr	AssembleGroup3
>a140		d0					.byte $d0
.a141						Assemble_beq:
.a141		20 48 81	jsr $8148		jsr	AssembleGroup3
>a144		f0					.byte $f0
.a145						Assemble_bra:
.a145		20 48 81	jsr $8148		jsr	AssembleGroup3
>a148		80					.byte $80
.a149						Assemble_brk:
.a149		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a14c		00					.byte $00
.a14d						Assemble_php:
.a14d		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a150		08					.byte $08
.a151						Assemble_clc:
.a151		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a154		18					.byte $18
.a155						Assemble_plp:
.a155		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a158		28					.byte $28
.a159						Assemble_sec:
.a159		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a15c		38					.byte $38
.a15d						Assemble_rti:
.a15d		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a160		40					.byte $40
.a161						Assemble_pha:
.a161		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a164		48					.byte $48
.a165						Assemble_cli:
.a165		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a168		58					.byte $58
.a169						Assemble_phy:
.a169		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a16c		5a					.byte $5a
.a16d						Assemble_rts:
.a16d		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a170		60					.byte $60
.a171						Assemble_pla:
.a171		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a174		68					.byte $68
.a175						Assemble_sei:
.a175		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a178		78					.byte $78
.a179						Assemble_ply:
.a179		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a17c		7a					.byte $7a
.a17d						Assemble_dey:
.a17d		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a180		88					.byte $88
.a181						Assemble_txa:
.a181		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a184		8a					.byte $8a
.a185						Assemble_tya:
.a185		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a188		98					.byte $98
.a189						Assemble_txs:
.a189		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a18c		9a					.byte $9a
.a18d						Assemble_tay:
.a18d		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a190		a8					.byte $a8
.a191						Assemble_tax:
.a191		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a194		aa					.byte $aa
.a195						Assemble_clv:
.a195		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a198		b8					.byte $b8
.a199						Assemble_tsx:
.a199		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a19c		ba					.byte $ba
.a19d						Assemble_iny:
.a19d		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1a0		c8					.byte $c8
.a1a1						Assemble_dex:
.a1a1		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1a4		ca					.byte $ca
.a1a5						Assemble_cld:
.a1a5		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1a8		d8					.byte $d8
.a1a9						Assemble_phx:
.a1a9		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1ac		da					.byte $da
.a1ad						Assemble_stp:
.a1ad		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1b0		db					.byte $db
.a1b1						Assemble_inx:
.a1b1		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1b4		e8					.byte $e8
.a1b5						Assemble_nop:
.a1b5		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1b8		ea					.byte $ea
.a1b9						Assemble_sed:
.a1b9		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1bc		f8					.byte $f8
.a1bd						Assemble_plx:
.a1bd		20 7c 81	jsr $817c		jsr	AssembleGroup4
>a1c0		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a1c1						DecimalScalarTable:
>a1c1		66 66 66 66				.dword $66666666 ; 0.1
>a1c5		de					.byte $de
>a1c6		1f 85 eb 51				.dword $51eb851f ; 0.01
>a1ca		db					.byte $db
>a1cb		4c 37 89 41				.dword $4189374c ; 0.001
>a1cf		d8					.byte $d8
>a1d0		ac 8b db 68				.dword $68db8bac ; 0.0001
>a1d4		d4					.byte $d4
>a1d5		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a1d9		d1					.byte $d1
>a1da		83 de 1b 43				.dword $431bde83 ; 1e-06
>a1de		ce					.byte $ce
>a1df		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a1e3		ca					.byte $ca
>a1e4		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a1e8		c7					.byte $c7
>a1e9		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a1ed		c4					.byte $c4
>a1ee		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a1f2		c0					.byte $c0
>a1f3		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a1f7		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a1f8						SyntaxError:
.a1f8		a9 02		lda #$02		lda	#2
.a1fa		4c 2f 91	jmp $912f		jmp	ErrorHandler
.a1fd						RangeError:
.a1fd		a9 04		lda #$04		lda	#4
.a1ff		4c 2f 91	jmp $912f		jmp	ErrorHandler
.a202						TypeError:
.a202		a9 05		lda #$05		lda	#5
.a204		4c 2f 91	jmp $912f		jmp	ErrorHandler
.a207						ArgumentError:
.a207		a9 07		lda #$07		lda	#7
.a209		4c 2f 91	jmp $912f		jmp	ErrorHandler
.a20c						NotDoneError:
.a20c		a9 0c		lda #$0c		lda	#12
.a20e		4c 2f 91	jmp $912f		jmp	ErrorHandler
.a211						ErrorText:
>a211		42 72 65 61 6b 00			.text	"Break",0
>a217		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a21f		72 72 6f 72 00
>a224		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a22c		20 62 79 20 7a 65 72 6f 00
>a235		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a23d		61 6e 67 65 00
>a242		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a24a		6d 61 74 63 68 00
>a250		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a258		65 6d 6f 72 79 00
>a25e		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a266		61 72 67 75 6d 65 6e 74 00
>a26f		53 74 6f 70 00				.text	"Stop",0
>a274		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a27c		6f 6f 20 6c 6f 6e 67 00
>a284		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a28c		6e 20 66 61 69 6c 65 64 00
>a295		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a29d		61 74 61 00
>a2a1		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a2a9		65 6e 74 65 64 00
>a2af		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a2b7		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a2c3		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a2cb		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a2d8		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a2e0		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a2ed		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a2f5		68 6f 75 74 20 57 68 69 6c 65 00
>a300		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a308		68 6f 75 74 20 46 6f 72 00
>a311		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a319		61 63 6b 20 66 75 6c 6c 00
>a322		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a32a		75 63 74 75 72 65 00
>a331		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a339		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a346		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a34e		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a35c		41 72 72 61 79 20 73 69			.text	"Array size",0
>a364		7a 65 00
>a367		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a36f		79 20 69 6e 64 65 78 00
>a377		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a37f		74 20 64 65 63 6c 61 72 65 64 00
>a38a		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a392		20 66 6f 75 6e 64 00
>a399		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a3a1		65 72 72 6f 72 00
>a3a7		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a3af		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dd54		09 09 30 32 2f 30 31 2f			.text 9,9,"02/01/23  23"
>dd5c		32 33 20 20 32 33

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a3b5						RectangleCommand:
.a3b5		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a3b7		80 02		bra $a3bb			bra 	ShapeDrawCmd
.a3b9						CircleCommand:
.a3b9		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a3bb						ShapeDrawCmd:
.a3bb		20 45 a4	jsr $a445			jsr 	RunGraphicsCommand
.a3be						ShapeDraw:
.a3be		0d 61 06	ora $0661			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a3c1		4c 39 a4	jmp $a439			jmp 	ExecuteGraphicCommand	 	; and complete
.a3c4						SpriteCommand:
.a3c4		a2 00		ldx #$00			ldx 	#0
.a3c6		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get image number.
.a3c9		5a		phy				phy
.a3ca		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a3cc		a6 58		ldx $58				ldx 	NSMantissa0
.a3ce		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a3d0		b0 0d		bcs $a3df			bcs 	_SCRange
.a3d2		a0 ff		ldy #$ff			ldy 	#255
.a3d4		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a3d7		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a3d9		7a		ply				ply
.a3da		20 45 a4	jsr $a445			jsr 	RunGraphicsCommand
.a3dd		80 5a		bra $a439			bra 	ExecuteGraphicCommand
.a3df						_SCRange:
.a3df		4c fd a1	jmp $a1fd			jmp 	RangeError
.a3e2						ImageCommand:
.a3e2		a2 00		ldx #$00			ldx 	#0
.a3e4		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get image number.
.a3e7		20 45 a4	jsr $a445			jsr 	RunGraphicsCommand
.a3ea						ImageRunDraw:
.a3ea		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a3ec		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a3ef		ad 67 06	lda $0667			lda 	gxDrawScale
.a3f2		0a		asl a				asl 	a
.a3f3		0a		asl a				asl 	a
.a3f4		0a		asl a				asl 	a
.a3f5		a8		tay				tay
.a3f6		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a3f8		a6 58		ldx $58				ldx 	NSMantissa0
.a3fa		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a3fd		60		rts				rts
.a3fe						TextCommand:
.a3fe		a2 00		ldx #$00			ldx 	#0
.a400		20 d2 9f	jsr $9fd2			jsr 	EvaluateString 				; get text
.a403		20 45 a4	jsr $a445			jsr 	RunGraphicsCommand
.a406						TextRunDraw:
.a406		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a408		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a40b		a0 00		ldy #$00			ldy 	#0
.a40d						_IRDLoop:
.a40d		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a40f		85 37		sta $37				sta 	zTemp0+1
.a411		a5 58		lda $58				lda 	NSMantissa0
.a413		85 36		sta $36				sta 	zTemp0
.a415		b1 36		lda ($36),y			lda 	(zTemp0),y
.a417		f0 13		beq $a42c			beq 	_IRDExit
.a419		5a		phy				phy									; save string pos
.a41a		48		pha				pha 								; save char
.a41b		ad 67 06	lda $0667			lda 	gxDrawScale 				; get scale
.a41e		0a		asl a				asl 	a
.a41f		0a		asl a				asl 	a
.a420		0a		asl a				asl 	a
.a421		a8		tay				tay
.a422		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a424		fa		plx				plx 								; char to draw
.a425		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a428		7a		ply				ply 								; restore string pos
.a429		c8		iny				iny
.a42a		90 e1		bcc $a40d			bcc 	_IRDLoop 					; go back if no error.
.a42c						_IRDExit:
.a42c		60		rts				rts
.a42d						PlotCommand:
.a42d		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a42f		20 45 a4	jsr $a445			jsr 	RunGraphicsCommand
.a432		80 05		bra $a439			bra 	ExecuteGraphicCommand
.a434						LineCommand:
.a434		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a436		20 45 a4	jsr $a445			jsr 	RunGraphicsCommand
.a439						ExecuteGraphicCommand:
.a439		0d 60 06	ora $0660			ora 	gxCommandID 				; make a full command
.a43c		20 7b 80	jsr $807b			jsr 	GXGraphicDraw 				; draw it and exit
.a43f		b0 01		bcs $a442			bcs 	_EGCError
.a441		60		rts				rts
.a442						_EGCError:
.a442		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
.a445						RunGraphicsCommand:
.a445		8d 60 06	sta $0660			sta 	gxCommandID					; save TODO graphics command.
.a448		68		pla				pla 								; pop handler address
.a449		fa		plx				plx
.a44a		1a		inc a				inc 	a
.a44b		d0 01		bne $a44e			bne 	_RGINoCarry
.a44d		e8		inx				inx
.a44e						_RGINoCarry:
.a44e		8d 65 06	sta $0665			sta 	gxHandler
.a451		8e 66 06	stx $0666			stx 	gxHandler+1
.a454						_RGICommandLoop:
.a454		b1 30		lda ($30),y			lda 	(codePtr),y
.a456		c8		iny				iny
.a457		c9 d9		cmp #$d9			cmp 	#KWD_TO						; is it TO x,y
.a459		f0 53		beq $a4ae			beq 	_RGI_To
.a45b		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a45d		f0 55		beq $a4b4			beq 	_RGI_Here
.a45f		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a461		f0 3d		beq $a4a0			beq 	_RGI_Exit
.a463		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a465		f0 39		beq $a4a0			beq 	_RGI_Exit
.a467		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a469		f0 3e		beq $a4a9			beq 	_RGI_Frame
.a46b		c9 d5		cmp #$d5			cmp 	#KWD_SOLID
.a46d		f0 33		beq $a4a2			beq 	_RGI_Solid
.a46f		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a471		f0 4b		beq $a4be			beq 	_RGI_By
.a473		c9 bd		cmp #$bd			cmp 	#KWD_FROM 					; from
.a475		f0 17		beq $a48e			beq 	_RGI_Move2
.a477		c9 ba		cmp #$ba			cmp 	#KWD_DIM 					; dim (set scale)
.a479		f0 62		beq $a4dd			beq 	_RGI_Dim
.a47b		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a47d		f0 74		beq $a4f3			beq 	_RGI_Colour
.a47f		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a481		f0 70		beq $a4f3			beq 	_RGI_Colour
.a483		ae 60 06	ldx $0660			ldx 	gxCommandID
.a486		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a488		d0 03		bne $a48d			bne 	_RGI_Move 					; move
.a48a		4c 1b a5	jmp $a51b			jmp		_RGI_SpriteInstructions
.a48d						_RGI_Move:
.a48d		88		dey				dey 								; unpick get.
.a48e						_RGI_Move2:
.a48e		20 41 a5	jsr $a541			jsr 	GCGetCoordinatePair 		; move to here
.a491		20 68 a5	jsr $a568			jsr 	GCCopyPairToStore 			; save
.a494		5a		phy				phy
.a495		20 5e a5	jsr $a55e			jsr 	GCLoadAXY 					; load in
.a498		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a49a		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a49d		7a		ply				ply
.a49e		80 b4		bra $a454			bra 	_RGICommandLoop 			; and go round
.a4a0						_RGI_Exit:
.a4a0		88		dey				dey 								; unpick : / EOL
.a4a1		60		rts				rts
.a4a2						_RGI_Solid:
.a4a2		a9 02		lda #$02			lda 	#2
.a4a4		8d 61 06	sta $0661			sta 	gxFillSolid
.a4a7		80 ab		bra $a454			bra 	_RGICommandLoop
.a4a9						_RGI_Frame:
.a4a9		9c 61 06	stz $0661			stz 	gxFillSolid
.a4ac		80 a6		bra $a454			bra 	_RGICommandLoop
.a4ae						_RGI_To:
.a4ae		20 41 a5	jsr $a541			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a4b1		20 68 a5	jsr $a568			jsr 	GCCopyPairToStore
.a4b4						_RGI_Here:
.a4b4		5a		phy				phy
.a4b5		20 5e a5	jsr $a55e			jsr 	GCLoadAXY 					; load it into AXY
.a4b8		20 18 a5	jsr $a518			jsr 	_RGICallHandler 			; go do whatever it is.
.a4bb		7a		ply				ply
.a4bc		80 96		bra $a454			bra 	_RGICommandLoop 			; and go round
.a4be						_RGI_By:
.a4be		20 4e a5	jsr $a54e			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a4c1		18		clc				clc
.a4c2		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a4c4		6d 62 06	adc $0662			adc 	gxXPos
.a4c7		8d 62 06	sta $0662			sta 	gxXPos
.a4ca		a5 61		lda $61				lda 	NSMantissa1+1
.a4cc		6d 63 06	adc $0663			adc 	gxXPos+1
.a4cf		8d 63 06	sta $0663			sta 	gxXPos+1
.a4d2		a5 5a		lda $5a				lda 	NSMantissa0+2
.a4d4		18		clc				clc
.a4d5		6d 64 06	adc $0664			adc 	gxYPos
.a4d8		8d 64 06	sta $0664			sta 	gxYPos
.a4db		80 d7		bra $a4b4			bra 	_RGI_Here
.a4dd						_RGI_Dim:
.a4dd		a2 01		ldx #$01			ldx	 	#1
.a4df		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger
.a4e2		a5 59		lda $59				lda 	NSMantissa0+1
.a4e4		c9 00		cmp #$00			cmp 	#0
.a4e6		f0 2d		beq $a515			beq 	_RGIRange
.a4e8		c9 09		cmp #$09			cmp 	#8+1
.a4ea		b0 29		bcs $a515			bcs		_RGIRange
.a4ec		3a		dec a				dec 	a
.a4ed		8d 67 06	sta $0667			sta 	gxDrawScale
.a4f0		4c 54 a4	jmp $a454			jmp 	_RGICommandLoop
.a4f3						_RGI_Colour:
.a4f3		a2 01		ldx #$01			ldx 	#1 							; colour
.a4f5		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger
.a4f8		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a4fa		20 7a a0	jsr $a07a			jsr 	NSMSetZero
.a4fd		b1 30		lda ($30),y			lda 	(codePtr),y
.a4ff		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a501		d0 04		bne $a507			bne 	_RGICDefaultMode
.a503		c8		iny				iny
.a504		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger
.a507						_RGICDefaultMode:
.a507		5a		phy				phy
.a508		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a50a		a6 59		ldx $59				ldx 	NSMantissa0+1
.a50c		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a50e		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a511		7a		ply				ply
.a512		4c 54 a4	jmp $a454			jmp 	_RGICommandLoop 			; and go round
.a515						_RGIRange:
.a515		4c fd a1	jmp $a1fd			jmp 	RangeError
.a518						_RGICallHandler:
.a518		6c 65 06	jmp ($0665)			jmp 	(gxHandler)
.a51b						_RGI_SpriteInstructions:
.a51b		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a51d		f0 07		beq $a526			beq 	_RGISpriteOff
.a51f		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a521		f0 13		beq $a536			beq 	_RGISetImage
.a523		4c 8d a4	jmp $a48d			jmp 	_RGI_Move
.a526						_RGISpriteOff:
.a526		5a		phy				phy
.a527		a0 01		ldy #$01			ldy 	#1
.a529		a2 00		ldx #$00			ldx 	#0
.a52b						_RGIDoCommandLoop:
.a52b		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a52d		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a530		7a		ply				ply
.a531		b0 e2		bcs $a515			bcs 	_RGIRange
.a533		4c 54 a4	jmp $a454			jmp 	_RGICommandLoop
.a536						_RGISetImage:
.a536		a2 01		ldx #$01			ldx 	#1
.a538		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger
.a53b		5a		phy				phy
.a53c		aa		tax				tax
.a53d		a0 00		ldy #$00			ldy 	#0
.a53f		80 ea		bra $a52b			bra 	_RGIDoCommandLoop
.a541						GCGetCoordinatePair:
.a541		a2 01		ldx #$01			ldx 	#1
.a543		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger
.a546		20 1e 91	jsr $911e			jsr 	CheckComma
.a549		e8		inx				inx
.a54a		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger
.a54d		60		rts				rts
.a54e						GCSignedCoordinatePair:
.a54e		a2 01		ldx #$01			ldx 	#1
.a550		20 04 a0	jsr $a004			jsr 	Evaluate16BitIntegerSigned
.a553		20 1e 91	jsr $911e			jsr 	CheckComma
.a556		e8		inx				inx
.a557		20 04 a0	jsr $a004			jsr 	Evaluate16BitIntegerSigned
.a55a		60		rts				rts
.a55b						_GCCPRange:
.a55b		4c fd a1	jmp $a1fd			jmp 	RangeError
.a55e						GCLoadAXY:
.a55e		ad 63 06	lda $0663			lda 	gxXPos+1
.a561		ae 62 06	ldx $0662			ldx 	gxXPos
.a564		ac 64 06	ldy $0664			ldy 	gxYPos
.a567		60		rts				rts
.a568						GCCopyPairToStore:
.a568		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a56a		8d 62 06	sta $0662			sta 	gxXPos
.a56d		a5 61		lda $61				lda 	NSMantissa1+1
.a56f		8d 63 06	sta $0663			sta 	gxXPos+1
.a572		a5 5a		lda $5a				lda 	NSMantissa0+2
.a574		8d 64 06	sta $0664			sta 	gxYPos
.a577		60		rts				rts
.0660						gxCommandID:
>0660								.fill 	1
.0661						gxFillSolid:
>0661								.fill 	1
.0662						gxXPos:
>0662								.fill 	2
.0664						gxYPos:
>0664								.fill 	1
.0665						gxHandler:
>0665								.fill 	2
.0667						gxDrawScale:
>0667								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a578						BitmapCtrl:
.a578		b1 30		lda ($30),y			lda 	(codePtr),y
.a57a		c8		iny				iny
.a57b		a2 01		ldx #$01			ldx 	#1
.a57d		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a57f		f0 11		beq $a592			beq 	BitmapSwitch
.a581		ca		dex				dex
.a582		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a584		f0 0c		beq $a592			beq 	BitmapSwitch
.a586		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get the colour
.a589		5a		phy				phy
.a58a		aa		tax				tax
.a58b		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a58d		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a590		7a		ply				ply
.a591		60		rts				rts
.a592						BitmapSwitch:
.a592		5a		phy				phy
.a593		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a595		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a597		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a59a		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a59c		a0 00		ldy #$00			ldy 	#0
.a59e		a2 ff		ldx #$ff			ldx 	#$FF
.a5a0		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5a3		9c 61 06	stz $0661			stz 	gxFillSolid
.a5a6		9c 62 06	stz $0662			stz 	gxXPos
.a5a9		9c 63 06	stz $0663			stz 	gxXPos+1
.a5ac		9c 64 06	stz $0664			stz 	gxYPos
.a5af		9c 67 06	stz $0667			stz 	gxDrawScale
.a5b2		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a5b4		a2 00		ldx #$00			ldx 	#0
.a5b6		a0 00		ldy #$00			ldy 	#0
.a5b8		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5bb		7a		ply				ply
.a5bc		60		rts				rts
.a5bd						SpritesCtrl:
.a5bd		b1 30		lda ($30),y			lda 	(codePtr),y
.a5bf		c8		iny				iny
.a5c0		a2 01		ldx #$01			ldx 	#1
.a5c2		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a5c4		f0 08		beq $a5ce			beq 	SpriteSwitch
.a5c6		ca		dex				dex
.a5c7		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a5c9		f0 03		beq $a5ce			beq 	SpriteSwitch
.a5cb		4c f8 a1	jmp $a1f8			jmp 	SyntaxError
.a5ce						SpriteSwitch:
.a5ce		5a		phy				phy
.a5cf		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a5d1		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a5d3		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5d6		7a		ply				ply
.a5d7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a5d8						GfxCommand:
.a5d8		a2 00		ldx #$00			ldx 	#0
.a5da		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; command
.a5dd		20 1e 91	jsr $911e			jsr 	CheckComma
.a5e0		e8		inx				inx
.a5e1		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger 		; X
.a5e4		20 1e 91	jsr $911e			jsr 	CheckComma
.a5e7		e8		inx				inx
.a5e8		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; Y
.a5eb		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a5ed		4a		lsr a				lsr 	a
.a5ee		d0 12		bne $a602			bne 	_GfxError
.a5f0		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a5f2		b0 0e		bcs $a602			bcs 	_GfxError 					; bit 7 should have been zero
.a5f4		5a		phy				phy 								; save pos
.a5f5		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a5f7		a6 59		ldx $59				ldx 	NSMantissa0+1
.a5f9		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a5fb		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5fe		b0 02		bcs $a602			bcs 	_GfxError
.a600		7a		ply				ply 								; restore pos and exit.
.a601		60		rts				rts
.a602						_GfxError:
.a602		4c fd a1	jmp $a1fd			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a605						UnaryHit:
.a605		fa		plx				plx
.a606		a9 36		lda #$36			lda 	#zTemp0
.a608		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a60b		20 1e 91	jsr $911e			jsr 	CheckComma
.a60e		e8		inx				inx
.a60f		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a612		20 16 91	jsr $9116			jsr		CheckRightBracket
.a615		ca		dex				dex 								; fix back up again.
.a616		da		phx				phx 								; save X/Y
.a617		5a		phy				phy
.a618		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a61a		b5 58		lda $58,x			lda 	NSMantissa0,x
.a61c		aa		tax				tax
.a61d		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a61f		20 7b 80	jsr $807b			jsr 	GXGraphicDraw 				; calculate result
.a622		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a623		7a		ply				ply 								; restore XY
.a624		fa		plx				plx
.a625		20 7c a0	jsr $a07c			jsr 	NSMSetByte 					; return the hit result
.a628		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a629						PaletteCommand:
.a629		a2 00		ldx #$00			ldx 	#0
.a62b		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; colour
.a62e		20 1e 91	jsr $911e			jsr 	CheckComma
.a631		e8		inx				inx
.a632		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger 		; r
.a635		20 1e 91	jsr $911e			jsr 	CheckComma
.a638		e8		inx				inx
.a639		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; g
.a63c		20 1e 91	jsr $911e			jsr 	CheckComma
.a63f		e8		inx				inx
.a640		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; b
.a643		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a645		85 36		sta $36				sta 	zTemp0
.a647		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a649		85 37		sta $37				sta 	zTemp0+1
.a64b		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a64d		26 37		rol $37				rol	 	zTemp0+1
.a64f		06 36		asl $36				asl 	zTemp0
.a651		26 37		rol $37				rol	 	zTemp0+1
.a653		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a655		85 01		sta $01				sta 	1
.a657		5a		phy				phy
.a658		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a65a		92 36		sta ($36)			sta 	(zTemp0)
.a65c		a0 01		ldy #$01			ldy 	#1
.a65e		a5 5a		lda $5a				lda 	NSMantissa0+2
.a660		91 36		sta ($36),y			sta 	(zTemp0),y
.a662		a5 59		lda $59				lda 	NSMantissa0+1
.a664		c8		iny				iny
.a665		91 36		sta ($36),y			sta 	(zTemp0),y
.a667		7a		ply				ply
.a668		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a669						XLoadCommand:
.a669		20 83 8b	jsr $8b83			jsr 	NewProgram
.a66c		20 5f 83	jsr $835f			jsr 	BackloadProgram
.a66f		4c 1e 84	jmp $841e			jmp 	WarmStart
.a672						XGoCommand:
.a672		20 83 8b	jsr $8b83			jsr 	NewProgram
.a675		20 5f 83	jsr $835f			jsr 	BackloadProgram
.a678		4c 01 8d	jmp $8d01			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a67b						UnaryEvent:
.a67b		fa		plx				plx
.a67c		20 15 a7	jsr $a715			jsr 	TimerToStackX 				; timer in +0
.a67f		e8		inx				inx  								; put reference into +1
.a680		20 7d 9a	jsr $9a7d			jsr 	EvaluateTerm
.a683		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a685		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a687		d0 4c		bne $a6d5			bne 	_UEType
.a689		e8		inx				inx 								; put the step in +2
.a68a		20 1e 91	jsr $911e			jsr 	CheckComma
.a68d		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger
.a690		20 16 91	jsr $9116			jsr 	CheckRightBracket
.a693		ca		dex				dex
.a694		ca		dex				dex
.a695		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a697		85 36		sta $36				sta 	zTemp0
.a699		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a69b		85 37		sta $37				sta 	zTemp0+1
.a69d		5a		phy				phy
.a69e		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a6a0		b1 36		lda ($36),y			lda 	(zTemp0),y
.a6a2		30 2d		bmi $a6d1			bmi 	_UEFalse 					; exit if signed.
.a6a4		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a6a6		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6a8		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a6aa		c8		iny				iny
.a6ab		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6ad		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6af		c8		iny				iny
.a6b0		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6b2		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6b4		90 1b		bcc $a6d1			bcc 	_UEFalse 					; no, return FALSE.
.a6b6		18		clc				clc
.a6b7		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a6b9		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6bb		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a6bd		91 36		sta ($36),y			sta 	(zTemp0),y
.a6bf		c8		iny				iny
.a6c0		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6c2		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a6c4		91 36		sta ($36),y			sta 	(zTemp0),y
.a6c6		c8		iny				iny
.a6c7		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6c9		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a6cb		91 36		sta ($36),y			sta 	(zTemp0),y
.a6cd		7a		ply				ply
.a6ce		4c 9c 91	jmp $919c			jmp 	ReturnTrue
.a6d1						_UEFalse:
.a6d1		7a		ply				ply 								; restore Y
.a6d2		4c a7 91	jmp $91a7			jmp 	ReturnFalse 				; and return False
.a6d5						_UEType:
.a6d5		4c 02 a2	jmp $a202			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a6d8						UnaryJoyX:
.a6d8		18		clc				clc
.a6d9		80 01		bra $a6dc			bra 	JoyMain
.a6db						UnaryJoyY:
.a6db		38		sec				sec
.a6dc						JoyMain:
.a6dc		fa		plx				plx 								; get pos
.a6dd		08		php				php 								; save carry (set for Y)
.a6de		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6e1		20 16 91	jsr $9116			jsr 	CheckRightBracket
.a6e4		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a6e7		28		plp				plp
.a6e8		b0 02		bcs $a6ec			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a6ea		4a		lsr a				lsr 	a
.a6eb		4a		lsr a				lsr 	a
.a6ec						_JMNoShift:
.a6ec		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a6ed		b0 07		bcs $a6f6			bcs 	JMIsLeft
.a6ef		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a6f0		b0 07		bcs $a6f9			bcs 	JMIsRight
.a6f2		20 7a a0	jsr $a07a			jsr 	NSMSetZero 					; zero result
.a6f5		60		rts				rts
.a6f6						JMIsLeft:
.a6f6		4c 9c 91	jmp $919c			jmp 	ReturnTrue
.a6f9						JMIsRight:
.a6f9		a9 01		lda #$01			lda 	#1
.a6fb		20 7c a0	jsr $a07c			jsr 	NSMSetByte
.a6fe		60		rts				rts
.a6ff						UnaryJoyB:
.a6ff		fa		plx				plx 								; get pos
.a700		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a703		20 16 91	jsr $9116			jsr 	CheckRightBracket
.a706		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a709		29 10		and #$10			and 	#$10
.a70b		d0 e9		bne $a6f6			bne 	JMIsLeft
.a70d		20 7a a0	jsr $a07a			jsr 	NSMSetZero
.a710		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a711						UnaryTimer:
.a711		fa		plx				plx
.a712		20 16 91	jsr $9116			jsr 	CheckRightBracket
.a715						TimerToStackX:
.a715		20 7a a0	jsr $a07a			jsr 	NSMSetZero 					; zero result
.a718		64 01		stz $01				stz 	1 							; access I/O
.a71a		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a71d		95 58		sta $58,x			sta 	NSMantissa0,x
.a71f		ad 5a d6	lda $d65a			lda 	$D65A
.a722		95 60		sta $60,x			sta 	NSMantissa1,x
.a724		ad 5b d6	lda $d65b			lda 	$D65B
.a727		95 68		sta $68,x			sta 	NSMantissa2,x
.a729		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a72a						MemoryDeleteLine:
.a72a		20 49 a7	jsr $a749			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a72d		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a72f		a8		tay				tay
.a730						_MDDLLoop:
.a730		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a732		92 30		sta ($30)			sta 	(codePtr)
.a734		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a736		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a738		d0 07		bne $a741			bne 	_MDLDLNext
.a73a		a5 31		lda $31				lda 	codePtr+1
.a73c		c5 3b		cmp $3b				cmp 	zTemp2+1
.a73e		d0 01		bne $a741			bne 	_MDLDLNext
.a740						_MDDLExit:
.a740		60		rts				rts
.a741						_MDLDLNext:
.a741		e6 30		inc $30				inc 	codePtr						; next byte
.a743		d0 eb		bne $a730			bne 	_MDDLLoop
.a745		e6 31		inc $31				inc 	codePtr+1
.a747		80 e7		bra $a730			bra 	_MDDLLoop
.a749						IMemoryFindEnd:
.a749		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a74b		85 3a		sta $3a				sta 	0+zTemp2
.a74d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a74f		85 3b		sta $3b				sta 	1+zTemp2
.a751						_MDLFELoop:
.a751		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a753		f0 0b		beq $a760			beq 	_MDLFEExit
.a755		18		clc				clc
.a756		65 3a		adc $3a				adc 	zTemp2
.a758		85 3a		sta $3a				sta 	zTemp2
.a75a		90 f5		bcc $a751			bcc 	_MDLFELoop
.a75c		e6 3b		inc $3b				inc 	zTemp2+1
.a75e		80 f1		bra $a751			bra 	_MDLFELoop
.a760						_MDLFEExit:
.a760		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a761						MemoryInsertLine:
.a761		08		php				php
.a762		20 49 a7	jsr $a749			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a765		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a767		1a		inc a				inc 	a
.a768		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a76a		b0 36		bcs $a7a2			bcs 	_MDLIError 					; no, fail.
.a76c		28		plp				plp 								; do at a specific point or the end ?
.a76d		90 08		bcc $a777			bcc 	_MDLIFound 					; if specific point already set.
.a76f		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a771		85 30		sta $30				sta 	codePtr 					; end.
.a773		a5 3b		lda $3b				lda 	zTemp2+1
.a775		85 31		sta $31				sta 	codePtr+1
.a777						_MDLIFound:
.a777		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a77a		a8		tay				tay
.a77b						_MDLIInsert:
.a77b		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a77d		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a77f		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a781		c5 3a		cmp $3a				cmp 	zTemp2
.a783		d0 06		bne $a78b			bne 	_MDLINext
.a785		a5 31		lda $31				lda 	codePtr+1
.a787		c5 3b		cmp $3b				cmp 	zTemp2+1
.a789		f0 0a		beq $a795			beq 	_MDLIHaveSpace
.a78b						_MDLINext:
.a78b		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a78d		d0 02		bne $a791			bne 	_MDLINoBorrow
.a78f		c6 3b		dec $3b				dec 	zTemp2+1
.a791						_MDLINoBorrow:
.a791		c6 3a		dec $3a				dec 	zTemp2
.a793		80 e6		bra $a77b			bra 	_MDLIInsert
.a795						_MDLIHaveSpace:
.a795		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a798		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a799						_MDLICopy:
.a799		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a79c		91 30		sta ($30),y			sta 	(codePtr),y
.a79e		88		dey				dey
.a79f		10 f8		bpl $a799			bpl 	_MDLICopy
.a7a1		60		rts				rts
.a7a2						_MDLIError:
.a7a2		a9 06		lda #$06		lda	#6
.a7a4		4c 2f 91	jmp $912f		jmp	ErrorHandler
.a7a7						MDLAppendLine:
.a7a7		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a7a9		85 36		sta $36				sta 	zTemp0
.a7ab		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7ad		85 38		sta $38				sta 	0+zTemp1
.a7af		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7b1		85 39		sta $39				sta 	1+zTemp1
.a7b3		b2 38		lda ($38)			lda 	(zTemp1)
.a7b5		d0 0a		bne $a7c1			bne 	_MDLANoInitialise
.a7b7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7b9		8d 68 06	sta $0668			sta 	0+AppendPointer
.a7bc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7be		8d 69 06	sta $0669			sta 	1+AppendPointer
.a7c1						_MDLANoInitialise:
.a7c1		18		clc				clc
.a7c2		ad 68 06	lda $0668			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a7c5		85 38		sta $38				sta 	zTemp1
.a7c7		72 36		adc ($36)			adc 	(zTemp0)
.a7c9		8d 68 06	sta $0668			sta 	AppendPointer
.a7cc		ad 69 06	lda $0669			lda 	AppendPointer+1
.a7cf		85 39		sta $39				sta 	zTemp1+1
.a7d1		69 00		adc #$00			adc 	#0
.a7d3		8d 69 06	sta $0669			sta 	AppendPointer+1
.a7d6		a0 00		ldy #$00			ldy 	#0
.a7d8						_MDLACopy:
.a7d8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a7da		91 38		sta ($38),y			sta 	(zTemp1),y
.a7dc		c8		iny				iny
.a7dd		98		tya				tya
.a7de		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a7e0		d0 f6		bne $a7d8			bne 	_MDLACopy
.a7e2		a9 00		lda #$00			lda 	#0 							; end of program.
.a7e4		91 38		sta ($38),y			sta 	(zTemp1),y
.a7e6		60		rts				rts
.0668						AppendPointer:
>0668								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a7e7						MemoryNew:
.a7e7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7e9		85 30		sta $30				sta 	codePtr
.a7eb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7ed		85 31		sta $31				sta 	codePtr+1
.a7ef		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a7f1		92 30		sta ($30)			sta 	(codePtr)
.a7f3		60		rts				rts
.a7f4						MemoryInline:
.a7f4		98		tya				tya 								; put address into stack,x
.a7f5		18		clc				clc  								; get the offset, add codePtr
.a7f6		65 30		adc $30				adc 	codePtr
.a7f8		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a7fa		a5 31		lda $31				lda 	codePtr+1
.a7fc		69 00		adc #$00			adc 	#0
.a7fe		95 60		sta $60,x			sta 	NSMantissa1,x
.a800		74 68		stz $68,x			stz 	NSMantissa2,x
.a802		74 70		stz $70,x			stz 	NSMantissa3,x
.a804		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a805						MemorySearch:
.a805		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a807		86 37		stx $37				stx 	zTemp0+1
.a809		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a80b		85 30		sta $30				sta 	codePtr
.a80d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a80f		85 31		sta $31				sta 	codePtr+1
.a811						_MTAXLoop:
.a811		b2 30		lda ($30)			lda 	(codePtr)
.a813		18		clc				clc
.a814		f0 21		beq $a837			beq 	_MTAXExit 					; reached end, exit with CC.
.a816		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a818		b1 30		lda ($30),y			lda 	(codePtr),y
.a81a		38		sec				sec
.a81b		e5 36		sbc $36				sbc 	zTemp0
.a81d		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a81f		c8		iny				iny 								; do the MSB
.a820		b1 30		lda ($30),y			lda 	(codePtr),y
.a822		e5 37		sbc $37				sbc 	zTemp0+1
.a824		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a826		f0 0f		beq $a837			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a828		b0 0d		bcs $a837			bcs 	_MTAXExit 					; current < required exit
.a82a		18		clc				clc
.a82b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a82d		65 30		adc $30				adc 	codePtr
.a82f		85 30		sta $30				sta 	codePtr
.a831		90 02		bcc $a835			bcc 	_CREExit
.a833		e6 31		inc $31				inc 	codePtr+1 					; carry
.a835						_CREExit:
.a835		80 da		bra $a811			bra 	_MTAXLoop
.a837						_MTAXExit:
.a837		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a838						UpdateFont:
.a838		a5 01		lda $01				lda 	1 							; save position
.a83a		48		pha				pha
.a83b		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a83d		85 01		sta $01				sta 	1
.a83f		a9 66		lda #$66			lda 	#((FontBinary) & $FF)
.a841		85 36		sta $36				sta 	0+zTemp0
.a843		a9 a8		lda #$a8			lda 	#((FontBinary) >> 8)
.a845		85 37		sta $37				sta 	1+zTemp0
.a847		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a849		85 38		sta $38				sta 	0+zTemp1
.a84b		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a84d		85 39		sta $39				sta 	1+zTemp1
.a84f						_UFCopy1:
.a84f		a0 00		ldy #$00			ldy 	#0
.a851						_UFCopy2:
.a851		b1 36		lda ($36),y			lda 	(zTemp0),y
.a853		91 38		sta ($38),y			sta 	(zTemp1),y
.a855		c8		iny				iny
.a856		d0 f9		bne $a851			bne 	_UFCopy2
.a858		e6 37		inc $37				inc 	zTemp0+1
.a85a		e6 39		inc $39				inc 	zTemp1+1
.a85c		a5 39		lda $39				lda 	zTemp1+1
.a85e		c9 c8		cmp #$c8			cmp 	#$C8
.a860		d0 ed		bne $a84f			bne 	_UFCopy1
.a862		68		pla				pla 								; restore.
.a863		85 01		sta $01				sta 	1
.a865		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a866						FontBinary:
>a866		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a86e		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a87e		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a88e		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a89e		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a8ae		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a8be		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a8ce		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a8de		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a8ee		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a8fe		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a90e		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a91e		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a92e		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a93e		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a94e		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a95e		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a96e		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a97e		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a98e		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a99e		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a9ae		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a9be		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a9ce		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a9de		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a9ee		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a9fe		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>aa0e		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aa1e		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>aa2e		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>aa3e		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>aa4e		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>aa5e		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>aa6e		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>aa7e		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>aa8e		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>aa9e		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>aaae		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>aabe		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>aace		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>aade		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>aaee		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>aafe		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ab0e		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>ab1e		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ab2e		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ab3e		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>ab4e		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>ab5e		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>ab6e		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>ab7e		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>ab8e		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>ab9e		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>abae		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>abbe		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>abce		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>abde		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>abee		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>abfe		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ac0e		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>ac1e		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ac2e		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ac3e		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ac4e		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ac5e		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ac6e		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ac7e		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ac8e		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ac9e		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>acae		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>acbe		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>acce		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>acde		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>acee		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>acfe		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ad0e		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ad1e		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ad2e		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ad3e		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ad4e		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ad5e		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ad6e		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ad7e		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ad8e		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ad9e		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>adae		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>adbe		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>adce		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>adde		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>adee		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>adfe		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ae0e		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ae1e		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ae2e		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ae3e		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ae4e		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ae5e		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ae6e		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ae7e		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ae8e		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ae9e		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>aeae		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>aebe		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>aece		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>aede		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>aeee		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>aefe		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>af0e		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>af1e		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>af2e		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>af3e		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>af4e		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>af5e		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>af6e		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>af7e		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>af8e		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>af9e		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>afae		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>afbe		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>afce		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>afde		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>afee		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>affe		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b00e		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b01e		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b02e		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b03e		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b04e		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b05e		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b066						PingCommand:
.b066		5a		phy				phy 								; save pos
.b067		a9 01		lda #$01			lda 	#1 						; push channel.
.b069		48		pha				pha
.b06a		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b06c		a2 06		ldx #$06			ldx 	#6 						; length
.b06e		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b070		80 24		bra $b096			bra 	SoundEffectCommand
.b072						ZapCommand:
.b072		5a		phy				phy 								; save pos
.b073		a9 01		lda #$01			lda 	#1 						; push channel.
.b075		48		pha				pha
.b076		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b078		a2 0a		ldx #$0a			ldx 	#10 						; length
.b07a		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b07c		80 18		bra $b096			bra 	SoundEffectCommand
.b07e						ShootCommand:
.b07e		5a		phy				phy 								; save pos
.b07f		a9 03		lda #$03			lda 	#3 						; push channel.
.b081		48		pha				pha
.b082		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b084		a2 04		ldx #$04			ldx 	#4 						; length
.b086		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b088		80 0c		bra $b096			bra 	SoundEffectCommand
.b08a						Explode:
.b08a		5a		phy				phy 								; save pos
.b08b		a9 03		lda #$03			lda 	#3 						; push channel.
.b08d		48		pha				pha
.b08e		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b090		a2 0a		ldx #$0a			ldx 	#10 						; length
.b092		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b094		80 00		bra $b096			bra 	SoundEffectCommand
.b096						SoundEffectCommand:
.b096		8d 6a 06	sta $066a			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b099		9c 6b 06	stz $066b			stz 	SoundCommandBlock+1
.b09c		a9 0f		lda #$0f			lda 	#15
.b09e		8d 6c 06	sta $066c			sta 	SoundCommandBlock+2
.b0a1		8e 6d 06	stx $066d			stx 	SoundCommandBlock+3
.b0a4		8c 6e 06	sty $066e			sty 	SoundCommandBlock+4
.b0a7		9c 6f 06	stz $066f			stz 	SoundCommandBlock+5
.b0aa		68		pla				pla
.b0ab		09 10		ora #$10			ora 	#$10  						; execute command $11
.b0ad		a2 6a		ldx #$6a			ldx 	#(SoundCommandBlock & $FF)
.b0af		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b0b1		20 85 80	jsr $8085			jsr 	SNDCommand
.b0b4		7a		ply				ply
.b0b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b0b6						UnaryPlaying:
.b0b6		fa		plx				plx
.b0b7		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; get channel #
.b0ba		48		pha				pha
.b0bb		20 16 91	jsr $9116			jsr		CheckRightBracket
.b0be		68		pla				pla
.b0bf		c9 04		cmp #$04			cmp 	#4
.b0c1		b0 0c		bcs $b0cf			bcs 	_UPNotPlaying
.b0c3		09 20		ora #$20			ora 	#$20 						; query playing ?
.b0c5		20 85 80	jsr $8085			jsr 	SNDCommand
.b0c8		c9 00		cmp #$00			cmp 	#0
.b0ca		f0 03		beq $b0cf			beq 	_UPNotPlaying
.b0cc		4c 9c 91	jmp $919c			jmp 	ReturnTrue
.b0cf						_UPNotPlaying:
.b0cf		4c a7 91	jmp $91a7			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b0d2						SoundCommand:
.b0d2		b1 30		lda ($30),y			lda 	(codePtr),y
.b0d4		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b0d6		d0 09		bne $b0e1			bne 	_SNDMain
.b0d8		c8		iny				iny 								; skip OFF
.b0d9		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b0db		5a		phy				phy
.b0dc		20 85 80	jsr $8085			jsr 	SNDCommand
.b0df		7a		ply				ply
.b0e0		60		rts				rts
.b0e1						_SNDMain:
.b0e1		a2 00		ldx #$00			ldx 	#0
.b0e3		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; channel
.b0e6		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b0e8		b0 4b		bcs $b135			bcs 	_SndError
.b0ea		e8		inx				inx 								; do the rest in slot 1.
.b0eb		20 1e 91	jsr $911e			jsr 	CheckComma
.b0ee		20 fa 9f	jsr $9ffa			jsr 	Evaluate16BitInteger 		; Pitch
.b0f1		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b0f3		c9 10		cmp #$10			cmp 	#16
.b0f5		b0 3e		bcs $b135			bcs 	_SndError
.b0f7		8d 6b 06	sta $066b			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b0fa		b5 58		lda $58,x			lda 	NSMantissa0,x
.b0fc		8d 6a 06	sta $066a			sta 	SoundCommandBlock
.b0ff		20 1e 91	jsr $911e			jsr 	CheckComma
.b102		20 15 a0	jsr $a015			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b105		8d 6d 06	sta $066d			sta 	SoundCommandBlock+3
.b108		a9 0f		lda #$0f			lda 	#15
.b10a		8d 6c 06	sta $066c			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b10d		9c 6e 06	stz $066e			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b110		9c 6f 06	stz $066f			stz 	SoundCommandBlock+5
.b113		b1 30		lda ($30),y			lda 	(codePtr),y
.b115		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b117		d0 0e		bne $b127			bne 	_SNDPlay
.b119		c8		iny				iny
.b11a		20 04 a0	jsr $a004			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b11d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b11f		8d 6e 06	sta $066e			sta 	SoundCommandBlock+4
.b122		b5 60		lda $60,x			lda 	NSMantissa1,x
.b124		8d 6f 06	sta $066f			sta 	SoundCommandBlock+5
.b127						_SNDPlay:
.b127		5a		phy				phy
.b128		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b12a		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b12c		a2 6a		ldx #$6a			ldx 	#(SoundCommandBlock & $FF)
.b12e		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b130		20 85 80	jsr $8085			jsr 	SNDCommand
.b133		7a		ply				ply
.b134		60		rts				rts
.b135						_SndError:
.b135		4c fd a1	jmp $a1fd			jmp 	RangeError
.066a						SoundCommandBlock:
>066a								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b138						StackPushByte:
.b138		48		pha				pha 								; save byte on stack
.b139		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b13b		d0 08		bne $b145			bne 	_SPBNoBorrow
.b13d		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b13f		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b141		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b143		90 06		bcc $b14b			bcc 	_SPBMemory
.b145						_SPBNoBorrow:
.b145		c6 34		dec $34				dec 	basicStack
.b147		68		pla				pla 								; get back and write
.b148		92 34		sta ($34)			sta 	(basicStack)
.b14a		60		rts				rts
.b14b						_SPBMemory:
.b14b		a9 12		lda #$12		lda	#18
.b14d		4c 2f 91	jmp $912f		jmp	ErrorHandler
.b150						StackPopByte:
.b150		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b152		e6 34		inc $34				inc 	basicStack
.b154		d0 02		bne $b158			bne 	_SPBNoCarry
.b156		e6 35		inc $35				inc 	basicStack+1
.b158						_SPBNoCarry:
.b158		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b159						StackOpen:
.b159		48		pha				pha 								; save frame byte
.b15a		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b15c		0a		asl a				asl 	a 							; claim twice this for storage
.b15d		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b15f		38		sec				sec 								; so basically subtracting from
.b160		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b162		85 34		sta $34				sta 	basicStack
.b164		b0 09		bcs $b16f			bcs 	_SONoBorrow
>b166		db						.byte 	$DB 						; causes a break in the emulator
.b167		c6 35		dec $35				dec 	basicStack+1
.b169		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b16b		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b16d		90 04		bcc $b173			bcc 	_SOMemory
.b16f						_SONoBorrow:
.b16f		68		pla				pla 								; get marker back and write at TOS
.b170		92 34		sta ($34)			sta 	(basicStack)
.b172		60		rts				rts
.b173						_SOMemory:
.b173		a9 12		lda #$12		lda	#18
.b175		4c 2f 91	jmp $912f		jmp	ErrorHandler
.b178						StackClose:
.b178		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b17a		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b17c		0a		asl a				asl 	a 							; claim twice this.
.b17d		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b17f		85 34		sta $34				sta 	basicStack
.b181		90 02		bcc $b185			bcc 	_SCExit
.b183		e6 35		inc $35				inc 	basicStack+1
.b185						_SCExit:
.b185		60		rts				rts
.b186						StackCheckFrame:
.b186		48		pha				pha
.b187						_StackRemoveLocals:
.b187		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b189		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b18b		b0 05		bcs $b192			bcs 	_SCNoLocal
.b18d		20 32 8b	jsr $8b32			jsr 	LocalPopValue 				; restore the local value
.b190		80 f5		bra $b187			bra 	_StackRemoveLocals 			; gr round again
.b192						_SCNoLocal:
.b192		68		pla				pla 								; get the frame check.
.b193		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b195		29 f0		and #$f0			and 	#$F0 						; check type bits
.b197		d0 01		bne $b19a			bne 	_SCFError 					; different, we have structures mixed up
.b199		60		rts				rts
.b19a						_SCFError:
.b19a		8a		txa				txa 								; report error X
.b19b		4c 2f 91	jmp $912f			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b19e						STKSaveCodePosition:
.b19e		5a		phy				phy
.b19f		98		tya				tya 								; save Y
.b1a0		a0 05		ldy #$05			ldy 	#5
.b1a2		91 34		sta ($34),y			sta 	(basicStack),y
.b1a4		88		dey				dey 								; save Code Pointer
.b1a5						_STKSaveLoop:
.b1a5		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b1a8		91 34		sta ($34),y			sta 	(basicStack),y
.b1aa		88		dey				dey
.b1ab		d0 f8		bne $b1a5			bne 	_STKSaveLoop
.b1ad		7a		ply				ply
.b1ae		60		rts				rts
.b1af						STKLoadCodePosition:
.b1af		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b1b1						_STKLoadLoop:
.b1b1		b1 34		lda ($34),y			lda 	(basicStack),y
.b1b3		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b1b6		c8		iny				iny
.b1b7		c0 05		cpy #$05			cpy 	#5
.b1b9		d0 f6		bne $b1b1			bne 	_STKLoadLoop
.b1bb		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b1bd		a8		tay				tay
.b1be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b1bf						StackReset:
.b1bf		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b1c1		85 34		sta $34				sta 	0+basicStack
.b1c3		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b1c5		85 35		sta $35				sta 	1+basicStack
.b1c7		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b1c9		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b1cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b1cc						StringConcrete:
.b1cc		5a		phy				phy 								; save position on stack
.b1cd		20 69 9c	jsr $9c69			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b1d0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b1d2		85 38		sta $38				sta 	zTemp1
.b1d4		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1d6		85 39		sta $39				sta 	zTemp1+1
.b1d8		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b1da						_SALength:
.b1da		c8		iny				iny
.b1db		b1 38		lda ($38),y			lda 	(zTemp1),y
.b1dd		d0 fb		bne $b1da			bne 	_SALength
.b1df		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b1e1		b0 3d		bcs $b220			bcs 	_SALengthError
.b1e3		98		tya				tya 				 				; length of the new string
.b1e4		18		clc				clc
.b1e5		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b1e7		90 02		bcc $b1eb			bcc 	_SAHaveLength
.b1e9		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b1eb						_SAHaveLength:
.b1eb		48		pha				pha 								; save length.
.b1ec		38		sec				sec
.b1ed		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b1ef		6d 0e 04	adc $040e			adc 	stringMemory
.b1f2		8d 0e 04	sta $040e			sta 	stringMemory
.b1f5		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b1f7		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b1f9		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b1fb		6d 0f 04	adc $040f			adc 	stringMemory+1
.b1fe		8d 0f 04	sta $040f			sta 	stringMemory+1
.b201		85 3b		sta $3b				sta 	zTemp2+1
.b203		95 60		sta $60,x			sta 	NSMantissa1,x
.b205		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b206		38		sec				sec
.b207		e9 03		sbc #$03			sbc 	#3
.b209		92 3a		sta ($3a)			sta 	(zTemp2)
.b20b		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b20d		a0 01		ldy #$01			ldy 	#1
.b20f		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b211						_SACopyNewString:
.b211		a0 00		ldy #$00			ldy 	#0
.b213						_SACopyNSLoop:
.b213		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b215		c8		iny				iny 								; write two on in string storage
.b216		c8		iny				iny
.b217		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b219		88		dey				dey 								; this makes it one one.
.b21a		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b21c		d0 f5		bne $b213			bne 	_SACopyNSLoop
.b21e		7a		ply				ply
.b21f		60		rts				rts
.b220						_SALengthError:
.b220		a9 09		lda #$09		lda	#9
.b222		4c 2f 91	jmp $912f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b225						StringSystemInitialise:
.b225		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b227		8d 0e 04	sta $040e			sta 	0+stringMemory
.b22a		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b22c		8d 0f 04	sta $040f			sta 	1+stringMemory
.b22f		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b232		60		rts				rts
.b233						StringSpaceInitialise:
.b233		20 69 9c	jsr $9c69			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b236		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b238		8d 10 04	sta $0410			sta 	stringInitialised
.b23b		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b23e		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b241		ad 0f 04	lda $040f			lda 	stringMemory+1
.b244		3a		dec a				dec 	a
.b245		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b248		60		rts				rts
.b249						StringTempAllocate:
.b249		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b24b		b0 30		bcs $b27d			bcs 	_STALength
.b24d		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b250		30 05		bmi $b257			bmi 	_STAAllocate
.b252		48		pha				pha 								; save value to subtract.
.b253		20 33 b2	jsr $b233			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b256		68		pla				pla 								; restore it
.b257						_STAAllocate:
.b257		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b259		18		clc				clc  								; deliberate allows one more
.b25a		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b25d		8d 11 04	sta $0411			sta 	stringTempPointer
.b260		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b262		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b264		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b267		69 ff		adc #$ff			adc 	#$FF
.b269		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b26c		85 3d		sta $3d				sta 	zsTemp+1
.b26e		95 60		sta $60,x			sta 	NSMantissa1,x
.b270		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b272		74 70		stz $70,x			stz 	NSMantissa3,x
.b274		a9 10		lda #$10			lda 	#NSTString
.b276		95 50		sta $50,x			sta 	NSStatus,x
.b278		a9 00		lda #$00			lda 	#0 							; clear the target string
.b27a		92 3c		sta ($3c)			sta 	(zsTemp)
.b27c		60		rts				rts
.b27d						_STALength:
.b27d		a9 09		lda #$09		lda	#9
.b27f		4c 2f 91	jmp $912f		jmp	ErrorHandler
.b282						StringTempWrite:
.b282		48		pha				pha
.b283		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b285		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b287		d0 02		bne $b28b			bne 	_STWNoCarry
.b289		e6 3d		inc $3d				inc 	zsTemp+1
.b28b						_STWNoCarry:
.b28b		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b28d		92 3c		sta ($3c)			sta 	(zsTemp)
.b28f		68		pla				pla
.b290		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b291						Command_VERIFY:
.b291		20 d2 9f	jsr $9fd2			jsr 	EvaluateString 				; file name to verify
.b294		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b296		a5 36		lda $36				lda 	zTemp0
.b298		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b29b		b0 4b		bcs $b2e8			bcs 	_CVErrorHandler 			; error, so fail.
.b29d		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.b2a0		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b2a3		9c 5d 06	stz $065d			stz 	LoadEOFFlag 				; clear EOF Flag.
.b2a6		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b2a8		85 30		sta $30				sta 	codePtr
.b2aa		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b2ac		85 31		sta $31				sta 	codePtr+1
.b2ae						_CVLoop:
.b2ae		20 7a 8a	jsr $8a7a			jsr 	LoadReadLine 				; get next line.
.b2b1		f0 27		beq $b2da			beq 	_CVExit 					; end, exit.
.b2b3		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.b2b6		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.b2b9		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.b2bc		f0 f0		beq $b2ae			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b2be		a0 00		ldy #$00			ldy 	#0 							; start compare
.b2c0						_CVCompareLoop:
.b2c0		b1 30		lda ($30),y			lda 	(codePtr),y
.b2c2		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.b2c5		d0 1c		bne $b2e3			bne 	_CVCompareError
.b2c7		c8		iny				iny
.b2c8		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.b2cb		d0 f3		bne $b2c0			bne 	_CVCompareLoop
.b2cd		18		clc				clc
.b2ce		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b2d0		65 30		adc $30				adc 	codePtr
.b2d2		85 30		sta $30				sta 	codePtr
.b2d4		90 02		bcc $b2d8			bcc 	_CREExit
.b2d6		e6 31		inc $31				inc 	codePtr+1 					; carry
.b2d8						_CREExit:
.b2d8		80 d4		bra $b2ae			bra 	_CVLoop
.b2da						_CVExit:
.b2da		ad 5e 06	lda $065e			lda 	CurrentFileStream
.b2dd		20 71 80	jsr $8071			jsr 	KNLCloseFile
.b2e0		4c 4f 8a	jmp $8a4f			jmp 	CLComplete
.b2e3						_CVCompareError:
.b2e3		a9 1b		lda #$1b		lda	#27
.b2e5		4c 2f 91	jmp $912f		jmp	ErrorHandler
.b2e8						_CVErrorHandler:
.b2e8		4c 6c 8a	jmp $8a6c			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b2eb						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 71 06	ldy $0671			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 71 06	ldy $0671			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 72 06	lda $0672			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 71 06	sty $0671			sty 	EXTColumn
.c02d	a02d	cc 73 06	cpy $0673			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 70 06	inc $0670			inc 	EXTRow  					; bump row
.c035	a035	9c 71 06	stz $0671			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 70 06	lda $0670			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 74 06	cmp $0674			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 73 06	adc $0673			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 71 06	dec $0671			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 71 06	stz $0671			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 70 06	dec $0670			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 70 06	lda $0670			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 70 06	dec $0670			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 73 06	sbc $0673			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 71 06	sty $0671			sty 	EXTColumn
.c08c	a08c	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 71 06	sty $0671			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 74 06	lda $0674			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 70 06	cmp $0670			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 70 06	inc $0670			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 73 06	adc $0673			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 71 06	lda $0671			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 71 06	sta $0671			sta 	EXTColumn
.c0c9	a0c9	cd 73 06	cmp $0673			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 71 06	dec $0671			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 73 06	cpy $0673			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 72 06	and $0672			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 72 06	sta $0672			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 72 06	ora $0672			ora 	EXTTextColour
.c13c	a13c	8d 72 06	sta $0672			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 72 06	lda $0672			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 72 06	lda $0672			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 70 06	stz $0670			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 71 06	stz $0671			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 71 06	lda $0671			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 70 06	lda $0670			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 0d bc	jsr $bc0d			jsr 	PagedInputSingleCharacter
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad 71 06	lda $0671			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac 71 06	ldy $0671			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac 71 06	ldy $0671			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc 71 06	cpy $0671			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad 73 06	lda $0673			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0670						EXTRow:
>0670								.fill 	1
.0671						EXTColumn:
>0671								.fill 	1
.0672						EXTTextColour:
>0672								.fill 	1
.0673						EXTScreenWidth:
>0673								.fill 	1
.0674						EXTScreenHeight:
>0674								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d 72 06	sta $0672			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d 73 06	sta $0673			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d 74 06	sta $0674			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad 70 06	lda $0670			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0675						gxCurrentX:
>0675								.fill 	2
.0677						gxCurrentY:
>0677								.fill 	2
.0679						gxLastX:
>0679								.fill 	2
.067b						gxLastY:
>067b								.fill 	2
.067d						gxX0:
>067d								.fill 	2
.067f						gxY0:
>067f								.fill 	2
.0681						gxX1:
>0681								.fill 	2
.0683						gxY1:
>0683								.fill 	2
.0685						gxSpritesOn:
>0685								.fill 	1
.0686						gxBitmapsOn:
>0686								.fill 	1
.0687						gxBasePage:
>0687								.fill 	1
.0688						gxSpritePage:
>0688								.fill 	1
.0689						gxHeight:
>0689								.fill 	1
.068a						gxMode:
>068a								.fill 	1
.068b						gxColour:
>068b								.fill 	1
.068c						gxEORValue:
>068c								.fill 	1
.068d						gxANDValue:
>068d								.fill 	1
.068e						gxOriginalLUTValue:
>068e								.fill 	1
.068f						gxOffset:
>068f								.fill 	1
.0690						GSCurrentSpriteID:
>0690								.fill 	1
.0691						GSCurrentSpriteAddr:
>0691								.fill 	2
.0693						gxSpriteOffsetBase:
>0693								.fill 	2
.0695						gxSpriteLow:
>0695								.fill 	64
.06d5						gxSpriteHigh:
>06d5								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd 75 06	lda $0675,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d 79 06	sta $0679,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d 77 06	sta $0677			sta 	gxCurrentY
.c7e7	a7e7	9c 78 06	stz $0678			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d 75 06	sta $0675			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d 76 06	sta $0676			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad 76 06	lda $0676			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad 75 06	lda $0675			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad 77 06	lda $0677			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 89 06	cmp $0689			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd 75 06	lda $0675,x			lda 	gxCurrentX,x
.c819	a819	9d 7d 06	sta $067d,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 18 07	sta $0718			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 86 06	lda $0686			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 19 07	stz $0719			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 16 07	lda $0716			lda 	gxxCentre					; while x <= y
.c848	a848	cd 17 07	cmp $0717			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 17 07	lda $0717			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 16 07	lda $0716			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 17 07	ldx $0717			ldx	 	gxYCentre
.c875	a875	8d 17 07	sta $0717			sta 	gxYCentre
.c878	a878	8e 16 07	stx $0716			stx 	gxxCentre
.c87b	a87b	ad 19 07	lda $0719			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 19 07	sta $0719			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 18 07	lda $0718	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 19 07	lda $0719			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 17 07	lda $0717			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 16 07	lda $0716			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 18 07	lda $0718			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 17 07	sbc $0717			sbc 	gxYCentre
.c8bc	a8bc	8d 17 07	sta $0717			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 81 06	lda $0681,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 7d 06	sta $067d,x			sta 	gxX0,x
.c8d3	a8d3	bd 82 06	lda $0682,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 7e 06	sta $067e,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 19 07	stz $0719			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 16 07	inc $0716			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 16 07	lda $0716			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 16 07	inc $0716			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 17 07	dec $0717			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 16 07	lda $0716			lda 	gxxCentre
.c8fc	a8fc	ed 17 07	sbc $0717			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 19 07	dec $0719			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 83 06	lda $0683			lda 	gxY1
.c935	a935	ed 7f 06	sbc $067f			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 15 07	sta $0715			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 16 07	stz $0716			stz 	gxxCentre
.c949	a949	ad 15 07	lda $0715			lda 	gxRadius
.c94c	a94c	8d 17 07	sta $0717			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 81 06	lda $0681,x			lda 	gxX1,x
.c964	a964	7d 7d 06	adc $067d,x			adc 	gxX0,x
.c967	a967	9d 81 06	sta $0681,x			sta 	gxX1,x
.c96a	a96a	bd 82 06	lda $0682,x			lda 	gxX1+1,x
.c96d	a96d	7d 7e 06	adc $067e,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 82 06	sta $0682,x			sta 	gxX1+1,x
.c974	a974	7e 81 06	ror $0681,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0715						gxRadius:
>0715								.fill 	1
.0716						gxxCentre:
>0716								.fill 	1
.0717						gxYCentre:
>0717								.fill 	1
.0718						gxIsFillMode:
>0718								.fill 	1
.0719						gxYChanged:
>0719								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 86 06	lda $0686			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 89 06	lda $0689			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 87 06	adc $0687			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 87 06	cmp $0687			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 85 06	stz $0685			stz 	gxSpritesOn
.c9d1	a9d1	9c 86 06	stz $0686			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e 75 06	stz $0675,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 86 06	sta $0686			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 87 06	sta $0687			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 89 06	stx $0689			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 85 06	sta $0685			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 88 06	sta $0688			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d 93 06	sta $0693			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d 94 06	sta $0694			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c 92 06	stz $0692			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e d5 06	stz $06d5,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 86 06	lda $0686			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac 8f 06	ldy $068f			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d 8d 06	and $068d			and 	gxANDValue
.ca9e	aa9e	4d 8c 06	eor $068c			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 1c 07	lda $071c			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 7d 06	lda $067d			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 81 06	eor $0681			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 7e 06	lda $067e			lda 	gxX0+1
.cac4	aac4	4d 82 06	eor $0682			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 83 06	lda $0683			lda 	gxY1
.cacb	aacb	4d 7f 06	eor $067f			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 1e 07	lda $071e			lda 	gxPosition
.cad3	aad3	6d 1f 07	adc $071f			adc 	gxAdjust
.cad6	aad6	8d 1e 07	sta $071e			sta 	gxPosition
.cad9	aad9	9c 21 07	stz $0721			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 20 07	cmp $0720			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 21 07	dec $0721			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 20 07	sbc $0720			sbc 	gxTotal
.caea	aaea	8d 1e 07	sta $071e			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 1c 07	lda $071c			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 21 07	lda $0721			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 21 07	lda $0721			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 1d 07	lda $071d			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 7d 06	lda $067d			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 7e 06	dec $067e			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 7d 06	dec $067d			dec 	gxX0
.cb1b	ab1b	ce 8f 06	dec $068f			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad 8f 06	lda $068f			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 7d 06	inc $067d			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 7e 06	inc $067e			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee 8f 06	inc $068f			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 7f 06	inc $067f			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 83 06	lda $0683			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 7f 06	sbc $067f			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 1b 07	sta $071b			sta 	gxDiffY
.cb63	ab63	9c 1d 07	stz $071d			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 81 06	lda $0681			lda 	gxX1
.cb6a	ab6a	ed 7d 06	sbc $067d			sbc 	gxX0
.cb6d	ab6d	8d 1a 07	sta $071a			sta 	gxDiffX
.cb70	ab70	ad 82 06	lda $0682			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 7e 06	sbc $067e			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 1a 07	ror $071a			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 1a 07	sbc $071a			sbc 	gxDiffX
.cb83	ab83	8d 1a 07	sta $071a			sta 	gxDiffX
.cb86	ab86	ce 1d 07	dec $071d			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 1c 07	stz $071c			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 1b 07	lda $071b			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 1f 07	sta $071f			sta 	gxAdjust
.cb92	ab92	ad 1a 07	lda $071a			lda 	gxDiffX
.cb95	ab95	8d 20 07	sta $0720			sta 	gxTotal
.cb98	ab98	ad 1b 07	lda $071b			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 1a 07	cmp $071a			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 1c 07	dec $071c			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 1a 07	lda $071a			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 1f 07	sta $071f			sta 	gxAdjust
.cba9	aba9	ad 1b 07	lda $071b			lda 	gxDiffY
.cbac	abac	8d 20 07	sta $0720			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 20 07	lda $0720			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 1e 07	sta $071e			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.071a						gxDiffX:
>071a								.fill 	1
.071b						gxDiffY:
>071b								.fill 	1
.071c						gxIsDiffYLarger:
>071c								.fill 	1
.071d						gxDXNegative:
>071d								.fill 	1
.071e						gxPosition:
>071e								.fill 	1
.071f						gxAdjust:
>071f								.fill 	1
.0720						gxTotal:
>0720								.fill 	1
.0721						gxAddSelect:
>0721								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 8b 06	stx $068b			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 8a 06	sta $068a			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c 8d 06	stz $068d			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 8b 06	ldx $068b			ldx 	gxColour
.cbc9	abc9	8e 8c 06	stx $068c			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e 8d 06	stx $068d			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c 8c 06	stz $068c			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad 8d 06	lda $068d			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d 8d 06	sta $068d			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac 8f 06	ldy $068f			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d 8d 06	and $068d			and 	gxANDValue
.cbf3	abf3	4d 8c 06	eor $068c			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 86 06	lda $0686			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 7f 06	lda $067f			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 83 06	cmp $0683			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 7f 06	inc $067f			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 7f 06	lda $067f			lda 	gxY0 						; reached last line
.cc25	ac25	cd 83 06	cmp $0683			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 81 06	lda $0681			lda		gxX1
.cc42	ac42	ed 7d 06	sbc $067d			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 82 06	lda $0682			lda 	gxX1+1
.cc4a	ac4a	ed 7e 06	sbc $067e			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad 8f 06	lda $068f			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac 8f 06	ldy $068f			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d 8d 06	and $068d			and 	gxANDValue
.cc67	ac67	4d 8c 06	eor $068c			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d 8d 06	and $068d			and 	gxANDValue
.cc85	ac85	4d 8c 06	eor $068c			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d 8d 06	and $068d			and 	gxANDValue
.cc9d	ac9d	4d 8c 06	eor $068c			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d 8f 06	sta $068f			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 22 07	sta $0722			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 23 07	sta $0723			sta 	gxMask 						; and mask
.ccc4	acc4	ad 86 06	lda $0686			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 7f 06	lda $067f			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 25 07	sty $0725			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 24 07	stx $0724			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 27 07	lda $0727			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 26 07	sta $0726			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 27 07	bit $0727			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 23 07	lda $0723			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 26 07	lda $0726			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 7f 06	lda $067f			lda 	gxY0 						; off screen
.ccfd	acfd	cd 89 06	cmp $0689			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 22 07	cmp $0722			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 7f 06	sta $067f			sta 	gxY0
.cd16	ad16	ae 26 07	ldx $0726			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 22 07	lda $0722			lda 	gxSize
.cd1d	ad1d	6d 7d 06	adc $067d			adc 	gxX0
.cd20	ad20	8d 7d 06	sta $067d			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 7e 06	inc $067e			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 24 07	jmp ($0724)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac 8f 06	ldy $068f			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 26 07	lda $0726			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 8a 06	bit $068a			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 23 07	lda $0723			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 27 07	lda $0727			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d 8d 06	and $068d			and 	gxANDValue
.cd61	ad61	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 22 07	cmp $0722			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 7f 06	inc $067f			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0722						gxSize:
>0722								.fill 	1
.0723						gxMask:
>0723								.fill 	1
.0724						gxAcquireVector:
>0724								.fill 	2
.0726						gxScale:
>0726								.fill 	1
.0727						gxUseMode:
>0727								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 8a 06	eor $068a			eor 	gxMode
.cd84	ad84	8d 27 07	sta $0727			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 8b 06	lda $068b			lda 	gxColour
.cdbd	adbd	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 85 06	lda $0685			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 8a 06	eor $068a			eor 	gxMode
.cdd1	add1	8d 27 07	sta $0727			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 28 07	lda $0728			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 88 06	lda $0688			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 29 07	ldx $0729			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 2b 07	adc $072b			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 2c 07	adc $072c			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 28 07	cpy $0728			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 85 06	lda $0685			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d 90 06	sta $0690			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d 92 06	sta $0692			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d 91 06	sta $0691			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 85 06	lda $0685			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 2b 07	lda $072b			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 2c 07	lda $072c			lda 	gxSpriteOffset+1
.ce92	ae92	6d 93 06	adc $0693			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad 94 06	lda $0694			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 29 07	lda $0729			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 2a 07	ora $072a			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 29 07	lda $0729			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d d5 06	ora $06d5,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 85 06	lda $0685			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 7d 06	adc $067d			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 7e 06	lda $067e			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 7f 06	adc $067f			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 7e 06	lsr $067e			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 7d 06	ror $067d			ror 	gxX0
.cf3d	af3d	4e 7d 06	lsr $067d			lsr 	gxX0
.cf40	af40	4e 7f 06	lsr $067f			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 7f 06	lsr $067f			lsr 	gxY0
.cf46	af46	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 7d 06	ora $067d			ora 	gxX0
.cf51	af51	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.cf54	af54	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 7f 06	ora $067f			ora 	gxY0
.cf5c	af5c	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d 8e 06	sta $068e			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad 8e 06	lda $068e			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 7f 06	lda $067f			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 7d 06	lda $067d			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d 8f 06	sta $068f			sta 	gxOffset
.cfae	afae	ad 7e 06	lda $067e			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 87 06	adc $0687			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad 8f 06	lda $068f			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d 8f 06	sta $068f			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 95 06	lda $0695,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d 95 06	ora $0695,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 d5 06	lda $06d5,y			lda 	gxSpriteHigh,y
.d000	b000	7d d5 06	adc $06d5,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 d5 06	lda $06d5,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 95 06	lda $0695,y			lda 	gxSpriteLow,y
.d02e	b02e	fd 95 06	sbc $0695,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 88 06	lda $0688			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 2c 07	sta $072c			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 29 07	sta $0729			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 28 07	sta $0728			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 2a 07	sta $072a			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 2b 07	sta $072b			sta 	gxSpriteOffset
.d07b	b07b	0e 2b 07	asl $072b			asl 	gxSpriteOffset
.d07e	b07e	2e 2c 07	rol $072c			rol 	gxSpriteOffset+1
.d081	b081	0e 2b 07	asl $072b			asl 	gxSpriteOffset
.d084	b084	2e 2c 07	rol $072c			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.0728						gxSizePixels:
>0728								.fill 	1
.0729						gxSizeBits:
>0729								.fill 	1
.072a						gxSpriteLUT:
>072a								.fill 	1
.072b						gxSpriteOffset:
>072b								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 7d 06	lda $067d			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 81 06	cmp $0681			cmp 	gxX1
.d098	b098	ad 7e 06	lda $067e			lda 	gxX0+1
.d09b	b09b	ed 82 06	sbc $0682			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 7f 06	lda $067f			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 83 06	cmp $0683			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 7d 06	lda $067d,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 7d 06	lda $067d,y			lda 	gxX0,y
.d0c8	b0c8	9d 7d 06	sta $067d,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 7d 06	sta $067d,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d10f	b10f	45 24 28
>d112	b112	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d11a	b11a	45 24 28
>d11d	b11d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d123	b123	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d129	b129	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d131	b131	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d138	b138	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d13f	b13f	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d146	b146	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d14e	b14e	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d154	b154	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d15a	b15a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d161	b161	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d167	b167	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d16d	b16d	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d174	b174	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d17c	b17c	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d184	b184	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d18c	b18c	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d194	b194	47 28
>d196	b196	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d19e	b19e	28
>d19f	b19f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d1a7	b1a7	28
>d1a8	b1a8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1ae	b1ae	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1b4	b1b4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1ba	b1ba	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1c1	b1c1	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1c9	b1c9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1cf	b1cf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1d5	b1d5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1da	b1da	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1de	b1de	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1e4	b1e4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1ec	b1ec	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1f3	b1f3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1fa	b1fa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d202	b202	43
>d203	b203	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d209	b209	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d20f	b20f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d216	b216	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d21c	b21c	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d220	b220	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d226	b226	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d22e	b22e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d235	b235	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d23a	b23a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d241	b241	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d249	b249	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $b8 CPRINT
>d251	b251	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b9 DATA
>d257	b257	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ba DIM
>d25c	b25c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bb DOWNTO
>d264	b264	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bc ELSE
>d26a	b26a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bd FROM
>d270	b270	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $be GFX
>d275	b275	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bf GOSUB
>d27c	b27c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $c0 GOTO
>d282	b282	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d288	b288	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d28f	b28f	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c3 INPUT
>d296	b296	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d29b	b29b	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2a1	b2a1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2a8	b2a8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2ad	b2ad	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2b1	b2b1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2b9	b2b9	45
>d2ba	b2ba	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2c2	b2c2	45
>d2c3	b2c3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2c9	b2c9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2cf	b2cf	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2d6	b2d6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d2dd	b2dd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d2e4	b2e4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $d0 PRINT
>d2eb	b2eb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d2f1	b2f1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d2f7	b2f7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d2fc	b2fc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d4 RETURN
>d304	b304	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d5 SOLID
>d30b	b30b	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d6 SOUND
>d312	b312	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d7 SPRITE
>d31a	b31a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d8 TEXT
>d320	b320	02 a3 54 4f				.text	2,$a3,"TO"             ; $d9 TO
>d324	b324	ff					.text	$FF
.d325	b325					KeywordSet1:
>d325	b325	00 65					.text	0,$65,""               ; $80 !0:EOF
>d327	b327	00 58					.text	0,$58,""               ; $81 !1:SH1
>d329	b329	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d32b	b32b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d333	b333	4c 45
>d335	b335	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d33d	b33d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d345	b345	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d34c	b34c	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d353	b353	03 df 44 49 52				.text	3,$df,"DIR"            ; $88 DIR
>d358	b358	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $89 DRIVE
>d35f	b35f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8a END
>d364	b364	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8b EXPLODE
>d36c	b36c	45
>d36d	b36d	02 96 47 4f				.text	2,$96,"GO"             ; $8c GO
>d371	b371	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $8d HIMEM
>d378	b378	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8e LIST
>d37e	b37e	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8f LOAD
>d384	b384	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $90 NEW
>d389	b389	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $91 PING
>d38f	b38f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $92 RESTORE
>d397	b397	45
>d398	b398	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $93 RUN
>d39d	b39d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $94 SAVE
>d3a3	b3a3	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $95 SETDATE
>d3ab	b3ab	45
>d3ac	b3ac	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $96 SETTIME
>d3b4	b3b4	45
>d3b5	b3b5	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $97 SHOOT
>d3bc	b3bc	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $98 SPRITES
>d3c4	b3c4	53
>d3c5	b3c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $99 STOP
>d3cb	b3cb	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $9a VERIFY
>d3d3	b3d3	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $9b XGO
>d3d8	b3d8	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $9c XLOAD
>d3df	b3df	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9d ZAP
>d3e4	b3e4	ff					.text	$FF
.d3e5	b3e5					KeywordSet2:
>d3e5	b3e5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3e7	b3e7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3e9	b3e9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3eb	b3eb	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3f0	b3f0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3f5	b3f5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3fa	b3fa	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3ff	b3ff	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d404	b404	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d409	b409	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d40e	b40e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d413	b413	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d418	b418	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d41d	b41d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d422	b422	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d427	b427	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d42c	b42c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d431	b431	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d436	b436	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d43b	b43b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d440	b440	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d445	b445	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d44a	b44a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d44f	b44f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d454	b454	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d459	b459	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d45e	b45e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d463	b463	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d468	b468	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d46d	b46d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d472	b472	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d477	b477	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d47c	b47c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d481	b481	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d486	b486	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d48b	b48b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d490	b490	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d495	b495	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d49a	b49a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d49f	b49f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4a4	b4a4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4a9	b4a9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ae	b4ae	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4b3	b4b3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4b8	b4b8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4bd	b4bd	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4c2	b4c2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4c7	b4c7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4cc	b4cc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4d1	b4d1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4d6	b4d6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4db	b4db	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4e0	b4e0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4e5	b4e5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ea	b4ea	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ef	b4ef	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4f4	b4f4	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4f9	b4f9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4fe	b4fe	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d503	b503	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d508	b508	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d50d	b50d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d512	b512	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d517	b517	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d51c	b51c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d521	b521	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d526	b526	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d52b	b52b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d530	b530	ff					.text	$FF
.d531	b531					Export_TKListConvertLine:
.d531	b531	48		pha				pha 								; save indent on the stack
.d532	b532	9c 1d 04	stz $041d			stz 	tbOffset
.d535	b535	9c 2d 04	stz $042d			stz 	tokenBuffer
.d538	b538	9c 29 04	stz $0429			stz 	currentListColour
.d53b	b53b	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d53d	b53d	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d540	b540	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d542	b542	b1 30		lda ($30),y			lda 	(codePtr),y
.d544	b544	aa		tax				tax
.d545	b545	88		dey				dey
.d546	b546	b1 30		lda ($30),y			lda 	(codePtr),y
.d548	b548	20 2b b7	jsr $b72b			jsr 	LCLWriteNumberXA
.d54b	b54b	68		pla				pla 								; adjustment to indent
.d54c	b54c	48		pha				pha 								; save on stack
.d54d	b54d	10 0c		bpl $b55b			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d54f	b54f	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d550	b550	6d 26 04	adc $0426			adc 	listIndent
.d553	b553	8d 26 04	sta $0426			sta 	listIndent
.d556	b556	10 03		bpl $b55b			bpl 	_LCNoAdjust
.d558	b558	9c 26 04	stz $0426			stz 	listIndent
.d55b	b55b					_LCNoAdjust:
.d55b	b55b	18		clc				clc		 							; work out actual indent.
.d55c	b55c	ad 26 04	lda $0426			lda 	listIndent
.d55f	b55f	0a		asl a				asl 	a
.d560	b560	69 07		adc #$07			adc 	#7
.d562	b562	85 36		sta $36				sta 	zTemp0
.d564	b564					_LCPadOut:
.d564	b564	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d566	b566	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d569	b569	ad 1d 04	lda $041d			lda 	tbOffset
.d56c	b56c	c5 36		cmp $36				cmp 	zTemp0
.d56e	b56e	d0 f4		bne $b564			bne 	_LCPadOut
.d570	b570	a0 03		ldy #$03			ldy 	#3 							; start position.
.d572	b572					_LCMainLoop:
.d572	b572	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d574	b574	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d577	b577	b1 30		lda ($30),y			lda 	(codePtr),y
.d579	b579	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d57b	b57b	f0 17		beq $b594			beq 	_LCExit
.d57d	b57d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d57f	b57f	90 1e		bcc $b59f			bcc 	_LCDoubles
.d581	b581	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d583	b583	90 2a		bcc $b5af			bcc 	_LCShiftPunc
.d585	b585	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d587	b587	90 35		bcc $b5be			bcc 	_LCPunctuation
.d589	b589	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d58b	b58b	90 51		bcc $b5de			bcc 	_LCIdentifiers
.d58d	b58d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d58f	b58f	90 73		bcc $b604			bcc 	_LCTokens
.d591	b591	4c 64 b6	jmp $b664			jmp 	_LCData 					; 254-5 are data objects
.d594	b594					_LCExit:
.d594	b594	68		pla				pla 								; get old indent adjust
.d595	b595	30 07		bmi $b59e			bmi 	_LCExit2
.d597	b597	18		clc				clc 								; add to indent if +ve
.d598	b598	6d 26 04	adc $0426			adc 	listIndent
.d59b	b59b	8d 26 04	sta $0426			sta 	listIndent
.d59e	b59e					_LCExit2:
.d59e	b59e	60		rts				rts
.d59f	b59f					_LCDoubles:
.d59f	b59f	48		pha				pha
.d5a0	b5a0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5a1	b5a1	29 02		and #$02			and 	#2
.d5a3	b5a3	09 3c		ora #$3c			ora 	#60 						; make < >
.d5a5	b5a5	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5a8	b5a8	68		pla				pla 								; restore, do lower bit
.d5a9	b5a9	29 03		and #$03			and 	#3
.d5ab	b5ab	09 3c		ora #$3c			ora 	#60
.d5ad	b5ad	80 0f		bra $b5be			bra		_LCPunctuation 				; print, increment, loop
.d5af	b5af					_LCShiftPunc:
.d5af	b5af	aa		tax				tax 								; save in X
.d5b0	b5b0	29 07		and #$07			and 	#7 							; lower 3 bits
.d5b2	b5b2	f0 02		beq $b5b6			beq 	_LCNoAdd
.d5b4	b5b4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5b6	b5b6					_LCNoAdd:
.d5b6	b5b6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5b8	b5b8	90 02		bcc $b5bc			bcc 	_LCNoAdd2
.d5ba	b5ba	09 20		ora #$20			ora 	#32 						; adds $20
.d5bc	b5bc					_LCNoAdd2:
.d5bc	b5bc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5be	b5be					_LCPunctuation:
.d5be	b5be	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5c0	b5c0	d0 03		bne $b5c5			bne 	_LCPContinue
.d5c2	b5c2	20 d9 b6	jsr $b6d9			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5c5	b5c5					_LCPContinue:
.d5c5	b5c5	c9 2e		cmp #$2e			cmp 	#'.'
.d5c7	b5c7	f0 08		beq $b5d1			beq 	_LCPIsConstant
.d5c9	b5c9	c9 30		cmp #$30			cmp 	#'0'
.d5cb	b5cb	90 0b		bcc $b5d8			bcc 	_LCPNotConstant
.d5cd	b5cd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5cf	b5cf	b0 07		bcs $b5d8			bcs 	_LCPNotConstant
.d5d1	b5d1					_LCPIsConstant:
.d5d1	b5d1	48		pha				pha
.d5d2	b5d2	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5d4	b5d4	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5d7	b5d7	68		pla				pla
.d5d8	b5d8					_LCPNotConstant:
.d5d8	b5d8	c8		iny				iny 								; consume character
.d5d9	b5d9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite 					; write it out.
.d5dc	b5dc	80 94		bra $b572			bra 	_LCMainLoop 				; go round again.
.d5de	b5de					_LCIdentifiers:
.d5de	b5de	18		clc				clc 								; convert to physical address
.d5df	b5df	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5e1	b5e1	85 37		sta $37				sta 	zTemp0+1
.d5e3	b5e3	c8		iny				iny
.d5e4	b5e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e6	b5e6	85 36		sta $36				sta 	zTemp0
.d5e8	b5e8	c8		iny				iny
.d5e9	b5e9	5a		phy				phy 								; save position
.d5ea	b5ea	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5ec	b5ec	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5ef	b5ef	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5f1	b5f1					_LCOutIdentifier:
.d5f1	b5f1	c8		iny				iny
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5f4	b5f4	29 7f		and #$7f			and 	#$7F
.d5f6	b5f6	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d5f9	b5f9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5fc	b5fc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5fe	b5fe	10 f1		bpl $b5f1			bpl 	_LCOutIdentifier
.d600	b600	7a		ply				ply 								; restore position
.d601	b601	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d604	b604					_LCTokens:
.d604	b604	aa		tax				tax 								; token in X
.d605	b605	a9 e5		lda #$e5			lda 	#((KeywordSet2) & $FF)
.d607	b607	85 36		sta $36				sta 	0+zTemp0
.d609	b609	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d60b	b60b	85 37		sta $37				sta 	1+zTemp0
.d60d	b60d	e0 82		cpx #$82			cpx 	#$82
.d60f	b60f	f0 16		beq $b627			beq 	_LCUseShift
.d611	b611	a9 25		lda #$25			lda 	#((KeywordSet1) & $FF)
.d613	b613	85 36		sta $36				sta 	0+zTemp0
.d615	b615	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d617	b617	85 37		sta $37				sta 	1+zTemp0
.d619	b619	e0 81		cpx #$81			cpx 	#$81
.d61b	b61b	f0 0a		beq $b627			beq 	_LCUseShift
.d61d	b61d	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d61f	b61f	85 36		sta $36				sta 	0+zTemp0
.d621	b621	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d623	b623	85 37		sta $37				sta 	1+zTemp0
.d625	b625	80 01		bra $b628			bra 	_LCNoShift
.d627	b627					_LCUseShift:
.d627	b627	c8		iny				iny
.d628	b628					_LCNoShift:
.d628	b628	20 ed b6	jsr $b6ed			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d62b	b62b	b1 30		lda ($30),y			lda 	(codePtr),y
.d62d	b62d	aa		tax				tax 								; into X
.d62e	b62e					_LCFindText:
.d62e	b62e	ca		dex				dex
.d62f	b62f	10 0e		bpl $b63f			bpl 	_LCFoundText 				; found text.
.d631	b631	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d633	b633	1a		inc a				inc 	a 							; one extra for size
.d634	b634	38		sec				sec 								; one extra for checksum
.d635	b635	65 36		adc $36				adc 	zTemp0 						; go to next token
.d637	b637	85 36		sta $36				sta 	zTemp0
.d639	b639	90 f3		bcc $b62e			bcc 	_LCFindText
.d63b	b63b	e6 37		inc $37				inc 	zTemp0+1
.d63d	b63d	80 ef		bra $b62e			bra 	_LCFindText
.d63f	b63f					_LCFoundText:
.d63f	b63f	5a		phy				phy 								; save List position
.d640	b640	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d642	b642	aa		tax				tax
.d643	b643	a9 86		lda #$86			lda 	#CLIToken+$80
.d645	b645	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d648	b648	a0 02		ldy #$02			ldy 	#2
.d64a	b64a					_LCCopyToken:
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y
.d64c	b64c	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d64f	b64f	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d652	b652	c8		iny				iny
.d653	b653	ca		dex				dex
.d654	b654	d0 f4		bne $b64a			bne 	_LCCopyToken
.d656	b656	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d658	b658	f0 05		beq $b65f			beq 	_LCNoSpace
.d65a	b65a	a9 20		lda #$20			lda 	#' '
.d65c	b65c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d65f	b65f					_LCNoSpace:
.d65f	b65f	7a		ply				ply 								; restore position.
.d660	b660	c8		iny				iny 								; consume token
.d661	b661	4c 72 b5	jmp $b572			jmp 	_LCMainLoop 				; and go around again.
.d664	b664					_LCData:
.d664	b664	48		pha				pha 								; save type $FE/$FF
.d665	b665	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d667	b667	c9 fe		cmp #$fe			cmp 	#$FE
.d669	b669	f0 22		beq $b68d			beq 	_LCHaveOpener
.d66b	b66b	a2 22		ldx #$22			ldx 	#'"'
.d66d	b66d	a9 8f		lda #$8f			lda 	#CLIData+$80
.d66f	b66f	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d672	b672	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d674	b674	d0 17		bne $b68d			bne 	_LCHaveOpener
.d676	b676	88		dey				dey 								; what precedes it ?
.d677	b677	b1 30		lda ($30),y			lda 	(codePtr),y
.d679	b679	c8		iny				iny
.d67a	b67a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d67c	b67c	d0 0f		bne $b68d			bne 	_LCHaveOpener
.d67e	b67e	a9 09		lda #$09			lda 	#9 							; tab
.d680	b680	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d683	b683	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d685	b685	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d688	b688	a9 85		lda #$85			lda 	#CLIFComment+$80
.d68a	b68a	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d68d	b68d					_LCHaveOpener:
.d68d	b68d	8a		txa				txa 								; output prefix (# or ")
.d68e	b68e	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d691	b691	c8		iny				iny 								; get count
.d692	b692	b1 30		lda ($30),y			lda 	(codePtr),y
.d694	b694	aa		tax				tax
.d695	b695	c8		iny				iny 								; point at first character
.d696	b696					_LCOutData:
.d696	b696	b1 30		lda ($30),y			lda 	(codePtr),y
.d698	b698	c9 00		cmp #$00			cmp 	#0
.d69a	b69a	f0 03		beq $b69f			beq 	_LCNoPrint
.d69c	b69c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d69f	b69f					_LCNoPrint:
.d69f	b69f	c8		iny				iny
.d6a0	b6a0	ca		dex				dex
.d6a1	b6a1	d0 f3		bne $b696			bne 	_LCOutData
.d6a3	b6a3	68		pla				pla 								; closing " required ?
.d6a4	b6a4	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6a6	b6a6	d0 0f		bne $b6b7			bne 	_LCNoQuote
.d6a8	b6a8	a9 22		lda #$22			lda 	#'"'
.d6aa	b6aa	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6ad	b6ad	ad 72 06	lda $0672			lda 	EXTTextColour
.d6b0	b6b0	29 0f		and #$0f			and 	#$0F
.d6b2	b6b2	09 90		ora #$90			ora 	#$90
.d6b4	b6b4	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6b7	b6b7					_LCNoQuote:
.d6b7	b6b7	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d6ba	b6ba					LCLWriteColour:
.d6ba	b6ba	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6bd	b6bd	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d6c0	b6c0	d0 01		bne $b6c3			bne 	LCLWrite 					; if different, output it
.d6c2	b6c2	60		rts				rts
.d6c3	b6c3					LCLWrite:
.d6c3	b6c3	da		phx				phx
.d6c4	b6c4	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d6c7	b6c7	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d6ca	b6ca	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d6cd	b6cd	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d6d0	b6d0	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6d2	b6d2	30 03		bmi $b6d7			bmi 	_LCLNoColour
.d6d4	b6d4	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6d7	b6d7					_LCLNoColour:
.d6d7	b6d7	fa		plx				plx
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					LCLDeleteLastSpace:
.d6d9	b6d9	48		pha				pha
.d6da	b6da	da		phx				phx
.d6db	b6db	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6de	b6de	f0 0a		beq $b6ea			beq 	_LCDLSExit
.d6e0	b6e0	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6e3	b6e3	c9 20		cmp #$20			cmp 	#' '
.d6e5	b6e5	d0 03		bne $b6ea			bne 	_LCDLSExit
.d6e7	b6e7	ce 1d 04	dec $041d			dec 	tbOffset
.d6ea	b6ea					_LCDLSExit:
.d6ea	b6ea	fa		plx				plx
.d6eb	b6eb	68		pla				pla
.d6ec	b6ec	60		rts				rts
.d6ed	b6ed					LCLCheckSpaceRequired:
.d6ed	b6ed	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6f0	b6f0	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6f2	b6f2	f0 1b		beq $b70f			beq 	_LCCSRSpace
.d6f4	b6f4	c9 29		cmp #$29			cmp 	#')'
.d6f6	b6f6	f0 17		beq $b70f			beq 	_LCCSRSpace
.d6f8	b6f8	c9 23		cmp #$23			cmp 	#'#'
.d6fa	b6fa	f0 13		beq $b70f			beq 	_LCCSRSpace
.d6fc	b6fc	20 15 b7	jsr $b715			jsr 	LCLLowerCase 				; saves a little effort
.d6ff	b6ff	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d701	b701	90 11		bcc $b714			bcc 	_LCCSRExit
.d703	b703	c9 3a		cmp #$3a			cmp 	#"9"+1
.d705	b705	90 08		bcc $b70f			bcc 	_LCCSRSpace
.d707	b707	c9 61		cmp #$61			cmp 	#"a"
.d709	b709	90 09		bcc $b714			bcc 	_LCCSRExit
.d70b	b70b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d70d	b70d	b0 05		bcs $b714			bcs 	_LCCSRExit
.d70f	b70f					_LCCSRSpace:
.d70f	b70f	a9 20		lda #$20			lda 	#' '
.d711	b711	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d714	b714					_LCCSRExit:
.d714	b714	60		rts				rts
.d715	b715					LCLLowerCase:
.d715	b715	c9 41		cmp #$41			cmp 	#"A"
.d717	b717	90 06		bcc $b71f			bcc 	_LCLLCOut
.d719	b719	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d71b	b71b	b0 02		bcs $b71f			bcs 	_LCLLCOut
.d71d	b71d	69 20		adc #$20			adc 	#$20
.d71f	b71f					_LCLLCOut:
.d71f	b71f	60		rts				rts
.d720	b720					LCLUpperCase:
.d720	b720	c9 61		cmp #$61			cmp 	#"a"
.d722	b722	90 06		bcc $b72a			bcc 	_LCLUCOut
.d724	b724	c9 7b		cmp #$7b			cmp 	#"z"+1
.d726	b726	b0 02		bcs $b72a			bcs 	_LCLUCOut
.d728	b728	e9 1f		sbc #$1f			sbc 	#$1F
.d72a	b72a					_LCLUCOut:
.d72a	b72a	60		rts				rts
.d72b	b72b					LCLWriteNumberXA:
.d72b	b72b	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d72d	b72d					_LCLWNLoop1:
.d72d	b72d	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d72f	b72f					_LCLWNLoop2:
.d72f	b72f	48		pha				pha 								; save initial LSB
.d730	b730	38		sec				sec
.d731	b731	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d733	b733	f9 64 b7	sbc $b764,y			sbc 	_LCLWNTable,y
.d736	b736	48		pha				pha
.d737	b737	8a		txa				txa
.d738	b738	f9 65 b7	sbc $b765,y			sbc 	_LCLWNTable+1,y
.d73b	b73b	90 07		bcc $b744			bcc 	_LCLWNUnderflow
.d73d	b73d	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d73f	b73f	aa		tax				tax 								; update X
.d740	b740	68		pla				pla 								; restore A
.d741	b741	7a		ply				ply 								; throw original
.d742	b742	80 eb		bra $b72f			bra 	_LCLWNLoop2 				; try again.
.d744	b744					_LCLWNUnderflow:
.d744	b744	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d746	b746	d0 06		bne $b74e			bne 	_LCLWNOut
.d748	b748	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d74b	b74b	3a		dec a				dec 	a
.d74c	b74c	f0 04		beq $b752			beq 	_LCLWNNext
.d74e	b74e					_LCLWNOut:
.d74e	b74e	98		tya				tya
.d74f	b74f	20 5e b7	jsr $b75e			jsr 	_LCLWNOutDigit
.d752	b752					_LCLWNNext:
.d752	b752	7a		ply				ply 							 	; restore original value.
.d753	b753	68		pla				pla
.d754	b754	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d756	b756	c8		iny				iny
.d757	b757	c8		iny				iny
.d758	b758	84 37		sty $37				sty 	zTemp0+1
.d75a	b75a	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d75c	b75c	d0 cf		bne $b72d			bne 	_LCLWNLoop1
.d75e	b75e					_LCLWNOutDigit:
.d75e	b75e	09 30		ora #$30			ora 	#'0'
.d760	b760	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d763	b763	60		rts				rts
.d764	b764					_LCLWNTable:
>d764	b764	10 27						.word 	10000
>d766	b766	e8 03						.word 	1000
>d768	b768	64 00						.word 	100
>d76a	b76a	0a 00						.word 	10
.d76c	b76c					TOKSearchTable:
.d76c	b76c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d76e	b76e	85 36		sta $36				sta 	zTemp0
.d770	b770	a0 00		ldy #$00			ldy 	#0
.d772	b772	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d774	b774	85 38		sta $38				sta 	zTemp1
.d776	b776					_TSTLoop:
.d776	b776	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d778	b778	30 49		bmi $b7c3			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d77a	b77a	f0 2e		beq $b7aa			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d77c	b77c	c8		iny				iny 								; get the hash
.d77d	b77d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d77f	b77f	88		dey				dey
.d780	b780	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d783	b783	d0 25		bne $b7aa			bne 	_TSTNext
.d785	b785	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d788	b788	38		sec				sec
.d789	b789	ed 00 04	sbc $0400			sbc 	identStart
.d78c	b78c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d78e	b78e	d0 1a		bne $b7aa			bne 	_TSTNext
.d790	b790	5a		phy				phy 								; save Y , we might fail to match.
.d791	b791	c8		iny				iny 								; point to text
.d792	b792	c8		iny				iny
.d793	b793	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d796	b796					_TSTCompareName:
.d796	b796	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d799	b799	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d79b	b79b	d0 0c		bne $b7a9			bne 	_TSTNextPullY 				; fail, pullY and do next
.d79d	b79d	e8		inx				inx
.d79e	b79e	c8		iny				iny
.d79f	b79f	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7a2	b7a2	d0 f2		bne $b796			bne 	_TSTCompareName
.d7a4	b7a4	7a		ply				ply 								; throw Y
.d7a5	b7a5	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7a7	b7a7	38		sec				sec 								; return with CS = passed.
.d7a8	b7a8	60		rts				rts
.d7a9	b7a9					_TSTNextPullY:
.d7a9	b7a9	7a		ply				ply 								; restore current, fall through.
.d7aa	b7aa					_TSTNext:
.d7aa	b7aa	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ac	b7ac	98		tya				tya
.d7ad	b7ad	18		clc				clc
.d7ae	b7ae	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7b0	b7b0	1a		inc a				inc 	a 							; +1
.d7b1	b7b1	1a		inc a				inc 	a 							; +2
.d7b2	b7b2	a8		tay				tay
.d7b3	b7b3	10 c1		bpl $b776			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7b5	b7b5	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7b6	b7b6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7b8	b7b8	18		clc				clc  								; but have tables > 255 bytes
.d7b9	b7b9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7bb	b7bb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7bd	b7bd	90 b7		bcc $b776			bcc 	_TSTLoop
.d7bf	b7bf	e6 37		inc $37				inc 	zTemp0+1
.d7c1	b7c1	80 b3		bra $b776			bra 	_TSTLoop
.d7c3	b7c3					_TSTFail:
.d7c3	b7c3	18		clc				clc
.d7c4	b7c4	60		rts				rts
.d7c5	b7c5					Export_TKTokeniseLine:
.d7c5	b7c5	20 92 b9	jsr $b992			jsr 	LCLFixLineBufferCase 		; fix line case
.d7c8	b7c8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7ca	b7ca	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7cd	b7cd	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d7d0	b7d0	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d7d3	b7d3	a2 ff		ldx #$ff			ldx 	#$FF
.d7d5	b7d5					_TKFindFirst:
.d7d5	b7d5	e8		inx				inx
.d7d6	b7d6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7d9	b7d9	f0 62		beq $b83d			beq 	_TKExit
.d7db	b7db	c9 20		cmp #$20			cmp 	#' '
.d7dd	b7dd	90 f6		bcc $b7d5			bcc 	_TKFindFirst
.d7df	b7df	c9 30		cmp #$30			cmp 	#'0'
.d7e1	b7e1	90 07		bcc $b7ea			bcc 	_TKNoLineNumber
.d7e3	b7e3	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7e5	b7e5	b0 03		bcs $b7ea			bcs 	_TKNoLineNumber
.d7e7	b7e7	20 bc b9	jsr $b9bc			jsr 	TOKExtractLineNumber
.d7ea	b7ea					_TKNoLineNumber:
.d7ea	b7ea					_TKTokeniseLoop:
.d7ea	b7ea	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ed	b7ed	f0 4e		beq $b83d			beq 	_TKExit
.d7ef	b7ef	e8		inx				inx
.d7f0	b7f0	c9 20		cmp #$20			cmp 	#' '
.d7f2	b7f2	f0 f6		beq $b7ea			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7f4	b7f4	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7f5	b7f5	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7f7	b7f7	f0 68		beq $b861			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7f9	b7f9	c9 41		cmp #$41			cmp 	#'A'
.d7fb	b7fb	90 04		bcc $b801			bcc 	_TKTokenisePunctuation
.d7fd	b7fd	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7ff	b7ff	90 60		bcc $b861			bcc 	_TKTokeniseIdentifier
.d801	b801					_TKTokenisePunctuation:
.d801	b801	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d803	b803	f0 2e		beq $b833			beq 	_TKString
.d805	b805	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d807	b807	f0 2f		beq $b838			beq 	_TKHexConstant
.d809	b809	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d80b	b80b	f0 36		beq $b843			beq 	_TKCheckDouble
.d80d	b80d	c9 3e		cmp #$3e			cmp 	#'>'
.d80f	b80f	f0 32		beq $b843			beq 	_TKCheckDouble
.d811	b811					_TKStandardPunctuation:
.d811	b811	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d814	b814	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d816	b816	90 0e		bcc $b826			bcc 	_TKNoShift
.d818	b818	48		pha				pha 								; save. we are about to convert this punctuation token from
.d819	b819	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d81b	b81b	85 36		sta $36				sta 	zTemp0
.d81d	b81d	68		pla				pla
.d81e	b81e	29 20		and #$20			and 	#32 						; bit 5
.d820	b820	4a		lsr a				lsr 	a 							; shift into bit 3
.d821	b821	4a		lsr a				lsr 	a
.d822	b822	05 36		ora $36				ora 	zTemp0
.d824	b824	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d826	b826					_TKNoShift:
.d826	b826	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; write the punctuation character
.d829	b829	e8		inx				inx 								; consume the character
.d82a	b82a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d82c	b82c	d0 bc		bne $b7ea			bne 	_TKTokeniseLoop 			; and loop round again.
.d82e	b82e	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment 			; comment checl
.d831	b831	80 b7		bra $b7ea			bra 	_TKTokeniseLoop
.d833	b833					_TKString:
.d833	b833	20 21 b9	jsr $b921			jsr 	TOKTokenString
.d836	b836	80 b2		bra $b7ea			bra 	_TKTokeniseLoop
.d838	b838					_TKHexConstant:
.d838	b838	20 5c b9	jsr $b95c			jsr 	TOKHexConstant
.d83b	b83b	80 ad		bra $b7ea			bra 	_TKTokeniseLoop
.d83d	b83d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d83f	b83f	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d842	b842	60		rts				rts
.d843	b843					_TKCheckDouble:
.d843	b843	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d846	b846	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d848	b848	90 c7		bcc $b811			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d84a	b84a	c9 3f		cmp #$3f			cmp 	#'>'+1
.d84c	b84c	b0 c3		bcs $b811			bcs 	_TKStandardPunctuation
.d84e	b84e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d851	b851	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d853	b853	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d854	b854	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d857	b857	38		sec				sec
.d858	b858	e9 3c		sbc #$3c			sbc 	#'<'
.d85a	b85a	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; this is in the range 0-7
.d85d	b85d	e8		inx				inx 								; consume both
.d85e	b85e	e8		inx				inx
.d85f	b85f	80 89		bra $b7ea			bra 	_TKTokeniseLoop
.d861	b861					_TKTokeniseIdentifier:
.d861	b861	8e 00 04	stx $0400			stx 	identStart 					; save start
.d864	b864	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d867	b867					_TKCheckLoop:
.d867	b867	e8		inx				inx 								; look at next, we know first is identifier already.
.d868	b868	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d86b	b86b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d86d	b86d	f0 f8		beq $b867			beq 	_TKCheckLoop
.d86f	b86f	c9 30		cmp #$30			cmp	 	#"0"
.d871	b871	90 0c		bcc $b87f			bcc 	_TKEndIdentifier
.d873	b873	c9 3a		cmp #$3a			cmp 	#"9"+1
.d875	b875	90 f0		bcc $b867			bcc 	_TKCheckLoop
.d877	b877	c9 41		cmp #$41			cmp	 	#"A"
.d879	b879	90 04		bcc $b87f			bcc 	_TKEndIdentifier
.d87b	b87b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d87d	b87d	90 e8		bcc $b867			bcc 	_TKCheckLoop
.d87f	b87f					_TKEndIdentifier:
.d87f	b87f	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d882	b882	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d884	b884	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d886	b886	f0 06		beq $b88e			beq 	_TKHasTypeCharacter
.d888	b888	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d88a	b88a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d88c	b88c	d0 07		bne $b895			bne 	_TKNoTypeCharacter
.d88e	b88e					_TKHasTypeCharacter:
.d88e	b88e	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d891	b891	e8		inx				inx 								; consume the type character
.d892	b892	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d895	b895					_TKNoTypeCharacter:
.d895	b895	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d897	b897	d0 09		bne $b8a2			bne 	_TKNoArray
.d899	b899	e8		inx				inx 								; skip the (
.d89a	b89a	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d89d	b89d	09 04		ora #$04			ora 	#$04
.d89f	b89f	8d 04 04	sta $0404			sta 	identTypeByte
.d8a2	b8a2					_TKNoArray:
.d8a2	b8a2	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8a5	b8a5	20 7d b9	jsr $b97d			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8a8	b8a8	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8aa	b8aa	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8ac	b8ac	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8af	b8af	a2 00		ldx #$00			ldx 	#0
.d8b1	b8b1	b0 1f		bcs $b8d2			bcs 	_TKFoundToken
.d8b3	b8b3	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8b5	b8b5	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.d8b7	b8b7	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8ba	b8ba	a2 81		ldx #$81			ldx 	#$81
.d8bc	b8bc	b0 14		bcs $b8d2			bcs 	_TKFoundToken
.d8be	b8be	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d8c0	b8c0	a9 e5		lda #$e5			lda 	#(KeywordSet2) & $FF
.d8c2	b8c2	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8c5	b8c5	a2 82		ldx #$82			ldx 	#$82
.d8c7	b8c7	b0 09		bcs $b8d2			bcs 	_TKFoundToken
.d8c9	b8c9	20 0d ba	jsr $ba0d			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8cc	b8cc	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8cf	b8cf	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8d2	b8d2					_TKFoundToken:
.d8d2	b8d2	48		pha				pha 								; save token
.d8d3	b8d3	8a		txa				txa 								; shift in X, is there one ?
.d8d4	b8d4	f0 03		beq $b8d9			beq 	_TKNoTShift
.d8d6	b8d6	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; if so, write it out
.d8d9	b8d9					_TKNoTShift:
.d8d9	b8d9	68		pla				pla 								; restore and write token
.d8da	b8da	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d8dd	b8dd	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8df	b8df	d0 0d		bne $b8ee			bne 	_TKNotRem 			 		; not shifted ?
.d8e1	b8e1	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d8e3	b8e3	d0 09		bne $b8ee			bne 	_TKNotRem
.d8e5	b8e5	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8e8	b8e8	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment
.d8eb	b8eb	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop
.d8ee	b8ee					_TKNotRem:
.d8ee	b8ee	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8f1	b8f1	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8f4	b8f4					TOKCheckComment:
.d8f4	b8f4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8f7	b8f7	e8		inx				inx
.d8f8	b8f8	c9 20		cmp #$20			cmp 	#' '
.d8fa	b8fa	f0 f8		beq $b8f4			beq 	TOKCheckComment
.d8fc	b8fc	ca		dex				dex 								; first non space character
.d8fd	b8fd	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8ff	b8ff	f0 1f		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d901	b901	c9 00		cmp #$00			cmp 	#0 							; EOL
.d903	b903	f0 1b		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d905	b905	da		phx				phx
.d906	b906					_TOKCCLowerCase:
.d906	b906	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d909	b909	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d90b	b90b	90 09		bcc $b916			bcc 	_TOKKCNotUC
.d90d	b90d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d90f	b90f	b0 05		bcs $b916			bcs 	_TOKKCNotUC
.d911	b911	49 20		eor #$20			eor 	#$20
.d913	b913	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d916	b916					_TOKKCNotUC:
.d916	b916	e8		inx				inx
.d917	b917	c9 00		cmp #$00			cmp 	#0
.d919	b919	d0 eb		bne $b906			bne 	_TOKCCLowerCase
.d91b	b91b	fa		plx				plx
.d91c	b91c	ca		dex				dex 								; tokenise string expects initial skip.
.d91d	b91d	20 21 b9	jsr $b921			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d920	b920					_TOKCCExit:
.d920	b920	60		rts				rts
.d921	b921					TOKTokenString:
.d921	b921	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d923	b923	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d926	b926	e8		inx				inx									; start of quoted string.
.d927	b927	da		phx				phx 								; push start of string on top
.d928	b928	ca		dex				dex 								; because we pre-increment
.d929	b929					_TSFindEnd:
.d929	b929	e8		inx				inx
.d92a	b92a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d92d	b92d	f0 04		beq $b933			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d92f	b92f	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d931	b931	d0 f6		bne $b929			bne 	_TSFindEnd
.d933	b933					_TSEndOfString:
.d933	b933	7a		ply				ply  								; so now Y is first character, X is character after end.
.d934	b934	48		pha				pha 								; save terminating character
.d935	b935	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d938	b938	68		pla				pla 								; terminating character
.d939	b939	f0 01		beq $b93c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d93b	b93b	e8		inx				inx
.d93c	b93c					_TSNotQuote:
.d93c	b93c	60		rts				rts
.d93d	b93d					TOKWriteBlockXY:
.d93d	b93d	86 36		stx $36				stx 	zTemp0 						; save end character
.d93f	b93f	98		tya				tya 								; use 2's complement to work out the byte size
.d940	b940	49 ff		eor #$ff			eor 	#$FF
.d942	b942	38		sec				sec
.d943	b943	65 36		adc $36				adc 	zTemp0
.d945	b945	1a		inc a				inc 	a 							; one extra for NULL
.d946	b946	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d949	b949					_TOBlockLoop:
.d949	b949	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d94b	b94b	f0 09		beq $b956			beq 	_TOBlockExit
.d94d	b94d	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d950	b950	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d953	b953	c8		iny				iny
.d954	b954	80 f3		bra $b949			bra 	_TOBlockLoop
.d956	b956					_TOBlockExit:
.d956	b956	a9 00		lda #$00			lda 	#0 							; add NULL.
.d958	b958	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d95b	b95b	60		rts				rts
.d95c	b95c					TOKHexConstant:
.d95c	b95c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d95e	b95e	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d961	b961	e8		inx				inx									; start of quoted string.
.d962	b962	da		phx				phx 								; push start of constant on top
.d963	b963	ca		dex				dex
.d964	b964					_THFindLoop:
.d964	b964	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d965	b965	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d968	b968	c9 30		cmp #$30			cmp 	#"0"
.d96a	b96a	90 0c		bcc $b978			bcc 	_THFoundEnd
.d96c	b96c	c9 3a		cmp #$3a			cmp 	#"9"+1
.d96e	b96e	90 f4		bcc $b964			bcc 	_THFindLoop
.d970	b970	c9 41		cmp #$41			cmp 	#"A"
.d972	b972	90 04		bcc $b978			bcc 	_THFoundEnd
.d974	b974	c9 47		cmp #$47			cmp 	#"F"+1
.d976	b976	90 ec		bcc $b964			bcc 	_THFindLoop
.d978	b978					_THFoundEnd:
.d978	b978	7a		ply				ply 								; restore start
.d979	b979	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; output the block
.d97c	b97c	60		rts				rts
.d97d	b97d					TOKCalculateHash:
.d97d	b97d	da		phx				phx
.d97e	b97e	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d981	b981	a9 00		lda #$00			lda 	#0
.d983	b983					_TCHLoop:
.d983	b983	18		clc				clc
.d984	b984	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d987	b987	e8		inx				inx
.d988	b988	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d98b	b98b	d0 f6		bne $b983			bne 	_TCHLoop
.d98d	b98d	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d990	b990	fa		plx				plx
.d991	b991	60		rts				rts
.d992	b992					LCLFixLineBufferCase:
.d992	b992	a2 00		ldx #$00			ldx 	#0
.d994	b994					_FLBCLoop:
.d994	b994	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d997	b997	f0 22		beq $b9bb			beq 	_FLBCExit 					; end of string.
.d999	b999	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d99b	b99b	f0 11		beq $b9ae			beq 	_FLBCInQuotes
.d99d	b99d	e8		inx				inx
.d99e	b99e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9a0	b9a0	90 f2		bcc $b994			bcc 	_FLBCLoop
.d9a2	b9a2	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9a4	b9a4	b0 ee		bcs $b994			bcs 	_FLBCLoop
.d9a6	b9a6	38		sec				sec 								; make U/C
.d9a7	b9a7	e9 20		sbc #$20			sbc 	#32
.d9a9	b9a9	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9ac	b9ac	80 e6		bra $b994			bra 	_FLBCLoop
.d9ae	b9ae					_FLBCInQuotes:
.d9ae	b9ae	e8		inx				inx 								; advance
.d9af	b9af	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9b2	b9b2	f0 07		beq $b9bb			beq 	_FLBCExit 					; exit on EOS
.d9b4	b9b4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9b6	b9b6	d0 f6		bne $b9ae			bne 	_FLBCInQuotes
.d9b8	b9b8	e8		inx				inx 								; skip over it
.d9b9	b9b9	80 d9		bra $b994			bra 	_FLBCLoop
.d9bb	b9bb					_FLBCExit:
.d9bb	b9bb	60		rts				rts
.d9bc	b9bc					TOKExtractLineNumber:
.d9bc	b9bc	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d9bf	b9bf	48		pha				pha
.d9c0	b9c0	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d9c3	b9c3	48		pha				pha
.d9c4	b9c4	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 2
.d9c7	b9c7	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 4
.d9ca	b9ca	18		clc				clc 								; add stacked value
.d9cb	b9cb	68		pla				pla
.d9cc	b9cc	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9cf	b9cf	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9d2	b9d2	68		pla				pla
.d9d3	b9d3	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9d6	b9d6	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9d9	b9d9	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 10
.d9dc	b9dc	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	29 0f		and #$0f			and 	#15 						; add to line #
.d9e2	b9e2	18		clc				clc
.d9e3	b9e3	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9e6	b9e6	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9e9	b9e9	90 03		bcc $b9ee			bcc 	_TLENNoCarry
.d9eb	b9eb	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ee	b9ee					_TLENNoCarry:
.d9ee	b9ee	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9f1	b9f1	c9 30		cmp #$30			cmp 	#'0'
.d9f3	b9f3	90 04		bcc $b9f9			bcc 	_TLENExit
.d9f5	b9f5	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9f7	b9f7	90 c3		bcc $b9bc			bcc 	TOKExtractLineNumber
.d9f9	b9f9					_TLENExit:
.d9f9	b9f9	60		rts				rts
.d9fa	b9fa					_LCLNTimes2:
.d9fa	b9fa	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9fd	b9fd	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da00	ba00	60		rts				rts
.da01	ba01					TOKWriteByte:
.da01	ba01	da		phx				phx
.da02	ba02	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da05	ba05	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da08	ba08	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da0b	ba0b	fa		plx				plx
.da0c	ba0c	60		rts				rts
.da0d	ba0d					TOKCheckCreateVariableRecord:
.da0d	ba0d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da0f	ba0f	85 36		sta $36				sta 	0+zTemp0
.da11	ba11	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da13	ba13	85 37		sta $37				sta 	1+zTemp0
.da15	ba15					_CCVSearch:
.da15	ba15	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da17	ba17	f0 2c		beq $ba45			beq 	_CCVFail
.da19	ba19	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da1b	ba1b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da1d	ba1d	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da20	ba20	d0 16		bne $ba38			bne 	_CCVNext
.da22	ba22	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da24	ba24	ae 00 04	ldx $0400			ldx 	identStart
.da27	ba27					_CCVCompare:
.da27	ba27	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da2a	ba2a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da2c	ba2c	e8		inx				inx 								; advance pointers
.da2d	ba2d	c8		iny				iny
.da2e	ba2e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da2f	ba2f	d0 07		bne $ba38			bne 	_CCVNext  					; didn't match go to next.
.da31	ba31	90 f4		bcc $ba27			bcc 	_CCVCompare 				; not finished yet.
.da33	ba33	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da36	ba36	f0 41		beq $ba79			beq 	_CCVFound 					; yes, we were successful
.da38	ba38					_CCVNext:
.da38	ba38	18		clc				clc 								; go to next record.
.da39	ba39	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da3b	ba3b	65 36		adc $36				adc 	zTemp0
.da3d	ba3d	85 36		sta $36				sta 	zTemp0
.da3f	ba3f	90 d4		bcc $ba15			bcc 	_CCVSearch
.da41	ba41	e6 37		inc $37				inc 	zTemp0+1
.da43	ba43	80 d0		bra $ba15			bra 	_CCVSearch
.da45	ba45					_CCVFail:
.da45	ba45	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da47	ba47	ad 03 04	lda $0403			lda 	identHash
.da4a	ba4a	91 36		sta ($36),y			sta 	(zTemp0),y
.da4c	ba4c	c8		iny				iny 								; offset 2 is the type byte
.da4d	ba4d	ad 04 04	lda $0404			lda 	identTypeByte
.da50	ba50	91 36		sta ($36),y			sta 	(zTemp0),y
.da52	ba52	c8		iny				iny
.da53	ba53					_CCVData:
.da53	ba53	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da55	ba55	91 36		sta ($36),y			sta 	(zTemp0),y
.da57	ba57	c8		iny				iny
.da58	ba58	c0 08		cpy #$08			cpy 	#8
.da5a	ba5a	90 f7		bcc $ba53			bcc 	_CCVData
.da5c	ba5c	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da5f	ba5f					_CCVCopyName:
.da5f	ba5f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da62	ba62	91 36		sta ($36),y			sta 	(zTemp0),y
.da64	ba64	e8		inx				inx
.da65	ba65	c8		iny				iny
.da66	ba66	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da69	ba69	d0 f4		bne $ba5f			bne 	_CCVCopyName
.da6b	ba6b	98		tya				tya 								; patch offset
.da6c	ba6c	92 36		sta ($36)			sta 	(zTemp0)
.da6e	ba6e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da70	ba70	91 36		sta ($36),y			sta 	(zTemp0),y
.da72	ba72	88		dey				dey
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da75	ba75	09 80		ora #$80			ora 	#$80
.da77	ba77	91 36		sta ($36),y			sta 	(zTemp0),y
.da79	ba79					_CCVFound:
.da79	ba79	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da7b	ba7b	38		sec				sec
.da7c	ba7c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da7e	ba7e	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da80	ba80	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da83	ba83	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da85	ba85	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da88	ba88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da89	ba89					SNDCheckChannel:
.da89	ba89	aa		tax				tax
.da8a	ba8a	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da8d	ba8d	d0 38		bne $bac7			bne 	_SNDCCExit
.da8f	ba8f	da		phx				phx 								; save current channel
.da90	ba90	8a		txa				txa 								; put in A
.da91	ba91	20 0d bb	jsr $bb0d			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da94	ba94	68		pla				pla 								; channel # in A
.da95	ba95	90 30		bcc $bac7			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da97	ba97	a8		tay				tay 								; Y is the channel #
.da98	ba98	bd 30 07	lda $0730,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da9b	ba9b	99 2f 08	sta $082f,y			sta 	SNDPitchLow,y
.da9e	ba9e	bd 31 07	lda $0731,x			lda 	SNDQueue+2,x
.daa1	baa1	99 33 08	sta $0833,y			sta 	SNDPitchHigh,y
.daa4	baa4	bd 32 07	lda $0732,x			lda 	SNDQueue+3,x
.daa7	baa7	99 37 08	sta $0837,y			sta 	SNDVolume,y
.daaa	baaa	bd 33 07	lda $0733,x			lda 	SNDQueue+4,x
.daad	baad	99 3b 08	sta $083b,y			sta 	SNDTimeLeft,y
.dab0	bab0	bd 34 07	lda $0734,x			lda 	SNDQueue+5,x
.dab3	bab3	99 3f 08	sta $083f,y			sta 	SNDAdjustLow,y
.dab6	bab6	bd 35 07	lda $0735,x			lda 	SNDQueue+6,x
.dab9	bab9	99 43 08	sta $0843,y			sta 	SNDAdjustHigh,y
.dabc	babc	5a		phy				phy 								; save channel #
.dabd	babd	20 27 bb	jsr $bb27			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dac0	bac0	ce 2e 07	dec $072e			dec 	SNDLength 					; reduce the queue length.
.dac3	bac3	68		pla				pla
.dac4	bac4	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update channel A
.dac7	bac7					_SNDCCExit:
.dac7	bac7	60		rts				rts
.dac8	bac8					SNDUpdateNote:
.dac8	bac8	aa		tax				tax 								; so we can access records
.dac9	bac9	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.daca	baca	0a		asl a				asl 	a
.dacb	bacb	0a		asl a				asl 	a
.dacc	bacc	0a		asl a				asl 	a
.dacd	bacd	0a		asl a				asl 	a
.dace	bace	8d 2d 07	sta $072d			sta 	SNDChannelBits
.dad1	bad1	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; are we silent
.dad4	bad4	f0 2e		beq $bb04			beq 	_SNDUNIsSilent
.dad6	bad6	ad 2d 07	lda $072d			lda 	SNDChannelBits 				; push channel bits on stack
.dad9	bad9	48		pha				pha
.dada	bada	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dadd	badd	29 0f		and #$0f			and 	#$0F
.dadf	badf	0d 2d 07	ora $072d			ora 	SNDChannelBits 				; set channel bits
.dae2	bae2	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dae4	bae4	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.dae7	bae7	bd 33 08	lda $0833,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daea	baea	8d 2d 07	sta $072d			sta 	SNDChannelBits
.daed	baed	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x
.daf0	baf0	4e 2d 07	lsr $072d			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.daf3	baf3	6a		ror a				ror 	a
.daf4	baf4	4e 2d 07	lsr $072d			lsr 	SNDChannelBits
.daf7	baf7	6a		ror a				ror 	a
.daf8	baf8	4a		lsr a				lsr 	a 							; put in bits 0-5
.daf9	baf9	4a		lsr a				lsr 	a
.dafa	bafa	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write as rest of pitch register
.dafd	bafd	68		pla				pla
.dafe	bafe	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db00	bb00	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db03	bb03	60		rts				rts
.db04	bb04					_SNDUNIsSilent:
.db04	bb04	ad 2d 07	lda $072d			lda 	SNDChannelBits 				; channel bits
.db07	bb07	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db09	bb09	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write to the ports
.db0c	bb0c	60		rts				rts
.db0d	bb0d					SNDFindNextNoteForA:
.db0d	bb0d	ac 2e 07	ldy $072e			ldy 	SNDLength 					; queue size into Y
.db10	bb10	f0 13		beq $bb25			beq 	_SNDFNNFail 				; queue empty.
.db12	bb12	a2 00		ldx #$00			ldx 	#0
.db14	bb14					_SNDFNNSearch:
.db14	bb14	dd 2f 07	cmp $072f,x			cmp 	SNDQueue,x 					; does it match the channel
.db17	bb17	38		sec				sec
.db18	bb18	f0 0c		beq $bb26			beq 	_SNDFNNExit 				; if so exit with CS.
.db1a	bb1a	e8		inx				inx 								; next queue slot.
.db1b	bb1b	e8		inx				inx
.db1c	bb1c	e8		inx				inx
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	e8		inx				inx
.db1f	bb1f	e8		inx				inx
.db20	bb20	e8		inx				inx
.db21	bb21	e8		inx				inx
.db22	bb22	88		dey				dey 								; done the whole queue
.db23	bb23	d0 ef		bne $bb14			bne 	_SNDFNNSearch 				; no, go back.
.db25	bb25					_SNDFNNFail:
.db25	bb25	18		clc				clc
.db26	bb26					_SNDFNNExit:
.db26	bb26	60		rts				rts
.db27	bb27					SNDDeleteXFromQueue:
.db27	bb27	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db29	bb29	f0 09		beq $bb34			beq 	_SNDDXExit
.db2b	bb2b	bd 37 07	lda $0737,x			lda 	SNDQueue+8,x
.db2e	bb2e	9d 2f 07	sta $072f,x			sta 	SNDQueue,x
.db31	bb31	e8		inx				inx
.db32	bb32	80 f3		bra $bb27			bra 	SNDDeleteXFromQueue
.db34	bb34					_SNDDXExit:
.db34	bb34	60		rts				rts
.072d						SNDChannelBits:
>072d								.fill 	1
.db35	bb35					SNDQueueRequest:
.db35	bb35	86 36		stx $36				stx 	zTemp0						; save queue address
.db37	bb37	84 37		sty $37				sty 	zTemp0+1
.db39	bb39	ae 2e 07	ldx $072e			ldx 	SNDLength 					; queue is full, can't take any more.
.db3c	bb3c	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db3e	bb3e	f0 21		beq $bb61			beq 	_SNDQRExit
.db40	bb40	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db42	bb42	48		pha				pha
.db43	bb43	8a		txa				txa  								; get offset in queue buffer/
.db44	bb44	0a		asl a				asl 	a
.db45	bb45	0a		asl a				asl 	a
.db46	bb46	0a		asl a				asl 	a
.db47	bb47	aa		tax				tax
.db48	bb48	68		pla				pla 								; get back and push again
.db49	bb49	48		pha				pha
.db4a	bb4a	9d 2f 07	sta $072f,x			sta 	SNDQueue+0,x 				; save the channel #
.db4d	bb4d	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db4f	bb4f					_SNDQCopy:
.db4f	bb4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.db51	bb51	e8		inx				inx
.db52	bb52	c8		iny				iny
.db53	bb53	9d 2f 07	sta $072f,x			sta 	SNDQueue,x
.db56	bb56	c0 06		cpy #$06			cpy 	#6
.db58	bb58	d0 f5		bne $bb4f			bne 	_SNDQCopy
.db5a	bb5a	ee 2e 07	inc $072e			inc 	SNDLength 					; bump queue length.
.db5d	bb5d	68		pla				pla 								; get channel # back
.db5e	bb5e	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db61	bb61					_SNDQRExit:
.db61	bb61	60		rts				rts
.db62	bb62					SNDSilenceChannel:
.db62	bb62	aa		tax				tax 								; zero time left.
.db63	bb63	9e 3b 08	stz $083b,x			stz 	SNDTimeLeft,x
.db66	bb66	0a		asl a				asl 	a 							; shift into position
.db67	bb67	0a		asl a				asl 	a
.db68	bb68	0a		asl a				asl 	a
.db69	bb69	0a		asl a				asl 	a
.db6a	bb6a	0a		asl a				asl 	a
.db6b	bb6b	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db6d	bb6d	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db70	bb70	60		rts				rts
.db71	bb71					SNDWritePorts:
.db71	bb71	da		phx				phx 								; save X
.db72	bb72	a6 01		ldx $01				ldx 	1 							; save I/O status
.db74	bb74	64 01		stz $01				stz 	1 							; access I/O page 0
.db76	bb76	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db79	bb79	8d 10 d6	sta $d610			sta 	$D610
.db7c	bb7c	86 01		stx $01				stx 	1 							; restore I/O
.db7e	bb7e	fa		plx				plx 								; restore X
.db7f	bb7f	60		rts				rts
.db80	bb80					Export_SNDCommand:
.db80	bb80	da		phx				phx 								; save XY
.db81	bb81	5a		phy				phy
.db82	bb82	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db84	bb84	f0 1d		beq $bba3			beq 	_SNDInitialise
.db86	bb86	90 28		bcc $bbb0			bcc 	_SNDExit
.db88	bb88	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db8a	bb8a	f0 17		beq $bba3			beq 	_SNDSilence
.db8c	bb8c	b0 22		bcs $bbb0			bcs 	_SNDExit
.db8e	bb8e	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db90	bb90	b0 09		bcs $bb9b			bcs 	_SNDQueryPlay
.db92	bb92	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db94	bb94	b0 1a		bcs $bbb0			bcs 	_SNDExit
.db96	bb96	20 35 bb	jsr $bb35			jsr 	SNDQueueRequest
.db99	bb99	80 15		bra $bbb0			bra 	_SNDExit
.db9b	bb9b					_SNDQueryPlay:
.db9b	bb9b	29 03		and #$03			and 	#3 							; get channel #
.db9d	bb9d	aa		tax				tax
.db9e	bb9e	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dba1	bba1	80 0d		bra $bbb0			bra 	_SNDExit
.dba3	bba3					_SNDInitialise:
.dba3	bba3					_SNDSilence:
.dba3	bba3	9c 2e 07	stz $072e			stz 	SNDLength 					; empty the queue.
.dba6	bba6	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dba8	bba8					_SNDSilenceLoop:
.dba8	bba8	48		pha				pha
.dba9	bba9	20 62 bb	jsr $bb62			jsr 	SNDSilenceChannel
.dbac	bbac	68		pla				pla
.dbad	bbad	3a		dec a				dec 	a
.dbae	bbae	10 f8		bpl $bba8			bpl 	_SNDSilenceLoop
.dbb0	bbb0					_SNDExit:
.dbb0	bbb0	7a		ply				ply
.dbb1	bbb1	fa		plx				plx
.dbb2	bbb2	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072e						SNDLength:
>072e								.fill 	1
.072f						SNDQueue:
>072f								.fill 	SNDQueueSize * 8
.082f						SNDPitchLow:
>082f								.fill 	4
.0833						SNDPitchHigh:
>0833								.fill 	4
.0837						SNDVolume:
>0837								.fill 	4
.083b						SNDTimeLeft:
>083b								.fill 	4
.083f						SNDAdjustLow:
>083f								.fill 	4
.0843						SNDAdjustHigh:
>0843								.fill 	4
.dbb3	bbb3					Export_SNDUpdate:
.dbb3	bbb3					PagedSNDUpdate:
.dbb3	bbb3	ad 3b 08	lda $083b			lda 	SNDTimeLeft+0 				; look at time remaining
.dbb6	bbb6	f0 05		beq $bbbd			beq 	_SNDUNot0 					; not playing
.dbb8	bbb8	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbba	bbba	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel 			; update it.
.dbbd	bbbd					_SNDUNot0:
.dbbd	bbbd	ad 3c 08	lda $083c			lda 	SNDTimeLeft+1
.dbc0	bbc0	f0 05		beq $bbc7			beq 	_SNDUNot1
.dbc2	bbc2	a2 01		ldx #$01			ldx 	#1
.dbc4	bbc4	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbc7	bbc7					_SNDUNot1:
.dbc7	bbc7	ad 3d 08	lda $083d			lda 	SNDTimeLeft+2
.dbca	bbca	f0 05		beq $bbd1			beq 	_SNDUNot2
.dbcc	bbcc	a2 02		ldx #$02			ldx 	#2
.dbce	bbce	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbd1	bbd1					_SNDUNot2:
.dbd1	bbd1	ad 3e 08	lda $083e			lda 	SNDTimeLeft+3
.dbd4	bbd4	f0 05		beq $bbdb			beq 	_SNDUNot3
.dbd6	bbd6	a2 03		ldx #$03			ldx 	#3
.dbd8	bbd8	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbdb	bbdb					_SNDUNot3:
.dbdb	bbdb	60		rts				rts
.dbdc	bbdc					SNDUpdateChannel:
.dbdc	bbdc	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbde	bbde	f0 2c		beq $bc0c			beq 	_SNDUCExit
.dbe0	bbe0	3a		dec a				dec 	a 							; decrement and update timer
.dbe1	bbe1	9d 3b 08	sta $083b,x			sta 	SNDTimeLeft,x
.dbe4	bbe4	f0 1d		beq $bc03			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbe6	bbe6	bd 3f 08	lda $083f,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbe9	bbe9	1d 43 08	ora $0843,x			ora 	SNDAdjustHigh,x
.dbec	bbec	f0 1e		beq $bc0c			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbee	bbee	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbef	bbef	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x
.dbf2	bbf2	7d 3f 08	adc $083f,x			adc 	SNDAdjustLow,x
.dbf5	bbf5	9d 2f 08	sta $082f,x			sta 	SNDPitchLow,x
.dbf8	bbf8	bd 33 08	lda $0833,x			lda 	SNDPitchHigh,x
.dbfb	bbfb	7d 43 08	adc $0843,x			adc 	SNDAdjustHigh,x
.dbfe	bbfe	29 03		and #$03			and 	#3
.dc00	bc00	9d 33 08	sta $0833,x			sta 	SNDPitchHigh,x
.dc03	bc03					_SNDUCUpdate:
.dc03	bc03	8a		txa				txa 								; which channel.
.dc04	bc04	48		pha				pha
.dc05	bc05	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update the current note
.dc08	bc08	68		pla				pla
.dc09	bc09	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; more to do ?
.dc0c	bc0c					_SNDUCExit:
.dc0c	bc0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc0d	bc0d					Export_KNLInputSingleCharacter:
.dc0d	bc0d					PagedInputSingleCharacter:
.dc0d	bc0d	da		phx				phx
.dc0e	bc0e	5a		phy				phy
.dc0f	bc0f					_EISCWait:
.dc0f	bc0f	a5 01		lda $01				lda 	1 							; save I/O 0
.dc11	bc11	48		pha				pha
.dc12	bc12	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc14	bc14	38		sec				sec 								; calculate timer - LastTick
.dc15	bc15	ad 59 d6	lda $d659			lda 	$D659
.dc18	bc18	cd 5f 06	cmp $065f			cmp 	LastTick
.dc1b	bc1b	f0 06		beq $bc23			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.dc1d	bc1d	8d 5f 06	sta $065f			sta 	LastTick 					; update last timer
.dc20	bc20	20 b3 bb	jsr $bbb3			jsr 	PagedSNDUpdate 							; go do the code.
.dc23	bc23					_NoFireTick:
.dc23	bc23	68		pla				pla 								; restore I/O 0
.dc24	bc24	85 01		sta $01				sta 	1
.dc26	bc26	20 30 bc	jsr $bc30			jsr 	CheckKeyPressed
.dc29	bc29	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc2b	bc2b	f0 e2		beq $bc0f			beq 	_EISCWait
.dc2d	bc2d	7a		ply				ply
.dc2e	bc2e	fa		plx				plx
.dc2f	bc2f	60		rts				rts
.dc30	bc30					Export_KNLInkey:
.dc30	bc30					CheckKeyPressed:
.dc30	bc30	a9 47		lda #$47			lda     #<event 					; tell kernel where events go.
.dc32	bc32	85 f0		sta $f0				sta     kernel.args.events+0
.dc34	bc34	a9 08		lda #$08			lda     #>event
.dc36	bc36	85 f1		sta $f1				sta     kernel.args.events+1
.dc38	bc38	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc3b	bc3b	b0 0b		bcs $bc48			bcs 	_CKPNoEvent 				; no event
.dc3d	bc3d	ad 47 08	lda $0847			lda     event.type
.dc40	bc40	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc42	bc42	d0 04		bne $bc48			bne 	_CKPNoEvent
.dc44	bc44	ad 4c 08	lda $084c			lda     event.key.ascii
.dc47	bc47	60		rts				rts
.dc48	bc48					_CKPNoEvent:
.dc48	bc48	a9 00		lda #$00			lda 	#0
.dc4a	bc4a	60		rts				rts
.dc4b	bc4b					Export_EXTReadController:
.dc4b	bc4b	da		phx				phx
.dc4c	bc4c	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc4e	bc4e	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc50	bc50	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc53	bc53	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc55	bc55	fa		plx				plx
.dc56	bc56	60		rts				rts
.0847						event
>0847						type        .byte   ?   ; Enum above
>0848						buf         .byte   ?   ; page id or zero
>0849						ext         .byte   ?   ; page id or zero
.084a						key
>084a						keyboard    .byte   ?   ; Keyboard ID
>084b						raw         .byte   ?   ; Raw key ID
>084c						ascii       .byte   ?   ; ASCII value
>084d						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.084a						mouse
.084a						delta
>084a						x           .byte   ?
>084b						y           .byte   ?
>084c						z           .byte   ?
>084d						buttons     .byte   ?
.084a						clicks
>084a						inner       .byte   ?
>084b						middle      .byte   ?
>084c						outer       .byte   ?
.084a						udp
>084a						token       .byte   ?   ; TODO: break out into fields
.084a						file
>084a						stream      .byte   ?
>084b						cookie      .byte   ?
.084c						data
>084c						requested   .byte   ?   ; Requested number of bytes to read
>084d						read        .byte   ?   ; Number of bytes actually read
.084c						wrote
>084c						requested   .byte   ?   ; Requested number of bytes to read
>084d						wrote       .byte   ?   ; Number of bytes actually read
.084a						directory
>084a						stream      .byte   ?
>084b						cookie      .byte   ?
.084c						volume
>084c						len         .byte   ?   ; Length of volname (in buf)
>084d						flags       .byte   ?   ; block size, text encoding
.084c						file
>084c						len         .byte   ?
>084d						flags       .byte   ?   ; block scale, text encoding, approx size
.084c						free
>084c						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc57	bc57					Export_KNLOpenFileWrite:
.dc57	bc57	48		pha				pha
.dc58	bc58	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc5a	bc5a	80 03		bra $bc5f			bra 	KNLOpenStart
.dc5c	bc5c					Export_KNLOpenFileRead:
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc5f	bc5f					KNLOpenStart:
.dc5f	bc5f	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc61	bc61	68		pla				pla
.dc62	bc62	20 9d bc	jsr $bc9d			jsr 	KNLSetupFileName
.dc65	bc65	a9 47		lda #$47			lda     #event & $FF 				; tell kernel where to store event data
.dc67	bc67	85 f0		sta $f0				sta     kernel.args.events+0
.dc69	bc69	a9 08		lda #$08			lda     #event >> 8
.dc6b	bc6b	85 f1		sta $f1				sta     kernel.args.events+1
.dc6d	bc6d	ad 5c 06	lda $065c			lda 	DefaultDrive 				; currently drive zero only.
.dc70	bc70	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc72	bc72	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc75	bc75	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc77	bc77	b0 1d		bcs $bc96			bcs     _out
.dc79	bc79					_loop
.dc79	bc79	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc7c	bc7c	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc7f	bc7f	b0 f8		bcs $bc79			bcs     _loop
.dc81	bc81	ad 47 08	lda $0847			lda 	event.type
.dc84	bc84	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc86	bc86	f0 0a		beq $bc92			beq 	_success
.dc88	bc88	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc8a	bc8a	f0 0a		beq $bc96			beq 	_out
.dc8c	bc8c	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc8e	bc8e	f0 06		beq $bc96			beq 	_out
.dc90	bc90	80 e7		bra $bc79			bra     _loop
.dc92	bc92					_success
.dc92	bc92	ad 4a 08	lda $084a			lda     event.file.stream
.dc95	bc95	18		clc				clc
.dc96	bc96					_out
.dc96	bc96	60		rts				rts
.dc97	bc97					Export_KNLCloseFile:
.dc97	bc97	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc99	bc99	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc9c	bc9c	60		rts				rts
.dc9d	bc9d					KNLSetupFileName:
.dc9d	bc9d	5a		phy				phy 								; save Y on stack
.dc9e	bc9e	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dca0	bca0	86 37		stx $37				stx 	zTemp0+1
.dca2	bca2	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dca4	bca4	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dca6	bca6	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dca8	bca8					_KNLGetLength:
.dca8	bca8	c8		iny				iny
.dca9	bca9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dcab	bcab	d0 fb		bne $bca8			bne 	_KNLGetLength
.dcad	bcad	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dcaf	bcaf	7a		ply				ply
.dcb0	bcb0	60		rts				rts
=64						KNLBufLen = 64 								; read buffer size.
.084e						KNLStream:
>084e								.byte   ?
.084f						KNLBuf:
>084f								.fill   KNLBufLen
.088f						KNLNext:
>088f								.byte   ?
.0890						KNLEnd:
>0890								.byte   ?
.dcb1	bcb1					Export_KNLReadByteInit:
.dcb1	bcb1	8d 4e 08	sta $084e			sta     KNLStream 					; save stream
.dcb4	bcb4	9c 8f 08	stz $088f			stz     KNLNext 					; reset buffer
.dcb7	bcb7	9c 90 08	stz $0890			stz     KNLEnd
.dcba	bcba	60		rts				rts
.dcbb	bcbb					Export_KNLReadByte:
.dcbb	bcbb	da		phx				phx
.dcbc	bcbc	ae 8f 08	ldx $088f			ldx     KNLNext 					; all data consumed ?
.dcbf	bcbf	ec 90 08	cpx $0890			cpx     KNLEnd
.dcc2	bcc2	d0 0d		bne $bcd1			bne     _KNLRBGetNextByte
.dcc4	bcc4	20 da bc	jsr $bcda			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dcc7	bcc7	b0 0f		bcs $bcd8			bcs     _KNLRBError 				; error has occurred on read.
.dcc9	bcc9	8d 90 08	sta $0890			sta     KNLEnd 						; # read is the number available
.dccc	bccc	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcce	bcce	8e 8f 08	stx $088f			stx     KNLNext
.dcd1	bcd1					_KNLRBGetNextByte:
.dcd1	bcd1	bd 4f 08	lda $084f,x			lda     KNLBuf,x 					; get the next data item
.dcd4	bcd4	ee 8f 08	inc $088f			inc     KNLNext 					; and advance the index
.dcd7	bcd7	18		clc				clc 								; succeeded
.dcd8	bcd8					_KNLRBError:
.dcd8	bcd8	fa		plx				plx
.dcd9	bcd9	60		rts				rts
.dcda	bcda					KNLRBGetNextBlock:
.dcda	bcda	ad 4e 08	lda $084e			lda     KNLStream 					; set stream to read from
.dcdd	bcdd	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcdf	bcdf	a9 40		lda #$40			lda     #KNLBufLen 					; set bytes to read.
.dce1	bce1	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dce3	bce3	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dce6	bce6	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dce8	bce8	b0 2e		bcs $bd18			bcs     _KGNBExitFail               ; report as general error
.dcea	bcea					_KGRBEventLoop:
.dcea	bcea	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dced	bced	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcf0	bcf0	b0 f8		bcs $bcea			bcs     _KGRBEventLoop
.dcf2	bcf2	ad 47 08	lda $0847			lda 	event.type 					; get event
.dcf5	bcf5	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcf7	bcf7	f0 0a		beq $bd03			beq     _KNLRBGetNextByte
.dcf9	bcf9	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcfb	bcfb	f0 1b		beq $bd18			beq 	_KGNBExitFail
.dcfd	bcfd	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcff	bcff	f0 17		beq $bd18			beq 	_KGNBExitFail
.dd01	bd01	80 e7		bra $bcea			bra 	_KGRBEventLoop
.dd03	bd03					_KNLRBGetNextByte:
.dd03	bd03	a9 4f		lda #$4f			lda     #<KNLBuf 					; Set the target buffer
.dd05	bd05	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd07	bd07	a9 08		lda #$08			lda     #>KNLBuf
.dd09	bd09	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd0b	bd0b	ad 4d 08	lda $084d			lda     event.file.data.read 		; Set the target length
.dd0e	bd0e	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd10	bd10	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd13	bd13	ad 4d 08	lda $084d			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd16	bd16	18		clc				clc
.dd17	bd17	60		rts				rts
.dd18	bd18					_KGNBExitFail:
.dd18	bd18	38		sec				sec
.dd19	bd19	60		rts				rts
.dd1a	bd1a					Export_KNLWriteBlock:
.dd1a	bd1a	da		phx				phx
.dd1b	bd1b	5a		phy				phy
.dd1c	bd1c	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd1e	bd1e	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd20	bd20	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd22	bd22	a5 37		lda $37				lda     zTemp0+1
.dd24	bd24	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd26	bd26	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd28	bd28	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd2b	bd2b	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd2d	bd2d	b0 21		bcs $bd50			bcs 	_KWBFailed
.dd2f	bd2f					_KNLWLoop:
.dd2f	bd2f	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd32	bd32	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd35	bd35	b0 f8		bcs $bd2f			bcs     _KNLWLoop
.dd37	bd37	ad 47 08	lda $0847			lda     event.type 					; various errors.
.dd3a	bd3a	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd3c	bd3c	f0 12		beq $bd50			beq 	_KWBFailed
.dd3e	bd3e	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd40	bd40	f0 0e		beq $bd50			beq 	_KWBFailed
.dd42	bd42	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd44	bd44	f0 0a		beq $bd50			beq 	_KWBFailed
.dd46	bd46	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd48	bd48	d0 e5		bne $bd2f			bne 	_KNLWLoop
.dd4a	bd4a	18		clc				clc
.dd4b	bd4b	ad 4d 08	lda $084d			lda    event.file.wrote.wrote 		; get bytes written.
.dd4e	bd4e	80 01		bra $bd51			bra 	_KWBExit
.dd50	bd50					_KWBFailed:
.dd50	bd50	38		sec				sec
.dd51	bd51					_KWBExit:
.dd51	bd51	7a		ply				ply
.dd52	bd52	fa		plx				plx
.dd53	bd53	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
