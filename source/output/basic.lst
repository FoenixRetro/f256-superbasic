
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct 22 10:36:19 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PLOT                             = $c1; $c1 PLOT
=$c2					KWD_PRINT                            = $c2; $c2 PRINT
=$c3					KWD_READ                             = $c3; $c3 READ
=$c4					KWD_RECT                             = $c4; $c4 RECT
=$c5					KWD_REM                              = $c5; $c5 REM
=$c6					KWD_RETURN                           = $c6; $c6 RETURN
=$c7					KWD_SOLID                            = $c7; $c7 SOLID
=$c8					KWD_SPRITE                           = $c8; $c8 SPRITE
=$c9					KWD_TEXT                             = $c9; $c9 TEXT
=$ca					KWD_TO                               = $ca; $ca TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 0c b5	jsr $b50c			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 6c 99	jsr $996c			jsr 	PrintStringXA
.8014	20 fc 92	jsr $92fc			jsr 	NewCommand 					; erase current program
.8017	20 6c a6	jsr $a66c			jsr 	BackloadProgram
.801a	4c 77 94	jmp $9477			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 53 61			.text "Built Saturday 22-Oct-2022. Build 2231."
>8065	74 75 72 64 61 79 20 32 32 2d 4f 63 74 2d 32 30
>8075	32 32 2e 20 42 75 69 6c 64 20 32 32 33 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8084	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8087					GXGraphicDraw:
.8087	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8089	b0 06		bcs $8091			bcs 	_GDCoordinate
.808b	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808d	84 37		sty $37				sty 	gxzTemp0+1
.808f	80 4b		bra $80dc			bra 	_GDExecuteA 				; and execute
.8091					_GDCoordinate:
.8091	48		pha				pha 								; save AXY
.8092	da		phx				phx
.8093	5a		phy				phy
.8094	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8096					_GDCopy1:
.8096	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8099	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809c	ca		dex				dex
.809d	10 f7		bpl $8096			bpl 	_GDCopy1
.809f	68		pla				pla 								; update Y
.80a0	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a3	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a6	68		pla				pla
.80a7	8d 29 06	sta $0629			sta 	gxCurrentX
.80aa	68		pla				pla 								; get A (command+X.1) back
.80ab	48		pha				pha
.80ac	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ae	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b1	68		pla				pla 								; get command back
.80b2	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b4	48		pha				pha 								; push back.
.80b5	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b7	f0 17		beq $80d0			beq 	_GDCopyToWorkArea
.80b9	ad 2a 06	lda $062a			lda 	gxCurrentX+1 				; X < 256 X okay
.80bc	f0 07		beq $80c5			beq 	_GDCheckY
.80be	ad 29 06	lda $0629			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c1	c9 40		cmp #$40			cmp 	#64
.80c3	b0 08		bcs $80cd			bcs 	_GDError1
.80c5					_GDCheckY:
.80c5	ad 2b 06	lda $062b			lda 	gxCurrentY 					; check Y < Height.
.80c8	cd 3d 06	cmp $063d			cmp 	gxHeight
.80cb	90 03		bcc $80d0			bcc 	_GDCopyToWorkArea
.80cd					_GDError1:
.80cd	68		pla				pla
.80ce					_GDError2:
.80ce	38		sec				sec
.80cf	60		rts				rts
.80d0					_GDCopyToWorkArea:
.80d0	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d2					_GDCopy2:
.80d2	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80d5	9d 31 06	sta $0631,x			sta 	gxX0,x
.80d8	ca		dex				dex
.80d9	10 f7		bpl $80d2			bpl 	_GDCopy2
.80db	68		pla				pla 								; get command
.80dc					_GDExecuteA:
.80dc	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80de	b0 ee		bcs $80ce			bcs 	_GDError2
.80e0	aa		tax				tax
.80e1	7c e7 80	jmp ($80e7,x)			jmp 	(GRVectorTable,x)
.80e4					GXMove:
.80e4	18		clc				clc
.80e5	60		rts				rts
.80e6					GRUndefined:
>80e6	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e7					GRVectorTable:
>80e7	b6 82					.word	GXInitialise             ; $00 Initialise
>80e9	cd 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80eb	15 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ed	68 82					.word	GXClearBitmap            ; $03 Clear
>80ef	93 84					.word	GXSetColourMode          ; $04 Colour
>80f1	5e 86					.word	GXFontHandler            ; $05 DrawFont
>80f3	a6 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f5	0e 87					.word	GXSelect                 ; $07 SPRUSE
>80f7	34 87					.word	GXSelectImage            ; $08 SPRIMG
>80f9	e6 80					.word	GRUndefined              ; $09
>80fb	e6 80					.word	GRUndefined              ; $0a
>80fd	e6 80					.word	GRUndefined              ; $0b
>80ff	e6 80					.word	GRUndefined              ; $0c
>8101	e6 80					.word	GRUndefined              ; $0d
>8103	e6 80					.word	GRUndefined              ; $0e
>8105	e6 80					.word	GRUndefined              ; $0f
>8107	e4 80					.word	GXMove                   ; $10 Move
>8109	61 83					.word	GXLine                   ; $11 Line
>810b	dc 84					.word	GXFrameRectangle         ; $12 FrameRect
>810d	d9 84					.word	GXFillRectangle          ; $13 FillRect
>810f	1f 81					.word	GXFrameCircle            ; $14 FrameCircle
>8111	1b 81					.word	GXFillCircle             ; $15 FillCircle
>8113	e6 80					.word	GRUndefined              ; $16
>8115	e6 80					.word	GRUndefined              ; $17
>8117	c1 84					.word	GXPlotPoint              ; $18 Plot
>8119	99 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811b					GXFillCircle:
.811b	a9 ff		lda #$ff			lda 	#255
.811d	80 02		bra $8121			bra 	GXCircle
.811f					GXFrameCircle:
.811f	a9 00		lda #$00			lda 	#0
.8121					GXCircle:
.8121	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.8124	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.8127	f0 26		beq $814f			beq 	_GXCFail
.8129	20 a0 88	jsr $88a0			jsr 	GXSortXY 					; topleft/bottomright
.812c	20 d5 87	jsr $87d5			jsr 	GXOpenBitmap 				; start drawing
.812f	20 21 82	jsr $8221			jsr 	GXCircleSetup 				; set up for drawing
.8132	9c 4d 06	stz $064d			stz 	gxYChanged
.8135					_GXCircleDraw:
.8135	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.8138	cd 4b 06	cmp $064b			cmp 	gYCentre
.813b	90 0a		bcc $8147			bcc 	_GXCircleContinue
.813d	d0 03		bne $8142			bne 	_GXNoLast
.813f	20 54 81	jsr $8154			jsr 	GXPlot1
.8142					_GXNoLast:
.8142	20 e6 87	jsr $87e6			jsr 	GXCloseBitmap 				; close the bitmap
.8145	18		clc				clc
.8146	60		rts				rts
.8147					_GXCircleContinue:
.8147	20 51 81	jsr $8151			jsr 	GXPlot2 					; draw it
.814a	20 ce 81	jsr $81ce			jsr 	GXCircleMove 				; adjust the coordinates
.814d	80 e6		bra $8135			bra 	_GXCircleDraw
.814f					_GXCFail:
.814f	38		sec				sec
.8150	60		rts				rts
.8151					GXPlot2:
.8151	20 54 81	jsr $8154			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8154					GXPlot1:
.8154	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8157	f0 03		beq $815c			beq 	_GXPlot1Only
.8159	20 78 81	jsr $8178			jsr 	GXPlot0 						; plot and negate
.815c					_GXPlot1Only:
.815c	20 78 81	jsr $8178			jsr 	GXPlot0 						; twice, undoing negation
.815f	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.8162	ae 4b 06	ldx $064b			ldx	 	gYCentre
.8165	8d 4b 06	sta $064b			sta 	gYCentre
.8168	8e 4a 06	stx $064a			stx 	gXCentre
.816b	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.816e	a9 ff		lda #$ff			lda 	#$FF
.8170	8d 4d 06	sta $064d			sta 	gxYChanged
.8173	60		rts				rts
.8174	20 78 81	jsr $8178			jsr 	GXPlot0 						; do once
.8177	60		rts				rts
.8178	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817b	f0 05		beq $8182			beq 	_GXPlot0Always
.817d	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8180	f0 2d		beq $81af			beq 	GXPlot0Exit
.8182					_GXPlot0Always:
.8182	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8184	ad 4b 06	lda $064b			lda 	gYCentre
.8187	20 b0 81	jsr $81b0			jsr 	GXSubCopy
.818a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818c	ad 4a 06	lda $064a			lda 	gXCentre
.818f	20 b0 81	jsr $81b0			jsr 	GXSubCopy
.8192	48		pha				pha 									; save last offset X
.8193	20 f3 87	jsr $87f3			jsr 	GXPositionCalc 					; calculate position/offset.
.8196	68		pla				pla
.8197	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8198	85 36		sta $36				sta 	gxzTemp0
.819a	64 37		stz $37				stz 	gxzTemp0+1
.819c	26 37		rol $37				rol 	gxzTemp0+1
.819e	ad 4c 06	lda $064c			lda 	gxIsFillMode
.81a1	69 80		adc #$80			adc 	#128
.81a3	20 2c 85	jsr $852c			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a6	38		sec				sec 									; GY = -GY
.81a7	a9 00		lda #$00			lda 	#0
.81a9	ed 4b 06	sbc $064b			sbc 	gYCentre
.81ac	8d 4b 06	sta $064b			sta 	gYCentre
.81af					GXPlot0Exit:
.81af	60		rts				rts
.81b0					GXSubCopy:
.81b0	85 36		sta $36				sta 	gxzTemp0
.81b2	64 37		stz $37				stz 	gxzTemp0+1
.81b4	29 80		and #$80			and 	#$80
.81b6	f0 02		beq $81ba			beq 	_GXNoSx
.81b8	c6 37		dec $37				dec 	gxzTemp0+1
.81ba					_GXNoSx:
.81ba	38		sec				sec
.81bb	bd 35 06	lda $0635,x			lda 	gXX1,x
.81be	e5 36		sbc $36				sbc 	gxzTemp0
.81c0	9d 31 06	sta $0631,x			sta 	gXX0,x
.81c3	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81c6	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c8	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81cb	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cd	60		rts				rts
.81ce					GXCircleMove:
.81ce	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81d1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d3	10 0d		bpl $81e2			bpl 	_GXEMPositive
.81d5	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81d8	ad 4a 06	lda $064a			lda 	gXCentre
.81db	20 01 82	jsr $8201			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81de	a9 06		lda #$06			lda 	#6  						; and add 6
.81e0	80 15		bra $81f7			bra 	_GXEMAddD
.81e2					_GXEMPositive:
.81e2	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81e5	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81e8	38		sec				sec 								; calculate X-Y
.81e9	ad 4a 06	lda $064a			lda 	gXCentre
.81ec	ed 4b 06	sbc $064b			sbc 	gYCentre
.81ef	20 01 82	jsr $8201			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f2	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f4	ce 4d 06	dec $064d			dec 	gxYChanged
.81f7					_GXEMAddD:
.81f7	18		clc				clc
.81f8	65 38		adc $38				adc 	gxzTemp1
.81fa	85 38		sta $38				sta 	gxzTemp1
.81fc	90 02		bcc $8200			bcc 	_GXEMNoCarry
.81fe	e6 39		inc $39				inc 	gxzTemp1+1
.8200					_GXEMNoCarry:
.8200	60		rts				rts
.8201					_GXAdd4TimesToD:
.8201	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8203	29 80		and #$80			and 	#$80
.8205	f0 02		beq $8209			beq 	_GXA4Unsigned
.8207	a9 ff		lda #$ff			lda 	#$FF
.8209					_GXA4Unsigned:
.8209	85 37		sta $37				sta 	gxzTemp0+1
.820b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820d	26 37		rol $37				rol 	gxzTemp0+1
.820f	06 36		asl $36				asl 	gxzTemp0
.8211	26 37		rol $37				rol 	gxzTemp0+1
.8213	18		clc				clc 								; add
.8214	a5 36		lda $36				lda		gxzTemp0
.8216	65 38		adc $38				adc 	gxzTemp1
.8218	85 38		sta $38				sta 	gxzTemp1
.821a	a5 37		lda $37				lda		gxzTemp0+1
.821c	65 39		adc $39				adc 	gxzTemp1+1
.821e	85 39		sta $39				sta 	gxzTemp1+1
.8220	60		rts				rts
.8221					GXCircleSetup:
.8221	38		sec				sec
.8222	ad 37 06	lda $0637			lda 	gxY1
.8225	ed 33 06	sbc $0633			sbc 	gxY0
.8228	4a		lsr a				lsr 	a
.8229	8d 49 06	sta $0649			sta 	gxRadius
.822c	a2 00		ldx #$00			ldx 	#0
.822e	20 50 82	jsr $8250			jsr 	_GXCalculateCentre
.8231	a2 02		ldx #$02			ldx 	#2
.8233	20 50 82	jsr $8250			jsr 	_GXCalculateCentre
.8236	9c 4a 06	stz $064a			stz 	gXCentre
.8239	ad 49 06	lda $0649			lda 	gxRadius
.823c	8d 4b 06	sta $064b			sta 	gYCentre
.823f	0a		asl a				asl 	a 							; R x 2
.8240	85 36		sta $36				sta 	gxzTemp0
.8242	38		sec				sec
.8243	a9 03		lda #$03			lda 	#3
.8245	e5 36		sbc $36				sbc 	gxzTemp0
.8247	85 38		sta $38				sta 	gxzTemp1
.8249	a9 00		lda #$00			lda 	#0
.824b	e9 00		sbc #$00			sbc 	#0
.824d	85 39		sta $39				sta 	gxzTemp1+1
.824f	60		rts				rts
.8250					_GXCalculateCentre:
.8250	38		sec				sec
.8251	bd 35 06	lda $0635,x			lda 	gxX1,x
.8254	7d 31 06	adc $0631,x			adc 	gXX0,x
.8257	9d 35 06	sta $0635,x			sta 	gXX1,x
.825a	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.825d	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8260	4a		lsr a				lsr 	a
.8261	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.8264	7e 35 06	ror $0635,x			ror 	gXX1,x
.8267	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8268					GXClearBitmap:
.8268	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.826b	f0 24		beq $8291			beq 	_GXCBFail
.826d	20 d5 87	jsr $87d5			jsr 	GXOpenBitmap 				; start access
.8270	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8272	ad 3d 06	lda $063d			lda 	gxHeight
.8275	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8277	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8279					_GXCalcLastPage:
.8279	98		tya				tya 								; add to base page
.827a	18		clc				clc
.827b	6d 3b 06	adc $063b			adc 	gxBasePage
.827e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8280					_GXClearAll:
.8280	20 93 82	jsr $8293			jsr 	_GXClearBlock 				; clear 8k block
.8283	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8285	a5 0b		lda $0b				lda 	GXEditSlot
.8287	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.828a	b0 f4		bcs $8280			bcs 	_GXClearAll
.828c	20 e6 87	jsr $87e6			jsr 	GXCloseBitmap	 			; stop access
.828f	18		clc				clc
.8290	60		rts				rts
.8291					_GXCBFail:
.8291	38		sec				sec
.8292	60		rts				rts
.8293					_GXClearBlock:
.8293	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8295	85 38		sta $38				sta 	0+gxzTemp1
.8297	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8299	85 39		sta $39				sta 	1+gxzTemp1
.829b					_GXCB0:
.829b	a5 36		lda $36				lda 	gxzTemp0
.829d	a0 00		ldy #$00			ldy 	#0
.829f					_GXCB1:
.829f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a1	c8		iny				iny
.82a2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a4	c8		iny				iny
.82a5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a7	c8		iny				iny
.82a8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82aa	c8		iny				iny
.82ab	d0 f2		bne $829f			bne 	_GXCB1
.82ad	e6 39		inc $39				inc 	gxzTemp1+1
.82af	a5 39		lda $39				lda 	gxzTemp1+1
.82b1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b3	d0 e6		bne $829b			bne 	_GXCB0
.82b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b6					GXInitialise:
.82b6	64 01		stz $01				stz 	1
.82b8	a9 01		lda #$01			lda 	#1
.82ba	8d 00 d0	sta $d000			sta 	$D000
.82bd	18		clc				clc
.82be	9c 39 06	stz $0639			stz 	GXSpritesOn
.82c1	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82c4	a2 0f		ldx #$0f			ldx 	#15
.82c6					_GXIClear:
.82c6	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c9	ca		dex				dex
.82ca	10 fa		bpl $82c6			bpl 	_GXIClear
.82cc	60		rts				rts
.82cd					GXControlBitmap:
.82cd	64 01		stz $01				stz 	1
.82cf	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d1	29 01		and #$01			and 	#1 							; set bitmap flag
.82d3	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82d6	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d7	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82da	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82dc	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82de	90 02		bcc $82e2			bcc 	_CBNotOn
.82e0	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e2					_CBNotOn:
.82e2	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e5	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e7	29 07		and #$07			and 	#7
.82e9	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ec	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ee	d0 02		bne $82f2			bne 	_CBNotDefault
.82f0	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f2					_CBNotDefault:
.82f2	8d 3b 06	sta $063b			sta 	gxBasePage
.82f5	20 53 83	jsr $8353			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f8	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fa	8d 03 d1	sta $d103			sta 	$D103
.82fd	a5 36		lda $36				lda 	gxzTemp0
.82ff	8d 02 d1	sta $d102			sta 	$D102
.8302	9c 01 d1	stz $d101			stz 	$D101
.8305	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8307	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830a	29 01		and #$01			and 	#1
.830c	f0 02		beq $8310			beq 	_CBHaveHeight
.830e	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8310					_CBHaveHeight
.8310	8e 3d 06	stx $063d			stx 	gxHeight
.8313	18		clc				clc
.8314	60		rts				rts
.8315					GXControlSprite:
.8315	64 01		stz $01				stz 	1
.8317	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8319	29 01		and #$01			and 	#1 							; set sprites flag
.831b	8d 39 06	sta $0639			sta 	gxSpritesOn
.831e	4a		lsr a				lsr 	a 							; bit 0 into carry.
.831f	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8322	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8324	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8326	90 02		bcc $832a			bcc 	_CSNotOn
.8328	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832a					_CSNotOn:
.832a	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832d	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.832f	d0 02		bne $8333			bne 	_CSNotDefault
.8331	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8333					_CSNotDefault:
.8333	8d 3c 06	sta $063c			sta 	gxSpritePage
.8336	20 53 83	jsr $8353			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8339	a5 36		lda $36				lda 	zTemp0
.833b	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.833e	a5 37		lda $37				lda 	zTemp0+1
.8340	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.8343	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8345					_CSClear:
.8345	9e 00 d9	stz $d900,x			stz 	$D900,x
.8348	9e 00 da	stz $da00,x			stz 	$DA00,x
.834b	ca		dex				dex
.834c	d0 f7		bne $8345			bne 	_CSClear
.834e	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8351	18		clc				clc
.8352	60		rts				rts
.8353					GXCalculateBaseAddress:
.8353	85 36		sta $36				sta 	gxzTemp0
.8355	64 37		stz $37				stz 	gxzTemp0+1
.8357	a9 05		lda #$05			lda 	#5
.8359					_GXShift:
.8359	06 36		asl $36				asl 	gxzTemp0
.835b	26 37		rol $37				rol 	gxzTemp0+1
.835d	3a		dec a				dec		a
.835e	d0 f9		bne $8359			bne 	_GXShift
.8360	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8361					GXLine:
.8361	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.8364	f0 28		beq $838e			beq 	_GXLFail
.8366	20 d5 87	jsr $87d5			jsr 	GXOpenBitmap
.8369	20 be 88	jsr $88be			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.836c	20 34 84	jsr $8434			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.836f	20 f3 87	jsr $87f3			jsr 	GXPositionCalc 				; calculate position/offset.
.8372					_GXDrawLoop:
.8372	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.8375	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8377	2d 41 06	and $0641			and 	gxANDValue
.837a	4d 40 06	eor $0640			eor 	gxEORValue
.837d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.837f	20 90 83	jsr $8390			jsr 	GXLineIsComplete 			; is the line complete ?
.8382	f0 05		beq $8389			beq 	_GXLExit
.8384	20 ab 83	jsr $83ab			jsr 	GXLineAdvance 				; code as per advance method
.8387	80 e9		bra $8372			bra 	_GXDrawLoop
.8389					_GXLExit:
.8389	20 e6 87	jsr $87e6			jsr 	GXCloseBitmap
.838c	18		clc				clc
.838d	60		rts				rts
.838e					_GXLFail:
.838e	38		sec				sec
.838f	60		rts				rts
.8390					GXLineIsComplete:
.8390	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.8393	d0 0f		bne $83a4			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8395	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8398	4d 35 06	eor $0635			eor 	GXX1
.839b	d0 06		bne $83a3			bne 	_GXLICExit
.839d	ad 32 06	lda $0632			lda 	GXX0+1
.83a0	4d 36 06	eor $0636			eor 	GXX1+1
.83a3					_GXLICExit:
.83a3	60		rts				rts
.83a4					_GXLICCompareY:
.83a4	ad 37 06	lda $0637			lda 	GXY1
.83a7	4d 33 06	eor $0633			eor 	GXY0
.83aa	60		rts				rts
.83ab					GXLineAdvance:
.83ab	18		clc				clc 								; add adjust to position
.83ac	ad 52 06	lda $0652			lda 	GXPosition
.83af	6d 53 06	adc $0653			adc 	GXAdjust
.83b2	8d 52 06	sta $0652			sta 	GXPosition
.83b5	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83b8	b0 05		bcs $83bf			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83ba	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83bd	90 0a		bcc $83c9			bcc 	_GXLANoExtra
.83bf					_GXLAOverflow:
.83bf	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83c2	38		sec				sec 								; subtract total and write back
.83c3	ed 54 06	sbc $0654			sbc 	GXTotal
.83c6	8d 52 06	sta $0652			sta 	GXPosition
.83c9					_GXLANoExtra:
.83c9	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83cc	f0 0d		beq $83db			beq 	_GXDXLarger
.83ce	20 2d 84	jsr $842d			jsr 	GXIncrementY
.83d1	ad 55 06	lda $0655			lda 	GXAddSelect
.83d4	f0 10		beq $83e6			beq 	_GXLAExit
.83d6	20 e7 83	jsr $83e7			jsr 	GXAdjustX
.83d9	80 0b		bra $83e6			bra 	_GXLAExit
.83db					_GXDXLarger:
.83db	20 e7 83	jsr $83e7			jsr 	GXAdjustX
.83de	ad 55 06	lda $0655			lda 	GXAddSelect
.83e1	f0 03		beq $83e6			beq 	_GXLAExit
.83e3	20 2d 84	jsr $842d			jsr 	GXIncrementY
.83e6					_GXLAExit:
.83e6	60		rts				rts
.83e7					GXAdjustX:
.83e7	ad 51 06	lda $0651			lda 	GXDXNegative
.83ea	10 25		bpl $8411			bpl 	_GXAXRight
.83ec	ad 31 06	lda $0631			lda 	GXX0
.83ef	d0 03		bne $83f4			bne 	_GXAXNoBorrow
.83f1	ce 32 06	dec $0632			dec 	GXX0+1
.83f4					_GXAXNoBorrow:
.83f4	ce 31 06	dec $0631			dec 	GXX0
.83f7	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83fa	ad 44 06	lda $0644			lda 	gsOffset
.83fd	c9 ff		cmp #$ff			cmp 	#$FF
.83ff	d0 0f		bne $8410			bne 	_GXAYExit 					; underflow
.8401	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8403	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8405	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8407	b0 07		bcs $8410			bcs 	_GXAYExit
.8409	18		clc				clc
.840a	69 20		adc #$20			adc 	#$20 						; fix up
.840c	85 3d		sta $3d				sta 	gxzScreen+1
.840e	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8410					_GXAYExit:
.8410	60		rts				rts
.8411					_GXAXRight:
.8411	ee 31 06	inc $0631			inc 	GXX0
.8414	d0 03		bne $8419			bne 	_GXAXNoCarry
.8416	ee 32 06	inc $0632			inc 	GXX0+1
.8419					_GXAXNoCarry:
.8419	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.841c	d0 0e		bne $842c			bne 	_GXAXExit 					; if not overflowed, exit.
.841e	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8420	a5 3d		lda $3d				lda 	gxzScreen+1
.8422	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8424	90 06		bcc $842c			bcc 	_GXAXExit
.8426	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8428	85 3d		sta $3d				sta 	gxzScreen+1
.842a	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.842c					_GXAXExit:
.842c	60		rts				rts
.842d					GXIncrementY:
.842d	ee 33 06	inc $0633			inc 	GXY0
.8430	20 49 88	jsr $8849			jsr 	GXMovePositionDown
.8433	60		rts				rts
.8434					GXLineSetup:
.8434	ad 37 06	lda $0637			lda 	GXY1
.8437	38		sec				sec
.8438	ed 33 06	sbc $0633			sbc 	GXY0
.843b	4a		lsr a				lsr 	a
.843c	8d 4f 06	sta $064f			sta 	GXDiffY
.843f	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.8442	38		sec				sec
.8443	ad 35 06	lda $0635			lda 	GXX1
.8446	ed 31 06	sbc $0631			sbc 	GXX0
.8449	8d 4e 06	sta $064e			sta 	GXDiffX
.844c	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.844f	ed 32 06	sbc $0632			sbc 	GXX0+1
.8452	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8453	6e 4e 06	ror $064e			ror 	GXDiffX
.8456	0a		asl a				asl 	a
.8457	10 0c		bpl $8465			bpl 	_GDXNotNegative
.8459	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.845b	38		sec				sec
.845c	ed 4e 06	sbc $064e			sbc 	GXDiffX
.845f	8d 4e 06	sta $064e			sta 	GXDiffX
.8462	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.8465					_GDXNotNegative:
.8465	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.8468	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.846b	8d 53 06	sta $0653			sta 	GXAdjust
.846e	ad 4e 06	lda $064e			lda 	GXDiffX
.8471	8d 54 06	sta $0654			sta 	GXTotal
.8474	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.8477	cd 4e 06	cmp $064e			cmp 	GXDiffX
.847a	90 0f		bcc $848b			bcc 	_GDXNotLarger
.847c	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.847f	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.8482	8d 53 06	sta $0653			sta 	GXAdjust
.8485	ad 4f 06	lda $064f			lda 	GXDiffY
.8488	8d 54 06	sta $0654			sta 	GXTotal
.848b					_GDXNotLarger:
.848b	ad 54 06	lda $0654			lda 	GXTotal
.848e	4a		lsr a				lsr 	a
.848f	8d 52 06	sta $0652			sta 	GXPosition
.8492	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8493					GXSetColourMode:
.8493	a6 36		ldx $36				ldx 	gxzTemp0
.8495	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.8498	a5 37		lda $37				lda 	gxzTemp0+1 								;
.849a	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.849d	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.849f	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84a2	ae 3f 06	ldx $063f			ldx 	gxColour
.84a5	8e 40 06	stx $0640			stx 	gxEORValue
.84a8	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84aa	90 03		bcc $84af			bcc 	_GXSDCNotAndColour
.84ac	8e 41 06	stx $0641			stx 	gxANDValue
.84af					_GXSDCNotAndColour:
.84af	d0 03		bne $84b4			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84b1	9c 40 06	stz $0640			stz 	gxEORValue
.84b4					_GXSDCNotAnd:
.84b4	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84b5	90 08		bcc $84bf			bcc 	_GXSDCNoFlip
.84b7	ad 41 06	lda $0641			lda	 	gxANDValue
.84ba	49 ff		eor #$ff			eor 	#$FF
.84bc	8d 41 06	sta $0641			sta 	gxANDValue
.84bf					_GXSDCNoFlip:
.84bf	18		clc				clc
.84c0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84c1					GXPlotPoint:
.84c1	20 d5 87	jsr $87d5			jsr 	GXOpenBitmap 				; start drawing
.84c4	20 f3 87	jsr $87f3			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84c7	ac 44 06	ldy $0644			ldy 	gsOffset
.84ca	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84cc	2d 41 06	and $0641			and 	gxANDValue
.84cf	4d 40 06	eor $0640			eor 	gxEORValue
.84d2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84d4	20 e6 87	jsr $87e6			jsr 	GXCloseBitmap 				; stop drawing and exit
.84d7	18		clc				clc
.84d8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d9					GXFillRectangle:
.84d9	38		sec				sec
.84da	80 01		bra $84dd			bra 	GXRectangle
.84dc					GXFrameRectangle:
.84dc	18		clc				clc
.84dd					GXRectangle:
.84dd	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84e0	f0 35		beq $8517			beq 	_GXRFail
.84e2	08		php				php 								; save Fill flag (CS)
.84e3	20 d5 87	jsr $87d5			jsr 	GXOpenBitmap 				; start drawing
.84e6	20 a0 88	jsr $88a0			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e9	20 f3 87	jsr $87f3			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ec	38		sec				sec 								; sec = Draw line
.84ed	20 19 85	jsr $8519			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84f0	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84f3	cd 37 06	cmp $0637			cmp 	gxY1
.84f6	f0 19		beq $8511			beq 	_GXRectangleExit
.84f8					_GXRectLoop:
.84f8	20 49 88	jsr $8849			jsr 	GXMovePositionDown 			; down one.
.84fb	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84fe	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8501	cd 37 06	cmp $0637			cmp 	gXY1
.8504	f0 07		beq $850d			beq 	_GXLastLine
.8506	28		plp				plp 								; get flag back
.8507	08		php				php
.8508	20 19 85	jsr $8519			jsr 	GXDrawLineX1X0 				; draw horizontal line
.850b	80 eb		bra $84f8			bra 	_GXRectLoop
.850d					_GXLastLine:
.850d	38		sec				sec
.850e	20 19 85	jsr $8519			jsr 	GXDrawLineX1X0
.8511					_GXRectangleExit:
.8511	68		pla				pla 								; throw fill flag.
.8512	20 e6 87	jsr $87e6			jsr 	GXCloseBitmap 				; stop drawing and exit
.8515	18		clc				clc
.8516	60		rts				rts
.8517					_GXRFail:
.8517	38		sec				sec
.8518	60		rts				rts
.8519					GXDrawLineX1X0:
.8519	08		php				php 								; save solid/either-end
.851a	38		sec				sec
.851b	ad 35 06	lda $0635			lda		gXX1
.851e	ed 31 06	sbc $0631			sbc 	gXX0
.8521	85 36		sta $36				sta 	gxzTemp0
.8523	ad 36 06	lda $0636			lda 	gXX1+1
.8526	ed 32 06	sbc $0632			sbc 	gXX0+1
.8529	85 37		sta $37				sta 	gxzTemp0+1
.852b	28		plp				plp
.852c					GXDrawLineTemp0:
.852c	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.852e	48		pha				pha
.852f	a5 3d		lda $3d				lda 	gxzScreen+1
.8531	48		pha				pha
.8532	ad 44 06	lda $0644			lda 	gsOffset
.8535	48		pha				pha
.8536	a5 0b		lda $0b				lda 	GXEditSlot
.8538	48		pha				pha
.8539	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.853c	90 1e		bcc $855c			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.853e					_GXDLTLine:
.853e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8540	2d 41 06	and $0641			and 	gxANDValue
.8543	4d 40 06	eor $0640			eor 	gxEORValue
.8546	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8548	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.854a	d0 04		bne $8550			bne 	_GXDLTNoBorrow
.854c	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.854e	30 2e		bmi $857e			bmi 	_GXDLTExit
.8550					_GXDLTNoBorrow:
.8550	c6 36		dec $36				dec 	gxzTemp0
.8552	c8		iny				iny 								; next slot.
.8553	d0 e9		bne $853e			bne 	_GXDLTLine
.8555	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8557	20 8c 85	jsr $858c			jsr 	GXDLTCheckWrap				; check for new page.
.855a	80 e2		bra $853e			bra 	_GXDLTLine
.855c					_GXDLTEndPoints:
.855c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.855e	2d 41 06	and $0641			and 	gxANDValue
.8561	4d 40 06	eor $0640			eor 	gxEORValue
.8564	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8566	98		tya				tya 								; advance to right side
.8567	18		clc				clc
.8568	65 36		adc $36				adc 	gxzTemp0
.856a	a8		tay				tay
.856b	a5 3d		lda $3d				lda 	gxzScreen+1
.856d	65 37		adc $37				adc 	gxzTemp0+1
.856f	85 3d		sta $3d				sta 	gxzScreen+1
.8571	20 8c 85	jsr $858c			jsr 	GXDLTCheckWrap 			; fix up.
.8574	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8576	2d 41 06	and $0641			and 	gxANDValue
.8579	4d 40 06	eor $0640			eor 	gxEORValue
.857c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.857e					_GXDLTExit:
.857e	68		pla				pla
.857f	85 0b		sta $0b				sta 	GXEditSlot
.8581	68		pla				pla
.8582	8d 44 06	sta $0644			sta 	gsOffset
.8585	68		pla				pla
.8586	85 3d		sta $3d				sta 	gxzScreen+1
.8588	68		pla				pla
.8589	85 3c		sta $3c				sta 	gxzScreen
.858b	60		rts				rts
.858c					GXDLTCheckWrap:
.858c	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.858e	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8590	90 06		bcc $8598			bcc 	_GXDLTCWExit
.8592	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8594	85 3d		sta $3d				sta 	gxzScreen+1
.8596	e6 0b		inc $0b				inc 	GXEditSlot
.8598					_GXDLTCWExit:
.8598	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8599					GXDrawGraphicElement:
.8599	8d 56 06	sta $0656			sta 	gxSize 						; save size
.859c	3a		dec a				dec 	a
.859d	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.85a0	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.85a3	9c 5c 06	stz $065c			stz 	gxHFlip
.85a6	2c 5d 06	bit $065d			bit 	gxUseMode
.85a9	10 03		bpl $85ae			bpl 	_GXNotVertical
.85ab	8d 5b 06	sta $065b			sta 	gxVFlip
.85ae					_GXNotVertical:
.85ae	50 03		bvc $85b3			bvc 	_GXNotHorizontal
.85b0	8d 5c 06	sta $065c			sta 	gxHFlip
.85b3					_GXNotHorizontal:
.85b3	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85b6	f0 5f		beq $8617			beq 	_GXSLFail
.85b8	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85bb	48		pha				pha
.85bc	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85bf	8e 58 06	stx $0658			stx 	gxAcquireVector
.85c2	20 d5 87	jsr $87d5			jsr 	gxOpenBitmap 				; open the bitmap.
.85c5	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85c8	4a		lsr a				lsr 	a
.85c9	4a		lsr a				lsr 	a
.85ca	4a		lsr a				lsr 	a
.85cb	29 07		and #$07			and		#7
.85cd	1a		inc a				inc 	a
.85ce	8d 5a 06	sta $065a			sta 	gxScale
.85d1	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d3					_GXGELoop:
.85d3	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d5	4d 5b 06	eor $065b			eor 	gxVFlip
.85d8	aa		tax				tax 								; get the Xth line.
.85d9	20 19 86	jsr $8619			jsr 	_GXCallAcquire 				; get that data.
.85dc	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85df	85 39		sta $39				sta 	gxzTemp1+1
.85e1					_GXGELoop2:
.85e1	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85e4	cd 3d 06	cmp $063d			cmp 	gxHeight
.85e7	b0 10		bcs $85f9			bcs 	_GXDGEExit
.85e9	20 1c 86	jsr $861c			jsr 	GXRenderOneLine 			; render line
.85ec	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85ee	d0 f1		bne $85e1			bne 	_GXGELoop2
.85f0	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85f2	a5 38		lda $38				lda 	gxzTemp1
.85f4	cd 56 06	cmp $0656			cmp 	gxSize
.85f7	d0 da		bne $85d3			bne 	_GXGELoop
.85f9					_GXDGEExit:
.85f9	68		pla				pla 								; restore Y for next time
.85fa	8d 33 06	sta $0633			sta 	gxY0
.85fd	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.8600					_GXShiftLeft:
.8600	18		clc				clc
.8601	ad 56 06	lda $0656			lda 	gxSize
.8604	6d 31 06	adc $0631			adc 	gxX0
.8607	8d 31 06	sta $0631			sta 	gxX0
.860a	90 03		bcc $860f			bcc 	_GXSLNoCarry
.860c	ee 32 06	inc $0632			inc 	gxX0+1
.860f					_GXSLNoCarry:
.860f	ca		dex				dex
.8610	d0 ee		bne $8600			bne 	_GXShiftLeft
.8612	20 e6 87	jsr $87e6			jsr 	GXCloseBitmap
.8615	18		clc				clc
.8616	60		rts				rts
.8617					_GXSLFail:
.8617	38		sec				sec
.8618	60		rts				rts
.8619					_GXCallAcquire:
.8619	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.861c					GXRenderOneLine:
.861c	20 f3 87	jsr $87f3			jsr 	GXPositionCalc 				; calculate position/offset.
.861f	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8622	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.8624					_GXROLLoop1:
.8624	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.8627	85 3b		sta $3b				sta 	gxzTemp2+1
.8629					_GXROLLoop2:
.8629	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.862b	4d 5c 06	eor $065c			eor 	gxHFlip
.862e	aa		tax				tax 								; read from the pixel buffer
.862f	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8632	d0 07		bne $863b			bne 	_GXDraw 					; draw if non zero
.8634	ad 5d 06	lda $065d			lda 	gxUseMode 					; check to see if solid background
.8637	29 04		and #$04			and 	#4
.8639	f0 0a		beq $8645			beq 	_GXZeroPixel
.863b					_GXDraw:
.863b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.863d	2d 41 06	and $0641			and 	gxANDValue
.8640	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8643	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8645					_GXZeroPixel:
.8645	c8		iny				iny 								; advance pointer
.8646	d0 05		bne $864d			bne 	_GXNoShift
.8648	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.864a	20 8c 85	jsr $858c			jsr 	GXDLTCheckWrap				; check for new page.
.864d					_GXNoShift:
.864d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.864f	d0 d8		bne $8629			bne 	_GXROLLoop2
.8651	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8653	a5 3a		lda $3a				lda 	gxzTemp2
.8655	cd 56 06	cmp $0656			cmp 	gxSize
.8658	d0 ca		bne $8624			bne 	_GXROLLoop1
.865a	ee 33 06	inc $0633			inc 	gxY0
.865d	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.865e					GXFontHandler:
.865e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8660	4d 3e 06	eor $063e			eor 	gxMode
.8663	8d 5d 06	sta $065d			sta 	gxUseMode
.8666	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8668	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.866a	26 37		rol $37				rol	 	gxzTemp0+1
.866c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.866e	26 37		rol $37				rol	 	gxzTemp0+1
.8670	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8672	26 37		rol $37				rol	 	gxzTemp0+1
.8674	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8676	09 c0		ora #$c0			ora 	#$C0
.8678	85 37		sta $37				sta 	gxzTemp0+1
.867a	a9 08		lda #$08			lda 	#8 							; size 8x8
.867c	a2 84		ldx #$84			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.867e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8680	20 99 85	jsr $8599			jsr 	GXDrawGraphicElement
.8683	60		rts				rts
.8684					GXGetGraphicDataFont:
.8684	8a		txa				txa 								; X->Y
.8685	a8		tay				tay
.8686	a6 01		ldx $01				ldx 	1 							; preserve old value
.8688	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.868a	85 01		sta $01				sta 	1
.868c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.868e	86 01		stx $01				stx 	1 							; put old value back.
.8690	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8692					_GXExpand:
.8692	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8695	0a		asl a				asl 	a 							; shift bit 7 into C
.8696	90 08		bcc $86a0			bcc 	_GXNoPixel
.8698	48		pha				pha 								; if set, set pixel buffer to current colour.
.8699	ad 3f 06	lda $063f			lda 	gxColour
.869c	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.869f	68		pla				pla
.86a0					_GXNoPixel:
.86a0	e8		inx				inx 								; do the whole byte.
.86a1	e0 08		cpx #$08			cpx 	#8
.86a3	d0 ed		bne $8692			bne 	_GXExpand
.86a5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86a6					GXSpriteHandler:
.86a6	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86a8	4d 3e 06	eor $063e			eor 	gxMode
.86ab	8d 5d 06	sta $065d			sta 	gxUseMode
.86ae	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86b0	da		phx				phx
.86b1	20 d5 87	jsr $87d5			jsr 	GXOpenBitmap 				; can access sprite information
.86b4	68		pla				pla
.86b5	20 64 88	jsr $8864			jsr 	GXFindSprite 				; get the sprite address
.86b8	20 e6 87	jsr $87e6			jsr 	GXCloseBitmap
.86bb	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86be	a2 c6		ldx #$c6			ldx 	#GXSpriteAcquire & $FF
.86c0	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86c2	20 99 85	jsr $8599			jsr 	GXDrawGraphicElement
.86c5	60		rts				rts
.86c6					GXSpriteAcquire:
.86c6	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86c9	85 0b		sta $0b				sta 	GXEditSlot
.86cb	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86cd	a9 00		lda #$00			lda 	#0
.86cf	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86d2					_GXTimesRowNumber:
.86d2	18		clc				clc
.86d3	65 36		adc $36				adc 	zTemp0
.86d5	ca		dex				dex
.86d6	10 fa		bpl $86d2			bpl 	_GXTimesRowNumber
.86d8	64 37		stz $37				stz 	gxzTemp0+1
.86da	0a		asl a				asl 	a 							; row x 2,4,6,8
.86db	26 37		rol $37				rol 	gxzTemp0+1
.86dd	0a		asl a				asl 	a 							; row x 4,8,12,16
.86de	26 37		rol $37				rol 	gxzTemp0+1
.86e0	0a		asl a				asl 	a 							; row x 8,16,24,32
.86e1	26 37		rol $37				rol 	gxzTemp0+1
.86e3	85 36		sta $36				sta 	gxzTemp0
.86e5	18		clc				clc 								; add base address.
.86e6	a5 36		lda $36				lda 	gxzTemp0
.86e8	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86eb	85 36		sta $36				sta 	gxzTemp0
.86ed	a5 37		lda $37				lda 	gxzTemp0+1
.86ef	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86f2					_GXSAFindPage:
.86f2	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86f4	90 06		bcc $86fc			bcc 	_GXSAFoundPage
.86f6	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86f8	e6 0b		inc $0b				inc 	GXEditSlot
.86fa	80 f6		bra $86f2			bra 	_GXSAFindPage
.86fc					_GXSAFoundPage:
.86fc	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86fe	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8700	a0 00		ldy #$00			ldy 	#0
.8702					_GXSACopyLoop:
.8702	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8704	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.8707	c8		iny				iny
.8708	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.870b	d0 f5		bne $8702			bne 	_GXSACopyLoop
.870d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.870e					GXSelect:
.870e	ad 39 06	lda $0639			lda 	gxSpritesOn
.8711	f0 1f		beq $8732			beq 	_GXSFail
.8713	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8715	c9 40		cmp #$40			cmp 	#64
.8717	b0 19		bcs $8732			bcs 	_GXSFail
.8719	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.871b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.871d	06 36		asl $36				asl 	gxzTemp0
.871f	06 36		asl $36				asl 	gxzTemp0
.8721	06 36		asl $36				asl 	gxzTemp0
.8723	2a		rol a				rol 	a
.8724	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8726	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.8729	85 37		sta $37				sta 	gxzTemp0+1
.872b	a5 36		lda $36				lda 	gxzTemp0
.872d	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8730	18		clc				clc
.8731	60		rts				rts
.8732					_GXSFail:
.8732	38		sec				sec
.8733	60		rts				rts
.8734					GXSelectImage:
.8734	ad 39 06	lda $0639			lda 	gxSpritesOn
.8737	f0 5e		beq $8797			beq 	_GXSIFail
.8739	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.873c	f0 59		beq $8797			beq 	_GXSIFail
.873e	64 01		stz $01				stz 	1
.8740	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8742	d0 43		bne $8787			bne 	_GXSIHide
.8744	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8746	48		pha				pha
.8747	20 d5 87	jsr $87d5			jsr 	GXOpenBitmap
.874a	68		pla				pla
.874b	20 64 88	jsr $8864			jsr 	GXFindSprite
.874e	a0 01		ldy #$01			ldy 	#1
.8750	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8753	85 36		sta $36				sta 	gxzTemp0
.8755	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8758	85 37		sta $37				sta 	gxzTemp0+1
.875a	ad 61 06	lda $0661			lda 	GXSpriteOffset
.875d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.875f	18		clc				clc
.8760	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8763	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8766	c8		iny				iny
.8767	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8769	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.876c	69 00		adc #$00			adc 	#0
.876e	c8		iny				iny
.876f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8771	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8774	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8776	2a		rol a				rol 	a 							; x 2
.8777	0a		asl a				asl 	a 							; x 4
.8778	0a		asl a				asl 	a 							; x 8
.8779	0a		asl a				asl 	a 							; x 16
.877a	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.877d	0a		asl a				asl 	a 							; 1 shift
.877e	09 01		ora #$01			ora 	#1 							; enable sprite.
.8780	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8782	20 e6 87	jsr $87e6			jsr 	GXCloseBitmap
.8785	18		clc				clc
.8786	60		rts				rts
.8787					_GXSIHide:
.8787	ad 45 06	lda $0645			lda 	GSCurrentSprite
.878a	85 36		sta $36				sta 	gxzTemp0
.878c	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.878f	85 37		sta $37				sta 	gxzTemp0+1
.8791	a9 00		lda #$00			lda 	#0
.8793	92 36		sta ($36)			sta 	(gxzTemp0)
.8795	18		clc				clc
.8796	60		rts				rts
.8797					_GXSIFail:
.8797	38		sec				sec
.8798	60		rts				rts
.8799					GXMoveSprite:
.8799	ad 39 06	lda $0639			lda 	gxSpritesOn
.879c	f0 35		beq $87d3			beq 	_GXSIFail
.879e	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.87a1	f0 30		beq $87d3			beq 	_GXSIFail
.87a3	85 37		sta $37				sta 	gxzTemp0+1
.87a5	a0 04		ldy #$04			ldy 	#4
.87a7	ad 45 06	lda $0645			lda 	GSCurrentSprite
.87aa	85 36		sta $36				sta 	gxzTemp0
.87ac	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87ae	38		sec				sec
.87af	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87b2	4a		lsr a				lsr 	a
.87b3	48		pha				pha
.87b4	18		clc				clc
.87b5	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87b8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ba	c8		iny				iny
.87bb	ad 32 06	lda $0632			lda 	gxX0+1
.87be	69 00		adc #$00			adc 	#0
.87c0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c2	c8		iny				iny
.87c3	68		pla				pla
.87c4	18		clc				clc
.87c5	6d 33 06	adc $0633			adc 	gxY0
.87c8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ca	a9 00		lda #$00			lda 	#0
.87cc	69 00		adc #$00			adc 	#0
.87ce	c8		iny				iny
.87cf	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87d1	18		clc				clc
.87d2	60		rts				rts
.87d3					_GXSIFail:
.87d3	38		sec				sec
.87d4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87d5					GXOpenBitmap:
.87d5	78		sei				sei 								; no interrupts here
.87d6	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87d8	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87db	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87dd	85 00		sta $00				sta 	0
.87df	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87e1	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87e4	58		cli				cli
.87e5	60		rts				rts
.87e6					GXCloseBitmap:
.87e6	78		sei				sei
.87e7	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87ea	85 0b		sta $0b				sta 	GXEditSlot
.87ec	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87ef	85 00		sta $00				sta 	0
.87f1	58		cli				cli
.87f2	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87f3					GXPositionCalc:
.87f3	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87f5	48		pha				pha
.87f6	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87f9	85 3c		sta $3c				sta 	gxzScreen
.87fb	64 3d		stz $3d				stz 	gxzScreen+1
.87fd	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87ff	26 3d		rol $3d				rol 	gxzScreen+1
.8801	06 3c		asl $3c				asl 	gxzScreen
.8803	26 3d		rol $3d				rol 	gxzScreen+1
.8805	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8806	65 3c		adc $3c				adc 	gxzScreen
.8808	85 3c		sta $3c				sta 	gxzScreen
.880a	90 02		bcc $880e			bcc 	_GXPCNoCarry
.880c	e6 3d		inc $3d				inc 	gxzScreen+1
.880e					_GXPCNoCarry:
.880e	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8810	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8812	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8814	85 36		sta $36				sta 	gxzTemp0
.8816	64 3d		stz $3d				stz 	gxzScreen+1
.8818	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.881a					_GXPCMultiply32:
.881a	06 3c		asl $3c				asl 	gxzScreen
.881c	26 3d		rol $3d				rol 	gxzScreen+1
.881e	3a		dec a				dec 	a
.881f	d0 f9		bne $881a			bne 	_GXPCMultiply32
.8821	18		clc				clc
.8822	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8825	65 3c		adc $3c				adc 	gxzScreen
.8827	8d 44 06	sta $0644			sta 	gsOffset
.882a	ad 32 06	lda $0632			lda 	GXX0+1
.882d	65 3d		adc $3d				adc 	gxzScreen+1
.882f	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8831	90 04		bcc $8837			bcc 	_GXPCNoOverflow
.8833	29 1f		and #$1f			and 	#$1F 						; fix it up
.8835	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8837					_GXPCNoOverflow:
.8837	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8839	85 3d		sta $3d				sta 	gxzScreen+1
.883b	64 3c		stz $3c				stz 	gxzScreen
.883d	18		clc				clc
.883e	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8840	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.8843	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.8845	68		pla				pla
.8846	85 36		sta $36				sta 	gxzTemp0
.8848	60		rts				rts
.8849					GXMovePositionDown:
.8849	18		clc				clc 								; add 320 to offset/temp+1
.884a	ad 44 06	lda $0644			lda 	gsOffset
.884d	69 40		adc #$40			adc 	#64
.884f	8d 44 06	sta $0644			sta 	gsOffset
.8852	a5 3d		lda $3d				lda 	gxzScreen+1
.8854	69 01		adc #$01			adc 	#1
.8856	85 3d		sta $3d				sta 	gxzScreen+1
.8858	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.885a	90 07		bcc $8863			bcc 	_GXMPDExit
.885c	38		sec				sec  								; next page
.885d	e9 20		sbc #$20			sbc 	#$20
.885f	85 3d		sta $3d				sta 	gxzScreen+1
.8861	e6 0b		inc $0b				inc 	GXEditSlot
.8863					_GXMPDExit:
.8863	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8864					GXFindSprite:
.8864	aa		tax				tax
.8865	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8868	85 0b		sta $0b				sta 	GXEditSlot
.886a	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.886d	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.8870	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8873	48		pha				pha 								; save twice
.8874	48		pha				pha
.8875	29 03		and #$03			and 	#3 							; get sprite size
.8877	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.887a	aa		tax				tax
.887b	bd 9c 88	lda $889c,x			lda 	_GXFXSSTTable,x 			; read sprite size
.887e	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.8881	68		pla				pla 								; get LUT
.8882	4a		lsr a				lsr		a
.8883	4a		lsr a				lsr		a
.8884	29 03		and #$03			and 	#3
.8886	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8889	68		pla				pla 								; address, neeeds to be x 4
.888a	29 f0		and #$f0			and 	#$F0
.888c	8d 61 06	sta $0661			sta 	GXSpriteOffset
.888f	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8892	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8895	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8898	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.889b	60		rts				rts
.889c					_GXFXSSTTable:
>889c	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.88a0					GXSortXY:
.88a0	20 be 88	jsr $88be			jsr 	GXSortY 					; will be sorted on Y now
.88a3	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.88a6	cd 35 06	cmp $0635			cmp 	gxX1
.88a9	ad 32 06	lda $0632			lda 	gXX0+1
.88ac	ed 36 06	sbc $0636			sbc 	gXX1+1
.88af	90 0c		bcc $88bd			bcc 	_GXSXYExit 					; X0 < X1 exit
.88b1	a2 00		ldx #$00			ldx 	#0 							; swap them over
.88b3	a0 04		ldy #$04			ldy 	#4
.88b5	20 d2 88	jsr $88d2			jsr 	GXSwapXY
.88b8	e8		inx				inx
.88b9	c8		iny				iny
.88ba	20 d2 88	jsr $88d2			jsr 	GXSwapXY
.88bd					_GXSXYExit:
.88bd	60		rts				rts
.88be					GXSortY:
.88be	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88c1	cd 37 06	cmp $0637			cmp 	gxY1
.88c4	90 0b		bcc $88d1			bcc 	_GXSYSorted
.88c6	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88c8	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88ca					_GXSwap1:
.88ca	20 d2 88	jsr $88d2			jsr 	GXSwapXY
.88cd	88		dey				dey
.88ce	ca		dex				dex
.88cf	10 f9		bpl $88ca			bpl 	_GXSwap1
.88d1					_GXSYSorted:
.88d1	60		rts				rts
.88d2					GXSwapXY:
.88d2	bd 31 06	lda $0631,x			lda 	gxX0,x
.88d5	48		pha				pha
.88d6	b9 31 06	lda $0631,y			lda 	gxX0,y
.88d9	9d 31 06	sta $0631,x			sta 	gxX0,x
.88dc	68		pla				pla
.88dd	99 31 06	sta $0631,y			sta 	gxX0,y
.88e0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88e1					AssembleGroup1:
.88e1	a9 ff		lda #$ff			lda 	#$FF
.88e3	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88e6	80 02		bra $88ea			bra 	AsmGroup12
.88e8					AssembleGroup2:
.88e8	a5 00		lda $00				lda 	$00
.88ea					AsmGroup12:
.88ea	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88ed	68		pla				pla 								; pop the return address to access the information following.
.88ee	fa		plx				plx
.88ef	20 78 89	jsr $8978			jsr 	AccessParameters 			; get opcode and save as base
.88f2	8d a4 04	sta $04a4			sta 	BaseOpcode
.88f5	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.88f8	d0 08		bne $8902			bne 	_AG12HaveMask
.88fa	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.88fc	20 80 89	jsr $8980			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.88ff	8d a5 04	sta $04a5			sta 	ModeMask
.8902					_AG12HaveMask:
.8902	20 bb 8a	jsr $8abb			jsr 	TypeAndCalculateOperand 	; get zero page type
.8905	da		phx				phx 								; save found address mode
.8906	20 e4 89	jsr $89e4			jsr 	AssembleModeX
.8909	fa		plx				plx  								; restore address mode
.890a	b0 0b		bcs $8917			bcs 	_AG12Exit
.890c	20 18 89	jsr $8918			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.890f	20 e4 89	jsr $89e4			jsr 	AssembleModeX
.8912	b0 03		bcs $8917			bcs 	_AG12Exit
.8914	4c 66 b3	jmp $b366			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8917					_AG12Exit:
.8917	60		rts				rts
.8918					PromoteToAbsolute:
.8918	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.891a	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.891c	f0 19		beq $8937			beq 	_PTADo
.891e	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8920	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8922	f0 13		beq $8937			beq 	_PTADo
.8924	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8926	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8928	f0 0d		beq $8937			beq 	_PTADo
.892a	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.892c	e0 d1		cpx #$d1			cpx 	#AM_IND
.892e	f0 07		beq $8937			beq 	_PTADo
.8930	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8932	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8934	f0 01		beq $8937			beq 	_PTADo
.8936	60		rts				rts
.8937					_PTADo:
.8937	aa		tax				tax
.8938	60		rts				rts
.8939					AssembleGroup3:
.8939	68		pla				pla 								; get parameters, which is just the opcode.
.893a	fa		plx				plx
.893b	20 78 89	jsr $8978			jsr 	AccessParameters 			; get and output opcode
.893e	20 90 89	jsr $8990			jsr 	AssemblerWriteByte
.8941	20 1f 8b	jsr $8b1f			jsr 	CalculateOperand 			; get a 16 bit operand
.8944	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8947	38		sec				sec
.8948	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.894b	48		pha				pha 								; LSB in A
.894c	ad 10 04	lda $0410			lda 	NSMantissa1
.894f	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8952	aa		tax				tax 								; MSB in X
.8953	68		pla				pla
.8954	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8955	69 7f		adc #$7f			adc 	#$7F
.8957	90 01		bcc $895a			bcc 	_AG3NoCarry
.8959	e8		inx				inx
.895a					_AG3NoCarry:
.895a	38		sec				sec 								; fix back and write out anyways.
.895b	e9 80		sbc #$80			sbc 	#$80
.895d	20 90 89	jsr $8990			jsr 	AssemblerWriteByte
.8960	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8962	f0 0a		beq $896e			beq 	_AG3Exit
.8964	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8967	29 01		and #$01			and 	#1
.8969	f0 03		beq $896e			beq 	_AG3Exit
.896b	4c 6b b3	jmp $b36b			jmp 	RangeError 					; no, branch is out of range
.896e					_AG3Exit:
.896e	60		rts				rts
.896f					AssembleGroup4:
.896f	68		pla				pla 								; pop address
.8970	fa		plx				plx
.8971	20 78 89	jsr $8978			jsr 	AccessParameters 			; access and get first
.8974	20 90 89	jsr $8990			jsr 	AssemblerWriteByte 			; output it.
.8977	60		rts				rts
.8978					AccessParameters:
.8978	8d a1 04	sta $04a1			sta 	ParamStart
.897b	8e a2 04	stx $04a2			stx 	ParamStart+1
.897e	a9 01		lda #$01			lda 	#1
.8980					GetParameter:
.8980	5a		phy				phy
.8981	a8		tay				tay
.8982	ad a1 04	lda $04a1			lda 	ParamStart
.8985	85 36		sta $36				sta 	zTemp0
.8987	ad a2 04	lda $04a2			lda 	ParamStart+1
.898a	85 37		sta $37				sta 	zTemp0+1
.898c	b1 36		lda ($36),y			lda 	(zTemp0),y
.898e	7a		ply				ply
.898f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8990					AssemblerWriteByte:
.8990	48		pha			pha
.8991	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8994	29 02		and #$02		and 	#2
.8996	f0 1b		beq $89b3		beq 	_AWBNoPrint
.8998	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.899b	20 ce 89	jsr $89ce		jsr 	PrintHex
.899e	ad 9e 04	lda $049e		lda		AssemblerAddress
.89a1	20 ce 89	jsr $89ce		jsr 	PrintHex
.89a4	a9 20		lda #$20		lda 	#' '
.89a6	20 20 b5	jsr $b520		jsr 	EXTPrintCharacter
.89a9	68		pla			pla 									; print byte
.89aa	48		pha			pha
.89ab	20 ce 89	jsr $89ce		jsr 	PrintHex
.89ae	a9 0d		lda #$0d		lda 	#13
.89b0	20 20 b5	jsr $b520		jsr 	EXTPrintCharacter
.89b3					_AWBNoPrint:
.89b3	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89b6	85 36		sta $36			sta 	zTemp0
.89b8	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89bb	f0 0e		beq $89cb		beq 	_AWBRange
.89bd	85 37		sta $37			sta 	zTemp0+1
.89bf	68		pla			pla 									; write byte out
.89c0	92 36		sta ($36)		sta 	(zTemp0)
.89c2	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89c5	d0 03		bne $89ca		bne 	_AWBNoCarry
.89c7	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89ca					_AWBNoCarry:
.89ca	60		rts			rts
.89cb					_AWBRange:
.89cb	4c 6b b3	jmp $b36b		jmp 	RangeError
.89ce					PrintHex:
.89ce	48		pha				pha
.89cf	4a		lsr a				lsr 	a
.89d0	4a		lsr a				lsr 	a
.89d1	4a		lsr a				lsr 	a
.89d2	4a		lsr a				lsr 	a
.89d3	20 d7 89	jsr $89d7			jsr 	_PrintNibble
.89d6	68		pla				pla
.89d7					_PrintNibble:
.89d7	29 0f		and #$0f			and 	#15
.89d9	c9 0a		cmp #$0a			cmp 	#10
.89db	90 02		bcc $89df			bcc 	_NoShift
.89dd	69 06		adc #$06			adc 	#6
.89df					_NoShift:
.89df	69 30		adc #$30			adc 	#48
.89e1	4c 20 b5	jmp $b520			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89e4					AssembleModeX:
.89e4	5a		phy				phy
.89e5	ad a3 04	lda $04a3			lda 	IsGroup1
.89e8	f0 17		beq $8a01			beq 	_AMXGroup2
.89ea	8a		txa				txa 							; is it in group # 1
.89eb	29 40		and #$40			and 	#AM_ISG1
.89ed	f0 50		beq $8a3f			beq 	_AMXFail 				; no, give up.
.89ef	8a		txa				txa 							; get back.
.89f0	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.89f2	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.89f4	d0 22		bne $8a18			bne 	_AMXHaveInfo
.89f6	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.89f9	c9 81		cmp #$81			cmp 	#$81
.89fb	f0 42		beq $8a3f			beq 	_AMXFail
.89fd	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.89ff	80 17		bra $8a18			bra 	_AMXHaveInfo 			; odd design decision there.
.8a01					_AMXGroup2:
.8a01	8a		txa				txa 							; is it in group 2 ?
.8a02	29 20		and #$20			and 	#AM_ISG2
.8a04	f0 39		beq $8a3f			beq 	_AMXFail 				; no, give up.
.8a06	8a		txa				txa 							; get the offset into Y
.8a07	29 1f		and #$1f			and 	#$1F
.8a09	4a		lsr a				lsr 	a 						; make it 0-7.
.8a0a	4a		lsr a				lsr  	a
.8a0b	a8		tay				tay
.8a0c	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a0f					_AMXCheckOkay:
.8a0f	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a10	88		dey				dey
.8a11	10 fc		bpl $8a0f			bpl 	_AMXCheckOkay
.8a13	90 2a		bcc $8a3f			bcc 	_AMXFail 				; not allowed.
.8a15	8a		txa				txa  							; get mask back
.8a16	29 1f		and #$1f			and 	#$1F
.8a18					_AMXHaveInfo:
.8a18	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a1a	10 05		bpl $8a21			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a1c	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a1f	d0 1e		bne $8a3f			bne 	_AMXFail
.8a21					_AMXAnySize:
.8a21	18		clc				clc 							; add offset to the base opcode
.8a22	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a25					_AMXOutputCode:
.8a25	20 90 89	jsr $8990			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a28	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a2a	f0 10		beq $8a3c			beq 	_AMXExit
.8a2c	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a2f	20 90 89	jsr $8990			jsr 	AssemblerWriteByte
.8a32	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a34	30 06		bmi $8a3c			bmi 	_AMXExit
.8a36	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a39	20 90 89	jsr $8990			jsr 	AssemblerWriteByte
.8a3c					_AMXExit:
.8a3c	7a		ply				ply
.8a3d	38		sec				sec
.8a3e	60		rts				rts
.8a3f					_AMXFail:
.8a3f	a0 00		ldy #$00			ldy 	#0
.8a41					_AMXCheckOddities:
.8a41	8a		txa				txa
.8a42	d9 6a 8a	cmp $8a6a,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a45	d0 16		bne $8a5d			bne 	_AMXCONext
.8a47	b9 68 8a	lda $8a68,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a4a	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a4d	d0 0e		bne $8a5d			bne 	_AMXCONext
.8a4f	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a51	10 05		bpl $8a58			bpl 	_AMXCONotZero
.8a53	ad 10 04	lda $0410			lda 	NSMantissa1
.8a56	d0 05		bne $8a5d			bne 	_AMXCONext
.8a58					_AMXCONotZero:
.8a58	b9 69 8a	lda $8a69,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a5b	80 c8		bra $8a25			bra 	_AMXOutputCode 			; and assemble it
.8a5d					_AMXCONext:
.8a5d	c8		iny				iny
.8a5e	c8		iny				iny
.8a5f	c8		iny				iny
.8a60	b9 68 8a	lda $8a68,y			lda 	ExtraOpcode+0,y 		; end of table
.8a63	d0 dc		bne $8a41			bne 	_AMXCheckOddities
.8a65					_AMXCOFail:
.8a65	7a		ply				ply
.8a66	18		clc				clc
.8a67	60		rts				rts
.8a68					ExtraOpcode:
>8a68	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a6b	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a6e	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a71	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a74	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a77	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a7a	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a7d	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a80	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a83	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a86	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a87					LabelHere:
.8a87	c8		iny				iny 								; skip .
.8a88	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a8a	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm 				; get a term
.8a8d	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a90	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a92	d0 24		bne $8ab8			bne 	_ALType
.8a94	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a97	85 36		sta $36				sta 	zTemp0
.8a99	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a9c	85 37		sta $37				sta 	zTemp0+1
.8a9e	5a		phy				phy 								; copy address in.
.8a9f	a0 01		ldy #$01			ldy 	#1
.8aa1	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8aa4	92 36		sta ($36)			sta 	(zTemp0)
.8aa6	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8aa9	91 36		sta ($36),y			sta 	(zTemp0),y
.8aab	c8		iny				iny
.8aac	a9 00		lda #$00			lda 	#0
.8aae	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab0	c8		iny				iny
.8ab1	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab3	c8		iny				iny
.8ab4	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab6	7a		ply				ply
.8ab7	60		rts				rts
.8ab8					_ALType:
.8ab8	4c 70 b3	jmp $b370			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8abb					TypeAndCalculateOperand:
.8abb	b1 30		lda ($30),y			lda 	(codePtr),y
.8abd	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8abf	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ac1	f0 5b		beq $8b1e			beq 	_TACOExit
.8ac3	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ac5	f0 57		beq $8b1e			beq 	_TACOExit
.8ac7	c8		iny				iny
.8ac8	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8aca	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8acc	f0 51		beq $8b1f			beq 	CalculateOperand
.8ace	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ad0	f0 1f		beq $8af1			beq 	_TACOIndirect
.8ad2	88		dey				dey 								; undo get of first character
.8ad3	20 1f 8b	jsr $8b1f			jsr 	CalculateOperand 			; get operand
.8ad6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad8	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8ada	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8adc	d0 40		bne $8b1e			bne 	_TACOExit
.8ade	c8		iny				iny
.8adf	20 f7 ac	jsr $acf7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8ae2	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8ae4	c9 58		cmp #$58			cmp 	#'X'
.8ae6	f0 36		beq $8b1e			beq 	_TACOExit
.8ae8	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8aea	c9 59		cmp #$59			cmp 	#'Y'
.8aec	f0 30		beq $8b1e			beq 	_TACOExit
.8aee					_TACOSyntax:
.8aee	4c 66 b3	jmp $b366			jmp 	SyntaxError
.8af1					_TACOIndirect:
.8af1	20 1f 8b	jsr $8b1f			jsr 	CalculateOperand 			; get the operand
.8af4	b1 30		lda ($30),y			lda 	(codePtr),y
.8af6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8af8	f0 17		beq $8b11			beq 	_TACOIndX
.8afa	20 80 ad	jsr $ad80			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8afd	b1 30		lda ($30),y			lda 	(codePtr),y
.8aff	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b01	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b03	d0 19		bne $8b1e			bne 	_TACOExit
.8b05	c8		iny				iny
.8b06	20 f7 ac	jsr $acf7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b09	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b0b	d0 e1		bne $8aee			bne 	_TACOSyntax
.8b0d	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b0f	80 0d		bra $8b1e			bra 	_TACOExit
.8b11					_TACOIndX:
.8b11	c8		iny				iny
.8b12	20 f7 ac	jsr $acf7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b15	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b17	d0 d5		bne $8aee			bne 	_TACOSyntax
.8b19	20 80 ad	jsr $ad80			jsr 	CheckRightBracket			; check )
.8b1c	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b1e					_TACOExit:
.8b1e	60		rts				rts
.8b1f					CalculateOperand:
.8b1f	48		pha				pha
.8b20	da		phx				phx
.8b21	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b23	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger
.8b26	fa		plx				plx
.8b27	68		pla				pla
.8b28	60		rts				rts
.acf7					TACOCheckXY:
.acf7	b1 30		lda ($30),y			lda 	(codePtr),y
.acf9	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.acfb	c9 40		cmp #$40			cmp 	#$40
.acfd	d0 21		bne $ad20			bne 	_TCXYFail
.acff	b1 30		lda ($30),y			lda 	(codePtr),y
.ad01	18		clc				clc
.ad02	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ad04	85 37		sta $37				sta 	zTemp0+1
.ad06	c8		iny				iny
.ad07	b1 30		lda ($30),y			lda 	(codePtr),y
.ad09	c8		iny				iny
.ad0a	85 36		sta $36				sta 	zTemp0
.ad0c	5a		phy				phy 								; save position
.ad0d	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ad0f	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad11	d0 0c		bne $ad1f			bne 	_TCXYPopFail
.ad13	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ad15	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad17	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ad19	f0 08		beq $ad23			beq 	_TCXYFound
.ad1b	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ad1d	f0 04		beq $ad23			beq 	_TCXYFound
.ad1f					_TCXYPopFail:
.ad1f	7a		ply				ply
.ad20					_TCXYFail:
.ad20	a9 00		lda #$00			lda 	#0
.ad22	60		rts				rts
.ad23					_TCXYFound:
.ad23	7a		ply				ply 								; restore position
.ad24	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ad26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b29					EditProgramCode:
.8b29	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b2c	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8b2f	20 a5 a5	jsr $a5a5			jsr 	MemorySearch
.8b32	90 05		bcc $8b39			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b34	d0 03		bne $8b39			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b36	20 ab b5	jsr $b5ab			jsr 	MemoryDeleteLine 			; delete the line
.8b39					_EPCNoDelete:
.8b39	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8b3c	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b3e	f0 0d		beq $8b4d			beq 	_EPCNoInsert
.8b40	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b43	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b46	20 a5 a5	jsr $a5a5			jsr 	MemorySearch
.8b49	18		clc				clc 								; insert at this point.
.8b4a	20 e2 b5	jsr $b5e2			jsr 	MemoryInsertLine 			; insert the line
.8b4d					_EPCNoInsert:
.8b4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b4e					WarmStart:
.8b4e	a2 ff		ldx #$ff			ldx 	#$FF
.8b50	9a		txs				txs
.8b51	20 36 b5	jsr $b536			jsr 	EXTInputLine 				; get line to lineBuffer
.8b54	20 78 aa	jsr $aa78			jsr 	TokeniseLine 				; tokenise the line
.8b57	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8b5a	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8b5d	d0 17		bne $8b76			bne 	_WSEditCode 				; if so,edit code.
.8b5f	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b62	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8b64	85 30		sta $30				sta 	codePtr
.8b66	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b68	85 31		sta $31				sta 	codePtr+1
.8b6a	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8b6d	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b6f	f0 dd		beq $8b4e			beq 	WarmStart
.8b71	20 89 94	jsr $9489			jsr 	RUNCodePointerLine 			; execute that line.
.8b74	80 d8		bra $8b4e			bra 	WarmStart
.8b76					_WSEditCode:
.8b76	20 29 8b	jsr $8b29			jsr 	EditProgramCode
.8b79	20 e7 8b	jsr $8be7			jsr 	ClearCommand
.8b7c	80 d0		bra $8b4e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b7e					AssembleCommand:
.8b7e	a2 00		ldx #$00			ldx 	#0
.8b80	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger 		; start address
.8b83	ad 08 04	lda $0408			lda 	NSMantissa0
.8b86	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b89	ad 10 04	lda $0410			lda 	NSMantissa1
.8b8c	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b8f	20 88 ad	jsr $ad88			jsr 	CheckComma
.8b92	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; options
.8b95	ad 08 04	lda $0408			lda 	NSMantissa0
.8b98	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b9b	60		rts				rts
.8b9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b9d					AssertCommand:
.8b9d	a2 00		ldx #$00			ldx 	#0
.8b9f	20 a9 a4	jsr $a4a9			jsr 	EvaluateInteger 			; the assert test
.8ba2	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; exit if result is non zero.
.8ba5	d0 05		bne $8bac			bne 	_ACExit
.8ba7	a9 0a		lda #$0a		lda	#10
.8ba9	4c 13 99	jmp $9913		jmp	ErrorHandler
.8bac					_ACExit:
.8bac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8bad					CallCommand:
.8bad	a2 00		ldx #$00			ldx 	#0
.8baf	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger
.8bb2					_CCClear
.8bb2	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8bb3	20 46 a5	jsr $a546			jsr 	NSMSetZero
.8bb6	e0 04		cpx #$04			cpx 	#4
.8bb8	d0 f8		bne $8bb2			bne 	_CCClear
.8bba	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8bbc					_CCCParam:
.8bbc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bc0	d0 09		bne $8bcb			bne 	_CCCRun6502
.8bc2	c8		iny				iny 								; skip comma
.8bc3	e8		inx				inx	 								; next level
.8bc4	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bc7	e0 03		cpx #$03			cpx 	#3
.8bc9	90 f1		bcc $8bbc			bcc 	_CCCParam 					; done all 3 ?
.8bcb					_CCCRun6502:
.8bcb	5a		phy				phy 								; save position
.8bcc	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bcf	85 37		sta $37				sta 	zTemp0+1
.8bd1	ad 08 04	lda $0408			lda 	NSMantissa0
.8bd4	85 36		sta $36				sta 	zTemp0
.8bd6	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bd9	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bdc	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bdf	20 e4 8b	jsr $8be4			jsr 	_CCCZTemp0 					; call zTemp0
.8be2	7a		ply				ply 								; restore position and exit
.8be3	60		rts				rts
.8be4					_CCCZTemp0:
.8be4	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8be7					ClearCommand:
.8be7	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8be9	85 36		sta $36				sta 	0+zTemp0
.8beb	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bed	85 37		sta $37				sta 	1+zTemp0
.8bef					_ClearZeroLoop:
.8bef	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8bf1	f0 24		beq $8c17			beq 	_ClearZeroEnd
.8bf3	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8bf5	a9 00		lda #$00			lda 	#0
.8bf7					_ClearOneVariable:
.8bf7	91 36		sta ($36),y			sta 	(zTemp0),y
.8bf9	c8		iny				iny
.8bfa	c0 08		cpy #$08			cpy 	#8
.8bfc	d0 f9		bne $8bf7			bne 	_ClearOneVariable
.8bfe	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c00	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c02	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c04	d0 04		bne $8c0a			bne 	_ClearNotProcedure
.8c06	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c08	91 36		sta ($36),y			sta 	(zTemp0),y
.8c0a					_ClearNotProcedure:
.8c0a	18		clc				clc 								; go to the next variable
.8c0b	b2 36		lda ($36)			lda 	(zTemp0)
.8c0d	65 36		adc $36				adc 	zTemp0
.8c0f	85 36		sta $36				sta 	zTemp0
.8c11	90 dc		bcc $8bef			bcc 	_ClearZeroLoop
.8c13	e6 37		inc $37				inc 	zTemp0+1
.8c15	80 d8		bra $8bef			bra 	_ClearZeroLoop
.8c17					_ClearZeroEnd:
.8c17	18		clc				clc
.8c18	a5 36		lda $36				lda 	zTemp0
.8c1a	69 01		adc #$01			adc 	#1
.8c1c	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c1f	a5 37		lda $37				lda 	zTemp0+1
.8c21	69 00		adc #$00			adc 	#0
.8c23	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c26	20 5f a6	jsr $a65f			jsr 	StackReset
.8c29	20 c5 b6	jsr $b6c5			jsr 	StringSystemInitialise
.8c2c	20 33 98	jsr $9833			jsr 	ProcedureScan
.8c2f	20 45 94	jsr $9445			jsr 	Command_Restore
.8c32	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c35	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c38	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c3b	20 e0 a1	jsr $a1e0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c3e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c3f					ClearScreen:
.8c3f	5a		phy				phy
.8c40	20 1d b5	jsr $b51d			jsr 	EXTClearScreen
.8c43	7a		ply				ply
.8c44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c45					Command_Data:
.8c45	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c47	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c49	20 85 98	jsr $9885			jsr 	ScanForward
.8c4c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c4d					DimCommand:
.8c4d	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4f	29 c0		and #$c0			and 	#$C0
.8c51	c9 40		cmp #$40			cmp 	#$40
.8c53	d0 7a		bne $8ccf			bne 	_DCSyntax
.8c55	b1 30		lda ($30),y			lda 	(codePtr),y
.8c57	18		clc				clc
.8c58	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c5a	85 3f		sta $3f				sta 	zaTemp+1
.8c5c	c8		iny				iny
.8c5d	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5f	c8		iny				iny
.8c60	85 3e		sta $3e				sta 	zaTemp
.8c62	5a		phy				phy
.8c63	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c65	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c67	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c69	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c6b	f0 62		beq $8ccf			beq 	_DCSyntax
.8c6d	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c6f	29 04		and #$04			and 	#NSBIsArray
.8c71	f0 64		beq $8cd7			beq 	_DCType
.8c73	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c75	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c77	d0 59		bne $8cd2			bne 	_DCRedefine
.8c79	7a		ply				ply
.8c7a	20 da 8c	jsr $8cda			jsr 	_DCGetSize 				; get array size, check it.
.8c7d	5a		phy				phy
.8c7e	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c80	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c82	7a		ply				ply 							; is there a second (e.g. ,x)
.8c83	b1 30		lda ($30),y			lda 	(codePtr),y
.8c85	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c87	d0 0a		bne $8c93			bne 	_DCOneDimension
.8c89	c8		iny				iny 							; skip comma
.8c8a	20 da 8c	jsr $8cda			jsr 	_DCGetSize 				; get 2nd array size
.8c8d	5a		phy				phy
.8c8e	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c90	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c92	7a		ply				ply
.8c93					_DCOneDimension:
.8c93	5a		phy				phy 							; save position
.8c94	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c96	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c98	aa		tax				tax
.8c99	c8		iny				iny
.8c9a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c9c	e8		inx				inx 							; bump them.
.8c9d	1a		inc a				inc 	a
.8c9e	20 02 b2	jsr $b202			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8ca1	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8ca3	29 e0		and #$e0			and 	#$E0
.8ca5	d0 23		bne $8cca			bne 	_DCSize
.8ca7	a0 02		ldy #$02			ldy 	#2 						; get base type
.8ca9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cab	20 e8 8c	jsr $8ce8			jsr 	ScaleByBaseType 		; scale by base type
.8cae	a5 36		lda $36				lda 	zTemp0
.8cb0	a6 37		ldx $37				ldx 	zTemp0+1
.8cb2	20 a2 a1	jsr $a1a2			jsr 	AllocateXABytes 		; allocate memory
.8cb5	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8cb7	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cb9	c8		iny				iny
.8cba	8a		txa				txa
.8cbb	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cbd	7a		ply				ply 							; get position back
.8cbe	20 80 ad	jsr $ad80			jsr 	CheckRightBracket 		; check )
.8cc1	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc3	c8		iny				iny 							; consume in case
.8cc4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cc6	f0 85		beq $8c4d			beq 	DimCommand
.8cc8	88		dey				dey 							; undo consume
.8cc9	60		rts				rts
.8cca					_DCSize:
.8cca	a9 16		lda #$16		lda	#22
.8ccc	4c 13 99	jmp $9913		jmp	ErrorHandler
.8ccf					_DCSyntax:
.8ccf	4c 66 b3	jmp $b366			jmp 	SyntaxError
.8cd2					_DCRedefine:
.8cd2	a9 15		lda #$15		lda	#21
.8cd4	4c 13 99	jmp $9913		jmp	ErrorHandler
.8cd7					_DCType:
.8cd7	4c 70 b3	jmp $b370			jmp 	TypeError
.8cda					_DCGetSize:
.8cda	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8cdc	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 	; get array dimension
.8cdf	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8ce1	f0 e7		beq $8cca			beq 	_DCSize
.8ce3	c9 fe		cmp #$fe			cmp 	#254
.8ce5	f0 e3		beq $8cca			beq 	_DCSize
.8ce7	60		rts				rts
.8ce8					ScaleByBaseType:
.8ce8	29 10		and #$10			and 	#NSBIsString 			; is it string
.8cea	d0 19		bne $8d05			bne 	_SBBTString
.8cec	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cee	48		pha				pha
.8cef	a5 36		lda $36				lda 	zTemp0
.8cf1	48		pha				pha
.8cf2	06 36		asl $36				asl 	zTemp0 					; x 2
.8cf4	26 37		rol $37				rol 	zTemp0+1
.8cf6	06 36		asl $36				asl 	zTemp0 					; x 4
.8cf8	26 37		rol $37				rol 	zTemp0+1
.8cfa	68		pla				pla 							; add stacked value = x 5
.8cfb	65 36		adc $36				adc 	zTemp0
.8cfd	85 36		sta $36				sta 	zTemp0
.8cff	68		pla				pla
.8d00	65 37		adc $37				adc 	zTemp0+1
.8d02	85 37		sta $37				sta 	zTemp0+1
.8d04	60		rts				rts
.8d05					_SBBTString:
.8d05	06 36		asl $36				asl 	zTemp0
.8d07	26 37		rol $37				rol 	zTemp0+1
.8d09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d0a					EndCommand:
.8d0a	4c 4e 8b	jmp $8b4e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8d0d					UnaryEvent:
.8d0d	fa		plx				plx
.8d0e	20 c9 96	jsr $96c9			jsr 	TimerToStackX 				; timer in +0
.8d11	e8		inx				inx  								; put reference into +1
.8d12	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm
.8d15	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d18	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d1a	d0 57		bne $8d73			bne 	_UEType
.8d1c	e8		inx				inx 								; put the step in +2
.8d1d	20 88 ad	jsr $ad88			jsr 	CheckComma
.8d20	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger
.8d23	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.8d26	ca		dex				dex
.8d27	ca		dex				dex
.8d28	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy reference to zTemp0
.8d2b	85 36		sta $36				sta 	zTemp0
.8d2d	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8d30	85 37		sta $37				sta 	zTemp0+1
.8d32	5a		phy				phy
.8d33	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d35	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d37	30 36		bmi $8d6f			bmi 	_UEFalse
.8d39	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d3b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d3e	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d40	c8		iny				iny
.8d41	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d44	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d46	c8		iny				iny
.8d47	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d4a	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d4c	90 21		bcc $8d6f			bcc 	_UEFalse 					; no, return FALSE.
.8d4e	18		clc				clc
.8d4f	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d51	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d54	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d57	91 36		sta ($36),y			sta 	(zTemp0),y
.8d59	c8		iny				iny
.8d5a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d5d	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d60	91 36		sta ($36),y			sta 	(zTemp0),y
.8d62	c8		iny				iny
.8d63	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d66	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d69	91 36		sta ($36),y			sta 	(zTemp0),y
.8d6b	7a		ply				ply
.8d6c	4c 80 99	jmp $9980			jmp 	ReturnTrue
.8d6f					_UEFalse:
.8d6f	7a		ply				ply 								; restore Y
.8d70	4c 8c 99	jmp $998c			jmp 	ReturnFalse 				; and return False
.8d73					_UEType:
.8d73	4c 70 b3	jmp $b370			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d76					ForCommand:
.8d76	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d78	20 fa a5	jsr $a5fa			jsr 	StackOpen
.8d7b	a2 00		ldx #$00			ldx 	#0
.8d7d	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm
.8d80	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d83	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d85	d0 49		bne $8dd0			bne		_FCError
.8d87	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d89	20 90 ad	jsr $ad90			jsr 	CheckNextA
.8d8c	e8		inx				inx
.8d8d	20 a9 a4	jsr $a4a9			jsr 	EvaluateInteger 			; <from> in +1
.8d90	b1 30		lda ($30),y			lda 	(codePtr),y
.8d92	c8		iny				iny 								; consume it
.8d93	48		pha				pha 								; save on stack for later
.8d94	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8d96	f0 04		beq $8d9c			beq 	_FCNoSyntax
.8d98	c9 ca		cmp #$ca			cmp 	#KWD_TO
.8d9a	d0 37		bne $8dd3			bne 	_FCSyntaxError
.8d9c					_FCNoSyntax:
.8d9c	e8		inx				inx
.8d9d	20 a9 a4	jsr $a4a9			jsr 	EvaluateInteger
.8da0	20 3e a6	jsr $a63e			jsr 	STKSaveCodePosition 		; save loop back position
.8da3	68		pla				pla 								; restore DOWNTO or TO
.8da4	5a		phy				phy 								; save Y on the stack
.8da5	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8da7	f0 02		beq $8dab			beq 	_FCNotDownTo
.8da9	a9 02		lda #$02			lda 	#2
.8dab					_FCNotDownTo:
.8dab	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8dac	a0 10		ldy #$10			ldy 	#16
.8dae	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8db0	a0 06		ldy #$06			ldy 	#6
.8db2	ad 08 04	lda $0408			lda 	NSMantissa0
.8db5	91 34		sta ($34),y			sta 	(basicStack),y
.8db7	ad 10 04	lda $0410			lda 	NSMantissa1
.8dba	c8		iny				iny
.8dbb	91 34		sta ($34),y			sta 	(basicStack),y
.8dbd	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8dbf	a2 01		ldx #$01			ldx 	#1
.8dc1	20 d6 8d	jsr $8dd6			jsr 	FCIntegerToStack
.8dc4	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dc6	a2 02		ldx #$02			ldx 	#2
.8dc8	20 d6 8d	jsr $8dd6			jsr 	FCIntegerToStack
.8dcb	20 f6 8d	jsr $8df6			jsr 	CopyIndexToReference
.8dce	7a		ply				ply 								; restore position
.8dcf	60		rts				rts
.8dd0					_FCError:
.8dd0	4c 70 b3	jmp $b370			jmp 	TypeError
.8dd3					_FCSyntaxError:
.8dd3	4c 66 b3	jmp $b366			jmp 	SyntaxError
.8dd6					FCIntegerToStack:
.8dd6	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dd9	10 03		bpl $8dde			bpl	 	_FCNotNegative
.8ddb	20 fb a4	jsr $a4fb			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8dde					_FCNotNegative:
.8dde	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8de1	91 34		sta ($34),y			sta 	(basicStack),y
.8de3	c8		iny				iny
.8de4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8de7	91 34		sta ($34),y			sta 	(basicStack),y
.8de9	c8		iny				iny
.8dea	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ded	91 34		sta ($34),y			sta 	(basicStack),y
.8def	c8		iny				iny
.8df0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8df3	91 34		sta ($34),y			sta 	(basicStack),y
.8df5	60		rts				rts
.8df6					CopyIndexToReference:
.8df6	5a		phy				phy
.8df7	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8df9	38		sec				sec 								; (because we copy from offset 8)
.8dfa	b1 34		lda ($34),y			lda 	(basicStack),y
.8dfc	e9 08		sbc #$08			sbc 	#8
.8dfe	85 36		sta $36				sta 	zTemp0
.8e00	c8		iny				iny
.8e01	b1 34		lda ($34),y			lda 	(basicStack),y
.8e03	e9 00		sbc #$00			sbc 	#0
.8e05	85 37		sta $37				sta 	zTemp0+1
.8e07	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e09	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e0b	b1 34		lda ($34),y			lda 	(basicStack),y
.8e0d	0a		asl a				asl 	a 							; into carry
.8e0e	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e10	90 14		bcc $8e26			bcc 	_CITRNormal
.8e12	38		sec				sec
.8e13					_CITRNegative:
.8e13	a9 00		lda #$00			lda 	#0
.8e15	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e17	91 36		sta ($36),y			sta 	(zTemp0),y
.8e19	c8		iny				iny
.8e1a	ca		dex				dex
.8e1b	d0 f6		bne $8e13			bne 	_CITRNegative
.8e1d	88		dey				dey 								; look at MSB of mantissa
.8e1e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e20	09 80		ora #$80			ora 	#$80
.8e22	91 36		sta ($36),y			sta 	(zTemp0),y
.8e24	7a		ply				ply
.8e25	60		rts				rts
.8e26					_CITRNormal:
.8e26	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e28	91 36		sta ($36),y			sta 	(zTemp0),y
.8e2a	c8		iny				iny
.8e2b	ca		dex				dex
.8e2c	d0 f8		bne $8e26			bne 	_CITRNormal
.8e2e	7a		ply				ply 								; and exit.
.8e2f	60		rts				rts
.8e30					NextCommand:
.8e30	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e32	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e34	20 26 a6	jsr $a626			jsr 	StackCheckFrame
.8e37	5a		phy				phy
.8e38	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e3a	b1 34		lda ($34),y			lda 	(basicStack),y
.8e3c	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e3e	30 02		bmi $8e42			bmi 	_NCStepNeg
.8e40	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e42					_NCStepNeg:
.8e42	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e44	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e46	18		clc				clc
.8e47					_NCBump:
.8e47	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e49	91 34		sta ($34),y			sta 	(basicStack),y
.8e4b	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e4d	c8		iny				iny 								; next byte
.8e4e	ca		dex				dex 								; do four times
.8e4f	d0 f6		bne $8e47			bne 	_NCBump
.8e51	20 f6 8d	jsr $8df6			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e54	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e56	b1 34		lda ($34),y			lda 	(basicStack),y
.8e58	0a		asl a				asl 	a 							; sign bit to carry
.8e59	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e5b	85 38		sta $38				sta 	zTemp1
.8e5d	90 02		bcc $8e61			bcc 	_NCCompRev 					; use if step is +ve
.8e5f	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e61					_NCCompRev:
.8e61	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e63	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e65	85 39		sta $39				sta 	zTemp1+1
.8e67	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e69	38		sec				sec
.8e6a					_NCCompare:
.8e6a	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e6c	b1 34		lda ($34),y			lda 	(basicStack),y
.8e6e	a4 39		ldy $39				ldy 	zTemp1+1
.8e70	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e72	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e74	e6 39		inc $39				inc 	zTemp1+1
.8e76	ca		dex				dex 								; do it 4 times.
.8e77	d0 f1		bne $8e6a			bne 	_NCCompare
.8e79	50 02		bvc $8e7d			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e7b	49 80		eor #$80			eor 	#$80
.8e7d					_NCNoOverflow:
.8e7d	7a		ply				ply 								; restore Y position
.8e7e	0a		asl a				asl 	a 							; is bit 7 set.
.8e7f	90 04		bcc $8e85			bcc 	_NCLoopback 				; if no , >= so loop back
.8e81	20 18 a6	jsr $a618			jsr 	StackClose 					; exit the loop
.8e84	60		rts				rts
.8e85					_NCLoopBack:
.8e85	20 4f a6	jsr $a64f			jsr 	STKLoadCodePosition 		; loop back
.8e88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e89					RectangleCommand:
.8e89	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e8b	80 02		bra $8e8f			bra 	ShapeDrawCmd
.8e8d					CircleCommand:
.8e8d	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8e8f					ShapeDrawCmd:
.8e8f	20 1d 8f	jsr $8f1d			jsr 	RunGraphicsCommand
.8e92					ShapeDraw:
.8e92	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8e95	4c 11 8f	jmp $8f11			jmp 	ExecuteGraphicCommand	 	; and complete
.8e98					SpriteCommand:
.8e98	a2 00		ldx #$00			ldx 	#0
.8e9a	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; get image number.
.8e9d	5a		phy				phy
.8e9e	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8ea0	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ea3	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8ea5	b0 0d		bcs $8eb4			bcs 	_SCRange
.8ea7	a0 ff		ldy #$ff			ldy 	#255
.8ea9	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8eac	a9 32		lda #$32			lda 	#25*2
.8eae	7a		ply				ply
.8eaf	20 1d 8f	jsr $8f1d			jsr 	RunGraphicsCommand
.8eb2	80 5d		bra $8f11			bra 	ExecuteGraphicCommand
.8eb4					_SCRange:
.8eb4	4c 6b b3	jmp $b36b			jmp 	RangeError
.8eb7					ImageCommand:
.8eb7	a2 00		ldx #$00			ldx 	#0
.8eb9	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; get image number.
.8ebc	20 1d 8f	jsr $8f1d			jsr 	RunGraphicsCommand
.8ebf					ImageRunDraw:
.8ebf	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ec1	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ec4	ad 6a 06	lda $066a			lda 	gxDrawScale
.8ec7	0a		asl a				asl 	a
.8ec8	0a		asl a				asl 	a
.8ec9	0a		asl a				asl 	a
.8eca	a8		tay				tay
.8ecb	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8ecd	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ed0	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ed3	60		rts				rts
.8ed4					TextCommand:
.8ed4	a2 00		ldx #$00			ldx 	#0
.8ed6	20 91 a4	jsr $a491			jsr 	EvaluateString 				; get text
.8ed9	20 1d 8f	jsr $8f1d			jsr 	RunGraphicsCommand
.8edc					TextRunDraw:
.8edc	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ede	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ee1	a0 00		ldy #$00			ldy 	#0
.8ee3					_IRDLoop:
.8ee3	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ee6	85 37		sta $37				sta 	zTemp0+1
.8ee8	ad 08 04	lda $0408			lda 	NSMantissa0
.8eeb	85 36		sta $36				sta 	zTemp0
.8eed	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eef	f0 13		beq $8f04			beq 	_IRDExit
.8ef1	5a		phy				phy									; save string pos
.8ef2	48		pha				pha 								; save char
.8ef3	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8ef6	0a		asl a				asl 	a
.8ef7	0a		asl a				asl 	a
.8ef8	0a		asl a				asl 	a
.8ef9	a8		tay				tay
.8efa	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8efc	fa		plx				plx 								; char to draw
.8efd	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f00	7a		ply				ply 								; restore string pos
.8f01	c8		iny				iny
.8f02	90 df		bcc $8ee3			bcc 	_IRDLoop 					; go back if no error.
.8f04					_IRDExit:
.8f04	60		rts				rts
.8f05					PlotCommand:
.8f05	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f07	20 1d 8f	jsr $8f1d			jsr 	RunGraphicsCommand
.8f0a	80 05		bra $8f11			bra 	ExecuteGraphicCommand
.8f0c					LineCommand:
.8f0c	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f0e	20 1d 8f	jsr $8f1d			jsr 	RunGraphicsCommand
.8f11					ExecuteGraphicCommand:
.8f11	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8f14	20 87 80	jsr $8087			jsr 	GXGraphicDraw 				; draw it and exit
.8f17	b0 01		bcs $8f1a			bcs 	_EGCError
.8f19	60		rts				rts
.8f1a					_EGCError:
.8f1a	4c 66 b3	jmp $b366			jmp 	SyntaxError
.8f1d					RunGraphicsCommand:
.8f1d	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8f20	68		pla				pla 								; pop handler address
.8f21	fa		plx				plx
.8f22	1a		inc a				inc 	a
.8f23	d0 01		bne $8f26			bne 	_RGINoCarry
.8f25	e8		inx				inx
.8f26					_RGINoCarry:
.8f26	8d 68 06	sta $0668			sta 	GXHandler
.8f29	8e 69 06	stx $0669			stx 	GXHandler+1
.8f2c					_RGICommandLoop:
.8f2c	b1 30		lda ($30),y			lda 	(codePtr),y
.8f2e	c8		iny				iny
.8f2f	c9 ca		cmp #$ca			cmp 	#KWD_TO						; is it TO x,y
.8f31	f0 53		beq $8f86			beq 	_RGI_To
.8f33	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8f35	f0 55		beq $8f8c			beq 	_RGI_Here
.8f37	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f39	f0 3d		beq $8f78			beq 	_RGI_Exit
.8f3b	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f3d	f0 39		beq $8f78			beq 	_RGI_Exit
.8f3f	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8f41	f0 3e		beq $8f81			beq 	_RGI_Frame
.8f43	c9 c7		cmp #$c7			cmp 	#KWD_SOLID
.8f45	f0 33		beq $8f7a			beq 	_RGI_Solid
.8f47	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.8f49	f0 4b		beq $8f96			beq 	_RGI_By
.8f4b	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.8f4d	f0 17		beq $8f66			beq 	_RGI_Move2
.8f4f	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8f51	f0 65		beq $8fb8			beq 	_RGI_Dim
.8f53	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8f55	f0 78		beq $8fcf			beq 	_RGI_Colour
.8f57	c9 af		cmp #$af			cmp 	#KWD_COLOR
.8f59	f0 74		beq $8fcf			beq 	_RGI_Colour
.8f5b	ae 63 06	ldx $0663			ldx 	gxCommandID
.8f5e	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f60	d0 03		bne $8f65			bne 	_RGI_Move 					; move
.8f62	4c f9 8f	jmp $8ff9			jmp		_RGI_SpriteInstructions
.8f65					_RGI_Move:
.8f65	88		dey				dey 								; unpick get.
.8f66					_RGI_Move2:
.8f66	20 1d 90	jsr $901d			jsr 	GCGetCoordinatePair 		; move to here
.8f69	20 44 90	jsr $9044			jsr 	GCCopyPairToStore 			; save
.8f6c	5a		phy				phy
.8f6d	20 3a 90	jsr $903a			jsr 	GCLoadAXY 					; load in
.8f70	09 20		ora #$20			ora 	#16*2 						; move there
.8f72	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f75	7a		ply				ply
.8f76	80 b4		bra $8f2c			bra 	_RGICommandLoop 			; and go round
.8f78					_RGI_Exit:
.8f78	88		dey				dey 								; unpick : / EOL
.8f79	60		rts				rts
.8f7a					_RGI_Solid:
.8f7a	a9 02		lda #$02			lda 	#2
.8f7c	8d 64 06	sta $0664			sta 	gxFillSolid
.8f7f	80 ab		bra $8f2c			bra 	_RGICommandLoop
.8f81					_RGI_Frame:
.8f81	9c 64 06	stz $0664			stz 	gxFillSolid
.8f84	80 a6		bra $8f2c			bra 	_RGICommandLoop
.8f86					_RGI_To:
.8f86	20 1d 90	jsr $901d			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f89	20 44 90	jsr $9044			jsr 	GCCopyPairToStore
.8f8c					_RGI_Here:
.8f8c	5a		phy				phy
.8f8d	20 3a 90	jsr $903a			jsr 	GCLoadAXY 					; load it into AXY
.8f90	20 f6 8f	jsr $8ff6			jsr 	_RGICallHandler 			; go do whatever it is.
.8f93	7a		ply				ply
.8f94	80 96		bra $8f2c			bra 	_RGICommandLoop 			; and go round
.8f96					_RGI_By:
.8f96	20 2a 90	jsr $902a			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8f99	18		clc				clc
.8f9a	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f9d	6d 65 06	adc $0665			adc 	gxxPos
.8fa0	8d 65 06	sta $0665			sta 	gxXPos
.8fa3	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fa6	6d 66 06	adc $0666			adc 	gxxPos+1
.8fa9	8d 66 06	sta $0666			sta 	gxXPos+1
.8fac	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8faf	18		clc				clc
.8fb0	6d 67 06	adc $0667			adc 	gxYPos
.8fb3	8d 67 06	sta $0667			sta 	gxYPos
.8fb6	80 d4		bra $8f8c			bra 	_RGI_Here
.8fb8					_RGI_Dim:
.8fb8	a2 01		ldx #$01			ldx	 	#1
.8fba	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger
.8fbd	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fc0	c9 00		cmp #$00			cmp 	#0
.8fc2	f0 2f		beq $8ff3			beq 	_RGIRange
.8fc4	c9 09		cmp #$09			cmp 	#8+1
.8fc6	b0 2b		bcs $8ff3			bcs		_RGIRange
.8fc8	3a		dec a				dec 	a
.8fc9	8d 6a 06	sta $066a			sta 	gxDrawScale
.8fcc	4c 2c 8f	jmp $8f2c			jmp 	_RGICommandLoop
.8fcf					_RGI_Colour:
.8fcf	a2 01		ldx #$01			ldx 	#1 							; colour
.8fd1	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger
.8fd4	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fd6	20 46 a5	jsr $a546			jsr 	NSMSetZero
.8fd9	b1 30		lda ($30),y			lda 	(codePtr),y
.8fdb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fdd	d0 04		bne $8fe3			bne 	_RGICDefaultMode
.8fdf	c8		iny				iny
.8fe0	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger
.8fe3					_RGICDefaultMode:
.8fe3	5a		phy				phy
.8fe4	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8fe6	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8fe9	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8fec	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fef	7a		ply				ply
.8ff0	4c 2c 8f	jmp $8f2c			jmp 	_RGICommandLoop 			; and go round
.8ff3					_RGIRange:
.8ff3	4c 6b b3	jmp $b36b			jmp 	RangeError
.8ff6					_RGICallHandler:
.8ff6	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.8ff9					_RGI_SpriteInstructions:
.8ff9	c9 be		cmp #$be			cmp 	#KWD_OFF
.8ffb	f0 07		beq $9004			beq 	_RGISpriteOff
.8ffd	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.8fff	f0 11		beq $9012			beq 	_RGISetImage
.9001	4c 65 8f	jmp $8f65			jmp 	_RGI_Move
.9004					_RGISpriteOff:
.9004	5a		phy				phy
.9005	a0 01		ldy #$01			ldy 	#1
.9007	a2 00		ldx #$00			ldx 	#0
.9009					_RGIDoCommandLoop:
.9009	a9 10		lda #$10			lda 	#8*2
.900b	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.900e	7a		ply				ply
.900f	4c 2c 8f	jmp $8f2c			jmp 	_RGICommandLoop
.9012					_RGISetImage:
.9012	a2 01		ldx #$01			ldx 	#1
.9014	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger
.9017	5a		phy				phy
.9018	aa		tax				tax
.9019	a0 00		ldy #$00			ldy 	#0
.901b	80 ec		bra $9009			bra 	_RGIDoCommandLoop
.901d					GCGetCoordinatePair:
.901d	a2 01		ldx #$01			ldx 	#1
.901f	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger
.9022	20 88 ad	jsr $ad88			jsr 	CheckComma
.9025	e8		inx				inx
.9026	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger
.9029	60		rts				rts
.902a					GCSignedCoordinatePair:
.902a	a2 01		ldx #$01			ldx 	#1
.902c	20 ca a4	jsr $a4ca			jsr 	Evaluate16BitIntegerSigned
.902f	20 88 ad	jsr $ad88			jsr 	CheckComma
.9032	e8		inx				inx
.9033	20 ca a4	jsr $a4ca			jsr 	Evaluate16BitIntegerSigned
.9036	60		rts				rts
.9037					_GCCPRange:
.9037	4c 6b b3	jmp $b36b			jmp 	RangeError
.903a					GCLoadAXY:
.903a	ad 66 06	lda $0666			lda 	gxXPos+1
.903d	ae 65 06	ldx $0665			ldx 	gxXPos
.9040	ac 67 06	ldy $0667			ldy 	gxYPos
.9043	60		rts				rts
.9044					GCCopyPairToStore:
.9044	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9047	8d 65 06	sta $0665			sta 	gxXPos
.904a	ad 11 04	lda $0411			lda 	NSMantissa1+1
.904d	8d 66 06	sta $0666			sta 	gxXPos+1
.9050	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9053	8d 67 06	sta $0667			sta 	gxYPos
.9056	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9057					BitmapCtrl:
.9057	b1 30		lda ($30),y			lda 	(codePtr),y
.9059	c8		iny				iny
.905a	a2 01		ldx #$01			ldx 	#1
.905c	c9 bf		cmp #$bf			cmp 	#KWD_ON
.905e	f0 11		beq $9071			beq 	BitmapSwitch
.9060	ca		dex				dex
.9061	c9 be		cmp #$be			cmp 	#KWD_OFF
.9063	f0 0c		beq $9071			beq 	BitmapSwitch
.9065	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; get the colour
.9068	5a		phy				phy
.9069	aa		tax				tax
.906a	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.906c	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.906f	7a		ply				ply
.9070	60		rts				rts
.9071					BitmapSwitch:
.9071	5a		phy				phy
.9072	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9074	a9 02		lda #$02			lda 	#1*2
.9076	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9079	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.907b	a0 00		ldy #$00			ldy 	#0
.907d	a2 ff		ldx #$ff			ldx 	#$FF
.907f	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9082	9c 64 06	stz $0664			stz 	gxFillSolid
.9085	9c 65 06	stz $0665			stz 	gxXPos
.9088	9c 66 06	stz $0666			stz 	gxXPos+1
.908b	9c 67 06	stz $0667			stz 	gxYPos
.908e	9c 6a 06	stz $066a			stz 	gxDrawScale
.9091	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9093	a2 00		ldx #$00			ldx 	#0
.9095	a0 00		ldy #$00			ldy 	#0
.9097	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.909a	7a		ply				ply
.909b	60		rts				rts
.909c					SpritesCtrl:
.909c	b1 30		lda ($30),y			lda 	(codePtr),y
.909e	c8		iny				iny
.909f	a2 01		ldx #$01			ldx 	#1
.90a1	c9 bf		cmp #$bf			cmp 	#KWD_ON
.90a3	f0 08		beq $90ad			beq 	SpriteSwitch
.90a5	ca		dex				dex
.90a6	c9 be		cmp #$be			cmp 	#KWD_OFF
.90a8	f0 03		beq $90ad			beq 	SpriteSwitch
.90aa	4c 66 b3	jmp $b366			jmp 	SyntaxError
.90ad					SpriteSwitch:
.90ad	5a		phy				phy
.90ae	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90b0	a9 04		lda #$04			lda 	#2*2
.90b2	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90b5	7a		ply				ply
.90b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90b7					GfxCommand:
.90b7	a2 00		ldx #$00			ldx 	#0
.90b9	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; command
.90bc	20 88 ad	jsr $ad88			jsr 	CheckComma
.90bf	e8		inx				inx
.90c0	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger 		; X
.90c3	20 88 ad	jsr $ad88			jsr 	CheckComma
.90c6	e8		inx				inx
.90c7	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; Y
.90ca	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90cd	4a		lsr a				lsr 	a
.90ce	d0 16		bne $90e6			bne 	_GfxError
.90d0	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90d3	b0 11		bcs $90e6			bcs 	_GfxError 					; bit 7 should have been zero
.90d5	5a		phy				phy 								; save pos
.90d6	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90d9	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90dc	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90df	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90e2	b0 02		bcs $90e6			bcs 	_GfxError
.90e4	7a		ply				ply 								; restore pos and exit.
.90e5	60		rts				rts
.90e6					_GfxError:
.90e6	4c 6b b3	jmp $b36b			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90e9					Command_GOSUB:
.90e9	a2 00		ldx #$00			ldx 	#0
.90eb	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.90ee	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.90f0	20 fa a5	jsr $a5fa			jsr 	StackOpen 					; create frame
.90f3	20 3e a6	jsr $a63e			jsr 	STKSaveCodePosition 		; save current position
.90f6	4c 0c 91	jmp $910c			jmp 	GotoStackX
.90f9					Command_RETURN:
.90f9	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.90fb	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.90fd	20 26 a6	jsr $a626			jsr 	StackCheckFrame
.9100	20 4f a6	jsr $a64f			jsr 	STKLoadCodePosition 		; restore code position
.9103	20 18 a6	jsr $a618			jsr 	StackClose
.9106	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.9107					GotoCommand:
.9107	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.9109	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger
.910c					GotoStackX:
.910c	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.910f	48		pha				pha 								; it is slightly inefficient, just in cases.
.9110	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9113	fa		plx				plx
.9114	20 a5 a5	jsr $a5a5			jsr 	MemorySearch 				; transfer to line number AX.
.9117	90 05		bcc $911e			bcc 	_GotoError 					; not found, off end.
.9119	d0 03		bne $911e			bne 	_GotoError 					; not found exactly
.911b	4c 82 94	jmp $9482			jmp 	RunNewLine 					; and go straight to new line code.
.911e					_GotoError:
.911e	a9 0d		lda #$0d		lda	#13
.9120	4c 13 99	jmp $9913		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9123					IfCommand:
.9123	a2 00		ldx #$00			ldx 	#0 							; If what.
.9125	20 86 a4	jsr $a486			jsr 	EvaluateNumber
.9128	b1 30		lda ($30),y			lda 	(codePtr),y
.912a	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.912c	d0 0a		bne $9138			bne 	_IFStructured
.912e	c8		iny				iny 								; consume THEN
.912f	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; is it zero
.9132	f0 01		beq $9135			beq 	_IfFail 					; if fail, go to next line
.9134	60		rts				rts 								; if THEN just continue
.9135					_IfFail:
.9135	4c e7 94	jmp $94e7			jmp 	EOLCommand
.9138					_IfStructured:
.9138	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; is it zero
.913b	d0 07		bne $9144			bne 	_IfExit 					; if not, then continue normally.
.913d	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.913f	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9141	20 85 98	jsr $9885			jsr 	ScanForward 				; and run from there/
.9144					_IfExit:
.9144	60		rts				rts
.9145					ElseCode:
.9145	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9147	aa		tax				tax 								; so just go to the structure exit
.9148	20 85 98	jsr $9885			jsr 	ScanForward
.914b	60		rts				rts
.914c					EndIf:
.914c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.914d					UnaryJoyX:
.914d	18		clc				clc
.914e	80 01		bra $9151			bra 	JoyMain
.9150					UnaryJoyY:
.9150	38		sec				sec
.9151					JoyMain:
.9151	fa		plx				plx 								; get pos
.9152	08		php				php 								; save carry (set for Y)
.9153	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9156	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.9159	20 64 b5	jsr $b564			jsr 	EXTReadController 			; read the controller.
.915c	28		plp				plp
.915d	90 02		bcc $9161			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.915f	4a		lsr a				lsr 	a
.9160	4a		lsr a				lsr 	a
.9161					_JMNoShift:
.9161	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9162	b0 0a		bcs $916e			bcs 	_JMIsRight
.9164	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9165	b0 04		bcs $916b			bcs 	_JMIsLeft
.9167	20 46 a5	jsr $a546			jsr 	NSMSetZero 					; zero result
.916a	60		rts				rts
.916b					_JMIsLeft:
.916b	4c 80 99	jmp $9980			jmp 	ReturnTrue
.916e					_JMIsRight:
.916e	a9 01		lda #$01			lda 	#1
.9170	20 48 a5	jsr $a548			jsr 	NSMSetByte
.9173	60		rts				rts
.9174					UnaryJoyB:
.9174	fa		plx				plx 								; get pos
.9175	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9178	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.917b	20 64 b5	jsr $b564			jsr 	EXTReadController 			; read the controller.
.917e	4a		lsr a				lsr 	a
.917f	4a		lsr a				lsr 	a
.9180	4a		lsr a				lsr 	a
.9181	4a		lsr a				lsr 	a
.9182	29 01		and #$01			and 	#1
.9184	20 48 a5	jsr $a548			jsr 	NSMSetByte
.9187	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9188					LetCommand:
.9188	a2 00		ldx #$00			ldx 	#0
.918a	b1 30		lda ($30),y			lda 	(codePtr),y
.918c	c9 10		cmp #$10			cmp 	#KWD_AT
.918e	d0 16		bne $91a6			bne 	_LCStandard
.9190	c8		iny				iny 								; skip equal
.9191	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm 				; get a number
.9194	20 31 9e	jsr $9e31			jsr 	Dereference 				; dereference it
.9197	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.919a	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.919c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.919f	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.91a1	d0 10		bne $91b3			bne 	_LCMain
.91a3	4c 70 b3	jmp $b370			jmp 	TypeError 					; was a reference before.
.91a6					_LCStandard:
.91a6	ad 04 9d	lda $9d04			lda 	PrecedenceLevel+"*"			; precedence > this
.91a9	20 1e 9d	jsr $9d1e			jsr 	EvaluateExpressionAtPrecedence
.91ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91af	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91b1	f0 0e		beq $91c1			beq 	_LetGoProc 					; it's a procedure call.
.91b3					_LCMain:
.91b3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.91b5	20 90 ad	jsr $ad90			jsr 	CheckNextA
.91b8	e8		inx				inx 								; RHS
.91b9	20 7d a4	jsr $a47d			jsr 	EvaluateValue
.91bc	ca		dex				dex
.91bd	20 c4 91	jsr $91c4			jsr 	AssignVariable
.91c0	60		rts				rts
.91c1					_LetGoProc:
.91c1	4c 5d 93	jmp $935d			jmp 	CallProcedure
.91c4					AssignVariable:
.91c4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91c7	48		pha				pha 								; save a copy
.91c8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91cb	29 10		and #$10			and 	#NSBIsString
.91cd	d0 0b		bne $91da			bne 	_ASError
.91cf	68		pla				pla 								; get back
.91d0	29 10		and #$10			and 	#NSBIsString 				; check type
.91d2	d0 03		bne $91d7			bne 	_ASString
.91d4	4c 59 9d	jmp $9d59			jmp 	AssignNumber
.91d7					_ASString:
.91d7	4c c7 9d	jmp $9dc7			jmp 	AssignString
.91da					_ASError:
.91da	4c 70 b3	jmp $b370			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91dd					Command_List:
.91dd	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91e0	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91e3	a9 ff		lda #$ff			lda 	#$FF
.91e5	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91e8	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91eb	b1 30		lda ($30),y			lda 	(codePtr),y
.91ed	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91ef	f0 1e		beq $920f			beq 	_CLSecond
.91f1	20 6d 92	jsr $926d			jsr 	CLIsDigit 					; if not digit, list all
.91f4	b0 24		bcs $921a			bcs 	_CLStart
.91f6	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91f8	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger
.91fb	b1 30		lda ($30),y			lda 	(codePtr),y
.91fd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91ff	f0 0e		beq $920f			beq 	_CLSecond 					; if so go get it
.9201	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9204	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9207	ad 14 04	lda $0414			lda 	NSMantissa1+4
.920a	8d 17 04	sta $0417			sta 	NSMantissa1+7
.920d	80 0b		bra $921a			bra 	_CLStart
.920f					_CLSecond:
.920f	c8		iny				iny 								; consume comma
.9210	20 6d 92	jsr $926d			jsr 	CLIsDigit 					; digit found
.9213	b0 05		bcs $921a			bcs 	_CLStart 					; if not, continue listing
.9215	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9217	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger
.921a					_CLStart
.921a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.921c	85 30		sta $30				sta 	codePtr
.921e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9220	85 31		sta $31				sta 	codePtr+1
.9222					_CLLoop:
.9222	20 61 b5	jsr $b561			jsr 	EXTBreakCheck 				; break check
.9225	f0 30		beq $9257			beq 	_CLExit
.9227	b2 30		lda ($30)			lda 	(codePtr)
.9229	f0 2c		beq $9257			beq 	_CLExit
.922b	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.922d	20 5a 92	jsr $925a			jsr 	CLCompareLineNo
.9230	90 18		bcc $924a			bcc 	_CLNext
.9232	a2 07		ldx #$07			ldx 	#7
.9234	20 5a 92	jsr $925a			jsr 	CLCompareLineNo
.9237	f0 02		beq $923b			beq 	_CLDoThisOne
.9239	b0 0f		bcs $924a			bcs 	_CLNext
.923b					_CLDoThisOne:
.923b	20 e1 96	jsr $96e1			jsr 	ListConvertLine 			; convert line into token Buffer
.923e	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9240	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.9242	20 6c 99	jsr $996c			jsr 	PrintStringXA
.9245	a9 0d		lda #$0d			lda 	#13 						; new line
.9247	20 20 b5	jsr $b520			jsr 	EXTPrintCharacter
.924a					_CLNext:
.924a	18		clc				clc
.924b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.924d	65 30		adc $30				adc 	codePtr
.924f	85 30		sta $30				sta 	codePtr
.9251	90 02		bcc $9255			bcc 	_CREExit
.9253	e6 31		inc $31				inc 	codePtr+1
.9255					_CREExit:
.9255	80 cb		bra $9222			bra 	_CLLoop
.9257					_CLExit:
.9257	4c 4e 8b	jmp $8b4e			jmp 	WarmStart
.925a					CLCompareLineNo:
.925a	38		sec				sec
.925b	a0 01		ldy #$01			ldy 	#1
.925d	b1 30		lda ($30),y			lda 	(codePtr),y
.925f	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9262	85 36		sta $36				sta 	zTemp0
.9264	c8		iny				iny
.9265	b1 30		lda ($30),y			lda 	(codePtr),y
.9267	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.926a	05 36		ora $36				ora 	zTemp0
.926c	60		rts				rts
.926d					CLIsDigit:
.926d	b1 30		lda ($30),y			lda 	(codePtr),y
.926f	c9 30		cmp #$30			cmp 	#"0"
.9271	90 03		bcc $9276			bcc	 	_CLIDExitFalse
.9273	c9 3a		cmp #$3a			cmp 	#"9"+1
.9275	60		rts				rts
.9276					_CLIDExitFalse:
.9276	38		sec				sec
.9277	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9278					Command_LOCAL:
.9278	a2 00		ldx #$00			ldx 	#0 							; at level 0
.927a	20 86 92	jsr $9286			jsr 	LocaliseNextTerm 			; convert term to a local.
.927d	b1 30		lda ($30),y			lda 	(codePtr),y
.927f	c8		iny				iny
.9280	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9282	f0 f4		beq $9278			beq 	Command_LOCAL
.9284	88		dey				dey 								; unpick pre-get
.9285	60		rts				rts
.9286					LocaliseNextTerm:
.9286	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm 				; evaluate the term
.9289	bd 00 04	lda $0400,x			lda 	NSStatus,x
.928c	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.928e	f0 69		beq $92f9			beq		_LNTError
.9290	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9293	85 36		sta $36				sta 	zTemp0
.9295	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9298	85 37		sta $37				sta  	zTemp0+1
.929a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.929d	29 10		and #$10			and 	#NSBIsString
.929f	d0 22		bne $92c3			bne 	_LNTPushString
.92a1	5a		phy				phy
.92a2	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.92a4					_LNTPushNumLoop:
.92a4	b1 36		lda ($36),y			lda		(zTemp0),y
.92a6	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92a9	a9 00		lda #$00			lda 	#0
.92ab	91 36		sta ($36),y			sta 	(zTemp0),y
.92ad	c8		iny				iny
.92ae	c0 05		cpy #$05			cpy 	#5
.92b0	d0 f2		bne $92a4			bne 	_LNTPushNumLoop
.92b2	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.92b4	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92b7	a5 37		lda $37				lda 	zTemp0+1
.92b9	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92bc	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92be	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92c1	7a		ply				ply
.92c2	60		rts				rts
.92c3					_LNTPushString:
.92c3	5a		phy				phy
.92c4	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92c6	85 38		sta $38				sta 	zTemp1
.92c8	a0 01		ldy #$01			ldy 	#1
.92ca	b1 36		lda ($36),y			lda 	(zTemp0),y
.92cc	85 39		sta $39				sta 	zTemp1+1
.92ce	a0 00		ldy #$00			ldy 	#0 							; output string
.92d0	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92d2	f0 0a		beq $92de			beq 	_LNTStringOut
.92d4					_LNTPushStrLoop:
.92d4	b1 38		lda ($38),y			lda 	(zTemp1),y
.92d6	f0 06		beq $92de			beq 	_LNTStringOut
.92d8	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92db	c8		iny				iny
.92dc	80 f6		bra $92d4			bra 	_LNTPushStrLoop
.92de					_LNTStringOut:
.92de	98		tya				tya									; output length
.92df	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92e2	a9 00		lda #$00			lda 	#0 							; clear original string.
.92e4	92 38		sta ($38)			sta 	(zTemp1)
.92e6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92e9	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92ec	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92ef	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92f2	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92f4	20 d8 a5	jsr $a5d8			jsr 	StackPushByte
.92f7	7a		ply				ply
.92f8	60		rts				rts
.92f9					_LNTError:
.92f9	4c 66 b3	jmp $b366			jmp 	SyntaxError
.ad27					LocalPopValue:
.ad27	20 f1 a5	jsr $a5f1			jsr 	StackPopByte
.ad2a	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ad2c	d0 17		bne $ad45			bne 	_LPVString
.ad2e	20 f1 a5	jsr $a5f1			jsr 	StackPopByte 				; address
.ad31	85 37		sta $37				sta 	zTemp0+1
.ad33	20 f1 a5	jsr $a5f1			jsr 	StackPopByte
.ad36	85 36		sta $36				sta 	zTemp0
.ad38	5a		phy				phy
.ad39	a0 04		ldy #$04			ldy 	#4 							; copy back
.ad3b					_LPVNumberCopy:
.ad3b	20 f1 a5	jsr $a5f1			jsr 	StackPopByte
.ad3e	91 36		sta ($36),y			sta 	(zTemp0),y
.ad40	88		dey				dey
.ad41	10 f8		bpl $ad3b			bpl 	_LPVNumberCopy
.ad43	7a		ply				ply 								; and complete
.ad44	60		rts				rts
.ad45					_LPVString:
.ad45	20 f1 a5	jsr $a5f1			jsr 	StackPopByte 				; address of record => zTemp0
.ad48	85 37		sta $37				sta 	zTemp0+1
.ad4a	20 f1 a5	jsr $a5f1			jsr 	StackPopByte
.ad4d	85 36		sta $36				sta 	zTemp0
.ad4f	5a		phy				phy
.ad50	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.ad52	85 38		sta $38				sta 	zTemp1
.ad54	a0 01		ldy #$01			ldy 	#1
.ad56	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad58	85 39		sta $39				sta 	zTemp1+1
.ad5a	20 f1 a5	jsr $a5f1			jsr 	StackPopByte 				; # to get => y
.ad5d	a8		tay				tay
.ad5e	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ad60	f0 0e		beq $ad70			beq 	_LPVStringCopied
.ad62	a9 00		lda #$00			lda 	#0 							; NULL on end
.ad64	91 38		sta ($38),y			sta 	(zTemp1),y
.ad66					_LPVStringCopy:
.ad66	88		dey				dey
.ad67	30 07		bmi $ad70			bmi 	_LPVStringCopied
.ad69	20 f1 a5	jsr $a5f1			jsr 	StackPopByte
.ad6c	91 38		sta ($38),y			sta 	(zTemp1),y
.ad6e	80 f6		bra $ad66			bra 	_LPVStringCopy
.ad70					_LPVStringCopied:
.ad70	fa		plx				plx
.ad71	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.92fc					NewCommand:
.92fc	20 83 a5	jsr $a583			jsr 	MemoryNew
.92ff	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9302	20 e7 8b	jsr $8be7			jsr 	ClearCommand 				; clear everything.
.9305	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9306					Command_Print:
.9306	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9307					_CPLoop:
.9307	08		php				php 								; save last action flag
.9308	b1 30		lda ($30),y			lda 	(codePtr),y
.930a	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.930c	f0 46		beq $9354			beq 	_CPExit
.930e	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9310	f0 42		beq $9354			beq 	_CPExit
.9312	68		pla				pla 								; throw last action flag
.9313	b1 30		lda ($30),y			lda 	(codePtr),y
.9315	c8		iny				iny
.9316	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9318	f0 37		beq $9351			beq 	_CPContinueWithSameLine
.931a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.931c	f0 2e		beq $934c			beq 	_CPTab
.931e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9320	f0 26		beq $9348			beq 	_CPNewLine
.9322	88		dey				dey 								; undo the get.
.9323	a2 00		ldx #$00			ldx 	#0
.9325	20 7d a4	jsr $a47d			jsr 	EvaluateValue 				; get a value into slot 0
.9328	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.932b	29 10		and #$10			and 	#NSBIsString
.932d	f0 0b		beq $933a			beq 	_CPNumber
.932f	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9332	ad 08 04	lda $0408			lda 	NSMantissa0
.9335	20 6c 99	jsr $996c			jsr 	PrintStringXA
.9338	80 cc		bra $9306			bra 	Command_Print 				; loop round clearing carry so NL if end
.933a					_CPNumber:
.933a	a9 05		lda #$05			lda 	#5 							; maximum decimals
.933c	20 53 a3	jsr $a353			jsr 	ConvertNumberToString 		; convert to string
.933f	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9341	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.9343	20 6c 99	jsr $996c			jsr 	PrintStringXA
.9346	80 be		bra $9306			bra 	Command_Print 				; loop round clearing carry so NL if end
.9348					_CPNewLine:
.9348	a9 0d		lda #$0d			lda 	#13
.934a	80 02		bra $934e			bra 	_CPPrintChar
.934c					_CPTab:
.934c	a9 09		lda #$09			lda 	#9 							; print TAB
.934e					_CPPrintChar:
.934e	20 20 b5	jsr $b520			jsr 	EXTPrintCharacter
.9351					_CPContinueWithSameLine:
.9351	38		sec				sec 								; loop round with carry set, which
.9352	80 b3		bra $9307			bra 	_CPLoop 					; will inhibit final CR
.9354					_CPExit:
.9354	28		plp				plp 								; get last action flag
.9355	b0 05		bcs $935c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.9357	a9 0d		lda #$0d			lda 	#13 						; print new line
.9359	20 20 b5	jsr $b520			jsr 	EXTPrintCharacter
.935c					_CPExit2:
.935c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.935d					CallProcedure:
.935d	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.935f	b1 30		lda ($30),y			lda 	(codePtr),y
.9361	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9363	f0 0c		beq $9371			beq 	_CPEndParam
.9365					_CPParamLoop:
.9365	20 7d a4	jsr $a47d			jsr 	EvaluateValue 				; get parameter onto stack
.9368	e8		inx				inx 								; bump next stack
.9369	b1 30		lda ($30),y			lda 	(codePtr),y
.936b	c8		iny				iny
.936c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.936e	f0 f5		beq $9365			beq 	_CPParamLoop
.9370	88		dey				dey 								; unpick.
.9371					_CPEndParam:
.9371	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.9374	c8		iny				iny									; skip right bracket
.9375	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9377	20 fa a5	jsr $a5fa			jsr 	StackOpen
.937a	20 3e a6	jsr $a63e			jsr 	STKSaveCodePosition 		; save loop position
.937d	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9380	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9382	ad 10 04	lda $0410			lda 	NSMantissa1
.9385	85 37		sta $37				sta 	zTemp0+1
.9387	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9389	b2 36		lda ($36)			lda 	(zTemp0)
.938b	85 30		sta $30				sta 	safePtr
.938d	b1 36		lda ($36),y			lda 	(zTemp0),y
.938f	85 31		sta $31				sta 	safePtr+1
.9391	c8		iny				iny
.9392	b1 36		lda ($36),y			lda 	(zTemp0),y
.9394	85 32		sta $32				sta 	safePtr+2
.9396	c8		iny				iny
.9397	b1 36		lda ($36),y			lda 	(zTemp0),y
.9399	85 33		sta $33				sta 	safePtr+3
.939b	c8		iny				iny 								; get Y offset -> Y
.939c	b1 36		lda ($36),y			lda 	(zTemp0),y
.939e	a8		tay				tay
.939f	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.93a1	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.93a4	f0 13		beq $93b9			beq 	_ParamExit 					; if so, exit.
.93a6					_ParamExtract:
.93a6	ca		dex				dex 								; put a local term on the level before
.93a7	20 86 92	jsr $9286			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.93aa	20 c4 91	jsr $91c4			jsr 	AssignVariable 				; assign stacked value to the variable.
.93ad	e8		inx				inx 								; advance to next parameter to do.
.93ae	e8		inx				inx
.93af	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.93b2	f0 05		beq $93b9			beq 	_ParamExit
.93b4	20 88 ad	jsr $ad88			jsr 	CheckComma 					; comma seperating parameters
.93b7	80 ed		bra $93a6			bra 	_ParamExtract
.93b9					_ParamExit:
.93b9	20 80 ad	jsr $ad80			jsr 	CheckRightBracket 			; check )
.93bc	60		rts				rts 								; and continue from here
.ad72					Command_ENDPROC:
.ad72	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ad74	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ad76	20 26 a6	jsr $a626			jsr 	StackCheckFrame
.ad79	20 4f a6	jsr $a64f			jsr 	STKLoadCodePosition 		; restore code position
.ad7c	20 18 a6	jsr $a618			jsr 	StackClose
.ad7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93bd					Command_Read:
.93bd	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93bf	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm
.93c2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93c5	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93c7	f0 4a		beq $9413			beq 	_CRSyntax 					; check reference (bit 0)
.93c9	20 5c 94	jsr $945c			jsr 	SwapDataCodePtrs 			; swap code and data
.93cc	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93cf	d0 20		bne $93f1			bne 	_CRContinueData
.93d1					_CRKeepSearching:
.93d1	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.93d3	aa		tax				tax
.93d4	20 85 98	jsr $9885			jsr 	ScanForward
.93d7	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.93d9	f0 16		beq $93f1			beq 	_CRHaveData 				; found it
.93db	18		clc				clc
.93dc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93de	65 30		adc $30				adc 	codePtr
.93e0	85 30		sta $30				sta 	codePtr
.93e2	90 02		bcc $93e6			bcc 	_CREExit
.93e4	e6 31		inc $31				inc 	codePtr+1
.93e6					_CREExit:
.93e6	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93e8	b2 30		lda ($30)			lda 	(codePtr)
.93ea	d0 e5		bne $93d1			bne 	_CRKeepSearching
.93ec	a9 0b		lda #$0b		lda	#11
.93ee	4c 13 99	jmp $9913		jmp	ErrorHandler
.93f1					_CRHaveData:
.93f1					_CRContinueData:
.93f1	a2 01		ldx #$01			ldx 	#1
.93f3	20 7d a4	jsr $a47d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93f6	ca		dex				dex
.93f7	20 c4 91	jsr $91c4			jsr		AssignVariable 				; do the assignment
.93fa	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.93fd	b1 30		lda ($30),y			lda 	(codePtr),y
.93ff	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9401	d0 04		bne $9407			bne 	_CRSwapBack
.9403	c8		iny				iny 								; consume comma
.9404	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9407					_CRSwapBack:
.9407	20 5c 94	jsr $945c			jsr 	SwapDataCodePtrs			; swap them back.
.940a	b1 30		lda ($30),y			lda 	(codePtr),y
.940c	c8		iny				iny
.940d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.940f	f0 ac		beq $93bd			beq 	Command_Read 				; if so go round again.
.9411	88		dey				dey 								; unpick get.
.9412	60		rts				rts
.9413					_CRSyntax:
.9413	4c 66 b3	jmp $b366			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9416					RemCommand:
.9416	b1 30		lda ($30),y			lda 	(codePtr),y
.9418	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.941a	d0 06		bne $9422			bne 	_RMExit
.941c	c8		iny				iny
.941d	98		tya				tya
.941e	38		sec				sec
.941f	71 30		adc ($30),y			adc 	(codePtr),y
.9421	a8		tay				tay
.9422					_RMExit:
.9422	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9423					Command_REPEAT:
.9423	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9425	20 fa a5	jsr $a5fa			jsr 	StackOpen
.9428	20 3e a6	jsr $a63e			jsr 	STKSaveCodePosition 		; save loop position
.942b	60		rts				rts
.942c					Command_UNTIL:
.942c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.942e	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9430	20 26 a6	jsr $a626			jsr 	StackCheckFrame
.9433	a2 00		ldx #$00			ldx 	#0
.9435	20 86 a4	jsr $a486			jsr 	EvaluateNumber 				; work out the number
.9438	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; check if zero
.943b	f0 04		beq $9441			beq 	_CULoopBack 				; if so keep looping
.943d	20 18 a6	jsr $a618			jsr 	StackClose		 			; return
.9440	60		rts				rts
.9441					_CULoopBack:
.9441	20 4f a6	jsr $a64f			jsr 	STKLoadCodePosition 		; loop back
.9444	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9445					Command_Restore:
.9445	20 5c 94	jsr $945c			jsr 	SwapDataCodePtrs 			; swap code and data
.9448	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.944a	85 30		sta $30				sta 	codePtr
.944c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.944e	85 31		sta $31				sta 	codePtr+1
.9450	20 5c 94	jsr $945c			jsr 	SwapDataCodePtrs 			; put them back
.9453	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9455	8d 9b 04	sta $049b			sta 	dataPointer+4
.9458	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.945b	60		rts				rts
.945c					SwapDataCodePtrs:
.945c	da		phx				phx
.945d	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.945f					_SDCPLoop:
.945f	b5 30		lda $30,x			lda 	safePtr,x
.9461	48		pha				pha
.9462	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9465	95 30		sta $30,x			sta 	safePtr,x
.9467	68		pla				pla
.9468	9d 97 04	sta $0497,x			sta 	dataPointer,x
.946b	ca		dex				dex
.946c	10 f1		bpl $945f			bpl 	_SDCPLoop
.946e	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9471	8c 9b 04	sty $049b			sty 	dataPointer+4
.9474	a8		tay				tay
.9475	fa		plx				plx
.9476	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9477					CommandRUN:
.9477	20 e7 8b	jsr $8be7			jsr 	ClearCommand 				; clear variable/stacks/etc.
.947a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.947c	85 30		sta $30				sta 	codePtr
.947e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9480	85 31		sta $31				sta 	codePtr+1
.9482					RUNNewLine:
.9482	b2 30		lda ($30)			lda 	(codePtr)
.9484	f0 5e		beq $94e4			beq 	CRNoProgram         		; no then END.
.9486	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9488	9a		txs				txs
.9489					RUNCodePointerLine:
.9489	a0 02		ldy #$02			ldy 	#2 							; start of program
.948b					_CRIncMainLoop:
.948b	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.948e	d0 05		bne $9495			bne 	_CRNoBreakCheck
.9490	20 61 b5	jsr $b561			jsr 	EXTBreakCheck 				; break check
.9493	f0 4a		beq $94df			beq 	_CRBreak
.9495					_CRNoBreakCheck:
.9495	c8		iny				iny
.9496					_CRMainLoop:
.9496	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9499	b1 30		lda ($30),y			lda 	(codePtr),y
.949b	10 10		bpl $94ad			bpl 	_CRNotKeyword
.949d	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.949f	b0 04		bcs $94a5			bcs 	_CRIsKeyword
.94a1	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.94a3	b0 34		bcs $94d9			bcs		_CRSyntaxError
.94a5					_CRIsKeyword:
.94a5	c8		iny				iny 								; consume command
.94a6	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.94a7	aa		tax				tax 								; put in X for vector jump
.94a8	20 dc 94	jsr $94dc			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.94ab	80 e9		bra $9496			bra 	_CRMainLoop 				; and loop round
.94ad					_CRNotKeyword:
.94ad	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94af	f0 da		beq $948b			beq 	_CRIncMainLoop
.94b1	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.94b3	90 05		bcc $94ba			bcc 	_CRNotVariable
.94b5					_CRGoLet:
.94b5	20 88 91	jsr $9188			jsr 	LetCommand
.94b8	80 dc		bra $9496			bra 	_CRMainLoop
.94ba					_CRNotVariable:
.94ba	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94bc	f0 f7		beq $94b5			beq 	_CRGoLet
.94be	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94c0	f0 f3		beq $94b5			beq 	_CRGoLet
.94c2	c9 21		cmp #$21			cmp 	#KWD_PLING
.94c4	f0 ef		beq $94b5			beq 	_CRGoLet
.94c6	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94c8	f0 09		beq $94d3			beq 	_CRGoRem
.94ca	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94cc	d0 0b		bne $94d9			bne 	_CRSyntaxError
.94ce	20 87 8a	jsr $8a87			jsr 	LabelHere
.94d1	80 c3		bra $9496			bra 	_CRMainLoop
.94d3					_CRGoRem:
.94d3	c8		iny				iny
.94d4	20 16 94	jsr $9416			jsr 	RemCommand
.94d7	80 bd		bra $9496			bra 	_CRMainLoop
.94d9					_CRSyntaxError:
.94d9	4c 66 b3	jmp $b366			jmp 	SyntaxError
.94dc					_CRCallVector0:
.94dc	7c 88 95	jmp ($9588,x)			jmp 	(VectorSet0,x)
.94df					_CRBreak:
.94df	a9 01		lda #$01		lda	#1
.94e1	4c 13 99	jmp $9913		jmp	ErrorHandler
.94e4					CRNoProgram:
.94e4	4c 0a 8d	jmp $8d0a			jmp 	EndCommand
.94e7					EOLCommand:
.94e7	18		clc				clc
.94e8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94ea	65 30		adc $30				adc 	codePtr
.94ec	85 30		sta $30				sta 	codePtr
.94ee	90 02		bcc $94f2			bcc 	_CREExit
.94f0	e6 31		inc $31				inc 	codePtr+1
.94f2					_CREExit:
.94f2	80 8e		bra $9482			bra 	RunNewLine
.94f4					Shift1Command:
.94f4	b1 30		lda ($30),y			lda 	(codePtr),y
.94f6	c8		iny				iny
.94f7	0a		asl a				asl 	a
.94f8	aa		tax				tax
.94f9	7c 1e 96	jmp ($961e,x)			jmp 	(VectorSet1,x)
.94fc					Shift2Command:
.94fc	b1 30		lda ($30),y			lda 	(codePtr),y
.94fe	c8		iny				iny
.94ff	0a		asl a				asl 	a
.9500	aa		tax				tax
.9501	7c 38 96	jmp ($9638,x)			jmp 	(VectorSet2,x)
.9504					Unused1:
.9504					Unused2:
.9504					Unused3:
.9504					Unused4:
.9504	4c 66 b3	jmp $b366			jmp 	SyntaxError
>9507							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9508					VectorSetPunc:
>9508	bd 9a					.word	ShiftLeft                        ; $00 <<
>950a	b7 99					.word	BinaryCompareLessEqual           ; $01 <=
>950c	ad 99					.word	BinaryCompareNotEqual            ; $02 <>
>950e	66 b3					.word	SyntaxError                      ; $03 !!3
>9510	66 b3					.word	SyntaxError                      ; $04 ><
>9512	c1 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>9514	c0 9a					.word	ShiftRight                       ; $06 >>
>9516	66 b3					.word	SyntaxError                      ; $07 !!7
>9518	66 b3					.word	SyntaxError                      ; $08 !!8
>951a	66 b3					.word	SyntaxError                      ; $09 !!9
>951c	66 b3					.word	SyntaxError                      ; $0a !!10
>951e	66 b3					.word	SyntaxError                      ; $0b !!11
>9520	66 b3					.word	SyntaxError                      ; $0c !!12
>9522	66 b3					.word	SyntaxError                      ; $0d !!13
>9524	66 b3					.word	SyntaxError                      ; $0e !!14
>9526	66 b3					.word	SyntaxError                      ; $0f !!15
>9528	66 b3					.word	SyntaxError                      ; $10 @
>952a	66 b3					.word	SyntaxError                      ; $11 !!17
>952c	66 b3					.word	SyntaxError                      ; $12 !!18
>952e	66 b3					.word	SyntaxError                      ; $13 [
>9530	99 ad					.word	IntegerDivide                    ; $14 \
>9532	66 b3					.word	SyntaxError                      ; $15 ]
>9534	46 9c					.word	EorInteger                       ; $16 ^
>9536	66 b3					.word	SyntaxError                      ; $17 _
>9538	66 b3					.word	SyntaxError                      ; $18 `
>953a	66 b3					.word	SyntaxError                      ; $19 !!25
>953c	66 b3					.word	SyntaxError                      ; $1a !!26
>953e	66 b3					.word	SyntaxError                      ; $1b {
>9540	00 9c					.word	OraInteger                       ; $1c |
>9542	66 b3					.word	SyntaxError                      ; $1d }
>9544	66 b3					.word	SyntaxError                      ; $1e ~
>9546	66 b3					.word	SyntaxError                      ; $1f [7m<7F>[m
>9548	66 b3					.word	SyntaxError                      ; $20
>954a	8c 9c					.word	WordIndirect                     ; $21 !
>954c	66 b3					.word	SyntaxError                      ; $22 "
>954e	66 b3					.word	SyntaxError                      ; $23 #
>9550	66 b3					.word	SyntaxError                      ; $24 $
>9552	e6 ad					.word	IntegerModulus                   ; $25 %
>9554	ba 9b					.word	AndInteger                       ; $26 &
>9556	66 b3					.word	SyntaxError                      ; $27 '
>9558	66 b3					.word	SyntaxError                      ; $28 (
>955a	66 b3					.word	SyntaxError                      ; $29 )
>955c	5b ae					.word	MulInteger                       ; $2a *
>955e	54 9b					.word	AddInteger                       ; $2b +
>9560	66 b3					.word	SyntaxError                      ; $2c ,
>9562	8f 9b					.word	SubInteger                       ; $2d -
>9564	66 b3					.word	SyntaxError                      ; $2e .
>9566	f2 af					.word	FDivideCommand                   ; $2f /
>9568	66 b3					.word	SyntaxError                      ; $30 0
>956a	66 b3					.word	SyntaxError                      ; $31 1
>956c	66 b3					.word	SyntaxError                      ; $32 2
>956e	66 b3					.word	SyntaxError                      ; $33 3
>9570	66 b3					.word	SyntaxError                      ; $34 4
>9572	66 b3					.word	SyntaxError                      ; $35 5
>9574	66 b3					.word	SyntaxError                      ; $36 6
>9576	66 b3					.word	SyntaxError                      ; $37 7
>9578	66 b3					.word	SyntaxError                      ; $38 8
>957a	66 b3					.word	SyntaxError                      ; $39 9
>957c	66 b3					.word	SyntaxError                      ; $3a :
>957e	66 b3					.word	SyntaxError                      ; $3b ;
>9580	99 99					.word	BinaryCompareLess                ; $3c <
>9582	8f 99					.word	BinaryCompareEqual               ; $3d =
>9584	a3 99					.word	BinaryCompareGreater             ; $3e >
>9586	b3 9c					.word	ByteIndirect                     ; $3f ?
.9588					VectorSet0:
>9588	e7 94					.word	EOLCommand                       ; $80 !0:EOF
>958a	f4 94					.word	Shift1Command                    ; $81 !1:SH1
>958c	fc 94					.word	Shift2Command                    ; $82 !2:SH2
>958e	38 b1					.word	AbsUnary                         ; $83 ABS(
>9590	83 a1					.word	AllocUnary                       ; $84 ALLOC(
>9592	48 b1					.word	AscUnary                         ; $85 ASC(
>9594	04 a3					.word	ChrUnary                         ; $86 CHR$(
>9596	0d 8d					.word	UnaryEvent                       ; $87 EVENT(
>9598	8b 99					.word	UnaryFalse                       ; $88 FALSE
>959a	55 b1					.word	FracUnary                        ; $89 FRAC(
>959c	66 b3					.word	SyntaxError                      ; $8a HIT(
>959e	6b b1					.word	IntUnary                         ; $8b INT(
>95a0	c1 b1					.word	IsValUnary                       ; $8c ISVAL(
>95a2	74 91					.word	UnaryJoyB                        ; $8d JOYB(
>95a4	4d 91					.word	UnaryJoyX                        ; $8e JOYX(
>95a6	50 91					.word	UnaryJoyY                        ; $8f JOYY(
>95a8	de a3					.word	Unary_Left                       ; $90 LEFT$(
>95aa	7d b1					.word	LenUnary                         ; $91 LEN(
>95ac	f7 a1					.word	Unary_Max                        ; $92 MAX(
>95ae	08 a4					.word	Unary_Mid                        ; $93 MID$(
>95b0	f3 a1					.word	Unary_Min                        ; $94 MIN(
>95b2	4e a2					.word	Unary_Not                        ; $95 NOT(
>95b4	64 a2					.word	Unary_Random                     ; $96 RANDOM(
>95b6	ee a3					.word	Unary_Right                      ; $97 RIGHT$(
>95b8	83 a2					.word	Unary_Rnd                        ; $98 RND(
>95ba	97 b1					.word	SgnUnary                         ; $99 SGN(
>95bc	16 a3					.word	SpcUnary                         ; $9a SPC(
>95be	31 a3					.word	Unary_Str                        ; $9b STR$(
>95c0	c5 96					.word	UnaryTimer                       ; $9c TIMER(
>95c2	7f 99					.word	UnaryTrue                        ; $9d TRUE
>95c4	b7 b1					.word	ValUnary                         ; $9e VAL(
>95c6	76 8d					.word	ForCommand                       ; $9f FOR
>95c8	23 91					.word	IfCommand                        ; $a0 IF
>95ca	04 95					.word	Unused1                          ; $a1 PROC
>95cc	23 94					.word	Command_REPEAT                   ; $a2 REPEAT
>95ce	e4 98					.word	Command_WHILE                    ; $a3 WHILE
>95d0	4c 91					.word	EndIf                            ; $a4 ENDIF
>95d2	72 ad					.word	Command_ENDPROC                  ; $a5 ENDPROC
>95d4	30 8e					.word	NextCommand                      ; $a6 NEXT
>95d6	04 95					.word	Unused4                          ; $a7 THEN
>95d8	2c 94					.word	Command_UNTIL                    ; $a8 UNTIL
>95da	05 99					.word	Command_WEND                     ; $a9 WEND
>95dc	66 b3					.word	SyntaxError                      ; $aa BY
>95de	ad 8b					.word	CallCommand                      ; $ab CALL
>95e0	8d 8e					.word	CircleCommand                    ; $ac CIRCLE
>95e2	e7 8b					.word	ClearCommand                     ; $ad CLEAR
>95e4	3f 8c					.word	ClearScreen                      ; $ae CLS
>95e6	66 b3					.word	SyntaxError                      ; $af COLOR
>95e8	66 b3					.word	SyntaxError                      ; $b0 COLOUR
>95ea	45 8c					.word	Command_Data                     ; $b1 DATA
>95ec	4d 8c					.word	DimCommand                       ; $b2 DIM
>95ee	04 95					.word	Unused3                          ; $b3 DOWNTO
>95f0	45 91					.word	ElseCode                         ; $b4 ELSE
>95f2	66 b3					.word	SyntaxError                      ; $b5 FROM
>95f4	b7 90					.word	GfxCommand                       ; $b6 GFX
>95f6	e9 90					.word	Command_GOSUB                    ; $b7 GOSUB
>95f8	07 91					.word	GotoCommand                      ; $b8 GOTO
>95fa	66 b3					.word	SyntaxError                      ; $b9 HERE
>95fc	b7 8e					.word	ImageCommand                     ; $ba IMAGE
>95fe	88 91					.word	LetCommand                       ; $bb LET
>9600	0c 8f					.word	LineCommand                      ; $bc LINE
>9602	78 92					.word	Command_LOCAL                    ; $bd LOCAL
>9604	66 b3					.word	SyntaxError                      ; $be OFF
>9606	66 b3					.word	SyntaxError                      ; $bf ON
>9608	66 b3					.word	SyntaxError                      ; $c0 OUTLINE
>960a	05 8f					.word	PlotCommand                      ; $c1 PLOT
>960c	06 93					.word	Command_Print                    ; $c2 PRINT
>960e	bd 93					.word	Command_Read                     ; $c3 READ
>9610	89 8e					.word	RectangleCommand                 ; $c4 RECT
>9612	16 94					.word	RemCommand                       ; $c5 REM
>9614	f9 90					.word	Command_RETURN                   ; $c6 RETURN
>9616	66 b3					.word	SyntaxError                      ; $c7 SOLID
>9618	98 8e					.word	SpriteCommand                    ; $c8 SPRITE
>961a	d4 8e					.word	TextCommand                      ; $c9 TEXT
>961c	04 95					.word	Unused2                          ; $ca TO
.961e					VectorSet1:
>961e	66 b3					.word	SyntaxError                      ; $80 !0:EOF
>9620	66 b3					.word	SyntaxError                      ; $81 !1:SH1
>9622	66 b3					.word	SyntaxError                      ; $82 !2:SH2
>9624	7e 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9626	9d 8b					.word	AssertCommand                    ; $84 ASSERT
>9628	57 90					.word	BitmapCtrl                       ; $85 BITMAP
>962a	0a 8d					.word	EndCommand                       ; $86 END
>962c	dd 91					.word	Command_List                     ; $87 LIST
>962e	fc 92					.word	NewCommand                       ; $88 NEW
>9630	45 94					.word	Command_Restore                  ; $89 RESTORE
>9632	77 94					.word	CommandRUN                       ; $8a RUN
>9634	9c 90					.word	SpritesCtrl                      ; $8b SPRITES
>9636	c0 96					.word	StopCommand                      ; $8c STOP
.9638					VectorSet2:
>9638	66 b3					.word	SyntaxError                      ; $80 !0:EOF
>963a	66 b3					.word	SyntaxError                      ; $81 !1:SH1
>963c	66 b3					.word	SyntaxError                      ; $82 !2:SH2
>963e	25 b2					.word	Assemble_adc                     ; $83 ADC
>9640	1d b2					.word	Assemble_and                     ; $84 AND
>9642	39 b2					.word	Assemble_asl                     ; $85 ASL
>9644	a3 b2					.word	Assemble_bcc                     ; $86 BCC
>9646	a7 b2					.word	Assemble_bcs                     ; $87 BCS
>9648	af b2					.word	Assemble_beq                     ; $88 BEQ
>964a	66 b2					.word	Assemble_bit                     ; $89 BIT
>964c	97 b2					.word	Assemble_bmi                     ; $8a BMI
>964e	ab b2					.word	Assemble_bne                     ; $8b BNE
>9650	93 b2					.word	Assemble_bpl                     ; $8c BPL
>9652	b3 b2					.word	Assemble_bra                     ; $8d BRA
>9654	b7 b2					.word	Assemble_brk                     ; $8e BRK
>9656	9b b2					.word	Assemble_bvc                     ; $8f BVC
>9658	9f b2					.word	Assemble_bvs                     ; $90 BVS
>965a	bf b2					.word	Assemble_clc                     ; $91 CLC
>965c	13 b3					.word	Assemble_cld                     ; $92 CLD
>965e	d3 b2					.word	Assemble_cli                     ; $93 CLI
>9660	03 b3					.word	Assemble_clv                     ; $94 CLV
>9662	31 b2					.word	Assemble_cmp                     ; $95 CMP
>9664	7a b2					.word	Assemble_cpx                     ; $96 CPX
>9666	75 b2					.word	Assemble_cpy                     ; $97 CPY
>9668	57 b2					.word	Assemble_dec                     ; $98 DEC
>966a	0f b3					.word	Assemble_dex                     ; $99 DEX
>966c	eb b2					.word	Assemble_dey                     ; $9a DEY
>966e	21 b2					.word	Assemble_eor                     ; $9b EOR
>9670	5c b2					.word	Assemble_inc                     ; $9c INC
>9672	1f b3					.word	Assemble_inx                     ; $9d INX
>9674	0b b3					.word	Assemble_iny                     ; $9e INY
>9676	8e b2					.word	Assemble_jmp                     ; $9f JMP
>9678	89 b2					.word	Assemble_jsr                     ; $a0 JSR
>967a	2d b2					.word	Assemble_lda                     ; $a1 LDA
>967c	52 b2					.word	Assemble_ldx                     ; $a2 LDX
>967e	70 b2					.word	Assemble_ldy                     ; $a3 LDY
>9680	43 b2					.word	Assemble_lsr                     ; $a4 LSR
>9682	23 b3					.word	Assemble_nop                     ; $a5 NOP
>9684	19 b2					.word	Assemble_ora                     ; $a6 ORA
>9686	cf b2					.word	Assemble_pha                     ; $a7 PHA
>9688	bb b2					.word	Assemble_php                     ; $a8 PHP
>968a	17 b3					.word	Assemble_phx                     ; $a9 PHX
>968c	d7 b2					.word	Assemble_phy                     ; $aa PHY
>968e	df b2					.word	Assemble_pla                     ; $ab PLA
>9690	c3 b2					.word	Assemble_plp                     ; $ac PLP
>9692	2b b3					.word	Assemble_plx                     ; $ad PLX
>9694	e7 b2					.word	Assemble_ply                     ; $ae PLY
>9696	3e b2					.word	Assemble_rol                     ; $af ROL
>9698	48 b2					.word	Assemble_ror                     ; $b0 ROR
>969a	cb b2					.word	Assemble_rti                     ; $b1 RTI
>969c	db b2					.word	Assemble_rts                     ; $b2 RTS
>969e	35 b2					.word	Assemble_sbc                     ; $b3 SBC
>96a0	c7 b2					.word	Assemble_sec                     ; $b4 SEC
>96a2	27 b3					.word	Assemble_sed                     ; $b5 SED
>96a4	e3 b2					.word	Assemble_sei                     ; $b6 SEI
>96a6	29 b2					.word	Assemble_sta                     ; $b7 STA
>96a8	1b b3					.word	Assemble_stp                     ; $b8 STP
>96aa	4d b2					.word	Assemble_stx                     ; $b9 STX
>96ac	6b b2					.word	Assemble_sty                     ; $ba STY
>96ae	61 b2					.word	Assemble_stz                     ; $bb STZ
>96b0	ff b2					.word	Assemble_tax                     ; $bc TAX
>96b2	fb b2					.word	Assemble_tay                     ; $bd TAY
>96b4	84 b2					.word	Assemble_trb                     ; $be TRB
>96b6	7f b2					.word	Assemble_tsb                     ; $bf TSB
>96b8	07 b3					.word	Assemble_tsx                     ; $c0 TSX
>96ba	ef b2					.word	Assemble_txa                     ; $c1 TXA
>96bc	f7 b2					.word	Assemble_txs                     ; $c2 TXS
>96be	f3 b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96c0					StopCommand:
.96c0	a9 08		lda #$08		lda	#8
.96c2	4c 13 99	jmp $9913		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96c5					UnaryTimer:
.96c5	fa		plx				plx
.96c6	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.96c9					TimerToStackX:
.96c9	20 46 a5	jsr $a546			jsr 	NSMSetZero 					; zero result
.96cc	64 01		stz $01				stz 	1 							; access I/O
.96ce	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96d1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96d4	ad 5a d6	lda $d65a			lda 	$D65A
.96d7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96da	ad 5b d6	lda $d65b			lda 	$D65B
.96dd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96e1					ListConvertLine:
.96e1	9c 9d 04	stz $049d			stz 	tbOffset
.96e4	9c a9 04	stz $04a9			stz 	tokenBuffer
.96e7	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96e9	b1 30		lda ($30),y			lda 	(codePtr),y
.96eb	aa		tax				tax
.96ec	88		dey				dey
.96ed	b1 30		lda ($30),y			lda 	(codePtr),y
.96ef	20 dc ae	jsr $aedc			jsr 	ConvertInt16
.96f2	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96f4	86 37		stx $37				stx 	zTemp0+1
.96f6	a0 00		ldy #$00			ldy 	#0
.96f8					_LCCopyNumber:
.96f8	b1 36		lda ($36),y			lda 	(zTemp0),y
.96fa	20 fa 97	jsr $97fa			jsr 	LCLWrite
.96fd	c8		iny				iny
.96fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.9700	d0 f6		bne $96f8			bne 	_LCCopyNumber
.9702					_LCPadOut:
.9702	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9704	20 fa 97	jsr $97fa			jsr 	LCLWrite
.9707	ad 9d 04	lda $049d			lda 	tbOffset
.970a	c9 06		cmp #$06			cmp 	#6
.970c	d0 f4		bne $9702			bne 	_LCPadOut
.970e	a0 03		ldy #$03			ldy 	#3 							; start position.
.9710					_LCMainLoop:
.9710	b1 30		lda ($30),y			lda 	(codePtr),y
.9712	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9714	f0 17		beq $972d			beq 	_LCExit
.9716	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9718	90 14		bcc $972e			bcc 	_LCDoubles
.971a	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.971c	90 20		bcc $973e			bcc 	_LCShiftPunc
.971e	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9720	90 2b		bcc $974d			bcc 	_LCPunctuation
.9722	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9724	90 2d		bcc $9753			bcc 	_LCIdentifiers
.9726	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9728	90 49		bcc $9773			bcc 	_LCTokens
.972a	4c ce 97	jmp $97ce			jmp 	_LCData 					; 254-5 are data objects
.972d					_LCExit:
.972d	60		rts				rts
.972e					_LCDoubles:
.972e	48		pha				pha
.972f	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9730	29 02		and #$02			and 	#2
.9732	09 3c		ora #$3c			ora 	#60 						; make < >
.9734	20 fa 97	jsr $97fa			jsr 	LCLWrite
.9737	68		pla				pla 								; restore, do lower bit
.9738	29 03		and #$03			and 	#3
.973a	09 3c		ora #$3c			ora 	#60
.973c	80 0f		bra $974d			bra		_LCPunctuation 				; print, increment, loop
.973e					_LCShiftPunc:
.973e	aa		tax				tax 								; save in X
.973f	29 07		and #$07			and 	#7 							; lower 3 bits
.9741	f0 02		beq $9745			beq 	_LCNoAdd
.9743	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9745					_LCNoAdd:
.9745	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9747	90 02		bcc $974b			bcc 	_LCNoAdd2
.9749	09 20		ora #$20			ora 	#32 						; adds $20
.974b					_LCNoAdd2:
.974b	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.974d					_LCPunctuation:
.974d	c8		iny				iny 								; consume character
.974e	20 fa 97	jsr $97fa			jsr 	LCLWrite 					; write it out.
.9751	80 bd		bra $9710			bra 	_LCMainLoop 				; go round again.
.9753					_LCIdentifiers:
.9753	18		clc				clc 								; convert to physical address
.9754	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9756	85 37		sta $37				sta 	zTemp0+1
.9758	c8		iny				iny
.9759	b1 30		lda ($30),y			lda 	(codePtr),y
.975b	85 36		sta $36				sta 	zTemp0
.975d	c8		iny				iny
.975e	5a		phy				phy 								; save position
.975f	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9761					_LCOutIdentifier:
.9761	c8		iny				iny
.9762	b1 36		lda ($36),y			lda 	(zTemp0),y
.9764	29 7f		and #$7f			and 	#$7F
.9766	20 28 98	jsr $9828			jsr 	LCLLowerCase
.9769	20 fa 97	jsr $97fa			jsr 	LCLWrite
.976c	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.976e	10 f1		bpl $9761			bpl 	_LCOutIdentifier
.9770	7a		ply				ply 								; restore position
.9771	80 9d		bra $9710			bra 	_LCMainLoop
.9773					_LCTokens:
.9773	aa		tax				tax 								; token in X
.9774	a9 2c		lda #$2c			lda 	#((KeywordSet2) & $FF)
.9776	85 36		sta $36				sta 	0+zTemp0
.9778	a9 a9		lda #$a9			lda 	#((KeywordSet2) >> 8)
.977a	85 37		sta $37				sta 	1+zTemp0
.977c	e0 82		cpx #$82			cpx 	#$82
.977e	f0 16		beq $9796			beq 	_LCUseShift
.9780	a9 de		lda #$de			lda 	#((KeywordSet1) & $FF)
.9782	85 36		sta $36				sta 	0+zTemp0
.9784	a9 a8		lda #$a8			lda 	#((KeywordSet1) >> 8)
.9786	85 37		sta $37				sta 	1+zTemp0
.9788	e0 81		cpx #$81			cpx 	#$81
.978a	f0 0a		beq $9796			beq 	_LCUseShift
.978c	a9 02		lda #$02			lda 	#((KeywordSet0) & $FF)
.978e	85 36		sta $36				sta 	0+zTemp0
.9790	a9 a7		lda #$a7			lda 	#((KeywordSet0) >> 8)
.9792	85 37		sta $37				sta 	1+zTemp0
.9794	80 01		bra $9797			bra 	_LCNoShift
.9796					_LCUseShift:
.9796	c8		iny				iny
.9797					_LCNoShift:
.9797	20 09 98	jsr $9809			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.979a	b1 30		lda ($30),y			lda 	(codePtr),y
.979c	aa		tax				tax 								; into X
.979d					_LCFindText:
.979d	ca		dex				dex
.979e	10 0e		bpl $97ae			bpl 	_LCFoundText 				; found text.
.97a0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.97a2	1a		inc a				inc 	a 							; one extra for size
.97a3	38		sec				sec 								; one extra for checksum
.97a4	65 36		adc $36				adc 	zTemp0 						; go to next token
.97a6	85 36		sta $36				sta 	zTemp0
.97a8	90 f3		bcc $979d			bcc 	_LCFindText
.97aa	e6 37		inc $37				inc 	zTemp0+1
.97ac	80 ef		bra $979d			bra 	_LCFindText
.97ae					_LCFoundText:
.97ae	5a		phy				phy 								; save List position
.97af	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.97b1	aa		tax				tax
.97b2	a0 02		ldy #$02			ldy 	#2
.97b4					_LCCopyToken:
.97b4	b1 36		lda ($36),y			lda 	(zTemp0),y
.97b6	20 28 98	jsr $9828			jsr 	LCLLowerCase
.97b9	20 fa 97	jsr $97fa			jsr 	LCLWrite
.97bc	c8		iny				iny
.97bd	ca		dex				dex
.97be	d0 f4		bne $97b4			bne 	_LCCopyToken
.97c0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.97c2	f0 05		beq $97c9			beq 	_LCNoSpace
.97c4	a9 20		lda #$20			lda 	#' '
.97c6	20 fa 97	jsr $97fa			jsr 	LCLWrite
.97c9					_LCNoSpace:
.97c9	7a		ply				ply 								; restore position.
.97ca	c8		iny				iny 								; consume token
.97cb	4c 10 97	jmp $9710			jmp 	_LCMainLoop 				; and go around again.
.97ce					_LCData:
.97ce	48		pha				pha 								; save type $FE/$FF
.97cf	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.97d1	c9 fe		cmp #$fe			cmp 	#$FE
.97d3	f0 02		beq $97d7			beq 	_LCHaveOpener
.97d5	a2 22		ldx #$22			ldx 	#'"'
.97d7					_LCHaveOpener:
.97d7	8a		txa				txa 								; output prefix (# or ")
.97d8	20 fa 97	jsr $97fa			jsr 	LCLWrite
.97db	c8		iny				iny 								; get count
.97dc	b1 30		lda ($30),y			lda 	(codePtr),y
.97de	aa		tax				tax
.97df	c8		iny				iny 								; point at first character
.97e0					_LCOutData:
.97e0	b1 30		lda ($30),y			lda 	(codePtr),y
.97e2	c9 00		cmp #$00			cmp 	#0
.97e4	f0 03		beq $97e9			beq 	_LCNoPrint
.97e6	20 fa 97	jsr $97fa			jsr 	LCLWrite
.97e9					_LCNoPrint:
.97e9	c8		iny				iny
.97ea	ca		dex				dex
.97eb	d0 f3		bne $97e0			bne 	_LCOutData
.97ed	68		pla				pla 								; closing " required ?
.97ee	c9 ff		cmp #$ff			cmp 	#$FF
.97f0	d0 05		bne $97f7			bne 	_LCNoQuote
.97f2	a9 22		lda #$22			lda 	#'"'
.97f4	20 fa 97	jsr $97fa			jsr 	LCLWrite
.97f7					_LCNoQuote:
.97f7	4c 10 97	jmp $9710			jmp 	_LCMainLoop
.97fa					LCLWrite:
.97fa	da		phx				phx
.97fb	ae 9d 04	ldx $049d			ldx 	tbOffset
.97fe	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9801	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9804	ee 9d 04	inc $049d			inc 	tbOffset
.9807	fa		plx				plx
.9808	60		rts				rts
.9809					LCCheckSpaceRequired:
.9809	ae 9d 04	ldx $049d			ldx 	tbOffset
.980c	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.980f	20 28 98	jsr $9828			jsr 	LCLLowerCase 				; saves a little effort
.9812	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9814	90 11		bcc $9827			bcc 	_LCCSRExit
.9816	c9 3a		cmp #$3a			cmp 	#"9"+1
.9818	90 08		bcc $9822			bcc 	_LCCSRSpace
.981a	c9 61		cmp #$61			cmp 	#"a"
.981c	90 09		bcc $9827			bcc 	_LCCSRExit
.981e	c9 7b		cmp #$7b			cmp 	#"z"+1
.9820	b0 05		bcs $9827			bcs 	_LCCSRExit
.9822					_LCCSRSpace:
.9822	a9 20		lda #$20			lda 	#' '
.9824	20 fa 97	jsr $97fa			jsr 	LCLWrite
.9827					_LCCSRExit:
.9827	60		rts				rts
.9828					LCLLowerCase:
.9828	c9 41		cmp #$41			cmp 	#"A"
.982a	90 06		bcc $9832			bcc 	_LCLLCOut
.982c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.982e	b0 02		bcs $9832			bcs 	_LCLLCOut
.9830	69 20		adc #$20			adc 	#$20
.9832					_LCLLCOut:
.9832	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9833					ProcedureScan:
.9833	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9835	85 30		sta $30				sta 	codePtr
.9837	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9839	85 31		sta $31				sta 	codePtr+1
.983b					_PSLoop:
.983b	b2 30		lda ($30)			lda 	(codePtr)
.983d	f0 42		beq $9881			beq 	_PSExit
.983f	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9841	b1 30		lda ($30),y			lda 	(codePtr),y
.9843	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.9845	d0 2d		bne $9874			bne 	_PSNext
.9847	c8		iny				iny 								; get the address of the record to zTemp0 and
.9848	b1 30		lda ($30),y			lda 	(codePtr),y
.984a	29 c0		and #$c0			and 	#$C0
.984c	c9 40		cmp #$40			cmp 	#$40
.984e	d0 32		bne $9882			bne 	_PSSyntax
.9850	b1 30		lda ($30),y			lda 	(codePtr),y
.9852	18		clc				clc
.9853	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9855	85 37		sta $37				sta 	zTemp0+1
.9857	c8		iny				iny 								; LSB
.9858	b1 30		lda ($30),y			lda 	(codePtr),y
.985a	85 36		sta $36				sta 	zTemp0
.985c	c8		iny				iny 								; character after variable call.
.985d	98		tya				tya 								; save Y offset at +7
.985e	a0 07		ldy #$07			ldy 	#7
.9860	91 36		sta ($36),y			sta 	(zTemp0),y
.9862	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9864	a0 02		ldy #$02			ldy 	#2
.9866	91 36		sta ($36),y			sta 	(zTemp0),y
.9868	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.986a					_PSCopy:
.986a	b5 30		lda $30,x			lda 	safePtr,x
.986c	c8		iny				iny
.986d	91 36		sta ($36),y			sta 	(zTemp0),y
.986f	e8		inx				inx
.9870	e0 04		cpx #$04			cpx 	#4
.9872	d0 f6		bne $986a			bne 	_PSCopy
.9874					_PSNext:
.9874	18		clc				clc
.9875	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9877	65 30		adc $30				adc 	codePtr
.9879	85 30		sta $30				sta 	codePtr
.987b	90 02		bcc $987f			bcc 	_CREExit
.987d	e6 31		inc $31				inc 	codePtr+1
.987f					_CREExit:
.987f	80 ba		bra $983b			bra 	_PSLoop
.9881					_PSExit:
.9881	60		rts				rts
.9882					_PSSyntax:
.9882	4c 66 b3	jmp $b366			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9885					ScanForward:
.9885	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9887	86 37		stx $37				stx 	zTemp0+1
.9889	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.988b					_ScanLoop:
.988b	b1 30		lda ($30),y			lda 	(codePtr),y
.988d	c8		iny				iny
.988e	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9890	d0 0e		bne $98a0			bne 	_ScanGoNext
.9892	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9894	f0 04		beq $989a			beq 	_ScanMatch
.9896	c5 37		cmp $37				cmp 	zTemp0+1
.9898	d0 06		bne $98a0			bne 	_ScanGoNext
.989a					_ScanMatch:
.989a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.989c	d0 01		bne $989f			bne 	_ScanNotEndEOL
.989e	88		dey				dey
.989f					_ScanNotEndEOL:
.989f	60		rts				rts
.98a0					_ScanGoNext:
.98a0	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.98a2	90 e7		bcc $988b			bcc 	_ScanLoop
.98a4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.98a6	90 18		bcc $98c0			bcc 	_ScanSkipOne
.98a8	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.98aa	b0 2f		bcs $98db			bcs 	_ScanSkipData
.98ac	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.98ae	90 db		bcc $988b			bcc 	_ScanLoop 					; if not, ordinary keywords.
.98b0	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.98b2	b0 d7		bcs $988b			bcs 	_ScanLoop
.98b4	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.98b6	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.98b8	b0 d1		bcs $988b			bcs 	_ScanLoop
.98ba	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.98bc	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.98be	80 cb		bra $988b			bra 	_ScanLoop
.98c0					_ScanSkipOne:
.98c0	c8		iny				iny 								; consume the extra one.
.98c1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.98c3	d0 c6		bne $988b			bne 	_ScanLoop
.98c5	18		clc				clc
.98c6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98c8	65 30		adc $30				adc 	codePtr
.98ca	85 30		sta $30				sta 	codePtr
.98cc	90 02		bcc $98d0			bcc 	_CREExit
.98ce	e6 31		inc $31				inc 	codePtr+1
.98d0					_CREExit:
.98d0	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.98d2	b2 30		lda ($30)			lda 	(codePtr)
.98d4	d0 b5		bne $988b			bne 	_ScanLoop 					; if not zero, more to scan
.98d6	a9 13		lda #$13		lda	#19
.98d8	4c 13 99	jmp $9913		jmp	ErrorHandler
.98db					_ScanSkipData:
.98db	88		dey				dey 								; point at data token
.98dc	c8		iny				iny
.98dd	98		tya				tya
.98de	38		sec				sec
.98df	71 30		adc ($30),y			adc 	(codePtr),y
.98e1	a8		tay				tay
.98e2	80 a7		bra $988b			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.98e4					Command_WHILE:
.98e4	5a		phy				phy 								; save position of the test
.98e5	a2 00		ldx #$00			ldx 	#0
.98e7	20 86 a4	jsr $a486			jsr 	EvaluateNumber 				; work out the number
.98ea	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; check if zero
.98ed	f0 0e		beq $98fd			beq 	_WHExitLoop 				; if so exit the loop
.98ef	98		tya				tya 								; position *after* test.
.98f0	7a		ply				ply 								; restore position before test, at WHILE
.98f1	88		dey				dey
.98f2	48		pha				pha 								; push after test on the stack
.98f3	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.98f5	20 fa a5	jsr $a5fa			jsr 	StackOpen
.98f8	20 3e a6	jsr $a63e			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.98fb	7a		ply				ply 								; restore the position *after* the test
.98fc	60		rts				rts
.98fd					_WHExitLoop:
.98fd	68		pla				pla 								; throw post loop position
.98fe	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9900	aa		tax				tax
.9901	20 85 98	jsr $9885			jsr 	ScanForward
.9904	60		rts				rts
.9905					Command_WEND:
.9905	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9907	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9909	20 26 a6	jsr $a626			jsr 	StackCheckFrame
.990c	20 4f a6	jsr $a64f			jsr 	STKLoadCodePosition 		; loop back
.990f	20 18 a6	jsr $a618			jsr 	StackClose		 			; erase the frame
.9912	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ad80					CheckRightBracket:
.ad80	b1 30		lda ($30),y			lda 	(codePtr),y
.ad82	c8		iny				iny
.ad83	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ad85	d0 0f		bne $ad96			bne 	CNAFail
.ad87	60		rts				rts
.ad88					CheckComma:
.ad88	b1 30		lda ($30),y			lda 	(codePtr),y
.ad8a	c8		iny				iny
.ad8b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ad8d	d0 07		bne $ad96			bne 	CNAFail
.ad8f	60		rts				rts
.ad90					CheckNextA:
.ad90	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ad92	d0 02		bne $ad96			bne 	CNAFail
.ad94	c8		iny				iny 								; skip character
.ad95	60		rts				rts 								; and exit
.ad96					CNAFail:
.ad96	4c 66 b3	jmp $b366			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9913					ErrorHandler:
.9913	a8		tay				tay 								; find the error text
.9914	f0 49		beq $995f			beq 	_EHEnd
.9916	a2 00		ldx #$00			ldx 	#0
.9918	a9 7f		lda #$7f			lda 	#((ErrorText) & $FF)
.991a	85 36		sta $36				sta 	0+zTemp0
.991c	a9 b3		lda #$b3			lda 	#((ErrorText) >> 8)
.991e	85 37		sta $37				sta 	1+zTemp0
.9920					_EHFind:
.9920	88		dey				dey 								; found the error text ?
.9921	f0 0e		beq $9931			beq 	_EHFound
.9923					_EHFindZero:
.9923	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9925	e6 36		inc $36				inc 	zTemp0
.9927	d0 02		bne $992b			bne 	_EHFNoCarry
.9929	e6 37		inc $37				inc 	zTemp0+1
.992b					_EHFNoCarry:
.992b	c9 00		cmp #$00			cmp 	#0
.992d	d0 f4		bne $9923			bne 	_EHFindZero
.992f	80 ef		bra $9920			bra 	_EHFind
.9931					_EHFound:
.9931	a5 36		lda $36				lda 	zTemp0 						; print message
.9933	a6 37		ldx $37				ldx 	zTemp0+1
.9935	20 6c 99	jsr $996c			jsr 	PrintStringXA
.9938	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.993a	b1 30		lda ($30),y			lda 	(codePtr),y
.993c	d0 05		bne $9943			bne 	_EHAtMsg
.993e	c8		iny				iny
.993f	b1 30		lda ($30),y			lda 	(codePtr),y
.9941	f0 17		beq $995a			beq 	_EHCREnd
.9943					_EHAtMsg:
.9943	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.9945	a9 62		lda #$62			lda 	#_AtMsg & $FF
.9947	20 6c 99	jsr $996c			jsr 	PrintStringXA
.994a	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.994c	b1 30		lda ($30),y			lda 	(codePtr),y
.994e	48		pha				pha
.994f	c8		iny				iny
.9950	b1 30		lda ($30),y			lda 	(codePtr),y
.9952	aa		tax				tax
.9953	68		pla				pla
.9954	20 dc ae	jsr $aedc			jsr 	ConvertInt16 				; convert XA to string
.9957	20 6c 99	jsr $996c			jsr 	PrintStringXA 				; and print it.
.995a					_EHCREnd:
.995a	a9 0d		lda #$0d			lda 	#13 						; new line
.995c	20 20 b5	jsr $b520			jsr 	EXTPrintCharacter
.995f					_EHEnd:
.995f	4c 4e 8b	jmp $8b4e			jmp 	WarmStart
>9962	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>996a	20 00
.996c					PrintStringXA:
.996c	5a		phy				phy
.996d	86 37		stx $37				stx 	zTemp0+1
.996f	85 36		sta $36				sta 	zTemp0
.9971	a0 00		ldy #$00			ldy 	#0
.9973					_PSXALoop:
.9973	b1 36		lda ($36),y			lda 	(zTemp0),y
.9975	f0 06		beq $997d			beq 	_PSXAExit
.9977	20 20 b5	jsr $b520			jsr 	EXTPrintCharacter
.997a	c8		iny				iny
.997b	80 f6		bra $9973			bra 	_PSXALoop
.997d					_PSXAExit:
.997d	7a		ply				ply
.997e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.997f					UnaryTrue:
.997f	fa		plx				plx
.9980					ReturnTrue:
.9980	a9 01		lda #$01			lda 	#1  						; set to 1
.9982	20 48 a5	jsr $a548			jsr 	NSMSetByte
.9985	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9987	9d 00 04	sta $0400,x			sta 	NSStatus,x
.998a	60		rts				rts
.998b					UnaryFalse:
.998b	fa		plx				plx
.998c					ReturnFalse:
.998c	4c 46 a5	jmp $a546			jmp 	NSMSetZero 					; set it all to zero
.998f					BinaryCompareEqual:
.998f	fa		plx				plx
.9990	20 cb 99	jsr $99cb			jsr 	CompareBaseCode
.9993	c9 00		cmp #$00			cmp 	#0
.9995	f0 e9		beq $9980			beq 	ReturnTrue
.9997	80 f3		bra $998c			bra 	ReturnFalse
.9999					BinaryCompareLess:
.9999	fa		plx				plx
.999a	20 cb 99	jsr $99cb			jsr 	CompareBaseCode
.999d	c9 ff		cmp #$ff			cmp 	#$FF
.999f	f0 df		beq $9980			beq 	ReturnTrue
.99a1	80 e9		bra $998c			bra 	ReturnFalse
.99a3					BinaryCompareGreater:
.99a3	fa		plx				plx
.99a4	20 cb 99	jsr $99cb			jsr 	CompareBaseCode
.99a7	c9 01		cmp #$01			cmp 	#1
.99a9	f0 d5		beq $9980			beq 	ReturnTrue
.99ab	80 df		bra $998c			bra 	ReturnFalse
.99ad					BinaryCompareNotEqual:
.99ad	fa		plx				plx
.99ae	20 cb 99	jsr $99cb			jsr 	CompareBaseCode
.99b1	c9 00		cmp #$00			cmp 	#0
.99b3	d0 cb		bne $9980			bne 	ReturnTrue
.99b5	80 d5		bra $998c			bra 	ReturnFalse
.99b7					BinaryCompareLessEqual:
.99b7	fa		plx				plx
.99b8	20 cb 99	jsr $99cb			jsr 	CompareBaseCode
.99bb	c9 01		cmp #$01			cmp 	#1
.99bd	d0 c1		bne $9980			bne 	ReturnTrue
.99bf	80 cb		bra $998c			bra 	ReturnFalse
.99c1					BinaryCompareGreaterEqual:
.99c1	fa		plx				plx
.99c2	20 cb 99	jsr $99cb			jsr 	CompareBaseCode
.99c5	c9 ff		cmp #$ff			cmp 	#$FF
.99c7	d0 b7		bne $9980			bne 	ReturnTrue
.99c9	80 c1		bra $998c			bra 	ReturnFalse
.99cb					CompareBaseCode:
.99cb	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; make both values if references.
.99ce	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.99d1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99d4	29 10		and #$10			and 	#NSTString
.99d6	d0 40		bne $9a18			bne 	_CBCString
.99d8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.99db	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99de	d0 3b		bne $9a1b			bne 	_CBCFloat
.99e0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99e3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99e6	29 08		and #$08			and 	#NSTFloat
.99e8	d0 31		bne $9a1b			bne 	_CBCFloat
.99ea	20 1e 9a	jsr $9a1e			jsr 	CompareFixMinusZero
.99ed	e8		inx				inx
.99ee	20 1e 9a	jsr $9a1e			jsr 	CompareFixMinusZero
.99f1	ca		dex				dex
.99f2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.99f5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.99f8	10 0b		bpl $9a05			bpl 	_CDCSameSign
.99fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.99fd	30 16		bmi $9a15			bmi 	_CBCLess 					; return $FF
.99ff					_CBCGreater:
.99ff	a9 01		lda #$01			lda 	#1
.9a01	60		rts				rts
.9a02					_CBCEqual:
.9a02	a9 00		lda #$00			lda 	#0
.9a04	60		rts				rts
.9a05					_CDCSameSign:
.9a05	20 2e 9b	jsr $9b2e			jsr 	SubTopTwoStack 				; unsigned subtract
.9a08	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; or the mantissa together
.9a0b	f0 f5		beq $9a02			beq 	_CBCEqual 					; -0 == 0
.9a0d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9a10	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9a13	10 ea		bpl $99ff			bpl 	_CBCGreater
.9a15					_CBCLess:
.9a15	a9 ff		lda #$ff			lda 	#$FF
.9a17	60		rts				rts
.9a18					_CBCString:
.9a18	4c 84 9a	jmp $9a84			jmp 	CompareStrings
.9a1b					_CBCFloat:
.9a1b	4c d8 af	jmp $afd8			jmp 	CompareFloat
.9a1e					CompareFixMinusZero:
.9a1e	20 76 a5	jsr $a576			jsr 	NSMIsZero
.9a21	d0 03		bne $9a26			bne 	_CFXMZNotZero
.9a23	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9a26					_CFXMZNotZero:
.9a26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9a27					StringConcat:
.9a27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a2a	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a2d	29 18		and #$18			and 	#NSBTypeMask
.9a2f	c9 10		cmp #$10			cmp 	#NSTString
.9a31	d0 4e		bne $9a81			bne		_SCType
.9a33	64 38		stz $38				stz 	zTemp1 						; counting total length
.9a35	e8		inx				inx
.9a36	20 54 9a	jsr $9a54			jsr 	_SCSetupZ0 					; setup for second
.9a39	20 5f 9a	jsr $9a5f			jsr 	_SCLengthZ0 				; length for second
.9a3c	ca		dex				dex
.9a3d	20 54 9a	jsr $9a54			jsr 	_SCSetupZ0 					; setup for first
.9a40	20 5f 9a	jsr $9a5f			jsr 	_SCLengthZ0 				; length for first
.9a43	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9a45	20 e9 b6	jsr $b6e9			jsr 	StringTempAllocate
.9a48	20 72 9a	jsr $9a72			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9a4b	e8		inx				inx
.9a4c	20 54 9a	jsr $9a54			jsr 	_SCSetupZ0 					; copy second out
.9a4f	20 72 9a	jsr $9a72			jsr 	_SCCopy
.9a52	ca		dex				dex
.9a53	60		rts				rts
.9a54					_SCSetupZ0:
.9a54	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a57	85 36		sta $36				sta 	zTemp0
.9a59	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a5c	85 37		sta $37				sta 	zTemp0+1
.9a5e	60		rts				rts
.9a5f					_SCLengthZ0:
.9a5f	5a		phy				phy
.9a60	a0 00		ldy #$00			ldy 	#0
.9a62					_SCLenLoop:
.9a62	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a64	f0 0a		beq $9a70			beq 	_SCLExit
.9a66	c8		iny				iny
.9a67	e6 38		inc $38				inc 	zTemp1
.9a69	10 f7		bpl $9a62			bpl		_SCLenLoop
.9a6b	a9 09		lda #$09		lda	#9
.9a6d	4c 13 99	jmp $9913		jmp	ErrorHandler
.9a70					_SCLExit:
.9a70	7a		ply				ply
.9a71	60		rts				rts
.9a72					_SCCopy:
.9a72	5a		phy				phy
.9a73	a0 00		ldy #$00			ldy 	#0
.9a75					_SCCopyLoop:
.9a75	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a77	f0 06		beq $9a7f			beq 	_SCCExit
.9a79	20 27 b7	jsr $b727			jsr 	StringTempWrite
.9a7c	c8		iny				iny
.9a7d	80 f6		bra $9a75			bra 	_SCCopyLoop
.9a7f					_SCCExit:
.9a7f	7a		ply				ply
.9a80	60		rts				rts
.9a81					_SCType:
.9a81	4c 70 b3	jmp $b370			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ad99					IntegerDivide:
.ad99	fa		plx				plx
.ad9a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad9d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ada0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ada1	0a		asl a				asl 	a
.ada2	10 05		bpl $ada9			bpl 	_NotRef
.ada4	48		pha				pha
.ada5	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ada8	68		pla				pla
.ada9					_NotRef:
.ada9	0a		asl a				asl 	a
.adaa	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.adac	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.adaf	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.adb2	f0 03		beq $adb7			beq 	_IntegerCode 				; if clear, then we have two integers
.adb4	4c 70 b3	jmp $b370			jmp 	TypeError 					; anything else, type mismatch.
.adb7					_IntegerCode:
.adb7	20 d9 ad	jsr $add9			jsr 	CheckDivideZero 			; do div zero check
.adba	20 11 ae	jsr $ae11			jsr 	Int32Divide 				; do the division
.adbd	20 ce ae	jsr $aece			jsr 	CalculateSign 				; calculate result sign
.adc0					NSMCopyPlusTwoToZero:
.adc0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.adc3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.adc6	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.adc9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.adcc	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.adcf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.add2	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.add5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.add8	60		rts				rts
.add9					CheckDivideZero:
.add9	e8		inx				inx
.adda	20 76 a5	jsr $a576			jsr 	NSMIsZero
.addd	f0 02		beq $ade1			beq 	_CDVError
.addf	ca		dex				dex
.ade0	60		rts				rts
.ade1					_CDVError:
.ade1	a9 03		lda #$03		lda	#3
.ade3	4c 13 99	jmp $9913		jmp	ErrorHandler
.ade6					IntegerModulus:
.ade6	fa		plx				plx
.ade7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.adea	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aded	0a		asl a				asl 	a 							; shift reference bit into sign bit
.adee	0a		asl a				asl 	a
.adef	10 05		bpl $adf6			bpl 	_NotRef
.adf1	48		pha				pha
.adf2	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.adf5	68		pla				pla
.adf6					_NotRef:
.adf6	0a		asl a				asl 	a
.adf7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.adf9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.adfc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.adff	f0 03		beq $ae04			beq 	_IntegerCode 				; if clear, then we have two integers
.ae01	4c 70 b3	jmp $b370			jmp 	TypeError 					; anything else, type mismatch.
.ae04					_IntegerCode:
.ae04					IntegerModulusNoCheck:
.ae04	20 d9 ad	jsr $add9			jsr 	CheckDivideZero 			; do div zero check
.ae07	20 11 ae	jsr $ae11			jsr 	Int32Divide 				; do the division
.ae0a	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ae0d	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ae10	60		rts				rts
.ae11					Int32Divide:
.ae11	48		pha				pha 								; save AXY
.ae12	5a		phy				phy
.ae13	20 1d a5	jsr $a51d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae16	20 42 a5	jsr $a542			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ae19	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ae1b					_I32DivideLoop:
.ae1b	e8		inx				inx
.ae1c	e8		inx				inx
.ae1d	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ae20	ca		dex				dex
.ae21	ca		dex				dex
.ae22	20 5c a5	jsr $a55c			jsr 	NSMRotateLeft
.ae25	20 51 ae	jsr $ae51			jsr 	DivideCheckSubtract 		; check if subtract possible
.ae28	90 03		bcc $ae2d			bcc 	_I32DivideNoCarryIn
.ae2a	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ae2d					_I32DivideNoCarryIn:
.ae2d	88		dey				dey 								; loop round till division completed.
.ae2e	d0 eb		bne $ae1b			bne 	_I32DivideLoop
.ae30	7a		ply				ply 								; restore AXY and exit
.ae31	68		pla				pla
.ae32	60		rts				rts
.ae33					Int32ShiftDivide:
.ae33	48		pha				pha 								; save AY
.ae34	5a		phy				phy
.ae35	e8		inx				inx 								; clear S[X+2]
.ae36	e8		inx				inx
.ae37	20 46 a5	jsr $a546			jsr 	NSMSetZero
.ae3a	ca		dex				dex
.ae3b	ca		dex				dex
.ae3c	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.ae3e					_I32SDLoop:
.ae3e	20 51 ae	jsr $ae51			jsr 	DivideCheckSubtract 		; check if subtract possible
.ae41	e8		inx				inx
.ae42	e8		inx				inx
.ae43	20 5c a5	jsr $a55c			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.ae46	ca		dex				dex
.ae47	ca		dex				dex
.ae48	20 5c a5	jsr $a55c			jsr 	NSMRotateLeft
.ae4b	88		dey				dey 	 							; do 31 times
.ae4c	d0 f0		bne $ae3e			bne 	_I32SDLoop
.ae4e	7a		ply				ply 								; restore AY and exit
.ae4f	68		pla				pla
.ae50	60		rts				rts
.ae51					DivideCheckSubtract:
.ae51	20 2e 9b	jsr $9b2e			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.ae54	b0 04		bcs $ae5a			bcs 	_DCSExit 					; if carry set, then could do, exit
.ae56	20 08 9b	jsr $9b08			jsr 	AddTopTwoStack 				; add it back in
.ae59	18		clc				clc 								; and return False
.ae5a					_DCSExit:
.ae5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.ae5b					MulInteger:
.ae5b	fa		plx				plx
.ae5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae5f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae62	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae63	0a		asl a				asl 	a
.ae64	10 05		bpl $ae6b			bpl 	_NotRef
.ae66	48		pha				pha
.ae67	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae6a	68		pla				pla
.ae6b					_NotRef:
.ae6b	0a		asl a				asl 	a 							; put MSB of type into A:7
.ae6c	30 0b		bmi $ae79			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.ae6e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae71	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae74	f0 06		beq $ae7c			beq 	_IntegerCode 				; if clear, then we have two integers
.ae76	4c af b0	jmp $b0af			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ae79					_StringData:
.ae79	4c 7a b3	jmp $b37a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.ae7c					_IntegerCode:
.ae7c	20 89 ae	jsr $ae89			jsr 	MultiplyShort
.ae7f	c9 00		cmp #$00			cmp 	#0
.ae81	f0 05		beq $ae88			beq 	_MIExit
.ae83	a9 04		lda #$04		lda	#4
.ae85	4c 13 99	jmp $9913		jmp	ErrorHandler
.ae88					_MIExit:
.ae88	60		rts				rts
.ae89					MultiplyShort:
.ae89	5a		phy				phy 								; save Y
.ae8a	20 1d a5	jsr $a51d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae8d	20 42 a5	jsr $a542			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ae90	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ae92					_I32MLoop:
.ae92	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ae95	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ae98	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ae9b	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ae9e	f0 28		beq $aec8			beq 	_I32MExit 					; exit if zero
.aea0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.aea3	29 01		and #$01			and 	#1
.aea5	f0 0e		beq $aeb5			beq 	_I32MNoAdd
.aea7	20 08 9b	jsr $9b08			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.aeaa	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.aead	10 06		bpl $aeb5			bpl 	_I32MNoAdd
.aeaf					_I32ShiftRight:
.aeaf	20 69 a5	jsr $a569			jsr 	NSMShiftRight 				; shift S[X] right
.aeb2	c8		iny				iny 								; increment shift count
.aeb3	80 0a		bra $aebf			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.aeb5					_I32MNoAdd:
.aeb5	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.aeb8	70 f5		bvs $aeaf			bvs 	_I32ShiftRight 				; instead.
.aeba	e8		inx				inx
.aebb	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.aebe	ca		dex				dex
.aebf					_I32MShiftUpper:
.aebf	e8		inx				inx 								; shift S[X+2] right
.aec0	e8		inx				inx
.aec1	20 69 a5	jsr $a569			jsr 	NSMShiftRight
.aec4	ca		dex				dex
.aec5	ca		dex				dex
.aec6	80 ca		bra $ae92			bra 	_I32MLoop 					; try again.
.aec8					_I32MExit:
.aec8	20 ce ae	jsr $aece			jsr 	CalculateSign
.aecb	98		tya				tya 								; shift in A
.aecc	7a		ply				ply 								; restore Y and exit
.aecd	60		rts				rts
.aece					CalculateSign:
.aece	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.aed1	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.aed4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aed7	0a		asl a				asl 	a 							; shift bit 7 into carry
.aed8	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.aedb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a84					CompareStrings:
.9a84	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9a87	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a8a	29 10		and #$10			and 	#NSBIsString
.9a8c	f0 2c		beq $9aba			beq 	_CSTypeError
.9a8e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a91	85 36		sta $36				sta 	zTemp0
.9a93	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a96	85 37		sta $37				sta 	zTemp0+1
.9a98	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a9b	85 38		sta $38				sta 	zTemp1
.9a9d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9aa0	85 39		sta $39				sta 	zTemp1+1
.9aa2	5a		phy				phy 								; save Y so we can access strings
.9aa3	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9aa5					_CSLoop:
.9aa5	c8		iny				iny
.9aa6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9aa8	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9aaa	d0 06		bne $9ab2			bne 	_CSDifferent
.9aac	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9aae	d0 f5		bne $9aa5			bne 	_CSLoop 					; still comparing
.9ab0					_CSExit:
.9ab0	7a		ply				ply 								; reached end, return zero in A from EOS
.9ab1	60		rts				rts
.9ab2					_CSDifferent:
.9ab2	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9ab4	90 fa		bcc $9ab0			bcc		_CSExit
.9ab6	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9ab8	80 f6		bra $9ab0			bra 	_CSExit
.9aba					_CSTypeError:
.9aba	4c 70 b3	jmp $b370			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9abd					ShiftLeft:
.9abd	38		sec				sec
.9abe	80 01		bra $9ac1			bra 	ShiftMain
.9ac0					ShiftRight:
.9ac0	18		clc				clc
.9ac1					ShiftMain:
.9ac1	fa		plx				plx 								; restore X
.9ac2	08		php				php 								; save direction
.9ac3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ac6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ac9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aca	0a		asl a				asl 	a
.9acb	10 05		bpl $9ad2			bpl 	_NotRef
.9acd	48		pha				pha
.9ace	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ad1	68		pla				pla
.9ad2					_NotRef:
.9ad2	0a		asl a				asl 	a
.9ad3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ad5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ad8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9adb	f0 03		beq $9ae0			beq 	_IntegerCode 				; if clear, then we have two integers
.9add	4c 70 b3	jmp $b370			jmp 	TypeError 					; anything else, type mismatch.
.9ae0					_IntegerCode:
.9ae0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ae3	29 e0		and #$e0			and 	#$E0
.9ae5	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ae8	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9aeb	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9aee	d0 13		bne $9b03			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9af0					_SMLoop:
.9af0	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9af3	30 11		bmi $9b06			bmi 	_SMExit 					; exit if done.
.9af5	28		plp				plp 								; restore direcition setting
.9af6	08		php				php
.9af7	90 05		bcc $9afe			bcc 	_SMRight
.9af9	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; shift left if CS
.9afc	80 f2		bra $9af0			bra 	_SMLoop
.9afe					_SMRight:
.9afe	20 69 a5	jsr $a569			jsr 	NSMShiftRight 				; shift right if CC
.9b01	80 ed		bra $9af0			bra 	_SMLoop
.9b03					_SMExit0:
.9b03	20 46 a5	jsr $a546			jsr 	NSMSetZero 					; return zero.
.9b06					_SMExit:
.9b06	28		plp				plp 								; throw direction
.9b07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9b08					AddTopTwoStack:
.9b08	18		clc				clc
.9b09	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b0c	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9b0f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b12	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b15	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9b18	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b1b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b1e	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9b21	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b24	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b27	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b2a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b2d	60		rts				rts
.9b2e					SubTopTwoStack:
.9b2e	38		sec				sec
.9b2f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b32	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9b35	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b38	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b3b	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9b3e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b41	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b44	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9b47	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b4a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b4d	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9b50	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b53	60		rts				rts
.9b54					AddInteger:
.9b54	fa		plx				plx
.9b55	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b58	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b5b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b5c	0a		asl a				asl 	a
.9b5d	10 05		bpl $9b64			bpl 	_NotRef
.9b5f	48		pha				pha
.9b60	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b63	68		pla				pla
.9b64					_NotRef:
.9b64	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b65	30 0b		bmi $9b72			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b67	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b6a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b6d	f0 06		beq $9b75			beq 	_IntegerCode 				; if clear, then we have two integers
.9b6f	4c 37 af	jmp $af37			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b72					_StringData:
.9b72	4c 27 9a	jmp $9a27			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b75					_IntegerCode:
.9b75					AddCode:
.9b75	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b78	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b7b	10 8b		bpl $9b08			bpl 	AddTopTwoStack
.9b7d	20 2e 9b	jsr $9b2e			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b80	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b83	10 09		bpl $9b8e			bpl 	_AddExit
.9b85	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b88	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b8b	20 fb a4	jsr $a4fb			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b8e					_AddExit:
.9b8e	60		rts				rts
.9b8f					SubInteger:
.9b8f	fa		plx				plx
.9b90	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b93	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b96	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b97	0a		asl a				asl 	a
.9b98	10 05		bpl $9b9f			bpl 	_NotRef
.9b9a	48		pha				pha
.9b9b	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b9e	68		pla				pla
.9b9f					_NotRef:
.9b9f	0a		asl a				asl 	a 							; put MSB of type into A:7
.9ba0	30 0b		bmi $9bad			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9ba2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ba5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ba8	f0 06		beq $9bb0			beq 	_IntegerCode 				; if clear, then we have two integers
.9baa	4c 3c af	jmp $af3c			jmp 	FloatingPointSub 							; otherwise at least one float.
.9bad					_StringData:
.9bad	4c 7a b3	jmp $b37a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9bb0					_IntegerCode:
.9bb0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9bb3	49 80		eor #$80			eor 	#$80
.9bb5	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9bb8	80 bb		bra $9b75			bra 	AddCode 					; and do the same code as add.
.9bba					AndInteger:
.9bba	fa		plx				plx
.9bbb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bbe	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bc1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bc2	0a		asl a				asl 	a
.9bc3	10 05		bpl $9bca			bpl 	_NotRef
.9bc5	48		pha				pha
.9bc6	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bc9	68		pla				pla
.9bca					_NotRef:
.9bca	0a		asl a				asl 	a
.9bcb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bcd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bd0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bd3	f0 03		beq $9bd8			beq 	_IntegerCode 				; if clear, then we have two integers
.9bd5	4c 70 b3	jmp $b370			jmp 	TypeError 					; anything else, type mismatch.
.9bd8					_IntegerCode:
.9bd8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bdb	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9bde	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9be1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9be4	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9be7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bea	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bed	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9bf0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bf3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bf6	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9bf9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bfc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9bff	60		rts				rts
.9c00					OraInteger:
.9c00	fa		plx				plx
.9c01	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c04	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c07	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c08	0a		asl a				asl 	a
.9c09	10 05		bpl $9c10			bpl 	_NotRef
.9c0b	48		pha				pha
.9c0c	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c0f	68		pla				pla
.9c10					_NotRef:
.9c10	0a		asl a				asl 	a
.9c11	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c13	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c16	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c19	f0 03		beq $9c1e			beq 	_IntegerCode 				; if clear, then we have two integers
.9c1b	4c 70 b3	jmp $b370			jmp 	TypeError 					; anything else, type mismatch.
.9c1e					_IntegerCode:
.9c1e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c21	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9c24	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c27	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c2a	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c2d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c30	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c33	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9c36	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c39	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c3c	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9c3f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c42	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c45	60		rts				rts
.9c46					EorInteger:
.9c46	fa		plx				plx
.9c47	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c4a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c4d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c4e	0a		asl a				asl 	a
.9c4f	10 05		bpl $9c56			bpl 	_NotRef
.9c51	48		pha				pha
.9c52	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c55	68		pla				pla
.9c56					_NotRef:
.9c56	0a		asl a				asl 	a
.9c57	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c59	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c5c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c5f	f0 03		beq $9c64			beq 	_IntegerCode 				; if clear, then we have two integers
.9c61	4c 70 b3	jmp $b370			jmp 	TypeError 					; anything else, type mismatch.
.9c64					_IntegerCode:
.9c64	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c67	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9c6a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c6d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c70	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9c73	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c76	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c79	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9c7c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c7f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c82	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9c85	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c88	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c8b	60		rts				rts
.9c8c					WordIndirect:
.9c8c	fa		plx				plx
.9c8d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c90	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c93	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c94	0a		asl a				asl 	a
.9c95	10 05		bpl $9c9c			bpl 	_NotRef
.9c97	48		pha				pha
.9c98	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c9b	68		pla				pla
.9c9c					_NotRef:
.9c9c	0a		asl a				asl 	a
.9c9d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c9f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ca2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ca5	f0 03		beq $9caa			beq 	_IntegerCode 				; if clear, then we have two integers
.9ca7	4c 70 b3	jmp $b370			jmp 	TypeError 					; anything else, type mismatch.
.9caa					_IntegerCode:
.9caa	20 75 9b	jsr $9b75			jsr 	AddCode 					; add the two values
.9cad	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9caf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cb2	60		rts				rts
.9cb3					ByteIndirect:
.9cb3	fa		plx				plx
.9cb4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cb7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cbb	0a		asl a				asl 	a
.9cbc	10 05		bpl $9cc3			bpl 	_NotRef
.9cbe	48		pha				pha
.9cbf	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cc2	68		pla				pla
.9cc3					_NotRef:
.9cc3	0a		asl a				asl 	a
.9cc4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cc6	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cc9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ccc	f0 03		beq $9cd1			beq 	_IntegerCode 				; if clear, then we have two integers
.9cce	4c 70 b3	jmp $b370			jmp 	TypeError 					; anything else, type mismatch.
.9cd1					_IntegerCode:
.9cd1	20 75 9b	jsr $9b75			jsr 	AddCode 					; add the two values
.9cd4	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9cd6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cd9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.aedc					ConvertInt16:
.aedc	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.aedf	8e 10 04	stx $0410			stx 	NSMantissa1
.aee2	9c 18 04	stz $0418			stz 	NSMantissa2
.aee5	9c 20 04	stz $0420			stz 	NSMantissa3
.aee8	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.aeeb	a2 00		ldx #$00			ldx 	#0 							; stack level
.aeed	a9 0a		lda #$0a			lda 	#10 						; base
.aeef	80 00		bra $aef1			bra 	ConvertInt32
.aef1					ConvertInt32:
.aef1	5a		phy				phy
.aef2	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.aef4	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.aef7	10 08		bpl $af01			bpl 	_CI32NotNeg
.aef9	48		pha				pha
.aefa	a9 2d		lda #$2d			lda 	#'-'
.aefc	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aeff	c8		iny				iny
.af00	68		pla				pla
.af01					_CI32NotNeg:
.af01	20 0f af	jsr $af0f			jsr 	_CI32DivideConvert 			; recursive conversion
.af04	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.af06	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.af09	7a		ply				ply
.af0a	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.af0c	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.af0e	60		rts				rts
.af0f					_CI32DivideConvert:
.af0f	e8		inx				inx 								; write to next slot up
.af10	20 48 a5	jsr $a548			jsr 	NSMSetByte
.af13	ca		dex				dex
.af14	20 11 ae	jsr $ae11			jsr 	Int32Divide 				; divide
.af17	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.af1a	48		pha				pha
.af1b	20 c0 ad	jsr $adc0			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.af1e	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; is it zero ?
.af21	f0 06		beq $af29			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.af23	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.af26	20 0f af	jsr $af0f			jsr 	_CI32DivideConvert 			; and recusrively call.
.af29					_CI32NoRecurse:
.af29	68		pla				pla 								; remainder
.af2a	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.af2c	90 02		bcc $af30			bcc 	_CI32NotHex
.af2e	69 26		adc #$26			adc 	#6+32
.af30					_CI32NotHex:
.af30	69 30		adc #$30			adc 	#48
.af32	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.af35	c8		iny				iny
.af36	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cda					PrecedenceLevel:
>9cda	04					.byte	 4	; $00 <<
>9cdb	02					.byte	 2	; $01 <=
>9cdc	02					.byte	 2	; $02 <>
>9cdd	00					.byte	 0	; $03 !!3
>9cde	00					.byte	 0	; $04 ><
>9cdf	02					.byte	 2	; $05 >=
>9ce0	04					.byte	 4	; $06 >>
>9ce1	00					.byte	 0	; $07 !!7
>9ce2	00					.byte	 0	; $08 !!8
>9ce3	00					.byte	 0	; $09 !!9
>9ce4	00					.byte	 0	; $0a !!10
>9ce5	00					.byte	 0	; $0b !!11
>9ce6	00					.byte	 0	; $0c !!12
>9ce7	00					.byte	 0	; $0d !!13
>9ce8	00					.byte	 0	; $0e !!14
>9ce9	00					.byte	 0	; $0f !!15
>9cea	00					.byte	 0	; $10 @
>9ceb	00					.byte	 0	; $11 !!17
>9cec	00					.byte	 0	; $12 !!18
>9ced	00					.byte	 0	; $13 [
>9cee	04					.byte	 4	; $14 \
>9cef	00					.byte	 0	; $15 ]
>9cf0	01					.byte	 1	; $16 ^
>9cf1	00					.byte	 0	; $17 _
>9cf2	00					.byte	 0	; $18 `
>9cf3	00					.byte	 0	; $19 !!25
>9cf4	00					.byte	 0	; $1a !!26
>9cf5	00					.byte	 0	; $1b {
>9cf6	01					.byte	 1	; $1c |
>9cf7	00					.byte	 0	; $1d }
>9cf8	00					.byte	 0	; $1e ~
>9cf9	00					.byte	 0	; $1f [7m<7F>[m
>9cfa	00					.byte	 0	; $20
>9cfb	05					.byte	 5	; $21 !
>9cfc	00					.byte	 0	; $22 "
>9cfd	00					.byte	 0	; $23 #
>9cfe	05					.byte	 5	; $24 $
>9cff	04					.byte	 4	; $25 %
>9d00	01					.byte	 1	; $26 &
>9d01	00					.byte	 0	; $27 '
>9d02	00					.byte	 0	; $28 (
>9d03	00					.byte	 0	; $29 )
>9d04	04					.byte	 4	; $2a *
>9d05	03					.byte	 3	; $2b +
>9d06	00					.byte	 0	; $2c ,
>9d07	03					.byte	 3	; $2d -
>9d08	00					.byte	 0	; $2e .
>9d09	04					.byte	 4	; $2f /
>9d0a	00					.byte	 0	; $30 0
>9d0b	00					.byte	 0	; $31 1
>9d0c	00					.byte	 0	; $32 2
>9d0d	00					.byte	 0	; $33 3
>9d0e	00					.byte	 0	; $34 4
>9d0f	00					.byte	 0	; $35 5
>9d10	00					.byte	 0	; $36 6
>9d11	00					.byte	 0	; $37 7
>9d12	00					.byte	 0	; $38 8
>9d13	00					.byte	 0	; $39 9
>9d14	00					.byte	 0	; $3a :
>9d15	00					.byte	 0	; $3b ;
>9d16	02					.byte	 2	; $3c <
>9d17	02					.byte	 2	; $3d =
>9d18	02					.byte	 2	; $3e >
>9d19	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9d1a					EvaluateExpressionAt0:
.9d1a	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9d1c					EvaluateExpression:
.9d1c	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d1e					EvaluateExpressionAtPrecedence:
.9d1e	48		pha				pha 								; save precedence level
.9d1f	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d22	68		pla				pla 								; restore precedence level.
.9d23					_EXPRLoop:
.9d23	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d25	b1 30		lda ($30),y			lda 	(codePtr),y
.9d27	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d29	b0 25		bcs $9d50			bcs 	_EXPRExit
.9d2b	da		phx				phx 								; read the operator precedence
.9d2c	aa		tax				tax
.9d2d	bd da 9c	lda $9cda,x			lda 	PrecedenceLevel,x
.9d30	fa		plx				plx
.9d31	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d33	f0 1b		beq $9d50			beq 	_EXPRExit
.9d35	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d37	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d39	c5 37		cmp $37				cmp 	zTemp0+1
.9d3b	b0 13		bcs $9d50			bcs		_EXPRExit 					; if current >= operator exit
.9d3d	48		pha				pha 								; save current precedence.
.9d3e	b1 30		lda ($30),y			lda 	(codePtr),y
.9d40	c8		iny				iny
.9d41	48		pha				pha
.9d42	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d44	e8		inx				inx 								; work out the right hand side.
.9d45	20 1e 9d	jsr $9d1e			jsr 	EvaluateExpressionAtPrecedence
.9d48	ca		dex				dex
.9d49	68		pla				pla 								; get operator, call the code.
.9d4a	20 53 9d	jsr $9d53			jsr 	_EXPRCaller
.9d4d	68		pla				pla 								; restore precedence level
.9d4e	80 d3		bra $9d23			bra 	_EXPRLoop 					; and go round.
.9d50					_EXPRExit:
.9d50	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d52	60		rts				rts
.9d53					_EXPRCaller:
.9d53	da		phx				phx 								; save on stack, first thing is to restore it
.9d54	0a		asl a				asl 	a 							; double so can use vectors into X
.9d55	aa		tax				tax
.9d56	7c 08 95	jmp ($9508,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.af37					FloatingPointAdd:
.af37	20 d8 b0	jsr $b0d8			jsr 	FloatPrepare 				; prepare for floats
.af3a	80 0b		bra $af47			bra 	FloatAdd
.af3c					FloatingPointSub:
.af3c	20 d8 b0	jsr $b0d8			jsr 	FloatPrepare 				; prepare for floats
.af3f					FloatSubtract:
.af3f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.af42	49 80		eor #$80			eor 	#$80
.af44	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.af47					FloatAdd:
.af47	48		pha				pha
.af48	5a		phy				phy
.af49	20 e9 b0	jsr $b0e9			jsr 	NSNormalise 				; normalise S[X]
.af4c	f0 54		beq $afa2			beq 	_FAReturn1
.af4e	e8		inx				inx 								; normalise S[X+1]
.af4f	20 e9 b0	jsr $b0e9			jsr 	NSNormalise
.af52	ca		dex				dex
.af53	c9 00		cmp #$00			cmp 	#0
.af55	f0 6f		beq $afc6			beq 	_FAExit 					; if so, just return A
.af57	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.af5a	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.af5d	f0 1b		beq $af7a			beq 	_FAExponentsEqual
.af5f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.af62	a8		tay				tay
.af63	38		sec				sec 								; do a signed comparison of the exponents.
.af64	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af67	50 02		bvc $af6b			bvc 	_FANoSignedChange
.af69	49 80		eor #$80			eor 	#$80
.af6b					_FANoSignedChange:
.af6b	29 80		and #$80			and 	#$80
.af6d	10 03		bpl $af72			bpl 	_FAHaveMax
.af6f	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.af72					_FAHaveMax:
.af72	20 c9 af	jsr $afc9			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.af75	e8		inx				inx
.af76	20 c9 af	jsr $afc9			jsr 	_FAShiftToExponent
.af79	ca		dex				dex
.af7a					_FAExponentsEqual:
.af7a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.af7d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.af80	30 10		bmi $af92			bmi 	_FADifferentSigns
.af82	20 08 9b	jsr $9b08			jsr 	AddTopTwoStack 				; do the add of the mantissae
.af85	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.af88	10 3c		bpl $afc6			bpl 	_FAExit 					; if no, we are done.
.af8a	20 69 a5	jsr $a569			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.af8d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.af90	80 34		bra $afc6			bra 	_FAExit
.af92					_FADifferentSigns:
.af92	20 2e 9b	jsr $9b2e			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.af95	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.af98	10 2c		bpl $afc6			bpl 	_FAExit 					; if no, we are done.
.af9a	20 f2 a4	jsr $a4f2			jsr 	NSMNegate 					; netate result
.af9d	20 fb a4	jsr $a4fb			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.afa0	80 24		bra $afc6			bra 	_FAExit
.afa2					_FAReturn1:
.afa2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.afa5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afa8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.afab	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afae	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.afb1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afb4	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.afb7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afba	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.afbd	9d 28 04	sta $0428,x			sta 	NSExponent,x
.afc0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.afc3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.afc6					_FAExit:
.afc6	7a		ply				ply
.afc7	68		pla				pla
.afc8	60		rts				rts
.afc9					_FAShiftToExponent:
.afc9					_FAShiftToExponent2:
.afc9	98		tya				tya 								; compare Y to exponent
.afca	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.afcd	f0 08		beq $afd7			beq 	_FASEExit 					; exit if so.
.afcf	20 69 a5	jsr $a569			jsr 	NSMShiftRight	 			; shift the mantissa right
.afd2	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.afd5	80 f2		bra $afc9			bra 	_FAShiftToExponent2
.afd7					_FASEExit:
.afd7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.afd8					CompareFloat:
.afd8	20 3f af	jsr $af3f			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.afdb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.afde	29 f8		and #$f8			and 	#$F8
.afe0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.afe3	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.afe6	f0 09		beq $aff1			beq 	_FCExit 					; zero, so approximately identical
.afe8	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.afea	3c 00 04	bit $0400,x			bit 	NSStatus,x
.afed	10 02		bpl $aff1			bpl 	_FCExit
.afef					_FCNegative:
.afef	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.aff1					_FCExit:
.aff1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.aff2					FDivideCommand:
.aff2	fa		plx				plx	 								; restore stack position
.aff3	20 d8 b0	jsr $b0d8			jsr 	FloatPrepare 				; prepare for floats
.aff6					FloatDivide:
.aff6	48		pha				pha
.aff7	e8		inx				inx
.aff8	20 e9 b0	jsr $b0e9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.affb	ca		dex				dex
.affc	c9 00		cmp #$00			cmp 	#0
.affe	f0 20		beq $b020			beq 	_FDZero
.b000	20 e9 b0	jsr $b0e9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b003	f0 19		beq $b01e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b005	20 33 ae	jsr $ae33			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b008	20 c0 ad	jsr $adc0			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b00b	20 e9 b0	jsr $b0e9			jsr		NSNormalise 				; renormalise
.b00e	20 ce ae	jsr $aece			jsr 	CalculateSign 				; calculate result sign
.b011	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b014	38		sec				sec
.b015	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b018	38		sec				sec
.b019	e9 1e		sbc #$1e			sbc 	#30
.b01b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b01e					_FDExit:
.b01e	68		pla				pla
.b01f	60		rts				rts
.b020					_FDZero:
.b020	a9 03		lda #$03		lda	#3
.b022	4c 13 99	jmp $9913		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b025					FloatFractionalPart:
.b025	5a		phy				phy
.b026	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b029	29 7f		and #$7f			and 	#$7F
.b02b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b02e	20 e9 b0	jsr $b0e9			jsr 	NSNormalise
.b031	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b034	38		sec				sec
.b035	e9 e0		sbc #$e0			sbc 	#$E0
.b037	90 31		bcc $b06a			bcc 	_FFPExit 					; already fractional
.b039	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b03b	b0 2a		bcs $b067			bcs 	_FFPZero
.b03d	a8		tay				tay 								; put count to do in Y
.b03e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b041	20 6c b0	jsr $b06c			jsr 	_FFPPartial
.b044	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b047	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b04a	20 6c b0	jsr $b06c			jsr 	_FFPPartial
.b04d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b050	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b053	20 6c b0	jsr $b06c			jsr 	_FFPPartial
.b056	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b059	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b05c	20 6c b0	jsr $b06c			jsr 	_FFPPartial
.b05f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b062	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; zeroed check.
.b065	d0 03		bne $b06a			bne 	_FFPExit
.b067					_FFPZero:
.b067	20 46 a5	jsr $a546			jsr 	NSMSetZero
.b06a					_FFPExit:
.b06a	7a		ply				ply
.b06b	60		rts				rts
.b06c					_FFPPartial:
.b06c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b06e	f0 17		beq $b087			beq 	_FFFPPExit
.b070	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b072	b0 0c		bcs $b080			bcs 	_FFFPPWholeByte
.b074	5a		phy				phy
.b075					_FFFPPLeft:
.b075	0a		asl a				asl 	a
.b076	88		dey				dey
.b077	d0 fc		bne $b075			bne 	_FFFPPLeft
.b079	7a		ply				ply
.b07a					_FFFPPRight:
.b07a	4a		lsr a				lsr 	a
.b07b	88		dey				dey
.b07c	d0 fc		bne $b07a			bne 	_FFFPPRight
.b07e	80 07		bra $b087			bra 	_FFFPPExit
.b080					_FFFPPWholeByte:
.b080	98		tya				tya 								; subtract 8 from count
.b081	38		sec				sec
.b082	e9 08		sbc #$08			sbc 	#8
.b084	a8		tay				tay
.b085	a9 00		lda #$00			lda 	#0 							; and clear all
.b087					_FFFPPExit:
.b087	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b088					FloatIntegerPart:
.b088	48		pha				pha
.b089	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b08c	f0 1f		beq $b0ad			beq 	_FIPExit 					; if so do nothing
.b08e	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; is it zero ?
.b091	f0 17		beq $b0aa			beq 	_FIPZero 					; if so return zero.
.b093	20 e9 b0	jsr $b0e9			jsr 	NSNormalise 				; normalise
.b096	f0 12		beq $b0aa			beq 	_FIPZero 					; normalised to zero, exit zero
.b098					_FIPShift:
.b098	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b09b	10 08		bpl $b0a5			bpl 	_FIPCheckZero
.b09d	20 69 a5	jsr $a569			jsr 	NSMShiftRight 				; shift mantissa right
.b0a0	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b0a3	80 f3		bra $b098			bra 	_FIPShift
.b0a5					_FIPCheckZero:
.b0a5	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; avoid -0 problem
.b0a8	d0 03		bne $b0ad			bne 	_FIPExit 					; set to zero if mantissa zero.
.b0aa					_FIPZero:
.b0aa	20 46 a5	jsr $a546			jsr 	NSMSetZero
.b0ad					_FIPExit:
.b0ad	68		pla				pla
.b0ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b0af					FloatingPointMultiply:
.b0af	20 d8 b0	jsr $b0d8			jsr 	FloatPrepare 				; prepare for floats
.b0b2					FloatMultiply:
.b0b2	48		pha				pha
.b0b3	20 e9 b0	jsr $b0e9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b0b6	f0 1b		beq $b0d3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b0b8	e8		inx				inx
.b0b9	20 e9 b0	jsr $b0e9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b0bc	ca		dex				dex
.b0bd	c9 00		cmp #$00			cmp 	#0
.b0bf	f0 0f		beq $b0d0			beq 	_FDSetZero
.b0c1	20 89 ae	jsr $ae89			jsr 	MultiplyShort 				; calculate the result.
.b0c4	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b0c7	18		clc				clc
.b0c8	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b0cb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0ce	80 03		bra $b0d3			bra 	_FDExit
.b0d0					_FDSetZero:
.b0d0	20 46 a5	jsr $a546			jsr 	NSMSetZero 					; return 0
.b0d3					_FDExit:
.b0d3	20 e9 b0	jsr $b0e9			jsr 	NSNormalise 				; normalise the result
.b0d6	68		pla				pla
.b0d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b0d8					FloatPrepare:
.b0d8	20 2c 9e	jsr $9e2c			jsr 	DereferenceTopTwo 			; dereference the top two values
.b0db	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b0de	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b0e1	29 10		and #$10			and 	#NSBIsString
.b0e3	d0 01		bne $b0e6			bne 	_FDType
.b0e5	60		rts				rts
.b0e6					_FDType:
.b0e6	4c 70 b3	jmp $b370			jmp 	TypeError
.b0e9					NSNormalise:
.b0e9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b0ec	29 80		and #$80			and 	#$80
.b0ee	09 08		ora #$08			ora 	#NSTFloat
.b0f0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0f3	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; if zero exit
.b0f6	d0 09		bne $b101			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b0f8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b0fb	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b0fe	a9 00		lda #$00			lda 	#0 							; set Z flag
.b100	60		rts				rts
.b101					_NSNormaliseOptimise:
.b101	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b104	d0 22		bne $b128			bne 	_NSNormaliseLoop
.b106	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b109	30 1d		bmi $b128			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b10b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b10e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b111	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b114	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b117	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b11a	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b11d	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b120	38		sec				sec
.b121	e9 08		sbc #$08			sbc 	#8
.b123	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b126	80 d9		bra $b101			bra 	_NSNormaliseOptimise
.b128					_NSNormaliseLoop:
.b128	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b12b	70 08		bvs $b135			bvs 	_NSNExit 					; exit if so with Z flag clear
.b12d	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; shift mantissa left
.b130	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b133	80 f3		bra $b128			bra 	_NSNormaliseLoop
.b135					_NSNExit:
.b135	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b137	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d59					AssignNumber:
.9d59	5a		phy				phy
.9d5a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d5d	85 36		sta $36				sta 	zTemp0
.9d5f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d62	85 37		sta $37				sta 	zTemp0+1
.9d64	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9d67	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d69	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d6c	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d6e	c9 08		cmp #$08			cmp 	#NSTFloat
.9d70	f0 2a		beq $9d9c			beq 	_ANFloat
.9d72	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9d75	f0 05		beq $9d7c			beq		_ANNotFloat
.9d77	e8		inx				inx
.9d78	20 88 b0	jsr $b088			jsr 	FloatIntegerPart 			; make it an integer
.9d7b	ca		dex				dex
.9d7c					_ANNotFloat:
.9d7c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d7f	29 03		and #$03			and 	#3
.9d81	d0 05		bne $9d88			bne 	_ANByteWord
.9d83	20 a8 9d	jsr $9da8			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d86	80 1e		bra $9da6			bra 	_ANExit
.9d88					_ANByteWord:
.9d88	48		pha				pha 								; save count
.9d89	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9d8c	92 36		sta ($36)			sta 	(zTemp0)
.9d8e	68		pla				pla
.9d8f	c9 01		cmp #$01			cmp	 	#1
.9d91	f0 13		beq $9da6			beq 	_ANExit
.9d93	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9d96	a0 01		ldy #$01			ldy 	#1
.9d98	91 36		sta ($36),y			sta 	(zTemp0),y
.9d9a	80 0a		bra $9da6			bra 	_ANExit
.9d9c					_ANFloat:
.9d9c	20 a8 9d	jsr $9da8			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d9f	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9da2	a0 04		ldy #$04			ldy 	#4
.9da4	91 36		sta ($36),y			sta 	(zTemp0),y
.9da6					_ANExit:
.9da6	7a		ply				ply
.9da7	60		rts				rts
.9da8					_ANCopy4PackSign:
.9da8	a0 03		ldy #$03			ldy 	#3
.9daa	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9dad	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9daf	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9db2	91 36		sta ($36),y			sta 	(zTemp0),y
.9db4	88		dey				dey
.9db5	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9db8	91 36		sta ($36),y			sta 	(zTemp0),y
.9dba	88		dey				dey
.9dbb	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9dbe	91 36		sta ($36),y			sta 	(zTemp0),y
.9dc0	88		dey				dey
.9dc1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dc4	91 36		sta ($36),y			sta 	(zTemp0),y
.9dc6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9dc7					AssignString:
.9dc7	5a		phy				phy
.9dc8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dcb	85 38		sta $38				sta 	zTemp1
.9dcd	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9dd0	85 39		sta $39				sta 	zTemp1+1
.9dd2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd5	85 36		sta $36				sta 	zTemp0
.9dd7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dda	85 37		sta $37				sta 	zTemp0+1
.9ddc	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9dde	b1 36		lda ($36),y			lda 	(zTemp0),y
.9de0	f0 23		beq $9e05			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9de2	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9de3	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9de5	e9 02		sbc #$02			sbc 	#2
.9de7	85 3c		sta $3c				sta 	zsTemp
.9de9	a0 01		ldy #$01			ldy 	#1
.9deb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ded	e9 00		sbc #$00			sbc 	#0
.9def	85 3d		sta $3d				sta 	zsTemp+1
.9df1	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9df3					_ASGetLength:
.9df3	c8		iny				iny
.9df4	b1 38		lda ($38),y			lda 	(zTemp1),y
.9df6	d0 fb		bne $9df3			bne 	_ASGetLength
.9df8	98		tya				tya 								; is this length <= current length
.9df9	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9dfb	90 20		bcc $9e1d			bcc 	_ASCopyString
.9dfd	f0 1e		beq $9e1d			beq 	_ASCopyString
.9dff	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9e01	a0 01		ldy #$01			ldy 	#1
.9e03	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e05					_ASNewStringRequired:
.9e05	e8		inx				inx 								; concrete the new string.
.9e06	20 68 b6	jsr $b668			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9e09	ca		dex				dex
.9e0a	18		clc				clc
.9e0b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e0e	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e10	92 36		sta ($36)			sta 	(zTemp0)
.9e12	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e15	69 00		adc #$00			adc 	#0
.9e17	a0 01		ldy #$01			ldy 	#1
.9e19	91 36		sta ($36),y			sta 	(zTemp0),y
.9e1b	80 0d		bra $9e2a			bra 	_ASExit
.9e1d					_ASCopyString:
.9e1d	a0 00		ldy #$00			ldy 	#0
.9e1f					_ASCopyLoop:
.9e1f	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e21	c8		iny				iny
.9e22	c8		iny				iny
.9e23	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e25	88		dey				dey
.9e26	c9 00		cmp #$00			cmp 	#0
.9e28	d0 f5		bne $9e1f			bne 	_ASCopyLoop
.9e2a					_ASExit:
.9e2a	7a		ply				ply
.9e2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e2c					DereferenceTopTwo:
.9e2c	e8		inx				inx
.9e2d	20 31 9e	jsr $9e31			jsr 	Dereference 				; deref x+1
.9e30	ca		dex				dex  								; falls through to deref x
.9e31					Dereference:
.9e31	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9e34	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9e36	f0 57		beq $9e8f			beq 	_DRFExit 					; not a reference
.9e38	5a		phy				phy
.9e39	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e3c	85 36		sta $36				sta 	zTemp0
.9e3e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e41	85 37		sta $37				sta 	zTemp0+1
.9e43	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9e46	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e48	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9e4e	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e50	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e52	f0 0f		beq $9e63			beq 	_DRFDereferenceTwo
.9e54	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e56	f0 39		beq $9e91			beq 	_DRFFull
.9e58	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e5b	29 03		and #$03			and 	#3
.9e5d	f0 32		beq $9e91			beq 	_DRFFull 					; the whole word
.9e5f	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e61	f0 07		beq $9e6a			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e63					_DRFDereferenceTwo:
.9e63	a0 01		ldy #$01			ldy 	#1
.9e65	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e67	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e6a					_DRFClear23:
.9e6a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e6d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e70	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9e73	29 18		and #$18			and 	#NSBTypeMask
.9e75	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e78	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e7a	d0 12		bne $9e8e			bne 	_DRFNotString
.9e7c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9e7f	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e82	d0 0a		bne $9e8e			bne 	_DRFNotString
.9e84	a9 90		lda #$90			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e86	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9e89	a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e8b	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9e8e					_DRFNotString
.9e8e	7a		ply				ply 								; restore Y and exit
.9e8f					_DRFExit:
.9e8f	60		rts				rts
.9e90					_DRFNullString:
>9e90	00						.byte 	0
.9e91					_DRFFull:
.9e91	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e93	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e95	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e98	c8		iny				iny
.9e99	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e9b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e9e	c8		iny				iny
.9e9f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ea1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ea4	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9ea7	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9eaa	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9eac	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9eaf	f0 06		beq $9eb7			beq 	_DRFNoExponent
.9eb1	c8		iny				iny 								; if not, read the exponent as well.
.9eb2	b1 36		lda ($36),y			lda 	(zTemp0),y
.9eb4	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9eb7					_DRFNoExponent:
.9eb7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9eba	10 0d		bpl $9ec9			bpl 	_DRFExit2 					; if not, then exit.
.9ebc	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ebe	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ec1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9ec4	09 80		ora #$80			ora 	#NSBIsNegative
.9ec6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ec9					_DRFExit2:
.9ec9	7a		ply				ply
.9eca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9ecb					EncodeNumberStart:
.9ecb	38		sec				sec
.9ecc	80 01		bra $9ecf			bra 	EncodeNumberContinue+1
.9ece					EncodeNumberContinue:
.9ece	18		clc				clc
.9ecf					EncodeNumber:
.9ecf	08		php				php 								; save reset.
.9ed0	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9ed2	f0 12		beq $9ee6			beq 	_ENIsOkay
.9ed4	c9 30		cmp #$30			cmp 	#"0"
.9ed6	90 04		bcc $9edc			bcc 	_ENBadNumber
.9ed8	c9 3a		cmp #$3a			cmp 	#"9"+1
.9eda	90 0a		bcc $9ee6			bcc 	_ENIsOkay
.9edc					_ENBadNumber:
.9edc	28		plp				plp 								; throw saved reset
.9edd	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9ee0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ee2	f0 7e		beq $9f62			beq 	_ENConstructFinal
.9ee4					_ENFail:
.9ee4	18		clc				clc 								; not allowed
.9ee5	60		rts				rts
.9ee6					_ENIsOkay:
.9ee6	28		plp				plp 								; are we restarting
.9ee7	90 15		bcc $9efe			bcc 	_ENNoRestart
.9ee9					_ENStartEncode:
.9ee9	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9eeb	f0 0c		beq $9ef9			beq 	_ENFirstDP
.9eed	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9eef	20 48 a5	jsr $a548			jsr 	NSMSetByte
.9ef2	a9 01		lda #$01			lda 	#ESTA_Low
.9ef4					_ENExitChange:
.9ef4	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ef7	38		sec				sec
.9ef8	60		rts				rts
.9ef9					_ENFirstDP:
.9ef9	20 46 a5	jsr $a546			jsr 	NSMSetZero 					; clear integer part
.9efc	80 3f		bra $9f3d			bra 	_ESTASwitchFloat			; go straight to float and exi
.9efe					_ENNoRestart:
.9efe	48		pha				pha 								; save on stack.
.9eff	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9f02	c9 01		cmp #$01			cmp 	#ESTA_Low
.9f04	f0 09		beq $9f0f			beq  	_ESTALowState
.9f06	c9 02		cmp #$02			cmp 	#ESTA_High
.9f08	f0 29		beq $9f33			beq 	_ESTAHighState
.9f0a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f0c	f0 3b		beq $9f49			beq 	_ESTADecimalState
>9f0e	db						.byte 	$DB 						; causes a break in the emulator
.9f0f					_ESTALowState:
.9f0f	68		pla				pla 								; get value back
.9f10	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9f12	f0 29		beq $9f3d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f14	29 0f		and #$0f			and 	#15 						; make digit
.9f16	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9f19	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9f1c	0a		asl a				asl 	a
.9f1d	0a		asl a				asl 	a
.9f1e	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f21	0a		asl a				asl 	a
.9f22	6d 86 04	adc $0486			adc 	DigitTemp
.9f25	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f28	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f2a	90 05		bcc $9f31			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f2c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f2e	8d 85 04	sta $0485			sta 	EncodeState
.9f31					_ESTANoSwitch:
.9f31	38		sec				sec
.9f32	60		rts				rts
.9f33					_ESTAHighState:
.9f33	68		pla				pla 								; get value back
.9f34	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f36	f0 05		beq $9f3d			beq 	_ESTASwitchFloat
.9f38	20 9c 9f	jsr $9f9c			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f3b	38		sec				sec
.9f3c	60		rts				rts
.9f3d					_ESTASwitchFloat:
.9f3d	9c 87 04	stz $0487			stz 	DecimalCount
.9f40	e8		inx				inx 								; zero the decimal additive.
.9f41	20 46 a5	jsr $a546			jsr 	NSMSetZero
.9f44	ca		dex				dex
.9f45	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f47	80 ab		bra $9ef4			bra 	_ENExitChange
.9f49					_ESTADecimalState:
.9f49	68		pla				pla 								; digit.
.9f4a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f4c	f0 96		beq $9ee4			beq 	_ENFail
.9f4e	e8		inx				inx 								; put digit into fractional part of X+1
.9f4f	20 9c 9f	jsr $9f9c			jsr 	ESTAShiftDigitIntoMantissa
.9f52	ca		dex				dex
.9f53	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9f56	ad 87 04	lda $0487			lda 	DecimalCount
.9f59	c9 0b		cmp #$0b			cmp 	#11
.9f5b	f0 02		beq $9f5f			beq 	_ESTADSFail
.9f5d	38		sec				sec
.9f5e	60		rts				rts
.9f5f					_ESTADSFail:
.9f5f	4c 6b b3	jmp $b36b			jmp 	RangeError
.9f62					_ENConstructFinal:
.9f62	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9f65	f0 33		beq $9f9a			beq 	_ENCFExit 					; no decimals
.9f67	5a		phy				phy
.9f68	0a		asl a				asl 	a 							; x 4 and CLC
.9f69	0a		asl a				asl 	a
.9f6a	6d 87 04	adc $0487			adc 	DecimalCount
.9f6d	a8		tay				tay
.9f6e	b9 2a b3	lda $b32a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f71	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f74	b9 2b b3	lda $b32b,y			lda 	DecimalScalarTable-5+1,y
.9f77	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f7a	b9 2c b3	lda $b32c,y			lda 	DecimalScalarTable-5+2,y
.9f7d	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f80	b9 2d b3	lda $b32d,y			lda 	DecimalScalarTable-5+3,y
.9f83	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f86	b9 2e b3	lda $b32e,y			lda 	DecimalScalarTable-5+4,y
.9f89	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f8c	a9 08		lda #$08			lda 	#NSTFloat
.9f8e	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f91	7a		ply				ply
.9f92	e8		inx				inx 								; multiply decimal const by decimal scalar
.9f93	20 b2 b0	jsr $b0b2			jsr 	FloatMultiply
.9f96	ca		dex				dex
.9f97	20 47 af	jsr $af47			jsr 	FloatAdd 					; add to integer part.
.9f9a					_ENCFExit:
.9f9a	18		clc				clc 								; reject the digit.
.9f9b	60		rts				rts
.9f9c					ESTAShiftDigitIntoMantissa:
.9f9c	29 0f		and #$0f			and 	#15 						; save digit
.9f9e	48		pha				pha
.9f9f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9fa2	48		pha				pha
.9fa3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9fa6	48		pha				pha
.9fa7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9faa	48		pha				pha
.9fab	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fae	48		pha				pha
.9faf	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; x 2
.9fb2	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; x 4
.9fb5	18		clc				clc 								; pop mantissa and add
.9fb6	68		pla				pla
.9fb7	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fbd	68		pla				pla
.9fbe	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9fc1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fc4	68		pla				pla
.9fc5	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9fc8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fcb	68		pla				pla
.9fcc	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9fcf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9fd2	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; x 10
.9fd5	68		pla				pla 								; add digit
.9fd6	18		clc				clc
.9fd7	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fda	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fdd	90 0d		bcc $9fec			bcc 	_ESTASDExit
.9fdf	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9fe2	d0 08		bne $9fec			bne 	_ESTASDExit
.9fe4	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9fe7	d0 03		bne $9fec			bne 	_ESTASDExit
.9fe9	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9fec					_ESTASDExit:
.9fec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fed					EvaluateTerm:
.9fed	b1 30		lda ($30),y			lda 	(codePtr),y
.9fef	30 18		bmi $a009			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9ff1	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9ff3	b0 6f		bcs $a064			bcs 	_ETVariable
.9ff5	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9ff7	90 6e		bcc $a067			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9ff9	c9 3a		cmp #$3a			cmp 	#'9'+1
.9ffb	b0 6a		bcs $a067			bcs 	_ETPuncUnary
.9ffd	20 cb 9e	jsr $9ecb			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a000					_ETNumber:
.a000	c8		iny				iny 								; keep encoding until we have the numbers
.a001	b1 30		lda ($30),y			lda 	(codePtr),y
.a003	20 ce 9e	jsr $9ece			jsr 	EncodeNumberContinue
.a006	b0 f8		bcs $a000			bcs 	_ETNumber 					; go back if accepted.
.a008	60		rts				rts
.a009					_ETCheckUnary:
.a009	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a00b	f0 41		beq $a04e			beq 	_ETString
.a00d	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a00f	f0 12		beq $a023			beq 	_ETHexConstant
.a011	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a013	90 0b		bcc $a020			bcc 	_ETSyntaxError
.a015	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a017	b0 07		bcs $a020			bcs 	_ETSyntaxError
.a019	da		phx				phx 								; push X on the stack
.a01a	0a		asl a				asl 	a 							; put vector x 2 into X
.a01b	aa		tax				tax
.a01c	c8		iny				iny 								; consume unary function token
.a01d	7c 88 95	jmp ($9588,x)			jmp 	(VectorSet0,x) 				; and do it.
.a020					_ETSyntaxError:
.a020	4c 66 b3	jmp $b366			jmp 	SyntaxError
.a023					_ETHexConstant:
.a023	c8		iny				iny 								; skip #
.a024	c8		iny				iny 								; skip count
.a025	20 46 a5	jsr $a546			jsr 	NSMSetZero 					; clear result
.a028					_ETHLoop:
.a028	b1 30		lda ($30),y			lda 	(codePtr),y
.a02a	c8		iny				iny 								; and consume
.a02b	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a02d	f0 1e		beq $a04d			beq 	_ETHExit
.a02f	48		pha				pha 								; save on stack.
.a030	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; x 2
.a033	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; x 4
.a036	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; x 8
.a039	20 5b a5	jsr $a55b			jsr 	NSMShiftLeft 				; x 16
.a03c	68		pla				pla 								; ASCII
.a03d	c9 41		cmp #$41			cmp 	#'A'
.a03f	90 02		bcc $a043			bcc 	_ETHNotChar
.a041	e9 07		sbc #$07			sbc 	#7
.a043					_ETHNotChar:
.a043	29 0f		and #$0f			and 	#15 						; digit now
.a045	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a048	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a04b	80 db		bra $a028			bra 	_ETHLoop 					; go round.
.a04d					_ETHExit:
.a04d	60		rts				rts
.a04e					_ETString:
.a04e	c8		iny				iny 								; look at length
.a04f	b1 30		lda ($30),y			lda 	(codePtr),y
.a051	48		pha				pha
.a052	c8		iny				iny 								; first character
.a053	20 90 a5	jsr $a590			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a056	68		pla				pla 								; restore count and save
.a057	85 36		sta $36				sta 	zTemp0
.a059	98		tya				tya 								; add length to Y to skip it.
.a05a	18		clc				clc
.a05b	65 36		adc $36				adc 	zTemp0
.a05d	a8		tay				tay
.a05e	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a060	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a063	60		rts				rts
.a064					_ETVariable:
.a064	4c be a0	jmp $a0be			jmp 	VariableHandler
.a067					_ETPuncUnary:
.a067	c8		iny				iny 								; consume the unary character
.a068	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a06a	f0 2d		beq $a099			beq 	_ETUnaryNegate
.a06c	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a06e	f0 39		beq $a0a9			beq 	_ETDereference
.a070	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a072	f0 43		beq $a0b7			beq 	_ETParenthesis
.a074	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a076	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a078	f0 06		beq $a080			beq 	_ETIndirection
.a07a	e6 36		inc $36				inc 	zTemp0
.a07c	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a07e	d0 a0		bne $a020			bne 	_ETSyntaxError
.a080					_ETIndirection:
.a080	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a082	1a		inc a				inc 	a
.a083	48		pha				pha
.a084	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm				; evaluate the term
.a087	20 31 9e	jsr $9e31			jsr 	Dereference 				; dereference it.
.a08a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a08d	d0 07		bne $a096			bne 	_ETTypeMismatch
.a08f	68		pla				pla 								; indirection 1-2
.a090	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a092	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a095	60		rts				rts
.a096					_ETTypeMismatch:
.a096	4c 70 b3	jmp $b370			jmp 	TypeError
.a099					_ETUnaryNegate:
.a099	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm				; evaluate the term
.a09c	20 31 9e	jsr $9e31			jsr 	Dereference 				; dereference it.
.a09f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a0a2	29 10		and #$10			and 	#NSTString
.a0a4	d0 f0		bne $a096			bne 	_ETTypeMismatch
.a0a6	4c f2 a4	jmp $a4f2			jmp 	NSMNegate  					; just toggles the sign bit.
.a0a9					_ETDereference:
.a0a9	20 ed 9f	jsr $9fed			jsr 	EvaluateTerm				; evaluate the term
.a0ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a0af	29 20		and #$20			and 	#NSBIsReference
.a0b1	f0 e3		beq $a096			beq 	_ETTypeMismatch
.a0b3	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a0b6	60		rts				rts
.a0b7					_ETParenthesis:
.a0b7	20 1c 9d	jsr $9d1c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a0ba	20 80 ad	jsr $ad80			jsr 	CheckRightBracket 			; check for )
.a0bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a0be					VariableHandler:
.a0be	b1 30		lda ($30),y			lda 	(codePtr),y
.a0c0	18		clc				clc
.a0c1	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a0c3	85 37		sta $37				sta 	zTemp0+1
.a0c5	c8		iny				iny
.a0c6	b1 30		lda ($30),y			lda 	(codePtr),y
.a0c8	85 36		sta $36				sta 	zTemp0
.a0ca	c8		iny				iny
.a0cb	18		clc				clc									; copy variable address+3 to mantissa
.a0cc	69 03		adc #$03			adc 	#3
.a0ce	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0d1	a5 37		lda $37				lda 	zTemp0+1
.a0d3	69 00		adc #$00			adc 	#0
.a0d5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0d8	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0db	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0de	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a0e1	5a		phy				phy
.a0e2	a0 02		ldy #$02			ldy 	#2 							; read type
.a0e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0e6	7a		ply				ply
.a0e7	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0e9	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0eb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0ee	29 04		and #$04			and 	#NSBIsArray
.a0f0	d0 01		bne $a0f3			bne 	_VHArray
.a0f2	60		rts				rts
.a0f3					_VHArray:
.a0f3	e8		inx				inx
.a0f4	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0f7	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0f9	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a0fc	b1 30		lda ($30),y			lda 	(codePtr),y
.a0fe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a100	d0 06		bne $a108			bne 	_VHNoSecondIndex
.a102	c8		iny				iny 								; skip the comma
.a103	e8		inx				inx
.a104	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a107	ca		dex				dex
.a108					_VHNoSecondIndex:
.a108	ca		dex				dex 								; set X back.
.a109	20 80 ad	jsr $ad80			jsr 	CheckRightBracket 			; and check the right bracket.
.a10c	5a		phy				phy 								; save position
.a10d	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a10f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a111	f0 6b		beq $a17e			beq 	_VHBadIndex
.a113	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a116	85 3e		sta $3e				sta 	zaTemp
.a118	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a11b	85 3f		sta $3f				sta 	zaTemp+1
.a11d	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a11f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a121	f0 02		beq $a125			beq 	_VHHas2Mask
.a123	a9 ff		lda #$ff			lda 	#$FF
.a125					_VHHas2Mask:
.a125	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a128	f0 54		beq $a17e			beq 	_VHBadIndex
.a12a	0a		asl a				asl 	a 							; carry will be set if a second index
.a12b	90 09		bcc $a136			bcc 	_VHCheckFirstIndex
.a12d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a12f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a131	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a134	90 48		bcc $a17e			bcc 	_VHBadIndex
.a136					_VHCheckFirstIndex:
.a136	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a138	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a13a	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a13d	90 3f		bcc $a17e			bcc 	_VHBadIndex
.a13f	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a141	64 37		stz $37				stz 	zTemp0+1
.a143	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a146	30 0f		bmi $a157			bmi 	_VHNoMultiply
.a148	da		phx				phx
.a149	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a14c	48		pha				pha
.a14d	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a14f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a151	1a		inc a				inc 	a 							; add 1 for zero base
.a152	fa		plx				plx
.a153	20 02 b2	jsr $b202			jsr 	Multiply8x8 				; calculate -> Z0
.a156	fa		plx				plx
.a157					_VHNoMultiply:
.a157	18		clc				clc
.a158	a5 36		lda $36				lda 	zTemp0
.a15a	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a15d	85 36		sta $36				sta 	zTemp0
.a15f	a5 37		lda $37				lda 	zTemp0+1
.a161	69 00		adc #$00			adc 	#0
.a163	85 37		sta $37				sta 	zTemp0+1
.a165	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a168	20 e8 8c	jsr $8ce8			jsr 	ScaleByBaseType
.a16b	18		clc				clc
.a16c	b2 3e		lda ($3e)			lda 	(zaTemp)
.a16e	65 36		adc $36				adc 	zTemp0
.a170	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a173	a0 01		ldy #$01			ldy 	#1
.a175	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a177	65 37		adc $37				adc 	zTemp0+1
.a179	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a17c	7a		ply				ply 								; restore position
.a17d	60		rts				rts
.a17e					_VHBadIndex:
.a17e	a9 17		lda #$17		lda	#23
.a180	4c 13 99	jmp $9913		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b138					AbsUnary:
.b138	fa		plx				plx 								; restore stack pos
.b139	20 86 a4	jsr $a486			jsr 	EvaluateNumber 				; get a float or int
.b13c	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.b13f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b142	29 7f		and #$7f			and 	#$7F
.b144	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b147	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a183					AllocUnary:
.a183	fa		plx				plx 								; restore stack pos
.a184	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger		; get bytes required.
.a187	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.a18a	da		phx				phx 								; save X/Y
.a18b	5a		phy				phy
.a18c	8a		txa				txa 								; copy X into Y
.a18d	a8		tay				tay
.a18e	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a191	aa		tax				tax
.a192	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a195	20 a2 a1	jsr $a1a2			jsr 	AllocateXABytes 			; allocate memory
.a198	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a19b	8a		txa				txa
.a19c	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a19f	7a		ply				ply
.a1a0	fa		plx				plx
.a1a1	60		rts				rts
.a1a2					AllocateXABytes:
.a1a2	5a		phy				phy
.a1a3	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a1a6	84 36		sty $36				sty 	zTemp0
.a1a8	5a		phy				phy
.a1a9	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a1ac	84 37		sty $37				sty 	zTemp0+1
.a1ae	5a		phy				phy
.a1af	18		clc				clc 								; add to low memory pointer
.a1b0	6d 8c 04	adc $048c			adc 	lowMemPtr
.a1b3	8d 8c 04	sta $048c			sta 	lowMemPtr
.a1b6	8a		txa				txa
.a1b7	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a1ba	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a1bd	b0 2f		bcs $a1ee			bcs 	CISSMemory
.a1bf	20 e0 a1	jsr $a1e0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a1c2					_ClearMemory:
.a1c2	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a1c5	c5 36		cmp $36				cmp 	zTemp0
.a1c7	d0 07		bne $a1d0			bne 	_CMClearNext
.a1c9	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a1cc	c5 37		cmp $37				cmp 	zTemp0+1
.a1ce	f0 0c		beq $a1dc			beq 	_CMExit
.a1d0					_CMClearNext:
.a1d0	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a1d2	92 36		sta ($36)			sta 	(zTemp0)
.a1d4	e6 36		inc $36				inc 	zTemp0
.a1d6	d0 ea		bne $a1c2			bne 	_ClearMemory
.a1d8	e6 37		inc $37				inc		zTemp0+1
.a1da	80 e6		bra $a1c2			bra 	_ClearMemory
.a1dc					_CMExit:
.a1dc	fa		plx				plx
.a1dd	68		pla				pla
.a1de	7a		ply				ply
.a1df	60		rts				rts
.a1e0					CheckIdentifierStringSpace:
.a1e0	48		pha				pha
.a1e1	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a1e4	18		clc				clc
.a1e5	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1e7	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a1ea	b0 02		bcs $a1ee			bcs 	CISSMemory
.a1ec	68		pla				pla
.a1ed	60		rts				rts
.a1ee					CISSMemory:
.a1ee	a9 06		lda #$06		lda	#6
.a1f0	4c 13 99	jmp $9913		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b148					AscUnary:
.b148	fa		plx				plx 								; restore stack pos
.b149	20 91 a4	jsr $a491			jsr 	EvaluateString 				; get a string
.b14c	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b14e	20 48 a5	jsr $a548			jsr 	NSMSetByte
.b151	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.b154	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b155					FracUnary:
.b155	fa		plx				plx 								; restore stack pos
.b156	20 86 a4	jsr $a486			jsr 	EvaluateNumber 				; get a float or int
.b159	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.b15c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b15f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b161	f0 04		beq $b167			beq 	_IUZero
.b163	20 25 b0	jsr $b025			jsr 	FloatFractionalPart
.b166	60		rts				rts
.b167					_IUZero:
.b167	20 46 a5	jsr $a546			jsr 	NSMSetZero
.b16a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b16b					IntUnary:
.b16b	fa		plx				plx 								; restore stack pos
.b16c	20 86 a4	jsr $a486			jsr 	EvaluateNumber 				; get a float or int
.b16f	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.b172	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b175	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b177	f0 03		beq $b17c			beq 	_IUExit
.b179	20 88 b0	jsr $b088			jsr 	FloatIntegerPart
.b17c					_IUExit:
.b17c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b17d					LenUnary:
.b17d	fa		plx				plx 								; restore stack pos
.b17e	20 91 a4	jsr $a491			jsr 	EvaluateString 				; get a string
.b181	5a		phy				phy
.b182	a0 00		ldy #$00			ldy 	#0 							; find length
.b184					_LenFind:
.b184	b1 36		lda ($36),y			lda 	(zTemp0),y
.b186	f0 06		beq $b18e			beq 	_LenExit
.b188	c8		iny				iny
.b189	d0 f9		bne $b184			bne 	_LenFind
.b18b	4c 6b b3	jmp $b36b			jmp 	RangeError 					; string > 255
.b18e					_LenExit:
.b18e	98		tya				tya
.b18f	20 48 a5	jsr $a548			jsr 	NSMSetByte
.b192	7a		ply				ply
.b193	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.b196	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a1f3					Unary_Min:
.a1f3	a9 01		lda #$01			lda 	#1
.a1f5	80 02		bra $a1f9			bra 	UnaryMinMaxMain
.a1f7					Unary_Max:
.a1f7	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a1f9					UnaryMinMaxMain:
.a1f9	fa		plx				plx 								; get index on number stack
.a1fa	48		pha				pha 								; save comparator
.a1fb	20 7d a4	jsr $a47d			jsr 	EvaluateValue 				; get the first value.
.a1fe					_UMMMLoop:
.a1fe	b1 30		lda ($30),y			lda 	(codePtr),y
.a200	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a202	f0 22		beq $a226			beq 	_UMMMDone
.a204	20 88 ad	jsr $ad88			jsr 	CheckComma 					; must be a comma
.a207	e8		inx				inx
.a208	20 7d a4	jsr $a47d			jsr 	EvaluateValue
.a20b	ca		dex				dex
.a20c	20 1d a5	jsr $a51d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a20f	e8		inx				inx
.a210	20 1d a5	jsr $a51d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a213	e8		inx				inx
.a214	20 cb 99	jsr $99cb			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a217	ca		dex				dex
.a218	ca		dex				dex
.a219	85 36		sta $36				sta 	zTemp0 						; save required result
.a21b	68		pla				pla 								; get and save comparator
.a21c	48		pha				pha
.a21d	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a21f	d0 dd		bne $a1fe			bne 	_UMMMLoop
.a221	20 29 a2	jsr $a229			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a224	80 d8		bra $a1fe			bra 	_UMMMLoop
.a226					_UMMMDone:
.a226	68		pla				pla 								; throw the comparator
.a227	c8		iny				iny 								; skip )
.a228	60		rts				rts
.a229					ExpCopyAboveDown:
.a229	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a22c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a22f	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a232	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a235	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a238	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a23b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a23e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a241	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a244	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a247	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a24a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a24d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a24e					Unary_Not:
.a24e	fa		plx				plx
.a24f	20 a9 a4	jsr $a4a9			jsr 	EvaluateInteger 			; get integer
.a252	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.a255	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; zero mantissa ?
.a258	f0 04		beq $a25e			beq 	_NotZero
.a25a	20 46 a5	jsr $a546			jsr 	NSMSetZero
.a25d	60		rts				rts
.a25e					_NotZero:
.a25e	4c 80 99	jmp $9980			jmp 	ReturnTrue
.a261					_UNBad:
.a261	4c 75 b3	jmp $b375			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a264					Unary_Random:
.a264	fa		plx				plx
.a265	20 e3 a2	jsr $a2e3			jsr 	Random32Bit 				; get a random number
.a268	20 c8 a2	jsr $a2c8			jsr 	URCopyToMantissa  			; put in mantissa
.a26b	b1 30		lda ($30),y			lda 	(codePtr),y
.a26d	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a26f	f0 08		beq $a279			beq 	_URNoModulus
.a271	e8		inx				inx
.a272	20 be a4	jsr $a4be			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a275	ca		dex				dex
.a276	20 04 ae	jsr $ae04			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a279					_URNoModulus:
.a279	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a27c	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a27f	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.a282	60		rts				rts
.a283					Unary_Rnd:
.a283	fa		plx				plx
.a284	20 86 a4	jsr $a486			jsr 	EvaluateNumber 				; number to use.
.a287	20 80 ad	jsr $ad80			jsr 	CheckRightBracket 			; closing bracket
.a28a	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a28d	f0 2b		beq $a2ba			beq 	_URCopySeed
.a28f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a292	10 23		bpl $a2b7			bpl 	_URDontSeed
.a294	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a297	49 17		eor #$17			eor 	#$17
.a299	8d 88 04	sta $0488			sta 	RandomSeed+0
.a29c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a29f	49 a5		eor #$a5			eor 	#$A5
.a2a1	8d 89 04	sta $0489			sta 	RandomSeed+1
.a2a4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a2a7	49 c2		eor #$c2			eor 	#$C2
.a2a9	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a2ac	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a2af	49 9d		eor #$9d			eor 	#$9D
.a2b1	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a2b4	20 e3 a2	jsr $a2e3			jsr 	Random32Bit
.a2b7					_URDontSeed:
.a2b7	20 e3 a2	jsr $a2e3			jsr 	Random32Bit 				; generate a number.
.a2ba					_URCopySeed:
.a2ba	20 c8 a2	jsr $a2c8			jsr 	URCopyToMantissa 			; copy into mantissa
.a2bd	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a2bf	8d 28 04	sta $0428			sta 	NSExponent
.a2c2	a9 08		lda #$08			lda 	#NSTFloat
.a2c4	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a2c7	60		rts				rts
.a2c8					URCopyToMantissa:
.a2c8	ad 88 04	lda $0488			lda 	RandomSeed+0
.a2cb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2ce	ad 89 04	lda $0489			lda 	RandomSeed+1
.a2d1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2d4	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a2d7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a2da	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a2dd	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a2df	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a2e2	60		rts				rts
.a2e3					Random32Bit:
.a2e3	5a		phy				phy
.a2e4	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a2e6	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a2e9	d0 03		bne $a2ee			bne 	_Random1
.a2eb	a8		tay				tay 								; if so do it 256 times
.a2ec	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a2ee					_Random1:
.a2ee	0a		asl a				asl 	a 							; LSFR RNG
.a2ef	2e 89 04	rol $0489			rol 	RandomSeed+1
.a2f2	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a2f5	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a2f8	90 02		bcc $a2fc			bcc 	_Random2
.a2fa	49 c5		eor #$c5			eor 	#$C5
.a2fc					_Random2:
.a2fc	88		dey				dey
.a2fd	d0 ef		bne $a2ee			bne 	_Random1
.a2ff	8d 88 04	sta $0488			sta 	RandomSeed+0
.a302	7a		ply				ply
.a303	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b197					SgnUnary:
.b197	fa		plx				plx 								; restore stack pos
.b198	20 86 a4	jsr $a486			jsr 	EvaluateNumber 				; get a float or int
.b19b	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.b19e	20 76 a5	jsr $a576			jsr 	NSMIsZero 					; if zero
.b1a1	f0 10		beq $b1b3			beq 	_SGZero  					; return Int Zero
.b1a3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b1a6	48		pha				pha
.b1a7	a9 01		lda #$01			lda 	#1 							; set to 1
.b1a9	20 48 a5	jsr $a548			jsr 	NSMSetByte
.b1ac	68		pla				pla
.b1ad	29 80		and #$80			and		#$80 						; copy the sign byte out
.b1af	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1b2	60		rts				rts
.b1b3	20 46 a5	jsr $a546	_SGZero:jsr 	NSMSetZero
.b1b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b1b7					ValUnary:
.b1b7	fa		plx				plx 								; restore stack pos
.b1b8	20 cd b1	jsr $b1cd			jsr 	ValMainCode 				; do the main val() code
.b1bb	b0 01		bcs $b1be			bcs 	_VUError 					; couldn't convert
.b1bd	60		rts				rts
.b1be					_VUError:
.b1be	4c 70 b3	jmp $b370			jmp 	TypeError
.b1c1					IsValUnary:
.b1c1	fa		plx				plx 								; restore stack pos
.b1c2	20 cd b1	jsr $b1cd			jsr 	ValMainCode 				; do the main val() code
.b1c5	b0 03		bcs $b1ca			bcs 	_VUBad
.b1c7	4c 80 99	jmp $9980			jmp 	ReturnTrue
.b1ca					_VUBad:
.b1ca	4c 8c 99	jmp $998c			jmp 	ReturnFalse
.b1cd					ValMainCode:
.b1cd	20 91 a4	jsr $a491			jsr 	EvaluateString 				; get a string
.b1d0	20 80 ad	jsr $ad80			jsr 	CheckRightBracket 			; check right bracket present
.b1d3	5a		phy				phy
.b1d4	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b1d6	f0 17		beq $b1ef			beq 	_VMCFail2
.b1d8	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b1da	48		pha				pha 								; save first character
.b1db	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b1dd	d0 01		bne $b1e0			bne 	_VMCStart
.b1df	c8		iny				iny 								; skip over -
.b1e0					_VMCStart:
.b1e0	38		sec				sec 								; initialise first time round.
.b1e1					_VMCNext:
.b1e1	c8		iny				iny 								; pre-increment
.b1e2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b1e4	f0 0c		beq $b1f2			beq 	_VMCSuccess 				; successful.
.b1e6	20 cf 9e	jsr $9ecf			jsr 	EncodeNumber 				; send it to the number-builder
.b1e9	90 03		bcc $b1ee			bcc 	_VMCFail 					; if failed, give up.
.b1eb	18		clc				clc 								; next time round, countinue
.b1ec	80 f3		bra $b1e1			bra 	_VMCNext
.b1ee					_VMCFail:
.b1ee	68		pla				pla
.b1ef					_VMCFail2:
.b1ef	7a		ply				ply
.b1f0	38		sec				sec
.b1f1	60		rts				rts
.b1f2					_VMCSuccess:
.b1f2	a9 00		lda #$00			lda 	#0 							; construct final
.b1f4	20 cf 9e	jsr $9ecf			jsr 	EncodeNumber
.b1f7	68		pla				pla
.b1f8	c9 2d		cmp #$2d			cmp 	#"-"
.b1fa	d0 03		bne $b1ff			bne 	_VMCNotNegative
.b1fc	20 f2 a4	jsr $a4f2			jsr		NSMNegate
.b1ff					_VMCNotNegative:
.b1ff	7a		ply				ply
.b200	18		clc				clc
.b201	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a304					ChrUnary:
.a304	fa		plx				plx 								; restore stack pos
.a305	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger			; get value
.a308	48		pha				pha
.a309	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.a30c	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a30e	20 e9 b6	jsr $b6e9			jsr 	StringTempAllocate
.a311	68		pla				pla 								; write number to it
.a312	20 27 b7	jsr $b727			jsr 	StringTempWrite
.a315	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a316					SpcUnary:
.a316	fa		plx				plx 								; restore stack pos
.a317	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger			; get value
.a31a	5a		phy				phy
.a31b	48		pha				pha 								; save count
.a31c	20 e9 b6	jsr $b6e9			jsr 	StringTempAllocate
.a31f	7a		ply				ply 								; to do count in Y
.a320					_SpcLoop:
.a320	c0 00		cpy #$00			cpy 	#0
.a322	f0 08		beq $a32c			beq 	_SpcExit
.a324	a9 20		lda #$20			lda 	#32
.a326	20 27 b7	jsr $b727			jsr 	StringTempWrite
.a329	88		dey				dey
.a32a	80 f4		bra $a320			bra 	_SPCLoop
.a32c					_SpcExit:
.a32c	7a		ply				ply
.a32d	20 80 ad	jsr $ad80			jsr 	CheckRightBracket
.a330	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a331					Unary_Str:
.a331	fa		plx				plx
.a332	20 86 a4	jsr $a486			jsr 	EvaluateNumber  			; get number
.a335	20 80 ad	jsr $ad80			jsr 	CheckRightBracket 			; closing bracket
.a338	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a33a	20 53 a3	jsr $a353			jsr 	ConvertNumberToString 		; do the conversion.
.a33d	a9 21		lda #$21			lda		#33 						; create buffer
.a33f	20 e9 b6	jsr $b6e9			jsr 	StringTempAllocate 			; allocate memory
.a342	da		phx				phx
.a343	a2 00		ldx #$00			ldx 	#0
.a345					_USCopy:
.a345	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a348	20 27 b7	jsr $b727			jsr 	StringTempWrite
.a34b	e8		inx				inx
.a34c	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a34f	d0 f4		bne $a345			bne 	_USCopy
.a351	fa		plx				plx
.a352	60		rts				rts
.a353					ConvertNumberToString:
.a353	5a		phy				phy 								; save code position
.a354	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a357	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a35a	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a35d	10 0a		bpl $a369			bpl 	_CNTSNotNegative
.a35f	29 7f		and #$7f			and 	#$7F 						; make +ve
.a361	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a364	a9 2d		lda #$2d			lda 	#"-"
.a366	20 cf a3	jsr $a3cf			jsr 	WriteDecimalBuffer
.a369					_CNTSNotNegative:
.a369	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a36c	f0 15		beq $a383			beq 	_CNTSNotFloat
.a36e	e8		inx				inx 								; round up
.a36f	a9 01		lda #$01			lda 	#1
.a371	20 48 a5	jsr $a548			jsr 	NSMSetByte
.a374	ca		dex				dex
.a375	bd 28 04	lda $0428,x			lda		NSExponent,x
.a378	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a37b	a9 08		lda #$08			lda 	#NSTFloat
.a37d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a380	20 47 af	jsr $af47			jsr 	FloatAdd
.a383					_CNTSNotFloat:
.a383	20 b1 a3	jsr $a3b1			jsr 	MakePlusTwoString
.a386	20 25 b0	jsr $b025			jsr 	FloatFractionalPart 		; get the fractional part
.a389	20 e9 b0	jsr $b0e9			jsr 	NSNormalise					; normalise , exit if zero
.a38c	f0 21		beq $a3af			beq 	_CNTSExit
.a38e	a9 2e		lda #$2e			lda 	#"."
.a390	20 cf a3	jsr $a3cf			jsr 	WriteDecimalBuffer 			; write decimal place
.a393					_CNTSDecimal:
.a393	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a396	30 17		bmi $a3af			bmi 	_CNTSExit
.a398	e8		inx				inx 								; x 10.0
.a399	a9 0a		lda #$0a			lda 	#10
.a39b	20 48 a5	jsr $a548			jsr 	NSMSetByte
.a39e	a9 08		lda #$08			lda 	#NSTFloat
.a3a0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3a3	ca		dex				dex
.a3a4	20 b2 b0	jsr $b0b2			jsr 	FloatMultiply
.a3a7	20 b1 a3	jsr $a3b1			jsr 	MakePlusTwoString
.a3aa	20 25 b0	jsr $b025			jsr 	FloatFractionalPart 		; get the fractional part
.a3ad	80 e4		bra $a393			bra 	_CNTSDecimal 				; keep going.
.a3af					_CNTSExit:
.a3af	7a		ply				ply
.a3b0	60		rts				rts
.a3b1					MakePlusTwoString:
.a3b1	da		phx				phx
.a3b2	20 1d a5	jsr $a51d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a3b5	e8		inx				inx 								; access it
.a3b6	e8		inx				inx
.a3b7	20 88 b0	jsr $b088			jsr 	FloatIntegerPart 			; make it an integer
.a3ba	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a3bc	20 f1 ae	jsr $aef1			jsr 	ConvertInt32
.a3bf	a2 00		ldx #$00			ldx	 	#0
.a3c1					_MPTSCopy:
.a3c1	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a3c4	20 cf a3	jsr $a3cf			jsr 	WriteDecimalBuffer
.a3c7	e8		inx				inx
.a3c8	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a3cb	d0 f4		bne $a3c1			bne 	_MPTSCopy
.a3cd	fa		plx				plx
.a3ce	60		rts				rts
.a3cf					WriteDecimalBuffer:
.a3cf	da		phx				phx
.a3d0	ae 95 04	ldx $0495			ldx 	dbOffset
.a3d3	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a3d6	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a3d9	ee 95 04	inc $0495			inc 	dbOffset
.a3dc	fa		plx				plx
.a3dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a3de					Unary_Left:
.a3de	fa		plx				plx
.a3df	18		clc				clc 								; only one parameter
.a3e0	20 55 a4	jsr $a455			jsr 	SubstringInitial 			; set up.
.a3e3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a3e6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a3e9	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a3ec	80 2c		bra $a41a			bra 	SubstringMain
.a3ee					Unary_Right:
.a3ee	fa		plx				plx
.a3ef	18		clc				clc 								; only one parameter
.a3f0	20 55 a4	jsr $a455			jsr 	SubstringInitial 			; set up.
.a3f3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a3f6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a3f9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a3fc	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a3ff	b0 02		bcs $a403			bcs 	_URNotUnderflow
.a401	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a403					_URNotUnderFlow:
.a403	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a406	80 12		bra $a41a			bra 	SubStringMain
.a408					Unary_Mid:
.a408	fa		plx				plx
.a409	38		sec				sec 								; two parameters
.a40a	20 55 a4	jsr $a455			jsr 	SubstringInitial 			; set up.
.a40d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a410	f0 05		beq $a417			beq 	_UMError
.a412	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a415	80 03		bra $a41a			bra 	SubStringMain
.a417					_UMError:
.a417	4c 75 b3	jmp $b375			jmp 	ArgumentError
.a41a					SubStringMain:
.a41a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a41d	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a420	b0 2d		bcs $a44f			bcs 	_SSMNull 					; if so, return an empty string.
.a422	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a425	f0 28		beq $a44f			beq 	_SSMNull 					; return empty string.
.a427	18		clc				clc 								; add the offset +1 to the address and
.a428	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a42b	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a42e	85 36		sta $36				sta 	zTemp0
.a430	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a433	69 00		adc #$00			adc 	#0
.a435	85 37		sta $37				sta 	zTemp0+1
.a437					_SSMNoCarry:
.a437	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a43a	20 e9 b6	jsr $b6e9			jsr 	StringTempAllocate 			; allocate that many characters
.a43d	5a		phy				phy 								; save Y
.a43e	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a440					_SSMCopy:
.a440	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a442	f0 09		beq $a44d			beq 	_SSMEString 				; no more to copy
.a444	20 27 b7	jsr $b727			jsr 	StringTempWrite 			; and write it out.
.a447	c8		iny				iny
.a448	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a44b	d0 f3		bne $a440			bne 	_SSMCopy
.a44d					_SSMEString:
.a44d	7a		ply				ply
.a44e					_SSMExit:
.a44e	60		rts				rts
.a44f					_SSMNull:
.a44f	a9 00		lda #$00			lda 	#0
.a451	20 e9 b6	jsr $b6e9			jsr 	StringTempAllocate
.a454	60		rts				rts
.a455					SubstringInitial:
.a455	da		phx				phx 								; save initial stack position
.a456	08		php				php 								; save carry on stack indicating 2 parameters
.a457	20 91 a4	jsr $a491			jsr 	EvaluateString 				; get a string
.a45a	5a		phy				phy 								; calculate length to exponent.
.a45b	a0 ff		ldy #$ff			ldy 	#$FF
.a45d					_SIFindLength:
.a45d	c8		iny				iny
.a45e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a460	d0 fb		bne $a45d			bne 	_SIFindLength
.a462	98		tya				tya
.a463	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a466	7a		ply				ply
.a467	e8		inx				inx
.a468	20 88 ad	jsr $ad88			jsr 	CheckComma 					; comma next
.a46b	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; get next parameter
.a46e	28		plp				plp 								; is it the last parameter ?
.a46f	90 07		bcc $a478			bcc 	_SSIExit 					; if so, exit.
.a471	e8		inx				inx
.a472	20 88 ad	jsr $ad88			jsr 	CheckComma 					; comma next
.a475	20 de a4	jsr $a4de			jsr 	Evaluate8BitInteger 		; get last parameter
.a478					_SSIExit:
.a478	fa		plx				plx
.a479	20 80 ad	jsr $ad80			jsr 	CheckRightBracket 			; check closing bracket
.a47c	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a47d					EvaluateValue:
.a47d	48		pha				pha
.a47e	20 1c 9d	jsr $9d1c			jsr		EvaluateExpression 			; expression
.a481	20 31 9e	jsr $9e31			jsr 	Dereference					; derefernce it
.a484	68		pla				pla
.a485	60		rts				rts
.a486					EvaluateNumber:
.a486	20 7d a4	jsr $a47d			jsr 	EvaluateValue 				; get a value
.a489	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a48c	29 10		and #$10			and 	#NSBIsString
.a48e	d0 16		bne $a4a6			bne 	HelperTypeError
.a490	60		rts				rts
.a491					EvaluateString:
.a491	20 7d a4	jsr $a47d			jsr 	EvaluateValue 				; get a value
.a494	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a497	29 10		and #$10			and 	#NSBIsString
.a499	f0 0b		beq $a4a6			beq 	HelperTypeError
.a49b					CopyAddressToTemp0:
.a49b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a49e	85 36		sta $36				sta 	zTemp0
.a4a0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4a3	85 37		sta $37				sta 	zTemp0+1
.a4a5	60		rts				rts
.a4a6					HelperTypeError:
.a4a6	4c 70 b3	jmp $b370			jmp 	TypeError
.a4a9					EvaluateInteger:
.a4a9	20 86 a4	jsr $a486			jsr 	EvaluateNumber
.a4ac	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a4af	d0 0a		bne $a4bb			bne 	HelperValueError 			; if not, it's a float.
.a4b1	60		rts				rts
.a4b2					EvaluateUnsignedInteger:
.a4b2	20 a9 a4	jsr $a4a9			jsr 	EvaluateInteger 			; check integer is +ve
.a4b5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4b8	30 01		bmi $a4bb			bmi 	HelperValueError
.a4ba	60		rts				rts
.a4bb					HelperValueError:
.a4bb	4c 75 b3	jmp $b375			jmp 	ArgumentError
.a4be					Evaluate16BitInteger:
.a4be	20 b2 a4	jsr $a4b2			jsr	 	EvaluateUnsignedInteger		; get integer
.a4c1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a4c4	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4c7	d0 f2		bne $a4bb			bne 	HelperValueError
.a4c9	60		rts				rts
.a4ca					Evaluate16BitIntegerSigned:
.a4ca	20 a9 a4	jsr $a4a9			jsr	 	EvaluateInteger				; get integer
.a4cd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a4d0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4d3	d0 e6		bne $a4bb			bne 	HelperValueError
.a4d5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a4d8	10 03		bpl $a4dd			bpl 	_EISNotSigned
.a4da	20 fb a4	jsr $a4fb			jsr 	NSMNegateMantissa
.a4dd					_EISNotSigned:
.a4dd	60		rts				rts
.a4de					Evaluate8BitInteger:
.a4de	20 b2 a4	jsr $a4b2			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a4e1	d0 d8		bne $a4bb			bne 	HelperValueError
.a4e3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a4e6	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4e9	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a4ec	d0 cd		bne $a4bb			bne 	HelperValueError
.a4ee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b202					Multiply8x8:
.b202	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b203	85 36		sta $36			  	sta 	zTemp0
.b205	86 37		stx $37				stx 	zTemp0+1
.b207	a9 00		lda #$00			lda 	#0
.b209	a2 08		ldx #$08			ldx 	#8
.b20b					_M88Loop:
.b20b	90 03		bcc $b210			bcc 	_M88NoAdd
.b20d	18		clc				clc
.b20e	65 37		adc $37				adc 	zTemp0+1
.b210					_M88NoAdd:
.b210	6a		ror a				ror 	a
.b211	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b213	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b214	d0 f5		bne $b20b			bne 	_M88Loop
.b216	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b218	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a4f2					NSMNegate:
.a4f2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4f5	49 80		eor #$80			eor 	#NSBIsNegative
.a4f7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a4fa	60		rts				rts
.a4fb					NSMNegateMantissa:
.a4fb	38		sec				sec
.a4fc	a9 00		lda #$00			lda 	#0
.a4fe	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a501	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a504	a9 00		lda #$00			lda 	#0
.a506	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a509	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a50c	a9 00		lda #$00			lda 	#0
.a50e	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a511	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a514	a9 00		lda #$00			lda 	#0
.a516	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a519	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a51c	60		rts				rts
.a51d					NSMShiftUpTwo:
.a51d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a520	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a523	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a526	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a529	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a52c	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a52f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a532	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a535	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a538	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a53b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a53e	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a541	60		rts				rts
.a542					NSMSetZeroMantissaOnly:
.a542	a9 00		lda #$00			lda 	#0
.a544	80 08		bra $a54e			bra 	NSMSetMantissa
.a546					NSMSetZero:
.a546	a9 00		lda #$00			lda 	#0
.a548					NSMSetByte:
.a548	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a54b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a54e					NSMSetMantissa:
.a54e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a551	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a554	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a557	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a55a	60		rts				rts
.a55b					NSMShiftLeft:
.a55b	18		clc				clc
.a55c					NSMRotateLeft:
.a55c	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a55f	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a562	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a565	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a568	60		rts				rts
.a569					NSMShiftRight:
.a569	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a56c	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a56f	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a572	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a575	60		rts				rts
.a576					NSMIsZero:
.a576	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a579	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a57c	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a57f	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a582	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b219					Assemble_ora:
.b219	20 e1 88	jsr $88e1		jsr	AssembleGroup1
>b21c	01					.byte $01
.b21d					Assemble_and:
.b21d	20 e1 88	jsr $88e1		jsr	AssembleGroup1
>b220	21					.byte $21
.b221					Assemble_eor:
.b221	20 e1 88	jsr $88e1		jsr	AssembleGroup1
>b224	41					.byte $41
.b225					Assemble_adc:
.b225	20 e1 88	jsr $88e1		jsr	AssembleGroup1
>b228	61					.byte $61
.b229					Assemble_sta:
.b229	20 e1 88	jsr $88e1		jsr	AssembleGroup1
>b22c	81					.byte $81
.b22d					Assemble_lda:
.b22d	20 e1 88	jsr $88e1		jsr	AssembleGroup1
>b230	a1					.byte $a1
.b231					Assemble_cmp:
.b231	20 e1 88	jsr $88e1		jsr	AssembleGroup1
>b234	c1					.byte $c1
.b235					Assemble_sbc:
.b235	20 e1 88	jsr $88e1		jsr	AssembleGroup1
>b238	e1					.byte $e1
.b239					Assemble_asl:
.b239	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b23c	02					.byte $02
>b23d	75					.byte $75
.b23e					Assemble_rol:
.b23e	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b241	22					.byte $22
>b242	75					.byte $75
.b243					Assemble_lsr:
.b243	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b246	42					.byte $42
>b247	75					.byte $75
.b248					Assemble_ror:
.b248	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b24b	62					.byte $62
>b24c	75					.byte $75
.b24d					Assemble_stx:
.b24d	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b250	82					.byte $82
>b251	50					.byte $50
.b252					Assemble_ldx:
.b252	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b255	a2					.byte $a2
>b256	d0					.byte $d0
.b257					Assemble_dec:
.b257	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b25a	c2					.byte $c2
>b25b	55					.byte $55
.b25c					Assemble_inc:
.b25c	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b25f	e2					.byte $e2
>b260	55					.byte $55
.b261					Assemble_stz:
.b261	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b264	60					.byte $60
>b265	44					.byte $44
.b266					Assemble_bit:
.b266	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b269	20					.byte $20
>b26a	55					.byte $55
.b26b					Assemble_sty:
.b26b	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b26e	80					.byte $80
>b26f	54					.byte $54
.b270					Assemble_ldy:
.b270	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b273	a0					.byte $a0
>b274	d5					.byte $d5
.b275					Assemble_cpy:
.b275	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b278	c0					.byte $c0
>b279	d4					.byte $d4
.b27a					Assemble_cpx:
.b27a	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b27d	e0					.byte $e0
>b27e	d0					.byte $d0
.b27f					Assemble_tsb:
.b27f	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b282	00					.byte $00
>b283	50					.byte $50
.b284					Assemble_trb:
.b284	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b287	10					.byte $10
>b288	50					.byte $50
.b289					Assemble_jsr:
.b289	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b28c	14					.byte $14
>b28d	10					.byte $10
.b28e					Assemble_jmp:
.b28e	20 e8 88	jsr $88e8		jsr	AssembleGroup2
>b291	40					.byte $40
>b292	10					.byte $10
.b293					Assemble_bpl:
.b293	20 39 89	jsr $8939		jsr	AssembleGroup3
>b296	10					.byte $10
.b297					Assemble_bmi:
.b297	20 39 89	jsr $8939		jsr	AssembleGroup3
>b29a	30					.byte $30
.b29b					Assemble_bvc:
.b29b	20 39 89	jsr $8939		jsr	AssembleGroup3
>b29e	50					.byte $50
.b29f					Assemble_bvs:
.b29f	20 39 89	jsr $8939		jsr	AssembleGroup3
>b2a2	70					.byte $70
.b2a3					Assemble_bcc:
.b2a3	20 39 89	jsr $8939		jsr	AssembleGroup3
>b2a6	90					.byte $90
.b2a7					Assemble_bcs:
.b2a7	20 39 89	jsr $8939		jsr	AssembleGroup3
>b2aa	b0					.byte $b0
.b2ab					Assemble_bne:
.b2ab	20 39 89	jsr $8939		jsr	AssembleGroup3
>b2ae	d0					.byte $d0
.b2af					Assemble_beq:
.b2af	20 39 89	jsr $8939		jsr	AssembleGroup3
>b2b2	f0					.byte $f0
.b2b3					Assemble_bra:
.b2b3	20 39 89	jsr $8939		jsr	AssembleGroup3
>b2b6	80					.byte $80
.b2b7					Assemble_brk:
.b2b7	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2ba	00					.byte $00
.b2bb					Assemble_php:
.b2bb	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2be	08					.byte $08
.b2bf					Assemble_clc:
.b2bf	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2c2	18					.byte $18
.b2c3					Assemble_plp:
.b2c3	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2c6	28					.byte $28
.b2c7					Assemble_sec:
.b2c7	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2ca	38					.byte $38
.b2cb					Assemble_rti:
.b2cb	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2ce	40					.byte $40
.b2cf					Assemble_pha:
.b2cf	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2d2	48					.byte $48
.b2d3					Assemble_cli:
.b2d3	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2d6	58					.byte $58
.b2d7					Assemble_phy:
.b2d7	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2da	5a					.byte $5a
.b2db					Assemble_rts:
.b2db	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2de	60					.byte $60
.b2df					Assemble_pla:
.b2df	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2e2	68					.byte $68
.b2e3					Assemble_sei:
.b2e3	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2e6	78					.byte $78
.b2e7					Assemble_ply:
.b2e7	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2ea	7a					.byte $7a
.b2eb					Assemble_dey:
.b2eb	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2ee	88					.byte $88
.b2ef					Assemble_txa:
.b2ef	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2f2	8a					.byte $8a
.b2f3					Assemble_tya:
.b2f3	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2f6	98					.byte $98
.b2f7					Assemble_txs:
.b2f7	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2fa	9a					.byte $9a
.b2fb					Assemble_tay:
.b2fb	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b2fe	a8					.byte $a8
.b2ff					Assemble_tax:
.b2ff	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b302	aa					.byte $aa
.b303					Assemble_clv:
.b303	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b306	b8					.byte $b8
.b307					Assemble_tsx:
.b307	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b30a	ba					.byte $ba
.b30b					Assemble_iny:
.b30b	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b30e	c8					.byte $c8
.b30f					Assemble_dex:
.b30f	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b312	ca					.byte $ca
.b313					Assemble_cld:
.b313	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b316	d8					.byte $d8
.b317					Assemble_phx:
.b317	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b31a	da					.byte $da
.b31b					Assemble_stp:
.b31b	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b31e	db					.byte $db
.b31f					Assemble_inx:
.b31f	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b322	e8					.byte $e8
.b323					Assemble_nop:
.b323	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b326	ea					.byte $ea
.b327					Assemble_sed:
.b327	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b32a	f8					.byte $f8
.b32b					Assemble_plx:
.b32b	20 6f 89	jsr $896f		jsr	AssembleGroup4
>b32e	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b32f					DecimalScalarTable:
>b32f	66 66 66 66				.dword $66666666 ; 0.1
>b333	de					.byte $de
>b334	1f 85 eb 51				.dword $51eb851f ; 0.01
>b338	db					.byte $db
>b339	4c 37 89 41				.dword $4189374c ; 0.001
>b33d	d8					.byte $d8
>b33e	ac 8b db 68				.dword $68db8bac ; 0.0001
>b342	d4					.byte $d4
>b343	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b347	d1					.byte $d1
>b348	83 de 1b 43				.dword $431bde83 ; 1e-06
>b34c	ce					.byte $ce
>b34d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b351	ca					.byte $ca
>b352	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b356	c7					.byte $c7
>b357	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b35b	c4					.byte $c4
>b35c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b360	c0					.byte $c0
>b361	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b365	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b366					SyntaxError:
.b366	a9 02		lda #$02		lda	#2
.b368	4c 13 99	jmp $9913		jmp	ErrorHandler
.b36b					RangeError:
.b36b	a9 04		lda #$04		lda	#4
.b36d	4c 13 99	jmp $9913		jmp	ErrorHandler
.b370					TypeError:
.b370	a9 05		lda #$05		lda	#5
.b372	4c 13 99	jmp $9913		jmp	ErrorHandler
.b375					ArgumentError:
.b375	a9 07		lda #$07		lda	#7
.b377	4c 13 99	jmp $9913		jmp	ErrorHandler
.b37a					NotDoneError:
.b37a	a9 0c		lda #$0c		lda	#12
.b37c	4c 13 99	jmp $9913		jmp	ErrorHandler
.b37f					ErrorText:
>b37f	42 72 65 61 6b 00			.text	"Break",0
>b385	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b38d	72 72 6f 72 00
>b392	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b39a	20 62 79 20 7a 65 72 6f 00
>b3a3	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b3ab	61 6e 67 65 00
>b3b0	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b3b8	6d 61 74 63 68 00
>b3be	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b3c6	65 6d 6f 72 79 00
>b3cc	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b3d4	61 72 67 75 6d 65 6e 74 00
>b3dd	53 74 6f 70 00				.text	"Stop",0
>b3e2	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b3ea	6f 6f 20 6c 6f 6e 67 00
>b3f2	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b3fa	6e 20 66 61 69 6c 65 64 00
>b403	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b40b	61 74 61 00
>b40f	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b417	65 6e 74 65 64 00
>b41d	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b425	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b431	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b439	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b446	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b44e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b45b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b463	68 6f 75 74 20 57 68 69 6c 65 00
>b46e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b476	68 6f 75 74 20 46 6f 72 00
>b47f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b487	61 63 6b 20 66 75 6c 6c 00
>b490	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b498	75 63 74 75 72 65 00
>b49f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b4a7	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b4b4	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b4bc	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b4ca	41 72 72 61 79 20 73 69			.text	"Array size",0
>b4d2	7a 65 00
>b4d5	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b4dd	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b4e5	42 75 69 6c 74 20 53 61			.text "Built Saturday 22-Oct-2022. Build 2231."
>b4ed	74 75 72 64 61 79 20 32 32 2d 4f 63 74 2d 32 30
>b4fd	32 32 2e 20 42 75 69 6c 64 20 32 32 33 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b50c					EXTInitialise:
.b50c	64 01		stz $01				stz 	1 							; Access I/O
.b50e	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b511	9c 08 d0	stz $d008			stz 	$D008
.b514	9c 09 d0	stz $d009			stz 	$D009
.b517	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b519	8d 58 d6	sta $d658			sta 	$D658
.b51c	60		rts				rts
.b51d					EXTClearScreen:
.b51d	4c ea ff	jmp $ffea			jmp 	$FFEA
.b520					EXTPrintCharacter:
.b520	48		pha				pha
.b521	da		phx				phx
.b522	5a		phy				phy
.b523	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b526	7a		ply				ply
.b527	fa		plx				plx
.b528	68		pla				pla
.b529	60		rts				rts
.b52a					EXTInputSingleCharacter:
.b52a	da		phx				phx
.b52b	5a		phy				phy
.b52c					_EISCWait:
.b52c	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b52f	c9 00		cmp #$00			cmp 	#0
.b531	f0 f9		beq $b52c			beq 	_EISCWait
.b533	7a		ply				ply
.b534	fa		plx				plx
.b535	60		rts				rts
.b536					EXTInputLine:
.b536	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b538					_ILLoop:
.b538	da		phx				phx 								; read character in
.b539	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b53c	fa		plx				plx
.b53d	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b53f	f0 12		beq $b553			beq 	_ILBackspace
.b541	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b543	f0 15		beq $b55a			beq 	_ILExit
.b545	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b547	90 ef		bcc $b538			bcc 	_ILLoop
.b549	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b54b	f0 eb		beq $b538			beq 	_ILLoop
.b54d	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b550	e8		inx				inx
.b551	80 e5		bra $b538			bra 	_ILLoop
.b553					_ILBackspace:
.b553	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b555	f0 e1		beq $b538			beq 	_ILLoop
.b557	ca		dex				dex 								; back one.
.b558	80 de		bra $b538			bra 	_ILLoop
.b55a					_ILExit:
.b55a	20 20 b5	jsr $b520			jsr 	EXTPrintCharacter
.b55d	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b560	60		rts				rts
.b561					EXTBreakCheck:
.b561	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b564					EXTReadController:
.b564	da		phx				phx
.b565	a2 00		ldx #$00			ldx 	#0
.b567	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b569	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b56c	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b56e	f0 04		beq $b574			beq 	_NoSet1
.b570	8a		txa				txa
.b571	09 01		ora #$01			ora 	#1
.b573	aa		tax				tax
.b574					_NoSet1:
.b574	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b576	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b579	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b57b	f0 04		beq $b581			beq 	_NoSet1
.b57d	8a		txa				txa
.b57e	09 02		ora #$02			ora 	#2
.b580	aa		tax				tax
.b581					_NoSet1:
.b581	a9 06		lda #$06			lda 	#(($32) >> 3)
.b583	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b586	29 04		and #$04			and 	#($01 << (($32) & 7))
.b588	f0 04		beq $b58e			beq 	_NoSet1
.b58a	8a		txa				txa
.b58b	09 04		ora #$04			ora 	#4
.b58d	aa		tax				tax
.b58e					_NoSet1:
.b58e	a9 04		lda #$04			lda 	#(($25) >> 3)
.b590	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b593	29 20		and #$20			and 	#($01 << (($25) & 7))
.b595	f0 04		beq $b59b			beq 	_NoSet1
.b597	8a		txa				txa
.b598	09 08		ora #$08			ora 	#8
.b59a	aa		tax				tax
.b59b					_NoSet1:
.b59b	a9 04		lda #$04			lda 	#(($26) >> 3)
.b59d	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b5a0	29 40		and #$40			and 	#($01 << (($26) & 7))
.b5a2	f0 04		beq $b5a8			beq 	_NoSet1
.b5a4	8a		txa				txa
.b5a5	09 10		ora #$10			ora 	#16
.b5a7	aa		tax				tax
.b5a8					_NoSet1:
.b5a8	8a		txa				txa
.b5a9	fa		plx				plx
.b5aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b5ab					MemoryDeleteLine:
.b5ab	20 ca b5	jsr $b5ca			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b5ae	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b5b0	a8		tay				tay
.b5b1					_MDDLLoop:
.b5b1	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b5b3	92 30		sta ($30)			sta 	(codePtr)
.b5b5	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b5b7	c5 3a		cmp $3a				cmp 	zTemp2
.b5b9	d0 07		bne $b5c2			bne 	_MDLDLNext
.b5bb	a5 31		lda $31				lda 	codePtr+1
.b5bd	c5 3b		cmp $3b				cmp 	zTemp2+1
.b5bf	d0 01		bne $b5c2			bne 	_MDLDLNext
.b5c1					_MDDLExit:
.b5c1	60		rts				rts
.b5c2					_MDLDLNext:
.b5c2	e6 30		inc $30				inc 	codePtr						; next byte
.b5c4	d0 eb		bne $b5b1			bne 	_MDDLLoop
.b5c6	e6 31		inc $31				inc 	codePtr+1
.b5c8	80 e7		bra $b5b1			bra 	_MDDLLoop
.b5ca					IMemoryFindEnd:
.b5ca	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5cc	85 3a		sta $3a				sta 	0+zTemp2
.b5ce	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5d0	85 3b		sta $3b				sta 	1+zTemp2
.b5d2					_MDLFELoop:
.b5d2	b2 3a		lda ($3a)			lda 	(zTemp2)
.b5d4	f0 0b		beq $b5e1			beq 	_MDLFEExit
.b5d6	18		clc				clc
.b5d7	65 3a		adc $3a				adc 	zTemp2
.b5d9	85 3a		sta $3a				sta 	zTemp2
.b5db	90 f5		bcc $b5d2			bcc 	_MDLFELoop
.b5dd	e6 3b		inc $3b				inc 	zTemp2+1
.b5df	80 f1		bra $b5d2			bra 	_MDLFELoop
.b5e1					_MDLFEExit:
.b5e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b5e2					MemoryInsertLine:
.b5e2	08		php				php
.b5e3	20 ca b5	jsr $b5ca			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b5e6	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b5e8	1a		inc a				inc 	a
.b5e9	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b5eb	b0 36		bcs $b623			bcs 	_MDLIError
.b5ed	28		plp				plp
.b5ee	90 08		bcc $b5f8			bcc 	_MDLIFound
.b5f0	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b5f2	85 30		sta $30				sta 	codePtr
.b5f4	a5 3b		lda $3b				lda 	zTemp2+1
.b5f6	85 31		sta $31				sta 	codePtr+1
.b5f8					_MDLIFound:
.b5f8	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b5fb	a8		tay				tay
.b5fc					_MDLIInsert:
.b5fc	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b5fe	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b600	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b602	c5 3a		cmp $3a				cmp 	zTemp2
.b604	d0 06		bne $b60c			bne 	_MDLINext
.b606	a5 31		lda $31				lda 	codePtr+1
.b608	c5 3b		cmp $3b				cmp 	zTemp2+1
.b60a	f0 0a		beq $b616			beq 	_MDLIHaveSpace
.b60c					_MDLINext:
.b60c	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b60e	d0 02		bne $b612			bne 	_MDLINoBorrow
.b610	c6 3b		dec $3b				dec 	zTemp2+1
.b612					_MDLINoBorrow:
.b612	c6 3a		dec $3a				dec 	zTemp2
.b614	80 e6		bra $b5fc			bra 	_MDLIInsert
.b616					_MDLIHaveSpace:
.b616	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b619	88		dey				dey 								; from offset-1 to 0
.b61a					_MDLICopy:
.b61a	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b61d	91 30		sta ($30),y			sta 	(codePtr),y
.b61f	88		dey				dey
.b620	10 f8		bpl $b61a			bpl 	_MDLICopy
.b622	60		rts				rts
.b623					_MDLIError:
.b623	a9 06		lda #$06		lda	#6
.b625	4c 13 99	jmp $9913		jmp	ErrorHandler
.b628					MDLAppendLine:
.b628	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b62a	85 36		sta $36				sta 	zTemp0
.b62c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b62e	85 38		sta $38				sta 	0+zTemp1
.b630	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b632	85 39		sta $39				sta 	1+zTemp1
.b634	b2 38		lda ($38)			lda 	(zTemp1)
.b636	d0 0a		bne $b642			bne 	_MDLANoInitialise
.b638	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b63a	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b63d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b63f	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b642					_MDLANoInitialise:
.b642	18		clc				clc
.b643	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b646	85 38		sta $38				sta 	zTemp1
.b648	72 36		adc ($36)			adc 	(zTemp0)
.b64a	8d 6b 06	sta $066b			sta 	AppendPointer
.b64d	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b650	85 39		sta $39				sta 	zTemp1+1
.b652	69 00		adc #$00			adc 	#0
.b654	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b657	a0 00		ldy #$00			ldy 	#0
.b659					_MDLACopy:
.b659	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b65b	91 38		sta ($38),y			sta 	(zTemp1),y
.b65d	c8		iny				iny
.b65e	98		tya				tya
.b65f	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b661	d0 f6		bne $b659			bne 	_MDLACopy
.b663	a9 00		lda #$00			lda 	#0 							; end of program.
.b665	91 38		sta ($38),y			sta 	(zTemp1),y
.b667	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a583					MemoryNew:
.a583	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a585	85 30		sta $30				sta 	codePtr
.a587	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a589	85 31		sta $31				sta 	codePtr+1
.a58b	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a58d	92 30		sta ($30)			sta 	(codePtr)
.a58f	60		rts				rts
.a590					MemoryInline:
.a590	98		tya				tya 								; put address into stack,x
.a591	18		clc				clc
.a592	65 30		adc $30				adc 	codePtr
.a594	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a597	a5 31		lda $31				lda 	codePtr+1
.a599	69 00		adc #$00			adc 	#0
.a59b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a59e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a5a1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a5a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a5a5					MemorySearch:
.a5a5	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a5a7	86 37		stx $37				stx 	zTemp0+1
.a5a9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5ab	85 30		sta $30				sta 	codePtr
.a5ad	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5af	85 31		sta $31				sta 	codePtr+1
.a5b1					_MTAXLoop:
.a5b1	b2 30		lda ($30)			lda 	(codePtr)
.a5b3	18		clc				clc
.a5b4	f0 21		beq $a5d7			beq 	_MTAXExit 					; reached end, exit with CC.
.a5b6	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a5b8	b1 30		lda ($30),y			lda 	(codePtr),y
.a5ba	38		sec				sec
.a5bb	e5 36		sbc $36				sbc 	zTemp0
.a5bd	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a5bf	c8		iny				iny 								; do the MSB
.a5c0	b1 30		lda ($30),y			lda 	(codePtr),y
.a5c2	e5 37		sbc $37				sbc 	zTemp0+1
.a5c4	05 38		ora $38				ora 	zTemp1
.a5c6	f0 0f		beq $a5d7			beq 	_MTAXExit	 				; found
.a5c8	b0 0d		bcs $a5d7			bcs 	_MTAXExit 					; current < required exit
.a5ca	18		clc				clc
.a5cb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a5cd	65 30		adc $30				adc 	codePtr
.a5cf	85 30		sta $30				sta 	codePtr
.a5d1	90 02		bcc $a5d5			bcc 	_CREExit
.a5d3	e6 31		inc $31				inc 	codePtr+1
.a5d5					_CREExit:
.a5d5	80 da		bra $a5b1			bra 	_MTAXLoop
.a5d7					_MTAXExit:
.a5d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5d8					StackPushByte:
.a5d8	48		pha				pha 								; save byte
.a5d9	a5 34		lda $34				lda 	BasicStack
.a5db	d0 09		bne $a5e6			bne 	_SPBNoBorrow
.a5dd	c6 35		dec $35				dec 	BasicStack+1
.a5df	48		pha				pha
.a5e0	a5 35		lda $35				lda 	BasicStack+1
.a5e2	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5e4	90 06		bcc $a5ec			bcc 	_SPBMemory
.a5e6					_SPBNoBorrow:
.a5e6	c6 34		dec $34				dec 	BasicStack
.a5e8	68		pla				pla 								; get back and write
.a5e9	92 34		sta ($34)			sta 	(BasicStack)
.a5eb	60		rts				rts
.a5ec					_SPBMemory:
.a5ec	a9 12		lda #$12		lda	#18
.a5ee	4c 13 99	jmp $9913		jmp	ErrorHandler
.a5f1					StackPopByte:
.a5f1	b2 34		lda ($34)			lda 	(BasicStack)
.a5f3	e6 34		inc $34				inc 	BasicStack
.a5f5	d0 02		bne $a5f9			bne 	_SPBNoCarry
.a5f7	e6 35		inc $35				inc 	BasicStack+1
.a5f9					_SPBNoCarry:
.a5f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a5fa					StackOpen:
.a5fa	48		pha				pha 								; save frame byte
.a5fb	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a5fd	0a		asl a				asl 	a 							; claim twice this for storage
.a5fe	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a600	38		sec				sec 								; so basically subtracting from
.a601	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a603	85 34		sta $34				sta 	basicStack
.a605	b0 08		bcs $a60f			bcs 	_SONoBorrow
.a607	c6 35		dec $35				dec 	basicStack+1
.a609	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a60b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a60d	90 04		bcc $a613			bcc 	_SOMemory
.a60f					_SONoBorrow:
.a60f	68		pla				pla 								; get marker back and write at TOS
.a610	92 34		sta ($34)			sta 	(basicStack)
.a612	60		rts				rts
.a613					_SOMemory:
.a613	a9 12		lda #$12		lda	#18
.a615	4c 13 99	jmp $9913		jmp	ErrorHandler
.a618					StackClose:
.a618	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a61a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a61c	0a		asl a				asl 	a 							; claim twice this.
.a61d	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a61f	85 34		sta $34				sta 	basicStack
.a621	90 02		bcc $a625			bcc 	_SCExit
.a623	e6 35		inc $35				inc 	basicStack+1
.a625					_SCExit:
.a625	60		rts				rts
.a626					StackCheckFrame:
.a626	48		pha				pha
.a627					_StackRemoveLocals:
.a627	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a629	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a62b	b0 05		bcs $a632			bcs 	_SCNoLocal
.a62d	20 27 ad	jsr $ad27			jsr 	LocalPopValue
.a630	80 f5		bra $a627			bra 	_StackRemoveLocals
.a632					_SCNoLocal:
.a632	68		pla				pla
.a633	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a635	29 f0		and #$f0			and 	#$F0 						; check type bits
.a637	d0 01		bne $a63a			bne 	_SCFError 					; different, we have structures mixed up
.a639	60		rts				rts
.a63a					_SCFError:
.a63a	8a		txa				txa 								; report error X
.a63b	4c 13 99	jmp $9913			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a63e					STKSaveCodePosition:
.a63e	5a		phy				phy
.a63f	98		tya				tya 								; save Y
.a640	a0 05		ldy #$05			ldy 	#5
.a642	91 34		sta ($34),y			sta 	(basicStack),y
.a644	88		dey				dey 								; save Code Pointer
.a645					_STKSaveLoop:
.a645	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a648	91 34		sta ($34),y			sta 	(basicStack),y
.a64a	88		dey				dey
.a64b	d0 f8		bne $a645			bne 	_STKSaveLoop
.a64d	7a		ply				ply
.a64e	60		rts				rts
.a64f					STKLoadCodePosition:
.a64f	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a651					_STKLoadLoop:
.a651	b1 34		lda ($34),y			lda 	(basicStack),y
.a653	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a656	c8		iny				iny
.a657	c0 05		cpy #$05			cpy 	#5
.a659	d0 f6		bne $a651			bne 	_STKLoadLoop
.a65b	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a65d	a8		tay				tay
.a65e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a65f					StackReset:
.a65f	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a661	85 34		sta $34				sta 	0+basicStack
.a663	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a665	85 35		sta $35				sta 	1+basicStack
.a667	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a669	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a66b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b668					StringConcrete:
.b668	5a		phy				phy 								; save position on stack
.b669	20 e0 a1	jsr $a1e0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b66c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b66f	85 38		sta $38				sta 	zTemp1
.b671	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b674	85 39		sta $39				sta 	zTemp1+1
.b676	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b678					_SALength:
.b678	c8		iny				iny
.b679	b1 38		lda ($38),y			lda 	(zTemp1),y
.b67b	d0 fb		bne $b678			bne 	_SALength
.b67d	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b67f	b0 3f		bcs $b6c0			bcs 	_SALengthError
.b681	98		tya				tya 				 				; length of the new string
.b682	18		clc				clc
.b683	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b685	90 02		bcc $b689			bcc 	_SAHaveLength
.b687	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b689					_SAHaveLength:
.b689	48		pha				pha 								; save length.
.b68a	38		sec				sec
.b68b	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b68d	6d 8e 04	adc $048e			adc 	StringMemory
.b690	8d 8e 04	sta $048e			sta 	StringMemory
.b693	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b695	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b698	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b69a	6d 8f 04	adc $048f			adc 	StringMemory+1
.b69d	8d 8f 04	sta $048f			sta 	StringMemory+1
.b6a0	85 3b		sta $3b				sta 	zTemp2+1
.b6a2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b6a5	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b6a6	38		sec				sec
.b6a7	e9 03		sbc #$03			sbc 	#3
.b6a9	92 3a		sta ($3a)			sta 	(zTemp2)
.b6ab	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b6ad	a0 01		ldy #$01			ldy 	#1
.b6af	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b6b1					_SACopyNewString:
.b6b1	a0 00		ldy #$00			ldy 	#0
.b6b3					_SACopyNSLoop:
.b6b3	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b6b5	c8		iny				iny 								; write two on in string storage
.b6b6	c8		iny				iny
.b6b7	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b6b9	88		dey				dey 								; this makes it one one.
.b6ba	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b6bc	d0 f5		bne $b6b3			bne 	_SACopyNSLoop
.b6be	7a		ply				ply
.b6bf	60		rts				rts
.b6c0					_SALengthError:
.b6c0	a9 09		lda #$09		lda	#9
.b6c2	4c 13 99	jmp $9913		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b6c5					StringSystemInitialise:
.b6c5	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b6c7	8d 8e 04	sta $048e			sta 	0+StringMemory
.b6ca	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b6cc	8d 8f 04	sta $048f			sta 	1+StringMemory
.b6cf	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b6d2	60		rts				rts
.b6d3					StringSpaceInitialise:
.b6d3	20 e0 a1	jsr $a1e0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b6d6	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b6d8	8d 90 04	sta $0490			sta 	StringInitialised
.b6db	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b6de	8d 91 04	sta $0491			sta 	StringTempPointer
.b6e1	ad 8f 04	lda $048f			lda 	StringMemory+1
.b6e4	3a		dec a				dec 	a
.b6e5	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b6e8	60		rts				rts
.b6e9					StringTempAllocate:
.b6e9	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b6eb	b0 35		bcs $b722			bcs 	_STALength
.b6ed	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b6f0	30 05		bmi $b6f7			bmi 	_STAAllocate
.b6f2	48		pha				pha 								; save value to subtract.
.b6f3	20 d3 b6	jsr $b6d3			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b6f6	68		pla				pla 								; restore it
.b6f7					_STAAllocate:
.b6f7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b6f9	18		clc				clc  								; deliberate allows one more
.b6fa	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b6fd	8d 91 04	sta $0491			sta 	StringTempPointer
.b700	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b703	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b705	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b708	69 ff		adc #$ff			adc 	#$FF
.b70a	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b70d	85 3d		sta $3d				sta 	zsTemp+1
.b70f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b712	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b715	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b718	a9 10		lda #$10			lda 	#NSTString
.b71a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b71d	a9 00		lda #$00			lda 	#0 							; clear the target string
.b71f	92 3c		sta ($3c)			sta 	(zsTemp)
.b721	60		rts				rts
.b722					_STALength:
.b722	a9 09		lda #$09		lda	#9
.b724	4c 13 99	jmp $9913		jmp	ErrorHandler
.b727					StringTempWrite:
.b727	48		pha				pha
.b728	92 3c		sta ($3c)			sta 	(zsTemp)
.b72a	e6 3c		inc $3c				inc 	zsTemp
.b72c	d0 02		bne $b730			bne 	_STWNoCarry
.b72e	e6 3d		inc $3d				inc 	zsTemp+1
.b730					_STWNoCarry:
.b730	a9 00		lda #$00			lda 	#0
.b732	92 3c		sta ($3c)			sta 	(zsTemp)
.b734	68		pla				pla
.b735	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a66c					BackloadProgram:
.a66c	a2 ff		ldx #$ff			ldx 	#$FF
.a66e	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a671	20 9b a6	jsr $a69b			jsr 	BLReadByte
.a674	30 1e		bmi $a694			bmi 	_BPExit
.a676					_BPCopy:
.a676	e8		inx				inx  								; copy byte in
.a677	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a67a	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a67d	20 9b a6	jsr $a69b			jsr 	BLReadByte 					; read next byte
.a680	30 0a		bmi $a68c			bmi 	_BPEndLine 					; -ve = EOL
.a682	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a684	d0 02		bne $a688			bne 	_BPNotTab
.a686	a9 20		lda #$20			lda 	#' '
.a688					_BPNotTab:
.a688	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a68a	b0 ea		bcs $a676			bcs 	_BPCopy
.a68c					_BPEndLine:
.a68c	20 78 aa	jsr $aa78			jsr 	TokeniseLine 				; tokenise the line.
.a68f	20 29 8b	jsr $8b29			jsr 	EditProgramCode
.a692	80 d8		bra $a66c			bra 	BackloadProgram
.a694					_BPExit:
.a694	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a697	20 e7 8b	jsr $8be7			jsr 	ClearCommand 				; clear variables etc.
.a69a	60		rts				rts
.a69b					BLReadByte:
.a69b					_BLLoad:
.a69b	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a69e	ee 9c a6	inc $a69c			inc 	_BLLoad+1
.a6a1	d0 03		bne $a6a6			bne 	_BLNoCarry
.a6a3	ee 9d a6	inc $a69d			inc 	_BLLoad+2
.a6a6					_BLNoCarry:
.a6a6	c9 00		cmp #$00			cmp 	#0
.a6a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a6a9					TokeniseSearchTable:
.a6a9	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a6ab	85 36		sta $36				sta 	zTemp0
.a6ad	a0 00		ldy #$00			ldy 	#0
.a6af	a9 80		lda #$80			lda 	#$80 						; token #
.a6b1	85 38		sta $38				sta 	zTemp1
.a6b3					_TSTLoop:
.a6b3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a6b5	30 49		bmi $a700			bmi 	_TSTFail 					; -ve = end of table
.a6b7	f0 2e		beq $a6e7			beq 	_TSTNext 					; zero, check next it's a dummy
.a6b9	c8		iny				iny 								; get the hash
.a6ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6bc	88		dey				dey
.a6bd	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a6c0	d0 25		bne $a6e7			bne 	_TSTNext
.a6c2	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a6c5	38		sec				sec
.a6c6	ed 80 04	sbc $0480			sbc 	identStart
.a6c9	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a6cb	d0 1a		bne $a6e7			bne 	_TSTNext
.a6cd	5a		phy				phy 								; save Y , we might fail
.a6ce	c8		iny				iny 								; point to text
.a6cf	c8		iny				iny
.a6d0	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a6d3					_TSTCompareName:
.a6d3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a6d6	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a6d8	d0 0c		bne $a6e6			bne 	_TSTNextPullY 				; fail, pullY and do next
.a6da	e8		inx				inx
.a6db	c8		iny				iny
.a6dc	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a6df	d0 f2		bne $a6d3			bne 	_TSTCompareName
.a6e1	7a		ply				ply 								; throw Y
.a6e2	a5 38		lda $38				lda 	zTemp1 						; get token #
.a6e4	38		sec				sec 								; return with CS = passed.
.a6e5	60		rts				rts
.a6e6					_TSTNextPullY:
.a6e6	7a		ply				ply 								; restore current, fall through.
.a6e7					_TSTNext:
.a6e7	e6 38		inc $38				inc 	zTemp1 						; token counter
.a6e9	98		tya				tya
.a6ea	18		clc				clc
.a6eb	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a6ed	1a		inc a				inc 	a 							; +1
.a6ee	1a		inc a				inc 	a 							; +2
.a6ef	a8		tay				tay
.a6f0	10 c1		bpl $a6b3			bpl 	_TSTLoop 					; if Y < $80 loop back
.a6f2	98		tya				tya 								; add Y to zTemp0 and reset Y
.a6f3	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a6f5	18		clc				clc  								; but have tables > 255 bytes
.a6f6	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a6f8	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a6fa	90 b7		bcc $a6b3			bcc 	_TSTLoop
.a6fc	e6 37		inc $37				inc 	zTemp0+1
.a6fe	80 b3		bra $a6b3			bra 	_TSTLoop
.a700					_TSTFail:
.a700	18		clc				clc
.a701	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a702					KeywordSet0:
>a702	00 65					.text	0,$65,""               ; $80 !0:EOF
>a704	00 58					.text	0,$58,""               ; $81 !1:SH1
>a706	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a708	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a70e	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a716	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a71c	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a723	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a72b	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a732	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a739	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a73f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a745	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a74d	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a754	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a75b	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a762	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a76a	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a770	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a776	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a77d	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a783	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a789	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a791	28
>a792	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a79a	28
>a79b	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a7a1	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a7a7	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a7ad	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a7b4	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a7bc	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a7c2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a7c8	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a7cd	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a7d1	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a7d7	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a7df	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a7e6	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a7ed	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a7f5	43
>a7f6	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a7fc	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a802	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a809	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a80f	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a813	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a819	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a821	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a828	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a82d	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a834	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a83c	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a842	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a847	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a84f	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a855	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a85b	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a860	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a867	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a86d	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a873	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a87a	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a87f	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>a885	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>a88c	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>a891	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>a895	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>a89d	45
>a89e	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c1 PLOT
>a8a4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c2 PRINT
>a8ab	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c3 READ
>a8b1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c4 RECT
>a8b7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c5 REM
>a8bc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c6 RETURN
>a8c4	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c7 SOLID
>a8cb	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c8 SPRITE
>a8d3	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c9 TEXT
>a8d9	02 a3 54 4f				.text	2,$a3,"TO"             ; $ca TO
>a8dd	ff					.text	$FF
.a8de					KeywordSet1:
>a8de	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8e0	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8e2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8e4	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a8ec	4c 45
>a8ee	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a8f6	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a8fe	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a903	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a909	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a90e	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a916	45
>a917	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a91c	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a924	53
>a925	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a92b	ff					.text	$FF
.a92c					KeywordSet2:
>a92c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a92e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a930	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a932	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a937	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a93c	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a941	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a946	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a94b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a950	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a955	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a95a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a95f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a964	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a969	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a96e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a973	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a978	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a97d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a982	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a987	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a98c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a991	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a996	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a99b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a9a0	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a9a5	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a9aa	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a9af	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a9b4	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a9b9	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a9be	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a9c3	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a9c8	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a9cd	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a9d2	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a9d7	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a9dc	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a9e1	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a9e6	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a9eb	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a9f0	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a9f5	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a9fa	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a9ff	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>aa04	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>aa09	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>aa0e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>aa13	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>aa18	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>aa1d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>aa22	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>aa27	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>aa2c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>aa31	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>aa36	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>aa3b	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>aa40	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>aa45	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>aa4a	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>aa4f	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>aa54	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>aa59	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>aa5e	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>aa63	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>aa68	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>aa6d	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>aa72	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>aa77	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.aa78					TokeniseLine:
.aa78	20 00 ac	jsr $ac00			jsr 	FixLineBufferCase 			; fix line case
.aa7b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.aa7d	8d a6 04	sta $04a6			sta 	tokenOffset
.aa80	9c a7 04	stz $04a7			stz 	tokenLineNumber
.aa83	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.aa86	a2 ff		ldx #$ff			ldx 	#$FF
.aa88					_TKFindFirst:
.aa88	e8		inx				inx
.aa89	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa8c	f0 79		beq $ab07			beq 	_TKExit
.aa8e	c9 20		cmp #$20			cmp 	#' '
.aa90	90 f6		bcc $aa88			bcc 	_TKFindFirst
.aa92	c9 30		cmp #$30			cmp 	#'0'
.aa94	90 07		bcc $aa9d			bcc 	_TKNoLineNumber
.aa96	c9 3a		cmp #$3a			cmp 	#'9'+1
.aa98	b0 03		bcs $aa9d			bcs 	_TKNoLineNumber
.aa9a	20 2a ac	jsr $ac2a			jsr 	TokeniseExtractLineNumber
.aa9d					_TKNoLineNumber:
.aa9d					_TKTokeniseLoop:
.aa9d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.aaa0	f0 65		beq $ab07			beq 	_TKExit
.aaa2	e8		inx				inx
.aaa3	c9 20		cmp #$20			cmp 	#' '
.aaa5	f0 f6		beq $aa9d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.aaa7	ca		dex				dex 								; undo last get, A contains character, X is position.
.aaa8	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.aaaa	f0 61		beq $ab0d			beq 	_TKTokeniseIdentifier
.aaac	c9 41		cmp #$41			cmp 	#'A'
.aaae	90 04		bcc $aab4			bcc 	_TKTokenisePunctuation
.aab0	c9 5b		cmp #$5b			cmp 	#'Z'+1
.aab2	90 59		bcc $ab0d			bcc 	_TKTokeniseIdentifier
.aab4					_TKTokenisePunctuation:
.aab4	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.aab6	f0 27		beq $aadf			beq 	_TKString
.aab8	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aaba	f0 28		beq $aae4			beq 	_TKHexConstant
.aabc	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aabe	f0 29		beq $aae9			beq 	_TKCheckDouble
.aac0	c9 3e		cmp #$3e			cmp 	#'>'
.aac2	f0 25		beq $aae9			beq 	_TKCheckDouble
.aac4					_TKStandardPunctuation:
.aac4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.aac7	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aac9	90 0e		bcc $aad9			bcc 	_TKNoShift
.aacb	48		pha				pha 								; save
.aacc	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aace	85 36		sta $36				sta 	zTemp0
.aad0	68		pla				pla
.aad1	29 20		and #$20			and 	#32 						; bit 5
.aad3	4a		lsr a				lsr 	a 							; shift into bit 3
.aad4	4a		lsr a				lsr 	a
.aad5	05 36		ora $36				ora 	zTemp0
.aad7	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aad9					_TKNoShift:
.aad9	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte 			; write the punctuation character
.aadc	e8		inx				inx 								; consume the character
.aadd	80 be		bra $aa9d			bra 	_TKTokeniseLoop 			; and loop round again.
.aadf					_TKString:
.aadf	20 8f ab	jsr $ab8f			jsr 	TokeniseString
.aae2	80 b9		bra $aa9d			bra 	_TKTokeniseLoop
.aae4					_TKHexConstant:
.aae4	20 ca ab	jsr $abca			jsr 	TokeniseHexConstant
.aae7	80 b4		bra $aa9d			bra 	_TKTokeniseLoop
.aae9					_TKCheckDouble:
.aae9	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aaec	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aaee	90 d4		bcc $aac4			bcc 	_TKStandardPunctuation
.aaf0	c9 3f		cmp #$3f			cmp 	#'>'+1
.aaf2	b0 d0		bcs $aac4			bcs 	_TKStandardPunctuation
.aaf4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aaf7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aaf9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aafa	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aafd	38		sec				sec
.aafe	e9 3c		sbc #$3c			sbc 	#'<'
.ab00	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ab03	e8		inx				inx 								; consume both
.ab04	e8		inx				inx
.ab05	80 96		bra $aa9d			bra 	_TKTokeniseLoop
.ab07	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ab09	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.ab0c	60		rts				rts
.ab0d					_TKTokeniseIdentifier:
.ab0d	8e 80 04	stx $0480			stx 	identStart 					; save start
.ab10	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ab13					_TKCheckLoop:
.ab13	e8		inx				inx 								; look at next, we know first is identifier.
.ab14	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.ab17	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.ab19	f0 f8		beq $ab13			beq 	_TKCheckLoop
.ab1b	c9 30		cmp #$30			cmp	 	#"0"
.ab1d	90 0c		bcc $ab2b			bcc 	_TKEndIdentifier
.ab1f	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab21	90 f0		bcc $ab13			bcc 	_TKCheckLoop
.ab23	c9 41		cmp #$41			cmp	 	#"A"
.ab25	90 04		bcc $ab2b			bcc 	_TKEndIdentifier
.ab27	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ab29	90 e8		bcc $ab13			bcc 	_TKCheckLoop
.ab2b					_TKEndIdentifier:
.ab2b	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.ab2e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.ab30	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.ab32	f0 06		beq $ab3a			beq 	_TKHasTypeCharacter
.ab34	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ab36	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ab38	d0 07		bne $ab41			bne 	_TKNoTypeCharacter
.ab3a					_TKHasTypeCharacter:
.ab3a	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ab3d	e8		inx				inx 								; read next
.ab3e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab41					_TKNoTypeCharacter:
.ab41	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ab43	d0 09		bne $ab4e			bne 	_TKNoArray
.ab45	e8		inx				inx 								; skip the (
.ab46	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ab49	09 04		ora #$04			ora 	#$04
.ab4b	8d 84 04	sta $0484			sta 	identTypeByte
.ab4e					_TKNoArray:
.ab4e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ab51	20 eb ab	jsr $abeb			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ab54	a0 a7		ldy #$a7			ldy 	#(KeywordSet0) >> 8
.ab56	a9 02		lda #$02			lda 	#(KeywordSet0) & $FF
.ab58	20 a9 a6	jsr $a6a9			jsr 	TokeniseSearchTable
.ab5b	a2 00		ldx #$00			ldx 	#0
.ab5d	b0 1f		bcs $ab7e			bcs 	_TKFoundToken
.ab5f	a0 a8		ldy #$a8			ldy 	#(KeywordSet1) >> 8
.ab61	a9 de		lda #$de			lda 	#(KeywordSet1) & $FF
.ab63	20 a9 a6	jsr $a6a9			jsr 	TokeniseSearchTable
.ab66	a2 81		ldx #$81			ldx 	#$81
.ab68	b0 14		bcs $ab7e			bcs 	_TKFoundToken
.ab6a	a0 a9		ldy #$a9			ldy 	#(KeywordSet2) >> 8
.ab6c	a9 2c		lda #$2c			lda 	#(KeywordSet2) & $FF
.ab6e	20 a9 a6	jsr $a6a9			jsr 	TokeniseSearchTable
.ab71	a2 82		ldx #$82			ldx 	#$82
.ab73	b0 09		bcs $ab7e			bcs 	_TKFoundToken
.ab75	20 7b ac	jsr $ac7b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ab78	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ab7b	4c 9d aa	jmp $aa9d			jmp 	_TKTokeniseLoop 			; and go round again.
.ab7e					_TKFoundToken:
.ab7e	48		pha				pha 								; save token
.ab7f	8a		txa				txa 								; shift in X, is there one ?
.ab80	f0 03		beq $ab85			beq 	_TKNoTShift
.ab82	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte 			; if so, write it out
.ab85					_TKNoTShift:
.ab85	68		pla				pla 								; restore and write token
.ab86	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.ab89	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ab8c	4c 9d aa	jmp $aa9d			jmp 	_TKTokeniseLoop 			; and go round again.
.ab8f					TokeniseString:
.ab8f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ab91	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.ab94	e8		inx				inx									; start of quoted string.
.ab95	da		phx				phx 								; push start of string on top
.ab96	ca		dex				dex
.ab97					_TSFindEnd:
.ab97	e8		inx				inx
.ab98	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.ab9b	f0 04		beq $aba1			beq 	_TSEndOfString
.ab9d	c9 22		cmp #$22			cmp 	#'"'
.ab9f	d0 f6		bne $ab97			bne 	_TSFindEnd
.aba1					_TSEndOfString:
.aba1	7a		ply				ply  								; so now Y is first character, X is character after end.
.aba2	48		pha				pha 								; save terminating character
.aba3	20 ab ab	jsr $abab			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.aba6	68		pla				pla 								; terminating character
.aba7	f0 01		beq $abaa			beq 	_TSNotQuote					; if it wasn't EOS skip it
.aba9	e8		inx				inx
.abaa					_TSNotQuote:
.abaa	60		rts				rts
.abab					TOWriteBlockXY:
.abab	86 36		stx $36				stx 	zTemp0 						; write end character
.abad	98		tya				tya
.abae	49 ff		eor #$ff			eor 	#$FF
.abb0	38		sec				sec
.abb1	65 36		adc $36				adc 	zTemp0
.abb3	1a		inc a				inc 	a 							; one extra for NULL
.abb4	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.abb7					_TOBlockLoop:
.abb7	c4 36		cpy $36				cpy 	zTemp0
.abb9	f0 09		beq $abc4			beq 	_TOBlockExit
.abbb	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.abbe	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.abc1	c8		iny				iny
.abc2	80 f3		bra $abb7			bra 	_TOBlockLoop
.abc4					_TOBlockExit:
.abc4	a9 00		lda #$00			lda 	#0
.abc6	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.abc9	60		rts				rts
.abca					TokeniseHexConstant:
.abca	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.abcc	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.abcf	e8		inx				inx									; start of quoted string.
.abd0	da		phx				phx 								; push start of constant on top
.abd1	ca		dex				dex
.abd2					_THFindLoop:
.abd2	e8		inx				inx
.abd3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.abd6	c9 30		cmp #$30			cmp 	#"0"
.abd8	90 0c		bcc $abe6			bcc 	_THFoundEnd
.abda	c9 3a		cmp #$3a			cmp 	#"9"+1
.abdc	90 f4		bcc $abd2			bcc 	_THFindLoop
.abde	c9 41		cmp #$41			cmp 	#"A"
.abe0	90 04		bcc $abe6			bcc 	_THFoundEnd
.abe2	c9 47		cmp #$47			cmp 	#"F"+1
.abe4	90 ec		bcc $abd2			bcc 	_THFindLoop
.abe6					_THFoundEnd:
.abe6	7a		ply				ply 								; restore start
.abe7	20 ab ab	jsr $abab			jsr 	TOWriteBlockXY 				; output the block
.abea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.abeb					TokeniseCalculateHash:
.abeb	da		phx				phx
.abec	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.abef	a9 00		lda #$00			lda 	#0
.abf1					_TCHLoop:
.abf1	18		clc				clc
.abf2	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.abf5	e8		inx				inx
.abf6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.abf9	d0 f6		bne $abf1			bne 	_TCHLoop
.abfb	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.abfe	fa		plx				plx
.abff	60		rts				rts
.ac00					FixLineBufferCase:
.ac00	a2 00		ldx #$00			ldx 	#0
.ac02					_FLBCLoop:
.ac02	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ac05	f0 22		beq $ac29			beq 	_FLBCExit 					; end of string.
.ac07	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ac09	f0 11		beq $ac1c			beq 	_FLBCInQuotes
.ac0b	e8		inx				inx
.ac0c	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ac0e	90 f2		bcc $ac02			bcc 	_FLBCLoop
.ac10	c9 7b		cmp #$7b			cmp 	#'z'+1
.ac12	b0 ee		bcs $ac02			bcs 	_FLBCLoop
.ac14	38		sec				sec 								; make U/C
.ac15	e9 20		sbc #$20			sbc 	#32
.ac17	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ac1a	80 e6		bra $ac02			bra 	_FLBCLoop
.ac1c					_FLBCInQuotes:
.ac1c	e8		inx				inx 								; advance
.ac1d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ac20	f0 07		beq $ac29			beq 	_FLBCExit 					; exit on EOS
.ac22	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ac24	d0 f6		bne $ac1c			bne 	_FLBCInQuotes
.ac26	e8		inx				inx 								; skip over it
.ac27	80 d9		bra $ac02			bra 	_FLBCLoop
.ac29					_FLBCExit:
.ac29	60		rts				rts
.ac2a					TokeniseExtractLineNumber:
.ac2a	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.ac2d	48		pha				pha
.ac2e	ad a7 04	lda $04a7			lda 	tokenLineNumber
.ac31	48		pha				pha
.ac32	20 68 ac	jsr $ac68			jsr 	_TELNTimes2 				; line # x 4
.ac35	20 68 ac	jsr $ac68			jsr 	_TELNTimes2 				; line # x 2
.ac38	18		clc				clc 								; add stacked value
.ac39	68		pla				pla
.ac3a	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ac3d	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ac40	68		pla				pla
.ac41	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.ac44	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.ac47	20 68 ac	jsr $ac68			jsr 	_TELNTimes2 				; line # x 10
.ac4a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.ac4d	e8		inx				inx
.ac4e	29 0f		and #$0f			and 	#15 						; add to line #
.ac50	18		clc				clc
.ac51	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ac54	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ac57	90 03		bcc $ac5c			bcc 	_TLENNoCarry
.ac59	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.ac5c					_TLENNoCarry:
.ac5c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.ac5f	c9 30		cmp #$30			cmp 	#'0'
.ac61	90 04		bcc $ac67			bcc 	_TLENExit
.ac63	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac65	90 c3		bcc $ac2a			bcc 	TokeniseExtractLineNumber
.ac67					_TLENExit:
.ac67	60		rts				rts
.ac68					_TELNTimes2:
.ac68	0e a7 04	asl $04a7			asl 	tokenLineNumber
.ac6b	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.ac6e	60		rts				rts
.ac6f					TokeniseWriteByte:
.ac6f	da		phx				phx
.ac70	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.ac73	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.ac76	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.ac79	fa		plx				plx
.ac7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ac7b					CheckCreateVariableRecord:
.ac7b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ac7d	85 36		sta $36				sta 	0+zTemp0
.ac7f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ac81	85 37		sta $37				sta 	1+zTemp0
.ac83					_CCVSearch:
.ac83	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ac85	f0 2c		beq $acb3			beq 	_CCVFail
.ac87	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ac89	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ac8b	cd 83 04	cmp $0483			cmp 	identHash
.ac8e	d0 16		bne $aca6			bne 	_CCVNext
.ac90	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ac92	ae 80 04	ldx $0480			ldx 	identStart
.ac95					_CCVCompare:
.ac95	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ac98	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ac9a	e8		inx				inx 								; advance pointers
.ac9b	c8		iny				iny
.ac9c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ac9d	d0 07		bne $aca6			bne 	_CCVNext  					; didn't match go to next.
.ac9f	90 f4		bcc $ac95			bcc 	_CCVCompare 				; not finished yet.
.aca1	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.aca4	f0 41		beq $ace7			beq 	_CCVFound 					; yes, we were successful
.aca6					_CCVNext:
.aca6	18		clc				clc
.aca7	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.aca9	65 36		adc $36				adc 	zTemp0
.acab	85 36		sta $36				sta 	zTemp0
.acad	90 d4		bcc $ac83			bcc 	_CCVSearch
.acaf	e6 37		inc $37				inc 	zTemp0+1
.acb1	80 d0		bra $ac83			bra 	_CCVSearch
.acb3					_CCVFail:
.acb3	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.acb5	ad 83 04	lda $0483			lda 	identHash
.acb8	91 36		sta ($36),y			sta 	(zTemp0),y
.acba	c8		iny				iny 								; offset 2 is the type byte
.acbb	ad 84 04	lda $0484			lda 	identTypeByte
.acbe	91 36		sta ($36),y			sta 	(zTemp0),y
.acc0	c8		iny				iny
.acc1					_CCVData:
.acc1	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.acc3	91 36		sta ($36),y			sta 	(zTemp0),y
.acc5	c8		iny				iny
.acc6	c0 08		cpy #$08			cpy 	#8
.acc8	90 f7		bcc $acc1			bcc 	_CCVData
.acca	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.accd					_CCVCopyName:
.accd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.acd0	91 36		sta ($36),y			sta 	(zTemp0),y
.acd2	e8		inx				inx
.acd3	c8		iny				iny
.acd4	ec 82 04	cpx $0482			cpx 	identTypeEnd
.acd7	d0 f4		bne $accd			bne 	_CCVCopyName
.acd9	98		tya				tya 								; patch offset
.acda	92 36		sta ($36)			sta 	(zTemp0)
.acdc	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.acde	91 36		sta ($36),y			sta 	(zTemp0),y
.ace0	88		dey				dey
.ace1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ace3	09 80		ora #$80			ora 	#$80
.ace5	91 36		sta ($36),y			sta 	(zTemp0),y
.ace7					_CCVFound:
.ace7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ace9	38		sec				sec
.acea	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.acec	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.acee	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.acf1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.acf3	20 6f ac	jsr $ac6f			jsr 	TokeniseWriteByte
.acf6	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
