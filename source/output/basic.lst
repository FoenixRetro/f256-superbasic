
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 11:52:06 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					AssemblerAddress:
>071c							.fill 	2
.071e					AssemblerControl:
>071e							.fill 	1
.071f					ParamStart:
>071f							.fill 	2
.0721					IsGroup1:
>0721							.fill 	1
.0722					BaseOpcode:
>0722							.fill 	1
.0723					ModeMask:
>0723							.fill 	1
.0724					tokenOffset:
>0724							.fill 	1
.0725					tokenLineNumber:
>0725							.fill 	2
.0727					tokenBuffer:
>0727							.fill 	253
.0824					lineBuffer:
>0824							.fill 	MaxLineSize+1
.0875					numberBuffer:
>0875							.fill 	34
.0897					decimalBuffer:
>0897							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 47 8c	jsr $8c47			jsr 	PrintStringXA
.800a	20 ee 87	jsr $87ee			jsr 	NewCommand 					; erase current program
.800d	20 de 97	jsr $97de			jsr 	BackloadProgram
.8010	4c 1e 84	jmp $841e			jmp 	WarmStart
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13,0
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d 00
>8036							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8036					VectorSetPunc:
>8036	98 8d					.word	ShiftLeft                        ; $00 <<
>8038	92 8c					.word	BinaryCompareLessEqual           ; $01 <=
>803a	88 8c					.word	BinaryCompareNotEqual            ; $02 <>
>803c	44 a4					.word	SyntaxError                      ; $03 !!3
>803e	44 a4					.word	SyntaxError                      ; $04 ><
>8040	9c 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8042	9b 8d					.word	ShiftRight                       ; $06 >>
>8044	44 a4					.word	SyntaxError                      ; $07 !!7
>8046	44 a4					.word	SyntaxError                      ; $08 !!8
>8048	44 a4					.word	SyntaxError                      ; $09 !!9
>804a	44 a4					.word	SyntaxError                      ; $0a !!10
>804c	44 a4					.word	SyntaxError                      ; $0b !!11
>804e	44 a4					.word	SyntaxError                      ; $0c !!12
>8050	44 a4					.word	SyntaxError                      ; $0d !!13
>8052	44 a4					.word	SyntaxError                      ; $0e !!14
>8054	44 a4					.word	SyntaxError                      ; $0f !!15
>8056	44 a4					.word	SyntaxError                      ; $10 @
>8058	44 a4					.word	SyntaxError                      ; $11 !!17
>805a	44 a4					.word	SyntaxError                      ; $12 !!18
>805c	44 a4					.word	SyntaxError                      ; $13 [
>805e	7b 9e					.word	IntegerDivide                    ; $14 \
>8060	44 a4					.word	SyntaxError                      ; $15 ]
>8062	21 8f					.word	EorInteger                       ; $16 ^
>8064	44 a4					.word	SyntaxError                      ; $17 _
>8066	44 a4					.word	SyntaxError                      ; $18 `
>8068	44 a4					.word	SyntaxError                      ; $19 !!25
>806a	44 a4					.word	SyntaxError                      ; $1a !!26
>806c	44 a4					.word	SyntaxError                      ; $1b {
>806e	db 8e					.word	OraInteger                       ; $1c |
>8070	44 a4					.word	SyntaxError                      ; $1d }
>8072	44 a4					.word	SyntaxError                      ; $1e ~
>8074	44 a4					.word	SyntaxError                      ; $1f [7m<7F>[m
>8076	44 a4					.word	SyntaxError                      ; $20
>8078	67 8f					.word	WordIndirect                     ; $21 !
>807a	44 a4					.word	SyntaxError                      ; $22 "
>807c	44 a4					.word	SyntaxError                      ; $23 #
>807e	44 a4					.word	SyntaxError                      ; $24 $
>8080	c8 9e					.word	IntegerModulus                   ; $25 %
>8082	95 8e					.word	AndInteger                       ; $26 &
>8084	44 a4					.word	SyntaxError                      ; $27 '
>8086	44 a4					.word	SyntaxError                      ; $28 (
>8088	44 a4					.word	SyntaxError                      ; $29 )
>808a	3d 9f					.word	MulInteger                       ; $2a *
>808c	2f 8e					.word	AddInteger                       ; $2b +
>808e	44 a4					.word	SyntaxError                      ; $2c ,
>8090	6a 8e					.word	SubInteger                       ; $2d -
>8092	44 a4					.word	SyntaxError                      ; $2e .
>8094	d4 a0					.word	FDivideCommand                   ; $2f /
>8096	44 a4					.word	SyntaxError                      ; $30 0
>8098	44 a4					.word	SyntaxError                      ; $31 1
>809a	44 a4					.word	SyntaxError                      ; $32 2
>809c	44 a4					.word	SyntaxError                      ; $33 3
>809e	44 a4					.word	SyntaxError                      ; $34 4
>80a0	44 a4					.word	SyntaxError                      ; $35 5
>80a2	44 a4					.word	SyntaxError                      ; $36 6
>80a4	44 a4					.word	SyntaxError                      ; $37 7
>80a6	44 a4					.word	SyntaxError                      ; $38 8
>80a8	44 a4					.word	SyntaxError                      ; $39 9
>80aa	44 a4					.word	SyntaxError                      ; $3a :
>80ac	44 a4					.word	SyntaxError                      ; $3b ;
>80ae	74 8c					.word	BinaryCompareLess                ; $3c <
>80b0	6a 8c					.word	BinaryCompareEqual               ; $3d =
>80b2	7e 8c					.word	BinaryCompareGreater             ; $3e >
>80b4	8e 8f					.word	ByteIndirect                     ; $3f ?
.80b6					VectorSet0:
>80b6	97 89					.word	EOLCommand                       ; $80 !0:EOF
>80b8	a4 89					.word	Shift1Command                    ; $81 !1:SH1
>80ba	ac 89					.word	Shift2Command                    ; $82 !2:SH2
>80bc	1a a2					.word	AbsUnary                         ; $83 ABS(
>80be	58 94					.word	AllocUnary                       ; $84 ALLOC(
>80c0	2a a2					.word	AscUnary                         ; $85 ASC(
>80c2	13 95					.word	ChrUnary                         ; $86 CHR$(
>80c4	66 8c					.word	UnaryFalse                       ; $87 FALSE
>80c6	37 a2					.word	FracUnary                        ; $88 FRAC(
>80c8	4d a2					.word	IntUnary                         ; $89 INT(
>80ca	a3 a2					.word	IsValUnary                       ; $8a ISVAL(
>80cc	ed 95					.word	Unary_Left                       ; $8b LEFT$(
>80ce	5f a2					.word	LenUnary                         ; $8c LEN(
>80d0	17 96					.word	Unary_Mid                        ; $8d MID$(
>80d2	b0 94					.word	Unary_Not                        ; $8e NOT(
>80d4	fd 95					.word	Unary_Right                      ; $8f RIGHT$(
>80d6	c6 94					.word	Unary_Rnd                        ; $90 RND(
>80d8	79 a2					.word	SgnUnary                         ; $91 SGN(
>80da	25 95					.word	SpcUnary                         ; $92 SPC(
>80dc	40 95					.word	Unary_Str                        ; $93 STR$(
>80de	5a 8c					.word	UnaryTrue                        ; $94 TRUE
>80e0	99 a2					.word	ValUnary                         ; $95 VAL(
>80e2	a8 85					.word	ForCommand                       ; $96 FOR
>80e4	f5 86					.word	IfCommand                        ; $97 IF
>80e6	b4 89					.word	Unused1                          ; $98 PROC
>80e8	e6 88					.word	Command_REPEAT                   ; $99 REPEAT
>80ea	bf 8b					.word	Command_WHILE                    ; $9a WHILE
>80ec	1e 87					.word	EndIf                            ; $9b ENDIF
>80ee	54 9e					.word	Command_ENDPROC                  ; $9c ENDPROC
>80f0	62 86					.word	NextCommand                      ; $9d NEXT
>80f2	b4 89					.word	Unused4                          ; $9e THEN
>80f4	ef 88					.word	Command_UNTIL                    ; $9f UNTIL
>80f6	e0 8b					.word	Command_WEND                     ; $a0 WEND
>80f8	7d 84					.word	CallCommand                      ; $a1 CALL
>80fa	44 a4					.word	SyntaxError                      ; $a2 CLS
>80fc	e0 84					.word	Command_Data                     ; $a3 DATA
>80fe	e8 84					.word	DimCommand                       ; $a4 DIM
>8100	b4 89					.word	Unused3                          ; $a5 DOWNTO
>8102	17 87					.word	ElseCode                         ; $a6 ELSE
>8104	bb 86					.word	Command_GOSUB                    ; $a7 GOSUB
>8106	d9 86					.word	GotoCommand                      ; $a8 GOTO
>8108	1f 87					.word	LetCommand                       ; $a9 LET
>810a	f8 87					.word	Command_Print                    ; $aa PRINT
>810c	80 88					.word	Command_Read                     ; $ab READ
>810e	d9 88					.word	RemCommand                       ; $ac REM
>8110	cb 86					.word	Command_RETURN                   ; $ad RETURN
>8112	b4 89					.word	Unused2                          ; $ae TO
.8114					VectorSet1:
>8114	44 a4					.word	SyntaxError                      ; $80 !0:EOF
>8116	44 a4					.word	SyntaxError                      ; $81 !1:SH1
>8118	44 a4					.word	SyntaxError                      ; $82 !2:SH2
>811a	4e 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>811c	6d 84					.word	AssertCommand                    ; $84 ASSERT
>811e	8b 84					.word	ClearCommand                     ; $85 CLEAR
>8120	a5 85					.word	EndCommand                       ; $86 END
>8122	58 87					.word	Command_List                     ; $87 LIST
>8124	ee 87					.word	NewCommand                       ; $88 NEW
>8126	08 89					.word	Command_Restore                  ; $89 RESTORE
>8128	3a 89					.word	CommandRUN                       ; $8a RUN
>812a	b7 89					.word	StopCommand                      ; $8b STOP
.812c					VectorSet2:
>812c	44 a4					.word	SyntaxError                      ; $80 !0:EOF
>812e	44 a4					.word	SyntaxError                      ; $81 !1:SH1
>8130	44 a4					.word	SyntaxError                      ; $82 !2:SH2
>8132	07 a3					.word	Assemble_adc                     ; $83 ADC
>8134	ff a2					.word	Assemble_and                     ; $84 AND
>8136	1b a3					.word	Assemble_asl                     ; $85 ASL
>8138	85 a3					.word	Assemble_bcc                     ; $86 BCC
>813a	89 a3					.word	Assemble_bcs                     ; $87 BCS
>813c	91 a3					.word	Assemble_beq                     ; $88 BEQ
>813e	48 a3					.word	Assemble_bit                     ; $89 BIT
>8140	79 a3					.word	Assemble_bmi                     ; $8a BMI
>8142	8d a3					.word	Assemble_bne                     ; $8b BNE
>8144	75 a3					.word	Assemble_bpl                     ; $8c BPL
>8146	95 a3					.word	Assemble_bra                     ; $8d BRA
>8148	99 a3					.word	Assemble_brk                     ; $8e BRK
>814a	7d a3					.word	Assemble_bvc                     ; $8f BVC
>814c	81 a3					.word	Assemble_bvs                     ; $90 BVS
>814e	a1 a3					.word	Assemble_clc                     ; $91 CLC
>8150	f5 a3					.word	Assemble_cld                     ; $92 CLD
>8152	b5 a3					.word	Assemble_cli                     ; $93 CLI
>8154	e5 a3					.word	Assemble_clv                     ; $94 CLV
>8156	13 a3					.word	Assemble_cmp                     ; $95 CMP
>8158	5c a3					.word	Assemble_cpx                     ; $96 CPX
>815a	57 a3					.word	Assemble_cpy                     ; $97 CPY
>815c	39 a3					.word	Assemble_dec                     ; $98 DEC
>815e	f1 a3					.word	Assemble_dex                     ; $99 DEX
>8160	cd a3					.word	Assemble_dey                     ; $9a DEY
>8162	03 a3					.word	Assemble_eor                     ; $9b EOR
>8164	3e a3					.word	Assemble_inc                     ; $9c INC
>8166	fd a3					.word	Assemble_inx                     ; $9d INX
>8168	ed a3					.word	Assemble_iny                     ; $9e INY
>816a	70 a3					.word	Assemble_jmp                     ; $9f JMP
>816c	6b a3					.word	Assemble_jsr                     ; $a0 JSR
>816e	0f a3					.word	Assemble_lda                     ; $a1 LDA
>8170	34 a3					.word	Assemble_ldx                     ; $a2 LDX
>8172	52 a3					.word	Assemble_ldy                     ; $a3 LDY
>8174	25 a3					.word	Assemble_lsr                     ; $a4 LSR
>8176	01 a4					.word	Assemble_nop                     ; $a5 NOP
>8178	fb a2					.word	Assemble_ora                     ; $a6 ORA
>817a	b1 a3					.word	Assemble_pha                     ; $a7 PHA
>817c	9d a3					.word	Assemble_php                     ; $a8 PHP
>817e	f9 a3					.word	Assemble_phx                     ; $a9 PHX
>8180	b9 a3					.word	Assemble_phy                     ; $aa PHY
>8182	c1 a3					.word	Assemble_pla                     ; $ab PLA
>8184	a5 a3					.word	Assemble_plp                     ; $ac PLP
>8186	09 a4					.word	Assemble_plx                     ; $ad PLX
>8188	c9 a3					.word	Assemble_ply                     ; $ae PLY
>818a	20 a3					.word	Assemble_rol                     ; $af ROL
>818c	2a a3					.word	Assemble_ror                     ; $b0 ROR
>818e	ad a3					.word	Assemble_rti                     ; $b1 RTI
>8190	bd a3					.word	Assemble_rts                     ; $b2 RTS
>8192	17 a3					.word	Assemble_sbc                     ; $b3 SBC
>8194	a9 a3					.word	Assemble_sec                     ; $b4 SEC
>8196	05 a4					.word	Assemble_sed                     ; $b5 SED
>8198	c5 a3					.word	Assemble_sei                     ; $b6 SEI
>819a	0b a3					.word	Assemble_sta                     ; $b7 STA
>819c	2f a3					.word	Assemble_stx                     ; $b8 STX
>819e	4d a3					.word	Assemble_sty                     ; $b9 STY
>81a0	43 a3					.word	Assemble_stz                     ; $ba STZ
>81a2	e1 a3					.word	Assemble_tax                     ; $bb TAX
>81a4	dd a3					.word	Assemble_tay                     ; $bc TAY
>81a6	66 a3					.word	Assemble_trb                     ; $bd TRB
>81a8	61 a3					.word	Assemble_tsb                     ; $be TSB
>81aa	e9 a3					.word	Assemble_tsx                     ; $bf TSX
>81ac	d1 a3					.word	Assemble_txa                     ; $c0 TXA
>81ae	d9 a3					.word	Assemble_txs                     ; $c1 TXS
>81b0	d5 a3					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81b2					AssembleGroup1:
.81b2	a9 ff		lda #$ff			lda 	#$FF
.81b4	8d 23 07	sta $0723			sta 	ModeMask 					; initialise the mode mask - all for all
.81b7	80 02		bra $81bb			bra 	AsmGroup12
.81b9					AssembleGroup2:
.81b9	a5 00		lda $00				lda 	$00
.81bb					AsmGroup12:
.81bb	8d 21 07	sta $0721			sta 	IsGroup1 					; save the 'group 1' flag
.81be	68		pla				pla 								; pop the return address to access the information following.
.81bf	fa		plx				plx
.81c0	20 49 82	jsr $8249			jsr 	AccessParameters 			; get opcode and save as base
.81c3	8d 22 07	sta $0722			sta 	BaseOpcode
.81c6	ad 21 07	lda $0721			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.81c9	d0 08		bne $81d3			bne 	_AG12HaveMask
.81cb	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.81cd	20 51 82	jsr $8251			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.81d0	8d 23 07	sta $0723			sta 	ModeMask
.81d3					_AG12HaveMask:
.81d3	20 8c 83	jsr $838c			jsr 	TypeAndCalculateOperand 	; get zero page type
.81d6	da		phx				phx 								; save found address mode
.81d7	20 b5 82	jsr $82b5			jsr 	AssembleModeX
.81da	fa		plx				plx  								; restore address mode
.81db	b0 0b		bcs $81e8			bcs 	_AG12Exit
.81dd	20 e9 81	jsr $81e9			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.81e0	20 b5 82	jsr $82b5			jsr 	AssembleModeX
.81e3	b0 03		bcs $81e8			bcs 	_AG12Exit
.81e5	4c 44 a4	jmp $a444			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.81e8					_AG12Exit:
.81e8	60		rts				rts
.81e9					PromoteToAbsolute:
.81e9	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.81eb	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.81ed	f0 19		beq $8208			beq 	_PTADo
.81ef	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.81f1	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.81f3	f0 13		beq $8208			beq 	_PTADo
.81f5	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.81f7	e0 80		cpx #$80			cpx 	#AM_ZEROY
.81f9	f0 0d		beq $8208			beq 	_PTADo
.81fb	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.81fd	e0 d1		cpx #$d1			cpx 	#AM_IND
.81ff	f0 07		beq $8208			beq 	_PTADo
.8201	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8203	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8205	f0 01		beq $8208			beq 	_PTADo
.8207	60		rts				rts
.8208					_PTADo:
.8208	aa		tax				tax
.8209	60		rts				rts
.820a					AssembleGroup3:
.820a	68		pla				pla 								; get parameters, which is just the opcode.
.820b	fa		plx				plx
.820c	20 49 82	jsr $8249			jsr 	AccessParameters 			; get and output opcode
.820f	20 61 82	jsr $8261			jsr 	AssemblerWriteByte
.8212	20 f0 83	jsr $83f0			jsr 	CalculateOperand 			; get a 16 bit operand
.8215	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8218	38		sec				sec
.8219	ed 1c 07	sbc $071c			sbc 	AssemblerAddress
.821c	48		pha				pha 								; LSB in A
.821d	ad 10 06	lda $0610			lda 	NSMantissa1
.8220	ed 1d 07	sbc $071d			sbc 	AssemblerAddress+1
.8223	aa		tax				tax 								; MSB in X
.8224	68		pla				pla
.8225	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8226	69 7f		adc #$7f			adc 	#$7F
.8228	90 01		bcc $822b			bcc 	_AG3NoCarry
.822a	e8		inx				inx
.822b					_AG3NoCarry:
.822b	38		sec				sec 								; fix back and write out anyways.
.822c	e9 80		sbc #$80			sbc 	#$80
.822e	20 61 82	jsr $8261			jsr 	AssemblerWriteByte
.8231	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8233	f0 0a		beq $823f			beq 	_AG3Exit
.8235	ad 1e 07	lda $071e			lda 	AssemblerControl 			; are we allowing bad values ?
.8238	29 01		and #$01			and 	#1
.823a	f0 03		beq $823f			beq 	_AG3Exit
.823c	4c 49 a4	jmp $a449			jmp 	RangeError 					; no, branch is out of range
.823f					_AG3Exit:
.823f	60		rts				rts
.8240					AssembleGroup4:
.8240	68		pla				pla 								; pop address
.8241	fa		plx				plx
.8242	20 49 82	jsr $8249			jsr 	AccessParameters 			; access and get first
.8245	20 61 82	jsr $8261			jsr 	AssemblerWriteByte 			; output it.
.8248	60		rts				rts
.8249					AccessParameters:
.8249	8d 1f 07	sta $071f			sta 	ParamStart
.824c	8e 20 07	stx $0720			stx 	ParamStart+1
.824f	a9 01		lda #$01			lda 	#1
.8251					GetParameter:
.8251	5a		phy				phy
.8252	a8		tay				tay
.8253	ad 1f 07	lda $071f			lda 	ParamStart
.8256	85 36		sta $36				sta 	zTemp0
.8258	ad 20 07	lda $0720			lda 	ParamStart+1
.825b	85 37		sta $37				sta 	zTemp0+1
.825d	b1 36		lda ($36),y			lda 	(zTemp0),y
.825f	7a		ply				ply
.8260	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8261					AssemblerWriteByte:
.8261	48		pha			pha
.8262	ad 1e 07	lda $071e		lda 	AssemblerControl 				; check printing bytes ?
.8265	29 02		and #$02		and 	#2
.8267	f0 1b		beq $8284		beq 	_AWBNoPrint
.8269	ad 1d 07	lda $071d		lda		AssemblerAddress+1 				; print address
.826c	20 9f 82	jsr $829f		jsr 	PrintHex
.826f	ad 1c 07	lda $071c		lda		AssemblerAddress
.8272	20 9f 82	jsr $829f		jsr 	PrintHex
.8275	a9 20		lda #$20		lda 	#' '
.8277	20 91 a6	jsr $a691		jsr 	EXTPrintCharacter
.827a	68		pla			pla 									; print byte
.827b	48		pha			pha
.827c	20 9f 82	jsr $829f		jsr 	PrintHex
.827f	a9 0d		lda #$0d		lda 	#13
.8281	20 91 a6	jsr $a691		jsr 	EXTPrintCharacter
.8284					_AWBNoPrint:
.8284	ad 1c 07	lda $071c		lda		AssemblerAddress				; copy address to zTemp0
.8287	85 36		sta $36			sta 	zTemp0
.8289	ad 1d 07	lda $071d		lda		AssemblerAddress+1
.828c	f0 0e		beq $829c		beq 	_AWBRange
.828e	85 37		sta $37			sta 	zTemp0+1
.8290	68		pla			pla 									; write byte out
.8291	92 36		sta ($36)		sta 	(zTemp0)
.8293	ee 1c 07	inc $071c		inc 	AssemblerAddress 				; bump address
.8296	d0 03		bne $829b		bne 	_AWBNoCarry
.8298	ee 1d 07	inc $071d		inc 	AssemblerAddress+1
.829b					_AWBNoCarry:
.829b	60		rts			rts
.829c					_AWBRange:
.829c	4c 49 a4	jmp $a449		jmp 	RangeError
.829f					PrintHex:
.829f	48		pha				pha
.82a0	4a		lsr a				lsr 	a
.82a1	4a		lsr a				lsr 	a
.82a2	4a		lsr a				lsr 	a
.82a3	4a		lsr a				lsr 	a
.82a4	20 a8 82	jsr $82a8			jsr 	_PrintNibble
.82a7	68		pla				pla
.82a8					_PrintNibble:
.82a8	29 0f		and #$0f			and 	#15
.82aa	c9 0a		cmp #$0a			cmp 	#10
.82ac	90 02		bcc $82b0			bcc 	_NoShift
.82ae	69 06		adc #$06			adc 	#6
.82b0					_NoShift:
.82b0	69 30		adc #$30			adc 	#48
.82b2	4c 91 a6	jmp $a691			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82b5					AssembleModeX:
.82b5	5a		phy				phy
.82b6	ad 21 07	lda $0721			lda 	IsGroup1
.82b9	f0 17		beq $82d2			beq 	_AMXGroup2
.82bb	8a		txa				txa 							; is it in group # 1
.82bc	29 40		and #$40			and 	#AM_ISG1
.82be	f0 50		beq $8310			beq 	_AMXFail 				; no, give up.
.82c0	8a		txa				txa 							; get back.
.82c1	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.82c3	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.82c5	d0 22		bne $82e9			bne 	_AMXHaveInfo
.82c7	ad 22 07	lda $0722			lda 	BaseOpcode 				; cannot store immediate.
.82ca	c9 81		cmp #$81			cmp 	#$81
.82cc	f0 42		beq $8310			beq 	_AMXFail
.82ce	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.82d0	80 17		bra $82e9			bra 	_AMXHaveInfo 			; odd design decision there.
.82d2					_AMXGroup2:
.82d2	8a		txa				txa 							; is it in group 2 ?
.82d3	29 20		and #$20			and 	#AM_ISG2
.82d5	f0 39		beq $8310			beq 	_AMXFail 				; no, give up.
.82d7	8a		txa				txa 							; get the offset into Y
.82d8	29 1f		and #$1f			and 	#$1F
.82da	4a		lsr a				lsr 	a 						; make it 0-7.
.82db	4a		lsr a				lsr  	a
.82dc	a8		tay				tay
.82dd	ad 23 07	lda $0723			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.82e0					_AMXCheckOkay:
.82e0	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.82e1	88		dey				dey
.82e2	10 fc		bpl $82e0			bpl 	_AMXCheckOkay
.82e4	90 2a		bcc $8310			bcc 	_AMXFail 				; not allowed.
.82e6	8a		txa				txa  							; get mask back
.82e7	29 1f		and #$1f			and 	#$1F
.82e9					_AMXHaveInfo:
.82e9	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.82eb	10 05		bpl $82f2			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.82ed	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.82f0	d0 1e		bne $8310			bne 	_AMXFail
.82f2					_AMXAnySize:
.82f2	18		clc				clc 							; add offset to the base opcode
.82f3	6d 22 07	adc $0722			adc 	BaseOpcode
.82f6					_AMXOutputCode:
.82f6	20 61 82	jsr $8261			jsr 	AssemblerWriteByte 		; write the opcode out.
.82f9	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.82fb	f0 10		beq $830d			beq 	_AMXExit
.82fd	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.8300	20 61 82	jsr $8261			jsr 	AssemblerWriteByte
.8303	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8305	30 06		bmi $830d			bmi 	_AMXExit
.8307	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.830a	20 61 82	jsr $8261			jsr 	AssemblerWriteByte
.830d					_AMXExit:
.830d	7a		ply				ply
.830e	38		sec				sec
.830f	60		rts				rts
.8310					_AMXFail:
.8310	a0 00		ldy #$00			ldy 	#0
.8312					_AMXCheckOddities:
.8312	8a		txa				txa
.8313	d9 3b 83	cmp $833b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8316	d0 16		bne $832e			bne 	_AMXCONext
.8318	b9 39 83	lda $8339,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.831b	cd 22 07	cmp $0722			cmp 	BaseOpcode
.831e	d0 0e		bne $832e			bne 	_AMXCONext
.8320	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8322	10 05		bpl $8329			bpl 	_AMXCONotZero
.8324	ad 10 06	lda $0610			lda 	NSMantissa1
.8327	d0 05		bne $832e			bne 	_AMXCONext
.8329					_AMXCONotZero:
.8329	b9 3a 83	lda $833a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.832c	80 c8		bra $82f6			bra 	_AMXOutputCode 			; and assemble it
.832e					_AMXCONext:
.832e	c8		iny				iny
.832f	c8		iny				iny
.8330	c8		iny				iny
.8331	b9 39 83	lda $8339,y			lda 	ExtraOpcode+0,y 		; end of table
.8334	d0 dc		bne $8312			bne 	_AMXCheckOddities
.8336					_AMXCOFail:
.8336	7a		ply				ply
.8337	18		clc				clc
.8338	60		rts				rts
.8339					ExtraOpcode:
>8339	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>833c	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>833f	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8342	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8345	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8348	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>834b	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>834e	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8351	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8354	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8357	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8358					LabelHere:
.8358	c8		iny				iny 								; skip .
.8359	a2 00		ldx #$00			ldx 	#0 							; get a term
.835b	20 c8 92	jsr $92c8			jsr 	EvaluateTerm 				; get a term
.835e	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.8361	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8363	d0 24		bne $8389			bne 	_ALType
.8365	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8368	85 36		sta $36				sta 	zTemp0
.836a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.836d	85 37		sta $37				sta 	zTemp0+1
.836f	5a		phy				phy 								; copy address in.
.8370	a0 01		ldy #$01			ldy 	#1
.8372	ad 1c 07	lda $071c			lda	 	AssemblerAddress
.8375	92 36		sta ($36)			sta 	(zTemp0)
.8377	ad 1d 07	lda $071d			lda	 	AssemblerAddress+1
.837a	91 36		sta ($36),y			sta 	(zTemp0),y
.837c	c8		iny				iny
.837d	a9 00		lda #$00			lda 	#0
.837f	91 36		sta ($36),y			sta 	(zTemp0),y
.8381	c8		iny				iny
.8382	91 36		sta ($36),y			sta 	(zTemp0),y
.8384	c8		iny				iny
.8385	91 36		sta ($36),y			sta 	(zTemp0),y
.8387	7a		ply				ply
.8388	60		rts				rts
.8389					_ALType:
.8389	4c 4e a4	jmp $a44e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.838c					TypeAndCalculateOperand:
.838c	b1 30		lda ($30),y			lda 	(codePtr),y
.838e	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8390	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8392	f0 5b		beq $83ef			beq 	_TACOExit
.8394	c9 80		cmp #$80			cmp 	#KWC_EOL
.8396	f0 57		beq $83ef			beq 	_TACOExit
.8398	c8		iny				iny
.8399	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.839b	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.839d	f0 51		beq $83f0			beq 	CalculateOperand
.839f	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83a1	f0 1f		beq $83c2			beq 	_TACOIndirect
.83a3	88		dey				dey 								; undo get of first character
.83a4	20 f0 83	jsr $83f0			jsr 	CalculateOperand 			; get operand
.83a7	b1 30		lda ($30),y			lda 	(codePtr),y
.83a9	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83ab	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83ad	d0 40		bne $83ef			bne 	_TACOExit
.83af	c8		iny				iny
.83b0	20 24 9e	jsr $9e24			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83b3	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83b5	c9 58		cmp #$58			cmp 	#'X'
.83b7	f0 36		beq $83ef			beq 	_TACOExit
.83b9	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.83bb	c9 59		cmp #$59			cmp 	#'Y'
.83bd	f0 30		beq $83ef			beq 	_TACOExit
.83bf					_TACOSyntax:
.83bf	4c 44 a4	jmp $a444			jmp 	SyntaxError
.83c2					_TACOIndirect:
.83c2	20 f0 83	jsr $83f0			jsr 	CalculateOperand 			; get the operand
.83c5	b1 30		lda ($30),y			lda 	(codePtr),y
.83c7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.83c9	f0 17		beq $83e2			beq 	_TACOIndX
.83cb	20 62 9e	jsr $9e62			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.83ce	b1 30		lda ($30),y			lda 	(codePtr),y
.83d0	a2 d1		ldx #$d1			ldx 	#AM_IND
.83d2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.83d4	d0 19		bne $83ef			bne 	_TACOExit
.83d6	c8		iny				iny
.83d7	20 24 9e	jsr $9e24			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83da	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.83dc	d0 e1		bne $83bf			bne 	_TACOSyntax
.83de	a2 d0		ldx #$d0			ldx 	#AM_INDY
.83e0	80 0d		bra $83ef			bra 	_TACOExit
.83e2					_TACOIndX:
.83e2	c8		iny				iny
.83e3	20 24 9e	jsr $9e24			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83e6	c9 58		cmp #$58			cmp 	#'X' 						; check X
.83e8	d0 d5		bne $83bf			bne 	_TACOSyntax
.83ea	20 62 9e	jsr $9e62			jsr 	CheckRightBracket			; check )
.83ed	a2 c0		ldx #$c0			ldx 	#AM_INDX
.83ef					_TACOExit:
.83ef	60		rts				rts
.83f0					CalculateOperand:
.83f0	48		pha				pha
.83f1	da		phx				phx
.83f2	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.83f4	20 cd 96	jsr $96cd			jsr 	Evaluate16BitInteger
.83f7	fa		plx				plx
.83f8	68		pla				pla
.83f9	60		rts				rts
.9e24					TACOCheckXY:
.9e24	b1 30		lda ($30),y			lda 	(codePtr),y
.9e26	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9e28	c9 40		cmp #$40			cmp 	#$40
.9e2a	d0 21		bne $9e4d			bne 	_TCXYFail
.9e2c	b1 30		lda ($30),y			lda 	(codePtr),y
.9e2e	18		clc				clc
.9e2f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e31	85 37		sta $37				sta 	zTemp0+1
.9e33	c8		iny				iny
.9e34	b1 30		lda ($30),y			lda 	(codePtr),y
.9e36	c8		iny				iny
.9e37	85 36		sta $36				sta 	zTemp0
.9e39	5a		phy				phy 								; save position
.9e3a	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9e3c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e3e	d0 0c		bne $9e4c			bne 	_TCXYPopFail
.9e40	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9e42	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e44	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9e46	f0 08		beq $9e50			beq 	_TCXYFound
.9e48	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9e4a	f0 04		beq $9e50			beq 	_TCXYFound
.9e4c					_TCXYPopFail:
.9e4c	7a		ply				ply
.9e4d					_TCXYFail:
.9e4d	a9 00		lda #$00			lda 	#0
.9e4f	60		rts				rts
.9e50					_TCXYFound:
.9e50	7a		ply				ply 								; restore position
.9e51	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9e53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83fa					EditProgramCode:
.83fa	ad 25 07	lda $0725			lda 	TokenLineNumber 			; find the line.
.83fd	ae 26 07	ldx $0726			ldx 	TokenLineNumber+1
.8400	20 f1 9d	jsr $9df1			jsr 	MemorySearch
.8403	90 05		bcc $840a			bcc 	_EPCNoDelete 				; reached the end don't delete
.8405	d0 03		bne $840a			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8407	20 d5 a6	jsr $a6d5			jsr 	MemoryDeleteLine 			; delete the line
.840a					_EPCNoDelete:
.840a	ad 27 07	lda $0727			lda 	TokenBuffer 				; buffer empty
.840d	c9 80		cmp #$80			cmp 	#KWC_EOL
.840f	f0 0c		beq $841d			beq 	_EPCNoInsert
.8411	ad 25 07	lda $0725			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8414	ae 26 07	ldx $0726			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8417	20 f1 9d	jsr $9df1			jsr 	MemorySearch
.841a	20 0c a7	jsr $a70c			jsr 	MemoryInsertLine 			; insert the line
.841d					_EPCNoInsert:
.841d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.841e					WarmStart:
.841e	a2 ff		ldx #$ff			ldx 	#$FF
.8420	9a		txs				txs
.8421	20 a7 a6	jsr $a6a7			jsr 	EXTInputLine 				; get line to lineBuffer
.8424	20 21 9b	jsr $9b21			jsr 	TokeniseLine 				; tokenise the line
.8427	ad 25 07	lda $0725			lda 	TokenLineNumber 			; line number ?
.842a	0d 26 07	ora $0726			ora 	TokenLineNumber+1
.842d	d0 17		bne $8446			bne 	_WSEditCode 				; if so,edit code.
.842f	9c 24 07	stz $0724			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8432	a9 24		lda #$24			lda 	#((TokenOffset) & $FF)
.8434	85 30		sta $30				sta 	codePtr
.8436	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8438	85 31		sta $31				sta 	codePtr+1
.843a	ad 27 07	lda $0727			lda 	TokenBuffer 				; nothing to run
.843d	c9 80		cmp #$80			cmp 	#KWC_EOL
.843f	f0 dd		beq $841e			beq 	WarmStart
.8441	20 4c 89	jsr $894c			jsr 	RUNCodePointerLine 			; execute that line.
.8444	80 d8		bra $841e			bra 	WarmStart
.8446					_WSEditCode:
.8446	20 fa 83	jsr $83fa			jsr 	EditProgramCode
.8449	20 8b 84	jsr $848b			jsr 	ClearCommand
.844c	80 d0		bra $841e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.844e					AssembleCommand:
.844e	a2 00		ldx #$00			ldx 	#0
.8450	20 cd 96	jsr $96cd			jsr 	Evaluate16BitInteger 		; start address
.8453	ad 08 06	lda $0608			lda 	NSMantissa0
.8456	8d 1c 07	sta $071c			sta 	AssemblerAddress
.8459	ad 10 06	lda $0610			lda 	NSMantissa1
.845c	8d 1d 07	sta $071d			sta 	AssemblerAddress+1
.845f	20 6a 9e	jsr $9e6a			jsr 	CheckComma
.8462	20 d9 96	jsr $96d9			jsr 	Evaluate8BitInteger 		; options
.8465	ad 08 06	lda $0608			lda 	NSMantissa0
.8468	8d 1e 07	sta $071e			sta 	AssemblerControl
.846b	60		rts				rts
.846c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.846d					AssertCommand:
.846d	a2 00		ldx #$00			ldx 	#0
.846f	20 b8 96	jsr $96b8			jsr 	EvaluateInteger 			; the assert test
.8472	20 71 97	jsr $9771			jsr 	NSMIsZero 					; exit if result is non zero.
.8475	d0 05		bne $847c			bne 	_ACExit
.8477	a9 0a		lda #$0a		lda	#10
.8479	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.847c					_ACExit:
.847c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.847d					CallCommand:
.847d	a2 00		ldx #$00			ldx 	#0
.847f	20 cd 96	jsr $96cd			jsr 	Evaluate16BitInteger
.8482	ad 10 06	lda $0610			lda 	NSMantissa1
.8485	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8488	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.848b					ClearCommand:
.848b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.848d	85 36		sta $36				sta 	0+zTemp0
.848f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8491	85 37		sta $37				sta 	1+zTemp0
.8493					_ClearZeroLoop:
.8493	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8495	f0 24		beq $84bb			beq 	_ClearZeroEnd
.8497	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8499	a9 00		lda #$00			lda 	#0
.849b					_ClearOneVariable:
.849b	91 36		sta ($36),y			sta 	(zTemp0),y
.849d	c8		iny				iny
.849e	c0 08		cpy #$08			cpy 	#8
.84a0	d0 f9		bne $849b			bne 	_ClearOneVariable
.84a2	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84a4	b1 36		lda ($36),y			lda 	(zTemp0),y
.84a6	c9 18		cmp #$18			cmp 	#NSTProcedure
.84a8	d0 04		bne $84ae			bne 	_ClearNotProcedure
.84aa	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84ac	91 36		sta ($36),y			sta 	(zTemp0),y
.84ae					_ClearNotProcedure:
.84ae	18		clc				clc 								; go to the next variable
.84af	b2 36		lda ($36)			lda 	(zTemp0)
.84b1	65 36		adc $36				adc 	zTemp0
.84b3	85 36		sta $36				sta 	zTemp0
.84b5	90 dc		bcc $8493			bcc 	_ClearZeroLoop
.84b7	e6 37		inc $37				inc 	zTemp0+1
.84b9	80 d8		bra $8493			bra 	_ClearZeroLoop
.84bb					_ClearZeroEnd:
.84bb	18		clc				clc
.84bc	a5 36		lda $36				lda 	zTemp0
.84be	69 01		adc #$01			adc 	#1
.84c0	8d 0c 07	sta $070c			sta 	lowMemPtr
.84c3	a5 37		lda $37				lda 	zTemp0+1
.84c5	69 00		adc #$00			adc 	#0
.84c7	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.84ca	20 d1 97	jsr $97d1			jsr 	StackReset
.84cd	20 1d a6	jsr $a61d			jsr 	StringSystemInitialise
.84d0	20 0e 8b	jsr $8b0e			jsr 	ProcedureScan
.84d3	20 08 89	jsr $8908			jsr 	Command_Restore
.84d6	9c 1c 07	stz $071c			stz 	AssemblerAddress
.84d9	9c 1d 07	stz $071d			stz 	AssemblerAddress+1
.84dc	9c 1e 07	stz $071e			stz 	AssemblerControl
.84df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84e0					Command_Data:
.84e0	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.84e2	a2 80		ldx #$80			ldx 	#KWC_EOL
.84e4	20 60 8b	jsr $8b60			jsr 	ScanForward
.84e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.84e8					DimCommand:
.84e8	b1 30		lda ($30),y			lda 	(codePtr),y
.84ea	29 c0		and #$c0			and 	#$C0
.84ec	c9 40		cmp #$40			cmp 	#$40
.84ee	d0 7a		bne $856a			bne 	_DCSyntax
.84f0	b1 30		lda ($30),y			lda 	(codePtr),y
.84f2	18		clc				clc
.84f3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84f5	85 3f		sta $3f				sta 	zaTemp+1
.84f7	c8		iny				iny
.84f8	b1 30		lda ($30),y			lda 	(codePtr),y
.84fa	c8		iny				iny
.84fb	85 3e		sta $3e				sta 	zaTemp
.84fd	5a		phy				phy
.84fe	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8500	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8502	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8504	c9 18		cmp #$18			cmp 	#NSTProcedure
.8506	f0 62		beq $856a			beq 	_DCSyntax
.8508	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.850a	29 04		and #$04			and 	#NSBIsArray
.850c	f0 64		beq $8572			beq 	_DCType
.850e	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8510	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8512	d0 59		bne $856d			bne 	_DCRedefine
.8514	7a		ply				ply
.8515	20 75 85	jsr $8575			jsr 	_DCGetSize 				; get array size, check it.
.8518	5a		phy				phy
.8519	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.851b	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.851d	7a		ply				ply 							; is there a second (e.g. ,x)
.851e	b1 30		lda ($30),y			lda 	(codePtr),y
.8520	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8522	d0 0a		bne $852e			bne 	_DCOneDimension
.8524	c8		iny				iny 							; skip comma
.8525	20 75 85	jsr $8575			jsr 	_DCGetSize 				; get 2nd array size
.8528	5a		phy				phy
.8529	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.852b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.852d	7a		ply				ply
.852e					_DCOneDimension:
.852e	5a		phy				phy 							; save position
.852f	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8531	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8533	aa		tax				tax
.8534	c8		iny				iny
.8535	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8537	e8		inx				inx 							; bump them.
.8538	1a		inc a				inc 	a
.8539	20 e4 a2	jsr $a2e4			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.853c	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.853e	29 e0		and #$e0			and 	#$E0
.8540	d0 23		bne $8565			bne 	_DCSize
.8542	a0 02		ldy #$02			ldy 	#2 						; get base type
.8544	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8546	20 83 85	jsr $8583			jsr 	ScaleByBaseType 		; scale by base type
.8549	a5 36		lda $36				lda 	zTemp0
.854b	a6 37		ldx $37				ldx 	zTemp0+1
.854d	20 77 94	jsr $9477			jsr 	AllocateXABytes 		; allocate memory
.8550	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8552	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8554	c8		iny				iny
.8555	8a		txa				txa
.8556	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8558	7a		ply				ply 							; get position back
.8559	20 62 9e	jsr $9e62			jsr 	CheckRightBracket 		; check )
.855c	b1 30		lda ($30),y			lda 	(codePtr),y
.855e	c8		iny				iny 							; consume in case
.855f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8561	f0 85		beq $84e8			beq 	DimCommand
.8563	88		dey				dey 							; undo consume
.8564	60		rts				rts
.8565					_DCSize:
.8565	a9 16		lda #$16		lda	#22
.8567	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.856a					_DCSyntax:
.856a	4c 44 a4	jmp $a444			jmp 	SyntaxError
.856d					_DCRedefine:
.856d	a9 15		lda #$15		lda	#21
.856f	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.8572					_DCType:
.8572	4c 4e a4	jmp $a44e			jmp 	TypeError
.8575					_DCGetSize:
.8575	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8577	20 d9 96	jsr $96d9			jsr 	Evaluate8BitInteger 	; get array dimension
.857a	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.857c	f0 e7		beq $8565			beq 	_DCSize
.857e	c9 fe		cmp #$fe			cmp 	#254
.8580	f0 e3		beq $8565			beq 	_DCSize
.8582	60		rts				rts
.8583					ScaleByBaseType:
.8583	29 10		and #$10			and 	#NSBIsString 			; is it string
.8585	d0 19		bne $85a0			bne 	_SBBTString
.8587	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8589	48		pha				pha
.858a	a5 36		lda $36				lda 	zTemp0
.858c	48		pha				pha
.858d	06 36		asl $36				asl 	zTemp0 					; x 2
.858f	26 37		rol $37				rol 	zTemp0+1
.8591	06 36		asl $36				asl 	zTemp0 					; x 4
.8593	26 37		rol $37				rol 	zTemp0+1
.8595	68		pla				pla 							; add stacked value = x 5
.8596	65 36		adc $36				adc 	zTemp0
.8598	85 36		sta $36				sta 	zTemp0
.859a	68		pla				pla
.859b	65 37		adc $37				adc 	zTemp0+1
.859d	85 37		sta $37				sta 	zTemp0+1
.859f	60		rts				rts
.85a0					_SBBTString:
.85a0	06 36		asl $36				asl 	zTemp0
.85a2	26 37		rol $37				rol 	zTemp0+1
.85a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85a5					EndCommand:
.85a5	4c 1e 84	jmp $841e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85a8					ForCommand:
.85a8	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85aa	20 7e 97	jsr $977e			jsr 	StackOpen
.85ad	a2 00		ldx #$00			ldx 	#0
.85af	20 c8 92	jsr $92c8			jsr 	EvaluateTerm
.85b2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85b5	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85b7	d0 49		bne $8602			bne		_FCError
.85b9	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85bb	20 72 9e	jsr $9e72			jsr 	CheckNextA
.85be	e8		inx				inx
.85bf	20 b8 96	jsr $96b8			jsr 	EvaluateInteger 			; <from> in +1
.85c2	b1 30		lda ($30),y			lda 	(codePtr),y
.85c4	c8		iny				iny 								; consume it
.85c5	48		pha				pha 								; save on stack for later
.85c6	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.85c8	f0 04		beq $85ce			beq 	_FCNoSyntax
.85ca	c9 ae		cmp #$ae			cmp 	#KWD_TO
.85cc	d0 37		bne $8605			bne 	_FCSyntaxError
.85ce					_FCNoSyntax:
.85ce	e8		inx				inx
.85cf	20 b8 96	jsr $96b8			jsr 	EvaluateInteger
.85d2	20 b0 97	jsr $97b0			jsr 	STKSaveCodePosition 		; save loop back position
.85d5	68		pla				pla 								; restore DOWNTO or TO
.85d6	5a		phy				phy 								; save Y on the stack
.85d7	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85d9	f0 02		beq $85dd			beq 	_FCNotDownTo
.85db	a9 02		lda #$02			lda 	#2
.85dd					_FCNotDownTo:
.85dd	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85de	a0 10		ldy #$10			ldy 	#16
.85e0	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85e2	a0 06		ldy #$06			ldy 	#6
.85e4	ad 08 06	lda $0608			lda 	NSMantissa0
.85e7	91 34		sta ($34),y			sta 	(basicStack),y
.85e9	ad 10 06	lda $0610			lda 	NSMantissa1
.85ec	c8		iny				iny
.85ed	91 34		sta ($34),y			sta 	(basicStack),y
.85ef	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.85f1	a2 01		ldx #$01			ldx 	#1
.85f3	20 08 86	jsr $8608			jsr 	FCIntegerToStack
.85f6	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.85f8	a2 02		ldx #$02			ldx 	#2
.85fa	20 08 86	jsr $8608			jsr 	FCIntegerToStack
.85fd	20 28 86	jsr $8628			jsr 	CopyIndexToReference
.8600	7a		ply				ply 								; restore position
.8601	60		rts				rts
.8602					_FCError:
.8602	4c 4e a4	jmp $a44e			jmp 	TypeError
.8605					_FCSyntaxError:
.8605	4c 44 a4	jmp $a444			jmp 	SyntaxError
.8608					FCIntegerToStack:
.8608	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.860b	10 03		bpl $8610			bpl	 	_FCNotNegative
.860d	20 f6 96	jsr $96f6			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8610					_FCNotNegative:
.8610	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8613	91 34		sta ($34),y			sta 	(basicStack),y
.8615	c8		iny				iny
.8616	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8619	91 34		sta ($34),y			sta 	(basicStack),y
.861b	c8		iny				iny
.861c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.861f	91 34		sta ($34),y			sta 	(basicStack),y
.8621	c8		iny				iny
.8622	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8625	91 34		sta ($34),y			sta 	(basicStack),y
.8627	60		rts				rts
.8628					CopyIndexToReference:
.8628	5a		phy				phy
.8629	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.862b	38		sec				sec 								; (because we copy from offset 8)
.862c	b1 34		lda ($34),y			lda 	(basicStack),y
.862e	e9 08		sbc #$08			sbc 	#8
.8630	85 36		sta $36				sta 	zTemp0
.8632	c8		iny				iny
.8633	b1 34		lda ($34),y			lda 	(basicStack),y
.8635	e9 00		sbc #$00			sbc 	#0
.8637	85 37		sta $37				sta 	zTemp0+1
.8639	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.863b	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.863d	b1 34		lda ($34),y			lda 	(basicStack),y
.863f	0a		asl a				asl 	a 							; into carry
.8640	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8642	90 14		bcc $8658			bcc 	_CITRNormal
.8644	38		sec				sec
.8645					_CITRNegative:
.8645	a9 00		lda #$00			lda 	#0
.8647	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8649	91 36		sta ($36),y			sta 	(zTemp0),y
.864b	c8		iny				iny
.864c	ca		dex				dex
.864d	d0 f6		bne $8645			bne 	_CITRNegative
.864f	88		dey				dey 								; look at MSB of mantissa
.8650	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8652	09 80		ora #$80			ora 	#$80
.8654	91 36		sta ($36),y			sta 	(zTemp0),y
.8656	7a		ply				ply
.8657	60		rts				rts
.8658					_CITRNormal:
.8658	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.865a	91 36		sta ($36),y			sta 	(zTemp0),y
.865c	c8		iny				iny
.865d	ca		dex				dex
.865e	d0 f8		bne $8658			bne 	_CITRNormal
.8660	7a		ply				ply 								; and exit.
.8661	60		rts				rts
.8662					NextCommand:
.8662	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8664	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8666	20 a5 97	jsr $97a5			jsr 	StackCheckFrame
.8669	5a		phy				phy
.866a	a0 10		ldy #$10			ldy 	#16 						; get the step count
.866c	b1 34		lda ($34),y			lda 	(basicStack),y
.866e	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8670	30 02		bmi $8674			bmi 	_NCStepNeg
.8672	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8674					_NCStepNeg:
.8674	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8676	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8678	18		clc				clc
.8679					_NCBump:
.8679	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.867b	91 34		sta ($34),y			sta 	(basicStack),y
.867d	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.867f	c8		iny				iny 								; next byte
.8680	ca		dex				dex 								; do four times
.8681	d0 f6		bne $8679			bne 	_NCBump
.8683	20 28 86	jsr $8628			jsr		CopyIndexToReference		; copy it to the reference variable.
.8686	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8688	b1 34		lda ($34),y			lda 	(basicStack),y
.868a	0a		asl a				asl 	a 							; sign bit to carry
.868b	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.868d	85 38		sta $38				sta 	zTemp1
.868f	90 02		bcc $8693			bcc 	_NCCompRev 					; use if step is +ve
.8691	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8693					_NCCompRev:
.8693	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8695	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8697	85 39		sta $39				sta 	zTemp1+1
.8699	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.869b	38		sec				sec
.869c					_NCCompare:
.869c	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.869e	b1 34		lda ($34),y			lda 	(basicStack),y
.86a0	a4 39		ldy $39				ldy 	zTemp1+1
.86a2	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86a4	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86a6	e6 39		inc $39				inc 	zTemp1+1
.86a8	ca		dex				dex 								; do it 4 times.
.86a9	d0 f1		bne $869c			bne 	_NCCompare
.86ab	50 02		bvc $86af			bvc 	_NCNoOverflow 				; convert to signed comparison
.86ad	49 80		eor #$80			eor 	#$80
.86af					_NCNoOverflow:
.86af	7a		ply				ply 								; restore Y position
.86b0	0a		asl a				asl 	a 							; is bit 7 set.
.86b1	90 04		bcc $86b7			bcc 	_NCLoopback 				; if no , >= so loop back
.86b3	20 97 97	jsr $9797			jsr 	StackClose 					; exit the loop
.86b6	60		rts				rts
.86b7					_NCLoopBack:
.86b7	20 c1 97	jsr $97c1			jsr 	STKLoadCodePosition 		; loop back
.86ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86bb					Command_GOSUB:
.86bb	a2 00		ldx #$00			ldx 	#0
.86bd	20 cd 96	jsr $96cd			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86c0	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86c2	20 7e 97	jsr $977e			jsr 	StackOpen 					; create frame
.86c5	20 b0 97	jsr $97b0			jsr 	STKSaveCodePosition 		; save current position
.86c8	4c de 86	jmp $86de			jmp 	GotoStackX
.86cb					Command_RETURN:
.86cb	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86cd	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86cf	20 a5 97	jsr $97a5			jsr 	StackCheckFrame
.86d2	20 c1 97	jsr $97c1			jsr 	STKLoadCodePosition 		; restore code position
.86d5	20 97 97	jsr $9797			jsr 	StackClose
.86d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86d9					GotoCommand:
.86d9	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86db	20 cd 96	jsr $96cd			jsr 	Evaluate16BitInteger
.86de					GotoStackX:
.86de	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86e1	48		pha				pha 								; it is slightly inefficient, just in cases.
.86e2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.86e5	fa		plx				plx
.86e6	20 f1 9d	jsr $9df1			jsr 	MemorySearch 				; transfer to line number AX.
.86e9	90 05		bcc $86f0			bcc 	_GotoError 					; not found, off end.
.86eb	d0 03		bne $86f0			bne 	_GotoError 					; not found exactly
.86ed	4c 45 89	jmp $8945			jmp 	RunNewLine 					; and go straight to new line code.
.86f0					_GotoError:
.86f0	a9 0d		lda #$0d		lda	#13
.86f2	4c ee 8b	jmp $8bee		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.86f5					IfCommand:
.86f5	a2 00		ldx #$00			ldx 	#0 							; If what.
.86f7	20 95 96	jsr $9695			jsr 	EvaluateNumber
.86fa	b1 30		lda ($30),y			lda 	(codePtr),y
.86fc	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.86fe	d0 0a		bne $870a			bne 	_IFStructured
.8700	c8		iny				iny 								; consume THEN
.8701	20 71 97	jsr $9771			jsr 	NSMIsZero 					; is it zero
.8704	f0 01		beq $8707			beq 	_IfFail 					; if fail, go to next line
.8706	60		rts				rts 								; if THEN just continue
.8707					_IfFail:
.8707	4c 97 89	jmp $8997			jmp 	EOLCommand
.870a					_IfStructured:
.870a	20 71 97	jsr $9771			jsr 	NSMIsZero 					; is it zero
.870d	d0 07		bne $8716			bne 	_IfExit 					; if not, then continue normally.
.870f	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.8711	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8713	20 60 8b	jsr $8b60			jsr 	ScanForward 				; and run from there/
.8716					_IfExit:
.8716	60		rts				rts
.8717					ElseCode:
.8717	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8719	aa		tax				tax 								; so just go to the structure exit
.871a	20 60 8b	jsr $8b60			jsr 	ScanForward
.871d	60		rts				rts
.871e					EndIf:
.871e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.871f					LetCommand:
.871f	a2 00		ldx #$00			ldx 	#0
.8721	ad df 8f	lda $8fdf			lda 	PrecedenceLevel+"*"			; precedence > this
.8724	20 f9 8f	jsr $8ff9			jsr 	EvaluateExpressionAtPrecedence
.8727	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.872a	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.872c	f0 0e		beq $873c			beq 	_LetGoProc 					; it's a procedure call.
.872e	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8730	20 72 9e	jsr $9e72			jsr 	CheckNextA
.8733	e8		inx				inx 								; RHS
.8734	20 8c 96	jsr $968c			jsr 	EvaluateValue
.8737	ca		dex				dex
.8738	20 3f 87	jsr $873f			jsr 	AssignVariable
.873b	60		rts				rts
.873c					_LetGoProc:
.873c	4c 4f 88	jmp $884f			jmp 	CallProcedure
.873f					AssignVariable:
.873f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.8742	48		pha				pha 								; save a copy
.8743	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8746	29 10		and #$10			and 	#NSBIsString
.8748	d0 0b		bne $8755			bne 	_ASError
.874a	68		pla				pla 								; get back
.874b	29 10		and #$10			and 	#NSBIsString 				; check type
.874d	d0 03		bne $8752			bne 	_ASString
.874f	4c 34 90	jmp $9034			jmp 	AssignNumber
.8752					_ASString:
.8752	4c a2 90	jmp $90a2			jmp 	AssignString
.8755					_ASError:
.8755	4c 4e a4	jmp $a44e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8758					Command_List:
.8758	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.875b	9c 14 06	stz $0614			stz 	NSMantissa1+4
.875e	a9 ff		lda #$ff			lda 	#$FF
.8760	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8763	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8766	b1 30		lda ($30),y			lda 	(codePtr),y
.8768	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.876a	f0 1e		beq $878a			beq 	_CLSecond
.876c	20 e3 87	jsr $87e3			jsr 	CLIsDigit 					; if not digit, list all
.876f	b0 24		bcs $8795			bcs 	_CLStart
.8771	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8773	20 cd 96	jsr $96cd			jsr 	Evaluate16BitInteger
.8776	b1 30		lda ($30),y			lda 	(codePtr),y
.8778	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.877a	f0 0e		beq $878a			beq 	_CLSecond 					; if so go get it
.877c	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.877f	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8782	ad 14 06	lda $0614			lda 	NSMantissa1+4
.8785	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8788	80 0b		bra $8795			bra 	_CLStart
.878a					_CLSecond:
.878a	c8		iny				iny 								; consume comma
.878b	20 e3 87	jsr $87e3			jsr 	CLIsDigit 					; digit found
.878e	b0 05		bcs $8795			bcs 	_CLStart 					; if not, continue listing
.8790	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8792	20 cd 96	jsr $96cd			jsr 	Evaluate16BitInteger
.8795					_CLStart
.8795	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8797	85 30		sta $30				sta 	codePtr
.8799	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.879b	85 31		sta $31				sta 	codePtr+1
.879d					_CLLoop:
.879d	b2 30		lda ($30)			lda 	(codePtr)
.879f	f0 2c		beq $87cd			beq 	_CLExit
.87a1	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87a3	20 d0 87	jsr $87d0			jsr 	CLCompareLineNo
.87a6	90 18		bcc $87c0			bcc 	_CLNext
.87a8	a2 07		ldx #$07			ldx 	#7
.87aa	20 d0 87	jsr $87d0			jsr 	CLCompareLineNo
.87ad	f0 02		beq $87b1			beq 	_CLDoThisOne
.87af	b0 0f		bcs $87c0			bcs 	_CLNext
.87b1					_CLDoThisOne:
.87b1	20 bc 89	jsr $89bc			jsr 	ListConvertLine 			; convert line into token Buffer
.87b4	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.87b6	a9 27		lda #$27			lda 	#(tokenBuffer & $FF)
.87b8	20 47 8c	jsr $8c47			jsr 	PrintStringXA
.87bb	a9 0d		lda #$0d			lda 	#13 						; new line
.87bd	20 91 a6	jsr $a691			jsr 	EXTPrintCharacter
.87c0					_CLNext:
.87c0	18		clc				clc
.87c1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.87c3	65 30		adc $30				adc 	codePtr
.87c5	85 30		sta $30				sta 	codePtr
.87c7	90 02		bcc $87cb			bcc 	_CREExit
.87c9	e6 31		inc $31				inc 	codePtr+1
.87cb					_CREExit:
.87cb	80 d0		bra $879d			bra 	_CLLoop
.87cd					_CLExit:
.87cd	4c 1e 84	jmp $841e			jmp 	WarmStart
.87d0					CLCompareLineNo:
.87d0	38		sec				sec
.87d1	a0 01		ldy #$01			ldy 	#1
.87d3	b1 30		lda ($30),y			lda 	(codePtr),y
.87d5	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.87d8	85 36		sta $36				sta 	zTemp0
.87da	c8		iny				iny
.87db	b1 30		lda ($30),y			lda 	(codePtr),y
.87dd	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.87e0	05 36		ora $36				ora 	zTemp0
.87e2	60		rts				rts
.87e3					CLIsDigit:
.87e3	b1 30		lda ($30),y			lda 	(codePtr),y
.87e5	c9 30		cmp #$30			cmp 	#"0"
.87e7	90 03		bcc $87ec			bcc	 	_CLIDExitFalse
.87e9	c9 3a		cmp #$3a			cmp 	#"9"+1
.87eb	60		rts				rts
.87ec					_CLIDExitFalse:
.87ec	38		sec				sec
.87ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.87ee					NewCommand:
.87ee	20 a0 9d	jsr $9da0			jsr 	MemoryNew
.87f1	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.87f4	20 8b 84	jsr $848b			jsr 	ClearCommand 				; clear everything.
.87f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.87f8					Command_Print:
.87f8	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87f9					_CPLoop:
.87f9	08		php				php 								; save last action flag
.87fa	b1 30		lda ($30),y			lda 	(codePtr),y
.87fc	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.87fe	f0 46		beq $8846			beq 	_CPExit
.8800	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8802	f0 42		beq $8846			beq 	_CPExit
.8804	68		pla				pla 								; throw last action flag
.8805	b1 30		lda ($30),y			lda 	(codePtr),y
.8807	c8		iny				iny
.8808	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.880a	f0 37		beq $8843			beq 	_CPContinueWithSameLine
.880c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.880e	f0 2e		beq $883e			beq 	_CPTab
.8810	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8812	f0 26		beq $883a			beq 	_CPNewLine
.8814	88		dey				dey 								; undo the get.
.8815	a2 00		ldx #$00			ldx 	#0
.8817	20 8c 96	jsr $968c			jsr 	EvaluateValue 				; get a value into slot 0
.881a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.881d	29 10		and #$10			and 	#NSBIsString
.881f	f0 0b		beq $882c			beq 	_CPNumber
.8821	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8824	ad 08 06	lda $0608			lda 	NSMantissa0
.8827	20 47 8c	jsr $8c47			jsr 	PrintStringXA
.882a	80 cc		bra $87f8			bra 	Command_Print 				; loop round clearing carry so NL if end
.882c					_CPNumber:
.882c	a9 05		lda #$05			lda 	#5 							; maximum decimals
.882e	20 62 95	jsr $9562			jsr 	ConvertNumberToString 		; convert to string
.8831	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8833	a9 97		lda #$97			lda 	#DecimalBuffer & $FF
.8835	20 47 8c	jsr $8c47			jsr 	PrintStringXA
.8838	80 be		bra $87f8			bra 	Command_Print 				; loop round clearing carry so NL if end
.883a					_CPNewLine:
.883a	a9 0d		lda #$0d			lda 	#13
.883c	80 02		bra $8840			bra 	_CPPrintChar
.883e					_CPTab:
.883e	a9 09		lda #$09			lda 	#9 							; print TAB
.8840					_CPPrintChar:
.8840	20 91 a6	jsr $a691			jsr 	EXTPrintCharacter
.8843					_CPContinueWithSameLine:
.8843	38		sec				sec 								; loop round with carry set, which
.8844	80 b3		bra $87f9			bra 	_CPLoop 					; will inhibit final CR
.8846					_CPExit:
.8846	28		plp				plp 								; get last action flag
.8847	b0 05		bcs $884e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8849	a9 0d		lda #$0d			lda 	#13 						; print new line
.884b	20 91 a6	jsr $a691			jsr 	EXTPrintCharacter
.884e					_CPExit2:
.884e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.884f					CallProcedure:
.884f	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.8852	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8854	20 7e 97	jsr $977e			jsr 	StackOpen
.8857	20 b0 97	jsr $97b0			jsr 	STKSaveCodePosition 		; save loop position
.885a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.885d	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.885f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8862	85 37		sta $37				sta 	zTemp0+1
.8864	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8866	b2 36		lda ($36)			lda 	(zTemp0)
.8868	85 30		sta $30				sta 	safePtr
.886a	b1 36		lda ($36),y			lda 	(zTemp0),y
.886c	85 31		sta $31				sta 	safePtr+1
.886e	c8		iny				iny
.886f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8871	85 32		sta $32				sta 	safePtr+2
.8873	c8		iny				iny
.8874	b1 36		lda ($36),y			lda 	(zTemp0),y
.8876	85 33		sta $33				sta 	safePtr+3
.8878	c8		iny				iny 								; get Y offset -> Y
.8879	b1 36		lda ($36),y			lda 	(zTemp0),y
.887b	a8		tay				tay
.887c	20 62 9e	jsr $9e62			jsr 	CheckRightBracket 			; check )
.887f	60		rts				rts 								; and continue from here
.9e54					Command_ENDPROC:
.9e54	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9e56	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9e58	20 a5 97	jsr $97a5			jsr 	StackCheckFrame
.9e5b	20 c1 97	jsr $97c1			jsr 	STKLoadCodePosition 		; restore code position
.9e5e	20 97 97	jsr $9797			jsr 	StackClose
.9e61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8880					Command_Read:
.8880	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8882	20 c8 92	jsr $92c8			jsr 	EvaluateTerm
.8885	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8888	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.888a	f0 4a		beq $88d6			beq 	_CRSyntax 					; check reference (bit 0)
.888c	20 1f 89	jsr $891f			jsr 	SwapDataCodePtrs 			; swap code and data
.888f	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8892	d0 20		bne $88b4			bne 	_CRContinueData
.8894					_CRKeepSearching:
.8894	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8896	aa		tax				tax
.8897	20 60 8b	jsr $8b60			jsr 	ScanForward
.889a	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.889c	f0 16		beq $88b4			beq 	_CRHaveData 				; found it
.889e	18		clc				clc
.889f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88a1	65 30		adc $30				adc 	codePtr
.88a3	85 30		sta $30				sta 	codePtr
.88a5	90 02		bcc $88a9			bcc 	_CREExit
.88a7	e6 31		inc $31				inc 	codePtr+1
.88a9					_CREExit:
.88a9	a0 03		ldy #$03			ldy 	#3 							; start of line.
.88ab	b2 30		lda ($30)			lda 	(codePtr)
.88ad	d0 e5		bne $8894			bne 	_CRKeepSearching
.88af	a9 0b		lda #$0b		lda	#11
.88b1	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.88b4					_CRHaveData:
.88b4					_CRContinueData:
.88b4	a2 01		ldx #$01			ldx 	#1
.88b6	20 8c 96	jsr $968c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.88b9	ca		dex				dex
.88ba	20 3f 87	jsr $873f			jsr		AssignVariable 				; do the assignment
.88bd	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.88c0	b1 30		lda ($30),y			lda 	(codePtr),y
.88c2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.88c4	d0 04		bne $88ca			bne 	_CRSwapBack
.88c6	c8		iny				iny 								; consume comma
.88c7	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.88ca					_CRSwapBack:
.88ca	20 1f 89	jsr $891f			jsr 	SwapDataCodePtrs			; swap them back.
.88cd	b1 30		lda ($30),y			lda 	(codePtr),y
.88cf	c8		iny				iny
.88d0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88d2	f0 ac		beq $8880			beq 	Command_Read 				; if so go round again.
.88d4	88		dey				dey 								; unpick get.
.88d5	60		rts				rts
.88d6					_CRSyntax:
.88d6	4c 44 a4	jmp $a444			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.88d9					RemCommand:
.88d9	b1 30		lda ($30),y			lda 	(codePtr),y
.88db	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.88dd	d0 06		bne $88e5			bne 	_RMExit
.88df	c8		iny				iny
.88e0	98		tya				tya
.88e1	38		sec				sec
.88e2	71 30		adc ($30),y			adc 	(codePtr),y
.88e4	a8		tay				tay
.88e5					_RMExit:
.88e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.88e6					Command_REPEAT:
.88e6	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.88e8	20 7e 97	jsr $977e			jsr 	StackOpen
.88eb	20 b0 97	jsr $97b0			jsr 	STKSaveCodePosition 		; save loop position
.88ee	60		rts				rts
.88ef					Command_UNTIL:
.88ef	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.88f1	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.88f3	20 a5 97	jsr $97a5			jsr 	StackCheckFrame
.88f6	a2 00		ldx #$00			ldx 	#0
.88f8	20 95 96	jsr $9695			jsr 	EvaluateNumber 				; work out the number
.88fb	20 71 97	jsr $9771			jsr 	NSMIsZero 					; check if zero
.88fe	f0 04		beq $8904			beq 	_CULoopBack 				; if so keep looping
.8900	20 97 97	jsr $9797			jsr 	StackClose		 			; return
.8903	60		rts				rts
.8904					_CULoopBack:
.8904	20 c1 97	jsr $97c1			jsr 	STKLoadCodePosition 		; loop back
.8907	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8908					Command_Restore:
.8908	20 1f 89	jsr $891f			jsr 	SwapDataCodePtrs 			; swap code and data
.890b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.890d	85 30		sta $30				sta 	codePtr
.890f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8911	85 31		sta $31				sta 	codePtr+1
.8913	20 1f 89	jsr $891f			jsr 	SwapDataCodePtrs 			; put them back
.8916	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8918	8d 19 07	sta $0719			sta 	dataPointer+4
.891b	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.891e	60		rts				rts
.891f					SwapDataCodePtrs:
.891f	da		phx				phx
.8920	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8922					_SDCPLoop:
.8922	b5 30		lda $30,x			lda 	safePtr,x
.8924	48		pha				pha
.8925	bd 15 07	lda $0715,x			lda 	dataPointer,x
.8928	95 30		sta $30,x			sta 	safePtr,x
.892a	68		pla				pla
.892b	9d 15 07	sta $0715,x			sta 	dataPointer,x
.892e	ca		dex				dex
.892f	10 f1		bpl $8922			bpl 	_SDCPLoop
.8931	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.8934	8c 19 07	sty $0719			sty 	dataPointer+4
.8937	a8		tay				tay
.8938	fa		plx				plx
.8939	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.893a					CommandRUN:
.893a	20 8b 84	jsr $848b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.893d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.893f	85 30		sta $30				sta 	codePtr
.8941	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8943	85 31		sta $31				sta 	codePtr+1
.8945					RUNNewLine:
.8945	b2 30		lda ($30)			lda 	(codePtr)
.8947	f0 4b		beq $8994			beq 	CRNoProgram         		; no then END.
.8949	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.894b	9a		txs				txs
.894c					RUNCodePointerLine:
.894c	a0 02		ldy #$02			ldy 	#2 							; start of program
.894e					_CRIncMainLoop:
.894e	c8		iny				iny
.894f					_CRMainLoop:
.894f	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8952	b1 30		lda ($30),y			lda 	(codePtr),y
.8954	10 10		bpl $8966			bpl 	_CRNotKeyword
.8956	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8958	b0 04		bcs $895e			bcs 	_CRIsKeyword
.895a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.895c	b0 30		bcs $898e			bcs		_CRSyntaxError
.895e					_CRIsKeyword:
.895e	c8		iny				iny 								; consume command
.895f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8960	aa		tax				tax 								; put in X for vector jump
.8961	20 91 89	jsr $8991			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8964	80 e9		bra $894f			bra 	_CRMainLoop 				; and loop round
.8966					_CRNotKeyword:
.8966	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8968	f0 e4		beq $894e			beq 	_CRIncMainLoop
.896a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.896c	90 05		bcc $8973			bcc 	_CRNotVariable
.896e					_CRGoLet:
.896e	20 1f 87	jsr $871f			jsr 	LetCommand
.8971	80 dc		bra $894f			bra 	_CRMainLoop
.8973					_CRNotVariable:
.8973	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8975	f0 f7		beq $896e			beq 	_CRGoLet
.8977	c9 21		cmp #$21			cmp 	#KWD_PLING
.8979	f0 f3		beq $896e			beq 	_CRGoLet
.897b	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.897d	f0 09		beq $8988			beq 	_CRGoRem
.897f	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8981	d0 0b		bne $898e			bne 	_CRSyntaxError
.8983	20 58 83	jsr $8358			jsr 	LabelHere
.8986	80 c7		bra $894f			bra 	_CRMainLoop
.8988					_CRGoRem:
.8988	c8		iny				iny
.8989	20 d9 88	jsr $88d9			jsr 	RemCommand
.898c	80 c1		bra $894f			bra 	_CRMainLoop
.898e					_CRSyntaxError:
.898e	4c 44 a4	jmp $a444			jmp 	SyntaxError
.8991					_CRCallVector0:
.8991	7c b6 80	jmp ($80b6,x)			jmp 	(VectorSet0,x)
.8994					CRNoProgram:
.8994	4c a5 85	jmp $85a5			jmp 	EndCommand
.8997					EOLCommand:
.8997	18		clc				clc
.8998	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.899a	65 30		adc $30				adc 	codePtr
.899c	85 30		sta $30				sta 	codePtr
.899e	90 02		bcc $89a2			bcc 	_CREExit
.89a0	e6 31		inc $31				inc 	codePtr+1
.89a2					_CREExit:
.89a2	80 a1		bra $8945			bra 	RunNewLine
.89a4					Shift1Command:
.89a4	b1 30		lda ($30),y			lda 	(codePtr),y
.89a6	c8		iny				iny
.89a7	0a		asl a				asl 	a
.89a8	aa		tax				tax
.89a9	7c 14 81	jmp ($8114,x)			jmp 	(VectorSet1,x)
.89ac					Shift2Command:
.89ac	b1 30		lda ($30),y			lda 	(codePtr),y
.89ae	c8		iny				iny
.89af	0a		asl a				asl 	a
.89b0	aa		tax				tax
.89b1	7c 2c 81	jmp ($812c,x)			jmp 	(VectorSet2,x)
.89b4					Unused1:
.89b4					Unused2:
.89b4					Unused3:
.89b4					Unused4:
.89b4	4c 44 a4	jmp $a444			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.89b7					StopCommand:
.89b7	a9 08		lda #$08		lda	#8
.89b9	4c ee 8b	jmp $8bee		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.89bc					ListConvertLine:
.89bc	9c 1b 07	stz $071b			stz 	tbOffset
.89bf	9c 27 07	stz $0727			stz 	tokenBuffer
.89c2	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.89c4	b1 30		lda ($30),y			lda 	(codePtr),y
.89c6	aa		tax				tax
.89c7	88		dey				dey
.89c8	b1 30		lda ($30),y			lda 	(codePtr),y
.89ca	20 be 9f	jsr $9fbe			jsr 	ConvertInt16
.89cd	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.89cf	86 37		stx $37				stx 	zTemp0+1
.89d1	a0 00		ldy #$00			ldy 	#0
.89d3					_LCCopyNumber:
.89d3	b1 36		lda ($36),y			lda 	(zTemp0),y
.89d5	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.89d8	c8		iny				iny
.89d9	b1 36		lda ($36),y			lda 	(zTemp0),y
.89db	d0 f6		bne $89d3			bne 	_LCCopyNumber
.89dd					_LCPadOut:
.89dd	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.89df	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.89e2	ad 1b 07	lda $071b			lda 	tbOffset
.89e5	c9 06		cmp #$06			cmp 	#6
.89e7	d0 f4		bne $89dd			bne 	_LCPadOut
.89e9	a0 03		ldy #$03			ldy 	#3 							; start position.
.89eb					_LCMainLoop:
.89eb	b1 30		lda ($30),y			lda 	(codePtr),y
.89ed	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.89ef	f0 17		beq $8a08			beq 	_LCExit
.89f1	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.89f3	90 14		bcc $8a09			bcc 	_LCDoubles
.89f5	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.89f7	90 20		bcc $8a19			bcc 	_LCShiftPunc
.89f9	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.89fb	90 2b		bcc $8a28			bcc 	_LCPunctuation
.89fd	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.89ff	90 2d		bcc $8a2e			bcc 	_LCIdentifiers
.8a01	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8a03	90 49		bcc $8a4e			bcc 	_LCTokens
.8a05	4c a9 8a	jmp $8aa9			jmp 	_LCData 					; 254-5 are data objects
.8a08					_LCExit:
.8a08	60		rts				rts
.8a09					_LCDoubles:
.8a09	48		pha				pha
.8a0a	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8a0b	29 02		and #$02			and 	#2
.8a0d	09 3c		ora #$3c			ora 	#60 						; make < >
.8a0f	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.8a12	68		pla				pla 								; restore, do lower bit
.8a13	29 03		and #$03			and 	#3
.8a15	09 3c		ora #$3c			ora 	#60
.8a17	80 0f		bra $8a28			bra		_LCPunctuation 				; print, increment, loop
.8a19					_LCShiftPunc:
.8a19	aa		tax				tax 								; save in X
.8a1a	29 07		and #$07			and 	#7 							; lower 3 bits
.8a1c	f0 02		beq $8a20			beq 	_LCNoAdd
.8a1e	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8a20					_LCNoAdd:
.8a20	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8a22	90 02		bcc $8a26			bcc 	_LCNoAdd2
.8a24	09 20		ora #$20			ora 	#32 						; adds $20
.8a26					_LCNoAdd2:
.8a26	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8a28					_LCPunctuation:
.8a28	c8		iny				iny 								; consume character
.8a29	20 d5 8a	jsr $8ad5			jsr 	LCLWrite 					; write it out.
.8a2c	80 bd		bra $89eb			bra 	_LCMainLoop 				; go round again.
.8a2e					_LCIdentifiers:
.8a2e	18		clc				clc 								; convert to physical address
.8a2f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a31	85 37		sta $37				sta 	zTemp0+1
.8a33	c8		iny				iny
.8a34	b1 30		lda ($30),y			lda 	(codePtr),y
.8a36	85 36		sta $36				sta 	zTemp0
.8a38	c8		iny				iny
.8a39	5a		phy				phy 								; save position
.8a3a	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8a3c					_LCOutIdentifier:
.8a3c	c8		iny				iny
.8a3d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a3f	29 7f		and #$7f			and 	#$7F
.8a41	20 03 8b	jsr $8b03			jsr 	LCLLowerCase
.8a44	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.8a47	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8a49	10 f1		bpl $8a3c			bpl 	_LCOutIdentifier
.8a4b	7a		ply				ply 								; restore position
.8a4c	80 9d		bra $89eb			bra 	_LCMainLoop
.8a4e					_LCTokens:
.8a4e	aa		tax				tax 								; token in X
.8a4f	a9 da		lda #$da			lda 	#((KeywordSet2) & $FF)
.8a51	85 36		sta $36				sta 	0+zTemp0
.8a53	a9 99		lda #$99			lda 	#((KeywordSet2) >> 8)
.8a55	85 37		sta $37				sta 	1+zTemp0
.8a57	e0 82		cpx #$82			cpx 	#$82
.8a59	f0 16		beq $8a71			beq 	_LCUseShift
.8a5b	a9 96		lda #$96			lda 	#((KeywordSet1) & $FF)
.8a5d	85 36		sta $36				sta 	0+zTemp0
.8a5f	a9 99		lda #$99			lda 	#((KeywordSet1) >> 8)
.8a61	85 37		sta $37				sta 	1+zTemp0
.8a63	e0 81		cpx #$81			cpx 	#$81
.8a65	f0 0a		beq $8a71			beq 	_LCUseShift
.8a67	a9 74		lda #$74			lda 	#((KeywordSet0) & $FF)
.8a69	85 36		sta $36				sta 	0+zTemp0
.8a6b	a9 98		lda #$98			lda 	#((KeywordSet0) >> 8)
.8a6d	85 37		sta $37				sta 	1+zTemp0
.8a6f	80 01		bra $8a72			bra 	_LCNoShift
.8a71					_LCUseShift:
.8a71	c8		iny				iny
.8a72					_LCNoShift:
.8a72	20 e4 8a	jsr $8ae4			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8a75	b1 30		lda ($30),y			lda 	(codePtr),y
.8a77	aa		tax				tax 								; into X
.8a78					_LCFindText:
.8a78	ca		dex				dex
.8a79	10 0e		bpl $8a89			bpl 	_LCFoundText 				; found text.
.8a7b	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8a7d	1a		inc a				inc 	a 							; one extra for size
.8a7e	38		sec				sec 								; one extra for checksum
.8a7f	65 36		adc $36				adc 	zTemp0 						; go to next token
.8a81	85 36		sta $36				sta 	zTemp0
.8a83	90 f3		bcc $8a78			bcc 	_LCFindText
.8a85	e6 37		inc $37				inc 	zTemp0+1
.8a87	80 ef		bra $8a78			bra 	_LCFindText
.8a89					_LCFoundText:
.8a89	5a		phy				phy 								; save List position
.8a8a	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8a8c	aa		tax				tax
.8a8d	a0 02		ldy #$02			ldy 	#2
.8a8f					_LCCopyToken:
.8a8f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a91	20 03 8b	jsr $8b03			jsr 	LCLLowerCase
.8a94	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.8a97	c8		iny				iny
.8a98	ca		dex				dex
.8a99	d0 f4		bne $8a8f			bne 	_LCCopyToken
.8a9b	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8a9d	f0 05		beq $8aa4			beq 	_LCNoSpace
.8a9f	a9 20		lda #$20			lda 	#' '
.8aa1	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.8aa4					_LCNoSpace:
.8aa4	7a		ply				ply 								; restore position.
.8aa5	c8		iny				iny 								; consume token
.8aa6	4c eb 89	jmp $89eb			jmp 	_LCMainLoop 				; and go around again.
.8aa9					_LCData:
.8aa9	48		pha				pha 								; save type $FE/$FF
.8aaa	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8aac	c9 fe		cmp #$fe			cmp 	#$FE
.8aae	f0 02		beq $8ab2			beq 	_LCHaveOpener
.8ab0	a2 22		ldx #$22			ldx 	#'"'
.8ab2					_LCHaveOpener:
.8ab2	8a		txa				txa 								; output prefix (# or ")
.8ab3	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.8ab6	c8		iny				iny 								; get count
.8ab7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab9	aa		tax				tax
.8aba	c8		iny				iny 								; point at first character
.8abb					_LCOutData:
.8abb	b1 30		lda ($30),y			lda 	(codePtr),y
.8abd	c9 00		cmp #$00			cmp 	#0
.8abf	f0 03		beq $8ac4			beq 	_LCNoPrint
.8ac1	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.8ac4					_LCNoPrint:
.8ac4	c8		iny				iny
.8ac5	ca		dex				dex
.8ac6	d0 f3		bne $8abb			bne 	_LCOutData
.8ac8	68		pla				pla 								; closing " required ?
.8ac9	c9 ff		cmp #$ff			cmp 	#$FF
.8acb	d0 05		bne $8ad2			bne 	_LCNoQuote
.8acd	a9 22		lda #$22			lda 	#'"'
.8acf	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.8ad2					_LCNoQuote:
.8ad2	4c eb 89	jmp $89eb			jmp 	_LCMainLoop
.8ad5					LCLWrite:
.8ad5	da		phx				phx
.8ad6	ae 1b 07	ldx $071b			ldx 	tbOffset
.8ad9	9d 27 07	sta $0727,x			sta 	tokenBuffer,x
.8adc	9e 28 07	stz $0728,x			stz 	tokenBuffer+1,x
.8adf	ee 1b 07	inc $071b			inc 	tbOffset
.8ae2	fa		plx				plx
.8ae3	60		rts				rts
.8ae4					LCCheckSpaceRequired:
.8ae4	ae 1b 07	ldx $071b			ldx 	tbOffset
.8ae7	bd 26 07	lda $0726,x			lda 	tokenBuffer-1,x 			; previous character
.8aea	20 03 8b	jsr $8b03			jsr 	LCLLowerCase 				; saves a little effort
.8aed	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8aef	90 11		bcc $8b02			bcc 	_LCCSRExit
.8af1	c9 3a		cmp #$3a			cmp 	#"9"+1
.8af3	90 08		bcc $8afd			bcc 	_LCCSRSpace
.8af5	c9 61		cmp #$61			cmp 	#"a"
.8af7	90 09		bcc $8b02			bcc 	_LCCSRExit
.8af9	c9 7b		cmp #$7b			cmp 	#"z"+1
.8afb	b0 05		bcs $8b02			bcs 	_LCCSRExit
.8afd					_LCCSRSpace:
.8afd	a9 20		lda #$20			lda 	#' '
.8aff	20 d5 8a	jsr $8ad5			jsr 	LCLWrite
.8b02					_LCCSRExit:
.8b02	60		rts				rts
.8b03					LCLLowerCase:
.8b03	c9 41		cmp #$41			cmp 	#"A"
.8b05	90 06		bcc $8b0d			bcc 	_LCLLCOut
.8b07	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8b09	b0 02		bcs $8b0d			bcs 	_LCLLCOut
.8b0b	69 20		adc #$20			adc 	#$20
.8b0d					_LCLLCOut:
.8b0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8b0e					ProcedureScan:
.8b0e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b10	85 30		sta $30				sta 	codePtr
.8b12	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b14	85 31		sta $31				sta 	codePtr+1
.8b16					_PSLoop:
.8b16	b2 30		lda ($30)			lda 	(codePtr)
.8b18	f0 42		beq $8b5c			beq 	_PSExit
.8b1a	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8b1c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b1e	c9 98		cmp #$98			cmp 	#KWD_PROC
.8b20	d0 2d		bne $8b4f			bne 	_PSNext
.8b22	c8		iny				iny 								; get the address of the record to zTemp0 and
.8b23	b1 30		lda ($30),y			lda 	(codePtr),y
.8b25	29 c0		and #$c0			and 	#$C0
.8b27	c9 40		cmp #$40			cmp 	#$40
.8b29	d0 32		bne $8b5d			bne 	_PSSyntax
.8b2b	b1 30		lda ($30),y			lda 	(codePtr),y
.8b2d	18		clc				clc
.8b2e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b30	85 37		sta $37				sta 	zTemp0+1
.8b32	c8		iny				iny 								; LSB
.8b33	b1 30		lda ($30),y			lda 	(codePtr),y
.8b35	85 36		sta $36				sta 	zTemp0
.8b37	c8		iny				iny 								; character after variable call.
.8b38	98		tya				tya 								; save Y offset at +7
.8b39	a0 07		ldy #$07			ldy 	#7
.8b3b	91 36		sta ($36),y			sta 	(zTemp0),y
.8b3d	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8b3f	a0 02		ldy #$02			ldy 	#2
.8b41	91 36		sta ($36),y			sta 	(zTemp0),y
.8b43	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8b45					_PSCopy:
.8b45	b5 30		lda $30,x			lda 	safePtr,x
.8b47	c8		iny				iny
.8b48	91 36		sta ($36),y			sta 	(zTemp0),y
.8b4a	e8		inx				inx
.8b4b	e0 04		cpx #$04			cpx 	#4
.8b4d	d0 f6		bne $8b45			bne 	_PSCopy
.8b4f					_PSNext:
.8b4f	18		clc				clc
.8b50	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b52	65 30		adc $30				adc 	codePtr
.8b54	85 30		sta $30				sta 	codePtr
.8b56	90 02		bcc $8b5a			bcc 	_CREExit
.8b58	e6 31		inc $31				inc 	codePtr+1
.8b5a					_CREExit:
.8b5a	80 ba		bra $8b16			bra 	_PSLoop
.8b5c					_PSExit:
.8b5c	60		rts				rts
.8b5d					_PSSyntax:
.8b5d	4c 44 a4	jmp $a444			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8b60					ScanForward:
.8b60	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8b62	86 37		stx $37				stx 	zTemp0+1
.8b64	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8b66					_ScanLoop:
.8b66	b1 30		lda ($30),y			lda 	(codePtr),y
.8b68	c8		iny				iny
.8b69	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8b6b	d0 0e		bne $8b7b			bne 	_ScanGoNext
.8b6d	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8b6f	f0 04		beq $8b75			beq 	_ScanMatch
.8b71	c5 37		cmp $37				cmp 	zTemp0+1
.8b73	d0 06		bne $8b7b			bne 	_ScanGoNext
.8b75					_ScanMatch:
.8b75	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8b77	d0 01		bne $8b7a			bne 	_ScanNotEndEOL
.8b79	88		dey				dey
.8b7a					_ScanNotEndEOL:
.8b7a	60		rts				rts
.8b7b					_ScanGoNext:
.8b7b	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8b7d	90 e7		bcc $8b66			bcc 	_ScanLoop
.8b7f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8b81	90 18		bcc $8b9b			bcc 	_ScanSkipOne
.8b83	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8b85	b0 2f		bcs $8bb6			bcs 	_ScanSkipData
.8b87	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8b89	90 db		bcc $8b66			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8b8b	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8b8d	b0 d7		bcs $8b66			bcs 	_ScanLoop
.8b8f	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8b91	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8b93	b0 d1		bcs $8b66			bcs 	_ScanLoop
.8b95	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8b97	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8b99	80 cb		bra $8b66			bra 	_ScanLoop
.8b9b					_ScanSkipOne:
.8b9b	c8		iny				iny 								; consume the extra one.
.8b9c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8b9e	d0 c6		bne $8b66			bne 	_ScanLoop
.8ba0	18		clc				clc
.8ba1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ba3	65 30		adc $30				adc 	codePtr
.8ba5	85 30		sta $30				sta 	codePtr
.8ba7	90 02		bcc $8bab			bcc 	_CREExit
.8ba9	e6 31		inc $31				inc 	codePtr+1
.8bab					_CREExit:
.8bab	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8bad	b2 30		lda ($30)			lda 	(codePtr)
.8baf	d0 b5		bne $8b66			bne 	_ScanLoop 					; if not zero, more to scan
.8bb1	a9 13		lda #$13		lda	#19
.8bb3	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.8bb6					_ScanSkipData:
.8bb6	88		dey				dey 								; point at data token
.8bb7	c8		iny				iny
.8bb8	98		tya				tya
.8bb9	38		sec				sec
.8bba	71 30		adc ($30),y			adc 	(codePtr),y
.8bbc	a8		tay				tay
.8bbd	80 a7		bra $8b66			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8bbf					Command_WHILE:
.8bbf	5a		phy				phy 								; save position of the test
.8bc0	a2 00		ldx #$00			ldx 	#0
.8bc2	20 95 96	jsr $9695			jsr 	EvaluateNumber 				; work out the number
.8bc5	20 71 97	jsr $9771			jsr 	NSMIsZero 					; check if zero
.8bc8	f0 0e		beq $8bd8			beq 	_WHExitLoop 				; if so exit the loop
.8bca	98		tya				tya 								; position *after* test.
.8bcb	7a		ply				ply 								; restore position before test, at WHILE
.8bcc	88		dey				dey
.8bcd	48		pha				pha 								; push after test on the stack
.8bce	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8bd0	20 7e 97	jsr $977e			jsr 	StackOpen
.8bd3	20 b0 97	jsr $97b0			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8bd6	7a		ply				ply 								; restore the position *after* the test
.8bd7	60		rts				rts
.8bd8					_WHExitLoop:
.8bd8	68		pla				pla 								; throw post loop position
.8bd9	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8bdb	aa		tax				tax
.8bdc	20 60 8b	jsr $8b60			jsr 	ScanForward
.8bdf	60		rts				rts
.8be0					Command_WEND:
.8be0	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8be2	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8be4	20 a5 97	jsr $97a5			jsr 	StackCheckFrame
.8be7	20 c1 97	jsr $97c1			jsr 	STKLoadCodePosition 		; loop back
.8bea	20 97 97	jsr $9797			jsr 	StackClose		 			; erase the frame
.8bed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9e62					CheckRightBracket:
.9e62	b1 30		lda ($30),y			lda 	(codePtr),y
.9e64	c8		iny				iny
.9e65	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9e67	d0 0f		bne $9e78			bne 	CNAFail
.9e69	60		rts				rts
.9e6a					CheckComma:
.9e6a	b1 30		lda ($30),y			lda 	(codePtr),y
.9e6c	c8		iny				iny
.9e6d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9e6f	d0 07		bne $9e78			bne 	CNAFail
.9e71	60		rts				rts
.9e72					CheckNextA:
.9e72	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9e74	d0 02		bne $9e78			bne 	CNAFail
.9e76	c8		iny				iny 								; skip character
.9e77	60		rts				rts 								; and exit
.9e78					CNAFail:
.9e78	4c 44 a4	jmp $a444			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8bee					ErrorHandler:
.8bee	a8		tay				tay 								; find the error text
.8bef	f0 49		beq $8c3a			beq 	_EHEnd
.8bf1	a2 00		ldx #$00			ldx 	#0
.8bf3	a9 5d		lda #$5d			lda 	#((ErrorText) & $FF)
.8bf5	85 36		sta $36				sta 	0+zTemp0
.8bf7	a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.8bf9	85 37		sta $37				sta 	1+zTemp0
.8bfb					_EHFind:
.8bfb	88		dey				dey 								; found the error text ?
.8bfc	f0 0e		beq $8c0c			beq 	_EHFound
.8bfe					_EHFindZero:
.8bfe	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8c00	e6 36		inc $36				inc 	zTemp0
.8c02	d0 02		bne $8c06			bne 	_EHFNoCarry
.8c04	e6 37		inc $37				inc 	zTemp0+1
.8c06					_EHFNoCarry:
.8c06	c9 00		cmp #$00			cmp 	#0
.8c08	d0 f4		bne $8bfe			bne 	_EHFindZero
.8c0a	80 ef		bra $8bfb			bra 	_EHFind
.8c0c					_EHFound:
.8c0c	a5 36		lda $36				lda 	zTemp0 						; print message
.8c0e	a6 37		ldx $37				ldx 	zTemp0+1
.8c10	20 47 8c	jsr $8c47			jsr 	PrintStringXA
.8c13	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8c15	b1 30		lda ($30),y			lda 	(codePtr),y
.8c17	d0 05		bne $8c1e			bne 	_EHAtMsg
.8c19	c8		iny				iny
.8c1a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c1c	f0 17		beq $8c35			beq 	_EHCREnd
.8c1e					_EHAtMsg:
.8c1e	a2 8c		ldx #$8c			ldx 	#_AtMsg >> 8 				; print " at "
.8c20	a9 3d		lda #$3d			lda 	#_AtMsg & $FF
.8c22	20 47 8c	jsr $8c47			jsr 	PrintStringXA
.8c25	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8c27	b1 30		lda ($30),y			lda 	(codePtr),y
.8c29	48		pha				pha
.8c2a	c8		iny				iny
.8c2b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c2d	aa		tax				tax
.8c2e	68		pla				pla
.8c2f	20 be 9f	jsr $9fbe			jsr 	ConvertInt16 				; convert XA to string
.8c32	20 47 8c	jsr $8c47			jsr 	PrintStringXA 				; and print it.
.8c35					_EHCREnd:
.8c35	a9 0d		lda #$0d			lda 	#13 						; new line
.8c37	20 91 a6	jsr $a691			jsr 	EXTPrintCharacter
.8c3a					_EHEnd:
.8c3a	4c 1e 84	jmp $841e			jmp 	WarmStart
>8c3d	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8c45	20 00
.8c47					PrintStringXA:
.8c47	5a		phy				phy
.8c48	86 37		stx $37				stx 	zTemp0+1
.8c4a	85 36		sta $36				sta 	zTemp0
.8c4c	a0 00		ldy #$00			ldy 	#0
.8c4e					_PSXALoop:
.8c4e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c50	f0 06		beq $8c58			beq 	_PSXAExit
.8c52	20 91 a6	jsr $a691			jsr 	EXTPrintCharacter
.8c55	c8		iny				iny
.8c56	80 f6		bra $8c4e			bra 	_PSXALoop
.8c58					_PSXAExit:
.8c58	7a		ply				ply
.8c59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8c5a					UnaryTrue:
.8c5a	fa		plx				plx
.8c5b					ReturnTrue:
.8c5b	a9 01		lda #$01			lda 	#1  						; set to 1
.8c5d	20 43 97	jsr $9743			jsr 	NSMSetByte
.8c60	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8c62	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c65	60		rts				rts
.8c66					UnaryFalse:
.8c66	fa		plx				plx
.8c67					ReturnFalse:
.8c67	4c 41 97	jmp $9741			jmp 	NSMSetZero 					; set it all to zero
.8c6a					BinaryCompareEqual:
.8c6a	fa		plx				plx
.8c6b	20 a6 8c	jsr $8ca6			jsr 	CompareBaseCode
.8c6e	c9 00		cmp #$00			cmp 	#0
.8c70	f0 e9		beq $8c5b			beq 	ReturnTrue
.8c72	80 f3		bra $8c67			bra 	ReturnFalse
.8c74					BinaryCompareLess:
.8c74	fa		plx				plx
.8c75	20 a6 8c	jsr $8ca6			jsr 	CompareBaseCode
.8c78	c9 ff		cmp #$ff			cmp 	#$FF
.8c7a	f0 df		beq $8c5b			beq 	ReturnTrue
.8c7c	80 e9		bra $8c67			bra 	ReturnFalse
.8c7e					BinaryCompareGreater:
.8c7e	fa		plx				plx
.8c7f	20 a6 8c	jsr $8ca6			jsr 	CompareBaseCode
.8c82	c9 01		cmp #$01			cmp 	#1
.8c84	f0 d5		beq $8c5b			beq 	ReturnTrue
.8c86	80 df		bra $8c67			bra 	ReturnFalse
.8c88					BinaryCompareNotEqual:
.8c88	fa		plx				plx
.8c89	20 a6 8c	jsr $8ca6			jsr 	CompareBaseCode
.8c8c	c9 00		cmp #$00			cmp 	#0
.8c8e	d0 cb		bne $8c5b			bne 	ReturnTrue
.8c90	80 d5		bra $8c67			bra 	ReturnFalse
.8c92					BinaryCompareLessEqual:
.8c92	fa		plx				plx
.8c93	20 a6 8c	jsr $8ca6			jsr 	CompareBaseCode
.8c96	c9 01		cmp #$01			cmp 	#1
.8c98	d0 c1		bne $8c5b			bne 	ReturnTrue
.8c9a	80 cb		bra $8c67			bra 	ReturnFalse
.8c9c					BinaryCompareGreaterEqual:
.8c9c	fa		plx				plx
.8c9d	20 a6 8c	jsr $8ca6			jsr 	CompareBaseCode
.8ca0	c9 ff		cmp #$ff			cmp 	#$FF
.8ca2	d0 b7		bne $8c5b			bne 	ReturnTrue
.8ca4	80 c1		bra $8c67			bra 	ReturnFalse
.8ca6					CompareBaseCode:
.8ca6	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; make both values if references.
.8ca9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8cac	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8caf	29 10		and #$10			and 	#NSTString
.8cb1	d0 40		bne $8cf3			bne 	_CBCString
.8cb3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8cb6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8cb9	d0 3b		bne $8cf6			bne 	_CBCFloat
.8cbb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cbe	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cc1	29 08		and #$08			and 	#NSTFloat
.8cc3	d0 31		bne $8cf6			bne 	_CBCFloat
.8cc5	20 f9 8c	jsr $8cf9			jsr 	CompareFixMinusZero
.8cc8	e8		inx				inx
.8cc9	20 f9 8c	jsr $8cf9			jsr 	CompareFixMinusZero
.8ccc	ca		dex				dex
.8ccd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8cd0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8cd3	10 0b		bpl $8ce0			bpl 	_CDCSameSign
.8cd5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8cd8	30 16		bmi $8cf0			bmi 	_CBCLess 					; return $FF
.8cda					_CBCGreater:
.8cda	a9 01		lda #$01			lda 	#1
.8cdc	60		rts				rts
.8cdd					_CBCEqual:
.8cdd	a9 00		lda #$00			lda 	#0
.8cdf	60		rts				rts
.8ce0					_CDCSameSign:
.8ce0	20 09 8e	jsr $8e09			jsr 	SubTopTwoStack 				; unsigned subtract
.8ce3	20 71 97	jsr $9771			jsr 	NSMIsZero 					; or the mantissa together
.8ce6	f0 f5		beq $8cdd			beq 	_CBCEqual 					; -0 == 0
.8ce8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8ceb	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8cee	10 ea		bpl $8cda			bpl 	_CBCGreater
.8cf0					_CBCLess:
.8cf0	a9 ff		lda #$ff			lda 	#$FF
.8cf2	60		rts				rts
.8cf3					_CBCString:
.8cf3	4c 5f 8d	jmp $8d5f			jmp 	CompareStrings
.8cf6					_CBCFloat:
.8cf6	4c ba a0	jmp $a0ba			jmp 	CompareFloat
.8cf9					CompareFixMinusZero:
.8cf9	20 71 97	jsr $9771			jsr 	NSMIsZero
.8cfc	d0 03		bne $8d01			bne 	_CFXMZNotZero
.8cfe	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8d01					_CFXMZNotZero:
.8d01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8d02					StringConcat:
.8d02	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8d05	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8d08	29 18		and #$18			and 	#NSBTypeMask
.8d0a	c9 10		cmp #$10			cmp 	#NSTString
.8d0c	d0 4e		bne $8d5c			bne		_SCType
.8d0e	64 38		stz $38				stz 	zTemp1 						; counting total length
.8d10	e8		inx				inx
.8d11	20 2f 8d	jsr $8d2f			jsr 	_SCSetupZ0 					; setup for second
.8d14	20 3a 8d	jsr $8d3a			jsr 	_SCLengthZ0 				; length for second
.8d17	ca		dex				dex
.8d18	20 2f 8d	jsr $8d2f			jsr 	_SCSetupZ0 					; setup for first
.8d1b	20 3a 8d	jsr $8d3a			jsr 	_SCLengthZ0 				; length for first
.8d1e	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8d20	20 3e a6	jsr $a63e			jsr 	StringTempAllocate
.8d23	20 4d 8d	jsr $8d4d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8d26	e8		inx				inx
.8d27	20 2f 8d	jsr $8d2f			jsr 	_SCSetupZ0 					; copy second out
.8d2a	20 4d 8d	jsr $8d4d			jsr 	_SCCopy
.8d2d	ca		dex				dex
.8d2e	60		rts				rts
.8d2f					_SCSetupZ0:
.8d2f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d32	85 36		sta $36				sta 	zTemp0
.8d34	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d37	85 37		sta $37				sta 	zTemp0+1
.8d39	60		rts				rts
.8d3a					_SCLengthZ0:
.8d3a	5a		phy				phy
.8d3b	a0 00		ldy #$00			ldy 	#0
.8d3d					_SCLenLoop:
.8d3d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d3f	f0 0a		beq $8d4b			beq 	_SCLExit
.8d41	c8		iny				iny
.8d42	e6 38		inc $38				inc 	zTemp1
.8d44	10 f7		bpl $8d3d			bpl		_SCLenLoop
.8d46	a9 09		lda #$09		lda	#9
.8d48	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.8d4b					_SCLExit:
.8d4b	7a		ply				ply
.8d4c	60		rts				rts
.8d4d					_SCCopy:
.8d4d	5a		phy				phy
.8d4e	a0 00		ldy #$00			ldy 	#0
.8d50					_SCCopyLoop:
.8d50	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d52	f0 06		beq $8d5a			beq 	_SCCExit
.8d54	20 7c a6	jsr $a67c			jsr 	StringTempWrite
.8d57	c8		iny				iny
.8d58	80 f6		bra $8d50			bra 	_SCCopyLoop
.8d5a					_SCCExit:
.8d5a	7a		ply				ply
.8d5b	60		rts				rts
.8d5c					_SCType:
.8d5c	4c 4e a4	jmp $a44e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9e7b					IntegerDivide:
.9e7b	fa		plx				plx
.9e7c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e7f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e82	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e83	0a		asl a				asl 	a
.9e84	10 05		bpl $9e8b			bpl 	_NotRef
.9e86	48		pha				pha
.9e87	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e8a	68		pla				pla
.9e8b					_NotRef:
.9e8b	0a		asl a				asl 	a
.9e8c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e8e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e91	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9e94	f0 03		beq $9e99			beq 	_IntegerCode 				; if clear, then we have two integers
.9e96	4c 4e a4	jmp $a44e			jmp 	TypeError 					; anything else, type mismatch.
.9e99					_IntegerCode:
.9e99	20 bb 9e	jsr $9ebb			jsr 	CheckDivideZero 			; do div zero check
.9e9c	20 f3 9e	jsr $9ef3			jsr 	Int32Divide 				; do the division
.9e9f	20 b0 9f	jsr $9fb0			jsr 	CalculateSign 				; calculate result sign
.9ea2					NSMCopyPlusTwoToZero:
.9ea2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9ea5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9ea8	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9eab	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9eae	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9eb1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9eb4	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9eb7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9eba	60		rts				rts
.9ebb					CheckDivideZero:
.9ebb	e8		inx				inx
.9ebc	20 71 97	jsr $9771			jsr 	NSMIsZero
.9ebf	f0 02		beq $9ec3			beq 	_CDVError
.9ec1	ca		dex				dex
.9ec2	60		rts				rts
.9ec3					_CDVError:
.9ec3	a9 03		lda #$03		lda	#3
.9ec5	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.9ec8					IntegerModulus:
.9ec8	fa		plx				plx
.9ec9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9ecc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ecf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ed0	0a		asl a				asl 	a
.9ed1	10 05		bpl $9ed8			bpl 	_NotRef
.9ed3	48		pha				pha
.9ed4	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ed7	68		pla				pla
.9ed8					_NotRef:
.9ed8	0a		asl a				asl 	a
.9ed9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9edb	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ede	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9ee1	f0 03		beq $9ee6			beq 	_IntegerCode 				; if clear, then we have two integers
.9ee3	4c 4e a4	jmp $a44e			jmp 	TypeError 					; anything else, type mismatch.
.9ee6					_IntegerCode:
.9ee6	20 bb 9e	jsr $9ebb			jsr 	CheckDivideZero 			; do div zero check
.9ee9	20 f3 9e	jsr $9ef3			jsr 	Int32Divide 				; do the division
.9eec	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9eef	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9ef2	60		rts				rts
.9ef3					Int32Divide:
.9ef3	48		pha				pha 								; save AXY
.9ef4	5a		phy				phy
.9ef5	20 18 97	jsr $9718			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9ef8	20 3d 97	jsr $973d			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9efb	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9efd					_I32DivideLoop:
.9efd	e8		inx				inx
.9efe	e8		inx				inx
.9eff	20 56 97	jsr $9756			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9f02	ca		dex				dex
.9f03	ca		dex				dex
.9f04	20 57 97	jsr $9757			jsr 	NSMRotateLeft
.9f07	20 33 9f	jsr $9f33			jsr 	DivideCheckSubtract 		; check if subtract possible
.9f0a	90 03		bcc $9f0f			bcc 	_I32DivideNoCarryIn
.9f0c	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9f0f					_I32DivideNoCarryIn:
.9f0f	88		dey				dey 								; loop round till division completed.
.9f10	d0 eb		bne $9efd			bne 	_I32DivideLoop
.9f12	7a		ply				ply 								; restore AXY and exit
.9f13	68		pla				pla
.9f14	60		rts				rts
.9f15					Int32ShiftDivide:
.9f15	48		pha				pha 								; save AY
.9f16	5a		phy				phy
.9f17	e8		inx				inx 								; clear S[X+2]
.9f18	e8		inx				inx
.9f19	20 41 97	jsr $9741			jsr 	NSMSetZero
.9f1c	ca		dex				dex
.9f1d	ca		dex				dex
.9f1e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9f20					_I32SDLoop:
.9f20	20 33 9f	jsr $9f33			jsr 	DivideCheckSubtract 		; check if subtract possible
.9f23	e8		inx				inx
.9f24	e8		inx				inx
.9f25	20 57 97	jsr $9757			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9f28	ca		dex				dex
.9f29	ca		dex				dex
.9f2a	20 57 97	jsr $9757			jsr 	NSMRotateLeft
.9f2d	88		dey				dey 	 							; do 31 times
.9f2e	d0 f0		bne $9f20			bne 	_I32SDLoop
.9f30	7a		ply				ply 								; restore AY and exit
.9f31	68		pla				pla
.9f32	60		rts				rts
.9f33					DivideCheckSubtract:
.9f33	20 09 8e	jsr $8e09			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9f36	b0 04		bcs $9f3c			bcs 	_DCSExit 					; if carry set, then could do, exit
.9f38	20 e3 8d	jsr $8de3			jsr 	AddTopTwoStack 				; add it back in
.9f3b	18		clc				clc 								; and return False
.9f3c					_DCSExit:
.9f3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9f3d					MulInteger:
.9f3d	fa		plx				plx
.9f3e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f41	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f44	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f45	0a		asl a				asl 	a
.9f46	10 05		bpl $9f4d			bpl 	_NotRef
.9f48	48		pha				pha
.9f49	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9f4c	68		pla				pla
.9f4d					_NotRef:
.9f4d	0a		asl a				asl 	a 							; put MSB of type into A:7
.9f4e	30 0b		bmi $9f5b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9f50	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9f53	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9f56	f0 06		beq $9f5e			beq 	_IntegerCode 				; if clear, then we have two integers
.9f58	4c 91 a1	jmp $a191			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9f5b					_StringData:
.9f5b	4c 58 a4	jmp $a458			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9f5e					_IntegerCode:
.9f5e	20 6b 9f	jsr $9f6b			jsr 	MultiplyShort
.9f61	c9 00		cmp #$00			cmp 	#0
.9f63	f0 05		beq $9f6a			beq 	_MIExit
.9f65	a9 04		lda #$04		lda	#4
.9f67	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.9f6a					_MIExit:
.9f6a	60		rts				rts
.9f6b					MultiplyShort:
.9f6b	5a		phy				phy 								; save Y
.9f6c	20 18 97	jsr $9718			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9f6f	20 3d 97	jsr $973d			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9f72	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9f74					_I32MLoop:
.9f74	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9f77	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9f7a	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9f7d	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9f80	f0 28		beq $9faa			beq 	_I32MExit 					; exit if zero
.9f82	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9f85	29 01		and #$01			and 	#1
.9f87	f0 0e		beq $9f97			beq 	_I32MNoAdd
.9f89	20 e3 8d	jsr $8de3			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9f8c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9f8f	10 06		bpl $9f97			bpl 	_I32MNoAdd
.9f91					_I32ShiftRight:
.9f91	20 64 97	jsr $9764			jsr 	NSMShiftRight 				; shift S[X] right
.9f94	c8		iny				iny 								; increment shift count
.9f95	80 0a		bra $9fa1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9f97					_I32MNoAdd:
.9f97	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9f9a	70 f5		bvs $9f91			bvs 	_I32ShiftRight 				; instead.
.9f9c	e8		inx				inx
.9f9d	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9fa0	ca		dex				dex
.9fa1					_I32MShiftUpper:
.9fa1	e8		inx				inx 								; shift S[X+2] right
.9fa2	e8		inx				inx
.9fa3	20 64 97	jsr $9764			jsr 	NSMShiftRight
.9fa6	ca		dex				dex
.9fa7	ca		dex				dex
.9fa8	80 ca		bra $9f74			bra 	_I32MLoop 					; try again.
.9faa					_I32MExit:
.9faa	20 b0 9f	jsr $9fb0			jsr 	CalculateSign
.9fad	98		tya				tya 								; shift in A
.9fae	7a		ply				ply 								; restore Y and exit
.9faf	60		rts				rts
.9fb0					CalculateSign:
.9fb0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9fb3	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9fb6	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9fb9	0a		asl a				asl 	a 							; shift bit 7 into carry
.9fba	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9fbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8d5f					CompareStrings:
.8d5f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8d62	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8d65	29 10		and #$10			and 	#NSBIsString
.8d67	f0 2c		beq $8d95			beq 	_CSTypeError
.8d69	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8d6c	85 36		sta $36				sta 	zTemp0
.8d6e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d71	85 37		sta $37				sta 	zTemp0+1
.8d73	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8d76	85 38		sta $38				sta 	zTemp1
.8d78	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d7b	85 39		sta $39				sta 	zTemp1+1
.8d7d	5a		phy				phy 								; save Y so we can access strings
.8d7e	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8d80					_CSLoop:
.8d80	c8		iny				iny
.8d81	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8d83	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8d85	d0 06		bne $8d8d			bne 	_CSDifferent
.8d87	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8d89	d0 f5		bne $8d80			bne 	_CSLoop 					; still comparing
.8d8b					_CSExit:
.8d8b	7a		ply				ply 								; reached end, return zero in A from EOS
.8d8c	60		rts				rts
.8d8d					_CSDifferent:
.8d8d	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8d8f	90 fa		bcc $8d8b			bcc		_CSExit
.8d91	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8d93	80 f6		bra $8d8b			bra 	_CSExit
.8d95					_CSTypeError:
.8d95	4c 4e a4	jmp $a44e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8d98					ShiftLeft:
.8d98	38		sec				sec
.8d99	80 01		bra $8d9c			bra 	ShiftMain
.8d9b					ShiftRight:
.8d9b	18		clc				clc
.8d9c					ShiftMain:
.8d9c	fa		plx				plx 								; restore X
.8d9d	08		php				php 								; save direction
.8d9e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8da1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8da4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8da5	0a		asl a				asl 	a
.8da6	10 05		bpl $8dad			bpl 	_NotRef
.8da8	48		pha				pha
.8da9	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8dac	68		pla				pla
.8dad					_NotRef:
.8dad	0a		asl a				asl 	a
.8dae	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8db0	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8db3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8db6	f0 03		beq $8dbb			beq 	_IntegerCode 				; if clear, then we have two integers
.8db8	4c 4e a4	jmp $a44e			jmp 	TypeError 					; anything else, type mismatch.
.8dbb					_IntegerCode:
.8dbb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8dbe	29 e0		and #$e0			and 	#$E0
.8dc0	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8dc3	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8dc6	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8dc9	d0 13		bne $8dde			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8dcb					_SMLoop:
.8dcb	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8dce	30 11		bmi $8de1			bmi 	_SMExit 					; exit if done.
.8dd0	28		plp				plp 								; restore direcition setting
.8dd1	08		php				php
.8dd2	90 05		bcc $8dd9			bcc 	_SMRight
.8dd4	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; shift left if CS
.8dd7	80 f2		bra $8dcb			bra 	_SMLoop
.8dd9					_SMRight:
.8dd9	20 64 97	jsr $9764			jsr 	NSMShiftRight 				; shift right if CC
.8ddc	80 ed		bra $8dcb			bra 	_SMLoop
.8dde					_SMExit0:
.8dde	20 41 97	jsr $9741			jsr 	NSMSetZero 					; return zero.
.8de1					_SMExit:
.8de1	28		plp				plp 								; throw direction
.8de2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8de3					AddTopTwoStack:
.8de3	18		clc				clc
.8de4	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8de7	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8dea	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ded	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8df0	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8df3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8df6	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8df9	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8dfc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8dff	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e02	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8e05	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e08	60		rts				rts
.8e09					SubTopTwoStack:
.8e09	38		sec				sec
.8e0a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e0d	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8e10	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e13	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e16	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8e19	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e1c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e1f	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8e22	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e25	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e28	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8e2b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e2e	60		rts				rts
.8e2f					AddInteger:
.8e2f	fa		plx				plx
.8e30	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e33	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e36	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e37	0a		asl a				asl 	a
.8e38	10 05		bpl $8e3f			bpl 	_NotRef
.8e3a	48		pha				pha
.8e3b	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e3e	68		pla				pla
.8e3f					_NotRef:
.8e3f	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e40	30 0b		bmi $8e4d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e42	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e45	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e48	f0 06		beq $8e50			beq 	_IntegerCode 				; if clear, then we have two integers
.8e4a	4c 19 a0	jmp $a019			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8e4d					_StringData:
.8e4d	4c 02 8d	jmp $8d02			jmp 	StringConcat							; at least one string - don't know both are strings.
.8e50					_IntegerCode:
.8e50					AddCode:
.8e50	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8e53	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e56	10 8b		bpl $8de3			bpl 	AddTopTwoStack
.8e58	20 09 8e	jsr $8e09			jsr 	SubTopTwoStack 				; do a physical subtraction
.8e5b	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8e5e	10 09		bpl $8e69			bpl 	_AddExit
.8e60	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8e63	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e66	20 f6 96	jsr $96f6			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8e69					_AddExit:
.8e69	60		rts				rts
.8e6a					SubInteger:
.8e6a	fa		plx				plx
.8e6b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e6e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e71	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e72	0a		asl a				asl 	a
.8e73	10 05		bpl $8e7a			bpl 	_NotRef
.8e75	48		pha				pha
.8e76	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e79	68		pla				pla
.8e7a					_NotRef:
.8e7a	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e7b	30 0b		bmi $8e88			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e7d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e80	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e83	f0 06		beq $8e8b			beq 	_IntegerCode 				; if clear, then we have two integers
.8e85	4c 1e a0	jmp $a01e			jmp 	FloatingPointSub 							; otherwise at least one float.
.8e88					_StringData:
.8e88	4c 58 a4	jmp $a458			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8e8b					_IntegerCode:
.8e8b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8e8e	49 80		eor #$80			eor 	#$80
.8e90	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8e93	80 bb		bra $8e50			bra 	AddCode 					; and do the same code as add.
.8e95					AndInteger:
.8e95	fa		plx				plx
.8e96	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e99	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e9c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e9d	0a		asl a				asl 	a
.8e9e	10 05		bpl $8ea5			bpl 	_NotRef
.8ea0	48		pha				pha
.8ea1	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ea4	68		pla				pla
.8ea5					_NotRef:
.8ea5	0a		asl a				asl 	a
.8ea6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ea8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8eab	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8eae	f0 03		beq $8eb3			beq 	_IntegerCode 				; if clear, then we have two integers
.8eb0	4c 4e a4	jmp $a44e			jmp 	TypeError 					; anything else, type mismatch.
.8eb3					_IntegerCode:
.8eb3	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8eb6	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8eb9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ebc	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ebf	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8ec2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ec5	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ec8	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8ecb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ece	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ed1	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8ed4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ed7	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8eda	60		rts				rts
.8edb					OraInteger:
.8edb	fa		plx				plx
.8edc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8edf	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ee2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ee3	0a		asl a				asl 	a
.8ee4	10 05		bpl $8eeb			bpl 	_NotRef
.8ee6	48		pha				pha
.8ee7	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eea	68		pla				pla
.8eeb					_NotRef:
.8eeb	0a		asl a				asl 	a
.8eec	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8eee	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ef1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ef4	f0 03		beq $8ef9			beq 	_IntegerCode 				; if clear, then we have two integers
.8ef6	4c 4e a4	jmp $a44e			jmp 	TypeError 					; anything else, type mismatch.
.8ef9					_IntegerCode:
.8ef9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8efc	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8eff	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f02	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f05	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8f08	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f0b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f0e	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8f11	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f14	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f17	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8f1a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f1d	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f20	60		rts				rts
.8f21					EorInteger:
.8f21	fa		plx				plx
.8f22	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f25	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f28	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f29	0a		asl a				asl 	a
.8f2a	10 05		bpl $8f31			bpl 	_NotRef
.8f2c	48		pha				pha
.8f2d	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f30	68		pla				pla
.8f31					_NotRef:
.8f31	0a		asl a				asl 	a
.8f32	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f34	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f37	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f3a	f0 03		beq $8f3f			beq 	_IntegerCode 				; if clear, then we have two integers
.8f3c	4c 4e a4	jmp $a44e			jmp 	TypeError 					; anything else, type mismatch.
.8f3f					_IntegerCode:
.8f3f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f42	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8f45	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f48	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f4b	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8f4e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f51	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f54	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8f57	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f5a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f5d	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8f60	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f63	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f66	60		rts				rts
.8f67					WordIndirect:
.8f67	fa		plx				plx
.8f68	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f6b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f6e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f6f	0a		asl a				asl 	a
.8f70	10 05		bpl $8f77			bpl 	_NotRef
.8f72	48		pha				pha
.8f73	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f76	68		pla				pla
.8f77					_NotRef:
.8f77	0a		asl a				asl 	a
.8f78	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f7a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f7d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f80	f0 03		beq $8f85			beq 	_IntegerCode 				; if clear, then we have two integers
.8f82	4c 4e a4	jmp $a44e			jmp 	TypeError 					; anything else, type mismatch.
.8f85					_IntegerCode:
.8f85	20 50 8e	jsr $8e50			jsr 	AddCode 					; add the two values
.8f88	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8f8a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f8d	60		rts				rts
.8f8e					ByteIndirect:
.8f8e	fa		plx				plx
.8f8f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f92	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f95	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f96	0a		asl a				asl 	a
.8f97	10 05		bpl $8f9e			bpl 	_NotRef
.8f99	48		pha				pha
.8f9a	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f9d	68		pla				pla
.8f9e					_NotRef:
.8f9e	0a		asl a				asl 	a
.8f9f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fa1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fa4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fa7	f0 03		beq $8fac			beq 	_IntegerCode 				; if clear, then we have two integers
.8fa9	4c 4e a4	jmp $a44e			jmp 	TypeError 					; anything else, type mismatch.
.8fac					_IntegerCode:
.8fac	20 50 8e	jsr $8e50			jsr 	AddCode 					; add the two values
.8faf	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8fb1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fb4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9fbe					ConvertInt16:
.9fbe	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9fc1	8e 10 06	stx $0610			stx 	NSMantissa1
.9fc4	9c 18 06	stz $0618			stz 	NSMantissa2
.9fc7	9c 20 06	stz $0620			stz 	NSMantissa3
.9fca	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9fcd	a2 00		ldx #$00			ldx 	#0 							; stack level
.9fcf	a9 0a		lda #$0a			lda 	#10 						; base
.9fd1	80 00		bra $9fd3			bra 	ConvertInt32
.9fd3					ConvertInt32:
.9fd3	5a		phy				phy
.9fd4	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9fd6	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9fd9	10 08		bpl $9fe3			bpl 	_CI32NotNeg
.9fdb	48		pha				pha
.9fdc	a9 2d		lda #$2d			lda 	#'-'
.9fde	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9fe1	c8		iny				iny
.9fe2	68		pla				pla
.9fe3					_CI32NotNeg:
.9fe3	20 f1 9f	jsr $9ff1			jsr 	_CI32DivideConvert 			; recursive conversion
.9fe6	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9fe8	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9feb	7a		ply				ply
.9fec	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9fee	a9 75		lda #$75			lda 	#NumberBuffer & $FF
.9ff0	60		rts				rts
.9ff1					_CI32DivideConvert:
.9ff1	e8		inx				inx 								; write to next slot up
.9ff2	20 43 97	jsr $9743			jsr 	NSMSetByte
.9ff5	ca		dex				dex
.9ff6	20 f3 9e	jsr $9ef3			jsr 	Int32Divide 				; divide
.9ff9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9ffc	48		pha				pha
.9ffd	20 a2 9e	jsr $9ea2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a000	20 71 97	jsr $9771			jsr 	NSMIsZero 					; is it zero ?
.a003	f0 06		beq $a00b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a005	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a008	20 f1 9f	jsr $9ff1			jsr 	_CI32DivideConvert 			; and recusrively call.
.a00b					_CI32NoRecurse:
.a00b	68		pla				pla 								; remainder
.a00c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a00e	90 02		bcc $a012			bcc 	_CI32NotHex
.a010	69 26		adc #$26			adc 	#6+32
.a012					_CI32NotHex:
.a012	69 30		adc #$30			adc 	#48
.a014	99 75 08	sta $0875,y			sta 	NumberBuffer,y 				; write out and exit
.a017	c8		iny				iny
.a018	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8fb5					PrecedenceLevel:
>8fb5	04					.byte	 4	; $00 <<
>8fb6	02					.byte	 2	; $01 <=
>8fb7	02					.byte	 2	; $02 <>
>8fb8	00					.byte	 0	; $03 !!3
>8fb9	00					.byte	 0	; $04 ><
>8fba	02					.byte	 2	; $05 >=
>8fbb	04					.byte	 4	; $06 >>
>8fbc	00					.byte	 0	; $07 !!7
>8fbd	00					.byte	 0	; $08 !!8
>8fbe	00					.byte	 0	; $09 !!9
>8fbf	00					.byte	 0	; $0a !!10
>8fc0	00					.byte	 0	; $0b !!11
>8fc1	00					.byte	 0	; $0c !!12
>8fc2	00					.byte	 0	; $0d !!13
>8fc3	00					.byte	 0	; $0e !!14
>8fc4	00					.byte	 0	; $0f !!15
>8fc5	00					.byte	 0	; $10 @
>8fc6	00					.byte	 0	; $11 !!17
>8fc7	00					.byte	 0	; $12 !!18
>8fc8	00					.byte	 0	; $13 [
>8fc9	04					.byte	 4	; $14 \
>8fca	00					.byte	 0	; $15 ]
>8fcb	01					.byte	 1	; $16 ^
>8fcc	00					.byte	 0	; $17 _
>8fcd	00					.byte	 0	; $18 `
>8fce	00					.byte	 0	; $19 !!25
>8fcf	00					.byte	 0	; $1a !!26
>8fd0	00					.byte	 0	; $1b {
>8fd1	01					.byte	 1	; $1c |
>8fd2	00					.byte	 0	; $1d }
>8fd3	00					.byte	 0	; $1e ~
>8fd4	00					.byte	 0	; $1f [7m<7F>[m
>8fd5	00					.byte	 0	; $20
>8fd6	05					.byte	 5	; $21 !
>8fd7	00					.byte	 0	; $22 "
>8fd8	00					.byte	 0	; $23 #
>8fd9	05					.byte	 5	; $24 $
>8fda	04					.byte	 4	; $25 %
>8fdb	01					.byte	 1	; $26 &
>8fdc	00					.byte	 0	; $27 '
>8fdd	00					.byte	 0	; $28 (
>8fde	00					.byte	 0	; $29 )
>8fdf	04					.byte	 4	; $2a *
>8fe0	03					.byte	 3	; $2b +
>8fe1	00					.byte	 0	; $2c ,
>8fe2	03					.byte	 3	; $2d -
>8fe3	00					.byte	 0	; $2e .
>8fe4	04					.byte	 4	; $2f /
>8fe5	00					.byte	 0	; $30 0
>8fe6	00					.byte	 0	; $31 1
>8fe7	00					.byte	 0	; $32 2
>8fe8	00					.byte	 0	; $33 3
>8fe9	00					.byte	 0	; $34 4
>8fea	00					.byte	 0	; $35 5
>8feb	00					.byte	 0	; $36 6
>8fec	00					.byte	 0	; $37 7
>8fed	00					.byte	 0	; $38 8
>8fee	00					.byte	 0	; $39 9
>8fef	00					.byte	 0	; $3a :
>8ff0	00					.byte	 0	; $3b ;
>8ff1	02					.byte	 2	; $3c <
>8ff2	02					.byte	 2	; $3d =
>8ff3	02					.byte	 2	; $3e >
>8ff4	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8ff5					EvaluateExpressionAt0:
.8ff5	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8ff7					EvaluateExpression:
.8ff7	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8ff9					EvaluateExpressionAtPrecedence:
.8ff9	48		pha				pha 								; save precedence level
.8ffa	20 c8 92	jsr $92c8			jsr 	EvaluateTerm 				; evaluate term into level X.
.8ffd	68		pla				pla 								; restore precedence level.
.8ffe					_EXPRLoop:
.8ffe	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9000	b1 30		lda ($30),y			lda 	(codePtr),y
.9002	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9004	b0 25		bcs $902b			bcs 	_EXPRExit
.9006	da		phx				phx 								; read the operator precedence
.9007	aa		tax				tax
.9008	bd b5 8f	lda $8fb5,x			lda 	PrecedenceLevel,x
.900b	fa		plx				plx
.900c	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.900e	f0 1b		beq $902b			beq 	_EXPRExit
.9010	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9012	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9014	c5 37		cmp $37				cmp 	zTemp0+1
.9016	b0 13		bcs $902b			bcs		_EXPRExit 					; if current >= operator exit
.9018	48		pha				pha 								; save current precedence.
.9019	b1 30		lda ($30),y			lda 	(codePtr),y
.901b	c8		iny				iny
.901c	48		pha				pha
.901d	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.901f	e8		inx				inx 								; work out the right hand side.
.9020	20 f9 8f	jsr $8ff9			jsr 	EvaluateExpressionAtPrecedence
.9023	ca		dex				dex
.9024	68		pla				pla 								; get operator, call the code.
.9025	20 2e 90	jsr $902e			jsr 	_EXPRCaller
.9028	68		pla				pla 								; restore precedence level
.9029	80 d3		bra $8ffe			bra 	_EXPRLoop 					; and go round.
.902b					_EXPRExit:
.902b	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.902d	60		rts				rts
.902e					_EXPRCaller:
.902e	da		phx				phx 								; save on stack, first thing is to restore it
.902f	0a		asl a				asl 	a 							; double so can use vectors into X
.9030	aa		tax				tax
.9031	7c 36 80	jmp ($8036,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a019					FloatingPointAdd:
.a019	20 ba a1	jsr $a1ba			jsr 	FloatPrepare 				; prepare for floats
.a01c	80 0b		bra $a029			bra 	FloatAdd
.a01e					FloatingPointSub:
.a01e	20 ba a1	jsr $a1ba			jsr 	FloatPrepare 				; prepare for floats
.a021					FloatSubtract:
.a021	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a024	49 80		eor #$80			eor 	#$80
.a026	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a029					FloatAdd:
.a029	48		pha				pha
.a02a	5a		phy				phy
.a02b	20 cb a1	jsr $a1cb			jsr 	NSNormalise 				; normalise S[X]
.a02e	f0 54		beq $a084			beq 	_FAReturn1
.a030	e8		inx				inx 								; normalise S[X+1]
.a031	20 cb a1	jsr $a1cb			jsr 	NSNormalise
.a034	ca		dex				dex
.a035	c9 00		cmp #$00			cmp 	#0
.a037	f0 6f		beq $a0a8			beq 	_FAExit 					; if so, just return A
.a039	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a03c	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a03f	f0 1b		beq $a05c			beq 	_FAExponentsEqual
.a041	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a044	a8		tay				tay
.a045	38		sec				sec 								; do a signed comparison of the exponents.
.a046	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a049	50 02		bvc $a04d			bvc 	_FANoSignedChange
.a04b	49 80		eor #$80			eor 	#$80
.a04d					_FANoSignedChange:
.a04d	29 80		and #$80			and 	#$80
.a04f	10 03		bpl $a054			bpl 	_FAHaveMax
.a051	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a054					_FAHaveMax:
.a054	20 ab a0	jsr $a0ab			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a057	e8		inx				inx
.a058	20 ab a0	jsr $a0ab			jsr 	_FAShiftToExponent
.a05b	ca		dex				dex
.a05c					_FAExponentsEqual:
.a05c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a05f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a062	30 10		bmi $a074			bmi 	_FADifferentSigns
.a064	20 e3 8d	jsr $8de3			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a067	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a06a	10 3c		bpl $a0a8			bpl 	_FAExit 					; if no, we are done.
.a06c	20 64 97	jsr $9764			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a06f	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a072	80 34		bra $a0a8			bra 	_FAExit
.a074					_FADifferentSigns:
.a074	20 09 8e	jsr $8e09			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a077	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a07a	10 2c		bpl $a0a8			bpl 	_FAExit 					; if no, we are done.
.a07c	20 ed 96	jsr $96ed			jsr 	NSMNegate 					; netate result
.a07f	20 f6 96	jsr $96f6			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a082	80 24		bra $a0a8			bra 	_FAExit
.a084					_FAReturn1:
.a084	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a087	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a08a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a08d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a090	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a093	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a096	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a099	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a09c	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a09f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a0a2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a0a5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a0a8					_FAExit:
.a0a8	7a		ply				ply
.a0a9	68		pla				pla
.a0aa	60		rts				rts
.a0ab					_FAShiftToExponent:
.a0ab					_FAShiftToExponent2:
.a0ab	98		tya				tya 								; compare Y to exponent
.a0ac	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a0af	f0 08		beq $a0b9			beq 	_FASEExit 					; exit if so.
.a0b1	20 64 97	jsr $9764			jsr 	NSMShiftRight	 			; shift the mantissa right
.a0b4	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a0b7	80 f2		bra $a0ab			bra 	_FAShiftToExponent2
.a0b9					_FASEExit:
.a0b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a0ba					CompareFloat:
.a0ba	20 21 a0	jsr $a021			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a0bd	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a0c0	29 f8		and #$f8			and 	#$F8
.a0c2	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a0c5	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a0c8	f0 09		beq $a0d3			beq 	_FCExit 					; zero, so approximately identical
.a0ca	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a0cc	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a0cf	10 02		bpl $a0d3			bpl 	_FCExit
.a0d1					_FCNegative:
.a0d1	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a0d3					_FCExit:
.a0d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a0d4					FDivideCommand:
.a0d4	fa		plx				plx	 								; restore stack position
.a0d5	20 ba a1	jsr $a1ba			jsr 	FloatPrepare 				; prepare for floats
.a0d8					FloatDivide:
.a0d8	48		pha				pha
.a0d9	e8		inx				inx
.a0da	20 cb a1	jsr $a1cb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a0dd	ca		dex				dex
.a0de	c9 00		cmp #$00			cmp 	#0
.a0e0	f0 20		beq $a102			beq 	_FDZero
.a0e2	20 cb a1	jsr $a1cb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a0e5	f0 19		beq $a100			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a0e7	20 15 9f	jsr $9f15			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a0ea	20 a2 9e	jsr $9ea2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a0ed	20 cb a1	jsr $a1cb			jsr		NSNormalise 				; renormalise
.a0f0	20 b0 9f	jsr $9fb0			jsr 	CalculateSign 				; calculate result sign
.a0f3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a0f6	38		sec				sec
.a0f7	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a0fa	38		sec				sec
.a0fb	e9 1e		sbc #$1e			sbc 	#30
.a0fd	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a100					_FDExit:
.a100	68		pla				pla
.a101	60		rts				rts
.a102					_FDZero:
.a102	a9 03		lda #$03		lda	#3
.a104	4c ee 8b	jmp $8bee		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a107					FloatFractionalPart:
.a107	5a		phy				phy
.a108	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a10b	29 7f		and #$7f			and 	#$7F
.a10d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a110	20 cb a1	jsr $a1cb			jsr 	NSNormalise
.a113	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a116	38		sec				sec
.a117	e9 e0		sbc #$e0			sbc 	#$E0
.a119	90 31		bcc $a14c			bcc 	_FFPExit 					; already fractional
.a11b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a11d	b0 2a		bcs $a149			bcs 	_FFPZero
.a11f	a8		tay				tay 								; put count to do in Y
.a120	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a123	20 4e a1	jsr $a14e			jsr 	_FFPPartial
.a126	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a129	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a12c	20 4e a1	jsr $a14e			jsr 	_FFPPartial
.a12f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a132	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a135	20 4e a1	jsr $a14e			jsr 	_FFPPartial
.a138	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a13b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a13e	20 4e a1	jsr $a14e			jsr 	_FFPPartial
.a141	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a144	20 71 97	jsr $9771			jsr 	NSMIsZero 					; zeroed check.
.a147	d0 03		bne $a14c			bne 	_FFPExit
.a149					_FFPZero:
.a149	20 41 97	jsr $9741			jsr 	NSMSetZero
.a14c					_FFPExit:
.a14c	7a		ply				ply
.a14d	60		rts				rts
.a14e					_FFPPartial:
.a14e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a150	f0 17		beq $a169			beq 	_FFFPPExit
.a152	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a154	b0 0c		bcs $a162			bcs 	_FFFPPWholeByte
.a156	5a		phy				phy
.a157					_FFFPPLeft:
.a157	0a		asl a				asl 	a
.a158	88		dey				dey
.a159	d0 fc		bne $a157			bne 	_FFFPPLeft
.a15b	7a		ply				ply
.a15c					_FFFPPRight:
.a15c	4a		lsr a				lsr 	a
.a15d	88		dey				dey
.a15e	d0 fc		bne $a15c			bne 	_FFFPPRight
.a160	80 07		bra $a169			bra 	_FFFPPExit
.a162					_FFFPPWholeByte:
.a162	98		tya				tya 								; subtract 8 from count
.a163	38		sec				sec
.a164	e9 08		sbc #$08			sbc 	#8
.a166	a8		tay				tay
.a167	a9 00		lda #$00			lda 	#0 							; and clear all
.a169					_FFFPPExit:
.a169	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a16a					FloatIntegerPart:
.a16a	48		pha				pha
.a16b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a16e	f0 1f		beq $a18f			beq 	_FIPExit 					; if so do nothing
.a170	20 71 97	jsr $9771			jsr 	NSMIsZero 					; is it zero ?
.a173	f0 17		beq $a18c			beq 	_FIPZero 					; if so return zero.
.a175	20 cb a1	jsr $a1cb			jsr 	NSNormalise 				; normalise
.a178	f0 12		beq $a18c			beq 	_FIPZero 					; normalised to zero, exit zero
.a17a					_FIPShift:
.a17a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a17d	10 08		bpl $a187			bpl 	_FIPCheckZero
.a17f	20 64 97	jsr $9764			jsr 	NSMShiftRight 				; shift mantissa right
.a182	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a185	80 f3		bra $a17a			bra 	_FIPShift
.a187					_FIPCheckZero:
.a187	20 71 97	jsr $9771			jsr 	NSMIsZero 					; avoid -0 problem
.a18a	d0 03		bne $a18f			bne 	_FIPExit 					; set to zero if mantissa zero.
.a18c					_FIPZero:
.a18c	20 41 97	jsr $9741			jsr 	NSMSetZero
.a18f					_FIPExit:
.a18f	68		pla				pla
.a190	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a191					FloatingPointMultiply:
.a191	20 ba a1	jsr $a1ba			jsr 	FloatPrepare 				; prepare for floats
.a194					FloatMultiply:
.a194	48		pha				pha
.a195	20 cb a1	jsr $a1cb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a198	f0 1b		beq $a1b5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a19a	e8		inx				inx
.a19b	20 cb a1	jsr $a1cb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a19e	ca		dex				dex
.a19f	c9 00		cmp #$00			cmp 	#0
.a1a1	f0 0f		beq $a1b2			beq 	_FDSetZero
.a1a3	20 6b 9f	jsr $9f6b			jsr 	MultiplyShort 				; calculate the result.
.a1a6	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a1a9	18		clc				clc
.a1aa	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a1ad	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1b0	80 03		bra $a1b5			bra 	_FDExit
.a1b2					_FDSetZero:
.a1b2	20 41 97	jsr $9741			jsr 	NSMSetZero 					; return 0
.a1b5					_FDExit:
.a1b5	20 cb a1	jsr $a1cb			jsr 	NSNormalise 				; normalise the result
.a1b8	68		pla				pla
.a1b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a1ba					FloatPrepare:
.a1ba	20 07 91	jsr $9107			jsr 	DereferenceTopTwo 			; dereference the top two values
.a1bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a1c0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a1c3	29 10		and #$10			and 	#NSBIsString
.a1c5	d0 01		bne $a1c8			bne 	_FDType
.a1c7	60		rts				rts
.a1c8					_FDType:
.a1c8	4c 4e a4	jmp $a44e			jmp 	TypeError
.a1cb					NSNormalise:
.a1cb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a1ce	29 80		and #$80			and 	#$80
.a1d0	09 08		ora #$08			ora 	#NSTFloat
.a1d2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1d5	20 71 97	jsr $9771			jsr 	NSMIsZero 					; if zero exit
.a1d8	d0 09		bne $a1e3			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a1da	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a1dd	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a1e0	a9 00		lda #$00			lda 	#0 							; set Z flag
.a1e2	60		rts				rts
.a1e3					_NSNormaliseOptimise:
.a1e3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a1e6	d0 22		bne $a20a			bne 	_NSNormaliseLoop
.a1e8	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a1eb	30 1d		bmi $a20a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a1ed	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a1f0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a1f3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a1f6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a1f9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a1fc	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a1ff	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a202	38		sec				sec
.a203	e9 08		sbc #$08			sbc 	#8
.a205	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a208	80 d9		bra $a1e3			bra 	_NSNormaliseOptimise
.a20a					_NSNormaliseLoop:
.a20a	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a20d	70 08		bvs $a217			bvs 	_NSNExit 					; exit if so with Z flag clear
.a20f	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; shift mantissa left
.a212	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a215	80 f3		bra $a20a			bra 	_NSNormaliseLoop
.a217					_NSNExit:
.a217	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a219	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9034					AssignNumber:
.9034	5a		phy				phy
.9035	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9038	85 36		sta $36				sta 	zTemp0
.903a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.903d	85 37		sta $37				sta 	zTemp0+1
.903f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9042	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9044	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9047	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9049	c9 08		cmp #$08			cmp 	#NSTFloat
.904b	f0 2a		beq $9077			beq 	_ANFloat
.904d	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9050	f0 05		beq $9057			beq		_ANNotFloat
.9052	e8		inx				inx
.9053	20 6a a1	jsr $a16a			jsr 	FloatIntegerPart 			; make it an integer
.9056	ca		dex				dex
.9057					_ANNotFloat:
.9057	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.905a	29 03		and #$03			and 	#3
.905c	d0 05		bne $9063			bne 	_ANByteWord
.905e	20 83 90	jsr $9083			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9061	80 1e		bra $9081			bra 	_ANExit
.9063					_ANByteWord:
.9063	48		pha				pha 								; save count
.9064	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9067	92 36		sta ($36)			sta 	(zTemp0)
.9069	68		pla				pla
.906a	c9 01		cmp #$01			cmp	 	#1
.906c	f0 13		beq $9081			beq 	_ANExit
.906e	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9071	a0 01		ldy #$01			ldy 	#1
.9073	91 36		sta ($36),y			sta 	(zTemp0),y
.9075	80 0a		bra $9081			bra 	_ANExit
.9077					_ANFloat:
.9077	20 83 90	jsr $9083			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.907a	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.907d	a0 04		ldy #$04			ldy 	#4
.907f	91 36		sta ($36),y			sta 	(zTemp0),y
.9081					_ANExit:
.9081	7a		ply				ply
.9082	60		rts				rts
.9083					_ANCopy4PackSign:
.9083	a0 03		ldy #$03			ldy 	#3
.9085	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.9088	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.908a	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.908d	91 36		sta ($36),y			sta 	(zTemp0),y
.908f	88		dey				dey
.9090	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9093	91 36		sta ($36),y			sta 	(zTemp0),y
.9095	88		dey				dey
.9096	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9099	91 36		sta ($36),y			sta 	(zTemp0),y
.909b	88		dey				dey
.909c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.909f	91 36		sta ($36),y			sta 	(zTemp0),y
.90a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.90a2					AssignString:
.90a2	5a		phy				phy
.90a3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.90a6	85 38		sta $38				sta 	zTemp1
.90a8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.90ab	85 39		sta $39				sta 	zTemp1+1
.90ad	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.90b0	85 36		sta $36				sta 	zTemp0
.90b2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90b5	85 37		sta $37				sta 	zTemp0+1
.90b7	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.90b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.90bb	f0 23		beq $90e0			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.90bd	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.90be	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.90c0	e9 02		sbc #$02			sbc 	#2
.90c2	85 3c		sta $3c				sta 	zsTemp
.90c4	a0 01		ldy #$01			ldy 	#1
.90c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.90c8	e9 00		sbc #$00			sbc 	#0
.90ca	85 3d		sta $3d				sta 	zsTemp+1
.90cc	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.90ce					_ASGetLength:
.90ce	c8		iny				iny
.90cf	b1 38		lda ($38),y			lda 	(zTemp1),y
.90d1	d0 fb		bne $90ce			bne 	_ASGetLength
.90d3	98		tya				tya 								; is this length <= current length
.90d4	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.90d6	90 20		bcc $90f8			bcc 	_ASCopyString
.90d8	f0 1e		beq $90f8			beq 	_ASCopyString
.90da	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.90dc	a0 01		ldy #$01			ldy 	#1
.90de	91 3c		sta ($3c),y			sta 	(zsTemp),y
.90e0					_ASNewStringRequired:
.90e0	e8		inx				inx 								; concrete the new string.
.90e1	20 c3 a5	jsr $a5c3			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.90e4	ca		dex				dex
.90e5	18		clc				clc
.90e6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.90e9	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.90eb	92 36		sta ($36)			sta 	(zTemp0)
.90ed	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.90f0	69 00		adc #$00			adc 	#0
.90f2	a0 01		ldy #$01			ldy 	#1
.90f4	91 36		sta ($36),y			sta 	(zTemp0),y
.90f6	80 0d		bra $9105			bra 	_ASExit
.90f8					_ASCopyString:
.90f8	a0 00		ldy #$00			ldy 	#0
.90fa					_ASCopyLoop:
.90fa	b1 38		lda ($38),y			lda 	(zTemp1),y
.90fc	c8		iny				iny
.90fd	c8		iny				iny
.90fe	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9100	88		dey				dey
.9101	c9 00		cmp #$00			cmp 	#0
.9103	d0 f5		bne $90fa			bne 	_ASCopyLoop
.9105					_ASExit:
.9105	7a		ply				ply
.9106	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9107					DereferenceTopTwo:
.9107	e8		inx				inx
.9108	20 0c 91	jsr $910c			jsr 	Dereference 				; deref x+1
.910b	ca		dex				dex  								; falls through to deref x
.910c					Dereference:
.910c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.910f	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9111	f0 57		beq $916a			beq 	_DRFExit 					; not a reference
.9113	5a		phy				phy
.9114	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9117	85 36		sta $36				sta 	zTemp0
.9119	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.911c	85 37		sta $37				sta 	zTemp0+1
.911e	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9121	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9123	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9126	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.9129	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.912b	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.912d	f0 0f		beq $913e			beq 	_DRFDereferenceTwo
.912f	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9131	f0 39		beq $916c			beq 	_DRFFull
.9133	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9136	29 03		and #$03			and 	#3
.9138	f0 32		beq $916c			beq 	_DRFFull 					; the whole word
.913a	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.913c	f0 07		beq $9145			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.913e					_DRFDereferenceTwo:
.913e	a0 01		ldy #$01			ldy 	#1
.9140	b1 36		lda ($36),y			lda 	(zTemp0),y
.9142	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9145					_DRFClear23:
.9145	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9148	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.914b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.914e	29 18		and #$18			and 	#NSBTypeMask
.9150	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9153	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9155	d0 12		bne $9169			bne 	_DRFNotString
.9157	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.915a	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.915d	d0 0a		bne $9169			bne 	_DRFNotString
.915f	a9 6b		lda #$6b			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9161	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9164	a9 91		lda #$91			lda 	#_DRFNullString >> 8
.9166	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.9169					_DRFNotString
.9169	7a		ply				ply 								; restore Y and exit
.916a					_DRFExit:
.916a	60		rts				rts
.916b					_DRFNullString:
>916b	00						.byte 	0
.916c					_DRFFull:
.916c	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.916e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9170	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9173	c8		iny				iny
.9174	b1 36		lda ($36),y			lda 	(zTemp0),y
.9176	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9179	c8		iny				iny
.917a	b1 36		lda ($36),y			lda 	(zTemp0),y
.917c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.917f	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9182	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9185	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9187	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.918a	f0 06		beq $9192			beq 	_DRFNoExponent
.918c	c8		iny				iny 								; if not, read the exponent as well.
.918d	b1 36		lda ($36),y			lda 	(zTemp0),y
.918f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9192					_DRFNoExponent:
.9192	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9195	10 0d		bpl $91a4			bpl 	_DRFExit2 					; if not, then exit.
.9197	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9199	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.919c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.919f	09 80		ora #$80			ora 	#NSBIsNegative
.91a1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91a4					_DRFExit2:
.91a4	7a		ply				ply
.91a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.91a6					EncodeNumberStart:
.91a6	38		sec				sec
.91a7	80 01		bra $91aa			bra 	EncodeNumberContinue+1
.91a9					EncodeNumberContinue:
.91a9	18		clc				clc
.91aa					EncodeNumber:
.91aa	08		php				php 								; save reset.
.91ab	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.91ad	f0 12		beq $91c1			beq 	_ENIsOkay
.91af	c9 30		cmp #$30			cmp 	#"0"
.91b1	90 04		bcc $91b7			bcc 	_ENBadNumber
.91b3	c9 3a		cmp #$3a			cmp 	#"9"+1
.91b5	90 0a		bcc $91c1			bcc 	_ENIsOkay
.91b7					_ENBadNumber:
.91b7	28		plp				plp 								; throw saved reset
.91b8	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.91bb	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.91bd	f0 7e		beq $923d			beq 	_ENConstructFinal
.91bf					_ENFail:
.91bf	18		clc				clc 								; not allowed
.91c0	60		rts				rts
.91c1					_ENIsOkay:
.91c1	28		plp				plp 								; are we restarting
.91c2	90 15		bcc $91d9			bcc 	_ENNoRestart
.91c4					_ENStartEncode:
.91c4	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.91c6	f0 0c		beq $91d4			beq 	_ENFirstDP
.91c8	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.91ca	20 43 97	jsr $9743			jsr 	NSMSetByte
.91cd	a9 01		lda #$01			lda 	#ESTA_Low
.91cf					_ENExitChange:
.91cf	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.91d2	38		sec				sec
.91d3	60		rts				rts
.91d4					_ENFirstDP:
.91d4	20 41 97	jsr $9741			jsr 	NSMSetZero 					; clear integer part
.91d7	80 3f		bra $9218			bra 	_ESTASwitchFloat			; go straight to float and exi
.91d9					_ENNoRestart:
.91d9	48		pha				pha 								; save on stack.
.91da	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.91dd	c9 01		cmp #$01			cmp 	#ESTA_Low
.91df	f0 09		beq $91ea			beq  	_ESTALowState
.91e1	c9 02		cmp #$02			cmp 	#ESTA_High
.91e3	f0 29		beq $920e			beq 	_ESTAHighState
.91e5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.91e7	f0 3b		beq $9224			beq 	_ESTADecimalState
>91e9	db						.byte 	$DB 						; causes a break in the emulator
.91ea					_ESTALowState:
.91ea	68		pla				pla 								; get value back
.91eb	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.91ed	f0 29		beq $9218			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.91ef	29 0f		and #$0f			and 	#15 						; make digit
.91f1	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.91f4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.91f7	0a		asl a				asl 	a
.91f8	0a		asl a				asl 	a
.91f9	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.91fc	0a		asl a				asl 	a
.91fd	6d 06 07	adc $0706			adc 	DigitTemp
.9200	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9203	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9205	90 05		bcc $920c			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9207	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9209	8d 05 07	sta $0705			sta 	EncodeState
.920c					_ESTANoSwitch:
.920c	38		sec				sec
.920d	60		rts				rts
.920e					_ESTAHighState:
.920e	68		pla				pla 								; get value back
.920f	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9211	f0 05		beq $9218			beq 	_ESTASwitchFloat
.9213	20 77 92	jsr $9277			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9216	38		sec				sec
.9217	60		rts				rts
.9218					_ESTASwitchFloat:
.9218	9c 07 07	stz $0707			stz 	DecimalCount
.921b	e8		inx				inx 								; zero the decimal additive.
.921c	20 41 97	jsr $9741			jsr 	NSMSetZero
.921f	ca		dex				dex
.9220	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9222	80 ab		bra $91cf			bra 	_ENExitChange
.9224					_ESTADecimalState:
.9224	68		pla				pla 								; digit.
.9225	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9227	f0 96		beq $91bf			beq 	_ENFail
.9229	e8		inx				inx 								; put digit into fractional part of X+1
.922a	20 77 92	jsr $9277			jsr 	ESTAShiftDigitIntoMantissa
.922d	ca		dex				dex
.922e	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9231	ad 07 07	lda $0707			lda 	DecimalCount
.9234	c9 0b		cmp #$0b			cmp 	#11
.9236	f0 02		beq $923a			beq 	_ESTADSFail
.9238	38		sec				sec
.9239	60		rts				rts
.923a					_ESTADSFail:
.923a	4c 49 a4	jmp $a449			jmp 	RangeError
.923d					_ENConstructFinal:
.923d	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9240	f0 33		beq $9275			beq 	_ENCFExit 					; no decimals
.9242	5a		phy				phy
.9243	0a		asl a				asl 	a 							; x 4 and CLC
.9244	0a		asl a				asl 	a
.9245	6d 07 07	adc $0707			adc 	DecimalCount
.9248	a8		tay				tay
.9249	b9 08 a4	lda $a408,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.924c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.924f	b9 09 a4	lda $a409,y			lda 	DecimalScalarTable-5+1,y
.9252	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9255	b9 0a a4	lda $a40a,y			lda 	DecimalScalarTable-5+2,y
.9258	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.925b	b9 0b a4	lda $a40b,y			lda 	DecimalScalarTable-5+3,y
.925e	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9261	b9 0c a4	lda $a40c,y			lda 	DecimalScalarTable-5+4,y
.9264	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9267	a9 08		lda #$08			lda 	#NSTFloat
.9269	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.926c	7a		ply				ply
.926d	e8		inx				inx 								; multiply decimal const by decimal scalar
.926e	20 94 a1	jsr $a194			jsr 	FloatMultiply
.9271	ca		dex				dex
.9272	20 29 a0	jsr $a029			jsr 	FloatAdd 					; add to integer part.
.9275					_ENCFExit:
.9275	18		clc				clc 								; reject the digit.
.9276	60		rts				rts
.9277					ESTAShiftDigitIntoMantissa:
.9277	29 0f		and #$0f			and 	#15 						; save digit
.9279	48		pha				pha
.927a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.927d	48		pha				pha
.927e	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9281	48		pha				pha
.9282	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9285	48		pha				pha
.9286	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9289	48		pha				pha
.928a	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; x 2
.928d	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; x 4
.9290	18		clc				clc 								; pop mantissa and add
.9291	68		pla				pla
.9292	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9295	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9298	68		pla				pla
.9299	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.929c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.929f	68		pla				pla
.92a0	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.92a3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92a6	68		pla				pla
.92a7	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.92aa	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.92ad	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; x 10
.92b0	68		pla				pla 								; add digit
.92b1	18		clc				clc
.92b2	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.92b5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92b8	90 0d		bcc $92c7			bcc 	_ESTASDExit
.92ba	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.92bd	d0 08		bne $92c7			bne 	_ESTASDExit
.92bf	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.92c2	d0 03		bne $92c7			bne 	_ESTASDExit
.92c4	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.92c7					_ESTASDExit:
.92c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.92c8					EvaluateTerm:
.92c8	b1 30		lda ($30),y			lda 	(codePtr),y
.92ca	30 18		bmi $92e4			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.92cc	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.92ce	b0 6f		bcs $933f			bcs 	_ETVariable
.92d0	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.92d2	90 6e		bcc $9342			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.92d4	c9 3a		cmp #$3a			cmp 	#'9'+1
.92d6	b0 6a		bcs $9342			bcs 	_ETPuncUnary
.92d8	20 a6 91	jsr $91a6			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.92db					_ETNumber:
.92db	c8		iny				iny 								; keep encoding until we have the numbers
.92dc	b1 30		lda ($30),y			lda 	(codePtr),y
.92de	20 a9 91	jsr $91a9			jsr 	EncodeNumberContinue
.92e1	b0 f8		bcs $92db			bcs 	_ETNumber 					; go back if accepted.
.92e3	60		rts				rts
.92e4					_ETCheckUnary:
.92e4	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.92e6	f0 41		beq $9329			beq 	_ETString
.92e8	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.92ea	f0 12		beq $92fe			beq 	_ETHexConstant
.92ec	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.92ee	90 0b		bcc $92fb			bcc 	_ETSyntaxError
.92f0	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.92f2	b0 07		bcs $92fb			bcs 	_ETSyntaxError
.92f4	da		phx				phx 								; push X on the stack
.92f5	0a		asl a				asl 	a 							; put vector x 2 into X
.92f6	aa		tax				tax
.92f7	c8		iny				iny 								; consume unary function token
.92f8	7c b6 80	jmp ($80b6,x)			jmp 	(VectorSet0,x) 				; and do it.
.92fb					_ETSyntaxError:
.92fb	4c 44 a4	jmp $a444			jmp 	SyntaxError
.92fe					_ETHexConstant:
.92fe	c8		iny				iny 								; skip #
.92ff	c8		iny				iny 								; skip count
.9300	20 41 97	jsr $9741			jsr 	NSMSetZero 					; clear result
.9303					_ETHLoop:
.9303	b1 30		lda ($30),y			lda 	(codePtr),y
.9305	c8		iny				iny 								; and consume
.9306	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9308	f0 1e		beq $9328			beq 	_ETHExit
.930a	48		pha				pha 								; save on stack.
.930b	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; x 2
.930e	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; x 4
.9311	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; x 8
.9314	20 56 97	jsr $9756			jsr 	NSMShiftLeft 				; x 16
.9317	68		pla				pla 								; ASCII
.9318	c9 41		cmp #$41			cmp 	#'A'
.931a	90 02		bcc $931e			bcc 	_ETHNotChar
.931c	e9 07		sbc #$07			sbc 	#7
.931e					_ETHNotChar:
.931e	29 0f		and #$0f			and 	#15 						; digit now
.9320	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9323	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9326	80 db		bra $9303			bra 	_ETHLoop 					; go round.
.9328					_ETHExit:
.9328	60		rts				rts
.9329					_ETString:
.9329	c8		iny				iny 								; look at length
.932a	b1 30		lda ($30),y			lda 	(codePtr),y
.932c	48		pha				pha
.932d	c8		iny				iny 								; first character
.932e	20 dc 9d	jsr $9ddc			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9331	68		pla				pla 								; restore count and save
.9332	85 36		sta $36				sta 	zTemp0
.9334	98		tya				tya 								; add length to Y to skip it.
.9335	18		clc				clc
.9336	65 36		adc $36				adc 	zTemp0
.9338	a8		tay				tay
.9339	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.933b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.933e	60		rts				rts
.933f					_ETVariable:
.933f	4c 99 93	jmp $9399			jmp 	VariableHandler
.9342					_ETPuncUnary:
.9342	c8		iny				iny 								; consume the unary character
.9343	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9345	f0 2d		beq $9374			beq 	_ETUnaryNegate
.9347	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9349	f0 39		beq $9384			beq 	_ETDereference
.934b	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.934d	f0 43		beq $9392			beq 	_ETParenthesis
.934f	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9351	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9353	f0 06		beq $935b			beq 	_ETIndirection
.9355	e6 36		inc $36				inc 	zTemp0
.9357	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9359	d0 a0		bne $92fb			bne 	_ETSyntaxError
.935b					_ETIndirection:
.935b	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.935d	1a		inc a				inc 	a
.935e	48		pha				pha
.935f	20 c8 92	jsr $92c8			jsr 	EvaluateTerm				; evaluate the term
.9362	20 0c 91	jsr $910c			jsr 	Dereference 				; dereference it.
.9365	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.9368	d0 07		bne $9371			bne 	_ETTypeMismatch
.936a	68		pla				pla 								; indirection 1-2
.936b	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.936d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9370	60		rts				rts
.9371					_ETTypeMismatch:
.9371	4c 4e a4	jmp $a44e			jmp 	TypeError
.9374					_ETUnaryNegate:
.9374	20 c8 92	jsr $92c8			jsr 	EvaluateTerm				; evaluate the term
.9377	20 0c 91	jsr $910c			jsr 	Dereference 				; dereference it.
.937a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.937d	29 10		and #$10			and 	#NSTString
.937f	d0 f0		bne $9371			bne 	_ETTypeMismatch
.9381	4c ed 96	jmp $96ed			jmp 	NSMNegate  					; just toggles the sign bit.
.9384					_ETDereference:
.9384	20 c8 92	jsr $92c8			jsr 	EvaluateTerm				; evaluate the term
.9387	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.938a	29 20		and #$20			and 	#NSBIsReference
.938c	f0 e3		beq $9371			beq 	_ETTypeMismatch
.938e	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.9391	60		rts				rts
.9392					_ETParenthesis:
.9392	20 f7 8f	jsr $8ff7			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9395	20 62 9e	jsr $9e62			jsr 	CheckRightBracket 			; check for )
.9398	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9399					VariableHandler:
.9399	b1 30		lda ($30),y			lda 	(codePtr),y
.939b	18		clc				clc
.939c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.939e	85 37		sta $37				sta 	zTemp0+1
.93a0	c8		iny				iny
.93a1	b1 30		lda ($30),y			lda 	(codePtr),y
.93a3	85 36		sta $36				sta 	zTemp0
.93a5	c8		iny				iny
.93a6	18		clc				clc									; copy variable address+3 to mantissa
.93a7	69 03		adc #$03			adc 	#3
.93a9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93ac	a5 37		lda $37				lda 	zTemp0+1
.93ae	69 00		adc #$00			adc 	#0
.93b0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93b3	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.93b6	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.93b9	9e 28 06	stz $0628,x			stz 	NSExponent,x
.93bc	5a		phy				phy
.93bd	a0 02		ldy #$02			ldy 	#2 							; read type
.93bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.93c1	7a		ply				ply
.93c2	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.93c4	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.93c6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93c9	29 04		and #$04			and 	#NSBIsArray
.93cb	d0 01		bne $93ce			bne 	_VHArray
.93cd	60		rts				rts
.93ce					_VHArray:
.93ce	e8		inx				inx
.93cf	20 d9 96	jsr $96d9			jsr 	Evaluate8BitInteger 		; get the 1st index.
.93d2	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.93d4	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.93d7	b1 30		lda ($30),y			lda 	(codePtr),y
.93d9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.93db	d0 06		bne $93e3			bne 	_VHNoSecondIndex
.93dd	c8		iny				iny 								; skip the comma
.93de	e8		inx				inx
.93df	20 d9 96	jsr $96d9			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.93e2	ca		dex				dex
.93e3					_VHNoSecondIndex:
.93e3	ca		dex				dex 								; set X back.
.93e4	20 62 9e	jsr $9e62			jsr 	CheckRightBracket 			; and check the right bracket.
.93e7	5a		phy				phy 								; save position
.93e8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.93eb	85 3e		sta $3e				sta 	zaTemp
.93ed	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.93f0	85 3f		sta $3f				sta 	zaTemp+1
.93f2	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.93f4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93f6	f0 02		beq $93fa			beq 	_VHHas2Mask
.93f8	a9 ff		lda #$ff			lda 	#$FF
.93fa					_VHHas2Mask:
.93fa	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.93fd	f0 54		beq $9453			beq 	_VHBadIndex
.93ff	0a		asl a				asl 	a 							; carry will be set if a second index
.9400	90 09		bcc $940b			bcc 	_VHCheckFirstIndex
.9402	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9404	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9406	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9409	90 48		bcc $9453			bcc 	_VHBadIndex
.940b					_VHCheckFirstIndex:
.940b	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.940d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.940f	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.9412	90 3f		bcc $9453			bcc 	_VHBadIndex
.9414	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9416	64 37		stz $37				stz 	zTemp0+1
.9418	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.941b	30 0f		bmi $942c			bmi 	_VHNoMultiply
.941d	da		phx				phx
.941e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9421	48		pha				pha
.9422	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9424	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9426	1a		inc a				inc 	a 							; add 1 for zero base
.9427	fa		plx				plx
.9428	20 e4 a2	jsr $a2e4			jsr 	Multiply8x8 				; calculate -> Z0
.942b	fa		plx				plx
.942c					_VHNoMultiply:
.942c	18		clc				clc
.942d	a5 36		lda $36				lda 	zTemp0
.942f	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9432	85 36		sta $36				sta 	zTemp0
.9434	a5 37		lda $37				lda 	zTemp0+1
.9436	69 00		adc #$00			adc 	#0
.9438	85 37		sta $37				sta 	zTemp0+1
.943a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.943d	20 83 85	jsr $8583			jsr 	ScaleByBaseType
.9440	18		clc				clc
.9441	b2 3e		lda ($3e)			lda 	(zaTemp)
.9443	65 36		adc $36				adc 	zTemp0
.9445	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9448	a0 01		ldy #$01			ldy 	#1
.944a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.944c	65 37		adc $37				adc 	zTemp0+1
.944e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9451	7a		ply				ply 								; restore position
.9452	60		rts				rts
.9453					_VHBadIndex:
.9453	a9 17		lda #$17		lda	#23
.9455	4c ee 8b	jmp $8bee		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a21a					AbsUnary:
.a21a	fa		plx				plx 								; restore stack pos
.a21b	20 95 96	jsr $9695			jsr 	EvaluateNumber 				; get a float or int
.a21e	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.a221	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a224	29 7f		and #$7f			and 	#$7F
.a226	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a229	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9458					AllocUnary:
.9458	fa		plx				plx 								; restore stack pos
.9459	20 cd 96	jsr $96cd			jsr 	Evaluate16BitInteger		; get bytes required.
.945c	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.945f	da		phx				phx 								; save X/Y
.9460	5a		phy				phy
.9461	8a		txa				txa 								; copy X into Y
.9462	a8		tay				tay
.9463	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9466	aa		tax				tax
.9467	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.946a	20 77 94	jsr $9477			jsr 	AllocateXABytes 			; allocate memory
.946d	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9470	8a		txa				txa
.9471	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9474	7a		ply				ply
.9475	fa		plx				plx
.9476	60		rts				rts
.9477					AllocateXABytes:
.9477	5a		phy				phy
.9478	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.947b	84 36		sty $36				sty 	zTemp0
.947d	5a		phy				phy
.947e	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9481	84 37		sty $37				sty 	zTemp0+1
.9483	5a		phy				phy
.9484	18		clc				clc 								; add to low memory pointer
.9485	6d 0c 07	adc $070c			adc 	lowMemPtr
.9488	8d 0c 07	sta $070c			sta 	lowMemPtr
.948b	8a		txa				txa
.948c	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.948f	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9492					_ClearMemory:
.9492	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9495	c5 36		cmp $36				cmp 	zTemp0
.9497	d0 07		bne $94a0			bne 	_CMClearNext
.9499	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.949c	c5 37		cmp $37				cmp 	zTemp0+1
.949e	f0 0c		beq $94ac			beq 	_CMExit
.94a0					_CMClearNext:
.94a0	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.94a2	92 36		sta ($36)			sta 	(zTemp0)
.94a4	e6 36		inc $36				inc 	zTemp0
.94a6	d0 ea		bne $9492			bne 	_ClearMemory
.94a8	e6 37		inc $37				inc		zTemp0+1
.94aa	80 e6		bra $9492			bra 	_ClearMemory
.94ac					_CMExit:
.94ac	fa		plx				plx
.94ad	68		pla				pla
.94ae	7a		ply				ply
.94af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a22a					AscUnary:
.a22a	fa		plx				plx 								; restore stack pos
.a22b	20 a0 96	jsr $96a0			jsr 	EvaluateString 				; get a string
.a22e	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a230	20 43 97	jsr $9743			jsr 	NSMSetByte
.a233	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.a236	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a237					FracUnary:
.a237	fa		plx				plx 								; restore stack pos
.a238	20 95 96	jsr $9695			jsr 	EvaluateNumber 				; get a float or int
.a23b	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.a23e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a241	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a243	f0 04		beq $a249			beq 	_IUZero
.a245	20 07 a1	jsr $a107			jsr 	FloatFractionalPart
.a248	60		rts				rts
.a249					_IUZero:
.a249	20 41 97	jsr $9741			jsr 	NSMSetZero
.a24c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a24d					IntUnary:
.a24d	fa		plx				plx 								; restore stack pos
.a24e	20 95 96	jsr $9695			jsr 	EvaluateNumber 				; get a float or int
.a251	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.a254	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a257	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a259	f0 03		beq $a25e			beq 	_IUExit
.a25b	20 6a a1	jsr $a16a			jsr 	FloatIntegerPart
.a25e					_IUExit:
.a25e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a25f					LenUnary:
.a25f	fa		plx				plx 								; restore stack pos
.a260	20 a0 96	jsr $96a0			jsr 	EvaluateString 				; get a string
.a263	5a		phy				phy
.a264	a0 00		ldy #$00			ldy 	#0 							; find length
.a266					_LenFind:
.a266	b1 36		lda ($36),y			lda 	(zTemp0),y
.a268	f0 06		beq $a270			beq 	_LenExit
.a26a	c8		iny				iny
.a26b	d0 f9		bne $a266			bne 	_LenFind
.a26d	4c 49 a4	jmp $a449			jmp 	RangeError 					; string > 255
.a270					_LenExit:
.a270	98		tya				tya
.a271	20 43 97	jsr $9743			jsr 	NSMSetByte
.a274	7a		ply				ply
.a275	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.a278	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.94b0					Unary_Not:
.94b0	fa		plx				plx
.94b1	20 b8 96	jsr $96b8			jsr 	EvaluateInteger 			; get integer
.94b4	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.94b7	20 71 97	jsr $9771			jsr 	NSMIsZero 					; zero mantissa ?
.94ba	f0 04		beq $94c0			beq 	_NotZero
.94bc	20 41 97	jsr $9741			jsr 	NSMSetZero
.94bf	60		rts				rts
.94c0					_NotZero:
.94c0	4c 5b 8c	jmp $8c5b			jmp 	ReturnTrue
.94c3					_UNBad:
.94c3	4c 53 a4	jmp $a453			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.94c6					Unary_Rnd:
.94c6	20 95 96	jsr $9695			jsr 	EvaluateNumber 				; number to use.
.94c9	20 62 9e	jsr $9e62			jsr 	CheckRightBracket 			; closing bracket
.94cc	20 f5 94	jsr $94f5			jsr 	Random32Bit 				; generate a number.
.94cf	ad 08 07	lda $0708			lda 	RandomSeed+0
.94d2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94d5	ad 09 07	lda $0709			lda 	RandomSeed+1
.94d8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94db	ad 0a 07	lda $070a			lda 	RandomSeed+2
.94de	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94e1	ad 0b 07	lda $070b			lda 	RandomSeed+3
.94e4	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.94e6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94e9	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.94eb	8d 28 06	sta $0628			sta 	NSExponent
.94ee	a9 08		lda #$08			lda 	#NSTFloat
.94f0	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>94f3	db						.byte 	$DB 						; causes a break in the emulator
.94f4	60		rts				rts
.94f5					Random32Bit:
.94f5	5a		phy				phy
.94f6	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.94f8	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.94fb	d0 03		bne $9500			bne 	_Random1
.94fd	a8		tay				tay 								; if so do it 256 times
.94fe	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9500					_Random1:
.9500	0a		asl a				asl 	a 							; LSFR RNG
.9501	2e 09 07	rol $0709			rol 	RandomSeed+1
.9504	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9507	2e 0b 07	rol $070b			rol 	RandomSeed+3
.950a	90 02		bcc $950e			bcc 	_Random2
.950c	49 c5		eor #$c5			eor 	#$C5
.950e					_Random2:
.950e	88		dey				dey
.950f	d0 ef		bne $9500			bne 	_Random1
.9511	7a		ply				ply
.9512	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a279					SgnUnary:
.a279	fa		plx				plx 								; restore stack pos
.a27a	20 95 96	jsr $9695			jsr 	EvaluateNumber 				; get a float or int
.a27d	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.a280	20 71 97	jsr $9771			jsr 	NSMIsZero 					; if zero
.a283	f0 10		beq $a295			beq 	_SGZero  					; return Int Zero
.a285	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a288	48		pha				pha
.a289	a9 01		lda #$01			lda 	#1 							; set to 1
.a28b	20 43 97	jsr $9743			jsr 	NSMSetByte
.a28e	68		pla				pla
.a28f	29 80		and #$80			and		#$80 						; copy the sign byte out
.a291	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a294	60		rts				rts
.a295	20 41 97	jsr $9741	_SGZero:jsr 	NSMSetZero
.a298	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a299					ValUnary:
.a299	fa		plx				plx 								; restore stack pos
.a29a	20 af a2	jsr $a2af			jsr 	ValMainCode 				; do the main val() code
.a29d	b0 01		bcs $a2a0			bcs 	_VUError 					; couldn't convert
.a29f	60		rts				rts
.a2a0					_VUError:
.a2a0	4c 4e a4	jmp $a44e			jmp 	TypeError
.a2a3					IsValUnary:
.a2a3	fa		plx				plx 								; restore stack pos
.a2a4	20 af a2	jsr $a2af			jsr 	ValMainCode 				; do the main val() code
.a2a7	b0 03		bcs $a2ac			bcs 	_VUBad
.a2a9	4c 5b 8c	jmp $8c5b			jmp 	ReturnTrue
.a2ac					_VUBad:
.a2ac	4c 67 8c	jmp $8c67			jmp 	ReturnFalse
.a2af					ValMainCode:
.a2af	20 a0 96	jsr $96a0			jsr 	EvaluateString 				; get a string
.a2b2	20 62 9e	jsr $9e62			jsr 	CheckRightBracket 			; check right bracket present
.a2b5	5a		phy				phy
.a2b6	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a2b8	f0 17		beq $a2d1			beq 	_VMCFail2
.a2ba	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a2bc	48		pha				pha 								; save first character
.a2bd	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a2bf	d0 01		bne $a2c2			bne 	_VMCStart
.a2c1	c8		iny				iny 								; skip over -
.a2c2					_VMCStart:
.a2c2	38		sec				sec 								; initialise first time round.
.a2c3					_VMCNext:
.a2c3	c8		iny				iny 								; pre-increment
.a2c4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a2c6	f0 0c		beq $a2d4			beq 	_VMCSuccess 				; successful.
.a2c8	20 aa 91	jsr $91aa			jsr 	EncodeNumber 				; send it to the number-builder
.a2cb	90 03		bcc $a2d0			bcc 	_VMCFail 					; if failed, give up.
.a2cd	18		clc				clc 								; next time round, countinue
.a2ce	80 f3		bra $a2c3			bra 	_VMCNext
.a2d0					_VMCFail:
.a2d0	68		pla				pla
.a2d1					_VMCFail2:
.a2d1	7a		ply				ply
.a2d2	38		sec				sec
.a2d3	60		rts				rts
.a2d4					_VMCSuccess:
.a2d4	a9 00		lda #$00			lda 	#0 							; construct final
.a2d6	20 aa 91	jsr $91aa			jsr 	EncodeNumber
.a2d9	68		pla				pla
.a2da	c9 2d		cmp #$2d			cmp 	#"-"
.a2dc	d0 03		bne $a2e1			bne 	_VMCNotNegative
.a2de	20 ed 96	jsr $96ed			jsr		NSMNegate
.a2e1					_VMCNotNegative:
.a2e1	7a		ply				ply
.a2e2	18		clc				clc
.a2e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9513					ChrUnary:
.9513	fa		plx				plx 								; restore stack pos
.9514	20 d9 96	jsr $96d9			jsr 	Evaluate8BitInteger			; get value
.9517	48		pha				pha
.9518	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.951b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.951d	20 3e a6	jsr $a63e			jsr 	StringTempAllocate
.9520	68		pla				pla 								; write number to it
.9521	20 7c a6	jsr $a67c			jsr 	StringTempWrite
.9524	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9525					SpcUnary:
.9525	fa		plx				plx 								; restore stack pos
.9526	20 d9 96	jsr $96d9			jsr 	Evaluate8BitInteger			; get value
.9529	5a		phy				phy
.952a	48		pha				pha 								; save count
.952b	20 3e a6	jsr $a63e			jsr 	StringTempAllocate
.952e	7a		ply				ply 								; to do count in Y
.952f					_SpcLoop:
.952f	c0 00		cpy #$00			cpy 	#0
.9531	f0 08		beq $953b			beq 	_SpcExit
.9533	a9 20		lda #$20			lda 	#32
.9535	20 7c a6	jsr $a67c			jsr 	StringTempWrite
.9538	88		dey				dey
.9539	80 f4		bra $952f			bra 	_SPCLoop
.953b					_SpcExit:
.953b	7a		ply				ply
.953c	20 62 9e	jsr $9e62			jsr 	CheckRightBracket
.953f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9540					Unary_Str:
.9540	fa		plx				plx
.9541	20 95 96	jsr $9695			jsr 	EvaluateNumber  			; get number
.9544	20 62 9e	jsr $9e62			jsr 	CheckRightBracket 			; closing bracket
.9547	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9549	20 62 95	jsr $9562			jsr 	ConvertNumberToString 		; do the conversion.
.954c	a9 21		lda #$21			lda		#33 						; create buffer
.954e	20 3e a6	jsr $a63e			jsr 	StringTempAllocate 			; allocate memory
.9551	da		phx				phx
.9552	a2 00		ldx #$00			ldx 	#0
.9554					_USCopy:
.9554	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.9557	20 7c a6	jsr $a67c			jsr 	StringTempWrite
.955a	e8		inx				inx
.955b	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.955e	d0 f4		bne $9554			bne 	_USCopy
.9560	fa		plx				plx
.9561	60		rts				rts
.9562					ConvertNumberToString:
.9562	5a		phy				phy 								; save code position
.9563	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.9566	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.9569	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.956c	10 0a		bpl $9578			bpl 	_CNTSNotNegative
.956e	29 7f		and #$7f			and 	#$7F 						; make +ve
.9570	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9573	a9 2d		lda #$2d			lda 	#"-"
.9575	20 de 95	jsr $95de			jsr 	WriteDecimalBuffer
.9578					_CNTSNotNegative:
.9578	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.957b	f0 15		beq $9592			beq 	_CNTSNotFloat
.957d	e8		inx				inx 								; round up
.957e	a9 01		lda #$01			lda 	#1
.9580	20 43 97	jsr $9743			jsr 	NSMSetByte
.9583	ca		dex				dex
.9584	bd 28 06	lda $0628,x			lda		NSExponent,x
.9587	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.958a	a9 08		lda #$08			lda 	#NSTFloat
.958c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.958f	20 29 a0	jsr $a029			jsr 	FloatAdd
.9592					_CNTSNotFloat:
.9592	20 c0 95	jsr $95c0			jsr 	MakePlusTwoString
.9595	20 07 a1	jsr $a107			jsr 	FloatFractionalPart 		; get the fractional part
.9598	20 cb a1	jsr $a1cb			jsr 	NSNormalise					; normalise , exit if zero
.959b	f0 21		beq $95be			beq 	_CNTSExit
.959d	a9 2e		lda #$2e			lda 	#"."
.959f	20 de 95	jsr $95de			jsr 	WriteDecimalBuffer 			; write decimal place
.95a2					_CNTSDecimal:
.95a2	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.95a5	30 17		bmi $95be			bmi 	_CNTSExit
.95a7	e8		inx				inx 								; x 10.0
.95a8	a9 0a		lda #$0a			lda 	#10
.95aa	20 43 97	jsr $9743			jsr 	NSMSetByte
.95ad	a9 08		lda #$08			lda 	#NSTFloat
.95af	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95b2	ca		dex				dex
.95b3	20 94 a1	jsr $a194			jsr 	FloatMultiply
.95b6	20 c0 95	jsr $95c0			jsr 	MakePlusTwoString
.95b9	20 07 a1	jsr $a107			jsr 	FloatFractionalPart 		; get the fractional part
.95bc	80 e4		bra $95a2			bra 	_CNTSDecimal 				; keep going.
.95be					_CNTSExit:
.95be	7a		ply				ply
.95bf	60		rts				rts
.95c0					MakePlusTwoString:
.95c0	da		phx				phx
.95c1	20 18 97	jsr $9718			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.95c4	e8		inx				inx 								; access it
.95c5	e8		inx				inx
.95c6	20 6a a1	jsr $a16a			jsr 	FloatIntegerPart 			; make it an integer
.95c9	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.95cb	20 d3 9f	jsr $9fd3			jsr 	ConvertInt32
.95ce	a2 00		ldx #$00			ldx	 	#0
.95d0					_MPTSCopy:
.95d0	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.95d3	20 de 95	jsr $95de			jsr 	WriteDecimalBuffer
.95d6	e8		inx				inx
.95d7	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.95da	d0 f4		bne $95d0			bne 	_MPTSCopy
.95dc	fa		plx				plx
.95dd	60		rts				rts
.95de					WriteDecimalBuffer:
.95de	da		phx				phx
.95df	ae 14 07	ldx $0714			ldx 	dbOffset
.95e2	9d 97 08	sta $0897,x			sta 	DecimalBuffer,x
.95e5	9e 98 08	stz $0898,x			stz 	DecimalBuffer+1,x
.95e8	ee 14 07	inc $0714			inc 	dbOffset
.95eb	fa		plx				plx
.95ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.95ed					Unary_Left:
.95ed	fa		plx				plx
.95ee	18		clc				clc 								; only one parameter
.95ef	20 64 96	jsr $9664			jsr 	SubstringInitial 			; set up.
.95f2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.95f5	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.95f8	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.95fb	80 2c		bra $9629			bra 	SubstringMain
.95fd					Unary_Right:
.95fd	fa		plx				plx
.95fe	18		clc				clc 								; only one parameter
.95ff	20 64 96	jsr $9664			jsr 	SubstringInitial 			; set up.
.9602	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9605	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9608	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.960b	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.960e	b0 02		bcs $9612			bcs 	_URNotUnderflow
.9610	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9612					_URNotUnderFlow:
.9612	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9615	80 12		bra $9629			bra 	SubStringMain
.9617					Unary_Mid:
.9617	fa		plx				plx
.9618	38		sec				sec 								; two parameters
.9619	20 64 96	jsr $9664			jsr 	SubstringInitial 			; set up.
.961c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.961f	f0 05		beq $9626			beq 	_UMError
.9621	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9624	80 03		bra $9629			bra 	SubStringMain
.9626					_UMError:
.9626	4c 53 a4	jmp $a453			jmp 	ArgumentError
.9629					SubStringMain:
.9629	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.962c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.962f	b0 2d		bcs $965e			bcs 	_SSMNull 					; if so, return an empty string.
.9631	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9634	f0 28		beq $965e			beq 	_SSMNull 					; return empty string.
.9636	18		clc				clc 								; add the offset +1 to the address and
.9637	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.963a	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.963d	85 36		sta $36				sta 	zTemp0
.963f	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9642	69 00		adc #$00			adc 	#0
.9644	85 37		sta $37				sta 	zTemp0+1
.9646					_SSMNoCarry:
.9646	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9649	20 3e a6	jsr $a63e			jsr 	StringTempAllocate 			; allocate that many characters
.964c	5a		phy				phy 								; save Y
.964d	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.964f					_SSMCopy:
.964f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9651	f0 09		beq $965c			beq 	_SSMEString 				; no more to copy
.9653	20 7c a6	jsr $a67c			jsr 	StringTempWrite 			; and write it out.
.9656	c8		iny				iny
.9657	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.965a	d0 f3		bne $964f			bne 	_SSMCopy
.965c					_SSMEString:
.965c	7a		ply				ply
.965d					_SSMExit:
.965d	60		rts				rts
.965e					_SSMNull:
.965e	a9 00		lda #$00			lda 	#0
.9660	20 3e a6	jsr $a63e			jsr 	StringTempAllocate
.9663	60		rts				rts
.9664					SubstringInitial:
.9664	da		phx				phx 								; save initial stack position
.9665	08		php				php 								; save carry on stack indicating 2 parameters
.9666	20 a0 96	jsr $96a0			jsr 	EvaluateString 				; get a string
.9669	5a		phy				phy 								; calculate length to exponent.
.966a	a0 ff		ldy #$ff			ldy 	#$FF
.966c					_SIFindLength:
.966c	c8		iny				iny
.966d	b1 36		lda ($36),y			lda 	(zTemp0),y
.966f	d0 fb		bne $966c			bne 	_SIFindLength
.9671	98		tya				tya
.9672	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9675	7a		ply				ply
.9676	e8		inx				inx
.9677	20 6a 9e	jsr $9e6a			jsr 	CheckComma 					; comma next
.967a	20 d9 96	jsr $96d9			jsr 	Evaluate8BitInteger 		; get next parameter
.967d	28		plp				plp 								; is it the last parameter ?
.967e	90 07		bcc $9687			bcc 	_SSIExit 					; if so, exit.
.9680	e8		inx				inx
.9681	20 6a 9e	jsr $9e6a			jsr 	CheckComma 					; comma next
.9684	20 d9 96	jsr $96d9			jsr 	Evaluate8BitInteger 		; get last parameter
.9687					_SSIExit:
.9687	fa		plx				plx
.9688	20 62 9e	jsr $9e62			jsr 	CheckRightBracket 			; check closing bracket
.968b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.968c					EvaluateValue:
.968c	48		pha				pha
.968d	20 f7 8f	jsr $8ff7			jsr		EvaluateExpression 			; expression
.9690	20 0c 91	jsr $910c			jsr 	Dereference					; derefernce it
.9693	68		pla				pla
.9694	60		rts				rts
.9695					EvaluateNumber:
.9695	20 8c 96	jsr $968c			jsr 	EvaluateValue 				; get a value
.9698	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.969b	29 10		and #$10			and 	#NSBIsString
.969d	d0 16		bne $96b5			bne 	HelperTypeError
.969f	60		rts				rts
.96a0					EvaluateString:
.96a0	20 8c 96	jsr $968c			jsr 	EvaluateValue 				; get a value
.96a3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.96a6	29 10		and #$10			and 	#NSBIsString
.96a8	f0 0b		beq $96b5			beq 	HelperTypeError
.96aa					CopyAddressToTemp0:
.96aa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.96ad	85 36		sta $36				sta 	zTemp0
.96af	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.96b2	85 37		sta $37				sta 	zTemp0+1
.96b4	60		rts				rts
.96b5					HelperTypeError:
.96b5	4c 4e a4	jmp $a44e			jmp 	TypeError
.96b8					EvaluateInteger:
.96b8	20 95 96	jsr $9695			jsr 	EvaluateNumber
.96bb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.96be	d0 0a		bne $96ca			bne 	HelperValueError 			; if not, it's a float.
.96c0	60		rts				rts
.96c1					EvaluateUnsignedInteger:
.96c1	20 b8 96	jsr $96b8			jsr 	EvaluateInteger 			; check integer is +ve
.96c4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96c7	30 01		bmi $96ca			bmi 	HelperValueError
.96c9	60		rts				rts
.96ca					HelperValueError:
.96ca	4c 53 a4	jmp $a453			jmp 	ArgumentError
.96cd					Evaluate16BitInteger:
.96cd	20 c1 96	jsr $96c1			jsr	 	EvaluateUnsignedInteger		; get integer
.96d0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.96d3	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.96d6	d0 f2		bne $96ca			bne 	HelperValueError
.96d8	60		rts				rts
.96d9					Evaluate8BitInteger:
.96d9	20 c1 96	jsr $96c1			jsr	 	EvaluateUnsignedInteger 	; get an integer
.96dc	d0 ec		bne $96ca			bne 	HelperValueError
.96de	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.96e1	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.96e4	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.96e7	d0 e1		bne $96ca			bne 	HelperValueError
.96e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.96ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a2e4					Multiply8x8:
.a2e4	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a2e5	85 36		sta $36			  	sta 	zTemp0
.a2e7	86 37		stx $37				stx 	zTemp0+1
.a2e9	a9 00		lda #$00			lda 	#0
.a2eb	a2 08		ldx #$08			ldx 	#8
.a2ed					_M88Loop:
.a2ed	90 03		bcc $a2f2			bcc 	_M88NoAdd
.a2ef	18		clc				clc
.a2f0	65 37		adc $37				adc 	zTemp0+1
.a2f2					_M88NoAdd:
.a2f2	6a		ror a				ror 	a
.a2f3	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a2f5	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2f6	d0 f5		bne $a2ed			bne 	_M88Loop
.a2f8	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.96ed					NSMNegate:
.96ed	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96f0	49 80		eor #$80			eor 	#NSBIsNegative
.96f2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96f5	60		rts				rts
.96f6					NSMNegateMantissa:
.96f6	38		sec				sec
.96f7	a9 00		lda #$00			lda 	#0
.96f9	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.96fc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.96ff	a9 00		lda #$00			lda 	#0
.9701	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9704	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9707	a9 00		lda #$00			lda 	#0
.9709	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.970c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.970f	a9 00		lda #$00			lda 	#0
.9711	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9714	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9717	60		rts				rts
.9718					NSMShiftUpTwo:
.9718	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.971b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.971e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9721	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9724	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9727	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.972a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.972d	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9730	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9733	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9736	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9739	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.973c	60		rts				rts
.973d					NSMSetZeroMantissaOnly:
.973d	a9 00		lda #$00			lda 	#0
.973f	80 08		bra $9749			bra 	NSMSetMantissa
.9741					NSMSetZero:
.9741	a9 00		lda #$00			lda 	#0
.9743					NSMSetByte:
.9743	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9746	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9749					NSMSetMantissa:
.9749	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.974c	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.974f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9752	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9755	60		rts				rts
.9756					NSMShiftLeft:
.9756	18		clc				clc
.9757					NSMRotateLeft:
.9757	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.975a	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.975d	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9760	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9763	60		rts				rts
.9764					NSMShiftRight:
.9764	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9767	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.976a	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.976d	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9770	60		rts				rts
.9771					NSMIsZero:
.9771	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9774	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9777	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.977a	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.977d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a2fb					Assemble_ora:
.a2fb	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a2fe	01					.byte $01
.a2ff					Assemble_and:
.a2ff	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a302	21					.byte $21
.a303					Assemble_eor:
.a303	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a306	41					.byte $41
.a307					Assemble_adc:
.a307	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a30a	61					.byte $61
.a30b					Assemble_sta:
.a30b	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a30e	81					.byte $81
.a30f					Assemble_lda:
.a30f	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a312	a1					.byte $a1
.a313					Assemble_cmp:
.a313	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a316	c1					.byte $c1
.a317					Assemble_sbc:
.a317	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a31a	e1					.byte $e1
.a31b					Assemble_asl:
.a31b	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a31e	02					.byte $02
>a31f	75					.byte $75
.a320					Assemble_rol:
.a320	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a323	22					.byte $22
>a324	75					.byte $75
.a325					Assemble_lsr:
.a325	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a328	42					.byte $42
>a329	75					.byte $75
.a32a					Assemble_ror:
.a32a	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a32d	62					.byte $62
>a32e	75					.byte $75
.a32f					Assemble_stx:
.a32f	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a332	82					.byte $82
>a333	50					.byte $50
.a334					Assemble_ldx:
.a334	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a337	a2					.byte $a2
>a338	d0					.byte $d0
.a339					Assemble_dec:
.a339	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a33c	c2					.byte $c2
>a33d	55					.byte $55
.a33e					Assemble_inc:
.a33e	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a341	e2					.byte $e2
>a342	55					.byte $55
.a343					Assemble_stz:
.a343	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a346	60					.byte $60
>a347	44					.byte $44
.a348					Assemble_bit:
.a348	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a34b	20					.byte $20
>a34c	55					.byte $55
.a34d					Assemble_sty:
.a34d	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a350	80					.byte $80
>a351	54					.byte $54
.a352					Assemble_ldy:
.a352	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a355	a0					.byte $a0
>a356	d5					.byte $d5
.a357					Assemble_cpy:
.a357	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a35a	c0					.byte $c0
>a35b	d4					.byte $d4
.a35c					Assemble_cpx:
.a35c	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a35f	e0					.byte $e0
>a360	d0					.byte $d0
.a361					Assemble_tsb:
.a361	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a364	00					.byte $00
>a365	50					.byte $50
.a366					Assemble_trb:
.a366	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a369	10					.byte $10
>a36a	50					.byte $50
.a36b					Assemble_jsr:
.a36b	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a36e	14					.byte $14
>a36f	10					.byte $10
.a370					Assemble_jmp:
.a370	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a373	40					.byte $40
>a374	10					.byte $10
.a375					Assemble_bpl:
.a375	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a378	10					.byte $10
.a379					Assemble_bmi:
.a379	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a37c	30					.byte $30
.a37d					Assemble_bvc:
.a37d	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a380	50					.byte $50
.a381					Assemble_bvs:
.a381	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a384	70					.byte $70
.a385					Assemble_bcc:
.a385	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a388	90					.byte $90
.a389					Assemble_bcs:
.a389	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a38c	b0					.byte $b0
.a38d					Assemble_bne:
.a38d	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a390	d0					.byte $d0
.a391					Assemble_beq:
.a391	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a394	f0					.byte $f0
.a395					Assemble_bra:
.a395	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a398	80					.byte $80
.a399					Assemble_brk:
.a399	20 40 82	jsr $8240		jsr	AssembleGroup4
>a39c	00					.byte $00
.a39d					Assemble_php:
.a39d	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3a0	08					.byte $08
.a3a1					Assemble_clc:
.a3a1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3a4	18					.byte $18
.a3a5					Assemble_plp:
.a3a5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3a8	28					.byte $28
.a3a9					Assemble_sec:
.a3a9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3ac	38					.byte $38
.a3ad					Assemble_rti:
.a3ad	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3b0	40					.byte $40
.a3b1					Assemble_pha:
.a3b1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3b4	48					.byte $48
.a3b5					Assemble_cli:
.a3b5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3b8	58					.byte $58
.a3b9					Assemble_phy:
.a3b9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3bc	5a					.byte $5a
.a3bd					Assemble_rts:
.a3bd	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3c0	60					.byte $60
.a3c1					Assemble_pla:
.a3c1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3c4	68					.byte $68
.a3c5					Assemble_sei:
.a3c5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3c8	78					.byte $78
.a3c9					Assemble_ply:
.a3c9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3cc	7a					.byte $7a
.a3cd					Assemble_dey:
.a3cd	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3d0	88					.byte $88
.a3d1					Assemble_txa:
.a3d1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3d4	8a					.byte $8a
.a3d5					Assemble_tya:
.a3d5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3d8	98					.byte $98
.a3d9					Assemble_txs:
.a3d9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3dc	9a					.byte $9a
.a3dd					Assemble_tay:
.a3dd	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3e0	a8					.byte $a8
.a3e1					Assemble_tax:
.a3e1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3e4	aa					.byte $aa
.a3e5					Assemble_clv:
.a3e5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3e8	b8					.byte $b8
.a3e9					Assemble_tsx:
.a3e9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3ec	ba					.byte $ba
.a3ed					Assemble_iny:
.a3ed	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3f0	c8					.byte $c8
.a3f1					Assemble_dex:
.a3f1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3f4	ca					.byte $ca
.a3f5					Assemble_cld:
.a3f5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3f8	d8					.byte $d8
.a3f9					Assemble_phx:
.a3f9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3fc	da					.byte $da
.a3fd					Assemble_inx:
.a3fd	20 40 82	jsr $8240		jsr	AssembleGroup4
>a400	e8					.byte $e8
.a401					Assemble_nop:
.a401	20 40 82	jsr $8240		jsr	AssembleGroup4
>a404	ea					.byte $ea
.a405					Assemble_sed:
.a405	20 40 82	jsr $8240		jsr	AssembleGroup4
>a408	f8					.byte $f8
.a409					Assemble_plx:
.a409	20 40 82	jsr $8240		jsr	AssembleGroup4
>a40c	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a40d					DecimalScalarTable:
>a40d	66 66 66 66				.dword $66666666 ; 0.1
>a411	de					.byte $de
>a412	1f 85 eb 51				.dword $51eb851f ; 0.01
>a416	db					.byte $db
>a417	4c 37 89 41				.dword $4189374c ; 0.001
>a41b	d8					.byte $d8
>a41c	ac 8b db 68				.dword $68db8bac ; 0.0001
>a420	d4					.byte $d4
>a421	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a425	d1					.byte $d1
>a426	83 de 1b 43				.dword $431bde83 ; 1e-06
>a42a	ce					.byte $ce
>a42b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a42f	ca					.byte $ca
>a430	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a434	c7					.byte $c7
>a435	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a439	c4					.byte $c4
>a43a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a43e	c0					.byte $c0
>a43f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a443	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a444					SyntaxError:
.a444	a9 02		lda #$02		lda	#2
.a446	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.a449					RangeError:
.a449	a9 04		lda #$04		lda	#4
.a44b	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.a44e					TypeError:
.a44e	a9 05		lda #$05		lda	#5
.a450	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.a453					ArgumentError:
.a453	a9 07		lda #$07		lda	#7
.a455	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.a458					NotDoneError:
.a458	a9 0c		lda #$0c		lda	#12
.a45a	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.a45d					ErrorText:
>a45d	42 72 65 61 6b 00			.text	"Break",0
>a463	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a46b	72 72 6f 72 00
>a470	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a478	20 62 79 20 7a 65 72 6f 00
>a481	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a489	61 6e 67 65 00
>a48e	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a496	6d 61 74 63 68 00
>a49c	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4a4	65 6d 6f 72 79 00
>a4aa	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4b2	61 72 67 75 6d 65 6e 74 00
>a4bb	53 74 6f 70 00				.text	"Stop",0
>a4c0	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a4c8	6f 6f 20 6c 6f 6e 67 00
>a4d0	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a4d8	6e 20 66 61 69 6c 65 64 00
>a4e1	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a4e9	61 74 61 00
>a4ed	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a4f5	65 6e 74 65 64 00
>a4fb	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a503	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a50f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a517	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a524	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a52c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a539	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a541	68 6f 75 74 20 57 68 69 6c 65 00
>a54c	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a554	68 6f 75 74 20 46 6f 72 00
>a55d	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a565	61 63 6b 20 66 75 6c 6c 00
>a56e	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a576	75 63 74 75 72 65 00
>a57d	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a585	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a592	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a59a	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5a8	41 72 72 61 79 20 73 69			.text	"Array size",0
>a5b0	7a 65 00
>a5b3	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5bb	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.977e					StackOpen:
.977e	48		pha				pha 								; save frame byte
.977f	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9781	0a		asl a				asl 	a 							; claim twice this for storage
.9782	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9784	38		sec				sec 								; so basically subtracting from
.9785	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9787	85 34		sta $34				sta 	basicStack
.9789	b0 08		bcs $9793			bcs 	_SONoBorrow
.978b	c6 35		dec $35				dec 	basicStack+1
.978d	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.978f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9791	90 04		bcc $9797			bcc 	_SOMemory
.9793					_SONoBorrow:
.9793	68		pla				pla 								; get marker back and write at TOS
.9794	92 34		sta ($34)			sta 	(basicStack)
.9796	60		rts				rts
.9797					_SOMemory:
.9797							ERR_STACK
.9797					StackClose:
.9797	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9799	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.979b	0a		asl a				asl 	a 							; claim twice this.
.979c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.979e	85 34		sta $34				sta 	basicStack
.97a0	90 02		bcc $97a4			bcc 	_SCExit
.97a2	e6 35		inc $35				inc 	basicStack+1
.97a4					_SCExit:
.97a4	60		rts				rts
.97a5					StackCheckFrame:
.97a5	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.97a7	29 f0		and #$f0			and 	#$F0 						; check type bits
.97a9	d0 01		bne $97ac			bne 	_SCFError 					; different, we have structures mixed up
.97ab	60		rts				rts
.97ac					_SCFError:
.97ac	8a		txa				txa 								; report error X
.97ad	4c ee 8b	jmp $8bee			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.97b0					STKSaveCodePosition:
.97b0	5a		phy				phy
.97b1	98		tya				tya 								; save Y
.97b2	a0 05		ldy #$05			ldy 	#5
.97b4	91 34		sta ($34),y			sta 	(basicStack),y
.97b6	88		dey				dey 								; save Code Pointer
.97b7					_STKSaveLoop:
.97b7	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.97ba	91 34		sta ($34),y			sta 	(basicStack),y
.97bc	88		dey				dey
.97bd	d0 f8		bne $97b7			bne 	_STKSaveLoop
.97bf	7a		ply				ply
.97c0	60		rts				rts
.97c1					STKLoadCodePosition:
.97c1	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.97c3					_STKLoadLoop:
.97c3	b1 34		lda ($34),y			lda 	(basicStack),y
.97c5	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.97c8	c8		iny				iny
.97c9	c0 05		cpy #$05			cpy 	#5
.97cb	d0 f6		bne $97c3			bne 	_STKLoadLoop
.97cd	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.97cf	a8		tay				tay
.97d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.97d1					StackReset:
.97d1	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.97d3	85 34		sta $34				sta 	0+basicStack
.97d5	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.97d7	85 35		sta $35				sta 	1+basicStack
.97d9	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.97db	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.97dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a5c3					StringConcrete:
.a5c3	5a		phy				phy 								; save position on stack
.a5c4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a5c7	85 38		sta $38				sta 	zTemp1
.a5c9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a5cc	85 39		sta $39				sta 	zTemp1+1
.a5ce	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a5d0					_SALength:
.a5d0	c8		iny				iny
.a5d1	b1 38		lda ($38),y			lda 	(zTemp1),y
.a5d3	d0 fb		bne $a5d0			bne 	_SALength
.a5d5	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a5d7	b0 3f		bcs $a618			bcs 	_SALengthError
.a5d9	98		tya				tya 				 				; length of the new string
.a5da	18		clc				clc
.a5db	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a5dd	90 02		bcc $a5e1			bcc 	_SAHaveLength
.a5df	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a5e1					_SAHaveLength:
.a5e1	48		pha				pha 								; save length.
.a5e2	38		sec				sec
.a5e3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a5e5	6d 0e 07	adc $070e			adc 	StringMemory
.a5e8	8d 0e 07	sta $070e			sta 	StringMemory
.a5eb	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a5ed	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a5f0	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a5f2	6d 0f 07	adc $070f			adc 	StringMemory+1
.a5f5	8d 0f 07	sta $070f			sta 	StringMemory+1
.a5f8	85 3b		sta $3b				sta 	zTemp2+1
.a5fa	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a5fd	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a5fe	38		sec				sec
.a5ff	e9 03		sbc #$03			sbc 	#3
.a601	92 3a		sta ($3a)			sta 	(zTemp2)
.a603	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a605	a0 01		ldy #$01			ldy 	#1
.a607	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a609					_SACopyNewString:
.a609	a0 00		ldy #$00			ldy 	#0
.a60b					_SACopyNSLoop:
.a60b	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a60d	c8		iny				iny 								; write two on in string storage
.a60e	c8		iny				iny
.a60f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a611	88		dey				dey 								; this makes it one one.
.a612	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a614	d0 f5		bne $a60b			bne 	_SACopyNSLoop
.a616	7a		ply				ply
.a617	60		rts				rts
.a618					_SALengthError:
.a618	a9 09		lda #$09		lda	#9
.a61a	4c ee 8b	jmp $8bee		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a61d					StringSystemInitialise:
.a61d	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a61f	8d 0e 07	sta $070e			sta 	0+StringMemory
.a622	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a624	8d 0f 07	sta $070f			sta 	1+StringMemory
.a627	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a62a	60		rts				rts
.a62b					StringSpaceInitialise:
.a62b	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a62d	8d 10 07	sta $0710			sta 	StringInitialised
.a630	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a633	8d 11 07	sta $0711			sta 	StringTempPointer
.a636	ad 0f 07	lda $070f			lda 	StringMemory+1
.a639	3a		dec a				dec 	a
.a63a	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a63d	60		rts				rts
.a63e					StringTempAllocate:
.a63e	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a640	b0 35		bcs $a677			bcs 	_STALength
.a642	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a645	30 05		bmi $a64c			bmi 	_STAAllocate
.a647	48		pha				pha 								; save value to subtract.
.a648	20 2b a6	jsr $a62b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a64b	68		pla				pla 								; restore it
.a64c					_STAAllocate:
.a64c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a64e	18		clc				clc  								; deliberate allows one more
.a64f	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a652	8d 11 07	sta $0711			sta 	StringTempPointer
.a655	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a658	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a65a	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a65d	69 ff		adc #$ff			adc 	#$FF
.a65f	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a662	85 3d		sta $3d				sta 	zsTemp+1
.a664	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a667	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a66a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a66d	a9 10		lda #$10			lda 	#NSTString
.a66f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a672	a9 00		lda #$00			lda 	#0 							; clear the target string
.a674	92 3c		sta ($3c)			sta 	(zsTemp)
.a676	60		rts				rts
.a677					_STALength:
.a677	a9 09		lda #$09		lda	#9
.a679	4c ee 8b	jmp $8bee		jmp	ErrorHandler
.a67c					StringTempWrite:
.a67c	48		pha				pha
.a67d	92 3c		sta ($3c)			sta 	(zsTemp)
.a67f	e6 3c		inc $3c				inc 	zsTemp
.a681	d0 02		bne $a685			bne 	_STWNoCarry
.a683	e6 3d		inc $3d				inc 	zsTemp+1
.a685					_STWNoCarry:
.a685	a9 00		lda #$00			lda 	#0
.a687	92 3c		sta ($3c)			sta 	(zsTemp)
.a689	68		pla				pla
.a68a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.97de					BackloadProgram:
.97de	a2 ff		ldx #$ff			ldx 	#$FF
.97e0	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.97e3	20 0d 98	jsr $980d			jsr 	BLReadByte
.97e6	30 1e		bmi $9806			bmi 	_BPExit
.97e8					_BPCopy:
.97e8	e8		inx				inx  								; copy byte in
.97e9	9d 24 08	sta $0824,x			sta 	lineBuffer,x
.97ec	9e 25 08	stz $0825,x			stz 	lineBuffer+1,x
.97ef	20 0d 98	jsr $980d			jsr 	BLReadByte 					; read next byte
.97f2	30 0a		bmi $97fe			bmi 	_BPEndLine 					; -ve = EOL
.97f4	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.97f6	d0 02		bne $97fa			bne 	_BPNotTab
.97f8	a9 20		lda #$20			lda 	#' '
.97fa					_BPNotTab:
.97fa	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.97fc	b0 ea		bcs $97e8			bcs 	_BPCopy
.97fe					_BPEndLine:
.97fe	20 21 9b	jsr $9b21			jsr 	TokeniseLine 				; tokenise the line.
.9801	20 ad 9d	jsr $9dad			jsr 	MemoryAppend 				; append to current program
.9804	80 d8		bra $97de			bra 	BackloadProgram
.9806					_BPExit:
.9806	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9809	20 8b 84	jsr $848b			jsr 	ClearCommand 				; clear variables etc.
.980c	60		rts				rts
.980d					BLReadByte:
.980d					_BLLoad:
.980d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9810	ee 0e 98	inc $980e			inc 	_BLLoad+1
.9813	d0 03		bne $9818			bne 	_BLNoCarry
.9815	ee 0f 98	inc $980f			inc 	_BLLoad+2
.9818					_BLNoCarry:
.9818	c9 00		cmp #$00			cmp 	#0
.981a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.981b					TokeniseSearchTable:
.981b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.981d	85 36		sta $36				sta 	zTemp0
.981f	a0 00		ldy #$00			ldy 	#0
.9821	a9 80		lda #$80			lda 	#$80 						; token #
.9823	85 38		sta $38				sta 	zTemp1
.9825					_TSTLoop:
.9825	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9827	30 49		bmi $9872			bmi 	_TSTFail 					; -ve = end of table
.9829	f0 2e		beq $9859			beq 	_TSTNext 					; zero, check next it's a dummy
.982b	c8		iny				iny 								; get the hash
.982c	b1 36		lda ($36),y			lda 	(zTemp0),y
.982e	88		dey				dey
.982f	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9832	d0 25		bne $9859			bne 	_TSTNext
.9834	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9837	38		sec				sec
.9838	ed 00 07	sbc $0700			sbc 	identStart
.983b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.983d	d0 1a		bne $9859			bne 	_TSTNext
.983f	5a		phy				phy 								; save Y , we might fail
.9840	c8		iny				iny 								; point to text
.9841	c8		iny				iny
.9842	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9845					_TSTCompareName:
.9845	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; compare text.
.9848	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.984a	d0 0c		bne $9858			bne 	_TSTNextPullY 				; fail, pullY and do next
.984c	e8		inx				inx
.984d	c8		iny				iny
.984e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9851	d0 f2		bne $9845			bne 	_TSTCompareName
.9853	7a		ply				ply 								; throw Y
.9854	a5 38		lda $38				lda 	zTemp1 						; get token #
.9856	38		sec				sec 								; return with CS = passed.
.9857	60		rts				rts
.9858					_TSTNextPullY:
.9858	7a		ply				ply 								; restore current, fall through.
.9859					_TSTNext:
.9859	e6 38		inc $38				inc 	zTemp1 						; token counter
.985b	98		tya				tya
.985c	18		clc				clc
.985d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.985f	1a		inc a				inc 	a 							; +1
.9860	1a		inc a				inc 	a 							; +2
.9861	a8		tay				tay
.9862	10 c1		bpl $9825			bpl 	_TSTLoop 					; if Y < $80 loop back
.9864	98		tya				tya 								; add Y to zTemp0 and reset Y
.9865	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9867	18		clc				clc  								; but have tables > 255 bytes
.9868	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.986a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.986c	90 b7		bcc $9825			bcc 	_TSTLoop
.986e	e6 37		inc $37				inc 	zTemp0+1
.9870	80 b3		bra $9825			bra 	_TSTLoop
.9872					_TSTFail:
.9872	18		clc				clc
.9873	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9874					KeywordSet0:
>9874	00 65					.text	0,$65,""               ; $80 !0:EOF
>9876	00 58					.text	0,$58,""               ; $81 !1:SH1
>9878	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>987a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9880	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9888	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>988e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9895	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>989c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>98a3	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>98a9	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>98b1	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>98b9	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>98bf	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>98c6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>98cc	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>98d4	28
>98d5	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>98db	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>98e1	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>98e7	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>98ee	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>98f4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>98fa	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>98ff	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9903	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9909	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9911	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9918	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>991f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9927	43
>9928	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>992e	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9934	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>993b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9941	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9947	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>994c	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9952	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9957	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>995f	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9965	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>996c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9972	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9977	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>997e	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9984	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9989	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9991	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9995	ff					.text	$FF
.9996					KeywordSet1:
>9996	00 65					.text	0,$65,""               ; $80 !0:EOF
>9998	00 58					.text	0,$58,""               ; $81 !1:SH1
>999a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>999c	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>99a4	4c 45
>99a6	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>99ae	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>99b5	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>99ba	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>99c0	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>99c5	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>99cd	45
>99ce	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>99d3	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>99d9	ff					.text	$FF
.99da					KeywordSet2:
>99da	00 65					.text	0,$65,""               ; $80 !0:EOF
>99dc	00 58					.text	0,$58,""               ; $81 !1:SH1
>99de	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>99e0	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>99e5	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>99ea	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>99ef	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>99f4	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>99f9	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>99fe	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9a03	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9a08	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9a0d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9a12	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9a17	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9a1c	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9a21	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9a26	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9a2b	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9a30	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9a35	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9a3a	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9a3f	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9a44	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9a49	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9a4e	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9a53	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9a58	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9a5d	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9a62	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9a67	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9a6c	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9a71	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9a76	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9a7b	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9a80	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9a85	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9a8a	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9a8f	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9a94	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9a99	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9a9e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9aa3	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9aa8	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9aad	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9ab2	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9ab7	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9abc	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9ac1	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9ac6	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9acb	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9ad0	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9ad5	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9ada	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9adf	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9ae4	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9ae9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9aee	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9af3	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9af8	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9afd	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9b02	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9b07	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9b0c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9b11	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9b16	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9b1b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9b20	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9b21					TokeniseLine:
.9b21	20 a9 9c	jsr $9ca9			jsr 	FixLineBufferCase 			; fix line case
.9b24	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9b26	8d 24 07	sta $0724			sta 	tokenOffset
.9b29	9c 25 07	stz $0725			stz 	tokenLineNumber
.9b2c	9c 26 07	stz $0726			stz 	tokenLineNumber+1
.9b2f	a2 ff		ldx #$ff			ldx 	#$FF
.9b31					_TKFindFirst:
.9b31	e8		inx				inx
.9b32	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9b35	f0 79		beq $9bb0			beq 	_TKExit
.9b37	c9 20		cmp #$20			cmp 	#' '
.9b39	90 f6		bcc $9b31			bcc 	_TKFindFirst
.9b3b	c9 30		cmp #$30			cmp 	#'0'
.9b3d	90 07		bcc $9b46			bcc 	_TKNoLineNumber
.9b3f	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b41	b0 03		bcs $9b46			bcs 	_TKNoLineNumber
.9b43	20 d3 9c	jsr $9cd3			jsr 	TokeniseExtractLineNumber
.9b46					_TKNoLineNumber:
.9b46					_TKTokeniseLoop:
.9b46	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9b49	f0 65		beq $9bb0			beq 	_TKExit
.9b4b	e8		inx				inx
.9b4c	c9 20		cmp #$20			cmp 	#' '
.9b4e	f0 f6		beq $9b46			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9b50	ca		dex				dex 								; undo last get, A contains character, X is position.
.9b51	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9b53	f0 61		beq $9bb6			beq 	_TKTokeniseIdentifier
.9b55	c9 41		cmp #$41			cmp 	#'A'
.9b57	90 04		bcc $9b5d			bcc 	_TKTokenisePunctuation
.9b59	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9b5b	90 59		bcc $9bb6			bcc 	_TKTokeniseIdentifier
.9b5d					_TKTokenisePunctuation:
.9b5d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9b5f	f0 27		beq $9b88			beq 	_TKString
.9b61	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9b63	f0 28		beq $9b8d			beq 	_TKHexConstant
.9b65	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9b67	f0 29		beq $9b92			beq 	_TKCheckDouble
.9b69	c9 3e		cmp #$3e			cmp 	#'>'
.9b6b	f0 25		beq $9b92			beq 	_TKCheckDouble
.9b6d					_TKStandardPunctuation:
.9b6d	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get it back.
.9b70	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9b72	90 0e		bcc $9b82			bcc 	_TKNoShift
.9b74	48		pha				pha 								; save
.9b75	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9b77	85 36		sta $36				sta 	zTemp0
.9b79	68		pla				pla
.9b7a	29 20		and #$20			and 	#32 						; bit 5
.9b7c	4a		lsr a				lsr 	a 							; shift into bit 3
.9b7d	4a		lsr a				lsr 	a
.9b7e	05 36		ora $36				ora 	zTemp0
.9b80	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9b82					_TKNoShift:
.9b82	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte 			; write the punctuation character
.9b85	e8		inx				inx 								; consume the character
.9b86	80 be		bra $9b46			bra 	_TKTokeniseLoop 			; and loop round again.
.9b88					_TKString:
.9b88	20 38 9c	jsr $9c38			jsr 	TokeniseString
.9b8b	80 b9		bra $9b46			bra 	_TKTokeniseLoop
.9b8d					_TKHexConstant:
.9b8d	20 73 9c	jsr $9c73			jsr 	TokeniseHexConstant
.9b90	80 b4		bra $9b46			bra 	_TKTokeniseLoop
.9b92					_TKCheckDouble:
.9b92	bd 25 08	lda $0825,x			lda 	lineBuffer+1,x 				; get next character
.9b95	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9b97	90 d4		bcc $9b6d			bcc 	_TKStandardPunctuation
.9b99	c9 3f		cmp #$3f			cmp 	#'>'+1
.9b9b	b0 d0		bcs $9b6d			bcs 	_TKStandardPunctuation
.9b9d	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9ba0	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9ba2	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9ba3	7d 25 08	adc $0825,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9ba6	38		sec				sec
.9ba7	e9 3c		sbc #$3c			sbc 	#'<'
.9ba9	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9bac	e8		inx				inx 								; consume both
.9bad	e8		inx				inx
.9bae	80 96		bra $9b46			bra 	_TKTokeniseLoop
.9bb0	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9bb2	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9bb5	60		rts				rts
.9bb6					_TKTokeniseIdentifier:
.9bb6	8e 00 07	stx $0700			stx 	identStart 					; save start
.9bb9	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9bbc					_TKCheckLoop:
.9bbc	e8		inx				inx 								; look at next, we know first is identifier.
.9bbd	bd 24 08	lda $0824,x			lda  	lineBuffer,x
.9bc0	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9bc2	f0 f8		beq $9bbc			beq 	_TKCheckLoop
.9bc4	c9 30		cmp #$30			cmp	 	#"0"
.9bc6	90 0c		bcc $9bd4			bcc 	_TKEndIdentifier
.9bc8	c9 3a		cmp #$3a			cmp 	#"9"+1
.9bca	90 f0		bcc $9bbc			bcc 	_TKCheckLoop
.9bcc	c9 41		cmp #$41			cmp	 	#"A"
.9bce	90 04		bcc $9bd4			bcc 	_TKEndIdentifier
.9bd0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9bd2	90 e8		bcc $9bbc			bcc 	_TKCheckLoop
.9bd4					_TKEndIdentifier:
.9bd4	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9bd7	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9bd9	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9bdb	f0 06		beq $9be3			beq 	_TKHasTypeCharacter
.9bdd	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9bdf	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9be1	d0 07		bne $9bea			bne 	_TKNoTypeCharacter
.9be3					_TKHasTypeCharacter:
.9be3	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9be6	e8		inx				inx 								; read next
.9be7	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9bea					_TKNoTypeCharacter:
.9bea	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9bec	d0 09		bne $9bf7			bne 	_TKNoArray
.9bee	e8		inx				inx 								; skip the (
.9bef	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9bf2	09 04		ora #$04			ora 	#$04
.9bf4	8d 04 07	sta $0704			sta 	identTypeByte
.9bf7					_TKNoArray:
.9bf7	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9bfa	20 94 9c	jsr $9c94			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9bfd	a0 98		ldy #$98			ldy 	#(KeywordSet0) >> 8
.9bff	a9 74		lda #$74			lda 	#(KeywordSet0) & $FF
.9c01	20 1b 98	jsr $981b			jsr 	TokeniseSearchTable
.9c04	a2 00		ldx #$00			ldx 	#0
.9c06	b0 1f		bcs $9c27			bcs 	_TKFoundToken
.9c08	a0 99		ldy #$99			ldy 	#(KeywordSet1) >> 8
.9c0a	a9 96		lda #$96			lda 	#(KeywordSet1) & $FF
.9c0c	20 1b 98	jsr $981b			jsr 	TokeniseSearchTable
.9c0f	a2 81		ldx #$81			ldx 	#$81
.9c11	b0 14		bcs $9c27			bcs 	_TKFoundToken
.9c13	a0 99		ldy #$99			ldy 	#(KeywordSet2) >> 8
.9c15	a9 da		lda #$da			lda 	#(KeywordSet2) & $FF
.9c17	20 1b 98	jsr $981b			jsr 	TokeniseSearchTable
.9c1a	a2 82		ldx #$82			ldx 	#$82
.9c1c	b0 09		bcs $9c27			bcs 	_TKFoundToken
.9c1e	20 24 9d	jsr $9d24			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9c21	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9c24	4c 46 9b	jmp $9b46			jmp 	_TKTokeniseLoop 			; and go round again.
.9c27					_TKFoundToken:
.9c27	48		pha				pha 								; save token
.9c28	8a		txa				txa 								; shift in X, is there one ?
.9c29	f0 03		beq $9c2e			beq 	_TKNoTShift
.9c2b	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte 			; if so, write it out
.9c2e					_TKNoTShift:
.9c2e	68		pla				pla 								; restore and write token
.9c2f	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9c32	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9c35	4c 46 9b	jmp $9b46			jmp 	_TKTokeniseLoop 			; and go round again.
.9c38					TokeniseString:
.9c38	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9c3a	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9c3d	e8		inx				inx									; start of quoted string.
.9c3e	da		phx				phx 								; push start of string on top
.9c3f	ca		dex				dex
.9c40					_TSFindEnd:
.9c40	e8		inx				inx
.9c41	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character
.9c44	f0 04		beq $9c4a			beq 	_TSEndOfString
.9c46	c9 22		cmp #$22			cmp 	#'"'
.9c48	d0 f6		bne $9c40			bne 	_TSFindEnd
.9c4a					_TSEndOfString:
.9c4a	7a		ply				ply  								; so now Y is first character, X is character after end.
.9c4b	48		pha				pha 								; save terminating character
.9c4c	20 54 9c	jsr $9c54			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9c4f	68		pla				pla 								; terminating character
.9c50	f0 01		beq $9c53			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9c52	e8		inx				inx
.9c53					_TSNotQuote:
.9c53	60		rts				rts
.9c54					TOWriteBlockXY:
.9c54	86 36		stx $36				stx 	zTemp0 						; write end character
.9c56	98		tya				tya
.9c57	49 ff		eor #$ff			eor 	#$FF
.9c59	38		sec				sec
.9c5a	65 36		adc $36				adc 	zTemp0
.9c5c	1a		inc a				inc 	a 							; one extra for NULL
.9c5d	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9c60					_TOBlockLoop:
.9c60	c4 36		cpy $36				cpy 	zTemp0
.9c62	f0 09		beq $9c6d			beq 	_TOBlockExit
.9c64	b9 24 08	lda $0824,y			lda 	lineBuffer,y
.9c67	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9c6a	c8		iny				iny
.9c6b	80 f3		bra $9c60			bra 	_TOBlockLoop
.9c6d					_TOBlockExit:
.9c6d	a9 00		lda #$00			lda 	#0
.9c6f	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9c72	60		rts				rts
.9c73					TokeniseHexConstant:
.9c73	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9c75	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9c78	e8		inx				inx									; start of quoted string.
.9c79	da		phx				phx 								; push start of constant on top
.9c7a	ca		dex				dex
.9c7b					_THFindLoop:
.9c7b	e8		inx				inx
.9c7c	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9c7f	c9 30		cmp #$30			cmp 	#"0"
.9c81	90 0c		bcc $9c8f			bcc 	_THFoundEnd
.9c83	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c85	90 f4		bcc $9c7b			bcc 	_THFindLoop
.9c87	c9 41		cmp #$41			cmp 	#"A"
.9c89	90 04		bcc $9c8f			bcc 	_THFoundEnd
.9c8b	c9 47		cmp #$47			cmp 	#"F"+1
.9c8d	90 ec		bcc $9c7b			bcc 	_THFindLoop
.9c8f					_THFoundEnd:
.9c8f	7a		ply				ply 								; restore start
.9c90	20 54 9c	jsr $9c54			jsr 	TOWriteBlockXY 				; output the block
.9c93	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9c94					TokeniseCalculateHash:
.9c94	da		phx				phx
.9c95	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9c98	a9 00		lda #$00			lda 	#0
.9c9a					_TCHLoop:
.9c9a	18		clc				clc
.9c9b	7d 24 08	adc $0824,x			adc 	lineBuffer,x
.9c9e	e8		inx				inx
.9c9f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9ca2	d0 f6		bne $9c9a			bne 	_TCHLoop
.9ca4	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9ca7	fa		plx				plx
.9ca8	60		rts				rts
.9ca9					FixLineBufferCase:
.9ca9	a2 00		ldx #$00			ldx 	#0
.9cab					_FLBCLoop:
.9cab	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next character
.9cae	f0 22		beq $9cd2			beq 	_FLBCExit 					; end of string.
.9cb0	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9cb2	f0 11		beq $9cc5			beq 	_FLBCInQuotes
.9cb4	e8		inx				inx
.9cb5	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9cb7	90 f2		bcc $9cab			bcc 	_FLBCLoop
.9cb9	c9 7b		cmp #$7b			cmp 	#'z'+1
.9cbb	b0 ee		bcs $9cab			bcs 	_FLBCLoop
.9cbd	38		sec				sec 								; make U/C
.9cbe	e9 20		sbc #$20			sbc 	#32
.9cc0	9d 23 08	sta $0823,x			sta	 	lineBuffer-1,x 				; write back
.9cc3	80 e6		bra $9cab			bra 	_FLBCLoop
.9cc5					_FLBCInQuotes:
.9cc5	e8		inx				inx 								; advance
.9cc6	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next
.9cc9	f0 07		beq $9cd2			beq 	_FLBCExit 					; exit on EOS
.9ccb	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9ccd	d0 f6		bne $9cc5			bne 	_FLBCInQuotes
.9ccf	e8		inx				inx 								; skip over it
.9cd0	80 d9		bra $9cab			bra 	_FLBCLoop
.9cd2					_FLBCExit:
.9cd2	60		rts				rts
.9cd3					TokeniseExtractLineNumber:
.9cd3	ad 26 07	lda $0726			lda 	tokenLineNumber+1 			; push current value on stack
.9cd6	48		pha				pha
.9cd7	ad 25 07	lda $0725			lda 	tokenLineNumber
.9cda	48		pha				pha
.9cdb	20 11 9d	jsr $9d11			jsr 	_TELNTimes2 				; line # x 4
.9cde	20 11 9d	jsr $9d11			jsr 	_TELNTimes2 				; line # x 2
.9ce1	18		clc				clc 								; add stacked value
.9ce2	68		pla				pla
.9ce3	6d 25 07	adc $0725			adc 	tokenLineNumber
.9ce6	8d 25 07	sta $0725			sta 	tokenLineNumber
.9ce9	68		pla				pla
.9cea	6d 26 07	adc $0726			adc 	tokenLineNumber+1
.9ced	8d 26 07	sta $0726			sta 	tokenLineNumber+1 			; line # x 5
.9cf0	20 11 9d	jsr $9d11			jsr 	_TELNTimes2 				; line # x 10
.9cf3	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get and consume character
.9cf6	e8		inx				inx
.9cf7	29 0f		and #$0f			and 	#15 						; add to line #
.9cf9	18		clc				clc
.9cfa	6d 25 07	adc $0725			adc 	tokenLineNumber
.9cfd	8d 25 07	sta $0725			sta 	tokenLineNumber
.9d00	90 03		bcc $9d05			bcc 	_TLENNoCarry
.9d02	ee 26 07	inc $0726			inc 	tokenLineNumber+1
.9d05					_TLENNoCarry:
.9d05	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; more digits ?
.9d08	c9 30		cmp #$30			cmp 	#'0'
.9d0a	90 04		bcc $9d10			bcc 	_TLENExit
.9d0c	c9 3a		cmp #$3a			cmp 	#'9'+1
.9d0e	90 c3		bcc $9cd3			bcc 	TokeniseExtractLineNumber
.9d10					_TLENExit:
.9d10	60		rts				rts
.9d11					_TELNTimes2:
.9d11	0e 25 07	asl $0725			asl 	tokenLineNumber
.9d14	2e 26 07	rol $0726			rol 	tokenLineNumber+1
.9d17	60		rts				rts
.9d18					TokeniseWriteByte:
.9d18	da		phx				phx
.9d19	ae 24 07	ldx $0724			ldx 	tokenOffset 				; next slot to write to
.9d1c	9d 24 07	sta $0724,x			sta 	tokenOffset,x 				; write byte out
.9d1f	ee 24 07	inc $0724			inc 	tokenOffset 				; advance slot.
.9d22	fa		plx				plx
.9d23	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9d24					CheckCreateVariableRecord:
.9d24	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9d26	85 36		sta $36				sta 	0+zTemp0
.9d28	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9d2a	85 37		sta $37				sta 	1+zTemp0
.9d2c					_CCVSearch:
.9d2c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9d2e	f0 2c		beq $9d5c			beq 	_CCVFail
.9d30	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9d32	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9d34	cd 03 07	cmp $0703			cmp 	identHash
.9d37	d0 16		bne $9d4f			bne 	_CCVNext
.9d39	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9d3b	ae 00 07	ldx $0700			ldx 	identStart
.9d3e					_CCVCompare:
.9d3e	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9d41	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9d43	e8		inx				inx 								; advance pointers
.9d44	c8		iny				iny
.9d45	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9d46	d0 07		bne $9d4f			bne 	_CCVNext  					; didn't match go to next.
.9d48	90 f4		bcc $9d3e			bcc 	_CCVCompare 				; not finished yet.
.9d4a	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9d4d	f0 41		beq $9d90			beq 	_CCVFound 					; yes, we were successful
.9d4f					_CCVNext:
.9d4f	18		clc				clc
.9d50	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9d52	65 36		adc $36				adc 	zTemp0
.9d54	85 36		sta $36				sta 	zTemp0
.9d56	90 d4		bcc $9d2c			bcc 	_CCVSearch
.9d58	e6 37		inc $37				inc 	zTemp0+1
.9d5a	80 d0		bra $9d2c			bra 	_CCVSearch
.9d5c					_CCVFail:
.9d5c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9d5e	ad 03 07	lda $0703			lda 	identHash
.9d61	91 36		sta ($36),y			sta 	(zTemp0),y
.9d63	c8		iny				iny 								; offset 2 is the type byte
.9d64	ad 04 07	lda $0704			lda 	identTypeByte
.9d67	91 36		sta ($36),y			sta 	(zTemp0),y
.9d69	c8		iny				iny
.9d6a					_CCVData:
.9d6a	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9d6c	91 36		sta ($36),y			sta 	(zTemp0),y
.9d6e	c8		iny				iny
.9d6f	c0 08		cpy #$08			cpy 	#8
.9d71	90 f7		bcc $9d6a			bcc 	_CCVData
.9d73	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9d76					_CCVCopyName:
.9d76	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9d79	91 36		sta ($36),y			sta 	(zTemp0),y
.9d7b	e8		inx				inx
.9d7c	c8		iny				iny
.9d7d	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9d80	d0 f4		bne $9d76			bne 	_CCVCopyName
.9d82	98		tya				tya 								; patch offset
.9d83	92 36		sta ($36)			sta 	(zTemp0)
.9d85	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9d87	91 36		sta ($36),y			sta 	(zTemp0),y
.9d89	88		dey				dey
.9d8a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9d8c	09 80		ora #$80			ora 	#$80
.9d8e	91 36		sta ($36),y			sta 	(zTemp0),y
.9d90					_CCVFound:
.9d90	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9d92	38		sec				sec
.9d93	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9d95	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9d97	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9d9a	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9d9c	20 18 9d	jsr $9d18			jsr 	TokeniseWriteByte
.9d9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a68b					MemoryPeek:
.a68b	b2 36		lda ($36)			lda 	(zTemp0)
.a68d	60		rts				rts
.a68e					MemoryPoke:
.a68e	92 36		sta ($36)			sta 	(zTemp0)
.a690	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a691					EXTPrintCharacter:
.a691	48		pha				pha
.a692	da		phx				phx
.a693	5a		phy				phy
.a694	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a697	7a		ply				ply
.a698	fa		plx				plx
.a699	68		pla				pla
.a69a	60		rts				rts
.a69b					EXTInputSingleCharacter:
.a69b	da		phx				phx
.a69c	5a		phy				phy
.a69d					_EISCWait:
.a69d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a6a0	c9 00		cmp #$00			cmp 	#0
.a6a2	f0 f9		beq $a69d			beq 	_EISCWait
.a6a4	7a		ply				ply
.a6a5	fa		plx				plx
.a6a6	60		rts				rts
.a6a7					EXTInputLine:
.a6a7	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a6a9					_ILLoop:
.a6a9	da		phx				phx 								; read character in
.a6aa	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a6ad	fa		plx				plx
.a6ae	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a6b0	f0 12		beq $a6c4			beq 	_ILBackspace
.a6b2	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a6b4	f0 15		beq $a6cb			beq 	_ILExit
.a6b6	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a6b8	90 ef		bcc $a6a9			bcc 	_ILLoop
.a6ba	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a6bc	f0 eb		beq $a6a9			beq 	_ILLoop
.a6be	9d 24 08	sta $0824,x			sta 	lineBuffer,x 				; save it
.a6c1	e8		inx				inx
.a6c2	80 e5		bra $a6a9			bra 	_ILLoop
.a6c4					_ILBackspace:
.a6c4	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a6c6	f0 e1		beq $a6a9			beq 	_ILLoop
.a6c8	ca		dex				dex 								; back one.
.a6c9	80 de		bra $a6a9			bra 	_ILLoop
.a6cb					_ILExit:
.a6cb	20 91 a6	jsr $a691			jsr 	EXTPrintCharacter
.a6ce	9e 24 08	stz $0824,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a6d1	60		rts				rts
.a6d2					EXTBreakCheck:
.a6d2	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a6d5					MemoryDeleteLine:
.a6d5	20 f4 a6	jsr $a6f4			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a6d8	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a6da	a8		tay				tay
.a6db					_MDDLLoop:
.a6db	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a6dd	92 30		sta ($30)			sta 	(codePtr)
.a6df	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a6e1	c5 3a		cmp $3a				cmp 	zTemp2
.a6e3	d0 07		bne $a6ec			bne 	_MDLDLNext
.a6e5	a5 31		lda $31				lda 	codePtr+1
.a6e7	c5 3b		cmp $3b				cmp 	zTemp2+1
.a6e9	d0 01		bne $a6ec			bne 	_MDLDLNext
.a6eb					_MDDLExit:
.a6eb	60		rts				rts
.a6ec					_MDLDLNext:
.a6ec	e6 30		inc $30				inc 	codePtr						; next byte
.a6ee	d0 eb		bne $a6db			bne 	_MDDLLoop
.a6f0	e6 31		inc $31				inc 	codePtr+1
.a6f2	80 e7		bra $a6db			bra 	_MDDLLoop
.a6f4					IMemoryFindEnd:
.a6f4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6f6	85 3a		sta $3a				sta 	0+zTemp2
.a6f8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6fa	85 3b		sta $3b				sta 	1+zTemp2
.a6fc					_MDLFELoop:
.a6fc	b2 3a		lda ($3a)			lda 	(zTemp2)
.a6fe	f0 0b		beq $a70b			beq 	_MDLFEExit
.a700	18		clc				clc
.a701	65 3a		adc $3a				adc 	zTemp2
.a703	85 3a		sta $3a				sta 	zTemp2
.a705	90 f5		bcc $a6fc			bcc 	_MDLFELoop
.a707	e6 3b		inc $3b				inc 	zTemp2+1
.a709	80 f1		bra $a6fc			bra 	_MDLFELoop
.a70b					_MDLFEExit:
.a70b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a70c					MemoryInsertLine:
.a70c	20 f4 a6	jsr $a6f4			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a70f					_MDLIFound:
.a70f	ad 24 07	lda $0724			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a712	a8		tay				tay
.a713					_MDLIInsert:
.a713	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a715	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a717	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a719	c5 3a		cmp $3a				cmp 	zTemp2
.a71b	d0 06		bne $a723			bne 	_MDLINext
.a71d	a5 31		lda $31				lda 	codePtr+1
.a71f	c5 3b		cmp $3b				cmp 	zTemp2+1
.a721	f0 0a		beq $a72d			beq 	_MDLIHaveSpace
.a723					_MDLINext:
.a723	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a725	d0 02		bne $a729			bne 	_MDLINoBorrow
.a727	c6 3b		dec $3b				dec 	zTemp2+1
.a729					_MDLINoBorrow:
.a729	c6 3a		dec $3a				dec 	zTemp2
.a72b	80 e6		bra $a713			bra 	_MDLIInsert
.a72d					_MDLIHaveSpace:
.a72d	ac 24 07	ldy $0724			ldy 	tokenOffset 				; bytes to copy
.a730	88		dey				dey 								; from offset-1 to 0
.a731					_MDLICopy:
.a731	b9 24 07	lda $0724,y			lda 	tokenOffset,y
.a734	91 30		sta ($30),y			sta 	(codePtr),y
.a736	88		dey				dey
.a737	10 f8		bpl $a731			bpl 	_MDLICopy
.a739	60		rts				rts
.a73a					MDLAppendLine:
.a73a	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a73c	85 36		sta $36				sta 	zTemp0
.a73e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a740	85 38		sta $38				sta 	0+zTemp1
.a742	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a744	85 39		sta $39				sta 	1+zTemp1
.a746	b2 38		lda ($38)			lda 	(zTemp1)
.a748	d0 0a		bne $a754			bne 	_MDLANoInitialise
.a74a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a74c	8d a7 08	sta $08a7			sta 	0+AppendPointer
.a74f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a751	8d a8 08	sta $08a8			sta 	1+AppendPointer
.a754					_MDLANoInitialise:
.a754	18		clc				clc
.a755	ad a7 08	lda $08a7			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a758	85 38		sta $38				sta 	zTemp1
.a75a	72 36		adc ($36)			adc 	(zTemp0)
.a75c	8d a7 08	sta $08a7			sta 	AppendPointer
.a75f	ad a8 08	lda $08a8			lda 	AppendPointer+1
.a762	85 39		sta $39				sta 	zTemp1+1
.a764	69 00		adc #$00			adc 	#0
.a766	8d a8 08	sta $08a8			sta 	AppendPointer+1
.a769	a0 00		ldy #$00			ldy 	#0
.a76b					_MDLACopy:
.a76b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a76d	91 38		sta ($38),y			sta 	(zTemp1),y
.a76f	c8		iny				iny
.a770	98		tya				tya
.a771	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a773	d0 f6		bne $a76b			bne 	_MDLACopy
.a775	a9 00		lda #$00			lda 	#0 							; end of program.
.a777	91 38		sta ($38),y			sta 	(zTemp1),y
.a779	60		rts				rts
.08a7					AppendPointer:
>08a7							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9da0					MemoryNew:
.9da0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9da2	85 30		sta $30				sta 	codePtr
.9da4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9da6	85 31		sta $31				sta 	codePtr+1
.9da8	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9daa	92 30		sta ($30)			sta 	(codePtr)
.9dac	60		rts				rts
.9dad					MemoryAppend:
.9dad	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9daf	85 30		sta $30				sta 	codePtr
.9db1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9db3	85 31		sta $31				sta 	codePtr+1
.9db5					_MAFindEnd:
.9db5	b2 30		lda ($30)			lda 	(codePtr)
.9db7	f0 0d		beq $9dc6			beq 	_MAFoundEnd
.9db9	18		clc				clc
.9dba	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9dbc	65 30		adc $30				adc 	codePtr
.9dbe	85 30		sta $30				sta 	codePtr
.9dc0	90 02		bcc $9dc4			bcc 	_CREExit
.9dc2	e6 31		inc $31				inc 	codePtr+1
.9dc4					_CREExit:
.9dc4	80 ef		bra $9db5			bra 	_MAFindEnd
.9dc6					_MAFoundEnd:
.9dc6	ac 24 07	ldy $0724			ldy 	tokenOffset 				; bytes to copy
.9dc9	c0 04		cpy #$04			cpy 	#4 							; blank line
.9dcb	f0 0e		beq $9ddb			beq 	_MANoLine
.9dcd	a9 00		lda #$00			lda 	#0 							; end of program
.9dcf	91 30		sta ($30),y			sta 	(codePtr),y
.9dd1					_MACopy:
.9dd1	88		dey				dey
.9dd2	b9 24 07	lda $0724,y			lda 	tokenOffset,y
.9dd5	91 30		sta ($30),y			sta 	(codePtr),y
.9dd7	c0 00		cpy #$00			cpy 	#0
.9dd9	d0 f6		bne $9dd1			bne 	_MACopy
.9ddb					_MANoLine:
.9ddb	60		rts				rts
.9ddc					MemoryInline:
.9ddc	98		tya				tya 								; put address into stack,x
.9ddd	18		clc				clc
.9dde	65 30		adc $30				adc 	codePtr
.9de0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9de3	a5 31		lda $31				lda 	codePtr+1
.9de5	69 00		adc #$00			adc 	#0
.9de7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9dea	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9ded	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9df0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9df1					MemorySearch:
.9df1	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9df3	86 37		stx $37				stx 	zTemp0+1
.9df5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9df7	85 30		sta $30				sta 	codePtr
.9df9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9dfb	85 31		sta $31				sta 	codePtr+1
.9dfd					_MTAXLoop:
.9dfd	b2 30		lda ($30)			lda 	(codePtr)
.9dff	18		clc				clc
.9e00	f0 21		beq $9e23			beq 	_MTAXExit 					; reached end, exit with CC.
.9e02	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9e04	b1 30		lda ($30),y			lda 	(codePtr),y
.9e06	38		sec				sec
.9e07	e5 36		sbc $36				sbc 	zTemp0
.9e09	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9e0b	c8		iny				iny 								; do the MSB
.9e0c	b1 30		lda ($30),y			lda 	(codePtr),y
.9e0e	e5 37		sbc $37				sbc 	zTemp0+1
.9e10	05 38		ora $38				ora 	zTemp1
.9e12	f0 0f		beq $9e23			beq 	_MTAXExit	 				; found
.9e14	b0 0d		bcs $9e23			bcs 	_MTAXExit 					; current < required exit
.9e16	18		clc				clc
.9e17	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9e19	65 30		adc $30				adc 	codePtr
.9e1b	85 30		sta $30				sta 	codePtr
.9e1d	90 02		bcc $9e21			bcc 	_CREExit
.9e1f	e6 31		inc $31				inc 	codePtr+1
.9e21					_CREExit:
.9e21	80 da		bra $9dfd			bra 	_MTAXLoop
.9e23					_MTAXExit:
.9e23	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
