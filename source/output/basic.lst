
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Nov 17 17:36:24 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 d2 a8	jsr $a8d2			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8014	20 53 88	jsr $8853			jsr 	NewProgram 					; erase current program
.8017	20 fe 82	jsr $82fe			jsr 	BackloadProgram
.801a	4c 5b 83	jmp $835b			jmp 	WarmStart
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 68			.text "Built Thursday 17-Nov-2022. Build 3125."
>8064	75 72 73 64 61 79 20 31 37 2d 4e 6f 76 2d 32 30
>8074	32 32 2e 20 42 75 69 6c 64 20 33 31 32 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8086					AssembleGroup1:
.8086	a9 ff		lda #$ff			lda 	#$FF
.8088	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.808b	80 02		bra $808f			bra 	AsmGroup12
.808d					AssembleGroup2:
.808d	a9 00		lda #$00			lda 	#$00
.808f					AsmGroup12:
.808f	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8092	68		pla				pla 								; pop the return address to access the information following.
.8093	fa		plx				plx
.8094	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get opcode and save as base
.8097	8d a4 04	sta $04a4			sta 	BaseOpcode
.809a	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809d	d0 08		bne $80a7			bne 	_AG12HaveMask
.809f	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80a1	20 25 81	jsr $8125			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a4	8d a5 04	sta $04a5			sta 	ModeMask
.80a7					_AG12HaveMask:
.80a7	20 60 82	jsr $8260			jsr 	TypeAndCalculateOperand 	; get zero page type
.80aa	da		phx				phx 								; save found address mode
.80ab	20 89 81	jsr $8189			jsr 	AssembleModeX
.80ae	fa		plx				plx  								; restore address mode
.80af	b0 0b		bcs $80bc			bcs 	_AG12Exit
.80b1	20 bd 80	jsr $80bd			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b4	20 89 81	jsr $8189			jsr 	AssembleModeX
.80b7	b0 03		bcs $80bc			bcs 	_AG12Exit
.80b9	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80bc					_AG12Exit:
.80bc	60		rts				rts
.80bd					PromoteToAbsolute:
.80bd	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80bf	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80c1	f0 19		beq $80dc			beq 	_PTADo
.80c3	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c5	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c7	f0 13		beq $80dc			beq 	_PTADo
.80c9	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80cb	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cd	f0 0d		beq $80dc			beq 	_PTADo
.80cf	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80d1	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d3	f0 07		beq $80dc			beq 	_PTADo
.80d5	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d7	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d9	f0 01		beq $80dc			beq 	_PTADo
.80db	60		rts				rts
.80dc					_PTADo:
.80dc	aa		tax				tax
.80dd	60		rts				rts
.80de					AssembleGroup3:
.80de	68		pla				pla 								; get parameters, which is just the opcode.
.80df	fa		plx				plx
.80e0	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get and output opcode
.80e3	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.80e6	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get a 16 bit operand
.80e9	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ec	38		sec				sec
.80ed	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80f0	48		pha				pha 								; LSB in A
.80f1	ad 10 04	lda $0410			lda 	NSMantissa1
.80f4	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f7	aa		tax				tax 								; MSB in X
.80f8	68		pla				pla
.80f9	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80fa	69 7f		adc #$7f			adc 	#$7F
.80fc	90 01		bcc $80ff			bcc 	_AG3NoCarry
.80fe	e8		inx				inx
.80ff					_AG3NoCarry:
.80ff	38		sec				sec 								; fix back and write out anyways.
.8100	e9 80		sbc #$80			sbc 	#$80
.8102	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.8105	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8107	f0 0a		beq $8113			beq 	_AG3Exit
.8109	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810c	29 01		and #$01			and 	#1
.810e	f0 03		beq $8113			beq 	_AG3Exit
.8110	4c a3 9f	jmp $9fa3			jmp 	RangeError 					; no, branch is out of range
.8113					_AG3Exit:
.8113	60		rts				rts
.8114					AssembleGroup4:
.8114	68		pla				pla 								; pop address
.8115	fa		plx				plx
.8116	20 1d 81	jsr $811d			jsr 	AccessParameters 			; access and get first
.8119	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 			; output it.
.811c	60		rts				rts
.811d					AccessParameters:
.811d	8d a1 04	sta $04a1			sta 	ParamStart
.8120	8e a2 04	stx $04a2			stx 	ParamStart+1
.8123	a9 01		lda #$01			lda 	#1
.8125					GetParameter:
.8125	5a		phy				phy
.8126	a8		tay				tay
.8127	ad a1 04	lda $04a1			lda 	ParamStart
.812a	85 36		sta $36				sta 	zTemp0
.812c	ad a2 04	lda $04a2			lda 	ParamStart+1
.812f	85 37		sta $37				sta 	zTemp0+1
.8131	b1 36		lda ($36),y			lda 	(zTemp0),y
.8133	7a		ply				ply
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8135					AssemblerWriteByte:
.8135	48		pha			pha
.8136	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8139	29 02		and #$02		and 	#2
.813b	f0 1b		beq $8158		beq 	_AWBNoPrint
.813d	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8140	20 73 81	jsr $8173		jsr 	PrintHex
.8143	ad 9e 04	lda $049e		lda		AssemblerAddress
.8146	20 73 81	jsr $8173		jsr 	PrintHex
.8149	a9 20		lda #$20		lda 	#' '
.814b	20 44 a7	jsr $a744		jsr 	EXTPrintCharacter
.814e	68		pla			pla 									; print byte
.814f	48		pha			pha
.8150	20 73 81	jsr $8173		jsr 	PrintHex
.8153	a9 0d		lda #$0d		lda 	#13
.8155	20 44 a7	jsr $a744		jsr 	EXTPrintCharacter
.8158					_AWBNoPrint:
.8158	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.815b	85 36		sta $36			sta 	zTemp0
.815d	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8160	f0 0e		beq $8170		beq 	_AWBRange
.8162	85 37		sta $37			sta 	zTemp0+1
.8164	68		pla			pla 									; write byte out
.8165	92 36		sta ($36)		sta 	(zTemp0)
.8167	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.816a	d0 03		bne $816f		bne 	_AWBNoCarry
.816c	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816f					_AWBNoCarry:
.816f	60		rts			rts
.8170					_AWBRange:
.8170	4c a3 9f	jmp $9fa3		jmp 	RangeError
.8173					PrintHex:
.8173	48		pha				pha
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	4a		lsr a				lsr 	a
.8177	4a		lsr a				lsr 	a
.8178	20 7c 81	jsr $817c			jsr 	_PrintNibble
.817b	68		pla				pla
.817c					_PrintNibble:
.817c	29 0f		and #$0f			and 	#15
.817e	c9 0a		cmp #$0a			cmp 	#10
.8180	90 02		bcc $8184			bcc 	_NoShift
.8182	69 06		adc #$06			adc 	#6
.8184					_NoShift:
.8184	69 30		adc #$30			adc 	#48
.8186	4c 44 a7	jmp $a744			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8189					AssembleModeX:
.8189	5a		phy				phy
.818a	ad a3 04	lda $04a3			lda 	IsGroup1
.818d	f0 17		beq $81a6			beq 	_AMXGroup2
.818f	8a		txa				txa 							; is it in group # 1
.8190	29 40		and #$40			and 	#AM_ISG1
.8192	f0 50		beq $81e4			beq 	_AMXFail 				; no, give up.
.8194	8a		txa				txa 							; get back.
.8195	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8197	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8199	d0 22		bne $81bd			bne 	_AMXHaveInfo
.819b	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819e	c9 81		cmp #$81			cmp 	#$81
.81a0	f0 42		beq $81e4			beq 	_AMXFail
.81a2	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a4	80 17		bra $81bd			bra 	_AMXHaveInfo 			; odd design decision there.
.81a6					_AMXGroup2:
.81a6	8a		txa				txa 							; is it in group 2 ?
.81a7	29 20		and #$20			and 	#AM_ISG2
.81a9	f0 39		beq $81e4			beq 	_AMXFail 				; no, give up.
.81ab	8a		txa				txa 							; get the offset into Y
.81ac	29 1f		and #$1f			and 	#$1F
.81ae	4a		lsr a				lsr 	a 						; make it 0-7.
.81af	4a		lsr a				lsr  	a
.81b0	a8		tay				tay
.81b1	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b4					_AMXCheckOkay:
.81b4	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b5	88		dey				dey
.81b6	10 fc		bpl $81b4			bpl 	_AMXCheckOkay
.81b8	90 2a		bcc $81e4			bcc 	_AMXFail 				; not allowed.
.81ba	8a		txa				txa  							; get mask back
.81bb	29 1f		and #$1f			and 	#$1F
.81bd					_AMXHaveInfo:
.81bd	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81bf	10 05		bpl $81c6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81c1	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c4	d0 1e		bne $81e4			bne 	_AMXFail
.81c6					_AMXAnySize:
.81c6	18		clc				clc 							; add offset to the base opcode
.81c7	6d a4 04	adc $04a4			adc 	BaseOpcode
.81ca					_AMXOutputCode:
.81ca	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cd	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81cf	f0 10		beq $81e1			beq 	_AMXExit
.81d1	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d4	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81d7	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d9	30 06		bmi $81e1			bmi 	_AMXExit
.81db	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81de	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81e1					_AMXExit:
.81e1	7a		ply				ply
.81e2	38		sec				sec
.81e3	60		rts				rts
.81e4					_AMXFail:
.81e4	a0 00		ldy #$00			ldy 	#0
.81e6					_AMXCheckOddities:
.81e6	8a		txa				txa
.81e7	d9 0f 82	cmp $820f,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81ea	d0 16		bne $8202			bne 	_AMXCONext
.81ec	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ef	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f2	d0 0e		bne $8202			bne 	_AMXCONext
.81f4	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f6	10 05		bpl $81fd			bpl 	_AMXCONotZero
.81f8	ad 10 04	lda $0410			lda 	NSMantissa1
.81fb	d0 05		bne $8202			bne 	_AMXCONext
.81fd					_AMXCONotZero:
.81fd	b9 0e 82	lda $820e,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8200	80 c8		bra $81ca			bra 	_AMXOutputCode 			; and assemble it
.8202					_AMXCONext:
.8202	c8		iny				iny
.8203	c8		iny				iny
.8204	c8		iny				iny
.8205	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; end of table
.8208	d0 dc		bne $81e6			bne 	_AMXCheckOddities
.820a					_AMXCOFail:
.820a	7a		ply				ply
.820b	18		clc				clc
.820c	60		rts				rts
.820d					ExtraOpcode:
>820d	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8210	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8213	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8216	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8219	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821c	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821f	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8222	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8225	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8228	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>822b	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822c					LabelHere:
.822c	c8		iny				iny 								; skip .
.822d	a2 00		ldx #$00			ldx 	#0 							; get a term
.822f	20 da 97	jsr $97da			jsr 	EvaluateTerm 				; get a term
.8232	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8235	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8237	d0 24		bne $825d			bne 	_ALType
.8239	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823c	85 36		sta $36				sta 	zTemp0
.823e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8241	85 37		sta $37				sta 	zTemp0+1
.8243	5a		phy				phy 								; copy address in.
.8244	a0 01		ldy #$01			ldy 	#1
.8246	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8249	92 36		sta ($36)			sta 	(zTemp0)
.824b	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824e	91 36		sta ($36),y			sta 	(zTemp0),y
.8250	c8		iny				iny
.8251	a9 00		lda #$00			lda 	#0
.8253	91 36		sta ($36),y			sta 	(zTemp0),y
.8255	c8		iny				iny
.8256	91 36		sta ($36),y			sta 	(zTemp0),y
.8258	c8		iny				iny
.8259	91 36		sta ($36),y			sta 	(zTemp0),y
.825b	7a		ply				ply
.825c	60		rts				rts
.825d					_ALType:
.825d	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8260					TypeAndCalculateOperand:
.8260	b1 30		lda ($30),y			lda 	(codePtr),y
.8262	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8264	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8266	f0 5b		beq $82c3			beq 	_TACOExit
.8268	c9 80		cmp #$80			cmp 	#KWC_EOL
.826a	f0 57		beq $82c3			beq 	_TACOExit
.826c	c8		iny				iny
.826d	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826f	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8271	f0 51		beq $82c4			beq 	CalculateOperand
.8273	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8275	f0 1f		beq $8296			beq 	_TACOIndirect
.8277	88		dey				dey 								; undo get of first character
.8278	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get operand
.827b	b1 30		lda ($30),y			lda 	(codePtr),y
.827d	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8281	d0 40		bne $82c3			bne 	_TACOExit
.8283	c8		iny				iny
.8284	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8287	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8289	c9 58		cmp #$58			cmp 	#'X'
.828b	f0 36		beq $82c3			beq 	_TACOExit
.828d	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828f	c9 59		cmp #$59			cmp 	#'Y'
.8291	f0 30		beq $82c3			beq 	_TACOExit
.8293					_TACOSyntax:
.8293	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.8296					_TACOIndirect:
.8296	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get the operand
.8299	b1 30		lda ($30),y			lda 	(codePtr),y
.829b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829d	f0 17		beq $82b6			beq 	_TACOIndX
.829f	20 38 8d	jsr $8d38			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a2	b1 30		lda ($30),y			lda 	(codePtr),y
.82a4	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a8	d0 19		bne $82c3			bne 	_TACOExit
.82aa	c8		iny				iny
.82ab	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ae	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82b0	d0 e1		bne $8293			bne 	_TACOSyntax
.82b2	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b4	80 0d		bra $82c3			bra 	_TACOExit
.82b6					_TACOIndX:
.82b6	c8		iny				iny
.82b7	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ba	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82bc	d0 d5		bne $8293			bne 	_TACOSyntax
.82be	20 38 8d	jsr $8d38			jsr 	CheckRightBracket			; check )
.82c1	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c3					_TACOExit:
.82c3	60		rts				rts
.82c4					CalculateOperand:
.82c4	48		pha				pha
.82c5	da		phx				phx
.82c6	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c8	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.82cb	fa		plx				plx
.82cc	68		pla				pla
.82cd	60		rts				rts
.82ce					TACOCheckXY:
.82ce	b1 30		lda ($30),y			lda 	(codePtr),y
.82d0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d2	c9 40		cmp #$40			cmp 	#$40
.82d4	d0 21		bne $82f7			bne 	_TCXYFail
.82d6	b1 30		lda ($30),y			lda 	(codePtr),y
.82d8	18		clc				clc
.82d9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82db	85 37		sta $37				sta 	zTemp0+1
.82dd	c8		iny				iny
.82de	b1 30		lda ($30),y			lda 	(codePtr),y
.82e0	c8		iny				iny
.82e1	85 36		sta $36				sta 	zTemp0
.82e3	5a		phy				phy 								; save position
.82e4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e8	d0 0c		bne $82f6			bne 	_TCXYPopFail
.82ea	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ee	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82f0	f0 08		beq $82fa			beq 	_TCXYFound
.82f2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f4	f0 04		beq $82fa			beq 	_TCXYFound
.82f6					_TCXYPopFail:
.82f6	7a		ply				ply
.82f7					_TCXYFail:
.82f7	a9 00		lda #$00			lda 	#0
.82f9	60		rts				rts
.82fa					_TCXYFound:
.82fa	7a		ply				ply 								; restore position
.82fb	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fe					BackloadProgram:
.82fe	a2 ff		ldx #$ff			ldx 	#$FF
.8300	20 28 83	jsr $8328			jsr 	BLReadByte
.8303	30 1f		bmi $8324			bmi 	_BPExit
.8305					_BPCopy:
.8305	e8		inx				inx  								; copy byte in
.8306	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.8309	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.830c	20 28 83	jsr $8328			jsr 	BLReadByte 					; read next byte
.830f	30 0a		bmi $831b			bmi 	_BPEndLine 					; -ve = EOL
.8311	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8313	d0 02		bne $8317			bne 	_BPNotTab
.8315	a9 20		lda #$20			lda 	#' '
.8317					_BPNotTab:
.8317	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8319	b0 ea		bcs $8305			bcs 	_BPCopy
.831b					_BPEndLine:
.831b	20 4f b5	jsr $b54f			jsr 	TokeniseLine 				; tokenise the line.
.831e	38		sec				sec 								; append not insert
.831f	20 7b a1	jsr $a17b			jsr 	MemoryInsertLine 			; append to current program
.8322	80 da		bra $82fe			bra 	BackloadProgram
.8324					_BPExit:
.8324	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear variables etc.
.8327	60		rts				rts
.8328					BLReadByte:
.8328					_BLLoad:
.8328	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.832b	ee 29 83	inc $8329			inc 	_BLLoad+1
.832e	d0 03		bne $8333			bne 	_BLNoCarry
.8330	ee 2a 83	inc $832a			inc 	_BLLoad+2
.8333					_BLNoCarry:
.8333	c9 00		cmp #$00			cmp 	#0
.8335	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8336					EditProgramCode:
.8336	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.8339	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.833c	20 23 a2	jsr $a223			jsr 	MemorySearch
.833f	90 05		bcc $8346			bcc 	_EPCNoDelete 				; reached the end don't delete
.8341	d0 03		bne $8346			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8343	20 44 a1	jsr $a144			jsr 	MemoryDeleteLine 			; delete the line
.8346					_EPCNoDelete:
.8346	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.8349	c9 80		cmp #$80			cmp 	#KWC_EOL
.834b	f0 0d		beq $835a			beq 	_EPCNoInsert
.834d	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8350	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8353	20 23 a2	jsr $a223			jsr 	MemorySearch
.8356	18		clc				clc 								; insert at this point.
.8357	20 7b a1	jsr $a17b			jsr 	MemoryInsertLine 			; insert the line
.835a					_EPCNoInsert:
.835a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835b					WarmStart:
.835b	a2 ff		ldx #$ff			ldx 	#$FF
.835d	9a		txs				txs
.835e	20 4a a9	jsr $a94a			jsr 	EXTInputLine 				; get line to lineBuffer
.8361	20 4f b5	jsr $b54f			jsr 	TokeniseLine 				; tokenise the line
.8364	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.8367	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.836a	d0 17		bne $8383			bne 	_WSEditCode 				; if so,edit code.
.836c	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.836f	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.8371	85 30		sta $30				sta 	codePtr
.8373	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8375	85 31		sta $31				sta 	codePtr+1
.8377	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.837a	c9 80		cmp #$80			cmp 	#KWC_EOL
.837c	f0 dd		beq $835b			beq 	WarmStart
.837e	20 04 8a	jsr $8a04			jsr 	RUNCodePointerLine 			; execute that line.
.8381	80 d8		bra $835b			bra 	WarmStart
.8383					_WSEditCode:
.8383	20 36 83	jsr $8336			jsr 	EditProgramCode
.8386	20 f4 83	jsr $83f4			jsr 	ClearCommand
.8389	80 d0		bra $835b			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838b					AssembleCommand:
.838b	a2 00		ldx #$00			ldx 	#0
.838d	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; start address
.8390	ad 08 04	lda $0408			lda 	NSMantissa0
.8393	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8396	ad 10 04	lda $0410			lda 	NSMantissa1
.8399	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.839c	20 40 8d	jsr $8d40			jsr 	CheckComma
.839f	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; options
.83a2	ad 08 04	lda $0408			lda 	NSMantissa0
.83a5	8d a0 04	sta $04a0			sta 	AssemblerControl
.83a8	60		rts				rts
.83a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83aa					AssertCommand:
.83aa	a2 00		ldx #$00			ldx 	#0
.83ac	20 60 9d	jsr $9d60			jsr 	EvaluateInteger 			; the assert test
.83af	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; exit if result is non zero.
.83b2	d0 05		bne $83b9			bne 	_ACExit
.83b4	a9 0a		lda #$0a		lda	#10
.83b6	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.83b9					_ACExit:
.83b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83ba					CallCommand:
.83ba	a2 00		ldx #$00			ldx 	#0
.83bc	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.83bf					_CCClear
.83bf	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c0	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.83c3	e0 04		cpx #$04			cpx 	#4
.83c5	d0 f8		bne $83bf			bne 	_CCClear
.83c7	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83c9					_CCCParam:
.83c9	b1 30		lda ($30),y			lda 	(codePtr),y
.83cb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83cd	d0 09		bne $83d8			bne 	_CCCRun6502
.83cf	c8		iny				iny 								; skip comma
.83d0	e8		inx				inx	 								; next level
.83d1	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d4	e0 03		cpx #$03			cpx 	#3
.83d6	90 f1		bcc $83c9			bcc 	_CCCParam 					; done all 3 ?
.83d8					_CCCRun6502:
.83d8	5a		phy				phy 								; save position
.83d9	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83dc	85 37		sta $37				sta 	zTemp0+1
.83de	ad 08 04	lda $0408			lda 	NSMantissa0
.83e1	85 36		sta $36				sta 	zTemp0
.83e3	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83e6	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83e9	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83ec	20 f1 83	jsr $83f1			jsr 	_CCCZTemp0 					; call zTemp0
.83ef	7a		ply				ply 								; restore position and exit
.83f0	60		rts				rts
.83f1					_CCCZTemp0:
.83f1	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f4					ClearCommand:
.83f4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83f6	85 36		sta $36				sta 	0+zTemp0
.83f8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83fa	85 37		sta $37				sta 	1+zTemp0
.83fc					_ClearZeroLoop:
.83fc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83fe	f0 24		beq $8424			beq 	_ClearZeroEnd
.8400	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8402	a9 00		lda #$00			lda 	#0
.8404					_ClearOneVariable:
.8404	91 36		sta ($36),y			sta 	(zTemp0),y
.8406	c8		iny				iny
.8407	c0 08		cpy #$08			cpy 	#8
.8409	d0 f9		bne $8404			bne 	_ClearOneVariable
.840b	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.840d	b1 36		lda ($36),y			lda 	(zTemp0),y
.840f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8411	d0 04		bne $8417			bne 	_ClearNotProcedure
.8413	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8415	91 36		sta ($36),y			sta 	(zTemp0),y
.8417					_ClearNotProcedure:
.8417	18		clc				clc 								; go to the next variable
.8418	b2 36		lda ($36)			lda 	(zTemp0)
.841a	65 36		adc $36				adc 	zTemp0
.841c	85 36		sta $36				sta 	zTemp0
.841e	90 dc		bcc $83fc			bcc 	_ClearZeroLoop
.8420	e6 37		inc $37				inc 	zTemp0+1
.8422	80 d8		bra $83fc			bra 	_ClearZeroLoop
.8424					_ClearZeroEnd:
.8424	18		clc				clc
.8425	a5 36		lda $36				lda 	zTemp0
.8427	69 01		adc #$01			adc 	#1
.8429	8d 8c 04	sta $048c			sta 	lowMemPtr
.842c	a5 37		lda $37				lda 	zTemp0+1
.842e	69 00		adc #$00			adc 	#0
.8430	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8433	20 dd a2	jsr $a2dd			jsr 	StackReset
.8436	20 47 a3	jsr $a347			jsr 	StringSystemInitialise
.8439	20 41 8c	jsr $8c41			jsr 	ProcedureScan
.843c	20 c0 89	jsr $89c0			jsr 	Command_Restore
.843f	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8442	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8445	9c a0 04	stz $04a0			stz 	AssemblerControl
.8448	20 dd 99	jsr $99dd			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.844c					ClearScreen:
.844c	5a		phy				phy
.844d	a9 0c		lda #$0c			lda 	#12
.844f	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.8452	7a		ply				ply
.8453	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8454					Command_Data:
.8454	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8456	a2 80		ldx #$80			ldx 	#KWC_EOL
.8458	20 93 8c	jsr $8c93			jsr 	ScanForward
.845b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.845c					DimCommand:
.845c	b1 30		lda ($30),y			lda 	(codePtr),y
.845e	29 c0		and #$c0			and 	#$C0
.8460	c9 40		cmp #$40			cmp 	#$40
.8462	d0 7a		bne $84de			bne 	_DCSyntax
.8464	b1 30		lda ($30),y			lda 	(codePtr),y
.8466	18		clc				clc
.8467	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8469	85 3f		sta $3f				sta 	zaTemp+1
.846b	c8		iny				iny
.846c	b1 30		lda ($30),y			lda 	(codePtr),y
.846e	c8		iny				iny
.846f	85 3e		sta $3e				sta 	zaTemp
.8471	5a		phy				phy
.8472	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8474	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8476	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8478	c9 18		cmp #$18			cmp 	#NSTProcedure
.847a	f0 62		beq $84de			beq 	_DCSyntax
.847c	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.847e	29 04		and #$04			and 	#NSBIsArray
.8480	f0 64		beq $84e6			beq 	_DCType
.8482	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8484	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8486	d0 59		bne $84e1			bne 	_DCRedefine
.8488	7a		ply				ply
.8489	20 e9 84	jsr $84e9			jsr 	_DCGetSize 				; get array size, check it.
.848c	5a		phy				phy
.848d	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.848f	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8491	7a		ply				ply 							; is there a second (e.g. ,x)
.8492	b1 30		lda ($30),y			lda 	(codePtr),y
.8494	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8496	d0 0a		bne $84a2			bne 	_DCOneDimension
.8498	c8		iny				iny 							; skip comma
.8499	20 e9 84	jsr $84e9			jsr 	_DCGetSize 				; get 2nd array size
.849c	5a		phy				phy
.849d	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.849f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a1	7a		ply				ply
.84a2					_DCOneDimension:
.84a2	5a		phy				phy 							; save position
.84a3	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a7	aa		tax				tax
.84a8	c8		iny				iny
.84a9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ab	e8		inx				inx 							; bump them.
.84ac	1a		inc a				inc 	a
.84ad	20 a9 9d	jsr $9da9			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b0	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b2	29 e0		and #$e0			and 	#$E0
.84b4	d0 23		bne $84d9			bne 	_DCSize
.84b6	a0 02		ldy #$02			ldy 	#2 						; get base type
.84b8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ba	20 f7 84	jsr $84f7			jsr 	ScaleByBaseType 		; scale by base type
.84bd	a5 36		lda $36				lda 	zTemp0
.84bf	a6 37		ldx $37				ldx 	zTemp0+1
.84c1	20 9f 99	jsr $999f			jsr 	AllocateXABytes 		; allocate memory
.84c4	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c6	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c8	c8		iny				iny
.84c9	8a		txa				txa
.84ca	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cc	7a		ply				ply 							; get position back
.84cd	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 		; check )
.84d0	b1 30		lda ($30),y			lda 	(codePtr),y
.84d2	c8		iny				iny 							; consume in case
.84d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d5	f0 85		beq $845c			beq 	DimCommand
.84d7	88		dey				dey 							; undo consume
.84d8	60		rts				rts
.84d9					_DCSize:
.84d9	a9 16		lda #$16		lda	#22
.84db	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.84de					_DCSyntax:
.84de	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.84e1					_DCRedefine:
.84e1	a9 15		lda #$15		lda	#21
.84e3	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.84e6					_DCType:
.84e6	4c a8 9f	jmp $9fa8			jmp 	TypeError
.84e9					_DCGetSize:
.84e9	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84eb	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 	; get array dimension
.84ee	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f0	f0 e7		beq $84d9			beq 	_DCSize
.84f2	c9 fe		cmp #$fe			cmp 	#254
.84f4	f0 e3		beq $84d9			beq 	_DCSize
.84f6	60		rts				rts
.84f7					ScaleByBaseType:
.84f7	29 10		and #$10			and 	#NSBIsString 			; is it string
.84f9	d0 19		bne $8514			bne 	_SBBTString
.84fb	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84fd	48		pha				pha
.84fe	a5 36		lda $36				lda 	zTemp0
.8500	48		pha				pha
.8501	06 36		asl $36				asl 	zTemp0 					; x 2
.8503	26 37		rol $37				rol 	zTemp0+1
.8505	06 36		asl $36				asl 	zTemp0 					; x 4
.8507	26 37		rol $37				rol 	zTemp0+1
.8509	68		pla				pla 							; add stacked value = x 5
.850a	65 36		adc $36				adc 	zTemp0
.850c	85 36		sta $36				sta 	zTemp0
.850e	68		pla				pla
.850f	65 37		adc $37				adc 	zTemp0+1
.8511	85 37		sta $37				sta 	zTemp0+1
.8513	60		rts				rts
.8514					_SBBTString:
.8514	06 36		asl $36				asl 	zTemp0
.8516	26 37		rol $37				rol 	zTemp0+1
.8518	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8519					EndCommand:
.8519	4c 5b 83	jmp $835b			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.851c					ForCommand:
.851c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.851e	20 78 a2	jsr $a278			jsr 	StackOpen
.8521	a2 00		ldx #$00			ldx 	#0
.8523	20 da 97	jsr $97da			jsr 	EvaluateTerm
.8526	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8529	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.852b	d0 49		bne $8576			bne		_FCError
.852d	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.852f	20 48 8d	jsr $8d48			jsr 	CheckNextA
.8532	e8		inx				inx
.8533	20 60 9d	jsr $9d60			jsr 	EvaluateInteger 			; <from> in +1
.8536	b1 30		lda ($30),y			lda 	(codePtr),y
.8538	c8		iny				iny 								; consume it
.8539	48		pha				pha 								; save on stack for later
.853a	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.853c	f0 04		beq $8542			beq 	_FCNoSyntax
.853e	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8540	d0 37		bne $8579			bne 	_FCSyntaxError
.8542					_FCNoSyntax:
.8542	e8		inx				inx
.8543	20 60 9d	jsr $9d60			jsr 	EvaluateInteger
.8546	20 bc a2	jsr $a2bc			jsr 	STKSaveCodePosition 		; save loop back position
.8549	68		pla				pla 								; restore DOWNTO or TO
.854a	5a		phy				phy 								; save Y on the stack
.854b	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.854d	f0 02		beq $8551			beq 	_FCNotDownTo
.854f	a9 02		lda #$02			lda 	#2
.8551					_FCNotDownTo:
.8551	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8552	a0 10		ldy #$10			ldy 	#16
.8554	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8556	a0 06		ldy #$06			ldy 	#6
.8558	ad 08 04	lda $0408			lda 	NSMantissa0
.855b	91 34		sta ($34),y			sta 	(basicStack),y
.855d	ad 10 04	lda $0410			lda 	NSMantissa1
.8560	c8		iny				iny
.8561	91 34		sta ($34),y			sta 	(basicStack),y
.8563	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8565	a2 01		ldx #$01			ldx 	#1
.8567	20 7c 85	jsr $857c			jsr 	FCIntegerToStack
.856a	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.856c	a2 02		ldx #$02			ldx 	#2
.856e	20 7c 85	jsr $857c			jsr 	FCIntegerToStack
.8571	20 9c 85	jsr $859c			jsr 	CopyIndexToReference
.8574	7a		ply				ply 								; restore position
.8575	60		rts				rts
.8576					_FCError:
.8576	4c a8 9f	jmp $9fa8			jmp 	TypeError
.8579					_FCSyntaxError:
.8579	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.857c					FCIntegerToStack:
.857c	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.857f	10 03		bpl $8584			bpl	 	_FCNotNegative
.8581	20 c9 9d	jsr $9dc9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8584					_FCNotNegative:
.8584	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8587	91 34		sta ($34),y			sta 	(basicStack),y
.8589	c8		iny				iny
.858a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.858d	91 34		sta ($34),y			sta 	(basicStack),y
.858f	c8		iny				iny
.8590	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8593	91 34		sta ($34),y			sta 	(basicStack),y
.8595	c8		iny				iny
.8596	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8599	91 34		sta ($34),y			sta 	(basicStack),y
.859b	60		rts				rts
.859c					CopyIndexToReference:
.859c	5a		phy				phy
.859d	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.859f	38		sec				sec 								; (because we copy from offset 8)
.85a0	b1 34		lda ($34),y			lda 	(basicStack),y
.85a2	e9 08		sbc #$08			sbc 	#8
.85a4	85 36		sta $36				sta 	zTemp0
.85a6	c8		iny				iny
.85a7	b1 34		lda ($34),y			lda 	(basicStack),y
.85a9	e9 00		sbc #$00			sbc 	#0
.85ab	85 37		sta $37				sta 	zTemp0+1
.85ad	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85af	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85b1	b1 34		lda ($34),y			lda 	(basicStack),y
.85b3	0a		asl a				asl 	a 							; into carry
.85b4	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85b6	90 14		bcc $85cc			bcc 	_CITRNormal
.85b8	38		sec				sec
.85b9					_CITRNegative:
.85b9	a9 00		lda #$00			lda 	#0
.85bb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85bd	91 36		sta ($36),y			sta 	(zTemp0),y
.85bf	c8		iny				iny
.85c0	ca		dex				dex
.85c1	d0 f6		bne $85b9			bne 	_CITRNegative
.85c3	88		dey				dey 								; look at MSB of mantissa
.85c4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85c6	09 80		ora #$80			ora 	#$80
.85c8	91 36		sta ($36),y			sta 	(zTemp0),y
.85ca	7a		ply				ply
.85cb	60		rts				rts
.85cc					_CITRNormal:
.85cc	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85ce	91 36		sta ($36),y			sta 	(zTemp0),y
.85d0	c8		iny				iny
.85d1	ca		dex				dex
.85d2	d0 f8		bne $85cc			bne 	_CITRNormal
.85d4	7a		ply				ply 								; and exit.
.85d5	60		rts				rts
.85d6					NextCommand:
.85d6	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85d8	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85da	20 a4 a2	jsr $a2a4			jsr 	StackCheckFrame
.85dd	5a		phy				phy
.85de	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85e0	b1 34		lda ($34),y			lda 	(basicStack),y
.85e2	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e4	30 02		bmi $85e8			bmi 	_NCStepNeg
.85e6	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85e8					_NCStepNeg:
.85e8	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85ea	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85ec	18		clc				clc
.85ed					_NCBump:
.85ed	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85ef	91 34		sta ($34),y			sta 	(basicStack),y
.85f1	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f3	c8		iny				iny 								; next byte
.85f4	ca		dex				dex 								; do four times
.85f5	d0 f6		bne $85ed			bne 	_NCBump
.85f7	20 9c 85	jsr $859c			jsr		CopyIndexToReference		; copy it to the reference variable.
.85fa	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85fc	b1 34		lda ($34),y			lda 	(basicStack),y
.85fe	0a		asl a				asl 	a 							; sign bit to carry
.85ff	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8601	85 38		sta $38				sta 	zTemp1
.8603	90 02		bcc $8607			bcc 	_NCCompRev 					; use if step is +ve
.8605	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8607					_NCCompRev:
.8607	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8609	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.860b	85 39		sta $39				sta 	zTemp1+1
.860d	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.860f	38		sec				sec
.8610					_NCCompare:
.8610	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8612	b1 34		lda ($34),y			lda 	(basicStack),y
.8614	a4 39		ldy $39				ldy 	zTemp1+1
.8616	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8618	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.861a	e6 39		inc $39				inc 	zTemp1+1
.861c	ca		dex				dex 								; do it 4 times.
.861d	d0 f1		bne $8610			bne 	_NCCompare
.861f	50 02		bvc $8623			bvc 	_NCNoOverflow 				; convert to signed comparison
.8621	49 80		eor #$80			eor 	#$80
.8623					_NCNoOverflow:
.8623	7a		ply				ply 								; restore Y position
.8624	0a		asl a				asl 	a 							; is bit 7 set.
.8625	90 04		bcc $862b			bcc 	_NCLoopback 				; if no , >= so loop back
.8627	20 96 a2	jsr $a296			jsr 	StackClose 					; exit the loop
.862a	60		rts				rts
.862b					_NCLoopBack:
.862b	20 cd a2	jsr $a2cd			jsr 	STKLoadCodePosition 		; loop back
.862e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.862f					Command_GOSUB:
.862f	a2 00		ldx #$00			ldx 	#0
.8631	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8634	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8636	20 78 a2	jsr $a278			jsr 	StackOpen 					; create frame
.8639	20 bc a2	jsr $a2bc			jsr 	STKSaveCodePosition 		; save current position
.863c	4c 52 86	jmp $8652			jmp 	GotoStackX
.863f					Command_RETURN:
.863f	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8641	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8643	20 a4 a2	jsr $a2a4			jsr 	StackCheckFrame
.8646	20 cd a2	jsr $a2cd			jsr 	STKLoadCodePosition 		; restore code position
.8649	20 96 a2	jsr $a296			jsr 	StackClose
.864c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.864d					GotoCommand:
.864d	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.864f	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.8652					GotoStackX:
.8652	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8655	48		pha				pha 								; it is slightly inefficient, just in cases.
.8656	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8659	fa		plx				plx
.865a	20 23 a2	jsr $a223			jsr 	MemorySearch 				; transfer to line number AX.
.865d	90 05		bcc $8664			bcc 	_GotoError 					; not found, off end.
.865f	d0 03		bne $8664			bne 	_GotoError 					; not found exactly
.8661	4c fd 89	jmp $89fd			jmp 	RunNewLine 					; and go straight to new line code.
.8664					_GotoError:
.8664	a9 0d		lda #$0d		lda	#13
.8666	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8669					IfCommand:
.8669	a2 00		ldx #$00			ldx 	#0 							; If what.
.866b	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber
.866e	b1 30		lda ($30),y			lda 	(codePtr),y
.8670	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8672	d0 0a		bne $867e			bne 	_IFStructured
.8674	c8		iny				iny 								; consume THEN
.8675	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; is it zero
.8678	f0 01		beq $867b			beq 	_IfFail 					; if fail, go to next line
.867a	60		rts				rts 								; if THEN just continue
.867b					_IfFail:
.867b	4c 62 8a	jmp $8a62			jmp 	EOLCommand
.867e					_IfStructured:
.867e	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; is it zero
.8681	d0 07		bne $868a			bne 	_IfExit 					; if not, then continue normally.
.8683	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.8685	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.8687	20 93 8c	jsr $8c93			jsr 	ScanForward 				; and run from there/
.868a					_IfExit:
.868a	60		rts				rts
.868b					ElseCode:
.868b	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.868d	aa		tax				tax 								; so just go to the structure exit
.868e	20 93 8c	jsr $8c93			jsr 	ScanForward
.8691	60		rts				rts
.8692					EndIf:
.8692	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8693					LetCommand:
.8693	a2 00		ldx #$00			ldx 	#0
.8695	b1 30		lda ($30),y			lda 	(codePtr),y
.8697	c9 10		cmp #$10			cmp 	#KWD_AT
.8699	d0 16		bne $86b1			bne 	_LCStandard
.869b	c8		iny				iny 								; skip equal
.869c	20 da 97	jsr $97da			jsr 	EvaluateTerm 				; get a number
.869f	20 1e 96	jsr $961e			jsr 	Dereference 				; dereference it
.86a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86a5	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86a7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86aa	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86ac	d0 10		bne $86be			bne 	_LCMain
.86ae	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; was a reference before.
.86b1					_LCStandard:
.86b1	ad e8 92	lda $92e8			lda 	PrecedenceLevel+"*"			; precedence > this
.86b4	20 02 93	jsr $9302			jsr 	EvaluateExpressionAtPrecedence
.86b7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86ba	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86bc	f0 0e		beq $86cc			beq 	_LetGoProc 					; it's a procedure call.
.86be					_LCMain:
.86be	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86c0	20 48 8d	jsr $8d48			jsr 	CheckNextA
.86c3	e8		inx				inx 								; RHS
.86c4	20 34 9d	jsr $9d34			jsr 	EvaluateValue
.86c7	ca		dex				dex
.86c8	20 cf 86	jsr $86cf			jsr 	AssignVariable
.86cb	60		rts				rts
.86cc					_LetGoProc:
.86cc	4c ca 88	jmp $88ca			jmp 	CallProcedure
.86cf					AssignVariable:
.86cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d2	48		pha				pha 								; save a copy
.86d3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86d6	29 10		and #$10			and 	#NSBIsString
.86d8	d0 0b		bne $86e5			bne 	_ASError
.86da	68		pla				pla 								; get back
.86db	29 10		and #$10			and 	#NSBIsString 				; check type
.86dd	d0 03		bne $86e2			bne 	_ASString
.86df	4c 46 95	jmp $9546			jmp 	AssignNumber
.86e2					_ASString:
.86e2	4c b4 95	jmp $95b4			jmp 	AssignString
.86e5					_ASError:
.86e5	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86e8					Command_List:
.86e8	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86eb	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86ee	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86f1	a9 ff		lda #$ff			lda 	#$FF
.86f3	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86f6	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86f9	b1 30		lda ($30),y			lda 	(codePtr),y
.86fb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86fd	f0 1e		beq $871d			beq 	_CLSecond
.86ff	20 7b 87	jsr $877b			jsr 	CLIsDigit 					; if not digit, list all
.8702	b0 24		bcs $8728			bcs 	_CLStart
.8704	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8706	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.8709	b1 30		lda ($30),y			lda 	(codePtr),y
.870b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.870d	f0 0e		beq $871d			beq 	_CLSecond 					; if so go get it
.870f	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8712	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8715	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8718	8d 17 04	sta $0417			sta 	NSMantissa1+7
.871b	80 0b		bra $8728			bra 	_CLStart
.871d					_CLSecond:
.871d	c8		iny				iny 								; consume comma
.871e	20 7b 87	jsr $877b			jsr 	CLIsDigit 					; digit found
.8721	b0 05		bcs $8728			bcs 	_CLStart 					; if not, continue listing
.8723	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8725	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.8728					_CLStart
.8728	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.872a	85 30		sta $30				sta 	codePtr
.872c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.872e	85 31		sta $31				sta 	codePtr+1
.8730					_CLLoop:
.8730	20 00 a9	jsr $a900			jsr 	EXTBreakCheck 				; break check
.8733	f0 30		beq $8765			beq 	_CLExit
.8735	b2 30		lda ($30)			lda 	(codePtr)
.8737	f0 2c		beq $8765			beq 	_CLExit
.8739	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.873b	20 68 87	jsr $8768			jsr 	CLCompareLineNo
.873e	90 18		bcc $8758			bcc 	_CLNext
.8740	a2 07		ldx #$07			ldx 	#7
.8742	20 68 87	jsr $8768			jsr 	CLCompareLineNo
.8745	f0 02		beq $8749			beq 	_CLDoThisOne
.8747	b0 0f		bcs $8758			bcs 	_CLNext
.8749					_CLDoThisOne:
.8749	20 30 b3	jsr $b330			jsr 	ListConvertLine 			; convert line into token Buffer
.874c	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.874e	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.8750	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8753	a9 0d		lda #$0d			lda 	#13 						; new line
.8755	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.8758					_CLNext:
.8758	18		clc				clc
.8759	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.875b	65 30		adc $30				adc 	codePtr
.875d	85 30		sta $30				sta 	codePtr
.875f	90 02		bcc $8763			bcc 	_CREExit
.8761	e6 31		inc $31				inc 	codePtr+1
.8763					_CREExit:
.8763	80 cb		bra $8730			bra 	_CLLoop
.8765					_CLExit:
.8765	4c 5b 83	jmp $835b			jmp 	WarmStart
.8768					CLCompareLineNo:
.8768	38		sec				sec
.8769	a0 01		ldy #$01			ldy 	#1
.876b	b1 30		lda ($30),y			lda 	(codePtr),y
.876d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8770	85 36		sta $36				sta 	zTemp0
.8772	c8		iny				iny
.8773	b1 30		lda ($30),y			lda 	(codePtr),y
.8775	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8778	05 36		ora $36				ora 	zTemp0
.877a	60		rts				rts
.877b					CLIsDigit:
.877b	b1 30		lda ($30),y			lda 	(codePtr),y
.877d	c9 30		cmp #$30			cmp 	#"0"
.877f	90 03		bcc $8784			bcc	 	_CLIDExitFalse
.8781	c9 3a		cmp #$3a			cmp 	#"9"+1
.8783	60		rts				rts
.8784					_CLIDExitFalse:
.8784	38		sec				sec
.8785	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8786					Command_LOCAL:
.8786	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8788	20 94 87	jsr $8794			jsr 	LocaliseNextTerm 			; convert term to a local.
.878b	b1 30		lda ($30),y			lda 	(codePtr),y
.878d	c8		iny				iny
.878e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8790	f0 f4		beq $8786			beq 	Command_LOCAL
.8792	88		dey				dey 								; unpick pre-get
.8793	60		rts				rts
.8794					LocaliseNextTerm:
.8794	20 da 97	jsr $97da			jsr 	EvaluateTerm 				; evaluate the term
.8797	bd 00 04	lda $0400,x			lda 	NSStatus,x
.879a	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.879c	f0 61		beq $87ff			beq		_LNTError
.879e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a1	85 36		sta $36				sta 	zTemp0
.87a3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87a6	85 37		sta $37				sta  	zTemp0+1
.87a8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87ab	29 10		and #$10			and 	#NSBIsString
.87ad	d0 1e		bne $87cd			bne 	_LNTPushString
.87af	5a		phy				phy
.87b0	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87b2					_LNTPushNumLoop:
.87b2	b1 36		lda ($36),y			lda		(zTemp0),y
.87b4	20 56 a2	jsr $a256			jsr 	StackPushByte
.87b7	c8		iny				iny
.87b8	c0 05		cpy #$05			cpy 	#5
.87ba	d0 f6		bne $87b2			bne 	_LNTPushNumLoop
.87bc	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87be	20 56 a2	jsr $a256			jsr 	StackPushByte
.87c1	a5 37		lda $37				lda 	zTemp0+1
.87c3	20 56 a2	jsr $a256			jsr 	StackPushByte
.87c6	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87c8	20 56 a2	jsr $a256			jsr 	StackPushByte
.87cb	7a		ply				ply
.87cc	60		rts				rts
.87cd					_LNTPushString:
.87cd	5a		phy				phy
.87ce	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d0	85 38		sta $38				sta 	zTemp1
.87d2	a0 01		ldy #$01			ldy 	#1
.87d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d6	85 39		sta $39				sta 	zTemp1+1
.87d8	a0 00		ldy #$00			ldy 	#0 							; output string
.87da	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87dc	f0 0a		beq $87e8			beq 	_LNTStringOut
.87de					_LNTPushStrLoop:
.87de	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e0	f0 06		beq $87e8			beq 	_LNTStringOut
.87e2	20 56 a2	jsr $a256			jsr 	StackPushByte
.87e5	c8		iny				iny
.87e6	80 f6		bra $87de			bra 	_LNTPushStrLoop
.87e8					_LNTStringOut:
.87e8	98		tya				tya									; output length
.87e9	20 56 a2	jsr $a256			jsr 	StackPushByte
.87ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87ef	20 56 a2	jsr $a256			jsr 	StackPushByte
.87f2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87f5	20 56 a2	jsr $a256			jsr 	StackPushByte
.87f8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87fa	20 56 a2	jsr $a256			jsr 	StackPushByte
.87fd	7a		ply				ply
.87fe	60		rts				rts
.87ff					_LNTError:
.87ff	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.8802					LocalPopValue:
.8802	20 6f a2	jsr $a26f			jsr 	StackPopByte
.8805	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8807	d0 17		bne $8820			bne 	_LPVString
.8809	20 6f a2	jsr $a26f			jsr 	StackPopByte 				; address
.880c	85 37		sta $37				sta 	zTemp0+1
.880e	20 6f a2	jsr $a26f			jsr 	StackPopByte
.8811	85 36		sta $36				sta 	zTemp0
.8813	5a		phy				phy
.8814	a0 04		ldy #$04			ldy 	#4 							; copy back
.8816					_LPVNumberCopy:
.8816	20 6f a2	jsr $a26f			jsr 	StackPopByte
.8819	91 36		sta ($36),y			sta 	(zTemp0),y
.881b	88		dey				dey
.881c	10 f8		bpl $8816			bpl 	_LPVNumberCopy
.881e	7a		ply				ply 								; and complete
.881f	60		rts				rts
.8820					_LPVString:
.8820	20 6f a2	jsr $a26f			jsr 	StackPopByte 				; address of record => zTemp0
.8823	85 37		sta $37				sta 	zTemp0+1
.8825	20 6f a2	jsr $a26f			jsr 	StackPopByte
.8828	85 36		sta $36				sta 	zTemp0
.882a	5a		phy				phy
.882b	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.882d	85 38		sta $38				sta 	zTemp1
.882f	a0 01		ldy #$01			ldy 	#1
.8831	b1 36		lda ($36),y			lda 	(zTemp0),y
.8833	85 39		sta $39				sta 	zTemp1+1
.8835	20 6f a2	jsr $a26f			jsr 	StackPopByte 				; # to get => y
.8838	a8		tay				tay
.8839	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.883b	f0 0e		beq $884b			beq 	_LPVStringCopied
.883d	a9 00		lda #$00			lda 	#0 							; NULL on end
.883f	91 38		sta ($38),y			sta 	(zTemp1),y
.8841					_LPVStringCopy:
.8841	88		dey				dey
.8842	30 07		bmi $884b			bmi 	_LPVStringCopied
.8844	20 6f a2	jsr $a26f			jsr 	StackPopByte
.8847	91 38		sta ($38),y			sta 	(zTemp1),y
.8849	80 f6		bra $8841			bra 	_LPVStringCopy
.884b					_LPVStringCopied:
.884b	fa		plx				plx
.884c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.884d					NewCommand:
.884d	20 53 88	jsr $8853			jsr 	NewProgram
.8850	4c 5b 83	jmp $835b			jmp 	WarmStart
.8853					NewProgram:
.8853	20 01 a2	jsr $a201			jsr 	MemoryNew
.8856	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8859	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear everything.
.885c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.885d					Command_Print:
.885d	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.885e					_CPLoop:
.885e	08		php				php 								; save last action flag
.885f	b1 30		lda ($30),y			lda 	(codePtr),y
.8861	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8863	f0 46		beq $88ab			beq 	_CPExit
.8865	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8867	f0 42		beq $88ab			beq 	_CPExit
.8869	68		pla				pla 								; throw last action flag
.886a	b1 30		lda ($30),y			lda 	(codePtr),y
.886c	c8		iny				iny
.886d	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.886f	f0 37		beq $88a8			beq 	_CPContinueWithSameLine
.8871	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8873	f0 2e		beq $88a3			beq 	_CPTab
.8875	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8877	f0 26		beq $889f			beq 	_CPNewLine
.8879	88		dey				dey 								; undo the get.
.887a	a2 00		ldx #$00			ldx 	#0
.887c	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get a value into slot 0
.887f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8882	29 10		and #$10			and 	#NSBIsString
.8884	f0 0b		beq $8891			beq 	_CPNumber
.8886	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8889	ad 08 04	lda $0408			lda 	NSMantissa0
.888c	20 b4 88	jsr $88b4			jsr 	CPPrintStringXA
.888f	80 cc		bra $885d			bra 	Command_Print 				; loop round clearing carry so NL if end
.8891					_CPNumber:
.8891	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8893	20 0a 9c	jsr $9c0a			jsr 	ConvertNumberToString 		; convert to string
.8896	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8898	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.889a	20 b4 88	jsr $88b4			jsr 	CPPrintStringXA
.889d	80 be		bra $885d			bra 	Command_Print 				; loop round clearing carry so NL if end
.889f					_CPNewLine:
.889f	a9 0d		lda #$0d			lda 	#13
.88a1	80 02		bra $88a5			bra 	_CPPrintChar
.88a3					_CPTab:
.88a3	a9 09		lda #$09			lda 	#9 							; print TAB
.88a5					_CPPrintChar:
.88a5	20 c7 88	jsr $88c7			jsr 	CPPrintVector
.88a8					_CPContinueWithSameLine:
.88a8	38		sec				sec 								; loop round with carry set, which
.88a9	80 b3		bra $885e			bra 	_CPLoop 					; will inhibit final CR
.88ab					_CPExit:
.88ab	28		plp				plp 								; get last action flag
.88ac	b0 05		bcs $88b3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88ae	a9 0d		lda #$0d			lda 	#13 						; print new line
.88b0	20 c7 88	jsr $88c7			jsr 	CPPrintVector
.88b3					_CPExit2:
.88b3	60		rts				rts
.88b4					CPPrintStringXA:
.88b4	5a		phy				phy
.88b5	86 37		stx $37				stx 	zTemp0+1
.88b7	85 36		sta $36				sta 	zTemp0
.88b9	a0 00		ldy #$00			ldy 	#0
.88bb					_PSXALoop:
.88bb	b1 36		lda ($36),y			lda 	(zTemp0),y
.88bd	f0 06		beq $88c5			beq 	_PSXAExit
.88bf	20 c7 88	jsr $88c7			jsr 	CPPrintVector
.88c2	c8		iny				iny
.88c3	80 f6		bra $88bb			bra 	_PSXALoop
.88c5					_PSXAExit:
.88c5	7a		ply				ply
.88c6	60		rts				rts
.88c7					CPPrintVector:
.88c7	4c 44 a7	jmp $a744			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88ca					CallProcedure:
.88ca	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88cc	b1 30		lda ($30),y			lda 	(codePtr),y
.88ce	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88d0	f0 0c		beq $88de			beq 	_CPEndParam
.88d2					_CPParamLoop:
.88d2	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get parameter onto stack
.88d5	e8		inx				inx 								; bump next stack
.88d6	b1 30		lda ($30),y			lda 	(codePtr),y
.88d8	c8		iny				iny
.88d9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88db	f0 f5		beq $88d2			beq 	_CPParamLoop
.88dd	88		dey				dey 								; unpick.
.88de					_CPEndParam:
.88de	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88e1	c8		iny				iny									; skip right bracket
.88e2	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88e4	20 78 a2	jsr $a278			jsr 	StackOpen
.88e7	20 bc a2	jsr $a2bc			jsr 	STKSaveCodePosition 		; save loop position
.88ea	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88ed	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88ef	ad 10 04	lda $0410			lda 	NSMantissa1
.88f2	85 37		sta $37				sta 	zTemp0+1
.88f4	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88f6	b2 36		lda ($36)			lda 	(zTemp0)
.88f8	85 30		sta $30				sta 	safePtr
.88fa	b1 36		lda ($36),y			lda 	(zTemp0),y
.88fc	85 31		sta $31				sta 	safePtr+1
.88fe	c8		iny				iny
.88ff	b1 36		lda ($36),y			lda 	(zTemp0),y
.8901	85 32		sta $32				sta 	safePtr+2
.8903	c8		iny				iny
.8904	b1 36		lda ($36),y			lda 	(zTemp0),y
.8906	85 33		sta $33				sta 	safePtr+3
.8908	c8		iny				iny 								; get Y offset -> Y
.8909	b1 36		lda ($36),y			lda 	(zTemp0),y
.890b	a8		tay				tay
.890c	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.890e	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8911	f0 13		beq $8926			beq 	_ParamExit 					; if so, exit.
.8913					_ParamExtract:
.8913	ca		dex				dex 								; put a local term on the level before
.8914	20 94 87	jsr $8794			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8917	20 cf 86	jsr $86cf			jsr 	AssignVariable 				; assign stacked value to the variable.
.891a	e8		inx				inx 								; advance to next parameter to do.
.891b	e8		inx				inx
.891c	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.891f	f0 05		beq $8926			beq 	_ParamExit
.8921	20 40 8d	jsr $8d40			jsr 	CheckComma 					; comma seperating parameters
.8924	80 ed		bra $8913			bra 	_ParamExtract
.8926					_ParamExit:
.8926	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; check )
.8929	60		rts				rts 								; and continue from here
.892a					Command_ENDPROC:
.892a	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.892c	a2 14		ldx #$14			ldx 	#ERRID_PROC
.892e	20 a4 a2	jsr $a2a4			jsr 	StackCheckFrame
.8931	20 cd a2	jsr $a2cd			jsr 	STKLoadCodePosition 		; restore code position
.8934	20 96 a2	jsr $a296			jsr 	StackClose
.8937	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8938					Command_Read:
.8938	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.893a	20 da 97	jsr $97da			jsr 	EvaluateTerm
.893d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8940	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8942	f0 4a		beq $898e			beq 	_CRSyntax 					; check reference (bit 0)
.8944	20 d7 89	jsr $89d7			jsr 	SwapDataCodePtrs 			; swap code and data
.8947	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.894a	d0 20		bne $896c			bne 	_CRContinueData
.894c					_CRKeepSearching:
.894c	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.894e	aa		tax				tax
.894f	20 93 8c	jsr $8c93			jsr 	ScanForward
.8952	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.8954	f0 16		beq $896c			beq 	_CRHaveData 				; found it
.8956	18		clc				clc
.8957	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8959	65 30		adc $30				adc 	codePtr
.895b	85 30		sta $30				sta 	codePtr
.895d	90 02		bcc $8961			bcc 	_CREExit
.895f	e6 31		inc $31				inc 	codePtr+1
.8961					_CREExit:
.8961	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8963	b2 30		lda ($30)			lda 	(codePtr)
.8965	d0 e5		bne $894c			bne 	_CRKeepSearching
.8967	a9 0b		lda #$0b		lda	#11
.8969	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.896c					_CRHaveData:
.896c					_CRContinueData:
.896c	a2 01		ldx #$01			ldx 	#1
.896e	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8971	ca		dex				dex
.8972	20 cf 86	jsr $86cf			jsr		AssignVariable 				; do the assignment
.8975	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8978	b1 30		lda ($30),y			lda 	(codePtr),y
.897a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.897c	d0 04		bne $8982			bne 	_CRSwapBack
.897e	c8		iny				iny 								; consume comma
.897f	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8982					_CRSwapBack:
.8982	20 d7 89	jsr $89d7			jsr 	SwapDataCodePtrs			; swap them back.
.8985	b1 30		lda ($30),y			lda 	(codePtr),y
.8987	c8		iny				iny
.8988	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.898a	f0 ac		beq $8938			beq 	Command_Read 				; if so go round again.
.898c	88		dey				dey 								; unpick get.
.898d	60		rts				rts
.898e					_CRSyntax:
.898e	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8991					RemCommand:
.8991	b1 30		lda ($30),y			lda 	(codePtr),y
.8993	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8995	d0 06		bne $899d			bne 	_RMExit
.8997	c8		iny				iny
.8998	98		tya				tya
.8999	38		sec				sec
.899a	71 30		adc ($30),y			adc 	(codePtr),y
.899c	a8		tay				tay
.899d					_RMExit:
.899d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.899e					Command_REPEAT:
.899e	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89a0	20 78 a2	jsr $a278			jsr 	StackOpen
.89a3	20 bc a2	jsr $a2bc			jsr 	STKSaveCodePosition 		; save loop position
.89a6	60		rts				rts
.89a7					Command_UNTIL:
.89a7	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89a9	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89ab	20 a4 a2	jsr $a2a4			jsr 	StackCheckFrame
.89ae	a2 00		ldx #$00			ldx 	#0
.89b0	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; work out the number
.89b3	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; check if zero
.89b6	f0 04		beq $89bc			beq 	_CULoopBack 				; if so keep looping
.89b8	20 96 a2	jsr $a296			jsr 	StackClose		 			; return
.89bb	60		rts				rts
.89bc					_CULoopBack:
.89bc	20 cd a2	jsr $a2cd			jsr 	STKLoadCodePosition 		; loop back
.89bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89c0					Command_Restore:
.89c0	20 d7 89	jsr $89d7			jsr 	SwapDataCodePtrs 			; swap code and data
.89c3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89c5	85 30		sta $30				sta 	codePtr
.89c7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89c9	85 31		sta $31				sta 	codePtr+1
.89cb	20 d7 89	jsr $89d7			jsr 	SwapDataCodePtrs 			; put them back
.89ce	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89d0	8d 9b 04	sta $049b			sta 	dataPointer+4
.89d3	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89d6	60		rts				rts
.89d7					SwapDataCodePtrs:
.89d7	da		phx				phx
.89d8	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89da					_SDCPLoop:
.89da	b5 30		lda $30,x			lda 	safePtr,x
.89dc	48		pha				pha
.89dd	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89e0	95 30		sta $30,x			sta 	safePtr,x
.89e2	68		pla				pla
.89e3	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89e6	ca		dex				dex
.89e7	10 f1		bpl $89da			bpl 	_SDCPLoop
.89e9	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89ec	8c 9b 04	sty $049b			sty 	dataPointer+4
.89ef	a8		tay				tay
.89f0	fa		plx				plx
.89f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89f2					CommandRUN:
.89f2	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89f5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89f7	85 30		sta $30				sta 	codePtr
.89f9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89fb	85 31		sta $31				sta 	codePtr+1
.89fd					RUNNewLine:
.89fd	b2 30		lda ($30)			lda 	(codePtr)
.89ff	f0 5e		beq $8a5f			beq 	CRNoProgram         		; no then END.
.8a01	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a03	9a		txs				txs
.8a04					RUNCodePointerLine:
.8a04	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a06					_CRIncMainLoop:
.8a06	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8a09	d0 05		bne $8a10			bne 	_CRNoBreakCheck
.8a0b	20 00 a9	jsr $a900			jsr 	EXTBreakCheck 				; break check
.8a0e	f0 4a		beq $8a5a			beq 	_CRBreak
.8a10					_CRNoBreakCheck:
.8a10	c8		iny				iny
.8a11					_CRMainLoop:
.8a11	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a14	b1 30		lda ($30),y			lda 	(codePtr),y
.8a16	10 10		bpl $8a28			bpl 	_CRNotKeyword
.8a18	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a1a	b0 04		bcs $8a20			bcs 	_CRIsKeyword
.8a1c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a1e	b0 34		bcs $8a54			bcs		_CRSyntaxError
.8a20					_CRIsKeyword:
.8a20	c8		iny				iny 								; consume command
.8a21	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a22	aa		tax				tax 								; put in X for vector jump
.8a23	20 57 8a	jsr $8a57			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a26	80 e9		bra $8a11			bra 	_CRMainLoop 				; and loop round
.8a28					_CRNotKeyword:
.8a28	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a2a	f0 da		beq $8a06			beq 	_CRIncMainLoop
.8a2c	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a2e	90 05		bcc $8a35			bcc 	_CRNotVariable
.8a30					_CRGoLet:
.8a30	20 93 86	jsr $8693			jsr 	LetCommand
.8a33	80 dc		bra $8a11			bra 	_CRMainLoop
.8a35					_CRNotVariable:
.8a35	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a37	f0 f7		beq $8a30			beq 	_CRGoLet
.8a39	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a3b	f0 f3		beq $8a30			beq 	_CRGoLet
.8a3d	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a3f	f0 ef		beq $8a30			beq 	_CRGoLet
.8a41	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a43	f0 09		beq $8a4e			beq 	_CRGoRem
.8a45	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a47	d0 0b		bne $8a54			bne 	_CRSyntaxError
.8a49	20 2c 82	jsr $822c			jsr 	LabelHere
.8a4c	80 c3		bra $8a11			bra 	_CRMainLoop
.8a4e					_CRGoRem:
.8a4e	c8		iny				iny
.8a4f	20 91 89	jsr $8991			jsr 	RemCommand
.8a52	80 bd		bra $8a11			bra 	_CRMainLoop
.8a54					_CRSyntaxError:
.8a54	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.8a57					_CRCallVector0:
.8a57	7c 02 8b	jmp ($8b02,x)			jmp 	(VectorSet0,x)
.8a5a					_CRBreak:
.8a5a	a9 01		lda #$01		lda	#1
.8a5c	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8a5f					CRNoProgram:
.8a5f	4c 19 85	jmp $8519			jmp 	EndCommand
.8a62					EOLCommand:
.8a62	18		clc				clc
.8a63	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a65	65 30		adc $30				adc 	codePtr
.8a67	85 30		sta $30				sta 	codePtr
.8a69	90 02		bcc $8a6d			bcc 	_CREExit
.8a6b	e6 31		inc $31				inc 	codePtr+1
.8a6d					_CREExit:
.8a6d	80 8e		bra $89fd			bra 	RunNewLine
.8a6f					Shift1Command:
.8a6f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a71	c8		iny				iny
.8a72	0a		asl a				asl 	a
.8a73	aa		tax				tax
.8a74	7c 9a 8b	jmp ($8b9a,x)			jmp 	(VectorSet1,x)
.8a77					Shift2Command:
.8a77	b1 30		lda ($30),y			lda 	(codePtr),y
.8a79	c8		iny				iny
.8a7a	0a		asl a				asl 	a
.8a7b	aa		tax				tax
.8a7c	7c b4 8b	jmp ($8bb4,x)			jmp 	(VectorSet2,x)
.8a7f					Unused1:
.8a7f					Unused2:
.8a7f					Unused3:
.8a7f					Unused4:
.8a7f	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
>8a82							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a82					VectorSetPunc:
>8a82	3e 90					.word	ShiftLeft                        ; $00 <<
>8a84	f5 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a86	eb 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a88	9e 9f					.word	SyntaxError                      ; $03 !!3
>8a8a	9e 9f					.word	SyntaxError                      ; $04 ><
>8a8c	ff 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a8e	41 90					.word	ShiftRight                       ; $06 >>
>8a90	9e 9f					.word	SyntaxError                      ; $07 !!7
>8a92	9e 9f					.word	SyntaxError                      ; $08 !!8
>8a94	9e 9f					.word	SyntaxError                      ; $09 !!9
>8a96	9e 9f					.word	SyntaxError                      ; $0a !!10
>8a98	9e 9f					.word	SyntaxError                      ; $0b !!11
>8a9a	9e 9f					.word	SyntaxError                      ; $0c !!12
>8a9c	9e 9f					.word	SyntaxError                      ; $0d !!13
>8a9e	9e 9f					.word	SyntaxError                      ; $0e !!14
>8aa0	9e 9f					.word	SyntaxError                      ; $0f !!15
>8aa2	9e 9f					.word	SyntaxError                      ; $10 @
>8aa4	9e 9f					.word	SyntaxError                      ; $11 !!17
>8aa6	9e 9f					.word	SyntaxError                      ; $12 !!18
>8aa8	9e 9f					.word	SyntaxError                      ; $13 [
>8aaa	c2 8e					.word	IntegerDivide                    ; $14 \
>8aac	9e 9f					.word	SyntaxError                      ; $15 ]
>8aae	cf 91					.word	EorInteger                       ; $16 ^
>8ab0	9e 9f					.word	SyntaxError                      ; $17 _
>8ab2	9e 9f					.word	SyntaxError                      ; $18 `
>8ab4	9e 9f					.word	SyntaxError                      ; $19 !!25
>8ab6	9e 9f					.word	SyntaxError                      ; $1a !!26
>8ab8	9e 9f					.word	SyntaxError                      ; $1b {
>8aba	89 91					.word	OraInteger                       ; $1c |
>8abc	9e 9f					.word	SyntaxError                      ; $1d }
>8abe	9e 9f					.word	SyntaxError                      ; $1e ~
>8ac0	9e 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8ac2	9e 9f					.word	SyntaxError                      ; $20
>8ac4	15 92					.word	WordIndirect                     ; $21 !
>8ac6	9e 9f					.word	SyntaxError                      ; $22 "
>8ac8	9e 9f					.word	SyntaxError                      ; $23 #
>8aca	9e 9f					.word	SyntaxError                      ; $24 $
>8acc	0f 8f					.word	IntegerModulus                   ; $25 %
>8ace	43 91					.word	AndInteger                       ; $26 &
>8ad0	9e 9f					.word	SyntaxError                      ; $27 '
>8ad2	9e 9f					.word	SyntaxError                      ; $28 (
>8ad4	9e 9f					.word	SyntaxError                      ; $29 )
>8ad6	84 8f					.word	MulInteger                       ; $2a *
>8ad8	d5 90					.word	AddInteger                       ; $2b +
>8ada	9e 9f					.word	SyntaxError                      ; $2c ,
>8adc	18 91					.word	SubInteger                       ; $2d -
>8ade	9e 9f					.word	SyntaxError                      ; $2e .
>8ae0	00 94					.word	FDivideCommand                   ; $2f /
>8ae2	9e 9f					.word	SyntaxError                      ; $30 0
>8ae4	9e 9f					.word	SyntaxError                      ; $31 1
>8ae6	9e 9f					.word	SyntaxError                      ; $32 2
>8ae8	9e 9f					.word	SyntaxError                      ; $33 3
>8aea	9e 9f					.word	SyntaxError                      ; $34 4
>8aec	9e 9f					.word	SyntaxError                      ; $35 5
>8aee	9e 9f					.word	SyntaxError                      ; $36 6
>8af0	9e 9f					.word	SyntaxError                      ; $37 7
>8af2	9e 9f					.word	SyntaxError                      ; $38 8
>8af4	9e 9f					.word	SyntaxError                      ; $39 9
>8af6	9e 9f					.word	SyntaxError                      ; $3a :
>8af8	9e 9f					.word	SyntaxError                      ; $3b ;
>8afa	d7 8d					.word	BinaryCompareLess                ; $3c <
>8afc	cd 8d					.word	BinaryCompareEqual               ; $3d =
>8afe	e1 8d					.word	BinaryCompareGreater             ; $3e >
>8b00	3c 92					.word	ByteIndirect                     ; $3f ?
.8b02					VectorSet0:
>8b02	62 8a					.word	EOLCommand                       ; $80 !0:EOF
>8b04	6f 8a					.word	Shift1Command                    ; $81 !1:SH1
>8b06	77 8a					.word	Shift2Command                    ; $82 !2:SH2
>8b08	70 99					.word	AbsUnary                         ; $83 ABS(
>8b0a	80 99					.word	AllocUnary                       ; $84 ALLOC(
>8b0c	f0 99					.word	AscUnary                         ; $85 ASC(
>8b0e	bb 9b					.word	ChrUnary                         ; $86 CHR$(
>8b10	84 a6					.word	UnaryEvent                       ; $87 EVENT(
>8b12	c9 8d					.word	UnaryFalse                       ; $88 FALSE
>8b14	fd 99					.word	FracUnary                        ; $89 FRAC(
>8b16	1a a6					.word	UnaryHit                         ; $8a HIT(
>8b18	13 9a					.word	IntUnary                         ; $8b INT(
>8b1a	7a 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b1c	14 a7					.word	UnaryJoyB                        ; $8d JOYB(
>8b1e	ed a6					.word	UnaryJoyX                        ; $8e JOYX(
>8b20	f0 a6					.word	UnaryJoyY                        ; $8f JOYY(
>8b22	95 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b24	25 9a					.word	LenUnary                         ; $91 LEN(
>8b26	43 9a					.word	Unary_Max                        ; $92 MAX(
>8b28	bf 9c					.word	Unary_Mid                        ; $93 MID$(
>8b2a	3f 9a					.word	Unary_Min                        ; $94 MIN(
>8b2c	9a 9a					.word	Unary_Not                        ; $95 NOT(
>8b2e	b0 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b30	a5 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b32	cf 9a					.word	Unary_Rnd                        ; $98 RND(
>8b34	50 9b					.word	SgnUnary                         ; $99 SGN(
>8b36	cd 9b					.word	SpcUnary                         ; $9a SPC(
>8b38	e8 9b					.word	Unary_Str                        ; $9b STR$(
>8b3a	28 a7					.word	UnaryTimer                       ; $9c TIMER(
>8b3c	bd 8d					.word	UnaryTrue                        ; $9d TRUE
>8b3e	70 9b					.word	ValUnary                         ; $9e VAL(
>8b40	1c 85					.word	ForCommand                       ; $9f FOR
>8b42	69 86					.word	IfCommand                        ; $a0 IF
>8b44	7f 8a					.word	Unused1                          ; $a1 PROC
>8b46	9e 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b48	09 8d					.word	Command_WHILE                    ; $a3 WHILE
>8b4a	92 86					.word	EndIf                            ; $a4 ENDIF
>8b4c	2a 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b4e	d6 85					.word	NextCommand                      ; $a6 NEXT
>8b50	7f 8a					.word	Unused4                          ; $a7 THEN
>8b52	a7 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b54	2a 8d					.word	Command_WEND                     ; $a9 WEND
>8b56	9e 9f					.word	SyntaxError                      ; $aa BY
>8b58	ba 83					.word	CallCommand                      ; $ab CALL
>8b5a	bc a3					.word	CircleCommand                    ; $ac CIRCLE
>8b5c	f4 83					.word	ClearCommand                     ; $ad CLEAR
>8b5e	4c 84					.word	ClearScreen                      ; $ae CLS
>8b60	9e 9f					.word	SyntaxError                      ; $af COLOR
>8b62	9e 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b64	54 84					.word	Command_Data                     ; $b1 DATA
>8b66	5c 84					.word	DimCommand                       ; $b2 DIM
>8b68	7f 8a					.word	Unused3                          ; $b3 DOWNTO
>8b6a	8b 86					.word	ElseCode                         ; $b4 ELSE
>8b6c	9e 9f					.word	SyntaxError                      ; $b5 FROM
>8b6e	e8 a5					.word	GfxCommand                       ; $b6 GFX
>8b70	2f 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b72	4d 86					.word	GotoCommand                      ; $b8 GOTO
>8b74	9e 9f					.word	SyntaxError                      ; $b9 HERE
>8b76	e6 a3					.word	ImageCommand                     ; $ba IMAGE
>8b78	93 86					.word	LetCommand                       ; $bb LET
>8b7a	3b a4					.word	LineCommand                      ; $bc LINE
>8b7c	86 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b7e	9e 9f					.word	SyntaxError                      ; $be OFF
>8b80	9e 9f					.word	SyntaxError                      ; $bf ON
>8b82	9e 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b84	40 a6					.word	PaletteCommand                   ; $c1 PALETTE
>8b86	34 a4					.word	PlotCommand                      ; $c2 PLOT
>8b88	5d 88					.word	Command_Print                    ; $c3 PRINT
>8b8a	38 89					.word	Command_Read                     ; $c4 READ
>8b8c	b8 a3					.word	RectangleCommand                 ; $c5 RECT
>8b8e	91 89					.word	RemCommand                       ; $c6 REM
>8b90	3f 86					.word	Command_RETURN                   ; $c7 RETURN
>8b92	9e 9f					.word	SyntaxError                      ; $c8 SOLID
>8b94	c7 a3					.word	SpriteCommand                    ; $c9 SPRITE
>8b96	03 a4					.word	TextCommand                      ; $ca TEXT
>8b98	7f 8a					.word	Unused2                          ; $cb TO
.8b9a					VectorSet1:
>8b9a	9e 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b9c	9e 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b9e	9e 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba0	8b 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ba2	aa 83					.word	AssertCommand                    ; $84 ASSERT
>8ba4	88 a5					.word	BitmapCtrl                       ; $85 BITMAP
>8ba6	19 85					.word	EndCommand                       ; $86 END
>8ba8	e8 86					.word	Command_List                     ; $87 LIST
>8baa	4d 88					.word	NewCommand                       ; $88 NEW
>8bac	c0 89					.word	Command_Restore                  ; $89 RESTORE
>8bae	f2 89					.word	CommandRUN                       ; $8a RUN
>8bb0	cd a5					.word	SpritesCtrl                      ; $8b SPRITES
>8bb2	3c 8c					.word	StopCommand                      ; $8c STOP
.8bb4					VectorSet2:
>8bb4	9e 9f					.word	SyntaxError                      ; $80 !0:EOF
>8bb6	9e 9f					.word	SyntaxError                      ; $81 !1:SH1
>8bb8	9e 9f					.word	SyntaxError                      ; $82 !2:SH2
>8bba	5d 9e					.word	Assemble_adc                     ; $83 ADC
>8bbc	55 9e					.word	Assemble_and                     ; $84 AND
>8bbe	71 9e					.word	Assemble_asl                     ; $85 ASL
>8bc0	db 9e					.word	Assemble_bcc                     ; $86 BCC
>8bc2	df 9e					.word	Assemble_bcs                     ; $87 BCS
>8bc4	e7 9e					.word	Assemble_beq                     ; $88 BEQ
>8bc6	9e 9e					.word	Assemble_bit                     ; $89 BIT
>8bc8	cf 9e					.word	Assemble_bmi                     ; $8a BMI
>8bca	e3 9e					.word	Assemble_bne                     ; $8b BNE
>8bcc	cb 9e					.word	Assemble_bpl                     ; $8c BPL
>8bce	eb 9e					.word	Assemble_bra                     ; $8d BRA
>8bd0	ef 9e					.word	Assemble_brk                     ; $8e BRK
>8bd2	d3 9e					.word	Assemble_bvc                     ; $8f BVC
>8bd4	d7 9e					.word	Assemble_bvs                     ; $90 BVS
>8bd6	f7 9e					.word	Assemble_clc                     ; $91 CLC
>8bd8	4b 9f					.word	Assemble_cld                     ; $92 CLD
>8bda	0b 9f					.word	Assemble_cli                     ; $93 CLI
>8bdc	3b 9f					.word	Assemble_clv                     ; $94 CLV
>8bde	69 9e					.word	Assemble_cmp                     ; $95 CMP
>8be0	b2 9e					.word	Assemble_cpx                     ; $96 CPX
>8be2	ad 9e					.word	Assemble_cpy                     ; $97 CPY
>8be4	8f 9e					.word	Assemble_dec                     ; $98 DEC
>8be6	47 9f					.word	Assemble_dex                     ; $99 DEX
>8be8	23 9f					.word	Assemble_dey                     ; $9a DEY
>8bea	59 9e					.word	Assemble_eor                     ; $9b EOR
>8bec	94 9e					.word	Assemble_inc                     ; $9c INC
>8bee	57 9f					.word	Assemble_inx                     ; $9d INX
>8bf0	43 9f					.word	Assemble_iny                     ; $9e INY
>8bf2	c6 9e					.word	Assemble_jmp                     ; $9f JMP
>8bf4	c1 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bf6	65 9e					.word	Assemble_lda                     ; $a1 LDA
>8bf8	8a 9e					.word	Assemble_ldx                     ; $a2 LDX
>8bfa	a8 9e					.word	Assemble_ldy                     ; $a3 LDY
>8bfc	7b 9e					.word	Assemble_lsr                     ; $a4 LSR
>8bfe	5b 9f					.word	Assemble_nop                     ; $a5 NOP
>8c00	51 9e					.word	Assemble_ora                     ; $a6 ORA
>8c02	07 9f					.word	Assemble_pha                     ; $a7 PHA
>8c04	f3 9e					.word	Assemble_php                     ; $a8 PHP
>8c06	4f 9f					.word	Assemble_phx                     ; $a9 PHX
>8c08	0f 9f					.word	Assemble_phy                     ; $aa PHY
>8c0a	17 9f					.word	Assemble_pla                     ; $ab PLA
>8c0c	fb 9e					.word	Assemble_plp                     ; $ac PLP
>8c0e	63 9f					.word	Assemble_plx                     ; $ad PLX
>8c10	1f 9f					.word	Assemble_ply                     ; $ae PLY
>8c12	76 9e					.word	Assemble_rol                     ; $af ROL
>8c14	80 9e					.word	Assemble_ror                     ; $b0 ROR
>8c16	03 9f					.word	Assemble_rti                     ; $b1 RTI
>8c18	13 9f					.word	Assemble_rts                     ; $b2 RTS
>8c1a	6d 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c1c	ff 9e					.word	Assemble_sec                     ; $b4 SEC
>8c1e	5f 9f					.word	Assemble_sed                     ; $b5 SED
>8c20	1b 9f					.word	Assemble_sei                     ; $b6 SEI
>8c22	61 9e					.word	Assemble_sta                     ; $b7 STA
>8c24	53 9f					.word	Assemble_stp                     ; $b8 STP
>8c26	85 9e					.word	Assemble_stx                     ; $b9 STX
>8c28	a3 9e					.word	Assemble_sty                     ; $ba STY
>8c2a	99 9e					.word	Assemble_stz                     ; $bb STZ
>8c2c	37 9f					.word	Assemble_tax                     ; $bc TAX
>8c2e	33 9f					.word	Assemble_tay                     ; $bd TAY
>8c30	bc 9e					.word	Assemble_trb                     ; $be TRB
>8c32	b7 9e					.word	Assemble_tsb                     ; $bf TSB
>8c34	3f 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c36	27 9f					.word	Assemble_txa                     ; $c1 TXA
>8c38	2f 9f					.word	Assemble_txs                     ; $c2 TXS
>8c3a	2b 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c3c					StopCommand:
.8c3c	a9 08		lda #$08		lda	#8
.8c3e	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c41					ProcedureScan:
.8c41	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c43	85 30		sta $30				sta 	codePtr
.8c45	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c47	85 31		sta $31				sta 	codePtr+1
.8c49					_PSLoop:
.8c49	b2 30		lda ($30)			lda 	(codePtr)
.8c4b	f0 42		beq $8c8f			beq 	_PSExit
.8c4d	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c4f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c51	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c53	d0 2d		bne $8c82			bne 	_PSNext
.8c55	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c56	b1 30		lda ($30),y			lda 	(codePtr),y
.8c58	29 c0		and #$c0			and 	#$C0
.8c5a	c9 40		cmp #$40			cmp 	#$40
.8c5c	d0 32		bne $8c90			bne 	_PSSyntax
.8c5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c60	18		clc				clc
.8c61	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c63	85 37		sta $37				sta 	zTemp0+1
.8c65	c8		iny				iny 								; LSB
.8c66	b1 30		lda ($30),y			lda 	(codePtr),y
.8c68	85 36		sta $36				sta 	zTemp0
.8c6a	c8		iny				iny 								; character after variable call.
.8c6b	98		tya				tya 								; save Y offset at +7
.8c6c	a0 07		ldy #$07			ldy 	#7
.8c6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8c70	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c72	a0 02		ldy #$02			ldy 	#2
.8c74	91 36		sta ($36),y			sta 	(zTemp0),y
.8c76	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c78					_PSCopy:
.8c78	b5 30		lda $30,x			lda 	safePtr,x
.8c7a	c8		iny				iny
.8c7b	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7d	e8		inx				inx
.8c7e	e0 04		cpx #$04			cpx 	#4
.8c80	d0 f6		bne $8c78			bne 	_PSCopy
.8c82					_PSNext:
.8c82	18		clc				clc
.8c83	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c85	65 30		adc $30				adc 	codePtr
.8c87	85 30		sta $30				sta 	codePtr
.8c89	90 02		bcc $8c8d			bcc 	_CREExit
.8c8b	e6 31		inc $31				inc 	codePtr+1
.8c8d					_CREExit:
.8c8d	80 ba		bra $8c49			bra 	_PSLoop
.8c8f					_PSExit:
.8c8f	60		rts				rts
.8c90					_PSSyntax:
.8c90	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c93					ScanForward:
.8c93	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c95	86 37		stx $37				stx 	zTemp0+1
.8c97	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c99					_ScanLoop:
.8c99	b1 30		lda ($30),y			lda 	(codePtr),y
.8c9b	c8		iny				iny
.8c9c	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c9e	d0 0e		bne $8cae			bne 	_ScanGoNext
.8ca0	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8ca2	f0 04		beq $8ca8			beq 	_ScanMatch
.8ca4	c5 37		cmp $37				cmp 	zTemp0+1
.8ca6	d0 06		bne $8cae			bne 	_ScanGoNext
.8ca8					_ScanMatch:
.8ca8	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8caa	d0 01		bne $8cad			bne 	_ScanNotEndEOL
.8cac	88		dey				dey
.8cad					_ScanNotEndEOL:
.8cad	60		rts				rts
.8cae					_ScanGoNext:
.8cae	20 b3 8c	jsr $8cb3			jsr  	ScanForwardOne
.8cb1	80 e6		bra $8c99			bra 	_ScanLoop
.8cb3					ScanForwardOne:
.8cb3	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8cb5	90 3e		bcc $8cf5			bcc 	_SFWExit
.8cb7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8cb9	90 18		bcc $8cd3			bcc 	_ScanSkipOne
.8cbb	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8cbd	b0 2f		bcs $8cee			bcs 	_ScanSkipData
.8cbf	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cc1	90 32		bcc $8cf5			bcc 	_SFWExit 					; if not, ordinary keywords.
.8cc3	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8cc5	b0 2e		bcs $8cf5			bcs 	_SFWExit
.8cc7	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cc9	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ccb	b0 28		bcs $8cf5			bcs 	_SFWExit
.8ccd	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8ccf	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cd1	80 22		bra $8cf5			bra 	_SFWExit
.8cd3					_ScanSkipOne:
.8cd3	c8		iny				iny 								; consume the extra one.
.8cd4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cd6	d0 1d		bne $8cf5			bne 	_SFWExit
.8cd8	18		clc				clc
.8cd9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cdb	65 30		adc $30				adc 	codePtr
.8cdd	85 30		sta $30				sta 	codePtr
.8cdf	90 02		bcc $8ce3			bcc 	_CREExit
.8ce1	e6 31		inc $31				inc 	codePtr+1
.8ce3					_CREExit:
.8ce3	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ce5	b2 30		lda ($30)			lda 	(codePtr)
.8ce7	d0 0c		bne $8cf5			bne 	_SFWExit 					; if not zero, more to scan
.8ce9	a9 13		lda #$13		lda	#19
.8ceb	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8cee					_ScanSkipData:
.8cee	88		dey				dey 								; point at data token
.8cef	c8		iny				iny
.8cf0	98		tya				tya
.8cf1	38		sec				sec
.8cf2	71 30		adc ($30),y			adc 	(codePtr),y
.8cf4	a8		tay				tay
.8cf5					_SFWExit:
.8cf5	60		rts				rts
.8cf6					ScanGetCurrentLineStep:
.8cf6	64 38		stz $38				stz 	zTemp1
.8cf8	a0 03		ldy #$03			ldy 	#3
.8cfa					_SGCLSLoop:
.8cfa	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfc	c8		iny				iny
.8cfd	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8cff	f0 05		beq $8d06			beq 	_SGCLSExit
.8d01	20 b3 8c	jsr $8cb3			jsr 	ScanForwardOne
.8d04	80 f4		bra $8cfa			bra 	_SGCLSLoop
.8d06					_SGCLSExit:
.8d06	a5 38		lda $38				lda 	zTemp1
.8d08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8d09					Command_WHILE:
.8d09	5a		phy				phy 								; save position of the test
.8d0a	a2 00		ldx #$00			ldx 	#0
.8d0c	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; work out the number
.8d0f	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; check if zero
.8d12	f0 0e		beq $8d22			beq 	_WHExitLoop 				; if so exit the loop
.8d14	98		tya				tya 								; position *after* test.
.8d15	7a		ply				ply 								; restore position before test, at WHILE
.8d16	88		dey				dey
.8d17	48		pha				pha 								; push after test on the stack
.8d18	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d1a	20 78 a2	jsr $a278			jsr 	StackOpen
.8d1d	20 bc a2	jsr $a2bc			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d20	7a		ply				ply 								; restore the position *after* the test
.8d21	60		rts				rts
.8d22					_WHExitLoop:
.8d22	68		pla				pla 								; throw post loop position
.8d23	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d25	aa		tax				tax
.8d26	20 93 8c	jsr $8c93			jsr 	ScanForward
.8d29	60		rts				rts
.8d2a					Command_WEND:
.8d2a	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d2c	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d2e	20 a4 a2	jsr $a2a4			jsr 	StackCheckFrame
.8d31	20 cd a2	jsr $a2cd			jsr 	STKLoadCodePosition 		; loop back
.8d34	20 96 a2	jsr $a296			jsr 	StackClose		 			; erase the frame
.8d37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d38					CheckRightBracket:
.8d38	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3a	c8		iny				iny
.8d3b	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d3d	d0 0f		bne $8d4e			bne 	CNAFail
.8d3f	60		rts				rts
.8d40					CheckComma:
.8d40	b1 30		lda ($30),y			lda 	(codePtr),y
.8d42	c8		iny				iny
.8d43	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d45	d0 07		bne $8d4e			bne 	CNAFail
.8d47	60		rts				rts
.8d48					CheckNextA:
.8d48	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d4a	d0 02		bne $8d4e			bne 	CNAFail
.8d4c	c8		iny				iny 								; skip character
.8d4d	60		rts				rts 								; and exit
.8d4e					CNAFail:
.8d4e	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d51					ErrorHandler:
.8d51	a8		tay				tay 								; find the error text
.8d52	f0 49		beq $8d9d			beq 	_EHEnd
.8d54	a2 00		ldx #$00			ldx 	#0
.8d56	a9 b7		lda #$b7			lda 	#((ErrorText) & $FF)
.8d58	85 36		sta $36				sta 	0+zTemp0
.8d5a	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d5c	85 37		sta $37				sta 	1+zTemp0
.8d5e					_EHFind:
.8d5e	88		dey				dey 								; found the error text ?
.8d5f	f0 0e		beq $8d6f			beq 	_EHFound
.8d61					_EHFindZero:
.8d61	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d63	e6 36		inc $36				inc 	zTemp0
.8d65	d0 02		bne $8d69			bne 	_EHFNoCarry
.8d67	e6 37		inc $37				inc 	zTemp0+1
.8d69					_EHFNoCarry:
.8d69	c9 00		cmp #$00			cmp 	#0
.8d6b	d0 f4		bne $8d61			bne 	_EHFindZero
.8d6d	80 ef		bra $8d5e			bra 	_EHFind
.8d6f					_EHFound:
.8d6f	a5 36		lda $36				lda 	zTemp0 						; print message
.8d71	a6 37		ldx $37				ldx 	zTemp0+1
.8d73	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8d76	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d78	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7a	d0 05		bne $8d81			bne 	_EHAtMsg
.8d7c	c8		iny				iny
.8d7d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7f	f0 17		beq $8d98			beq 	_EHCREnd
.8d81					_EHAtMsg:
.8d81	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d83	a9 a0		lda #$a0			lda 	#_AtMsg & $FF
.8d85	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8d88	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d8a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d8c	48		pha				pha
.8d8d	c8		iny				iny
.8d8e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d90	aa		tax				tax
.8d91	68		pla				pla
.8d92	20 63 92	jsr $9263			jsr 	ConvertInt16 				; convert XA to string
.8d95	20 aa 8d	jsr $8daa			jsr 	PrintStringXA 				; and print it.
.8d98					_EHCREnd:
.8d98	a9 0d		lda #$0d			lda 	#13 						; new line
.8d9a	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.8d9d					_EHEnd:
.8d9d	4c 5b 83	jmp $835b			jmp 	WarmStart
>8da0	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8da8	20 00
.8daa					PrintStringXA:
.8daa	5a		phy				phy
.8dab	86 37		stx $37				stx 	zTemp0+1
.8dad	85 36		sta $36				sta 	zTemp0
.8daf	a0 00		ldy #$00			ldy 	#0
.8db1					_PSXALoop:
.8db1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db3	f0 06		beq $8dbb			beq 	_PSXAExit
.8db5	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.8db8	c8		iny				iny
.8db9	80 f6		bra $8db1			bra 	_PSXALoop
.8dbb					_PSXAExit:
.8dbb	7a		ply				ply
.8dbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8dbd					UnaryTrue:
.8dbd	fa		plx				plx
.8dbe					ReturnTrue:
.8dbe	a9 01		lda #$01			lda 	#1  						; set to 1
.8dc0	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.8dc3	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dc5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dc8	60		rts				rts
.8dc9					UnaryFalse:
.8dc9	fa		plx				plx
.8dca					ReturnFalse:
.8dca	4c 14 9e	jmp $9e14			jmp 	NSMSetZero 					; set it all to zero
.8dcd					BinaryCompareEqual:
.8dcd	fa		plx				plx
.8dce	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8dd1	c9 00		cmp #$00			cmp 	#0
.8dd3	f0 e9		beq $8dbe			beq 	ReturnTrue
.8dd5	80 f3		bra $8dca			bra 	ReturnFalse
.8dd7					BinaryCompareLess:
.8dd7	fa		plx				plx
.8dd8	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8ddb	c9 ff		cmp #$ff			cmp 	#$FF
.8ddd	f0 df		beq $8dbe			beq 	ReturnTrue
.8ddf	80 e9		bra $8dca			bra 	ReturnFalse
.8de1					BinaryCompareGreater:
.8de1	fa		plx				plx
.8de2	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8de5	c9 01		cmp #$01			cmp 	#1
.8de7	f0 d5		beq $8dbe			beq 	ReturnTrue
.8de9	80 df		bra $8dca			bra 	ReturnFalse
.8deb					BinaryCompareNotEqual:
.8deb	fa		plx				plx
.8dec	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8def	c9 00		cmp #$00			cmp 	#0
.8df1	d0 cb		bne $8dbe			bne 	ReturnTrue
.8df3	80 d5		bra $8dca			bra 	ReturnFalse
.8df5					BinaryCompareLessEqual:
.8df5	fa		plx				plx
.8df6	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8df9	c9 01		cmp #$01			cmp 	#1
.8dfb	d0 c1		bne $8dbe			bne 	ReturnTrue
.8dfd	80 cb		bra $8dca			bra 	ReturnFalse
.8dff					BinaryCompareGreaterEqual:
.8dff	fa		plx				plx
.8e00	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8e03	c9 ff		cmp #$ff			cmp 	#$FF
.8e05	d0 b7		bne $8dbe			bne 	ReturnTrue
.8e07	80 c1		bra $8dca			bra 	ReturnFalse
.8e09					CompareBaseCode:
.8e09	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; make both values if references.
.8e0c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8e0f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e12	29 10		and #$10			and 	#NSTString
.8e14	d0 40		bne $8e56			bne 	_CBCString
.8e16	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e19	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e1c	d0 3b		bne $8e59			bne 	_CBCFloat
.8e1e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e21	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e24	29 08		and #$08			and 	#NSTFloat
.8e26	d0 31		bne $8e59			bne 	_CBCFloat
.8e28	20 5c 8e	jsr $8e5c			jsr 	CompareFixMinusZero
.8e2b	e8		inx				inx
.8e2c	20 5c 8e	jsr $8e5c			jsr 	CompareFixMinusZero
.8e2f	ca		dex				dex
.8e30	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e33	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e36	10 0b		bpl $8e43			bpl 	_CDCSameSign
.8e38	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e3b	30 16		bmi $8e53			bmi 	_CBCLess 					; return $FF
.8e3d					_CBCGreater:
.8e3d	a9 01		lda #$01			lda 	#1
.8e3f	60		rts				rts
.8e40					_CBCEqual:
.8e40	a9 00		lda #$00			lda 	#0
.8e42	60		rts				rts
.8e43					_CDCSameSign:
.8e43	20 af 90	jsr $90af			jsr 	SubTopTwoStack 				; unsigned subtract
.8e46	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; or the mantissa together
.8e49	f0 f5		beq $8e40			beq 	_CBCEqual 					; -0 == 0
.8e4b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e4e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e51	10 ea		bpl $8e3d			bpl 	_CBCGreater
.8e53					_CBCLess:
.8e53	a9 ff		lda #$ff			lda 	#$FF
.8e55	60		rts				rts
.8e56					_CBCString:
.8e56	4c 05 90	jmp $9005			jmp 	CompareStrings
.8e59					_CBCFloat:
.8e59	4c e6 93	jmp $93e6			jmp 	CompareFloat
.8e5c					CompareFixMinusZero:
.8e5c	20 44 9e	jsr $9e44			jsr 	NSMIsZero
.8e5f	d0 03		bne $8e64			bne 	_CFXMZNotZero
.8e61	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e64					_CFXMZNotZero:
.8e64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e65					StringConcat:
.8e65	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e68	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e6b	29 18		and #$18			and 	#NSBTypeMask
.8e6d	c9 10		cmp #$10			cmp 	#NSTString
.8e6f	d0 4e		bne $8ebf			bne		_SCType
.8e71	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e73	e8		inx				inx
.8e74	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; setup for second
.8e77	20 9d 8e	jsr $8e9d			jsr 	_SCLengthZ0 				; length for second
.8e7a	ca		dex				dex
.8e7b	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; setup for first
.8e7e	20 9d 8e	jsr $8e9d			jsr 	_SCLengthZ0 				; length for first
.8e81	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e83	20 6b a3	jsr $a36b			jsr 	StringTempAllocate
.8e86	20 b0 8e	jsr $8eb0			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e89	e8		inx				inx
.8e8a	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; copy second out
.8e8d	20 b0 8e	jsr $8eb0			jsr 	_SCCopy
.8e90	ca		dex				dex
.8e91	60		rts				rts
.8e92					_SCSetupZ0:
.8e92	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e95	85 36		sta $36				sta 	zTemp0
.8e97	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e9a	85 37		sta $37				sta 	zTemp0+1
.8e9c	60		rts				rts
.8e9d					_SCLengthZ0:
.8e9d	5a		phy				phy
.8e9e	a0 00		ldy #$00			ldy 	#0
.8ea0					_SCLenLoop:
.8ea0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea2	f0 0a		beq $8eae			beq 	_SCLExit
.8ea4	c8		iny				iny
.8ea5	e6 38		inc $38				inc 	zTemp1
.8ea7	10 f7		bpl $8ea0			bpl		_SCLenLoop
.8ea9	a9 09		lda #$09		lda	#9
.8eab	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8eae					_SCLExit:
.8eae	7a		ply				ply
.8eaf	60		rts				rts
.8eb0					_SCCopy:
.8eb0	5a		phy				phy
.8eb1	a0 00		ldy #$00			ldy 	#0
.8eb3					_SCCopyLoop:
.8eb3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eb5	f0 06		beq $8ebd			beq 	_SCCExit
.8eb7	20 a9 a3	jsr $a3a9			jsr 	StringTempWrite
.8eba	c8		iny				iny
.8ebb	80 f6		bra $8eb3			bra 	_SCCopyLoop
.8ebd					_SCCExit:
.8ebd	7a		ply				ply
.8ebe	60		rts				rts
.8ebf					_SCType:
.8ebf	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8ec2					IntegerDivide:
.8ec2	fa		plx				plx
.8ec3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ec6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ec9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eca	0a		asl a				asl 	a
.8ecb	10 05		bpl $8ed2			bpl 	_NotRef
.8ecd	48		pha				pha
.8ece	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ed1	68		pla				pla
.8ed2					_NotRef:
.8ed2	0a		asl a				asl 	a
.8ed3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ed5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ed8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8edb	f0 03		beq $8ee0			beq 	_IntegerCode 				; if clear, then we have two integers
.8edd	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.8ee0					_IntegerCode:
.8ee0	20 02 8f	jsr $8f02			jsr 	CheckDivideZero 			; do div zero check
.8ee3	20 3a 8f	jsr $8f3a			jsr 	Int32Divide 				; do the division
.8ee6	20 f7 8f	jsr $8ff7			jsr 	CalculateSign 				; calculate result sign
.8ee9					NSMCopyPlusTwoToZero:
.8ee9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8eec	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8eef	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ef2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ef5	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ef8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8efb	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8efe	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8f01	60		rts				rts
.8f02					CheckDivideZero:
.8f02	e8		inx				inx
.8f03	20 44 9e	jsr $9e44			jsr 	NSMIsZero
.8f06	f0 02		beq $8f0a			beq 	_CDVError
.8f08	ca		dex				dex
.8f09	60		rts				rts
.8f0a					_CDVError:
.8f0a	a9 03		lda #$03		lda	#3
.8f0c	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8f0f					IntegerModulus:
.8f0f	fa		plx				plx
.8f10	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f13	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f16	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f17	0a		asl a				asl 	a
.8f18	10 05		bpl $8f1f			bpl 	_NotRef
.8f1a	48		pha				pha
.8f1b	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f1e	68		pla				pla
.8f1f					_NotRef:
.8f1f	0a		asl a				asl 	a
.8f20	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f22	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f25	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f28	f0 03		beq $8f2d			beq 	_IntegerCode 				; if clear, then we have two integers
.8f2a	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.8f2d					_IntegerCode:
.8f2d					IntegerModulusNoCheck:
.8f2d	20 02 8f	jsr $8f02			jsr 	CheckDivideZero 			; do div zero check
.8f30	20 3a 8f	jsr $8f3a			jsr 	Int32Divide 				; do the division
.8f33	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f36	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f39	60		rts				rts
.8f3a					Int32Divide:
.8f3a	48		pha				pha 								; save AXY
.8f3b	5a		phy				phy
.8f3c	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f3f	20 10 9e	jsr $9e10			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f42	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f44					_I32DivideLoop:
.8f44	e8		inx				inx
.8f45	e8		inx				inx
.8f46	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f49	ca		dex				dex
.8f4a	ca		dex				dex
.8f4b	20 2a 9e	jsr $9e2a			jsr 	NSMRotateLeft
.8f4e	20 7a 8f	jsr $8f7a			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f51	90 03		bcc $8f56			bcc 	_I32DivideNoCarryIn
.8f53	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f56					_I32DivideNoCarryIn:
.8f56	88		dey				dey 								; loop round till division completed.
.8f57	d0 eb		bne $8f44			bne 	_I32DivideLoop
.8f59	7a		ply				ply 								; restore AXY and exit
.8f5a	68		pla				pla
.8f5b	60		rts				rts
.8f5c					Int32ShiftDivide:
.8f5c	48		pha				pha 								; save AY
.8f5d	5a		phy				phy
.8f5e	e8		inx				inx 								; clear S[X+2]
.8f5f	e8		inx				inx
.8f60	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.8f63	ca		dex				dex
.8f64	ca		dex				dex
.8f65	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f67					_I32SDLoop:
.8f67	20 7a 8f	jsr $8f7a			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f6a	e8		inx				inx
.8f6b	e8		inx				inx
.8f6c	20 2a 9e	jsr $9e2a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f6f	ca		dex				dex
.8f70	ca		dex				dex
.8f71	20 2a 9e	jsr $9e2a			jsr 	NSMRotateLeft
.8f74	88		dey				dey 	 							; do 31 times
.8f75	d0 f0		bne $8f67			bne 	_I32SDLoop
.8f77	7a		ply				ply 								; restore AY and exit
.8f78	68		pla				pla
.8f79	60		rts				rts
.8f7a					DivideCheckSubtract:
.8f7a	20 af 90	jsr $90af			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f7d	b0 04		bcs $8f83			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f7f	20 89 90	jsr $9089			jsr 	AddTopTwoStack 				; add it back in
.8f82	18		clc				clc 								; and return False
.8f83					_DCSExit:
.8f83	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f84					MulInteger:
.8f84	fa		plx				plx
.8f85	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f88	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f8b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f8c	0a		asl a				asl 	a
.8f8d	10 05		bpl $8f94			bpl 	_NotRef
.8f8f	48		pha				pha
.8f90	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f93	68		pla				pla
.8f94					_NotRef:
.8f94	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f95	30 0b		bmi $8fa2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f97	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f9a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f9d	f0 06		beq $8fa5			beq 	_IntegerCode 				; if clear, then we have two integers
.8f9f	4c bd 94	jmp $94bd			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8fa2					_StringData:
.8fa2	4c b2 9f	jmp $9fb2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8fa5					_IntegerCode:
.8fa5	20 b2 8f	jsr $8fb2			jsr 	MultiplyShort
.8fa8	c9 00		cmp #$00			cmp 	#0
.8faa	f0 05		beq $8fb1			beq 	_MIExit
.8fac	a9 04		lda #$04		lda	#4
.8fae	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8fb1					_MIExit:
.8fb1	60		rts				rts
.8fb2					MultiplyShort:
.8fb2	5a		phy				phy 								; save Y
.8fb3	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8fb6	20 10 9e	jsr $9e10			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fb9	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fbb					_I32MLoop:
.8fbb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fbe	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fc1	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fc4	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fc7	f0 28		beq $8ff1			beq 	_I32MExit 					; exit if zero
.8fc9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fcc	29 01		and #$01			and 	#1
.8fce	f0 0e		beq $8fde			beq 	_I32MNoAdd
.8fd0	20 89 90	jsr $9089			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fd3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fd6	10 06		bpl $8fde			bpl 	_I32MNoAdd
.8fd8					_I32ShiftRight:
.8fd8	20 37 9e	jsr $9e37			jsr 	NSMShiftRight 				; shift S[X] right
.8fdb	c8		iny				iny 								; increment shift count
.8fdc	80 0a		bra $8fe8			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fde					_I32MNoAdd:
.8fde	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fe1	70 f5		bvs $8fd8			bvs 	_I32ShiftRight 				; instead.
.8fe3	e8		inx				inx
.8fe4	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fe7	ca		dex				dex
.8fe8					_I32MShiftUpper:
.8fe8	e8		inx				inx 								; shift S[X+2] right
.8fe9	e8		inx				inx
.8fea	20 37 9e	jsr $9e37			jsr 	NSMShiftRight
.8fed	ca		dex				dex
.8fee	ca		dex				dex
.8fef	80 ca		bra $8fbb			bra 	_I32MLoop 					; try again.
.8ff1					_I32MExit:
.8ff1	20 f7 8f	jsr $8ff7			jsr 	CalculateSign
.8ff4	98		tya				tya 								; shift in A
.8ff5	7a		ply				ply 								; restore Y and exit
.8ff6	60		rts				rts
.8ff7					CalculateSign:
.8ff7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8ffa	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8ffd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9000	0a		asl a				asl 	a 							; shift bit 7 into carry
.9001	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.9004	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9005					CompareStrings:
.9005	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9008	3d 01 04	and $0401,x			and 	NSStatus+1,x
.900b	29 10		and #$10			and 	#NSBIsString
.900d	f0 2c		beq $903b			beq 	_CSTypeError
.900f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9012	85 36		sta $36				sta 	zTemp0
.9014	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9017	85 37		sta $37				sta 	zTemp0+1
.9019	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.901c	85 38		sta $38				sta 	zTemp1
.901e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9021	85 39		sta $39				sta 	zTemp1+1
.9023	5a		phy				phy 								; save Y so we can access strings
.9024	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9026					_CSLoop:
.9026	c8		iny				iny
.9027	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9029	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.902b	d0 06		bne $9033			bne 	_CSDifferent
.902d	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.902f	d0 f5		bne $9026			bne 	_CSLoop 					; still comparing
.9031					_CSExit:
.9031	7a		ply				ply 								; reached end, return zero in A from EOS
.9032	60		rts				rts
.9033					_CSDifferent:
.9033	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9035	90 fa		bcc $9031			bcc		_CSExit
.9037	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9039	80 f6		bra $9031			bra 	_CSExit
.903b					_CSTypeError:
.903b	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.903e					ShiftLeft:
.903e	38		sec				sec
.903f	80 01		bra $9042			bra 	ShiftMain
.9041					ShiftRight:
.9041	18		clc				clc
.9042					ShiftMain:
.9042	fa		plx				plx 								; restore X
.9043	08		php				php 								; save direction
.9044	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9047	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.904a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.904b	0a		asl a				asl 	a
.904c	10 05		bpl $9053			bpl 	_NotRef
.904e	48		pha				pha
.904f	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9052	68		pla				pla
.9053					_NotRef:
.9053	0a		asl a				asl 	a
.9054	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9056	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9059	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.905c	f0 03		beq $9061			beq 	_IntegerCode 				; if clear, then we have two integers
.905e	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.9061					_IntegerCode:
.9061	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9064	29 e0		and #$e0			and 	#$E0
.9066	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9069	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.906c	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.906f	d0 13		bne $9084			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9071					_SMLoop:
.9071	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9074	30 11		bmi $9087			bmi 	_SMExit 					; exit if done.
.9076	28		plp				plp 								; restore direcition setting
.9077	08		php				php
.9078	90 05		bcc $907f			bcc 	_SMRight
.907a	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; shift left if CS
.907d	80 f2		bra $9071			bra 	_SMLoop
.907f					_SMRight:
.907f	20 37 9e	jsr $9e37			jsr 	NSMShiftRight 				; shift right if CC
.9082	80 ed		bra $9071			bra 	_SMLoop
.9084					_SMExit0:
.9084	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; return zero.
.9087					_SMExit:
.9087	28		plp				plp 								; throw direction
.9088	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9089					AddTopTwoStack:
.9089	18		clc				clc
.908a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.908d	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9090	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9093	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9096	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9099	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.909c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.909f	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.90a2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90a5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90a8	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.90ab	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90ae	60		rts				rts
.90af					SubTopTwoStack:
.90af	38		sec				sec
.90b0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90b3	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.90b6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90b9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90bc	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90bf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90c2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90c5	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90c8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90cb	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90ce	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90d1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90d4	60		rts				rts
.90d5					AddInteger:
.90d5	fa		plx				plx
.90d6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90d9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90dc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90dd	0a		asl a				asl 	a
.90de	10 05		bpl $90e5			bpl 	_NotRef
.90e0	48		pha				pha
.90e1	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90e4	68		pla				pla
.90e5					_NotRef:
.90e5	0a		asl a				asl 	a 							; put MSB of type into A:7
.90e6	30 0b		bmi $90f3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90e8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90eb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90ee	f0 06		beq $90f6			beq 	_IntegerCode 				; if clear, then we have two integers
.90f0	4c 3d 93	jmp $933d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90f3					_StringData:
.90f3	4c 65 8e	jmp $8e65			jmp 	StringConcat							; at least one string - don't know both are strings.
.90f6					_IntegerCode:
.90f6					AddCode:
.90f6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90f9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90fc	10 8b		bpl $9089			bpl 	AddTopTwoStack
.90fe	20 af 90	jsr $90af			jsr 	SubTopTwoStack 				; do a physical subtraction
.9101	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9104	10 09		bpl $910f			bpl 	_AddExit
.9106	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9109	9d 00 04	sta $0400,x			sta 	NSStatus,x
.910c	20 c9 9d	jsr $9dc9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.910f					_AddExit:
.910f	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; check for -0
.9112	d0 03		bne $9117			bne 	_AddNonZero
.9114	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9117					_AddNonZero:
.9117	60		rts				rts
.9118					SubInteger:
.9118	fa		plx				plx
.9119	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.911c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.911f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9120	0a		asl a				asl 	a
.9121	10 05		bpl $9128			bpl 	_NotRef
.9123	48		pha				pha
.9124	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9127	68		pla				pla
.9128					_NotRef:
.9128	0a		asl a				asl 	a 							; put MSB of type into A:7
.9129	30 0b		bmi $9136			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.912b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.912e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9131	f0 06		beq $9139			beq 	_IntegerCode 				; if clear, then we have two integers
.9133	4c 42 93	jmp $9342			jmp 	FloatingPointSub 							; otherwise at least one float.
.9136					_StringData:
.9136	4c b2 9f	jmp $9fb2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9139					_IntegerCode:
.9139	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.913c	49 80		eor #$80			eor 	#$80
.913e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9141	80 b3		bra $90f6			bra 	AddCode 					; and do the same code as add.
.9143					AndInteger:
.9143	fa		plx				plx
.9144	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9147	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.914a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.914b	0a		asl a				asl 	a
.914c	10 05		bpl $9153			bpl 	_NotRef
.914e	48		pha				pha
.914f	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9152	68		pla				pla
.9153					_NotRef:
.9153	0a		asl a				asl 	a
.9154	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9156	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9159	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.915c	f0 03		beq $9161			beq 	_IntegerCode 				; if clear, then we have two integers
.915e	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.9161					_IntegerCode:
.9161	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9164	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9167	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.916a	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.916d	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9170	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9173	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9176	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9179	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.917c	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.917f	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9182	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9185	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9188	60		rts				rts
.9189					OraInteger:
.9189	fa		plx				plx
.918a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.918d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9190	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9191	0a		asl a				asl 	a
.9192	10 05		bpl $9199			bpl 	_NotRef
.9194	48		pha				pha
.9195	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9198	68		pla				pla
.9199					_NotRef:
.9199	0a		asl a				asl 	a
.919a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.919c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.919f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91a2	f0 03		beq $91a7			beq 	_IntegerCode 				; if clear, then we have two integers
.91a4	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.91a7					_IntegerCode:
.91a7	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91aa	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.91ad	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91b0	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91b3	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.91b6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91b9	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91bc	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91bf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91c2	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91c5	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91c8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91cb	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91ce	60		rts				rts
.91cf					EorInteger:
.91cf	fa		plx				plx
.91d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91d3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91d6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91d7	0a		asl a				asl 	a
.91d8	10 05		bpl $91df			bpl 	_NotRef
.91da	48		pha				pha
.91db	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91de	68		pla				pla
.91df					_NotRef:
.91df	0a		asl a				asl 	a
.91e0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91e2	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91e5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91e8	f0 03		beq $91ed			beq 	_IntegerCode 				; if clear, then we have two integers
.91ea	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.91ed					_IntegerCode:
.91ed	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91f0	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91f3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91f6	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91f9	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91fc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91ff	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9202	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9205	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9208	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.920b	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.920e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9211	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9214	60		rts				rts
.9215					WordIndirect:
.9215	fa		plx				plx
.9216	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9219	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.921c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.921d	0a		asl a				asl 	a
.921e	10 05		bpl $9225			bpl 	_NotRef
.9220	48		pha				pha
.9221	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9224	68		pla				pla
.9225					_NotRef:
.9225	0a		asl a				asl 	a
.9226	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9228	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.922b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.922e	f0 03		beq $9233			beq 	_IntegerCode 				; if clear, then we have two integers
.9230	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.9233					_IntegerCode:
.9233	20 f6 90	jsr $90f6			jsr 	AddCode 					; add the two values
.9236	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9238	9d 00 04	sta $0400,x			sta 	NSStatus,x
.923b	60		rts				rts
.923c					ByteIndirect:
.923c	fa		plx				plx
.923d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9240	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9243	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9244	0a		asl a				asl 	a
.9245	10 05		bpl $924c			bpl 	_NotRef
.9247	48		pha				pha
.9248	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.924b	68		pla				pla
.924c					_NotRef:
.924c	0a		asl a				asl 	a
.924d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.924f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9252	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9255	f0 03		beq $925a			beq 	_IntegerCode 				; if clear, then we have two integers
.9257	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.925a					_IntegerCode:
.925a	20 f6 90	jsr $90f6			jsr 	AddCode 					; add the two values
.925d	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.925f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9262	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9263					ConvertInt16:
.9263	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.9266	8e 10 04	stx $0410			stx 	NSMantissa1
.9269	9c 18 04	stz $0418			stz 	NSMantissa2
.926c	9c 20 04	stz $0420			stz 	NSMantissa3
.926f	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.9272	a2 00		ldx #$00			ldx 	#0 							; stack level
.9274	a9 0a		lda #$0a			lda 	#10 						; base
.9276	80 00		bra $9278			bra 	ConvertInt32
.9278					ConvertInt32:
.9278	5a		phy				phy
.9279	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.927b	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.927e	10 08		bpl $9288			bpl 	_CI32NotNeg
.9280	48		pha				pha
.9281	a9 2d		lda #$2d			lda 	#'-'
.9283	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9286	c8		iny				iny
.9287	68		pla				pla
.9288					_CI32NotNeg:
.9288	20 96 92	jsr $9296			jsr 	_CI32DivideConvert 			; recursive conversion
.928b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.928d	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9290	7a		ply				ply
.9291	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9293	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.9295	60		rts				rts
.9296					_CI32DivideConvert:
.9296	e8		inx				inx 								; write to next slot up
.9297	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.929a	ca		dex				dex
.929b	20 3a 8f	jsr $8f3a			jsr 	Int32Divide 				; divide
.929e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.92a1	48		pha				pha
.92a2	20 e9 8e	jsr $8ee9			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.92a5	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; is it zero ?
.92a8	f0 06		beq $92b0			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.92aa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.92ad	20 96 92	jsr $9296			jsr 	_CI32DivideConvert 			; and recusrively call.
.92b0					_CI32NoRecurse:
.92b0	68		pla				pla 								; remainder
.92b1	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92b3	90 02		bcc $92b7			bcc 	_CI32NotHex
.92b5	69 26		adc #$26			adc 	#6+32
.92b7					_CI32NotHex:
.92b7	69 30		adc #$30			adc 	#48
.92b9	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92bc	c8		iny				iny
.92bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92be					PrecedenceLevel:
>92be	04					.byte	 4	; $00 <<
>92bf	02					.byte	 2	; $01 <=
>92c0	02					.byte	 2	; $02 <>
>92c1	00					.byte	 0	; $03 !!3
>92c2	00					.byte	 0	; $04 ><
>92c3	02					.byte	 2	; $05 >=
>92c4	04					.byte	 4	; $06 >>
>92c5	00					.byte	 0	; $07 !!7
>92c6	00					.byte	 0	; $08 !!8
>92c7	00					.byte	 0	; $09 !!9
>92c8	00					.byte	 0	; $0a !!10
>92c9	00					.byte	 0	; $0b !!11
>92ca	00					.byte	 0	; $0c !!12
>92cb	00					.byte	 0	; $0d !!13
>92cc	00					.byte	 0	; $0e !!14
>92cd	00					.byte	 0	; $0f !!15
>92ce	00					.byte	 0	; $10 @
>92cf	00					.byte	 0	; $11 !!17
>92d0	00					.byte	 0	; $12 !!18
>92d1	00					.byte	 0	; $13 [
>92d2	04					.byte	 4	; $14 \
>92d3	00					.byte	 0	; $15 ]
>92d4	01					.byte	 1	; $16 ^
>92d5	00					.byte	 0	; $17 _
>92d6	00					.byte	 0	; $18 `
>92d7	00					.byte	 0	; $19 !!25
>92d8	00					.byte	 0	; $1a !!26
>92d9	00					.byte	 0	; $1b {
>92da	01					.byte	 1	; $1c |
>92db	00					.byte	 0	; $1d }
>92dc	00					.byte	 0	; $1e ~
>92dd	00					.byte	 0	; $1f [7m<7F>[m
>92de	00					.byte	 0	; $20
>92df	05					.byte	 5	; $21 !
>92e0	00					.byte	 0	; $22 "
>92e1	00					.byte	 0	; $23 #
>92e2	05					.byte	 5	; $24 $
>92e3	04					.byte	 4	; $25 %
>92e4	01					.byte	 1	; $26 &
>92e5	00					.byte	 0	; $27 '
>92e6	00					.byte	 0	; $28 (
>92e7	00					.byte	 0	; $29 )
>92e8	04					.byte	 4	; $2a *
>92e9	03					.byte	 3	; $2b +
>92ea	00					.byte	 0	; $2c ,
>92eb	03					.byte	 3	; $2d -
>92ec	00					.byte	 0	; $2e .
>92ed	04					.byte	 4	; $2f /
>92ee	00					.byte	 0	; $30 0
>92ef	00					.byte	 0	; $31 1
>92f0	00					.byte	 0	; $32 2
>92f1	00					.byte	 0	; $33 3
>92f2	00					.byte	 0	; $34 4
>92f3	00					.byte	 0	; $35 5
>92f4	00					.byte	 0	; $36 6
>92f5	00					.byte	 0	; $37 7
>92f6	00					.byte	 0	; $38 8
>92f7	00					.byte	 0	; $39 9
>92f8	00					.byte	 0	; $3a :
>92f9	00					.byte	 0	; $3b ;
>92fa	02					.byte	 2	; $3c <
>92fb	02					.byte	 2	; $3d =
>92fc	02					.byte	 2	; $3e >
>92fd	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92fe					EvaluateExpressionAt0:
.92fe	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9300					EvaluateExpression:
.9300	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9302					EvaluateExpressionAtPrecedence:
.9302	48		pha				pha 								; save precedence level
.9303	20 da 97	jsr $97da			jsr 	EvaluateTerm 				; evaluate term into level X.
.9306	68		pla				pla 								; restore precedence level.
.9307					_EXPRLoop:
.9307	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9309	b1 30		lda ($30),y			lda 	(codePtr),y
.930b	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.930d	b0 25		bcs $9334			bcs 	_EXPRExit
.930f	da		phx				phx 								; read the operator precedence
.9310	aa		tax				tax
.9311	bd be 92	lda $92be,x			lda 	PrecedenceLevel,x
.9314	fa		plx				plx
.9315	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9317	f0 1b		beq $9334			beq 	_EXPRExit
.9319	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.931b	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.931d	c5 37		cmp $37				cmp 	zTemp0+1
.931f	b0 13		bcs $9334			bcs		_EXPRExit 					; if current >= operator exit
.9321	48		pha				pha 								; save current precedence.
.9322	b1 30		lda ($30),y			lda 	(codePtr),y
.9324	c8		iny				iny
.9325	48		pha				pha
.9326	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9328	e8		inx				inx 								; work out the right hand side.
.9329	20 02 93	jsr $9302			jsr 	EvaluateExpressionAtPrecedence
.932c	ca		dex				dex
.932d	68		pla				pla 								; get operator, call the code.
.932e	20 37 93	jsr $9337			jsr 	_EXPRCaller
.9331	68		pla				pla 								; restore precedence level
.9332	80 d3		bra $9307			bra 	_EXPRLoop 					; and go round.
.9334					_EXPRExit:
.9334	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9336	60		rts				rts
.9337					_EXPRCaller:
.9337	da		phx				phx 								; save on stack, first thing is to restore it
.9338	0a		asl a				asl 	a 							; double so can use vectors into X
.9339	aa		tax				tax
.933a	7c 82 8a	jmp ($8a82,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.933d					FloatingPointAdd:
.933d	20 e6 94	jsr $94e6			jsr 	FloatPrepare 				; prepare for floats
.9340	80 0b		bra $934d			bra 	FloatAdd
.9342					FloatingPointSub:
.9342	20 e6 94	jsr $94e6			jsr 	FloatPrepare 				; prepare for floats
.9345					FloatSubtract:
.9345	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.9348	49 80		eor #$80			eor 	#$80
.934a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.934d					FloatAdd:
.934d	48		pha				pha
.934e	5a		phy				phy
.934f	20 f7 94	jsr $94f7			jsr 	NSNormalise 				; normalise S[X]
.9352	f0 5c		beq $93b0			beq 	_FAReturn1
.9354	e8		inx				inx 								; normalise S[X+1]
.9355	20 f7 94	jsr $94f7			jsr 	NSNormalise
.9358	ca		dex				dex
.9359	c9 00		cmp #$00			cmp 	#0
.935b	f0 77		beq $93d4			beq 	_FAExit 					; if so, just return A
.935d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9360	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.9363	f0 1b		beq $9380			beq 	_FAExponentsEqual
.9365	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.9368	a8		tay				tay
.9369	38		sec				sec 								; do a signed comparison of the exponents.
.936a	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.936d	50 02		bvc $9371			bvc 	_FANoSignedChange
.936f	49 80		eor #$80			eor 	#$80
.9371					_FANoSignedChange:
.9371	29 80		and #$80			and 	#$80
.9373	10 03		bpl $9378			bpl 	_FAHaveMax
.9375	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.9378					_FAHaveMax:
.9378	20 d7 93	jsr $93d7			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.937b	e8		inx				inx
.937c	20 d7 93	jsr $93d7			jsr 	_FAShiftToExponent
.937f	ca		dex				dex
.9380					_FAExponentsEqual:
.9380	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.9383	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9386	30 10		bmi $9398			bmi 	_FADifferentSigns
.9388	20 89 90	jsr $9089			jsr 	AddTopTwoStack 				; do the add of the mantissae
.938b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.938e	10 44		bpl $93d4			bpl 	_FAExit 					; if no, we are done.
.9390	20 37 9e	jsr $9e37			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9393	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.9396	80 3c		bra $93d4			bra 	_FAExit
.9398					_FADifferentSigns:
.9398	20 af 90	jsr $90af			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.939b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.939e	10 06		bpl $93a6			bpl 	_FACheckZero 				; if no, check for -0
.93a0	20 c0 9d	jsr $9dc0			jsr 	NSMNegate 					; netate result
.93a3	20 c9 9d	jsr $9dc9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.93a6					_FACheckZero:
.93a6	20 44 9e	jsr $9e44			jsr 	NSMIsZero	 				; check for -0
.93a9	d0 29		bne $93d4			bne 	_FAExit
.93ab	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93ae	80 24		bra $93d4			bra 	_FAExit
.93b0					_FAReturn1:
.93b0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93b3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93b6	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93b9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93bc	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93bf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93c2	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93c5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93c8	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93cb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93ce	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93d1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93d4					_FAExit:
.93d4	7a		ply				ply
.93d5	68		pla				pla
.93d6	60		rts				rts
.93d7					_FAShiftToExponent:
.93d7					_FAShiftToExponent2:
.93d7	98		tya				tya 								; compare Y to exponent
.93d8	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93db	f0 08		beq $93e5			beq 	_FASEExit 					; exit if so.
.93dd	20 37 9e	jsr $9e37			jsr 	NSMShiftRight	 			; shift the mantissa right
.93e0	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93e3	80 f2		bra $93d7			bra 	_FAShiftToExponent2
.93e5					_FASEExit:
.93e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93e6					CompareFloat:
.93e6	20 45 93	jsr $9345			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93ec	29 f8		and #$f8			and 	#$F8
.93ee	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93f1	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93f4	f0 09		beq $93ff			beq 	_FCExit 					; zero, so approximately identical
.93f6	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93f8	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93fb	10 02		bpl $93ff			bpl 	_FCExit
.93fd					_FCNegative:
.93fd	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93ff					_FCExit:
.93ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9400					FDivideCommand:
.9400	fa		plx				plx	 								; restore stack position
.9401	20 e6 94	jsr $94e6			jsr 	FloatPrepare 				; prepare for floats
.9404					FloatDivide:
.9404	48		pha				pha
.9405	e8		inx				inx
.9406	20 f7 94	jsr $94f7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9409	ca		dex				dex
.940a	c9 00		cmp #$00			cmp 	#0
.940c	f0 20		beq $942e			beq 	_FDZero
.940e	20 f7 94	jsr $94f7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9411	f0 19		beq $942c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9413	20 5c 8f	jsr $8f5c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9416	20 e9 8e	jsr $8ee9			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9419	20 f7 94	jsr $94f7			jsr		NSNormalise 				; renormalise
.941c	20 f7 8f	jsr $8ff7			jsr 	CalculateSign 				; calculate result sign
.941f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9422	38		sec				sec
.9423	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9426	38		sec				sec
.9427	e9 1e		sbc #$1e			sbc 	#30
.9429	9d 28 04	sta $0428,x			sta 	NSExponent,x
.942c					_FDExit:
.942c	68		pla				pla
.942d	60		rts				rts
.942e					_FDZero:
.942e	a9 03		lda #$03		lda	#3
.9430	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9433					FloatFractionalPart:
.9433	5a		phy				phy
.9434	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.9437	29 7f		and #$7f			and 	#$7F
.9439	9d 00 04	sta $0400,x			sta 	NSStatus,x
.943c	20 f7 94	jsr $94f7			jsr 	NSNormalise
.943f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9442	38		sec				sec
.9443	e9 e0		sbc #$e0			sbc 	#$E0
.9445	90 31		bcc $9478			bcc 	_FFPExit 					; already fractional
.9447	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9449	b0 2a		bcs $9475			bcs 	_FFPZero
.944b	a8		tay				tay 								; put count to do in Y
.944c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.944f	20 7a 94	jsr $947a			jsr 	_FFPPartial
.9452	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9455	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9458	20 7a 94	jsr $947a			jsr 	_FFPPartial
.945b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.945e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9461	20 7a 94	jsr $947a			jsr 	_FFPPartial
.9464	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9467	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.946a	20 7a 94	jsr $947a			jsr 	_FFPPartial
.946d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9470	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; zeroed check.
.9473	d0 03		bne $9478			bne 	_FFPExit
.9475					_FFPZero:
.9475	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.9478					_FFPExit:
.9478	7a		ply				ply
.9479	60		rts				rts
.947a					_FFPPartial:
.947a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.947c	f0 17		beq $9495			beq 	_FFFPPExit
.947e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9480	b0 0c		bcs $948e			bcs 	_FFFPPWholeByte
.9482	5a		phy				phy
.9483					_FFFPPLeft:
.9483	0a		asl a				asl 	a
.9484	88		dey				dey
.9485	d0 fc		bne $9483			bne 	_FFFPPLeft
.9487	7a		ply				ply
.9488					_FFFPPRight:
.9488	4a		lsr a				lsr 	a
.9489	88		dey				dey
.948a	d0 fc		bne $9488			bne 	_FFFPPRight
.948c	80 07		bra $9495			bra 	_FFFPPExit
.948e					_FFFPPWholeByte:
.948e	98		tya				tya 								; subtract 8 from count
.948f	38		sec				sec
.9490	e9 08		sbc #$08			sbc 	#8
.9492	a8		tay				tay
.9493	a9 00		lda #$00			lda 	#0 							; and clear all
.9495					_FFFPPExit:
.9495	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9496					FloatIntegerPart:
.9496	48		pha				pha
.9497	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.949a	f0 1f		beq $94bb			beq 	_FIPExit 					; if so do nothing
.949c	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; is it zero ?
.949f	f0 17		beq $94b8			beq 	_FIPZero 					; if so return zero.
.94a1	20 f7 94	jsr $94f7			jsr 	NSNormalise 				; normalise
.94a4	f0 12		beq $94b8			beq 	_FIPZero 					; normalised to zero, exit zero
.94a6					_FIPShift:
.94a6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.94a9	10 08		bpl $94b3			bpl 	_FIPCheckZero
.94ab	20 37 9e	jsr $9e37			jsr 	NSMShiftRight 				; shift mantissa right
.94ae	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.94b1	80 f3		bra $94a6			bra 	_FIPShift
.94b3					_FIPCheckZero:
.94b3	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; avoid -0 problem
.94b6	d0 03		bne $94bb			bne 	_FIPExit 					; set to zero if mantissa zero.
.94b8					_FIPZero:
.94b8	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.94bb					_FIPExit:
.94bb	68		pla				pla
.94bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94bd					FloatingPointMultiply:
.94bd	20 e6 94	jsr $94e6			jsr 	FloatPrepare 				; prepare for floats
.94c0					FloatMultiply:
.94c0	48		pha				pha
.94c1	20 f7 94	jsr $94f7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94c4	f0 1b		beq $94e1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94c6	e8		inx				inx
.94c7	20 f7 94	jsr $94f7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94ca	ca		dex				dex
.94cb	c9 00		cmp #$00			cmp 	#0
.94cd	f0 0f		beq $94de			beq 	_FDSetZero
.94cf	20 b2 8f	jsr $8fb2			jsr 	MultiplyShort 				; calculate the result.
.94d2	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94d5	18		clc				clc
.94d6	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94d9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94dc	80 03		bra $94e1			bra 	_FDExit
.94de					_FDSetZero:
.94de	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; return 0
.94e1					_FDExit:
.94e1	20 f7 94	jsr $94f7			jsr 	NSNormalise 				; normalise the result
.94e4	68		pla				pla
.94e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94e6					FloatPrepare:
.94e6	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; dereference the top two values
.94e9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94ec	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94ef	29 10		and #$10			and 	#NSBIsString
.94f1	d0 01		bne $94f4			bne 	_FDType
.94f3	60		rts				rts
.94f4					_FDType:
.94f4	4c a8 9f	jmp $9fa8			jmp 	TypeError
.94f7					NSNormalise:
.94f7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94fa	29 80		and #$80			and 	#$80
.94fc	09 08		ora #$08			ora 	#NSTFloat
.94fe	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9501	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; if zero exit
.9504	d0 09		bne $950f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9506	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.9509	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.950c	a9 00		lda #$00			lda 	#0 							; set Z flag
.950e	60		rts				rts
.950f					_NSNormaliseOptimise:
.950f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9512	d0 22		bne $9536			bne 	_NSNormaliseLoop
.9514	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.9517	30 1d		bmi $9536			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9519	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.951c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.951f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9522	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9525	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9528	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.952b	bd 28 04	lda $0428,x			lda 	NSExponent,x
.952e	38		sec				sec
.952f	e9 08		sbc #$08			sbc 	#8
.9531	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9534	80 d9		bra $950f			bra 	_NSNormaliseOptimise
.9536					_NSNormaliseLoop:
.9536	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9539	70 08		bvs $9543			bvs 	_NSNExit 					; exit if so with Z flag clear
.953b	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; shift mantissa left
.953e	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9541	80 f3		bra $9536			bra 	_NSNormaliseLoop
.9543					_NSNExit:
.9543	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9545	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9546					AssignNumber:
.9546	5a		phy				phy
.9547	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.954a	85 36		sta $36				sta 	zTemp0
.954c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.954f	85 37		sta $37				sta 	zTemp0+1
.9551	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9554	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9556	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9559	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.955b	c9 08		cmp #$08			cmp 	#NSTFloat
.955d	f0 2a		beq $9589			beq 	_ANFloat
.955f	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9562	f0 05		beq $9569			beq		_ANNotFloat
.9564	e8		inx				inx
.9565	20 96 94	jsr $9496			jsr 	FloatIntegerPart 			; make it an integer
.9568	ca		dex				dex
.9569					_ANNotFloat:
.9569	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.956c	29 03		and #$03			and 	#3
.956e	d0 05		bne $9575			bne 	_ANByteWord
.9570	20 95 95	jsr $9595			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9573	80 1e		bra $9593			bra 	_ANExit
.9575					_ANByteWord:
.9575	48		pha				pha 								; save count
.9576	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9579	92 36		sta ($36)			sta 	(zTemp0)
.957b	68		pla				pla
.957c	c9 01		cmp #$01			cmp	 	#1
.957e	f0 13		beq $9593			beq 	_ANExit
.9580	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9583	a0 01		ldy #$01			ldy 	#1
.9585	91 36		sta ($36),y			sta 	(zTemp0),y
.9587	80 0a		bra $9593			bra 	_ANExit
.9589					_ANFloat:
.9589	20 95 95	jsr $9595			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.958c	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.958f	a0 04		ldy #$04			ldy 	#4
.9591	91 36		sta ($36),y			sta 	(zTemp0),y
.9593					_ANExit:
.9593	7a		ply				ply
.9594	60		rts				rts
.9595					_ANCopy4PackSign:
.9595	a0 03		ldy #$03			ldy 	#3
.9597	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.959a	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.959c	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.959f	91 36		sta ($36),y			sta 	(zTemp0),y
.95a1	88		dey				dey
.95a2	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.95a5	91 36		sta ($36),y			sta 	(zTemp0),y
.95a7	88		dey				dey
.95a8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ab	91 36		sta ($36),y			sta 	(zTemp0),y
.95ad	88		dey				dey
.95ae	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95b1	91 36		sta ($36),y			sta 	(zTemp0),y
.95b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.95b4					AssignString:
.95b4	5a		phy				phy
.95b5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95b8	85 38		sta $38				sta 	zTemp1
.95ba	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95bd	85 39		sta $39				sta 	zTemp1+1
.95bf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95c2	85 36		sta $36				sta 	zTemp0
.95c4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95c7	85 37		sta $37				sta 	zTemp0+1
.95c9	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.95cd	f0 23		beq $95f2			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95cf	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95d0	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95d2	e9 02		sbc #$02			sbc 	#2
.95d4	85 3c		sta $3c				sta 	zsTemp
.95d6	a0 01		ldy #$01			ldy 	#1
.95d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.95da	e9 00		sbc #$00			sbc 	#0
.95dc	85 3d		sta $3d				sta 	zsTemp+1
.95de	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95e0					_ASGetLength:
.95e0	c8		iny				iny
.95e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.95e3	d0 fb		bne $95e0			bne 	_ASGetLength
.95e5	98		tya				tya 								; is this length <= current length
.95e6	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95e8	90 20		bcc $960a			bcc 	_ASCopyString
.95ea	f0 1e		beq $960a			beq 	_ASCopyString
.95ec	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95ee	a0 01		ldy #$01			ldy 	#1
.95f0	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95f2					_ASNewStringRequired:
.95f2	e8		inx				inx 								; concrete the new string.
.95f3	20 ea a2	jsr $a2ea			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95f6	ca		dex				dex
.95f7	18		clc				clc
.95f8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95fb	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95fd	92 36		sta ($36)			sta 	(zTemp0)
.95ff	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9602	69 00		adc #$00			adc 	#0
.9604	a0 01		ldy #$01			ldy 	#1
.9606	91 36		sta ($36),y			sta 	(zTemp0),y
.9608	80 0d		bra $9617			bra 	_ASExit
.960a					_ASCopyString:
.960a	a0 00		ldy #$00			ldy 	#0
.960c					_ASCopyLoop:
.960c	b1 38		lda ($38),y			lda 	(zTemp1),y
.960e	c8		iny				iny
.960f	c8		iny				iny
.9610	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9612	88		dey				dey
.9613	c9 00		cmp #$00			cmp 	#0
.9615	d0 f5		bne $960c			bne 	_ASCopyLoop
.9617					_ASExit:
.9617	7a		ply				ply
.9618	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9619					DereferenceTopTwo:
.9619	e8		inx				inx
.961a	20 1e 96	jsr $961e			jsr 	Dereference 				; deref x+1
.961d	ca		dex				dex  								; falls through to deref x
.961e					Dereference:
.961e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9621	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9623	f0 57		beq $967c			beq 	_DRFExit 					; not a reference
.9625	5a		phy				phy
.9626	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9629	85 36		sta $36				sta 	zTemp0
.962b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.962e	85 37		sta $37				sta 	zTemp0+1
.9630	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9633	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9635	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9638	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.963b	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.963d	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.963f	f0 0f		beq $9650			beq 	_DRFDereferenceTwo
.9641	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9643	f0 39		beq $967e			beq 	_DRFFull
.9645	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9648	29 03		and #$03			and 	#3
.964a	f0 32		beq $967e			beq 	_DRFFull 					; the whole word
.964c	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.964e	f0 07		beq $9657			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9650					_DRFDereferenceTwo:
.9650	a0 01		ldy #$01			ldy 	#1
.9652	b1 36		lda ($36),y			lda 	(zTemp0),y
.9654	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9657					_DRFClear23:
.9657	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.965a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.965d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9660	29 18		and #$18			and 	#NSBTypeMask
.9662	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9665	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9667	d0 12		bne $967b			bne 	_DRFNotString
.9669	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.966c	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.966f	d0 0a		bne $967b			bne 	_DRFNotString
.9671	a9 7d		lda #$7d			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9673	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9676	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.9678	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.967b					_DRFNotString
.967b	7a		ply				ply 								; restore Y and exit
.967c					_DRFExit:
.967c	60		rts				rts
.967d					_DRFNullString:
>967d	00						.byte 	0
.967e					_DRFFull:
.967e	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9680	b1 36		lda ($36),y			lda 	(zTemp0),y
.9682	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9685	c8		iny				iny
.9686	b1 36		lda ($36),y			lda 	(zTemp0),y
.9688	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.968b	c8		iny				iny
.968c	b1 36		lda ($36),y			lda 	(zTemp0),y
.968e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9691	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9694	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9697	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9699	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.969c	f0 06		beq $96a4			beq 	_DRFNoExponent
.969e	c8		iny				iny 								; if not, read the exponent as well.
.969f	b1 36		lda ($36),y			lda 	(zTemp0),y
.96a1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.96a4					_DRFNoExponent:
.96a4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.96a7	10 0d		bpl $96b6			bpl 	_DRFExit2 					; if not, then exit.
.96a9	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.96ab	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.96b1	09 80		ora #$80			ora 	#NSBIsNegative
.96b3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96b6					_DRFExit2:
.96b6	7a		ply				ply
.96b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96b8					EncodeNumberStart:
.96b8	38		sec				sec
.96b9	80 01		bra $96bc			bra 	EncodeNumberContinue+1
.96bb					EncodeNumberContinue:
.96bb	18		clc				clc
.96bc					EncodeNumber:
.96bc	08		php				php 								; save reset.
.96bd	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96bf	f0 12		beq $96d3			beq 	_ENIsOkay
.96c1	c9 30		cmp #$30			cmp 	#"0"
.96c3	90 04		bcc $96c9			bcc 	_ENBadNumber
.96c5	c9 3a		cmp #$3a			cmp 	#"9"+1
.96c7	90 0a		bcc $96d3			bcc 	_ENIsOkay
.96c9					_ENBadNumber:
.96c9	28		plp				plp 								; throw saved reset
.96ca	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96cd	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96cf	f0 7e		beq $974f			beq 	_ENConstructFinal
.96d1					_ENFail:
.96d1	18		clc				clc 								; not allowed
.96d2	60		rts				rts
.96d3					_ENIsOkay:
.96d3	28		plp				plp 								; are we restarting
.96d4	90 15		bcc $96eb			bcc 	_ENNoRestart
.96d6					_ENStartEncode:
.96d6	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96d8	f0 0c		beq $96e6			beq 	_ENFirstDP
.96da	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96dc	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.96df	a9 01		lda #$01			lda 	#ESTA_Low
.96e1					_ENExitChange:
.96e1	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96e4	38		sec				sec
.96e5	60		rts				rts
.96e6					_ENFirstDP:
.96e6	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; clear integer part
.96e9	80 3f		bra $972a			bra 	_ESTASwitchFloat			; go straight to float and exi
.96eb					_ENNoRestart:
.96eb	48		pha				pha 								; save on stack.
.96ec	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96ef	c9 01		cmp #$01			cmp 	#ESTA_Low
.96f1	f0 09		beq $96fc			beq  	_ESTALowState
.96f3	c9 02		cmp #$02			cmp 	#ESTA_High
.96f5	f0 29		beq $9720			beq 	_ESTAHighState
.96f7	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96f9	f0 3b		beq $9736			beq 	_ESTADecimalState
>96fb	db						.byte 	$DB 						; causes a break in the emulator
.96fc					_ESTALowState:
.96fc	68		pla				pla 								; get value back
.96fd	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96ff	f0 29		beq $972a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9701	29 0f		and #$0f			and 	#15 						; make digit
.9703	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9706	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9709	0a		asl a				asl 	a
.970a	0a		asl a				asl 	a
.970b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.970e	0a		asl a				asl 	a
.970f	6d 86 04	adc $0486			adc 	DigitTemp
.9712	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9715	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9717	90 05		bcc $971e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9719	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.971b	8d 85 04	sta $0485			sta 	EncodeState
.971e					_ESTANoSwitch:
.971e	38		sec				sec
.971f	60		rts				rts
.9720					_ESTAHighState:
.9720	68		pla				pla 								; get value back
.9721	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9723	f0 05		beq $972a			beq 	_ESTASwitchFloat
.9725	20 89 97	jsr $9789			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9728	38		sec				sec
.9729	60		rts				rts
.972a					_ESTASwitchFloat:
.972a	9c 87 04	stz $0487			stz 	DecimalCount
.972d	e8		inx				inx 								; zero the decimal additive.
.972e	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.9731	ca		dex				dex
.9732	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9734	80 ab		bra $96e1			bra 	_ENExitChange
.9736					_ESTADecimalState:
.9736	68		pla				pla 								; digit.
.9737	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9739	f0 96		beq $96d1			beq 	_ENFail
.973b	e8		inx				inx 								; put digit into fractional part of X+1
.973c	20 89 97	jsr $9789			jsr 	ESTAShiftDigitIntoMantissa
.973f	ca		dex				dex
.9740	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9743	ad 87 04	lda $0487			lda 	DecimalCount
.9746	c9 0b		cmp #$0b			cmp 	#11
.9748	f0 02		beq $974c			beq 	_ESTADSFail
.974a	38		sec				sec
.974b	60		rts				rts
.974c					_ESTADSFail:
.974c	4c a3 9f	jmp $9fa3			jmp 	RangeError
.974f					_ENConstructFinal:
.974f	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9752	f0 33		beq $9787			beq 	_ENCFExit 					; no decimals
.9754	5a		phy				phy
.9755	0a		asl a				asl 	a 							; x 4 and CLC
.9756	0a		asl a				asl 	a
.9757	6d 87 04	adc $0487			adc 	DecimalCount
.975a	a8		tay				tay
.975b	b9 62 9f	lda $9f62,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.975e	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9761	b9 63 9f	lda $9f63,y			lda 	DecimalScalarTable-5+1,y
.9764	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9767	b9 64 9f	lda $9f64,y			lda 	DecimalScalarTable-5+2,y
.976a	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.976d	b9 65 9f	lda $9f65,y			lda 	DecimalScalarTable-5+3,y
.9770	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9773	b9 66 9f	lda $9f66,y			lda 	DecimalScalarTable-5+4,y
.9776	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9779	a9 08		lda #$08			lda 	#NSTFloat
.977b	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.977e	7a		ply				ply
.977f	e8		inx				inx 								; multiply decimal const by decimal scalar
.9780	20 c0 94	jsr $94c0			jsr 	FloatMultiply
.9783	ca		dex				dex
.9784	20 4d 93	jsr $934d			jsr 	FloatAdd 					; add to integer part.
.9787					_ENCFExit:
.9787	18		clc				clc 								; reject the digit.
.9788	60		rts				rts
.9789					ESTAShiftDigitIntoMantissa:
.9789	29 0f		and #$0f			and 	#15 						; save digit
.978b	48		pha				pha
.978c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.978f	48		pha				pha
.9790	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9793	48		pha				pha
.9794	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9797	48		pha				pha
.9798	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.979b	48		pha				pha
.979c	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 2
.979f	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 4
.97a2	18		clc				clc 								; pop mantissa and add
.97a3	68		pla				pla
.97a4	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97a7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97aa	68		pla				pla
.97ab	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.97ae	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97b1	68		pla				pla
.97b2	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.97b5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97b8	68		pla				pla
.97b9	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97bc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97bf	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 10
.97c2	68		pla				pla 								; add digit
.97c3	18		clc				clc
.97c4	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97c7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97ca	90 0d		bcc $97d9			bcc 	_ESTASDExit
.97cc	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97cf	d0 08		bne $97d9			bne 	_ESTASDExit
.97d1	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97d4	d0 03		bne $97d9			bne 	_ESTASDExit
.97d6	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97d9					_ESTASDExit:
.97d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97da					EvaluateTerm:
.97da	b1 30		lda ($30),y			lda 	(codePtr),y
.97dc	30 18		bmi $97f6			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97de	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97e0	b0 6f		bcs $9851			bcs 	_ETVariable
.97e2	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97e4	90 6e		bcc $9854			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97e6	c9 3a		cmp #$3a			cmp 	#'9'+1
.97e8	b0 6a		bcs $9854			bcs 	_ETPuncUnary
.97ea	20 b8 96	jsr $96b8			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97ed					_ETNumber:
.97ed	c8		iny				iny 								; keep encoding until we have the numbers
.97ee	b1 30		lda ($30),y			lda 	(codePtr),y
.97f0	20 bb 96	jsr $96bb			jsr 	EncodeNumberContinue
.97f3	b0 f8		bcs $97ed			bcs 	_ETNumber 					; go back if accepted.
.97f5	60		rts				rts
.97f6					_ETCheckUnary:
.97f6	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97f8	f0 41		beq $983b			beq 	_ETString
.97fa	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97fc	f0 12		beq $9810			beq 	_ETHexConstant
.97fe	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9800	90 0b		bcc $980d			bcc 	_ETSyntaxError
.9802	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.9804	b0 07		bcs $980d			bcs 	_ETSyntaxError
.9806	da		phx				phx 								; push X on the stack
.9807	0a		asl a				asl 	a 							; put vector x 2 into X
.9808	aa		tax				tax
.9809	c8		iny				iny 								; consume unary function token
.980a	7c 02 8b	jmp ($8b02,x)			jmp 	(VectorSet0,x) 				; and do it.
.980d					_ETSyntaxError:
.980d	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.9810					_ETHexConstant:
.9810	c8		iny				iny 								; skip #
.9811	c8		iny				iny 								; skip count
.9812	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; clear result
.9815					_ETHLoop:
.9815	b1 30		lda ($30),y			lda 	(codePtr),y
.9817	c8		iny				iny 								; and consume
.9818	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.981a	f0 1e		beq $983a			beq 	_ETHExit
.981c	48		pha				pha 								; save on stack.
.981d	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 2
.9820	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 4
.9823	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 8
.9826	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 16
.9829	68		pla				pla 								; ASCII
.982a	c9 41		cmp #$41			cmp 	#'A'
.982c	90 02		bcc $9830			bcc 	_ETHNotChar
.982e	e9 07		sbc #$07			sbc 	#7
.9830					_ETHNotChar:
.9830	29 0f		and #$0f			and 	#15 						; digit now
.9832	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9835	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9838	80 db		bra $9815			bra 	_ETHLoop 					; go round.
.983a					_ETHExit:
.983a	60		rts				rts
.983b					_ETString:
.983b	c8		iny				iny 								; look at length
.983c	b1 30		lda ($30),y			lda 	(codePtr),y
.983e	48		pha				pha
.983f	c8		iny				iny 								; first character
.9840	20 0e a2	jsr $a20e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9843	68		pla				pla 								; restore count and save
.9844	85 36		sta $36				sta 	zTemp0
.9846	98		tya				tya 								; add length to Y to skip it.
.9847	18		clc				clc
.9848	65 36		adc $36				adc 	zTemp0
.984a	a8		tay				tay
.984b	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.984d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9850	60		rts				rts
.9851					_ETVariable:
.9851	4c ab 98	jmp $98ab			jmp 	VariableHandler
.9854					_ETPuncUnary:
.9854	c8		iny				iny 								; consume the unary character
.9855	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9857	f0 2d		beq $9886			beq 	_ETUnaryNegate
.9859	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.985b	f0 39		beq $9896			beq 	_ETDereference
.985d	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.985f	f0 43		beq $98a4			beq 	_ETParenthesis
.9861	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9863	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9865	f0 06		beq $986d			beq 	_ETIndirection
.9867	e6 36		inc $36				inc 	zTemp0
.9869	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.986b	d0 a0		bne $980d			bne 	_ETSyntaxError
.986d					_ETIndirection:
.986d	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.986f	1a		inc a				inc 	a
.9870	48		pha				pha
.9871	20 da 97	jsr $97da			jsr 	EvaluateTerm				; evaluate the term
.9874	20 1e 96	jsr $961e			jsr 	Dereference 				; dereference it.
.9877	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.987a	d0 07		bne $9883			bne 	_ETTypeMismatch
.987c	68		pla				pla 								; indirection 1-2
.987d	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.987f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9882	60		rts				rts
.9883					_ETTypeMismatch:
.9883	4c a8 9f	jmp $9fa8			jmp 	TypeError
.9886					_ETUnaryNegate:
.9886	20 da 97	jsr $97da			jsr 	EvaluateTerm				; evaluate the term
.9889	20 1e 96	jsr $961e			jsr 	Dereference 				; dereference it.
.988c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.988f	29 10		and #$10			and 	#NSTString
.9891	d0 f0		bne $9883			bne 	_ETTypeMismatch
.9893	4c c0 9d	jmp $9dc0			jmp 	NSMNegate  					; just toggles the sign bit.
.9896					_ETDereference:
.9896	20 da 97	jsr $97da			jsr 	EvaluateTerm				; evaluate the term
.9899	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.989c	29 20		and #$20			and 	#NSBIsReference
.989e	f0 e3		beq $9883			beq 	_ETTypeMismatch
.98a0	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.98a3	60		rts				rts
.98a4					_ETParenthesis:
.98a4	20 00 93	jsr $9300			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.98a7	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; check for )
.98aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.98ab					VariableHandler:
.98ab	b1 30		lda ($30),y			lda 	(codePtr),y
.98ad	18		clc				clc
.98ae	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98b0	85 37		sta $37				sta 	zTemp0+1
.98b2	c8		iny				iny
.98b3	b1 30		lda ($30),y			lda 	(codePtr),y
.98b5	85 36		sta $36				sta 	zTemp0
.98b7	c8		iny				iny
.98b8	18		clc				clc									; copy variable address+3 to mantissa
.98b9	69 03		adc #$03			adc 	#3
.98bb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98be	a5 37		lda $37				lda 	zTemp0+1
.98c0	69 00		adc #$00			adc 	#0
.98c2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98c5	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98c8	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98cb	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98ce	5a		phy				phy
.98cf	a0 02		ldy #$02			ldy 	#2 							; read type
.98d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d3	7a		ply				ply
.98d4	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98d6	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98d8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98db	29 04		and #$04			and 	#NSBIsArray
.98dd	d0 01		bne $98e0			bne 	_VHArray
.98df	60		rts				rts
.98e0					_VHArray:
.98e0	e8		inx				inx
.98e1	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98e4	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98e6	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98e9	b1 30		lda ($30),y			lda 	(codePtr),y
.98eb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98ed	d0 06		bne $98f5			bne 	_VHNoSecondIndex
.98ef	c8		iny				iny 								; skip the comma
.98f0	e8		inx				inx
.98f1	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98f4	ca		dex				dex
.98f5					_VHNoSecondIndex:
.98f5	ca		dex				dex 								; set X back.
.98f6	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; and check the right bracket.
.98f9	5a		phy				phy 								; save position
.98fa	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98fc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98fe	f0 6b		beq $996b			beq 	_VHBadIndex
.9900	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9903	85 3e		sta $3e				sta 	zaTemp
.9905	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9908	85 3f		sta $3f				sta 	zaTemp+1
.990a	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.990c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990e	f0 02		beq $9912			beq 	_VHHas2Mask
.9910	a9 ff		lda #$ff			lda 	#$FF
.9912					_VHHas2Mask:
.9912	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9915	f0 54		beq $996b			beq 	_VHBadIndex
.9917	0a		asl a				asl 	a 							; carry will be set if a second index
.9918	90 09		bcc $9923			bcc 	_VHCheckFirstIndex
.991a	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.991c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.991e	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9921	90 48		bcc $996b			bcc 	_VHBadIndex
.9923					_VHCheckFirstIndex:
.9923	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9925	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9927	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.992a	90 3f		bcc $996b			bcc 	_VHBadIndex
.992c	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.992e	64 37		stz $37				stz 	zTemp0+1
.9930	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9933	30 0f		bmi $9944			bmi 	_VHNoMultiply
.9935	da		phx				phx
.9936	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9939	48		pha				pha
.993a	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.993c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.993e	1a		inc a				inc 	a 							; add 1 for zero base
.993f	fa		plx				plx
.9940	20 a9 9d	jsr $9da9			jsr 	Multiply8x8 				; calculate -> Z0
.9943	fa		plx				plx
.9944					_VHNoMultiply:
.9944	18		clc				clc
.9945	a5 36		lda $36				lda 	zTemp0
.9947	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.994a	85 36		sta $36				sta 	zTemp0
.994c	a5 37		lda $37				lda 	zTemp0+1
.994e	69 00		adc #$00			adc 	#0
.9950	85 37		sta $37				sta 	zTemp0+1
.9952	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9955	20 f7 84	jsr $84f7			jsr 	ScaleByBaseType
.9958	18		clc				clc
.9959	b2 3e		lda ($3e)			lda 	(zaTemp)
.995b	65 36		adc $36				adc 	zTemp0
.995d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9960	a0 01		ldy #$01			ldy 	#1
.9962	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9964	65 37		adc $37				adc 	zTemp0+1
.9966	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9969	7a		ply				ply 								; restore position
.996a	60		rts				rts
.996b					_VHBadIndex:
.996b	a9 17		lda #$17		lda	#23
.996d	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9970					AbsUnary:
.9970	fa		plx				plx 								; restore stack pos
.9971	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; get a float or int
.9974	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9977	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.997a	29 7f		and #$7f			and 	#$7F
.997c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.997f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9980					AllocUnary:
.9980	fa		plx				plx 								; restore stack pos
.9981	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger		; get bytes required.
.9984	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9987	da		phx				phx 								; save X/Y
.9988	5a		phy				phy
.9989	8a		txa				txa 								; copy X into Y
.998a	a8		tay				tay
.998b	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.998e	aa		tax				tax
.998f	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9992	20 9f 99	jsr $999f			jsr 	AllocateXABytes 			; allocate memory
.9995	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9998	8a		txa				txa
.9999	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.999c	7a		ply				ply
.999d	fa		plx				plx
.999e	60		rts				rts
.999f					AllocateXABytes:
.999f	5a		phy				phy
.99a0	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.99a3	84 36		sty $36				sty 	zTemp0
.99a5	5a		phy				phy
.99a6	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.99a9	84 37		sty $37				sty 	zTemp0+1
.99ab	5a		phy				phy
.99ac	18		clc				clc 								; add to low memory pointer
.99ad	6d 8c 04	adc $048c			adc 	lowMemPtr
.99b0	8d 8c 04	sta $048c			sta 	lowMemPtr
.99b3	8a		txa				txa
.99b4	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99b7	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99ba	b0 2f		bcs $99eb			bcs 	CISSMemory
.99bc	20 dd 99	jsr $99dd			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99bf					_ClearMemory:
.99bf	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99c2	c5 36		cmp $36				cmp 	zTemp0
.99c4	d0 07		bne $99cd			bne 	_CMClearNext
.99c6	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99c9	c5 37		cmp $37				cmp 	zTemp0+1
.99cb	f0 0c		beq $99d9			beq 	_CMExit
.99cd					_CMClearNext:
.99cd	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99cf	92 36		sta ($36)			sta 	(zTemp0)
.99d1	e6 36		inc $36				inc 	zTemp0
.99d3	d0 ea		bne $99bf			bne 	_ClearMemory
.99d5	e6 37		inc $37				inc		zTemp0+1
.99d7	80 e6		bra $99bf			bra 	_ClearMemory
.99d9					_CMExit:
.99d9	fa		plx				plx
.99da	68		pla				pla
.99db	7a		ply				ply
.99dc	60		rts				rts
.99dd					CheckIdentifierStringSpace:
.99dd	48		pha				pha
.99de	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99e1	18		clc				clc
.99e2	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99e4	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99e7	b0 02		bcs $99eb			bcs 	CISSMemory
.99e9	68		pla				pla
.99ea	60		rts				rts
.99eb					CISSMemory:
.99eb	a9 06		lda #$06		lda	#6
.99ed	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99f0					AscUnary:
.99f0	fa		plx				plx 								; restore stack pos
.99f1	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get a string
.99f4	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99f6	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.99f9	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.99fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99fd					FracUnary:
.99fd	fa		plx				plx 								; restore stack pos
.99fe	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; get a float or int
.9a01	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9a04	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a07	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a09	f0 04		beq $9a0f			beq 	_IUZero
.9a0b	20 33 94	jsr $9433			jsr 	FloatFractionalPart
.9a0e	60		rts				rts
.9a0f					_IUZero:
.9a0f	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.9a12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a13					IntUnary:
.9a13	fa		plx				plx 								; restore stack pos
.9a14	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; get a float or int
.9a17	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9a1a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a1d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a1f	f0 03		beq $9a24			beq 	_IUExit
.9a21	20 96 94	jsr $9496			jsr 	FloatIntegerPart
.9a24					_IUExit:
.9a24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a25					LenUnary:
.9a25	fa		plx				plx 								; restore stack pos
.9a26	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get a string
.9a29	5a		phy				phy
.9a2a	a0 00		ldy #$00			ldy 	#0 							; find length
.9a2c					_LenFind:
.9a2c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a2e	f0 06		beq $9a36			beq 	_LenExit
.9a30	c8		iny				iny
.9a31	d0 f9		bne $9a2c			bne 	_LenFind
.9a33	4c a3 9f	jmp $9fa3			jmp 	RangeError 					; string > 255
.9a36					_LenExit:
.9a36	98		tya				tya
.9a37	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.9a3a	7a		ply				ply
.9a3b	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9a3e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a3f					Unary_Min:
.9a3f	a9 01		lda #$01			lda 	#1
.9a41	80 02		bra $9a45			bra 	UnaryMinMaxMain
.9a43					Unary_Max:
.9a43	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a45					UnaryMinMaxMain:
.9a45	fa		plx				plx 								; get index on number stack
.9a46	48		pha				pha 								; save comparator
.9a47	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get the first value.
.9a4a					_UMMMLoop:
.9a4a	b1 30		lda ($30),y			lda 	(codePtr),y
.9a4c	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a4e	f0 22		beq $9a72			beq 	_UMMMDone
.9a50	20 40 8d	jsr $8d40			jsr 	CheckComma 					; must be a comma
.9a53	e8		inx				inx
.9a54	20 34 9d	jsr $9d34			jsr 	EvaluateValue
.9a57	ca		dex				dex
.9a58	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a5b	e8		inx				inx
.9a5c	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a5f	e8		inx				inx
.9a60	20 09 8e	jsr $8e09			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a63	ca		dex				dex
.9a64	ca		dex				dex
.9a65	85 36		sta $36				sta 	zTemp0 						; save required result
.9a67	68		pla				pla 								; get and save comparator
.9a68	48		pha				pha
.9a69	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a6b	d0 dd		bne $9a4a			bne 	_UMMMLoop
.9a6d	20 75 9a	jsr $9a75			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a70	80 d8		bra $9a4a			bra 	_UMMMLoop
.9a72					_UMMMDone:
.9a72	68		pla				pla 								; throw the comparator
.9a73	c8		iny				iny 								; skip )
.9a74	60		rts				rts
.9a75					ExpCopyAboveDown:
.9a75	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a78	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a7b	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a7e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a81	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a84	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a87	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a8a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a8d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a90	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a93	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a96	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a9a					Unary_Not:
.9a9a	fa		plx				plx
.9a9b	20 60 9d	jsr $9d60			jsr 	EvaluateInteger 			; get integer
.9a9e	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9aa1	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; zero mantissa ?
.9aa4	f0 04		beq $9aaa			beq 	_NotZero
.9aa6	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.9aa9	60		rts				rts
.9aaa					_NotZero:
.9aaa	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.9aad					_UNBad:
.9aad	4c ad 9f	jmp $9fad			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ab0					Unary_Random:
.9ab0	fa		plx				plx
.9ab1	20 2f 9b	jsr $9b2f			jsr 	Random32Bit 				; get a random number
.9ab4	20 14 9b	jsr $9b14			jsr 	URCopyToMantissa  			; put in mantissa
.9ab7	b1 30		lda ($30),y			lda 	(codePtr),y
.9ab9	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9abb	f0 08		beq $9ac5			beq 	_URNoModulus
.9abd	e8		inx				inx
.9abe	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9ac1	ca		dex				dex
.9ac2	20 2d 8f	jsr $8f2d			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9ac5					_URNoModulus:
.9ac5	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ac8	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9acb	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9ace	60		rts				rts
.9acf					Unary_Rnd:
.9acf	fa		plx				plx
.9ad0	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; number to use.
.9ad3	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; closing bracket
.9ad6	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ad9	f0 2b		beq $9b06			beq 	_URCopySeed
.9adb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ade	10 23		bpl $9b03			bpl 	_URDontSeed
.9ae0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ae3	49 17		eor #$17			eor 	#$17
.9ae5	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ae8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9aeb	49 a5		eor #$a5			eor 	#$A5
.9aed	8d 89 04	sta $0489			sta 	RandomSeed+1
.9af0	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9af3	49 c2		eor #$c2			eor 	#$C2
.9af5	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9af8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9afb	49 9d		eor #$9d			eor 	#$9D
.9afd	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9b00	20 2f 9b	jsr $9b2f			jsr 	Random32Bit
.9b03					_URDontSeed:
.9b03	20 2f 9b	jsr $9b2f			jsr 	Random32Bit 				; generate a number.
.9b06					_URCopySeed:
.9b06	20 14 9b	jsr $9b14			jsr 	URCopyToMantissa 			; copy into mantissa
.9b09	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9b0b	8d 28 04	sta $0428			sta 	NSExponent
.9b0e	a9 08		lda #$08			lda 	#NSTFloat
.9b10	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9b13	60		rts				rts
.9b14					URCopyToMantissa:
.9b14	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b17	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b1a	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b1d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b20	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b23	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b26	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b29	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b2b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b2e	60		rts				rts
.9b2f					Random32Bit:
.9b2f	5a		phy				phy
.9b30	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b32	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b35	d0 03		bne $9b3a			bne 	_Random1
.9b37	a8		tay				tay 								; if so do it 256 times
.9b38	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b3a					_Random1:
.9b3a	0a		asl a				asl 	a 							; LSFR RNG
.9b3b	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b3e	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b41	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b44	90 02		bcc $9b48			bcc 	_Random2
.9b46	49 c5		eor #$c5			eor 	#$C5
.9b48					_Random2:
.9b48	88		dey				dey
.9b49	d0 ef		bne $9b3a			bne 	_Random1
.9b4b	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b4e	7a		ply				ply
.9b4f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b50					SgnUnary:
.9b50	fa		plx				plx 								; restore stack pos
.9b51	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; get a float or int
.9b54	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9b57	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; if zero
.9b5a	f0 10		beq $9b6c			beq 	_SGZero  					; return Int Zero
.9b5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b5f	48		pha				pha
.9b60	a9 01		lda #$01			lda 	#1 							; set to 1
.9b62	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.9b65	68		pla				pla
.9b66	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b68	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b6b	60		rts				rts
.9b6c	20 14 9e	jsr $9e14	_SGZero:jsr 	NSMSetZero
.9b6f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b70					ValUnary:
.9b70	fa		plx				plx 								; restore stack pos
.9b71	20 86 9b	jsr $9b86			jsr 	ValMainCode 				; do the main val() code
.9b74	b0 01		bcs $9b77			bcs 	_VUError 					; couldn't convert
.9b76	60		rts				rts
.9b77					_VUError:
.9b77	4c a8 9f	jmp $9fa8			jmp 	TypeError
.9b7a					IsValUnary:
.9b7a	fa		plx				plx 								; restore stack pos
.9b7b	20 86 9b	jsr $9b86			jsr 	ValMainCode 				; do the main val() code
.9b7e	b0 03		bcs $9b83			bcs 	_VUBad
.9b80	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.9b83					_VUBad:
.9b83	4c ca 8d	jmp $8dca			jmp 	ReturnFalse
.9b86					ValMainCode:
.9b86	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get a string
.9b89	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; check right bracket present
.9b8c	5a		phy				phy
.9b8d	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b8f	f0 17		beq $9ba8			beq 	_VMCFail2
.9b91	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b93	48		pha				pha 								; save first character
.9b94	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b96	d0 01		bne $9b99			bne 	_VMCStart
.9b98	c8		iny				iny 								; skip over -
.9b99					_VMCStart:
.9b99	38		sec				sec 								; initialise first time round.
.9b9a					_VMCNext:
.9b9a	c8		iny				iny 								; pre-increment
.9b9b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b9d	f0 0c		beq $9bab			beq 	_VMCSuccess 				; successful.
.9b9f	20 bc 96	jsr $96bc			jsr 	EncodeNumber 				; send it to the number-builder
.9ba2	90 03		bcc $9ba7			bcc 	_VMCFail 					; if failed, give up.
.9ba4	18		clc				clc 								; next time round, countinue
.9ba5	80 f3		bra $9b9a			bra 	_VMCNext
.9ba7					_VMCFail:
.9ba7	68		pla				pla
.9ba8					_VMCFail2:
.9ba8	7a		ply				ply
.9ba9	38		sec				sec
.9baa	60		rts				rts
.9bab					_VMCSuccess:
.9bab	a9 00		lda #$00			lda 	#0 							; construct final
.9bad	20 bc 96	jsr $96bc			jsr 	EncodeNumber
.9bb0	68		pla				pla
.9bb1	c9 2d		cmp #$2d			cmp 	#"-"
.9bb3	d0 03		bne $9bb8			bne 	_VMCNotNegative
.9bb5	20 c0 9d	jsr $9dc0			jsr		NSMNegate
.9bb8					_VMCNotNegative:
.9bb8	7a		ply				ply
.9bb9	18		clc				clc
.9bba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bbb					ChrUnary:
.9bbb	fa		plx				plx 								; restore stack pos
.9bbc	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger			; get value
.9bbf	48		pha				pha
.9bc0	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9bc3	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bc5	20 6b a3	jsr $a36b			jsr 	StringTempAllocate
.9bc8	68		pla				pla 								; write number to it
.9bc9	20 a9 a3	jsr $a3a9			jsr 	StringTempWrite
.9bcc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bcd					SpcUnary:
.9bcd	fa		plx				plx 								; restore stack pos
.9bce	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger			; get value
.9bd1	5a		phy				phy
.9bd2	48		pha				pha 								; save count
.9bd3	20 6b a3	jsr $a36b			jsr 	StringTempAllocate
.9bd6	7a		ply				ply 								; to do count in Y
.9bd7					_SpcLoop:
.9bd7	c0 00		cpy #$00			cpy 	#0
.9bd9	f0 08		beq $9be3			beq 	_SpcExit
.9bdb	a9 20		lda #$20			lda 	#32
.9bdd	20 a9 a3	jsr $a3a9			jsr 	StringTempWrite
.9be0	88		dey				dey
.9be1	80 f4		bra $9bd7			bra 	_SPCLoop
.9be3					_SpcExit:
.9be3	7a		ply				ply
.9be4	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9be7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9be8					Unary_Str:
.9be8	fa		plx				plx
.9be9	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber  			; get number
.9bec	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; closing bracket
.9bef	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bf1	20 0a 9c	jsr $9c0a			jsr 	ConvertNumberToString 		; do the conversion.
.9bf4	a9 21		lda #$21			lda		#33 						; create buffer
.9bf6	20 6b a3	jsr $a36b			jsr 	StringTempAllocate 			; allocate memory
.9bf9	da		phx				phx
.9bfa	a2 00		ldx #$00			ldx 	#0
.9bfc					_USCopy:
.9bfc	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9bff	20 a9 a3	jsr $a3a9			jsr 	StringTempWrite
.9c02	e8		inx				inx
.9c03	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9c06	d0 f4		bne $9bfc			bne 	_USCopy
.9c08	fa		plx				plx
.9c09	60		rts				rts
.9c0a					ConvertNumberToString:
.9c0a	5a		phy				phy 								; save code position
.9c0b	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c0e	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c11	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c14	10 0a		bpl $9c20			bpl 	_CNTSNotNegative
.9c16	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c18	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c1b	a9 2d		lda #$2d			lda 	#"-"
.9c1d	20 86 9c	jsr $9c86			jsr 	WriteDecimalBuffer
.9c20					_CNTSNotNegative:
.9c20	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c23	f0 15		beq $9c3a			beq 	_CNTSNotFloat
.9c25	e8		inx				inx 								; round up
.9c26	a9 01		lda #$01			lda 	#1
.9c28	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.9c2b	ca		dex				dex
.9c2c	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c2f	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c32	a9 08		lda #$08			lda 	#NSTFloat
.9c34	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c37	20 4d 93	jsr $934d			jsr 	FloatAdd
.9c3a					_CNTSNotFloat:
.9c3a	20 68 9c	jsr $9c68			jsr 	MakePlusTwoString
.9c3d	20 33 94	jsr $9433			jsr 	FloatFractionalPart 		; get the fractional part
.9c40	20 f7 94	jsr $94f7			jsr 	NSNormalise					; normalise , exit if zero
.9c43	f0 21		beq $9c66			beq 	_CNTSExit
.9c45	a9 2e		lda #$2e			lda 	#"."
.9c47	20 86 9c	jsr $9c86			jsr 	WriteDecimalBuffer 			; write decimal place
.9c4a					_CNTSDecimal:
.9c4a	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c4d	30 17		bmi $9c66			bmi 	_CNTSExit
.9c4f	e8		inx				inx 								; x 10.0
.9c50	a9 0a		lda #$0a			lda 	#10
.9c52	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.9c55	a9 08		lda #$08			lda 	#NSTFloat
.9c57	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c5a	ca		dex				dex
.9c5b	20 c0 94	jsr $94c0			jsr 	FloatMultiply
.9c5e	20 68 9c	jsr $9c68			jsr 	MakePlusTwoString
.9c61	20 33 94	jsr $9433			jsr 	FloatFractionalPart 		; get the fractional part
.9c64	80 e4		bra $9c4a			bra 	_CNTSDecimal 				; keep going.
.9c66					_CNTSExit:
.9c66	7a		ply				ply
.9c67	60		rts				rts
.9c68					MakePlusTwoString:
.9c68	da		phx				phx
.9c69	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c6c	e8		inx				inx 								; access it
.9c6d	e8		inx				inx
.9c6e	20 96 94	jsr $9496			jsr 	FloatIntegerPart 			; make it an integer
.9c71	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c73	20 78 92	jsr $9278			jsr 	ConvertInt32
.9c76	a2 00		ldx #$00			ldx	 	#0
.9c78					_MPTSCopy:
.9c78	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c7b	20 86 9c	jsr $9c86			jsr 	WriteDecimalBuffer
.9c7e	e8		inx				inx
.9c7f	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c82	d0 f4		bne $9c78			bne 	_MPTSCopy
.9c84	fa		plx				plx
.9c85	60		rts				rts
.9c86					WriteDecimalBuffer:
.9c86	da		phx				phx
.9c87	ae 95 04	ldx $0495			ldx 	dbOffset
.9c8a	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c8d	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c90	ee 95 04	inc $0495			inc 	dbOffset
.9c93	fa		plx				plx
.9c94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c95					Unary_Left:
.9c95	fa		plx				plx
.9c96	18		clc				clc 								; only one parameter
.9c97	20 0c 9d	jsr $9d0c			jsr 	SubstringInitial 			; set up.
.9c9a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c9d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ca0	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ca3	80 2c		bra $9cd1			bra 	SubstringMain
.9ca5					Unary_Right:
.9ca5	fa		plx				plx
.9ca6	18		clc				clc 								; only one parameter
.9ca7	20 0c 9d	jsr $9d0c			jsr 	SubstringInitial 			; set up.
.9caa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9cad	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cb0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9cb3	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cb6	b0 02		bcs $9cba			bcs 	_URNotUnderflow
.9cb8	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9cba					_URNotUnderFlow:
.9cba	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9cbd	80 12		bra $9cd1			bra 	SubStringMain
.9cbf					Unary_Mid:
.9cbf	fa		plx				plx
.9cc0	38		sec				sec 								; two parameters
.9cc1	20 0c 9d	jsr $9d0c			jsr 	SubstringInitial 			; set up.
.9cc4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cc7	f0 05		beq $9cce			beq 	_UMError
.9cc9	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ccc	80 03		bra $9cd1			bra 	SubStringMain
.9cce					_UMError:
.9cce	4c ad 9f	jmp $9fad			jmp 	ArgumentError
.9cd1					SubStringMain:
.9cd1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cd4	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cd7	b0 2d		bcs $9d06			bcs 	_SSMNull 					; if so, return an empty string.
.9cd9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cdc	f0 28		beq $9d06			beq 	_SSMNull 					; return empty string.
.9cde	18		clc				clc 								; add the offset +1 to the address and
.9cdf	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9ce2	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ce5	85 36		sta $36				sta 	zTemp0
.9ce7	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cea	69 00		adc #$00			adc 	#0
.9cec	85 37		sta $37				sta 	zTemp0+1
.9cee					_SSMNoCarry:
.9cee	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cf1	20 6b a3	jsr $a36b			jsr 	StringTempAllocate 			; allocate that many characters
.9cf4	5a		phy				phy 								; save Y
.9cf5	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cf7					_SSMCopy:
.9cf7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cf9	f0 09		beq $9d04			beq 	_SSMEString 				; no more to copy
.9cfb	20 a9 a3	jsr $a3a9			jsr 	StringTempWrite 			; and write it out.
.9cfe	c8		iny				iny
.9cff	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d02	d0 f3		bne $9cf7			bne 	_SSMCopy
.9d04					_SSMEString:
.9d04	7a		ply				ply
.9d05					_SSMExit:
.9d05	60		rts				rts
.9d06					_SSMNull:
.9d06	a9 00		lda #$00			lda 	#0
.9d08	20 6b a3	jsr $a36b			jsr 	StringTempAllocate
.9d0b	60		rts				rts
.9d0c					SubstringInitial:
.9d0c	da		phx				phx 								; save initial stack position
.9d0d	08		php				php 								; save carry on stack indicating 2 parameters
.9d0e	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get a string
.9d11	5a		phy				phy 								; calculate length to exponent.
.9d12	a0 ff		ldy #$ff			ldy 	#$FF
.9d14					_SIFindLength:
.9d14	c8		iny				iny
.9d15	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d17	d0 fb		bne $9d14			bne 	_SIFindLength
.9d19	98		tya				tya
.9d1a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d1d	7a		ply				ply
.9d1e	e8		inx				inx
.9d1f	20 40 8d	jsr $8d40			jsr 	CheckComma 					; comma next
.9d22	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get next parameter
.9d25	28		plp				plp 								; is it the last parameter ?
.9d26	90 07		bcc $9d2f			bcc 	_SSIExit 					; if so, exit.
.9d28	e8		inx				inx
.9d29	20 40 8d	jsr $8d40			jsr 	CheckComma 					; comma next
.9d2c	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get last parameter
.9d2f					_SSIExit:
.9d2f	fa		plx				plx
.9d30	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; check closing bracket
.9d33	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d34					EvaluateValue:
.9d34	48		pha				pha
.9d35	20 00 93	jsr $9300			jsr		EvaluateExpression 			; expression
.9d38	20 1e 96	jsr $961e			jsr 	Dereference					; derefernce it
.9d3b	68		pla				pla
.9d3c	60		rts				rts
.9d3d					EvaluateNumber:
.9d3d	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get a value
.9d40	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d43	29 10		and #$10			and 	#NSBIsString
.9d45	d0 16		bne $9d5d			bne 	HelperTypeError
.9d47	60		rts				rts
.9d48					EvaluateString:
.9d48	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get a value
.9d4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d4e	29 10		and #$10			and 	#NSBIsString
.9d50	f0 0b		beq $9d5d			beq 	HelperTypeError
.9d52					CopyAddressToTemp0:
.9d52	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d55	85 36		sta $36				sta 	zTemp0
.9d57	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d5a	85 37		sta $37				sta 	zTemp0+1
.9d5c	60		rts				rts
.9d5d					HelperTypeError:
.9d5d	4c a8 9f	jmp $9fa8			jmp 	TypeError
.9d60					EvaluateInteger:
.9d60	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber
.9d63	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d66	d0 0a		bne $9d72			bne 	HelperValueError 			; if not, it's a float.
.9d68	60		rts				rts
.9d69					EvaluateUnsignedInteger:
.9d69	20 60 9d	jsr $9d60			jsr 	EvaluateInteger 			; check integer is +ve
.9d6c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d6f	30 01		bmi $9d72			bmi 	HelperValueError
.9d71	60		rts				rts
.9d72					HelperValueError:
.9d72	4c ad 9f	jmp $9fad			jmp 	ArgumentError
.9d75					Evaluate16BitInteger:
.9d75	20 69 9d	jsr $9d69			jsr	 	EvaluateUnsignedInteger		; get integer
.9d78	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d7b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d7e	d0 f2		bne $9d72			bne 	HelperValueError
.9d80	60		rts				rts
.9d81					Evaluate16BitIntegerSigned:
.9d81	20 60 9d	jsr $9d60			jsr	 	EvaluateInteger				; get integer
.9d84	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d87	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d8a	d0 e6		bne $9d72			bne 	HelperValueError
.9d8c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d8f	10 03		bpl $9d94			bpl 	_EISNotSigned
.9d91	20 c9 9d	jsr $9dc9			jsr 	NSMNegateMantissa
.9d94					_EISNotSigned:
.9d94	60		rts				rts
.9d95					Evaluate8BitInteger:
.9d95	20 69 9d	jsr $9d69			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d98	d0 d8		bne $9d72			bne 	HelperValueError
.9d9a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d9d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9da0	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9da3	d0 cd		bne $9d72			bne 	HelperValueError
.9da5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9da8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9da9					Multiply8x8:
.9da9	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9daa	85 36		sta $36			  	sta 	zTemp0
.9dac	86 37		stx $37				stx 	zTemp0+1
.9dae	a9 00		lda #$00			lda 	#0
.9db0	a2 08		ldx #$08			ldx 	#8
.9db2					_M88Loop:
.9db2	90 03		bcc $9db7			bcc 	_M88NoAdd
.9db4	18		clc				clc
.9db5	65 37		adc $37				adc 	zTemp0+1
.9db7					_M88NoAdd:
.9db7	6a		ror a				ror 	a
.9db8	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9dba	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9dbb	d0 f5		bne $9db2			bne 	_M88Loop
.9dbd	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9dbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dc0					NSMNegate:
.9dc0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dc3	49 80		eor #$80			eor 	#NSBIsNegative
.9dc5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dc8	60		rts				rts
.9dc9					NSMNegateMantissa:
.9dc9	38		sec				sec
.9dca	a9 00		lda #$00			lda 	#0
.9dcc	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9dcf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dd2	a9 00		lda #$00			lda 	#0
.9dd4	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dd7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dda	a9 00		lda #$00			lda 	#0
.9ddc	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9ddf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9de2	a9 00		lda #$00			lda 	#0
.9de4	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9de7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dea	60		rts				rts
.9deb					NSMShiftUpTwo:
.9deb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dee	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9df1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9df4	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9df7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9dfa	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9dfd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e00	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e03	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e06	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e09	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e0c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e0f	60		rts				rts
.9e10					NSMSetZeroMantissaOnly:
.9e10	a9 00		lda #$00			lda 	#0
.9e12	80 08		bra $9e1c			bra 	NSMSetMantissa
.9e14					NSMSetZero:
.9e14	a9 00		lda #$00			lda 	#0
.9e16					NSMSetByte:
.9e16	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e19	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e1c					NSMSetMantissa:
.9e1c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e1f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e22	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e25	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e28	60		rts				rts
.9e29					NSMShiftLeft:
.9e29	18		clc				clc
.9e2a					NSMRotateLeft:
.9e2a	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e2d	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e30	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e33	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e36	60		rts				rts
.9e37					NSMShiftRight:
.9e37	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e3a	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e3d	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e40	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e43	60		rts				rts
.9e44					NSMIsZero:
.9e44	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e47	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e4a	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e4d	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e51					Assemble_ora:
.9e51	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e54	01					.byte $01
.9e55					Assemble_and:
.9e55	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e58	21					.byte $21
.9e59					Assemble_eor:
.9e59	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e5c	41					.byte $41
.9e5d					Assemble_adc:
.9e5d	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e60	61					.byte $61
.9e61					Assemble_sta:
.9e61	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e64	81					.byte $81
.9e65					Assemble_lda:
.9e65	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e68	a1					.byte $a1
.9e69					Assemble_cmp:
.9e69	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e6c	c1					.byte $c1
.9e6d					Assemble_sbc:
.9e6d	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e70	e1					.byte $e1
.9e71					Assemble_asl:
.9e71	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e74	02					.byte $02
>9e75	75					.byte $75
.9e76					Assemble_rol:
.9e76	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e79	22					.byte $22
>9e7a	75					.byte $75
.9e7b					Assemble_lsr:
.9e7b	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e7e	42					.byte $42
>9e7f	75					.byte $75
.9e80					Assemble_ror:
.9e80	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e83	62					.byte $62
>9e84	75					.byte $75
.9e85					Assemble_stx:
.9e85	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e88	82					.byte $82
>9e89	50					.byte $50
.9e8a					Assemble_ldx:
.9e8a	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e8d	a2					.byte $a2
>9e8e	d0					.byte $d0
.9e8f					Assemble_dec:
.9e8f	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e92	c2					.byte $c2
>9e93	55					.byte $55
.9e94					Assemble_inc:
.9e94	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e97	e2					.byte $e2
>9e98	55					.byte $55
.9e99					Assemble_stz:
.9e99	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e9c	60					.byte $60
>9e9d	44					.byte $44
.9e9e					Assemble_bit:
.9e9e	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea1	20					.byte $20
>9ea2	55					.byte $55
.9ea3					Assemble_sty:
.9ea3	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea6	80					.byte $80
>9ea7	54					.byte $54
.9ea8					Assemble_ldy:
.9ea8	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eab	a0					.byte $a0
>9eac	d5					.byte $d5
.9ead					Assemble_cpy:
.9ead	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eb0	c0					.byte $c0
>9eb1	d4					.byte $d4
.9eb2					Assemble_cpx:
.9eb2	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eb5	e0					.byte $e0
>9eb6	d0					.byte $d0
.9eb7					Assemble_tsb:
.9eb7	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eba	00					.byte $00
>9ebb	50					.byte $50
.9ebc					Assemble_trb:
.9ebc	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ebf	10					.byte $10
>9ec0	50					.byte $50
.9ec1					Assemble_jsr:
.9ec1	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ec4	14					.byte $14
>9ec5	10					.byte $10
.9ec6					Assemble_jmp:
.9ec6	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ec9	40					.byte $40
>9eca	10					.byte $10
.9ecb					Assemble_bpl:
.9ecb	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ece	10					.byte $10
.9ecf					Assemble_bmi:
.9ecf	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed2	30					.byte $30
.9ed3					Assemble_bvc:
.9ed3	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed6	50					.byte $50
.9ed7					Assemble_bvs:
.9ed7	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eda	70					.byte $70
.9edb					Assemble_bcc:
.9edb	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ede	90					.byte $90
.9edf					Assemble_bcs:
.9edf	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ee2	b0					.byte $b0
.9ee3					Assemble_bne:
.9ee3	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ee6	d0					.byte $d0
.9ee7					Assemble_beq:
.9ee7	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eea	f0					.byte $f0
.9eeb					Assemble_bra:
.9eeb	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eee	80					.byte $80
.9eef					Assemble_brk:
.9eef	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef2	00					.byte $00
.9ef3					Assemble_php:
.9ef3	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef6	08					.byte $08
.9ef7					Assemble_clc:
.9ef7	20 14 81	jsr $8114		jsr	AssembleGroup4
>9efa	18					.byte $18
.9efb					Assemble_plp:
.9efb	20 14 81	jsr $8114		jsr	AssembleGroup4
>9efe	28					.byte $28
.9eff					Assemble_sec:
.9eff	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f02	38					.byte $38
.9f03					Assemble_rti:
.9f03	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f06	40					.byte $40
.9f07					Assemble_pha:
.9f07	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f0a	48					.byte $48
.9f0b					Assemble_cli:
.9f0b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f0e	58					.byte $58
.9f0f					Assemble_phy:
.9f0f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f12	5a					.byte $5a
.9f13					Assemble_rts:
.9f13	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f16	60					.byte $60
.9f17					Assemble_pla:
.9f17	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f1a	68					.byte $68
.9f1b					Assemble_sei:
.9f1b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f1e	78					.byte $78
.9f1f					Assemble_ply:
.9f1f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f22	7a					.byte $7a
.9f23					Assemble_dey:
.9f23	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f26	88					.byte $88
.9f27					Assemble_txa:
.9f27	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f2a	8a					.byte $8a
.9f2b					Assemble_tya:
.9f2b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f2e	98					.byte $98
.9f2f					Assemble_txs:
.9f2f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f32	9a					.byte $9a
.9f33					Assemble_tay:
.9f33	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f36	a8					.byte $a8
.9f37					Assemble_tax:
.9f37	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f3a	aa					.byte $aa
.9f3b					Assemble_clv:
.9f3b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f3e	b8					.byte $b8
.9f3f					Assemble_tsx:
.9f3f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f42	ba					.byte $ba
.9f43					Assemble_iny:
.9f43	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f46	c8					.byte $c8
.9f47					Assemble_dex:
.9f47	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f4a	ca					.byte $ca
.9f4b					Assemble_cld:
.9f4b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f4e	d8					.byte $d8
.9f4f					Assemble_phx:
.9f4f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f52	da					.byte $da
.9f53					Assemble_stp:
.9f53	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f56	db					.byte $db
.9f57					Assemble_inx:
.9f57	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f5a	e8					.byte $e8
.9f5b					Assemble_nop:
.9f5b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f5e	ea					.byte $ea
.9f5f					Assemble_sed:
.9f5f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f62	f8					.byte $f8
.9f63					Assemble_plx:
.9f63	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f66	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f67					DecimalScalarTable:
>9f67	66 66 66 66				.dword $66666666 ; 0.1
>9f6b	de					.byte $de
>9f6c	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f70	db					.byte $db
>9f71	4c 37 89 41				.dword $4189374c ; 0.001
>9f75	d8					.byte $d8
>9f76	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f7a	d4					.byte $d4
>9f7b	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f7f	d1					.byte $d1
>9f80	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f84	ce					.byte $ce
>9f85	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f89	ca					.byte $ca
>9f8a	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f8e	c7					.byte $c7
>9f8f	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f93	c4					.byte $c4
>9f94	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f98	c0					.byte $c0
>9f99	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f9d	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f9e					SyntaxError:
.9f9e	a9 02		lda #$02		lda	#2
.9fa0	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fa3					RangeError:
.9fa3	a9 04		lda #$04		lda	#4
.9fa5	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fa8					TypeError:
.9fa8	a9 05		lda #$05		lda	#5
.9faa	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fad					ArgumentError:
.9fad	a9 07		lda #$07		lda	#7
.9faf	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fb2					NotDoneError:
.9fb2	a9 0c		lda #$0c		lda	#12
.9fb4	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fb7					ErrorText:
>9fb7	42 72 65 61 6b 00			.text	"Break",0
>9fbd	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fc5	72 72 6f 72 00
>9fca	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fd2	20 62 79 20 7a 65 72 6f 00
>9fdb	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fe3	61 6e 67 65 00
>9fe8	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9ff0	6d 61 74 63 68 00
>9ff6	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9ffe	65 6d 6f 72 79 00
>a004	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a00c	61 72 67 75 6d 65 6e 74 00
>a015	53 74 6f 70 00				.text	"Stop",0
>a01a	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a022	6f 6f 20 6c 6f 6e 67 00
>a02a	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a032	6e 20 66 61 69 6c 65 64 00
>a03b	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a043	61 74 61 00
>a047	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a04f	65 6e 74 65 64 00
>a055	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a05d	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a069	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a071	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a07e	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a086	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a093	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a09b	68 6f 75 74 20 57 68 69 6c 65 00
>a0a6	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a0ae	68 6f 75 74 20 46 6f 72 00
>a0b7	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0bf	61 63 6b 20 66 75 6c 6c 00
>a0c8	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0d0	75 63 74 75 72 65 00
>a0d7	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0df	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0ec	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0f4	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a102	41 72 72 61 79 20 73 69			.text	"Array size",0
>a10a	7a 65 00
>a10d	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a115	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a11d	42 75 69 6c 74 20 54 68			.text "Built Thursday 17-Nov-2022. Build 3125."
>a125	75 72 73 64 61 79 20 31 37 2d 4e 6f 76 2d 32 30
>a135	32 32 2e 20 42 75 69 6c 64 20 33 31 32 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a144					MemoryDeleteLine:
.a144	20 63 a1	jsr $a163			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a147	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a149	a8		tay				tay
.a14a					_MDDLLoop:
.a14a	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a14c	92 30		sta ($30)			sta 	(codePtr)
.a14e	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a150	c5 3a		cmp $3a				cmp 	zTemp2
.a152	d0 07		bne $a15b			bne 	_MDLDLNext
.a154	a5 31		lda $31				lda 	codePtr+1
.a156	c5 3b		cmp $3b				cmp 	zTemp2+1
.a158	d0 01		bne $a15b			bne 	_MDLDLNext
.a15a					_MDDLExit:
.a15a	60		rts				rts
.a15b					_MDLDLNext:
.a15b	e6 30		inc $30				inc 	codePtr						; next byte
.a15d	d0 eb		bne $a14a			bne 	_MDDLLoop
.a15f	e6 31		inc $31				inc 	codePtr+1
.a161	80 e7		bra $a14a			bra 	_MDDLLoop
.a163					IMemoryFindEnd:
.a163	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a165	85 3a		sta $3a				sta 	0+zTemp2
.a167	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a169	85 3b		sta $3b				sta 	1+zTemp2
.a16b					_MDLFELoop:
.a16b	b2 3a		lda ($3a)			lda 	(zTemp2)
.a16d	f0 0b		beq $a17a			beq 	_MDLFEExit
.a16f	18		clc				clc
.a170	65 3a		adc $3a				adc 	zTemp2
.a172	85 3a		sta $3a				sta 	zTemp2
.a174	90 f5		bcc $a16b			bcc 	_MDLFELoop
.a176	e6 3b		inc $3b				inc 	zTemp2+1
.a178	80 f1		bra $a16b			bra 	_MDLFELoop
.a17a					_MDLFEExit:
.a17a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a17b					MemoryInsertLine:
.a17b	08		php				php
.a17c	20 63 a1	jsr $a163			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a17f	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a181	1a		inc a				inc 	a
.a182	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a184	b0 36		bcs $a1bc			bcs 	_MDLIError
.a186	28		plp				plp
.a187	90 08		bcc $a191			bcc 	_MDLIFound
.a189	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a18b	85 30		sta $30				sta 	codePtr
.a18d	a5 3b		lda $3b				lda 	zTemp2+1
.a18f	85 31		sta $31				sta 	codePtr+1
.a191					_MDLIFound:
.a191	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a194	a8		tay				tay
.a195					_MDLIInsert:
.a195	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a197	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a199	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a19b	c5 3a		cmp $3a				cmp 	zTemp2
.a19d	d0 06		bne $a1a5			bne 	_MDLINext
.a19f	a5 31		lda $31				lda 	codePtr+1
.a1a1	c5 3b		cmp $3b				cmp 	zTemp2+1
.a1a3	f0 0a		beq $a1af			beq 	_MDLIHaveSpace
.a1a5					_MDLINext:
.a1a5	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a1a7	d0 02		bne $a1ab			bne 	_MDLINoBorrow
.a1a9	c6 3b		dec $3b				dec 	zTemp2+1
.a1ab					_MDLINoBorrow:
.a1ab	c6 3a		dec $3a				dec 	zTemp2
.a1ad	80 e6		bra $a195			bra 	_MDLIInsert
.a1af					_MDLIHaveSpace:
.a1af	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a1b2	88		dey				dey 								; from offset-1 to 0
.a1b3					_MDLICopy:
.a1b3	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a1b6	91 30		sta ($30),y			sta 	(codePtr),y
.a1b8	88		dey				dey
.a1b9	10 f8		bpl $a1b3			bpl 	_MDLICopy
.a1bb	60		rts				rts
.a1bc					_MDLIError:
.a1bc	a9 06		lda #$06		lda	#6
.a1be	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a1c1					MDLAppendLine:
.a1c1	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1c3	85 36		sta $36				sta 	zTemp0
.a1c5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1c7	85 38		sta $38				sta 	0+zTemp1
.a1c9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1cb	85 39		sta $39				sta 	1+zTemp1
.a1cd	b2 38		lda ($38)			lda 	(zTemp1)
.a1cf	d0 0a		bne $a1db			bne 	_MDLANoInitialise
.a1d1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1d3	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1d6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1d8	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1db					_MDLANoInitialise:
.a1db	18		clc				clc
.a1dc	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1df	85 38		sta $38				sta 	zTemp1
.a1e1	72 36		adc ($36)			adc 	(zTemp0)
.a1e3	8d 2b 06	sta $062b			sta 	AppendPointer
.a1e6	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1e9	85 39		sta $39				sta 	zTemp1+1
.a1eb	69 00		adc #$00			adc 	#0
.a1ed	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1f0	a0 00		ldy #$00			ldy 	#0
.a1f2					_MDLACopy:
.a1f2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1f4	91 38		sta ($38),y			sta 	(zTemp1),y
.a1f6	c8		iny				iny
.a1f7	98		tya				tya
.a1f8	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1fa	d0 f6		bne $a1f2			bne 	_MDLACopy
.a1fc	a9 00		lda #$00			lda 	#0 							; end of program.
.a1fe	91 38		sta ($38),y			sta 	(zTemp1),y
.a200	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a201					MemoryNew:
.a201	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a203	85 30		sta $30				sta 	codePtr
.a205	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a207	85 31		sta $31				sta 	codePtr+1
.a209	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a20b	92 30		sta ($30)			sta 	(codePtr)
.a20d	60		rts				rts
.a20e					MemoryInline:
.a20e	98		tya				tya 								; put address into stack,x
.a20f	18		clc				clc
.a210	65 30		adc $30				adc 	codePtr
.a212	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a215	a5 31		lda $31				lda 	codePtr+1
.a217	69 00		adc #$00			adc 	#0
.a219	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a21c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a21f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a222	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a223					MemorySearch:
.a223	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a225	86 37		stx $37				stx 	zTemp0+1
.a227	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a229	85 30		sta $30				sta 	codePtr
.a22b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a22d	85 31		sta $31				sta 	codePtr+1
.a22f					_MTAXLoop:
.a22f	b2 30		lda ($30)			lda 	(codePtr)
.a231	18		clc				clc
.a232	f0 21		beq $a255			beq 	_MTAXExit 					; reached end, exit with CC.
.a234	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a236	b1 30		lda ($30),y			lda 	(codePtr),y
.a238	38		sec				sec
.a239	e5 36		sbc $36				sbc 	zTemp0
.a23b	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a23d	c8		iny				iny 								; do the MSB
.a23e	b1 30		lda ($30),y			lda 	(codePtr),y
.a240	e5 37		sbc $37				sbc 	zTemp0+1
.a242	05 38		ora $38				ora 	zTemp1
.a244	f0 0f		beq $a255			beq 	_MTAXExit	 				; found
.a246	b0 0d		bcs $a255			bcs 	_MTAXExit 					; current < required exit
.a248	18		clc				clc
.a249	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a24b	65 30		adc $30				adc 	codePtr
.a24d	85 30		sta $30				sta 	codePtr
.a24f	90 02		bcc $a253			bcc 	_CREExit
.a251	e6 31		inc $31				inc 	codePtr+1
.a253					_CREExit:
.a253	80 da		bra $a22f			bra 	_MTAXLoop
.a255					_MTAXExit:
.a255	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a256					StackPushByte:
.a256	48		pha				pha 								; save byte
.a257	a5 34		lda $34				lda 	BasicStack
.a259	d0 09		bne $a264			bne 	_SPBNoBorrow
.a25b	c6 35		dec $35				dec 	BasicStack+1
.a25d	48		pha				pha
.a25e	a5 35		lda $35				lda 	BasicStack+1
.a260	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a262	90 06		bcc $a26a			bcc 	_SPBMemory
.a264					_SPBNoBorrow:
.a264	c6 34		dec $34				dec 	BasicStack
.a266	68		pla				pla 								; get back and write
.a267	92 34		sta ($34)			sta 	(BasicStack)
.a269	60		rts				rts
.a26a					_SPBMemory:
.a26a	a9 12		lda #$12		lda	#18
.a26c	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a26f					StackPopByte:
.a26f	b2 34		lda ($34)			lda 	(BasicStack)
.a271	e6 34		inc $34				inc 	BasicStack
.a273	d0 02		bne $a277			bne 	_SPBNoCarry
.a275	e6 35		inc $35				inc 	BasicStack+1
.a277					_SPBNoCarry:
.a277	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a278					StackOpen:
.a278	48		pha				pha 								; save frame byte
.a279	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a27b	0a		asl a				asl 	a 							; claim twice this for storage
.a27c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a27e	38		sec				sec 								; so basically subtracting from
.a27f	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a281	85 34		sta $34				sta 	basicStack
.a283	b0 08		bcs $a28d			bcs 	_SONoBorrow
.a285	c6 35		dec $35				dec 	basicStack+1
.a287	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a289	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a28b	90 04		bcc $a291			bcc 	_SOMemory
.a28d					_SONoBorrow:
.a28d	68		pla				pla 								; get marker back and write at TOS
.a28e	92 34		sta ($34)			sta 	(basicStack)
.a290	60		rts				rts
.a291					_SOMemory:
.a291	a9 12		lda #$12		lda	#18
.a293	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a296					StackClose:
.a296	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a298	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a29a	0a		asl a				asl 	a 							; claim twice this.
.a29b	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a29d	85 34		sta $34				sta 	basicStack
.a29f	90 02		bcc $a2a3			bcc 	_SCExit
.a2a1	e6 35		inc $35				inc 	basicStack+1
.a2a3					_SCExit:
.a2a3	60		rts				rts
.a2a4					StackCheckFrame:
.a2a4	48		pha				pha
.a2a5					_StackRemoveLocals:
.a2a5	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a2a7	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a2a9	b0 05		bcs $a2b0			bcs 	_SCNoLocal
.a2ab	20 02 88	jsr $8802			jsr 	LocalPopValue
.a2ae	80 f5		bra $a2a5			bra 	_StackRemoveLocals
.a2b0					_SCNoLocal:
.a2b0	68		pla				pla
.a2b1	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a2b3	29 f0		and #$f0			and 	#$F0 						; check type bits
.a2b5	d0 01		bne $a2b8			bne 	_SCFError 					; different, we have structures mixed up
.a2b7	60		rts				rts
.a2b8					_SCFError:
.a2b8	8a		txa				txa 								; report error X
.a2b9	4c 51 8d	jmp $8d51			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a2bc					STKSaveCodePosition:
.a2bc	5a		phy				phy
.a2bd	98		tya				tya 								; save Y
.a2be	a0 05		ldy #$05			ldy 	#5
.a2c0	91 34		sta ($34),y			sta 	(basicStack),y
.a2c2	88		dey				dey 								; save Code Pointer
.a2c3					_STKSaveLoop:
.a2c3	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a2c6	91 34		sta ($34),y			sta 	(basicStack),y
.a2c8	88		dey				dey
.a2c9	d0 f8		bne $a2c3			bne 	_STKSaveLoop
.a2cb	7a		ply				ply
.a2cc	60		rts				rts
.a2cd					STKLoadCodePosition:
.a2cd	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a2cf					_STKLoadLoop:
.a2cf	b1 34		lda ($34),y			lda 	(basicStack),y
.a2d1	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a2d4	c8		iny				iny
.a2d5	c0 05		cpy #$05			cpy 	#5
.a2d7	d0 f6		bne $a2cf			bne 	_STKLoadLoop
.a2d9	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a2db	a8		tay				tay
.a2dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a2dd					StackReset:
.a2dd	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a2df	85 34		sta $34				sta 	0+basicStack
.a2e1	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a2e3	85 35		sta $35				sta 	1+basicStack
.a2e5	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a2e7	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a2e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a2ea					StringConcrete:
.a2ea	5a		phy				phy 								; save position on stack
.a2eb	20 dd 99	jsr $99dd			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a2ee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a2f1	85 38		sta $38				sta 	zTemp1
.a2f3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2f6	85 39		sta $39				sta 	zTemp1+1
.a2f8	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a2fa					_SALength:
.a2fa	c8		iny				iny
.a2fb	b1 38		lda ($38),y			lda 	(zTemp1),y
.a2fd	d0 fb		bne $a2fa			bne 	_SALength
.a2ff	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a301	b0 3f		bcs $a342			bcs 	_SALengthError
.a303	98		tya				tya 				 				; length of the new string
.a304	18		clc				clc
.a305	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a307	90 02		bcc $a30b			bcc 	_SAHaveLength
.a309	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a30b					_SAHaveLength:
.a30b	48		pha				pha 								; save length.
.a30c	38		sec				sec
.a30d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a30f	6d 8e 04	adc $048e			adc 	StringMemory
.a312	8d 8e 04	sta $048e			sta 	StringMemory
.a315	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a317	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a31a	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a31c	6d 8f 04	adc $048f			adc 	StringMemory+1
.a31f	8d 8f 04	sta $048f			sta 	StringMemory+1
.a322	85 3b		sta $3b				sta 	zTemp2+1
.a324	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a327	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a328	38		sec				sec
.a329	e9 03		sbc #$03			sbc 	#3
.a32b	92 3a		sta ($3a)			sta 	(zTemp2)
.a32d	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a32f	a0 01		ldy #$01			ldy 	#1
.a331	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a333					_SACopyNewString:
.a333	a0 00		ldy #$00			ldy 	#0
.a335					_SACopyNSLoop:
.a335	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a337	c8		iny				iny 								; write two on in string storage
.a338	c8		iny				iny
.a339	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a33b	88		dey				dey 								; this makes it one one.
.a33c	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a33e	d0 f5		bne $a335			bne 	_SACopyNSLoop
.a340	7a		ply				ply
.a341	60		rts				rts
.a342					_SALengthError:
.a342	a9 09		lda #$09		lda	#9
.a344	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a347					StringSystemInitialise:
.a347	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a349	8d 8e 04	sta $048e			sta 	0+StringMemory
.a34c	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a34e	8d 8f 04	sta $048f			sta 	1+StringMemory
.a351	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a354	60		rts				rts
.a355					StringSpaceInitialise:
.a355	20 dd 99	jsr $99dd			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a358	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a35a	8d 90 04	sta $0490			sta 	StringInitialised
.a35d	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a360	8d 91 04	sta $0491			sta 	StringTempPointer
.a363	ad 8f 04	lda $048f			lda 	StringMemory+1
.a366	3a		dec a				dec 	a
.a367	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a36a	60		rts				rts
.a36b					StringTempAllocate:
.a36b	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a36d	b0 35		bcs $a3a4			bcs 	_STALength
.a36f	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a372	30 05		bmi $a379			bmi 	_STAAllocate
.a374	48		pha				pha 								; save value to subtract.
.a375	20 55 a3	jsr $a355			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a378	68		pla				pla 								; restore it
.a379					_STAAllocate:
.a379	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a37b	18		clc				clc  								; deliberate allows one more
.a37c	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a37f	8d 91 04	sta $0491			sta 	StringTempPointer
.a382	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a385	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a387	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a38a	69 ff		adc #$ff			adc 	#$FF
.a38c	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a38f	85 3d		sta $3d				sta 	zsTemp+1
.a391	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a394	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a397	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a39a	a9 10		lda #$10			lda 	#NSTString
.a39c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a39f	a9 00		lda #$00			lda 	#0 							; clear the target string
.a3a1	92 3c		sta ($3c)			sta 	(zsTemp)
.a3a3	60		rts				rts
.a3a4					_STALength:
.a3a4	a9 09		lda #$09		lda	#9
.a3a6	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a3a9					StringTempWrite:
.a3a9	48		pha				pha
.a3aa	92 3c		sta ($3c)			sta 	(zsTemp)
.a3ac	e6 3c		inc $3c				inc 	zsTemp
.a3ae	d0 02		bne $a3b2			bne 	_STWNoCarry
.a3b0	e6 3d		inc $3d				inc 	zsTemp+1
.a3b2					_STWNoCarry:
.a3b2	a9 00		lda #$00			lda 	#0
.a3b4	92 3c		sta ($3c)			sta 	(zsTemp)
.a3b6	68		pla				pla
.a3b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=10					CLIIdentifier = CONYellowGreen
=7					CLIPunctuation = CONYellow
=1					CLIData = CONWhite
.a3b8					RectangleCommand:
.a3b8	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a3ba	80 02		bra $a3be			bra 	ShapeDrawCmd
.a3bc					CircleCommand:
.a3bc	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a3be					ShapeDrawCmd:
.a3be	20 4c a4	jsr $a44c			jsr 	RunGraphicsCommand
.a3c1					ShapeDraw:
.a3c1	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a3c4	4c 40 a4	jmp $a440			jmp 	ExecuteGraphicCommand	 	; and complete
.a3c7					SpriteCommand:
.a3c7	a2 00		ldx #$00			ldx 	#0
.a3c9	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get image number.
.a3cc	5a		phy				phy
.a3cd	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a3cf	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a3d2	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a3d4	b0 0d		bcs $a3e3			bcs 	_SCRange
.a3d6	a0 ff		ldy #$ff			ldy 	#255
.a3d8	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a3db	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a3dd	7a		ply				ply
.a3de	20 4c a4	jsr $a44c			jsr 	RunGraphicsCommand
.a3e1	80 5d		bra $a440			bra 	ExecuteGraphicCommand
.a3e3					_SCRange:
.a3e3	4c a3 9f	jmp $9fa3			jmp 	RangeError
.a3e6					ImageCommand:
.a3e6	a2 00		ldx #$00			ldx 	#0
.a3e8	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get image number.
.a3eb	20 4c a4	jsr $a44c			jsr 	RunGraphicsCommand
.a3ee					ImageRunDraw:
.a3ee	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a3f0	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a3f3	ad 34 06	lda $0634			lda 	gxDrawScale
.a3f6	0a		asl a				asl 	a
.a3f7	0a		asl a				asl 	a
.a3f8	0a		asl a				asl 	a
.a3f9	a8		tay				tay
.a3fa	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a3fc	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a3ff	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a402	60		rts				rts
.a403					TextCommand:
.a403	a2 00		ldx #$00			ldx 	#0
.a405	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get text
.a408	20 4c a4	jsr $a44c			jsr 	RunGraphicsCommand
.a40b					TextRunDraw:
.a40b	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a40d	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a410	a0 00		ldy #$00			ldy 	#0
.a412					_IRDLoop:
.a412	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a415	85 37		sta $37				sta 	zTemp0+1
.a417	ad 08 04	lda $0408			lda 	NSMantissa0
.a41a	85 36		sta $36				sta 	zTemp0
.a41c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a41e	f0 13		beq $a433			beq 	_IRDExit
.a420	5a		phy				phy									; save string pos
.a421	48		pha				pha 								; save char
.a422	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a425	0a		asl a				asl 	a
.a426	0a		asl a				asl 	a
.a427	0a		asl a				asl 	a
.a428	a8		tay				tay
.a429	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a42b	fa		plx				plx 								; char to draw
.a42c	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a42f	7a		ply				ply 								; restore string pos
.a430	c8		iny				iny
.a431	90 df		bcc $a412			bcc 	_IRDLoop 					; go back if no error.
.a433					_IRDExit:
.a433	60		rts				rts
.a434					PlotCommand:
.a434	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a436	20 4c a4	jsr $a44c			jsr 	RunGraphicsCommand
.a439	80 05		bra $a440			bra 	ExecuteGraphicCommand
.a43b					LineCommand:
.a43b	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a43d	20 4c a4	jsr $a44c			jsr 	RunGraphicsCommand
.a440					ExecuteGraphicCommand:
.a440	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a443	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw 				; draw it and exit
.a446	b0 01		bcs $a449			bcs 	_EGCError
.a448	60		rts				rts
.a449					_EGCError:
.a449	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.a44c					RunGraphicsCommand:
.a44c	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a44f	68		pla				pla 								; pop handler address
.a450	fa		plx				plx
.a451	1a		inc a				inc 	a
.a452	d0 01		bne $a455			bne 	_RGINoCarry
.a454	e8		inx				inx
.a455					_RGINoCarry:
.a455	8d 32 06	sta $0632			sta 	GXHandler
.a458	8e 33 06	stx $0633			stx 	GXHandler+1
.a45b					_RGICommandLoop:
.a45b	b1 30		lda ($30),y			lda 	(codePtr),y
.a45d	c8		iny				iny
.a45e	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a460	f0 53		beq $a4b5			beq 	_RGI_To
.a462	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a464	f0 55		beq $a4bb			beq 	_RGI_Here
.a466	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a468	f0 3d		beq $a4a7			beq 	_RGI_Exit
.a46a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a46c	f0 39		beq $a4a7			beq 	_RGI_Exit
.a46e	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a470	f0 3e		beq $a4b0			beq 	_RGI_Frame
.a472	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a474	f0 33		beq $a4a9			beq 	_RGI_Solid
.a476	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a478	f0 4b		beq $a4c5			beq 	_RGI_By
.a47a	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a47c	f0 17		beq $a495			beq 	_RGI_Move2
.a47e	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a480	f0 65		beq $a4e7			beq 	_RGI_Dim
.a482	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a484	f0 78		beq $a4fe			beq 	_RGI_Colour
.a486	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a488	f0 74		beq $a4fe			beq 	_RGI_Colour
.a48a	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a48d	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a48f	d0 03		bne $a494			bne 	_RGI_Move 					; move
.a491	4c 28 a5	jmp $a528			jmp		_RGI_SpriteInstructions
.a494					_RGI_Move:
.a494	88		dey				dey 								; unpick get.
.a495					_RGI_Move2:
.a495	20 4e a5	jsr $a54e			jsr 	GCGetCoordinatePair 		; move to here
.a498	20 75 a5	jsr $a575			jsr 	GCCopyPairToStore 			; save
.a49b	5a		phy				phy
.a49c	20 6b a5	jsr $a56b			jsr 	GCLoadAXY 					; load in
.a49f	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4a1	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a4a4	7a		ply				ply
.a4a5	80 b4		bra $a45b			bra 	_RGICommandLoop 			; and go round
.a4a7					_RGI_Exit:
.a4a7	88		dey				dey 								; unpick : / EOL
.a4a8	60		rts				rts
.a4a9					_RGI_Solid:
.a4a9	a9 02		lda #$02			lda 	#2
.a4ab	8d 2e 06	sta $062e			sta 	gxFillSolid
.a4ae	80 ab		bra $a45b			bra 	_RGICommandLoop
.a4b0					_RGI_Frame:
.a4b0	9c 2e 06	stz $062e			stz 	gxFillSolid
.a4b3	80 a6		bra $a45b			bra 	_RGICommandLoop
.a4b5					_RGI_To:
.a4b5	20 4e a5	jsr $a54e			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a4b8	20 75 a5	jsr $a575			jsr 	GCCopyPairToStore
.a4bb					_RGI_Here:
.a4bb	5a		phy				phy
.a4bc	20 6b a5	jsr $a56b			jsr 	GCLoadAXY 					; load it into AXY
.a4bf	20 25 a5	jsr $a525			jsr 	_RGICallHandler 			; go do whatever it is.
.a4c2	7a		ply				ply
.a4c3	80 96		bra $a45b			bra 	_RGICommandLoop 			; and go round
.a4c5					_RGI_By:
.a4c5	20 5b a5	jsr $a55b			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a4c8	18		clc				clc
.a4c9	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a4cc	6d 2f 06	adc $062f			adc 	gxxPos
.a4cf	8d 2f 06	sta $062f			sta 	gxXPos
.a4d2	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a4d5	6d 30 06	adc $0630			adc 	gxxPos+1
.a4d8	8d 30 06	sta $0630			sta 	gxXPos+1
.a4db	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a4de	18		clc				clc
.a4df	6d 31 06	adc $0631			adc 	gxYPos
.a4e2	8d 31 06	sta $0631			sta 	gxYPos
.a4e5	80 d4		bra $a4bb			bra 	_RGI_Here
.a4e7					_RGI_Dim:
.a4e7	a2 01		ldx #$01			ldx	 	#1
.a4e9	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger
.a4ec	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a4ef	c9 00		cmp #$00			cmp 	#0
.a4f1	f0 2f		beq $a522			beq 	_RGIRange
.a4f3	c9 09		cmp #$09			cmp 	#8+1
.a4f5	b0 2b		bcs $a522			bcs		_RGIRange
.a4f7	3a		dec a				dec 	a
.a4f8	8d 34 06	sta $0634			sta 	gxDrawScale
.a4fb	4c 5b a4	jmp $a45b			jmp 	_RGICommandLoop
.a4fe					_RGI_Colour:
.a4fe	a2 01		ldx #$01			ldx 	#1 							; colour
.a500	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger
.a503	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a505	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.a508	b1 30		lda ($30),y			lda 	(codePtr),y
.a50a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a50c	d0 04		bne $a512			bne 	_RGICDefaultMode
.a50e	c8		iny				iny
.a50f	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger
.a512					_RGICDefaultMode:
.a512	5a		phy				phy
.a513	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a515	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a518	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a51b	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a51e	7a		ply				ply
.a51f	4c 5b a4	jmp $a45b			jmp 	_RGICommandLoop 			; and go round
.a522					_RGIRange:
.a522	4c a3 9f	jmp $9fa3			jmp 	RangeError
.a525					_RGICallHandler:
.a525	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a528					_RGI_SpriteInstructions:
.a528	c9 be		cmp #$be			cmp 	#KWD_OFF
.a52a	f0 07		beq $a533			beq 	_RGISpriteOff
.a52c	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a52e	f0 13		beq $a543			beq 	_RGISetImage
.a530	4c 94 a4	jmp $a494			jmp 	_RGI_Move
.a533					_RGISpriteOff:
.a533	5a		phy				phy
.a534	a0 01		ldy #$01			ldy 	#1
.a536	a2 00		ldx #$00			ldx 	#0
.a538					_RGIDoCommandLoop:
.a538	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a53a	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a53d	7a		ply				ply
.a53e	b0 e2		bcs $a522			bcs 	_RGIRange
.a540	4c 5b a4	jmp $a45b			jmp 	_RGICommandLoop
.a543					_RGISetImage:
.a543	a2 01		ldx #$01			ldx 	#1
.a545	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger
.a548	5a		phy				phy
.a549	aa		tax				tax
.a54a	a0 00		ldy #$00			ldy 	#0
.a54c	80 ea		bra $a538			bra 	_RGIDoCommandLoop
.a54e					GCGetCoordinatePair:
.a54e	a2 01		ldx #$01			ldx 	#1
.a550	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.a553	20 40 8d	jsr $8d40			jsr 	CheckComma
.a556	e8		inx				inx
.a557	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.a55a	60		rts				rts
.a55b					GCSignedCoordinatePair:
.a55b	a2 01		ldx #$01			ldx 	#1
.a55d	20 81 9d	jsr $9d81			jsr 	Evaluate16BitIntegerSigned
.a560	20 40 8d	jsr $8d40			jsr 	CheckComma
.a563	e8		inx				inx
.a564	20 81 9d	jsr $9d81			jsr 	Evaluate16BitIntegerSigned
.a567	60		rts				rts
.a568					_GCCPRange:
.a568	4c a3 9f	jmp $9fa3			jmp 	RangeError
.a56b					GCLoadAXY:
.a56b	ad 30 06	lda $0630			lda 	gxXPos+1
.a56e	ae 2f 06	ldx $062f			ldx 	gxXPos
.a571	ac 31 06	ldy $0631			ldy 	gxYPos
.a574	60		rts				rts
.a575					GCCopyPairToStore:
.a575	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a578	8d 2f 06	sta $062f			sta 	gxXPos
.a57b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a57e	8d 30 06	sta $0630			sta 	gxXPos+1
.a581	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a584	8d 31 06	sta $0631			sta 	gxYPos
.a587	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1
.a588					BitmapCtrl:
.a588	b1 30		lda ($30),y			lda 	(codePtr),y
.a58a	c8		iny				iny
.a58b	a2 01		ldx #$01			ldx 	#1
.a58d	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a58f	f0 11		beq $a5a2			beq 	BitmapSwitch
.a591	ca		dex				dex
.a592	c9 be		cmp #$be			cmp 	#KWD_OFF
.a594	f0 0c		beq $a5a2			beq 	BitmapSwitch
.a596	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get the colour
.a599	5a		phy				phy
.a59a	aa		tax				tax
.a59b	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a59d	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a5a0	7a		ply				ply
.a5a1	60		rts				rts
.a5a2					BitmapSwitch:
.a5a2	5a		phy				phy
.a5a3	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5a5	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5a7	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a5aa	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5ac	a0 00		ldy #$00			ldy 	#0
.a5ae	a2 ff		ldx #$ff			ldx 	#$FF
.a5b0	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a5b3	9c 2e 06	stz $062e			stz 	gxFillSolid
.a5b6	9c 2f 06	stz $062f			stz 	gxXPos
.a5b9	9c 30 06	stz $0630			stz 	gxXPos+1
.a5bc	9c 31 06	stz $0631			stz 	gxYPos
.a5bf	9c 34 06	stz $0634			stz 	gxDrawScale
.a5c2	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a5c4	a2 00		ldx #$00			ldx 	#0
.a5c6	a0 00		ldy #$00			ldy 	#0
.a5c8	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a5cb	7a		ply				ply
.a5cc	60		rts				rts
.a5cd					SpritesCtrl:
.a5cd	b1 30		lda ($30),y			lda 	(codePtr),y
.a5cf	c8		iny				iny
.a5d0	a2 01		ldx #$01			ldx 	#1
.a5d2	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a5d4	f0 08		beq $a5de			beq 	SpriteSwitch
.a5d6	ca		dex				dex
.a5d7	c9 be		cmp #$be			cmp 	#KWD_OFF
.a5d9	f0 03		beq $a5de			beq 	SpriteSwitch
.a5db	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.a5de					SpriteSwitch:
.a5de	5a		phy				phy
.a5df	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a5e1	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a5e3	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a5e6	7a		ply				ply
.a5e7	60		rts				rts
.a5e8					GfxCommand:
.a5e8	a2 00		ldx #$00			ldx 	#0
.a5ea	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; command
.a5ed	20 40 8d	jsr $8d40			jsr 	CheckComma
.a5f0	e8		inx				inx
.a5f1	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; X
.a5f4	20 40 8d	jsr $8d40			jsr 	CheckComma
.a5f7	e8		inx				inx
.a5f8	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; Y
.a5fb	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a5fe	4a		lsr a				lsr 	a
.a5ff	d0 16		bne $a617			bne 	_GfxError
.a601	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a604	b0 11		bcs $a617			bcs 	_GfxError 					; bit 7 should have been zero
.a606	5a		phy				phy 								; save pos
.a607	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a60a	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a60d	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a610	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a613	b0 02		bcs $a617			bcs 	_GfxError
.a615	7a		ply				ply 								; restore pos and exit.
.a616	60		rts				rts
.a617					_GfxError:
.a617	4c a3 9f	jmp $9fa3			jmp 	RangeError
.a61a					UnaryHit:
.a61a	fa		plx				plx
.a61b	a9 36		lda #$36			lda 	#zTemp0
.a61d	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a620	20 40 8d	jsr $8d40			jsr 	CheckComma
.a623	e8		inx				inx
.a624	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a627	20 38 8d	jsr $8d38			jsr		CheckRightBracket
.a62a	ca		dex				dex 								; fix back up again.
.a62b	da		phx				phx 								; save X/Y
.a62c	5a		phy				phy
.a62d	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a630	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a633	aa		tax				tax
.a634	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a636	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw 				; calculate result
.a639	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a63a	7a		ply				ply 								; restore XY
.a63b	fa		plx				plx
.a63c	20 16 9e	jsr $9e16			jsr 	NSMSetByte 					; return the hit result
.a63f	60		rts				rts
.a640					PaletteCommand:
.a640	a2 00		ldx #$00			ldx 	#0
.a642	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; colour
.a645	20 40 8d	jsr $8d40			jsr 	CheckComma
.a648	e8		inx				inx
.a649	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; r
.a64c	20 40 8d	jsr $8d40			jsr 	CheckComma
.a64f	e8		inx				inx
.a650	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; g
.a653	20 40 8d	jsr $8d40			jsr 	CheckComma
.a656	e8		inx				inx
.a657	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; b
.a65a	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a65d	85 36		sta $36				sta 	zTemp0
.a65f	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a661	85 37		sta $37				sta 	zTemp0+1
.a663	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a665	26 37		rol $37				rol	 	zTemp0+1
.a667	06 36		asl $36				asl 	zTemp0
.a669	26 37		rol $37				rol	 	zTemp0+1
.a66b	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a66d	85 01		sta $01				sta 	1
.a66f	5a		phy				phy
.a670	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a673	92 36		sta ($36)			sta 	(zTemp0)
.a675	a0 01		ldy #$01			ldy 	#1
.a677	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a67a	91 36		sta ($36),y			sta 	(zTemp0),y
.a67c	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a67f	c8		iny				iny
.a680	91 36		sta ($36),y			sta 	(zTemp0),y
.a682	7a		ply				ply
.a683	60		rts				rts
.a684					UnaryEvent:
.a684	fa		plx				plx
.a685	20 2c a7	jsr $a72c			jsr 	TimerToStackX 				; timer in +0
.a688	e8		inx				inx  								; put reference into +1
.a689	20 da 97	jsr $97da			jsr 	EvaluateTerm
.a68c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a68f	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a691	d0 57		bne $a6ea			bne 	_UEType
.a693	e8		inx				inx 								; put the step in +2
.a694	20 40 8d	jsr $8d40			jsr 	CheckComma
.a697	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.a69a	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.a69d	ca		dex				dex
.a69e	ca		dex				dex
.a69f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a6a2	85 36		sta $36				sta 	zTemp0
.a6a4	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a6a7	85 37		sta $37				sta 	zTemp0+1
.a6a9	5a		phy				phy
.a6aa	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a6ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6ae	30 36		bmi $a6e6			bmi 	_UEFalse 					; exit if signed.
.a6b0	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a6b2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6b5	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a6b7	c8		iny				iny
.a6b8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6bb	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6bd	c8		iny				iny
.a6be	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a6c1	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6c3	90 21		bcc $a6e6			bcc 	_UEFalse 					; no, return FALSE.
.a6c5	18		clc				clc
.a6c6	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a6c8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6cb	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a6ce	91 36		sta ($36),y			sta 	(zTemp0),y
.a6d0	c8		iny				iny
.a6d1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6d4	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a6d7	91 36		sta ($36),y			sta 	(zTemp0),y
.a6d9	c8		iny				iny
.a6da	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a6dd	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a6e0	91 36		sta ($36),y			sta 	(zTemp0),y
.a6e2	7a		ply				ply
.a6e3	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.a6e6					_UEFalse:
.a6e6	7a		ply				ply 								; restore Y
.a6e7	4c ca 8d	jmp $8dca			jmp 	ReturnFalse 				; and return False
.a6ea					_UEType:
.a6ea	4c a8 9f	jmp $9fa8			jmp 	TypeError
.a6ed					UnaryJoyX:
.a6ed	18		clc				clc
.a6ee	80 01		bra $a6f1			bra 	JoyMain
.a6f0					UnaryJoyY:
.a6f0	38		sec				sec
.a6f1					JoyMain:
.a6f1	fa		plx				plx 								; get pos
.a6f2	08		php				php 								; save carry (set for Y)
.a6f3	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6f6	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.a6f9	20 03 a9	jsr $a903			jsr 	EXTReadController 			; read the controller.
.a6fc	28		plp				plp
.a6fd	90 02		bcc $a701			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a6ff	4a		lsr a				lsr 	a
.a700	4a		lsr a				lsr 	a
.a701					_JMNoShift:
.a701	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a702	b0 0a		bcs $a70e			bcs 	_JMIsRight
.a704	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a705	b0 04		bcs $a70b			bcs 	_JMIsLeft
.a707	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; zero result
.a70a	60		rts				rts
.a70b					_JMIsLeft:
.a70b	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.a70e					_JMIsRight:
.a70e	a9 01		lda #$01			lda 	#1
.a710	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.a713	60		rts				rts
.a714					UnaryJoyB:
.a714	fa		plx				plx 								; get pos
.a715	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a718	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.a71b	20 03 a9	jsr $a903			jsr 	EXTReadController 			; read the controller.
.a71e	4a		lsr a				lsr 	a
.a71f	4a		lsr a				lsr 	a
.a720	4a		lsr a				lsr 	a
.a721	4a		lsr a				lsr 	a
.a722	29 01		and #$01			and 	#1
.a724	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.a727	60		rts				rts
.a728					UnaryTimer:
.a728	fa		plx				plx
.a729	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.a72c					TimerToStackX:
.a72c	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; zero result
.a72f	64 01		stz $01				stz 	1 							; access I/O
.a731	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a734	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a737	ad 5a d6	lda $d65a			lda 	$D65A
.a73a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a73d	ad 5b d6	lda $d65b			lda 	$D65B
.a740	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a743	60		rts				rts
.a744					EXTPrintCharacter:
.a744	48		pha				pha
.a745	da		phx				phx
.a746	5a		phy				phy
.a747	a6 01		ldx $01				ldx 	1
.a749	da		phx				phx
.a74a	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a74d	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a74f	30 48		bmi $a799			bmi 	_EXPCColour
.a751	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a753	90 4d		bcc $a7a2			bcc 	_EXPCControl
.a755	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a757	86 01		stx $01				stx 	1
.a759	91 40		sta ($40),y			sta 	(EXTAddress),y
.a75b	e6 01		inc $01				inc 	1 							; select colour memory
.a75d	ad 37 06	lda $0637			lda 	EXTTextColour
.a760	91 40		sta ($40),y			sta 	(EXTAddress),y
.a762	c8		iny				iny 								; advance horizontal position
.a763	8c 36 06	sty $0636			sty 	EXTColumn
.a766	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a769	90 66		bcc $a7d1			bcc 	_EXPCExit 					; no, then exit.
.a76b					_EXPCCRLF:
.a76b	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a76e	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a771	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a774	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a777	f0 18		beq $a791			beq 	_EXPCScroll
.a779	18		clc				clc 								; add width to address.
.a77a	a5 40		lda $40				lda 	EXTAddress
.a77c	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a77f	85 40		sta $40				sta 	EXTAddress
.a781	90 4e		bcc $a7d1			bcc 	_EXPCExit
.a783	e6 41		inc $41				inc 	EXTAddress+1
.a785	80 4a		bra $a7d1			bra 	_EXPCExit
.a787					_EXPCLeft:
.a787	ce 36 06	dec $0636			dec 	EXTColumn
.a78a	10 45		bpl $a7d1			bpl 	_EXPCExit
.a78c					_EXPCBegin:
.a78c	9c 36 06	stz $0636			stz 	EXTColumn
.a78f	80 40		bra $a7d1			bra 	_EXPCExit
.a791					_EXPCScroll:
.a791	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a794	20 5e a8	jsr $a85e			jsr 	EXTScreenScroll 			; scroll the screen
.a797	80 38		bra $a7d1			bra 	_EXPCExit
.a799					_EXPCColour:
.a799	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a79b	b0 34		bcs $a7d1			bcs 	_EXPCExit
.a79d	20 3e a8	jsr $a83e			jsr 	_EXPCHandleColour
.a7a0	80 2f		bra $a7d1			bra 	_EXPCExit
.a7a2					_EXPCControl:
.a7a2	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a7a4	b0 2b		bcs $a7d1			bcs 	_EXPCExit
.a7a6	0a		asl a				asl 	a 							; double into X
.a7a7	aa		tax				tax
.a7a8	7c 1c a8	jmp ($a81c,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a7ab					_EXPCUp:
.a7ab	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a7ae	f0 21		beq $a7d1			beq 	_EXPCExit
.a7b0	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a7b3	38		sec				sec
.a7b4	a5 40		lda $40				lda 	EXTAddress
.a7b6	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a7b9	85 40		sta $40				sta 	EXTAddress
.a7bb	b0 14		bcs $a7d1			bcs 	_EXPCExit
.a7bd	c6 41		dec $41				dec 	EXTAddress+1
.a7bf	80 10		bra $a7d1			bra 	_EXPCExit
.a7c1					_EXPCRight:
.a7c1	c8		iny				iny
.a7c2	8c 36 06	sty $0636			sty 	EXTColumn
.a7c5	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7c8	d0 07		bne $a7d1			bne 	_EXPCExit
.a7ca					_EXPCEnd:
.a7ca	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7cd	3a		dec a				dec 	a
.a7ce	8d 36 06	sta $0636			sta 	EXTColumn
.a7d1					_EXPCExit:
.a7d1	20 b3 a8	jsr $a8b3			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7d4	68		pla				pla
.a7d5	85 01		sta $01				sta 	1
.a7d7	7a		ply				ply
.a7d8	fa		plx				plx
.a7d9	68		pla				pla
.a7da	60		rts				rts
.a7db					_EXPCClearScreen:
.a7db	20 70 a8	jsr $a870			jsr		EXTClearScreenCode
.a7de	80 f1		bra $a7d1			bra 	_EXPCExit
.a7e0					_EXPCDown:
.a7e0	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7e3	3a		dec a				dec 	a
.a7e4	cd 35 06	cmp $0635			cmp 	EXTRow
.a7e7	f0 e8		beq $a7d1			beq 	_EXPCExit
.a7e9	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7ec	18		clc				clc
.a7ed	a5 40		lda $40				lda 	EXTAddress
.a7ef	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7f2	85 40		sta $40				sta 	EXTAddress
.a7f4	90 db		bcc $a7d1			bcc 	_EXPCExit
.a7f6	e6 41		inc $41				inc 	EXTAddress+1
.a7f8	80 d7		bra $a7d1			bra 	_EXPCExit
.a7fa					_EXPCTab:
.a7fa	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a7fd	29 f8		and #$f8			and 	#$F8
.a7ff	18		clc				clc
.a800	69 08		adc #$08			adc 	#8
.a802	8d 36 06	sta $0636			sta 	EXTColumn
.a805	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a808	90 c7		bcc $a7d1			bcc 	_EXPCExit
.a80a	80 be		bra $a7ca			bra 	_EXPCEnd
.a80c					_EXPCBackSpace:
.a80c	88		dey				dey
.a80d	30 c2		bmi $a7d1			bmi 	_EXPCExit
.a80f	ce 36 06	dec $0636			dec 	EXTColumn
.a812	a9 02		lda #$02			lda 	#2
.a814	85 01		sta $01				sta 	1
.a816	a9 20		lda #$20			lda 	#32
.a818	91 40		sta ($40),y			sta 	(EXTAddress),y
.a81a	80 b5		bra $a7d1			bra 	_EXPCExit
.a81c					_EXPCActionTable:
>a81c	d1 a7						.word 	_EXPCExit 					; 00
>a81e	8c a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a820	87 a7						.word 	_EXPCLeft 					; 02 B Left
>a822	d1 a7						.word 	_EXPCExit 					; 03 <Break>
>a824	d1 a7						.word 	_EXPCExit 					; 04
>a826	ca a7						.word 	_EXPCEnd 					; 05 E End of Line
>a828	c1 a7						.word 	_EXPCRight 					; 06 F Right
>a82a	d1 a7						.word 	_EXPCExit 					; 07
>a82c	0c a8						.word 	_EXPCBackspace 				; 08 H Backspace
>a82e	fa a7						.word 	_EXPCTab 					; 09 I Tab
>a830	d1 a7						.word 	_EXPCExit 					; 0A
>a832	d1 a7						.word 	_EXPCExit 					; 0B
>a834	db a7						.word 	_EXPCClearScreen			; 0C L CLS
>a836	6b a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a838	e0 a7						.word 	_EXPCDown 					; 0E N Down
>a83a	d1 a7						.word 	_EXPCExit 					; 0F
>a83c	ab a7						.word 	_EXPCUp 					; 10 P Up
.a83e					_EXPCHandleColour
.a83e	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a840	b0 16		bcs $a858			bcs 	_EXPCBackground
.a842	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a843	0a		asl a				asl 	a
.a844	0a		asl a				asl 	a
.a845	0a		asl a				asl 	a
.a846	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a848					_EXPCUpdate:
.a848	48		pha				pha 								; save new colour
.a849	8a		txa				txa 								; get mask
.a84a	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a84d	8d 37 06	sta $0637			sta 	EXTTextColour
.a850	68		pla				pla 								; or in new colour
.a851	0d 37 06	ora $0637			ora 	EXTTextColour
.a854	8d 37 06	sta $0637			sta 	EXTTextColour
.a857	60		rts				rts
.a858					_EXPCBackground:
.a858	29 0f		and #$0f			and 	#$0F 						; get the colour
.a85a	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a85c	80 ea		bra $a848			bra 	_EXPCUpdate
.a85e					EXTScreenScroll:
.a85e	a9 02		lda #$02			lda 	#2 							; select text page
.a860	85 01		sta $01				sta 	1
.a862	a9 20		lda #$20			lda		#32 						; fill with space
.a864	20 eb a9	jsr $a9eb			jsr 	EXTScrollFill
.a867	e6 01		inc $01				inc 	1 							; select colour page
.a869	ad 37 06	lda $0637			lda 	EXTTextColour
.a86c	20 eb a9	jsr $a9eb			jsr 	EXTScrollFill
.a86f	60		rts				rts
.a870					EXTClearScreenCode:
.a870	a9 02		lda #$02			lda 	#2 							; select text page
.a872	85 01		sta $01				sta 	1
.a874	a9 20		lda #$20			lda		#32 						; fill with space
.a876	20 83 a8	jsr $a883			jsr 	_EXTCSFill
.a879	e6 01		inc $01				inc 	1 							; select colour page
.a87b	ad 37 06	lda $0637			lda 	EXTTextColour
.a87e	20 83 a8	jsr $a883			jsr 	_EXTCSFill
.a881	80 22		bra $a8a5			bra 	EXTHomeCursor
.a883					_EXTCSFill:
.a883	aa		tax				tax
.a884	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a886	85 40		sta $40				sta 	EXTAddress
.a888	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a88a	85 41		sta $41				sta 	EXTAddress+1
.a88c					_EXTCSFill1:
.a88c	a0 00		ldy #$00			ldy 	#0
.a88e	8a		txa				txa
.a88f					_EXTCSFill2:
.a88f	91 40		sta ($40),y			sta 	(EXTAddress),y
.a891	c8		iny				iny
.a892	d0 fb		bne $a88f			bne 	_EXTCSFill2
.a894	e6 41		inc $41				inc 	EXTAddress+1
.a896	a5 41		lda $41				lda 	EXTAddress+1
.a898	c9 d2		cmp #$d2			cmp 	#$D2
.a89a	d0 f0		bne $a88c			bne 	_EXTCSFill1
.a89c	8a		txa				txa
.a89d					_EXTCSFill3:
.a89d	91 40		sta ($40),y			sta 	(EXTAddress),y
.a89f	c8		iny				iny
.a8a0	c0 c0		cpy #$c0			cpy 	#$C0
.a8a2	d0 f9		bne $a89d			bne 	_EXTCSFill3
.a8a4	60		rts				rts
.a8a5					EXTHomeCursor:
.a8a5	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a8a8	9c 36 06	stz $0636			stz 	EXTColumn
.a8ab	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a8ad	85 40		sta $40				sta 	EXTAddress
.a8af	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a8b1	85 41		sta $41				sta 	EXTAddress+1
.a8b3					EXTSetHardwareCursor:
.a8b3	64 01		stz $01				stz 	1 							; I/O Page zero
.a8b5	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a8b7	8d 10 d0	sta $d010			sta 	$D010
.a8ba	a9 b1		lda #$b1			lda 	#$B1
.a8bc	8d 12 d0	sta $d012			sta 	$D012
.a8bf	ad 36 06	lda $0636			lda 	EXTColumn
.a8c2	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8c5	9c 15 d0	stz $d015			stz 	$D015
.a8c8	ad 35 06	lda $0635			lda 	EXTRow
.a8cb	8d 16 d0	sta $d016			sta 	$D016
.a8ce	9c 17 d0	stz $d017			stz 	$D017
.a8d1	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a8d2					EXTInitialise:
.a8d2	64 01		stz $01				stz 	1 							; Access I/O
.a8d4	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a8d7	9c 08 d0	stz $d008			stz 	$D008
.a8da	9c 09 d0	stz $d009			stz 	$D009
.a8dd	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a8df	8d 58 d6	sta $d658			sta 	$D658
.a8e2	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a8e4	8d 37 06	sta $0637			sta 	EXTTextColour
.a8e7	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a8e9	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a8ec	a9 3c		lda #$3c			lda 	#60
.a8ee	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a8f1	64 01		stz $01				stz 	1
.a8f3	60		rts				rts
.a8f4					EXTInputSingleCharacter:
.a8f4	da		phx				phx
.a8f5	5a		phy				phy
.a8f6					_EISCWait:
.a8f6	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a8f9	c9 00		cmp #$00			cmp 	#0
.a8fb	f0 f9		beq $a8f6			beq 	_EISCWait
.a8fd	7a		ply				ply
.a8fe	fa		plx				plx
.a8ff	60		rts				rts
.a900					EXTBreakCheck:
.a900	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a903					EXTReadController:
.a903	da		phx				phx
.a904	a2 00		ldx #$00			ldx 	#0
.a906	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a908	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a90b	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a90d	f0 04		beq $a913			beq 	_NoSet1
.a90f	8a		txa				txa
.a910	09 01		ora #$01			ora 	#1
.a912	aa		tax				tax
.a913					_NoSet1:
.a913	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a915	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a918	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a91a	f0 04		beq $a920			beq 	_NoSet1
.a91c	8a		txa				txa
.a91d	09 02		ora #$02			ora 	#2
.a91f	aa		tax				tax
.a920					_NoSet1:
.a920	a9 06		lda #$06			lda 	#(($32) >> 3)
.a922	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a925	29 04		and #$04			and 	#($01 << (($32) & 7))
.a927	f0 04		beq $a92d			beq 	_NoSet1
.a929	8a		txa				txa
.a92a	09 04		ora #$04			ora 	#4
.a92c	aa		tax				tax
.a92d					_NoSet1:
.a92d	a9 04		lda #$04			lda 	#(($25) >> 3)
.a92f	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a932	29 20		and #$20			and 	#($01 << (($25) & 7))
.a934	f0 04		beq $a93a			beq 	_NoSet1
.a936	8a		txa				txa
.a937	09 08		ora #$08			ora 	#8
.a939	aa		tax				tax
.a93a					_NoSet1:
.a93a	a9 04		lda #$04			lda 	#(($26) >> 3)
.a93c	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a93f	29 40		and #$40			and 	#($01 << (($26) & 7))
.a941	f0 04		beq $a947			beq 	_NoSet1
.a943	8a		txa				txa
.a944	09 10		ora #$10			ora 	#16
.a946	aa		tax				tax
.a947					_NoSet1:
.a947	8a		txa				txa
.a948	fa		plx				plx
.a949	60		rts				rts
.a94a					EXTInputLine:
.a94a	48		pha				pha
.a94b	da		phx				phx
.a94c	5a		phy				phy
.a94d	a5 01		lda $01				lda 	1 							; save I/O page
.a94f	48		pha				pha
.a950					_EILLoop:
.a950	20 f4 a8	jsr $a8f4			jsr 	ExtInputSingleCharacter
.a953	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a955	f0 40		beq $a997			beq 	_EILExit
.a957	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a959	f0 1c		beq $a977			beq 	_EILBackspace
.a95b	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a95d	90 12		bcc $a971			bcc 	_EILPrintLoop
.a95f	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a961	b0 0e		bcs $a971			bcs 	_EILPrintLoop
.a963	48		pha				pha 								; save character
.a964	a9 02		lda #$02			lda 	#2  						; insert a space
.a966	85 01		sta $01				sta 	1
.a968	20 d9 a9	jsr $a9d9			jsr 	EXTILInsert 				; insert in text screen
.a96b	e6 01		inc $01				inc 	1
.a96d	20 d9 a9	jsr $a9d9			jsr 	EXTILInsert 				; insert in colour screen
.a970	68		pla				pla 								; get character back.
.a971					_EILPrintLoop:
.a971	20 44 a7	jsr $a744			jsr 	ExtPrintCharacter
.a974	80 da		bra $a950			bra 	_EILLoop
.a976	60		rts				rts
.a977					_EILBackspace:
.a977	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a97a	f0 d4		beq $a950			beq 	_EILLoop
.a97c	a9 02		lda #$02			lda 	#2 							; move cursor left
.a97e	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.a981	a9 02		lda #$02			lda 	#2 							; text block
.a983	85 01		sta $01				sta 	1
.a985	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a987	20 c4 a9	jsr $a9c4			jsr 	EXTILDelete
.a98a	e6 01		inc $01				inc 	1 							; colour block
.a98c	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a98f	88		dey				dey
.a990	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a992	20 c4 a9	jsr $a9c4			jsr 	EXTILDelete 				; backspace attribute
.a995	80 b9		bra $a950			bra 	_EILLoop 					; and go round.
.a997					_EILExit:
.a997	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a999	85 01		sta $01				sta 	1
.a99b	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a99d					_EILScrapeLine:
.a99d	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a99f	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a9a2	c8		iny				iny
.a9a3	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a9a6	d0 f5		bne $a99d			bne 	_EILScrapeLine
.a9a8					_EILTrimSpaces:
.a9a8	88		dey				dey
.a9a9	f0 08		beq $a9b3			beq 	_EILEndTrim
.a9ab	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a9ae	c9 20		cmp #$20			cmp 	#' '
.a9b0	f0 f6		beq $a9a8			beq 	_EILTrimSpaces
.a9b2	c8		iny				iny 								; trim after non space character.
.a9b3					_EILEndTrim:
.a9b3	a9 00		lda #$00			lda 	#0 							; trim here.
.a9b5	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a9b8	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a9ba	20 44 a7	jsr $a744			jsr 	ExtPrintCharacter
.a9bd	68		pla				pla 								; reset I/O page
.a9be	85 01		sta $01				sta 	1
.a9c0	7a		ply				ply
.a9c1	fa		plx				plx
.a9c2	68		pla				pla
.a9c3	60		rts				rts
.a9c4					EXTILDelete:
.a9c4	48		pha				pha 								; save the new character
.a9c5	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a9c8					_EXTDLoop:
.a9c8	c8		iny				iny 								; copy one byte down.
.a9c9	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a9cb	88		dey				dey
.a9cc	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9ce	c8		iny				iny 								; do till end of line.
.a9cf	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a9d2	90 f4		bcc $a9c8			bcc 	_EXTDLoop
.a9d4	88		dey				dey 	 							; write in last slot.
.a9d5	68		pla				pla
.a9d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9d8	60		rts				rts
.a9d9					EXTILInsert:
.a9d9	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a9dc					_EXTILoop:
.a9dc	88		dey				dey 								; back one
.a9dd	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a9e0	f0 08		beq $a9ea			beq 	_EXTIExit
.a9e2	88		dey				dey 								; copy one byte up.
.a9e3	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a9e5	c8		iny				iny
.a9e6	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9e8	80 f2		bra $a9dc			bra 	_EXTILoop
.a9ea					_EXTIExit:
.a9ea	60		rts				rts
.a9eb					EXTScrollFill:
.a9eb	aa		tax				tax									; save value to fill with
.a9ec	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a9ee	48		pha				pha
.a9ef	a5 37		lda $37				lda 	zTemp0+1
.a9f1	48		pha				pha
.a9f2	a5 38		lda $38				lda 	zTemp1
.a9f4	48		pha				pha
.a9f5	a5 39		lda $39				lda 	zTemp1+1
.a9f7	48		pha				pha
.a9f8	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a9fa	85 37		sta $37				sta 	zTemp0+1
.a9fc	85 39		sta $39				sta 	zTemp1+1
.a9fe	64 36		stz $36				stz 	zTemp0
.aa00	ad 38 06	lda $0638			lda 	EXTScreenWidth
.aa03	85 38		sta $38				sta 	zTemp1
.aa05	a0 00		ldy #$00			ldy 	#0
.aa07					_EXSFCopy1:
.aa07	b1 38		lda ($38),y			lda 	(zTemp1),y
.aa09	91 36		sta ($36),y			sta 	(zTemp0),y
.aa0b	c8		iny				iny
.aa0c	d0 f9		bne $aa07			bne 	_EXSFCopy1
.aa0e	e6 37		inc $37				inc 	zTemp0+1 					; next page
.aa10	e6 39		inc $39				inc 	zTemp1+1
.aa12	a5 39		lda $39				lda 	zTemp1+1
.aa14	c9 d3		cmp #$d3			cmp 	#$D3
.aa16	d0 ef		bne $aa07			bne 	_EXSFCopy1
.aa18	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.aa1b	8a		txa				txa
.aa1c					_EXSFFill1:
.aa1c	88		dey				dey
.aa1d	91 40		sta ($40),y			sta 	(EXTAddress),y
.aa1f	c0 00		cpy #$00			cpy 	#0
.aa21	10 f9		bpl $aa1c			bpl 	_EXSFFill1
.aa23	68		pla				pla
.aa24	85 39		sta $39				sta 	zTemp1+1
.aa26	68		pla				pla
.aa27	85 38		sta $38				sta 	zTemp1
.aa29	68		pla				pla
.aa2a	85 37		sta $37				sta 	zTemp0+1
.aa2c	68		pla				pla
.aa2d	85 36		sta $36				sta 	zTemp0
.aa2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7ce					GRVectorTable:
>b7ce	2b ac					.word	GXInitialise             ; $00 Initialise
>b7d0	45 ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7d2	8d ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7d4	dd ab					.word	GXClearBitmap            ; $03 Clear
>b7d6	1c ae					.word	GXSetColourMode          ; $04 Colour
>b7d8	e4 af					.word	GXFontHandler            ; $05 DrawFont
>b7da	2c b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7dc	98 b0					.word	GXSelect                 ; $07 SpriteUse
>b7de	c1 b0					.word	GXSelectImage            ; $08 SpriteImage
>b7e0	48 b2					.word	GXCollide                ; $09 SpriteCollide
>b7e2	8f aa					.word	GRUndefined              ; $0a
>b7e4	8f aa					.word	GRUndefined              ; $0b
>b7e6	8f aa					.word	GRUndefined              ; $0c
>b7e8	8f aa					.word	GRUndefined              ; $0d
>b7ea	8f aa					.word	GRUndefined              ; $0e
>b7ec	8f aa					.word	GRUndefined              ; $0f
>b7ee	8f aa					.word	GRUndefined              ; $10
>b7f0	8f aa					.word	GRUndefined              ; $11
>b7f2	8f aa					.word	GRUndefined              ; $12
>b7f4	8f aa					.word	GRUndefined              ; $13
>b7f6	8f aa					.word	GRUndefined              ; $14
>b7f8	8f aa					.word	GRUndefined              ; $15
>b7fa	8f aa					.word	GRUndefined              ; $16
>b7fc	8f aa					.word	GRUndefined              ; $17
>b7fe	8f aa					.word	GRUndefined              ; $18
>b800	8f aa					.word	GRUndefined              ; $19
>b802	8f aa					.word	GRUndefined              ; $1a
>b804	8f aa					.word	GRUndefined              ; $1b
>b806	8f aa					.word	GRUndefined              ; $1c
>b808	8f aa					.word	GRUndefined              ; $1d
>b80a	8f aa					.word	GRUndefined              ; $1e
>b80c	8f aa					.word	GRUndefined              ; $1f
>b80e	8d aa					.word	GXMove                   ; $20 Move
>b810	ea ac					.word	GXLine                   ; $21 Line
>b812	65 ae					.word	GXFrameRectangle         ; $22 FrameRect
>b814	62 ae					.word	GXFillRectangle          ; $23 FillRect
>b816	94 aa					.word	GXFrameCircle            ; $24 FrameCircle
>b818	90 aa					.word	GXFillCircle             ; $25 FillCircle
>b81a	8f aa					.word	GRUndefined              ; $26
>b81c	8f aa					.word	GRUndefined              ; $27
>b81e	4a ae					.word	GXPlotPoint              ; $28 Plot
>b820	57 b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa30					GXGraphicDraw:
.aa30	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa32	b0 06		bcs $aa3a			bcs 	_GDCoordinate
.aa34	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa36	84 37		sty $37				sty 	gxzTemp0+1
.aa38	80 4b		bra $aa85			bra 	_GDExecuteA 				; and execute
.aa3a					_GDCoordinate:
.aa3a	48		pha				pha 								; save AXY
.aa3b	da		phx				phx
.aa3c	5a		phy				phy
.aa3d	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa3f					_GDCopy1:
.aa3f	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa42	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa45	ca		dex				dex
.aa46	10 f7		bpl $aa3f			bpl 	_GDCopy1
.aa48	68		pla				pla 								; update Y
.aa49	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa4c	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa4f	68		pla				pla
.aa50	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa53	68		pla				pla 								; get A (command+X.1) back
.aa54	48		pha				pha
.aa55	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa57	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa5a	68		pla				pla 								; get command back
.aa5b	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa5d	48		pha				pha 								; push back.
.aa5e	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa60	f0 17		beq $aa79			beq 	_GDCopyToWorkArea
.aa62	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa65	f0 07		beq $aa6e			beq 	_GDCheckY
.aa67	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa6a	c9 40		cmp #$40			cmp 	#64
.aa6c	b0 08		bcs $aa76			bcs 	_GDError1
.aa6e					_GDCheckY:
.aa6e	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa71	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa74	90 03		bcc $aa79			bcc 	_GDCopyToWorkArea
.aa76					_GDError1:
.aa76	68		pla				pla
.aa77					_GDError2:
.aa77	38		sec				sec
.aa78	60		rts				rts
.aa79					_GDCopyToWorkArea:
.aa79	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa7b					_GDCopy2:
.aa7b	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa7e	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa81	ca		dex				dex
.aa82	10 f7		bpl $aa7b			bpl 	_GDCopy2
.aa84	68		pla				pla 								; get command
.aa85					_GDExecuteA:
.aa85	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa87	b0 ee		bcs $aa77			bcs 	_GDError2
.aa89	aa		tax				tax
.aa8a	7c ce b7	jmp ($b7ce,x)			jmp 	(GRVectorTable,x)
.aa8d					GXMove:
.aa8d	18		clc				clc
.aa8e	60		rts				rts
.aa8f					GRUndefined:
>aa8f	db						.byte 	$DB 						; causes a break in the emulator
.aa90					GXFillCircle:
.aa90	a9 ff		lda #$ff			lda 	#255
.aa92	80 02		bra $aa96			bra 	GXCircle
.aa94					GXFrameCircle:
.aa94	a9 00		lda #$00			lda 	#0
.aa96					GXCircle:
.aa96	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aa99	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aa9c	f0 26		beq $aac4			beq 	_GXCFail
.aa9e	20 ef b2	jsr $b2ef			jsr 	GXSortXY 					; topleft/bottomright
.aaa1	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; start drawing
.aaa4	20 96 ab	jsr $ab96			jsr 	GXCircleSetup 				; set up for drawing
.aaa7	9c de 06	stz $06de			stz 	gxYChanged
.aaaa					_GXCircleDraw:
.aaaa	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aaad	cd dc 06	cmp $06dc			cmp 	gYCentre
.aab0	90 0a		bcc $aabc			bcc 	_GXCircleContinue
.aab2	d0 03		bne $aab7			bne 	_GXNoLast
.aab4	20 c9 aa	jsr $aac9			jsr 	GXPlot1
.aab7					_GXNoLast:
.aab7	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap 				; close the bitmap
.aaba	18		clc				clc
.aabb	60		rts				rts
.aabc					_GXCircleContinue:
.aabc	20 c6 aa	jsr $aac6			jsr 	GXPlot2 					; draw it
.aabf	20 43 ab	jsr $ab43			jsr 	GXCircleMove 				; adjust the coordinates
.aac2	80 e6		bra $aaaa			bra 	_GXCircleDraw
.aac4					_GXCFail:
.aac4	38		sec				sec
.aac5	60		rts				rts
.aac6					GXPlot2:
.aac6	20 c9 aa	jsr $aac9			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aac9					GXPlot1:
.aac9	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aacc	f0 03		beq $aad1			beq 	_GXPlot1Only
.aace	20 ed aa	jsr $aaed			jsr 	GXPlot0 						; plot and negate
.aad1					_GXPlot1Only:
.aad1	20 ed aa	jsr $aaed			jsr 	GXPlot0 						; twice, undoing negation
.aad4	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aad7	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aada	8d dc 06	sta $06dc			sta 	gYCentre
.aadd	8e db 06	stx $06db			stx 	gXCentre
.aae0	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aae3	a9 ff		lda #$ff			lda 	#$FF
.aae5	8d de 06	sta $06de			sta 	gxYChanged
.aae8	60		rts				rts
.aae9	20 ed aa	jsr $aaed			jsr 	GXPlot0 						; do once
.aaec	60		rts				rts
.aaed	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aaf0	f0 05		beq $aaf7			beq 	_GXPlot0Always
.aaf2	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aaf5	f0 2d		beq $ab24			beq 	GXPlot0Exit
.aaf7					_GXPlot0Always:
.aaf7	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aaf9	ad dc 06	lda $06dc			lda 	gYCentre
.aafc	20 25 ab	jsr $ab25			jsr 	GXSubCopy
.aaff	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.ab01	ad db 06	lda $06db			lda 	gXCentre
.ab04	20 25 ab	jsr $ab25			jsr 	GXSubCopy
.ab07	48		pha				pha 									; save last offset X
.ab08	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 					; calculate position/offset.
.ab0b	68		pla				pla
.ab0c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.ab0d	85 36		sta $36				sta 	gxzTemp0
.ab0f	64 37		stz $37				stz 	gxzTemp0+1
.ab11	26 37		rol $37				rol 	gxzTemp0+1
.ab13	ad dd 06	lda $06dd			lda 	gxIsFillMode
.ab16	69 80		adc #$80			adc 	#128
.ab18	20 b5 ae	jsr $aeb5			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab1b	38		sec				sec 									; GY = -GY
.ab1c	a9 00		lda #$00			lda 	#0
.ab1e	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab21	8d dc 06	sta $06dc			sta 	gYCentre
.ab24					GXPlot0Exit:
.ab24	60		rts				rts
.ab25					GXSubCopy:
.ab25	85 36		sta $36				sta 	gxzTemp0
.ab27	64 37		stz $37				stz 	gxzTemp0+1
.ab29	29 80		and #$80			and 	#$80
.ab2b	f0 02		beq $ab2f			beq 	_GXNoSx
.ab2d	c6 37		dec $37				dec 	gxzTemp0+1
.ab2f					_GXNoSx:
.ab2f	38		sec				sec
.ab30	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab33	e5 36		sbc $36				sbc 	gxzTemp0
.ab35	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab38	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab3b	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab3d	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab40	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab42	60		rts				rts
.ab43					GXCircleMove:
.ab43	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab46	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab48	10 0d		bpl $ab57			bpl 	_GXEMPositive
.ab4a	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab4d	ad db 06	lda $06db			lda 	gXCentre
.ab50	20 76 ab	jsr $ab76			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab53	a9 06		lda #$06			lda 	#6  						; and add 6
.ab55	80 15		bra $ab6c			bra 	_GXEMAddD
.ab57					_GXEMPositive:
.ab57	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab5a	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab5d	38		sec				sec 								; calculate X-Y
.ab5e	ad db 06	lda $06db			lda 	gXCentre
.ab61	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab64	20 76 ab	jsr $ab76			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab67	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab69	ce de 06	dec $06de			dec 	gxYChanged
.ab6c					_GXEMAddD:
.ab6c	18		clc				clc
.ab6d	65 38		adc $38				adc 	gxzTemp1
.ab6f	85 38		sta $38				sta 	gxzTemp1
.ab71	90 02		bcc $ab75			bcc 	_GXEMNoCarry
.ab73	e6 39		inc $39				inc 	gxzTemp1+1
.ab75					_GXEMNoCarry:
.ab75	60		rts				rts
.ab76					_GXAdd4TimesToD:
.ab76	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab78	29 80		and #$80			and 	#$80
.ab7a	f0 02		beq $ab7e			beq 	_GXA4Unsigned
.ab7c	a9 ff		lda #$ff			lda 	#$FF
.ab7e					_GXA4Unsigned:
.ab7e	85 37		sta $37				sta 	gxzTemp0+1
.ab80	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab82	26 37		rol $37				rol 	gxzTemp0+1
.ab84	06 36		asl $36				asl 	gxzTemp0
.ab86	26 37		rol $37				rol 	gxzTemp0+1
.ab88	18		clc				clc 								; add
.ab89	a5 36		lda $36				lda		gxzTemp0
.ab8b	65 38		adc $38				adc 	gxzTemp1
.ab8d	85 38		sta $38				sta 	gxzTemp1
.ab8f	a5 37		lda $37				lda		gxzTemp0+1
.ab91	65 39		adc $39				adc 	gxzTemp1+1
.ab93	85 39		sta $39				sta 	gxzTemp1+1
.ab95	60		rts				rts
.ab96					GXCircleSetup:
.ab96	38		sec				sec
.ab97	ad 48 06	lda $0648			lda 	gxY1
.ab9a	ed 44 06	sbc $0644			sbc 	gxY0
.ab9d	4a		lsr a				lsr 	a
.ab9e	8d da 06	sta $06da			sta 	gxRadius
.aba1	a2 00		ldx #$00			ldx 	#0
.aba3	20 c5 ab	jsr $abc5			jsr 	_GXCalculateCentre
.aba6	a2 02		ldx #$02			ldx 	#2
.aba8	20 c5 ab	jsr $abc5			jsr 	_GXCalculateCentre
.abab	9c db 06	stz $06db			stz 	gXCentre
.abae	ad da 06	lda $06da			lda 	gxRadius
.abb1	8d dc 06	sta $06dc			sta 	gYCentre
.abb4	0a		asl a				asl 	a 							; R x 2
.abb5	85 36		sta $36				sta 	gxzTemp0
.abb7	38		sec				sec
.abb8	a9 03		lda #$03			lda 	#3
.abba	e5 36		sbc $36				sbc 	gxzTemp0
.abbc	85 38		sta $38				sta 	gxzTemp1
.abbe	a9 00		lda #$00			lda 	#0
.abc0	e9 00		sbc #$00			sbc 	#0
.abc2	85 39		sta $39				sta 	gxzTemp1+1
.abc4	60		rts				rts
.abc5					_GXCalculateCentre:
.abc5	38		sec				sec
.abc6	bd 46 06	lda $0646,x			lda 	gxX1,x
.abc9	7d 42 06	adc $0642,x			adc 	gXX0,x
.abcc	9d 46 06	sta $0646,x			sta 	gXX1,x
.abcf	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abd2	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abd5	4a		lsr a				lsr 	a
.abd6	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abd9	7e 46 06	ror $0646,x			ror 	gXX1,x
.abdc	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abdd					GXClearBitmap:
.abdd	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abe0	f0 24		beq $ac06			beq 	_GXCBFail
.abe2	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; start access
.abe5	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abe7	ad 4e 06	lda $064e			lda 	gxHeight
.abea	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abec	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abee					_GXCalcLastPage:
.abee	98		tya				tya 								; add to base page
.abef	18		clc				clc
.abf0	6d 4c 06	adc $064c			adc 	gxBasePage
.abf3	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abf5					_GXClearAll:
.abf5	20 08 ac	jsr $ac08			jsr 	_GXClearBlock 				; clear 8k block
.abf8	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abfa	a5 0b		lda $0b				lda 	GXEditSlot
.abfc	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.abff	b0 f4		bcs $abf5			bcs 	_GXClearAll
.ac01	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap	 			; stop access
.ac04	18		clc				clc
.ac05	60		rts				rts
.ac06					_GXCBFail:
.ac06	38		sec				sec
.ac07	60		rts				rts
.ac08					_GXClearBlock:
.ac08	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.ac0a	85 38		sta $38				sta 	0+gxzTemp1
.ac0c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.ac0e	85 39		sta $39				sta 	1+gxzTemp1
.ac10					_GXCB0:
.ac10	a5 36		lda $36				lda 	gxzTemp0
.ac12	a0 00		ldy #$00			ldy 	#0
.ac14					_GXCB1:
.ac14	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac16	c8		iny				iny
.ac17	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac19	c8		iny				iny
.ac1a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac1c	c8		iny				iny
.ac1d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac1f	c8		iny				iny
.ac20	d0 f2		bne $ac14			bne 	_GXCB1
.ac22	e6 39		inc $39				inc 	gxzTemp1+1
.ac24	a5 39		lda $39				lda 	gxzTemp1+1
.ac26	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac28	d0 e6		bne $ac10			bne 	_GXCB0
.ac2a	60		rts				rts
.ac2b					GXInitialise:
.ac2b	64 01		stz $01				stz 	1
.ac2d	a9 01		lda #$01			lda 	#1
.ac2f	8d 00 d0	sta $d000			sta 	$D000
.ac32	18		clc				clc
.ac33	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac36	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac39	a2 0f		ldx #$0f			ldx 	#15
.ac3b					_GXIClear:
.ac3b	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac3e	ca		dex				dex
.ac3f	10 fa		bpl $ac3b			bpl 	_GXIClear
.ac41	20 dc ac	jsr $acdc			jsr 	GXClearSpriteStore
.ac44	60		rts				rts
.ac45					GXControlBitmap:
.ac45	64 01		stz $01				stz 	1
.ac47	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac49	29 01		and #$01			and 	#1 							; set bitmap flag
.ac4b	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac4e	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac4f	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac52	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac54	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac56	90 02		bcc $ac5a			bcc 	_CBNotOn
.ac58	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac5a					_CBNotOn:
.ac5a	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac5d	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac5f	29 07		and #$07			and 	#7
.ac61	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac64	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac66	d0 02		bne $ac6a			bne 	_CBNotDefault
.ac68	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac6a					_CBNotDefault:
.ac6a	8d 4c 06	sta $064c			sta 	gxBasePage
.ac6d	20 ce ac	jsr $acce			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac70	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac72	8d 03 d1	sta $d103			sta 	$D103
.ac75	a5 36		lda $36				lda 	gxzTemp0
.ac77	8d 02 d1	sta $d102			sta 	$D102
.ac7a	9c 01 d1	stz $d101			stz 	$D101
.ac7d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac7f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac82	29 01		and #$01			and 	#1
.ac84	f0 02		beq $ac88			beq 	_CBHaveHeight
.ac86	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac88					_CBHaveHeight
.ac88	8e 4e 06	stx $064e			stx 	gxHeight
.ac8b	18		clc				clc
.ac8c	60		rts				rts
.ac8d					GXControlSprite:
.ac8d	64 01		stz $01				stz 	1
.ac8f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac91	29 01		and #$01			and 	#1 							; set sprites flag
.ac93	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac96	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac97	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac9a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac9c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ac9e	90 02		bcc $aca2			bcc 	_CSNotOn
.aca0	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.aca2					_CSNotOn:
.aca2	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.aca5	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.aca7	d0 02		bne $acab			bne 	_CSNotDefault
.aca9	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.acab					_CSNotDefault:
.acab	8d 4d 06	sta $064d			sta 	gxSpritePage
.acae	20 ce ac	jsr $acce			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.acb1	a5 36		lda $36				lda 	zTemp0
.acb3	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.acb6	a5 37		lda $37				lda 	zTemp0+1
.acb8	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.acbb	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.acbd					_CSClear:
.acbd	9e 00 d9	stz $d900,x			stz 	$D900,x
.acc0	9e 00 da	stz $da00,x			stz 	$DA00,x
.acc3	ca		dex				dex
.acc4	d0 f7		bne $acbd			bne 	_CSClear
.acc6	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.acc9	20 dc ac	jsr $acdc			jsr 	GXClearSpriteStore
.accc	18		clc				clc
.accd	60		rts				rts
.acce					GXCalculateBaseAddress:
.acce	85 36		sta $36				sta 	gxzTemp0
.acd0	64 37		stz $37				stz 	gxzTemp0+1
.acd2	a9 05		lda #$05			lda 	#5
.acd4					_GXShift:
.acd4	06 36		asl $36				asl 	gxzTemp0
.acd6	26 37		rol $37				rol 	gxzTemp0+1
.acd8	3a		dec a				dec		a
.acd9	d0 f9		bne $acd4			bne 	_GXShift
.acdb	60		rts				rts
.acdc					GXClearSpriteStore:
.acdc	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.acde					_GXCSSLoop:
.acde	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.ace1	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ace3	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.ace6	ca		dex				dex
.ace7	10 f5		bpl $acde			bpl 	_GXCSSLoop
.ace9	60		rts				rts
.acea					GXLine:
.acea	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.aced	f0 28		beq $ad17			beq 	_GXLFail
.acef	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap
.acf2	20 0d b3	jsr $b30d			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acf5	20 bd ad	jsr $adbd			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.acf8	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 				; calculate position/offset.
.acfb					_GXDrawLoop:
.acfb	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.acfe	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ad00	2d 52 06	and $0652			and 	gxANDValue
.ad03	4d 51 06	eor $0651			eor 	gxEORValue
.ad06	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad08	20 19 ad	jsr $ad19			jsr 	GXLineIsComplete 			; is the line complete ?
.ad0b	f0 05		beq $ad12			beq 	_GXLExit
.ad0d	20 34 ad	jsr $ad34			jsr 	GXLineAdvance 				; code as per advance method
.ad10	80 e9		bra $acfb			bra 	_GXDrawLoop
.ad12					_GXLExit:
.ad12	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.ad15	18		clc				clc
.ad16	60		rts				rts
.ad17					_GXLFail:
.ad17	38		sec				sec
.ad18	60		rts				rts
.ad19					GXLineIsComplete:
.ad19	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad1c	d0 0f		bne $ad2d			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad1e	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad21	4d 46 06	eor $0646			eor 	GXX1
.ad24	d0 06		bne $ad2c			bne 	_GXLICExit
.ad26	ad 43 06	lda $0643			lda 	GXX0+1
.ad29	4d 47 06	eor $0647			eor 	GXX1+1
.ad2c					_GXLICExit:
.ad2c	60		rts				rts
.ad2d					_GXLICCompareY:
.ad2d	ad 48 06	lda $0648			lda 	GXY1
.ad30	4d 44 06	eor $0644			eor 	GXY0
.ad33	60		rts				rts
.ad34					GXLineAdvance:
.ad34	18		clc				clc 								; add adjust to position
.ad35	ad e3 06	lda $06e3			lda 	GXPosition
.ad38	6d e4 06	adc $06e4			adc 	GXAdjust
.ad3b	8d e3 06	sta $06e3			sta 	GXPosition
.ad3e	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad41	b0 05		bcs $ad48			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad43	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad46	90 0a		bcc $ad52			bcc 	_GXLANoExtra
.ad48					_GXLAOverflow:
.ad48	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad4b	38		sec				sec 								; subtract total and write back
.ad4c	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad4f	8d e3 06	sta $06e3			sta 	GXPosition
.ad52					_GXLANoExtra:
.ad52	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad55	f0 0d		beq $ad64			beq 	_GXDXLarger
.ad57	20 b6 ad	jsr $adb6			jsr 	GXIncrementY
.ad5a	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad5d	f0 10		beq $ad6f			beq 	_GXLAExit
.ad5f	20 70 ad	jsr $ad70			jsr 	GXAdjustX
.ad62	80 0b		bra $ad6f			bra 	_GXLAExit
.ad64					_GXDXLarger:
.ad64	20 70 ad	jsr $ad70			jsr 	GXAdjustX
.ad67	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad6a	f0 03		beq $ad6f			beq 	_GXLAExit
.ad6c	20 b6 ad	jsr $adb6			jsr 	GXIncrementY
.ad6f					_GXLAExit:
.ad6f	60		rts				rts
.ad70					GXAdjustX:
.ad70	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad73	10 25		bpl $ad9a			bpl 	_GXAXRight
.ad75	ad 42 06	lda $0642			lda 	GXX0
.ad78	d0 03		bne $ad7d			bne 	_GXAXNoBorrow
.ad7a	ce 43 06	dec $0643			dec 	GXX0+1
.ad7d					_GXAXNoBorrow:
.ad7d	ce 42 06	dec $0642			dec 	GXX0
.ad80	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad83	ad 54 06	lda $0654			lda 	gsOffset
.ad86	c9 ff		cmp #$ff			cmp 	#$FF
.ad88	d0 0f		bne $ad99			bne 	_GXAYExit 					; underflow
.ad8a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad8c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad8e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad90	b0 07		bcs $ad99			bcs 	_GXAYExit
.ad92	18		clc				clc
.ad93	69 20		adc #$20			adc 	#$20 						; fix up
.ad95	85 3d		sta $3d				sta 	gxzScreen+1
.ad97	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad99					_GXAYExit:
.ad99	60		rts				rts
.ad9a					_GXAXRight:
.ad9a	ee 42 06	inc $0642			inc 	GXX0
.ad9d	d0 03		bne $ada2			bne 	_GXAXNoCarry
.ad9f	ee 43 06	inc $0643			inc 	GXX0+1
.ada2					_GXAXNoCarry:
.ada2	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.ada5	d0 0e		bne $adb5			bne 	_GXAXExit 					; if not overflowed, exit.
.ada7	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ada9	a5 3d		lda $3d				lda 	gxzScreen+1
.adab	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.adad	90 06		bcc $adb5			bcc 	_GXAXExit
.adaf	e9 20		sbc #$20			sbc 	#$20 						; fix up
.adb1	85 3d		sta $3d				sta 	gxzScreen+1
.adb3	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.adb5					_GXAXExit:
.adb5	60		rts				rts
.adb6					GXIncrementY:
.adb6	ee 44 06	inc $0644			inc 	GXY0
.adb9	20 2d b2	jsr $b22d			jsr 	GXMovePositionDown
.adbc	60		rts				rts
.adbd					GXLineSetup:
.adbd	ad 48 06	lda $0648			lda 	GXY1
.adc0	38		sec				sec
.adc1	ed 44 06	sbc $0644			sbc 	GXY0
.adc4	4a		lsr a				lsr 	a
.adc5	8d e0 06	sta $06e0			sta 	GXDiffY
.adc8	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.adcb	38		sec				sec
.adcc	ad 46 06	lda $0646			lda 	GXX1
.adcf	ed 42 06	sbc $0642			sbc 	GXX0
.add2	8d df 06	sta $06df			sta 	GXDiffX
.add5	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.add8	ed 43 06	sbc $0643			sbc 	GXX0+1
.addb	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.addc	6e df 06	ror $06df			ror 	GXDiffX
.addf	0a		asl a				asl 	a
.ade0	10 0c		bpl $adee			bpl 	_GDXNotNegative
.ade2	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.ade4	38		sec				sec
.ade5	ed df 06	sbc $06df			sbc 	GXDiffX
.ade8	8d df 06	sta $06df			sta 	GXDiffX
.adeb	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.adee					_GDXNotNegative:
.adee	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.adf1	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.adf4	8d e4 06	sta $06e4			sta 	GXAdjust
.adf7	ad df 06	lda $06df			lda 	GXDiffX
.adfa	8d e5 06	sta $06e5			sta 	GXTotal
.adfd	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.ae00	cd df 06	cmp $06df			cmp 	GXDiffX
.ae03	90 0f		bcc $ae14			bcc 	_GDXNotLarger
.ae05	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.ae08	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.ae0b	8d e4 06	sta $06e4			sta 	GXAdjust
.ae0e	ad e0 06	lda $06e0			lda 	GXDiffY
.ae11	8d e5 06	sta $06e5			sta 	GXTotal
.ae14					_GDXNotLarger:
.ae14	ad e5 06	lda $06e5			lda 	GXTotal
.ae17	4a		lsr a				lsr 	a
.ae18	8d e3 06	sta $06e3			sta 	GXPosition
.ae1b	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae1c					GXSetColourMode:
.ae1c	a6 36		ldx $36				ldx 	gxzTemp0
.ae1e	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae21	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae23	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae26	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae28	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae2b	ae 50 06	ldx $0650			ldx 	gxColour
.ae2e	8e 51 06	stx $0651			stx 	gxEORValue
.ae31	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae33	90 03		bcc $ae38			bcc 	_GXSDCNotAndColour
.ae35	8e 52 06	stx $0652			stx 	gxANDValue
.ae38					_GXSDCNotAndColour:
.ae38	d0 03		bne $ae3d			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae3a	9c 51 06	stz $0651			stz 	gxEORValue
.ae3d					_GXSDCNotAnd:
.ae3d	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae3e	90 08		bcc $ae48			bcc 	_GXSDCNoFlip
.ae40	ad 52 06	lda $0652			lda	 	gxANDValue
.ae43	49 ff		eor #$ff			eor 	#$FF
.ae45	8d 52 06	sta $0652			sta 	gxANDValue
.ae48					_GXSDCNoFlip:
.ae48	18		clc				clc
.ae49	60		rts				rts
.ae4a					GXPlotPoint:
.ae4a	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; start drawing
.ae4d	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae50	ac 54 06	ldy $0654			ldy 	gsOffset
.ae53	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae55	2d 52 06	and $0652			and 	gxANDValue
.ae58	4d 51 06	eor $0651			eor 	gxEORValue
.ae5b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae5d	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae60	18		clc				clc
.ae61	60		rts				rts
.ae62					GXFillRectangle:
.ae62	38		sec				sec
.ae63	80 01		bra $ae66			bra 	GXRectangle
.ae65					GXFrameRectangle:
.ae65	18		clc				clc
.ae66					GXRectangle:
.ae66	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae69	f0 35		beq $aea0			beq 	_GXRFail
.ae6b	08		php				php 								; save Fill flag (CS)
.ae6c	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; start drawing
.ae6f	20 ef b2	jsr $b2ef			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae72	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae75	38		sec				sec 								; sec = Draw line
.ae76	20 a2 ae	jsr $aea2			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae79	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae7c	cd 48 06	cmp $0648			cmp 	gxY1
.ae7f	f0 19		beq $ae9a			beq 	_GXRectangleExit
.ae81					_GXRectLoop:
.ae81	20 2d b2	jsr $b22d			jsr 	GXMovePositionDown 			; down one.
.ae84	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae87	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae8a	cd 48 06	cmp $0648			cmp 	gXY1
.ae8d	f0 07		beq $ae96			beq 	_GXLastLine
.ae8f	28		plp				plp 								; get flag back
.ae90	08		php				php
.ae91	20 a2 ae	jsr $aea2			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae94	80 eb		bra $ae81			bra 	_GXRectLoop
.ae96					_GXLastLine:
.ae96	38		sec				sec
.ae97	20 a2 ae	jsr $aea2			jsr 	GXDrawLineX1X0
.ae9a					_GXRectangleExit:
.ae9a	68		pla				pla 								; throw fill flag.
.ae9b	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae9e	18		clc				clc
.ae9f	60		rts				rts
.aea0					_GXRFail:
.aea0	38		sec				sec
.aea1	60		rts				rts
.aea2					GXDrawLineX1X0:
.aea2	08		php				php 								; save solid/either-end
.aea3	38		sec				sec
.aea4	ad 46 06	lda $0646			lda		gXX1
.aea7	ed 42 06	sbc $0642			sbc 	gXX0
.aeaa	85 36		sta $36				sta 	gxzTemp0
.aeac	ad 47 06	lda $0647			lda 	gXX1+1
.aeaf	ed 43 06	sbc $0643			sbc 	gXX0+1
.aeb2	85 37		sta $37				sta 	gxzTemp0+1
.aeb4	28		plp				plp
.aeb5					GXDrawLineTemp0:
.aeb5	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.aeb7	48		pha				pha
.aeb8	a5 3d		lda $3d				lda 	gxzScreen+1
.aeba	48		pha				pha
.aebb	ad 54 06	lda $0654			lda 	gsOffset
.aebe	48		pha				pha
.aebf	a5 0b		lda $0b				lda 	GXEditSlot
.aec1	48		pha				pha
.aec2	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aec5	90 1e		bcc $aee5			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aec7					_GXDLTLine:
.aec7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aec9	2d 52 06	and $0652			and 	gxANDValue
.aecc	4d 51 06	eor $0651			eor 	gxEORValue
.aecf	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aed1	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aed3	d0 04		bne $aed9			bne 	_GXDLTNoBorrow
.aed5	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aed7	30 2e		bmi $af07			bmi 	_GXDLTExit
.aed9					_GXDLTNoBorrow:
.aed9	c6 36		dec $36				dec 	gxzTemp0
.aedb	c8		iny				iny 								; next slot.
.aedc	d0 e9		bne $aec7			bne 	_GXDLTLine
.aede	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aee0	20 15 af	jsr $af15			jsr 	GXDLTCheckWrap				; check for new page.
.aee3	80 e2		bra $aec7			bra 	_GXDLTLine
.aee5					_GXDLTEndPoints:
.aee5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aee7	2d 52 06	and $0652			and 	gxANDValue
.aeea	4d 51 06	eor $0651			eor 	gxEORValue
.aeed	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aeef	98		tya				tya 								; advance to right side
.aef0	18		clc				clc
.aef1	65 36		adc $36				adc 	gxzTemp0
.aef3	a8		tay				tay
.aef4	a5 3d		lda $3d				lda 	gxzScreen+1
.aef6	65 37		adc $37				adc 	gxzTemp0+1
.aef8	85 3d		sta $3d				sta 	gxzScreen+1
.aefa	20 15 af	jsr $af15			jsr 	GXDLTCheckWrap 			; fix up.
.aefd	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aeff	2d 52 06	and $0652			and 	gxANDValue
.af02	4d 51 06	eor $0651			eor 	gxEORValue
.af05	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.af07					_GXDLTExit:
.af07	68		pla				pla
.af08	85 0b		sta $0b				sta 	GXEditSlot
.af0a	68		pla				pla
.af0b	8d 54 06	sta $0654			sta 	gsOffset
.af0e	68		pla				pla
.af0f	85 3d		sta $3d				sta 	gxzScreen+1
.af11	68		pla				pla
.af12	85 3c		sta $3c				sta 	gxzScreen
.af14	60		rts				rts
.af15					GXDLTCheckWrap:
.af15	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.af17	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.af19	90 06		bcc $af21			bcc 	_GXDLTCWExit
.af1b	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af1d	85 3d		sta $3d				sta 	gxzScreen+1
.af1f	e6 0b		inc $0b				inc 	GXEditSlot
.af21					_GXDLTCWExit:
.af21	60		rts				rts
.af22					GXDrawGraphicElement:
.af22	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af25	3a		dec a				dec 	a
.af26	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af29	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af2c	f0 67		beq $af95			beq 	_GXSLFail
.af2e	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af31	48		pha				pha
.af32	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af35	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af38	20 c7 b1	jsr $b1c7			jsr 	gxOpenBitmap 				; open the bitmap.
.af3b	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af3e	4a		lsr a				lsr 	a
.af3f	4a		lsr a				lsr 	a
.af40	4a		lsr a				lsr 	a
.af41	29 07		and #$07			and		#7
.af43	1a		inc a				inc 	a
.af44	8d eb 06	sta $06eb			sta 	gxScale
.af47	64 38		stz $38				stz 	gxzTemp1					; start first line
.af49					_GXGELoop:
.af49	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af4b	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af4e	10 06		bpl $af56			bpl		_GXNoVFlip
.af50	ad e8 06	lda $06e8			lda 	gxMask
.af53	38		sec				sec
.af54	e5 38		sbc $38				sbc 	gxzTemp1
.af56					_GXNoVFlip:
.af56	aa		tax				tax 								; get the Xth line.
.af57	20 97 af	jsr $af97			jsr 	_GXCallAcquire 				; get that data.
.af5a	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af5d	85 39		sta $39				sta 	gxzTemp1+1
.af5f					_GXGELoop2:
.af5f	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af62	cd 4e 06	cmp $064e			cmp 	gxHeight
.af65	b0 10		bcs $af77			bcs 	_GXDGEExit
.af67	20 9a af	jsr $af9a			jsr 	GXRenderOneLine 			; render line
.af6a	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af6c	d0 f1		bne $af5f			bne 	_GXGELoop2
.af6e	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af70	a5 38		lda $38				lda 	gxzTemp1
.af72	cd e7 06	cmp $06e7			cmp 	gxSize
.af75	d0 d2		bne $af49			bne 	_GXGELoop
.af77					_GXDGEExit:
.af77	68		pla				pla 								; restore Y for next time
.af78	8d 44 06	sta $0644			sta 	gxY0
.af7b	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af7e					_GXShiftLeft:
.af7e	18		clc				clc
.af7f	ad e7 06	lda $06e7			lda 	gxSize
.af82	6d 42 06	adc $0642			adc 	gxX0
.af85	8d 42 06	sta $0642			sta 	gxX0
.af88	90 03		bcc $af8d			bcc 	_GXSLNoCarry
.af8a	ee 43 06	inc $0643			inc 	gxX0+1
.af8d					_GXSLNoCarry:
.af8d	ca		dex				dex
.af8e	d0 ee		bne $af7e			bne 	_GXShiftLeft
.af90	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.af93	18		clc				clc
.af94	60		rts				rts
.af95					_GXSLFail:
.af95	38		sec				sec
.af96	60		rts				rts
.af97					_GXCallAcquire:
.af97	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.af9a					GXRenderOneLine:
.af9a	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 				; calculate position/offset.
.af9d	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.afa0	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.afa2					_GXROLLoop1:
.afa2	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.afa5	85 3b		sta $3b				sta 	gxzTemp2+1
.afa7					_GXROLLoop2:
.afa7	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.afa9	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.afac	50 06		bvc $afb4			bvc 	_GXNoHFlip
.afae	ad e8 06	lda $06e8			lda 	gxMask
.afb1	38		sec				sec
.afb2	e5 3a		sbc $3a				sbc 	gxzTemp2
.afb4					_GXNoHFlip:
.afb4	aa		tax				tax 								; read from the pixel buffer
.afb5	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.afb8	d0 07		bne $afc1			bne 	_GXDraw 					; draw if non zero
.afba	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afbd	29 04		and #$04			and 	#4
.afbf	f0 0a		beq $afcb			beq 	_GXZeroPixel
.afc1					_GXDraw:
.afc1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afc3	2d 52 06	and $0652			and 	gxANDValue
.afc6	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afc9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afcb					_GXZeroPixel:
.afcb	c8		iny				iny 								; advance pointer
.afcc	d0 05		bne $afd3			bne 	_GXNoShift
.afce	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afd0	20 15 af	jsr $af15			jsr 	GXDLTCheckWrap				; check for new page.
.afd3					_GXNoShift:
.afd3	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afd5	d0 d0		bne $afa7			bne 	_GXROLLoop2
.afd7	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afd9	a5 3a		lda $3a				lda 	gxzTemp2
.afdb	cd e7 06	cmp $06e7			cmp 	gxSize
.afde	d0 c2		bne $afa2			bne 	_GXROLLoop1
.afe0	ee 44 06	inc $0644			inc 	gxY0
.afe3	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afe4					GXFontHandler:
.afe4	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afe6	4d 4f 06	eor $064f			eor 	gxMode
.afe9	8d ec 06	sta $06ec			sta 	gxUseMode
.afec	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.afee	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.aff0	26 37		rol $37				rol	 	gxzTemp0+1
.aff2	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.aff4	26 37		rol $37				rol	 	gxzTemp0+1
.aff6	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.aff8	26 37		rol $37				rol	 	gxzTemp0+1
.affa	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.affc	09 c0		ora #$c0			ora 	#$C0
.affe	85 37		sta $37				sta 	gxzTemp0+1
.b000	a9 08		lda #$08			lda 	#8 							; size 8x8
.b002	a2 0a		ldx #$0a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.b004	a0 b0		ldy #$b0			ldy 	#GXGetGraphicDataFont >> 8
.b006	20 22 af	jsr $af22			jsr 	GXDrawGraphicElement
.b009	60		rts				rts
.b00a					GXGetGraphicDataFont:
.b00a	8a		txa				txa 								; X->Y
.b00b	a8		tay				tay
.b00c	a6 01		ldx $01				ldx 	1 							; preserve old value
.b00e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.b010	85 01		sta $01				sta 	1
.b012	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.b014	86 01		stx $01				stx 	1 							; put old value back.
.b016	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.b018					_GXExpand:
.b018	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b01b	0a		asl a				asl 	a 							; shift bit 7 into C
.b01c	90 08		bcc $b026			bcc 	_GXNoPixel
.b01e	48		pha				pha 								; if set, set pixel buffer to current colour.
.b01f	ad 50 06	lda $0650			lda 	gxColour
.b022	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b025	68		pla				pla
.b026					_GXNoPixel:
.b026	e8		inx				inx 								; do the whole byte.
.b027	e0 08		cpx #$08			cpx 	#8
.b029	d0 ed		bne $b018			bne 	_GXExpand
.b02b	60		rts				rts
.b02c					GXSpriteHandler:
.b02c	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b02e	4d 4f 06	eor $064f			eor 	gxMode
.b031	8d ec 06	sta $06ec			sta 	gxUseMode
.b034	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b036	da		phx				phx
.b037	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; can access sprite information
.b03a	68		pla				pla
.b03b	20 a8 b2	jsr $b2a8			jsr 	GXFindSprite 				; get the sprite address
.b03e	08		php				php
.b03f	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.b042	28		plp				plp
.b043	b0 0a		bcs $b04f			bcs		_GXSHExit 					; exit if find failed.
.b045	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b048	a2 50		ldx #$50			ldx 	#GXSpriteAcquire & $FF
.b04a	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b04c	20 22 af	jsr $af22			jsr 	GXDrawGraphicElement
.b04f					_GXSHExit:
.b04f	60		rts				rts
.b050					GXSpriteAcquire:
.b050	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b053	85 0b		sta $0b				sta 	GXEditSlot
.b055	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b057	a9 00		lda #$00			lda 	#0
.b059	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b05c					_GXTimesRowNumber:
.b05c	18		clc				clc
.b05d	65 36		adc $36				adc 	zTemp0
.b05f	ca		dex				dex
.b060	10 fa		bpl $b05c			bpl 	_GXTimesRowNumber
.b062	64 37		stz $37				stz 	gxzTemp0+1
.b064	0a		asl a				asl 	a 							; row x 2,4,6,8
.b065	26 37		rol $37				rol 	gxzTemp0+1
.b067	0a		asl a				asl 	a 							; row x 4,8,12,16
.b068	26 37		rol $37				rol 	gxzTemp0+1
.b06a	0a		asl a				asl 	a 							; row x 8,16,24,32
.b06b	26 37		rol $37				rol 	gxzTemp0+1
.b06d	85 36		sta $36				sta 	gxzTemp0
.b06f	18		clc				clc 								; add base address.
.b070	a5 36		lda $36				lda 	gxzTemp0
.b072	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b075	85 36		sta $36				sta 	gxzTemp0
.b077	a5 37		lda $37				lda 	gxzTemp0+1
.b079	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b07c					_GXSAFindPage:
.b07c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b07e	90 06		bcc $b086			bcc 	_GXSAFoundPage
.b080	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b082	e6 0b		inc $0b				inc 	GXEditSlot
.b084	80 f6		bra $b07c			bra 	_GXSAFindPage
.b086					_GXSAFoundPage:
.b086	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b088	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b08a	a0 00		ldy #$00			ldy 	#0
.b08c					_GXSACopyLoop:
.b08c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b08e	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b091	c8		iny				iny
.b092	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b095	d0 f5		bne $b08c			bne 	_GXSACopyLoop
.b097	60		rts				rts
.b098					GXSelect:
.b098	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b09b	f0 22		beq $b0bf			beq 	_GXSFail
.b09d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b09f	c9 40		cmp #$40			cmp 	#64
.b0a1	b0 1c		bcs $b0bf			bcs 	_GXSFail
.b0a3	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b0a6	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b0a8	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b0aa	06 36		asl $36				asl 	gxzTemp0
.b0ac	06 36		asl $36				asl 	gxzTemp0
.b0ae	06 36		asl $36				asl 	gxzTemp0
.b0b0	2a		rol a				rol 	a
.b0b1	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b0b3	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b0b6	85 37		sta $37				sta 	gxzTemp0+1
.b0b8	a5 36		lda $36				lda 	gxzTemp0
.b0ba	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0bd	18		clc				clc
.b0be	60		rts				rts
.b0bf					_GXSFail:
.b0bf	38		sec				sec
.b0c0	60		rts				rts
.b0c1					GXSelectImage:
.b0c1	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0c4	f0 74		beq $b13a			beq 	_GXSIFail
.b0c6	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0c9	f0 6f		beq $b13a			beq 	_GXSIFail 					; (checking the MSB)
.b0cb	64 01		stz $01				stz 	1
.b0cd	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0cf	d0 6b		bne $b13c			bne 	_GXSIHide
.b0d1	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0d3	48		pha				pha
.b0d4	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap
.b0d7	68		pla				pla
.b0d8	20 a8 b2	jsr $b2a8			jsr 	GXFindSprite
.b0db	b0 5a		bcs $b137			bcs 	_GXSICloseFail 				; no image
.b0dd	a0 01		ldy #$01			ldy 	#1
.b0df	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0e2	85 36		sta $36				sta 	gxzTemp0
.b0e4	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0e7	85 37		sta $37				sta 	gxzTemp0+1
.b0e9	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0ec	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0ee	18		clc				clc
.b0ef	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0f2	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0f5	c8		iny				iny
.b0f6	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0f8	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b0fb	69 00		adc #$00			adc 	#0
.b0fd	c8		iny				iny
.b0fe	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b100	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b103	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b105	2a		rol a				rol 	a 							; x 2
.b106	0a		asl a				asl 	a 							; x 4
.b107	0a		asl a				asl 	a 							; x 8
.b108	0a		asl a				asl 	a 							; x 16
.b109	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b10c	0a		asl a				asl 	a 							; 1 shift
.b10d	09 01		ora #$01			ora 	#1 							; enable sprite.
.b10f	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b111	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.b114	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b117	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b11a	29 3f		and #$3f			and 	#$3F
.b11c	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b11f	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b122	6a		ror a				ror 	a 							; shift into bits 6/7
.b123	6a		ror a				ror 	a
.b124	6a		ror a				ror 	a
.b125	29 c0		and #$c0			and 	#$C0
.b127	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b12a	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b12d	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b130	29 7f		and #$7f			and 	#$7F
.b132	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b135	18		clc				clc
.b136	60		rts				rts
.b137					_GXSICloseFail:
.b137	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.b13a					_GXSIFail:
.b13a	38		sec				sec
.b13b	60		rts				rts
.b13c					_GXSIHide:
.b13c	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b13f	85 36		sta $36				sta 	gxzTemp0
.b141	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b144	85 37		sta $37				sta 	gxzTemp0+1
.b146	a9 00		lda #$00			lda 	#0
.b148	92 36		sta ($36)			sta 	(gxzTemp0)
.b14a	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b14d	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b150	09 80		ora #$80			ora 	#$80
.b152	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b155	18		clc				clc
.b156	60		rts				rts
.b157					GXMoveSprite:
.b157	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b15a	f0 65		beq $b1c1			beq 	_GXSIFail
.b15c	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b15f	f0 60		beq $b1c1			beq 	_GXSIFail
.b161	85 37		sta $37				sta 	gxzTemp0+1
.b163	a0 04		ldy #$04			ldy 	#4
.b165	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b168	85 36		sta $36				sta 	gxzTemp0
.b16a	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b16d	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b170	2a		rol a				rol 	a	 						; into bits 0,1.
.b171	2a		rol a				rol 	a
.b172	2a		rol a				rol 	a
.b173	29 03		and #$03			and 	#3
.b175	aa		tax				tax
.b176	bd c3 b1	lda $b1c3,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b179	48		pha				pha
.b17a	18		clc				clc
.b17b	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b17e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b180	c8		iny				iny
.b181	ad 43 06	lda $0643			lda 	gxX0+1
.b184	69 00		adc #$00			adc 	#0
.b186	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b188	c8		iny				iny
.b189	68		pla				pla
.b18a	18		clc				clc
.b18b	6d 44 06	adc $0644			adc 	gxY0
.b18e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b190	a9 00		lda #$00			lda 	#0
.b192	69 00		adc #$00			adc 	#0
.b194	c8		iny				iny
.b195	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b197	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b19a	6e 42 06	ror $0642			ror 	gxX0
.b19d	4e 42 06	lsr $0642			lsr 	gxX0
.b1a0	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b1a3	4e 44 06	lsr $0644			lsr 	gxY0
.b1a6	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b1a9	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b1ac	29 80		and #$80			and 	#$80
.b1ae	0d 42 06	ora $0642			ora 	gxX0
.b1b1	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b1b4	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b1b7	29 c0		and #$c0			and 	#$C0
.b1b9	0d 44 06	ora $0644			ora 	gxY0
.b1bc	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1bf	18		clc				clc
.b1c0	60		rts				rts
.b1c1					_GXSIFail:
.b1c1	38		sec				sec
.b1c2	60		rts				rts
.b1c3					_GXMSOffset:
>b1c3	1c						.byte 	32-8/2
>b1c4	18						.byte 	32-16/2
>b1c5	14						.byte 	32-24/2
>b1c6	10						.byte 	32-32/2
.b1c7					GXOpenBitmap:
.b1c7	78		sei				sei 								; no interrupts here
.b1c8	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1ca	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1cd	58		cli				cli
.b1ce	60		rts				rts
.b1cf					GXCloseBitmap:
.b1cf	78		sei				sei
.b1d0	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1d3	85 0b		sta $0b				sta 	GXEditSlot
.b1d5	58		cli				cli
.b1d6	60		rts				rts
.b1d7					GXPositionCalc:
.b1d7	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1d9	48		pha				pha
.b1da	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1dd	85 3c		sta $3c				sta 	gxzScreen
.b1df	64 3d		stz $3d				stz 	gxzScreen+1
.b1e1	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1e3	26 3d		rol $3d				rol 	gxzScreen+1
.b1e5	06 3c		asl $3c				asl 	gxzScreen
.b1e7	26 3d		rol $3d				rol 	gxzScreen+1
.b1e9	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1ea	65 3c		adc $3c				adc 	gxzScreen
.b1ec	85 3c		sta $3c				sta 	gxzScreen
.b1ee	90 02		bcc $b1f2			bcc 	_GXPCNoCarry
.b1f0	e6 3d		inc $3d				inc 	gxzScreen+1
.b1f2					_GXPCNoCarry:
.b1f2	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1f4	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1f6	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1f8	85 36		sta $36				sta 	gxzTemp0
.b1fa	64 3d		stz $3d				stz 	gxzScreen+1
.b1fc	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b1fe					_GXPCMultiply32:
.b1fe	06 3c		asl $3c				asl 	gxzScreen
.b200	26 3d		rol $3d				rol 	gxzScreen+1
.b202	3a		dec a				dec 	a
.b203	d0 f9		bne $b1fe			bne 	_GXPCMultiply32
.b205	18		clc				clc
.b206	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b209	65 3c		adc $3c				adc 	gxzScreen
.b20b	8d 54 06	sta $0654			sta 	gsOffset
.b20e	ad 43 06	lda $0643			lda 	GXX0+1
.b211	65 3d		adc $3d				adc 	gxzScreen+1
.b213	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b215	90 04		bcc $b21b			bcc 	_GXPCNoOverflow
.b217	29 1f		and #$1f			and 	#$1F 						; fix it up
.b219	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b21b					_GXPCNoOverflow:
.b21b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b21d	85 3d		sta $3d				sta 	gxzScreen+1
.b21f	64 3c		stz $3c				stz 	gxzScreen
.b221	18		clc				clc
.b222	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b224	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b227	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b229	68		pla				pla
.b22a	85 36		sta $36				sta 	gxzTemp0
.b22c	60		rts				rts
.b22d					GXMovePositionDown:
.b22d	18		clc				clc 								; add 320 to offset/temp+1
.b22e	ad 54 06	lda $0654			lda 	gsOffset
.b231	69 40		adc #$40			adc 	#64
.b233	8d 54 06	sta $0654			sta 	gsOffset
.b236	a5 3d		lda $3d				lda 	gxzScreen+1
.b238	69 01		adc #$01			adc 	#1
.b23a	85 3d		sta $3d				sta 	gxzScreen+1
.b23c	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b23e	90 07		bcc $b247			bcc 	_GXMPDExit
.b240	38		sec				sec  								; next page
.b241	e9 20		sbc #$20			sbc 	#$20
.b243	85 3d		sta $3d				sta 	gxzScreen+1
.b245	e6 0b		inc $0b				inc 	GXEditSlot
.b247					_GXMPDExit:
.b247	60		rts				rts
.b248					GXCollide:
.b248	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b24a	aa		tax				tax
.b24b	05 37		ora $37				ora 	gxzTemp0+1
.b24d	29 c0		and #$c0			and 	#$C0
.b24f	38		sec				sec
.b250	d0 53		bne $b2a5			bne 	_GXCollideFail 				; if either >= 64, fail.
.b252	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b254	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b257	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b25a	30 48		bmi $b2a4			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b25c	18		clc				clc 								; need to calculate sum of sizes.
.b25d	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b260	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b263	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b265	6a		ror a				ror 	a 							; 5/6/7
.b266	4a		lsr a				lsr 	a 							; 4/5/6
.b267	4a		lsr a				lsr 	a 							; 3/4/5
.b268	4a		lsr a				lsr 	a 							; 2/3/4
.b269	18		clc				clc
.b26a	69 08		adc #$08			adc 	#$08
.b26c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b26d	4a		lsr a				lsr 	a
.b26e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b270	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b273	29 3f		and #$3f			and 	#$3F
.b275	85 39		sta $39				sta 	gxzTemp1+1
.b277	38		sec				sec
.b278	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b27b	29 3f		and #$3f			and 	#$3F
.b27d	e5 39		sbc $39				sbc 	gxzTemp1+1
.b27f	b0 03		bcs $b284			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b281	49 ff		eor #$ff			eor 	#$FF
.b283	1a		inc a				inc 	a
.b284					_GXCAbs1:
.b284	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b286	b0 1c		bcs $b2a4			bcs 	_GXOkayFail
.b288	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b28a	38		sec				sec 								; calculate |x1-x0|
.b28b	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b28e	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b291	b0 03		bcs $b296			bcs 	_GXCAbs2
.b293	49 ff		eor #$ff			eor 	#$FF
.b295	1a		inc a				inc 	a
.b296					_GXCAbs2:
.b296	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b298	b0 0a		bcs $b2a4			bcs 	_GXOkayFail
.b29a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b29c	90 02		bcc $b2a0			bcc 	_GXCHaveLowest
.b29e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b2a0					_GXCHaveLowest:
.b2a0	0a		asl a				asl 	a 							; scale to allow for >> 2
.b2a1	0a		asl a				asl 	a
.b2a2	18		clc				clc
.b2a3	60		rts				rts
.b2a4					_GXOkayFail:
.b2a4	18		clc				clc
.b2a5					_GXCollideFail:
.b2a5	a9 ff		lda #$ff			lda 	#$FF
.b2a7	60		rts				rts
.b2a8					GXFindSprite:
.b2a8	aa		tax				tax
.b2a9	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b2ac	85 0b		sta $0b				sta 	GXEditSlot
.b2ae	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b2b1	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b2b4	f0 33		beq $b2e9			beq 	_GXFSFail
.b2b6	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b2b9	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2bc	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2bf	48		pha				pha 								; save twice
.b2c0	48		pha				pha
.b2c1	29 03		and #$03			and 	#3 							; get sprite size
.b2c3	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2c6	aa		tax				tax
.b2c7	bd eb b2	lda $b2eb,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2ca	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2cd	68		pla				pla 								; get LUT
.b2ce	4a		lsr a				lsr		a
.b2cf	4a		lsr a				lsr		a
.b2d0	29 03		and #$03			and 	#3
.b2d2	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2d5	68		pla				pla 								; address, neeeds to be x 4
.b2d6	29 f0		and #$f0			and 	#$F0
.b2d8	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2db	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2de	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2e1	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2e4	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2e7	18		clc				clc
.b2e8	60		rts				rts
.b2e9					_GXFSFail:
.b2e9	38		sec				sec
.b2ea	60		rts				rts
.b2eb					_GXFXSSTTable:
>b2eb	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2ef					GXSortXY:
.b2ef	20 0d b3	jsr $b30d			jsr 	GXSortY 					; will be sorted on Y now
.b2f2	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2f5	cd 46 06	cmp $0646			cmp 	gxX1
.b2f8	ad 43 06	lda $0643			lda 	gXX0+1
.b2fb	ed 47 06	sbc $0647			sbc 	gXX1+1
.b2fe	90 0c		bcc $b30c			bcc 	_GXSXYExit 					; X0 < X1 exit
.b300	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b302	a0 04		ldy #$04			ldy 	#4
.b304	20 21 b3	jsr $b321			jsr 	GXSwapXY
.b307	e8		inx				inx
.b308	c8		iny				iny
.b309	20 21 b3	jsr $b321			jsr 	GXSwapXY
.b30c					_GXSXYExit:
.b30c	60		rts				rts
.b30d					GXSortY:
.b30d	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b310	cd 48 06	cmp $0648			cmp 	gxY1
.b313	90 0b		bcc $b320			bcc 	_GXSYSorted
.b315	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b317	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b319					_GXSwap1:
.b319	20 21 b3	jsr $b321			jsr 	GXSwapXY
.b31c	88		dey				dey
.b31d	ca		dex				dex
.b31e	10 f9		bpl $b319			bpl 	_GXSwap1
.b320					_GXSYSorted:
.b320	60		rts				rts
.b321					GXSwapXY:
.b321	bd 42 06	lda $0642,x			lda 	gxX0,x
.b324	48		pha				pha
.b325	b9 42 06	lda $0642,y			lda 	gxX0,y
.b328	9d 42 06	sta $0642,x			sta 	gxX0,x
.b32b	68		pla				pla
.b32c	99 42 06	sta $0642,y			sta 	gxX0,y
.b32f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b822					KeywordSet0:
>b822	00 65					.text	0,$65,""               ; $80 !0:EOF
>b824	00 58					.text	0,$58,""               ; $81 !1:SH1
>b826	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b828	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b82e	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b836	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b83c	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b843	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b84b	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b852	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b859	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b85f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b865	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b86d	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b874	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b87b	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b882	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b88a	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b890	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b896	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b89d	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b8a3	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b8a9	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b8b1	28
>b8b2	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b8ba	28
>b8bb	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b8c1	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b8c7	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b8cd	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b8d4	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b8dc	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b8e2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b8e8	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b8ed	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b8f1	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b8f7	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b8ff	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b906	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b90d	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b915	43
>b916	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b91c	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b922	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b929	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b92f	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b933	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b939	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b941	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b948	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b94d	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b954	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b95c	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b962	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b967	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b96f	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b975	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b97b	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b980	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b987	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b98d	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b993	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b99a	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b99f	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b9a5	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b9ac	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b9b1	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b9b5	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b9bd	45
>b9be	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b9c6	45
>b9c7	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b9cd	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b9d4	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b9da	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b9e0	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b9e5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b9ed	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b9f4	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b9fc	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>ba02	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>ba06	ff					.text	$FF
.ba07					KeywordSet1:
>ba07	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba09	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba0b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba0d	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>ba15	4c 45
>ba17	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba1f	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba27	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba2c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba32	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba37	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba3f	45
>ba40	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba45	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba4d	53
>ba4e	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba54	ff					.text	$FF
.ba55					KeywordSet2:
>ba55	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba57	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba59	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba5b	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba60	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba65	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba6a	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba6f	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ba74	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ba79	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ba7e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ba83	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ba88	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ba8d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ba92	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ba97	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ba9c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>baa1	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>baa6	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>baab	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>bab0	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>bab5	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>baba	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>babf	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>bac4	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>bac9	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bace	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>bad3	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>bad8	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>badd	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bae2	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>bae7	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>baec	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>baf1	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>baf6	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bafb	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>bb00	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>bb05	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>bb0a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>bb0f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bb14	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bb19	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb1e	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb23	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb28	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb2d	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb32	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb37	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb3c	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb41	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb46	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb4b	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb50	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb55	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb5a	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb5f	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb64	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb69	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb6e	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb73	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bb78	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bb7d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bb82	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bb87	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bb8c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bb91	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bb96	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bb9b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bba0	ff					.text	$FF
.b330					ListConvertLine:
.b330	9c 9d 04	stz $049d			stz 	tbOffset
.b333	9c ab 04	stz $04ab			stz 	tokenBuffer
.b336	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b338	b1 30		lda ($30),y			lda 	(codePtr),y
.b33a	aa		tax				tax
.b33b	88		dey				dey
.b33c	b1 30		lda ($30),y			lda 	(codePtr),y
.b33e	20 63 92	jsr $9263			jsr 	ConvertInt16
.b341	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b343	86 37		stx $37				stx 	zTemp0+1
.b345	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b347	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b34a	a0 00		ldy #$00			ldy 	#0
.b34c					_LCCopyNumber:
.b34c	b1 36		lda ($36),y			lda 	(zTemp0),y
.b34e	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b351	c8		iny				iny
.b352	b1 36		lda ($36),y			lda 	(zTemp0),y
.b354	d0 f6		bne $b34c			bne 	_LCCopyNumber
.b356	20 f6 8c	jsr $8cf6			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.b359	48		pha				pha 								; save on stack
.b35a	10 0c		bpl $b368			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b35c	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b35d	6d a6 04	adc $04a6			adc 	listIndent
.b360	8d a6 04	sta $04a6			sta 	listIndent
.b363	10 03		bpl $b368			bpl 	_LCNoAdjust
.b365	9c a6 04	stz $04a6			stz 	listIndent
.b368					_LCNoAdjust:
.b368	18		clc				clc		 							; work out actual indent.
.b369	ad a6 04	lda $04a6			lda 	listIndent
.b36c	0a		asl a				asl 	a
.b36d	69 06		adc #$06			adc 	#6
.b36f	85 36		sta $36				sta 	zTemp0
.b371					_LCPadOut:
.b371	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b373	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b376	ad 9d 04	lda $049d			lda 	tbOffset
.b379	c5 36		cmp $36				cmp 	zTemp0
.b37b	d0 f4		bne $b371			bne 	_LCPadOut
.b37d	a0 03		ldy #$03			ldy 	#3 							; start position.
.b37f					_LCMainLoop:
.b37f	a9 87		lda #$87			lda 	#CLIPunctuation+$80
.b381	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b384	b1 30		lda ($30),y			lda 	(codePtr),y
.b386	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b388	f0 17		beq $b3a1			beq 	_LCExit
.b38a	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b38c	90 1e		bcc $b3ac			bcc 	_LCDoubles
.b38e	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b390	90 2a		bcc $b3bc			bcc 	_LCShiftPunc
.b392	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b394	90 35		bcc $b3cb			bcc 	_LCPunctuation
.b396	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b398	90 3e		bcc $b3d8			bcc 	_LCIdentifiers
.b39a	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b39c	90 5f		bcc $b3fd			bcc 	_LCTokens
.b39e	4c 5d b4	jmp $b45d			jmp 	_LCData 					; 254-5 are data objects
.b3a1					_LCExit:
.b3a1	68		pla				pla 								; get old indent adjust
.b3a2	30 07		bmi $b3ab			bmi 	_LCExit2
.b3a4	18		clc				clc 								; add to indent if +ve
.b3a5	6d a6 04	adc $04a6			adc 	listIndent
.b3a8	8d a6 04	sta $04a6			sta 	listIndent
.b3ab					_LCExit2:
.b3ab	60		rts				rts
.b3ac					_LCDoubles:
.b3ac	48		pha				pha
.b3ad	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b3ae	29 02		and #$02			and 	#2
.b3b0	09 3c		ora #$3c			ora 	#60 						; make < >
.b3b2	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b3b5	68		pla				pla 								; restore, do lower bit
.b3b6	29 03		and #$03			and 	#3
.b3b8	09 3c		ora #$3c			ora 	#60
.b3ba	80 0f		bra $b3cb			bra		_LCPunctuation 				; print, increment, loop
.b3bc					_LCShiftPunc:
.b3bc	aa		tax				tax 								; save in X
.b3bd	29 07		and #$07			and 	#7 							; lower 3 bits
.b3bf	f0 02		beq $b3c3			beq 	_LCNoAdd
.b3c1	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3c3					_LCNoAdd:
.b3c3	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3c5	90 02		bcc $b3c9			bcc 	_LCNoAdd2
.b3c7	09 20		ora #$20			ora 	#32 						; adds $20
.b3c9					_LCNoAdd2:
.b3c9	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3cb					_LCPunctuation:
.b3cb	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3cd	d0 03		bne $b3d2			bne 	_LCPContinue
.b3cf	20 a4 b4	jsr $b4a4			jsr 	LCDeleteLastSpace
.b3d2					_LCPContinue:
.b3d2	c8		iny				iny 								; consume character
.b3d3	20 8e b4	jsr $b48e			jsr 	LCLWrite 					; write it out.
.b3d6	80 a7		bra $b37f			bra 	_LCMainLoop 				; go round again.
.b3d8					_LCIdentifiers:
.b3d8	18		clc				clc 								; convert to physical address
.b3d9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3db	85 37		sta $37				sta 	zTemp0+1
.b3dd	c8		iny				iny
.b3de	b1 30		lda ($30),y			lda 	(codePtr),y
.b3e0	85 36		sta $36				sta 	zTemp0
.b3e2	c8		iny				iny
.b3e3	5a		phy				phy 								; save position
.b3e4	a9 8a		lda #$8a			lda 	#CLIIdentifier+$80
.b3e6	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b3e9	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3eb					_LCOutIdentifier:
.b3eb	c8		iny				iny
.b3ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3ee	29 7f		and #$7f			and 	#$7F
.b3f0	20 e0 b4	jsr $b4e0			jsr 	LCLLowerCase
.b3f3	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b3f6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3f8	10 f1		bpl $b3eb			bpl 	_LCOutIdentifier
.b3fa	7a		ply				ply 								; restore position
.b3fb	80 82		bra $b37f			bra 	_LCMainLoop
.b3fd					_LCTokens:
.b3fd	aa		tax				tax 								; token in X
.b3fe	a9 55		lda #$55			lda 	#((KeywordSet2) & $FF)
.b400	85 36		sta $36				sta 	0+zTemp0
.b402	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b404	85 37		sta $37				sta 	1+zTemp0
.b406	e0 82		cpx #$82			cpx 	#$82
.b408	f0 16		beq $b420			beq 	_LCUseShift
.b40a	a9 07		lda #$07			lda 	#((KeywordSet1) & $FF)
.b40c	85 36		sta $36				sta 	0+zTemp0
.b40e	a9 ba		lda #$ba			lda 	#((KeywordSet1) >> 8)
.b410	85 37		sta $37				sta 	1+zTemp0
.b412	e0 81		cpx #$81			cpx 	#$81
.b414	f0 0a		beq $b420			beq 	_LCUseShift
.b416	a9 22		lda #$22			lda 	#((KeywordSet0) & $FF)
.b418	85 36		sta $36				sta 	0+zTemp0
.b41a	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b41c	85 37		sta $37				sta 	1+zTemp0
.b41e	80 01		bra $b421			bra 	_LCNoShift
.b420					_LCUseShift:
.b420	c8		iny				iny
.b421					_LCNoShift:
.b421	20 b8 b4	jsr $b4b8			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.b424	b1 30		lda ($30),y			lda 	(codePtr),y
.b426	aa		tax				tax 								; into X
.b427					_LCFindText:
.b427	ca		dex				dex
.b428	10 0e		bpl $b438			bpl 	_LCFoundText 				; found text.
.b42a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b42c	1a		inc a				inc 	a 							; one extra for size
.b42d	38		sec				sec 								; one extra for checksum
.b42e	65 36		adc $36				adc 	zTemp0 						; go to next token
.b430	85 36		sta $36				sta 	zTemp0
.b432	90 f3		bcc $b427			bcc 	_LCFindText
.b434	e6 37		inc $37				inc 	zTemp0+1
.b436	80 ef		bra $b427			bra 	_LCFindText
.b438					_LCFoundText:
.b438	5a		phy				phy 								; save List position
.b439	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b43b	aa		tax				tax
.b43c	a9 83		lda #$83			lda 	#CLIToken+$80
.b43e	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b441	a0 02		ldy #$02			ldy 	#2
.b443					_LCCopyToken:
.b443	b1 36		lda ($36),y			lda 	(zTemp0),y
.b445	20 e0 b4	jsr $b4e0			jsr 	LCLLowerCase
.b448	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b44b	c8		iny				iny
.b44c	ca		dex				dex
.b44d	d0 f4		bne $b443			bne 	_LCCopyToken
.b44f	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b451	f0 05		beq $b458			beq 	_LCNoSpace
.b453	a9 20		lda #$20			lda 	#' '
.b455	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b458					_LCNoSpace:
.b458	7a		ply				ply 								; restore position.
.b459	c8		iny				iny 								; consume token
.b45a	4c 7f b3	jmp $b37f			jmp 	_LCMainLoop 				; and go around again.
.b45d					_LCData:
.b45d	48		pha				pha 								; save type $FE/$FF
.b45e	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b460	c9 fe		cmp #$fe			cmp 	#$FE
.b462	f0 07		beq $b46b			beq 	_LCHaveOpener
.b464	a2 22		ldx #$22			ldx 	#'"'
.b466	a9 81		lda #$81			lda 	#CLIData+$80
.b468	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b46b					_LCHaveOpener:
.b46b	8a		txa				txa 								; output prefix (# or ")
.b46c	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b46f	c8		iny				iny 								; get count
.b470	b1 30		lda ($30),y			lda 	(codePtr),y
.b472	aa		tax				tax
.b473	c8		iny				iny 								; point at first character
.b474					_LCOutData:
.b474	b1 30		lda ($30),y			lda 	(codePtr),y
.b476	c9 00		cmp #$00			cmp 	#0
.b478	f0 03		beq $b47d			beq 	_LCNoPrint
.b47a	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b47d					_LCNoPrint:
.b47d	c8		iny				iny
.b47e	ca		dex				dex
.b47f	d0 f3		bne $b474			bne 	_LCOutData
.b481	68		pla				pla 								; closing " required ?
.b482	c9 ff		cmp #$ff			cmp 	#$FF
.b484	d0 05		bne $b48b			bne 	_LCNoQuote
.b486	a9 22		lda #$22			lda 	#'"'
.b488	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b48b					_LCNoQuote:
.b48b	4c 7f b3	jmp $b37f			jmp 	_LCMainLoop
.b48e					LCLWrite:
.b48e	da		phx				phx
.b48f	ae 9d 04	ldx $049d			ldx 	tbOffset
.b492	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b495	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b498	ee 9d 04	inc $049d			inc 	tbOffset
.b49b	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b49d	30 03		bmi $b4a2			bmi 	_LCLNoColour
.b49f	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b4a2					_LCLNoColour:
.b4a2	fa		plx				plx
.b4a3	60		rts				rts
.b4a4					LCDeleteLastSpace:
.b4a4	48		pha				pha
.b4a5	da		phx				phx
.b4a6	ae 9d 04	ldx $049d			ldx 	tbOffset
.b4a9	f0 0a		beq $b4b5			beq 	_LCDLSExit
.b4ab	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b4ae	c9 20		cmp #$20			cmp 	#' '
.b4b0	d0 03		bne $b4b5			bne 	_LCDLSExit
.b4b2	ce 9d 04	dec $049d			dec 	tbOffset
.b4b5					_LCDLSExit:
.b4b5	fa		plx				plx
.b4b6	68		pla				pla
.b4b7	60		rts				rts
.b4b8					LCCheckSpaceRequired:
.b4b8	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4bb	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4bd	f0 1b		beq $b4da			beq 	_LCCSRSpace
.b4bf	c9 29		cmp #$29			cmp 	#')'
.b4c1	f0 17		beq $b4da			beq 	_LCCSRSpace
.b4c3	c9 23		cmp #$23			cmp 	#'#'
.b4c5	f0 13		beq $b4da			beq 	_LCCSRSpace
.b4c7	20 e0 b4	jsr $b4e0			jsr 	LCLLowerCase 				; saves a little effort
.b4ca	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4cc	90 11		bcc $b4df			bcc 	_LCCSRExit
.b4ce	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4d0	90 08		bcc $b4da			bcc 	_LCCSRSpace
.b4d2	c9 61		cmp #$61			cmp 	#"a"
.b4d4	90 09		bcc $b4df			bcc 	_LCCSRExit
.b4d6	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4d8	b0 05		bcs $b4df			bcs 	_LCCSRExit
.b4da					_LCCSRSpace:
.b4da	a9 20		lda #$20			lda 	#' '
.b4dc	20 8e b4	jsr $b48e			jsr 	LCLWrite
.b4df					_LCCSRExit:
.b4df	60		rts				rts
.b4e0					LCLLowerCase:
.b4e0	c9 41		cmp #$41			cmp 	#"A"
.b4e2	90 06		bcc $b4ea			bcc 	_LCLLCOut
.b4e4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4e6	b0 02		bcs $b4ea			bcs 	_LCLLCOut
.b4e8	69 20		adc #$20			adc 	#$20
.b4ea					_LCLLCOut:
.b4ea	60		rts				rts
.b4eb					LCLUpperCase:
.b4eb	c9 61		cmp #$61			cmp 	#"a"
.b4ed	90 06		bcc $b4f5			bcc 	_LCLUCOut
.b4ef	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4f1	b0 02		bcs $b4f5			bcs 	_LCLUCOut
.b4f3	e9 1f		sbc #$1f			sbc 	#$1F
.b4f5					_LCLUCOut:
.b4f5	60		rts				rts
.b4f6					TokeniseSearchTable:
.b4f6	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4f8	85 36		sta $36				sta 	zTemp0
.b4fa	a0 00		ldy #$00			ldy 	#0
.b4fc	a9 80		lda #$80			lda 	#$80 						; token #
.b4fe	85 38		sta $38				sta 	zTemp1
.b500					_TSTLoop:
.b500	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b502	30 49		bmi $b54d			bmi 	_TSTFail 					; -ve = end of table
.b504	f0 2e		beq $b534			beq 	_TSTNext 					; zero, check next it's a dummy
.b506	c8		iny				iny 								; get the hash
.b507	b1 36		lda ($36),y			lda 	(zTemp0),y
.b509	88		dey				dey
.b50a	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b50d	d0 25		bne $b534			bne 	_TSTNext
.b50f	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b512	38		sec				sec
.b513	ed 80 04	sbc $0480			sbc 	identStart
.b516	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b518	d0 1a		bne $b534			bne 	_TSTNext
.b51a	5a		phy				phy 								; save Y , we might fail
.b51b	c8		iny				iny 								; point to text
.b51c	c8		iny				iny
.b51d	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b520					_TSTCompareName:
.b520	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b523	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b525	d0 0c		bne $b533			bne 	_TSTNextPullY 				; fail, pullY and do next
.b527	e8		inx				inx
.b528	c8		iny				iny
.b529	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b52c	d0 f2		bne $b520			bne 	_TSTCompareName
.b52e	7a		ply				ply 								; throw Y
.b52f	a5 38		lda $38				lda 	zTemp1 						; get token #
.b531	38		sec				sec 								; return with CS = passed.
.b532	60		rts				rts
.b533					_TSTNextPullY:
.b533	7a		ply				ply 								; restore current, fall through.
.b534					_TSTNext:
.b534	e6 38		inc $38				inc 	zTemp1 						; token counter
.b536	98		tya				tya
.b537	18		clc				clc
.b538	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b53a	1a		inc a				inc 	a 							; +1
.b53b	1a		inc a				inc 	a 							; +2
.b53c	a8		tay				tay
.b53d	10 c1		bpl $b500			bpl 	_TSTLoop 					; if Y < $80 loop back
.b53f	98		tya				tya 								; add Y to zTemp0 and reset Y
.b540	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b542	18		clc				clc  								; but have tables > 255 bytes
.b543	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b545	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b547	90 b7		bcc $b500			bcc 	_TSTLoop
.b549	e6 37		inc $37				inc 	zTemp0+1
.b54b	80 b3		bra $b500			bra 	_TSTLoop
.b54d					_TSTFail:
.b54d	18		clc				clc
.b54e	60		rts				rts
.b54f					TokeniseLine:
.b54f	20 d7 b6	jsr $b6d7			jsr 	FixLineBufferCase 			; fix line case
.b552	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b554	8d a8 04	sta $04a8			sta 	tokenOffset
.b557	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b55a	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b55d	a2 ff		ldx #$ff			ldx 	#$FF
.b55f					_TKFindFirst:
.b55f	e8		inx				inx
.b560	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b563	f0 79		beq $b5de			beq 	_TKExit
.b565	c9 20		cmp #$20			cmp 	#' '
.b567	90 f6		bcc $b55f			bcc 	_TKFindFirst
.b569	c9 30		cmp #$30			cmp 	#'0'
.b56b	90 07		bcc $b574			bcc 	_TKNoLineNumber
.b56d	c9 3a		cmp #$3a			cmp 	#'9'+1
.b56f	b0 03		bcs $b574			bcs 	_TKNoLineNumber
.b571	20 01 b7	jsr $b701			jsr 	TokeniseExtractLineNumber
.b574					_TKNoLineNumber:
.b574					_TKTokeniseLoop:
.b574	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b577	f0 65		beq $b5de			beq 	_TKExit
.b579	e8		inx				inx
.b57a	c9 20		cmp #$20			cmp 	#' '
.b57c	f0 f6		beq $b574			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b57e	ca		dex				dex 								; undo last get, A contains character, X is position.
.b57f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b581	f0 61		beq $b5e4			beq 	_TKTokeniseIdentifier
.b583	c9 41		cmp #$41			cmp 	#'A'
.b585	90 04		bcc $b58b			bcc 	_TKTokenisePunctuation
.b587	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b589	90 59		bcc $b5e4			bcc 	_TKTokeniseIdentifier
.b58b					_TKTokenisePunctuation:
.b58b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b58d	f0 27		beq $b5b6			beq 	_TKString
.b58f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b591	f0 28		beq $b5bb			beq 	_TKHexConstant
.b593	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b595	f0 29		beq $b5c0			beq 	_TKCheckDouble
.b597	c9 3e		cmp #$3e			cmp 	#'>'
.b599	f0 25		beq $b5c0			beq 	_TKCheckDouble
.b59b					_TKStandardPunctuation:
.b59b	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b59e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b5a0	90 0e		bcc $b5b0			bcc 	_TKNoShift
.b5a2	48		pha				pha 								; save
.b5a3	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b5a5	85 36		sta $36				sta 	zTemp0
.b5a7	68		pla				pla
.b5a8	29 20		and #$20			and 	#32 						; bit 5
.b5aa	4a		lsr a				lsr 	a 							; shift into bit 3
.b5ab	4a		lsr a				lsr 	a
.b5ac	05 36		ora $36				ora 	zTemp0
.b5ae	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b5b0					_TKNoShift:
.b5b0	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte 			; write the punctuation character
.b5b3	e8		inx				inx 								; consume the character
.b5b4	80 be		bra $b574			bra 	_TKTokeniseLoop 			; and loop round again.
.b5b6					_TKString:
.b5b6	20 66 b6	jsr $b666			jsr 	TokeniseString
.b5b9	80 b9		bra $b574			bra 	_TKTokeniseLoop
.b5bb					_TKHexConstant:
.b5bb	20 a1 b6	jsr $b6a1			jsr 	TokeniseHexConstant
.b5be	80 b4		bra $b574			bra 	_TKTokeniseLoop
.b5c0					_TKCheckDouble:
.b5c0	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5c3	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5c5	90 d4		bcc $b59b			bcc 	_TKStandardPunctuation
.b5c7	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5c9	b0 d0		bcs $b59b			bcs 	_TKStandardPunctuation
.b5cb	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5ce	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5d0	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5d1	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5d4	38		sec				sec
.b5d5	e9 3c		sbc #$3c			sbc 	#'<'
.b5d7	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.b5da	e8		inx				inx 								; consume both
.b5db	e8		inx				inx
.b5dc	80 96		bra $b574			bra 	_TKTokeniseLoop
.b5de	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5e0	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b5e3	60		rts				rts
.b5e4					_TKTokeniseIdentifier:
.b5e4	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5e7	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5ea					_TKCheckLoop:
.b5ea	e8		inx				inx 								; look at next, we know first is identifier.
.b5eb	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5ee	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5f0	f0 f8		beq $b5ea			beq 	_TKCheckLoop
.b5f2	c9 30		cmp #$30			cmp	 	#"0"
.b5f4	90 0c		bcc $b602			bcc 	_TKEndIdentifier
.b5f6	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5f8	90 f0		bcc $b5ea			bcc 	_TKCheckLoop
.b5fa	c9 41		cmp #$41			cmp	 	#"A"
.b5fc	90 04		bcc $b602			bcc 	_TKEndIdentifier
.b5fe	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b600	90 e8		bcc $b5ea			bcc 	_TKCheckLoop
.b602					_TKEndIdentifier:
.b602	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b605	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b607	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b609	f0 06		beq $b611			beq 	_TKHasTypeCharacter
.b60b	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b60d	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b60f	d0 07		bne $b618			bne 	_TKNoTypeCharacter
.b611					_TKHasTypeCharacter:
.b611	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b614	e8		inx				inx 								; read next
.b615	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b618					_TKNoTypeCharacter:
.b618	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b61a	d0 09		bne $b625			bne 	_TKNoArray
.b61c	e8		inx				inx 								; skip the (
.b61d	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b620	09 04		ora #$04			ora 	#$04
.b622	8d 84 04	sta $0484			sta 	identTypeByte
.b625					_TKNoArray:
.b625	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b628	20 c2 b6	jsr $b6c2			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.b62b	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b62d	a9 22		lda #$22			lda 	#(KeywordSet0) & $FF
.b62f	20 f6 b4	jsr $b4f6			jsr 	TokeniseSearchTable
.b632	a2 00		ldx #$00			ldx 	#0
.b634	b0 1f		bcs $b655			bcs 	_TKFoundToken
.b636	a0 ba		ldy #$ba			ldy 	#(KeywordSet1) >> 8
.b638	a9 07		lda #$07			lda 	#(KeywordSet1) & $FF
.b63a	20 f6 b4	jsr $b4f6			jsr 	TokeniseSearchTable
.b63d	a2 81		ldx #$81			ldx 	#$81
.b63f	b0 14		bcs $b655			bcs 	_TKFoundToken
.b641	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b643	a9 55		lda #$55			lda 	#(KeywordSet2) & $FF
.b645	20 f6 b4	jsr $b4f6			jsr 	TokeniseSearchTable
.b648	a2 82		ldx #$82			ldx 	#$82
.b64a	b0 09		bcs $b655			bcs 	_TKFoundToken
.b64c	20 52 b7	jsr $b752			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.b64f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b652	4c 74 b5	jmp $b574			jmp 	_TKTokeniseLoop 			; and go round again.
.b655					_TKFoundToken:
.b655	48		pha				pha 								; save token
.b656	8a		txa				txa 								; shift in X, is there one ?
.b657	f0 03		beq $b65c			beq 	_TKNoTShift
.b659	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte 			; if so, write it out
.b65c					_TKNoTShift:
.b65c	68		pla				pla 								; restore and write token
.b65d	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b660	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b663	4c 74 b5	jmp $b574			jmp 	_TKTokeniseLoop 			; and go round again.
.b666					TokeniseString:
.b666	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b668	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b66b	e8		inx				inx									; start of quoted string.
.b66c	da		phx				phx 								; push start of string on top
.b66d	ca		dex				dex
.b66e					_TSFindEnd:
.b66e	e8		inx				inx
.b66f	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b672	f0 04		beq $b678			beq 	_TSEndOfString
.b674	c9 22		cmp #$22			cmp 	#'"'
.b676	d0 f6		bne $b66e			bne 	_TSFindEnd
.b678					_TSEndOfString:
.b678	7a		ply				ply  								; so now Y is first character, X is character after end.
.b679	48		pha				pha 								; save terminating character
.b67a	20 82 b6	jsr $b682			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.b67d	68		pla				pla 								; terminating character
.b67e	f0 01		beq $b681			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b680	e8		inx				inx
.b681					_TSNotQuote:
.b681	60		rts				rts
.b682					TOWriteBlockXY:
.b682	86 36		stx $36				stx 	zTemp0 						; write end character
.b684	98		tya				tya
.b685	49 ff		eor #$ff			eor 	#$FF
.b687	38		sec				sec
.b688	65 36		adc $36				adc 	zTemp0
.b68a	1a		inc a				inc 	a 							; one extra for NULL
.b68b	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b68e					_TOBlockLoop:
.b68e	c4 36		cpy $36				cpy 	zTemp0
.b690	f0 09		beq $b69b			beq 	_TOBlockExit
.b692	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b695	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b698	c8		iny				iny
.b699	80 f3		bra $b68e			bra 	_TOBlockLoop
.b69b					_TOBlockExit:
.b69b	a9 00		lda #$00			lda 	#0
.b69d	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b6a0	60		rts				rts
.b6a1					TokeniseHexConstant:
.b6a1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b6a3	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b6a6	e8		inx				inx									; start of quoted string.
.b6a7	da		phx				phx 								; push start of constant on top
.b6a8	ca		dex				dex
.b6a9					_THFindLoop:
.b6a9	e8		inx				inx
.b6aa	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b6ad	c9 30		cmp #$30			cmp 	#"0"
.b6af	90 0c		bcc $b6bd			bcc 	_THFoundEnd
.b6b1	c9 3a		cmp #$3a			cmp 	#"9"+1
.b6b3	90 f4		bcc $b6a9			bcc 	_THFindLoop
.b6b5	c9 41		cmp #$41			cmp 	#"A"
.b6b7	90 04		bcc $b6bd			bcc 	_THFoundEnd
.b6b9	c9 47		cmp #$47			cmp 	#"F"+1
.b6bb	90 ec		bcc $b6a9			bcc 	_THFindLoop
.b6bd					_THFoundEnd:
.b6bd	7a		ply				ply 								; restore start
.b6be	20 82 b6	jsr $b682			jsr 	TOWriteBlockXY 				; output the block
.b6c1	60		rts				rts
.b6c2					TokeniseCalculateHash:
.b6c2	da		phx				phx
.b6c3	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6c6	a9 00		lda #$00			lda 	#0
.b6c8					_TCHLoop:
.b6c8	18		clc				clc
.b6c9	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6cc	e8		inx				inx
.b6cd	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6d0	d0 f6		bne $b6c8			bne 	_TCHLoop
.b6d2	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6d5	fa		plx				plx
.b6d6	60		rts				rts
.b6d7					FixLineBufferCase:
.b6d7	a2 00		ldx #$00			ldx 	#0
.b6d9					_FLBCLoop:
.b6d9	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6dc	f0 22		beq $b700			beq 	_FLBCExit 					; end of string.
.b6de	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6e0	f0 11		beq $b6f3			beq 	_FLBCInQuotes
.b6e2	e8		inx				inx
.b6e3	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6e5	90 f2		bcc $b6d9			bcc 	_FLBCLoop
.b6e7	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6e9	b0 ee		bcs $b6d9			bcs 	_FLBCLoop
.b6eb	38		sec				sec 								; make U/C
.b6ec	e9 20		sbc #$20			sbc 	#32
.b6ee	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6f1	80 e6		bra $b6d9			bra 	_FLBCLoop
.b6f3					_FLBCInQuotes:
.b6f3	e8		inx				inx 								; advance
.b6f4	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6f7	f0 07		beq $b700			beq 	_FLBCExit 					; exit on EOS
.b6f9	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b6fb	d0 f6		bne $b6f3			bne 	_FLBCInQuotes
.b6fd	e8		inx				inx 								; skip over it
.b6fe	80 d9		bra $b6d9			bra 	_FLBCLoop
.b700					_FLBCExit:
.b700	60		rts				rts
.b701					TokeniseExtractLineNumber:
.b701	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b704	48		pha				pha
.b705	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b708	48		pha				pha
.b709	20 3f b7	jsr $b73f			jsr 	_TELNTimes2 				; line # x 4
.b70c	20 3f b7	jsr $b73f			jsr 	_TELNTimes2 				; line # x 2
.b70f	18		clc				clc 								; add stacked value
.b710	68		pla				pla
.b711	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b714	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b717	68		pla				pla
.b718	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b71b	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b71e	20 3f b7	jsr $b73f			jsr 	_TELNTimes2 				; line # x 10
.b721	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b724	e8		inx				inx
.b725	29 0f		and #$0f			and 	#15 						; add to line #
.b727	18		clc				clc
.b728	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b72b	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b72e	90 03		bcc $b733			bcc 	_TLENNoCarry
.b730	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b733					_TLENNoCarry:
.b733	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b736	c9 30		cmp #$30			cmp 	#'0'
.b738	90 04		bcc $b73e			bcc 	_TLENExit
.b73a	c9 3a		cmp #$3a			cmp 	#'9'+1
.b73c	90 c3		bcc $b701			bcc 	TokeniseExtractLineNumber
.b73e					_TLENExit:
.b73e	60		rts				rts
.b73f					_TELNTimes2:
.b73f	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b742	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b745	60		rts				rts
.b746					TokeniseWriteByte:
.b746	da		phx				phx
.b747	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b74a	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b74d	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b750	fa		plx				plx
.b751	60		rts				rts
.b752					CheckCreateVariableRecord:
.b752	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b754	85 36		sta $36				sta 	0+zTemp0
.b756	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b758	85 37		sta $37				sta 	1+zTemp0
.b75a					_CCVSearch:
.b75a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b75c	f0 2c		beq $b78a			beq 	_CCVFail
.b75e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b760	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b762	cd 83 04	cmp $0483			cmp 	identHash
.b765	d0 16		bne $b77d			bne 	_CCVNext
.b767	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b769	ae 80 04	ldx $0480			ldx 	identStart
.b76c					_CCVCompare:
.b76c	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b76f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b771	e8		inx				inx 								; advance pointers
.b772	c8		iny				iny
.b773	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b774	d0 07		bne $b77d			bne 	_CCVNext  					; didn't match go to next.
.b776	90 f4		bcc $b76c			bcc 	_CCVCompare 				; not finished yet.
.b778	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b77b	f0 41		beq $b7be			beq 	_CCVFound 					; yes, we were successful
.b77d					_CCVNext:
.b77d	18		clc				clc
.b77e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b780	65 36		adc $36				adc 	zTemp0
.b782	85 36		sta $36				sta 	zTemp0
.b784	90 d4		bcc $b75a			bcc 	_CCVSearch
.b786	e6 37		inc $37				inc 	zTemp0+1
.b788	80 d0		bra $b75a			bra 	_CCVSearch
.b78a					_CCVFail:
.b78a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b78c	ad 83 04	lda $0483			lda 	identHash
.b78f	91 36		sta ($36),y			sta 	(zTemp0),y
.b791	c8		iny				iny 								; offset 2 is the type byte
.b792	ad 84 04	lda $0484			lda 	identTypeByte
.b795	91 36		sta ($36),y			sta 	(zTemp0),y
.b797	c8		iny				iny
.b798					_CCVData:
.b798	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b79a	91 36		sta ($36),y			sta 	(zTemp0),y
.b79c	c8		iny				iny
.b79d	c0 08		cpy #$08			cpy 	#8
.b79f	90 f7		bcc $b798			bcc 	_CCVData
.b7a1	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b7a4					_CCVCopyName:
.b7a4	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b7a7	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a9	e8		inx				inx
.b7aa	c8		iny				iny
.b7ab	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b7ae	d0 f4		bne $b7a4			bne 	_CCVCopyName
.b7b0	98		tya				tya 								; patch offset
.b7b1	92 36		sta ($36)			sta 	(zTemp0)
.b7b3	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b7b5	91 36		sta ($36),y			sta 	(zTemp0),y
.b7b7	88		dey				dey
.b7b8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b7ba	09 80		ora #$80			ora 	#$80
.b7bc	91 36		sta ($36),y			sta 	(zTemp0),y
.b7be					_CCVFound:
.b7be	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7c0	38		sec				sec
.b7c1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7c3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7c5	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b7c8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7ca	20 46 b7	jsr $b746			jsr 	TokeniseWriteByte
.b7cd	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
