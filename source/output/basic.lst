
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct 11 09:11:10 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 ce 94	jsr $94ce			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 47 87	jsr $8747			jsr 	RunDemos
.8013	20 b0 8e	jsr $8eb0			jsr 	NewCommand 					; erase current program
.8016	20 53 a1	jsr $a153			jsr 	BackloadProgram
.8019	4c 0c 8a	jmp $8a0c			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1337."
>8064	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>8074	32 2e 20 42 75 69 6c 64 20 31 33 33 37 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24					GXSpritePage = 24
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gzTemp0+1
.808d	80 3d		bra $80cc			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8097	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a1	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 29 06	sta $0629			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80af	f0 07		beq $80b8			beq 	_GDXOkay 					; check X range
.80b1	ad 29 06	lda $0629			lda 	gxCurrentX
.80b4	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b6	b0 1a		bcs $80d2			bcs 	_GDError
.80b8					_GDXOkay:
.80b8	ad 2b 06	lda $062b			lda 	gxCurrentY
.80bb	cd 3a 06	cmp $063a			cmp 	gxHeight
.80be	b0 12		bcs $80d2			bcs 	_GDError
.80c0	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c2					_GDCopy2:
.80c2	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c5	9d 31 06	sta $0631,x			sta 	gxX0,x
.80c8	ca		dex				dex
.80c9	10 f7		bpl $80c2			bpl 	_GDCopy2
.80cb	68		pla				pla 								; get command back
.80cc					_GDExecuteA:
.80cc	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80ce	aa		tax				tax
.80cf	7c d8 80	jmp ($80d8,x)			jmp 	(GRVectorTable,x)
.80d2					_GDError:
.80d2	68		pla				pla 								; throw command
.80d3	38		sec				sec
.80d4	60		rts				rts
.80d5					GXMove:
.80d5	18		clc				clc
.80d6	60		rts				rts
.80d7					GRUndefined:
>80d7	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

.80d8					GRVectorTable:
>80d8	d7 80					.word	GRUndefined              ; $00
>80da	d7 80					.word	GRUndefined              ; $01
>80dc	5e 82					.word	GXClearBitmap            ; $02 Clear
>80de	d0 83					.word	GXSetColourMode          ; $03 Colour
>80e0	86 85					.word	GXFontHandler            ; $04 DrawFont
>80e2	ce 85					.word	GXSpriteHandler          ; $05 DrawSprite
>80e4	d7 80					.word	GRUndefined              ; $06
>80e6	d7 80					.word	GRUndefined              ; $07
>80e8	d7 80					.word	GRUndefined              ; $08
>80ea	d7 80					.word	GRUndefined              ; $09
>80ec	d7 80					.word	GRUndefined              ; $0a
>80ee	d7 80					.word	GRUndefined              ; $0b
>80f0	d7 80					.word	GRUndefined              ; $0c
>80f2	d7 80					.word	GRUndefined              ; $0d
>80f4	d7 80					.word	GRUndefined              ; $0e
>80f6	d7 80					.word	GRUndefined              ; $0f
>80f8	d5 80					.word	GXMove                   ; $10 Move
>80fa	a5 82					.word	GXLine                   ; $11 Line
>80fc	19 84					.word	GXFrameRectangle         ; $12 FrameRect
>80fe	16 84					.word	GXFillRectangle          ; $13 FillRect
>8100	1c 81					.word	GXFrameCircle            ; $14 FrameCircle
>8102	18 81					.word	GXFillCircle             ; $15 FillCircle
>8104	d7 80					.word	GRUndefined              ; $16
>8106	d7 80					.word	GRUndefined              ; $17
>8108	fe 83					.word	GXPlotPoint              ; $18 Plot
>810a	d7 80					.word	GRUndefined              ; $19
>810c	d7 80					.word	GRUndefined              ; $1a
>810e	d7 80					.word	GRUndefined              ; $1b
>8110	d7 80					.word	GRUndefined              ; $1c
>8112	d7 80					.word	GRUndefined              ; $1d
>8114	d7 80					.word	GRUndefined              ; $1e
>8116	d7 80					.word	GRUndefined              ; $1f

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8118					GXFillCircle:
.8118	a9 ff		lda #$ff			lda 	#255
.811a	80 02		bra $811e			bra 	GXCircle
.811c					GXFrameCircle:
.811c	a9 00		lda #$00			lda 	#0
.811e					GXCircle:
.811e	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.8121	20 06 87	jsr $8706			jsr 	GXSortXY 					; topleft/bottomright
.8124	20 3b 86	jsr $863b			jsr 	GXOpenBitmap 				; start drawing
.8127	20 17 82	jsr $8217			jsr 	GXCircleSetup 				; set up for drawing
.812a	9c 46 06	stz $0646			stz 	gYChanged
.812d					_GXCircleDraw:
.812d	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.8130	cd 44 06	cmp $0644			cmp 	gY
.8133	90 0a		bcc $813f			bcc 	_GXCircleContinue
.8135	d0 03		bne $813a			bne 	_GXNoLast
.8137	20 4a 81	jsr $814a			jsr 	GXPlot1
.813a					_GXNoLast:
.813a	20 4c 86	jsr $864c			jsr 	GXCloseBitmap 				; close the bitmap
.813d	18		clc				clc
.813e	60		rts				rts
.813f					_GXCircleContinue:
.813f	20 47 81	jsr $8147			jsr 	GXPlot2 					; draw it
.8142	20 c4 81	jsr $81c4			jsr 	GXCircleMove 				; adjust the coordinates
.8145	80 e6		bra $812d			bra 	_GXCircleDraw
.8147					GXPlot2:
.8147	20 4a 81	jsr $814a			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814a					GXPlot1:
.814a	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.814d	f0 03		beq $8152			beq 	_GXPlot1Only
.814f	20 6e 81	jsr $816e			jsr 	GXPlot0 						; plot and negate
.8152					_GXPlot1Only:
.8152	20 6e 81	jsr $816e			jsr 	GXPlot0 						; twice, undoing negation
.8155	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.8158	ae 44 06	ldx $0644			ldx	 	gY
.815b	8d 44 06	sta $0644			sta 	gY
.815e	8e 43 06	stx $0643			stx 	gX
.8161	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.8164	a9 ff		lda #$ff			lda 	#$FF
.8166	8d 46 06	sta $0646			sta 	gYChanged
.8169	60		rts				rts
.816a	20 6e 81	jsr $816e			jsr 	GXPlot0 						; do once
.816d	60		rts				rts
.816e	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.8171	f0 05		beq $8178			beq 	_GXPlot0Always
.8173	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.8176	f0 2d		beq $81a5			beq 	GXPlot0Exit
.8178					_GXPlot0Always:
.8178	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817a	ad 44 06	lda $0644			lda 	gY
.817d	20 a6 81	jsr $81a6			jsr 	GXSubCopy
.8180	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8182	ad 43 06	lda $0643			lda 	gX
.8185	20 a6 81	jsr $81a6			jsr 	GXSubCopy
.8188	48		pha				pha 									; save last offset X
.8189	20 59 86	jsr $8659			jsr 	GXPositionCalc 					; calculate position/offset.
.818c	68		pla				pla
.818d	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.818e	85 36		sta $36				sta 	gzTemp0
.8190	64 37		stz $37				stz 	gzTemp0+1
.8192	26 37		rol $37				rol 	gzTemp0+1
.8194	ad 45 06	lda $0645			lda 	gIsFillMode
.8197	69 80		adc #$80			adc 	#128
.8199	20 62 84	jsr $8462			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819c	38		sec				sec 									; GY = -GY
.819d	a9 00		lda #$00			lda 	#0
.819f	ed 44 06	sbc $0644			sbc 	gY
.81a2	8d 44 06	sta $0644			sta 	gY
.81a5					GXPlot0Exit:
.81a5	60		rts				rts
.81a6					GXSubCopy:
.81a6	85 36		sta $36				sta 	gzTemp0
.81a8	64 37		stz $37				stz 	gzTemp0+1
.81aa	29 80		and #$80			and 	#$80
.81ac	f0 02		beq $81b0			beq 	_GXNoSx
.81ae	c6 37		dec $37				dec 	gzTemp0+1
.81b0					_GXNoSx:
.81b0	38		sec				sec
.81b1	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b4	e5 36		sbc $36				sbc 	gzTemp0
.81b6	9d 31 06	sta $0631,x			sta 	gXX0,x
.81b9	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81bc	e5 37		sbc $37				sbc 	gzTemp0+1
.81be	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c1	a5 36		lda $36				lda 	gzTemp0 						; return A
.81c3	60		rts				rts
.81c4					GXCircleMove:
.81c4	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.81c7	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.81c9	10 0d		bpl $81d8			bpl 	_GXEMPositive
.81cb	ee 43 06	inc $0643			inc 	gX 							; X++
.81ce	ad 43 06	lda $0643			lda 	gX
.81d1	20 f7 81	jsr $81f7			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d4	a9 06		lda #$06			lda 	#6  						; and add 6
.81d6	80 15		bra $81ed			bra 	_GXEMAddD
.81d8					_GXEMPositive:
.81d8	ee 43 06	inc $0643			inc 	gX 							; X++
.81db	ce 44 06	dec $0644			dec 	gy 							; Y--
.81de	38		sec				sec 								; calculate X-Y
.81df	ad 43 06	lda $0643			lda 	gX
.81e2	ed 44 06	sbc $0644			sbc 	gY
.81e5	20 f7 81	jsr $81f7			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81e8	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ea	ce 46 06	dec $0646			dec 	gYChanged
.81ed					_GXEMAddD:
.81ed	18		clc				clc
.81ee	65 38		adc $38				adc 	gzTemp1
.81f0	85 38		sta $38				sta 	gzTemp1
.81f2	90 02		bcc $81f6			bcc 	_GXEMNoCarry
.81f4	e6 39		inc $39				inc 	gzTemp1+1
.81f6					_GXEMNoCarry:
.81f6	60		rts				rts
.81f7					_GXAdd4TimesToD:
.81f7	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.81f9	29 80		and #$80			and 	#$80
.81fb	f0 02		beq $81ff			beq 	_GXA4Unsigned
.81fd	a9 ff		lda #$ff			lda 	#$FF
.81ff					_GXA4Unsigned:
.81ff	85 37		sta $37				sta 	gzTemp0+1
.8201	06 36		asl $36				asl 	gzTemp0  					; x 4
.8203	26 37		rol $37				rol 	gzTemp0+1
.8205	06 36		asl $36				asl 	gzTemp0
.8207	26 37		rol $37				rol 	gzTemp0+1
.8209	18		clc				clc 								; add
.820a	a5 36		lda $36				lda		gzTemp0
.820c	65 38		adc $38				adc 	gzTemp1
.820e	85 38		sta $38				sta 	gzTemp1
.8210	a5 37		lda $37				lda		gzTemp0+1
.8212	65 39		adc $39				adc 	gzTemp1+1
.8214	85 39		sta $39				sta 	gzTemp1+1
.8216	60		rts				rts
.8217					GXCircleSetup:
.8217	38		sec				sec
.8218	ad 37 06	lda $0637			lda 	gxY1
.821b	ed 33 06	sbc $0633			sbc 	gxY0
.821e	4a		lsr a				lsr 	a
.821f	8d 42 06	sta $0642			sta 	gRadius
.8222	a2 00		ldx #$00			ldx 	#0
.8224	20 46 82	jsr $8246			jsr 	_GXCalculateCentre
.8227	a2 02		ldx #$02			ldx 	#2
.8229	20 46 82	jsr $8246			jsr 	_GXCalculateCentre
.822c	9c 43 06	stz $0643			stz 	gX
.822f	ad 42 06	lda $0642			lda 	gRadius
.8232	8d 44 06	sta $0644			sta 	gY
.8235	0a		asl a				asl 	a 							; R x 2
.8236	85 36		sta $36				sta 	gzTemp0
.8238	38		sec				sec
.8239	a9 03		lda #$03			lda 	#3
.823b	e5 36		sbc $36				sbc 	gzTemp0
.823d	85 38		sta $38				sta 	gzTemp1
.823f	a9 00		lda #$00			lda 	#0
.8241	e9 00		sbc #$00			sbc 	#0
.8243	85 39		sta $39				sta 	gzTemp1+1
.8245	60		rts				rts
.8246					_GXCalculateCentre:
.8246	38		sec				sec
.8247	bd 35 06	lda $0635,x			lda 	gxX1,x
.824a	7d 31 06	adc $0631,x			adc 	gXX0,x
.824d	9d 35 06	sta $0635,x			sta 	gXX1,x
.8250	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8253	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8256	4a		lsr a				lsr 	a
.8257	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825a	7e 35 06	ror $0635,x			ror 	gXX1,x
.825d	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.825e					GXClearBitmap:
.825e	20 3b 86	jsr $863b			jsr 	GXOpenBitmap 				; start access
.8261	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8263	ad 3a 06	lda $063a			lda 	gxHeight
.8266	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8268	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.826a					_GXCalcLastPage:
.826a	98		tya				tya 								; add to base page
.826b	18		clc				clc
.826c	6d 39 06	adc $0639			adc 	gxBasePage
.826f	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.8271					_GXClearAll:
.8271	20 82 82	jsr $8282			jsr 	_GXClearBlock 				; clear 8k block
.8274	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.8276	a5 0b		lda $0b				lda 	GFXEditSlot
.8278	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.827b	b0 f4		bcs $8271			bcs 	_GXClearAll
.827d	20 4c 86	jsr $864c			jsr 	GXCloseBitmap	 			; stop access
.8280	18		clc				clc
.8281	60		rts				rts
.8282					_GXClearBlock:
.8282	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8284	85 38		sta $38				sta 	0+gzTemp1
.8286	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8288	85 39		sta $39				sta 	1+gzTemp1
.828a					_GXCB0:
.828a	a5 36		lda $36				lda 	gzTemp0
.828c	a0 00		ldy #$00			ldy 	#0
.828e					_GXCB1:
.828e	91 38		sta ($38),y			sta 	(gzTemp1),y
.8290	c8		iny				iny
.8291	91 38		sta ($38),y			sta 	(gzTemp1),y
.8293	c8		iny				iny
.8294	91 38		sta ($38),y			sta 	(gzTemp1),y
.8296	c8		iny				iny
.8297	91 38		sta ($38),y			sta 	(gzTemp1),y
.8299	c8		iny				iny
.829a	d0 f2		bne $828e			bne 	_GXCB1
.829c	e6 39		inc $39				inc 	gzTemp1+1
.829e	a5 39		lda $39				lda 	gzTemp1+1
.82a0	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82a2	d0 e6		bne $828a			bne 	_GXCB0
.82a4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.82a5					GXLine:
.82a5	20 3b 86	jsr $863b			jsr 	GXOpenBitmap
.82a8	20 24 87	jsr $8724			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.82ab	20 71 83	jsr $8371			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.82ae	20 59 86	jsr $8659			jsr 	GXPositionCalc 				; calculate position/offset.
.82b1					_GXDrawLoop:
.82b1	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.82b4	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.82b6	2d 3e 06	and $063e			and 	gxANDValue
.82b9	4d 3d 06	eor $063d			eor 	gxEORValue
.82bc	91 3c		sta ($3c),y			sta 	(gsTemp),y
.82be	20 cd 82	jsr $82cd			jsr 	GXLineIsComplete 			; is the line complete ?
.82c1	f0 05		beq $82c8			beq 	_GXLExit
.82c3	20 e8 82	jsr $82e8			jsr 	GXLineAdvance 				; code as per advance method
.82c6	80 e9		bra $82b1			bra 	_GXDrawLoop
.82c8					_GXLExit:
.82c8	20 4c 86	jsr $864c			jsr 	GXCloseBitmap
.82cb	18		clc				clc
.82cc	60		rts				rts
.82cd					GXLineIsComplete:
.82cd	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.82d0	d0 0f		bne $82e1			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.82d2	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.82d5	4d 35 06	eor $0635			eor 	GXX1
.82d8	d0 06		bne $82e0			bne 	_GXLICExit
.82da	ad 32 06	lda $0632			lda 	GXX0+1
.82dd	4d 36 06	eor $0636			eor 	GXX1+1
.82e0					_GXLICExit:
.82e0	60		rts				rts
.82e1					_GXLICCompareY:
.82e1	ad 37 06	lda $0637			lda 	GXY1
.82e4	4d 33 06	eor $0633			eor 	GXY0
.82e7	60		rts				rts
.82e8					GXLineAdvance:
.82e8	18		clc				clc 								; add adjust to position
.82e9	ad 4b 06	lda $064b			lda 	GXPosition
.82ec	6d 4c 06	adc $064c			adc 	GXAdjust
.82ef	8d 4b 06	sta $064b			sta 	GXPosition
.82f2	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.82f5	b0 05		bcs $82fc			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.82f7	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.82fa	90 0a		bcc $8306			bcc 	_GXLANoExtra
.82fc					_GXLAOverflow:
.82fc	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.82ff	38		sec				sec 								; subtract total and write back
.8300	ed 4d 06	sbc $064d			sbc 	GXTotal
.8303	8d 4b 06	sta $064b			sta 	GXPosition
.8306					_GXLANoExtra:
.8306	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8309	f0 0d		beq $8318			beq 	_GXDXLarger
.830b	20 6a 83	jsr $836a			jsr 	GXIncrementY
.830e	ad 4e 06	lda $064e			lda 	GXAddSelect
.8311	f0 10		beq $8323			beq 	_GXLAExit
.8313	20 24 83	jsr $8324			jsr 	GXAdjustX
.8316	80 0b		bra $8323			bra 	_GXLAExit
.8318					_GXDXLarger:
.8318	20 24 83	jsr $8324			jsr 	GXAdjustX
.831b	ad 4e 06	lda $064e			lda 	GXAddSelect
.831e	f0 03		beq $8323			beq 	_GXLAExit
.8320	20 6a 83	jsr $836a			jsr 	GXIncrementY
.8323					_GXLAExit:
.8323	60		rts				rts
.8324					GXAdjustX:
.8324	ad 4a 06	lda $064a			lda 	GXDXNegative
.8327	10 25		bpl $834e			bpl 	_GXAXRight
.8329	ad 31 06	lda $0631			lda 	GXX0
.832c	d0 03		bne $8331			bne 	_GXAXNoBorrow
.832e	ce 32 06	dec $0632			dec 	GXX0+1
.8331					_GXAXNoBorrow:
.8331	ce 31 06	dec $0631			dec 	GXX0
.8334	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.8337	ad 41 06	lda $0641			lda 	gsOffset
.833a	c9 ff		cmp #$ff			cmp 	#$FF
.833c	d0 0f		bne $834d			bne 	_GXAYExit 					; underflow
.833e	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.8340	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.8342	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8344	b0 07		bcs $834d			bcs 	_GXAYExit
.8346	18		clc				clc
.8347	69 20		adc #$20			adc 	#$20 						; fix up
.8349	85 3d		sta $3d				sta 	gsTemp+1
.834b	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.834d					_GXAYExit:
.834d	60		rts				rts
.834e					_GXAXRight:
.834e	ee 31 06	inc $0631			inc 	GXX0
.8351	d0 03		bne $8356			bne 	_GXAXNoCarry
.8353	ee 32 06	inc $0632			inc 	GXX0+1
.8356					_GXAXNoCarry:
.8356	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.8359	d0 0e		bne $8369			bne 	_GXAXExit 					; if not overflowed, exit.
.835b	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.835d	a5 3d		lda $3d				lda 	gsTemp+1
.835f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8361	90 06		bcc $8369			bcc 	_GXAXExit
.8363	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8365	85 3d		sta $3d				sta 	gsTemp+1
.8367	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.8369					_GXAXExit:
.8369	60		rts				rts
.836a					GXIncrementY:
.836a	ee 33 06	inc $0633			inc 	GXY0
.836d	20 af 86	jsr $86af			jsr 	GXMovePositionDown
.8370	60		rts				rts
.8371					GXLineSetup:
.8371	ad 37 06	lda $0637			lda 	GXY1
.8374	38		sec				sec
.8375	ed 33 06	sbc $0633			sbc 	GXY0
.8378	4a		lsr a				lsr 	a
.8379	8d 48 06	sta $0648			sta 	GXDiffY
.837c	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.837f	38		sec				sec
.8380	ad 35 06	lda $0635			lda 	GXX1
.8383	ed 31 06	sbc $0631			sbc 	GXX0
.8386	8d 47 06	sta $0647			sta 	GXDiffX
.8389	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.838c	ed 32 06	sbc $0632			sbc 	GXX0+1
.838f	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8390	6e 47 06	ror $0647			ror 	GXDiffX
.8393	0a		asl a				asl 	a
.8394	10 0c		bpl $83a2			bpl 	_GDXNotNegative
.8396	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8398	38		sec				sec
.8399	ed 47 06	sbc $0647			sbc 	GXDiffX
.839c	8d 47 06	sta $0647			sta 	GXDiffX
.839f	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.83a2					_GDXNotNegative:
.83a2	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.83a5	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.83a8	8d 4c 06	sta $064c			sta 	GXAdjust
.83ab	ad 47 06	lda $0647			lda 	GXDiffX
.83ae	8d 4d 06	sta $064d			sta 	GXTotal
.83b1	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.83b4	cd 47 06	cmp $0647			cmp 	GXDiffX
.83b7	90 0f		bcc $83c8			bcc 	_GDXNotLarger
.83b9	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.83bc	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.83bf	8d 4c 06	sta $064c			sta 	GXAdjust
.83c2	ad 48 06	lda $0648			lda 	GXDiffY
.83c5	8d 4d 06	sta $064d			sta 	GXTotal
.83c8					_GDXNotLarger:
.83c8	ad 4d 06	lda $064d			lda 	GXTotal
.83cb	4a		lsr a				lsr 	a
.83cc	8d 4b 06	sta $064b			sta 	GXPosition
.83cf	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.83d0					GXSetColourMode:
.83d0	a6 36		ldx $36				ldx 	gzTemp0
.83d2	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.83d5	a5 37		lda $37				lda 	gzTemp0+1 								;
.83d7	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.83da	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.83dc	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.83df	ae 3c 06	ldx $063c			ldx 	gxColour
.83e2	8e 3d 06	stx $063d			stx 	gxEORValue
.83e5	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.83e7	90 03		bcc $83ec			bcc 	_GXSDCNotAndColour
.83e9	8e 3e 06	stx $063e			stx 	gxANDValue
.83ec					_GXSDCNotAndColour:
.83ec	d0 03		bne $83f1			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.83ee	9c 3d 06	stz $063d			stz 	gxEORValue
.83f1					_GXSDCNotAnd:
.83f1	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.83f2	90 08		bcc $83fc			bcc 	_GXSDCNoFlip
.83f4	ad 3e 06	lda $063e			lda	 	gxANDValue
.83f7	49 ff		eor #$ff			eor 	#$FF
.83f9	8d 3e 06	sta $063e			sta 	gxANDValue
.83fc					_GXSDCNoFlip:
.83fc	18		clc				clc
.83fd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.83fe					GXPlotPoint:
.83fe	20 3b 86	jsr $863b			jsr 	GXOpenBitmap 				; start drawing
.8401	20 59 86	jsr $8659			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.8404	ac 41 06	ldy $0641			ldy 	gsOffset
.8407	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.8409	2d 3e 06	and $063e			and 	gxANDValue
.840c	4d 3d 06	eor $063d			eor 	gxEORValue
.840f	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8411	20 4c 86	jsr $864c			jsr 	GXCloseBitmap 				; stop drawing and exit
.8414	18		clc				clc
.8415	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.8416					GXFillRectangle:
.8416	38		sec				sec
.8417	80 01		bra $841a			bra 	GXRectangle
.8419					GXFrameRectangle:
.8419	18		clc				clc
.841a					GXRectangle:
.841a	08		php				php 								; save Fill flag (CS)
.841b	20 3b 86	jsr $863b			jsr 	GXOpenBitmap 				; start drawing
.841e	20 06 87	jsr $8706			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8421	20 59 86	jsr $8659			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.8424	38		sec				sec 								; sec = Draw line
.8425	20 4f 84	jsr $844f			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8428	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.842b	cd 37 06	cmp $0637			cmp 	gxY1
.842e	f0 19		beq $8449			beq 	_GXRectangleExit
.8430					_GXRectLoop:
.8430	20 af 86	jsr $86af			jsr 	GXMovePositionDown 			; down one.
.8433	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.8436	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8439	cd 37 06	cmp $0637			cmp 	gXY1
.843c	f0 07		beq $8445			beq 	_GXLastLine
.843e	28		plp				plp 								; get flag back
.843f	08		php				php
.8440	20 4f 84	jsr $844f			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8443	80 eb		bra $8430			bra 	_GXRectLoop
.8445					_GXLastLine:
.8445	38		sec				sec
.8446	20 4f 84	jsr $844f			jsr 	GXDrawLineX1X0
.8449					_GXRectangleExit:
.8449	68		pla				pla 								; throw fill flag.
.844a	20 4c 86	jsr $864c			jsr 	GXCloseBitmap 				; stop drawing and exit
.844d	18		clc				clc
.844e	60		rts				rts
.844f					GXDrawLineX1X0:
.844f	08		php				php 								; save solid/either-end
.8450	38		sec				sec
.8451	ad 35 06	lda $0635			lda		gXX1
.8454	ed 31 06	sbc $0631			sbc 	gXX0
.8457	85 36		sta $36				sta 	gzTemp0
.8459	ad 36 06	lda $0636			lda 	gXX1+1
.845c	ed 32 06	sbc $0632			sbc 	gXX0+1
.845f	85 37		sta $37				sta 	gzTemp0+1
.8461	28		plp				plp
.8462					GXDrawLineTemp0:
.8462	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.8464	48		pha				pha
.8465	a5 3d		lda $3d				lda 	gsTemp+1
.8467	48		pha				pha
.8468	ad 41 06	lda $0641			lda 	gsOffset
.846b	48		pha				pha
.846c	a5 0b		lda $0b				lda 	GFXEditSlot
.846e	48		pha				pha
.846f	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8472	90 1e		bcc $8492			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8474					_GXDLTLine:
.8474	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.8476	2d 3e 06	and $063e			and 	gxANDValue
.8479	4d 3d 06	eor $063d			eor 	gxEORValue
.847c	91 3c		sta ($3c),y			sta 	(gsTemp),y
.847e	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.8480	d0 04		bne $8486			bne 	_GXDLTNoBorrow
.8482	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.8484	30 2e		bmi $84b4			bmi 	_GXDLTExit
.8486					_GXDLTNoBorrow:
.8486	c6 36		dec $36				dec 	gzTemp0
.8488	c8		iny				iny 								; next slot.
.8489	d0 e9		bne $8474			bne 	_GXDLTLine
.848b	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.848d	20 c2 84	jsr $84c2			jsr 	GXDLTCheckWrap				; check for new page.
.8490	80 e2		bra $8474			bra 	_GXDLTLine
.8492					_GXDLTEndPoints:
.8492	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.8494	2d 3e 06	and $063e			and 	gxANDValue
.8497	4d 3d 06	eor $063d			eor 	gxEORValue
.849a	91 3c		sta ($3c),y			sta 	(gsTemp),y
.849c	98		tya				tya 								; advance to right side
.849d	18		clc				clc
.849e	65 36		adc $36				adc 	gzTemp0
.84a0	a8		tay				tay
.84a1	a5 3d		lda $3d				lda 	gsTemp+1
.84a3	65 37		adc $37				adc 	gzTemp0+1
.84a5	85 3d		sta $3d				sta 	gsTemp+1
.84a7	20 c2 84	jsr $84c2			jsr 	GXDLTCheckWrap 			; fix up.
.84aa	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.84ac	2d 3e 06	and $063e			and 	gxANDValue
.84af	4d 3d 06	eor $063d			eor 	gxEORValue
.84b2	91 3c		sta ($3c),y			sta 	(gsTemp),y
.84b4					_GXDLTExit:
.84b4	68		pla				pla
.84b5	85 0b		sta $0b				sta 	GFXEditSlot
.84b7	68		pla				pla
.84b8	8d 41 06	sta $0641			sta 	gsOffset
.84bb	68		pla				pla
.84bc	85 3d		sta $3d				sta 	gsTemp+1
.84be	68		pla				pla
.84bf	85 3c		sta $3c				sta 	gsTemp
.84c1	60		rts				rts
.84c2					GXDLTCheckWrap:
.84c2	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.84c4	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.84c6	90 06		bcc $84ce			bcc 	_GXDLTCWExit
.84c8	e9 20		sbc #$20			sbc 	#$20 						; fix up
.84ca	85 3d		sta $3d				sta 	gsTemp+1
.84cc	e6 0b		inc $0b				inc 	GFXEditSlot
.84ce					_GXDLTCWExit:
.84ce	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.84cf					GXDrawGraphicElement:
.84cf	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.84d2	3a		dec a				dec 	a
.84d3	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.84d6	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.84d9	9c 55 06	stz $0655			stz 	gxHFlip
.84dc	2c 56 06	bit $0656			bit 	gxUseMode
.84df	10 03		bpl $84e4			bpl 	_GXNotVertical
.84e1	8d 54 06	sta $0654			sta 	gxVFlip
.84e4					_GXNotVertical:
.84e4	50 03		bvc $84e9			bvc 	_GXNotHorizontal
.84e6	8d 55 06	sta $0655			sta 	gxHFlip
.84e9					_GXNotHorizontal:
.84e9	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.84ec	48		pha				pha
.84ed	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.84f0	8e 51 06	stx $0651			stx 	gxAcquireVector
.84f3	20 3b 86	jsr $863b			jsr 	gxOpenBitmap 				; open the bitmap.
.84f6	ad 56 06	lda $0656			lda 	gxUseMode 					; scale bits
.84f9	4a		lsr a				lsr 	a
.84fa	4a		lsr a				lsr 	a
.84fb	4a		lsr a				lsr 	a
.84fc	29 07		and #$07			and		#7
.84fe	1a		inc a				inc 	a
.84ff	8d 53 06	sta $0653			sta 	gxScale
.8502	64 38		stz $38				stz 	gzTemp1						; start first line
.8504					_GXGELoop:
.8504	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.8506	4d 54 06	eor $0654			eor 	gxVFlip
.8509	aa		tax				tax 								; get the Xth line.
.850a	20 48 85	jsr $8548			jsr 	_GXCallAcquire 				; get that data.
.850d	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.8510	85 39		sta $39				sta 	gzTemp1+1
.8512					_GXGELoop2:
.8512	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.8515	cd 3a 06	cmp $063a			cmp 	gxHeight
.8518	b0 10		bcs $852a			bcs 	_GXDGEExit
.851a	20 4b 85	jsr $854b			jsr 	GXRenderOneLine 			; render line
.851d	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.851f	d0 f1		bne $8512			bne 	_GXGELoop2
.8521	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.8523	a5 38		lda $38				lda 	gzTemp1
.8525	cd 4f 06	cmp $064f			cmp 	gxSize
.8528	d0 da		bne $8504			bne 	_GXGELoop
.852a					_GXDGEExit:
.852a	68		pla				pla 								; restore Y for next time
.852b	8d 33 06	sta $0633			sta 	gxY0
.852e	ae 53 06	ldx $0653			ldx 	gxScale 					; get scale (1-8)
.8531					_GXShiftLeft:
.8531	18		clc				clc
.8532	ad 4f 06	lda $064f			lda 	gxSize
.8535	6d 31 06	adc $0631			adc 	gxX0
.8538	8d 31 06	sta $0631			sta 	gxX0
.853b	90 03		bcc $8540			bcc 	_GXSLNoCarry
.853d	ee 32 06	inc $0632			inc 	gxX0+1
.8540					_GXSLNoCarry:
.8540	ca		dex				dex
.8541	d0 ee		bne $8531			bne 	_GXShiftLeft
.8543	20 4c 86	jsr $864c			jsr 	GXCloseBitmap
.8546	18		clc				clc
.8547	60		rts				rts
.8548					_GXCallAcquire:
.8548	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.854b					GXRenderOneLine:
.854b	20 59 86	jsr $8659			jsr 	GXPositionCalc 				; calculate position/offset.
.854e	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.8551	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.8553					_GXROLLoop1:
.8553	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.8556	85 3b		sta $3b				sta 	gzTemp2+1
.8558					_GXROLLoop2:
.8558	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.855a	4d 55 06	eor $0655			eor 	gxHFlip
.855d	aa		tax				tax 								; read from the pixel buffer
.855e	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8561	f0 0a		beq $856d			beq 	_GXZeroPixel 				; don't draw if zero.
.8563	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8565	2d 3e 06	and $063e			and 	gxANDValue
.8568	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.856b	91 3c		sta ($3c),y			sta 	(gsTemp),y
.856d					_GXZeroPixel:
.856d	c8		iny				iny 								; advance pointer
.856e	d0 05		bne $8575			bne 	_GXNoShift
.8570	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.8572	20 c2 84	jsr $84c2			jsr 	GXDLTCheckWrap				; check for new page.
.8575					_GXNoShift:
.8575	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.8577	d0 df		bne $8558			bne 	_GXROLLoop2
.8579	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.857b	a5 3a		lda $3a				lda 	gzTemp2
.857d	cd 4f 06	cmp $064f			cmp 	gxSize
.8580	d0 d1		bne $8553			bne 	_GXROLLoop1
.8582	ee 33 06	inc $0633			inc 	gxY0
.8585	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.0655					gxHFlip:
>0655							.fill 	1
.0656					gxUseMode:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8586					GXFontHandler:
.8586	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.8588	4d 3b 06	eor $063b			eor 	gxMode
.858b	8d 56 06	sta $0656			sta 	gxUseMode
.858e	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.8590	06 36		asl $36				asl	 	gzTemp0 					; x 2
.8592	26 37		rol $37				rol	 	gzTemp0+1
.8594	06 36		asl $36				asl	 	gzTemp0 					; x 4
.8596	26 37		rol $37				rol	 	gzTemp0+1
.8598	06 36		asl $36				asl	 	gzTemp0 					; x 8
.859a	26 37		rol $37				rol	 	gzTemp0+1
.859c	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.859e	09 c0		ora #$c0			ora 	#$C0
.85a0	85 37		sta $37				sta 	gzTemp0+1
.85a2	a9 08		lda #$08			lda 	#8 							; size 8x8
.85a4	a2 ac		ldx #$ac			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.85a6	a0 85		ldy #$85			ldy 	#GXGetGraphicDataFont >> 8
.85a8	20 cf 84	jsr $84cf			jsr 	GXDrawGraphicElement
.85ab	60		rts				rts
.85ac					GXGetGraphicDataFont:
.85ac	8a		txa				txa 								; X->Y
.85ad	a8		tay				tay
.85ae	a6 01		ldx $01				ldx 	1 							; preserve old value
.85b0	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.85b2	85 01		sta $01				sta 	1
.85b4	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.85b6	86 01		stx $01				stx 	1 							; put old value back.
.85b8	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.85ba					_GXExpand:
.85ba	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.85bd	0a		asl a				asl 	a 							; shift bit 7 into C
.85be	90 08		bcc $85c8			bcc 	_GXNoPixel
.85c0	48		pha				pha 								; if set, set pixel buffer to current colour.
.85c1	ad 3c 06	lda $063c			lda 	gxColour
.85c4	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.85c7	68		pla				pla
.85c8					_GXNoPixel:
.85c8	e8		inx				inx 								; do the whole byte.
.85c9	e0 08		cpx #$08			cpx 	#8
.85cb	d0 ed		bne $85ba			bne 	_GXExpand
.85cd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.85ce					GXSpriteHandler:
.85ce	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.85d0	4d 3b 06	eor $063b			eor 	gxMode
.85d3	8d 56 06	sta $0656			sta 	gxUseMode
.85d6	a9 18		lda #$18			lda 	#GXSpritePage
.85d8	8d 57 06	sta $0657			sta 	GXSpriteBasePage
.85db	a6 36		ldx $36				ldx 	gzTemp0 					; sprite #
.85dd	da		phx				phx
.85de	20 3b 86	jsr $863b			jsr 	GXOpenBitmap 				; can access sprite information
.85e1	68		pla				pla
.85e2	20 ca 86	jsr $86ca			jsr 	GXFindSprite 				; get the sprite address
.85e5	20 4c 86	jsr $864c			jsr 	GXCloseBitmap
.85e8	ad 58 06	lda $0658			lda 	GXSSize 					; return size
.85eb	a2 f3		ldx #$f3			ldx 	#GXSpriteAcquire & $FF
.85ed	a0 85		ldy #$85			ldy 	#GXSpriteAcquire >> 8
.85ef	20 cf 84	jsr $84cf			jsr 	GXDrawGraphicElement
.85f2	60		rts				rts
.85f3					GXSpriteAcquire:
.85f3	ad 57 06	lda $0657			lda 	GXspriteBasePage			; point to base page
.85f6	85 0b		sta $0b				sta 	GFXEditSlot
.85f8	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.85fa	a9 00		lda #$00			lda 	#0
.85fc	ae 59 06	ldx $0659			ldx 	GXSSizeRaw
.85ff					_GXTimesRowNumber:
.85ff	18		clc				clc
.8600	65 36		adc $36				adc 	zTemp0
.8602	ca		dex				dex
.8603	10 fa		bpl $85ff			bpl 	_GXTimesRowNumber
.8605	64 37		stz $37				stz 	gzTemp0+1
.8607	0a		asl a				asl 	a 							; row x 2,4,6,8
.8608	26 37		rol $37				rol 	gzTemp0+1
.860a	0a		asl a				asl 	a 							; row x 4,8,12,16
.860b	26 37		rol $37				rol 	gzTemp0+1
.860d	0a		asl a				asl 	a 							; row x 8,16,24,32
.860e	26 37		rol $37				rol 	gzTemp0+1
.8610	85 36		sta $36				sta 	gzTemp0
.8612	18		clc				clc 								; add base address.
.8613	a5 36		lda $36				lda 	gzTemp0
.8615	6d 5b 06	adc $065b			adc 	GXSAddress
.8618	85 36		sta $36				sta 	gzTemp0
.861a	a5 37		lda $37				lda 	gzTemp0+1
.861c	6d 5c 06	adc $065c			adc 	GXSAddress+1
.861f					_GXSAFindPage:
.861f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8621	90 06		bcc $8629			bcc 	_GXSAFoundPage
.8623	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.8625	e6 0b		inc $0b				inc 	GFXEditSlot
.8627	80 f6		bra $861f			bra 	_GXSAFindPage
.8629					_GXSAFoundPage:
.8629	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.862b	85 37		sta $37				sta 	gzTemp0+1 					; gzTemp0 now points to the page
.862d	a0 00		ldy #$00			ldy 	#0
.862f					_GXSACopyLoop:
.862f	b1 36		lda ($36),y			lda 	(gzTemp0),y
.8631	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.8634	c8		iny				iny
.8635	cc 58 06	cpy $0658			cpy 	GXSSize
.8638	d0 f5		bne $862f			bne 	_GXSACopyLoop
.863a	60		rts				rts
.0657					GXSpriteBasePage:
>0657							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.863b					GXOpenBitmap:
.863b	78		sei				sei 								; no interrupts here
.863c	a5 00		lda $00				lda 	0 							; save original MMU Control register
.863e	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.8641	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.8643	85 00		sta $00				sta 	0
.8645	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.8647	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.864a	58		cli				cli
.864b	60		rts				rts
.864c					GXCloseBitmap:
.864c	78		sei				sei
.864d	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8650	85 0b		sta $0b				sta 	GFXEditSlot
.8652	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8655	85 00		sta $00				sta 	0
.8657	58		cli				cli
.8658	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8659					GXPositionCalc:
.8659	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.865b	48		pha				pha
.865c	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.865f	85 3c		sta $3c				sta 	gsTemp
.8661	64 3d		stz $3d				stz 	gsTemp+1
.8663	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.8665	26 3d		rol $3d				rol 	gsTemp+1
.8667	06 3c		asl $3c				asl 	gsTemp
.8669	26 3d		rol $3d				rol 	gsTemp+1
.866b	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.866c	65 3c		adc $3c				adc 	gsTemp
.866e	85 3c		sta $3c				sta 	gsTemp
.8670	90 02		bcc $8674			bcc 	_GXPCNoCarry
.8672	e6 3d		inc $3d				inc 	gsTemp+1
.8674					_GXPCNoCarry:
.8674	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8676	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8678	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.867a	85 36		sta $36				sta 	gzTemp0
.867c	64 3d		stz $3d				stz 	gsTemp+1
.867e	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8680					_GXPCMultiply32:
.8680	06 3c		asl $3c				asl 	gsTemp
.8682	26 3d		rol $3d				rol 	gsTemp+1
.8684	3a		dec a				dec 	a
.8685	d0 f9		bne $8680			bne 	_GXPCMultiply32
.8687	18		clc				clc
.8688	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.868b	65 3c		adc $3c				adc 	gsTemp
.868d	8d 41 06	sta $0641			sta 	gsOffset
.8690	ad 32 06	lda $0632			lda 	GXX0+1
.8693	65 3d		adc $3d				adc 	gsTemp+1
.8695	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8697	90 04		bcc $869d			bcc 	_GXPCNoOverflow
.8699	29 1f		and #$1f			and 	#$1F 						; fix it up
.869b	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.869d					_GXPCNoOverflow:
.869d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.869f	85 3d		sta $3d				sta 	gsTemp+1
.86a1	64 3c		stz $3c				stz 	gsTemp
.86a3	18		clc				clc
.86a4	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.86a6	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.86a9	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.86ab	68		pla				pla
.86ac	85 36		sta $36				sta 	gzTemp0
.86ae	60		rts				rts
.86af					GXMovePositionDown:
.86af	18		clc				clc 								; add 320 to offset/temp+1
.86b0	ad 41 06	lda $0641			lda 	gsOffset
.86b3	69 40		adc #$40			adc 	#64
.86b5	8d 41 06	sta $0641			sta 	gsOffset
.86b8	a5 3d		lda $3d				lda 	gsTemp+1
.86ba	69 01		adc #$01			adc 	#1
.86bc	85 3d		sta $3d				sta 	gsTemp+1
.86be	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.86c0	90 07		bcc $86c9			bcc 	_GXMPDExit
.86c2	38		sec				sec  								; next page
.86c3	e9 20		sbc #$20			sbc 	#$20
.86c5	85 3d		sta $3d				sta 	gsTemp+1
.86c7	e6 0b		inc $0b				inc 	GFXEditSlot
.86c9					_GXMPDExit:
.86c9	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.86ca					GXFindSprite:
.86ca	aa		tax				tax
.86cb	ad 57 06	lda $0657			lda 	GXSpriteBasePage 			; access the base page of the sprite
.86ce	85 0b		sta $0b				sta 	GFXEditSlot
.86d0	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.86d3	8d 5c 06	sta $065c			sta 	GXSAddress+1
.86d6	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.86d9	48		pha				pha 								; save twice
.86da	48		pha				pha
.86db	29 03		and #$03			and 	#3 							; get sprite size
.86dd	8d 59 06	sta $0659			sta 	GXSSizeRaw 					; save raw (0-3)
.86e0	aa		tax				tax
.86e1	bd 02 87	lda $8702,x			lda 	_GXFXSSTTable,x 			; read sprite size
.86e4	8d 58 06	sta $0658			sta 	GXSSize 					; save (8/16/24/32)
.86e7	68		pla				pla 								; get LUT
.86e8	4a		lsr a				lsr		a
.86e9	4a		lsr a				lsr		a
.86ea	29 03		and #$03			and 	#3
.86ec	8d 5a 06	sta $065a			sta 	GXSLUT
.86ef	68		pla				pla 								; address, neeeds to be x 4
.86f0	29 f0		and #$f0			and 	#$F0
.86f2	8d 5b 06	sta $065b			sta 	GXSAddress
.86f5	0e 5b 06	asl $065b			asl 	GXSAddress
.86f8	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86fb	0e 5b 06	asl $065b			asl 	GXSAddress
.86fe	2e 5c 06	rol $065c			rol 	GXSAddress+1
.8701	60		rts				rts
.8702					_GXFXSSTTable:
>8702	08 10 18 20					.byte 	8,16,24,32
.0658					GXSSize:
>0658							.fill 	1
.0659					GXSSizeRaw:
>0659							.fill 	1
.065a					GXSLUT:
>065a							.fill 	1
.065b					GXSAddress:
>065b							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8706					GXSortXY:
.8706	20 24 87	jsr $8724			jsr 	GXSortY 					; will be sorted on Y now
.8709	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.870c	cd 35 06	cmp $0635			cmp 	gxX1
.870f	ad 32 06	lda $0632			lda 	gXX0+1
.8712	ed 36 06	sbc $0636			sbc 	gXX1+1
.8715	90 0c		bcc $8723			bcc 	_GXSXYExit 					; X0 < X1 exit
.8717	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8719	a0 04		ldy #$04			ldy 	#4
.871b	20 38 87	jsr $8738			jsr 	GXSwapXY
.871e	e8		inx				inx
.871f	c8		iny				iny
.8720	20 38 87	jsr $8738			jsr 	GXSwapXY
.8723					_GXSXYExit:
.8723	60		rts				rts
.8724					GXSortY:
.8724	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8727	cd 37 06	cmp $0637			cmp 	gxY1
.872a	90 0b		bcc $8737			bcc 	_GXSYSorted
.872c	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.872e	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8730					_GXSwap1:
.8730	20 38 87	jsr $8738			jsr 	GXSwapXY
.8733	88		dey				dey
.8734	ca		dex				dex
.8735	10 f9		bpl $8730			bpl 	_GXSwap1
.8737					_GXSYSorted:
.8737	60		rts				rts
.8738					GXSwapXY:
.8738	bd 31 06	lda $0631,x			lda 	gxX0,x
.873b	48		pha				pha
.873c	b9 31 06	lda $0631,y			lda 	gxX0,y
.873f	9d 31 06	sta $0631,x			sta 	gxX0,x
.8742	68		pla				pla
.8743	99 31 06	sta $0631,y			sta 	gxX0,y
.8746	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.8747					RunDemos:
.8747	64 01		stz $01				stz 	1
.8749	a9 0f		lda #$0f			lda 	#$0F
.874b	8d 00 d0	sta $d000			sta 	$D000
.874e	a9 01		lda #$01			lda 	#1
.8750	8d 00 d1	sta $d100			sta 	$D100
.8753	9c 01 d1	stz $d101			stz 	$D101
.8756	9c 02 d1	stz $d102			stz 	$D102
.8759	a9 01		lda #$01			lda 	#1
.875b	8d 03 d1	sta $d103			sta 	$D103
.875e	a9 08		lda #$08			lda 	#8
.8760	8d 39 06	sta $0639			sta 	gxBasePage
.8763	a9 f0		lda #$f0			lda 	#240
.8765	8d 3a 06	sta $063a			sta 	gxHeight
.8768					loop:
.8768	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.876a	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.876c	a0 00		ldy #$00			ldy 	#(0)
.876e	20 85 80	jsr $8085			jsr 	GraphicDraw
.8771	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.8773	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.8775	a0 00		ldy #$00			ldy 	#(0)
.8777	20 85 80	jsr $8085			jsr 	GraphicDraw
.877a	a9 31		lda #$31			lda 	#((24)*2)+(((322) >> 8) & 1)
.877c	a2 42		ldx #$42			ldx 	#((322) & $FF)
.877e	a0 dc		ldy #$dc			ldy 	#(220)
.8780	20 85 80	jsr $8085			jsr 	GraphicDraw
.8783	a9 30		lda #$30			lda 	#((24)*2)+(((102) >> 8) & 1)
.8785	a2 66		ldx #$66			ldx 	#((102) & $FF)
.8787	a0 28		ldy #$28			ldy 	#(40)
.8789	20 85 80	jsr $8085			jsr 	GraphicDraw
.878c	20 de 9d	jsr $9dde	demo:	jsr 	Random32Bit
.878f	ee 3d 06	inc $063d			inc 	gxEORValue
.8792	a9 30		lda #$30			lda 	#24*2
.8794	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8797	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.879a	20 85 80	jsr $8085			jsr 	GraphicDraw
.879d	80 ed		bra $878c			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.879f					AssembleGroup1:
.879f	a9 ff		lda #$ff			lda 	#$FF
.87a1	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.87a4	80 02		bra $87a8			bra 	AsmGroup12
.87a6					AssembleGroup2:
.87a6	a5 00		lda $00				lda 	$00
.87a8					AsmGroup12:
.87a8	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.87ab	68		pla				pla 								; pop the return address to access the information following.
.87ac	fa		plx				plx
.87ad	20 36 88	jsr $8836			jsr 	AccessParameters 			; get opcode and save as base
.87b0	8d a4 04	sta $04a4			sta 	BaseOpcode
.87b3	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.87b6	d0 08		bne $87c0			bne 	_AG12HaveMask
.87b8	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.87ba	20 3e 88	jsr $883e			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.87bd	8d a5 04	sta $04a5			sta 	ModeMask
.87c0					_AG12HaveMask:
.87c0	20 79 89	jsr $8979			jsr 	TypeAndCalculateOperand 	; get zero page type
.87c3	da		phx				phx 								; save found address mode
.87c4	20 a2 88	jsr $88a2			jsr 	AssembleModeX
.87c7	fa		plx				plx  								; restore address mode
.87c8	b0 0b		bcs $87d5			bcs 	_AG12Exit
.87ca	20 d6 87	jsr $87d6			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.87cd	20 a2 88	jsr $88a2			jsr 	AssembleModeX
.87d0	b0 03		bcs $87d5			bcs 	_AG12Exit
.87d2	4c 94 ad	jmp $ad94			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.87d5					_AG12Exit:
.87d5	60		rts				rts
.87d6					PromoteToAbsolute:
.87d6	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.87d8	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.87da	f0 19		beq $87f5			beq 	_PTADo
.87dc	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.87de	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.87e0	f0 13		beq $87f5			beq 	_PTADo
.87e2	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.87e4	e0 80		cpx #$80			cpx 	#AM_ZEROY
.87e6	f0 0d		beq $87f5			beq 	_PTADo
.87e8	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.87ea	e0 d1		cpx #$d1			cpx 	#AM_IND
.87ec	f0 07		beq $87f5			beq 	_PTADo
.87ee	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.87f0	e0 c0		cpx #$c0			cpx 	#AM_INDX
.87f2	f0 01		beq $87f5			beq 	_PTADo
.87f4	60		rts				rts
.87f5					_PTADo:
.87f5	aa		tax				tax
.87f6	60		rts				rts
.87f7					AssembleGroup3:
.87f7	68		pla				pla 								; get parameters, which is just the opcode.
.87f8	fa		plx				plx
.87f9	20 36 88	jsr $8836			jsr 	AccessParameters 			; get and output opcode
.87fc	20 4e 88	jsr $884e			jsr 	AssemblerWriteByte
.87ff	20 dd 89	jsr $89dd			jsr 	CalculateOperand 			; get a 16 bit operand
.8802	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8805	38		sec				sec
.8806	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8809	48		pha				pha 								; LSB in A
.880a	ad 10 04	lda $0410			lda 	NSMantissa1
.880d	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8810	aa		tax				tax 								; MSB in X
.8811	68		pla				pla
.8812	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8813	69 7f		adc #$7f			adc 	#$7F
.8815	90 01		bcc $8818			bcc 	_AG3NoCarry
.8817	e8		inx				inx
.8818					_AG3NoCarry:
.8818	38		sec				sec 								; fix back and write out anyways.
.8819	e9 80		sbc #$80			sbc 	#$80
.881b	20 4e 88	jsr $884e			jsr 	AssemblerWriteByte
.881e	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8820	f0 0a		beq $882c			beq 	_AG3Exit
.8822	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8825	29 01		and #$01			and 	#1
.8827	f0 03		beq $882c			beq 	_AG3Exit
.8829	4c 99 ad	jmp $ad99			jmp 	RangeError 					; no, branch is out of range
.882c					_AG3Exit:
.882c	60		rts				rts
.882d					AssembleGroup4:
.882d	68		pla				pla 								; pop address
.882e	fa		plx				plx
.882f	20 36 88	jsr $8836			jsr 	AccessParameters 			; access and get first
.8832	20 4e 88	jsr $884e			jsr 	AssemblerWriteByte 			; output it.
.8835	60		rts				rts
.8836					AccessParameters:
.8836	8d a1 04	sta $04a1			sta 	ParamStart
.8839	8e a2 04	stx $04a2			stx 	ParamStart+1
.883c	a9 01		lda #$01			lda 	#1
.883e					GetParameter:
.883e	5a		phy				phy
.883f	a8		tay				tay
.8840	ad a1 04	lda $04a1			lda 	ParamStart
.8843	85 36		sta $36				sta 	zTemp0
.8845	ad a2 04	lda $04a2			lda 	ParamStart+1
.8848	85 37		sta $37				sta 	zTemp0+1
.884a	b1 36		lda ($36),y			lda 	(zTemp0),y
.884c	7a		ply				ply
.884d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.884e					AssemblerWriteByte:
.884e	48		pha			pha
.884f	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8852	29 02		and #$02		and 	#2
.8854	f0 1b		beq $8871		beq 	_AWBNoPrint
.8856	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8859	20 8c 88	jsr $888c		jsr 	PrintHex
.885c	ad 9e 04	lda $049e		lda		AssemblerAddress
.885f	20 8c 88	jsr $888c		jsr 	PrintHex
.8862	a9 20		lda #$20		lda 	#' '
.8864	20 39 af	jsr $af39		jsr 	EXTPrintCharacter
.8867	68		pla			pla 									; print byte
.8868	48		pha			pha
.8869	20 8c 88	jsr $888c		jsr 	PrintHex
.886c	a9 0d		lda #$0d		lda 	#13
.886e	20 39 af	jsr $af39		jsr 	EXTPrintCharacter
.8871					_AWBNoPrint:
.8871	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8874	85 36		sta $36			sta 	zTemp0
.8876	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8879	f0 0e		beq $8889		beq 	_AWBRange
.887b	85 37		sta $37			sta 	zTemp0+1
.887d	68		pla			pla 									; write byte out
.887e	92 36		sta ($36)		sta 	(zTemp0)
.8880	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8883	d0 03		bne $8888		bne 	_AWBNoCarry
.8885	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8888					_AWBNoCarry:
.8888	60		rts			rts
.8889					_AWBRange:
.8889	4c 99 ad	jmp $ad99		jmp 	RangeError
.888c					PrintHex:
.888c	48		pha				pha
.888d	4a		lsr a				lsr 	a
.888e	4a		lsr a				lsr 	a
.888f	4a		lsr a				lsr 	a
.8890	4a		lsr a				lsr 	a
.8891	20 95 88	jsr $8895			jsr 	_PrintNibble
.8894	68		pla				pla
.8895					_PrintNibble:
.8895	29 0f		and #$0f			and 	#15
.8897	c9 0a		cmp #$0a			cmp 	#10
.8899	90 02		bcc $889d			bcc 	_NoShift
.889b	69 06		adc #$06			adc 	#6
.889d					_NoShift:
.889d	69 30		adc #$30			adc 	#48
.889f	4c 39 af	jmp $af39			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.88a2					AssembleModeX:
.88a2	5a		phy				phy
.88a3	ad a3 04	lda $04a3			lda 	IsGroup1
.88a6	f0 17		beq $88bf			beq 	_AMXGroup2
.88a8	8a		txa				txa 							; is it in group # 1
.88a9	29 40		and #$40			and 	#AM_ISG1
.88ab	f0 50		beq $88fd			beq 	_AMXFail 				; no, give up.
.88ad	8a		txa				txa 							; get back.
.88ae	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.88b0	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.88b2	d0 22		bne $88d6			bne 	_AMXHaveInfo
.88b4	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.88b7	c9 81		cmp #$81			cmp 	#$81
.88b9	f0 42		beq $88fd			beq 	_AMXFail
.88bb	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.88bd	80 17		bra $88d6			bra 	_AMXHaveInfo 			; odd design decision there.
.88bf					_AMXGroup2:
.88bf	8a		txa				txa 							; is it in group 2 ?
.88c0	29 20		and #$20			and 	#AM_ISG2
.88c2	f0 39		beq $88fd			beq 	_AMXFail 				; no, give up.
.88c4	8a		txa				txa 							; get the offset into Y
.88c5	29 1f		and #$1f			and 	#$1F
.88c7	4a		lsr a				lsr 	a 						; make it 0-7.
.88c8	4a		lsr a				lsr  	a
.88c9	a8		tay				tay
.88ca	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.88cd					_AMXCheckOkay:
.88cd	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.88ce	88		dey				dey
.88cf	10 fc		bpl $88cd			bpl 	_AMXCheckOkay
.88d1	90 2a		bcc $88fd			bcc 	_AMXFail 				; not allowed.
.88d3	8a		txa				txa  							; get mask back
.88d4	29 1f		and #$1f			and 	#$1F
.88d6					_AMXHaveInfo:
.88d6	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.88d8	10 05		bpl $88df			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.88da	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.88dd	d0 1e		bne $88fd			bne 	_AMXFail
.88df					_AMXAnySize:
.88df	18		clc				clc 							; add offset to the base opcode
.88e0	6d a4 04	adc $04a4			adc 	BaseOpcode
.88e3					_AMXOutputCode:
.88e3	20 4e 88	jsr $884e			jsr 	AssemblerWriteByte 		; write the opcode out.
.88e6	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.88e8	f0 10		beq $88fa			beq 	_AMXExit
.88ea	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.88ed	20 4e 88	jsr $884e			jsr 	AssemblerWriteByte
.88f0	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.88f2	30 06		bmi $88fa			bmi 	_AMXExit
.88f4	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.88f7	20 4e 88	jsr $884e			jsr 	AssemblerWriteByte
.88fa					_AMXExit:
.88fa	7a		ply				ply
.88fb	38		sec				sec
.88fc	60		rts				rts
.88fd					_AMXFail:
.88fd	a0 00		ldy #$00			ldy 	#0
.88ff					_AMXCheckOddities:
.88ff	8a		txa				txa
.8900	d9 28 89	cmp $8928,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8903	d0 16		bne $891b			bne 	_AMXCONext
.8905	b9 26 89	lda $8926,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8908	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.890b	d0 0e		bne $891b			bne 	_AMXCONext
.890d	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.890f	10 05		bpl $8916			bpl 	_AMXCONotZero
.8911	ad 10 04	lda $0410			lda 	NSMantissa1
.8914	d0 05		bne $891b			bne 	_AMXCONext
.8916					_AMXCONotZero:
.8916	b9 27 89	lda $8927,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8919	80 c8		bra $88e3			bra 	_AMXOutputCode 			; and assemble it
.891b					_AMXCONext:
.891b	c8		iny				iny
.891c	c8		iny				iny
.891d	c8		iny				iny
.891e	b9 26 89	lda $8926,y			lda 	ExtraOpcode+0,y 		; end of table
.8921	d0 dc		bne $88ff			bne 	_AMXCheckOddities
.8923					_AMXCOFail:
.8923	7a		ply				ply
.8924	18		clc				clc
.8925	60		rts				rts
.8926					ExtraOpcode:
>8926	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8929	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>892c	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>892f	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8932	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8935	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8938	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>893b	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>893e	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8941	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8944	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8945					LabelHere:
.8945	c8		iny				iny 								; skip .
.8946	a2 00		ldx #$00			ldx 	#0 							; get a term
.8948	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm 				; get a term
.894b	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.894e	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8950	d0 24		bne $8976			bne 	_ALType
.8952	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8955	85 36		sta $36				sta 	zTemp0
.8957	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.895a	85 37		sta $37				sta 	zTemp0+1
.895c	5a		phy				phy 								; copy address in.
.895d	a0 01		ldy #$01			ldy 	#1
.895f	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8962	92 36		sta ($36)			sta 	(zTemp0)
.8964	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8967	91 36		sta ($36),y			sta 	(zTemp0),y
.8969	c8		iny				iny
.896a	a9 00		lda #$00			lda 	#0
.896c	91 36		sta ($36),y			sta 	(zTemp0),y
.896e	c8		iny				iny
.896f	91 36		sta ($36),y			sta 	(zTemp0),y
.8971	c8		iny				iny
.8972	91 36		sta ($36),y			sta 	(zTemp0),y
.8974	7a		ply				ply
.8975	60		rts				rts
.8976					_ALType:
.8976	4c 9e ad	jmp $ad9e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8979					TypeAndCalculateOperand:
.8979	b1 30		lda ($30),y			lda 	(codePtr),y
.897b	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.897d	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.897f	f0 5b		beq $89dc			beq 	_TACOExit
.8981	c9 80		cmp #$80			cmp 	#KWC_EOL
.8983	f0 57		beq $89dc			beq 	_TACOExit
.8985	c8		iny				iny
.8986	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8988	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.898a	f0 51		beq $89dd			beq 	CalculateOperand
.898c	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.898e	f0 1f		beq $89af			beq 	_TACOIndirect
.8990	88		dey				dey 								; undo get of first character
.8991	20 dd 89	jsr $89dd			jsr 	CalculateOperand 			; get operand
.8994	b1 30		lda ($30),y			lda 	(codePtr),y
.8996	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8998	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.899a	d0 40		bne $89dc			bne 	_TACOExit
.899c	c8		iny				iny
.899d	20 25 a7	jsr $a725			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.89a0	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.89a2	c9 58		cmp #$58			cmp 	#'X'
.89a4	f0 36		beq $89dc			beq 	_TACOExit
.89a6	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.89a8	c9 59		cmp #$59			cmp 	#'Y'
.89aa	f0 30		beq $89dc			beq 	_TACOExit
.89ac					_TACOSyntax:
.89ac	4c 94 ad	jmp $ad94			jmp 	SyntaxError
.89af					_TACOIndirect:
.89af	20 dd 89	jsr $89dd			jsr 	CalculateOperand 			; get the operand
.89b2	b1 30		lda ($30),y			lda 	(codePtr),y
.89b4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.89b6	f0 17		beq $89cf			beq 	_TACOIndX
.89b8	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.89bb	b1 30		lda ($30),y			lda 	(codePtr),y
.89bd	a2 d1		ldx #$d1			ldx 	#AM_IND
.89bf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.89c1	d0 19		bne $89dc			bne 	_TACOExit
.89c3	c8		iny				iny
.89c4	20 25 a7	jsr $a725			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.89c7	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.89c9	d0 e1		bne $89ac			bne 	_TACOSyntax
.89cb	a2 d0		ldx #$d0			ldx 	#AM_INDY
.89cd	80 0d		bra $89dc			bra 	_TACOExit
.89cf					_TACOIndX:
.89cf	c8		iny				iny
.89d0	20 25 a7	jsr $a725			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.89d3	c9 58		cmp #$58			cmp 	#'X' 						; check X
.89d5	d0 d5		bne $89ac			bne 	_TACOSyntax
.89d7	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket			; check )
.89da	a2 c0		ldx #$c0			ldx 	#AM_INDX
.89dc					_TACOExit:
.89dc	60		rts				rts
.89dd					CalculateOperand:
.89dd	48		pha				pha
.89de	da		phx				phx
.89df	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.89e1	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger
.89e4	fa		plx				plx
.89e5	68		pla				pla
.89e6	60		rts				rts
.a725					TACOCheckXY:
.a725	b1 30		lda ($30),y			lda 	(codePtr),y
.a727	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a729	c9 40		cmp #$40			cmp 	#$40
.a72b	d0 21		bne $a74e			bne 	_TCXYFail
.a72d	b1 30		lda ($30),y			lda 	(codePtr),y
.a72f	18		clc				clc
.a730	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a732	85 37		sta $37				sta 	zTemp0+1
.a734	c8		iny				iny
.a735	b1 30		lda ($30),y			lda 	(codePtr),y
.a737	c8		iny				iny
.a738	85 36		sta $36				sta 	zTemp0
.a73a	5a		phy				phy 								; save position
.a73b	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a73d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a73f	d0 0c		bne $a74d			bne 	_TCXYPopFail
.a741	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a743	b1 36		lda ($36),y			lda 	(zTemp0),y
.a745	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a747	f0 08		beq $a751			beq 	_TCXYFound
.a749	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a74b	f0 04		beq $a751			beq 	_TCXYFound
.a74d					_TCXYPopFail:
.a74d	7a		ply				ply
.a74e					_TCXYFail:
.a74e	a9 00		lda #$00			lda 	#0
.a750	60		rts				rts
.a751					_TCXYFound:
.a751	7a		ply				ply 								; restore position
.a752	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a754	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.89e7					EditProgramCode:
.89e7	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.89ea	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.89ed	20 8c a0	jsr $a08c			jsr 	MemorySearch
.89f0	90 05		bcc $89f7			bcc 	_EPCNoDelete 				; reached the end don't delete
.89f2	d0 03		bne $89f7			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.89f4	20 7d af	jsr $af7d			jsr 	MemoryDeleteLine 			; delete the line
.89f7					_EPCNoDelete:
.89f7	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.89fa	c9 80		cmp #$80			cmp 	#KWC_EOL
.89fc	f0 0d		beq $8a0b			beq 	_EPCNoInsert
.89fe	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8a01	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8a04	20 8c a0	jsr $a08c			jsr 	MemorySearch
.8a07	18		clc				clc 								; insert at this point.
.8a08	20 b4 af	jsr $afb4			jsr 	MemoryInsertLine 			; insert the line
.8a0b					_EPCNoInsert:
.8a0b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8a0c					WarmStart:
.8a0c	a2 ff		ldx #$ff			ldx 	#$FF
.8a0e	9a		txs				txs
.8a0f	20 4f af	jsr $af4f			jsr 	EXTInputLine 				; get line to lineBuffer
.8a12	20 a6 a4	jsr $a4a6			jsr 	TokeniseLine 				; tokenise the line
.8a15	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8a18	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8a1b	d0 17		bne $8a34			bne 	_WSEditCode 				; if so,edit code.
.8a1d	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8a20	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8a22	85 30		sta $30				sta 	codePtr
.8a24	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8a26	85 31		sta $31				sta 	codePtr+1
.8a28	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8a2b	c9 80		cmp #$80			cmp 	#KWC_EOL
.8a2d	f0 dd		beq $8a0c			beq 	WarmStart
.8a2f	20 3d 90	jsr $903d			jsr 	RUNCodePointerLine 			; execute that line.
.8a32	80 d8		bra $8a0c			bra 	WarmStart
.8a34					_WSEditCode:
.8a34	20 e7 89	jsr $89e7			jsr 	EditProgramCode
.8a37	20 a5 8a	jsr $8aa5			jsr 	ClearCommand
.8a3a	80 d0		bra $8a0c			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8a3c					AssembleCommand:
.8a3c	a2 00		ldx #$00			ldx 	#0
.8a3e	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger 		; start address
.8a41	ad 08 04	lda $0408			lda 	NSMantissa0
.8a44	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8a47	ad 10 04	lda $0410			lda 	NSMantissa1
.8a4a	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8a4d	20 b6 a7	jsr $a7b6			jsr 	CheckComma
.8a50	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger 		; options
.8a53	ad 08 04	lda $0408			lda 	NSMantissa0
.8a56	8d a0 04	sta $04a0			sta 	AssemblerControl
.8a59	60		rts				rts
.8a5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8a5b					AssertCommand:
.8a5b	a2 00		ldx #$00			ldx 	#0
.8a5d	20 a4 9f	jsr $9fa4			jsr 	EvaluateInteger 			; the assert test
.8a60	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; exit if result is non zero.
.8a63	d0 05		bne $8a6a			bne 	_ACExit
.8a65	a9 0a		lda #$0a		lda	#10
.8a67	4c 75 94	jmp $9475		jmp	ErrorHandler
.8a6a					_ACExit:
.8a6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8a6b					CallCommand:
.8a6b	a2 00		ldx #$00			ldx 	#0
.8a6d	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger
.8a70					_CCClear
.8a70	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8a71	20 2d a0	jsr $a02d			jsr 	NSMSetZero
.8a74	e0 04		cpx #$04			cpx 	#4
.8a76	d0 f8		bne $8a70			bne 	_CCClear
.8a78	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8a7a					_CCCParam:
.8a7a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a7c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a7e	d0 09		bne $8a89			bne 	_CCCRun6502
.8a80	c8		iny				iny 								; skip comma
.8a81	e8		inx				inx	 								; next level
.8a82	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8a85	e0 03		cpx #$03			cpx 	#3
.8a87	90 f1		bcc $8a7a			bcc 	_CCCParam 					; done all 3 ?
.8a89					_CCCRun6502:
.8a89	5a		phy				phy 								; save position
.8a8a	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8a8d	85 37		sta $37				sta 	zTemp0+1
.8a8f	ad 08 04	lda $0408			lda 	NSMantissa0
.8a92	85 36		sta $36				sta 	zTemp0
.8a94	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8a97	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8a9a	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8a9d	20 a2 8a	jsr $8aa2			jsr 	_CCCZTemp0 					; call zTemp0
.8aa0	7a		ply				ply 								; restore position and exit
.8aa1	60		rts				rts
.8aa2					_CCCZTemp0:
.8aa2	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8aa5					ClearCommand:
.8aa5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8aa7	85 36		sta $36				sta 	0+zTemp0
.8aa9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8aab	85 37		sta $37				sta 	1+zTemp0
.8aad					_ClearZeroLoop:
.8aad	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8aaf	f0 24		beq $8ad5			beq 	_ClearZeroEnd
.8ab1	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8ab3	a9 00		lda #$00			lda 	#0
.8ab5					_ClearOneVariable:
.8ab5	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab7	c8		iny				iny
.8ab8	c0 08		cpy #$08			cpy 	#8
.8aba	d0 f9		bne $8ab5			bne 	_ClearOneVariable
.8abc	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8abe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ac0	c9 18		cmp #$18			cmp 	#NSTProcedure
.8ac2	d0 04		bne $8ac8			bne 	_ClearNotProcedure
.8ac4	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8ac6	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac8					_ClearNotProcedure:
.8ac8	18		clc				clc 								; go to the next variable
.8ac9	b2 36		lda ($36)			lda 	(zTemp0)
.8acb	65 36		adc $36				adc 	zTemp0
.8acd	85 36		sta $36				sta 	zTemp0
.8acf	90 dc		bcc $8aad			bcc 	_ClearZeroLoop
.8ad1	e6 37		inc $37				inc 	zTemp0+1
.8ad3	80 d8		bra $8aad			bra 	_ClearZeroLoop
.8ad5					_ClearZeroEnd:
.8ad5	18		clc				clc
.8ad6	a5 36		lda $36				lda 	zTemp0
.8ad8	69 01		adc #$01			adc 	#1
.8ada	8d 8c 04	sta $048c			sta 	lowMemPtr
.8add	a5 37		lda $37				lda 	zTemp0+1
.8adf	69 00		adc #$00			adc 	#0
.8ae1	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ae4	20 46 a1	jsr $a146			jsr 	StackReset
.8ae7	20 97 b0	jsr $b097			jsr 	StringSystemInitialise
.8aea	20 95 93	jsr $9395			jsr 	ProcedureScan
.8aed	20 f9 8f	jsr $8ff9			jsr 	Command_Restore
.8af0	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8af3	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8af6	9c a0 04	stz $04a0			stz 	AssemblerControl
.8af9	20 3c 9d	jsr $9d3c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8afc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8afd					Command_Data:
.8afd	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8aff	a2 80		ldx #$80			ldx 	#KWC_EOL
.8b01	20 e7 93	jsr $93e7			jsr 	ScanForward
.8b04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8b05					DimCommand:
.8b05	b1 30		lda ($30),y			lda 	(codePtr),y
.8b07	29 c0		and #$c0			and 	#$C0
.8b09	c9 40		cmp #$40			cmp 	#$40
.8b0b	d0 7a		bne $8b87			bne 	_DCSyntax
.8b0d	b1 30		lda ($30),y			lda 	(codePtr),y
.8b0f	18		clc				clc
.8b10	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b12	85 3f		sta $3f				sta 	zaTemp+1
.8b14	c8		iny				iny
.8b15	b1 30		lda ($30),y			lda 	(codePtr),y
.8b17	c8		iny				iny
.8b18	85 3e		sta $3e				sta 	zaTemp
.8b1a	5a		phy				phy
.8b1b	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8b1d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b1f	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8b21	c9 18		cmp #$18			cmp 	#NSTProcedure
.8b23	f0 62		beq $8b87			beq 	_DCSyntax
.8b25	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8b27	29 04		and #$04			and 	#NSBIsArray
.8b29	f0 64		beq $8b8f			beq 	_DCType
.8b2b	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8b2d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b2f	d0 59		bne $8b8a			bne 	_DCRedefine
.8b31	7a		ply				ply
.8b32	20 92 8b	jsr $8b92			jsr 	_DCGetSize 				; get array size, check it.
.8b35	5a		phy				phy
.8b36	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8b38	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8b3a	7a		ply				ply 							; is there a second (e.g. ,x)
.8b3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8b3d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b3f	d0 0a		bne $8b4b			bne 	_DCOneDimension
.8b41	c8		iny				iny 							; skip comma
.8b42	20 92 8b	jsr $8b92			jsr 	_DCGetSize 				; get 2nd array size
.8b45	5a		phy				phy
.8b46	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8b48	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b4a	7a		ply				ply
.8b4b					_DCOneDimension:
.8b4b	5a		phy				phy 							; save position
.8b4c	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8b4e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b50	aa		tax				tax
.8b51	c8		iny				iny
.8b52	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b54	e8		inx				inx 							; bump them.
.8b55	1a		inc a				inc 	a
.8b56	20 30 ac	jsr $ac30			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8b59	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8b5b	29 e0		and #$e0			and 	#$E0
.8b5d	d0 23		bne $8b82			bne 	_DCSize
.8b5f	a0 02		ldy #$02			ldy 	#2 						; get base type
.8b61	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b63	20 a0 8b	jsr $8ba0			jsr 	ScaleByBaseType 		; scale by base type
.8b66	a5 36		lda $36				lda 	zTemp0
.8b68	a6 37		ldx $37				ldx 	zTemp0+1
.8b6a	20 fe 9c	jsr $9cfe			jsr 	AllocateXABytes 		; allocate memory
.8b6d	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8b6f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b71	c8		iny				iny
.8b72	8a		txa				txa
.8b73	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b75	7a		ply				ply 							; get position back
.8b76	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket 		; check )
.8b79	b1 30		lda ($30),y			lda 	(codePtr),y
.8b7b	c8		iny				iny 							; consume in case
.8b7c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8b7e	f0 85		beq $8b05			beq 	DimCommand
.8b80	88		dey				dey 							; undo consume
.8b81	60		rts				rts
.8b82					_DCSize:
.8b82	a9 16		lda #$16		lda	#22
.8b84	4c 75 94	jmp $9475		jmp	ErrorHandler
.8b87					_DCSyntax:
.8b87	4c 94 ad	jmp $ad94			jmp 	SyntaxError
.8b8a					_DCRedefine:
.8b8a	a9 15		lda #$15		lda	#21
.8b8c	4c 75 94	jmp $9475		jmp	ErrorHandler
.8b8f					_DCType:
.8b8f	4c 9e ad	jmp $ad9e			jmp 	TypeError
.8b92					_DCGetSize:
.8b92	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8b94	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger 	; get array dimension
.8b97	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8b99	f0 e7		beq $8b82			beq 	_DCSize
.8b9b	c9 fe		cmp #$fe			cmp 	#254
.8b9d	f0 e3		beq $8b82			beq 	_DCSize
.8b9f	60		rts				rts
.8ba0					ScaleByBaseType:
.8ba0	29 10		and #$10			and 	#NSBIsString 			; is it string
.8ba2	d0 19		bne $8bbd			bne 	_SBBTString
.8ba4	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8ba6	48		pha				pha
.8ba7	a5 36		lda $36				lda 	zTemp0
.8ba9	48		pha				pha
.8baa	06 36		asl $36				asl 	zTemp0 					; x 2
.8bac	26 37		rol $37				rol 	zTemp0+1
.8bae	06 36		asl $36				asl 	zTemp0 					; x 4
.8bb0	26 37		rol $37				rol 	zTemp0+1
.8bb2	68		pla				pla 							; add stacked value = x 5
.8bb3	65 36		adc $36				adc 	zTemp0
.8bb5	85 36		sta $36				sta 	zTemp0
.8bb7	68		pla				pla
.8bb8	65 37		adc $37				adc 	zTemp0+1
.8bba	85 37		sta $37				sta 	zTemp0+1
.8bbc	60		rts				rts
.8bbd					_SBBTString:
.8bbd	06 36		asl $36				asl 	zTemp0
.8bbf	26 37		rol $37				rol 	zTemp0+1
.8bc1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8bc2					EndCommand:
.8bc2	4c 0c 8a	jmp $8a0c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8bc5					ForCommand:
.8bc5	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8bc7	20 e1 a0	jsr $a0e1			jsr 	StackOpen
.8bca	a2 00		ldx #$00			ldx 	#0
.8bcc	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm
.8bcf	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8bd2	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8bd4	d0 49		bne $8c1f			bne		_FCError
.8bd6	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8bd8	20 be a7	jsr $a7be			jsr 	CheckNextA
.8bdb	e8		inx				inx
.8bdc	20 a4 9f	jsr $9fa4			jsr 	EvaluateInteger 			; <from> in +1
.8bdf	b1 30		lda ($30),y			lda 	(codePtr),y
.8be1	c8		iny				iny 								; consume it
.8be2	48		pha				pha 								; save on stack for later
.8be3	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8be5	f0 04		beq $8beb			beq 	_FCNoSyntax
.8be7	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8be9	d0 37		bne $8c22			bne 	_FCSyntaxError
.8beb					_FCNoSyntax:
.8beb	e8		inx				inx
.8bec	20 a4 9f	jsr $9fa4			jsr 	EvaluateInteger
.8bef	20 25 a1	jsr $a125			jsr 	STKSaveCodePosition 		; save loop back position
.8bf2	68		pla				pla 								; restore DOWNTO or TO
.8bf3	5a		phy				phy 								; save Y on the stack
.8bf4	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8bf6	f0 02		beq $8bfa			beq 	_FCNotDownTo
.8bf8	a9 02		lda #$02			lda 	#2
.8bfa					_FCNotDownTo:
.8bfa	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8bfb	a0 10		ldy #$10			ldy 	#16
.8bfd	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8bff	a0 06		ldy #$06			ldy 	#6
.8c01	ad 08 04	lda $0408			lda 	NSMantissa0
.8c04	91 34		sta ($34),y			sta 	(basicStack),y
.8c06	ad 10 04	lda $0410			lda 	NSMantissa1
.8c09	c8		iny				iny
.8c0a	91 34		sta ($34),y			sta 	(basicStack),y
.8c0c	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8c0e	a2 01		ldx #$01			ldx 	#1
.8c10	20 25 8c	jsr $8c25			jsr 	FCIntegerToStack
.8c13	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8c15	a2 02		ldx #$02			ldx 	#2
.8c17	20 25 8c	jsr $8c25			jsr 	FCIntegerToStack
.8c1a	20 45 8c	jsr $8c45			jsr 	CopyIndexToReference
.8c1d	7a		ply				ply 								; restore position
.8c1e	60		rts				rts
.8c1f					_FCError:
.8c1f	4c 9e ad	jmp $ad9e			jmp 	TypeError
.8c22					_FCSyntaxError:
.8c22	4c 94 ad	jmp $ad94			jmp 	SyntaxError
.8c25					FCIntegerToStack:
.8c25	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8c28	10 03		bpl $8c2d			bpl	 	_FCNotNegative
.8c2a	20 e2 9f	jsr $9fe2			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c2d					_FCNotNegative:
.8c2d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c30	91 34		sta ($34),y			sta 	(basicStack),y
.8c32	c8		iny				iny
.8c33	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c36	91 34		sta ($34),y			sta 	(basicStack),y
.8c38	c8		iny				iny
.8c39	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8c3c	91 34		sta ($34),y			sta 	(basicStack),y
.8c3e	c8		iny				iny
.8c3f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8c42	91 34		sta ($34),y			sta 	(basicStack),y
.8c44	60		rts				rts
.8c45					CopyIndexToReference:
.8c45	5a		phy				phy
.8c46	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c48	38		sec				sec 								; (because we copy from offset 8)
.8c49	b1 34		lda ($34),y			lda 	(basicStack),y
.8c4b	e9 08		sbc #$08			sbc 	#8
.8c4d	85 36		sta $36				sta 	zTemp0
.8c4f	c8		iny				iny
.8c50	b1 34		lda ($34),y			lda 	(basicStack),y
.8c52	e9 00		sbc #$00			sbc 	#0
.8c54	85 37		sta $37				sta 	zTemp0+1
.8c56	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c58	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8c5a	b1 34		lda ($34),y			lda 	(basicStack),y
.8c5c	0a		asl a				asl 	a 							; into carry
.8c5d	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8c5f	90 14		bcc $8c75			bcc 	_CITRNormal
.8c61	38		sec				sec
.8c62					_CITRNegative:
.8c62	a9 00		lda #$00			lda 	#0
.8c64	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c66	91 36		sta ($36),y			sta 	(zTemp0),y
.8c68	c8		iny				iny
.8c69	ca		dex				dex
.8c6a	d0 f6		bne $8c62			bne 	_CITRNegative
.8c6c	88		dey				dey 								; look at MSB of mantissa
.8c6d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8c6f	09 80		ora #$80			ora 	#$80
.8c71	91 36		sta ($36),y			sta 	(zTemp0),y
.8c73	7a		ply				ply
.8c74	60		rts				rts
.8c75					_CITRNormal:
.8c75	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8c77	91 36		sta ($36),y			sta 	(zTemp0),y
.8c79	c8		iny				iny
.8c7a	ca		dex				dex
.8c7b	d0 f8		bne $8c75			bne 	_CITRNormal
.8c7d	7a		ply				ply 								; and exit.
.8c7e	60		rts				rts
.8c7f					NextCommand:
.8c7f	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8c81	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8c83	20 0d a1	jsr $a10d			jsr 	StackCheckFrame
.8c86	5a		phy				phy
.8c87	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8c89	b1 34		lda ($34),y			lda 	(basicStack),y
.8c8b	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8c8d	30 02		bmi $8c91			bmi 	_NCStepNeg
.8c8f	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8c91					_NCStepNeg:
.8c91	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8c93	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8c95	18		clc				clc
.8c96					_NCBump:
.8c96	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8c98	91 34		sta ($34),y			sta 	(basicStack),y
.8c9a	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8c9c	c8		iny				iny 								; next byte
.8c9d	ca		dex				dex 								; do four times
.8c9e	d0 f6		bne $8c96			bne 	_NCBump
.8ca0	20 45 8c	jsr $8c45			jsr		CopyIndexToReference		; copy it to the reference variable.
.8ca3	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ca5	b1 34		lda ($34),y			lda 	(basicStack),y
.8ca7	0a		asl a				asl 	a 							; sign bit to carry
.8ca8	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8caa	85 38		sta $38				sta 	zTemp1
.8cac	90 02		bcc $8cb0			bcc 	_NCCompRev 					; use if step is +ve
.8cae	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8cb0					_NCCompRev:
.8cb0	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8cb2	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8cb4	85 39		sta $39				sta 	zTemp1+1
.8cb6	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8cb8	38		sec				sec
.8cb9					_NCCompare:
.8cb9	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8cbb	b1 34		lda ($34),y			lda 	(basicStack),y
.8cbd	a4 39		ldy $39				ldy 	zTemp1+1
.8cbf	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8cc1	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8cc3	e6 39		inc $39				inc 	zTemp1+1
.8cc5	ca		dex				dex 								; do it 4 times.
.8cc6	d0 f1		bne $8cb9			bne 	_NCCompare
.8cc8	50 02		bvc $8ccc			bvc 	_NCNoOverflow 				; convert to signed comparison
.8cca	49 80		eor #$80			eor 	#$80
.8ccc					_NCNoOverflow:
.8ccc	7a		ply				ply 								; restore Y position
.8ccd	0a		asl a				asl 	a 							; is bit 7 set.
.8cce	90 04		bcc $8cd4			bcc 	_NCLoopback 				; if no , >= so loop back
.8cd0	20 ff a0	jsr $a0ff			jsr 	StackClose 					; exit the loop
.8cd3	60		rts				rts
.8cd4					_NCLoopBack:
.8cd4	20 36 a1	jsr $a136			jsr 	STKLoadCodePosition 		; loop back
.8cd7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8cd8					Command_GOSUB:
.8cd8	a2 00		ldx #$00			ldx 	#0
.8cda	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8cdd	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8cdf	20 e1 a0	jsr $a0e1			jsr 	StackOpen 					; create frame
.8ce2	20 25 a1	jsr $a125			jsr 	STKSaveCodePosition 		; save current position
.8ce5	4c fb 8c	jmp $8cfb			jmp 	GotoStackX
.8ce8					Command_RETURN:
.8ce8	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8cea	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8cec	20 0d a1	jsr $a10d			jsr 	StackCheckFrame
.8cef	20 36 a1	jsr $a136			jsr 	STKLoadCodePosition 		; restore code position
.8cf2	20 ff a0	jsr $a0ff			jsr 	StackClose
.8cf5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8cf6					GotoCommand:
.8cf6	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8cf8	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger
.8cfb					GotoStackX:
.8cfb	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8cfe	48		pha				pha 								; it is slightly inefficient, just in cases.
.8cff	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d02	fa		plx				plx
.8d03	20 8c a0	jsr $a08c			jsr 	MemorySearch 				; transfer to line number AX.
.8d06	90 05		bcc $8d0d			bcc 	_GotoError 					; not found, off end.
.8d08	d0 03		bne $8d0d			bne 	_GotoError 					; not found exactly
.8d0a	4c 36 90	jmp $9036			jmp 	RunNewLine 					; and go straight to new line code.
.8d0d					_GotoError:
.8d0d	a9 0d		lda #$0d		lda	#13
.8d0f	4c 75 94	jmp $9475		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8d12					IfCommand:
.8d12	a2 00		ldx #$00			ldx 	#0 							; If what.
.8d14	20 81 9f	jsr $9f81			jsr 	EvaluateNumber
.8d17	b1 30		lda ($30),y			lda 	(codePtr),y
.8d19	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8d1b	d0 0a		bne $8d27			bne 	_IFStructured
.8d1d	c8		iny				iny 								; consume THEN
.8d1e	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; is it zero
.8d21	f0 01		beq $8d24			beq 	_IfFail 					; if fail, go to next line
.8d23	60		rts				rts 								; if THEN just continue
.8d24					_IfFail:
.8d24	4c 9b 90	jmp $909b			jmp 	EOLCommand
.8d27					_IfStructured:
.8d27	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; is it zero
.8d2a	d0 07		bne $8d33			bne 	_IfExit 					; if not, then continue normally.
.8d2c	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8d2e	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8d30	20 e7 93	jsr $93e7			jsr 	ScanForward 				; and run from there/
.8d33					_IfExit:
.8d33	60		rts				rts
.8d34					ElseCode:
.8d34	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d36	aa		tax				tax 								; so just go to the structure exit
.8d37	20 e7 93	jsr $93e7			jsr 	ScanForward
.8d3a	60		rts				rts
.8d3b					EndIf:
.8d3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8d3c					LetCommand:
.8d3c	a2 00		ldx #$00			ldx 	#0
.8d3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d40	c9 10		cmp #$10			cmp 	#KWD_AT
.8d42	d0 16		bne $8d5a			bne 	_LCStandard
.8d44	c8		iny				iny 								; skip equal
.8d45	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm 				; get a number
.8d48	20 93 99	jsr $9993			jsr 	Dereference 				; dereference it
.8d4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8d4e	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8d50	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8d53	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8d55	d0 10		bne $8d67			bne 	_LCMain
.8d57	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; was a reference before.
.8d5a					_LCStandard:
.8d5a	ad 66 98	lda $9866			lda 	PrecedenceLevel+"*"			; precedence > this
.8d5d	20 80 98	jsr $9880			jsr 	EvaluateExpressionAtPrecedence
.8d60	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8d63	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8d65	f0 0e		beq $8d75			beq 	_LetGoProc 					; it's a procedure call.
.8d67					_LCMain:
.8d67	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8d69	20 be a7	jsr $a7be			jsr 	CheckNextA
.8d6c	e8		inx				inx 								; RHS
.8d6d	20 78 9f	jsr $9f78			jsr 	EvaluateValue
.8d70	ca		dex				dex
.8d71	20 78 8d	jsr $8d78			jsr 	AssignVariable
.8d74	60		rts				rts
.8d75					_LetGoProc:
.8d75	4c 11 8f	jmp $8f11			jmp 	CallProcedure
.8d78					AssignVariable:
.8d78	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8d7b	48		pha				pha 								; save a copy
.8d7c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8d7f	29 10		and #$10			and 	#NSBIsString
.8d81	d0 0b		bne $8d8e			bne 	_ASError
.8d83	68		pla				pla 								; get back
.8d84	29 10		and #$10			and 	#NSBIsString 				; check type
.8d86	d0 03		bne $8d8b			bne 	_ASString
.8d88	4c bb 98	jmp $98bb			jmp 	AssignNumber
.8d8b					_ASString:
.8d8b	4c 29 99	jmp $9929			jmp 	AssignString
.8d8e					_ASError:
.8d8e	4c 9e ad	jmp $ad9e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8d91					Command_List:
.8d91	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8d94	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8d97	a9 ff		lda #$ff			lda 	#$FF
.8d99	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8d9c	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8d9f	b1 30		lda ($30),y			lda 	(codePtr),y
.8da1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8da3	f0 1e		beq $8dc3			beq 	_CLSecond
.8da5	20 21 8e	jsr $8e21			jsr 	CLIsDigit 					; if not digit, list all
.8da8	b0 24		bcs $8dce			bcs 	_CLStart
.8daa	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8dac	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger
.8daf	b1 30		lda ($30),y			lda 	(codePtr),y
.8db1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8db3	f0 0e		beq $8dc3			beq 	_CLSecond 					; if so go get it
.8db5	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8db8	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8dbb	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8dbe	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8dc1	80 0b		bra $8dce			bra 	_CLStart
.8dc3					_CLSecond:
.8dc3	c8		iny				iny 								; consume comma
.8dc4	20 21 8e	jsr $8e21			jsr 	CLIsDigit 					; digit found
.8dc7	b0 05		bcs $8dce			bcs 	_CLStart 					; if not, continue listing
.8dc9	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8dcb	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger
.8dce					_CLStart
.8dce	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8dd0	85 30		sta $30				sta 	codePtr
.8dd2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8dd4	85 31		sta $31				sta 	codePtr+1
.8dd6					_CLLoop:
.8dd6	20 7a af	jsr $af7a			jsr 	EXTBreakCheck 				; break check
.8dd9	f0 30		beq $8e0b			beq 	_CLExit
.8ddb	b2 30		lda ($30)			lda 	(codePtr)
.8ddd	f0 2c		beq $8e0b			beq 	_CLExit
.8ddf	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8de1	20 0e 8e	jsr $8e0e			jsr 	CLCompareLineNo
.8de4	90 18		bcc $8dfe			bcc 	_CLNext
.8de6	a2 07		ldx #$07			ldx 	#7
.8de8	20 0e 8e	jsr $8e0e			jsr 	CLCompareLineNo
.8deb	f0 02		beq $8def			beq 	_CLDoThisOne
.8ded	b0 0f		bcs $8dfe			bcs 	_CLNext
.8def					_CLDoThisOne:
.8def	20 43 92	jsr $9243			jsr 	ListConvertLine 			; convert line into token Buffer
.8df2	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8df4	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8df6	20 ce 94	jsr $94ce			jsr 	PrintStringXA
.8df9	a9 0d		lda #$0d			lda 	#13 						; new line
.8dfb	20 39 af	jsr $af39			jsr 	EXTPrintCharacter
.8dfe					_CLNext:
.8dfe	18		clc				clc
.8dff	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8e01	65 30		adc $30				adc 	codePtr
.8e03	85 30		sta $30				sta 	codePtr
.8e05	90 02		bcc $8e09			bcc 	_CREExit
.8e07	e6 31		inc $31				inc 	codePtr+1
.8e09					_CREExit:
.8e09	80 cb		bra $8dd6			bra 	_CLLoop
.8e0b					_CLExit:
.8e0b	4c 0c 8a	jmp $8a0c			jmp 	WarmStart
.8e0e					CLCompareLineNo:
.8e0e	38		sec				sec
.8e0f	a0 01		ldy #$01			ldy 	#1
.8e11	b1 30		lda ($30),y			lda 	(codePtr),y
.8e13	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8e16	85 36		sta $36				sta 	zTemp0
.8e18	c8		iny				iny
.8e19	b1 30		lda ($30),y			lda 	(codePtr),y
.8e1b	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8e1e	05 36		ora $36				ora 	zTemp0
.8e20	60		rts				rts
.8e21					CLIsDigit:
.8e21	b1 30		lda ($30),y			lda 	(codePtr),y
.8e23	c9 30		cmp #$30			cmp 	#"0"
.8e25	90 03		bcc $8e2a			bcc	 	_CLIDExitFalse
.8e27	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e29	60		rts				rts
.8e2a					_CLIDExitFalse:
.8e2a	38		sec				sec
.8e2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8e2c					Command_LOCAL:
.8e2c	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8e2e	20 3a 8e	jsr $8e3a			jsr 	LocaliseNextTerm 			; convert term to a local.
.8e31	b1 30		lda ($30),y			lda 	(codePtr),y
.8e33	c8		iny				iny
.8e34	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e36	f0 f4		beq $8e2c			beq 	Command_LOCAL
.8e38	88		dey				dey 								; unpick pre-get
.8e39	60		rts				rts
.8e3a					LocaliseNextTerm:
.8e3a	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm 				; evaluate the term
.8e3d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e40	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8e42	f0 69		beq $8ead			beq		_LNTError
.8e44	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8e47	85 36		sta $36				sta 	zTemp0
.8e49	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e4c	85 37		sta $37				sta  	zTemp0+1
.8e4e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e51	29 10		and #$10			and 	#NSBIsString
.8e53	d0 22		bne $8e77			bne 	_LNTPushString
.8e55	5a		phy				phy
.8e56	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8e58					_LNTPushNumLoop:
.8e58	b1 36		lda ($36),y			lda		(zTemp0),y
.8e5a	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8e5d	a9 00		lda #$00			lda 	#0
.8e5f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e61	c8		iny				iny
.8e62	c0 05		cpy #$05			cpy 	#5
.8e64	d0 f2		bne $8e58			bne 	_LNTPushNumLoop
.8e66	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8e68	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8e6b	a5 37		lda $37				lda 	zTemp0+1
.8e6d	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8e70	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e72	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8e75	7a		ply				ply
.8e76	60		rts				rts
.8e77					_LNTPushString:
.8e77	5a		phy				phy
.8e78	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e7a	85 38		sta $38				sta 	zTemp1
.8e7c	a0 01		ldy #$01			ldy 	#1
.8e7e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e80	85 39		sta $39				sta 	zTemp1+1
.8e82	a0 00		ldy #$00			ldy 	#0 							; output string
.8e84	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8e86	f0 0a		beq $8e92			beq 	_LNTStringOut
.8e88					_LNTPushStrLoop:
.8e88	b1 38		lda ($38),y			lda 	(zTemp1),y
.8e8a	f0 06		beq $8e92			beq 	_LNTStringOut
.8e8c	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8e8f	c8		iny				iny
.8e90	80 f6		bra $8e88			bra 	_LNTPushStrLoop
.8e92					_LNTStringOut:
.8e92	98		tya				tya									; output length
.8e93	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8e96	a9 00		lda #$00			lda 	#0 							; clear original string.
.8e98	92 38		sta ($38)			sta 	(zTemp1)
.8e9a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e9d	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8ea0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ea3	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8ea6	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8ea8	20 bf a0	jsr $a0bf			jsr 	StackPushByte
.8eab	7a		ply				ply
.8eac	60		rts				rts
.8ead					_LNTError:
.8ead	4c 94 ad	jmp $ad94			jmp 	SyntaxError
.a755					LocalPopValue:
.a755	20 d8 a0	jsr $a0d8			jsr 	StackPopByte
.a758	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a75a	d0 17		bne $a773			bne 	_LPVString
.a75c	20 d8 a0	jsr $a0d8			jsr 	StackPopByte 				; address
.a75f	85 37		sta $37				sta 	zTemp0+1
.a761	20 d8 a0	jsr $a0d8			jsr 	StackPopByte
.a764	85 36		sta $36				sta 	zTemp0
.a766	5a		phy				phy
.a767	a0 04		ldy #$04			ldy 	#4 							; copy back
.a769					_LPVNumberCopy:
.a769	20 d8 a0	jsr $a0d8			jsr 	StackPopByte
.a76c	91 36		sta ($36),y			sta 	(zTemp0),y
.a76e	88		dey				dey
.a76f	10 f8		bpl $a769			bpl 	_LPVNumberCopy
.a771	7a		ply				ply 								; and complete
.a772	60		rts				rts
.a773					_LPVString:
.a773	20 d8 a0	jsr $a0d8			jsr 	StackPopByte 				; address of record => zTemp0
.a776	85 37		sta $37				sta 	zTemp0+1
.a778	20 d8 a0	jsr $a0d8			jsr 	StackPopByte
.a77b	85 36		sta $36				sta 	zTemp0
.a77d	5a		phy				phy
.a77e	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a780	85 38		sta $38				sta 	zTemp1
.a782	a0 01		ldy #$01			ldy 	#1
.a784	b1 36		lda ($36),y			lda 	(zTemp0),y
.a786	85 39		sta $39				sta 	zTemp1+1
.a788	20 d8 a0	jsr $a0d8			jsr 	StackPopByte 				; # to get => y
.a78b	a8		tay				tay
.a78c	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a78e	f0 0e		beq $a79e			beq 	_LPVStringCopied
.a790	a9 00		lda #$00			lda 	#0 							; NULL on end
.a792	91 38		sta ($38),y			sta 	(zTemp1),y
.a794					_LPVStringCopy:
.a794	88		dey				dey
.a795	30 07		bmi $a79e			bmi 	_LPVStringCopied
.a797	20 d8 a0	jsr $a0d8			jsr 	StackPopByte
.a79a	91 38		sta ($38),y			sta 	(zTemp1),y
.a79c	80 f6		bra $a794			bra 	_LPVStringCopy
.a79e					_LPVStringCopied:
.a79e	fa		plx				plx
.a79f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8eb0					NewCommand:
.8eb0	20 6a a0	jsr $a06a			jsr 	MemoryNew
.8eb3	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8eb6	20 a5 8a	jsr $8aa5			jsr 	ClearCommand 				; clear everything.
.8eb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8eba					Command_Print:
.8eba	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ebb					_CPLoop:
.8ebb	08		php				php 								; save last action flag
.8ebc	b1 30		lda ($30),y			lda 	(codePtr),y
.8ebe	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ec0	f0 46		beq $8f08			beq 	_CPExit
.8ec2	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ec4	f0 42		beq $8f08			beq 	_CPExit
.8ec6	68		pla				pla 								; throw last action flag
.8ec7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ec9	c8		iny				iny
.8eca	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8ecc	f0 37		beq $8f05			beq 	_CPContinueWithSameLine
.8ece	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8ed0	f0 2e		beq $8f00			beq 	_CPTab
.8ed2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8ed4	f0 26		beq $8efc			beq 	_CPNewLine
.8ed6	88		dey				dey 								; undo the get.
.8ed7	a2 00		ldx #$00			ldx 	#0
.8ed9	20 78 9f	jsr $9f78			jsr 	EvaluateValue 				; get a value into slot 0
.8edc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8edf	29 10		and #$10			and 	#NSBIsString
.8ee1	f0 0b		beq $8eee			beq 	_CPNumber
.8ee3	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8ee6	ad 08 04	lda $0408			lda 	NSMantissa0
.8ee9	20 ce 94	jsr $94ce			jsr 	PrintStringXA
.8eec	80 cc		bra $8eba			bra 	Command_Print 				; loop round clearing carry so NL if end
.8eee					_CPNumber:
.8eee	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8ef0	20 4e 9e	jsr $9e4e			jsr 	ConvertNumberToString 		; convert to string
.8ef3	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8ef5	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8ef7	20 ce 94	jsr $94ce			jsr 	PrintStringXA
.8efa	80 be		bra $8eba			bra 	Command_Print 				; loop round clearing carry so NL if end
.8efc					_CPNewLine:
.8efc	a9 0d		lda #$0d			lda 	#13
.8efe	80 02		bra $8f02			bra 	_CPPrintChar
.8f00					_CPTab:
.8f00	a9 09		lda #$09			lda 	#9 							; print TAB
.8f02					_CPPrintChar:
.8f02	20 39 af	jsr $af39			jsr 	EXTPrintCharacter
.8f05					_CPContinueWithSameLine:
.8f05	38		sec				sec 								; loop round with carry set, which
.8f06	80 b3		bra $8ebb			bra 	_CPLoop 					; will inhibit final CR
.8f08					_CPExit:
.8f08	28		plp				plp 								; get last action flag
.8f09	b0 05		bcs $8f10			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8f0b	a9 0d		lda #$0d			lda 	#13 						; print new line
.8f0d	20 39 af	jsr $af39			jsr 	EXTPrintCharacter
.8f10					_CPExit2:
.8f10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8f11					CallProcedure:
.8f11	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8f13	b1 30		lda ($30),y			lda 	(codePtr),y
.8f15	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8f17	f0 0c		beq $8f25			beq 	_CPEndParam
.8f19					_CPParamLoop:
.8f19	20 7e 98	jsr $987e			jsr 	EvaluateExpression 			; get parameter onto stack
.8f1c	e8		inx				inx 								; bump next stack
.8f1d	b1 30		lda ($30),y			lda 	(codePtr),y
.8f1f	c8		iny				iny
.8f20	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8f22	f0 f5		beq $8f19			beq 	_CPParamLoop
.8f24	88		dey				dey 								; unpick.
.8f25					_CPEndParam:
.8f25	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8f28	c8		iny				iny									; skip right bracket
.8f29	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8f2b	20 e1 a0	jsr $a0e1			jsr 	StackOpen
.8f2e	20 25 a1	jsr $a125			jsr 	STKSaveCodePosition 		; save loop position
.8f31	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8f34	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8f36	ad 10 04	lda $0410			lda 	NSMantissa1
.8f39	85 37		sta $37				sta 	zTemp0+1
.8f3b	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8f3d	b2 36		lda ($36)			lda 	(zTemp0)
.8f3f	85 30		sta $30				sta 	safePtr
.8f41	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f43	85 31		sta $31				sta 	safePtr+1
.8f45	c8		iny				iny
.8f46	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f48	85 32		sta $32				sta 	safePtr+2
.8f4a	c8		iny				iny
.8f4b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f4d	85 33		sta $33				sta 	safePtr+3
.8f4f	c8		iny				iny 								; get Y offset -> Y
.8f50	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f52	a8		tay				tay
.8f53	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8f55	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8f58	f0 13		beq $8f6d			beq 	_ParamExit 					; if so, exit.
.8f5a					_ParamExtract:
.8f5a	ca		dex				dex 								; put a local term on the level before
.8f5b	20 3a 8e	jsr $8e3a			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8f5e	20 78 8d	jsr $8d78			jsr 	AssignVariable 				; assign stacked value to the variable.
.8f61	e8		inx				inx 								; advance to next parameter to do.
.8f62	e8		inx				inx
.8f63	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8f66	f0 05		beq $8f6d			beq 	_ParamExit
.8f68	20 b6 a7	jsr $a7b6			jsr 	CheckComma 					; comma seperating parameters
.8f6b	80 ed		bra $8f5a			bra 	_ParamExtract
.8f6d					_ParamExit:
.8f6d	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket 			; check )
.8f70	60		rts				rts 								; and continue from here
.a7a0					Command_ENDPROC:
.a7a0	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a7a2	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a7a4	20 0d a1	jsr $a10d			jsr 	StackCheckFrame
.a7a7	20 36 a1	jsr $a136			jsr 	STKLoadCodePosition 		; restore code position
.a7aa	20 ff a0	jsr $a0ff			jsr 	StackClose
.a7ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8f71					Command_Read:
.8f71	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8f73	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm
.8f76	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f79	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8f7b	f0 4a		beq $8fc7			beq 	_CRSyntax 					; check reference (bit 0)
.8f7d	20 10 90	jsr $9010			jsr 	SwapDataCodePtrs 			; swap code and data
.8f80	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8f83	d0 20		bne $8fa5			bne 	_CRContinueData
.8f85					_CRKeepSearching:
.8f85	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8f87	aa		tax				tax
.8f88	20 e7 93	jsr $93e7			jsr 	ScanForward
.8f8b	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8f8d	f0 16		beq $8fa5			beq 	_CRHaveData 				; found it
.8f8f	18		clc				clc
.8f90	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f92	65 30		adc $30				adc 	codePtr
.8f94	85 30		sta $30				sta 	codePtr
.8f96	90 02		bcc $8f9a			bcc 	_CREExit
.8f98	e6 31		inc $31				inc 	codePtr+1
.8f9a					_CREExit:
.8f9a	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f9c	b2 30		lda ($30)			lda 	(codePtr)
.8f9e	d0 e5		bne $8f85			bne 	_CRKeepSearching
.8fa0	a9 0b		lda #$0b		lda	#11
.8fa2	4c 75 94	jmp $9475		jmp	ErrorHandler
.8fa5					_CRHaveData:
.8fa5					_CRContinueData:
.8fa5	a2 01		ldx #$01			ldx 	#1
.8fa7	20 78 9f	jsr $9f78			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8faa	ca		dex				dex
.8fab	20 78 8d	jsr $8d78			jsr		AssignVariable 				; do the assignment
.8fae	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8fb1	b1 30		lda ($30),y			lda 	(codePtr),y
.8fb3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8fb5	d0 04		bne $8fbb			bne 	_CRSwapBack
.8fb7	c8		iny				iny 								; consume comma
.8fb8	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8fbb					_CRSwapBack:
.8fbb	20 10 90	jsr $9010			jsr 	SwapDataCodePtrs			; swap them back.
.8fbe	b1 30		lda ($30),y			lda 	(codePtr),y
.8fc0	c8		iny				iny
.8fc1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8fc3	f0 ac		beq $8f71			beq 	Command_Read 				; if so go round again.
.8fc5	88		dey				dey 								; unpick get.
.8fc6	60		rts				rts
.8fc7					_CRSyntax:
.8fc7	4c 94 ad	jmp $ad94			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8fca					RemCommand:
.8fca	b1 30		lda ($30),y			lda 	(codePtr),y
.8fcc	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8fce	d0 06		bne $8fd6			bne 	_RMExit
.8fd0	c8		iny				iny
.8fd1	98		tya				tya
.8fd2	38		sec				sec
.8fd3	71 30		adc ($30),y			adc 	(codePtr),y
.8fd5	a8		tay				tay
.8fd6					_RMExit:
.8fd6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8fd7					Command_REPEAT:
.8fd7	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8fd9	20 e1 a0	jsr $a0e1			jsr 	StackOpen
.8fdc	20 25 a1	jsr $a125			jsr 	STKSaveCodePosition 		; save loop position
.8fdf	60		rts				rts
.8fe0					Command_UNTIL:
.8fe0	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8fe2	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8fe4	20 0d a1	jsr $a10d			jsr 	StackCheckFrame
.8fe7	a2 00		ldx #$00			ldx 	#0
.8fe9	20 81 9f	jsr $9f81			jsr 	EvaluateNumber 				; work out the number
.8fec	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; check if zero
.8fef	f0 04		beq $8ff5			beq 	_CULoopBack 				; if so keep looping
.8ff1	20 ff a0	jsr $a0ff			jsr 	StackClose		 			; return
.8ff4	60		rts				rts
.8ff5					_CULoopBack:
.8ff5	20 36 a1	jsr $a136			jsr 	STKLoadCodePosition 		; loop back
.8ff8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8ff9					Command_Restore:
.8ff9	20 10 90	jsr $9010			jsr 	SwapDataCodePtrs 			; swap code and data
.8ffc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ffe	85 30		sta $30				sta 	codePtr
.9000	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9002	85 31		sta $31				sta 	codePtr+1
.9004	20 10 90	jsr $9010			jsr 	SwapDataCodePtrs 			; put them back
.9007	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9009	8d 9b 04	sta $049b			sta 	dataPointer+4
.900c	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.900f	60		rts				rts
.9010					SwapDataCodePtrs:
.9010	da		phx				phx
.9011	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9013					_SDCPLoop:
.9013	b5 30		lda $30,x			lda 	safePtr,x
.9015	48		pha				pha
.9016	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9019	95 30		sta $30,x			sta 	safePtr,x
.901b	68		pla				pla
.901c	9d 97 04	sta $0497,x			sta 	dataPointer,x
.901f	ca		dex				dex
.9020	10 f1		bpl $9013			bpl 	_SDCPLoop
.9022	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9025	8c 9b 04	sty $049b			sty 	dataPointer+4
.9028	a8		tay				tay
.9029	fa		plx				plx
.902a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.902b					CommandRUN:
.902b	20 a5 8a	jsr $8aa5			jsr 	ClearCommand 				; clear variable/stacks/etc.
.902e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9030	85 30		sta $30				sta 	codePtr
.9032	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9034	85 31		sta $31				sta 	codePtr+1
.9036					RUNNewLine:
.9036	b2 30		lda ($30)			lda 	(codePtr)
.9038	f0 5e		beq $9098			beq 	CRNoProgram         		; no then END.
.903a	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.903c	9a		txs				txs
.903d					RUNCodePointerLine:
.903d	a0 02		ldy #$02			ldy 	#2 							; start of program
.903f					_CRIncMainLoop:
.903f	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9042	d0 05		bne $9049			bne 	_CRNoBreakCheck
.9044	20 7a af	jsr $af7a			jsr 	EXTBreakCheck 				; break check
.9047	f0 4a		beq $9093			beq 	_CRBreak
.9049					_CRNoBreakCheck:
.9049	c8		iny				iny
.904a					_CRMainLoop:
.904a	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.904d	b1 30		lda ($30),y			lda 	(codePtr),y
.904f	10 10		bpl $9061			bpl 	_CRNotKeyword
.9051	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9053	b0 04		bcs $9059			bcs 	_CRIsKeyword
.9055	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9057	b0 34		bcs $908d			bcs		_CRSyntaxError
.9059					_CRIsKeyword:
.9059	c8		iny				iny 								; consume command
.905a	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.905b	aa		tax				tax 								; put in X for vector jump
.905c	20 90 90	jsr $9090			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.905f	80 e9		bra $904a			bra 	_CRMainLoop 				; and loop round
.9061					_CRNotKeyword:
.9061	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9063	f0 da		beq $903f			beq 	_CRIncMainLoop
.9065	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9067	90 05		bcc $906e			bcc 	_CRNotVariable
.9069					_CRGoLet:
.9069	20 3c 8d	jsr $8d3c			jsr 	LetCommand
.906c	80 dc		bra $904a			bra 	_CRMainLoop
.906e					_CRNotVariable:
.906e	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9070	f0 f7		beq $9069			beq 	_CRGoLet
.9072	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9074	f0 f3		beq $9069			beq 	_CRGoLet
.9076	c9 21		cmp #$21			cmp 	#KWD_PLING
.9078	f0 ef		beq $9069			beq 	_CRGoLet
.907a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.907c	f0 09		beq $9087			beq 	_CRGoRem
.907e	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9080	d0 0b		bne $908d			bne 	_CRSyntaxError
.9082	20 45 89	jsr $8945			jsr 	LabelHere
.9085	80 c3		bra $904a			bra 	_CRMainLoop
.9087					_CRGoRem:
.9087	c8		iny				iny
.9088	20 ca 8f	jsr $8fca			jsr 	RemCommand
.908b	80 bd		bra $904a			bra 	_CRMainLoop
.908d					_CRSyntaxError:
.908d	4c 94 ad	jmp $ad94			jmp 	SyntaxError
.9090					_CRCallVector0:
.9090	7c 3c 91	jmp ($913c,x)			jmp 	(VectorSet0,x)
.9093					_CRBreak:
.9093	a9 01		lda #$01		lda	#1
.9095	4c 75 94	jmp $9475		jmp	ErrorHandler
.9098					CRNoProgram:
.9098	4c c2 8b	jmp $8bc2			jmp 	EndCommand
.909b					EOLCommand:
.909b	18		clc				clc
.909c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.909e	65 30		adc $30				adc 	codePtr
.90a0	85 30		sta $30				sta 	codePtr
.90a2	90 02		bcc $90a6			bcc 	_CREExit
.90a4	e6 31		inc $31				inc 	codePtr+1
.90a6					_CREExit:
.90a6	80 8e		bra $9036			bra 	RunNewLine
.90a8					Shift1Command:
.90a8	b1 30		lda ($30),y			lda 	(codePtr),y
.90aa	c8		iny				iny
.90ab	0a		asl a				asl 	a
.90ac	aa		tax				tax
.90ad	7c 9e 91	jmp ($919e,x)			jmp 	(VectorSet1,x)
.90b0					Shift2Command:
.90b0	b1 30		lda ($30),y			lda 	(codePtr),y
.90b2	c8		iny				iny
.90b3	0a		asl a				asl 	a
.90b4	aa		tax				tax
.90b5	7c b6 91	jmp ($91b6,x)			jmp 	(VectorSet2,x)
.90b8					Unused1:
.90b8					Unused2:
.90b8					Unused3:
.90b8					Unused4:
.90b8	4c 94 ad	jmp $ad94			jmp 	SyntaxError
>90bb							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.90bc					VectorSetPunc:
>90bc	1f 96					.word	ShiftLeft                        ; $00 <<
>90be	19 95					.word	BinaryCompareLessEqual           ; $01 <=
>90c0	0f 95					.word	BinaryCompareNotEqual            ; $02 <>
>90c2	94 ad					.word	SyntaxError                      ; $03 !!3
>90c4	94 ad					.word	SyntaxError                      ; $04 ><
>90c6	23 95					.word	BinaryCompareGreaterEqual        ; $05 >=
>90c8	22 96					.word	ShiftRight                       ; $06 >>
>90ca	94 ad					.word	SyntaxError                      ; $07 !!7
>90cc	94 ad					.word	SyntaxError                      ; $08 !!8
>90ce	94 ad					.word	SyntaxError                      ; $09 !!9
>90d0	94 ad					.word	SyntaxError                      ; $0a !!10
>90d2	94 ad					.word	SyntaxError                      ; $0b !!11
>90d4	94 ad					.word	SyntaxError                      ; $0c !!12
>90d6	94 ad					.word	SyntaxError                      ; $0d !!13
>90d8	94 ad					.word	SyntaxError                      ; $0e !!14
>90da	94 ad					.word	SyntaxError                      ; $0f !!15
>90dc	94 ad					.word	SyntaxError                      ; $10 @
>90de	94 ad					.word	SyntaxError                      ; $11 !!17
>90e0	94 ad					.word	SyntaxError                      ; $12 !!18
>90e2	94 ad					.word	SyntaxError                      ; $13 [
>90e4	c7 a7					.word	IntegerDivide                    ; $14 \
>90e6	94 ad					.word	SyntaxError                      ; $15 ]
>90e8	a8 97					.word	EorInteger                       ; $16 ^
>90ea	94 ad					.word	SyntaxError                      ; $17 _
>90ec	94 ad					.word	SyntaxError                      ; $18 `
>90ee	94 ad					.word	SyntaxError                      ; $19 !!25
>90f0	94 ad					.word	SyntaxError                      ; $1a !!26
>90f2	94 ad					.word	SyntaxError                      ; $1b {
>90f4	62 97					.word	OraInteger                       ; $1c |
>90f6	94 ad					.word	SyntaxError                      ; $1d }
>90f8	94 ad					.word	SyntaxError                      ; $1e ~
>90fa	94 ad					.word	SyntaxError                      ; $1f [7m<7F>[m
>90fc	94 ad					.word	SyntaxError                      ; $20
>90fe	ee 97					.word	WordIndirect                     ; $21 !
>9100	94 ad					.word	SyntaxError                      ; $22 "
>9102	94 ad					.word	SyntaxError                      ; $23 #
>9104	94 ad					.word	SyntaxError                      ; $24 $
>9106	14 a8					.word	IntegerModulus                   ; $25 %
>9108	1c 97					.word	AndInteger                       ; $26 &
>910a	94 ad					.word	SyntaxError                      ; $27 '
>910c	94 ad					.word	SyntaxError                      ; $28 (
>910e	94 ad					.word	SyntaxError                      ; $29 )
>9110	89 a8					.word	MulInteger                       ; $2a *
>9112	b6 96					.word	AddInteger                       ; $2b +
>9114	94 ad					.word	SyntaxError                      ; $2c ,
>9116	f1 96					.word	SubInteger                       ; $2d -
>9118	94 ad					.word	SyntaxError                      ; $2e .
>911a	20 aa					.word	FDivideCommand                   ; $2f /
>911c	94 ad					.word	SyntaxError                      ; $30 0
>911e	94 ad					.word	SyntaxError                      ; $31 1
>9120	94 ad					.word	SyntaxError                      ; $32 2
>9122	94 ad					.word	SyntaxError                      ; $33 3
>9124	94 ad					.word	SyntaxError                      ; $34 4
>9126	94 ad					.word	SyntaxError                      ; $35 5
>9128	94 ad					.word	SyntaxError                      ; $36 6
>912a	94 ad					.word	SyntaxError                      ; $37 7
>912c	94 ad					.word	SyntaxError                      ; $38 8
>912e	94 ad					.word	SyntaxError                      ; $39 9
>9130	94 ad					.word	SyntaxError                      ; $3a :
>9132	94 ad					.word	SyntaxError                      ; $3b ;
>9134	fb 94					.word	BinaryCompareLess                ; $3c <
>9136	f1 94					.word	BinaryCompareEqual               ; $3d =
>9138	05 95					.word	BinaryCompareGreater             ; $3e >
>913a	15 98					.word	ByteIndirect                     ; $3f ?
.913c					VectorSet0:
>913c	9b 90					.word	EOLCommand                       ; $80 !0:EOF
>913e	a8 90					.word	Shift1Command                    ; $81 !1:SH1
>9140	b0 90					.word	Shift2Command                    ; $82 !2:SH2
>9142	66 ab					.word	AbsUnary                         ; $83 ABS(
>9144	df 9c					.word	AllocUnary                       ; $84 ALLOC(
>9146	76 ab					.word	AscUnary                         ; $85 ASC(
>9148	ff 9d					.word	ChrUnary                         ; $86 CHR$(
>914a	ed 94					.word	UnaryFalse                       ; $87 FALSE
>914c	83 ab					.word	FracUnary                        ; $88 FRAC(
>914e	99 ab					.word	IntUnary                         ; $89 INT(
>9150	ef ab					.word	IsValUnary                       ; $8a ISVAL(
>9152	d9 9e					.word	Unary_Left                       ; $8b LEFT$(
>9154	ab ab					.word	LenUnary                         ; $8c LEN(
>9156	03 9f					.word	Unary_Mid                        ; $8d MID$(
>9158	4f 9d					.word	Unary_Not                        ; $8e NOT(
>915a	65 9d					.word	Unary_Random                     ; $8f RANDOM(
>915c	e9 9e					.word	Unary_Right                      ; $90 RIGHT$(
>915e	7e 9d					.word	Unary_Rnd                        ; $91 RND(
>9160	c5 ab					.word	SgnUnary                         ; $92 SGN(
>9162	11 9e					.word	SpcUnary                         ; $93 SPC(
>9164	2c 9e					.word	Unary_Str                        ; $94 STR$(
>9166	e1 94					.word	UnaryTrue                        ; $95 TRUE
>9168	e5 ab					.word	ValUnary                         ; $96 VAL(
>916a	c5 8b					.word	ForCommand                       ; $97 FOR
>916c	12 8d					.word	IfCommand                        ; $98 IF
>916e	b8 90					.word	Unused1                          ; $99 PROC
>9170	d7 8f					.word	Command_REPEAT                   ; $9a REPEAT
>9172	46 94					.word	Command_WHILE                    ; $9b WHILE
>9174	3b 8d					.word	EndIf                            ; $9c ENDIF
>9176	a0 a7					.word	Command_ENDPROC                  ; $9d ENDPROC
>9178	7f 8c					.word	NextCommand                      ; $9e NEXT
>917a	b8 90					.word	Unused4                          ; $9f THEN
>917c	e0 8f					.word	Command_UNTIL                    ; $a0 UNTIL
>917e	67 94					.word	Command_WEND                     ; $a1 WEND
>9180	6b 8a					.word	CallCommand                      ; $a2 CALL
>9182	94 ad					.word	SyntaxError                      ; $a3 CLS
>9184	fd 8a					.word	Command_Data                     ; $a4 DATA
>9186	05 8b					.word	DimCommand                       ; $a5 DIM
>9188	b8 90					.word	Unused3                          ; $a6 DOWNTO
>918a	34 8d					.word	ElseCode                         ; $a7 ELSE
>918c	d8 8c					.word	Command_GOSUB                    ; $a8 GOSUB
>918e	f6 8c					.word	GotoCommand                      ; $a9 GOTO
>9190	3c 8d					.word	LetCommand                       ; $aa LET
>9192	2c 8e					.word	Command_LOCAL                    ; $ab LOCAL
>9194	ba 8e					.word	Command_Print                    ; $ac PRINT
>9196	71 8f					.word	Command_Read                     ; $ad READ
>9198	ca 8f					.word	RemCommand                       ; $ae REM
>919a	e8 8c					.word	Command_RETURN                   ; $af RETURN
>919c	b8 90					.word	Unused2                          ; $b0 TO
.919e					VectorSet1:
>919e	94 ad					.word	SyntaxError                      ; $80 !0:EOF
>91a0	94 ad					.word	SyntaxError                      ; $81 !1:SH1
>91a2	94 ad					.word	SyntaxError                      ; $82 !2:SH2
>91a4	3c 8a					.word	AssembleCommand                  ; $83 ASSEMBLE
>91a6	5b 8a					.word	AssertCommand                    ; $84 ASSERT
>91a8	a5 8a					.word	ClearCommand                     ; $85 CLEAR
>91aa	c2 8b					.word	EndCommand                       ; $86 END
>91ac	91 8d					.word	Command_List                     ; $87 LIST
>91ae	b0 8e					.word	NewCommand                       ; $88 NEW
>91b0	f9 8f					.word	Command_Restore                  ; $89 RESTORE
>91b2	2b 90					.word	CommandRUN                       ; $8a RUN
>91b4	3e 92					.word	StopCommand                      ; $8b STOP
.91b6					VectorSet2:
>91b6	94 ad					.word	SyntaxError                      ; $80 !0:EOF
>91b8	94 ad					.word	SyntaxError                      ; $81 !1:SH1
>91ba	94 ad					.word	SyntaxError                      ; $82 !2:SH2
>91bc	53 ac					.word	Assemble_adc                     ; $83 ADC
>91be	4b ac					.word	Assemble_and                     ; $84 AND
>91c0	67 ac					.word	Assemble_asl                     ; $85 ASL
>91c2	d1 ac					.word	Assemble_bcc                     ; $86 BCC
>91c4	d5 ac					.word	Assemble_bcs                     ; $87 BCS
>91c6	dd ac					.word	Assemble_beq                     ; $88 BEQ
>91c8	94 ac					.word	Assemble_bit                     ; $89 BIT
>91ca	c5 ac					.word	Assemble_bmi                     ; $8a BMI
>91cc	d9 ac					.word	Assemble_bne                     ; $8b BNE
>91ce	c1 ac					.word	Assemble_bpl                     ; $8c BPL
>91d0	e1 ac					.word	Assemble_bra                     ; $8d BRA
>91d2	e5 ac					.word	Assemble_brk                     ; $8e BRK
>91d4	c9 ac					.word	Assemble_bvc                     ; $8f BVC
>91d6	cd ac					.word	Assemble_bvs                     ; $90 BVS
>91d8	ed ac					.word	Assemble_clc                     ; $91 CLC
>91da	41 ad					.word	Assemble_cld                     ; $92 CLD
>91dc	01 ad					.word	Assemble_cli                     ; $93 CLI
>91de	31 ad					.word	Assemble_clv                     ; $94 CLV
>91e0	5f ac					.word	Assemble_cmp                     ; $95 CMP
>91e2	a8 ac					.word	Assemble_cpx                     ; $96 CPX
>91e4	a3 ac					.word	Assemble_cpy                     ; $97 CPY
>91e6	85 ac					.word	Assemble_dec                     ; $98 DEC
>91e8	3d ad					.word	Assemble_dex                     ; $99 DEX
>91ea	19 ad					.word	Assemble_dey                     ; $9a DEY
>91ec	4f ac					.word	Assemble_eor                     ; $9b EOR
>91ee	8a ac					.word	Assemble_inc                     ; $9c INC
>91f0	4d ad					.word	Assemble_inx                     ; $9d INX
>91f2	39 ad					.word	Assemble_iny                     ; $9e INY
>91f4	bc ac					.word	Assemble_jmp                     ; $9f JMP
>91f6	b7 ac					.word	Assemble_jsr                     ; $a0 JSR
>91f8	5b ac					.word	Assemble_lda                     ; $a1 LDA
>91fa	80 ac					.word	Assemble_ldx                     ; $a2 LDX
>91fc	9e ac					.word	Assemble_ldy                     ; $a3 LDY
>91fe	71 ac					.word	Assemble_lsr                     ; $a4 LSR
>9200	51 ad					.word	Assemble_nop                     ; $a5 NOP
>9202	47 ac					.word	Assemble_ora                     ; $a6 ORA
>9204	fd ac					.word	Assemble_pha                     ; $a7 PHA
>9206	e9 ac					.word	Assemble_php                     ; $a8 PHP
>9208	45 ad					.word	Assemble_phx                     ; $a9 PHX
>920a	05 ad					.word	Assemble_phy                     ; $aa PHY
>920c	0d ad					.word	Assemble_pla                     ; $ab PLA
>920e	f1 ac					.word	Assemble_plp                     ; $ac PLP
>9210	59 ad					.word	Assemble_plx                     ; $ad PLX
>9212	15 ad					.word	Assemble_ply                     ; $ae PLY
>9214	6c ac					.word	Assemble_rol                     ; $af ROL
>9216	76 ac					.word	Assemble_ror                     ; $b0 ROR
>9218	f9 ac					.word	Assemble_rti                     ; $b1 RTI
>921a	09 ad					.word	Assemble_rts                     ; $b2 RTS
>921c	63 ac					.word	Assemble_sbc                     ; $b3 SBC
>921e	f5 ac					.word	Assemble_sec                     ; $b4 SEC
>9220	55 ad					.word	Assemble_sed                     ; $b5 SED
>9222	11 ad					.word	Assemble_sei                     ; $b6 SEI
>9224	57 ac					.word	Assemble_sta                     ; $b7 STA
>9226	49 ad					.word	Assemble_stp                     ; $b8 STP
>9228	7b ac					.word	Assemble_stx                     ; $b9 STX
>922a	99 ac					.word	Assemble_sty                     ; $ba STY
>922c	8f ac					.word	Assemble_stz                     ; $bb STZ
>922e	2d ad					.word	Assemble_tax                     ; $bc TAX
>9230	29 ad					.word	Assemble_tay                     ; $bd TAY
>9232	b2 ac					.word	Assemble_trb                     ; $be TRB
>9234	ad ac					.word	Assemble_tsb                     ; $bf TSB
>9236	35 ad					.word	Assemble_tsx                     ; $c0 TSX
>9238	1d ad					.word	Assemble_txa                     ; $c1 TXA
>923a	25 ad					.word	Assemble_txs                     ; $c2 TXS
>923c	21 ad					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.923e					StopCommand:
.923e	a9 08		lda #$08		lda	#8
.9240	4c 75 94	jmp $9475		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9243					ListConvertLine:
.9243	9c 9d 04	stz $049d			stz 	tbOffset
.9246	9c a9 04	stz $04a9			stz 	tokenBuffer
.9249	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.924b	b1 30		lda ($30),y			lda 	(codePtr),y
.924d	aa		tax				tax
.924e	88		dey				dey
.924f	b1 30		lda ($30),y			lda 	(codePtr),y
.9251	20 0a a9	jsr $a90a			jsr 	ConvertInt16
.9254	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9256	86 37		stx $37				stx 	zTemp0+1
.9258	a0 00		ldy #$00			ldy 	#0
.925a					_LCCopyNumber:
.925a	b1 36		lda ($36),y			lda 	(zTemp0),y
.925c	20 5c 93	jsr $935c			jsr 	LCLWrite
.925f	c8		iny				iny
.9260	b1 36		lda ($36),y			lda 	(zTemp0),y
.9262	d0 f6		bne $925a			bne 	_LCCopyNumber
.9264					_LCPadOut:
.9264	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9266	20 5c 93	jsr $935c			jsr 	LCLWrite
.9269	ad 9d 04	lda $049d			lda 	tbOffset
.926c	c9 06		cmp #$06			cmp 	#6
.926e	d0 f4		bne $9264			bne 	_LCPadOut
.9270	a0 03		ldy #$03			ldy 	#3 							; start position.
.9272					_LCMainLoop:
.9272	b1 30		lda ($30),y			lda 	(codePtr),y
.9274	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9276	f0 17		beq $928f			beq 	_LCExit
.9278	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.927a	90 14		bcc $9290			bcc 	_LCDoubles
.927c	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.927e	90 20		bcc $92a0			bcc 	_LCShiftPunc
.9280	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9282	90 2b		bcc $92af			bcc 	_LCPunctuation
.9284	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9286	90 2d		bcc $92b5			bcc 	_LCIdentifiers
.9288	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.928a	90 49		bcc $92d5			bcc 	_LCTokens
.928c	4c 30 93	jmp $9330			jmp 	_LCData 					; 254-5 are data objects
.928f					_LCExit:
.928f	60		rts				rts
.9290					_LCDoubles:
.9290	48		pha				pha
.9291	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9292	29 02		and #$02			and 	#2
.9294	09 3c		ora #$3c			ora 	#60 						; make < >
.9296	20 5c 93	jsr $935c			jsr 	LCLWrite
.9299	68		pla				pla 								; restore, do lower bit
.929a	29 03		and #$03			and 	#3
.929c	09 3c		ora #$3c			ora 	#60
.929e	80 0f		bra $92af			bra		_LCPunctuation 				; print, increment, loop
.92a0					_LCShiftPunc:
.92a0	aa		tax				tax 								; save in X
.92a1	29 07		and #$07			and 	#7 							; lower 3 bits
.92a3	f0 02		beq $92a7			beq 	_LCNoAdd
.92a5	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.92a7					_LCNoAdd:
.92a7	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.92a9	90 02		bcc $92ad			bcc 	_LCNoAdd2
.92ab	09 20		ora #$20			ora 	#32 						; adds $20
.92ad					_LCNoAdd2:
.92ad	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.92af					_LCPunctuation:
.92af	c8		iny				iny 								; consume character
.92b0	20 5c 93	jsr $935c			jsr 	LCLWrite 					; write it out.
.92b3	80 bd		bra $9272			bra 	_LCMainLoop 				; go round again.
.92b5					_LCIdentifiers:
.92b5	18		clc				clc 								; convert to physical address
.92b6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92b8	85 37		sta $37				sta 	zTemp0+1
.92ba	c8		iny				iny
.92bb	b1 30		lda ($30),y			lda 	(codePtr),y
.92bd	85 36		sta $36				sta 	zTemp0
.92bf	c8		iny				iny
.92c0	5a		phy				phy 								; save position
.92c1	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.92c3					_LCOutIdentifier:
.92c3	c8		iny				iny
.92c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.92c6	29 7f		and #$7f			and 	#$7F
.92c8	20 8a 93	jsr $938a			jsr 	LCLLowerCase
.92cb	20 5c 93	jsr $935c			jsr 	LCLWrite
.92ce	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.92d0	10 f1		bpl $92c3			bpl 	_LCOutIdentifier
.92d2	7a		ply				ply 								; restore position
.92d3	80 9d		bra $9272			bra 	_LCMainLoop
.92d5					_LCTokens:
.92d5	aa		tax				tax 								; token in X
.92d6	a9 5a		lda #$5a			lda 	#((KeywordSet2) & $FF)
.92d8	85 36		sta $36				sta 	0+zTemp0
.92da	a9 a3		lda #$a3			lda 	#((KeywordSet2) >> 8)
.92dc	85 37		sta $37				sta 	1+zTemp0
.92de	e0 82		cpx #$82			cpx 	#$82
.92e0	f0 16		beq $92f8			beq 	_LCUseShift
.92e2	a9 16		lda #$16			lda 	#((KeywordSet1) & $FF)
.92e4	85 36		sta $36				sta 	0+zTemp0
.92e6	a9 a3		lda #$a3			lda 	#((KeywordSet1) >> 8)
.92e8	85 37		sta $37				sta 	1+zTemp0
.92ea	e0 81		cpx #$81			cpx 	#$81
.92ec	f0 0a		beq $92f8			beq 	_LCUseShift
.92ee	a9 e4		lda #$e4			lda 	#((KeywordSet0) & $FF)
.92f0	85 36		sta $36				sta 	0+zTemp0
.92f2	a9 a1		lda #$a1			lda 	#((KeywordSet0) >> 8)
.92f4	85 37		sta $37				sta 	1+zTemp0
.92f6	80 01		bra $92f9			bra 	_LCNoShift
.92f8					_LCUseShift:
.92f8	c8		iny				iny
.92f9					_LCNoShift:
.92f9	20 6b 93	jsr $936b			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.92fc	b1 30		lda ($30),y			lda 	(codePtr),y
.92fe	aa		tax				tax 								; into X
.92ff					_LCFindText:
.92ff	ca		dex				dex
.9300	10 0e		bpl $9310			bpl 	_LCFoundText 				; found text.
.9302	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9304	1a		inc a				inc 	a 							; one extra for size
.9305	38		sec				sec 								; one extra for checksum
.9306	65 36		adc $36				adc 	zTemp0 						; go to next token
.9308	85 36		sta $36				sta 	zTemp0
.930a	90 f3		bcc $92ff			bcc 	_LCFindText
.930c	e6 37		inc $37				inc 	zTemp0+1
.930e	80 ef		bra $92ff			bra 	_LCFindText
.9310					_LCFoundText:
.9310	5a		phy				phy 								; save List position
.9311	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9313	aa		tax				tax
.9314	a0 02		ldy #$02			ldy 	#2
.9316					_LCCopyToken:
.9316	b1 36		lda ($36),y			lda 	(zTemp0),y
.9318	20 8a 93	jsr $938a			jsr 	LCLLowerCase
.931b	20 5c 93	jsr $935c			jsr 	LCLWrite
.931e	c8		iny				iny
.931f	ca		dex				dex
.9320	d0 f4		bne $9316			bne 	_LCCopyToken
.9322	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9324	f0 05		beq $932b			beq 	_LCNoSpace
.9326	a9 20		lda #$20			lda 	#' '
.9328	20 5c 93	jsr $935c			jsr 	LCLWrite
.932b					_LCNoSpace:
.932b	7a		ply				ply 								; restore position.
.932c	c8		iny				iny 								; consume token
.932d	4c 72 92	jmp $9272			jmp 	_LCMainLoop 				; and go around again.
.9330					_LCData:
.9330	48		pha				pha 								; save type $FE/$FF
.9331	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9333	c9 fe		cmp #$fe			cmp 	#$FE
.9335	f0 02		beq $9339			beq 	_LCHaveOpener
.9337	a2 22		ldx #$22			ldx 	#'"'
.9339					_LCHaveOpener:
.9339	8a		txa				txa 								; output prefix (# or ")
.933a	20 5c 93	jsr $935c			jsr 	LCLWrite
.933d	c8		iny				iny 								; get count
.933e	b1 30		lda ($30),y			lda 	(codePtr),y
.9340	aa		tax				tax
.9341	c8		iny				iny 								; point at first character
.9342					_LCOutData:
.9342	b1 30		lda ($30),y			lda 	(codePtr),y
.9344	c9 00		cmp #$00			cmp 	#0
.9346	f0 03		beq $934b			beq 	_LCNoPrint
.9348	20 5c 93	jsr $935c			jsr 	LCLWrite
.934b					_LCNoPrint:
.934b	c8		iny				iny
.934c	ca		dex				dex
.934d	d0 f3		bne $9342			bne 	_LCOutData
.934f	68		pla				pla 								; closing " required ?
.9350	c9 ff		cmp #$ff			cmp 	#$FF
.9352	d0 05		bne $9359			bne 	_LCNoQuote
.9354	a9 22		lda #$22			lda 	#'"'
.9356	20 5c 93	jsr $935c			jsr 	LCLWrite
.9359					_LCNoQuote:
.9359	4c 72 92	jmp $9272			jmp 	_LCMainLoop
.935c					LCLWrite:
.935c	da		phx				phx
.935d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9360	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9363	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9366	ee 9d 04	inc $049d			inc 	tbOffset
.9369	fa		plx				plx
.936a	60		rts				rts
.936b					LCCheckSpaceRequired:
.936b	ae 9d 04	ldx $049d			ldx 	tbOffset
.936e	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9371	20 8a 93	jsr $938a			jsr 	LCLLowerCase 				; saves a little effort
.9374	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9376	90 11		bcc $9389			bcc 	_LCCSRExit
.9378	c9 3a		cmp #$3a			cmp 	#"9"+1
.937a	90 08		bcc $9384			bcc 	_LCCSRSpace
.937c	c9 61		cmp #$61			cmp 	#"a"
.937e	90 09		bcc $9389			bcc 	_LCCSRExit
.9380	c9 7b		cmp #$7b			cmp 	#"z"+1
.9382	b0 05		bcs $9389			bcs 	_LCCSRExit
.9384					_LCCSRSpace:
.9384	a9 20		lda #$20			lda 	#' '
.9386	20 5c 93	jsr $935c			jsr 	LCLWrite
.9389					_LCCSRExit:
.9389	60		rts				rts
.938a					LCLLowerCase:
.938a	c9 41		cmp #$41			cmp 	#"A"
.938c	90 06		bcc $9394			bcc 	_LCLLCOut
.938e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9390	b0 02		bcs $9394			bcs 	_LCLLCOut
.9392	69 20		adc #$20			adc 	#$20
.9394					_LCLLCOut:
.9394	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9395					ProcedureScan:
.9395	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9397	85 30		sta $30				sta 	codePtr
.9399	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.939b	85 31		sta $31				sta 	codePtr+1
.939d					_PSLoop:
.939d	b2 30		lda ($30)			lda 	(codePtr)
.939f	f0 42		beq $93e3			beq 	_PSExit
.93a1	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.93a3	b1 30		lda ($30),y			lda 	(codePtr),y
.93a5	c9 99		cmp #$99			cmp 	#KWD_PROC
.93a7	d0 2d		bne $93d6			bne 	_PSNext
.93a9	c8		iny				iny 								; get the address of the record to zTemp0 and
.93aa	b1 30		lda ($30),y			lda 	(codePtr),y
.93ac	29 c0		and #$c0			and 	#$C0
.93ae	c9 40		cmp #$40			cmp 	#$40
.93b0	d0 32		bne $93e4			bne 	_PSSyntax
.93b2	b1 30		lda ($30),y			lda 	(codePtr),y
.93b4	18		clc				clc
.93b5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.93b7	85 37		sta $37				sta 	zTemp0+1
.93b9	c8		iny				iny 								; LSB
.93ba	b1 30		lda ($30),y			lda 	(codePtr),y
.93bc	85 36		sta $36				sta 	zTemp0
.93be	c8		iny				iny 								; character after variable call.
.93bf	98		tya				tya 								; save Y offset at +7
.93c0	a0 07		ldy #$07			ldy 	#7
.93c2	91 36		sta ($36),y			sta 	(zTemp0),y
.93c4	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.93c6	a0 02		ldy #$02			ldy 	#2
.93c8	91 36		sta ($36),y			sta 	(zTemp0),y
.93ca	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.93cc					_PSCopy:
.93cc	b5 30		lda $30,x			lda 	safePtr,x
.93ce	c8		iny				iny
.93cf	91 36		sta ($36),y			sta 	(zTemp0),y
.93d1	e8		inx				inx
.93d2	e0 04		cpx #$04			cpx 	#4
.93d4	d0 f6		bne $93cc			bne 	_PSCopy
.93d6					_PSNext:
.93d6	18		clc				clc
.93d7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93d9	65 30		adc $30				adc 	codePtr
.93db	85 30		sta $30				sta 	codePtr
.93dd	90 02		bcc $93e1			bcc 	_CREExit
.93df	e6 31		inc $31				inc 	codePtr+1
.93e1					_CREExit:
.93e1	80 ba		bra $939d			bra 	_PSLoop
.93e3					_PSExit:
.93e3	60		rts				rts
.93e4					_PSSyntax:
.93e4	4c 94 ad	jmp $ad94			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.93e7					ScanForward:
.93e7	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.93e9	86 37		stx $37				stx 	zTemp0+1
.93eb	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.93ed					_ScanLoop:
.93ed	b1 30		lda ($30),y			lda 	(codePtr),y
.93ef	c8		iny				iny
.93f0	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.93f2	d0 0e		bne $9402			bne 	_ScanGoNext
.93f4	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.93f6	f0 04		beq $93fc			beq 	_ScanMatch
.93f8	c5 37		cmp $37				cmp 	zTemp0+1
.93fa	d0 06		bne $9402			bne 	_ScanGoNext
.93fc					_ScanMatch:
.93fc	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.93fe	d0 01		bne $9401			bne 	_ScanNotEndEOL
.9400	88		dey				dey
.9401					_ScanNotEndEOL:
.9401	60		rts				rts
.9402					_ScanGoNext:
.9402	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9404	90 e7		bcc $93ed			bcc 	_ScanLoop
.9406	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9408	90 18		bcc $9422			bcc 	_ScanSkipOne
.940a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.940c	b0 2f		bcs $943d			bcs 	_ScanSkipData
.940e	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9410	90 db		bcc $93ed			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9412	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.9414	b0 d7		bcs $93ed			bcs 	_ScanLoop
.9416	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9418	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.941a	b0 d1		bcs $93ed			bcs 	_ScanLoop
.941c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.941e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9420	80 cb		bra $93ed			bra 	_ScanLoop
.9422					_ScanSkipOne:
.9422	c8		iny				iny 								; consume the extra one.
.9423	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9425	d0 c6		bne $93ed			bne 	_ScanLoop
.9427	18		clc				clc
.9428	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.942a	65 30		adc $30				adc 	codePtr
.942c	85 30		sta $30				sta 	codePtr
.942e	90 02		bcc $9432			bcc 	_CREExit
.9430	e6 31		inc $31				inc 	codePtr+1
.9432					_CREExit:
.9432	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9434	b2 30		lda ($30)			lda 	(codePtr)
.9436	d0 b5		bne $93ed			bne 	_ScanLoop 					; if not zero, more to scan
.9438	a9 13		lda #$13		lda	#19
.943a	4c 75 94	jmp $9475		jmp	ErrorHandler
.943d					_ScanSkipData:
.943d	88		dey				dey 								; point at data token
.943e	c8		iny				iny
.943f	98		tya				tya
.9440	38		sec				sec
.9441	71 30		adc ($30),y			adc 	(codePtr),y
.9443	a8		tay				tay
.9444	80 a7		bra $93ed			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9446					Command_WHILE:
.9446	5a		phy				phy 								; save position of the test
.9447	a2 00		ldx #$00			ldx 	#0
.9449	20 81 9f	jsr $9f81			jsr 	EvaluateNumber 				; work out the number
.944c	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; check if zero
.944f	f0 0e		beq $945f			beq 	_WHExitLoop 				; if so exit the loop
.9451	98		tya				tya 								; position *after* test.
.9452	7a		ply				ply 								; restore position before test, at WHILE
.9453	88		dey				dey
.9454	48		pha				pha 								; push after test on the stack
.9455	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9457	20 e1 a0	jsr $a0e1			jsr 	StackOpen
.945a	20 25 a1	jsr $a125			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.945d	7a		ply				ply 								; restore the position *after* the test
.945e	60		rts				rts
.945f					_WHExitLoop:
.945f	68		pla				pla 								; throw post loop position
.9460	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.9462	aa		tax				tax
.9463	20 e7 93	jsr $93e7			jsr 	ScanForward
.9466	60		rts				rts
.9467					Command_WEND:
.9467	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9469	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.946b	20 0d a1	jsr $a10d			jsr 	StackCheckFrame
.946e	20 36 a1	jsr $a136			jsr 	STKLoadCodePosition 		; loop back
.9471	20 ff a0	jsr $a0ff			jsr 	StackClose		 			; erase the frame
.9474	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a7ae					CheckRightBracket:
.a7ae	b1 30		lda ($30),y			lda 	(codePtr),y
.a7b0	c8		iny				iny
.a7b1	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a7b3	d0 0f		bne $a7c4			bne 	CNAFail
.a7b5	60		rts				rts
.a7b6					CheckComma:
.a7b6	b1 30		lda ($30),y			lda 	(codePtr),y
.a7b8	c8		iny				iny
.a7b9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a7bb	d0 07		bne $a7c4			bne 	CNAFail
.a7bd	60		rts				rts
.a7be					CheckNextA:
.a7be	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a7c0	d0 02		bne $a7c4			bne 	CNAFail
.a7c2	c8		iny				iny 								; skip character
.a7c3	60		rts				rts 								; and exit
.a7c4					CNAFail:
.a7c4	4c 94 ad	jmp $ad94			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9475					ErrorHandler:
.9475	a8		tay				tay 								; find the error text
.9476	f0 49		beq $94c1			beq 	_EHEnd
.9478	a2 00		ldx #$00			ldx 	#0
.947a	a9 ad		lda #$ad			lda 	#((ErrorText) & $FF)
.947c	85 36		sta $36				sta 	0+zTemp0
.947e	a9 ad		lda #$ad			lda 	#((ErrorText) >> 8)
.9480	85 37		sta $37				sta 	1+zTemp0
.9482					_EHFind:
.9482	88		dey				dey 								; found the error text ?
.9483	f0 0e		beq $9493			beq 	_EHFound
.9485					_EHFindZero:
.9485	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9487	e6 36		inc $36				inc 	zTemp0
.9489	d0 02		bne $948d			bne 	_EHFNoCarry
.948b	e6 37		inc $37				inc 	zTemp0+1
.948d					_EHFNoCarry:
.948d	c9 00		cmp #$00			cmp 	#0
.948f	d0 f4		bne $9485			bne 	_EHFindZero
.9491	80 ef		bra $9482			bra 	_EHFind
.9493					_EHFound:
.9493	a5 36		lda $36				lda 	zTemp0 						; print message
.9495	a6 37		ldx $37				ldx 	zTemp0+1
.9497	20 ce 94	jsr $94ce			jsr 	PrintStringXA
.949a	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.949c	b1 30		lda ($30),y			lda 	(codePtr),y
.949e	d0 05		bne $94a5			bne 	_EHAtMsg
.94a0	c8		iny				iny
.94a1	b1 30		lda ($30),y			lda 	(codePtr),y
.94a3	f0 17		beq $94bc			beq 	_EHCREnd
.94a5					_EHAtMsg:
.94a5	a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.94a7	a9 c4		lda #$c4			lda 	#_AtMsg & $FF
.94a9	20 ce 94	jsr $94ce			jsr 	PrintStringXA
.94ac	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.94ae	b1 30		lda ($30),y			lda 	(codePtr),y
.94b0	48		pha				pha
.94b1	c8		iny				iny
.94b2	b1 30		lda ($30),y			lda 	(codePtr),y
.94b4	aa		tax				tax
.94b5	68		pla				pla
.94b6	20 0a a9	jsr $a90a			jsr 	ConvertInt16 				; convert XA to string
.94b9	20 ce 94	jsr $94ce			jsr 	PrintStringXA 				; and print it.
.94bc					_EHCREnd:
.94bc	a9 0d		lda #$0d			lda 	#13 						; new line
.94be	20 39 af	jsr $af39			jsr 	EXTPrintCharacter
.94c1					_EHEnd:
.94c1	4c 0c 8a	jmp $8a0c			jmp 	WarmStart
>94c4	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>94cc	20 00
.94ce					PrintStringXA:
.94ce	5a		phy				phy
.94cf	86 37		stx $37				stx 	zTemp0+1
.94d1	85 36		sta $36				sta 	zTemp0
.94d3	a0 00		ldy #$00			ldy 	#0
.94d5					_PSXALoop:
.94d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.94d7	f0 06		beq $94df			beq 	_PSXAExit
.94d9	20 39 af	jsr $af39			jsr 	EXTPrintCharacter
.94dc	c8		iny				iny
.94dd	80 f6		bra $94d5			bra 	_PSXALoop
.94df					_PSXAExit:
.94df	7a		ply				ply
.94e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.94e1					UnaryTrue:
.94e1	fa		plx				plx
.94e2					ReturnTrue:
.94e2	a9 01		lda #$01			lda 	#1  						; set to 1
.94e4	20 2f a0	jsr $a02f			jsr 	NSMSetByte
.94e7	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.94e9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94ec	60		rts				rts
.94ed					UnaryFalse:
.94ed	fa		plx				plx
.94ee					ReturnFalse:
.94ee	4c 2d a0	jmp $a02d			jmp 	NSMSetZero 					; set it all to zero
.94f1					BinaryCompareEqual:
.94f1	fa		plx				plx
.94f2	20 2d 95	jsr $952d			jsr 	CompareBaseCode
.94f5	c9 00		cmp #$00			cmp 	#0
.94f7	f0 e9		beq $94e2			beq 	ReturnTrue
.94f9	80 f3		bra $94ee			bra 	ReturnFalse
.94fb					BinaryCompareLess:
.94fb	fa		plx				plx
.94fc	20 2d 95	jsr $952d			jsr 	CompareBaseCode
.94ff	c9 ff		cmp #$ff			cmp 	#$FF
.9501	f0 df		beq $94e2			beq 	ReturnTrue
.9503	80 e9		bra $94ee			bra 	ReturnFalse
.9505					BinaryCompareGreater:
.9505	fa		plx				plx
.9506	20 2d 95	jsr $952d			jsr 	CompareBaseCode
.9509	c9 01		cmp #$01			cmp 	#1
.950b	f0 d5		beq $94e2			beq 	ReturnTrue
.950d	80 df		bra $94ee			bra 	ReturnFalse
.950f					BinaryCompareNotEqual:
.950f	fa		plx				plx
.9510	20 2d 95	jsr $952d			jsr 	CompareBaseCode
.9513	c9 00		cmp #$00			cmp 	#0
.9515	d0 cb		bne $94e2			bne 	ReturnTrue
.9517	80 d5		bra $94ee			bra 	ReturnFalse
.9519					BinaryCompareLessEqual:
.9519	fa		plx				plx
.951a	20 2d 95	jsr $952d			jsr 	CompareBaseCode
.951d	c9 01		cmp #$01			cmp 	#1
.951f	d0 c1		bne $94e2			bne 	ReturnTrue
.9521	80 cb		bra $94ee			bra 	ReturnFalse
.9523					BinaryCompareGreaterEqual:
.9523	fa		plx				plx
.9524	20 2d 95	jsr $952d			jsr 	CompareBaseCode
.9527	c9 ff		cmp #$ff			cmp 	#$FF
.9529	d0 b7		bne $94e2			bne 	ReturnTrue
.952b	80 c1		bra $94ee			bra 	ReturnFalse
.952d					CompareBaseCode:
.952d	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; make both values if references.
.9530	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9533	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9536	29 10		and #$10			and 	#NSTString
.9538	d0 40		bne $957a			bne 	_CBCString
.953a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.953d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9540	d0 3b		bne $957d			bne 	_CBCFloat
.9542	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9545	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9548	29 08		and #$08			and 	#NSTFloat
.954a	d0 31		bne $957d			bne 	_CBCFloat
.954c	20 80 95	jsr $9580			jsr 	CompareFixMinusZero
.954f	e8		inx				inx
.9550	20 80 95	jsr $9580			jsr 	CompareFixMinusZero
.9553	ca		dex				dex
.9554	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9557	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.955a	10 0b		bpl $9567			bpl 	_CDCSameSign
.955c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.955f	30 16		bmi $9577			bmi 	_CBCLess 					; return $FF
.9561					_CBCGreater:
.9561	a9 01		lda #$01			lda 	#1
.9563	60		rts				rts
.9564					_CBCEqual:
.9564	a9 00		lda #$00			lda 	#0
.9566	60		rts				rts
.9567					_CDCSameSign:
.9567	20 90 96	jsr $9690			jsr 	SubTopTwoStack 				; unsigned subtract
.956a	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; or the mantissa together
.956d	f0 f5		beq $9564			beq 	_CBCEqual 					; -0 == 0
.956f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9572	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9575	10 ea		bpl $9561			bpl 	_CBCGreater
.9577					_CBCLess:
.9577	a9 ff		lda #$ff			lda 	#$FF
.9579	60		rts				rts
.957a					_CBCString:
.957a	4c e6 95	jmp $95e6			jmp 	CompareStrings
.957d					_CBCFloat:
.957d	4c 06 aa	jmp $aa06			jmp 	CompareFloat
.9580					CompareFixMinusZero:
.9580	20 5d a0	jsr $a05d			jsr 	NSMIsZero
.9583	d0 03		bne $9588			bne 	_CFXMZNotZero
.9585	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9588					_CFXMZNotZero:
.9588	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9589					StringConcat:
.9589	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.958c	3d 01 04	and $0401,x			and 	NSStatus+1,x
.958f	29 18		and #$18			and 	#NSBTypeMask
.9591	c9 10		cmp #$10			cmp 	#NSTString
.9593	d0 4e		bne $95e3			bne		_SCType
.9595	64 38		stz $38				stz 	zTemp1 						; counting total length
.9597	e8		inx				inx
.9598	20 b6 95	jsr $95b6			jsr 	_SCSetupZ0 					; setup for second
.959b	20 c1 95	jsr $95c1			jsr 	_SCLengthZ0 				; length for second
.959e	ca		dex				dex
.959f	20 b6 95	jsr $95b6			jsr 	_SCSetupZ0 					; setup for first
.95a2	20 c1 95	jsr $95c1			jsr 	_SCLengthZ0 				; length for first
.95a5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.95a7	20 bb b0	jsr $b0bb			jsr 	StringTempAllocate
.95aa	20 d4 95	jsr $95d4			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.95ad	e8		inx				inx
.95ae	20 b6 95	jsr $95b6			jsr 	_SCSetupZ0 					; copy second out
.95b1	20 d4 95	jsr $95d4			jsr 	_SCCopy
.95b4	ca		dex				dex
.95b5	60		rts				rts
.95b6					_SCSetupZ0:
.95b6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95b9	85 36		sta $36				sta 	zTemp0
.95bb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95be	85 37		sta $37				sta 	zTemp0+1
.95c0	60		rts				rts
.95c1					_SCLengthZ0:
.95c1	5a		phy				phy
.95c2	a0 00		ldy #$00			ldy 	#0
.95c4					_SCLenLoop:
.95c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c6	f0 0a		beq $95d2			beq 	_SCLExit
.95c8	c8		iny				iny
.95c9	e6 38		inc $38				inc 	zTemp1
.95cb	10 f7		bpl $95c4			bpl		_SCLenLoop
.95cd	a9 09		lda #$09		lda	#9
.95cf	4c 75 94	jmp $9475		jmp	ErrorHandler
.95d2					_SCLExit:
.95d2	7a		ply				ply
.95d3	60		rts				rts
.95d4					_SCCopy:
.95d4	5a		phy				phy
.95d5	a0 00		ldy #$00			ldy 	#0
.95d7					_SCCopyLoop:
.95d7	b1 36		lda ($36),y			lda 	(zTemp0),y
.95d9	f0 06		beq $95e1			beq 	_SCCExit
.95db	20 f9 b0	jsr $b0f9			jsr 	StringTempWrite
.95de	c8		iny				iny
.95df	80 f6		bra $95d7			bra 	_SCCopyLoop
.95e1					_SCCExit:
.95e1	7a		ply				ply
.95e2	60		rts				rts
.95e3					_SCType:
.95e3	4c 9e ad	jmp $ad9e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a7c7					IntegerDivide:
.a7c7	fa		plx				plx
.a7c8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a7cb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7ce	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7cf	0a		asl a				asl 	a
.a7d0	10 05		bpl $a7d7			bpl 	_NotRef
.a7d2	48		pha				pha
.a7d3	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7d6	68		pla				pla
.a7d7					_NotRef:
.a7d7	0a		asl a				asl 	a
.a7d8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a7da	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7dd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a7e0	f0 03		beq $a7e5			beq 	_IntegerCode 				; if clear, then we have two integers
.a7e2	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; anything else, type mismatch.
.a7e5					_IntegerCode:
.a7e5	20 07 a8	jsr $a807			jsr 	CheckDivideZero 			; do div zero check
.a7e8	20 3f a8	jsr $a83f			jsr 	Int32Divide 				; do the division
.a7eb	20 fc a8	jsr $a8fc			jsr 	CalculateSign 				; calculate result sign
.a7ee					NSMCopyPlusTwoToZero:
.a7ee	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a7f1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a7f4	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a7f7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7fa	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a7fd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a800	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a803	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a806	60		rts				rts
.a807					CheckDivideZero:
.a807	e8		inx				inx
.a808	20 5d a0	jsr $a05d			jsr 	NSMIsZero
.a80b	f0 02		beq $a80f			beq 	_CDVError
.a80d	ca		dex				dex
.a80e	60		rts				rts
.a80f					_CDVError:
.a80f	a9 03		lda #$03		lda	#3
.a811	4c 75 94	jmp $9475		jmp	ErrorHandler
.a814					IntegerModulus:
.a814	fa		plx				plx
.a815	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a818	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a81b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a81c	0a		asl a				asl 	a
.a81d	10 05		bpl $a824			bpl 	_NotRef
.a81f	48		pha				pha
.a820	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a823	68		pla				pla
.a824					_NotRef:
.a824	0a		asl a				asl 	a
.a825	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a827	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a82a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a82d	f0 03		beq $a832			beq 	_IntegerCode 				; if clear, then we have two integers
.a82f	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; anything else, type mismatch.
.a832					_IntegerCode:
.a832					IntegerModulusNoCheck:
.a832	20 07 a8	jsr $a807			jsr 	CheckDivideZero 			; do div zero check
.a835	20 3f a8	jsr $a83f			jsr 	Int32Divide 				; do the division
.a838	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a83b	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a83e	60		rts				rts
.a83f					Int32Divide:
.a83f	48		pha				pha 								; save AXY
.a840	5a		phy				phy
.a841	20 04 a0	jsr $a004			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a844	20 29 a0	jsr $a029			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a847	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a849					_I32DivideLoop:
.a849	e8		inx				inx
.a84a	e8		inx				inx
.a84b	20 42 a0	jsr $a042			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a84e	ca		dex				dex
.a84f	ca		dex				dex
.a850	20 43 a0	jsr $a043			jsr 	NSMRotateLeft
.a853	20 7f a8	jsr $a87f			jsr 	DivideCheckSubtract 		; check if subtract possible
.a856	90 03		bcc $a85b			bcc 	_I32DivideNoCarryIn
.a858	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a85b					_I32DivideNoCarryIn:
.a85b	88		dey				dey 								; loop round till division completed.
.a85c	d0 eb		bne $a849			bne 	_I32DivideLoop
.a85e	7a		ply				ply 								; restore AXY and exit
.a85f	68		pla				pla
.a860	60		rts				rts
.a861					Int32ShiftDivide:
.a861	48		pha				pha 								; save AY
.a862	5a		phy				phy
.a863	e8		inx				inx 								; clear S[X+2]
.a864	e8		inx				inx
.a865	20 2d a0	jsr $a02d			jsr 	NSMSetZero
.a868	ca		dex				dex
.a869	ca		dex				dex
.a86a	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a86c					_I32SDLoop:
.a86c	20 7f a8	jsr $a87f			jsr 	DivideCheckSubtract 		; check if subtract possible
.a86f	e8		inx				inx
.a870	e8		inx				inx
.a871	20 43 a0	jsr $a043			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a874	ca		dex				dex
.a875	ca		dex				dex
.a876	20 43 a0	jsr $a043			jsr 	NSMRotateLeft
.a879	88		dey				dey 	 							; do 31 times
.a87a	d0 f0		bne $a86c			bne 	_I32SDLoop
.a87c	7a		ply				ply 								; restore AY and exit
.a87d	68		pla				pla
.a87e	60		rts				rts
.a87f					DivideCheckSubtract:
.a87f	20 90 96	jsr $9690			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a882	b0 04		bcs $a888			bcs 	_DCSExit 					; if carry set, then could do, exit
.a884	20 6a 96	jsr $966a			jsr 	AddTopTwoStack 				; add it back in
.a887	18		clc				clc 								; and return False
.a888					_DCSExit:
.a888	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a889					MulInteger:
.a889	fa		plx				plx
.a88a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a88d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a890	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a891	0a		asl a				asl 	a
.a892	10 05		bpl $a899			bpl 	_NotRef
.a894	48		pha				pha
.a895	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a898	68		pla				pla
.a899					_NotRef:
.a899	0a		asl a				asl 	a 							; put MSB of type into A:7
.a89a	30 0b		bmi $a8a7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a89c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a89f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a8a2	f0 06		beq $a8aa			beq 	_IntegerCode 				; if clear, then we have two integers
.a8a4	4c dd aa	jmp $aadd			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a8a7					_StringData:
.a8a7	4c a8 ad	jmp $ada8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a8aa					_IntegerCode:
.a8aa	20 b7 a8	jsr $a8b7			jsr 	MultiplyShort
.a8ad	c9 00		cmp #$00			cmp 	#0
.a8af	f0 05		beq $a8b6			beq 	_MIExit
.a8b1	a9 04		lda #$04		lda	#4
.a8b3	4c 75 94	jmp $9475		jmp	ErrorHandler
.a8b6					_MIExit:
.a8b6	60		rts				rts
.a8b7					MultiplyShort:
.a8b7	5a		phy				phy 								; save Y
.a8b8	20 04 a0	jsr $a004			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a8bb	20 29 a0	jsr $a029			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a8be	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a8c0					_I32MLoop:
.a8c0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a8c3	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a8c6	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a8c9	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a8cc	f0 28		beq $a8f6			beq 	_I32MExit 					; exit if zero
.a8ce	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a8d1	29 01		and #$01			and 	#1
.a8d3	f0 0e		beq $a8e3			beq 	_I32MNoAdd
.a8d5	20 6a 96	jsr $966a			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a8d8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a8db	10 06		bpl $a8e3			bpl 	_I32MNoAdd
.a8dd					_I32ShiftRight:
.a8dd	20 50 a0	jsr $a050			jsr 	NSMShiftRight 				; shift S[X] right
.a8e0	c8		iny				iny 								; increment shift count
.a8e1	80 0a		bra $a8ed			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a8e3					_I32MNoAdd:
.a8e3	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a8e6	70 f5		bvs $a8dd			bvs 	_I32ShiftRight 				; instead.
.a8e8	e8		inx				inx
.a8e9	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a8ec	ca		dex				dex
.a8ed					_I32MShiftUpper:
.a8ed	e8		inx				inx 								; shift S[X+2] right
.a8ee	e8		inx				inx
.a8ef	20 50 a0	jsr $a050			jsr 	NSMShiftRight
.a8f2	ca		dex				dex
.a8f3	ca		dex				dex
.a8f4	80 ca		bra $a8c0			bra 	_I32MLoop 					; try again.
.a8f6					_I32MExit:
.a8f6	20 fc a8	jsr $a8fc			jsr 	CalculateSign
.a8f9	98		tya				tya 								; shift in A
.a8fa	7a		ply				ply 								; restore Y and exit
.a8fb	60		rts				rts
.a8fc					CalculateSign:
.a8fc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a8ff	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a902	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a905	0a		asl a				asl 	a 							; shift bit 7 into carry
.a906	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a909	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.95e6					CompareStrings:
.95e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.95e9	3d 01 04	and $0401,x			and 	NSStatus+1,x
.95ec	29 10		and #$10			and 	#NSBIsString
.95ee	f0 2c		beq $961c			beq 	_CSTypeError
.95f0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.95f3	85 36		sta $36				sta 	zTemp0
.95f5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95f8	85 37		sta $37				sta 	zTemp0+1
.95fa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95fd	85 38		sta $38				sta 	zTemp1
.95ff	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9602	85 39		sta $39				sta 	zTemp1+1
.9604	5a		phy				phy 								; save Y so we can access strings
.9605	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9607					_CSLoop:
.9607	c8		iny				iny
.9608	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.960a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.960c	d0 06		bne $9614			bne 	_CSDifferent
.960e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9610	d0 f5		bne $9607			bne 	_CSLoop 					; still comparing
.9612					_CSExit:
.9612	7a		ply				ply 								; reached end, return zero in A from EOS
.9613	60		rts				rts
.9614					_CSDifferent:
.9614	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9616	90 fa		bcc $9612			bcc		_CSExit
.9618	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.961a	80 f6		bra $9612			bra 	_CSExit
.961c					_CSTypeError:
.961c	4c 9e ad	jmp $ad9e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.961f					ShiftLeft:
.961f	38		sec				sec
.9620	80 01		bra $9623			bra 	ShiftMain
.9622					ShiftRight:
.9622	18		clc				clc
.9623					ShiftMain:
.9623	fa		plx				plx 								; restore X
.9624	08		php				php 								; save direction
.9625	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9628	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.962b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.962c	0a		asl a				asl 	a
.962d	10 05		bpl $9634			bpl 	_NotRef
.962f	48		pha				pha
.9630	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9633	68		pla				pla
.9634					_NotRef:
.9634	0a		asl a				asl 	a
.9635	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9637	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.963a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.963d	f0 03		beq $9642			beq 	_IntegerCode 				; if clear, then we have two integers
.963f	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; anything else, type mismatch.
.9642					_IntegerCode:
.9642	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9645	29 e0		and #$e0			and 	#$E0
.9647	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.964a	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.964d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9650	d0 13		bne $9665			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9652					_SMLoop:
.9652	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9655	30 11		bmi $9668			bmi 	_SMExit 					; exit if done.
.9657	28		plp				plp 								; restore direcition setting
.9658	08		php				php
.9659	90 05		bcc $9660			bcc 	_SMRight
.965b	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; shift left if CS
.965e	80 f2		bra $9652			bra 	_SMLoop
.9660					_SMRight:
.9660	20 50 a0	jsr $a050			jsr 	NSMShiftRight 				; shift right if CC
.9663	80 ed		bra $9652			bra 	_SMLoop
.9665					_SMExit0:
.9665	20 2d a0	jsr $a02d			jsr 	NSMSetZero 					; return zero.
.9668					_SMExit:
.9668	28		plp				plp 								; throw direction
.9669	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.966a					AddTopTwoStack:
.966a	18		clc				clc
.966b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.966e	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9671	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9674	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9677	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.967a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.967d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9680	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9683	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9686	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9689	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.968c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.968f	60		rts				rts
.9690					SubTopTwoStack:
.9690	38		sec				sec
.9691	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9694	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9697	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.969a	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.969d	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.96a0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96a3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96a6	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.96a9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96ac	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96af	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.96b2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96b5	60		rts				rts
.96b6					AddInteger:
.96b6	fa		plx				plx
.96b7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96ba	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96bd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96be	0a		asl a				asl 	a
.96bf	10 05		bpl $96c6			bpl 	_NotRef
.96c1	48		pha				pha
.96c2	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96c5	68		pla				pla
.96c6					_NotRef:
.96c6	0a		asl a				asl 	a 							; put MSB of type into A:7
.96c7	30 0b		bmi $96d4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96c9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96cc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96cf	f0 06		beq $96d7			beq 	_IntegerCode 				; if clear, then we have two integers
.96d1	4c 65 a9	jmp $a965			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96d4					_StringData:
.96d4	4c 89 95	jmp $9589			jmp 	StringConcat							; at least one string - don't know both are strings.
.96d7					_IntegerCode:
.96d7					AddCode:
.96d7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96da	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.96dd	10 8b		bpl $966a			bpl 	AddTopTwoStack
.96df	20 90 96	jsr $9690			jsr 	SubTopTwoStack 				; do a physical subtraction
.96e2	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96e5	10 09		bpl $96f0			bpl 	_AddExit
.96e7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96ea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96ed	20 e2 9f	jsr $9fe2			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.96f0					_AddExit:
.96f0	60		rts				rts
.96f1					SubInteger:
.96f1	fa		plx				plx
.96f2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96f5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96f8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96f9	0a		asl a				asl 	a
.96fa	10 05		bpl $9701			bpl 	_NotRef
.96fc	48		pha				pha
.96fd	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9700	68		pla				pla
.9701					_NotRef:
.9701	0a		asl a				asl 	a 							; put MSB of type into A:7
.9702	30 0b		bmi $970f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9704	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9707	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.970a	f0 06		beq $9712			beq 	_IntegerCode 				; if clear, then we have two integers
.970c	4c 6a a9	jmp $a96a			jmp 	FloatingPointSub 							; otherwise at least one float.
.970f					_StringData:
.970f	4c a8 ad	jmp $ada8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9712					_IntegerCode:
.9712	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9715	49 80		eor #$80			eor 	#$80
.9717	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.971a	80 bb		bra $96d7			bra 	AddCode 					; and do the same code as add.
.971c					AndInteger:
.971c	fa		plx				plx
.971d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9720	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9723	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9724	0a		asl a				asl 	a
.9725	10 05		bpl $972c			bpl 	_NotRef
.9727	48		pha				pha
.9728	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.972b	68		pla				pla
.972c					_NotRef:
.972c	0a		asl a				asl 	a
.972d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.972f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9732	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9735	f0 03		beq $973a			beq 	_IntegerCode 				; if clear, then we have two integers
.9737	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; anything else, type mismatch.
.973a					_IntegerCode:
.973a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.973d	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9740	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9743	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9746	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9749	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.974c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.974f	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9752	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9755	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9758	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.975b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.975e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9761	60		rts				rts
.9762					OraInteger:
.9762	fa		plx				plx
.9763	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9766	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9769	0a		asl a				asl 	a 							; shift reference bit into sign bit
.976a	0a		asl a				asl 	a
.976b	10 05		bpl $9772			bpl 	_NotRef
.976d	48		pha				pha
.976e	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9771	68		pla				pla
.9772					_NotRef:
.9772	0a		asl a				asl 	a
.9773	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9775	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9778	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.977b	f0 03		beq $9780			beq 	_IntegerCode 				; if clear, then we have two integers
.977d	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; anything else, type mismatch.
.9780					_IntegerCode:
.9780	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9783	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9786	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9789	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.978c	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.978f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9792	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9795	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9798	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.979b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.979e	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.97a1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97a4	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.97a7	60		rts				rts
.97a8					EorInteger:
.97a8	fa		plx				plx
.97a9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97ac	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97af	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97b0	0a		asl a				asl 	a
.97b1	10 05		bpl $97b8			bpl 	_NotRef
.97b3	48		pha				pha
.97b4	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97b7	68		pla				pla
.97b8					_NotRef:
.97b8	0a		asl a				asl 	a
.97b9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97bb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97be	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97c1	f0 03		beq $97c6			beq 	_IntegerCode 				; if clear, then we have two integers
.97c3	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; anything else, type mismatch.
.97c6					_IntegerCode:
.97c6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.97c9	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.97cc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97cf	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.97d2	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.97d5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97d8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.97db	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.97de	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97e1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.97e4	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.97e7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97ea	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.97ed	60		rts				rts
.97ee					WordIndirect:
.97ee	fa		plx				plx
.97ef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97f2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97f5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97f6	0a		asl a				asl 	a
.97f7	10 05		bpl $97fe			bpl 	_NotRef
.97f9	48		pha				pha
.97fa	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97fd	68		pla				pla
.97fe					_NotRef:
.97fe	0a		asl a				asl 	a
.97ff	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9801	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9804	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9807	f0 03		beq $980c			beq 	_IntegerCode 				; if clear, then we have two integers
.9809	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; anything else, type mismatch.
.980c					_IntegerCode:
.980c	20 d7 96	jsr $96d7			jsr 	AddCode 					; add the two values
.980f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9811	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9814	60		rts				rts
.9815					ByteIndirect:
.9815	fa		plx				plx
.9816	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9819	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.981c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.981d	0a		asl a				asl 	a
.981e	10 05		bpl $9825			bpl 	_NotRef
.9820	48		pha				pha
.9821	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9824	68		pla				pla
.9825					_NotRef:
.9825	0a		asl a				asl 	a
.9826	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9828	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.982b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.982e	f0 03		beq $9833			beq 	_IntegerCode 				; if clear, then we have two integers
.9830	4c 9e ad	jmp $ad9e			jmp 	TypeError 					; anything else, type mismatch.
.9833					_IntegerCode:
.9833	20 d7 96	jsr $96d7			jsr 	AddCode 					; add the two values
.9836	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9838	9d 00 04	sta $0400,x			sta 	NSStatus,x
.983b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a90a					ConvertInt16:
.a90a	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a90d	8e 10 04	stx $0410			stx 	NSMantissa1
.a910	9c 18 04	stz $0418			stz 	NSMantissa2
.a913	9c 20 04	stz $0420			stz 	NSMantissa3
.a916	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a919	a2 00		ldx #$00			ldx 	#0 							; stack level
.a91b	a9 0a		lda #$0a			lda 	#10 						; base
.a91d	80 00		bra $a91f			bra 	ConvertInt32
.a91f					ConvertInt32:
.a91f	5a		phy				phy
.a920	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a922	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a925	10 08		bpl $a92f			bpl 	_CI32NotNeg
.a927	48		pha				pha
.a928	a9 2d		lda #$2d			lda 	#'-'
.a92a	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a92d	c8		iny				iny
.a92e	68		pla				pla
.a92f					_CI32NotNeg:
.a92f	20 3d a9	jsr $a93d			jsr 	_CI32DivideConvert 			; recursive conversion
.a932	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a934	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a937	7a		ply				ply
.a938	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a93a	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a93c	60		rts				rts
.a93d					_CI32DivideConvert:
.a93d	e8		inx				inx 								; write to next slot up
.a93e	20 2f a0	jsr $a02f			jsr 	NSMSetByte
.a941	ca		dex				dex
.a942	20 3f a8	jsr $a83f			jsr 	Int32Divide 				; divide
.a945	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a948	48		pha				pha
.a949	20 ee a7	jsr $a7ee			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a94c	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; is it zero ?
.a94f	f0 06		beq $a957			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a951	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a954	20 3d a9	jsr $a93d			jsr 	_CI32DivideConvert 			; and recusrively call.
.a957					_CI32NoRecurse:
.a957	68		pla				pla 								; remainder
.a958	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a95a	90 02		bcc $a95e			bcc 	_CI32NotHex
.a95c	69 26		adc #$26			adc 	#6+32
.a95e					_CI32NotHex:
.a95e	69 30		adc #$30			adc 	#48
.a960	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a963	c8		iny				iny
.a964	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.983c					PrecedenceLevel:
>983c	04					.byte	 4	; $00 <<
>983d	02					.byte	 2	; $01 <=
>983e	02					.byte	 2	; $02 <>
>983f	00					.byte	 0	; $03 !!3
>9840	00					.byte	 0	; $04 ><
>9841	02					.byte	 2	; $05 >=
>9842	04					.byte	 4	; $06 >>
>9843	00					.byte	 0	; $07 !!7
>9844	00					.byte	 0	; $08 !!8
>9845	00					.byte	 0	; $09 !!9
>9846	00					.byte	 0	; $0a !!10
>9847	00					.byte	 0	; $0b !!11
>9848	00					.byte	 0	; $0c !!12
>9849	00					.byte	 0	; $0d !!13
>984a	00					.byte	 0	; $0e !!14
>984b	00					.byte	 0	; $0f !!15
>984c	00					.byte	 0	; $10 @
>984d	00					.byte	 0	; $11 !!17
>984e	00					.byte	 0	; $12 !!18
>984f	00					.byte	 0	; $13 [
>9850	04					.byte	 4	; $14 \
>9851	00					.byte	 0	; $15 ]
>9852	01					.byte	 1	; $16 ^
>9853	00					.byte	 0	; $17 _
>9854	00					.byte	 0	; $18 `
>9855	00					.byte	 0	; $19 !!25
>9856	00					.byte	 0	; $1a !!26
>9857	00					.byte	 0	; $1b {
>9858	01					.byte	 1	; $1c |
>9859	00					.byte	 0	; $1d }
>985a	00					.byte	 0	; $1e ~
>985b	00					.byte	 0	; $1f [7m<7F>[m
>985c	00					.byte	 0	; $20
>985d	05					.byte	 5	; $21 !
>985e	00					.byte	 0	; $22 "
>985f	00					.byte	 0	; $23 #
>9860	05					.byte	 5	; $24 $
>9861	04					.byte	 4	; $25 %
>9862	01					.byte	 1	; $26 &
>9863	00					.byte	 0	; $27 '
>9864	00					.byte	 0	; $28 (
>9865	00					.byte	 0	; $29 )
>9866	04					.byte	 4	; $2a *
>9867	03					.byte	 3	; $2b +
>9868	00					.byte	 0	; $2c ,
>9869	03					.byte	 3	; $2d -
>986a	00					.byte	 0	; $2e .
>986b	04					.byte	 4	; $2f /
>986c	00					.byte	 0	; $30 0
>986d	00					.byte	 0	; $31 1
>986e	00					.byte	 0	; $32 2
>986f	00					.byte	 0	; $33 3
>9870	00					.byte	 0	; $34 4
>9871	00					.byte	 0	; $35 5
>9872	00					.byte	 0	; $36 6
>9873	00					.byte	 0	; $37 7
>9874	00					.byte	 0	; $38 8
>9875	00					.byte	 0	; $39 9
>9876	00					.byte	 0	; $3a :
>9877	00					.byte	 0	; $3b ;
>9878	02					.byte	 2	; $3c <
>9879	02					.byte	 2	; $3d =
>987a	02					.byte	 2	; $3e >
>987b	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.987c					EvaluateExpressionAt0:
.987c	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.987e					EvaluateExpression:
.987e	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9880					EvaluateExpressionAtPrecedence:
.9880	48		pha				pha 								; save precedence level
.9881	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm 				; evaluate term into level X.
.9884	68		pla				pla 								; restore precedence level.
.9885					_EXPRLoop:
.9885	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9887	b1 30		lda ($30),y			lda 	(codePtr),y
.9889	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.988b	b0 25		bcs $98b2			bcs 	_EXPRExit
.988d	da		phx				phx 								; read the operator precedence
.988e	aa		tax				tax
.988f	bd 3c 98	lda $983c,x			lda 	PrecedenceLevel,x
.9892	fa		plx				plx
.9893	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9895	f0 1b		beq $98b2			beq 	_EXPRExit
.9897	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9899	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.989b	c5 37		cmp $37				cmp 	zTemp0+1
.989d	b0 13		bcs $98b2			bcs		_EXPRExit 					; if current >= operator exit
.989f	48		pha				pha 								; save current precedence.
.98a0	b1 30		lda ($30),y			lda 	(codePtr),y
.98a2	c8		iny				iny
.98a3	48		pha				pha
.98a4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.98a6	e8		inx				inx 								; work out the right hand side.
.98a7	20 80 98	jsr $9880			jsr 	EvaluateExpressionAtPrecedence
.98aa	ca		dex				dex
.98ab	68		pla				pla 								; get operator, call the code.
.98ac	20 b5 98	jsr $98b5			jsr 	_EXPRCaller
.98af	68		pla				pla 								; restore precedence level
.98b0	80 d3		bra $9885			bra 	_EXPRLoop 					; and go round.
.98b2					_EXPRExit:
.98b2	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.98b4	60		rts				rts
.98b5					_EXPRCaller:
.98b5	da		phx				phx 								; save on stack, first thing is to restore it
.98b6	0a		asl a				asl 	a 							; double so can use vectors into X
.98b7	aa		tax				tax
.98b8	7c bc 90	jmp ($90bc,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a965					FloatingPointAdd:
.a965	20 06 ab	jsr $ab06			jsr 	FloatPrepare 				; prepare for floats
.a968	80 0b		bra $a975			bra 	FloatAdd
.a96a					FloatingPointSub:
.a96a	20 06 ab	jsr $ab06			jsr 	FloatPrepare 				; prepare for floats
.a96d					FloatSubtract:
.a96d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a970	49 80		eor #$80			eor 	#$80
.a972	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a975					FloatAdd:
.a975	48		pha				pha
.a976	5a		phy				phy
.a977	20 17 ab	jsr $ab17			jsr 	NSNormalise 				; normalise S[X]
.a97a	f0 54		beq $a9d0			beq 	_FAReturn1
.a97c	e8		inx				inx 								; normalise S[X+1]
.a97d	20 17 ab	jsr $ab17			jsr 	NSNormalise
.a980	ca		dex				dex
.a981	c9 00		cmp #$00			cmp 	#0
.a983	f0 6f		beq $a9f4			beq 	_FAExit 					; if so, just return A
.a985	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a988	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a98b	f0 1b		beq $a9a8			beq 	_FAExponentsEqual
.a98d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a990	a8		tay				tay
.a991	38		sec				sec 								; do a signed comparison of the exponents.
.a992	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a995	50 02		bvc $a999			bvc 	_FANoSignedChange
.a997	49 80		eor #$80			eor 	#$80
.a999					_FANoSignedChange:
.a999	29 80		and #$80			and 	#$80
.a99b	10 03		bpl $a9a0			bpl 	_FAHaveMax
.a99d	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a9a0					_FAHaveMax:
.a9a0	20 f7 a9	jsr $a9f7			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a9a3	e8		inx				inx
.a9a4	20 f7 a9	jsr $a9f7			jsr 	_FAShiftToExponent
.a9a7	ca		dex				dex
.a9a8					_FAExponentsEqual:
.a9a8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a9ab	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a9ae	30 10		bmi $a9c0			bmi 	_FADifferentSigns
.a9b0	20 6a 96	jsr $966a			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a9b3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a9b6	10 3c		bpl $a9f4			bpl 	_FAExit 					; if no, we are done.
.a9b8	20 50 a0	jsr $a050			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a9bb	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a9be	80 34		bra $a9f4			bra 	_FAExit
.a9c0					_FADifferentSigns:
.a9c0	20 90 96	jsr $9690			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a9c3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a9c6	10 2c		bpl $a9f4			bpl 	_FAExit 					; if no, we are done.
.a9c8	20 d9 9f	jsr $9fd9			jsr 	NSMNegate 					; netate result
.a9cb	20 e2 9f	jsr $9fe2			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a9ce	80 24		bra $a9f4			bra 	_FAExit
.a9d0					_FAReturn1:
.a9d0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a9d3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a9d6	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a9d9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9dc	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a9df	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a9e2	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a9e5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a9e8	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a9eb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a9ee	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a9f1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9f4					_FAExit:
.a9f4	7a		ply				ply
.a9f5	68		pla				pla
.a9f6	60		rts				rts
.a9f7					_FAShiftToExponent:
.a9f7					_FAShiftToExponent2:
.a9f7	98		tya				tya 								; compare Y to exponent
.a9f8	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a9fb	f0 08		beq $aa05			beq 	_FASEExit 					; exit if so.
.a9fd	20 50 a0	jsr $a050			jsr 	NSMShiftRight	 			; shift the mantissa right
.aa00	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.aa03	80 f2		bra $a9f7			bra 	_FAShiftToExponent2
.aa05					_FASEExit:
.aa05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.aa06					CompareFloat:
.aa06	20 6d a9	jsr $a96d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.aa09	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.aa0c	29 f8		and #$f8			and 	#$F8
.aa0e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.aa11	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.aa14	f0 09		beq $aa1f			beq 	_FCExit 					; zero, so approximately identical
.aa16	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.aa18	3c 00 04	bit $0400,x			bit 	NSStatus,x
.aa1b	10 02		bpl $aa1f			bpl 	_FCExit
.aa1d					_FCNegative:
.aa1d	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.aa1f					_FCExit:
.aa1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.aa20					FDivideCommand:
.aa20	fa		plx				plx	 								; restore stack position
.aa21	20 06 ab	jsr $ab06			jsr 	FloatPrepare 				; prepare for floats
.aa24					FloatDivide:
.aa24	48		pha				pha
.aa25	e8		inx				inx
.aa26	20 17 ab	jsr $ab17			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aa29	ca		dex				dex
.aa2a	c9 00		cmp #$00			cmp 	#0
.aa2c	f0 20		beq $aa4e			beq 	_FDZero
.aa2e	20 17 ab	jsr $ab17			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aa31	f0 19		beq $aa4c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aa33	20 61 a8	jsr $a861			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.aa36	20 ee a7	jsr $a7ee			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.aa39	20 17 ab	jsr $ab17			jsr		NSNormalise 				; renormalise
.aa3c	20 fc a8	jsr $a8fc			jsr 	CalculateSign 				; calculate result sign
.aa3f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.aa42	38		sec				sec
.aa43	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aa46	38		sec				sec
.aa47	e9 1e		sbc #$1e			sbc 	#30
.aa49	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa4c					_FDExit:
.aa4c	68		pla				pla
.aa4d	60		rts				rts
.aa4e					_FDZero:
.aa4e	a9 03		lda #$03		lda	#3
.aa50	4c 75 94	jmp $9475		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.aa53					FloatFractionalPart:
.aa53	5a		phy				phy
.aa54	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.aa57	29 7f		and #$7f			and 	#$7F
.aa59	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa5c	20 17 ab	jsr $ab17			jsr 	NSNormalise
.aa5f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.aa62	38		sec				sec
.aa63	e9 e0		sbc #$e0			sbc 	#$E0
.aa65	90 31		bcc $aa98			bcc 	_FFPExit 					; already fractional
.aa67	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.aa69	b0 2a		bcs $aa95			bcs 	_FFPZero
.aa6b	a8		tay				tay 								; put count to do in Y
.aa6c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.aa6f	20 9a aa	jsr $aa9a			jsr 	_FFPPartial
.aa72	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa75	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.aa78	20 9a aa	jsr $aa9a			jsr 	_FFPPartial
.aa7b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa7e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa81	20 9a aa	jsr $aa9a			jsr 	_FFPPartial
.aa84	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa87	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa8a	20 9a aa	jsr $aa9a			jsr 	_FFPPartial
.aa8d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aa90	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; zeroed check.
.aa93	d0 03		bne $aa98			bne 	_FFPExit
.aa95					_FFPZero:
.aa95	20 2d a0	jsr $a02d			jsr 	NSMSetZero
.aa98					_FFPExit:
.aa98	7a		ply				ply
.aa99	60		rts				rts
.aa9a					_FFPPartial:
.aa9a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.aa9c	f0 17		beq $aab5			beq 	_FFFPPExit
.aa9e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.aaa0	b0 0c		bcs $aaae			bcs 	_FFFPPWholeByte
.aaa2	5a		phy				phy
.aaa3					_FFFPPLeft:
.aaa3	0a		asl a				asl 	a
.aaa4	88		dey				dey
.aaa5	d0 fc		bne $aaa3			bne 	_FFFPPLeft
.aaa7	7a		ply				ply
.aaa8					_FFFPPRight:
.aaa8	4a		lsr a				lsr 	a
.aaa9	88		dey				dey
.aaaa	d0 fc		bne $aaa8			bne 	_FFFPPRight
.aaac	80 07		bra $aab5			bra 	_FFFPPExit
.aaae					_FFFPPWholeByte:
.aaae	98		tya				tya 								; subtract 8 from count
.aaaf	38		sec				sec
.aab0	e9 08		sbc #$08			sbc 	#8
.aab2	a8		tay				tay
.aab3	a9 00		lda #$00			lda 	#0 							; and clear all
.aab5					_FFFPPExit:
.aab5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aab6					FloatIntegerPart:
.aab6	48		pha				pha
.aab7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.aaba	f0 1f		beq $aadb			beq 	_FIPExit 					; if so do nothing
.aabc	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; is it zero ?
.aabf	f0 17		beq $aad8			beq 	_FIPZero 					; if so return zero.
.aac1	20 17 ab	jsr $ab17			jsr 	NSNormalise 				; normalise
.aac4	f0 12		beq $aad8			beq 	_FIPZero 					; normalised to zero, exit zero
.aac6					_FIPShift:
.aac6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.aac9	10 08		bpl $aad3			bpl 	_FIPCheckZero
.aacb	20 50 a0	jsr $a050			jsr 	NSMShiftRight 				; shift mantissa right
.aace	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.aad1	80 f3		bra $aac6			bra 	_FIPShift
.aad3					_FIPCheckZero:
.aad3	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; avoid -0 problem
.aad6	d0 03		bne $aadb			bne 	_FIPExit 					; set to zero if mantissa zero.
.aad8					_FIPZero:
.aad8	20 2d a0	jsr $a02d			jsr 	NSMSetZero
.aadb					_FIPExit:
.aadb	68		pla				pla
.aadc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.aadd					FloatingPointMultiply:
.aadd	20 06 ab	jsr $ab06			jsr 	FloatPrepare 				; prepare for floats
.aae0					FloatMultiply:
.aae0	48		pha				pha
.aae1	20 17 ab	jsr $ab17			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aae4	f0 1b		beq $ab01			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aae6	e8		inx				inx
.aae7	20 17 ab	jsr $ab17			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aaea	ca		dex				dex
.aaeb	c9 00		cmp #$00			cmp 	#0
.aaed	f0 0f		beq $aafe			beq 	_FDSetZero
.aaef	20 b7 a8	jsr $a8b7			jsr 	MultiplyShort 				; calculate the result.
.aaf2	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.aaf5	18		clc				clc
.aaf6	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.aaf9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aafc	80 03		bra $ab01			bra 	_FDExit
.aafe					_FDSetZero:
.aafe	20 2d a0	jsr $a02d			jsr 	NSMSetZero 					; return 0
.ab01					_FDExit:
.ab01	20 17 ab	jsr $ab17			jsr 	NSNormalise 				; normalise the result
.ab04	68		pla				pla
.ab05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.ab06					FloatPrepare:
.ab06	20 8e 99	jsr $998e			jsr 	DereferenceTopTwo 			; dereference the top two values
.ab09	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.ab0c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ab0f	29 10		and #$10			and 	#NSBIsString
.ab11	d0 01		bne $ab14			bne 	_FDType
.ab13	60		rts				rts
.ab14					_FDType:
.ab14	4c 9e ad	jmp $ad9e			jmp 	TypeError
.ab17					NSNormalise:
.ab17	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.ab1a	29 80		and #$80			and 	#$80
.ab1c	09 08		ora #$08			ora 	#NSTFloat
.ab1e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab21	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; if zero exit
.ab24	d0 09		bne $ab2f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ab26	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ab29	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ab2c	a9 00		lda #$00			lda 	#0 							; set Z flag
.ab2e	60		rts				rts
.ab2f					_NSNormaliseOptimise:
.ab2f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.ab32	d0 22		bne $ab56			bne 	_NSNormaliseLoop
.ab34	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.ab37	30 1d		bmi $ab56			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.ab39	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ab3c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ab3f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ab42	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ab45	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab48	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.ab4b	bd 28 04	lda $0428,x			lda 	NSExponent,x
.ab4e	38		sec				sec
.ab4f	e9 08		sbc #$08			sbc 	#8
.ab51	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ab54	80 d9		bra $ab2f			bra 	_NSNormaliseOptimise
.ab56					_NSNormaliseLoop:
.ab56	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.ab59	70 08		bvs $ab63			bvs 	_NSNExit 					; exit if so with Z flag clear
.ab5b	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; shift mantissa left
.ab5e	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.ab61	80 f3		bra $ab56			bra 	_NSNormaliseLoop
.ab63					_NSNExit:
.ab63	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ab65	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.98bb					AssignNumber:
.98bb	5a		phy				phy
.98bc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.98bf	85 36		sta $36				sta 	zTemp0
.98c1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98c4	85 37		sta $37				sta 	zTemp0+1
.98c6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.98c9	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.98cb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98ce	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.98d0	c9 08		cmp #$08			cmp 	#NSTFloat
.98d2	f0 2a		beq $98fe			beq 	_ANFloat
.98d4	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.98d7	f0 05		beq $98de			beq		_ANNotFloat
.98d9	e8		inx				inx
.98da	20 b6 aa	jsr $aab6			jsr 	FloatIntegerPart 			; make it an integer
.98dd	ca		dex				dex
.98de					_ANNotFloat:
.98de	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.98e1	29 03		and #$03			and 	#3
.98e3	d0 05		bne $98ea			bne 	_ANByteWord
.98e5	20 0a 99	jsr $990a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.98e8	80 1e		bra $9908			bra 	_ANExit
.98ea					_ANByteWord:
.98ea	48		pha				pha 								; save count
.98eb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.98ee	92 36		sta ($36)			sta 	(zTemp0)
.98f0	68		pla				pla
.98f1	c9 01		cmp #$01			cmp	 	#1
.98f3	f0 13		beq $9908			beq 	_ANExit
.98f5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.98f8	a0 01		ldy #$01			ldy 	#1
.98fa	91 36		sta ($36),y			sta 	(zTemp0),y
.98fc	80 0a		bra $9908			bra 	_ANExit
.98fe					_ANFloat:
.98fe	20 0a 99	jsr $990a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9901	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9904	a0 04		ldy #$04			ldy 	#4
.9906	91 36		sta ($36),y			sta 	(zTemp0),y
.9908					_ANExit:
.9908	7a		ply				ply
.9909	60		rts				rts
.990a					_ANCopy4PackSign:
.990a	a0 03		ldy #$03			ldy 	#3
.990c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.990f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9911	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9914	91 36		sta ($36),y			sta 	(zTemp0),y
.9916	88		dey				dey
.9917	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.991a	91 36		sta ($36),y			sta 	(zTemp0),y
.991c	88		dey				dey
.991d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9920	91 36		sta ($36),y			sta 	(zTemp0),y
.9922	88		dey				dey
.9923	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9926	91 36		sta ($36),y			sta 	(zTemp0),y
.9928	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9929					AssignString:
.9929	5a		phy				phy
.992a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.992d	85 38		sta $38				sta 	zTemp1
.992f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9932	85 39		sta $39				sta 	zTemp1+1
.9934	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9937	85 36		sta $36				sta 	zTemp0
.9939	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.993c	85 37		sta $37				sta 	zTemp0+1
.993e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9940	b1 36		lda ($36),y			lda 	(zTemp0),y
.9942	f0 23		beq $9967			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9944	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9945	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9947	e9 02		sbc #$02			sbc 	#2
.9949	85 3c		sta $3c				sta 	zsTemp
.994b	a0 01		ldy #$01			ldy 	#1
.994d	b1 36		lda ($36),y			lda 	(zTemp0),y
.994f	e9 00		sbc #$00			sbc 	#0
.9951	85 3d		sta $3d				sta 	zsTemp+1
.9953	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9955					_ASGetLength:
.9955	c8		iny				iny
.9956	b1 38		lda ($38),y			lda 	(zTemp1),y
.9958	d0 fb		bne $9955			bne 	_ASGetLength
.995a	98		tya				tya 								; is this length <= current length
.995b	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.995d	90 20		bcc $997f			bcc 	_ASCopyString
.995f	f0 1e		beq $997f			beq 	_ASCopyString
.9961	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9963	a0 01		ldy #$01			ldy 	#1
.9965	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9967					_ASNewStringRequired:
.9967	e8		inx				inx 								; concrete the new string.
.9968	20 3a b0	jsr $b03a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.996b	ca		dex				dex
.996c	18		clc				clc
.996d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9970	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9972	92 36		sta ($36)			sta 	(zTemp0)
.9974	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9977	69 00		adc #$00			adc 	#0
.9979	a0 01		ldy #$01			ldy 	#1
.997b	91 36		sta ($36),y			sta 	(zTemp0),y
.997d	80 0d		bra $998c			bra 	_ASExit
.997f					_ASCopyString:
.997f	a0 00		ldy #$00			ldy 	#0
.9981					_ASCopyLoop:
.9981	b1 38		lda ($38),y			lda 	(zTemp1),y
.9983	c8		iny				iny
.9984	c8		iny				iny
.9985	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9987	88		dey				dey
.9988	c9 00		cmp #$00			cmp 	#0
.998a	d0 f5		bne $9981			bne 	_ASCopyLoop
.998c					_ASExit:
.998c	7a		ply				ply
.998d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.998e					DereferenceTopTwo:
.998e	e8		inx				inx
.998f	20 93 99	jsr $9993			jsr 	Dereference 				; deref x+1
.9992	ca		dex				dex  								; falls through to deref x
.9993					Dereference:
.9993	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9996	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9998	f0 57		beq $99f1			beq 	_DRFExit 					; not a reference
.999a	5a		phy				phy
.999b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.999e	85 36		sta $36				sta 	zTemp0
.99a0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.99a3	85 37		sta $37				sta 	zTemp0+1
.99a5	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.99a8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.99aa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.99b0	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.99b2	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.99b4	f0 0f		beq $99c5			beq 	_DRFDereferenceTwo
.99b6	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.99b8	f0 39		beq $99f3			beq 	_DRFFull
.99ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.99bd	29 03		and #$03			and 	#3
.99bf	f0 32		beq $99f3			beq 	_DRFFull 					; the whole word
.99c1	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.99c3	f0 07		beq $99cc			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.99c5					_DRFDereferenceTwo:
.99c5	a0 01		ldy #$01			ldy 	#1
.99c7	b1 36		lda ($36),y			lda 	(zTemp0),y
.99c9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99cc					_DRFClear23:
.99cc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.99cf	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.99d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.99d5	29 18		and #$18			and 	#NSBTypeMask
.99d7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99da	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.99dc	d0 12		bne $99f0			bne 	_DRFNotString
.99de	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.99e1	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.99e4	d0 0a		bne $99f0			bne 	_DRFNotString
.99e6	a9 f2		lda #$f2			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.99e8	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.99eb	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.99ed	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.99f0					_DRFNotString
.99f0	7a		ply				ply 								; restore Y and exit
.99f1					_DRFExit:
.99f1	60		rts				rts
.99f2					_DRFNullString:
>99f2	00						.byte 	0
.99f3					_DRFFull:
.99f3	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.99f5	b1 36		lda ($36),y			lda 	(zTemp0),y
.99f7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99fa	c8		iny				iny
.99fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.99fd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a00	c8		iny				iny
.9a01	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a03	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a06	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9a09	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9a0c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9a0e	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9a11	f0 06		beq $9a19			beq 	_DRFNoExponent
.9a13	c8		iny				iny 								; if not, read the exponent as well.
.9a14	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a16	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a19					_DRFNoExponent:
.9a19	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9a1c	10 0d		bpl $9a2b			bpl 	_DRFExit2 					; if not, then exit.
.9a1e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9a20	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a23	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9a26	09 80		ora #$80			ora 	#NSBIsNegative
.9a28	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a2b					_DRFExit2:
.9a2b	7a		ply				ply
.9a2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9a2d					EncodeNumberStart:
.9a2d	38		sec				sec
.9a2e	80 01		bra $9a31			bra 	EncodeNumberContinue+1
.9a30					EncodeNumberContinue:
.9a30	18		clc				clc
.9a31					EncodeNumber:
.9a31	08		php				php 								; save reset.
.9a32	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a34	f0 12		beq $9a48			beq 	_ENIsOkay
.9a36	c9 30		cmp #$30			cmp 	#"0"
.9a38	90 04		bcc $9a3e			bcc 	_ENBadNumber
.9a3a	c9 3a		cmp #$3a			cmp 	#"9"+1
.9a3c	90 0a		bcc $9a48			bcc 	_ENIsOkay
.9a3e					_ENBadNumber:
.9a3e	28		plp				plp 								; throw saved reset
.9a3f	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9a42	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a44	f0 7e		beq $9ac4			beq 	_ENConstructFinal
.9a46					_ENFail:
.9a46	18		clc				clc 								; not allowed
.9a47	60		rts				rts
.9a48					_ENIsOkay:
.9a48	28		plp				plp 								; are we restarting
.9a49	90 15		bcc $9a60			bcc 	_ENNoRestart
.9a4b					_ENStartEncode:
.9a4b	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9a4d	f0 0c		beq $9a5b			beq 	_ENFirstDP
.9a4f	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9a51	20 2f a0	jsr $a02f			jsr 	NSMSetByte
.9a54	a9 01		lda #$01			lda 	#ESTA_Low
.9a56					_ENExitChange:
.9a56	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9a59	38		sec				sec
.9a5a	60		rts				rts
.9a5b					_ENFirstDP:
.9a5b	20 2d a0	jsr $a02d			jsr 	NSMSetZero 					; clear integer part
.9a5e	80 3f		bra $9a9f			bra 	_ESTASwitchFloat			; go straight to float and exi
.9a60					_ENNoRestart:
.9a60	48		pha				pha 								; save on stack.
.9a61	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9a64	c9 01		cmp #$01			cmp 	#ESTA_Low
.9a66	f0 09		beq $9a71			beq  	_ESTALowState
.9a68	c9 02		cmp #$02			cmp 	#ESTA_High
.9a6a	f0 29		beq $9a95			beq 	_ESTAHighState
.9a6c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a6e	f0 3b		beq $9aab			beq 	_ESTADecimalState
>9a70	db						.byte 	$DB 						; causes a break in the emulator
.9a71					_ESTALowState:
.9a71	68		pla				pla 								; get value back
.9a72	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a74	f0 29		beq $9a9f			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a76	29 0f		and #$0f			and 	#15 						; make digit
.9a78	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9a7b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9a7e	0a		asl a				asl 	a
.9a7f	0a		asl a				asl 	a
.9a80	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a83	0a		asl a				asl 	a
.9a84	6d 86 04	adc $0486			adc 	DigitTemp
.9a87	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a8a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9a8c	90 05		bcc $9a93			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9a8e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9a90	8d 85 04	sta $0485			sta 	EncodeState
.9a93					_ESTANoSwitch:
.9a93	38		sec				sec
.9a94	60		rts				rts
.9a95					_ESTAHighState:
.9a95	68		pla				pla 								; get value back
.9a96	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9a98	f0 05		beq $9a9f			beq 	_ESTASwitchFloat
.9a9a	20 fe 9a	jsr $9afe			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9a9d	38		sec				sec
.9a9e	60		rts				rts
.9a9f					_ESTASwitchFloat:
.9a9f	9c 87 04	stz $0487			stz 	DecimalCount
.9aa2	e8		inx				inx 								; zero the decimal additive.
.9aa3	20 2d a0	jsr $a02d			jsr 	NSMSetZero
.9aa6	ca		dex				dex
.9aa7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9aa9	80 ab		bra $9a56			bra 	_ENExitChange
.9aab					_ESTADecimalState:
.9aab	68		pla				pla 								; digit.
.9aac	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9aae	f0 96		beq $9a46			beq 	_ENFail
.9ab0	e8		inx				inx 								; put digit into fractional part of X+1
.9ab1	20 fe 9a	jsr $9afe			jsr 	ESTAShiftDigitIntoMantissa
.9ab4	ca		dex				dex
.9ab5	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9ab8	ad 87 04	lda $0487			lda 	DecimalCount
.9abb	c9 0b		cmp #$0b			cmp 	#11
.9abd	f0 02		beq $9ac1			beq 	_ESTADSFail
.9abf	38		sec				sec
.9ac0	60		rts				rts
.9ac1					_ESTADSFail:
.9ac1	4c 99 ad	jmp $ad99			jmp 	RangeError
.9ac4					_ENConstructFinal:
.9ac4	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9ac7	f0 33		beq $9afc			beq 	_ENCFExit 					; no decimals
.9ac9	5a		phy				phy
.9aca	0a		asl a				asl 	a 							; x 4 and CLC
.9acb	0a		asl a				asl 	a
.9acc	6d 87 04	adc $0487			adc 	DecimalCount
.9acf	a8		tay				tay
.9ad0	b9 58 ad	lda $ad58,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9ad3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ad6	b9 59 ad	lda $ad59,y			lda 	DecimalScalarTable-5+1,y
.9ad9	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9adc	b9 5a ad	lda $ad5a,y			lda 	DecimalScalarTable-5+2,y
.9adf	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9ae2	b9 5b ad	lda $ad5b,y			lda 	DecimalScalarTable-5+3,y
.9ae5	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ae8	b9 5c ad	lda $ad5c,y			lda 	DecimalScalarTable-5+4,y
.9aeb	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9aee	a9 08		lda #$08			lda 	#NSTFloat
.9af0	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9af3	7a		ply				ply
.9af4	e8		inx				inx 								; multiply decimal const by decimal scalar
.9af5	20 e0 aa	jsr $aae0			jsr 	FloatMultiply
.9af8	ca		dex				dex
.9af9	20 75 a9	jsr $a975			jsr 	FloatAdd 					; add to integer part.
.9afc					_ENCFExit:
.9afc	18		clc				clc 								; reject the digit.
.9afd	60		rts				rts
.9afe					ESTAShiftDigitIntoMantissa:
.9afe	29 0f		and #$0f			and 	#15 						; save digit
.9b00	48		pha				pha
.9b01	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9b04	48		pha				pha
.9b05	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9b08	48		pha				pha
.9b09	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b0c	48		pha				pha
.9b0d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b10	48		pha				pha
.9b11	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; x 2
.9b14	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; x 4
.9b17	18		clc				clc 								; pop mantissa and add
.9b18	68		pla				pla
.9b19	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b1c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b1f	68		pla				pla
.9b20	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9b23	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b26	68		pla				pla
.9b27	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9b2a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b2d	68		pla				pla
.9b2e	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9b31	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9b34	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; x 10
.9b37	68		pla				pla 								; add digit
.9b38	18		clc				clc
.9b39	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b3c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b3f	90 0d		bcc $9b4e			bcc 	_ESTASDExit
.9b41	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9b44	d0 08		bne $9b4e			bne 	_ESTASDExit
.9b46	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9b49	d0 03		bne $9b4e			bne 	_ESTASDExit
.9b4b	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9b4e					_ESTASDExit:
.9b4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9b4f					EvaluateTerm:
.9b4f	b1 30		lda ($30),y			lda 	(codePtr),y
.9b51	30 18		bmi $9b6b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9b53	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9b55	b0 6f		bcs $9bc6			bcs 	_ETVariable
.9b57	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9b59	90 6e		bcc $9bc9			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9b5b	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b5d	b0 6a		bcs $9bc9			bcs 	_ETPuncUnary
.9b5f	20 2d 9a	jsr $9a2d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9b62					_ETNumber:
.9b62	c8		iny				iny 								; keep encoding until we have the numbers
.9b63	b1 30		lda ($30),y			lda 	(codePtr),y
.9b65	20 30 9a	jsr $9a30			jsr 	EncodeNumberContinue
.9b68	b0 f8		bcs $9b62			bcs 	_ETNumber 					; go back if accepted.
.9b6a	60		rts				rts
.9b6b					_ETCheckUnary:
.9b6b	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b6d	f0 41		beq $9bb0			beq 	_ETString
.9b6f	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b71	f0 12		beq $9b85			beq 	_ETHexConstant
.9b73	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b75	90 0b		bcc $9b82			bcc 	_ETSyntaxError
.9b77	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9b79	b0 07		bcs $9b82			bcs 	_ETSyntaxError
.9b7b	da		phx				phx 								; push X on the stack
.9b7c	0a		asl a				asl 	a 							; put vector x 2 into X
.9b7d	aa		tax				tax
.9b7e	c8		iny				iny 								; consume unary function token
.9b7f	7c 3c 91	jmp ($913c,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b82					_ETSyntaxError:
.9b82	4c 94 ad	jmp $ad94			jmp 	SyntaxError
.9b85					_ETHexConstant:
.9b85	c8		iny				iny 								; skip #
.9b86	c8		iny				iny 								; skip count
.9b87	20 2d a0	jsr $a02d			jsr 	NSMSetZero 					; clear result
.9b8a					_ETHLoop:
.9b8a	b1 30		lda ($30),y			lda 	(codePtr),y
.9b8c	c8		iny				iny 								; and consume
.9b8d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b8f	f0 1e		beq $9baf			beq 	_ETHExit
.9b91	48		pha				pha 								; save on stack.
.9b92	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; x 2
.9b95	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; x 4
.9b98	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; x 8
.9b9b	20 42 a0	jsr $a042			jsr 	NSMShiftLeft 				; x 16
.9b9e	68		pla				pla 								; ASCII
.9b9f	c9 41		cmp #$41			cmp 	#'A'
.9ba1	90 02		bcc $9ba5			bcc 	_ETHNotChar
.9ba3	e9 07		sbc #$07			sbc 	#7
.9ba5					_ETHNotChar:
.9ba5	29 0f		and #$0f			and 	#15 						; digit now
.9ba7	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9baa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bad	80 db		bra $9b8a			bra 	_ETHLoop 					; go round.
.9baf					_ETHExit:
.9baf	60		rts				rts
.9bb0					_ETString:
.9bb0	c8		iny				iny 								; look at length
.9bb1	b1 30		lda ($30),y			lda 	(codePtr),y
.9bb3	48		pha				pha
.9bb4	c8		iny				iny 								; first character
.9bb5	20 77 a0	jsr $a077			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9bb8	68		pla				pla 								; restore count and save
.9bb9	85 36		sta $36				sta 	zTemp0
.9bbb	98		tya				tya 								; add length to Y to skip it.
.9bbc	18		clc				clc
.9bbd	65 36		adc $36				adc 	zTemp0
.9bbf	a8		tay				tay
.9bc0	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9bc2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bc5	60		rts				rts
.9bc6					_ETVariable:
.9bc6	4c 20 9c	jmp $9c20			jmp 	VariableHandler
.9bc9					_ETPuncUnary:
.9bc9	c8		iny				iny 								; consume the unary character
.9bca	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9bcc	f0 2d		beq $9bfb			beq 	_ETUnaryNegate
.9bce	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9bd0	f0 39		beq $9c0b			beq 	_ETDereference
.9bd2	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9bd4	f0 43		beq $9c19			beq 	_ETParenthesis
.9bd6	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9bd8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9bda	f0 06		beq $9be2			beq 	_ETIndirection
.9bdc	e6 36		inc $36				inc 	zTemp0
.9bde	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9be0	d0 a0		bne $9b82			bne 	_ETSyntaxError
.9be2					_ETIndirection:
.9be2	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9be4	1a		inc a				inc 	a
.9be5	48		pha				pha
.9be6	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm				; evaluate the term
.9be9	20 93 99	jsr $9993			jsr 	Dereference 				; dereference it.
.9bec	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9bef	d0 07		bne $9bf8			bne 	_ETTypeMismatch
.9bf1	68		pla				pla 								; indirection 1-2
.9bf2	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9bf4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bf7	60		rts				rts
.9bf8					_ETTypeMismatch:
.9bf8	4c 9e ad	jmp $ad9e			jmp 	TypeError
.9bfb					_ETUnaryNegate:
.9bfb	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm				; evaluate the term
.9bfe	20 93 99	jsr $9993			jsr 	Dereference 				; dereference it.
.9c01	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9c04	29 10		and #$10			and 	#NSTString
.9c06	d0 f0		bne $9bf8			bne 	_ETTypeMismatch
.9c08	4c d9 9f	jmp $9fd9			jmp 	NSMNegate  					; just toggles the sign bit.
.9c0b					_ETDereference:
.9c0b	20 4f 9b	jsr $9b4f			jsr 	EvaluateTerm				; evaluate the term
.9c0e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9c11	29 20		and #$20			and 	#NSBIsReference
.9c13	f0 e3		beq $9bf8			beq 	_ETTypeMismatch
.9c15	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9c18	60		rts				rts
.9c19					_ETParenthesis:
.9c19	20 7e 98	jsr $987e			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9c1c	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket 			; check for )
.9c1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9c20					VariableHandler:
.9c20	b1 30		lda ($30),y			lda 	(codePtr),y
.9c22	18		clc				clc
.9c23	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9c25	85 37		sta $37				sta 	zTemp0+1
.9c27	c8		iny				iny
.9c28	b1 30		lda ($30),y			lda 	(codePtr),y
.9c2a	85 36		sta $36				sta 	zTemp0
.9c2c	c8		iny				iny
.9c2d	18		clc				clc									; copy variable address+3 to mantissa
.9c2e	69 03		adc #$03			adc 	#3
.9c30	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c33	a5 37		lda $37				lda 	zTemp0+1
.9c35	69 00		adc #$00			adc 	#0
.9c37	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c3a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9c3d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9c40	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9c43	5a		phy				phy
.9c44	a0 02		ldy #$02			ldy 	#2 							; read type
.9c46	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c48	7a		ply				ply
.9c49	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9c4b	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9c4d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c50	29 04		and #$04			and 	#NSBIsArray
.9c52	d0 01		bne $9c55			bne 	_VHArray
.9c54	60		rts				rts
.9c55					_VHArray:
.9c55	e8		inx				inx
.9c56	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9c59	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9c5b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c5e	b1 30		lda ($30),y			lda 	(codePtr),y
.9c60	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9c62	d0 06		bne $9c6a			bne 	_VHNoSecondIndex
.9c64	c8		iny				iny 								; skip the comma
.9c65	e8		inx				inx
.9c66	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c69	ca		dex				dex
.9c6a					_VHNoSecondIndex:
.9c6a	ca		dex				dex 								; set X back.
.9c6b	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket 			; and check the right bracket.
.9c6e	5a		phy				phy 								; save position
.9c6f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9c72	85 3e		sta $3e				sta 	zaTemp
.9c74	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c77	85 3f		sta $3f				sta 	zaTemp+1
.9c79	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c7b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c7d	f0 02		beq $9c81			beq 	_VHHas2Mask
.9c7f	a9 ff		lda #$ff			lda 	#$FF
.9c81					_VHHas2Mask:
.9c81	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c84	f0 54		beq $9cda			beq 	_VHBadIndex
.9c86	0a		asl a				asl 	a 							; carry will be set if a second index
.9c87	90 09		bcc $9c92			bcc 	_VHCheckFirstIndex
.9c89	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c8b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c8d	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9c90	90 48		bcc $9cda			bcc 	_VHBadIndex
.9c92					_VHCheckFirstIndex:
.9c92	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c94	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c96	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9c99	90 3f		bcc $9cda			bcc 	_VHBadIndex
.9c9b	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9c9d	64 37		stz $37				stz 	zTemp0+1
.9c9f	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9ca2	30 0f		bmi $9cb3			bmi 	_VHNoMultiply
.9ca4	da		phx				phx
.9ca5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9ca8	48		pha				pha
.9ca9	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9cab	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cad	1a		inc a				inc 	a 							; add 1 for zero base
.9cae	fa		plx				plx
.9caf	20 30 ac	jsr $ac30			jsr 	Multiply8x8 				; calculate -> Z0
.9cb2	fa		plx				plx
.9cb3					_VHNoMultiply:
.9cb3	18		clc				clc
.9cb4	a5 36		lda $36				lda 	zTemp0
.9cb6	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9cb9	85 36		sta $36				sta 	zTemp0
.9cbb	a5 37		lda $37				lda 	zTemp0+1
.9cbd	69 00		adc #$00			adc 	#0
.9cbf	85 37		sta $37				sta 	zTemp0+1
.9cc1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9cc4	20 a0 8b	jsr $8ba0			jsr 	ScaleByBaseType
.9cc7	18		clc				clc
.9cc8	b2 3e		lda ($3e)			lda 	(zaTemp)
.9cca	65 36		adc $36				adc 	zTemp0
.9ccc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ccf	a0 01		ldy #$01			ldy 	#1
.9cd1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cd3	65 37		adc $37				adc 	zTemp0+1
.9cd5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cd8	7a		ply				ply 								; restore position
.9cd9	60		rts				rts
.9cda					_VHBadIndex:
.9cda	a9 17		lda #$17		lda	#23
.9cdc	4c 75 94	jmp $9475		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ab66					AbsUnary:
.ab66	fa		plx				plx 								; restore stack pos
.ab67	20 81 9f	jsr $9f81			jsr 	EvaluateNumber 				; get a float or int
.ab6a	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.ab6d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.ab70	29 7f		and #$7f			and 	#$7F
.ab72	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9cdf					AllocUnary:
.9cdf	fa		plx				plx 								; restore stack pos
.9ce0	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger		; get bytes required.
.9ce3	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.9ce6	da		phx				phx 								; save X/Y
.9ce7	5a		phy				phy
.9ce8	8a		txa				txa 								; copy X into Y
.9ce9	a8		tay				tay
.9cea	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9ced	aa		tax				tax
.9cee	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9cf1	20 fe 9c	jsr $9cfe			jsr 	AllocateXABytes 			; allocate memory
.9cf4	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9cf7	8a		txa				txa
.9cf8	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9cfb	7a		ply				ply
.9cfc	fa		plx				plx
.9cfd	60		rts				rts
.9cfe					AllocateXABytes:
.9cfe	5a		phy				phy
.9cff	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9d02	84 36		sty $36				sty 	zTemp0
.9d04	5a		phy				phy
.9d05	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9d08	84 37		sty $37				sty 	zTemp0+1
.9d0a	5a		phy				phy
.9d0b	18		clc				clc 								; add to low memory pointer
.9d0c	6d 8c 04	adc $048c			adc 	lowMemPtr
.9d0f	8d 8c 04	sta $048c			sta 	lowMemPtr
.9d12	8a		txa				txa
.9d13	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9d16	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9d19	b0 2f		bcs $9d4a			bcs 	CISSMemory
.9d1b	20 3c 9d	jsr $9d3c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9d1e					_ClearMemory:
.9d1e	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9d21	c5 36		cmp $36				cmp 	zTemp0
.9d23	d0 07		bne $9d2c			bne 	_CMClearNext
.9d25	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9d28	c5 37		cmp $37				cmp 	zTemp0+1
.9d2a	f0 0c		beq $9d38			beq 	_CMExit
.9d2c					_CMClearNext:
.9d2c	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9d2e	92 36		sta ($36)			sta 	(zTemp0)
.9d30	e6 36		inc $36				inc 	zTemp0
.9d32	d0 ea		bne $9d1e			bne 	_ClearMemory
.9d34	e6 37		inc $37				inc		zTemp0+1
.9d36	80 e6		bra $9d1e			bra 	_ClearMemory
.9d38					_CMExit:
.9d38	fa		plx				plx
.9d39	68		pla				pla
.9d3a	7a		ply				ply
.9d3b	60		rts				rts
.9d3c					CheckIdentifierStringSpace:
.9d3c	48		pha				pha
.9d3d	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9d40	18		clc				clc
.9d41	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9d43	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9d46	b0 02		bcs $9d4a			bcs 	CISSMemory
.9d48	68		pla				pla
.9d49	60		rts				rts
.9d4a					CISSMemory:
.9d4a	a9 06		lda #$06		lda	#6
.9d4c	4c 75 94	jmp $9475		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ab76					AscUnary:
.ab76	fa		plx				plx 								; restore stack pos
.ab77	20 8c 9f	jsr $9f8c			jsr 	EvaluateString 				; get a string
.ab7a	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.ab7c	20 2f a0	jsr $a02f			jsr 	NSMSetByte
.ab7f	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.ab82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ab83					FracUnary:
.ab83	fa		plx				plx 								; restore stack pos
.ab84	20 81 9f	jsr $9f81			jsr 	EvaluateNumber 				; get a float or int
.ab87	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.ab8a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab8d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab8f	f0 04		beq $ab95			beq 	_IUZero
.ab91	20 53 aa	jsr $aa53			jsr 	FloatFractionalPart
.ab94	60		rts				rts
.ab95					_IUZero:
.ab95	20 2d a0	jsr $a02d			jsr 	NSMSetZero
.ab98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ab99					IntUnary:
.ab99	fa		plx				plx 								; restore stack pos
.ab9a	20 81 9f	jsr $9f81			jsr 	EvaluateNumber 				; get a float or int
.ab9d	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.aba0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aba3	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aba5	f0 03		beq $abaa			beq 	_IUExit
.aba7	20 b6 aa	jsr $aab6			jsr 	FloatIntegerPart
.abaa					_IUExit:
.abaa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.abab					LenUnary:
.abab	fa		plx				plx 								; restore stack pos
.abac	20 8c 9f	jsr $9f8c			jsr 	EvaluateString 				; get a string
.abaf	5a		phy				phy
.abb0	a0 00		ldy #$00			ldy 	#0 							; find length
.abb2					_LenFind:
.abb2	b1 36		lda ($36),y			lda 	(zTemp0),y
.abb4	f0 06		beq $abbc			beq 	_LenExit
.abb6	c8		iny				iny
.abb7	d0 f9		bne $abb2			bne 	_LenFind
.abb9	4c 99 ad	jmp $ad99			jmp 	RangeError 					; string > 255
.abbc					_LenExit:
.abbc	98		tya				tya
.abbd	20 2f a0	jsr $a02f			jsr 	NSMSetByte
.abc0	7a		ply				ply
.abc1	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.abc4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9d4f					Unary_Not:
.9d4f	fa		plx				plx
.9d50	20 a4 9f	jsr $9fa4			jsr 	EvaluateInteger 			; get integer
.9d53	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.9d56	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; zero mantissa ?
.9d59	f0 04		beq $9d5f			beq 	_NotZero
.9d5b	20 2d a0	jsr $a02d			jsr 	NSMSetZero
.9d5e	60		rts				rts
.9d5f					_NotZero:
.9d5f	4c e2 94	jmp $94e2			jmp 	ReturnTrue
.9d62					_UNBad:
.9d62	4c a3 ad	jmp $ada3			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9d65					Unary_Random:
.9d65	fa		plx				plx
.9d66	20 de 9d	jsr $9dde			jsr 	Random32Bit 				; get a random number
.9d69	20 c3 9d	jsr $9dc3			jsr 	URCopyToMantissa  			; put in mantissa
.9d6c	e8		inx				inx
.9d6d	20 b9 9f	jsr $9fb9			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d70	ca		dex				dex
.9d71	20 32 a8	jsr $a832			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9d74	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9d77	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9d7a	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.9d7d	60		rts				rts
.9d7e					Unary_Rnd:
.9d7e	fa		plx				plx
.9d7f	20 81 9f	jsr $9f81			jsr 	EvaluateNumber 				; number to use.
.9d82	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket 			; closing bracket
.9d85	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d88	f0 2b		beq $9db5			beq 	_URCopySeed
.9d8a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d8d	10 23		bpl $9db2			bpl 	_URDontSeed
.9d8f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d92	49 17		eor #$17			eor 	#$17
.9d94	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d97	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d9a	49 a5		eor #$a5			eor 	#$A5
.9d9c	8d 89 04	sta $0489			sta 	RandomSeed+1
.9d9f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9da2	49 c2		eor #$c2			eor 	#$C2
.9da4	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9da7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9daa	49 9d		eor #$9d			eor 	#$9D
.9dac	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9daf	20 de 9d	jsr $9dde			jsr 	Random32Bit
.9db2					_URDontSeed:
.9db2	20 de 9d	jsr $9dde			jsr 	Random32Bit 				; generate a number.
.9db5					_URCopySeed:
.9db5	20 c3 9d	jsr $9dc3			jsr 	URCopyToMantissa 			; copy into mantissa
.9db8	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9dba	8d 28 04	sta $0428			sta 	NSExponent
.9dbd	a9 08		lda #$08			lda 	#NSTFloat
.9dbf	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9dc2	60		rts				rts
.9dc3					URCopyToMantissa:
.9dc3	ad 88 04	lda $0488			lda 	RandomSeed+0
.9dc6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dc9	ad 89 04	lda $0489			lda 	RandomSeed+1
.9dcc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dcf	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9dd2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dd5	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9dd8	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9dda	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ddd	60		rts				rts
.9dde					Random32Bit:
.9dde	5a		phy				phy
.9ddf	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9de1	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9de4	d0 03		bne $9de9			bne 	_Random1
.9de6	a8		tay				tay 								; if so do it 256 times
.9de7	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9de9					_Random1:
.9de9	0a		asl a				asl 	a 							; LSFR RNG
.9dea	2e 89 04	rol $0489			rol 	RandomSeed+1
.9ded	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9df0	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9df3	90 02		bcc $9df7			bcc 	_Random2
.9df5	49 c5		eor #$c5			eor 	#$C5
.9df7					_Random2:
.9df7	88		dey				dey
.9df8	d0 ef		bne $9de9			bne 	_Random1
.9dfa	8d 88 04	sta $0488			sta 	RandomSeed+0
.9dfd	7a		ply				ply
.9dfe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.abc5					SgnUnary:
.abc5	fa		plx				plx 								; restore stack pos
.abc6	20 81 9f	jsr $9f81			jsr 	EvaluateNumber 				; get a float or int
.abc9	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.abcc	20 5d a0	jsr $a05d			jsr 	NSMIsZero 					; if zero
.abcf	f0 10		beq $abe1			beq 	_SGZero  					; return Int Zero
.abd1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.abd4	48		pha				pha
.abd5	a9 01		lda #$01			lda 	#1 							; set to 1
.abd7	20 2f a0	jsr $a02f			jsr 	NSMSetByte
.abda	68		pla				pla
.abdb	29 80		and #$80			and		#$80 						; copy the sign byte out
.abdd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.abe0	60		rts				rts
.abe1	20 2d a0	jsr $a02d	_SGZero:jsr 	NSMSetZero
.abe4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.abe5					ValUnary:
.abe5	fa		plx				plx 								; restore stack pos
.abe6	20 fb ab	jsr $abfb			jsr 	ValMainCode 				; do the main val() code
.abe9	b0 01		bcs $abec			bcs 	_VUError 					; couldn't convert
.abeb	60		rts				rts
.abec					_VUError:
.abec	4c 9e ad	jmp $ad9e			jmp 	TypeError
.abef					IsValUnary:
.abef	fa		plx				plx 								; restore stack pos
.abf0	20 fb ab	jsr $abfb			jsr 	ValMainCode 				; do the main val() code
.abf3	b0 03		bcs $abf8			bcs 	_VUBad
.abf5	4c e2 94	jmp $94e2			jmp 	ReturnTrue
.abf8					_VUBad:
.abf8	4c ee 94	jmp $94ee			jmp 	ReturnFalse
.abfb					ValMainCode:
.abfb	20 8c 9f	jsr $9f8c			jsr 	EvaluateString 				; get a string
.abfe	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket 			; check right bracket present
.ac01	5a		phy				phy
.ac02	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ac04	f0 17		beq $ac1d			beq 	_VMCFail2
.ac06	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ac08	48		pha				pha 								; save first character
.ac09	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ac0b	d0 01		bne $ac0e			bne 	_VMCStart
.ac0d	c8		iny				iny 								; skip over -
.ac0e					_VMCStart:
.ac0e	38		sec				sec 								; initialise first time round.
.ac0f					_VMCNext:
.ac0f	c8		iny				iny 								; pre-increment
.ac10	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ac12	f0 0c		beq $ac20			beq 	_VMCSuccess 				; successful.
.ac14	20 31 9a	jsr $9a31			jsr 	EncodeNumber 				; send it to the number-builder
.ac17	90 03		bcc $ac1c			bcc 	_VMCFail 					; if failed, give up.
.ac19	18		clc				clc 								; next time round, countinue
.ac1a	80 f3		bra $ac0f			bra 	_VMCNext
.ac1c					_VMCFail:
.ac1c	68		pla				pla
.ac1d					_VMCFail2:
.ac1d	7a		ply				ply
.ac1e	38		sec				sec
.ac1f	60		rts				rts
.ac20					_VMCSuccess:
.ac20	a9 00		lda #$00			lda 	#0 							; construct final
.ac22	20 31 9a	jsr $9a31			jsr 	EncodeNumber
.ac25	68		pla				pla
.ac26	c9 2d		cmp #$2d			cmp 	#"-"
.ac28	d0 03		bne $ac2d			bne 	_VMCNotNegative
.ac2a	20 d9 9f	jsr $9fd9			jsr		NSMNegate
.ac2d					_VMCNotNegative:
.ac2d	7a		ply				ply
.ac2e	18		clc				clc
.ac2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9dff					ChrUnary:
.9dff	fa		plx				plx 								; restore stack pos
.9e00	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger			; get value
.9e03	48		pha				pha
.9e04	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.9e07	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9e09	20 bb b0	jsr $b0bb			jsr 	StringTempAllocate
.9e0c	68		pla				pla 								; write number to it
.9e0d	20 f9 b0	jsr $b0f9			jsr 	StringTempWrite
.9e10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9e11					SpcUnary:
.9e11	fa		plx				plx 								; restore stack pos
.9e12	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger			; get value
.9e15	5a		phy				phy
.9e16	48		pha				pha 								; save count
.9e17	20 bb b0	jsr $b0bb			jsr 	StringTempAllocate
.9e1a	7a		ply				ply 								; to do count in Y
.9e1b					_SpcLoop:
.9e1b	c0 00		cpy #$00			cpy 	#0
.9e1d	f0 08		beq $9e27			beq 	_SpcExit
.9e1f	a9 20		lda #$20			lda 	#32
.9e21	20 f9 b0	jsr $b0f9			jsr 	StringTempWrite
.9e24	88		dey				dey
.9e25	80 f4		bra $9e1b			bra 	_SPCLoop
.9e27					_SpcExit:
.9e27	7a		ply				ply
.9e28	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket
.9e2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e2c					Unary_Str:
.9e2c	fa		plx				plx
.9e2d	20 81 9f	jsr $9f81			jsr 	EvaluateNumber  			; get number
.9e30	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket 			; closing bracket
.9e33	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9e35	20 4e 9e	jsr $9e4e			jsr 	ConvertNumberToString 		; do the conversion.
.9e38	a9 21		lda #$21			lda		#33 						; create buffer
.9e3a	20 bb b0	jsr $b0bb			jsr 	StringTempAllocate 			; allocate memory
.9e3d	da		phx				phx
.9e3e	a2 00		ldx #$00			ldx 	#0
.9e40					_USCopy:
.9e40	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9e43	20 f9 b0	jsr $b0f9			jsr 	StringTempWrite
.9e46	e8		inx				inx
.9e47	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9e4a	d0 f4		bne $9e40			bne 	_USCopy
.9e4c	fa		plx				plx
.9e4d	60		rts				rts
.9e4e					ConvertNumberToString:
.9e4e	5a		phy				phy 								; save code position
.9e4f	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9e52	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9e55	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9e58	10 0a		bpl $9e64			bpl 	_CNTSNotNegative
.9e5a	29 7f		and #$7f			and 	#$7F 						; make +ve
.9e5c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e5f	a9 2d		lda #$2d			lda 	#"-"
.9e61	20 ca 9e	jsr $9eca			jsr 	WriteDecimalBuffer
.9e64					_CNTSNotNegative:
.9e64	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9e67	f0 15		beq $9e7e			beq 	_CNTSNotFloat
.9e69	e8		inx				inx 								; round up
.9e6a	a9 01		lda #$01			lda 	#1
.9e6c	20 2f a0	jsr $a02f			jsr 	NSMSetByte
.9e6f	ca		dex				dex
.9e70	bd 28 04	lda $0428,x			lda		NSExponent,x
.9e73	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9e76	a9 08		lda #$08			lda 	#NSTFloat
.9e78	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9e7b	20 75 a9	jsr $a975			jsr 	FloatAdd
.9e7e					_CNTSNotFloat:
.9e7e	20 ac 9e	jsr $9eac			jsr 	MakePlusTwoString
.9e81	20 53 aa	jsr $aa53			jsr 	FloatFractionalPart 		; get the fractional part
.9e84	20 17 ab	jsr $ab17			jsr 	NSNormalise					; normalise , exit if zero
.9e87	f0 21		beq $9eaa			beq 	_CNTSExit
.9e89	a9 2e		lda #$2e			lda 	#"."
.9e8b	20 ca 9e	jsr $9eca			jsr 	WriteDecimalBuffer 			; write decimal place
.9e8e					_CNTSDecimal:
.9e8e	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9e91	30 17		bmi $9eaa			bmi 	_CNTSExit
.9e93	e8		inx				inx 								; x 10.0
.9e94	a9 0a		lda #$0a			lda 	#10
.9e96	20 2f a0	jsr $a02f			jsr 	NSMSetByte
.9e99	a9 08		lda #$08			lda 	#NSTFloat
.9e9b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e9e	ca		dex				dex
.9e9f	20 e0 aa	jsr $aae0			jsr 	FloatMultiply
.9ea2	20 ac 9e	jsr $9eac			jsr 	MakePlusTwoString
.9ea5	20 53 aa	jsr $aa53			jsr 	FloatFractionalPart 		; get the fractional part
.9ea8	80 e4		bra $9e8e			bra 	_CNTSDecimal 				; keep going.
.9eaa					_CNTSExit:
.9eaa	7a		ply				ply
.9eab	60		rts				rts
.9eac					MakePlusTwoString:
.9eac	da		phx				phx
.9ead	20 04 a0	jsr $a004			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9eb0	e8		inx				inx 								; access it
.9eb1	e8		inx				inx
.9eb2	20 b6 aa	jsr $aab6			jsr 	FloatIntegerPart 			; make it an integer
.9eb5	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9eb7	20 1f a9	jsr $a91f			jsr 	ConvertInt32
.9eba	a2 00		ldx #$00			ldx	 	#0
.9ebc					_MPTSCopy:
.9ebc	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9ebf	20 ca 9e	jsr $9eca			jsr 	WriteDecimalBuffer
.9ec2	e8		inx				inx
.9ec3	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9ec6	d0 f4		bne $9ebc			bne 	_MPTSCopy
.9ec8	fa		plx				plx
.9ec9	60		rts				rts
.9eca					WriteDecimalBuffer:
.9eca	da		phx				phx
.9ecb	ae 95 04	ldx $0495			ldx 	dbOffset
.9ece	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9ed1	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9ed4	ee 95 04	inc $0495			inc 	dbOffset
.9ed7	fa		plx				plx
.9ed8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9ed9					Unary_Left:
.9ed9	fa		plx				plx
.9eda	18		clc				clc 								; only one parameter
.9edb	20 50 9f	jsr $9f50			jsr 	SubstringInitial 			; set up.
.9ede	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9ee1	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ee4	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ee7	80 2c		bra $9f15			bra 	SubstringMain
.9ee9					Unary_Right:
.9ee9	fa		plx				plx
.9eea	18		clc				clc 								; only one parameter
.9eeb	20 50 9f	jsr $9f50			jsr 	SubstringInitial 			; set up.
.9eee	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9ef1	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ef4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9ef7	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9efa	b0 02		bcs $9efe			bcs 	_URNotUnderflow
.9efc	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9efe					_URNotUnderFlow:
.9efe	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9f01	80 12		bra $9f15			bra 	SubStringMain
.9f03					Unary_Mid:
.9f03	fa		plx				plx
.9f04	38		sec				sec 								; two parameters
.9f05	20 50 9f	jsr $9f50			jsr 	SubstringInitial 			; set up.
.9f08	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9f0b	f0 05		beq $9f12			beq 	_UMError
.9f0d	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9f10	80 03		bra $9f15			bra 	SubStringMain
.9f12					_UMError:
.9f12	4c a3 ad	jmp $ada3			jmp 	ArgumentError
.9f15					SubStringMain:
.9f15	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9f18	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9f1b	b0 2d		bcs $9f4a			bcs 	_SSMNull 					; if so, return an empty string.
.9f1d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9f20	f0 28		beq $9f4a			beq 	_SSMNull 					; return empty string.
.9f22	18		clc				clc 								; add the offset +1 to the address and
.9f23	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9f26	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9f29	85 36		sta $36				sta 	zTemp0
.9f2b	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9f2e	69 00		adc #$00			adc 	#0
.9f30	85 37		sta $37				sta 	zTemp0+1
.9f32					_SSMNoCarry:
.9f32	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f35	20 bb b0	jsr $b0bb			jsr 	StringTempAllocate 			; allocate that many characters
.9f38	5a		phy				phy 								; save Y
.9f39	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f3b					_SSMCopy:
.9f3b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f3d	f0 09		beq $9f48			beq 	_SSMEString 				; no more to copy
.9f3f	20 f9 b0	jsr $b0f9			jsr 	StringTempWrite 			; and write it out.
.9f42	c8		iny				iny
.9f43	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9f46	d0 f3		bne $9f3b			bne 	_SSMCopy
.9f48					_SSMEString:
.9f48	7a		ply				ply
.9f49					_SSMExit:
.9f49	60		rts				rts
.9f4a					_SSMNull:
.9f4a	a9 00		lda #$00			lda 	#0
.9f4c	20 bb b0	jsr $b0bb			jsr 	StringTempAllocate
.9f4f	60		rts				rts
.9f50					SubstringInitial:
.9f50	da		phx				phx 								; save initial stack position
.9f51	08		php				php 								; save carry on stack indicating 2 parameters
.9f52	20 8c 9f	jsr $9f8c			jsr 	EvaluateString 				; get a string
.9f55	5a		phy				phy 								; calculate length to exponent.
.9f56	a0 ff		ldy #$ff			ldy 	#$FF
.9f58					_SIFindLength:
.9f58	c8		iny				iny
.9f59	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f5b	d0 fb		bne $9f58			bne 	_SIFindLength
.9f5d	98		tya				tya
.9f5e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f61	7a		ply				ply
.9f62	e8		inx				inx
.9f63	20 b6 a7	jsr $a7b6			jsr 	CheckComma 					; comma next
.9f66	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger 		; get next parameter
.9f69	28		plp				plp 								; is it the last parameter ?
.9f6a	90 07		bcc $9f73			bcc 	_SSIExit 					; if so, exit.
.9f6c	e8		inx				inx
.9f6d	20 b6 a7	jsr $a7b6			jsr 	CheckComma 					; comma next
.9f70	20 c5 9f	jsr $9fc5			jsr 	Evaluate8BitInteger 		; get last parameter
.9f73					_SSIExit:
.9f73	fa		plx				plx
.9f74	20 ae a7	jsr $a7ae			jsr 	CheckRightBracket 			; check closing bracket
.9f77	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9f78					EvaluateValue:
.9f78	48		pha				pha
.9f79	20 7e 98	jsr $987e			jsr		EvaluateExpression 			; expression
.9f7c	20 93 99	jsr $9993			jsr 	Dereference					; derefernce it
.9f7f	68		pla				pla
.9f80	60		rts				rts
.9f81					EvaluateNumber:
.9f81	20 78 9f	jsr $9f78			jsr 	EvaluateValue 				; get a value
.9f84	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f87	29 10		and #$10			and 	#NSBIsString
.9f89	d0 16		bne $9fa1			bne 	HelperTypeError
.9f8b	60		rts				rts
.9f8c					EvaluateString:
.9f8c	20 78 9f	jsr $9f78			jsr 	EvaluateValue 				; get a value
.9f8f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f92	29 10		and #$10			and 	#NSBIsString
.9f94	f0 0b		beq $9fa1			beq 	HelperTypeError
.9f96					CopyAddressToTemp0:
.9f96	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9f99	85 36		sta $36				sta 	zTemp0
.9f9b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f9e	85 37		sta $37				sta 	zTemp0+1
.9fa0	60		rts				rts
.9fa1					HelperTypeError:
.9fa1	4c 9e ad	jmp $ad9e			jmp 	TypeError
.9fa4					EvaluateInteger:
.9fa4	20 81 9f	jsr $9f81			jsr 	EvaluateNumber
.9fa7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9faa	d0 0a		bne $9fb6			bne 	HelperValueError 			; if not, it's a float.
.9fac	60		rts				rts
.9fad					EvaluateUnsignedInteger:
.9fad	20 a4 9f	jsr $9fa4			jsr 	EvaluateInteger 			; check integer is +ve
.9fb0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9fb3	30 01		bmi $9fb6			bmi 	HelperValueError
.9fb5	60		rts				rts
.9fb6					HelperValueError:
.9fb6	4c a3 ad	jmp $ada3			jmp 	ArgumentError
.9fb9					Evaluate16BitInteger:
.9fb9	20 ad 9f	jsr $9fad			jsr	 	EvaluateUnsignedInteger		; get integer
.9fbc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9fbf	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9fc2	d0 f2		bne $9fb6			bne 	HelperValueError
.9fc4	60		rts				rts
.9fc5					Evaluate8BitInteger:
.9fc5	20 ad 9f	jsr $9fad			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9fc8	d0 ec		bne $9fb6			bne 	HelperValueError
.9fca	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9fcd	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9fd0	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9fd3	d0 e1		bne $9fb6			bne 	HelperValueError
.9fd5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fd8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ac30					Multiply8x8:
.ac30	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ac31	85 36		sta $36			  	sta 	zTemp0
.ac33	86 37		stx $37				stx 	zTemp0+1
.ac35	a9 00		lda #$00			lda 	#0
.ac37	a2 08		ldx #$08			ldx 	#8
.ac39					_M88Loop:
.ac39	90 03		bcc $ac3e			bcc 	_M88NoAdd
.ac3b	18		clc				clc
.ac3c	65 37		adc $37				adc 	zTemp0+1
.ac3e					_M88NoAdd:
.ac3e	6a		ror a				ror 	a
.ac3f	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ac41	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ac42	d0 f5		bne $ac39			bne 	_M88Loop
.ac44	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ac46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9fd9					NSMNegate:
.9fd9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9fdc	49 80		eor #$80			eor 	#NSBIsNegative
.9fde	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fe1	60		rts				rts
.9fe2					NSMNegateMantissa:
.9fe2	38		sec				sec
.9fe3	a9 00		lda #$00			lda 	#0
.9fe5	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9fe8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9feb	a9 00		lda #$00			lda 	#0
.9fed	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9ff0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ff3	a9 00		lda #$00			lda 	#0
.9ff5	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9ff8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ffb	a9 00		lda #$00			lda 	#0
.9ffd	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a000	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a003	60		rts				rts
.a004					NSMShiftUpTwo:
.a004	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a007	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a00a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a00d	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a010	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a013	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a016	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a019	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a01c	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a01f	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a022	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a025	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a028	60		rts				rts
.a029					NSMSetZeroMantissaOnly:
.a029	a9 00		lda #$00			lda 	#0
.a02b	80 08		bra $a035			bra 	NSMSetMantissa
.a02d					NSMSetZero:
.a02d	a9 00		lda #$00			lda 	#0
.a02f					NSMSetByte:
.a02f	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a032	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a035					NSMSetMantissa:
.a035	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a038	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a03b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a03e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a041	60		rts				rts
.a042					NSMShiftLeft:
.a042	18		clc				clc
.a043					NSMRotateLeft:
.a043	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a046	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a049	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a04c	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a04f	60		rts				rts
.a050					NSMShiftRight:
.a050	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a053	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a056	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a059	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a05c	60		rts				rts
.a05d					NSMIsZero:
.a05d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a060	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a063	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a066	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a069	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ac47					Assemble_ora:
.ac47	20 9f 87	jsr $879f		jsr	AssembleGroup1
>ac4a	01					.byte $01
.ac4b					Assemble_and:
.ac4b	20 9f 87	jsr $879f		jsr	AssembleGroup1
>ac4e	21					.byte $21
.ac4f					Assemble_eor:
.ac4f	20 9f 87	jsr $879f		jsr	AssembleGroup1
>ac52	41					.byte $41
.ac53					Assemble_adc:
.ac53	20 9f 87	jsr $879f		jsr	AssembleGroup1
>ac56	61					.byte $61
.ac57					Assemble_sta:
.ac57	20 9f 87	jsr $879f		jsr	AssembleGroup1
>ac5a	81					.byte $81
.ac5b					Assemble_lda:
.ac5b	20 9f 87	jsr $879f		jsr	AssembleGroup1
>ac5e	a1					.byte $a1
.ac5f					Assemble_cmp:
.ac5f	20 9f 87	jsr $879f		jsr	AssembleGroup1
>ac62	c1					.byte $c1
.ac63					Assemble_sbc:
.ac63	20 9f 87	jsr $879f		jsr	AssembleGroup1
>ac66	e1					.byte $e1
.ac67					Assemble_asl:
.ac67	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac6a	02					.byte $02
>ac6b	75					.byte $75
.ac6c					Assemble_rol:
.ac6c	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac6f	22					.byte $22
>ac70	75					.byte $75
.ac71					Assemble_lsr:
.ac71	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac74	42					.byte $42
>ac75	75					.byte $75
.ac76					Assemble_ror:
.ac76	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac79	62					.byte $62
>ac7a	75					.byte $75
.ac7b					Assemble_stx:
.ac7b	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac7e	82					.byte $82
>ac7f	50					.byte $50
.ac80					Assemble_ldx:
.ac80	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac83	a2					.byte $a2
>ac84	d0					.byte $d0
.ac85					Assemble_dec:
.ac85	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac88	c2					.byte $c2
>ac89	55					.byte $55
.ac8a					Assemble_inc:
.ac8a	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac8d	e2					.byte $e2
>ac8e	55					.byte $55
.ac8f					Assemble_stz:
.ac8f	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac92	60					.byte $60
>ac93	44					.byte $44
.ac94					Assemble_bit:
.ac94	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac97	20					.byte $20
>ac98	55					.byte $55
.ac99					Assemble_sty:
.ac99	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>ac9c	80					.byte $80
>ac9d	54					.byte $54
.ac9e					Assemble_ldy:
.ac9e	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>aca1	a0					.byte $a0
>aca2	d5					.byte $d5
.aca3					Assemble_cpy:
.aca3	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>aca6	c0					.byte $c0
>aca7	d4					.byte $d4
.aca8					Assemble_cpx:
.aca8	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>acab	e0					.byte $e0
>acac	d0					.byte $d0
.acad					Assemble_tsb:
.acad	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>acb0	00					.byte $00
>acb1	50					.byte $50
.acb2					Assemble_trb:
.acb2	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>acb5	10					.byte $10
>acb6	50					.byte $50
.acb7					Assemble_jsr:
.acb7	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>acba	14					.byte $14
>acbb	10					.byte $10
.acbc					Assemble_jmp:
.acbc	20 a6 87	jsr $87a6		jsr	AssembleGroup2
>acbf	40					.byte $40
>acc0	10					.byte $10
.acc1					Assemble_bpl:
.acc1	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>acc4	10					.byte $10
.acc5					Assemble_bmi:
.acc5	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>acc8	30					.byte $30
.acc9					Assemble_bvc:
.acc9	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>accc	50					.byte $50
.accd					Assemble_bvs:
.accd	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>acd0	70					.byte $70
.acd1					Assemble_bcc:
.acd1	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>acd4	90					.byte $90
.acd5					Assemble_bcs:
.acd5	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>acd8	b0					.byte $b0
.acd9					Assemble_bne:
.acd9	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>acdc	d0					.byte $d0
.acdd					Assemble_beq:
.acdd	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>ace0	f0					.byte $f0
.ace1					Assemble_bra:
.ace1	20 f7 87	jsr $87f7		jsr	AssembleGroup3
>ace4	80					.byte $80
.ace5					Assemble_brk:
.ace5	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ace8	00					.byte $00
.ace9					Assemble_php:
.ace9	20 2d 88	jsr $882d		jsr	AssembleGroup4
>acec	08					.byte $08
.aced					Assemble_clc:
.aced	20 2d 88	jsr $882d		jsr	AssembleGroup4
>acf0	18					.byte $18
.acf1					Assemble_plp:
.acf1	20 2d 88	jsr $882d		jsr	AssembleGroup4
>acf4	28					.byte $28
.acf5					Assemble_sec:
.acf5	20 2d 88	jsr $882d		jsr	AssembleGroup4
>acf8	38					.byte $38
.acf9					Assemble_rti:
.acf9	20 2d 88	jsr $882d		jsr	AssembleGroup4
>acfc	40					.byte $40
.acfd					Assemble_pha:
.acfd	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad00	48					.byte $48
.ad01					Assemble_cli:
.ad01	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad04	58					.byte $58
.ad05					Assemble_phy:
.ad05	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad08	5a					.byte $5a
.ad09					Assemble_rts:
.ad09	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad0c	60					.byte $60
.ad0d					Assemble_pla:
.ad0d	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad10	68					.byte $68
.ad11					Assemble_sei:
.ad11	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad14	78					.byte $78
.ad15					Assemble_ply:
.ad15	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad18	7a					.byte $7a
.ad19					Assemble_dey:
.ad19	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad1c	88					.byte $88
.ad1d					Assemble_txa:
.ad1d	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad20	8a					.byte $8a
.ad21					Assemble_tya:
.ad21	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad24	98					.byte $98
.ad25					Assemble_txs:
.ad25	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad28	9a					.byte $9a
.ad29					Assemble_tay:
.ad29	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad2c	a8					.byte $a8
.ad2d					Assemble_tax:
.ad2d	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad30	aa					.byte $aa
.ad31					Assemble_clv:
.ad31	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad34	b8					.byte $b8
.ad35					Assemble_tsx:
.ad35	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad38	ba					.byte $ba
.ad39					Assemble_iny:
.ad39	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad3c	c8					.byte $c8
.ad3d					Assemble_dex:
.ad3d	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad40	ca					.byte $ca
.ad41					Assemble_cld:
.ad41	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad44	d8					.byte $d8
.ad45					Assemble_phx:
.ad45	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad48	da					.byte $da
.ad49					Assemble_stp:
.ad49	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad4c	db					.byte $db
.ad4d					Assemble_inx:
.ad4d	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad50	e8					.byte $e8
.ad51					Assemble_nop:
.ad51	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad54	ea					.byte $ea
.ad55					Assemble_sed:
.ad55	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad58	f8					.byte $f8
.ad59					Assemble_plx:
.ad59	20 2d 88	jsr $882d		jsr	AssembleGroup4
>ad5c	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ad5d					DecimalScalarTable:
>ad5d	66 66 66 66				.dword $66666666 ; 0.1
>ad61	de					.byte $de
>ad62	1f 85 eb 51				.dword $51eb851f ; 0.01
>ad66	db					.byte $db
>ad67	4c 37 89 41				.dword $4189374c ; 0.001
>ad6b	d8					.byte $d8
>ad6c	ac 8b db 68				.dword $68db8bac ; 0.0001
>ad70	d4					.byte $d4
>ad71	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ad75	d1					.byte $d1
>ad76	83 de 1b 43				.dword $431bde83 ; 1e-06
>ad7a	ce					.byte $ce
>ad7b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ad7f	ca					.byte $ca
>ad80	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ad84	c7					.byte $c7
>ad85	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ad89	c4					.byte $c4
>ad8a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ad8e	c0					.byte $c0
>ad8f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ad93	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ad94					SyntaxError:
.ad94	a9 02		lda #$02		lda	#2
.ad96	4c 75 94	jmp $9475		jmp	ErrorHandler
.ad99					RangeError:
.ad99	a9 04		lda #$04		lda	#4
.ad9b	4c 75 94	jmp $9475		jmp	ErrorHandler
.ad9e					TypeError:
.ad9e	a9 05		lda #$05		lda	#5
.ada0	4c 75 94	jmp $9475		jmp	ErrorHandler
.ada3					ArgumentError:
.ada3	a9 07		lda #$07		lda	#7
.ada5	4c 75 94	jmp $9475		jmp	ErrorHandler
.ada8					NotDoneError:
.ada8	a9 0c		lda #$0c		lda	#12
.adaa	4c 75 94	jmp $9475		jmp	ErrorHandler
.adad					ErrorText:
>adad	42 72 65 61 6b 00			.text	"Break",0
>adb3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>adbb	72 72 6f 72 00
>adc0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>adc8	20 62 79 20 7a 65 72 6f 00
>add1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>add9	61 6e 67 65 00
>adde	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ade6	6d 61 74 63 68 00
>adec	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>adf4	65 6d 6f 72 79 00
>adfa	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ae02	61 72 67 75 6d 65 6e 74 00
>ae0b	53 74 6f 70 00				.text	"Stop",0
>ae10	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ae18	6f 6f 20 6c 6f 6e 67 00
>ae20	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ae28	6e 20 66 61 69 6c 65 64 00
>ae31	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ae39	61 74 61 00
>ae3d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ae45	65 6e 74 65 64 00
>ae4b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ae53	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ae5f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ae67	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ae74	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ae7c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ae89	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ae91	68 6f 75 74 20 57 68 69 6c 65 00
>ae9c	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>aea4	68 6f 75 74 20 46 6f 72 00
>aead	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>aeb5	61 63 6b 20 66 75 6c 6c 00
>aebe	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>aec6	75 63 74 75 72 65 00
>aecd	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>aed5	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>aee2	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>aeea	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>aef8	41 72 72 61 79 20 73 69			.text	"Array size",0
>af00	7a 65 00
>af03	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>af0b	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>af13	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1337."
>af1b	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>af2b	32 2e 20 42 75 69 6c 64 20 31 33 33 37 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.af39					EXTPrintCharacter:
.af39	48		pha				pha
.af3a	da		phx				phx
.af3b	5a		phy				phy
.af3c	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.af3f	7a		ply				ply
.af40	fa		plx				plx
.af41	68		pla				pla
.af42	60		rts				rts
.af43					EXTInputSingleCharacter:
.af43	da		phx				phx
.af44	5a		phy				phy
.af45					_EISCWait:
.af45	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.af48	c9 00		cmp #$00			cmp 	#0
.af4a	f0 f9		beq $af45			beq 	_EISCWait
.af4c	7a		ply				ply
.af4d	fa		plx				plx
.af4e	60		rts				rts
.af4f					EXTInputLine:
.af4f	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.af51					_ILLoop:
.af51	da		phx				phx 								; read character in
.af52	20 cf ff	jsr $ffcf			jsr 	$FFCF
.af55	fa		plx				plx
.af56	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.af58	f0 12		beq $af6c			beq 	_ILBackspace
.af5a	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.af5c	f0 15		beq $af73			beq 	_ILExit
.af5e	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.af60	90 ef		bcc $af51			bcc 	_ILLoop
.af62	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.af64	f0 eb		beq $af51			beq 	_ILLoop
.af66	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.af69	e8		inx				inx
.af6a	80 e5		bra $af51			bra 	_ILLoop
.af6c					_ILBackspace:
.af6c	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.af6e	f0 e1		beq $af51			beq 	_ILLoop
.af70	ca		dex				dex 								; back one.
.af71	80 de		bra $af51			bra 	_ILLoop
.af73					_ILExit:
.af73	20 39 af	jsr $af39			jsr 	EXTPrintCharacter
.af76	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.af79	60		rts				rts
.af7a					EXTBreakCheck:
.af7a	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.af7d					MemoryDeleteLine:
.af7d	20 9c af	jsr $af9c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.af80	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.af82	a8		tay				tay
.af83					_MDDLLoop:
.af83	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.af85	92 30		sta ($30)			sta 	(codePtr)
.af87	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.af89	c5 3a		cmp $3a				cmp 	zTemp2
.af8b	d0 07		bne $af94			bne 	_MDLDLNext
.af8d	a5 31		lda $31				lda 	codePtr+1
.af8f	c5 3b		cmp $3b				cmp 	zTemp2+1
.af91	d0 01		bne $af94			bne 	_MDLDLNext
.af93					_MDDLExit:
.af93	60		rts				rts
.af94					_MDLDLNext:
.af94	e6 30		inc $30				inc 	codePtr						; next byte
.af96	d0 eb		bne $af83			bne 	_MDDLLoop
.af98	e6 31		inc $31				inc 	codePtr+1
.af9a	80 e7		bra $af83			bra 	_MDDLLoop
.af9c					IMemoryFindEnd:
.af9c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af9e	85 3a		sta $3a				sta 	0+zTemp2
.afa0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.afa2	85 3b		sta $3b				sta 	1+zTemp2
.afa4					_MDLFELoop:
.afa4	b2 3a		lda ($3a)			lda 	(zTemp2)
.afa6	f0 0b		beq $afb3			beq 	_MDLFEExit
.afa8	18		clc				clc
.afa9	65 3a		adc $3a				adc 	zTemp2
.afab	85 3a		sta $3a				sta 	zTemp2
.afad	90 f5		bcc $afa4			bcc 	_MDLFELoop
.afaf	e6 3b		inc $3b				inc 	zTemp2+1
.afb1	80 f1		bra $afa4			bra 	_MDLFELoop
.afb3					_MDLFEExit:
.afb3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.afb4					MemoryInsertLine:
.afb4	08		php				php
.afb5	20 9c af	jsr $af9c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.afb8	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.afba	1a		inc a				inc 	a
.afbb	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.afbd	b0 36		bcs $aff5			bcs 	_MDLIError
.afbf	28		plp				plp
.afc0	90 08		bcc $afca			bcc 	_MDLIFound
.afc2	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.afc4	85 30		sta $30				sta 	codePtr
.afc6	a5 3b		lda $3b				lda 	zTemp2+1
.afc8	85 31		sta $31				sta 	codePtr+1
.afca					_MDLIFound:
.afca	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.afcd	a8		tay				tay
.afce					_MDLIInsert:
.afce	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.afd0	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.afd2	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.afd4	c5 3a		cmp $3a				cmp 	zTemp2
.afd6	d0 06		bne $afde			bne 	_MDLINext
.afd8	a5 31		lda $31				lda 	codePtr+1
.afda	c5 3b		cmp $3b				cmp 	zTemp2+1
.afdc	f0 0a		beq $afe8			beq 	_MDLIHaveSpace
.afde					_MDLINext:
.afde	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.afe0	d0 02		bne $afe4			bne 	_MDLINoBorrow
.afe2	c6 3b		dec $3b				dec 	zTemp2+1
.afe4					_MDLINoBorrow:
.afe4	c6 3a		dec $3a				dec 	zTemp2
.afe6	80 e6		bra $afce			bra 	_MDLIInsert
.afe8					_MDLIHaveSpace:
.afe8	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.afeb	88		dey				dey 								; from offset-1 to 0
.afec					_MDLICopy:
.afec	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.afef	91 30		sta ($30),y			sta 	(codePtr),y
.aff1	88		dey				dey
.aff2	10 f8		bpl $afec			bpl 	_MDLICopy
.aff4	60		rts				rts
.aff5					_MDLIError:
.aff5	a9 06		lda #$06		lda	#6
.aff7	4c 75 94	jmp $9475		jmp	ErrorHandler
.affa					MDLAppendLine:
.affa	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.affc	85 36		sta $36				sta 	zTemp0
.affe	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b000	85 38		sta $38				sta 	0+zTemp1
.b002	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b004	85 39		sta $39				sta 	1+zTemp1
.b006	b2 38		lda ($38)			lda 	(zTemp1)
.b008	d0 0a		bne $b014			bne 	_MDLANoInitialise
.b00a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b00c	8d 5d 06	sta $065d			sta 	0+AppendPointer
.b00f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b011	8d 5e 06	sta $065e			sta 	1+AppendPointer
.b014					_MDLANoInitialise:
.b014	18		clc				clc
.b015	ad 5d 06	lda $065d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b018	85 38		sta $38				sta 	zTemp1
.b01a	72 36		adc ($36)			adc 	(zTemp0)
.b01c	8d 5d 06	sta $065d			sta 	AppendPointer
.b01f	ad 5e 06	lda $065e			lda 	AppendPointer+1
.b022	85 39		sta $39				sta 	zTemp1+1
.b024	69 00		adc #$00			adc 	#0
.b026	8d 5e 06	sta $065e			sta 	AppendPointer+1
.b029	a0 00		ldy #$00			ldy 	#0
.b02b					_MDLACopy:
.b02b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b02d	91 38		sta ($38),y			sta 	(zTemp1),y
.b02f	c8		iny				iny
.b030	98		tya				tya
.b031	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b033	d0 f6		bne $b02b			bne 	_MDLACopy
.b035	a9 00		lda #$00			lda 	#0 							; end of program.
.b037	91 38		sta ($38),y			sta 	(zTemp1),y
.b039	60		rts				rts
.065d					AppendPointer:
>065d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a06a					MemoryNew:
.a06a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a06c	85 30		sta $30				sta 	codePtr
.a06e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a070	85 31		sta $31				sta 	codePtr+1
.a072	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a074	92 30		sta ($30)			sta 	(codePtr)
.a076	60		rts				rts
.a077					MemoryInline:
.a077	98		tya				tya 								; put address into stack,x
.a078	18		clc				clc
.a079	65 30		adc $30				adc 	codePtr
.a07b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a07e	a5 31		lda $31				lda 	codePtr+1
.a080	69 00		adc #$00			adc 	#0
.a082	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a085	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a088	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a08b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a08c					MemorySearch:
.a08c	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a08e	86 37		stx $37				stx 	zTemp0+1
.a090	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a092	85 30		sta $30				sta 	codePtr
.a094	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a096	85 31		sta $31				sta 	codePtr+1
.a098					_MTAXLoop:
.a098	b2 30		lda ($30)			lda 	(codePtr)
.a09a	18		clc				clc
.a09b	f0 21		beq $a0be			beq 	_MTAXExit 					; reached end, exit with CC.
.a09d	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a09f	b1 30		lda ($30),y			lda 	(codePtr),y
.a0a1	38		sec				sec
.a0a2	e5 36		sbc $36				sbc 	zTemp0
.a0a4	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a0a6	c8		iny				iny 								; do the MSB
.a0a7	b1 30		lda ($30),y			lda 	(codePtr),y
.a0a9	e5 37		sbc $37				sbc 	zTemp0+1
.a0ab	05 38		ora $38				ora 	zTemp1
.a0ad	f0 0f		beq $a0be			beq 	_MTAXExit	 				; found
.a0af	b0 0d		bcs $a0be			bcs 	_MTAXExit 					; current < required exit
.a0b1	18		clc				clc
.a0b2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a0b4	65 30		adc $30				adc 	codePtr
.a0b6	85 30		sta $30				sta 	codePtr
.a0b8	90 02		bcc $a0bc			bcc 	_CREExit
.a0ba	e6 31		inc $31				inc 	codePtr+1
.a0bc					_CREExit:
.a0bc	80 da		bra $a098			bra 	_MTAXLoop
.a0be					_MTAXExit:
.a0be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a0bf					StackPushByte:
.a0bf	48		pha				pha 								; save byte
.a0c0	a5 34		lda $34				lda 	BasicStack
.a0c2	d0 09		bne $a0cd			bne 	_SPBNoBorrow
.a0c4	c6 35		dec $35				dec 	BasicStack+1
.a0c6	48		pha				pha
.a0c7	a5 35		lda $35				lda 	BasicStack+1
.a0c9	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a0cb	90 06		bcc $a0d3			bcc 	_SPBMemory
.a0cd					_SPBNoBorrow:
.a0cd	c6 34		dec $34				dec 	BasicStack
.a0cf	68		pla				pla 								; get back and write
.a0d0	92 34		sta ($34)			sta 	(BasicStack)
.a0d2	60		rts				rts
.a0d3					_SPBMemory:
.a0d3	a9 12		lda #$12		lda	#18
.a0d5	4c 75 94	jmp $9475		jmp	ErrorHandler
.a0d8					StackPopByte:
.a0d8	b2 34		lda ($34)			lda 	(BasicStack)
.a0da	e6 34		inc $34				inc 	BasicStack
.a0dc	d0 02		bne $a0e0			bne 	_SPBNoCarry
.a0de	e6 35		inc $35				inc 	BasicStack+1
.a0e0					_SPBNoCarry:
.a0e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a0e1					StackOpen:
.a0e1	48		pha				pha 								; save frame byte
.a0e2	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a0e4	0a		asl a				asl 	a 							; claim twice this for storage
.a0e5	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a0e7	38		sec				sec 								; so basically subtracting from
.a0e8	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a0ea	85 34		sta $34				sta 	basicStack
.a0ec	b0 08		bcs $a0f6			bcs 	_SONoBorrow
.a0ee	c6 35		dec $35				dec 	basicStack+1
.a0f0	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a0f2	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a0f4	90 04		bcc $a0fa			bcc 	_SOMemory
.a0f6					_SONoBorrow:
.a0f6	68		pla				pla 								; get marker back and write at TOS
.a0f7	92 34		sta ($34)			sta 	(basicStack)
.a0f9	60		rts				rts
.a0fa					_SOMemory:
.a0fa	a9 12		lda #$12		lda	#18
.a0fc	4c 75 94	jmp $9475		jmp	ErrorHandler
.a0ff					StackClose:
.a0ff	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a101	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a103	0a		asl a				asl 	a 							; claim twice this.
.a104	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a106	85 34		sta $34				sta 	basicStack
.a108	90 02		bcc $a10c			bcc 	_SCExit
.a10a	e6 35		inc $35				inc 	basicStack+1
.a10c					_SCExit:
.a10c	60		rts				rts
.a10d					StackCheckFrame:
.a10d	48		pha				pha
.a10e					_StackRemoveLocals:
.a10e	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a110	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a112	b0 05		bcs $a119			bcs 	_SCNoLocal
.a114	20 55 a7	jsr $a755			jsr 	LocalPopValue
.a117	80 f5		bra $a10e			bra 	_StackRemoveLocals
.a119					_SCNoLocal:
.a119	68		pla				pla
.a11a	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a11c	29 f0		and #$f0			and 	#$F0 						; check type bits
.a11e	d0 01		bne $a121			bne 	_SCFError 					; different, we have structures mixed up
.a120	60		rts				rts
.a121					_SCFError:
.a121	8a		txa				txa 								; report error X
.a122	4c 75 94	jmp $9475			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a125					STKSaveCodePosition:
.a125	5a		phy				phy
.a126	98		tya				tya 								; save Y
.a127	a0 05		ldy #$05			ldy 	#5
.a129	91 34		sta ($34),y			sta 	(basicStack),y
.a12b	88		dey				dey 								; save Code Pointer
.a12c					_STKSaveLoop:
.a12c	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a12f	91 34		sta ($34),y			sta 	(basicStack),y
.a131	88		dey				dey
.a132	d0 f8		bne $a12c			bne 	_STKSaveLoop
.a134	7a		ply				ply
.a135	60		rts				rts
.a136					STKLoadCodePosition:
.a136	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a138					_STKLoadLoop:
.a138	b1 34		lda ($34),y			lda 	(basicStack),y
.a13a	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a13d	c8		iny				iny
.a13e	c0 05		cpy #$05			cpy 	#5
.a140	d0 f6		bne $a138			bne 	_STKLoadLoop
.a142	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a144	a8		tay				tay
.a145	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a146					StackReset:
.a146	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a148	85 34		sta $34				sta 	0+basicStack
.a14a	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a14c	85 35		sta $35				sta 	1+basicStack
.a14e	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a150	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a152	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b03a					StringConcrete:
.b03a	5a		phy				phy 								; save position on stack
.b03b	20 3c 9d	jsr $9d3c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b03e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b041	85 38		sta $38				sta 	zTemp1
.b043	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b046	85 39		sta $39				sta 	zTemp1+1
.b048	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b04a					_SALength:
.b04a	c8		iny				iny
.b04b	b1 38		lda ($38),y			lda 	(zTemp1),y
.b04d	d0 fb		bne $b04a			bne 	_SALength
.b04f	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b051	b0 3f		bcs $b092			bcs 	_SALengthError
.b053	98		tya				tya 				 				; length of the new string
.b054	18		clc				clc
.b055	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b057	90 02		bcc $b05b			bcc 	_SAHaveLength
.b059	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b05b					_SAHaveLength:
.b05b	48		pha				pha 								; save length.
.b05c	38		sec				sec
.b05d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b05f	6d 8e 04	adc $048e			adc 	StringMemory
.b062	8d 8e 04	sta $048e			sta 	StringMemory
.b065	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b067	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b06a	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b06c	6d 8f 04	adc $048f			adc 	StringMemory+1
.b06f	8d 8f 04	sta $048f			sta 	StringMemory+1
.b072	85 3b		sta $3b				sta 	zTemp2+1
.b074	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b077	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b078	38		sec				sec
.b079	e9 03		sbc #$03			sbc 	#3
.b07b	92 3a		sta ($3a)			sta 	(zTemp2)
.b07d	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b07f	a0 01		ldy #$01			ldy 	#1
.b081	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b083					_SACopyNewString:
.b083	a0 00		ldy #$00			ldy 	#0
.b085					_SACopyNSLoop:
.b085	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b087	c8		iny				iny 								; write two on in string storage
.b088	c8		iny				iny
.b089	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b08b	88		dey				dey 								; this makes it one one.
.b08c	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b08e	d0 f5		bne $b085			bne 	_SACopyNSLoop
.b090	7a		ply				ply
.b091	60		rts				rts
.b092					_SALengthError:
.b092	a9 09		lda #$09		lda	#9
.b094	4c 75 94	jmp $9475		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b097					StringSystemInitialise:
.b097	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b099	8d 8e 04	sta $048e			sta 	0+StringMemory
.b09c	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b09e	8d 8f 04	sta $048f			sta 	1+StringMemory
.b0a1	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b0a4	60		rts				rts
.b0a5					StringSpaceInitialise:
.b0a5	20 3c 9d	jsr $9d3c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b0a8	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b0aa	8d 90 04	sta $0490			sta 	StringInitialised
.b0ad	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b0b0	8d 91 04	sta $0491			sta 	StringTempPointer
.b0b3	ad 8f 04	lda $048f			lda 	StringMemory+1
.b0b6	3a		dec a				dec 	a
.b0b7	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b0ba	60		rts				rts
.b0bb					StringTempAllocate:
.b0bb	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b0bd	b0 35		bcs $b0f4			bcs 	_STALength
.b0bf	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b0c2	30 05		bmi $b0c9			bmi 	_STAAllocate
.b0c4	48		pha				pha 								; save value to subtract.
.b0c5	20 a5 b0	jsr $b0a5			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b0c8	68		pla				pla 								; restore it
.b0c9					_STAAllocate:
.b0c9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b0cb	18		clc				clc  								; deliberate allows one more
.b0cc	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b0cf	8d 91 04	sta $0491			sta 	StringTempPointer
.b0d2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b0d5	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b0d7	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b0da	69 ff		adc #$ff			adc 	#$FF
.b0dc	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b0df	85 3d		sta $3d				sta 	zsTemp+1
.b0e1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b0e4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b0e7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b0ea	a9 10		lda #$10			lda 	#NSTString
.b0ec	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0ef	a9 00		lda #$00			lda 	#0 							; clear the target string
.b0f1	92 3c		sta ($3c)			sta 	(zsTemp)
.b0f3	60		rts				rts
.b0f4					_STALength:
.b0f4	a9 09		lda #$09		lda	#9
.b0f6	4c 75 94	jmp $9475		jmp	ErrorHandler
.b0f9					StringTempWrite:
.b0f9	48		pha				pha
.b0fa	92 3c		sta ($3c)			sta 	(zsTemp)
.b0fc	e6 3c		inc $3c				inc 	zsTemp
.b0fe	d0 02		bne $b102			bne 	_STWNoCarry
.b100	e6 3d		inc $3d				inc 	zsTemp+1
.b102					_STWNoCarry:
.b102	a9 00		lda #$00			lda 	#0
.b104	92 3c		sta ($3c)			sta 	(zsTemp)
.b106	68		pla				pla
.b107	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a153					BackloadProgram:
.a153	a2 ff		ldx #$ff			ldx 	#$FF
.a155	20 7d a1	jsr $a17d			jsr 	BLReadByte
.a158	30 1f		bmi $a179			bmi 	_BPExit
.a15a					_BPCopy:
.a15a	e8		inx				inx  								; copy byte in
.a15b	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a15e	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a161	20 7d a1	jsr $a17d			jsr 	BLReadByte 					; read next byte
.a164	30 0a		bmi $a170			bmi 	_BPEndLine 					; -ve = EOL
.a166	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a168	d0 02		bne $a16c			bne 	_BPNotTab
.a16a	a9 20		lda #$20			lda 	#' '
.a16c					_BPNotTab:
.a16c	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a16e	b0 ea		bcs $a15a			bcs 	_BPCopy
.a170					_BPEndLine:
.a170	20 a6 a4	jsr $a4a6			jsr 	TokeniseLine 				; tokenise the line.
.a173	38		sec				sec 								; append not insert
.a174	20 b4 af	jsr $afb4			jsr 	MemoryInsertLine 			; append to current program
.a177	80 da		bra $a153			bra 	BackloadProgram
.a179					_BPExit:
.a179	20 a5 8a	jsr $8aa5			jsr 	ClearCommand 				; clear variables etc.
.a17c	60		rts				rts
.a17d					BLReadByte:
.a17d					_BLLoad:
.a17d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a180	ee 7e a1	inc $a17e			inc 	_BLLoad+1
.a183	d0 03		bne $a188			bne 	_BLNoCarry
.a185	ee 7f a1	inc $a17f			inc 	_BLLoad+2
.a188					_BLNoCarry:
.a188	c9 00		cmp #$00			cmp 	#0
.a18a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a18b					TokeniseSearchTable:
.a18b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a18d	85 36		sta $36				sta 	zTemp0
.a18f	a0 00		ldy #$00			ldy 	#0
.a191	a9 80		lda #$80			lda 	#$80 						; token #
.a193	85 38		sta $38				sta 	zTemp1
.a195					_TSTLoop:
.a195	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a197	30 49		bmi $a1e2			bmi 	_TSTFail 					; -ve = end of table
.a199	f0 2e		beq $a1c9			beq 	_TSTNext 					; zero, check next it's a dummy
.a19b	c8		iny				iny 								; get the hash
.a19c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a19e	88		dey				dey
.a19f	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a1a2	d0 25		bne $a1c9			bne 	_TSTNext
.a1a4	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a1a7	38		sec				sec
.a1a8	ed 80 04	sbc $0480			sbc 	identStart
.a1ab	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a1ad	d0 1a		bne $a1c9			bne 	_TSTNext
.a1af	5a		phy				phy 								; save Y , we might fail
.a1b0	c8		iny				iny 								; point to text
.a1b1	c8		iny				iny
.a1b2	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a1b5					_TSTCompareName:
.a1b5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a1b8	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a1ba	d0 0c		bne $a1c8			bne 	_TSTNextPullY 				; fail, pullY and do next
.a1bc	e8		inx				inx
.a1bd	c8		iny				iny
.a1be	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a1c1	d0 f2		bne $a1b5			bne 	_TSTCompareName
.a1c3	7a		ply				ply 								; throw Y
.a1c4	a5 38		lda $38				lda 	zTemp1 						; get token #
.a1c6	38		sec				sec 								; return with CS = passed.
.a1c7	60		rts				rts
.a1c8					_TSTNextPullY:
.a1c8	7a		ply				ply 								; restore current, fall through.
.a1c9					_TSTNext:
.a1c9	e6 38		inc $38				inc 	zTemp1 						; token counter
.a1cb	98		tya				tya
.a1cc	18		clc				clc
.a1cd	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a1cf	1a		inc a				inc 	a 							; +1
.a1d0	1a		inc a				inc 	a 							; +2
.a1d1	a8		tay				tay
.a1d2	10 c1		bpl $a195			bpl 	_TSTLoop 					; if Y < $80 loop back
.a1d4	98		tya				tya 								; add Y to zTemp0 and reset Y
.a1d5	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a1d7	18		clc				clc  								; but have tables > 255 bytes
.a1d8	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a1da	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a1dc	90 b7		bcc $a195			bcc 	_TSTLoop
.a1de	e6 37		inc $37				inc 	zTemp0+1
.a1e0	80 b3		bra $a195			bra 	_TSTLoop
.a1e2					_TSTFail:
.a1e2	18		clc				clc
.a1e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a1e4					KeywordSet0:
>a1e4	00 65					.text	0,$65,""               ; $80 !0:EOF
>a1e6	00 58					.text	0,$58,""               ; $81 !1:SH1
>a1e8	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a1ea	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a1f0	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a1f8	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a1fe	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a205	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a20c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a213	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a219	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a221	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a229	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a22f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a236	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a23c	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a244	28
>a245	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a24d	28
>a24e	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a254	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a25a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a260	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a267	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a26d	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a273	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a278	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a27c	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a282	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a28a	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a291	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a298	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a2a0	43
>a2a1	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a2a7	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a2ad	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a2b4	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a2ba	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a2c0	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a2c5	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a2cb	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a2d0	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a2d8	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a2de	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a2e5	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a2eb	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a2f0	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a2f7	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a2fe	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a304	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a309	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a311	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a315	ff					.text	$FF
.a316					KeywordSet1:
>a316	00 65					.text	0,$65,""               ; $80 !0:EOF
>a318	00 58					.text	0,$58,""               ; $81 !1:SH1
>a31a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a31c	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a324	4c 45
>a326	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a32e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a335	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a33a	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a340	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a345	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a34d	45
>a34e	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a353	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a359	ff					.text	$FF
.a35a					KeywordSet2:
>a35a	00 65					.text	0,$65,""               ; $80 !0:EOF
>a35c	00 58					.text	0,$58,""               ; $81 !1:SH1
>a35e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a360	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a365	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a36a	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a36f	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a374	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a379	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a37e	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a383	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a388	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a38d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a392	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a397	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a39c	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a3a1	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a3a6	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a3ab	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a3b0	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a3b5	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a3ba	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a3bf	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a3c4	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a3c9	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a3ce	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a3d3	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a3d8	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a3dd	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a3e2	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a3e7	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a3ec	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a3f1	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a3f6	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a3fb	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a400	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a405	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a40a	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a40f	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a414	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a419	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a41e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a423	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a428	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a42d	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a432	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a437	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a43c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a441	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a446	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a44b	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a450	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a455	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a45a	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a45f	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a464	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a469	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a46e	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a473	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a478	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a47d	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a482	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a487	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a48c	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a491	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a496	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a49b	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a4a0	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a4a5	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a4a6					TokeniseLine:
.a4a6	20 2e a6	jsr $a62e			jsr 	FixLineBufferCase 			; fix line case
.a4a9	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a4ab	8d a6 04	sta $04a6			sta 	tokenOffset
.a4ae	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a4b1	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a4b4	a2 ff		ldx #$ff			ldx 	#$FF
.a4b6					_TKFindFirst:
.a4b6	e8		inx				inx
.a4b7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a4ba	f0 79		beq $a535			beq 	_TKExit
.a4bc	c9 20		cmp #$20			cmp 	#' '
.a4be	90 f6		bcc $a4b6			bcc 	_TKFindFirst
.a4c0	c9 30		cmp #$30			cmp 	#'0'
.a4c2	90 07		bcc $a4cb			bcc 	_TKNoLineNumber
.a4c4	c9 3a		cmp #$3a			cmp 	#'9'+1
.a4c6	b0 03		bcs $a4cb			bcs 	_TKNoLineNumber
.a4c8	20 58 a6	jsr $a658			jsr 	TokeniseExtractLineNumber
.a4cb					_TKNoLineNumber:
.a4cb					_TKTokeniseLoop:
.a4cb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a4ce	f0 65		beq $a535			beq 	_TKExit
.a4d0	e8		inx				inx
.a4d1	c9 20		cmp #$20			cmp 	#' '
.a4d3	f0 f6		beq $a4cb			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a4d5	ca		dex				dex 								; undo last get, A contains character, X is position.
.a4d6	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a4d8	f0 61		beq $a53b			beq 	_TKTokeniseIdentifier
.a4da	c9 41		cmp #$41			cmp 	#'A'
.a4dc	90 04		bcc $a4e2			bcc 	_TKTokenisePunctuation
.a4de	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a4e0	90 59		bcc $a53b			bcc 	_TKTokeniseIdentifier
.a4e2					_TKTokenisePunctuation:
.a4e2	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a4e4	f0 27		beq $a50d			beq 	_TKString
.a4e6	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a4e8	f0 28		beq $a512			beq 	_TKHexConstant
.a4ea	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a4ec	f0 29		beq $a517			beq 	_TKCheckDouble
.a4ee	c9 3e		cmp #$3e			cmp 	#'>'
.a4f0	f0 25		beq $a517			beq 	_TKCheckDouble
.a4f2					_TKStandardPunctuation:
.a4f2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a4f5	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a4f7	90 0e		bcc $a507			bcc 	_TKNoShift
.a4f9	48		pha				pha 								; save
.a4fa	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a4fc	85 36		sta $36				sta 	zTemp0
.a4fe	68		pla				pla
.a4ff	29 20		and #$20			and 	#32 						; bit 5
.a501	4a		lsr a				lsr 	a 							; shift into bit 3
.a502	4a		lsr a				lsr 	a
.a503	05 36		ora $36				ora 	zTemp0
.a505	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a507					_TKNoShift:
.a507	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte 			; write the punctuation character
.a50a	e8		inx				inx 								; consume the character
.a50b	80 be		bra $a4cb			bra 	_TKTokeniseLoop 			; and loop round again.
.a50d					_TKString:
.a50d	20 bd a5	jsr $a5bd			jsr 	TokeniseString
.a510	80 b9		bra $a4cb			bra 	_TKTokeniseLoop
.a512					_TKHexConstant:
.a512	20 f8 a5	jsr $a5f8			jsr 	TokeniseHexConstant
.a515	80 b4		bra $a4cb			bra 	_TKTokeniseLoop
.a517					_TKCheckDouble:
.a517	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a51a	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a51c	90 d4		bcc $a4f2			bcc 	_TKStandardPunctuation
.a51e	c9 3f		cmp #$3f			cmp 	#'>'+1
.a520	b0 d0		bcs $a4f2			bcs 	_TKStandardPunctuation
.a522	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a525	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a527	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a528	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a52b	38		sec				sec
.a52c	e9 3c		sbc #$3c			sbc 	#'<'
.a52e	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a531	e8		inx				inx 								; consume both
.a532	e8		inx				inx
.a533	80 96		bra $a4cb			bra 	_TKTokeniseLoop
.a535	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a537	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a53a	60		rts				rts
.a53b					_TKTokeniseIdentifier:
.a53b	8e 80 04	stx $0480			stx 	identStart 					; save start
.a53e	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a541					_TKCheckLoop:
.a541	e8		inx				inx 								; look at next, we know first is identifier.
.a542	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a545	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a547	f0 f8		beq $a541			beq 	_TKCheckLoop
.a549	c9 30		cmp #$30			cmp	 	#"0"
.a54b	90 0c		bcc $a559			bcc 	_TKEndIdentifier
.a54d	c9 3a		cmp #$3a			cmp 	#"9"+1
.a54f	90 f0		bcc $a541			bcc 	_TKCheckLoop
.a551	c9 41		cmp #$41			cmp	 	#"A"
.a553	90 04		bcc $a559			bcc 	_TKEndIdentifier
.a555	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a557	90 e8		bcc $a541			bcc 	_TKCheckLoop
.a559					_TKEndIdentifier:
.a559	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a55c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a55e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a560	f0 06		beq $a568			beq 	_TKHasTypeCharacter
.a562	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a564	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a566	d0 07		bne $a56f			bne 	_TKNoTypeCharacter
.a568					_TKHasTypeCharacter:
.a568	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a56b	e8		inx				inx 								; read next
.a56c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a56f					_TKNoTypeCharacter:
.a56f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a571	d0 09		bne $a57c			bne 	_TKNoArray
.a573	e8		inx				inx 								; skip the (
.a574	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a577	09 04		ora #$04			ora 	#$04
.a579	8d 84 04	sta $0484			sta 	identTypeByte
.a57c					_TKNoArray:
.a57c	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a57f	20 19 a6	jsr $a619			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a582	a0 a1		ldy #$a1			ldy 	#(KeywordSet0) >> 8
.a584	a9 e4		lda #$e4			lda 	#(KeywordSet0) & $FF
.a586	20 8b a1	jsr $a18b			jsr 	TokeniseSearchTable
.a589	a2 00		ldx #$00			ldx 	#0
.a58b	b0 1f		bcs $a5ac			bcs 	_TKFoundToken
.a58d	a0 a3		ldy #$a3			ldy 	#(KeywordSet1) >> 8
.a58f	a9 16		lda #$16			lda 	#(KeywordSet1) & $FF
.a591	20 8b a1	jsr $a18b			jsr 	TokeniseSearchTable
.a594	a2 81		ldx #$81			ldx 	#$81
.a596	b0 14		bcs $a5ac			bcs 	_TKFoundToken
.a598	a0 a3		ldy #$a3			ldy 	#(KeywordSet2) >> 8
.a59a	a9 5a		lda #$5a			lda 	#(KeywordSet2) & $FF
.a59c	20 8b a1	jsr $a18b			jsr 	TokeniseSearchTable
.a59f	a2 82		ldx #$82			ldx 	#$82
.a5a1	b0 09		bcs $a5ac			bcs 	_TKFoundToken
.a5a3	20 a9 a6	jsr $a6a9			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a5a6	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a5a9	4c cb a4	jmp $a4cb			jmp 	_TKTokeniseLoop 			; and go round again.
.a5ac					_TKFoundToken:
.a5ac	48		pha				pha 								; save token
.a5ad	8a		txa				txa 								; shift in X, is there one ?
.a5ae	f0 03		beq $a5b3			beq 	_TKNoTShift
.a5b0	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte 			; if so, write it out
.a5b3					_TKNoTShift:
.a5b3	68		pla				pla 								; restore and write token
.a5b4	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a5b7	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a5ba	4c cb a4	jmp $a4cb			jmp 	_TKTokeniseLoop 			; and go round again.
.a5bd					TokeniseString:
.a5bd	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a5bf	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a5c2	e8		inx				inx									; start of quoted string.
.a5c3	da		phx				phx 								; push start of string on top
.a5c4	ca		dex				dex
.a5c5					_TSFindEnd:
.a5c5	e8		inx				inx
.a5c6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a5c9	f0 04		beq $a5cf			beq 	_TSEndOfString
.a5cb	c9 22		cmp #$22			cmp 	#'"'
.a5cd	d0 f6		bne $a5c5			bne 	_TSFindEnd
.a5cf					_TSEndOfString:
.a5cf	7a		ply				ply  								; so now Y is first character, X is character after end.
.a5d0	48		pha				pha 								; save terminating character
.a5d1	20 d9 a5	jsr $a5d9			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a5d4	68		pla				pla 								; terminating character
.a5d5	f0 01		beq $a5d8			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a5d7	e8		inx				inx
.a5d8					_TSNotQuote:
.a5d8	60		rts				rts
.a5d9					TOWriteBlockXY:
.a5d9	86 36		stx $36				stx 	zTemp0 						; write end character
.a5db	98		tya				tya
.a5dc	49 ff		eor #$ff			eor 	#$FF
.a5de	38		sec				sec
.a5df	65 36		adc $36				adc 	zTemp0
.a5e1	1a		inc a				inc 	a 							; one extra for NULL
.a5e2	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a5e5					_TOBlockLoop:
.a5e5	c4 36		cpy $36				cpy 	zTemp0
.a5e7	f0 09		beq $a5f2			beq 	_TOBlockExit
.a5e9	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a5ec	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a5ef	c8		iny				iny
.a5f0	80 f3		bra $a5e5			bra 	_TOBlockLoop
.a5f2					_TOBlockExit:
.a5f2	a9 00		lda #$00			lda 	#0
.a5f4	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a5f7	60		rts				rts
.a5f8					TokeniseHexConstant:
.a5f8	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a5fa	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a5fd	e8		inx				inx									; start of quoted string.
.a5fe	da		phx				phx 								; push start of constant on top
.a5ff	ca		dex				dex
.a600					_THFindLoop:
.a600	e8		inx				inx
.a601	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a604	c9 30		cmp #$30			cmp 	#"0"
.a606	90 0c		bcc $a614			bcc 	_THFoundEnd
.a608	c9 3a		cmp #$3a			cmp 	#"9"+1
.a60a	90 f4		bcc $a600			bcc 	_THFindLoop
.a60c	c9 41		cmp #$41			cmp 	#"A"
.a60e	90 04		bcc $a614			bcc 	_THFoundEnd
.a610	c9 47		cmp #$47			cmp 	#"F"+1
.a612	90 ec		bcc $a600			bcc 	_THFindLoop
.a614					_THFoundEnd:
.a614	7a		ply				ply 								; restore start
.a615	20 d9 a5	jsr $a5d9			jsr 	TOWriteBlockXY 				; output the block
.a618	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a619					TokeniseCalculateHash:
.a619	da		phx				phx
.a61a	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a61d	a9 00		lda #$00			lda 	#0
.a61f					_TCHLoop:
.a61f	18		clc				clc
.a620	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a623	e8		inx				inx
.a624	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a627	d0 f6		bne $a61f			bne 	_TCHLoop
.a629	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a62c	fa		plx				plx
.a62d	60		rts				rts
.a62e					FixLineBufferCase:
.a62e	a2 00		ldx #$00			ldx 	#0
.a630					_FLBCLoop:
.a630	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a633	f0 22		beq $a657			beq 	_FLBCExit 					; end of string.
.a635	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a637	f0 11		beq $a64a			beq 	_FLBCInQuotes
.a639	e8		inx				inx
.a63a	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a63c	90 f2		bcc $a630			bcc 	_FLBCLoop
.a63e	c9 7b		cmp #$7b			cmp 	#'z'+1
.a640	b0 ee		bcs $a630			bcs 	_FLBCLoop
.a642	38		sec				sec 								; make U/C
.a643	e9 20		sbc #$20			sbc 	#32
.a645	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a648	80 e6		bra $a630			bra 	_FLBCLoop
.a64a					_FLBCInQuotes:
.a64a	e8		inx				inx 								; advance
.a64b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a64e	f0 07		beq $a657			beq 	_FLBCExit 					; exit on EOS
.a650	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a652	d0 f6		bne $a64a			bne 	_FLBCInQuotes
.a654	e8		inx				inx 								; skip over it
.a655	80 d9		bra $a630			bra 	_FLBCLoop
.a657					_FLBCExit:
.a657	60		rts				rts
.a658					TokeniseExtractLineNumber:
.a658	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a65b	48		pha				pha
.a65c	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a65f	48		pha				pha
.a660	20 96 a6	jsr $a696			jsr 	_TELNTimes2 				; line # x 4
.a663	20 96 a6	jsr $a696			jsr 	_TELNTimes2 				; line # x 2
.a666	18		clc				clc 								; add stacked value
.a667	68		pla				pla
.a668	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a66b	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a66e	68		pla				pla
.a66f	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a672	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a675	20 96 a6	jsr $a696			jsr 	_TELNTimes2 				; line # x 10
.a678	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a67b	e8		inx				inx
.a67c	29 0f		and #$0f			and 	#15 						; add to line #
.a67e	18		clc				clc
.a67f	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a682	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a685	90 03		bcc $a68a			bcc 	_TLENNoCarry
.a687	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a68a					_TLENNoCarry:
.a68a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a68d	c9 30		cmp #$30			cmp 	#'0'
.a68f	90 04		bcc $a695			bcc 	_TLENExit
.a691	c9 3a		cmp #$3a			cmp 	#'9'+1
.a693	90 c3		bcc $a658			bcc 	TokeniseExtractLineNumber
.a695					_TLENExit:
.a695	60		rts				rts
.a696					_TELNTimes2:
.a696	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a699	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a69c	60		rts				rts
.a69d					TokeniseWriteByte:
.a69d	da		phx				phx
.a69e	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a6a1	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a6a4	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a6a7	fa		plx				plx
.a6a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a6a9					CheckCreateVariableRecord:
.a6a9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a6ab	85 36		sta $36				sta 	0+zTemp0
.a6ad	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a6af	85 37		sta $37				sta 	1+zTemp0
.a6b1					_CCVSearch:
.a6b1	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a6b3	f0 2c		beq $a6e1			beq 	_CCVFail
.a6b5	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a6b7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a6b9	cd 83 04	cmp $0483			cmp 	identHash
.a6bc	d0 16		bne $a6d4			bne 	_CCVNext
.a6be	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a6c0	ae 80 04	ldx $0480			ldx 	identStart
.a6c3					_CCVCompare:
.a6c3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a6c6	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a6c8	e8		inx				inx 								; advance pointers
.a6c9	c8		iny				iny
.a6ca	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a6cb	d0 07		bne $a6d4			bne 	_CCVNext  					; didn't match go to next.
.a6cd	90 f4		bcc $a6c3			bcc 	_CCVCompare 				; not finished yet.
.a6cf	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a6d2	f0 41		beq $a715			beq 	_CCVFound 					; yes, we were successful
.a6d4					_CCVNext:
.a6d4	18		clc				clc
.a6d5	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a6d7	65 36		adc $36				adc 	zTemp0
.a6d9	85 36		sta $36				sta 	zTemp0
.a6db	90 d4		bcc $a6b1			bcc 	_CCVSearch
.a6dd	e6 37		inc $37				inc 	zTemp0+1
.a6df	80 d0		bra $a6b1			bra 	_CCVSearch
.a6e1					_CCVFail:
.a6e1	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a6e3	ad 83 04	lda $0483			lda 	identHash
.a6e6	91 36		sta ($36),y			sta 	(zTemp0),y
.a6e8	c8		iny				iny 								; offset 2 is the type byte
.a6e9	ad 84 04	lda $0484			lda 	identTypeByte
.a6ec	91 36		sta ($36),y			sta 	(zTemp0),y
.a6ee	c8		iny				iny
.a6ef					_CCVData:
.a6ef	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a6f1	91 36		sta ($36),y			sta 	(zTemp0),y
.a6f3	c8		iny				iny
.a6f4	c0 08		cpy #$08			cpy 	#8
.a6f6	90 f7		bcc $a6ef			bcc 	_CCVData
.a6f8	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a6fb					_CCVCopyName:
.a6fb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a6fe	91 36		sta ($36),y			sta 	(zTemp0),y
.a700	e8		inx				inx
.a701	c8		iny				iny
.a702	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a705	d0 f4		bne $a6fb			bne 	_CCVCopyName
.a707	98		tya				tya 								; patch offset
.a708	92 36		sta ($36)			sta 	(zTemp0)
.a70a	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a70c	91 36		sta ($36),y			sta 	(zTemp0),y
.a70e	88		dey				dey
.a70f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a711	09 80		ora #$80			ora 	#$80
.a713	91 36		sta ($36),y			sta 	(zTemp0),y
.a715					_CCVFound:
.a715	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a717	38		sec				sec
.a718	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a71a	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a71c	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a71f	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a721	20 9d a6	jsr $a69d			jsr 	TokeniseWriteByte
.a724	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
