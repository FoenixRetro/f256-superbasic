
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Thu Jan  5 08:44:52 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$280						MemoryStorage = $280
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$0800						VariableSpace = $0800
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0280						identStart:
>0280								.fill 	1
.0281						identTypeStart:
>0281								.fill 	1
.0282						identTypeEnd:
>0282								.fill 	1
.0283						identHash:
>0283								.fill 	1
.0284						identTypeByte:
>0284								.fill 	1	 						; (see tokenising.pdf)
.0285						encodeState:
>0285								.fill 	1
.0286						digitTemp:
>0286								.fill 	1
.0287						decimalCount:
>0287								.fill 	1
.0288						randomSeed:
>0288								.fill 	4
.028c						lowMemPtr:
>028c								.fill 	2
.028e						stringMemory:
>028e								.fill 	2
.0290						stringInitialised:
>0290								.fill 	1
.0291						stringTempPointer:
>0291								.fill 	2
.0293						breakCheck:
>0293								.fill 	1
.0294						decimalPlaces:
>0294								.fill 	1
.0295						dbOffset:
>0295								.fill 	1
.0296						lastParameter:
>0296								.fill 	1
.0297						dataPointer:
>0297								.fill 	5
.029c						inDataStatement:
>029c								.fill 	1
.029d						tbOffset:
>029d								.fill 	1
.029e						AssemblerAddress:
>029e								.fill 	2
.02a0						AssemblerControl:
>02a0								.fill 	1
.02a1						ParamStart:
>02a1								.fill 	2
.02a3						IsGroup1:
>02a3								.fill 	1
.02a4						BaseOpcode:
>02a4								.fill 	1
.02a5						ModeMask:
>02a5								.fill 	1
.02a6						listIndent:
>02a6								.fill 	1
.02a7						lcLastCharacter:
>02a7								.fill 	1
.02a8						isPrintFlag:
>02a8								.fill 	1
.02a9						currentListColour:
>02a9								.fill 	1
.02aa						tokenOffset:
>02aa								.fill 	1
.02ab						tokenLineNumber:
>02ab								.fill 	2
.02ad						tokenBuffer:
>02ad								.fill 	253
.03aa						lineBuffer:
>03aa								.fill 	253
.04a7						numberBuffer:
>04a7								.fill 	34
.04c9						decimalBuffer:
>04c9								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_CPRINT                           = $b8; $b8 CPRINT
=$b9						KWD_DATA                             = $b9; $b9 DATA
=$ba						KWD_DIM                              = $ba; $ba DIM
=$bb						KWD_DOWNTO                           = $bb; $bb DOWNTO
=$bc						KWD_ELSE                             = $bc; $bc ELSE
=$bd						KWD_FROM                             = $bd; $bd FROM
=$be						KWD_GFX                              = $be; $be GFX
=$bf						KWD_GOSUB                            = $bf; $bf GOSUB
=$c0						KWD_GOTO                             = $c0; $c0 GOTO
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_INPUT                            = $c3; $c3 INPUT
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_PRINT                            = $d0; $d0 PRINT
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_RETURN                           = $d4; $d4 RETURN
=$d5						KWD_SOLID                            = $d5; $d5 SOLID
=$d6						KWD_SOUND                            = $d6; $d6 SOUND
=$d7						KWD_SPRITE                           = $d7; $d7 SPRITE
=$d8						KWD_TEXT                             = $d8; $d8 TEXT
=$d9						KWD_TO                               = $d9; $d9 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c b7 80	jmp $80b7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 4b bc	jsr $bc4b		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 0d bc	jsr $bc0d		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 5c bc	jsr $bc5c		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 57 bc	jsr $bc57		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 b1 bc	jsr $bcb1		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 bb bc	jsr $bcbb		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLReadBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 dd bc	jsr $bcdd		jsr	Export_KNLReadBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLWriteBlock:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 1a bd	jsr $bd1a		jsr	Export_KNLWriteBlock
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						KNLCloseFile:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 97 bc	jsr $bc97		jsr	Export_KNLCloseFile
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						GXGraphicDraw:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDCommand:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 80 bb	jsr $bb80		jsr	Export_SNDCommand
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						SNDUpdate:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 b3 bb	jsr $bbb3		jsr	Export_SNDUpdate
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKListConvertLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 31 b5	jsr $b531		jsr	Export_TKListConvertLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts
.80ad						TKTokeniseLine:
.80ad		e6 0d		inc $0d			inc 8+5
.80af		20 c5 b7	jsr $b7c5		jsr	Export_TKTokeniseLine
.80b2		08		php			php
.80b3		c6 0d		dec $0d			dec 8+5
.80b5		28		plp			plp
.80b6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80b7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80b9		9a		txs				txs
.80ba		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80bc		09 80		ora #$80			ora 	#$80
.80be		85 00		sta $00				sta 	0
.80c0		20 98 a9	jsr $a998			jsr		UpdateFont 					; update font if between FPGA updates.
.80c3		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.80c6		9c df 04	stz $04df			stz 	DefaultDrive 				; zero the default drive.
.80c9		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cb		aa		tax				tax
.80cc		a8		tay				tay
.80cd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.80d0		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d2		20 8f 80	jsr $808f			jsr 	SNDCommand
.80d5		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80da		a9 09		lda #$09			lda 	#9
.80dc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80df		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80e2		64 01		stz $01				stz 	1
.80e4		ad ad d6	lda $d6ad			lda 	$D6AD
.80e7		20 1b 82	jsr $821b			jsr 	PrintHex
.80ea		ad ac d6	lda $d6ac			lda 	$D6AC
.80ed		20 1b 82	jsr $821b			jsr 	PrintHex
.80f0		ad ab d6	lda $d6ab			lda 	$D6AB
.80f3		20 1b 82	jsr $821b			jsr 	PrintHex
.80f6		ad aa d6	lda $d6aa			lda 	$D6AA
.80f9		20 1b 82	jsr $821b			jsr 	PrintHex
.80fc		a9 20		lda #$20			lda 	#32
.80fe		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8101		ad a8 d6	lda $d6a8			lda 	$D6A8
.8104		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8107		ad a9 d6	lda $d6a9			lda 	$D6A9
.810a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.810d		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.810f		a9 1d		lda #$1d			lda 	#Prompt & $FF
.8111		20 e8 92	jsr $92e8			jsr 	PrintStringXA
.8114		20 e3 8c	jsr $8ce3			jsr 	NewProgram 					; erase current program
.8117		4c 5e 84	jmp $845e			jmp 	WarmStart					; make same size.
.811a		4c 5e 84	jmp $845e			jmp 	WarmStart
>811d		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>811f		09 09 30 35 2f 30 31 2f			.text 9,9,"05/01/23 23"
>8127		32 33 20 32 33

;******  Return to file: ./common/aa.system/00start.asm

>812c		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8130						AssembleGroup1:
.8130		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8132		8d a5 02	sta $02a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8135		80 02		bra $8139			bra 	AsmGroup12
.8137						AssembleGroup2:
.8137		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8139						AsmGroup12:
.8139		8d a3 02	sta $02a3			sta 	IsGroup1 					; save the 'group 1' flag
.813c		68		pla				pla 								; pop the return address to access the information following.
.813d		fa		plx				plx
.813e		20 c5 81	jsr $81c5			jsr 	AccessParameters 			; get opcode and save as base
.8141		8d a4 02	sta $02a4			sta 	BaseOpcode
.8144		ad a3 02	lda $02a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8147		d0 08		bne $8151			bne 	_AG12HaveMask
.8149		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.814b		20 cd 81	jsr $81cd			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.814e		8d a5 02	sta $02a5			sta 	ModeMask
.8151						_AG12HaveMask:
.8151		20 01 83	jsr $8301			jsr 	TypeAndCalculateOperand 	; get zero page type
.8154		da		phx				phx 								; save found address mode
.8155		20 31 82	jsr $8231			jsr 	AssembleModeX
.8158		fa		plx				plx  								; restore address mode
.8159		b0 0b		bcs $8166			bcs 	_AG12Exit
.815b		20 67 81	jsr $8167			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.815e		20 31 82	jsr $8231			jsr 	AssembleModeX
.8161		b0 03		bcs $8166			bcs 	_AG12Exit
.8163		4c 58 a3	jmp $a358			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8166						_AG12Exit:
.8166		60		rts				rts
.8167						PromoteToAbsolute:
.8167		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8169		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.816b		f0 19		beq $8186			beq 	_PTADo
.816d		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.816f		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8171		f0 13		beq $8186			beq 	_PTADo
.8173		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8175		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8177		f0 0d		beq $8186			beq 	_PTADo
.8179		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.817b		e0 d1		cpx #$d1			cpx 	#AM_IND
.817d		f0 07		beq $8186			beq 	_PTADo
.817f		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8181		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8183		f0 01		beq $8186			beq 	_PTADo
.8185		60		rts				rts
.8186						_PTADo:
.8186		aa		tax				tax
.8187		60		rts				rts
.8188						AssembleGroup3:
.8188		68		pla				pla 								; get parameters, which is just the opcode.
.8189		fa		plx				plx
.818a		20 c5 81	jsr $81c5			jsr 	AccessParameters 			; get and output opcode
.818d		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte
.8190		20 65 83	jsr $8365			jsr 	CalculateOperand 			; get a 16 bit operand
.8193		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8195		38		sec				sec
.8196		ed 9e 02	sbc $029e			sbc 	AssemblerAddress
.8199		48		pha				pha 								; LSB in A
.819a		a5 60		lda $60				lda 	NSMantissa1
.819c		ed 9f 02	sbc $029f			sbc 	AssemblerAddress+1
.819f		aa		tax				tax 								; MSB in X
.81a0		68		pla				pla
.81a1		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.81a2		69 7f		adc #$7f			adc 	#$7F
.81a4		90 01		bcc $81a7			bcc 	_AG3NoCarry
.81a6		e8		inx				inx
.81a7						_AG3NoCarry:
.81a7		38		sec				sec 								; fix back and write out anyways.
.81a8		e9 80		sbc #$80			sbc 	#$80
.81aa		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte
.81ad		e0 00		cpx #$00			cpx 	#0 							; was it in range
.81af		f0 0a		beq $81bb			beq 	_AG3Exit
.81b1		ad a0 02	lda $02a0			lda 	AssemblerControl 			; are we allowing bad values ?
.81b4		29 01		and #$01			and 	#1
.81b6		f0 03		beq $81bb			beq 	_AG3Exit
.81b8		4c 5d a3	jmp $a35d			jmp 	RangeError 					; no, branch is out of range
.81bb						_AG3Exit:
.81bb		60		rts				rts
.81bc						AssembleGroup4:
.81bc		68		pla				pla 								; pop address
.81bd		fa		plx				plx
.81be		20 c5 81	jsr $81c5			jsr 	AccessParameters 			; access and get first
.81c1		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte 			; output it.
.81c4		60		rts				rts
.81c5						AccessParameters:
.81c5		8d a1 02	sta $02a1			sta 	ParamStart
.81c8		8e a2 02	stx $02a2			stx 	ParamStart+1
.81cb		a9 01		lda #$01			lda 	#1
.81cd						GetParameter:
.81cd		5a		phy				phy
.81ce		a8		tay				tay
.81cf		ad a1 02	lda $02a1			lda 	ParamStart
.81d2		85 36		sta $36				sta 	zTemp0
.81d4		ad a2 02	lda $02a2			lda 	ParamStart+1
.81d7		85 37		sta $37				sta 	zTemp0+1
.81d9		b1 36		lda ($36),y			lda 	(zTemp0),y
.81db		7a		ply				ply
.81dc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81dd						AssemblerWriteByte:
.81dd		48		pha			pha
.81de		ad a0 02	lda $02a0		lda 	AssemblerControl 				; check printing bytes ?
.81e1		29 02		and #$02		and 	#2
.81e3		f0 1b		beq $8200		beq 	_AWBNoPrint
.81e5		ad 9f 02	lda $029f		lda		AssemblerAddress+1 				; print address
.81e8		20 1b 82	jsr $821b		jsr 	PrintHex
.81eb		ad 9e 02	lda $029e		lda		AssemblerAddress
.81ee		20 1b 82	jsr $821b		jsr 	PrintHex
.81f1		a9 20		lda #$20		lda 	#' '
.81f3		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81f6		68		pla			pla 									; print byte
.81f7		48		pha			pha
.81f8		20 1b 82	jsr $821b		jsr 	PrintHex
.81fb		a9 0d		lda #$0d		lda 	#13
.81fd		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8200						_AWBNoPrint:
.8200		ad 9e 02	lda $029e		lda		AssemblerAddress				; copy address to zTemp0
.8203		85 36		sta $36			sta 	zTemp0
.8205		ad 9f 02	lda $029f		lda		AssemblerAddress+1
.8208		f0 0e		beq $8218		beq 	_AWBRange
.820a		85 37		sta $37			sta 	zTemp0+1
.820c		68		pla			pla 									; write byte out
.820d		92 36		sta ($36)		sta 	(zTemp0)
.820f		ee 9e 02	inc $029e		inc 	AssemblerAddress 				; bump address
.8212		d0 03		bne $8217		bne 	_AWBNoCarry
.8214		ee 9f 02	inc $029f		inc 	AssemblerAddress+1
.8217						_AWBNoCarry:
.8217		60		rts			rts
.8218						_AWBRange:
.8218		4c 5d a3	jmp $a35d		jmp 	RangeError
.821b						PrintHex:
.821b		48		pha				pha
.821c		4a		lsr a				lsr 	a
.821d		4a		lsr a				lsr 	a
.821e		4a		lsr a				lsr 	a
.821f		4a		lsr a				lsr 	a
.8220		20 24 82	jsr $8224			jsr 	_PrintNibble
.8223		68		pla				pla
.8224						_PrintNibble:
.8224		29 0f		and #$0f			and 	#15
.8226		c9 0a		cmp #$0a			cmp 	#10
.8228		90 02		bcc $822c			bcc 	_NoShift
.822a		69 06		adc #$06			adc 	#6
.822c						_NoShift:
.822c		69 30		adc #$30			adc 	#48
.822e		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8231						AssembleModeX:
.8231		5a		phy				phy
.8232		ad a3 02	lda $02a3			lda 	IsGroup1
.8235		f0 17		beq $824e			beq 	_AMXGroup2
.8237		8a		txa				txa 							; is it in group # 1
.8238		29 40		and #$40			and 	#AM_ISG1
.823a		f0 4d		beq $8289			beq 	_AMXFail 				; no, give up.
.823c		8a		txa				txa 							; get back.
.823d		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.823f		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8241		d0 22		bne $8265			bne 	_AMXHaveInfo
.8243		ad a4 02	lda $02a4			lda 	BaseOpcode 				; cannot store immediate.
.8246		c9 81		cmp #$81			cmp 	#$81
.8248		f0 3f		beq $8289			beq 	_AMXFail
.824a		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.824c		80 17		bra $8265			bra 	_AMXHaveInfo 			; odd design decision there.
.824e						_AMXGroup2:
.824e		8a		txa				txa 							; is it in group 2 ?
.824f		29 20		and #$20			and 	#AM_ISG2
.8251		f0 36		beq $8289			beq 	_AMXFail 				; no, give up.
.8253		8a		txa				txa 							; get the offset into Y
.8254		29 1f		and #$1f			and 	#$1F
.8256		4a		lsr a				lsr 	a 						; make it 0-7.
.8257		4a		lsr a				lsr  	a
.8258		a8		tay				tay
.8259		ad a5 02	lda $02a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.825c						_AMXCheckOkay:
.825c		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.825d		88		dey				dey
.825e		10 fc		bpl $825c			bpl 	_AMXCheckOkay
.8260		90 27		bcc $8289			bcc 	_AMXFail 				; not allowed.
.8262		8a		txa				txa  							; get mask back
.8263		29 1f		and #$1f			and 	#$1F
.8265						_AMXHaveInfo:
.8265		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8267		10 04		bpl $826d			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8269		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.826b		d0 1c		bne $8289			bne 	_AMXFail
.826d						_AMXAnySize:
.826d		18		clc				clc 							; add offset to the base opcode
.826e		6d a4 02	adc $02a4			adc 	BaseOpcode
.8271						_AMXOutputCode:
.8271		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte 		; write the opcode out.
.8274		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8276		f0 0e		beq $8286			beq 	_AMXExit
.8278		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.827a		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte
.827d		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.827f		30 05		bmi $8286			bmi 	_AMXExit
.8281		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8283		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte
.8286						_AMXExit:
.8286		7a		ply				ply
.8287		38		sec				sec
.8288		60		rts				rts
.8289						_AMXFail:
.8289		a0 00		ldy #$00			ldy 	#0
.828b						_AMXCheckOddities:
.828b		8a		txa				txa
.828c		d9 b3 82	cmp $82b3,y			cmp 	ExtraOpcode+2,y 		; match address mode
.828f		d0 15		bne $82a6			bne 	_AMXCONext
.8291		b9 b1 82	lda $82b1,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8294		cd a4 02	cmp $02a4			cmp 	BaseOpcode
.8297		d0 0d		bne $82a6			bne 	_AMXCONext
.8299		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.829b		10 04		bpl $82a1			bpl 	_AMXCONotZero
.829d		a5 60		lda $60				lda 	NSMantissa1
.829f		d0 05		bne $82a6			bne 	_AMXCONext
.82a1						_AMXCONotZero:
.82a1		b9 b2 82	lda $82b2,y			lda 	ExtraOpcode+1,y 		; get new opcode
.82a4		80 cb		bra $8271			bra 	_AMXOutputCode 			; and assemble it
.82a6						_AMXCONext:
.82a6		c8		iny				iny
.82a7		c8		iny				iny
.82a8		c8		iny				iny
.82a9		b9 b1 82	lda $82b1,y			lda 	ExtraOpcode+0,y 		; end of table
.82ac		d0 dd		bne $828b			bne 	_AMXCheckOddities
.82ae						_AMXCOFail:
.82ae		7a		ply				ply
.82af		18		clc				clc
.82b0		60		rts				rts
.82b1						ExtraOpcode:
>82b1		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>82b4		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>82b7		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>82ba		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>82bd		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>82c0		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>82c3		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>82c6		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>82c9		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>82cc		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>82cf		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.82d0						LabelHere:
.82d0		c8		iny				iny 								; skip .
.82d1		a2 00		ldx #$00			ldx 	#0 							; get a term
.82d3		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm
.82d6		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.82d8		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82da		d0 22		bne $82fe			bne 	_ALType 					; otherwise typing error
.82dc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82de		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82e0		b5 60		lda $60,x			lda 	NSMantissa1,x
.82e2		85 37		sta $37				sta 	zTemp0+1
.82e4		5a		phy				phy 								; copy address in (64k)
.82e5		a0 01		ldy #$01			ldy 	#1
.82e7		ad 9e 02	lda $029e			lda	 	AssemblerAddress
.82ea		92 36		sta ($36)			sta 	(zTemp0)
.82ec		ad 9f 02	lda $029f			lda	 	AssemblerAddress+1
.82ef		91 36		sta ($36),y			sta 	(zTemp0),y
.82f1		c8		iny				iny
.82f2		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82f4		91 36		sta ($36),y			sta 	(zTemp0),y
.82f6		c8		iny				iny
.82f7		91 36		sta ($36),y			sta 	(zTemp0),y
.82f9		c8		iny				iny
.82fa		91 36		sta ($36),y			sta 	(zTemp0),y
.82fc		7a		ply				ply
.82fd		60		rts				rts
.82fe						_ALType:
.82fe		4c 62 a3	jmp $a362			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8301						TypeAndCalculateOperand:
.8301		b1 30		lda ($30),y			lda 	(codePtr),y
.8303		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8305		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8307		f0 5b		beq $8364			beq 	_TACOExit
.8309		c9 80		cmp #$80			cmp 	#KWC_EOL
.830b		f0 57		beq $8364			beq 	_TACOExit
.830d		c8		iny				iny
.830e		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8310		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8312		f0 51		beq $8365			beq 	CalculateOperand
.8314		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8316		f0 1f		beq $8337			beq 	_TACOIndirect
.8318		88		dey				dey 								; undo get of first character
.8319		20 65 83	jsr $8365			jsr 	CalculateOperand 			; get operand
.831c		b1 30		lda ($30),y			lda 	(codePtr),y
.831e		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8320		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8322		d0 40		bne $8364			bne 	_TACOExit
.8324		c8		iny				iny
.8325		20 6f 83	jsr $836f			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8328		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.832a		c9 58		cmp #$58			cmp 	#'X'
.832c		f0 36		beq $8364			beq 	_TACOExit
.832e		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8330		c9 59		cmp #$59			cmp 	#'Y'
.8332		f0 30		beq $8364			beq 	_TACOExit
.8334						_TACOSyntax:
.8334		4c 58 a3	jmp $a358			jmp 	SyntaxError
.8337						_TACOIndirect:
.8337		20 65 83	jsr $8365			jsr 	CalculateOperand 			; get the operand
.833a		b1 30		lda ($30),y			lda 	(codePtr),y
.833c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.833e		f0 17		beq $8357			beq 	_TACOIndX
.8340		20 76 92	jsr $9276			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8343		b1 30		lda ($30),y			lda 	(codePtr),y
.8345		a2 d1		ldx #$d1			ldx 	#AM_IND
.8347		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8349		d0 19		bne $8364			bne 	_TACOExit
.834b		c8		iny				iny
.834c		20 6f 83	jsr $836f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.834f		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8351		d0 e1		bne $8334			bne 	_TACOSyntax
.8353		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8355		80 0d		bra $8364			bra 	_TACOExit
.8357						_TACOIndX:
.8357		c8		iny				iny
.8358		20 6f 83	jsr $836f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.835b		c9 58		cmp #$58			cmp 	#'X' 						; check X
.835d		d0 d5		bne $8334			bne 	_TACOSyntax
.835f		20 76 92	jsr $9276			jsr 	CheckRightBracket			; check )
.8362		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8364						_TACOExit:
.8364		60		rts				rts
.8365						CalculateOperand:
.8365		48		pha				pha
.8366		da		phx				phx
.8367		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8369		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger
.836c		fa		plx				plx
.836d		68		pla				pla
.836e		60		rts				rts
.836f						TACOCheckXY:
.836f		b1 30		lda ($30),y			lda 	(codePtr),y
.8371		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8373		c9 40		cmp #$40			cmp 	#$40
.8375		d0 21		bne $8398			bne 	_TCXYFail
.8377		b1 30		lda ($30),y			lda 	(codePtr),y
.8379		18		clc				clc
.837a		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.837c		85 37		sta $37				sta 	zTemp0+1
.837e		c8		iny				iny
.837f		b1 30		lda ($30),y			lda 	(codePtr),y
.8381		c8		iny				iny
.8382		85 36		sta $36				sta 	zTemp0
.8384		5a		phy				phy 								; save position
.8385		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8387		b1 36		lda ($36),y			lda 	(zTemp0),y
.8389		d0 0c		bne $8397			bne 	_TCXYPopFail
.838b		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.838d		b1 36		lda ($36),y			lda 	(zTemp0),y
.838f		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8391		f0 08		beq $839b			beq 	_TCXYFound
.8393		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8395		f0 04		beq $839b			beq 	_TCXYFound
.8397						_TCXYPopFail:
.8397		7a		ply				ply
.8398						_TCXYFail:
.8398		a9 00		lda #$00			lda 	#0
.839a		60		rts				rts
.839b						_TCXYFound:
.839b		7a		ply				ply 								; restore position
.839c		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.839e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.839f						BackloadProgram:
.839f		20 e3 8c	jsr $8ce3			jsr 	NewProgram 					; does the actual NEW.
.83a2		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.83a4		a9 f6		lda #$f6			lda 	#_BLLoad & $FF
.83a6		20 e8 92	jsr $92e8			jsr 	PrintStringXA
.83a9		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.83ab		8d d9 04	sta $04d9			sta 	BackLoadPage
.83ae		a9 00		lda #$00			lda 	#(($6000) & $FF)
.83b0		8d da 04	sta $04da			sta 	0+BackLoadPointer
.83b3		a9 60		lda #$60			lda 	#(($6000) >> 8)
.83b5		8d db 04	sta $04db			sta 	1+BackLoadPointer
.83b8		a9 ff		lda #$ff			lda 	#$FF
.83ba		8d fa ff	sta $fffa			sta 	$FFFA
.83bd						_BPLoop:
.83bd		a2 ff		ldx #$ff			ldx 	#$FF
.83bf		20 0b 84	jsr $840b			jsr 	BLReadByte 					; read a byte
.83c2		c9 00		cmp #$00			cmp 	#0
.83c4		f0 29		beq $83ef			beq 	_BPExit 					; if 0 exit
.83c6		30 27		bmi $83ef			bmi 	_BPExit 					; if -ve exit
.83c8						_BPCopy:
.83c8		e8		inx				inx  								; copy byte into the lineBuffer
.83c9		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.83cc		9e ab 03	stz $03ab,x			stz 	lineBuffer+1,x
.83cf		20 0b 84	jsr $840b			jsr 	BLReadByte 					; read next byte
.83d2		30 0a		bmi $83de			bmi 	_BPEndLine 					; -ve = EOL
.83d4		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.83d6		d0 02		bne $83da			bne 	_BPNotTab
.83d8		a9 20		lda #$20			lda 	#' '
.83da						_BPNotTab:
.83da		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83dc		b0 ea		bcs $83c8			bcs 	_BPCopy 					; until a control character, should be 13 received.
.83de						_BPEndLine:
.83de		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.83e1		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.83e4		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.83e7		f0 d4		beq $83bd			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83e9		38		sec				sec 								; append not insert
.83ea		20 c1 a8	jsr $a8c1			jsr 	MemoryInsertLine 			; append to current program
.83ed		80 ce		bra $83bd			bra 	_BPLoop
.83ef						_BPExit:
.83ef		9c fa ff	stz $fffa			stz 	$FFFA
.83f2		20 14 86	jsr $8614			jsr 	ClearCommand 				; clear variables etc.
.83f5		60		rts				rts
.83f6						_BLLoad:
>83f6		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83fe		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.840b						BLReadByte:
.840b		da		phx				phx
.840c		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.840e		ad d9 04	lda $04d9			lda 	BackLoadPage	 			; set current page
.8411		85 0b		sta $0b				sta 	8+3
.8413		ad da 04	lda $04da			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8416		85 36		sta $36				sta 	zTemp0
.8418		ad db 04	lda $04db			lda 	BackLoadPointer+1
.841b		85 37		sta $37				sta 	zTemp0+1
.841d		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.841f		ee da 04	inc $04da			inc 	BackLoadPointer 			; bump pointer
.8422		d0 0f		bne $8433			bne 	_BLNoCarry
.8424		ee db 04	inc $04db			inc 	BackLoadPointer+1
.8427		10 0a		bpl $8433			bpl 	_BLNoCarry 					; need a new page
.8429		48		pha				pha
.842a		a9 60		lda #$60			lda 	#$60 						; reset pointer
.842c		8d db 04	sta $04db			sta 	BackLoadPointer+1
.842f		ee d9 04	inc $04d9			inc 	BackLoadPage 				; next page from source.
.8432		68		pla				pla
.8433						_BLNoCarry:
.8433		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8435		fa		plx				plx
.8436		c9 00		cmp #$00			cmp 	#0
.8438		60		rts				rts
.04d9						BackLoadPage:
>04d9								.fill  	1
.04da						BackLoadPointer:
>04da								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8439						EditProgramCode:
.8439		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; try to find the line.
.843c		ae ac 02	ldx $02ac			ldx 	tokenLineNumber+1
.843f		20 65 a9	jsr $a965			jsr 	MemorySearch
.8442		90 05		bcc $8449			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8444		d0 03		bne $8449			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8446		20 8a a8	jsr $a88a			jsr 	MemoryDeleteLine 			; delete the line
.8449						_EPCNoDelete:
.8449		ad ad 02	lda $02ad			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.844c		c9 80		cmp #$80			cmp 	#KWC_EOL
.844e		f0 0d		beq $845d			beq 	_EPCNoInsert
.8450		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8453		ae ac 02	ldx $02ac			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8456		20 65 a9	jsr $a965			jsr 	MemorySearch
.8459		18		clc				clc 								; insert at this point.
.845a		20 c1 a8	jsr $a8c1			jsr 	MemoryInsertLine 			; insert the line
.845d						_EPCNoInsert:
.845d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.845e						WarmStart:
.845e		a2 ff		ldx #$ff			ldx 	#$FF
.8460		9a		txs				txs
.8461		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8463		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8466		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8469		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line
.846c		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number <> 0
.846f		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.8472		d0 17		bne $848b			bne 	_WSEditCode 				; if so,edit code.
.8474		9c aa 02	stz $02aa			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8477		a9 aa		lda #$aa			lda 	#((tokenOffset) & $FF)
.8479		85 30		sta $30				sta 	codePtr
.847b		a9 02		lda #$02			lda 	#((tokenOffset) >> 8)
.847d		85 31		sta $31				sta 	codePtr+1
.847f		ad ad 02	lda $02ad			lda 	tokenBuffer 				; nothing to run
.8482		c9 80		cmp #$80			cmp 	#KWC_EOL
.8484		f0 d8		beq $845e			beq 	WarmStart
.8486		20 73 8e	jsr $8e73			jsr 	RUNCodePointerLine 			; execute that line.
.8489		80 d3		bra $845e			bra 	WarmStart
.848b						_WSEditCode:
.848b		20 39 84	jsr $8439			jsr 	EditProgramCode 			; edit the program code
.848e		20 14 86	jsr $8614			jsr 	ClearCommand 				; clear all variables etc.
.8491		80 cb		bra $845e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8493						AssembleCommand:
.8493		a2 00		ldx #$00			ldx 	#0
.8495		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger 		; start address
.8498		a5 58		lda $58				lda 	NSMantissa0
.849a		8d 9e 02	sta $029e			sta 	AssemblerAddress
.849d		a5 60		lda $60				lda 	NSMantissa1
.849f		8d 9f 02	sta $029f			sta 	AssemblerAddress+1
.84a2		20 7e 92	jsr $927e			jsr 	CheckComma
.84a5		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; options 0-3
.84a8		a5 58		lda $58				lda 	NSMantissa0
.84aa		8d a0 02	sta $02a0			sta 	AssemblerControl
.84ad		60		rts				rts
.84ae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84af						AssertCommand:
.84af		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.84b1		20 47 a1	jsr $a147			jsr 	EvaluateInteger 			; the assert test
.84b4		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; exit if result is non zero.
.84b7		d0 05		bne $84be			bne 	_ACExit
.84b9		a9 0a		lda #$0a		lda	#10
.84bb		4c 8f 92	jmp $928f		jmp	ErrorHandler
.84be						_ACExit:
.84be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.84bf						Command_BLoad:
.84bf		a2 00		ldx #$00			ldx 	#0
.84c1		20 32 a1	jsr $a132			jsr 	EvaluateString 				; file name to load
.84c4		20 7e 92	jsr $927e			jsr 	CheckComma 					; consume comma
.84c7		e8		inx				inx
.84c8		20 47 a1	jsr $a147			jsr 	EvaluateInteger 			; load address (full physical address)
.84cb		5a		phy				phy
.84cc		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.84ce		a6 60		ldx $60				ldx 	NSMantissa1
.84d0		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.84d3		b0 4c		bcs $8521			bcs 	CBLErrorHandler 			; error, so fail.
.84d5		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.84d8		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.84da		20 24 85	jsr $8524			jsr 	BLOpenPhysicalMemory 		; open for access.
.84dd						_BLReadFile:
.84dd		ad e1 04	lda $04e1			lda 	CurrentFileStream
.84e0		20 67 80	jsr $8067			jsr 	KNLReadBlock 				; read next block
.84e3		b0 22		bcs $8507			bcs 	_BLFileError 				; file error, which might be EOF.
.84e5		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.84e7		f0 f4		beq $84dd			beq 	_BLReadFile
.84e9		8d de 04	sta $04de			sta 	BLCopyCounter 				; counter.
.84ec		ac dd 04	ldy $04dd			ldy 	BLYOffset 					; copy the buffer out here
.84ef		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.84f1						_BLCopyLoop:
.84f1		bd d2 06	lda $06d2,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.84f4		91 3a		sta ($3a),y			sta 	(zTemp2),y
.84f6		c8		iny				iny
.84f7		d0 03		bne $84fc			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.84f9		20 4c 85	jsr $854c			jsr 	BLAdvancePhysicalMemory
.84fc						_BLNoAdjust:
.84fc		e8		inx				inx
.84fd		ce de 04	dec $04de			dec 	BLCopyCounter
.8500		d0 ef		bne $84f1			bne 	_BLCopyLoop
.8502		8c dd 04	sty $04dd			sty 	BLYOffset 					; update Y offset
.8505		80 d6		bra $84dd			bra 	_BLReadFile 				; go ask for more.
.8507						_BLFileError:
.8507		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8509		d0 16		bne $8521			bne 	CBLErrorHandler				; no, it's an actual error
.850b		20 46 85	jsr $8546			jsr 	BLClosePhysicalMemory 		; close the access.
.850e		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; close the file
.8511		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8514		7a		ply				ply
.8515		60		rts				rts
.8516						CBLCloseError:
.8516		48		pha				pha
.8517		20 46 85	jsr $8546			jsr 	BLClosePhysicalMemory
.851a		ad e1 04	lda $04e1			lda 	CurrentFileStream
.851d		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8520		68		pla				pla
.8521						CBLErrorHandler:
.8521		4c cc 8b	jmp $8bcc			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8524						BLOpenPhysicalMemory:
.8524		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8526		8d dc 04	sta $04dc			sta 	BLNormalMapping
.8529		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.852b		8d dd 04	sta $04dd			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.852e		64 3a		stz $3a				stz 	zTemp2
.8530		b5 60		lda $60,x			lda 	NSMantissa1,x
.8532		29 1f		and #$1f			and 	#$1F
.8534		09 60		ora #$60			ora 	#BLAccessPage << 5
.8536		85 3b		sta $3b				sta 	zTemp2+1
.8538		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.853a		16 60		asl $60,x			asl 	NSMantissa1,x
.853c		2a		rol a				rol 	a
.853d		16 60		asl $60,x			asl 	NSMantissa1,x
.853f		2a		rol a				rol 	a
.8540		16 60		asl $60,x			asl 	NSMantissa1,x
.8542		2a		rol a				rol 	a
.8543		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8545		60		rts				rts
.8546						BLClosePhysicalMemory:
.8546		ad dc 04	lda $04dc			lda 	BLNormalMapping
.8549		85 0b		sta $0b				sta 	BLAccessPage+8
.854b		60		rts				rts
.854c						BLAdvancePhysicalMemory:
.854c		48		pha				pha
.854d		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.854f		a5 3b		lda $3b				lda 	zTemp2+1
.8551		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8553		d0 06		bne $855b			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8555		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8557		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8559		85 3b		sta $3b				sta 	zTemp2+1
.855b						_BLAPMExit:
.855b		68		pla				pla
.855c		60		rts				rts
.04dc						BLNormalMapping:
>04dc								.fill 	1
.04dd						BLYOffset:
>04dd								.fill 	1
.04de						BLCopyCounter:
>04de								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.855d						Command_BSave:
.855d		a2 00		ldx #$00			ldx 	#0
.855f		20 32 a1	jsr $a132			jsr 	EvaluateString 				; file name to load
.8562		20 7e 92	jsr $927e			jsr 	CheckComma 					; consume comma
.8565		e8		inx				inx
.8566		20 47 a1	jsr $a147			jsr 	EvaluateInteger 			; load address (full physical address)
.8569		20 7e 92	jsr $927e			jsr 	CheckComma 					; consume comma
.856c		e8		inx				inx
.856d		20 47 a1	jsr $a147			jsr 	EvaluateInteger 			; data length (3 bytes only)
.8570		5a		phy				phy
.8571		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8573		a6 60		ldx $60				ldx 	NSMantissa1
.8575		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for reading
.8578		b0 62		bcs $85dc			bcs 	CBSErrorHandler 			; error, so fail.
.857a		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.857d		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.857f		20 24 85	jsr $8524			jsr 	BLOpenPhysicalMemory 		; open for access.
.8582		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.8584		ac dd 04	ldy $04dd			ldy 	BLYOffset 					; used for data offset.
.8587						_BSWriteToFileLoop:
.8587		38		sec				sec 								; pre decrement count.
.8588		a5 5a		lda $5a				lda 	NSMantissa0+2
.858a		e9 01		sbc #$01			sbc 	#1
.858c		85 5a		sta $5a				sta 	NSMantissa0+2
.858e		a5 62		lda $62				lda 	NSMantissa1+2
.8590		e9 00		sbc #$00			sbc 	#0
.8592		85 62		sta $62				sta 	NSMantissa1+2
.8594		a5 6a		lda $6a				lda 	NSMantissa2+2
.8596		e9 00		sbc #$00			sbc 	#0
.8598		85 6a		sta $6a				sta 	NSMantissa2+2
.859a		30 15		bmi $85b1			bmi 	_BSFileComplete 			; undercounted, so exit.
.859c		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.859e		9d d2 06	sta $06d2,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.85a1		e8		inx				inx
.85a2		c8		iny				iny 								; next byte
.85a3		d0 03		bne $85a8			bne 	_BSNoCheck
.85a5		20 4c 85	jsr $854c			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.85a8						_BSNoCheck:
.85a8		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.85aa		d0 db		bne $8587			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.85ac		20 bf 85	jsr $85bf			jsr 	BSFlushBuffer 				; yes, flush the buffer
.85af		80 d6		bra $8587			bra 	_BSWriteToFileLoop 			; and keep on going
.85b1						_BSFileComplete:
.85b1		20 bf 85	jsr $85bf			jsr 	BSFlushBuffer 				; write the buffer remainder.
.85b4		20 46 85	jsr $8546			jsr 	BLClosePhysicalMemory 		; close the access.
.85b7		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; close the file
.85ba		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.85bd		7a		ply				ply
.85be		60		rts				rts
.85bf						BSFlushBuffer:
.85bf		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.85c1		f0 0d		beq $85d0			beq 	_BSFBExit 					; if so, exit.
.85c3		a9 d2		lda #$d2			lda 	#KNLReadBuffer & $FF 		; where to write from.
.85c5		85 36		sta $36				sta 	zTemp0
.85c7		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.85c9		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.85cb		20 34 91	jsr $9134			jsr 	CLWriteByteBlock 			; write it.
.85ce		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.85d0						_BSFBExit:
.85d0		60		rts				rts
.85d1						CBSSCloseError:
.85d1		48		pha				pha
.85d2		20 46 85	jsr $8546			jsr 	BLClosePhysicalMemory
.85d5		ad e1 04	lda $04e1			lda 	CurrentFileStream
.85d8		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.85db		68		pla				pla
.85dc						CBSErrorHandler:
.85dc		4c cc 8b	jmp $8bcc			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.85df						CallCommand:
.85df		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.85e1		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger
.85e4						_CCClear
.85e4		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.85e5		20 da a1	jsr $a1da			jsr 	NSMSetZero 					; these are optional sequentially.
.85e8		e0 04		cpx #$04			cpx 	#4
.85ea		d0 f8		bne $85e4			bne 	_CCClear
.85ec		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.85ee						_CCCParam:
.85ee		b1 30		lda ($30),y			lda 	(codePtr),y
.85f0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.85f2		d0 09		bne $85fd			bne 	_CCCRun6502
.85f4		c8		iny				iny 								; skip comma
.85f5		e8		inx				inx	 								; next level
.85f6		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get A/X/Y
.85f9		e0 03		cpx #$03			cpx 	#3
.85fb		90 f1		bcc $85ee			bcc 	_CCCParam 					; done all 3 ?
.85fd						_CCCRun6502:
.85fd		5a		phy				phy 								; save position
.85fe		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8600		85 37		sta $37				sta 	zTemp0+1
.8602		a5 58		lda $58				lda 	NSMantissa0
.8604		85 36		sta $36				sta 	zTemp0
.8606		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8608		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.860a		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.860c		20 11 86	jsr $8611			jsr 	_CCCZTemp0 					; call zTemp0
.860f		7a		ply				ply 								; restore position and exit
.8610		60		rts				rts
.8611						_CCCZTemp0:
.8611		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8614						ClearCommand:
.8614		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8616		85 36		sta $36				sta 	0+zTemp0
.8618		a9 08		lda #$08			lda 	#((VariableSpace) >> 8)
.861a		85 37		sta $37				sta 	1+zTemp0
.861c						_ClearZeroLoop:
.861c		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.861e		f0 24		beq $8644			beq 	_ClearZeroEnd
.8620		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8622		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8624						_ClearOneVariable:
.8624		91 36		sta ($36),y			sta 	(zTemp0),y
.8626		c8		iny				iny
.8627		c0 08		cpy #$08			cpy 	#8
.8629		d0 f9		bne $8624			bne 	_ClearOneVariable
.862b		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.862d		b1 36		lda ($36),y			lda 	(zTemp0),y
.862f		c9 18		cmp #$18			cmp 	#NSTProcedure
.8631		d0 04		bne $8637			bne 	_ClearNotProcedure
.8633		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8635		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8637						_ClearNotProcedure:
.8637		18		clc				clc 								; go to the next variable
.8638		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.863a		65 36		adc $36				adc 	zTemp0
.863c		85 36		sta $36				sta 	zTemp0
.863e		90 dc		bcc $861c			bcc 	_ClearZeroLoop
.8640		e6 37		inc $37				inc 	zTemp0+1
.8642		80 d8		bra $861c			bra 	_ClearZeroLoop
.8644						_ClearZeroEnd:
.8644		18		clc				clc
.8645		a5 36		lda $36				lda 	zTemp0
.8647		69 01		adc #$01			adc 	#1
.8649		8d 8c 02	sta $028c			sta 	lowMemPtr
.864c		a5 37		lda $37				lda 	zTemp0+1
.864e		69 00		adc #$00			adc 	#0
.8650		8d 8d 02	sta $028d			sta 	lowMemPtr+1
.8653		20 1f b3	jsr $b31f			jsr 	StackReset
.8656		20 85 b3	jsr $b385			jsr 	StringSystemInitialise
.8659		20 7f 91	jsr $917f			jsr 	ProcedureScan
.865c		20 22 8e	jsr $8e22			jsr 	Command_Restore
.865f		9c 9e 02	stz $029e			stz 	AssemblerAddress
.8662		9c 9f 02	stz $029f			stz 	AssemblerAddress+1
.8665		9c a0 02	stz $02a0			stz 	AssemblerControl
.8668		20 c9 9d	jsr $9dc9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.866b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.866c						ClearScreen:
.866c		5a		phy				phy
.866d		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.866f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8672		7a		ply				ply
.8673		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8674						Command_Data:
.8674		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8676		a2 80		ldx #$80			ldx 	#KWC_EOL
.8678		20 d1 91	jsr $91d1			jsr 	ScanForward
.867b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.867c						DimCommand:
.867c		b1 30		lda ($30),y			lda 	(codePtr),y
.867e		29 c0		and #$c0			and 	#$C0
.8680		c9 40		cmp #$40			cmp 	#$40
.8682		d0 7a		bne $86fe			bne 	_DCSyntax 				; n o, error.
.8684		b1 30		lda ($30),y			lda 	(codePtr),y
.8686		18		clc				clc
.8687		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.8689		85 3f		sta $3f				sta 	zaTemp+1
.868b		c8		iny				iny
.868c		b1 30		lda ($30),y			lda 	(codePtr),y
.868e		c8		iny				iny
.868f		85 3e		sta $3e				sta 	zaTemp
.8691		5a		phy				phy
.8692		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8694		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8696		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8698		c9 18		cmp #$18			cmp 	#NSTProcedure
.869a		f0 62		beq $86fe			beq 	_DCSyntax
.869c		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.869e		29 04		and #$04			and 	#NSBIsArray
.86a0		f0 64		beq $8706			beq 	_DCType
.86a2		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.86a4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86a6		d0 59		bne $8701			bne 	_DCRedefine
.86a8		7a		ply				ply
.86a9		20 09 87	jsr $8709			jsr 	_DCGetSize 				; get array size, check it.
.86ac		5a		phy				phy
.86ad		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.86af		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.86b1		7a		ply				ply 							; is there a second (e.g. ,x)
.86b2		b1 30		lda ($30),y			lda 	(codePtr),y
.86b4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86b6		d0 0a		bne $86c2			bne 	_DCOneDimension
.86b8		c8		iny				iny 							; skip comma
.86b9		20 09 87	jsr $8709			jsr 	_DCGetSize 				; get 2nd array size
.86bc		5a		phy				phy
.86bd		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.86bf		91 3e		sta ($3e),y			sta 	(zaTemp),y
.86c1		7a		ply				ply
.86c2						_DCOneDimension:
.86c2		5a		phy				phy 							; save position
.86c3		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.86c5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86c7		aa		tax				tax
.86c8		c8		iny				iny
.86c9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86cb		e8		inx				inx 							; bump them.
.86cc		1a		inc a				inc 	a
.86cd		20 85 a1	jsr $a185			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.86d0		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.86d2		29 e0		and #$e0			and 	#$E0
.86d4		d0 23		bne $86f9			bne 	_DCSize
.86d6		a0 02		ldy #$02			ldy 	#2 						; get base type
.86d8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86da		20 17 87	jsr $8717			jsr 	ScaleByBaseType 		; scale by base type
.86dd		a5 36		lda $36				lda 	zTemp0
.86df		a6 37		ldx $37				ldx 	zTemp0+1
.86e1		20 8b 9d	jsr $9d8b			jsr 	AllocateXABytes 		; allocate memory
.86e4		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.86e6		91 3e		sta ($3e),y			sta 	(zaTemp),y
.86e8		c8		iny				iny
.86e9		8a		txa				txa
.86ea		91 3e		sta ($3e),y			sta 	(zaTemp),y
.86ec		7a		ply				ply 							; get position back
.86ed		20 76 92	jsr $9276			jsr 	CheckRightBracket 		; check )
.86f0		b1 30		lda ($30),y			lda 	(codePtr),y
.86f2		c8		iny				iny 							; consume in case
.86f3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.86f5		f0 85		beq $867c			beq 	DimCommand
.86f7		88		dey				dey 							; undo consume
.86f8		60		rts				rts
.86f9						_DCSize:
.86f9		a9 16		lda #$16		lda	#22
.86fb		4c 8f 92	jmp $928f		jmp	ErrorHandler
.86fe						_DCSyntax:
.86fe		4c 58 a3	jmp $a358			jmp 	SyntaxError
.8701						_DCRedefine:
.8701		a9 15		lda #$15		lda	#21
.8703		4c 8f 92	jmp $928f		jmp	ErrorHandler
.8706						_DCType:
.8706		4c 62 a3	jmp $a362			jmp 	TypeError
.8709						_DCGetSize:
.8709		a2 00		ldx #$00			ldx 	#0 						; get first index.
.870b		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 	; get array dimension
.870e		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8710		f0 e7		beq $86f9			beq 	_DCSize
.8712		c9 fe		cmp #$fe			cmp 	#254
.8714		f0 e3		beq $86f9			beq 	_DCSize
.8716		60		rts				rts
.8717						ScaleByBaseType:
.8717		29 10		and #$10			and 	#NSBIsString 			; is it string
.8719		d0 19		bne $8734			bne 	_SBBTString
.871b		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.871d		48		pha				pha
.871e		a5 36		lda $36				lda 	zTemp0
.8720		48		pha				pha
.8721		06 36		asl $36				asl 	zTemp0 					; x 2
.8723		26 37		rol $37				rol 	zTemp0+1
.8725		06 36		asl $36				asl 	zTemp0 					; x 4
.8727		26 37		rol $37				rol 	zTemp0+1
.8729		68		pla				pla 							; add stacked value = x 5
.872a		65 36		adc $36				adc 	zTemp0
.872c		85 36		sta $36				sta 	zTemp0
.872e		68		pla				pla
.872f		65 37		adc $37				adc 	zTemp0+1
.8731		85 37		sta $37				sta 	zTemp0+1
.8733		60		rts				rts
.8734						_SBBTString:
.8734		06 36		asl $36				asl 	zTemp0
.8736		26 37		rol $37				rol 	zTemp0+1
.8738		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.8739						Command_Dir:
.8739		ad df 04	lda $04df			lda     DefaultDrive				; set drive to list.
.873c		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.873e		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8740		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8743		b0 56		bcs $879b			bcs     _CDExit
.8745						_CDEventLoop:
.8745		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8748		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.874b		b0 f8		bcs $8745			bcs     _CDEventLoop
.874d		ad ca 06	lda $06ca			lda     event.type
.8750		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.8752		f0 47		beq $879b			beq    	_CDExit
.8754		20 59 87	jsr $8759			jsr     _CDMessages 				; handle various messages
.8757		80 ec		bra $8745			bra     _CDEventLoop
.8759						_CDMessages:
.8759		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.875b		f0 15		beq $8772			beq     _CDEVRead
.875d		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.875f		f0 19		beq $877a			beq     _CDEVVolume
.8761		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.8763		f0 17		beq $877c			beq     _CDEVFile
.8765		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8767		f0 28		beq $8791			beq     _CDEVFree
.8769		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.876b		f0 26		beq $8793			beq     _CDEVEOF
.876d		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.876f		f0 22		beq $8793			beq     _CDEVEOF
.8771		60		rts				rts
.8772						_CDEVRead:
.8772		ad cd 06	lda $06cd			lda     event.directory.stream
.8775		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8777		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.877a						_CDEVVolume:
.877a		80 f6		bra $8772			bra     _CDEVRead
.877c						_CDEVFile:
.877c		a9 20		lda #$20			lda 	#32
.877e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8781		ad cf 06	lda $06cf			lda     event.directory.file.len
.8784		20 9e 87	jsr $879e			jsr     _CDReadData
.8787		20 e8 92	jsr $92e8			jsr 	PrintStringXA
.878a		a9 0d		lda #$0d			lda 	#13
.878c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.878f		80 e1		bra $8772			bra     _CDEVRead
.8791						_CDEVFree:
.8791		80 00		bra $8793			bra     _CDEVEOF
.8793						_CDEVEOF:
.8793		ad cd 06	lda $06cd			lda     event.directory.stream
.8796		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8798		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.879b						_CDExit:
.879b		4c 5e 84	jmp $845e			jmp 	WarmStart
.879e						_CDReadData:
.879e		85 fd		sta $fd				sta     kernel.args.recv.buflen
.87a0		a9 aa		lda #$aa			lda     #lineBuffer & $FF
.87a2		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.87a4		a9 03		lda #$03			lda     #lineBuffer >> 8
.87a6		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.87a8		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.87ab		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.87ad		9e aa 03	stz $03aa,x			stz     lineBuffer,x
.87b0		a9 aa		lda #$aa			lda 	#lineBuffer & $FF
.87b2		a2 03		ldx #$03			ldx 	#lineBuffer >> 8
.87b4		60		rts				rts
.87b5						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.87b5						Command_Drive:
.87b5		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger
.87b8		8d df 04	sta $04df			sta 	DefaultDrive
.87bb		60		rts				rts
.04df						DefaultDrive:
>04df								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.87bc						EndCommand:
.87bc		4c 5e 84	jmp $845e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.87bf						ForCommand:
.87bf		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.87c1		20 b9 b2	jsr $b2b9			jsr 	StackOpen
.87c4		a2 00		ldx #$00			ldx 	#0
.87c6		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm
.87c9		b5 50		lda $50,x			lda 	NSStatus,x
.87cb		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.87cd		d0 47		bne $8816			bne		_FCError
.87cf		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.87d1		20 86 92	jsr $9286			jsr 	CheckNextA
.87d4		e8		inx				inx
.87d5		20 47 a1	jsr $a147			jsr 	EvaluateInteger 			; <from> in +1
.87d8		b1 30		lda ($30),y			lda 	(codePtr),y
.87da		c8		iny				iny 								; consume it
.87db		48		pha				pha 								; save on stack for later
.87dc		c9 bb		cmp #$bb			cmp 	#KWD_DOWNTO
.87de		f0 04		beq $87e4			beq 	_FCNoSyntax
.87e0		c9 d9		cmp #$d9			cmp 	#KWD_TO
.87e2		d0 35		bne $8819			bne 	_FCSyntaxError
.87e4						_FCNoSyntax:
.87e4		e8		inx				inx
.87e5		20 47 a1	jsr $a147			jsr 	EvaluateInteger
.87e8		20 fe b2	jsr $b2fe			jsr 	STKSaveCodePosition 		; save loop back position
.87eb		68		pla				pla 								; restore DOWNTO or TO
.87ec		5a		phy				phy 								; save Y on the stack
.87ed		49 bb		eor #$bb			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.87ef		f0 02		beq $87f3			beq 	_FCNotDownTo
.87f1		a9 02		lda #$02			lda 	#2
.87f3						_FCNotDownTo:
.87f3		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.87f4		a0 10		ldy #$10			ldy 	#16
.87f6		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.87f8		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.87fa		a5 58		lda $58				lda 	NSMantissa0
.87fc		91 34		sta ($34),y			sta 	(basicStack),y
.87fe		a5 60		lda $60				lda 	NSMantissa1
.8800		c8		iny				iny
.8801		91 34		sta ($34),y			sta 	(basicStack),y
.8803		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8805		a2 01		ldx #$01			ldx 	#1
.8807		20 1c 88	jsr $881c			jsr 	FCIntegerToStack
.880a		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.880c		a2 02		ldx #$02			ldx 	#2
.880e		20 1c 88	jsr $881c			jsr 	FCIntegerToStack
.8811		20 37 88	jsr $8837			jsr 	CopyIndexToReference
.8814		7a		ply				ply 								; restore position
.8815		60		rts				rts
.8816						_FCError:
.8816		4c 62 a3	jmp $a362			jmp 	TypeError
.8819						_FCSyntaxError:
.8819		4c 58 a3	jmp $a358			jmp 	SyntaxError
.881c						FCIntegerToStack:
.881c		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.881e		10 03		bpl $8823			bpl	 	_FCNotNegative
.8820		20 a3 a1	jsr $a1a3			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8823						_FCNotNegative:
.8823		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8825		91 34		sta ($34),y			sta 	(basicStack),y
.8827		c8		iny				iny
.8828		b5 60		lda $60,x			lda 	NSMantissa1,x
.882a		91 34		sta ($34),y			sta 	(basicStack),y
.882c		c8		iny				iny
.882d		b5 68		lda $68,x			lda 	NSMantissa2,x
.882f		91 34		sta ($34),y			sta 	(basicStack),y
.8831		c8		iny				iny
.8832		b5 70		lda $70,x			lda 	NSMantissa3,x
.8834		91 34		sta ($34),y			sta 	(basicStack),y
.8836		60		rts				rts
.8837						CopyIndexToReference:
.8837		5a		phy				phy
.8838		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.883a		38		sec				sec 								; (because we copy from offset 8)
.883b		b1 34		lda ($34),y			lda 	(basicStack),y
.883d		e9 08		sbc #$08			sbc 	#8
.883f		85 36		sta $36				sta 	zTemp0
.8841		c8		iny				iny
.8842		b1 34		lda ($34),y			lda 	(basicStack),y
.8844		e9 00		sbc #$00			sbc 	#0
.8846		85 37		sta $37				sta 	zTemp0+1
.8848		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.884a		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.884c		b1 34		lda ($34),y			lda 	(basicStack),y
.884e		0a		asl a				asl 	a 							; into carry
.884f		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8851		90 14		bcc $8867			bcc 	_CITRNormal
.8853		38		sec				sec
.8854						_CITRNegative:
.8854		a9 00		lda #$00			lda 	#0
.8856		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8858		91 36		sta ($36),y			sta 	(zTemp0),y
.885a		c8		iny				iny
.885b		ca		dex				dex
.885c		d0 f6		bne $8854			bne 	_CITRNegative
.885e		88		dey				dey 								; look at MSB of mantissa
.885f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8861		09 80		ora #$80			ora 	#$80
.8863		91 36		sta ($36),y			sta 	(zTemp0),y
.8865		7a		ply				ply
.8866		60		rts				rts
.8867						_CITRNormal:
.8867		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8869		91 36		sta ($36),y			sta 	(zTemp0),y
.886b		c8		iny				iny
.886c		ca		dex				dex
.886d		d0 f8		bne $8867			bne 	_CITRNormal
.886f		7a		ply				ply 								; and exit.
.8870		60		rts				rts
.8871						NextCommand:
.8871		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8873		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8875		20 e6 b2	jsr $b2e6			jsr 	StackCheckFrame
.8878		5a		phy				phy
.8879		a0 10		ldy #$10			ldy 	#16 						; get the step count
.887b		b1 34		lda ($34),y			lda 	(basicStack),y
.887d		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.887f		30 02		bmi $8883			bmi 	_NCStepNeg
.8881		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8883						_NCStepNeg:
.8883		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8885		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8887		18		clc				clc
.8888						_NCBump:
.8888		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.888a		91 34		sta ($34),y			sta 	(basicStack),y
.888c		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.888e		c8		iny				iny 								; next byte
.888f		ca		dex				dex 								; do four times
.8890		d0 f6		bne $8888			bne 	_NCBump
.8892		20 37 88	jsr $8837			jsr		CopyIndexToReference		; copy it to the reference variable.
.8895		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8897		b1 34		lda ($34),y			lda 	(basicStack),y
.8899		0a		asl a				asl 	a 							; sign bit to carry
.889a		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.889c		85 38		sta $38				sta 	zTemp1
.889e		90 02		bcc $88a2			bcc 	_NCCompRev 					; use if step is +ve
.88a0		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.88a2						_NCCompRev:
.88a2		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.88a4		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.88a6		85 39		sta $39				sta 	zTemp1+1
.88a8		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.88aa		38		sec				sec
.88ab						_NCCompare:
.88ab		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.88ad		b1 34		lda ($34),y			lda 	(basicStack),y
.88af		a4 39		ldy $39				ldy 	zTemp1+1
.88b1		f1 34		sbc ($34),y			sbc 	(basicStack),y
.88b3		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.88b5		e6 39		inc $39				inc 	zTemp1+1
.88b7		ca		dex				dex 								; do it 4 times.
.88b8		d0 f1		bne $88ab			bne 	_NCCompare
.88ba		50 02		bvc $88be			bvc 	_NCNoOverflow 				; convert to signed comparison
.88bc		49 80		eor #$80			eor 	#$80
.88be						_NCNoOverflow:
.88be		7a		ply				ply 								; restore Y position
.88bf		0a		asl a				asl 	a 							; is bit 7 set.
.88c0		90 04		bcc $88c6			bcc 	_NCLoopBack 				; if no , >= so loop back
.88c2		20 d8 b2	jsr $b2d8			jsr 	StackClose 					; exit the loop
.88c5		60		rts				rts
.88c6						_NCLoopBack:
.88c6		20 0f b3	jsr $b30f			jsr 	STKLoadCodePosition 		; loop back
.88c9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.88ca						Command_GOSUB:
.88ca		a2 00		ldx #$00			ldx 	#0
.88cc		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.88cf		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.88d1		20 b9 b2	jsr $b2b9			jsr 	StackOpen 					; create frame
.88d4		20 fe b2	jsr $b2fe			jsr 	STKSaveCodePosition 		; save current position
.88d7		4c ed 88	jmp $88ed			jmp 	GotoStackX
.88da						Command_RETURN:
.88da		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.88dc		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.88de		20 e6 b2	jsr $b2e6			jsr 	StackCheckFrame
.88e1		20 0f b3	jsr $b30f			jsr 	STKLoadCodePosition 		; restore code position
.88e4		20 d8 b2	jsr $b2d8			jsr 	StackClose
.88e7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.88e8						GotoCommand:
.88e8		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.88ea		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger
.88ed						GotoStackX:
.88ed		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.88ef		48		pha				pha 								; it is slightly inefficient, just in cases.
.88f0		b5 58		lda $58,x			lda 	NSMantissa0,x
.88f2		fa		plx				plx
.88f3		20 65 a9	jsr $a965			jsr 	MemorySearch 				; transfer to line number AX.
.88f6		90 05		bcc $88fd			bcc 	_GotoError 					; not found, off end.
.88f8		d0 03		bne $88fd			bne 	_GotoError 					; not found exactly
.88fa		4c 6c 8e	jmp $8e6c			jmp 	RunNewLine 					; and go straight to new line code.
.88fd						_GotoError:
.88fd		a9 0d		lda #$0d		lda	#13
.88ff		4c 8f 92	jmp $928f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8902						IfCommand:
.8902		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8904		20 28 a1	jsr $a128			jsr 	EvaluateNumber
.8907		b1 30		lda ($30),y			lda 	(codePtr),y
.8909		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.890b		d0 0a		bne $8917			bne 	_IfStructured 				; we still support it.
.890d		c8		iny				iny 								; consume THEN
.890e		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; is it zero
.8911		f0 01		beq $8914			beq 	_IfFail 					; if fail, go to next line
.8913		60		rts				rts 								; if THEN just continue
.8914						_IfFail:
.8914		4c 54 8e	jmp $8e54			jmp 	EOLCommand
.8917						_IfStructured:
.8917		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; is it zero
.891a		d0 07		bne $8923			bne 	_IfExit 					; if not, then continue normally.
.891c		a9 bc		lda #$bc			lda 	#KWD_ELSE 					; look for else/endif
.891e		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8920		20 d1 91	jsr $91d1			jsr 	ScanForward 				; and run from there
.8923						_IfExit:
.8923		60		rts				rts
.8924						ElseCode:
.8924		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8926		aa		tax				tax 								; so just go to the structure exit
.8927		20 d1 91	jsr $91d1			jsr 	ScanForward
.892a		60		rts				rts
.892b						EndIf:
.892b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.892c						Command_Input:
.892c		9c a8 02	stz $02a8			stz 	isPrintFlag
.892f		80 0c		bra $893d			bra 	Command_IP_Main
.8931						Command_CPrint:
.8931		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8933		8d a8 02	sta $02a8			sta 	isPrintFlag 				; clear input flag
.8936		80 05		bra $893d			bra 	Command_IP_Main
.8938						Command_Print:
.8938		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.893a		8d a8 02	sta $02a8			sta 	isPrintFlag 				; clear input flag
.893d						Command_IP_Main:
.893d		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.893e						_CPLoop:
.893e		08		php				php 								; save last action flag
.893f		b1 30		lda ($30),y			lda 	(codePtr),y
.8941		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8943		f0 54		beq $8999			beq 	_CPExit
.8945		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8947		f0 50		beq $8999			beq 	_CPExit
.8949		68		pla				pla 								; throw last action flag
.894a		b1 30		lda ($30),y			lda 	(codePtr),y
.894c		c8		iny				iny
.894d		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.894f		f0 45		beq $8996			beq 	_CPContinueWithSameLine
.8951		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8953		f0 3c		beq $8991			beq 	_CPTab
.8955		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8957		f0 34		beq $898d			beq 	_CPNewLine
.8959		88		dey				dey 								; undo the get.
.895a		20 91 97	jsr $9791			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.895d		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.895f		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8961		f0 0d		beq $8970			beq 	_CPIsValue 					; no, display it.
.8963		ad a8 02	lda $02a8			lda 	isPrintFlag 				; if print, dereference and print.
.8966		d0 05		bne $896d			bne 	_CPIsPrint 					; otherwise display.
.8968		20 a2 89	jsr $89a2			jsr 	CIInputValue 				; input a value to the reference
.896b		80 20		bra $898d			bra 	_CPNewLine
.896d						_CPIsPrint:
.896d		20 56 9a	jsr $9a56			jsr 	Dereference 				; dereference if required.
.8970						_CPIsValue:
.8970		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8972		29 10		and #$10			and 	#NSBIsString
.8974		f0 09		beq $897f			beq 	_CPNumber
.8976		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8978		a5 58		lda $58				lda 	NSMantissa0
.897a		20 05 8a	jsr $8a05			jsr 	CPPrintStringXA
.897d		80 be		bra $893d			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.897f						_CPNumber:
.897f		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8981		20 0f a0	jsr $a00f			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8984		a2 04		ldx #$04			ldx 	#decimalBuffer >> 8
.8986		a9 c9		lda #$c9			lda 	#decimalBuffer & $FF
.8988		20 05 8a	jsr $8a05			jsr 	CPPrintStringXA 			; print it.
.898b		80 b0		bra $893d			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.898d						_CPNewLine:
.898d		a9 0d		lda #$0d			lda 	#13
.898f		80 02		bra $8993			bra 	_CPPrintCharDirect
.8991						_CPTab:
.8991		a9 09		lda #$09			lda 	#9 							; print TAB
.8993						_CPPrintCharDirect:
.8993		20 20 8a	jsr $8a20			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8996						_CPContinueWithSameLine:
.8996		38		sec				sec 								; loop round with carry set, which
.8997		80 a5		bra $893e			bra 	_CPLoop 					; will inhibit final CR
.8999						_CPExit:
.8999		28		plp				plp 								; get last action flag
.899a		b0 05		bcs $89a1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.899c		a9 0d		lda #$0d			lda 	#13 						; print new line
.899e		20 20 8a	jsr $8a20			jsr 	CPPVControl
.89a1						_CPExit2:
.89a1		60		rts				rts
.89a2						CIInputValue:
.89a2		a2 00		ldx #$00			ldx 	#0 							; input a line.
.89a4						_CIInputLine:
.89a4		20 23 8a	jsr $8a23			jsr 	CPInputVector 				; get key
.89a7		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.89a9		f0 1f		beq $89ca			beq 	_CIHaveValue
.89ab		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.89ad		f0 11		beq $89c0			beq 	_CIBackspace
.89af		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.89b1		90 f1		bcc $89a4			bcc 	_CIInputLine
.89b3		e0 50		cpx #$50			cpx 	#80 						; max length
.89b5		b0 ed		bcs $89a4			bcs 	_CIInputLine
.89b7		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.89ba		e8		inx				inx
.89bb		20 18 8a	jsr $8a18			jsr 	CPPrintVector 				; echo it.
.89be		80 e4		bra $89a4			bra 	_CIInputLine
.89c0						_CIBackspace:
.89c0		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.89c2		f0 e0		beq $89a4			beq 	_CIInputLine
.89c4		20 18 8a	jsr $8a18			jsr 	CPPrintVector 				; echo it.
.89c7		ca		dex				dex
.89c8		80 da		bra $89a4			bra 	_CIInputLine
.89ca						_CIHaveValue:
.89ca		9e aa 03	stz $03aa,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.89cd		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.89cf		29 10		and #$10			and 	#NSBIsString
.89d1		f0 17		beq $89ea			beq 	_CIAssignNumber 			; assign a number
.89d3		a2 01		ldx #$01			ldx 	#1
.89d5		a9 aa		lda #$aa			lda 	#lineBuffer & $FF 			; set up to point to new string
.89d7		95 58		sta $58,x			sta 	NSMantissa0,x
.89d9		a9 03		lda #$03			lda 	#lineBuffer >> 8
.89db		95 60		sta $60,x			sta 	NSMantissa1,x
.89dd		74 68		stz $68,x			stz 	NSMantissa2,x
.89df		74 70		stz $70,x			stz 	NSMantissa3,x
.89e1		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.89e3		95 50		sta $50,x			sta  	NSStatus,x
.89e5		ca		dex				dex 								; X = 0
.89e6		20 5f 8a	jsr $8a5f			jsr 	AssignVariable
.89e9		60		rts				rts
.89ea						_CIAssignNumber:
.89ea		a9 aa		lda #$aa			lda 	#lineBuffer & $FF 			; set up to point to new string
.89ec		85 36		sta $36				sta 	zTemp0
.89ee		a9 03		lda #$03			lda 	#lineBuffer >> 8
.89f0		85 37		sta $37				sta 	zTemp0+1
.89f2		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.89f4		20 91 9f	jsr $9f91			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.89f7		90 07		bcc $8a00			bcc 	_CIIsOkay
.89f9		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.89fb		20 18 8a	jsr $8a18			jsr 	CPPrintVector
.89fe		80 a2		bra $89a2			bra 	CIInputValue
.8a00						_CIIsOkay:
.8a00		ca		dex				dex 								; X = 0
.8a01		20 5f 8a	jsr $8a5f			jsr 	AssignVariable
.8a04		60		rts				rts
.8a05						CPPrintStringXA:
.8a05		5a		phy				phy
.8a06		86 37		stx $37				stx 	zTemp0+1
.8a08		85 36		sta $36				sta 	zTemp0
.8a0a		a0 00		ldy #$00			ldy 	#0
.8a0c						_PSXALoop:
.8a0c		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a0e		f0 06		beq $8a16			beq 	_PSXAExit
.8a10		20 18 8a	jsr $8a18			jsr 	CPPrintVector
.8a13		c8		iny				iny
.8a14		80 f6		bra $8a0c			bra 	_PSXALoop
.8a16						_PSXAExit:
.8a16		7a		ply				ply
.8a17		60		rts				rts
.8a18						CPPrintVector:
.8a18		2c a8 02	bit $02a8			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8a1b		30 03		bmi $8a20			bmi 	CPPVControl
.8a1d		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8a20						CPPVControl:
.8a20		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8a23						CPInputVector:
.8a23		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8a26						LetCommand:
.8a26		a2 00		ldx #$00			ldx 	#0
.8a28		b1 30		lda ($30),y			lda 	(codePtr),y
.8a2a		c9 10		cmp #$10			cmp 	#KWD_AT
.8a2c		d0 14		bne $8a42			bne 	_LCStandard
.8a2e		c8		iny				iny 								; skip equal
.8a2f		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8a32		20 56 9a	jsr $9a56			jsr 	Dereference 				; dereference it to a value
.8a35		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8a37		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8a39		95 50		sta $50,x			sta 	NSStatus,x
.8a3b		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8a3d		d0 0f		bne $8a4e			bne 	_LCMain
.8a3f		4c 62 a3	jmp $a362			jmp 	TypeError 					; was a reference before.
.8a42						_LCStandard:
.8a42		ad 7b 97	lda $977b			lda 	PrecedenceLevel+"*"			; precedence > this
.8a45		20 95 97	jsr $9795			jsr 	EvaluateExpressionAtPrecedence
.8a48		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8a4a		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8a4c		f0 0e		beq $8a5c			beq 	_LetGoProc 					; it's a procedure call.
.8a4e						_LCMain:
.8a4e		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8a50		20 86 92	jsr $9286			jsr 	CheckNextA
.8a53		e8		inx				inx 								; RHS
.8a54		20 1f a1	jsr $a11f			jsr 	EvaluateValue
.8a57		ca		dex				dex
.8a58		20 5f 8a	jsr $8a5f			jsr 	AssignVariable
.8a5b		60		rts				rts
.8a5c						_LetGoProc:
.8a5c		4c 2a 8d	jmp $8d2a			jmp 	CallProcedure
.8a5f						AssignVariable:
.8a5f		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8a61		48		pha				pha 								; save a copy
.8a62		55 51		eor $51,x			eor 	NSStatus+1,x
.8a64		29 10		and #$10			and 	#NSBIsString
.8a66		d0 0b		bne $8a73			bne 	_ASError
.8a68		68		pla				pla 								; get back
.8a69		29 10		and #$10			and 	#NSBIsString 				; check type
.8a6b		d0 03		bne $8a70			bne 	_ASString
.8a6d		4c 94 99	jmp $9994			jmp 	AssignNumber
.8a70						_ASString:
.8a70		4c f2 99	jmp $99f2			jmp 	AssignString
.8a73						_ASError:
.8a73		4c 62 a3	jmp $a362			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8a76						Command_List:
.8a76		9c a6 02	stz $02a6			stz 	listIndent 					; reset indent.
.8a79		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8a7b		20 8f 80	jsr $808f			jsr 	SNDCommand
.8a7e		b1 30		lda ($30),y			lda 	(codePtr),y
.8a80		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8a82		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8a84		f0 6e		beq $8af4			beq 	_CLListProcedure
.8a86		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8a88		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8a8a		a9 ff		lda #$ff			lda 	#$FF
.8a8c		85 5f		sta $5f				sta 	NSMantissa0+7
.8a8e		85 67		sta $67				sta 	NSMantissa1+7
.8a90		b1 30		lda ($30),y			lda 	(codePtr),y
.8a92		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a94		f0 1a		beq $8ab0			beq 	_CLSecond
.8a96		20 71 8b	jsr $8b71			jsr 	CLIsDigit 					; if not digit, list all
.8a99		b0 20		bcs $8abb			bcs 	_CLStart
.8a9b		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8a9d		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger
.8aa0		b1 30		lda ($30),y			lda 	(codePtr),y
.8aa2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8aa4		f0 0a		beq $8ab0			beq 	_CLSecond 					; if so go get it
.8aa6		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8aa8		85 5f		sta $5f				sta 	NSMantissa0+7
.8aaa		a5 64		lda $64				lda 	NSMantissa1+4
.8aac		85 67		sta $67				sta 	NSMantissa1+7
.8aae		80 0b		bra $8abb			bra 	_CLStart
.8ab0						_CLSecond:
.8ab0		c8		iny				iny 								; consume comma
.8ab1		20 71 8b	jsr $8b71			jsr 	CLIsDigit 					; digit found
.8ab4		b0 05		bcs $8abb			bcs 	_CLStart 					; if not, continue listing
.8ab6		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8ab8		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger
.8abb						_CLStart
.8abb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8abd		85 30		sta $30				sta 	codePtr
.8abf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ac1		85 31		sta $31				sta 	codePtr+1
.8ac3						_CLLoop:
.8ac3		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8ac6		f0 27		beq $8aef			beq 	_CLBreak
.8ac8		b2 30		lda ($30)			lda 	(codePtr)
.8aca		f0 20		beq $8aec			beq 	_CLExit
.8acc		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8ace		20 60 8b	jsr $8b60			jsr 	CLCompareLineNo
.8ad1		90 0c		bcc $8adf			bcc 	_CLNext
.8ad3		a2 07		ldx #$07			ldx 	#7
.8ad5		20 60 8b	jsr $8b60			jsr 	CLCompareLineNo
.8ad8		f0 02		beq $8adc			beq 	_CLDoThisOne
.8ada		b0 03		bcs $8adf			bcs 	_CLNext
.8adc						_CLDoThisOne:
.8adc		20 4d 8b	jsr $8b4d			jsr 	CLListOneLine 				; routine to list the current line.
.8adf						_CLNext:
.8adf		18		clc				clc
.8ae0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ae2		65 30		adc $30				adc 	codePtr
.8ae4		85 30		sta $30				sta 	codePtr
.8ae6		90 02		bcc $8aea			bcc 	_CREExit
.8ae8		e6 31		inc $31				inc 	codePtr+1 					; carry
.8aea						_CREExit:
.8aea		80 d7		bra $8ac3			bra 	_CLLoop
.8aec						_CLExit:
.8aec		4c 5e 84	jmp $845e			jmp 	WarmStart
.8aef						_CLBreak:
.8aef		a9 01		lda #$01		lda	#1
.8af1		4c 8f 92	jmp $928f		jmp	ErrorHandler
.8af4						_CLListProcedure:
.8af4		b1 30		lda ($30),y			lda 	(codePtr),y
.8af6		85 38		sta $38				sta 	zTemp1
.8af8		c8		iny				iny
.8af9		b1 30		lda ($30),y			lda 	(codePtr),y
.8afb		85 39		sta $39				sta 	zTemp1+1
.8afd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8aff		85 30		sta $30				sta 	codePtr
.8b01		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b03		85 31		sta $31				sta 	codePtr+1
.8b05						_CLLPSearch:
.8b05		b2 30		lda ($30)			lda 	(codePtr)
.8b07		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8b09		f0 e1		beq $8aec			beq 	_CLExit
.8b0b		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8b0d		b1 30		lda ($30),y			lda 	(codePtr),y
.8b0f		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8b11		d0 0e		bne $8b21			bne 	_CLLPNext
.8b13		c8		iny				iny 								; check if PROC this.
.8b14		b1 30		lda ($30),y			lda 	(codePtr),y
.8b16		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8b18		d0 07		bne $8b21			bne 	_CLLPNext
.8b1a		c8		iny				iny
.8b1b		b1 30		lda ($30),y			lda 	(codePtr),y
.8b1d		c5 39		cmp $39				cmp 	zTemp1+1
.8b1f		f0 0d		beq $8b2e			beq 	_CLLPFound
.8b21						_CLLPNext:
.8b21		18		clc				clc
.8b22		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b24		65 30		adc $30				adc 	codePtr
.8b26		85 30		sta $30				sta 	codePtr
.8b28		90 02		bcc $8b2c			bcc 	_CREExit
.8b2a		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b2c						_CREExit:
.8b2c		80 d7		bra $8b05			bra 	_CLLPSearch
.8b2e						_CLLPFound:
.8b2e		b2 30		lda ($30)			lda 	(codePtr)
.8b30		f0 ba		beq $8aec			beq 	_CLExit
.8b32		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8b34		b1 30		lda ($30),y			lda 	(codePtr),y
.8b36		48		pha				pha
.8b37		20 4d 8b	jsr $8b4d			jsr 	CLListOneLine 				; list line and go forward
.8b3a		18		clc				clc
.8b3b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b3d		65 30		adc $30				adc 	codePtr
.8b3f		85 30		sta $30				sta 	codePtr
.8b41		90 02		bcc $8b45			bcc 	_CREExit
.8b43		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b45						_CREExit:
.8b45		68		pla				pla 								; reached ENDPROC ?
.8b46		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.8b48		d0 e4		bne $8b2e			bne 	_CLLPFound
.8b4a		4c 5e 84	jmp $845e			jmp 	WarmStart
.8b4d						CLListOneLine:
.8b4d		20 34 92	jsr $9234			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8b50		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.8b53		a2 02		ldx #$02			ldx 	#(tokenBuffer >> 8) 		; print that line
.8b55		a9 ad		lda #$ad			lda 	#(tokenBuffer & $FF)
.8b57		20 e8 92	jsr $92e8			jsr 	PrintStringXA
.8b5a		a9 0d		lda #$0d			lda 	#13 						; new line
.8b5c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8b5f		60		rts				rts
.8b60						CLCompareLineNo:
.8b60		38		sec				sec
.8b61		a0 01		ldy #$01			ldy 	#1
.8b63		b1 30		lda ($30),y			lda 	(codePtr),y
.8b65		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8b67		85 36		sta $36				sta 	zTemp0
.8b69		c8		iny				iny
.8b6a		b1 30		lda ($30),y			lda 	(codePtr),y
.8b6c		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8b6e		05 36		ora $36				ora 	zTemp0
.8b70		60		rts				rts
.8b71						CLIsDigit:
.8b71		b1 30		lda ($30),y			lda 	(codePtr),y
.8b73		c9 30		cmp #$30			cmp 	#"0"
.8b75		90 03		bcc $8b7a			bcc	 	_CLIDExitFalse
.8b77		c9 3a		cmp #$3a			cmp 	#"9"+1
.8b79		60		rts				rts
.8b7a						_CLIDExitFalse:
.8b7a		38		sec				sec
.8b7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8b7c						Command_Load:
.8b7c		20 32 a1	jsr $a132			jsr 	EvaluateString 				; file name to load
.8b7f		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b81		a5 36		lda $36				lda 	zTemp0
.8b83		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8b86		b0 44		bcs $8bcc			bcs 	CLErrorHandler 				; error, so fail.
.8b88		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.8b8b		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8b8e		20 e3 8c	jsr $8ce3			jsr 	NewProgram 					; does the actual NEW.
.8b91		9c e0 04	stz $04e0			stz 	LoadEOFFlag 				; clear EOF Flag.
.8b94						_CLLoop:
.8b94		20 da 8b	jsr $8bda			jsr 	LoadReadLine 				; get next line.
.8b97		f0 10		beq $8ba9			beq 	_CLExit 					; end, exit.
.8b99		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8b9c		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.8b9f		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.8ba2		f0 f0		beq $8b94			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8ba4		20 39 84	jsr $8439			jsr 	EditProgramCode 			; do the editing etc.
.8ba7		80 eb		bra $8b94			bra 	_CLLoop
.8ba9						_CLExit:
.8ba9		ad e1 04	lda $04e1			lda 	CurrentFileStream
.8bac		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8baf						CLComplete:
.8baf		a9 b9		lda #$b9			lda 	#_CLCMsg & $FF
.8bb1		a2 8b		ldx #$8b			ldx 	#_CLCMsg >> 8
.8bb3		20 e8 92	jsr $92e8			jsr 	PrintStringXA
.8bb6		4c 5e 84	jmp $845e			jmp 	WarmStart
.8bb9						_CLCMsg:
>8bb9		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8bc1		2e 0d 00
.8bc4						CLCloseError:
.8bc4		48		pha				pha
.8bc5		ad e1 04	lda $04e1			lda 	CurrentFileStream
.8bc8		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8bcb		68		pla				pla
.8bcc						CLErrorHandler:
.8bcc		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8bce		f0 05		beq $8bd5			beq 	_CLEHNotFound
.8bd0		a9 1a		lda #$1a		lda	#26
.8bd2		4c 8f 92	jmp $928f		jmp	ErrorHandler
.8bd5						_CLEHNotFound:
.8bd5		a9 19		lda #$19		lda	#25
.8bd7		4c 8f 92	jmp $928f		jmp	ErrorHandler
.8bda						LoadReadLine:
.8bda		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8bdc		20 f6 8b	jsr $8bf6			jsr 	LoadReadCharacter
.8bdf		f0 14		beq $8bf5			beq 	_LRLExit 					; eof ?
.8be1		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8be3		90 f5		bcc $8bda			bcc 	LoadReadLine
.8be5						_LRLLoop:
.8be5		9d aa 03	sta $03aa,x			sta 	lineBuffer,x 				; write into line buffer
.8be8		9e ab 03	stz $03ab,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8beb		e8		inx				inx
.8bec		20 f6 8b	jsr $8bf6			jsr 	LoadReadCharacter 			; next line
.8bef		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8bf1		b0 f2		bcs $8be5			bcs 	_LRLLoop
.8bf3		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8bf5						_LRLExit:
.8bf5		60		rts				rts
.8bf6						LoadReadCharacter:
.8bf6		da		phx				phx
.8bf7		5a		phy				phy
.8bf8		ad e0 04	lda $04e0			lda 	LoadEOFFlag 				; already done EOF.
.8bfb		d0 0c		bne $8c09			bne 	_LRCIsEOF
.8bfd		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8c00		90 09		bcc $8c0b			bcc		_LRCExit 					; read okay.
.8c02		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8c04		d0 be		bne $8bc4			bne 	CLCloseError
.8c06		ce e0 04	dec $04e0			dec 	LoadEOFFlag
.8c09						_LRCIsEOF:
.8c09		a9 00		lda #$00			lda 	#0
.8c0b						_LRCExit:
.8c0b		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8c0d		d0 02		bne $8c11			bne 	_LRCNotTab
.8c0f		a9 20		lda #$20			lda 	#' '
.8c11						_LRCNotTab:
.8c11		c9 0a		cmp #$0a			cmp 	#$0A
.8c13		d0 02		bne $8c17			bne 	_LRCNotLF
.8c15		a9 0d		lda #$0d			lda 	#$0D
.8c17						_LRCNotLF:
.8c17		7a		ply				ply
.8c18		fa		plx				plx
.8c19		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8c1b		60		rts				rts
.04e0						LoadEOFFlag:
>04e0								.fill 	1
.04e1						CurrentFileStream:
>04e1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8c1c						Command_LOCAL:
.8c1c		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8c1e		20 2a 8c	jsr $8c2a			jsr 	LocaliseNextTerm 			; convert term to a local.
.8c21		b1 30		lda ($30),y			lda 	(codePtr),y
.8c23		c8		iny				iny
.8c24		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c26		f0 f4		beq $8c1c			beq 	Command_LOCAL 				; if so, localise another variable.
.8c28		88		dey				dey 								; unpick pre-get
.8c29		60		rts				rts
.8c2a						LocaliseNextTerm:
.8c2a		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm 				; evaluate the term
.8c2d		b5 50		lda $50,x			lda 	NSStatus,x
.8c2f		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8c31		f0 5c		beq $8c8f			beq		_LNTError
.8c33		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8c35		85 36		sta $36				sta 	zTemp0
.8c37		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c39		85 37		sta $37				sta  	zTemp0+1
.8c3b		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8c3d		29 10		and #$10			and 	#NSBIsString
.8c3f		d0 1e		bne $8c5f			bne 	_LNTPushString
.8c41		5a		phy				phy
.8c42		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8c44						_LNTPushNumLoop:
.8c44		b1 36		lda ($36),y			lda		(zTemp0),y
.8c46		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c49		c8		iny				iny
.8c4a		c0 05		cpy #$05			cpy 	#5
.8c4c		d0 f6		bne $8c44			bne 	_LNTPushNumLoop
.8c4e		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8c50		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c53		a5 37		lda $37				lda 	zTemp0+1
.8c55		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c58		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8c5a		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c5d		7a		ply				ply
.8c5e		60		rts				rts
.8c5f						_LNTPushString:
.8c5f		5a		phy				phy
.8c60		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8c62		85 38		sta $38				sta 	zTemp1
.8c64		a0 01		ldy #$01			ldy 	#1
.8c66		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c68		85 39		sta $39				sta 	zTemp1+1
.8c6a		a0 00		ldy #$00			ldy 	#0 							; output string
.8c6c		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8c6e		f0 0a		beq $8c7a			beq 	_LNTStringOut
.8c70						_LNTPushStrLoop:
.8c70		b1 38		lda ($38),y			lda 	(zTemp1),y
.8c72		f0 06		beq $8c7a			beq 	_LNTStringOut
.8c74		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c77		c8		iny				iny
.8c78		80 f6		bra $8c70			bra 	_LNTPushStrLoop
.8c7a						_LNTStringOut:
.8c7a		98		tya				tya									; output length (chars written).
.8c7b		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c7e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8c80		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c83		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c85		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c88		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8c8a		20 98 b2	jsr $b298			jsr 	StackPushByte
.8c8d		7a		ply				ply
.8c8e		60		rts				rts
.8c8f						_LNTError:
.8c8f		4c 58 a3	jmp $a358			jmp 	SyntaxError
.8c92						LocalPopValue:
.8c92		20 b0 b2	jsr $b2b0			jsr 	StackPopByte
.8c95		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8c97		d0 17		bne $8cb0			bne 	_LPVString
.8c99		20 b0 b2	jsr $b2b0			jsr 	StackPopByte 				; address
.8c9c		85 37		sta $37				sta 	zTemp0+1
.8c9e		20 b0 b2	jsr $b2b0			jsr 	StackPopByte
.8ca1		85 36		sta $36				sta 	zTemp0
.8ca3		5a		phy				phy
.8ca4		a0 04		ldy #$04			ldy 	#4 							; copy back
.8ca6						_LPVNumberCopy:
.8ca6		20 b0 b2	jsr $b2b0			jsr 	StackPopByte
.8ca9		91 36		sta ($36),y			sta 	(zTemp0),y
.8cab		88		dey				dey
.8cac		10 f8		bpl $8ca6			bpl 	_LPVNumberCopy
.8cae		7a		ply				ply 								; and complete
.8caf		60		rts				rts
.8cb0						_LPVString:
.8cb0		20 b0 b2	jsr $b2b0			jsr 	StackPopByte 				; address of record copied to zTemp0
.8cb3		85 37		sta $37				sta 	zTemp0+1
.8cb5		20 b0 b2	jsr $b2b0			jsr 	StackPopByte
.8cb8		85 36		sta $36				sta 	zTemp0
.8cba		5a		phy				phy
.8cbb		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8cbd		85 38		sta $38				sta 	zTemp1
.8cbf		a0 01		ldy #$01			ldy 	#1
.8cc1		b1 36		lda ($36),y			lda 	(zTemp0),y
.8cc3		85 39		sta $39				sta 	zTemp1+1
.8cc5		20 b0 b2	jsr $b2b0			jsr 	StackPopByte 				; # chars to get => y
.8cc8		a8		tay				tay
.8cc9		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8ccb		f0 0e		beq $8cdb			beq 	_LPVStringCopied
.8ccd		a9 00		lda #$00			lda 	#0 							; NULL on end
.8ccf		91 38		sta ($38),y			sta 	(zTemp1),y
.8cd1						_LPVStringCopy:
.8cd1		88		dey				dey
.8cd2		30 07		bmi $8cdb			bmi 	_LPVStringCopied
.8cd4		20 b0 b2	jsr $b2b0			jsr 	StackPopByte
.8cd7		91 38		sta ($38),y			sta 	(zTemp1),y
.8cd9		80 f6		bra $8cd1			bra 	_LPVStringCopy
.8cdb						_LPVStringCopied:
.8cdb		fa		plx				plx
.8cdc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8cdd						NewCommand:
.8cdd		20 e3 8c	jsr $8ce3			jsr 	NewProgram 					; does the actual NEW.
.8ce0		4c 5e 84	jmp $845e			jmp 	WarmStart 					; and warm starts straight away.
.8ce3						NewProgram:
.8ce3		20 47 a9	jsr $a947			jsr 	MemoryNew
.8ce6		9c 00 08	stz $0800			stz 	VariableSpace 				; erase all variables.
.8ce9		20 14 86	jsr $8614			jsr 	ClearCommand 				; clear everything.
.8cec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8ced						PokeBCommand:
.8ced		a9 01		lda #$01			lda 	#1
.8cef		80 0c		bra $8cfd			bra 	PokeCommand
.8cf1						PokeWCommand:
.8cf1		a9 02		lda #$02			lda 	#2
.8cf3		80 08		bra $8cfd			bra 	PokeCommand
.8cf5						PokeLCommand:
.8cf5		a9 03		lda #$03			lda 	#3
.8cf7		80 04		bra $8cfd			bra 	PokeCommand
.8cf9						PokeDCommand:
.8cf9		a9 04		lda #$04			lda 	#4
.8cfb		80 00		bra $8cfd			bra 	PokeCommand
.8cfd						PokeCommand:
.8cfd		48		pha				pha 								; save count on stack
.8cfe		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8d00		20 5a a1	jsr $a15a			jsr		Evaluate16BitInteger 		; address
.8d03		20 7e 92	jsr $927e			jsr 	CheckComma
.8d06		e8		inx				inx
.8d07		20 47 a1	jsr $a147			jsr		EvaluateInteger 			; data
.8d0a		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8d0c		85 36		sta $36				sta 	zTemp0
.8d0e		a5 60		lda $60				lda 	NSMantissa1
.8d10		85 37		sta $37				sta 	zTemp0+1
.8d12		68		pla				pla 								; count -> zTemp1
.8d13		85 38		sta $38				sta 	zTemp1
.8d15		5a		phy				phy 								; save Y position.
.8d16		a0 00		ldy #$00			ldy 	#0 							; index to write
.8d18		a2 00		ldx #$00			ldx 	#0 							; index to read
.8d1a						_PCLoop:
.8d1a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8d1c		91 36		sta ($36),y			sta 	(zTemp0),y
.8d1e		c8		iny				iny 								; next byte to write
.8d1f		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8d20		18		clc				clc
.8d21		69 08		adc #$08			adc 	#MathStackSize
.8d23		aa		tax				tax
.8d24		c6 38		dec $38				dec 	zTemp1 						; done them all
.8d26		d0 f2		bne $8d1a			bne 	_PCLoop
.8d28		7a		ply				ply 								; restore position.
.8d29		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8d2a						CallProcedure:
.8d2a		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8d2c		b1 30		lda ($30),y			lda 	(codePtr),y
.8d2e		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8d30		f0 0c		beq $8d3e			beq 	_CPEndParam
.8d32						_CPParamLoop:
.8d32		20 1f a1	jsr $a11f			jsr 	EvaluateValue 				; get parameter onto stack
.8d35		e8		inx				inx 								; bump next stack
.8d36		b1 30		lda ($30),y			lda 	(codePtr),y
.8d38		c8		iny				iny
.8d39		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8d3b		f0 f5		beq $8d32			beq 	_CPParamLoop
.8d3d		88		dey				dey 								; unpick.
.8d3e						_CPEndParam:
.8d3e		8e 96 02	stx $0296			stx 	lastParameter 				; save the last parameters index.
.8d41		c8		iny				iny									; skip right bracket
.8d42		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8d44		20 b9 b2	jsr $b2b9			jsr 	StackOpen
.8d47		20 fe b2	jsr $b2fe			jsr 	STKSaveCodePosition 		; save loop position
.8d4a		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8d4c		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8d4e		a5 60		lda $60				lda 	NSMantissa1
.8d50		85 37		sta $37				sta 	zTemp0+1
.8d52		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8d54		b2 36		lda ($36)			lda 	(zTemp0)
.8d56		85 30		sta $30				sta 	safePtr
.8d58		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d5a		85 31		sta $31				sta 	safePtr+1
.8d5c		c8		iny				iny
.8d5d		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d5f		85 32		sta $32				sta 	safePtr+2
.8d61		c8		iny				iny
.8d62		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d64		85 33		sta $33				sta 	safePtr+3
.8d66		c8		iny				iny 								; get Y offset -> Y
.8d67		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d69		a8		tay				tay
.8d6a		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8d6c		ec 96 02	cpx $0296			cpx	 	lastParameter 				; check zero parameters at the start
.8d6f		f0 13		beq $8d84			beq 	_ParamExit 					; if so, exit.
.8d71						_ParamExtract:
.8d71		ca		dex				dex 								; put a local term on the level before
.8d72		20 2a 8c	jsr $8c2a			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8d75		20 5f 8a	jsr $8a5f			jsr 	AssignVariable 				; assign stacked value to the variable.
.8d78		e8		inx				inx 								; advance to next parameter to do.
.8d79		e8		inx				inx
.8d7a		ec 96 02	cpx $0296			cpx 	lastParameter 				; are we done ?
.8d7d		f0 05		beq $8d84			beq 	_ParamExit
.8d7f		20 7e 92	jsr $927e			jsr 	CheckComma 					; comma seperating parameters
.8d82		80 ed		bra $8d71			bra 	_ParamExtract
.8d84						_ParamExit:
.8d84		20 76 92	jsr $9276			jsr 	CheckRightBracket 			; check )
.8d87		60		rts				rts 								; and continue from here
.8d88						Command_ENDPROC:
.8d88		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8d8a		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8d8c		20 e6 b2	jsr $b2e6			jsr 	StackCheckFrame
.8d8f		20 0f b3	jsr $b30f			jsr 	STKLoadCodePosition 		; restore code position
.8d92		20 d8 b2	jsr $b2d8			jsr 	StackClose
.8d95		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8d96						Command_Read:
.8d96		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8d98		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm
.8d9b		b5 50		lda $50,x			lda 	NSStatus,x
.8d9d		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8d9f		f0 4f		beq $8df0			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8da1		20 39 8e	jsr $8e39			jsr 	SwapDataCodePtrs 			; swap code and data
.8da4		ad 9c 02	lda $029c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8da7		d0 25		bne $8dce			bne 	_CRContinueData  			; forward for the next one.
.8da9		b2 30		lda ($30)			lda 	(codePtr)
.8dab		f0 1c		beq $8dc9			beq 	_CRNoData
.8dad						_CRKeepSearching:
.8dad		a9 b9		lda #$b9			lda 	#KWD_DATA 					; scan for instruction
.8daf		a2 80		ldx #$80			ldx 	#KWC_EOL
.8db1		20 d1 91	jsr $91d1			jsr 	ScanForward
.8db4		c9 b9		cmp #$b9			cmp 	#KWD_DATA 					; found data ?
.8db6		f0 16		beq $8dce			beq 	_CRHaveData 				; found it
.8db8		18		clc				clc
.8db9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8dbb		65 30		adc $30				adc 	codePtr
.8dbd		85 30		sta $30				sta 	codePtr
.8dbf		90 02		bcc $8dc3			bcc 	_CREExit
.8dc1		e6 31		inc $31				inc 	codePtr+1 					; carry
.8dc3						_CREExit:
.8dc3		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8dc5		b2 30		lda ($30)			lda 	(codePtr)
.8dc7		d0 e4		bne $8dad			bne 	_CRKeepSearching
.8dc9						_CRNoData:
.8dc9		a9 0b		lda #$0b		lda	#11
.8dcb		4c 8f 92	jmp $928f		jmp	ErrorHandler
.8dce						_CRHaveData:
.8dce						_CRContinueData:
.8dce		a2 01		ldx #$01			ldx 	#1
.8dd0		20 1f a1	jsr $a11f			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8dd3		ca		dex				dex
.8dd4		20 5f 8a	jsr $8a5f			jsr		AssignVariable 				; do the assignment
.8dd7		9c 9c 02	stz $029c			stz 	inDataStatement 			; clear in data flag
.8dda		b1 30		lda ($30),y			lda 	(codePtr),y
.8ddc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8dde		d0 04		bne $8de4			bne 	_CRSwapBack
.8de0		c8		iny				iny 								; consume comma
.8de1		ee 9c 02	inc $029c			inc 	inDataStatement 			; set in data statement currently.
.8de4						_CRSwapBack:
.8de4		20 39 8e	jsr $8e39			jsr 	SwapDataCodePtrs			; swap them back.
.8de7		b1 30		lda ($30),y			lda 	(codePtr),y
.8de9		c8		iny				iny
.8dea		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dec		f0 a8		beq $8d96			beq 	Command_Read 				; if so go round again.
.8dee		88		dey				dey 								; unpick get.
.8def		60		rts				rts
.8df0						_CRSyntax:
.8df0		4c 58 a3	jmp $a358			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8df3						RemCommand:
.8df3		b1 30		lda ($30),y			lda 	(codePtr),y
.8df5		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8df7		d0 06		bne $8dff			bne 	_RMExit
.8df9		c8		iny				iny 								; point to offset
.8dfa		98		tya				tya 								; A = offset position
.8dfb		38		sec				sec 								; add size +1 hence SEC
.8dfc		71 30		adc ($30),y			adc 	(codePtr),y
.8dfe		a8		tay				tay 								; make current position.
.8dff						_RMExit:
.8dff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8e00						Command_REPEAT:
.8e00		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8e02		20 b9 b2	jsr $b2b9			jsr 	StackOpen
.8e05		20 fe b2	jsr $b2fe			jsr 	STKSaveCodePosition 		; save loop position
.8e08		60		rts				rts
.8e09						Command_UNTIL:
.8e09		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8e0b		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8e0d		20 e6 b2	jsr $b2e6			jsr 	StackCheckFrame
.8e10		a2 00		ldx #$00			ldx 	#0
.8e12		20 28 a1	jsr $a128			jsr 	EvaluateNumber 				; work out the number
.8e15		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; check if zero
.8e18		f0 04		beq $8e1e			beq 	_CULoopBack 				; if so keep looping
.8e1a		20 d8 b2	jsr $b2d8			jsr 	StackClose		 			; return
.8e1d		60		rts				rts
.8e1e						_CULoopBack:
.8e1e		20 0f b3	jsr $b30f			jsr 	STKLoadCodePosition 		; loop back
.8e21		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8e22						Command_Restore:
.8e22		20 39 8e	jsr $8e39			jsr 	SwapDataCodePtrs 			; swap code and data
.8e25		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e27		85 30		sta $30				sta 	codePtr
.8e29		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e2b		85 31		sta $31				sta 	codePtr+1
.8e2d		20 39 8e	jsr $8e39			jsr 	SwapDataCodePtrs 			; put them back
.8e30		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8e32		8d 9b 02	sta $029b			sta 	dataPointer+4   			; (read checks not EOF)
.8e35		9c 9c 02	stz $029c			stz 	inDataStatement 			; not in data statement
.8e38		60		rts				rts
.8e39						SwapDataCodePtrs:
.8e39		da		phx				phx
.8e3a		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8e3c						_SDCPLoop:
.8e3c		b5 30		lda $30,x			lda 	safePtr,x
.8e3e		48		pha				pha
.8e3f		bd 97 02	lda $0297,x			lda 	dataPointer,x
.8e42		95 30		sta $30,x			sta 	safePtr,x
.8e44		68		pla				pla
.8e45		9d 97 02	sta $0297,x			sta 	dataPointer,x
.8e48		ca		dex				dex
.8e49		10 f1		bpl $8e3c			bpl 	_SDCPLoop
.8e4b		ad 9b 02	lda $029b			lda 	dataPointer+4 				; swap Y position over.
.8e4e		8c 9b 02	sty $029b			sty 	dataPointer+4
.8e51		a8		tay				tay
.8e52		fa		plx				plx
.8e53		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8e54						EOLCommand:
.8e54		18		clc				clc
.8e55		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e57		65 30		adc $30				adc 	codePtr
.8e59		85 30		sta $30				sta 	codePtr
.8e5b		90 02		bcc $8e5f			bcc 	_CREExit
.8e5d		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e5f						_CREExit:
.8e5f		80 0b		bra $8e6c			bra 	RunNewLine
.8e61						CommandRUN:
.8e61		20 14 86	jsr $8614			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8e64		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e66		85 30		sta $30				sta 	codePtr
.8e68		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e6a		85 31		sta $31				sta 	codePtr+1
.8e6c						RunNewLine:
.8e6c		b2 30		lda ($30)			lda 	(codePtr)
.8e6e		f0 78		beq $8ee8			beq 	CRNoProgram         		; no then END.
.8e70		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8e72		9a		txs				txs
.8e73						RUNCodePointerLine:
.8e73		a0 02		ldy #$02			ldy 	#2 							; start of program
.8e75						_CRIncMainLoop:
.8e75		0e 93 02	asl $0293			asl 	breakCheck 					; clears 1 time in 8
.8e78		d0 1f		bne $8e99			bne 	_CRNoBreakCheck
.8e7a		ce 93 02	dec $0293			dec	 	breakCheck 					; set it back to $FF
.8e7d		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8e80		f0 61		beq $8ee3			beq 	_CRBreak
.8e82		a5 01		lda $01				lda 	1 							; save I/O 0
.8e84		48		pha				pha
.8e85		64 01		stz $01				stz 	1 							; access I/O Page 0
.8e87		38		sec				sec 								; calculate timer - LastTick
.8e88		ad 59 d6	lda $d659			lda 	$D659
.8e8b		cd e2 04	cmp $04e2			cmp 	LastTick
.8e8e		f0 06		beq $8e96			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8e90		8d e2 04	sta $04e2			sta 	LastTick 					; update last timer
.8e93		20 05 a2	jsr $a205			jsr 	TickHandler 							; go do the code.
.8e96						_NoFireTick:
.8e96		68		pla				pla 								; restore I/O 0
.8e97		85 01		sta $01				sta 	1
.8e99						_CRNoBreakCheck:
.8e99		c8		iny				iny									; next token
.8e9a						_CRMainLoop:
.8e9a		9c 90 02	stz $0290			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8e9d		b1 30		lda ($30),y			lda 	(codePtr),y
.8e9f		10 10		bpl $8eb1			bpl 	_CRNotKeyword				; not a token.
.8ea1		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8ea3		b0 04		bcs $8ea9			bcs 	_CRIsKeyword
.8ea5		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8ea7		b0 34		bcs $8edd			bcs		_CRSyntaxError
.8ea9						_CRIsKeyword:
.8ea9		c8		iny				iny 								; consume command
.8eaa		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8eab		aa		tax				tax 								; put in X for vector jump
.8eac		20 e0 8e	jsr $8ee0			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8eaf		80 e9		bra $8e9a			bra 	_CRMainLoop 				; and loop round
.8eb1						_CRNotKeyword:
.8eb1		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8eb3		f0 c0		beq $8e75			beq 	_CRIncMainLoop
.8eb5		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8eb7		90 05		bcc $8ebe			bcc 	_CRNotVariable
.8eb9						_CRGoLet:
.8eb9		20 26 8a	jsr $8a26			jsr 	LetCommand
.8ebc		80 dc		bra $8e9a			bra 	_CRMainLoop
.8ebe						_CRNotVariable:
.8ebe		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8ec0		f0 f7		beq $8eb9			beq 	_CRGoLet
.8ec2		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8ec4		f0 f3		beq $8eb9			beq 	_CRGoLet
.8ec6		c9 21		cmp #$21			cmp 	#KWD_PLING
.8ec8		f0 ef		beq $8eb9			beq 	_CRGoLet
.8eca		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8ecc		f0 09		beq $8ed7			beq 	_CRGoRem
.8ece		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8ed0		d0 0b		bne $8edd			bne 	_CRSyntaxError
.8ed2		20 d0 82	jsr $82d0			jsr 	LabelHere
.8ed5		80 c3		bra $8e9a			bra 	_CRMainLoop
.8ed7						_CRGoRem:
.8ed7		c8		iny				iny
.8ed8		20 f3 8d	jsr $8df3			jsr 	RemCommand
.8edb		80 bd		bra $8e9a			bra 	_CRMainLoop
.8edd						_CRSyntaxError:
.8edd		4c 58 a3	jmp $a358			jmp 	SyntaxError
.8ee0						_CRCallVector0:
.8ee0		7c 7e 8f	jmp ($8f7e,x)			jmp 	(VectorSet0,x)
.8ee3						_CRBreak:
.8ee3		a9 01		lda #$01		lda	#1
.8ee5		4c 8f 92	jmp $928f		jmp	ErrorHandler
.8ee8						CRNoProgram:
.8ee8		4c bc 87	jmp $87bc			jmp 	EndCommand
.8eeb						Shift1Command:
.8eeb		b1 30		lda ($30),y			lda 	(codePtr),y
.8eed		c8		iny				iny
.8eee		0a		asl a				asl 	a
.8eef		aa		tax				tax
.8ef0		7c 32 90	jmp ($9032,x)			jmp 	(VectorSet1,x)
.8ef3						Shift2Command:
.8ef3		b1 30		lda ($30),y			lda 	(codePtr),y
.8ef5		c8		iny				iny
.8ef6		0a		asl a				asl 	a
.8ef7		aa		tax				tax
.8ef8		7c 6e 90	jmp ($906e,x)			jmp 	(VectorSet2,x)
.8efb						Unused1:
.8efb						Unused2:
.8efb						Unused3:
.8efb						Unused4:
.8efb		4c 58 a3	jmp $a358			jmp 	SyntaxError
>8efe								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8efe						VectorSetPunc:
>8efe		47 95					.word	ShiftLeft                        ; $00 <<
>8f00		32 93					.word	BinaryCompareLessEqual           ; $01 <=
>8f02		28 93					.word	BinaryCompareNotEqual            ; $02 <>
>8f04		58 a3					.word	SyntaxError                      ; $03 !!3
>8f06		58 a3					.word	SyntaxError                      ; $04 ><
>8f08		3c 93					.word	BinaryCompareGreaterEqual        ; $05 >=
>8f0a		4a 95					.word	ShiftRight                       ; $06 >>
>8f0c		58 a3					.word	SyntaxError                      ; $07 !!7
>8f0e		58 a3					.word	SyntaxError                      ; $08 !!8
>8f10		58 a3					.word	SyntaxError                      ; $09 !!9
>8f12		58 a3					.word	SyntaxError                      ; $0a !!10
>8f14		58 a3					.word	SyntaxError                      ; $0b !!11
>8f16		58 a3					.word	SyntaxError                      ; $0c !!12
>8f18		58 a3					.word	SyntaxError                      ; $0d !!13
>8f1a		58 a3					.word	SyntaxError                      ; $0e !!14
>8f1c		58 a3					.word	SyntaxError                      ; $0f !!15
>8f1e		58 a3					.word	SyntaxError                      ; $10 @
>8f20		58 a3					.word	SyntaxError                      ; $11 !!17
>8f22		58 a3					.word	SyntaxError                      ; $12 !!18
>8f24		58 a3					.word	SyntaxError                      ; $13 [
>8f26		f3 93					.word	IntegerDivide                    ; $14 \
>8f28		58 a3					.word	SyntaxError                      ; $15 ]
>8f2a		85 96					.word	EorInteger                       ; $16 ^
>8f2c		58 a3					.word	SyntaxError                      ; $17 _
>8f2e		58 a3					.word	SyntaxError                      ; $18 `
>8f30		58 a3					.word	SyntaxError                      ; $19 !!25
>8f32		58 a3					.word	SyntaxError                      ; $1a !!26
>8f34		58 a3					.word	SyntaxError                      ; $1b {
>8f36		50 96					.word	OraInteger                       ; $1c |
>8f38		58 a3					.word	SyntaxError                      ; $1d }
>8f3a		58 a3					.word	SyntaxError                      ; $1e ~
>8f3c		58 a3					.word	SyntaxError                      ; $1f [7m<7F>[m
>8f3e		58 a3					.word	SyntaxError                      ; $20
>8f40		ba 96					.word	WordIndirect                     ; $21 !
>8f42		58 a3					.word	SyntaxError                      ; $22 "
>8f44		58 a3					.word	SyntaxError                      ; $23 #
>8f46		58 a3					.word	SyntaxError                      ; $24 $
>8f48		34 94					.word	IntegerModulus                   ; $25 %
>8f4a		1b 96					.word	AndInteger                       ; $26 &
>8f4c		58 a3					.word	SyntaxError                      ; $27 '
>8f4e		58 a3					.word	SyntaxError                      ; $28 (
>8f50		58 a3					.word	SyntaxError                      ; $29 )
>8f52		a2 94					.word	MulInteger                       ; $2a *
>8f54		bd 95					.word	AddInteger                       ; $2b +
>8f56		58 a3					.word	SyntaxError                      ; $2c ,
>8f58		f6 95					.word	SubInteger                       ; $2d -
>8f5a		58 a3					.word	SyntaxError                      ; $2e .
>8f5c		74 98					.word	FDivideCommand                   ; $2f /
>8f5e		58 a3					.word	SyntaxError                      ; $30 0
>8f60		58 a3					.word	SyntaxError                      ; $31 1
>8f62		58 a3					.word	SyntaxError                      ; $32 2
>8f64		58 a3					.word	SyntaxError                      ; $33 3
>8f66		58 a3					.word	SyntaxError                      ; $34 4
>8f68		58 a3					.word	SyntaxError                      ; $35 5
>8f6a		58 a3					.word	SyntaxError                      ; $36 6
>8f6c		58 a3					.word	SyntaxError                      ; $37 7
>8f6e		58 a3					.word	SyntaxError                      ; $38 8
>8f70		58 a3					.word	SyntaxError                      ; $39 9
>8f72		58 a3					.word	SyntaxError                      ; $3a :
>8f74		58 a3					.word	SyntaxError                      ; $3b ;
>8f76		14 93					.word	BinaryCompareLess                ; $3c <
>8f78		0a 93					.word	BinaryCompareEqual               ; $3d =
>8f7a		1e 93					.word	BinaryCompareGreater             ; $3e >
>8f7c		dc 96					.word	ByteIndirect                     ; $3f ?
.8f7e						VectorSet0:
>8f7e		54 8e					.word	EOLCommand                       ; $80 !0:EOF
>8f80		eb 8e					.word	Shift1Command                    ; $81 !1:SH1
>8f82		f3 8e					.word	Shift2Command                    ; $82 !2:SH2
>8f84		5e 9d					.word	AbsUnary                         ; $83 ABS(
>8f86		6c 9d					.word	AllocUnary                       ; $84 ALLOC(
>8f88		dc 9d					.word	AscUnary                         ; $85 ASC(
>8f8a		c0 9f					.word	ChrUnary                         ; $86 CHR$(
>8f8c		db a7					.word	UnaryEvent                       ; $87 EVENT(
>8f8e		06 93					.word	UnaryFalse                       ; $88 FALSE
>8f90		e9 9d					.word	FracUnary                        ; $89 FRAC(
>8f92		58 a3					.word	SyntaxError                      ; $8a GETDATE$(
>8f94		58 a3					.word	SyntaxError                      ; $8b GETTIME$(
>8f96		65 a7					.word	UnaryHit                         ; $8c HIT(
>8f98		fe 9d					.word	IntUnary                         ; $8d INT(
>8f9a		7f 9f					.word	IsValUnary                       ; $8e ISVAL(
>8f9c		5f a8					.word	UnaryJoyB                        ; $8f JOYB(
>8f9e		38 a8					.word	UnaryJoyX                        ; $90 JOYX(
>8fa0		3b a8					.word	UnaryJoyY                        ; $91 JOYY(
>8fa2		93 a0					.word	Unary_Left                       ; $92 LEFT$(
>8fa4		0f 9e					.word	LenUnary                         ; $93 LEN(
>8fa6		2d 9e					.word	Unary_Max                        ; $94 MAX(
>8fa8		b5 a0					.word	Unary_Mid                        ; $95 MID$(
>8faa		29 9e					.word	Unary_Min                        ; $96 MIN(
>8fac		78 9e					.word	Unary_Not                        ; $97 NOT(
>8fae		8b 9e					.word	PeekByteUnary                    ; $98 PEEK(
>8fb0		97 9e					.word	PeekDUnary                       ; $99 PEEKD(
>8fb2		93 9e					.word	PeekLUnary                       ; $9a PEEKL(
>8fb4		8f 9e					.word	PeekWUnary                       ; $9b PEEKW(
>8fb6		16 b2					.word	UnaryPlaying                     ; $9c PLAYING(
>8fb8		c4 9e					.word	Unary_Random                     ; $9d RANDOM(
>8fba		a0 a0					.word	Unary_Right                      ; $9e RIGHT$(
>8fbc		e1 9e					.word	Unary_Rnd                        ; $9f RND(
>8fbe		57 9f					.word	SgnUnary                         ; $a0 SGN(
>8fc0		d2 9f					.word	SpcUnary                         ; $a1 SPC(
>8fc2		ed 9f					.word	Unary_Str                        ; $a2 STR$(
>8fc4		71 a8					.word	UnaryTimer                       ; $a3 TIMER(
>8fc6		fb 92					.word	UnaryTrue                        ; $a4 TRUE
>8fc8		75 9f					.word	ValUnary                         ; $a5 VAL(
>8fca		bf 87					.word	ForCommand                       ; $a6 FOR
>8fcc		02 89					.word	IfCommand                        ; $a7 IF
>8fce		fb 8e					.word	Unused1                          ; $a8 PROC
>8fd0		00 8e					.word	Command_REPEAT                   ; $a9 REPEAT
>8fd2		47 92					.word	Command_WHILE                    ; $aa WHILE
>8fd4		2b 89					.word	EndIf                            ; $ab ENDIF
>8fd6		88 8d					.word	Command_ENDPROC                  ; $ac ENDPROC
>8fd8		71 88					.word	NextCommand                      ; $ad NEXT
>8fda		fb 8e					.word	Unused4                          ; $ae THEN
>8fdc		09 8e					.word	Command_UNTIL                    ; $af UNTIL
>8fde		68 92					.word	Command_WEND                     ; $b0 WEND
>8fe0		58 a3					.word	SyntaxError                      ; $b1 BY
>8fe2		df 85					.word	CallCommand                      ; $b2 CALL
>8fe4		19 a5					.word	CircleCommand                    ; $b3 CIRCLE
>8fe6		14 86					.word	ClearCommand                     ; $b4 CLEAR
>8fe8		6c 86					.word	ClearScreen                      ; $b5 CLS
>8fea		58 a3					.word	SyntaxError                      ; $b6 COLOR
>8fec		58 a3					.word	SyntaxError                      ; $b7 COLOUR
>8fee		31 89					.word	Command_CPrint                   ; $b8 CPRINT
>8ff0		74 86					.word	Command_Data                     ; $b9 DATA
>8ff2		7c 86					.word	DimCommand                       ; $ba DIM
>8ff4		fb 8e					.word	Unused3                          ; $bb DOWNTO
>8ff6		24 89					.word	ElseCode                         ; $bc ELSE
>8ff8		58 a3					.word	SyntaxError                      ; $bd FROM
>8ffa		38 a7					.word	GfxCommand                       ; $be GFX
>8ffc		ca 88					.word	Command_GOSUB                    ; $bf GOSUB
>8ffe		e8 88					.word	GotoCommand                      ; $c0 GOTO
>9000		58 a3					.word	SyntaxError                      ; $c1 HERE
>9002		42 a5					.word	ImageCommand                     ; $c2 IMAGE
>9004		2c 89					.word	Command_Input                    ; $c3 INPUT
>9006		26 8a					.word	LetCommand                       ; $c4 LET
>9008		94 a5					.word	LineCommand                      ; $c5 LINE
>900a		1c 8c					.word	Command_LOCAL                    ; $c6 LOCAL
>900c		58 a3					.word	SyntaxError                      ; $c7 OFF
>900e		58 a3					.word	SyntaxError                      ; $c8 ON
>9010		58 a3					.word	SyntaxError                      ; $c9 OUTLINE
>9012		89 a7					.word	PaletteCommand                   ; $ca PALETTE
>9014		8d a5					.word	PlotCommand                      ; $cb PLOT
>9016		ed 8c					.word	PokeBCommand                     ; $cc POKE
>9018		f9 8c					.word	PokeDCommand                     ; $cd POKED
>901a		f5 8c					.word	PokeLCommand                     ; $ce POKEL
>901c		f1 8c					.word	PokeWCommand                     ; $cf POKEW
>901e		38 89					.word	Command_Print                    ; $d0 PRINT
>9020		96 8d					.word	Command_Read                     ; $d1 READ
>9022		15 a5					.word	RectangleCommand                 ; $d2 RECT
>9024		f3 8d					.word	RemCommand                       ; $d3 REM
>9026		da 88					.word	Command_RETURN                   ; $d4 RETURN
>9028		58 a3					.word	SyntaxError                      ; $d5 SOLID
>902a		32 b2					.word	SoundCommand                     ; $d6 SOUND
>902c		24 a5					.word	SpriteCommand                    ; $d7 SPRITE
>902e		5e a5					.word	TextCommand                      ; $d8 TEXT
>9030		fb 8e					.word	Unused2                          ; $d9 TO
.9032						VectorSet1:
>9032		58 a3					.word	SyntaxError                      ; $80 !0:EOF
>9034		58 a3					.word	SyntaxError                      ; $81 !1:SH1
>9036		58 a3					.word	SyntaxError                      ; $82 !2:SH2
>9038		93 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>903a		af 84					.word	AssertCommand                    ; $84 ASSERT
>903c		d8 a6					.word	BitmapCtrl                       ; $85 BITMAP
>903e		bf 84					.word	Command_BLoad                    ; $86 BLOAD
>9040		5d 85					.word	Command_BSave                    ; $87 BSAVE
>9042		39 87					.word	Command_Dir                      ; $88 DIR
>9044		b5 87					.word	Command_Drive                    ; $89 DRIVE
>9046		bc 87					.word	EndCommand                       ; $8a END
>9048		ea b1					.word	Explode                          ; $8b EXPLODE
>904a		58 a3					.word	SyntaxError                      ; $8c GO
>904c		58 a3					.word	SyntaxError                      ; $8d HIMEM
>904e		76 8a					.word	Command_List                     ; $8e LIST
>9050		7c 8b					.word	Command_Load                     ; $8f LOAD
>9052		dd 8c					.word	NewCommand                       ; $90 NEW
>9054		c6 b1					.word	PingCommand                      ; $91 PING
>9056		22 8e					.word	Command_Restore                  ; $92 RESTORE
>9058		61 8e					.word	CommandRUN                       ; $93 RUN
>905a		f6 90					.word	Command_Save                     ; $94 SAVE
>905c		58 a3					.word	SyntaxError                      ; $95 SETDATE
>905e		58 a3					.word	SyntaxError                      ; $96 SETTIME
>9060		de b1					.word	ShootCommand                     ; $97 SHOOT
>9062		1d a7					.word	SpritesCtrl                      ; $98 SPRITES
>9064		7a 91					.word	StopCommand                      ; $99 STOP
>9066		f1 b3					.word	Command_VERIFY                   ; $9a VERIFY
>9068		d2 a7					.word	XGoCommand                       ; $9b XGO
>906a		c9 a7					.word	XLoadCommand                     ; $9c XLOAD
>906c		d2 b1					.word	ZapCommand                       ; $9d ZAP
.906e						VectorSet2:
>906e		58 a3					.word	SyntaxError                      ; $80 !0:EOF
>9070		58 a3					.word	SyntaxError                      ; $81 !1:SH1
>9072		58 a3					.word	SyntaxError                      ; $82 !2:SH2
>9074		17 a2					.word	Assemble_adc                     ; $83 ADC
>9076		0f a2					.word	Assemble_and                     ; $84 AND
>9078		2b a2					.word	Assemble_asl                     ; $85 ASL
>907a		95 a2					.word	Assemble_bcc                     ; $86 BCC
>907c		99 a2					.word	Assemble_bcs                     ; $87 BCS
>907e		a1 a2					.word	Assemble_beq                     ; $88 BEQ
>9080		58 a2					.word	Assemble_bit                     ; $89 BIT
>9082		89 a2					.word	Assemble_bmi                     ; $8a BMI
>9084		9d a2					.word	Assemble_bne                     ; $8b BNE
>9086		85 a2					.word	Assemble_bpl                     ; $8c BPL
>9088		a5 a2					.word	Assemble_bra                     ; $8d BRA
>908a		a9 a2					.word	Assemble_brk                     ; $8e BRK
>908c		8d a2					.word	Assemble_bvc                     ; $8f BVC
>908e		91 a2					.word	Assemble_bvs                     ; $90 BVS
>9090		b1 a2					.word	Assemble_clc                     ; $91 CLC
>9092		05 a3					.word	Assemble_cld                     ; $92 CLD
>9094		c5 a2					.word	Assemble_cli                     ; $93 CLI
>9096		f5 a2					.word	Assemble_clv                     ; $94 CLV
>9098		23 a2					.word	Assemble_cmp                     ; $95 CMP
>909a		6c a2					.word	Assemble_cpx                     ; $96 CPX
>909c		67 a2					.word	Assemble_cpy                     ; $97 CPY
>909e		49 a2					.word	Assemble_dec                     ; $98 DEC
>90a0		01 a3					.word	Assemble_dex                     ; $99 DEX
>90a2		dd a2					.word	Assemble_dey                     ; $9a DEY
>90a4		13 a2					.word	Assemble_eor                     ; $9b EOR
>90a6		4e a2					.word	Assemble_inc                     ; $9c INC
>90a8		11 a3					.word	Assemble_inx                     ; $9d INX
>90aa		fd a2					.word	Assemble_iny                     ; $9e INY
>90ac		80 a2					.word	Assemble_jmp                     ; $9f JMP
>90ae		7b a2					.word	Assemble_jsr                     ; $a0 JSR
>90b0		1f a2					.word	Assemble_lda                     ; $a1 LDA
>90b2		44 a2					.word	Assemble_ldx                     ; $a2 LDX
>90b4		62 a2					.word	Assemble_ldy                     ; $a3 LDY
>90b6		35 a2					.word	Assemble_lsr                     ; $a4 LSR
>90b8		15 a3					.word	Assemble_nop                     ; $a5 NOP
>90ba		0b a2					.word	Assemble_ora                     ; $a6 ORA
>90bc		c1 a2					.word	Assemble_pha                     ; $a7 PHA
>90be		ad a2					.word	Assemble_php                     ; $a8 PHP
>90c0		09 a3					.word	Assemble_phx                     ; $a9 PHX
>90c2		c9 a2					.word	Assemble_phy                     ; $aa PHY
>90c4		d1 a2					.word	Assemble_pla                     ; $ab PLA
>90c6		b5 a2					.word	Assemble_plp                     ; $ac PLP
>90c8		1d a3					.word	Assemble_plx                     ; $ad PLX
>90ca		d9 a2					.word	Assemble_ply                     ; $ae PLY
>90cc		30 a2					.word	Assemble_rol                     ; $af ROL
>90ce		3a a2					.word	Assemble_ror                     ; $b0 ROR
>90d0		bd a2					.word	Assemble_rti                     ; $b1 RTI
>90d2		cd a2					.word	Assemble_rts                     ; $b2 RTS
>90d4		27 a2					.word	Assemble_sbc                     ; $b3 SBC
>90d6		b9 a2					.word	Assemble_sec                     ; $b4 SEC
>90d8		19 a3					.word	Assemble_sed                     ; $b5 SED
>90da		d5 a2					.word	Assemble_sei                     ; $b6 SEI
>90dc		1b a2					.word	Assemble_sta                     ; $b7 STA
>90de		0d a3					.word	Assemble_stp                     ; $b8 STP
>90e0		3f a2					.word	Assemble_stx                     ; $b9 STX
>90e2		5d a2					.word	Assemble_sty                     ; $ba STY
>90e4		53 a2					.word	Assemble_stz                     ; $bb STZ
>90e6		f1 a2					.word	Assemble_tax                     ; $bc TAX
>90e8		ed a2					.word	Assemble_tay                     ; $bd TAY
>90ea		76 a2					.word	Assemble_trb                     ; $be TRB
>90ec		71 a2					.word	Assemble_tsb                     ; $bf TSB
>90ee		f9 a2					.word	Assemble_tsx                     ; $c0 TSX
>90f0		e1 a2					.word	Assemble_txa                     ; $c1 TXA
>90f2		e9 a2					.word	Assemble_txs                     ; $c2 TXS
>90f4		e5 a2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.90f6						Command_Save:
.90f6		20 32 a1	jsr $a132			jsr 	EvaluateString 				; file name to load
.90f9		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.90fb		a5 36		lda $36				lda 	zTemp0
.90fd		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.9100		b0 2f		bcs $9131			bcs 	CSErrorHandler 				; error, so fail.
.9102		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.9105		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9107		85 30		sta $30				sta 	codePtr
.9109		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.910b		85 31		sta $31				sta 	codePtr+1
.910d						_CSLoop:
.910d		b2 30		lda ($30)			lda 	(codePtr)
.910f		f0 17		beq $9128			beq 	_CSExit
.9111		20 55 91	jsr $9155			jsr 	CSGetCleanLine
.9114		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.9116		85 36		sta $36				sta 	zTemp0
.9118		20 34 91	jsr $9134			jsr 	CLWriteByteBlock 			; write the block out.
.911b		18		clc				clc
.911c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.911e		65 30		adc $30				adc 	codePtr
.9120		85 30		sta $30				sta 	codePtr
.9122		90 02		bcc $9126			bcc 	_CREExit
.9124		e6 31		inc $31				inc 	codePtr+1 					; carry
.9126						_CREExit:
.9126		80 e5		bra $910d			bra 	_CSLoop
.9128						_CSExit:
.9128		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; close file
.912b		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.912e		4c af 8b	jmp $8baf			jmp 	CLComplete 					; display complete message.
.9131						CSErrorHandler:
.9131		4c cc 8b	jmp $8bcc			jmp 	CLErrorHandler
.9134						CLWriteByteBlock:
.9134		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.9136		f0 1c		beq $9154			beq 	_CLWBBExit					; if so, exit
.9138		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; stream to write, count in X
.913b		20 71 80	jsr $8071			jsr 	KNLWriteBlock 				; call one write attempt
.913e		b0 f1		bcs $9131			bcs 	CSErrorHandler 				; error occurred
.9140		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.9142		8a		txa				txa 								; subtract bytes written from X, total count.
.9143		38		sec				sec
.9144		e5 38		sbc $38				sbc 	zTemp1
.9146		aa		tax				tax
.9147		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.9148		a5 36		lda $36				lda 	zTemp0
.914a		65 38		adc $38				adc 	zTemp1
.914c		85 36		sta $36				sta 	zTemp0
.914e		90 e4		bcc $9134			bcc 	CLWriteByteBlock
.9150		e6 37		inc $37				inc 	zTemp0+1
.9152		80 e0		bra $9134			bra 	CLWriteByteBlock 			; and retry write out.
.9154						_CLWBBExit:
.9154		60		rts				rts
.9155						CSGetCleanLine:
.9155		a9 00		lda #$00			lda 	#0 							; no indent.
.9157		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.915a		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.915c		a0 00		ldy #$00			ldy 	#0
.915e						_CSClean:
.915e		b9 ad 02	lda $02ad,y			lda 	tokenBuffer,y
.9161		f0 09		beq $916c			beq 	_CSDoneClean
.9163		30 04		bmi $9169			bmi 	_CSIgnoreCharacter
.9165		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.9168		e8		inx				inx
.9169						_CSIgnoreCharacter:
.9169		c8		iny				iny
.916a		80 f2		bra $915e			bra 	_CSClean
.916c						_CSDoneClean:
.916c		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.916e		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.9171		e8		inx				inx
.9172		9e aa 03	stz $03aa,x			stz 	lineBuffer,x
.9175		a0 03		ldy #$03			ldy 	#(lineBuffer >> 8) 			; line address in YA
.9177		a9 aa		lda #$aa			lda 	#(lineBuffer & $FF)
.9179		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.917a						StopCommand:
.917a		a9 08		lda #$08		lda	#8
.917c		4c 8f 92	jmp $928f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.917f						ProcedureScan:
.917f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9181		85 30		sta $30				sta 	codePtr
.9183		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9185		85 31		sta $31				sta 	codePtr+1
.9187						_PSLoop:
.9187		b2 30		lda ($30)			lda 	(codePtr)
.9189		f0 42		beq $91cd			beq 	_PSExit
.918b		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.918d		b1 30		lda ($30),y			lda 	(codePtr),y
.918f		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.9191		d0 2d		bne $91c0			bne 	_PSNext
.9193		c8		iny				iny 								; get the address of the record to zTemp0 and
.9194		b1 30		lda ($30),y			lda 	(codePtr),y
.9196		29 c0		and #$c0			and 	#$C0
.9198		c9 40		cmp #$40			cmp 	#$40
.919a		d0 32		bne $91ce			bne 	_PSSyntax
.919c		b1 30		lda ($30),y			lda 	(codePtr),y
.919e		18		clc				clc
.919f		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.91a1		85 37		sta $37				sta 	zTemp0+1
.91a3		c8		iny				iny 								; LSB
.91a4		b1 30		lda ($30),y			lda 	(codePtr),y
.91a6		85 36		sta $36				sta 	zTemp0
.91a8		c8		iny				iny 								; character after variable call.
.91a9		98		tya				tya 								; save Y offset at +7 (exponent slot)
.91aa		a0 07		ldy #$07			ldy 	#7
.91ac		91 36		sta ($36),y			sta 	(zTemp0),y
.91ae		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.91b0		a0 02		ldy #$02			ldy 	#2
.91b2		91 36		sta ($36),y			sta 	(zTemp0),y
.91b4		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.91b6						_PSCopy:
.91b6		b5 30		lda $30,x			lda 	safePtr,x
.91b8		c8		iny				iny
.91b9		91 36		sta ($36),y			sta 	(zTemp0),y
.91bb		e8		inx				inx
.91bc		e0 04		cpx #$04			cpx 	#4
.91be		d0 f6		bne $91b6			bne 	_PSCopy
.91c0						_PSNext:
.91c0		18		clc				clc
.91c1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.91c3		65 30		adc $30				adc 	codePtr
.91c5		85 30		sta $30				sta 	codePtr
.91c7		90 02		bcc $91cb			bcc 	_CREExit
.91c9		e6 31		inc $31				inc 	codePtr+1 					; carry
.91cb						_CREExit:
.91cb		80 ba		bra $9187			bra 	_PSLoop
.91cd						_PSExit:
.91cd		60		rts				rts
.91ce						_PSSyntax:
.91ce		4c 58 a3	jmp $a358			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.91d1						ScanForward:
.91d1		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.91d3		86 37		stx $37				stx 	zTemp0+1
.91d5		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.91d7						_ScanLoop:
.91d7		b1 30		lda ($30),y			lda 	(codePtr),y
.91d9		c8		iny				iny
.91da		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.91dc		d0 0e		bne $91ec			bne 	_ScanGoNext
.91de		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.91e0		f0 04		beq $91e6			beq 	_ScanMatch
.91e2		c5 37		cmp $37				cmp 	zTemp0+1
.91e4		d0 06		bne $91ec			bne 	_ScanGoNext
.91e6						_ScanMatch:
.91e6		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.91e8		d0 01		bne $91eb			bne 	_ScanNotEndEOL
.91ea		88		dey				dey
.91eb						_ScanNotEndEOL:
.91eb		60		rts				rts
.91ec						_ScanGoNext:
.91ec		20 f1 91	jsr $91f1			jsr  	ScanForwardOne 				; allows for shifts and so on.
.91ef		80 e6		bra $91d7			bra 	_ScanLoop
.91f1						ScanForwardOne:
.91f1		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.91f3		90 3e		bcc $9233			bcc 	_SFWExit
.91f5		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.91f7		90 18		bcc $9211			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.91f9		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.91fb		b0 2f		bcs $922c			bcs 	_ScanSkipData
.91fd		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.91ff		90 32		bcc $9233			bcc 	_SFWExit 					; if not, ordinary keywords.
.9201		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.9203		b0 2e		bcs $9233			bcs 	_SFWExit
.9205		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9207		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9209		b0 28		bcs $9233			bcs 	_SFWExit
.920b		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.920d		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.920f		80 22		bra $9233			bra 	_SFWExit
.9211						_ScanSkipOne:
.9211		c8		iny				iny 								; consume the extra one.
.9212		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9214		d0 1d		bne $9233			bne 	_SFWExit
.9216		18		clc				clc
.9217		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9219		65 30		adc $30				adc 	codePtr
.921b		85 30		sta $30				sta 	codePtr
.921d		90 02		bcc $9221			bcc 	_CREExit
.921f		e6 31		inc $31				inc 	codePtr+1 					; carry
.9221						_CREExit:
.9221		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9223		b2 30		lda ($30)			lda 	(codePtr)
.9225		d0 0c		bne $9233			bne 	_SFWExit 					; if not zero, more to scan
.9227		a9 13		lda #$13		lda	#19
.9229		4c 8f 92	jmp $928f		jmp	ErrorHandler
.922c						_ScanSkipData:
.922c		88		dey				dey 								; point at data token
.922d		c8		iny				iny 								; point to offset
.922e		98		tya				tya 								; A = offset position
.922f		38		sec				sec 								; add size +1 hence SEC
.9230		71 30		adc ($30),y			adc 	(codePtr),y
.9232		a8		tay				tay 								; make current position.
.9233						_SFWExit:
.9233		60		rts				rts
.9234						ScanGetCurrentLineStep:
.9234		64 38		stz $38				stz 	zTemp1
.9236		a0 03		ldy #$03			ldy 	#3
.9238						_SGCLSLoop:
.9238		b1 30		lda ($30),y			lda 	(codePtr),y
.923a		c8		iny				iny
.923b		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.923d		f0 05		beq $9244			beq 	_SGCLSExit
.923f		20 f1 91	jsr $91f1			jsr 	ScanForwardOne
.9242		80 f4		bra $9238			bra 	_SGCLSLoop
.9244						_SGCLSExit:
.9244		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9246		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9247						Command_WHILE:
.9247		5a		phy				phy 								; save position of the test
.9248		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.924a		20 28 a1	jsr $a128			jsr 	EvaluateNumber
.924d		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; check if zero
.9250		f0 0e		beq $9260			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9252		98		tya				tya 								; position *after* test.
.9253		7a		ply				ply 								; restore position before test, at WHILE
.9254		88		dey				dey 								; so we execute the WHILE command again.
.9255		48		pha				pha 								; push after test on the stack
.9256		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9258		20 b9 b2	jsr $b2b9			jsr 	StackOpen
.925b		20 fe b2	jsr $b2fe			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.925e		7a		ply				ply 								; restore the position *after* the test
.925f		60		rts				rts
.9260						_WHExitLoop:
.9260		68		pla				pla 								; throw post loop position
.9261		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.9263		aa		tax				tax
.9264		20 d1 91	jsr $91d1			jsr 	ScanForward
.9267		60		rts				rts
.9268						Command_WEND:
.9268		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.926a		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.926c		20 e6 b2	jsr $b2e6			jsr 	StackCheckFrame
.926f		20 0f b3	jsr $b30f			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9272		20 d8 b2	jsr $b2d8			jsr 	StackClose		 			; erase the frame
.9275		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9276						CheckRightBracket:
.9276		b1 30		lda ($30),y			lda 	(codePtr),y
.9278		c8		iny				iny
.9279		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.927b		d0 0f		bne $928c			bne 	CNAFail
.927d		60		rts				rts
.927e						CheckComma:
.927e		b1 30		lda ($30),y			lda 	(codePtr),y
.9280		c8		iny				iny
.9281		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9283		d0 07		bne $928c			bne 	CNAFail
.9285		60		rts				rts
.9286						CheckNextA:
.9286		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9288		d0 02		bne $928c			bne 	CNAFail
.928a		c8		iny				iny 								; skip character
.928b		60		rts				rts 								; and exit
.928c						CNAFail:
.928c		4c 58 a3	jmp $a358			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.928f						ErrorHandler:
.928f		a8		tay				tay 								; find the error text
.9290		f0 49		beq $92db			beq 	_EHEnd
.9292		a2 00		ldx #$00			ldx 	#0
.9294		a9 71		lda #$71			lda 	#((ErrorText) & $FF)
.9296		85 36		sta $36				sta 	0+zTemp0
.9298		a9 a3		lda #$a3			lda 	#((ErrorText) >> 8)
.929a		85 37		sta $37				sta 	1+zTemp0
.929c						_EHFind:
.929c		88		dey				dey 								; keep looking through text
.929d		f0 0e		beq $92ad			beq 	_EHFound
.929f						_EHFindZero:
.929f		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.92a1		e6 36		inc $36				inc 	zTemp0
.92a3		d0 02		bne $92a7			bne 	_EHFNoCarry
.92a5		e6 37		inc $37				inc 	zTemp0+1
.92a7						_EHFNoCarry:
.92a7		c9 00		cmp #$00			cmp 	#0
.92a9		d0 f4		bne $929f			bne 	_EHFindZero
.92ab		80 ef		bra $929c			bra 	_EHFind
.92ad						_EHFound:
.92ad		a5 36		lda $36				lda 	zTemp0 						; print message
.92af		a6 37		ldx $37				ldx 	zTemp0+1
.92b1		20 e8 92	jsr $92e8			jsr 	PrintStringXA
.92b4		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.92b6		b1 30		lda ($30),y			lda 	(codePtr),y
.92b8		d0 05		bne $92bf			bne 	_EHAtMsg
.92ba		c8		iny				iny
.92bb		b1 30		lda ($30),y			lda 	(codePtr),y
.92bd		f0 17		beq $92d6			beq 	_EHCREnd
.92bf						_EHAtMsg:
.92bf		a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.92c1		a9 de		lda #$de			lda 	#_AtMsg & $FF
.92c3		20 e8 92	jsr $92e8			jsr 	PrintStringXA
.92c6		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.92c8		b1 30		lda ($30),y			lda 	(codePtr),y
.92ca		48		pha				pha
.92cb		c8		iny				iny
.92cc		b1 30		lda ($30),y			lda 	(codePtr),y
.92ce		aa		tax				tax
.92cf		68		pla				pla
.92d0		20 fe 96	jsr $96fe			jsr 	ConvertInt16 				; convert XA to string
.92d3		20 e8 92	jsr $92e8			jsr 	PrintStringXA 				; and print it.
.92d6						_EHCREnd:
.92d6		a9 0d		lda #$0d			lda 	#13 						; new line
.92d8		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.92db						_EHEnd:
.92db		4c 5e 84	jmp $845e			jmp 	WarmStart
>92de		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>92e6		20 00
.92e8						PrintStringXA:
.92e8		5a		phy				phy
.92e9		86 37		stx $37				stx 	zTemp0+1
.92eb		85 36		sta $36				sta 	zTemp0
.92ed		a0 00		ldy #$00			ldy 	#0
.92ef						_PSXALoop:
.92ef		b1 36		lda ($36),y			lda 	(zTemp0),y
.92f1		f0 06		beq $92f9			beq 	_PSXAExit
.92f3		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.92f6		c8		iny				iny
.92f7		80 f6		bra $92ef			bra 	_PSXALoop
.92f9						_PSXAExit:
.92f9		7a		ply				ply
.92fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.92fb						UnaryTrue:
.92fb		fa		plx				plx
.92fc						ReturnTrue:
.92fc		a9 01		lda #$01			lda 	#1  						; set to 1
.92fe		20 dc a1	jsr $a1dc			jsr 	NSMSetByte
.9301		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9303		95 50		sta $50,x			sta 	NSStatus,x
.9305		60		rts				rts
.9306						UnaryFalse:
.9306		fa		plx				plx
.9307						ReturnFalse:
.9307		4c da a1	jmp $a1da			jmp 	NSMSetZero 					; set it all to zero
.930a						BinaryCompareEqual:
.930a		fa		plx				plx
.930b		20 46 93	jsr $9346			jsr 	CompareBaseCode
.930e		c9 00		cmp #$00			cmp 	#0
.9310		f0 ea		beq $92fc			beq 	ReturnTrue
.9312		80 f3		bra $9307			bra 	ReturnFalse
.9314						BinaryCompareLess:
.9314		fa		plx				plx
.9315		20 46 93	jsr $9346			jsr 	CompareBaseCode
.9318		c9 ff		cmp #$ff			cmp 	#$FF
.931a		f0 e0		beq $92fc			beq 	ReturnTrue
.931c		80 e9		bra $9307			bra 	ReturnFalse
.931e						BinaryCompareGreater:
.931e		fa		plx				plx
.931f		20 46 93	jsr $9346			jsr 	CompareBaseCode
.9322		c9 01		cmp #$01			cmp 	#1
.9324		f0 d6		beq $92fc			beq 	ReturnTrue
.9326		80 df		bra $9307			bra 	ReturnFalse
.9328						BinaryCompareNotEqual:
.9328		fa		plx				plx
.9329		20 46 93	jsr $9346			jsr 	CompareBaseCode
.932c		c9 00		cmp #$00			cmp 	#0
.932e		d0 cc		bne $92fc			bne 	ReturnTrue
.9330		80 d5		bra $9307			bra 	ReturnFalse
.9332						BinaryCompareLessEqual:
.9332		fa		plx				plx
.9333		20 46 93	jsr $9346			jsr 	CompareBaseCode
.9336		c9 01		cmp #$01			cmp 	#1
.9338		d0 c2		bne $92fc			bne 	ReturnTrue
.933a		80 cb		bra $9307			bra 	ReturnFalse
.933c						BinaryCompareGreaterEqual:
.933c		fa		plx				plx
.933d		20 46 93	jsr $9346			jsr 	CompareBaseCode
.9340		c9 ff		cmp #$ff			cmp 	#$FF
.9342		d0 b8		bne $92fc			bne 	ReturnTrue
.9344		80 c1		bra $9307			bra 	ReturnFalse
.9346						CompareBaseCode:
.9346		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; make both values if references.
.9349		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.934b		15 51		ora $51,x			ora 	NSStatus+1,x
.934d		29 10		and #$10			and 	#NSTString
.934f		d0 37		bne $9388			bne 	_CBCString 					; if so do string code, which will check if both.
.9351		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9353		15 79		ora $79,x			ora 	NSExponent+1,x
.9355		d0 34		bne $938b			bne 	_CBCFloat
.9357		b5 50		lda $50,x			lda 	NSStatus,x
.9359		15 51		ora $51,x			ora 	NSStatus+1,x
.935b		29 08		and #$08			and 	#NSTFloat
.935d		d0 2c		bne $938b			bne 	_CBCFloat
.935f		20 8e 93	jsr $938e			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9362		e8		inx				inx
.9363		20 8e 93	jsr $938e			jsr 	CompareFixMinusZero
.9366		ca		dex				dex
.9367		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9369		55 51		eor $51,x			eor 	NSStatus+1,x
.936b		10 0a		bpl $9377			bpl 	_CDCSameSign
.936d		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.936f		30 14		bmi $9385			bmi 	_CBCLess 					; return $FF
.9371						_CBCGreater:
.9371		a9 01		lda #$01			lda 	#1
.9373		60		rts				rts
.9374						_CBCEqual:
.9374		a9 00		lda #$00			lda 	#0
.9376		60		rts				rts
.9377						_CDCSameSign:
.9377		20 a3 95	jsr $95a3			jsr 	SubTopTwoStack 				; unsigned subtract
.937a		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; or the mantissa together
.937d		f0 f5		beq $9374			beq 	_CBCEqual 					; -0 == 0
.937f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9381		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9383		10 ec		bpl $9371			bpl 	_CBCGreater
.9385						_CBCLess:
.9385		a9 ff		lda #$ff			lda 	#$FF
.9387		60		rts				rts
.9388						_CBCString:
.9388		4c 14 95	jmp $9514			jmp 	CompareStrings
.938b						_CBCFloat:
.938b		4c 5e 98	jmp $985e			jmp 	CompareFloat
.938e						CompareFixMinusZero:
.938e		20 fc a1	jsr $a1fc			jsr 	NSMIsZero
.9391		d0 02		bne $9395			bne 	_CFXMZNotZero
.9393		74 50		stz $50,x			stz 	NSStatus,x
.9395						_CFXMZNotZero:
.9395		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9396						StringConcat:
.9396		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9398		35 51		and $51,x			and 	NSStatus+1,x
.939a		29 18		and #$18			and 	#NSBTypeMask
.939c		c9 10		cmp #$10			cmp 	#NSTString
.939e		d0 50		bne $93f0			bne		_SCType
.93a0		64 38		stz $38				stz 	zTemp1 						; counting total length
.93a2		e8		inx				inx
.93a3		20 c1 93	jsr $93c1			jsr 	_SCSetupZ0 					; setup for second
.93a6		20 ca 93	jsr $93ca			jsr 	_SCLengthZ0 				; length for second
.93a9		ca		dex				dex
.93aa		20 c1 93	jsr $93c1			jsr 	_SCSetupZ0 					; setup for first
.93ad		20 ca 93	jsr $93ca			jsr 	_SCLengthZ0 				; length for first
.93b0		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.93b2		20 a9 b3	jsr $b3a9			jsr 	StringTempAllocate
.93b5		20 e1 93	jsr $93e1			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.93b8		e8		inx				inx
.93b9		20 c1 93	jsr $93c1			jsr 	_SCSetupZ0 					; copy second out
.93bc		20 e1 93	jsr $93e1			jsr 	_SCCopy
.93bf		ca		dex				dex
.93c0		60		rts				rts
.93c1						_SCSetupZ0:
.93c1		b5 58		lda $58,x			lda 	NSMantissa0,x
.93c3		85 36		sta $36				sta 	zTemp0
.93c5		b5 60		lda $60,x			lda 	NSMantissa1,x
.93c7		85 37		sta $37				sta 	zTemp0+1
.93c9		60		rts				rts
.93ca						_SCLengthZ0:
.93ca		5a		phy				phy
.93cb		a0 00		ldy #$00			ldy 	#0
.93cd						_SCLenLoop:
.93cd		b1 36		lda ($36),y			lda 	(zTemp0),y
.93cf		f0 0e		beq $93df			beq 	_SCLExit
.93d1		c8		iny				iny
.93d2		e6 38		inc $38				inc 	zTemp1
.93d4		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.93d6		c9 fd		cmp #$fd			cmp 	#253
.93d8		d0 f3		bne $93cd			bne		_SCLenLoop
.93da		a9 09		lda #$09		lda	#9
.93dc		4c 8f 92	jmp $928f		jmp	ErrorHandler
.93df						_SCLExit:
.93df		7a		ply				ply
.93e0		60		rts				rts
.93e1						_SCCopy:
.93e1		5a		phy				phy
.93e2		a0 00		ldy #$00			ldy 	#0
.93e4						_SCCopyLoop:
.93e4		b1 36		lda ($36),y			lda 	(zTemp0),y
.93e6		f0 06		beq $93ee			beq 	_SCCExit
.93e8		20 e2 b3	jsr $b3e2			jsr 	StringTempWrite
.93eb		c8		iny				iny
.93ec		80 f6		bra $93e4			bra 	_SCCopyLoop
.93ee						_SCCExit:
.93ee		7a		ply				ply
.93ef		60		rts				rts
.93f0						_SCType:
.93f0		4c 62 a3	jmp $a362			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.93f3						IntegerDivide:
.93f3		fa		plx				plx
.93f4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93f6		15 51		ora $51,x			ora 	NSStatus+1,x
.93f8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93f9		0a		asl a				asl 	a
.93fa		10 05		bpl $9401			bpl 	_NotRef
.93fc		48		pha				pha
.93fd		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9400		68		pla				pla
.9401						_NotRef:
.9401		0a		asl a				asl 	a
.9402		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9404		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9406		15 79		ora $79,x			ora 	NSExponent+1,x
.9408		f0 03		beq $940d			beq 	_IntegerCode 				; if clear, then we have two integers
.940a		4c 62 a3	jmp $a362			jmp 	TypeError 					; anything else, type mismatch.
.940d						_IntegerCode:
.940d		20 27 94	jsr $9427			jsr 	CheckDivideZero 			; do div zero check
.9410		20 59 94	jsr $9459			jsr 	Int32Divide 				; do the division
.9413		20 0a 95	jsr $950a			jsr 	CalculateSign 				; calculate result sign
.9416						NSMCopyPlusTwoToZero:
.9416		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9418		95 58		sta $58,x			sta 	NSMantissa0,x
.941a		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.941c		95 60		sta $60,x			sta 	NSMantissa1,x
.941e		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9420		95 68		sta $68,x			sta 	NSMantissa2,x
.9422		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9424		95 70		sta $70,x			sta 	NSMantissa3,x
.9426		60		rts				rts
.9427						CheckDivideZero:
.9427		e8		inx				inx
.9428		20 fc a1	jsr $a1fc			jsr 	NSMIsZero
.942b		f0 02		beq $942f			beq 	_CDVError
.942d		ca		dex				dex
.942e		60		rts				rts
.942f						_CDVError:
.942f		a9 03		lda #$03		lda	#3
.9431		4c 8f 92	jmp $928f		jmp	ErrorHandler
.9434						IntegerModulus:
.9434		fa		plx				plx
.9435		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9437		15 51		ora $51,x			ora 	NSStatus+1,x
.9439		0a		asl a				asl 	a 							; shift reference bit into sign bit
.943a		0a		asl a				asl 	a
.943b		10 05		bpl $9442			bpl 	_NotRef
.943d		48		pha				pha
.943e		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9441		68		pla				pla
.9442						_NotRef:
.9442		0a		asl a				asl 	a
.9443		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9445		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9447		15 79		ora $79,x			ora 	NSExponent+1,x
.9449		f0 03		beq $944e			beq 	_IntegerCode 				; if clear, then we have two integers
.944b		4c 62 a3	jmp $a362			jmp 	TypeError 					; anything else, type mismatch.
.944e						_IntegerCode:
.944e						IntegerModulusNoCheck:
.944e		20 27 94	jsr $9427			jsr 	CheckDivideZero 			; do div zero check
.9451		20 59 94	jsr $9459			jsr 	Int32Divide 				; do the division
.9454		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9456		56 50		lsr $50,x			lsr 	NSStatus,x
.9458		60		rts				rts
.9459						Int32Divide:
.9459		48		pha				pha 								; save AXY
.945a		5a		phy				phy
.945b		20 bd a1	jsr $a1bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.945e		20 d6 a1	jsr $a1d6			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9461		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9463						_I32DivideLoop:
.9463		e8		inx				inx
.9464		e8		inx				inx
.9465		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9468		ca		dex				dex
.9469		ca		dex				dex
.946a		20 ea a1	jsr $a1ea			jsr 	NSMRotateLeft
.946d		20 98 94	jsr $9498			jsr 	DivideCheckSubtract 		; check if subtract possible
.9470		90 02		bcc $9474			bcc 	_I32DivideNoCarryIn
.9472		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9474						_I32DivideNoCarryIn:
.9474		88		dey				dey 								; loop round till division completed.
.9475		d0 ec		bne $9463			bne 	_I32DivideLoop
.9477		7a		ply				ply 								; restore AXY and exit
.9478		68		pla				pla
.9479		60		rts				rts
.947a						Int32ShiftDivide:
.947a		48		pha				pha 								; save AY
.947b		5a		phy				phy
.947c		e8		inx				inx 								; clear S[X+2]
.947d		e8		inx				inx
.947e		20 da a1	jsr $a1da			jsr 	NSMSetZero
.9481		ca		dex				dex
.9482		ca		dex				dex
.9483		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9485						_I32SDLoop:
.9485		20 98 94	jsr $9498			jsr 	DivideCheckSubtract 		; check if subtract possible
.9488		e8		inx				inx
.9489		e8		inx				inx
.948a		20 ea a1	jsr $a1ea			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.948d		ca		dex				dex
.948e		ca		dex				dex
.948f		20 ea a1	jsr $a1ea			jsr 	NSMRotateLeft
.9492		88		dey				dey 	 							; do 31 times
.9493		d0 f0		bne $9485			bne 	_I32SDLoop
.9495		7a		ply				ply 								; restore AY and exit
.9496		68		pla				pla
.9497		60		rts				rts
.9498						DivideCheckSubtract:
.9498		20 a3 95	jsr $95a3			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.949b		b0 04		bcs $94a1			bcs 	_DCSExit 					; if carry set, then could do, exit
.949d		20 89 95	jsr $9589			jsr 	AddTopTwoStack 				; add it back in
.94a0		18		clc				clc 								; and return False
.94a1						_DCSExit:
.94a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.94a2						MulInteger:
.94a2		fa		plx				plx
.94a3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94a5		15 51		ora $51,x			ora 	NSStatus+1,x
.94a7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94a8		0a		asl a				asl 	a
.94a9		10 05		bpl $94b0			bpl 	_NotRef
.94ab		48		pha				pha
.94ac		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94af		68		pla				pla
.94b0						_NotRef:
.94b0		0a		asl a				asl 	a 							; put MSB of type into A:7
.94b1		30 09		bmi $94bc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94b3		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94b5		15 79		ora $79,x			ora 	NSExponent+1,x
.94b7		f0 06		beq $94bf			beq 	_IntegerCode 				; if clear, then we have two integers
.94b9		4c 20 99	jmp $9920			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.94bc						_StringData:
.94bc		4c 6c a3	jmp $a36c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94bf						_IntegerCode:
.94bf		20 cc 94	jsr $94cc			jsr 	MultiplyShort
.94c2		c9 00		cmp #$00			cmp 	#0
.94c4		f0 05		beq $94cb			beq 	_MIExit
.94c6		a9 04		lda #$04		lda	#4
.94c8		4c 8f 92	jmp $928f		jmp	ErrorHandler
.94cb						_MIExit:
.94cb		60		rts				rts
.94cc						MultiplyShort:
.94cc		5a		phy				phy 								; save Y
.94cd		20 bd a1	jsr $a1bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.94d0		20 d6 a1	jsr $a1d6			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.94d3		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.94d5						_I32MLoop:
.94d5		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.94d7		15 62		ora $62,x			ora 	NSMantissa1+2,x
.94d9		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.94db		15 72		ora $72,x			ora 	NSMantissa3+2,x
.94dd		f0 25		beq $9504			beq 	_I32MExit 					; exit if zero
.94df		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.94e1		29 01		and #$01			and 	#1
.94e3		f0 0d		beq $94f2			beq 	_I32MNoAdd
.94e5		20 89 95	jsr $9589			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.94e8		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.94ea		10 06		bpl $94f2			bpl 	_I32MNoAdd
.94ec						_I32ShiftRight:
.94ec		20 f3 a1	jsr $a1f3			jsr 	NSMShiftRight 				; shift S[X] right
.94ef		c8		iny				iny 								; increment shift count
.94f0		80 09		bra $94fb			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.94f2						_I32MNoAdd:
.94f2		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.94f4		70 f6		bvs $94ec			bvs 	_I32ShiftRight 				; instead.
.94f6		e8		inx				inx
.94f7		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.94fa		ca		dex				dex
.94fb						_I32MShiftUpper:
.94fb		e8		inx				inx 								; shift S[X+2] right
.94fc		e8		inx				inx
.94fd		20 f3 a1	jsr $a1f3			jsr 	NSMShiftRight
.9500		ca		dex				dex
.9501		ca		dex				dex
.9502		80 d1		bra $94d5			bra 	_I32MLoop 					; try again.
.9504						_I32MExit:
.9504		20 0a 95	jsr $950a			jsr 	CalculateSign
.9507		98		tya				tya 								; shift in A
.9508		7a		ply				ply 								; restore Y and exit
.9509		60		rts				rts
.950a						CalculateSign:
.950a		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.950c		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.950e		55 51		eor $51,x			eor 	NSStatus+1,x
.9510		0a		asl a				asl 	a 							; shift bit 7 into carry
.9511		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9513		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9514						CompareStrings:
.9514		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9516		35 51		and $51,x			and 	NSStatus+1,x
.9518		29 10		and #$10			and 	#NSBIsString
.951a		f0 28		beq $9544			beq 	_CSTypeError
.951c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.951e		85 36		sta $36				sta 	zTemp0
.9520		b5 60		lda $60,x			lda 	NSMantissa1,x
.9522		85 37		sta $37				sta 	zTemp0+1
.9524		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9526		85 38		sta $38				sta 	zTemp1
.9528		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.952a		85 39		sta $39				sta 	zTemp1+1
.952c		5a		phy				phy 								; save Y so we can access strings
.952d		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.952f						_CSLoop:
.952f		c8		iny				iny
.9530		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9532		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9534		d0 06		bne $953c			bne 	_CSDifferent
.9536		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9538		d0 f5		bne $952f			bne 	_CSLoop 					; still comparing
.953a						_CSExit:
.953a		7a		ply				ply 								; reached end, return zero in A from EOS
.953b		60		rts				rts
.953c						_CSDifferent:
.953c		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.953e		90 fa		bcc $953a			bcc		_CSExit
.9540		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9542		80 f6		bra $953a			bra 	_CSExit
.9544						_CSTypeError:
.9544		4c 62 a3	jmp $a362			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9547						ShiftLeft:
.9547		38		sec				sec 								; common code, carry determines which way.
.9548		80 01		bra $954b			bra 	ShiftMain
.954a						ShiftRight:
.954a		18		clc				clc
.954b						ShiftMain:
.954b		fa		plx				plx 								; restore X
.954c		08		php				php 								; save direction
.954d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.954f		15 51		ora $51,x			ora 	NSStatus+1,x
.9551		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9552		0a		asl a				asl 	a
.9553		10 05		bpl $955a			bpl 	_NotRef
.9555		48		pha				pha
.9556		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9559		68		pla				pla
.955a						_NotRef:
.955a		0a		asl a				asl 	a
.955b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.955d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.955f		15 79		ora $79,x			ora 	NSExponent+1,x
.9561		f0 03		beq $9566			beq 	_IntegerCode 				; if clear, then we have two integers
.9563		4c 62 a3	jmp $a362			jmp 	TypeError 					; anything else, type mismatch.
.9566						_IntegerCode:
.9566		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9568		29 e0		and #$e0			and 	#$E0
.956a		15 61		ora $61,x			ora 	NSMantissa1+1,x
.956c		15 69		ora $69,x			ora 	NSMantissa2+1,x
.956e		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9570		d0 12		bne $9584			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9572						_SMLoop:
.9572		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9574		30 11		bmi $9587			bmi 	_SMExit 					; exit if done.
.9576		28		plp				plp 								; restore direction setting
.9577		08		php				php
.9578		90 05		bcc $957f			bcc 	_SMRight
.957a		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; shift left if CS
.957d		80 f3		bra $9572			bra 	_SMLoop
.957f						_SMRight:
.957f		20 f3 a1	jsr $a1f3			jsr 	NSMShiftRight 				; shift right if CC
.9582		80 ee		bra $9572			bra 	_SMLoop
.9584						_SMExit0:
.9584		20 da a1	jsr $a1da			jsr 	NSMSetZero 					; return zero.
.9587						_SMExit:
.9587		28		plp				plp 								; throw direction
.9588		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9589						AddTopTwoStack:
.9589		18		clc				clc
.958a		b5 58		lda $58,x			lda		NSMantissa0,x
.958c		75 59		adc $59,x			adc 		NSMantissa0+1,x
.958e		95 58		sta $58,x			sta 	NSMantissa0,x
.9590		b5 60		lda $60,x			lda		NSMantissa1,x
.9592		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9594		95 60		sta $60,x			sta 	NSMantissa1,x
.9596		b5 68		lda $68,x			lda		NSMantissa2,x
.9598		75 69		adc $69,x			adc 		NSMantissa2+1,x
.959a		95 68		sta $68,x			sta 	NSMantissa2,x
.959c		b5 70		lda $70,x			lda		NSMantissa3,x
.959e		75 71		adc $71,x			adc 		NSMantissa3+1,x
.95a0		95 70		sta $70,x			sta 	NSMantissa3,x
.95a2		60		rts				rts
.95a3						SubTopTwoStack:
.95a3		38		sec				sec
.95a4		b5 58		lda $58,x			lda		NSMantissa0,x
.95a6		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.95a8		95 58		sta $58,x			sta 	NSMantissa0,x
.95aa		b5 60		lda $60,x			lda		NSMantissa1,x
.95ac		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.95ae		95 60		sta $60,x			sta 	NSMantissa1,x
.95b0		b5 68		lda $68,x			lda		NSMantissa2,x
.95b2		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.95b4		95 68		sta $68,x			sta 	NSMantissa2,x
.95b6		b5 70		lda $70,x			lda		NSMantissa3,x
.95b8		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.95ba		95 70		sta $70,x			sta 	NSMantissa3,x
.95bc		60		rts				rts
.95bd						AddInteger:
.95bd		fa		plx				plx
.95be		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95c0		15 51		ora $51,x			ora 	NSStatus+1,x
.95c2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95c3		0a		asl a				asl 	a
.95c4		10 05		bpl $95cb			bpl 	_NotRef
.95c6		48		pha				pha
.95c7		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95ca		68		pla				pla
.95cb						_NotRef:
.95cb		0a		asl a				asl 	a 							; put MSB of type into A:7
.95cc		30 09		bmi $95d7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95ce		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95d0		15 79		ora $79,x			ora 	NSExponent+1,x
.95d2		f0 06		beq $95da			beq 	_IntegerCode 				; if clear, then we have two integers
.95d4		4c d0 97	jmp $97d0			jmp 	FloatingPointAdd 							; otherwise at least one float.
.95d7						_StringData:
.95d7		4c 96 93	jmp $9396			jmp 	StringConcat							; at least one string - don't know both are strings.
.95da						_IntegerCode:
.95da						AddCode:
.95da		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.95dc		55 51		eor $51,x			eor 	NSStatus+1,x
.95de		10 a9		bpl $9589			bpl 	AddTopTwoStack
.95e0		20 a3 95	jsr $95a3			jsr 	SubTopTwoStack 				; do a physical subtraction
.95e3		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.95e5		10 07		bpl $95ee			bpl 	_AddExit
.95e7		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.95e9		95 50		sta $50,x			sta 	NSStatus,x
.95eb		20 a3 a1	jsr $a1a3			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.95ee						_AddExit:
.95ee		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; check for -0
.95f1		d0 02		bne $95f5			bne 	_AddNonZero
.95f3		74 50		stz $50,x			stz 	NSStatus,x
.95f5						_AddNonZero:
.95f5		60		rts				rts
.95f6						SubInteger:
.95f6		fa		plx				plx
.95f7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95f9		15 51		ora $51,x			ora 	NSStatus+1,x
.95fb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95fc		0a		asl a				asl 	a
.95fd		10 05		bpl $9604			bpl 	_NotRef
.95ff		48		pha				pha
.9600		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9603		68		pla				pla
.9604						_NotRef:
.9604		0a		asl a				asl 	a 							; put MSB of type into A:7
.9605		30 09		bmi $9610			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9607		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9609		15 79		ora $79,x			ora 	NSExponent+1,x
.960b		f0 06		beq $9613			beq 	_IntegerCode 				; if clear, then we have two integers
.960d		4c d5 97	jmp $97d5			jmp 	FloatingPointSub 							; otherwise at least one float.
.9610						_StringData:
.9610		4c 6c a3	jmp $a36c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9613						_IntegerCode:
.9613		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9615		49 80		eor #$80			eor 	#$80
.9617		95 51		sta $51,x			sta 	NSStatus+1,x
.9619		80 bf		bra $95da			bra 	AddCode 					; and do the same code as add.
.961b						AndInteger:
.961b		fa		plx				plx
.961c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.961e		15 51		ora $51,x			ora 	NSStatus+1,x
.9620		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9621		0a		asl a				asl 	a
.9622		10 05		bpl $9629			bpl 	_NotRef
.9624		48		pha				pha
.9625		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9628		68		pla				pla
.9629						_NotRef:
.9629		0a		asl a				asl 	a
.962a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.962c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.962e		15 79		ora $79,x			ora 	NSExponent+1,x
.9630		f0 03		beq $9635			beq 	_IntegerCode 				; if clear, then we have two integers
.9632		4c 62 a3	jmp $a362			jmp 	TypeError 					; anything else, type mismatch.
.9635						_IntegerCode:
.9635		b5 58		lda $58,x			lda		NSMantissa0,x
.9637		35 59		and $59,x			and 		NSMantissa0+1,x
.9639		95 58		sta $58,x			sta 	NSMantissa0,x
.963b		b5 60		lda $60,x			lda		NSMantissa1,x
.963d		35 61		and $61,x			and 		NSMantissa1+1,x
.963f		95 60		sta $60,x			sta 	NSMantissa1,x
.9641		b5 68		lda $68,x			lda		NSMantissa2,x
.9643		35 69		and $69,x			and 		NSMantissa2+1,x
.9645		95 68		sta $68,x			sta 	NSMantissa2,x
.9647		b5 70		lda $70,x			lda		NSMantissa3,x
.9649		35 71		and $71,x			and 		NSMantissa3+1,x
.964b		95 70		sta $70,x			sta 	NSMantissa3,x
.964d		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.964f		60		rts				rts
.9650						OraInteger:
.9650		fa		plx				plx
.9651		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9653		15 51		ora $51,x			ora 	NSStatus+1,x
.9655		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9656		0a		asl a				asl 	a
.9657		10 05		bpl $965e			bpl 	_NotRef
.9659		48		pha				pha
.965a		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.965d		68		pla				pla
.965e						_NotRef:
.965e		0a		asl a				asl 	a
.965f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9661		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9663		15 79		ora $79,x			ora 	NSExponent+1,x
.9665		f0 03		beq $966a			beq 	_IntegerCode 				; if clear, then we have two integers
.9667		4c 62 a3	jmp $a362			jmp 	TypeError 					; anything else, type mismatch.
.966a						_IntegerCode:
.966a		b5 58		lda $58,x			lda		NSMantissa0,x
.966c		15 59		ora $59,x			ora 		NSMantissa0+1,x
.966e		95 58		sta $58,x			sta 	NSMantissa0,x
.9670		b5 60		lda $60,x			lda		NSMantissa1,x
.9672		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9674		95 60		sta $60,x			sta 	NSMantissa1,x
.9676		b5 68		lda $68,x			lda		NSMantissa2,x
.9678		15 69		ora $69,x			ora 		NSMantissa2+1,x
.967a		95 68		sta $68,x			sta 	NSMantissa2,x
.967c		b5 70		lda $70,x			lda		NSMantissa3,x
.967e		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9680		95 70		sta $70,x			sta 	NSMantissa3,x
.9682		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9684		60		rts				rts
.9685						EorInteger:
.9685		fa		plx				plx
.9686		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9688		15 51		ora $51,x			ora 	NSStatus+1,x
.968a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.968b		0a		asl a				asl 	a
.968c		10 05		bpl $9693			bpl 	_NotRef
.968e		48		pha				pha
.968f		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9692		68		pla				pla
.9693						_NotRef:
.9693		0a		asl a				asl 	a
.9694		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9696		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9698		15 79		ora $79,x			ora 	NSExponent+1,x
.969a		f0 03		beq $969f			beq 	_IntegerCode 				; if clear, then we have two integers
.969c		4c 62 a3	jmp $a362			jmp 	TypeError 					; anything else, type mismatch.
.969f						_IntegerCode:
.969f		b5 58		lda $58,x			lda		NSMantissa0,x
.96a1		55 59		eor $59,x			eor 		NSMantissa0+1,x
.96a3		95 58		sta $58,x			sta 	NSMantissa0,x
.96a5		b5 60		lda $60,x			lda		NSMantissa1,x
.96a7		55 61		eor $61,x			eor 		NSMantissa1+1,x
.96a9		95 60		sta $60,x			sta 	NSMantissa1,x
.96ab		b5 68		lda $68,x			lda		NSMantissa2,x
.96ad		55 69		eor $69,x			eor 		NSMantissa2+1,x
.96af		95 68		sta $68,x			sta 	NSMantissa2,x
.96b1		b5 70		lda $70,x			lda		NSMantissa3,x
.96b3		55 71		eor $71,x			eor 		NSMantissa3+1,x
.96b5		95 70		sta $70,x			sta 	NSMantissa3,x
.96b7		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.96b9		60		rts				rts
.96ba						WordIndirect:
.96ba		fa		plx				plx
.96bb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96bd		15 51		ora $51,x			ora 	NSStatus+1,x
.96bf		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96c0		0a		asl a				asl 	a
.96c1		10 05		bpl $96c8			bpl 	_NotRef
.96c3		48		pha				pha
.96c4		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96c7		68		pla				pla
.96c8						_NotRef:
.96c8		0a		asl a				asl 	a
.96c9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96cb		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96cd		15 79		ora $79,x			ora 	NSExponent+1,x
.96cf		f0 03		beq $96d4			beq 	_IntegerCode 				; if clear, then we have two integers
.96d1		4c 62 a3	jmp $a362			jmp 	TypeError 					; anything else, type mismatch.
.96d4						_IntegerCode:
.96d4		20 da 95	jsr $95da			jsr 	AddCode 					; add the two values
.96d7		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.96d9		95 50		sta $50,x			sta 	NSStatus,x
.96db		60		rts				rts
.96dc						ByteIndirect:
.96dc		fa		plx				plx
.96dd		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96df		15 51		ora $51,x			ora 	NSStatus+1,x
.96e1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96e2		0a		asl a				asl 	a
.96e3		10 05		bpl $96ea			bpl 	_NotRef
.96e5		48		pha				pha
.96e6		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96e9		68		pla				pla
.96ea						_NotRef:
.96ea		0a		asl a				asl 	a
.96eb		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96ed		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96ef		15 79		ora $79,x			ora 	NSExponent+1,x
.96f1		f0 03		beq $96f6			beq 	_IntegerCode 				; if clear, then we have two integers
.96f3		4c 62 a3	jmp $a362			jmp 	TypeError 					; anything else, type mismatch.
.96f6						_IntegerCode:
.96f6		20 da 95	jsr $95da			jsr 	AddCode 					; add the two values
.96f9		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.96fb		95 50		sta $50,x			sta 	NSStatus,x
.96fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.96fe						ConvertInt16:
.96fe		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9700		86 60		stx $60				stx 	NSMantissa1
.9702		64 68		stz $68				stz 	NSMantissa2
.9704		64 70		stz $70				stz 	NSMantissa3
.9706		64 50		stz $50				stz 	NSStatus 					; positive integer
.9708		a2 00		ldx #$00			ldx 	#0 							; stack level
.970a		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.970c		80 00		bra $970e			bra 	ConvertInt32
.970e						ConvertInt32:
.970e		5a		phy				phy
.970f		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9711		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9713		10 08		bpl $971d			bpl 	_CI32NotNeg
.9715		48		pha				pha
.9716		a9 2d		lda #$2d			lda 	#'-'
.9718		99 a7 04	sta $04a7,y			sta 	numberBuffer,y
.971b		c8		iny				iny
.971c		68		pla				pla
.971d						_CI32NotNeg:
.971d		20 2b 97	jsr $972b			jsr 	_CI32DivideConvert 			; recursive conversion
.9720		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9722		99 a7 04	sta $04a7,y			sta 	numberBuffer,y
.9725		7a		ply				ply
.9726		a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.9728		a9 a7		lda #$a7			lda 	#numberBuffer & $FF
.972a		60		rts				rts
.972b						_CI32DivideConvert:
.972b		e8		inx				inx 								; write to next slot up
.972c		20 dc a1	jsr $a1dc			jsr 	NSMSetByte 		 			; write the base out.
.972f		ca		dex				dex
.9730		20 59 94	jsr $9459			jsr 	Int32Divide 				; divide
.9733		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9735		48		pha				pha
.9736		20 16 94	jsr $9416			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9739		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; is it zero ?
.973c		f0 05		beq $9743			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.973e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9740		20 2b 97	jsr $972b			jsr 	_CI32DivideConvert 			; and recusrively call.
.9743						_CI32NoRecurse:
.9743		68		pla				pla 								; remainder
.9744		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9746		90 02		bcc $974a			bcc 	_CI32NotHex
.9748		69 26		adc #$26			adc 	#6+32
.974a						_CI32NotHex:
.974a		69 30		adc #$30			adc 	#48
.974c		99 a7 04	sta $04a7,y			sta 	numberBuffer,y 				; write out and exit
.974f		c8		iny				iny
.9750		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9751						PrecedenceLevel:
>9751		04					.byte	 4	; $00 <<
>9752		02					.byte	 2	; $01 <=
>9753		02					.byte	 2	; $02 <>
>9754		00					.byte	 0	; $03 !!3
>9755		00					.byte	 0	; $04 ><
>9756		02					.byte	 2	; $05 >=
>9757		04					.byte	 4	; $06 >>
>9758		00					.byte	 0	; $07 !!7
>9759		00					.byte	 0	; $08 !!8
>975a		00					.byte	 0	; $09 !!9
>975b		00					.byte	 0	; $0a !!10
>975c		00					.byte	 0	; $0b !!11
>975d		00					.byte	 0	; $0c !!12
>975e		00					.byte	 0	; $0d !!13
>975f		00					.byte	 0	; $0e !!14
>9760		00					.byte	 0	; $0f !!15
>9761		00					.byte	 0	; $10 @
>9762		00					.byte	 0	; $11 !!17
>9763		00					.byte	 0	; $12 !!18
>9764		00					.byte	 0	; $13 [
>9765		04					.byte	 4	; $14 \
>9766		00					.byte	 0	; $15 ]
>9767		01					.byte	 1	; $16 ^
>9768		00					.byte	 0	; $17 _
>9769		00					.byte	 0	; $18 `
>976a		00					.byte	 0	; $19 !!25
>976b		00					.byte	 0	; $1a !!26
>976c		00					.byte	 0	; $1b {
>976d		01					.byte	 1	; $1c |
>976e		00					.byte	 0	; $1d }
>976f		00					.byte	 0	; $1e ~
>9770		00					.byte	 0	; $1f [7m<7F>[m
>9771		00					.byte	 0	; $20
>9772		05					.byte	 5	; $21 !
>9773		00					.byte	 0	; $22 "
>9774		00					.byte	 0	; $23 #
>9775		05					.byte	 5	; $24 $
>9776		04					.byte	 4	; $25 %
>9777		01					.byte	 1	; $26 &
>9778		00					.byte	 0	; $27 '
>9779		00					.byte	 0	; $28 (
>977a		00					.byte	 0	; $29 )
>977b		04					.byte	 4	; $2a *
>977c		03					.byte	 3	; $2b +
>977d		00					.byte	 0	; $2c ,
>977e		03					.byte	 3	; $2d -
>977f		00					.byte	 0	; $2e .
>9780		04					.byte	 4	; $2f /
>9781		00					.byte	 0	; $30 0
>9782		00					.byte	 0	; $31 1
>9783		00					.byte	 0	; $32 2
>9784		00					.byte	 0	; $33 3
>9785		00					.byte	 0	; $34 4
>9786		00					.byte	 0	; $35 5
>9787		00					.byte	 0	; $36 6
>9788		00					.byte	 0	; $37 7
>9789		00					.byte	 0	; $38 8
>978a		00					.byte	 0	; $39 9
>978b		00					.byte	 0	; $3a :
>978c		00					.byte	 0	; $3b ;
>978d		02					.byte	 2	; $3c <
>978e		02					.byte	 2	; $3d =
>978f		02					.byte	 2	; $3e >
>9790		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9791						EvaluateExpressionAt0:
.9791		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9793						EvaluateExpression:
.9793		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9795						EvaluateExpressionAtPrecedence:
.9795		48		pha				pha 								; save precedence level
.9796		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm 				; evaluate term into level X.
.9799		68		pla				pla 								; restore precedence level.
.979a						_EXPRLoop:
.979a		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.979c		b1 30		lda ($30),y			lda 	(codePtr),y
.979e		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.97a0		b0 25		bcs $97c7			bcs 	_EXPRExit
.97a2		da		phx				phx 								; read the operator precedence
.97a3		aa		tax				tax
.97a4		bd 51 97	lda $9751,x			lda 	PrecedenceLevel,x
.97a7		fa		plx				plx
.97a8		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.97aa		f0 1b		beq $97c7			beq 	_EXPRExit
.97ac		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.97ae		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.97b0		c5 37		cmp $37				cmp 	zTemp0+1
.97b2		b0 13		bcs $97c7			bcs		_EXPRExit 					; if current >= operator exit
.97b4		48		pha				pha 								; save current precedence.
.97b5		b1 30		lda ($30),y			lda 	(codePtr),y
.97b7		c8		iny				iny
.97b8		48		pha				pha
.97b9		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.97bb		e8		inx				inx 								; work out the right hand side.
.97bc		20 95 97	jsr $9795			jsr 	EvaluateExpressionAtPrecedence
.97bf		ca		dex				dex
.97c0		68		pla				pla 								; get operator, call the code.
.97c1		20 ca 97	jsr $97ca			jsr 	_EXPRCaller
.97c4		68		pla				pla 								; restore precedence level
.97c5		80 d3		bra $979a			bra 	_EXPRLoop 					; and go round.
.97c7						_EXPRExit:
.97c7		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.97c9		60		rts				rts
.97ca						_EXPRCaller:
.97ca		da		phx				phx 								; save on stack, first thing is to restore it
.97cb		0a		asl a				asl 	a 							; double so can use vectors into X
.97cc		aa		tax				tax
.97cd		7c fe 8e	jmp ($8efe,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.97d0						FloatingPointAdd:
.97d0		20 46 99	jsr $9946			jsr 	FloatPrepare 				; prepare for floats
.97d3		80 09		bra $97de			bra 	FloatAdd
.97d5						FloatingPointSub:
.97d5		20 46 99	jsr $9946			jsr 	FloatPrepare 				; prepare for floats
.97d8						FloatSubtract:
.97d8		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.97da		49 80		eor #$80			eor 	#$80
.97dc		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.97de						FloatAdd:
.97de		48		pha				pha
.97df		5a		phy				phy
.97e0		20 55 99	jsr $9955			jsr 	NSNormalise 				; normalise S[X]
.97e3		f0 51		beq $9836			beq 	_FAReturn1
.97e5		e8		inx				inx 								; normalise S[X+1]
.97e6		20 55 99	jsr $9955			jsr 	NSNormalise
.97e9		ca		dex				dex
.97ea		c9 00		cmp #$00			cmp 	#0
.97ec		f0 60		beq $984e			beq 	_FAExit 					; if so, just return A
.97ee		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.97f0		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.97f2		f0 18		beq $980c			beq 	_FAExponentsEqual
.97f4		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.97f6		a8		tay				tay
.97f7		38		sec				sec 								; do a signed comparison of the exponents.
.97f8		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.97fa		50 02		bvc $97fe			bvc 	_FANoSignedChange
.97fc		49 80		eor #$80			eor 	#$80
.97fe						_FANoSignedChange:
.97fe		29 80		and #$80			and 	#$80
.9800		10 02		bpl $9804			bpl 	_FAHaveMax
.9802		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9804						_FAHaveMax:
.9804		20 51 98	jsr $9851			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9807		e8		inx				inx
.9808		20 51 98	jsr $9851			jsr 	_FAShiftToExponent
.980b		ca		dex				dex
.980c						_FAExponentsEqual:
.980c		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.980e		55 51		eor $51,x			eor 	NSStatus+1,x
.9810		30 0e		bmi $9820			bmi 	_FADifferentSigns
.9812		20 89 95	jsr $9589			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9815		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9817		10 35		bpl $984e			bpl 	_FAExit 					; if no, we are done.
.9819		20 f3 a1	jsr $a1f3			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.981c		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.981e		80 2e		bra $984e			bra 	_FAExit
.9820						_FADifferentSigns:
.9820		20 a3 95	jsr $95a3			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9823		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9825		10 06		bpl $982d			bpl 	_FACheckZero 				; if no, check for -0
.9827		20 9c a1	jsr $a19c			jsr 	NSMNegate 					; netate result
.982a		20 a3 a1	jsr $a1a3			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.982d						_FACheckZero:
.982d		20 fc a1	jsr $a1fc			jsr 	NSMIsZero	 				; check for -0
.9830		d0 1c		bne $984e			bne 	_FAExit
.9832		74 50		stz $50,x			stz 	NSStatus,x
.9834		80 18		bra $984e			bra 	_FAExit
.9836						_FAReturn1:
.9836		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9838		95 58		sta $58,x			sta 	NSMantissa0,x
.983a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.983c		95 60		sta $60,x			sta 	NSMantissa1,x
.983e		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9840		95 68		sta $68,x			sta 	NSMantissa2,x
.9842		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9844		95 70		sta $70,x			sta 	NSMantissa3,x
.9846		b5 79		lda $79,x			lda 	NSExponent+1,x
.9848		95 78		sta $78,x			sta 	NSExponent,x
.984a		b5 51		lda $51,x			lda 	NSStatus+1,x
.984c		95 50		sta $50,x			sta 	NSStatus,x
.984e						_FAExit:
.984e		7a		ply				ply
.984f		68		pla				pla
.9850		60		rts				rts
.9851						_FAShiftToExponent:
.9851						_FAShiftToExponent2:
.9851		98		tya				tya 								; compare Y to exponent
.9852		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9854		f0 07		beq $985d			beq 	_FASEExit 					; exit if so.
.9856		20 f3 a1	jsr $a1f3			jsr 	NSMShiftRight	 			; shift the mantissa right
.9859		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.985b		80 f4		bra $9851			bra 	_FAShiftToExponent2
.985d						_FASEExit:
.985d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.985e						CompareFloat:
.985e		20 d8 97	jsr $97d8			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9861		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9863		29 f8		and #$f8			and 	#$F8
.9865		15 68		ora $68,x			ora 	NSMantissa2,x
.9867		15 70		ora $70,x			ora 	NSMantissa3,x
.9869		f0 08		beq $9873			beq 	_FCExit 					; zero, so approximately identical
.986b		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.986d		34 50		bit $50,x			bit 	NSStatus,x
.986f		10 02		bpl $9873			bpl 	_FCExit
.9871						_FCNegative:
.9871		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9873						_FCExit:
.9873		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9874						FDivideCommand:
.9874		fa		plx				plx	 								; restore stack position
.9875		20 46 99	jsr $9946			jsr 	FloatPrepare 				; prepare for floats
.9878						FloatDivide:
.9878		48		pha				pha
.9879		e8		inx				inx
.987a		20 55 99	jsr $9955			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.987d		ca		dex				dex
.987e		c9 00		cmp #$00			cmp 	#0
.9880		f0 1d		beq $989f			beq 	_FDZero
.9882		20 55 99	jsr $9955			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9885		f0 16		beq $989d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9887		20 7a 94	jsr $947a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.988a		20 16 94	jsr $9416			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.988d		20 55 99	jsr $9955			jsr		NSNormalise 				; renormalise
.9890		20 0a 95	jsr $950a			jsr 	CalculateSign 				; calculate result sign
.9893		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9895		38		sec				sec
.9896		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9898		38		sec				sec
.9899		e9 1e		sbc #$1e			sbc 	#30
.989b		95 78		sta $78,x			sta 	NSExponent,x
.989d						_FDExit:
.989d		68		pla				pla
.989e		60		rts				rts
.989f						_FDZero:
.989f		a9 03		lda #$03		lda	#3
.98a1		4c 8f 92	jmp $928f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.98a4						FloatFractionalPart:
.98a4		5a		phy				phy
.98a5		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.98a7		29 7f		and #$7f			and 	#$7F
.98a9		95 50		sta $50,x			sta 	NSStatus,x
.98ab		20 55 99	jsr $9955			jsr 	NSNormalise
.98ae		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.98b0		38		sec				sec
.98b1		e9 e0		sbc #$e0			sbc 	#$E0
.98b3		90 29		bcc $98de			bcc 	_FFPExit 					; already fractional
.98b5		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.98b7		b0 22		bcs $98db			bcs 	_FFPZero
.98b9		a8		tay				tay 								; put count to do in Y
.98ba		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.98bc		20 e0 98	jsr $98e0			jsr 	_FFPPartial
.98bf		95 70		sta $70,x			sta 	NSMantissa3,x
.98c1		b5 68		lda $68,x			lda 	NSMantissa2,x
.98c3		20 e0 98	jsr $98e0			jsr 	_FFPPartial
.98c6		95 68		sta $68,x			sta 	NSMantissa2,x
.98c8		b5 60		lda $60,x			lda 	NSMantissa1,x
.98ca		20 e0 98	jsr $98e0			jsr 	_FFPPartial
.98cd		95 60		sta $60,x			sta 	NSMantissa1,x
.98cf		b5 58		lda $58,x			lda 	NSMantissa0,x
.98d1		20 e0 98	jsr $98e0			jsr 	_FFPPartial
.98d4		95 58		sta $58,x			sta 	NSMantissa0,x
.98d6		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; zeroed check.
.98d9		d0 03		bne $98de			bne 	_FFPExit
.98db						_FFPZero:
.98db		20 da a1	jsr $a1da			jsr 	NSMSetZero
.98de						_FFPExit:
.98de		7a		ply				ply
.98df		60		rts				rts
.98e0						_FFPPartial:
.98e0		c0 00		cpy #$00			cpy 	#0 							; no more to do
.98e2		f0 17		beq $98fb			beq 	_FFFPPExit
.98e4		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.98e6		b0 0c		bcs $98f4			bcs 	_FFFPPWholeByte
.98e8		5a		phy				phy
.98e9						_FFFPPLeft:
.98e9		0a		asl a				asl 	a
.98ea		88		dey				dey
.98eb		d0 fc		bne $98e9			bne 	_FFFPPLeft
.98ed		7a		ply				ply
.98ee						_FFFPPRight:
.98ee		4a		lsr a				lsr 	a
.98ef		88		dey				dey
.98f0		d0 fc		bne $98ee			bne 	_FFFPPRight
.98f2		80 07		bra $98fb			bra 	_FFFPPExit
.98f4						_FFFPPWholeByte:
.98f4		98		tya				tya 								; subtract 8 from count
.98f5		38		sec				sec
.98f6		e9 08		sbc #$08			sbc 	#8
.98f8		a8		tay				tay
.98f9		a9 00		lda #$00			lda 	#0 							; and clear all
.98fb						_FFFPPExit:
.98fb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.98fc						FloatIntegerPart:
.98fc		48		pha				pha
.98fd		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.98ff		f0 1d		beq $991e			beq 	_FIPExit 					; if so do nothing
.9901		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; is it zero ?
.9904		f0 15		beq $991b			beq 	_FIPZero 					; if so return zero.
.9906		20 55 99	jsr $9955			jsr 	NSNormalise 				; normalise
.9909		f0 10		beq $991b			beq 	_FIPZero 					; normalised to zero, exit zero
.990b						_FIPShift:
.990b		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.990d		10 07		bpl $9916			bpl 	_FIPCheckZero
.990f		20 f3 a1	jsr $a1f3			jsr 	NSMShiftRight 				; shift mantissa right
.9912		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9914		80 f5		bra $990b			bra 	_FIPShift
.9916						_FIPCheckZero:
.9916		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; avoid -0 problem
.9919		d0 03		bne $991e			bne 	_FIPExit 					; set to zero if mantissa zero.
.991b						_FIPZero:
.991b		20 da a1	jsr $a1da			jsr 	NSMSetZero
.991e						_FIPExit:
.991e		68		pla				pla
.991f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9920						FloatingPointMultiply:
.9920		20 46 99	jsr $9946			jsr 	FloatPrepare 				; prepare for floats
.9923						FloatMultiply:
.9923		48		pha				pha
.9924		20 55 99	jsr $9955			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9927		f0 18		beq $9941			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9929		e8		inx				inx
.992a		20 55 99	jsr $9955			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.992d		ca		dex				dex
.992e		c9 00		cmp #$00			cmp 	#0
.9930		f0 0c		beq $993e			beq 	_FDSetZero
.9932		20 cc 94	jsr $94cc			jsr 	MultiplyShort 				; calculate the result.
.9935		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9937		18		clc				clc
.9938		75 79		adc $79,x			adc 	NSExponent+1,x
.993a		95 78		sta $78,x			sta 	NSExponent,x
.993c		80 03		bra $9941			bra 	_FDExit
.993e						_FDSetZero:
.993e		20 da a1	jsr $a1da			jsr 	NSMSetZero 					; return 0
.9941						_FDExit:
.9941		20 55 99	jsr $9955			jsr 	NSNormalise 				; normalise the result
.9944		68		pla				pla
.9945		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9946						FloatPrepare:
.9946		20 51 9a	jsr $9a51			jsr 	DereferenceTopTwo 			; dereference the top two values
.9949		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.994b		15 51		ora $51,x			ora 	NSStatus+1,x
.994d		29 10		and #$10			and 	#NSBIsString
.994f		d0 01		bne $9952			bne 	_FDType
.9951		60		rts				rts
.9952						_FDType:
.9952		4c 62 a3	jmp $a362			jmp 	TypeError
.9955						NSNormalise:
.9955		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9957		29 80		and #$80			and 	#$80
.9959		09 08		ora #$08			ora 	#NSTFloat
.995b		95 50		sta $50,x			sta 	NSStatus,x
.995d		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; if zero exit
.9960		d0 07		bne $9969			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9962		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9964		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9966		a9 00		lda #$00			lda 	#0 							; set Z flag
.9968		60		rts				rts
.9969						_NSNormaliseOptimise:
.9969		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.996b		d0 19		bne $9986			bne 	_NSNormaliseLoop
.996d		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.996f		30 15		bmi $9986			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9971		95 70		sta $70,x			sta 	NSMantissa3,x
.9973		b5 60		lda $60,x			lda 	NSMantissa1,x
.9975		95 68		sta $68,x			sta 	NSMantissa2,x
.9977		b5 58		lda $58,x			lda 	NSMantissa0,x
.9979		95 60		sta $60,x			sta 	NSMantissa1,x
.997b		74 58		stz $58,x			stz 	NSMantissa0,x
.997d		b5 78		lda $78,x			lda 	NSExponent,x
.997f		38		sec				sec
.9980		e9 08		sbc #$08			sbc 	#8
.9982		95 78		sta $78,x			sta 	NSExponent,x
.9984		80 e3		bra $9969			bra 	_NSNormaliseOptimise
.9986						_NSNormaliseLoop:
.9986		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9988		70 07		bvs $9991			bvs 	_NSNExit 					; exit if so with Z flag clear
.998a		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; shift mantissa left
.998d		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.998f		80 f5		bra $9986			bra 	_NSNormaliseLoop
.9991						_NSNExit:
.9991		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9993		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9994						AssignNumber:
.9994		5a		phy				phy
.9995		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9997		85 36		sta $36				sta 	zTemp0
.9999		b5 60		lda $60,x			lda 	NSMantissa1,x
.999b		85 37		sta $37				sta 	zTemp0+1
.999d		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.999f		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.99a1		95 50		sta $50,x			sta 	NSStatus,x
.99a3		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.99a5		c9 08		cmp #$08			cmp 	#NSTFloat
.99a7		f0 24		beq $99cd			beq 	_ANFloat
.99a9		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.99ab		f0 03		beq $99b0			beq		_ANNotFloat
.99ad		4c 5d a3	jmp $a35d			jmp 	RangeError					; if it is, report an error.
.99b0						_ANNotFloat:
.99b0		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.99b2		29 03		and #$03			and 	#3
.99b4		d0 05		bne $99bb			bne 	_ANByteWord
.99b6		20 d8 99	jsr $99d8			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.99b9		80 1b		bra $99d6			bra 	_ANExit
.99bb						_ANByteWord:
.99bb		48		pha				pha 								; save count
.99bc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.99be		92 36		sta ($36)			sta 	(zTemp0)
.99c0		68		pla				pla
.99c1		c9 01		cmp #$01			cmp	 	#1
.99c3		f0 11		beq $99d6			beq 	_ANExit
.99c5		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.99c7		a0 01		ldy #$01			ldy 	#1
.99c9		91 36		sta ($36),y			sta 	(zTemp0),y
.99cb		80 09		bra $99d6			bra 	_ANExit
.99cd						_ANFloat:
.99cd		20 d8 99	jsr $99d8			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.99d0		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.99d2		a0 04		ldy #$04			ldy 	#4
.99d4		91 36		sta ($36),y			sta 	(zTemp0),y
.99d6						_ANExit:
.99d6		7a		ply				ply
.99d7		60		rts				rts
.99d8						_ANCopy4PackSign:
.99d8		a0 03		ldy #$03			ldy 	#3
.99da		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.99dc		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.99de		15 71		ora $71,x			ora 	NSMantissa3+1,x
.99e0		91 36		sta ($36),y			sta 	(zTemp0),y
.99e2		88		dey				dey
.99e3		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.99e5		91 36		sta ($36),y			sta 	(zTemp0),y
.99e7		88		dey				dey
.99e8		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.99ea		91 36		sta ($36),y			sta 	(zTemp0),y
.99ec		88		dey				dey
.99ed		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.99ef		91 36		sta ($36),y			sta 	(zTemp0),y
.99f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.99f2						AssignString:
.99f2		5a		phy				phy
.99f3		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.99f5		85 38		sta $38				sta 	zTemp1
.99f7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.99f9		85 39		sta $39				sta 	zTemp1+1
.99fb		b5 58		lda $58,x			lda 	NSMantissa0,x
.99fd		85 36		sta $36				sta 	zTemp0
.99ff		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a01		85 37		sta $37				sta 	zTemp0+1
.9a03		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9a05		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a07		f0 23		beq $9a2c			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9a09		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9a0a		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9a0c		e9 02		sbc #$02			sbc 	#2
.9a0e		85 3c		sta $3c				sta 	zsTemp
.9a10		a0 01		ldy #$01			ldy 	#1
.9a12		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a14		e9 00		sbc #$00			sbc 	#0
.9a16		85 3d		sta $3d				sta 	zsTemp+1
.9a18		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9a1a						_ASGetLength:
.9a1a		c8		iny				iny
.9a1b		b1 38		lda ($38),y			lda 	(zTemp1),y
.9a1d		d0 fb		bne $9a1a			bne 	_ASGetLength
.9a1f		98		tya				tya 								; is this length <= current length
.9a20		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9a22		90 1e		bcc $9a42			bcc 	_ASCopyString
.9a24		f0 1c		beq $9a42			beq 	_ASCopyString
.9a26		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9a28		a0 01		ldy #$01			ldy 	#1
.9a2a		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9a2c						_ASNewStringRequired:
.9a2c		e8		inx				inx 								; concrete the new string.
.9a2d		20 2c b3	jsr $b32c			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9a30		ca		dex				dex
.9a31		18		clc				clc
.9a32		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9a34		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9a36		92 36		sta ($36)			sta 	(zTemp0)
.9a38		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a3a		69 00		adc #$00			adc 	#0
.9a3c		a0 01		ldy #$01			ldy 	#1
.9a3e		91 36		sta ($36),y			sta 	(zTemp0),y
.9a40		80 0d		bra $9a4f			bra 	_ASExit
.9a42						_ASCopyString:
.9a42		a0 00		ldy #$00			ldy 	#0
.9a44						_ASCopyLoop:
.9a44		b1 38		lda ($38),y			lda 	(zTemp1),y
.9a46		c8		iny				iny
.9a47		c8		iny				iny
.9a48		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9a4a		88		dey				dey
.9a4b		c9 00		cmp #$00			cmp 	#0
.9a4d		d0 f5		bne $9a44			bne 	_ASCopyLoop
.9a4f						_ASExit:
.9a4f		7a		ply				ply
.9a50		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9a51						DereferenceTopTwo:
.9a51		e8		inx				inx
.9a52		20 56 9a	jsr $9a56			jsr 	Dereference 				; deref x+1
.9a55		ca		dex				dex  								; falls through to deref x
.9a56						Dereference:
.9a56		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9a58		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9a5a		f0 48		beq $9aa4			beq 	_DRFExit 					; not a reference, so exit.
.9a5c		5a		phy				phy
.9a5d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9a5f		85 36		sta $36				sta 	zTemp0
.9a61		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a63		85 37		sta $37				sta 	zTemp0+1
.9a65		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9a67		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9a69		95 58		sta $58,x			sta 	NSMantissa0,x
.9a6b		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9a6d		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9a6f		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9a71		f0 0e		beq $9a81			beq 	_DRFDereferenceTwo
.9a73		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9a75		f0 2f		beq $9aa6			beq 	_DRFFull
.9a77		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9a79		29 03		and #$03			and 	#3
.9a7b		f0 29		beq $9aa6			beq 	_DRFFull 					; the whole word
.9a7d		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9a7f		f0 06		beq $9a87			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9a81						_DRFDereferenceTwo:
.9a81		a0 01		ldy #$01			ldy 	#1
.9a83		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a85		95 60		sta $60,x			sta 	NSMantissa1,x
.9a87						_DRFClear23:
.9a87		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9a89		74 70		stz $70,x			stz 	NSMantissa3,x
.9a8b		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9a8d		29 18		and #$18			and 	#NSBTypeMask
.9a8f		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9a91		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9a93		d0 0e		bne $9aa3			bne 	_DRFNotString
.9a95		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9a97		15 60		ora $60,x			ora 	NSMantissa1,x
.9a99		d0 08		bne $9aa3			bne 	_DRFNotString
.9a9b		a9 a5		lda #$a5			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9a9d		95 58		sta $58,x			sta 	NSMantissa0,x
.9a9f		a9 9a		lda #$9a			lda 	#_DRFNullString >> 8
.9aa1		95 60		sta $60,x			sta 	NSMantissa1,x
.9aa3						_DRFNotString
.9aa3		7a		ply				ply 								; restore Y and exit
.9aa4						_DRFExit:
.9aa4		60		rts				rts
.9aa5						_DRFNullString:
>9aa5		00						.byte 	0
.9aa6						_DRFFull:
.9aa6		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9aa8		b1 36		lda ($36),y			lda 	(zTemp0),y
.9aaa		95 60		sta $60,x			sta 	NSMantissa1,x
.9aac		c8		iny				iny
.9aad		b1 36		lda ($36),y			lda 	(zTemp0),y
.9aaf		95 68		sta $68,x			sta 	NSMantissa2,x
.9ab1		c8		iny				iny
.9ab2		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ab4		95 70		sta $70,x			sta 	NSMantissa3,x
.9ab6		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9ab8		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9aba		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9abc		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9abe		f0 05		beq $9ac5			beq 	_DRFNoExponent
.9ac0		c8		iny				iny 								; if not, read the exponent as well.
.9ac1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ac3		95 78		sta $78,x			sta 	NSExponent,x
.9ac5						_DRFNoExponent:
.9ac5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9ac7		10 0a		bpl $9ad3			bpl 	_DRFExit2 					; if not, then exit.
.9ac9		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9acb		95 70		sta $70,x			sta 	NSMantissa3,x
.9acd		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9acf		09 80		ora #$80			ora 	#NSBIsNegative
.9ad1		95 50		sta $50,x			sta 	NSStatus,x
.9ad3						_DRFExit2:
.9ad3		7a		ply				ply
.9ad4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9ad5						EncodeNumberStart:
.9ad5		38		sec				sec
.9ad6		80 01		bra $9ad9			bra 	EncodeNumberContinue+1
.9ad8						EncodeNumberContinue:
.9ad8		18		clc				clc
.9ad9						EncodeNumber:
.9ad9		08		php				php 								; save reset flag.
.9ada		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9adc		f0 12		beq $9af0			beq 	_ENIsOkay
.9ade		c9 30		cmp #$30			cmp 	#"0"
.9ae0		90 04		bcc $9ae6			bcc 	_ENBadNumber
.9ae2		c9 3a		cmp #$3a			cmp 	#"9"+1
.9ae4		90 0a		bcc $9af0			bcc 	_ENIsOkay
.9ae6						_ENBadNumber:
.9ae6		28		plp				plp 								; throw saved reset
.9ae7		ad 85 02	lda $0285			lda 	encodeState 				; if in decimal mode, construct final number
.9aea		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9aec		f0 7b		beq $9b69			beq 	_ENConstructFinal
.9aee						_ENFail:
.9aee		18		clc				clc 								; not allowed
.9aef		60		rts				rts
.9af0						_ENIsOkay:
.9af0		28		plp				plp 								; are we restarting
.9af1		90 15		bcc $9b08			bcc 	_ENNoRestart
.9af3						_ENStartEncode:
.9af3		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9af5		f0 0c		beq $9b03			beq 	_ENFirstDP
.9af7		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9af9		20 dc a1	jsr $a1dc			jsr 	NSMSetByte 					; in single byte mode.
.9afc		a9 01		lda #$01			lda 	#ESTA_Low
.9afe						_ENExitChange:
.9afe		8d 85 02	sta $0285			sta 	encodeState 				; save new state
.9b01		38		sec				sec
.9b02		60		rts				rts
.9b03						_ENFirstDP:
.9b03		20 da a1	jsr $a1da			jsr 	NSMSetZero 					; clear integer part
.9b06		80 3c		bra $9b44			bra 	_ESTASwitchFloat			; go straight to float and exi
.9b08						_ENNoRestart:
.9b08		48		pha				pha 								; save digit or DP on stack.
.9b09		ad 85 02	lda $0285			lda 	encodeState 				; get current state
.9b0c		c9 01		cmp #$01			cmp 	#ESTA_Low
.9b0e		f0 09		beq $9b19			beq  	_ESTALowState
.9b10		c9 02		cmp #$02			cmp 	#ESTA_High
.9b12		f0 26		beq $9b3a			beq 	_ESTAHighState
.9b14		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9b16		f0 38		beq $9b50			beq 	_ESTADecimalState
>9b18		db						.byte 	$DB 						; causes a break in the emulator
.9b19						_ESTALowState:
.9b19		68		pla				pla 								; get value back
.9b1a		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9b1c		f0 26		beq $9b44			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9b1e		29 0f		and #$0f			and 	#15 						; make digit
.9b20		8d 86 02	sta $0286			sta 	digitTemp 					; save it.
.9b23		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9b25		0a		asl a				asl 	a
.9b26		0a		asl a				asl 	a
.9b27		75 58		adc $58,x			adc 	NSMantissa0,x
.9b29		0a		asl a				asl 	a
.9b2a		6d 86 02	adc $0286			adc 	digitTemp
.9b2d		95 58		sta $58,x			sta 	NSMantissa0,x
.9b2f		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9b31		90 05		bcc $9b38			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9b33		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9b35		8d 85 02	sta $0285			sta 	encodeState
.9b38						_ESTANoSwitch:
.9b38		38		sec				sec
.9b39		60		rts				rts
.9b3a						_ESTAHighState:
.9b3a		68		pla				pla 								; get value back
.9b3b		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9b3d		f0 05		beq $9b44			beq 	_ESTASwitchFloat
.9b3f		20 9d 9b	jsr $9b9d			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9b42		38		sec				sec
.9b43		60		rts				rts
.9b44						_ESTASwitchFloat:
.9b44		9c 87 02	stz $0287			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9b47		e8		inx				inx 								; zero the decimal additive.
.9b48		20 da a1	jsr $a1da			jsr 	NSMSetZero
.9b4b		ca		dex				dex
.9b4c		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9b4e		80 ae		bra $9afe			bra 	_ENExitChange
.9b50						_ESTADecimalState:
.9b50		68		pla				pla 								; digit.
.9b51		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9b53		f0 99		beq $9aee			beq 	_ENFail
.9b55		e8		inx				inx 								; put digit into fractional part of X+1
.9b56		20 9d 9b	jsr $9b9d			jsr 	ESTAShiftDigitIntoMantissa
.9b59		ca		dex				dex
.9b5a		ee 87 02	inc $0287			inc 	decimalCount 				; bump the count of decimals
.9b5d		ad 87 02	lda $0287			lda 	decimalCount 				; too many decimal digits.
.9b60		c9 0b		cmp #$0b			cmp 	#11
.9b62		f0 02		beq $9b66			beq 	_ESTADSFail
.9b64		38		sec				sec
.9b65		60		rts				rts
.9b66						_ESTADSFail:
.9b66		4c 5d a3	jmp $a35d			jmp 	RangeError
.9b69						_ENConstructFinal:
.9b69		ad 87 02	lda $0287			lda 	decimalCount 				; get decimal count
.9b6c		f0 2d		beq $9b9b			beq 	_ENCFExit 					; no decimals
.9b6e		5a		phy				phy
.9b6f		0a		asl a				asl 	a 							; x 4 and CLC
.9b70		0a		asl a				asl 	a
.9b71		6d 87 02	adc $0287			adc 	decimalCount
.9b74		a8		tay				tay
.9b75		b9 1c a3	lda $a31c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9b78		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9b7a		b9 1d a3	lda $a31d,y			lda 	DecimalScalarTable-5+1,y
.9b7d		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9b7f		b9 1e a3	lda $a31e,y			lda 	DecimalScalarTable-5+2,y
.9b82		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9b84		b9 1f a3	lda $a31f,y			lda 	DecimalScalarTable-5+3,y
.9b87		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9b89		b9 20 a3	lda $a320,y			lda 	DecimalScalarTable-5+4,y
.9b8c		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9b8e		a9 08		lda #$08			lda 	#NSTFloat
.9b90		95 52		sta $52,x			sta 	NSStatus+2,x
.9b92		7a		ply				ply
.9b93		e8		inx				inx 								; multiply decimal const by decimal scalar
.9b94		20 23 99	jsr $9923			jsr 	FloatMultiply
.9b97		ca		dex				dex
.9b98		20 de 97	jsr $97de			jsr 	FloatAdd 					; add to integer part.
.9b9b						_ENCFExit:
.9b9b		18		clc				clc 								; reject the digit.
.9b9c		60		rts				rts
.9b9d						ESTAShiftDigitIntoMantissa:
.9b9d		29 0f		and #$0f			and 	#15 						; save digit
.9b9f		48		pha				pha
.9ba0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9ba2		48		pha				pha
.9ba3		b5 68		lda $68,x			lda 	NSMantissa2,x
.9ba5		48		pha				pha
.9ba6		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ba8		48		pha				pha
.9ba9		b5 58		lda $58,x			lda 	NSMantissa0,x
.9bab		48		pha				pha
.9bac		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; x 2
.9baf		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; x 4
.9bb2		18		clc				clc 								; pop mantissa and add
.9bb3		68		pla				pla
.9bb4		75 58		adc $58,x			adc 	NSMantissa0,x
.9bb6		95 58		sta $58,x			sta 	NSMantissa0,x
.9bb8		68		pla				pla
.9bb9		75 60		adc $60,x			adc 	NSMantissa1,x
.9bbb		95 60		sta $60,x			sta 	NSMantissa1,x
.9bbd		68		pla				pla
.9bbe		75 68		adc $68,x			adc 	NSMantissa2,x
.9bc0		95 68		sta $68,x			sta 	NSMantissa2,x
.9bc2		68		pla				pla
.9bc3		75 70		adc $70,x			adc 	NSMantissa3,x
.9bc5		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9bc7		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; x 10
.9bca		68		pla				pla 								; add digit
.9bcb		18		clc				clc
.9bcc		75 58		adc $58,x			adc 	NSMantissa0,x
.9bce		95 58		sta $58,x			sta 	NSMantissa0,x
.9bd0		90 0a		bcc $9bdc			bcc 	_ESTASDExit
.9bd2		f6 60		inc $60,x			inc 	NSMantissa1,x
.9bd4		d0 06		bne $9bdc			bne 	_ESTASDExit
.9bd6		f6 68		inc $68,x			inc 	NSMantissa2,x
.9bd8		d0 02		bne $9bdc			bne 	_ESTASDExit
.9bda		f6 70		inc $70,x			inc 	NSMantissa3,x
.9bdc						_ESTASDExit:
.9bdc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9bdd						EvaluateTerm:
.9bdd		b1 30		lda ($30),y			lda 	(codePtr),y
.9bdf		30 18		bmi $9bf9			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9be1		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9be3		b0 6c		bcs $9c51			bcs 	_ETVariable
.9be5		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9be7		90 6b		bcc $9c54			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9be9		c9 3a		cmp #$3a			cmp 	#'9'+1
.9beb		b0 67		bcs $9c54			bcs 	_ETPuncUnary
.9bed		20 d5 9a	jsr $9ad5			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9bf0						_ETNumber:
.9bf0		c8		iny				iny 								; keep encoding until we have the numbers
.9bf1		b1 30		lda ($30),y			lda 	(codePtr),y
.9bf3		20 d8 9a	jsr $9ad8			jsr 	EncodeNumberContinue
.9bf6		b0 f8		bcs $9bf0			bcs 	_ETNumber 					; go back if accepted.
.9bf8		60		rts				rts
.9bf9						_ETCheckUnary:
.9bf9		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9bfb		f0 3f		beq $9c3c			beq 	_ETString
.9bfd		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9bff		f0 12		beq $9c13			beq 	_ETHexConstant
.9c01		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9c03		90 0b		bcc $9c10			bcc 	_ETSyntaxError
.9c05		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9c07		b0 07		bcs $9c10			bcs 	_ETSyntaxError
.9c09		da		phx				phx 								; push X on the stack
.9c0a		0a		asl a				asl 	a 							; put vector x 2 into X
.9c0b		aa		tax				tax
.9c0c		c8		iny				iny 								; consume unary function token
.9c0d		7c 7e 8f	jmp ($8f7e,x)			jmp 	(VectorSet0,x) 				; and do it.
.9c10						_ETSyntaxError:
.9c10		4c 58 a3	jmp $a358			jmp 	SyntaxError
.9c13						_ETHexConstant:
.9c13		c8		iny				iny 								; skip #
.9c14		c8		iny				iny 								; skip count
.9c15		20 da a1	jsr $a1da			jsr 	NSMSetZero 					; clear result
.9c18						_ETHLoop:
.9c18		b1 30		lda ($30),y			lda 	(codePtr),y
.9c1a		c8		iny				iny 								; and consume
.9c1b		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9c1d		f0 1c		beq $9c3b			beq 	_ETHExit
.9c1f		48		pha				pha 								; save on stack.
.9c20		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; x 2
.9c23		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; x 4
.9c26		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; x 8
.9c29		20 e9 a1	jsr $a1e9			jsr 	NSMShiftLeft 				; x 16
.9c2c		68		pla				pla 								; ASCII
.9c2d		c9 41		cmp #$41			cmp 	#'A'
.9c2f		90 02		bcc $9c33			bcc 	_ETHNotChar
.9c31		e9 07		sbc #$07			sbc 	#7
.9c33						_ETHNotChar:
.9c33		29 0f		and #$0f			and 	#15 						; digit now
.9c35		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9c37		95 58		sta $58,x			sta 	NSMantissa0,x
.9c39		80 dd		bra $9c18			bra 	_ETHLoop 					; go round.
.9c3b						_ETHExit:
.9c3b		60		rts				rts
.9c3c						_ETString:
.9c3c		c8		iny				iny 								; look at length
.9c3d		b1 30		lda ($30),y			lda 	(codePtr),y
.9c3f		48		pha				pha
.9c40		c8		iny				iny 								; first character
.9c41		20 54 a9	jsr $a954			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9c44		68		pla				pla 								; restore count and save
.9c45		85 36		sta $36				sta 	zTemp0
.9c47		98		tya				tya 								; add length to Y to skip it.
.9c48		18		clc				clc
.9c49		65 36		adc $36				adc 	zTemp0
.9c4b		a8		tay				tay
.9c4c		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9c4e		95 50		sta $50,x			sta 	NSStatus,x
.9c50		60		rts				rts
.9c51						_ETVariable:
.9c51		4c a6 9c	jmp $9ca6			jmp 	VariableHandler
.9c54						_ETPuncUnary:
.9c54		c8		iny				iny 								; consume the unary character
.9c55		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9c57		f0 2b		beq $9c84			beq 	_ETUnaryNegate
.9c59		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9c5b		f0 36		beq $9c93			beq 	_ETDereference
.9c5d		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9c5f		f0 3e		beq $9c9f			beq 	_ETParenthesis
.9c61		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9c63		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9c65		f0 06		beq $9c6d			beq 	_ETIndirection
.9c67		e6 36		inc $36				inc 	zTemp0
.9c69		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9c6b		d0 a3		bne $9c10			bne 	_ETSyntaxError
.9c6d						_ETIndirection:
.9c6d		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9c6f		1a		inc a				inc 	a
.9c70		48		pha				pha
.9c71		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm				; evaluate the term
.9c74		20 56 9a	jsr $9a56			jsr 	Dereference 				; dereference it.
.9c77		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9c79		d0 06		bne $9c81			bne 	_ETTypeMismatch
.9c7b		68		pla				pla 								; indirection 1-2
.9c7c		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9c7e		95 50		sta $50,x			sta 	NSStatus,x
.9c80		60		rts				rts
.9c81						_ETTypeMismatch:
.9c81		4c 62 a3	jmp $a362			jmp 	TypeError
.9c84						_ETUnaryNegate:
.9c84		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm				; evaluate the term
.9c87		20 56 9a	jsr $9a56			jsr 	Dereference 				; dereference it.
.9c8a		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9c8c		29 10		and #$10			and 	#NSTString
.9c8e		d0 f1		bne $9c81			bne 	_ETTypeMismatch
.9c90		4c 9c a1	jmp $a19c			jmp 	NSMNegate  					; just toggles the sign bit.
.9c93						_ETDereference:
.9c93		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm				; evaluate the term
.9c96		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9c98		29 20		and #$20			and 	#NSBIsReference
.9c9a		f0 e5		beq $9c81			beq 	_ETTypeMismatch
.9c9c		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9c9e		60		rts				rts
.9c9f						_ETParenthesis:
.9c9f		20 93 97	jsr $9793			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9ca2		20 76 92	jsr $9276			jsr 	CheckRightBracket 			; check for )
.9ca5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9ca6						VariableHandler:
.9ca6		b1 30		lda ($30),y			lda 	(codePtr),y
.9ca8		18		clc				clc
.9ca9		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.9cab		85 37		sta $37				sta 	zTemp0+1
.9cad		c8		iny				iny
.9cae		b1 30		lda ($30),y			lda 	(codePtr),y
.9cb0		85 36		sta $36				sta 	zTemp0
.9cb2		c8		iny				iny
.9cb3		18		clc				clc									; copy variable address+3 to mantissa
.9cb4		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9cb6		95 58		sta $58,x			sta 	NSMantissa0,x
.9cb8		a5 37		lda $37				lda 	zTemp0+1
.9cba		69 00		adc #$00			adc 	#0
.9cbc		95 60		sta $60,x			sta 	NSMantissa1,x
.9cbe		74 68		stz $68,x			stz 	NSMantissa2,x
.9cc0		74 70		stz $70,x			stz 	NSMantissa3,x
.9cc2		74 78		stz $78,x			stz 	NSExponent,x
.9cc4		5a		phy				phy
.9cc5		a0 02		ldy #$02			ldy 	#2 							; read type
.9cc7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9cc9		7a		ply				ply
.9cca		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9ccc		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9cce		95 50		sta $50,x			sta 	NSStatus,x
.9cd0		29 04		and #$04			and 	#NSBIsArray
.9cd2		d0 01		bne $9cd5			bne 	_VHArray
.9cd4		60		rts				rts
.9cd5						_VHArray:
.9cd5		e8		inx				inx
.9cd6		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9cd9		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9cdb		95 51		sta $51,x			sta 	NSStatus+1,x
.9cdd		b1 30		lda ($30),y			lda 	(codePtr),y
.9cdf		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9ce1		d0 06		bne $9ce9			bne 	_VHNoSecondIndex
.9ce3		c8		iny				iny 								; skip the comma
.9ce4		e8		inx				inx
.9ce5		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9ce8		ca		dex				dex
.9ce9						_VHNoSecondIndex:
.9ce9		ca		dex				dex 								; set X back.
.9cea		20 76 92	jsr $9276			jsr 	CheckRightBracket 			; and check the right bracket.
.9ced		5a		phy				phy 								; save position
.9cee		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9cf0		85 3e		sta $3e				sta 	zaTemp
.9cf2		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cf4		85 3f		sta $3f				sta 	zaTemp+1
.9cf6		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9cf8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cfa		f0 5d		beq $9d59			beq 	_VHBadArray
.9cfc		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9cfe		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d00		f0 02		beq $9d04			beq 	_VHHas2Mask
.9d02		a9 ff		lda #$ff			lda 	#$FF
.9d04						_VHHas2Mask:
.9d04		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9d06		f0 4c		beq $9d54			beq 	_VHBadIndex
.9d08		0a		asl a				asl 	a 							; carry will be set if a second index
.9d09		90 08		bcc $9d13			bcc 	_VHCheckFirstIndex
.9d0b		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9d0d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d0f		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9d11		90 41		bcc $9d54			bcc 	_VHBadIndex
.9d13						_VHCheckFirstIndex:
.9d13		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9d15		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d17		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9d19		90 39		bcc $9d54			bcc 	_VHBadIndex
.9d1b		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9d1d		64 37		stz $37				stz 	zTemp0+1
.9d1f		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9d21		30 0e		bmi $9d31			bmi 	_VHNoMultiply
.9d23		da		phx				phx
.9d24		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9d26		48		pha				pha
.9d27		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9d29		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d2b		1a		inc a				inc 	a 							; add 1 for zero base
.9d2c		fa		plx				plx
.9d2d		20 85 a1	jsr $a185			jsr 	Multiply8x8 				; calculate -> Z0
.9d30		fa		plx				plx
.9d31						_VHNoMultiply:
.9d31		18		clc				clc
.9d32		a5 36		lda $36				lda 	zTemp0
.9d34		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9d36		85 36		sta $36				sta 	zTemp0
.9d38		a5 37		lda $37				lda 	zTemp0+1
.9d3a		69 00		adc #$00			adc 	#0
.9d3c		85 37		sta $37				sta 	zTemp0+1
.9d3e		b5 50		lda $50,x			lda 	NSStatus,x
.9d40		20 17 87	jsr $8717			jsr 	ScaleByBaseType
.9d43		18		clc				clc
.9d44		b2 3e		lda ($3e)			lda 	(zaTemp)
.9d46		65 36		adc $36				adc 	zTemp0
.9d48		95 58		sta $58,x			sta 	NSMantissa0,x
.9d4a		a0 01		ldy #$01			ldy 	#1
.9d4c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d4e		65 37		adc $37				adc 	zTemp0+1
.9d50		95 60		sta $60,x			sta 	NSMantissa1,x
.9d52		7a		ply				ply 								; restore position
.9d53		60		rts				rts
.9d54						_VHBadIndex:
.9d54		a9 17		lda #$17		lda	#23
.9d56		4c 8f 92	jmp $928f		jmp	ErrorHandler
.9d59						_VHBadArray:
.9d59		a9 18		lda #$18		lda	#24
.9d5b		4c 8f 92	jmp $928f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9d5e						AbsUnary:
.9d5e		fa		plx				plx 								; restore stack pos
.9d5f		20 28 a1	jsr $a128			jsr 	EvaluateNumber 				; get a float or int
.9d62		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9d65		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9d67		29 7f		and #$7f			and 	#$7F
.9d69		95 50		sta $50,x			sta 	NSStatus,x
.9d6b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9d6c						AllocUnary:
.9d6c		fa		plx				plx 								; restore stack pos
.9d6d		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger		; get bytes required.
.9d70		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9d73		da		phx				phx 								; save X/Y
.9d74		5a		phy				phy
.9d75		8a		txa				txa 								; copy X into Y
.9d76		a8		tay				tay
.9d77		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9d7a		aa		tax				tax
.9d7b		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9d7e		20 8b 9d	jsr $9d8b			jsr 	AllocateXABytes 			; allocate memory
.9d81		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9d84		8a		txa				txa 	 							; typing is 16 bit integer.
.9d85		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9d88		7a		ply				ply
.9d89		fa		plx				plx
.9d8a		60		rts				rts
.9d8b						AllocateXABytes:
.9d8b		5a		phy				phy
.9d8c		ac 8c 02	ldy $028c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9d8f		84 36		sty $36				sty 	zTemp0
.9d91		5a		phy				phy
.9d92		ac 8d 02	ldy $028d			ldy 	lowMemPtr+1
.9d95		84 37		sty $37				sty 	zTemp0+1
.9d97		5a		phy				phy
.9d98		18		clc				clc 								; add to low memory pointer
.9d99		6d 8c 02	adc $028c			adc 	lowMemPtr
.9d9c		8d 8c 02	sta $028c			sta 	lowMemPtr
.9d9f		8a		txa				txa
.9da0		6d 8d 02	adc $028d			adc 	lowMemPtr+1
.9da3		8d 8d 02	sta $028d			sta 	lowMemPtr+1
.9da6		b0 2f		bcs $9dd7			bcs 	CISSMemory
.9da8		20 c9 9d	jsr $9dc9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9dab						_ClearMemory:
.9dab		ad 8c 02	lda $028c			lda 	lowMemPtr 					; cleared all memory allocated
.9dae		c5 36		cmp $36				cmp 	zTemp0
.9db0		d0 07		bne $9db9			bne 	_CMClearNext
.9db2		ad 8d 02	lda $028d			lda 	lowMemPtr+1
.9db5		c5 37		cmp $37				cmp 	zTemp0+1
.9db7		f0 0c		beq $9dc5			beq 	_CMExit
.9db9						_CMClearNext:
.9db9		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9dbb		92 36		sta ($36)			sta 	(zTemp0)
.9dbd		e6 36		inc $36				inc 	zTemp0
.9dbf		d0 ea		bne $9dab			bne 	_ClearMemory
.9dc1		e6 37		inc $37				inc		zTemp0+1
.9dc3		80 e6		bra $9dab			bra 	_ClearMemory
.9dc5						_CMExit:
.9dc5		fa		plx				plx
.9dc6		68		pla				pla
.9dc7		7a		ply				ply
.9dc8		60		rts				rts
.9dc9						CheckIdentifierStringSpace:
.9dc9		48		pha				pha
.9dca		ad 8d 02	lda $028d			lda 	lowMemPtr+1 				; get low memory pointer
.9dcd		18		clc				clc
.9dce		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9dd0		cd 8f 02	cmp $028f			cmp 	stringMemory+1 				; is it >= StringMemory
.9dd3		b0 02		bcs $9dd7			bcs 	CISSMemory
.9dd5		68		pla				pla
.9dd6		60		rts				rts
.9dd7						CISSMemory:
.9dd7		a9 06		lda #$06		lda	#6
.9dd9		4c 8f 92	jmp $928f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9ddc						AscUnary:
.9ddc		fa		plx				plx 								; restore stack pos
.9ddd		20 32 a1	jsr $a132			jsr 	EvaluateString 				; get a string
.9de0		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9de2		20 dc a1	jsr $a1dc			jsr 	NSMSetByte 					; ASC("") will return zero.
.9de5		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9de8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9de9						FracUnary:
.9de9		fa		plx				plx 								; restore stack pos
.9dea		20 28 a1	jsr $a128			jsr 	EvaluateNumber 				; get a float or int
.9ded		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9df0		b5 50		lda $50,x			lda 	NSStatus,x
.9df2		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9df4		f0 04		beq $9dfa			beq 	_IUZero
.9df6		20 a4 98	jsr $98a4			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9df9		60		rts				rts
.9dfa						_IUZero:
.9dfa		20 da a1	jsr $a1da			jsr 	NSMSetZero
.9dfd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9dfe						IntUnary:
.9dfe		fa		plx				plx 								; restore stack pos
.9dff		20 28 a1	jsr $a128			jsr 	EvaluateNumber 				; get a float or int
.9e02		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9e05		b5 50		lda $50,x			lda 	NSStatus,x
.9e07		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9e09		f0 03		beq $9e0e			beq 	_IUExit
.9e0b		20 fc 98	jsr $98fc			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9e0e						_IUExit:
.9e0e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9e0f						LenUnary:
.9e0f		fa		plx				plx 								; restore stack pos
.9e10		20 32 a1	jsr $a132			jsr 	EvaluateString 				; get a string
.9e13		5a		phy				phy
.9e14		a0 00		ldy #$00			ldy 	#0 							; find length
.9e16						_LenFind:
.9e16		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9e18		f0 06		beq $9e20			beq 	_LenExit
.9e1a		c8		iny				iny
.9e1b		d0 f9		bne $9e16			bne 	_LenFind
.9e1d		4c 5d a3	jmp $a35d			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9e20						_LenExit:
.9e20		98		tya				tya		 							; return length
.9e21		20 dc a1	jsr $a1dc			jsr 	NSMSetByte
.9e24		7a		ply				ply
.9e25		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9e28		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9e29						Unary_Min:
.9e29		a9 01		lda #$01			lda 	#1
.9e2b		80 02		bra $9e2f			bra 	UnaryMinMaxMain
.9e2d						Unary_Max:
.9e2d		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9e2f						UnaryMinMaxMain:
.9e2f		fa		plx				plx 								; get index on number stack
.9e30		48		pha				pha 								; save comparator
.9e31		20 1f a1	jsr $a11f			jsr 	EvaluateValue 				; get the first value.
.9e34						_UMMMLoop:
.9e34		b1 30		lda ($30),y			lda 	(codePtr),y
.9e36		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9e38		f0 22		beq $9e5c			beq 	_UMMMDone
.9e3a		20 7e 92	jsr $927e			jsr 	CheckComma 					; must be a comma
.9e3d		e8		inx				inx
.9e3e		20 1f a1	jsr $a11f			jsr 	EvaluateValue
.9e41		ca		dex				dex
.9e42		20 bd a1	jsr $a1bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9e45		e8		inx				inx
.9e46		20 bd a1	jsr $a1bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9e49		e8		inx				inx
.9e4a		20 46 93	jsr $9346			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9e4d		ca		dex				dex
.9e4e		ca		dex				dex
.9e4f		85 36		sta $36				sta 	zTemp0 						; save required result
.9e51		68		pla				pla 								; get and save comparator
.9e52		48		pha				pha
.9e53		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9e55		d0 dd		bne $9e34			bne 	_UMMMLoop
.9e57		20 5f 9e	jsr $9e5f			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9e5a		80 d8		bra $9e34			bra 	_UMMMLoop
.9e5c						_UMMMDone:
.9e5c		68		pla				pla 								; throw the comparator
.9e5d		c8		iny				iny 								; skip )
.9e5e		60		rts				rts
.9e5f						ExpCopyAboveDown:
.9e5f		b5 51		lda $51,x			lda 	NSStatus+1,x
.9e61		95 50		sta $50,x			sta 	NSStatus,x
.9e63		b5 79		lda $79,x			lda 	NSExponent+1,x
.9e65		95 78		sta $78,x			sta 	NSExponent,x
.9e67		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9e69		95 58		sta $58,x			sta 	NSMantissa0,x
.9e6b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9e6d		95 60		sta $60,x			sta 	NSMantissa1,x
.9e6f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9e71		95 68		sta $68,x			sta 	NSMantissa2,x
.9e73		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9e75		95 70		sta $70,x			sta 	NSMantissa3,x
.9e77		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9e78						Unary_Not:
.9e78		fa		plx				plx
.9e79		20 47 a1	jsr $a147			jsr 	EvaluateInteger 			; get integer
.9e7c		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9e7f		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; zero mantissa ?
.9e82		f0 04		beq $9e88			beq 	_NotZero
.9e84		20 da a1	jsr $a1da			jsr 	NSMSetZero
.9e87		60		rts				rts
.9e88						_NotZero:
.9e88		4c fc 92	jmp $92fc			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9e8b						PeekByteUnary:
.9e8b		a9 01		lda #$01			lda 	#1
.9e8d		80 0a		bra $9e99			bra 	PeekUnary
.9e8f						PeekWUnary:
.9e8f		a9 02		lda #$02			lda 	#2
.9e91		80 06		bra $9e99			bra 	PeekUnary
.9e93						PeekLUnary:
.9e93		a9 03		lda #$03			lda 	#3
.9e95		80 02		bra $9e99			bra 	PeekUnary
.9e97						PeekDUnary:
.9e97		a9 04		lda #$04			lda 	#4
.9e99						PeekUnary:
.9e99		fa		plx				plx 								; restore position.
.9e9a		48		pha				pha 								; save count to copy on stack
.9e9b		20 5a a1	jsr $a15a			jsr		Evaluate16BitInteger 		; address as constant.
.9e9e		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9ea1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9ea3		85 36		sta $36				sta 	zTemp0
.9ea5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ea7		85 37		sta $37				sta 	zTemp0+1
.9ea9		20 da a1	jsr $a1da			jsr 	NSMSetZero 					; clear the result to zero.
.9eac		68		pla				pla 								; count in zTemp2
.9ead		85 3a		sta $3a				sta 	zTemp2
.9eaf		da		phx				phx 								; save stack position and offset of read
.9eb0		5a		phy				phy
.9eb1		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9eb3						_PULoop:
.9eb3		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9eb5		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9eb7		c8		iny				iny 								; next byte to write
.9eb8		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9eb9		18		clc				clc
.9eba		69 08		adc #$08			adc 	#MathStackSize
.9ebc		aa		tax				tax
.9ebd		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9ebf		d0 f2		bne $9eb3			bne 	_PULoop
.9ec1		7a		ply				ply 								; restore stack/code pos and exit.
.9ec2		fa		plx				plx
.9ec3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ec4						Unary_Random:
.9ec4		fa		plx				plx
.9ec5		20 36 9f	jsr $9f36			jsr 	Random32Bit 				; get a random number
.9ec8		20 1f 9f	jsr $9f1f			jsr 	URCopyToMantissa  			; put in mantissa
.9ecb		b1 30		lda ($30),y			lda 	(codePtr),y
.9ecd		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9ecf		f0 08		beq $9ed9			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9ed1		e8		inx				inx
.9ed2		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9ed5		ca		dex				dex
.9ed6		20 4e 94	jsr $944e			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9ed9						_URNoModulus:
.9ed9		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9edb		74 78		stz $78,x			stz 	NSExponent,x
.9edd		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9ee0		60		rts				rts
.9ee1						Unary_Rnd:
.9ee1		fa		plx				plx
.9ee2		20 28 a1	jsr $a128			jsr 	EvaluateNumber 				; number to use.
.9ee5		20 76 92	jsr $9276			jsr 	CheckRightBracket 			; closing bracket
.9ee8		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9eeb		f0 26		beq $9f13			beq 	_URCopySeed
.9eed		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9eef		10 1f		bpl $9f10			bpl 	_URDontSeed
.9ef1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ef3		49 17		eor #$17			eor 	#$17
.9ef5		8d 88 02	sta $0288			sta 	randomSeed+0
.9ef8		b5 60		lda $60,x			lda 	NSMantissa1,x
.9efa		49 a5		eor #$a5			eor 	#$A5
.9efc		8d 89 02	sta $0289			sta 	randomSeed+1
.9eff		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f01		49 c2		eor #$c2			eor 	#$C2
.9f03		8d 8a 02	sta $028a			sta 	randomSeed+2
.9f06		b5 70		lda $70,x			lda 	NSMantissa3,x
.9f08		49 9d		eor #$9d			eor 	#$9D
.9f0a		8d 8b 02	sta $028b			sta 	randomSeed+3
.9f0d		20 36 9f	jsr $9f36			jsr 	Random32Bit
.9f10						_URDontSeed:
.9f10		20 36 9f	jsr $9f36			jsr 	Random32Bit 				; generate a number
.9f13						_URCopySeed:
.9f13		20 1f 9f	jsr $9f1f			jsr 	URCopyToMantissa 			; copy into mantissa
.9f16		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9f18		95 78		sta $78,x			sta 	NSExponent,x
.9f1a		a9 08		lda #$08			lda 	#NSTFloat
.9f1c		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9f1e		60		rts				rts
.9f1f						URCopyToMantissa:
.9f1f		ad 88 02	lda $0288			lda 	randomSeed+0
.9f22		95 58		sta $58,x			sta 	NSMantissa0,x
.9f24		ad 89 02	lda $0289			lda 	randomSeed+1
.9f27		95 60		sta $60,x			sta 	NSMantissa1,x
.9f29		ad 8a 02	lda $028a			lda 	randomSeed+2
.9f2c		95 68		sta $68,x			sta 	NSMantissa2,x
.9f2e		ad 8b 02	lda $028b			lda 	randomSeed+3
.9f31		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9f33		95 70		sta $70,x			sta 	NSMantissa3,x
.9f35		60		rts				rts
.9f36						Random32Bit:
.9f36		5a		phy				phy
.9f37		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9f39		ad 88 02	lda $0288			lda 	randomSeed+0 				; check the seed isn't zero
.9f3c		d0 03		bne $9f41			bne 	_Random1
.9f3e		a8		tay				tay 								; if so do it 256 times
.9f3f		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9f41						_Random1:
.9f41		0a		asl a				asl 	a 							; LSFR RNG
.9f42		2e 89 02	rol $0289			rol 	randomSeed+1
.9f45		2e 8a 02	rol $028a			rol 	randomSeed+2
.9f48		2e 8b 02	rol $028b			rol 	randomSeed+3
.9f4b		90 02		bcc $9f4f			bcc 	_Random2
.9f4d		49 c5		eor #$c5			eor 	#$C5
.9f4f						_Random2:
.9f4f		88		dey				dey
.9f50		d0 ef		bne $9f41			bne 	_Random1
.9f52		8d 88 02	sta $0288			sta 	randomSeed+0
.9f55		7a		ply				ply
.9f56		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9f57						SgnUnary:
.9f57		fa		plx				plx 								; restore stack pos
.9f58		20 28 a1	jsr $a128			jsr 	EvaluateNumber 				; get a float or int
.9f5b		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9f5e		20 fc a1	jsr $a1fc			jsr 	NSMIsZero 					; if zero
.9f61		f0 0e		beq $9f71			beq 	_SGZero  					; return Int Zero
.9f63		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9f65		48		pha				pha
.9f66		a9 01		lda #$01			lda 	#1 							; set to 1
.9f68		20 dc a1	jsr $a1dc			jsr 	NSMSetByte
.9f6b		68		pla				pla
.9f6c		29 80		and #$80			and		#$80 						; copy the sign byte out
.9f6e		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9f70		60		rts				rts
.9f71		20 da a1	jsr $a1da	_SGZero:jsr 	NSMSetZero
.9f74		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9f75						ValUnary:
.9f75		fa		plx				plx 								; restore stack pos
.9f76		20 8b 9f	jsr $9f8b			jsr 	ValMainCode 				; do the main val() code
.9f79		b0 01		bcs $9f7c			bcs 	_VUError 					; couldn't convert
.9f7b		60		rts				rts
.9f7c						_VUError:
.9f7c		4c 62 a3	jmp $a362			jmp 	TypeError
.9f7f						IsValUnary:
.9f7f		fa		plx				plx 								; restore stack pos
.9f80		20 8b 9f	jsr $9f8b			jsr 	ValMainCode 				; do the main val() code
.9f83		b0 03		bcs $9f88			bcs 	_VUBad
.9f85		4c fc 92	jmp $92fc			jmp 	ReturnTrue
.9f88						_VUBad:
.9f88		4c 07 93	jmp $9307			jmp 	ReturnFalse
.9f8b						ValMainCode:
.9f8b		20 32 a1	jsr $a132			jsr 	EvaluateString 				; get a string
.9f8e		20 76 92	jsr $9276			jsr 	CheckRightBracket 			; check right bracket present
.9f91						ValEvaluateZTemp0:
.9f91		5a		phy				phy
.9f92		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9f94		f0 17		beq $9fad			beq 	_VMCFail2
.9f96		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9f98		48		pha				pha 								; save first character
.9f99		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9f9b		d0 01		bne $9f9e			bne 	_VMCStart
.9f9d		c8		iny				iny 								; skip over -
.9f9e						_VMCStart:
.9f9e		38		sec				sec 								; initialise first time round.
.9f9f						_VMCNext:
.9f9f		c8		iny				iny 								; pre-increment
.9fa0		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9fa2		f0 0c		beq $9fb0			beq 	_VMCSuccess 				; successful.
.9fa4		20 d9 9a	jsr $9ad9			jsr 	EncodeNumber 				; send it to the number-builder
.9fa7		90 03		bcc $9fac			bcc 	_VMCFail 					; if failed, give up.
.9fa9		18		clc				clc 								; next time round, countinue
.9faa		80 f3		bra $9f9f			bra 	_VMCNext
.9fac						_VMCFail:
.9fac		68		pla				pla
.9fad						_VMCFail2:
.9fad		7a		ply				ply
.9fae		38		sec				sec
.9faf		60		rts				rts
.9fb0						_VMCSuccess:
.9fb0		a9 00		lda #$00			lda 	#0 							; construct final
.9fb2		20 d9 9a	jsr $9ad9			jsr 	EncodeNumber 				; by sending a duff value.
.9fb5		68		pla				pla 								; if it was -ve
.9fb6		c9 2d		cmp #$2d			cmp 	#"-"
.9fb8		d0 03		bne $9fbd			bne 	_VMCNotNegative
.9fba		20 9c a1	jsr $a19c			jsr		NSMNegate 					; negate it.
.9fbd						_VMCNotNegative:
.9fbd		7a		ply				ply
.9fbe		18		clc				clc
.9fbf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9fc0						ChrUnary:
.9fc0		fa		plx				plx 								; restore stack pos
.9fc1		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9fc4		48		pha				pha
.9fc5		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9fc8		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9fca		20 a9 b3	jsr $b3a9			jsr 	StringTempAllocate
.9fcd		68		pla				pla 								; write number to it
.9fce		20 e2 b3	jsr $b3e2			jsr 	StringTempWrite
.9fd1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9fd2						SpcUnary:
.9fd2		fa		plx				plx 								; restore stack pos
.9fd3		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger			; get value
.9fd6		5a		phy				phy
.9fd7		48		pha				pha 								; save count
.9fd8		20 a9 b3	jsr $b3a9			jsr 	StringTempAllocate
.9fdb		7a		ply				ply 								; to do count in Y
.9fdc						_SpcLoop:
.9fdc		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9fde		f0 08		beq $9fe8			beq 	_SpcExit
.9fe0		a9 20		lda #$20			lda 	#32
.9fe2		20 e2 b3	jsr $b3e2			jsr 	StringTempWrite
.9fe5		88		dey				dey
.9fe6		80 f4		bra $9fdc			bra 	_SpcLoop
.9fe8						_SpcExit:
.9fe8		7a		ply				ply
.9fe9		20 76 92	jsr $9276			jsr 	CheckRightBracket
.9fec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9fed						Unary_Str:
.9fed		fa		plx				plx
.9fee		20 28 a1	jsr $a128			jsr 	EvaluateNumber  			; get number
.9ff1		20 76 92	jsr $9276			jsr 	CheckRightBracket 			; closing bracket
.9ff4		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9ff6		20 0f a0	jsr $a00f			jsr 	ConvertNumberToString 		; do the conversion.
.9ff9		a9 21		lda #$21			lda		#33 						; create buffer
.9ffb		20 a9 b3	jsr $b3a9			jsr 	StringTempAllocate 			; allocate memory
.9ffe		da		phx				phx  								; copy the converted string into the buffer.
.9fff		a2 00		ldx #$00			ldx 	#0
.a001						_USCopy:
.a001		bd c9 04	lda $04c9,x			lda 	decimalBuffer,x
.a004		20 e2 b3	jsr $b3e2			jsr 	StringTempWrite
.a007		e8		inx				inx
.a008		bd c9 04	lda $04c9,x			lda 	decimalBuffer,x
.a00b		d0 f4		bne $a001			bne 	_USCopy
.a00d		fa		plx				plx
.a00e		60		rts				rts
.a00f						ConvertNumberToString:
.a00f		5a		phy				phy 								; save code position
.a010		8d 94 02	sta $0294			sta 	decimalPlaces	 			; save number of DPs.
.a013		9c 95 02	stz $0295			stz 	dbOffset 					; offset into decimal buffer = start.
.a016		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a018		10 09		bpl $a023			bpl 	_CNTSNotNegative
.a01a		29 7f		and #$7f			and 	#$7F 						; make +ve
.a01c		95 50		sta $50,x			sta 	NSStatus,x
.a01e		a9 2d		lda #$2d			lda 	#"-"
.a020		20 84 a0	jsr $a084			jsr 	WriteDecimalBuffer
.a023						_CNTSNotNegative:
.a023		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a025		f0 12		beq $a039			beq 	_CNTSNotFloat
.a027		e8		inx				inx 								; round up so we don't get too many 6.999999
.a028		a9 01		lda #$01			lda 	#1
.a02a		20 dc a1	jsr $a1dc			jsr 	NSMSetByte
.a02d		ca		dex				dex
.a02e		b5 78		lda $78,x			lda		NSExponent,x
.a030		95 79		sta $79,x			sta 	NSExponent+1,x
.a032		a9 08		lda #$08			lda 	#NSTFloat
.a034		95 51		sta $51,x			sta 	NSStatus+1,x
.a036		20 de 97	jsr $97de			jsr 	FloatAdd
.a039						_CNTSNotFloat:
.a039		20 66 a0	jsr $a066			jsr 	MakePlusTwoString 			; do the integer part.
.a03c		20 a4 98	jsr $98a4			jsr 	FloatFractionalPart 		; get the fractional part
.a03f		20 55 99	jsr $9955			jsr 	NSNormalise					; normalise , exit if zero
.a042		f0 20		beq $a064			beq 	_CNTSExit
.a044		a9 2e		lda #$2e			lda 	#"."
.a046		20 84 a0	jsr $a084			jsr 	WriteDecimalBuffer 			; write decimal place
.a049						_CNTSDecimal:
.a049		ce 94 02	dec $0294			dec 	decimalPlaces 				; done all the decimals
.a04c		30 16		bmi $a064			bmi 	_CNTSExit
.a04e		e8		inx				inx 								; x 10.0
.a04f		a9 0a		lda #$0a			lda 	#10
.a051		20 dc a1	jsr $a1dc			jsr 	NSMSetByte
.a054		a9 08		lda #$08			lda 	#NSTFloat
.a056		95 50		sta $50,x			sta 	NSStatus,x
.a058		ca		dex				dex
.a059		20 23 99	jsr $9923			jsr 	FloatMultiply
.a05c		20 66 a0	jsr $a066			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a05f		20 a4 98	jsr $98a4			jsr 	FloatFractionalPart 		; get the fractional part
.a062		80 e5		bra $a049			bra 	_CNTSDecimal 				; keep going.
.a064						_CNTSExit:
.a064		7a		ply				ply
.a065		60		rts				rts
.a066						MakePlusTwoString:
.a066		da		phx				phx
.a067		20 bd a1	jsr $a1bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a06a		e8		inx				inx 								; access it
.a06b		e8		inx				inx
.a06c		20 fc 98	jsr $98fc			jsr 	FloatIntegerPart 			; make it an integer
.a06f		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a071		20 0e 97	jsr $970e			jsr 	ConvertInt32
.a074		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a076						_MPTSCopy:
.a076		bd a7 04	lda $04a7,x			lda 	numberBuffer,x
.a079		20 84 a0	jsr $a084			jsr 	WriteDecimalBuffer
.a07c		e8		inx				inx
.a07d		bd a7 04	lda $04a7,x			lda 	numberBuffer,x
.a080		d0 f4		bne $a076			bne 	_MPTSCopy
.a082		fa		plx				plx
.a083		60		rts				rts
.a084						WriteDecimalBuffer:
.a084		da		phx				phx
.a085		ae 95 02	ldx $0295			ldx 	dbOffset
.a088		9d c9 04	sta $04c9,x			sta 	decimalBuffer,x
.a08b		9e ca 04	stz $04ca,x			stz 	decimalBuffer+1,x
.a08e		ee 95 02	inc $0295			inc 	dbOffset
.a091		fa		plx				plx
.a092		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a093						Unary_Left:
.a093		fa		plx				plx
.a094		18		clc				clc 								; only one parameter
.a095		20 f8 a0	jsr $a0f8			jsr 	SubstringInitial 			; set up.
.a098		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a09a		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a09c		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a09e		80 25		bra $a0c5			bra 	SubstringMain
.a0a0						Unary_Right:
.a0a0		fa		plx				plx
.a0a1		18		clc				clc 								; only one parameter
.a0a2		20 f8 a0	jsr $a0f8			jsr 	SubstringInitial 			; set up.
.a0a5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a0a7		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a0a9		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a0ab		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a0ad		b0 02		bcs $a0b1			bcs 	_URNotUnderflow
.a0af		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a0b1						_URNotUnderflow:
.a0b1		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a0b3		80 10		bra $a0c5			bra 	SubstringMain
.a0b5						Unary_Mid:
.a0b5		fa		plx				plx
.a0b6		38		sec				sec 								; two parameters
.a0b7		20 f8 a0	jsr $a0f8			jsr 	SubstringInitial 			; set up.
.a0ba		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a0bc		f0 04		beq $a0c2			beq 	_UMError
.a0be		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a0c0		80 03		bra $a0c5			bra 	SubstringMain
.a0c2						_UMError:
.a0c2		4c 67 a3	jmp $a367			jmp 	ArgumentError
.a0c5						SubstringMain:
.a0c5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a0c7		d5 78		cmp $78,x			cmp 	NSExponent,x
.a0c9		b0 27		bcs $a0f2			bcs 	_SSMNull 					; if so, return an empty string.
.a0cb		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a0cd		f0 23		beq $a0f2			beq 	_SSMNull 					; return empty string.
.a0cf		18		clc				clc 								; add the offset +1 to the address and
.a0d0		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a0d2		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a0d4		85 36		sta $36				sta 	zTemp0
.a0d6		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a0d8		69 00		adc #$00			adc 	#0
.a0da		85 37		sta $37				sta 	zTemp0+1
.a0dc						_SSMNoCarry:
.a0dc		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a0de		20 a9 b3	jsr $b3a9			jsr 	StringTempAllocate 			; allocate that many characters
.a0e1		5a		phy				phy 								; save Y
.a0e2		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a0e4						_SSMCopy:
.a0e4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a0e6		f0 08		beq $a0f0			beq 	_SSMEString 				; no more to copy
.a0e8		20 e2 b3	jsr $b3e2			jsr 	StringTempWrite 			; and write it out.
.a0eb		c8		iny				iny
.a0ec		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a0ee		d0 f4		bne $a0e4			bne 	_SSMCopy
.a0f0						_SSMEString:
.a0f0		7a		ply				ply
.a0f1						_SSMExit:
.a0f1		60		rts				rts
.a0f2						_SSMNull:
.a0f2		a9 00		lda #$00			lda 	#0
.a0f4		20 a9 b3	jsr $b3a9			jsr 	StringTempAllocate
.a0f7		60		rts				rts
.a0f8						SubstringInitial:
.a0f8		da		phx				phx 								; save initial stack position
.a0f9		08		php				php 								; save carry on stack indicating 2 parameters
.a0fa		20 32 a1	jsr $a132			jsr 	EvaluateString 				; get a string
.a0fd		5a		phy				phy 								; calculate length to exponent.
.a0fe		a0 ff		ldy #$ff			ldy 	#$FF
.a100						_SIFindLength:
.a100		c8		iny				iny
.a101		b1 36		lda ($36),y			lda 	(zTemp0),y
.a103		d0 fb		bne $a100			bne 	_SIFindLength
.a105		98		tya				tya
.a106		95 78		sta $78,x			sta 	NSExponent,x
.a108		7a		ply				ply
.a109		e8		inx				inx
.a10a		20 7e 92	jsr $927e			jsr 	CheckComma 					; comma next
.a10d		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get next parameter
.a110		28		plp				plp 								; is it the last parameter ?
.a111		90 07		bcc $a11a			bcc 	_SSIExit 					; if so, exit.
.a113		e8		inx				inx
.a114		20 7e 92	jsr $927e			jsr 	CheckComma 					; comma next
.a117		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get last parameter
.a11a						_SSIExit:
.a11a		fa		plx				plx
.a11b		20 76 92	jsr $9276			jsr 	CheckRightBracket 			; check closing bracket
.a11e		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a11f						EvaluateValue:
.a11f		48		pha				pha
.a120		20 93 97	jsr $9793			jsr		EvaluateExpression 			; expression
.a123		20 56 9a	jsr $9a56			jsr 	Dereference					; derefernce it
.a126		68		pla				pla
.a127		60		rts				rts
.a128						EvaluateNumber:
.a128		20 1f a1	jsr $a11f			jsr 	EvaluateValue 				; get a value
.a12b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a12d		29 10		and #$10			and 	#NSBIsString
.a12f		d0 13		bne $a144			bne 	HelperTypeError
.a131		60		rts				rts
.a132						EvaluateString:
.a132		20 1f a1	jsr $a11f			jsr 	EvaluateValue 				; get a value
.a135		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a137		29 10		and #$10			and 	#NSBIsString
.a139		f0 09		beq $a144			beq 	HelperTypeError
.a13b						CopyAddressToTemp0:
.a13b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a13d		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a13f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a141		85 37		sta $37				sta 	zTemp0+1
.a143		60		rts				rts
.a144						HelperTypeError:
.a144		4c 62 a3	jmp $a362			jmp 	TypeError
.a147						EvaluateInteger:
.a147		20 28 a1	jsr $a128			jsr 	EvaluateNumber
.a14a		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a14c		d0 09		bne $a157			bne 	HelperValueError 			; if not, it's a float.
.a14e		60		rts				rts
.a14f						EvaluateUnsignedInteger:
.a14f		20 47 a1	jsr $a147			jsr 	EvaluateInteger 			; check integer is +ve
.a152		b5 50		lda $50,x			lda 	NSStatus,x
.a154		30 01		bmi $a157			bmi 	HelperValueError
.a156		60		rts				rts
.a157						HelperValueError:
.a157		4c 67 a3	jmp $a367			jmp 	ArgumentError
.a15a						Evaluate16BitInteger:
.a15a		20 4f a1	jsr $a14f			jsr	 	EvaluateUnsignedInteger		; get integer
.a15d		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a15f		15 68		ora $68,x			ora 	NSMantissa2,x
.a161		d0 f4		bne $a157			bne 	HelperValueError
.a163		60		rts				rts
.a164						Evaluate16BitIntegerSigned:
.a164		20 47 a1	jsr $a147			jsr	 	EvaluateInteger				; get integer
.a167		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a169		15 68		ora $68,x			ora 	NSMantissa2,x
.a16b		d0 ea		bne $a157			bne 	HelperValueError
.a16d		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a16f		10 03		bpl $a174			bpl 	_EISNotSigned
.a171		20 a3 a1	jsr $a1a3			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a174						_EISNotSigned:
.a174		60		rts				rts
.a175						Evaluate8BitInteger:
.a175		20 4f a1	jsr $a14f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a178		d0 dd		bne $a157			bne 	HelperValueError
.a17a		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a17c		15 68		ora $68,x			ora 	NSMantissa2,x
.a17e		15 60		ora $60,x			ora 	NSMantissa1,x
.a180		d0 d5		bne $a157			bne 	HelperValueError
.a182		b5 58		lda $58,x			lda 	NSMantissa0,x
.a184		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a185						Multiply8x8:
.a185		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a186		85 36		sta $36			  	sta 	zTemp0
.a188		86 37		stx $37				stx 	zTemp0+1
.a18a		a9 00		lda #$00			lda 	#0
.a18c		a2 08		ldx #$08			ldx 	#8
.a18e						_M88Loop:
.a18e		90 03		bcc $a193			bcc 	_M88NoAdd
.a190		18		clc				clc
.a191		65 37		adc $37				adc 	zTemp0+1
.a193						_M88NoAdd:
.a193		6a		ror a				ror 	a
.a194		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a196		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a197		d0 f5		bne $a18e			bne 	_M88Loop
.a199		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a19b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a19c						NSMNegate:
.a19c		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a19e		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a1a0		95 50		sta $50,x			sta 	NSStatus,x
.a1a2		60		rts				rts
.a1a3						NSMNegateMantissa:
.a1a3		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a1a4		a9 00		lda #$00			lda 	#0
.a1a6		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a1a8		95 58		sta $58,x			sta 	NSMantissa0,x
.a1aa		a9 00		lda #$00			lda 	#0
.a1ac		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a1ae		95 60		sta $60,x			sta 	NSMantissa1,x
.a1b0		a9 00		lda #$00			lda 	#0
.a1b2		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a1b4		95 68		sta $68,x			sta 	NSMantissa2,x
.a1b6		a9 00		lda #$00			lda 	#0
.a1b8		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a1ba		95 70		sta $70,x			sta 	NSMantissa3,x
.a1bc		60		rts				rts
.a1bd						NSMShiftUpTwo:
.a1bd		b5 58		lda $58,x			lda 	NSMantissa0,x
.a1bf		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1c1		b5 60		lda $60,x			lda 	NSMantissa1,x
.a1c3		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a1c5		b5 68		lda $68,x			lda 	NSMantissa2,x
.a1c7		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a1c9		b5 70		lda $70,x			lda 	NSMantissa3,x
.a1cb		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a1cd		b5 78		lda $78,x			lda 	NSExponent,x
.a1cf		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a1d1		b5 50		lda $50,x			lda 	NSStatus,x
.a1d3		95 52		sta $52,x			sta 	NSStatus+2,x
.a1d5		60		rts				rts
.a1d6						NSMSetZeroMantissaOnly:
.a1d6		a9 00		lda #$00			lda 	#0
.a1d8		80 06		bra $a1e0			bra 	NSMSetMantissa
.a1da						NSMSetZero:
.a1da		a9 00		lda #$00			lda 	#0
.a1dc						NSMSetByte:
.a1dc		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a1de		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a1e0						NSMSetMantissa:
.a1e0		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a1e2		74 60		stz $60,x			stz 	NSMantissa1,x
.a1e4		74 68		stz $68,x			stz 	NSMantissa2,x
.a1e6		74 70		stz $70,x			stz 	NSMantissa3,x
.a1e8		60		rts				rts
.a1e9						NSMShiftLeft:
.a1e9		18		clc				clc
.a1ea						NSMRotateLeft:
.a1ea		36 58		rol $58,x			rol 	NSMantissa0,x
.a1ec		36 60		rol $60,x			rol		NSMantissa1,x
.a1ee		36 68		rol $68,x			rol		NSMantissa2,x
.a1f0		36 70		rol $70,x			rol		NSMantissa3,x
.a1f2		60		rts				rts
.a1f3						NSMShiftRight:
.a1f3		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a1f5		76 68		ror $68,x			ror		NSMantissa2,x
.a1f7		76 60		ror $60,x			ror		NSMantissa1,x
.a1f9		76 58		ror $58,x			ror		NSMantissa0,x
.a1fb		60		rts				rts
.a1fc						NSMIsZero:
.a1fc		b5 70		lda $70,x			lda 	NSMantissa3,x
.a1fe		15 68		ora $68,x			ora		NSMantissa2,x
.a200		15 60		ora $60,x			ora		NSMantissa1,x
.a202		15 58		ora $58,x			ora		NSMantissa0,x
.a204		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a205						TickHandler:
.a205		5a		phy				phy 								; need to preserve Y
.a206		20 99 80	jsr $8099			jsr 	SNDUpdate 					; update sound
.a209		7a		ply				ply
.a20a		60		rts				rts
.04e2						LastTick:
>04e2								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a20b						Assemble_ora:
.a20b		20 30 81	jsr $8130		jsr	AssembleGroup1
>a20e		01					.byte $01
.a20f						Assemble_and:
.a20f		20 30 81	jsr $8130		jsr	AssembleGroup1
>a212		21					.byte $21
.a213						Assemble_eor:
.a213		20 30 81	jsr $8130		jsr	AssembleGroup1
>a216		41					.byte $41
.a217						Assemble_adc:
.a217		20 30 81	jsr $8130		jsr	AssembleGroup1
>a21a		61					.byte $61
.a21b						Assemble_sta:
.a21b		20 30 81	jsr $8130		jsr	AssembleGroup1
>a21e		81					.byte $81
.a21f						Assemble_lda:
.a21f		20 30 81	jsr $8130		jsr	AssembleGroup1
>a222		a1					.byte $a1
.a223						Assemble_cmp:
.a223		20 30 81	jsr $8130		jsr	AssembleGroup1
>a226		c1					.byte $c1
.a227						Assemble_sbc:
.a227		20 30 81	jsr $8130		jsr	AssembleGroup1
>a22a		e1					.byte $e1
.a22b						Assemble_asl:
.a22b		20 37 81	jsr $8137		jsr	AssembleGroup2
>a22e		02					.byte $02
>a22f		75					.byte $75
.a230						Assemble_rol:
.a230		20 37 81	jsr $8137		jsr	AssembleGroup2
>a233		22					.byte $22
>a234		75					.byte $75
.a235						Assemble_lsr:
.a235		20 37 81	jsr $8137		jsr	AssembleGroup2
>a238		42					.byte $42
>a239		75					.byte $75
.a23a						Assemble_ror:
.a23a		20 37 81	jsr $8137		jsr	AssembleGroup2
>a23d		62					.byte $62
>a23e		75					.byte $75
.a23f						Assemble_stx:
.a23f		20 37 81	jsr $8137		jsr	AssembleGroup2
>a242		82					.byte $82
>a243		50					.byte $50
.a244						Assemble_ldx:
.a244		20 37 81	jsr $8137		jsr	AssembleGroup2
>a247		a2					.byte $a2
>a248		d0					.byte $d0
.a249						Assemble_dec:
.a249		20 37 81	jsr $8137		jsr	AssembleGroup2
>a24c		c2					.byte $c2
>a24d		55					.byte $55
.a24e						Assemble_inc:
.a24e		20 37 81	jsr $8137		jsr	AssembleGroup2
>a251		e2					.byte $e2
>a252		55					.byte $55
.a253						Assemble_stz:
.a253		20 37 81	jsr $8137		jsr	AssembleGroup2
>a256		60					.byte $60
>a257		44					.byte $44
.a258						Assemble_bit:
.a258		20 37 81	jsr $8137		jsr	AssembleGroup2
>a25b		20					.byte $20
>a25c		55					.byte $55
.a25d						Assemble_sty:
.a25d		20 37 81	jsr $8137		jsr	AssembleGroup2
>a260		80					.byte $80
>a261		54					.byte $54
.a262						Assemble_ldy:
.a262		20 37 81	jsr $8137		jsr	AssembleGroup2
>a265		a0					.byte $a0
>a266		d5					.byte $d5
.a267						Assemble_cpy:
.a267		20 37 81	jsr $8137		jsr	AssembleGroup2
>a26a		c0					.byte $c0
>a26b		d4					.byte $d4
.a26c						Assemble_cpx:
.a26c		20 37 81	jsr $8137		jsr	AssembleGroup2
>a26f		e0					.byte $e0
>a270		d0					.byte $d0
.a271						Assemble_tsb:
.a271		20 37 81	jsr $8137		jsr	AssembleGroup2
>a274		00					.byte $00
>a275		50					.byte $50
.a276						Assemble_trb:
.a276		20 37 81	jsr $8137		jsr	AssembleGroup2
>a279		10					.byte $10
>a27a		50					.byte $50
.a27b						Assemble_jsr:
.a27b		20 37 81	jsr $8137		jsr	AssembleGroup2
>a27e		14					.byte $14
>a27f		10					.byte $10
.a280						Assemble_jmp:
.a280		20 37 81	jsr $8137		jsr	AssembleGroup2
>a283		40					.byte $40
>a284		10					.byte $10
.a285						Assemble_bpl:
.a285		20 88 81	jsr $8188		jsr	AssembleGroup3
>a288		10					.byte $10
.a289						Assemble_bmi:
.a289		20 88 81	jsr $8188		jsr	AssembleGroup3
>a28c		30					.byte $30
.a28d						Assemble_bvc:
.a28d		20 88 81	jsr $8188		jsr	AssembleGroup3
>a290		50					.byte $50
.a291						Assemble_bvs:
.a291		20 88 81	jsr $8188		jsr	AssembleGroup3
>a294		70					.byte $70
.a295						Assemble_bcc:
.a295		20 88 81	jsr $8188		jsr	AssembleGroup3
>a298		90					.byte $90
.a299						Assemble_bcs:
.a299		20 88 81	jsr $8188		jsr	AssembleGroup3
>a29c		b0					.byte $b0
.a29d						Assemble_bne:
.a29d		20 88 81	jsr $8188		jsr	AssembleGroup3
>a2a0		d0					.byte $d0
.a2a1						Assemble_beq:
.a2a1		20 88 81	jsr $8188		jsr	AssembleGroup3
>a2a4		f0					.byte $f0
.a2a5						Assemble_bra:
.a2a5		20 88 81	jsr $8188		jsr	AssembleGroup3
>a2a8		80					.byte $80
.a2a9						Assemble_brk:
.a2a9		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2ac		00					.byte $00
.a2ad						Assemble_php:
.a2ad		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2b0		08					.byte $08
.a2b1						Assemble_clc:
.a2b1		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2b4		18					.byte $18
.a2b5						Assemble_plp:
.a2b5		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2b8		28					.byte $28
.a2b9						Assemble_sec:
.a2b9		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2bc		38					.byte $38
.a2bd						Assemble_rti:
.a2bd		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2c0		40					.byte $40
.a2c1						Assemble_pha:
.a2c1		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2c4		48					.byte $48
.a2c5						Assemble_cli:
.a2c5		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2c8		58					.byte $58
.a2c9						Assemble_phy:
.a2c9		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2cc		5a					.byte $5a
.a2cd						Assemble_rts:
.a2cd		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2d0		60					.byte $60
.a2d1						Assemble_pla:
.a2d1		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2d4		68					.byte $68
.a2d5						Assemble_sei:
.a2d5		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2d8		78					.byte $78
.a2d9						Assemble_ply:
.a2d9		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2dc		7a					.byte $7a
.a2dd						Assemble_dey:
.a2dd		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2e0		88					.byte $88
.a2e1						Assemble_txa:
.a2e1		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2e4		8a					.byte $8a
.a2e5						Assemble_tya:
.a2e5		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2e8		98					.byte $98
.a2e9						Assemble_txs:
.a2e9		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2ec		9a					.byte $9a
.a2ed						Assemble_tay:
.a2ed		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2f0		a8					.byte $a8
.a2f1						Assemble_tax:
.a2f1		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2f4		aa					.byte $aa
.a2f5						Assemble_clv:
.a2f5		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2f8		b8					.byte $b8
.a2f9						Assemble_tsx:
.a2f9		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a2fc		ba					.byte $ba
.a2fd						Assemble_iny:
.a2fd		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a300		c8					.byte $c8
.a301						Assemble_dex:
.a301		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a304		ca					.byte $ca
.a305						Assemble_cld:
.a305		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a308		d8					.byte $d8
.a309						Assemble_phx:
.a309		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a30c		da					.byte $da
.a30d						Assemble_stp:
.a30d		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a310		db					.byte $db
.a311						Assemble_inx:
.a311		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a314		e8					.byte $e8
.a315						Assemble_nop:
.a315		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a318		ea					.byte $ea
.a319						Assemble_sed:
.a319		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a31c		f8					.byte $f8
.a31d						Assemble_plx:
.a31d		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a320		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a321						DecimalScalarTable:
>a321		66 66 66 66				.dword $66666666 ; 0.1
>a325		de					.byte $de
>a326		1f 85 eb 51				.dword $51eb851f ; 0.01
>a32a		db					.byte $db
>a32b		4c 37 89 41				.dword $4189374c ; 0.001
>a32f		d8					.byte $d8
>a330		ac 8b db 68				.dword $68db8bac ; 0.0001
>a334		d4					.byte $d4
>a335		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a339		d1					.byte $d1
>a33a		83 de 1b 43				.dword $431bde83 ; 1e-06
>a33e		ce					.byte $ce
>a33f		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a343		ca					.byte $ca
>a344		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a348		c7					.byte $c7
>a349		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a34d		c4					.byte $c4
>a34e		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a352		c0					.byte $c0
>a353		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a357		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a358						SyntaxError:
.a358		a9 02		lda #$02		lda	#2
.a35a		4c 8f 92	jmp $928f		jmp	ErrorHandler
.a35d						RangeError:
.a35d		a9 04		lda #$04		lda	#4
.a35f		4c 8f 92	jmp $928f		jmp	ErrorHandler
.a362						TypeError:
.a362		a9 05		lda #$05		lda	#5
.a364		4c 8f 92	jmp $928f		jmp	ErrorHandler
.a367						ArgumentError:
.a367		a9 07		lda #$07		lda	#7
.a369		4c 8f 92	jmp $928f		jmp	ErrorHandler
.a36c						NotDoneError:
.a36c		a9 0c		lda #$0c		lda	#12
.a36e		4c 8f 92	jmp $928f		jmp	ErrorHandler
.a371						ErrorText:
>a371		42 72 65 61 6b 00			.text	"Break",0
>a377		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a37f		72 72 6f 72 00
>a384		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a38c		20 62 79 20 7a 65 72 6f 00
>a395		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a39d		61 6e 67 65 00
>a3a2		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a3aa		6d 61 74 63 68 00
>a3b0		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a3b8		65 6d 6f 72 79 00
>a3be		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a3c6		61 72 67 75 6d 65 6e 74 00
>a3cf		53 74 6f 70 00				.text	"Stop",0
>a3d4		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a3dc		6f 6f 20 6c 6f 6e 67 00
>a3e4		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a3ec		6e 20 66 61 69 6c 65 64 00
>a3f5		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a3fd		61 74 61 00
>a401		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a409		65 6e 74 65 64 00
>a40f		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a417		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a423		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a42b		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a438		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a440		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a44d		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a455		68 6f 75 74 20 57 68 69 6c 65 00
>a460		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a468		68 6f 75 74 20 46 6f 72 00
>a471		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a479		61 63 6b 20 66 75 6c 6c 00
>a482		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a48a		75 63 74 75 72 65 00
>a491		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a499		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a4a6		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a4ae		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a4bc		41 72 72 61 79 20 73 69			.text	"Array size",0
>a4c4		7a 65 00
>a4c7		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a4cf		79 20 69 6e 64 65 78 00
>a4d7		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a4df		74 20 64 65 63 6c 61 72 65 64 00
>a4ea		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a4f2		20 66 6f 75 6e 64 00
>a4f9		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a501		65 72 72 6f 72 00
>a507		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a50f		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dd54		09 09 30 35 2f 30 31 2f			.text 9,9,"05/01/23 23"
>dd5c		32 33 20 32 33

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a515						RectangleCommand:
.a515		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a517		80 02		bra $a51b			bra 	ShapeDrawCmd
.a519						CircleCommand:
.a519		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a51b						ShapeDrawCmd:
.a51b		20 a5 a5	jsr $a5a5			jsr 	RunGraphicsCommand
.a51e						ShapeDraw:
.a51e		0d e4 04	ora $04e4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a521		4c 99 a5	jmp $a599			jmp 	ExecuteGraphicCommand	 	; and complete
.a524						SpriteCommand:
.a524		a2 00		ldx #$00			ldx 	#0
.a526		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get image number.
.a529		5a		phy				phy
.a52a		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a52c		a6 58		ldx $58				ldx 	NSMantissa0
.a52e		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a530		b0 0d		bcs $a53f			bcs 	_SCRange
.a532		a0 ff		ldy #$ff			ldy 	#255
.a534		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a537		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a539		7a		ply				ply
.a53a		20 a5 a5	jsr $a5a5			jsr 	RunGraphicsCommand
.a53d		80 5a		bra $a599			bra 	ExecuteGraphicCommand
.a53f						_SCRange:
.a53f		4c 5d a3	jmp $a35d			jmp 	RangeError
.a542						ImageCommand:
.a542		a2 00		ldx #$00			ldx 	#0
.a544		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get image number.
.a547		20 a5 a5	jsr $a5a5			jsr 	RunGraphicsCommand
.a54a						ImageRunDraw:
.a54a		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a54c		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a54f		ad ea 04	lda $04ea			lda 	gxDrawScale
.a552		0a		asl a				asl 	a
.a553		0a		asl a				asl 	a
.a554		0a		asl a				asl 	a
.a555		a8		tay				tay
.a556		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a558		a6 58		ldx $58				ldx 	NSMantissa0
.a55a		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a55d		60		rts				rts
.a55e						TextCommand:
.a55e		a2 00		ldx #$00			ldx 	#0
.a560		20 32 a1	jsr $a132			jsr 	EvaluateString 				; get text
.a563		20 a5 a5	jsr $a5a5			jsr 	RunGraphicsCommand
.a566						TextRunDraw:
.a566		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a568		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a56b		a0 00		ldy #$00			ldy 	#0
.a56d						_IRDLoop:
.a56d		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a56f		85 37		sta $37				sta 	zTemp0+1
.a571		a5 58		lda $58				lda 	NSMantissa0
.a573		85 36		sta $36				sta 	zTemp0
.a575		b1 36		lda ($36),y			lda 	(zTemp0),y
.a577		f0 13		beq $a58c			beq 	_IRDExit
.a579		5a		phy				phy									; save string pos
.a57a		48		pha				pha 								; save char
.a57b		ad ea 04	lda $04ea			lda 	gxDrawScale 				; get scale
.a57e		0a		asl a				asl 	a
.a57f		0a		asl a				asl 	a
.a580		0a		asl a				asl 	a
.a581		a8		tay				tay
.a582		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a584		fa		plx				plx 								; char to draw
.a585		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a588		7a		ply				ply 								; restore string pos
.a589		c8		iny				iny
.a58a		90 e1		bcc $a56d			bcc 	_IRDLoop 					; go back if no error.
.a58c						_IRDExit:
.a58c		60		rts				rts
.a58d						PlotCommand:
.a58d		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a58f		20 a5 a5	jsr $a5a5			jsr 	RunGraphicsCommand
.a592		80 05		bra $a599			bra 	ExecuteGraphicCommand
.a594						LineCommand:
.a594		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a596		20 a5 a5	jsr $a5a5			jsr 	RunGraphicsCommand
.a599						ExecuteGraphicCommand:
.a599		0d e3 04	ora $04e3			ora 	gxCommandID 				; make a full command
.a59c		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.a59f		b0 01		bcs $a5a2			bcs 	_EGCError
.a5a1		60		rts				rts
.a5a2						_EGCError:
.a5a2		4c 58 a3	jmp $a358			jmp 	SyntaxError
.a5a5						RunGraphicsCommand:
.a5a5		8d e3 04	sta $04e3			sta 	gxCommandID					; save TODO graphics command.
.a5a8		68		pla				pla 								; pop handler address
.a5a9		fa		plx				plx
.a5aa		1a		inc a				inc 	a
.a5ab		d0 01		bne $a5ae			bne 	_RGINoCarry
.a5ad		e8		inx				inx
.a5ae						_RGINoCarry:
.a5ae		8d e8 04	sta $04e8			sta 	gxHandler
.a5b1		8e e9 04	stx $04e9			stx 	gxHandler+1
.a5b4						_RGICommandLoop:
.a5b4		b1 30		lda ($30),y			lda 	(codePtr),y
.a5b6		c8		iny				iny
.a5b7		c9 d9		cmp #$d9			cmp 	#KWD_TO						; is it TO x,y
.a5b9		f0 53		beq $a60e			beq 	_RGI_To
.a5bb		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a5bd		f0 55		beq $a614			beq 	_RGI_Here
.a5bf		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a5c1		f0 3d		beq $a600			beq 	_RGI_Exit
.a5c3		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a5c5		f0 39		beq $a600			beq 	_RGI_Exit
.a5c7		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a5c9		f0 3e		beq $a609			beq 	_RGI_Frame
.a5cb		c9 d5		cmp #$d5			cmp 	#KWD_SOLID
.a5cd		f0 33		beq $a602			beq 	_RGI_Solid
.a5cf		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a5d1		f0 4b		beq $a61e			beq 	_RGI_By
.a5d3		c9 bd		cmp #$bd			cmp 	#KWD_FROM 					; from
.a5d5		f0 17		beq $a5ee			beq 	_RGI_Move2
.a5d7		c9 ba		cmp #$ba			cmp 	#KWD_DIM 					; dim (set scale)
.a5d9		f0 62		beq $a63d			beq 	_RGI_Dim
.a5db		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a5dd		f0 74		beq $a653			beq 	_RGI_Colour
.a5df		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a5e1		f0 70		beq $a653			beq 	_RGI_Colour
.a5e3		ae e3 04	ldx $04e3			ldx 	gxCommandID
.a5e6		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a5e8		d0 03		bne $a5ed			bne 	_RGI_Move 					; move
.a5ea		4c 7b a6	jmp $a67b			jmp		_RGI_SpriteInstructions
.a5ed						_RGI_Move:
.a5ed		88		dey				dey 								; unpick get.
.a5ee						_RGI_Move2:
.a5ee		20 a1 a6	jsr $a6a1			jsr 	GCGetCoordinatePair 		; move to here
.a5f1		20 c8 a6	jsr $a6c8			jsr 	GCCopyPairToStore 			; save
.a5f4		5a		phy				phy
.a5f5		20 be a6	jsr $a6be			jsr 	GCLoadAXY 					; load in
.a5f8		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a5fa		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5fd		7a		ply				ply
.a5fe		80 b4		bra $a5b4			bra 	_RGICommandLoop 			; and go round
.a600						_RGI_Exit:
.a600		88		dey				dey 								; unpick : / EOL
.a601		60		rts				rts
.a602						_RGI_Solid:
.a602		a9 02		lda #$02			lda 	#2
.a604		8d e4 04	sta $04e4			sta 	gxFillSolid
.a607		80 ab		bra $a5b4			bra 	_RGICommandLoop
.a609						_RGI_Frame:
.a609		9c e4 04	stz $04e4			stz 	gxFillSolid
.a60c		80 a6		bra $a5b4			bra 	_RGICommandLoop
.a60e						_RGI_To:
.a60e		20 a1 a6	jsr $a6a1			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a611		20 c8 a6	jsr $a6c8			jsr 	GCCopyPairToStore
.a614						_RGI_Here:
.a614		5a		phy				phy
.a615		20 be a6	jsr $a6be			jsr 	GCLoadAXY 					; load it into AXY
.a618		20 78 a6	jsr $a678			jsr 	_RGICallHandler 			; go do whatever it is.
.a61b		7a		ply				ply
.a61c		80 96		bra $a5b4			bra 	_RGICommandLoop 			; and go round
.a61e						_RGI_By:
.a61e		20 ae a6	jsr $a6ae			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a621		18		clc				clc
.a622		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a624		6d e5 04	adc $04e5			adc 	gxXPos
.a627		8d e5 04	sta $04e5			sta 	gxXPos
.a62a		a5 61		lda $61				lda 	NSMantissa1+1
.a62c		6d e6 04	adc $04e6			adc 	gxXPos+1
.a62f		8d e6 04	sta $04e6			sta 	gxXPos+1
.a632		a5 5a		lda $5a				lda 	NSMantissa0+2
.a634		18		clc				clc
.a635		6d e7 04	adc $04e7			adc 	gxYPos
.a638		8d e7 04	sta $04e7			sta 	gxYPos
.a63b		80 d7		bra $a614			bra 	_RGI_Here
.a63d						_RGI_Dim:
.a63d		a2 01		ldx #$01			ldx	 	#1
.a63f		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger
.a642		a5 59		lda $59				lda 	NSMantissa0+1
.a644		c9 00		cmp #$00			cmp 	#0
.a646		f0 2d		beq $a675			beq 	_RGIRange
.a648		c9 09		cmp #$09			cmp 	#8+1
.a64a		b0 29		bcs $a675			bcs		_RGIRange
.a64c		3a		dec a				dec 	a
.a64d		8d ea 04	sta $04ea			sta 	gxDrawScale
.a650		4c b4 a5	jmp $a5b4			jmp 	_RGICommandLoop
.a653						_RGI_Colour:
.a653		a2 01		ldx #$01			ldx 	#1 							; colour
.a655		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger
.a658		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a65a		20 da a1	jsr $a1da			jsr 	NSMSetZero
.a65d		b1 30		lda ($30),y			lda 	(codePtr),y
.a65f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a661		d0 04		bne $a667			bne 	_RGICDefaultMode
.a663		c8		iny				iny
.a664		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger
.a667						_RGICDefaultMode:
.a667		5a		phy				phy
.a668		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a66a		a6 59		ldx $59				ldx 	NSMantissa0+1
.a66c		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a66e		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a671		7a		ply				ply
.a672		4c b4 a5	jmp $a5b4			jmp 	_RGICommandLoop 			; and go round
.a675						_RGIRange:
.a675		4c 5d a3	jmp $a35d			jmp 	RangeError
.a678						_RGICallHandler:
.a678		6c e8 04	jmp ($04e8)			jmp 	(gxHandler)
.a67b						_RGI_SpriteInstructions:
.a67b		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a67d		f0 07		beq $a686			beq 	_RGISpriteOff
.a67f		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a681		f0 13		beq $a696			beq 	_RGISetImage
.a683		4c ed a5	jmp $a5ed			jmp 	_RGI_Move
.a686						_RGISpriteOff:
.a686		5a		phy				phy
.a687		a0 01		ldy #$01			ldy 	#1
.a689		a2 00		ldx #$00			ldx 	#0
.a68b						_RGIDoCommandLoop:
.a68b		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a68d		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a690		7a		ply				ply
.a691		b0 e2		bcs $a675			bcs 	_RGIRange
.a693		4c b4 a5	jmp $a5b4			jmp 	_RGICommandLoop
.a696						_RGISetImage:
.a696		a2 01		ldx #$01			ldx 	#1
.a698		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger
.a69b		5a		phy				phy
.a69c		aa		tax				tax
.a69d		a0 00		ldy #$00			ldy 	#0
.a69f		80 ea		bra $a68b			bra 	_RGIDoCommandLoop
.a6a1						GCGetCoordinatePair:
.a6a1		a2 01		ldx #$01			ldx 	#1
.a6a3		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger
.a6a6		20 7e 92	jsr $927e			jsr 	CheckComma
.a6a9		e8		inx				inx
.a6aa		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger
.a6ad		60		rts				rts
.a6ae						GCSignedCoordinatePair:
.a6ae		a2 01		ldx #$01			ldx 	#1
.a6b0		20 64 a1	jsr $a164			jsr 	Evaluate16BitIntegerSigned
.a6b3		20 7e 92	jsr $927e			jsr 	CheckComma
.a6b6		e8		inx				inx
.a6b7		20 64 a1	jsr $a164			jsr 	Evaluate16BitIntegerSigned
.a6ba		60		rts				rts
.a6bb						_GCCPRange:
.a6bb		4c 5d a3	jmp $a35d			jmp 	RangeError
.a6be						GCLoadAXY:
.a6be		ad e6 04	lda $04e6			lda 	gxXPos+1
.a6c1		ae e5 04	ldx $04e5			ldx 	gxXPos
.a6c4		ac e7 04	ldy $04e7			ldy 	gxYPos
.a6c7		60		rts				rts
.a6c8						GCCopyPairToStore:
.a6c8		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a6ca		8d e5 04	sta $04e5			sta 	gxXPos
.a6cd		a5 61		lda $61				lda 	NSMantissa1+1
.a6cf		8d e6 04	sta $04e6			sta 	gxXPos+1
.a6d2		a5 5a		lda $5a				lda 	NSMantissa0+2
.a6d4		8d e7 04	sta $04e7			sta 	gxYPos
.a6d7		60		rts				rts
.04e3						gxCommandID:
>04e3								.fill 	1
.04e4						gxFillSolid:
>04e4								.fill 	1
.04e5						gxXPos:
>04e5								.fill 	2
.04e7						gxYPos:
>04e7								.fill 	1
.04e8						gxHandler:
>04e8								.fill 	2
.04ea						gxDrawScale:
>04ea								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a6d8						BitmapCtrl:
.a6d8		b1 30		lda ($30),y			lda 	(codePtr),y
.a6da		c8		iny				iny
.a6db		a2 01		ldx #$01			ldx 	#1
.a6dd		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a6df		f0 11		beq $a6f2			beq 	BitmapSwitch
.a6e1		ca		dex				dex
.a6e2		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a6e4		f0 0c		beq $a6f2			beq 	BitmapSwitch
.a6e6		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get the colour
.a6e9		5a		phy				phy
.a6ea		aa		tax				tax
.a6eb		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a6ed		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a6f0		7a		ply				ply
.a6f1		60		rts				rts
.a6f2						BitmapSwitch:
.a6f2		5a		phy				phy
.a6f3		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a6f5		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a6f7		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a6fa		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a6fc		a0 00		ldy #$00			ldy 	#0
.a6fe		a2 ff		ldx #$ff			ldx 	#$FF
.a700		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a703		9c e4 04	stz $04e4			stz 	gxFillSolid
.a706		9c e5 04	stz $04e5			stz 	gxXPos
.a709		9c e6 04	stz $04e6			stz 	gxXPos+1
.a70c		9c e7 04	stz $04e7			stz 	gxYPos
.a70f		9c ea 04	stz $04ea			stz 	gxDrawScale
.a712		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a714		a2 00		ldx #$00			ldx 	#0
.a716		a0 00		ldy #$00			ldy 	#0
.a718		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a71b		7a		ply				ply
.a71c		60		rts				rts
.a71d						SpritesCtrl:
.a71d		b1 30		lda ($30),y			lda 	(codePtr),y
.a71f		c8		iny				iny
.a720		a2 01		ldx #$01			ldx 	#1
.a722		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a724		f0 08		beq $a72e			beq 	SpriteSwitch
.a726		ca		dex				dex
.a727		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a729		f0 03		beq $a72e			beq 	SpriteSwitch
.a72b		4c 58 a3	jmp $a358			jmp 	SyntaxError
.a72e						SpriteSwitch:
.a72e		5a		phy				phy
.a72f		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a731		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a733		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a736		7a		ply				ply
.a737		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a738						GfxCommand:
.a738		a2 00		ldx #$00			ldx 	#0
.a73a		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; command
.a73d		20 7e 92	jsr $927e			jsr 	CheckComma
.a740		e8		inx				inx
.a741		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger 		; X
.a744		20 7e 92	jsr $927e			jsr 	CheckComma
.a747		e8		inx				inx
.a748		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; Y
.a74b		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a74d		4a		lsr a				lsr 	a
.a74e		d0 12		bne $a762			bne 	_GfxError
.a750		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a752		b0 0e		bcs $a762			bcs 	_GfxError 					; bit 7 should have been zero
.a754		5a		phy				phy 								; save pos
.a755		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a757		a6 59		ldx $59				ldx 	NSMantissa0+1
.a759		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a75b		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a75e		b0 02		bcs $a762			bcs 	_GfxError
.a760		7a		ply				ply 								; restore pos and exit.
.a761		60		rts				rts
.a762						_GfxError:
.a762		4c 5d a3	jmp $a35d			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a765						UnaryHit:
.a765		fa		plx				plx
.a766		a9 36		lda #$36			lda 	#zTemp0
.a768		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a76b		20 7e 92	jsr $927e			jsr 	CheckComma
.a76e		e8		inx				inx
.a76f		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a772		20 76 92	jsr $9276			jsr		CheckRightBracket
.a775		ca		dex				dex 								; fix back up again.
.a776		da		phx				phx 								; save X/Y
.a777		5a		phy				phy
.a778		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a77a		b5 58		lda $58,x			lda 	NSMantissa0,x
.a77c		aa		tax				tax
.a77d		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a77f		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; calculate result
.a782		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a783		7a		ply				ply 								; restore XY
.a784		fa		plx				plx
.a785		20 dc a1	jsr $a1dc			jsr 	NSMSetByte 					; return the hit result
.a788		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a789						PaletteCommand:
.a789		a2 00		ldx #$00			ldx 	#0
.a78b		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; colour
.a78e		20 7e 92	jsr $927e			jsr 	CheckComma
.a791		e8		inx				inx
.a792		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger 		; r
.a795		20 7e 92	jsr $927e			jsr 	CheckComma
.a798		e8		inx				inx
.a799		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; g
.a79c		20 7e 92	jsr $927e			jsr 	CheckComma
.a79f		e8		inx				inx
.a7a0		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; b
.a7a3		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a7a5		85 36		sta $36				sta 	zTemp0
.a7a7		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a7a9		85 37		sta $37				sta 	zTemp0+1
.a7ab		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a7ad		26 37		rol $37				rol	 	zTemp0+1
.a7af		06 36		asl $36				asl 	zTemp0
.a7b1		26 37		rol $37				rol	 	zTemp0+1
.a7b3		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a7b5		85 01		sta $01				sta 	1
.a7b7		5a		phy				phy
.a7b8		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a7ba		92 36		sta ($36)			sta 	(zTemp0)
.a7bc		a0 01		ldy #$01			ldy 	#1
.a7be		a5 5a		lda $5a				lda 	NSMantissa0+2
.a7c0		91 36		sta ($36),y			sta 	(zTemp0),y
.a7c2		a5 59		lda $59				lda 	NSMantissa0+1
.a7c4		c8		iny				iny
.a7c5		91 36		sta ($36),y			sta 	(zTemp0),y
.a7c7		7a		ply				ply
.a7c8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a7c9						XLoadCommand:
.a7c9		20 e3 8c	jsr $8ce3			jsr 	NewProgram
.a7cc		20 9f 83	jsr $839f			jsr 	BackloadProgram
.a7cf		4c 5e 84	jmp $845e			jmp 	WarmStart
.a7d2						XGoCommand:
.a7d2		20 e3 8c	jsr $8ce3			jsr 	NewProgram
.a7d5		20 9f 83	jsr $839f			jsr 	BackloadProgram
.a7d8		4c 61 8e	jmp $8e61			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a7db						UnaryEvent:
.a7db		fa		plx				plx
.a7dc		20 75 a8	jsr $a875			jsr 	TimerToStackX 				; timer in +0
.a7df		e8		inx				inx  								; put reference into +1
.a7e0		20 dd 9b	jsr $9bdd			jsr 	EvaluateTerm
.a7e3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a7e5		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a7e7		d0 4c		bne $a835			bne 	_UEType
.a7e9		e8		inx				inx 								; put the step in +2
.a7ea		20 7e 92	jsr $927e			jsr 	CheckComma
.a7ed		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger
.a7f0		20 76 92	jsr $9276			jsr 	CheckRightBracket
.a7f3		ca		dex				dex
.a7f4		ca		dex				dex
.a7f5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a7f7		85 36		sta $36				sta 	zTemp0
.a7f9		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a7fb		85 37		sta $37				sta 	zTemp0+1
.a7fd		5a		phy				phy
.a7fe		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a800		b1 36		lda ($36),y			lda 	(zTemp0),y
.a802		30 2d		bmi $a831			bmi 	_UEFalse 					; exit if signed.
.a804		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a806		b5 58		lda $58,x			lda 	NSMantissa0,x
.a808		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a80a		c8		iny				iny
.a80b		b5 60		lda $60,x			lda 	NSMantissa1,x
.a80d		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a80f		c8		iny				iny
.a810		b5 68		lda $68,x			lda 	NSMantissa2,x
.a812		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a814		90 1b		bcc $a831			bcc 	_UEFalse 					; no, return FALSE.
.a816		18		clc				clc
.a817		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a819		b5 58		lda $58,x			lda 	NSMantissa0,x
.a81b		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a81d		91 36		sta ($36),y			sta 	(zTemp0),y
.a81f		c8		iny				iny
.a820		b5 60		lda $60,x			lda 	NSMantissa1,x
.a822		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a824		91 36		sta ($36),y			sta 	(zTemp0),y
.a826		c8		iny				iny
.a827		b5 68		lda $68,x			lda 	NSMantissa2,x
.a829		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a82b		91 36		sta ($36),y			sta 	(zTemp0),y
.a82d		7a		ply				ply
.a82e		4c fc 92	jmp $92fc			jmp 	ReturnTrue
.a831						_UEFalse:
.a831		7a		ply				ply 								; restore Y
.a832		4c 07 93	jmp $9307			jmp 	ReturnFalse 				; and return False
.a835						_UEType:
.a835		4c 62 a3	jmp $a362			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a838						UnaryJoyX:
.a838		18		clc				clc
.a839		80 01		bra $a83c			bra 	JoyMain
.a83b						UnaryJoyY:
.a83b		38		sec				sec
.a83c						JoyMain:
.a83c		fa		plx				plx 								; get pos
.a83d		08		php				php 								; save carry (set for Y)
.a83e		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a841		20 76 92	jsr $9276			jsr 	CheckRightBracket
.a844		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a847		28		plp				plp
.a848		b0 02		bcs $a84c			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a84a		4a		lsr a				lsr 	a
.a84b		4a		lsr a				lsr 	a
.a84c						_JMNoShift:
.a84c		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a84d		b0 07		bcs $a856			bcs 	JMIsLeft
.a84f		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a850		b0 07		bcs $a859			bcs 	JMIsRight
.a852		20 da a1	jsr $a1da			jsr 	NSMSetZero 					; zero result
.a855		60		rts				rts
.a856						JMIsLeft:
.a856		4c fc 92	jmp $92fc			jmp 	ReturnTrue
.a859						JMIsRight:
.a859		a9 01		lda #$01			lda 	#1
.a85b		20 dc a1	jsr $a1dc			jsr 	NSMSetByte
.a85e		60		rts				rts
.a85f						UnaryJoyB:
.a85f		fa		plx				plx 								; get pos
.a860		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a863		20 76 92	jsr $9276			jsr 	CheckRightBracket
.a866		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a869		29 10		and #$10			and 	#$10
.a86b		d0 e9		bne $a856			bne 	JMIsLeft
.a86d		20 da a1	jsr $a1da			jsr 	NSMSetZero
.a870		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a871						UnaryTimer:
.a871		fa		plx				plx
.a872		20 76 92	jsr $9276			jsr 	CheckRightBracket
.a875						TimerToStackX:
.a875		20 da a1	jsr $a1da			jsr 	NSMSetZero 					; zero result
.a878		64 01		stz $01				stz 	1 							; access I/O
.a87a		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a87d		95 58		sta $58,x			sta 	NSMantissa0,x
.a87f		ad 5a d6	lda $d65a			lda 	$D65A
.a882		95 60		sta $60,x			sta 	NSMantissa1,x
.a884		ad 5b d6	lda $d65b			lda 	$D65B
.a887		95 68		sta $68,x			sta 	NSMantissa2,x
.a889		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a88a						MemoryDeleteLine:
.a88a		20 a9 a8	jsr $a8a9			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a88d		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a88f		a8		tay				tay
.a890						_MDDLLoop:
.a890		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a892		92 30		sta ($30)			sta 	(codePtr)
.a894		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a896		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a898		d0 07		bne $a8a1			bne 	_MDLDLNext
.a89a		a5 31		lda $31				lda 	codePtr+1
.a89c		c5 3b		cmp $3b				cmp 	zTemp2+1
.a89e		d0 01		bne $a8a1			bne 	_MDLDLNext
.a8a0						_MDDLExit:
.a8a0		60		rts				rts
.a8a1						_MDLDLNext:
.a8a1		e6 30		inc $30				inc 	codePtr						; next byte
.a8a3		d0 eb		bne $a890			bne 	_MDDLLoop
.a8a5		e6 31		inc $31				inc 	codePtr+1
.a8a7		80 e7		bra $a890			bra 	_MDDLLoop
.a8a9						IMemoryFindEnd:
.a8a9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8ab		85 3a		sta $3a				sta 	0+zTemp2
.a8ad		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8af		85 3b		sta $3b				sta 	1+zTemp2
.a8b1						_MDLFELoop:
.a8b1		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a8b3		f0 0b		beq $a8c0			beq 	_MDLFEExit
.a8b5		18		clc				clc
.a8b6		65 3a		adc $3a				adc 	zTemp2
.a8b8		85 3a		sta $3a				sta 	zTemp2
.a8ba		90 f5		bcc $a8b1			bcc 	_MDLFELoop
.a8bc		e6 3b		inc $3b				inc 	zTemp2+1
.a8be		80 f1		bra $a8b1			bra 	_MDLFELoop
.a8c0						_MDLFEExit:
.a8c0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a8c1						MemoryInsertLine:
.a8c1		08		php				php
.a8c2		20 a9 a8	jsr $a8a9			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8c5		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a8c7		1a		inc a				inc 	a
.a8c8		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a8ca		b0 36		bcs $a902			bcs 	_MDLIError 					; no, fail.
.a8cc		28		plp				plp 								; do at a specific point or the end ?
.a8cd		90 08		bcc $a8d7			bcc 	_MDLIFound 					; if specific point already set.
.a8cf		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a8d1		85 30		sta $30				sta 	codePtr 					; end.
.a8d3		a5 3b		lda $3b				lda 	zTemp2+1
.a8d5		85 31		sta $31				sta 	codePtr+1
.a8d7						_MDLIFound:
.a8d7		ad aa 02	lda $02aa			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a8da		a8		tay				tay
.a8db						_MDLIInsert:
.a8db		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a8dd		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a8df		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a8e1		c5 3a		cmp $3a				cmp 	zTemp2
.a8e3		d0 06		bne $a8eb			bne 	_MDLINext
.a8e5		a5 31		lda $31				lda 	codePtr+1
.a8e7		c5 3b		cmp $3b				cmp 	zTemp2+1
.a8e9		f0 0a		beq $a8f5			beq 	_MDLIHaveSpace
.a8eb						_MDLINext:
.a8eb		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a8ed		d0 02		bne $a8f1			bne 	_MDLINoBorrow
.a8ef		c6 3b		dec $3b				dec 	zTemp2+1
.a8f1						_MDLINoBorrow:
.a8f1		c6 3a		dec $3a				dec 	zTemp2
.a8f3		80 e6		bra $a8db			bra 	_MDLIInsert
.a8f5						_MDLIHaveSpace:
.a8f5		ac aa 02	ldy $02aa			ldy 	tokenOffset 				; bytes to copy
.a8f8		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a8f9						_MDLICopy:
.a8f9		b9 aa 02	lda $02aa,y			lda 	tokenOffset,y
.a8fc		91 30		sta ($30),y			sta 	(codePtr),y
.a8fe		88		dey				dey
.a8ff		10 f8		bpl $a8f9			bpl 	_MDLICopy
.a901		60		rts				rts
.a902						_MDLIError:
.a902		a9 06		lda #$06		lda	#6
.a904		4c 8f 92	jmp $928f		jmp	ErrorHandler
.a907						MDLAppendLine:
.a907		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a909		85 36		sta $36				sta 	zTemp0
.a90b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a90d		85 38		sta $38				sta 	0+zTemp1
.a90f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a911		85 39		sta $39				sta 	1+zTemp1
.a913		b2 38		lda ($38)			lda 	(zTemp1)
.a915		d0 0a		bne $a921			bne 	_MDLANoInitialise
.a917		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a919		8d eb 04	sta $04eb			sta 	0+AppendPointer
.a91c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a91e		8d ec 04	sta $04ec			sta 	1+AppendPointer
.a921						_MDLANoInitialise:
.a921		18		clc				clc
.a922		ad eb 04	lda $04eb			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a925		85 38		sta $38				sta 	zTemp1
.a927		72 36		adc ($36)			adc 	(zTemp0)
.a929		8d eb 04	sta $04eb			sta 	AppendPointer
.a92c		ad ec 04	lda $04ec			lda 	AppendPointer+1
.a92f		85 39		sta $39				sta 	zTemp1+1
.a931		69 00		adc #$00			adc 	#0
.a933		8d ec 04	sta $04ec			sta 	AppendPointer+1
.a936		a0 00		ldy #$00			ldy 	#0
.a938						_MDLACopy:
.a938		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a93a		91 38		sta ($38),y			sta 	(zTemp1),y
.a93c		c8		iny				iny
.a93d		98		tya				tya
.a93e		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a940		d0 f6		bne $a938			bne 	_MDLACopy
.a942		a9 00		lda #$00			lda 	#0 							; end of program.
.a944		91 38		sta ($38),y			sta 	(zTemp1),y
.a946		60		rts				rts
.04eb						AppendPointer:
>04eb								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a947						MemoryNew:
.a947		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a949		85 30		sta $30				sta 	codePtr
.a94b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a94d		85 31		sta $31				sta 	codePtr+1
.a94f		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a951		92 30		sta ($30)			sta 	(codePtr)
.a953		60		rts				rts
.a954						MemoryInline:
.a954		98		tya				tya 								; put address into stack,x
.a955		18		clc				clc  								; get the offset, add codePtr
.a956		65 30		adc $30				adc 	codePtr
.a958		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a95a		a5 31		lda $31				lda 	codePtr+1
.a95c		69 00		adc #$00			adc 	#0
.a95e		95 60		sta $60,x			sta 	NSMantissa1,x
.a960		74 68		stz $68,x			stz 	NSMantissa2,x
.a962		74 70		stz $70,x			stz 	NSMantissa3,x
.a964		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a965						MemorySearch:
.a965		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a967		86 37		stx $37				stx 	zTemp0+1
.a969		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a96b		85 30		sta $30				sta 	codePtr
.a96d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a96f		85 31		sta $31				sta 	codePtr+1
.a971						_MTAXLoop:
.a971		b2 30		lda ($30)			lda 	(codePtr)
.a973		18		clc				clc
.a974		f0 21		beq $a997			beq 	_MTAXExit 					; reached end, exit with CC.
.a976		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a978		b1 30		lda ($30),y			lda 	(codePtr),y
.a97a		38		sec				sec
.a97b		e5 36		sbc $36				sbc 	zTemp0
.a97d		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a97f		c8		iny				iny 								; do the MSB
.a980		b1 30		lda ($30),y			lda 	(codePtr),y
.a982		e5 37		sbc $37				sbc 	zTemp0+1
.a984		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a986		f0 0f		beq $a997			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a988		b0 0d		bcs $a997			bcs 	_MTAXExit 					; current < required exit
.a98a		18		clc				clc
.a98b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a98d		65 30		adc $30				adc 	codePtr
.a98f		85 30		sta $30				sta 	codePtr
.a991		90 02		bcc $a995			bcc 	_CREExit
.a993		e6 31		inc $31				inc 	codePtr+1 					; carry
.a995						_CREExit:
.a995		80 da		bra $a971			bra 	_MTAXLoop
.a997						_MTAXExit:
.a997		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a998						UpdateFont:
.a998		a5 01		lda $01				lda 	1 							; save position
.a99a		48		pha				pha
.a99b		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a99d		85 01		sta $01				sta 	1
.a99f		a9 c6		lda #$c6			lda 	#((FontBinary) & $FF)
.a9a1		85 36		sta $36				sta 	0+zTemp0
.a9a3		a9 a9		lda #$a9			lda 	#((FontBinary) >> 8)
.a9a5		85 37		sta $37				sta 	1+zTemp0
.a9a7		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a9a9		85 38		sta $38				sta 	0+zTemp1
.a9ab		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a9ad		85 39		sta $39				sta 	1+zTemp1
.a9af						_UFCopy1:
.a9af		a0 00		ldy #$00			ldy 	#0
.a9b1						_UFCopy2:
.a9b1		b1 36		lda ($36),y			lda 	(zTemp0),y
.a9b3		91 38		sta ($38),y			sta 	(zTemp1),y
.a9b5		c8		iny				iny
.a9b6		d0 f9		bne $a9b1			bne 	_UFCopy2
.a9b8		e6 37		inc $37				inc 	zTemp0+1
.a9ba		e6 39		inc $39				inc 	zTemp1+1
.a9bc		a5 39		lda $39				lda 	zTemp1+1
.a9be		c9 c8		cmp #$c8			cmp 	#$C8
.a9c0		d0 ed		bne $a9af			bne 	_UFCopy1
.a9c2		68		pla				pla 								; restore.
.a9c3		85 01		sta $01				sta 	1
.a9c5		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a9c6						FontBinary:
>a9c6		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a9ce		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a9de		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a9ee		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a9fe		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>aa0e		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>aa1e		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>aa2e		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>aa3e		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>aa4e		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>aa5e		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>aa6e		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>aa7e		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>aa8e		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>aa9e		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>aaae		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>aabe		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>aace		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>aade		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>aaee		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>aafe		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>ab0e		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>ab1e		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>ab2e		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>ab3e		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>ab4e		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>ab5e		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>ab6e		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>ab7e		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>ab8e		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>ab9e		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>abae		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>abbe		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>abce		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>abde		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>abee		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>abfe		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>ac0e		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>ac1e		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>ac2e		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>ac3e		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ac4e		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ac5e		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ac6e		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>ac7e		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ac8e		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ac9e		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>acae		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>acbe		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>acce		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>acde		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>acee		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>acfe		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>ad0e		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>ad1e		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>ad2e		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>ad3e		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>ad4e		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ad5e		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ad6e		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>ad7e		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ad8e		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ad9e		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>adae		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>adbe		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>adce		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>adde		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>adee		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>adfe		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ae0e		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ae1e		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ae2e		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ae3e		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ae4e		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ae5e		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ae6e		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ae7e		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ae8e		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ae9e		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>aeae		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>aebe		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>aece		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>aede		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>aeee		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>aefe		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>af0e		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>af1e		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>af2e		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>af3e		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>af4e		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>af5e		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>af6e		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>af7e		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>af8e		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>af9e		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>afae		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>afbe		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>afce		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>afde		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>afee		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>affe		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b00e		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b01e		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b02e		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b03e		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b04e		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b05e		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b06e		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b07e		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>b08e		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>b09e		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>b0ae		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>b0be		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>b0ce		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>b0de		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>b0ee		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b0fe		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b10e		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b11e		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b12e		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b13e		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b14e		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b15e		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b16e		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b17e		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b18e		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b19e		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b1ae		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b1be		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b1c6						PingCommand:
.b1c6		5a		phy				phy 								; save pos
.b1c7		a9 01		lda #$01			lda 	#1 						; push channel.
.b1c9		48		pha				pha
.b1ca		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b1cc		a2 06		ldx #$06			ldx 	#6 						; length
.b1ce		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b1d0		80 24		bra $b1f6			bra 	SoundEffectCommand
.b1d2						ZapCommand:
.b1d2		5a		phy				phy 								; save pos
.b1d3		a9 01		lda #$01			lda 	#1 						; push channel.
.b1d5		48		pha				pha
.b1d6		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b1d8		a2 0a		ldx #$0a			ldx 	#10 						; length
.b1da		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b1dc		80 18		bra $b1f6			bra 	SoundEffectCommand
.b1de						ShootCommand:
.b1de		5a		phy				phy 								; save pos
.b1df		a9 03		lda #$03			lda 	#3 						; push channel.
.b1e1		48		pha				pha
.b1e2		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b1e4		a2 04		ldx #$04			ldx 	#4 						; length
.b1e6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b1e8		80 0c		bra $b1f6			bra 	SoundEffectCommand
.b1ea						Explode:
.b1ea		5a		phy				phy 								; save pos
.b1eb		a9 03		lda #$03			lda 	#3 						; push channel.
.b1ed		48		pha				pha
.b1ee		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b1f0		a2 0a		ldx #$0a			ldx 	#10 						; length
.b1f2		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b1f4		80 00		bra $b1f6			bra 	SoundEffectCommand
.b1f6						SoundEffectCommand:
.b1f6		8d ed 04	sta $04ed			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b1f9		9c ee 04	stz $04ee			stz 	SoundCommandBlock+1
.b1fc		a9 0f		lda #$0f			lda 	#15
.b1fe		8d ef 04	sta $04ef			sta 	SoundCommandBlock+2
.b201		8e f0 04	stx $04f0			stx 	SoundCommandBlock+3
.b204		8c f1 04	sty $04f1			sty 	SoundCommandBlock+4
.b207		9c f2 04	stz $04f2			stz 	SoundCommandBlock+5
.b20a		68		pla				pla
.b20b		09 10		ora #$10			ora 	#$10  						; execute command $11
.b20d		a2 ed		ldx #$ed			ldx 	#(SoundCommandBlock & $FF)
.b20f		a0 04		ldy #$04			ldy 	#(SoundCommandBlock >> 8)
.b211		20 8f 80	jsr $808f			jsr 	SNDCommand
.b214		7a		ply				ply
.b215		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b216						UnaryPlaying:
.b216		fa		plx				plx
.b217		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; get channel #
.b21a		48		pha				pha
.b21b		20 76 92	jsr $9276			jsr		CheckRightBracket
.b21e		68		pla				pla
.b21f		c9 04		cmp #$04			cmp 	#4
.b221		b0 0c		bcs $b22f			bcs 	_UPNotPlaying
.b223		09 20		ora #$20			ora 	#$20 						; query playing ?
.b225		20 8f 80	jsr $808f			jsr 	SNDCommand
.b228		c9 00		cmp #$00			cmp 	#0
.b22a		f0 03		beq $b22f			beq 	_UPNotPlaying
.b22c		4c fc 92	jmp $92fc			jmp 	ReturnTrue
.b22f						_UPNotPlaying:
.b22f		4c 07 93	jmp $9307			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b232						SoundCommand:
.b232		b1 30		lda ($30),y			lda 	(codePtr),y
.b234		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b236		d0 09		bne $b241			bne 	_SNDMain
.b238		c8		iny				iny 								; skip OFF
.b239		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b23b		5a		phy				phy
.b23c		20 8f 80	jsr $808f			jsr 	SNDCommand
.b23f		7a		ply				ply
.b240		60		rts				rts
.b241						_SNDMain:
.b241		a2 00		ldx #$00			ldx 	#0
.b243		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; channel
.b246		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b248		b0 4b		bcs $b295			bcs 	_SndError
.b24a		e8		inx				inx 								; do the rest in slot 1.
.b24b		20 7e 92	jsr $927e			jsr 	CheckComma
.b24e		20 5a a1	jsr $a15a			jsr 	Evaluate16BitInteger 		; Pitch
.b251		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b253		c9 10		cmp #$10			cmp 	#16
.b255		b0 3e		bcs $b295			bcs 	_SndError
.b257		8d ee 04	sta $04ee			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b25a		b5 58		lda $58,x			lda 	NSMantissa0,x
.b25c		8d ed 04	sta $04ed			sta 	SoundCommandBlock
.b25f		20 7e 92	jsr $927e			jsr 	CheckComma
.b262		20 75 a1	jsr $a175			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b265		8d f0 04	sta $04f0			sta 	SoundCommandBlock+3
.b268		a9 0f		lda #$0f			lda 	#15
.b26a		8d ef 04	sta $04ef			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b26d		9c f1 04	stz $04f1			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b270		9c f2 04	stz $04f2			stz 	SoundCommandBlock+5
.b273		b1 30		lda ($30),y			lda 	(codePtr),y
.b275		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b277		d0 0e		bne $b287			bne 	_SNDPlay
.b279		c8		iny				iny
.b27a		20 64 a1	jsr $a164			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b27d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b27f		8d f1 04	sta $04f1			sta 	SoundCommandBlock+4
.b282		b5 60		lda $60,x			lda 	NSMantissa1,x
.b284		8d f2 04	sta $04f2			sta 	SoundCommandBlock+5
.b287						_SNDPlay:
.b287		5a		phy				phy
.b288		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b28a		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b28c		a2 ed		ldx #$ed			ldx 	#(SoundCommandBlock & $FF)
.b28e		a0 04		ldy #$04			ldy 	#(SoundCommandBlock >> 8)
.b290		20 8f 80	jsr $808f			jsr 	SNDCommand
.b293		7a		ply				ply
.b294		60		rts				rts
.b295						_SndError:
.b295		4c 5d a3	jmp $a35d			jmp 	RangeError
.04ed						SoundCommandBlock:
>04ed								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b298						StackPushByte:
.b298		48		pha				pha 								; save byte on stack
.b299		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b29b		d0 08		bne $b2a5			bne 	_SPBNoBorrow
.b29d		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b29f		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b2a1		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b2a3		90 06		bcc $b2ab			bcc 	_SPBMemory
.b2a5						_SPBNoBorrow:
.b2a5		c6 34		dec $34				dec 	basicStack
.b2a7		68		pla				pla 								; get back and write
.b2a8		92 34		sta ($34)			sta 	(basicStack)
.b2aa		60		rts				rts
.b2ab						_SPBMemory:
.b2ab		a9 12		lda #$12		lda	#18
.b2ad		4c 8f 92	jmp $928f		jmp	ErrorHandler
.b2b0						StackPopByte:
.b2b0		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b2b2		e6 34		inc $34				inc 	basicStack
.b2b4		d0 02		bne $b2b8			bne 	_SPBNoCarry
.b2b6		e6 35		inc $35				inc 	basicStack+1
.b2b8						_SPBNoCarry:
.b2b8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b2b9						StackOpen:
.b2b9		48		pha				pha 								; save frame byte
.b2ba		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b2bc		0a		asl a				asl 	a 							; claim twice this for storage
.b2bd		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b2bf		38		sec				sec 								; so basically subtracting from
.b2c0		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b2c2		85 34		sta $34				sta 	basicStack
.b2c4		b0 09		bcs $b2cf			bcs 	_SONoBorrow
>b2c6		db						.byte 	$DB 						; causes a break in the emulator
.b2c7		c6 35		dec $35				dec 	basicStack+1
.b2c9		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b2cb		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b2cd		90 04		bcc $b2d3			bcc 	_SOMemory
.b2cf						_SONoBorrow:
.b2cf		68		pla				pla 								; get marker back and write at TOS
.b2d0		92 34		sta ($34)			sta 	(basicStack)
.b2d2		60		rts				rts
.b2d3						_SOMemory:
.b2d3		a9 12		lda #$12		lda	#18
.b2d5		4c 8f 92	jmp $928f		jmp	ErrorHandler
.b2d8						StackClose:
.b2d8		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b2da		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b2dc		0a		asl a				asl 	a 							; claim twice this.
.b2dd		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b2df		85 34		sta $34				sta 	basicStack
.b2e1		90 02		bcc $b2e5			bcc 	_SCExit
.b2e3		e6 35		inc $35				inc 	basicStack+1
.b2e5						_SCExit:
.b2e5		60		rts				rts
.b2e6						StackCheckFrame:
.b2e6		48		pha				pha
.b2e7						_StackRemoveLocals:
.b2e7		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b2e9		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b2eb		b0 05		bcs $b2f2			bcs 	_SCNoLocal
.b2ed		20 92 8c	jsr $8c92			jsr 	LocalPopValue 				; restore the local value
.b2f0		80 f5		bra $b2e7			bra 	_StackRemoveLocals 			; gr round again
.b2f2						_SCNoLocal:
.b2f2		68		pla				pla 								; get the frame check.
.b2f3		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b2f5		29 f0		and #$f0			and 	#$F0 						; check type bits
.b2f7		d0 01		bne $b2fa			bne 	_SCFError 					; different, we have structures mixed up
.b2f9		60		rts				rts
.b2fa						_SCFError:
.b2fa		8a		txa				txa 								; report error X
.b2fb		4c 8f 92	jmp $928f			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b2fe						STKSaveCodePosition:
.b2fe		5a		phy				phy
.b2ff		98		tya				tya 								; save Y
.b300		a0 05		ldy #$05			ldy 	#5
.b302		91 34		sta ($34),y			sta 	(basicStack),y
.b304		88		dey				dey 								; save Code Pointer
.b305						_STKSaveLoop:
.b305		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b308		91 34		sta ($34),y			sta 	(basicStack),y
.b30a		88		dey				dey
.b30b		d0 f8		bne $b305			bne 	_STKSaveLoop
.b30d		7a		ply				ply
.b30e		60		rts				rts
.b30f						STKLoadCodePosition:
.b30f		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b311						_STKLoadLoop:
.b311		b1 34		lda ($34),y			lda 	(basicStack),y
.b313		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b316		c8		iny				iny
.b317		c0 05		cpy #$05			cpy 	#5
.b319		d0 f6		bne $b311			bne 	_STKLoadLoop
.b31b		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b31d		a8		tay				tay
.b31e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b31f						StackReset:
.b31f		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b321		85 34		sta $34				sta 	0+basicStack
.b323		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b325		85 35		sta $35				sta 	1+basicStack
.b327		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b329		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b32b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b32c						StringConcrete:
.b32c		5a		phy				phy 								; save position on stack
.b32d		20 c9 9d	jsr $9dc9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b330		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b332		85 38		sta $38				sta 	zTemp1
.b334		b5 60		lda $60,x			lda 	NSMantissa1,x
.b336		85 39		sta $39				sta 	zTemp1+1
.b338		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b33a						_SALength:
.b33a		c8		iny				iny
.b33b		b1 38		lda ($38),y			lda 	(zTemp1),y
.b33d		d0 fb		bne $b33a			bne 	_SALength
.b33f		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b341		b0 3d		bcs $b380			bcs 	_SALengthError
.b343		98		tya				tya 				 				; length of the new string
.b344		18		clc				clc
.b345		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b347		90 02		bcc $b34b			bcc 	_SAHaveLength
.b349		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b34b						_SAHaveLength:
.b34b		48		pha				pha 								; save length.
.b34c		38		sec				sec
.b34d		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b34f		6d 8e 02	adc $028e			adc 	stringMemory
.b352		8d 8e 02	sta $028e			sta 	stringMemory
.b355		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b357		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b359		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b35b		6d 8f 02	adc $028f			adc 	stringMemory+1
.b35e		8d 8f 02	sta $028f			sta 	stringMemory+1
.b361		85 3b		sta $3b				sta 	zTemp2+1
.b363		95 60		sta $60,x			sta 	NSMantissa1,x
.b365		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b366		38		sec				sec
.b367		e9 03		sbc #$03			sbc 	#3
.b369		92 3a		sta ($3a)			sta 	(zTemp2)
.b36b		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b36d		a0 01		ldy #$01			ldy 	#1
.b36f		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b371						_SACopyNewString:
.b371		a0 00		ldy #$00			ldy 	#0
.b373						_SACopyNSLoop:
.b373		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b375		c8		iny				iny 								; write two on in string storage
.b376		c8		iny				iny
.b377		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b379		88		dey				dey 								; this makes it one one.
.b37a		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b37c		d0 f5		bne $b373			bne 	_SACopyNSLoop
.b37e		7a		ply				ply
.b37f		60		rts				rts
.b380						_SALengthError:
.b380		a9 09		lda #$09		lda	#9
.b382		4c 8f 92	jmp $928f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b385						StringSystemInitialise:
.b385		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b387		8d 8e 02	sta $028e			sta 	0+stringMemory
.b38a		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b38c		8d 8f 02	sta $028f			sta 	1+stringMemory
.b38f		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b392		60		rts				rts
.b393						StringSpaceInitialise:
.b393		20 c9 9d	jsr $9dc9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b396		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b398		8d 90 02	sta $0290			sta 	stringInitialised
.b39b		ad 8e 02	lda $028e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b39e		8d 91 02	sta $0291			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b3a1		ad 8f 02	lda $028f			lda 	stringMemory+1
.b3a4		3a		dec a				dec 	a
.b3a5		8d 92 02	sta $0292			sta 	stringTempPointer+1
.b3a8		60		rts				rts
.b3a9						StringTempAllocate:
.b3a9		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b3ab		b0 30		bcs $b3dd			bcs 	_STALength
.b3ad		2c 90 02	bit $0290			bit 	stringInitialised 			; already initialised
.b3b0		30 05		bmi $b3b7			bmi 	_STAAllocate
.b3b2		48		pha				pha 								; save value to subtract.
.b3b3		20 93 b3	jsr $b393			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b3b6		68		pla				pla 								; restore it
.b3b7						_STAAllocate:
.b3b7		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b3b9		18		clc				clc  								; deliberate allows one more
.b3ba		6d 91 02	adc $0291			adc 	stringTempPointer 			; subtract from temp pointer
.b3bd		8d 91 02	sta $0291			sta 	stringTempPointer
.b3c0		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b3c2		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b3c4		ad 92 02	lda $0292			lda 	stringTempPointer+1
.b3c7		69 ff		adc #$ff			adc 	#$FF
.b3c9		8d 92 02	sta $0292			sta 	stringTempPointer+1
.b3cc		85 3d		sta $3d				sta 	zsTemp+1
.b3ce		95 60		sta $60,x			sta 	NSMantissa1,x
.b3d0		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b3d2		74 70		stz $70,x			stz 	NSMantissa3,x
.b3d4		a9 10		lda #$10			lda 	#NSTString
.b3d6		95 50		sta $50,x			sta 	NSStatus,x
.b3d8		a9 00		lda #$00			lda 	#0 							; clear the target string
.b3da		92 3c		sta ($3c)			sta 	(zsTemp)
.b3dc		60		rts				rts
.b3dd						_STALength:
.b3dd		a9 09		lda #$09		lda	#9
.b3df		4c 8f 92	jmp $928f		jmp	ErrorHandler
.b3e2						StringTempWrite:
.b3e2		48		pha				pha
.b3e3		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b3e5		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b3e7		d0 02		bne $b3eb			bne 	_STWNoCarry
.b3e9		e6 3d		inc $3d				inc 	zsTemp+1
.b3eb						_STWNoCarry:
.b3eb		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b3ed		92 3c		sta ($3c)			sta 	(zsTemp)
.b3ef		68		pla				pla
.b3f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b3f1						Command_VERIFY:
.b3f1		20 32 a1	jsr $a132			jsr 	EvaluateString 				; file name to verify
.b3f4		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b3f6		a5 36		lda $36				lda 	zTemp0
.b3f8		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b3fb		b0 4b		bcs $b448			bcs 	_CVErrorHandler 			; error, so fail.
.b3fd		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.b400		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b403		9c e0 04	stz $04e0			stz 	LoadEOFFlag 				; clear EOF Flag.
.b406		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b408		85 30		sta $30				sta 	codePtr
.b40a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b40c		85 31		sta $31				sta 	codePtr+1
.b40e						_CVLoop:
.b40e		20 da 8b	jsr $8bda			jsr 	LoadReadLine 				; get next line.
.b411		f0 27		beq $b43a			beq 	_CVExit 					; end, exit.
.b413		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.b416		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.b419		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.b41c		f0 f0		beq $b40e			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b41e		a0 00		ldy #$00			ldy 	#0 							; start compare
.b420						_CVCompareLoop:
.b420		b1 30		lda ($30),y			lda 	(codePtr),y
.b422		d9 aa 02	cmp $02aa,y			cmp 	tokenOffset,y 				; compare against actual code.
.b425		d0 1c		bne $b443			bne 	_CVCompareError
.b427		c8		iny				iny
.b428		cc aa 02	cpy $02aa			cpy 	tokenOffset 				; until done whole line of code
.b42b		d0 f3		bne $b420			bne 	_CVCompareLoop
.b42d		18		clc				clc
.b42e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b430		65 30		adc $30				adc 	codePtr
.b432		85 30		sta $30				sta 	codePtr
.b434		90 02		bcc $b438			bcc 	_CREExit
.b436		e6 31		inc $31				inc 	codePtr+1 					; carry
.b438						_CREExit:
.b438		80 d4		bra $b40e			bra 	_CVLoop
.b43a						_CVExit:
.b43a		ad e1 04	lda $04e1			lda 	CurrentFileStream
.b43d		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.b440		4c af 8b	jmp $8baf			jmp 	CLComplete
.b443						_CVCompareError:
.b443		a9 1b		lda #$1b		lda	#27
.b445		4c 8f 92	jmp $928f		jmp	ErrorHandler
.b448						_CVErrorHandler:
.b448		4c cc 8b	jmp $8bcc			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b44b						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad f5 04	lda $04f5			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c f4 04	sty $04f4			sty 	EXTColumn
.c02d	a02d	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee f3 04	inc $04f3			inc 	EXTRow  					; bump row
.c035	a035	9c f4 04	stz $04f4			stz 	EXTColumn 					; back to column 0
.c038	a038	ad f3 04	lda $04f3			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd f7 04	cmp $04f7			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d f6 04	adc $04f6			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce f4 04	dec $04f4			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c f4 04	stz $04f4			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce f3 04	dec $04f3			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad f3 04	lda $04f3			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce f3 04	dec $04f3			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed f6 04	sbc $04f6			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c f4 04	sty $04f4			sty 	EXTColumn
.c08c	a08c	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c f4 04	sty $04f4			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad f7 04	lda $04f7			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd f3 04	cmp $04f3			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee f3 04	inc $04f3			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d f6 04	adc $04f6			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad f4 04	lda $04f4			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d f4 04	sta $04f4			sta 	EXTColumn
.c0c9	a0c9	cd f6 04	cmp $04f6			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce f4 04	dec $04f4			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d f5 04	and $04f5			and 	EXTTextColour 				; mask out old.
.c135	a135	8d f5 04	sta $04f5			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d f5 04	ora $04f5			ora 	EXTTextColour
.c13c	a13c	8d f5 04	sta $04f5			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad f5 04	lda $04f5			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad f5 04	lda $04f5			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c f3 04	stz $04f3			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c f4 04	stz $04f4			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad f4 04	lda $04f4			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad f3 04	lda $04f3			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 0d bc	jsr $bc0d			jsr 	PagedInputSingleCharacter
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad f4 04	lda $04f4			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 aa 03	sta $03aa,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 aa 03	lda $03aa,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 aa 03	sta $03aa,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc f4 04	cpy $04f4			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad f6 04	lda $04f6			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.04f3						EXTRow:
>04f3								.fill 	1
.04f4						EXTColumn:
>04f4								.fill 	1
.04f5						EXTTextColour:
>04f5								.fill 	1
.04f6						EXTScreenWidth:
>04f6								.fill 	1
.04f7						EXTScreenHeight:
>04f7								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d f5 04	sta $04f5			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d f6 04	sta $04f6			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d f7 04	sta $04f7			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad f3 04	lda $04f3			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$4a7						gxPixelBuffer = numberBuffer
.04f8						gxCurrentX:
>04f8								.fill 	2
.04fa						gxCurrentY:
>04fa								.fill 	2
.04fc						gxLastX:
>04fc								.fill 	2
.04fe						gxLastY:
>04fe								.fill 	2
.0500						gxX0:
>0500								.fill 	2
.0502						gxY0:
>0502								.fill 	2
.0504						gxX1:
>0504								.fill 	2
.0506						gxY1:
>0506								.fill 	2
.0508						gxSpritesOn:
>0508								.fill 	1
.0509						gxBitmapsOn:
>0509								.fill 	1
.050a						gxBasePage:
>050a								.fill 	1
.050b						gxSpritePage:
>050b								.fill 	1
.050c						gxHeight:
>050c								.fill 	1
.050d						gxMode:
>050d								.fill 	1
.050e						gxColour:
>050e								.fill 	1
.050f						gxEORValue:
>050f								.fill 	1
.0510						gxANDValue:
>0510								.fill 	1
.0511						gxOriginalLUTValue:
>0511								.fill 	1
.0512						gxOffset:
>0512								.fill 	1
.0513						GSCurrentSpriteID:
>0513								.fill 	1
.0514						GSCurrentSpriteAddr:
>0514								.fill 	2
.0516						gxSpriteOffsetBase:
>0516								.fill 	2
.0518						gxSpriteLow:
>0518								.fill 	64
.0558						gxSpriteHigh:
>0558								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd f8 04	lda $04f8,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d fc 04	sta $04fc,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d fa 04	sta $04fa			sta 	gxCurrentY
.c7e7	a7e7	9c fb 04	stz $04fb			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d f8 04	sta $04f8			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d f9 04	sta $04f9			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad f9 04	lda $04f9			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad f8 04	lda $04f8			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad fa 04	lda $04fa			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 0c 05	cmp $050c			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd f8 04	lda $04f8,x			lda 	gxCurrentX,x
.c819	a819	9d 00 05	sta $0500,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 9b 05	sta $059b			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 09 05	lda $0509			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 9c 05	stz $059c			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 99 05	lda $0599			lda 	gxxCentre					; while x <= y
.c848	a848	cd 9a 05	cmp $059a			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 9a 05	lda $059a			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 99 05	lda $0599			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 9a 05	ldx $059a			ldx	 	gxYCentre
.c875	a875	8d 9a 05	sta $059a			sta 	gxYCentre
.c878	a878	8e 99 05	stx $0599			stx 	gxxCentre
.c87b	a87b	ad 9c 05	lda $059c			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 9c 05	sta $059c			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 9b 05	lda $059b	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 9c 05	lda $059c			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 9a 05	lda $059a			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 99 05	lda $0599			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 9b 05	lda $059b			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 9a 05	sbc $059a			sbc 	gxYCentre
.c8bc	a8bc	8d 9a 05	sta $059a			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 04 05	lda $0504,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 00 05	sta $0500,x			sta 	gxX0,x
.c8d3	a8d3	bd 05 05	lda $0505,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 01 05	sta $0501,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 9c 05	stz $059c			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 99 05	inc $0599			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 99 05	lda $0599			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 99 05	inc $0599			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 9a 05	dec $059a			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 99 05	lda $0599			lda 	gxxCentre
.c8fc	a8fc	ed 9a 05	sbc $059a			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 9c 05	dec $059c			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 06 05	lda $0506			lda 	gxY1
.c935	a935	ed 02 05	sbc $0502			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 98 05	sta $0598			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 99 05	stz $0599			stz 	gxxCentre
.c949	a949	ad 98 05	lda $0598			lda 	gxRadius
.c94c	a94c	8d 9a 05	sta $059a			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 04 05	lda $0504,x			lda 	gxX1,x
.c964	a964	7d 00 05	adc $0500,x			adc 	gxX0,x
.c967	a967	9d 04 05	sta $0504,x			sta 	gxX1,x
.c96a	a96a	bd 05 05	lda $0505,x			lda 	gxX1+1,x
.c96d	a96d	7d 01 05	adc $0501,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 05 05	sta $0505,x			sta 	gxX1+1,x
.c974	a974	7e 04 05	ror $0504,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0598						gxRadius:
>0598								.fill 	1
.0599						gxxCentre:
>0599								.fill 	1
.059a						gxYCentre:
>059a								.fill 	1
.059b						gxIsFillMode:
>059b								.fill 	1
.059c						gxYChanged:
>059c								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 09 05	lda $0509			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 0c 05	lda $050c			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 0a 05	adc $050a			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 0a 05	cmp $050a			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 08 05	stz $0508			stz 	gxSpritesOn
.c9d1	a9d1	9c 09 05	stz $0509			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e f8 04	stz $04f8,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 09 05	sta $0509			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 0a 05	sta $050a			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 0c 05	stx $050c			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 08 05	sta $0508			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 0b 05	sta $050b			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d 16 05	sta $0516			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d 17 05	sta $0517			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c 15 05	stz $0515			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e 58 05	stz $0558,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 09 05	lda $0509			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac 12 05	ldy $0512			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d 10 05	and $0510			and 	gxANDValue
.ca9e	aa9e	4d 0f 05	eor $050f			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 9f 05	lda $059f			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 00 05	lda $0500			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 04 05	eor $0504			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 01 05	lda $0501			lda 	gxX0+1
.cac4	aac4	4d 05 05	eor $0505			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 06 05	lda $0506			lda 	gxY1
.cacb	aacb	4d 02 05	eor $0502			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad a1 05	lda $05a1			lda 	gxPosition
.cad3	aad3	6d a2 05	adc $05a2			adc 	gxAdjust
.cad6	aad6	8d a1 05	sta $05a1			sta 	gxPosition
.cad9	aad9	9c a4 05	stz $05a4			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd a3 05	cmp $05a3			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce a4 05	dec $05a4			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed a3 05	sbc $05a3			sbc 	gxTotal
.caea	aaea	8d a1 05	sta $05a1			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 9f 05	lda $059f			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad a4 05	lda $05a4			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad a4 05	lda $05a4			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad a0 05	lda $05a0			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 00 05	lda $0500			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 01 05	dec $0501			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 00 05	dec $0500			dec 	gxX0
.cb1b	ab1b	ce 12 05	dec $0512			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad 12 05	lda $0512			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 00 05	inc $0500			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 01 05	inc $0501			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee 12 05	inc $0512			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 02 05	inc $0502			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 06 05	lda $0506			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 02 05	sbc $0502			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 9e 05	sta $059e			sta 	gxDiffY
.cb63	ab63	9c a0 05	stz $05a0			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 04 05	lda $0504			lda 	gxX1
.cb6a	ab6a	ed 00 05	sbc $0500			sbc 	gxX0
.cb6d	ab6d	8d 9d 05	sta $059d			sta 	gxDiffX
.cb70	ab70	ad 05 05	lda $0505			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 01 05	sbc $0501			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 9d 05	ror $059d			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 9d 05	sbc $059d			sbc 	gxDiffX
.cb83	ab83	8d 9d 05	sta $059d			sta 	gxDiffX
.cb86	ab86	ce a0 05	dec $05a0			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 9f 05	stz $059f			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 9e 05	lda $059e			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d a2 05	sta $05a2			sta 	gxAdjust
.cb92	ab92	ad 9d 05	lda $059d			lda 	gxDiffX
.cb95	ab95	8d a3 05	sta $05a3			sta 	gxTotal
.cb98	ab98	ad 9e 05	lda $059e			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 9d 05	cmp $059d			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 9f 05	dec $059f			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 9d 05	lda $059d			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d a2 05	sta $05a2			sta 	gxAdjust
.cba9	aba9	ad 9e 05	lda $059e			lda 	gxDiffY
.cbac	abac	8d a3 05	sta $05a3			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad a3 05	lda $05a3			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d a1 05	sta $05a1			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.059d						gxDiffX:
>059d								.fill 	1
.059e						gxDiffY:
>059e								.fill 	1
.059f						gxIsDiffYLarger:
>059f								.fill 	1
.05a0						gxDXNegative:
>05a0								.fill 	1
.05a1						gxPosition:
>05a1								.fill 	1
.05a2						gxAdjust:
>05a2								.fill 	1
.05a3						gxTotal:
>05a3								.fill 	1
.05a4						gxAddSelect:
>05a4								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 0e 05	stx $050e			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 0d 05	sta $050d			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c 10 05	stz $0510			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 0e 05	ldx $050e			ldx 	gxColour
.cbc9	abc9	8e 0f 05	stx $050f			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e 10 05	stx $0510			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c 0f 05	stz $050f			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad 10 05	lda $0510			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d 10 05	sta $0510			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac 12 05	ldy $0512			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d 10 05	and $0510			and 	gxANDValue
.cbf3	abf3	4d 0f 05	eor $050f			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 09 05	lda $0509			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 02 05	lda $0502			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 06 05	cmp $0506			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 02 05	inc $0502			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 02 05	lda $0502			lda 	gxY0 						; reached last line
.cc25	ac25	cd 06 05	cmp $0506			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 04 05	lda $0504			lda		gxX1
.cc42	ac42	ed 00 05	sbc $0500			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 05 05	lda $0505			lda 	gxX1+1
.cc4a	ac4a	ed 01 05	sbc $0501			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad 12 05	lda $0512			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac 12 05	ldy $0512			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d 10 05	and $0510			and 	gxANDValue
.cc67	ac67	4d 0f 05	eor $050f			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d 10 05	and $0510			and 	gxANDValue
.cc85	ac85	4d 0f 05	eor $050f			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d 10 05	and $0510			and 	gxANDValue
.cc9d	ac9d	4d 0f 05	eor $050f			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d 12 05	sta $0512			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d a5 05	sta $05a5			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d a6 05	sta $05a6			sta 	gxMask 						; and mask
.ccc4	acc4	ad 09 05	lda $0509			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 02 05	lda $0502			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c a8 05	sty $05a8			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e a7 05	stx $05a7			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad aa 05	lda $05aa			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d a9 05	sta $05a9			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c aa 05	bit $05aa			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad a6 05	lda $05a6			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad a9 05	lda $05a9			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 02 05	lda $0502			lda 	gxY0 						; off screen
.ccfd	acfd	cd 0c 05	cmp $050c			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd a5 05	cmp $05a5			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 02 05	sta $0502			sta 	gxY0
.cd16	ad16	ae a9 05	ldx $05a9			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad a5 05	lda $05a5			lda 	gxSize
.cd1d	ad1d	6d 00 05	adc $0500			adc 	gxX0
.cd20	ad20	8d 00 05	sta $0500			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 01 05	inc $0501			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c a7 05	jmp ($05a7)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac 12 05	ldy $0512			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad a9 05	lda $05a9			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 0d 05	bit $050d			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad a6 05	lda $05a6			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd a7 04	lda $04a7,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad aa 05	lda $05aa			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d 10 05	and $0510			and 	gxANDValue
.cd61	ad61	5d a7 04	eor $04a7,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd a5 05	cmp $05a5			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 02 05	inc $0502			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.05a5						gxSize:
>05a5								.fill 	1
.05a6						gxMask:
>05a6								.fill 	1
.05a7						gxAcquireVector:
>05a7								.fill 	2
.05a9						gxScale:
>05a9								.fill 	1
.05aa						gxUseMode:
>05aa								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 0d 05	eor $050d			eor 	gxMode
.cd84	ad84	8d aa 05	sta $05aa			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e a7 04	stz $04a7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 0e 05	lda $050e			lda 	gxColour
.cdbd	adbd	9d a7 04	sta $04a7,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 08 05	lda $0508			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 0d 05	eor $050d			eor 	gxMode
.cdd1	add1	8d aa 05	sta $05aa			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad ab 05	lda $05ab			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 0b 05	lda $050b			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae ac 05	ldx $05ac			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d ae 05	adc $05ae			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d af 05	adc $05af			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 a7 04	sta $04a7,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc ab 05	cpy $05ab			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 08 05	lda $0508			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d 13 05	sta $0513			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d 15 05	sta $0515			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d 14 05	sta $0514			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 08 05	lda $0508			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad ae 05	lda $05ae			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad af 05	lda $05af			lda 	gxSpriteOffset+1
.ce92	ae92	6d 16 05	adc $0516			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad 17 05	lda $0517			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad ac 05	lda $05ac			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d ad 05	ora $05ad			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad ac 05	lda $05ac			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d 58 05	ora $0558,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 08 05	lda $0508			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 00 05	adc $0500			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 01 05	lda $0501			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 02 05	adc $0502			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 01 05	lsr $0501			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 00 05	ror $0500			ror 	gxX0
.cf3d	af3d	4e 00 05	lsr $0500			lsr 	gxX0
.cf40	af40	4e 02 05	lsr $0502			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 02 05	lsr $0502			lsr 	gxY0
.cf46	af46	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 00 05	ora $0500			ora 	gxX0
.cf51	af51	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.cf54	af54	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 02 05	ora $0502			ora 	gxY0
.cf5c	af5c	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d 11 05	sta $0511			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad 11 05	lda $0511			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 02 05	lda $0502			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 00 05	lda $0500			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d 12 05	sta $0512			sta 	gxOffset
.cfae	afae	ad 01 05	lda $0501			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 0a 05	adc $050a			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad 12 05	lda $0512			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d 12 05	sta $0512			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 18 05	lda $0518,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d 18 05	ora $0518,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 58 05	lda $0558,y			lda 	gxSpriteHigh,y
.d000	b000	7d 58 05	adc $0558,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 58 05	lda $0558,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 18 05	lda $0518,y			lda 	gxSpriteLow,y
.d02e	b02e	fd 18 05	sbc $0518,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 0b 05	lda $050b			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d af 05	sta $05af			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d ac 05	sta $05ac			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d ab 05	sta $05ab			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d ad 05	sta $05ad			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d ae 05	sta $05ae			sta 	gxSpriteOffset
.d07b	b07b	0e ae 05	asl $05ae			asl 	gxSpriteOffset
.d07e	b07e	2e af 05	rol $05af			rol 	gxSpriteOffset+1
.d081	b081	0e ae 05	asl $05ae			asl 	gxSpriteOffset
.d084	b084	2e af 05	rol $05af			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.05ab						gxSizePixels:
>05ab								.fill 	1
.05ac						gxSizeBits:
>05ac								.fill 	1
.05ad						gxSpriteLUT:
>05ad								.fill 	1
.05ae						gxSpriteOffset:
>05ae								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 00 05	lda $0500			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 04 05	cmp $0504			cmp 	gxX1
.d098	b098	ad 01 05	lda $0501			lda 	gxX0+1
.d09b	b09b	ed 05 05	sbc $0505			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 02 05	lda $0502			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 06 05	cmp $0506			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 00 05	lda $0500,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 00 05	lda $0500,y			lda 	gxX0,y
.d0c8	b0c8	9d 00 05	sta $0500,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 00 05	sta $0500,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d10f	b10f	45 24 28
>d112	b112	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d11a	b11a	45 24 28
>d11d	b11d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d123	b123	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d129	b129	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d131	b131	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d138	b138	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d13f	b13f	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d146	b146	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d14e	b14e	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d154	b154	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d15a	b15a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d161	b161	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d167	b167	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d16d	b16d	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d174	b174	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d17c	b17c	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d184	b184	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d18c	b18c	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d194	b194	47 28
>d196	b196	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d19e	b19e	28
>d19f	b19f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d1a7	b1a7	28
>d1a8	b1a8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1ae	b1ae	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1b4	b1b4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1ba	b1ba	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1c1	b1c1	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1c9	b1c9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1cf	b1cf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1d5	b1d5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1da	b1da	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1de	b1de	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1e4	b1e4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1ec	b1ec	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1f3	b1f3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1fa	b1fa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d202	b202	43
>d203	b203	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d209	b209	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d20f	b20f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d216	b216	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d21c	b21c	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d220	b220	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d226	b226	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d22e	b22e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d235	b235	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d23a	b23a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d241	b241	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d249	b249	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $b8 CPRINT
>d251	b251	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b9 DATA
>d257	b257	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ba DIM
>d25c	b25c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bb DOWNTO
>d264	b264	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bc ELSE
>d26a	b26a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bd FROM
>d270	b270	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $be GFX
>d275	b275	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bf GOSUB
>d27c	b27c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $c0 GOTO
>d282	b282	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d288	b288	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d28f	b28f	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c3 INPUT
>d296	b296	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d29b	b29b	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2a1	b2a1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2a8	b2a8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2ad	b2ad	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2b1	b2b1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2b9	b2b9	45
>d2ba	b2ba	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2c2	b2c2	45
>d2c3	b2c3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2c9	b2c9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2cf	b2cf	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2d6	b2d6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d2dd	b2dd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d2e4	b2e4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $d0 PRINT
>d2eb	b2eb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d2f1	b2f1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d2f7	b2f7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d2fc	b2fc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d4 RETURN
>d304	b304	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d5 SOLID
>d30b	b30b	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d6 SOUND
>d312	b312	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d7 SPRITE
>d31a	b31a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d8 TEXT
>d320	b320	02 a3 54 4f				.text	2,$a3,"TO"             ; $d9 TO
>d324	b324	ff					.text	$FF
.d325	b325					KeywordSet1:
>d325	b325	00 65					.text	0,$65,""               ; $80 !0:EOF
>d327	b327	00 58					.text	0,$58,""               ; $81 !1:SH1
>d329	b329	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d32b	b32b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d333	b333	4c 45
>d335	b335	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d33d	b33d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d345	b345	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d34c	b34c	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d353	b353	03 df 44 49 52				.text	3,$df,"DIR"            ; $88 DIR
>d358	b358	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $89 DRIVE
>d35f	b35f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8a END
>d364	b364	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8b EXPLODE
>d36c	b36c	45
>d36d	b36d	02 96 47 4f				.text	2,$96,"GO"             ; $8c GO
>d371	b371	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $8d HIMEM
>d378	b378	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8e LIST
>d37e	b37e	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8f LOAD
>d384	b384	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $90 NEW
>d389	b389	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $91 PING
>d38f	b38f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $92 RESTORE
>d397	b397	45
>d398	b398	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $93 RUN
>d39d	b39d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $94 SAVE
>d3a3	b3a3	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $95 SETDATE
>d3ab	b3ab	45
>d3ac	b3ac	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $96 SETTIME
>d3b4	b3b4	45
>d3b5	b3b5	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $97 SHOOT
>d3bc	b3bc	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $98 SPRITES
>d3c4	b3c4	53
>d3c5	b3c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $99 STOP
>d3cb	b3cb	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $9a VERIFY
>d3d3	b3d3	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $9b XGO
>d3d8	b3d8	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $9c XLOAD
>d3df	b3df	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9d ZAP
>d3e4	b3e4	ff					.text	$FF
.d3e5	b3e5					KeywordSet2:
>d3e5	b3e5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3e7	b3e7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3e9	b3e9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3eb	b3eb	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3f0	b3f0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3f5	b3f5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3fa	b3fa	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3ff	b3ff	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d404	b404	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d409	b409	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d40e	b40e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d413	b413	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d418	b418	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d41d	b41d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d422	b422	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d427	b427	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d42c	b42c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d431	b431	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d436	b436	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d43b	b43b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d440	b440	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d445	b445	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d44a	b44a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d44f	b44f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d454	b454	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d459	b459	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d45e	b45e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d463	b463	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d468	b468	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d46d	b46d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d472	b472	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d477	b477	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d47c	b47c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d481	b481	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d486	b486	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d48b	b48b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d490	b490	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d495	b495	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d49a	b49a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d49f	b49f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4a4	b4a4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4a9	b4a9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ae	b4ae	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4b3	b4b3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4b8	b4b8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4bd	b4bd	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4c2	b4c2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4c7	b4c7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4cc	b4cc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4d1	b4d1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4d6	b4d6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4db	b4db	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4e0	b4e0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4e5	b4e5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ea	b4ea	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ef	b4ef	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4f4	b4f4	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4f9	b4f9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4fe	b4fe	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d503	b503	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d508	b508	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d50d	b50d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d512	b512	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d517	b517	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d51c	b51c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d521	b521	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d526	b526	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d52b	b52b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d530	b530	ff					.text	$FF
.d531	b531					Export_TKListConvertLine:
.d531	b531	48		pha				pha 								; save indent on the stack
.d532	b532	9c 9d 02	stz $029d			stz 	tbOffset
.d535	b535	9c ad 02	stz $02ad			stz 	tokenBuffer
.d538	b538	9c a9 02	stz $02a9			stz 	currentListColour
.d53b	b53b	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d53d	b53d	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d540	b540	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d542	b542	b1 30		lda ($30),y			lda 	(codePtr),y
.d544	b544	aa		tax				tax
.d545	b545	88		dey				dey
.d546	b546	b1 30		lda ($30),y			lda 	(codePtr),y
.d548	b548	20 2b b7	jsr $b72b			jsr 	LCLWriteNumberXA
.d54b	b54b	68		pla				pla 								; adjustment to indent
.d54c	b54c	48		pha				pha 								; save on stack
.d54d	b54d	10 0c		bpl $b55b			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d54f	b54f	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d550	b550	6d a6 02	adc $02a6			adc 	listIndent
.d553	b553	8d a6 02	sta $02a6			sta 	listIndent
.d556	b556	10 03		bpl $b55b			bpl 	_LCNoAdjust
.d558	b558	9c a6 02	stz $02a6			stz 	listIndent
.d55b	b55b					_LCNoAdjust:
.d55b	b55b	18		clc				clc		 							; work out actual indent.
.d55c	b55c	ad a6 02	lda $02a6			lda 	listIndent
.d55f	b55f	0a		asl a				asl 	a
.d560	b560	69 07		adc #$07			adc 	#7
.d562	b562	85 36		sta $36				sta 	zTemp0
.d564	b564					_LCPadOut:
.d564	b564	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d566	b566	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d569	b569	ad 9d 02	lda $029d			lda 	tbOffset
.d56c	b56c	c5 36		cmp $36				cmp 	zTemp0
.d56e	b56e	d0 f4		bne $b564			bne 	_LCPadOut
.d570	b570	a0 03		ldy #$03			ldy 	#3 							; start position.
.d572	b572					_LCMainLoop:
.d572	b572	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d574	b574	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d577	b577	b1 30		lda ($30),y			lda 	(codePtr),y
.d579	b579	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d57b	b57b	f0 17		beq $b594			beq 	_LCExit
.d57d	b57d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d57f	b57f	90 1e		bcc $b59f			bcc 	_LCDoubles
.d581	b581	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d583	b583	90 2a		bcc $b5af			bcc 	_LCShiftPunc
.d585	b585	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d587	b587	90 35		bcc $b5be			bcc 	_LCPunctuation
.d589	b589	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d58b	b58b	90 51		bcc $b5de			bcc 	_LCIdentifiers
.d58d	b58d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d58f	b58f	90 73		bcc $b604			bcc 	_LCTokens
.d591	b591	4c 64 b6	jmp $b664			jmp 	_LCData 					; 254-5 are data objects
.d594	b594					_LCExit:
.d594	b594	68		pla				pla 								; get old indent adjust
.d595	b595	30 07		bmi $b59e			bmi 	_LCExit2
.d597	b597	18		clc				clc 								; add to indent if +ve
.d598	b598	6d a6 02	adc $02a6			adc 	listIndent
.d59b	b59b	8d a6 02	sta $02a6			sta 	listIndent
.d59e	b59e					_LCExit2:
.d59e	b59e	60		rts				rts
.d59f	b59f					_LCDoubles:
.d59f	b59f	48		pha				pha
.d5a0	b5a0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5a1	b5a1	29 02		and #$02			and 	#2
.d5a3	b5a3	09 3c		ora #$3c			ora 	#60 						; make < >
.d5a5	b5a5	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5a8	b5a8	68		pla				pla 								; restore, do lower bit
.d5a9	b5a9	29 03		and #$03			and 	#3
.d5ab	b5ab	09 3c		ora #$3c			ora 	#60
.d5ad	b5ad	80 0f		bra $b5be			bra		_LCPunctuation 				; print, increment, loop
.d5af	b5af					_LCShiftPunc:
.d5af	b5af	aa		tax				tax 								; save in X
.d5b0	b5b0	29 07		and #$07			and 	#7 							; lower 3 bits
.d5b2	b5b2	f0 02		beq $b5b6			beq 	_LCNoAdd
.d5b4	b5b4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5b6	b5b6					_LCNoAdd:
.d5b6	b5b6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5b8	b5b8	90 02		bcc $b5bc			bcc 	_LCNoAdd2
.d5ba	b5ba	09 20		ora #$20			ora 	#32 						; adds $20
.d5bc	b5bc					_LCNoAdd2:
.d5bc	b5bc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5be	b5be					_LCPunctuation:
.d5be	b5be	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5c0	b5c0	d0 03		bne $b5c5			bne 	_LCPContinue
.d5c2	b5c2	20 d9 b6	jsr $b6d9			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5c5	b5c5					_LCPContinue:
.d5c5	b5c5	c9 2e		cmp #$2e			cmp 	#'.'
.d5c7	b5c7	f0 08		beq $b5d1			beq 	_LCPIsConstant
.d5c9	b5c9	c9 30		cmp #$30			cmp 	#'0'
.d5cb	b5cb	90 0b		bcc $b5d8			bcc 	_LCPNotConstant
.d5cd	b5cd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5cf	b5cf	b0 07		bcs $b5d8			bcs 	_LCPNotConstant
.d5d1	b5d1					_LCPIsConstant:
.d5d1	b5d1	48		pha				pha
.d5d2	b5d2	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5d4	b5d4	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5d7	b5d7	68		pla				pla
.d5d8	b5d8					_LCPNotConstant:
.d5d8	b5d8	c8		iny				iny 								; consume character
.d5d9	b5d9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite 					; write it out.
.d5dc	b5dc	80 94		bra $b572			bra 	_LCMainLoop 				; go round again.
.d5de	b5de					_LCIdentifiers:
.d5de	b5de	18		clc				clc 								; convert to physical address
.d5df	b5df	69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5e1	b5e1	85 37		sta $37				sta 	zTemp0+1
.d5e3	b5e3	c8		iny				iny
.d5e4	b5e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e6	b5e6	85 36		sta $36				sta 	zTemp0
.d5e8	b5e8	c8		iny				iny
.d5e9	b5e9	5a		phy				phy 								; save position
.d5ea	b5ea	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5ec	b5ec	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5ef	b5ef	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5f1	b5f1					_LCOutIdentifier:
.d5f1	b5f1	c8		iny				iny
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5f4	b5f4	29 7f		and #$7f			and 	#$7F
.d5f6	b5f6	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d5f9	b5f9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5fc	b5fc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5fe	b5fe	10 f1		bpl $b5f1			bpl 	_LCOutIdentifier
.d600	b600	7a		ply				ply 								; restore position
.d601	b601	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d604	b604					_LCTokens:
.d604	b604	aa		tax				tax 								; token in X
.d605	b605	a9 e5		lda #$e5			lda 	#((KeywordSet2) & $FF)
.d607	b607	85 36		sta $36				sta 	0+zTemp0
.d609	b609	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d60b	b60b	85 37		sta $37				sta 	1+zTemp0
.d60d	b60d	e0 82		cpx #$82			cpx 	#$82
.d60f	b60f	f0 16		beq $b627			beq 	_LCUseShift
.d611	b611	a9 25		lda #$25			lda 	#((KeywordSet1) & $FF)
.d613	b613	85 36		sta $36				sta 	0+zTemp0
.d615	b615	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d617	b617	85 37		sta $37				sta 	1+zTemp0
.d619	b619	e0 81		cpx #$81			cpx 	#$81
.d61b	b61b	f0 0a		beq $b627			beq 	_LCUseShift
.d61d	b61d	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d61f	b61f	85 36		sta $36				sta 	0+zTemp0
.d621	b621	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d623	b623	85 37		sta $37				sta 	1+zTemp0
.d625	b625	80 01		bra $b628			bra 	_LCNoShift
.d627	b627					_LCUseShift:
.d627	b627	c8		iny				iny
.d628	b628					_LCNoShift:
.d628	b628	20 ed b6	jsr $b6ed			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d62b	b62b	b1 30		lda ($30),y			lda 	(codePtr),y
.d62d	b62d	aa		tax				tax 								; into X
.d62e	b62e					_LCFindText:
.d62e	b62e	ca		dex				dex
.d62f	b62f	10 0e		bpl $b63f			bpl 	_LCFoundText 				; found text.
.d631	b631	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d633	b633	1a		inc a				inc 	a 							; one extra for size
.d634	b634	38		sec				sec 								; one extra for checksum
.d635	b635	65 36		adc $36				adc 	zTemp0 						; go to next token
.d637	b637	85 36		sta $36				sta 	zTemp0
.d639	b639	90 f3		bcc $b62e			bcc 	_LCFindText
.d63b	b63b	e6 37		inc $37				inc 	zTemp0+1
.d63d	b63d	80 ef		bra $b62e			bra 	_LCFindText
.d63f	b63f					_LCFoundText:
.d63f	b63f	5a		phy				phy 								; save List position
.d640	b640	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d642	b642	aa		tax				tax
.d643	b643	a9 86		lda #$86			lda 	#CLIToken+$80
.d645	b645	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d648	b648	a0 02		ldy #$02			ldy 	#2
.d64a	b64a					_LCCopyToken:
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y
.d64c	b64c	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d64f	b64f	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d652	b652	c8		iny				iny
.d653	b653	ca		dex				dex
.d654	b654	d0 f4		bne $b64a			bne 	_LCCopyToken
.d656	b656	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d658	b658	f0 05		beq $b65f			beq 	_LCNoSpace
.d65a	b65a	a9 20		lda #$20			lda 	#' '
.d65c	b65c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d65f	b65f					_LCNoSpace:
.d65f	b65f	7a		ply				ply 								; restore position.
.d660	b660	c8		iny				iny 								; consume token
.d661	b661	4c 72 b5	jmp $b572			jmp 	_LCMainLoop 				; and go around again.
.d664	b664					_LCData:
.d664	b664	48		pha				pha 								; save type $FE/$FF
.d665	b665	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d667	b667	c9 fe		cmp #$fe			cmp 	#$FE
.d669	b669	f0 22		beq $b68d			beq 	_LCHaveOpener
.d66b	b66b	a2 22		ldx #$22			ldx 	#'"'
.d66d	b66d	a9 8f		lda #$8f			lda 	#CLIData+$80
.d66f	b66f	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d672	b672	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d674	b674	d0 17		bne $b68d			bne 	_LCHaveOpener
.d676	b676	88		dey				dey 								; what precedes it ?
.d677	b677	b1 30		lda ($30),y			lda 	(codePtr),y
.d679	b679	c8		iny				iny
.d67a	b67a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d67c	b67c	d0 0f		bne $b68d			bne 	_LCHaveOpener
.d67e	b67e	a9 09		lda #$09			lda 	#9 							; tab
.d680	b680	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d683	b683	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d685	b685	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d688	b688	a9 85		lda #$85			lda 	#CLIFComment+$80
.d68a	b68a	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d68d	b68d					_LCHaveOpener:
.d68d	b68d	8a		txa				txa 								; output prefix (# or ")
.d68e	b68e	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d691	b691	c8		iny				iny 								; get count
.d692	b692	b1 30		lda ($30),y			lda 	(codePtr),y
.d694	b694	aa		tax				tax
.d695	b695	c8		iny				iny 								; point at first character
.d696	b696					_LCOutData:
.d696	b696	b1 30		lda ($30),y			lda 	(codePtr),y
.d698	b698	c9 00		cmp #$00			cmp 	#0
.d69a	b69a	f0 03		beq $b69f			beq 	_LCNoPrint
.d69c	b69c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d69f	b69f					_LCNoPrint:
.d69f	b69f	c8		iny				iny
.d6a0	b6a0	ca		dex				dex
.d6a1	b6a1	d0 f3		bne $b696			bne 	_LCOutData
.d6a3	b6a3	68		pla				pla 								; closing " required ?
.d6a4	b6a4	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6a6	b6a6	d0 0f		bne $b6b7			bne 	_LCNoQuote
.d6a8	b6a8	a9 22		lda #$22			lda 	#'"'
.d6aa	b6aa	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6ad	b6ad	ad f5 04	lda $04f5			lda 	EXTTextColour
.d6b0	b6b0	29 0f		and #$0f			and 	#$0F
.d6b2	b6b2	09 90		ora #$90			ora 	#$90
.d6b4	b6b4	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6b7	b6b7					_LCNoQuote:
.d6b7	b6b7	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d6ba	b6ba					LCLWriteColour:
.d6ba	b6ba	cd a9 02	cmp $02a9			cmp 	currentListColour 			; has the colour changed
.d6bd	b6bd	8d a9 02	sta $02a9			sta 	currentListColour 			; (update it anyway)
.d6c0	b6c0	d0 01		bne $b6c3			bne 	LCLWrite 					; if different, output it
.d6c2	b6c2	60		rts				rts
.d6c3	b6c3					LCLWrite:
.d6c3	b6c3	da		phx				phx
.d6c4	b6c4	ae 9d 02	ldx $029d			ldx 	tbOffset 					; write out make ASCIIZ
.d6c7	b6c7	9d ad 02	sta $02ad,x			sta 	tokenBuffer,x
.d6ca	b6ca	9e ae 02	stz $02ae,x			stz 	tokenBuffer+1,x
.d6cd	b6cd	ee 9d 02	inc $029d			inc 	tbOffset 					; bump the position
.d6d0	b6d0	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6d2	b6d2	30 03		bmi $b6d7			bmi 	_LCLNoColour
.d6d4	b6d4	8d a7 02	sta $02a7			sta 	lcLastCharacter
.d6d7	b6d7					_LCLNoColour:
.d6d7	b6d7	fa		plx				plx
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					LCLDeleteLastSpace:
.d6d9	b6d9	48		pha				pha
.d6da	b6da	da		phx				phx
.d6db	b6db	ae 9d 02	ldx $029d			ldx 	tbOffset
.d6de	b6de	f0 0a		beq $b6ea			beq 	_LCDLSExit
.d6e0	b6e0	bd ac 02	lda $02ac,x			lda 	tokenBuffer-1,x
.d6e3	b6e3	c9 20		cmp #$20			cmp 	#' '
.d6e5	b6e5	d0 03		bne $b6ea			bne 	_LCDLSExit
.d6e7	b6e7	ce 9d 02	dec $029d			dec 	tbOffset
.d6ea	b6ea					_LCDLSExit:
.d6ea	b6ea	fa		plx				plx
.d6eb	b6eb	68		pla				pla
.d6ec	b6ec	60		rts				rts
.d6ed	b6ed					LCLCheckSpaceRequired:
.d6ed	b6ed	ad a7 02	lda $02a7			lda 	lcLastCharacter 			; check last character
.d6f0	b6f0	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6f2	b6f2	f0 1b		beq $b70f			beq 	_LCCSRSpace
.d6f4	b6f4	c9 29		cmp #$29			cmp 	#')'
.d6f6	b6f6	f0 17		beq $b70f			beq 	_LCCSRSpace
.d6f8	b6f8	c9 23		cmp #$23			cmp 	#'#'
.d6fa	b6fa	f0 13		beq $b70f			beq 	_LCCSRSpace
.d6fc	b6fc	20 15 b7	jsr $b715			jsr 	LCLLowerCase 				; saves a little effort
.d6ff	b6ff	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d701	b701	90 11		bcc $b714			bcc 	_LCCSRExit
.d703	b703	c9 3a		cmp #$3a			cmp 	#"9"+1
.d705	b705	90 08		bcc $b70f			bcc 	_LCCSRSpace
.d707	b707	c9 61		cmp #$61			cmp 	#"a"
.d709	b709	90 09		bcc $b714			bcc 	_LCCSRExit
.d70b	b70b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d70d	b70d	b0 05		bcs $b714			bcs 	_LCCSRExit
.d70f	b70f					_LCCSRSpace:
.d70f	b70f	a9 20		lda #$20			lda 	#' '
.d711	b711	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d714	b714					_LCCSRExit:
.d714	b714	60		rts				rts
.d715	b715					LCLLowerCase:
.d715	b715	c9 41		cmp #$41			cmp 	#"A"
.d717	b717	90 06		bcc $b71f			bcc 	_LCLLCOut
.d719	b719	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d71b	b71b	b0 02		bcs $b71f			bcs 	_LCLLCOut
.d71d	b71d	69 20		adc #$20			adc 	#$20
.d71f	b71f					_LCLLCOut:
.d71f	b71f	60		rts				rts
.d720	b720					LCLUpperCase:
.d720	b720	c9 61		cmp #$61			cmp 	#"a"
.d722	b722	90 06		bcc $b72a			bcc 	_LCLUCOut
.d724	b724	c9 7b		cmp #$7b			cmp 	#"z"+1
.d726	b726	b0 02		bcs $b72a			bcs 	_LCLUCOut
.d728	b728	e9 1f		sbc #$1f			sbc 	#$1F
.d72a	b72a					_LCLUCOut:
.d72a	b72a	60		rts				rts
.d72b	b72b					LCLWriteNumberXA:
.d72b	b72b	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d72d	b72d					_LCLWNLoop1:
.d72d	b72d	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d72f	b72f					_LCLWNLoop2:
.d72f	b72f	48		pha				pha 								; save initial LSB
.d730	b730	38		sec				sec
.d731	b731	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d733	b733	f9 64 b7	sbc $b764,y			sbc 	_LCLWNTable,y
.d736	b736	48		pha				pha
.d737	b737	8a		txa				txa
.d738	b738	f9 65 b7	sbc $b765,y			sbc 	_LCLWNTable+1,y
.d73b	b73b	90 07		bcc $b744			bcc 	_LCLWNUnderflow
.d73d	b73d	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d73f	b73f	aa		tax				tax 								; update X
.d740	b740	68		pla				pla 								; restore A
.d741	b741	7a		ply				ply 								; throw original
.d742	b742	80 eb		bra $b72f			bra 	_LCLWNLoop2 				; try again.
.d744	b744					_LCLWNUnderflow:
.d744	b744	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d746	b746	d0 06		bne $b74e			bne 	_LCLWNOut
.d748	b748	ad 9d 02	lda $029d			lda 	tbOffset 					; suppress leading zeroes
.d74b	b74b	3a		dec a				dec 	a
.d74c	b74c	f0 04		beq $b752			beq 	_LCLWNNext
.d74e	b74e					_LCLWNOut:
.d74e	b74e	98		tya				tya
.d74f	b74f	20 5e b7	jsr $b75e			jsr 	_LCLWNOutDigit
.d752	b752					_LCLWNNext:
.d752	b752	7a		ply				ply 							 	; restore original value.
.d753	b753	68		pla				pla
.d754	b754	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d756	b756	c8		iny				iny
.d757	b757	c8		iny				iny
.d758	b758	84 37		sty $37				sty 	zTemp0+1
.d75a	b75a	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d75c	b75c	d0 cf		bne $b72d			bne 	_LCLWNLoop1
.d75e	b75e					_LCLWNOutDigit:
.d75e	b75e	09 30		ora #$30			ora 	#'0'
.d760	b760	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d763	b763	60		rts				rts
.d764	b764					_LCLWNTable:
>d764	b764	10 27						.word 	10000
>d766	b766	e8 03						.word 	1000
>d768	b768	64 00						.word 	100
>d76a	b76a	0a 00						.word 	10
.d76c	b76c					TOKSearchTable:
.d76c	b76c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d76e	b76e	85 36		sta $36				sta 	zTemp0
.d770	b770	a0 00		ldy #$00			ldy 	#0
.d772	b772	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d774	b774	85 38		sta $38				sta 	zTemp1
.d776	b776					_TSTLoop:
.d776	b776	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d778	b778	30 49		bmi $b7c3			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d77a	b77a	f0 2e		beq $b7aa			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d77c	b77c	c8		iny				iny 								; get the hash
.d77d	b77d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d77f	b77f	88		dey				dey
.d780	b780	cd 83 02	cmp $0283			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d783	b783	d0 25		bne $b7aa			bne 	_TSTNext
.d785	b785	ad 82 02	lda $0282			lda 	identTypeEnd 				; get length of identifier from end-start
.d788	b788	38		sec				sec
.d789	b789	ed 80 02	sbc $0280			sbc 	identStart
.d78c	b78c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d78e	b78e	d0 1a		bne $b7aa			bne 	_TSTNext
.d790	b790	5a		phy				phy 								; save Y , we might fail to match.
.d791	b791	c8		iny				iny 								; point to text
.d792	b792	c8		iny				iny
.d793	b793	ae 80 02	ldx $0280			ldx 	identStart 					; offset in line buffer in X
.d796	b796					_TSTCompareName:
.d796	b796	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; compare text.
.d799	b799	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d79b	b79b	d0 0c		bne $b7a9			bne 	_TSTNextPullY 				; fail, pullY and do next
.d79d	b79d	e8		inx				inx
.d79e	b79e	c8		iny				iny
.d79f	b79f	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; complete match.
.d7a2	b7a2	d0 f2		bne $b796			bne 	_TSTCompareName
.d7a4	b7a4	7a		ply				ply 								; throw Y
.d7a5	b7a5	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7a7	b7a7	38		sec				sec 								; return with CS = passed.
.d7a8	b7a8	60		rts				rts
.d7a9	b7a9					_TSTNextPullY:
.d7a9	b7a9	7a		ply				ply 								; restore current, fall through.
.d7aa	b7aa					_TSTNext:
.d7aa	b7aa	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ac	b7ac	98		tya				tya
.d7ad	b7ad	18		clc				clc
.d7ae	b7ae	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7b0	b7b0	1a		inc a				inc 	a 							; +1
.d7b1	b7b1	1a		inc a				inc 	a 							; +2
.d7b2	b7b2	a8		tay				tay
.d7b3	b7b3	10 c1		bpl $b776			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7b5	b7b5	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7b6	b7b6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7b8	b7b8	18		clc				clc  								; but have tables > 255 bytes
.d7b9	b7b9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7bb	b7bb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7bd	b7bd	90 b7		bcc $b776			bcc 	_TSTLoop
.d7bf	b7bf	e6 37		inc $37				inc 	zTemp0+1
.d7c1	b7c1	80 b3		bra $b776			bra 	_TSTLoop
.d7c3	b7c3					_TSTFail:
.d7c3	b7c3	18		clc				clc
.d7c4	b7c4	60		rts				rts
.d7c5	b7c5					Export_TKTokeniseLine:
.d7c5	b7c5	20 92 b9	jsr $b992			jsr 	LCLFixLineBufferCase 		; fix line case
.d7c8	b7c8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7ca	b7ca	8d aa 02	sta $02aa			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7cd	b7cd	9c ab 02	stz $02ab			stz 	tokenLineNumber
.d7d0	b7d0	9c ac 02	stz $02ac			stz 	tokenLineNumber+1
.d7d3	b7d3	a2 ff		ldx #$ff			ldx 	#$FF
.d7d5	b7d5					_TKFindFirst:
.d7d5	b7d5	e8		inx				inx
.d7d6	b7d6	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.d7d9	b7d9	f0 62		beq $b83d			beq 	_TKExit
.d7db	b7db	c9 20		cmp #$20			cmp 	#' '
.d7dd	b7dd	90 f6		bcc $b7d5			bcc 	_TKFindFirst
.d7df	b7df	c9 30		cmp #$30			cmp 	#'0'
.d7e1	b7e1	90 07		bcc $b7ea			bcc 	_TKNoLineNumber
.d7e3	b7e3	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7e5	b7e5	b0 03		bcs $b7ea			bcs 	_TKNoLineNumber
.d7e7	b7e7	20 bc b9	jsr $b9bc			jsr 	TOKExtractLineNumber
.d7ea	b7ea					_TKNoLineNumber:
.d7ea	b7ea					_TKTokeniseLoop:
.d7ea	b7ea	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ed	b7ed	f0 4e		beq $b83d			beq 	_TKExit
.d7ef	b7ef	e8		inx				inx
.d7f0	b7f0	c9 20		cmp #$20			cmp 	#' '
.d7f2	b7f2	f0 f6		beq $b7ea			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7f4	b7f4	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7f5	b7f5	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7f7	b7f7	f0 68		beq $b861			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7f9	b7f9	c9 41		cmp #$41			cmp 	#'A'
.d7fb	b7fb	90 04		bcc $b801			bcc 	_TKTokenisePunctuation
.d7fd	b7fd	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7ff	b7ff	90 60		bcc $b861			bcc 	_TKTokeniseIdentifier
.d801	b801					_TKTokenisePunctuation:
.d801	b801	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d803	b803	f0 2e		beq $b833			beq 	_TKString
.d805	b805	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d807	b807	f0 2f		beq $b838			beq 	_TKHexConstant
.d809	b809	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d80b	b80b	f0 36		beq $b843			beq 	_TKCheckDouble
.d80d	b80d	c9 3e		cmp #$3e			cmp 	#'>'
.d80f	b80f	f0 32		beq $b843			beq 	_TKCheckDouble
.d811	b811					_TKStandardPunctuation:
.d811	b811	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d814	b814	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d816	b816	90 0e		bcc $b826			bcc 	_TKNoShift
.d818	b818	48		pha				pha 								; save. we are about to convert this punctuation token from
.d819	b819	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d81b	b81b	85 36		sta $36				sta 	zTemp0
.d81d	b81d	68		pla				pla
.d81e	b81e	29 20		and #$20			and 	#32 						; bit 5
.d820	b820	4a		lsr a				lsr 	a 							; shift into bit 3
.d821	b821	4a		lsr a				lsr 	a
.d822	b822	05 36		ora $36				ora 	zTemp0
.d824	b824	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d826	b826					_TKNoShift:
.d826	b826	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; write the punctuation character
.d829	b829	e8		inx				inx 								; consume the character
.d82a	b82a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d82c	b82c	d0 bc		bne $b7ea			bne 	_TKTokeniseLoop 			; and loop round again.
.d82e	b82e	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment 			; comment checl
.d831	b831	80 b7		bra $b7ea			bra 	_TKTokeniseLoop
.d833	b833					_TKString:
.d833	b833	20 21 b9	jsr $b921			jsr 	TOKTokenString
.d836	b836	80 b2		bra $b7ea			bra 	_TKTokeniseLoop
.d838	b838					_TKHexConstant:
.d838	b838	20 5c b9	jsr $b95c			jsr 	TOKHexConstant
.d83b	b83b	80 ad		bra $b7ea			bra 	_TKTokeniseLoop
.d83d	b83d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d83f	b83f	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d842	b842	60		rts				rts
.d843	b843					_TKCheckDouble:
.d843	b843	bd ab 03	lda $03ab,x			lda 	lineBuffer+1,x 				; get next character
.d846	b846	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d848	b848	90 c7		bcc $b811			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d84a	b84a	c9 3f		cmp #$3f			cmp 	#'>'+1
.d84c	b84c	b0 c3		bcs $b811			bcs 	_TKStandardPunctuation
.d84e	b84e	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d851	b851	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d853	b853	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d854	b854	7d ab 03	adc $03ab,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d857	b857	38		sec				sec
.d858	b858	e9 3c		sbc #$3c			sbc 	#'<'
.d85a	b85a	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; this is in the range 0-7
.d85d	b85d	e8		inx				inx 								; consume both
.d85e	b85e	e8		inx				inx
.d85f	b85f	80 89		bra $b7ea			bra 	_TKTokeniseLoop
.d861	b861					_TKTokeniseIdentifier:
.d861	b861	8e 80 02	stx $0280			stx 	identStart 					; save start
.d864	b864	9c 84 02	stz $0284			stz 	identTypeByte 				; zero the type byte
.d867	b867					_TKCheckLoop:
.d867	b867	e8		inx				inx 								; look at next, we know first is identifier already.
.d868	b868	bd aa 03	lda $03aa,x			lda  	lineBuffer,x
.d86b	b86b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d86d	b86d	f0 f8		beq $b867			beq 	_TKCheckLoop
.d86f	b86f	c9 30		cmp #$30			cmp	 	#"0"
.d871	b871	90 0c		bcc $b87f			bcc 	_TKEndIdentifier
.d873	b873	c9 3a		cmp #$3a			cmp 	#"9"+1
.d875	b875	90 f0		bcc $b867			bcc 	_TKCheckLoop
.d877	b877	c9 41		cmp #$41			cmp	 	#"A"
.d879	b879	90 04		bcc $b87f			bcc 	_TKEndIdentifier
.d87b	b87b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d87d	b87d	90 e8		bcc $b867			bcc 	_TKCheckLoop
.d87f	b87f					_TKEndIdentifier:
.d87f	b87f	8e 81 02	stx $0281			stx 	identTypeStart 				; save start of type text (if any !)
.d882	b882	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d884	b884	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d886	b886	f0 06		beq $b88e			beq 	_TKHasTypeCharacter
.d888	b888	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d88a	b88a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d88c	b88c	d0 07		bne $b895			bne 	_TKNoTypeCharacter
.d88e	b88e					_TKHasTypeCharacter:
.d88e	b88e	8c 84 02	sty $0284			sty 	identTypeByte 				; has # or $, save the type
.d891	b891	e8		inx				inx 								; consume the type character
.d892	b892	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.d895	b895					_TKNoTypeCharacter:
.d895	b895	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d897	b897	d0 09		bne $b8a2			bne 	_TKNoArray
.d899	b899	e8		inx				inx 								; skip the (
.d89a	b89a	ad 84 02	lda $0284			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d89d	b89d	09 04		ora #$04			ora 	#$04
.d89f	b89f	8d 84 02	sta $0284			sta 	identTypeByte
.d8a2	b8a2					_TKNoArray:
.d8a2	b8a2	8e 82 02	stx $0282			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8a5	b8a5	20 7d b9	jsr $b97d			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8a8	b8a8	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8aa	b8aa	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8ac	b8ac	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8af	b8af	a2 00		ldx #$00			ldx 	#0
.d8b1	b8b1	b0 1f		bcs $b8d2			bcs 	_TKFoundToken
.d8b3	b8b3	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8b5	b8b5	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.d8b7	b8b7	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8ba	b8ba	a2 81		ldx #$81			ldx 	#$81
.d8bc	b8bc	b0 14		bcs $b8d2			bcs 	_TKFoundToken
.d8be	b8be	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d8c0	b8c0	a9 e5		lda #$e5			lda 	#(KeywordSet2) & $FF
.d8c2	b8c2	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8c5	b8c5	a2 82		ldx #$82			ldx 	#$82
.d8c7	b8c7	b0 09		bcs $b8d2			bcs 	_TKFoundToken
.d8c9	b8c9	20 0d ba	jsr $ba0d			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8cc	b8cc	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; X points to following byte
.d8cf	b8cf	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8d2	b8d2					_TKFoundToken:
.d8d2	b8d2	48		pha				pha 								; save token
.d8d3	b8d3	8a		txa				txa 								; shift in X, is there one ?
.d8d4	b8d4	f0 03		beq $b8d9			beq 	_TKNoTShift
.d8d6	b8d6	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; if so, write it out
.d8d9	b8d9					_TKNoTShift:
.d8d9	b8d9	68		pla				pla 								; restore and write token
.d8da	b8da	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d8dd	b8dd	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8df	b8df	d0 0d		bne $b8ee			bne 	_TKNotRem 			 		; not shifted ?
.d8e1	b8e1	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d8e3	b8e3	d0 09		bne $b8ee			bne 	_TKNotRem
.d8e5	b8e5	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; check if comment follows.
.d8e8	b8e8	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment
.d8eb	b8eb	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop
.d8ee	b8ee					_TKNotRem:
.d8ee	b8ee	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; X points to following byte
.d8f1	b8f1	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8f4	b8f4					TOKCheckComment:
.d8f4	b8f4	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; skip over space
.d8f7	b8f7	e8		inx				inx
.d8f8	b8f8	c9 20		cmp #$20			cmp 	#' '
.d8fa	b8fa	f0 f8		beq $b8f4			beq 	TOKCheckComment
.d8fc	b8fc	ca		dex				dex 								; first non space character
.d8fd	b8fd	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8ff	b8ff	f0 1f		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d901	b901	c9 00		cmp #$00			cmp 	#0 							; EOL
.d903	b903	f0 1b		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d905	b905	da		phx				phx
.d906	b906					_TOKCCLowerCase:
.d906	b906	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d909	b909	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d90b	b90b	90 09		bcc $b916			bcc 	_TOKKCNotUC
.d90d	b90d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d90f	b90f	b0 05		bcs $b916			bcs 	_TOKKCNotUC
.d911	b911	49 20		eor #$20			eor 	#$20
.d913	b913	9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.d916	b916					_TOKKCNotUC:
.d916	b916	e8		inx				inx
.d917	b917	c9 00		cmp #$00			cmp 	#0
.d919	b919	d0 eb		bne $b906			bne 	_TOKCCLowerCase
.d91b	b91b	fa		plx				plx
.d91c	b91c	ca		dex				dex 								; tokenise string expects initial skip.
.d91d	b91d	20 21 b9	jsr $b921			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d920	b920					_TOKCCExit:
.d920	b920	60		rts				rts
.d921	b921					TOKTokenString:
.d921	b921	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d923	b923	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d926	b926	e8		inx				inx									; start of quoted string.
.d927	b927	da		phx				phx 								; push start of string on top
.d928	b928	ca		dex				dex 								; because we pre-increment
.d929	b929					_TSFindEnd:
.d929	b929	e8		inx				inx
.d92a	b92a	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; next character
.d92d	b92d	f0 04		beq $b933			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d92f	b92f	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d931	b931	d0 f6		bne $b929			bne 	_TSFindEnd
.d933	b933					_TSEndOfString:
.d933	b933	7a		ply				ply  								; so now Y is first character, X is character after end.
.d934	b934	48		pha				pha 								; save terminating character
.d935	b935	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d938	b938	68		pla				pla 								; terminating character
.d939	b939	f0 01		beq $b93c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d93b	b93b	e8		inx				inx
.d93c	b93c					_TSNotQuote:
.d93c	b93c	60		rts				rts
.d93d	b93d					TOKWriteBlockXY:
.d93d	b93d	86 36		stx $36				stx 	zTemp0 						; save end character
.d93f	b93f	98		tya				tya 								; use 2's complement to work out the byte size
.d940	b940	49 ff		eor #$ff			eor 	#$FF
.d942	b942	38		sec				sec
.d943	b943	65 36		adc $36				adc 	zTemp0
.d945	b945	1a		inc a				inc 	a 							; one extra for NULL
.d946	b946	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d949	b949					_TOBlockLoop:
.d949	b949	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d94b	b94b	f0 09		beq $b956			beq 	_TOBlockExit
.d94d	b94d	b9 aa 03	lda $03aa,y			lda 	lineBuffer,y 				; write byte out.
.d950	b950	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d953	b953	c8		iny				iny
.d954	b954	80 f3		bra $b949			bra 	_TOBlockLoop
.d956	b956					_TOBlockExit:
.d956	b956	a9 00		lda #$00			lda 	#0 							; add NULL.
.d958	b958	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d95b	b95b	60		rts				rts
.d95c	b95c					TOKHexConstant:
.d95c	b95c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d95e	b95e	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d961	b961	e8		inx				inx									; start of quoted string.
.d962	b962	da		phx				phx 								; push start of constant on top
.d963	b963	ca		dex				dex
.d964	b964					_THFindLoop:
.d964	b964	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d965	b965	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; the hex constant is.
.d968	b968	c9 30		cmp #$30			cmp 	#"0"
.d96a	b96a	90 0c		bcc $b978			bcc 	_THFoundEnd
.d96c	b96c	c9 3a		cmp #$3a			cmp 	#"9"+1
.d96e	b96e	90 f4		bcc $b964			bcc 	_THFindLoop
.d970	b970	c9 41		cmp #$41			cmp 	#"A"
.d972	b972	90 04		bcc $b978			bcc 	_THFoundEnd
.d974	b974	c9 47		cmp #$47			cmp 	#"F"+1
.d976	b976	90 ec		bcc $b964			bcc 	_THFindLoop
.d978	b978					_THFoundEnd:
.d978	b978	7a		ply				ply 								; restore start
.d979	b979	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; output the block
.d97c	b97c	60		rts				rts
.d97d	b97d					TOKCalculateHash:
.d97d	b97d	da		phx				phx
.d97e	b97e	ae 80 02	ldx $0280			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d981	b981	a9 00		lda #$00			lda 	#0
.d983	b983					_TCHLoop:
.d983	b983	18		clc				clc
.d984	b984	7d aa 03	adc $03aa,x			adc 	lineBuffer,x
.d987	b987	e8		inx				inx
.d988	b988	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d98b	b98b	d0 f6		bne $b983			bne 	_TCHLoop
.d98d	b98d	8d 83 02	sta $0283			sta 	identHash 					; save the hash
.d990	b990	fa		plx				plx
.d991	b991	60		rts				rts
.d992	b992					LCLFixLineBufferCase:
.d992	b992	a2 00		ldx #$00			ldx 	#0
.d994	b994					_FLBCLoop:
.d994	b994	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get next character
.d997	b997	f0 22		beq $b9bb			beq 	_FLBCExit 					; end of string.
.d999	b999	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d99b	b99b	f0 11		beq $b9ae			beq 	_FLBCInQuotes
.d99d	b99d	e8		inx				inx
.d99e	b99e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9a0	b9a0	90 f2		bcc $b994			bcc 	_FLBCLoop
.d9a2	b9a2	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9a4	b9a4	b0 ee		bcs $b994			bcs 	_FLBCLoop
.d9a6	b9a6	38		sec				sec 								; make U/C
.d9a7	b9a7	e9 20		sbc #$20			sbc 	#32
.d9a9	b9a9	9d a9 03	sta $03a9,x			sta	 	lineBuffer-1,x 				; write back
.d9ac	b9ac	80 e6		bra $b994			bra 	_FLBCLoop
.d9ae	b9ae					_FLBCInQuotes:
.d9ae	b9ae	e8		inx				inx 								; advance
.d9af	b9af	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get next
.d9b2	b9b2	f0 07		beq $b9bb			beq 	_FLBCExit 					; exit on EOS
.d9b4	b9b4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9b6	b9b6	d0 f6		bne $b9ae			bne 	_FLBCInQuotes
.d9b8	b9b8	e8		inx				inx 								; skip over it
.d9b9	b9b9	80 d9		bra $b994			bra 	_FLBCLoop
.d9bb	b9bb					_FLBCExit:
.d9bb	b9bb	60		rts				rts
.d9bc	b9bc					TOKExtractLineNumber:
.d9bc	b9bc	ad ac 02	lda $02ac			lda 	tokenLineNumber+1 			; push current value on stack
.d9bf	b9bf	48		pha				pha
.d9c0	b9c0	ad ab 02	lda $02ab			lda 	tokenLineNumber
.d9c3	b9c3	48		pha				pha
.d9c4	b9c4	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 2
.d9c7	b9c7	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 4
.d9ca	b9ca	18		clc				clc 								; add stacked value
.d9cb	b9cb	68		pla				pla
.d9cc	b9cc	6d ab 02	adc $02ab			adc 	tokenLineNumber
.d9cf	b9cf	8d ab 02	sta $02ab			sta 	tokenLineNumber
.d9d2	b9d2	68		pla				pla
.d9d3	b9d3	6d ac 02	adc $02ac			adc 	tokenLineNumber+1
.d9d6	b9d6	8d ac 02	sta $02ac			sta 	tokenLineNumber+1 			; line # x 5
.d9d9	b9d9	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 10
.d9dc	b9dc	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get and consume character
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	29 0f		and #$0f			and 	#15 						; add to line #
.d9e2	b9e2	18		clc				clc
.d9e3	b9e3	6d ab 02	adc $02ab			adc 	tokenLineNumber
.d9e6	b9e6	8d ab 02	sta $02ab			sta 	tokenLineNumber
.d9e9	b9e9	90 03		bcc $b9ee			bcc 	_TLENNoCarry
.d9eb	b9eb	ee ac 02	inc $02ac			inc 	tokenLineNumber+1
.d9ee	b9ee					_TLENNoCarry:
.d9ee	b9ee	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; more digits ?
.d9f1	b9f1	c9 30		cmp #$30			cmp 	#'0'
.d9f3	b9f3	90 04		bcc $b9f9			bcc 	_TLENExit
.d9f5	b9f5	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9f7	b9f7	90 c3		bcc $b9bc			bcc 	TOKExtractLineNumber
.d9f9	b9f9					_TLENExit:
.d9f9	b9f9	60		rts				rts
.d9fa	b9fa					_LCLNTimes2:
.d9fa	b9fa	0e ab 02	asl $02ab			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9fd	b9fd	2e ac 02	rol $02ac			rol 	tokenLineNumber+1
.da00	ba00	60		rts				rts
.da01	ba01					TOKWriteByte:
.da01	ba01	da		phx				phx
.da02	ba02	ae aa 02	ldx $02aa			ldx 	tokenOffset 				; next slot to write to
.da05	ba05	9d aa 02	sta $02aa,x			sta 	tokenOffset,x 				; write byte out
.da08	ba08	ee aa 02	inc $02aa			inc 	tokenOffset 				; advance slot.
.da0b	ba0b	fa		plx				plx
.da0c	ba0c	60		rts				rts
.da0d	ba0d					TOKCheckCreateVariableRecord:
.da0d	ba0d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da0f	ba0f	85 36		sta $36				sta 	0+zTemp0
.da11	ba11	a9 08		lda #$08			lda 	#((VariableSpace) >> 8)
.da13	ba13	85 37		sta $37				sta 	1+zTemp0
.da15	ba15					_CCVSearch:
.da15	ba15	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da17	ba17	f0 2c		beq $ba45			beq 	_CCVFail
.da19	ba19	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da1b	ba1b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da1d	ba1d	cd 83 02	cmp $0283			cmp 	identHash 	  				; if not, try the next.
.da20	ba20	d0 16		bne $ba38			bne 	_CCVNext
.da22	ba22	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da24	ba24	ae 80 02	ldx $0280			ldx 	identStart
.da27	ba27					_CCVCompare:
.da27	ba27	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da2a	ba2a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da2c	ba2c	e8		inx				inx 								; advance pointers
.da2d	ba2d	c8		iny				iny
.da2e	ba2e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da2f	ba2f	d0 07		bne $ba38			bne 	_CCVNext  					; didn't match go to next.
.da31	ba31	90 f4		bcc $ba27			bcc 	_CCVCompare 				; not finished yet.
.da33	ba33	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; matched whole thing ?
.da36	ba36	f0 41		beq $ba79			beq 	_CCVFound 					; yes, we were successful
.da38	ba38					_CCVNext:
.da38	ba38	18		clc				clc 								; go to next record.
.da39	ba39	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da3b	ba3b	65 36		adc $36				adc 	zTemp0
.da3d	ba3d	85 36		sta $36				sta 	zTemp0
.da3f	ba3f	90 d4		bcc $ba15			bcc 	_CCVSearch
.da41	ba41	e6 37		inc $37				inc 	zTemp0+1
.da43	ba43	80 d0		bra $ba15			bra 	_CCVSearch
.da45	ba45					_CCVFail:
.da45	ba45	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da47	ba47	ad 83 02	lda $0283			lda 	identHash
.da4a	ba4a	91 36		sta ($36),y			sta 	(zTemp0),y
.da4c	ba4c	c8		iny				iny 								; offset 2 is the type byte
.da4d	ba4d	ad 84 02	lda $0284			lda 	identTypeByte
.da50	ba50	91 36		sta ($36),y			sta 	(zTemp0),y
.da52	ba52	c8		iny				iny
.da53	ba53					_CCVData:
.da53	ba53	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da55	ba55	91 36		sta ($36),y			sta 	(zTemp0),y
.da57	ba57	c8		iny				iny
.da58	ba58	c0 08		cpy #$08			cpy 	#8
.da5a	ba5a	90 f7		bcc $ba53			bcc 	_CCVData
.da5c	ba5c	ae 80 02	ldx $0280			ldx 	identStart 					; copy name into 8 on.
.da5f	ba5f					_CCVCopyName:
.da5f	ba5f	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.da62	ba62	91 36		sta ($36),y			sta 	(zTemp0),y
.da64	ba64	e8		inx				inx
.da65	ba65	c8		iny				iny
.da66	ba66	ec 82 02	cpx $0282			cpx 	identTypeEnd
.da69	ba69	d0 f4		bne $ba5f			bne 	_CCVCopyName
.da6b	ba6b	98		tya				tya 								; patch offset
.da6c	ba6c	92 36		sta ($36)			sta 	(zTemp0)
.da6e	ba6e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da70	ba70	91 36		sta ($36),y			sta 	(zTemp0),y
.da72	ba72	88		dey				dey
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da75	ba75	09 80		ora #$80			ora 	#$80
.da77	ba77	91 36		sta ($36),y			sta 	(zTemp0),y
.da79	ba79					_CCVFound:
.da79	ba79	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da7b	ba7b	38		sec				sec
.da7c	ba7c	e9 08		sbc #$08			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da7e	ba7e	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da80	ba80	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da83	ba83	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da85	ba85	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da88	ba88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da89	ba89					SNDCheckChannel:
.da89	ba89	aa		tax				tax
.da8a	ba8a	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da8d	ba8d	d0 38		bne $bac7			bne 	_SNDCCExit
.da8f	ba8f	da		phx				phx 								; save current channel
.da90	ba90	8a		txa				txa 								; put in A
.da91	ba91	20 0d bb	jsr $bb0d			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da94	ba94	68		pla				pla 								; channel # in A
.da95	ba95	90 30		bcc $bac7			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da97	ba97	a8		tay				tay 								; Y is the channel #
.da98	ba98	bd b3 05	lda $05b3,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da9b	ba9b	99 b2 06	sta $06b2,y			sta 	SNDPitchLow,y
.da9e	ba9e	bd b4 05	lda $05b4,x			lda 	SNDQueue+2,x
.daa1	baa1	99 b6 06	sta $06b6,y			sta 	SNDPitchHigh,y
.daa4	baa4	bd b5 05	lda $05b5,x			lda 	SNDQueue+3,x
.daa7	baa7	99 ba 06	sta $06ba,y			sta 	SNDVolume,y
.daaa	baaa	bd b6 05	lda $05b6,x			lda 	SNDQueue+4,x
.daad	baad	99 be 06	sta $06be,y			sta 	SNDTimeLeft,y
.dab0	bab0	bd b7 05	lda $05b7,x			lda 	SNDQueue+5,x
.dab3	bab3	99 c2 06	sta $06c2,y			sta 	SNDAdjustLow,y
.dab6	bab6	bd b8 05	lda $05b8,x			lda 	SNDQueue+6,x
.dab9	bab9	99 c6 06	sta $06c6,y			sta 	SNDAdjustHigh,y
.dabc	babc	5a		phy				phy 								; save channel #
.dabd	babd	20 27 bb	jsr $bb27			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dac0	bac0	ce b1 05	dec $05b1			dec 	SNDLength 					; reduce the queue length.
.dac3	bac3	68		pla				pla
.dac4	bac4	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update channel A
.dac7	bac7					_SNDCCExit:
.dac7	bac7	60		rts				rts
.dac8	bac8					SNDUpdateNote:
.dac8	bac8	aa		tax				tax 								; so we can access records
.dac9	bac9	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.daca	baca	0a		asl a				asl 	a
.dacb	bacb	0a		asl a				asl 	a
.dacc	bacc	0a		asl a				asl 	a
.dacd	bacd	0a		asl a				asl 	a
.dace	bace	8d b0 05	sta $05b0			sta 	SNDChannelBits
.dad1	bad1	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; are we silent
.dad4	bad4	f0 2e		beq $bb04			beq 	_SNDUNIsSilent
.dad6	bad6	ad b0 05	lda $05b0			lda 	SNDChannelBits 				; push channel bits on stack
.dad9	bad9	48		pha				pha
.dada	bada	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dadd	badd	29 0f		and #$0f			and 	#$0F
.dadf	badf	0d b0 05	ora $05b0			ora 	SNDChannelBits 				; set channel bits
.dae2	bae2	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dae4	bae4	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.dae7	bae7	bd b6 06	lda $06b6,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daea	baea	8d b0 05	sta $05b0			sta 	SNDChannelBits
.daed	baed	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x
.daf0	baf0	4e b0 05	lsr $05b0			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.daf3	baf3	6a		ror a				ror 	a
.daf4	baf4	4e b0 05	lsr $05b0			lsr 	SNDChannelBits
.daf7	baf7	6a		ror a				ror 	a
.daf8	baf8	4a		lsr a				lsr 	a 							; put in bits 0-5
.daf9	baf9	4a		lsr a				lsr 	a
.dafa	bafa	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write as rest of pitch register
.dafd	bafd	68		pla				pla
.dafe	bafe	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db00	bb00	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db03	bb03	60		rts				rts
.db04	bb04					_SNDUNIsSilent:
.db04	bb04	ad b0 05	lda $05b0			lda 	SNDChannelBits 				; channel bits
.db07	bb07	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db09	bb09	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write to the ports
.db0c	bb0c	60		rts				rts
.db0d	bb0d					SNDFindNextNoteForA:
.db0d	bb0d	ac b1 05	ldy $05b1			ldy 	SNDLength 					; queue size into Y
.db10	bb10	f0 13		beq $bb25			beq 	_SNDFNNFail 				; queue empty.
.db12	bb12	a2 00		ldx #$00			ldx 	#0
.db14	bb14					_SNDFNNSearch:
.db14	bb14	dd b2 05	cmp $05b2,x			cmp 	SNDQueue,x 					; does it match the channel
.db17	bb17	38		sec				sec
.db18	bb18	f0 0c		beq $bb26			beq 	_SNDFNNExit 				; if so exit with CS.
.db1a	bb1a	e8		inx				inx 								; next queue slot.
.db1b	bb1b	e8		inx				inx
.db1c	bb1c	e8		inx				inx
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	e8		inx				inx
.db1f	bb1f	e8		inx				inx
.db20	bb20	e8		inx				inx
.db21	bb21	e8		inx				inx
.db22	bb22	88		dey				dey 								; done the whole queue
.db23	bb23	d0 ef		bne $bb14			bne 	_SNDFNNSearch 				; no, go back.
.db25	bb25					_SNDFNNFail:
.db25	bb25	18		clc				clc
.db26	bb26					_SNDFNNExit:
.db26	bb26	60		rts				rts
.db27	bb27					SNDDeleteXFromQueue:
.db27	bb27	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db29	bb29	f0 09		beq $bb34			beq 	_SNDDXExit
.db2b	bb2b	bd ba 05	lda $05ba,x			lda 	SNDQueue+8,x
.db2e	bb2e	9d b2 05	sta $05b2,x			sta 	SNDQueue,x
.db31	bb31	e8		inx				inx
.db32	bb32	80 f3		bra $bb27			bra 	SNDDeleteXFromQueue
.db34	bb34					_SNDDXExit:
.db34	bb34	60		rts				rts
.05b0						SNDChannelBits:
>05b0								.fill 	1
.db35	bb35					SNDQueueRequest:
.db35	bb35	86 36		stx $36				stx 	zTemp0						; save queue address
.db37	bb37	84 37		sty $37				sty 	zTemp0+1
.db39	bb39	ae b1 05	ldx $05b1			ldx 	SNDLength 					; queue is full, can't take any more.
.db3c	bb3c	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db3e	bb3e	f0 21		beq $bb61			beq 	_SNDQRExit
.db40	bb40	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db42	bb42	48		pha				pha
.db43	bb43	8a		txa				txa  								; get offset in queue buffer/
.db44	bb44	0a		asl a				asl 	a
.db45	bb45	0a		asl a				asl 	a
.db46	bb46	0a		asl a				asl 	a
.db47	bb47	aa		tax				tax
.db48	bb48	68		pla				pla 								; get back and push again
.db49	bb49	48		pha				pha
.db4a	bb4a	9d b2 05	sta $05b2,x			sta 	SNDQueue+0,x 				; save the channel #
.db4d	bb4d	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db4f	bb4f					_SNDQCopy:
.db4f	bb4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.db51	bb51	e8		inx				inx
.db52	bb52	c8		iny				iny
.db53	bb53	9d b2 05	sta $05b2,x			sta 	SNDQueue,x
.db56	bb56	c0 06		cpy #$06			cpy 	#6
.db58	bb58	d0 f5		bne $bb4f			bne 	_SNDQCopy
.db5a	bb5a	ee b1 05	inc $05b1			inc 	SNDLength 					; bump queue length.
.db5d	bb5d	68		pla				pla 								; get channel # back
.db5e	bb5e	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db61	bb61					_SNDQRExit:
.db61	bb61	60		rts				rts
.db62	bb62					SNDSilenceChannel:
.db62	bb62	aa		tax				tax 								; zero time left.
.db63	bb63	9e be 06	stz $06be,x			stz 	SNDTimeLeft,x
.db66	bb66	0a		asl a				asl 	a 							; shift into position
.db67	bb67	0a		asl a				asl 	a
.db68	bb68	0a		asl a				asl 	a
.db69	bb69	0a		asl a				asl 	a
.db6a	bb6a	0a		asl a				asl 	a
.db6b	bb6b	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db6d	bb6d	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db70	bb70	60		rts				rts
.db71	bb71					SNDWritePorts:
.db71	bb71	da		phx				phx 								; save X
.db72	bb72	a6 01		ldx $01				ldx 	1 							; save I/O status
.db74	bb74	64 01		stz $01				stz 	1 							; access I/O page 0
.db76	bb76	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db79	bb79	8d 10 d6	sta $d610			sta 	$D610
.db7c	bb7c	86 01		stx $01				stx 	1 							; restore I/O
.db7e	bb7e	fa		plx				plx 								; restore X
.db7f	bb7f	60		rts				rts
.db80	bb80					Export_SNDCommand:
.db80	bb80	da		phx				phx 								; save XY
.db81	bb81	5a		phy				phy
.db82	bb82	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db84	bb84	f0 1d		beq $bba3			beq 	_SNDInitialise
.db86	bb86	90 28		bcc $bbb0			bcc 	_SNDExit
.db88	bb88	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db8a	bb8a	f0 17		beq $bba3			beq 	_SNDSilence
.db8c	bb8c	b0 22		bcs $bbb0			bcs 	_SNDExit
.db8e	bb8e	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db90	bb90	b0 09		bcs $bb9b			bcs 	_SNDQueryPlay
.db92	bb92	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db94	bb94	b0 1a		bcs $bbb0			bcs 	_SNDExit
.db96	bb96	20 35 bb	jsr $bb35			jsr 	SNDQueueRequest
.db99	bb99	80 15		bra $bbb0			bra 	_SNDExit
.db9b	bb9b					_SNDQueryPlay:
.db9b	bb9b	29 03		and #$03			and 	#3 							; get channel #
.db9d	bb9d	aa		tax				tax
.db9e	bb9e	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dba1	bba1	80 0d		bra $bbb0			bra 	_SNDExit
.dba3	bba3					_SNDInitialise:
.dba3	bba3					_SNDSilence:
.dba3	bba3	9c b1 05	stz $05b1			stz 	SNDLength 					; empty the queue.
.dba6	bba6	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dba8	bba8					_SNDSilenceLoop:
.dba8	bba8	48		pha				pha
.dba9	bba9	20 62 bb	jsr $bb62			jsr 	SNDSilenceChannel
.dbac	bbac	68		pla				pla
.dbad	bbad	3a		dec a				dec 	a
.dbae	bbae	10 f8		bpl $bba8			bpl 	_SNDSilenceLoop
.dbb0	bbb0					_SNDExit:
.dbb0	bbb0	7a		ply				ply
.dbb1	bbb1	fa		plx				plx
.dbb2	bbb2	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.05b1						SNDLength:
>05b1								.fill 	1
.05b2						SNDQueue:
>05b2								.fill 	SNDQueueSize * 8
.06b2						SNDPitchLow:
>06b2								.fill 	4
.06b6						SNDPitchHigh:
>06b6								.fill 	4
.06ba						SNDVolume:
>06ba								.fill 	4
.06be						SNDTimeLeft:
>06be								.fill 	4
.06c2						SNDAdjustLow:
>06c2								.fill 	4
.06c6						SNDAdjustHigh:
>06c6								.fill 	4
.dbb3	bbb3					Export_SNDUpdate:
.dbb3	bbb3					PagedSNDUpdate:
.dbb3	bbb3	ad be 06	lda $06be			lda 	SNDTimeLeft+0 				; look at time remaining
.dbb6	bbb6	f0 05		beq $bbbd			beq 	_SNDUNot0 					; not playing
.dbb8	bbb8	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbba	bbba	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel 			; update it.
.dbbd	bbbd					_SNDUNot0:
.dbbd	bbbd	ad bf 06	lda $06bf			lda 	SNDTimeLeft+1
.dbc0	bbc0	f0 05		beq $bbc7			beq 	_SNDUNot1
.dbc2	bbc2	a2 01		ldx #$01			ldx 	#1
.dbc4	bbc4	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbc7	bbc7					_SNDUNot1:
.dbc7	bbc7	ad c0 06	lda $06c0			lda 	SNDTimeLeft+2
.dbca	bbca	f0 05		beq $bbd1			beq 	_SNDUNot2
.dbcc	bbcc	a2 02		ldx #$02			ldx 	#2
.dbce	bbce	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbd1	bbd1					_SNDUNot2:
.dbd1	bbd1	ad c1 06	lda $06c1			lda 	SNDTimeLeft+3
.dbd4	bbd4	f0 05		beq $bbdb			beq 	_SNDUNot3
.dbd6	bbd6	a2 03		ldx #$03			ldx 	#3
.dbd8	bbd8	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbdb	bbdb					_SNDUNot3:
.dbdb	bbdb	60		rts				rts
.dbdc	bbdc					SNDUpdateChannel:
.dbdc	bbdc	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbde	bbde	f0 2c		beq $bc0c			beq 	_SNDUCExit
.dbe0	bbe0	3a		dec a				dec 	a 							; decrement and update timer
.dbe1	bbe1	9d be 06	sta $06be,x			sta 	SNDTimeLeft,x
.dbe4	bbe4	f0 1d		beq $bc03			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbe6	bbe6	bd c2 06	lda $06c2,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbe9	bbe9	1d c6 06	ora $06c6,x			ora 	SNDAdjustHigh,x
.dbec	bbec	f0 1e		beq $bc0c			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbee	bbee	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbef	bbef	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x
.dbf2	bbf2	7d c2 06	adc $06c2,x			adc 	SNDAdjustLow,x
.dbf5	bbf5	9d b2 06	sta $06b2,x			sta 	SNDPitchLow,x
.dbf8	bbf8	bd b6 06	lda $06b6,x			lda 	SNDPitchHigh,x
.dbfb	bbfb	7d c6 06	adc $06c6,x			adc 	SNDAdjustHigh,x
.dbfe	bbfe	29 03		and #$03			and 	#3
.dc00	bc00	9d b6 06	sta $06b6,x			sta 	SNDPitchHigh,x
.dc03	bc03					_SNDUCUpdate:
.dc03	bc03	8a		txa				txa 								; which channel.
.dc04	bc04	48		pha				pha
.dc05	bc05	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update the current note
.dc08	bc08	68		pla				pla
.dc09	bc09	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; more to do ?
.dc0c	bc0c					_SNDUCExit:
.dc0c	bc0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc0d	bc0d					Export_KNLInputSingleCharacter:
.dc0d	bc0d					PagedInputSingleCharacter:
.dc0d	bc0d	da		phx				phx
.dc0e	bc0e	5a		phy				phy
.dc0f	bc0f					_EISCWait:
.dc0f	bc0f	a5 01		lda $01				lda 	1 							; save I/O 0
.dc11	bc11	48		pha				pha
.dc12	bc12	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc14	bc14	38		sec				sec 								; calculate timer - LastTick
.dc15	bc15	ad 59 d6	lda $d659			lda 	$D659
.dc18	bc18	cd e2 04	cmp $04e2			cmp 	LastTick
.dc1b	bc1b	f0 06		beq $bc23			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.dc1d	bc1d	8d e2 04	sta $04e2			sta 	LastTick 					; update last timer
.dc20	bc20	20 b3 bb	jsr $bbb3			jsr 	PagedSNDUpdate 							; go do the code.
.dc23	bc23					_NoFireTick:
.dc23	bc23	68		pla				pla 								; restore I/O 0
.dc24	bc24	85 01		sta $01				sta 	1
.dc26	bc26	20 30 bc	jsr $bc30			jsr 	CheckKeyPressed
.dc29	bc29	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc2b	bc2b	f0 e2		beq $bc0f			beq 	_EISCWait
.dc2d	bc2d	7a		ply				ply
.dc2e	bc2e	fa		plx				plx
.dc2f	bc2f	60		rts				rts
.dc30	bc30					Export_KNLInkey:
.dc30	bc30					CheckKeyPressed:
.dc30	bc30	a9 ca		lda #$ca			lda     #<event 					; tell kernel where events go.
.dc32	bc32	85 f0		sta $f0				sta     kernel.args.events+0
.dc34	bc34	a9 06		lda #$06			lda     #>event
.dc36	bc36	85 f1		sta $f1				sta     kernel.args.events+1
.dc38	bc38	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc3b	bc3b	b0 0b		bcs $bc48			bcs 	_CKPNoEvent 				; no event
.dc3d	bc3d	ad ca 06	lda $06ca			lda     event.type
.dc40	bc40	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc42	bc42	d0 04		bne $bc48			bne 	_CKPNoEvent
.dc44	bc44	ad cf 06	lda $06cf			lda     event.key.ascii
.dc47	bc47	60		rts				rts
.dc48	bc48					_CKPNoEvent:
.dc48	bc48	a9 00		lda #$00			lda 	#0
.dc4a	bc4a	60		rts				rts
.dc4b	bc4b					Export_EXTReadController:
.dc4b	bc4b	da		phx				phx
.dc4c	bc4c	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc4e	bc4e	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc50	bc50	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc53	bc53	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc55	bc55	fa		plx				plx
.dc56	bc56	60		rts				rts
.06ca						event
>06ca						type        .byte   ?   ; Enum above
>06cb						buf         .byte   ?   ; page id or zero
>06cc						ext         .byte   ?   ; page id or zero
.06cd						key
>06cd						keyboard    .byte   ?   ; Keyboard ID
>06ce						raw         .byte   ?   ; Raw key ID
>06cf						ascii       .byte   ?   ; ASCII value
>06d0						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.06cd						mouse
.06cd						delta
>06cd						x           .byte   ?
>06ce						y           .byte   ?
>06cf						z           .byte   ?
>06d0						buttons     .byte   ?
.06cd						clicks
>06cd						inner       .byte   ?
>06ce						middle      .byte   ?
>06cf						outer       .byte   ?
.06cd						joystick
>06cd						joy0        .byte   ?
>06ce						joy1        .byte   ?
.06cd						udp
>06cd						token       .byte   ?   ; TODO: break out into fields
.06cd						file
>06cd						stream      .byte   ?
>06ce						cookie      .byte   ?
.06cf						data
>06cf						requested   .byte   ?   ; Requested number of bytes to read
>06d0						read        .byte   ?   ; Number of bytes actually read
.06cf						wrote
>06cf						requested   .byte   ?   ; Requested number of bytes to read
>06d0						wrote       .byte   ?   ; Number of bytes actually read
.06cd						directory
>06cd						stream      .byte   ?
>06ce						cookie      .byte   ?
.06cf						volume
>06cf						len         .byte   ?   ; Length of volname (in buf)
>06d0						flags       .byte   ?   ; block size, text encoding
.06cf						file
>06cf						len         .byte   ?
>06d0						flags       .byte   ?   ; block scale, text encoding, approx size
.06cf						free
>06cf						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc57	bc57					Export_KNLOpenFileWrite:
.dc57	bc57	48		pha				pha
.dc58	bc58	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc5a	bc5a	80 03		bra $bc5f			bra 	KNLOpenStart
.dc5c	bc5c					Export_KNLOpenFileRead:
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc5f	bc5f					KNLOpenStart:
.dc5f	bc5f	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc61	bc61	68		pla				pla
.dc62	bc62	20 9d bc	jsr $bc9d			jsr 	KNLSetupFileName
.dc65	bc65	a9 ca		lda #$ca			lda     #event & $FF 				; tell kernel where to store event data
.dc67	bc67	85 f0		sta $f0				sta     kernel.args.events+0
.dc69	bc69	a9 06		lda #$06			lda     #event >> 8
.dc6b	bc6b	85 f1		sta $f1				sta     kernel.args.events+1
.dc6d	bc6d	ad df 04	lda $04df			lda 	DefaultDrive 				; currently drive zero only.
.dc70	bc70	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc72	bc72	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc75	bc75	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc77	bc77	b0 1d		bcs $bc96			bcs     _out
.dc79	bc79					_loop
.dc79	bc79	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc7c	bc7c	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc7f	bc7f	b0 f8		bcs $bc79			bcs     _loop
.dc81	bc81	ad ca 06	lda $06ca			lda 	event.type
.dc84	bc84	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc86	bc86	f0 0a		beq $bc92			beq 	_success
.dc88	bc88	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc8a	bc8a	f0 0a		beq $bc96			beq 	_out
.dc8c	bc8c	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc8e	bc8e	f0 06		beq $bc96			beq 	_out
.dc90	bc90	80 e7		bra $bc79			bra     _loop
.dc92	bc92					_success
.dc92	bc92	ad cd 06	lda $06cd			lda     event.file.stream
.dc95	bc95	18		clc				clc
.dc96	bc96					_out
.dc96	bc96	60		rts				rts
.dc97	bc97					Export_KNLCloseFile:
.dc97	bc97	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc99	bc99	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc9c	bc9c	60		rts				rts
.dc9d	bc9d					KNLSetupFileName:
.dc9d	bc9d	5a		phy				phy 								; save Y on stack
.dc9e	bc9e	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dca0	bca0	86 37		stx $37				stx 	zTemp0+1
.dca2	bca2	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dca4	bca4	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dca6	bca6	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dca8	bca8					_KNLGetLength:
.dca8	bca8	c8		iny				iny
.dca9	bca9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dcab	bcab	d0 fb		bne $bca8			bne 	_KNLGetLength
.dcad	bcad	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dcaf	bcaf	7a		ply				ply
.dcb0	bcb0	60		rts				rts
=64						KNLReadBufferLen = 64 								; read buffer size.
.06d1						KNLStream:
>06d1								.byte   ?
.06d2						KNLReadBuffer:
>06d2								.fill   KNLReadBufferLen
.0712						KNLNext:
>0712								.byte   ?
.0713						KNLEnd:
>0713								.byte   ?
.dcb1	bcb1					Export_KNLReadByteInit:
.dcb1	bcb1	8d d1 06	sta $06d1			sta     KNLStream 					; save stream
.dcb4	bcb4	9c 12 07	stz $0712			stz     KNLNext 					; reset buffer
.dcb7	bcb7	9c 13 07	stz $0713			stz     KNLEnd
.dcba	bcba	60		rts				rts
.dcbb	bcbb					Export_KNLReadByte:
.dcbb	bcbb	da		phx				phx
.dcbc	bcbc	ae 12 07	ldx $0712			ldx     KNLNext 					; all data consumed ?
.dcbf	bcbf	ec 13 07	cpx $0713			cpx     KNLEnd
.dcc2	bcc2	d0 10		bne $bcd4			bne     _KNLRBGetNextByte
.dcc4	bcc4	ad d1 06	lda $06d1			lda     KNLStream
.dcc7	bcc7	20 dd bc	jsr $bcdd			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dcca	bcca	b0 0f		bcs $bcdb			bcs     _KNLRBError 				; error has occurred on read.
.dccc	bccc	8d 13 07	sta $0713			sta     KNLEnd 						; # read is the number available
.dccf	bccf	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcd1	bcd1	8e 12 07	stx $0712			stx     KNLNext
.dcd4	bcd4					_KNLRBGetNextByte:
.dcd4	bcd4	bd d2 06	lda $06d2,x			lda     KNLReadBuffer,x 			; get the next data item
.dcd7	bcd7	ee 12 07	inc $0712			inc     KNLNext 					; and advance the index
.dcda	bcda	18		clc				clc 								; succeeded
.dcdb	bcdb					_KNLRBError:
.dcdb	bcdb	fa		plx				plx
.dcdc	bcdc	60		rts				rts
.dcdd	bcdd					Export_KNLReadBlock:
.dcdd	bcdd					KNLRBGetNextBlock:
.dcdd	bcdd	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcdf	bcdf	a9 40		lda #$40			lda     #KNLReadBufferLen 			; set bytes to read.
.dce1	bce1	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dce3	bce3	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dce6	bce6	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dce8	bce8	b0 2e		bcs $bd18			bcs     _KGNBExitFail               ; report as general error
.dcea	bcea					_KGRBEventLoop:
.dcea	bcea	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dced	bced	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcf0	bcf0	b0 f8		bcs $bcea			bcs     _KGRBEventLoop
.dcf2	bcf2	ad ca 06	lda $06ca			lda 	event.type 					; get event
.dcf5	bcf5	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcf7	bcf7	f0 0a		beq $bd03			beq     _KNLRBGetNextByte
.dcf9	bcf9	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcfb	bcfb	f0 1b		beq $bd18			beq 	_KGNBExitFail
.dcfd	bcfd	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcff	bcff	f0 17		beq $bd18			beq 	_KGNBExitFail
.dd01	bd01	80 e7		bra $bcea			bra 	_KGRBEventLoop
.dd03	bd03					_KNLRBGetNextByte:
.dd03	bd03	a9 d2		lda #$d2			lda     #<KNLReadBuffer 					; Set the target buffer
.dd05	bd05	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd07	bd07	a9 06		lda #$06			lda     #>KNLReadBuffer
.dd09	bd09	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd0b	bd0b	ad d0 06	lda $06d0			lda     event.file.data.read 		; Set the target length
.dd0e	bd0e	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd10	bd10	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd13	bd13	ad d0 06	lda $06d0			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd16	bd16	18		clc				clc
.dd17	bd17	60		rts				rts
.dd18	bd18					_KGNBExitFail:
.dd18	bd18	38		sec				sec
.dd19	bd19	60		rts				rts
.dd1a	bd1a					Export_KNLWriteBlock:
.dd1a	bd1a	da		phx				phx
.dd1b	bd1b	5a		phy				phy
.dd1c	bd1c	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd1e	bd1e	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd20	bd20	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd22	bd22	a5 37		lda $37				lda     zTemp0+1
.dd24	bd24	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd26	bd26	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd28	bd28	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd2b	bd2b	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd2d	bd2d	b0 21		bcs $bd50			bcs 	_KWBFailed
.dd2f	bd2f					_KNLWLoop:
.dd2f	bd2f	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd32	bd32	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd35	bd35	b0 f8		bcs $bd2f			bcs     _KNLWLoop
.dd37	bd37	ad ca 06	lda $06ca			lda     event.type 					; various errors.
.dd3a	bd3a	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd3c	bd3c	f0 12		beq $bd50			beq 	_KWBFailed
.dd3e	bd3e	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd40	bd40	f0 0e		beq $bd50			beq 	_KWBFailed
.dd42	bd42	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd44	bd44	f0 0a		beq $bd50			beq 	_KWBFailed
.dd46	bd46	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd48	bd48	d0 e5		bne $bd2f			bne 	_KNLWLoop
.dd4a	bd4a	18		clc				clc
.dd4b	bd4b	ad d0 06	lda $06d0			lda    event.file.wrote.wrote 		; get bytes written.
.dd4e	bd4e	80 01		bra $bd51			bra 	_KWBExit
.dd50	bd50					_KWBFailed:
.dd50	bd50	38		sec				sec
.dd51	bd51					_KWBExit:
.dd51	bd51	7a		ply				ply
.dd52	bd52	fa		plx				plx
.dd53	bd53	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
