
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 12 16:38:45 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_BY                               = $a6; $a6 BY
=$a7					KWD_CALL                             = $a7; $a7 CALL
=$a8					KWD_CIRCLE                           = $a8; $a8 CIRCLE
=$a9					KWD_CLEAR                            = $a9; $a9 CLEAR
=$aa					KWD_CLS                              = $aa; $aa CLS
=$ab					KWD_COLOR                            = $ab; $ab COLOR
=$ac					KWD_COLOUR                           = $ac; $ac COLOUR
=$ad					KWD_DATA                             = $ad; $ad DATA
=$ae					KWD_DIM                              = $ae; $ae DIM
=$af					KWD_DOWNTO                           = $af; $af DOWNTO
=$b0					KWD_ELSE                             = $b0; $b0 ELSE
=$b1					KWD_GFX                              = $b1; $b1 GFX
=$b2					KWD_GOSUB                            = $b2; $b2 GOSUB
=$b3					KWD_GOTO                             = $b3; $b3 GOTO
=$b4					KWD_HERE                             = $b4; $b4 HERE
=$b5					KWD_IMAGE                            = $b5; $b5 IMAGE
=$b6					KWD_LET                              = $b6; $b6 LET
=$b7					KWD_LINE                             = $b7; $b7 LINE
=$b8					KWD_LOCAL                            = $b8; $b8 LOCAL
=$b9					KWD_OUTLINE                          = $b9; $b9 OUTLINE
=$ba					KWD_PRINT                            = $ba; $ba PRINT
=$bb					KWD_READ                             = $bb; $bb READ
=$bc					KWD_RECT                             = $bc; $bc RECT
=$bd					KWD_REM                              = $bd; $bd REM
=$be					KWD_RETURN                           = $be; $be RETURN
=$bf					KWD_SOLID                            = $bf; $bf SOLID
=$c0					KWD_SPRITE                           = $c0; $c0 SPRITE
=$c1					KWD_TEXT                             = $c1; $c1 TEXT
=$c2					KWD_TO                               = $c2; $c2 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 4b b3	jsr $b34b			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 58 98	jsr $9858			jsr 	PrintStringXA
.8014	20 15 92	jsr $9215			jsr 	NewCommand 					; erase current program
.8017	20 dd a4	jsr $a4dd			jsr 	BackloadProgram
.801a	4c 90 93	jmp $9390			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1768."
>8065	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>8075	30 32 32 2e 20 42 75 69 6c 64 20 31 37 36 38 2e

;******  Return to file: ./common/aa.system/00start.asm

>8085	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8088					GXGraphicDraw:
.8088	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.808a	b0 06		bcs $8092			bcs 	_GDCoordinate
.808c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808e	84 37		sty $37				sty 	gxzTemp0+1
.8090	80 3d		bra $80cf			bra 	_GDExecuteA 				; and execute
.8092					_GDCoordinate:
.8092	48		pha				pha 								; save AXY
.8093	da		phx				phx
.8094	5a		phy				phy
.8095	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8097					_GDCopy1:
.8097	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.809a	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809d	ca		dex				dex
.809e	10 f7		bpl $8097			bpl 	_GDCopy1
.80a0	68		pla				pla 								; update Y
.80a1	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a4	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a7	68		pla				pla
.80a8	8d 29 06	sta $0629			sta 	gxCurrentX
.80ab	68		pla				pla 								; get A (command+X.1) back
.80ac	48		pha				pha
.80ad	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80af	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b2	f0 07		beq $80bb			beq 	_GDXOkay 					; check X range
.80b4	ad 29 06	lda $0629			lda 	gxCurrentX
.80b7	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b9	b0 1e		bcs $80d9			bcs 	_GDError
.80bb					_GDXOkay:
.80bb	ad 2b 06	lda $062b			lda 	gxCurrentY
.80be	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c1	b0 16		bcs $80d9			bcs 	_GDError
.80c3	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c5					_GDCopy2:
.80c5	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c8	9d 31 06	sta $0631,x			sta 	gxX0,x
.80cb	ca		dex				dex
.80cc	10 f7		bpl $80c5			bpl 	_GDCopy2
.80ce	68		pla				pla 								; get command back
.80cf					_GDExecuteA:
.80cf	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d1	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d3	b0 05		bcs $80da			bcs 	_GDError2
.80d5	aa		tax				tax
.80d6	7c df 80	jmp ($80df,x)			jmp 	(GRVectorTable,x)
.80d9					_GDError:
.80d9	68		pla				pla 								; throw command
.80da					_GDError2:
.80da	38		sec				sec
.80db	60		rts				rts
.80dc					GXMove:
.80dc	18		clc				clc
.80dd	60		rts				rts
.80de					GRUndefined:
>80de	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80df					GRVectorTable:
>80df	ae 82					.word	GXInitialise             ; $00 Initialise
>80e1	c5 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e3	0d 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e5	60 82					.word	GXClearBitmap            ; $03 Clear
>80e7	8b 84					.word	GXSetColourMode          ; $04 Colour
>80e9	4f 86					.word	GXFontHandler            ; $05 DrawFont
>80eb	97 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ed	ff 86					.word	GXSelect                 ; $07 SPRUSE
>80ef	34 87					.word	GXSelectImage            ; $08 SPRIMG
>80f1	de 80					.word	GRUndefined              ; $09
>80f3	de 80					.word	GRUndefined              ; $0a
>80f5	de 80					.word	GRUndefined              ; $0b
>80f7	de 80					.word	GRUndefined              ; $0c
>80f9	de 80					.word	GRUndefined              ; $0d
>80fb	de 80					.word	GRUndefined              ; $0e
>80fd	de 80					.word	GRUndefined              ; $0f
>80ff	dc 80					.word	GXMove                   ; $10 Move
>8101	59 83					.word	GXLine                   ; $11 Line
>8103	d4 84					.word	GXFrameRectangle         ; $12 FrameRect
>8105	d1 84					.word	GXFillRectangle          ; $13 FillRect
>8107	17 81					.word	GXFrameCircle            ; $14 FrameCircle
>8109	13 81					.word	GXFillCircle             ; $15 FillCircle
>810b	de 80					.word	GRUndefined              ; $16
>810d	de 80					.word	GRUndefined              ; $17
>810f	b9 84					.word	GXPlotPoint              ; $18 Plot
>8111	8b 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8113					GXFillCircle:
.8113	a9 ff		lda #$ff			lda 	#255
.8115	80 02		bra $8119			bra 	GXCircle
.8117					GXFrameCircle:
.8117	a9 00		lda #$00			lda 	#0
.8119					GXCircle:
.8119	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811c	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811f	f0 26		beq $8147			beq 	_GXCFail
.8121	20 8b 88	jsr $888b			jsr 	GXSortXY 					; topleft/bottomright
.8124	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.8127	20 19 82	jsr $8219			jsr 	GXCircleSetup 				; set up for drawing
.812a	9c 4d 06	stz $064d			stz 	gxYChanged
.812d					_GXCircleDraw:
.812d	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.8130	cd 4b 06	cmp $064b			cmp 	gYCentre
.8133	90 0a		bcc $813f			bcc 	_GXCircleContinue
.8135	d0 03		bne $813a			bne 	_GXNoLast
.8137	20 4c 81	jsr $814c			jsr 	GXPlot1
.813a					_GXNoLast:
.813a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; close the bitmap
.813d	18		clc				clc
.813e	60		rts				rts
.813f					_GXCircleContinue:
.813f	20 49 81	jsr $8149			jsr 	GXPlot2 					; draw it
.8142	20 c6 81	jsr $81c6			jsr 	GXCircleMove 				; adjust the coordinates
.8145	80 e6		bra $812d			bra 	_GXCircleDraw
.8147					_GXCFail:
.8147	38		sec				sec
.8148	60		rts				rts
.8149					GXPlot2:
.8149	20 4c 81	jsr $814c			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814c					GXPlot1:
.814c	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814f	f0 03		beq $8154			beq 	_GXPlot1Only
.8151	20 70 81	jsr $8170			jsr 	GXPlot0 						; plot and negate
.8154					_GXPlot1Only:
.8154	20 70 81	jsr $8170			jsr 	GXPlot0 						; twice, undoing negation
.8157	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.815a	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815d	8d 4b 06	sta $064b			sta 	gYCentre
.8160	8e 4a 06	stx $064a			stx 	gXCentre
.8163	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8166	a9 ff		lda #$ff			lda 	#$FF
.8168	8d 4d 06	sta $064d			sta 	gxYChanged
.816b	60		rts				rts
.816c	20 70 81	jsr $8170			jsr 	GXPlot0 						; do once
.816f	60		rts				rts
.8170	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8173	f0 05		beq $817a			beq 	_GXPlot0Always
.8175	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8178	f0 2d		beq $81a7			beq 	GXPlot0Exit
.817a					_GXPlot0Always:
.817a	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817c	ad 4b 06	lda $064b			lda 	gYCentre
.817f	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.8182	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8184	ad 4a 06	lda $064a			lda 	gXCentre
.8187	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.818a	48		pha				pha 									; save last offset X
.818b	20 de 87	jsr $87de			jsr 	GXPositionCalc 					; calculate position/offset.
.818e	68		pla				pla
.818f	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8190	85 36		sta $36				sta 	gxzTemp0
.8192	64 37		stz $37				stz 	gxzTemp0+1
.8194	26 37		rol $37				rol 	gxzTemp0+1
.8196	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8199	69 80		adc #$80			adc 	#128
.819b	20 24 85	jsr $8524			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819e	38		sec				sec 									; GY = -GY
.819f	a9 00		lda #$00			lda 	#0
.81a1	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a4	8d 4b 06	sta $064b			sta 	gYCentre
.81a7					GXPlot0Exit:
.81a7	60		rts				rts
.81a8					GXSubCopy:
.81a8	85 36		sta $36				sta 	gxzTemp0
.81aa	64 37		stz $37				stz 	gxzTemp0+1
.81ac	29 80		and #$80			and 	#$80
.81ae	f0 02		beq $81b2			beq 	_GXNoSx
.81b0	c6 37		dec $37				dec 	gxzTemp0+1
.81b2					_GXNoSx:
.81b2	38		sec				sec
.81b3	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b6	e5 36		sbc $36				sbc 	gxzTemp0
.81b8	9d 31 06	sta $0631,x			sta 	gXX0,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c0	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c3	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c5	60		rts				rts
.81c6					GXCircleMove:
.81c6	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c9	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81cb	10 0d		bpl $81da			bpl 	_GXEMPositive
.81cd	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81d0	ad 4a 06	lda $064a			lda 	gXCentre
.81d3	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d6	a9 06		lda #$06			lda 	#6  						; and add 6
.81d8	80 15		bra $81ef			bra 	_GXEMAddD
.81da					_GXEMPositive:
.81da	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dd	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81e0	38		sec				sec 								; calculate X-Y
.81e1	ad 4a 06	lda $064a			lda 	gXCentre
.81e4	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e7	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81ea	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ec	ce 4d 06	dec $064d			dec 	gxYChanged
.81ef					_GXEMAddD:
.81ef	18		clc				clc
.81f0	65 38		adc $38				adc 	gxzTemp1
.81f2	85 38		sta $38				sta 	gxzTemp1
.81f4	90 02		bcc $81f8			bcc 	_GXEMNoCarry
.81f6	e6 39		inc $39				inc 	gxzTemp1+1
.81f8					_GXEMNoCarry:
.81f8	60		rts				rts
.81f9					_GXAdd4TimesToD:
.81f9	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fb	29 80		and #$80			and 	#$80
.81fd	f0 02		beq $8201			beq 	_GXA4Unsigned
.81ff	a9 ff		lda #$ff			lda 	#$FF
.8201					_GXA4Unsigned:
.8201	85 37		sta $37				sta 	gxzTemp0+1
.8203	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8205	26 37		rol $37				rol 	gxzTemp0+1
.8207	06 36		asl $36				asl 	gxzTemp0
.8209	26 37		rol $37				rol 	gxzTemp0+1
.820b	18		clc				clc 								; add
.820c	a5 36		lda $36				lda		gxzTemp0
.820e	65 38		adc $38				adc 	gxzTemp1
.8210	85 38		sta $38				sta 	gxzTemp1
.8212	a5 37		lda $37				lda		gxzTemp0+1
.8214	65 39		adc $39				adc 	gxzTemp1+1
.8216	85 39		sta $39				sta 	gxzTemp1+1
.8218	60		rts				rts
.8219					GXCircleSetup:
.8219	38		sec				sec
.821a	ad 37 06	lda $0637			lda 	gxY1
.821d	ed 33 06	sbc $0633			sbc 	gxY0
.8220	4a		lsr a				lsr 	a
.8221	8d 49 06	sta $0649			sta 	gxRadius
.8224	a2 00		ldx #$00			ldx 	#0
.8226	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.8229	a2 02		ldx #$02			ldx 	#2
.822b	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.822e	9c 4a 06	stz $064a			stz 	gXCentre
.8231	ad 49 06	lda $0649			lda 	gxRadius
.8234	8d 4b 06	sta $064b			sta 	gYCentre
.8237	0a		asl a				asl 	a 							; R x 2
.8238	85 36		sta $36				sta 	gxzTemp0
.823a	38		sec				sec
.823b	a9 03		lda #$03			lda 	#3
.823d	e5 36		sbc $36				sbc 	gxzTemp0
.823f	85 38		sta $38				sta 	gxzTemp1
.8241	a9 00		lda #$00			lda 	#0
.8243	e9 00		sbc #$00			sbc 	#0
.8245	85 39		sta $39				sta 	gxzTemp1+1
.8247	60		rts				rts
.8248					_GXCalculateCentre:
.8248	38		sec				sec
.8249	bd 35 06	lda $0635,x			lda 	gxX1,x
.824c	7d 31 06	adc $0631,x			adc 	gXX0,x
.824f	9d 35 06	sta $0635,x			sta 	gXX1,x
.8252	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8255	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8258	4a		lsr a				lsr 	a
.8259	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825c	7e 35 06	ror $0635,x			ror 	gXX1,x
.825f	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8260					GXClearBitmap:
.8260	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8263	f0 24		beq $8289			beq 	_GXCBFail
.8265	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start access
.8268	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.826a	ad 3d 06	lda $063d			lda 	gxHeight
.826d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8271					_GXCalcLastPage:
.8271	98		tya				tya 								; add to base page
.8272	18		clc				clc
.8273	6d 3b 06	adc $063b			adc 	gxBasePage
.8276	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8278					_GXClearAll:
.8278	20 8b 82	jsr $828b			jsr 	_GXClearBlock 				; clear 8k block
.827b	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827d	a5 0b		lda $0b				lda 	GXEditSlot
.827f	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8282	b0 f4		bcs $8278			bcs 	_GXClearAll
.8284	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap	 			; stop access
.8287	18		clc				clc
.8288	60		rts				rts
.8289					_GXCBFail:
.8289	38		sec				sec
.828a	60		rts				rts
.828b					_GXClearBlock:
.828b	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828d	85 38		sta $38				sta 	0+gxzTemp1
.828f	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8291	85 39		sta $39				sta 	1+gxzTemp1
.8293					_GXCB0:
.8293	a5 36		lda $36				lda 	gxzTemp0
.8295	a0 00		ldy #$00			ldy 	#0
.8297					_GXCB1:
.8297	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8299	c8		iny				iny
.829a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829c	c8		iny				iny
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	d0 f2		bne $8297			bne 	_GXCB1
.82a5	e6 39		inc $39				inc 	gxzTemp1+1
.82a7	a5 39		lda $39				lda 	gxzTemp1+1
.82a9	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82ab	d0 e6		bne $8293			bne 	_GXCB0
.82ad	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ae					GXInitialise:
.82ae	64 01		stz $01				stz 	1
.82b0	a9 01		lda #$01			lda 	#1
.82b2	8d 00 d0	sta $d000			sta 	$D000
.82b5	18		clc				clc
.82b6	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b9	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bc	a2 0f		ldx #$0f			ldx 	#15
.82be					_GXIClear:
.82be	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c1	ca		dex				dex
.82c2	10 fa		bpl $82be			bpl 	_GXIClear
.82c4	60		rts				rts
.82c5					GXControlBitmap:
.82c5	64 01		stz $01				stz 	1
.82c7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c9	29 01		and #$01			and 	#1 							; set bitmap flag
.82cb	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82ce	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82cf	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d6	90 02		bcc $82da			bcc 	_CBNotOn
.82d8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82da					_CBNotOn:
.82da	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dd	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82df	29 07		and #$07			and 	#7
.82e1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e6	d0 02		bne $82ea			bne 	_CBNotDefault
.82e8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82ea					_CBNotDefault:
.82ea	8d 3b 06	sta $063b			sta 	gxBasePage
.82ed	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f0	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f2	8d 03 d1	sta $d103			sta 	$D103
.82f5	a5 36		lda $36				lda 	gxzTemp0
.82f7	8d 02 d1	sta $d102			sta 	$D102
.82fa	9c 01 d1	stz $d101			stz 	$D101
.82fd	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82ff	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8302	29 01		and #$01			and 	#1
.8304	f0 02		beq $8308			beq 	_CBHaveHeight
.8306	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8308					_CBHaveHeight
.8308	8e 3d 06	stx $063d			stx 	gxHeight
.830b	18		clc				clc
.830c	60		rts				rts
.830d					GXControlSprite:
.830d	64 01		stz $01				stz 	1
.830f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8311	29 01		and #$01			and 	#1 							; set sprites flag
.8313	8d 39 06	sta $0639			sta 	gxSpritesOn
.8316	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8317	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.831a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831e	90 02		bcc $8322			bcc 	_CSNotOn
.8320	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8322					_CSNotOn:
.8322	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8325	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8327	d0 02		bne $832b			bne 	_CSNotDefault
.8329	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832b					_CSNotDefault:
.832b	8d 3c 06	sta $063c			sta 	gxSpritePage
.832e	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8331	a5 36		lda $36				lda 	zTemp0
.8333	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8336	a5 37		lda $37				lda 	zTemp0+1
.8338	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833d					_CSClear:
.833d	9e 00 d9	stz $d900,x			stz 	$D900,x
.8340	9e 00 da	stz $da00,x			stz 	$DA00,x
.8343	ca		dex				dex
.8344	d0 f7		bne $833d			bne 	_CSClear
.8346	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8349	18		clc				clc
.834a	60		rts				rts
.834b					GXCalculateBaseAddress:
.834b	85 36		sta $36				sta 	gxzTemp0
.834d	64 37		stz $37				stz 	gxzTemp0+1
.834f	a9 05		lda #$05			lda 	#5
.8351					_GXShift:
.8351	06 36		asl $36				asl 	gxzTemp0
.8353	26 37		rol $37				rol 	gxzTemp0+1
.8355	3a		dec a				dec		a
.8356	d0 f9		bne $8351			bne 	_GXShift
.8358	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8359					GXLine:
.8359	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835c	f0 28		beq $8386			beq 	_GXLFail
.835e	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap
.8361	20 a9 88	jsr $88a9			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8364	20 2c 84	jsr $842c			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8367	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; calculate position/offset.
.836a					_GXDrawLoop:
.836a	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836f	2d 41 06	and $0641			and 	gxANDValue
.8372	4d 40 06	eor $0640			eor 	gxEORValue
.8375	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8377	20 88 83	jsr $8388			jsr 	GXLineIsComplete 			; is the line complete ?
.837a	f0 05		beq $8381			beq 	_GXLExit
.837c	20 a3 83	jsr $83a3			jsr 	GXLineAdvance 				; code as per advance method
.837f	80 e9		bra $836a			bra 	_GXDrawLoop
.8381					_GXLExit:
.8381	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.8384	18		clc				clc
.8385	60		rts				rts
.8386					_GXLFail:
.8386	38		sec				sec
.8387	60		rts				rts
.8388					GXLineIsComplete:
.8388	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838b	d0 0f		bne $839c			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838d	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8390	4d 35 06	eor $0635			eor 	GXX1
.8393	d0 06		bne $839b			bne 	_GXLICExit
.8395	ad 32 06	lda $0632			lda 	GXX0+1
.8398	4d 36 06	eor $0636			eor 	GXX1+1
.839b					_GXLICExit:
.839b	60		rts				rts
.839c					_GXLICCompareY:
.839c	ad 37 06	lda $0637			lda 	GXY1
.839f	4d 33 06	eor $0633			eor 	GXY0
.83a2	60		rts				rts
.83a3					GXLineAdvance:
.83a3	18		clc				clc 								; add adjust to position
.83a4	ad 52 06	lda $0652			lda 	GXPosition
.83a7	6d 53 06	adc $0653			adc 	GXAdjust
.83aa	8d 52 06	sta $0652			sta 	GXPosition
.83ad	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83b0	b0 05		bcs $83b7			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b2	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b5	90 0a		bcc $83c1			bcc 	_GXLANoExtra
.83b7					_GXLAOverflow:
.83b7	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83ba	38		sec				sec 								; subtract total and write back
.83bb	ed 54 06	sbc $0654			sbc 	GXTotal
.83be	8d 52 06	sta $0652			sta 	GXPosition
.83c1					_GXLANoExtra:
.83c1	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c4	f0 0d		beq $83d3			beq 	_GXDXLarger
.83c6	20 25 84	jsr $8425			jsr 	GXIncrementY
.83c9	ad 55 06	lda $0655			lda 	GXAddSelect
.83cc	f0 10		beq $83de			beq 	_GXLAExit
.83ce	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d1	80 0b		bra $83de			bra 	_GXLAExit
.83d3					_GXDXLarger:
.83d3	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d6	ad 55 06	lda $0655			lda 	GXAddSelect
.83d9	f0 03		beq $83de			beq 	_GXLAExit
.83db	20 25 84	jsr $8425			jsr 	GXIncrementY
.83de					_GXLAExit:
.83de	60		rts				rts
.83df					GXAdjustX:
.83df	ad 51 06	lda $0651			lda 	GXDXNegative
.83e2	10 25		bpl $8409			bpl 	_GXAXRight
.83e4	ad 31 06	lda $0631			lda 	GXX0
.83e7	d0 03		bne $83ec			bne 	_GXAXNoBorrow
.83e9	ce 32 06	dec $0632			dec 	GXX0+1
.83ec					_GXAXNoBorrow:
.83ec	ce 31 06	dec $0631			dec 	GXX0
.83ef	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f2	ad 44 06	lda $0644			lda 	gsOffset
.83f5	c9 ff		cmp #$ff			cmp 	#$FF
.83f7	d0 0f		bne $8408			bne 	_GXAYExit 					; underflow
.83f9	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fb	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fd	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83ff	b0 07		bcs $8408			bcs 	_GXAYExit
.8401	18		clc				clc
.8402	69 20		adc #$20			adc 	#$20 						; fix up
.8404	85 3d		sta $3d				sta 	gxzScreen+1
.8406	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8408					_GXAYExit:
.8408	60		rts				rts
.8409					_GXAXRight:
.8409	ee 31 06	inc $0631			inc 	GXX0
.840c	d0 03		bne $8411			bne 	_GXAXNoCarry
.840e	ee 32 06	inc $0632			inc 	GXX0+1
.8411					_GXAXNoCarry:
.8411	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8414	d0 0e		bne $8424			bne 	_GXAXExit 					; if not overflowed, exit.
.8416	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8418	a5 3d		lda $3d				lda 	gxzScreen+1
.841a	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841c	90 06		bcc $8424			bcc 	_GXAXExit
.841e	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8420	85 3d		sta $3d				sta 	gxzScreen+1
.8422	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8424					_GXAXExit:
.8424	60		rts				rts
.8425					GXIncrementY:
.8425	ee 33 06	inc $0633			inc 	GXY0
.8428	20 34 88	jsr $8834			jsr 	GXMovePositionDown
.842b	60		rts				rts
.842c					GXLineSetup:
.842c	ad 37 06	lda $0637			lda 	GXY1
.842f	38		sec				sec
.8430	ed 33 06	sbc $0633			sbc 	GXY0
.8433	4a		lsr a				lsr 	a
.8434	8d 4f 06	sta $064f			sta 	GXDiffY
.8437	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.843a	38		sec				sec
.843b	ad 35 06	lda $0635			lda 	GXX1
.843e	ed 31 06	sbc $0631			sbc 	GXX0
.8441	8d 4e 06	sta $064e			sta 	GXDiffX
.8444	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8447	ed 32 06	sbc $0632			sbc 	GXX0+1
.844a	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844b	6e 4e 06	ror $064e			ror 	GXDiffX
.844e	0a		asl a				asl 	a
.844f	10 0c		bpl $845d			bpl 	_GDXNotNegative
.8451	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8453	38		sec				sec
.8454	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8457	8d 4e 06	sta $064e			sta 	GXDiffX
.845a	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845d					_GDXNotNegative:
.845d	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.8460	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8463	8d 53 06	sta $0653			sta 	GXAdjust
.8466	ad 4e 06	lda $064e			lda 	GXDiffX
.8469	8d 54 06	sta $0654			sta 	GXTotal
.846c	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846f	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8472	90 0f		bcc $8483			bcc 	_GDXNotLarger
.8474	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8477	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.847a	8d 53 06	sta $0653			sta 	GXAdjust
.847d	ad 4f 06	lda $064f			lda 	GXDiffY
.8480	8d 54 06	sta $0654			sta 	GXTotal
.8483					_GDXNotLarger:
.8483	ad 54 06	lda $0654			lda 	GXTotal
.8486	4a		lsr a				lsr 	a
.8487	8d 52 06	sta $0652			sta 	GXPosition
.848a	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848b					GXSetColourMode:
.848b	a6 36		ldx $36				ldx 	gxzTemp0
.848d	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.8490	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8492	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8495	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8497	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.849a	ae 3f 06	ldx $063f			ldx 	gxColour
.849d	8e 40 06	stx $0640			stx 	gxEORValue
.84a0	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a2	90 03		bcc $84a7			bcc 	_GXSDCNotAndColour
.84a4	8e 41 06	stx $0641			stx 	gxANDValue
.84a7					_GXSDCNotAndColour:
.84a7	d0 03		bne $84ac			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a9	9c 40 06	stz $0640			stz 	gxEORValue
.84ac					_GXSDCNotAnd:
.84ac	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ad	90 08		bcc $84b7			bcc 	_GXSDCNoFlip
.84af	ad 41 06	lda $0641			lda	 	gxANDValue
.84b2	49 ff		eor #$ff			eor 	#$FF
.84b4	8d 41 06	sta $0641			sta 	gxANDValue
.84b7					_GXSDCNoFlip:
.84b7	18		clc				clc
.84b8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b9					GXPlotPoint:
.84b9	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.84bc	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84bf	ac 44 06	ldy $0644			ldy 	gsOffset
.84c2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c4	2d 41 06	and $0641			and 	gxANDValue
.84c7	4d 40 06	eor $0640			eor 	gxEORValue
.84ca	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cc	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; stop drawing and exit
.84cf	18		clc				clc
.84d0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d1					GXFillRectangle:
.84d1	38		sec				sec
.84d2	80 01		bra $84d5			bra 	GXRectangle
.84d4					GXFrameRectangle:
.84d4	18		clc				clc
.84d5					GXRectangle:
.84d5	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d8	f0 35		beq $850f			beq 	_GXRFail
.84da	08		php				php 								; save Fill flag (CS)
.84db	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.84de	20 8b 88	jsr $888b			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e1	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e4	38		sec				sec 								; sec = Draw line
.84e5	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e8	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84eb	cd 37 06	cmp $0637			cmp 	gxY1
.84ee	f0 19		beq $8509			beq 	_GXRectangleExit
.84f0					_GXRectLoop:
.84f0	20 34 88	jsr $8834			jsr 	GXMovePositionDown 			; down one.
.84f3	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f6	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f9	cd 37 06	cmp $0637			cmp 	gXY1
.84fc	f0 07		beq $8505			beq 	_GXLastLine
.84fe	28		plp				plp 								; get flag back
.84ff	08		php				php
.8500	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8503	80 eb		bra $84f0			bra 	_GXRectLoop
.8505					_GXLastLine:
.8505	38		sec				sec
.8506	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0
.8509					_GXRectangleExit:
.8509	68		pla				pla 								; throw fill flag.
.850a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; stop drawing and exit
.850d	18		clc				clc
.850e	60		rts				rts
.850f					_GXRFail:
.850f	38		sec				sec
.8510	60		rts				rts
.8511					GXDrawLineX1X0:
.8511	08		php				php 								; save solid/either-end
.8512	38		sec				sec
.8513	ad 35 06	lda $0635			lda		gXX1
.8516	ed 31 06	sbc $0631			sbc 	gXX0
.8519	85 36		sta $36				sta 	gxzTemp0
.851b	ad 36 06	lda $0636			lda 	gXX1+1
.851e	ed 32 06	sbc $0632			sbc 	gXX0+1
.8521	85 37		sta $37				sta 	gxzTemp0+1
.8523	28		plp				plp
.8524					GXDrawLineTemp0:
.8524	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8526	48		pha				pha
.8527	a5 3d		lda $3d				lda 	gxzScreen+1
.8529	48		pha				pha
.852a	ad 44 06	lda $0644			lda 	gsOffset
.852d	48		pha				pha
.852e	a5 0b		lda $0b				lda 	GXEditSlot
.8530	48		pha				pha
.8531	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8534	90 1e		bcc $8554			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8536					_GXDLTLine:
.8536	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8538	2d 41 06	and $0641			and 	gxANDValue
.853b	4d 40 06	eor $0640			eor 	gxEORValue
.853e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8540	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8542	d0 04		bne $8548			bne 	_GXDLTNoBorrow
.8544	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8546	30 2e		bmi $8576			bmi 	_GXDLTExit
.8548					_GXDLTNoBorrow:
.8548	c6 36		dec $36				dec 	gxzTemp0
.854a	c8		iny				iny 								; next slot.
.854b	d0 e9		bne $8536			bne 	_GXDLTLine
.854d	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854f	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.8552	80 e2		bra $8536			bra 	_GXDLTLine
.8554					_GXDLTEndPoints:
.8554	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8556	2d 41 06	and $0641			and 	gxANDValue
.8559	4d 40 06	eor $0640			eor 	gxEORValue
.855c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855e	98		tya				tya 								; advance to right side
.855f	18		clc				clc
.8560	65 36		adc $36				adc 	gxzTemp0
.8562	a8		tay				tay
.8563	a5 3d		lda $3d				lda 	gxzScreen+1
.8565	65 37		adc $37				adc 	gxzTemp0+1
.8567	85 3d		sta $3d				sta 	gxzScreen+1
.8569	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap 			; fix up.
.856c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856e	2d 41 06	and $0641			and 	gxANDValue
.8571	4d 40 06	eor $0640			eor 	gxEORValue
.8574	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8576					_GXDLTExit:
.8576	68		pla				pla
.8577	85 0b		sta $0b				sta 	GXEditSlot
.8579	68		pla				pla
.857a	8d 44 06	sta $0644			sta 	gsOffset
.857d	68		pla				pla
.857e	85 3d		sta $3d				sta 	gxzScreen+1
.8580	68		pla				pla
.8581	85 3c		sta $3c				sta 	gxzScreen
.8583	60		rts				rts
.8584					GXDLTCheckWrap:
.8584	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8586	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8588	90 06		bcc $8590			bcc 	_GXDLTCWExit
.858a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858c	85 3d		sta $3d				sta 	gxzScreen+1
.858e	e6 0b		inc $0b				inc 	GXEditSlot
.8590					_GXDLTCWExit:
.8590	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8591					GXDrawGraphicElement:
.8591	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8594	3a		dec a				dec 	a
.8595	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8598	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859b	9c 5c 06	stz $065c			stz 	gxHFlip
.859e	2c 5d 06	bit $065d			bit 	gxUseMode
.85a1	10 03		bpl $85a6			bpl 	_GXNotVertical
.85a3	8d 5b 06	sta $065b			sta 	gxVFlip
.85a6					_GXNotVertical:
.85a6	50 03		bvc $85ab			bvc 	_GXNotHorizontal
.85a8	8d 5c 06	sta $065c			sta 	gxHFlip
.85ab					_GXNotHorizontal:
.85ab	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ae	f0 5f		beq $860f			beq 	_GXSLFail
.85b0	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b3	48		pha				pha
.85b4	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b7	8e 58 06	stx $0658			stx 	gxAcquireVector
.85ba	20 c0 87	jsr $87c0			jsr 	gxOpenBitmap 				; open the bitmap.
.85bd	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	4a		lsr a				lsr 	a
.85c3	29 07		and #$07			and		#7
.85c5	1a		inc a				inc 	a
.85c6	8d 5a 06	sta $065a			sta 	gxScale
.85c9	64 38		stz $38				stz 	gxzTemp1						; start first line
.85cb					_GXGELoop:
.85cb	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cd	4d 5b 06	eor $065b			eor 	gxVFlip
.85d0	aa		tax				tax 								; get the Xth line.
.85d1	20 11 86	jsr $8611			jsr 	_GXCallAcquire 				; get that data.
.85d4	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d7	85 39		sta $39				sta 	gxzTemp1+1
.85d9					_GXGELoop2:
.85d9	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85dc	cd 3d 06	cmp $063d			cmp 	gxHeight
.85df	b0 10		bcs $85f1			bcs 	_GXDGEExit
.85e1	20 14 86	jsr $8614			jsr 	GXRenderOneLine 			; render line
.85e4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e6	d0 f1		bne $85d9			bne 	_GXGELoop2
.85e8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85ea	a5 38		lda $38				lda 	gxzTemp1
.85ec	cd 56 06	cmp $0656			cmp 	gxSize
.85ef	d0 da		bne $85cb			bne 	_GXGELoop
.85f1					_GXDGEExit:
.85f1	68		pla				pla 								; restore Y for next time
.85f2	8d 33 06	sta $0633			sta 	gxY0
.85f5	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f8					_GXShiftLeft:
.85f8	18		clc				clc
.85f9	ad 56 06	lda $0656			lda 	gxSize
.85fc	6d 31 06	adc $0631			adc 	gxX0
.85ff	8d 31 06	sta $0631			sta 	gxX0
.8602	90 03		bcc $8607			bcc 	_GXSLNoCarry
.8604	ee 32 06	inc $0632			inc 	gxX0+1
.8607					_GXSLNoCarry:
.8607	ca		dex				dex
.8608	d0 ee		bne $85f8			bne 	_GXShiftLeft
.860a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.860d	18		clc				clc
.860e	60		rts				rts
.860f					_GXSLFail:
.860f	38		sec				sec
.8610	60		rts				rts
.8611					_GXCallAcquire:
.8611	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8614					GXRenderOneLine:
.8614	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; calculate position/offset.
.8617	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.861a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861c					_GXROLLoop1:
.861c	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861f	85 3b		sta $3b				sta 	gxzTemp2+1
.8621					_GXROLLoop2:
.8621	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8623	4d 5c 06	eor $065c			eor 	gxHFlip
.8626	aa		tax				tax 								; read from the pixel buffer
.8627	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.862a	f0 0a		beq $8636			beq 	_GXZeroPixel 				; don't draw if zero.
.862c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.862e	2d 41 06	and $0641			and 	gxANDValue
.8631	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8634	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8636					_GXZeroPixel:
.8636	c8		iny				iny 								; advance pointer
.8637	d0 05		bne $863e			bne 	_GXNoShift
.8639	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.863b	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.863e					_GXNoShift:
.863e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8640	d0 df		bne $8621			bne 	_GXROLLoop2
.8642	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8644	a5 3a		lda $3a				lda 	gxzTemp2
.8646	cd 56 06	cmp $0656			cmp 	gxSize
.8649	d0 d1		bne $861c			bne 	_GXROLLoop1
.864b	ee 33 06	inc $0633			inc 	gxY0
.864e	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.864f					GXFontHandler:
.864f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8651	4d 3e 06	eor $063e			eor 	gxMode
.8654	8d 5d 06	sta $065d			sta 	gxUseMode
.8657	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8659	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.865b	26 37		rol $37				rol	 	gxzTemp0+1
.865d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.865f	26 37		rol $37				rol	 	gxzTemp0+1
.8661	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8663	26 37		rol $37				rol	 	gxzTemp0+1
.8665	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8667	09 c0		ora #$c0			ora 	#$C0
.8669	85 37		sta $37				sta 	gxzTemp0+1
.866b	a9 08		lda #$08			lda 	#8 							; size 8x8
.866d	a2 75		ldx #$75			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.866f	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8671	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.8674	60		rts				rts
.8675					GXGetGraphicDataFont:
.8675	8a		txa				txa 								; X->Y
.8676	a8		tay				tay
.8677	a6 01		ldx $01				ldx 	1 							; preserve old value
.8679	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.867b	85 01		sta $01				sta 	1
.867d	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.867f	86 01		stx $01				stx 	1 							; put old value back.
.8681	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8683					_GXExpand:
.8683	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8686	0a		asl a				asl 	a 							; shift bit 7 into C
.8687	90 08		bcc $8691			bcc 	_GXNoPixel
.8689	48		pha				pha 								; if set, set pixel buffer to current colour.
.868a	ad 3f 06	lda $063f			lda 	gxColour
.868d	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8690	68		pla				pla
.8691					_GXNoPixel:
.8691	e8		inx				inx 								; do the whole byte.
.8692	e0 08		cpx #$08			cpx 	#8
.8694	d0 ed		bne $8683			bne 	_GXExpand
.8696	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8697					GXSpriteHandler:
.8697	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8699	4d 3e 06	eor $063e			eor 	gxMode
.869c	8d 5d 06	sta $065d			sta 	gxUseMode
.869f	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a1	da		phx				phx
.86a2	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; can access sprite information
.86a5	68		pla				pla
.86a6	20 4f 88	jsr $884f			jsr 	GXFindSprite 				; get the sprite address
.86a9	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.86ac	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86af	a2 b7		ldx #$b7			ldx 	#GXSpriteAcquire & $FF
.86b1	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86b3	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.86b6	60		rts				rts
.86b7					GXSpriteAcquire:
.86b7	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86ba	85 0b		sta $0b				sta 	GXEditSlot
.86bc	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86be	a9 00		lda #$00			lda 	#0
.86c0	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86c3					_GXTimesRowNumber:
.86c3	18		clc				clc
.86c4	65 36		adc $36				adc 	zTemp0
.86c6	ca		dex				dex
.86c7	10 fa		bpl $86c3			bpl 	_GXTimesRowNumber
.86c9	64 37		stz $37				stz 	gxzTemp0+1
.86cb	0a		asl a				asl 	a 							; row x 2,4,6,8
.86cc	26 37		rol $37				rol 	gxzTemp0+1
.86ce	0a		asl a				asl 	a 							; row x 4,8,12,16
.86cf	26 37		rol $37				rol 	gxzTemp0+1
.86d1	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d2	26 37		rol $37				rol 	gxzTemp0+1
.86d4	85 36		sta $36				sta 	gxzTemp0
.86d6	18		clc				clc 								; add base address.
.86d7	a5 36		lda $36				lda 	gxzTemp0
.86d9	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86dc	85 36		sta $36				sta 	gxzTemp0
.86de	a5 37		lda $37				lda 	gxzTemp0+1
.86e0	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86e3					_GXSAFindPage:
.86e3	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86e5	90 06		bcc $86ed			bcc 	_GXSAFoundPage
.86e7	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86e9	e6 0b		inc $0b				inc 	GXEditSlot
.86eb	80 f6		bra $86e3			bra 	_GXSAFindPage
.86ed					_GXSAFoundPage:
.86ed	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ef	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f1	a0 00		ldy #$00			ldy 	#0
.86f3					_GXSACopyLoop:
.86f3	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86f5	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86f8	c8		iny				iny
.86f9	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86fc	d0 f5		bne $86f3			bne 	_GXSACopyLoop
.86fe	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86ff					GXSelect:
.86ff	ad 39 06	lda $0639			lda 	gxSpritesOn
.8702	f0 2e		beq $8732			beq 	_GXSFail
.8704	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8706	c9 40		cmp #$40			cmp 	#64
.8708	b0 28		bcs $8732			bcs 	_GXSFail
.870a	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.870c	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.870e	06 36		asl $36				asl 	gxzTemp0
.8710	06 36		asl $36				asl 	gxzTemp0
.8712	06 36		asl $36				asl 	gxzTemp0
.8714	2a		rol a				rol 	a
.8715	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8717	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.871a	85 37		sta $37				sta 	gxzTemp0+1
.871c	a5 36		lda $36				lda 	gxzTemp0
.871e	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8721	98		tya				tya 								; control value
.8722	29 01		and #$01			and 	#1
.8724	85 38		sta $38				sta 	gxzTemp1 					; save it handily.
.8726	64 01		stz $01				stz 	1 							; access sprite control.
.8728	b2 36		lda ($36)			lda 	(gxzTemp0) 					; update enable bit only.
.872a	29 fe		and #$fe			and 	#$FE
.872c	05 38		ora $38				ora 	gxzTemp1
.872e	92 36		sta ($36)			sta 	(gxzTemp0) 					; write to control register
.8730	18		clc				clc
.8731	60		rts				rts
.8732					_GXSFail:
.8732	38		sec				sec
.8733	60		rts				rts
.8734					GXSelectImage:
.8734	ad 39 06	lda $0639			lda 	gxSpritesOn
.8737	f0 50		beq $8789			beq 	_GXSIFail
.8739	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.873c	f0 4b		beq $8789			beq 	_GXSIFail
.873e	64 01		stz $01				stz 	1
.8740	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8742	48		pha				pha
.8743	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap
.8746	68		pla				pla
.8747	20 4f 88	jsr $884f			jsr 	GXFindSprite
.874a	a0 01		ldy #$01			ldy 	#1
.874c	ad 45 06	lda $0645			lda 	GSCurrentSprite
.874f	85 36		sta $36				sta 	gxzTemp0
.8751	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8754	85 37		sta $37				sta 	gxzTemp0+1
.8756	ad 61 06	lda $0661			lda 	GXSpriteOffset
.8759	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.875b	18		clc				clc
.875c	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.875f	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8762	c8		iny				iny
.8763	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8765	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.8768	69 00		adc #$00			adc 	#0
.876a	c8		iny				iny
.876b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.876d	b2 36		lda ($36)			lda 	(gxzTemp0)					; get LSB into gxzTemp1
.876f	29 01		and #$01			and 	#1
.8771	85 38		sta $38				sta 	gxzTemp1
.8773	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8776	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8778	2a		rol a				rol 	a 							; x 2
.8779	0a		asl a				asl 	a 							; x 4
.877a	0a		asl a				asl 	a 							; x 8
.877b	0a		asl a				asl 	a 							; x 16
.877c	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.877f	0a		asl a				asl 	a 							; 1 shift
.8780	05 38		ora $38				ora 	gxzTemp1 					; Or in the enable bit
.8782	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8784	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.8787	18		clc				clc
.8788	60		rts				rts
.8789					_GXSIFail:
.8789	38		sec				sec
.878a	60		rts				rts
.878b					GXMoveSprite:
.878b	ad 39 06	lda $0639			lda 	gxSpritesOn
.878e	f0 2e		beq $87be			beq 	_GXSIFail
.8790	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8793	f0 29		beq $87be			beq 	_GXSIFail
.8795	85 37		sta $37				sta 	gxzTemp0+1
.8797	a0 04		ldy #$04			ldy 	#4
.8799	ad 45 06	lda $0645			lda 	GSCurrentSprite
.879c	85 36		sta $36				sta 	gxzTemp0
.879e	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87a0	38		sec				sec
.87a1	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87a4	4a		lsr a				lsr 	a
.87a5	48		pha				pha
.87a6	18		clc				clc
.87a7	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87aa	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ac	c8		iny				iny
.87ad	ad 32 06	lda $0632			lda 	gxX0+1
.87b0	69 00		adc #$00			adc 	#0
.87b2	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b4	c8		iny				iny
.87b5	68		pla				pla
.87b6	18		clc				clc
.87b7	6d 33 06	adc $0633			adc 	gxY0
.87ba	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87bc	18		clc				clc
.87bd	60		rts				rts
.87be					_GXSIFail:
.87be	38		sec				sec
.87bf	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87c0					GXOpenBitmap:
.87c0	78		sei				sei 								; no interrupts here
.87c1	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c3	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c6	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c8	85 00		sta $00				sta 	0
.87ca	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87cc	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87cf	58		cli				cli
.87d0	60		rts				rts
.87d1					GXCloseBitmap:
.87d1	78		sei				sei
.87d2	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d5	85 0b		sta $0b				sta 	GXEditSlot
.87d7	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87da	85 00		sta $00				sta 	0
.87dc	58		cli				cli
.87dd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87de					GXPositionCalc:
.87de	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87e0	48		pha				pha
.87e1	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87e4	85 3c		sta $3c				sta 	gxzScreen
.87e6	64 3d		stz $3d				stz 	gxzScreen+1
.87e8	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87ea	26 3d		rol $3d				rol 	gxzScreen+1
.87ec	06 3c		asl $3c				asl 	gxzScreen
.87ee	26 3d		rol $3d				rol 	gxzScreen+1
.87f0	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87f1	65 3c		adc $3c				adc 	gxzScreen
.87f3	85 3c		sta $3c				sta 	gxzScreen
.87f5	90 02		bcc $87f9			bcc 	_GXPCNoCarry
.87f7	e6 3d		inc $3d				inc 	gxzScreen+1
.87f9					_GXPCNoCarry:
.87f9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87fb	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87fd	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87ff	85 36		sta $36				sta 	gxzTemp0
.8801	64 3d		stz $3d				stz 	gxzScreen+1
.8803	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8805					_GXPCMultiply32:
.8805	06 3c		asl $3c				asl 	gxzScreen
.8807	26 3d		rol $3d				rol 	gxzScreen+1
.8809	3a		dec a				dec 	a
.880a	d0 f9		bne $8805			bne 	_GXPCMultiply32
.880c	18		clc				clc
.880d	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8810	65 3c		adc $3c				adc 	gxzScreen
.8812	8d 44 06	sta $0644			sta 	gsOffset
.8815	ad 32 06	lda $0632			lda 	GXX0+1
.8818	65 3d		adc $3d				adc 	gxzScreen+1
.881a	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.881c	90 04		bcc $8822			bcc 	_GXPCNoOverflow
.881e	29 1f		and #$1f			and 	#$1F 						; fix it up
.8820	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8822					_GXPCNoOverflow:
.8822	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8824	85 3d		sta $3d				sta 	gxzScreen+1
.8826	64 3c		stz $3c				stz 	gxzScreen
.8828	18		clc				clc
.8829	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.882b	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.882e	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.8830	68		pla				pla
.8831	85 36		sta $36				sta 	gxzTemp0
.8833	60		rts				rts
.8834					GXMovePositionDown:
.8834	18		clc				clc 								; add 320 to offset/temp+1
.8835	ad 44 06	lda $0644			lda 	gsOffset
.8838	69 40		adc #$40			adc 	#64
.883a	8d 44 06	sta $0644			sta 	gsOffset
.883d	a5 3d		lda $3d				lda 	gxzScreen+1
.883f	69 01		adc #$01			adc 	#1
.8841	85 3d		sta $3d				sta 	gxzScreen+1
.8843	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8845	90 07		bcc $884e			bcc 	_GXMPDExit
.8847	38		sec				sec  								; next page
.8848	e9 20		sbc #$20			sbc 	#$20
.884a	85 3d		sta $3d				sta 	gxzScreen+1
.884c	e6 0b		inc $0b				inc 	GXEditSlot
.884e					_GXMPDExit:
.884e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884f					GXFindSprite:
.884f	aa		tax				tax
.8850	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8853	85 0b		sta $0b				sta 	GXEditSlot
.8855	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8858	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.885b	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.885e	48		pha				pha 								; save twice
.885f	48		pha				pha
.8860	29 03		and #$03			and 	#3 							; get sprite size
.8862	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8865	aa		tax				tax
.8866	bd 87 88	lda $8887,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8869	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.886c	68		pla				pla 								; get LUT
.886d	4a		lsr a				lsr		a
.886e	4a		lsr a				lsr		a
.886f	29 03		and #$03			and 	#3
.8871	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8874	68		pla				pla 								; address, neeeds to be x 4
.8875	29 f0		and #$f0			and 	#$F0
.8877	8d 61 06	sta $0661			sta 	GXSpriteOffset
.887a	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887d	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8880	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8883	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8886	60		rts				rts
.8887					_GXFXSSTTable:
>8887	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.888b					GXSortXY:
.888b	20 a9 88	jsr $88a9			jsr 	GXSortY 					; will be sorted on Y now
.888e	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8891	cd 35 06	cmp $0635			cmp 	gxX1
.8894	ad 32 06	lda $0632			lda 	gXX0+1
.8897	ed 36 06	sbc $0636			sbc 	gXX1+1
.889a	90 0c		bcc $88a8			bcc 	_GXSXYExit 					; X0 < X1 exit
.889c	a2 00		ldx #$00			ldx 	#0 							; swap them over
.889e	a0 04		ldy #$04			ldy 	#4
.88a0	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88a3	e8		inx				inx
.88a4	c8		iny				iny
.88a5	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88a8					_GXSXYExit:
.88a8	60		rts				rts
.88a9					GXSortY:
.88a9	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88ac	cd 37 06	cmp $0637			cmp 	gxY1
.88af	90 0b		bcc $88bc			bcc 	_GXSYSorted
.88b1	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b3	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b5					_GXSwap1:
.88b5	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88b8	88		dey				dey
.88b9	ca		dex				dex
.88ba	10 f9		bpl $88b5			bpl 	_GXSwap1
.88bc					_GXSYSorted:
.88bc	60		rts				rts
.88bd					GXSwapXY:
.88bd	bd 31 06	lda $0631,x			lda 	gxX0,x
.88c0	48		pha				pha
.88c1	b9 31 06	lda $0631,y			lda 	gxX0,y
.88c4	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c7	68		pla				pla
.88c8	99 31 06	sta $0631,y			sta 	gxX0,y
.88cb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.88cc					RunDemos:
.88cc					loop:
.88cc	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.88ce	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d0	a0 00		ldy #$00			ldy 	#(0)
.88d2	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88d5	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.88d7	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d9	a0 00		ldy #$00			ldy 	#(0)
.88db	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88de	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.88e0	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.88e2	a0 00		ldy #$00			ldy 	#(0)
.88e4	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88e7	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.88e9	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.88eb	a0 00		ldy #$00			ldy 	#(0)
.88ed	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88f0	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.88f2	a2 82		ldx #$82			ldx 	#((130) & $FF)
.88f4	a0 1e		ldy #$1e			ldy 	#(30)
.88f6	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88f9	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.88fb	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.88fd	a0 08		ldy #$08			ldy 	#(1*8)
.88ff	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8902	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.8904	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.8906	a0 08		ldy #$08			ldy 	#(1*8)
.8908	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.890b	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.890d	a2 00		ldx #$00			ldx 	#((0) & $FF)
.890f	a0 08		ldy #$08			ldy 	#(1*8)
.8911	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8914	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.8916	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8918	a0 08		ldy #$08			ldy 	#(1*8)
.891a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.891d	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.891f	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8921	a0 08		ldy #$08			ldy 	#(1*8)
.8923	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8926	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8928	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.892a	a0 0a		ldy #$0a			ldy 	#(10)
.892c	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.892f	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.8931	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8933	a0 64		ldy #$64			ldy 	#(100)
.8935	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8938	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.893a	a2 03		ldx #$03			ldx 	#((3) & $FF)
.893c	a0 01		ldy #$01			ldy 	#(1)
.893e	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8941	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.8943	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8945	a0 00		ldy #$00			ldy 	#(0)
.8947	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.894a	a9 32		lda #$32			lda 	#((25)*2)+(((200) >> 8) & 1)
.894c	a2 c8		ldx #$c8			ldx 	#((200) & $FF)
.894e	a0 c8		ldy #$c8			ldy 	#(200)
.8950	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8953	a9 0c		lda #$0c			lda 	#((6)*2)+(((4) >> 8) & 1)
.8955	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8957	a0 01		ldy #$01			ldy 	#(1)
.8959	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.895c	a9 0e		lda #$0e			lda 	#((7)*2)+(((1) >> 8) & 1)
.895e	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8960	a0 00		ldy #$00			ldy 	#(0)
.8962	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8965	a9 32		lda #$32			lda 	#((25)*2)+(((100) >> 8) & 1)
.8967	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8969	a0 c8		ldy #$c8			ldy 	#(200)
.896b	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.896e	a9 0c		lda #$0c			lda 	#((6)*2)+(((5) >> 8) & 1)
.8970	a2 05		ldx #$05			ldx 	#((5) & $FF)
.8972	a0 01		ldy #$01			ldy 	#(1)
.8974	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8977	a9 0e		lda #$0e			lda 	#((7)*2)+(((0) >> 8) & 1)
.8979	a2 00		ldx #$00			ldx 	#((0) & $FF)
.897b	a0 00		ldy #$00			ldy 	#(0)
.897d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8980	a9 32		lda #$32			lda 	#((25)*2)+(((50) >> 8) & 1)
.8982	a2 32		ldx #$32			ldx 	#((50) & $FF)
.8984	a0 c8		ldy #$c8			ldy 	#(200)
.8986	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8989	60		rts				rts
.898a	20 68 a1	jsr $a168	demo:	jsr 	Random32Bit
.898d	ee 40 06	inc $0640			inc 	gxEORValue
.8990	a9 30		lda #$30			lda 	#24*2
.8992	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8995	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8998	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.899b	80 ed		bra $898a			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.899d					AssembleGroup1:
.899d	a9 ff		lda #$ff			lda 	#$FF
.899f	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89a2	80 02		bra $89a6			bra 	AsmGroup12
.89a4					AssembleGroup2:
.89a4	a5 00		lda $00				lda 	$00
.89a6					AsmGroup12:
.89a6	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89a9	68		pla				pla 								; pop the return address to access the information following.
.89aa	fa		plx				plx
.89ab	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; get opcode and save as base
.89ae	8d a4 04	sta $04a4			sta 	BaseOpcode
.89b1	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89b4	d0 08		bne $89be			bne 	_AG12HaveMask
.89b6	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89b8	20 3c 8a	jsr $8a3c			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89bb	8d a5 04	sta $04a5			sta 	ModeMask
.89be					_AG12HaveMask:
.89be	20 77 8b	jsr $8b77			jsr 	TypeAndCalculateOperand 	; get zero page type
.89c1	da		phx				phx 								; save found address mode
.89c2	20 a0 8a	jsr $8aa0			jsr 	AssembleModeX
.89c5	fa		plx				plx  								; restore address mode
.89c6	b0 0b		bcs $89d3			bcs 	_AG12Exit
.89c8	20 d4 89	jsr $89d4			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89cb	20 a0 8a	jsr $8aa0			jsr 	AssembleModeX
.89ce	b0 03		bcs $89d3			bcs 	_AG12Exit
.89d0	4c a4 b1	jmp $b1a4			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89d3					_AG12Exit:
.89d3	60		rts				rts
.89d4					PromoteToAbsolute:
.89d4	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89d6	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89d8	f0 19		beq $89f3			beq 	_PTADo
.89da	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89dc	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89de	f0 13		beq $89f3			beq 	_PTADo
.89e0	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89e2	e0 80		cpx #$80			cpx 	#AM_ZEROY
.89e4	f0 0d		beq $89f3			beq 	_PTADo
.89e6	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.89e8	e0 d1		cpx #$d1			cpx 	#AM_IND
.89ea	f0 07		beq $89f3			beq 	_PTADo
.89ec	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.89ee	e0 c0		cpx #$c0			cpx 	#AM_INDX
.89f0	f0 01		beq $89f3			beq 	_PTADo
.89f2	60		rts				rts
.89f3					_PTADo:
.89f3	aa		tax				tax
.89f4	60		rts				rts
.89f5					AssembleGroup3:
.89f5	68		pla				pla 								; get parameters, which is just the opcode.
.89f6	fa		plx				plx
.89f7	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; get and output opcode
.89fa	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.89fd	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get a 16 bit operand
.8a00	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a03	38		sec				sec
.8a04	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a07	48		pha				pha 								; LSB in A
.8a08	ad 10 04	lda $0410			lda 	NSMantissa1
.8a0b	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a0e	aa		tax				tax 								; MSB in X
.8a0f	68		pla				pla
.8a10	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a11	69 7f		adc #$7f			adc 	#$7F
.8a13	90 01		bcc $8a16			bcc 	_AG3NoCarry
.8a15	e8		inx				inx
.8a16					_AG3NoCarry:
.8a16	38		sec				sec 								; fix back and write out anyways.
.8a17	e9 80		sbc #$80			sbc 	#$80
.8a19	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8a1c	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a1e	f0 0a		beq $8a2a			beq 	_AG3Exit
.8a20	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a23	29 01		and #$01			and 	#1
.8a25	f0 03		beq $8a2a			beq 	_AG3Exit
.8a27	4c a9 b1	jmp $b1a9			jmp 	RangeError 					; no, branch is out of range
.8a2a					_AG3Exit:
.8a2a	60		rts				rts
.8a2b					AssembleGroup4:
.8a2b	68		pla				pla 								; pop address
.8a2c	fa		plx				plx
.8a2d	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; access and get first
.8a30	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte 			; output it.
.8a33	60		rts				rts
.8a34					AccessParameters:
.8a34	8d a1 04	sta $04a1			sta 	ParamStart
.8a37	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a3a	a9 01		lda #$01			lda 	#1
.8a3c					GetParameter:
.8a3c	5a		phy				phy
.8a3d	a8		tay				tay
.8a3e	ad a1 04	lda $04a1			lda 	ParamStart
.8a41	85 36		sta $36				sta 	zTemp0
.8a43	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a46	85 37		sta $37				sta 	zTemp0+1
.8a48	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a4a	7a		ply				ply
.8a4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a4c					AssemblerWriteByte:
.8a4c	48		pha			pha
.8a4d	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a50	29 02		and #$02		and 	#2
.8a52	f0 1b		beq $8a6f		beq 	_AWBNoPrint
.8a54	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a57	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a5a	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a5d	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a60	a9 20		lda #$20		lda 	#' '
.8a62	20 57 b3	jsr $b357		jsr 	EXTPrintCharacter
.8a65	68		pla			pla 									; print byte
.8a66	48		pha			pha
.8a67	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a6a	a9 0d		lda #$0d		lda 	#13
.8a6c	20 57 b3	jsr $b357		jsr 	EXTPrintCharacter
.8a6f					_AWBNoPrint:
.8a6f	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a72	85 36		sta $36			sta 	zTemp0
.8a74	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a77	f0 0e		beq $8a87		beq 	_AWBRange
.8a79	85 37		sta $37			sta 	zTemp0+1
.8a7b	68		pla			pla 									; write byte out
.8a7c	92 36		sta ($36)		sta 	(zTemp0)
.8a7e	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a81	d0 03		bne $8a86		bne 	_AWBNoCarry
.8a83	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a86					_AWBNoCarry:
.8a86	60		rts			rts
.8a87					_AWBRange:
.8a87	4c a9 b1	jmp $b1a9		jmp 	RangeError
.8a8a					PrintHex:
.8a8a	48		pha				pha
.8a8b	4a		lsr a				lsr 	a
.8a8c	4a		lsr a				lsr 	a
.8a8d	4a		lsr a				lsr 	a
.8a8e	4a		lsr a				lsr 	a
.8a8f	20 93 8a	jsr $8a93			jsr 	_PrintNibble
.8a92	68		pla				pla
.8a93					_PrintNibble:
.8a93	29 0f		and #$0f			and 	#15
.8a95	c9 0a		cmp #$0a			cmp 	#10
.8a97	90 02		bcc $8a9b			bcc 	_NoShift
.8a99	69 06		adc #$06			adc 	#6
.8a9b					_NoShift:
.8a9b	69 30		adc #$30			adc 	#48
.8a9d	4c 57 b3	jmp $b357			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8aa0					AssembleModeX:
.8aa0	5a		phy				phy
.8aa1	ad a3 04	lda $04a3			lda 	IsGroup1
.8aa4	f0 17		beq $8abd			beq 	_AMXGroup2
.8aa6	8a		txa				txa 							; is it in group # 1
.8aa7	29 40		and #$40			and 	#AM_ISG1
.8aa9	f0 50		beq $8afb			beq 	_AMXFail 				; no, give up.
.8aab	8a		txa				txa 							; get back.
.8aac	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aae	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8ab0	d0 22		bne $8ad4			bne 	_AMXHaveInfo
.8ab2	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ab5	c9 81		cmp #$81			cmp 	#$81
.8ab7	f0 42		beq $8afb			beq 	_AMXFail
.8ab9	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8abb	80 17		bra $8ad4			bra 	_AMXHaveInfo 			; odd design decision there.
.8abd					_AMXGroup2:
.8abd	8a		txa				txa 							; is it in group 2 ?
.8abe	29 20		and #$20			and 	#AM_ISG2
.8ac0	f0 39		beq $8afb			beq 	_AMXFail 				; no, give up.
.8ac2	8a		txa				txa 							; get the offset into Y
.8ac3	29 1f		and #$1f			and 	#$1F
.8ac5	4a		lsr a				lsr 	a 						; make it 0-7.
.8ac6	4a		lsr a				lsr  	a
.8ac7	a8		tay				tay
.8ac8	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8acb					_AMXCheckOkay:
.8acb	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8acc	88		dey				dey
.8acd	10 fc		bpl $8acb			bpl 	_AMXCheckOkay
.8acf	90 2a		bcc $8afb			bcc 	_AMXFail 				; not allowed.
.8ad1	8a		txa				txa  							; get mask back
.8ad2	29 1f		and #$1f			and 	#$1F
.8ad4					_AMXHaveInfo:
.8ad4	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8ad6	10 05		bpl $8add			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8ad8	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8adb	d0 1e		bne $8afb			bne 	_AMXFail
.8add					_AMXAnySize:
.8add	18		clc				clc 							; add offset to the base opcode
.8ade	6d a4 04	adc $04a4			adc 	BaseOpcode
.8ae1					_AMXOutputCode:
.8ae1	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte 		; write the opcode out.
.8ae4	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8ae6	f0 10		beq $8af8			beq 	_AMXExit
.8ae8	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8aeb	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8aee	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8af0	30 06		bmi $8af8			bmi 	_AMXExit
.8af2	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8af5	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8af8					_AMXExit:
.8af8	7a		ply				ply
.8af9	38		sec				sec
.8afa	60		rts				rts
.8afb					_AMXFail:
.8afb	a0 00		ldy #$00			ldy 	#0
.8afd					_AMXCheckOddities:
.8afd	8a		txa				txa
.8afe	d9 26 8b	cmp $8b26,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b01	d0 16		bne $8b19			bne 	_AMXCONext
.8b03	b9 24 8b	lda $8b24,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b06	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b09	d0 0e		bne $8b19			bne 	_AMXCONext
.8b0b	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b0d	10 05		bpl $8b14			bpl 	_AMXCONotZero
.8b0f	ad 10 04	lda $0410			lda 	NSMantissa1
.8b12	d0 05		bne $8b19			bne 	_AMXCONext
.8b14					_AMXCONotZero:
.8b14	b9 25 8b	lda $8b25,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b17	80 c8		bra $8ae1			bra 	_AMXOutputCode 			; and assemble it
.8b19					_AMXCONext:
.8b19	c8		iny				iny
.8b1a	c8		iny				iny
.8b1b	c8		iny				iny
.8b1c	b9 24 8b	lda $8b24,y			lda 	ExtraOpcode+0,y 		; end of table
.8b1f	d0 dc		bne $8afd			bne 	_AMXCheckOddities
.8b21					_AMXCOFail:
.8b21	7a		ply				ply
.8b22	18		clc				clc
.8b23	60		rts				rts
.8b24					ExtraOpcode:
>8b24	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b27	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b2a	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b2d	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b30	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b33	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b36	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b39	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b3c	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b3f	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b42	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b43					LabelHere:
.8b43	c8		iny				iny 								; skip .
.8b44	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b46	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm 				; get a term
.8b49	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b4c	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b4e	d0 24		bne $8b74			bne 	_ALType
.8b50	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b53	85 36		sta $36				sta 	zTemp0
.8b55	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b58	85 37		sta $37				sta 	zTemp0+1
.8b5a	5a		phy				phy 								; copy address in.
.8b5b	a0 01		ldy #$01			ldy 	#1
.8b5d	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b60	92 36		sta ($36)			sta 	(zTemp0)
.8b62	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b65	91 36		sta ($36),y			sta 	(zTemp0),y
.8b67	c8		iny				iny
.8b68	a9 00		lda #$00			lda 	#0
.8b6a	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6c	c8		iny				iny
.8b6d	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6f	c8		iny				iny
.8b70	91 36		sta ($36),y			sta 	(zTemp0),y
.8b72	7a		ply				ply
.8b73	60		rts				rts
.8b74					_ALType:
.8b74	4c ae b1	jmp $b1ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b77					TypeAndCalculateOperand:
.8b77	b1 30		lda ($30),y			lda 	(codePtr),y
.8b79	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b7b	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b7d	f0 5b		beq $8bda			beq 	_TACOExit
.8b7f	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b81	f0 57		beq $8bda			beq 	_TACOExit
.8b83	c8		iny				iny
.8b84	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b86	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b88	f0 51		beq $8bdb			beq 	CalculateOperand
.8b8a	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b8c	f0 1f		beq $8bad			beq 	_TACOIndirect
.8b8e	88		dey				dey 								; undo get of first character
.8b8f	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get operand
.8b92	b1 30		lda ($30),y			lda 	(codePtr),y
.8b94	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b96	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b98	d0 40		bne $8bda			bne 	_TACOExit
.8b9a	c8		iny				iny
.8b9b	20 35 ab	jsr $ab35			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b9e	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8ba0	c9 58		cmp #$58			cmp 	#'X'
.8ba2	f0 36		beq $8bda			beq 	_TACOExit
.8ba4	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ba6	c9 59		cmp #$59			cmp 	#'Y'
.8ba8	f0 30		beq $8bda			beq 	_TACOExit
.8baa					_TACOSyntax:
.8baa	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
.8bad					_TACOIndirect:
.8bad	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get the operand
.8bb0	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bb4	f0 17		beq $8bcd			beq 	_TACOIndX
.8bb6	20 be ab	jsr $abbe			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bb9	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbb	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bbd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bbf	d0 19		bne $8bda			bne 	_TACOExit
.8bc1	c8		iny				iny
.8bc2	20 35 ab	jsr $ab35			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bc5	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8bc7	d0 e1		bne $8baa			bne 	_TACOSyntax
.8bc9	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bcb	80 0d		bra $8bda			bra 	_TACOExit
.8bcd					_TACOIndX:
.8bcd	c8		iny				iny
.8bce	20 35 ab	jsr $ab35			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bd1	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bd3	d0 d5		bne $8baa			bne 	_TACOSyntax
.8bd5	20 be ab	jsr $abbe			jsr 	CheckRightBracket			; check )
.8bd8	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bda					_TACOExit:
.8bda	60		rts				rts
.8bdb					CalculateOperand:
.8bdb	48		pha				pha
.8bdc	da		phx				phx
.8bdd	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bdf	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger
.8be2	fa		plx				plx
.8be3	68		pla				pla
.8be4	60		rts				rts
.ab35					TACOCheckXY:
.ab35	b1 30		lda ($30),y			lda 	(codePtr),y
.ab37	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ab39	c9 40		cmp #$40			cmp 	#$40
.ab3b	d0 21		bne $ab5e			bne 	_TCXYFail
.ab3d	b1 30		lda ($30),y			lda 	(codePtr),y
.ab3f	18		clc				clc
.ab40	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ab42	85 37		sta $37				sta 	zTemp0+1
.ab44	c8		iny				iny
.ab45	b1 30		lda ($30),y			lda 	(codePtr),y
.ab47	c8		iny				iny
.ab48	85 36		sta $36				sta 	zTemp0
.ab4a	5a		phy				phy 								; save position
.ab4b	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ab4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab4f	d0 0c		bne $ab5d			bne 	_TCXYPopFail
.ab51	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ab53	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab55	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ab57	f0 08		beq $ab61			beq 	_TCXYFound
.ab59	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ab5b	f0 04		beq $ab61			beq 	_TCXYFound
.ab5d					_TCXYPopFail:
.ab5d	7a		ply				ply
.ab5e					_TCXYFail:
.ab5e	a9 00		lda #$00			lda 	#0
.ab60	60		rts				rts
.ab61					_TCXYFound:
.ab61	7a		ply				ply 								; restore position
.ab62	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ab64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8be5					EditProgramCode:
.8be5	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8be8	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8beb	20 16 a4	jsr $a416			jsr 	MemorySearch
.8bee	90 05		bcc $8bf5			bcc 	_EPCNoDelete 				; reached the end don't delete
.8bf0	d0 03		bne $8bf5			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8bf2	20 9b b3	jsr $b39b			jsr 	MemoryDeleteLine 			; delete the line
.8bf5					_EPCNoDelete:
.8bf5	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8bf8	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bfa	f0 0d		beq $8c09			beq 	_EPCNoInsert
.8bfc	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8bff	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c02	20 16 a4	jsr $a416			jsr 	MemorySearch
.8c05	18		clc				clc 								; insert at this point.
.8c06	20 d2 b3	jsr $b3d2			jsr 	MemoryInsertLine 			; insert the line
.8c09					_EPCNoInsert:
.8c09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c0a					WarmStart:
.8c0a	a2 ff		ldx #$ff			ldx 	#$FF
.8c0c	9a		txs				txs
.8c0d	20 6d b3	jsr $b36d			jsr 	EXTInputLine 				; get line to lineBuffer
.8c10	20 b6 a8	jsr $a8b6			jsr 	TokeniseLine 				; tokenise the line
.8c13	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8c16	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8c19	d0 17		bne $8c32			bne 	_WSEditCode 				; if so,edit code.
.8c1b	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c1e	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8c20	85 30		sta $30				sta 	codePtr
.8c22	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c24	85 31		sta $31				sta 	codePtr+1
.8c26	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8c29	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c2b	f0 dd		beq $8c0a			beq 	WarmStart
.8c2d	20 a2 93	jsr $93a2			jsr 	RUNCodePointerLine 			; execute that line.
.8c30	80 d8		bra $8c0a			bra 	WarmStart
.8c32					_WSEditCode:
.8c32	20 e5 8b	jsr $8be5			jsr 	EditProgramCode
.8c35	20 a3 8c	jsr $8ca3			jsr 	ClearCommand
.8c38	80 d0		bra $8c0a			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c3a					AssembleCommand:
.8c3a	a2 00		ldx #$00			ldx 	#0
.8c3c	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger 		; start address
.8c3f	ad 08 04	lda $0408			lda 	NSMantissa0
.8c42	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c45	ad 10 04	lda $0410			lda 	NSMantissa1
.8c48	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c4b	20 c6 ab	jsr $abc6			jsr 	CheckComma
.8c4e	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; options
.8c51	ad 08 04	lda $0408			lda 	NSMantissa0
.8c54	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c57	60		rts				rts
.8c58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c59					AssertCommand:
.8c59	a2 00		ldx #$00			ldx 	#0
.8c5b	20 2e a3	jsr $a32e			jsr 	EvaluateInteger 			; the assert test
.8c5e	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; exit if result is non zero.
.8c61	d0 05		bne $8c68			bne 	_ACExit
.8c63	a9 0a		lda #$0a		lda	#10
.8c65	4c ff 97	jmp $97ff		jmp	ErrorHandler
.8c68					_ACExit:
.8c68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c69					CallCommand:
.8c69	a2 00		ldx #$00			ldx 	#0
.8c6b	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger
.8c6e					_CCClear
.8c6e	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c6f	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero
.8c72	e0 04		cpx #$04			cpx 	#4
.8c74	d0 f8		bne $8c6e			bne 	_CCClear
.8c76	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c78					_CCCParam:
.8c78	b1 30		lda ($30),y			lda 	(codePtr),y
.8c7a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c7c	d0 09		bne $8c87			bne 	_CCCRun6502
.8c7e	c8		iny				iny 								; skip comma
.8c7f	e8		inx				inx	 								; next level
.8c80	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c83	e0 03		cpx #$03			cpx 	#3
.8c85	90 f1		bcc $8c78			bcc 	_CCCParam 					; done all 3 ?
.8c87					_CCCRun6502:
.8c87	5a		phy				phy 								; save position
.8c88	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c8b	85 37		sta $37				sta 	zTemp0+1
.8c8d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c90	85 36		sta $36				sta 	zTemp0
.8c92	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c95	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c98	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c9b	20 a0 8c	jsr $8ca0			jsr 	_CCCZTemp0 					; call zTemp0
.8c9e	7a		ply				ply 								; restore position and exit
.8c9f	60		rts				rts
.8ca0					_CCCZTemp0:
.8ca0	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ca3					ClearCommand:
.8ca3	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ca5	85 36		sta $36				sta 	0+zTemp0
.8ca7	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ca9	85 37		sta $37				sta 	1+zTemp0
.8cab					_ClearZeroLoop:
.8cab	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cad	f0 24		beq $8cd3			beq 	_ClearZeroEnd
.8caf	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8cb1	a9 00		lda #$00			lda 	#0
.8cb3					_ClearOneVariable:
.8cb3	91 36		sta ($36),y			sta 	(zTemp0),y
.8cb5	c8		iny				iny
.8cb6	c0 08		cpy #$08			cpy 	#8
.8cb8	d0 f9		bne $8cb3			bne 	_ClearOneVariable
.8cba	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cbc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cbe	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cc0	d0 04		bne $8cc6			bne 	_ClearNotProcedure
.8cc2	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8cc4	91 36		sta ($36),y			sta 	(zTemp0),y
.8cc6					_ClearNotProcedure:
.8cc6	18		clc				clc 								; go to the next variable
.8cc7	b2 36		lda ($36)			lda 	(zTemp0)
.8cc9	65 36		adc $36				adc 	zTemp0
.8ccb	85 36		sta $36				sta 	zTemp0
.8ccd	90 dc		bcc $8cab			bcc 	_ClearZeroLoop
.8ccf	e6 37		inc $37				inc 	zTemp0+1
.8cd1	80 d8		bra $8cab			bra 	_ClearZeroLoop
.8cd3					_ClearZeroEnd:
.8cd3	18		clc				clc
.8cd4	a5 36		lda $36				lda 	zTemp0
.8cd6	69 01		adc #$01			adc 	#1
.8cd8	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cdb	a5 37		lda $37				lda 	zTemp0+1
.8cdd	69 00		adc #$00			adc 	#0
.8cdf	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ce2	20 d0 a4	jsr $a4d0			jsr 	StackReset
.8ce5	20 b5 b4	jsr $b4b5			jsr 	StringSystemInitialise
.8ce8	20 1f 97	jsr $971f			jsr 	ProcedureScan
.8ceb	20 5e 93	jsr $935e			jsr 	Command_Restore
.8cee	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8cf1	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8cf4	9c a0 04	stz $04a0			stz 	AssemblerControl
.8cf7	20 c6 a0	jsr $a0c6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8cfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8cfb					Command_Data:
.8cfb	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8cfd	a2 80		ldx #$80			ldx 	#KWC_EOL
.8cff	20 71 97	jsr $9771			jsr 	ScanForward
.8d02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d03					DimCommand:
.8d03	b1 30		lda ($30),y			lda 	(codePtr),y
.8d05	29 c0		and #$c0			and 	#$C0
.8d07	c9 40		cmp #$40			cmp 	#$40
.8d09	d0 7a		bne $8d85			bne 	_DCSyntax
.8d0b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0d	18		clc				clc
.8d0e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d10	85 3f		sta $3f				sta 	zaTemp+1
.8d12	c8		iny				iny
.8d13	b1 30		lda ($30),y			lda 	(codePtr),y
.8d15	c8		iny				iny
.8d16	85 3e		sta $3e				sta 	zaTemp
.8d18	5a		phy				phy
.8d19	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d1b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d1d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d1f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d21	f0 62		beq $8d85			beq 	_DCSyntax
.8d23	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d25	29 04		and #$04			and 	#NSBIsArray
.8d27	f0 64		beq $8d8d			beq 	_DCType
.8d29	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d2b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d2d	d0 59		bne $8d88			bne 	_DCRedefine
.8d2f	7a		ply				ply
.8d30	20 90 8d	jsr $8d90			jsr 	_DCGetSize 				; get array size, check it.
.8d33	5a		phy				phy
.8d34	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d36	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d38	7a		ply				ply 							; is there a second (e.g. ,x)
.8d39	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d3d	d0 0a		bne $8d49			bne 	_DCOneDimension
.8d3f	c8		iny				iny 							; skip comma
.8d40	20 90 8d	jsr $8d90			jsr 	_DCGetSize 				; get 2nd array size
.8d43	5a		phy				phy
.8d44	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d46	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d48	7a		ply				ply
.8d49					_DCOneDimension:
.8d49	5a		phy				phy 							; save position
.8d4a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d4c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4e	aa		tax				tax
.8d4f	c8		iny				iny
.8d50	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d52	e8		inx				inx 							; bump them.
.8d53	1a		inc a				inc 	a
.8d54	20 40 b0	jsr $b040			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d57	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d59	29 e0		and #$e0			and 	#$E0
.8d5b	d0 23		bne $8d80			bne 	_DCSize
.8d5d	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d5f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d61	20 9e 8d	jsr $8d9e			jsr 	ScaleByBaseType 		; scale by base type
.8d64	a5 36		lda $36				lda 	zTemp0
.8d66	a6 37		ldx $37				ldx 	zTemp0+1
.8d68	20 88 a0	jsr $a088			jsr 	AllocateXABytes 		; allocate memory
.8d6b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d6d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6f	c8		iny				iny
.8d70	8a		txa				txa
.8d71	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d73	7a		ply				ply 							; get position back
.8d74	20 be ab	jsr $abbe			jsr 	CheckRightBracket 		; check )
.8d77	b1 30		lda ($30),y			lda 	(codePtr),y
.8d79	c8		iny				iny 							; consume in case
.8d7a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d7c	f0 85		beq $8d03			beq 	DimCommand
.8d7e	88		dey				dey 							; undo consume
.8d7f	60		rts				rts
.8d80					_DCSize:
.8d80	a9 16		lda #$16		lda	#22
.8d82	4c ff 97	jmp $97ff		jmp	ErrorHandler
.8d85					_DCSyntax:
.8d85	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
.8d88					_DCRedefine:
.8d88	a9 15		lda #$15		lda	#21
.8d8a	4c ff 97	jmp $97ff		jmp	ErrorHandler
.8d8d					_DCType:
.8d8d	4c ae b1	jmp $b1ae			jmp 	TypeError
.8d90					_DCGetSize:
.8d90	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d92	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 	; get array dimension
.8d95	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d97	f0 e7		beq $8d80			beq 	_DCSize
.8d99	c9 fe		cmp #$fe			cmp 	#254
.8d9b	f0 e3		beq $8d80			beq 	_DCSize
.8d9d	60		rts				rts
.8d9e					ScaleByBaseType:
.8d9e	29 10		and #$10			and 	#NSBIsString 			; is it string
.8da0	d0 19		bne $8dbb			bne 	_SBBTString
.8da2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8da4	48		pha				pha
.8da5	a5 36		lda $36				lda 	zTemp0
.8da7	48		pha				pha
.8da8	06 36		asl $36				asl 	zTemp0 					; x 2
.8daa	26 37		rol $37				rol 	zTemp0+1
.8dac	06 36		asl $36				asl 	zTemp0 					; x 4
.8dae	26 37		rol $37				rol 	zTemp0+1
.8db0	68		pla				pla 							; add stacked value = x 5
.8db1	65 36		adc $36				adc 	zTemp0
.8db3	85 36		sta $36				sta 	zTemp0
.8db5	68		pla				pla
.8db6	65 37		adc $37				adc 	zTemp0+1
.8db8	85 37		sta $37				sta 	zTemp0+1
.8dba	60		rts				rts
.8dbb					_SBBTString:
.8dbb	06 36		asl $36				asl 	zTemp0
.8dbd	26 37		rol $37				rol 	zTemp0+1
.8dbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8dc0					EndCommand:
.8dc0	4c 0a 8c	jmp $8c0a			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8dc3					ForCommand:
.8dc3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8dc5	20 6b a4	jsr $a46b			jsr 	StackOpen
.8dc8	a2 00		ldx #$00			ldx 	#0
.8dca	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm
.8dcd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dd0	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8dd2	d0 49		bne $8e1d			bne		_FCError
.8dd4	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8dd6	20 ce ab	jsr $abce			jsr 	CheckNextA
.8dd9	e8		inx				inx
.8dda	20 2e a3	jsr $a32e			jsr 	EvaluateInteger 			; <from> in +1
.8ddd	b1 30		lda ($30),y			lda 	(codePtr),y
.8ddf	c8		iny				iny 								; consume it
.8de0	48		pha				pha 								; save on stack for later
.8de1	c9 af		cmp #$af			cmp 	#KWD_DOWNTO
.8de3	f0 04		beq $8de9			beq 	_FCNoSyntax
.8de5	c9 c2		cmp #$c2			cmp 	#KWD_TO
.8de7	d0 37		bne $8e20			bne 	_FCSyntaxError
.8de9					_FCNoSyntax:
.8de9	e8		inx				inx
.8dea	20 2e a3	jsr $a32e			jsr 	EvaluateInteger
.8ded	20 af a4	jsr $a4af			jsr 	STKSaveCodePosition 		; save loop back position
.8df0	68		pla				pla 								; restore DOWNTO or TO
.8df1	5a		phy				phy 								; save Y on the stack
.8df2	49 af		eor #$af			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8df4	f0 02		beq $8df8			beq 	_FCNotDownTo
.8df6	a9 02		lda #$02			lda 	#2
.8df8					_FCNotDownTo:
.8df8	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8df9	a0 10		ldy #$10			ldy 	#16
.8dfb	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dfd	a0 06		ldy #$06			ldy 	#6
.8dff	ad 08 04	lda $0408			lda 	NSMantissa0
.8e02	91 34		sta ($34),y			sta 	(basicStack),y
.8e04	ad 10 04	lda $0410			lda 	NSMantissa1
.8e07	c8		iny				iny
.8e08	91 34		sta ($34),y			sta 	(basicStack),y
.8e0a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e0c	a2 01		ldx #$01			ldx 	#1
.8e0e	20 23 8e	jsr $8e23			jsr 	FCIntegerToStack
.8e11	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e13	a2 02		ldx #$02			ldx 	#2
.8e15	20 23 8e	jsr $8e23			jsr 	FCIntegerToStack
.8e18	20 43 8e	jsr $8e43			jsr 	CopyIndexToReference
.8e1b	7a		ply				ply 								; restore position
.8e1c	60		rts				rts
.8e1d					_FCError:
.8e1d	4c ae b1	jmp $b1ae			jmp 	TypeError
.8e20					_FCSyntaxError:
.8e20	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
.8e23					FCIntegerToStack:
.8e23	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8e26	10 03		bpl $8e2b			bpl	 	_FCNotNegative
.8e28	20 6c a3	jsr $a36c			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e2b					_FCNotNegative:
.8e2b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e2e	91 34		sta ($34),y			sta 	(basicStack),y
.8e30	c8		iny				iny
.8e31	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e34	91 34		sta ($34),y			sta 	(basicStack),y
.8e36	c8		iny				iny
.8e37	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e3a	91 34		sta ($34),y			sta 	(basicStack),y
.8e3c	c8		iny				iny
.8e3d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e40	91 34		sta ($34),y			sta 	(basicStack),y
.8e42	60		rts				rts
.8e43					CopyIndexToReference:
.8e43	5a		phy				phy
.8e44	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e46	38		sec				sec 								; (because we copy from offset 8)
.8e47	b1 34		lda ($34),y			lda 	(basicStack),y
.8e49	e9 08		sbc #$08			sbc 	#8
.8e4b	85 36		sta $36				sta 	zTemp0
.8e4d	c8		iny				iny
.8e4e	b1 34		lda ($34),y			lda 	(basicStack),y
.8e50	e9 00		sbc #$00			sbc 	#0
.8e52	85 37		sta $37				sta 	zTemp0+1
.8e54	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e56	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e58	b1 34		lda ($34),y			lda 	(basicStack),y
.8e5a	0a		asl a				asl 	a 							; into carry
.8e5b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e5d	90 14		bcc $8e73			bcc 	_CITRNormal
.8e5f	38		sec				sec
.8e60					_CITRNegative:
.8e60	a9 00		lda #$00			lda 	#0
.8e62	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e64	91 36		sta ($36),y			sta 	(zTemp0),y
.8e66	c8		iny				iny
.8e67	ca		dex				dex
.8e68	d0 f6		bne $8e60			bne 	_CITRNegative
.8e6a	88		dey				dey 								; look at MSB of mantissa
.8e6b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e6d	09 80		ora #$80			ora 	#$80
.8e6f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e71	7a		ply				ply
.8e72	60		rts				rts
.8e73					_CITRNormal:
.8e73	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e75	91 36		sta ($36),y			sta 	(zTemp0),y
.8e77	c8		iny				iny
.8e78	ca		dex				dex
.8e79	d0 f8		bne $8e73			bne 	_CITRNormal
.8e7b	7a		ply				ply 								; and exit.
.8e7c	60		rts				rts
.8e7d					NextCommand:
.8e7d	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e7f	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e81	20 97 a4	jsr $a497			jsr 	StackCheckFrame
.8e84	5a		phy				phy
.8e85	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e87	b1 34		lda ($34),y			lda 	(basicStack),y
.8e89	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e8b	30 02		bmi $8e8f			bmi 	_NCStepNeg
.8e8d	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e8f					_NCStepNeg:
.8e8f	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e91	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e93	18		clc				clc
.8e94					_NCBump:
.8e94	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e96	91 34		sta ($34),y			sta 	(basicStack),y
.8e98	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e9a	c8		iny				iny 								; next byte
.8e9b	ca		dex				dex 								; do four times
.8e9c	d0 f6		bne $8e94			bne 	_NCBump
.8e9e	20 43 8e	jsr $8e43			jsr		CopyIndexToReference		; copy it to the reference variable.
.8ea1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ea3	b1 34		lda ($34),y			lda 	(basicStack),y
.8ea5	0a		asl a				asl 	a 							; sign bit to carry
.8ea6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ea8	85 38		sta $38				sta 	zTemp1
.8eaa	90 02		bcc $8eae			bcc 	_NCCompRev 					; use if step is +ve
.8eac	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8eae					_NCCompRev:
.8eae	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8eb0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8eb2	85 39		sta $39				sta 	zTemp1+1
.8eb4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8eb6	38		sec				sec
.8eb7					_NCCompare:
.8eb7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8eb9	b1 34		lda ($34),y			lda 	(basicStack),y
.8ebb	a4 39		ldy $39				ldy 	zTemp1+1
.8ebd	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ebf	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ec1	e6 39		inc $39				inc 	zTemp1+1
.8ec3	ca		dex				dex 								; do it 4 times.
.8ec4	d0 f1		bne $8eb7			bne 	_NCCompare
.8ec6	50 02		bvc $8eca			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ec8	49 80		eor #$80			eor 	#$80
.8eca					_NCNoOverflow:
.8eca	7a		ply				ply 								; restore Y position
.8ecb	0a		asl a				asl 	a 							; is bit 7 set.
.8ecc	90 04		bcc $8ed2			bcc 	_NCLoopback 				; if no , >= so loop back
.8ece	20 89 a4	jsr $a489			jsr 	StackClose 					; exit the loop
.8ed1	60		rts				rts
.8ed2					_NCLoopBack:
.8ed2	20 c0 a4	jsr $a4c0			jsr 	STKLoadCodePosition 		; loop back
.8ed5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8ed6					RectangleCommand:
.8ed6	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8ed8	80 02		bra $8edc			bra 	ShapeDrawCmd
.8eda					CircleCommand:
.8eda	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8edc					ShapeDrawCmd:
.8edc	20 f6 8e	jsr $8ef6			jsr 	RunGraphicsCommand
.8edf					ShapeDraw:
.8edf	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8ee2	4c ea 8e	jmp $8eea			jmp 	ExecuteGraphicCommand	 	; and complete
.8ee5					LineCommand:
.8ee5	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8ee7	20 f6 8e	jsr $8ef6			jsr 	RunGraphicsCommand
.8eea					ExecuteGraphicCommand:
.8eea	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8eed	20 88 80	jsr $8088			jsr 	GXGraphicDraw 				; draw it and exit
.8ef0	b0 01		bcs $8ef3			bcs 	_EGCError
.8ef2	60		rts				rts
.8ef3					_EGCError:
.8ef3	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
.8ef6					RunGraphicsCommand:
.8ef6	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8ef9	68		pla				pla 								; pop handler address
.8efa	fa		plx				plx
.8efb	1a		inc a				inc 	a
.8efc	d0 01		bne $8eff			bne 	_RGINoCarry
.8efe	e8		inx				inx
.8eff					_RGINoCarry:
.8eff	8d 68 06	sta $0668			sta 	GXHandler
.8f02	8e 69 06	stx $0669			stx 	GXHandler+1
.8f05					_RGICommandLoop:
.8f05	b1 30		lda ($30),y			lda 	(codePtr),y
.8f07	c8		iny				iny
.8f08	c9 c2		cmp #$c2			cmp 	#KWD_TO						; is it TO x,y
.8f0a	f0 39		beq $8f45			beq 	_RGI_To
.8f0c	c9 b4		cmp #$b4			cmp 	#KWD_HERE 					; do it here.
.8f0e	f0 3b		beq $8f4b			beq 	_RGI_Here
.8f10	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f12	f0 23		beq $8f37			beq 	_RGI_Exit
.8f14	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f16	f0 1f		beq $8f37			beq 	_RGI_Exit
.8f18	c9 b9		cmp #$b9			cmp 	#KWD_OUTLINE 				; solid or outline
.8f1a	f0 24		beq $8f40			beq 	_RGI_Frame
.8f1c	c9 bf		cmp #$bf			cmp 	#KWD_SOLID
.8f1e	f0 19		beq $8f39			beq 	_RGI_Solid
.8f20	c9 a6		cmp #$a6			cmp 	#KWD_BY 					; by offset
.8f22	f0 31		beq $8f55			beq 	_RGI_By
.8f24	88		dey				dey 								; unpick get.
.8f25	20 7a 8f	jsr $8f7a			jsr 	GCGetCoordinatePair 		; move to here
.8f28	20 9b 8f	jsr $8f9b			jsr 	GCCopyPairToStore 			; save
.8f2b	5a		phy				phy
.8f2c	20 91 8f	jsr $8f91			jsr 	GCLoadAXY 					; load in
.8f2f	09 20		ora #$20			ora 	#16*2 						; move there
.8f31	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f34	7a		ply				ply
.8f35	80 ce		bra $8f05			bra 	_RGICommandLoop 			; and go round
.8f37					_RGI_Exit:
.8f37	88		dey				dey 								; unpick : / EOL
.8f38	60		rts				rts
.8f39					_RGI_Solid:
.8f39	a9 02		lda #$02			lda 	#2
.8f3b	8d 64 06	sta $0664			sta 	gxFillSolid
.8f3e	80 c5		bra $8f05			bra 	_RGICommandLoop
.8f40					_RGI_Frame:
.8f40	9c 64 06	stz $0664			stz 	gxFillSolid
.8f43	80 c0		bra $8f05			bra 	_RGICommandLoop
.8f45					_RGI_To:
.8f45	20 7a 8f	jsr $8f7a			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f48	20 9b 8f	jsr $8f9b			jsr 	GCCopyPairToStore
.8f4b					_RGI_Here:
.8f4b	5a		phy				phy
.8f4c	20 91 8f	jsr $8f91			jsr 	GCLoadAXY 					; load it into AXY
.8f4f	20 77 8f	jsr $8f77			jsr 	_RGICallHandler 			; go do whatever it is.
.8f52	7a		ply				ply
.8f53	80 b0		bra $8f05			bra 	_RGICommandLoop 			; and go round
.8f55					_RGI_By:
.8f55	20 7a 8f	jsr $8f7a			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f58	18		clc				clc
.8f59	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f5c	6d 65 06	adc $0665			adc 	gxxPos
.8f5f	8d 65 06	sta $0665			sta 	gxXPos
.8f62	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8f65	6d 66 06	adc $0666			adc 	gxxPos+1
.8f68	8d 66 06	sta $0666			sta 	gxXPos+1
.8f6b	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8f6e	18		clc				clc
.8f6f	6d 67 06	adc $0667			adc 	gxYPos
.8f72	8d 67 06	sta $0667			sta 	gxYPos
.8f75	80 d4		bra $8f4b			bra 	_RGI_Here
.8f77					_RGICallHandler:
.8f77	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.8f7a					GCGetCoordinatePair:
.8f7a	a2 01		ldx #$01			ldx 	#1
.8f7c	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger
.8f7f	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8f82	29 fe		and #$fe			and 	#$FE
.8f84	d0 08		bne $8f8e			bne 	_GCCPRange
.8f86	20 c6 ab	jsr $abc6			jsr 	CheckComma
.8f89	e8		inx				inx
.8f8a	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger
.8f8d	60		rts				rts
.8f8e					_GCCPRange:
.8f8e	4c a9 b1	jmp $b1a9			jmp 	RangeError
.8f91					GCLoadAXY:
.8f91	ad 66 06	lda $0666			lda 	gxXPos+1
.8f94	ae 65 06	ldx $0665			ldx 	gxXPos
.8f97	ac 67 06	ldy $0667			ldy 	gxYPos
.8f9a	60		rts				rts
.8f9b					GCCopyPairToStore:
.8f9b	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f9e	8d 65 06	sta $0665			sta 	gxXPos
.8fa1	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fa4	8d 66 06	sta $0666			sta 	gxXPos+1
.8fa7	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8faa	8d 67 06	sta $0667			sta 	gxYPos
.8fad	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.8fae					BitmapCtrl:
.8fae	b1 30		lda ($30),y			lda 	(codePtr),y
.8fb0	c8		iny				iny
.8fb1	a2 01		ldx #$01			ldx 	#1
.8fb3	c9 91		cmp #$91			cmp 	#KWD_ON
.8fb5	f0 11		beq $8fc8			beq 	BitmapSwitch
.8fb7	ca		dex				dex
.8fb8	c9 90		cmp #$90			cmp 	#KWD_OFF
.8fba	f0 0c		beq $8fc8			beq 	BitmapSwitch
.8fbc	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get the colour
.8fbf	5a		phy				phy
.8fc0	aa		tax				tax
.8fc1	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.8fc3	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fc6	7a		ply				ply
.8fc7	60		rts				rts
.8fc8					BitmapSwitch:
.8fc8	5a		phy				phy
.8fc9	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.8fcb	a9 02		lda #$02			lda 	#1*2
.8fcd	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fd0	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.8fd2	a0 00		ldy #$00			ldy 	#0
.8fd4	a2 ff		ldx #$ff			ldx 	#$FF
.8fd6	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fd9	9c 64 06	stz $0664			stz 	gxFillSolid
.8fdc	9c 65 06	stz $0665			stz 	gxXPos
.8fdf	9c 66 06	stz $0666			stz 	gxXPos+1
.8fe2	9c 67 06	stz $0667			stz 	gxYPos
.8fe5	a9 20		lda #$20			lda 	#16*2 						; home cursor
.8fe7	a2 00		ldx #$00			ldx 	#0
.8fe9	a0 00		ldy #$00			ldy 	#0
.8feb	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fee	7a		ply				ply
.8fef	60		rts				rts
.8ff0					SpritesCtrl:
.8ff0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ff2	c8		iny				iny
.8ff3	a2 01		ldx #$01			ldx 	#1
.8ff5	c9 91		cmp #$91			cmp 	#KWD_ON
.8ff7	f0 08		beq $9001			beq 	SpriteSwitch
.8ff9	ca		dex				dex
.8ffa	c9 90		cmp #$90			cmp 	#KWD_OFF
.8ffc	f0 03		beq $9001			beq 	SpriteSwitch
.8ffe	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
.9001					SpriteSwitch:
.9001	5a		phy				phy
.9002	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.9004	a9 04		lda #$04			lda 	#2*2
.9006	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9009	7a		ply				ply
.900a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.900b					GfxCommand:
.900b	a2 00		ldx #$00			ldx 	#0
.900d	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; command
.9010	20 c6 ab	jsr $abc6			jsr 	CheckComma
.9013	e8		inx				inx
.9014	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger 		; X
.9017	20 c6 ab	jsr $abc6			jsr 	CheckComma
.901a	e8		inx				inx
.901b	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; Y
.901e	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.9021	4a		lsr a				lsr 	a
.9022	d0 16		bne $903a			bne 	_GfxError
.9024	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.9027	b0 11		bcs $903a			bcs 	_GfxError 					; bit 7 should have been zero
.9029	5a		phy				phy 								; save pos
.902a	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.902d	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.9030	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9033	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9036	b0 02		bcs $903a			bcs 	_GfxError
.9038	7a		ply				ply 								; restore pos and exit.
.9039	60		rts				rts
.903a					_GfxError:
.903a	4c a9 b1	jmp $b1a9			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.903d					Command_GOSUB:
.903d	a2 00		ldx #$00			ldx 	#0
.903f	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.9042	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.9044	20 6b a4	jsr $a46b			jsr 	StackOpen 					; create frame
.9047	20 af a4	jsr $a4af			jsr 	STKSaveCodePosition 		; save current position
.904a	4c 60 90	jmp $9060			jmp 	GotoStackX
.904d					Command_RETURN:
.904d	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.904f	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.9051	20 97 a4	jsr $a497			jsr 	StackCheckFrame
.9054	20 c0 a4	jsr $a4c0			jsr 	STKLoadCodePosition 		; restore code position
.9057	20 89 a4	jsr $a489			jsr 	StackClose
.905a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.905b					GotoCommand:
.905b	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.905d	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger
.9060					GotoStackX:
.9060	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9063	48		pha				pha 								; it is slightly inefficient, just in cases.
.9064	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9067	fa		plx				plx
.9068	20 16 a4	jsr $a416			jsr 	MemorySearch 				; transfer to line number AX.
.906b	90 05		bcc $9072			bcc 	_GotoError 					; not found, off end.
.906d	d0 03		bne $9072			bne 	_GotoError 					; not found exactly
.906f	4c 9b 93	jmp $939b			jmp 	RunNewLine 					; and go straight to new line code.
.9072					_GotoError:
.9072	a9 0d		lda #$0d		lda	#13
.9074	4c ff 97	jmp $97ff		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9077					IfCommand:
.9077	a2 00		ldx #$00			ldx 	#0 							; If what.
.9079	20 0b a3	jsr $a30b			jsr 	EvaluateNumber
.907c	b1 30		lda ($30),y			lda 	(codePtr),y
.907e	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.9080	d0 0a		bne $908c			bne 	_IFStructured
.9082	c8		iny				iny 								; consume THEN
.9083	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; is it zero
.9086	f0 01		beq $9089			beq 	_IfFail 					; if fail, go to next line
.9088	60		rts				rts 								; if THEN just continue
.9089					_IfFail:
.9089	4c 00 94	jmp $9400			jmp 	EOLCommand
.908c					_IfStructured:
.908c	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; is it zero
.908f	d0 07		bne $9098			bne 	_IfExit 					; if not, then continue normally.
.9091	a9 b0		lda #$b0			lda 	#KWD_ELSE 					; look for else/endif
.9093	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.9095	20 71 97	jsr $9771			jsr 	ScanForward 				; and run from there/
.9098					_IfExit:
.9098	60		rts				rts
.9099					ElseCode:
.9099	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.909b	aa		tax				tax 								; so just go to the structure exit
.909c	20 71 97	jsr $9771			jsr 	ScanForward
.909f	60		rts				rts
.90a0					EndIf:
.90a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.90a1					LetCommand:
.90a1	a2 00		ldx #$00			ldx 	#0
.90a3	b1 30		lda ($30),y			lda 	(codePtr),y
.90a5	c9 10		cmp #$10			cmp 	#KWD_AT
.90a7	d0 16		bne $90bf			bne 	_LCStandard
.90a9	c8		iny				iny 								; skip equal
.90aa	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm 				; get a number
.90ad	20 1d 9d	jsr $9d1d			jsr 	Dereference 				; dereference it
.90b0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.90b3	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.90b5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90b8	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.90ba	d0 10		bne $90cc			bne 	_LCMain
.90bc	4c ae b1	jmp $b1ae			jmp 	TypeError 					; was a reference before.
.90bf					_LCStandard:
.90bf	ad f0 9b	lda $9bf0			lda 	PrecedenceLevel+"*"			; precedence > this
.90c2	20 0a 9c	jsr $9c0a			jsr 	EvaluateExpressionAtPrecedence
.90c5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.90c8	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.90ca	f0 0e		beq $90da			beq 	_LetGoProc 					; it's a procedure call.
.90cc					_LCMain:
.90cc	a9 3d		lda #$3d			lda 	#"=" 						; check =
.90ce	20 ce ab	jsr $abce			jsr 	CheckNextA
.90d1	e8		inx				inx 								; RHS
.90d2	20 02 a3	jsr $a302			jsr 	EvaluateValue
.90d5	ca		dex				dex
.90d6	20 dd 90	jsr $90dd			jsr 	AssignVariable
.90d9	60		rts				rts
.90da					_LetGoProc:
.90da	4c 76 92	jmp $9276			jmp 	CallProcedure
.90dd					AssignVariable:
.90dd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.90e0	48		pha				pha 								; save a copy
.90e1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90e4	29 10		and #$10			and 	#NSBIsString
.90e6	d0 0b		bne $90f3			bne 	_ASError
.90e8	68		pla				pla 								; get back
.90e9	29 10		and #$10			and 	#NSBIsString 				; check type
.90eb	d0 03		bne $90f0			bne 	_ASString
.90ed	4c 45 9c	jmp $9c45			jmp 	AssignNumber
.90f0					_ASString:
.90f0	4c b3 9c	jmp $9cb3			jmp 	AssignString
.90f3					_ASError:
.90f3	4c ae b1	jmp $b1ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.90f6					Command_List:
.90f6	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.90f9	9c 14 04	stz $0414			stz 	NSMantissa1+4
.90fc	a9 ff		lda #$ff			lda 	#$FF
.90fe	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9101	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9104	b1 30		lda ($30),y			lda 	(codePtr),y
.9106	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9108	f0 1e		beq $9128			beq 	_CLSecond
.910a	20 86 91	jsr $9186			jsr 	CLIsDigit 					; if not digit, list all
.910d	b0 24		bcs $9133			bcs 	_CLStart
.910f	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.9111	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger
.9114	b1 30		lda ($30),y			lda 	(codePtr),y
.9116	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9118	f0 0e		beq $9128			beq 	_CLSecond 					; if so go get it
.911a	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.911d	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9120	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9123	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9126	80 0b		bra $9133			bra 	_CLStart
.9128					_CLSecond:
.9128	c8		iny				iny 								; consume comma
.9129	20 86 91	jsr $9186			jsr 	CLIsDigit 					; digit found
.912c	b0 05		bcs $9133			bcs 	_CLStart 					; if not, continue listing
.912e	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9130	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger
.9133					_CLStart
.9133	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9135	85 30		sta $30				sta 	codePtr
.9137	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9139	85 31		sta $31				sta 	codePtr+1
.913b					_CLLoop:
.913b	20 98 b3	jsr $b398			jsr 	EXTBreakCheck 				; break check
.913e	f0 30		beq $9170			beq 	_CLExit
.9140	b2 30		lda ($30)			lda 	(codePtr)
.9142	f0 2c		beq $9170			beq 	_CLExit
.9144	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9146	20 73 91	jsr $9173			jsr 	CLCompareLineNo
.9149	90 18		bcc $9163			bcc 	_CLNext
.914b	a2 07		ldx #$07			ldx 	#7
.914d	20 73 91	jsr $9173			jsr 	CLCompareLineNo
.9150	f0 02		beq $9154			beq 	_CLDoThisOne
.9152	b0 0f		bcs $9163			bcs 	_CLNext
.9154					_CLDoThisOne:
.9154	20 cd 95	jsr $95cd			jsr 	ListConvertLine 			; convert line into token Buffer
.9157	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9159	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.915b	20 58 98	jsr $9858			jsr 	PrintStringXA
.915e	a9 0d		lda #$0d			lda 	#13 						; new line
.9160	20 57 b3	jsr $b357			jsr 	EXTPrintCharacter
.9163					_CLNext:
.9163	18		clc				clc
.9164	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9166	65 30		adc $30				adc 	codePtr
.9168	85 30		sta $30				sta 	codePtr
.916a	90 02		bcc $916e			bcc 	_CREExit
.916c	e6 31		inc $31				inc 	codePtr+1
.916e					_CREExit:
.916e	80 cb		bra $913b			bra 	_CLLoop
.9170					_CLExit:
.9170	4c 0a 8c	jmp $8c0a			jmp 	WarmStart
.9173					CLCompareLineNo:
.9173	38		sec				sec
.9174	a0 01		ldy #$01			ldy 	#1
.9176	b1 30		lda ($30),y			lda 	(codePtr),y
.9178	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.917b	85 36		sta $36				sta 	zTemp0
.917d	c8		iny				iny
.917e	b1 30		lda ($30),y			lda 	(codePtr),y
.9180	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9183	05 36		ora $36				ora 	zTemp0
.9185	60		rts				rts
.9186					CLIsDigit:
.9186	b1 30		lda ($30),y			lda 	(codePtr),y
.9188	c9 30		cmp #$30			cmp 	#"0"
.918a	90 03		bcc $918f			bcc	 	_CLIDExitFalse
.918c	c9 3a		cmp #$3a			cmp 	#"9"+1
.918e	60		rts				rts
.918f					_CLIDExitFalse:
.918f	38		sec				sec
.9190	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9191					Command_LOCAL:
.9191	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9193	20 9f 91	jsr $919f			jsr 	LocaliseNextTerm 			; convert term to a local.
.9196	b1 30		lda ($30),y			lda 	(codePtr),y
.9198	c8		iny				iny
.9199	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.919b	f0 f4		beq $9191			beq 	Command_LOCAL
.919d	88		dey				dey 								; unpick pre-get
.919e	60		rts				rts
.919f					LocaliseNextTerm:
.919f	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm 				; evaluate the term
.91a2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.91a5	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.91a7	f0 69		beq $9212			beq		_LNTError
.91a9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.91ac	85 36		sta $36				sta 	zTemp0
.91ae	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.91b1	85 37		sta $37				sta  	zTemp0+1
.91b3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.91b6	29 10		and #$10			and 	#NSBIsString
.91b8	d0 22		bne $91dc			bne 	_LNTPushString
.91ba	5a		phy				phy
.91bb	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.91bd					_LNTPushNumLoop:
.91bd	b1 36		lda ($36),y			lda		(zTemp0),y
.91bf	20 49 a4	jsr $a449			jsr 	StackPushByte
.91c2	a9 00		lda #$00			lda 	#0
.91c4	91 36		sta ($36),y			sta 	(zTemp0),y
.91c6	c8		iny				iny
.91c7	c0 05		cpy #$05			cpy 	#5
.91c9	d0 f2		bne $91bd			bne 	_LNTPushNumLoop
.91cb	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.91cd	20 49 a4	jsr $a449			jsr 	StackPushByte
.91d0	a5 37		lda $37				lda 	zTemp0+1
.91d2	20 49 a4	jsr $a449			jsr 	StackPushByte
.91d5	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.91d7	20 49 a4	jsr $a449			jsr 	StackPushByte
.91da	7a		ply				ply
.91db	60		rts				rts
.91dc					_LNTPushString:
.91dc	5a		phy				phy
.91dd	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.91df	85 38		sta $38				sta 	zTemp1
.91e1	a0 01		ldy #$01			ldy 	#1
.91e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.91e5	85 39		sta $39				sta 	zTemp1+1
.91e7	a0 00		ldy #$00			ldy 	#0 							; output string
.91e9	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.91eb	f0 0a		beq $91f7			beq 	_LNTStringOut
.91ed					_LNTPushStrLoop:
.91ed	b1 38		lda ($38),y			lda 	(zTemp1),y
.91ef	f0 06		beq $91f7			beq 	_LNTStringOut
.91f1	20 49 a4	jsr $a449			jsr 	StackPushByte
.91f4	c8		iny				iny
.91f5	80 f6		bra $91ed			bra 	_LNTPushStrLoop
.91f7					_LNTStringOut:
.91f7	98		tya				tya									; output length
.91f8	20 49 a4	jsr $a449			jsr 	StackPushByte
.91fb	a9 00		lda #$00			lda 	#0 							; clear original string.
.91fd	92 38		sta ($38)			sta 	(zTemp1)
.91ff	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9202	20 49 a4	jsr $a449			jsr 	StackPushByte
.9205	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9208	20 49 a4	jsr $a449			jsr 	StackPushByte
.920b	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.920d	20 49 a4	jsr $a449			jsr 	StackPushByte
.9210	7a		ply				ply
.9211	60		rts				rts
.9212					_LNTError:
.9212	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
.ab65					LocalPopValue:
.ab65	20 62 a4	jsr $a462			jsr 	StackPopByte
.ab68	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ab6a	d0 17		bne $ab83			bne 	_LPVString
.ab6c	20 62 a4	jsr $a462			jsr 	StackPopByte 				; address
.ab6f	85 37		sta $37				sta 	zTemp0+1
.ab71	20 62 a4	jsr $a462			jsr 	StackPopByte
.ab74	85 36		sta $36				sta 	zTemp0
.ab76	5a		phy				phy
.ab77	a0 04		ldy #$04			ldy 	#4 							; copy back
.ab79					_LPVNumberCopy:
.ab79	20 62 a4	jsr $a462			jsr 	StackPopByte
.ab7c	91 36		sta ($36),y			sta 	(zTemp0),y
.ab7e	88		dey				dey
.ab7f	10 f8		bpl $ab79			bpl 	_LPVNumberCopy
.ab81	7a		ply				ply 								; and complete
.ab82	60		rts				rts
.ab83					_LPVString:
.ab83	20 62 a4	jsr $a462			jsr 	StackPopByte 				; address of record => zTemp0
.ab86	85 37		sta $37				sta 	zTemp0+1
.ab88	20 62 a4	jsr $a462			jsr 	StackPopByte
.ab8b	85 36		sta $36				sta 	zTemp0
.ab8d	5a		phy				phy
.ab8e	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.ab90	85 38		sta $38				sta 	zTemp1
.ab92	a0 01		ldy #$01			ldy 	#1
.ab94	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab96	85 39		sta $39				sta 	zTemp1+1
.ab98	20 62 a4	jsr $a462			jsr 	StackPopByte 				; # to get => y
.ab9b	a8		tay				tay
.ab9c	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ab9e	f0 0e		beq $abae			beq 	_LPVStringCopied
.aba0	a9 00		lda #$00			lda 	#0 							; NULL on end
.aba2	91 38		sta ($38),y			sta 	(zTemp1),y
.aba4					_LPVStringCopy:
.aba4	88		dey				dey
.aba5	30 07		bmi $abae			bmi 	_LPVStringCopied
.aba7	20 62 a4	jsr $a462			jsr 	StackPopByte
.abaa	91 38		sta ($38),y			sta 	(zTemp1),y
.abac	80 f6		bra $aba4			bra 	_LPVStringCopy
.abae					_LPVStringCopied:
.abae	fa		plx				plx
.abaf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9215					NewCommand:
.9215	20 f4 a3	jsr $a3f4			jsr 	MemoryNew
.9218	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.921b	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear everything.
.921e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.921f					Command_Print:
.921f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9220					_CPLoop:
.9220	08		php				php 								; save last action flag
.9221	b1 30		lda ($30),y			lda 	(codePtr),y
.9223	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9225	f0 46		beq $926d			beq 	_CPExit
.9227	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9229	f0 42		beq $926d			beq 	_CPExit
.922b	68		pla				pla 								; throw last action flag
.922c	b1 30		lda ($30),y			lda 	(codePtr),y
.922e	c8		iny				iny
.922f	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9231	f0 37		beq $926a			beq 	_CPContinueWithSameLine
.9233	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9235	f0 2e		beq $9265			beq 	_CPTab
.9237	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9239	f0 26		beq $9261			beq 	_CPNewLine
.923b	88		dey				dey 								; undo the get.
.923c	a2 00		ldx #$00			ldx 	#0
.923e	20 02 a3	jsr $a302			jsr 	EvaluateValue 				; get a value into slot 0
.9241	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9244	29 10		and #$10			and 	#NSBIsString
.9246	f0 0b		beq $9253			beq 	_CPNumber
.9248	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.924b	ad 08 04	lda $0408			lda 	NSMantissa0
.924e	20 58 98	jsr $9858			jsr 	PrintStringXA
.9251	80 cc		bra $921f			bra 	Command_Print 				; loop round clearing carry so NL if end
.9253					_CPNumber:
.9253	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9255	20 d8 a1	jsr $a1d8			jsr 	ConvertNumberToString 		; convert to string
.9258	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.925a	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.925c	20 58 98	jsr $9858			jsr 	PrintStringXA
.925f	80 be		bra $921f			bra 	Command_Print 				; loop round clearing carry so NL if end
.9261					_CPNewLine:
.9261	a9 0d		lda #$0d			lda 	#13
.9263	80 02		bra $9267			bra 	_CPPrintChar
.9265					_CPTab:
.9265	a9 09		lda #$09			lda 	#9 							; print TAB
.9267					_CPPrintChar:
.9267	20 57 b3	jsr $b357			jsr 	EXTPrintCharacter
.926a					_CPContinueWithSameLine:
.926a	38		sec				sec 								; loop round with carry set, which
.926b	80 b3		bra $9220			bra 	_CPLoop 					; will inhibit final CR
.926d					_CPExit:
.926d	28		plp				plp 								; get last action flag
.926e	b0 05		bcs $9275			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.9270	a9 0d		lda #$0d			lda 	#13 						; print new line
.9272	20 57 b3	jsr $b357			jsr 	EXTPrintCharacter
.9275					_CPExit2:
.9275	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9276					CallProcedure:
.9276	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9278	b1 30		lda ($30),y			lda 	(codePtr),y
.927a	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.927c	f0 0c		beq $928a			beq 	_CPEndParam
.927e					_CPParamLoop:
.927e	20 08 9c	jsr $9c08			jsr 	EvaluateExpression 			; get parameter onto stack
.9281	e8		inx				inx 								; bump next stack
.9282	b1 30		lda ($30),y			lda 	(codePtr),y
.9284	c8		iny				iny
.9285	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9287	f0 f5		beq $927e			beq 	_CPParamLoop
.9289	88		dey				dey 								; unpick.
.928a					_CPEndParam:
.928a	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.928d	c8		iny				iny									; skip right bracket
.928e	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9290	20 6b a4	jsr $a46b			jsr 	StackOpen
.9293	20 af a4	jsr $a4af			jsr 	STKSaveCodePosition 		; save loop position
.9296	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9299	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.929b	ad 10 04	lda $0410			lda 	NSMantissa1
.929e	85 37		sta $37				sta 	zTemp0+1
.92a0	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.92a2	b2 36		lda ($36)			lda 	(zTemp0)
.92a4	85 30		sta $30				sta 	safePtr
.92a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.92a8	85 31		sta $31				sta 	safePtr+1
.92aa	c8		iny				iny
.92ab	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ad	85 32		sta $32				sta 	safePtr+2
.92af	c8		iny				iny
.92b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.92b2	85 33		sta $33				sta 	safePtr+3
.92b4	c8		iny				iny 								; get Y offset -> Y
.92b5	b1 36		lda ($36),y			lda 	(zTemp0),y
.92b7	a8		tay				tay
.92b8	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.92ba	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.92bd	f0 13		beq $92d2			beq 	_ParamExit 					; if so, exit.
.92bf					_ParamExtract:
.92bf	ca		dex				dex 								; put a local term on the level before
.92c0	20 9f 91	jsr $919f			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.92c3	20 dd 90	jsr $90dd			jsr 	AssignVariable 				; assign stacked value to the variable.
.92c6	e8		inx				inx 								; advance to next parameter to do.
.92c7	e8		inx				inx
.92c8	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.92cb	f0 05		beq $92d2			beq 	_ParamExit
.92cd	20 c6 ab	jsr $abc6			jsr 	CheckComma 					; comma seperating parameters
.92d0	80 ed		bra $92bf			bra 	_ParamExtract
.92d2					_ParamExit:
.92d2	20 be ab	jsr $abbe			jsr 	CheckRightBracket 			; check )
.92d5	60		rts				rts 								; and continue from here
.abb0					Command_ENDPROC:
.abb0	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.abb2	a2 14		ldx #$14			ldx 	#ERRID_PROC
.abb4	20 97 a4	jsr $a497			jsr 	StackCheckFrame
.abb7	20 c0 a4	jsr $a4c0			jsr 	STKLoadCodePosition 		; restore code position
.abba	20 89 a4	jsr $a489			jsr 	StackClose
.abbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.92d6					Command_Read:
.92d6	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.92d8	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm
.92db	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92de	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.92e0	f0 4a		beq $932c			beq 	_CRSyntax 					; check reference (bit 0)
.92e2	20 75 93	jsr $9375			jsr 	SwapDataCodePtrs 			; swap code and data
.92e5	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.92e8	d0 20		bne $930a			bne 	_CRContinueData
.92ea					_CRKeepSearching:
.92ea	a9 ad		lda #$ad			lda 	#KWD_DATA 					; scan for instruction
.92ec	aa		tax				tax
.92ed	20 71 97	jsr $9771			jsr 	ScanForward
.92f0	c9 ad		cmp #$ad			cmp 	#KWD_DATA 					; found data ?
.92f2	f0 16		beq $930a			beq 	_CRHaveData 				; found it
.92f4	18		clc				clc
.92f5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92f7	65 30		adc $30				adc 	codePtr
.92f9	85 30		sta $30				sta 	codePtr
.92fb	90 02		bcc $92ff			bcc 	_CREExit
.92fd	e6 31		inc $31				inc 	codePtr+1
.92ff					_CREExit:
.92ff	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9301	b2 30		lda ($30)			lda 	(codePtr)
.9303	d0 e5		bne $92ea			bne 	_CRKeepSearching
.9305	a9 0b		lda #$0b		lda	#11
.9307	4c ff 97	jmp $97ff		jmp	ErrorHandler
.930a					_CRHaveData:
.930a					_CRContinueData:
.930a	a2 01		ldx #$01			ldx 	#1
.930c	20 02 a3	jsr $a302			jsr 	EvaluateValue 				; evaluate value into slot # 1
.930f	ca		dex				dex
.9310	20 dd 90	jsr $90dd			jsr		AssignVariable 				; do the assignment
.9313	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9316	b1 30		lda ($30),y			lda 	(codePtr),y
.9318	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.931a	d0 04		bne $9320			bne 	_CRSwapBack
.931c	c8		iny				iny 								; consume comma
.931d	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9320					_CRSwapBack:
.9320	20 75 93	jsr $9375			jsr 	SwapDataCodePtrs			; swap them back.
.9323	b1 30		lda ($30),y			lda 	(codePtr),y
.9325	c8		iny				iny
.9326	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9328	f0 ac		beq $92d6			beq 	Command_Read 				; if so go round again.
.932a	88		dey				dey 								; unpick get.
.932b	60		rts				rts
.932c					_CRSyntax:
.932c	4c a4 b1	jmp $b1a4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.932f					RemCommand:
.932f	b1 30		lda ($30),y			lda 	(codePtr),y
.9331	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9333	d0 06		bne $933b			bne 	_RMExit
.9335	c8		iny				iny
.9336	98		tya				tya
.9337	38		sec				sec
.9338	71 30		adc ($30),y			adc 	(codePtr),y
.933a	a8		tay				tay
.933b					_RMExit:
.933b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.933c					Command_REPEAT:
.933c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.933e	20 6b a4	jsr $a46b			jsr 	StackOpen
.9341	20 af a4	jsr $a4af			jsr 	STKSaveCodePosition 		; save loop position
.9344	60		rts				rts
.9345					Command_UNTIL:
.9345	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9347	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9349	20 97 a4	jsr $a497			jsr 	StackCheckFrame
.934c	a2 00		ldx #$00			ldx 	#0
.934e	20 0b a3	jsr $a30b			jsr 	EvaluateNumber 				; work out the number
.9351	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; check if zero
.9354	f0 04		beq $935a			beq 	_CULoopBack 				; if so keep looping
.9356	20 89 a4	jsr $a489			jsr 	StackClose		 			; return
.9359	60		rts				rts
.935a					_CULoopBack:
.935a	20 c0 a4	jsr $a4c0			jsr 	STKLoadCodePosition 		; loop back
.935d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.935e					Command_Restore:
.935e	20 75 93	jsr $9375			jsr 	SwapDataCodePtrs 			; swap code and data
.9361	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9363	85 30		sta $30				sta 	codePtr
.9365	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9367	85 31		sta $31				sta 	codePtr+1
.9369	20 75 93	jsr $9375			jsr 	SwapDataCodePtrs 			; put them back
.936c	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.936e	8d 9b 04	sta $049b			sta 	dataPointer+4
.9371	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9374	60		rts				rts
.9375					SwapDataCodePtrs:
.9375	da		phx				phx
.9376	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9378					_SDCPLoop:
.9378	b5 30		lda $30,x			lda 	safePtr,x
.937a	48		pha				pha
.937b	bd 97 04	lda $0497,x			lda 	dataPointer,x
.937e	95 30		sta $30,x			sta 	safePtr,x
.9380	68		pla				pla
.9381	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9384	ca		dex				dex
.9385	10 f1		bpl $9378			bpl 	_SDCPLoop
.9387	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.938a	8c 9b 04	sty $049b			sty 	dataPointer+4
.938d	a8		tay				tay
.938e	fa		plx				plx
.938f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9390					CommandRUN:
.9390	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9393	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9395	85 30		sta $30				sta 	codePtr
.9397	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9399	85 31		sta $31				sta 	codePtr+1
.939b					RUNNewLine:
.939b	b2 30		lda ($30)			lda 	(codePtr)
.939d	f0 5e		beq $93fd			beq 	CRNoProgram         		; no then END.
.939f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.93a1	9a		txs				txs
.93a2					RUNCodePointerLine:
.93a2	a0 02		ldy #$02			ldy 	#2 							; start of program
.93a4					_CRIncMainLoop:
.93a4	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.93a7	d0 05		bne $93ae			bne 	_CRNoBreakCheck
.93a9	20 98 b3	jsr $b398			jsr 	EXTBreakCheck 				; break check
.93ac	f0 4a		beq $93f8			beq 	_CRBreak
.93ae					_CRNoBreakCheck:
.93ae	c8		iny				iny
.93af					_CRMainLoop:
.93af	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.93b2	b1 30		lda ($30),y			lda 	(codePtr),y
.93b4	10 10		bpl $93c6			bpl 	_CRNotKeyword
.93b6	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.93b8	b0 04		bcs $93be			bcs 	_CRIsKeyword
.93ba	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.93bc	b0 34		bcs $93f2			bcs		_CRSyntaxError
.93be					_CRIsKeyword:
.93be	c8		iny				iny 								; consume command
.93bf	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.93c0	aa		tax				tax 								; put in X for vector jump
.93c1	20 f5 93	jsr $93f5			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.93c4	80 e9		bra $93af			bra 	_CRMainLoop 				; and loop round
.93c6					_CRNotKeyword:
.93c6	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.93c8	f0 da		beq $93a4			beq 	_CRIncMainLoop
.93ca	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.93cc	90 05		bcc $93d3			bcc 	_CRNotVariable
.93ce					_CRGoLet:
.93ce	20 a1 90	jsr $90a1			jsr 	LetCommand
.93d1	80 dc		bra $93af			bra 	_CRMainLoop
.93d3					_CRNotVariable:
.93d3	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.93d5	f0 f7		beq $93ce			beq 	_CRGoLet
.93d7	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.93d9	f0 f3		beq $93ce			beq 	_CRGoLet
.93db	c9 21		cmp #$21			cmp 	#KWD_PLING
.93dd	f0 ef		beq $93ce			beq 	_CRGoLet
.93df	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.93e1	f0 09		beq $93ec			beq 	_CRGoRem
.93e3	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.93e5	d0 0b		bne $93f2			bne 	_CRSyntaxError
.93e7	20 43 8b	jsr $8b43			jsr 	LabelHere
.93ea	80 c3		bra $93af			bra 	_CRMainLoop
.93ec					_CRGoRem:
.93ec	c8		iny				iny
.93ed	20 2f 93	jsr $932f			jsr 	RemCommand
.93f0	80 bd		bra $93af			bra 	_CRMainLoop
.93f2					_CRSyntaxError:
.93f2	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
.93f5					_CRCallVector0:
.93f5	7c a0 94	jmp ($94a0,x)			jmp 	(VectorSet0,x)
.93f8					_CRBreak:
.93f8	a9 01		lda #$01		lda	#1
.93fa	4c ff 97	jmp $97ff		jmp	ErrorHandler
.93fd					CRNoProgram:
.93fd	4c c0 8d	jmp $8dc0			jmp 	EndCommand
.9400					EOLCommand:
.9400	18		clc				clc
.9401	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9403	65 30		adc $30				adc 	codePtr
.9405	85 30		sta $30				sta 	codePtr
.9407	90 02		bcc $940b			bcc 	_CREExit
.9409	e6 31		inc $31				inc 	codePtr+1
.940b					_CREExit:
.940b	80 8e		bra $939b			bra 	RunNewLine
.940d					Shift1Command:
.940d	b1 30		lda ($30),y			lda 	(codePtr),y
.940f	c8		iny				iny
.9410	0a		asl a				asl 	a
.9411	aa		tax				tax
.9412	7c 26 95	jmp ($9526,x)			jmp 	(VectorSet1,x)
.9415					Shift2Command:
.9415	b1 30		lda ($30),y			lda 	(codePtr),y
.9417	c8		iny				iny
.9418	0a		asl a				asl 	a
.9419	aa		tax				tax
.941a	7c 40 95	jmp ($9540,x)			jmp 	(VectorSet2,x)
.941d					Unused1:
.941d					Unused2:
.941d					Unused3:
.941d					Unused4:
.941d	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
>9420							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9420					VectorSetPunc:
>9420	a9 99					.word	ShiftLeft                        ; $00 <<
>9422	a3 98					.word	BinaryCompareLessEqual           ; $01 <=
>9424	99 98					.word	BinaryCompareNotEqual            ; $02 <>
>9426	a4 b1					.word	SyntaxError                      ; $03 !!3
>9428	a4 b1					.word	SyntaxError                      ; $04 ><
>942a	ad 98					.word	BinaryCompareGreaterEqual        ; $05 >=
>942c	ac 99					.word	ShiftRight                       ; $06 >>
>942e	a4 b1					.word	SyntaxError                      ; $07 !!7
>9430	a4 b1					.word	SyntaxError                      ; $08 !!8
>9432	a4 b1					.word	SyntaxError                      ; $09 !!9
>9434	a4 b1					.word	SyntaxError                      ; $0a !!10
>9436	a4 b1					.word	SyntaxError                      ; $0b !!11
>9438	a4 b1					.word	SyntaxError                      ; $0c !!12
>943a	a4 b1					.word	SyntaxError                      ; $0d !!13
>943c	a4 b1					.word	SyntaxError                      ; $0e !!14
>943e	a4 b1					.word	SyntaxError                      ; $0f !!15
>9440	a4 b1					.word	SyntaxError                      ; $10 @
>9442	a4 b1					.word	SyntaxError                      ; $11 !!17
>9444	a4 b1					.word	SyntaxError                      ; $12 !!18
>9446	a4 b1					.word	SyntaxError                      ; $13 [
>9448	d7 ab					.word	IntegerDivide                    ; $14 \
>944a	a4 b1					.word	SyntaxError                      ; $15 ]
>944c	32 9b					.word	EorInteger                       ; $16 ^
>944e	a4 b1					.word	SyntaxError                      ; $17 _
>9450	a4 b1					.word	SyntaxError                      ; $18 `
>9452	a4 b1					.word	SyntaxError                      ; $19 !!25
>9454	a4 b1					.word	SyntaxError                      ; $1a !!26
>9456	a4 b1					.word	SyntaxError                      ; $1b {
>9458	ec 9a					.word	OraInteger                       ; $1c |
>945a	a4 b1					.word	SyntaxError                      ; $1d }
>945c	a4 b1					.word	SyntaxError                      ; $1e ~
>945e	a4 b1					.word	SyntaxError                      ; $1f [7m<7F>[m
>9460	a4 b1					.word	SyntaxError                      ; $20
>9462	78 9b					.word	WordIndirect                     ; $21 !
>9464	a4 b1					.word	SyntaxError                      ; $22 "
>9466	a4 b1					.word	SyntaxError                      ; $23 #
>9468	a4 b1					.word	SyntaxError                      ; $24 $
>946a	24 ac					.word	IntegerModulus                   ; $25 %
>946c	a6 9a					.word	AndInteger                       ; $26 &
>946e	a4 b1					.word	SyntaxError                      ; $27 '
>9470	a4 b1					.word	SyntaxError                      ; $28 (
>9472	a4 b1					.word	SyntaxError                      ; $29 )
>9474	99 ac					.word	MulInteger                       ; $2a *
>9476	40 9a					.word	AddInteger                       ; $2b +
>9478	a4 b1					.word	SyntaxError                      ; $2c ,
>947a	7b 9a					.word	SubInteger                       ; $2d -
>947c	a4 b1					.word	SyntaxError                      ; $2e .
>947e	30 ae					.word	FDivideCommand                   ; $2f /
>9480	a4 b1					.word	SyntaxError                      ; $30 0
>9482	a4 b1					.word	SyntaxError                      ; $31 1
>9484	a4 b1					.word	SyntaxError                      ; $32 2
>9486	a4 b1					.word	SyntaxError                      ; $33 3
>9488	a4 b1					.word	SyntaxError                      ; $34 4
>948a	a4 b1					.word	SyntaxError                      ; $35 5
>948c	a4 b1					.word	SyntaxError                      ; $36 6
>948e	a4 b1					.word	SyntaxError                      ; $37 7
>9490	a4 b1					.word	SyntaxError                      ; $38 8
>9492	a4 b1					.word	SyntaxError                      ; $39 9
>9494	a4 b1					.word	SyntaxError                      ; $3a :
>9496	a4 b1					.word	SyntaxError                      ; $3b ;
>9498	85 98					.word	BinaryCompareLess                ; $3c <
>949a	7b 98					.word	BinaryCompareEqual               ; $3d =
>949c	8f 98					.word	BinaryCompareGreater             ; $3e >
>949e	9f 9b					.word	ByteIndirect                     ; $3f ?
.94a0					VectorSet0:
>94a0	00 94					.word	EOLCommand                       ; $80 !0:EOF
>94a2	0d 94					.word	Shift1Command                    ; $81 !1:SH1
>94a4	15 94					.word	Shift2Command                    ; $82 !2:SH2
>94a6	76 af					.word	AbsUnary                         ; $83 ABS(
>94a8	69 a0					.word	AllocUnary                       ; $84 ALLOC(
>94aa	86 af					.word	AscUnary                         ; $85 ASC(
>94ac	89 a1					.word	ChrUnary                         ; $86 CHR$(
>94ae	a4 b1					.word	SyntaxError                      ; $87 EVENT(
>94b0	77 98					.word	UnaryFalse                       ; $88 FALSE
>94b2	93 af					.word	FracUnary                        ; $89 FRAC(
>94b4	a9 af					.word	IntUnary                         ; $8a INT(
>94b6	ff af					.word	IsValUnary                       ; $8b ISVAL(
>94b8	63 a2					.word	Unary_Left                       ; $8c LEFT$(
>94ba	bb af					.word	LenUnary                         ; $8d LEN(
>94bc	8d a2					.word	Unary_Mid                        ; $8e MID$(
>94be	d9 a0					.word	Unary_Not                        ; $8f NOT(
>94c0	a4 b1					.word	SyntaxError                      ; $90 OFF
>94c2	a4 b1					.word	SyntaxError                      ; $91 ON
>94c4	ef a0					.word	Unary_Random                     ; $92 RANDOM(
>94c6	73 a2					.word	Unary_Right                      ; $93 RIGHT$(
>94c8	08 a1					.word	Unary_Rnd                        ; $94 RND(
>94ca	d5 af					.word	SgnUnary                         ; $95 SGN(
>94cc	9b a1					.word	SpcUnary                         ; $96 SPC(
>94ce	b6 a1					.word	Unary_Str                        ; $97 STR$(
>94d0	a4 b1					.word	SyntaxError                      ; $98 TIMER(
>94d2	6b 98					.word	UnaryTrue                        ; $99 TRUE
>94d4	f5 af					.word	ValUnary                         ; $9a VAL(
>94d6	c3 8d					.word	ForCommand                       ; $9b FOR
>94d8	77 90					.word	IfCommand                        ; $9c IF
>94da	1d 94					.word	Unused1                          ; $9d PROC
>94dc	3c 93					.word	Command_REPEAT                   ; $9e REPEAT
>94de	d0 97					.word	Command_WHILE                    ; $9f WHILE
>94e0	a0 90					.word	EndIf                            ; $a0 ENDIF
>94e2	b0 ab					.word	Command_ENDPROC                  ; $a1 ENDPROC
>94e4	7d 8e					.word	NextCommand                      ; $a2 NEXT
>94e6	1d 94					.word	Unused4                          ; $a3 THEN
>94e8	45 93					.word	Command_UNTIL                    ; $a4 UNTIL
>94ea	f1 97					.word	Command_WEND                     ; $a5 WEND
>94ec	a4 b1					.word	SyntaxError                      ; $a6 BY
>94ee	69 8c					.word	CallCommand                      ; $a7 CALL
>94f0	da 8e					.word	CircleCommand                    ; $a8 CIRCLE
>94f2	a3 8c					.word	ClearCommand                     ; $a9 CLEAR
>94f4	a4 b1					.word	SyntaxError                      ; $aa CLS
>94f6	a4 b1					.word	SyntaxError                      ; $ab COLOR
>94f8	a4 b1					.word	SyntaxError                      ; $ac COLOUR
>94fa	fb 8c					.word	Command_Data                     ; $ad DATA
>94fc	03 8d					.word	DimCommand                       ; $ae DIM
>94fe	1d 94					.word	Unused3                          ; $af DOWNTO
>9500	99 90					.word	ElseCode                         ; $b0 ELSE
>9502	0b 90					.word	GfxCommand                       ; $b1 GFX
>9504	3d 90					.word	Command_GOSUB                    ; $b2 GOSUB
>9506	5b 90					.word	GotoCommand                      ; $b3 GOTO
>9508	a4 b1					.word	SyntaxError                      ; $b4 HERE
>950a	a4 b1					.word	SyntaxError                      ; $b5 IMAGE
>950c	a1 90					.word	LetCommand                       ; $b6 LET
>950e	e5 8e					.word	LineCommand                      ; $b7 LINE
>9510	91 91					.word	Command_LOCAL                    ; $b8 LOCAL
>9512	a4 b1					.word	SyntaxError                      ; $b9 OUTLINE
>9514	1f 92					.word	Command_Print                    ; $ba PRINT
>9516	d6 92					.word	Command_Read                     ; $bb READ
>9518	d6 8e					.word	RectangleCommand                 ; $bc RECT
>951a	2f 93					.word	RemCommand                       ; $bd REM
>951c	4d 90					.word	Command_RETURN                   ; $be RETURN
>951e	a4 b1					.word	SyntaxError                      ; $bf SOLID
>9520	a4 b1					.word	SyntaxError                      ; $c0 SPRITE
>9522	a4 b1					.word	SyntaxError                      ; $c1 TEXT
>9524	1d 94					.word	Unused2                          ; $c2 TO
.9526					VectorSet1:
>9526	a4 b1					.word	SyntaxError                      ; $80 !0:EOF
>9528	a4 b1					.word	SyntaxError                      ; $81 !1:SH1
>952a	a4 b1					.word	SyntaxError                      ; $82 !2:SH2
>952c	3a 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>952e	59 8c					.word	AssertCommand                    ; $84 ASSERT
>9530	ae 8f					.word	BitmapCtrl                       ; $85 BITMAP
>9532	c0 8d					.word	EndCommand                       ; $86 END
>9534	f6 90					.word	Command_List                     ; $87 LIST
>9536	15 92					.word	NewCommand                       ; $88 NEW
>9538	5e 93					.word	Command_Restore                  ; $89 RESTORE
>953a	90 93					.word	CommandRUN                       ; $8a RUN
>953c	f0 8f					.word	SpritesCtrl                      ; $8b SPRITES
>953e	c8 95					.word	StopCommand                      ; $8c STOP
.9540					VectorSet2:
>9540	a4 b1					.word	SyntaxError                      ; $80 !0:EOF
>9542	a4 b1					.word	SyntaxError                      ; $81 !1:SH1
>9544	a4 b1					.word	SyntaxError                      ; $82 !2:SH2
>9546	63 b0					.word	Assemble_adc                     ; $83 ADC
>9548	5b b0					.word	Assemble_and                     ; $84 AND
>954a	77 b0					.word	Assemble_asl                     ; $85 ASL
>954c	e1 b0					.word	Assemble_bcc                     ; $86 BCC
>954e	e5 b0					.word	Assemble_bcs                     ; $87 BCS
>9550	ed b0					.word	Assemble_beq                     ; $88 BEQ
>9552	a4 b0					.word	Assemble_bit                     ; $89 BIT
>9554	d5 b0					.word	Assemble_bmi                     ; $8a BMI
>9556	e9 b0					.word	Assemble_bne                     ; $8b BNE
>9558	d1 b0					.word	Assemble_bpl                     ; $8c BPL
>955a	f1 b0					.word	Assemble_bra                     ; $8d BRA
>955c	f5 b0					.word	Assemble_brk                     ; $8e BRK
>955e	d9 b0					.word	Assemble_bvc                     ; $8f BVC
>9560	dd b0					.word	Assemble_bvs                     ; $90 BVS
>9562	fd b0					.word	Assemble_clc                     ; $91 CLC
>9564	51 b1					.word	Assemble_cld                     ; $92 CLD
>9566	11 b1					.word	Assemble_cli                     ; $93 CLI
>9568	41 b1					.word	Assemble_clv                     ; $94 CLV
>956a	6f b0					.word	Assemble_cmp                     ; $95 CMP
>956c	b8 b0					.word	Assemble_cpx                     ; $96 CPX
>956e	b3 b0					.word	Assemble_cpy                     ; $97 CPY
>9570	95 b0					.word	Assemble_dec                     ; $98 DEC
>9572	4d b1					.word	Assemble_dex                     ; $99 DEX
>9574	29 b1					.word	Assemble_dey                     ; $9a DEY
>9576	5f b0					.word	Assemble_eor                     ; $9b EOR
>9578	9a b0					.word	Assemble_inc                     ; $9c INC
>957a	5d b1					.word	Assemble_inx                     ; $9d INX
>957c	49 b1					.word	Assemble_iny                     ; $9e INY
>957e	cc b0					.word	Assemble_jmp                     ; $9f JMP
>9580	c7 b0					.word	Assemble_jsr                     ; $a0 JSR
>9582	6b b0					.word	Assemble_lda                     ; $a1 LDA
>9584	90 b0					.word	Assemble_ldx                     ; $a2 LDX
>9586	ae b0					.word	Assemble_ldy                     ; $a3 LDY
>9588	81 b0					.word	Assemble_lsr                     ; $a4 LSR
>958a	61 b1					.word	Assemble_nop                     ; $a5 NOP
>958c	57 b0					.word	Assemble_ora                     ; $a6 ORA
>958e	0d b1					.word	Assemble_pha                     ; $a7 PHA
>9590	f9 b0					.word	Assemble_php                     ; $a8 PHP
>9592	55 b1					.word	Assemble_phx                     ; $a9 PHX
>9594	15 b1					.word	Assemble_phy                     ; $aa PHY
>9596	1d b1					.word	Assemble_pla                     ; $ab PLA
>9598	01 b1					.word	Assemble_plp                     ; $ac PLP
>959a	69 b1					.word	Assemble_plx                     ; $ad PLX
>959c	25 b1					.word	Assemble_ply                     ; $ae PLY
>959e	7c b0					.word	Assemble_rol                     ; $af ROL
>95a0	86 b0					.word	Assemble_ror                     ; $b0 ROR
>95a2	09 b1					.word	Assemble_rti                     ; $b1 RTI
>95a4	19 b1					.word	Assemble_rts                     ; $b2 RTS
>95a6	73 b0					.word	Assemble_sbc                     ; $b3 SBC
>95a8	05 b1					.word	Assemble_sec                     ; $b4 SEC
>95aa	65 b1					.word	Assemble_sed                     ; $b5 SED
>95ac	21 b1					.word	Assemble_sei                     ; $b6 SEI
>95ae	67 b0					.word	Assemble_sta                     ; $b7 STA
>95b0	59 b1					.word	Assemble_stp                     ; $b8 STP
>95b2	8b b0					.word	Assemble_stx                     ; $b9 STX
>95b4	a9 b0					.word	Assemble_sty                     ; $ba STY
>95b6	9f b0					.word	Assemble_stz                     ; $bb STZ
>95b8	3d b1					.word	Assemble_tax                     ; $bc TAX
>95ba	39 b1					.word	Assemble_tay                     ; $bd TAY
>95bc	c2 b0					.word	Assemble_trb                     ; $be TRB
>95be	bd b0					.word	Assemble_tsb                     ; $bf TSB
>95c0	45 b1					.word	Assemble_tsx                     ; $c0 TSX
>95c2	2d b1					.word	Assemble_txa                     ; $c1 TXA
>95c4	35 b1					.word	Assemble_txs                     ; $c2 TXS
>95c6	31 b1					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.95c8					StopCommand:
.95c8	a9 08		lda #$08		lda	#8
.95ca	4c ff 97	jmp $97ff		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.95cd					ListConvertLine:
.95cd	9c 9d 04	stz $049d			stz 	tbOffset
.95d0	9c a9 04	stz $04a9			stz 	tokenBuffer
.95d3	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.95d5	b1 30		lda ($30),y			lda 	(codePtr),y
.95d7	aa		tax				tax
.95d8	88		dey				dey
.95d9	b1 30		lda ($30),y			lda 	(codePtr),y
.95db	20 1a ad	jsr $ad1a			jsr 	ConvertInt16
.95de	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.95e0	86 37		stx $37				stx 	zTemp0+1
.95e2	a0 00		ldy #$00			ldy 	#0
.95e4					_LCCopyNumber:
.95e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.95e6	20 e6 96	jsr $96e6			jsr 	LCLWrite
.95e9	c8		iny				iny
.95ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.95ec	d0 f6		bne $95e4			bne 	_LCCopyNumber
.95ee					_LCPadOut:
.95ee	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.95f0	20 e6 96	jsr $96e6			jsr 	LCLWrite
.95f3	ad 9d 04	lda $049d			lda 	tbOffset
.95f6	c9 06		cmp #$06			cmp 	#6
.95f8	d0 f4		bne $95ee			bne 	_LCPadOut
.95fa	a0 03		ldy #$03			ldy 	#3 							; start position.
.95fc					_LCMainLoop:
.95fc	b1 30		lda ($30),y			lda 	(codePtr),y
.95fe	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9600	f0 17		beq $9619			beq 	_LCExit
.9602	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9604	90 14		bcc $961a			bcc 	_LCDoubles
.9606	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9608	90 20		bcc $962a			bcc 	_LCShiftPunc
.960a	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.960c	90 2b		bcc $9639			bcc 	_LCPunctuation
.960e	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9610	90 2d		bcc $963f			bcc 	_LCIdentifiers
.9612	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9614	90 49		bcc $965f			bcc 	_LCTokens
.9616	4c ba 96	jmp $96ba			jmp 	_LCData 					; 254-5 are data objects
.9619					_LCExit:
.9619	60		rts				rts
.961a					_LCDoubles:
.961a	48		pha				pha
.961b	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.961c	29 02		and #$02			and 	#2
.961e	09 3c		ora #$3c			ora 	#60 						; make < >
.9620	20 e6 96	jsr $96e6			jsr 	LCLWrite
.9623	68		pla				pla 								; restore, do lower bit
.9624	29 03		and #$03			and 	#3
.9626	09 3c		ora #$3c			ora 	#60
.9628	80 0f		bra $9639			bra		_LCPunctuation 				; print, increment, loop
.962a					_LCShiftPunc:
.962a	aa		tax				tax 								; save in X
.962b	29 07		and #$07			and 	#7 							; lower 3 bits
.962d	f0 02		beq $9631			beq 	_LCNoAdd
.962f	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9631					_LCNoAdd:
.9631	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9633	90 02		bcc $9637			bcc 	_LCNoAdd2
.9635	09 20		ora #$20			ora 	#32 						; adds $20
.9637					_LCNoAdd2:
.9637	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9639					_LCPunctuation:
.9639	c8		iny				iny 								; consume character
.963a	20 e6 96	jsr $96e6			jsr 	LCLWrite 					; write it out.
.963d	80 bd		bra $95fc			bra 	_LCMainLoop 				; go round again.
.963f					_LCIdentifiers:
.963f	18		clc				clc 								; convert to physical address
.9640	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9642	85 37		sta $37				sta 	zTemp0+1
.9644	c8		iny				iny
.9645	b1 30		lda ($30),y			lda 	(codePtr),y
.9647	85 36		sta $36				sta 	zTemp0
.9649	c8		iny				iny
.964a	5a		phy				phy 								; save position
.964b	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.964d					_LCOutIdentifier:
.964d	c8		iny				iny
.964e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9650	29 7f		and #$7f			and 	#$7F
.9652	20 14 97	jsr $9714			jsr 	LCLLowerCase
.9655	20 e6 96	jsr $96e6			jsr 	LCLWrite
.9658	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.965a	10 f1		bpl $964d			bpl 	_LCOutIdentifier
.965c	7a		ply				ply 								; restore position
.965d	80 9d		bra $95fc			bra 	_LCMainLoop
.965f					_LCTokens:
.965f	aa		tax				tax 								; token in X
.9660	a9 6a		lda #$6a			lda 	#((KeywordSet2) & $FF)
.9662	85 36		sta $36				sta 	0+zTemp0
.9664	a9 a7		lda #$a7			lda 	#((KeywordSet2) >> 8)
.9666	85 37		sta $37				sta 	1+zTemp0
.9668	e0 82		cpx #$82			cpx 	#$82
.966a	f0 16		beq $9682			beq 	_LCUseShift
.966c	a9 1c		lda #$1c			lda 	#((KeywordSet1) & $FF)
.966e	85 36		sta $36				sta 	0+zTemp0
.9670	a9 a7		lda #$a7			lda 	#((KeywordSet1) >> 8)
.9672	85 37		sta $37				sta 	1+zTemp0
.9674	e0 81		cpx #$81			cpx 	#$81
.9676	f0 0a		beq $9682			beq 	_LCUseShift
.9678	a9 73		lda #$73			lda 	#((KeywordSet0) & $FF)
.967a	85 36		sta $36				sta 	0+zTemp0
.967c	a9 a5		lda #$a5			lda 	#((KeywordSet0) >> 8)
.967e	85 37		sta $37				sta 	1+zTemp0
.9680	80 01		bra $9683			bra 	_LCNoShift
.9682					_LCUseShift:
.9682	c8		iny				iny
.9683					_LCNoShift:
.9683	20 f5 96	jsr $96f5			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9686	b1 30		lda ($30),y			lda 	(codePtr),y
.9688	aa		tax				tax 								; into X
.9689					_LCFindText:
.9689	ca		dex				dex
.968a	10 0e		bpl $969a			bpl 	_LCFoundText 				; found text.
.968c	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.968e	1a		inc a				inc 	a 							; one extra for size
.968f	38		sec				sec 								; one extra for checksum
.9690	65 36		adc $36				adc 	zTemp0 						; go to next token
.9692	85 36		sta $36				sta 	zTemp0
.9694	90 f3		bcc $9689			bcc 	_LCFindText
.9696	e6 37		inc $37				inc 	zTemp0+1
.9698	80 ef		bra $9689			bra 	_LCFindText
.969a					_LCFoundText:
.969a	5a		phy				phy 								; save List position
.969b	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.969d	aa		tax				tax
.969e	a0 02		ldy #$02			ldy 	#2
.96a0					_LCCopyToken:
.96a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.96a2	20 14 97	jsr $9714			jsr 	LCLLowerCase
.96a5	20 e6 96	jsr $96e6			jsr 	LCLWrite
.96a8	c8		iny				iny
.96a9	ca		dex				dex
.96aa	d0 f4		bne $96a0			bne 	_LCCopyToken
.96ac	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.96ae	f0 05		beq $96b5			beq 	_LCNoSpace
.96b0	a9 20		lda #$20			lda 	#' '
.96b2	20 e6 96	jsr $96e6			jsr 	LCLWrite
.96b5					_LCNoSpace:
.96b5	7a		ply				ply 								; restore position.
.96b6	c8		iny				iny 								; consume token
.96b7	4c fc 95	jmp $95fc			jmp 	_LCMainLoop 				; and go around again.
.96ba					_LCData:
.96ba	48		pha				pha 								; save type $FE/$FF
.96bb	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.96bd	c9 fe		cmp #$fe			cmp 	#$FE
.96bf	f0 02		beq $96c3			beq 	_LCHaveOpener
.96c1	a2 22		ldx #$22			ldx 	#'"'
.96c3					_LCHaveOpener:
.96c3	8a		txa				txa 								; output prefix (# or ")
.96c4	20 e6 96	jsr $96e6			jsr 	LCLWrite
.96c7	c8		iny				iny 								; get count
.96c8	b1 30		lda ($30),y			lda 	(codePtr),y
.96ca	aa		tax				tax
.96cb	c8		iny				iny 								; point at first character
.96cc					_LCOutData:
.96cc	b1 30		lda ($30),y			lda 	(codePtr),y
.96ce	c9 00		cmp #$00			cmp 	#0
.96d0	f0 03		beq $96d5			beq 	_LCNoPrint
.96d2	20 e6 96	jsr $96e6			jsr 	LCLWrite
.96d5					_LCNoPrint:
.96d5	c8		iny				iny
.96d6	ca		dex				dex
.96d7	d0 f3		bne $96cc			bne 	_LCOutData
.96d9	68		pla				pla 								; closing " required ?
.96da	c9 ff		cmp #$ff			cmp 	#$FF
.96dc	d0 05		bne $96e3			bne 	_LCNoQuote
.96de	a9 22		lda #$22			lda 	#'"'
.96e0	20 e6 96	jsr $96e6			jsr 	LCLWrite
.96e3					_LCNoQuote:
.96e3	4c fc 95	jmp $95fc			jmp 	_LCMainLoop
.96e6					LCLWrite:
.96e6	da		phx				phx
.96e7	ae 9d 04	ldx $049d			ldx 	tbOffset
.96ea	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.96ed	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.96f0	ee 9d 04	inc $049d			inc 	tbOffset
.96f3	fa		plx				plx
.96f4	60		rts				rts
.96f5					LCCheckSpaceRequired:
.96f5	ae 9d 04	ldx $049d			ldx 	tbOffset
.96f8	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.96fb	20 14 97	jsr $9714			jsr 	LCLLowerCase 				; saves a little effort
.96fe	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9700	90 11		bcc $9713			bcc 	_LCCSRExit
.9702	c9 3a		cmp #$3a			cmp 	#"9"+1
.9704	90 08		bcc $970e			bcc 	_LCCSRSpace
.9706	c9 61		cmp #$61			cmp 	#"a"
.9708	90 09		bcc $9713			bcc 	_LCCSRExit
.970a	c9 7b		cmp #$7b			cmp 	#"z"+1
.970c	b0 05		bcs $9713			bcs 	_LCCSRExit
.970e					_LCCSRSpace:
.970e	a9 20		lda #$20			lda 	#' '
.9710	20 e6 96	jsr $96e6			jsr 	LCLWrite
.9713					_LCCSRExit:
.9713	60		rts				rts
.9714					LCLLowerCase:
.9714	c9 41		cmp #$41			cmp 	#"A"
.9716	90 06		bcc $971e			bcc 	_LCLLCOut
.9718	c9 5b		cmp #$5b			cmp 	#"Z"+1
.971a	b0 02		bcs $971e			bcs 	_LCLLCOut
.971c	69 20		adc #$20			adc 	#$20
.971e					_LCLLCOut:
.971e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.971f					ProcedureScan:
.971f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9721	85 30		sta $30				sta 	codePtr
.9723	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9725	85 31		sta $31				sta 	codePtr+1
.9727					_PSLoop:
.9727	b2 30		lda ($30)			lda 	(codePtr)
.9729	f0 42		beq $976d			beq 	_PSExit
.972b	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.972d	b1 30		lda ($30),y			lda 	(codePtr),y
.972f	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.9731	d0 2d		bne $9760			bne 	_PSNext
.9733	c8		iny				iny 								; get the address of the record to zTemp0 and
.9734	b1 30		lda ($30),y			lda 	(codePtr),y
.9736	29 c0		and #$c0			and 	#$C0
.9738	c9 40		cmp #$40			cmp 	#$40
.973a	d0 32		bne $976e			bne 	_PSSyntax
.973c	b1 30		lda ($30),y			lda 	(codePtr),y
.973e	18		clc				clc
.973f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9741	85 37		sta $37				sta 	zTemp0+1
.9743	c8		iny				iny 								; LSB
.9744	b1 30		lda ($30),y			lda 	(codePtr),y
.9746	85 36		sta $36				sta 	zTemp0
.9748	c8		iny				iny 								; character after variable call.
.9749	98		tya				tya 								; save Y offset at +7
.974a	a0 07		ldy #$07			ldy 	#7
.974c	91 36		sta ($36),y			sta 	(zTemp0),y
.974e	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9750	a0 02		ldy #$02			ldy 	#2
.9752	91 36		sta ($36),y			sta 	(zTemp0),y
.9754	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9756					_PSCopy:
.9756	b5 30		lda $30,x			lda 	safePtr,x
.9758	c8		iny				iny
.9759	91 36		sta ($36),y			sta 	(zTemp0),y
.975b	e8		inx				inx
.975c	e0 04		cpx #$04			cpx 	#4
.975e	d0 f6		bne $9756			bne 	_PSCopy
.9760					_PSNext:
.9760	18		clc				clc
.9761	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9763	65 30		adc $30				adc 	codePtr
.9765	85 30		sta $30				sta 	codePtr
.9767	90 02		bcc $976b			bcc 	_CREExit
.9769	e6 31		inc $31				inc 	codePtr+1
.976b					_CREExit:
.976b	80 ba		bra $9727			bra 	_PSLoop
.976d					_PSExit:
.976d	60		rts				rts
.976e					_PSSyntax:
.976e	4c a4 b1	jmp $b1a4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9771					ScanForward:
.9771	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9773	86 37		stx $37				stx 	zTemp0+1
.9775	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9777					_ScanLoop:
.9777	b1 30		lda ($30),y			lda 	(codePtr),y
.9779	c8		iny				iny
.977a	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.977c	d0 0e		bne $978c			bne 	_ScanGoNext
.977e	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9780	f0 04		beq $9786			beq 	_ScanMatch
.9782	c5 37		cmp $37				cmp 	zTemp0+1
.9784	d0 06		bne $978c			bne 	_ScanGoNext
.9786					_ScanMatch:
.9786	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9788	d0 01		bne $978b			bne 	_ScanNotEndEOL
.978a	88		dey				dey
.978b					_ScanNotEndEOL:
.978b	60		rts				rts
.978c					_ScanGoNext:
.978c	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.978e	90 e7		bcc $9777			bcc 	_ScanLoop
.9790	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9792	90 18		bcc $97ac			bcc 	_ScanSkipOne
.9794	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9796	b0 2f		bcs $97c7			bcs 	_ScanSkipData
.9798	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.979a	90 db		bcc $9777			bcc 	_ScanLoop 					; if not, ordinary keywords.
.979c	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.979e	b0 d7		bcs $9777			bcs 	_ScanLoop
.97a0	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.97a2	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.97a4	b0 d1		bcs $9777			bcs 	_ScanLoop
.97a6	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.97a8	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.97aa	80 cb		bra $9777			bra 	_ScanLoop
.97ac					_ScanSkipOne:
.97ac	c8		iny				iny 								; consume the extra one.
.97ad	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.97af	d0 c6		bne $9777			bne 	_ScanLoop
.97b1	18		clc				clc
.97b2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.97b4	65 30		adc $30				adc 	codePtr
.97b6	85 30		sta $30				sta 	codePtr
.97b8	90 02		bcc $97bc			bcc 	_CREExit
.97ba	e6 31		inc $31				inc 	codePtr+1
.97bc					_CREExit:
.97bc	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.97be	b2 30		lda ($30)			lda 	(codePtr)
.97c0	d0 b5		bne $9777			bne 	_ScanLoop 					; if not zero, more to scan
.97c2	a9 13		lda #$13		lda	#19
.97c4	4c ff 97	jmp $97ff		jmp	ErrorHandler
.97c7					_ScanSkipData:
.97c7	88		dey				dey 								; point at data token
.97c8	c8		iny				iny
.97c9	98		tya				tya
.97ca	38		sec				sec
.97cb	71 30		adc ($30),y			adc 	(codePtr),y
.97cd	a8		tay				tay
.97ce	80 a7		bra $9777			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.97d0					Command_WHILE:
.97d0	5a		phy				phy 								; save position of the test
.97d1	a2 00		ldx #$00			ldx 	#0
.97d3	20 0b a3	jsr $a30b			jsr 	EvaluateNumber 				; work out the number
.97d6	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; check if zero
.97d9	f0 0e		beq $97e9			beq 	_WHExitLoop 				; if so exit the loop
.97db	98		tya				tya 								; position *after* test.
.97dc	7a		ply				ply 								; restore position before test, at WHILE
.97dd	88		dey				dey
.97de	48		pha				pha 								; push after test on the stack
.97df	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.97e1	20 6b a4	jsr $a46b			jsr 	StackOpen
.97e4	20 af a4	jsr $a4af			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.97e7	7a		ply				ply 								; restore the position *after* the test
.97e8	60		rts				rts
.97e9					_WHExitLoop:
.97e9	68		pla				pla 								; throw post loop position
.97ea	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.97ec	aa		tax				tax
.97ed	20 71 97	jsr $9771			jsr 	ScanForward
.97f0	60		rts				rts
.97f1					Command_WEND:
.97f1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.97f3	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.97f5	20 97 a4	jsr $a497			jsr 	StackCheckFrame
.97f8	20 c0 a4	jsr $a4c0			jsr 	STKLoadCodePosition 		; loop back
.97fb	20 89 a4	jsr $a489			jsr 	StackClose		 			; erase the frame
.97fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.abbe					CheckRightBracket:
.abbe	b1 30		lda ($30),y			lda 	(codePtr),y
.abc0	c8		iny				iny
.abc1	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.abc3	d0 0f		bne $abd4			bne 	CNAFail
.abc5	60		rts				rts
.abc6					CheckComma:
.abc6	b1 30		lda ($30),y			lda 	(codePtr),y
.abc8	c8		iny				iny
.abc9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.abcb	d0 07		bne $abd4			bne 	CNAFail
.abcd	60		rts				rts
.abce					CheckNextA:
.abce	d1 30		cmp ($30),y			cmp 	(codePtr),y
.abd0	d0 02		bne $abd4			bne 	CNAFail
.abd2	c8		iny				iny 								; skip character
.abd3	60		rts				rts 								; and exit
.abd4					CNAFail:
.abd4	4c a4 b1	jmp $b1a4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.97ff					ErrorHandler:
.97ff	a8		tay				tay 								; find the error text
.9800	f0 49		beq $984b			beq 	_EHEnd
.9802	a2 00		ldx #$00			ldx 	#0
.9804	a9 bd		lda #$bd			lda 	#((ErrorText) & $FF)
.9806	85 36		sta $36				sta 	0+zTemp0
.9808	a9 b1		lda #$b1			lda 	#((ErrorText) >> 8)
.980a	85 37		sta $37				sta 	1+zTemp0
.980c					_EHFind:
.980c	88		dey				dey 								; found the error text ?
.980d	f0 0e		beq $981d			beq 	_EHFound
.980f					_EHFindZero:
.980f	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9811	e6 36		inc $36				inc 	zTemp0
.9813	d0 02		bne $9817			bne 	_EHFNoCarry
.9815	e6 37		inc $37				inc 	zTemp0+1
.9817					_EHFNoCarry:
.9817	c9 00		cmp #$00			cmp 	#0
.9819	d0 f4		bne $980f			bne 	_EHFindZero
.981b	80 ef		bra $980c			bra 	_EHFind
.981d					_EHFound:
.981d	a5 36		lda $36				lda 	zTemp0 						; print message
.981f	a6 37		ldx $37				ldx 	zTemp0+1
.9821	20 58 98	jsr $9858			jsr 	PrintStringXA
.9824	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9826	b1 30		lda ($30),y			lda 	(codePtr),y
.9828	d0 05		bne $982f			bne 	_EHAtMsg
.982a	c8		iny				iny
.982b	b1 30		lda ($30),y			lda 	(codePtr),y
.982d	f0 17		beq $9846			beq 	_EHCREnd
.982f					_EHAtMsg:
.982f	a2 98		ldx #$98			ldx 	#_AtMsg >> 8 				; print " at "
.9831	a9 4e		lda #$4e			lda 	#_AtMsg & $FF
.9833	20 58 98	jsr $9858			jsr 	PrintStringXA
.9836	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9838	b1 30		lda ($30),y			lda 	(codePtr),y
.983a	48		pha				pha
.983b	c8		iny				iny
.983c	b1 30		lda ($30),y			lda 	(codePtr),y
.983e	aa		tax				tax
.983f	68		pla				pla
.9840	20 1a ad	jsr $ad1a			jsr 	ConvertInt16 				; convert XA to string
.9843	20 58 98	jsr $9858			jsr 	PrintStringXA 				; and print it.
.9846					_EHCREnd:
.9846	a9 0d		lda #$0d			lda 	#13 						; new line
.9848	20 57 b3	jsr $b357			jsr 	EXTPrintCharacter
.984b					_EHEnd:
.984b	4c 0a 8c	jmp $8c0a			jmp 	WarmStart
>984e	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9856	20 00
.9858					PrintStringXA:
.9858	5a		phy				phy
.9859	86 37		stx $37				stx 	zTemp0+1
.985b	85 36		sta $36				sta 	zTemp0
.985d	a0 00		ldy #$00			ldy 	#0
.985f					_PSXALoop:
.985f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9861	f0 06		beq $9869			beq 	_PSXAExit
.9863	20 57 b3	jsr $b357			jsr 	EXTPrintCharacter
.9866	c8		iny				iny
.9867	80 f6		bra $985f			bra 	_PSXALoop
.9869					_PSXAExit:
.9869	7a		ply				ply
.986a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.986b					UnaryTrue:
.986b	fa		plx				plx
.986c					ReturnTrue:
.986c	a9 01		lda #$01			lda 	#1  						; set to 1
.986e	20 b9 a3	jsr $a3b9			jsr 	NSMSetByte
.9871	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9873	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9876	60		rts				rts
.9877					UnaryFalse:
.9877	fa		plx				plx
.9878					ReturnFalse:
.9878	4c b7 a3	jmp $a3b7			jmp 	NSMSetZero 					; set it all to zero
.987b					BinaryCompareEqual:
.987b	fa		plx				plx
.987c	20 b7 98	jsr $98b7			jsr 	CompareBaseCode
.987f	c9 00		cmp #$00			cmp 	#0
.9881	f0 e9		beq $986c			beq 	ReturnTrue
.9883	80 f3		bra $9878			bra 	ReturnFalse
.9885					BinaryCompareLess:
.9885	fa		plx				plx
.9886	20 b7 98	jsr $98b7			jsr 	CompareBaseCode
.9889	c9 ff		cmp #$ff			cmp 	#$FF
.988b	f0 df		beq $986c			beq 	ReturnTrue
.988d	80 e9		bra $9878			bra 	ReturnFalse
.988f					BinaryCompareGreater:
.988f	fa		plx				plx
.9890	20 b7 98	jsr $98b7			jsr 	CompareBaseCode
.9893	c9 01		cmp #$01			cmp 	#1
.9895	f0 d5		beq $986c			beq 	ReturnTrue
.9897	80 df		bra $9878			bra 	ReturnFalse
.9899					BinaryCompareNotEqual:
.9899	fa		plx				plx
.989a	20 b7 98	jsr $98b7			jsr 	CompareBaseCode
.989d	c9 00		cmp #$00			cmp 	#0
.989f	d0 cb		bne $986c			bne 	ReturnTrue
.98a1	80 d5		bra $9878			bra 	ReturnFalse
.98a3					BinaryCompareLessEqual:
.98a3	fa		plx				plx
.98a4	20 b7 98	jsr $98b7			jsr 	CompareBaseCode
.98a7	c9 01		cmp #$01			cmp 	#1
.98a9	d0 c1		bne $986c			bne 	ReturnTrue
.98ab	80 cb		bra $9878			bra 	ReturnFalse
.98ad					BinaryCompareGreaterEqual:
.98ad	fa		plx				plx
.98ae	20 b7 98	jsr $98b7			jsr 	CompareBaseCode
.98b1	c9 ff		cmp #$ff			cmp 	#$FF
.98b3	d0 b7		bne $986c			bne 	ReturnTrue
.98b5	80 c1		bra $9878			bra 	ReturnFalse
.98b7					CompareBaseCode:
.98b7	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; make both values if references.
.98ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.98bd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98c0	29 10		and #$10			and 	#NSTString
.98c2	d0 40		bne $9904			bne 	_CBCString
.98c4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.98c7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98ca	d0 3b		bne $9907			bne 	_CBCFloat
.98cc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.98cf	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98d2	29 08		and #$08			and 	#NSTFloat
.98d4	d0 31		bne $9907			bne 	_CBCFloat
.98d6	20 0a 99	jsr $990a			jsr 	CompareFixMinusZero
.98d9	e8		inx				inx
.98da	20 0a 99	jsr $990a			jsr 	CompareFixMinusZero
.98dd	ca		dex				dex
.98de	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.98e1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.98e4	10 0b		bpl $98f1			bpl 	_CDCSameSign
.98e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.98e9	30 16		bmi $9901			bmi 	_CBCLess 					; return $FF
.98eb					_CBCGreater:
.98eb	a9 01		lda #$01			lda 	#1
.98ed	60		rts				rts
.98ee					_CBCEqual:
.98ee	a9 00		lda #$00			lda 	#0
.98f0	60		rts				rts
.98f1					_CDCSameSign:
.98f1	20 1a 9a	jsr $9a1a			jsr 	SubTopTwoStack 				; unsigned subtract
.98f4	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; or the mantissa together
.98f7	f0 f5		beq $98ee			beq 	_CBCEqual 					; -0 == 0
.98f9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.98fc	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.98ff	10 ea		bpl $98eb			bpl 	_CBCGreater
.9901					_CBCLess:
.9901	a9 ff		lda #$ff			lda 	#$FF
.9903	60		rts				rts
.9904					_CBCString:
.9904	4c 70 99	jmp $9970			jmp 	CompareStrings
.9907					_CBCFloat:
.9907	4c 16 ae	jmp $ae16			jmp 	CompareFloat
.990a					CompareFixMinusZero:
.990a	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero
.990d	d0 03		bne $9912			bne 	_CFXMZNotZero
.990f	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9912					_CFXMZNotZero:
.9912	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9913					StringConcat:
.9913	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9916	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9919	29 18		and #$18			and 	#NSBTypeMask
.991b	c9 10		cmp #$10			cmp 	#NSTString
.991d	d0 4e		bne $996d			bne		_SCType
.991f	64 38		stz $38				stz 	zTemp1 						; counting total length
.9921	e8		inx				inx
.9922	20 40 99	jsr $9940			jsr 	_SCSetupZ0 					; setup for second
.9925	20 4b 99	jsr $994b			jsr 	_SCLengthZ0 				; length for second
.9928	ca		dex				dex
.9929	20 40 99	jsr $9940			jsr 	_SCSetupZ0 					; setup for first
.992c	20 4b 99	jsr $994b			jsr 	_SCLengthZ0 				; length for first
.992f	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9931	20 d9 b4	jsr $b4d9			jsr 	StringTempAllocate
.9934	20 5e 99	jsr $995e			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9937	e8		inx				inx
.9938	20 40 99	jsr $9940			jsr 	_SCSetupZ0 					; copy second out
.993b	20 5e 99	jsr $995e			jsr 	_SCCopy
.993e	ca		dex				dex
.993f	60		rts				rts
.9940					_SCSetupZ0:
.9940	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9943	85 36		sta $36				sta 	zTemp0
.9945	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9948	85 37		sta $37				sta 	zTemp0+1
.994a	60		rts				rts
.994b					_SCLengthZ0:
.994b	5a		phy				phy
.994c	a0 00		ldy #$00			ldy 	#0
.994e					_SCLenLoop:
.994e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9950	f0 0a		beq $995c			beq 	_SCLExit
.9952	c8		iny				iny
.9953	e6 38		inc $38				inc 	zTemp1
.9955	10 f7		bpl $994e			bpl		_SCLenLoop
.9957	a9 09		lda #$09		lda	#9
.9959	4c ff 97	jmp $97ff		jmp	ErrorHandler
.995c					_SCLExit:
.995c	7a		ply				ply
.995d	60		rts				rts
.995e					_SCCopy:
.995e	5a		phy				phy
.995f	a0 00		ldy #$00			ldy 	#0
.9961					_SCCopyLoop:
.9961	b1 36		lda ($36),y			lda 	(zTemp0),y
.9963	f0 06		beq $996b			beq 	_SCCExit
.9965	20 17 b5	jsr $b517			jsr 	StringTempWrite
.9968	c8		iny				iny
.9969	80 f6		bra $9961			bra 	_SCCopyLoop
.996b					_SCCExit:
.996b	7a		ply				ply
.996c	60		rts				rts
.996d					_SCType:
.996d	4c ae b1	jmp $b1ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.abd7					IntegerDivide:
.abd7	fa		plx				plx
.abd8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.abdb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.abde	0a		asl a				asl 	a 							; shift reference bit into sign bit
.abdf	0a		asl a				asl 	a
.abe0	10 05		bpl $abe7			bpl 	_NotRef
.abe2	48		pha				pha
.abe3	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.abe6	68		pla				pla
.abe7					_NotRef:
.abe7	0a		asl a				asl 	a
.abe8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.abea	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.abed	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.abf0	f0 03		beq $abf5			beq 	_IntegerCode 				; if clear, then we have two integers
.abf2	4c ae b1	jmp $b1ae			jmp 	TypeError 					; anything else, type mismatch.
.abf5					_IntegerCode:
.abf5	20 17 ac	jsr $ac17			jsr 	CheckDivideZero 			; do div zero check
.abf8	20 4f ac	jsr $ac4f			jsr 	Int32Divide 				; do the division
.abfb	20 0c ad	jsr $ad0c			jsr 	CalculateSign 				; calculate result sign
.abfe					NSMCopyPlusTwoToZero:
.abfe	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ac01	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ac04	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ac07	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac0a	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ac0d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ac10	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ac13	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ac16	60		rts				rts
.ac17					CheckDivideZero:
.ac17	e8		inx				inx
.ac18	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero
.ac1b	f0 02		beq $ac1f			beq 	_CDVError
.ac1d	ca		dex				dex
.ac1e	60		rts				rts
.ac1f					_CDVError:
.ac1f	a9 03		lda #$03		lda	#3
.ac21	4c ff 97	jmp $97ff		jmp	ErrorHandler
.ac24					IntegerModulus:
.ac24	fa		plx				plx
.ac25	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ac28	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ac2b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ac2c	0a		asl a				asl 	a
.ac2d	10 05		bpl $ac34			bpl 	_NotRef
.ac2f	48		pha				pha
.ac30	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ac33	68		pla				pla
.ac34					_NotRef:
.ac34	0a		asl a				asl 	a
.ac35	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ac37	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ac3a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ac3d	f0 03		beq $ac42			beq 	_IntegerCode 				; if clear, then we have two integers
.ac3f	4c ae b1	jmp $b1ae			jmp 	TypeError 					; anything else, type mismatch.
.ac42					_IntegerCode:
.ac42					IntegerModulusNoCheck:
.ac42	20 17 ac	jsr $ac17			jsr 	CheckDivideZero 			; do div zero check
.ac45	20 4f ac	jsr $ac4f			jsr 	Int32Divide 				; do the division
.ac48	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ac4b	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ac4e	60		rts				rts
.ac4f					Int32Divide:
.ac4f	48		pha				pha 								; save AXY
.ac50	5a		phy				phy
.ac51	20 8e a3	jsr $a38e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ac54	20 b3 a3	jsr $a3b3			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ac57	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ac59					_I32DivideLoop:
.ac59	e8		inx				inx
.ac5a	e8		inx				inx
.ac5b	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ac5e	ca		dex				dex
.ac5f	ca		dex				dex
.ac60	20 cd a3	jsr $a3cd			jsr 	NSMRotateLeft
.ac63	20 8f ac	jsr $ac8f			jsr 	DivideCheckSubtract 		; check if subtract possible
.ac66	90 03		bcc $ac6b			bcc 	_I32DivideNoCarryIn
.ac68	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ac6b					_I32DivideNoCarryIn:
.ac6b	88		dey				dey 								; loop round till division completed.
.ac6c	d0 eb		bne $ac59			bne 	_I32DivideLoop
.ac6e	7a		ply				ply 								; restore AXY and exit
.ac6f	68		pla				pla
.ac70	60		rts				rts
.ac71					Int32ShiftDivide:
.ac71	48		pha				pha 								; save AY
.ac72	5a		phy				phy
.ac73	e8		inx				inx 								; clear S[X+2]
.ac74	e8		inx				inx
.ac75	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero
.ac78	ca		dex				dex
.ac79	ca		dex				dex
.ac7a	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.ac7c					_I32SDLoop:
.ac7c	20 8f ac	jsr $ac8f			jsr 	DivideCheckSubtract 		; check if subtract possible
.ac7f	e8		inx				inx
.ac80	e8		inx				inx
.ac81	20 cd a3	jsr $a3cd			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.ac84	ca		dex				dex
.ac85	ca		dex				dex
.ac86	20 cd a3	jsr $a3cd			jsr 	NSMRotateLeft
.ac89	88		dey				dey 	 							; do 31 times
.ac8a	d0 f0		bne $ac7c			bne 	_I32SDLoop
.ac8c	7a		ply				ply 								; restore AY and exit
.ac8d	68		pla				pla
.ac8e	60		rts				rts
.ac8f					DivideCheckSubtract:
.ac8f	20 1a 9a	jsr $9a1a			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.ac92	b0 04		bcs $ac98			bcs 	_DCSExit 					; if carry set, then could do, exit
.ac94	20 f4 99	jsr $99f4			jsr 	AddTopTwoStack 				; add it back in
.ac97	18		clc				clc 								; and return False
.ac98					_DCSExit:
.ac98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.ac99					MulInteger:
.ac99	fa		plx				plx
.ac9a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ac9d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aca0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aca1	0a		asl a				asl 	a
.aca2	10 05		bpl $aca9			bpl 	_NotRef
.aca4	48		pha				pha
.aca5	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aca8	68		pla				pla
.aca9					_NotRef:
.aca9	0a		asl a				asl 	a 							; put MSB of type into A:7
.acaa	30 0b		bmi $acb7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.acac	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.acaf	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.acb2	f0 06		beq $acba			beq 	_IntegerCode 				; if clear, then we have two integers
.acb4	4c ed ae	jmp $aeed			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.acb7					_StringData:
.acb7	4c b8 b1	jmp $b1b8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.acba					_IntegerCode:
.acba	20 c7 ac	jsr $acc7			jsr 	MultiplyShort
.acbd	c9 00		cmp #$00			cmp 	#0
.acbf	f0 05		beq $acc6			beq 	_MIExit
.acc1	a9 04		lda #$04		lda	#4
.acc3	4c ff 97	jmp $97ff		jmp	ErrorHandler
.acc6					_MIExit:
.acc6	60		rts				rts
.acc7					MultiplyShort:
.acc7	5a		phy				phy 								; save Y
.acc8	20 8e a3	jsr $a38e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.accb	20 b3 a3	jsr $a3b3			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.acce	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.acd0					_I32MLoop:
.acd0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.acd3	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.acd6	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.acd9	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.acdc	f0 28		beq $ad06			beq 	_I32MExit 					; exit if zero
.acde	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.ace1	29 01		and #$01			and 	#1
.ace3	f0 0e		beq $acf3			beq 	_I32MNoAdd
.ace5	20 f4 99	jsr $99f4			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ace8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.aceb	10 06		bpl $acf3			bpl 	_I32MNoAdd
.aced					_I32ShiftRight:
.aced	20 da a3	jsr $a3da			jsr 	NSMShiftRight 				; shift S[X] right
.acf0	c8		iny				iny 								; increment shift count
.acf1	80 0a		bra $acfd			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.acf3					_I32MNoAdd:
.acf3	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.acf6	70 f5		bvs $aced			bvs 	_I32ShiftRight 				; instead.
.acf8	e8		inx				inx
.acf9	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.acfc	ca		dex				dex
.acfd					_I32MShiftUpper:
.acfd	e8		inx				inx 								; shift S[X+2] right
.acfe	e8		inx				inx
.acff	20 da a3	jsr $a3da			jsr 	NSMShiftRight
.ad02	ca		dex				dex
.ad03	ca		dex				dex
.ad04	80 ca		bra $acd0			bra 	_I32MLoop 					; try again.
.ad06					_I32MExit:
.ad06	20 0c ad	jsr $ad0c			jsr 	CalculateSign
.ad09	98		tya				tya 								; shift in A
.ad0a	7a		ply				ply 								; restore Y and exit
.ad0b	60		rts				rts
.ad0c					CalculateSign:
.ad0c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ad0f	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ad12	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ad15	0a		asl a				asl 	a 							; shift bit 7 into carry
.ad16	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ad19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9970					CompareStrings:
.9970	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9973	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9976	29 10		and #$10			and 	#NSBIsString
.9978	f0 2c		beq $99a6			beq 	_CSTypeError
.997a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.997d	85 36		sta $36				sta 	zTemp0
.997f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9982	85 37		sta $37				sta 	zTemp0+1
.9984	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9987	85 38		sta $38				sta 	zTemp1
.9989	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.998c	85 39		sta $39				sta 	zTemp1+1
.998e	5a		phy				phy 								; save Y so we can access strings
.998f	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9991					_CSLoop:
.9991	c8		iny				iny
.9992	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9994	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9996	d0 06		bne $999e			bne 	_CSDifferent
.9998	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.999a	d0 f5		bne $9991			bne 	_CSLoop 					; still comparing
.999c					_CSExit:
.999c	7a		ply				ply 								; reached end, return zero in A from EOS
.999d	60		rts				rts
.999e					_CSDifferent:
.999e	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.99a0	90 fa		bcc $999c			bcc		_CSExit
.99a2	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.99a4	80 f6		bra $999c			bra 	_CSExit
.99a6					_CSTypeError:
.99a6	4c ae b1	jmp $b1ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.99a9					ShiftLeft:
.99a9	38		sec				sec
.99aa	80 01		bra $99ad			bra 	ShiftMain
.99ac					ShiftRight:
.99ac	18		clc				clc
.99ad					ShiftMain:
.99ad	fa		plx				plx 								; restore X
.99ae	08		php				php 								; save direction
.99af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.99b2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99b5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99b6	0a		asl a				asl 	a
.99b7	10 05		bpl $99be			bpl 	_NotRef
.99b9	48		pha				pha
.99ba	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99bd	68		pla				pla
.99be					_NotRef:
.99be	0a		asl a				asl 	a
.99bf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99c1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99c4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99c7	f0 03		beq $99cc			beq 	_IntegerCode 				; if clear, then we have two integers
.99c9	4c ae b1	jmp $b1ae			jmp 	TypeError 					; anything else, type mismatch.
.99cc					_IntegerCode:
.99cc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.99cf	29 e0		and #$e0			and 	#$E0
.99d1	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.99d4	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.99d7	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.99da	d0 13		bne $99ef			bne 	_SMExit0 					; if >= 32 it will always return zero.
.99dc					_SMLoop:
.99dc	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.99df	30 11		bmi $99f2			bmi 	_SMExit 					; exit if done.
.99e1	28		plp				plp 								; restore direcition setting
.99e2	08		php				php
.99e3	90 05		bcc $99ea			bcc 	_SMRight
.99e5	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; shift left if CS
.99e8	80 f2		bra $99dc			bra 	_SMLoop
.99ea					_SMRight:
.99ea	20 da a3	jsr $a3da			jsr 	NSMShiftRight 				; shift right if CC
.99ed	80 ed		bra $99dc			bra 	_SMLoop
.99ef					_SMExit0:
.99ef	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero 					; return zero.
.99f2					_SMExit:
.99f2	28		plp				plp 								; throw direction
.99f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.99f4					AddTopTwoStack:
.99f4	18		clc				clc
.99f5	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.99f8	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.99fb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99fe	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9a01	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9a04	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a07	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9a0a	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9a0d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a10	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9a13	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9a16	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a19	60		rts				rts
.9a1a					SubTopTwoStack:
.9a1a	38		sec				sec
.9a1b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9a1e	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9a21	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a24	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9a27	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9a2a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a2d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9a30	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9a33	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a36	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9a39	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9a3c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a3f	60		rts				rts
.9a40					AddInteger:
.9a40	fa		plx				plx
.9a41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a44	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a47	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a48	0a		asl a				asl 	a
.9a49	10 05		bpl $9a50			bpl 	_NotRef
.9a4b	48		pha				pha
.9a4c	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a4f	68		pla				pla
.9a50					_NotRef:
.9a50	0a		asl a				asl 	a 							; put MSB of type into A:7
.9a51	30 0b		bmi $9a5e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a53	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a56	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a59	f0 06		beq $9a61			beq 	_IntegerCode 				; if clear, then we have two integers
.9a5b	4c 75 ad	jmp $ad75			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9a5e					_StringData:
.9a5e	4c 13 99	jmp $9913			jmp 	StringConcat							; at least one string - don't know both are strings.
.9a61					_IntegerCode:
.9a61					AddCode:
.9a61	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9a64	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9a67	10 8b		bpl $99f4			bpl 	AddTopTwoStack
.9a69	20 1a 9a	jsr $9a1a			jsr 	SubTopTwoStack 				; do a physical subtraction
.9a6c	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9a6f	10 09		bpl $9a7a			bpl 	_AddExit
.9a71	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9a74	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a77	20 6c a3	jsr $a36c			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9a7a					_AddExit:
.9a7a	60		rts				rts
.9a7b					SubInteger:
.9a7b	fa		plx				plx
.9a7c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a7f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a82	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a83	0a		asl a				asl 	a
.9a84	10 05		bpl $9a8b			bpl 	_NotRef
.9a86	48		pha				pha
.9a87	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a8a	68		pla				pla
.9a8b					_NotRef:
.9a8b	0a		asl a				asl 	a 							; put MSB of type into A:7
.9a8c	30 0b		bmi $9a99			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a8e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a91	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a94	f0 06		beq $9a9c			beq 	_IntegerCode 				; if clear, then we have two integers
.9a96	4c 7a ad	jmp $ad7a			jmp 	FloatingPointSub 							; otherwise at least one float.
.9a99					_StringData:
.9a99	4c b8 b1	jmp $b1b8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9a9c					_IntegerCode:
.9a9c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9a9f	49 80		eor #$80			eor 	#$80
.9aa1	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9aa4	80 bb		bra $9a61			bra 	AddCode 					; and do the same code as add.
.9aa6					AndInteger:
.9aa6	fa		plx				plx
.9aa7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9aaa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9aad	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aae	0a		asl a				asl 	a
.9aaf	10 05		bpl $9ab6			bpl 	_NotRef
.9ab1	48		pha				pha
.9ab2	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ab5	68		pla				pla
.9ab6					_NotRef:
.9ab6	0a		asl a				asl 	a
.9ab7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ab9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9abc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9abf	f0 03		beq $9ac4			beq 	_IntegerCode 				; if clear, then we have two integers
.9ac1	4c ae b1	jmp $b1ae			jmp 	TypeError 					; anything else, type mismatch.
.9ac4					_IntegerCode:
.9ac4	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ac7	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9aca	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9acd	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ad0	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9ad3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ad6	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ad9	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9adc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9adf	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9ae2	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9ae5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ae8	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9aeb	60		rts				rts
.9aec					OraInteger:
.9aec	fa		plx				plx
.9aed	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9af0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9af3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9af4	0a		asl a				asl 	a
.9af5	10 05		bpl $9afc			bpl 	_NotRef
.9af7	48		pha				pha
.9af8	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9afb	68		pla				pla
.9afc					_NotRef:
.9afc	0a		asl a				asl 	a
.9afd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9aff	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b02	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b05	f0 03		beq $9b0a			beq 	_IntegerCode 				; if clear, then we have two integers
.9b07	4c ae b1	jmp $b1ae			jmp 	TypeError 					; anything else, type mismatch.
.9b0a					_IntegerCode:
.9b0a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b0d	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9b10	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b13	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b16	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9b19	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b1c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b1f	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9b22	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b25	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b28	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9b2b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b2e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9b31	60		rts				rts
.9b32					EorInteger:
.9b32	fa		plx				plx
.9b33	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b36	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b39	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b3a	0a		asl a				asl 	a
.9b3b	10 05		bpl $9b42			bpl 	_NotRef
.9b3d	48		pha				pha
.9b3e	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b41	68		pla				pla
.9b42					_NotRef:
.9b42	0a		asl a				asl 	a
.9b43	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b45	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b48	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b4b	f0 03		beq $9b50			beq 	_IntegerCode 				; if clear, then we have two integers
.9b4d	4c ae b1	jmp $b1ae			jmp 	TypeError 					; anything else, type mismatch.
.9b50					_IntegerCode:
.9b50	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b53	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9b56	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b59	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b5c	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9b5f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b62	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b65	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9b68	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b6b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b6e	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9b71	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b74	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9b77	60		rts				rts
.9b78					WordIndirect:
.9b78	fa		plx				plx
.9b79	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b7c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b7f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b80	0a		asl a				asl 	a
.9b81	10 05		bpl $9b88			bpl 	_NotRef
.9b83	48		pha				pha
.9b84	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b87	68		pla				pla
.9b88					_NotRef:
.9b88	0a		asl a				asl 	a
.9b89	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b8b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b8e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b91	f0 03		beq $9b96			beq 	_IntegerCode 				; if clear, then we have two integers
.9b93	4c ae b1	jmp $b1ae			jmp 	TypeError 					; anything else, type mismatch.
.9b96					_IntegerCode:
.9b96	20 61 9a	jsr $9a61			jsr 	AddCode 					; add the two values
.9b99	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9b9b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b9e	60		rts				rts
.9b9f					ByteIndirect:
.9b9f	fa		plx				plx
.9ba0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ba3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ba6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ba7	0a		asl a				asl 	a
.9ba8	10 05		bpl $9baf			bpl 	_NotRef
.9baa	48		pha				pha
.9bab	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bae	68		pla				pla
.9baf					_NotRef:
.9baf	0a		asl a				asl 	a
.9bb0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bb2	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bb5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bb8	f0 03		beq $9bbd			beq 	_IntegerCode 				; if clear, then we have two integers
.9bba	4c ae b1	jmp $b1ae			jmp 	TypeError 					; anything else, type mismatch.
.9bbd					_IntegerCode:
.9bbd	20 61 9a	jsr $9a61			jsr 	AddCode 					; add the two values
.9bc0	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9bc2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bc5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ad1a					ConvertInt16:
.ad1a	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ad1d	8e 10 04	stx $0410			stx 	NSMantissa1
.ad20	9c 18 04	stz $0418			stz 	NSMantissa2
.ad23	9c 20 04	stz $0420			stz 	NSMantissa3
.ad26	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ad29	a2 00		ldx #$00			ldx 	#0 							; stack level
.ad2b	a9 0a		lda #$0a			lda 	#10 						; base
.ad2d	80 00		bra $ad2f			bra 	ConvertInt32
.ad2f					ConvertInt32:
.ad2f	5a		phy				phy
.ad30	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ad32	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ad35	10 08		bpl $ad3f			bpl 	_CI32NotNeg
.ad37	48		pha				pha
.ad38	a9 2d		lda #$2d			lda 	#'-'
.ad3a	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ad3d	c8		iny				iny
.ad3e	68		pla				pla
.ad3f					_CI32NotNeg:
.ad3f	20 4d ad	jsr $ad4d			jsr 	_CI32DivideConvert 			; recursive conversion
.ad42	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ad44	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ad47	7a		ply				ply
.ad48	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ad4a	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ad4c	60		rts				rts
.ad4d					_CI32DivideConvert:
.ad4d	e8		inx				inx 								; write to next slot up
.ad4e	20 b9 a3	jsr $a3b9			jsr 	NSMSetByte
.ad51	ca		dex				dex
.ad52	20 4f ac	jsr $ac4f			jsr 	Int32Divide 				; divide
.ad55	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ad58	48		pha				pha
.ad59	20 fe ab	jsr $abfe			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ad5c	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; is it zero ?
.ad5f	f0 06		beq $ad67			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.ad61	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.ad64	20 4d ad	jsr $ad4d			jsr 	_CI32DivideConvert 			; and recusrively call.
.ad67					_CI32NoRecurse:
.ad67	68		pla				pla 								; remainder
.ad68	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.ad6a	90 02		bcc $ad6e			bcc 	_CI32NotHex
.ad6c	69 26		adc #$26			adc 	#6+32
.ad6e					_CI32NotHex:
.ad6e	69 30		adc #$30			adc 	#48
.ad70	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.ad73	c8		iny				iny
.ad74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9bc6					PrecedenceLevel:
>9bc6	04					.byte	 4	; $00 <<
>9bc7	02					.byte	 2	; $01 <=
>9bc8	02					.byte	 2	; $02 <>
>9bc9	00					.byte	 0	; $03 !!3
>9bca	00					.byte	 0	; $04 ><
>9bcb	02					.byte	 2	; $05 >=
>9bcc	04					.byte	 4	; $06 >>
>9bcd	00					.byte	 0	; $07 !!7
>9bce	00					.byte	 0	; $08 !!8
>9bcf	00					.byte	 0	; $09 !!9
>9bd0	00					.byte	 0	; $0a !!10
>9bd1	00					.byte	 0	; $0b !!11
>9bd2	00					.byte	 0	; $0c !!12
>9bd3	00					.byte	 0	; $0d !!13
>9bd4	00					.byte	 0	; $0e !!14
>9bd5	00					.byte	 0	; $0f !!15
>9bd6	00					.byte	 0	; $10 @
>9bd7	00					.byte	 0	; $11 !!17
>9bd8	00					.byte	 0	; $12 !!18
>9bd9	00					.byte	 0	; $13 [
>9bda	04					.byte	 4	; $14 \
>9bdb	00					.byte	 0	; $15 ]
>9bdc	01					.byte	 1	; $16 ^
>9bdd	00					.byte	 0	; $17 _
>9bde	00					.byte	 0	; $18 `
>9bdf	00					.byte	 0	; $19 !!25
>9be0	00					.byte	 0	; $1a !!26
>9be1	00					.byte	 0	; $1b {
>9be2	01					.byte	 1	; $1c |
>9be3	00					.byte	 0	; $1d }
>9be4	00					.byte	 0	; $1e ~
>9be5	00					.byte	 0	; $1f [7m<7F>[m
>9be6	00					.byte	 0	; $20
>9be7	05					.byte	 5	; $21 !
>9be8	00					.byte	 0	; $22 "
>9be9	00					.byte	 0	; $23 #
>9bea	05					.byte	 5	; $24 $
>9beb	04					.byte	 4	; $25 %
>9bec	01					.byte	 1	; $26 &
>9bed	00					.byte	 0	; $27 '
>9bee	00					.byte	 0	; $28 (
>9bef	00					.byte	 0	; $29 )
>9bf0	04					.byte	 4	; $2a *
>9bf1	03					.byte	 3	; $2b +
>9bf2	00					.byte	 0	; $2c ,
>9bf3	03					.byte	 3	; $2d -
>9bf4	00					.byte	 0	; $2e .
>9bf5	04					.byte	 4	; $2f /
>9bf6	00					.byte	 0	; $30 0
>9bf7	00					.byte	 0	; $31 1
>9bf8	00					.byte	 0	; $32 2
>9bf9	00					.byte	 0	; $33 3
>9bfa	00					.byte	 0	; $34 4
>9bfb	00					.byte	 0	; $35 5
>9bfc	00					.byte	 0	; $36 6
>9bfd	00					.byte	 0	; $37 7
>9bfe	00					.byte	 0	; $38 8
>9bff	00					.byte	 0	; $39 9
>9c00	00					.byte	 0	; $3a :
>9c01	00					.byte	 0	; $3b ;
>9c02	02					.byte	 2	; $3c <
>9c03	02					.byte	 2	; $3d =
>9c04	02					.byte	 2	; $3e >
>9c05	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9c06					EvaluateExpressionAt0:
.9c06	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9c08					EvaluateExpression:
.9c08	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9c0a					EvaluateExpressionAtPrecedence:
.9c0a	48		pha				pha 								; save precedence level
.9c0b	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm 				; evaluate term into level X.
.9c0e	68		pla				pla 								; restore precedence level.
.9c0f					_EXPRLoop:
.9c0f	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9c11	b1 30		lda ($30),y			lda 	(codePtr),y
.9c13	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9c15	b0 25		bcs $9c3c			bcs 	_EXPRExit
.9c17	da		phx				phx 								; read the operator precedence
.9c18	aa		tax				tax
.9c19	bd c6 9b	lda $9bc6,x			lda 	PrecedenceLevel,x
.9c1c	fa		plx				plx
.9c1d	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9c1f	f0 1b		beq $9c3c			beq 	_EXPRExit
.9c21	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9c23	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9c25	c5 37		cmp $37				cmp 	zTemp0+1
.9c27	b0 13		bcs $9c3c			bcs		_EXPRExit 					; if current >= operator exit
.9c29	48		pha				pha 								; save current precedence.
.9c2a	b1 30		lda ($30),y			lda 	(codePtr),y
.9c2c	c8		iny				iny
.9c2d	48		pha				pha
.9c2e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9c30	e8		inx				inx 								; work out the right hand side.
.9c31	20 0a 9c	jsr $9c0a			jsr 	EvaluateExpressionAtPrecedence
.9c34	ca		dex				dex
.9c35	68		pla				pla 								; get operator, call the code.
.9c36	20 3f 9c	jsr $9c3f			jsr 	_EXPRCaller
.9c39	68		pla				pla 								; restore precedence level
.9c3a	80 d3		bra $9c0f			bra 	_EXPRLoop 					; and go round.
.9c3c					_EXPRExit:
.9c3c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9c3e	60		rts				rts
.9c3f					_EXPRCaller:
.9c3f	da		phx				phx 								; save on stack, first thing is to restore it
.9c40	0a		asl a				asl 	a 							; double so can use vectors into X
.9c41	aa		tax				tax
.9c42	7c 20 94	jmp ($9420,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.ad75					FloatingPointAdd:
.ad75	20 16 af	jsr $af16			jsr 	FloatPrepare 				; prepare for floats
.ad78	80 0b		bra $ad85			bra 	FloatAdd
.ad7a					FloatingPointSub:
.ad7a	20 16 af	jsr $af16			jsr 	FloatPrepare 				; prepare for floats
.ad7d					FloatSubtract:
.ad7d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.ad80	49 80		eor #$80			eor 	#$80
.ad82	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.ad85					FloatAdd:
.ad85	48		pha				pha
.ad86	5a		phy				phy
.ad87	20 27 af	jsr $af27			jsr 	NSNormalise 				; normalise S[X]
.ad8a	f0 54		beq $ade0			beq 	_FAReturn1
.ad8c	e8		inx				inx 								; normalise S[X+1]
.ad8d	20 27 af	jsr $af27			jsr 	NSNormalise
.ad90	ca		dex				dex
.ad91	c9 00		cmp #$00			cmp 	#0
.ad93	f0 6f		beq $ae04			beq 	_FAExit 					; if so, just return A
.ad95	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.ad98	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.ad9b	f0 1b		beq $adb8			beq 	_FAExponentsEqual
.ad9d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.ada0	a8		tay				tay
.ada1	38		sec				sec 								; do a signed comparison of the exponents.
.ada2	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ada5	50 02		bvc $ada9			bvc 	_FANoSignedChange
.ada7	49 80		eor #$80			eor 	#$80
.ada9					_FANoSignedChange:
.ada9	29 80		and #$80			and 	#$80
.adab	10 03		bpl $adb0			bpl 	_FAHaveMax
.adad	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.adb0					_FAHaveMax:
.adb0	20 07 ae	jsr $ae07			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.adb3	e8		inx				inx
.adb4	20 07 ae	jsr $ae07			jsr 	_FAShiftToExponent
.adb7	ca		dex				dex
.adb8					_FAExponentsEqual:
.adb8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.adbb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.adbe	30 10		bmi $add0			bmi 	_FADifferentSigns
.adc0	20 f4 99	jsr $99f4			jsr 	AddTopTwoStack 				; do the add of the mantissae
.adc3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.adc6	10 3c		bpl $ae04			bpl 	_FAExit 					; if no, we are done.
.adc8	20 da a3	jsr $a3da			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.adcb	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.adce	80 34		bra $ae04			bra 	_FAExit
.add0					_FADifferentSigns:
.add0	20 1a 9a	jsr $9a1a			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.add3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.add6	10 2c		bpl $ae04			bpl 	_FAExit 					; if no, we are done.
.add8	20 63 a3	jsr $a363			jsr 	NSMNegate 					; netate result
.addb	20 6c a3	jsr $a36c			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.adde	80 24		bra $ae04			bra 	_FAExit
.ade0					_FAReturn1:
.ade0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.ade3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ade6	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.ade9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.adec	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.adef	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.adf2	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.adf5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.adf8	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.adfb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.adfe	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.ae01	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ae04					_FAExit:
.ae04	7a		ply				ply
.ae05	68		pla				pla
.ae06	60		rts				rts
.ae07					_FAShiftToExponent:
.ae07					_FAShiftToExponent2:
.ae07	98		tya				tya 								; compare Y to exponent
.ae08	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.ae0b	f0 08		beq $ae15			beq 	_FASEExit 					; exit if so.
.ae0d	20 da a3	jsr $a3da			jsr 	NSMShiftRight	 			; shift the mantissa right
.ae10	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.ae13	80 f2		bra $ae07			bra 	_FAShiftToExponent2
.ae15					_FASEExit:
.ae15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.ae16					CompareFloat:
.ae16	20 7d ad	jsr $ad7d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.ae19	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.ae1c	29 f8		and #$f8			and 	#$F8
.ae1e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.ae21	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.ae24	f0 09		beq $ae2f			beq 	_FCExit 					; zero, so approximately identical
.ae26	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.ae28	3c 00 04	bit $0400,x			bit 	NSStatus,x
.ae2b	10 02		bpl $ae2f			bpl 	_FCExit
.ae2d					_FCNegative:
.ae2d	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.ae2f					_FCExit:
.ae2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.ae30					FDivideCommand:
.ae30	fa		plx				plx	 								; restore stack position
.ae31	20 16 af	jsr $af16			jsr 	FloatPrepare 				; prepare for floats
.ae34					FloatDivide:
.ae34	48		pha				pha
.ae35	e8		inx				inx
.ae36	20 27 af	jsr $af27			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ae39	ca		dex				dex
.ae3a	c9 00		cmp #$00			cmp 	#0
.ae3c	f0 20		beq $ae5e			beq 	_FDZero
.ae3e	20 27 af	jsr $af27			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ae41	f0 19		beq $ae5c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ae43	20 71 ac	jsr $ac71			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.ae46	20 fe ab	jsr $abfe			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.ae49	20 27 af	jsr $af27			jsr		NSNormalise 				; renormalise
.ae4c	20 0c ad	jsr $ad0c			jsr 	CalculateSign 				; calculate result sign
.ae4f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.ae52	38		sec				sec
.ae53	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ae56	38		sec				sec
.ae57	e9 1e		sbc #$1e			sbc 	#30
.ae59	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ae5c					_FDExit:
.ae5c	68		pla				pla
.ae5d	60		rts				rts
.ae5e					_FDZero:
.ae5e	a9 03		lda #$03		lda	#3
.ae60	4c ff 97	jmp $97ff		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.ae63					FloatFractionalPart:
.ae63	5a		phy				phy
.ae64	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.ae67	29 7f		and #$7f			and 	#$7F
.ae69	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ae6c	20 27 af	jsr $af27			jsr 	NSNormalise
.ae6f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.ae72	38		sec				sec
.ae73	e9 e0		sbc #$e0			sbc 	#$E0
.ae75	90 31		bcc $aea8			bcc 	_FFPExit 					; already fractional
.ae77	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.ae79	b0 2a		bcs $aea5			bcs 	_FFPZero
.ae7b	a8		tay				tay 								; put count to do in Y
.ae7c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.ae7f	20 aa ae	jsr $aeaa			jsr 	_FFPPartial
.ae82	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ae85	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.ae88	20 aa ae	jsr $aeaa			jsr 	_FFPPartial
.ae8b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ae8e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ae91	20 aa ae	jsr $aeaa			jsr 	_FFPPartial
.ae94	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ae9a	20 aa ae	jsr $aeaa			jsr 	_FFPPartial
.ae9d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aea0	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; zeroed check.
.aea3	d0 03		bne $aea8			bne 	_FFPExit
.aea5					_FFPZero:
.aea5	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero
.aea8					_FFPExit:
.aea8	7a		ply				ply
.aea9	60		rts				rts
.aeaa					_FFPPartial:
.aeaa	c0 00		cpy #$00			cpy 	#0 							; no more to do
.aeac	f0 17		beq $aec5			beq 	_FFFPPExit
.aeae	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.aeb0	b0 0c		bcs $aebe			bcs 	_FFFPPWholeByte
.aeb2	5a		phy				phy
.aeb3					_FFFPPLeft:
.aeb3	0a		asl a				asl 	a
.aeb4	88		dey				dey
.aeb5	d0 fc		bne $aeb3			bne 	_FFFPPLeft
.aeb7	7a		ply				ply
.aeb8					_FFFPPRight:
.aeb8	4a		lsr a				lsr 	a
.aeb9	88		dey				dey
.aeba	d0 fc		bne $aeb8			bne 	_FFFPPRight
.aebc	80 07		bra $aec5			bra 	_FFFPPExit
.aebe					_FFFPPWholeByte:
.aebe	98		tya				tya 								; subtract 8 from count
.aebf	38		sec				sec
.aec0	e9 08		sbc #$08			sbc 	#8
.aec2	a8		tay				tay
.aec3	a9 00		lda #$00			lda 	#0 							; and clear all
.aec5					_FFFPPExit:
.aec5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aec6					FloatIntegerPart:
.aec6	48		pha				pha
.aec7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.aeca	f0 1f		beq $aeeb			beq 	_FIPExit 					; if so do nothing
.aecc	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; is it zero ?
.aecf	f0 17		beq $aee8			beq 	_FIPZero 					; if so return zero.
.aed1	20 27 af	jsr $af27			jsr 	NSNormalise 				; normalise
.aed4	f0 12		beq $aee8			beq 	_FIPZero 					; normalised to zero, exit zero
.aed6					_FIPShift:
.aed6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.aed9	10 08		bpl $aee3			bpl 	_FIPCheckZero
.aedb	20 da a3	jsr $a3da			jsr 	NSMShiftRight 				; shift mantissa right
.aede	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.aee1	80 f3		bra $aed6			bra 	_FIPShift
.aee3					_FIPCheckZero:
.aee3	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; avoid -0 problem
.aee6	d0 03		bne $aeeb			bne 	_FIPExit 					; set to zero if mantissa zero.
.aee8					_FIPZero:
.aee8	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero
.aeeb					_FIPExit:
.aeeb	68		pla				pla
.aeec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.aeed					FloatingPointMultiply:
.aeed	20 16 af	jsr $af16			jsr 	FloatPrepare 				; prepare for floats
.aef0					FloatMultiply:
.aef0	48		pha				pha
.aef1	20 27 af	jsr $af27			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aef4	f0 1b		beq $af11			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aef6	e8		inx				inx
.aef7	20 27 af	jsr $af27			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aefa	ca		dex				dex
.aefb	c9 00		cmp #$00			cmp 	#0
.aefd	f0 0f		beq $af0e			beq 	_FDSetZero
.aeff	20 c7 ac	jsr $acc7			jsr 	MultiplyShort 				; calculate the result.
.af02	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.af05	18		clc				clc
.af06	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.af09	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af0c	80 03		bra $af11			bra 	_FDExit
.af0e					_FDSetZero:
.af0e	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero 					; return 0
.af11					_FDExit:
.af11	20 27 af	jsr $af27			jsr 	NSNormalise 				; normalise the result
.af14	68		pla				pla
.af15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.af16					FloatPrepare:
.af16	20 18 9d	jsr $9d18			jsr 	DereferenceTopTwo 			; dereference the top two values
.af19	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.af1c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af1f	29 10		and #$10			and 	#NSBIsString
.af21	d0 01		bne $af24			bne 	_FDType
.af23	60		rts				rts
.af24					_FDType:
.af24	4c ae b1	jmp $b1ae			jmp 	TypeError
.af27					NSNormalise:
.af27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.af2a	29 80		and #$80			and 	#$80
.af2c	09 08		ora #$08			ora 	#NSTFloat
.af2e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af31	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; if zero exit
.af34	d0 09		bne $af3f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.af36	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.af39	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.af3c	a9 00		lda #$00			lda 	#0 							; set Z flag
.af3e	60		rts				rts
.af3f					_NSNormaliseOptimise:
.af3f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.af42	d0 22		bne $af66			bne 	_NSNormaliseLoop
.af44	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.af47	30 1d		bmi $af66			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.af49	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af4c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.af4f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af52	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.af55	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af58	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.af5b	bd 28 04	lda $0428,x			lda 	NSExponent,x
.af5e	38		sec				sec
.af5f	e9 08		sbc #$08			sbc 	#8
.af61	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af64	80 d9		bra $af3f			bra 	_NSNormaliseOptimise
.af66					_NSNormaliseLoop:
.af66	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.af69	70 08		bvs $af73			bvs 	_NSNExit 					; exit if so with Z flag clear
.af6b	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; shift mantissa left
.af6e	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.af71	80 f3		bra $af66			bra 	_NSNormaliseLoop
.af73					_NSNExit:
.af73	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.af75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9c45					AssignNumber:
.9c45	5a		phy				phy
.9c46	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9c49	85 36		sta $36				sta 	zTemp0
.9c4b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c4e	85 37		sta $37				sta 	zTemp0+1
.9c50	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9c53	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9c55	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c58	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9c5a	c9 08		cmp #$08			cmp 	#NSTFloat
.9c5c	f0 2a		beq $9c88			beq 	_ANFloat
.9c5e	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9c61	f0 05		beq $9c68			beq		_ANNotFloat
.9c63	e8		inx				inx
.9c64	20 c6 ae	jsr $aec6			jsr 	FloatIntegerPart 			; make it an integer
.9c67	ca		dex				dex
.9c68					_ANNotFloat:
.9c68	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9c6b	29 03		and #$03			and 	#3
.9c6d	d0 05		bne $9c74			bne 	_ANByteWord
.9c6f	20 94 9c	jsr $9c94			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9c72	80 1e		bra $9c92			bra 	_ANExit
.9c74					_ANByteWord:
.9c74	48		pha				pha 								; save count
.9c75	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9c78	92 36		sta ($36)			sta 	(zTemp0)
.9c7a	68		pla				pla
.9c7b	c9 01		cmp #$01			cmp	 	#1
.9c7d	f0 13		beq $9c92			beq 	_ANExit
.9c7f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9c82	a0 01		ldy #$01			ldy 	#1
.9c84	91 36		sta ($36),y			sta 	(zTemp0),y
.9c86	80 0a		bra $9c92			bra 	_ANExit
.9c88					_ANFloat:
.9c88	20 94 9c	jsr $9c94			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9c8b	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9c8e	a0 04		ldy #$04			ldy 	#4
.9c90	91 36		sta ($36),y			sta 	(zTemp0),y
.9c92					_ANExit:
.9c92	7a		ply				ply
.9c93	60		rts				rts
.9c94					_ANCopy4PackSign:
.9c94	a0 03		ldy #$03			ldy 	#3
.9c96	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9c99	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9c9b	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9c9e	91 36		sta ($36),y			sta 	(zTemp0),y
.9ca0	88		dey				dey
.9ca1	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9ca4	91 36		sta ($36),y			sta 	(zTemp0),y
.9ca6	88		dey				dey
.9ca7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9caa	91 36		sta ($36),y			sta 	(zTemp0),y
.9cac	88		dey				dey
.9cad	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9cb0	91 36		sta ($36),y			sta 	(zTemp0),y
.9cb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9cb3					AssignString:
.9cb3	5a		phy				phy
.9cb4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9cb7	85 38		sta $38				sta 	zTemp1
.9cb9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9cbc	85 39		sta $39				sta 	zTemp1+1
.9cbe	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9cc1	85 36		sta $36				sta 	zTemp0
.9cc3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9cc6	85 37		sta $37				sta 	zTemp0+1
.9cc8	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9cca	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ccc	f0 23		beq $9cf1			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9cce	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9ccf	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9cd1	e9 02		sbc #$02			sbc 	#2
.9cd3	85 3c		sta $3c				sta 	zsTemp
.9cd5	a0 01		ldy #$01			ldy 	#1
.9cd7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9cd9	e9 00		sbc #$00			sbc 	#0
.9cdb	85 3d		sta $3d				sta 	zsTemp+1
.9cdd	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9cdf					_ASGetLength:
.9cdf	c8		iny				iny
.9ce0	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ce2	d0 fb		bne $9cdf			bne 	_ASGetLength
.9ce4	98		tya				tya 								; is this length <= current length
.9ce5	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9ce7	90 20		bcc $9d09			bcc 	_ASCopyString
.9ce9	f0 1e		beq $9d09			beq 	_ASCopyString
.9ceb	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9ced	a0 01		ldy #$01			ldy 	#1
.9cef	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9cf1					_ASNewStringRequired:
.9cf1	e8		inx				inx 								; concrete the new string.
.9cf2	20 58 b4	jsr $b458			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9cf5	ca		dex				dex
.9cf6	18		clc				clc
.9cf7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9cfa	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9cfc	92 36		sta ($36)			sta 	(zTemp0)
.9cfe	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9d01	69 00		adc #$00			adc 	#0
.9d03	a0 01		ldy #$01			ldy 	#1
.9d05	91 36		sta ($36),y			sta 	(zTemp0),y
.9d07	80 0d		bra $9d16			bra 	_ASExit
.9d09					_ASCopyString:
.9d09	a0 00		ldy #$00			ldy 	#0
.9d0b					_ASCopyLoop:
.9d0b	b1 38		lda ($38),y			lda 	(zTemp1),y
.9d0d	c8		iny				iny
.9d0e	c8		iny				iny
.9d0f	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9d11	88		dey				dey
.9d12	c9 00		cmp #$00			cmp 	#0
.9d14	d0 f5		bne $9d0b			bne 	_ASCopyLoop
.9d16					_ASExit:
.9d16	7a		ply				ply
.9d17	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9d18					DereferenceTopTwo:
.9d18	e8		inx				inx
.9d19	20 1d 9d	jsr $9d1d			jsr 	Dereference 				; deref x+1
.9d1c	ca		dex				dex  								; falls through to deref x
.9d1d					Dereference:
.9d1d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9d20	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9d22	f0 57		beq $9d7b			beq 	_DRFExit 					; not a reference
.9d24	5a		phy				phy
.9d25	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9d28	85 36		sta $36				sta 	zTemp0
.9d2a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d2d	85 37		sta $37				sta 	zTemp0+1
.9d2f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9d32	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9d34	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d37	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9d3a	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9d3c	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9d3e	f0 0f		beq $9d4f			beq 	_DRFDereferenceTwo
.9d40	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9d42	f0 39		beq $9d7d			beq 	_DRFFull
.9d44	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9d47	29 03		and #$03			and 	#3
.9d49	f0 32		beq $9d7d			beq 	_DRFFull 					; the whole word
.9d4b	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9d4d	f0 07		beq $9d56			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9d4f					_DRFDereferenceTwo:
.9d4f	a0 01		ldy #$01			ldy 	#1
.9d51	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d53	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d56					_DRFClear23:
.9d56	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9d59	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9d5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9d5f	29 18		and #$18			and 	#NSBTypeMask
.9d61	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d64	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9d66	d0 12		bne $9d7a			bne 	_DRFNotString
.9d68	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9d6b	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d6e	d0 0a		bne $9d7a			bne 	_DRFNotString
.9d70	a9 7c		lda #$7c			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9d72	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9d75	a9 9d		lda #$9d			lda 	#_DRFNullString >> 8
.9d77	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9d7a					_DRFNotString
.9d7a	7a		ply				ply 								; restore Y and exit
.9d7b					_DRFExit:
.9d7b	60		rts				rts
.9d7c					_DRFNullString:
>9d7c	00						.byte 	0
.9d7d					_DRFFull:
.9d7d	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9d7f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d81	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d84	c8		iny				iny
.9d85	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d87	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d8a	c8		iny				iny
.9d8b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d8d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d90	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9d93	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9d96	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9d98	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9d9b	f0 06		beq $9da3			beq 	_DRFNoExponent
.9d9d	c8		iny				iny 								; if not, read the exponent as well.
.9d9e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9da0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9da3					_DRFNoExponent:
.9da3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9da6	10 0d		bpl $9db5			bpl 	_DRFExit2 					; if not, then exit.
.9da8	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9daa	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9db0	09 80		ora #$80			ora 	#NSBIsNegative
.9db2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9db5					_DRFExit2:
.9db5	7a		ply				ply
.9db6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9db7					EncodeNumberStart:
.9db7	38		sec				sec
.9db8	80 01		bra $9dbb			bra 	EncodeNumberContinue+1
.9dba					EncodeNumberContinue:
.9dba	18		clc				clc
.9dbb					EncodeNumber:
.9dbb	08		php				php 								; save reset.
.9dbc	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9dbe	f0 12		beq $9dd2			beq 	_ENIsOkay
.9dc0	c9 30		cmp #$30			cmp 	#"0"
.9dc2	90 04		bcc $9dc8			bcc 	_ENBadNumber
.9dc4	c9 3a		cmp #$3a			cmp 	#"9"+1
.9dc6	90 0a		bcc $9dd2			bcc 	_ENIsOkay
.9dc8					_ENBadNumber:
.9dc8	28		plp				plp 								; throw saved reset
.9dc9	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9dcc	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9dce	f0 7e		beq $9e4e			beq 	_ENConstructFinal
.9dd0					_ENFail:
.9dd0	18		clc				clc 								; not allowed
.9dd1	60		rts				rts
.9dd2					_ENIsOkay:
.9dd2	28		plp				plp 								; are we restarting
.9dd3	90 15		bcc $9dea			bcc 	_ENNoRestart
.9dd5					_ENStartEncode:
.9dd5	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9dd7	f0 0c		beq $9de5			beq 	_ENFirstDP
.9dd9	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ddb	20 b9 a3	jsr $a3b9			jsr 	NSMSetByte
.9dde	a9 01		lda #$01			lda 	#ESTA_Low
.9de0					_ENExitChange:
.9de0	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9de3	38		sec				sec
.9de4	60		rts				rts
.9de5					_ENFirstDP:
.9de5	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero 					; clear integer part
.9de8	80 3f		bra $9e29			bra 	_ESTASwitchFloat			; go straight to float and exi
.9dea					_ENNoRestart:
.9dea	48		pha				pha 								; save on stack.
.9deb	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9dee	c9 01		cmp #$01			cmp 	#ESTA_Low
.9df0	f0 09		beq $9dfb			beq  	_ESTALowState
.9df2	c9 02		cmp #$02			cmp 	#ESTA_High
.9df4	f0 29		beq $9e1f			beq 	_ESTAHighState
.9df6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9df8	f0 3b		beq $9e35			beq 	_ESTADecimalState
>9dfa	db						.byte 	$DB 						; causes a break in the emulator
.9dfb					_ESTALowState:
.9dfb	68		pla				pla 								; get value back
.9dfc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9dfe	f0 29		beq $9e29			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9e00	29 0f		and #$0f			and 	#15 						; make digit
.9e02	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9e05	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9e08	0a		asl a				asl 	a
.9e09	0a		asl a				asl 	a
.9e0a	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9e0d	0a		asl a				asl 	a
.9e0e	6d 86 04	adc $0486			adc 	DigitTemp
.9e11	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e14	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9e16	90 05		bcc $9e1d			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9e18	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9e1a	8d 85 04	sta $0485			sta 	EncodeState
.9e1d					_ESTANoSwitch:
.9e1d	38		sec				sec
.9e1e	60		rts				rts
.9e1f					_ESTAHighState:
.9e1f	68		pla				pla 								; get value back
.9e20	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9e22	f0 05		beq $9e29			beq 	_ESTASwitchFloat
.9e24	20 88 9e	jsr $9e88			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9e27	38		sec				sec
.9e28	60		rts				rts
.9e29					_ESTASwitchFloat:
.9e29	9c 87 04	stz $0487			stz 	DecimalCount
.9e2c	e8		inx				inx 								; zero the decimal additive.
.9e2d	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero
.9e30	ca		dex				dex
.9e31	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9e33	80 ab		bra $9de0			bra 	_ENExitChange
.9e35					_ESTADecimalState:
.9e35	68		pla				pla 								; digit.
.9e36	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9e38	f0 96		beq $9dd0			beq 	_ENFail
.9e3a	e8		inx				inx 								; put digit into fractional part of X+1
.9e3b	20 88 9e	jsr $9e88			jsr 	ESTAShiftDigitIntoMantissa
.9e3e	ca		dex				dex
.9e3f	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9e42	ad 87 04	lda $0487			lda 	DecimalCount
.9e45	c9 0b		cmp #$0b			cmp 	#11
.9e47	f0 02		beq $9e4b			beq 	_ESTADSFail
.9e49	38		sec				sec
.9e4a	60		rts				rts
.9e4b					_ESTADSFail:
.9e4b	4c a9 b1	jmp $b1a9			jmp 	RangeError
.9e4e					_ENConstructFinal:
.9e4e	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9e51	f0 33		beq $9e86			beq 	_ENCFExit 					; no decimals
.9e53	5a		phy				phy
.9e54	0a		asl a				asl 	a 							; x 4 and CLC
.9e55	0a		asl a				asl 	a
.9e56	6d 87 04	adc $0487			adc 	DecimalCount
.9e59	a8		tay				tay
.9e5a	b9 68 b1	lda $b168,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9e5d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e60	b9 69 b1	lda $b169,y			lda 	DecimalScalarTable-5+1,y
.9e63	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9e66	b9 6a b1	lda $b16a,y			lda 	DecimalScalarTable-5+2,y
.9e69	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9e6c	b9 6b b1	lda $b16b,y			lda 	DecimalScalarTable-5+3,y
.9e6f	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e72	b9 6c b1	lda $b16c,y			lda 	DecimalScalarTable-5+4,y
.9e75	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e78	a9 08		lda #$08			lda 	#NSTFloat
.9e7a	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e7d	7a		ply				ply
.9e7e	e8		inx				inx 								; multiply decimal const by decimal scalar
.9e7f	20 f0 ae	jsr $aef0			jsr 	FloatMultiply
.9e82	ca		dex				dex
.9e83	20 85 ad	jsr $ad85			jsr 	FloatAdd 					; add to integer part.
.9e86					_ENCFExit:
.9e86	18		clc				clc 								; reject the digit.
.9e87	60		rts				rts
.9e88					ESTAShiftDigitIntoMantissa:
.9e88	29 0f		and #$0f			and 	#15 						; save digit
.9e8a	48		pha				pha
.9e8b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9e8e	48		pha				pha
.9e8f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e92	48		pha				pha
.9e93	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e96	48		pha				pha
.9e97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e9a	48		pha				pha
.9e9b	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; x 2
.9e9e	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; x 4
.9ea1	18		clc				clc 								; pop mantissa and add
.9ea2	68		pla				pla
.9ea3	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9ea6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ea9	68		pla				pla
.9eaa	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9ead	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9eb0	68		pla				pla
.9eb1	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9eb4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9eb7	68		pla				pla
.9eb8	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9ebb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9ebe	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; x 10
.9ec1	68		pla				pla 								; add digit
.9ec2	18		clc				clc
.9ec3	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9ec6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ec9	90 0d		bcc $9ed8			bcc 	_ESTASDExit
.9ecb	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9ece	d0 08		bne $9ed8			bne 	_ESTASDExit
.9ed0	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9ed3	d0 03		bne $9ed8			bne 	_ESTASDExit
.9ed5	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9ed8					_ESTASDExit:
.9ed8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9ed9					EvaluateTerm:
.9ed9	b1 30		lda ($30),y			lda 	(codePtr),y
.9edb	30 18		bmi $9ef5			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9edd	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9edf	b0 6f		bcs $9f50			bcs 	_ETVariable
.9ee1	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9ee3	90 6e		bcc $9f53			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9ee5	c9 3a		cmp #$3a			cmp 	#'9'+1
.9ee7	b0 6a		bcs $9f53			bcs 	_ETPuncUnary
.9ee9	20 b7 9d	jsr $9db7			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9eec					_ETNumber:
.9eec	c8		iny				iny 								; keep encoding until we have the numbers
.9eed	b1 30		lda ($30),y			lda 	(codePtr),y
.9eef	20 ba 9d	jsr $9dba			jsr 	EncodeNumberContinue
.9ef2	b0 f8		bcs $9eec			bcs 	_ETNumber 					; go back if accepted.
.9ef4	60		rts				rts
.9ef5					_ETCheckUnary:
.9ef5	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9ef7	f0 41		beq $9f3a			beq 	_ETString
.9ef9	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9efb	f0 12		beq $9f0f			beq 	_ETHexConstant
.9efd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9eff	90 0b		bcc $9f0c			bcc 	_ETSyntaxError
.9f01	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9f03	b0 07		bcs $9f0c			bcs 	_ETSyntaxError
.9f05	da		phx				phx 								; push X on the stack
.9f06	0a		asl a				asl 	a 							; put vector x 2 into X
.9f07	aa		tax				tax
.9f08	c8		iny				iny 								; consume unary function token
.9f09	7c a0 94	jmp ($94a0,x)			jmp 	(VectorSet0,x) 				; and do it.
.9f0c					_ETSyntaxError:
.9f0c	4c a4 b1	jmp $b1a4			jmp 	SyntaxError
.9f0f					_ETHexConstant:
.9f0f	c8		iny				iny 								; skip #
.9f10	c8		iny				iny 								; skip count
.9f11	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero 					; clear result
.9f14					_ETHLoop:
.9f14	b1 30		lda ($30),y			lda 	(codePtr),y
.9f16	c8		iny				iny 								; and consume
.9f17	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9f19	f0 1e		beq $9f39			beq 	_ETHExit
.9f1b	48		pha				pha 								; save on stack.
.9f1c	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; x 2
.9f1f	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; x 4
.9f22	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; x 8
.9f25	20 cc a3	jsr $a3cc			jsr 	NSMShiftLeft 				; x 16
.9f28	68		pla				pla 								; ASCII
.9f29	c9 41		cmp #$41			cmp 	#'A'
.9f2b	90 02		bcc $9f2f			bcc 	_ETHNotChar
.9f2d	e9 07		sbc #$07			sbc 	#7
.9f2f					_ETHNotChar:
.9f2f	29 0f		and #$0f			and 	#15 						; digit now
.9f31	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9f34	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f37	80 db		bra $9f14			bra 	_ETHLoop 					; go round.
.9f39					_ETHExit:
.9f39	60		rts				rts
.9f3a					_ETString:
.9f3a	c8		iny				iny 								; look at length
.9f3b	b1 30		lda ($30),y			lda 	(codePtr),y
.9f3d	48		pha				pha
.9f3e	c8		iny				iny 								; first character
.9f3f	20 01 a4	jsr $a401			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9f42	68		pla				pla 								; restore count and save
.9f43	85 36		sta $36				sta 	zTemp0
.9f45	98		tya				tya 								; add length to Y to skip it.
.9f46	18		clc				clc
.9f47	65 36		adc $36				adc 	zTemp0
.9f49	a8		tay				tay
.9f4a	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9f4c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f4f	60		rts				rts
.9f50					_ETVariable:
.9f50	4c aa 9f	jmp $9faa			jmp 	VariableHandler
.9f53					_ETPuncUnary:
.9f53	c8		iny				iny 								; consume the unary character
.9f54	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9f56	f0 2d		beq $9f85			beq 	_ETUnaryNegate
.9f58	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9f5a	f0 39		beq $9f95			beq 	_ETDereference
.9f5c	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9f5e	f0 43		beq $9fa3			beq 	_ETParenthesis
.9f60	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9f62	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9f64	f0 06		beq $9f6c			beq 	_ETIndirection
.9f66	e6 36		inc $36				inc 	zTemp0
.9f68	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9f6a	d0 a0		bne $9f0c			bne 	_ETSyntaxError
.9f6c					_ETIndirection:
.9f6c	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9f6e	1a		inc a				inc 	a
.9f6f	48		pha				pha
.9f70	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm				; evaluate the term
.9f73	20 1d 9d	jsr $9d1d			jsr 	Dereference 				; dereference it.
.9f76	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9f79	d0 07		bne $9f82			bne 	_ETTypeMismatch
.9f7b	68		pla				pla 								; indirection 1-2
.9f7c	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9f7e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f81	60		rts				rts
.9f82					_ETTypeMismatch:
.9f82	4c ae b1	jmp $b1ae			jmp 	TypeError
.9f85					_ETUnaryNegate:
.9f85	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm				; evaluate the term
.9f88	20 1d 9d	jsr $9d1d			jsr 	Dereference 				; dereference it.
.9f8b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9f8e	29 10		and #$10			and 	#NSTString
.9f90	d0 f0		bne $9f82			bne 	_ETTypeMismatch
.9f92	4c 63 a3	jmp $a363			jmp 	NSMNegate  					; just toggles the sign bit.
.9f95					_ETDereference:
.9f95	20 d9 9e	jsr $9ed9			jsr 	EvaluateTerm				; evaluate the term
.9f98	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9f9b	29 20		and #$20			and 	#NSBIsReference
.9f9d	f0 e3		beq $9f82			beq 	_ETTypeMismatch
.9f9f	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9fa2	60		rts				rts
.9fa3					_ETParenthesis:
.9fa3	20 08 9c	jsr $9c08			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9fa6	20 be ab	jsr $abbe			jsr 	CheckRightBracket 			; check for )
.9fa9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9faa					VariableHandler:
.9faa	b1 30		lda ($30),y			lda 	(codePtr),y
.9fac	18		clc				clc
.9fad	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9faf	85 37		sta $37				sta 	zTemp0+1
.9fb1	c8		iny				iny
.9fb2	b1 30		lda ($30),y			lda 	(codePtr),y
.9fb4	85 36		sta $36				sta 	zTemp0
.9fb6	c8		iny				iny
.9fb7	18		clc				clc									; copy variable address+3 to mantissa
.9fb8	69 03		adc #$03			adc 	#3
.9fba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fbd	a5 37		lda $37				lda 	zTemp0+1
.9fbf	69 00		adc #$00			adc 	#0
.9fc1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fc4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9fc7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9fca	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9fcd	5a		phy				phy
.9fce	a0 02		ldy #$02			ldy 	#2 							; read type
.9fd0	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fd2	7a		ply				ply
.9fd3	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9fd5	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9fd7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fda	29 04		and #$04			and 	#NSBIsArray
.9fdc	d0 01		bne $9fdf			bne 	_VHArray
.9fde	60		rts				rts
.9fdf					_VHArray:
.9fdf	e8		inx				inx
.9fe0	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9fe3	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9fe5	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9fe8	b1 30		lda ($30),y			lda 	(codePtr),y
.9fea	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9fec	d0 06		bne $9ff4			bne 	_VHNoSecondIndex
.9fee	c8		iny				iny 								; skip the comma
.9fef	e8		inx				inx
.9ff0	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9ff3	ca		dex				dex
.9ff4					_VHNoSecondIndex:
.9ff4	ca		dex				dex 								; set X back.
.9ff5	20 be ab	jsr $abbe			jsr 	CheckRightBracket 			; and check the right bracket.
.9ff8	5a		phy				phy 								; save position
.9ff9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9ffc	85 3e		sta $3e				sta 	zaTemp
.9ffe	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a001	85 3f		sta $3f				sta 	zaTemp+1
.a003	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a005	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a007	f0 02		beq $a00b			beq 	_VHHas2Mask
.a009	a9 ff		lda #$ff			lda 	#$FF
.a00b					_VHHas2Mask:
.a00b	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a00e	f0 54		beq $a064			beq 	_VHBadIndex
.a010	0a		asl a				asl 	a 							; carry will be set if a second index
.a011	90 09		bcc $a01c			bcc 	_VHCheckFirstIndex
.a013	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a015	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a017	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a01a	90 48		bcc $a064			bcc 	_VHBadIndex
.a01c					_VHCheckFirstIndex:
.a01c	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a01e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a020	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a023	90 3f		bcc $a064			bcc 	_VHBadIndex
.a025	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a027	64 37		stz $37				stz 	zTemp0+1
.a029	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a02c	30 0f		bmi $a03d			bmi 	_VHNoMultiply
.a02e	da		phx				phx
.a02f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a032	48		pha				pha
.a033	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a035	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a037	1a		inc a				inc 	a 							; add 1 for zero base
.a038	fa		plx				plx
.a039	20 40 b0	jsr $b040			jsr 	Multiply8x8 				; calculate -> Z0
.a03c	fa		plx				plx
.a03d					_VHNoMultiply:
.a03d	18		clc				clc
.a03e	a5 36		lda $36				lda 	zTemp0
.a040	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a043	85 36		sta $36				sta 	zTemp0
.a045	a5 37		lda $37				lda 	zTemp0+1
.a047	69 00		adc #$00			adc 	#0
.a049	85 37		sta $37				sta 	zTemp0+1
.a04b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a04e	20 9e 8d	jsr $8d9e			jsr 	ScaleByBaseType
.a051	18		clc				clc
.a052	b2 3e		lda ($3e)			lda 	(zaTemp)
.a054	65 36		adc $36				adc 	zTemp0
.a056	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a059	a0 01		ldy #$01			ldy 	#1
.a05b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a05d	65 37		adc $37				adc 	zTemp0+1
.a05f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a062	7a		ply				ply 								; restore position
.a063	60		rts				rts
.a064					_VHBadIndex:
.a064	a9 17		lda #$17		lda	#23
.a066	4c ff 97	jmp $97ff		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.af76					AbsUnary:
.af76	fa		plx				plx 								; restore stack pos
.af77	20 0b a3	jsr $a30b			jsr 	EvaluateNumber 				; get a float or int
.af7a	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.af7d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.af80	29 7f		and #$7f			and 	#$7F
.af82	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a069					AllocUnary:
.a069	fa		plx				plx 								; restore stack pos
.a06a	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger		; get bytes required.
.a06d	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.a070	da		phx				phx 								; save X/Y
.a071	5a		phy				phy
.a072	8a		txa				txa 								; copy X into Y
.a073	a8		tay				tay
.a074	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a077	aa		tax				tax
.a078	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a07b	20 88 a0	jsr $a088			jsr 	AllocateXABytes 			; allocate memory
.a07e	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a081	8a		txa				txa
.a082	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a085	7a		ply				ply
.a086	fa		plx				plx
.a087	60		rts				rts
.a088					AllocateXABytes:
.a088	5a		phy				phy
.a089	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a08c	84 36		sty $36				sty 	zTemp0
.a08e	5a		phy				phy
.a08f	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a092	84 37		sty $37				sty 	zTemp0+1
.a094	5a		phy				phy
.a095	18		clc				clc 								; add to low memory pointer
.a096	6d 8c 04	adc $048c			adc 	lowMemPtr
.a099	8d 8c 04	sta $048c			sta 	lowMemPtr
.a09c	8a		txa				txa
.a09d	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a0a0	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a0a3	b0 2f		bcs $a0d4			bcs 	CISSMemory
.a0a5	20 c6 a0	jsr $a0c6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a0a8					_ClearMemory:
.a0a8	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a0ab	c5 36		cmp $36				cmp 	zTemp0
.a0ad	d0 07		bne $a0b6			bne 	_CMClearNext
.a0af	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a0b2	c5 37		cmp $37				cmp 	zTemp0+1
.a0b4	f0 0c		beq $a0c2			beq 	_CMExit
.a0b6					_CMClearNext:
.a0b6	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a0b8	92 36		sta ($36)			sta 	(zTemp0)
.a0ba	e6 36		inc $36				inc 	zTemp0
.a0bc	d0 ea		bne $a0a8			bne 	_ClearMemory
.a0be	e6 37		inc $37				inc		zTemp0+1
.a0c0	80 e6		bra $a0a8			bra 	_ClearMemory
.a0c2					_CMExit:
.a0c2	fa		plx				plx
.a0c3	68		pla				pla
.a0c4	7a		ply				ply
.a0c5	60		rts				rts
.a0c6					CheckIdentifierStringSpace:
.a0c6	48		pha				pha
.a0c7	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a0ca	18		clc				clc
.a0cb	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a0cd	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a0d0	b0 02		bcs $a0d4			bcs 	CISSMemory
.a0d2	68		pla				pla
.a0d3	60		rts				rts
.a0d4					CISSMemory:
.a0d4	a9 06		lda #$06		lda	#6
.a0d6	4c ff 97	jmp $97ff		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.af86					AscUnary:
.af86	fa		plx				plx 								; restore stack pos
.af87	20 16 a3	jsr $a316			jsr 	EvaluateString 				; get a string
.af8a	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.af8c	20 b9 a3	jsr $a3b9			jsr 	NSMSetByte
.af8f	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.af92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.af93					FracUnary:
.af93	fa		plx				plx 								; restore stack pos
.af94	20 0b a3	jsr $a30b			jsr 	EvaluateNumber 				; get a float or int
.af97	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.af9a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.af9d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.af9f	f0 04		beq $afa5			beq 	_IUZero
.afa1	20 63 ae	jsr $ae63			jsr 	FloatFractionalPart
.afa4	60		rts				rts
.afa5					_IUZero:
.afa5	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero
.afa8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.afa9					IntUnary:
.afa9	fa		plx				plx 								; restore stack pos
.afaa	20 0b a3	jsr $a30b			jsr 	EvaluateNumber 				; get a float or int
.afad	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.afb0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.afb3	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.afb5	f0 03		beq $afba			beq 	_IUExit
.afb7	20 c6 ae	jsr $aec6			jsr 	FloatIntegerPart
.afba					_IUExit:
.afba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.afbb					LenUnary:
.afbb	fa		plx				plx 								; restore stack pos
.afbc	20 16 a3	jsr $a316			jsr 	EvaluateString 				; get a string
.afbf	5a		phy				phy
.afc0	a0 00		ldy #$00			ldy 	#0 							; find length
.afc2					_LenFind:
.afc2	b1 36		lda ($36),y			lda 	(zTemp0),y
.afc4	f0 06		beq $afcc			beq 	_LenExit
.afc6	c8		iny				iny
.afc7	d0 f9		bne $afc2			bne 	_LenFind
.afc9	4c a9 b1	jmp $b1a9			jmp 	RangeError 					; string > 255
.afcc					_LenExit:
.afcc	98		tya				tya
.afcd	20 b9 a3	jsr $a3b9			jsr 	NSMSetByte
.afd0	7a		ply				ply
.afd1	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.afd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a0d9					Unary_Not:
.a0d9	fa		plx				plx
.a0da	20 2e a3	jsr $a32e			jsr 	EvaluateInteger 			; get integer
.a0dd	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.a0e0	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; zero mantissa ?
.a0e3	f0 04		beq $a0e9			beq 	_NotZero
.a0e5	20 b7 a3	jsr $a3b7			jsr 	NSMSetZero
.a0e8	60		rts				rts
.a0e9					_NotZero:
.a0e9	4c 6c 98	jmp $986c			jmp 	ReturnTrue
.a0ec					_UNBad:
.a0ec	4c b3 b1	jmp $b1b3			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a0ef					Unary_Random:
.a0ef	fa		plx				plx
.a0f0	20 68 a1	jsr $a168			jsr 	Random32Bit 				; get a random number
.a0f3	20 4d a1	jsr $a14d			jsr 	URCopyToMantissa  			; put in mantissa
.a0f6	e8		inx				inx
.a0f7	20 43 a3	jsr $a343			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a0fa	ca		dex				dex
.a0fb	20 42 ac	jsr $ac42			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a0fe	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a101	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a104	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.a107	60		rts				rts
.a108					Unary_Rnd:
.a108	fa		plx				plx
.a109	20 0b a3	jsr $a30b			jsr 	EvaluateNumber 				; number to use.
.a10c	20 be ab	jsr $abbe			jsr 	CheckRightBracket 			; closing bracket
.a10f	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a112	f0 2b		beq $a13f			beq 	_URCopySeed
.a114	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a117	10 23		bpl $a13c			bpl 	_URDontSeed
.a119	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a11c	49 17		eor #$17			eor 	#$17
.a11e	8d 88 04	sta $0488			sta 	RandomSeed+0
.a121	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a124	49 a5		eor #$a5			eor 	#$A5
.a126	8d 89 04	sta $0489			sta 	RandomSeed+1
.a129	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a12c	49 c2		eor #$c2			eor 	#$C2
.a12e	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a131	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a134	49 9d		eor #$9d			eor 	#$9D
.a136	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a139	20 68 a1	jsr $a168			jsr 	Random32Bit
.a13c					_URDontSeed:
.a13c	20 68 a1	jsr $a168			jsr 	Random32Bit 				; generate a number.
.a13f					_URCopySeed:
.a13f	20 4d a1	jsr $a14d			jsr 	URCopyToMantissa 			; copy into mantissa
.a142	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a144	8d 28 04	sta $0428			sta 	NSExponent
.a147	a9 08		lda #$08			lda 	#NSTFloat
.a149	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a14c	60		rts				rts
.a14d					URCopyToMantissa:
.a14d	ad 88 04	lda $0488			lda 	RandomSeed+0
.a150	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a153	ad 89 04	lda $0489			lda 	RandomSeed+1
.a156	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a159	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a15c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a15f	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a162	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.a164	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a167	60		rts				rts
.a168					Random32Bit:
.a168	5a		phy				phy
.a169	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a16b	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a16e	d0 03		bne $a173			bne 	_Random1
.a170	a8		tay				tay 								; if so do it 256 times
.a171	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a173					_Random1:
.a173	0a		asl a				asl 	a 							; LSFR RNG
.a174	2e 89 04	rol $0489			rol 	RandomSeed+1
.a177	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a17a	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a17d	90 02		bcc $a181			bcc 	_Random2
.a17f	49 c5		eor #$c5			eor 	#$C5
.a181					_Random2:
.a181	88		dey				dey
.a182	d0 ef		bne $a173			bne 	_Random1
.a184	8d 88 04	sta $0488			sta 	RandomSeed+0
.a187	7a		ply				ply
.a188	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.afd5					SgnUnary:
.afd5	fa		plx				plx 								; restore stack pos
.afd6	20 0b a3	jsr $a30b			jsr 	EvaluateNumber 				; get a float or int
.afd9	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.afdc	20 e7 a3	jsr $a3e7			jsr 	NSMIsZero 					; if zero
.afdf	f0 10		beq $aff1			beq 	_SGZero  					; return Int Zero
.afe1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.afe4	48		pha				pha
.afe5	a9 01		lda #$01			lda 	#1 							; set to 1
.afe7	20 b9 a3	jsr $a3b9			jsr 	NSMSetByte
.afea	68		pla				pla
.afeb	29 80		and #$80			and		#$80 						; copy the sign byte out
.afed	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aff0	60		rts				rts
.aff1	20 b7 a3	jsr $a3b7	_SGZero:jsr 	NSMSetZero
.aff4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.aff5					ValUnary:
.aff5	fa		plx				plx 								; restore stack pos
.aff6	20 0b b0	jsr $b00b			jsr 	ValMainCode 				; do the main val() code
.aff9	b0 01		bcs $affc			bcs 	_VUError 					; couldn't convert
.affb	60		rts				rts
.affc					_VUError:
.affc	4c ae b1	jmp $b1ae			jmp 	TypeError
.afff					IsValUnary:
.afff	fa		plx				plx 								; restore stack pos
.b000	20 0b b0	jsr $b00b			jsr 	ValMainCode 				; do the main val() code
.b003	b0 03		bcs $b008			bcs 	_VUBad
.b005	4c 6c 98	jmp $986c			jmp 	ReturnTrue
.b008					_VUBad:
.b008	4c 78 98	jmp $9878			jmp 	ReturnFalse
.b00b					ValMainCode:
.b00b	20 16 a3	jsr $a316			jsr 	EvaluateString 				; get a string
.b00e	20 be ab	jsr $abbe			jsr 	CheckRightBracket 			; check right bracket present
.b011	5a		phy				phy
.b012	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b014	f0 17		beq $b02d			beq 	_VMCFail2
.b016	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b018	48		pha				pha 								; save first character
.b019	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b01b	d0 01		bne $b01e			bne 	_VMCStart
.b01d	c8		iny				iny 								; skip over -
.b01e					_VMCStart:
.b01e	38		sec				sec 								; initialise first time round.
.b01f					_VMCNext:
.b01f	c8		iny				iny 								; pre-increment
.b020	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b022	f0 0c		beq $b030			beq 	_VMCSuccess 				; successful.
.b024	20 bb 9d	jsr $9dbb			jsr 	EncodeNumber 				; send it to the number-builder
.b027	90 03		bcc $b02c			bcc 	_VMCFail 					; if failed, give up.
.b029	18		clc				clc 								; next time round, countinue
.b02a	80 f3		bra $b01f			bra 	_VMCNext
.b02c					_VMCFail:
.b02c	68		pla				pla
.b02d					_VMCFail2:
.b02d	7a		ply				ply
.b02e	38		sec				sec
.b02f	60		rts				rts
.b030					_VMCSuccess:
.b030	a9 00		lda #$00			lda 	#0 							; construct final
.b032	20 bb 9d	jsr $9dbb			jsr 	EncodeNumber
.b035	68		pla				pla
.b036	c9 2d		cmp #$2d			cmp 	#"-"
.b038	d0 03		bne $b03d			bne 	_VMCNotNegative
.b03a	20 63 a3	jsr $a363			jsr		NSMNegate
.b03d					_VMCNotNegative:
.b03d	7a		ply				ply
.b03e	18		clc				clc
.b03f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a189					ChrUnary:
.a189	fa		plx				plx 								; restore stack pos
.a18a	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger			; get value
.a18d	48		pha				pha
.a18e	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.a191	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a193	20 d9 b4	jsr $b4d9			jsr 	StringTempAllocate
.a196	68		pla				pla 								; write number to it
.a197	20 17 b5	jsr $b517			jsr 	StringTempWrite
.a19a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a19b					SpcUnary:
.a19b	fa		plx				plx 								; restore stack pos
.a19c	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger			; get value
.a19f	5a		phy				phy
.a1a0	48		pha				pha 								; save count
.a1a1	20 d9 b4	jsr $b4d9			jsr 	StringTempAllocate
.a1a4	7a		ply				ply 								; to do count in Y
.a1a5					_SpcLoop:
.a1a5	c0 00		cpy #$00			cpy 	#0
.a1a7	f0 08		beq $a1b1			beq 	_SpcExit
.a1a9	a9 20		lda #$20			lda 	#32
.a1ab	20 17 b5	jsr $b517			jsr 	StringTempWrite
.a1ae	88		dey				dey
.a1af	80 f4		bra $a1a5			bra 	_SPCLoop
.a1b1					_SpcExit:
.a1b1	7a		ply				ply
.a1b2	20 be ab	jsr $abbe			jsr 	CheckRightBracket
.a1b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a1b6					Unary_Str:
.a1b6	fa		plx				plx
.a1b7	20 0b a3	jsr $a30b			jsr 	EvaluateNumber  			; get number
.a1ba	20 be ab	jsr $abbe			jsr 	CheckRightBracket 			; closing bracket
.a1bd	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a1bf	20 d8 a1	jsr $a1d8			jsr 	ConvertNumberToString 		; do the conversion.
.a1c2	a9 21		lda #$21			lda		#33 						; create buffer
.a1c4	20 d9 b4	jsr $b4d9			jsr 	StringTempAllocate 			; allocate memory
.a1c7	da		phx				phx
.a1c8	a2 00		ldx #$00			ldx 	#0
.a1ca					_USCopy:
.a1ca	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a1cd	20 17 b5	jsr $b517			jsr 	StringTempWrite
.a1d0	e8		inx				inx
.a1d1	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a1d4	d0 f4		bne $a1ca			bne 	_USCopy
.a1d6	fa		plx				plx
.a1d7	60		rts				rts
.a1d8					ConvertNumberToString:
.a1d8	5a		phy				phy 								; save code position
.a1d9	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a1dc	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a1df	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a1e2	10 0a		bpl $a1ee			bpl 	_CNTSNotNegative
.a1e4	29 7f		and #$7f			and 	#$7F 						; make +ve
.a1e6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a1e9	a9 2d		lda #$2d			lda 	#"-"
.a1eb	20 54 a2	jsr $a254			jsr 	WriteDecimalBuffer
.a1ee					_CNTSNotNegative:
.a1ee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a1f1	f0 15		beq $a208			beq 	_CNTSNotFloat
.a1f3	e8		inx				inx 								; round up
.a1f4	a9 01		lda #$01			lda 	#1
.a1f6	20 b9 a3	jsr $a3b9			jsr 	NSMSetByte
.a1f9	ca		dex				dex
.a1fa	bd 28 04	lda $0428,x			lda		NSExponent,x
.a1fd	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a200	a9 08		lda #$08			lda 	#NSTFloat
.a202	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a205	20 85 ad	jsr $ad85			jsr 	FloatAdd
.a208					_CNTSNotFloat:
.a208	20 36 a2	jsr $a236			jsr 	MakePlusTwoString
.a20b	20 63 ae	jsr $ae63			jsr 	FloatFractionalPart 		; get the fractional part
.a20e	20 27 af	jsr $af27			jsr 	NSNormalise					; normalise , exit if zero
.a211	f0 21		beq $a234			beq 	_CNTSExit
.a213	a9 2e		lda #$2e			lda 	#"."
.a215	20 54 a2	jsr $a254			jsr 	WriteDecimalBuffer 			; write decimal place
.a218					_CNTSDecimal:
.a218	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a21b	30 17		bmi $a234			bmi 	_CNTSExit
.a21d	e8		inx				inx 								; x 10.0
.a21e	a9 0a		lda #$0a			lda 	#10
.a220	20 b9 a3	jsr $a3b9			jsr 	NSMSetByte
.a223	a9 08		lda #$08			lda 	#NSTFloat
.a225	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a228	ca		dex				dex
.a229	20 f0 ae	jsr $aef0			jsr 	FloatMultiply
.a22c	20 36 a2	jsr $a236			jsr 	MakePlusTwoString
.a22f	20 63 ae	jsr $ae63			jsr 	FloatFractionalPart 		; get the fractional part
.a232	80 e4		bra $a218			bra 	_CNTSDecimal 				; keep going.
.a234					_CNTSExit:
.a234	7a		ply				ply
.a235	60		rts				rts
.a236					MakePlusTwoString:
.a236	da		phx				phx
.a237	20 8e a3	jsr $a38e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a23a	e8		inx				inx 								; access it
.a23b	e8		inx				inx
.a23c	20 c6 ae	jsr $aec6			jsr 	FloatIntegerPart 			; make it an integer
.a23f	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a241	20 2f ad	jsr $ad2f			jsr 	ConvertInt32
.a244	a2 00		ldx #$00			ldx	 	#0
.a246					_MPTSCopy:
.a246	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a249	20 54 a2	jsr $a254			jsr 	WriteDecimalBuffer
.a24c	e8		inx				inx
.a24d	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a250	d0 f4		bne $a246			bne 	_MPTSCopy
.a252	fa		plx				plx
.a253	60		rts				rts
.a254					WriteDecimalBuffer:
.a254	da		phx				phx
.a255	ae 95 04	ldx $0495			ldx 	dbOffset
.a258	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a25b	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a25e	ee 95 04	inc $0495			inc 	dbOffset
.a261	fa		plx				plx
.a262	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a263					Unary_Left:
.a263	fa		plx				plx
.a264	18		clc				clc 								; only one parameter
.a265	20 da a2	jsr $a2da			jsr 	SubstringInitial 			; set up.
.a268	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a26b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a26e	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a271	80 2c		bra $a29f			bra 	SubstringMain
.a273					Unary_Right:
.a273	fa		plx				plx
.a274	18		clc				clc 								; only one parameter
.a275	20 da a2	jsr $a2da			jsr 	SubstringInitial 			; set up.
.a278	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a27b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a27e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a281	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a284	b0 02		bcs $a288			bcs 	_URNotUnderflow
.a286	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a288					_URNotUnderFlow:
.a288	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a28b	80 12		bra $a29f			bra 	SubStringMain
.a28d					Unary_Mid:
.a28d	fa		plx				plx
.a28e	38		sec				sec 								; two parameters
.a28f	20 da a2	jsr $a2da			jsr 	SubstringInitial 			; set up.
.a292	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a295	f0 05		beq $a29c			beq 	_UMError
.a297	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a29a	80 03		bra $a29f			bra 	SubStringMain
.a29c					_UMError:
.a29c	4c b3 b1	jmp $b1b3			jmp 	ArgumentError
.a29f					SubStringMain:
.a29f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a2a2	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a2a5	b0 2d		bcs $a2d4			bcs 	_SSMNull 					; if so, return an empty string.
.a2a7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a2aa	f0 28		beq $a2d4			beq 	_SSMNull 					; return empty string.
.a2ac	18		clc				clc 								; add the offset +1 to the address and
.a2ad	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a2b0	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a2b3	85 36		sta $36				sta 	zTemp0
.a2b5	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a2b8	69 00		adc #$00			adc 	#0
.a2ba	85 37		sta $37				sta 	zTemp0+1
.a2bc					_SSMNoCarry:
.a2bc	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a2bf	20 d9 b4	jsr $b4d9			jsr 	StringTempAllocate 			; allocate that many characters
.a2c2	5a		phy				phy 								; save Y
.a2c3	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a2c5					_SSMCopy:
.a2c5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a2c7	f0 09		beq $a2d2			beq 	_SSMEString 				; no more to copy
.a2c9	20 17 b5	jsr $b517			jsr 	StringTempWrite 			; and write it out.
.a2cc	c8		iny				iny
.a2cd	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a2d0	d0 f3		bne $a2c5			bne 	_SSMCopy
.a2d2					_SSMEString:
.a2d2	7a		ply				ply
.a2d3					_SSMExit:
.a2d3	60		rts				rts
.a2d4					_SSMNull:
.a2d4	a9 00		lda #$00			lda 	#0
.a2d6	20 d9 b4	jsr $b4d9			jsr 	StringTempAllocate
.a2d9	60		rts				rts
.a2da					SubstringInitial:
.a2da	da		phx				phx 								; save initial stack position
.a2db	08		php				php 								; save carry on stack indicating 2 parameters
.a2dc	20 16 a3	jsr $a316			jsr 	EvaluateString 				; get a string
.a2df	5a		phy				phy 								; calculate length to exponent.
.a2e0	a0 ff		ldy #$ff			ldy 	#$FF
.a2e2					_SIFindLength:
.a2e2	c8		iny				iny
.a2e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2e5	d0 fb		bne $a2e2			bne 	_SIFindLength
.a2e7	98		tya				tya
.a2e8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a2eb	7a		ply				ply
.a2ec	e8		inx				inx
.a2ed	20 c6 ab	jsr $abc6			jsr 	CheckComma 					; comma next
.a2f0	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get next parameter
.a2f3	28		plp				plp 								; is it the last parameter ?
.a2f4	90 07		bcc $a2fd			bcc 	_SSIExit 					; if so, exit.
.a2f6	e8		inx				inx
.a2f7	20 c6 ab	jsr $abc6			jsr 	CheckComma 					; comma next
.a2fa	20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get last parameter
.a2fd					_SSIExit:
.a2fd	fa		plx				plx
.a2fe	20 be ab	jsr $abbe			jsr 	CheckRightBracket 			; check closing bracket
.a301	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a302					EvaluateValue:
.a302	48		pha				pha
.a303	20 08 9c	jsr $9c08			jsr		EvaluateExpression 			; expression
.a306	20 1d 9d	jsr $9d1d			jsr 	Dereference					; derefernce it
.a309	68		pla				pla
.a30a	60		rts				rts
.a30b					EvaluateNumber:
.a30b	20 02 a3	jsr $a302			jsr 	EvaluateValue 				; get a value
.a30e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a311	29 10		and #$10			and 	#NSBIsString
.a313	d0 16		bne $a32b			bne 	HelperTypeError
.a315	60		rts				rts
.a316					EvaluateString:
.a316	20 02 a3	jsr $a302			jsr 	EvaluateValue 				; get a value
.a319	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a31c	29 10		and #$10			and 	#NSBIsString
.a31e	f0 0b		beq $a32b			beq 	HelperTypeError
.a320					CopyAddressToTemp0:
.a320	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a323	85 36		sta $36				sta 	zTemp0
.a325	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a328	85 37		sta $37				sta 	zTemp0+1
.a32a	60		rts				rts
.a32b					HelperTypeError:
.a32b	4c ae b1	jmp $b1ae			jmp 	TypeError
.a32e					EvaluateInteger:
.a32e	20 0b a3	jsr $a30b			jsr 	EvaluateNumber
.a331	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a334	d0 0a		bne $a340			bne 	HelperValueError 			; if not, it's a float.
.a336	60		rts				rts
.a337					EvaluateUnsignedInteger:
.a337	20 2e a3	jsr $a32e			jsr 	EvaluateInteger 			; check integer is +ve
.a33a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a33d	30 01		bmi $a340			bmi 	HelperValueError
.a33f	60		rts				rts
.a340					HelperValueError:
.a340	4c b3 b1	jmp $b1b3			jmp 	ArgumentError
.a343					Evaluate16BitInteger:
.a343	20 37 a3	jsr $a337			jsr	 	EvaluateUnsignedInteger		; get integer
.a346	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a349	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a34c	d0 f2		bne $a340			bne 	HelperValueError
.a34e	60		rts				rts
.a34f					Evaluate8BitInteger:
.a34f	20 37 a3	jsr $a337			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a352	d0 ec		bne $a340			bne 	HelperValueError
.a354	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a357	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a35a	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a35d	d0 e1		bne $a340			bne 	HelperValueError
.a35f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a362	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b040					Multiply8x8:
.b040	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b041	85 36		sta $36			  	sta 	zTemp0
.b043	86 37		stx $37				stx 	zTemp0+1
.b045	a9 00		lda #$00			lda 	#0
.b047	a2 08		ldx #$08			ldx 	#8
.b049					_M88Loop:
.b049	90 03		bcc $b04e			bcc 	_M88NoAdd
.b04b	18		clc				clc
.b04c	65 37		adc $37				adc 	zTemp0+1
.b04e					_M88NoAdd:
.b04e	6a		ror a				ror 	a
.b04f	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b051	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b052	d0 f5		bne $b049			bne 	_M88Loop
.b054	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b056	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a363					NSMNegate:
.a363	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a366	49 80		eor #$80			eor 	#NSBIsNegative
.a368	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a36b	60		rts				rts
.a36c					NSMNegateMantissa:
.a36c	38		sec				sec
.a36d	a9 00		lda #$00			lda 	#0
.a36f	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a372	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a375	a9 00		lda #$00			lda 	#0
.a377	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a37a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a37d	a9 00		lda #$00			lda 	#0
.a37f	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a382	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a385	a9 00		lda #$00			lda 	#0
.a387	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a38a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a38d	60		rts				rts
.a38e					NSMShiftUpTwo:
.a38e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a391	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a394	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a397	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a39a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a39d	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a3a0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a3a3	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a3a6	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a3a9	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a3ac	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a3af	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a3b2	60		rts				rts
.a3b3					NSMSetZeroMantissaOnly:
.a3b3	a9 00		lda #$00			lda 	#0
.a3b5	80 08		bra $a3bf			bra 	NSMSetMantissa
.a3b7					NSMSetZero:
.a3b7	a9 00		lda #$00			lda 	#0
.a3b9					NSMSetByte:
.a3b9	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a3bc	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a3bf					NSMSetMantissa:
.a3bf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a3c2	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a3c5	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a3c8	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a3cb	60		rts				rts
.a3cc					NSMShiftLeft:
.a3cc	18		clc				clc
.a3cd					NSMRotateLeft:
.a3cd	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a3d0	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a3d3	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a3d6	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a3d9	60		rts				rts
.a3da					NSMShiftRight:
.a3da	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a3dd	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a3e0	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a3e3	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a3e6	60		rts				rts
.a3e7					NSMIsZero:
.a3e7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a3ea	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a3ed	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a3f0	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a3f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b057					Assemble_ora:
.b057	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b05a	01					.byte $01
.b05b					Assemble_and:
.b05b	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b05e	21					.byte $21
.b05f					Assemble_eor:
.b05f	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b062	41					.byte $41
.b063					Assemble_adc:
.b063	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b066	61					.byte $61
.b067					Assemble_sta:
.b067	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b06a	81					.byte $81
.b06b					Assemble_lda:
.b06b	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b06e	a1					.byte $a1
.b06f					Assemble_cmp:
.b06f	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b072	c1					.byte $c1
.b073					Assemble_sbc:
.b073	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b076	e1					.byte $e1
.b077					Assemble_asl:
.b077	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b07a	02					.byte $02
>b07b	75					.byte $75
.b07c					Assemble_rol:
.b07c	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b07f	22					.byte $22
>b080	75					.byte $75
.b081					Assemble_lsr:
.b081	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b084	42					.byte $42
>b085	75					.byte $75
.b086					Assemble_ror:
.b086	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b089	62					.byte $62
>b08a	75					.byte $75
.b08b					Assemble_stx:
.b08b	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b08e	82					.byte $82
>b08f	50					.byte $50
.b090					Assemble_ldx:
.b090	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b093	a2					.byte $a2
>b094	d0					.byte $d0
.b095					Assemble_dec:
.b095	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b098	c2					.byte $c2
>b099	55					.byte $55
.b09a					Assemble_inc:
.b09a	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b09d	e2					.byte $e2
>b09e	55					.byte $55
.b09f					Assemble_stz:
.b09f	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0a2	60					.byte $60
>b0a3	44					.byte $44
.b0a4					Assemble_bit:
.b0a4	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0a7	20					.byte $20
>b0a8	55					.byte $55
.b0a9					Assemble_sty:
.b0a9	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0ac	80					.byte $80
>b0ad	54					.byte $54
.b0ae					Assemble_ldy:
.b0ae	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0b1	a0					.byte $a0
>b0b2	d5					.byte $d5
.b0b3					Assemble_cpy:
.b0b3	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0b6	c0					.byte $c0
>b0b7	d4					.byte $d4
.b0b8					Assemble_cpx:
.b0b8	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0bb	e0					.byte $e0
>b0bc	d0					.byte $d0
.b0bd					Assemble_tsb:
.b0bd	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0c0	00					.byte $00
>b0c1	50					.byte $50
.b0c2					Assemble_trb:
.b0c2	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0c5	10					.byte $10
>b0c6	50					.byte $50
.b0c7					Assemble_jsr:
.b0c7	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0ca	14					.byte $14
>b0cb	10					.byte $10
.b0cc					Assemble_jmp:
.b0cc	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0cf	40					.byte $40
>b0d0	10					.byte $10
.b0d1					Assemble_bpl:
.b0d1	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0d4	10					.byte $10
.b0d5					Assemble_bmi:
.b0d5	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0d8	30					.byte $30
.b0d9					Assemble_bvc:
.b0d9	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0dc	50					.byte $50
.b0dd					Assemble_bvs:
.b0dd	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0e0	70					.byte $70
.b0e1					Assemble_bcc:
.b0e1	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0e4	90					.byte $90
.b0e5					Assemble_bcs:
.b0e5	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0e8	b0					.byte $b0
.b0e9					Assemble_bne:
.b0e9	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0ec	d0					.byte $d0
.b0ed					Assemble_beq:
.b0ed	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0f0	f0					.byte $f0
.b0f1					Assemble_bra:
.b0f1	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b0f4	80					.byte $80
.b0f5					Assemble_brk:
.b0f5	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b0f8	00					.byte $00
.b0f9					Assemble_php:
.b0f9	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b0fc	08					.byte $08
.b0fd					Assemble_clc:
.b0fd	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b100	18					.byte $18
.b101					Assemble_plp:
.b101	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b104	28					.byte $28
.b105					Assemble_sec:
.b105	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b108	38					.byte $38
.b109					Assemble_rti:
.b109	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b10c	40					.byte $40
.b10d					Assemble_pha:
.b10d	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b110	48					.byte $48
.b111					Assemble_cli:
.b111	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b114	58					.byte $58
.b115					Assemble_phy:
.b115	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b118	5a					.byte $5a
.b119					Assemble_rts:
.b119	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b11c	60					.byte $60
.b11d					Assemble_pla:
.b11d	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b120	68					.byte $68
.b121					Assemble_sei:
.b121	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b124	78					.byte $78
.b125					Assemble_ply:
.b125	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b128	7a					.byte $7a
.b129					Assemble_dey:
.b129	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b12c	88					.byte $88
.b12d					Assemble_txa:
.b12d	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b130	8a					.byte $8a
.b131					Assemble_tya:
.b131	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b134	98					.byte $98
.b135					Assemble_txs:
.b135	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b138	9a					.byte $9a
.b139					Assemble_tay:
.b139	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b13c	a8					.byte $a8
.b13d					Assemble_tax:
.b13d	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b140	aa					.byte $aa
.b141					Assemble_clv:
.b141	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b144	b8					.byte $b8
.b145					Assemble_tsx:
.b145	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b148	ba					.byte $ba
.b149					Assemble_iny:
.b149	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b14c	c8					.byte $c8
.b14d					Assemble_dex:
.b14d	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b150	ca					.byte $ca
.b151					Assemble_cld:
.b151	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b154	d8					.byte $d8
.b155					Assemble_phx:
.b155	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b158	da					.byte $da
.b159					Assemble_stp:
.b159	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b15c	db					.byte $db
.b15d					Assemble_inx:
.b15d	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b160	e8					.byte $e8
.b161					Assemble_nop:
.b161	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b164	ea					.byte $ea
.b165					Assemble_sed:
.b165	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b168	f8					.byte $f8
.b169					Assemble_plx:
.b169	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b16c	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b16d					DecimalScalarTable:
>b16d	66 66 66 66				.dword $66666666 ; 0.1
>b171	de					.byte $de
>b172	1f 85 eb 51				.dword $51eb851f ; 0.01
>b176	db					.byte $db
>b177	4c 37 89 41				.dword $4189374c ; 0.001
>b17b	d8					.byte $d8
>b17c	ac 8b db 68				.dword $68db8bac ; 0.0001
>b180	d4					.byte $d4
>b181	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b185	d1					.byte $d1
>b186	83 de 1b 43				.dword $431bde83 ; 1e-06
>b18a	ce					.byte $ce
>b18b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b18f	ca					.byte $ca
>b190	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b194	c7					.byte $c7
>b195	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b199	c4					.byte $c4
>b19a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b19e	c0					.byte $c0
>b19f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b1a3	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b1a4					SyntaxError:
.b1a4	a9 02		lda #$02		lda	#2
.b1a6	4c ff 97	jmp $97ff		jmp	ErrorHandler
.b1a9					RangeError:
.b1a9	a9 04		lda #$04		lda	#4
.b1ab	4c ff 97	jmp $97ff		jmp	ErrorHandler
.b1ae					TypeError:
.b1ae	a9 05		lda #$05		lda	#5
.b1b0	4c ff 97	jmp $97ff		jmp	ErrorHandler
.b1b3					ArgumentError:
.b1b3	a9 07		lda #$07		lda	#7
.b1b5	4c ff 97	jmp $97ff		jmp	ErrorHandler
.b1b8					NotDoneError:
.b1b8	a9 0c		lda #$0c		lda	#12
.b1ba	4c ff 97	jmp $97ff		jmp	ErrorHandler
.b1bd					ErrorText:
>b1bd	42 72 65 61 6b 00			.text	"Break",0
>b1c3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b1cb	72 72 6f 72 00
>b1d0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b1d8	20 62 79 20 7a 65 72 6f 00
>b1e1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b1e9	61 6e 67 65 00
>b1ee	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b1f6	6d 61 74 63 68 00
>b1fc	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b204	65 6d 6f 72 79 00
>b20a	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b212	61 72 67 75 6d 65 6e 74 00
>b21b	53 74 6f 70 00				.text	"Stop",0
>b220	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b228	6f 6f 20 6c 6f 6e 67 00
>b230	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b238	6e 20 66 61 69 6c 65 64 00
>b241	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b249	61 74 61 00
>b24d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b255	65 6e 74 65 64 00
>b25b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b263	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b26f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b277	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b284	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b28c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b299	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b2a1	68 6f 75 74 20 57 68 69 6c 65 00
>b2ac	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b2b4	68 6f 75 74 20 46 6f 72 00
>b2bd	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b2c5	61 63 6b 20 66 75 6c 6c 00
>b2ce	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b2d6	75 63 74 75 72 65 00
>b2dd	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b2e5	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b2f2	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b2fa	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b308	41 72 72 61 79 20 73 69			.text	"Array size",0
>b310	7a 65 00
>b313	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b31b	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b323	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1768."
>b32b	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>b33b	30 32 32 2e 20 42 75 69 6c 64 20 31 37 36 38 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b34b					EXTInitialise:
.b34b	64 01		stz $01				stz 	1
.b34d	9c 04 d0	stz $d004			stz 	$D004
.b350	9c 08 d0	stz $d008			stz 	$D008
.b353	9c 09 d0	stz $d009			stz 	$D009
.b356	60		rts				rts
.b357					EXTPrintCharacter:
.b357	48		pha				pha
.b358	da		phx				phx
.b359	5a		phy				phy
.b35a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b35d	7a		ply				ply
.b35e	fa		plx				plx
.b35f	68		pla				pla
.b360	60		rts				rts
.b361					EXTInputSingleCharacter:
.b361	da		phx				phx
.b362	5a		phy				phy
.b363					_EISCWait:
.b363	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b366	c9 00		cmp #$00			cmp 	#0
.b368	f0 f9		beq $b363			beq 	_EISCWait
.b36a	7a		ply				ply
.b36b	fa		plx				plx
.b36c	60		rts				rts
.b36d					EXTInputLine:
.b36d	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b36f					_ILLoop:
.b36f	da		phx				phx 								; read character in
.b370	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b373	fa		plx				plx
.b374	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b376	f0 12		beq $b38a			beq 	_ILBackspace
.b378	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b37a	f0 15		beq $b391			beq 	_ILExit
.b37c	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b37e	90 ef		bcc $b36f			bcc 	_ILLoop
.b380	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b382	f0 eb		beq $b36f			beq 	_ILLoop
.b384	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b387	e8		inx				inx
.b388	80 e5		bra $b36f			bra 	_ILLoop
.b38a					_ILBackspace:
.b38a	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b38c	f0 e1		beq $b36f			beq 	_ILLoop
.b38e	ca		dex				dex 								; back one.
.b38f	80 de		bra $b36f			bra 	_ILLoop
.b391					_ILExit:
.b391	20 57 b3	jsr $b357			jsr 	EXTPrintCharacter
.b394	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b397	60		rts				rts
.b398					EXTBreakCheck:
.b398	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b39b					MemoryDeleteLine:
.b39b	20 ba b3	jsr $b3ba			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b39e	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b3a0	a8		tay				tay
.b3a1					_MDDLLoop:
.b3a1	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b3a3	92 30		sta ($30)			sta 	(codePtr)
.b3a5	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b3a7	c5 3a		cmp $3a				cmp 	zTemp2
.b3a9	d0 07		bne $b3b2			bne 	_MDLDLNext
.b3ab	a5 31		lda $31				lda 	codePtr+1
.b3ad	c5 3b		cmp $3b				cmp 	zTemp2+1
.b3af	d0 01		bne $b3b2			bne 	_MDLDLNext
.b3b1					_MDDLExit:
.b3b1	60		rts				rts
.b3b2					_MDLDLNext:
.b3b2	e6 30		inc $30				inc 	codePtr						; next byte
.b3b4	d0 eb		bne $b3a1			bne 	_MDDLLoop
.b3b6	e6 31		inc $31				inc 	codePtr+1
.b3b8	80 e7		bra $b3a1			bra 	_MDDLLoop
.b3ba					IMemoryFindEnd:
.b3ba	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b3bc	85 3a		sta $3a				sta 	0+zTemp2
.b3be	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3c0	85 3b		sta $3b				sta 	1+zTemp2
.b3c2					_MDLFELoop:
.b3c2	b2 3a		lda ($3a)			lda 	(zTemp2)
.b3c4	f0 0b		beq $b3d1			beq 	_MDLFEExit
.b3c6	18		clc				clc
.b3c7	65 3a		adc $3a				adc 	zTemp2
.b3c9	85 3a		sta $3a				sta 	zTemp2
.b3cb	90 f5		bcc $b3c2			bcc 	_MDLFELoop
.b3cd	e6 3b		inc $3b				inc 	zTemp2+1
.b3cf	80 f1		bra $b3c2			bra 	_MDLFELoop
.b3d1					_MDLFEExit:
.b3d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b3d2					MemoryInsertLine:
.b3d2	08		php				php
.b3d3	20 ba b3	jsr $b3ba			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b3d6	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b3d8	1a		inc a				inc 	a
.b3d9	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b3db	b0 36		bcs $b413			bcs 	_MDLIError
.b3dd	28		plp				plp
.b3de	90 08		bcc $b3e8			bcc 	_MDLIFound
.b3e0	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b3e2	85 30		sta $30				sta 	codePtr
.b3e4	a5 3b		lda $3b				lda 	zTemp2+1
.b3e6	85 31		sta $31				sta 	codePtr+1
.b3e8					_MDLIFound:
.b3e8	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b3eb	a8		tay				tay
.b3ec					_MDLIInsert:
.b3ec	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b3ee	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b3f0	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b3f2	c5 3a		cmp $3a				cmp 	zTemp2
.b3f4	d0 06		bne $b3fc			bne 	_MDLINext
.b3f6	a5 31		lda $31				lda 	codePtr+1
.b3f8	c5 3b		cmp $3b				cmp 	zTemp2+1
.b3fa	f0 0a		beq $b406			beq 	_MDLIHaveSpace
.b3fc					_MDLINext:
.b3fc	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b3fe	d0 02		bne $b402			bne 	_MDLINoBorrow
.b400	c6 3b		dec $3b				dec 	zTemp2+1
.b402					_MDLINoBorrow:
.b402	c6 3a		dec $3a				dec 	zTemp2
.b404	80 e6		bra $b3ec			bra 	_MDLIInsert
.b406					_MDLIHaveSpace:
.b406	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b409	88		dey				dey 								; from offset-1 to 0
.b40a					_MDLICopy:
.b40a	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b40d	91 30		sta ($30),y			sta 	(codePtr),y
.b40f	88		dey				dey
.b410	10 f8		bpl $b40a			bpl 	_MDLICopy
.b412	60		rts				rts
.b413					_MDLIError:
.b413	a9 06		lda #$06		lda	#6
.b415	4c ff 97	jmp $97ff		jmp	ErrorHandler
.b418					MDLAppendLine:
.b418	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b41a	85 36		sta $36				sta 	zTemp0
.b41c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b41e	85 38		sta $38				sta 	0+zTemp1
.b420	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b422	85 39		sta $39				sta 	1+zTemp1
.b424	b2 38		lda ($38)			lda 	(zTemp1)
.b426	d0 0a		bne $b432			bne 	_MDLANoInitialise
.b428	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b42a	8d 6a 06	sta $066a			sta 	0+AppendPointer
.b42d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b42f	8d 6b 06	sta $066b			sta 	1+AppendPointer
.b432					_MDLANoInitialise:
.b432	18		clc				clc
.b433	ad 6a 06	lda $066a			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b436	85 38		sta $38				sta 	zTemp1
.b438	72 36		adc ($36)			adc 	(zTemp0)
.b43a	8d 6a 06	sta $066a			sta 	AppendPointer
.b43d	ad 6b 06	lda $066b			lda 	AppendPointer+1
.b440	85 39		sta $39				sta 	zTemp1+1
.b442	69 00		adc #$00			adc 	#0
.b444	8d 6b 06	sta $066b			sta 	AppendPointer+1
.b447	a0 00		ldy #$00			ldy 	#0
.b449					_MDLACopy:
.b449	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b44b	91 38		sta ($38),y			sta 	(zTemp1),y
.b44d	c8		iny				iny
.b44e	98		tya				tya
.b44f	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b451	d0 f6		bne $b449			bne 	_MDLACopy
.b453	a9 00		lda #$00			lda 	#0 							; end of program.
.b455	91 38		sta ($38),y			sta 	(zTemp1),y
.b457	60		rts				rts
.066a					AppendPointer:
>066a							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a3f4					MemoryNew:
.a3f4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a3f6	85 30		sta $30				sta 	codePtr
.a3f8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a3fa	85 31		sta $31				sta 	codePtr+1
.a3fc	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a3fe	92 30		sta ($30)			sta 	(codePtr)
.a400	60		rts				rts
.a401					MemoryInline:
.a401	98		tya				tya 								; put address into stack,x
.a402	18		clc				clc
.a403	65 30		adc $30				adc 	codePtr
.a405	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a408	a5 31		lda $31				lda 	codePtr+1
.a40a	69 00		adc #$00			adc 	#0
.a40c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a40f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a412	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a415	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a416					MemorySearch:
.a416	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a418	86 37		stx $37				stx 	zTemp0+1
.a41a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a41c	85 30		sta $30				sta 	codePtr
.a41e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a420	85 31		sta $31				sta 	codePtr+1
.a422					_MTAXLoop:
.a422	b2 30		lda ($30)			lda 	(codePtr)
.a424	18		clc				clc
.a425	f0 21		beq $a448			beq 	_MTAXExit 					; reached end, exit with CC.
.a427	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a429	b1 30		lda ($30),y			lda 	(codePtr),y
.a42b	38		sec				sec
.a42c	e5 36		sbc $36				sbc 	zTemp0
.a42e	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a430	c8		iny				iny 								; do the MSB
.a431	b1 30		lda ($30),y			lda 	(codePtr),y
.a433	e5 37		sbc $37				sbc 	zTemp0+1
.a435	05 38		ora $38				ora 	zTemp1
.a437	f0 0f		beq $a448			beq 	_MTAXExit	 				; found
.a439	b0 0d		bcs $a448			bcs 	_MTAXExit 					; current < required exit
.a43b	18		clc				clc
.a43c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a43e	65 30		adc $30				adc 	codePtr
.a440	85 30		sta $30				sta 	codePtr
.a442	90 02		bcc $a446			bcc 	_CREExit
.a444	e6 31		inc $31				inc 	codePtr+1
.a446					_CREExit:
.a446	80 da		bra $a422			bra 	_MTAXLoop
.a448					_MTAXExit:
.a448	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a449					StackPushByte:
.a449	48		pha				pha 								; save byte
.a44a	a5 34		lda $34				lda 	BasicStack
.a44c	d0 09		bne $a457			bne 	_SPBNoBorrow
.a44e	c6 35		dec $35				dec 	BasicStack+1
.a450	48		pha				pha
.a451	a5 35		lda $35				lda 	BasicStack+1
.a453	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a455	90 06		bcc $a45d			bcc 	_SPBMemory
.a457					_SPBNoBorrow:
.a457	c6 34		dec $34				dec 	BasicStack
.a459	68		pla				pla 								; get back and write
.a45a	92 34		sta ($34)			sta 	(BasicStack)
.a45c	60		rts				rts
.a45d					_SPBMemory:
.a45d	a9 12		lda #$12		lda	#18
.a45f	4c ff 97	jmp $97ff		jmp	ErrorHandler
.a462					StackPopByte:
.a462	b2 34		lda ($34)			lda 	(BasicStack)
.a464	e6 34		inc $34				inc 	BasicStack
.a466	d0 02		bne $a46a			bne 	_SPBNoCarry
.a468	e6 35		inc $35				inc 	BasicStack+1
.a46a					_SPBNoCarry:
.a46a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a46b					StackOpen:
.a46b	48		pha				pha 								; save frame byte
.a46c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a46e	0a		asl a				asl 	a 							; claim twice this for storage
.a46f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a471	38		sec				sec 								; so basically subtracting from
.a472	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a474	85 34		sta $34				sta 	basicStack
.a476	b0 08		bcs $a480			bcs 	_SONoBorrow
.a478	c6 35		dec $35				dec 	basicStack+1
.a47a	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a47c	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a47e	90 04		bcc $a484			bcc 	_SOMemory
.a480					_SONoBorrow:
.a480	68		pla				pla 								; get marker back and write at TOS
.a481	92 34		sta ($34)			sta 	(basicStack)
.a483	60		rts				rts
.a484					_SOMemory:
.a484	a9 12		lda #$12		lda	#18
.a486	4c ff 97	jmp $97ff		jmp	ErrorHandler
.a489					StackClose:
.a489	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a48b	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a48d	0a		asl a				asl 	a 							; claim twice this.
.a48e	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a490	85 34		sta $34				sta 	basicStack
.a492	90 02		bcc $a496			bcc 	_SCExit
.a494	e6 35		inc $35				inc 	basicStack+1
.a496					_SCExit:
.a496	60		rts				rts
.a497					StackCheckFrame:
.a497	48		pha				pha
.a498					_StackRemoveLocals:
.a498	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a49a	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a49c	b0 05		bcs $a4a3			bcs 	_SCNoLocal
.a49e	20 65 ab	jsr $ab65			jsr 	LocalPopValue
.a4a1	80 f5		bra $a498			bra 	_StackRemoveLocals
.a4a3					_SCNoLocal:
.a4a3	68		pla				pla
.a4a4	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a4a6	29 f0		and #$f0			and 	#$F0 						; check type bits
.a4a8	d0 01		bne $a4ab			bne 	_SCFError 					; different, we have structures mixed up
.a4aa	60		rts				rts
.a4ab					_SCFError:
.a4ab	8a		txa				txa 								; report error X
.a4ac	4c ff 97	jmp $97ff			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a4af					STKSaveCodePosition:
.a4af	5a		phy				phy
.a4b0	98		tya				tya 								; save Y
.a4b1	a0 05		ldy #$05			ldy 	#5
.a4b3	91 34		sta ($34),y			sta 	(basicStack),y
.a4b5	88		dey				dey 								; save Code Pointer
.a4b6					_STKSaveLoop:
.a4b6	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a4b9	91 34		sta ($34),y			sta 	(basicStack),y
.a4bb	88		dey				dey
.a4bc	d0 f8		bne $a4b6			bne 	_STKSaveLoop
.a4be	7a		ply				ply
.a4bf	60		rts				rts
.a4c0					STKLoadCodePosition:
.a4c0	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a4c2					_STKLoadLoop:
.a4c2	b1 34		lda ($34),y			lda 	(basicStack),y
.a4c4	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a4c7	c8		iny				iny
.a4c8	c0 05		cpy #$05			cpy 	#5
.a4ca	d0 f6		bne $a4c2			bne 	_STKLoadLoop
.a4cc	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a4ce	a8		tay				tay
.a4cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a4d0					StackReset:
.a4d0	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a4d2	85 34		sta $34				sta 	0+basicStack
.a4d4	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a4d6	85 35		sta $35				sta 	1+basicStack
.a4d8	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a4da	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a4dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b458					StringConcrete:
.b458	5a		phy				phy 								; save position on stack
.b459	20 c6 a0	jsr $a0c6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b45c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b45f	85 38		sta $38				sta 	zTemp1
.b461	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b464	85 39		sta $39				sta 	zTemp1+1
.b466	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b468					_SALength:
.b468	c8		iny				iny
.b469	b1 38		lda ($38),y			lda 	(zTemp1),y
.b46b	d0 fb		bne $b468			bne 	_SALength
.b46d	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b46f	b0 3f		bcs $b4b0			bcs 	_SALengthError
.b471	98		tya				tya 				 				; length of the new string
.b472	18		clc				clc
.b473	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b475	90 02		bcc $b479			bcc 	_SAHaveLength
.b477	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b479					_SAHaveLength:
.b479	48		pha				pha 								; save length.
.b47a	38		sec				sec
.b47b	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b47d	6d 8e 04	adc $048e			adc 	StringMemory
.b480	8d 8e 04	sta $048e			sta 	StringMemory
.b483	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b485	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b488	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b48a	6d 8f 04	adc $048f			adc 	StringMemory+1
.b48d	8d 8f 04	sta $048f			sta 	StringMemory+1
.b490	85 3b		sta $3b				sta 	zTemp2+1
.b492	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b495	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b496	38		sec				sec
.b497	e9 03		sbc #$03			sbc 	#3
.b499	92 3a		sta ($3a)			sta 	(zTemp2)
.b49b	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b49d	a0 01		ldy #$01			ldy 	#1
.b49f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b4a1					_SACopyNewString:
.b4a1	a0 00		ldy #$00			ldy 	#0
.b4a3					_SACopyNSLoop:
.b4a3	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b4a5	c8		iny				iny 								; write two on in string storage
.b4a6	c8		iny				iny
.b4a7	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b4a9	88		dey				dey 								; this makes it one one.
.b4aa	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b4ac	d0 f5		bne $b4a3			bne 	_SACopyNSLoop
.b4ae	7a		ply				ply
.b4af	60		rts				rts
.b4b0					_SALengthError:
.b4b0	a9 09		lda #$09		lda	#9
.b4b2	4c ff 97	jmp $97ff		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b4b5					StringSystemInitialise:
.b4b5	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b4b7	8d 8e 04	sta $048e			sta 	0+StringMemory
.b4ba	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b4bc	8d 8f 04	sta $048f			sta 	1+StringMemory
.b4bf	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b4c2	60		rts				rts
.b4c3					StringSpaceInitialise:
.b4c3	20 c6 a0	jsr $a0c6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b4c6	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b4c8	8d 90 04	sta $0490			sta 	StringInitialised
.b4cb	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b4ce	8d 91 04	sta $0491			sta 	StringTempPointer
.b4d1	ad 8f 04	lda $048f			lda 	StringMemory+1
.b4d4	3a		dec a				dec 	a
.b4d5	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b4d8	60		rts				rts
.b4d9					StringTempAllocate:
.b4d9	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b4db	b0 35		bcs $b512			bcs 	_STALength
.b4dd	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b4e0	30 05		bmi $b4e7			bmi 	_STAAllocate
.b4e2	48		pha				pha 								; save value to subtract.
.b4e3	20 c3 b4	jsr $b4c3			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b4e6	68		pla				pla 								; restore it
.b4e7					_STAAllocate:
.b4e7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b4e9	18		clc				clc  								; deliberate allows one more
.b4ea	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b4ed	8d 91 04	sta $0491			sta 	StringTempPointer
.b4f0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b4f3	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b4f5	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b4f8	69 ff		adc #$ff			adc 	#$FF
.b4fa	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b4fd	85 3d		sta $3d				sta 	zsTemp+1
.b4ff	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b502	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b505	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b508	a9 10		lda #$10			lda 	#NSTString
.b50a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b50d	a9 00		lda #$00			lda 	#0 							; clear the target string
.b50f	92 3c		sta ($3c)			sta 	(zsTemp)
.b511	60		rts				rts
.b512					_STALength:
.b512	a9 09		lda #$09		lda	#9
.b514	4c ff 97	jmp $97ff		jmp	ErrorHandler
.b517					StringTempWrite:
.b517	48		pha				pha
.b518	92 3c		sta ($3c)			sta 	(zsTemp)
.b51a	e6 3c		inc $3c				inc 	zsTemp
.b51c	d0 02		bne $b520			bne 	_STWNoCarry
.b51e	e6 3d		inc $3d				inc 	zsTemp+1
.b520					_STWNoCarry:
.b520	a9 00		lda #$00			lda 	#0
.b522	92 3c		sta ($3c)			sta 	(zsTemp)
.b524	68		pla				pla
.b525	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a4dd					BackloadProgram:
.a4dd	a2 ff		ldx #$ff			ldx 	#$FF
.a4df	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a4e2	20 0c a5	jsr $a50c			jsr 	BLReadByte
.a4e5	30 1e		bmi $a505			bmi 	_BPExit
.a4e7					_BPCopy:
.a4e7	e8		inx				inx  								; copy byte in
.a4e8	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a4eb	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a4ee	20 0c a5	jsr $a50c			jsr 	BLReadByte 					; read next byte
.a4f1	30 0a		bmi $a4fd			bmi 	_BPEndLine 					; -ve = EOL
.a4f3	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a4f5	d0 02		bne $a4f9			bne 	_BPNotTab
.a4f7	a9 20		lda #$20			lda 	#' '
.a4f9					_BPNotTab:
.a4f9	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a4fb	b0 ea		bcs $a4e7			bcs 	_BPCopy
.a4fd					_BPEndLine:
.a4fd	20 b6 a8	jsr $a8b6			jsr 	TokeniseLine 				; tokenise the line.
.a500	20 e5 8b	jsr $8be5			jsr 	EditProgramCode
.a503	80 d8		bra $a4dd			bra 	BackloadProgram
.a505					_BPExit:
.a505	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a508	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear variables etc.
.a50b	60		rts				rts
.a50c					BLReadByte:
.a50c					_BLLoad:
.a50c	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a50f	ee 0d a5	inc $a50d			inc 	_BLLoad+1
.a512	d0 03		bne $a517			bne 	_BLNoCarry
.a514	ee 0e a5	inc $a50e			inc 	_BLLoad+2
.a517					_BLNoCarry:
.a517	c9 00		cmp #$00			cmp 	#0
.a519	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a51a					TokeniseSearchTable:
.a51a	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a51c	85 36		sta $36				sta 	zTemp0
.a51e	a0 00		ldy #$00			ldy 	#0
.a520	a9 80		lda #$80			lda 	#$80 						; token #
.a522	85 38		sta $38				sta 	zTemp1
.a524					_TSTLoop:
.a524	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a526	30 49		bmi $a571			bmi 	_TSTFail 					; -ve = end of table
.a528	f0 2e		beq $a558			beq 	_TSTNext 					; zero, check next it's a dummy
.a52a	c8		iny				iny 								; get the hash
.a52b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a52d	88		dey				dey
.a52e	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a531	d0 25		bne $a558			bne 	_TSTNext
.a533	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a536	38		sec				sec
.a537	ed 80 04	sbc $0480			sbc 	identStart
.a53a	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a53c	d0 1a		bne $a558			bne 	_TSTNext
.a53e	5a		phy				phy 								; save Y , we might fail
.a53f	c8		iny				iny 								; point to text
.a540	c8		iny				iny
.a541	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a544					_TSTCompareName:
.a544	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a547	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a549	d0 0c		bne $a557			bne 	_TSTNextPullY 				; fail, pullY and do next
.a54b	e8		inx				inx
.a54c	c8		iny				iny
.a54d	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a550	d0 f2		bne $a544			bne 	_TSTCompareName
.a552	7a		ply				ply 								; throw Y
.a553	a5 38		lda $38				lda 	zTemp1 						; get token #
.a555	38		sec				sec 								; return with CS = passed.
.a556	60		rts				rts
.a557					_TSTNextPullY:
.a557	7a		ply				ply 								; restore current, fall through.
.a558					_TSTNext:
.a558	e6 38		inc $38				inc 	zTemp1 						; token counter
.a55a	98		tya				tya
.a55b	18		clc				clc
.a55c	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a55e	1a		inc a				inc 	a 							; +1
.a55f	1a		inc a				inc 	a 							; +2
.a560	a8		tay				tay
.a561	10 c1		bpl $a524			bpl 	_TSTLoop 					; if Y < $80 loop back
.a563	98		tya				tya 								; add Y to zTemp0 and reset Y
.a564	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a566	18		clc				clc  								; but have tables > 255 bytes
.a567	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a569	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a56b	90 b7		bcc $a524			bcc 	_TSTLoop
.a56d	e6 37		inc $37				inc 	zTemp0+1
.a56f	80 b3		bra $a524			bra 	_TSTLoop
.a571					_TSTFail:
.a571	18		clc				clc
.a572	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a573					KeywordSet0:
>a573	00 65					.text	0,$65,""               ; $80 !0:EOF
>a575	00 58					.text	0,$58,""               ; $81 !1:SH1
>a577	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a579	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a57f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a587	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a58d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a594	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a59c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a5a3	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a5aa	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a5b0	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a5b8	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a5c0	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a5c6	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a5cd	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a5d3	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a5d8	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a5dc	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a5e4	28
>a5e5	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a5ed	28
>a5ee	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a5f4	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a5fa	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a600	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a607	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a60f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a615	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a61b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a620	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a624	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a62a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a632	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a639	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a640	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a648	43
>a649	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a64f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a655	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a65c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a662	02 9b 42 59				.text	2,$9b,"BY"             ; $a6 BY
>a666	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a7 CALL
>a66c	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a8 CIRCLE
>a674	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $a9 CLEAR
>a67b	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $aa CLS
>a680	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ab COLOR
>a687	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ac COLOUR
>a68f	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ad DATA
>a695	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ae DIM
>a69a	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $af DOWNTO
>a6a2	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b0 ELSE
>a6a8	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b1 GFX
>a6ad	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b2 GOSUB
>a6b4	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b3 GOTO
>a6ba	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b4 HERE
>a6c0	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b5 IMAGE
>a6c7	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b6 LET
>a6cc	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b7 LINE
>a6d2	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b8 LOCAL
>a6d9	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $b9 OUTLINE
>a6e1	45
>a6e2	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ba PRINT
>a6e9	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $bb READ
>a6ef	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $bc RECT
>a6f5	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $bd REM
>a6fa	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $be RETURN
>a702	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $bf SOLID
>a709	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c0 SPRITE
>a711	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c1 TEXT
>a717	02 a3 54 4f				.text	2,$a3,"TO"             ; $c2 TO
>a71b	ff					.text	$FF
.a71c					KeywordSet1:
>a71c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a71e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a720	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a722	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a72a	4c 45
>a72c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a734	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a73c	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a741	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a747	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a74c	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a754	45
>a755	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a75a	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a762	53
>a763	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a769	ff					.text	$FF
.a76a					KeywordSet2:
>a76a	00 65					.text	0,$65,""               ; $80 !0:EOF
>a76c	00 58					.text	0,$58,""               ; $81 !1:SH1
>a76e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a770	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a775	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a77a	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a77f	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a784	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a789	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a78e	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a793	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a798	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a79d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a7a2	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a7a7	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a7ac	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a7b1	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a7b6	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a7bb	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a7c0	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a7c5	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a7ca	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a7cf	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a7d4	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a7d9	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a7de	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a7e3	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a7e8	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a7ed	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a7f2	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a7f7	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a7fc	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a801	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a806	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a80b	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a810	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a815	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a81a	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a81f	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a824	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a829	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a82e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a833	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a838	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a83d	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a842	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a847	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a84c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a851	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a856	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a85b	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a860	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a865	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a86a	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a86f	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a874	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a879	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a87e	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a883	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a888	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a88d	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a892	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a897	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a89c	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a8a1	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a8a6	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a8ab	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a8b0	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a8b5	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a8b6					TokeniseLine:
.a8b6	20 3e aa	jsr $aa3e			jsr 	FixLineBufferCase 			; fix line case
.a8b9	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a8bb	8d a6 04	sta $04a6			sta 	tokenOffset
.a8be	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a8c1	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a8c4	a2 ff		ldx #$ff			ldx 	#$FF
.a8c6					_TKFindFirst:
.a8c6	e8		inx				inx
.a8c7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a8ca	f0 79		beq $a945			beq 	_TKExit
.a8cc	c9 20		cmp #$20			cmp 	#' '
.a8ce	90 f6		bcc $a8c6			bcc 	_TKFindFirst
.a8d0	c9 30		cmp #$30			cmp 	#'0'
.a8d2	90 07		bcc $a8db			bcc 	_TKNoLineNumber
.a8d4	c9 3a		cmp #$3a			cmp 	#'9'+1
.a8d6	b0 03		bcs $a8db			bcs 	_TKNoLineNumber
.a8d8	20 68 aa	jsr $aa68			jsr 	TokeniseExtractLineNumber
.a8db					_TKNoLineNumber:
.a8db					_TKTokeniseLoop:
.a8db	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a8de	f0 65		beq $a945			beq 	_TKExit
.a8e0	e8		inx				inx
.a8e1	c9 20		cmp #$20			cmp 	#' '
.a8e3	f0 f6		beq $a8db			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a8e5	ca		dex				dex 								; undo last get, A contains character, X is position.
.a8e6	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a8e8	f0 61		beq $a94b			beq 	_TKTokeniseIdentifier
.a8ea	c9 41		cmp #$41			cmp 	#'A'
.a8ec	90 04		bcc $a8f2			bcc 	_TKTokenisePunctuation
.a8ee	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a8f0	90 59		bcc $a94b			bcc 	_TKTokeniseIdentifier
.a8f2					_TKTokenisePunctuation:
.a8f2	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a8f4	f0 27		beq $a91d			beq 	_TKString
.a8f6	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a8f8	f0 28		beq $a922			beq 	_TKHexConstant
.a8fa	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a8fc	f0 29		beq $a927			beq 	_TKCheckDouble
.a8fe	c9 3e		cmp #$3e			cmp 	#'>'
.a900	f0 25		beq $a927			beq 	_TKCheckDouble
.a902					_TKStandardPunctuation:
.a902	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a905	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a907	90 0e		bcc $a917			bcc 	_TKNoShift
.a909	48		pha				pha 								; save
.a90a	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a90c	85 36		sta $36				sta 	zTemp0
.a90e	68		pla				pla
.a90f	29 20		and #$20			and 	#32 						; bit 5
.a911	4a		lsr a				lsr 	a 							; shift into bit 3
.a912	4a		lsr a				lsr 	a
.a913	05 36		ora $36				ora 	zTemp0
.a915	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a917					_TKNoShift:
.a917	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte 			; write the punctuation character
.a91a	e8		inx				inx 								; consume the character
.a91b	80 be		bra $a8db			bra 	_TKTokeniseLoop 			; and loop round again.
.a91d					_TKString:
.a91d	20 cd a9	jsr $a9cd			jsr 	TokeniseString
.a920	80 b9		bra $a8db			bra 	_TKTokeniseLoop
.a922					_TKHexConstant:
.a922	20 08 aa	jsr $aa08			jsr 	TokeniseHexConstant
.a925	80 b4		bra $a8db			bra 	_TKTokeniseLoop
.a927					_TKCheckDouble:
.a927	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a92a	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a92c	90 d4		bcc $a902			bcc 	_TKStandardPunctuation
.a92e	c9 3f		cmp #$3f			cmp 	#'>'+1
.a930	b0 d0		bcs $a902			bcs 	_TKStandardPunctuation
.a932	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a935	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a937	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a938	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a93b	38		sec				sec
.a93c	e9 3c		sbc #$3c			sbc 	#'<'
.a93e	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a941	e8		inx				inx 								; consume both
.a942	e8		inx				inx
.a943	80 96		bra $a8db			bra 	_TKTokeniseLoop
.a945	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a947	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.a94a	60		rts				rts
.a94b					_TKTokeniseIdentifier:
.a94b	8e 80 04	stx $0480			stx 	identStart 					; save start
.a94e	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a951					_TKCheckLoop:
.a951	e8		inx				inx 								; look at next, we know first is identifier.
.a952	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a955	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a957	f0 f8		beq $a951			beq 	_TKCheckLoop
.a959	c9 30		cmp #$30			cmp	 	#"0"
.a95b	90 0c		bcc $a969			bcc 	_TKEndIdentifier
.a95d	c9 3a		cmp #$3a			cmp 	#"9"+1
.a95f	90 f0		bcc $a951			bcc 	_TKCheckLoop
.a961	c9 41		cmp #$41			cmp	 	#"A"
.a963	90 04		bcc $a969			bcc 	_TKEndIdentifier
.a965	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a967	90 e8		bcc $a951			bcc 	_TKCheckLoop
.a969					_TKEndIdentifier:
.a969	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a96c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a96e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a970	f0 06		beq $a978			beq 	_TKHasTypeCharacter
.a972	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a974	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a976	d0 07		bne $a97f			bne 	_TKNoTypeCharacter
.a978					_TKHasTypeCharacter:
.a978	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a97b	e8		inx				inx 								; read next
.a97c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a97f					_TKNoTypeCharacter:
.a97f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a981	d0 09		bne $a98c			bne 	_TKNoArray
.a983	e8		inx				inx 								; skip the (
.a984	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a987	09 04		ora #$04			ora 	#$04
.a989	8d 84 04	sta $0484			sta 	identTypeByte
.a98c					_TKNoArray:
.a98c	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a98f	20 29 aa	jsr $aa29			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a992	a0 a5		ldy #$a5			ldy 	#(KeywordSet0) >> 8
.a994	a9 73		lda #$73			lda 	#(KeywordSet0) & $FF
.a996	20 1a a5	jsr $a51a			jsr 	TokeniseSearchTable
.a999	a2 00		ldx #$00			ldx 	#0
.a99b	b0 1f		bcs $a9bc			bcs 	_TKFoundToken
.a99d	a0 a7		ldy #$a7			ldy 	#(KeywordSet1) >> 8
.a99f	a9 1c		lda #$1c			lda 	#(KeywordSet1) & $FF
.a9a1	20 1a a5	jsr $a51a			jsr 	TokeniseSearchTable
.a9a4	a2 81		ldx #$81			ldx 	#$81
.a9a6	b0 14		bcs $a9bc			bcs 	_TKFoundToken
.a9a8	a0 a7		ldy #$a7			ldy 	#(KeywordSet2) >> 8
.a9aa	a9 6a		lda #$6a			lda 	#(KeywordSet2) & $FF
.a9ac	20 1a a5	jsr $a51a			jsr 	TokeniseSearchTable
.a9af	a2 82		ldx #$82			ldx 	#$82
.a9b1	b0 09		bcs $a9bc			bcs 	_TKFoundToken
.a9b3	20 b9 aa	jsr $aab9			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a9b6	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a9b9	4c db a8	jmp $a8db			jmp 	_TKTokeniseLoop 			; and go round again.
.a9bc					_TKFoundToken:
.a9bc	48		pha				pha 								; save token
.a9bd	8a		txa				txa 								; shift in X, is there one ?
.a9be	f0 03		beq $a9c3			beq 	_TKNoTShift
.a9c0	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte 			; if so, write it out
.a9c3					_TKNoTShift:
.a9c3	68		pla				pla 								; restore and write token
.a9c4	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.a9c7	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a9ca	4c db a8	jmp $a8db			jmp 	_TKTokeniseLoop 			; and go round again.
.a9cd					TokeniseString:
.a9cd	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a9cf	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.a9d2	e8		inx				inx									; start of quoted string.
.a9d3	da		phx				phx 								; push start of string on top
.a9d4	ca		dex				dex
.a9d5					_TSFindEnd:
.a9d5	e8		inx				inx
.a9d6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a9d9	f0 04		beq $a9df			beq 	_TSEndOfString
.a9db	c9 22		cmp #$22			cmp 	#'"'
.a9dd	d0 f6		bne $a9d5			bne 	_TSFindEnd
.a9df					_TSEndOfString:
.a9df	7a		ply				ply  								; so now Y is first character, X is character after end.
.a9e0	48		pha				pha 								; save terminating character
.a9e1	20 e9 a9	jsr $a9e9			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a9e4	68		pla				pla 								; terminating character
.a9e5	f0 01		beq $a9e8			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a9e7	e8		inx				inx
.a9e8					_TSNotQuote:
.a9e8	60		rts				rts
.a9e9					TOWriteBlockXY:
.a9e9	86 36		stx $36				stx 	zTemp0 						; write end character
.a9eb	98		tya				tya
.a9ec	49 ff		eor #$ff			eor 	#$FF
.a9ee	38		sec				sec
.a9ef	65 36		adc $36				adc 	zTemp0
.a9f1	1a		inc a				inc 	a 							; one extra for NULL
.a9f2	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.a9f5					_TOBlockLoop:
.a9f5	c4 36		cpy $36				cpy 	zTemp0
.a9f7	f0 09		beq $aa02			beq 	_TOBlockExit
.a9f9	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a9fc	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.a9ff	c8		iny				iny
.aa00	80 f3		bra $a9f5			bra 	_TOBlockLoop
.aa02					_TOBlockExit:
.aa02	a9 00		lda #$00			lda 	#0
.aa04	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.aa07	60		rts				rts
.aa08					TokeniseHexConstant:
.aa08	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.aa0a	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.aa0d	e8		inx				inx									; start of quoted string.
.aa0e	da		phx				phx 								; push start of constant on top
.aa0f	ca		dex				dex
.aa10					_THFindLoop:
.aa10	e8		inx				inx
.aa11	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa14	c9 30		cmp #$30			cmp 	#"0"
.aa16	90 0c		bcc $aa24			bcc 	_THFoundEnd
.aa18	c9 3a		cmp #$3a			cmp 	#"9"+1
.aa1a	90 f4		bcc $aa10			bcc 	_THFindLoop
.aa1c	c9 41		cmp #$41			cmp 	#"A"
.aa1e	90 04		bcc $aa24			bcc 	_THFoundEnd
.aa20	c9 47		cmp #$47			cmp 	#"F"+1
.aa22	90 ec		bcc $aa10			bcc 	_THFindLoop
.aa24					_THFoundEnd:
.aa24	7a		ply				ply 								; restore start
.aa25	20 e9 a9	jsr $a9e9			jsr 	TOWriteBlockXY 				; output the block
.aa28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.aa29					TokeniseCalculateHash:
.aa29	da		phx				phx
.aa2a	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.aa2d	a9 00		lda #$00			lda 	#0
.aa2f					_TCHLoop:
.aa2f	18		clc				clc
.aa30	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.aa33	e8		inx				inx
.aa34	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.aa37	d0 f6		bne $aa2f			bne 	_TCHLoop
.aa39	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.aa3c	fa		plx				plx
.aa3d	60		rts				rts
.aa3e					FixLineBufferCase:
.aa3e	a2 00		ldx #$00			ldx 	#0
.aa40					_FLBCLoop:
.aa40	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.aa43	f0 22		beq $aa67			beq 	_FLBCExit 					; end of string.
.aa45	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.aa47	f0 11		beq $aa5a			beq 	_FLBCInQuotes
.aa49	e8		inx				inx
.aa4a	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.aa4c	90 f2		bcc $aa40			bcc 	_FLBCLoop
.aa4e	c9 7b		cmp #$7b			cmp 	#'z'+1
.aa50	b0 ee		bcs $aa40			bcs 	_FLBCLoop
.aa52	38		sec				sec 								; make U/C
.aa53	e9 20		sbc #$20			sbc 	#32
.aa55	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.aa58	80 e6		bra $aa40			bra 	_FLBCLoop
.aa5a					_FLBCInQuotes:
.aa5a	e8		inx				inx 								; advance
.aa5b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.aa5e	f0 07		beq $aa67			beq 	_FLBCExit 					; exit on EOS
.aa60	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.aa62	d0 f6		bne $aa5a			bne 	_FLBCInQuotes
.aa64	e8		inx				inx 								; skip over it
.aa65	80 d9		bra $aa40			bra 	_FLBCLoop
.aa67					_FLBCExit:
.aa67	60		rts				rts
.aa68					TokeniseExtractLineNumber:
.aa68	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.aa6b	48		pha				pha
.aa6c	ad a7 04	lda $04a7			lda 	tokenLineNumber
.aa6f	48		pha				pha
.aa70	20 a6 aa	jsr $aaa6			jsr 	_TELNTimes2 				; line # x 4
.aa73	20 a6 aa	jsr $aaa6			jsr 	_TELNTimes2 				; line # x 2
.aa76	18		clc				clc 								; add stacked value
.aa77	68		pla				pla
.aa78	6d a7 04	adc $04a7			adc 	tokenLineNumber
.aa7b	8d a7 04	sta $04a7			sta 	tokenLineNumber
.aa7e	68		pla				pla
.aa7f	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.aa82	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.aa85	20 a6 aa	jsr $aaa6			jsr 	_TELNTimes2 				; line # x 10
.aa88	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.aa8b	e8		inx				inx
.aa8c	29 0f		and #$0f			and 	#15 						; add to line #
.aa8e	18		clc				clc
.aa8f	6d a7 04	adc $04a7			adc 	tokenLineNumber
.aa92	8d a7 04	sta $04a7			sta 	tokenLineNumber
.aa95	90 03		bcc $aa9a			bcc 	_TLENNoCarry
.aa97	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.aa9a					_TLENNoCarry:
.aa9a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.aa9d	c9 30		cmp #$30			cmp 	#'0'
.aa9f	90 04		bcc $aaa5			bcc 	_TLENExit
.aaa1	c9 3a		cmp #$3a			cmp 	#'9'+1
.aaa3	90 c3		bcc $aa68			bcc 	TokeniseExtractLineNumber
.aaa5					_TLENExit:
.aaa5	60		rts				rts
.aaa6					_TELNTimes2:
.aaa6	0e a7 04	asl $04a7			asl 	tokenLineNumber
.aaa9	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.aaac	60		rts				rts
.aaad					TokeniseWriteByte:
.aaad	da		phx				phx
.aaae	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.aab1	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.aab4	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.aab7	fa		plx				plx
.aab8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.aab9					CheckCreateVariableRecord:
.aab9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.aabb	85 36		sta $36				sta 	0+zTemp0
.aabd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.aabf	85 37		sta $37				sta 	1+zTemp0
.aac1					_CCVSearch:
.aac1	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.aac3	f0 2c		beq $aaf1			beq 	_CCVFail
.aac5	a0 01		ldy #$01			ldy 	#1 							; read the hash
.aac7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.aac9	cd 83 04	cmp $0483			cmp 	identHash
.aacc	d0 16		bne $aae4			bne 	_CCVNext
.aace	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.aad0	ae 80 04	ldx $0480			ldx 	identStart
.aad3					_CCVCompare:
.aad3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.aad6	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.aad8	e8		inx				inx 								; advance pointers
.aad9	c8		iny				iny
.aada	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.aadb	d0 07		bne $aae4			bne 	_CCVNext  					; didn't match go to next.
.aadd	90 f4		bcc $aad3			bcc 	_CCVCompare 				; not finished yet.
.aadf	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.aae2	f0 41		beq $ab25			beq 	_CCVFound 					; yes, we were successful
.aae4					_CCVNext:
.aae4	18		clc				clc
.aae5	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.aae7	65 36		adc $36				adc 	zTemp0
.aae9	85 36		sta $36				sta 	zTemp0
.aaeb	90 d4		bcc $aac1			bcc 	_CCVSearch
.aaed	e6 37		inc $37				inc 	zTemp0+1
.aaef	80 d0		bra $aac1			bra 	_CCVSearch
.aaf1					_CCVFail:
.aaf1	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.aaf3	ad 83 04	lda $0483			lda 	identHash
.aaf6	91 36		sta ($36),y			sta 	(zTemp0),y
.aaf8	c8		iny				iny 								; offset 2 is the type byte
.aaf9	ad 84 04	lda $0484			lda 	identTypeByte
.aafc	91 36		sta ($36),y			sta 	(zTemp0),y
.aafe	c8		iny				iny
.aaff					_CCVData:
.aaff	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ab01	91 36		sta ($36),y			sta 	(zTemp0),y
.ab03	c8		iny				iny
.ab04	c0 08		cpy #$08			cpy 	#8
.ab06	90 f7		bcc $aaff			bcc 	_CCVData
.ab08	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ab0b					_CCVCopyName:
.ab0b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab0e	91 36		sta ($36),y			sta 	(zTemp0),y
.ab10	e8		inx				inx
.ab11	c8		iny				iny
.ab12	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ab15	d0 f4		bne $ab0b			bne 	_CCVCopyName
.ab17	98		tya				tya 								; patch offset
.ab18	92 36		sta ($36)			sta 	(zTemp0)
.ab1a	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ab1c	91 36		sta ($36),y			sta 	(zTemp0),y
.ab1e	88		dey				dey
.ab1f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ab21	09 80		ora #$80			ora 	#$80
.ab23	91 36		sta ($36),y			sta 	(zTemp0),y
.ab25					_CCVFound:
.ab25	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ab27	38		sec				sec
.ab28	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ab2a	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ab2c	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.ab2f	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ab31	20 ad aa	jsr $aaad			jsr 	TokeniseWriteByte
.ab34	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
