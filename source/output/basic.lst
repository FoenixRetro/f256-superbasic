
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Jan  7 15:03:04 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_JOYBLPAREN                       = $93; $93 JOYB(
=$94						KWD_JOYXLPAREN                       = $94; $94 JOYX(
=$95						KWD_JOYYLPAREN                       = $95; $95 JOYY(
=$96						KWD_LEFTDOLLARLPAREN                 = $96; $96 LEFT$(
=$97						KWD_LENLPAREN                        = $97; $97 LEN(
=$98						KWD_MAXLPAREN                        = $98; $98 MAX(
=$99						KWD_MIDDOLLARLPAREN                  = $99; $99 MID$(
=$9a						KWD_MINLPAREN                        = $9a; $9a MIN(
=$9b						KWD_NOTLPAREN                        = $9b; $9b NOT(
=$9c						KWD_PEEKLPAREN                       = $9c; $9c PEEK(
=$9d						KWD_PEEKDLPAREN                      = $9d; $9d PEEKD(
=$9e						KWD_PEEKLLPAREN                      = $9e; $9e PEEKL(
=$9f						KWD_PEEKWLPAREN                      = $9f; $9f PEEKW(
=$a0						KWD_PLAYINGLPAREN                    = $a0; $a0 PLAYING(
=$a1						KWD_RANDOMLPAREN                     = $a1; $a1 RANDOM(
=$a2						KWD_RIGHTDOLLARLPAREN                = $a2; $a2 RIGHT$(
=$a3						KWD_RNDLPAREN                        = $a3; $a3 RND(
=$a4						KWD_SGNLPAREN                        = $a4; $a4 SGN(
=$a5						KWD_SPCLPAREN                        = $a5; $a5 SPC(
=$a6						KWD_STRDOLLARLPAREN                  = $a6; $a6 STR$(
=$a7						KWD_TIMERLPAREN                      = $a7; $a7 TIMER(
=$a8						KWD_TRUE                             = $a8; $a8 TRUE
=$a9						KWD_VALLPAREN                        = $a9; $a9 VAL(
=$aa						KWD_FOR                              = $aa; $aa FOR
=$ab						KWD_IF                               = $ab; $ab IF
=$ac						KWD_PROC                             = $ac; $ac PROC
=$ad						KWD_REPEAT                           = $ad; $ad REPEAT
=$ae						KWD_WHILE                            = $ae; $ae WHILE
=$af						KWD_ENDIF                            = $af; $af ENDIF
=$b0						KWD_ENDPROC                          = $b0; $b0 ENDPROC
=$b1						KWD_NEXT                             = $b1; $b1 NEXT
=$b2						KWD_THEN                             = $b2; $b2 THEN
=$b3						KWD_UNTIL                            = $b3; $b3 UNTIL
=$b4						KWD_WEND                             = $b4; $b4 WEND
=$b5						KWD_BY                               = $b5; $b5 BY
=$b6						KWD_CALL                             = $b6; $b6 CALL
=$b7						KWD_CIRCLE                           = $b7; $b7 CIRCLE
=$b8						KWD_CLEAR                            = $b8; $b8 CLEAR
=$b9						KWD_COLOR                            = $b9; $b9 COLOR
=$ba						KWD_COLOUR                           = $ba; $ba COLOUR
=$bb						KWD_DATA                             = $bb; $bb DATA
=$bc						KWD_DIM                              = $bc; $bc DIM
=$bd						KWD_DOWNTO                           = $bd; $bd DOWNTO
=$be						KWD_ELSE                             = $be; $be ELSE
=$bf						KWD_FROM                             = $bf; $bf FROM
=$c0						KWD_GFX                              = $c0; $c0 GFX
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_READ                             = $cf; $cf READ
=$d0						KWD_RECT                             = $d0; $d0 RECT
=$d1						KWD_REM                              = $d1; $d1 REM
=$d2						KWD_SOLID                            = $d2; $d2 SOLID
=$d3						KWD_SOUND                            = $d3; $d3 SOUND
=$d4						KWD_SPRITE                           = $d4; $d4 SPRITE
=$d5						KWD_TEXT                             = $d5; $d5 TEXT
=$d6						KWD_TO                               = $d6; $d6 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$aa						KWC_FIRST_STRUCTURE = $aa
=$af						KWC_FIRST_STRUCTURE_DEC = $af
=$b4						KWC_LAST_STRUCTURE = $b4
=$83						KWC_FIRST_UNARY = $83
=$a9						KWC_LAST_UNARY = $a9

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 67 80	jmp $8067	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTInputLine:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputSingleCharacter:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						GXGraphicDraw:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						SNDCommand:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 c1 bb	jsr $bbc1		jsr	Export_SNDCommand
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDUpdate:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 f4 bb	jsr $bbf4		jsr	Export_SNDUpdate
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						TKListConvertLine:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 72 b5	jsr $b572		jsr	Export_TKListConvertLine
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKTokeniseLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 06 b8	jsr $b806		jsr	Export_TKTokeniseLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8067		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8069		9a		txs				txs
.806a		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.806c		09 80		ora #$80			ora 	#$80
.806e		85 00		sta $00				sta 	0
.8070		20 80 ab	jsr $ab80			jsr		UpdateFont 					; update font if between FPGA updates.
.8073		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.8076		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.8078		20 45 81	jsr $8145			jsr 	KNLSetDrive
.807b		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.807d		aa		tax				tax
.807e		a8		tay				tay
.807f		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.8082		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8084		20 3f 80	jsr $803f			jsr 	SNDCommand
.8087		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.8089		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.808c		a9 09		lda #$09			lda 	#9
.808e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8091		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8094		64 01		stz $01				stz 	1
.8096		ad ad d6	lda $d6ad			lda 	$D6AD
.8099		20 6e 83	jsr $836e			jsr 	PrintHex
.809c		ad ac d6	lda $d6ac			lda 	$D6AC
.809f		20 6e 83	jsr $836e			jsr 	PrintHex
.80a2		ad ab d6	lda $d6ab			lda 	$D6AB
.80a5		20 6e 83	jsr $836e			jsr 	PrintHex
.80a8		ad aa d6	lda $d6aa			lda 	$D6AA
.80ab		20 6e 83	jsr $836e			jsr 	PrintHex
.80ae		a9 20		lda #$20			lda 	#32
.80b0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b3		ad a8 d6	lda $d6a8			lda 	$D6A8
.80b6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b9		ad a9 d6	lda $d6a9			lda 	$D6A9
.80bc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80bf		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80c1		a9 cf		lda #$cf			lda 	#Prompt & $FF
.80c3		20 d0 94	jsr $94d0			jsr 	PrintStringXA
.80c6		20 6d 8e	jsr $8e6d			jsr 	NewProgram 					; erase current program
.80c9		4c b1 85	jmp $85b1			jmp 	WarmStart					; make same size.
.80cc		4c b1 85	jmp $85b1			jmp 	WarmStart
>80cf		0d 09 09 47 6f 20 67 6f		Prompt:	.text 	13,9,9,"Go go Gadget!",13
>80d7		20 47 61 64 67 65 74 21 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80e0		09 09 30 37 2f 30 31 2f			.text 9,9,"07/01/23 25"
>80e8		32 33 20 32 35

;******  Return to file: ./common/aa.system/00start.asm

>80ed		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.80f1						ProcessEvents:
.80f1		a9 63		lda #$63			lda     #<event 					; tell kernel where events go.
.80f3		85 f0		sta $f0				sta     kernel.args.events+0
.80f5		a9 07		lda #$07			lda     #>event
.80f7		85 f1		sta $f1				sta     kernel.args.events+1
.80f9		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.80fc		b0 27		bcs $8125			bcs 	_PEExitZ 					; nothing left to process.
.80fe		ad 63 07	lda $0763			lda 	event.type 					; go back if event not key.pressed.
.8101		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8103		d0 ec		bne $80f1			bne 	ProcessEvents
.8105		ad 69 07	lda $0769			lda	 	event.key.flags 			; is event.key.flags = 0 ?
.8108		d0 e7		bne $80f1			bne 	ProcessEvents
.810a		ad 68 07	lda $0768			lda 	event.key.ascii 			; is it Ctrl+C
.810d		c9 03		cmp #$03			cmp 	#3
.810f		f0 11		beq $8122			beq 	_PEReturnBreak  			; no, keep going.
.8111		da		phx				phx
.8112		ae 61 06	ldx $0661			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8115		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8117		f0 06		beq $811f			beq 	_PENoQueue
.8119		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x 			; write into queue
.811c		ee 61 06	inc $0661			inc 	KeyboardQueueEntries 		; bump count
.811f						_PENoQueue:
.811f		fa		plx				plx
.8120		80 cf		bra $80f1			bra 	ProcessEvents
.8122						_PEReturnBreak:
.8122		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8124		60		rts				rts
.8125						_PEExitZ:
.8125		a9 00		lda #$00			lda 	#0
.8127		60		rts				rts
.8128						PopKeyboardQueue:
.8128		ad 61 06	lda $0661			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.812b		f0 17		beq $8144			beq 	_PKQExit 					; zero, then exit.
.812d		ad 59 06	lda $0659			lda 	KeyboardQueue 				; save head of keyboard queue
.8130		48		pha				pha
.8131		da		phx				phx 								; drop head of queue
.8132		a2 00		ldx #$00			ldx 	#0
.8134						_PKQLoop:
.8134		bd 5a 06	lda $065a,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8137		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.813a		e8		inx				inx
.813b		e0 07		cpx #$07			cpx 	#7
.813d		d0 f5		bne $8134			bne 	_PKQLoop
.813f		fa		plx				plx
.8140		ce 61 06	dec $0661			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8143		68		pla				pla 								; restore head of queue.
.8144						_PKQExit:
.8144		60		rts				rts
=8						KBDQueueSize = 8
.0659						KeyboardQueue:
>0659								.fill 	KBDQueueSize
.0661						KeyboardQueueEntries:
>0661								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8145						KNLSetDrive:
.8145		8d 62 07	sta $0762			sta 	KNLDefaultDrive
.8148		60		rts				rts
.8149						KNLOpenFileWrite:
.8149		48		pha				pha
.814a		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.814c		80 03		bra $8151			bra 	KNLOpenStart
.814e						KNLOpenFileRead:
.814e		48		pha				pha
.814f		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.8151						KNLOpenStart:
.8151		85 f5		sta $f5				sta     kernel.args.file.open.mode
.8153		68		pla				pla
.8154		20 89 81	jsr $8189			jsr 	KNLSetupFileName
.8157		a9 63		lda #$63			lda     #event & $FF 				; tell kernel where to store event data
.8159		85 f0		sta $f0				sta     kernel.args.events+0
.815b		a9 07		lda #$07			lda     #event >> 8
.815d		85 f1		sta $f1				sta     kernel.args.events+1
.815f		ad 62 07	lda $0762			lda 	KNLDefaultDrive 			; currently drive zero only.
.8162		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.8164		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.8167		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.8169		b0 1d		bcs $8188			bcs     _out
.816b						_loop
.816b		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.816e		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8171		b0 f8		bcs $816b			bcs     _loop
.8173		ad 63 07	lda $0763			lda 	event.type
.8176		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.8178		f0 0a		beq $8184			beq 	_success
.817a		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.817c		f0 0a		beq $8188			beq 	_out
.817e		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8180		f0 06		beq $8188			beq 	_out
.8182		80 e7		bra $816b			bra     _loop
.8184						_success
.8184		ad 66 07	lda $0766			lda     event.file.stream
.8187		18		clc				clc
.8188						_out
.8188		60		rts				rts
.8189						KNLSetupFileName:
.8189		5a		phy				phy 								; save Y on stack
.818a		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.818c		86 37		stx $37				stx 	zTemp0+1
.818e		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8190		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8192		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8194						_KNLGetLength:
.8194		c8		iny				iny
.8195		b1 36		lda ($36),y			lda 	(zTemp0),y
.8197		d0 fb		bne $8194			bne 	_KNLGetLength
.8199		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.819b		7a		ply				ply
.819c		60		rts				rts
.819d						KNLReadBlock:
.819d		85 f3		sta $f3				sta     kernel.args.file.read.stream
.819f		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.81a1		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.81a4		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.81a6		b0 2e		bcs $81d6			bcs     _KGNBExitFail               ; report as general error
.81a8						_KGRBEventLoop:
.81a8		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81ab		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81ae		b0 f8		bcs $81a8			bcs     _KGRBEventLoop
.81b0		ad 63 07	lda $0763			lda 	event.type 					; get event
.81b3		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.81b5		f0 0a		beq $81c1			beq     _KNLRBGetNextByte
.81b7		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.81b9		f0 1b		beq $81d6			beq 	_KGNBExitFail
.81bb		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81bd		f0 17		beq $81d6			beq 	_KGNBExitFail
.81bf		80 e7		bra $81a8			bra 	_KGRBEventLoop
.81c1						_KNLRBGetNextByte:
.81c1		a9 62		lda #$62			lda     #<KNLReadBuffer 			; Set the target buffer
.81c3		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.81c5		a9 06		lda #$06			lda     #>KNLReadBuffer
.81c7		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.81c9		ad 69 07	lda $0769			lda     event.file.data.read 		; Set the target length
.81cc		85 fd		sta $fd				sta     kernel.args.recv.buflen
.81ce		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.81d1		ad 69 07	lda $0769			lda     event.file.data.read 		; Return # of bytes read (in A)
.81d4		18		clc				clc
.81d5		60		rts				rts
.81d6						_KGNBExitFail:
.81d6		38		sec				sec
.81d7		60		rts				rts
.81d8						KNLWriteBlock:
.81d8		da		phx				phx
.81d9		5a		phy				phy
.81da		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.81dc		a5 36		lda $36				lda     zTemp0 						; save the data location.
.81de		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.81e0		a5 37		lda $37				lda     zTemp0+1
.81e2		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.81e4		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.81e6		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.81e9		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.81eb		b0 21		bcs $820e			bcs 	_KWBFailed
.81ed						_KNLWLoop:
.81ed		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.81f0		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81f3		b0 f8		bcs $81ed			bcs     _KNLWLoop
.81f5		ad 63 07	lda $0763			lda     event.type 					; various errors.
.81f8		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.81fa		f0 12		beq $820e			beq 	_KWBFailed
.81fc		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81fe		f0 0e		beq $820e			beq 	_KWBFailed
.8200		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8202		f0 0a		beq $820e			beq 	_KWBFailed
.8204		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8206		d0 e5		bne $81ed			bne 	_KNLWLoop
.8208		18		clc				clc
.8209		ad 69 07	lda $0769			lda    event.file.wrote.wrote 		; get bytes written.
.820c		80 01		bra $820f			bra 	_KWBExit
.820e						_KWBFailed:
.820e		38		sec				sec
.820f						_KWBExit:
.820f		7a		ply				ply
.8210		fa		plx				plx
.8211		60		rts				rts
.8212						KNLCloseFile:
.8212		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8214		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8217		60		rts				rts
.8218						KNLCheckKeyPressed:
.8218		a9 63		lda #$63			lda     #<event 					; tell kernel where events go.
.821a		85 f0		sta $f0				sta     kernel.args.events+0
.821c		a9 07		lda #$07			lda     #>event
.821e		85 f1		sta $f1				sta     kernel.args.events+1
.8220		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.8223		b0 0b		bcs $8230			bcs 	_CKPNoEvent 				; no event
.8225		ad 63 07	lda $0763			lda     event.type
.8228		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.822a		d0 04		bne $8230			bne 	_CKPNoEvent
.822c		ad 68 07	lda $0768			lda     event.key.ascii
.822f		60		rts				rts
.8230						_CKPNoEvent:
.8230		a9 00		lda #$00			lda 	#0
.8232		60		rts				rts
.8233						EXTReadController:
.8233		da		phx				phx
.8234		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8236		64 01		stz $01				stz 	1 							; switch to I/O 0
.8238		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.823b		86 01		stx $01				stx 	1 							; repair old I/O and exit
.823d		fa		plx				plx
.823e		60		rts				rts
.0662						KNLReadBuffer:
>0662								.fill   256
.0762						KNLDefaultDrive:
>0762								.byte 	?
.0763						event
>0763						type        .byte   ?   ; Enum above
>0764						buf         .byte   ?   ; page id or zero
>0765						ext         .byte   ?   ; page id or zero
.0766						key
>0766						keyboard    .byte   ?   ; Keyboard ID
>0767						raw         .byte   ?   ; Raw key ID
>0768						ascii       .byte   ?   ; ASCII value
>0769						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0766						mouse
.0766						delta
>0766						x           .byte   ?
>0767						y           .byte   ?
>0768						z           .byte   ?
>0769						buttons     .byte   ?
.0766						clicks
>0766						inner       .byte   ?
>0767						middle      .byte   ?
>0768						outer       .byte   ?
.0766						joystick
>0766						joy0        .byte   ?
>0767						joy1        .byte   ?
.0766						udp
>0766						token       .byte   ?   ; TODO: break out into fields
.0766						file
>0766						stream      .byte   ?
>0767						cookie      .byte   ?
.0768						data
>0768						requested   .byte   ?   ; Requested number of bytes to read
>0769						read        .byte   ?   ; Number of bytes actually read
.0768						wrote
>0768						requested   .byte   ?   ; Requested number of bytes to read
>0769						wrote       .byte   ?   ; Number of bytes actually read
.0766						directory
>0766						stream      .byte   ?
>0767						cookie      .byte   ?
.0768						volume
>0768						len         .byte   ?   ; Length of volname (in buf)
>0769						flags       .byte   ?   ; block size, text encoding
.0768						file
>0768						len         .byte   ?
>0769						flags       .byte   ?   ; block scale, text encoding, approx size
.0768						free
>0768						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/getinkey.asm

.823f						AscGet:
.823f		fa		plx				plx 								; restore stack pos
.8240						AscGet2:
.8240		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.8243		20 f1 80	jsr $80f1	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.8246		d0 0b		bne $8253			bne 	_AGBreak
.8248		20 28 81	jsr $8128			jsr 	PopKeyboardQueue 			; wait for key.
.824b		c9 00		cmp #$00			cmp 	#0
.824d		f0 f4		beq $8243			beq 	_AGKey
.824f		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte
.8252		60		rts				rts
.8253						_AGBreak:
.8253		a9 01		lda #$01		lda	#1
.8255		4c 77 94	jmp $9477		jmp	ErrorHandler
.8258						AscInkey:
.8258		fa		plx				plx 								; restore stack pos
.8259						AscInkey2:
.8259		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.825c		20 28 81	jsr $8128			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.825f		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte
.8262		60		rts				rts
.8263						ChrGet:
.8263		fa		plx				plx
.8264		20 40 82	jsr $8240			jsr 	AscGet2
.8267		4c 6e 82	jmp $826e			jmp 	GetInkeyToString
.826a						ChrInkey:
.826a		fa		plx				plx
.826b		20 59 82	jsr $8259			jsr 	AscInkey2
.826e						GetInkeyToString:
.826e		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.8270		f0 0b		beq $827d			beq 	_GKISNull
.8272		48		pha				pha
.8273		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8275		20 91 b5	jsr $b591			jsr 	StringTempAllocate
.8278		68		pla				pla 								; write number to it
.8279		20 ca b5	jsr $b5ca			jsr 	StringTempWrite
.827c		60		rts				rts
.827d						_GKISNull:
.827d		a9 00		lda #$00			lda 	#0
.827f		20 91 b5	jsr $b591			jsr 	StringTempAllocate
.8282		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8283						AssembleGroup1:
.8283		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8285		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.8288		80 02		bra $828c			bra 	AsmGroup12
.828a						AssembleGroup2:
.828a		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.828c						AsmGroup12:
.828c		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.828f		68		pla				pla 								; pop the return address to access the information following.
.8290		fa		plx				plx
.8291		20 18 83	jsr $8318			jsr 	AccessParameters 			; get opcode and save as base
.8294		8d 24 04	sta $0424			sta 	BaseOpcode
.8297		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.829a		d0 08		bne $82a4			bne 	_AG12HaveMask
.829c		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.829e		20 20 83	jsr $8320			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.82a1		8d 25 04	sta $0425			sta 	ModeMask
.82a4						_AG12HaveMask:
.82a4		20 54 84	jsr $8454			jsr 	TypeAndCalculateOperand 	; get zero page type
.82a7		da		phx				phx 								; save found address mode
.82a8		20 84 83	jsr $8384			jsr 	AssembleModeX
.82ab		fa		plx				plx  								; restore address mode
.82ac		b0 0b		bcs $82b9			bcs 	_AG12Exit
.82ae		20 ba 82	jsr $82ba			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82b1		20 84 83	jsr $8384			jsr 	AssembleModeX
.82b4		b0 03		bcs $82b9			bcs 	_AG12Exit
.82b6		4c 40 a5	jmp $a540			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82b9						_AG12Exit:
.82b9		60		rts				rts
.82ba						PromoteToAbsolute:
.82ba		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82bc		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82be		f0 19		beq $82d9			beq 	_PTADo
.82c0		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82c2		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82c4		f0 13		beq $82d9			beq 	_PTADo
.82c6		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82c8		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82ca		f0 0d		beq $82d9			beq 	_PTADo
.82cc		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82ce		e0 d1		cpx #$d1			cpx 	#AM_IND
.82d0		f0 07		beq $82d9			beq 	_PTADo
.82d2		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82d4		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82d6		f0 01		beq $82d9			beq 	_PTADo
.82d8		60		rts				rts
.82d9						_PTADo:
.82d9		aa		tax				tax
.82da		60		rts				rts
.82db						AssembleGroup3:
.82db		68		pla				pla 								; get parameters, which is just the opcode.
.82dc		fa		plx				plx
.82dd		20 18 83	jsr $8318			jsr 	AccessParameters 			; get and output opcode
.82e0		20 30 83	jsr $8330			jsr 	AssemblerWriteByte
.82e3		20 b8 84	jsr $84b8			jsr 	CalculateOperand 			; get a 16 bit operand
.82e6		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82e8		38		sec				sec
.82e9		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.82ec		48		pha				pha 								; LSB in A
.82ed		a5 60		lda $60				lda 	NSMantissa1
.82ef		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.82f2		aa		tax				tax 								; MSB in X
.82f3		68		pla				pla
.82f4		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82f5		69 7f		adc #$7f			adc 	#$7F
.82f7		90 01		bcc $82fa			bcc 	_AG3NoCarry
.82f9		e8		inx				inx
.82fa						_AG3NoCarry:
.82fa		38		sec				sec 								; fix back and write out anyways.
.82fb		e9 80		sbc #$80			sbc 	#$80
.82fd		20 30 83	jsr $8330			jsr 	AssemblerWriteByte
.8300		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8302		f0 0a		beq $830e			beq 	_AG3Exit
.8304		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.8307		29 01		and #$01			and 	#1
.8309		f0 03		beq $830e			beq 	_AG3Exit
.830b		4c 45 a5	jmp $a545			jmp 	RangeError 					; no, branch is out of range
.830e						_AG3Exit:
.830e		60		rts				rts
.830f						AssembleGroup4:
.830f		68		pla				pla 								; pop address
.8310		fa		plx				plx
.8311		20 18 83	jsr $8318			jsr 	AccessParameters 			; access and get first
.8314		20 30 83	jsr $8330			jsr 	AssemblerWriteByte 			; output it.
.8317		60		rts				rts
.8318						AccessParameters:
.8318		8d 21 04	sta $0421			sta 	ParamStart
.831b		8e 22 04	stx $0422			stx 	ParamStart+1
.831e		a9 01		lda #$01			lda 	#1
.8320						GetParameter:
.8320		5a		phy				phy
.8321		a8		tay				tay
.8322		ad 21 04	lda $0421			lda 	ParamStart
.8325		85 36		sta $36				sta 	zTemp0
.8327		ad 22 04	lda $0422			lda 	ParamStart+1
.832a		85 37		sta $37				sta 	zTemp0+1
.832c		b1 36		lda ($36),y			lda 	(zTemp0),y
.832e		7a		ply				ply
.832f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8330						AssemblerWriteByte:
.8330		48		pha			pha
.8331		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8334		29 02		and #$02		and 	#2
.8336		f0 1b		beq $8353		beq 	_AWBNoPrint
.8338		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.833b		20 6e 83	jsr $836e		jsr 	PrintHex
.833e		ad 1e 04	lda $041e		lda		AssemblerAddress
.8341		20 6e 83	jsr $836e		jsr 	PrintHex
.8344		a9 20		lda #$20		lda 	#' '
.8346		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8349		68		pla			pla 									; print byte
.834a		48		pha			pha
.834b		20 6e 83	jsr $836e		jsr 	PrintHex
.834e		a9 0d		lda #$0d		lda 	#13
.8350		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8353						_AWBNoPrint:
.8353		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.8356		85 36		sta $36			sta 	zTemp0
.8358		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.835b		f0 0e		beq $836b		beq 	_AWBRange
.835d		85 37		sta $37			sta 	zTemp0+1
.835f		68		pla			pla 									; write byte out
.8360		92 36		sta ($36)		sta 	(zTemp0)
.8362		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.8365		d0 03		bne $836a		bne 	_AWBNoCarry
.8367		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.836a						_AWBNoCarry:
.836a		60		rts			rts
.836b						_AWBRange:
.836b		4c 45 a5	jmp $a545		jmp 	RangeError
.836e						PrintHex:
.836e		48		pha				pha
.836f		4a		lsr a				lsr 	a
.8370		4a		lsr a				lsr 	a
.8371		4a		lsr a				lsr 	a
.8372		4a		lsr a				lsr 	a
.8373		20 77 83	jsr $8377			jsr 	_PrintNibble
.8376		68		pla				pla
.8377						_PrintNibble:
.8377		29 0f		and #$0f			and 	#15
.8379		c9 0a		cmp #$0a			cmp 	#10
.837b		90 02		bcc $837f			bcc 	_NoShift
.837d		69 06		adc #$06			adc 	#6
.837f						_NoShift:
.837f		69 30		adc #$30			adc 	#48
.8381		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8384						AssembleModeX:
.8384		5a		phy				phy
.8385		ad 23 04	lda $0423			lda 	IsGroup1
.8388		f0 17		beq $83a1			beq 	_AMXGroup2
.838a		8a		txa				txa 							; is it in group # 1
.838b		29 40		and #$40			and 	#AM_ISG1
.838d		f0 4d		beq $83dc			beq 	_AMXFail 				; no, give up.
.838f		8a		txa				txa 							; get back.
.8390		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8392		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8394		d0 22		bne $83b8			bne 	_AMXHaveInfo
.8396		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.8399		c9 81		cmp #$81			cmp 	#$81
.839b		f0 3f		beq $83dc			beq 	_AMXFail
.839d		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.839f		80 17		bra $83b8			bra 	_AMXHaveInfo 			; odd design decision there.
.83a1						_AMXGroup2:
.83a1		8a		txa				txa 							; is it in group 2 ?
.83a2		29 20		and #$20			and 	#AM_ISG2
.83a4		f0 36		beq $83dc			beq 	_AMXFail 				; no, give up.
.83a6		8a		txa				txa 							; get the offset into Y
.83a7		29 1f		and #$1f			and 	#$1F
.83a9		4a		lsr a				lsr 	a 						; make it 0-7.
.83aa		4a		lsr a				lsr  	a
.83ab		a8		tay				tay
.83ac		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83af						_AMXCheckOkay:
.83af		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83b0		88		dey				dey
.83b1		10 fc		bpl $83af			bpl 	_AMXCheckOkay
.83b3		90 27		bcc $83dc			bcc 	_AMXFail 				; not allowed.
.83b5		8a		txa				txa  							; get mask back
.83b6		29 1f		and #$1f			and 	#$1F
.83b8						_AMXHaveInfo:
.83b8		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83ba		10 04		bpl $83c0			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83bc		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83be		d0 1c		bne $83dc			bne 	_AMXFail
.83c0						_AMXAnySize:
.83c0		18		clc				clc 							; add offset to the base opcode
.83c1		6d 24 04	adc $0424			adc 	BaseOpcode
.83c4						_AMXOutputCode:
.83c4		20 30 83	jsr $8330			jsr 	AssemblerWriteByte 		; write the opcode out.
.83c7		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83c9		f0 0e		beq $83d9			beq 	_AMXExit
.83cb		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83cd		20 30 83	jsr $8330			jsr 	AssemblerWriteByte
.83d0		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83d2		30 05		bmi $83d9			bmi 	_AMXExit
.83d4		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83d6		20 30 83	jsr $8330			jsr 	AssemblerWriteByte
.83d9						_AMXExit:
.83d9		7a		ply				ply
.83da		38		sec				sec
.83db		60		rts				rts
.83dc						_AMXFail:
.83dc		a0 00		ldy #$00			ldy 	#0
.83de						_AMXCheckOddities:
.83de		8a		txa				txa
.83df		d9 06 84	cmp $8406,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83e2		d0 15		bne $83f9			bne 	_AMXCONext
.83e4		b9 04 84	lda $8404,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83e7		cd 24 04	cmp $0424			cmp 	BaseOpcode
.83ea		d0 0d		bne $83f9			bne 	_AMXCONext
.83ec		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83ee		10 04		bpl $83f4			bpl 	_AMXCONotZero
.83f0		a5 60		lda $60				lda 	NSMantissa1
.83f2		d0 05		bne $83f9			bne 	_AMXCONext
.83f4						_AMXCONotZero:
.83f4		b9 05 84	lda $8405,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83f7		80 cb		bra $83c4			bra 	_AMXOutputCode 			; and assemble it
.83f9						_AMXCONext:
.83f9		c8		iny				iny
.83fa		c8		iny				iny
.83fb		c8		iny				iny
.83fc		b9 04 84	lda $8404,y			lda 	ExtraOpcode+0,y 		; end of table
.83ff		d0 dd		bne $83de			bne 	_AMXCheckOddities
.8401						_AMXCOFail:
.8401		7a		ply				ply
.8402		18		clc				clc
.8403		60		rts				rts
.8404						ExtraOpcode:
>8404		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8407		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>840a		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>840d		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8410		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8413		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8416		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8419		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>841c		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>841f		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8422		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8423						LabelHere:
.8423		c8		iny				iny 								; skip .
.8424		a2 00		ldx #$00			ldx 	#0 							; get a term
.8426		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm
.8429		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.842b		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.842d		d0 22		bne $8451			bne 	_ALType 					; otherwise typing error
.842f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8431		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8433		b5 60		lda $60,x			lda 	NSMantissa1,x
.8435		85 37		sta $37				sta 	zTemp0+1
.8437		5a		phy				phy 								; copy address in (64k)
.8438		a0 01		ldy #$01			ldy 	#1
.843a		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.843d		92 36		sta ($36)			sta 	(zTemp0)
.843f		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8442		91 36		sta ($36),y			sta 	(zTemp0),y
.8444		c8		iny				iny
.8445		a9 00		lda #$00			lda 	#0 							; zero the rest.
.8447		91 36		sta ($36),y			sta 	(zTemp0),y
.8449		c8		iny				iny
.844a		91 36		sta ($36),y			sta 	(zTemp0),y
.844c		c8		iny				iny
.844d		91 36		sta ($36),y			sta 	(zTemp0),y
.844f		7a		ply				ply
.8450		60		rts				rts
.8451						_ALType:
.8451		4c 4a a5	jmp $a54a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8454						TypeAndCalculateOperand:
.8454		b1 30		lda ($30),y			lda 	(codePtr),y
.8456		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8458		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.845a		f0 5b		beq $84b7			beq 	_TACOExit
.845c		c9 80		cmp #$80			cmp 	#KWC_EOL
.845e		f0 57		beq $84b7			beq 	_TACOExit
.8460		c8		iny				iny
.8461		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8463		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8465		f0 51		beq $84b8			beq 	CalculateOperand
.8467		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8469		f0 1f		beq $848a			beq 	_TACOIndirect
.846b		88		dey				dey 								; undo get of first character
.846c		20 b8 84	jsr $84b8			jsr 	CalculateOperand 			; get operand
.846f		b1 30		lda ($30),y			lda 	(codePtr),y
.8471		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8473		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8475		d0 40		bne $84b7			bne 	_TACOExit
.8477		c8		iny				iny
.8478		20 c2 84	jsr $84c2			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.847b		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.847d		c9 58		cmp #$58			cmp 	#'X'
.847f		f0 36		beq $84b7			beq 	_TACOExit
.8481		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8483		c9 59		cmp #$59			cmp 	#'Y'
.8485		f0 30		beq $84b7			beq 	_TACOExit
.8487						_TACOSyntax:
.8487		4c 40 a5	jmp $a540			jmp 	SyntaxError
.848a						_TACOIndirect:
.848a		20 b8 84	jsr $84b8			jsr 	CalculateOperand 			; get the operand
.848d		b1 30		lda ($30),y			lda 	(codePtr),y
.848f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8491		f0 17		beq $84aa			beq 	_TACOIndX
.8493		20 5e 94	jsr $945e			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8496		b1 30		lda ($30),y			lda 	(codePtr),y
.8498		a2 d1		ldx #$d1			ldx 	#AM_IND
.849a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.849c		d0 19		bne $84b7			bne 	_TACOExit
.849e		c8		iny				iny
.849f		20 c2 84	jsr $84c2			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84a2		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84a4		d0 e1		bne $8487			bne 	_TACOSyntax
.84a6		a2 d0		ldx #$d0			ldx 	#AM_INDY
.84a8		80 0d		bra $84b7			bra 	_TACOExit
.84aa						_TACOIndX:
.84aa		c8		iny				iny
.84ab		20 c2 84	jsr $84c2			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84ae		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84b0		d0 d5		bne $8487			bne 	_TACOSyntax
.84b2		20 5e 94	jsr $945e			jsr 	CheckRightBracket			; check )
.84b5		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84b7						_TACOExit:
.84b7		60		rts				rts
.84b8						CalculateOperand:
.84b8		48		pha				pha
.84b9		da		phx				phx
.84ba		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84bc		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger
.84bf		fa		plx				plx
.84c0		68		pla				pla
.84c1		60		rts				rts
.84c2						TACOCheckXY:
.84c2		b1 30		lda ($30),y			lda 	(codePtr),y
.84c4		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84c6		c9 40		cmp #$40			cmp 	#$40
.84c8		d0 21		bne $84eb			bne 	_TCXYFail
.84ca		b1 30		lda ($30),y			lda 	(codePtr),y
.84cc		18		clc				clc
.84cd		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84cf		85 37		sta $37				sta 	zTemp0+1
.84d1		c8		iny				iny
.84d2		b1 30		lda ($30),y			lda 	(codePtr),y
.84d4		c8		iny				iny
.84d5		85 36		sta $36				sta 	zTemp0
.84d7		5a		phy				phy 								; save position
.84d8		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84da		b1 36		lda ($36),y			lda 	(zTemp0),y
.84dc		d0 0c		bne $84ea			bne 	_TCXYPopFail
.84de		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84e0		b1 36		lda ($36),y			lda 	(zTemp0),y
.84e2		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84e4		f0 08		beq $84ee			beq 	_TCXYFound
.84e6		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84e8		f0 04		beq $84ee			beq 	_TCXYFound
.84ea						_TCXYPopFail:
.84ea		7a		ply				ply
.84eb						_TCXYFail:
.84eb		a9 00		lda #$00			lda 	#0
.84ed		60		rts				rts
.84ee						_TCXYFound:
.84ee		7a		ply				ply 								; restore position
.84ef		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84f2						BackloadProgram:
.84f2		20 6d 8e	jsr $8e6d			jsr 	NewProgram 					; does the actual NEW.
.84f5		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84f7		a9 49		lda #$49			lda 	#_BLLoad & $FF
.84f9		20 d0 94	jsr $94d0			jsr 	PrintStringXA
.84fc		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.84fe		8d 6a 07	sta $076a			sta 	BackLoadPage
.8501		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8503		8d 6b 07	sta $076b			sta 	0+BackLoadPointer
.8506		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8508		8d 6c 07	sta $076c			sta 	1+BackLoadPointer
.850b		a9 ff		lda #$ff			lda 	#$FF
.850d		8d fa ff	sta $fffa			sta 	$FFFA
.8510						_BPLoop:
.8510		a2 ff		ldx #$ff			ldx 	#$FF
.8512		20 5e 85	jsr $855e			jsr 	BLReadByte 					; read a byte
.8515		c9 00		cmp #$00			cmp 	#0
.8517		f0 29		beq $8542			beq 	_BPExit 					; if 0 exit
.8519		30 27		bmi $8542			bmi 	_BPExit 					; if -ve exit
.851b						_BPCopy:
.851b		e8		inx				inx  								; copy byte into the lineBuffer
.851c		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.851f		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8522		20 5e 85	jsr $855e			jsr 	BLReadByte 					; read next byte
.8525		30 0a		bmi $8531			bmi 	_BPEndLine 					; -ve = EOL
.8527		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8529		d0 02		bne $852d			bne 	_BPNotTab
.852b		a9 20		lda #$20			lda 	#' '
.852d						_BPNotTab:
.852d		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.852f		b0 ea		bcs $851b			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8531						_BPEndLine:
.8531		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8534		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8537		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.853a		f0 d4		beq $8510			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.853c		38		sec				sec 								; append not insert
.853d		20 a9 aa	jsr $aaa9			jsr 	MemoryInsertLine 			; append to current program
.8540		80 ce		bra $8510			bra 	_BPLoop
.8542						_BPExit:
.8542		9c fa ff	stz $fffa			stz 	$FFFA
.8545		20 69 87	jsr $8769			jsr 	ClearCommand 				; clear variables etc.
.8548		60		rts				rts
.8549						_BLLoad:
>8549		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8551		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.855e						BLReadByte:
.855e		da		phx				phx
.855f		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8561		ad 6a 07	lda $076a			lda 	BackLoadPage	 			; set current page
.8564		85 0b		sta $0b				sta 	8+3
.8566		ad 6b 07	lda $076b			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8569		85 36		sta $36				sta 	zTemp0
.856b		ad 6c 07	lda $076c			lda 	BackLoadPointer+1
.856e		85 37		sta $37				sta 	zTemp0+1
.8570		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.8572		ee 6b 07	inc $076b			inc 	BackLoadPointer 			; bump pointer
.8575		d0 0f		bne $8586			bne 	_BLNoCarry
.8577		ee 6c 07	inc $076c			inc 	BackLoadPointer+1
.857a		10 0a		bpl $8586			bpl 	_BLNoCarry 					; need a new page
.857c		48		pha				pha
.857d		a9 60		lda #$60			lda 	#$60 						; reset pointer
.857f		8d 6c 07	sta $076c			sta 	BackLoadPointer+1
.8582		ee 6a 07	inc $076a			inc 	BackLoadPage 				; next page from source.
.8585		68		pla				pla
.8586						_BLNoCarry:
.8586		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8588		fa		plx				plx
.8589		c9 00		cmp #$00			cmp 	#0
.858b		60		rts				rts
.076a						BackLoadPage:
>076a								.fill  	1
.076b						BackLoadPointer:
>076b								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.858c						EditProgramCode:
.858c		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.858f		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.8592		20 4d ab	jsr $ab4d			jsr 	MemorySearch
.8595		90 05		bcc $859c			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8597		d0 03		bne $859c			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8599		20 72 aa	jsr $aa72			jsr 	MemoryDeleteLine 			; delete the line
.859c						_EPCNoDelete:
.859c		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.859f		c9 80		cmp #$80			cmp 	#KWC_EOL
.85a1		f0 0d		beq $85b0			beq 	_EPCNoInsert
.85a3		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85a6		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85a9		20 4d ab	jsr $ab4d			jsr 	MemorySearch
.85ac		18		clc				clc 								; insert at this point.
.85ad		20 a9 aa	jsr $aaa9			jsr 	MemoryInsertLine 			; insert the line
.85b0						_EPCNoInsert:
.85b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85b1						WarmStart:
.85b1		a2 ff		ldx #$ff			ldx 	#$FF
.85b3		9a		txs				txs
.85b4		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85b6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.85b9		20 21 80	jsr $8021			jsr 	EXTInputLine 				; get line to lineBuffer
.85bc		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line
.85bf		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.85c2		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.85c5		d0 17		bne $85de			bne 	_WSEditCode 				; if so,edit code.
.85c7		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85ca		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.85cc		85 30		sta $30				sta 	codePtr
.85ce		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85d0		85 31		sta $31				sta 	codePtr+1
.85d2		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.85d5		c9 80		cmp #$80			cmp 	#KWC_EOL
.85d7		f0 d8		beq $85b1			beq 	WarmStart
.85d9		20 fd 8f	jsr $8ffd			jsr 	RUNCodePointerLine 			; execute that line.
.85dc		80 d3		bra $85b1			bra 	WarmStart
.85de						_WSEditCode:
.85de		20 8c 85	jsr $858c			jsr 	EditProgramCode 			; edit the program code
.85e1		20 69 87	jsr $8769			jsr 	ClearCommand 				; clear all variables etc.
.85e4		80 cb		bra $85b1			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85e6						AssembleCommand:
.85e6		a2 00		ldx #$00			ldx 	#0
.85e8		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger 		; start address
.85eb		a5 58		lda $58				lda 	NSMantissa0
.85ed		8d 1e 04	sta $041e			sta 	AssemblerAddress
.85f0		a5 60		lda $60				lda 	NSMantissa1
.85f2		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.85f5		20 66 94	jsr $9466			jsr 	CheckComma
.85f8		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; options 0-3
.85fb		a5 58		lda $58				lda 	NSMantissa0
.85fd		8d 20 04	sta $0420			sta 	AssemblerControl
.8600		60		rts				rts
.8601		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8602						AssertCommand:
.8602		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8604		20 2f a3	jsr $a32f			jsr 	EvaluateInteger 			; the assert test
.8607		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; exit if result is non zero.
.860a		d0 05		bne $8611			bne 	_ACExit
.860c		a9 0a		lda #$0a		lda	#10
.860e		4c 77 94	jmp $9477		jmp	ErrorHandler
.8611						_ACExit:
.8611		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.8612						Command_BLoad:
.8612		a2 00		ldx #$00			ldx 	#0
.8614		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; file name to load
.8617		20 66 94	jsr $9466			jsr 	CheckComma 					; consume comma
.861a		e8		inx				inx
.861b		20 2f a3	jsr $a32f			jsr 	EvaluateInteger 			; load address (full physical address)
.861e		5a		phy				phy
.861f		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8621		a6 60		ldx $60				ldx 	NSMantissa1
.8623		20 4e 81	jsr $814e			jsr 	KNLOpenFileRead 			; open file for reading
.8626		b0 4e		bcs $8676			bcs 	CBLErrorHandler 			; error, so fail.
.8628		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.862b		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.862d		20 79 86	jsr $8679			jsr 	BLOpenPhysicalMemory 		; open for access.
.8630						_BLReadFile:
.8630		ad 71 07	lda $0771			lda 	BasicFileStream
.8633		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8635		20 9d 81	jsr $819d			jsr 	KNLReadBlock 				; read next block
.8638		b0 22		bcs $865c			bcs 	_BLFileError 				; file error, which might be EOF.
.863a		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.863c		f0 f2		beq $8630			beq 	_BLReadFile
.863e		8d 6f 07	sta $076f			sta 	BLCopyCounter 				; counter.
.8641		ac 6e 07	ldy $076e			ldy 	BLYOffset 					; copy the buffer out here
.8644		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8646						_BLCopyLoop:
.8646		bd 62 06	lda $0662,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8649		91 3a		sta ($3a),y			sta 	(zTemp2),y
.864b		c8		iny				iny
.864c		d0 03		bne $8651			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.864e		20 a1 86	jsr $86a1			jsr 	BLAdvancePhysicalMemory
.8651						_BLNoAdjust:
.8651		e8		inx				inx
.8652		ce 6f 07	dec $076f			dec 	BLCopyCounter
.8655		d0 ef		bne $8646			bne 	_BLCopyLoop
.8657		8c 6e 07	sty $076e			sty 	BLYOffset 					; update Y offset
.865a		80 d4		bra $8630			bra 	_BLReadFile 				; go ask for more.
.865c						_BLFileError:
.865c		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.865e		d0 16		bne $8676			bne 	CBLErrorHandler				; no, it's an actual error
.8660		20 9b 86	jsr $869b			jsr 	BLClosePhysicalMemory 		; close the access.
.8663		ad 71 07	lda $0771			lda 	BasicFileStream 			; close the file
.8666		20 12 82	jsr $8212			jsr 	KNLCloseFile
.8669		7a		ply				ply
.866a		60		rts				rts
.866b						CBLCloseError:
.866b		48		pha				pha
.866c		20 9b 86	jsr $869b			jsr 	BLClosePhysicalMemory
.866f		ad 71 07	lda $0771			lda 	BasicFileStream
.8672		20 12 82	jsr $8212			jsr 	KNLCloseFile
.8675		68		pla				pla
.8676						CBLErrorHandler:
.8676		4c 28 8d	jmp $8d28			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8679						BLOpenPhysicalMemory:
.8679		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.867b		8d 6d 07	sta $076d			sta 	BLNormalMapping
.867e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8680		8d 6e 07	sta $076e			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.8683		64 3a		stz $3a				stz 	zTemp2
.8685		b5 60		lda $60,x			lda 	NSMantissa1,x
.8687		29 1f		and #$1f			and 	#$1F
.8689		09 60		ora #$60			ora 	#BLAccessPage << 5
.868b		85 3b		sta $3b				sta 	zTemp2+1
.868d		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.868f		16 60		asl $60,x			asl 	NSMantissa1,x
.8691		2a		rol a				rol 	a
.8692		16 60		asl $60,x			asl 	NSMantissa1,x
.8694		2a		rol a				rol 	a
.8695		16 60		asl $60,x			asl 	NSMantissa1,x
.8697		2a		rol a				rol 	a
.8698		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.869a		60		rts				rts
.869b						BLClosePhysicalMemory:
.869b		ad 6d 07	lda $076d			lda 	BLNormalMapping
.869e		85 0b		sta $0b				sta 	BLAccessPage+8
.86a0		60		rts				rts
.86a1						BLAdvancePhysicalMemory:
.86a1		48		pha				pha
.86a2		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.86a4		a5 3b		lda $3b				lda 	zTemp2+1
.86a6		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.86a8		d0 06		bne $86b0			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.86aa		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.86ac		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.86ae		85 3b		sta $3b				sta 	zTemp2+1
.86b0						_BLAPMExit:
.86b0		68		pla				pla
.86b1		60		rts				rts
.076d						BLNormalMapping:
>076d								.fill 	1
.076e						BLYOffset:
>076e								.fill 	1
.076f						BLCopyCounter:
>076f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.86b2						Command_BSave:
.86b2		a2 00		ldx #$00			ldx 	#0
.86b4		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; file name to load
.86b7		20 66 94	jsr $9466			jsr 	CheckComma 					; consume comma
.86ba		e8		inx				inx
.86bb		20 2f a3	jsr $a32f			jsr 	EvaluateInteger 			; load address (full physical address)
.86be		20 66 94	jsr $9466			jsr 	CheckComma 					; consume comma
.86c1		e8		inx				inx
.86c2		20 2f a3	jsr $a32f			jsr 	EvaluateInteger 			; data length (3 bytes only)
.86c5		5a		phy				phy
.86c6		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.86c8		a6 60		ldx $60				ldx 	NSMantissa1
.86ca		20 49 81	jsr $8149			jsr 	KNLOpenFileWrite 			; open file for reading
.86cd		b0 62		bcs $8731			bcs 	CBSErrorHandler 			; error, so fail.
.86cf		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.86d2		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.86d4		20 79 86	jsr $8679			jsr 	BLOpenPhysicalMemory 		; open for access.
.86d7		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.86d9		ac 6e 07	ldy $076e			ldy 	BLYOffset 					; used for data offset.
.86dc						_BSWriteToFileLoop:
.86dc		38		sec				sec 								; pre decrement count.
.86dd		a5 5a		lda $5a				lda 	NSMantissa0+2
.86df		e9 01		sbc #$01			sbc 	#1
.86e1		85 5a		sta $5a				sta 	NSMantissa0+2
.86e3		a5 62		lda $62				lda 	NSMantissa1+2
.86e5		e9 00		sbc #$00			sbc 	#0
.86e7		85 62		sta $62				sta 	NSMantissa1+2
.86e9		a5 6a		lda $6a				lda 	NSMantissa2+2
.86eb		e9 00		sbc #$00			sbc 	#0
.86ed		85 6a		sta $6a				sta 	NSMantissa2+2
.86ef		30 15		bmi $8706			bmi 	_BSFileComplete 			; undercounted, so exit.
.86f1		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.86f3		9d 62 06	sta $0662,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.86f6		e8		inx				inx
.86f7		c8		iny				iny 								; next byte
.86f8		d0 03		bne $86fd			bne 	_BSNoCheck
.86fa		20 a1 86	jsr $86a1			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.86fd						_BSNoCheck:
.86fd		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.86ff		d0 db		bne $86dc			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.8701		20 14 87	jsr $8714			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8704		80 d6		bra $86dc			bra 	_BSWriteToFileLoop 			; and keep on going
.8706						_BSFileComplete:
.8706		20 14 87	jsr $8714			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8709		20 9b 86	jsr $869b			jsr 	BLClosePhysicalMemory 		; close the access.
.870c		ad 71 07	lda $0771			lda 	BasicFileStream 			; close the file
.870f		20 12 82	jsr $8212			jsr 	KNLCloseFile
.8712		7a		ply				ply
.8713		60		rts				rts
.8714						BSFlushBuffer:
.8714		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8716		f0 0d		beq $8725			beq 	_BSFBExit 					; if so, exit.
.8718		a9 62		lda #$62			lda 	#KNLReadBuffer & $FF 		; where to write from.
.871a		85 36		sta $36				sta 	zTemp0
.871c		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.871e		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8720		20 c2 92	jsr $92c2			jsr 	CLWriteByteBlock 			; write it.
.8723		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8725						_BSFBExit:
.8725		60		rts				rts
.8726						CBSSCloseError:
.8726		48		pha				pha
.8727		20 9b 86	jsr $869b			jsr 	BLClosePhysicalMemory
.872a		ad 71 07	lda $0771			lda 	BasicFileStream
.872d		20 12 82	jsr $8212			jsr 	KNLCloseFile
.8730		68		pla				pla
.8731						CBSErrorHandler:
.8731		4c 28 8d	jmp $8d28			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8734						CallCommand:
.8734		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8736		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger
.8739						_CCClear
.8739		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.873a		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero 					; these are optional sequentially.
.873d		e0 04		cpx #$04			cpx 	#4
.873f		d0 f8		bne $8739			bne 	_CCClear
.8741		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8743						_CCCParam:
.8743		b1 30		lda ($30),y			lda 	(codePtr),y
.8745		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8747		d0 09		bne $8752			bne 	_CCCRun6502
.8749		c8		iny				iny 								; skip comma
.874a		e8		inx				inx	 								; next level
.874b		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.874e		e0 03		cpx #$03			cpx 	#3
.8750		90 f1		bcc $8743			bcc 	_CCCParam 					; done all 3 ?
.8752						_CCCRun6502:
.8752		5a		phy				phy 								; save position
.8753		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8755		85 37		sta $37				sta 	zTemp0+1
.8757		a5 58		lda $58				lda 	NSMantissa0
.8759		85 36		sta $36				sta 	zTemp0
.875b		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.875d		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.875f		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8761		20 66 87	jsr $8766			jsr 	_CCCZTemp0 					; call zTemp0
.8764		7a		ply				ply 								; restore position and exit
.8765		60		rts				rts
.8766						_CCCZTemp0:
.8766		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8769						ClearCommand:
.8769		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.876b		85 36		sta $36				sta 	0+zTemp0
.876d		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.876f		85 37		sta $37				sta 	1+zTemp0
.8771						_ClearZeroLoop:
.8771		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8773		f0 24		beq $8799			beq 	_ClearZeroEnd
.8775		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8777		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8779						_ClearOneVariable:
.8779		91 36		sta ($36),y			sta 	(zTemp0),y
.877b		c8		iny				iny
.877c		c0 08		cpy #$08			cpy 	#8
.877e		d0 f9		bne $8779			bne 	_ClearOneVariable
.8780		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8782		b1 36		lda ($36),y			lda 	(zTemp0),y
.8784		c9 18		cmp #$18			cmp 	#NSTProcedure
.8786		d0 04		bne $878c			bne 	_ClearNotProcedure
.8788		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.878a		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.878c						_ClearNotProcedure:
.878c		18		clc				clc 								; go to the next variable
.878d		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.878f		65 36		adc $36				adc 	zTemp0
.8791		85 36		sta $36				sta 	zTemp0
.8793		90 dc		bcc $8771			bcc 	_ClearZeroLoop
.8795		e6 37		inc $37				inc 	zTemp0+1
.8797		80 d8		bra $8771			bra 	_ClearZeroLoop
.8799						_ClearZeroEnd:
.8799		18		clc				clc
.879a		a5 36		lda $36				lda 	zTemp0
.879c		69 01		adc #$01			adc 	#1
.879e		8d 0c 04	sta $040c			sta 	lowMemPtr
.87a1		a5 37		lda $37				lda 	zTemp0+1
.87a3		69 00		adc #$00			adc 	#0
.87a5		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.87a8		20 07 b5	jsr $b507			jsr 	StackReset
.87ab		20 6d b5	jsr $b56d			jsr 	StringSystemInitialise
.87ae		20 0d 93	jsr $930d			jsr 	ProcedureScan
.87b1		20 ac 8f	jsr $8fac			jsr 	Command_Restore
.87b4		9c 1e 04	stz $041e			stz 	AssemblerAddress
.87b7		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.87ba		9c 20 04	stz $0420			stz 	AssemblerControl
.87bd		9c 61 06	stz $0661			stz 	KeyboardQueueEntries
.87c0		20 b1 9f	jsr $9fb1			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.87c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.87c4						ClearScreen:
.87c4		5a		phy				phy
.87c5		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.87c7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.87ca		7a		ply				ply
.87cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.87cc						Command_Data:
.87cc		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.87ce		a2 80		ldx #$80			ldx 	#KWC_EOL
.87d0		20 5f 93	jsr $935f			jsr 	ScanForward
.87d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.87d4						DimCommand:
.87d4		b1 30		lda ($30),y			lda 	(codePtr),y
.87d6		29 c0		and #$c0			and 	#$C0
.87d8		c9 40		cmp #$40			cmp 	#$40
.87da		d0 7a		bne $8856			bne 	_DCSyntax 				; n o, error.
.87dc		b1 30		lda ($30),y			lda 	(codePtr),y
.87de		18		clc				clc
.87df		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87e1		85 3f		sta $3f				sta 	zaTemp+1
.87e3		c8		iny				iny
.87e4		b1 30		lda ($30),y			lda 	(codePtr),y
.87e6		c8		iny				iny
.87e7		85 3e		sta $3e				sta 	zaTemp
.87e9		5a		phy				phy
.87ea		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87ec		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87ee		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87f0		c9 18		cmp #$18			cmp 	#NSTProcedure
.87f2		f0 62		beq $8856			beq 	_DCSyntax
.87f4		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87f6		29 04		and #$04			and 	#NSBIsArray
.87f8		f0 64		beq $885e			beq 	_DCType
.87fa		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87fc		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87fe		d0 59		bne $8859			bne 	_DCRedefine
.8800		7a		ply				ply
.8801		20 61 88	jsr $8861			jsr 	_DCGetSize 				; get array size, check it.
.8804		5a		phy				phy
.8805		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8807		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8809		7a		ply				ply 							; is there a second (e.g. ,x)
.880a		b1 30		lda ($30),y			lda 	(codePtr),y
.880c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.880e		d0 0a		bne $881a			bne 	_DCOneDimension
.8810		c8		iny				iny 							; skip comma
.8811		20 61 88	jsr $8861			jsr 	_DCGetSize 				; get 2nd array size
.8814		5a		phy				phy
.8815		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8817		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8819		7a		ply				ply
.881a						_DCOneDimension:
.881a		5a		phy				phy 							; save position
.881b		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.881d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.881f		aa		tax				tax
.8820		c8		iny				iny
.8821		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8823		e8		inx				inx 							; bump them.
.8824		1a		inc a				inc 	a
.8825		20 6d a3	jsr $a36d			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8828		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.882a		29 e0		and #$e0			and 	#$E0
.882c		d0 23		bne $8851			bne 	_DCSize
.882e		a0 02		ldy #$02			ldy 	#2 						; get base type
.8830		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8832		20 6f 88	jsr $886f			jsr 	ScaleByBaseType 		; scale by base type
.8835		a5 36		lda $36				lda 	zTemp0
.8837		a6 37		ldx $37				ldx 	zTemp0+1
.8839		20 73 9f	jsr $9f73			jsr 	AllocateXABytes 		; allocate memory
.883c		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.883e		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8840		c8		iny				iny
.8841		8a		txa				txa
.8842		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8844		7a		ply				ply 							; get position back
.8845		20 5e 94	jsr $945e			jsr 	CheckRightBracket 		; check )
.8848		b1 30		lda ($30),y			lda 	(codePtr),y
.884a		c8		iny				iny 							; consume in case
.884b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.884d		f0 85		beq $87d4			beq 	DimCommand
.884f		88		dey				dey 							; undo consume
.8850		60		rts				rts
.8851						_DCSize:
.8851		a9 16		lda #$16		lda	#22
.8853		4c 77 94	jmp $9477		jmp	ErrorHandler
.8856						_DCSyntax:
.8856		4c 40 a5	jmp $a540			jmp 	SyntaxError
.8859						_DCRedefine:
.8859		a9 15		lda #$15		lda	#21
.885b		4c 77 94	jmp $9477		jmp	ErrorHandler
.885e						_DCType:
.885e		4c 4a a5	jmp $a54a			jmp 	TypeError
.8861						_DCGetSize:
.8861		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8863		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 	; get array dimension
.8866		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8868		f0 e7		beq $8851			beq 	_DCSize
.886a		c9 fe		cmp #$fe			cmp 	#254
.886c		f0 e3		beq $8851			beq 	_DCSize
.886e		60		rts				rts
.886f						ScaleByBaseType:
.886f		29 10		and #$10			and 	#NSBIsString 			; is it string
.8871		d0 19		bne $888c			bne 	_SBBTString
.8873		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8875		48		pha				pha
.8876		a5 36		lda $36				lda 	zTemp0
.8878		48		pha				pha
.8879		06 36		asl $36				asl 	zTemp0 					; x 2
.887b		26 37		rol $37				rol 	zTemp0+1
.887d		06 36		asl $36				asl 	zTemp0 					; x 4
.887f		26 37		rol $37				rol 	zTemp0+1
.8881		68		pla				pla 							; add stacked value = x 5
.8882		65 36		adc $36				adc 	zTemp0
.8884		85 36		sta $36				sta 	zTemp0
.8886		68		pla				pla
.8887		65 37		adc $37				adc 	zTemp0+1
.8889		85 37		sta $37				sta 	zTemp0+1
.888b		60		rts				rts
.888c						_SBBTString:
.888c		06 36		asl $36				asl 	zTemp0
.888e		26 37		rol $37				rol 	zTemp0+1
.8890		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.8891						Command_Dir:
.8891		ad 62 07	lda $0762			lda     KNLDefaultDrive				; set drive to list.
.8894		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8896		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8898		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.889b		b0 56		bcs $88f3			bcs     _CDExit
.889d						_CDEventLoop:
.889d		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.88a0		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.88a3		b0 f8		bcs $889d			bcs     _CDEventLoop
.88a5		ad 63 07	lda $0763			lda     event.type
.88a8		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.88aa		f0 47		beq $88f3			beq    	_CDExit
.88ac		20 b1 88	jsr $88b1			jsr     _CDMessages 				; handle various messages
.88af		80 ec		bra $889d			bra     _CDEventLoop
.88b1						_CDMessages:
.88b1		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.88b3		f0 15		beq $88ca			beq     _CDEVRead
.88b5		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.88b7		f0 19		beq $88d2			beq     _CDEVVolume
.88b9		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.88bb		f0 17		beq $88d4			beq     _CDEVFile
.88bd		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.88bf		f0 28		beq $88e9			beq     _CDEVFree
.88c1		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.88c3		f0 26		beq $88eb			beq     _CDEVEOF
.88c5		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.88c7		f0 22		beq $88eb			beq     _CDEVEOF
.88c9		60		rts				rts
.88ca						_CDEVRead:
.88ca		ad 66 07	lda $0766			lda     event.directory.stream
.88cd		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.88cf		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.88d2						_CDEVVolume:
.88d2		80 f6		bra $88ca			bra     _CDEVRead
.88d4						_CDEVFile:
.88d4		a9 20		lda #$20			lda 	#32
.88d6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88d9		ad 68 07	lda $0768			lda     event.directory.file.len
.88dc		20 f6 88	jsr $88f6			jsr     _CDReadData
.88df		20 d0 94	jsr $94d0			jsr 	PrintStringXA
.88e2		a9 0d		lda #$0d			lda 	#13
.88e4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88e7		80 e1		bra $88ca			bra     _CDEVRead
.88e9						_CDEVFree:
.88e9		80 00		bra $88eb			bra     _CDEVEOF
.88eb						_CDEVEOF:
.88eb		ad 66 07	lda $0766			lda     event.directory.stream
.88ee		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.88f0		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.88f3						_CDExit:
.88f3		4c b1 85	jmp $85b1			jmp 	WarmStart
.88f6						_CDReadData:
.88f6		85 fd		sta $fd				sta     kernel.args.recv.buflen
.88f8		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.88fa		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.88fc		a9 05		lda #$05			lda     #lineBuffer >> 8
.88fe		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8900		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8903		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8905		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.8908		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.890a		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.890c		60		rts				rts
.890d						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.890d						Command_Drive:
.890d		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger
.8910		20 45 81	jsr $8145			jsr 	KNLSetDrive
.8913		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8914						EndCommand:
.8914		4c b1 85	jmp $85b1			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8917						ForCommand:
.8917		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8919		20 a1 b4	jsr $b4a1			jsr 	StackOpen
.891c		a2 00		ldx #$00			ldx 	#0
.891e		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm
.8921		b5 50		lda $50,x			lda 	NSStatus,x
.8923		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8925		d0 47		bne $896e			bne		_FCError
.8927		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8929		20 6e 94	jsr $946e			jsr 	CheckNextA
.892c		e8		inx				inx
.892d		20 2f a3	jsr $a32f			jsr 	EvaluateInteger 			; <from> in +1
.8930		b1 30		lda ($30),y			lda 	(codePtr),y
.8932		c8		iny				iny 								; consume it
.8933		48		pha				pha 								; save on stack for later
.8934		c9 bd		cmp #$bd			cmp 	#KWD_DOWNTO
.8936		f0 04		beq $893c			beq 	_FCNoSyntax
.8938		c9 d6		cmp #$d6			cmp 	#KWD_TO
.893a		d0 35		bne $8971			bne 	_FCSyntaxError
.893c						_FCNoSyntax:
.893c		e8		inx				inx
.893d		20 2f a3	jsr $a32f			jsr 	EvaluateInteger
.8940		20 e6 b4	jsr $b4e6			jsr 	STKSaveCodePosition 		; save loop back position
.8943		68		pla				pla 								; restore DOWNTO or TO
.8944		5a		phy				phy 								; save Y on the stack
.8945		49 bd		eor #$bd			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8947		f0 02		beq $894b			beq 	_FCNotDownTo
.8949		a9 02		lda #$02			lda 	#2
.894b						_FCNotDownTo:
.894b		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.894c		a0 10		ldy #$10			ldy 	#16
.894e		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8950		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8952		a5 58		lda $58				lda 	NSMantissa0
.8954		91 34		sta ($34),y			sta 	(basicStack),y
.8956		a5 60		lda $60				lda 	NSMantissa1
.8958		c8		iny				iny
.8959		91 34		sta ($34),y			sta 	(basicStack),y
.895b		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.895d		a2 01		ldx #$01			ldx 	#1
.895f		20 74 89	jsr $8974			jsr 	FCIntegerToStack
.8962		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8964		a2 02		ldx #$02			ldx 	#2
.8966		20 74 89	jsr $8974			jsr 	FCIntegerToStack
.8969		20 8f 89	jsr $898f			jsr 	CopyIndexToReference
.896c		7a		ply				ply 								; restore position
.896d		60		rts				rts
.896e						_FCError:
.896e		4c 4a a5	jmp $a54a			jmp 	TypeError
.8971						_FCSyntaxError:
.8971		4c 40 a5	jmp $a540			jmp 	SyntaxError
.8974						FCIntegerToStack:
.8974		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8976		10 03		bpl $897b			bpl	 	_FCNotNegative
.8978		20 8b a3	jsr $a38b			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.897b						_FCNotNegative:
.897b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.897d		91 34		sta ($34),y			sta 	(basicStack),y
.897f		c8		iny				iny
.8980		b5 60		lda $60,x			lda 	NSMantissa1,x
.8982		91 34		sta ($34),y			sta 	(basicStack),y
.8984		c8		iny				iny
.8985		b5 68		lda $68,x			lda 	NSMantissa2,x
.8987		91 34		sta ($34),y			sta 	(basicStack),y
.8989		c8		iny				iny
.898a		b5 70		lda $70,x			lda 	NSMantissa3,x
.898c		91 34		sta ($34),y			sta 	(basicStack),y
.898e		60		rts				rts
.898f						CopyIndexToReference:
.898f		5a		phy				phy
.8990		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8992		38		sec				sec 								; (because we copy from offset 8)
.8993		b1 34		lda ($34),y			lda 	(basicStack),y
.8995		e9 08		sbc #$08			sbc 	#8
.8997		85 36		sta $36				sta 	zTemp0
.8999		c8		iny				iny
.899a		b1 34		lda ($34),y			lda 	(basicStack),y
.899c		e9 00		sbc #$00			sbc 	#0
.899e		85 37		sta $37				sta 	zTemp0+1
.89a0		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89a2		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89a4		b1 34		lda ($34),y			lda 	(basicStack),y
.89a6		0a		asl a				asl 	a 							; into carry
.89a7		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89a9		90 14		bcc $89bf			bcc 	_CITRNormal
.89ab		38		sec				sec
.89ac						_CITRNegative:
.89ac		a9 00		lda #$00			lda 	#0
.89ae		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89b0		91 36		sta ($36),y			sta 	(zTemp0),y
.89b2		c8		iny				iny
.89b3		ca		dex				dex
.89b4		d0 f6		bne $89ac			bne 	_CITRNegative
.89b6		88		dey				dey 								; look at MSB of mantissa
.89b7		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89b9		09 80		ora #$80			ora 	#$80
.89bb		91 36		sta ($36),y			sta 	(zTemp0),y
.89bd		7a		ply				ply
.89be		60		rts				rts
.89bf						_CITRNormal:
.89bf		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89c1		91 36		sta ($36),y			sta 	(zTemp0),y
.89c3		c8		iny				iny
.89c4		ca		dex				dex
.89c5		d0 f8		bne $89bf			bne 	_CITRNormal
.89c7		7a		ply				ply 								; and exit.
.89c8		60		rts				rts
.89c9						NextCommand:
.89c9		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.89cb		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.89cd		20 ce b4	jsr $b4ce			jsr 	StackCheckFrame
.89d0		5a		phy				phy
.89d1		a0 10		ldy #$10			ldy 	#16 						; get the step count
.89d3		b1 34		lda ($34),y			lda 	(basicStack),y
.89d5		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.89d7		30 02		bmi $89db			bmi 	_NCStepNeg
.89d9		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.89db						_NCStepNeg:
.89db		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.89dd		a2 04		ldx #$04			ldx 	#4 							; count to bump
.89df		18		clc				clc
.89e0						_NCBump:
.89e0		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.89e2		91 34		sta ($34),y			sta 	(basicStack),y
.89e4		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.89e6		c8		iny				iny 								; next byte
.89e7		ca		dex				dex 								; do four times
.89e8		d0 f6		bne $89e0			bne 	_NCBump
.89ea		20 8f 89	jsr $898f			jsr		CopyIndexToReference		; copy it to the reference variable.
.89ed		a0 10		ldy #$10			ldy 	#16 						; get step count again
.89ef		b1 34		lda ($34),y			lda 	(basicStack),y
.89f1		0a		asl a				asl 	a 							; sign bit to carry
.89f2		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.89f4		85 38		sta $38				sta 	zTemp1
.89f6		90 02		bcc $89fa			bcc 	_NCCompRev 					; use if step is +ve
.89f8		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.89fa						_NCCompRev:
.89fa		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.89fc		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.89fe		85 39		sta $39				sta 	zTemp1+1
.8a00		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a02		38		sec				sec
.8a03						_NCCompare:
.8a03		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a05		b1 34		lda ($34),y			lda 	(basicStack),y
.8a07		a4 39		ldy $39				ldy 	zTemp1+1
.8a09		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a0b		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a0d		e6 39		inc $39				inc 	zTemp1+1
.8a0f		ca		dex				dex 								; do it 4 times.
.8a10		d0 f1		bne $8a03			bne 	_NCCompare
.8a12		50 02		bvc $8a16			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a14		49 80		eor #$80			eor 	#$80
.8a16						_NCNoOverflow:
.8a16		7a		ply				ply 								; restore Y position
.8a17		0a		asl a				asl 	a 							; is bit 7 set.
.8a18		90 04		bcc $8a1e			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a1a		20 c0 b4	jsr $b4c0			jsr 	StackClose 					; exit the loop
.8a1d		60		rts				rts
.8a1e						_NCLoopBack:
.8a1e		20 f7 b4	jsr $b4f7			jsr 	STKLoadCodePosition 		; loop back
.8a21		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a22						Command_GOSUB:
.8a22		a2 00		ldx #$00			ldx 	#0
.8a24		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a27		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a29		20 a1 b4	jsr $b4a1			jsr 	StackOpen 					; create frame
.8a2c		20 e6 b4	jsr $b4e6			jsr 	STKSaveCodePosition 		; save current position
.8a2f		4c 45 8a	jmp $8a45			jmp 	GotoStackX
.8a32						Command_RETURN:
.8a32		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a34		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a36		20 ce b4	jsr $b4ce			jsr 	StackCheckFrame
.8a39		20 f7 b4	jsr $b4f7			jsr 	STKLoadCodePosition 		; restore code position
.8a3c		20 c0 b4	jsr $b4c0			jsr 	StackClose
.8a3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a40						GotoCommand:
.8a40		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a42		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger
.8a45						GotoStackX:
.8a45		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a47		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a48		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a4a		fa		plx				plx
.8a4b		20 4d ab	jsr $ab4d			jsr 	MemorySearch 				; transfer to line number AX.
.8a4e		90 05		bcc $8a55			bcc 	_GotoError 					; not found, off end.
.8a50		d0 03		bne $8a55			bne 	_GotoError 					; not found exactly
.8a52		4c f6 8f	jmp $8ff6			jmp 	RunNewLine 					; and go straight to new line code.
.8a55						_GotoError:
.8a55		a9 0d		lda #$0d		lda	#13
.8a57		4c 77 94	jmp $9477		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a5a						IfCommand:
.8a5a		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a5c		20 10 a3	jsr $a310			jsr 	EvaluateNumber
.8a5f		b1 30		lda ($30),y			lda 	(codePtr),y
.8a61		c9 b2		cmp #$b2			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a63		d0 0a		bne $8a6f			bne 	_IfStructured 				; we still support it.
.8a65		c8		iny				iny 								; consume THEN
.8a66		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; is it zero
.8a69		f0 01		beq $8a6c			beq 	_IfFail 					; if fail, go to next line
.8a6b		60		rts				rts 								; if THEN just continue
.8a6c						_IfFail:
.8a6c		4c de 8f	jmp $8fde			jmp 	EOLCommand
.8a6f						_IfStructured:
.8a6f		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; is it zero
.8a72		d0 07		bne $8a7b			bne 	_IfExit 					; if not, then continue normally.
.8a74		a9 be		lda #$be			lda 	#KWD_ELSE 					; look for else/endif
.8a76		a2 af		ldx #$af			ldx 	#KWD_ENDIF
.8a78		20 5f 93	jsr $935f			jsr 	ScanForward 				; and run from there
.8a7b						_IfExit:
.8a7b		60		rts				rts
.8a7c						ElseCode:
.8a7c		a9 af		lda #$af			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8a7e		aa		tax				tax 								; so just go to the structure exit
.8a7f		20 5f 93	jsr $935f			jsr 	ScanForward
.8a82		60		rts				rts
.8a83						EndIf:
.8a83		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8a84						Command_Input:
.8a84		9c 28 04	stz $0428			stz 	isPrintFlag
.8a87		80 0c		bra $8a95			bra 	Command_IP_Main
.8a89						Command_CPrint:
.8a89		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8a8b		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8a8e		80 05		bra $8a95			bra 	Command_IP_Main
.8a90						Command_Print:
.8a90		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8a92		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8a95						Command_IP_Main:
.8a95		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8a96						_CPLoop:
.8a96		08		php				php 								; save last action flag
.8a97		b1 30		lda ($30),y			lda 	(codePtr),y
.8a99		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8a9b		f0 54		beq $8af1			beq 	_CPExit
.8a9d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8a9f		f0 50		beq $8af1			beq 	_CPExit
.8aa1		68		pla				pla 								; throw last action flag
.8aa2		b1 30		lda ($30),y			lda 	(codePtr),y
.8aa4		c8		iny				iny
.8aa5		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8aa7		f0 45		beq $8aee			beq 	_CPContinueWithSameLine
.8aa9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8aab		f0 3c		beq $8ae9			beq 	_CPTab
.8aad		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8aaf		f0 34		beq $8ae5			beq 	_CPNewLine
.8ab1		88		dey				dey 								; undo the get.
.8ab2		20 79 99	jsr $9979			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8ab5		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8ab7		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8ab9		f0 0d		beq $8ac8			beq 	_CPIsValue 					; no, display it.
.8abb		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.8abe		d0 05		bne $8ac5			bne 	_CPIsPrint 					; otherwise display.
.8ac0		20 fa 8a	jsr $8afa			jsr 	CIInputValue 				; input a value to the reference
.8ac3		80 20		bra $8ae5			bra 	_CPNewLine
.8ac5						_CPIsPrint:
.8ac5		20 3e 9c	jsr $9c3e			jsr 	Dereference 				; dereference if required.
.8ac8						_CPIsValue:
.8ac8		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8aca		29 10		and #$10			and 	#NSBIsString
.8acc		f0 09		beq $8ad7			beq 	_CPNumber
.8ace		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8ad0		a5 58		lda $58				lda 	NSMantissa0
.8ad2		20 5d 8b	jsr $8b5d			jsr 	CPPrintStringXA
.8ad5		80 be		bra $8a95			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8ad7						_CPNumber:
.8ad7		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8ad9		20 f7 a1	jsr $a1f7			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8adc		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8ade		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8ae0		20 5d 8b	jsr $8b5d			jsr 	CPPrintStringXA 			; print it.
.8ae3		80 b0		bra $8a95			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8ae5						_CPNewLine:
.8ae5		a9 0d		lda #$0d			lda 	#13
.8ae7		80 02		bra $8aeb			bra 	_CPPrintCharDirect
.8ae9						_CPTab:
.8ae9		a9 09		lda #$09			lda 	#9 							; print TAB
.8aeb						_CPPrintCharDirect:
.8aeb		20 78 8b	jsr $8b78			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8aee						_CPContinueWithSameLine:
.8aee		38		sec				sec 								; loop round with carry set, which
.8aef		80 a5		bra $8a96			bra 	_CPLoop 					; will inhibit final CR
.8af1						_CPExit:
.8af1		28		plp				plp 								; get last action flag
.8af2		b0 05		bcs $8af9			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8af4		a9 0d		lda #$0d			lda 	#13 						; print new line
.8af6		20 78 8b	jsr $8b78			jsr 	CPPVControl
.8af9						_CPExit2:
.8af9		60		rts				rts
.8afa						CIInputValue:
.8afa		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8afc						_CIInputLine:
.8afc		20 7b 8b	jsr $8b7b			jsr 	CPInputVector 				; get key
.8aff		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b01		f0 1f		beq $8b22			beq 	_CIHaveValue
.8b03		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b05		f0 11		beq $8b18			beq 	_CIBackspace
.8b07		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b09		90 f1		bcc $8afc			bcc 	_CIInputLine
.8b0b		e0 50		cpx #$50			cpx 	#80 						; max length
.8b0d		b0 ed		bcs $8afc			bcs 	_CIInputLine
.8b0f		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8b12		e8		inx				inx
.8b13		20 70 8b	jsr $8b70			jsr 	CPPrintVector 				; echo it.
.8b16		80 e4		bra $8afc			bra 	_CIInputLine
.8b18						_CIBackspace:
.8b18		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b1a		f0 e0		beq $8afc			beq 	_CIInputLine
.8b1c		20 70 8b	jsr $8b70			jsr 	CPPrintVector 				; echo it.
.8b1f		ca		dex				dex
.8b20		80 da		bra $8afc			bra 	_CIInputLine
.8b22						_CIHaveValue:
.8b22		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b25		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b27		29 10		and #$10			and 	#NSBIsString
.8b29		f0 17		beq $8b42			beq 	_CIAssignNumber 			; assign a number
.8b2b		a2 01		ldx #$01			ldx 	#1
.8b2d		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b2f		95 58		sta $58,x			sta 	NSMantissa0,x
.8b31		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b33		95 60		sta $60,x			sta 	NSMantissa1,x
.8b35		74 68		stz $68,x			stz 	NSMantissa2,x
.8b37		74 70		stz $70,x			stz 	NSMantissa3,x
.8b39		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b3b		95 50		sta $50,x			sta  	NSStatus,x
.8b3d		ca		dex				dex 								; X = 0
.8b3e		20 b7 8b	jsr $8bb7			jsr 	AssignVariable
.8b41		60		rts				rts
.8b42						_CIAssignNumber:
.8b42		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b44		85 36		sta $36				sta 	zTemp0
.8b46		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b48		85 37		sta $37				sta 	zTemp0+1
.8b4a		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b4c		20 79 a1	jsr $a179			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b4f		90 07		bcc $8b58			bcc 	_CIIsOkay
.8b51		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b53		20 70 8b	jsr $8b70			jsr 	CPPrintVector
.8b56		80 a2		bra $8afa			bra 	CIInputValue
.8b58						_CIIsOkay:
.8b58		ca		dex				dex 								; X = 0
.8b59		20 b7 8b	jsr $8bb7			jsr 	AssignVariable
.8b5c		60		rts				rts
.8b5d						CPPrintStringXA:
.8b5d		5a		phy				phy
.8b5e		86 37		stx $37				stx 	zTemp0+1
.8b60		85 36		sta $36				sta 	zTemp0
.8b62		a0 00		ldy #$00			ldy 	#0
.8b64						_PSXALoop:
.8b64		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b66		f0 06		beq $8b6e			beq 	_PSXAExit
.8b68		20 70 8b	jsr $8b70			jsr 	CPPrintVector
.8b6b		c8		iny				iny
.8b6c		80 f6		bra $8b64			bra 	_PSXALoop
.8b6e						_PSXAExit:
.8b6e		7a		ply				ply
.8b6f		60		rts				rts
.8b70						CPPrintVector:
.8b70		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8b73		30 03		bmi $8b78			bmi 	CPPVControl
.8b75		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8b78						CPPVControl:
.8b78		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8b7b						CPInputVector:
.8b7b		4c 2b 80	jmp $802b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b7e						LetCommand:
.8b7e		a2 00		ldx #$00			ldx 	#0
.8b80		b1 30		lda ($30),y			lda 	(codePtr),y
.8b82		c9 10		cmp #$10			cmp 	#KWD_AT
.8b84		d0 14		bne $8b9a			bne 	_LCStandard
.8b86		c8		iny				iny 								; skip equal
.8b87		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8b8a		20 3e 9c	jsr $9c3e			jsr 	Dereference 				; dereference it to a value
.8b8d		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8b8f		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b91		95 50		sta $50,x			sta 	NSStatus,x
.8b93		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b95		d0 0f		bne $8ba6			bne 	_LCMain
.8b97		4c 4a a5	jmp $a54a			jmp 	TypeError 					; was a reference before.
.8b9a						_LCStandard:
.8b9a		ad 63 99	lda $9963			lda 	PrecedenceLevel+"*"			; precedence > this
.8b9d		20 7d 99	jsr $997d			jsr 	EvaluateExpressionAtPrecedence
.8ba0		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8ba2		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8ba4		f0 0e		beq $8bb4			beq 	_LetGoProc 					; it's a procedure call.
.8ba6						_LCMain:
.8ba6		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8ba8		20 6e 94	jsr $946e			jsr 	CheckNextA
.8bab		e8		inx				inx 								; RHS
.8bac		20 07 a3	jsr $a307			jsr 	EvaluateValue
.8baf		ca		dex				dex
.8bb0		20 b7 8b	jsr $8bb7			jsr 	AssignVariable
.8bb3		60		rts				rts
.8bb4						_LetGoProc:
.8bb4		4c b4 8e	jmp $8eb4			jmp 	CallProcedure
.8bb7						AssignVariable:
.8bb7		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bb9		48		pha				pha 								; save a copy
.8bba		55 51		eor $51,x			eor 	NSStatus+1,x
.8bbc		29 10		and #$10			and 	#NSBIsString
.8bbe		d0 0b		bne $8bcb			bne 	_ASError
.8bc0		68		pla				pla 								; get back
.8bc1		29 10		and #$10			and 	#NSBIsString 				; check type
.8bc3		d0 03		bne $8bc8			bne 	_ASString
.8bc5		4c 7c 9b	jmp $9b7c			jmp 	AssignNumber
.8bc8						_ASString:
.8bc8		4c da 9b	jmp $9bda			jmp 	AssignString
.8bcb						_ASError:
.8bcb		4c 4a a5	jmp $a54a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bce						Command_List:
.8bce		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8bd1		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8bd3		20 3f 80	jsr $803f			jsr 	SNDCommand
.8bd6		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd8		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8bda		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8bdc		f0 72		beq $8c50			beq 	_CLListProcedure
.8bde		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8be0		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8be2		a9 ff		lda #$ff			lda 	#$FF
.8be4		85 5f		sta $5f				sta 	NSMantissa0+7
.8be6		85 67		sta $67				sta 	NSMantissa1+7
.8be8		b1 30		lda ($30),y			lda 	(codePtr),y
.8bea		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bec		f0 1a		beq $8c08			beq 	_CLSecond
.8bee		20 cd 8c	jsr $8ccd			jsr 	CLIsDigit 					; if not digit, list all
.8bf1		b0 20		bcs $8c13			bcs 	_CLStart
.8bf3		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8bf5		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger
.8bf8		b1 30		lda ($30),y			lda 	(codePtr),y
.8bfa		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bfc		f0 0a		beq $8c08			beq 	_CLSecond 					; if so go get it
.8bfe		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c00		85 5f		sta $5f				sta 	NSMantissa0+7
.8c02		a5 64		lda $64				lda 	NSMantissa1+4
.8c04		85 67		sta $67				sta 	NSMantissa1+7
.8c06		80 0b		bra $8c13			bra 	_CLStart
.8c08						_CLSecond:
.8c08		c8		iny				iny 								; consume comma
.8c09		20 cd 8c	jsr $8ccd			jsr 	CLIsDigit 					; digit found
.8c0c		b0 05		bcs $8c13			bcs 	_CLStart 					; if not, continue listing
.8c0e		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c10		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger
.8c13						_CLStart
.8c13		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c15		85 30		sta $30				sta 	codePtr
.8c17		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c19		85 31		sta $31				sta 	codePtr+1
.8c1b						_CLLoop:
.8c1b		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c1d		f0 03		beq $8c22			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c1f		20 f1 80	jsr $80f1			jsr 	ProcessEvents
.8c22						_NoEvents:
.8c22		d0 27		bne $8c4b			bne 	_CLBreak
.8c24		b2 30		lda ($30)			lda 	(codePtr)
.8c26		f0 20		beq $8c48			beq 	_CLExit
.8c28		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c2a		20 bc 8c	jsr $8cbc			jsr 	CLCompareLineNo
.8c2d		90 0c		bcc $8c3b			bcc 	_CLNext
.8c2f		a2 07		ldx #$07			ldx 	#7
.8c31		20 bc 8c	jsr $8cbc			jsr 	CLCompareLineNo
.8c34		f0 02		beq $8c38			beq 	_CLDoThisOne
.8c36		b0 03		bcs $8c3b			bcs 	_CLNext
.8c38						_CLDoThisOne:
.8c38		20 a9 8c	jsr $8ca9			jsr 	CLListOneLine 				; routine to list the current line.
.8c3b						_CLNext:
.8c3b		18		clc				clc
.8c3c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c3e		65 30		adc $30				adc 	codePtr
.8c40		85 30		sta $30				sta 	codePtr
.8c42		90 02		bcc $8c46			bcc 	_CREExit
.8c44		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c46						_CREExit:
.8c46		80 d3		bra $8c1b			bra 	_CLLoop
.8c48						_CLExit:
.8c48		4c b1 85	jmp $85b1			jmp 	WarmStart
.8c4b						_CLBreak:
.8c4b		a9 01		lda #$01		lda	#1
.8c4d		4c 77 94	jmp $9477		jmp	ErrorHandler
.8c50						_CLListProcedure:
.8c50		b1 30		lda ($30),y			lda 	(codePtr),y
.8c52		85 38		sta $38				sta 	zTemp1
.8c54		c8		iny				iny
.8c55		b1 30		lda ($30),y			lda 	(codePtr),y
.8c57		85 39		sta $39				sta 	zTemp1+1
.8c59		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c5b		85 30		sta $30				sta 	codePtr
.8c5d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c5f		85 31		sta $31				sta 	codePtr+1
.8c61						_CLLPSearch:
.8c61		b2 30		lda ($30)			lda 	(codePtr)
.8c63		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c65		f0 e1		beq $8c48			beq 	_CLExit
.8c67		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c69		b1 30		lda ($30),y			lda 	(codePtr),y
.8c6b		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.8c6d		d0 0e		bne $8c7d			bne 	_CLLPNext
.8c6f		c8		iny				iny 								; check if PROC this.
.8c70		b1 30		lda ($30),y			lda 	(codePtr),y
.8c72		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8c74		d0 07		bne $8c7d			bne 	_CLLPNext
.8c76		c8		iny				iny
.8c77		b1 30		lda ($30),y			lda 	(codePtr),y
.8c79		c5 39		cmp $39				cmp 	zTemp1+1
.8c7b		f0 0d		beq $8c8a			beq 	_CLLPFound
.8c7d						_CLLPNext:
.8c7d		18		clc				clc
.8c7e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c80		65 30		adc $30				adc 	codePtr
.8c82		85 30		sta $30				sta 	codePtr
.8c84		90 02		bcc $8c88			bcc 	_CREExit
.8c86		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c88						_CREExit:
.8c88		80 d7		bra $8c61			bra 	_CLLPSearch
.8c8a						_CLLPFound:
.8c8a		b2 30		lda ($30)			lda 	(codePtr)
.8c8c		f0 ba		beq $8c48			beq 	_CLExit
.8c8e		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8c90		b1 30		lda ($30),y			lda 	(codePtr),y
.8c92		48		pha				pha
.8c93		20 a9 8c	jsr $8ca9			jsr 	CLListOneLine 				; list line and go forward
.8c96		18		clc				clc
.8c97		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c99		65 30		adc $30				adc 	codePtr
.8c9b		85 30		sta $30				sta 	codePtr
.8c9d		90 02		bcc $8ca1			bcc 	_CREExit
.8c9f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ca1						_CREExit:
.8ca1		68		pla				pla 								; reached ENDPROC ?
.8ca2		c9 b0		cmp #$b0			cmp 	#KWD_ENDPROC
.8ca4		d0 e4		bne $8c8a			bne 	_CLLPFound
.8ca6		4c b1 85	jmp $85b1			jmp 	WarmStart
.8ca9						CLListOneLine:
.8ca9		20 c2 93	jsr $93c2			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8cac		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.8caf		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8cb1		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8cb3		20 d0 94	jsr $94d0			jsr 	PrintStringXA
.8cb6		a9 0d		lda #$0d			lda 	#13 						; new line
.8cb8		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8cbb		60		rts				rts
.8cbc						CLCompareLineNo:
.8cbc		38		sec				sec
.8cbd		a0 01		ldy #$01			ldy 	#1
.8cbf		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc1		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8cc3		85 36		sta $36				sta 	zTemp0
.8cc5		c8		iny				iny
.8cc6		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc8		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8cca		05 36		ora $36				ora 	zTemp0
.8ccc		60		rts				rts
.8ccd						CLIsDigit:
.8ccd		b1 30		lda ($30),y			lda 	(codePtr),y
.8ccf		c9 30		cmp #$30			cmp 	#"0"
.8cd1		90 03		bcc $8cd6			bcc	 	_CLIDExitFalse
.8cd3		c9 3a		cmp #$3a			cmp 	#"9"+1
.8cd5		60		rts				rts
.8cd6						_CLIDExitFalse:
.8cd6		38		sec				sec
.8cd7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8cd8						Command_Load:
.8cd8		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; file name to load
.8cdb		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8cdd		a5 36		lda $36				lda 	zTemp0
.8cdf		20 4e 81	jsr $814e			jsr 	KNLOpenFileRead 			; open file for reading
.8ce2		b0 44		bcs $8d28			bcs 	CLErrorHandler 				; error, so fail.
.8ce4		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.8ce7		20 78 8d	jsr $8d78			jsr     LoadReadByteInit            ; Init reader with the stream
.8cea		20 6d 8e	jsr $8e6d			jsr 	NewProgram 					; does the actual NEW.
.8ced		9c 70 07	stz $0770			stz 	LoadEOFFlag 				; clear EOF Flag.
.8cf0						_CLLoop:
.8cf0		20 36 8d	jsr $8d36			jsr 	LoadReadLine 				; get next line.
.8cf3		f0 10		beq $8d05			beq 	_CLExit 					; end, exit.
.8cf5		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8cf8		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8cfb		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8cfe		f0 f0		beq $8cf0			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8d00		20 8c 85	jsr $858c			jsr 	EditProgramCode 			; do the editing etc.
.8d03		80 eb		bra $8cf0			bra 	_CLLoop
.8d05						_CLExit:
.8d05		ad 71 07	lda $0771			lda 	BasicFileStream
.8d08		20 12 82	jsr $8212			jsr 	KNLCloseFile
.8d0b						CLComplete:
.8d0b		a9 15		lda #$15			lda 	#_CLCMsg & $FF
.8d0d		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d0f		20 d0 94	jsr $94d0			jsr 	PrintStringXA
.8d12		4c b1 85	jmp $85b1			jmp 	WarmStart
.8d15						_CLCMsg:
>8d15		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d1d		2e 0d 00
.8d20						CLCloseError:
.8d20		48		pha				pha
.8d21		ad 71 07	lda $0771			lda 	BasicFileStream
.8d24		20 12 82	jsr $8212			jsr 	KNLCloseFile
.8d27		68		pla				pla
.8d28						CLErrorHandler:
.8d28		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d2a		f0 05		beq $8d31			beq 	_CLEHNotFound
.8d2c		a9 1a		lda #$1a		lda	#26
.8d2e		4c 77 94	jmp $9477		jmp	ErrorHandler
.8d31						_CLEHNotFound:
.8d31		a9 19		lda #$19		lda	#25
.8d33		4c 77 94	jmp $9477		jmp	ErrorHandler
.8d36						LoadReadLine:
.8d36		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8d38		20 52 8d	jsr $8d52			jsr 	LoadReadCharacter
.8d3b		f0 14		beq $8d51			beq 	_LRLExit 					; eof ?
.8d3d		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8d3f		90 f5		bcc $8d36			bcc 	LoadReadLine
.8d41						_LRLLoop:
.8d41		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8d44		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8d47		e8		inx				inx
.8d48		20 52 8d	jsr $8d52			jsr 	LoadReadCharacter 			; next line
.8d4b		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8d4d		b0 f2		bcs $8d41			bcs 	_LRLLoop
.8d4f		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8d51						_LRLExit:
.8d51		60		rts				rts
.8d52						LoadReadCharacter:
.8d52		da		phx				phx
.8d53		5a		phy				phy
.8d54		ad 70 07	lda $0770			lda 	LoadEOFFlag 				; already done EOF.
.8d57		d0 0c		bne $8d65			bne 	_LRCIsEOF
.8d59		20 82 8d	jsr $8d82			jsr 	LoadReadByte 				; read a byte
.8d5c		90 09		bcc $8d67			bcc		_LRCExit 					; read okay.
.8d5e		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8d60		d0 be		bne $8d20			bne 	CLCloseError
.8d62		ce 70 07	dec $0770			dec 	LoadEOFFlag
.8d65						_LRCIsEOF:
.8d65		a9 00		lda #$00			lda 	#0
.8d67						_LRCExit:
.8d67		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8d69		d0 02		bne $8d6d			bne 	_LRCNotTab
.8d6b		a9 20		lda #$20			lda 	#' '
.8d6d						_LRCNotTab:
.8d6d		c9 0a		cmp #$0a			cmp 	#$0A
.8d6f		d0 02		bne $8d73			bne 	_LRCNotLF
.8d71		a9 0d		lda #$0d			lda 	#$0D
.8d73						_LRCNotLF:
.8d73		7a		ply				ply
.8d74		fa		plx				plx
.8d75		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8d77		60		rts				rts
.8d78						LoadReadByteInit:
.8d78		8d 72 07	sta $0772			sta     LoadFileStream 				; save stream
.8d7b		9c 73 07	stz $0773			stz     LoadNextCharacter 			; reset buffer
.8d7e		9c 74 07	stz $0774			stz     LoadEndCharacter
.8d81		60		rts				rts
.8d82						LoadReadByte:
.8d82		da		phx				phx
.8d83		ae 73 07	ldx $0773			ldx     LoadNextCharacter 					; all data consumed ?
.8d86		ec 74 07	cpx $0774			cpx     LoadEndCharacter
.8d89		d0 12		bne $8d9d			bne     _KNLRBGetNextByte
.8d8b		ad 72 07	lda $0772			lda     LoadFileStream
.8d8e		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8d90		20 9d 81	jsr $819d			jsr     KNLReadBlock 				; read next chunk from the stream
.8d93		b0 0f		bcs $8da4			bcs     _KNLRBError 				; error has occurred on read.
.8d95		8d 74 07	sta $0774			sta     LoadEndCharacter 						; # read is the number available
.8d98		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8d9a		8e 73 07	stx $0773			stx     LoadNextCharacter
.8d9d						_KNLRBGetNextByte:
.8d9d		bd 62 06	lda $0662,x			lda     KNLReadBuffer,x 			; get the next data item
.8da0		ee 73 07	inc $0773			inc     LoadNextCharacter 					; and advance the index
.8da3		18		clc				clc 								; succeeded
.8da4						_KNLRBError:
.8da4		fa		plx				plx
.8da5		60		rts				rts
.0770						LoadEOFFlag:
>0770								.fill 	1
.0771						BasicFileStream:
>0771								.fill 	1
.0772						LoadFileStream:
>0772								.byte   ?
.0773						LoadNextCharacter:
>0773								.byte   ?
.0774						LoadEndCharacter:
>0774								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8da6						Command_LOCAL:
.8da6		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8da8		20 b4 8d	jsr $8db4			jsr 	LocaliseNextTerm 			; convert term to a local.
.8dab		b1 30		lda ($30),y			lda 	(codePtr),y
.8dad		c8		iny				iny
.8dae		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8db0		f0 f4		beq $8da6			beq 	Command_LOCAL 				; if so, localise another variable.
.8db2		88		dey				dey 								; unpick pre-get
.8db3		60		rts				rts
.8db4						LocaliseNextTerm:
.8db4		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm 				; evaluate the term
.8db7		b5 50		lda $50,x			lda 	NSStatus,x
.8db9		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8dbb		f0 5c		beq $8e19			beq		_LNTError
.8dbd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8dbf		85 36		sta $36				sta 	zTemp0
.8dc1		b5 60		lda $60,x			lda 	NSMantissa1,x
.8dc3		85 37		sta $37				sta  	zTemp0+1
.8dc5		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8dc7		29 10		and #$10			and 	#NSBIsString
.8dc9		d0 1e		bne $8de9			bne 	_LNTPushString
.8dcb		5a		phy				phy
.8dcc		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8dce						_LNTPushNumLoop:
.8dce		b1 36		lda ($36),y			lda		(zTemp0),y
.8dd0		20 80 b4	jsr $b480			jsr 	StackPushByte
.8dd3		c8		iny				iny
.8dd4		c0 05		cpy #$05			cpy 	#5
.8dd6		d0 f6		bne $8dce			bne 	_LNTPushNumLoop
.8dd8		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8dda		20 80 b4	jsr $b480			jsr 	StackPushByte
.8ddd		a5 37		lda $37				lda 	zTemp0+1
.8ddf		20 80 b4	jsr $b480			jsr 	StackPushByte
.8de2		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8de4		20 80 b4	jsr $b480			jsr 	StackPushByte
.8de7		7a		ply				ply
.8de8		60		rts				rts
.8de9						_LNTPushString:
.8de9		5a		phy				phy
.8dea		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8dec		85 38		sta $38				sta 	zTemp1
.8dee		a0 01		ldy #$01			ldy 	#1
.8df0		b1 36		lda ($36),y			lda 	(zTemp0),y
.8df2		85 39		sta $39				sta 	zTemp1+1
.8df4		a0 00		ldy #$00			ldy 	#0 							; output string
.8df6		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8df8		f0 0a		beq $8e04			beq 	_LNTStringOut
.8dfa						_LNTPushStrLoop:
.8dfa		b1 38		lda ($38),y			lda 	(zTemp1),y
.8dfc		f0 06		beq $8e04			beq 	_LNTStringOut
.8dfe		20 80 b4	jsr $b480			jsr 	StackPushByte
.8e01		c8		iny				iny
.8e02		80 f6		bra $8dfa			bra 	_LNTPushStrLoop
.8e04						_LNTStringOut:
.8e04		98		tya				tya									; output length (chars written).
.8e05		20 80 b4	jsr $b480			jsr 	StackPushByte
.8e08		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e0a		20 80 b4	jsr $b480			jsr 	StackPushByte
.8e0d		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e0f		20 80 b4	jsr $b480			jsr 	StackPushByte
.8e12		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e14		20 80 b4	jsr $b480			jsr 	StackPushByte
.8e17		7a		ply				ply
.8e18		60		rts				rts
.8e19						_LNTError:
.8e19		4c 40 a5	jmp $a540			jmp 	SyntaxError
.8e1c						LocalPopValue:
.8e1c		20 98 b4	jsr $b498			jsr 	StackPopByte
.8e1f		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e21		d0 17		bne $8e3a			bne 	_LPVString
.8e23		20 98 b4	jsr $b498			jsr 	StackPopByte 				; address
.8e26		85 37		sta $37				sta 	zTemp0+1
.8e28		20 98 b4	jsr $b498			jsr 	StackPopByte
.8e2b		85 36		sta $36				sta 	zTemp0
.8e2d		5a		phy				phy
.8e2e		a0 04		ldy #$04			ldy 	#4 							; copy back
.8e30						_LPVNumberCopy:
.8e30		20 98 b4	jsr $b498			jsr 	StackPopByte
.8e33		91 36		sta ($36),y			sta 	(zTemp0),y
.8e35		88		dey				dey
.8e36		10 f8		bpl $8e30			bpl 	_LPVNumberCopy
.8e38		7a		ply				ply 								; and complete
.8e39		60		rts				rts
.8e3a						_LPVString:
.8e3a		20 98 b4	jsr $b498			jsr 	StackPopByte 				; address of record copied to zTemp0
.8e3d		85 37		sta $37				sta 	zTemp0+1
.8e3f		20 98 b4	jsr $b498			jsr 	StackPopByte
.8e42		85 36		sta $36				sta 	zTemp0
.8e44		5a		phy				phy
.8e45		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8e47		85 38		sta $38				sta 	zTemp1
.8e49		a0 01		ldy #$01			ldy 	#1
.8e4b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e4d		85 39		sta $39				sta 	zTemp1+1
.8e4f		20 98 b4	jsr $b498			jsr 	StackPopByte 				; # chars to get => y
.8e52		a8		tay				tay
.8e53		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8e55		f0 0e		beq $8e65			beq 	_LPVStringCopied
.8e57		a9 00		lda #$00			lda 	#0 							; NULL on end
.8e59		91 38		sta ($38),y			sta 	(zTemp1),y
.8e5b						_LPVStringCopy:
.8e5b		88		dey				dey
.8e5c		30 07		bmi $8e65			bmi 	_LPVStringCopied
.8e5e		20 98 b4	jsr $b498			jsr 	StackPopByte
.8e61		91 38		sta ($38),y			sta 	(zTemp1),y
.8e63		80 f6		bra $8e5b			bra 	_LPVStringCopy
.8e65						_LPVStringCopied:
.8e65		fa		plx				plx
.8e66		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e67						NewCommand:
.8e67		20 6d 8e	jsr $8e6d			jsr 	NewProgram 					; does the actual NEW.
.8e6a		4c b1 85	jmp $85b1			jmp 	WarmStart 					; and warm starts straight away.
.8e6d						NewProgram:
.8e6d		20 2f ab	jsr $ab2f			jsr 	MemoryNew
.8e70		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e73		20 69 87	jsr $8769			jsr 	ClearCommand 				; clear everything.
.8e76		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8e77						PokeBCommand:
.8e77		a9 01		lda #$01			lda 	#1
.8e79		80 0c		bra $8e87			bra 	PokeCommand
.8e7b						PokeWCommand:
.8e7b		a9 02		lda #$02			lda 	#2
.8e7d		80 08		bra $8e87			bra 	PokeCommand
.8e7f						PokeLCommand:
.8e7f		a9 03		lda #$03			lda 	#3
.8e81		80 04		bra $8e87			bra 	PokeCommand
.8e83						PokeDCommand:
.8e83		a9 04		lda #$04			lda 	#4
.8e85		80 00		bra $8e87			bra 	PokeCommand
.8e87						PokeCommand:
.8e87		48		pha				pha 								; save count on stack
.8e88		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e8a		20 42 a3	jsr $a342			jsr		Evaluate16BitInteger 		; address
.8e8d		20 66 94	jsr $9466			jsr 	CheckComma
.8e90		e8		inx				inx
.8e91		20 2f a3	jsr $a32f			jsr		EvaluateInteger 			; data
.8e94		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8e96		85 36		sta $36				sta 	zTemp0
.8e98		a5 60		lda $60				lda 	NSMantissa1
.8e9a		85 37		sta $37				sta 	zTemp0+1
.8e9c		68		pla				pla 								; count -> zTemp1
.8e9d		85 38		sta $38				sta 	zTemp1
.8e9f		5a		phy				phy 								; save Y position.
.8ea0		a0 00		ldy #$00			ldy 	#0 							; index to write
.8ea2		a2 00		ldx #$00			ldx 	#0 							; index to read
.8ea4						_PCLoop:
.8ea4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8ea6		91 36		sta ($36),y			sta 	(zTemp0),y
.8ea8		c8		iny				iny 								; next byte to write
.8ea9		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8eaa		18		clc				clc
.8eab		69 08		adc #$08			adc 	#MathStackSize
.8ead		aa		tax				tax
.8eae		c6 38		dec $38				dec 	zTemp1 						; done them all
.8eb0		d0 f2		bne $8ea4			bne 	_PCLoop
.8eb2		7a		ply				ply 								; restore position.
.8eb3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8eb4						CallProcedure:
.8eb4		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8eb6		b1 30		lda ($30),y			lda 	(codePtr),y
.8eb8		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8eba		f0 0c		beq $8ec8			beq 	_CPEndParam
.8ebc						_CPParamLoop:
.8ebc		20 07 a3	jsr $a307			jsr 	EvaluateValue 				; get parameter onto stack
.8ebf		e8		inx				inx 								; bump next stack
.8ec0		b1 30		lda ($30),y			lda 	(codePtr),y
.8ec2		c8		iny				iny
.8ec3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8ec5		f0 f5		beq $8ebc			beq 	_CPParamLoop
.8ec7		88		dey				dey 								; unpick.
.8ec8						_CPEndParam:
.8ec8		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8ecb		c8		iny				iny									; skip right bracket
.8ecc		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8ece		20 a1 b4	jsr $b4a1			jsr 	StackOpen
.8ed1		20 e6 b4	jsr $b4e6			jsr 	STKSaveCodePosition 		; save loop position
.8ed4		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8ed6		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8ed8		a5 60		lda $60				lda 	NSMantissa1
.8eda		85 37		sta $37				sta 	zTemp0+1
.8edc		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8ede		b2 36		lda ($36)			lda 	(zTemp0)
.8ee0		85 30		sta $30				sta 	safePtr
.8ee2		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ee4		85 31		sta $31				sta 	safePtr+1
.8ee6		c8		iny				iny
.8ee7		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ee9		85 32		sta $32				sta 	safePtr+2
.8eeb		c8		iny				iny
.8eec		b1 36		lda ($36),y			lda 	(zTemp0),y
.8eee		85 33		sta $33				sta 	safePtr+3
.8ef0		c8		iny				iny 								; get Y offset -> Y
.8ef1		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ef3		a8		tay				tay
.8ef4		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8ef6		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8ef9		f0 13		beq $8f0e			beq 	_ParamExit 					; if so, exit.
.8efb						_ParamExtract:
.8efb		ca		dex				dex 								; put a local term on the level before
.8efc		20 b4 8d	jsr $8db4			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8eff		20 b7 8b	jsr $8bb7			jsr 	AssignVariable 				; assign stacked value to the variable.
.8f02		e8		inx				inx 								; advance to next parameter to do.
.8f03		e8		inx				inx
.8f04		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8f07		f0 05		beq $8f0e			beq 	_ParamExit
.8f09		20 66 94	jsr $9466			jsr 	CheckComma 					; comma seperating parameters
.8f0c		80 ed		bra $8efb			bra 	_ParamExtract
.8f0e						_ParamExit:
.8f0e		20 5e 94	jsr $945e			jsr 	CheckRightBracket 			; check )
.8f11		60		rts				rts 								; and continue from here
.8f12						Command_ENDPROC:
.8f12		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8f14		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8f16		20 ce b4	jsr $b4ce			jsr 	StackCheckFrame
.8f19		20 f7 b4	jsr $b4f7			jsr 	STKLoadCodePosition 		; restore code position
.8f1c		20 c0 b4	jsr $b4c0			jsr 	StackClose
.8f1f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8f20						Command_Read:
.8f20		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8f22		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm
.8f25		b5 50		lda $50,x			lda 	NSStatus,x
.8f27		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8f29		f0 4f		beq $8f7a			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8f2b		20 c3 8f	jsr $8fc3			jsr 	SwapDataCodePtrs 			; swap code and data
.8f2e		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8f31		d0 25		bne $8f58			bne 	_CRContinueData  			; forward for the next one.
.8f33		b2 30		lda ($30)			lda 	(codePtr)
.8f35		f0 1c		beq $8f53			beq 	_CRNoData
.8f37						_CRKeepSearching:
.8f37		a9 bb		lda #$bb			lda 	#KWD_DATA 					; scan for instruction
.8f39		a2 80		ldx #$80			ldx 	#KWC_EOL
.8f3b		20 5f 93	jsr $935f			jsr 	ScanForward
.8f3e		c9 bb		cmp #$bb			cmp 	#KWD_DATA 					; found data ?
.8f40		f0 16		beq $8f58			beq 	_CRHaveData 				; found it
.8f42		18		clc				clc
.8f43		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f45		65 30		adc $30				adc 	codePtr
.8f47		85 30		sta $30				sta 	codePtr
.8f49		90 02		bcc $8f4d			bcc 	_CREExit
.8f4b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f4d						_CREExit:
.8f4d		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f4f		b2 30		lda ($30)			lda 	(codePtr)
.8f51		d0 e4		bne $8f37			bne 	_CRKeepSearching
.8f53						_CRNoData:
.8f53		a9 0b		lda #$0b		lda	#11
.8f55		4c 77 94	jmp $9477		jmp	ErrorHandler
.8f58						_CRHaveData:
.8f58						_CRContinueData:
.8f58		a2 01		ldx #$01			ldx 	#1
.8f5a		20 07 a3	jsr $a307			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8f5d		ca		dex				dex
.8f5e		20 b7 8b	jsr $8bb7			jsr		AssignVariable 				; do the assignment
.8f61		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8f64		b1 30		lda ($30),y			lda 	(codePtr),y
.8f66		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8f68		d0 04		bne $8f6e			bne 	_CRSwapBack
.8f6a		c8		iny				iny 								; consume comma
.8f6b		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8f6e						_CRSwapBack:
.8f6e		20 c3 8f	jsr $8fc3			jsr 	SwapDataCodePtrs			; swap them back.
.8f71		b1 30		lda ($30),y			lda 	(codePtr),y
.8f73		c8		iny				iny
.8f74		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f76		f0 a8		beq $8f20			beq 	Command_Read 				; if so go round again.
.8f78		88		dey				dey 								; unpick get.
.8f79		60		rts				rts
.8f7a						_CRSyntax:
.8f7a		4c 40 a5	jmp $a540			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f7d						RemCommand:
.8f7d		b1 30		lda ($30),y			lda 	(codePtr),y
.8f7f		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8f81		d0 06		bne $8f89			bne 	_RMExit
.8f83		c8		iny				iny 								; point to offset
.8f84		98		tya				tya 								; A = offset position
.8f85		38		sec				sec 								; add size +1 hence SEC
.8f86		71 30		adc ($30),y			adc 	(codePtr),y
.8f88		a8		tay				tay 								; make current position.
.8f89						_RMExit:
.8f89		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f8a						Command_REPEAT:
.8f8a		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f8c		20 a1 b4	jsr $b4a1			jsr 	StackOpen
.8f8f		20 e6 b4	jsr $b4e6			jsr 	STKSaveCodePosition 		; save loop position
.8f92		60		rts				rts
.8f93						Command_UNTIL:
.8f93		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f95		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f97		20 ce b4	jsr $b4ce			jsr 	StackCheckFrame
.8f9a		a2 00		ldx #$00			ldx 	#0
.8f9c		20 10 a3	jsr $a310			jsr 	EvaluateNumber 				; work out the number
.8f9f		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; check if zero
.8fa2		f0 04		beq $8fa8			beq 	_CULoopBack 				; if so keep looping
.8fa4		20 c0 b4	jsr $b4c0			jsr 	StackClose		 			; return
.8fa7		60		rts				rts
.8fa8						_CULoopBack:
.8fa8		20 f7 b4	jsr $b4f7			jsr 	STKLoadCodePosition 		; loop back
.8fab		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8fac						Command_Restore:
.8fac		20 c3 8f	jsr $8fc3			jsr 	SwapDataCodePtrs 			; swap code and data
.8faf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fb1		85 30		sta $30				sta 	codePtr
.8fb3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fb5		85 31		sta $31				sta 	codePtr+1
.8fb7		20 c3 8f	jsr $8fc3			jsr 	SwapDataCodePtrs 			; put them back
.8fba		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8fbc		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8fbf		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8fc2		60		rts				rts
.8fc3						SwapDataCodePtrs:
.8fc3		da		phx				phx
.8fc4		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8fc6						_SDCPLoop:
.8fc6		b5 30		lda $30,x			lda 	safePtr,x
.8fc8		48		pha				pha
.8fc9		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8fcc		95 30		sta $30,x			sta 	safePtr,x
.8fce		68		pla				pla
.8fcf		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8fd2		ca		dex				dex
.8fd3		10 f1		bpl $8fc6			bpl 	_SDCPLoop
.8fd5		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8fd8		8c 1b 04	sty $041b			sty 	dataPointer+4
.8fdb		a8		tay				tay
.8fdc		fa		plx				plx
.8fdd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8fde						EOLCommand:
.8fde		18		clc				clc
.8fdf		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fe1		65 30		adc $30				adc 	codePtr
.8fe3		85 30		sta $30				sta 	codePtr
.8fe5		90 02		bcc $8fe9			bcc 	_CREExit
.8fe7		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fe9						_CREExit:
.8fe9		80 0b		bra $8ff6			bra 	RunNewLine
.8feb						CommandRUN:
.8feb		20 69 87	jsr $8769			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8fee		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ff0		85 30		sta $30				sta 	codePtr
.8ff2		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ff4		85 31		sta $31				sta 	codePtr+1
.8ff6						RunNewLine:
.8ff6		b2 30		lda ($30)			lda 	(codePtr)
.8ff8		f0 74		beq $906e			beq 	CRNoProgram         		; no then END.
.8ffa		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8ffc		9a		txs				txs
.8ffd						RUNCodePointerLine:
.8ffd		a0 02		ldy #$02			ldy 	#2 							; start of program
.8fff						_CRIncMainLoop:
.8fff		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.9001		f0 03		beq $9006			beq 	_NoEvents					; if zero, skip with Z flag set.
.9003		20 f1 80	jsr $80f1			jsr 	ProcessEvents
.9006						_NoEvents:
.9006		d0 61		bne $9069			bne 	_CRBreak
.9008		a5 01		lda $01				lda 	1 							; save I/O 0
.900a		48		pha				pha
.900b		64 01		stz $01				stz 	1 							; access I/O Page 0
.900d		38		sec				sec 								; calculate timer - LastTick
.900e		ad 59 d6	lda $d659			lda 	$D659
.9011		cd 75 07	cmp $0775			cmp 	LastTick
.9014		f0 06		beq $901c			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9016		8d 75 07	sta $0775			sta 	LastTick 					; update last timer
.9019		20 ed a3	jsr $a3ed			jsr 	TickHandler 							; go do the code.
.901c						_NoFireTick:
.901c		68		pla				pla 								; restore I/O 0
.901d		85 01		sta $01				sta 	1
.901f						_CRNoBreakCheck:
.901f		c8		iny				iny									; next token
.9020						_CRMainLoop:
.9020		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9023		b1 30		lda ($30),y			lda 	(codePtr),y
.9025		10 10		bpl $9037			bpl 	_CRNotKeyword				; not a token.
.9027		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9029		b0 04		bcs $902f			bcs 	_CRIsKeyword
.902b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.902d		b0 34		bcs $9063			bcs		_CRSyntaxError
.902f						_CRIsKeyword:
.902f		c8		iny				iny 								; consume command
.9030		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9031		aa		tax				tax 								; put in X for vector jump
.9032		20 66 90	jsr $9066			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9035		80 e9		bra $9020			bra 	_CRMainLoop 				; and loop round
.9037						_CRNotKeyword:
.9037		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9039		f0 c4		beq $8fff			beq 	_CRIncMainLoop
.903b		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.903d		90 05		bcc $9044			bcc 	_CRNotVariable
.903f						_CRGoLet:
.903f		20 7e 8b	jsr $8b7e			jsr 	LetCommand
.9042		80 dc		bra $9020			bra 	_CRMainLoop
.9044						_CRNotVariable:
.9044		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9046		f0 f7		beq $903f			beq 	_CRGoLet
.9048		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.904a		f0 f3		beq $903f			beq 	_CRGoLet
.904c		c9 21		cmp #$21			cmp 	#KWD_PLING
.904e		f0 ef		beq $903f			beq 	_CRGoLet
.9050		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9052		f0 09		beq $905d			beq 	_CRGoRem
.9054		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9056		d0 0b		bne $9063			bne 	_CRSyntaxError
.9058		20 23 84	jsr $8423			jsr 	LabelHere
.905b		80 c3		bra $9020			bra 	_CRMainLoop
.905d						_CRGoRem:
.905d		c8		iny				iny
.905e		20 7d 8f	jsr $8f7d			jsr 	RemCommand
.9061		80 bd		bra $9020			bra 	_CRMainLoop
.9063						_CRSyntaxError:
.9063		4c 40 a5	jmp $a540			jmp 	SyntaxError
.9066						_CRCallVector0:
.9066		7c 04 91	jmp ($9104,x)			jmp 	(VectorSet0,x)
.9069						_CRBreak:
.9069		a9 01		lda #$01		lda	#1
.906b		4c 77 94	jmp $9477		jmp	ErrorHandler
.906e						CRNoProgram:
.906e		4c 14 89	jmp $8914			jmp 	EndCommand
.9071						Shift1Command:
.9071		b1 30		lda ($30),y			lda 	(codePtr),y
.9073		c8		iny				iny
.9074		0a		asl a				asl 	a
.9075		aa		tax				tax
.9076		7c b2 91	jmp ($91b2,x)			jmp 	(VectorSet1,x)
.9079						Shift2Command:
.9079		b1 30		lda ($30),y			lda 	(codePtr),y
.907b		c8		iny				iny
.907c		0a		asl a				asl 	a
.907d		aa		tax				tax
.907e		7c fc 91	jmp ($91fc,x)			jmp 	(VectorSet2,x)
.9081						Unused1:
.9081						Unused2:
.9081						Unused3:
.9081						Unused4:
.9081		4c 40 a5	jmp $a540			jmp 	SyntaxError
>9084								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9084						VectorSetPunc:
>9084		2f 97					.word	ShiftLeft                        ; $00 <<
>9086		1a 95					.word	BinaryCompareLessEqual           ; $01 <=
>9088		10 95					.word	BinaryCompareNotEqual            ; $02 <>
>908a		40 a5					.word	SyntaxError                      ; $03 !!3
>908c		40 a5					.word	SyntaxError                      ; $04 ><
>908e		24 95					.word	BinaryCompareGreaterEqual        ; $05 >=
>9090		32 97					.word	ShiftRight                       ; $06 >>
>9092		40 a5					.word	SyntaxError                      ; $07 !!7
>9094		40 a5					.word	SyntaxError                      ; $08 !!8
>9096		40 a5					.word	SyntaxError                      ; $09 !!9
>9098		40 a5					.word	SyntaxError                      ; $0a !!10
>909a		40 a5					.word	SyntaxError                      ; $0b !!11
>909c		40 a5					.word	SyntaxError                      ; $0c !!12
>909e		40 a5					.word	SyntaxError                      ; $0d !!13
>90a0		40 a5					.word	SyntaxError                      ; $0e !!14
>90a2		40 a5					.word	SyntaxError                      ; $0f !!15
>90a4		40 a5					.word	SyntaxError                      ; $10 @
>90a6		40 a5					.word	SyntaxError                      ; $11 !!17
>90a8		40 a5					.word	SyntaxError                      ; $12 !!18
>90aa		40 a5					.word	SyntaxError                      ; $13 [
>90ac		db 95					.word	IntegerDivide                    ; $14 \
>90ae		40 a5					.word	SyntaxError                      ; $15 ]
>90b0		6d 98					.word	EorInteger                       ; $16 ^
>90b2		40 a5					.word	SyntaxError                      ; $17 _
>90b4		40 a5					.word	SyntaxError                      ; $18 `
>90b6		40 a5					.word	SyntaxError                      ; $19 !!25
>90b8		40 a5					.word	SyntaxError                      ; $1a !!26
>90ba		40 a5					.word	SyntaxError                      ; $1b {
>90bc		38 98					.word	OraInteger                       ; $1c |
>90be		40 a5					.word	SyntaxError                      ; $1d }
>90c0		40 a5					.word	SyntaxError                      ; $1e ~
>90c2		40 a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>90c4		40 a5					.word	SyntaxError                      ; $20
>90c6		a2 98					.word	WordIndirect                     ; $21 !
>90c8		40 a5					.word	SyntaxError                      ; $22 "
>90ca		40 a5					.word	SyntaxError                      ; $23 #
>90cc		40 a5					.word	SyntaxError                      ; $24 $
>90ce		1c 96					.word	IntegerModulus                   ; $25 %
>90d0		03 98					.word	AndInteger                       ; $26 &
>90d2		40 a5					.word	SyntaxError                      ; $27 '
>90d4		40 a5					.word	SyntaxError                      ; $28 (
>90d6		40 a5					.word	SyntaxError                      ; $29 )
>90d8		8a 96					.word	MulInteger                       ; $2a *
>90da		a5 97					.word	AddInteger                       ; $2b +
>90dc		40 a5					.word	SyntaxError                      ; $2c ,
>90de		de 97					.word	SubInteger                       ; $2d -
>90e0		40 a5					.word	SyntaxError                      ; $2e .
>90e2		5c 9a					.word	FDivideCommand                   ; $2f /
>90e4		40 a5					.word	SyntaxError                      ; $30 0
>90e6		40 a5					.word	SyntaxError                      ; $31 1
>90e8		40 a5					.word	SyntaxError                      ; $32 2
>90ea		40 a5					.word	SyntaxError                      ; $33 3
>90ec		40 a5					.word	SyntaxError                      ; $34 4
>90ee		40 a5					.word	SyntaxError                      ; $35 5
>90f0		40 a5					.word	SyntaxError                      ; $36 6
>90f2		40 a5					.word	SyntaxError                      ; $37 7
>90f4		40 a5					.word	SyntaxError                      ; $38 8
>90f6		40 a5					.word	SyntaxError                      ; $39 9
>90f8		40 a5					.word	SyntaxError                      ; $3a :
>90fa		40 a5					.word	SyntaxError                      ; $3b ;
>90fc		fc 94					.word	BinaryCompareLess                ; $3c <
>90fe		f2 94					.word	BinaryCompareEqual               ; $3d =
>9100		06 95					.word	BinaryCompareGreater             ; $3e >
>9102		c4 98					.word	ByteIndirect                     ; $3f ?
.9104						VectorSet0:
>9104		de 8f					.word	EOLCommand                       ; $80 !0:EOF
>9106		71 90					.word	Shift1Command                    ; $81 !1:SH1
>9108		79 90					.word	Shift2Command                    ; $82 !2:SH2
>910a		46 9f					.word	AbsUnary                         ; $83 ABS(
>910c		54 9f					.word	AllocUnary                       ; $84 ALLOC(
>910e		c4 9f					.word	AscUnary                         ; $85 ASC(
>9110		a8 a1					.word	ChrUnary                         ; $86 CHR$(
>9112		c3 a9					.word	UnaryEvent                       ; $87 EVENT(
>9114		ee 94					.word	UnaryFalse                       ; $88 FALSE
>9116		d1 9f					.word	FracUnary                        ; $89 FRAC(
>9118		63 82					.word	ChrGet                           ; $8a GET$(
>911a		3f 82					.word	AscGet                           ; $8b GET(
>911c		40 a5					.word	SyntaxError                      ; $8c GETDATE$(
>911e		40 a5					.word	SyntaxError                      ; $8d GETTIME$(
>9120		4d a9					.word	UnaryHit                         ; $8e HIT(
>9122		6a 82					.word	ChrInkey                         ; $8f INKEY$(
>9124		58 82					.word	AscInkey                         ; $90 INKEY(
>9126		e6 9f					.word	IntUnary                         ; $91 INT(
>9128		67 a1					.word	IsValUnary                       ; $92 ISVAL(
>912a		47 aa					.word	UnaryJoyB                        ; $93 JOYB(
>912c		20 aa					.word	UnaryJoyX                        ; $94 JOYX(
>912e		23 aa					.word	UnaryJoyY                        ; $95 JOYY(
>9130		7b a2					.word	Unary_Left                       ; $96 LEFT$(
>9132		f7 9f					.word	LenUnary                         ; $97 LEN(
>9134		15 a0					.word	Unary_Max                        ; $98 MAX(
>9136		9d a2					.word	Unary_Mid                        ; $99 MID$(
>9138		11 a0					.word	Unary_Min                        ; $9a MIN(
>913a		60 a0					.word	Unary_Not                        ; $9b NOT(
>913c		73 a0					.word	PeekByteUnary                    ; $9c PEEK(
>913e		7f a0					.word	PeekDUnary                       ; $9d PEEKD(
>9140		7b a0					.word	PeekLUnary                       ; $9e PEEKL(
>9142		77 a0					.word	PeekWUnary                       ; $9f PEEKW(
>9144		fe b3					.word	UnaryPlaying                     ; $a0 PLAYING(
>9146		ac a0					.word	Unary_Random                     ; $a1 RANDOM(
>9148		88 a2					.word	Unary_Right                      ; $a2 RIGHT$(
>914a		c9 a0					.word	Unary_Rnd                        ; $a3 RND(
>914c		3f a1					.word	SgnUnary                         ; $a4 SGN(
>914e		ba a1					.word	SpcUnary                         ; $a5 SPC(
>9150		d5 a1					.word	Unary_Str                        ; $a6 STR$(
>9152		59 aa					.word	UnaryTimer                       ; $a7 TIMER(
>9154		e3 94					.word	UnaryTrue                        ; $a8 TRUE
>9156		5d a1					.word	ValUnary                         ; $a9 VAL(
>9158		17 89					.word	ForCommand                       ; $aa FOR
>915a		5a 8a					.word	IfCommand                        ; $ab IF
>915c		81 90					.word	Unused1                          ; $ac PROC
>915e		8a 8f					.word	Command_REPEAT                   ; $ad REPEAT
>9160		2f 94					.word	Command_WHILE                    ; $ae WHILE
>9162		83 8a					.word	EndIf                            ; $af ENDIF
>9164		12 8f					.word	Command_ENDPROC                  ; $b0 ENDPROC
>9166		c9 89					.word	NextCommand                      ; $b1 NEXT
>9168		81 90					.word	Unused4                          ; $b2 THEN
>916a		93 8f					.word	Command_UNTIL                    ; $b3 UNTIL
>916c		50 94					.word	Command_WEND                     ; $b4 WEND
>916e		40 a5					.word	SyntaxError                      ; $b5 BY
>9170		34 87					.word	CallCommand                      ; $b6 CALL
>9172		01 a7					.word	CircleCommand                    ; $b7 CIRCLE
>9174		69 87					.word	ClearCommand                     ; $b8 CLEAR
>9176		40 a5					.word	SyntaxError                      ; $b9 COLOR
>9178		40 a5					.word	SyntaxError                      ; $ba COLOUR
>917a		cc 87					.word	Command_Data                     ; $bb DATA
>917c		d4 87					.word	DimCommand                       ; $bc DIM
>917e		81 90					.word	Unused3                          ; $bd DOWNTO
>9180		7c 8a					.word	ElseCode                         ; $be ELSE
>9182		40 a5					.word	SyntaxError                      ; $bf FROM
>9184		20 a9					.word	GfxCommand                       ; $c0 GFX
>9186		40 a5					.word	SyntaxError                      ; $c1 HERE
>9188		2a a7					.word	ImageCommand                     ; $c2 IMAGE
>918a		7e 8b					.word	LetCommand                       ; $c3 LET
>918c		7c a7					.word	LineCommand                      ; $c4 LINE
>918e		a6 8d					.word	Command_LOCAL                    ; $c5 LOCAL
>9190		40 a5					.word	SyntaxError                      ; $c6 OFF
>9192		40 a5					.word	SyntaxError                      ; $c7 ON
>9194		40 a5					.word	SyntaxError                      ; $c8 OUTLINE
>9196		71 a9					.word	PaletteCommand                   ; $c9 PALETTE
>9198		75 a7					.word	PlotCommand                      ; $ca PLOT
>919a		77 8e					.word	PokeBCommand                     ; $cb POKE
>919c		83 8e					.word	PokeDCommand                     ; $cc POKED
>919e		7f 8e					.word	PokeLCommand                     ; $cd POKEL
>91a0		7b 8e					.word	PokeWCommand                     ; $ce POKEW
>91a2		20 8f					.word	Command_Read                     ; $cf READ
>91a4		fd a6					.word	RectangleCommand                 ; $d0 RECT
>91a6		7d 8f					.word	RemCommand                       ; $d1 REM
>91a8		40 a5					.word	SyntaxError                      ; $d2 SOLID
>91aa		1a b4					.word	SoundCommand                     ; $d3 SOUND
>91ac		0c a7					.word	SpriteCommand                    ; $d4 SPRITE
>91ae		46 a7					.word	TextCommand                      ; $d5 TEXT
>91b0		81 90					.word	Unused2                          ; $d6 TO
.91b2						VectorSet1:
>91b2		40 a5					.word	SyntaxError                      ; $80 !0:EOF
>91b4		40 a5					.word	SyntaxError                      ; $81 !1:SH1
>91b6		40 a5					.word	SyntaxError                      ; $82 !2:SH2
>91b8		e6 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>91ba		02 86					.word	AssertCommand                    ; $84 ASSERT
>91bc		c0 a8					.word	BitmapCtrl                       ; $85 BITMAP
>91be		12 86					.word	Command_BLoad                    ; $86 BLOAD
>91c0		b2 86					.word	Command_BSave                    ; $87 BSAVE
>91c2		c4 87					.word	ClearScreen                      ; $88 CLS
>91c4		89 8a					.word	Command_CPrint                   ; $89 CPRINT
>91c6		91 88					.word	Command_Dir                      ; $8a DIR
>91c8		0d 89					.word	Command_Drive                    ; $8b DRIVE
>91ca		14 89					.word	EndCommand                       ; $8c END
>91cc		d2 b3					.word	Explode                          ; $8d EXPLODE
>91ce		40 a5					.word	SyntaxError                      ; $8e GO
>91d0		22 8a					.word	Command_GOSUB                    ; $8f GOSUB
>91d2		40 8a					.word	GotoCommand                      ; $90 GOTO
>91d4		40 a5					.word	SyntaxError                      ; $91 HIMEM
>91d6		84 8a					.word	Command_Input                    ; $92 INPUT
>91d8		ce 8b					.word	Command_List                     ; $93 LIST
>91da		d8 8c					.word	Command_Load                     ; $94 LOAD
>91dc		67 8e					.word	NewCommand                       ; $95 NEW
>91de		ae b3					.word	PingCommand                      ; $96 PING
>91e0		90 8a					.word	Command_Print                    ; $97 PRINT
>91e2		ac 8f					.word	Command_Restore                  ; $98 RESTORE
>91e4		32 8a					.word	Command_RETURN                   ; $99 RETURN
>91e6		eb 8f					.word	CommandRUN                       ; $9a RUN
>91e8		84 92					.word	Command_Save                     ; $9b SAVE
>91ea		40 a5					.word	SyntaxError                      ; $9c SETDATE
>91ec		40 a5					.word	SyntaxError                      ; $9d SETTIME
>91ee		c6 b3					.word	ShootCommand                     ; $9e SHOOT
>91f0		05 a9					.word	SpritesCtrl                      ; $9f SPRITES
>91f2		08 93					.word	StopCommand                      ; $a0 STOP
>91f4		d5 93					.word	Command_VERIFY                   ; $a1 VERIFY
>91f6		ba a9					.word	XGoCommand                       ; $a2 XGO
>91f8		b1 a9					.word	XLoadCommand                     ; $a3 XLOAD
>91fa		ba b3					.word	ZapCommand                       ; $a4 ZAP
.91fc						VectorSet2:
>91fc		40 a5					.word	SyntaxError                      ; $80 !0:EOF
>91fe		40 a5					.word	SyntaxError                      ; $81 !1:SH1
>9200		40 a5					.word	SyntaxError                      ; $82 !2:SH2
>9202		ff a3					.word	Assemble_adc                     ; $83 ADC
>9204		f7 a3					.word	Assemble_and                     ; $84 AND
>9206		13 a4					.word	Assemble_asl                     ; $85 ASL
>9208		7d a4					.word	Assemble_bcc                     ; $86 BCC
>920a		81 a4					.word	Assemble_bcs                     ; $87 BCS
>920c		89 a4					.word	Assemble_beq                     ; $88 BEQ
>920e		40 a4					.word	Assemble_bit                     ; $89 BIT
>9210		71 a4					.word	Assemble_bmi                     ; $8a BMI
>9212		85 a4					.word	Assemble_bne                     ; $8b BNE
>9214		6d a4					.word	Assemble_bpl                     ; $8c BPL
>9216		8d a4					.word	Assemble_bra                     ; $8d BRA
>9218		91 a4					.word	Assemble_brk                     ; $8e BRK
>921a		75 a4					.word	Assemble_bvc                     ; $8f BVC
>921c		79 a4					.word	Assemble_bvs                     ; $90 BVS
>921e		99 a4					.word	Assemble_clc                     ; $91 CLC
>9220		ed a4					.word	Assemble_cld                     ; $92 CLD
>9222		ad a4					.word	Assemble_cli                     ; $93 CLI
>9224		dd a4					.word	Assemble_clv                     ; $94 CLV
>9226		0b a4					.word	Assemble_cmp                     ; $95 CMP
>9228		54 a4					.word	Assemble_cpx                     ; $96 CPX
>922a		4f a4					.word	Assemble_cpy                     ; $97 CPY
>922c		31 a4					.word	Assemble_dec                     ; $98 DEC
>922e		e9 a4					.word	Assemble_dex                     ; $99 DEX
>9230		c5 a4					.word	Assemble_dey                     ; $9a DEY
>9232		fb a3					.word	Assemble_eor                     ; $9b EOR
>9234		36 a4					.word	Assemble_inc                     ; $9c INC
>9236		f9 a4					.word	Assemble_inx                     ; $9d INX
>9238		e5 a4					.word	Assemble_iny                     ; $9e INY
>923a		68 a4					.word	Assemble_jmp                     ; $9f JMP
>923c		63 a4					.word	Assemble_jsr                     ; $a0 JSR
>923e		07 a4					.word	Assemble_lda                     ; $a1 LDA
>9240		2c a4					.word	Assemble_ldx                     ; $a2 LDX
>9242		4a a4					.word	Assemble_ldy                     ; $a3 LDY
>9244		1d a4					.word	Assemble_lsr                     ; $a4 LSR
>9246		fd a4					.word	Assemble_nop                     ; $a5 NOP
>9248		f3 a3					.word	Assemble_ora                     ; $a6 ORA
>924a		a9 a4					.word	Assemble_pha                     ; $a7 PHA
>924c		95 a4					.word	Assemble_php                     ; $a8 PHP
>924e		f1 a4					.word	Assemble_phx                     ; $a9 PHX
>9250		b1 a4					.word	Assemble_phy                     ; $aa PHY
>9252		b9 a4					.word	Assemble_pla                     ; $ab PLA
>9254		9d a4					.word	Assemble_plp                     ; $ac PLP
>9256		05 a5					.word	Assemble_plx                     ; $ad PLX
>9258		c1 a4					.word	Assemble_ply                     ; $ae PLY
>925a		18 a4					.word	Assemble_rol                     ; $af ROL
>925c		22 a4					.word	Assemble_ror                     ; $b0 ROR
>925e		a5 a4					.word	Assemble_rti                     ; $b1 RTI
>9260		b5 a4					.word	Assemble_rts                     ; $b2 RTS
>9262		0f a4					.word	Assemble_sbc                     ; $b3 SBC
>9264		a1 a4					.word	Assemble_sec                     ; $b4 SEC
>9266		01 a5					.word	Assemble_sed                     ; $b5 SED
>9268		bd a4					.word	Assemble_sei                     ; $b6 SEI
>926a		03 a4					.word	Assemble_sta                     ; $b7 STA
>926c		f5 a4					.word	Assemble_stp                     ; $b8 STP
>926e		27 a4					.word	Assemble_stx                     ; $b9 STX
>9270		45 a4					.word	Assemble_sty                     ; $ba STY
>9272		3b a4					.word	Assemble_stz                     ; $bb STZ
>9274		d9 a4					.word	Assemble_tax                     ; $bc TAX
>9276		d5 a4					.word	Assemble_tay                     ; $bd TAY
>9278		5e a4					.word	Assemble_trb                     ; $be TRB
>927a		59 a4					.word	Assemble_tsb                     ; $bf TSB
>927c		e1 a4					.word	Assemble_tsx                     ; $c0 TSX
>927e		c9 a4					.word	Assemble_txa                     ; $c1 TXA
>9280		d1 a4					.word	Assemble_txs                     ; $c2 TXS
>9282		cd a4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.9284						Command_Save:
.9284		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; file name to load
.9287		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9289		a5 36		lda $36				lda 	zTemp0
.928b		20 49 81	jsr $8149			jsr 	KNLOpenFileWrite 			; open file for writing
.928e		b0 2f		bcs $92bf			bcs 	CSErrorHandler 				; error, so fail.
.9290		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.9293		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9295		85 30		sta $30				sta 	codePtr
.9297		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9299		85 31		sta $31				sta 	codePtr+1
.929b						_CSLoop:
.929b		b2 30		lda ($30)			lda 	(codePtr)
.929d		f0 17		beq $92b6			beq 	_CSExit
.929f		20 e3 92	jsr $92e3			jsr 	CSGetCleanLine
.92a2		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.92a4		85 36		sta $36				sta 	zTemp0
.92a6		20 c2 92	jsr $92c2			jsr 	CLWriteByteBlock 			; write the block out.
.92a9		18		clc				clc
.92aa		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92ac		65 30		adc $30				adc 	codePtr
.92ae		85 30		sta $30				sta 	codePtr
.92b0		90 02		bcc $92b4			bcc 	_CREExit
.92b2		e6 31		inc $31				inc 	codePtr+1 					; carry
.92b4						_CREExit:
.92b4		80 e5		bra $929b			bra 	_CSLoop
.92b6						_CSExit:
.92b6		ad 71 07	lda $0771			lda 	BasicFileStream 			; close file
.92b9		20 12 82	jsr $8212			jsr 	KNLCloseFile
.92bc		4c 0b 8d	jmp $8d0b			jmp 	CLComplete 					; display complete message.
.92bf						CSErrorHandler:
.92bf		4c 28 8d	jmp $8d28			jmp 	CLErrorHandler
.92c2						CLWriteByteBlock:
.92c2		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.92c4		f0 1c		beq $92e2			beq 	_CLWBBExit					; if so, exit
.92c6		ad 71 07	lda $0771			lda 	BasicFileStream 			; stream to write, count in X
.92c9		20 d8 81	jsr $81d8			jsr 	KNLWriteBlock 				; call one write attempt
.92cc		b0 f1		bcs $92bf			bcs 	CSErrorHandler 				; error occurred
.92ce		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.92d0		8a		txa				txa 								; subtract bytes written from X, total count.
.92d1		38		sec				sec
.92d2		e5 38		sbc $38				sbc 	zTemp1
.92d4		aa		tax				tax
.92d5		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.92d6		a5 36		lda $36				lda 	zTemp0
.92d8		65 38		adc $38				adc 	zTemp1
.92da		85 36		sta $36				sta 	zTemp0
.92dc		90 e4		bcc $92c2			bcc 	CLWriteByteBlock
.92de		e6 37		inc $37				inc 	zTemp0+1
.92e0		80 e0		bra $92c2			bra 	CLWriteByteBlock 			; and retry write out.
.92e2						_CLWBBExit:
.92e2		60		rts				rts
.92e3						CSGetCleanLine:
.92e3		a9 00		lda #$00			lda 	#0 							; no indent.
.92e5		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.92e8		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.92ea		a0 00		ldy #$00			ldy 	#0
.92ec						_CSClean:
.92ec		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.92ef		f0 09		beq $92fa			beq 	_CSDoneClean
.92f1		30 04		bmi $92f7			bmi 	_CSIgnoreCharacter
.92f3		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.92f6		e8		inx				inx
.92f7						_CSIgnoreCharacter:
.92f7		c8		iny				iny
.92f8		80 f2		bra $92ec			bra 	_CSClean
.92fa						_CSDoneClean:
.92fa		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.92fc		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.92ff		e8		inx				inx
.9300		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.9303		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.9305		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.9307		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9308						StopCommand:
.9308		a9 08		lda #$08		lda	#8
.930a		4c 77 94	jmp $9477		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.930d						ProcedureScan:
.930d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.930f		85 30		sta $30				sta 	codePtr
.9311		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9313		85 31		sta $31				sta 	codePtr+1
.9315						_PSLoop:
.9315		b2 30		lda ($30)			lda 	(codePtr)
.9317		f0 42		beq $935b			beq 	_PSExit
.9319		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.931b		b1 30		lda ($30),y			lda 	(codePtr),y
.931d		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.931f		d0 2d		bne $934e			bne 	_PSNext
.9321		c8		iny				iny 								; get the address of the record to zTemp0 and
.9322		b1 30		lda ($30),y			lda 	(codePtr),y
.9324		29 c0		and #$c0			and 	#$C0
.9326		c9 40		cmp #$40			cmp 	#$40
.9328		d0 32		bne $935c			bne 	_PSSyntax
.932a		b1 30		lda ($30),y			lda 	(codePtr),y
.932c		18		clc				clc
.932d		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.932f		85 37		sta $37				sta 	zTemp0+1
.9331		c8		iny				iny 								; LSB
.9332		b1 30		lda ($30),y			lda 	(codePtr),y
.9334		85 36		sta $36				sta 	zTemp0
.9336		c8		iny				iny 								; character after variable call.
.9337		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9338		a0 07		ldy #$07			ldy 	#7
.933a		91 36		sta ($36),y			sta 	(zTemp0),y
.933c		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.933e		a0 02		ldy #$02			ldy 	#2
.9340		91 36		sta ($36),y			sta 	(zTemp0),y
.9342		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9344						_PSCopy:
.9344		b5 30		lda $30,x			lda 	safePtr,x
.9346		c8		iny				iny
.9347		91 36		sta ($36),y			sta 	(zTemp0),y
.9349		e8		inx				inx
.934a		e0 04		cpx #$04			cpx 	#4
.934c		d0 f6		bne $9344			bne 	_PSCopy
.934e						_PSNext:
.934e		18		clc				clc
.934f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9351		65 30		adc $30				adc 	codePtr
.9353		85 30		sta $30				sta 	codePtr
.9355		90 02		bcc $9359			bcc 	_CREExit
.9357		e6 31		inc $31				inc 	codePtr+1 					; carry
.9359						_CREExit:
.9359		80 ba		bra $9315			bra 	_PSLoop
.935b						_PSExit:
.935b		60		rts				rts
.935c						_PSSyntax:
.935c		4c 40 a5	jmp $a540			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.935f						ScanForward:
.935f		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9361		86 37		stx $37				stx 	zTemp0+1
.9363		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9365						_ScanLoop:
.9365		b1 30		lda ($30),y			lda 	(codePtr),y
.9367		c8		iny				iny
.9368		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.936a		d0 0e		bne $937a			bne 	_ScanGoNext
.936c		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.936e		f0 04		beq $9374			beq 	_ScanMatch
.9370		c5 37		cmp $37				cmp 	zTemp0+1
.9372		d0 06		bne $937a			bne 	_ScanGoNext
.9374						_ScanMatch:
.9374		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9376		d0 01		bne $9379			bne 	_ScanNotEndEOL
.9378		88		dey				dey
.9379						_ScanNotEndEOL:
.9379		60		rts				rts
.937a						_ScanGoNext:
.937a		20 7f 93	jsr $937f			jsr  	ScanForwardOne 				; allows for shifts and so on.
.937d		80 e6		bra $9365			bra 	_ScanLoop
.937f						ScanForwardOne:
.937f		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9381		90 3e		bcc $93c1			bcc 	_SFWExit
.9383		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9385		90 18		bcc $939f			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9387		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9389		b0 2f		bcs $93ba			bcs 	_ScanSkipData
.938b		c9 aa		cmp #$aa			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.938d		90 32		bcc $93c1			bcc 	_SFWExit 					; if not, ordinary keywords.
.938f		c9 b5		cmp #$b5			cmp 	#KWC_LAST_STRUCTURE+1
.9391		b0 2e		bcs $93c1			bcs 	_SFWExit
.9393		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9395		c9 af		cmp #$af			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9397		b0 28		bcs $93c1			bcs 	_SFWExit
.9399		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.939b		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.939d		80 22		bra $93c1			bra 	_SFWExit
.939f						_ScanSkipOne:
.939f		c8		iny				iny 								; consume the extra one.
.93a0		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.93a2		d0 1d		bne $93c1			bne 	_SFWExit
.93a4		18		clc				clc
.93a5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.93a7		65 30		adc $30				adc 	codePtr
.93a9		85 30		sta $30				sta 	codePtr
.93ab		90 02		bcc $93af			bcc 	_CREExit
.93ad		e6 31		inc $31				inc 	codePtr+1 					; carry
.93af						_CREExit:
.93af		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.93b1		b2 30		lda ($30)			lda 	(codePtr)
.93b3		d0 0c		bne $93c1			bne 	_SFWExit 					; if not zero, more to scan
.93b5		a9 13		lda #$13		lda	#19
.93b7		4c 77 94	jmp $9477		jmp	ErrorHandler
.93ba						_ScanSkipData:
.93ba		88		dey				dey 								; point at data token
.93bb		c8		iny				iny 								; point to offset
.93bc		98		tya				tya 								; A = offset position
.93bd		38		sec				sec 								; add size +1 hence SEC
.93be		71 30		adc ($30),y			adc 	(codePtr),y
.93c0		a8		tay				tay 								; make current position.
.93c1						_SFWExit:
.93c1		60		rts				rts
.93c2						ScanGetCurrentLineStep:
.93c2		64 38		stz $38				stz 	zTemp1
.93c4		a0 03		ldy #$03			ldy 	#3
.93c6						_SGCLSLoop:
.93c6		b1 30		lda ($30),y			lda 	(codePtr),y
.93c8		c8		iny				iny
.93c9		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.93cb		f0 05		beq $93d2			beq 	_SGCLSExit
.93cd		20 7f 93	jsr $937f			jsr 	ScanForwardOne
.93d0		80 f4		bra $93c6			bra 	_SGCLSLoop
.93d2						_SGCLSExit:
.93d2		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.93d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc4e						m
.93d5						Command_VERIFY:
.93d5		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; file name to verify
.93d8		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.93da		a5 36		lda $36				lda 	zTemp0
.93dc		20 4e 81	jsr $814e			jsr 	KNLOpenFileRead 			; open file for reading
.93df		b0 4b		bcs $942c			bcs 	_CVErrorHandler 			; error, so fail.
.93e1		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.93e4		20 78 8d	jsr $8d78			jsr     LoadReadByteInit            ; Init reader with the stream
.93e7		9c 70 07	stz $0770			stz 	LoadEOFFlag 				; clear EOF Flag.
.93ea		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93ec		85 30		sta $30				sta 	codePtr
.93ee		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93f0		85 31		sta $31				sta 	codePtr+1
.93f2						_CVLoop:
.93f2		20 36 8d	jsr $8d36			jsr 	LoadReadLine 				; get next line.
.93f5		f0 27		beq $941e			beq 	_CVExit 					; end, exit.
.93f7		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.93fa		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.93fd		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.9400		f0 f0		beq $93f2			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.9402		a0 00		ldy #$00			ldy 	#0 							; start compare
.9404						_CVCompareLoop:
.9404		b1 30		lda ($30),y			lda 	(codePtr),y
.9406		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.9409		d0 1c		bne $9427			bne 	_CVCompareError
.940b		c8		iny				iny
.940c		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.940f		d0 f3		bne $9404			bne 	_CVCompareLoop
.9411		18		clc				clc
.9412		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9414		65 30		adc $30				adc 	codePtr
.9416		85 30		sta $30				sta 	codePtr
.9418		90 02		bcc $941c			bcc 	_CREExit
.941a		e6 31		inc $31				inc 	codePtr+1 					; carry
.941c						_CREExit:
.941c		80 d4		bra $93f2			bra 	_CVLoop
.941e						_CVExit:
.941e		ad 71 07	lda $0771			lda 	BasicFileStream
.9421		20 12 82	jsr $8212			jsr 	KNLCloseFile
.9424		4c 0b 8d	jmp $8d0b			jmp 	CLComplete
.9427						_CVCompareError:
.9427		a9 1b		lda #$1b		lda	#27
.9429		4c 77 94	jmp $9477		jmp	ErrorHandler
.942c						_CVErrorHandler:
.942c		4c 28 8d	jmp $8d28			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.942f						Command_WHILE:
.942f		5a		phy				phy 								; save position of the test
.9430		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9432		20 10 a3	jsr $a310			jsr 	EvaluateNumber
.9435		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; check if zero
.9438		f0 0e		beq $9448			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.943a		98		tya				tya 								; position *after* test.
.943b		7a		ply				ply 								; restore position before test, at WHILE
.943c		88		dey				dey 								; so we execute the WHILE command again.
.943d		48		pha				pha 								; push after test on the stack
.943e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9440		20 a1 b4	jsr $b4a1			jsr 	StackOpen
.9443		20 e6 b4	jsr $b4e6			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9446		7a		ply				ply 								; restore the position *after* the test
.9447		60		rts				rts
.9448						_WHExitLoop:
.9448		68		pla				pla 								; throw post loop position
.9449		a9 b4		lda #$b4			lda 	#KWD_WEND 					; scan forward past WEND
.944b		aa		tax				tax
.944c		20 5f 93	jsr $935f			jsr 	ScanForward
.944f		60		rts				rts
.9450						Command_WEND:
.9450		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9452		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9454		20 ce b4	jsr $b4ce			jsr 	StackCheckFrame
.9457		20 f7 b4	jsr $b4f7			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.945a		20 c0 b4	jsr $b4c0			jsr 	StackClose		 			; erase the frame
.945d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.945e						CheckRightBracket:
.945e		b1 30		lda ($30),y			lda 	(codePtr),y
.9460		c8		iny				iny
.9461		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9463		d0 0f		bne $9474			bne 	CNAFail
.9465		60		rts				rts
.9466						CheckComma:
.9466		b1 30		lda ($30),y			lda 	(codePtr),y
.9468		c8		iny				iny
.9469		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.946b		d0 07		bne $9474			bne 	CNAFail
.946d		60		rts				rts
.946e						CheckNextA:
.946e		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9470		d0 02		bne $9474			bne 	CNAFail
.9472		c8		iny				iny 								; skip character
.9473		60		rts				rts 								; and exit
.9474						CNAFail:
.9474		4c 40 a5	jmp $a540			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9477						ErrorHandler:
.9477		a8		tay				tay 								; find the error text
.9478		f0 49		beq $94c3			beq 	_EHEnd
.947a		a2 00		ldx #$00			ldx 	#0
.947c		a9 59		lda #$59			lda 	#((ErrorText) & $FF)
.947e		85 36		sta $36				sta 	0+zTemp0
.9480		a9 a5		lda #$a5			lda 	#((ErrorText) >> 8)
.9482		85 37		sta $37				sta 	1+zTemp0
.9484						_EHFind:
.9484		88		dey				dey 								; keep looking through text
.9485		f0 0e		beq $9495			beq 	_EHFound
.9487						_EHFindZero:
.9487		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9489		e6 36		inc $36				inc 	zTemp0
.948b		d0 02		bne $948f			bne 	_EHFNoCarry
.948d		e6 37		inc $37				inc 	zTemp0+1
.948f						_EHFNoCarry:
.948f		c9 00		cmp #$00			cmp 	#0
.9491		d0 f4		bne $9487			bne 	_EHFindZero
.9493		80 ef		bra $9484			bra 	_EHFind
.9495						_EHFound:
.9495		a5 36		lda $36				lda 	zTemp0 						; print message
.9497		a6 37		ldx $37				ldx 	zTemp0+1
.9499		20 d0 94	jsr $94d0			jsr 	PrintStringXA
.949c		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.949e		b1 30		lda ($30),y			lda 	(codePtr),y
.94a0		d0 05		bne $94a7			bne 	_EHAtMsg
.94a2		c8		iny				iny
.94a3		b1 30		lda ($30),y			lda 	(codePtr),y
.94a5		f0 17		beq $94be			beq 	_EHCREnd
.94a7						_EHAtMsg:
.94a7		a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.94a9		a9 c6		lda #$c6			lda 	#_AtMsg & $FF
.94ab		20 d0 94	jsr $94d0			jsr 	PrintStringXA
.94ae		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.94b0		b1 30		lda ($30),y			lda 	(codePtr),y
.94b2		48		pha				pha
.94b3		c8		iny				iny
.94b4		b1 30		lda ($30),y			lda 	(codePtr),y
.94b6		aa		tax				tax
.94b7		68		pla				pla
.94b8		20 e6 98	jsr $98e6			jsr 	ConvertInt16 				; convert XA to string
.94bb		20 d0 94	jsr $94d0			jsr 	PrintStringXA 				; and print it.
.94be						_EHCREnd:
.94be		a9 0d		lda #$0d			lda 	#13 						; new line
.94c0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.94c3						_EHEnd:
.94c3		4c b1 85	jmp $85b1			jmp 	WarmStart
>94c6		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>94ce		20 00
.94d0						PrintStringXA:
.94d0		5a		phy				phy
.94d1		86 37		stx $37				stx 	zTemp0+1
.94d3		85 36		sta $36				sta 	zTemp0
.94d5		a0 00		ldy #$00			ldy 	#0
.94d7						_PSXALoop:
.94d7		b1 36		lda ($36),y			lda 	(zTemp0),y
.94d9		f0 06		beq $94e1			beq 	_PSXAExit
.94db		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.94de		c8		iny				iny
.94df		80 f6		bra $94d7			bra 	_PSXALoop
.94e1						_PSXAExit:
.94e1		7a		ply				ply
.94e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.94e3						UnaryTrue:
.94e3		fa		plx				plx
.94e4						ReturnTrue:
.94e4		a9 01		lda #$01			lda 	#1  						; set to 1
.94e6		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte
.94e9		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.94eb		95 50		sta $50,x			sta 	NSStatus,x
.94ed		60		rts				rts
.94ee						UnaryFalse:
.94ee		fa		plx				plx
.94ef						ReturnFalse:
.94ef		4c c2 a3	jmp $a3c2			jmp 	NSMSetZero 					; set it all to zero
.94f2						BinaryCompareEqual:
.94f2		fa		plx				plx
.94f3		20 2e 95	jsr $952e			jsr 	CompareBaseCode
.94f6		c9 00		cmp #$00			cmp 	#0
.94f8		f0 ea		beq $94e4			beq 	ReturnTrue
.94fa		80 f3		bra $94ef			bra 	ReturnFalse
.94fc						BinaryCompareLess:
.94fc		fa		plx				plx
.94fd		20 2e 95	jsr $952e			jsr 	CompareBaseCode
.9500		c9 ff		cmp #$ff			cmp 	#$FF
.9502		f0 e0		beq $94e4			beq 	ReturnTrue
.9504		80 e9		bra $94ef			bra 	ReturnFalse
.9506						BinaryCompareGreater:
.9506		fa		plx				plx
.9507		20 2e 95	jsr $952e			jsr 	CompareBaseCode
.950a		c9 01		cmp #$01			cmp 	#1
.950c		f0 d6		beq $94e4			beq 	ReturnTrue
.950e		80 df		bra $94ef			bra 	ReturnFalse
.9510						BinaryCompareNotEqual:
.9510		fa		plx				plx
.9511		20 2e 95	jsr $952e			jsr 	CompareBaseCode
.9514		c9 00		cmp #$00			cmp 	#0
.9516		d0 cc		bne $94e4			bne 	ReturnTrue
.9518		80 d5		bra $94ef			bra 	ReturnFalse
.951a						BinaryCompareLessEqual:
.951a		fa		plx				plx
.951b		20 2e 95	jsr $952e			jsr 	CompareBaseCode
.951e		c9 01		cmp #$01			cmp 	#1
.9520		d0 c2		bne $94e4			bne 	ReturnTrue
.9522		80 cb		bra $94ef			bra 	ReturnFalse
.9524						BinaryCompareGreaterEqual:
.9524		fa		plx				plx
.9525		20 2e 95	jsr $952e			jsr 	CompareBaseCode
.9528		c9 ff		cmp #$ff			cmp 	#$FF
.952a		d0 b8		bne $94e4			bne 	ReturnTrue
.952c		80 c1		bra $94ef			bra 	ReturnFalse
.952e						CompareBaseCode:
.952e		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; make both values if references.
.9531		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9533		15 51		ora $51,x			ora 	NSStatus+1,x
.9535		29 10		and #$10			and 	#NSTString
.9537		d0 37		bne $9570			bne 	_CBCString 					; if so do string code, which will check if both.
.9539		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.953b		15 79		ora $79,x			ora 	NSExponent+1,x
.953d		d0 34		bne $9573			bne 	_CBCFloat
.953f		b5 50		lda $50,x			lda 	NSStatus,x
.9541		15 51		ora $51,x			ora 	NSStatus+1,x
.9543		29 08		and #$08			and 	#NSTFloat
.9545		d0 2c		bne $9573			bne 	_CBCFloat
.9547		20 76 95	jsr $9576			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.954a		e8		inx				inx
.954b		20 76 95	jsr $9576			jsr 	CompareFixMinusZero
.954e		ca		dex				dex
.954f		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9551		55 51		eor $51,x			eor 	NSStatus+1,x
.9553		10 0a		bpl $955f			bpl 	_CDCSameSign
.9555		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9557		30 14		bmi $956d			bmi 	_CBCLess 					; return $FF
.9559						_CBCGreater:
.9559		a9 01		lda #$01			lda 	#1
.955b		60		rts				rts
.955c						_CBCEqual:
.955c		a9 00		lda #$00			lda 	#0
.955e		60		rts				rts
.955f						_CDCSameSign:
.955f		20 8b 97	jsr $978b			jsr 	SubTopTwoStack 				; unsigned subtract
.9562		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; or the mantissa together
.9565		f0 f5		beq $955c			beq 	_CBCEqual 					; -0 == 0
.9567		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9569		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.956b		10 ec		bpl $9559			bpl 	_CBCGreater
.956d						_CBCLess:
.956d		a9 ff		lda #$ff			lda 	#$FF
.956f		60		rts				rts
.9570						_CBCString:
.9570		4c fc 96	jmp $96fc			jmp 	CompareStrings
.9573						_CBCFloat:
.9573		4c 46 9a	jmp $9a46			jmp 	CompareFloat
.9576						CompareFixMinusZero:
.9576		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero
.9579		d0 02		bne $957d			bne 	_CFXMZNotZero
.957b		74 50		stz $50,x			stz 	NSStatus,x
.957d						_CFXMZNotZero:
.957d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.957e						StringConcat:
.957e		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9580		35 51		and $51,x			and 	NSStatus+1,x
.9582		29 18		and #$18			and 	#NSBTypeMask
.9584		c9 10		cmp #$10			cmp 	#NSTString
.9586		d0 50		bne $95d8			bne		_SCType
.9588		64 38		stz $38				stz 	zTemp1 						; counting total length
.958a		e8		inx				inx
.958b		20 a9 95	jsr $95a9			jsr 	_SCSetupZ0 					; setup for second
.958e		20 b2 95	jsr $95b2			jsr 	_SCLengthZ0 				; length for second
.9591		ca		dex				dex
.9592		20 a9 95	jsr $95a9			jsr 	_SCSetupZ0 					; setup for first
.9595		20 b2 95	jsr $95b2			jsr 	_SCLengthZ0 				; length for first
.9598		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.959a		20 91 b5	jsr $b591			jsr 	StringTempAllocate
.959d		20 c9 95	jsr $95c9			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.95a0		e8		inx				inx
.95a1		20 a9 95	jsr $95a9			jsr 	_SCSetupZ0 					; copy second out
.95a4		20 c9 95	jsr $95c9			jsr 	_SCCopy
.95a7		ca		dex				dex
.95a8		60		rts				rts
.95a9						_SCSetupZ0:
.95a9		b5 58		lda $58,x			lda 	NSMantissa0,x
.95ab		85 36		sta $36				sta 	zTemp0
.95ad		b5 60		lda $60,x			lda 	NSMantissa1,x
.95af		85 37		sta $37				sta 	zTemp0+1
.95b1		60		rts				rts
.95b2						_SCLengthZ0:
.95b2		5a		phy				phy
.95b3		a0 00		ldy #$00			ldy 	#0
.95b5						_SCLenLoop:
.95b5		b1 36		lda ($36),y			lda 	(zTemp0),y
.95b7		f0 0e		beq $95c7			beq 	_SCLExit
.95b9		c8		iny				iny
.95ba		e6 38		inc $38				inc 	zTemp1
.95bc		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.95be		c9 fd		cmp #$fd			cmp 	#253
.95c0		d0 f3		bne $95b5			bne		_SCLenLoop
.95c2		a9 09		lda #$09		lda	#9
.95c4		4c 77 94	jmp $9477		jmp	ErrorHandler
.95c7						_SCLExit:
.95c7		7a		ply				ply
.95c8		60		rts				rts
.95c9						_SCCopy:
.95c9		5a		phy				phy
.95ca		a0 00		ldy #$00			ldy 	#0
.95cc						_SCCopyLoop:
.95cc		b1 36		lda ($36),y			lda 	(zTemp0),y
.95ce		f0 06		beq $95d6			beq 	_SCCExit
.95d0		20 ca b5	jsr $b5ca			jsr 	StringTempWrite
.95d3		c8		iny				iny
.95d4		80 f6		bra $95cc			bra 	_SCCopyLoop
.95d6						_SCCExit:
.95d6		7a		ply				ply
.95d7		60		rts				rts
.95d8						_SCType:
.95d8		4c 4a a5	jmp $a54a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.95db						IntegerDivide:
.95db		fa		plx				plx
.95dc		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95de		15 51		ora $51,x			ora 	NSStatus+1,x
.95e0		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95e1		0a		asl a				asl 	a
.95e2		10 05		bpl $95e9			bpl 	_NotRef
.95e4		48		pha				pha
.95e5		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95e8		68		pla				pla
.95e9						_NotRef:
.95e9		0a		asl a				asl 	a
.95ea		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95ec		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95ee		15 79		ora $79,x			ora 	NSExponent+1,x
.95f0		f0 03		beq $95f5			beq 	_IntegerCode 				; if clear, then we have two integers
.95f2		4c 4a a5	jmp $a54a			jmp 	TypeError 					; anything else, type mismatch.
.95f5						_IntegerCode:
.95f5		20 0f 96	jsr $960f			jsr 	CheckDivideZero 			; do div zero check
.95f8		20 41 96	jsr $9641			jsr 	Int32Divide 				; do the division
.95fb		20 f2 96	jsr $96f2			jsr 	CalculateSign 				; calculate result sign
.95fe						NSMCopyPlusTwoToZero:
.95fe		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9600		95 58		sta $58,x			sta 	NSMantissa0,x
.9602		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9604		95 60		sta $60,x			sta 	NSMantissa1,x
.9606		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9608		95 68		sta $68,x			sta 	NSMantissa2,x
.960a		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.960c		95 70		sta $70,x			sta 	NSMantissa3,x
.960e		60		rts				rts
.960f						CheckDivideZero:
.960f		e8		inx				inx
.9610		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero
.9613		f0 02		beq $9617			beq 	_CDVError
.9615		ca		dex				dex
.9616		60		rts				rts
.9617						_CDVError:
.9617		a9 03		lda #$03		lda	#3
.9619		4c 77 94	jmp $9477		jmp	ErrorHandler
.961c						IntegerModulus:
.961c		fa		plx				plx
.961d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.961f		15 51		ora $51,x			ora 	NSStatus+1,x
.9621		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9622		0a		asl a				asl 	a
.9623		10 05		bpl $962a			bpl 	_NotRef
.9625		48		pha				pha
.9626		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9629		68		pla				pla
.962a						_NotRef:
.962a		0a		asl a				asl 	a
.962b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.962d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.962f		15 79		ora $79,x			ora 	NSExponent+1,x
.9631		f0 03		beq $9636			beq 	_IntegerCode 				; if clear, then we have two integers
.9633		4c 4a a5	jmp $a54a			jmp 	TypeError 					; anything else, type mismatch.
.9636						_IntegerCode:
.9636						IntegerModulusNoCheck:
.9636		20 0f 96	jsr $960f			jsr 	CheckDivideZero 			; do div zero check
.9639		20 41 96	jsr $9641			jsr 	Int32Divide 				; do the division
.963c		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.963e		56 50		lsr $50,x			lsr 	NSStatus,x
.9640		60		rts				rts
.9641						Int32Divide:
.9641		48		pha				pha 								; save AXY
.9642		5a		phy				phy
.9643		20 a5 a3	jsr $a3a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9646		20 be a3	jsr $a3be			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9649		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.964b						_I32DivideLoop:
.964b		e8		inx				inx
.964c		e8		inx				inx
.964d		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9650		ca		dex				dex
.9651		ca		dex				dex
.9652		20 d2 a3	jsr $a3d2			jsr 	NSMRotateLeft
.9655		20 80 96	jsr $9680			jsr 	DivideCheckSubtract 		; check if subtract possible
.9658		90 02		bcc $965c			bcc 	_I32DivideNoCarryIn
.965a		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.965c						_I32DivideNoCarryIn:
.965c		88		dey				dey 								; loop round till division completed.
.965d		d0 ec		bne $964b			bne 	_I32DivideLoop
.965f		7a		ply				ply 								; restore AXY and exit
.9660		68		pla				pla
.9661		60		rts				rts
.9662						Int32ShiftDivide:
.9662		48		pha				pha 								; save AY
.9663		5a		phy				phy
.9664		e8		inx				inx 								; clear S[X+2]
.9665		e8		inx				inx
.9666		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero
.9669		ca		dex				dex
.966a		ca		dex				dex
.966b		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.966d						_I32SDLoop:
.966d		20 80 96	jsr $9680			jsr 	DivideCheckSubtract 		; check if subtract possible
.9670		e8		inx				inx
.9671		e8		inx				inx
.9672		20 d2 a3	jsr $a3d2			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9675		ca		dex				dex
.9676		ca		dex				dex
.9677		20 d2 a3	jsr $a3d2			jsr 	NSMRotateLeft
.967a		88		dey				dey 	 							; do 31 times
.967b		d0 f0		bne $966d			bne 	_I32SDLoop
.967d		7a		ply				ply 								; restore AY and exit
.967e		68		pla				pla
.967f		60		rts				rts
.9680						DivideCheckSubtract:
.9680		20 8b 97	jsr $978b			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9683		b0 04		bcs $9689			bcs 	_DCSExit 					; if carry set, then could do, exit
.9685		20 71 97	jsr $9771			jsr 	AddTopTwoStack 				; add it back in
.9688		18		clc				clc 								; and return False
.9689						_DCSExit:
.9689		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.968a						MulInteger:
.968a		fa		plx				plx
.968b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.968d		15 51		ora $51,x			ora 	NSStatus+1,x
.968f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9690		0a		asl a				asl 	a
.9691		10 05		bpl $9698			bpl 	_NotRef
.9693		48		pha				pha
.9694		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9697		68		pla				pla
.9698						_NotRef:
.9698		0a		asl a				asl 	a 							; put MSB of type into A:7
.9699		30 09		bmi $96a4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.969b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.969d		15 79		ora $79,x			ora 	NSExponent+1,x
.969f		f0 06		beq $96a7			beq 	_IntegerCode 				; if clear, then we have two integers
.96a1		4c 08 9b	jmp $9b08			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.96a4						_StringData:
.96a4		4c 54 a5	jmp $a554			jmp 	NotDoneError							; at least one string - don't know both are strings.
.96a7						_IntegerCode:
.96a7		20 b4 96	jsr $96b4			jsr 	MultiplyShort
.96aa		c9 00		cmp #$00			cmp 	#0
.96ac		f0 05		beq $96b3			beq 	_MIExit
.96ae		a9 04		lda #$04		lda	#4
.96b0		4c 77 94	jmp $9477		jmp	ErrorHandler
.96b3						_MIExit:
.96b3		60		rts				rts
.96b4						MultiplyShort:
.96b4		5a		phy				phy 								; save Y
.96b5		20 a5 a3	jsr $a3a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.96b8		20 be a3	jsr $a3be			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.96bb		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.96bd						_I32MLoop:
.96bd		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.96bf		15 62		ora $62,x			ora 	NSMantissa1+2,x
.96c1		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.96c3		15 72		ora $72,x			ora 	NSMantissa3+2,x
.96c5		f0 25		beq $96ec			beq 	_I32MExit 					; exit if zero
.96c7		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.96c9		29 01		and #$01			and 	#1
.96cb		f0 0d		beq $96da			beq 	_I32MNoAdd
.96cd		20 71 97	jsr $9771			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.96d0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.96d2		10 06		bpl $96da			bpl 	_I32MNoAdd
.96d4						_I32ShiftRight:
.96d4		20 db a3	jsr $a3db			jsr 	NSMShiftRight 				; shift S[X] right
.96d7		c8		iny				iny 								; increment shift count
.96d8		80 09		bra $96e3			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.96da						_I32MNoAdd:
.96da		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.96dc		70 f6		bvs $96d4			bvs 	_I32ShiftRight 				; instead.
.96de		e8		inx				inx
.96df		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.96e2		ca		dex				dex
.96e3						_I32MShiftUpper:
.96e3		e8		inx				inx 								; shift S[X+2] right
.96e4		e8		inx				inx
.96e5		20 db a3	jsr $a3db			jsr 	NSMShiftRight
.96e8		ca		dex				dex
.96e9		ca		dex				dex
.96ea		80 d1		bra $96bd			bra 	_I32MLoop 					; try again.
.96ec						_I32MExit:
.96ec		20 f2 96	jsr $96f2			jsr 	CalculateSign
.96ef		98		tya				tya 								; shift in A
.96f0		7a		ply				ply 								; restore Y and exit
.96f1		60		rts				rts
.96f2						CalculateSign:
.96f2		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.96f4		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.96f6		55 51		eor $51,x			eor 	NSStatus+1,x
.96f8		0a		asl a				asl 	a 							; shift bit 7 into carry
.96f9		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.96fb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.96fc						CompareStrings:
.96fc		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.96fe		35 51		and $51,x			and 	NSStatus+1,x
.9700		29 10		and #$10			and 	#NSBIsString
.9702		f0 28		beq $972c			beq 	_CSTypeError
.9704		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9706		85 36		sta $36				sta 	zTemp0
.9708		b5 60		lda $60,x			lda 	NSMantissa1,x
.970a		85 37		sta $37				sta 	zTemp0+1
.970c		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.970e		85 38		sta $38				sta 	zTemp1
.9710		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9712		85 39		sta $39				sta 	zTemp1+1
.9714		5a		phy				phy 								; save Y so we can access strings
.9715		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9717						_CSLoop:
.9717		c8		iny				iny
.9718		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.971a		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.971c		d0 06		bne $9724			bne 	_CSDifferent
.971e		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9720		d0 f5		bne $9717			bne 	_CSLoop 					; still comparing
.9722						_CSExit:
.9722		7a		ply				ply 								; reached end, return zero in A from EOS
.9723		60		rts				rts
.9724						_CSDifferent:
.9724		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9726		90 fa		bcc $9722			bcc		_CSExit
.9728		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.972a		80 f6		bra $9722			bra 	_CSExit
.972c						_CSTypeError:
.972c		4c 4a a5	jmp $a54a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.972f						ShiftLeft:
.972f		38		sec				sec 								; common code, carry determines which way.
.9730		80 01		bra $9733			bra 	ShiftMain
.9732						ShiftRight:
.9732		18		clc				clc
.9733						ShiftMain:
.9733		fa		plx				plx 								; restore X
.9734		08		php				php 								; save direction
.9735		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9737		15 51		ora $51,x			ora 	NSStatus+1,x
.9739		0a		asl a				asl 	a 							; shift reference bit into sign bit
.973a		0a		asl a				asl 	a
.973b		10 05		bpl $9742			bpl 	_NotRef
.973d		48		pha				pha
.973e		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9741		68		pla				pla
.9742						_NotRef:
.9742		0a		asl a				asl 	a
.9743		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9745		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9747		15 79		ora $79,x			ora 	NSExponent+1,x
.9749		f0 03		beq $974e			beq 	_IntegerCode 				; if clear, then we have two integers
.974b		4c 4a a5	jmp $a54a			jmp 	TypeError 					; anything else, type mismatch.
.974e						_IntegerCode:
.974e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9750		29 e0		and #$e0			and 	#$E0
.9752		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9754		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9756		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9758		d0 12		bne $976c			bne 	_SMExit0 					; if >= 32 it will always return zero.
.975a						_SMLoop:
.975a		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.975c		30 11		bmi $976f			bmi 	_SMExit 					; exit if done.
.975e		28		plp				plp 								; restore direction setting
.975f		08		php				php
.9760		90 05		bcc $9767			bcc 	_SMRight
.9762		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; shift left if CS
.9765		80 f3		bra $975a			bra 	_SMLoop
.9767						_SMRight:
.9767		20 db a3	jsr $a3db			jsr 	NSMShiftRight 				; shift right if CC
.976a		80 ee		bra $975a			bra 	_SMLoop
.976c						_SMExit0:
.976c		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero 					; return zero.
.976f						_SMExit:
.976f		28		plp				plp 								; throw direction
.9770		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9771						AddTopTwoStack:
.9771		18		clc				clc
.9772		b5 58		lda $58,x			lda		NSMantissa0,x
.9774		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9776		95 58		sta $58,x			sta 	NSMantissa0,x
.9778		b5 60		lda $60,x			lda		NSMantissa1,x
.977a		75 61		adc $61,x			adc 		NSMantissa1+1,x
.977c		95 60		sta $60,x			sta 	NSMantissa1,x
.977e		b5 68		lda $68,x			lda		NSMantissa2,x
.9780		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9782		95 68		sta $68,x			sta 	NSMantissa2,x
.9784		b5 70		lda $70,x			lda		NSMantissa3,x
.9786		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9788		95 70		sta $70,x			sta 	NSMantissa3,x
.978a		60		rts				rts
.978b						SubTopTwoStack:
.978b		38		sec				sec
.978c		b5 58		lda $58,x			lda		NSMantissa0,x
.978e		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9790		95 58		sta $58,x			sta 	NSMantissa0,x
.9792		b5 60		lda $60,x			lda		NSMantissa1,x
.9794		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9796		95 60		sta $60,x			sta 	NSMantissa1,x
.9798		b5 68		lda $68,x			lda		NSMantissa2,x
.979a		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.979c		95 68		sta $68,x			sta 	NSMantissa2,x
.979e		b5 70		lda $70,x			lda		NSMantissa3,x
.97a0		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.97a2		95 70		sta $70,x			sta 	NSMantissa3,x
.97a4		60		rts				rts
.97a5						AddInteger:
.97a5		fa		plx				plx
.97a6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97a8		15 51		ora $51,x			ora 	NSStatus+1,x
.97aa		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ab		0a		asl a				asl 	a
.97ac		10 05		bpl $97b3			bpl 	_NotRef
.97ae		48		pha				pha
.97af		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97b2		68		pla				pla
.97b3						_NotRef:
.97b3		0a		asl a				asl 	a 							; put MSB of type into A:7
.97b4		30 09		bmi $97bf			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97b6		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97b8		15 79		ora $79,x			ora 	NSExponent+1,x
.97ba		f0 06		beq $97c2			beq 	_IntegerCode 				; if clear, then we have two integers
.97bc		4c b8 99	jmp $99b8			jmp 	FloatingPointAdd 							; otherwise at least one float.
.97bf						_StringData:
.97bf		4c 7e 95	jmp $957e			jmp 	StringConcat							; at least one string - don't know both are strings.
.97c2						_IntegerCode:
.97c2						AddCode:
.97c2		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.97c4		55 51		eor $51,x			eor 	NSStatus+1,x
.97c6		10 a9		bpl $9771			bpl 	AddTopTwoStack
.97c8		20 8b 97	jsr $978b			jsr 	SubTopTwoStack 				; do a physical subtraction
.97cb		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.97cd		10 07		bpl $97d6			bpl 	_AddExit
.97cf		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.97d1		95 50		sta $50,x			sta 	NSStatus,x
.97d3		20 8b a3	jsr $a38b			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.97d6						_AddExit:
.97d6		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; check for -0
.97d9		d0 02		bne $97dd			bne 	_AddNonZero
.97db		74 50		stz $50,x			stz 	NSStatus,x
.97dd						_AddNonZero:
.97dd		60		rts				rts
.97de						SubInteger:
.97de		fa		plx				plx
.97df		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97e1		15 51		ora $51,x			ora 	NSStatus+1,x
.97e3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97e4		0a		asl a				asl 	a
.97e5		10 05		bpl $97ec			bpl 	_NotRef
.97e7		48		pha				pha
.97e8		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97eb		68		pla				pla
.97ec						_NotRef:
.97ec		0a		asl a				asl 	a 							; put MSB of type into A:7
.97ed		30 09		bmi $97f8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97ef		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97f1		15 79		ora $79,x			ora 	NSExponent+1,x
.97f3		f0 06		beq $97fb			beq 	_IntegerCode 				; if clear, then we have two integers
.97f5		4c bd 99	jmp $99bd			jmp 	FloatingPointSub 							; otherwise at least one float.
.97f8						_StringData:
.97f8		4c 54 a5	jmp $a554			jmp 	NotDoneError							; at least one string - don't know both are strings.
.97fb						_IntegerCode:
.97fb		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.97fd		49 80		eor #$80			eor 	#$80
.97ff		95 51		sta $51,x			sta 	NSStatus+1,x
.9801		80 bf		bra $97c2			bra 	AddCode 					; and do the same code as add.
.9803						AndInteger:
.9803		fa		plx				plx
.9804		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9806		15 51		ora $51,x			ora 	NSStatus+1,x
.9808		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9809		0a		asl a				asl 	a
.980a		10 05		bpl $9811			bpl 	_NotRef
.980c		48		pha				pha
.980d		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9810		68		pla				pla
.9811						_NotRef:
.9811		0a		asl a				asl 	a
.9812		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9814		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9816		15 79		ora $79,x			ora 	NSExponent+1,x
.9818		f0 03		beq $981d			beq 	_IntegerCode 				; if clear, then we have two integers
.981a		4c 4a a5	jmp $a54a			jmp 	TypeError 					; anything else, type mismatch.
.981d						_IntegerCode:
.981d		b5 58		lda $58,x			lda		NSMantissa0,x
.981f		35 59		and $59,x			and 		NSMantissa0+1,x
.9821		95 58		sta $58,x			sta 	NSMantissa0,x
.9823		b5 60		lda $60,x			lda		NSMantissa1,x
.9825		35 61		and $61,x			and 		NSMantissa1+1,x
.9827		95 60		sta $60,x			sta 	NSMantissa1,x
.9829		b5 68		lda $68,x			lda		NSMantissa2,x
.982b		35 69		and $69,x			and 		NSMantissa2+1,x
.982d		95 68		sta $68,x			sta 	NSMantissa2,x
.982f		b5 70		lda $70,x			lda		NSMantissa3,x
.9831		35 71		and $71,x			and 		NSMantissa3+1,x
.9833		95 70		sta $70,x			sta 	NSMantissa3,x
.9835		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9837		60		rts				rts
.9838						OraInteger:
.9838		fa		plx				plx
.9839		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.983b		15 51		ora $51,x			ora 	NSStatus+1,x
.983d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.983e		0a		asl a				asl 	a
.983f		10 05		bpl $9846			bpl 	_NotRef
.9841		48		pha				pha
.9842		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9845		68		pla				pla
.9846						_NotRef:
.9846		0a		asl a				asl 	a
.9847		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9849		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.984b		15 79		ora $79,x			ora 	NSExponent+1,x
.984d		f0 03		beq $9852			beq 	_IntegerCode 				; if clear, then we have two integers
.984f		4c 4a a5	jmp $a54a			jmp 	TypeError 					; anything else, type mismatch.
.9852						_IntegerCode:
.9852		b5 58		lda $58,x			lda		NSMantissa0,x
.9854		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9856		95 58		sta $58,x			sta 	NSMantissa0,x
.9858		b5 60		lda $60,x			lda		NSMantissa1,x
.985a		15 61		ora $61,x			ora 		NSMantissa1+1,x
.985c		95 60		sta $60,x			sta 	NSMantissa1,x
.985e		b5 68		lda $68,x			lda		NSMantissa2,x
.9860		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9862		95 68		sta $68,x			sta 	NSMantissa2,x
.9864		b5 70		lda $70,x			lda		NSMantissa3,x
.9866		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9868		95 70		sta $70,x			sta 	NSMantissa3,x
.986a		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.986c		60		rts				rts
.986d						EorInteger:
.986d		fa		plx				plx
.986e		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9870		15 51		ora $51,x			ora 	NSStatus+1,x
.9872		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9873		0a		asl a				asl 	a
.9874		10 05		bpl $987b			bpl 	_NotRef
.9876		48		pha				pha
.9877		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.987a		68		pla				pla
.987b						_NotRef:
.987b		0a		asl a				asl 	a
.987c		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.987e		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9880		15 79		ora $79,x			ora 	NSExponent+1,x
.9882		f0 03		beq $9887			beq 	_IntegerCode 				; if clear, then we have two integers
.9884		4c 4a a5	jmp $a54a			jmp 	TypeError 					; anything else, type mismatch.
.9887						_IntegerCode:
.9887		b5 58		lda $58,x			lda		NSMantissa0,x
.9889		55 59		eor $59,x			eor 		NSMantissa0+1,x
.988b		95 58		sta $58,x			sta 	NSMantissa0,x
.988d		b5 60		lda $60,x			lda		NSMantissa1,x
.988f		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9891		95 60		sta $60,x			sta 	NSMantissa1,x
.9893		b5 68		lda $68,x			lda		NSMantissa2,x
.9895		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9897		95 68		sta $68,x			sta 	NSMantissa2,x
.9899		b5 70		lda $70,x			lda		NSMantissa3,x
.989b		55 71		eor $71,x			eor 		NSMantissa3+1,x
.989d		95 70		sta $70,x			sta 	NSMantissa3,x
.989f		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.98a1		60		rts				rts
.98a2						WordIndirect:
.98a2		fa		plx				plx
.98a3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98a5		15 51		ora $51,x			ora 	NSStatus+1,x
.98a7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98a8		0a		asl a				asl 	a
.98a9		10 05		bpl $98b0			bpl 	_NotRef
.98ab		48		pha				pha
.98ac		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98af		68		pla				pla
.98b0						_NotRef:
.98b0		0a		asl a				asl 	a
.98b1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98b3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98b5		15 79		ora $79,x			ora 	NSExponent+1,x
.98b7		f0 03		beq $98bc			beq 	_IntegerCode 				; if clear, then we have two integers
.98b9		4c 4a a5	jmp $a54a			jmp 	TypeError 					; anything else, type mismatch.
.98bc						_IntegerCode:
.98bc		20 c2 97	jsr $97c2			jsr 	AddCode 					; add the two values
.98bf		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.98c1		95 50		sta $50,x			sta 	NSStatus,x
.98c3		60		rts				rts
.98c4						ByteIndirect:
.98c4		fa		plx				plx
.98c5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98c7		15 51		ora $51,x			ora 	NSStatus+1,x
.98c9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98ca		0a		asl a				asl 	a
.98cb		10 05		bpl $98d2			bpl 	_NotRef
.98cd		48		pha				pha
.98ce		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98d1		68		pla				pla
.98d2						_NotRef:
.98d2		0a		asl a				asl 	a
.98d3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98d5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98d7		15 79		ora $79,x			ora 	NSExponent+1,x
.98d9		f0 03		beq $98de			beq 	_IntegerCode 				; if clear, then we have two integers
.98db		4c 4a a5	jmp $a54a			jmp 	TypeError 					; anything else, type mismatch.
.98de						_IntegerCode:
.98de		20 c2 97	jsr $97c2			jsr 	AddCode 					; add the two values
.98e1		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.98e3		95 50		sta $50,x			sta 	NSStatus,x
.98e5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.98e6						ConvertInt16:
.98e6		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.98e8		86 60		stx $60				stx 	NSMantissa1
.98ea		64 68		stz $68				stz 	NSMantissa2
.98ec		64 70		stz $70				stz 	NSMantissa3
.98ee		64 50		stz $50				stz 	NSStatus 					; positive integer
.98f0		a2 00		ldx #$00			ldx 	#0 							; stack level
.98f2		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.98f4		80 00		bra $98f6			bra 	ConvertInt32
.98f6						ConvertInt32:
.98f6		5a		phy				phy
.98f7		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.98f9		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.98fb		10 08		bpl $9905			bpl 	_CI32NotNeg
.98fd		48		pha				pha
.98fe		a9 2d		lda #$2d			lda 	#'-'
.9900		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9903		c8		iny				iny
.9904		68		pla				pla
.9905						_CI32NotNeg:
.9905		20 13 99	jsr $9913			jsr 	_CI32DivideConvert 			; recursive conversion
.9908		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.990a		99 27 06	sta $0627,y			sta 	numberBuffer,y
.990d		7a		ply				ply
.990e		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9910		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9912		60		rts				rts
.9913						_CI32DivideConvert:
.9913		e8		inx				inx 								; write to next slot up
.9914		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte 		 			; write the base out.
.9917		ca		dex				dex
.9918		20 41 96	jsr $9641			jsr 	Int32Divide 				; divide
.991b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.991d		48		pha				pha
.991e		20 fe 95	jsr $95fe			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9921		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; is it zero ?
.9924		f0 05		beq $992b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9926		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9928		20 13 99	jsr $9913			jsr 	_CI32DivideConvert 			; and recusrively call.
.992b						_CI32NoRecurse:
.992b		68		pla				pla 								; remainder
.992c		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.992e		90 02		bcc $9932			bcc 	_CI32NotHex
.9930		69 26		adc #$26			adc 	#6+32
.9932						_CI32NotHex:
.9932		69 30		adc #$30			adc 	#48
.9934		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.9937		c8		iny				iny
.9938		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9939						PrecedenceLevel:
>9939		04					.byte	 4	; $00 <<
>993a		02					.byte	 2	; $01 <=
>993b		02					.byte	 2	; $02 <>
>993c		00					.byte	 0	; $03 !!3
>993d		00					.byte	 0	; $04 ><
>993e		02					.byte	 2	; $05 >=
>993f		04					.byte	 4	; $06 >>
>9940		00					.byte	 0	; $07 !!7
>9941		00					.byte	 0	; $08 !!8
>9942		00					.byte	 0	; $09 !!9
>9943		00					.byte	 0	; $0a !!10
>9944		00					.byte	 0	; $0b !!11
>9945		00					.byte	 0	; $0c !!12
>9946		00					.byte	 0	; $0d !!13
>9947		00					.byte	 0	; $0e !!14
>9948		00					.byte	 0	; $0f !!15
>9949		00					.byte	 0	; $10 @
>994a		00					.byte	 0	; $11 !!17
>994b		00					.byte	 0	; $12 !!18
>994c		00					.byte	 0	; $13 [
>994d		04					.byte	 4	; $14 \
>994e		00					.byte	 0	; $15 ]
>994f		01					.byte	 1	; $16 ^
>9950		00					.byte	 0	; $17 _
>9951		00					.byte	 0	; $18 `
>9952		00					.byte	 0	; $19 !!25
>9953		00					.byte	 0	; $1a !!26
>9954		00					.byte	 0	; $1b {
>9955		01					.byte	 1	; $1c |
>9956		00					.byte	 0	; $1d }
>9957		00					.byte	 0	; $1e ~
>9958		00					.byte	 0	; $1f [7m<7F>[m
>9959		00					.byte	 0	; $20
>995a		05					.byte	 5	; $21 !
>995b		00					.byte	 0	; $22 "
>995c		00					.byte	 0	; $23 #
>995d		05					.byte	 5	; $24 $
>995e		04					.byte	 4	; $25 %
>995f		01					.byte	 1	; $26 &
>9960		00					.byte	 0	; $27 '
>9961		00					.byte	 0	; $28 (
>9962		00					.byte	 0	; $29 )
>9963		04					.byte	 4	; $2a *
>9964		03					.byte	 3	; $2b +
>9965		00					.byte	 0	; $2c ,
>9966		03					.byte	 3	; $2d -
>9967		00					.byte	 0	; $2e .
>9968		04					.byte	 4	; $2f /
>9969		00					.byte	 0	; $30 0
>996a		00					.byte	 0	; $31 1
>996b		00					.byte	 0	; $32 2
>996c		00					.byte	 0	; $33 3
>996d		00					.byte	 0	; $34 4
>996e		00					.byte	 0	; $35 5
>996f		00					.byte	 0	; $36 6
>9970		00					.byte	 0	; $37 7
>9971		00					.byte	 0	; $38 8
>9972		00					.byte	 0	; $39 9
>9973		00					.byte	 0	; $3a :
>9974		00					.byte	 0	; $3b ;
>9975		02					.byte	 2	; $3c <
>9976		02					.byte	 2	; $3d =
>9977		02					.byte	 2	; $3e >
>9978		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9979						EvaluateExpressionAt0:
.9979		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.997b						EvaluateExpression:
.997b		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.997d						EvaluateExpressionAtPrecedence:
.997d		48		pha				pha 								; save precedence level
.997e		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm 				; evaluate term into level X.
.9981		68		pla				pla 								; restore precedence level.
.9982						_EXPRLoop:
.9982		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9984		b1 30		lda ($30),y			lda 	(codePtr),y
.9986		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9988		b0 25		bcs $99af			bcs 	_EXPRExit
.998a		da		phx				phx 								; read the operator precedence
.998b		aa		tax				tax
.998c		bd 39 99	lda $9939,x			lda 	PrecedenceLevel,x
.998f		fa		plx				plx
.9990		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9992		f0 1b		beq $99af			beq 	_EXPRExit
.9994		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9996		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9998		c5 37		cmp $37				cmp 	zTemp0+1
.999a		b0 13		bcs $99af			bcs		_EXPRExit 					; if current >= operator exit
.999c		48		pha				pha 								; save current precedence.
.999d		b1 30		lda ($30),y			lda 	(codePtr),y
.999f		c8		iny				iny
.99a0		48		pha				pha
.99a1		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.99a3		e8		inx				inx 								; work out the right hand side.
.99a4		20 7d 99	jsr $997d			jsr 	EvaluateExpressionAtPrecedence
.99a7		ca		dex				dex
.99a8		68		pla				pla 								; get operator, call the code.
.99a9		20 b2 99	jsr $99b2			jsr 	_EXPRCaller
.99ac		68		pla				pla 								; restore precedence level
.99ad		80 d3		bra $9982			bra 	_EXPRLoop 					; and go round.
.99af						_EXPRExit:
.99af		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.99b1		60		rts				rts
.99b2						_EXPRCaller:
.99b2		da		phx				phx 								; save on stack, first thing is to restore it
.99b3		0a		asl a				asl 	a 							; double so can use vectors into X
.99b4		aa		tax				tax
.99b5		7c 84 90	jmp ($9084,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.99b8						FloatingPointAdd:
.99b8		20 2e 9b	jsr $9b2e			jsr 	FloatPrepare 				; prepare for floats
.99bb		80 09		bra $99c6			bra 	FloatAdd
.99bd						FloatingPointSub:
.99bd		20 2e 9b	jsr $9b2e			jsr 	FloatPrepare 				; prepare for floats
.99c0						FloatSubtract:
.99c0		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.99c2		49 80		eor #$80			eor 	#$80
.99c4		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.99c6						FloatAdd:
.99c6		48		pha				pha
.99c7		5a		phy				phy
.99c8		20 3d 9b	jsr $9b3d			jsr 	NSNormalise 				; normalise S[X]
.99cb		f0 51		beq $9a1e			beq 	_FAReturn1
.99cd		e8		inx				inx 								; normalise S[X+1]
.99ce		20 3d 9b	jsr $9b3d			jsr 	NSNormalise
.99d1		ca		dex				dex
.99d2		c9 00		cmp #$00			cmp 	#0
.99d4		f0 60		beq $9a36			beq 	_FAExit 					; if so, just return A
.99d6		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.99d8		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.99da		f0 18		beq $99f4			beq 	_FAExponentsEqual
.99dc		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.99de		a8		tay				tay
.99df		38		sec				sec 								; do a signed comparison of the exponents.
.99e0		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.99e2		50 02		bvc $99e6			bvc 	_FANoSignedChange
.99e4		49 80		eor #$80			eor 	#$80
.99e6						_FANoSignedChange:
.99e6		29 80		and #$80			and 	#$80
.99e8		10 02		bpl $99ec			bpl 	_FAHaveMax
.99ea		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.99ec						_FAHaveMax:
.99ec		20 39 9a	jsr $9a39			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.99ef		e8		inx				inx
.99f0		20 39 9a	jsr $9a39			jsr 	_FAShiftToExponent
.99f3		ca		dex				dex
.99f4						_FAExponentsEqual:
.99f4		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.99f6		55 51		eor $51,x			eor 	NSStatus+1,x
.99f8		30 0e		bmi $9a08			bmi 	_FADifferentSigns
.99fa		20 71 97	jsr $9771			jsr 	AddTopTwoStack 				; do the add of the mantissae
.99fd		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.99ff		10 35		bpl $9a36			bpl 	_FAExit 					; if no, we are done.
.9a01		20 db a3	jsr $a3db			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9a04		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9a06		80 2e		bra $9a36			bra 	_FAExit
.9a08						_FADifferentSigns:
.9a08		20 8b 97	jsr $978b			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9a0b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9a0d		10 06		bpl $9a15			bpl 	_FACheckZero 				; if no, check for -0
.9a0f		20 84 a3	jsr $a384			jsr 	NSMNegate 					; netate result
.9a12		20 8b a3	jsr $a38b			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9a15						_FACheckZero:
.9a15		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero	 				; check for -0
.9a18		d0 1c		bne $9a36			bne 	_FAExit
.9a1a		74 50		stz $50,x			stz 	NSStatus,x
.9a1c		80 18		bra $9a36			bra 	_FAExit
.9a1e						_FAReturn1:
.9a1e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9a20		95 58		sta $58,x			sta 	NSMantissa0,x
.9a22		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a24		95 60		sta $60,x			sta 	NSMantissa1,x
.9a26		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9a28		95 68		sta $68,x			sta 	NSMantissa2,x
.9a2a		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9a2c		95 70		sta $70,x			sta 	NSMantissa3,x
.9a2e		b5 79		lda $79,x			lda 	NSExponent+1,x
.9a30		95 78		sta $78,x			sta 	NSExponent,x
.9a32		b5 51		lda $51,x			lda 	NSStatus+1,x
.9a34		95 50		sta $50,x			sta 	NSStatus,x
.9a36						_FAExit:
.9a36		7a		ply				ply
.9a37		68		pla				pla
.9a38		60		rts				rts
.9a39						_FAShiftToExponent:
.9a39						_FAShiftToExponent2:
.9a39		98		tya				tya 								; compare Y to exponent
.9a3a		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9a3c		f0 07		beq $9a45			beq 	_FASEExit 					; exit if so.
.9a3e		20 db a3	jsr $a3db			jsr 	NSMShiftRight	 			; shift the mantissa right
.9a41		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9a43		80 f4		bra $9a39			bra 	_FAShiftToExponent2
.9a45						_FASEExit:
.9a45		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9a46						CompareFloat:
.9a46		20 c0 99	jsr $99c0			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9a49		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9a4b		29 f8		and #$f8			and 	#$F8
.9a4d		15 68		ora $68,x			ora 	NSMantissa2,x
.9a4f		15 70		ora $70,x			ora 	NSMantissa3,x
.9a51		f0 08		beq $9a5b			beq 	_FCExit 					; zero, so approximately identical
.9a53		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9a55		34 50		bit $50,x			bit 	NSStatus,x
.9a57		10 02		bpl $9a5b			bpl 	_FCExit
.9a59						_FCNegative:
.9a59		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9a5b						_FCExit:
.9a5b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9a5c						FDivideCommand:
.9a5c		fa		plx				plx	 								; restore stack position
.9a5d		20 2e 9b	jsr $9b2e			jsr 	FloatPrepare 				; prepare for floats
.9a60						FloatDivide:
.9a60		48		pha				pha
.9a61		e8		inx				inx
.9a62		20 3d 9b	jsr $9b3d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a65		ca		dex				dex
.9a66		c9 00		cmp #$00			cmp 	#0
.9a68		f0 1d		beq $9a87			beq 	_FDZero
.9a6a		20 3d 9b	jsr $9b3d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a6d		f0 16		beq $9a85			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9a6f		20 62 96	jsr $9662			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9a72		20 fe 95	jsr $95fe			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9a75		20 3d 9b	jsr $9b3d			jsr		NSNormalise 				; renormalise
.9a78		20 f2 96	jsr $96f2			jsr 	CalculateSign 				; calculate result sign
.9a7b		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9a7d		38		sec				sec
.9a7e		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9a80		38		sec				sec
.9a81		e9 1e		sbc #$1e			sbc 	#30
.9a83		95 78		sta $78,x			sta 	NSExponent,x
.9a85						_FDExit:
.9a85		68		pla				pla
.9a86		60		rts				rts
.9a87						_FDZero:
.9a87		a9 03		lda #$03		lda	#3
.9a89		4c 77 94	jmp $9477		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9a8c						FloatFractionalPart:
.9a8c		5a		phy				phy
.9a8d		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9a8f		29 7f		and #$7f			and 	#$7F
.9a91		95 50		sta $50,x			sta 	NSStatus,x
.9a93		20 3d 9b	jsr $9b3d			jsr 	NSNormalise
.9a96		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9a98		38		sec				sec
.9a99		e9 e0		sbc #$e0			sbc 	#$E0
.9a9b		90 29		bcc $9ac6			bcc 	_FFPExit 					; already fractional
.9a9d		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9a9f		b0 22		bcs $9ac3			bcs 	_FFPZero
.9aa1		a8		tay				tay 								; put count to do in Y
.9aa2		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9aa4		20 c8 9a	jsr $9ac8			jsr 	_FFPPartial
.9aa7		95 70		sta $70,x			sta 	NSMantissa3,x
.9aa9		b5 68		lda $68,x			lda 	NSMantissa2,x
.9aab		20 c8 9a	jsr $9ac8			jsr 	_FFPPartial
.9aae		95 68		sta $68,x			sta 	NSMantissa2,x
.9ab0		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ab2		20 c8 9a	jsr $9ac8			jsr 	_FFPPartial
.9ab5		95 60		sta $60,x			sta 	NSMantissa1,x
.9ab7		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ab9		20 c8 9a	jsr $9ac8			jsr 	_FFPPartial
.9abc		95 58		sta $58,x			sta 	NSMantissa0,x
.9abe		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; zeroed check.
.9ac1		d0 03		bne $9ac6			bne 	_FFPExit
.9ac3						_FFPZero:
.9ac3		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero
.9ac6						_FFPExit:
.9ac6		7a		ply				ply
.9ac7		60		rts				rts
.9ac8						_FFPPartial:
.9ac8		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9aca		f0 17		beq $9ae3			beq 	_FFFPPExit
.9acc		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9ace		b0 0c		bcs $9adc			bcs 	_FFFPPWholeByte
.9ad0		5a		phy				phy
.9ad1						_FFFPPLeft:
.9ad1		0a		asl a				asl 	a
.9ad2		88		dey				dey
.9ad3		d0 fc		bne $9ad1			bne 	_FFFPPLeft
.9ad5		7a		ply				ply
.9ad6						_FFFPPRight:
.9ad6		4a		lsr a				lsr 	a
.9ad7		88		dey				dey
.9ad8		d0 fc		bne $9ad6			bne 	_FFFPPRight
.9ada		80 07		bra $9ae3			bra 	_FFFPPExit
.9adc						_FFFPPWholeByte:
.9adc		98		tya				tya 								; subtract 8 from count
.9add		38		sec				sec
.9ade		e9 08		sbc #$08			sbc 	#8
.9ae0		a8		tay				tay
.9ae1		a9 00		lda #$00			lda 	#0 							; and clear all
.9ae3						_FFFPPExit:
.9ae3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9ae4						FloatIntegerPart:
.9ae4		48		pha				pha
.9ae5		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9ae7		f0 1d		beq $9b06			beq 	_FIPExit 					; if so do nothing
.9ae9		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; is it zero ?
.9aec		f0 15		beq $9b03			beq 	_FIPZero 					; if so return zero.
.9aee		20 3d 9b	jsr $9b3d			jsr 	NSNormalise 				; normalise
.9af1		f0 10		beq $9b03			beq 	_FIPZero 					; normalised to zero, exit zero
.9af3						_FIPShift:
.9af3		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9af5		10 07		bpl $9afe			bpl 	_FIPCheckZero
.9af7		20 db a3	jsr $a3db			jsr 	NSMShiftRight 				; shift mantissa right
.9afa		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9afc		80 f5		bra $9af3			bra 	_FIPShift
.9afe						_FIPCheckZero:
.9afe		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; avoid -0 problem
.9b01		d0 03		bne $9b06			bne 	_FIPExit 					; set to zero if mantissa zero.
.9b03						_FIPZero:
.9b03		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero
.9b06						_FIPExit:
.9b06		68		pla				pla
.9b07		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9b08						FloatingPointMultiply:
.9b08		20 2e 9b	jsr $9b2e			jsr 	FloatPrepare 				; prepare for floats
.9b0b						FloatMultiply:
.9b0b		48		pha				pha
.9b0c		20 3d 9b	jsr $9b3d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9b0f		f0 18		beq $9b29			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9b11		e8		inx				inx
.9b12		20 3d 9b	jsr $9b3d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9b15		ca		dex				dex
.9b16		c9 00		cmp #$00			cmp 	#0
.9b18		f0 0c		beq $9b26			beq 	_FDSetZero
.9b1a		20 b4 96	jsr $96b4			jsr 	MultiplyShort 				; calculate the result.
.9b1d		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9b1f		18		clc				clc
.9b20		75 79		adc $79,x			adc 	NSExponent+1,x
.9b22		95 78		sta $78,x			sta 	NSExponent,x
.9b24		80 03		bra $9b29			bra 	_FDExit
.9b26						_FDSetZero:
.9b26		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero 					; return 0
.9b29						_FDExit:
.9b29		20 3d 9b	jsr $9b3d			jsr 	NSNormalise 				; normalise the result
.9b2c		68		pla				pla
.9b2d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9b2e						FloatPrepare:
.9b2e		20 39 9c	jsr $9c39			jsr 	DereferenceTopTwo 			; dereference the top two values
.9b31		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9b33		15 51		ora $51,x			ora 	NSStatus+1,x
.9b35		29 10		and #$10			and 	#NSBIsString
.9b37		d0 01		bne $9b3a			bne 	_FDType
.9b39		60		rts				rts
.9b3a						_FDType:
.9b3a		4c 4a a5	jmp $a54a			jmp 	TypeError
.9b3d						NSNormalise:
.9b3d		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9b3f		29 80		and #$80			and 	#$80
.9b41		09 08		ora #$08			ora 	#NSTFloat
.9b43		95 50		sta $50,x			sta 	NSStatus,x
.9b45		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; if zero exit
.9b48		d0 07		bne $9b51			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9b4a		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9b4c		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9b4e		a9 00		lda #$00			lda 	#0 							; set Z flag
.9b50		60		rts				rts
.9b51						_NSNormaliseOptimise:
.9b51		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9b53		d0 19		bne $9b6e			bne 	_NSNormaliseLoop
.9b55		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9b57		30 15		bmi $9b6e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9b59		95 70		sta $70,x			sta 	NSMantissa3,x
.9b5b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b5d		95 68		sta $68,x			sta 	NSMantissa2,x
.9b5f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b61		95 60		sta $60,x			sta 	NSMantissa1,x
.9b63		74 58		stz $58,x			stz 	NSMantissa0,x
.9b65		b5 78		lda $78,x			lda 	NSExponent,x
.9b67		38		sec				sec
.9b68		e9 08		sbc #$08			sbc 	#8
.9b6a		95 78		sta $78,x			sta 	NSExponent,x
.9b6c		80 e3		bra $9b51			bra 	_NSNormaliseOptimise
.9b6e						_NSNormaliseLoop:
.9b6e		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9b70		70 07		bvs $9b79			bvs 	_NSNExit 					; exit if so with Z flag clear
.9b72		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; shift mantissa left
.9b75		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9b77		80 f5		bra $9b6e			bra 	_NSNormaliseLoop
.9b79						_NSNExit:
.9b79		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9b7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9b7c						AssignNumber:
.9b7c		5a		phy				phy
.9b7d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9b7f		85 36		sta $36				sta 	zTemp0
.9b81		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b83		85 37		sta $37				sta 	zTemp0+1
.9b85		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9b87		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9b89		95 50		sta $50,x			sta 	NSStatus,x
.9b8b		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9b8d		c9 08		cmp #$08			cmp 	#NSTFloat
.9b8f		f0 24		beq $9bb5			beq 	_ANFloat
.9b91		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9b93		f0 03		beq $9b98			beq		_ANNotFloat
.9b95		4c 45 a5	jmp $a545			jmp 	RangeError					; if it is, report an error.
.9b98						_ANNotFloat:
.9b98		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9b9a		29 03		and #$03			and 	#3
.9b9c		d0 05		bne $9ba3			bne 	_ANByteWord
.9b9e		20 c0 9b	jsr $9bc0			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ba1		80 1b		bra $9bbe			bra 	_ANExit
.9ba3						_ANByteWord:
.9ba3		48		pha				pha 								; save count
.9ba4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9ba6		92 36		sta ($36)			sta 	(zTemp0)
.9ba8		68		pla				pla
.9ba9		c9 01		cmp #$01			cmp	 	#1
.9bab		f0 11		beq $9bbe			beq 	_ANExit
.9bad		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9baf		a0 01		ldy #$01			ldy 	#1
.9bb1		91 36		sta ($36),y			sta 	(zTemp0),y
.9bb3		80 09		bra $9bbe			bra 	_ANExit
.9bb5						_ANFloat:
.9bb5		20 c0 9b	jsr $9bc0			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9bb8		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9bba		a0 04		ldy #$04			ldy 	#4
.9bbc		91 36		sta ($36),y			sta 	(zTemp0),y
.9bbe						_ANExit:
.9bbe		7a		ply				ply
.9bbf		60		rts				rts
.9bc0						_ANCopy4PackSign:
.9bc0		a0 03		ldy #$03			ldy 	#3
.9bc2		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9bc4		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9bc6		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9bc8		91 36		sta ($36),y			sta 	(zTemp0),y
.9bca		88		dey				dey
.9bcb		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9bcd		91 36		sta ($36),y			sta 	(zTemp0),y
.9bcf		88		dey				dey
.9bd0		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9bd2		91 36		sta ($36),y			sta 	(zTemp0),y
.9bd4		88		dey				dey
.9bd5		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9bd7		91 36		sta ($36),y			sta 	(zTemp0),y
.9bd9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9bda						AssignString:
.9bda		5a		phy				phy
.9bdb		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9bdd		85 38		sta $38				sta 	zTemp1
.9bdf		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9be1		85 39		sta $39				sta 	zTemp1+1
.9be3		b5 58		lda $58,x			lda 	NSMantissa0,x
.9be5		85 36		sta $36				sta 	zTemp0
.9be7		b5 60		lda $60,x			lda 	NSMantissa1,x
.9be9		85 37		sta $37				sta 	zTemp0+1
.9beb		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9bed		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bef		f0 23		beq $9c14			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9bf1		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9bf2		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9bf4		e9 02		sbc #$02			sbc 	#2
.9bf6		85 3c		sta $3c				sta 	zsTemp
.9bf8		a0 01		ldy #$01			ldy 	#1
.9bfa		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bfc		e9 00		sbc #$00			sbc 	#0
.9bfe		85 3d		sta $3d				sta 	zsTemp+1
.9c00		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9c02						_ASGetLength:
.9c02		c8		iny				iny
.9c03		b1 38		lda ($38),y			lda 	(zTemp1),y
.9c05		d0 fb		bne $9c02			bne 	_ASGetLength
.9c07		98		tya				tya 								; is this length <= current length
.9c08		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9c0a		90 1e		bcc $9c2a			bcc 	_ASCopyString
.9c0c		f0 1c		beq $9c2a			beq 	_ASCopyString
.9c0e		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9c10		a0 01		ldy #$01			ldy 	#1
.9c12		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9c14						_ASNewStringRequired:
.9c14		e8		inx				inx 								; concrete the new string.
.9c15		20 14 b5	jsr $b514			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9c18		ca		dex				dex
.9c19		18		clc				clc
.9c1a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9c1c		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9c1e		92 36		sta ($36)			sta 	(zTemp0)
.9c20		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9c22		69 00		adc #$00			adc 	#0
.9c24		a0 01		ldy #$01			ldy 	#1
.9c26		91 36		sta ($36),y			sta 	(zTemp0),y
.9c28		80 0d		bra $9c37			bra 	_ASExit
.9c2a						_ASCopyString:
.9c2a		a0 00		ldy #$00			ldy 	#0
.9c2c						_ASCopyLoop:
.9c2c		b1 38		lda ($38),y			lda 	(zTemp1),y
.9c2e		c8		iny				iny
.9c2f		c8		iny				iny
.9c30		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9c32		88		dey				dey
.9c33		c9 00		cmp #$00			cmp 	#0
.9c35		d0 f5		bne $9c2c			bne 	_ASCopyLoop
.9c37						_ASExit:
.9c37		7a		ply				ply
.9c38		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9c39						DereferenceTopTwo:
.9c39		e8		inx				inx
.9c3a		20 3e 9c	jsr $9c3e			jsr 	Dereference 				; deref x+1
.9c3d		ca		dex				dex  								; falls through to deref x
.9c3e						Dereference:
.9c3e		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9c40		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9c42		f0 48		beq $9c8c			beq 	_DRFExit 					; not a reference, so exit.
.9c44		5a		phy				phy
.9c45		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9c47		85 36		sta $36				sta 	zTemp0
.9c49		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c4b		85 37		sta $37				sta 	zTemp0+1
.9c4d		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9c4f		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9c51		95 58		sta $58,x			sta 	NSMantissa0,x
.9c53		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9c55		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9c57		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9c59		f0 0e		beq $9c69			beq 	_DRFDereferenceTwo
.9c5b		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9c5d		f0 2f		beq $9c8e			beq 	_DRFFull
.9c5f		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9c61		29 03		and #$03			and 	#3
.9c63		f0 29		beq $9c8e			beq 	_DRFFull 					; the whole word
.9c65		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9c67		f0 06		beq $9c6f			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9c69						_DRFDereferenceTwo:
.9c69		a0 01		ldy #$01			ldy 	#1
.9c6b		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c6d		95 60		sta $60,x			sta 	NSMantissa1,x
.9c6f						_DRFClear23:
.9c6f		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9c71		74 70		stz $70,x			stz 	NSMantissa3,x
.9c73		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9c75		29 18		and #$18			and 	#NSBTypeMask
.9c77		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9c79		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9c7b		d0 0e		bne $9c8b			bne 	_DRFNotString
.9c7d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9c7f		15 60		ora $60,x			ora 	NSMantissa1,x
.9c81		d0 08		bne $9c8b			bne 	_DRFNotString
.9c83		a9 8d		lda #$8d			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9c85		95 58		sta $58,x			sta 	NSMantissa0,x
.9c87		a9 9c		lda #$9c			lda 	#_DRFNullString >> 8
.9c89		95 60		sta $60,x			sta 	NSMantissa1,x
.9c8b						_DRFNotString
.9c8b		7a		ply				ply 								; restore Y and exit
.9c8c						_DRFExit:
.9c8c		60		rts				rts
.9c8d						_DRFNullString:
>9c8d		00						.byte 	0
.9c8e						_DRFFull:
.9c8e		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9c90		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c92		95 60		sta $60,x			sta 	NSMantissa1,x
.9c94		c8		iny				iny
.9c95		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c97		95 68		sta $68,x			sta 	NSMantissa2,x
.9c99		c8		iny				iny
.9c9a		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c9c		95 70		sta $70,x			sta 	NSMantissa3,x
.9c9e		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9ca0		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9ca2		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9ca4		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9ca6		f0 05		beq $9cad			beq 	_DRFNoExponent
.9ca8		c8		iny				iny 								; if not, read the exponent as well.
.9ca9		b1 36		lda ($36),y			lda 	(zTemp0),y
.9cab		95 78		sta $78,x			sta 	NSExponent,x
.9cad						_DRFNoExponent:
.9cad		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9caf		10 0a		bpl $9cbb			bpl 	_DRFExit2 					; if not, then exit.
.9cb1		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9cb3		95 70		sta $70,x			sta 	NSMantissa3,x
.9cb5		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9cb7		09 80		ora #$80			ora 	#NSBIsNegative
.9cb9		95 50		sta $50,x			sta 	NSStatus,x
.9cbb						_DRFExit2:
.9cbb		7a		ply				ply
.9cbc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9cbd						EncodeNumberStart:
.9cbd		38		sec				sec
.9cbe		80 01		bra $9cc1			bra 	EncodeNumberContinue+1
.9cc0						EncodeNumberContinue:
.9cc0		18		clc				clc
.9cc1						EncodeNumber:
.9cc1		08		php				php 								; save reset flag.
.9cc2		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9cc4		f0 12		beq $9cd8			beq 	_ENIsOkay
.9cc6		c9 30		cmp #$30			cmp 	#"0"
.9cc8		90 04		bcc $9cce			bcc 	_ENBadNumber
.9cca		c9 3a		cmp #$3a			cmp 	#"9"+1
.9ccc		90 0a		bcc $9cd8			bcc 	_ENIsOkay
.9cce						_ENBadNumber:
.9cce		28		plp				plp 								; throw saved reset
.9ccf		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9cd2		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9cd4		f0 7b		beq $9d51			beq 	_ENConstructFinal
.9cd6						_ENFail:
.9cd6		18		clc				clc 								; not allowed
.9cd7		60		rts				rts
.9cd8						_ENIsOkay:
.9cd8		28		plp				plp 								; are we restarting
.9cd9		90 15		bcc $9cf0			bcc 	_ENNoRestart
.9cdb						_ENStartEncode:
.9cdb		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9cdd		f0 0c		beq $9ceb			beq 	_ENFirstDP
.9cdf		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9ce1		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte 					; in single byte mode.
.9ce4		a9 01		lda #$01			lda 	#ESTA_Low
.9ce6						_ENExitChange:
.9ce6		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9ce9		38		sec				sec
.9cea		60		rts				rts
.9ceb						_ENFirstDP:
.9ceb		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero 					; clear integer part
.9cee		80 3c		bra $9d2c			bra 	_ESTASwitchFloat			; go straight to float and exi
.9cf0						_ENNoRestart:
.9cf0		48		pha				pha 								; save digit or DP on stack.
.9cf1		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9cf4		c9 01		cmp #$01			cmp 	#ESTA_Low
.9cf6		f0 09		beq $9d01			beq  	_ESTALowState
.9cf8		c9 02		cmp #$02			cmp 	#ESTA_High
.9cfa		f0 26		beq $9d22			beq 	_ESTAHighState
.9cfc		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9cfe		f0 38		beq $9d38			beq 	_ESTADecimalState
>9d00		db						.byte 	$DB 						; causes a break in the emulator
.9d01						_ESTALowState:
.9d01		68		pla				pla 								; get value back
.9d02		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9d04		f0 26		beq $9d2c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9d06		29 0f		and #$0f			and 	#15 						; make digit
.9d08		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9d0b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9d0d		0a		asl a				asl 	a
.9d0e		0a		asl a				asl 	a
.9d0f		75 58		adc $58,x			adc 	NSMantissa0,x
.9d11		0a		asl a				asl 	a
.9d12		6d 06 04	adc $0406			adc 	digitTemp
.9d15		95 58		sta $58,x			sta 	NSMantissa0,x
.9d17		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9d19		90 05		bcc $9d20			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9d1b		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9d1d		8d 05 04	sta $0405			sta 	encodeState
.9d20						_ESTANoSwitch:
.9d20		38		sec				sec
.9d21		60		rts				rts
.9d22						_ESTAHighState:
.9d22		68		pla				pla 								; get value back
.9d23		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9d25		f0 05		beq $9d2c			beq 	_ESTASwitchFloat
.9d27		20 85 9d	jsr $9d85			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9d2a		38		sec				sec
.9d2b		60		rts				rts
.9d2c						_ESTASwitchFloat:
.9d2c		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9d2f		e8		inx				inx 								; zero the decimal additive.
.9d30		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero
.9d33		ca		dex				dex
.9d34		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9d36		80 ae		bra $9ce6			bra 	_ENExitChange
.9d38						_ESTADecimalState:
.9d38		68		pla				pla 								; digit.
.9d39		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9d3b		f0 99		beq $9cd6			beq 	_ENFail
.9d3d		e8		inx				inx 								; put digit into fractional part of X+1
.9d3e		20 85 9d	jsr $9d85			jsr 	ESTAShiftDigitIntoMantissa
.9d41		ca		dex				dex
.9d42		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9d45		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9d48		c9 0b		cmp #$0b			cmp 	#11
.9d4a		f0 02		beq $9d4e			beq 	_ESTADSFail
.9d4c		38		sec				sec
.9d4d		60		rts				rts
.9d4e						_ESTADSFail:
.9d4e		4c 45 a5	jmp $a545			jmp 	RangeError
.9d51						_ENConstructFinal:
.9d51		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9d54		f0 2d		beq $9d83			beq 	_ENCFExit 					; no decimals
.9d56		5a		phy				phy
.9d57		0a		asl a				asl 	a 							; x 4 and CLC
.9d58		0a		asl a				asl 	a
.9d59		6d 07 04	adc $0407			adc 	decimalCount
.9d5c		a8		tay				tay
.9d5d		b9 04 a5	lda $a504,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9d60		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9d62		b9 05 a5	lda $a505,y			lda 	DecimalScalarTable-5+1,y
.9d65		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9d67		b9 06 a5	lda $a506,y			lda 	DecimalScalarTable-5+2,y
.9d6a		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9d6c		b9 07 a5	lda $a507,y			lda 	DecimalScalarTable-5+3,y
.9d6f		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9d71		b9 08 a5	lda $a508,y			lda 	DecimalScalarTable-5+4,y
.9d74		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9d76		a9 08		lda #$08			lda 	#NSTFloat
.9d78		95 52		sta $52,x			sta 	NSStatus+2,x
.9d7a		7a		ply				ply
.9d7b		e8		inx				inx 								; multiply decimal const by decimal scalar
.9d7c		20 0b 9b	jsr $9b0b			jsr 	FloatMultiply
.9d7f		ca		dex				dex
.9d80		20 c6 99	jsr $99c6			jsr 	FloatAdd 					; add to integer part.
.9d83						_ENCFExit:
.9d83		18		clc				clc 								; reject the digit.
.9d84		60		rts				rts
.9d85						ESTAShiftDigitIntoMantissa:
.9d85		29 0f		and #$0f			and 	#15 						; save digit
.9d87		48		pha				pha
.9d88		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9d8a		48		pha				pha
.9d8b		b5 68		lda $68,x			lda 	NSMantissa2,x
.9d8d		48		pha				pha
.9d8e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d90		48		pha				pha
.9d91		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d93		48		pha				pha
.9d94		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; x 2
.9d97		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; x 4
.9d9a		18		clc				clc 								; pop mantissa and add
.9d9b		68		pla				pla
.9d9c		75 58		adc $58,x			adc 	NSMantissa0,x
.9d9e		95 58		sta $58,x			sta 	NSMantissa0,x
.9da0		68		pla				pla
.9da1		75 60		adc $60,x			adc 	NSMantissa1,x
.9da3		95 60		sta $60,x			sta 	NSMantissa1,x
.9da5		68		pla				pla
.9da6		75 68		adc $68,x			adc 	NSMantissa2,x
.9da8		95 68		sta $68,x			sta 	NSMantissa2,x
.9daa		68		pla				pla
.9dab		75 70		adc $70,x			adc 	NSMantissa3,x
.9dad		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9daf		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; x 10
.9db2		68		pla				pla 								; add digit
.9db3		18		clc				clc
.9db4		75 58		adc $58,x			adc 	NSMantissa0,x
.9db6		95 58		sta $58,x			sta 	NSMantissa0,x
.9db8		90 0a		bcc $9dc4			bcc 	_ESTASDExit
.9dba		f6 60		inc $60,x			inc 	NSMantissa1,x
.9dbc		d0 06		bne $9dc4			bne 	_ESTASDExit
.9dbe		f6 68		inc $68,x			inc 	NSMantissa2,x
.9dc0		d0 02		bne $9dc4			bne 	_ESTASDExit
.9dc2		f6 70		inc $70,x			inc 	NSMantissa3,x
.9dc4						_ESTASDExit:
.9dc4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9dc5						EvaluateTerm:
.9dc5		b1 30		lda ($30),y			lda 	(codePtr),y
.9dc7		30 18		bmi $9de1			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9dc9		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9dcb		b0 6c		bcs $9e39			bcs 	_ETVariable
.9dcd		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9dcf		90 6b		bcc $9e3c			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9dd1		c9 3a		cmp #$3a			cmp 	#'9'+1
.9dd3		b0 67		bcs $9e3c			bcs 	_ETPuncUnary
.9dd5		20 bd 9c	jsr $9cbd			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9dd8						_ETNumber:
.9dd8		c8		iny				iny 								; keep encoding until we have the numbers
.9dd9		b1 30		lda ($30),y			lda 	(codePtr),y
.9ddb		20 c0 9c	jsr $9cc0			jsr 	EncodeNumberContinue
.9dde		b0 f8		bcs $9dd8			bcs 	_ETNumber 					; go back if accepted.
.9de0		60		rts				rts
.9de1						_ETCheckUnary:
.9de1		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9de3		f0 3f		beq $9e24			beq 	_ETString
.9de5		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9de7		f0 12		beq $9dfb			beq 	_ETHexConstant
.9de9		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9deb		90 0b		bcc $9df8			bcc 	_ETSyntaxError
.9ded		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1
.9def		b0 07		bcs $9df8			bcs 	_ETSyntaxError
.9df1		da		phx				phx 								; push X on the stack
.9df2		0a		asl a				asl 	a 							; put vector x 2 into X
.9df3		aa		tax				tax
.9df4		c8		iny				iny 								; consume unary function token
.9df5		7c 04 91	jmp ($9104,x)			jmp 	(VectorSet0,x) 				; and do it.
.9df8						_ETSyntaxError:
.9df8		4c 40 a5	jmp $a540			jmp 	SyntaxError
.9dfb						_ETHexConstant:
.9dfb		c8		iny				iny 								; skip #
.9dfc		c8		iny				iny 								; skip count
.9dfd		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero 					; clear result
.9e00						_ETHLoop:
.9e00		b1 30		lda ($30),y			lda 	(codePtr),y
.9e02		c8		iny				iny 								; and consume
.9e03		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9e05		f0 1c		beq $9e23			beq 	_ETHExit
.9e07		48		pha				pha 								; save on stack.
.9e08		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; x 2
.9e0b		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; x 4
.9e0e		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; x 8
.9e11		20 d1 a3	jsr $a3d1			jsr 	NSMShiftLeft 				; x 16
.9e14		68		pla				pla 								; ASCII
.9e15		c9 41		cmp #$41			cmp 	#'A'
.9e17		90 02		bcc $9e1b			bcc 	_ETHNotChar
.9e19		e9 07		sbc #$07			sbc 	#7
.9e1b						_ETHNotChar:
.9e1b		29 0f		and #$0f			and 	#15 						; digit now
.9e1d		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9e1f		95 58		sta $58,x			sta 	NSMantissa0,x
.9e21		80 dd		bra $9e00			bra 	_ETHLoop 					; go round.
.9e23						_ETHExit:
.9e23		60		rts				rts
.9e24						_ETString:
.9e24		c8		iny				iny 								; look at length
.9e25		b1 30		lda ($30),y			lda 	(codePtr),y
.9e27		48		pha				pha
.9e28		c8		iny				iny 								; first character
.9e29		20 3c ab	jsr $ab3c			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9e2c		68		pla				pla 								; restore count and save
.9e2d		85 36		sta $36				sta 	zTemp0
.9e2f		98		tya				tya 								; add length to Y to skip it.
.9e30		18		clc				clc
.9e31		65 36		adc $36				adc 	zTemp0
.9e33		a8		tay				tay
.9e34		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9e36		95 50		sta $50,x			sta 	NSStatus,x
.9e38		60		rts				rts
.9e39						_ETVariable:
.9e39		4c 8e 9e	jmp $9e8e			jmp 	VariableHandler
.9e3c						_ETPuncUnary:
.9e3c		c8		iny				iny 								; consume the unary character
.9e3d		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9e3f		f0 2b		beq $9e6c			beq 	_ETUnaryNegate
.9e41		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9e43		f0 36		beq $9e7b			beq 	_ETDereference
.9e45		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9e47		f0 3e		beq $9e87			beq 	_ETParenthesis
.9e49		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9e4b		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9e4d		f0 06		beq $9e55			beq 	_ETIndirection
.9e4f		e6 36		inc $36				inc 	zTemp0
.9e51		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9e53		d0 a3		bne $9df8			bne 	_ETSyntaxError
.9e55						_ETIndirection:
.9e55		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9e57		1a		inc a				inc 	a
.9e58		48		pha				pha
.9e59		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm				; evaluate the term
.9e5c		20 3e 9c	jsr $9c3e			jsr 	Dereference 				; dereference it.
.9e5f		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9e61		d0 06		bne $9e69			bne 	_ETTypeMismatch
.9e63		68		pla				pla 								; indirection 1-2
.9e64		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9e66		95 50		sta $50,x			sta 	NSStatus,x
.9e68		60		rts				rts
.9e69						_ETTypeMismatch:
.9e69		4c 4a a5	jmp $a54a			jmp 	TypeError
.9e6c						_ETUnaryNegate:
.9e6c		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm				; evaluate the term
.9e6f		20 3e 9c	jsr $9c3e			jsr 	Dereference 				; dereference it.
.9e72		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9e74		29 10		and #$10			and 	#NSTString
.9e76		d0 f1		bne $9e69			bne 	_ETTypeMismatch
.9e78		4c 84 a3	jmp $a384			jmp 	NSMNegate  					; just toggles the sign bit.
.9e7b						_ETDereference:
.9e7b		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm				; evaluate the term
.9e7e		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9e80		29 20		and #$20			and 	#NSBIsReference
.9e82		f0 e5		beq $9e69			beq 	_ETTypeMismatch
.9e84		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9e86		60		rts				rts
.9e87						_ETParenthesis:
.9e87		20 7b 99	jsr $997b			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9e8a		20 5e 94	jsr $945e			jsr 	CheckRightBracket 			; check for )
.9e8d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9e8e						VariableHandler:
.9e8e		b1 30		lda ($30),y			lda 	(codePtr),y
.9e90		18		clc				clc
.9e91		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e93		85 37		sta $37				sta 	zTemp0+1
.9e95		c8		iny				iny
.9e96		b1 30		lda ($30),y			lda 	(codePtr),y
.9e98		85 36		sta $36				sta 	zTemp0
.9e9a		c8		iny				iny
.9e9b		18		clc				clc									; copy variable address+3 to mantissa
.9e9c		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9e9e		95 58		sta $58,x			sta 	NSMantissa0,x
.9ea0		a5 37		lda $37				lda 	zTemp0+1
.9ea2		69 00		adc #$00			adc 	#0
.9ea4		95 60		sta $60,x			sta 	NSMantissa1,x
.9ea6		74 68		stz $68,x			stz 	NSMantissa2,x
.9ea8		74 70		stz $70,x			stz 	NSMantissa3,x
.9eaa		74 78		stz $78,x			stz 	NSExponent,x
.9eac		5a		phy				phy
.9ead		a0 02		ldy #$02			ldy 	#2 							; read type
.9eaf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9eb1		7a		ply				ply
.9eb2		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9eb4		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9eb6		95 50		sta $50,x			sta 	NSStatus,x
.9eb8		29 04		and #$04			and 	#NSBIsArray
.9eba		d0 01		bne $9ebd			bne 	_VHArray
.9ebc		60		rts				rts
.9ebd						_VHArray:
.9ebd		e8		inx				inx
.9ebe		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9ec1		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9ec3		95 51		sta $51,x			sta 	NSStatus+1,x
.9ec5		b1 30		lda ($30),y			lda 	(codePtr),y
.9ec7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9ec9		d0 06		bne $9ed1			bne 	_VHNoSecondIndex
.9ecb		c8		iny				iny 								; skip the comma
.9ecc		e8		inx				inx
.9ecd		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9ed0		ca		dex				dex
.9ed1						_VHNoSecondIndex:
.9ed1		ca		dex				dex 								; set X back.
.9ed2		20 5e 94	jsr $945e			jsr 	CheckRightBracket 			; and check the right bracket.
.9ed5		5a		phy				phy 								; save position
.9ed6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9ed8		85 3e		sta $3e				sta 	zaTemp
.9eda		b5 60		lda $60,x			lda 	NSMantissa1,x
.9edc		85 3f		sta $3f				sta 	zaTemp+1
.9ede		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9ee0		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ee2		f0 5d		beq $9f41			beq 	_VHBadArray
.9ee4		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9ee6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ee8		f0 02		beq $9eec			beq 	_VHHas2Mask
.9eea		a9 ff		lda #$ff			lda 	#$FF
.9eec						_VHHas2Mask:
.9eec		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9eee		f0 4c		beq $9f3c			beq 	_VHBadIndex
.9ef0		0a		asl a				asl 	a 							; carry will be set if a second index
.9ef1		90 08		bcc $9efb			bcc 	_VHCheckFirstIndex
.9ef3		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9ef5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ef7		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9ef9		90 41		bcc $9f3c			bcc 	_VHBadIndex
.9efb						_VHCheckFirstIndex:
.9efb		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9efd		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9eff		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9f01		90 39		bcc $9f3c			bcc 	_VHBadIndex
.9f03		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9f05		64 37		stz $37				stz 	zTemp0+1
.9f07		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9f09		30 0e		bmi $9f19			bmi 	_VHNoMultiply
.9f0b		da		phx				phx
.9f0c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9f0e		48		pha				pha
.9f0f		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9f11		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f13		1a		inc a				inc 	a 							; add 1 for zero base
.9f14		fa		plx				plx
.9f15		20 6d a3	jsr $a36d			jsr 	Multiply8x8 				; calculate -> Z0
.9f18		fa		plx				plx
.9f19						_VHNoMultiply:
.9f19		18		clc				clc
.9f1a		a5 36		lda $36				lda 	zTemp0
.9f1c		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9f1e		85 36		sta $36				sta 	zTemp0
.9f20		a5 37		lda $37				lda 	zTemp0+1
.9f22		69 00		adc #$00			adc 	#0
.9f24		85 37		sta $37				sta 	zTemp0+1
.9f26		b5 50		lda $50,x			lda 	NSStatus,x
.9f28		20 6f 88	jsr $886f			jsr 	ScaleByBaseType
.9f2b		18		clc				clc
.9f2c		b2 3e		lda ($3e)			lda 	(zaTemp)
.9f2e		65 36		adc $36				adc 	zTemp0
.9f30		95 58		sta $58,x			sta 	NSMantissa0,x
.9f32		a0 01		ldy #$01			ldy 	#1
.9f34		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f36		65 37		adc $37				adc 	zTemp0+1
.9f38		95 60		sta $60,x			sta 	NSMantissa1,x
.9f3a		7a		ply				ply 								; restore position
.9f3b		60		rts				rts
.9f3c						_VHBadIndex:
.9f3c		a9 17		lda #$17		lda	#23
.9f3e		4c 77 94	jmp $9477		jmp	ErrorHandler
.9f41						_VHBadArray:
.9f41		a9 18		lda #$18		lda	#24
.9f43		4c 77 94	jmp $9477		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9f46						AbsUnary:
.9f46		fa		plx				plx 								; restore stack pos
.9f47		20 10 a3	jsr $a310			jsr 	EvaluateNumber 				; get a float or int
.9f4a		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.9f4d		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9f4f		29 7f		and #$7f			and 	#$7F
.9f51		95 50		sta $50,x			sta 	NSStatus,x
.9f53		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9f54						AllocUnary:
.9f54		fa		plx				plx 								; restore stack pos
.9f55		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger		; get bytes required.
.9f58		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.9f5b		da		phx				phx 								; save X/Y
.9f5c		5a		phy				phy
.9f5d		8a		txa				txa 								; copy X into Y
.9f5e		a8		tay				tay
.9f5f		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9f62		aa		tax				tax
.9f63		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9f66		20 73 9f	jsr $9f73			jsr 	AllocateXABytes 			; allocate memory
.9f69		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9f6c		8a		txa				txa 	 							; typing is 16 bit integer.
.9f6d		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9f70		7a		ply				ply
.9f71		fa		plx				plx
.9f72		60		rts				rts
.9f73						AllocateXABytes:
.9f73		5a		phy				phy
.9f74		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9f77		84 36		sty $36				sty 	zTemp0
.9f79		5a		phy				phy
.9f7a		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9f7d		84 37		sty $37				sty 	zTemp0+1
.9f7f		5a		phy				phy
.9f80		18		clc				clc 								; add to low memory pointer
.9f81		6d 0c 04	adc $040c			adc 	lowMemPtr
.9f84		8d 0c 04	sta $040c			sta 	lowMemPtr
.9f87		8a		txa				txa
.9f88		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9f8b		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9f8e		b0 2f		bcs $9fbf			bcs 	CISSMemory
.9f90		20 b1 9f	jsr $9fb1			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9f93						_ClearMemory:
.9f93		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9f96		c5 36		cmp $36				cmp 	zTemp0
.9f98		d0 07		bne $9fa1			bne 	_CMClearNext
.9f9a		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9f9d		c5 37		cmp $37				cmp 	zTemp0+1
.9f9f		f0 0c		beq $9fad			beq 	_CMExit
.9fa1						_CMClearNext:
.9fa1		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9fa3		92 36		sta ($36)			sta 	(zTemp0)
.9fa5		e6 36		inc $36				inc 	zTemp0
.9fa7		d0 ea		bne $9f93			bne 	_ClearMemory
.9fa9		e6 37		inc $37				inc		zTemp0+1
.9fab		80 e6		bra $9f93			bra 	_ClearMemory
.9fad						_CMExit:
.9fad		fa		plx				plx
.9fae		68		pla				pla
.9faf		7a		ply				ply
.9fb0		60		rts				rts
.9fb1						CheckIdentifierStringSpace:
.9fb1		48		pha				pha
.9fb2		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9fb5		18		clc				clc
.9fb6		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9fb8		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9fbb		b0 02		bcs $9fbf			bcs 	CISSMemory
.9fbd		68		pla				pla
.9fbe		60		rts				rts
.9fbf						CISSMemory:
.9fbf		a9 06		lda #$06		lda	#6
.9fc1		4c 77 94	jmp $9477		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9fc4						AscUnary:
.9fc4		fa		plx				plx 								; restore stack pos
.9fc5		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; get a string
.9fc8		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9fca		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte 					; ASC("") will return zero.
.9fcd		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.9fd0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9fd1						FracUnary:
.9fd1		fa		plx				plx 								; restore stack pos
.9fd2		20 10 a3	jsr $a310			jsr 	EvaluateNumber 				; get a float or int
.9fd5		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.9fd8		b5 50		lda $50,x			lda 	NSStatus,x
.9fda		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9fdc		f0 04		beq $9fe2			beq 	_IUZero
.9fde		20 8c 9a	jsr $9a8c			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9fe1		60		rts				rts
.9fe2						_IUZero:
.9fe2		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero
.9fe5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9fe6						IntUnary:
.9fe6		fa		plx				plx 								; restore stack pos
.9fe7		20 10 a3	jsr $a310			jsr 	EvaluateNumber 				; get a float or int
.9fea		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.9fed		b5 50		lda $50,x			lda 	NSStatus,x
.9fef		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ff1		f0 03		beq $9ff6			beq 	_IUExit
.9ff3		20 e4 9a	jsr $9ae4			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9ff6						_IUExit:
.9ff6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9ff7						LenUnary:
.9ff7		fa		plx				plx 								; restore stack pos
.9ff8		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; get a string
.9ffb		5a		phy				phy
.9ffc		a0 00		ldy #$00			ldy 	#0 							; find length
.9ffe						_LenFind:
.9ffe		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a000		f0 06		beq $a008			beq 	_LenExit
.a002		c8		iny				iny
.a003		d0 f9		bne $9ffe			bne 	_LenFind
.a005		4c 45 a5	jmp $a545			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a008						_LenExit:
.a008		98		tya				tya		 							; return length
.a009		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte
.a00c		7a		ply				ply
.a00d		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.a010		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a011						Unary_Min:
.a011		a9 01		lda #$01			lda 	#1
.a013		80 02		bra $a017			bra 	UnaryMinMaxMain
.a015						Unary_Max:
.a015		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a017						UnaryMinMaxMain:
.a017		fa		plx				plx 								; get index on number stack
.a018		48		pha				pha 								; save comparator
.a019		20 07 a3	jsr $a307			jsr 	EvaluateValue 				; get the first value.
.a01c						_UMMMLoop:
.a01c		b1 30		lda ($30),y			lda 	(codePtr),y
.a01e		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a020		f0 22		beq $a044			beq 	_UMMMDone
.a022		20 66 94	jsr $9466			jsr 	CheckComma 					; must be a comma
.a025		e8		inx				inx
.a026		20 07 a3	jsr $a307			jsr 	EvaluateValue
.a029		ca		dex				dex
.a02a		20 a5 a3	jsr $a3a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a02d		e8		inx				inx
.a02e		20 a5 a3	jsr $a3a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a031		e8		inx				inx
.a032		20 2e 95	jsr $952e			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a035		ca		dex				dex
.a036		ca		dex				dex
.a037		85 36		sta $36				sta 	zTemp0 						; save required result
.a039		68		pla				pla 								; get and save comparator
.a03a		48		pha				pha
.a03b		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a03d		d0 dd		bne $a01c			bne 	_UMMMLoop
.a03f		20 47 a0	jsr $a047			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a042		80 d8		bra $a01c			bra 	_UMMMLoop
.a044						_UMMMDone:
.a044		68		pla				pla 								; throw the comparator
.a045		c8		iny				iny 								; skip )
.a046		60		rts				rts
.a047						ExpCopyAboveDown:
.a047		b5 51		lda $51,x			lda 	NSStatus+1,x
.a049		95 50		sta $50,x			sta 	NSStatus,x
.a04b		b5 79		lda $79,x			lda 	NSExponent+1,x
.a04d		95 78		sta $78,x			sta 	NSExponent,x
.a04f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a051		95 58		sta $58,x			sta 	NSMantissa0,x
.a053		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a055		95 60		sta $60,x			sta 	NSMantissa1,x
.a057		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a059		95 68		sta $68,x			sta 	NSMantissa2,x
.a05b		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a05d		95 70		sta $70,x			sta 	NSMantissa3,x
.a05f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a060						Unary_Not:
.a060		fa		plx				plx
.a061		20 2f a3	jsr $a32f			jsr 	EvaluateInteger 			; get integer
.a064		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.a067		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; zero mantissa ?
.a06a		f0 04		beq $a070			beq 	_NotZero
.a06c		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero
.a06f		60		rts				rts
.a070						_NotZero:
.a070		4c e4 94	jmp $94e4			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a073						PeekByteUnary:
.a073		a9 01		lda #$01			lda 	#1
.a075		80 0a		bra $a081			bra 	PeekUnary
.a077						PeekWUnary:
.a077		a9 02		lda #$02			lda 	#2
.a079		80 06		bra $a081			bra 	PeekUnary
.a07b						PeekLUnary:
.a07b		a9 03		lda #$03			lda 	#3
.a07d		80 02		bra $a081			bra 	PeekUnary
.a07f						PeekDUnary:
.a07f		a9 04		lda #$04			lda 	#4
.a081						PeekUnary:
.a081		fa		plx				plx 								; restore position.
.a082		48		pha				pha 								; save count to copy on stack
.a083		20 42 a3	jsr $a342			jsr		Evaluate16BitInteger 		; address as constant.
.a086		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.a089		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a08b		85 36		sta $36				sta 	zTemp0
.a08d		b5 60		lda $60,x			lda 	NSMantissa1,x
.a08f		85 37		sta $37				sta 	zTemp0+1
.a091		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero 					; clear the result to zero.
.a094		68		pla				pla 								; count in zTemp2
.a095		85 3a		sta $3a				sta 	zTemp2
.a097		da		phx				phx 								; save stack position and offset of read
.a098		5a		phy				phy
.a099		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a09b						_PULoop:
.a09b		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a09d		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a09f		c8		iny				iny 								; next byte to write
.a0a0		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a0a1		18		clc				clc
.a0a2		69 08		adc #$08			adc 	#MathStackSize
.a0a4		aa		tax				tax
.a0a5		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a0a7		d0 f2		bne $a09b			bne 	_PULoop
.a0a9		7a		ply				ply 								; restore stack/code pos and exit.
.a0aa		fa		plx				plx
.a0ab		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a0ac						Unary_Random:
.a0ac		fa		plx				plx
.a0ad		20 1e a1	jsr $a11e			jsr 	Random32Bit 				; get a random number
.a0b0		20 07 a1	jsr $a107			jsr 	URCopyToMantissa  			; put in mantissa
.a0b3		b1 30		lda ($30),y			lda 	(codePtr),y
.a0b5		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a0b7		f0 08		beq $a0c1			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a0b9		e8		inx				inx
.a0ba		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a0bd		ca		dex				dex
.a0be		20 36 96	jsr $9636			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a0c1						_URNoModulus:
.a0c1		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a0c3		74 78		stz $78,x			stz 	NSExponent,x
.a0c5		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.a0c8		60		rts				rts
.a0c9						Unary_Rnd:
.a0c9		fa		plx				plx
.a0ca		20 10 a3	jsr $a310			jsr 	EvaluateNumber 				; number to use.
.a0cd		20 5e 94	jsr $945e			jsr 	CheckRightBracket 			; closing bracket
.a0d0		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a0d3		f0 26		beq $a0fb			beq 	_URCopySeed
.a0d5		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a0d7		10 1f		bpl $a0f8			bpl 	_URDontSeed
.a0d9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a0db		49 17		eor #$17			eor 	#$17
.a0dd		8d 08 04	sta $0408			sta 	randomSeed+0
.a0e0		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0e2		49 a5		eor #$a5			eor 	#$A5
.a0e4		8d 09 04	sta $0409			sta 	randomSeed+1
.a0e7		b5 68		lda $68,x			lda 	NSMantissa2,x
.a0e9		49 c2		eor #$c2			eor 	#$C2
.a0eb		8d 0a 04	sta $040a			sta 	randomSeed+2
.a0ee		b5 70		lda $70,x			lda 	NSMantissa3,x
.a0f0		49 9d		eor #$9d			eor 	#$9D
.a0f2		8d 0b 04	sta $040b			sta 	randomSeed+3
.a0f5		20 1e a1	jsr $a11e			jsr 	Random32Bit
.a0f8						_URDontSeed:
.a0f8		20 1e a1	jsr $a11e			jsr 	Random32Bit 				; generate a number
.a0fb						_URCopySeed:
.a0fb		20 07 a1	jsr $a107			jsr 	URCopyToMantissa 			; copy into mantissa
.a0fe		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a100		95 78		sta $78,x			sta 	NSExponent,x
.a102		a9 08		lda #$08			lda 	#NSTFloat
.a104		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a106		60		rts				rts
.a107						URCopyToMantissa:
.a107		ad 08 04	lda $0408			lda 	randomSeed+0
.a10a		95 58		sta $58,x			sta 	NSMantissa0,x
.a10c		ad 09 04	lda $0409			lda 	randomSeed+1
.a10f		95 60		sta $60,x			sta 	NSMantissa1,x
.a111		ad 0a 04	lda $040a			lda 	randomSeed+2
.a114		95 68		sta $68,x			sta 	NSMantissa2,x
.a116		ad 0b 04	lda $040b			lda 	randomSeed+3
.a119		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a11b		95 70		sta $70,x			sta 	NSMantissa3,x
.a11d		60		rts				rts
.a11e						Random32Bit:
.a11e		5a		phy				phy
.a11f		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a121		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.a124		d0 03		bne $a129			bne 	_Random1
.a126		a8		tay				tay 								; if so do it 256 times
.a127		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a129						_Random1:
.a129		0a		asl a				asl 	a 							; LSFR RNG
.a12a		2e 09 04	rol $0409			rol 	randomSeed+1
.a12d		2e 0a 04	rol $040a			rol 	randomSeed+2
.a130		2e 0b 04	rol $040b			rol 	randomSeed+3
.a133		90 02		bcc $a137			bcc 	_Random2
.a135		49 c5		eor #$c5			eor 	#$C5
.a137						_Random2:
.a137		88		dey				dey
.a138		d0 ef		bne $a129			bne 	_Random1
.a13a		8d 08 04	sta $0408			sta 	randomSeed+0
.a13d		7a		ply				ply
.a13e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a13f						SgnUnary:
.a13f		fa		plx				plx 								; restore stack pos
.a140		20 10 a3	jsr $a310			jsr 	EvaluateNumber 				; get a float or int
.a143		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.a146		20 e4 a3	jsr $a3e4			jsr 	NSMIsZero 					; if zero
.a149		f0 0e		beq $a159			beq 	_SGZero  					; return Int Zero
.a14b		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a14d		48		pha				pha
.a14e		a9 01		lda #$01			lda 	#1 							; set to 1
.a150		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte
.a153		68		pla				pla
.a154		29 80		and #$80			and		#$80 						; copy the sign byte out
.a156		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a158		60		rts				rts
.a159		20 c2 a3	jsr $a3c2	_SGZero:jsr 	NSMSetZero
.a15c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a15d						ValUnary:
.a15d		fa		plx				plx 								; restore stack pos
.a15e		20 73 a1	jsr $a173			jsr 	ValMainCode 				; do the main val() code
.a161		b0 01		bcs $a164			bcs 	_VUError 					; couldn't convert
.a163		60		rts				rts
.a164						_VUError:
.a164		4c 4a a5	jmp $a54a			jmp 	TypeError
.a167						IsValUnary:
.a167		fa		plx				plx 								; restore stack pos
.a168		20 73 a1	jsr $a173			jsr 	ValMainCode 				; do the main val() code
.a16b		b0 03		bcs $a170			bcs 	_VUBad
.a16d		4c e4 94	jmp $94e4			jmp 	ReturnTrue
.a170						_VUBad:
.a170		4c ef 94	jmp $94ef			jmp 	ReturnFalse
.a173						ValMainCode:
.a173		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; get a string
.a176		20 5e 94	jsr $945e			jsr 	CheckRightBracket 			; check right bracket present
.a179						ValEvaluateZTemp0:
.a179		5a		phy				phy
.a17a		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a17c		f0 17		beq $a195			beq 	_VMCFail2
.a17e		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a180		48		pha				pha 								; save first character
.a181		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a183		d0 01		bne $a186			bne 	_VMCStart
.a185		c8		iny				iny 								; skip over -
.a186						_VMCStart:
.a186		38		sec				sec 								; initialise first time round.
.a187						_VMCNext:
.a187		c8		iny				iny 								; pre-increment
.a188		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a18a		f0 0c		beq $a198			beq 	_VMCSuccess 				; successful.
.a18c		20 c1 9c	jsr $9cc1			jsr 	EncodeNumber 				; send it to the number-builder
.a18f		90 03		bcc $a194			bcc 	_VMCFail 					; if failed, give up.
.a191		18		clc				clc 								; next time round, countinue
.a192		80 f3		bra $a187			bra 	_VMCNext
.a194						_VMCFail:
.a194		68		pla				pla
.a195						_VMCFail2:
.a195		7a		ply				ply
.a196		38		sec				sec
.a197		60		rts				rts
.a198						_VMCSuccess:
.a198		a9 00		lda #$00			lda 	#0 							; construct final
.a19a		20 c1 9c	jsr $9cc1			jsr 	EncodeNumber 				; by sending a duff value.
.a19d		68		pla				pla 								; if it was -ve
.a19e		c9 2d		cmp #$2d			cmp 	#"-"
.a1a0		d0 03		bne $a1a5			bne 	_VMCNotNegative
.a1a2		20 84 a3	jsr $a384			jsr		NSMNegate 					; negate it.
.a1a5						_VMCNotNegative:
.a1a5		7a		ply				ply
.a1a6		18		clc				clc
.a1a7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a1a8						ChrUnary:
.a1a8		fa		plx				plx 								; restore stack pos
.a1a9		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a1ac		48		pha				pha
.a1ad		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.a1b0		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a1b2		20 91 b5	jsr $b591			jsr 	StringTempAllocate
.a1b5		68		pla				pla 								; write number to it
.a1b6		20 ca b5	jsr $b5ca			jsr 	StringTempWrite
.a1b9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a1ba						SpcUnary:
.a1ba		fa		plx				plx 								; restore stack pos
.a1bb		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger			; get value
.a1be		5a		phy				phy
.a1bf		48		pha				pha 								; save count
.a1c0		20 91 b5	jsr $b591			jsr 	StringTempAllocate
.a1c3		7a		ply				ply 								; to do count in Y
.a1c4						_SpcLoop:
.a1c4		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a1c6		f0 08		beq $a1d0			beq 	_SpcExit
.a1c8		a9 20		lda #$20			lda 	#32
.a1ca		20 ca b5	jsr $b5ca			jsr 	StringTempWrite
.a1cd		88		dey				dey
.a1ce		80 f4		bra $a1c4			bra 	_SpcLoop
.a1d0						_SpcExit:
.a1d0		7a		ply				ply
.a1d1		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.a1d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a1d5						Unary_Str:
.a1d5		fa		plx				plx
.a1d6		20 10 a3	jsr $a310			jsr 	EvaluateNumber  			; get number
.a1d9		20 5e 94	jsr $945e			jsr 	CheckRightBracket 			; closing bracket
.a1dc		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a1de		20 f7 a1	jsr $a1f7			jsr 	ConvertNumberToString 		; do the conversion.
.a1e1		a9 21		lda #$21			lda		#33 						; create buffer
.a1e3		20 91 b5	jsr $b591			jsr 	StringTempAllocate 			; allocate memory
.a1e6		da		phx				phx  								; copy the converted string into the buffer.
.a1e7		a2 00		ldx #$00			ldx 	#0
.a1e9						_USCopy:
.a1e9		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a1ec		20 ca b5	jsr $b5ca			jsr 	StringTempWrite
.a1ef		e8		inx				inx
.a1f0		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a1f3		d0 f4		bne $a1e9			bne 	_USCopy
.a1f5		fa		plx				plx
.a1f6		60		rts				rts
.a1f7						ConvertNumberToString:
.a1f7		5a		phy				phy 								; save code position
.a1f8		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.a1fb		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.a1fe		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a200		10 09		bpl $a20b			bpl 	_CNTSNotNegative
.a202		29 7f		and #$7f			and 	#$7F 						; make +ve
.a204		95 50		sta $50,x			sta 	NSStatus,x
.a206		a9 2d		lda #$2d			lda 	#"-"
.a208		20 6c a2	jsr $a26c			jsr 	WriteDecimalBuffer
.a20b						_CNTSNotNegative:
.a20b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a20d		f0 12		beq $a221			beq 	_CNTSNotFloat
.a20f		e8		inx				inx 								; round up so we don't get too many 6.999999
.a210		a9 01		lda #$01			lda 	#1
.a212		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte
.a215		ca		dex				dex
.a216		b5 78		lda $78,x			lda		NSExponent,x
.a218		95 79		sta $79,x			sta 	NSExponent+1,x
.a21a		a9 08		lda #$08			lda 	#NSTFloat
.a21c		95 51		sta $51,x			sta 	NSStatus+1,x
.a21e		20 c6 99	jsr $99c6			jsr 	FloatAdd
.a221						_CNTSNotFloat:
.a221		20 4e a2	jsr $a24e			jsr 	MakePlusTwoString 			; do the integer part.
.a224		20 8c 9a	jsr $9a8c			jsr 	FloatFractionalPart 		; get the fractional part
.a227		20 3d 9b	jsr $9b3d			jsr 	NSNormalise					; normalise , exit if zero
.a22a		f0 20		beq $a24c			beq 	_CNTSExit
.a22c		a9 2e		lda #$2e			lda 	#"."
.a22e		20 6c a2	jsr $a26c			jsr 	WriteDecimalBuffer 			; write decimal place
.a231						_CNTSDecimal:
.a231		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.a234		30 16		bmi $a24c			bmi 	_CNTSExit
.a236		e8		inx				inx 								; x 10.0
.a237		a9 0a		lda #$0a			lda 	#10
.a239		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte
.a23c		a9 08		lda #$08			lda 	#NSTFloat
.a23e		95 50		sta $50,x			sta 	NSStatus,x
.a240		ca		dex				dex
.a241		20 0b 9b	jsr $9b0b			jsr 	FloatMultiply
.a244		20 4e a2	jsr $a24e			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a247		20 8c 9a	jsr $9a8c			jsr 	FloatFractionalPart 		; get the fractional part
.a24a		80 e5		bra $a231			bra 	_CNTSDecimal 				; keep going.
.a24c						_CNTSExit:
.a24c		7a		ply				ply
.a24d		60		rts				rts
.a24e						MakePlusTwoString:
.a24e		da		phx				phx
.a24f		20 a5 a3	jsr $a3a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a252		e8		inx				inx 								; access it
.a253		e8		inx				inx
.a254		20 e4 9a	jsr $9ae4			jsr 	FloatIntegerPart 			; make it an integer
.a257		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a259		20 f6 98	jsr $98f6			jsr 	ConvertInt32
.a25c		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a25e						_MPTSCopy:
.a25e		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a261		20 6c a2	jsr $a26c			jsr 	WriteDecimalBuffer
.a264		e8		inx				inx
.a265		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a268		d0 f4		bne $a25e			bne 	_MPTSCopy
.a26a		fa		plx				plx
.a26b		60		rts				rts
.a26c						WriteDecimalBuffer:
.a26c		da		phx				phx
.a26d		ae 15 04	ldx $0415			ldx 	dbOffset
.a270		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.a273		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.a276		ee 15 04	inc $0415			inc 	dbOffset
.a279		fa		plx				plx
.a27a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a27b						Unary_Left:
.a27b		fa		plx				plx
.a27c		18		clc				clc 								; only one parameter
.a27d		20 e0 a2	jsr $a2e0			jsr 	SubstringInitial 			; set up.
.a280		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a282		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a284		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a286		80 25		bra $a2ad			bra 	SubstringMain
.a288						Unary_Right:
.a288		fa		plx				plx
.a289		18		clc				clc 								; only one parameter
.a28a		20 e0 a2	jsr $a2e0			jsr 	SubstringInitial 			; set up.
.a28d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a28f		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a291		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a293		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a295		b0 02		bcs $a299			bcs 	_URNotUnderflow
.a297		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a299						_URNotUnderflow:
.a299		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a29b		80 10		bra $a2ad			bra 	SubstringMain
.a29d						Unary_Mid:
.a29d		fa		plx				plx
.a29e		38		sec				sec 								; two parameters
.a29f		20 e0 a2	jsr $a2e0			jsr 	SubstringInitial 			; set up.
.a2a2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a2a4		f0 04		beq $a2aa			beq 	_UMError
.a2a6		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a2a8		80 03		bra $a2ad			bra 	SubstringMain
.a2aa						_UMError:
.a2aa		4c 4f a5	jmp $a54f			jmp 	ArgumentError
.a2ad						SubstringMain:
.a2ad		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a2af		d5 78		cmp $78,x			cmp 	NSExponent,x
.a2b1		b0 27		bcs $a2da			bcs 	_SSMNull 					; if so, return an empty string.
.a2b3		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a2b5		f0 23		beq $a2da			beq 	_SSMNull 					; return empty string.
.a2b7		18		clc				clc 								; add the offset +1 to the address and
.a2b8		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a2ba		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a2bc		85 36		sta $36				sta 	zTemp0
.a2be		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a2c0		69 00		adc #$00			adc 	#0
.a2c2		85 37		sta $37				sta 	zTemp0+1
.a2c4						_SSMNoCarry:
.a2c4		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a2c6		20 91 b5	jsr $b591			jsr 	StringTempAllocate 			; allocate that many characters
.a2c9		5a		phy				phy 								; save Y
.a2ca		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a2cc						_SSMCopy:
.a2cc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a2ce		f0 08		beq $a2d8			beq 	_SSMEString 				; no more to copy
.a2d0		20 ca b5	jsr $b5ca			jsr 	StringTempWrite 			; and write it out.
.a2d3		c8		iny				iny
.a2d4		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a2d6		d0 f4		bne $a2cc			bne 	_SSMCopy
.a2d8						_SSMEString:
.a2d8		7a		ply				ply
.a2d9						_SSMExit:
.a2d9		60		rts				rts
.a2da						_SSMNull:
.a2da		a9 00		lda #$00			lda 	#0
.a2dc		20 91 b5	jsr $b591			jsr 	StringTempAllocate
.a2df		60		rts				rts
.a2e0						SubstringInitial:
.a2e0		da		phx				phx 								; save initial stack position
.a2e1		08		php				php 								; save carry on stack indicating 2 parameters
.a2e2		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; get a string
.a2e5		5a		phy				phy 								; calculate length to exponent.
.a2e6		a0 ff		ldy #$ff			ldy 	#$FF
.a2e8						_SIFindLength:
.a2e8		c8		iny				iny
.a2e9		b1 36		lda ($36),y			lda 	(zTemp0),y
.a2eb		d0 fb		bne $a2e8			bne 	_SIFindLength
.a2ed		98		tya				tya
.a2ee		95 78		sta $78,x			sta 	NSExponent,x
.a2f0		7a		ply				ply
.a2f1		e8		inx				inx
.a2f2		20 66 94	jsr $9466			jsr 	CheckComma 					; comma next
.a2f5		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get next parameter
.a2f8		28		plp				plp 								; is it the last parameter ?
.a2f9		90 07		bcc $a302			bcc 	_SSIExit 					; if so, exit.
.a2fb		e8		inx				inx
.a2fc		20 66 94	jsr $9466			jsr 	CheckComma 					; comma next
.a2ff		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get last parameter
.a302						_SSIExit:
.a302		fa		plx				plx
.a303		20 5e 94	jsr $945e			jsr 	CheckRightBracket 			; check closing bracket
.a306		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a307						EvaluateValue:
.a307		48		pha				pha
.a308		20 7b 99	jsr $997b			jsr		EvaluateExpression 			; expression
.a30b		20 3e 9c	jsr $9c3e			jsr 	Dereference					; derefernce it
.a30e		68		pla				pla
.a30f		60		rts				rts
.a310						EvaluateNumber:
.a310		20 07 a3	jsr $a307			jsr 	EvaluateValue 				; get a value
.a313		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a315		29 10		and #$10			and 	#NSBIsString
.a317		d0 13		bne $a32c			bne 	HelperTypeError
.a319		60		rts				rts
.a31a						EvaluateString:
.a31a		20 07 a3	jsr $a307			jsr 	EvaluateValue 				; get a value
.a31d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a31f		29 10		and #$10			and 	#NSBIsString
.a321		f0 09		beq $a32c			beq 	HelperTypeError
.a323						CopyAddressToTemp0:
.a323		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a325		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a327		b5 60		lda $60,x			lda 	NSMantissa1,x
.a329		85 37		sta $37				sta 	zTemp0+1
.a32b		60		rts				rts
.a32c						HelperTypeError:
.a32c		4c 4a a5	jmp $a54a			jmp 	TypeError
.a32f						EvaluateInteger:
.a32f		20 10 a3	jsr $a310			jsr 	EvaluateNumber
.a332		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a334		d0 09		bne $a33f			bne 	HelperValueError 			; if not, it's a float.
.a336		60		rts				rts
.a337						EvaluateUnsignedInteger:
.a337		20 2f a3	jsr $a32f			jsr 	EvaluateInteger 			; check integer is +ve
.a33a		b5 50		lda $50,x			lda 	NSStatus,x
.a33c		30 01		bmi $a33f			bmi 	HelperValueError
.a33e		60		rts				rts
.a33f						HelperValueError:
.a33f		4c 4f a5	jmp $a54f			jmp 	ArgumentError
.a342						Evaluate16BitInteger:
.a342		20 37 a3	jsr $a337			jsr	 	EvaluateUnsignedInteger		; get integer
.a345		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a347		15 68		ora $68,x			ora 	NSMantissa2,x
.a349		d0 f4		bne $a33f			bne 	HelperValueError
.a34b		60		rts				rts
.a34c						Evaluate16BitIntegerSigned:
.a34c		20 2f a3	jsr $a32f			jsr	 	EvaluateInteger				; get integer
.a34f		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a351		15 68		ora $68,x			ora 	NSMantissa2,x
.a353		d0 ea		bne $a33f			bne 	HelperValueError
.a355		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a357		10 03		bpl $a35c			bpl 	_EISNotSigned
.a359		20 8b a3	jsr $a38b			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a35c						_EISNotSigned:
.a35c		60		rts				rts
.a35d						Evaluate8BitInteger:
.a35d		20 37 a3	jsr $a337			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a360		d0 dd		bne $a33f			bne 	HelperValueError
.a362		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a364		15 68		ora $68,x			ora 	NSMantissa2,x
.a366		15 60		ora $60,x			ora 	NSMantissa1,x
.a368		d0 d5		bne $a33f			bne 	HelperValueError
.a36a		b5 58		lda $58,x			lda 	NSMantissa0,x
.a36c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a36d						Multiply8x8:
.a36d		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a36e		85 36		sta $36			  	sta 	zTemp0
.a370		86 37		stx $37				stx 	zTemp0+1
.a372		a9 00		lda #$00			lda 	#0
.a374		a2 08		ldx #$08			ldx 	#8
.a376						_M88Loop:
.a376		90 03		bcc $a37b			bcc 	_M88NoAdd
.a378		18		clc				clc
.a379		65 37		adc $37				adc 	zTemp0+1
.a37b						_M88NoAdd:
.a37b		6a		ror a				ror 	a
.a37c		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a37e		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a37f		d0 f5		bne $a376			bne 	_M88Loop
.a381		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a383		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a384						NSMNegate:
.a384		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a386		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a388		95 50		sta $50,x			sta 	NSStatus,x
.a38a		60		rts				rts
.a38b						NSMNegateMantissa:
.a38b		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a38c		a9 00		lda #$00			lda 	#0
.a38e		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a390		95 58		sta $58,x			sta 	NSMantissa0,x
.a392		a9 00		lda #$00			lda 	#0
.a394		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a396		95 60		sta $60,x			sta 	NSMantissa1,x
.a398		a9 00		lda #$00			lda 	#0
.a39a		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a39c		95 68		sta $68,x			sta 	NSMantissa2,x
.a39e		a9 00		lda #$00			lda 	#0
.a3a0		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a3a2		95 70		sta $70,x			sta 	NSMantissa3,x
.a3a4		60		rts				rts
.a3a5						NSMShiftUpTwo:
.a3a5		b5 58		lda $58,x			lda 	NSMantissa0,x
.a3a7		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a3a9		b5 60		lda $60,x			lda 	NSMantissa1,x
.a3ab		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a3ad		b5 68		lda $68,x			lda 	NSMantissa2,x
.a3af		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a3b1		b5 70		lda $70,x			lda 	NSMantissa3,x
.a3b3		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a3b5		b5 78		lda $78,x			lda 	NSExponent,x
.a3b7		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a3b9		b5 50		lda $50,x			lda 	NSStatus,x
.a3bb		95 52		sta $52,x			sta 	NSStatus+2,x
.a3bd		60		rts				rts
.a3be						NSMSetZeroMantissaOnly:
.a3be		a9 00		lda #$00			lda 	#0
.a3c0		80 06		bra $a3c8			bra 	NSMSetMantissa
.a3c2						NSMSetZero:
.a3c2		a9 00		lda #$00			lda 	#0
.a3c4						NSMSetByte:
.a3c4		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a3c6		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a3c8						NSMSetMantissa:
.a3c8		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a3ca		74 60		stz $60,x			stz 	NSMantissa1,x
.a3cc		74 68		stz $68,x			stz 	NSMantissa2,x
.a3ce		74 70		stz $70,x			stz 	NSMantissa3,x
.a3d0		60		rts				rts
.a3d1						NSMShiftLeft:
.a3d1		18		clc				clc
.a3d2						NSMRotateLeft:
.a3d2		36 58		rol $58,x			rol 	NSMantissa0,x
.a3d4		36 60		rol $60,x			rol		NSMantissa1,x
.a3d6		36 68		rol $68,x			rol		NSMantissa2,x
.a3d8		36 70		rol $70,x			rol		NSMantissa3,x
.a3da		60		rts				rts
.a3db						NSMShiftRight:
.a3db		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a3dd		76 68		ror $68,x			ror		NSMantissa2,x
.a3df		76 60		ror $60,x			ror		NSMantissa1,x
.a3e1		76 58		ror $58,x			ror		NSMantissa0,x
.a3e3		60		rts				rts
.a3e4						NSMIsZero:
.a3e4		b5 70		lda $70,x			lda 	NSMantissa3,x
.a3e6		15 68		ora $68,x			ora		NSMantissa2,x
.a3e8		15 60		ora $60,x			ora		NSMantissa1,x
.a3ea		15 58		ora $58,x			ora		NSMantissa0,x
.a3ec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a3ed						TickHandler:
.a3ed		5a		phy				phy 								; need to preserve Y
.a3ee		20 49 80	jsr $8049			jsr 	SNDUpdate 					; update sound
.a3f1		7a		ply				ply
.a3f2		60		rts				rts
.0775						LastTick:
>0775								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a3f3						Assemble_ora:
.a3f3		20 83 82	jsr $8283		jsr	AssembleGroup1
>a3f6		01					.byte $01
.a3f7						Assemble_and:
.a3f7		20 83 82	jsr $8283		jsr	AssembleGroup1
>a3fa		21					.byte $21
.a3fb						Assemble_eor:
.a3fb		20 83 82	jsr $8283		jsr	AssembleGroup1
>a3fe		41					.byte $41
.a3ff						Assemble_adc:
.a3ff		20 83 82	jsr $8283		jsr	AssembleGroup1
>a402		61					.byte $61
.a403						Assemble_sta:
.a403		20 83 82	jsr $8283		jsr	AssembleGroup1
>a406		81					.byte $81
.a407						Assemble_lda:
.a407		20 83 82	jsr $8283		jsr	AssembleGroup1
>a40a		a1					.byte $a1
.a40b						Assemble_cmp:
.a40b		20 83 82	jsr $8283		jsr	AssembleGroup1
>a40e		c1					.byte $c1
.a40f						Assemble_sbc:
.a40f		20 83 82	jsr $8283		jsr	AssembleGroup1
>a412		e1					.byte $e1
.a413						Assemble_asl:
.a413		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a416		02					.byte $02
>a417		75					.byte $75
.a418						Assemble_rol:
.a418		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a41b		22					.byte $22
>a41c		75					.byte $75
.a41d						Assemble_lsr:
.a41d		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a420		42					.byte $42
>a421		75					.byte $75
.a422						Assemble_ror:
.a422		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a425		62					.byte $62
>a426		75					.byte $75
.a427						Assemble_stx:
.a427		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a42a		82					.byte $82
>a42b		50					.byte $50
.a42c						Assemble_ldx:
.a42c		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a42f		a2					.byte $a2
>a430		d0					.byte $d0
.a431						Assemble_dec:
.a431		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a434		c2					.byte $c2
>a435		55					.byte $55
.a436						Assemble_inc:
.a436		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a439		e2					.byte $e2
>a43a		55					.byte $55
.a43b						Assemble_stz:
.a43b		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a43e		60					.byte $60
>a43f		44					.byte $44
.a440						Assemble_bit:
.a440		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a443		20					.byte $20
>a444		55					.byte $55
.a445						Assemble_sty:
.a445		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a448		80					.byte $80
>a449		54					.byte $54
.a44a						Assemble_ldy:
.a44a		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a44d		a0					.byte $a0
>a44e		d5					.byte $d5
.a44f						Assemble_cpy:
.a44f		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a452		c0					.byte $c0
>a453		d4					.byte $d4
.a454						Assemble_cpx:
.a454		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a457		e0					.byte $e0
>a458		d0					.byte $d0
.a459						Assemble_tsb:
.a459		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a45c		00					.byte $00
>a45d		50					.byte $50
.a45e						Assemble_trb:
.a45e		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a461		10					.byte $10
>a462		50					.byte $50
.a463						Assemble_jsr:
.a463		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a466		14					.byte $14
>a467		10					.byte $10
.a468						Assemble_jmp:
.a468		20 8a 82	jsr $828a		jsr	AssembleGroup2
>a46b		40					.byte $40
>a46c		10					.byte $10
.a46d						Assemble_bpl:
.a46d		20 db 82	jsr $82db		jsr	AssembleGroup3
>a470		10					.byte $10
.a471						Assemble_bmi:
.a471		20 db 82	jsr $82db		jsr	AssembleGroup3
>a474		30					.byte $30
.a475						Assemble_bvc:
.a475		20 db 82	jsr $82db		jsr	AssembleGroup3
>a478		50					.byte $50
.a479						Assemble_bvs:
.a479		20 db 82	jsr $82db		jsr	AssembleGroup3
>a47c		70					.byte $70
.a47d						Assemble_bcc:
.a47d		20 db 82	jsr $82db		jsr	AssembleGroup3
>a480		90					.byte $90
.a481						Assemble_bcs:
.a481		20 db 82	jsr $82db		jsr	AssembleGroup3
>a484		b0					.byte $b0
.a485						Assemble_bne:
.a485		20 db 82	jsr $82db		jsr	AssembleGroup3
>a488		d0					.byte $d0
.a489						Assemble_beq:
.a489		20 db 82	jsr $82db		jsr	AssembleGroup3
>a48c		f0					.byte $f0
.a48d						Assemble_bra:
.a48d		20 db 82	jsr $82db		jsr	AssembleGroup3
>a490		80					.byte $80
.a491						Assemble_brk:
.a491		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a494		00					.byte $00
.a495						Assemble_php:
.a495		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a498		08					.byte $08
.a499						Assemble_clc:
.a499		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a49c		18					.byte $18
.a49d						Assemble_plp:
.a49d		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4a0		28					.byte $28
.a4a1						Assemble_sec:
.a4a1		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4a4		38					.byte $38
.a4a5						Assemble_rti:
.a4a5		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4a8		40					.byte $40
.a4a9						Assemble_pha:
.a4a9		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4ac		48					.byte $48
.a4ad						Assemble_cli:
.a4ad		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4b0		58					.byte $58
.a4b1						Assemble_phy:
.a4b1		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4b4		5a					.byte $5a
.a4b5						Assemble_rts:
.a4b5		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4b8		60					.byte $60
.a4b9						Assemble_pla:
.a4b9		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4bc		68					.byte $68
.a4bd						Assemble_sei:
.a4bd		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4c0		78					.byte $78
.a4c1						Assemble_ply:
.a4c1		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4c4		7a					.byte $7a
.a4c5						Assemble_dey:
.a4c5		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4c8		88					.byte $88
.a4c9						Assemble_txa:
.a4c9		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4cc		8a					.byte $8a
.a4cd						Assemble_tya:
.a4cd		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4d0		98					.byte $98
.a4d1						Assemble_txs:
.a4d1		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4d4		9a					.byte $9a
.a4d5						Assemble_tay:
.a4d5		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4d8		a8					.byte $a8
.a4d9						Assemble_tax:
.a4d9		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4dc		aa					.byte $aa
.a4dd						Assemble_clv:
.a4dd		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4e0		b8					.byte $b8
.a4e1						Assemble_tsx:
.a4e1		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4e4		ba					.byte $ba
.a4e5						Assemble_iny:
.a4e5		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4e8		c8					.byte $c8
.a4e9						Assemble_dex:
.a4e9		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4ec		ca					.byte $ca
.a4ed						Assemble_cld:
.a4ed		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4f0		d8					.byte $d8
.a4f1						Assemble_phx:
.a4f1		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4f4		da					.byte $da
.a4f5						Assemble_stp:
.a4f5		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4f8		db					.byte $db
.a4f9						Assemble_inx:
.a4f9		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a4fc		e8					.byte $e8
.a4fd						Assemble_nop:
.a4fd		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a500		ea					.byte $ea
.a501						Assemble_sed:
.a501		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a504		f8					.byte $f8
.a505						Assemble_plx:
.a505		20 0f 83	jsr $830f		jsr	AssembleGroup4
>a508		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a509						DecimalScalarTable:
>a509		66 66 66 66				.dword $66666666 ; 0.1
>a50d		de					.byte $de
>a50e		1f 85 eb 51				.dword $51eb851f ; 0.01
>a512		db					.byte $db
>a513		4c 37 89 41				.dword $4189374c ; 0.001
>a517		d8					.byte $d8
>a518		ac 8b db 68				.dword $68db8bac ; 0.0001
>a51c		d4					.byte $d4
>a51d		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a521		d1					.byte $d1
>a522		83 de 1b 43				.dword $431bde83 ; 1e-06
>a526		ce					.byte $ce
>a527		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a52b		ca					.byte $ca
>a52c		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a530		c7					.byte $c7
>a531		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a535		c4					.byte $c4
>a536		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a53a		c0					.byte $c0
>a53b		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a53f		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a540						SyntaxError:
.a540		a9 02		lda #$02		lda	#2
.a542		4c 77 94	jmp $9477		jmp	ErrorHandler
.a545						RangeError:
.a545		a9 04		lda #$04		lda	#4
.a547		4c 77 94	jmp $9477		jmp	ErrorHandler
.a54a						TypeError:
.a54a		a9 05		lda #$05		lda	#5
.a54c		4c 77 94	jmp $9477		jmp	ErrorHandler
.a54f						ArgumentError:
.a54f		a9 07		lda #$07		lda	#7
.a551		4c 77 94	jmp $9477		jmp	ErrorHandler
.a554						NotDoneError:
.a554		a9 0c		lda #$0c		lda	#12
.a556		4c 77 94	jmp $9477		jmp	ErrorHandler
.a559						ErrorText:
>a559		42 72 65 61 6b 00			.text	"Break",0
>a55f		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a567		72 72 6f 72 00
>a56c		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a574		20 62 79 20 7a 65 72 6f 00
>a57d		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a585		61 6e 67 65 00
>a58a		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a592		6d 61 74 63 68 00
>a598		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a5a0		65 6d 6f 72 79 00
>a5a6		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a5ae		61 72 67 75 6d 65 6e 74 00
>a5b7		53 74 6f 70 00				.text	"Stop",0
>a5bc		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a5c4		6f 6f 20 6c 6f 6e 67 00
>a5cc		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a5d4		6e 20 66 61 69 6c 65 64 00
>a5dd		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a5e5		61 74 61 00
>a5e9		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a5f1		65 6e 74 65 64 00
>a5f7		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a5ff		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a60b		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a613		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a620		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a628		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a635		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a63d		68 6f 75 74 20 57 68 69 6c 65 00
>a648		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a650		68 6f 75 74 20 46 6f 72 00
>a659		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a661		61 63 6b 20 66 75 6c 6c 00
>a66a		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a672		75 63 74 75 72 65 00
>a679		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a681		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a68e		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a696		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a6a4		41 72 72 61 79 20 73 69			.text	"Array size",0
>a6ac		7a 65 00
>a6af		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a6b7		79 20 69 6e 64 65 78 00
>a6bf		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a6c7		74 20 64 65 63 6c 61 72 65 64 00
>a6d2		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a6da		20 66 6f 75 6e 64 00
>a6e1		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a6e9		65 72 72 6f 72 00
>a6ef		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a6f7		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc4e		09 09 30 37 2f 30 31 2f			.text 9,9,"07/01/23 25"
>dc56		32 33 20 32 35

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a6fd						RectangleCommand:
.a6fd		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a6ff		80 02		bra $a703			bra 	ShapeDrawCmd
.a701						CircleCommand:
.a701		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a703						ShapeDrawCmd:
.a703		20 8d a7	jsr $a78d			jsr 	RunGraphicsCommand
.a706						ShapeDraw:
.a706		0d 77 07	ora $0777			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a709		4c 81 a7	jmp $a781			jmp 	ExecuteGraphicCommand	 	; and complete
.a70c						SpriteCommand:
.a70c		a2 00		ldx #$00			ldx 	#0
.a70e		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get image number.
.a711		5a		phy				phy
.a712		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a714		a6 58		ldx $58				ldx 	NSMantissa0
.a716		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a718		b0 0d		bcs $a727			bcs 	_SCRange
.a71a		a0 ff		ldy #$ff			ldy 	#255
.a71c		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a71f		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a721		7a		ply				ply
.a722		20 8d a7	jsr $a78d			jsr 	RunGraphicsCommand
.a725		80 5a		bra $a781			bra 	ExecuteGraphicCommand
.a727						_SCRange:
.a727		4c 45 a5	jmp $a545			jmp 	RangeError
.a72a						ImageCommand:
.a72a		a2 00		ldx #$00			ldx 	#0
.a72c		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get image number.
.a72f		20 8d a7	jsr $a78d			jsr 	RunGraphicsCommand
.a732						ImageRunDraw:
.a732		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a734		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a737		ad 7d 07	lda $077d			lda 	gxDrawScale
.a73a		0a		asl a				asl 	a
.a73b		0a		asl a				asl 	a
.a73c		0a		asl a				asl 	a
.a73d		a8		tay				tay
.a73e		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a740		a6 58		ldx $58				ldx 	NSMantissa0
.a742		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a745		60		rts				rts
.a746						TextCommand:
.a746		a2 00		ldx #$00			ldx 	#0
.a748		20 1a a3	jsr $a31a			jsr 	EvaluateString 				; get text
.a74b		20 8d a7	jsr $a78d			jsr 	RunGraphicsCommand
.a74e						TextRunDraw:
.a74e		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a750		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a753		a0 00		ldy #$00			ldy 	#0
.a755						_IRDLoop:
.a755		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a757		85 37		sta $37				sta 	zTemp0+1
.a759		a5 58		lda $58				lda 	NSMantissa0
.a75b		85 36		sta $36				sta 	zTemp0
.a75d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a75f		f0 13		beq $a774			beq 	_IRDExit
.a761		5a		phy				phy									; save string pos
.a762		48		pha				pha 								; save char
.a763		ad 7d 07	lda $077d			lda 	gxDrawScale 				; get scale
.a766		0a		asl a				asl 	a
.a767		0a		asl a				asl 	a
.a768		0a		asl a				asl 	a
.a769		a8		tay				tay
.a76a		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a76c		fa		plx				plx 								; char to draw
.a76d		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a770		7a		ply				ply 								; restore string pos
.a771		c8		iny				iny
.a772		90 e1		bcc $a755			bcc 	_IRDLoop 					; go back if no error.
.a774						_IRDExit:
.a774		60		rts				rts
.a775						PlotCommand:
.a775		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a777		20 8d a7	jsr $a78d			jsr 	RunGraphicsCommand
.a77a		80 05		bra $a781			bra 	ExecuteGraphicCommand
.a77c						LineCommand:
.a77c		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a77e		20 8d a7	jsr $a78d			jsr 	RunGraphicsCommand
.a781						ExecuteGraphicCommand:
.a781		0d 76 07	ora $0776			ora 	gxCommandID 				; make a full command
.a784		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; draw it and exit
.a787		b0 01		bcs $a78a			bcs 	_EGCError
.a789		60		rts				rts
.a78a						_EGCError:
.a78a		4c 40 a5	jmp $a540			jmp 	SyntaxError
.a78d						RunGraphicsCommand:
.a78d		8d 76 07	sta $0776			sta 	gxCommandID					; save TODO graphics command.
.a790		68		pla				pla 								; pop handler address
.a791		fa		plx				plx
.a792		1a		inc a				inc 	a
.a793		d0 01		bne $a796			bne 	_RGINoCarry
.a795		e8		inx				inx
.a796						_RGINoCarry:
.a796		8d 7b 07	sta $077b			sta 	gxHandler
.a799		8e 7c 07	stx $077c			stx 	gxHandler+1
.a79c						_RGICommandLoop:
.a79c		b1 30		lda ($30),y			lda 	(codePtr),y
.a79e		c8		iny				iny
.a79f		c9 d6		cmp #$d6			cmp 	#KWD_TO						; is it TO x,y
.a7a1		f0 53		beq $a7f6			beq 	_RGI_To
.a7a3		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a7a5		f0 55		beq $a7fc			beq 	_RGI_Here
.a7a7		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a7a9		f0 3d		beq $a7e8			beq 	_RGI_Exit
.a7ab		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a7ad		f0 39		beq $a7e8			beq 	_RGI_Exit
.a7af		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a7b1		f0 3e		beq $a7f1			beq 	_RGI_Frame
.a7b3		c9 d2		cmp #$d2			cmp 	#KWD_SOLID
.a7b5		f0 33		beq $a7ea			beq 	_RGI_Solid
.a7b7		c9 b5		cmp #$b5			cmp 	#KWD_BY 					; by offset
.a7b9		f0 4b		beq $a806			beq 	_RGI_By
.a7bb		c9 bf		cmp #$bf			cmp 	#KWD_FROM 					; from
.a7bd		f0 17		beq $a7d6			beq 	_RGI_Move2
.a7bf		c9 bc		cmp #$bc			cmp 	#KWD_DIM 					; dim (set scale)
.a7c1		f0 62		beq $a825			beq 	_RGI_Dim
.a7c3		c9 ba		cmp #$ba			cmp 	#KWD_COLOUR 				; colour or Color
.a7c5		f0 74		beq $a83b			beq 	_RGI_Colour
.a7c7		c9 b9		cmp #$b9			cmp 	#KWD_COLOR
.a7c9		f0 70		beq $a83b			beq 	_RGI_Colour
.a7cb		ae 76 07	ldx $0776			ldx 	gxCommandID
.a7ce		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a7d0		d0 03		bne $a7d5			bne 	_RGI_Move 					; move
.a7d2		4c 63 a8	jmp $a863			jmp		_RGI_SpriteInstructions
.a7d5						_RGI_Move:
.a7d5		88		dey				dey 								; unpick get.
.a7d6						_RGI_Move2:
.a7d6		20 89 a8	jsr $a889			jsr 	GCGetCoordinatePair 		; move to here
.a7d9		20 b0 a8	jsr $a8b0			jsr 	GCCopyPairToStore 			; save
.a7dc		5a		phy				phy
.a7dd		20 a6 a8	jsr $a8a6			jsr 	GCLoadAXY 					; load in
.a7e0		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a7e2		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a7e5		7a		ply				ply
.a7e6		80 b4		bra $a79c			bra 	_RGICommandLoop 			; and go round
.a7e8						_RGI_Exit:
.a7e8		88		dey				dey 								; unpick : / EOL
.a7e9		60		rts				rts
.a7ea						_RGI_Solid:
.a7ea		a9 02		lda #$02			lda 	#2
.a7ec		8d 77 07	sta $0777			sta 	gxFillSolid
.a7ef		80 ab		bra $a79c			bra 	_RGICommandLoop
.a7f1						_RGI_Frame:
.a7f1		9c 77 07	stz $0777			stz 	gxFillSolid
.a7f4		80 a6		bra $a79c			bra 	_RGICommandLoop
.a7f6						_RGI_To:
.a7f6		20 89 a8	jsr $a889			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a7f9		20 b0 a8	jsr $a8b0			jsr 	GCCopyPairToStore
.a7fc						_RGI_Here:
.a7fc		5a		phy				phy
.a7fd		20 a6 a8	jsr $a8a6			jsr 	GCLoadAXY 					; load it into AXY
.a800		20 60 a8	jsr $a860			jsr 	_RGICallHandler 			; go do whatever it is.
.a803		7a		ply				ply
.a804		80 96		bra $a79c			bra 	_RGICommandLoop 			; and go round
.a806						_RGI_By:
.a806		20 96 a8	jsr $a896			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a809		18		clc				clc
.a80a		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a80c		6d 78 07	adc $0778			adc 	gxXPos
.a80f		8d 78 07	sta $0778			sta 	gxXPos
.a812		a5 61		lda $61				lda 	NSMantissa1+1
.a814		6d 79 07	adc $0779			adc 	gxXPos+1
.a817		8d 79 07	sta $0779			sta 	gxXPos+1
.a81a		a5 5a		lda $5a				lda 	NSMantissa0+2
.a81c		18		clc				clc
.a81d		6d 7a 07	adc $077a			adc 	gxYPos
.a820		8d 7a 07	sta $077a			sta 	gxYPos
.a823		80 d7		bra $a7fc			bra 	_RGI_Here
.a825						_RGI_Dim:
.a825		a2 01		ldx #$01			ldx	 	#1
.a827		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger
.a82a		a5 59		lda $59				lda 	NSMantissa0+1
.a82c		c9 00		cmp #$00			cmp 	#0
.a82e		f0 2d		beq $a85d			beq 	_RGIRange
.a830		c9 09		cmp #$09			cmp 	#8+1
.a832		b0 29		bcs $a85d			bcs		_RGIRange
.a834		3a		dec a				dec 	a
.a835		8d 7d 07	sta $077d			sta 	gxDrawScale
.a838		4c 9c a7	jmp $a79c			jmp 	_RGICommandLoop
.a83b						_RGI_Colour:
.a83b		a2 01		ldx #$01			ldx 	#1 							; colour
.a83d		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger
.a840		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a842		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero
.a845		b1 30		lda ($30),y			lda 	(codePtr),y
.a847		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a849		d0 04		bne $a84f			bne 	_RGICDefaultMode
.a84b		c8		iny				iny
.a84c		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger
.a84f						_RGICDefaultMode:
.a84f		5a		phy				phy
.a850		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a852		a6 59		ldx $59				ldx 	NSMantissa0+1
.a854		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a856		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a859		7a		ply				ply
.a85a		4c 9c a7	jmp $a79c			jmp 	_RGICommandLoop 			; and go round
.a85d						_RGIRange:
.a85d		4c 45 a5	jmp $a545			jmp 	RangeError
.a860						_RGICallHandler:
.a860		6c 7b 07	jmp ($077b)			jmp 	(gxHandler)
.a863						_RGI_SpriteInstructions:
.a863		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a865		f0 07		beq $a86e			beq 	_RGISpriteOff
.a867		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a869		f0 13		beq $a87e			beq 	_RGISetImage
.a86b		4c d5 a7	jmp $a7d5			jmp 	_RGI_Move
.a86e						_RGISpriteOff:
.a86e		5a		phy				phy
.a86f		a0 01		ldy #$01			ldy 	#1
.a871		a2 00		ldx #$00			ldx 	#0
.a873						_RGIDoCommandLoop:
.a873		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a875		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a878		7a		ply				ply
.a879		b0 e2		bcs $a85d			bcs 	_RGIRange
.a87b		4c 9c a7	jmp $a79c			jmp 	_RGICommandLoop
.a87e						_RGISetImage:
.a87e		a2 01		ldx #$01			ldx 	#1
.a880		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger
.a883		5a		phy				phy
.a884		aa		tax				tax
.a885		a0 00		ldy #$00			ldy 	#0
.a887		80 ea		bra $a873			bra 	_RGIDoCommandLoop
.a889						GCGetCoordinatePair:
.a889		a2 01		ldx #$01			ldx 	#1
.a88b		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger
.a88e		20 66 94	jsr $9466			jsr 	CheckComma
.a891		e8		inx				inx
.a892		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger
.a895		60		rts				rts
.a896						GCSignedCoordinatePair:
.a896		a2 01		ldx #$01			ldx 	#1
.a898		20 4c a3	jsr $a34c			jsr 	Evaluate16BitIntegerSigned
.a89b		20 66 94	jsr $9466			jsr 	CheckComma
.a89e		e8		inx				inx
.a89f		20 4c a3	jsr $a34c			jsr 	Evaluate16BitIntegerSigned
.a8a2		60		rts				rts
.a8a3						_GCCPRange:
.a8a3		4c 45 a5	jmp $a545			jmp 	RangeError
.a8a6						GCLoadAXY:
.a8a6		ad 79 07	lda $0779			lda 	gxXPos+1
.a8a9		ae 78 07	ldx $0778			ldx 	gxXPos
.a8ac		ac 7a 07	ldy $077a			ldy 	gxYPos
.a8af		60		rts				rts
.a8b0						GCCopyPairToStore:
.a8b0		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a8b2		8d 78 07	sta $0778			sta 	gxXPos
.a8b5		a5 61		lda $61				lda 	NSMantissa1+1
.a8b7		8d 79 07	sta $0779			sta 	gxXPos+1
.a8ba		a5 5a		lda $5a				lda 	NSMantissa0+2
.a8bc		8d 7a 07	sta $077a			sta 	gxYPos
.a8bf		60		rts				rts
.0776						gxCommandID:
>0776								.fill 	1
.0777						gxFillSolid:
>0777								.fill 	1
.0778						gxXPos:
>0778								.fill 	2
.077a						gxYPos:
>077a								.fill 	1
.077b						gxHandler:
>077b								.fill 	2
.077d						gxDrawScale:
>077d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a8c0						BitmapCtrl:
.a8c0		b1 30		lda ($30),y			lda 	(codePtr),y
.a8c2		c8		iny				iny
.a8c3		a2 01		ldx #$01			ldx 	#1
.a8c5		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a8c7		f0 11		beq $a8da			beq 	BitmapSwitch
.a8c9		ca		dex				dex
.a8ca		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a8cc		f0 0c		beq $a8da			beq 	BitmapSwitch
.a8ce		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get the colour
.a8d1		5a		phy				phy
.a8d2		aa		tax				tax
.a8d3		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a8d5		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8d8		7a		ply				ply
.a8d9		60		rts				rts
.a8da						BitmapSwitch:
.a8da		5a		phy				phy
.a8db		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a8dd		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a8df		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8e2		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a8e4		a0 00		ldy #$00			ldy 	#0
.a8e6		a2 ff		ldx #$ff			ldx 	#$FF
.a8e8		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8eb		9c 77 07	stz $0777			stz 	gxFillSolid
.a8ee		9c 78 07	stz $0778			stz 	gxXPos
.a8f1		9c 79 07	stz $0779			stz 	gxXPos+1
.a8f4		9c 7a 07	stz $077a			stz 	gxYPos
.a8f7		9c 7d 07	stz $077d			stz 	gxDrawScale
.a8fa		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a8fc		a2 00		ldx #$00			ldx 	#0
.a8fe		a0 00		ldy #$00			ldy 	#0
.a900		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a903		7a		ply				ply
.a904		60		rts				rts
.a905						SpritesCtrl:
.a905		b1 30		lda ($30),y			lda 	(codePtr),y
.a907		c8		iny				iny
.a908		a2 01		ldx #$01			ldx 	#1
.a90a		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a90c		f0 08		beq $a916			beq 	SpriteSwitch
.a90e		ca		dex				dex
.a90f		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a911		f0 03		beq $a916			beq 	SpriteSwitch
.a913		4c 40 a5	jmp $a540			jmp 	SyntaxError
.a916						SpriteSwitch:
.a916		5a		phy				phy
.a917		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a919		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a91b		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a91e		7a		ply				ply
.a91f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a920						GfxCommand:
.a920		a2 00		ldx #$00			ldx 	#0
.a922		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; command
.a925		20 66 94	jsr $9466			jsr 	CheckComma
.a928		e8		inx				inx
.a929		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger 		; X
.a92c		20 66 94	jsr $9466			jsr 	CheckComma
.a92f		e8		inx				inx
.a930		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; Y
.a933		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a935		4a		lsr a				lsr 	a
.a936		d0 12		bne $a94a			bne 	_GfxError
.a938		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a93a		b0 0e		bcs $a94a			bcs 	_GfxError 					; bit 7 should have been zero
.a93c		5a		phy				phy 								; save pos
.a93d		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a93f		a6 59		ldx $59				ldx 	NSMantissa0+1
.a941		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a943		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a946		b0 02		bcs $a94a			bcs 	_GfxError
.a948		7a		ply				ply 								; restore pos and exit.
.a949		60		rts				rts
.a94a						_GfxError:
.a94a		4c 45 a5	jmp $a545			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a94d						UnaryHit:
.a94d		fa		plx				plx
.a94e		a9 36		lda #$36			lda 	#zTemp0
.a950		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a953		20 66 94	jsr $9466			jsr 	CheckComma
.a956		e8		inx				inx
.a957		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a95a		20 5e 94	jsr $945e			jsr		CheckRightBracket
.a95d		ca		dex				dex 								; fix back up again.
.a95e		da		phx				phx 								; save X/Y
.a95f		5a		phy				phy
.a960		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a962		b5 58		lda $58,x			lda 	NSMantissa0,x
.a964		aa		tax				tax
.a965		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a967		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; calculate result
.a96a		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a96b		7a		ply				ply 								; restore XY
.a96c		fa		plx				plx
.a96d		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte 					; return the hit result
.a970		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a971						PaletteCommand:
.a971		a2 00		ldx #$00			ldx 	#0
.a973		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; colour
.a976		20 66 94	jsr $9466			jsr 	CheckComma
.a979		e8		inx				inx
.a97a		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger 		; r
.a97d		20 66 94	jsr $9466			jsr 	CheckComma
.a980		e8		inx				inx
.a981		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; g
.a984		20 66 94	jsr $9466			jsr 	CheckComma
.a987		e8		inx				inx
.a988		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; b
.a98b		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a98d		85 36		sta $36				sta 	zTemp0
.a98f		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a991		85 37		sta $37				sta 	zTemp0+1
.a993		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a995		26 37		rol $37				rol	 	zTemp0+1
.a997		06 36		asl $36				asl 	zTemp0
.a999		26 37		rol $37				rol	 	zTemp0+1
.a99b		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a99d		85 01		sta $01				sta 	1
.a99f		5a		phy				phy
.a9a0		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a9a2		92 36		sta ($36)			sta 	(zTemp0)
.a9a4		a0 01		ldy #$01			ldy 	#1
.a9a6		a5 5a		lda $5a				lda 	NSMantissa0+2
.a9a8		91 36		sta ($36),y			sta 	(zTemp0),y
.a9aa		a5 59		lda $59				lda 	NSMantissa0+1
.a9ac		c8		iny				iny
.a9ad		91 36		sta ($36),y			sta 	(zTemp0),y
.a9af		7a		ply				ply
.a9b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a9b1						XLoadCommand:
.a9b1		20 6d 8e	jsr $8e6d			jsr 	NewProgram
.a9b4		20 f2 84	jsr $84f2			jsr 	BackloadProgram
.a9b7		4c b1 85	jmp $85b1			jmp 	WarmStart
.a9ba						XGoCommand:
.a9ba		20 6d 8e	jsr $8e6d			jsr 	NewProgram
.a9bd		20 f2 84	jsr $84f2			jsr 	BackloadProgram
.a9c0		4c eb 8f	jmp $8feb			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a9c3						UnaryEvent:
.a9c3		fa		plx				plx
.a9c4		20 5d aa	jsr $aa5d			jsr 	TimerToStackX 				; timer in +0
.a9c7		e8		inx				inx  								; put reference into +1
.a9c8		20 c5 9d	jsr $9dc5			jsr 	EvaluateTerm
.a9cb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a9cd		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a9cf		d0 4c		bne $aa1d			bne 	_UEType
.a9d1		e8		inx				inx 								; put the step in +2
.a9d2		20 66 94	jsr $9466			jsr 	CheckComma
.a9d5		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger
.a9d8		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.a9db		ca		dex				dex
.a9dc		ca		dex				dex
.a9dd		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a9df		85 36		sta $36				sta 	zTemp0
.a9e1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a9e3		85 37		sta $37				sta 	zTemp0+1
.a9e5		5a		phy				phy
.a9e6		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a9e8		b1 36		lda ($36),y			lda 	(zTemp0),y
.a9ea		30 2d		bmi $aa19			bmi 	_UEFalse 					; exit if signed.
.a9ec		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a9ee		b5 58		lda $58,x			lda 	NSMantissa0,x
.a9f0		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a9f2		c8		iny				iny
.a9f3		b5 60		lda $60,x			lda 	NSMantissa1,x
.a9f5		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a9f7		c8		iny				iny
.a9f8		b5 68		lda $68,x			lda 	NSMantissa2,x
.a9fa		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a9fc		90 1b		bcc $aa19			bcc 	_UEFalse 					; no, return FALSE.
.a9fe		18		clc				clc
.a9ff		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.aa01		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa03		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.aa05		91 36		sta ($36),y			sta 	(zTemp0),y
.aa07		c8		iny				iny
.aa08		b5 60		lda $60,x			lda 	NSMantissa1,x
.aa0a		75 62		adc $62,x			adc 	NSMantissa1+2,x
.aa0c		91 36		sta ($36),y			sta 	(zTemp0),y
.aa0e		c8		iny				iny
.aa0f		b5 68		lda $68,x			lda 	NSMantissa2,x
.aa11		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.aa13		91 36		sta ($36),y			sta 	(zTemp0),y
.aa15		7a		ply				ply
.aa16		4c e4 94	jmp $94e4			jmp 	ReturnTrue
.aa19						_UEFalse:
.aa19		7a		ply				ply 								; restore Y
.aa1a		4c ef 94	jmp $94ef			jmp 	ReturnFalse 				; and return False
.aa1d						_UEType:
.aa1d		4c 4a a5	jmp $a54a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.aa20						UnaryJoyX:
.aa20		18		clc				clc
.aa21		80 01		bra $aa24			bra 	JoyMain
.aa23						UnaryJoyY:
.aa23		38		sec				sec
.aa24						JoyMain:
.aa24		fa		plx				plx 								; get pos
.aa25		08		php				php 								; save carry (set for Y)
.aa26		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aa29		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.aa2c		20 33 82	jsr $8233			jsr 	EXTReadController 			; read the controller.
.aa2f		28		plp				plp
.aa30		b0 02		bcs $aa34			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.aa32		4a		lsr a				lsr 	a
.aa33		4a		lsr a				lsr 	a
.aa34						_JMNoShift:
.aa34		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.aa35		b0 07		bcs $aa3e			bcs 	JMIsLeft
.aa37		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.aa38		b0 07		bcs $aa41			bcs 	JMIsRight
.aa3a		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero 					; zero result
.aa3d		60		rts				rts
.aa3e						JMIsLeft:
.aa3e		4c e4 94	jmp $94e4			jmp 	ReturnTrue
.aa41						JMIsRight:
.aa41		a9 01		lda #$01			lda 	#1
.aa43		20 c4 a3	jsr $a3c4			jsr 	NSMSetByte
.aa46		60		rts				rts
.aa47						UnaryJoyB:
.aa47		fa		plx				plx 								; get pos
.aa48		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aa4b		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.aa4e		20 33 82	jsr $8233			jsr 	EXTReadController 			; read the controller.
.aa51		29 10		and #$10			and 	#$10
.aa53		d0 e9		bne $aa3e			bne 	JMIsLeft
.aa55		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero
.aa58		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.aa59						UnaryTimer:
.aa59		fa		plx				plx
.aa5a		20 5e 94	jsr $945e			jsr 	CheckRightBracket
.aa5d						TimerToStackX:
.aa5d		20 c2 a3	jsr $a3c2			jsr 	NSMSetZero 					; zero result
.aa60		64 01		stz $01				stz 	1 							; access I/O
.aa62		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.aa65		95 58		sta $58,x			sta 	NSMantissa0,x
.aa67		ad 5a d6	lda $d65a			lda 	$D65A
.aa6a		95 60		sta $60,x			sta 	NSMantissa1,x
.aa6c		ad 5b d6	lda $d65b			lda 	$D65B
.aa6f		95 68		sta $68,x			sta 	NSMantissa2,x
.aa71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.aa72						MemoryDeleteLine:
.aa72		20 91 aa	jsr $aa91			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aa75		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.aa77		a8		tay				tay
.aa78						_MDDLLoop:
.aa78		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.aa7a		92 30		sta ($30)			sta 	(codePtr)
.aa7c		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.aa7e		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.aa80		d0 07		bne $aa89			bne 	_MDLDLNext
.aa82		a5 31		lda $31				lda 	codePtr+1
.aa84		c5 3b		cmp $3b				cmp 	zTemp2+1
.aa86		d0 01		bne $aa89			bne 	_MDLDLNext
.aa88						_MDDLExit:
.aa88		60		rts				rts
.aa89						_MDLDLNext:
.aa89		e6 30		inc $30				inc 	codePtr						; next byte
.aa8b		d0 eb		bne $aa78			bne 	_MDDLLoop
.aa8d		e6 31		inc $31				inc 	codePtr+1
.aa8f		80 e7		bra $aa78			bra 	_MDDLLoop
.aa91						IMemoryFindEnd:
.aa91		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aa93		85 3a		sta $3a				sta 	0+zTemp2
.aa95		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aa97		85 3b		sta $3b				sta 	1+zTemp2
.aa99						_MDLFELoop:
.aa99		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.aa9b		f0 0b		beq $aaa8			beq 	_MDLFEExit
.aa9d		18		clc				clc
.aa9e		65 3a		adc $3a				adc 	zTemp2
.aaa0		85 3a		sta $3a				sta 	zTemp2
.aaa2		90 f5		bcc $aa99			bcc 	_MDLFELoop
.aaa4		e6 3b		inc $3b				inc 	zTemp2+1
.aaa6		80 f1		bra $aa99			bra 	_MDLFELoop
.aaa8						_MDLFEExit:
.aaa8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.aaa9						MemoryInsertLine:
.aaa9		08		php				php
.aaaa		20 91 aa	jsr $aa91			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aaad		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.aaaf		1a		inc a				inc 	a
.aab0		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.aab2		b0 36		bcs $aaea			bcs 	_MDLIError 					; no, fail.
.aab4		28		plp				plp 								; do at a specific point or the end ?
.aab5		90 08		bcc $aabf			bcc 	_MDLIFound 					; if specific point already set.
.aab7		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.aab9		85 30		sta $30				sta 	codePtr 					; end.
.aabb		a5 3b		lda $3b				lda 	zTemp2+1
.aabd		85 31		sta $31				sta 	codePtr+1
.aabf						_MDLIFound:
.aabf		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.aac2		a8		tay				tay
.aac3						_MDLIInsert:
.aac3		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.aac5		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.aac7		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.aac9		c5 3a		cmp $3a				cmp 	zTemp2
.aacb		d0 06		bne $aad3			bne 	_MDLINext
.aacd		a5 31		lda $31				lda 	codePtr+1
.aacf		c5 3b		cmp $3b				cmp 	zTemp2+1
.aad1		f0 0a		beq $aadd			beq 	_MDLIHaveSpace
.aad3						_MDLINext:
.aad3		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.aad5		d0 02		bne $aad9			bne 	_MDLINoBorrow
.aad7		c6 3b		dec $3b				dec 	zTemp2+1
.aad9						_MDLINoBorrow:
.aad9		c6 3a		dec $3a				dec 	zTemp2
.aadb		80 e6		bra $aac3			bra 	_MDLIInsert
.aadd						_MDLIHaveSpace:
.aadd		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.aae0		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.aae1						_MDLICopy:
.aae1		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.aae4		91 30		sta ($30),y			sta 	(codePtr),y
.aae6		88		dey				dey
.aae7		10 f8		bpl $aae1			bpl 	_MDLICopy
.aae9		60		rts				rts
.aaea						_MDLIError:
.aaea		a9 06		lda #$06		lda	#6
.aaec		4c 77 94	jmp $9477		jmp	ErrorHandler
.aaef						MDLAppendLine:
.aaef		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.aaf1		85 36		sta $36				sta 	zTemp0
.aaf3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aaf5		85 38		sta $38				sta 	0+zTemp1
.aaf7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aaf9		85 39		sta $39				sta 	1+zTemp1
.aafb		b2 38		lda ($38)			lda 	(zTemp1)
.aafd		d0 0a		bne $ab09			bne 	_MDLANoInitialise
.aaff		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ab01		8d 7e 07	sta $077e			sta 	0+AppendPointer
.ab04		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ab06		8d 7f 07	sta $077f			sta 	1+AppendPointer
.ab09						_MDLANoInitialise:
.ab09		18		clc				clc
.ab0a		ad 7e 07	lda $077e			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ab0d		85 38		sta $38				sta 	zTemp1
.ab0f		72 36		adc ($36)			adc 	(zTemp0)
.ab11		8d 7e 07	sta $077e			sta 	AppendPointer
.ab14		ad 7f 07	lda $077f			lda 	AppendPointer+1
.ab17		85 39		sta $39				sta 	zTemp1+1
.ab19		69 00		adc #$00			adc 	#0
.ab1b		8d 7f 07	sta $077f			sta 	AppendPointer+1
.ab1e		a0 00		ldy #$00			ldy 	#0
.ab20						_MDLACopy:
.ab20		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ab22		91 38		sta ($38),y			sta 	(zTemp1),y
.ab24		c8		iny				iny
.ab25		98		tya				tya
.ab26		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ab28		d0 f6		bne $ab20			bne 	_MDLACopy
.ab2a		a9 00		lda #$00			lda 	#0 							; end of program.
.ab2c		91 38		sta ($38),y			sta 	(zTemp1),y
.ab2e		60		rts				rts
.077e						AppendPointer:
>077e								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.ab2f						MemoryNew:
.ab2f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ab31		85 30		sta $30				sta 	codePtr
.ab33		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ab35		85 31		sta $31				sta 	codePtr+1
.ab37		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ab39		92 30		sta ($30)			sta 	(codePtr)
.ab3b		60		rts				rts
.ab3c						MemoryInline:
.ab3c		98		tya				tya 								; put address into stack,x
.ab3d		18		clc				clc  								; get the offset, add codePtr
.ab3e		65 30		adc $30				adc 	codePtr
.ab40		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ab42		a5 31		lda $31				lda 	codePtr+1
.ab44		69 00		adc #$00			adc 	#0
.ab46		95 60		sta $60,x			sta 	NSMantissa1,x
.ab48		74 68		stz $68,x			stz 	NSMantissa2,x
.ab4a		74 70		stz $70,x			stz 	NSMantissa3,x
.ab4c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.ab4d						MemorySearch:
.ab4d		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ab4f		86 37		stx $37				stx 	zTemp0+1
.ab51		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ab53		85 30		sta $30				sta 	codePtr
.ab55		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ab57		85 31		sta $31				sta 	codePtr+1
.ab59						_MTAXLoop:
.ab59		b2 30		lda ($30)			lda 	(codePtr)
.ab5b		18		clc				clc
.ab5c		f0 21		beq $ab7f			beq 	_MTAXExit 					; reached end, exit with CC.
.ab5e		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ab60		b1 30		lda ($30),y			lda 	(codePtr),y
.ab62		38		sec				sec
.ab63		e5 36		sbc $36				sbc 	zTemp0
.ab65		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ab67		c8		iny				iny 								; do the MSB
.ab68		b1 30		lda ($30),y			lda 	(codePtr),y
.ab6a		e5 37		sbc $37				sbc 	zTemp0+1
.ab6c		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ab6e		f0 0f		beq $ab7f			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ab70		b0 0d		bcs $ab7f			bcs 	_MTAXExit 					; current < required exit
.ab72		18		clc				clc
.ab73		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ab75		65 30		adc $30				adc 	codePtr
.ab77		85 30		sta $30				sta 	codePtr
.ab79		90 02		bcc $ab7d			bcc 	_CREExit
.ab7b		e6 31		inc $31				inc 	codePtr+1 					; carry
.ab7d						_CREExit:
.ab7d		80 da		bra $ab59			bra 	_MTAXLoop
.ab7f						_MTAXExit:
.ab7f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.ab80						UpdateFont:
.ab80		a5 01		lda $01				lda 	1 							; save position
.ab82		48		pha				pha
.ab83		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.ab85		85 01		sta $01				sta 	1
.ab87		a9 ae		lda #$ae			lda 	#((FontBinary) & $FF)
.ab89		85 36		sta $36				sta 	0+zTemp0
.ab8b		a9 ab		lda #$ab			lda 	#((FontBinary) >> 8)
.ab8d		85 37		sta $37				sta 	1+zTemp0
.ab8f		a9 00		lda #$00			lda 	#(($C000) & $FF)
.ab91		85 38		sta $38				sta 	0+zTemp1
.ab93		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.ab95		85 39		sta $39				sta 	1+zTemp1
.ab97						_UFCopy1:
.ab97		a0 00		ldy #$00			ldy 	#0
.ab99						_UFCopy2:
.ab99		b1 36		lda ($36),y			lda 	(zTemp0),y
.ab9b		91 38		sta ($38),y			sta 	(zTemp1),y
.ab9d		c8		iny				iny
.ab9e		d0 f9		bne $ab99			bne 	_UFCopy2
.aba0		e6 37		inc $37				inc 	zTemp0+1
.aba2		e6 39		inc $39				inc 	zTemp1+1
.aba4		a5 39		lda $39				lda 	zTemp1+1
.aba6		c9 c8		cmp #$c8			cmp 	#$C8
.aba8		d0 ed		bne $ab97			bne 	_UFCopy1
.abaa		68		pla				pla 								; restore.
.abab		85 01		sta $01				sta 	1
.abad		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.abae						FontBinary:
>abae		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>abb6		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>abc6		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>abd6		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>abe6		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>abf6		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>ac06		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>ac16		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>ac26		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>ac36		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>ac46		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>ac56		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>ac66		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>ac76		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>ac86		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>ac96		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>aca6		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>acb6		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>acc6		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>acd6		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>ace6		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>acf6		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>ad06		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>ad16		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>ad26		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>ad36		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>ad46		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>ad56		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>ad66		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>ad76		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>ad86		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>ad96		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>ada6		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>adb6		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>adc6		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>add6		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>ade6		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>adf6		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>ae06		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>ae16		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>ae26		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ae36		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ae46		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ae56		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>ae66		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ae76		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ae86		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>ae96		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>aea6		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>aeb6		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aec6		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>aed6		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aee6		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aef6		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>af06		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>af16		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>af26		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>af36		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>af46		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>af56		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>af66		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>af76		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>af86		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>af96		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>afa6		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>afb6		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>afc6		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>afd6		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>afe6		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>aff6		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>b006		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b016		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b026		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b036		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b046		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b056		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b066		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b076		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b086		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b096		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b0a6		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b0b6		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b0c6		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b0d6		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b0e6		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b0f6		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b106		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b116		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b126		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b136		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b146		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>b156		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>b166		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>b176		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>b186		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>b196		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>b1a6		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>b1b6		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b1c6		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b1d6		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b1e6		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b1f6		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b206		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b216		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b226		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b236		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b246		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b256		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b266		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>b276		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>b286		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>b296		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>b2a6		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>b2b6		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>b2c6		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>b2d6		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b2e6		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b2f6		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b306		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b316		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b326		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b336		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b346		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b356		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b366		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b376		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b386		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b396		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b3a6		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b3ae						PingCommand:
.b3ae		5a		phy				phy 								; save pos
.b3af		a9 01		lda #$01			lda 	#1 						; push channel.
.b3b1		48		pha				pha
.b3b2		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b3b4		a2 06		ldx #$06			ldx 	#6 						; length
.b3b6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3b8		80 24		bra $b3de			bra 	SoundEffectCommand
.b3ba						ZapCommand:
.b3ba		5a		phy				phy 								; save pos
.b3bb		a9 01		lda #$01			lda 	#1 						; push channel.
.b3bd		48		pha				pha
.b3be		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b3c0		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3c2		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b3c4		80 18		bra $b3de			bra 	SoundEffectCommand
.b3c6						ShootCommand:
.b3c6		5a		phy				phy 								; save pos
.b3c7		a9 03		lda #$03			lda 	#3 						; push channel.
.b3c9		48		pha				pha
.b3ca		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b3cc		a2 04		ldx #$04			ldx 	#4 						; length
.b3ce		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3d0		80 0c		bra $b3de			bra 	SoundEffectCommand
.b3d2						Explode:
.b3d2		5a		phy				phy 								; save pos
.b3d3		a9 03		lda #$03			lda 	#3 						; push channel.
.b3d5		48		pha				pha
.b3d6		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b3d8		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3da		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3dc		80 00		bra $b3de			bra 	SoundEffectCommand
.b3de						SoundEffectCommand:
.b3de		8d 80 07	sta $0780			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b3e1		9c 81 07	stz $0781			stz 	SoundCommandBlock+1
.b3e4		a9 0f		lda #$0f			lda 	#15
.b3e6		8d 82 07	sta $0782			sta 	SoundCommandBlock+2
.b3e9		8e 83 07	stx $0783			stx 	SoundCommandBlock+3
.b3ec		8c 84 07	sty $0784			sty 	SoundCommandBlock+4
.b3ef		9c 85 07	stz $0785			stz 	SoundCommandBlock+5
.b3f2		68		pla				pla
.b3f3		09 10		ora #$10			ora 	#$10  						; execute command $11
.b3f5		a2 80		ldx #$80			ldx 	#(SoundCommandBlock & $FF)
.b3f7		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b3f9		20 3f 80	jsr $803f			jsr 	SNDCommand
.b3fc		7a		ply				ply
.b3fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b3fe						UnaryPlaying:
.b3fe		fa		plx				plx
.b3ff		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; get channel #
.b402		48		pha				pha
.b403		20 5e 94	jsr $945e			jsr		CheckRightBracket
.b406		68		pla				pla
.b407		c9 04		cmp #$04			cmp 	#4
.b409		b0 0c		bcs $b417			bcs 	_UPNotPlaying
.b40b		09 20		ora #$20			ora 	#$20 						; query playing ?
.b40d		20 3f 80	jsr $803f			jsr 	SNDCommand
.b410		c9 00		cmp #$00			cmp 	#0
.b412		f0 03		beq $b417			beq 	_UPNotPlaying
.b414		4c e4 94	jmp $94e4			jmp 	ReturnTrue
.b417						_UPNotPlaying:
.b417		4c ef 94	jmp $94ef			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b41a						SoundCommand:
.b41a		b1 30		lda ($30),y			lda 	(codePtr),y
.b41c		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.b41e		d0 09		bne $b429			bne 	_SNDMain
.b420		c8		iny				iny 								; skip OFF
.b421		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b423		5a		phy				phy
.b424		20 3f 80	jsr $803f			jsr 	SNDCommand
.b427		7a		ply				ply
.b428		60		rts				rts
.b429						_SNDMain:
.b429		a2 00		ldx #$00			ldx 	#0
.b42b		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; channel
.b42e		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b430		b0 4b		bcs $b47d			bcs 	_SndError
.b432		e8		inx				inx 								; do the rest in slot 1.
.b433		20 66 94	jsr $9466			jsr 	CheckComma
.b436		20 42 a3	jsr $a342			jsr 	Evaluate16BitInteger 		; Pitch
.b439		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b43b		c9 10		cmp #$10			cmp 	#16
.b43d		b0 3e		bcs $b47d			bcs 	_SndError
.b43f		8d 81 07	sta $0781			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b442		b5 58		lda $58,x			lda 	NSMantissa0,x
.b444		8d 80 07	sta $0780			sta 	SoundCommandBlock
.b447		20 66 94	jsr $9466			jsr 	CheckComma
.b44a		20 5d a3	jsr $a35d			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b44d		8d 83 07	sta $0783			sta 	SoundCommandBlock+3
.b450		a9 0f		lda #$0f			lda 	#15
.b452		8d 82 07	sta $0782			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b455		9c 84 07	stz $0784			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b458		9c 85 07	stz $0785			stz 	SoundCommandBlock+5
.b45b		b1 30		lda ($30),y			lda 	(codePtr),y
.b45d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b45f		d0 0e		bne $b46f			bne 	_SNDPlay
.b461		c8		iny				iny
.b462		20 4c a3	jsr $a34c			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b465		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b467		8d 84 07	sta $0784			sta 	SoundCommandBlock+4
.b46a		b5 60		lda $60,x			lda 	NSMantissa1,x
.b46c		8d 85 07	sta $0785			sta 	SoundCommandBlock+5
.b46f						_SNDPlay:
.b46f		5a		phy				phy
.b470		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b472		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b474		a2 80		ldx #$80			ldx 	#(SoundCommandBlock & $FF)
.b476		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b478		20 3f 80	jsr $803f			jsr 	SNDCommand
.b47b		7a		ply				ply
.b47c		60		rts				rts
.b47d						_SndError:
.b47d		4c 45 a5	jmp $a545			jmp 	RangeError
.0780						SoundCommandBlock:
>0780								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b480						StackPushByte:
.b480		48		pha				pha 								; save byte on stack
.b481		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b483		d0 08		bne $b48d			bne 	_SPBNoBorrow
.b485		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b487		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b489		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b48b		90 06		bcc $b493			bcc 	_SPBMemory
.b48d						_SPBNoBorrow:
.b48d		c6 34		dec $34				dec 	basicStack
.b48f		68		pla				pla 								; get back and write
.b490		92 34		sta ($34)			sta 	(basicStack)
.b492		60		rts				rts
.b493						_SPBMemory:
.b493		a9 12		lda #$12		lda	#18
.b495		4c 77 94	jmp $9477		jmp	ErrorHandler
.b498						StackPopByte:
.b498		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b49a		e6 34		inc $34				inc 	basicStack
.b49c		d0 02		bne $b4a0			bne 	_SPBNoCarry
.b49e		e6 35		inc $35				inc 	basicStack+1
.b4a0						_SPBNoCarry:
.b4a0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b4a1						StackOpen:
.b4a1		48		pha				pha 								; save frame byte
.b4a2		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b4a4		0a		asl a				asl 	a 							; claim twice this for storage
.b4a5		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b4a7		38		sec				sec 								; so basically subtracting from
.b4a8		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b4aa		85 34		sta $34				sta 	basicStack
.b4ac		b0 09		bcs $b4b7			bcs 	_SONoBorrow
>b4ae		db						.byte 	$DB 						; causes a break in the emulator
.b4af		c6 35		dec $35				dec 	basicStack+1
.b4b1		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b4b3		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b4b5		90 04		bcc $b4bb			bcc 	_SOMemory
.b4b7						_SONoBorrow:
.b4b7		68		pla				pla 								; get marker back and write at TOS
.b4b8		92 34		sta ($34)			sta 	(basicStack)
.b4ba		60		rts				rts
.b4bb						_SOMemory:
.b4bb		a9 12		lda #$12		lda	#18
.b4bd		4c 77 94	jmp $9477		jmp	ErrorHandler
.b4c0						StackClose:
.b4c0		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b4c2		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b4c4		0a		asl a				asl 	a 							; claim twice this.
.b4c5		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b4c7		85 34		sta $34				sta 	basicStack
.b4c9		90 02		bcc $b4cd			bcc 	_SCExit
.b4cb		e6 35		inc $35				inc 	basicStack+1
.b4cd						_SCExit:
.b4cd		60		rts				rts
.b4ce						StackCheckFrame:
.b4ce		48		pha				pha
.b4cf						_StackRemoveLocals:
.b4cf		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b4d1		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b4d3		b0 05		bcs $b4da			bcs 	_SCNoLocal
.b4d5		20 1c 8e	jsr $8e1c			jsr 	LocalPopValue 				; restore the local value
.b4d8		80 f5		bra $b4cf			bra 	_StackRemoveLocals 			; gr round again
.b4da						_SCNoLocal:
.b4da		68		pla				pla 								; get the frame check.
.b4db		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b4dd		29 f0		and #$f0			and 	#$F0 						; check type bits
.b4df		d0 01		bne $b4e2			bne 	_SCFError 					; different, we have structures mixed up
.b4e1		60		rts				rts
.b4e2						_SCFError:
.b4e2		8a		txa				txa 								; report error X
.b4e3		4c 77 94	jmp $9477			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b4e6						STKSaveCodePosition:
.b4e6		5a		phy				phy
.b4e7		98		tya				tya 								; save Y
.b4e8		a0 05		ldy #$05			ldy 	#5
.b4ea		91 34		sta ($34),y			sta 	(basicStack),y
.b4ec		88		dey				dey 								; save Code Pointer
.b4ed						_STKSaveLoop:
.b4ed		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b4f0		91 34		sta ($34),y			sta 	(basicStack),y
.b4f2		88		dey				dey
.b4f3		d0 f8		bne $b4ed			bne 	_STKSaveLoop
.b4f5		7a		ply				ply
.b4f6		60		rts				rts
.b4f7						STKLoadCodePosition:
.b4f7		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b4f9						_STKLoadLoop:
.b4f9		b1 34		lda ($34),y			lda 	(basicStack),y
.b4fb		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b4fe		c8		iny				iny
.b4ff		c0 05		cpy #$05			cpy 	#5
.b501		d0 f6		bne $b4f9			bne 	_STKLoadLoop
.b503		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b505		a8		tay				tay
.b506		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b507						StackReset:
.b507		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b509		85 34		sta $34				sta 	0+basicStack
.b50b		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b50d		85 35		sta $35				sta 	1+basicStack
.b50f		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b511		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b513		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b514						StringConcrete:
.b514		5a		phy				phy 								; save position on stack
.b515		20 b1 9f	jsr $9fb1			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b518		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b51a		85 38		sta $38				sta 	zTemp1
.b51c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b51e		85 39		sta $39				sta 	zTemp1+1
.b520		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b522						_SALength:
.b522		c8		iny				iny
.b523		b1 38		lda ($38),y			lda 	(zTemp1),y
.b525		d0 fb		bne $b522			bne 	_SALength
.b527		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b529		b0 3d		bcs $b568			bcs 	_SALengthError
.b52b		98		tya				tya 				 				; length of the new string
.b52c		18		clc				clc
.b52d		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b52f		90 02		bcc $b533			bcc 	_SAHaveLength
.b531		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b533						_SAHaveLength:
.b533		48		pha				pha 								; save length.
.b534		38		sec				sec
.b535		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b537		6d 0e 04	adc $040e			adc 	stringMemory
.b53a		8d 0e 04	sta $040e			sta 	stringMemory
.b53d		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b53f		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b541		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b543		6d 0f 04	adc $040f			adc 	stringMemory+1
.b546		8d 0f 04	sta $040f			sta 	stringMemory+1
.b549		85 3b		sta $3b				sta 	zTemp2+1
.b54b		95 60		sta $60,x			sta 	NSMantissa1,x
.b54d		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b54e		38		sec				sec
.b54f		e9 03		sbc #$03			sbc 	#3
.b551		92 3a		sta ($3a)			sta 	(zTemp2)
.b553		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b555		a0 01		ldy #$01			ldy 	#1
.b557		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b559						_SACopyNewString:
.b559		a0 00		ldy #$00			ldy 	#0
.b55b						_SACopyNSLoop:
.b55b		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b55d		c8		iny				iny 								; write two on in string storage
.b55e		c8		iny				iny
.b55f		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b561		88		dey				dey 								; this makes it one one.
.b562		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b564		d0 f5		bne $b55b			bne 	_SACopyNSLoop
.b566		7a		ply				ply
.b567		60		rts				rts
.b568						_SALengthError:
.b568		a9 09		lda #$09		lda	#9
.b56a		4c 77 94	jmp $9477		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b56d						StringSystemInitialise:
.b56d		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b56f		8d 0e 04	sta $040e			sta 	0+stringMemory
.b572		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b574		8d 0f 04	sta $040f			sta 	1+stringMemory
.b577		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b57a		60		rts				rts
.b57b						StringSpaceInitialise:
.b57b		20 b1 9f	jsr $9fb1			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b57e		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b580		8d 10 04	sta $0410			sta 	stringInitialised
.b583		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b586		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b589		ad 0f 04	lda $040f			lda 	stringMemory+1
.b58c		3a		dec a				dec 	a
.b58d		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b590		60		rts				rts
.b591						StringTempAllocate:
.b591		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b593		b0 30		bcs $b5c5			bcs 	_STALength
.b595		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b598		30 05		bmi $b59f			bmi 	_STAAllocate
.b59a		48		pha				pha 								; save value to subtract.
.b59b		20 7b b5	jsr $b57b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b59e		68		pla				pla 								; restore it
.b59f						_STAAllocate:
.b59f		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b5a1		18		clc				clc  								; deliberate allows one more
.b5a2		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b5a5		8d 11 04	sta $0411			sta 	stringTempPointer
.b5a8		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b5aa		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b5ac		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b5af		69 ff		adc #$ff			adc 	#$FF
.b5b1		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b5b4		85 3d		sta $3d				sta 	zsTemp+1
.b5b6		95 60		sta $60,x			sta 	NSMantissa1,x
.b5b8		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b5ba		74 70		stz $70,x			stz 	NSMantissa3,x
.b5bc		a9 10		lda #$10			lda 	#NSTString
.b5be		95 50		sta $50,x			sta 	NSStatus,x
.b5c0		a9 00		lda #$00			lda 	#0 							; clear the target string
.b5c2		92 3c		sta ($3c)			sta 	(zsTemp)
.b5c4		60		rts				rts
.b5c5						_STALength:
.b5c5		a9 09		lda #$09		lda	#9
.b5c7		4c 77 94	jmp $9477		jmp	ErrorHandler
.b5ca						StringTempWrite:
.b5ca		48		pha				pha
.b5cb		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b5cd		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b5cf		d0 02		bne $b5d3			bne 	_STWNoCarry
.b5d1		e6 3d		inc $3d				inc 	zsTemp+1
.b5d3						_STWNoCarry:
.b5d3		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b5d5		92 3c		sta ($3c)			sta 	(zsTemp)
.b5d7		68		pla				pla
.b5d8		60		rts				rts

;******  Return to file: _basic.asm

.b5d9						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 87 07	ldy $0787			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 87 07	ldy $0787			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 88 07	lda $0788			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 87 07	sty $0787			sty 	EXTColumn
.c02d	a02d	cc 89 07	cpy $0789			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 86 07	inc $0786			inc 	EXTRow  					; bump row
.c035	a035	9c 87 07	stz $0787			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 86 07	lda $0786			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 8a 07	cmp $078a			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 89 07	adc $0789			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 87 07	dec $0787			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 87 07	stz $0787			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 86 07	dec $0786			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 86 07	lda $0786			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 86 07	dec $0786			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 89 07	sbc $0789			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 87 07	sty $0787			sty 	EXTColumn
.c08c	a08c	cc 89 07	cpy $0789			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 87 07	sty $0787			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 8a 07	lda $078a			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 86 07	cmp $0786			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 86 07	inc $0786			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 89 07	adc $0789			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 87 07	lda $0787			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 87 07	sta $0787			sta 	EXTColumn
.c0c9	a0c9	cd 89 07	cmp $0789			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 87 07	dec $0787			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 89 07	ldy $0789			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 89 07	cpy $0789			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 88 07	and $0788			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 88 07	sta $0788			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 88 07	ora $0788			ora 	EXTTextColour
.c13c	a13c	8d 88 07	sta $0788			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 88 07	lda $0788			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 88 07	lda $0788			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 86 07	stz $0786			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 87 07	stz $0787			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 87 07	lda $0787			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 86 07	lda $0786			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 75 07	cmp $0775			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 75 07	sta $0775			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 f4 bb	jsr $bbf4			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 18 82	jsr $8218			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 87 07	lda $0787			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 87 07	ldy $0787			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 89 07	cpy $0789			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 87 07	ldy $0787			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 89 07	cpy $0789			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 89 07	ldy $0789			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 87 07	cpy $0787			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 89 07	lda $0789			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 89 07	ldy $0789			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0786						EXTRow:
>0786								.fill 	1
.0787						EXTColumn:
>0787								.fill 	1
.0788						EXTTextColour:
>0788								.fill 	1
.0789						EXTScreenWidth:
>0789								.fill 	1
.078a						EXTScreenHeight:
>078a								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 88 07	sta $0788			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 89 07	sta $0789			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 8a 07	sta $078a			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 86 07	lda $0786			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.078b						gxCurrentX:
>078b								.fill 	2
.078d						gxCurrentY:
>078d								.fill 	2
.078f						gxLastX:
>078f								.fill 	2
.0791						gxLastY:
>0791								.fill 	2
.0793						gxX0:
>0793								.fill 	2
.0795						gxY0:
>0795								.fill 	2
.0797						gxX1:
>0797								.fill 	2
.0799						gxY1:
>0799								.fill 	2
.079b						gxSpritesOn:
>079b								.fill 	1
.079c						gxBitmapsOn:
>079c								.fill 	1
.079d						gxBasePage:
>079d								.fill 	1
.079e						gxSpritePage:
>079e								.fill 	1
.079f						gxHeight:
>079f								.fill 	1
.07a0						gxMode:
>07a0								.fill 	1
.07a1						gxColour:
>07a1								.fill 	1
.07a2						gxEORValue:
>07a2								.fill 	1
.07a3						gxANDValue:
>07a3								.fill 	1
.07a4						gxOriginalLUTValue:
>07a4								.fill 	1
.07a5						gxOffset:
>07a5								.fill 	1
.07a6						GSCurrentSpriteID:
>07a6								.fill 	1
.07a7						GSCurrentSpriteAddr:
>07a7								.fill 	2
.07a9						gxSpriteOffsetBase:
>07a9								.fill 	2
.07ab						gxSpriteLow:
>07ab								.fill 	64
.07eb						gxSpriteHigh:
>07eb								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 8b 07	lda $078b,x			lda 	gxCurrentX,x
.c800	a800	9d 8f 07	sta $078f,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8d 07	sta $078d			sta 	gxCurrentY
.c80a	a80a	9c 8e 07	stz $078e			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 8b 07	sta $078b			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8c 07	sta $078c			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8c 07	lda $078c			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 8b 07	lda $078b			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8d 07	lda $078d			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd 9f 07	cmp $079f			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 8b 07	lda $078b,x			lda 	gxCurrentX,x
.c83c	a83c	9d 93 07	sta $0793,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2e 08	sta $082e			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9c 07	lda $079c			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 2f 08	stz $082f			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2c 08	lda $082c			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2d 08	cmp $082d			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2d 08	lda $082d			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2c 08	lda $082c			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2d 08	ldx $082d			ldx	 	gxYCentre
.c898	a898	8d 2d 08	sta $082d			sta 	gxYCentre
.c89b	a89b	8e 2c 08	stx $082c			stx 	gxxCentre
.c89e	a89e	ad 2f 08	lda $082f			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 2f 08	sta $082f			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2e 08	lda $082e	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 2f 08	lda $082f			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2d 08	lda $082d			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2c 08	lda $082c			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2e 08	lda $082e			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2d 08	sbc $082d			sbc 	gxYCentre
.c8df	a8df	8d 2d 08	sta $082d			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 97 07	lda $0797,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 93 07	sta $0793,x			sta 	gxX0,x
.c8f6	a8f6	bd 98 07	lda $0798,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 94 07	sta $0794,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 2f 08	stz $082f			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2c 08	inc $082c			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2c 08	lda $082c			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2c 08	inc $082c			inc 	gxxCentre					; X++
.c918	a918	ce 2d 08	dec $082d			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2c 08	lda $082c			lda 	gxxCentre
.c91f	a91f	ed 2d 08	sbc $082d			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 2f 08	dec $082f			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 99 07	lda $0799			lda 	gxY1
.c958	a958	ed 95 07	sbc $0795			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 2b 08	sta $082b			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2c 08	stz $082c			stz 	gxxCentre
.c96c	a96c	ad 2b 08	lda $082b			lda 	gxRadius
.c96f	a96f	8d 2d 08	sta $082d			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 97 07	lda $0797,x			lda 	gxX1,x
.c987	a987	7d 93 07	adc $0793,x			adc 	gxX0,x
.c98a	a98a	9d 97 07	sta $0797,x			sta 	gxX1,x
.c98d	a98d	bd 98 07	lda $0798,x			lda 	gxX1+1,x
.c990	a990	7d 94 07	adc $0794,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 98 07	sta $0798,x			sta 	gxX1+1,x
.c997	a997	7e 97 07	ror $0797,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.082b						gxRadius:
>082b								.fill 	1
.082c						gxxCentre:
>082c								.fill 	1
.082d						gxYCentre:
>082d								.fill 	1
.082e						gxIsFillMode:
>082e								.fill 	1
.082f						gxYChanged:
>082f								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9c 07	lda $079c			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad 9f 07	lda $079f			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9d 07	adc $079d			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9d 07	cmp $079d			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 9b 07	stz $079b			stz 	gxSpritesOn
.c9f4	a9f4	9c 9c 07	stz $079c			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 8b 07	stz $078b,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9c 07	sta $079c			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9d 07	sta $079d			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e 9f 07	stx $079f			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 9b 07	sta $079b			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9e 07	sta $079e			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d a9 07	sta $07a9			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d aa 07	sta $07aa			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a8 07	stz $07a8			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e eb 07	stz $07eb,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d ab 07	sta $07ab,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9c 07	lda $079c			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a5 07	ldy $07a5			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a3 07	and $07a3			and 	gxANDValue
.cac1	aac1	4d a2 07	eor $07a2			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 32 08	lda $0832			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 93 07	lda $0793			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 97 07	eor $0797			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 94 07	lda $0794			lda 	gxX0+1
.cae7	aae7	4d 98 07	eor $0798			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 99 07	lda $0799			lda 	gxY1
.caee	aaee	4d 95 07	eor $0795			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 34 08	lda $0834			lda 	gxPosition
.caf6	aaf6	6d 35 08	adc $0835			adc 	gxAdjust
.caf9	aaf9	8d 34 08	sta $0834			sta 	gxPosition
.cafc	aafc	9c 37 08	stz $0837			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 36 08	cmp $0836			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 37 08	dec $0837			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 36 08	sbc $0836			sbc 	gxTotal
.cb0d	ab0d	8d 34 08	sta $0834			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 32 08	lda $0832			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 37 08	lda $0837			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 37 08	lda $0837			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 33 08	lda $0833			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 93 07	lda $0793			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 94 07	dec $0794			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 93 07	dec $0793			dec 	gxX0
.cb3e	ab3e	ce a5 07	dec $07a5			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a5 07	lda $07a5			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 93 07	inc $0793			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 94 07	inc $0794			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a5 07	inc $07a5			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 95 07	inc $0795			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 99 07	lda $0799			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 95 07	sbc $0795			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 31 08	sta $0831			sta 	gxDiffY
.cb86	ab86	9c 33 08	stz $0833			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 97 07	lda $0797			lda 	gxX1
.cb8d	ab8d	ed 93 07	sbc $0793			sbc 	gxX0
.cb90	ab90	8d 30 08	sta $0830			sta 	gxDiffX
.cb93	ab93	ad 98 07	lda $0798			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 94 07	sbc $0794			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 30 08	ror $0830			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 30 08	sbc $0830			sbc 	gxDiffX
.cba6	aba6	8d 30 08	sta $0830			sta 	gxDiffX
.cba9	aba9	ce 33 08	dec $0833			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 32 08	stz $0832			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 31 08	lda $0831			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 35 08	sta $0835			sta 	gxAdjust
.cbb5	abb5	ad 30 08	lda $0830			lda 	gxDiffX
.cbb8	abb8	8d 36 08	sta $0836			sta 	gxTotal
.cbbb	abbb	ad 31 08	lda $0831			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 30 08	cmp $0830			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 32 08	dec $0832			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 30 08	lda $0830			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 35 08	sta $0835			sta 	gxAdjust
.cbcc	abcc	ad 31 08	lda $0831			lda 	gxDiffY
.cbcf	abcf	8d 36 08	sta $0836			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 36 08	lda $0836			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 34 08	sta $0834			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.0830						gxDiffX:
>0830								.fill 	1
.0831						gxDiffY:
>0831								.fill 	1
.0832						gxIsDiffYLarger:
>0832								.fill 	1
.0833						gxDXNegative:
>0833								.fill 	1
.0834						gxPosition:
>0834								.fill 	1
.0835						gxAdjust:
>0835								.fill 	1
.0836						gxTotal:
>0836								.fill 	1
.0837						gxAddSelect:
>0837								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e a1 07	stx $07a1			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d a0 07	sta $07a0			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a3 07	stz $07a3			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae a1 07	ldx $07a1			ldx 	gxColour
.cbec	abec	8e a2 07	stx $07a2			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a3 07	stx $07a3			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a2 07	stz $07a2			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a3 07	lda $07a3			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a3 07	sta $07a3			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a5 07	ldy $07a5			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a3 07	and $07a3			and 	gxANDValue
.cc16	ac16	4d a2 07	eor $07a2			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9c 07	lda $079c			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 95 07	lda $0795			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 99 07	cmp $0799			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 95 07	inc $0795			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 95 07	lda $0795			lda 	gxY0 						; reached last line
.cc48	ac48	cd 99 07	cmp $0799			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 97 07	lda $0797			lda		gxX1
.cc65	ac65	ed 93 07	sbc $0793			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 98 07	lda $0798			lda 	gxX1+1
.cc6d	ac6d	ed 94 07	sbc $0794			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a5 07	lda $07a5			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a5 07	ldy $07a5			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a3 07	and $07a3			and 	gxANDValue
.cc8a	ac8a	4d a2 07	eor $07a2			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a3 07	and $07a3			and 	gxANDValue
.cca8	aca8	4d a2 07	eor $07a2			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a3 07	and $07a3			and 	gxANDValue
.ccc0	acc0	4d a2 07	eor $07a2			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a5 07	sta $07a5			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 38 08	sta $0838			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 39 08	sta $0839			sta 	gxMask 						; and mask
.cce7	ace7	ad 9c 07	lda $079c			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 95 07	lda $0795			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 3b 08	sty $083b			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 3a 08	stx $083a			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3d 08	lda $083d			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3c 08	sta $083c			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3d 08	bit $083d			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 39 08	lda $0839			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3c 08	lda $083c			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 95 07	lda $0795			lda 	gxY0 						; off screen
.cd20	ad20	cd 9f 07	cmp $079f			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 38 08	cmp $0838			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 95 07	sta $0795			sta 	gxY0
.cd39	ad39	ae 3c 08	ldx $083c			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 38 08	lda $0838			lda 	gxSize
.cd40	ad40	6d 93 07	adc $0793			adc 	gxX0
.cd43	ad43	8d 93 07	sta $0793			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 94 07	inc $0794			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 3a 08	jmp ($083a)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a5 07	ldy $07a5			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3c 08	lda $083c			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c a0 07	bit $07a0			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 39 08	lda $0839			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3d 08	lda $083d			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a3 07	and $07a3			and 	gxANDValue
.cd84	ad84	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 38 08	cmp $0838			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 95 07	inc $0795			inc 	gxY0
.cda1	ada1	60		rts				rts
.0838						gxSize:
>0838								.fill 	1
.0839						gxMask:
>0839								.fill 	1
.083a						gxAcquireVector:
>083a								.fill 	2
.083c						gxScale:
>083c								.fill 	1
.083d						gxUseMode:
>083d								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d a0 07	eor $07a0			eor 	gxMode
.cda7	ada7	8d 3d 08	sta $083d			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad a1 07	lda $07a1			lda 	gxColour
.cde0	ade0	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 9b 07	lda $079b			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d a0 07	eor $07a0			eor 	gxMode
.cdf4	adf4	8d 3d 08	sta $083d			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3e 08	lda $083e			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9e 07	lda $079e			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 3f 08	ldx $083f			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 41 08	adc $0841			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 42 08	adc $0842			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3e 08	cpy $083e			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 9b 07	lda $079b			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a6 07	sta $07a6			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a8 07	sta $07a8			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a7 07	sta $07a7			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 9b 07	lda $079b			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a7 07	lda $07a7			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 41 08	lda $0841			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 42 08	lda $0842			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d a9 07	adc $07a9			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad aa 07	lda $07aa			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 3f 08	lda $083f			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 40 08	ora $0840			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a6 07	ldx $07a6			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd eb 07	lda $07eb,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d eb 07	sta $07eb,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 3f 08	lda $083f			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d eb 07	ora $07eb,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d eb 07	sta $07eb,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd ab 07	lda $07ab,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d ab 07	sta $07ab,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a7 07	lda $07a7			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a6 07	ldx $07a6			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd ab 07	lda $07ab,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d ab 07	sta $07ab,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 9b 07	lda $079b			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a7 07	lda $07a7			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a6 07	ldx $07a6			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd eb 07	lda $07eb,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 93 07	adc $0793			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 94 07	lda $0794			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 95 07	adc $0795			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 94 07	lsr $0794			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 93 07	ror $0793			ror 	gxX0
.cf60	af60	4e 93 07	lsr $0793			lsr 	gxX0
.cf63	af63	4e 95 07	lsr $0795			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 95 07	lsr $0795			lsr 	gxY0
.cf69	af69	ae a6 07	ldx $07a6			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd ab 07	lda $07ab,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 93 07	ora $0793			ora 	gxX0
.cf74	af74	9d ab 07	sta $07ab,x			sta 	gxSpriteLow,x
.cf77	af77	bd eb 07	lda $07eb,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 95 07	ora $0795			ora 	gxY0
.cf7f	af7f	9d eb 07	sta $07eb,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a4 07	sta $07a4			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a4 07	lda $07a4			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 95 07	lda $0795			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 93 07	lda $0793			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a5 07	sta $07a5			sta 	gxOffset
.cfd1	afd1	ad 94 07	lda $0794			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9d 07	adc $079d			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a5 07	lda $07a5			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a5 07	sta $07a5			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 ab 07	lda $07ab,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d ab 07	ora $07ab,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 eb 07	lda $07eb,y			lda 	gxSpriteHigh,y
.d023	b023	7d eb 07	adc $07eb,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 eb 07	lda $07eb,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd eb 07	lda $07eb,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 ab 07	lda $07ab,y			lda 	gxSpriteLow,y
.d051	b051	fd ab 07	sbc $07ab,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9e 07	lda $079e			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 42 08	sta $0842			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 3f 08	sta $083f			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3e 08	sta $083e			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 40 08	sta $0840			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 41 08	sta $0841			sta 	gxSpriteOffset
.d09e	b09e	0e 41 08	asl $0841			asl 	gxSpriteOffset
.d0a1	b0a1	2e 42 08	rol $0842			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 41 08	asl $0841			asl 	gxSpriteOffset
.d0a7	b0a7	2e 42 08	rol $0842			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083e						gxSizePixels:
>083e								.fill 	1
.083f						gxSizeBits:
>083f								.fill 	1
.0840						gxSpriteLUT:
>0840								.fill 	1
.0841						gxSpriteOffset:
>0841								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 93 07	lda $0793			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 97 07	cmp $0797			cmp 	gxX1
.d0bb	b0bb	ad 94 07	lda $0794			lda 	gxX0+1
.d0be	b0be	ed 98 07	sbc $0798			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 95 07	lda $0795			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 99 07	cmp $0799			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 93 07	lda $0793,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 93 07	lda $0793,y			lda 	gxX0,y
.d0eb	b0eb	9d 93 07	sta $0793,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 93 07	sta $0793,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $93 JOYB(
>d179	b179	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $94 JOYX(
>d180	b180	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $95 JOYY(
>d187	b187	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $96 LEFT$(
>d18f	b18f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $97 LEN(
>d195	b195	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $98 MAX(
>d19b	b19b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $99 MID$(
>d1a2	b1a2	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9a MIN(
>d1a8	b1a8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9b NOT(
>d1ae	b1ae	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9c PEEK(
>d1b5	b1b5	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9d PEEKD(
>d1bd	b1bd	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9e PEEKL(
>d1c5	b1c5	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9f PEEKW(
>d1cd	b1cd	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a0 PLAYING(
>d1d5	b1d5	47 28
>d1d7	b1d7	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a1 RANDOM(
>d1df	b1df	28
>d1e0	b1e0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a2 RIGHT$(
>d1e8	b1e8	28
>d1e9	b1e9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a3 RND(
>d1ef	b1ef	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a4 SGN(
>d1f5	b1f5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a5 SPC(
>d1fb	b1fb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a6 STR$(
>d202	b202	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a7 TIMER(
>d20a	b20a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a8 TRUE
>d210	b210	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a9 VAL(
>d216	b216	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $aa FOR
>d21b	b21b	02 8f 49 46				.text	2,$8f,"IF"             ; $ab IF
>d21f	b21f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ac PROC
>d225	b225	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $ad REPEAT
>d22d	b22d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $ae WHILE
>d234	b234	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $af ENDIF
>d23b	b23b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b0 ENDPROC
>d243	b243	43
>d244	b244	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b1 NEXT
>d24a	b24a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b2 THEN
>d250	b250	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b3 UNTIL
>d257	b257	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b4 WEND
>d25d	b25d	02 9b 42 59				.text	2,$9b,"BY"             ; $b5 BY
>d261	b261	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b6 CALL
>d267	b267	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b7 CIRCLE
>d26f	b26f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b8 CLEAR
>d276	b276	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b9 COLOR
>d27d	b27d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ba COLOUR
>d285	b285	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bb DATA
>d28b	b28b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bc DIM
>d290	b290	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bd DOWNTO
>d298	b298	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $be ELSE
>d29e	b29e	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bf FROM
>d2a4	b2a4	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c0 GFX
>d2a9	b2a9	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d2af	b2af	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d2b6	b2b6	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d2bb	b2bb	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d2c1	b2c1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d2c8	b2c8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d2cd	b2cd	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d2d1	b2d1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2d9	b2d9	45
>d2da	b2da	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2e2	b2e2	45
>d2e3	b2e3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2e9	b2e9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2ef	b2ef	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2f6	b2f6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2fd	b2fd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d304	b304	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $cf READ
>d30a	b30a	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d0 RECT
>d310	b310	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d1 REM
>d315	b315	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d2 SOLID
>d31c	b31c	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d3 SOUND
>d323	b323	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d4 SPRITE
>d32b	b32b	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d5 TEXT
>d331	b331	02 a3 54 4f				.text	2,$a3,"TO"             ; $d6 TO
>d335	b335	ff					.text	$FF
.d336	b336					KeywordSet1:
>d336	b336	00 65					.text	0,$65,""               ; $80 !0:EOF
>d338	b338	00 58					.text	0,$58,""               ; $81 !1:SH1
>d33a	b33a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d33c	b33c	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d344	b344	4c 45
>d346	b346	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d34e	b34e	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d356	b356	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d35d	b35d	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d364	b364	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d369	b369	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d371	b371	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d376	b376	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d37d	b37d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d382	b382	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d38a	b38a	45
>d38b	b38b	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d38f	b38f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d396	b396	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d39c	b39c	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d3a3	b3a3	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d3aa	b3aa	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d3b0	b3b0	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d3b6	b3b6	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d3bb	b3bb	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d3c1	b3c1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3c8	b3c8	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3d0	b3d0	45
>d3d1	b3d1	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3d9	b3d9	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d3de	b3de	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d3e4	b3e4	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d3ec	b3ec	45
>d3ed	b3ed	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d3f5	b3f5	45
>d3f6	b3f6	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d3fd	b3fd	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d405	b405	53
>d406	b406	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d40c	b40c	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d414	b414	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d419	b419	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d420	b420	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d425	b425	ff					.text	$FF
.d426	b426					KeywordSet2:
>d426	b426	00 65					.text	0,$65,""               ; $80 !0:EOF
>d428	b428	00 58					.text	0,$58,""               ; $81 !1:SH1
>d42a	b42a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d42c	b42c	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d431	b431	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d436	b436	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d43b	b43b	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d440	b440	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d445	b445	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d44a	b44a	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d44f	b44f	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d454	b454	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d459	b459	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d45e	b45e	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d463	b463	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d468	b468	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d46d	b46d	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d472	b472	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d477	b477	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d47c	b47c	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d481	b481	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d486	b486	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d48b	b48b	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d490	b490	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d495	b495	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d49a	b49a	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d49f	b49f	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4a4	b4a4	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4a9	b4a9	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4ae	b4ae	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4b3	b4b3	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4b8	b4b8	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4bd	b4bd	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4c2	b4c2	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4c7	b4c7	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4cc	b4cc	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4d1	b4d1	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4d6	b4d6	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4db	b4db	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4e0	b4e0	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4e5	b4e5	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4ea	b4ea	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ef	b4ef	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4f4	b4f4	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4f9	b4f9	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4fe	b4fe	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d503	b503	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d508	b508	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d50d	b50d	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d512	b512	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d517	b517	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d51c	b51c	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d521	b521	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d526	b526	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d52b	b52b	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d530	b530	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d535	b535	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d53a	b53a	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d53f	b53f	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d544	b544	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d549	b549	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d54e	b54e	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d553	b553	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d558	b558	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d55d	b55d	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d562	b562	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d567	b567	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d56c	b56c	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d571	b571	ff					.text	$FF
.d572	b572					Export_TKListConvertLine:
.d572	b572	48		pha				pha 								; save indent on the stack
.d573	b573	9c 1d 04	stz $041d			stz 	tbOffset
.d576	b576	9c 2d 04	stz $042d			stz 	tokenBuffer
.d579	b579	9c 29 04	stz $0429			stz 	currentListColour
.d57c	b57c	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d57e	b57e	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d581	b581	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d583	b583	b1 30		lda ($30),y			lda 	(codePtr),y
.d585	b585	aa		tax				tax
.d586	b586	88		dey				dey
.d587	b587	b1 30		lda ($30),y			lda 	(codePtr),y
.d589	b589	20 6c b7	jsr $b76c			jsr 	LCLWriteNumberXA
.d58c	b58c	68		pla				pla 								; adjustment to indent
.d58d	b58d	48		pha				pha 								; save on stack
.d58e	b58e	10 0c		bpl $b59c			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d590	b590	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d591	b591	6d 26 04	adc $0426			adc 	listIndent
.d594	b594	8d 26 04	sta $0426			sta 	listIndent
.d597	b597	10 03		bpl $b59c			bpl 	_LCNoAdjust
.d599	b599	9c 26 04	stz $0426			stz 	listIndent
.d59c	b59c					_LCNoAdjust:
.d59c	b59c	18		clc				clc		 							; work out actual indent.
.d59d	b59d	ad 26 04	lda $0426			lda 	listIndent
.d5a0	b5a0	0a		asl a				asl 	a
.d5a1	b5a1	69 07		adc #$07			adc 	#7
.d5a3	b5a3	85 36		sta $36				sta 	zTemp0
.d5a5	b5a5					_LCPadOut:
.d5a5	b5a5	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5a7	b5a7	20 04 b7	jsr $b704			jsr 	LCLWrite
.d5aa	b5aa	ad 1d 04	lda $041d			lda 	tbOffset
.d5ad	b5ad	c5 36		cmp $36				cmp 	zTemp0
.d5af	b5af	d0 f4		bne $b5a5			bne 	_LCPadOut
.d5b1	b5b1	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5b3	b5b3					_LCMainLoop:
.d5b3	b5b3	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5b5	b5b5	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d5b8	b5b8	b1 30		lda ($30),y			lda 	(codePtr),y
.d5ba	b5ba	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5bc	b5bc	f0 17		beq $b5d5			beq 	_LCExit
.d5be	b5be	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5c0	b5c0	90 1e		bcc $b5e0			bcc 	_LCDoubles
.d5c2	b5c2	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5c4	b5c4	90 2a		bcc $b5f0			bcc 	_LCShiftPunc
.d5c6	b5c6	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5c8	b5c8	90 35		bcc $b5ff			bcc 	_LCPunctuation
.d5ca	b5ca	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5cc	b5cc	90 51		bcc $b61f			bcc 	_LCIdentifiers
.d5ce	b5ce	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5d0	b5d0	90 73		bcc $b645			bcc 	_LCTokens
.d5d2	b5d2	4c a5 b6	jmp $b6a5			jmp 	_LCData 					; 254-5 are data objects
.d5d5	b5d5					_LCExit:
.d5d5	b5d5	68		pla				pla 								; get old indent adjust
.d5d6	b5d6	30 07		bmi $b5df			bmi 	_LCExit2
.d5d8	b5d8	18		clc				clc 								; add to indent if +ve
.d5d9	b5d9	6d 26 04	adc $0426			adc 	listIndent
.d5dc	b5dc	8d 26 04	sta $0426			sta 	listIndent
.d5df	b5df					_LCExit2:
.d5df	b5df	60		rts				rts
.d5e0	b5e0					_LCDoubles:
.d5e0	b5e0	48		pha				pha
.d5e1	b5e1	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5e2	b5e2	29 02		and #$02			and 	#2
.d5e4	b5e4	09 3c		ora #$3c			ora 	#60 						; make < >
.d5e6	b5e6	20 04 b7	jsr $b704			jsr 	LCLWrite
.d5e9	b5e9	68		pla				pla 								; restore, do lower bit
.d5ea	b5ea	29 03		and #$03			and 	#3
.d5ec	b5ec	09 3c		ora #$3c			ora 	#60
.d5ee	b5ee	80 0f		bra $b5ff			bra		_LCPunctuation 				; print, increment, loop
.d5f0	b5f0					_LCShiftPunc:
.d5f0	b5f0	aa		tax				tax 								; save in X
.d5f1	b5f1	29 07		and #$07			and 	#7 							; lower 3 bits
.d5f3	b5f3	f0 02		beq $b5f7			beq 	_LCNoAdd
.d5f5	b5f5	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5f7	b5f7					_LCNoAdd:
.d5f7	b5f7	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5f9	b5f9	90 02		bcc $b5fd			bcc 	_LCNoAdd2
.d5fb	b5fb	09 20		ora #$20			ora 	#32 						; adds $20
.d5fd	b5fd					_LCNoAdd2:
.d5fd	b5fd	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5ff	b5ff					_LCPunctuation:
.d5ff	b5ff	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d601	b601	d0 03		bne $b606			bne 	_LCPContinue
.d603	b603	20 1a b7	jsr $b71a			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d606	b606					_LCPContinue:
.d606	b606	c9 2e		cmp #$2e			cmp 	#'.'
.d608	b608	f0 08		beq $b612			beq 	_LCPIsConstant
.d60a	b60a	c9 30		cmp #$30			cmp 	#'0'
.d60c	b60c	90 0b		bcc $b619			bcc 	_LCPNotConstant
.d60e	b60e	c9 3a		cmp #$3a			cmp 	#'9'+1
.d610	b610	b0 07		bcs $b619			bcs 	_LCPNotConstant
.d612	b612					_LCPIsConstant:
.d612	b612	48		pha				pha
.d613	b613	a9 87		lda #$87			lda 	#CLIConstant+$80
.d615	b615	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d618	b618	68		pla				pla
.d619	b619					_LCPNotConstant:
.d619	b619	c8		iny				iny 								; consume character
.d61a	b61a	20 04 b7	jsr $b704			jsr 	LCLWrite 					; write it out.
.d61d	b61d	80 94		bra $b5b3			bra 	_LCMainLoop 				; go round again.
.d61f	b61f					_LCIdentifiers:
.d61f	b61f	18		clc				clc 								; convert to physical address
.d620	b620	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d622	b622	85 37		sta $37				sta 	zTemp0+1
.d624	b624	c8		iny				iny
.d625	b625	b1 30		lda ($30),y			lda 	(codePtr),y
.d627	b627	85 36		sta $36				sta 	zTemp0
.d629	b629	c8		iny				iny
.d62a	b62a	5a		phy				phy 								; save position
.d62b	b62b	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d62d	b62d	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d630	b630	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d632	b632					_LCOutIdentifier:
.d632	b632	c8		iny				iny
.d633	b633	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d635	b635	29 7f		and #$7f			and 	#$7F
.d637	b637	20 56 b7	jsr $b756			jsr 	LCLLowerCase
.d63a	b63a	20 04 b7	jsr $b704			jsr 	LCLWrite
.d63d	b63d	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d63f	b63f	10 f1		bpl $b632			bpl 	_LCOutIdentifier
.d641	b641	7a		ply				ply 								; restore position
.d642	b642	4c b3 b5	jmp $b5b3			jmp 	_LCMainLoop
.d645	b645					_LCTokens:
.d645	b645	aa		tax				tax 								; token in X
.d646	b646	a9 26		lda #$26			lda 	#((KeywordSet2) & $FF)
.d648	b648	85 36		sta $36				sta 	0+zTemp0
.d64a	b64a	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d64c	b64c	85 37		sta $37				sta 	1+zTemp0
.d64e	b64e	e0 82		cpx #$82			cpx 	#$82
.d650	b650	f0 16		beq $b668			beq 	_LCUseShift
.d652	b652	a9 36		lda #$36			lda 	#((KeywordSet1) & $FF)
.d654	b654	85 36		sta $36				sta 	0+zTemp0
.d656	b656	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d658	b658	85 37		sta $37				sta 	1+zTemp0
.d65a	b65a	e0 81		cpx #$81			cpx 	#$81
.d65c	b65c	f0 0a		beq $b668			beq 	_LCUseShift
.d65e	b65e	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d660	b660	85 36		sta $36				sta 	0+zTemp0
.d662	b662	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d664	b664	85 37		sta $37				sta 	1+zTemp0
.d666	b666	80 01		bra $b669			bra 	_LCNoShift
.d668	b668					_LCUseShift:
.d668	b668	c8		iny				iny
.d669	b669					_LCNoShift:
.d669	b669	20 2e b7	jsr $b72e			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d66c	b66c	b1 30		lda ($30),y			lda 	(codePtr),y
.d66e	b66e	aa		tax				tax 								; into X
.d66f	b66f					_LCFindText:
.d66f	b66f	ca		dex				dex
.d670	b670	10 0e		bpl $b680			bpl 	_LCFoundText 				; found text.
.d672	b672	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d674	b674	1a		inc a				inc 	a 							; one extra for size
.d675	b675	38		sec				sec 								; one extra for checksum
.d676	b676	65 36		adc $36				adc 	zTemp0 						; go to next token
.d678	b678	85 36		sta $36				sta 	zTemp0
.d67a	b67a	90 f3		bcc $b66f			bcc 	_LCFindText
.d67c	b67c	e6 37		inc $37				inc 	zTemp0+1
.d67e	b67e	80 ef		bra $b66f			bra 	_LCFindText
.d680	b680					_LCFoundText:
.d680	b680	5a		phy				phy 								; save List position
.d681	b681	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d683	b683	aa		tax				tax
.d684	b684	a9 86		lda #$86			lda 	#CLIToken+$80
.d686	b686	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d689	b689	a0 02		ldy #$02			ldy 	#2
.d68b	b68b					_LCCopyToken:
.d68b	b68b	b1 36		lda ($36),y			lda 	(zTemp0),y
.d68d	b68d	20 56 b7	jsr $b756			jsr 	LCLLowerCase
.d690	b690	20 04 b7	jsr $b704			jsr 	LCLWrite
.d693	b693	c8		iny				iny
.d694	b694	ca		dex				dex
.d695	b695	d0 f4		bne $b68b			bne 	_LCCopyToken
.d697	b697	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d699	b699	f0 05		beq $b6a0			beq 	_LCNoSpace
.d69b	b69b	a9 20		lda #$20			lda 	#' '
.d69d	b69d	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6a0	b6a0					_LCNoSpace:
.d6a0	b6a0	7a		ply				ply 								; restore position.
.d6a1	b6a1	c8		iny				iny 								; consume token
.d6a2	b6a2	4c b3 b5	jmp $b5b3			jmp 	_LCMainLoop 				; and go around again.
.d6a5	b6a5					_LCData:
.d6a5	b6a5	48		pha				pha 								; save type $FE/$FF
.d6a6	b6a6	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6a8	b6a8	c9 fe		cmp #$fe			cmp 	#$FE
.d6aa	b6aa	f0 22		beq $b6ce			beq 	_LCHaveOpener
.d6ac	b6ac	a2 22		ldx #$22			ldx 	#'"'
.d6ae	b6ae	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6b0	b6b0	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d6b3	b6b3	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6b5	b6b5	d0 17		bne $b6ce			bne 	_LCHaveOpener
.d6b7	b6b7	88		dey				dey 								; what precedes it ?
.d6b8	b6b8	b1 30		lda ($30),y			lda 	(codePtr),y
.d6ba	b6ba	c8		iny				iny
.d6bb	b6bb	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6bd	b6bd	d0 0f		bne $b6ce			bne 	_LCHaveOpener
.d6bf	b6bf	a9 09		lda #$09			lda 	#9 							; tab
.d6c1	b6c1	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6c4	b6c4	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6c6	b6c6	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6c9	b6c9	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6cb	b6cb	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d6ce	b6ce					_LCHaveOpener:
.d6ce	b6ce	8a		txa				txa 								; output prefix (# or ")
.d6cf	b6cf	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6d2	b6d2	c8		iny				iny 								; get count
.d6d3	b6d3	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d5	b6d5	aa		tax				tax
.d6d6	b6d6	c8		iny				iny 								; point at first character
.d6d7	b6d7					_LCOutData:
.d6d7	b6d7	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d9	b6d9	c9 00		cmp #$00			cmp 	#0
.d6db	b6db	f0 03		beq $b6e0			beq 	_LCNoPrint
.d6dd	b6dd	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6e0	b6e0					_LCNoPrint:
.d6e0	b6e0	c8		iny				iny
.d6e1	b6e1	ca		dex				dex
.d6e2	b6e2	d0 f3		bne $b6d7			bne 	_LCOutData
.d6e4	b6e4	68		pla				pla 								; closing " required ?
.d6e5	b6e5	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6e7	b6e7	d0 0f		bne $b6f8			bne 	_LCNoQuote
.d6e9	b6e9	a9 22		lda #$22			lda 	#'"'
.d6eb	b6eb	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6ee	b6ee	ad 88 07	lda $0788			lda 	EXTTextColour
.d6f1	b6f1	29 0f		and #$0f			and 	#$0F
.d6f3	b6f3	09 90		ora #$90			ora 	#$90
.d6f5	b6f5	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6f8	b6f8					_LCNoQuote:
.d6f8	b6f8	4c b3 b5	jmp $b5b3			jmp 	_LCMainLoop
.d6fb	b6fb					LCLWriteColour:
.d6fb	b6fb	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6fe	b6fe	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d701	b701	d0 01		bne $b704			bne 	LCLWrite 					; if different, output it
.d703	b703	60		rts				rts
.d704	b704					LCLWrite:
.d704	b704	da		phx				phx
.d705	b705	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d708	b708	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d70b	b70b	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d70e	b70e	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d711	b711	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d713	b713	30 03		bmi $b718			bmi 	_LCLNoColour
.d715	b715	8d 27 04	sta $0427			sta 	lcLastCharacter
.d718	b718					_LCLNoColour:
.d718	b718	fa		plx				plx
.d719	b719	60		rts				rts
.d71a	b71a					LCLDeleteLastSpace:
.d71a	b71a	48		pha				pha
.d71b	b71b	da		phx				phx
.d71c	b71c	ae 1d 04	ldx $041d			ldx 	tbOffset
.d71f	b71f	f0 0a		beq $b72b			beq 	_LCDLSExit
.d721	b721	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d724	b724	c9 20		cmp #$20			cmp 	#' '
.d726	b726	d0 03		bne $b72b			bne 	_LCDLSExit
.d728	b728	ce 1d 04	dec $041d			dec 	tbOffset
.d72b	b72b					_LCDLSExit:
.d72b	b72b	fa		plx				plx
.d72c	b72c	68		pla				pla
.d72d	b72d	60		rts				rts
.d72e	b72e					LCLCheckSpaceRequired:
.d72e	b72e	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d731	b731	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d733	b733	f0 1b		beq $b750			beq 	_LCCSRSpace
.d735	b735	c9 29		cmp #$29			cmp 	#')'
.d737	b737	f0 17		beq $b750			beq 	_LCCSRSpace
.d739	b739	c9 23		cmp #$23			cmp 	#'#'
.d73b	b73b	f0 13		beq $b750			beq 	_LCCSRSpace
.d73d	b73d	20 56 b7	jsr $b756			jsr 	LCLLowerCase 				; saves a little effort
.d740	b740	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d742	b742	90 11		bcc $b755			bcc 	_LCCSRExit
.d744	b744	c9 3a		cmp #$3a			cmp 	#"9"+1
.d746	b746	90 08		bcc $b750			bcc 	_LCCSRSpace
.d748	b748	c9 61		cmp #$61			cmp 	#"a"
.d74a	b74a	90 09		bcc $b755			bcc 	_LCCSRExit
.d74c	b74c	c9 7b		cmp #$7b			cmp 	#"z"+1
.d74e	b74e	b0 05		bcs $b755			bcs 	_LCCSRExit
.d750	b750					_LCCSRSpace:
.d750	b750	a9 20		lda #$20			lda 	#' '
.d752	b752	20 04 b7	jsr $b704			jsr 	LCLWrite
.d755	b755					_LCCSRExit:
.d755	b755	60		rts				rts
.d756	b756					LCLLowerCase:
.d756	b756	c9 41		cmp #$41			cmp 	#"A"
.d758	b758	90 06		bcc $b760			bcc 	_LCLLCOut
.d75a	b75a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d75c	b75c	b0 02		bcs $b760			bcs 	_LCLLCOut
.d75e	b75e	69 20		adc #$20			adc 	#$20
.d760	b760					_LCLLCOut:
.d760	b760	60		rts				rts
.d761	b761					LCLUpperCase:
.d761	b761	c9 61		cmp #$61			cmp 	#"a"
.d763	b763	90 06		bcc $b76b			bcc 	_LCLUCOut
.d765	b765	c9 7b		cmp #$7b			cmp 	#"z"+1
.d767	b767	b0 02		bcs $b76b			bcs 	_LCLUCOut
.d769	b769	e9 1f		sbc #$1f			sbc 	#$1F
.d76b	b76b					_LCLUCOut:
.d76b	b76b	60		rts				rts
.d76c	b76c					LCLWriteNumberXA:
.d76c	b76c	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d76e	b76e					_LCLWNLoop1:
.d76e	b76e	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d770	b770					_LCLWNLoop2:
.d770	b770	48		pha				pha 								; save initial LSB
.d771	b771	38		sec				sec
.d772	b772	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d774	b774	f9 a5 b7	sbc $b7a5,y			sbc 	_LCLWNTable,y
.d777	b777	48		pha				pha
.d778	b778	8a		txa				txa
.d779	b779	f9 a6 b7	sbc $b7a6,y			sbc 	_LCLWNTable+1,y
.d77c	b77c	90 07		bcc $b785			bcc 	_LCLWNUnderflow
.d77e	b77e	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d780	b780	aa		tax				tax 								; update X
.d781	b781	68		pla				pla 								; restore A
.d782	b782	7a		ply				ply 								; throw original
.d783	b783	80 eb		bra $b770			bra 	_LCLWNLoop2 				; try again.
.d785	b785					_LCLWNUnderflow:
.d785	b785	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d787	b787	d0 06		bne $b78f			bne 	_LCLWNOut
.d789	b789	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d78c	b78c	3a		dec a				dec 	a
.d78d	b78d	f0 04		beq $b793			beq 	_LCLWNNext
.d78f	b78f					_LCLWNOut:
.d78f	b78f	98		tya				tya
.d790	b790	20 9f b7	jsr $b79f			jsr 	_LCLWNOutDigit
.d793	b793					_LCLWNNext:
.d793	b793	7a		ply				ply 							 	; restore original value.
.d794	b794	68		pla				pla
.d795	b795	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d797	b797	c8		iny				iny
.d798	b798	c8		iny				iny
.d799	b799	84 37		sty $37				sty 	zTemp0+1
.d79b	b79b	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d79d	b79d	d0 cf		bne $b76e			bne 	_LCLWNLoop1
.d79f	b79f					_LCLWNOutDigit:
.d79f	b79f	09 30		ora #$30			ora 	#'0'
.d7a1	b7a1	20 04 b7	jsr $b704			jsr 	LCLWrite
.d7a4	b7a4	60		rts				rts
.d7a5	b7a5					_LCLWNTable:
>d7a5	b7a5	10 27						.word 	10000
>d7a7	b7a7	e8 03						.word 	1000
>d7a9	b7a9	64 00						.word 	100
>d7ab	b7ab	0a 00						.word 	10
.d7ad	b7ad					TOKSearchTable:
.d7ad	b7ad	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7af	b7af	85 36		sta $36				sta 	zTemp0
.d7b1	b7b1	a0 00		ldy #$00			ldy 	#0
.d7b3	b7b3	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7b5	b7b5	85 38		sta $38				sta 	zTemp1
.d7b7	b7b7					_TSTLoop:
.d7b7	b7b7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7b9	b7b9	30 49		bmi $b804			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7bb	b7bb	f0 2e		beq $b7eb			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7bd	b7bd	c8		iny				iny 								; get the hash
.d7be	b7be	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7c0	b7c0	88		dey				dey
.d7c1	b7c1	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7c4	b7c4	d0 25		bne $b7eb			bne 	_TSTNext
.d7c6	b7c6	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7c9	b7c9	38		sec				sec
.d7ca	b7ca	ed 00 04	sbc $0400			sbc 	identStart
.d7cd	b7cd	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7cf	b7cf	d0 1a		bne $b7eb			bne 	_TSTNext
.d7d1	b7d1	5a		phy				phy 								; save Y , we might fail to match.
.d7d2	b7d2	c8		iny				iny 								; point to text
.d7d3	b7d3	c8		iny				iny
.d7d4	b7d4	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7d7	b7d7					_TSTCompareName:
.d7d7	b7d7	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d7da	b7da	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7dc	b7dc	d0 0c		bne $b7ea			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7de	b7de	e8		inx				inx
.d7df	b7df	c8		iny				iny
.d7e0	b7e0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7e3	b7e3	d0 f2		bne $b7d7			bne 	_TSTCompareName
.d7e5	b7e5	7a		ply				ply 								; throw Y
.d7e6	b7e6	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7e8	b7e8	38		sec				sec 								; return with CS = passed.
.d7e9	b7e9	60		rts				rts
.d7ea	b7ea					_TSTNextPullY:
.d7ea	b7ea	7a		ply				ply 								; restore current, fall through.
.d7eb	b7eb					_TSTNext:
.d7eb	b7eb	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ed	b7ed	98		tya				tya
.d7ee	b7ee	18		clc				clc
.d7ef	b7ef	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7f1	b7f1	1a		inc a				inc 	a 							; +1
.d7f2	b7f2	1a		inc a				inc 	a 							; +2
.d7f3	b7f3	a8		tay				tay
.d7f4	b7f4	10 c1		bpl $b7b7			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7f6	b7f6	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7f7	b7f7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7f9	b7f9	18		clc				clc  								; but have tables > 255 bytes
.d7fa	b7fa	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7fc	b7fc	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7fe	b7fe	90 b7		bcc $b7b7			bcc 	_TSTLoop
.d800	b800	e6 37		inc $37				inc 	zTemp0+1
.d802	b802	80 b3		bra $b7b7			bra 	_TSTLoop
.d804	b804					_TSTFail:
.d804	b804	18		clc				clc
.d805	b805	60		rts				rts
.d806	b806					Export_TKTokeniseLine:
.d806	b806	20 d3 b9	jsr $b9d3			jsr 	LCLFixLineBufferCase 		; fix line case
.d809	b809	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d80b	b80b	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d80e	b80e	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d811	b811	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d814	b814	a2 ff		ldx #$ff			ldx 	#$FF
.d816	b816					_TKFindFirst:
.d816	b816	e8		inx				inx
.d817	b817	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d81a	b81a	f0 62		beq $b87e			beq 	_TKExit
.d81c	b81c	c9 20		cmp #$20			cmp 	#' '
.d81e	b81e	90 f6		bcc $b816			bcc 	_TKFindFirst
.d820	b820	c9 30		cmp #$30			cmp 	#'0'
.d822	b822	90 07		bcc $b82b			bcc 	_TKNoLineNumber
.d824	b824	c9 3a		cmp #$3a			cmp 	#'9'+1
.d826	b826	b0 03		bcs $b82b			bcs 	_TKNoLineNumber
.d828	b828	20 fd b9	jsr $b9fd			jsr 	TOKExtractLineNumber
.d82b	b82b					_TKNoLineNumber:
.d82b	b82b					_TKTokeniseLoop:
.d82b	b82b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d82e	b82e	f0 4e		beq $b87e			beq 	_TKExit
.d830	b830	e8		inx				inx
.d831	b831	c9 20		cmp #$20			cmp 	#' '
.d833	b833	f0 f6		beq $b82b			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d835	b835	ca		dex				dex 								; undo last get, A contains character, X is position.
.d836	b836	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d838	b838	f0 68		beq $b8a2			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d83a	b83a	c9 41		cmp #$41			cmp 	#'A'
.d83c	b83c	90 04		bcc $b842			bcc 	_TKTokenisePunctuation
.d83e	b83e	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d840	b840	90 60		bcc $b8a2			bcc 	_TKTokeniseIdentifier
.d842	b842					_TKTokenisePunctuation:
.d842	b842	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d844	b844	f0 2e		beq $b874			beq 	_TKString
.d846	b846	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d848	b848	f0 2f		beq $b879			beq 	_TKHexConstant
.d84a	b84a	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d84c	b84c	f0 36		beq $b884			beq 	_TKCheckDouble
.d84e	b84e	c9 3e		cmp #$3e			cmp 	#'>'
.d850	b850	f0 32		beq $b884			beq 	_TKCheckDouble
.d852	b852					_TKStandardPunctuation:
.d852	b852	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d855	b855	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d857	b857	90 0e		bcc $b867			bcc 	_TKNoShift
.d859	b859	48		pha				pha 								; save. we are about to convert this punctuation token from
.d85a	b85a	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d85c	b85c	85 36		sta $36				sta 	zTemp0
.d85e	b85e	68		pla				pla
.d85f	b85f	29 20		and #$20			and 	#32 						; bit 5
.d861	b861	4a		lsr a				lsr 	a 							; shift into bit 3
.d862	b862	4a		lsr a				lsr 	a
.d863	b863	05 36		ora $36				ora 	zTemp0
.d865	b865	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d867	b867					_TKNoShift:
.d867	b867	20 42 ba	jsr $ba42			jsr 	TOKWriteByte 				; write the punctuation character
.d86a	b86a	e8		inx				inx 								; consume the character
.d86b	b86b	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d86d	b86d	d0 bc		bne $b82b			bne 	_TKTokeniseLoop 			; and loop round again.
.d86f	b86f	20 35 b9	jsr $b935			jsr 	TOKCheckComment 			; comment checl
.d872	b872	80 b7		bra $b82b			bra 	_TKTokeniseLoop
.d874	b874					_TKString:
.d874	b874	20 62 b9	jsr $b962			jsr 	TOKTokenString
.d877	b877	80 b2		bra $b82b			bra 	_TKTokeniseLoop
.d879	b879					_TKHexConstant:
.d879	b879	20 9d b9	jsr $b99d			jsr 	TOKHexConstant
.d87c	b87c	80 ad		bra $b82b			bra 	_TKTokeniseLoop
.d87e	b87e	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d880	b880	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d883	b883	60		rts				rts
.d884	b884					_TKCheckDouble:
.d884	b884	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d887	b887	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d889	b889	90 c7		bcc $b852			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d88b	b88b	c9 3f		cmp #$3f			cmp 	#'>'+1
.d88d	b88d	b0 c3		bcs $b852			bcs 	_TKStandardPunctuation
.d88f	b88f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d892	b892	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d894	b894	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d895	b895	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d898	b898	38		sec				sec
.d899	b899	e9 3c		sbc #$3c			sbc 	#'<'
.d89b	b89b	20 42 ba	jsr $ba42			jsr 	TOKWriteByte 				; this is in the range 0-7
.d89e	b89e	e8		inx				inx 								; consume both
.d89f	b89f	e8		inx				inx
.d8a0	b8a0	80 89		bra $b82b			bra 	_TKTokeniseLoop
.d8a2	b8a2					_TKTokeniseIdentifier:
.d8a2	b8a2	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8a5	b8a5	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8a8	b8a8					_TKCheckLoop:
.d8a8	b8a8	e8		inx				inx 								; look at next, we know first is identifier already.
.d8a9	b8a9	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d8ac	b8ac	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8ae	b8ae	f0 f8		beq $b8a8			beq 	_TKCheckLoop
.d8b0	b8b0	c9 30		cmp #$30			cmp	 	#"0"
.d8b2	b8b2	90 0c		bcc $b8c0			bcc 	_TKEndIdentifier
.d8b4	b8b4	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8b6	b8b6	90 f0		bcc $b8a8			bcc 	_TKCheckLoop
.d8b8	b8b8	c9 41		cmp #$41			cmp	 	#"A"
.d8ba	b8ba	90 04		bcc $b8c0			bcc 	_TKEndIdentifier
.d8bc	b8bc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8be	b8be	90 e8		bcc $b8a8			bcc 	_TKCheckLoop
.d8c0	b8c0					_TKEndIdentifier:
.d8c0	b8c0	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8c3	b8c3	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8c5	b8c5	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8c7	b8c7	f0 06		beq $b8cf			beq 	_TKHasTypeCharacter
.d8c9	b8c9	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8cb	b8cb	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8cd	b8cd	d0 07		bne $b8d6			bne 	_TKNoTypeCharacter
.d8cf	b8cf					_TKHasTypeCharacter:
.d8cf	b8cf	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8d2	b8d2	e8		inx				inx 								; consume the type character
.d8d3	b8d3	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d8d6	b8d6					_TKNoTypeCharacter:
.d8d6	b8d6	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8d8	b8d8	d0 09		bne $b8e3			bne 	_TKNoArray
.d8da	b8da	e8		inx				inx 								; skip the (
.d8db	b8db	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8de	b8de	09 04		ora #$04			ora 	#$04
.d8e0	b8e0	8d 04 04	sta $0404			sta 	identTypeByte
.d8e3	b8e3					_TKNoArray:
.d8e3	b8e3	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8e6	b8e6	20 be b9	jsr $b9be			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8e9	b8e9	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8eb	b8eb	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d8ed	b8ed	20 ad b7	jsr $b7ad			jsr 	TOKSearchTable
.d8f0	b8f0	a2 00		ldx #$00			ldx 	#0
.d8f2	b8f2	b0 1f		bcs $b913			bcs 	_TKFoundToken
.d8f4	b8f4	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8f6	b8f6	a9 36		lda #$36			lda 	#(KeywordSet1) & $FF
.d8f8	b8f8	20 ad b7	jsr $b7ad			jsr 	TOKSearchTable
.d8fb	b8fb	a2 81		ldx #$81			ldx 	#$81
.d8fd	b8fd	b0 14		bcs $b913			bcs 	_TKFoundToken
.d8ff	b8ff	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d901	b901	a9 26		lda #$26			lda 	#(KeywordSet2) & $FF
.d903	b903	20 ad b7	jsr $b7ad			jsr 	TOKSearchTable
.d906	b906	a2 82		ldx #$82			ldx 	#$82
.d908	b908	b0 09		bcs $b913			bcs 	_TKFoundToken
.d90a	b90a	20 4e ba	jsr $ba4e			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d90d	b90d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d910	b910	4c 2b b8	jmp $b82b			jmp 	_TKTokeniseLoop 			; and go round again.
.d913	b913					_TKFoundToken:
.d913	b913	48		pha				pha 								; save token
.d914	b914	8a		txa				txa 								; shift in X, is there one ?
.d915	b915	f0 03		beq $b91a			beq 	_TKNoTShift
.d917	b917	20 42 ba	jsr $ba42			jsr 	TOKWriteByte 				; if so, write it out
.d91a	b91a					_TKNoTShift:
.d91a	b91a	68		pla				pla 								; restore and write token
.d91b	b91b	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d91e	b91e	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d920	b920	d0 0d		bne $b92f			bne 	_TKNotRem 			 		; not shifted ?
.d922	b922	c9 d1		cmp #$d1			cmp 	#KWD_REM
.d924	b924	d0 09		bne $b92f			bne 	_TKNotRem
.d926	b926	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d929	b929	20 35 b9	jsr $b935			jsr 	TOKCheckComment
.d92c	b92c	4c 2b b8	jmp $b82b			jmp 	_TKTokeniseLoop
.d92f	b92f					_TKNotRem:
.d92f	b92f	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d932	b932	4c 2b b8	jmp $b82b			jmp 	_TKTokeniseLoop 			; and go round again.
.d935	b935					TOKCheckComment:
.d935	b935	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d938	b938	e8		inx				inx
.d939	b939	c9 20		cmp #$20			cmp 	#' '
.d93b	b93b	f0 f8		beq $b935			beq 	TOKCheckComment
.d93d	b93d	ca		dex				dex 								; first non space character
.d93e	b93e	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d940	b940	f0 1f		beq $b961			beq 	_TOKCCExit 					; then we are okay
.d942	b942	c9 00		cmp #$00			cmp 	#0 							; EOL
.d944	b944	f0 1b		beq $b961			beq 	_TOKCCExit 					; then we are okay
.d946	b946	da		phx				phx
.d947	b947					_TOKCCLowerCase:
.d947	b947	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d94a	b94a	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d94c	b94c	90 09		bcc $b957			bcc 	_TOKKCNotUC
.d94e	b94e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d950	b950	b0 05		bcs $b957			bcs 	_TOKKCNotUC
.d952	b952	49 20		eor #$20			eor 	#$20
.d954	b954	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d957	b957					_TOKKCNotUC:
.d957	b957	e8		inx				inx
.d958	b958	c9 00		cmp #$00			cmp 	#0
.d95a	b95a	d0 eb		bne $b947			bne 	_TOKCCLowerCase
.d95c	b95c	fa		plx				plx
.d95d	b95d	ca		dex				dex 								; tokenise string expects initial skip.
.d95e	b95e	20 62 b9	jsr $b962			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d961	b961					_TOKCCExit:
.d961	b961	60		rts				rts
.d962	b962					TOKTokenString:
.d962	b962	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d964	b964	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d967	b967	e8		inx				inx									; start of quoted string.
.d968	b968	da		phx				phx 								; push start of string on top
.d969	b969	ca		dex				dex 								; because we pre-increment
.d96a	b96a					_TSFindEnd:
.d96a	b96a	e8		inx				inx
.d96b	b96b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d96e	b96e	f0 04		beq $b974			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d970	b970	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d972	b972	d0 f6		bne $b96a			bne 	_TSFindEnd
.d974	b974					_TSEndOfString:
.d974	b974	7a		ply				ply  								; so now Y is first character, X is character after end.
.d975	b975	48		pha				pha 								; save terminating character
.d976	b976	20 7e b9	jsr $b97e			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d979	b979	68		pla				pla 								; terminating character
.d97a	b97a	f0 01		beq $b97d			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d97c	b97c	e8		inx				inx
.d97d	b97d					_TSNotQuote:
.d97d	b97d	60		rts				rts
.d97e	b97e					TOKWriteBlockXY:
.d97e	b97e	86 36		stx $36				stx 	zTemp0 						; save end character
.d980	b980	98		tya				tya 								; use 2's complement to work out the byte size
.d981	b981	49 ff		eor #$ff			eor 	#$FF
.d983	b983	38		sec				sec
.d984	b984	65 36		adc $36				adc 	zTemp0
.d986	b986	1a		inc a				inc 	a 							; one extra for NULL
.d987	b987	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d98a	b98a					_TOBlockLoop:
.d98a	b98a	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d98c	b98c	f0 09		beq $b997			beq 	_TOBlockExit
.d98e	b98e	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d991	b991	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d994	b994	c8		iny				iny
.d995	b995	80 f3		bra $b98a			bra 	_TOBlockLoop
.d997	b997					_TOBlockExit:
.d997	b997	a9 00		lda #$00			lda 	#0 							; add NULL.
.d999	b999	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d99c	b99c	60		rts				rts
.d99d	b99d					TOKHexConstant:
.d99d	b99d	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d99f	b99f	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d9a2	b9a2	e8		inx				inx									; start of quoted string.
.d9a3	b9a3	da		phx				phx 								; push start of constant on top
.d9a4	b9a4	ca		dex				dex
.d9a5	b9a5					_THFindLoop:
.d9a5	b9a5	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9a6	b9a6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d9a9	b9a9	c9 30		cmp #$30			cmp 	#"0"
.d9ab	b9ab	90 0c		bcc $b9b9			bcc 	_THFoundEnd
.d9ad	b9ad	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9af	b9af	90 f4		bcc $b9a5			bcc 	_THFindLoop
.d9b1	b9b1	c9 41		cmp #$41			cmp 	#"A"
.d9b3	b9b3	90 04		bcc $b9b9			bcc 	_THFoundEnd
.d9b5	b9b5	c9 47		cmp #$47			cmp 	#"F"+1
.d9b7	b9b7	90 ec		bcc $b9a5			bcc 	_THFindLoop
.d9b9	b9b9					_THFoundEnd:
.d9b9	b9b9	7a		ply				ply 								; restore start
.d9ba	b9ba	20 7e b9	jsr $b97e			jsr 	TOKWriteBlockXY 			; output the block
.d9bd	b9bd	60		rts				rts
.d9be	b9be					TOKCalculateHash:
.d9be	b9be	da		phx				phx
.d9bf	b9bf	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9c2	b9c2	a9 00		lda #$00			lda 	#0
.d9c4	b9c4					_TCHLoop:
.d9c4	b9c4	18		clc				clc
.d9c5	b9c5	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d9c8	b9c8	e8		inx				inx
.d9c9	b9c9	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9cc	b9cc	d0 f6		bne $b9c4			bne 	_TCHLoop
.d9ce	b9ce	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9d1	b9d1	fa		plx				plx
.d9d2	b9d2	60		rts				rts
.d9d3	b9d3					LCLFixLineBufferCase:
.d9d3	b9d3	a2 00		ldx #$00			ldx 	#0
.d9d5	b9d5					_FLBCLoop:
.d9d5	b9d5	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d9d8	b9d8	f0 22		beq $b9fc			beq 	_FLBCExit 					; end of string.
.d9da	b9da	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9dc	b9dc	f0 11		beq $b9ef			beq 	_FLBCInQuotes
.d9de	b9de	e8		inx				inx
.d9df	b9df	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9e1	b9e1	90 f2		bcc $b9d5			bcc 	_FLBCLoop
.d9e3	b9e3	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9e5	b9e5	b0 ee		bcs $b9d5			bcs 	_FLBCLoop
.d9e7	b9e7	38		sec				sec 								; make U/C
.d9e8	b9e8	e9 20		sbc #$20			sbc 	#32
.d9ea	b9ea	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9ed	b9ed	80 e6		bra $b9d5			bra 	_FLBCLoop
.d9ef	b9ef					_FLBCInQuotes:
.d9ef	b9ef	e8		inx				inx 								; advance
.d9f0	b9f0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9f3	b9f3	f0 07		beq $b9fc			beq 	_FLBCExit 					; exit on EOS
.d9f5	b9f5	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9f7	b9f7	d0 f6		bne $b9ef			bne 	_FLBCInQuotes
.d9f9	b9f9	e8		inx				inx 								; skip over it
.d9fa	b9fa	80 d9		bra $b9d5			bra 	_FLBCLoop
.d9fc	b9fc					_FLBCExit:
.d9fc	b9fc	60		rts				rts
.d9fd	b9fd					TOKExtractLineNumber:
.d9fd	b9fd	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.da00	ba00	48		pha				pha
.da01	ba01	ad 2b 04	lda $042b			lda 	tokenLineNumber
.da04	ba04	48		pha				pha
.da05	ba05	20 3b ba	jsr $ba3b			jsr 	_LCLNTimes2 				; line # x 2
.da08	ba08	20 3b ba	jsr $ba3b			jsr 	_LCLNTimes2 				; line # x 4
.da0b	ba0b	18		clc				clc 								; add stacked value
.da0c	ba0c	68		pla				pla
.da0d	ba0d	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da10	ba10	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da13	ba13	68		pla				pla
.da14	ba14	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.da17	ba17	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.da1a	ba1a	20 3b ba	jsr $ba3b			jsr 	_LCLNTimes2 				; line # x 10
.da1d	ba1d	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.da20	ba20	e8		inx				inx
.da21	ba21	29 0f		and #$0f			and 	#15 						; add to line #
.da23	ba23	18		clc				clc
.da24	ba24	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da27	ba27	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da2a	ba2a	90 03		bcc $ba2f			bcc 	_TLENNoCarry
.da2c	ba2c	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.da2f	ba2f					_TLENNoCarry:
.da2f	ba2f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.da32	ba32	c9 30		cmp #$30			cmp 	#'0'
.da34	ba34	90 04		bcc $ba3a			bcc 	_TLENExit
.da36	ba36	c9 3a		cmp #$3a			cmp 	#'9'+1
.da38	ba38	90 c3		bcc $b9fd			bcc 	TOKExtractLineNumber
.da3a	ba3a					_TLENExit:
.da3a	ba3a	60		rts				rts
.da3b	ba3b					_LCLNTimes2:
.da3b	ba3b	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da3e	ba3e	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da41	ba41	60		rts				rts
.da42	ba42					TOKWriteByte:
.da42	ba42	da		phx				phx
.da43	ba43	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da46	ba46	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da49	ba49	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da4c	ba4c	fa		plx				plx
.da4d	ba4d	60		rts				rts
.da4e	ba4e					TOKCheckCreateVariableRecord:
.da4e	ba4e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da50	ba50	85 36		sta $36				sta 	0+zTemp0
.da52	ba52	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da54	ba54	85 37		sta $37				sta 	1+zTemp0
.da56	ba56					_CCVSearch:
.da56	ba56	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da58	ba58	f0 2c		beq $ba86			beq 	_CCVFail
.da5a	ba5a	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da5c	ba5c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da5e	ba5e	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da61	ba61	d0 16		bne $ba79			bne 	_CCVNext
.da63	ba63	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da65	ba65	ae 00 04	ldx $0400			ldx 	identStart
.da68	ba68					_CCVCompare:
.da68	ba68	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da6b	ba6b	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da6d	ba6d	e8		inx				inx 								; advance pointers
.da6e	ba6e	c8		iny				iny
.da6f	ba6f	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da70	ba70	d0 07		bne $ba79			bne 	_CCVNext  					; didn't match go to next.
.da72	ba72	90 f4		bcc $ba68			bcc 	_CCVCompare 				; not finished yet.
.da74	ba74	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da77	ba77	f0 41		beq $baba			beq 	_CCVFound 					; yes, we were successful
.da79	ba79					_CCVNext:
.da79	ba79	18		clc				clc 								; go to next record.
.da7a	ba7a	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da7c	ba7c	65 36		adc $36				adc 	zTemp0
.da7e	ba7e	85 36		sta $36				sta 	zTemp0
.da80	ba80	90 d4		bcc $ba56			bcc 	_CCVSearch
.da82	ba82	e6 37		inc $37				inc 	zTemp0+1
.da84	ba84	80 d0		bra $ba56			bra 	_CCVSearch
.da86	ba86					_CCVFail:
.da86	ba86	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da88	ba88	ad 03 04	lda $0403			lda 	identHash
.da8b	ba8b	91 36		sta ($36),y			sta 	(zTemp0),y
.da8d	ba8d	c8		iny				iny 								; offset 2 is the type byte
.da8e	ba8e	ad 04 04	lda $0404			lda 	identTypeByte
.da91	ba91	91 36		sta ($36),y			sta 	(zTemp0),y
.da93	ba93	c8		iny				iny
.da94	ba94					_CCVData:
.da94	ba94	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da96	ba96	91 36		sta ($36),y			sta 	(zTemp0),y
.da98	ba98	c8		iny				iny
.da99	ba99	c0 08		cpy #$08			cpy 	#8
.da9b	ba9b	90 f7		bcc $ba94			bcc 	_CCVData
.da9d	ba9d	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.daa0	baa0					_CCVCopyName:
.daa0	baa0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.daa3	baa3	91 36		sta ($36),y			sta 	(zTemp0),y
.daa5	baa5	e8		inx				inx
.daa6	baa6	c8		iny				iny
.daa7	baa7	ec 02 04	cpx $0402			cpx 	identTypeEnd
.daaa	baaa	d0 f4		bne $baa0			bne 	_CCVCopyName
.daac	baac	98		tya				tya 								; patch offset
.daad	baad	92 36		sta ($36)			sta 	(zTemp0)
.daaf	baaf	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dab1	bab1	91 36		sta ($36),y			sta 	(zTemp0),y
.dab3	bab3	88		dey				dey
.dab4	bab4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dab6	bab6	09 80		ora #$80			ora 	#$80
.dab8	bab8	91 36		sta ($36),y			sta 	(zTemp0),y
.daba	baba					_CCVFound:
.daba	baba	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dabc	babc	38		sec				sec
.dabd	babd	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dabf	babf	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dac1	bac1	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.dac4	bac4	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dac6	bac6	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.dac9	bac9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.daca	baca					SNDCheckChannel:
.daca	baca	aa		tax				tax
.dacb	bacb	bd 51 09	lda $0951,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dace	bace	d0 38		bne $bb08			bne 	_SNDCCExit
.dad0	bad0	da		phx				phx 								; save current channel
.dad1	bad1	8a		txa				txa 								; put in A
.dad2	bad2	20 4e bb	jsr $bb4e			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dad5	bad5	68		pla				pla 								; channel # in A
.dad6	bad6	90 30		bcc $bb08			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dad8	bad8	a8		tay				tay 								; Y is the channel #
.dad9	bad9	bd 46 08	lda $0846,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.dadc	badc	99 45 09	sta $0945,y			sta 	SNDPitchLow,y
.dadf	badf	bd 47 08	lda $0847,x			lda 	SNDQueue+2,x
.dae2	bae2	99 49 09	sta $0949,y			sta 	SNDPitchHigh,y
.dae5	bae5	bd 48 08	lda $0848,x			lda 	SNDQueue+3,x
.dae8	bae8	99 4d 09	sta $094d,y			sta 	SNDVolume,y
.daeb	baeb	bd 49 08	lda $0849,x			lda 	SNDQueue+4,x
.daee	baee	99 51 09	sta $0951,y			sta 	SNDTimeLeft,y
.daf1	baf1	bd 4a 08	lda $084a,x			lda 	SNDQueue+5,x
.daf4	baf4	99 55 09	sta $0955,y			sta 	SNDAdjustLow,y
.daf7	baf7	bd 4b 08	lda $084b,x			lda 	SNDQueue+6,x
.dafa	bafa	99 59 09	sta $0959,y			sta 	SNDAdjustHigh,y
.dafd	bafd	5a		phy				phy 								; save channel #
.dafe	bafe	20 68 bb	jsr $bb68			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db01	bb01	ce 44 08	dec $0844			dec 	SNDLength 					; reduce the queue length.
.db04	bb04	68		pla				pla
.db05	bb05	20 09 bb	jsr $bb09			jsr 	SNDUpdateNote 				; update channel A
.db08	bb08					_SNDCCExit:
.db08	bb08	60		rts				rts
.db09	bb09					SNDUpdateNote:
.db09	bb09	aa		tax				tax 								; so we can access records
.db0a	bb0a	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db0b	bb0b	0a		asl a				asl 	a
.db0c	bb0c	0a		asl a				asl 	a
.db0d	bb0d	0a		asl a				asl 	a
.db0e	bb0e	0a		asl a				asl 	a
.db0f	bb0f	8d 43 08	sta $0843			sta 	SNDChannelBits
.db12	bb12	bd 51 09	lda $0951,x			lda 	SNDTimeLeft,x 				; are we silent
.db15	bb15	f0 2e		beq $bb45			beq 	_SNDUNIsSilent
.db17	bb17	ad 43 08	lda $0843			lda 	SNDChannelBits 				; push channel bits on stack
.db1a	bb1a	48		pha				pha
.db1b	bb1b	bd 45 09	lda $0945,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db1e	bb1e	29 0f		and #$0f			and 	#$0F
.db20	bb20	0d 43 08	ora $0843			ora 	SNDChannelBits 				; set channel bits
.db23	bb23	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db25	bb25	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts
.db28	bb28	bd 49 09	lda $0949,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db2b	bb2b	8d 43 08	sta $0843			sta 	SNDChannelBits
.db2e	bb2e	bd 45 09	lda $0945,x			lda 	SNDPitchLow,x
.db31	bb31	4e 43 08	lsr $0843			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db34	bb34	6a		ror a				ror 	a
.db35	bb35	4e 43 08	lsr $0843			lsr 	SNDChannelBits
.db38	bb38	6a		ror a				ror 	a
.db39	bb39	4a		lsr a				lsr 	a 							; put in bits 0-5
.db3a	bb3a	4a		lsr a				lsr 	a
.db3b	bb3b	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts 				; write as rest of pitch register
.db3e	bb3e	68		pla				pla
.db3f	bb3f	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db41	bb41	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts
.db44	bb44	60		rts				rts
.db45	bb45					_SNDUNIsSilent:
.db45	bb45	ad 43 08	lda $0843			lda 	SNDChannelBits 				; channel bits
.db48	bb48	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db4a	bb4a	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts 				; write to the ports
.db4d	bb4d	60		rts				rts
.db4e	bb4e					SNDFindNextNoteForA:
.db4e	bb4e	ac 44 08	ldy $0844			ldy 	SNDLength 					; queue size into Y
.db51	bb51	f0 13		beq $bb66			beq 	_SNDFNNFail 				; queue empty.
.db53	bb53	a2 00		ldx #$00			ldx 	#0
.db55	bb55					_SNDFNNSearch:
.db55	bb55	dd 45 08	cmp $0845,x			cmp 	SNDQueue,x 					; does it match the channel
.db58	bb58	38		sec				sec
.db59	bb59	f0 0c		beq $bb67			beq 	_SNDFNNExit 				; if so exit with CS.
.db5b	bb5b	e8		inx				inx 								; next queue slot.
.db5c	bb5c	e8		inx				inx
.db5d	bb5d	e8		inx				inx
.db5e	bb5e	e8		inx				inx
.db5f	bb5f	e8		inx				inx
.db60	bb60	e8		inx				inx
.db61	bb61	e8		inx				inx
.db62	bb62	e8		inx				inx
.db63	bb63	88		dey				dey 								; done the whole queue
.db64	bb64	d0 ef		bne $bb55			bne 	_SNDFNNSearch 				; no, go back.
.db66	bb66					_SNDFNNFail:
.db66	bb66	18		clc				clc
.db67	bb67					_SNDFNNExit:
.db67	bb67	60		rts				rts
.db68	bb68					SNDDeleteXFromQueue:
.db68	bb68	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db6a	bb6a	f0 09		beq $bb75			beq 	_SNDDXExit
.db6c	bb6c	bd 4d 08	lda $084d,x			lda 	SNDQueue+8,x
.db6f	bb6f	9d 45 08	sta $0845,x			sta 	SNDQueue,x
.db72	bb72	e8		inx				inx
.db73	bb73	80 f3		bra $bb68			bra 	SNDDeleteXFromQueue
.db75	bb75					_SNDDXExit:
.db75	bb75	60		rts				rts
.0843						SNDChannelBits:
>0843								.fill 	1
.db76	bb76					SNDQueueRequest:
.db76	bb76	86 36		stx $36				stx 	zTemp0						; save queue address
.db78	bb78	84 37		sty $37				sty 	zTemp0+1
.db7a	bb7a	ae 44 08	ldx $0844			ldx 	SNDLength 					; queue is full, can't take any more.
.db7d	bb7d	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db7f	bb7f	f0 21		beq $bba2			beq 	_SNDQRExit
.db81	bb81	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db83	bb83	48		pha				pha
.db84	bb84	8a		txa				txa  								; get offset in queue buffer/
.db85	bb85	0a		asl a				asl 	a
.db86	bb86	0a		asl a				asl 	a
.db87	bb87	0a		asl a				asl 	a
.db88	bb88	aa		tax				tax
.db89	bb89	68		pla				pla 								; get back and push again
.db8a	bb8a	48		pha				pha
.db8b	bb8b	9d 45 08	sta $0845,x			sta 	SNDQueue+0,x 				; save the channel #
.db8e	bb8e	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db90	bb90					_SNDQCopy:
.db90	bb90	b1 36		lda ($36),y			lda 	(zTemp0),y
.db92	bb92	e8		inx				inx
.db93	bb93	c8		iny				iny
.db94	bb94	9d 45 08	sta $0845,x			sta 	SNDQueue,x
.db97	bb97	c0 06		cpy #$06			cpy 	#6
.db99	bb99	d0 f5		bne $bb90			bne 	_SNDQCopy
.db9b	bb9b	ee 44 08	inc $0844			inc 	SNDLength 					; bump queue length.
.db9e	bb9e	68		pla				pla 								; get channel # back
.db9f	bb9f	20 ca ba	jsr $baca			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dba2	bba2					_SNDQRExit:
.dba2	bba2	60		rts				rts
.dba3	bba3					SNDSilenceChannel:
.dba3	bba3	aa		tax				tax 								; zero time left.
.dba4	bba4	9e 51 09	stz $0951,x			stz 	SNDTimeLeft,x
.dba7	bba7	0a		asl a				asl 	a 							; shift into position
.dba8	bba8	0a		asl a				asl 	a
.dba9	bba9	0a		asl a				asl 	a
.dbaa	bbaa	0a		asl a				asl 	a
.dbab	bbab	0a		asl a				asl 	a
.dbac	bbac	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbae	bbae	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts
.dbb1	bbb1	60		rts				rts
.dbb2	bbb2					SNDWritePorts:
.dbb2	bbb2	da		phx				phx 								; save X
.dbb3	bbb3	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbb5	bbb5	64 01		stz $01				stz 	1 							; access I/O page 0
.dbb7	bbb7	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbba	bbba	8d 10 d6	sta $d610			sta 	$D610
.dbbd	bbbd	86 01		stx $01				stx 	1 							; restore I/O
.dbbf	bbbf	fa		plx				plx 								; restore X
.dbc0	bbc0	60		rts				rts
.dbc1	bbc1					Export_SNDCommand:
.dbc1	bbc1	da		phx				phx 								; save XY
.dbc2	bbc2	5a		phy				phy
.dbc3	bbc3	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbc5	bbc5	f0 1d		beq $bbe4			beq 	_SNDInitialise
.dbc7	bbc7	90 28		bcc $bbf1			bcc 	_SNDExit
.dbc9	bbc9	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbcb	bbcb	f0 17		beq $bbe4			beq 	_SNDSilence
.dbcd	bbcd	b0 22		bcs $bbf1			bcs 	_SNDExit
.dbcf	bbcf	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbd1	bbd1	b0 09		bcs $bbdc			bcs 	_SNDQueryPlay
.dbd3	bbd3	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbd5	bbd5	b0 1a		bcs $bbf1			bcs 	_SNDExit
.dbd7	bbd7	20 76 bb	jsr $bb76			jsr 	SNDQueueRequest
.dbda	bbda	80 15		bra $bbf1			bra 	_SNDExit
.dbdc	bbdc					_SNDQueryPlay:
.dbdc	bbdc	29 03		and #$03			and 	#3 							; get channel #
.dbde	bbde	aa		tax				tax
.dbdf	bbdf	bd 51 09	lda $0951,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbe2	bbe2	80 0d		bra $bbf1			bra 	_SNDExit
.dbe4	bbe4					_SNDInitialise:
.dbe4	bbe4					_SNDSilence:
.dbe4	bbe4	9c 44 08	stz $0844			stz 	SNDLength 					; empty the queue.
.dbe7	bbe7	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dbe9	bbe9					_SNDSilenceLoop:
.dbe9	bbe9	48		pha				pha
.dbea	bbea	20 a3 bb	jsr $bba3			jsr 	SNDSilenceChannel
.dbed	bbed	68		pla				pla
.dbee	bbee	3a		dec a				dec 	a
.dbef	bbef	10 f8		bpl $bbe9			bpl 	_SNDSilenceLoop
.dbf1	bbf1					_SNDExit:
.dbf1	bbf1	7a		ply				ply
.dbf2	bbf2	fa		plx				plx
.dbf3	bbf3	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0844						SNDLength:
>0844								.fill 	1
.0845						SNDQueue:
>0845								.fill 	SNDQueueSize * 8
.0945						SNDPitchLow:
>0945								.fill 	4
.0949						SNDPitchHigh:
>0949								.fill 	4
.094d						SNDVolume:
>094d								.fill 	4
.0951						SNDTimeLeft:
>0951								.fill 	4
.0955						SNDAdjustLow:
>0955								.fill 	4
.0959						SNDAdjustHigh:
>0959								.fill 	4
.dbf4	bbf4					Export_SNDUpdate:
.dbf4	bbf4					PagedSNDUpdate:
.dbf4	bbf4	ad 51 09	lda $0951			lda 	SNDTimeLeft+0 				; look at time remaining
.dbf7	bbf7	f0 05		beq $bbfe			beq 	_SNDUNot0 					; not playing
.dbf9	bbf9	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbfb	bbfb	20 1d bc	jsr $bc1d			jsr 	SNDUpdateChannel 			; update it.
.dbfe	bbfe					_SNDUNot0:
.dbfe	bbfe	ad 52 09	lda $0952			lda 	SNDTimeLeft+1
.dc01	bc01	f0 05		beq $bc08			beq 	_SNDUNot1
.dc03	bc03	a2 01		ldx #$01			ldx 	#1
.dc05	bc05	20 1d bc	jsr $bc1d			jsr 	SNDUpdateChannel
.dc08	bc08					_SNDUNot1:
.dc08	bc08	ad 53 09	lda $0953			lda 	SNDTimeLeft+2
.dc0b	bc0b	f0 05		beq $bc12			beq 	_SNDUNot2
.dc0d	bc0d	a2 02		ldx #$02			ldx 	#2
.dc0f	bc0f	20 1d bc	jsr $bc1d			jsr 	SNDUpdateChannel
.dc12	bc12					_SNDUNot2:
.dc12	bc12	ad 54 09	lda $0954			lda 	SNDTimeLeft+3
.dc15	bc15	f0 05		beq $bc1c			beq 	_SNDUNot3
.dc17	bc17	a2 03		ldx #$03			ldx 	#3
.dc19	bc19	20 1d bc	jsr $bc1d			jsr 	SNDUpdateChannel
.dc1c	bc1c					_SNDUNot3:
.dc1c	bc1c	60		rts				rts
.dc1d	bc1d					SNDUpdateChannel:
.dc1d	bc1d	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc1f	bc1f	f0 2c		beq $bc4d			beq 	_SNDUCExit
.dc21	bc21	3a		dec a				dec 	a 							; decrement and update timer
.dc22	bc22	9d 51 09	sta $0951,x			sta 	SNDTimeLeft,x
.dc25	bc25	f0 1d		beq $bc44			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc27	bc27	bd 55 09	lda $0955,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc2a	bc2a	1d 59 09	ora $0959,x			ora 	SNDAdjustHigh,x
.dc2d	bc2d	f0 1e		beq $bc4d			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc2f	bc2f	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc30	bc30	bd 45 09	lda $0945,x			lda 	SNDPitchLow,x
.dc33	bc33	7d 55 09	adc $0955,x			adc 	SNDAdjustLow,x
.dc36	bc36	9d 45 09	sta $0945,x			sta 	SNDPitchLow,x
.dc39	bc39	bd 49 09	lda $0949,x			lda 	SNDPitchHigh,x
.dc3c	bc3c	7d 59 09	adc $0959,x			adc 	SNDAdjustHigh,x
.dc3f	bc3f	29 03		and #$03			and 	#3
.dc41	bc41	9d 49 09	sta $0949,x			sta 	SNDPitchHigh,x
.dc44	bc44					_SNDUCUpdate:
.dc44	bc44	8a		txa				txa 								; which channel.
.dc45	bc45	48		pha				pha
.dc46	bc46	20 09 bb	jsr $bb09			jsr 	SNDUpdateNote 				; update the current note
.dc49	bc49	68		pla				pla
.dc4a	bc4a	20 ca ba	jsr $baca			jsr 	SNDCheckChannel 			; more to do ?
.dc4d	bc4d					_SNDUCExit:
.dc4d	bc4d	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
