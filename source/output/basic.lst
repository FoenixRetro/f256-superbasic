
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Dec 24 07:35:10 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_DATA                             = $b8; $b8 DATA
=$b9						KWD_DIM                              = $b9; $b9 DIM
=$ba						KWD_DOWNTO                           = $ba; $ba DOWNTO
=$bb						KWD_ELSE                             = $bb; $bb ELSE
=$bc						KWD_FROM                             = $bc; $bc FROM
=$bd						KWD_GFX                              = $bd; $bd GFX
=$be						KWD_GOSUB                            = $be; $be GOSUB
=$bf						KWD_GOTO                             = $bf; $bf GOTO
=$c0						KWD_HERE                             = $c0; $c0 HERE
=$c1						KWD_IMAGE                            = $c1; $c1 IMAGE
=$c2						KWD_INPUT                            = $c2; $c2 INPUT
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_PRINT                            = $cf; $cf PRINT
=$d0						KWD_READ                             = $d0; $d0 READ
=$d1						KWD_RECT                             = $d1; $d1 RECT
=$d2						KWD_REM                              = $d2; $d2 REM
=$d3						KWD_RETURN                           = $d3; $d3 RETURN
=$d4						KWD_SOLID                            = $d4; $d4 SOLID
=$d5						KWD_SOUND                            = $d5; $d5 SOUND
=$d6						KWD_SPRITE                           = $d6; $d6 SPRITE
=$d7						KWD_TEXT                             = $d7; $d7 TEXT
=$d8						KWD_TO                               = $d8; $d8 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 7b 80	jmp $807b	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 bb a2	jsr $a2bb		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTBreakCheck:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 0b bc	jsr $bc0b		jsr	Export_EXTBreakCheck
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 0e bc	jsr $bc0e		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 cf a1	jsr $a1cf		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ca bb	jsr $bbca		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLLoadFile:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 1a bc	jsr $bc1a		jsr	Export_KNLLoadFile
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						GXGraphicDraw:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 c0 a7	jsr $a7c0		jsr	Export_GXGraphicDraw
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						SNDCommand:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 3d bb	jsr $bb3d		jsr	Export_SNDCommand
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						SNDUpdate:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 70 bb	jsr $bb70		jsr	Export_SNDUpdate
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						TKListConvertLine:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 ef b4	jsr $b4ef		jsr	Export_TKListConvertLine
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						TKTokeniseLine:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 83 b7	jsr $b783		jsr	Export_TKTokeniseLine
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.807b		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.807d		9a		txs				txs
.807e		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.8080		09 80		ora #$80			ora 	#$80
.8082		85 00		sta $00				sta 	0
.8084		20 3b a6	jsr $a63b			jsr		UpdateFont 					; update font if between FPGA updates.
.8087		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.808a		20 3f 80	jsr $803f			jsr 	KNLLoadFile
.808d		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.808f		aa		tax				tax
.8090		a8		tay				tay
.8091		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.8094		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8096		20 53 80	jsr $8053			jsr 	SNDCommand
.8099		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.809b		a9 a9		lda #$a9			lda 	#Prompt & $FF
.809d		20 9c 8f	jsr $8f9c			jsr 	PrintStringXA
.80a0		20 27 8a	jsr $8a27			jsr 	NewProgram 					; erase current program
.80a3		4c f4 83	jmp $83f4			jmp 	WarmStart					; make same size.
.80a6		4c f4 83	jmp $83f4			jmp 	WarmStart
.80a9						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80a9		41 6c 70 68 61 20 31 38			.text "Alpha 18 built 24-Dec-22. "
>80b1		20 62 75 69 6c 74 20 32 34 2d 44 65 63 2d 32 32
>80c1		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80c3		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80c6						AssembleGroup1:
.80c6		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80c8		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80cb		80 02		bra $80cf			bra 	AsmGroup12
.80cd						AssembleGroup2:
.80cd		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80cf						AsmGroup12:
.80cf		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80d2		68		pla				pla 								; pop the return address to access the information following.
.80d3		fa		plx				plx
.80d4		20 5b 81	jsr $815b			jsr 	AccessParameters 			; get opcode and save as base
.80d7		8d 24 04	sta $0424			sta 	BaseOpcode
.80da		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80dd		d0 08		bne $80e7			bne 	_AG12HaveMask
.80df		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80e1		20 63 81	jsr $8163			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80e4		8d 25 04	sta $0425			sta 	ModeMask
.80e7						_AG12HaveMask:
.80e7		20 97 82	jsr $8297			jsr 	TypeAndCalculateOperand 	; get zero page type
.80ea		da		phx				phx 								; save found address mode
.80eb		20 c7 81	jsr $81c7			jsr 	AssembleModeX
.80ee		fa		plx				plx  								; restore address mode
.80ef		b0 0b		bcs $80fc			bcs 	_AG12Exit
.80f1		20 fd 80	jsr $80fd			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80f4		20 c7 81	jsr $81c7			jsr 	AssembleModeX
.80f7		b0 03		bcs $80fc			bcs 	_AG12Exit
.80f9		4c 0c a0	jmp $a00c			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80fc						_AG12Exit:
.80fc		60		rts				rts
.80fd						PromoteToAbsolute:
.80fd		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80ff		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8101		f0 19		beq $811c			beq 	_PTADo
.8103		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8105		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8107		f0 13		beq $811c			beq 	_PTADo
.8109		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.810b		e0 80		cpx #$80			cpx 	#AM_ZEROY
.810d		f0 0d		beq $811c			beq 	_PTADo
.810f		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8111		e0 d1		cpx #$d1			cpx 	#AM_IND
.8113		f0 07		beq $811c			beq 	_PTADo
.8115		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8117		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8119		f0 01		beq $811c			beq 	_PTADo
.811b		60		rts				rts
.811c						_PTADo:
.811c		aa		tax				tax
.811d		60		rts				rts
.811e						AssembleGroup3:
.811e		68		pla				pla 								; get parameters, which is just the opcode.
.811f		fa		plx				plx
.8120		20 5b 81	jsr $815b			jsr 	AccessParameters 			; get and output opcode
.8123		20 73 81	jsr $8173			jsr 	AssemblerWriteByte
.8126		20 fb 82	jsr $82fb			jsr 	CalculateOperand 			; get a 16 bit operand
.8129		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.812b		38		sec				sec
.812c		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.812f		48		pha				pha 								; LSB in A
.8130		a5 60		lda $60				lda 	NSMantissa1
.8132		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8135		aa		tax				tax 								; MSB in X
.8136		68		pla				pla
.8137		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8138		69 7f		adc #$7f			adc 	#$7F
.813a		90 01		bcc $813d			bcc 	_AG3NoCarry
.813c		e8		inx				inx
.813d						_AG3NoCarry:
.813d		38		sec				sec 								; fix back and write out anyways.
.813e		e9 80		sbc #$80			sbc 	#$80
.8140		20 73 81	jsr $8173			jsr 	AssemblerWriteByte
.8143		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8145		f0 0a		beq $8151			beq 	_AG3Exit
.8147		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.814a		29 01		and #$01			and 	#1
.814c		f0 03		beq $8151			beq 	_AG3Exit
.814e		4c 11 a0	jmp $a011			jmp 	RangeError 					; no, branch is out of range
.8151						_AG3Exit:
.8151		60		rts				rts
.8152						AssembleGroup4:
.8152		68		pla				pla 								; pop address
.8153		fa		plx				plx
.8154		20 5b 81	jsr $815b			jsr 	AccessParameters 			; access and get first
.8157		20 73 81	jsr $8173			jsr 	AssemblerWriteByte 			; output it.
.815a		60		rts				rts
.815b						AccessParameters:
.815b		8d 21 04	sta $0421			sta 	ParamStart
.815e		8e 22 04	stx $0422			stx 	ParamStart+1
.8161		a9 01		lda #$01			lda 	#1
.8163						GetParameter:
.8163		5a		phy				phy
.8164		a8		tay				tay
.8165		ad 21 04	lda $0421			lda 	ParamStart
.8168		85 36		sta $36				sta 	zTemp0
.816a		ad 22 04	lda $0422			lda 	ParamStart+1
.816d		85 37		sta $37				sta 	zTemp0+1
.816f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8171		7a		ply				ply
.8172		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8173						AssemblerWriteByte:
.8173		48		pha			pha
.8174		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8177		29 02		and #$02		and 	#2
.8179		f0 1b		beq $8196		beq 	_AWBNoPrint
.817b		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.817e		20 b1 81	jsr $81b1		jsr 	PrintHex
.8181		ad 1e 04	lda $041e		lda		AssemblerAddress
.8184		20 b1 81	jsr $81b1		jsr 	PrintHex
.8187		a9 20		lda #$20		lda 	#' '
.8189		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.818c		68		pla			pla 									; print byte
.818d		48		pha			pha
.818e		20 b1 81	jsr $81b1		jsr 	PrintHex
.8191		a9 0d		lda #$0d		lda 	#13
.8193		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8196						_AWBNoPrint:
.8196		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.8199		85 36		sta $36			sta 	zTemp0
.819b		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.819e		f0 0e		beq $81ae		beq 	_AWBRange
.81a0		85 37		sta $37			sta 	zTemp0+1
.81a2		68		pla			pla 									; write byte out
.81a3		92 36		sta ($36)		sta 	(zTemp0)
.81a5		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81a8		d0 03		bne $81ad		bne 	_AWBNoCarry
.81aa		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81ad						_AWBNoCarry:
.81ad		60		rts			rts
.81ae						_AWBRange:
.81ae		4c 11 a0	jmp $a011		jmp 	RangeError
.81b1						PrintHex:
.81b1		48		pha				pha
.81b2		4a		lsr a				lsr 	a
.81b3		4a		lsr a				lsr 	a
.81b4		4a		lsr a				lsr 	a
.81b5		4a		lsr a				lsr 	a
.81b6		20 ba 81	jsr $81ba			jsr 	_PrintNibble
.81b9		68		pla				pla
.81ba						_PrintNibble:
.81ba		29 0f		and #$0f			and 	#15
.81bc		c9 0a		cmp #$0a			cmp 	#10
.81be		90 02		bcc $81c2			bcc 	_NoShift
.81c0		69 06		adc #$06			adc 	#6
.81c2						_NoShift:
.81c2		69 30		adc #$30			adc 	#48
.81c4		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81c7						AssembleModeX:
.81c7		5a		phy				phy
.81c8		ad 23 04	lda $0423			lda 	IsGroup1
.81cb		f0 17		beq $81e4			beq 	_AMXGroup2
.81cd		8a		txa				txa 							; is it in group # 1
.81ce		29 40		and #$40			and 	#AM_ISG1
.81d0		f0 4d		beq $821f			beq 	_AMXFail 				; no, give up.
.81d2		8a		txa				txa 							; get back.
.81d3		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81d5		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81d7		d0 22		bne $81fb			bne 	_AMXHaveInfo
.81d9		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.81dc		c9 81		cmp #$81			cmp 	#$81
.81de		f0 3f		beq $821f			beq 	_AMXFail
.81e0		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81e2		80 17		bra $81fb			bra 	_AMXHaveInfo 			; odd design decision there.
.81e4						_AMXGroup2:
.81e4		8a		txa				txa 							; is it in group 2 ?
.81e5		29 20		and #$20			and 	#AM_ISG2
.81e7		f0 36		beq $821f			beq 	_AMXFail 				; no, give up.
.81e9		8a		txa				txa 							; get the offset into Y
.81ea		29 1f		and #$1f			and 	#$1F
.81ec		4a		lsr a				lsr 	a 						; make it 0-7.
.81ed		4a		lsr a				lsr  	a
.81ee		a8		tay				tay
.81ef		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81f2						_AMXCheckOkay:
.81f2		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81f3		88		dey				dey
.81f4		10 fc		bpl $81f2			bpl 	_AMXCheckOkay
.81f6		90 27		bcc $821f			bcc 	_AMXFail 				; not allowed.
.81f8		8a		txa				txa  							; get mask back
.81f9		29 1f		and #$1f			and 	#$1F
.81fb						_AMXHaveInfo:
.81fb		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81fd		10 04		bpl $8203			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81ff		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8201		d0 1c		bne $821f			bne 	_AMXFail
.8203						_AMXAnySize:
.8203		18		clc				clc 							; add offset to the base opcode
.8204		6d 24 04	adc $0424			adc 	BaseOpcode
.8207						_AMXOutputCode:
.8207		20 73 81	jsr $8173			jsr 	AssemblerWriteByte 		; write the opcode out.
.820a		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.820c		f0 0e		beq $821c			beq 	_AMXExit
.820e		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8210		20 73 81	jsr $8173			jsr 	AssemblerWriteByte
.8213		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8215		30 05		bmi $821c			bmi 	_AMXExit
.8217		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8219		20 73 81	jsr $8173			jsr 	AssemblerWriteByte
.821c						_AMXExit:
.821c		7a		ply				ply
.821d		38		sec				sec
.821e		60		rts				rts
.821f						_AMXFail:
.821f		a0 00		ldy #$00			ldy 	#0
.8221						_AMXCheckOddities:
.8221		8a		txa				txa
.8222		d9 49 82	cmp $8249,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8225		d0 15		bne $823c			bne 	_AMXCONext
.8227		b9 47 82	lda $8247,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.822a		cd 24 04	cmp $0424			cmp 	BaseOpcode
.822d		d0 0d		bne $823c			bne 	_AMXCONext
.822f		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8231		10 04		bpl $8237			bpl 	_AMXCONotZero
.8233		a5 60		lda $60				lda 	NSMantissa1
.8235		d0 05		bne $823c			bne 	_AMXCONext
.8237						_AMXCONotZero:
.8237		b9 48 82	lda $8248,y			lda 	ExtraOpcode+1,y 		; get new opcode
.823a		80 cb		bra $8207			bra 	_AMXOutputCode 			; and assemble it
.823c						_AMXCONext:
.823c		c8		iny				iny
.823d		c8		iny				iny
.823e		c8		iny				iny
.823f		b9 47 82	lda $8247,y			lda 	ExtraOpcode+0,y 		; end of table
.8242		d0 dd		bne $8221			bne 	_AMXCheckOddities
.8244						_AMXCOFail:
.8244		7a		ply				ply
.8245		18		clc				clc
.8246		60		rts				rts
.8247						ExtraOpcode:
>8247		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>824a		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>824d		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8250		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8253		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8256		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8259		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>825c		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>825f		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8262		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8265		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8266						LabelHere:
.8266		c8		iny				iny 								; skip .
.8267		a2 00		ldx #$00			ldx 	#0 							; get a term
.8269		20 91 98	jsr $9891			jsr 	EvaluateTerm
.826c		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.826e		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8270		d0 22		bne $8294			bne 	_ALType 					; otherwise typing error
.8272		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8274		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8276		b5 60		lda $60,x			lda 	NSMantissa1,x
.8278		85 37		sta $37				sta 	zTemp0+1
.827a		5a		phy				phy 								; copy address in (64k)
.827b		a0 01		ldy #$01			ldy 	#1
.827d		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8280		92 36		sta ($36)			sta 	(zTemp0)
.8282		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8285		91 36		sta ($36),y			sta 	(zTemp0),y
.8287		c8		iny				iny
.8288		a9 00		lda #$00			lda 	#0 							; zero the rest.
.828a		91 36		sta ($36),y			sta 	(zTemp0),y
.828c		c8		iny				iny
.828d		91 36		sta ($36),y			sta 	(zTemp0),y
.828f		c8		iny				iny
.8290		91 36		sta ($36),y			sta 	(zTemp0),y
.8292		7a		ply				ply
.8293		60		rts				rts
.8294						_ALType:
.8294		4c 16 a0	jmp $a016			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8297						TypeAndCalculateOperand:
.8297		b1 30		lda ($30),y			lda 	(codePtr),y
.8299		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.829b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.829d		f0 5b		beq $82fa			beq 	_TACOExit
.829f		c9 80		cmp #$80			cmp 	#KWC_EOL
.82a1		f0 57		beq $82fa			beq 	_TACOExit
.82a3		c8		iny				iny
.82a4		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82a6		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82a8		f0 51		beq $82fb			beq 	CalculateOperand
.82aa		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82ac		f0 1f		beq $82cd			beq 	_TACOIndirect
.82ae		88		dey				dey 								; undo get of first character
.82af		20 fb 82	jsr $82fb			jsr 	CalculateOperand 			; get operand
.82b2		b1 30		lda ($30),y			lda 	(codePtr),y
.82b4		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82b6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82b8		d0 40		bne $82fa			bne 	_TACOExit
.82ba		c8		iny				iny
.82bb		20 05 83	jsr $8305			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82be		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82c0		c9 58		cmp #$58			cmp 	#'X'
.82c2		f0 36		beq $82fa			beq 	_TACOExit
.82c4		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82c6		c9 59		cmp #$59			cmp 	#'Y'
.82c8		f0 30		beq $82fa			beq 	_TACOExit
.82ca						_TACOSyntax:
.82ca		4c 0c a0	jmp $a00c			jmp 	SyntaxError
.82cd						_TACOIndirect:
.82cd		20 fb 82	jsr $82fb			jsr 	CalculateOperand 			; get the operand
.82d0		b1 30		lda ($30),y			lda 	(codePtr),y
.82d2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82d4		f0 17		beq $82ed			beq 	_TACOIndX
.82d6		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82d9		b1 30		lda ($30),y			lda 	(codePtr),y
.82db		a2 d1		ldx #$d1			ldx 	#AM_IND
.82dd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82df		d0 19		bne $82fa			bne 	_TACOExit
.82e1		c8		iny				iny
.82e2		20 05 83	jsr $8305			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82e5		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82e7		d0 e1		bne $82ca			bne 	_TACOSyntax
.82e9		a2 d0		ldx #$d0			ldx 	#AM_INDY
.82eb		80 0d		bra $82fa			bra 	_TACOExit
.82ed						_TACOIndX:
.82ed		c8		iny				iny
.82ee		20 05 83	jsr $8305			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82f1		c9 58		cmp #$58			cmp 	#'X' 						; check X
.82f3		d0 d5		bne $82ca			bne 	_TACOSyntax
.82f5		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket			; check )
.82f8		a2 c0		ldx #$c0			ldx 	#AM_INDX
.82fa						_TACOExit:
.82fa		60		rts				rts
.82fb						CalculateOperand:
.82fb		48		pha				pha
.82fc		da		phx				phx
.82fd		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82ff		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger
.8302		fa		plx				plx
.8303		68		pla				pla
.8304		60		rts				rts
.8305						TACOCheckXY:
.8305		b1 30		lda ($30),y			lda 	(codePtr),y
.8307		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8309		c9 40		cmp #$40			cmp 	#$40
.830b		d0 21		bne $832e			bne 	_TCXYFail
.830d		b1 30		lda ($30),y			lda 	(codePtr),y
.830f		18		clc				clc
.8310		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8312		85 37		sta $37				sta 	zTemp0+1
.8314		c8		iny				iny
.8315		b1 30		lda ($30),y			lda 	(codePtr),y
.8317		c8		iny				iny
.8318		85 36		sta $36				sta 	zTemp0
.831a		5a		phy				phy 								; save position
.831b		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.831d		b1 36		lda ($36),y			lda 	(zTemp0),y
.831f		d0 0c		bne $832d			bne 	_TCXYPopFail
.8321		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8323		b1 36		lda ($36),y			lda 	(zTemp0),y
.8325		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8327		f0 08		beq $8331			beq 	_TCXYFound
.8329		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.832b		f0 04		beq $8331			beq 	_TCXYFound
.832d						_TCXYPopFail:
.832d		7a		ply				ply
.832e						_TCXYFail:
.832e		a9 00		lda #$00			lda 	#0
.8330		60		rts				rts
.8331						_TCXYFound:
.8331		7a		ply				ply 								; restore position
.8332		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8334		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8335						BackloadProgram:
.8335		20 27 8a	jsr $8a27			jsr 	NewProgram 					; does the actual NEW.
.8338		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.833a		a9 8c		lda #$8c			lda 	#_BLLoad & $FF
.833c		20 9c 8f	jsr $8f9c			jsr 	PrintStringXA
.833f		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8341		8d 59 06	sta $0659			sta 	BackLoadPage
.8344		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8346		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.8349		a9 60		lda #$60			lda 	#(($6000) >> 8)
.834b		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.834e		a9 ff		lda #$ff			lda 	#$FF
.8350		8d fa ff	sta $fffa			sta 	$FFFA
.8353						_BPLoop:
.8353		a2 ff		ldx #$ff			ldx 	#$FF
.8355		20 a1 83	jsr $83a1			jsr 	BLReadByte 					; read a byte
.8358		c9 00		cmp #$00			cmp 	#0
.835a		f0 29		beq $8385			beq 	_BPExit 					; if 0 exit
.835c		30 27		bmi $8385			bmi 	_BPExit 					; if -ve exit
.835e						_BPCopy:
.835e		e8		inx				inx  								; copy byte into the lineBuffer
.835f		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8362		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8365		20 a1 83	jsr $83a1			jsr 	BLReadByte 					; read next byte
.8368		30 0a		bmi $8374			bmi 	_BPEndLine 					; -ve = EOL
.836a		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.836c		d0 02		bne $8370			bne 	_BPNotTab
.836e		a9 20		lda #$20			lda 	#' '
.8370						_BPNotTab:
.8370		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8372		b0 ea		bcs $835e			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8374						_BPEndLine:
.8374		20 71 80	jsr $8071			jsr 	TKTokeniseLine 				; tokenise the line.
.8377		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; line number = 0
.837a		0d 2c 04	ora $042c			ora 	TokenLineNumber+1
.837d		f0 d4		beq $8353			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.837f		38		sec				sec 								; append not insert
.8380		20 64 a5	jsr $a564			jsr 	MemoryInsertLine 			; append to current program
.8383		80 ce		bra $8353			bra 	_BPLoop
.8385						_BPExit:
.8385		9c fa ff	stz $fffa			stz 	$FFFA
.8388		20 8a 84	jsr $848a			jsr 	ClearCommand 				; clear variables etc.
.838b		60		rts				rts
.838c						_BLLoad:
>838c		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8394		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83a1						BLReadByte:
.83a1		da		phx				phx
.83a2		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83a4		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83a7		85 0b		sta $0b				sta 	8+3
.83a9		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83ac		85 36		sta $36				sta 	zTemp0
.83ae		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83b1		85 37		sta $37				sta 	zTemp0+1
.83b3		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83b5		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83b8		d0 0f		bne $83c9			bne 	_BLNoCarry
.83ba		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83bd		10 0a		bpl $83c9			bpl 	_BLNoCarry 					; need a new page
.83bf		48		pha				pha
.83c0		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83c2		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83c5		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83c8		68		pla				pla
.83c9						_BLNoCarry:
.83c9		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83cb		fa		plx				plx
.83cc		c9 00		cmp #$00			cmp 	#0
.83ce		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83cf						EditProgramCode:
.83cf		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; try to find the line.
.83d2		ae 2c 04	ldx $042c			ldx 	TokenLineNumber+1
.83d5		20 08 a6	jsr $a608			jsr 	MemorySearch
.83d8		90 05		bcc $83df			bcc 	_EPCNoDelete 				; reached the end : don't delete
.83da		d0 03		bne $83df			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.83dc		20 2d a5	jsr $a52d			jsr 	MemoryDeleteLine 			; delete the line
.83df						_EPCNoDelete:
.83df		ad 2d 04	lda $042d			lda 	TokenBuffer 				; buffer empty - we just want to delete a line.
.83e2		c9 80		cmp #$80			cmp 	#KWC_EOL
.83e4		f0 0d		beq $83f3			beq 	_EPCNoInsert
.83e6		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.83e9		ae 2c 04	ldx $042c			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.83ec		20 08 a6	jsr $a608			jsr 	MemorySearch
.83ef		18		clc				clc 								; insert at this point.
.83f0		20 64 a5	jsr $a564			jsr 	MemoryInsertLine 			; insert the line
.83f3						_EPCNoInsert:
.83f3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.83f4						WarmStart:
.83f4		a2 ff		ldx #$ff			ldx 	#$FF
.83f6		9a		txs				txs
.83f7		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.83f9		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.83fc		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.83ff		20 71 80	jsr $8071			jsr 	TKTokeniseLine 				; tokenise the line
.8402		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; line number <> 0
.8405		0d 2c 04	ora $042c			ora 	TokenLineNumber+1
.8408		d0 17		bne $8421			bne 	_WSEditCode 				; if so,edit code.
.840a		9c 2a 04	stz $042a			stz 	TokenOffset 				; zero the "offset", meaning it only runs one line.
.840d		a9 2a		lda #$2a			lda 	#((TokenOffset) & $FF)
.840f		85 30		sta $30				sta 	codePtr
.8411		a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8413		85 31		sta $31				sta 	codePtr+1
.8415		ad 2d 04	lda $042d			lda 	TokenBuffer 				; nothing to run
.8418		c9 80		cmp #$80			cmp 	#KWC_EOL
.841a		f0 d8		beq $83f4			beq 	WarmStart
.841c		20 b7 8b	jsr $8bb7			jsr 	RUNCodePointerLine 			; execute that line.
.841f		80 d3		bra $83f4			bra 	WarmStart
.8421						_WSEditCode:
.8421		20 cf 83	jsr $83cf			jsr 	EditProgramCode 			; edit the program code
.8424		20 8a 84	jsr $848a			jsr 	ClearCommand 				; clear all variables etc.
.8427		80 cb		bra $83f4			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8429						AssembleCommand:
.8429		a2 00		ldx #$00			ldx 	#0
.842b		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger 		; start address
.842e		a5 58		lda $58				lda 	NSMantissa0
.8430		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8433		a5 60		lda $60				lda 	NSMantissa1
.8435		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.8438		20 32 8f	jsr $8f32			jsr 	CheckComma
.843b		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; options 0-3
.843e		a5 58		lda $58				lda 	NSMantissa0
.8440		8d 20 04	sta $0420			sta 	AssemblerControl
.8443		60		rts				rts
.8444		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8445						AssertCommand:
.8445		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8447		20 fb 9d	jsr $9dfb			jsr 	EvaluateInteger 			; the assert test
.844a		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; exit if result is non zero.
.844d		d0 05		bne $8454			bne 	_ACExit
.844f		a9 0a		lda #$0a		lda	#10
.8451		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.8454						_ACExit:
.8454		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8455						CallCommand:
.8455		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8457		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger
.845a						_CCClear
.845a		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.845b		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero 					; these are optional sequentially.
.845e		e0 04		cpx #$04			cpx 	#4
.8460		d0 f8		bne $845a			bne 	_CCClear
.8462		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8464						_CCCParam:
.8464		b1 30		lda ($30),y			lda 	(codePtr),y
.8466		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8468		d0 09		bne $8473			bne 	_CCCRun6502
.846a		c8		iny				iny 								; skip comma
.846b		e8		inx				inx	 								; next level
.846c		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get A/X/Y
.846f		e0 03		cpx #$03			cpx 	#3
.8471		90 f1		bcc $8464			bcc 	_CCCParam 					; done all 3 ?
.8473						_CCCRun6502:
.8473		5a		phy				phy 								; save position
.8474		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8476		85 37		sta $37				sta 	zTemp0+1
.8478		a5 58		lda $58				lda 	NSMantissa0
.847a		85 36		sta $36				sta 	zTemp0
.847c		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.847e		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8480		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8482		20 87 84	jsr $8487			jsr 	_CCCZTemp0 					; call zTemp0
.8485		7a		ply				ply 								; restore position and exit
.8486		60		rts				rts
.8487						_CCCZTemp0:
.8487		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.848a						ClearCommand:
.848a		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.848c		85 36		sta $36				sta 	0+zTemp0
.848e		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8490		85 37		sta $37				sta 	1+zTemp0
.8492						_ClearZeroLoop:
.8492		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8494		f0 24		beq $84ba			beq 	_ClearZeroEnd
.8496		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8498		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.849a						_ClearOneVariable:
.849a		91 36		sta ($36),y			sta 	(zTemp0),y
.849c		c8		iny				iny
.849d		c0 08		cpy #$08			cpy 	#8
.849f		d0 f9		bne $849a			bne 	_ClearOneVariable
.84a1		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84a3		b1 36		lda ($36),y			lda 	(zTemp0),y
.84a5		c9 18		cmp #$18			cmp 	#NSTProcedure
.84a7		d0 04		bne $84ad			bne 	_ClearNotProcedure
.84a9		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84ab		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84ad						_ClearNotProcedure:
.84ad		18		clc				clc 								; go to the next variable
.84ae		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84b0		65 36		adc $36				adc 	zTemp0
.84b2		85 36		sta $36				sta 	zTemp0
.84b4		90 dc		bcc $8492			bcc 	_ClearZeroLoop
.84b6		e6 37		inc $37				inc 	zTemp0+1
.84b8		80 d8		bra $8492			bra 	_ClearZeroLoop
.84ba						_ClearZeroEnd:
.84ba		18		clc				clc
.84bb		a5 36		lda $36				lda 	zTemp0
.84bd		69 01		adc #$01			adc 	#1
.84bf		8d 0c 04	sta $040c			sta 	lowMemPtr
.84c2		a5 37		lda $37				lda 	zTemp0+1
.84c4		69 00		adc #$00			adc 	#0
.84c6		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84c9		20 c2 af	jsr $afc2			jsr 	StackReset
.84cc		20 28 b0	jsr $b028			jsr 	StringSystemInitialise
.84cf		20 33 8e	jsr $8e33			jsr 	ProcedureScan
.84d2		20 66 8b	jsr $8b66			jsr 	Command_Restore
.84d5		9c 1e 04	stz $041e			stz 	AssemblerAddress
.84d8		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.84db		9c 20 04	stz $0420			stz 	AssemblerControl
.84de		20 7d 9a	jsr $9a7d			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.84e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.84e2						ClearScreen:
.84e2		5a		phy				phy
.84e3		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.84e5		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.84e8		7a		ply				ply
.84e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84ea						Command_Data:
.84ea		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.84ec		a2 80		ldx #$80			ldx 	#KWC_EOL
.84ee		20 85 8e	jsr $8e85			jsr 	ScanForward
.84f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.84f2						DimCommand:
.84f2		b1 30		lda ($30),y			lda 	(codePtr),y
.84f4		29 c0		and #$c0			and 	#$C0
.84f6		c9 40		cmp #$40			cmp 	#$40
.84f8		d0 7a		bne $8574			bne 	_DCSyntax 				; n o, error.
.84fa		b1 30		lda ($30),y			lda 	(codePtr),y
.84fc		18		clc				clc
.84fd		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84ff		85 3f		sta $3f				sta 	zaTemp+1
.8501		c8		iny				iny
.8502		b1 30		lda ($30),y			lda 	(codePtr),y
.8504		c8		iny				iny
.8505		85 3e		sta $3e				sta 	zaTemp
.8507		5a		phy				phy
.8508		a0 02		ldy #$02			ldy 	#2 						; read type byte
.850a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.850c		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.850e		c9 18		cmp #$18			cmp 	#NSTProcedure
.8510		f0 62		beq $8574			beq 	_DCSyntax
.8512		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8514		29 04		and #$04			and 	#NSBIsArray
.8516		f0 64		beq $857c			beq 	_DCType
.8518		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.851a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.851c		d0 59		bne $8577			bne 	_DCRedefine
.851e		7a		ply				ply
.851f		20 7f 85	jsr $857f			jsr 	_DCGetSize 				; get array size, check it.
.8522		5a		phy				phy
.8523		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8525		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8527		7a		ply				ply 							; is there a second (e.g. ,x)
.8528		b1 30		lda ($30),y			lda 	(codePtr),y
.852a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.852c		d0 0a		bne $8538			bne 	_DCOneDimension
.852e		c8		iny				iny 							; skip comma
.852f		20 7f 85	jsr $857f			jsr 	_DCGetSize 				; get 2nd array size
.8532		5a		phy				phy
.8533		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8535		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8537		7a		ply				ply
.8538						_DCOneDimension:
.8538		5a		phy				phy 							; save position
.8539		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.853b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.853d		aa		tax				tax
.853e		c8		iny				iny
.853f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8541		e8		inx				inx 							; bump them.
.8542		1a		inc a				inc 	a
.8543		20 39 9e	jsr $9e39			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8546		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8548		29 e0		and #$e0			and 	#$E0
.854a		d0 23		bne $856f			bne 	_DCSize
.854c		a0 02		ldy #$02			ldy 	#2 						; get base type
.854e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8550		20 8d 85	jsr $858d			jsr 	ScaleByBaseType 		; scale by base type
.8553		a5 36		lda $36				lda 	zTemp0
.8555		a6 37		ldx $37				ldx 	zTemp0+1
.8557		20 3f 9a	jsr $9a3f			jsr 	AllocateXABytes 		; allocate memory
.855a		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.855c		91 3e		sta ($3e),y			sta 	(zaTemp),y
.855e		c8		iny				iny
.855f		8a		txa				txa
.8560		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8562		7a		ply				ply 							; get position back
.8563		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket 		; check )
.8566		b1 30		lda ($30),y			lda 	(codePtr),y
.8568		c8		iny				iny 							; consume in case
.8569		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.856b		f0 85		beq $84f2			beq 	DimCommand
.856d		88		dey				dey 							; undo consume
.856e		60		rts				rts
.856f						_DCSize:
.856f		a9 16		lda #$16		lda	#22
.8571		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.8574						_DCSyntax:
.8574		4c 0c a0	jmp $a00c			jmp 	SyntaxError
.8577						_DCRedefine:
.8577		a9 15		lda #$15		lda	#21
.8579		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.857c						_DCType:
.857c		4c 16 a0	jmp $a016			jmp 	TypeError
.857f						_DCGetSize:
.857f		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8581		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 	; get array dimension
.8584		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8586		f0 e7		beq $856f			beq 	_DCSize
.8588		c9 fe		cmp #$fe			cmp 	#254
.858a		f0 e3		beq $856f			beq 	_DCSize
.858c		60		rts				rts
.858d						ScaleByBaseType:
.858d		29 10		and #$10			and 	#NSBIsString 			; is it string
.858f		d0 19		bne $85aa			bne 	_SBBTString
.8591		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8593		48		pha				pha
.8594		a5 36		lda $36				lda 	zTemp0
.8596		48		pha				pha
.8597		06 36		asl $36				asl 	zTemp0 					; x 2
.8599		26 37		rol $37				rol 	zTemp0+1
.859b		06 36		asl $36				asl 	zTemp0 					; x 4
.859d		26 37		rol $37				rol 	zTemp0+1
.859f		68		pla				pla 							; add stacked value = x 5
.85a0		65 36		adc $36				adc 	zTemp0
.85a2		85 36		sta $36				sta 	zTemp0
.85a4		68		pla				pla
.85a5		65 37		adc $37				adc 	zTemp0+1
.85a7		85 37		sta $37				sta 	zTemp0+1
.85a9		60		rts				rts
.85aa						_SBBTString:
.85aa		06 36		asl $36				asl 	zTemp0
.85ac		26 37		rol $37				rol 	zTemp0+1
.85ae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85af						EndCommand:
.85af		4c f4 83	jmp $83f4			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85b2						ForCommand:
.85b2		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85b4		20 5c af	jsr $af5c			jsr 	StackOpen
.85b7		a2 00		ldx #$00			ldx 	#0
.85b9		20 91 98	jsr $9891			jsr 	EvaluateTerm
.85bc		b5 50		lda $50,x			lda 	NSStatus,x
.85be		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85c0		d0 47		bne $8609			bne		_FCError
.85c2		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85c4		20 3a 8f	jsr $8f3a			jsr 	CheckNextA
.85c7		e8		inx				inx
.85c8		20 fb 9d	jsr $9dfb			jsr 	EvaluateInteger 			; <from> in +1
.85cb		b1 30		lda ($30),y			lda 	(codePtr),y
.85cd		c8		iny				iny 								; consume it
.85ce		48		pha				pha 								; save on stack for later
.85cf		c9 ba		cmp #$ba			cmp 	#KWD_DOWNTO
.85d1		f0 04		beq $85d7			beq 	_FCNoSyntax
.85d3		c9 d8		cmp #$d8			cmp 	#KWD_TO
.85d5		d0 35		bne $860c			bne 	_FCSyntaxError
.85d7						_FCNoSyntax:
.85d7		e8		inx				inx
.85d8		20 fb 9d	jsr $9dfb			jsr 	EvaluateInteger
.85db		20 a1 af	jsr $afa1			jsr 	STKSaveCodePosition 		; save loop back position
.85de		68		pla				pla 								; restore DOWNTO or TO
.85df		5a		phy				phy 								; save Y on the stack
.85e0		49 ba		eor #$ba			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85e2		f0 02		beq $85e6			beq 	_FCNotDownTo
.85e4		a9 02		lda #$02			lda 	#2
.85e6						_FCNotDownTo:
.85e6		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85e7		a0 10		ldy #$10			ldy 	#16
.85e9		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85eb		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.85ed		a5 58		lda $58				lda 	NSMantissa0
.85ef		91 34		sta ($34),y			sta 	(basicStack),y
.85f1		a5 60		lda $60				lda 	NSMantissa1
.85f3		c8		iny				iny
.85f4		91 34		sta ($34),y			sta 	(basicStack),y
.85f6		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.85f8		a2 01		ldx #$01			ldx 	#1
.85fa		20 0f 86	jsr $860f			jsr 	FCIntegerToStack
.85fd		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.85ff		a2 02		ldx #$02			ldx 	#2
.8601		20 0f 86	jsr $860f			jsr 	FCIntegerToStack
.8604		20 2a 86	jsr $862a			jsr 	CopyIndexToReference
.8607		7a		ply				ply 								; restore position
.8608		60		rts				rts
.8609						_FCError:
.8609		4c 16 a0	jmp $a016			jmp 	TypeError
.860c						_FCSyntaxError:
.860c		4c 0c a0	jmp $a00c			jmp 	SyntaxError
.860f						FCIntegerToStack:
.860f		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8611		10 03		bpl $8616			bpl	 	_FCNotNegative
.8613		20 57 9e	jsr $9e57			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8616						_FCNotNegative:
.8616		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8618		91 34		sta ($34),y			sta 	(basicStack),y
.861a		c8		iny				iny
.861b		b5 60		lda $60,x			lda 	NSMantissa1,x
.861d		91 34		sta ($34),y			sta 	(basicStack),y
.861f		c8		iny				iny
.8620		b5 68		lda $68,x			lda 	NSMantissa2,x
.8622		91 34		sta ($34),y			sta 	(basicStack),y
.8624		c8		iny				iny
.8625		b5 70		lda $70,x			lda 	NSMantissa3,x
.8627		91 34		sta ($34),y			sta 	(basicStack),y
.8629		60		rts				rts
.862a						CopyIndexToReference:
.862a		5a		phy				phy
.862b		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.862d		38		sec				sec 								; (because we copy from offset 8)
.862e		b1 34		lda ($34),y			lda 	(basicStack),y
.8630		e9 08		sbc #$08			sbc 	#8
.8632		85 36		sta $36				sta 	zTemp0
.8634		c8		iny				iny
.8635		b1 34		lda ($34),y			lda 	(basicStack),y
.8637		e9 00		sbc #$00			sbc 	#0
.8639		85 37		sta $37				sta 	zTemp0+1
.863b		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.863d		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.863f		b1 34		lda ($34),y			lda 	(basicStack),y
.8641		0a		asl a				asl 	a 							; into carry
.8642		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8644		90 14		bcc $865a			bcc 	_CITRNormal
.8646		38		sec				sec
.8647						_CITRNegative:
.8647		a9 00		lda #$00			lda 	#0
.8649		f1 34		sbc ($34),y			sbc 	(basicStack),y
.864b		91 36		sta ($36),y			sta 	(zTemp0),y
.864d		c8		iny				iny
.864e		ca		dex				dex
.864f		d0 f6		bne $8647			bne 	_CITRNegative
.8651		88		dey				dey 								; look at MSB of mantissa
.8652		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8654		09 80		ora #$80			ora 	#$80
.8656		91 36		sta ($36),y			sta 	(zTemp0),y
.8658		7a		ply				ply
.8659		60		rts				rts
.865a						_CITRNormal:
.865a		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.865c		91 36		sta ($36),y			sta 	(zTemp0),y
.865e		c8		iny				iny
.865f		ca		dex				dex
.8660		d0 f8		bne $865a			bne 	_CITRNormal
.8662		7a		ply				ply 								; and exit.
.8663		60		rts				rts
.8664						NextCommand:
.8664		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8666		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8668		20 89 af	jsr $af89			jsr 	StackCheckFrame
.866b		5a		phy				phy
.866c		a0 10		ldy #$10			ldy 	#16 						; get the step count
.866e		b1 34		lda ($34),y			lda 	(basicStack),y
.8670		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8672		30 02		bmi $8676			bmi 	_NCStepNeg
.8674		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8676						_NCStepNeg:
.8676		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8678		a2 04		ldx #$04			ldx 	#4 							; count to bump
.867a		18		clc				clc
.867b						_NCBump:
.867b		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.867d		91 34		sta ($34),y			sta 	(basicStack),y
.867f		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8681		c8		iny				iny 								; next byte
.8682		ca		dex				dex 								; do four times
.8683		d0 f6		bne $867b			bne 	_NCBump
.8685		20 2a 86	jsr $862a			jsr		CopyIndexToReference		; copy it to the reference variable.
.8688		a0 10		ldy #$10			ldy 	#16 						; get step count again
.868a		b1 34		lda ($34),y			lda 	(basicStack),y
.868c		0a		asl a				asl 	a 							; sign bit to carry
.868d		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.868f		85 38		sta $38				sta 	zTemp1
.8691		90 02		bcc $8695			bcc 	_NCCompRev 					; use if step is +ve
.8693		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8695						_NCCompRev:
.8695		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8697		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8699		85 39		sta $39				sta 	zTemp1+1
.869b		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.869d		38		sec				sec
.869e						_NCCompare:
.869e		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86a0		b1 34		lda ($34),y			lda 	(basicStack),y
.86a2		a4 39		ldy $39				ldy 	zTemp1+1
.86a4		f1 34		sbc ($34),y			sbc 	(basicStack),y
.86a6		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86a8		e6 39		inc $39				inc 	zTemp1+1
.86aa		ca		dex				dex 								; do it 4 times.
.86ab		d0 f1		bne $869e			bne 	_NCCompare
.86ad		50 02		bvc $86b1			bvc 	_NCNoOverflow 				; convert to signed comparison
.86af		49 80		eor #$80			eor 	#$80
.86b1						_NCNoOverflow:
.86b1		7a		ply				ply 								; restore Y position
.86b2		0a		asl a				asl 	a 							; is bit 7 set.
.86b3		90 04		bcc $86b9			bcc 	_NCLoopback 				; if no , >= so loop back
.86b5		20 7b af	jsr $af7b			jsr 	StackClose 					; exit the loop
.86b8		60		rts				rts
.86b9						_NCLoopBack:
.86b9		20 b2 af	jsr $afb2			jsr 	STKLoadCodePosition 		; loop back
.86bc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86bd						Command_GOSUB:
.86bd		a2 00		ldx #$00			ldx 	#0
.86bf		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86c2		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86c4		20 5c af	jsr $af5c			jsr 	StackOpen 					; create frame
.86c7		20 a1 af	jsr $afa1			jsr 	STKSaveCodePosition 		; save current position
.86ca		4c e0 86	jmp $86e0			jmp 	GotoStackX
.86cd						Command_RETURN:
.86cd		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86cf		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86d1		20 89 af	jsr $af89			jsr 	StackCheckFrame
.86d4		20 b2 af	jsr $afb2			jsr 	STKLoadCodePosition 		; restore code position
.86d7		20 7b af	jsr $af7b			jsr 	StackClose
.86da		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86db						GotoCommand:
.86db		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86dd		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger
.86e0						GotoStackX:
.86e0		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86e2		48		pha				pha 								; it is slightly inefficient, just in cases.
.86e3		b5 58		lda $58,x			lda 	NSMantissa0,x
.86e5		fa		plx				plx
.86e6		20 08 a6	jsr $a608			jsr 	MemorySearch 				; transfer to line number AX.
.86e9		90 05		bcc $86f0			bcc 	_GotoError 					; not found, off end.
.86eb		d0 03		bne $86f0			bne 	_GotoError 					; not found exactly
.86ed		4c b0 8b	jmp $8bb0			jmp 	RunNewLine 					; and go straight to new line code.
.86f0						_GotoError:
.86f0		a9 0d		lda #$0d		lda	#13
.86f2		4c 43 8f	jmp $8f43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.86f5						IfCommand:
.86f5		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.86f7		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber
.86fa		b1 30		lda ($30),y			lda 	(codePtr),y
.86fc		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.86fe		d0 0a		bne $870a			bne 	_IFStructured 				; we still support it.
.8700		c8		iny				iny 								; consume THEN
.8701		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; is it zero
.8704		f0 01		beq $8707			beq 	_IfFail 					; if fail, go to next line
.8706		60		rts				rts 								; if THEN just continue
.8707						_IfFail:
.8707		4c 98 8b	jmp $8b98			jmp 	EOLCommand
.870a						_IfStructured:
.870a		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; is it zero
.870d		d0 07		bne $8716			bne 	_IfExit 					; if not, then continue normally.
.870f		a9 bb		lda #$bb			lda 	#KWD_ELSE 					; look for else/endif
.8711		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8713		20 85 8e	jsr $8e85			jsr 	ScanForward 				; and run from there
.8716						_IfExit:
.8716		60		rts				rts
.8717						ElseCode:
.8717		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8719		aa		tax				tax 								; so just go to the structure exit
.871a		20 85 8e	jsr $8e85			jsr 	ScanForward
.871d		60		rts				rts
.871e						EndIf:
.871e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.871f						Command_Input:
.871f		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8721		8d 28 04	sta $0428			sta 	IsInputFlag
.8724		80 03		bra $8729			bra 	Command_IP_Main
.8726						Command_Print:
.8726		9c 28 04	stz $0428			stz 	IsInputFlag 				; clear input flag
.8729						Command_IP_Main:
.8729		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.872a						_CPLoop:
.872a		08		php				php 								; save last action flag
.872b		b1 30		lda ($30),y			lda 	(codePtr),y
.872d		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.872f		f0 54		beq $8785			beq 	_CPExit
.8731		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8733		f0 50		beq $8785			beq 	_CPExit
.8735		68		pla				pla 								; throw last action flag
.8736		b1 30		lda ($30),y			lda 	(codePtr),y
.8738		c8		iny				iny
.8739		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.873b		f0 45		beq $8782			beq 	_CPContinueWithSameLine
.873d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.873f		f0 3c		beq $877d			beq 	_CPTab
.8741		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8743		f0 34		beq $8779			beq 	_CPNewLine
.8745		88		dey				dey 								; undo the get.
.8746		20 45 94	jsr $9445			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8749		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.874b		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.874d		f0 0d		beq $875c			beq 	_CPIsValue 					; no, display it.
.874f		ad 28 04	lda $0428			lda 	IsInputFlag 				; if print, dereference and print.
.8752		f0 05		beq $8759			beq 	_CPIsPrint 					; otherwise display.
.8754		20 8e 87	jsr $878e			jsr 	CIInputValue 				; input a value to the reference
.8757		80 20		bra $8779			bra 	_CPNewLine
.8759						_CPIsPrint:
.8759		20 0a 97	jsr $970a			jsr 	Dereference 				; dereference if required.
.875c						_CPIsValue:
.875c		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.875e		29 10		and #$10			and 	#NSBIsString
.8760		f0 09		beq $876b			beq 	_CPNumber
.8762		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8764		a5 58		lda $58				lda 	NSMantissa0
.8766		20 f1 87	jsr $87f1			jsr 	CPPrintStringXA
.8769		80 be		bra $8729			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.876b						_CPNumber:
.876b		a9 05		lda #$05			lda 	#5 							; maximum decimals
.876d		20 c3 9c	jsr $9cc3			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8770		a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8772		a9 49		lda #$49			lda 	#DecimalBuffer & $FF
.8774		20 f1 87	jsr $87f1			jsr 	CPPrintStringXA 			; print it.
.8777		80 b0		bra $8729			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8779						_CPNewLine:
.8779		a9 0d		lda #$0d			lda 	#13
.877b		80 02		bra $877f			bra 	_CPPrintChar
.877d						_CPTab:
.877d		a9 09		lda #$09			lda 	#9 							; print TAB
.877f						_CPPrintChar:
.877f		20 04 88	jsr $8804			jsr 	CPPrintVector
.8782						_CPContinueWithSameLine:
.8782		38		sec				sec 								; loop round with carry set, which
.8783		80 a5		bra $872a			bra 	_CPLoop 					; will inhibit final CR
.8785						_CPExit:
.8785		28		plp				plp 								; get last action flag
.8786		b0 05		bcs $878d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8788		a9 0d		lda #$0d			lda 	#13 						; print new line
.878a		20 04 88	jsr $8804			jsr 	CPPrintVector
.878d						_CPExit2:
.878d		60		rts				rts
.878e						CIInputValue:
.878e		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8790						_CIInputLine:
.8790		20 07 88	jsr $8807			jsr 	CPInputVector 				; get key
.8793		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8795		f0 1f		beq $87b6			beq 	_CIHaveValue
.8797		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8799		f0 11		beq $87ac			beq 	_CIBackspace
.879b		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.879d		90 f1		bcc $8790			bcc 	_CIInputLine
.879f		e0 50		cpx #$50			cpx 	#80 						; max length
.87a1		b0 ed		bcs $8790			bcs 	_CIInputLine
.87a3		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.87a6		e8		inx				inx
.87a7		20 04 88	jsr $8804			jsr 	CPPrintVector 				; echo it.
.87aa		80 e4		bra $8790			bra 	_CIInputLine
.87ac						_CIBackSpace:
.87ac		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87ae		f0 e0		beq $8790			beq 	_CIInputLine
.87b0		20 04 88	jsr $8804			jsr 	CPPrintVector 				; echo it.
.87b3		ca		dex				dex
.87b4		80 da		bra $8790			bra 	_CIInputLine
.87b6						_CIHaveValue:
.87b6		9e 2a 05	stz $052a,x			stz 	LineBuffer,x 				; ASCIIZ string now in line buffer.
.87b9		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87bb		29 10		and #$10			and 	#NSBIsString
.87bd		f0 17		beq $87d6			beq 	_CIAssignNumber 			; assign a number
.87bf		a2 01		ldx #$01			ldx 	#1
.87c1		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87c3		95 58		sta $58,x			sta 	NSMantissa0,x
.87c5		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87c7		95 60		sta $60,x			sta 	NSMantissa1,x
.87c9		74 68		stz $68,x			stz 	NSMantissa2,x
.87cb		74 70		stz $70,x			stz 	NSMantissa3,x
.87cd		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87cf		95 50		sta $50,x			sta  	NSStatus,x
.87d1		ca		dex				dex 								; X = 0
.87d2		20 43 88	jsr $8843			jsr 	AssignVariable
.87d5		60		rts				rts
.87d6						_CIAssignNumber:
.87d6		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87d8		85 36		sta $36				sta 	zTemp0
.87da		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87dc		85 37		sta $37				sta 	zTemp0+1
.87de		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.87e0		20 45 9c	jsr $9c45			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.87e3		90 07		bcc $87ec			bcc 	_CIIsOkay
.87e5		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.87e7		20 04 88	jsr $8804			jsr 	CPPrintVector
.87ea		80 a2		bra $878e			bra 	CIInputValue
.87ec						_CIIsOkay:
.87ec		ca		dex				dex 								; X = 0
.87ed		20 43 88	jsr $8843			jsr 	AssignVariable
.87f0		60		rts				rts
.87f1						CPPrintStringXA:
.87f1		5a		phy				phy
.87f2		86 37		stx $37				stx 	zTemp0+1
.87f4		85 36		sta $36				sta 	zTemp0
.87f6		a0 00		ldy #$00			ldy 	#0
.87f8						_PSXALoop:
.87f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.87fa		f0 06		beq $8802			beq 	_PSXAExit
.87fc		20 04 88	jsr $8804			jsr 	CPPrintVector
.87ff		c8		iny				iny
.8800		80 f6		bra $87f8			bra 	_PSXALoop
.8802						_PSXAExit:
.8802		7a		ply				ply
.8803		60		rts				rts
.8804						CPPrintVector:
.8804		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8807						CPInputVector:
.8807		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.880a						LetCommand:
.880a		a2 00		ldx #$00			ldx 	#0
.880c		b1 30		lda ($30),y			lda 	(codePtr),y
.880e		c9 10		cmp #$10			cmp 	#KWD_AT
.8810		d0 14		bne $8826			bne 	_LCStandard
.8812		c8		iny				iny 								; skip equal
.8813		20 91 98	jsr $9891			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8816		20 0a 97	jsr $970a			jsr 	Dereference 				; dereference it to a value
.8819		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.881b		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.881d		95 50		sta $50,x			sta 	NSStatus,x
.881f		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8821		d0 0f		bne $8832			bne 	_LCMain
.8823		4c 16 a0	jmp $a016			jmp 	TypeError 					; was a reference before.
.8826						_LCStandard:
.8826		ad 2f 94	lda $942f			lda 	PrecedenceLevel+"*"			; precedence > this
.8829		20 49 94	jsr $9449			jsr 	EvaluateExpressionAtPrecedence
.882c		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.882e		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8830		f0 0e		beq $8840			beq 	_LetGoProc 					; it's a procedure call.
.8832						_LCMain:
.8832		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8834		20 3a 8f	jsr $8f3a			jsr 	CheckNextA
.8837		e8		inx				inx 								; RHS
.8838		20 d3 9d	jsr $9dd3			jsr 	EvaluateValue
.883b		ca		dex				dex
.883c		20 43 88	jsr $8843			jsr 	AssignVariable
.883f		60		rts				rts
.8840						_LetGoProc:
.8840		4c 6e 8a	jmp $8a6e			jmp 	CallProcedure
.8843						AssignVariable:
.8843		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8845		48		pha				pha 								; save a copy
.8846		55 51		eor $51,x			eor 	NSStatus+1,x
.8848		29 10		and #$10			and 	#NSBIsString
.884a		d0 0b		bne $8857			bne 	_ASError
.884c		68		pla				pla 								; get back
.884d		29 10		and #$10			and 	#NSBIsString 				; check type
.884f		d0 03		bne $8854			bne 	_ASString
.8851		4c 48 96	jmp $9648			jmp 	AssignNumber
.8854						_ASString:
.8854		4c a6 96	jmp $96a6			jmp 	AssignString
.8857						_ASError:
.8857		4c 16 a0	jmp $a016			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.885a						Command_List:
.885a		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.885d		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.885f		20 53 80	jsr $8053			jsr 	SNDCommand
.8862		b1 30		lda ($30),y			lda 	(codePtr),y
.8864		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8866		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8868		f0 6e		beq $88d8			beq 	_CLListProcedure
.886a		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.886c		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.886e		a9 ff		lda #$ff			lda 	#$FF
.8870		85 5f		sta $5f				sta 	NSMantissa0+7
.8872		85 67		sta $67				sta 	NSMantissa1+7
.8874		b1 30		lda ($30),y			lda 	(codePtr),y
.8876		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8878		f0 1a		beq $8894			beq 	_CLSecond
.887a		20 55 89	jsr $8955			jsr 	CLIsDigit 					; if not digit, list all
.887d		b0 20		bcs $889f			bcs 	_CLStart
.887f		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8881		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger
.8884		b1 30		lda ($30),y			lda 	(codePtr),y
.8886		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8888		f0 0a		beq $8894			beq 	_CLSecond 					; if so go get it
.888a		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.888c		85 5f		sta $5f				sta 	NSMantissa0+7
.888e		a5 64		lda $64				lda 	NSMantissa1+4
.8890		85 67		sta $67				sta 	NSMantissa1+7
.8892		80 0b		bra $889f			bra 	_CLStart
.8894						_CLSecond:
.8894		c8		iny				iny 								; consume comma
.8895		20 55 89	jsr $8955			jsr 	CLIsDigit 					; digit found
.8898		b0 05		bcs $889f			bcs 	_CLStart 					; if not, continue listing
.889a		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.889c		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger
.889f						_CLStart
.889f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88a1		85 30		sta $30				sta 	codePtr
.88a3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88a5		85 31		sta $31				sta 	codePtr+1
.88a7						_CLLoop:
.88a7		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.88aa		f0 27		beq $88d3			beq 	_CLBreak
.88ac		b2 30		lda ($30)			lda 	(codePtr)
.88ae		f0 20		beq $88d0			beq 	_CLExit
.88b0		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88b2		20 44 89	jsr $8944			jsr 	CLCompareLineNo
.88b5		90 0c		bcc $88c3			bcc 	_CLNext
.88b7		a2 07		ldx #$07			ldx 	#7
.88b9		20 44 89	jsr $8944			jsr 	CLCompareLineNo
.88bc		f0 02		beq $88c0			beq 	_CLDoThisOne
.88be		b0 03		bcs $88c3			bcs 	_CLNext
.88c0						_CLDoThisOne:
.88c0		20 31 89	jsr $8931			jsr 	CLListOneLine 				; routine to list the current line.
.88c3						_CLNext:
.88c3		18		clc				clc
.88c4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88c6		65 30		adc $30				adc 	codePtr
.88c8		85 30		sta $30				sta 	codePtr
.88ca		90 02		bcc $88ce			bcc 	_CREExit
.88cc		e6 31		inc $31				inc 	codePtr+1 					; carry
.88ce						_CREExit:
.88ce		80 d7		bra $88a7			bra 	_CLLoop
.88d0						_CLExit:
.88d0		4c f4 83	jmp $83f4			jmp 	WarmStart
.88d3						_CLBreak:
.88d3		a9 01		lda #$01		lda	#1
.88d5		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.88d8						_CLListProcedure:
.88d8		b1 30		lda ($30),y			lda 	(codePtr),y
.88da		85 38		sta $38				sta 	zTemp1
.88dc		c8		iny				iny
.88dd		b1 30		lda ($30),y			lda 	(codePtr),y
.88df		85 39		sta $39				sta 	zTemp1+1
.88e1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88e3		85 30		sta $30				sta 	codePtr
.88e5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88e7		85 31		sta $31				sta 	codePtr+1
.88e9						_CLLPSearch:
.88e9		b2 30		lda ($30)			lda 	(codePtr)
.88eb		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.88ed		f0 e1		beq $88d0			beq 	_CLExit
.88ef		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.88f1		b1 30		lda ($30),y			lda 	(codePtr),y
.88f3		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.88f5		d0 0e		bne $8905			bne 	_CLLPNext
.88f7		c8		iny				iny 								; check if PROC this.
.88f8		b1 30		lda ($30),y			lda 	(codePtr),y
.88fa		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.88fc		d0 07		bne $8905			bne 	_CLLPNext
.88fe		c8		iny				iny
.88ff		b1 30		lda ($30),y			lda 	(codePtr),y
.8901		c5 39		cmp $39				cmp 	zTemp1+1
.8903		f0 0d		beq $8912			beq 	_CLLPFound
.8905						_CLLPNext:
.8905		18		clc				clc
.8906		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8908		65 30		adc $30				adc 	codePtr
.890a		85 30		sta $30				sta 	codePtr
.890c		90 02		bcc $8910			bcc 	_CREExit
.890e		e6 31		inc $31				inc 	codePtr+1 					; carry
.8910						_CREExit:
.8910		80 d7		bra $88e9			bra 	_CLLPSearch
.8912						_CLLPFound:
.8912		b2 30		lda ($30)			lda 	(codePtr)
.8914		f0 ba		beq $88d0			beq 	_CLExit
.8916		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8918		b1 30		lda ($30),y			lda 	(codePtr),y
.891a		48		pha				pha
.891b		20 31 89	jsr $8931			jsr 	CLListOneLine 				; list line and go forward
.891e		18		clc				clc
.891f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8921		65 30		adc $30				adc 	codePtr
.8923		85 30		sta $30				sta 	codePtr
.8925		90 02		bcc $8929			bcc 	_CREExit
.8927		e6 31		inc $31				inc 	codePtr+1 					; carry
.8929						_CREExit:
.8929		68		pla				pla 								; reached ENDPROC ?
.892a		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.892c		d0 e4		bne $8912			bne 	_CLLPFound
.892e		4c f4 83	jmp $83f4			jmp 	WarmStart
.8931						CLListOneLine:
.8931		20 e8 8e	jsr $8ee8			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8934		20 67 80	jsr $8067			jsr 	TKListConvertLine 			; convert line into token Buffer
.8937		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8939		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.893b		20 9c 8f	jsr $8f9c			jsr 	PrintStringXA
.893e		a9 0d		lda #$0d			lda 	#13 						; new line
.8940		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8943		60		rts				rts
.8944						CLCompareLineNo:
.8944		38		sec				sec
.8945		a0 01		ldy #$01			ldy 	#1
.8947		b1 30		lda ($30),y			lda 	(codePtr),y
.8949		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.894b		85 36		sta $36				sta 	zTemp0
.894d		c8		iny				iny
.894e		b1 30		lda ($30),y			lda 	(codePtr),y
.8950		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8952		05 36		ora $36				ora 	zTemp0
.8954		60		rts				rts
.8955						CLIsDigit:
.8955		b1 30		lda ($30),y			lda 	(codePtr),y
.8957		c9 30		cmp #$30			cmp 	#"0"
.8959		90 03		bcc $895e			bcc	 	_CLIDExitFalse
.895b		c9 3a		cmp #$3a			cmp 	#"9"+1
.895d		60		rts				rts
.895e						_CLIDExitFalse:
.895e		38		sec				sec
.895f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8960						Command_LOCAL:
.8960		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8962		20 6e 89	jsr $896e			jsr 	LocaliseNextTerm 			; convert term to a local.
.8965		b1 30		lda ($30),y			lda 	(codePtr),y
.8967		c8		iny				iny
.8968		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.896a		f0 f4		beq $8960			beq 	Command_LOCAL 				; if so, localise another variable.
.896c		88		dey				dey 								; unpick pre-get
.896d		60		rts				rts
.896e						LocaliseNextTerm:
.896e		20 91 98	jsr $9891			jsr 	EvaluateTerm 				; evaluate the term
.8971		b5 50		lda $50,x			lda 	NSStatus,x
.8973		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8975		f0 5c		beq $89d3			beq		_LNTError
.8977		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8979		85 36		sta $36				sta 	zTemp0
.897b		b5 60		lda $60,x			lda 	NSMantissa1,x
.897d		85 37		sta $37				sta  	zTemp0+1
.897f		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8981		29 10		and #$10			and 	#NSBIsString
.8983		d0 1e		bne $89a3			bne 	_LNTPushString
.8985		5a		phy				phy
.8986		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8988						_LNTPushNumLoop:
.8988		b1 36		lda ($36),y			lda		(zTemp0),y
.898a		20 3b af	jsr $af3b			jsr 	StackPushByte
.898d		c8		iny				iny
.898e		c0 05		cpy #$05			cpy 	#5
.8990		d0 f6		bne $8988			bne 	_LNTPushNumLoop
.8992		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8994		20 3b af	jsr $af3b			jsr 	StackPushByte
.8997		a5 37		lda $37				lda 	zTemp0+1
.8999		20 3b af	jsr $af3b			jsr 	StackPushByte
.899c		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.899e		20 3b af	jsr $af3b			jsr 	StackPushByte
.89a1		7a		ply				ply
.89a2		60		rts				rts
.89a3						_LNTPushString:
.89a3		5a		phy				phy
.89a4		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.89a6		85 38		sta $38				sta 	zTemp1
.89a8		a0 01		ldy #$01			ldy 	#1
.89aa		b1 36		lda ($36),y			lda 	(zTemp0),y
.89ac		85 39		sta $39				sta 	zTemp1+1
.89ae		a0 00		ldy #$00			ldy 	#0 							; output string
.89b0		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.89b2		f0 0a		beq $89be			beq 	_LNTStringOut
.89b4						_LNTPushStrLoop:
.89b4		b1 38		lda ($38),y			lda 	(zTemp1),y
.89b6		f0 06		beq $89be			beq 	_LNTStringOut
.89b8		20 3b af	jsr $af3b			jsr 	StackPushByte
.89bb		c8		iny				iny
.89bc		80 f6		bra $89b4			bra 	_LNTPushStrLoop
.89be						_LNTStringOut:
.89be		98		tya				tya									; output length (chars written).
.89bf		20 3b af	jsr $af3b			jsr 	StackPushByte
.89c2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.89c4		20 3b af	jsr $af3b			jsr 	StackPushByte
.89c7		b5 60		lda $60,x			lda 	NSMantissa1,x
.89c9		20 3b af	jsr $af3b			jsr 	StackPushByte
.89cc		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.89ce		20 3b af	jsr $af3b			jsr 	StackPushByte
.89d1		7a		ply				ply
.89d2		60		rts				rts
.89d3						_LNTError:
.89d3		4c 0c a0	jmp $a00c			jmp 	SyntaxError
.89d6						LocalPopValue:
.89d6		20 53 af	jsr $af53			jsr 	StackPopByte
.89d9		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.89db		d0 17		bne $89f4			bne 	_LPVString
.89dd		20 53 af	jsr $af53			jsr 	StackPopByte 				; address
.89e0		85 37		sta $37				sta 	zTemp0+1
.89e2		20 53 af	jsr $af53			jsr 	StackPopByte
.89e5		85 36		sta $36				sta 	zTemp0
.89e7		5a		phy				phy
.89e8		a0 04		ldy #$04			ldy 	#4 							; copy back
.89ea						_LPVNumberCopy:
.89ea		20 53 af	jsr $af53			jsr 	StackPopByte
.89ed		91 36		sta ($36),y			sta 	(zTemp0),y
.89ef		88		dey				dey
.89f0		10 f8		bpl $89ea			bpl 	_LPVNumberCopy
.89f2		7a		ply				ply 								; and complete
.89f3		60		rts				rts
.89f4						_LPVString:
.89f4		20 53 af	jsr $af53			jsr 	StackPopByte 				; address of record copied to zTemp0
.89f7		85 37		sta $37				sta 	zTemp0+1
.89f9		20 53 af	jsr $af53			jsr 	StackPopByte
.89fc		85 36		sta $36				sta 	zTemp0
.89fe		5a		phy				phy
.89ff		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8a01		85 38		sta $38				sta 	zTemp1
.8a03		a0 01		ldy #$01			ldy 	#1
.8a05		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a07		85 39		sta $39				sta 	zTemp1+1
.8a09		20 53 af	jsr $af53			jsr 	StackPopByte 				; # chars to get => y
.8a0c		a8		tay				tay
.8a0d		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8a0f		f0 0e		beq $8a1f			beq 	_LPVStringCopied
.8a11		a9 00		lda #$00			lda 	#0 							; NULL on end
.8a13		91 38		sta ($38),y			sta 	(zTemp1),y
.8a15						_LPVStringCopy:
.8a15		88		dey				dey
.8a16		30 07		bmi $8a1f			bmi 	_LPVStringCopied
.8a18		20 53 af	jsr $af53			jsr 	StackPopByte
.8a1b		91 38		sta ($38),y			sta 	(zTemp1),y
.8a1d		80 f6		bra $8a15			bra 	_LPVStringCopy
.8a1f						_LPVStringCopied:
.8a1f		fa		plx				plx
.8a20		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8a21						NewCommand:
.8a21		20 27 8a	jsr $8a27			jsr 	NewProgram 					; does the actual NEW.
.8a24		4c f4 83	jmp $83f4			jmp 	WarmStart 					; and warm starts straight away.
.8a27						NewProgram:
.8a27		20 ea a5	jsr $a5ea			jsr 	MemoryNew
.8a2a		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8a2d		20 8a 84	jsr $848a			jsr 	ClearCommand 				; clear everything.
.8a30		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8a31						PokeBCommand:
.8a31		a9 01		lda #$01			lda 	#1
.8a33		80 0c		bra $8a41			bra 	PokeCommand
.8a35						PokeWCommand:
.8a35		a9 02		lda #$02			lda 	#2
.8a37		80 08		bra $8a41			bra 	PokeCommand
.8a39						PokeLCommand:
.8a39		a9 03		lda #$03			lda 	#3
.8a3b		80 04		bra $8a41			bra 	PokeCommand
.8a3d						PokeDCommand:
.8a3d		a9 04		lda #$04			lda 	#4
.8a3f		80 00		bra $8a41			bra 	PokeCommand
.8a41						PokeCommand:
.8a41		48		pha				pha 								; save count on stack
.8a42		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8a44		20 0e 9e	jsr $9e0e			jsr		Evaluate16BitInteger 		; address
.8a47		20 32 8f	jsr $8f32			jsr 	CheckComma
.8a4a		e8		inx				inx
.8a4b		20 fb 9d	jsr $9dfb			jsr		EvaluateInteger 			; data
.8a4e		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8a50		85 36		sta $36				sta 	zTemp0
.8a52		a5 60		lda $60				lda 	NSMantissa1
.8a54		85 37		sta $37				sta 	zTemp0+1
.8a56		68		pla				pla 								; count -> zTemp1
.8a57		85 38		sta $38				sta 	zTemp1
.8a59		5a		phy				phy 								; save Y position.
.8a5a		a0 00		ldy #$00			ldy 	#0 							; index to write
.8a5c		a2 00		ldx #$00			ldx 	#0 							; index to read
.8a5e						_PCLoop:
.8a5e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8a60		91 36		sta ($36),y			sta 	(zTemp0),y
.8a62		c8		iny				iny 								; next byte to write
.8a63		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8a64		18		clc				clc
.8a65		69 08		adc #$08			adc 	#MathStackSize
.8a67		aa		tax				tax
.8a68		c6 38		dec $38				dec 	zTemp1 						; done them all
.8a6a		d0 f2		bne $8a5e			bne 	_PCLoop
.8a6c		7a		ply				ply 								; restore position.
.8a6d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8a6e						CallProcedure:
.8a6e		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8a70		b1 30		lda ($30),y			lda 	(codePtr),y
.8a72		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8a74		f0 0c		beq $8a82			beq 	_CPEndParam
.8a76						_CPParamLoop:
.8a76		20 d3 9d	jsr $9dd3			jsr 	EvaluateValue 				; get parameter onto stack
.8a79		e8		inx				inx 								; bump next stack
.8a7a		b1 30		lda ($30),y			lda 	(codePtr),y
.8a7c		c8		iny				iny
.8a7d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8a7f		f0 f5		beq $8a76			beq 	_CPParamLoop
.8a81		88		dey				dey 								; unpick.
.8a82						_CPEndParam:
.8a82		8e 16 04	stx $0416			stx 	LastParameter 				; save the last parameters index.
.8a85		c8		iny				iny									; skip right bracket
.8a86		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8a88		20 5c af	jsr $af5c			jsr 	StackOpen
.8a8b		20 a1 af	jsr $afa1			jsr 	STKSaveCodePosition 		; save loop position
.8a8e		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8a90		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8a92		a5 60		lda $60				lda 	NSMantissa1
.8a94		85 37		sta $37				sta 	zTemp0+1
.8a96		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8a98		b2 36		lda ($36)			lda 	(zTemp0)
.8a9a		85 30		sta $30				sta 	safePtr
.8a9c		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a9e		85 31		sta $31				sta 	safePtr+1
.8aa0		c8		iny				iny
.8aa1		b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa3		85 32		sta $32				sta 	safePtr+2
.8aa5		c8		iny				iny
.8aa6		b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa8		85 33		sta $33				sta 	safePtr+3
.8aaa		c8		iny				iny 								; get Y offset -> Y
.8aab		b1 36		lda ($36),y			lda 	(zTemp0),y
.8aad		a8		tay				tay
.8aae		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8ab0		ec 16 04	cpx $0416			cpx	 	LastParameter 				; check zero parameters at the start
.8ab3		f0 13		beq $8ac8			beq 	_ParamExit 					; if so, exit.
.8ab5						_ParamExtract:
.8ab5		ca		dex				dex 								; put a local term on the level before
.8ab6		20 6e 89	jsr $896e			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8ab9		20 43 88	jsr $8843			jsr 	AssignVariable 				; assign stacked value to the variable.
.8abc		e8		inx				inx 								; advance to next parameter to do.
.8abd		e8		inx				inx
.8abe		ec 16 04	cpx $0416			cpx 	LastParameter 				; are we done ?
.8ac1		f0 05		beq $8ac8			beq 	_ParamExit
.8ac3		20 32 8f	jsr $8f32			jsr 	CheckComma 					; comma seperating parameters
.8ac6		80 ed		bra $8ab5			bra 	_ParamExtract
.8ac8						_ParamExit:
.8ac8		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket 			; check )
.8acb		60		rts				rts 								; and continue from here
.8acc						Command_ENDPROC:
.8acc		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8ace		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8ad0		20 89 af	jsr $af89			jsr 	StackCheckFrame
.8ad3		20 b2 af	jsr $afb2			jsr 	STKLoadCodePosition 		; restore code position
.8ad6		20 7b af	jsr $af7b			jsr 	StackClose
.8ad9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8ada						Command_Read:
.8ada		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8adc		20 91 98	jsr $9891			jsr 	EvaluateTerm
.8adf		b5 50		lda $50,x			lda 	NSStatus,x
.8ae1		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ae3		f0 4f		beq $8b34			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8ae5		20 7d 8b	jsr $8b7d			jsr 	SwapDataCodePtrs 			; swap code and data
.8ae8		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8aeb		d0 25		bne $8b12			bne 	_CRContinueData  			; forward for the next one.
.8aed		b2 30		lda ($30)			lda 	(codePtr)
.8aef		f0 1c		beq $8b0d			beq 	_CRNoData
.8af1						_CRKeepSearching:
.8af1		a9 b8		lda #$b8			lda 	#KWD_DATA 					; scan for instruction
.8af3		a2 80		ldx #$80			ldx 	#KWC_EOL
.8af5		20 85 8e	jsr $8e85			jsr 	ScanForward
.8af8		c9 b8		cmp #$b8			cmp 	#KWD_DATA 					; found data ?
.8afa		f0 16		beq $8b12			beq 	_CRHaveData 				; found it
.8afc		18		clc				clc
.8afd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8aff		65 30		adc $30				adc 	codePtr
.8b01		85 30		sta $30				sta 	codePtr
.8b03		90 02		bcc $8b07			bcc 	_CREExit
.8b05		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b07						_CREExit:
.8b07		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8b09		b2 30		lda ($30)			lda 	(codePtr)
.8b0b		d0 e4		bne $8af1			bne 	_CRKeepSearching
.8b0d						_CRNoData:
.8b0d		a9 0b		lda #$0b		lda	#11
.8b0f		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.8b12						_CRHaveData:
.8b12						_CRContinueData:
.8b12		a2 01		ldx #$01			ldx 	#1
.8b14		20 d3 9d	jsr $9dd3			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8b17		ca		dex				dex
.8b18		20 43 88	jsr $8843			jsr		AssignVariable 				; do the assignment
.8b1b		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8b1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8b20		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8b22		d0 04		bne $8b28			bne 	_CRSwapBack
.8b24		c8		iny				iny 								; consume comma
.8b25		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8b28						_CRSwapBack:
.8b28		20 7d 8b	jsr $8b7d			jsr 	SwapDataCodePtrs			; swap them back.
.8b2b		b1 30		lda ($30),y			lda 	(codePtr),y
.8b2d		c8		iny				iny
.8b2e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b30		f0 a8		beq $8ada			beq 	Command_Read 				; if so go round again.
.8b32		88		dey				dey 								; unpick get.
.8b33		60		rts				rts
.8b34						_CRSyntax:
.8b34		4c 0c a0	jmp $a00c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8b37						RemCommand:
.8b37		b1 30		lda ($30),y			lda 	(codePtr),y
.8b39		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8b3b		d0 06		bne $8b43			bne 	_RMExit
.8b3d		c8		iny				iny 								; point to offset
.8b3e		98		tya				tya 								; A = offset position
.8b3f		38		sec				sec 								; add size +1 hence SEC
.8b40		71 30		adc ($30),y			adc 	(codePtr),y
.8b42		a8		tay				tay 								; make current position.
.8b43						_RMExit:
.8b43		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8b44						Command_REPEAT:
.8b44		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8b46		20 5c af	jsr $af5c			jsr 	StackOpen
.8b49		20 a1 af	jsr $afa1			jsr 	STKSaveCodePosition 		; save loop position
.8b4c		60		rts				rts
.8b4d						Command_UNTIL:
.8b4d		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8b4f		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8b51		20 89 af	jsr $af89			jsr 	StackCheckFrame
.8b54		a2 00		ldx #$00			ldx 	#0
.8b56		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber 				; work out the number
.8b59		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; check if zero
.8b5c		f0 04		beq $8b62			beq 	_CULoopBack 				; if so keep looping
.8b5e		20 7b af	jsr $af7b			jsr 	StackClose		 			; return
.8b61		60		rts				rts
.8b62						_CULoopBack:
.8b62		20 b2 af	jsr $afb2			jsr 	STKLoadCodePosition 		; loop back
.8b65		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8b66						Command_Restore:
.8b66		20 7d 8b	jsr $8b7d			jsr 	SwapDataCodePtrs 			; swap code and data
.8b69		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b6b		85 30		sta $30				sta 	codePtr
.8b6d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b6f		85 31		sta $31				sta 	codePtr+1
.8b71		20 7d 8b	jsr $8b7d			jsr 	SwapDataCodePtrs 			; put them back
.8b74		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8b76		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8b79		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8b7c		60		rts				rts
.8b7d						SwapDataCodePtrs:
.8b7d		da		phx				phx
.8b7e		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8b80						_SDCPLoop:
.8b80		b5 30		lda $30,x			lda 	safePtr,x
.8b82		48		pha				pha
.8b83		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8b86		95 30		sta $30,x			sta 	safePtr,x
.8b88		68		pla				pla
.8b89		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8b8c		ca		dex				dex
.8b8d		10 f1		bpl $8b80			bpl 	_SDCPLoop
.8b8f		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8b92		8c 1b 04	sty $041b			sty 	dataPointer+4
.8b95		a8		tay				tay
.8b96		fa		plx				plx
.8b97		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8b98						EOLCommand:
.8b98		18		clc				clc
.8b99		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b9b		65 30		adc $30				adc 	codePtr
.8b9d		85 30		sta $30				sta 	codePtr
.8b9f		90 02		bcc $8ba3			bcc 	_CREExit
.8ba1		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ba3						_CREExit:
.8ba3		80 0b		bra $8bb0			bra 	RunNewLine
.8ba5						CommandRUN:
.8ba5		20 8a 84	jsr $848a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8ba8		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8baa		85 30		sta $30				sta 	codePtr
.8bac		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bae		85 31		sta $31				sta 	codePtr+1
.8bb0						RUNNewLine:
.8bb0		b2 30		lda ($30)			lda 	(codePtr)
.8bb2		f0 7b		beq $8c2f			beq 	CRNoProgram         		; no then END.
.8bb4		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8bb6		9a		txs				txs
.8bb7						RUNCodePointerLine:
.8bb7		a0 02		ldy #$02			ldy 	#2 							; start of program
.8bb9						_CRIncMainLoop:
.8bb9		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8bbc		d0 22		bne $8be0			bne 	_CRNoBreakCheck
.8bbe		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8bc1		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check
.8bc4		f0 64		beq $8c2a			beq 	_CRBreak
.8bc6		a5 01		lda $01				lda 	1 							; save I/O 0
.8bc8		48		pha				pha
.8bc9		64 01		stz $01				stz 	1 							; access I/O Page 0
.8bcb		38		sec				sec 								; calculate timer - LastTick
.8bcc		ad 59 d6	lda $d659			lda 	$D659
.8bcf		aa		tax				tax 								; saving timer in X
.8bd0		ed 5c 06	sbc $065c			sbc 	LastTick
.8bd3		c9 03		cmp #$03			cmp 	#3
.8bd5		90 06		bcc $8bdd			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8bd7		8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.8bda		20 b9 9e	jsr $9eb9			jsr 	TickHandler 							; go do the code.
.8bdd						_NoFireTick:
.8bdd		68		pla				pla 								; restore I/O 0
.8bde		85 01		sta $01				sta 	1
.8be0						_CRNoBreakCheck:
.8be0		c8		iny				iny									; next token
.8be1						_CRMainLoop:
.8be1		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8be4		b1 30		lda ($30),y			lda 	(codePtr),y
.8be6		10 10		bpl $8bf8			bpl 	_CRNotKeyword				; not a token.
.8be8		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8bea		b0 04		bcs $8bf0			bcs 	_CRIsKeyword
.8bec		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8bee		b0 34		bcs $8c24			bcs		_CRSyntaxError
.8bf0						_CRIsKeyword:
.8bf0		c8		iny				iny 								; consume command
.8bf1		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8bf2		aa		tax				tax 								; put in X for vector jump
.8bf3		20 27 8c	jsr $8c27			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8bf6		80 e9		bra $8be1			bra 	_CRMainLoop 				; and loop round
.8bf8						_CRNotKeyword:
.8bf8		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8bfa		f0 bd		beq $8bb9			beq 	_CRIncMainLoop
.8bfc		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8bfe		90 05		bcc $8c05			bcc 	_CRNotVariable
.8c00						_CRGoLet:
.8c00		20 0a 88	jsr $880a			jsr 	LetCommand
.8c03		80 dc		bra $8be1			bra 	_CRMainLoop
.8c05						_CRNotVariable:
.8c05		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8c07		f0 f7		beq $8c00			beq 	_CRGoLet
.8c09		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8c0b		f0 f3		beq $8c00			beq 	_CRGoLet
.8c0d		c9 21		cmp #$21			cmp 	#KWD_PLING
.8c0f		f0 ef		beq $8c00			beq 	_CRGoLet
.8c11		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8c13		f0 09		beq $8c1e			beq 	_CRGoRem
.8c15		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8c17		d0 0b		bne $8c24			bne 	_CRSyntaxError
.8c19		20 66 82	jsr $8266			jsr 	LabelHere
.8c1c		80 c3		bra $8be1			bra 	_CRMainLoop
.8c1e						_CRGoRem:
.8c1e		c8		iny				iny
.8c1f		20 37 8b	jsr $8b37			jsr 	RemCommand
.8c22		80 bd		bra $8be1			bra 	_CRMainLoop
.8c24						_CRSyntaxError:
.8c24		4c 0c a0	jmp $a00c			jmp 	SyntaxError
.8c27						_CRCallVector0:
.8c27		7c c6 8c	jmp ($8cc6,x)			jmp 	(VectorSet0,x)
.8c2a						_CRBreak:
.8c2a		a9 01		lda #$01		lda	#1
.8c2c		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.8c2f						CRNoProgram:
.8c2f		4c af 85	jmp $85af			jmp 	EndCommand
.8c32						Shift1Command:
.8c32		b1 30		lda ($30),y			lda 	(codePtr),y
.8c34		c8		iny				iny
.8c35		0a		asl a				asl 	a
.8c36		aa		tax				tax
.8c37		7c 78 8d	jmp ($8d78,x)			jmp 	(VectorSet1,x)
.8c3a						Shift2Command:
.8c3a		b1 30		lda ($30),y			lda 	(codePtr),y
.8c3c		c8		iny				iny
.8c3d		0a		asl a				asl 	a
.8c3e		aa		tax				tax
.8c3f		7c a6 8d	jmp ($8da6,x)			jmp 	(VectorSet2,x)
.8c42						Unused1:
.8c42						Unused2:
.8c42						Unused3:
.8c42						Unused4:
.8c42		4c 0c a0	jmp $a00c			jmp 	SyntaxError
>8c45								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8c46						VectorSetPunc:
>8c46		fb 91					.word	ShiftLeft                        ; $00 <<
>8c48		e6 8f					.word	BinaryCompareLessEqual           ; $01 <=
>8c4a		dc 8f					.word	BinaryCompareNotEqual            ; $02 <>
>8c4c		0c a0					.word	SyntaxError                      ; $03 !!3
>8c4e		0c a0					.word	SyntaxError                      ; $04 ><
>8c50		f0 8f					.word	BinaryCompareGreaterEqual        ; $05 >=
>8c52		fe 91					.word	ShiftRight                       ; $06 >>
>8c54		0c a0					.word	SyntaxError                      ; $07 !!7
>8c56		0c a0					.word	SyntaxError                      ; $08 !!8
>8c58		0c a0					.word	SyntaxError                      ; $09 !!9
>8c5a		0c a0					.word	SyntaxError                      ; $0a !!10
>8c5c		0c a0					.word	SyntaxError                      ; $0b !!11
>8c5e		0c a0					.word	SyntaxError                      ; $0c !!12
>8c60		0c a0					.word	SyntaxError                      ; $0d !!13
>8c62		0c a0					.word	SyntaxError                      ; $0e !!14
>8c64		0c a0					.word	SyntaxError                      ; $0f !!15
>8c66		0c a0					.word	SyntaxError                      ; $10 @
>8c68		0c a0					.word	SyntaxError                      ; $11 !!17
>8c6a		0c a0					.word	SyntaxError                      ; $12 !!18
>8c6c		0c a0					.word	SyntaxError                      ; $13 [
>8c6e		a7 90					.word	IntegerDivide                    ; $14 \
>8c70		0c a0					.word	SyntaxError                      ; $15 ]
>8c72		39 93					.word	EorInteger                       ; $16 ^
>8c74		0c a0					.word	SyntaxError                      ; $17 _
>8c76		0c a0					.word	SyntaxError                      ; $18 `
>8c78		0c a0					.word	SyntaxError                      ; $19 !!25
>8c7a		0c a0					.word	SyntaxError                      ; $1a !!26
>8c7c		0c a0					.word	SyntaxError                      ; $1b {
>8c7e		04 93					.word	OraInteger                       ; $1c |
>8c80		0c a0					.word	SyntaxError                      ; $1d }
>8c82		0c a0					.word	SyntaxError                      ; $1e ~
>8c84		0c a0					.word	SyntaxError                      ; $1f [7m<7F>[m
>8c86		0c a0					.word	SyntaxError                      ; $20
>8c88		6e 93					.word	WordIndirect                     ; $21 !
>8c8a		0c a0					.word	SyntaxError                      ; $22 "
>8c8c		0c a0					.word	SyntaxError                      ; $23 #
>8c8e		0c a0					.word	SyntaxError                      ; $24 $
>8c90		e8 90					.word	IntegerModulus                   ; $25 %
>8c92		cf 92					.word	AndInteger                       ; $26 &
>8c94		0c a0					.word	SyntaxError                      ; $27 '
>8c96		0c a0					.word	SyntaxError                      ; $28 (
>8c98		0c a0					.word	SyntaxError                      ; $29 )
>8c9a		56 91					.word	MulInteger                       ; $2a *
>8c9c		71 92					.word	AddInteger                       ; $2b +
>8c9e		0c a0					.word	SyntaxError                      ; $2c ,
>8ca0		aa 92					.word	SubInteger                       ; $2d -
>8ca2		0c a0					.word	SyntaxError                      ; $2e .
>8ca4		28 95					.word	FDivideCommand                   ; $2f /
>8ca6		0c a0					.word	SyntaxError                      ; $30 0
>8ca8		0c a0					.word	SyntaxError                      ; $31 1
>8caa		0c a0					.word	SyntaxError                      ; $32 2
>8cac		0c a0					.word	SyntaxError                      ; $33 3
>8cae		0c a0					.word	SyntaxError                      ; $34 4
>8cb0		0c a0					.word	SyntaxError                      ; $35 5
>8cb2		0c a0					.word	SyntaxError                      ; $36 6
>8cb4		0c a0					.word	SyntaxError                      ; $37 7
>8cb6		0c a0					.word	SyntaxError                      ; $38 8
>8cb8		0c a0					.word	SyntaxError                      ; $39 9
>8cba		0c a0					.word	SyntaxError                      ; $3a :
>8cbc		0c a0					.word	SyntaxError                      ; $3b ;
>8cbe		c8 8f					.word	BinaryCompareLess                ; $3c <
>8cc0		be 8f					.word	BinaryCompareEqual               ; $3d =
>8cc2		d2 8f					.word	BinaryCompareGreater             ; $3e >
>8cc4		90 93					.word	ByteIndirect                     ; $3f ?
.8cc6						VectorSet0:
>8cc6		98 8b					.word	EOLCommand                       ; $80 !0:EOF
>8cc8		32 8c					.word	Shift1Command                    ; $81 !1:SH1
>8cca		3a 8c					.word	Shift2Command                    ; $82 !2:SH2
>8ccc		12 9a					.word	AbsUnary                         ; $83 ABS(
>8cce		20 9a					.word	AllocUnary                       ; $84 ALLOC(
>8cd0		90 9a					.word	AscUnary                         ; $85 ASC(
>8cd2		74 9c					.word	ChrUnary                         ; $86 CHR$(
>8cd4		7e a4					.word	UnaryEvent                       ; $87 EVENT(
>8cd6		ba 8f					.word	UnaryFalse                       ; $88 FALSE
>8cd8		9d 9a					.word	FracUnary                        ; $89 FRAC(
>8cda		0c a0					.word	SyntaxError                      ; $8a GETDATE$(
>8cdc		0c a0					.word	SyntaxError                      ; $8b GETTIME$(
>8cde		08 a4					.word	UnaryHit                         ; $8c HIT(
>8ce0		b2 9a					.word	IntUnary                         ; $8d INT(
>8ce2		33 9c					.word	IsValUnary                       ; $8e ISVAL(
>8ce4		02 a5					.word	UnaryJoyB                        ; $8f JOYB(
>8ce6		db a4					.word	UnaryJoyX                        ; $90 JOYX(
>8ce8		de a4					.word	UnaryJoyY                        ; $91 JOYY(
>8cea		47 9d					.word	Unary_Left                       ; $92 LEFT$(
>8cec		c3 9a					.word	LenUnary                         ; $93 LEN(
>8cee		e1 9a					.word	Unary_Max                        ; $94 MAX(
>8cf0		69 9d					.word	Unary_Mid                        ; $95 MID$(
>8cf2		dd 9a					.word	Unary_Min                        ; $96 MIN(
>8cf4		2c 9b					.word	Unary_Not                        ; $97 NOT(
>8cf6		3f 9b					.word	PeekByteUnary                    ; $98 PEEK(
>8cf8		4b 9b					.word	PeekDUnary                       ; $99 PEEKD(
>8cfa		47 9b					.word	PeekLUnary                       ; $9a PEEKL(
>8cfc		43 9b					.word	PeekWUnary                       ; $9b PEEKW(
>8cfe		b9 ae					.word	UnaryPlaying                     ; $9c PLAYING(
>8d00		78 9b					.word	Unary_Random                     ; $9d RANDOM(
>8d02		54 9d					.word	Unary_Right                      ; $9e RIGHT$(
>8d04		95 9b					.word	Unary_Rnd                        ; $9f RND(
>8d06		0b 9c					.word	SgnUnary                         ; $a0 SGN(
>8d08		86 9c					.word	SpcUnary                         ; $a1 SPC(
>8d0a		a1 9c					.word	Unary_Str                        ; $a2 STR$(
>8d0c		14 a5					.word	UnaryTimer                       ; $a3 TIMER(
>8d0e		af 8f					.word	UnaryTrue                        ; $a4 TRUE
>8d10		29 9c					.word	ValUnary                         ; $a5 VAL(
>8d12		b2 85					.word	ForCommand                       ; $a6 FOR
>8d14		f5 86					.word	IfCommand                        ; $a7 IF
>8d16		42 8c					.word	Unused1                          ; $a8 PROC
>8d18		44 8b					.word	Command_REPEAT                   ; $a9 REPEAT
>8d1a		fb 8e					.word	Command_WHILE                    ; $aa WHILE
>8d1c		1e 87					.word	EndIf                            ; $ab ENDIF
>8d1e		cc 8a					.word	Command_ENDPROC                  ; $ac ENDPROC
>8d20		64 86					.word	NextCommand                      ; $ad NEXT
>8d22		42 8c					.word	Unused4                          ; $ae THEN
>8d24		4d 8b					.word	Command_UNTIL                    ; $af UNTIL
>8d26		1c 8f					.word	Command_WEND                     ; $b0 WEND
>8d28		0c a0					.word	SyntaxError                      ; $b1 BY
>8d2a		55 84					.word	CallCommand                      ; $b2 CALL
>8d2c		bc a1					.word	CircleCommand                    ; $b3 CIRCLE
>8d2e		8a 84					.word	ClearCommand                     ; $b4 CLEAR
>8d30		e2 84					.word	ClearScreen                      ; $b5 CLS
>8d32		0c a0					.word	SyntaxError                      ; $b6 COLOR
>8d34		0c a0					.word	SyntaxError                      ; $b7 COLOUR
>8d36		ea 84					.word	Command_Data                     ; $b8 DATA
>8d38		f2 84					.word	DimCommand                       ; $b9 DIM
>8d3a		42 8c					.word	Unused3                          ; $ba DOWNTO
>8d3c		17 87					.word	ElseCode                         ; $bb ELSE
>8d3e		0c a0					.word	SyntaxError                      ; $bc FROM
>8d40		db a3					.word	GfxCommand                       ; $bd GFX
>8d42		bd 86					.word	Command_GOSUB                    ; $be GOSUB
>8d44		db 86					.word	GotoCommand                      ; $bf GOTO
>8d46		0c a0					.word	SyntaxError                      ; $c0 HERE
>8d48		e5 a1					.word	ImageCommand                     ; $c1 IMAGE
>8d4a		1f 87					.word	Command_Input                    ; $c2 INPUT
>8d4c		0a 88					.word	LetCommand                       ; $c3 LET
>8d4e		37 a2					.word	LineCommand                      ; $c4 LINE
>8d50		60 89					.word	Command_LOCAL                    ; $c5 LOCAL
>8d52		0c a0					.word	SyntaxError                      ; $c6 OFF
>8d54		0c a0					.word	SyntaxError                      ; $c7 ON
>8d56		0c a0					.word	SyntaxError                      ; $c8 OUTLINE
>8d58		2c a4					.word	PaletteCommand                   ; $c9 PALETTE
>8d5a		30 a2					.word	PlotCommand                      ; $ca PLOT
>8d5c		31 8a					.word	PokeBCommand                     ; $cb POKE
>8d5e		3d 8a					.word	PokeDCommand                     ; $cc POKED
>8d60		39 8a					.word	PokeLCommand                     ; $cd POKEL
>8d62		35 8a					.word	PokeWCommand                     ; $ce POKEW
>8d64		26 87					.word	Command_Print                    ; $cf PRINT
>8d66		da 8a					.word	Command_Read                     ; $d0 READ
>8d68		b8 a1					.word	RectangleCommand                 ; $d1 RECT
>8d6a		37 8b					.word	RemCommand                       ; $d2 REM
>8d6c		cd 86					.word	Command_RETURN                   ; $d3 RETURN
>8d6e		0c a0					.word	SyntaxError                      ; $d4 SOLID
>8d70		d5 ae					.word	SoundCommand                     ; $d5 SOUND
>8d72		c7 a1					.word	SpriteCommand                    ; $d6 SPRITE
>8d74		01 a2					.word	TextCommand                      ; $d7 TEXT
>8d76		42 8c					.word	Unused2                          ; $d8 TO
.8d78						VectorSet1:
>8d78		0c a0					.word	SyntaxError                      ; $80 !0:EOF
>8d7a		0c a0					.word	SyntaxError                      ; $81 !1:SH1
>8d7c		0c a0					.word	SyntaxError                      ; $82 !2:SH2
>8d7e		29 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8d80		45 84					.word	AssertCommand                    ; $84 ASSERT
>8d82		7b a3					.word	BitmapCtrl                       ; $85 BITMAP
>8d84		af 85					.word	EndCommand                       ; $86 END
>8d86		8d ae					.word	Explode                          ; $87 EXPLODE
>8d88		0c a0					.word	SyntaxError                      ; $88 GO
>8d8a		5a 88					.word	Command_List                     ; $89 LIST
>8d8c		0c a0					.word	SyntaxError                      ; $8a LOAD
>8d8e		21 8a					.word	NewCommand                       ; $8b NEW
>8d90		69 ae					.word	PingCommand                      ; $8c PING
>8d92		66 8b					.word	Command_Restore                  ; $8d RESTORE
>8d94		a5 8b					.word	CommandRUN                       ; $8e RUN
>8d96		0c a0					.word	SyntaxError                      ; $8f SETDATE
>8d98		0c a0					.word	SyntaxError                      ; $90 SETTIME
>8d9a		81 ae					.word	ShootCommand                     ; $91 SHOOT
>8d9c		c0 a3					.word	SpritesCtrl                      ; $92 SPRITES
>8d9e		2e 8e					.word	StopCommand                      ; $93 STOP
>8da0		75 a4					.word	XGoCommand                       ; $94 XGO
>8da2		6c a4					.word	XLoadCommand                     ; $95 XLOAD
>8da4		75 ae					.word	ZapCommand                       ; $96 ZAP
.8da6						VectorSet2:
>8da6		0c a0					.word	SyntaxError                      ; $80 !0:EOF
>8da8		0c a0					.word	SyntaxError                      ; $81 !1:SH1
>8daa		0c a0					.word	SyntaxError                      ; $82 !2:SH2
>8dac		cb 9e					.word	Assemble_adc                     ; $83 ADC
>8dae		c3 9e					.word	Assemble_and                     ; $84 AND
>8db0		df 9e					.word	Assemble_asl                     ; $85 ASL
>8db2		49 9f					.word	Assemble_bcc                     ; $86 BCC
>8db4		4d 9f					.word	Assemble_bcs                     ; $87 BCS
>8db6		55 9f					.word	Assemble_beq                     ; $88 BEQ
>8db8		0c 9f					.word	Assemble_bit                     ; $89 BIT
>8dba		3d 9f					.word	Assemble_bmi                     ; $8a BMI
>8dbc		51 9f					.word	Assemble_bne                     ; $8b BNE
>8dbe		39 9f					.word	Assemble_bpl                     ; $8c BPL
>8dc0		59 9f					.word	Assemble_bra                     ; $8d BRA
>8dc2		5d 9f					.word	Assemble_brk                     ; $8e BRK
>8dc4		41 9f					.word	Assemble_bvc                     ; $8f BVC
>8dc6		45 9f					.word	Assemble_bvs                     ; $90 BVS
>8dc8		65 9f					.word	Assemble_clc                     ; $91 CLC
>8dca		b9 9f					.word	Assemble_cld                     ; $92 CLD
>8dcc		79 9f					.word	Assemble_cli                     ; $93 CLI
>8dce		a9 9f					.word	Assemble_clv                     ; $94 CLV
>8dd0		d7 9e					.word	Assemble_cmp                     ; $95 CMP
>8dd2		20 9f					.word	Assemble_cpx                     ; $96 CPX
>8dd4		1b 9f					.word	Assemble_cpy                     ; $97 CPY
>8dd6		fd 9e					.word	Assemble_dec                     ; $98 DEC
>8dd8		b5 9f					.word	Assemble_dex                     ; $99 DEX
>8dda		91 9f					.word	Assemble_dey                     ; $9a DEY
>8ddc		c7 9e					.word	Assemble_eor                     ; $9b EOR
>8dde		02 9f					.word	Assemble_inc                     ; $9c INC
>8de0		c5 9f					.word	Assemble_inx                     ; $9d INX
>8de2		b1 9f					.word	Assemble_iny                     ; $9e INY
>8de4		34 9f					.word	Assemble_jmp                     ; $9f JMP
>8de6		2f 9f					.word	Assemble_jsr                     ; $a0 JSR
>8de8		d3 9e					.word	Assemble_lda                     ; $a1 LDA
>8dea		f8 9e					.word	Assemble_ldx                     ; $a2 LDX
>8dec		16 9f					.word	Assemble_ldy                     ; $a3 LDY
>8dee		e9 9e					.word	Assemble_lsr                     ; $a4 LSR
>8df0		c9 9f					.word	Assemble_nop                     ; $a5 NOP
>8df2		bf 9e					.word	Assemble_ora                     ; $a6 ORA
>8df4		75 9f					.word	Assemble_pha                     ; $a7 PHA
>8df6		61 9f					.word	Assemble_php                     ; $a8 PHP
>8df8		bd 9f					.word	Assemble_phx                     ; $a9 PHX
>8dfa		7d 9f					.word	Assemble_phy                     ; $aa PHY
>8dfc		85 9f					.word	Assemble_pla                     ; $ab PLA
>8dfe		69 9f					.word	Assemble_plp                     ; $ac PLP
>8e00		d1 9f					.word	Assemble_plx                     ; $ad PLX
>8e02		8d 9f					.word	Assemble_ply                     ; $ae PLY
>8e04		e4 9e					.word	Assemble_rol                     ; $af ROL
>8e06		ee 9e					.word	Assemble_ror                     ; $b0 ROR
>8e08		71 9f					.word	Assemble_rti                     ; $b1 RTI
>8e0a		81 9f					.word	Assemble_rts                     ; $b2 RTS
>8e0c		db 9e					.word	Assemble_sbc                     ; $b3 SBC
>8e0e		6d 9f					.word	Assemble_sec                     ; $b4 SEC
>8e10		cd 9f					.word	Assemble_sed                     ; $b5 SED
>8e12		89 9f					.word	Assemble_sei                     ; $b6 SEI
>8e14		cf 9e					.word	Assemble_sta                     ; $b7 STA
>8e16		c1 9f					.word	Assemble_stp                     ; $b8 STP
>8e18		f3 9e					.word	Assemble_stx                     ; $b9 STX
>8e1a		11 9f					.word	Assemble_sty                     ; $ba STY
>8e1c		07 9f					.word	Assemble_stz                     ; $bb STZ
>8e1e		a5 9f					.word	Assemble_tax                     ; $bc TAX
>8e20		a1 9f					.word	Assemble_tay                     ; $bd TAY
>8e22		2a 9f					.word	Assemble_trb                     ; $be TRB
>8e24		25 9f					.word	Assemble_tsb                     ; $bf TSB
>8e26		ad 9f					.word	Assemble_tsx                     ; $c0 TSX
>8e28		95 9f					.word	Assemble_txa                     ; $c1 TXA
>8e2a		9d 9f					.word	Assemble_txs                     ; $c2 TXS
>8e2c		99 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8e2e						StopCommand:
.8e2e		a9 08		lda #$08		lda	#8
.8e30		4c 43 8f	jmp $8f43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8e33						ProcedureScan:
.8e33		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e35		85 30		sta $30				sta 	codePtr
.8e37		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e39		85 31		sta $31				sta 	codePtr+1
.8e3b						_PSLoop:
.8e3b		b2 30		lda ($30)			lda 	(codePtr)
.8e3d		f0 42		beq $8e81			beq 	_PSExit
.8e3f		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8e41		b1 30		lda ($30),y			lda 	(codePtr),y
.8e43		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8e45		d0 2d		bne $8e74			bne 	_PSNext
.8e47		c8		iny				iny 								; get the address of the record to zTemp0 and
.8e48		b1 30		lda ($30),y			lda 	(codePtr),y
.8e4a		29 c0		and #$c0			and 	#$C0
.8e4c		c9 40		cmp #$40			cmp 	#$40
.8e4e		d0 32		bne $8e82			bne 	_PSSyntax
.8e50		b1 30		lda ($30),y			lda 	(codePtr),y
.8e52		18		clc				clc
.8e53		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8e55		85 37		sta $37				sta 	zTemp0+1
.8e57		c8		iny				iny 								; LSB
.8e58		b1 30		lda ($30),y			lda 	(codePtr),y
.8e5a		85 36		sta $36				sta 	zTemp0
.8e5c		c8		iny				iny 								; character after variable call.
.8e5d		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8e5e		a0 07		ldy #$07			ldy 	#7
.8e60		91 36		sta ($36),y			sta 	(zTemp0),y
.8e62		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8e64		a0 02		ldy #$02			ldy 	#2
.8e66		91 36		sta ($36),y			sta 	(zTemp0),y
.8e68		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8e6a						_PSCopy:
.8e6a		b5 30		lda $30,x			lda 	safePtr,x
.8e6c		c8		iny				iny
.8e6d		91 36		sta ($36),y			sta 	(zTemp0),y
.8e6f		e8		inx				inx
.8e70		e0 04		cpx #$04			cpx 	#4
.8e72		d0 f6		bne $8e6a			bne 	_PSCopy
.8e74						_PSNext:
.8e74		18		clc				clc
.8e75		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e77		65 30		adc $30				adc 	codePtr
.8e79		85 30		sta $30				sta 	codePtr
.8e7b		90 02		bcc $8e7f			bcc 	_CREExit
.8e7d		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e7f						_CREExit:
.8e7f		80 ba		bra $8e3b			bra 	_PSLoop
.8e81						_PSExit:
.8e81		60		rts				rts
.8e82						_PSSyntax:
.8e82		4c 0c a0	jmp $a00c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8e85						ScanForward:
.8e85		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8e87		86 37		stx $37				stx 	zTemp0+1
.8e89		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8e8b						_ScanLoop:
.8e8b		b1 30		lda ($30),y			lda 	(codePtr),y
.8e8d		c8		iny				iny
.8e8e		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8e90		d0 0e		bne $8ea0			bne 	_ScanGoNext
.8e92		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8e94		f0 04		beq $8e9a			beq 	_ScanMatch
.8e96		c5 37		cmp $37				cmp 	zTemp0+1
.8e98		d0 06		bne $8ea0			bne 	_ScanGoNext
.8e9a						_ScanMatch:
.8e9a		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8e9c		d0 01		bne $8e9f			bne 	_ScanNotEndEOL
.8e9e		88		dey				dey
.8e9f						_ScanNotEndEOL:
.8e9f		60		rts				rts
.8ea0						_ScanGoNext:
.8ea0		20 a5 8e	jsr $8ea5			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8ea3		80 e6		bra $8e8b			bra 	_ScanLoop
.8ea5						ScanForwardOne:
.8ea5		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8ea7		90 3e		bcc $8ee7			bcc 	_SFWExit
.8ea9		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.8eab		90 18		bcc $8ec5			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.8ead		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.8eaf		b0 2f		bcs $8ee0			bcs 	_ScanSkipData
.8eb1		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8eb3		90 32		bcc $8ee7			bcc 	_SFWExit 					; if not, ordinary keywords.
.8eb5		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.8eb7		b0 2e		bcs $8ee7			bcs 	_SFWExit
.8eb9		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ebb		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ebd		b0 28		bcs $8ee7			bcs 	_SFWExit
.8ebf		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8ec1		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8ec3		80 22		bra $8ee7			bra 	_SFWExit
.8ec5						_ScanSkipOne:
.8ec5		c8		iny				iny 								; consume the extra one.
.8ec6		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8ec8		d0 1d		bne $8ee7			bne 	_SFWExit
.8eca		18		clc				clc
.8ecb		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ecd		65 30		adc $30				adc 	codePtr
.8ecf		85 30		sta $30				sta 	codePtr
.8ed1		90 02		bcc $8ed5			bcc 	_CREExit
.8ed3		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ed5						_CREExit:
.8ed5		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ed7		b2 30		lda ($30)			lda 	(codePtr)
.8ed9		d0 0c		bne $8ee7			bne 	_SFWExit 					; if not zero, more to scan
.8edb		a9 13		lda #$13		lda	#19
.8edd		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.8ee0						_ScanSkipData:
.8ee0		88		dey				dey 								; point at data token
.8ee1		c8		iny				iny 								; point to offset
.8ee2		98		tya				tya 								; A = offset position
.8ee3		38		sec				sec 								; add size +1 hence SEC
.8ee4		71 30		adc ($30),y			adc 	(codePtr),y
.8ee6		a8		tay				tay 								; make current position.
.8ee7						_SFWExit:
.8ee7		60		rts				rts
.8ee8						ScanGetCurrentLineStep:
.8ee8		64 38		stz $38				stz 	zTemp1
.8eea		a0 03		ldy #$03			ldy 	#3
.8eec						_SGCLSLoop:
.8eec		b1 30		lda ($30),y			lda 	(codePtr),y
.8eee		c8		iny				iny
.8eef		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ef1		f0 05		beq $8ef8			beq 	_SGCLSExit
.8ef3		20 a5 8e	jsr $8ea5			jsr 	ScanForwardOne
.8ef6		80 f4		bra $8eec			bra 	_SGCLSLoop
.8ef8						_SGCLSExit:
.8ef8		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.8efa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8efb						Command_WHILE:
.8efb		5a		phy				phy 								; save position of the test
.8efc		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.8efe		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber
.8f01		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; check if zero
.8f04		f0 0e		beq $8f14			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.8f06		98		tya				tya 								; position *after* test.
.8f07		7a		ply				ply 								; restore position before test, at WHILE
.8f08		88		dey				dey 								; so we execute the WHILE command again.
.8f09		48		pha				pha 								; push after test on the stack
.8f0a		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8f0c		20 5c af	jsr $af5c			jsr 	StackOpen
.8f0f		20 a1 af	jsr $afa1			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.8f12		7a		ply				ply 								; restore the position *after* the test
.8f13		60		rts				rts
.8f14						_WHExitLoop:
.8f14		68		pla				pla 								; throw post loop position
.8f15		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.8f17		aa		tax				tax
.8f18		20 85 8e	jsr $8e85			jsr 	ScanForward
.8f1b		60		rts				rts
.8f1c						Command_WEND:
.8f1c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.8f1e		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.8f20		20 89 af	jsr $af89			jsr 	StackCheckFrame
.8f23		20 b2 af	jsr $afb2			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.8f26		20 7b af	jsr $af7b			jsr 	StackClose		 			; erase the frame
.8f29		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8f2a						CheckRightBracket:
.8f2a		b1 30		lda ($30),y			lda 	(codePtr),y
.8f2c		c8		iny				iny
.8f2d		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8f2f		d0 0f		bne $8f40			bne 	CNAFail
.8f31		60		rts				rts
.8f32						CheckComma:
.8f32		b1 30		lda ($30),y			lda 	(codePtr),y
.8f34		c8		iny				iny
.8f35		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8f37		d0 07		bne $8f40			bne 	CNAFail
.8f39		60		rts				rts
.8f3a						CheckNextA:
.8f3a		d1 30		cmp ($30),y			cmp 	(codePtr),y
.8f3c		d0 02		bne $8f40			bne 	CNAFail
.8f3e		c8		iny				iny 								; skip character
.8f3f		60		rts				rts 								; and exit
.8f40						CNAFail:
.8f40		4c 0c a0	jmp $a00c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8f43						ErrorHandler:
.8f43		a8		tay				tay 								; find the error text
.8f44		f0 49		beq $8f8f			beq 	_EHEnd
.8f46		a2 00		ldx #$00			ldx 	#0
.8f48		a9 25		lda #$25			lda 	#((ErrorText) & $FF)
.8f4a		85 36		sta $36				sta 	0+zTemp0
.8f4c		a9 a0		lda #$a0			lda 	#((ErrorText) >> 8)
.8f4e		85 37		sta $37				sta 	1+zTemp0
.8f50						_EHFind:
.8f50		88		dey				dey 								; keep looking through text
.8f51		f0 0e		beq $8f61			beq 	_EHFound
.8f53						_EHFindZero:
.8f53		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8f55		e6 36		inc $36				inc 	zTemp0
.8f57		d0 02		bne $8f5b			bne 	_EHFNoCarry
.8f59		e6 37		inc $37				inc 	zTemp0+1
.8f5b						_EHFNoCarry:
.8f5b		c9 00		cmp #$00			cmp 	#0
.8f5d		d0 f4		bne $8f53			bne 	_EHFindZero
.8f5f		80 ef		bra $8f50			bra 	_EHFind
.8f61						_EHFound:
.8f61		a5 36		lda $36				lda 	zTemp0 						; print message
.8f63		a6 37		ldx $37				ldx 	zTemp0+1
.8f65		20 9c 8f	jsr $8f9c			jsr 	PrintStringXA
.8f68		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.8f6a		b1 30		lda ($30),y			lda 	(codePtr),y
.8f6c		d0 05		bne $8f73			bne 	_EHAtMsg
.8f6e		c8		iny				iny
.8f6f		b1 30		lda ($30),y			lda 	(codePtr),y
.8f71		f0 17		beq $8f8a			beq 	_EHCREnd
.8f73						_EHAtMsg:
.8f73		a2 8f		ldx #$8f			ldx 	#_AtMsg >> 8 				; print " at "
.8f75		a9 92		lda #$92			lda 	#_AtMsg & $FF
.8f77		20 9c 8f	jsr $8f9c			jsr 	PrintStringXA
.8f7a		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8f7c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f7e		48		pha				pha
.8f7f		c8		iny				iny
.8f80		b1 30		lda ($30),y			lda 	(codePtr),y
.8f82		aa		tax				tax
.8f83		68		pla				pla
.8f84		20 b2 93	jsr $93b2			jsr 	ConvertInt16 				; convert XA to string
.8f87		20 9c 8f	jsr $8f9c			jsr 	PrintStringXA 				; and print it.
.8f8a						_EHCREnd:
.8f8a		a9 0d		lda #$0d			lda 	#13 						; new line
.8f8c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f8f						_EHEnd:
.8f8f		4c f4 83	jmp $83f4			jmp 	WarmStart
>8f92		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8f9a		20 00
.8f9c						PrintStringXA:
.8f9c		5a		phy				phy
.8f9d		86 37		stx $37				stx 	zTemp0+1
.8f9f		85 36		sta $36				sta 	zTemp0
.8fa1		a0 00		ldy #$00			ldy 	#0
.8fa3						_PSXALoop:
.8fa3		b1 36		lda ($36),y			lda 	(zTemp0),y
.8fa5		f0 06		beq $8fad			beq 	_PSXAExit
.8fa7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8faa		c8		iny				iny
.8fab		80 f6		bra $8fa3			bra 	_PSXALoop
.8fad						_PSXAExit:
.8fad		7a		ply				ply
.8fae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8faf						UnaryTrue:
.8faf		fa		plx				plx
.8fb0						ReturnTrue:
.8fb0		a9 01		lda #$01			lda 	#1  						; set to 1
.8fb2		20 90 9e	jsr $9e90			jsr 	NSMSetByte
.8fb5		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8fb7		95 50		sta $50,x			sta 	NSStatus,x
.8fb9		60		rts				rts
.8fba						UnaryFalse:
.8fba		fa		plx				plx
.8fbb						ReturnFalse:
.8fbb		4c 8e 9e	jmp $9e8e			jmp 	NSMSetZero 					; set it all to zero
.8fbe						BinaryCompareEqual:
.8fbe		fa		plx				plx
.8fbf		20 fa 8f	jsr $8ffa			jsr 	CompareBaseCode
.8fc2		c9 00		cmp #$00			cmp 	#0
.8fc4		f0 ea		beq $8fb0			beq 	ReturnTrue
.8fc6		80 f3		bra $8fbb			bra 	ReturnFalse
.8fc8						BinaryCompareLess:
.8fc8		fa		plx				plx
.8fc9		20 fa 8f	jsr $8ffa			jsr 	CompareBaseCode
.8fcc		c9 ff		cmp #$ff			cmp 	#$FF
.8fce		f0 e0		beq $8fb0			beq 	ReturnTrue
.8fd0		80 e9		bra $8fbb			bra 	ReturnFalse
.8fd2						BinaryCompareGreater:
.8fd2		fa		plx				plx
.8fd3		20 fa 8f	jsr $8ffa			jsr 	CompareBaseCode
.8fd6		c9 01		cmp #$01			cmp 	#1
.8fd8		f0 d6		beq $8fb0			beq 	ReturnTrue
.8fda		80 df		bra $8fbb			bra 	ReturnFalse
.8fdc						BinaryCompareNotEqual:
.8fdc		fa		plx				plx
.8fdd		20 fa 8f	jsr $8ffa			jsr 	CompareBaseCode
.8fe0		c9 00		cmp #$00			cmp 	#0
.8fe2		d0 cc		bne $8fb0			bne 	ReturnTrue
.8fe4		80 d5		bra $8fbb			bra 	ReturnFalse
.8fe6						BinaryCompareLessEqual:
.8fe6		fa		plx				plx
.8fe7		20 fa 8f	jsr $8ffa			jsr 	CompareBaseCode
.8fea		c9 01		cmp #$01			cmp 	#1
.8fec		d0 c2		bne $8fb0			bne 	ReturnTrue
.8fee		80 cb		bra $8fbb			bra 	ReturnFalse
.8ff0						BinaryCompareGreaterEqual:
.8ff0		fa		plx				plx
.8ff1		20 fa 8f	jsr $8ffa			jsr 	CompareBaseCode
.8ff4		c9 ff		cmp #$ff			cmp 	#$FF
.8ff6		d0 b8		bne $8fb0			bne 	ReturnTrue
.8ff8		80 c1		bra $8fbb			bra 	ReturnFalse
.8ffa						CompareBaseCode:
.8ffa		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; make both values if references.
.8ffd		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.8fff		15 51		ora $51,x			ora 	NSStatus+1,x
.9001		29 10		and #$10			and 	#NSTString
.9003		d0 37		bne $903c			bne 	_CBCString 					; if so do string code, which will check if both.
.9005		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9007		15 79		ora $79,x			ora 	NSExponent+1,x
.9009		d0 34		bne $903f			bne 	_CBCFloat
.900b		b5 50		lda $50,x			lda 	NSStatus,x
.900d		15 51		ora $51,x			ora 	NSStatus+1,x
.900f		29 08		and #$08			and 	#NSTFloat
.9011		d0 2c		bne $903f			bne 	_CBCFloat
.9013		20 42 90	jsr $9042			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9016		e8		inx				inx
.9017		20 42 90	jsr $9042			jsr 	CompareFixMinusZero
.901a		ca		dex				dex
.901b		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.901d		55 51		eor $51,x			eor 	NSStatus+1,x
.901f		10 0a		bpl $902b			bpl 	_CDCSameSign
.9021		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9023		30 14		bmi $9039			bmi 	_CBCLess 					; return $FF
.9025						_CBCGreater:
.9025		a9 01		lda #$01			lda 	#1
.9027		60		rts				rts
.9028						_CBCEqual:
.9028		a9 00		lda #$00			lda 	#0
.902a		60		rts				rts
.902b						_CDCSameSign:
.902b		20 57 92	jsr $9257			jsr 	SubTopTwoStack 				; unsigned subtract
.902e		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; or the mantissa together
.9031		f0 f5		beq $9028			beq 	_CBCEqual 					; -0 == 0
.9033		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9035		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9037		10 ec		bpl $9025			bpl 	_CBCGreater
.9039						_CBCLess:
.9039		a9 ff		lda #$ff			lda 	#$FF
.903b		60		rts				rts
.903c						_CBCString:
.903c		4c c8 91	jmp $91c8			jmp 	CompareStrings
.903f						_CBCFloat:
.903f		4c 12 95	jmp $9512			jmp 	CompareFloat
.9042						CompareFixMinusZero:
.9042		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero
.9045		d0 02		bne $9049			bne 	_CFXMZNotZero
.9047		74 50		stz $50,x			stz 	NSStatus,x
.9049						_CFXMZNotZero:
.9049		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.904a						StringConcat:
.904a		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.904c		35 51		and $51,x			and 	NSStatus+1,x
.904e		29 18		and #$18			and 	#NSBTypeMask
.9050		c9 10		cmp #$10			cmp 	#NSTString
.9052		d0 50		bne $90a4			bne		_SCType
.9054		64 38		stz $38				stz 	zTemp1 						; counting total length
.9056		e8		inx				inx
.9057		20 75 90	jsr $9075			jsr 	_SCSetupZ0 					; setup for second
.905a		20 7e 90	jsr $907e			jsr 	_SCLengthZ0 				; length for second
.905d		ca		dex				dex
.905e		20 75 90	jsr $9075			jsr 	_SCSetupZ0 					; setup for first
.9061		20 7e 90	jsr $907e			jsr 	_SCLengthZ0 				; length for first
.9064		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9066		20 4c b0	jsr $b04c			jsr 	StringTempAllocate
.9069		20 95 90	jsr $9095			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.906c		e8		inx				inx
.906d		20 75 90	jsr $9075			jsr 	_SCSetupZ0 					; copy second out
.9070		20 95 90	jsr $9095			jsr 	_SCCopy
.9073		ca		dex				dex
.9074		60		rts				rts
.9075						_SCSetupZ0:
.9075		b5 58		lda $58,x			lda 	NSMantissa0,x
.9077		85 36		sta $36				sta 	zTemp0
.9079		b5 60		lda $60,x			lda 	NSMantissa1,x
.907b		85 37		sta $37				sta 	zTemp0+1
.907d		60		rts				rts
.907e						_SCLengthZ0:
.907e		5a		phy				phy
.907f		a0 00		ldy #$00			ldy 	#0
.9081						_SCLenLoop:
.9081		b1 36		lda ($36),y			lda 	(zTemp0),y
.9083		f0 0e		beq $9093			beq 	_SCLExit
.9085		c8		iny				iny
.9086		e6 38		inc $38				inc 	zTemp1
.9088		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.908a		c9 fd		cmp #$fd			cmp 	#253
.908c		d0 f3		bne $9081			bne		_SCLenLoop
.908e		a9 09		lda #$09		lda	#9
.9090		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.9093						_SCLExit:
.9093		7a		ply				ply
.9094		60		rts				rts
.9095						_SCCopy:
.9095		5a		phy				phy
.9096		a0 00		ldy #$00			ldy 	#0
.9098						_SCCopyLoop:
.9098		b1 36		lda ($36),y			lda 	(zTemp0),y
.909a		f0 06		beq $90a2			beq 	_SCCExit
.909c		20 85 b0	jsr $b085			jsr 	StringTempWrite
.909f		c8		iny				iny
.90a0		80 f6		bra $9098			bra 	_SCCopyLoop
.90a2						_SCCExit:
.90a2		7a		ply				ply
.90a3		60		rts				rts
.90a4						_SCType:
.90a4		4c 16 a0	jmp $a016			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.90a7						IntegerDivide:
.90a7		fa		plx				plx
.90a8		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.90aa		15 51		ora $51,x			ora 	NSStatus+1,x
.90ac		0a		asl a				asl 	a 							; shift reference bit into sign bit
.90ad		0a		asl a				asl 	a
.90ae		10 05		bpl $90b5			bpl 	_NotRef
.90b0		48		pha				pha
.90b1		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90b4		68		pla				pla
.90b5						_NotRef:
.90b5		0a		asl a				asl 	a
.90b6		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90b8		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90ba		15 79		ora $79,x			ora 	NSExponent+1,x
.90bc		f0 03		beq $90c1			beq 	_IntegerCode 				; if clear, then we have two integers
.90be		4c 16 a0	jmp $a016			jmp 	TypeError 					; anything else, type mismatch.
.90c1						_IntegerCode:
.90c1		20 db 90	jsr $90db			jsr 	CheckDivideZero 			; do div zero check
.90c4		20 0d 91	jsr $910d			jsr 	Int32Divide 				; do the division
.90c7		20 be 91	jsr $91be			jsr 	CalculateSign 				; calculate result sign
.90ca						NSMCopyPlusTwoToZero:
.90ca		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.90cc		95 58		sta $58,x			sta 	NSMantissa0,x
.90ce		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.90d0		95 60		sta $60,x			sta 	NSMantissa1,x
.90d2		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.90d4		95 68		sta $68,x			sta 	NSMantissa2,x
.90d6		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.90d8		95 70		sta $70,x			sta 	NSMantissa3,x
.90da		60		rts				rts
.90db						CheckDivideZero:
.90db		e8		inx				inx
.90dc		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero
.90df		f0 02		beq $90e3			beq 	_CDVError
.90e1		ca		dex				dex
.90e2		60		rts				rts
.90e3						_CDVError:
.90e3		a9 03		lda #$03		lda	#3
.90e5		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.90e8						IntegerModulus:
.90e8		fa		plx				plx
.90e9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.90eb		15 51		ora $51,x			ora 	NSStatus+1,x
.90ed		0a		asl a				asl 	a 							; shift reference bit into sign bit
.90ee		0a		asl a				asl 	a
.90ef		10 05		bpl $90f6			bpl 	_NotRef
.90f1		48		pha				pha
.90f2		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90f5		68		pla				pla
.90f6						_NotRef:
.90f6		0a		asl a				asl 	a
.90f7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90f9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90fb		15 79		ora $79,x			ora 	NSExponent+1,x
.90fd		f0 03		beq $9102			beq 	_IntegerCode 				; if clear, then we have two integers
.90ff		4c 16 a0	jmp $a016			jmp 	TypeError 					; anything else, type mismatch.
.9102						_IntegerCode:
.9102						IntegerModulusNoCheck:
.9102		20 db 90	jsr $90db			jsr 	CheckDivideZero 			; do div zero check
.9105		20 0d 91	jsr $910d			jsr 	Int32Divide 				; do the division
.9108		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.910a		56 50		lsr $50,x			lsr 	NSStatus,x
.910c		60		rts				rts
.910d						Int32Divide:
.910d		48		pha				pha 								; save AXY
.910e		5a		phy				phy
.910f		20 71 9e	jsr $9e71			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9112		20 8a 9e	jsr $9e8a			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9115		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9117						_I32DivideLoop:
.9117		e8		inx				inx
.9118		e8		inx				inx
.9119		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.911c		ca		dex				dex
.911d		ca		dex				dex
.911e		20 9e 9e	jsr $9e9e			jsr 	NSMRotateLeft
.9121		20 4c 91	jsr $914c			jsr 	DivideCheckSubtract 		; check if subtract possible
.9124		90 02		bcc $9128			bcc 	_I32DivideNoCarryIn
.9126		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9128						_I32DivideNoCarryIn:
.9128		88		dey				dey 								; loop round till division completed.
.9129		d0 ec		bne $9117			bne 	_I32DivideLoop
.912b		7a		ply				ply 								; restore AXY and exit
.912c		68		pla				pla
.912d		60		rts				rts
.912e						Int32ShiftDivide:
.912e		48		pha				pha 								; save AY
.912f		5a		phy				phy
.9130		e8		inx				inx 								; clear S[X+2]
.9131		e8		inx				inx
.9132		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero
.9135		ca		dex				dex
.9136		ca		dex				dex
.9137		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9139						_I32SDLoop:
.9139		20 4c 91	jsr $914c			jsr 	DivideCheckSubtract 		; check if subtract possible
.913c		e8		inx				inx
.913d		e8		inx				inx
.913e		20 9e 9e	jsr $9e9e			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9141		ca		dex				dex
.9142		ca		dex				dex
.9143		20 9e 9e	jsr $9e9e			jsr 	NSMRotateLeft
.9146		88		dey				dey 	 							; do 31 times
.9147		d0 f0		bne $9139			bne 	_I32SDLoop
.9149		7a		ply				ply 								; restore AY and exit
.914a		68		pla				pla
.914b		60		rts				rts
.914c						DivideCheckSubtract:
.914c		20 57 92	jsr $9257			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.914f		b0 04		bcs $9155			bcs 	_DCSExit 					; if carry set, then could do, exit
.9151		20 3d 92	jsr $923d			jsr 	AddTopTwoStack 				; add it back in
.9154		18		clc				clc 								; and return False
.9155						_DCSExit:
.9155		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9156						MulInteger:
.9156		fa		plx				plx
.9157		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9159		15 51		ora $51,x			ora 	NSStatus+1,x
.915b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.915c		0a		asl a				asl 	a
.915d		10 05		bpl $9164			bpl 	_NotRef
.915f		48		pha				pha
.9160		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9163		68		pla				pla
.9164						_NotRef:
.9164		0a		asl a				asl 	a 							; put MSB of type into A:7
.9165		30 09		bmi $9170			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9167		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9169		15 79		ora $79,x			ora 	NSExponent+1,x
.916b		f0 06		beq $9173			beq 	_IntegerCode 				; if clear, then we have two integers
.916d		4c d4 95	jmp $95d4			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9170						_StringData:
.9170		4c 20 a0	jmp $a020			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9173						_IntegerCode:
.9173		20 80 91	jsr $9180			jsr 	MultiplyShort
.9176		c9 00		cmp #$00			cmp 	#0
.9178		f0 05		beq $917f			beq 	_MIExit
.917a		a9 04		lda #$04		lda	#4
.917c		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.917f						_MIExit:
.917f		60		rts				rts
.9180						MultiplyShort:
.9180		5a		phy				phy 								; save Y
.9181		20 71 9e	jsr $9e71			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9184		20 8a 9e	jsr $9e8a			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9187		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9189						_I32MLoop:
.9189		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.918b		15 62		ora $62,x			ora 	NSMantissa1+2,x
.918d		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.918f		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9191		f0 25		beq $91b8			beq 	_I32MExit 					; exit if zero
.9193		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9195		29 01		and #$01			and 	#1
.9197		f0 0d		beq $91a6			beq 	_I32MNoAdd
.9199		20 3d 92	jsr $923d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.919c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.919e		10 06		bpl $91a6			bpl 	_I32MNoAdd
.91a0						_I32ShiftRight:
.91a0		20 a7 9e	jsr $9ea7			jsr 	NSMShiftRight 				; shift S[X] right
.91a3		c8		iny				iny 								; increment shift count
.91a4		80 09		bra $91af			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.91a6						_I32MNoAdd:
.91a6		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.91a8		70 f6		bvs $91a0			bvs 	_I32ShiftRight 				; instead.
.91aa		e8		inx				inx
.91ab		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.91ae		ca		dex				dex
.91af						_I32MShiftUpper:
.91af		e8		inx				inx 								; shift S[X+2] right
.91b0		e8		inx				inx
.91b1		20 a7 9e	jsr $9ea7			jsr 	NSMShiftRight
.91b4		ca		dex				dex
.91b5		ca		dex				dex
.91b6		80 d1		bra $9189			bra 	_I32MLoop 					; try again.
.91b8						_I32MExit:
.91b8		20 be 91	jsr $91be			jsr 	CalculateSign
.91bb		98		tya				tya 								; shift in A
.91bc		7a		ply				ply 								; restore Y and exit
.91bd		60		rts				rts
.91be						CalculateSign:
.91be		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.91c0		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.91c2		55 51		eor $51,x			eor 	NSStatus+1,x
.91c4		0a		asl a				asl 	a 							; shift bit 7 into carry
.91c5		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.91c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.91c8						CompareStrings:
.91c8		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.91ca		35 51		and $51,x			and 	NSStatus+1,x
.91cc		29 10		and #$10			and 	#NSBIsString
.91ce		f0 28		beq $91f8			beq 	_CSTypeError
.91d0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.91d2		85 36		sta $36				sta 	zTemp0
.91d4		b5 60		lda $60,x			lda 	NSMantissa1,x
.91d6		85 37		sta $37				sta 	zTemp0+1
.91d8		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.91da		85 38		sta $38				sta 	zTemp1
.91dc		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.91de		85 39		sta $39				sta 	zTemp1+1
.91e0		5a		phy				phy 								; save Y so we can access strings
.91e1		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.91e3						_CSLoop:
.91e3		c8		iny				iny
.91e4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.91e6		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.91e8		d0 06		bne $91f0			bne 	_CSDifferent
.91ea		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.91ec		d0 f5		bne $91e3			bne 	_CSLoop 					; still comparing
.91ee						_CSExit:
.91ee		7a		ply				ply 								; reached end, return zero in A from EOS
.91ef		60		rts				rts
.91f0						_CSDifferent:
.91f0		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.91f2		90 fa		bcc $91ee			bcc		_CSExit
.91f4		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.91f6		80 f6		bra $91ee			bra 	_CSExit
.91f8						_CSTypeError:
.91f8		4c 16 a0	jmp $a016			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.91fb						ShiftLeft:
.91fb		38		sec				sec 								; common code, carry determines which way.
.91fc		80 01		bra $91ff			bra 	ShiftMain
.91fe						ShiftRight:
.91fe		18		clc				clc
.91ff						ShiftMain:
.91ff		fa		plx				plx 								; restore X
.9200		08		php				php 								; save direction
.9201		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9203		15 51		ora $51,x			ora 	NSStatus+1,x
.9205		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9206		0a		asl a				asl 	a
.9207		10 05		bpl $920e			bpl 	_NotRef
.9209		48		pha				pha
.920a		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.920d		68		pla				pla
.920e						_NotRef:
.920e		0a		asl a				asl 	a
.920f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9211		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9213		15 79		ora $79,x			ora 	NSExponent+1,x
.9215		f0 03		beq $921a			beq 	_IntegerCode 				; if clear, then we have two integers
.9217		4c 16 a0	jmp $a016			jmp 	TypeError 					; anything else, type mismatch.
.921a						_IntegerCode:
.921a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.921c		29 e0		and #$e0			and 	#$E0
.921e		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9220		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9222		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9224		d0 12		bne $9238			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9226						_SMLoop:
.9226		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9228		30 11		bmi $923b			bmi 	_SMExit 					; exit if done.
.922a		28		plp				plp 								; restore direction setting
.922b		08		php				php
.922c		90 05		bcc $9233			bcc 	_SMRight
.922e		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; shift left if CS
.9231		80 f3		bra $9226			bra 	_SMLoop
.9233						_SMRight:
.9233		20 a7 9e	jsr $9ea7			jsr 	NSMShiftRight 				; shift right if CC
.9236		80 ee		bra $9226			bra 	_SMLoop
.9238						_SMExit0:
.9238		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero 					; return zero.
.923b						_SMExit:
.923b		28		plp				plp 								; throw direction
.923c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.923d						AddTopTwoStack:
.923d		18		clc				clc
.923e		b5 58		lda $58,x			lda		NSMantissa0,x
.9240		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9242		95 58		sta $58,x			sta 	NSMantissa0,x
.9244		b5 60		lda $60,x			lda		NSMantissa1,x
.9246		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9248		95 60		sta $60,x			sta 	NSMantissa1,x
.924a		b5 68		lda $68,x			lda		NSMantissa2,x
.924c		75 69		adc $69,x			adc 		NSMantissa2+1,x
.924e		95 68		sta $68,x			sta 	NSMantissa2,x
.9250		b5 70		lda $70,x			lda		NSMantissa3,x
.9252		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9254		95 70		sta $70,x			sta 	NSMantissa3,x
.9256		60		rts				rts
.9257						SubTopTwoStack:
.9257		38		sec				sec
.9258		b5 58		lda $58,x			lda		NSMantissa0,x
.925a		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.925c		95 58		sta $58,x			sta 	NSMantissa0,x
.925e		b5 60		lda $60,x			lda		NSMantissa1,x
.9260		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9262		95 60		sta $60,x			sta 	NSMantissa1,x
.9264		b5 68		lda $68,x			lda		NSMantissa2,x
.9266		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9268		95 68		sta $68,x			sta 	NSMantissa2,x
.926a		b5 70		lda $70,x			lda		NSMantissa3,x
.926c		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.926e		95 70		sta $70,x			sta 	NSMantissa3,x
.9270		60		rts				rts
.9271						AddInteger:
.9271		fa		plx				plx
.9272		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9274		15 51		ora $51,x			ora 	NSStatus+1,x
.9276		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9277		0a		asl a				asl 	a
.9278		10 05		bpl $927f			bpl 	_NotRef
.927a		48		pha				pha
.927b		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.927e		68		pla				pla
.927f						_NotRef:
.927f		0a		asl a				asl 	a 							; put MSB of type into A:7
.9280		30 09		bmi $928b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9282		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9284		15 79		ora $79,x			ora 	NSExponent+1,x
.9286		f0 06		beq $928e			beq 	_IntegerCode 				; if clear, then we have two integers
.9288		4c 84 94	jmp $9484			jmp 	FloatingPointAdd 							; otherwise at least one float.
.928b						_StringData:
.928b		4c 4a 90	jmp $904a			jmp 	StringConcat							; at least one string - don't know both are strings.
.928e						_IntegerCode:
.928e						AddCode:
.928e		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9290		55 51		eor $51,x			eor 	NSStatus+1,x
.9292		10 a9		bpl $923d			bpl 	AddTopTwoStack
.9294		20 57 92	jsr $9257			jsr 	SubTopTwoStack 				; do a physical subtraction
.9297		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9299		10 07		bpl $92a2			bpl 	_AddExit
.929b		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.929d		95 50		sta $50,x			sta 	NSStatus,x
.929f		20 57 9e	jsr $9e57			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.92a2						_AddExit:
.92a2		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; check for -0
.92a5		d0 02		bne $92a9			bne 	_AddNonZero
.92a7		74 50		stz $50,x			stz 	NSStatus,x
.92a9						_AddNonZero:
.92a9		60		rts				rts
.92aa						SubInteger:
.92aa		fa		plx				plx
.92ab		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92ad		15 51		ora $51,x			ora 	NSStatus+1,x
.92af		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92b0		0a		asl a				asl 	a
.92b1		10 05		bpl $92b8			bpl 	_NotRef
.92b3		48		pha				pha
.92b4		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92b7		68		pla				pla
.92b8						_NotRef:
.92b8		0a		asl a				asl 	a 							; put MSB of type into A:7
.92b9		30 09		bmi $92c4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92bb		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92bd		15 79		ora $79,x			ora 	NSExponent+1,x
.92bf		f0 06		beq $92c7			beq 	_IntegerCode 				; if clear, then we have two integers
.92c1		4c 89 94	jmp $9489			jmp 	FloatingPointSub 							; otherwise at least one float.
.92c4						_StringData:
.92c4		4c 20 a0	jmp $a020			jmp 	NotDoneError							; at least one string - don't know both are strings.
.92c7						_IntegerCode:
.92c7		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.92c9		49 80		eor #$80			eor 	#$80
.92cb		95 51		sta $51,x			sta 	NSStatus+1,x
.92cd		80 bf		bra $928e			bra 	AddCode 					; and do the same code as add.
.92cf						AndInteger:
.92cf		fa		plx				plx
.92d0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92d2		15 51		ora $51,x			ora 	NSStatus+1,x
.92d4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92d5		0a		asl a				asl 	a
.92d6		10 05		bpl $92dd			bpl 	_NotRef
.92d8		48		pha				pha
.92d9		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92dc		68		pla				pla
.92dd						_NotRef:
.92dd		0a		asl a				asl 	a
.92de		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92e0		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92e2		15 79		ora $79,x			ora 	NSExponent+1,x
.92e4		f0 03		beq $92e9			beq 	_IntegerCode 				; if clear, then we have two integers
.92e6		4c 16 a0	jmp $a016			jmp 	TypeError 					; anything else, type mismatch.
.92e9						_IntegerCode:
.92e9		b5 58		lda $58,x			lda		NSMantissa0,x
.92eb		35 59		and $59,x			and 		NSMantissa0+1,x
.92ed		95 58		sta $58,x			sta 	NSMantissa0,x
.92ef		b5 60		lda $60,x			lda		NSMantissa1,x
.92f1		35 61		and $61,x			and 		NSMantissa1+1,x
.92f3		95 60		sta $60,x			sta 	NSMantissa1,x
.92f5		b5 68		lda $68,x			lda		NSMantissa2,x
.92f7		35 69		and $69,x			and 		NSMantissa2+1,x
.92f9		95 68		sta $68,x			sta 	NSMantissa2,x
.92fb		b5 70		lda $70,x			lda		NSMantissa3,x
.92fd		35 71		and $71,x			and 		NSMantissa3+1,x
.92ff		95 70		sta $70,x			sta 	NSMantissa3,x
.9301		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9303		60		rts				rts
.9304						OraInteger:
.9304		fa		plx				plx
.9305		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9307		15 51		ora $51,x			ora 	NSStatus+1,x
.9309		0a		asl a				asl 	a 							; shift reference bit into sign bit
.930a		0a		asl a				asl 	a
.930b		10 05		bpl $9312			bpl 	_NotRef
.930d		48		pha				pha
.930e		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9311		68		pla				pla
.9312						_NotRef:
.9312		0a		asl a				asl 	a
.9313		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9315		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9317		15 79		ora $79,x			ora 	NSExponent+1,x
.9319		f0 03		beq $931e			beq 	_IntegerCode 				; if clear, then we have two integers
.931b		4c 16 a0	jmp $a016			jmp 	TypeError 					; anything else, type mismatch.
.931e						_IntegerCode:
.931e		b5 58		lda $58,x			lda		NSMantissa0,x
.9320		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9322		95 58		sta $58,x			sta 	NSMantissa0,x
.9324		b5 60		lda $60,x			lda		NSMantissa1,x
.9326		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9328		95 60		sta $60,x			sta 	NSMantissa1,x
.932a		b5 68		lda $68,x			lda		NSMantissa2,x
.932c		15 69		ora $69,x			ora 		NSMantissa2+1,x
.932e		95 68		sta $68,x			sta 	NSMantissa2,x
.9330		b5 70		lda $70,x			lda		NSMantissa3,x
.9332		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9334		95 70		sta $70,x			sta 	NSMantissa3,x
.9336		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9338		60		rts				rts
.9339						EorInteger:
.9339		fa		plx				plx
.933a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.933c		15 51		ora $51,x			ora 	NSStatus+1,x
.933e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.933f		0a		asl a				asl 	a
.9340		10 05		bpl $9347			bpl 	_NotRef
.9342		48		pha				pha
.9343		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9346		68		pla				pla
.9347						_NotRef:
.9347		0a		asl a				asl 	a
.9348		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.934a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.934c		15 79		ora $79,x			ora 	NSExponent+1,x
.934e		f0 03		beq $9353			beq 	_IntegerCode 				; if clear, then we have two integers
.9350		4c 16 a0	jmp $a016			jmp 	TypeError 					; anything else, type mismatch.
.9353						_IntegerCode:
.9353		b5 58		lda $58,x			lda		NSMantissa0,x
.9355		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9357		95 58		sta $58,x			sta 	NSMantissa0,x
.9359		b5 60		lda $60,x			lda		NSMantissa1,x
.935b		55 61		eor $61,x			eor 		NSMantissa1+1,x
.935d		95 60		sta $60,x			sta 	NSMantissa1,x
.935f		b5 68		lda $68,x			lda		NSMantissa2,x
.9361		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9363		95 68		sta $68,x			sta 	NSMantissa2,x
.9365		b5 70		lda $70,x			lda		NSMantissa3,x
.9367		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9369		95 70		sta $70,x			sta 	NSMantissa3,x
.936b		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.936d		60		rts				rts
.936e						WordIndirect:
.936e		fa		plx				plx
.936f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9371		15 51		ora $51,x			ora 	NSStatus+1,x
.9373		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9374		0a		asl a				asl 	a
.9375		10 05		bpl $937c			bpl 	_NotRef
.9377		48		pha				pha
.9378		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.937b		68		pla				pla
.937c						_NotRef:
.937c		0a		asl a				asl 	a
.937d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.937f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9381		15 79		ora $79,x			ora 	NSExponent+1,x
.9383		f0 03		beq $9388			beq 	_IntegerCode 				; if clear, then we have two integers
.9385		4c 16 a0	jmp $a016			jmp 	TypeError 					; anything else, type mismatch.
.9388						_IntegerCode:
.9388		20 8e 92	jsr $928e			jsr 	AddCode 					; add the two values
.938b		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.938d		95 50		sta $50,x			sta 	NSStatus,x
.938f		60		rts				rts
.9390						ByteIndirect:
.9390		fa		plx				plx
.9391		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9393		15 51		ora $51,x			ora 	NSStatus+1,x
.9395		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9396		0a		asl a				asl 	a
.9397		10 05		bpl $939e			bpl 	_NotRef
.9399		48		pha				pha
.939a		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.939d		68		pla				pla
.939e						_NotRef:
.939e		0a		asl a				asl 	a
.939f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93a1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93a3		15 79		ora $79,x			ora 	NSExponent+1,x
.93a5		f0 03		beq $93aa			beq 	_IntegerCode 				; if clear, then we have two integers
.93a7		4c 16 a0	jmp $a016			jmp 	TypeError 					; anything else, type mismatch.
.93aa						_IntegerCode:
.93aa		20 8e 92	jsr $928e			jsr 	AddCode 					; add the two values
.93ad		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.93af		95 50		sta $50,x			sta 	NSStatus,x
.93b1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.93b2						ConvertInt16:
.93b2		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.93b4		86 60		stx $60				stx 	NSMantissa1
.93b6		64 68		stz $68				stz 	NSMantissa2
.93b8		64 70		stz $70				stz 	NSMantissa3
.93ba		64 50		stz $50				stz 	NSStatus 					; positive integer
.93bc		a2 00		ldx #$00			ldx 	#0 							; stack level
.93be		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.93c0		80 00		bra $93c2			bra 	ConvertInt32
.93c2						ConvertInt32:
.93c2		5a		phy				phy
.93c3		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.93c5		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.93c7		10 08		bpl $93d1			bpl 	_CI32NotNeg
.93c9		48		pha				pha
.93ca		a9 2d		lda #$2d			lda 	#'-'
.93cc		99 27 06	sta $0627,y			sta 	NumberBuffer,y
.93cf		c8		iny				iny
.93d0		68		pla				pla
.93d1						_CI32NotNeg:
.93d1		20 df 93	jsr $93df			jsr 	_CI32DivideConvert 			; recursive conversion
.93d4		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.93d6		99 27 06	sta $0627,y			sta 	NumberBuffer,y
.93d9		7a		ply				ply
.93da		a2 06		ldx #$06			ldx 	#NumberBuffer >> 8 			; return address in XA
.93dc		a9 27		lda #$27			lda 	#NumberBuffer & $FF
.93de		60		rts				rts
.93df						_CI32DivideConvert:
.93df		e8		inx				inx 								; write to next slot up
.93e0		20 90 9e	jsr $9e90			jsr 	NSMSetByte 		 			; write the base out.
.93e3		ca		dex				dex
.93e4		20 0d 91	jsr $910d			jsr 	Int32Divide 				; divide
.93e7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.93e9		48		pha				pha
.93ea		20 ca 90	jsr $90ca			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.93ed		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; is it zero ?
.93f0		f0 05		beq $93f7			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.93f2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93f4		20 df 93	jsr $93df			jsr 	_CI32DivideConvert 			; and recusrively call.
.93f7						_CI32NoRecurse:
.93f7		68		pla				pla 								; remainder
.93f8		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.93fa		90 02		bcc $93fe			bcc 	_CI32NotHex
.93fc		69 26		adc #$26			adc 	#6+32
.93fe						_CI32NotHex:
.93fe		69 30		adc #$30			adc 	#48
.9400		99 27 06	sta $0627,y			sta 	NumberBuffer,y 				; write out and exit
.9403		c8		iny				iny
.9404		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9405						PrecedenceLevel:
>9405		04					.byte	 4	; $00 <<
>9406		02					.byte	 2	; $01 <=
>9407		02					.byte	 2	; $02 <>
>9408		00					.byte	 0	; $03 !!3
>9409		00					.byte	 0	; $04 ><
>940a		02					.byte	 2	; $05 >=
>940b		04					.byte	 4	; $06 >>
>940c		00					.byte	 0	; $07 !!7
>940d		00					.byte	 0	; $08 !!8
>940e		00					.byte	 0	; $09 !!9
>940f		00					.byte	 0	; $0a !!10
>9410		00					.byte	 0	; $0b !!11
>9411		00					.byte	 0	; $0c !!12
>9412		00					.byte	 0	; $0d !!13
>9413		00					.byte	 0	; $0e !!14
>9414		00					.byte	 0	; $0f !!15
>9415		00					.byte	 0	; $10 @
>9416		00					.byte	 0	; $11 !!17
>9417		00					.byte	 0	; $12 !!18
>9418		00					.byte	 0	; $13 [
>9419		04					.byte	 4	; $14 \
>941a		00					.byte	 0	; $15 ]
>941b		01					.byte	 1	; $16 ^
>941c		00					.byte	 0	; $17 _
>941d		00					.byte	 0	; $18 `
>941e		00					.byte	 0	; $19 !!25
>941f		00					.byte	 0	; $1a !!26
>9420		00					.byte	 0	; $1b {
>9421		01					.byte	 1	; $1c |
>9422		00					.byte	 0	; $1d }
>9423		00					.byte	 0	; $1e ~
>9424		00					.byte	 0	; $1f [7m<7F>[m
>9425		00					.byte	 0	; $20
>9426		05					.byte	 5	; $21 !
>9427		00					.byte	 0	; $22 "
>9428		00					.byte	 0	; $23 #
>9429		05					.byte	 5	; $24 $
>942a		04					.byte	 4	; $25 %
>942b		01					.byte	 1	; $26 &
>942c		00					.byte	 0	; $27 '
>942d		00					.byte	 0	; $28 (
>942e		00					.byte	 0	; $29 )
>942f		04					.byte	 4	; $2a *
>9430		03					.byte	 3	; $2b +
>9431		00					.byte	 0	; $2c ,
>9432		03					.byte	 3	; $2d -
>9433		00					.byte	 0	; $2e .
>9434		04					.byte	 4	; $2f /
>9435		00					.byte	 0	; $30 0
>9436		00					.byte	 0	; $31 1
>9437		00					.byte	 0	; $32 2
>9438		00					.byte	 0	; $33 3
>9439		00					.byte	 0	; $34 4
>943a		00					.byte	 0	; $35 5
>943b		00					.byte	 0	; $36 6
>943c		00					.byte	 0	; $37 7
>943d		00					.byte	 0	; $38 8
>943e		00					.byte	 0	; $39 9
>943f		00					.byte	 0	; $3a :
>9440		00					.byte	 0	; $3b ;
>9441		02					.byte	 2	; $3c <
>9442		02					.byte	 2	; $3d =
>9443		02					.byte	 2	; $3e >
>9444		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9445						EvaluateExpressionAt0:
.9445		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9447						EvaluateExpression:
.9447		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9449						EvaluateExpressionAtPrecedence:
.9449		48		pha				pha 								; save precedence level
.944a		20 91 98	jsr $9891			jsr 	EvaluateTerm 				; evaluate term into level X.
.944d		68		pla				pla 								; restore precedence level.
.944e						_EXPRLoop:
.944e		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9450		b1 30		lda ($30),y			lda 	(codePtr),y
.9452		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9454		b0 25		bcs $947b			bcs 	_EXPRExit
.9456		da		phx				phx 								; read the operator precedence
.9457		aa		tax				tax
.9458		bd 05 94	lda $9405,x			lda 	PrecedenceLevel,x
.945b		fa		plx				plx
.945c		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.945e		f0 1b		beq $947b			beq 	_EXPRExit
.9460		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9462		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9464		c5 37		cmp $37				cmp 	zTemp0+1
.9466		b0 13		bcs $947b			bcs		_EXPRExit 					; if current >= operator exit
.9468		48		pha				pha 								; save current precedence.
.9469		b1 30		lda ($30),y			lda 	(codePtr),y
.946b		c8		iny				iny
.946c		48		pha				pha
.946d		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.946f		e8		inx				inx 								; work out the right hand side.
.9470		20 49 94	jsr $9449			jsr 	EvaluateExpressionAtPrecedence
.9473		ca		dex				dex
.9474		68		pla				pla 								; get operator, call the code.
.9475		20 7e 94	jsr $947e			jsr 	_EXPRCaller
.9478		68		pla				pla 								; restore precedence level
.9479		80 d3		bra $944e			bra 	_EXPRLoop 					; and go round.
.947b						_EXPRExit:
.947b		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.947d		60		rts				rts
.947e						_EXPRCaller:
.947e		da		phx				phx 								; save on stack, first thing is to restore it
.947f		0a		asl a				asl 	a 							; double so can use vectors into X
.9480		aa		tax				tax
.9481		7c 46 8c	jmp ($8c46,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9484						FloatingPointAdd:
.9484		20 fa 95	jsr $95fa			jsr 	FloatPrepare 				; prepare for floats
.9487		80 09		bra $9492			bra 	FloatAdd
.9489						FloatingPointSub:
.9489		20 fa 95	jsr $95fa			jsr 	FloatPrepare 				; prepare for floats
.948c						FloatSubtract:
.948c		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.948e		49 80		eor #$80			eor 	#$80
.9490		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9492						FloatAdd:
.9492		48		pha				pha
.9493		5a		phy				phy
.9494		20 09 96	jsr $9609			jsr 	NSNormalise 				; normalise S[X]
.9497		f0 51		beq $94ea			beq 	_FAReturn1
.9499		e8		inx				inx 								; normalise S[X+1]
.949a		20 09 96	jsr $9609			jsr 	NSNormalise
.949d		ca		dex				dex
.949e		c9 00		cmp #$00			cmp 	#0
.94a0		f0 60		beq $9502			beq 	_FAExit 					; if so, just return A
.94a2		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.94a4		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.94a6		f0 18		beq $94c0			beq 	_FAExponentsEqual
.94a8		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.94aa		a8		tay				tay
.94ab		38		sec				sec 								; do a signed comparison of the exponents.
.94ac		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.94ae		50 02		bvc $94b2			bvc 	_FANoSignedChange
.94b0		49 80		eor #$80			eor 	#$80
.94b2						_FANoSignedChange:
.94b2		29 80		and #$80			and 	#$80
.94b4		10 02		bpl $94b8			bpl 	_FAHaveMax
.94b6		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.94b8						_FAHaveMax:
.94b8		20 05 95	jsr $9505			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.94bb		e8		inx				inx
.94bc		20 05 95	jsr $9505			jsr 	_FAShiftToExponent
.94bf		ca		dex				dex
.94c0						_FAExponentsEqual:
.94c0		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.94c2		55 51		eor $51,x			eor 	NSStatus+1,x
.94c4		30 0e		bmi $94d4			bmi 	_FADifferentSigns
.94c6		20 3d 92	jsr $923d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.94c9		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.94cb		10 35		bpl $9502			bpl 	_FAExit 					; if no, we are done.
.94cd		20 a7 9e	jsr $9ea7			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.94d0		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.94d2		80 2e		bra $9502			bra 	_FAExit
.94d4						_FADifferentSigns:
.94d4		20 57 92	jsr $9257			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.94d7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.94d9		10 06		bpl $94e1			bpl 	_FACheckZero 				; if no, check for -0
.94db		20 50 9e	jsr $9e50			jsr 	NSMNegate 					; netate result
.94de		20 57 9e	jsr $9e57			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.94e1						_FACheckZero:
.94e1		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero	 				; check for -0
.94e4		d0 1c		bne $9502			bne 	_FAExit
.94e6		74 50		stz $50,x			stz 	NSStatus,x
.94e8		80 18		bra $9502			bra 	_FAExit
.94ea						_FAReturn1:
.94ea		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.94ec		95 58		sta $58,x			sta 	NSMantissa0,x
.94ee		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.94f0		95 60		sta $60,x			sta 	NSMantissa1,x
.94f2		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.94f4		95 68		sta $68,x			sta 	NSMantissa2,x
.94f6		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.94f8		95 70		sta $70,x			sta 	NSMantissa3,x
.94fa		b5 79		lda $79,x			lda 	NSExponent+1,x
.94fc		95 78		sta $78,x			sta 	NSExponent,x
.94fe		b5 51		lda $51,x			lda 	NSStatus+1,x
.9500		95 50		sta $50,x			sta 	NSStatus,x
.9502						_FAExit:
.9502		7a		ply				ply
.9503		68		pla				pla
.9504		60		rts				rts
.9505						_FAShiftToExponent:
.9505						_FAShiftToExponent2:
.9505		98		tya				tya 								; compare Y to exponent
.9506		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9508		f0 07		beq $9511			beq 	_FASEExit 					; exit if so.
.950a		20 a7 9e	jsr $9ea7			jsr 	NSMShiftRight	 			; shift the mantissa right
.950d		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.950f		80 f4		bra $9505			bra 	_FAShiftToExponent2
.9511						_FASEExit:
.9511		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9512						CompareFloat:
.9512		20 8c 94	jsr $948c			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9515		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9517		29 f8		and #$f8			and 	#$F8
.9519		15 68		ora $68,x			ora 	NSMantissa2,x
.951b		15 70		ora $70,x			ora 	NSMantissa3,x
.951d		f0 08		beq $9527			beq 	_FCExit 					; zero, so approximately identical
.951f		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9521		34 50		bit $50,x			bit 	NSStatus,x
.9523		10 02		bpl $9527			bpl 	_FCExit
.9525						_FCNegative:
.9525		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9527						_FCExit:
.9527		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9528						FDivideCommand:
.9528		fa		plx				plx	 								; restore stack position
.9529		20 fa 95	jsr $95fa			jsr 	FloatPrepare 				; prepare for floats
.952c						FloatDivide:
.952c		48		pha				pha
.952d		e8		inx				inx
.952e		20 09 96	jsr $9609			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9531		ca		dex				dex
.9532		c9 00		cmp #$00			cmp 	#0
.9534		f0 1d		beq $9553			beq 	_FDZero
.9536		20 09 96	jsr $9609			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9539		f0 16		beq $9551			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.953b		20 2e 91	jsr $912e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.953e		20 ca 90	jsr $90ca			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9541		20 09 96	jsr $9609			jsr		NSNormalise 				; renormalise
.9544		20 be 91	jsr $91be			jsr 	CalculateSign 				; calculate result sign
.9547		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9549		38		sec				sec
.954a		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.954c		38		sec				sec
.954d		e9 1e		sbc #$1e			sbc 	#30
.954f		95 78		sta $78,x			sta 	NSExponent,x
.9551						_FDExit:
.9551		68		pla				pla
.9552		60		rts				rts
.9553						_FDZero:
.9553		a9 03		lda #$03		lda	#3
.9555		4c 43 8f	jmp $8f43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9558						FloatFractionalPart:
.9558		5a		phy				phy
.9559		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.955b		29 7f		and #$7f			and 	#$7F
.955d		95 50		sta $50,x			sta 	NSStatus,x
.955f		20 09 96	jsr $9609			jsr 	NSNormalise
.9562		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9564		38		sec				sec
.9565		e9 e0		sbc #$e0			sbc 	#$E0
.9567		90 29		bcc $9592			bcc 	_FFPExit 					; already fractional
.9569		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.956b		b0 22		bcs $958f			bcs 	_FFPZero
.956d		a8		tay				tay 								; put count to do in Y
.956e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9570		20 94 95	jsr $9594			jsr 	_FFPPartial
.9573		95 70		sta $70,x			sta 	NSMantissa3,x
.9575		b5 68		lda $68,x			lda 	NSMantissa2,x
.9577		20 94 95	jsr $9594			jsr 	_FFPPartial
.957a		95 68		sta $68,x			sta 	NSMantissa2,x
.957c		b5 60		lda $60,x			lda 	NSMantissa1,x
.957e		20 94 95	jsr $9594			jsr 	_FFPPartial
.9581		95 60		sta $60,x			sta 	NSMantissa1,x
.9583		b5 58		lda $58,x			lda 	NSMantissa0,x
.9585		20 94 95	jsr $9594			jsr 	_FFPPartial
.9588		95 58		sta $58,x			sta 	NSMantissa0,x
.958a		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; zeroed check.
.958d		d0 03		bne $9592			bne 	_FFPExit
.958f						_FFPZero:
.958f		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero
.9592						_FFPExit:
.9592		7a		ply				ply
.9593		60		rts				rts
.9594						_FFPPartial:
.9594		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9596		f0 17		beq $95af			beq 	_FFFPPExit
.9598		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.959a		b0 0c		bcs $95a8			bcs 	_FFFPPWholeByte
.959c		5a		phy				phy
.959d						_FFFPPLeft:
.959d		0a		asl a				asl 	a
.959e		88		dey				dey
.959f		d0 fc		bne $959d			bne 	_FFFPPLeft
.95a1		7a		ply				ply
.95a2						_FFFPPRight:
.95a2		4a		lsr a				lsr 	a
.95a3		88		dey				dey
.95a4		d0 fc		bne $95a2			bne 	_FFFPPRight
.95a6		80 07		bra $95af			bra 	_FFFPPExit
.95a8						_FFFPPWholeByte:
.95a8		98		tya				tya 								; subtract 8 from count
.95a9		38		sec				sec
.95aa		e9 08		sbc #$08			sbc 	#8
.95ac		a8		tay				tay
.95ad		a9 00		lda #$00			lda 	#0 							; and clear all
.95af						_FFFPPExit:
.95af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.95b0						FloatIntegerPart:
.95b0		48		pha				pha
.95b1		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.95b3		f0 1d		beq $95d2			beq 	_FIPExit 					; if so do nothing
.95b5		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; is it zero ?
.95b8		f0 15		beq $95cf			beq 	_FIPZero 					; if so return zero.
.95ba		20 09 96	jsr $9609			jsr 	NSNormalise 				; normalise
.95bd		f0 10		beq $95cf			beq 	_FIPZero 					; normalised to zero, exit zero
.95bf						_FIPShift:
.95bf		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.95c1		10 07		bpl $95ca			bpl 	_FIPCheckZero
.95c3		20 a7 9e	jsr $9ea7			jsr 	NSMShiftRight 				; shift mantissa right
.95c6		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.95c8		80 f5		bra $95bf			bra 	_FIPShift
.95ca						_FIPCheckZero:
.95ca		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; avoid -0 problem
.95cd		d0 03		bne $95d2			bne 	_FIPExit 					; set to zero if mantissa zero.
.95cf						_FIPZero:
.95cf		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero
.95d2						_FIPExit:
.95d2		68		pla				pla
.95d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.95d4						FloatingPointMultiply:
.95d4		20 fa 95	jsr $95fa			jsr 	FloatPrepare 				; prepare for floats
.95d7						FloatMultiply:
.95d7		48		pha				pha
.95d8		20 09 96	jsr $9609			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.95db		f0 18		beq $95f5			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.95dd		e8		inx				inx
.95de		20 09 96	jsr $9609			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.95e1		ca		dex				dex
.95e2		c9 00		cmp #$00			cmp 	#0
.95e4		f0 0c		beq $95f2			beq 	_FDSetZero
.95e6		20 80 91	jsr $9180			jsr 	MultiplyShort 				; calculate the result.
.95e9		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.95eb		18		clc				clc
.95ec		75 79		adc $79,x			adc 	NSExponent+1,x
.95ee		95 78		sta $78,x			sta 	NSExponent,x
.95f0		80 03		bra $95f5			bra 	_FDExit
.95f2						_FDSetZero:
.95f2		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero 					; return 0
.95f5						_FDExit:
.95f5		20 09 96	jsr $9609			jsr 	NSNormalise 				; normalise the result
.95f8		68		pla				pla
.95f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.95fa						FloatPrepare:
.95fa		20 05 97	jsr $9705			jsr 	DereferenceTopTwo 			; dereference the top two values
.95fd		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.95ff		15 51		ora $51,x			ora 	NSStatus+1,x
.9601		29 10		and #$10			and 	#NSBIsString
.9603		d0 01		bne $9606			bne 	_FDType
.9605		60		rts				rts
.9606						_FDType:
.9606		4c 16 a0	jmp $a016			jmp 	TypeError
.9609						NSNormalise:
.9609		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.960b		29 80		and #$80			and 	#$80
.960d		09 08		ora #$08			ora 	#NSTFloat
.960f		95 50		sta $50,x			sta 	NSStatus,x
.9611		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; if zero exit
.9614		d0 07		bne $961d			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9616		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9618		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.961a		a9 00		lda #$00			lda 	#0 							; set Z flag
.961c		60		rts				rts
.961d						_NSNormaliseOptimise:
.961d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.961f		d0 19		bne $963a			bne 	_NSNormaliseLoop
.9621		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9623		30 15		bmi $963a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9625		95 70		sta $70,x			sta 	NSMantissa3,x
.9627		b5 60		lda $60,x			lda 	NSMantissa1,x
.9629		95 68		sta $68,x			sta 	NSMantissa2,x
.962b		b5 58		lda $58,x			lda 	NSMantissa0,x
.962d		95 60		sta $60,x			sta 	NSMantissa1,x
.962f		74 58		stz $58,x			stz 	NSMantissa0,x
.9631		b5 78		lda $78,x			lda 	NSExponent,x
.9633		38		sec				sec
.9634		e9 08		sbc #$08			sbc 	#8
.9636		95 78		sta $78,x			sta 	NSExponent,x
.9638		80 e3		bra $961d			bra 	_NSNormaliseOptimise
.963a						_NSNormaliseLoop:
.963a		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.963c		70 07		bvs $9645			bvs 	_NSNExit 					; exit if so with Z flag clear
.963e		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; shift mantissa left
.9641		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9643		80 f5		bra $963a			bra 	_NSNormaliseLoop
.9645						_NSNExit:
.9645		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9647		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9648						AssignNumber:
.9648		5a		phy				phy
.9649		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.964b		85 36		sta $36				sta 	zTemp0
.964d		b5 60		lda $60,x			lda 	NSMantissa1,x
.964f		85 37		sta $37				sta 	zTemp0+1
.9651		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9653		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9655		95 50		sta $50,x			sta 	NSStatus,x
.9657		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9659		c9 08		cmp #$08			cmp 	#NSTFloat
.965b		f0 24		beq $9681			beq 	_ANFloat
.965d		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.965f		f0 03		beq $9664			beq		_ANNotFloat
.9661		4c 11 a0	jmp $a011			jmp 	RangeError					; if it is, report an error.
.9664						_ANNotFloat:
.9664		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9666		29 03		and #$03			and 	#3
.9668		d0 05		bne $966f			bne 	_ANByteWord
.966a		20 8c 96	jsr $968c			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.966d		80 1b		bra $968a			bra 	_ANExit
.966f						_ANByteWord:
.966f		48		pha				pha 								; save count
.9670		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9672		92 36		sta ($36)			sta 	(zTemp0)
.9674		68		pla				pla
.9675		c9 01		cmp #$01			cmp	 	#1
.9677		f0 11		beq $968a			beq 	_ANExit
.9679		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.967b		a0 01		ldy #$01			ldy 	#1
.967d		91 36		sta ($36),y			sta 	(zTemp0),y
.967f		80 09		bra $968a			bra 	_ANExit
.9681						_ANFloat:
.9681		20 8c 96	jsr $968c			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9684		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9686		a0 04		ldy #$04			ldy 	#4
.9688		91 36		sta ($36),y			sta 	(zTemp0),y
.968a						_ANExit:
.968a		7a		ply				ply
.968b		60		rts				rts
.968c						_ANCopy4PackSign:
.968c		a0 03		ldy #$03			ldy 	#3
.968e		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9690		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9692		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9694		91 36		sta ($36),y			sta 	(zTemp0),y
.9696		88		dey				dey
.9697		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9699		91 36		sta ($36),y			sta 	(zTemp0),y
.969b		88		dey				dey
.969c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.969e		91 36		sta ($36),y			sta 	(zTemp0),y
.96a0		88		dey				dey
.96a1		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.96a3		91 36		sta ($36),y			sta 	(zTemp0),y
.96a5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.96a6						AssignString:
.96a6		5a		phy				phy
.96a7		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.96a9		85 38		sta $38				sta 	zTemp1
.96ab		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96ad		85 39		sta $39				sta 	zTemp1+1
.96af		b5 58		lda $58,x			lda 	NSMantissa0,x
.96b1		85 36		sta $36				sta 	zTemp0
.96b3		b5 60		lda $60,x			lda 	NSMantissa1,x
.96b5		85 37		sta $37				sta 	zTemp0+1
.96b7		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.96b9		b1 36		lda ($36),y			lda 	(zTemp0),y
.96bb		f0 23		beq $96e0			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.96bd		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.96be		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.96c0		e9 02		sbc #$02			sbc 	#2
.96c2		85 3c		sta $3c				sta 	zsTemp
.96c4		a0 01		ldy #$01			ldy 	#1
.96c6		b1 36		lda ($36),y			lda 	(zTemp0),y
.96c8		e9 00		sbc #$00			sbc 	#0
.96ca		85 3d		sta $3d				sta 	zsTemp+1
.96cc		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.96ce						_ASGetLength:
.96ce		c8		iny				iny
.96cf		b1 38		lda ($38),y			lda 	(zTemp1),y
.96d1		d0 fb		bne $96ce			bne 	_ASGetLength
.96d3		98		tya				tya 								; is this length <= current length
.96d4		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.96d6		90 1e		bcc $96f6			bcc 	_ASCopyString
.96d8		f0 1c		beq $96f6			beq 	_ASCopyString
.96da		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.96dc		a0 01		ldy #$01			ldy 	#1
.96de		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96e0						_ASNewStringRequired:
.96e0		e8		inx				inx 								; concrete the new string.
.96e1		20 cf af	jsr $afcf			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.96e4		ca		dex				dex
.96e5		18		clc				clc
.96e6		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.96e8		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.96ea		92 36		sta ($36)			sta 	(zTemp0)
.96ec		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96ee		69 00		adc #$00			adc 	#0
.96f0		a0 01		ldy #$01			ldy 	#1
.96f2		91 36		sta ($36),y			sta 	(zTemp0),y
.96f4		80 0d		bra $9703			bra 	_ASExit
.96f6						_ASCopyString:
.96f6		a0 00		ldy #$00			ldy 	#0
.96f8						_ASCopyLoop:
.96f8		b1 38		lda ($38),y			lda 	(zTemp1),y
.96fa		c8		iny				iny
.96fb		c8		iny				iny
.96fc		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96fe		88		dey				dey
.96ff		c9 00		cmp #$00			cmp 	#0
.9701		d0 f5		bne $96f8			bne 	_ASCopyLoop
.9703						_ASExit:
.9703		7a		ply				ply
.9704		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9705						DereferenceTopTwo:
.9705		e8		inx				inx
.9706		20 0a 97	jsr $970a			jsr 	Dereference 				; deref x+1
.9709		ca		dex				dex  								; falls through to deref x
.970a						Dereference:
.970a		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.970c		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.970e		f0 48		beq $9758			beq 	_DRFExit 					; not a reference, so exit.
.9710		5a		phy				phy
.9711		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9713		85 36		sta $36				sta 	zTemp0
.9715		b5 60		lda $60,x			lda 	NSMantissa1,x
.9717		85 37		sta $37				sta 	zTemp0+1
.9719		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.971b		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.971d		95 58		sta $58,x			sta 	NSMantissa0,x
.971f		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9721		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9723		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9725		f0 0e		beq $9735			beq 	_DRFDereferenceTwo
.9727		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9729		f0 2f		beq $975a			beq 	_DRFFull
.972b		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.972d		29 03		and #$03			and 	#3
.972f		f0 29		beq $975a			beq 	_DRFFull 					; the whole word
.9731		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9733		f0 06		beq $973b			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9735						_DRFDereferenceTwo:
.9735		a0 01		ldy #$01			ldy 	#1
.9737		b1 36		lda ($36),y			lda 	(zTemp0),y
.9739		95 60		sta $60,x			sta 	NSMantissa1,x
.973b						_DRFClear23:
.973b		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.973d		74 70		stz $70,x			stz 	NSMantissa3,x
.973f		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9741		29 18		and #$18			and 	#NSBTypeMask
.9743		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9745		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9747		d0 0e		bne $9757			bne 	_DRFNotString
.9749		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.974b		15 60		ora $60,x			ora 	NSMantissa1,x
.974d		d0 08		bne $9757			bne 	_DRFNotString
.974f		a9 59		lda #$59			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9751		95 58		sta $58,x			sta 	NSMantissa0,X
.9753		a9 97		lda #$97			lda 	#_DRFNullString >> 8
.9755		95 60		sta $60,x			sta 	NSMantissa1,X
.9757						_DRFNotString
.9757		7a		ply				ply 								; restore Y and exit
.9758						_DRFExit:
.9758		60		rts				rts
.9759						_DRFNullString:
>9759		00						.byte 	0
.975a						_DRFFull:
.975a		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.975c		b1 36		lda ($36),y			lda 	(zTemp0),y
.975e		95 60		sta $60,x			sta 	NSMantissa1,x
.9760		c8		iny				iny
.9761		b1 36		lda ($36),y			lda 	(zTemp0),y
.9763		95 68		sta $68,x			sta 	NSMantissa2,x
.9765		c8		iny				iny
.9766		b1 36		lda ($36),y			lda 	(zTemp0),y
.9768		95 70		sta $70,x			sta 	NSMantissa3,x
.976a		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.976c		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.976e		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9770		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9772		f0 05		beq $9779			beq 	_DRFNoExponent
.9774		c8		iny				iny 								; if not, read the exponent as well.
.9775		b1 36		lda ($36),y			lda 	(zTemp0),y
.9777		95 78		sta $78,x			sta 	NSExponent,x
.9779						_DRFNoExponent:
.9779		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.977b		10 0a		bpl $9787			bpl 	_DRFExit2 					; if not, then exit.
.977d		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.977f		95 70		sta $70,x			sta 	NSMantissa3,x
.9781		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9783		09 80		ora #$80			ora 	#NSBIsNegative
.9785		95 50		sta $50,x			sta 	NSStatus,x
.9787						_DRFExit2:
.9787		7a		ply				ply
.9788		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9789						EncodeNumberStart:
.9789		38		sec				sec
.978a		80 01		bra $978d			bra 	EncodeNumberContinue+1
.978c						EncodeNumberContinue:
.978c		18		clc				clc
.978d						EncodeNumber:
.978d		08		php				php 								; save reset flag.
.978e		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9790		f0 12		beq $97a4			beq 	_ENIsOkay
.9792		c9 30		cmp #$30			cmp 	#"0"
.9794		90 04		bcc $979a			bcc 	_ENBadNumber
.9796		c9 3a		cmp #$3a			cmp 	#"9"+1
.9798		90 0a		bcc $97a4			bcc 	_ENIsOkay
.979a						_ENBadNumber:
.979a		28		plp				plp 								; throw saved reset
.979b		ad 05 04	lda $0405			lda 	EncodeState 				; if in decimal mode, construct final number
.979e		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.97a0		f0 7b		beq $981d			beq 	_ENConstructFinal
.97a2						_ENFail:
.97a2		18		clc				clc 								; not allowed
.97a3		60		rts				rts
.97a4						_ENIsOkay:
.97a4		28		plp				plp 								; are we restarting
.97a5		90 15		bcc $97bc			bcc 	_ENNoRestart
.97a7						_ENStartEncode:
.97a7		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.97a9		f0 0c		beq $97b7			beq 	_ENFirstDP
.97ab		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.97ad		20 90 9e	jsr $9e90			jsr 	NSMSetByte 					; in single byte mode.
.97b0		a9 01		lda #$01			lda 	#ESTA_Low
.97b2						_ENExitChange:
.97b2		8d 05 04	sta $0405			sta 	EncodeState 				; save new state
.97b5		38		sec				sec
.97b6		60		rts				rts
.97b7						_ENFirstDP:
.97b7		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero 					; clear integer part
.97ba		80 3c		bra $97f8			bra 	_ESTASwitchFloat			; go straight to float and exi
.97bc						_ENNoRestart:
.97bc		48		pha				pha 								; save digit or DP on stack.
.97bd		ad 05 04	lda $0405			lda 	EncodeState 				; get current state
.97c0		c9 01		cmp #$01			cmp 	#ESTA_Low
.97c2		f0 09		beq $97cd			beq  	_ESTALowState
.97c4		c9 02		cmp #$02			cmp 	#ESTA_High
.97c6		f0 26		beq $97ee			beq 	_ESTAHighState
.97c8		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.97ca		f0 38		beq $9804			beq 	_ESTADecimalState
>97cc		db						.byte 	$DB 						; causes a break in the emulator
.97cd						_ESTALowState:
.97cd		68		pla				pla 								; get value back
.97ce		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.97d0		f0 26		beq $97f8			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.97d2		29 0f		and #$0f			and 	#15 						; make digit
.97d4		8d 06 04	sta $0406			sta 	DigitTemp 					; save it.
.97d7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.97d9		0a		asl a				asl 	a
.97da		0a		asl a				asl 	a
.97db		75 58		adc $58,x			adc 	NSMantissa0,x
.97dd		0a		asl a				asl 	a
.97de		6d 06 04	adc $0406			adc 	DigitTemp
.97e1		95 58		sta $58,x			sta 	NSMantissa0,x
.97e3		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.97e5		90 05		bcc $97ec			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.97e7		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.97e9		8d 05 04	sta $0405			sta 	EncodeState
.97ec						_ESTANoSwitch:
.97ec		38		sec				sec
.97ed		60		rts				rts
.97ee						_ESTAHighState:
.97ee		68		pla				pla 								; get value back
.97ef		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.97f1		f0 05		beq $97f8			beq 	_ESTASwitchFloat
.97f3		20 51 98	jsr $9851			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.97f6		38		sec				sec
.97f7		60		rts				rts
.97f8						_ESTASwitchFloat:
.97f8		9c 07 04	stz $0407			stz 	DecimalCount 				; reset the count of digits - we divide by 10^n at the end.
.97fb		e8		inx				inx 								; zero the decimal additive.
.97fc		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero
.97ff		ca		dex				dex
.9800		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9802		80 ae		bra $97b2			bra 	_ENExitChange
.9804						_ESTADecimalState:
.9804		68		pla				pla 								; digit.
.9805		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9807		f0 99		beq $97a2			beq 	_ENFail
.9809		e8		inx				inx 								; put digit into fractional part of X+1
.980a		20 51 98	jsr $9851			jsr 	ESTAShiftDigitIntoMantissa
.980d		ca		dex				dex
.980e		ee 07 04	inc $0407			inc 	DecimalCount 				; bump the count of decimals
.9811		ad 07 04	lda $0407			lda 	DecimalCount 				; too many decimal digits.
.9814		c9 0b		cmp #$0b			cmp 	#11
.9816		f0 02		beq $981a			beq 	_ESTADSFail
.9818		38		sec				sec
.9819		60		rts				rts
.981a						_ESTADSFail:
.981a		4c 11 a0	jmp $a011			jmp 	RangeError
.981d						_ENConstructFinal:
.981d		ad 07 04	lda $0407			lda 	DecimalCount 				; get decimal count
.9820		f0 2d		beq $984f			beq 	_ENCFExit 					; no decimals
.9822		5a		phy				phy
.9823		0a		asl a				asl 	a 							; x 4 and CLC
.9824		0a		asl a				asl 	a
.9825		6d 07 04	adc $0407			adc 	DecimalCount
.9828		a8		tay				tay
.9829		b9 d0 9f	lda $9fd0,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.982c		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.982e		b9 d1 9f	lda $9fd1,y			lda 	DecimalScalarTable-5+1,y
.9831		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9833		b9 d2 9f	lda $9fd2,y			lda 	DecimalScalarTable-5+2,y
.9836		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9838		b9 d3 9f	lda $9fd3,y			lda 	DecimalScalarTable-5+3,y
.983b		95 72		sta $72,x			sta 	NSMantissa3+2,x
.983d		b9 d4 9f	lda $9fd4,y			lda 	DecimalScalarTable-5+4,y
.9840		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9842		a9 08		lda #$08			lda 	#NSTFloat
.9844		95 52		sta $52,x			sta 	NSStatus+2,x
.9846		7a		ply				ply
.9847		e8		inx				inx 								; multiply decimal const by decimal scalar
.9848		20 d7 95	jsr $95d7			jsr 	FloatMultiply
.984b		ca		dex				dex
.984c		20 92 94	jsr $9492			jsr 	FloatAdd 					; add to integer part.
.984f						_ENCFExit:
.984f		18		clc				clc 								; reject the digit.
.9850		60		rts				rts
.9851						ESTAShiftDigitIntoMantissa:
.9851		29 0f		and #$0f			and 	#15 						; save digit
.9853		48		pha				pha
.9854		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9856		48		pha				pha
.9857		b5 68		lda $68,x			lda 	NSMantissa2,x
.9859		48		pha				pha
.985a		b5 60		lda $60,x			lda 	NSMantissa1,x
.985c		48		pha				pha
.985d		b5 58		lda $58,x			lda 	NSMantissa0,x
.985f		48		pha				pha
.9860		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; x 2
.9863		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; x 4
.9866		18		clc				clc 								; pop mantissa and add
.9867		68		pla				pla
.9868		75 58		adc $58,x			adc 	NSMantissa0,x
.986a		95 58		sta $58,x			sta 	NSMantissa0,x
.986c		68		pla				pla
.986d		75 60		adc $60,x			adc 	NSMantissa1,x
.986f		95 60		sta $60,x			sta 	NSMantissa1,x
.9871		68		pla				pla
.9872		75 68		adc $68,x			adc 	NSMantissa2,x
.9874		95 68		sta $68,x			sta 	NSMantissa2,x
.9876		68		pla				pla
.9877		75 70		adc $70,x			adc 	NSMantissa3,x
.9879		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.987b		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; x 10
.987e		68		pla				pla 								; add digit
.987f		18		clc				clc
.9880		75 58		adc $58,x			adc 	NSMantissa0,x
.9882		95 58		sta $58,x			sta 	NSMantissa0,x
.9884		90 0a		bcc $9890			bcc 	_ESTASDExit
.9886		f6 60		inc $60,x			inc 	NSMantissa1,x
.9888		d0 06		bne $9890			bne 	_ESTASDExit
.988a		f6 68		inc $68,x			inc 	NSMantissa2,x
.988c		d0 02		bne $9890			bne 	_ESTASDExit
.988e		f6 70		inc $70,x			inc 	NSMantissa3,x
.9890						_ESTASDExit:
.9890		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9891						EvaluateTerm:
.9891		b1 30		lda ($30),y			lda 	(codePtr),y
.9893		30 18		bmi $98ad			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9895		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9897		b0 6c		bcs $9905			bcs 	_ETVariable
.9899		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.989b		90 6b		bcc $9908			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.989d		c9 3a		cmp #$3a			cmp 	#'9'+1
.989f		b0 67		bcs $9908			bcs 	_ETPuncUnary
.98a1		20 89 97	jsr $9789			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.98a4						_ETNumber:
.98a4		c8		iny				iny 								; keep encoding until we have the numbers
.98a5		b1 30		lda ($30),y			lda 	(codePtr),y
.98a7		20 8c 97	jsr $978c			jsr 	EncodeNumberContinue
.98aa		b0 f8		bcs $98a4			bcs 	_ETNumber 					; go back if accepted.
.98ac		60		rts				rts
.98ad						_ETCheckUnary:
.98ad		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.98af		f0 3f		beq $98f0			beq 	_ETString
.98b1		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.98b3		f0 12		beq $98c7			beq 	_ETHexConstant
.98b5		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.98b7		90 0b		bcc $98c4			bcc 	_ETSyntaxError
.98b9		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.98bb		b0 07		bcs $98c4			bcs 	_ETSyntaxError
.98bd		da		phx				phx 								; push X on the stack
.98be		0a		asl a				asl 	a 							; put vector x 2 into X
.98bf		aa		tax				tax
.98c0		c8		iny				iny 								; consume unary function token
.98c1		7c c6 8c	jmp ($8cc6,x)			jmp 	(VectorSet0,x) 				; and do it.
.98c4						_ETSyntaxError:
.98c4		4c 0c a0	jmp $a00c			jmp 	SyntaxError
.98c7						_ETHexConstant:
.98c7		c8		iny				iny 								; skip #
.98c8		c8		iny				iny 								; skip count
.98c9		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero 					; clear result
.98cc						_ETHLoop:
.98cc		b1 30		lda ($30),y			lda 	(codePtr),y
.98ce		c8		iny				iny 								; and consume
.98cf		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.98d1		f0 1c		beq $98ef			beq 	_ETHExit
.98d3		48		pha				pha 								; save on stack.
.98d4		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; x 2
.98d7		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; x 4
.98da		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; x 8
.98dd		20 9d 9e	jsr $9e9d			jsr 	NSMShiftLeft 				; x 16
.98e0		68		pla				pla 								; ASCII
.98e1		c9 41		cmp #$41			cmp 	#'A'
.98e3		90 02		bcc $98e7			bcc 	_ETHNotChar
.98e5		e9 07		sbc #$07			sbc 	#7
.98e7						_ETHNotChar:
.98e7		29 0f		and #$0f			and 	#15 						; digit now
.98e9		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.98eb		95 58		sta $58,x			sta 	NSMantissa0,x
.98ed		80 dd		bra $98cc			bra 	_ETHLoop 					; go round.
.98ef						_ETHExit:
.98ef		60		rts				rts
.98f0						_ETString:
.98f0		c8		iny				iny 								; look at length
.98f1		b1 30		lda ($30),y			lda 	(codePtr),y
.98f3		48		pha				pha
.98f4		c8		iny				iny 								; first character
.98f5		20 f7 a5	jsr $a5f7			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.98f8		68		pla				pla 								; restore count and save
.98f9		85 36		sta $36				sta 	zTemp0
.98fb		98		tya				tya 								; add length to Y to skip it.
.98fc		18		clc				clc
.98fd		65 36		adc $36				adc 	zTemp0
.98ff		a8		tay				tay
.9900		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9902		95 50		sta $50,x			sta 	NSStatus,x
.9904		60		rts				rts
.9905						_ETVariable:
.9905		4c 5a 99	jmp $995a			jmp 	VariableHandler
.9908						_ETPuncUnary:
.9908		c8		iny				iny 								; consume the unary character
.9909		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.990b		f0 2b		beq $9938			beq 	_ETUnaryNegate
.990d		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.990f		f0 36		beq $9947			beq 	_ETDereference
.9911		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9913		f0 3e		beq $9953			beq 	_ETParenthesis
.9915		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9917		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9919		f0 06		beq $9921			beq 	_ETIndirection
.991b		e6 36		inc $36				inc 	zTemp0
.991d		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.991f		d0 a3		bne $98c4			bne 	_ETSyntaxError
.9921						_ETIndirection:
.9921		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9923		1a		inc a				inc 	a
.9924		48		pha				pha
.9925		20 91 98	jsr $9891			jsr 	EvaluateTerm				; evaluate the term
.9928		20 0a 97	jsr $970a			jsr 	Dereference 				; dereference it.
.992b		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.992d		d0 06		bne $9935			bne 	_ETTypeMismatch
.992f		68		pla				pla 								; indirection 1-2
.9930		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9932		95 50		sta $50,x			sta 	NSStatus,x
.9934		60		rts				rts
.9935						_ETTypeMismatch:
.9935		4c 16 a0	jmp $a016			jmp 	TypeError
.9938						_ETUnaryNegate:
.9938		20 91 98	jsr $9891			jsr 	EvaluateTerm				; evaluate the term
.993b		20 0a 97	jsr $970a			jsr 	Dereference 				; dereference it.
.993e		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9940		29 10		and #$10			and 	#NSTString
.9942		d0 f1		bne $9935			bne 	_ETTypeMismatch
.9944		4c 50 9e	jmp $9e50			jmp 	NSMNegate  					; just toggles the sign bit.
.9947						_ETDereference:
.9947		20 91 98	jsr $9891			jsr 	EvaluateTerm				; evaluate the term
.994a		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.994c		29 20		and #$20			and 	#NSBIsReference
.994e		f0 e5		beq $9935			beq 	_ETTypeMismatch
.9950		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9952		60		rts				rts
.9953						_ETParenthesis:
.9953		20 47 94	jsr $9447			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9956		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket 			; check for )
.9959		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.995a						VariableHandler:
.995a		b1 30		lda ($30),y			lda 	(codePtr),y
.995c		18		clc				clc
.995d		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.995f		85 37		sta $37				sta 	zTemp0+1
.9961		c8		iny				iny
.9962		b1 30		lda ($30),y			lda 	(codePtr),y
.9964		85 36		sta $36				sta 	zTemp0
.9966		c8		iny				iny
.9967		18		clc				clc									; copy variable address+3 to mantissa
.9968		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.996a		95 58		sta $58,x			sta 	NSMantissa0,x
.996c		a5 37		lda $37				lda 	zTemp0+1
.996e		69 00		adc #$00			adc 	#0
.9970		95 60		sta $60,x			sta 	NSMantissa1,x
.9972		74 68		stz $68,x			stz 	NSMantissa2,x
.9974		74 70		stz $70,x			stz 	NSMantissa3,x
.9976		74 78		stz $78,x			stz 	NSExponent,x
.9978		5a		phy				phy
.9979		a0 02		ldy #$02			ldy 	#2 							; read type
.997b		b1 36		lda ($36),y			lda 	(zTemp0),y
.997d		7a		ply				ply
.997e		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9980		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9982		95 50		sta $50,x			sta 	NSStatus,x
.9984		29 04		and #$04			and 	#NSBIsArray
.9986		d0 01		bne $9989			bne 	_VHArray
.9988		60		rts				rts
.9989						_VHArray:
.9989		e8		inx				inx
.998a		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get the 1st index.
.998d		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.998f		95 51		sta $51,x			sta 	NSStatus+1,x
.9991		b1 30		lda ($30),y			lda 	(codePtr),y
.9993		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9995		d0 06		bne $999d			bne 	_VHNoSecondIndex
.9997		c8		iny				iny 								; skip the comma
.9998		e8		inx				inx
.9999		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.999c		ca		dex				dex
.999d						_VHNoSecondIndex:
.999d		ca		dex				dex 								; set X back.
.999e		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket 			; and check the right bracket.
.99a1		5a		phy				phy 								; save position
.99a2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.99a4		85 3e		sta $3e				sta 	zaTemp
.99a6		b5 60		lda $60,x			lda 	NSMantissa1,x
.99a8		85 3f		sta $3f				sta 	zaTemp+1
.99aa		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.99ac		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99ae		f0 5d		beq $9a0d			beq 	_VHBadArray
.99b0		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.99b2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99b4		f0 02		beq $99b8			beq 	_VHHas2Mask
.99b6		a9 ff		lda #$ff			lda 	#$FF
.99b8						_VHHas2Mask:
.99b8		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.99ba		f0 4c		beq $9a08			beq 	_VHBadIndex
.99bc		0a		asl a				asl 	a 							; carry will be set if a second index
.99bd		90 08		bcc $99c7			bcc 	_VHCheckFirstIndex
.99bf		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.99c1		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99c3		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.99c5		90 41		bcc $9a08			bcc 	_VHBadIndex
.99c7						_VHCheckFirstIndex:
.99c7		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.99c9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99cb		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.99cd		90 39		bcc $9a08			bcc 	_VHBadIndex
.99cf		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.99d1		64 37		stz $37				stz 	zTemp0+1
.99d3		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.99d5		30 0e		bmi $99e5			bmi 	_VHNoMultiply
.99d7		da		phx				phx
.99d8		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.99da		48		pha				pha
.99db		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.99dd		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99df		1a		inc a				inc 	a 							; add 1 for zero base
.99e0		fa		plx				plx
.99e1		20 39 9e	jsr $9e39			jsr 	Multiply8x8 				; calculate -> Z0
.99e4		fa		plx				plx
.99e5						_VHNoMultiply:
.99e5		18		clc				clc
.99e6		a5 36		lda $36				lda 	zTemp0
.99e8		75 59		adc $59,x			adc 	NSMantissa0+1,x
.99ea		85 36		sta $36				sta 	zTemp0
.99ec		a5 37		lda $37				lda 	zTemp0+1
.99ee		69 00		adc #$00			adc 	#0
.99f0		85 37		sta $37				sta 	zTemp0+1
.99f2		b5 50		lda $50,x			lda 	NSStatus,x
.99f4		20 8d 85	jsr $858d			jsr 	ScaleByBaseType
.99f7		18		clc				clc
.99f8		b2 3e		lda ($3e)			lda 	(zaTemp)
.99fa		65 36		adc $36				adc 	zTemp0
.99fc		95 58		sta $58,x			sta 	NSMantissa0,x
.99fe		a0 01		ldy #$01			ldy 	#1
.9a00		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a02		65 37		adc $37				adc 	zTemp0+1
.9a04		95 60		sta $60,x			sta 	NSMantissa1,x
.9a06		7a		ply				ply 								; restore position
.9a07		60		rts				rts
.9a08						_VHBadIndex:
.9a08		a9 17		lda #$17		lda	#23
.9a0a		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.9a0d						_VHBadArray:
.9a0d		a9 18		lda #$18		lda	#24
.9a0f		4c 43 8f	jmp $8f43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9a12						AbsUnary:
.9a12		fa		plx				plx 								; restore stack pos
.9a13		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber 				; get a float or int
.9a16		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9a19		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9a1b		29 7f		and #$7f			and 	#$7F
.9a1d		95 50		sta $50,x			sta 	NSStatus,x
.9a1f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9a20						AllocUnary:
.9a20		fa		plx				plx 								; restore stack pos
.9a21		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger		; get bytes required.
.9a24		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9a27		da		phx				phx 								; save X/Y
.9a28		5a		phy				phy
.9a29		8a		txa				txa 								; copy X into Y
.9a2a		a8		tay				tay
.9a2b		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9a2e		aa		tax				tax
.9a2f		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9a32		20 3f 9a	jsr $9a3f			jsr 	AllocateXABytes 			; allocate memory
.9a35		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9a38		8a		txa				txa 	 							; typing is 16 bit integer.
.9a39		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9a3c		7a		ply				ply
.9a3d		fa		plx				plx
.9a3e		60		rts				rts
.9a3f						AllocateXABytes:
.9a3f		5a		phy				phy
.9a40		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9a43		84 36		sty $36				sty 	zTemp0
.9a45		5a		phy				phy
.9a46		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9a49		84 37		sty $37				sty 	zTemp0+1
.9a4b		5a		phy				phy
.9a4c		18		clc				clc 								; add to low memory pointer
.9a4d		6d 0c 04	adc $040c			adc 	lowMemPtr
.9a50		8d 0c 04	sta $040c			sta 	lowMemPtr
.9a53		8a		txa				txa
.9a54		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9a57		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9a5a		b0 2f		bcs $9a8b			bcs 	CISSMemory
.9a5c		20 7d 9a	jsr $9a7d			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9a5f						_ClearMemory:
.9a5f		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9a62		c5 36		cmp $36				cmp 	zTemp0
.9a64		d0 07		bne $9a6d			bne 	_CMClearNext
.9a66		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9a69		c5 37		cmp $37				cmp 	zTemp0+1
.9a6b		f0 0c		beq $9a79			beq 	_CMExit
.9a6d						_CMClearNext:
.9a6d		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9a6f		92 36		sta ($36)			sta 	(zTemp0)
.9a71		e6 36		inc $36				inc 	zTemp0
.9a73		d0 ea		bne $9a5f			bne 	_ClearMemory
.9a75		e6 37		inc $37				inc		zTemp0+1
.9a77		80 e6		bra $9a5f			bra 	_ClearMemory
.9a79						_CMExit:
.9a79		fa		plx				plx
.9a7a		68		pla				pla
.9a7b		7a		ply				ply
.9a7c		60		rts				rts
.9a7d						CheckIdentifierStringSpace:
.9a7d		48		pha				pha
.9a7e		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9a81		18		clc				clc
.9a82		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9a84		cd 0f 04	cmp $040f			cmp 	StringMemory+1 				; is it >= StringMemory
.9a87		b0 02		bcs $9a8b			bcs 	CISSMemory
.9a89		68		pla				pla
.9a8a		60		rts				rts
.9a8b						CISSMemory:
.9a8b		a9 06		lda #$06		lda	#6
.9a8d		4c 43 8f	jmp $8f43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9a90						AscUnary:
.9a90		fa		plx				plx 								; restore stack pos
.9a91		20 e6 9d	jsr $9de6			jsr 	EvaluateString 				; get a string
.9a94		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9a96		20 90 9e	jsr $9e90			jsr 	NSMSetByte 					; ASC("") will return zero.
.9a99		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9a9c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a9d						FracUnary:
.9a9d		fa		plx				plx 								; restore stack pos
.9a9e		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber 				; get a float or int
.9aa1		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9aa4		b5 50		lda $50,x			lda 	NSStatus,x
.9aa6		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9aa8		f0 04		beq $9aae			beq 	_IUZero
.9aaa		20 58 95	jsr $9558			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9aad		60		rts				rts
.9aae						_IUZero:
.9aae		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero
.9ab1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9ab2						IntUnary:
.9ab2		fa		plx				plx 								; restore stack pos
.9ab3		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber 				; get a float or int
.9ab6		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9ab9		b5 50		lda $50,x			lda 	NSStatus,x
.9abb		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9abd		f0 03		beq $9ac2			beq 	_IUExit
.9abf		20 b0 95	jsr $95b0			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9ac2						_IUExit:
.9ac2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9ac3						LenUnary:
.9ac3		fa		plx				plx 								; restore stack pos
.9ac4		20 e6 9d	jsr $9de6			jsr 	EvaluateString 				; get a string
.9ac7		5a		phy				phy
.9ac8		a0 00		ldy #$00			ldy 	#0 							; find length
.9aca						_LenFind:
.9aca		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9acc		f0 06		beq $9ad4			beq 	_LenExit
.9ace		c8		iny				iny
.9acf		d0 f9		bne $9aca			bne 	_LenFind
.9ad1		4c 11 a0	jmp $a011			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9ad4						_LenExit:
.9ad4		98		tya				tya		 							; return length
.9ad5		20 90 9e	jsr $9e90			jsr 	NSMSetByte
.9ad8		7a		ply				ply
.9ad9		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9adc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9add						Unary_Min:
.9add		a9 01		lda #$01			lda 	#1
.9adf		80 02		bra $9ae3			bra 	UnaryMinMaxMain
.9ae1						Unary_Max:
.9ae1		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9ae3						UnaryMinMaxMain:
.9ae3		fa		plx				plx 								; get index on number stack
.9ae4		48		pha				pha 								; save comparator
.9ae5		20 d3 9d	jsr $9dd3			jsr 	EvaluateValue 				; get the first value.
.9ae8						_UMMMLoop:
.9ae8		b1 30		lda ($30),y			lda 	(codePtr),y
.9aea		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9aec		f0 22		beq $9b10			beq 	_UMMMDone
.9aee		20 32 8f	jsr $8f32			jsr 	CheckComma 					; must be a comma
.9af1		e8		inx				inx
.9af2		20 d3 9d	jsr $9dd3			jsr 	EvaluateValue
.9af5		ca		dex				dex
.9af6		20 71 9e	jsr $9e71			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9af9		e8		inx				inx
.9afa		20 71 9e	jsr $9e71			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9afd		e8		inx				inx
.9afe		20 fa 8f	jsr $8ffa			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9b01		ca		dex				dex
.9b02		ca		dex				dex
.9b03		85 36		sta $36				sta 	zTemp0 						; save required result
.9b05		68		pla				pla 								; get and save comparator
.9b06		48		pha				pha
.9b07		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9b09		d0 dd		bne $9ae8			bne 	_UMMMLoop
.9b0b		20 13 9b	jsr $9b13			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9b0e		80 d8		bra $9ae8			bra 	_UMMMLoop
.9b10						_UMMMDone:
.9b10		68		pla				pla 								; throw the comparator
.9b11		c8		iny				iny 								; skip )
.9b12		60		rts				rts
.9b13						ExpCopyAboveDown:
.9b13		b5 51		lda $51,x			lda 	NSStatus+1,x
.9b15		95 50		sta $50,x			sta 	NSStatus,x
.9b17		b5 79		lda $79,x			lda 	NSExponent+1,x
.9b19		95 78		sta $78,x			sta 	NSExponent,x
.9b1b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b1d		95 58		sta $58,x			sta 	NSMantissa0,x
.9b1f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b21		95 60		sta $60,x			sta 	NSMantissa1,x
.9b23		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b25		95 68		sta $68,x			sta 	NSMantissa2,x
.9b27		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9b29		95 70		sta $70,x			sta 	NSMantissa3,x
.9b2b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b2c						Unary_Not:
.9b2c		fa		plx				plx
.9b2d		20 fb 9d	jsr $9dfb			jsr 	EvaluateInteger 			; get integer
.9b30		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9b33		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; zero mantissa ?
.9b36		f0 04		beq $9b3c			beq 	_NotZero
.9b38		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero
.9b3b		60		rts				rts
.9b3c						_NotZero:
.9b3c		4c b0 8f	jmp $8fb0			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9b3f						PeekByteUnary:
.9b3f		a9 01		lda #$01			lda 	#1
.9b41		80 0a		bra $9b4d			bra 	PeekUnary
.9b43						PeekWUnary:
.9b43		a9 02		lda #$02			lda 	#2
.9b45		80 06		bra $9b4d			bra 	PeekUnary
.9b47						PeekLUnary:
.9b47		a9 03		lda #$03			lda 	#3
.9b49		80 02		bra $9b4d			bra 	PeekUnary
.9b4b						PeekDUnary:
.9b4b		a9 04		lda #$04			lda 	#4
.9b4d						PeekUnary:
.9b4d		fa		plx				plx 								; restore position.
.9b4e		48		pha				pha 								; save count to copy on stack
.9b4f		20 0e 9e	jsr $9e0e			jsr		Evaluate16BitInteger 		; address as constant.
.9b52		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9b55		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9b57		85 36		sta $36				sta 	zTemp0
.9b59		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b5b		85 37		sta $37				sta 	zTemp0+1
.9b5d		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero 					; clear the result to zero.
.9b60		68		pla				pla 								; count in zTemp2
.9b61		85 3a		sta $3a				sta 	zTemp2
.9b63		da		phx				phx 								; save stack position and offset of read
.9b64		5a		phy				phy
.9b65		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9b67						_PULoop:
.9b67		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9b69		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9b6b		c8		iny				iny 								; next byte to write
.9b6c		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9b6d		18		clc				clc
.9b6e		69 08		adc #$08			adc 	#MathStackSize
.9b70		aa		tax				tax
.9b71		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9b73		d0 f2		bne $9b67			bne 	_PULoop
.9b75		7a		ply				ply 								; restore stack/code pos and exit.
.9b76		fa		plx				plx
.9b77		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b78						Unary_Random:
.9b78		fa		plx				plx
.9b79		20 ea 9b	jsr $9bea			jsr 	Random32Bit 				; get a random number
.9b7c		20 d3 9b	jsr $9bd3			jsr 	URCopyToMantissa  			; put in mantissa
.9b7f		b1 30		lda ($30),y			lda 	(codePtr),y
.9b81		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9b83		f0 08		beq $9b8d			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9b85		e8		inx				inx
.9b86		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b89		ca		dex				dex
.9b8a		20 02 91	jsr $9102			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9b8d						_URNoModulus:
.9b8d		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9b8f		74 78		stz $78,x			stz 	NSExponent,x
.9b91		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9b94		60		rts				rts
.9b95						Unary_Rnd:
.9b95		fa		plx				plx
.9b96		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber 				; number to use.
.9b99		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket 			; closing bracket
.9b9c		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9b9f		f0 26		beq $9bc7			beq 	_URCopySeed
.9ba1		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ba3		10 1f		bpl $9bc4			bpl 	_URDontSeed
.9ba5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ba7		49 17		eor #$17			eor 	#$17
.9ba9		8d 08 04	sta $0408			sta 	RandomSeed+0
.9bac		b5 60		lda $60,x			lda 	NSMantissa1,x
.9bae		49 a5		eor #$a5			eor 	#$A5
.9bb0		8d 09 04	sta $0409			sta 	RandomSeed+1
.9bb3		b5 68		lda $68,x			lda 	NSMantissa2,x
.9bb5		49 c2		eor #$c2			eor 	#$C2
.9bb7		8d 0a 04	sta $040a			sta 	RandomSeed+2
.9bba		b5 70		lda $70,x			lda 	NSMantissa3,x
.9bbc		49 9d		eor #$9d			eor 	#$9D
.9bbe		8d 0b 04	sta $040b			sta 	RandomSeed+3
.9bc1		20 ea 9b	jsr $9bea			jsr 	Random32Bit
.9bc4						_URDontSeed:
.9bc4		20 ea 9b	jsr $9bea			jsr 	Random32Bit 				; generate a number
.9bc7						_URCopySeed:
.9bc7		20 d3 9b	jsr $9bd3			jsr 	URCopyToMantissa 			; copy into mantissa
.9bca		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9bcc		95 78		sta $78,x			sta 	NSExponent,x
.9bce		a9 08		lda #$08			lda 	#NSTFloat
.9bd0		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9bd2		60		rts				rts
.9bd3						URCopyToMantissa:
.9bd3		ad 08 04	lda $0408			lda 	RandomSeed+0
.9bd6		95 58		sta $58,x			sta 	NSMantissa0,x
.9bd8		ad 09 04	lda $0409			lda 	RandomSeed+1
.9bdb		95 60		sta $60,x			sta 	NSMantissa1,x
.9bdd		ad 0a 04	lda $040a			lda 	RandomSeed+2
.9be0		95 68		sta $68,x			sta 	NSMantissa2,x
.9be2		ad 0b 04	lda $040b			lda 	RandomSeed+3
.9be5		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9be7		95 70		sta $70,x			sta 	NSMantissa3,x
.9be9		60		rts				rts
.9bea						Random32Bit:
.9bea		5a		phy				phy
.9beb		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9bed		ad 08 04	lda $0408			lda 	RandomSeed+0 				; check the seed isn't zero
.9bf0		d0 03		bne $9bf5			bne 	_Random1
.9bf2		a8		tay				tay 								; if so do it 256 times
.9bf3		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9bf5						_Random1:
.9bf5		0a		asl a				asl 	a 							; LSFR RNG
.9bf6		2e 09 04	rol $0409			rol 	RandomSeed+1
.9bf9		2e 0a 04	rol $040a			rol 	RandomSeed+2
.9bfc		2e 0b 04	rol $040b			rol 	RandomSeed+3
.9bff		90 02		bcc $9c03			bcc 	_Random2
.9c01		49 c5		eor #$c5			eor 	#$C5
.9c03						_Random2:
.9c03		88		dey				dey
.9c04		d0 ef		bne $9bf5			bne 	_Random1
.9c06		8d 08 04	sta $0408			sta 	RandomSeed+0
.9c09		7a		ply				ply
.9c0a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9c0b						SgnUnary:
.9c0b		fa		plx				plx 								; restore stack pos
.9c0c		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber 				; get a float or int
.9c0f		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9c12		20 b0 9e	jsr $9eb0			jsr 	NSMIsZero 					; if zero
.9c15		f0 0e		beq $9c25			beq 	_SGZero  					; return Int Zero
.9c17		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9c19		48		pha				pha
.9c1a		a9 01		lda #$01			lda 	#1 							; set to 1
.9c1c		20 90 9e	jsr $9e90			jsr 	NSMSetByte
.9c1f		68		pla				pla
.9c20		29 80		and #$80			and		#$80 						; copy the sign byte out
.9c22		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9c24		60		rts				rts
.9c25		20 8e 9e	jsr $9e8e	_SGZero:jsr 	NSMSetZero
.9c28		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9c29						ValUnary:
.9c29		fa		plx				plx 								; restore stack pos
.9c2a		20 3f 9c	jsr $9c3f			jsr 	ValMainCode 				; do the main val() code
.9c2d		b0 01		bcs $9c30			bcs 	_VUError 					; couldn't convert
.9c2f		60		rts				rts
.9c30						_VUError:
.9c30		4c 16 a0	jmp $a016			jmp 	TypeError
.9c33						IsValUnary:
.9c33		fa		plx				plx 								; restore stack pos
.9c34		20 3f 9c	jsr $9c3f			jsr 	ValMainCode 				; do the main val() code
.9c37		b0 03		bcs $9c3c			bcs 	_VUBad
.9c39		4c b0 8f	jmp $8fb0			jmp 	ReturnTrue
.9c3c						_VUBad:
.9c3c		4c bb 8f	jmp $8fbb			jmp 	ReturnFalse
.9c3f						ValMainCode:
.9c3f		20 e6 9d	jsr $9de6			jsr 	EvaluateString 				; get a string
.9c42		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket 			; check right bracket present
.9c45						ValEvaluateZTemp0:
.9c45		5a		phy				phy
.9c46		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9c48		f0 17		beq $9c61			beq 	_VMCFail2
.9c4a		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9c4c		48		pha				pha 								; save first character
.9c4d		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9c4f		d0 01		bne $9c52			bne 	_VMCStart
.9c51		c8		iny				iny 								; skip over -
.9c52						_VMCStart:
.9c52		38		sec				sec 								; initialise first time round.
.9c53						_VMCNext:
.9c53		c8		iny				iny 								; pre-increment
.9c54		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9c56		f0 0c		beq $9c64			beq 	_VMCSuccess 				; successful.
.9c58		20 8d 97	jsr $978d			jsr 	EncodeNumber 				; send it to the number-builder
.9c5b		90 03		bcc $9c60			bcc 	_VMCFail 					; if failed, give up.
.9c5d		18		clc				clc 								; next time round, countinue
.9c5e		80 f3		bra $9c53			bra 	_VMCNext
.9c60						_VMCFail:
.9c60		68		pla				pla
.9c61						_VMCFail2:
.9c61		7a		ply				ply
.9c62		38		sec				sec
.9c63		60		rts				rts
.9c64						_VMCSuccess:
.9c64		a9 00		lda #$00			lda 	#0 							; construct final
.9c66		20 8d 97	jsr $978d			jsr 	EncodeNumber 				; by sending a duff value.
.9c69		68		pla				pla 								; if it was -ve
.9c6a		c9 2d		cmp #$2d			cmp 	#"-"
.9c6c		d0 03		bne $9c71			bne 	_VMCNotNegative
.9c6e		20 50 9e	jsr $9e50			jsr		NSMNegate 					; negate it.
.9c71						_VMCNotNegative:
.9c71		7a		ply				ply
.9c72		18		clc				clc
.9c73		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9c74						ChrUnary:
.9c74		fa		plx				plx 								; restore stack pos
.9c75		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9c78		48		pha				pha
.9c79		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9c7c		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c7e		20 4c b0	jsr $b04c			jsr 	StringTempAllocate
.9c81		68		pla				pla 								; write number to it
.9c82		20 85 b0	jsr $b085			jsr 	StringTempWrite
.9c85		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c86						SpcUnary:
.9c86		fa		plx				plx 								; restore stack pos
.9c87		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger			; get value
.9c8a		5a		phy				phy
.9c8b		48		pha				pha 								; save count
.9c8c		20 4c b0	jsr $b04c			jsr 	StringTempAllocate
.9c8f		7a		ply				ply 								; to do count in Y
.9c90						_SpcLoop:
.9c90		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9c92		f0 08		beq $9c9c			beq 	_SpcExit
.9c94		a9 20		lda #$20			lda 	#32
.9c96		20 85 b0	jsr $b085			jsr 	StringTempWrite
.9c99		88		dey				dey
.9c9a		80 f4		bra $9c90			bra 	_SPCLoop
.9c9c						_SpcExit:
.9c9c		7a		ply				ply
.9c9d		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.9ca0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9ca1						Unary_Str:
.9ca1		fa		plx				plx
.9ca2		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber  			; get number
.9ca5		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket 			; closing bracket
.9ca8		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9caa		20 c3 9c	jsr $9cc3			jsr 	ConvertNumberToString 		; do the conversion.
.9cad		a9 21		lda #$21			lda		#33 						; create buffer
.9caf		20 4c b0	jsr $b04c			jsr 	StringTempAllocate 			; allocate memory
.9cb2		da		phx				phx  								; copy the converted string into the buffer.
.9cb3		a2 00		ldx #$00			ldx 	#0
.9cb5						_USCopy:
.9cb5		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9cb8		20 85 b0	jsr $b085			jsr 	StringTempWrite
.9cbb		e8		inx				inx
.9cbc		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9cbf		d0 f4		bne $9cb5			bne 	_USCopy
.9cc1		fa		plx				plx
.9cc2		60		rts				rts
.9cc3						ConvertNumberToString:
.9cc3		5a		phy				phy 								; save code position
.9cc4		8d 14 04	sta $0414			sta 	DecimalPlaces	 			; save number of DPs.
.9cc7		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9cca		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9ccc		10 09		bpl $9cd7			bpl 	_CNTSNotNegative
.9cce		29 7f		and #$7f			and 	#$7F 						; make +ve
.9cd0		95 50		sta $50,x			sta 	NSStatus,x
.9cd2		a9 2d		lda #$2d			lda 	#"-"
.9cd4		20 38 9d	jsr $9d38			jsr 	WriteDecimalBuffer
.9cd7						_CNTSNotNegative:
.9cd7		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9cd9		f0 12		beq $9ced			beq 	_CNTSNotFloat
.9cdb		e8		inx				inx 								; round up so we don't get too many 6.999999
.9cdc		a9 01		lda #$01			lda 	#1
.9cde		20 90 9e	jsr $9e90			jsr 	NSMSetByte
.9ce1		ca		dex				dex
.9ce2		b5 78		lda $78,x			lda		NSExponent,x
.9ce4		95 79		sta $79,x			sta 	NSExponent+1,x
.9ce6		a9 08		lda #$08			lda 	#NSTFloat
.9ce8		95 51		sta $51,x			sta 	NSStatus+1,x
.9cea		20 92 94	jsr $9492			jsr 	FloatAdd
.9ced						_CNTSNotFloat:
.9ced		20 1a 9d	jsr $9d1a			jsr 	MakePlusTwoString 			; do the integer part.
.9cf0		20 58 95	jsr $9558			jsr 	FloatFractionalPart 		; get the fractional part
.9cf3		20 09 96	jsr $9609			jsr 	NSNormalise					; normalise , exit if zero
.9cf6		f0 20		beq $9d18			beq 	_CNTSExit
.9cf8		a9 2e		lda #$2e			lda 	#"."
.9cfa		20 38 9d	jsr $9d38			jsr 	WriteDecimalBuffer 			; write decimal place
.9cfd						_CNTSDecimal:
.9cfd		ce 14 04	dec $0414			dec 	DecimalPlaces 				; done all the decimals
.9d00		30 16		bmi $9d18			bmi 	_CNTSExit
.9d02		e8		inx				inx 								; x 10.0
.9d03		a9 0a		lda #$0a			lda 	#10
.9d05		20 90 9e	jsr $9e90			jsr 	NSMSetByte
.9d08		a9 08		lda #$08			lda 	#NSTFloat
.9d0a		95 50		sta $50,x			sta 	NSStatus,x
.9d0c		ca		dex				dex
.9d0d		20 d7 95	jsr $95d7			jsr 	FloatMultiply
.9d10		20 1a 9d	jsr $9d1a			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9d13		20 58 95	jsr $9558			jsr 	FloatFractionalPart 		; get the fractional part
.9d16		80 e5		bra $9cfd			bra 	_CNTSDecimal 				; keep going.
.9d18						_CNTSExit:
.9d18		7a		ply				ply
.9d19		60		rts				rts
.9d1a						MakePlusTwoString:
.9d1a		da		phx				phx
.9d1b		20 71 9e	jsr $9e71			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9d1e		e8		inx				inx 								; access it
.9d1f		e8		inx				inx
.9d20		20 b0 95	jsr $95b0			jsr 	FloatIntegerPart 			; make it an integer
.9d23		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9d25		20 c2 93	jsr $93c2			jsr 	ConvertInt32
.9d28		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9d2a						_MPTSCopy:
.9d2a		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9d2d		20 38 9d	jsr $9d38			jsr 	WriteDecimalBuffer
.9d30		e8		inx				inx
.9d31		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9d34		d0 f4		bne $9d2a			bne 	_MPTSCopy
.9d36		fa		plx				plx
.9d37		60		rts				rts
.9d38						WriteDecimalBuffer:
.9d38		da		phx				phx
.9d39		ae 15 04	ldx $0415			ldx 	dbOffset
.9d3c		9d 49 06	sta $0649,x			sta 	DecimalBuffer,x
.9d3f		9e 4a 06	stz $064a,x			stz 	DecimalBuffer+1,x
.9d42		ee 15 04	inc $0415			inc 	dbOffset
.9d45		fa		plx				plx
.9d46		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9d47						Unary_Left:
.9d47		fa		plx				plx
.9d48		18		clc				clc 								; only one parameter
.9d49		20 ac 9d	jsr $9dac			jsr 	SubstringInitial 			; set up.
.9d4c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9d4e		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d50		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9d52		80 25		bra $9d79			bra 	SubstringMain
.9d54						Unary_Right:
.9d54		fa		plx				plx
.9d55		18		clc				clc 								; only one parameter
.9d56		20 ac 9d	jsr $9dac			jsr 	SubstringInitial 			; set up.
.9d59		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9d5b		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d5d		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9d5f		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9d61		b0 02		bcs $9d65			bcs 	_URNotUnderflow
.9d63		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d65						_URNotUnderFlow:
.9d65		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d67		80 10		bra $9d79			bra 	SubStringMain
.9d69						Unary_Mid:
.9d69		fa		plx				plx
.9d6a		38		sec				sec 								; two parameters
.9d6b		20 ac 9d	jsr $9dac			jsr 	SubstringInitial 			; set up.
.9d6e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d70		f0 04		beq $9d76			beq 	_UMError
.9d72		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d74		80 03		bra $9d79			bra 	SubStringMain
.9d76						_UMError:
.9d76		4c 1b a0	jmp $a01b			jmp 	ArgumentError
.9d79						SubStringMain:
.9d79		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d7b		d5 78		cmp $78,x			cmp 	NSExponent,x
.9d7d		b0 27		bcs $9da6			bcs 	_SSMNull 					; if so, return an empty string.
.9d7f		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d81		f0 23		beq $9da6			beq 	_SSMNull 					; return empty string.
.9d83		18		clc				clc 								; add the offset +1 to the address and
.9d84		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9d86		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9d88		85 36		sta $36				sta 	zTemp0
.9d8a		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9d8c		69 00		adc #$00			adc 	#0
.9d8e		85 37		sta $37				sta 	zTemp0+1
.9d90						_SSMNoCarry:
.9d90		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d92		20 4c b0	jsr $b04c			jsr 	StringTempAllocate 			; allocate that many characters
.9d95		5a		phy				phy 								; save Y
.9d96		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d98						_SSMCopy:
.9d98		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d9a		f0 08		beq $9da4			beq 	_SSMEString 				; no more to copy
.9d9c		20 85 b0	jsr $b085			jsr 	StringTempWrite 			; and write it out.
.9d9f		c8		iny				iny
.9da0		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9da2		d0 f4		bne $9d98			bne 	_SSMCopy
.9da4						_SSMEString:
.9da4		7a		ply				ply
.9da5						_SSMExit:
.9da5		60		rts				rts
.9da6						_SSMNull:
.9da6		a9 00		lda #$00			lda 	#0
.9da8		20 4c b0	jsr $b04c			jsr 	StringTempAllocate
.9dab		60		rts				rts
.9dac						SubstringInitial:
.9dac		da		phx				phx 								; save initial stack position
.9dad		08		php				php 								; save carry on stack indicating 2 parameters
.9dae		20 e6 9d	jsr $9de6			jsr 	EvaluateString 				; get a string
.9db1		5a		phy				phy 								; calculate length to exponent.
.9db2		a0 ff		ldy #$ff			ldy 	#$FF
.9db4						_SIFindLength:
.9db4		c8		iny				iny
.9db5		b1 36		lda ($36),y			lda 	(zTemp0),y
.9db7		d0 fb		bne $9db4			bne 	_SIFindLength
.9db9		98		tya				tya
.9dba		95 78		sta $78,x			sta 	NSExponent,x
.9dbc		7a		ply				ply
.9dbd		e8		inx				inx
.9dbe		20 32 8f	jsr $8f32			jsr 	CheckComma 					; comma next
.9dc1		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get next parameter
.9dc4		28		plp				plp 								; is it the last parameter ?
.9dc5		90 07		bcc $9dce			bcc 	_SSIExit 					; if so, exit.
.9dc7		e8		inx				inx
.9dc8		20 32 8f	jsr $8f32			jsr 	CheckComma 					; comma next
.9dcb		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get last parameter
.9dce						_SSIExit:
.9dce		fa		plx				plx
.9dcf		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket 			; check closing bracket
.9dd2		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9dd3						EvaluateValue:
.9dd3		48		pha				pha
.9dd4		20 47 94	jsr $9447			jsr		EvaluateExpression 			; expression
.9dd7		20 0a 97	jsr $970a			jsr 	Dereference					; derefernce it
.9dda		68		pla				pla
.9ddb		60		rts				rts
.9ddc						EvaluateNumber:
.9ddc		20 d3 9d	jsr $9dd3			jsr 	EvaluateValue 				; get a value
.9ddf		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9de1		29 10		and #$10			and 	#NSBIsString
.9de3		d0 13		bne $9df8			bne 	HelperTypeError
.9de5		60		rts				rts
.9de6						EvaluateString:
.9de6		20 d3 9d	jsr $9dd3			jsr 	EvaluateValue 				; get a value
.9de9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9deb		29 10		and #$10			and 	#NSBIsString
.9ded		f0 09		beq $9df8			beq 	HelperTypeError
.9def						CopyAddressToTemp0:
.9def		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9df1		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9df3		b5 60		lda $60,x			lda 	NSMantissa1,x
.9df5		85 37		sta $37				sta 	zTemp0+1
.9df7		60		rts				rts
.9df8						HelperTypeError:
.9df8		4c 16 a0	jmp $a016			jmp 	TypeError
.9dfb						EvaluateInteger:
.9dfb		20 dc 9d	jsr $9ddc			jsr 	EvaluateNumber
.9dfe		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9e00		d0 09		bne $9e0b			bne 	HelperValueError 			; if not, it's a float.
.9e02		60		rts				rts
.9e03						EvaluateUnsignedInteger:
.9e03		20 fb 9d	jsr $9dfb			jsr 	EvaluateInteger 			; check integer is +ve
.9e06		b5 50		lda $50,x			lda 	NSStatus,x
.9e08		30 01		bmi $9e0b			bmi 	HelperValueError
.9e0a		60		rts				rts
.9e0b						HelperValueError:
.9e0b		4c 1b a0	jmp $a01b			jmp 	ArgumentError
.9e0e						Evaluate16BitInteger:
.9e0e		20 03 9e	jsr $9e03			jsr	 	EvaluateUnsignedInteger		; get integer
.9e11		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9e13		15 68		ora $68,x			ora 	NSMantissa2,x
.9e15		d0 f4		bne $9e0b			bne 	HelperValueError
.9e17		60		rts				rts
.9e18						Evaluate16BitIntegerSigned:
.9e18		20 fb 9d	jsr $9dfb			jsr	 	EvaluateInteger				; get integer
.9e1b		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9e1d		15 68		ora $68,x			ora 	NSMantissa2,x
.9e1f		d0 ea		bne $9e0b			bne 	HelperValueError
.9e21		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9e23		10 03		bpl $9e28			bpl 	_EISNotSigned
.9e25		20 57 9e	jsr $9e57			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9e28						_EISNotSigned:
.9e28		60		rts				rts
.9e29						Evaluate8BitInteger:
.9e29		20 03 9e	jsr $9e03			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9e2c		d0 dd		bne $9e0b			bne 	HelperValueError
.9e2e		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9e30		15 68		ora $68,x			ora 	NSMantissa2,x
.9e32		15 60		ora $60,x			ora 	NSMantissa1,x
.9e34		d0 d5		bne $9e0b			bne 	HelperValueError
.9e36		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e38		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9e39						Multiply8x8:
.9e39		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9e3a		85 36		sta $36			  	sta 	zTemp0
.9e3c		86 37		stx $37				stx 	zTemp0+1
.9e3e		a9 00		lda #$00			lda 	#0
.9e40		a2 08		ldx #$08			ldx 	#8
.9e42						_M88Loop:
.9e42		90 03		bcc $9e47			bcc 	_M88NoAdd
.9e44		18		clc				clc
.9e45		65 37		adc $37				adc 	zTemp0+1
.9e47						_M88NoAdd:
.9e47		6a		ror a				ror 	a
.9e48		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9e4a		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9e4b		d0 f5		bne $9e42			bne 	_M88Loop
.9e4d		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9e4f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9e50						NSMNegate:
.9e50		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9e52		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9e54		95 50		sta $50,x			sta 	NSStatus,x
.9e56		60		rts				rts
.9e57						NSMNegateMantissa:
.9e57		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9e58		a9 00		lda #$00			lda 	#0
.9e5a		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9e5c		95 58		sta $58,x			sta 	NSMantissa0,x
.9e5e		a9 00		lda #$00			lda 	#0
.9e60		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9e62		95 60		sta $60,x			sta 	NSMantissa1,x
.9e64		a9 00		lda #$00			lda 	#0
.9e66		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9e68		95 68		sta $68,x			sta 	NSMantissa2,x
.9e6a		a9 00		lda #$00			lda 	#0
.9e6c		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9e6e		95 70		sta $70,x			sta 	NSMantissa3,x
.9e70		60		rts				rts
.9e71						NSMShiftUpTwo:
.9e71		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e73		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9e75		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e77		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9e79		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e7b		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9e7d		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e7f		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9e81		b5 78		lda $78,x			lda 	NSExponent,x
.9e83		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9e85		b5 50		lda $50,x			lda 	NSStatus,x
.9e87		95 52		sta $52,x			sta 	NSStatus+2,x
.9e89		60		rts				rts
.9e8a						NSMSetZeroMantissaOnly:
.9e8a		a9 00		lda #$00			lda 	#0
.9e8c		80 06		bra $9e94			bra 	NSMSetMantissa
.9e8e						NSMSetZero:
.9e8e		a9 00		lda #$00			lda 	#0
.9e90						NSMSetByte:
.9e90		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e92		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9e94						NSMSetMantissa:
.9e94		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9e96		74 60		stz $60,x			stz 	NSMantissa1,x
.9e98		74 68		stz $68,x			stz 	NSMantissa2,x
.9e9a		74 70		stz $70,x			stz 	NSMantissa3,x
.9e9c		60		rts				rts
.9e9d						NSMShiftLeft:
.9e9d		18		clc				clc
.9e9e						NSMRotateLeft:
.9e9e		36 58		rol $58,x			rol 	NSMantissa0,x
.9ea0		36 60		rol $60,x			rol		NSMantissa1,x
.9ea2		36 68		rol $68,x			rol		NSMantissa2,x
.9ea4		36 70		rol $70,x			rol		NSMantissa3,x
.9ea6		60		rts				rts
.9ea7						NSMShiftRight:
.9ea7		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9ea9		76 68		ror $68,x			ror		NSMantissa2,x
.9eab		76 60		ror $60,x			ror		NSMantissa1,x
.9ead		76 58		ror $58,x			ror		NSMantissa0,x
.9eaf		60		rts				rts
.9eb0						NSMIsZero:
.9eb0		b5 70		lda $70,x			lda 	NSMantissa3,x
.9eb2		15 68		ora $68,x			ora		NSMantissa2,x
.9eb4		15 60		ora $60,x			ora		NSMantissa1,x
.9eb6		15 58		ora $58,x			ora		NSMantissa0,x
.9eb8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.9eb9						TickHandler:
.9eb9		5a		phy				phy 								; need to preserve Y
.9eba		20 5d 80	jsr $805d			jsr 	SNDUpdate 					; update sound
.9ebd		7a		ply				ply
.9ebe		60		rts				rts
.065c						LastTick:
>065c								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9ebf						Assemble_ora:
.9ebf		20 c6 80	jsr $80c6		jsr	AssembleGroup1
>9ec2		01					.byte $01
.9ec3						Assemble_and:
.9ec3		20 c6 80	jsr $80c6		jsr	AssembleGroup1
>9ec6		21					.byte $21
.9ec7						Assemble_eor:
.9ec7		20 c6 80	jsr $80c6		jsr	AssembleGroup1
>9eca		41					.byte $41
.9ecb						Assemble_adc:
.9ecb		20 c6 80	jsr $80c6		jsr	AssembleGroup1
>9ece		61					.byte $61
.9ecf						Assemble_sta:
.9ecf		20 c6 80	jsr $80c6		jsr	AssembleGroup1
>9ed2		81					.byte $81
.9ed3						Assemble_lda:
.9ed3		20 c6 80	jsr $80c6		jsr	AssembleGroup1
>9ed6		a1					.byte $a1
.9ed7						Assemble_cmp:
.9ed7		20 c6 80	jsr $80c6		jsr	AssembleGroup1
>9eda		c1					.byte $c1
.9edb						Assemble_sbc:
.9edb		20 c6 80	jsr $80c6		jsr	AssembleGroup1
>9ede		e1					.byte $e1
.9edf						Assemble_asl:
.9edf		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9ee2		02					.byte $02
>9ee3		75					.byte $75
.9ee4						Assemble_rol:
.9ee4		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9ee7		22					.byte $22
>9ee8		75					.byte $75
.9ee9						Assemble_lsr:
.9ee9		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9eec		42					.byte $42
>9eed		75					.byte $75
.9eee						Assemble_ror:
.9eee		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9ef1		62					.byte $62
>9ef2		75					.byte $75
.9ef3						Assemble_stx:
.9ef3		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9ef6		82					.byte $82
>9ef7		50					.byte $50
.9ef8						Assemble_ldx:
.9ef8		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9efb		a2					.byte $a2
>9efc		d0					.byte $d0
.9efd						Assemble_dec:
.9efd		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f00		c2					.byte $c2
>9f01		55					.byte $55
.9f02						Assemble_inc:
.9f02		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f05		e2					.byte $e2
>9f06		55					.byte $55
.9f07						Assemble_stz:
.9f07		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f0a		60					.byte $60
>9f0b		44					.byte $44
.9f0c						Assemble_bit:
.9f0c		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f0f		20					.byte $20
>9f10		55					.byte $55
.9f11						Assemble_sty:
.9f11		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f14		80					.byte $80
>9f15		54					.byte $54
.9f16						Assemble_ldy:
.9f16		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f19		a0					.byte $a0
>9f1a		d5					.byte $d5
.9f1b						Assemble_cpy:
.9f1b		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f1e		c0					.byte $c0
>9f1f		d4					.byte $d4
.9f20						Assemble_cpx:
.9f20		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f23		e0					.byte $e0
>9f24		d0					.byte $d0
.9f25						Assemble_tsb:
.9f25		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f28		00					.byte $00
>9f29		50					.byte $50
.9f2a						Assemble_trb:
.9f2a		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f2d		10					.byte $10
>9f2e		50					.byte $50
.9f2f						Assemble_jsr:
.9f2f		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f32		14					.byte $14
>9f33		10					.byte $10
.9f34						Assemble_jmp:
.9f34		20 cd 80	jsr $80cd		jsr	AssembleGroup2
>9f37		40					.byte $40
>9f38		10					.byte $10
.9f39						Assemble_bpl:
.9f39		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f3c		10					.byte $10
.9f3d						Assemble_bmi:
.9f3d		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f40		30					.byte $30
.9f41						Assemble_bvc:
.9f41		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f44		50					.byte $50
.9f45						Assemble_bvs:
.9f45		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f48		70					.byte $70
.9f49						Assemble_bcc:
.9f49		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f4c		90					.byte $90
.9f4d						Assemble_bcs:
.9f4d		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f50		b0					.byte $b0
.9f51						Assemble_bne:
.9f51		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f54		d0					.byte $d0
.9f55						Assemble_beq:
.9f55		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f58		f0					.byte $f0
.9f59						Assemble_bra:
.9f59		20 1e 81	jsr $811e		jsr	AssembleGroup3
>9f5c		80					.byte $80
.9f5d						Assemble_brk:
.9f5d		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f60		00					.byte $00
.9f61						Assemble_php:
.9f61		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f64		08					.byte $08
.9f65						Assemble_clc:
.9f65		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f68		18					.byte $18
.9f69						Assemble_plp:
.9f69		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f6c		28					.byte $28
.9f6d						Assemble_sec:
.9f6d		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f70		38					.byte $38
.9f71						Assemble_rti:
.9f71		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f74		40					.byte $40
.9f75						Assemble_pha:
.9f75		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f78		48					.byte $48
.9f79						Assemble_cli:
.9f79		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f7c		58					.byte $58
.9f7d						Assemble_phy:
.9f7d		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f80		5a					.byte $5a
.9f81						Assemble_rts:
.9f81		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f84		60					.byte $60
.9f85						Assemble_pla:
.9f85		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f88		68					.byte $68
.9f89						Assemble_sei:
.9f89		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f8c		78					.byte $78
.9f8d						Assemble_ply:
.9f8d		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f90		7a					.byte $7a
.9f91						Assemble_dey:
.9f91		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f94		88					.byte $88
.9f95						Assemble_txa:
.9f95		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f98		8a					.byte $8a
.9f99						Assemble_tya:
.9f99		20 52 81	jsr $8152		jsr	AssembleGroup4
>9f9c		98					.byte $98
.9f9d						Assemble_txs:
.9f9d		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fa0		9a					.byte $9a
.9fa1						Assemble_tay:
.9fa1		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fa4		a8					.byte $a8
.9fa5						Assemble_tax:
.9fa5		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fa8		aa					.byte $aa
.9fa9						Assemble_clv:
.9fa9		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fac		b8					.byte $b8
.9fad						Assemble_tsx:
.9fad		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fb0		ba					.byte $ba
.9fb1						Assemble_iny:
.9fb1		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fb4		c8					.byte $c8
.9fb5						Assemble_dex:
.9fb5		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fb8		ca					.byte $ca
.9fb9						Assemble_cld:
.9fb9		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fbc		d8					.byte $d8
.9fbd						Assemble_phx:
.9fbd		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fc0		da					.byte $da
.9fc1						Assemble_stp:
.9fc1		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fc4		db					.byte $db
.9fc5						Assemble_inx:
.9fc5		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fc8		e8					.byte $e8
.9fc9						Assemble_nop:
.9fc9		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fcc		ea					.byte $ea
.9fcd						Assemble_sed:
.9fcd		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fd0		f8					.byte $f8
.9fd1						Assemble_plx:
.9fd1		20 52 81	jsr $8152		jsr	AssembleGroup4
>9fd4		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9fd5						DecimalScalarTable:
>9fd5		66 66 66 66				.dword $66666666 ; 0.1
>9fd9		de					.byte $de
>9fda		1f 85 eb 51				.dword $51eb851f ; 0.01
>9fde		db					.byte $db
>9fdf		4c 37 89 41				.dword $4189374c ; 0.001
>9fe3		d8					.byte $d8
>9fe4		ac 8b db 68				.dword $68db8bac ; 0.0001
>9fe8		d4					.byte $d4
>9fe9		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9fed		d1					.byte $d1
>9fee		83 de 1b 43				.dword $431bde83 ; 1e-06
>9ff2		ce					.byte $ce
>9ff3		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9ff7		ca					.byte $ca
>9ff8		89 3b e6 55				.dword $55e63b89 ; 1e-08
>9ffc		c7					.byte $c7
>9ffd		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a001		c4					.byte $c4
>a002		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a006		c0					.byte $c0
>a007		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a00b		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a00c						SyntaxError:
.a00c		a9 02		lda #$02		lda	#2
.a00e		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.a011						RangeError:
.a011		a9 04		lda #$04		lda	#4
.a013		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.a016						TypeError:
.a016		a9 05		lda #$05		lda	#5
.a018		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.a01b						ArgumentError:
.a01b		a9 07		lda #$07		lda	#7
.a01d		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.a020						NotDoneError:
.a020		a9 0c		lda #$0c		lda	#12
.a022		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.a025						ErrorText:
>a025		42 72 65 61 6b 00			.text	"Break",0
>a02b		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a033		72 72 6f 72 00
>a038		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a040		20 62 79 20 7a 65 72 6f 00
>a049		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a051		61 6e 67 65 00
>a056		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a05e		6d 61 74 63 68 00
>a064		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a06c		65 6d 6f 72 79 00
>a072		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a07a		61 72 67 75 6d 65 6e 74 00
>a083		53 74 6f 70 00				.text	"Stop",0
>a088		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a090		6f 6f 20 6c 6f 6e 67 00
>a098		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a0a0		6e 20 66 61 69 6c 65 64 00
>a0a9		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a0b1		61 74 61 00
>a0b5		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a0bd		65 6e 74 65 64 00
>a0c3		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a0cb		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a0d7		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a0df		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a0ec		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a0f4		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a101		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a109		68 6f 75 74 20 57 68 69 6c 65 00
>a114		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a11c		68 6f 75 74 20 46 6f 72 00
>a125		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a12d		61 63 6b 20 66 75 6c 6c 00
>a136		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a13e		75 63 74 75 72 65 00
>a145		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a14d		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a15a		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a162		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a170		41 72 72 61 79 20 73 69			.text	"Array size",0
>a178		7a 65 00
>a17b		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a183		79 20 69 6e 64 65 78 00
>a18b		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a193		74 20 64 65 63 6c 61 72 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a19e		41 6c 70 68 61 20 31 38			.text "Alpha 18 built 24-Dec-22. "
>a1a6		20 62 75 69 6c 74 20 32 34 2d 44 65 63 2d 32 32
>a1b6		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a1b8						RectangleCommand:
.a1b8		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a1ba		80 02		bra $a1be			bra 	ShapeDrawCmd
.a1bc						CircleCommand:
.a1bc		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a1be						ShapeDrawCmd:
.a1be		20 48 a2	jsr $a248			jsr 	RunGraphicsCommand
.a1c1						ShapeDraw:
.a1c1		0d 5e 06	ora $065e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a1c4		4c 3c a2	jmp $a23c			jmp 	ExecuteGraphicCommand	 	; and complete
.a1c7						SpriteCommand:
.a1c7		a2 00		ldx #$00			ldx 	#0
.a1c9		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get image number.
.a1cc		5a		phy				phy
.a1cd		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a1cf		a6 58		ldx $58				ldx 	NSMantissa0
.a1d1		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a1d3		b0 0d		bcs $a1e2			bcs 	_SCRange
.a1d5		a0 ff		ldy #$ff			ldy 	#255
.a1d7		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a1da		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a1dc		7a		ply				ply
.a1dd		20 48 a2	jsr $a248			jsr 	RunGraphicsCommand
.a1e0		80 5a		bra $a23c			bra 	ExecuteGraphicCommand
.a1e2						_SCRange:
.a1e2		4c 11 a0	jmp $a011			jmp 	RangeError
.a1e5						ImageCommand:
.a1e5		a2 00		ldx #$00			ldx 	#0
.a1e7		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get image number.
.a1ea		20 48 a2	jsr $a248			jsr 	RunGraphicsCommand
.a1ed						ImageRunDraw:
.a1ed		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a1ef		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a1f2		ad 64 06	lda $0664			lda 	gxDrawScale
.a1f5		0a		asl a				asl 	a
.a1f6		0a		asl a				asl 	a
.a1f7		0a		asl a				asl 	a
.a1f8		a8		tay				tay
.a1f9		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a1fb		a6 58		ldx $58				ldx 	NSMantissa0
.a1fd		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a200		60		rts				rts
.a201						TextCommand:
.a201		a2 00		ldx #$00			ldx 	#0
.a203		20 e6 9d	jsr $9de6			jsr 	EvaluateString 				; get text
.a206		20 48 a2	jsr $a248			jsr 	RunGraphicsCommand
.a209						TextRunDraw:
.a209		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a20b		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a20e		a0 00		ldy #$00			ldy 	#0
.a210						_IRDLoop:
.a210		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a212		85 37		sta $37				sta 	zTemp0+1
.a214		a5 58		lda $58				lda 	NSMantissa0
.a216		85 36		sta $36				sta 	zTemp0
.a218		b1 36		lda ($36),y			lda 	(zTemp0),y
.a21a		f0 13		beq $a22f			beq 	_IRDExit
.a21c		5a		phy				phy									; save string pos
.a21d		48		pha				pha 								; save char
.a21e		ad 64 06	lda $0664			lda 	gxDrawScale 				; get scale
.a221		0a		asl a				asl 	a
.a222		0a		asl a				asl 	a
.a223		0a		asl a				asl 	a
.a224		a8		tay				tay
.a225		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a227		fa		plx				plx 								; char to draw
.a228		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a22b		7a		ply				ply 								; restore string pos
.a22c		c8		iny				iny
.a22d		90 e1		bcc $a210			bcc 	_IRDLoop 					; go back if no error.
.a22f						_IRDExit:
.a22f		60		rts				rts
.a230						PlotCommand:
.a230		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a232		20 48 a2	jsr $a248			jsr 	RunGraphicsCommand
.a235		80 05		bra $a23c			bra 	ExecuteGraphicCommand
.a237						LineCommand:
.a237		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a239		20 48 a2	jsr $a248			jsr 	RunGraphicsCommand
.a23c						ExecuteGraphicCommand:
.a23c		0d 5d 06	ora $065d			ora 	gxCommandID 				; make a full command
.a23f		20 49 80	jsr $8049			jsr 	GXGraphicDraw 				; draw it and exit
.a242		b0 01		bcs $a245			bcs 	_EGCError
.a244		60		rts				rts
.a245						_EGCError:
.a245		4c 0c a0	jmp $a00c			jmp 	SyntaxError
.a248						RunGraphicsCommand:
.a248		8d 5d 06	sta $065d			sta 	gxCommandID					; save TODO graphics command.
.a24b		68		pla				pla 								; pop handler address
.a24c		fa		plx				plx
.a24d		1a		inc a				inc 	a
.a24e		d0 01		bne $a251			bne 	_RGINoCarry
.a250		e8		inx				inx
.a251						_RGINoCarry:
.a251		8d 62 06	sta $0662			sta 	GXHandler
.a254		8e 63 06	stx $0663			stx 	GXHandler+1
.a257						_RGICommandLoop:
.a257		b1 30		lda ($30),y			lda 	(codePtr),y
.a259		c8		iny				iny
.a25a		c9 d8		cmp #$d8			cmp 	#KWD_TO						; is it TO x,y
.a25c		f0 53		beq $a2b1			beq 	_RGI_To
.a25e		c9 c0		cmp #$c0			cmp 	#KWD_HERE 					; do it here.
.a260		f0 55		beq $a2b7			beq 	_RGI_Here
.a262		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a264		f0 3d		beq $a2a3			beq 	_RGI_Exit
.a266		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a268		f0 39		beq $a2a3			beq 	_RGI_Exit
.a26a		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a26c		f0 3e		beq $a2ac			beq 	_RGI_Frame
.a26e		c9 d4		cmp #$d4			cmp 	#KWD_SOLID
.a270		f0 33		beq $a2a5			beq 	_RGI_Solid
.a272		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a274		f0 4b		beq $a2c1			beq 	_RGI_By
.a276		c9 bc		cmp #$bc			cmp 	#KWD_FROM 					; from
.a278		f0 17		beq $a291			beq 	_RGI_Move2
.a27a		c9 b9		cmp #$b9			cmp 	#KWD_DIM 					; dim (set scale)
.a27c		f0 62		beq $a2e0			beq 	_RGI_Dim
.a27e		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a280		f0 74		beq $a2f6			beq 	_RGI_Colour
.a282		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a284		f0 70		beq $a2f6			beq 	_RGI_Colour
.a286		ae 5d 06	ldx $065d			ldx 	gxCommandID
.a289		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a28b		d0 03		bne $a290			bne 	_RGI_Move 					; move
.a28d		4c 1e a3	jmp $a31e			jmp		_RGI_SpriteInstructions
.a290						_RGI_Move:
.a290		88		dey				dey 								; unpick get.
.a291						_RGI_Move2:
.a291		20 44 a3	jsr $a344			jsr 	GCGetCoordinatePair 		; move to here
.a294		20 6b a3	jsr $a36b			jsr 	GCCopyPairToStore 			; save
.a297		5a		phy				phy
.a298		20 61 a3	jsr $a361			jsr 	GCLoadAXY 					; load in
.a29b		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a29d		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a2a0		7a		ply				ply
.a2a1		80 b4		bra $a257			bra 	_RGICommandLoop 			; and go round
.a2a3						_RGI_Exit:
.a2a3		88		dey				dey 								; unpick : / EOL
.a2a4		60		rts				rts
.a2a5						_RGI_Solid:
.a2a5		a9 02		lda #$02			lda 	#2
.a2a7		8d 5e 06	sta $065e			sta 	gxFillSolid
.a2aa		80 ab		bra $a257			bra 	_RGICommandLoop
.a2ac						_RGI_Frame:
.a2ac		9c 5e 06	stz $065e			stz 	gxFillSolid
.a2af		80 a6		bra $a257			bra 	_RGICommandLoop
.a2b1						_RGI_To:
.a2b1		20 44 a3	jsr $a344			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a2b4		20 6b a3	jsr $a36b			jsr 	GCCopyPairToStore
.a2b7						_RGI_Here:
.a2b7		5a		phy				phy
.a2b8		20 61 a3	jsr $a361			jsr 	GCLoadAXY 					; load it into AXY
.a2bb		20 1b a3	jsr $a31b			jsr 	_RGICallHandler 			; go do whatever it is.
.a2be		7a		ply				ply
.a2bf		80 96		bra $a257			bra 	_RGICommandLoop 			; and go round
.a2c1						_RGI_By:
.a2c1		20 51 a3	jsr $a351			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a2c4		18		clc				clc
.a2c5		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a2c7		6d 5f 06	adc $065f			adc 	gxxPos
.a2ca		8d 5f 06	sta $065f			sta 	gxXPos
.a2cd		a5 61		lda $61				lda 	NSMantissa1+1
.a2cf		6d 60 06	adc $0660			adc 	gxxPos+1
.a2d2		8d 60 06	sta $0660			sta 	gxXPos+1
.a2d5		a5 5a		lda $5a				lda 	NSMantissa0+2
.a2d7		18		clc				clc
.a2d8		6d 61 06	adc $0661			adc 	gxYPos
.a2db		8d 61 06	sta $0661			sta 	gxYPos
.a2de		80 d7		bra $a2b7			bra 	_RGI_Here
.a2e0						_RGI_Dim:
.a2e0		a2 01		ldx #$01			ldx	 	#1
.a2e2		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger
.a2e5		a5 59		lda $59				lda 	NSMantissa0+1
.a2e7		c9 00		cmp #$00			cmp 	#0
.a2e9		f0 2d		beq $a318			beq 	_RGIRange
.a2eb		c9 09		cmp #$09			cmp 	#8+1
.a2ed		b0 29		bcs $a318			bcs		_RGIRange
.a2ef		3a		dec a				dec 	a
.a2f0		8d 64 06	sta $0664			sta 	gxDrawScale
.a2f3		4c 57 a2	jmp $a257			jmp 	_RGICommandLoop
.a2f6						_RGI_Colour:
.a2f6		a2 01		ldx #$01			ldx 	#1 							; colour
.a2f8		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger
.a2fb		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a2fd		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero
.a300		b1 30		lda ($30),y			lda 	(codePtr),y
.a302		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a304		d0 04		bne $a30a			bne 	_RGICDefaultMode
.a306		c8		iny				iny
.a307		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger
.a30a						_RGICDefaultMode:
.a30a		5a		phy				phy
.a30b		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a30d		a6 59		ldx $59				ldx 	NSMantissa0+1
.a30f		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a311		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a314		7a		ply				ply
.a315		4c 57 a2	jmp $a257			jmp 	_RGICommandLoop 			; and go round
.a318						_RGIRange:
.a318		4c 11 a0	jmp $a011			jmp 	RangeError
.a31b						_RGICallHandler:
.a31b		6c 62 06	jmp ($0662)			jmp 	(GXHandler)
.a31e						_RGI_SpriteInstructions:
.a31e		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a320		f0 07		beq $a329			beq 	_RGISpriteOff
.a322		c9 c1		cmp #$c1			cmp 	#KWD_IMAGE
.a324		f0 13		beq $a339			beq 	_RGISetImage
.a326		4c 90 a2	jmp $a290			jmp 	_RGI_Move
.a329						_RGISpriteOff:
.a329		5a		phy				phy
.a32a		a0 01		ldy #$01			ldy 	#1
.a32c		a2 00		ldx #$00			ldx 	#0
.a32e						_RGIDoCommandLoop:
.a32e		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a330		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a333		7a		ply				ply
.a334		b0 e2		bcs $a318			bcs 	_RGIRange
.a336		4c 57 a2	jmp $a257			jmp 	_RGICommandLoop
.a339						_RGISetImage:
.a339		a2 01		ldx #$01			ldx 	#1
.a33b		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger
.a33e		5a		phy				phy
.a33f		aa		tax				tax
.a340		a0 00		ldy #$00			ldy 	#0
.a342		80 ea		bra $a32e			bra 	_RGIDoCommandLoop
.a344						GCGetCoordinatePair:
.a344		a2 01		ldx #$01			ldx 	#1
.a346		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger
.a349		20 32 8f	jsr $8f32			jsr 	CheckComma
.a34c		e8		inx				inx
.a34d		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger
.a350		60		rts				rts
.a351						GCSignedCoordinatePair:
.a351		a2 01		ldx #$01			ldx 	#1
.a353		20 18 9e	jsr $9e18			jsr 	Evaluate16BitIntegerSigned
.a356		20 32 8f	jsr $8f32			jsr 	CheckComma
.a359		e8		inx				inx
.a35a		20 18 9e	jsr $9e18			jsr 	Evaluate16BitIntegerSigned
.a35d		60		rts				rts
.a35e						_GCCPRange:
.a35e		4c 11 a0	jmp $a011			jmp 	RangeError
.a361						GCLoadAXY:
.a361		ad 60 06	lda $0660			lda 	gxXPos+1
.a364		ae 5f 06	ldx $065f			ldx 	gxXPos
.a367		ac 61 06	ldy $0661			ldy 	gxYPos
.a36a		60		rts				rts
.a36b						GCCopyPairToStore:
.a36b		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a36d		8d 5f 06	sta $065f			sta 	gxXPos
.a370		a5 61		lda $61				lda 	NSMantissa1+1
.a372		8d 60 06	sta $0660			sta 	gxXPos+1
.a375		a5 5a		lda $5a				lda 	NSMantissa0+2
.a377		8d 61 06	sta $0661			sta 	gxYPos
.a37a		60		rts				rts
.065d						gxCommandID:
>065d								.fill 	1
.065e						gxFillSolid:
>065e								.fill 	1
.065f						gxXPos:
>065f								.fill 	2
.0661						gxYPos:
>0661								.fill 	1
.0662						gxHandler:
>0662								.fill 	2
.0664						gxDrawScale:
>0664								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a37b						BitmapCtrl:
.a37b		b1 30		lda ($30),y			lda 	(codePtr),y
.a37d		c8		iny				iny
.a37e		a2 01		ldx #$01			ldx 	#1
.a380		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a382		f0 11		beq $a395			beq 	BitmapSwitch
.a384		ca		dex				dex
.a385		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a387		f0 0c		beq $a395			beq 	BitmapSwitch
.a389		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get the colour
.a38c		5a		phy				phy
.a38d		aa		tax				tax
.a38e		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a390		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a393		7a		ply				ply
.a394		60		rts				rts
.a395						BitmapSwitch:
.a395		5a		phy				phy
.a396		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a398		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a39a		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a39d		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a39f		a0 00		ldy #$00			ldy 	#0
.a3a1		a2 ff		ldx #$ff			ldx 	#$FF
.a3a3		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a3a6		9c 5e 06	stz $065e			stz 	gxFillSolid
.a3a9		9c 5f 06	stz $065f			stz 	gxXPos
.a3ac		9c 60 06	stz $0660			stz 	gxXPos+1
.a3af		9c 61 06	stz $0661			stz 	gxYPos
.a3b2		9c 64 06	stz $0664			stz 	gxDrawScale
.a3b5		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a3b7		a2 00		ldx #$00			ldx 	#0
.a3b9		a0 00		ldy #$00			ldy 	#0
.a3bb		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a3be		7a		ply				ply
.a3bf		60		rts				rts
.a3c0						SpritesCtrl:
.a3c0		b1 30		lda ($30),y			lda 	(codePtr),y
.a3c2		c8		iny				iny
.a3c3		a2 01		ldx #$01			ldx 	#1
.a3c5		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a3c7		f0 08		beq $a3d1			beq 	SpriteSwitch
.a3c9		ca		dex				dex
.a3ca		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a3cc		f0 03		beq $a3d1			beq 	SpriteSwitch
.a3ce		4c 0c a0	jmp $a00c			jmp 	SyntaxError
.a3d1						SpriteSwitch:
.a3d1		5a		phy				phy
.a3d2		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a3d4		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a3d6		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a3d9		7a		ply				ply
.a3da		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a3db						GfxCommand:
.a3db		a2 00		ldx #$00			ldx 	#0
.a3dd		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; command
.a3e0		20 32 8f	jsr $8f32			jsr 	CheckComma
.a3e3		e8		inx				inx
.a3e4		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger 		; X
.a3e7		20 32 8f	jsr $8f32			jsr 	CheckComma
.a3ea		e8		inx				inx
.a3eb		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; Y
.a3ee		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a3f0		4a		lsr a				lsr 	a
.a3f1		d0 12		bne $a405			bne 	_GfxError
.a3f3		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a3f5		b0 0e		bcs $a405			bcs 	_GfxError 					; bit 7 should have been zero
.a3f7		5a		phy				phy 								; save pos
.a3f8		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a3fa		a6 59		ldx $59				ldx 	NSMantissa0+1
.a3fc		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a3fe		20 49 80	jsr $8049			jsr 	GXGraphicDraw
.a401		b0 02		bcs $a405			bcs 	_GfxError
.a403		7a		ply				ply 								; restore pos and exit.
.a404		60		rts				rts
.a405						_GfxError:
.a405		4c 11 a0	jmp $a011			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a408						UnaryHit:
.a408		fa		plx				plx
.a409		a9 36		lda #$36			lda 	#zTemp0
.a40b		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a40e		20 32 8f	jsr $8f32			jsr 	CheckComma
.a411		e8		inx				inx
.a412		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a415		20 2a 8f	jsr $8f2a			jsr		CheckRightBracket
.a418		ca		dex				dex 								; fix back up again.
.a419		da		phx				phx 								; save X/Y
.a41a		5a		phy				phy
.a41b		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a41d		b5 58		lda $58,x			lda 	NSMantissa0,x
.a41f		aa		tax				tax
.a420		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a422		20 49 80	jsr $8049			jsr 	GXGraphicDraw 				; calculate result
.a425		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a426		7a		ply				ply 								; restore XY
.a427		fa		plx				plx
.a428		20 90 9e	jsr $9e90			jsr 	NSMSetByte 					; return the hit result
.a42b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a42c						PaletteCommand:
.a42c		a2 00		ldx #$00			ldx 	#0
.a42e		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; colour
.a431		20 32 8f	jsr $8f32			jsr 	CheckComma
.a434		e8		inx				inx
.a435		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger 		; r
.a438		20 32 8f	jsr $8f32			jsr 	CheckComma
.a43b		e8		inx				inx
.a43c		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; g
.a43f		20 32 8f	jsr $8f32			jsr 	CheckComma
.a442		e8		inx				inx
.a443		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; b
.a446		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a448		85 36		sta $36				sta 	zTemp0
.a44a		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a44c		85 37		sta $37				sta 	zTemp0+1
.a44e		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a450		26 37		rol $37				rol	 	zTemp0+1
.a452		06 36		asl $36				asl 	zTemp0
.a454		26 37		rol $37				rol	 	zTemp0+1
.a456		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a458		85 01		sta $01				sta 	1
.a45a		5a		phy				phy
.a45b		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a45d		92 36		sta ($36)			sta 	(zTemp0)
.a45f		a0 01		ldy #$01			ldy 	#1
.a461		a5 5a		lda $5a				lda 	NSMantissa0+2
.a463		91 36		sta ($36),y			sta 	(zTemp0),y
.a465		a5 59		lda $59				lda 	NSMantissa0+1
.a467		c8		iny				iny
.a468		91 36		sta ($36),y			sta 	(zTemp0),y
.a46a		7a		ply				ply
.a46b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a46c						XLoadCommand:
.a46c		20 27 8a	jsr $8a27			jsr 	NewProgram
.a46f		20 35 83	jsr $8335			jsr 	BackLoadProgram
.a472		4c f4 83	jmp $83f4			jmp 	WarmStart
.a475						XGoCommand:
.a475		20 27 8a	jsr $8a27			jsr 	NewProgram
.a478		20 35 83	jsr $8335			jsr 	BackLoadProgram
.a47b		4c a5 8b	jmp $8ba5			jmp 	CommandRun

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a47e						UnaryEvent:
.a47e		fa		plx				plx
.a47f		20 18 a5	jsr $a518			jsr 	TimerToStackX 				; timer in +0
.a482		e8		inx				inx  								; put reference into +1
.a483		20 91 98	jsr $9891			jsr 	EvaluateTerm
.a486		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a488		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a48a		d0 4c		bne $a4d8			bne 	_UEType
.a48c		e8		inx				inx 								; put the step in +2
.a48d		20 32 8f	jsr $8f32			jsr 	CheckComma
.a490		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger
.a493		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.a496		ca		dex				dex
.a497		ca		dex				dex
.a498		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a49a		85 36		sta $36				sta 	zTemp0
.a49c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a49e		85 37		sta $37				sta 	zTemp0+1
.a4a0		5a		phy				phy
.a4a1		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a4a3		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4a5		30 2d		bmi $a4d4			bmi 	_UEFalse 					; exit if signed.
.a4a7		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a4a9		b5 58		lda $58,x			lda 	NSMantissa0,x
.a4ab		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a4ad		c8		iny				iny
.a4ae		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4b0		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a4b2		c8		iny				iny
.a4b3		b5 68		lda $68,x			lda 	NSMantissa2,x
.a4b5		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a4b7		90 1b		bcc $a4d4			bcc 	_UEFalse 					; no, return FALSE.
.a4b9		18		clc				clc
.a4ba		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a4bc		b5 58		lda $58,x			lda 	NSMantissa0,x
.a4be		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a4c0		91 36		sta ($36),y			sta 	(zTemp0),y
.a4c2		c8		iny				iny
.a4c3		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4c5		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a4c7		91 36		sta ($36),y			sta 	(zTemp0),y
.a4c9		c8		iny				iny
.a4ca		b5 68		lda $68,x			lda 	NSMantissa2,x
.a4cc		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a4ce		91 36		sta ($36),y			sta 	(zTemp0),y
.a4d0		7a		ply				ply
.a4d1		4c b0 8f	jmp $8fb0			jmp 	ReturnTrue
.a4d4						_UEFalse:
.a4d4		7a		ply				ply 								; restore Y
.a4d5		4c bb 8f	jmp $8fbb			jmp 	ReturnFalse 				; and return False
.a4d8						_UEType:
.a4d8		4c 16 a0	jmp $a016			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a4db						UnaryJoyX:
.a4db		18		clc				clc
.a4dc		80 01		bra $a4df			bra 	JoyMain
.a4de						UnaryJoyY:
.a4de		38		sec				sec
.a4df						JoyMain:
.a4df		fa		plx				plx 								; get pos
.a4e0		08		php				php 								; save carry (set for Y)
.a4e1		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a4e4		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.a4e7		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a4ea		28		plp				plp
.a4eb		b0 02		bcs $a4ef			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a4ed		4a		lsr a				lsr 	a
.a4ee		4a		lsr a				lsr 	a
.a4ef						_JMNoShift:
.a4ef		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a4f0		b0 07		bcs $a4f9			bcs 	JMIsLeft
.a4f2		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a4f3		b0 07		bcs $a4fc			bcs 	JMIsRight
.a4f5		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero 					; zero result
.a4f8		60		rts				rts
.a4f9						JMIsLeft:
.a4f9		4c b0 8f	jmp $8fb0			jmp 	ReturnTrue
.a4fc						JMIsRight:
.a4fc		a9 01		lda #$01			lda 	#1
.a4fe		20 90 9e	jsr $9e90			jsr 	NSMSetByte
.a501		60		rts				rts
.a502						UnaryJoyB:
.a502		fa		plx				plx 								; get pos
.a503		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a506		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.a509		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a50c		29 10		and #$10			and 	#$10
.a50e		d0 e9		bne $a4f9			bne 	JMIsLeft
.a510		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero
.a513		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a514						UnaryTimer:
.a514		fa		plx				plx
.a515		20 2a 8f	jsr $8f2a			jsr 	CheckRightBracket
.a518						TimerToStackX:
.a518		20 8e 9e	jsr $9e8e			jsr 	NSMSetZero 					; zero result
.a51b		64 01		stz $01				stz 	1 							; access I/O
.a51d		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a520		95 58		sta $58,x			sta 	NSMantissa0,x
.a522		ad 5a d6	lda $d65a			lda 	$D65A
.a525		95 60		sta $60,x			sta 	NSMantissa1,x
.a527		ad 5b d6	lda $d65b			lda 	$D65B
.a52a		95 68		sta $68,x			sta 	NSMantissa2,x
.a52c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						RESERVED    .word   ?
>0002						MOUSE       .word   ?   ; Mouse event.
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						NAME        .word   ?
>000e						SIZE        .word   ?
>0010						DATA        .word   ?   ; The read request has succeeded.
>0012						WROTE       .word   ?   ; The write request has completed.
>0014						FORMATTED   .word   ?
>0016						ERROR       .word   ?
>0018						SIZE        .word   ?
>001a						CREATED     .word   ?
>001c						CHECKED     .word   ?
>001e						DATA        .word   ?   ; The read request has succeeded.
>0020						WROTE       .word   ?   ; The write request has completed.
>0022						ERROR       .word   ?
>0024						NOT_FOUND   .word   ?   ; The file file was not found.
>0026						OPENED      .word   ?   ; The file was successfully opened.
>0028						DATA        .word   ?   ; The read request has succeeded.
>002a						WROTE       .word   ?   ; The write request has completed.
>002c						EOF         .word   ?   ; All file data has been read.
>002e						CLOSED      .word   ?   ; The close request has completed.
>0030						RENAMED     .word   ?   ; The rename request has completed.
>0032						DELETED     .word   ?   ; The delete request has completed.
>0034						ERROR       .word   ?   ; An error occured; close the file if opened.
>0036						OPENED      .word   ?   ; The directory open request succeeded.
>0038						VOLUME      .word   ?   ; A volume record was found.
>003a						FILE        .word   ?   ; A file record was found.
>003c						FREE        .word   ?   ; A file-system free-space record was found.
>003e						EOF         .word   ?   ; All data has been read.
>0040						CLOSED      .word   ?   ; The directory file has been closed.
>0042						ERROR       .word   ?   ; An error occured; user should close.
>0044						TCP         .word   ?
>0046						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
>0003						dx          .byte   ?
>0004						dy          .byte   ?
>0005						dz          .byte   ?
>0006						buttons     .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
>0000						dx          .byte   ?
>0001						dy          .byte   ?
>0002						dz          .byte   ?
>0003						buttons     .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a52d						MemoryDeleteLine:
.a52d		20 4c a5	jsr $a54c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a530		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a532		a8		tay				tay
.a533						_MDDLLoop:
.a533		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a535		92 30		sta ($30)			sta 	(codePtr)
.a537		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a539		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a53b		d0 07		bne $a544			bne 	_MDLDLNext
.a53d		a5 31		lda $31				lda 	codePtr+1
.a53f		c5 3b		cmp $3b				cmp 	zTemp2+1
.a541		d0 01		bne $a544			bne 	_MDLDLNext
.a543						_MDDLExit:
.a543		60		rts				rts
.a544						_MDLDLNext:
.a544		e6 30		inc $30				inc 	codePtr						; next byte
.a546		d0 eb		bne $a533			bne 	_MDDLLoop
.a548		e6 31		inc $31				inc 	codePtr+1
.a54a		80 e7		bra $a533			bra 	_MDDLLoop
.a54c						IMemoryFindEnd:
.a54c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a54e		85 3a		sta $3a				sta 	0+zTemp2
.a550		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a552		85 3b		sta $3b				sta 	1+zTemp2
.a554						_MDLFELoop:
.a554		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a556		f0 0b		beq $a563			beq 	_MDLFEExit
.a558		18		clc				clc
.a559		65 3a		adc $3a				adc 	zTemp2
.a55b		85 3a		sta $3a				sta 	zTemp2
.a55d		90 f5		bcc $a554			bcc 	_MDLFELoop
.a55f		e6 3b		inc $3b				inc 	zTemp2+1
.a561		80 f1		bra $a554			bra 	_MDLFELoop
.a563						_MDLFEExit:
.a563		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a564						MemoryInsertLine:
.a564		08		php				php
.a565		20 4c a5	jsr $a54c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a568		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a56a		1a		inc a				inc 	a
.a56b		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a56d		b0 36		bcs $a5a5			bcs 	_MDLIError 					; no, fail.
.a56f		28		plp				plp 								; do at a specific point or the end ?
.a570		90 08		bcc $a57a			bcc 	_MDLIFound 					; if specific point already set.
.a572		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a574		85 30		sta $30				sta 	codePtr 					; end.
.a576		a5 3b		lda $3b				lda 	zTemp2+1
.a578		85 31		sta $31				sta 	codePtr+1
.a57a						_MDLIFound:
.a57a		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a57d		a8		tay				tay
.a57e						_MDLIInsert:
.a57e		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a580		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a582		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a584		c5 3a		cmp $3a				cmp 	zTemp2
.a586		d0 06		bne $a58e			bne 	_MDLINext
.a588		a5 31		lda $31				lda 	codePtr+1
.a58a		c5 3b		cmp $3b				cmp 	zTemp2+1
.a58c		f0 0a		beq $a598			beq 	_MDLIHaveSpace
.a58e						_MDLINext:
.a58e		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a590		d0 02		bne $a594			bne 	_MDLINoBorrow
.a592		c6 3b		dec $3b				dec 	zTemp2+1
.a594						_MDLINoBorrow:
.a594		c6 3a		dec $3a				dec 	zTemp2
.a596		80 e6		bra $a57e			bra 	_MDLIInsert
.a598						_MDLIHaveSpace:
.a598		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a59b		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a59c						_MDLICopy:
.a59c		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a59f		91 30		sta ($30),y			sta 	(codePtr),y
.a5a1		88		dey				dey
.a5a2		10 f8		bpl $a59c			bpl 	_MDLICopy
.a5a4		60		rts				rts
.a5a5						_MDLIError:
.a5a5		a9 06		lda #$06		lda	#6
.a5a7		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.a5aa						MDLAppendLine:
.a5aa		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a5ac		85 36		sta $36				sta 	zTemp0
.a5ae		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5b0		85 38		sta $38				sta 	0+zTemp1
.a5b2		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5b4		85 39		sta $39				sta 	1+zTemp1
.a5b6		b2 38		lda ($38)			lda 	(zTemp1)
.a5b8		d0 0a		bne $a5c4			bne 	_MDLANoInitialise
.a5ba		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5bc		8d 65 06	sta $0665			sta 	0+AppendPointer
.a5bf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5c1		8d 66 06	sta $0666			sta 	1+AppendPointer
.a5c4						_MDLANoInitialise:
.a5c4		18		clc				clc
.a5c5		ad 65 06	lda $0665			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a5c8		85 38		sta $38				sta 	zTemp1
.a5ca		72 36		adc ($36)			adc 	(zTemp0)
.a5cc		8d 65 06	sta $0665			sta 	AppendPointer
.a5cf		ad 66 06	lda $0666			lda 	AppendPointer+1
.a5d2		85 39		sta $39				sta 	zTemp1+1
.a5d4		69 00		adc #$00			adc 	#0
.a5d6		8d 66 06	sta $0666			sta 	AppendPointer+1
.a5d9		a0 00		ldy #$00			ldy 	#0
.a5db						_MDLACopy:
.a5db		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a5dd		91 38		sta ($38),y			sta 	(zTemp1),y
.a5df		c8		iny				iny
.a5e0		98		tya				tya
.a5e1		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a5e3		d0 f6		bne $a5db			bne 	_MDLACopy
.a5e5		a9 00		lda #$00			lda 	#0 							; end of program.
.a5e7		91 38		sta ($38),y			sta 	(zTemp1),y
.a5e9		60		rts				rts
.0665						AppendPointer:
>0665								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a5ea						MemoryNew:
.a5ea		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5ec		85 30		sta $30				sta 	codePtr
.a5ee		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5f0		85 31		sta $31				sta 	codePtr+1
.a5f2		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a5f4		92 30		sta ($30)			sta 	(codePtr)
.a5f6		60		rts				rts
.a5f7						MemoryInline:
.a5f7		98		tya				tya 								; put address into stack,x
.a5f8		18		clc				clc  								; get the offset, add codePtr
.a5f9		65 30		adc $30				adc 	codePtr
.a5fb		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a5fd		a5 31		lda $31				lda 	codePtr+1
.a5ff		69 00		adc #$00			adc 	#0
.a601		95 60		sta $60,x			sta 	NSMantissa1,x
.a603		74 68		stz $68,x			stz 	NSMantissa2,x
.a605		74 70		stz $70,x			stz 	NSMantissa3,x
.a607		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a608						MemorySearch:
.a608		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a60a		86 37		stx $37				stx 	zTemp0+1
.a60c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a60e		85 30		sta $30				sta 	codePtr
.a610		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a612		85 31		sta $31				sta 	codePtr+1
.a614						_MTAXLoop:
.a614		b2 30		lda ($30)			lda 	(codePtr)
.a616		18		clc				clc
.a617		f0 21		beq $a63a			beq 	_MTAXExit 					; reached end, exit with CC.
.a619		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a61b		b1 30		lda ($30),y			lda 	(codePtr),y
.a61d		38		sec				sec
.a61e		e5 36		sbc $36				sbc 	zTemp0
.a620		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a622		c8		iny				iny 								; do the MSB
.a623		b1 30		lda ($30),y			lda 	(codePtr),y
.a625		e5 37		sbc $37				sbc 	zTemp0+1
.a627		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a629		f0 0f		beq $a63a			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a62b		b0 0d		bcs $a63a			bcs 	_MTAXExit 					; current < required exit
.a62d		18		clc				clc
.a62e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a630		65 30		adc $30				adc 	codePtr
.a632		85 30		sta $30				sta 	codePtr
.a634		90 02		bcc $a638			bcc 	_CREExit
.a636		e6 31		inc $31				inc 	codePtr+1 					; carry
.a638						_CREExit:
.a638		80 da		bra $a614			bra 	_MTAXLoop
.a63a						_MTAXExit:
.a63a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a63b						UpdateFont:
.a63b		a5 01		lda $01				lda 	1 							; save position
.a63d		48		pha				pha
.a63e		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a640		85 01		sta $01				sta 	1
.a642		a9 69		lda #$69			lda 	#((FontBinary) & $FF)
.a644		85 36		sta $36				sta 	0+zTemp0
.a646		a9 a6		lda #$a6			lda 	#((FontBinary) >> 8)
.a648		85 37		sta $37				sta 	1+zTemp0
.a64a		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a64c		85 38		sta $38				sta 	0+zTemp1
.a64e		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a650		85 39		sta $39				sta 	1+zTemp1
.a652						_UFCopy1:
.a652		a0 00		ldy #$00			ldy 	#0
.a654						_UFCopy2:
.a654		b1 36		lda ($36),y			lda 	(zTemp0),y
.a656		91 38		sta ($38),y			sta 	(zTemp1),y
.a658		c8		iny				iny
.a659		d0 f9		bne $a654			bne 	_UFCopy2
.a65b		e6 37		inc $37				inc 	zTemp0+1
.a65d		e6 39		inc $39				inc 	zTemp1+1
.a65f		a5 39		lda $39				lda 	zTemp1+1
.a661		c9 c8		cmp #$c8			cmp 	#$C8
.a663		d0 ed		bne $a652			bne 	_UFCopy1
.a665		68		pla				pla 								; restore.
.a666		85 01		sta $01				sta 	1
.a668		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a669						FontBinary:
>a669		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a671		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a681		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a691		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a6a1		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a6b1		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a6c1		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a6d1		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a6e1		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a6f1		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a701		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a711		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a721		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a731		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a741		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a751		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a761		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a771		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a781		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a791		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a7a1		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a7b1		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a7c1		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a7d1		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a7e1		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a7f1		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a801		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a811		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a821		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a831		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a841		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a851		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a861		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a871		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a881		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>a891		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a8a1		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a8b1		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a8c1		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a8d1		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a8e1		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a8f1		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a901		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a911		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>a921		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>a931		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>a941		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a951		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>a961		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>a971		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>a981		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>a991		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>a9a1		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>a9b1		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>a9c1		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>a9d1		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>a9e1		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>a9f1		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>aa01		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>aa11		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>aa21		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>aa31		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>aa41		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>aa51		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>aa61		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>aa71		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>aa81		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>aa91		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>aaa1		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>aab1		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>aac1		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>aad1		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>aae1		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>aaf1		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ab01		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ab11		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ab21		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ab31		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ab41		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ab51		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ab61		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ab71		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ab81		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ab91		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>aba1		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>abb1		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>abc1		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>abd1		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>abe1		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>abf1		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ac01		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ac11		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ac21		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ac31		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ac41		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ac51		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ac61		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ac71		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ac81		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ac91		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>aca1		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>acb1		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>acc1		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>acd1		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>ace1		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>acf1		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>ad01		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>ad11		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ad21		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>ad31		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>ad41		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>ad51		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>ad61		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>ad71		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>ad81		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>ad91		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ada1		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>adb1		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>adc1		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>add1		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>ade1		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>adf1		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>ae01		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>ae11		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>ae21		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>ae31		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>ae41		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>ae51		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>ae61		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.ae69						PingCommand:
.ae69		5a		phy				phy 								; save pos
.ae6a		a9 01		lda #$01			lda 	#1 						; push channel.
.ae6c		48		pha				pha
.ae6d		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.ae6f		a2 03		ldx #$03			ldx 	#3 						; length
.ae71		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae73		80 24		bra $ae99			bra 	SoundEffectCommand
.ae75						ZapCommand:
.ae75		5a		phy				phy 								; save pos
.ae76		a9 01		lda #$01			lda 	#1 						; push channel.
.ae78		48		pha				pha
.ae79		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.ae7b		a2 05		ldx #$05			ldx 	#5 						; length
.ae7d		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.ae7f		80 18		bra $ae99			bra 	SoundEffectCommand
.ae81						ShootCommand:
.ae81		5a		phy				phy 								; save pos
.ae82		a9 03		lda #$03			lda 	#3 						; push channel.
.ae84		48		pha				pha
.ae85		a9 20		lda #$20			lda 	#32 						; pitch LSB
.ae87		a2 02		ldx #$02			ldx 	#2 						; length
.ae89		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae8b		80 0c		bra $ae99			bra 	SoundEffectCommand
.ae8d						Explode:
.ae8d		5a		phy				phy 								; save pos
.ae8e		a9 03		lda #$03			lda 	#3 						; push channel.
.ae90		48		pha				pha
.ae91		a9 50		lda #$50			lda 	#80 						; pitch LSB
.ae93		a2 05		ldx #$05			ldx 	#5 						; length
.ae95		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae97		80 00		bra $ae99			bra 	SoundEffectCommand
.ae99						SoundEffectCommand:
.ae99		8d 67 06	sta $0667			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.ae9c		9c 68 06	stz $0668			stz 	SoundCommandBlock+1
.ae9f		a9 0f		lda #$0f			lda 	#15
.aea1		8d 69 06	sta $0669			sta 	SoundCommandBlock+2
.aea4		8e 6a 06	stx $066a			stx 	SoundCommandBlock+3
.aea7		8c 6b 06	sty $066b			sty 	SoundCommandBlock+4
.aeaa		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.aead		68		pla				pla
.aeae		09 10		ora #$10			ora 	#$10  						; execute command $11
.aeb0		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.aeb2		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.aeb4		20 53 80	jsr $8053			jsr 	SNDCommand
.aeb7		7a		ply				ply
.aeb8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.aeb9						UnaryPlaying:
.aeb9		fa		plx				plx
.aeba		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; get channel #
.aebd		48		pha				pha
.aebe		20 2a 8f	jsr $8f2a			jsr		CheckRightBracket
.aec1		68		pla				pla
.aec2		c9 04		cmp #$04			cmp 	#4
.aec4		b0 0c		bcs $aed2			bcs 	_UPNotPlaying
.aec6		09 20		ora #$20			ora 	#$20 						; query playing ?
.aec8		20 53 80	jsr $8053			jsr 	SNDCommand
.aecb		c9 00		cmp #$00			cmp 	#0
.aecd		f0 03		beq $aed2			beq 	_UPNotPlaying
.aecf		4c b0 8f	jmp $8fb0			jmp 	ReturnTrue
.aed2						_UPNotPlaying:
.aed2		4c bb 8f	jmp $8fbb			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.aed5						SoundCommand:
.aed5		b1 30		lda ($30),y			lda 	(codePtr),y
.aed7		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.aed9		d0 09		bne $aee4			bne 	_SNDMain
.aedb		c8		iny				iny 								; skip OFF
.aedc		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.aede		5a		phy				phy
.aedf		20 53 80	jsr $8053			jsr 	SNDCommand
.aee2		7a		ply				ply
.aee3		60		rts				rts
.aee4						_SNDMain:
.aee4		a2 00		ldx #$00			ldx 	#0
.aee6		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; channel
.aee9		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.aeeb		b0 4b		bcs $af38			bcs 	_SndError
.aeed		e8		inx				inx 								; do the rest in slot 1.
.aeee		20 32 8f	jsr $8f32			jsr 	CheckComma
.aef1		20 0e 9e	jsr $9e0e			jsr 	Evaluate16BitInteger 		; Pitch
.aef4		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.aef6		c9 10		cmp #$10			cmp 	#16
.aef8		b0 3e		bcs $af38			bcs 	_SndError
.aefa		8d 68 06	sta $0668			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.aefd		b5 58		lda $58,x			lda 	NSMantissa0,x
.aeff		8d 67 06	sta $0667			sta 	SoundCommandBlock
.af02		20 32 8f	jsr $8f32			jsr 	CheckComma
.af05		20 29 9e	jsr $9e29			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.af08		8d 6a 06	sta $066a			sta 	SoundCommandBlock+3
.af0b		a9 0f		lda #$0f			lda 	#15
.af0d		8d 69 06	sta $0669			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.af10		9c 6b 06	stz $066b			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.af13		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.af16		b1 30		lda ($30),y			lda 	(codePtr),y
.af18		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.af1a		d0 0e		bne $af2a			bne 	_SNDPlay
.af1c		c8		iny				iny
.af1d		20 18 9e	jsr $9e18			jsr 	Evaluate16BitIntegerSigned 	; Slide
.af20		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.af22		8d 6b 06	sta $066b			sta 	SoundCommandBlock+4
.af25		b5 60		lda $60,x			lda 	NSMantissa1,x
.af27		8d 6c 06	sta $066c			sta 	SoundCommandBlock+5
.af2a						_SNDPlay:
.af2a		5a		phy				phy
.af2b		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.af2d		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.af2f		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.af31		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.af33		20 53 80	jsr $8053			jsr 	SNDCommand
.af36		7a		ply				ply
.af37		60		rts				rts
.af38						_SndError:
.af38		4c 11 a0	jmp $a011			jmp 	RangeError
.0667						SoundCommandBlock:
>0667								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.af3b						StackPushByte:
.af3b		48		pha				pha 								; save byte on stack
.af3c		a5 34		lda $34				lda 	BasicStack 					; decrement basic stack pointer
.af3e		d0 08		bne $af48			bne 	_SPBNoBorrow
.af40		c6 35		dec $35				dec 	BasicStack+1 				; borrow
.af42		a5 35		lda $35				lda 	BasicStack+1 				; check range.
.af44		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.af46		90 06		bcc $af4e			bcc 	_SPBMemory
.af48						_SPBNoBorrow:
.af48		c6 34		dec $34				dec 	BasicStack
.af4a		68		pla				pla 								; get back and write
.af4b		92 34		sta ($34)			sta 	(BasicStack)
.af4d		60		rts				rts
.af4e						_SPBMemory:
.af4e		a9 12		lda #$12		lda	#18
.af50		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.af53						StackPopByte:
.af53		b2 34		lda ($34)			lda 	(BasicStack) 				; bump the stack pointer.
.af55		e6 34		inc $34				inc 	BasicStack
.af57		d0 02		bne $af5b			bne 	_SPBNoCarry
.af59		e6 35		inc $35				inc 	BasicStack+1
.af5b						_SPBNoCarry:
.af5b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.af5c						StackOpen:
.af5c		48		pha				pha 								; save frame byte
.af5d		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.af5f		0a		asl a				asl 	a 							; claim twice this for storage
.af60		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.af62		38		sec				sec 								; so basically subtracting from
.af63		65 34		adc $34				adc 	basicStack 	 				; basicStack
.af65		85 34		sta $34				sta 	basicStack
.af67		b0 09		bcs $af72			bcs 	_SONoBorrow
>af69		db						.byte 	$DB 						; causes a break in the emulator
.af6a		c6 35		dec $35				dec 	basicStack+1
.af6c		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.af6e		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.af70		90 04		bcc $af76			bcc 	_SOMemory
.af72						_SONoBorrow:
.af72		68		pla				pla 								; get marker back and write at TOS
.af73		92 34		sta ($34)			sta 	(basicStack)
.af75		60		rts				rts
.af76						_SOMemory:
.af76		a9 12		lda #$12		lda	#18
.af78		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.af7b						StackClose:
.af7b		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.af7d		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.af7f		0a		asl a				asl 	a 							; claim twice this.
.af80		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.af82		85 34		sta $34				sta 	basicStack
.af84		90 02		bcc $af88			bcc 	_SCExit
.af86		e6 35		inc $35				inc 	basicStack+1
.af88						_SCExit:
.af88		60		rts				rts
.af89						StackCheckFrame:
.af89		48		pha				pha
.af8a						_StackRemoveLocals:
.af8a		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.af8c		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.af8e		b0 05		bcs $af95			bcs 	_SCNoLocal
.af90		20 d6 89	jsr $89d6			jsr 	LocalPopValue 				; restore the local value
.af93		80 f5		bra $af8a			bra 	_StackRemoveLocals 			; gr round again
.af95						_SCNoLocal:
.af95		68		pla				pla 								; get the frame check.
.af96		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.af98		29 f0		and #$f0			and 	#$F0 						; check type bits
.af9a		d0 01		bne $af9d			bne 	_SCFError 					; different, we have structures mixed up
.af9c		60		rts				rts
.af9d						_SCFError:
.af9d		8a		txa				txa 								; report error X
.af9e		4c 43 8f	jmp $8f43			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.afa1						STKSaveCodePosition:
.afa1		5a		phy				phy
.afa2		98		tya				tya 								; save Y
.afa3		a0 05		ldy #$05			ldy 	#5
.afa5		91 34		sta ($34),y			sta 	(basicStack),y
.afa7		88		dey				dey 								; save Code Pointer
.afa8						_STKSaveLoop:
.afa8		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.afab		91 34		sta ($34),y			sta 	(basicStack),y
.afad		88		dey				dey
.afae		d0 f8		bne $afa8			bne 	_STKSaveLoop
.afb0		7a		ply				ply
.afb1		60		rts				rts
.afb2						STKLoadCodePosition:
.afb2		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.afb4						_STKLoadLoop:
.afb4		b1 34		lda ($34),y			lda 	(basicStack),y
.afb6		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.afb9		c8		iny				iny
.afba		c0 05		cpy #$05			cpy 	#5
.afbc		d0 f6		bne $afb4			bne 	_STKLoadLoop
.afbe		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.afc0		a8		tay				tay
.afc1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.afc2						StackReset:
.afc2		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.afc4		85 34		sta $34				sta 	0+basicStack
.afc6		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.afc8		85 35		sta $35				sta 	1+basicStack
.afca		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.afcc		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.afce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.afcf						StringConcrete:
.afcf		5a		phy				phy 								; save position on stack
.afd0		20 7d 9a	jsr $9a7d			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.afd3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.afd5		85 38		sta $38				sta 	zTemp1
.afd7		b5 60		lda $60,x			lda 	NSMantissa1,x
.afd9		85 39		sta $39				sta 	zTemp1+1
.afdb		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.afdd						_SALength:
.afdd		c8		iny				iny
.afde		b1 38		lda ($38),y			lda 	(zTemp1),y
.afe0		d0 fb		bne $afdd			bne 	_SALength
.afe2		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.afe4		b0 3d		bcs $b023			bcs 	_SALengthError
.afe6		98		tya				tya 				 				; length of the new string
.afe7		18		clc				clc
.afe8		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.afea		90 02		bcc $afee			bcc 	_SAHaveLength
.afec		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.afee						_SAHaveLength:
.afee		48		pha				pha 								; save length.
.afef		38		sec				sec
.aff0		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.aff2		6d 0e 04	adc $040e			adc 	StringMemory
.aff5		8d 0e 04	sta $040e			sta 	StringMemory
.aff8		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.affa		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.affc		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.affe		6d 0f 04	adc $040f			adc 	StringMemory+1
.b001		8d 0f 04	sta $040f			sta 	StringMemory+1
.b004		85 3b		sta $3b				sta 	zTemp2+1
.b006		95 60		sta $60,x			sta 	NSMantissa1,x
.b008		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b009		38		sec				sec
.b00a		e9 03		sbc #$03			sbc 	#3
.b00c		92 3a		sta ($3a)			sta 	(zTemp2)
.b00e		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b010		a0 01		ldy #$01			ldy 	#1
.b012		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b014						_SACopyNewString:
.b014		a0 00		ldy #$00			ldy 	#0
.b016						_SACopyNSLoop:
.b016		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b018		c8		iny				iny 								; write two on in string storage
.b019		c8		iny				iny
.b01a		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b01c		88		dey				dey 								; this makes it one one.
.b01d		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b01f		d0 f5		bne $b016			bne 	_SACopyNSLoop
.b021		7a		ply				ply
.b022		60		rts				rts
.b023						_SALengthError:
.b023		a9 09		lda #$09		lda	#9
.b025		4c 43 8f	jmp $8f43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b028						StringSystemInitialise:
.b028		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b02a		8d 0e 04	sta $040e			sta 	0+StringMemory
.b02d		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b02f		8d 0f 04	sta $040f			sta 	1+StringMemory
.b032		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b035		60		rts				rts
.b036						StringSpaceInitialise:
.b036		20 7d 9a	jsr $9a7d			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b039		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b03b		8d 10 04	sta $0410			sta 	StringInitialised
.b03e		ad 0e 04	lda $040e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b041		8d 11 04	sta $0411			sta 	StringTempPointer 			; so temporary string space is allocated below that.
.b044		ad 0f 04	lda $040f			lda 	StringMemory+1
.b047		3a		dec a				dec 	a
.b048		8d 12 04	sta $0412			sta 	StringTempPointer+1
.b04b		60		rts				rts
.b04c						StringTempAllocate:
.b04c		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b04e		b0 30		bcs $b080			bcs 	_STALength
.b050		2c 10 04	bit $0410			bit 	StringInitialised 			; already initialised
.b053		30 05		bmi $b05a			bmi 	_STAAllocate
.b055		48		pha				pha 								; save value to subtract.
.b056		20 36 b0	jsr $b036			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b059		68		pla				pla 								; restore it
.b05a						_STAAllocate:
.b05a		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b05c		18		clc				clc  								; deliberate allows one more
.b05d		6d 11 04	adc $0411			adc 	StringTempPointer 			; subtract from temp pointer
.b060		8d 11 04	sta $0411			sta 	StringTempPointer
.b063		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b065		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b067		ad 12 04	lda $0412			lda 	StringTempPointer+1
.b06a		69 ff		adc #$ff			adc 	#$FF
.b06c		8d 12 04	sta $0412			sta 	StringTempPointer+1
.b06f		85 3d		sta $3d				sta 	zsTemp+1
.b071		95 60		sta $60,x			sta 	NSMantissa1,x
.b073		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b075		74 70		stz $70,x			stz 	NSMantissa3,x
.b077		a9 10		lda #$10			lda 	#NSTString
.b079		95 50		sta $50,x			sta 	NSStatus,x
.b07b		a9 00		lda #$00			lda 	#0 							; clear the target string
.b07d		92 3c		sta ($3c)			sta 	(zsTemp)
.b07f		60		rts				rts
.b080						_STALength:
.b080		a9 09		lda #$09		lda	#9
.b082		4c 43 8f	jmp $8f43		jmp	ErrorHandler
.b085						StringTempWrite:
.b085		48		pha				pha
.b086		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b088		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b08a		d0 02		bne $b08e			bne 	_STWNoCarry
.b08c		e6 3d		inc $3d				inc 	zsTemp+1
.b08e						_STWNoCarry:
.b08e		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b090		92 3c		sta ($3c)			sta 	(zsTemp)
.b092		68		pla				pla
.b093		60		rts				rts

;******  Return to file: _basic.asm

.b094						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 6f 06	lda $066f			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 6e 06	sty $066e			sty 	EXTColumn
.c022	a022	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6d 06	inc $066d			inc 	EXTRow  					; bump row
.c02a	a02a	9c 6e 06	stz $066e			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6d 06	lda $066d			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 71 06	cmp $0671			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 6e 06	dec $066e			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 6e 06	stz $066e			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6d 06	dec $066d			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6d 06	lda $066d			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6d 06	dec $066d			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 70 06	sbc $0670			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 6e 06	sty $066e			sty 	EXTColumn
.c081	a081	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 6e 06	sty $066e			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 b0 a1	jsr $a1b0			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 6d a1	jsr $a16d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 71 06	lda $0671			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6d 06	cmp $066d			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6d 06	inc $066d			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 6e 06	lda $066e			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 6e 06	sta $066e			sta 	EXTColumn
.c0be	a0be	cd 70 06	cmp $0670			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 6e 06	dec $066e			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackspace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 6f 06	and $066f			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 6f 06	sta $066f			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 6f 06	ora $066f			ora 	EXTTextColour
.c131	a131	8d 6f 06	sta $066f			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 6f 06	lda $066f			lda 	EXTTextColour
.c149	a149	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					PAGEDPrintHex:
.c14d	a14d	48		pha				pha
.c14e	a14e	a9 20		lda #$20			lda 	#' '
.c150	a150	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c153	a153	68		pla				pla
.c154	a154	48		pha				pha
.c155	a155	4a		lsr a				lsr 	a
.c156	a156	4a		lsr a				lsr 	a
.c157	a157	4a		lsr a				lsr 	a
.c158	a158	4a		lsr a				lsr 	a
.c159	a159	20 5d a1	jsr $a15d			jsr 	_PPHNibble
.c15c	a15c	68		pla				pla
.c15d	a15d					_PPHNibble:
.c15d	a15d	48		pha				pha
.c15e	a15e	29 0f		and #$0f			and 	#15
.c160	a160	c9 0a		cmp #$0a			cmp 	#10
.c162	a162	90 02		bcc $a166			bcc 	_PPHOut
.c164	a164	69 06		adc #$06			adc 	#6
.c166	a166	69 30		adc #$30	_PPHOut:adc 	#48
.c168	a168	20 00 a0	jsr $a000			jsr		PAGEDPrintCharacter
.c16b	a16b	68		pla				pla
.c16c	a16c	60		rts				rts
.c16d	a16d					EXTClearScreenCode:
.c16d	a16d	a9 02		lda #$02			lda 	#2 							; select text page
.c16f	a16f	85 01		sta $01				sta 	1
.c171	a171	a9 20		lda #$20			lda		#32 						; fill with space
.c173	a173	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c176	a176	e6 01		inc $01				inc 	1 							; select colour page
.c178	a178	ad 6f 06	lda $066f			lda 	EXTTextColour
.c17b	a17b	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c17e	a17e	80 22		bra $a1a2			bra 	EXTHomeCursor
.c180	a180					_EXTCSFill:
.c180	a180	aa		tax				tax
.c181	a181	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c183	a183	85 40		sta $40				sta 	EXTAddress
.c185	a185	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c187	a187	85 41		sta $41				sta 	EXTAddress+1
.c189	a189					_EXTCSFill1:
.c189	a189	a0 00		ldy #$00			ldy 	#0
.c18b	a18b	8a		txa				txa
.c18c	a18c					_EXTCSFill2:
.c18c	a18c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c18e	a18e	c8		iny				iny
.c18f	a18f	d0 fb		bne $a18c			bne 	_EXTCSFill2
.c191	a191	e6 41		inc $41				inc 	EXTAddress+1
.c193	a193	a5 41		lda $41				lda 	EXTAddress+1
.c195	a195	c9 d2		cmp #$d2			cmp 	#$D2
.c197	a197	d0 f0		bne $a189			bne 	_EXTCSFill1
.c199	a199	8a		txa				txa
.c19a	a19a					_EXTCSFill3:
.c19a	a19a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c19c	a19c	c8		iny				iny
.c19d	a19d	c0 c0		cpy #$c0			cpy 	#$C0
.c19f	a19f	d0 f9		bne $a19a			bne 	_EXTCSFill3
.c1a1	a1a1	60		rts				rts
.c1a2	a1a2					EXTHomeCursor:
.c1a2	a1a2	9c 6d 06	stz $066d			stz 	EXTRow 						; reset row & column
.c1a5	a1a5	9c 6e 06	stz $066e			stz 	EXTColumn
.c1a8	a1a8	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1aa	a1aa	85 40		sta $40				sta 	EXTAddress
.c1ac	a1ac	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1ae	a1ae	85 41		sta $41				sta 	EXTAddress+1
.c1b0	a1b0					EXTSetHardwareCursor:
.c1b0	a1b0	64 01		stz $01				stz 	1 							; I/O Page zero
.c1b2	a1b2	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1b4	a1b4	8d 10 d0	sta $d010			sta 	$D010
.c1b7	a1b7	a9 b3		lda #$b3			lda 	#179
.c1b9	a1b9	8d 12 d0	sta $d012			sta 	$D012
.c1bc	a1bc	ad 6e 06	lda $066e			lda 	EXTColumn
.c1bf	a1bf	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c2	a1c2	9c 15 d0	stz $d015			stz 	$D015
.c1c5	a1c5	ad 6d 06	lda $066d			lda 	EXTRow
.c1c8	a1c8	8d 16 d0	sta $d016			sta 	$D016
.c1cb	a1cb	9c 17 d0	stz $d017			stz 	$D017
.c1ce	a1ce	60		rts				rts
.c1cf	a1cf					Export_EXTInputLine:
.c1cf	a1cf	48		pha				pha
.c1d0	a1d0	da		phx				phx
.c1d1	a1d1	5a		phy				phy
.c1d2	a1d2	a5 01		lda $01				lda 	1 							; save I/O page
.c1d4	a1d4	48		pha				pha
.c1d5	a1d5					_EILLoop:
.c1d5	a1d5	20 ca bb	jsr $bbca			jsr 	PagedInputSingleCharacter
.c1d8	a1d8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1da	a1da	f0 44		beq $a220			beq 	_EILExit
.c1dc	a1dc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1de	a1de	f0 2a		beq $a20a			beq 	_EILDelete
.c1e0	a1e0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1e2	a1e2	f0 1c		beq $a200			beq 	_EILBackspace
.c1e4	a1e4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1e6	a1e6	90 12		bcc $a1fa			bcc 	_EILPrintLoop
.c1e8	a1e8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ea	a1ea	b0 0e		bcs $a1fa			bcs 	_EILPrintLoop
.c1ec	a1ec	48		pha				pha 								; save character
.c1ed	a1ed	a9 02		lda #$02			lda 	#2  						; insert a space
.c1ef	a1ef	85 01		sta $01				sta 	1
.c1f1	a1f1	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in text screen
.c1f4	a1f4	e6 01		inc $01				inc 	1
.c1f6	a1f6	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in colour screen
.c1f9	a1f9	68		pla				pla 								; get character back.
.c1fa	a1fa					_EILPrintLoop:
.c1fa	a1fa	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c1fd	a1fd	80 d6		bra $a1d5			bra 	_EILLoop
.c1ff	a1ff	60		rts				rts
.c200	a200					_EILBackspace:
.c200	a200	ad 6e 06	lda $066e			lda 	EXTColumn					; can we backspace ?
.c203	a203	f0 d0		beq $a1d5			beq 	_EILLoop
.c205	a205	a9 02		lda #$02			lda 	#2 							; move cursor left
.c207	a207	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c20a	a20a					_EILDelete
.c20a	a20a	a9 02		lda #$02			lda 	#2 							; text block
.c20c	a20c	85 01		sta $01				sta 	1
.c20e	a20e	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c210	a210	20 4f a2	jsr $a24f			jsr 	EXTILDelete
.c213	a213	e6 01		inc $01				inc 	1 							; colour block
.c215	a215	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; get attribute of last character
.c218	a218	88		dey				dey
.c219	a219	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c21b	a21b	20 4f a2	jsr $a24f			jsr 	EXTILDelete 				; backspace attribute
.c21e	a21e	80 b5		bra $a1d5			bra 	_EILLoop 					; and go round.
.c220	a220					_EILExit:
.c220	a220	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c222	a222	85 01		sta $01				sta 	1
.c224	a224	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c226	a226					_EILScrapeLine:
.c226	a226	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c228	a228	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c22b	a22b	c8		iny				iny
.c22c	a22c	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c22f	a22f	d0 f5		bne $a226			bne 	_EILScrapeLine
.c231	a231					_EILTrimSpaces:
.c231	a231	88		dey				dey
.c232	a232	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c234	a234	f0 07		beq $a23d			beq 	_EILEndTrim		 			; zero the input line.
.c236	a236	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c239	a239	c9 20		cmp #$20			cmp 	#' '
.c23b	a23b	f0 f4		beq $a231			beq 	_EILTrimSpaces 				; if fail this found non space character
.c23d	a23d					_EILEndTrim:
.c23d	a23d	c8		iny				iny 								; trim after non space character.
.c23e	a23e	a9 00		lda #$00			lda 	#0 							; trim here.
.c240	a240	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c243	a243	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c245	a245	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c248	a248	68		pla				pla 								; reset I/O page
.c249	a249	85 01		sta $01				sta 	1
.c24b	a24b	7a		ply				ply
.c24c	a24c	fa		plx				plx
.c24d	a24d	68		pla				pla
.c24e	a24e	60		rts				rts
.c24f	a24f					EXTILDelete:
.c24f	a24f	48		pha				pha 								; save the new character
.c250	a250	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; start copying from here.
.c253	a253					_EXTDLoop:
.c253	a253	c8		iny				iny 								; copy one byte down.
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	88		dey				dey
.c257	a257	91 40		sta ($40),y			sta 	(EXTAddress),y
.c259	a259	c8		iny				iny 								; do till end of line.
.c25a	a25a	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c25d	a25d	90 f4		bcc $a253			bcc 	_EXTDLoop
.c25f	a25f	88		dey				dey 	 							; write in last slot.
.c260	a260	68		pla				pla
.c261	a261	91 40		sta ($40),y			sta 	(EXTAddress),y
.c263	a263	60		rts				rts
.c264	a264					EXTILInsert:
.c264	a264	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; end position
.c267	a267					_EXTILoop:
.c267	a267	88		dey				dey 								; back one
.c268	a268	cc 6e 06	cpy $066e			cpy 	EXTColumn 					; exit if reached insert point.
.c26b	a26b	f0 08		beq $a275			beq 	_EXTIExit
.c26d	a26d	88		dey				dey 								; copy one byte up.
.c26e	a26e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c270	a270	c8		iny				iny
.c271	a271	91 40		sta ($40),y			sta 	(EXTAddress),y
.c273	a273	80 f2		bra $a267			bra 	_EXTILoop
.c275	a275					_EXTIExit:
.c275	a275	60		rts				rts
.c276	a276					EXTScrollFill:
.c276	a276	aa		tax				tax									; save value to fill with
.c277	a277	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c279	a279	48		pha				pha
.c27a	a27a	a5 37		lda $37				lda 	zTemp0+1
.c27c	a27c	48		pha				pha
.c27d	a27d	a5 38		lda $38				lda 	zTemp1
.c27f	a27f	48		pha				pha
.c280	a280	a5 39		lda $39				lda 	zTemp1+1
.c282	a282	48		pha				pha
.c283	a283	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c285	a285	85 37		sta $37				sta 	zTemp0+1
.c287	a287	85 39		sta $39				sta 	zTemp1+1
.c289	a289	64 36		stz $36				stz 	zTemp0
.c28b	a28b	ad 70 06	lda $0670			lda 	EXTScreenWidth
.c28e	a28e	85 38		sta $38				sta 	zTemp1
.c290	a290	a0 00		ldy #$00			ldy 	#0
.c292	a292					_EXSFCopy1:
.c292	a292	b1 38		lda ($38),y			lda 	(zTemp1),y
.c294	a294	91 36		sta ($36),y			sta 	(zTemp0),y
.c296	a296	c8		iny				iny
.c297	a297	d0 f9		bne $a292			bne 	_EXSFCopy1
.c299	a299	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c29b	a29b	e6 39		inc $39				inc 	zTemp1+1
.c29d	a29d	a5 39		lda $39				lda 	zTemp1+1
.c29f	a29f	c9 d3		cmp #$d3			cmp 	#$D3
.c2a1	a2a1	d0 ef		bne $a292			bne 	_EXSFCopy1
.c2a3	a2a3	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2a6	a2a6	8a		txa				txa
.c2a7	a2a7					_EXSFFill1:
.c2a7	a2a7	88		dey				dey
.c2a8	a2a8	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2aa	a2aa	c0 00		cpy #$00			cpy 	#0
.c2ac	a2ac	10 f9		bpl $a2a7			bpl 	_EXSFFill1
.c2ae	a2ae	68		pla				pla
.c2af	a2af	85 39		sta $39				sta 	zTemp1+1
.c2b1	a2b1	68		pla				pla
.c2b2	a2b2	85 38		sta $38				sta 	zTemp1
.c2b4	a2b4	68		pla				pla
.c2b5	a2b5	85 37		sta $37				sta 	zTemp0+1
.c2b7	a2b7	68		pla				pla
.c2b8	a2b8	85 36		sta $36				sta 	zTemp0
.c2ba	a2ba	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066d						EXTRow:
>066d								.fill 	1
.066e						EXTColumn:
>066e								.fill 	1
.066f						EXTTextColour:
>066f								.fill 	1
.0670						EXTScreenWidth:
>0670								.fill 	1
.0671						EXTScreenHeight:
>0671								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2bb	a2bb					Export_EXTInitialise:
.c2bb	a2bb	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2bd	a2bd	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2c0	a2c0	9c 08 d0	stz $d008			stz 	$D008
.c2c3	a2c3	9c 09 d0	stz $d009			stz 	$D009
.c2c6	a2c6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2c8	a2c8	8d 58 d6	sta $d658			sta 	$D658
.c2cb	a2cb	a9 52		lda #$52			lda 	#$52
.c2cd	a2cd	8d 6f 06	sta $066f			sta 	EXTTextColour
.c2d0	a2d0	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2d2	a2d2	8d 70 06	sta $0670			sta 	EXTScreenWidth
.c2d5	a2d5	a9 3c		lda #$3c			lda 	#60
.c2d7	a2d7	8d 71 06	sta $0671			sta 	EXTScreenHeight
.c2da	a2da	20 6d a1	jsr $a16d			jsr 	EXTClearScreenCode 			; clear the screen
.c2dd	a2dd					_EXMoveDown:
.c2dd	a2dd	a9 0d		lda #$0d			lda 	#13
.c2df	a2df	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2e2	a2e2	ad 6d 06	lda $066d			lda 	EXTRow
.c2e5	a2e5	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2e7	a2e7	d0 f4		bne $a2dd			bne 	_EXMoveDown
.c2e9	a2e9	20 ef a2	jsr $a2ef			jsr 	EXTShowHeader
.c2ec	a2ec	64 01		stz $01				stz 	1
.c2ee	a2ee	60		rts				rts
.c2ef	a2ef					EXTShowHeader:
.c2ef	a2ef	a5 01		lda $01				lda 	1
.c2f1	a2f1	48		pha				pha
.c2f2	a2f2	a9 02		lda #$02			lda 	#2
.c2f4	a2f4	a2 f4		ldx #$f4			ldx 	#(Header_Chars & $FF)
.c2f6	a2f6	a0 a4		ldy #$a4			ldy 	#(Header_Chars >> 8)
.c2f8	a2f8	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c2fb	a2fb	a9 03		lda #$03			lda 	#3
.c2fd	a2fd	a2 5c		ldx #$5c			ldx 	#(Header_Attrs & $FF)
.c2ff	a2ff	a0 a3		ldy #$a3			ldy 	#(Header_Attrs >> 8)
.c301	a301	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c304	a304	64 01		stz $01				stz 	1
.c306	a306	a2 3f		ldx #$3f			ldx 	#16*4-1
.c308	a308					_EXTCopyLUT:
.c308	a308	bd 24 a7	lda $a724,x			lda 	Header_Palette,x
.c30b	a30b	9d 00 d8	sta $d800,x			sta 	$D800,x
.c30e	a30e	9d 40 d8	sta $d840,x			sta 	$D840,x
.c311	a311	ca		dex				dex
.c312	a312	10 f4		bpl $a308			bpl 	_EXTCopyLUT
.c314	a314	68		pla				pla
.c315	a315	60		rts				rts
.c316	a316					_ESHCopyBlock:
.c316	a316	85 01		sta $01				sta 	1
.c318	a318	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c31a	a31a	84 37		sty $37				sty 	zTemp0+1
.c31c	a31c	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c31e	a31e	85 38		sta $38				sta 	0+zTemp1
.c320	a320	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c322	a322	85 39		sta $39				sta 	1+zTemp1
.c324	a324					_ESHCopyLoop:
.c324	a324	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c326	a326	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c328	a328	f0 1b		beq $a345			beq 	_ESHUnpack
.c32a	a32a	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c32c	a32c	a9 01		lda #$01			lda 	#1 							; source add 1
.c32e	a32e	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c330	a330					_ESHNext:
.c330	a330	18		clc				clc 								; zTemp0 + A
.c331	a331	65 36		adc $36				adc 	zTemp0
.c333	a333	85 36		sta $36				sta 	zTemp0
.c335	a335	90 02		bcc $a339			bcc 	_ESHNoCarry
.c337	a337	e6 37		inc $37				inc 	zTemp0+1
.c339	a339					_ESHNoCarry:
.c339	a339	98		tya				tya 								; zTemp1 + Y
.c33a	a33a	18		clc				clc
.c33b	a33b	65 38		adc $38				adc 	zTemp1
.c33d	a33d	85 38		sta $38				sta 	zTemp1
.c33f	a33f	90 e3		bcc $a324			bcc 	_ESHCopyLoop
.c341	a341	e6 39		inc $39				inc 	zTemp1+1
.c343	a343	80 df		bra $a324			bra 	_ESHCopyLoop
.c345	a345					_ESHUnpack:
.c345	a345	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c347	a347	b1 36		lda ($36),y			lda 	(zTemp0),y
.c349	a349	aa		tax				tax
.c34a	a34a	88		dey				dey 								; byte into A
.c34b	a34b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c34d	a34d	f0 0c		beq $a35b			beq 	_ESHExit 					; exit if zero.
.c34f	a34f	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c351	a351					_ESHCopyOut:
.c351	a351	91 38		sta ($38),y			sta 	(zTemp1),y
.c353	a353	c8		iny				iny
.c354	a354	ca		dex				dex
.c355	a355	d0 fa		bne $a351			bne 	_ESHCopyOut
.c357	a357	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c359	a359	80 d5		bra $a330			bra 	_ESHNext
.c35b	a35b					_ESHExit:
.c35b	a35b	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c35c	a35c					Header_attrs:
>c35c	a35c	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c364	a364	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c374	a374	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c384	a384	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c394	a394	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3a4	a3a4	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3b4	a3b4	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3c4	a3c4	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3d4	a3d4	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3e4	a3e4	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3f4	a3f4	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c404	a404	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c414	a414	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c424	a424	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c434	a434	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c444	a444	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c454	a454	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c464	a464	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c474	a474	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c484	a484	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c494	a494	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4a4	a4a4	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4b4	a4b4	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4c4	a4c4	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4d4	a4d4	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4e4	a4e4	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4f4	a4f4					Header_chars:
>c4f4	a4f4	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c4fc	a4fc	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c50c	a50c	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c51c	a51c	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c52c	a52c	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c53c	a53c	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c54c	a54c	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c55c	a55c	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c56c	a56c	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c57c	a57c	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c58c	a58c	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c59c	a59c	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5ac	a5ac	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5bc	a5bc	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5cc	a5cc	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5dc	a5dc	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5ec	a5ec	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c5fc	a5fc	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c60c	a60c	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c61c	a61c	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c62c	a62c	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c63c	a63c	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c64c	a64c	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c65c	a65c	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c66c	a66c	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c67c	a67c	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c68c	a68c	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c69c	a69c	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6ac	a6ac	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6bc	a6bc	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6cc	a6cc	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6dc	a6dc	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6ec	a6ec	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c6fc	a6fc	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c70c	a70c	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c71c	a71c	9d ff 96 18 96 a3 ff 00
.c724	a724					Header_Palette:
>c724	a724	00 00 00 00				.dword $000000
>c728	a728	66 66 66 00				.dword $666666
>c72c	a72c	aa 00 00 00				.dword $0000aa
>c730	a730	00 aa 00 00				.dword $00aa00
>c734	a734	ea 41 c0 00				.dword $c041ea
>c738	a738	00 48 87 00				.dword $874800
>c73c	a73c	00 9c ff 00				.dword $ff9c00
>c740	a740	ff db 57 00				.dword $57dbff
>c744	a744	28 3f 3f 00				.dword $3f3f28
>c748	a748	8a aa aa 00				.dword $aaaa8a
>c74c	a74c	ff 55 55 00				.dword $5555ff
>c750	a750	55 ff 55 00				.dword $55ff55
>c754	a754	ed 8d ff 00				.dword $ff8ded
>c758	a758	00 00 ff 00				.dword $ff0000
>c75c	a75c	55 ff ff 00				.dword $ffff55
>c760	a760	ff ff ff 00				.dword $ffffff
>c764	a764	ff ff ff 00				.dword $ffffff
>c768	a768	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c76c	a76c					GRVectorTable:
>c76c	a76c	bb a9					.word	GXInitialise             ; $00 Initialise
>c76e	a76e	d5 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c770	a770	1d aa					.word	GXControlSprite          ; $02 SpriteCtl
>c772	a772	6d a9					.word	GXClearBitmap            ; $03 Clear
>c774	a774	ac ab					.word	GXSetColourMode          ; $04 Colour
>c776	a776	74 ad					.word	GXFontHandler            ; $05 DrawFont
>c778	a778	bc ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c77a	a77a	2d ae					.word	GXSelect                 ; $07 SpriteUse
>c77c	a77c	56 ae					.word	GXSelectImage            ; $08 SpriteImage
>c77e	a77e	dd af					.word	GXCollide                ; $09 SpriteCollide
>c780	a780	1f a8					.word	GRUndefined              ; $0a
>c782	a782	1f a8					.word	GRUndefined              ; $0b
>c784	a784	1f a8					.word	GRUndefined              ; $0c
>c786	a786	1f a8					.word	GRUndefined              ; $0d
>c788	a788	1f a8					.word	GRUndefined              ; $0e
>c78a	a78a	1f a8					.word	GRUndefined              ; $0f
>c78c	a78c	1f a8					.word	GRUndefined              ; $10
>c78e	a78e	1f a8					.word	GRUndefined              ; $11
>c790	a790	1f a8					.word	GRUndefined              ; $12
>c792	a792	1f a8					.word	GRUndefined              ; $13
>c794	a794	1f a8					.word	GRUndefined              ; $14
>c796	a796	1f a8					.word	GRUndefined              ; $15
>c798	a798	1f a8					.word	GRUndefined              ; $16
>c79a	a79a	1f a8					.word	GRUndefined              ; $17
>c79c	a79c	1f a8					.word	GRUndefined              ; $18
>c79e	a79e	1f a8					.word	GRUndefined              ; $19
>c7a0	a7a0	1f a8					.word	GRUndefined              ; $1a
>c7a2	a7a2	1f a8					.word	GRUndefined              ; $1b
>c7a4	a7a4	1f a8					.word	GRUndefined              ; $1c
>c7a6	a7a6	1f a8					.word	GRUndefined              ; $1d
>c7a8	a7a8	1f a8					.word	GRUndefined              ; $1e
>c7aa	a7aa	1f a8					.word	GRUndefined              ; $1f
>c7ac	a7ac	1d a8					.word	GXMove                   ; $20 Move
>c7ae	a7ae	7a aa					.word	GXLine                   ; $21 Line
>c7b0	a7b0	f5 ab					.word	GXFrameRectangle         ; $22 FrameRect
>c7b2	a7b2	f2 ab					.word	GXFillRectangle          ; $23 FillRect
>c7b4	a7b4	24 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7b6	a7b6	20 a8					.word	GXFillCircle             ; $25 FillCircle
>c7b8	a7b8	1f a8					.word	GRUndefined              ; $26
>c7ba	a7ba	1f a8					.word	GRUndefined              ; $27
>c7bc	a7bc	da ab					.word	GXPlotPoint              ; $28 Plot
>c7be	a7be	ec ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0672						gxCurrentX:
>0672								.fill 	2
.0674						gxCurrentY:
>0674								.fill 	2
.0676						gxLastX:
>0676								.fill 	2
.0678						gxLastY:
>0678								.fill 	2
.067a						gxX0:
>067a								.fill 	2
.067c						gxY0:
>067c								.fill 	2
.067e						gxX1:
>067e								.fill 	2
.0680						gxY1:
>0680								.fill 	2
.0682						gxSpritesOn:
>0682								.fill 	1
.0683						gxBitmapsOn:
>0683								.fill 	1
.0684						gxBasePage:
>0684								.fill 	1
.0685						gxSpritePage:
>0685								.fill 	1
.0686						gxHeight:
>0686								.fill 	1
.0687						gxMode:
>0687								.fill 	1
.0688						gxColour:
>0688								.fill 	1
.0689						gxEORValue:
>0689								.fill 	1
.068a						gxANDValue:
>068a								.fill 	1
.068b						gxOriginalLUTValue:
>068b								.fill 	1
.068c						gsOffset:
>068c								.fill 	1
.068d						GSCurrentSpriteID:
>068d								.fill 	1
.068e						GSCurrentSpriteAddr:
>068e								.fill 	2
.0690						GXSpriteOffsetBase:
>0690								.fill 	2
.0692						GXSpriteLow:
>0692								.fill 	64
.06d2						GXSpriteHigh:
>06d2								.fill 	64
.c7c0	a7c0					Export_GXGraphicDraw:
.c7c0	a7c0	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7c2	a7c2	b0 06		bcs $a7ca			bcs 	_GDCoordinate
.c7c4	a7c4	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7c6	a7c6	84 37		sty $37				sty 	gxzTemp0+1
.c7c8	a7c8	80 4b		bra $a815			bra 	_GDExecuteA 				; and execute
.c7ca	a7ca					_GDCoordinate:
.c7ca	a7ca	48		pha				pha 								; save AXY
.c7cb	a7cb	da		phx				phx
.c7cc	a7cc	5a		phy				phy
.c7cd	a7cd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7cf	a7cf					_GDCopy1:
.c7cf	a7cf	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c7d2	a7d2	9d 76 06	sta $0676,x			sta 	gxLastX,x
.c7d5	a7d5	ca		dex				dex
.c7d6	a7d6	10 f7		bpl $a7cf			bpl 	_GDCopy1
.c7d8	a7d8	68		pla				pla 								; update Y
.c7d9	a7d9	8d 74 06	sta $0674			sta 	gxCurrentY
.c7dc	a7dc	9c 75 06	stz $0675			stz 	gxCurrentY+1
.c7df	a7df	68		pla				pla
.c7e0	a7e0	8d 72 06	sta $0672			sta 	gxCurrentX
.c7e3	a7e3	68		pla				pla 								; get A (command+X.1) back
.c7e4	a7e4	48		pha				pha
.c7e5	a7e5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7e7	a7e7	8d 73 06	sta $0673			sta 	gxCurrentX+1
.c7ea	a7ea	68		pla				pla 								; get command back
.c7eb	a7eb	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7ed	a7ed	48		pha				pha 								; push back.
.c7ee	a7ee	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7f0	a7f0	f0 17		beq $a809			beq 	_GDCopyToWorkArea
.c7f2	a7f2	ad 73 06	lda $0673			lda 	gxCurrentX+1 				; X < 256 X okay
.c7f5	a7f5	f0 07		beq $a7fe			beq 	_GDCheckY
.c7f7	a7f7	ad 72 06	lda $0672			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c7fa	a7fa	c9 40		cmp #$40			cmp 	#64
.c7fc	a7fc	b0 08		bcs $a806			bcs 	_GDError1
.c7fe	a7fe					_GDCheckY:
.c7fe	a7fe	ad 74 06	lda $0674			lda 	gxCurrentY 					; check Y < Height.
.c801	a801	cd 86 06	cmp $0686			cmp 	gxHeight
.c804	a804	90 03		bcc $a809			bcc 	_GDCopyToWorkArea
.c806	a806					_GDError1:
.c806	a806	68		pla				pla
.c807	a807					_GDError2:
.c807	a807	38		sec				sec
.c808	a808	60		rts				rts
.c809	a809					_GDCopyToWorkArea:
.c809	a809	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c80b	a80b					_GDCopy2:
.c80b	a80b	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c80e	a80e	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c811	a811	ca		dex				dex
.c812	a812	10 f7		bpl $a80b			bpl 	_GDCopy2
.c814	a814	68		pla				pla 								; get command
.c815	a815					_GDExecuteA:
.c815	a815	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c817	a817	b0 ee		bcs $a807			bcs 	_GDError2
.c819	a819	aa		tax				tax
.c81a	a81a	7c 6c a7	jmp ($a76c,x)			jmp 	(GRVectorTable,x)
.c81d	a81d					GXMove:
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GRUndefined:
>c81f	a81f	db						.byte 	$DB 						; causes a break in the emulator
.c820	a820					GXFillCircle:
.c820	a820	a9 ff		lda #$ff			lda 	#255
.c822	a822	80 02		bra $a826			bra 	GXCircle
.c824	a824					GXFrameCircle:
.c824	a824	a9 00		lda #$00			lda 	#0
.c826	a826					GXCircle:
.c826	a826	8d 15 07	sta $0715			sta 	gxIsFillMode					; save Fill flag
.c829	a829	ad 83 06	lda $0683			lda 	gxBitmapsOn
.c82c	a82c	f0 26		beq $a854			beq 	_GXCFail
.c82e	a82e	20 84 b0	jsr $b084			jsr 	GXSortXY 					; topleft/bottomright
.c831	a831	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.c834	a834	20 26 a9	jsr $a926			jsr 	GXCircleSetup 				; set up for drawing
.c837	a837	9c 16 07	stz $0716			stz 	gxYChanged
.c83a	a83a					_GXCircleDraw:
.c83a	a83a	ad 13 07	lda $0713			lda 	gXCentre					; while x <= y
.c83d	a83d	cd 14 07	cmp $0714			cmp 	gYCentre
.c840	a840	90 0a		bcc $a84c			bcc 	_GXCircleContinue
.c842	a842	d0 03		bne $a847			bne 	_GXNoLast
.c844	a844	20 59 a8	jsr $a859			jsr 	GXPlot1
.c847	a847					_GXNoLast:
.c847	a847	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; close the bitmap
.c84a	a84a	18		clc				clc
.c84b	a84b	60		rts				rts
.c84c	a84c					_GXCircleContinue:
.c84c	a84c	20 56 a8	jsr $a856			jsr 	GXPlot2 					; draw it
.c84f	a84f	20 d3 a8	jsr $a8d3			jsr 	GXCircleMove 				; adjust the coordinates
.c852	a852	80 e6		bra $a83a			bra 	_GXCircleDraw
.c854	a854					_GXCFail:
.c854	a854	38		sec				sec
.c855	a855	60		rts				rts
.c856	a856					GXPlot2:
.c856	a856	20 59 a8	jsr $a859			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c859	a859					GXPlot1:
.c859	a859	ad 14 07	lda $0714			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.c85c	a85c	f0 03		beq $a861			beq 	_GXPlot1Only
.c85e	a85e	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; plot and negate
.c861	a861					_GXPlot1Only:
.c861	a861	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; twice, undoing negation
.c864	a864	ad 13 07	lda $0713			lda 	gXCentre 						; swap X and Y
.c867	a867	ae 14 07	ldx $0714			ldx	 	gYCentre
.c86a	a86a	8d 14 07	sta $0714			sta 	gYCentre
.c86d	a86d	8e 13 07	stx $0713			stx 	gXCentre
.c870	a870	ad 16 07	lda $0716			lda 	gxYChanged 						; toggle Y Changed flag
.c873	a873	a9 ff		lda #$ff			lda 	#$FF
.c875	a875	8d 16 07	sta $0716			sta 	gxYChanged
.c878	a878	60		rts				rts
.c879	a879	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; do once
.c87c	a87c	60		rts				rts
.c87d	a87d	ad 15 07	lda $0715	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c880	a880	f0 05		beq $a887			beq 	_GXPlot0Always
.c882	a882	ad 16 07	lda $0716			lda 	gxYChanged						; fill mode, only draw if changed.
.c885	a885	f0 2d		beq $a8b4			beq 	GXPlot0Exit
.c887	a887					_GXPlot0Always:
.c887	a887	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c889	a889	ad 14 07	lda $0714			lda 	gYCentre
.c88c	a88c	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c88f	a88f	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c891	a891	ad 13 07	lda $0713			lda 	gXCentre
.c894	a894	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c897	a897	48		pha				pha 									; save last offset X
.c898	a898	20 6c af	jsr $af6c			jsr 	GXPositionCalc 					; calculate position/offset.
.c89b	a89b	68		pla				pla
.c89c	a89c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c89d	a89d	85 36		sta $36				sta 	gxzTemp0
.c89f	a89f	64 37		stz $37				stz 	gxzTemp0+1
.c8a1	a8a1	26 37		rol $37				rol 	gxzTemp0+1
.c8a3	a8a3	ad 15 07	lda $0715			lda 	gxIsFillMode
.c8a6	a8a6	69 80		adc #$80			adc 	#128
.c8a8	a8a8	20 45 ac	jsr $ac45			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8ab	a8ab	38		sec				sec 									; GY = -GY
.c8ac	a8ac	a9 00		lda #$00			lda 	#0
.c8ae	a8ae	ed 14 07	sbc $0714			sbc 	gYCentre
.c8b1	a8b1	8d 14 07	sta $0714			sta 	gYCentre
.c8b4	a8b4					GXPlot0Exit:
.c8b4	a8b4	60		rts				rts
.c8b5	a8b5					GXSubCopy:
.c8b5	a8b5	85 36		sta $36				sta 	gxzTemp0
.c8b7	a8b7	64 37		stz $37				stz 	gxzTemp0+1
.c8b9	a8b9	29 80		and #$80			and 	#$80
.c8bb	a8bb	f0 02		beq $a8bf			beq 	_GXNoSx
.c8bd	a8bd	c6 37		dec $37				dec 	gxzTemp0+1
.c8bf	a8bf					_GXNoSx:
.c8bf	a8bf	38		sec				sec
.c8c0	a8c0	bd 7e 06	lda $067e,x			lda 	gXX1,x
.c8c3	a8c3	e5 36		sbc $36				sbc 	gxzTemp0
.c8c5	a8c5	9d 7a 06	sta $067a,x			sta 	gXX0,x
.c8c8	a8c8	bd 7f 06	lda $067f,x			lda 	gXX1+1,x
.c8cb	a8cb	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8cd	a8cd	9d 7b 06	sta $067b,x			sta 	gXX0+1,x
.c8d0	a8d0	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8d2	a8d2	60		rts				rts
.c8d3	a8d3					GXCircleMove:
.c8d3	a8d3	9c 16 07	stz $0716			stz 	gxYChanged 					; clear Y changed flag
.c8d6	a8d6	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8d8	a8d8	10 0d		bpl $a8e7			bpl 	_GXEMPositive
.c8da	a8da	ee 13 07	inc $0713			inc 	gXCentre 					; X++
.c8dd	a8dd	ad 13 07	lda $0713			lda 	gXCentre
.c8e0	a8e0	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8e3	a8e3	a9 06		lda #$06			lda 	#6  						; and add 6
.c8e5	a8e5	80 15		bra $a8fc			bra 	_GXEMAddD
.c8e7	a8e7					_GXEMPositive:
.c8e7	a8e7	ee 13 07	inc $0713			inc 	gXCentre					; X++
.c8ea	a8ea	ce 14 07	dec $0714			dec 	gyCentre 					; Y--
.c8ed	a8ed	38		sec				sec 								; calculate X-Y
.c8ee	a8ee	ad 13 07	lda $0713			lda 	gXCentre
.c8f1	a8f1	ed 14 07	sbc $0714			sbc 	gYCentre
.c8f4	a8f4	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8f7	a8f7	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c8f9	a8f9	ce 16 07	dec $0716			dec 	gxYChanged
.c8fc	a8fc					_GXEMAddD:
.c8fc	a8fc	18		clc				clc
.c8fd	a8fd	65 38		adc $38				adc 	gxzTemp1
.c8ff	a8ff	85 38		sta $38				sta 	gxzTemp1
.c901	a901	90 02		bcc $a905			bcc 	_GXEMNoCarry
.c903	a903	e6 39		inc $39				inc 	gxzTemp1+1
.c905	a905					_GXEMNoCarry:
.c905	a905	60		rts				rts
.c906	a906					_GXAdd4TimesToD:
.c906	a906	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c908	a908	29 80		and #$80			and 	#$80
.c90a	a90a	f0 02		beq $a90e			beq 	_GXA4Unsigned
.c90c	a90c	a9 ff		lda #$ff			lda 	#$FF
.c90e	a90e					_GXA4Unsigned:
.c90e	a90e	85 37		sta $37				sta 	gxzTemp0+1
.c910	a910	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c912	a912	26 37		rol $37				rol 	gxzTemp0+1
.c914	a914	06 36		asl $36				asl 	gxzTemp0
.c916	a916	26 37		rol $37				rol 	gxzTemp0+1
.c918	a918	18		clc				clc 								; add
.c919	a919	a5 36		lda $36				lda		gxzTemp0
.c91b	a91b	65 38		adc $38				adc 	gxzTemp1
.c91d	a91d	85 38		sta $38				sta 	gxzTemp1
.c91f	a91f	a5 37		lda $37				lda		gxzTemp0+1
.c921	a921	65 39		adc $39				adc 	gxzTemp1+1
.c923	a923	85 39		sta $39				sta 	gxzTemp1+1
.c925	a925	60		rts				rts
.c926	a926					GXCircleSetup:
.c926	a926	38		sec				sec
.c927	a927	ad 80 06	lda $0680			lda 	gxY1
.c92a	a92a	ed 7c 06	sbc $067c			sbc 	gxY0
.c92d	a92d	4a		lsr a				lsr 	a
.c92e	a92e	8d 12 07	sta $0712			sta 	gxRadius
.c931	a931	a2 00		ldx #$00			ldx 	#0
.c933	a933	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c936	a936	a2 02		ldx #$02			ldx 	#2
.c938	a938	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c93b	a93b	9c 13 07	stz $0713			stz 	gXCentre
.c93e	a93e	ad 12 07	lda $0712			lda 	gxRadius
.c941	a941	8d 14 07	sta $0714			sta 	gYCentre
.c944	a944	0a		asl a				asl 	a 							; R x 2
.c945	a945	85 36		sta $36				sta 	gxzTemp0
.c947	a947	38		sec				sec
.c948	a948	a9 03		lda #$03			lda 	#3
.c94a	a94a	e5 36		sbc $36				sbc 	gxzTemp0
.c94c	a94c	85 38		sta $38				sta 	gxzTemp1
.c94e	a94e	a9 00		lda #$00			lda 	#0
.c950	a950	e9 00		sbc #$00			sbc 	#0
.c952	a952	85 39		sta $39				sta 	gxzTemp1+1
.c954	a954	60		rts				rts
.c955	a955					_GXCalculateCentre:
.c955	a955	38		sec				sec
.c956	a956	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c959	a959	7d 7a 06	adc $067a,x			adc 	gXX0,x
.c95c	a95c	9d 7e 06	sta $067e,x			sta 	gXX1,x
.c95f	a95f	bd 7f 06	lda $067f,x			lda 	gXX1+1,x
.c962	a962	7d 7b 06	adc $067b,x			adc 	gXX0+1,x
.c965	a965	4a		lsr a				lsr 	a
.c966	a966	9d 7f 06	sta $067f,x			sta 	gXX1+1,x
.c969	a969	7e 7e 06	ror $067e,x			ror 	gXX1,x
.c96c	a96c	60		rts				rts
.0712						gxRadius:
>0712								.fill 	1
.0713						gXCentre:
>0713								.fill 	1
.0714						gYCentre:
>0714								.fill 	1
.0715						gxIsFillMode:
>0715								.fill 	1
.0716						gxYChanged:
>0716								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c96d	a96d					GXClearBitmap:
.c96d	a96d	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP running.
.c970	a970	f0 24		beq $a996			beq 	_GXCBFail
.c972	a972	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start access
.c975	a975	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c977	a977	ad 86 06	lda $0686			lda 	gxHeight
.c97a	a97a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c97c	a97c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c97e	a97e					_GXCalcLastPage:
.c97e	a97e	98		tya				tya 								; add to base page
.c97f	a97f	18		clc				clc
.c980	a980	6d 84 06	adc $0684			adc 	gxBasePage
.c983	a983	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c985	a985					_GXClearAll:
.c985	a985	20 98 a9	jsr $a998			jsr 	_GXClearBlock 				; clear 8k block
.c988	a988	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c98a	a98a	a5 0b		lda $0b				lda 	GXEditSlot
.c98c	a98c	cd 84 06	cmp $0684			cmp 	gxBasePage 					; until before base page
.c98f	a98f	b0 f4		bcs $a985			bcs 	_GXClearAll
.c991	a991	20 64 af	jsr $af64			jsr 	GXCloseBitmap	 			; stop access
.c994	a994	18		clc				clc
.c995	a995	60		rts				rts
.c996	a996					_GXCBFail:
.c996	a996	38		sec				sec
.c997	a997	60		rts				rts
.c998	a998					_GXClearBlock:
.c998	a998	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c99a	a99a	85 38		sta $38				sta 	0+gxzTemp1
.c99c	a99c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c99e	a99e	85 39		sta $39				sta 	1+gxzTemp1
.c9a0	a9a0					_GXCB0:
.c9a0	a9a0	a5 36		lda $36				lda 	gxzTemp0
.c9a2	a9a2	a0 00		ldy #$00			ldy 	#0
.c9a4	a9a4					_GXCB1:
.c9a4	a9a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a6	a9a6	c8		iny				iny
.c9a7	a9a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a9	a9a9	c8		iny				iny
.c9aa	a9aa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ac	a9ac	c8		iny				iny
.c9ad	a9ad	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9af	a9af	c8		iny				iny
.c9b0	a9b0	d0 f2		bne $a9a4			bne 	_GXCB1
.c9b2	a9b2	e6 39		inc $39				inc 	gxzTemp1+1
.c9b4	a9b4	a5 39		lda $39				lda 	gxzTemp1+1
.c9b6	a9b6	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9b8	a9b8	d0 e6		bne $a9a0			bne 	_GXCB0
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXInitialise:
.c9bb	a9bb	64 01		stz $01				stz 	1
.c9bd	a9bd	a9 01		lda #$01			lda 	#1
.c9bf	a9bf	8d 00 d0	sta $d000			sta 	$D000
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	9c 82 06	stz $0682			stz 	GXSpritesOn
.c9c6	a9c6	9c 83 06	stz $0683			stz 	GXBitmapsOn
.c9c9	a9c9	a2 0f		ldx #$0f			ldx 	#15
.c9cb	a9cb					_GXIClear:
.c9cb	a9cb	9e 72 06	stz $0672,x			stz 	gxCurrentX,x
.c9ce	a9ce	ca		dex				dex
.c9cf	a9cf	10 fa		bpl $a9cb			bpl 	_GXIClear
.c9d1	a9d1	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.c9d4	a9d4	60		rts				rts
.c9d5	a9d5					GXControlBitmap:
.c9d5	a9d5	64 01		stz $01				stz 	1
.c9d7	a9d7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9d9	a9d9	29 01		and #$01			and 	#1 							; set bitmap flag
.c9db	a9db	8d 83 06	sta $0683			sta 	gxBitmapsOn
.c9de	a9de	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9df	a9df	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9e2	a9e2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9e4	a9e4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9e6	a9e6	90 02		bcc $a9ea			bcc 	_CBNotOn
.c9e8	a9e8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9ea	a9ea					_CBNotOn:
.c9ea	a9ea	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9ed	a9ed	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9ef	a9ef	29 07		and #$07			and 	#7
.c9f1	a9f1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9f4	a9f4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c9f6	a9f6	d0 02		bne $a9fa			bne 	_CBNotDefault
.c9f8	a9f8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c9fa	a9fa					_CBNotDefault:
.c9fa	a9fa	8d 84 06	sta $0684			sta 	gxBasePage
.c9fd	a9fd	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca00	aa00	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca02	aa02	8d 03 d1	sta $d103			sta 	$D103
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0
.ca07	aa07	8d 02 d1	sta $d102			sta 	$D102
.ca0a	aa0a	9c 01 d1	stz $d101			stz 	$D101
.ca0d	aa0d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca0f	aa0f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca12	aa12	29 01		and #$01			and 	#1
.ca14	aa14	f0 02		beq $aa18			beq 	_CBHaveHeight
.ca16	aa16	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca18	aa18					_CBHaveHeight
.ca18	aa18	8e 86 06	stx $0686			stx 	gxHeight
.ca1b	aa1b	18		clc				clc
.ca1c	aa1c	60		rts				rts
.ca1d	aa1d					GXControlSprite:
.ca1d	aa1d	64 01		stz $01				stz 	1
.ca1f	aa1f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca21	aa21	29 01		and #$01			and 	#1 							; set sprites flag
.ca23	aa23	8d 82 06	sta $0682			sta 	gxSpritesOn
.ca26	aa26	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca27	aa27	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca2a	aa2a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca2c	aa2c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca2e	aa2e	90 02		bcc $aa32			bcc 	_CSNotOn
.ca30	aa30	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca32	aa32					_CSNotOn:
.ca32	aa32	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca35	aa35	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca37	aa37	d0 02		bne $aa3b			bne 	_CSNotDefault
.ca39	aa39	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca3b	aa3b					_CSNotDefault:
.ca3b	aa3b	8d 85 06	sta $0685			sta 	gxSpritePage
.ca3e	aa3e	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca41	aa41	a5 36		lda $36				lda 	zTemp0
.ca43	aa43	8d 90 06	sta $0690			sta 	GXSpriteOffsetBase
.ca46	aa46	a5 37		lda $37				lda 	zTemp0+1
.ca48	aa48	8d 91 06	sta $0691			sta 	GXSpriteOffsetBase+1
.ca4b	aa4b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca4d	aa4d					_CSClear:
.ca4d	aa4d	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca50	aa50	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca53	aa53	ca		dex				dex
.ca54	aa54	d0 f7		bne $aa4d			bne 	_CSClear
.ca56	aa56	9c 8f 06	stz $068f			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca59	aa59	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.ca5c	aa5c	18		clc				clc
.ca5d	aa5d	60		rts				rts
.ca5e	aa5e					GXCalculateBaseAddress:
.ca5e	aa5e	85 36		sta $36				sta 	gxzTemp0
.ca60	aa60	64 37		stz $37				stz 	gxzTemp0+1
.ca62	aa62	a9 05		lda #$05			lda 	#5
.ca64	aa64					_GXShift:
.ca64	aa64	06 36		asl $36				asl 	gxzTemp0
.ca66	aa66	26 37		rol $37				rol 	gxzTemp0+1
.ca68	aa68	3a		dec a				dec		a
.ca69	aa69	d0 f9		bne $aa64			bne 	_GXShift
.ca6b	aa6b	60		rts				rts
.ca6c	aa6c					GXClearSpriteStore:
.ca6c	aa6c	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca6e	aa6e					_GXCSSLoop:
.ca6e	aa6e	9e d2 06	stz $06d2,x			stz 	GXSpriteHigh,x
.ca71	aa71	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca73	aa73	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.ca76	aa76	ca		dex				dex
.ca77	aa77	10 f5		bpl $aa6e			bpl 	_GXCSSLoop
.ca79	aa79	60		rts				rts
.ca7a	aa7a					GXLine:
.ca7a	aa7a	ad 83 06	lda $0683			lda 	GXBitmapsOn
.ca7d	aa7d	f0 28		beq $aaa7			beq 	_GXLFail
.ca7f	aa7f	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ca82	aa82	20 a2 b0	jsr $b0a2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca85	aa85	20 4d ab	jsr $ab4d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca88	aa88	20 6c af	jsr $af6c			jsr 	GXPositionCalc 				; calculate position/offset.
.ca8b	aa8b					_GXDrawLoop:
.ca8b	aa8b	ac 8c 06	ldy $068c			ldy 	gsOffset 					; draw the pixel
.ca8e	aa8e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca90	aa90	2d 8a 06	and $068a			and 	gxANDValue
.ca93	aa93	4d 89 06	eor $0689			eor 	gxEORValue
.ca96	aa96	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ca98	aa98	20 a9 aa	jsr $aaa9			jsr 	GXLineIsComplete 			; is the line complete ?
.ca9b	aa9b	f0 05		beq $aaa2			beq 	_GXLExit
.ca9d	aa9d	20 c4 aa	jsr $aac4			jsr 	GXLineAdvance 				; code as per advance method
.caa0	aaa0	80 e9		bra $aa8b			bra 	_GXDrawLoop
.caa2	aaa2					_GXLExit:
.caa2	aaa2	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.caa5	aaa5	18		clc				clc
.caa6	aaa6	60		rts				rts
.caa7	aaa7					_GXLFail:
.caa7	aaa7	38		sec				sec
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXLineIsComplete:
.caa9	aaa9	ad 19 07	lda $0719			lda 	GXIsDiffYLarger 			; is dy larger
.caac	aaac	d0 0f		bne $aabd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.caae	aaae	ad 7a 06	lda $067a			lda 	GXX0 						; compare X, LSB and MSB
.cab1	aab1	4d 7e 06	eor $067e			eor 	GXX1
.cab4	aab4	d0 06		bne $aabc			bne 	_GXLICExit
.cab6	aab6	ad 7b 06	lda $067b			lda 	GXX0+1
.cab9	aab9	4d 7f 06	eor $067f			eor 	GXX1+1
.cabc	aabc					_GXLICExit:
.cabc	aabc	60		rts				rts
.cabd	aabd					_GXLICCompareY:
.cabd	aabd	ad 80 06	lda $0680			lda 	GXY1
.cac0	aac0	4d 7c 06	eor $067c			eor 	GXY0
.cac3	aac3	60		rts				rts
.cac4	aac4					GXLineAdvance:
.cac4	aac4	18		clc				clc 								; add adjust to position
.cac5	aac5	ad 1b 07	lda $071b			lda 	GXPosition
.cac8	aac8	6d 1c 07	adc $071c			adc 	GXAdjust
.cacb	aacb	8d 1b 07	sta $071b			sta 	GXPosition
.cace	aace	9c 1e 07	stz $071e			stz 	GXAddSelect 				; clear add select flag
.cad1	aad1	b0 05		bcs $aad8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cad3	aad3	cd 1d 07	cmp $071d			cmp 	GXTotal 					; if exceeded total
.cad6	aad6	90 0a		bcc $aae2			bcc 	_GXLANoExtra
.cad8	aad8					_GXLAOverflow:
.cad8	aad8	ce 1e 07	dec $071e			dec 	GXAddSelect 				; set addselect to $FF
.cadb	aadb	38		sec				sec 								; subtract total and write back
.cadc	aadc	ed 1d 07	sbc $071d			sbc 	GXTotal
.cadf	aadf	8d 1b 07	sta $071b			sta 	GXPosition
.cae2	aae2					_GXLANoExtra:
.cae2	aae2	ad 19 07	lda $0719			lda 	GXIsDiffYLarger
.cae5	aae5	f0 0d		beq $aaf4			beq 	_GXDXLarger
.cae7	aae7	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caea	aaea	ad 1e 07	lda $071e			lda 	GXAddSelect
.caed	aaed	f0 10		beq $aaff			beq 	_GXLAExit
.caef	aaef	20 00 ab	jsr $ab00			jsr 	GXAdjustX
.caf2	aaf2	80 0b		bra $aaff			bra 	_GXLAExit
.caf4	aaf4					_GXDXLarger:
.caf4	aaf4	20 00 ab	jsr $ab00			jsr 	GXAdjustX
.caf7	aaf7	ad 1e 07	lda $071e			lda 	GXAddSelect
.cafa	aafa	f0 03		beq $aaff			beq 	_GXLAExit
.cafc	aafc	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caff	aaff					_GXLAExit:
.caff	aaff	60		rts				rts
.cb00	ab00					GXAdjustX:
.cb00	ab00	ad 1a 07	lda $071a			lda 	GXDXNegative
.cb03	ab03	10 25		bpl $ab2a			bpl 	_GXAXRight
.cb05	ab05	ad 7a 06	lda $067a			lda 	GXX0
.cb08	ab08	d0 03		bne $ab0d			bne 	_GXAXNoBorrow
.cb0a	ab0a	ce 7b 06	dec $067b			dec 	GXX0+1
.cb0d	ab0d					_GXAXNoBorrow:
.cb0d	ab0d	ce 7a 06	dec $067a			dec 	GXX0
.cb10	ab10	ce 8c 06	dec $068c			dec 	gsOffset 					; pixel left
.cb13	ab13	ad 8c 06	lda $068c			lda 	gsOffset
.cb16	ab16	c9 ff		cmp #$ff			cmp 	#$FF
.cb18	ab18	d0 0f		bne $ab29			bne 	_GXAYExit 					; underflow
.cb1a	ab1a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb1c	ab1c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb1e	ab1e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb20	ab20	b0 07		bcs $ab29			bcs 	_GXAYExit
.cb22	ab22	18		clc				clc
.cb23	ab23	69 20		adc #$20			adc 	#$20 						; fix up
.cb25	ab25	85 3d		sta $3d				sta 	gxzScreen+1
.cb27	ab27	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb29	ab29					_GXAYExit:
.cb29	ab29	60		rts				rts
.cb2a	ab2a					_GXAXRight:
.cb2a	ab2a	ee 7a 06	inc $067a			inc 	GXX0
.cb2d	ab2d	d0 03		bne $ab32			bne 	_GXAXNoCarry
.cb2f	ab2f	ee 7b 06	inc $067b			inc 	GXX0+1
.cb32	ab32					_GXAXNoCarry:
.cb32	ab32	ee 8c 06	inc $068c			inc 	gsOffset 					; pixel right
.cb35	ab35	d0 0e		bne $ab45			bne 	_GXAXExit 					; if not overflowed, exit.
.cb37	ab37	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb39	ab39	a5 3d		lda $3d				lda 	gxzScreen+1
.cb3b	ab3b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb3d	ab3d	90 06		bcc $ab45			bcc 	_GXAXExit
.cb3f	ab3f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb41	ab41	85 3d		sta $3d				sta 	gxzScreen+1
.cb43	ab43	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb45	ab45					_GXAXExit:
.cb45	ab45	60		rts				rts
.cb46	ab46					GXIncrementY:
.cb46	ab46	ee 7c 06	inc $067c			inc 	GXY0
.cb49	ab49	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					GXLineSetup:
.cb4d	ab4d	ad 80 06	lda $0680			lda 	GXY1
.cb50	ab50	38		sec				sec
.cb51	ab51	ed 7c 06	sbc $067c			sbc 	GXY0
.cb54	ab54	4a		lsr a				lsr 	a
.cb55	ab55	8d 18 07	sta $0718			sta 	GXDiffY
.cb58	ab58	9c 1a 07	stz $071a			stz 	GXDXNegative 				; clear -ve flag
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ad 7e 06	lda $067e			lda 	GXX1
.cb5f	ab5f	ed 7a 06	sbc $067a			sbc 	GXX0
.cb62	ab62	8d 17 07	sta $0717			sta 	GXDiffX
.cb65	ab65	ad 7f 06	lda $067f			lda 	GXX1+1 						; calculate MSB
.cb68	ab68	ed 7b 06	sbc $067b			sbc 	GXX0+1
.cb6b	ab6b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb6c	ab6c	6e 17 07	ror $0717			ror 	GXDiffX
.cb6f	ab6f	0a		asl a				asl 	a
.cb70	ab70	10 0c		bpl $ab7e			bpl 	_GDXNotNegative
.cb72	ab72	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb74	ab74	38		sec				sec
.cb75	ab75	ed 17 07	sbc $0717			sbc 	GXDiffX
.cb78	ab78	8d 17 07	sta $0717			sta 	GXDiffX
.cb7b	ab7b	ce 1a 07	dec $071a			dec 	GXDXNegative 				; -ve flag = $FF.
.cb7e	ab7e					_GDXNotNegative:
.cb7e	ab7e	9c 19 07	stz $0719			stz 	GXIsDiffYLarger 			; clear larger flag
.cb81	ab81	ad 18 07	lda $0718			lda 	GXDiffY 					; set adjust and total.
.cb84	ab84	8d 1c 07	sta $071c			sta 	GXAdjust
.cb87	ab87	ad 17 07	lda $0717			lda 	GXDiffX
.cb8a	ab8a	8d 1d 07	sta $071d			sta 	GXTotal
.cb8d	ab8d	ad 18 07	lda $0718			lda 	GXDiffY 					; if dy > dx
.cb90	ab90	cd 17 07	cmp $0717			cmp 	GXDiffX
.cb93	ab93	90 0f		bcc $aba4			bcc 	_GDXNotLarger
.cb95	ab95	ce 19 07	dec $0719			dec 	GXIsDiffYLarger 			; set the dy larger flag
.cb98	ab98	ad 17 07	lda $0717			lda 	GXDiffX 					; set adjust and total other way round
.cb9b	ab9b	8d 1c 07	sta $071c			sta 	GXAdjust
.cb9e	ab9e	ad 18 07	lda $0718			lda 	GXDiffY
.cba1	aba1	8d 1d 07	sta $071d			sta 	GXTotal
.cba4	aba4					_GDXNotLarger:
.cba4	aba4	ad 1d 07	lda $071d			lda 	GXTotal
.cba7	aba7	4a		lsr a				lsr 	a
.cba8	aba8	8d 1b 07	sta $071b			sta 	GXPosition
.cbab	abab	60		rts				rts
.0717						GXDiffX:
>0717								.fill 	1
.0718						GXDiffY:
>0718								.fill 	1
.0719						GXIsDiffYLarger:
>0719								.fill 	1
.071a						GXDXNegative:
>071a								.fill 	1
.071b						GXPosition:
>071b								.fill 	1
.071c						GXAdjust:
>071c								.fill 	1
.071d						GXTotal:
>071d								.fill 	1
.071e						GXAddSelect:
>071e								.fill 	1
.cbac	abac					GXSetColourMode:
.cbac	abac	a6 36		ldx $36				ldx 	gxzTemp0
.cbae	abae	8e 88 06	stx $0688			stx 	gxColour 								; set colour
.cbb1	abb1	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbb3	abb3	8d 87 06	sta $0687			sta 	gxMode 									; set mode
.cbb6	abb6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbb8	abb8	9c 8a 06	stz $068a			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbbb	abbb	ae 88 06	ldx $0688			ldx 	gxColour
.cbbe	abbe	8e 89 06	stx $0689			stx 	gxEORValue
.cbc1	abc1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbc3	abc3	90 03		bcc $abc8			bcc 	_GXSDCNotAndColour
.cbc5	abc5	8e 8a 06	stx $068a			stx 	gxANDValue
.cbc8	abc8					_GXSDCNotAndColour:
.cbc8	abc8	d0 03		bne $abcd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbca	abca	9c 89 06	stz $0689			stz 	gxEORValue
.cbcd	abcd					_GXSDCNotAnd:
.cbcd	abcd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbce	abce	90 08		bcc $abd8			bcc 	_GXSDCNoFlip
.cbd0	abd0	ad 8a 06	lda $068a			lda	 	gxANDValue
.cbd3	abd3	49 ff		eor #$ff			eor 	#$FF
.cbd5	abd5	8d 8a 06	sta $068a			sta 	gxANDValue
.cbd8	abd8					_GXSDCNoFlip:
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					GXPlotPoint:
.cbda	abda	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbdd	abdd	20 6c af	jsr $af6c			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.cbe0	abe0	ac 8c 06	ldy $068c			ldy 	gsOffset
.cbe3	abe3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbe5	abe5	2d 8a 06	and $068a			and 	gxANDValue
.cbe8	abe8	4d 89 06	eor $0689			eor 	gxEORValue
.cbeb	abeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbed	abed	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbf0	abf0	18		clc				clc
.cbf1	abf1	60		rts				rts
.cbf2	abf2					GXFillRectangle:
.cbf2	abf2	38		sec				sec
.cbf3	abf3	80 01		bra $abf6			bra 	GXRectangle
.cbf5	abf5					GXFrameRectangle:
.cbf5	abf5	18		clc				clc
.cbf6	abf6					GXRectangle:
.cbf6	abf6	ad 83 06	lda $0683			lda 	gxBitmapsOn
.cbf9	abf9	f0 35		beq $ac30			beq 	_GXRFail
.cbfb	abfb	08		php				php 								; save Fill flag (CS)
.cbfc	abfc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbff	abff	20 84 b0	jsr $b084			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc02	ac02	20 6c af	jsr $af6c			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.cc05	ac05	38		sec				sec 								; sec = Draw line
.cc06	ac06	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc09	ac09	ad 7c 06	lda $067c			lda 	gxY0 						; reached end of rectangle ?
.cc0c	ac0c	cd 80 06	cmp $0680			cmp 	gxY1
.cc0f	ac0f	f0 19		beq $ac2a			beq 	_GXRectangleExit
.cc11	ac11					_GXRectLoop:
.cc11	ac11	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown 			; down one.
.cc14	ac14	ee 7c 06	inc $067c			inc 	gxY0 						; change Y pos
.cc17	ac17	ad 7c 06	lda $067c			lda 	gxY0 						; reached last line
.cc1a	ac1a	cd 80 06	cmp $0680			cmp 	gXY1
.cc1d	ac1d	f0 07		beq $ac26			beq 	_GXLastLine
.cc1f	ac1f	28		plp				plp 								; get flag back
.cc20	ac20	08		php				php
.cc21	ac21	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc24	ac24	80 eb		bra $ac11			bra 	_GXRectLoop
.cc26	ac26					_GXLastLine:
.cc26	ac26	38		sec				sec
.cc27	ac27	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0
.cc2a	ac2a					_GXRectangleExit:
.cc2a	ac2a	68		pla				pla 								; throw fill flag.
.cc2b	ac2b	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXRFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXDrawLineX1X0:
.cc32	ac32	08		php				php 								; save solid/either-end
.cc33	ac33	38		sec				sec
.cc34	ac34	ad 7e 06	lda $067e			lda		gXX1
.cc37	ac37	ed 7a 06	sbc $067a			sbc 	gXX0
.cc3a	ac3a	85 36		sta $36				sta 	gxzTemp0
.cc3c	ac3c	ad 7f 06	lda $067f			lda 	gXX1+1
.cc3f	ac3f	ed 7b 06	sbc $067b			sbc 	gXX0+1
.cc42	ac42	85 37		sta $37				sta 	gxzTemp0+1
.cc44	ac44	28		plp				plp
.cc45	ac45					GXDrawLineTemp0:
.cc45	ac45	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.cc47	ac47	48		pha				pha
.cc48	ac48	a5 3d		lda $3d				lda 	gxzScreen+1
.cc4a	ac4a	48		pha				pha
.cc4b	ac4b	ad 8c 06	lda $068c			lda 	gsOffset
.cc4e	ac4e	48		pha				pha
.cc4f	ac4f	a5 0b		lda $0b				lda 	GXEditSlot
.cc51	ac51	48		pha				pha
.cc52	ac52	ac 8c 06	ldy $068c			ldy 	gsOffset 					; Y offset
.cc55	ac55	90 1e		bcc $ac75			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc57	ac57					_GXDLTLine:
.cc57	ac57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc59	ac59	2d 8a 06	and $068a			and 	gxANDValue
.cc5c	ac5c	4d 89 06	eor $0689			eor 	gxEORValue
.cc5f	ac5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc61	ac61	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc63	ac63	d0 04		bne $ac69			bne 	_GXDLTNoBorrow
.cc65	ac65	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc67	ac67	30 2e		bmi $ac97			bmi 	_GXDLTExit
.cc69	ac69					_GXDLTNoBorrow:
.cc69	ac69	c6 36		dec $36				dec 	gxzTemp0
.cc6b	ac6b	c8		iny				iny 								; next slot.
.cc6c	ac6c	d0 e9		bne $ac57			bne 	_GXDLTLine
.cc6e	ac6e	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc70	ac70	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cc73	ac73	80 e2		bra $ac57			bra 	_GXDLTLine
.cc75	ac75					_GXDLTEndPoints:
.cc75	ac75	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc77	ac77	2d 8a 06	and $068a			and 	gxANDValue
.cc7a	ac7a	4d 89 06	eor $0689			eor 	gxEORValue
.cc7d	ac7d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc7f	ac7f	98		tya				tya 								; advance to right side
.cc80	ac80	18		clc				clc
.cc81	ac81	65 36		adc $36				adc 	gxzTemp0
.cc83	ac83	a8		tay				tay
.cc84	ac84	a5 3d		lda $3d				lda 	gxzScreen+1
.cc86	ac86	65 37		adc $37				adc 	gxzTemp0+1
.cc88	ac88	85 3d		sta $3d				sta 	gxzScreen+1
.cc8a	ac8a	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap 			; fix up.
.cc8d	ac8d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc8f	ac8f	2d 8a 06	and $068a			and 	gxANDValue
.cc92	ac92	4d 89 06	eor $0689			eor 	gxEORValue
.cc95	ac95	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc97	ac97					_GXDLTExit:
.cc97	ac97	68		pla				pla
.cc98	ac98	85 0b		sta $0b				sta 	GXEditSlot
.cc9a	ac9a	68		pla				pla
.cc9b	ac9b	8d 8c 06	sta $068c			sta 	gsOffset
.cc9e	ac9e	68		pla				pla
.cc9f	ac9f	85 3d		sta $3d				sta 	gxzScreen+1
.cca1	aca1	68		pla				pla
.cca2	aca2	85 3c		sta $3c				sta 	gxzScreen
.cca4	aca4	60		rts				rts
.cca5	aca5					GXDLTCheckWrap:
.cca5	aca5	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.cca7	aca7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.cca9	aca9	90 06		bcc $acb1			bcc 	_GXDLTCWExit
.ccab	acab	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccad	acad	85 3d		sta $3d				sta 	gxzScreen+1
.ccaf	acaf	e6 0b		inc $0b				inc 	GXEditSlot
.ccb1	acb1					_GXDLTCWExit:
.ccb1	acb1	60		rts				rts
.ccb2	acb2					GXDrawGraphicElement:
.ccb2	acb2	8d 1f 07	sta $071f			sta 	gxSize 						; save size
.ccb5	acb5	3a		dec a				dec 	a
.ccb6	acb6	8d 20 07	sta $0720			sta 	gxMask 						; and mask
.ccb9	acb9	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP on
.ccbc	acbc	f0 67		beq $ad25			beq 	_GXSLFail
.ccbe	acbe	ad 7c 06	lda $067c			lda 	gxY0 						; push Y on stack
.ccc1	acc1	48		pha				pha
.ccc2	acc2	8c 22 07	sty $0722			sty 	gxAcquireVector+1 			; and acquisition vector
.ccc5	acc5	8e 21 07	stx $0721			stx 	gxAcquireVector
.ccc8	acc8	20 5c af	jsr $af5c			jsr 	gxOpenBitmap 				; open the bitmap.
.cccb	accb	ad 24 07	lda $0724			lda 	gxUseMode 					; scale bits
.ccce	acce	4a		lsr a				lsr 	a
.cccf	accf	4a		lsr a				lsr 	a
.ccd0	acd0	4a		lsr a				lsr 	a
.ccd1	acd1	29 07		and #$07			and		#7
.ccd3	acd3	1a		inc a				inc 	a
.ccd4	acd4	8d 23 07	sta $0723			sta 	gxScale
.ccd7	acd7	64 38		stz $38				stz 	gxzTemp1					; start first line
.ccd9	acd9					_GXGELoop:
.ccd9	acd9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ccdb	acdb	2c 24 07	bit $0724			bit 	gxUseMode 					; check for flip.
.ccde	acde	10 06		bpl $ace6			bpl		_GXNoVFlip
.cce0	ace0	ad 20 07	lda $0720			lda 	gxMask
.cce3	ace3	38		sec				sec
.cce4	ace4	e5 38		sbc $38				sbc 	gxzTemp1
.cce6	ace6					_GXNoVFlip:
.cce6	ace6	aa		tax				tax 								; get the Xth line.
.cce7	ace7	20 27 ad	jsr $ad27			jsr 	_GXCallAcquire 				; get that data.
.ccea	acea	ad 23 07	lda $0723			lda 	gxScale 					; do scale identical copies of that line.
.cced	aced	85 39		sta $39				sta 	gxzTemp1+1
.ccef	acef					_GXGELoop2:
.ccef	acef	ad 7c 06	lda $067c			lda 	gxY0 						; off screen
.ccf2	acf2	cd 86 06	cmp $0686			cmp 	gxHeight
.ccf5	acf5	b0 10		bcs $ad07			bcs 	_GXDGEExit
.ccf7	acf7	20 2a ad	jsr $ad2a			jsr 	GXRenderOneLine 			; render line
.ccfa	acfa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ccfc	acfc	d0 f1		bne $acef			bne 	_GXGELoop2
.ccfe	acfe	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd00	ad00	a5 38		lda $38				lda 	gxzTemp1
.cd02	ad02	cd 1f 07	cmp $071f			cmp 	gxSize
.cd05	ad05	d0 d2		bne $acd9			bne 	_GXGELoop
.cd07	ad07					_GXDGEExit:
.cd07	ad07	68		pla				pla 								; restore Y for next time
.cd08	ad08	8d 7c 06	sta $067c			sta 	gxY0
.cd0b	ad0b	ae 23 07	ldx $0723			ldx 	gxScale 					; get scale (1-8)
.cd0e	ad0e					_GXShiftLeft:
.cd0e	ad0e	18		clc				clc
.cd0f	ad0f	ad 1f 07	lda $071f			lda 	gxSize
.cd12	ad12	6d 7a 06	adc $067a			adc 	gxX0
.cd15	ad15	8d 7a 06	sta $067a			sta 	gxX0
.cd18	ad18	90 03		bcc $ad1d			bcc 	_GXSLNoCarry
.cd1a	ad1a	ee 7b 06	inc $067b			inc 	gxX0+1
.cd1d	ad1d					_GXSLNoCarry:
.cd1d	ad1d	ca		dex				dex
.cd1e	ad1e	d0 ee		bne $ad0e			bne 	_GXShiftLeft
.cd20	ad20	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cd23	ad23	18		clc				clc
.cd24	ad24	60		rts				rts
.cd25	ad25					_GXSLFail:
.cd25	ad25	38		sec				sec
.cd26	ad26	60		rts				rts
.cd27	ad27					_GXCallAcquire:
.cd27	ad27	6c 21 07	jmp ($0721)			jmp 	(gxAcquireVector)
.cd2a	ad2a					GXRenderOneLine:
.cd2a	ad2a	20 6c af	jsr $af6c			jsr 	GXPositionCalc 				; calculate position/offset.
.cd2d	ad2d	ac 8c 06	ldy $068c			ldy 	gsOffset 					; Y contains position.
.cd30	ad30	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd32	ad32					_GXROLLoop1:
.cd32	ad32	ad 23 07	lda $0723			lda 	gxScale 					; set to do 'scale' times
.cd35	ad35	85 3b		sta $3b				sta 	gxzTemp2+1
.cd37	ad37					_GXROLLoop2:
.cd37	ad37	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd39	ad39	2c 87 06	bit $0687			bit 	gxMode 						; check H Flip
.cd3c	ad3c	50 06		bvc $ad44			bvc 	_GXNoHFlip
.cd3e	ad3e	ad 20 07	lda $0720			lda 	gxMask
.cd41	ad41	38		sec				sec
.cd42	ad42	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd44	ad44					_GXNoHFlip:
.cd44	ad44	aa		tax				tax 								; read from the pixel buffer
.cd45	ad45	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd48	ad48	d0 07		bne $ad51			bne 	_GXDraw 					; draw if non zero
.cd4a	ad4a	ad 24 07	lda $0724			lda 	gxUseMode 					; check to see if solid background
.cd4d	ad4d	29 04		and #$04			and 	#4
.cd4f	ad4f	f0 0a		beq $ad5b			beq 	_GXZeroPixel
.cd51	ad51					_GXDraw:
.cd51	ad51	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd53	ad53	2d 8a 06	and $068a			and 	gxANDValue
.cd56	ad56	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd59	ad59	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd5b	ad5b					_GXZeroPixel:
.cd5b	ad5b	c8		iny				iny 								; advance pointer
.cd5c	ad5c	d0 05		bne $ad63			bne 	_GXNoShift
.cd5e	ad5e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd60	ad60	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cd63	ad63					_GXNoShift:
.cd63	ad63	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd65	ad65	d0 d0		bne $ad37			bne 	_GXROLLoop2
.cd67	ad67	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd69	ad69	a5 3a		lda $3a				lda 	gxzTemp2
.cd6b	ad6b	cd 1f 07	cmp $071f			cmp 	gxSize
.cd6e	ad6e	d0 c2		bne $ad32			bne 	_GXROLLoop1
.cd70	ad70	ee 7c 06	inc $067c			inc 	gxY0
.cd73	ad73	60		rts				rts
.071f						gxSize:
>071f								.fill 	1
.0720						gxMask:
>0720								.fill 	1
.0721						gxAcquireVector:
>0721								.fill 	2
.0723						gxScale:
>0723								.fill 	1
.0724						gxUseMode:
>0724								.fill 	1
.cd74	ad74					GXFontHandler:
.cd74	ad74	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd76	ad76	4d 87 06	eor $0687			eor 	gxMode
.cd79	ad79	8d 24 07	sta $0724			sta 	gxUseMode
.cd7c	ad7c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd7e	ad7e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd80	ad80	26 37		rol $37				rol	 	gxzTemp0+1
.cd82	ad82	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd84	ad84	26 37		rol $37				rol	 	gxzTemp0+1
.cd86	ad86	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd88	ad88	26 37		rol $37				rol	 	gxzTemp0+1
.cd8a	ad8a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd8c	ad8c	09 c0		ora #$c0			ora 	#$C0
.cd8e	ad8e	85 37		sta $37				sta 	gxzTemp0+1
.cd90	ad90	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd92	ad92	a2 9a		ldx #$9a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd94	ad94	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cd96	ad96	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cd99	ad99	60		rts				rts
.cd9a	ad9a					GXGetGraphicDataFont:
.cd9a	ad9a	8a		txa				txa 								; X->Y
.cd9b	ad9b	a8		tay				tay
.cd9c	ad9c	a6 01		ldx $01				ldx 	1 							; preserve old value
.cd9e	ad9e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cda0	ada0	85 01		sta $01				sta 	1
.cda2	ada2	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cda4	ada4	86 01		stx $01				stx 	1 							; put old value back.
.cda6	ada6	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cda8	ada8					_GXExpand:
.cda8	ada8	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdab	adab	0a		asl a				asl 	a 							; shift bit 7 into C
.cdac	adac	90 08		bcc $adb6			bcc 	_GXNoPixel
.cdae	adae	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdaf	adaf	ad 88 06	lda $0688			lda 	gxColour
.cdb2	adb2	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdb5	adb5	68		pla				pla
.cdb6	adb6					_GXNoPixel:
.cdb6	adb6	e8		inx				inx 								; do the whole byte.
.cdb7	adb7	e0 08		cpx #$08			cpx 	#8
.cdb9	adb9	d0 ed		bne $ada8			bne 	_GXExpand
.cdbb	adbb	60		rts				rts
.cdbc	adbc					GXSpriteHandler:
.cdbc	adbc	ad 82 06	lda $0682			lda 	gxSpritesOn 				; sprites on ?
.cdbf	adbf	f0 23		beq $ade4			beq 	_GXSHExit
.cdc1	adc1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc3	adc3	4d 87 06	eor $0687			eor 	gxMode
.cdc6	adc6	8d 24 07	sta $0724			sta 	gxUseMode
.cdc9	adc9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdcb	adcb	da		phx				phx
.cdcc	adcc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; can access sprite information
.cdcf	adcf	68		pla				pla
.cdd0	add0	20 3d b0	jsr $b03d			jsr 	GXFindSprite 				; get the sprite address
.cdd3	add3	08		php				php
.cdd4	add4	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cdd7	add7	28		plp				plp
.cdd8	add8	b0 0a		bcs $ade4			bcs		_GXSHExit 					; exit if find failed.
.cdda	adda	ad 25 07	lda $0725			lda 	GXSizePixels 				; return size
.cddd	addd	a2 e5		ldx #$e5			ldx 	#GXSpriteAcquire & $FF
.cddf	addf	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cde1	ade1	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cde4	ade4					_GXSHExit:
.cde4	ade4	60		rts				rts
.cde5	ade5					GXSpriteAcquire:
.cde5	ade5	ad 85 06	lda $0685			lda 	GXSpritePage				; point to base page
.cde8	ade8	85 0b		sta $0b				sta 	GXEditSlot
.cdea	adea	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.cdec	adec	a9 00		lda #$00			lda 	#0
.cdee	adee	ae 26 07	ldx $0726			ldx 	GXSizeBits
.cdf1	adf1					_GXTimesRowNumber:
.cdf1	adf1	18		clc				clc
.cdf2	adf2	65 36		adc $36				adc 	zTemp0
.cdf4	adf4	ca		dex				dex
.cdf5	adf5	10 fa		bpl $adf1			bpl 	_GXTimesRowNumber
.cdf7	adf7	64 37		stz $37				stz 	gxzTemp0+1
.cdf9	adf9	0a		asl a				asl 	a 							; row x 2,4,6,8
.cdfa	adfa	26 37		rol $37				rol 	gxzTemp0+1
.cdfc	adfc	0a		asl a				asl 	a 							; row x 4,8,12,16
.cdfd	adfd	26 37		rol $37				rol 	gxzTemp0+1
.cdff	adff	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce00	ae00	26 37		rol $37				rol 	gxzTemp0+1
.ce02	ae02	85 36		sta $36				sta 	gxzTemp0
.ce04	ae04	18		clc				clc 								; add base address.
.ce05	ae05	a5 36		lda $36				lda 	gxzTemp0
.ce07	ae07	6d 28 07	adc $0728			adc 	GXSpriteOffset
.ce0a	ae0a	85 36		sta $36				sta 	gxzTemp0
.ce0c	ae0c	a5 37		lda $37				lda 	gxzTemp0+1
.ce0e	ae0e	6d 29 07	adc $0729			adc 	GXSpriteOffset+1
.ce11	ae11					_GXSAFindPage:
.ce11	ae11	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce13	ae13	90 06		bcc $ae1b			bcc 	_GXSAFoundPage
.ce15	ae15	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce17	ae17	e6 0b		inc $0b				inc 	GXEditSlot
.ce19	ae19	80 f6		bra $ae11			bra 	_GXSAFindPage
.ce1b	ae1b					_GXSAFoundPage:
.ce1b	ae1b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce1d	ae1d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce1f	ae1f	a0 00		ldy #$00			ldy 	#0
.ce21	ae21					_GXSACopyLoop:
.ce21	ae21	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce23	ae23	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce26	ae26	c8		iny				iny
.ce27	ae27	cc 25 07	cpy $0725			cpy 	GXSizePixels
.ce2a	ae2a	d0 f5		bne $ae21			bne 	_GXSACopyLoop
.ce2c	ae2c	60		rts				rts
.ce2d	ae2d					GXSelect:
.ce2d	ae2d	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce30	ae30	f0 22		beq $ae54			beq 	_GXSFail
.ce32	ae32	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce34	ae34	c9 40		cmp #$40			cmp 	#64
.ce36	ae36	b0 1c		bcs $ae54			bcs 	_GXSFail
.ce38	ae38	8d 8d 06	sta $068d			sta 	GSCurrentSpriteID
.ce3b	ae3b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce3d	ae3d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce3f	ae3f	06 36		asl $36				asl 	gxzTemp0
.ce41	ae41	06 36		asl $36				asl 	gxzTemp0
.ce43	ae43	06 36		asl $36				asl 	gxzTemp0
.ce45	ae45	2a		rol a				rol 	a
.ce46	ae46	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce48	ae48	8d 8f 06	sta $068f			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1
.ce4d	ae4d	a5 36		lda $36				lda 	gxzTemp0
.ce4f	ae4f	8d 8e 06	sta $068e			sta 	GSCurrentSpriteAddr
.ce52	ae52	18		clc				clc
.ce53	ae53	60		rts				rts
.ce54	ae54					_GXSFail:
.ce54	ae54	38		sec				sec
.ce55	ae55	60		rts				rts
.ce56	ae56					GXSelectImage:
.ce56	ae56	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce59	ae59	f0 74		beq $aecf			beq 	_GXSIFail
.ce5b	ae5b	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce5e	ae5e	f0 6f		beq $aecf			beq 	_GXSIFail 					; (checking the MSB)
.ce60	ae60	64 01		stz $01				stz 	1
.ce62	ae62	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce64	ae64	d0 6b		bne $aed1			bne 	_GXSIHide
.ce66	ae66	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce68	ae68	48		pha				pha
.ce69	ae69	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ce6c	ae6c	68		pla				pla
.ce6d	ae6d	20 3d b0	jsr $b03d			jsr 	GXFindSprite
.ce70	ae70	b0 5a		bcs $aecc			bcs 	_GXSICloseFail 				; no image
.ce72	ae72	a0 01		ldy #$01			ldy 	#1
.ce74	ae74	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.ce77	ae77	85 36		sta $36				sta 	gxzTemp0
.ce79	ae79	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ce7c	ae7c	85 37		sta $37				sta 	gxzTemp0+1
.ce7e	ae7e	ad 28 07	lda $0728			lda 	GXSpriteOffset
.ce81	ae81	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce83	ae83	18		clc				clc
.ce84	ae84	ad 29 07	lda $0729			lda 	GXSpriteOffset+1
.ce87	ae87	6d 90 06	adc $0690			adc 	GXSpriteOffsetBase
.ce8a	ae8a	c8		iny				iny
.ce8b	ae8b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8d	ae8d	ad 91 06	lda $0691			lda 	GXSpriteOffsetBase+1
.ce90	ae90	69 00		adc #$00			adc 	#0
.ce92	ae92	c8		iny				iny
.ce93	ae93	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce95	ae95	ad 26 07	lda $0726			lda 	GXSizeBits 					; get raw size
.ce98	ae98	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ce9a	ae9a	2a		rol a				rol 	a 							; x 2
.ce9b	ae9b	0a		asl a				asl 	a 							; x 4
.ce9c	ae9c	0a		asl a				asl 	a 							; x 8
.ce9d	ae9d	0a		asl a				asl 	a 							; x 16
.ce9e	ae9e	0d 27 07	ora $0727			ora 	GXSpriteLUT 				; Or with LUT
.cea1	aea1	0a		asl a				asl 	a 							; 1 shift
.cea2	aea2	09 01		ora #$01			ora 	#1 							; enable sprite.
.cea4	aea4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cea6	aea6	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cea9	aea9	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceac	aeac	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.ceaf	aeaf	29 3f		and #$3f			and 	#$3F
.ceb1	aeb1	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.ceb4	aeb4	ad 26 07	lda $0726			lda 	GXSizeBits 					; get bit size
.ceb7	aeb7	6a		ror a				ror 	a 							; shift into bits 6/7
.ceb8	aeb8	6a		ror a				ror 	a
.ceb9	aeb9	6a		ror a				ror 	a
.ceba	aeba	29 c0		and #$c0			and 	#$C0
.cebc	aebc	1d d2 06	ora $06d2,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cebf	aebf	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cec2	aec2	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.cec5	aec5	29 7f		and #$7f			and 	#$7F
.cec7	aec7	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.ceca	aeca	18		clc				clc
.cecb	aecb	60		rts				rts
.cecc	aecc					_GXSICloseFail:
.cecc	aecc	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cecf	aecf					_GXSIFail:
.cecf	aecf	38		sec				sec
.ced0	aed0	60		rts				rts
.ced1	aed1					_GXSIHide:
.ced1	aed1	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ced4	aed4	85 36		sta $36				sta 	gxzTemp0
.ced6	aed6	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ced9	aed9	85 37		sta $37				sta 	gxzTemp0+1
.cedb	aedb	a9 00		lda #$00			lda 	#0
.cedd	aedd	92 36		sta ($36)			sta 	(gxzTemp0)
.cedf	aedf	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get sprite ID
.cee2	aee2	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.cee5	aee5	09 80		ora #$80			ora 	#$80
.cee7	aee7	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.ceea	aeea	18		clc				clc
.ceeb	aeeb	60		rts				rts
.ceec	aeec					GXMoveSprite:
.ceec	aeec	ad 82 06	lda $0682			lda 	gxSpritesOn
.ceef	aeef	f0 65		beq $af56			beq 	_GXSIFail
.cef1	aef1	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cef4	aef4	f0 60		beq $af56			beq 	_GXSIFail
.cef6	aef6	85 37		sta $37				sta 	gxzTemp0+1
.cef8	aef8	a0 04		ldy #$04			ldy 	#4
.cefa	aefa	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cefd	aefd	85 36		sta $36				sta 	gxzTemp0
.ceff	aeff	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf02	af02	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.cf05	af05	2a		rol a				rol 	a	 						; into bits 0,1.
.cf06	af06	2a		rol a				rol 	a
.cf07	af07	2a		rol a				rol 	a
.cf08	af08	29 03		and #$03			and 	#3
.cf0a	af0a	aa		tax				tax
.cf0b	af0b	bd 58 af	lda $af58,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf0e	af0e	48		pha				pha
.cf0f	af0f	18		clc				clc
.cf10	af10	6d 7a 06	adc $067a			adc 	gxX0						; copy position.
.cf13	af13	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf15	af15	c8		iny				iny
.cf16	af16	ad 7b 06	lda $067b			lda 	gxX0+1
.cf19	af19	69 00		adc #$00			adc 	#0
.cf1b	af1b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf1d	af1d	c8		iny				iny
.cf1e	af1e	68		pla				pla
.cf1f	af1f	18		clc				clc
.cf20	af20	6d 7c 06	adc $067c			adc 	gxY0
.cf23	af23	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf25	af25	a9 00		lda #$00			lda 	#0
.cf27	af27	69 00		adc #$00			adc 	#0
.cf29	af29	c8		iny				iny
.cf2a	af2a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf2c	af2c	4e 7b 06	lsr $067b			lsr 	gxX0+1 						; divide X by 4
.cf2f	af2f	6e 7a 06	ror $067a			ror 	gxX0
.cf32	af32	4e 7a 06	lsr $067a			lsr 	gxX0
.cf35	af35	4e 7c 06	lsr $067c			lsr 	gxY0 						; divide Y by 4
.cf38	af38	4e 7c 06	lsr $067c			lsr 	gxY0
.cf3b	af3b	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf3e	af3e	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x
.cf41	af41	29 80		and #$80			and 	#$80
.cf43	af43	0d 7a 06	ora $067a			ora 	gxX0
.cf46	af46	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf49	af49	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.cf4c	af4c	29 c0		and #$c0			and 	#$C0
.cf4e	af4e	0d 7c 06	ora $067c			ora 	gxY0
.cf51	af51	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cf54	af54	18		clc				clc
.cf55	af55	60		rts				rts
.cf56	af56					_GXSIFail:
.cf56	af56	38		sec				sec
.cf57	af57	60		rts				rts
.cf58	af58					_GXMSOffset:
>cf58	af58	1c						.byte 	32-8/2
>cf59	af59	18						.byte 	32-16/2
>cf5a	af5a	14						.byte 	32-24/2
>cf5b	af5b	10						.byte 	32-32/2
.cf5c	af5c					GXOpenBitmap:
.cf5c	af5c	78		sei				sei 								; no interrupts here
.cf5d	af5d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf5f	af5f	8d 8b 06	sta $068b			sta 	gxOriginalLUTValue
.cf62	af62	58		cli				cli
.cf63	af63	60		rts				rts
.cf64	af64					GXCloseBitmap:
.cf64	af64	78		sei				sei
.cf65	af65	ad 8b 06	lda $068b			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf68	af68	85 0b		sta $0b				sta 	GXEditSlot
.cf6a	af6a	58		cli				cli
.cf6b	af6b	60		rts				rts
.cf6c	af6c					GXPositionCalc:
.cf6c	af6c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf6e	af6e	48		pha				pha
.cf6f	af6f	ad 7c 06	lda $067c			lda 	GXY0 						; gxzScreen = Y0
.cf72	af72	85 3c		sta $3c				sta 	gxzScreen
.cf74	af74	64 3d		stz $3d				stz 	gxzScreen+1
.cf76	af76	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf78	af78	26 3d		rol $3d				rol 	gxzScreen+1
.cf7a	af7a	06 3c		asl $3c				asl 	gxzScreen
.cf7c	af7c	26 3d		rol $3d				rol 	gxzScreen+1
.cf7e	af7e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf7f	af7f	65 3c		adc $3c				adc 	gxzScreen
.cf81	af81	85 3c		sta $3c				sta 	gxzScreen
.cf83	af83	90 02		bcc $af87			bcc 	_GXPCNoCarry
.cf85	af85	e6 3d		inc $3d				inc 	gxzScreen+1
.cf87	af87					_GXPCNoCarry:
.cf87	af87	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf89	af89	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf8b	af8b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf8d	af8d	85 36		sta $36				sta 	gxzTemp0
.cf8f	af8f	64 3d		stz $3d				stz 	gxzScreen+1
.cf91	af91	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf93	af93					_GXPCMultiply32:
.cf93	af93	06 3c		asl $3c				asl 	gxzScreen
.cf95	af95	26 3d		rol $3d				rol 	gxzScreen+1
.cf97	af97	3a		dec a				dec 	a
.cf98	af98	d0 f9		bne $af93			bne 	_GXPCMultiply32
.cf9a	af9a	18		clc				clc
.cf9b	af9b	ad 7a 06	lda $067a			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.cf9e	af9e	65 3c		adc $3c				adc 	gxzScreen
.cfa0	afa0	8d 8c 06	sta $068c			sta 	gsOffset
.cfa3	afa3	ad 7b 06	lda $067b			lda 	GXX0+1
.cfa6	afa6	65 3d		adc $3d				adc 	gxzScreen+1
.cfa8	afa8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfaa	afaa	90 04		bcc $afb0			bcc 	_GXPCNoOverflow
.cfac	afac	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfae	afae	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfb0	afb0					_GXPCNoOverflow:
.cfb0	afb0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfb2	afb2	85 3d		sta $3d				sta 	gxzScreen+1
.cfb4	afb4	64 3c		stz $3c				stz 	gxzScreen
.cfb6	afb6	18		clc				clc
.cfb7	afb7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfb9	afb9	6d 84 06	adc $0684			adc 	gxBasePage 					; by adding the base page
.cfbc	afbc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfbe	afbe	68		pla				pla
.cfbf	afbf	85 36		sta $36				sta 	gxzTemp0
.cfc1	afc1	60		rts				rts
.cfc2	afc2					GXMovePositionDown:
.cfc2	afc2	18		clc				clc 								; add 320 to offset/temp+1
.cfc3	afc3	ad 8c 06	lda $068c			lda 	gsOffset
.cfc6	afc6	69 40		adc #$40			adc 	#64
.cfc8	afc8	8d 8c 06	sta $068c			sta 	gsOffset
.cfcb	afcb	a5 3d		lda $3d				lda 	gxzScreen+1
.cfcd	afcd	69 01		adc #$01			adc 	#1
.cfcf	afcf	85 3d		sta $3d				sta 	gxzScreen+1
.cfd1	afd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfd3	afd3	90 07		bcc $afdc			bcc 	_GXMPDExit
.cfd5	afd5	38		sec				sec  								; next page
.cfd6	afd6	e9 20		sbc #$20			sbc 	#$20
.cfd8	afd8	85 3d		sta $3d				sta 	gxzScreen+1
.cfda	afda	e6 0b		inc $0b				inc 	GXEditSlot
.cfdc	afdc					_GXMPDExit:
.cfdc	afdc	60		rts				rts
.cfdd	afdd					GXCollide:
.cfdd	afdd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfdf	afdf	aa		tax				tax
.cfe0	afe0	05 37		ora $37				ora 	gxzTemp0+1
.cfe2	afe2	29 c0		and #$c0			and 	#$C0
.cfe4	afe4	38		sec				sec
.cfe5	afe5	d0 53		bne $b03a			bne 	_GXCollideFail 				; if either >= 64, fail.
.cfe7	afe7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cfe9	afe9	b9 92 06	lda $0692,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.cfec	afec	1d 92 06	ora $0692,x			ora 	GXSpriteLow,x
.cfef	afef	30 48		bmi $b039			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cff1	aff1	18		clc				clc 								; need to calculate sum of sizes.
.cff2	aff2	b9 d2 06	lda $06d2,y			lda 	GXSpriteHigh,y
.cff5	aff5	7d d2 06	adc $06d2,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cff8	aff8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cffa	affa	6a		ror a				ror 	a 							; 5/6/7
.cffb	affb	4a		lsr a				lsr 	a 							; 4/5/6
.cffc	affc	4a		lsr a				lsr 	a 							; 3/4/5
.cffd	affd	4a		lsr a				lsr 	a 							; 2/3/4
.cffe	affe	18		clc				clc
.cfff	afff	69 08		adc #$08			adc 	#$08
.d001	b001	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d002	b002	4a		lsr a				lsr 	a
.d003	b003	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d005	b005	b9 d2 06	lda $06d2,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.d008	b008	29 3f		and #$3f			and 	#$3F
.d00a	b00a	85 39		sta $39				sta 	gxzTemp1+1
.d00c	b00c	38		sec				sec
.d00d	b00d	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.d010	b010	29 3f		and #$3f			and 	#$3F
.d012	b012	e5 39		sbc $39				sbc 	gxzTemp1+1
.d014	b014	b0 03		bcs $b019			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d016	b016	49 ff		eor #$ff			eor 	#$FF
.d018	b018	1a		inc a				inc 	a
.d019	b019					_GXCAbs1:
.d019	b019	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d01b	b01b	b0 1c		bcs $b039			bcs 	_GXOkayFail
.d01d	b01d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d01f	b01f	38		sec				sec 								; calculate |x1-x0|
.d020	b020	b9 92 06	lda $0692,y			lda 	GXSpriteLow,y
.d023	b023	fd 92 06	sbc $0692,x			sbc 	GXSpriteLow,x
.d026	b026	b0 03		bcs $b02b			bcs 	_GXCAbs2
.d028	b028	49 ff		eor #$ff			eor 	#$FF
.d02a	b02a	1a		inc a				inc 	a
.d02b	b02b					_GXCAbs2:
.d02b	b02b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d02d	b02d	b0 0a		bcs $b039			bcs 	_GXOkayFail
.d02f	b02f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d031	b031	90 02		bcc $b035			bcc 	_GXCHaveLowest
.d033	b033	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d035	b035					_GXCHaveLowest:
.d035	b035	0a		asl a				asl 	a 							; scale to allow for >> 2
.d036	b036	0a		asl a				asl 	a
.d037	b037	18		clc				clc
.d038	b038	60		rts				rts
.d039	b039					_GXOkayFail:
.d039	b039	18		clc				clc
.d03a	b03a					_GXCollideFail:
.d03a	b03a	a9 ff		lda #$ff			lda 	#$FF
.d03c	b03c	60		rts				rts
.d03d	b03d					GXFindSprite:
.d03d	b03d	aa		tax				tax
.d03e	b03e	ad 85 06	lda $0685			lda 	GXSpritePage 				; access the base page of the sprite
.d041	b041	85 0b		sta $0b				sta 	GXEditSlot
.d043	b043	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d046	b046	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d049	b049	f0 33		beq $b07e			beq 	_GXFSFail
.d04b	b04b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d04e	b04e	8d 29 07	sta $0729			sta 	GXSpriteOffset+1
.d051	b051	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d054	b054	48		pha				pha 								; save twice
.d055	b055	48		pha				pha
.d056	b056	29 03		and #$03			and 	#3 							; get sprite size
.d058	b058	8d 26 07	sta $0726			sta 	GXSizeBits 					; save raw (0-3)
.d05b	b05b	aa		tax				tax
.d05c	b05c	bd 80 b0	lda $b080,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d05f	b05f	8d 25 07	sta $0725			sta 	GXSizePixels 					; save (8/16/24/32)
.d062	b062	68		pla				pla 								; get LUT
.d063	b063	4a		lsr a				lsr		a
.d064	b064	4a		lsr a				lsr		a
.d065	b065	29 03		and #$03			and 	#3
.d067	b067	8d 27 07	sta $0727			sta 	GXSpriteLUT
.d06a	b06a	68		pla				pla 								; address, neeeds to be x 4
.d06b	b06b	29 f0		and #$f0			and 	#$F0
.d06d	b06d	8d 28 07	sta $0728			sta 	GXSpriteOffset
.d070	b070	0e 28 07	asl $0728			asl 	GXSpriteOffset
.d073	b073	2e 29 07	rol $0729			rol 	GXSpriteOffset+1
.d076	b076	0e 28 07	asl $0728			asl 	GXSpriteOffset
.d079	b079	2e 29 07	rol $0729			rol 	GXSpriteOffset+1
.d07c	b07c	18		clc				clc
.d07d	b07d	60		rts				rts
.d07e	b07e					_GXFSFail:
.d07e	b07e	38		sec				sec
.d07f	b07f	60		rts				rts
.d080	b080					_GXFXSSTTable:
>d080	b080	08 10 18 20					.byte 	8,16,24,32
.0725						GXSizePixels:
>0725								.fill 	1
.0726						GXSizeBits:
>0726								.fill 	1
.0727						GXSpriteLUT:
>0727								.fill 	1
.0728						GXSpriteOffset:
>0728								.fill 	2
.d084	b084					GXSortXY:
.d084	b084	20 a2 b0	jsr $b0a2			jsr 	GXSortY 					; will be sorted on Y now
.d087	b087	ad 7a 06	lda $067a			lda 	gxX0 						; compare X0 v X1
.d08a	b08a	cd 7e 06	cmp $067e			cmp 	gxX1
.d08d	b08d	ad 7b 06	lda $067b			lda 	gXX0+1
.d090	b090	ed 7f 06	sbc $067f			sbc 	gXX1+1
.d093	b093	90 0c		bcc $b0a1			bcc 	_GXSXYExit 					; X0 < X1 exit
.d095	b095	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d097	b097	a0 04		ldy #$04			ldy 	#4
.d099	b099	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d09c	b09c	e8		inx				inx
.d09d	b09d	c8		iny				iny
.d09e	b09e	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0a1	b0a1					_GXSXYExit:
.d0a1	b0a1	60		rts				rts
.d0a2	b0a2					GXSortY:
.d0a2	b0a2	ad 7c 06	lda $067c			lda 	gxY0 						; if Y0 >= Y1
.d0a5	b0a5	cd 80 06	cmp $0680			cmp 	gxY1
.d0a8	b0a8	90 0b		bcc $b0b5			bcc 	_GXSYSorted
.d0aa	b0aa	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0ac	b0ac	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0ae	b0ae					_GXSwap1:
.d0ae	b0ae	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0b1	b0b1	88		dey				dey
.d0b2	b0b2	ca		dex				dex
.d0b3	b0b3	10 f9		bpl $b0ae			bpl 	_GXSwap1
.d0b5	b0b5					_GXSYSorted:
.d0b5	b0b5	60		rts				rts
.d0b6	b0b6					GXSwapXY:
.d0b6	b0b6	bd 7a 06	lda $067a,x			lda 	gxX0,x
.d0b9	b0b9	48		pha				pha
.d0ba	b0ba	b9 7a 06	lda $067a,y			lda 	gxX0,y
.d0bd	b0bd	9d 7a 06	sta $067a,x			sta 	gxX0,x
.d0c0	b0c0	68		pla				pla
.d0c1	b0c1	99 7a 06	sta $067a,y			sta 	gxX0,y
.d0c4	b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0c5	b0c5					KeywordSet0:
>d0c5	b0c5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0c7	b0c7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0c9	b0c9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0cb	b0cb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0d1	b0d1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0d9	b0d9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0df	b0df	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0e6	b0e6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0ee	b0ee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d0f5	b0f5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d0fc	b0fc	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d104	b104	45 24 28
>d107	b107	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d10f	b10f	45 24 28
>d112	b112	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d118	b118	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d11e	b11e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d126	b126	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d12d	b12d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d134	b134	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d13b	b13b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d143	b143	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d149	b149	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d14f	b14f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d156	b156	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d15c	b15c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d162	b162	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d169	b169	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d171	b171	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d179	b179	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d181	b181	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d189	b189	47 28
>d18b	b18b	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d193	b193	28
>d194	b194	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d19c	b19c	28
>d19d	b19d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1a3	b1a3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1a9	b1a9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1af	b1af	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1b6	b1b6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1be	b1be	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1c4	b1c4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1ca	b1ca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1cf	b1cf	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1d3	b1d3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1d9	b1d9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1e1	b1e1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1e8	b1e8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1ef	b1ef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d1f7	b1f7	43
>d1f8	b1f8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d1fe	b1fe	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d204	b204	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d20b	b20b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d211	b211	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d215	b215	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d21b	b21b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d223	b223	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d22a	b22a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d22f	b22f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d236	b236	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d23e	b23e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b8 DATA
>d244	b244	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b9 DIM
>d249	b249	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ba DOWNTO
>d251	b251	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bb ELSE
>d257	b257	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bc FROM
>d25d	b25d	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $bd GFX
>d262	b262	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $be GOSUB
>d269	b269	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bf GOTO
>d26f	b26f	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c0 HERE
>d275	b275	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c1 IMAGE
>d27c	b27c	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c2 INPUT
>d283	b283	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d288	b288	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d28e	b28e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d295	b295	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d29a	b29a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d29e	b29e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2a6	b2a6	45
>d2a7	b2a7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2af	b2af	45
>d2b0	b2b0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2b6	b2b6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2bc	b2bc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2c3	b2c3	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2ca	b2ca	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d2d1	b2d1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $cf PRINT
>d2d8	b2d8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d0 READ
>d2de	b2de	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d1 RECT
>d2e4	b2e4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d2 REM
>d2e9	b2e9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d3 RETURN
>d2f1	b2f1	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d2f8	b2f8	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d2ff	b2ff	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d307	b307	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d30d	b30d	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d311	b311	ff					.text	$FF
.d312	b312					KeywordSet1:
>d312	b312	00 65					.text	0,$65,""               ; $80 !0:EOF
>d314	b314	00 58					.text	0,$58,""               ; $81 !1:SH1
>d316	b316	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d318	b318	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d320	b320	4c 45
>d322	b322	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d32a	b32a	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d332	b332	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d337	b337	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d33f	b33f	45
>d340	b340	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d344	b344	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d34a	b34a	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d350	b350	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d355	b355	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d35b	b35b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d363	b363	45
>d364	b364	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d369	b369	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $8f SETDATE
>d371	b371	45
>d372	b372	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $90 SETTIME
>d37a	b37a	45
>d37b	b37b	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $91 SHOOT
>d382	b382	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $92 SPRITES
>d38a	b38a	53
>d38b	b38b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $93 STOP
>d391	b391	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $94 XGO
>d396	b396	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $95 XLOAD
>d39d	b39d	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $96 ZAP
>d3a2	b3a2	ff					.text	$FF
.d3a3	b3a3					KeywordSet2:
>d3a3	b3a3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3a5	b3a5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3a7	b3a7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3a9	b3a9	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3ae	b3ae	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3b3	b3b3	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3b8	b3b8	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3bd	b3bd	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3c2	b3c2	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3c7	b3c7	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3cc	b3cc	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3d1	b3d1	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3d6	b3d6	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3db	b3db	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3e0	b3e0	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3e5	b3e5	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d3ea	b3ea	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d3ef	b3ef	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d3f4	b3f4	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d3f9	b3f9	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d3fe	b3fe	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d403	b403	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d408	b408	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d40d	b40d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d412	b412	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d417	b417	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d41c	b41c	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d421	b421	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d426	b426	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d42b	b42b	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d430	b430	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d435	b435	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d43a	b43a	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d43f	b43f	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d444	b444	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d449	b449	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d44e	b44e	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d453	b453	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d458	b458	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d45d	b45d	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d462	b462	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d467	b467	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d46c	b46c	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d471	b471	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d476	b476	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d47b	b47b	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d480	b480	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d485	b485	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d48a	b48a	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d48f	b48f	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d494	b494	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d499	b499	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d49e	b49e	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4a3	b4a3	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4a8	b4a8	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ad	b4ad	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4b2	b4b2	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4b7	b4b7	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4bc	b4bc	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4c1	b4c1	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4c6	b4c6	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4cb	b4cb	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4d0	b4d0	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4d5	b4d5	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4da	b4da	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4df	b4df	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4e4	b4e4	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d4e9	b4e9	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d4ee	b4ee	ff					.text	$FF
.d4ef	b4ef					Export_TKListConvertLine:
.d4ef	b4ef	48		pha				pha 								; save indent on the stack
.d4f0	b4f0	9c 1d 04	stz $041d			stz 	tbOffset
.d4f3	b4f3	9c 2d 04	stz $042d			stz 	tokenBuffer
.d4f6	b4f6	9c 29 04	stz $0429			stz 	currentListColour
.d4f9	b4f9	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d4fb	b4fb	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d4fe	b4fe	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d500	b500	b1 30		lda ($30),y			lda 	(codePtr),y
.d502	b502	aa		tax				tax
.d503	b503	88		dey				dey
.d504	b504	b1 30		lda ($30),y			lda 	(codePtr),y
.d506	b506	20 e9 b6	jsr $b6e9			jsr 	LCLWriteNumberXA
.d509	b509	68		pla				pla 								; adjustment to indent
.d50a	b50a	48		pha				pha 								; save on stack
.d50b	b50b	10 0c		bpl $b519			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d50d	b50d	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d50e	b50e	6d 26 04	adc $0426			adc 	listIndent
.d511	b511	8d 26 04	sta $0426			sta 	listIndent
.d514	b514	10 03		bpl $b519			bpl 	_LCNoAdjust
.d516	b516	9c 26 04	stz $0426			stz 	listIndent
.d519	b519					_LCNoAdjust:
.d519	b519	18		clc				clc		 							; work out actual indent.
.d51a	b51a	ad 26 04	lda $0426			lda 	listIndent
.d51d	b51d	0a		asl a				asl 	a
.d51e	b51e	69 07		adc #$07			adc 	#7
.d520	b520	85 36		sta $36				sta 	zTemp0
.d522	b522					_LCPadOut:
.d522	b522	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d524	b524	20 81 b6	jsr $b681			jsr 	LCLWrite
.d527	b527	ad 1d 04	lda $041d			lda 	tbOffset
.d52a	b52a	c5 36		cmp $36				cmp 	zTemp0
.d52c	b52c	d0 f4		bne $b522			bne 	_LCPadOut
.d52e	b52e	a0 03		ldy #$03			ldy 	#3 							; start position.
.d530	b530					_LCMainLoop:
.d530	b530	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d532	b532	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d535	b535	b1 30		lda ($30),y			lda 	(codePtr),y
.d537	b537	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d539	b539	f0 17		beq $b552			beq 	_LCExit
.d53b	b53b	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d53d	b53d	90 1e		bcc $b55d			bcc 	_LCDoubles
.d53f	b53f	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d541	b541	90 2a		bcc $b56d			bcc 	_LCShiftPunc
.d543	b543	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d545	b545	90 35		bcc $b57c			bcc 	_LCPunctuation
.d547	b547	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d549	b549	90 51		bcc $b59c			bcc 	_LCIdentifiers
.d54b	b54b	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d54d	b54d	90 73		bcc $b5c2			bcc 	_LCTokens
.d54f	b54f	4c 22 b6	jmp $b622			jmp 	_LCData 					; 254-5 are data objects
.d552	b552					_LCExit:
.d552	b552	68		pla				pla 								; get old indent adjust
.d553	b553	30 07		bmi $b55c			bmi 	_LCExit2
.d555	b555	18		clc				clc 								; add to indent if +ve
.d556	b556	6d 26 04	adc $0426			adc 	listIndent
.d559	b559	8d 26 04	sta $0426			sta 	listIndent
.d55c	b55c					_LCExit2:
.d55c	b55c	60		rts				rts
.d55d	b55d					_LCDoubles:
.d55d	b55d	48		pha				pha
.d55e	b55e	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d55f	b55f	29 02		and #$02			and 	#2
.d561	b561	09 3c		ora #$3c			ora 	#60 						; make < >
.d563	b563	20 81 b6	jsr $b681			jsr 	LCLWrite
.d566	b566	68		pla				pla 								; restore, do lower bit
.d567	b567	29 03		and #$03			and 	#3
.d569	b569	09 3c		ora #$3c			ora 	#60
.d56b	b56b	80 0f		bra $b57c			bra		_LCPunctuation 				; print, increment, loop
.d56d	b56d					_LCShiftPunc:
.d56d	b56d	aa		tax				tax 								; save in X
.d56e	b56e	29 07		and #$07			and 	#7 							; lower 3 bits
.d570	b570	f0 02		beq $b574			beq 	_LCNoAdd
.d572	b572	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d574	b574					_LCNoAdd:
.d574	b574	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d576	b576	90 02		bcc $b57a			bcc 	_LCNoAdd2
.d578	b578	09 20		ora #$20			ora 	#32 						; adds $20
.d57a	b57a					_LCNoAdd2:
.d57a	b57a	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d57c	b57c					_LCPunctuation:
.d57c	b57c	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d57e	b57e	d0 03		bne $b583			bne 	_LCPContinue
.d580	b580	20 97 b6	jsr $b697			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d583	b583					_LCPContinue:
.d583	b583	c9 2e		cmp #$2e			cmp 	#'.'
.d585	b585	f0 08		beq $b58f			beq 	_LCPIsConstant
.d587	b587	c9 30		cmp #$30			cmp 	#'0'
.d589	b589	90 0b		bcc $b596			bcc 	_LCPNotConstant
.d58b	b58b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d58d	b58d	b0 07		bcs $b596			bcs 	_LCPNotConstant
.d58f	b58f					_LCPIsConstant:
.d58f	b58f	48		pha				pha
.d590	b590	a9 87		lda #$87			lda 	#CLIConstant+$80
.d592	b592	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d595	b595	68		pla				pla
.d596	b596					_LCPNotConstant:
.d596	b596	c8		iny				iny 								; consume character
.d597	b597	20 81 b6	jsr $b681			jsr 	LCLWrite 					; write it out.
.d59a	b59a	80 94		bra $b530			bra 	_LCMainLoop 				; go round again.
.d59c	b59c					_LCIdentifiers:
.d59c	b59c	18		clc				clc 								; convert to physical address
.d59d	b59d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d59f	b59f	85 37		sta $37				sta 	zTemp0+1
.d5a1	b5a1	c8		iny				iny
.d5a2	b5a2	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a4	b5a4	85 36		sta $36				sta 	zTemp0
.d5a6	b5a6	c8		iny				iny
.d5a7	b5a7	5a		phy				phy 								; save position
.d5a8	b5a8	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5aa	b5aa	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d5ad	b5ad	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5af	b5af					_LCOutIdentifier:
.d5af	b5af	c8		iny				iny
.d5b0	b5b0	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5b2	b5b2	29 7f		and #$7f			and 	#$7F
.d5b4	b5b4	20 d3 b6	jsr $b6d3			jsr 	LCLLowerCase
.d5b7	b5b7	20 81 b6	jsr $b681			jsr 	LCLWrite
.d5ba	b5ba	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5bc	b5bc	10 f1		bpl $b5af			bpl 	_LCOutIdentifier
.d5be	b5be	7a		ply				ply 								; restore position
.d5bf	b5bf	4c 30 b5	jmp $b530			jmp 	_LCMainLoop
.d5c2	b5c2					_LCTokens:
.d5c2	b5c2	aa		tax				tax 								; token in X
.d5c3	b5c3	a9 a3		lda #$a3			lda 	#((KeywordSet2) & $FF)
.d5c5	b5c5	85 36		sta $36				sta 	0+zTemp0
.d5c7	b5c7	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5c9	b5c9	85 37		sta $37				sta 	1+zTemp0
.d5cb	b5cb	e0 82		cpx #$82			cpx 	#$82
.d5cd	b5cd	f0 16		beq $b5e5			beq 	_LCUseShift
.d5cf	b5cf	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.d5d1	b5d1	85 36		sta $36				sta 	0+zTemp0
.d5d3	b5d3	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5d5	b5d5	85 37		sta $37				sta 	1+zTemp0
.d5d7	b5d7	e0 81		cpx #$81			cpx 	#$81
.d5d9	b5d9	f0 0a		beq $b5e5			beq 	_LCUseShift
.d5db	b5db	a9 c5		lda #$c5			lda 	#((KeywordSet0) & $FF)
.d5dd	b5dd	85 36		sta $36				sta 	0+zTemp0
.d5df	b5df	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d5e1	b5e1	85 37		sta $37				sta 	1+zTemp0
.d5e3	b5e3	80 01		bra $b5e6			bra 	_LCNoShift
.d5e5	b5e5					_LCUseShift:
.d5e5	b5e5	c8		iny				iny
.d5e6	b5e6					_LCNoShift:
.d5e6	b5e6	20 ab b6	jsr $b6ab			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d5e9	b5e9	b1 30		lda ($30),y			lda 	(codePtr),y
.d5eb	b5eb	aa		tax				tax 								; into X
.d5ec	b5ec					_LCFindText:
.d5ec	b5ec	ca		dex				dex
.d5ed	b5ed	10 0e		bpl $b5fd			bpl 	_LCFoundText 				; found text.
.d5ef	b5ef	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d5f1	b5f1	1a		inc a				inc 	a 							; one extra for size
.d5f2	b5f2	38		sec				sec 								; one extra for checksum
.d5f3	b5f3	65 36		adc $36				adc 	zTemp0 						; go to next token
.d5f5	b5f5	85 36		sta $36				sta 	zTemp0
.d5f7	b5f7	90 f3		bcc $b5ec			bcc 	_LCFindText
.d5f9	b5f9	e6 37		inc $37				inc 	zTemp0+1
.d5fb	b5fb	80 ef		bra $b5ec			bra 	_LCFindText
.d5fd	b5fd					_LCFoundText:
.d5fd	b5fd	5a		phy				phy 								; save List position
.d5fe	b5fe	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d600	b600	aa		tax				tax
.d601	b601	a9 86		lda #$86			lda 	#CLIToken+$80
.d603	b603	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d606	b606	a0 02		ldy #$02			ldy 	#2
.d608	b608					_LCCopyToken:
.d608	b608	b1 36		lda ($36),y			lda 	(zTemp0),y
.d60a	b60a	20 d3 b6	jsr $b6d3			jsr 	LCLLowerCase
.d60d	b60d	20 81 b6	jsr $b681			jsr 	LCLWrite
.d610	b610	c8		iny				iny
.d611	b611	ca		dex				dex
.d612	b612	d0 f4		bne $b608			bne 	_LCCopyToken
.d614	b614	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d616	b616	f0 05		beq $b61d			beq 	_LCNoSpace
.d618	b618	a9 20		lda #$20			lda 	#' '
.d61a	b61a	20 81 b6	jsr $b681			jsr 	LCLWrite
.d61d	b61d					_LCNoSpace:
.d61d	b61d	7a		ply				ply 								; restore position.
.d61e	b61e	c8		iny				iny 								; consume token
.d61f	b61f	4c 30 b5	jmp $b530			jmp 	_LCMainLoop 				; and go around again.
.d622	b622					_LCData:
.d622	b622	48		pha				pha 								; save type $FE/$FF
.d623	b623	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d625	b625	c9 fe		cmp #$fe			cmp 	#$FE
.d627	b627	f0 22		beq $b64b			beq 	_LCHaveOpener
.d629	b629	a2 22		ldx #$22			ldx 	#'"'
.d62b	b62b	a9 8f		lda #$8f			lda 	#CLIData+$80
.d62d	b62d	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d630	b630	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d632	b632	d0 17		bne $b64b			bne 	_LCHaveOpener
.d634	b634	88		dey				dey 								; what precedes it ?
.d635	b635	b1 30		lda ($30),y			lda 	(codePtr),y
.d637	b637	c8		iny				iny
.d638	b638	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d63a	b63a	d0 0f		bne $b64b			bne 	_LCHaveOpener
.d63c	b63c	a9 09		lda #$09			lda 	#9 							; tab
.d63e	b63e	20 81 b6	jsr $b681			jsr 	LCLWrite
.d641	b641	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d643	b643	20 81 b6	jsr $b681			jsr 	LCLWrite
.d646	b646	a9 85		lda #$85			lda 	#CLIFComment+$80
.d648	b648	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d64b	b64b					_LCHaveOpener:
.d64b	b64b	8a		txa				txa 								; output prefix (# or ")
.d64c	b64c	20 81 b6	jsr $b681			jsr 	LCLWrite
.d64f	b64f	c8		iny				iny 								; get count
.d650	b650	b1 30		lda ($30),y			lda 	(codePtr),y
.d652	b652	aa		tax				tax
.d653	b653	c8		iny				iny 								; point at first character
.d654	b654					_LCOutData:
.d654	b654	b1 30		lda ($30),y			lda 	(codePtr),y
.d656	b656	c9 00		cmp #$00			cmp 	#0
.d658	b658	f0 03		beq $b65d			beq 	_LCNoPrint
.d65a	b65a	20 81 b6	jsr $b681			jsr 	LCLWrite
.d65d	b65d					_LCNoPrint:
.d65d	b65d	c8		iny				iny
.d65e	b65e	ca		dex				dex
.d65f	b65f	d0 f3		bne $b654			bne 	_LCOutData
.d661	b661	68		pla				pla 								; closing " required ?
.d662	b662	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d664	b664	d0 0f		bne $b675			bne 	_LCNoQuote
.d666	b666	a9 22		lda #$22			lda 	#'"'
.d668	b668	20 81 b6	jsr $b681			jsr 	LCLWrite
.d66b	b66b	ad 6f 06	lda $066f			lda 	EXTTextColour
.d66e	b66e	29 0f		and #$0f			and 	#$0F
.d670	b670	09 90		ora #$90			ora 	#$90
.d672	b672	20 81 b6	jsr $b681			jsr 	LCLWrite
.d675	b675					_LCNoQuote:
.d675	b675	4c 30 b5	jmp $b530			jmp 	_LCMainLoop
.d678	b678					LCLWriteColour:
.d678	b678	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d67b	b67b	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d67e	b67e	d0 01		bne $b681			bne 	LCLWrite 					; if different, output it
.d680	b680	60		rts				rts
.d681	b681					LCLWrite:
.d681	b681	da		phx				phx
.d682	b682	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d685	b685	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d688	b688	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d68b	b68b	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d68e	b68e	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d690	b690	30 03		bmi $b695			bmi 	_LCLNoColour
.d692	b692	8d 27 04	sta $0427			sta 	LCLastCharacter
.d695	b695					_LCLNoColour:
.d695	b695	fa		plx				plx
.d696	b696	60		rts				rts
.d697	b697					LCLDeleteLastSpace:
.d697	b697	48		pha				pha
.d698	b698	da		phx				phx
.d699	b699	ae 1d 04	ldx $041d			ldx 	tbOffset
.d69c	b69c	f0 0a		beq $b6a8			beq 	_LCDLSExit
.d69e	b69e	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6a1	b6a1	c9 20		cmp #$20			cmp 	#' '
.d6a3	b6a3	d0 03		bne $b6a8			bne 	_LCDLSExit
.d6a5	b6a5	ce 1d 04	dec $041d			dec 	tbOffset
.d6a8	b6a8					_LCDLSExit:
.d6a8	b6a8	fa		plx				plx
.d6a9	b6a9	68		pla				pla
.d6aa	b6aa	60		rts				rts
.d6ab	b6ab					LCLCheckSpaceRequired:
.d6ab	b6ab	ad 27 04	lda $0427			lda 	LCLastCharacter 			; check last character
.d6ae	b6ae	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6b0	b6b0	f0 1b		beq $b6cd			beq 	_LCCSRSpace
.d6b2	b6b2	c9 29		cmp #$29			cmp 	#')'
.d6b4	b6b4	f0 17		beq $b6cd			beq 	_LCCSRSpace
.d6b6	b6b6	c9 23		cmp #$23			cmp 	#'#'
.d6b8	b6b8	f0 13		beq $b6cd			beq 	_LCCSRSpace
.d6ba	b6ba	20 d3 b6	jsr $b6d3			jsr 	LCLLowerCase 				; saves a little effort
.d6bd	b6bd	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6bf	b6bf	90 11		bcc $b6d2			bcc 	_LCCSRExit
.d6c1	b6c1	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6c3	b6c3	90 08		bcc $b6cd			bcc 	_LCCSRSpace
.d6c5	b6c5	c9 61		cmp #$61			cmp 	#"a"
.d6c7	b6c7	90 09		bcc $b6d2			bcc 	_LCCSRExit
.d6c9	b6c9	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6cb	b6cb	b0 05		bcs $b6d2			bcs 	_LCCSRExit
.d6cd	b6cd					_LCCSRSpace:
.d6cd	b6cd	a9 20		lda #$20			lda 	#' '
.d6cf	b6cf	20 81 b6	jsr $b681			jsr 	LCLWrite
.d6d2	b6d2					_LCCSRExit:
.d6d2	b6d2	60		rts				rts
.d6d3	b6d3					LCLLowerCase:
.d6d3	b6d3	c9 41		cmp #$41			cmp 	#"A"
.d6d5	b6d5	90 06		bcc $b6dd			bcc 	_LCLLCOut
.d6d7	b6d7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6d9	b6d9	b0 02		bcs $b6dd			bcs 	_LCLLCOut
.d6db	b6db	69 20		adc #$20			adc 	#$20
.d6dd	b6dd					_LCLLCOut:
.d6dd	b6dd	60		rts				rts
.d6de	b6de					LCLUpperCase:
.d6de	b6de	c9 61		cmp #$61			cmp 	#"a"
.d6e0	b6e0	90 06		bcc $b6e8			bcc 	_LCLUCOut
.d6e2	b6e2	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6e4	b6e4	b0 02		bcs $b6e8			bcs 	_LCLUCOut
.d6e6	b6e6	e9 1f		sbc #$1f			sbc 	#$1F
.d6e8	b6e8					_LCLUCOut:
.d6e8	b6e8	60		rts				rts
.d6e9	b6e9					LCLWriteNumberXA:
.d6e9	b6e9	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d6eb	b6eb					_LCLWNLoop1:
.d6eb	b6eb	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d6ed	b6ed					_LCLWNLoop2:
.d6ed	b6ed	48		pha				pha 								; save initial LSB
.d6ee	b6ee	38		sec				sec
.d6ef	b6ef	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d6f1	b6f1	f9 22 b7	sbc $b722,y			sbc 	_LCLWNTable,y
.d6f4	b6f4	48		pha				pha
.d6f5	b6f5	8a		txa				txa
.d6f6	b6f6	f9 23 b7	sbc $b723,y			sbc 	_LCLWNTable+1,y
.d6f9	b6f9	90 07		bcc $b702			bcc 	_LCLWNUnderflow
.d6fb	b6fb	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d6fd	b6fd	aa		tax				tax 								; update X
.d6fe	b6fe	68		pla				pla 								; restore A
.d6ff	b6ff	7a		ply				ply 								; throw original
.d700	b700	80 eb		bra $b6ed			bra 	_LCLWNLoop2 				; try again.
.d702	b702					_LCLWNUnderflow:
.d702	b702	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d704	b704	d0 06		bne $b70c			bne 	_LCLWNOut
.d706	b706	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d709	b709	3a		dec a				dec 	a
.d70a	b70a	f0 04		beq $b710			beq 	_LCLWNNext
.d70c	b70c					_LCLWNOut:
.d70c	b70c	98		tya				tya
.d70d	b70d	20 1c b7	jsr $b71c			jsr 	_LCLWNOutDigit
.d710	b710					_LCLWNNext:
.d710	b710	7a		ply				ply 							 	; restore original value.
.d711	b711	68		pla				pla
.d712	b712	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d714	b714	c8		iny				iny
.d715	b715	c8		iny				iny
.d716	b716	84 37		sty $37				sty 	zTemp0+1
.d718	b718	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d71a	b71a	d0 cf		bne $b6eb			bne 	_LCLWNLoop1
.d71c	b71c					_LCLWNOutDigit:
.d71c	b71c	09 30		ora #$30			ora 	#'0'
.d71e	b71e	20 81 b6	jsr $b681			jsr 	LCLWrite
.d721	b721	60		rts				rts
.d722	b722					_LCLWNTable:
>d722	b722	10 27						.word 	10000
>d724	b724	e8 03						.word 	1000
>d726	b726	64 00						.word 	100
>d728	b728	0a 00						.word 	10
.d72a	b72a					TOKSearchTable:
.d72a	b72a	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d72c	b72c	85 36		sta $36				sta 	zTemp0
.d72e	b72e	a0 00		ldy #$00			ldy 	#0
.d730	b730	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d732	b732	85 38		sta $38				sta 	zTemp1
.d734	b734					_TSTLoop:
.d734	b734	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d736	b736	30 49		bmi $b781			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d738	b738	f0 2e		beq $b768			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d73a	b73a	c8		iny				iny 								; get the hash
.d73b	b73b	b1 36		lda ($36),y			lda 	(zTemp0),y
.d73d	b73d	88		dey				dey
.d73e	b73e	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d741	b741	d0 25		bne $b768			bne 	_TSTNext
.d743	b743	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d746	b746	38		sec				sec
.d747	b747	ed 00 04	sbc $0400			sbc 	identStart
.d74a	b74a	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d74c	b74c	d0 1a		bne $b768			bne 	_TSTNext
.d74e	b74e	5a		phy				phy 								; save Y , we might fail to match.
.d74f	b74f	c8		iny				iny 								; point to text
.d750	b750	c8		iny				iny
.d751	b751	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d754	b754					_TSTCompareName:
.d754	b754	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d757	b757	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d759	b759	d0 0c		bne $b767			bne 	_TSTNextPullY 				; fail, pullY and do next
.d75b	b75b	e8		inx				inx
.d75c	b75c	c8		iny				iny
.d75d	b75d	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d760	b760	d0 f2		bne $b754			bne 	_TSTCompareName
.d762	b762	7a		ply				ply 								; throw Y
.d763	b763	a5 38		lda $38				lda 	zTemp1 						; get token #
.d765	b765	38		sec				sec 								; return with CS = passed.
.d766	b766	60		rts				rts
.d767	b767					_TSTNextPullY:
.d767	b767	7a		ply				ply 								; restore current, fall through.
.d768	b768					_TSTNext:
.d768	b768	e6 38		inc $38				inc 	zTemp1 						; token counter
.d76a	b76a	98		tya				tya
.d76b	b76b	18		clc				clc
.d76c	b76c	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d76e	b76e	1a		inc a				inc 	a 							; +1
.d76f	b76f	1a		inc a				inc 	a 							; +2
.d770	b770	a8		tay				tay
.d771	b771	10 c1		bpl $b734			bpl 	_TSTLoop 					; if Y < $80 loop back
.d773	b773	98		tya				tya 								; add Y to zTemp0 and reset Y
.d774	b774	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d776	b776	18		clc				clc  								; but have tables > 255 bytes
.d777	b777	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d779	b779	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d77b	b77b	90 b7		bcc $b734			bcc 	_TSTLoop
.d77d	b77d	e6 37		inc $37				inc 	zTemp0+1
.d77f	b77f	80 b3		bra $b734			bra 	_TSTLoop
.d781	b781					_TSTFail:
.d781	b781	18		clc				clc
.d782	b782	60		rts				rts
.d783	b783					Export_TKTokeniseLine:
.d783	b783	20 4f b9	jsr $b94f			jsr 	LCLFixLineBufferCase 		; fix line case
.d786	b786	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d788	b788	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d78b	b78b	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d78e	b78e	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d791	b791	a2 ff		ldx #$ff			ldx 	#$FF
.d793	b793					_TKFindFirst:
.d793	b793	e8		inx				inx
.d794	b794	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d797	b797	f0 62		beq $b7fb			beq 	_TKExit
.d799	b799	c9 20		cmp #$20			cmp 	#' '
.d79b	b79b	90 f6		bcc $b793			bcc 	_TKFindFirst
.d79d	b79d	c9 30		cmp #$30			cmp 	#'0'
.d79f	b79f	90 07		bcc $b7a8			bcc 	_TKNoLineNumber
.d7a1	b7a1	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7a3	b7a3	b0 03		bcs $b7a8			bcs 	_TKNoLineNumber
.d7a5	b7a5	20 79 b9	jsr $b979			jsr 	TOKExtractLineNumber
.d7a8	b7a8					_TKNoLineNumber:
.d7a8	b7a8					_TKTokeniseLoop:
.d7a8	b7a8	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ab	b7ab	f0 4e		beq $b7fb			beq 	_TKExit
.d7ad	b7ad	e8		inx				inx
.d7ae	b7ae	c9 20		cmp #$20			cmp 	#' '
.d7b0	b7b0	f0 f6		beq $b7a8			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7b2	b7b2	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7b3	b7b3	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7b5	b7b5	f0 68		beq $b81f			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7b7	b7b7	c9 41		cmp #$41			cmp 	#'A'
.d7b9	b7b9	90 04		bcc $b7bf			bcc 	_TKTokenisePunctuation
.d7bb	b7bb	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7bd	b7bd	90 60		bcc $b81f			bcc 	_TKTokeniseIdentifier
.d7bf	b7bf					_TKTokenisePunctuation:
.d7bf	b7bf	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7c1	b7c1	f0 2e		beq $b7f1			beq 	_TKString
.d7c3	b7c3	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7c5	b7c5	f0 2f		beq $b7f6			beq 	_TKHexConstant
.d7c7	b7c7	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7c9	b7c9	f0 36		beq $b801			beq 	_TKCheckDouble
.d7cb	b7cb	c9 3e		cmp #$3e			cmp 	#'>'
.d7cd	b7cd	f0 32		beq $b801			beq 	_TKCheckDouble
.d7cf	b7cf					_TKStandardPunctuation:
.d7cf	b7cf	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7d2	b7d2	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7d4	b7d4	90 0e		bcc $b7e4			bcc 	_TKNoShift
.d7d6	b7d6	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7d7	b7d7	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7d9	b7d9	85 36		sta $36				sta 	zTemp0
.d7db	b7db	68		pla				pla
.d7dc	b7dc	29 20		and #$20			and 	#32 						; bit 5
.d7de	b7de	4a		lsr a				lsr 	a 							; shift into bit 3
.d7df	b7df	4a		lsr a				lsr 	a
.d7e0	b7e0	05 36		ora $36				ora 	zTemp0
.d7e2	b7e2	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7e4	b7e4					_TKNoShift:
.d7e4	b7e4	20 be b9	jsr $b9be			jsr 	TOKWriteByte 				; write the punctuation character
.d7e7	b7e7	e8		inx				inx 								; consume the character
.d7e8	b7e8	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d7ea	b7ea	d0 bc		bne $b7a8			bne 	_TKTokeniseLoop 			; and loop round again.
.d7ec	b7ec	20 b2 b8	jsr $b8b2			jsr 	TOKCheckComment 			; comment checl
.d7ef	b7ef	80 b7		bra $b7a8			bra 	_TKTokeniseLoop
.d7f1	b7f1					_TKString:
.d7f1	b7f1	20 de b8	jsr $b8de			jsr 	TOKTokenString
.d7f4	b7f4	80 b2		bra $b7a8			bra 	_TKTokeniseLoop
.d7f6	b7f6					_TKHexConstant:
.d7f6	b7f6	20 19 b9	jsr $b919			jsr 	TOKHexConstant
.d7f9	b7f9	80 ad		bra $b7a8			bra 	_TKTokeniseLoop
.d7fb	b7fb	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d7fd	b7fd	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d800	b800	60		rts				rts
.d801	b801					_TKCheckDouble:
.d801	b801	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d804	b804	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d806	b806	90 c7		bcc $b7cf			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d808	b808	c9 3f		cmp #$3f			cmp 	#'>'+1
.d80a	b80a	b0 c3		bcs $b7cf			bcs 	_TKStandardPunctuation
.d80c	b80c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d80f	b80f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d811	b811	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d812	b812	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d815	b815	38		sec				sec
.d816	b816	e9 3c		sbc #$3c			sbc 	#'<'
.d818	b818	20 be b9	jsr $b9be			jsr 	TOKWriteByte 				; this is in the range 0-7
.d81b	b81b	e8		inx				inx 								; consume both
.d81c	b81c	e8		inx				inx
.d81d	b81d	80 89		bra $b7a8			bra 	_TKTokeniseLoop
.d81f	b81f					_TKTokeniseIdentifier:
.d81f	b81f	8e 00 04	stx $0400			stx 	identStart 					; save start
.d822	b822	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d825	b825					_TKCheckLoop:
.d825	b825	e8		inx				inx 								; look at next, we know first is identifier already.
.d826	b826	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d829	b829	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d82b	b82b	f0 f8		beq $b825			beq 	_TKCheckLoop
.d82d	b82d	c9 30		cmp #$30			cmp	 	#"0"
.d82f	b82f	90 0c		bcc $b83d			bcc 	_TKEndIdentifier
.d831	b831	c9 3a		cmp #$3a			cmp 	#"9"+1
.d833	b833	90 f0		bcc $b825			bcc 	_TKCheckLoop
.d835	b835	c9 41		cmp #$41			cmp	 	#"A"
.d837	b837	90 04		bcc $b83d			bcc 	_TKEndIdentifier
.d839	b839	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d83b	b83b	90 e8		bcc $b825			bcc 	_TKCheckLoop
.d83d	b83d					_TKEndIdentifier:
.d83d	b83d	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d840	b840	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d842	b842	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d844	b844	f0 06		beq $b84c			beq 	_TKHasTypeCharacter
.d846	b846	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d848	b848	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d84a	b84a	d0 07		bne $b853			bne 	_TKNoTypeCharacter
.d84c	b84c					_TKHasTypeCharacter:
.d84c	b84c	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d84f	b84f	e8		inx				inx 								; consume the type character
.d850	b850	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d853	b853					_TKNoTypeCharacter:
.d853	b853	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d855	b855	d0 09		bne $b860			bne 	_TKNoArray
.d857	b857	e8		inx				inx 								; skip the (
.d858	b858	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d85b	b85b	09 04		ora #$04			ora 	#$04
.d85d	b85d	8d 04 04	sta $0404			sta 	identTypeByte
.d860	b860					_TKNoArray:
.d860	b860	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d863	b863	20 3a b9	jsr $b93a			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d866	b866	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d868	b868	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.d86a	b86a	20 2a b7	jsr $b72a			jsr 	TOKSearchTable
.d86d	b86d	a2 00		ldx #$00			ldx 	#0
.d86f	b86f	b0 1f		bcs $b890			bcs 	_TKFoundToken
.d871	b871	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d873	b873	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.d875	b875	20 2a b7	jsr $b72a			jsr 	TOKSearchTable
.d878	b878	a2 81		ldx #$81			ldx 	#$81
.d87a	b87a	b0 14		bcs $b890			bcs 	_TKFoundToken
.d87c	b87c	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d87e	b87e	a9 a3		lda #$a3			lda 	#(KeywordSet2) & $FF
.d880	b880	20 2a b7	jsr $b72a			jsr 	TOKSearchTable
.d883	b883	a2 82		ldx #$82			ldx 	#$82
.d885	b885	b0 09		bcs $b890			bcs 	_TKFoundToken
.d887	b887	20 ca b9	jsr $b9ca			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d88a	b88a	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d88d	b88d	4c a8 b7	jmp $b7a8			jmp 	_TKTokeniseLoop 			; and go round again.
.d890	b890					_TKFoundToken:
.d890	b890	48		pha				pha 								; save token
.d891	b891	8a		txa				txa 								; shift in X, is there one ?
.d892	b892	f0 03		beq $b897			beq 	_TKNoTShift
.d894	b894	20 be b9	jsr $b9be			jsr 	TOKWriteByte 				; if so, write it out
.d897	b897					_TKNoTShift:
.d897	b897	68		pla				pla 								; restore and write token
.d898	b898	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d89b	b89b	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d89d	b89d	d0 0d		bne $b8ac			bne 	_TKNotRem 			 		; not shifted ?
.d89f	b89f	c9 d2		cmp #$d2			cmp 	#KWD_REM
.d8a1	b8a1	d0 09		bne $b8ac			bne 	_TKNotRem
.d8a3	b8a3	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8a6	b8a6	20 b2 b8	jsr $b8b2			jsr 	TOKCheckComment
.d8a9	b8a9	4c a8 b7	jmp $b7a8			jmp 	_TKTokeniseLoop
.d8ac	b8ac					_TKNotRem:
.d8ac	b8ac	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8af	b8af	4c a8 b7	jmp $b7a8			jmp 	_TKTokeniseLoop 			; and go round again.
.d8b2	b8b2					TOKCheckComment:
.d8b2	b8b2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8b5	b8b5	e8		inx				inx
.d8b6	b8b6	c9 20		cmp #$20			cmp 	#' '
.d8b8	b8b8	f0 f8		beq $b8b2			beq 	TOKCheckComment
.d8ba	b8ba	ca		dex				dex 								; first non space character
.d8bb	b8bb	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8bd	b8bd	f0 1e		beq $b8dd			beq 	_TOKCCExit 					; then we are okay
.d8bf	b8bf	c9 00		cmp #$00			cmp 	#0 							; EOL
.d8c1	b8c1	f0 1a		beq $b8dd			beq 	_TOKCCExit 					; then we are okay
.d8c3	b8c3	da		phx				phx
.d8c4	b8c4					_TOKCCLowerCase:
.d8c4	b8c4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d8c7	b8c7	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d8c9	b8c9	90 09		bcc $b8d4			bcc 	_TOKKCNotUC
.d8cb	b8cb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8cd	b8cd	b0 05		bcs $b8d4			bcs 	_TOKKCNotUC
.d8cf	b8cf	49 20		eor #$20			eor 	#$20
.d8d1	b8d1	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d8d4	b8d4					_TOKKCNotUC:
.d8d4	b8d4	e8		inx				inx
.d8d5	b8d5	c9 00		cmp #$00			cmp 	#0
.d8d7	b8d7	d0 eb		bne $b8c4			bne 	_TOKCCLowerCase
.d8d9	b8d9	fa		plx				plx
.d8da	b8da	20 de b8	jsr $b8de			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d8dd	b8dd					_TOKCCExit:
.d8dd	b8dd	60		rts				rts
.d8de	b8de					TOKTokenString:
.d8de	b8de	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8e0	b8e0	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d8e3	b8e3	e8		inx				inx									; start of quoted string.
.d8e4	b8e4	da		phx				phx 								; push start of string on top
.d8e5	b8e5	ca		dex				dex 								; because we pre-increment
.d8e6	b8e6					_TSFindEnd:
.d8e6	b8e6	e8		inx				inx
.d8e7	b8e7	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8ea	b8ea	f0 04		beq $b8f0			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8ec	b8ec	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8ee	b8ee	d0 f6		bne $b8e6			bne 	_TSFindEnd
.d8f0	b8f0					_TSEndOfString:
.d8f0	b8f0	7a		ply				ply  								; so now Y is first character, X is character after end.
.d8f1	b8f1	48		pha				pha 								; save terminating character
.d8f2	b8f2	20 fa b8	jsr $b8fa			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d8f5	b8f5	68		pla				pla 								; terminating character
.d8f6	b8f6	f0 01		beq $b8f9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d8f8	b8f8	e8		inx				inx
.d8f9	b8f9					_TSNotQuote:
.d8f9	b8f9	60		rts				rts
.d8fa	b8fa					TOKWriteBlockXY:
.d8fa	b8fa	86 36		stx $36				stx 	zTemp0 						; save end character
.d8fc	b8fc	98		tya				tya 								; use 2's complement to work out the byte size
.d8fd	b8fd	49 ff		eor #$ff			eor 	#$FF
.d8ff	b8ff	38		sec				sec
.d900	b900	65 36		adc $36				adc 	zTemp0
.d902	b902	1a		inc a				inc 	a 							; one extra for NULL
.d903	b903	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d906	b906					_TOBlockLoop:
.d906	b906	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d908	b908	f0 09		beq $b913			beq 	_TOBlockExit
.d90a	b90a	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d90d	b90d	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d910	b910	c8		iny				iny
.d911	b911	80 f3		bra $b906			bra 	_TOBlockLoop
.d913	b913					_TOBlockExit:
.d913	b913	a9 00		lda #$00			lda 	#0 							; add NULL.
.d915	b915	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d918	b918	60		rts				rts
.d919	b919					TOKHexConstant:
.d919	b919	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d91b	b91b	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d91e	b91e	e8		inx				inx									; start of quoted string.
.d91f	b91f	da		phx				phx 								; push start of constant on top
.d920	b920	ca		dex				dex
.d921	b921					_THFindLoop:
.d921	b921	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d922	b922	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d925	b925	c9 30		cmp #$30			cmp 	#"0"
.d927	b927	90 0c		bcc $b935			bcc 	_THFoundEnd
.d929	b929	c9 3a		cmp #$3a			cmp 	#"9"+1
.d92b	b92b	90 f4		bcc $b921			bcc 	_THFindLoop
.d92d	b92d	c9 41		cmp #$41			cmp 	#"A"
.d92f	b92f	90 04		bcc $b935			bcc 	_THFoundEnd
.d931	b931	c9 47		cmp #$47			cmp 	#"F"+1
.d933	b933	90 ec		bcc $b921			bcc 	_THFindLoop
.d935	b935					_THFoundEnd:
.d935	b935	7a		ply				ply 								; restore start
.d936	b936	20 fa b8	jsr $b8fa			jsr 	TOKWriteBlockXY 			; output the block
.d939	b939	60		rts				rts
.d93a	b93a					TOKCalculateHash:
.d93a	b93a	da		phx				phx
.d93b	b93b	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d93e	b93e	a9 00		lda #$00			lda 	#0
.d940	b940					_TCHLoop:
.d940	b940	18		clc				clc
.d941	b941	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d944	b944	e8		inx				inx
.d945	b945	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d948	b948	d0 f6		bne $b940			bne 	_TCHLoop
.d94a	b94a	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d94d	b94d	fa		plx				plx
.d94e	b94e	60		rts				rts
.d94f	b94f					LCLFixLineBufferCase:
.d94f	b94f	a2 00		ldx #$00			ldx 	#0
.d951	b951					_FLBCLoop:
.d951	b951	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d954	b954	f0 22		beq $b978			beq 	_FLBCExit 					; end of string.
.d956	b956	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d958	b958	f0 11		beq $b96b			beq 	_FLBCInQuotes
.d95a	b95a	e8		inx				inx
.d95b	b95b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d95d	b95d	90 f2		bcc $b951			bcc 	_FLBCLoop
.d95f	b95f	c9 7b		cmp #$7b			cmp 	#'z'+1
.d961	b961	b0 ee		bcs $b951			bcs 	_FLBCLoop
.d963	b963	38		sec				sec 								; make U/C
.d964	b964	e9 20		sbc #$20			sbc 	#32
.d966	b966	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d969	b969	80 e6		bra $b951			bra 	_FLBCLoop
.d96b	b96b					_FLBCInQuotes:
.d96b	b96b	e8		inx				inx 								; advance
.d96c	b96c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d96f	b96f	f0 07		beq $b978			beq 	_FLBCExit 					; exit on EOS
.d971	b971	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d973	b973	d0 f6		bne $b96b			bne 	_FLBCInQuotes
.d975	b975	e8		inx				inx 								; skip over it
.d976	b976	80 d9		bra $b951			bra 	_FLBCLoop
.d978	b978					_FLBCExit:
.d978	b978	60		rts				rts
.d979	b979					TOKExtractLineNumber:
.d979	b979	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d97c	b97c	48		pha				pha
.d97d	b97d	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d980	b980	48		pha				pha
.d981	b981	20 b7 b9	jsr $b9b7			jsr 	_LCLNTimes2 				; line # x 2
.d984	b984	20 b7 b9	jsr $b9b7			jsr 	_LCLNTimes2 				; line # x 4
.d987	b987	18		clc				clc 								; add stacked value
.d988	b988	68		pla				pla
.d989	b989	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d98c	b98c	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d98f	b98f	68		pla				pla
.d990	b990	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d993	b993	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d996	b996	20 b7 b9	jsr $b9b7			jsr 	_LCLNTimes2 				; line # x 10
.d999	b999	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d99c	b99c	e8		inx				inx
.d99d	b99d	29 0f		and #$0f			and 	#15 						; add to line #
.d99f	b99f	18		clc				clc
.d9a0	b9a0	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9a3	b9a3	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9a6	b9a6	90 03		bcc $b9ab			bcc 	_TLENNoCarry
.d9a8	b9a8	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ab	b9ab					_TLENNoCarry:
.d9ab	b9ab	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9ae	b9ae	c9 30		cmp #$30			cmp 	#'0'
.d9b0	b9b0	90 04		bcc $b9b6			bcc 	_TLENExit
.d9b2	b9b2	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9b4	b9b4	90 c3		bcc $b979			bcc 	TOKExtractLineNumber
.d9b6	b9b6					_TLENExit:
.d9b6	b9b6	60		rts				rts
.d9b7	b9b7					_LCLNTimes2:
.d9b7	b9b7	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9ba	b9ba	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d9bd	b9bd	60		rts				rts
.d9be	b9be					TOKWriteByte:
.d9be	b9be	da		phx				phx
.d9bf	b9bf	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9c2	b9c2	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9c5	b9c5	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d9c8	b9c8	fa		plx				plx
.d9c9	b9c9	60		rts				rts
.d9ca	b9ca					TOKCheckCreateVariableRecord:
.d9ca	b9ca	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d9cc	b9cc	85 36		sta $36				sta 	0+zTemp0
.d9ce	b9ce	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d9d0	b9d0	85 37		sta $37				sta 	1+zTemp0
.d9d2	b9d2					_CCVSearch:
.d9d2	b9d2	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d9d4	b9d4	f0 2c		beq $ba02			beq 	_CCVFail
.d9d6	b9d6	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d9d8	b9d8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d9da	b9da	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d9dd	b9dd	d0 16		bne $b9f5			bne 	_CCVNext
.d9df	b9df	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9e1	b9e1	ae 00 04	ldx $0400			ldx 	identStart
.d9e4	b9e4					_CCVCompare:
.d9e4	b9e4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d9e7	b9e7	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d9e9	b9e9	e8		inx				inx 								; advance pointers
.d9ea	b9ea	c8		iny				iny
.d9eb	b9eb	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9ec	b9ec	d0 07		bne $b9f5			bne 	_CCVNext  					; didn't match go to next.
.d9ee	b9ee	90 f4		bcc $b9e4			bcc 	_CCVCompare 				; not finished yet.
.d9f0	b9f0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d9f3	b9f3	f0 41		beq $ba36			beq 	_CCVFound 					; yes, we were successful
.d9f5	b9f5					_CCVNext:
.d9f5	b9f5	18		clc				clc 								; go to next record.
.d9f6	b9f6	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d9f8	b9f8	65 36		adc $36				adc 	zTemp0
.d9fa	b9fa	85 36		sta $36				sta 	zTemp0
.d9fc	b9fc	90 d4		bcc $b9d2			bcc 	_CCVSearch
.d9fe	b9fe	e6 37		inc $37				inc 	zTemp0+1
.da00	ba00	80 d0		bra $b9d2			bra 	_CCVSearch
.da02	ba02					_CCVFail:
.da02	ba02	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da04	ba04	ad 03 04	lda $0403			lda 	identHash
.da07	ba07	91 36		sta ($36),y			sta 	(zTemp0),y
.da09	ba09	c8		iny				iny 								; offset 2 is the type byte
.da0a	ba0a	ad 04 04	lda $0404			lda 	identTypeByte
.da0d	ba0d	91 36		sta ($36),y			sta 	(zTemp0),y
.da0f	ba0f	c8		iny				iny
.da10	ba10					_CCVData:
.da10	ba10	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da12	ba12	91 36		sta ($36),y			sta 	(zTemp0),y
.da14	ba14	c8		iny				iny
.da15	ba15	c0 08		cpy #$08			cpy 	#8
.da17	ba17	90 f7		bcc $ba10			bcc 	_CCVData
.da19	ba19	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da1c	ba1c					_CCVCopyName:
.da1c	ba1c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da1f	ba1f	91 36		sta ($36),y			sta 	(zTemp0),y
.da21	ba21	e8		inx				inx
.da22	ba22	c8		iny				iny
.da23	ba23	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da26	ba26	d0 f4		bne $ba1c			bne 	_CCVCopyName
.da28	ba28	98		tya				tya 								; patch offset
.da29	ba29	92 36		sta ($36)			sta 	(zTemp0)
.da2b	ba2b	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da2d	ba2d	91 36		sta ($36),y			sta 	(zTemp0),y
.da2f	ba2f	88		dey				dey
.da30	ba30	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da32	ba32	09 80		ora #$80			ora 	#$80
.da34	ba34	91 36		sta ($36),y			sta 	(zTemp0),y
.da36	ba36					_CCVFound:
.da36	ba36	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da38	ba38	38		sec				sec
.da39	ba39	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da3b	ba3b	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da3d	ba3d	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.da40	ba40	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da42	ba42	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.da45	ba45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da46	ba46					SNDCheckChannel:
.da46	ba46	aa		tax				tax
.da47	ba47	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da4a	ba4a	d0 38		bne $ba84			bne 	_SNDCCExit
.da4c	ba4c	da		phx				phx 								; save current channel
.da4d	ba4d	8a		txa				txa 								; put in A
.da4e	ba4e	20 ca ba	jsr $baca			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da51	ba51	68		pla				pla 								; channel # in A
.da52	ba52	90 30		bcc $ba84			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da54	ba54	a8		tay				tay 								; Y is the channel #
.da55	ba55	bd 2d 07	lda $072d,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da58	ba58	99 2c 08	sta $082c,y			sta 	SNDPitchLow,y
.da5b	ba5b	bd 2e 07	lda $072e,x			lda 	SNDQueue+2,x
.da5e	ba5e	99 30 08	sta $0830,y			sta 	SNDPitchHigh,y
.da61	ba61	bd 2f 07	lda $072f,x			lda 	SNDQueue+3,x
.da64	ba64	99 34 08	sta $0834,y			sta 	SNDVolume,y
.da67	ba67	bd 30 07	lda $0730,x			lda 	SNDQueue+4,x
.da6a	ba6a	99 38 08	sta $0838,y			sta 	SNDTimeLeft,y
.da6d	ba6d	bd 31 07	lda $0731,x			lda 	SNDQueue+5,x
.da70	ba70	99 3c 08	sta $083c,y			sta 	SNDAdjustLow,y
.da73	ba73	bd 32 07	lda $0732,x			lda 	SNDQueue+6,x
.da76	ba76	99 40 08	sta $0840,y			sta 	SNDAdjustHigh,y
.da79	ba79	5a		phy				phy 								; save channel #
.da7a	ba7a	20 e4 ba	jsr $bae4			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da7d	ba7d	ce 2b 07	dec $072b			dec 	SNDLength 					; reduce the queue length.
.da80	ba80	68		pla				pla
.da81	ba81	20 85 ba	jsr $ba85			jsr 	SNDUpdateNote 				; update channel A
.da84	ba84					_SNDCCExit:
.da84	ba84	60		rts				rts
.da85	ba85					SNDUpdateNote:
.da85	ba85	aa		tax				tax 								; so we can access records
.da86	ba86	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da87	ba87	0a		asl a				asl 	a
.da88	ba88	0a		asl a				asl 	a
.da89	ba89	0a		asl a				asl 	a
.da8a	ba8a	0a		asl a				asl 	a
.da8b	ba8b	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da8e	ba8e	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; are we silent
.da91	ba91	f0 2e		beq $bac1			beq 	_SNDUNIsSilent
.da93	ba93	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; push channel bits on stack
.da96	ba96	48		pha				pha
.da97	ba97	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.da9a	ba9a	29 0f		and #$0f			and 	#$0F
.da9c	ba9c	0d 2a 07	ora $072a			ora 	SNDChannelBits 				; set channel bits
.da9f	ba9f	09 80		ora #$80			ora 	#$80 						; write to pitch register
.daa1	baa1	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts
.daa4	baa4	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daa7	baa7	8d 2a 07	sta $072a			sta 	SNDChannelBits
.daaa	baaa	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.daad	baad	4e 2a 07	lsr $072a			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.dab0	bab0	6a		ror a				ror 	a
.dab1	bab1	4e 2a 07	lsr $072a			lsr 	SNDChannelBits
.dab4	bab4	6a		ror a				ror 	a
.dab5	bab5	4a		lsr a				lsr 	a 							; put in bits 0-5
.dab6	bab6	4a		lsr a				lsr 	a
.dab7	bab7	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts 				; write as rest of pitch register
.daba	baba	68		pla				pla
.dabb	babb	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.dabd	babd	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts
.dac0	bac0	60		rts				rts
.dac1	bac1					_SNDUNIsSilent:
.dac1	bac1	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; channel bits
.dac4	bac4	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.dac6	bac6	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts 				; write to the ports
.dac9	bac9	60		rts				rts
.daca	baca					SNDFindNextNoteForA:
.daca	baca	ac 2b 07	ldy $072b			ldy 	SNDLength 					; queue size into Y
.dacd	bacd	f0 13		beq $bae2			beq 	_SNDFNNFail 				; queue empty.
.dacf	bacf	a2 00		ldx #$00			ldx 	#0
.dad1	bad1					_SNDFNNSearch:
.dad1	bad1	dd 2c 07	cmp $072c,x			cmp 	SNDQueue,x 					; does it match the channel
.dad4	bad4	38		sec				sec
.dad5	bad5	f0 0c		beq $bae3			beq 	_SNDFNNExit 				; if so exit with CS.
.dad7	bad7	e8		inx				inx 								; next queue slot.
.dad8	bad8	e8		inx				inx
.dad9	bad9	e8		inx				inx
.dada	bada	e8		inx				inx
.dadb	badb	e8		inx				inx
.dadc	badc	e8		inx				inx
.dadd	badd	e8		inx				inx
.dade	bade	e8		inx				inx
.dadf	badf	88		dey				dey 								; done the whole queue
.dae0	bae0	d0 ef		bne $bad1			bne 	_SNDFNNSearch 				; no, go back.
.dae2	bae2					_SNDFNNFail:
.dae2	bae2	18		clc				clc
.dae3	bae3					_SNDFNNexit:
.dae3	bae3	60		rts				rts
.dae4	bae4					SNDDeleteXFromQueue:
.dae4	bae4	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.dae6	bae6	f0 09		beq $baf1			beq 	_SNDDXExit
.dae8	bae8	bd 34 07	lda $0734,x			lda 	SNDQueue+8,x
.daeb	baeb	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.daee	baee	e8		inx				inx
.daef	baef	80 f3		bra $bae4			bra 	SNDDeleteXFromQueue
.daf1	baf1					_SNDDXExit:
.daf1	baf1	60		rts				rts
.072a						SNDChannelBits:
>072a								.fill 	1
.daf2	baf2					SNDQueueRequest:
.daf2	baf2	86 36		stx $36				stx 	zTemp0						; save queue address
.daf4	baf4	84 37		sty $37				sty 	zTemp0+1
.daf6	baf6	ae 2b 07	ldx $072b			ldx 	SNDLength 					; queue is full, can't take any more.
.daf9	baf9	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dafb	bafb	f0 21		beq $bb1e			beq 	_SNDQRExit
.dafd	bafd	29 03		and #$03			and 	#3	 						; channel # and push on stack
.daff	baff	48		pha				pha
.db00	bb00	8a		txa				txa  								; get offset in queue buffer/
.db01	bb01	0a		asl a				asl 	a
.db02	bb02	0a		asl a				asl 	a
.db03	bb03	0a		asl a				asl 	a
.db04	bb04	aa		tax				tax
.db05	bb05	68		pla				pla 								; get back and push again
.db06	bb06	48		pha				pha
.db07	bb07	9d 2c 07	sta $072c,x			sta 	SNDQueue+0,x 				; save the channel #
.db0a	bb0a	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db0c	bb0c					_SNDQCopy:
.db0c	bb0c	b1 36		lda ($36),y			lda 	(zTemp0),y
.db0e	bb0e	e8		inx				inx
.db0f	bb0f	c8		iny				iny
.db10	bb10	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.db13	bb13	c0 06		cpy #$06			cpy 	#6
.db15	bb15	d0 f5		bne $bb0c			bne 	_SNDQCopy
.db17	bb17	ee 2b 07	inc $072b			inc 	SNDLength 					; bump queue length.
.db1a	bb1a	68		pla				pla 								; get channel # back
.db1b	bb1b	20 46 ba	jsr $ba46			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db1e	bb1e					_SNDQRExit:
.db1e	bb1e	60		rts				rts
.db1f	bb1f					SNDSilenceChannel:
.db1f	bb1f	aa		tax				tax 								; zero time left.
.db20	bb20	9e 38 08	stz $0838,x			stz 	SNDTimeLeft,x
.db23	bb23	0a		asl a				asl 	a 							; shift into position
.db24	bb24	0a		asl a				asl 	a
.db25	bb25	0a		asl a				asl 	a
.db26	bb26	0a		asl a				asl 	a
.db27	bb27	0a		asl a				asl 	a
.db28	bb28	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db2a	bb2a	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts
.db2d	bb2d	60		rts				rts
.db2e	bb2e					SNDWritePorts:
.db2e	bb2e	da		phx				phx 								; save X
.db2f	bb2f	a6 01		ldx $01				ldx 	1 							; save I/O status
.db31	bb31	64 01		stz $01				stz 	1 							; access I/O page 0
.db33	bb33	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db36	bb36	8d 10 d6	sta $d610			sta 	$D610
.db39	bb39	86 01		stx $01				stx 	1 							; restore I/O
.db3b	bb3b	fa		plx				plx 								; restore X
.db3c	bb3c	60		rts				rts
.db3d	bb3d					Export_SNDCommand:
.db3d	bb3d	da		phx				phx 								; save XY
.db3e	bb3e	5a		phy				phy
.db3f	bb3f	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db41	bb41	f0 1d		beq $bb60			beq 	_SNDInitialise
.db43	bb43	90 28		bcc $bb6d			bcc 	_SNDExit
.db45	bb45	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db47	bb47	f0 17		beq $bb60			beq 	_SNDSilence
.db49	bb49	b0 22		bcs $bb6d			bcs 	_SNDExit
.db4b	bb4b	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db4d	bb4d	b0 09		bcs $bb58			bcs 	_SNDQueryPlay
.db4f	bb4f	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db51	bb51	b0 1a		bcs $bb6d			bcs 	_SNDExit
.db53	bb53	20 f2 ba	jsr $baf2			jsr 	SNDQueueRequest
.db56	bb56	80 15		bra $bb6d			bra 	_SNDExit
.db58	bb58					_SNDQueryPlay:
.db58	bb58	29 03		and #$03			and 	#3 							; get channel #
.db5a	bb5a	aa		tax				tax
.db5b	bb5b	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db5e	bb5e	80 0d		bra $bb6d			bra 	_SNDExit
.db60	bb60					_SNDInitialise:
.db60	bb60					_SNDSilence:
.db60	bb60	9c 2b 07	stz $072b			stz 	SNDLength 					; empty the queue.
.db63	bb63	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db65	bb65					_SNDSilenceLoop:
.db65	bb65	48		pha				pha
.db66	bb66	20 1f bb	jsr $bb1f			jsr 	SNDSilenceChannel
.db69	bb69	68		pla				pla
.db6a	bb6a	3a		dec a				dec 	a
.db6b	bb6b	10 f8		bpl $bb65			bpl 	_SNDSilenceLoop
.db6d	bb6d					_SNDExit:
.db6d	bb6d	7a		ply				ply
.db6e	bb6e	fa		plx				plx
.db6f	bb6f	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072b						SNDLength:
>072b								.fill 	1
.072c						SNDQueue:
>072c								.fill 	SNDQueueSize * 8
.082c						SNDPitchLow:
>082c								.fill 	4
.0830						SNDPitchHigh:
>0830								.fill 	4
.0834						SNDVolume:
>0834								.fill 	4
.0838						SNDTimeLeft:
>0838								.fill 	4
.083c						SNDAdjustLow:
>083c								.fill 	4
.0840						SNDAdjustHigh:
>0840								.fill 	4
.db70	bb70					Export_SNDUpdate:
.db70	bb70					PagedSNDUpdate:
.db70	bb70	ad 38 08	lda $0838			lda 	SNDTimeLeft+0 				; look at time remaining
.db73	bb73	f0 05		beq $bb7a			beq 	_SNDUNot0 					; not playing
.db75	bb75	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db77	bb77	20 99 bb	jsr $bb99			jsr 	SNDUpdateChannel 			; update it.
.db7a	bb7a					_SNDUNot0:
.db7a	bb7a	ad 39 08	lda $0839			lda 	SNDTimeLeft+1
.db7d	bb7d	f0 05		beq $bb84			beq 	_SNDUNot1
.db7f	bb7f	a2 01		ldx #$01			ldx 	#1
.db81	bb81	20 99 bb	jsr $bb99			jsr 	SNDUpdateChannel
.db84	bb84					_SNDUNot1:
.db84	bb84	ad 3a 08	lda $083a			lda 	SNDTimeLeft+2
.db87	bb87	f0 05		beq $bb8e			beq 	_SNDUNot2
.db89	bb89	a2 02		ldx #$02			ldx 	#2
.db8b	bb8b	20 99 bb	jsr $bb99			jsr 	SNDUpdateChannel
.db8e	bb8e					_SNDUNot2:
.db8e	bb8e	ad 3b 08	lda $083b			lda 	SNDTimeLeft+3
.db91	bb91	f0 05		beq $bb98			beq 	_SNDUNot3
.db93	bb93	a2 03		ldx #$03			ldx 	#3
.db95	bb95	20 99 bb	jsr $bb99			jsr 	SNDUpdateChannel
.db98	bb98					_SNDUNot3:
.db98	bb98	60		rts				rts
.db99	bb99					SNDUpdateChannel:
.db99	bb99	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.db9b	bb9b	f0 2c		beq $bbc9			beq 	_SNDUCExit
.db9d	bb9d	3a		dec a				dec 	a 							; decrement and update timer
.db9e	bb9e	9d 38 08	sta $0838,x			sta 	SNDTimeLeft,x
.dba1	bba1	f0 1d		beq $bbc0			beq 	_SNDUCUpdate 				; if zero, silence channel
.dba3	bba3	bd 3c 08	lda $083c,x			lda 	SNDAdjustLow,x 				; adjust ?
.dba6	bba6	1d 40 08	ora $0840,x			ora 	SNDAdjustHigh,x
.dba9	bba9	f0 1e		beq $bbc9			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbab	bbab	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbac	bbac	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.dbaf	bbaf	7d 3c 08	adc $083c,x			adc 	SNDAdjustLow,x
.dbb2	bbb2	9d 2c 08	sta $082c,x			sta 	SNDPitchLow,x
.dbb5	bbb5	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x
.dbb8	bbb8	7d 40 08	adc $0840,x			adc 	SNDAdjustHigh,x
.dbbb	bbbb	29 03		and #$03			and 	#3
.dbbd	bbbd	9d 30 08	sta $0830,x			sta 	SNDPitchHigh,x
.dbc0	bbc0					_SNDUCUpdate:
.dbc0	bbc0	8a		txa				txa 								; which channel.
.dbc1	bbc1	48		pha				pha
.dbc2	bbc2	20 85 ba	jsr $ba85			jsr 	SNDUpdateNote 				; update the current note
.dbc5	bbc5	68		pla				pla
.dbc6	bbc6	20 46 ba	jsr $ba46			jsr 	SNDCheckChannel 			; more to do ?
.dbc9	bbc9					_SNDUCExit:
.dbc9	bbc9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dbca	bbca					Export_KNLInputSingleCharacter:
.dbca	bbca					PagedInputSingleCharacter:
.dbca	bbca	da		phx				phx
.dbcb	bbcb	5a		phy				phy
.dbcc	bbcc					_EISCWait:
.dbcc	bbcc	a5 01		lda $01				lda 	1 							; save I/O 0
.dbce	bbce	48		pha				pha
.dbcf	bbcf	64 01		stz $01				stz 	1 							; access I/O Page 0
.dbd1	bbd1	38		sec				sec 								; calculate timer - LastTick
.dbd2	bbd2	ad 59 d6	lda $d659			lda 	$D659
.dbd5	bbd5	aa		tax				tax 								; saving timer in X
.dbd6	bbd6	ed 5c 06	sbc $065c			sbc 	LastTick
.dbd9	bbd9	c9 03		cmp #$03			cmp 	#3
.dbdb	bbdb	90 06		bcc $bbe3			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.dbdd	bbdd	8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.dbe0	bbe0	20 70 bb	jsr $bb70			jsr 	PagedSNDUpdate 							; go do the code.
.dbe3	bbe3					_NoFireTick:
.dbe3	bbe3	68		pla				pla 								; restore I/O 0
.dbe4	bbe4	85 01		sta $01				sta 	1
.dbe6	bbe6	20 f0 bb	jsr $bbf0			jsr 	CheckKeyPressed
.dbe9	bbe9	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dbeb	bbeb	f0 df		beq $bbcc			beq 	_EISCWait
.dbed	bbed	7a		ply				ply
.dbee	bbee	fa		plx				plx
.dbef	bbef	60		rts				rts
.dbf0	bbf0					Export_KNLInkey:
.dbf0	bbf0					CheckKeyPressed:
.dbf0	bbf0	a9 44		lda #$44			lda     #<event 					; tell kernel where events go.
.dbf2	bbf2	85 f0		sta $f0				sta     kernel.args.events+0
.dbf4	bbf4	a9 08		lda #$08			lda     #>event
.dbf6	bbf6	85 f1		sta $f1				sta     kernel.args.events+1
.dbf8	bbf8	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dbfb	bbfb	b0 0b		bcs $bc08			bcs 	_CKPNoEvent 				; no event
.dbfd	bbfd	ad 44 08	lda $0844			lda     event.type
.dc00	bc00	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc02	bc02	d0 04		bne $bc08			bne 	_CKPNoEvent
.dc04	bc04	ad 49 08	lda $0849			lda     event.key.ascii
.dc07	bc07	60		rts				rts
.dc08	bc08					_CKPNoEvent:
.dc08	bc08	a9 00		lda #$00			lda 	#0
.dc0a	bc0a	60		rts				rts
.dc0b	bc0b					Export_EXTBreakCheck:
.dc0b	bc0b	4c e1 ff	jmp $ffe1			jmp		$FFE1
.dc0e	bc0e					Export_EXTReadController:
.dc0e	bc0e	da		phx				phx
.dc0f	bc0f	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc11	bc11	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc13	bc13	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc16	bc16	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc18	bc18	fa		plx				plx
.dc19	bc19	60		rts				rts
.0844						event
>0844						type        .byte   ?   ; Enum above
>0845						buf         .byte   ?   ; page id or zero
>0846						ext         .byte   ?   ; page id or zero
.0847						key
>0847						keyboard    .byte   ?   ; Keyboard ID
>0848						raw         .byte   ?   ; Raw key ID
>0849						ascii       .byte   ?   ; ASCII value
>084a						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0847						mouse
>0847						dx          .byte   ?
>0848						dy          .byte   ?
>0849						dz          .byte   ?
>084a						buttons     .byte   ?
.0847						udp
>0847						token       .byte   ?   ; TODO: break out into fields
.0847						file
>0847						stream      .byte   ?
>0848						cookie      .byte   ?
.0849						data
>0849						requested   .byte   ?   ; Requested number of bytes to read
>084a						read        .byte   ?   ; Number of bytes actually read
.0849						wrote
>0849						requested   .byte   ?   ; Requested number of bytes to read
>084a						wrote       .byte   ?   ; Number of bytes actually read
.0847						directory
>0847						stream      .byte   ?
>0848						cookie      .byte   ?
.0849						volume
>0849						len         .byte   ?   ; Length of volname (in buf)
>084a						flags       .byte   ?   ; block size, text encoding
.0849						file
>0849						len         .byte   ?
>084a						flags       .byte   ?   ; block scale, text encoding, approx size
.0849						free
>0849						flags       .byte   ?   ; block scale, text encoding, approx size
.dc1a	bc1a					Export_KNLLoadFile:
.dc1a	bc1a	a9 00		lda #$00			lda 	#0
.dc1c	bc1c	85 f3		sta $f3		        sta     kernel.args.file.open.drive
.dc1e	bc1e	a9 90		lda #$90	        lda 	#fname & $FF
.dc20	bc20	85 fb		sta $fb		        sta     kernel.args.file.open.fname+0
.dc22	bc22	a9 bc		lda #$bc	        lda     #fname >> 8
.dc24	bc24	85 fc		sta $fc		        sta     kernel.args.file.open.fname+1
.dc26	bc26	a9 04		lda #$04	        lda     #4
.dc28	bc28	85 fd		sta $fd		        sta     kernel.args.file.open.fname_len
.dc2a	bc2a	a9 00		lda #$00	        lda     #kernel.args.file.open.READ
.dc2c	bc2c	85 f5		sta $f5		        sta     kernel.args.file.open.mode
.dc2e	bc2e	20 5c ff	jsr $ff5c	        jsr     kernel.File.Open
.dc31	bc31	b0 59		bcs $bc8c	        bcs     error
.dc33	bc33					events:
.dc33	bc33	20 00 ff	jsr $ff00			jsr 	kernel.nextevent
.dc36	bc36	b0 fb		bcs $bc33			bcs 	events
.dc38	bc38	ad 44 08	lda $0844	        lda     event.type
.dc3b	bc3b	20 4d a1	jsr $a14d	        jsr 	PAGEDPrintHex
.dc3e	bc3e	c9 2e		cmp #$2e			cmp     #kernel.event.file.CLOSED
.dc40	bc40	f0 45		beq $bc87			beq     outch
.dc42	bc42	c9 24		cmp #$24			cmp     #kernel.event.file.NOT_FOUND
.dc44	bc44	f0 41		beq $bc87			beq     outch
.dc46	bc46	c9 34		cmp #$34	        cmp     #kernel.event.file.ERROR
.dc48	bc48	f0 3d		beq $bc87	        beq     outch
.dc4a	bc4a	c9 2c		cmp #$2c	        cmp     #kernel.event.file.EOF 			; go closed
.dc4c	bc4c	f0 2f		beq $bc7d	        beq     eof
.dc4e	bc4e	c9 26		cmp #$26	        cmp     #kernel.event.file.OPENED 		; start read cycle
.dc50	bc50	f0 06		beq $bc58	        beq     read
.dc52	bc52	c9 28		cmp #$28	        cmp     #kernel.event.file.DATA 		; data received
.dc54	bc54	f0 10		beq $bc66	        beq     data
.dc56	bc56	80 db		bra $bc33	        bra 	events
.dc58	bc58					read:
.dc58	bc58	ad 47 08	lda $0847			lda     event.file.stream 				; set stream to read
.dc5b	bc5b	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dc5d	bc5d	a9 01		lda #$01			lda 	#1 								; read 1 byte
.dc5f	bc5f	85 f4		sta $f4		        sta     kernel.args.file.read.buflen
.dc61	bc61	20 60 ff	jsr $ff60	        jsr 	kernel.file.read
.dc64	bc64	80 cd		bra $bc33	        bra 	events 							; wait for result.
.dc66	bc66					data:
.dc66	bc66	ad 4a 08	lda $084a			lda     event.file.data.read 			; amount of data read ?
.dc69	bc69	85 fd		sta $fd		        sta     kernel.args.recv.buflen
.dc6b	bc6b	a9 36		lda #$36	        lda     #zTemp0 & $FF 					; where it goes
.dc6d	bc6d	85 fb		sta $fb		        sta     kernel.args.recv.buf+0
.dc6f	bc6f	a9 00		lda #$00	        lda     #zTemp0 >> 8
.dc71	bc71	85 fc		sta $fc		        sta     kernel.args.recv.buf+1
.dc73	bc73	20 04 ff	jsr $ff04	        jsr     kernel.ReadData 				; copy the read data
.dc76	bc76	a5 36		lda $36		        lda 	zTemp0 							; display it.
.dc78	bc78	20 00 a0	jsr $a000	        jsr 	PAGEDPrintCharacter
.dc7b	bc7b	80 db		bra $bc58	        bra 	read	 						; request another read.
.dc7d	bc7d					eof:
.dc7d	bc7d	48		pha				pha 									; save even to display.
.dc7e	bc7e	ad 47 08	lda $0847	        lda     event.file.stream
.dc81	bc81	85 f3		sta $f3		        sta     kernel.args.file.close.stream
.dc83	bc83	20 68 ff	jsr $ff68	        jsr     kernel.File.Close
.dc86	bc86	68		pla		        pla
.dc87	bc87	20 4d a1	jsr $a14d	outch:	jsr 	PAGEDPrintHex
.dc8a	bc8a	80 fe		bra $bc8a	h1:		bra 	h1
.dc8c	bc8c	a9 ff		lda #$ff	error:	lda 	#$FF
.dc8e	bc8e	80 f7		bra $bc87			bra 	outch
>dc90	bc90	74 65 73 74			fname:	.text 	"test"

;******  Return to file: _basic.asm


;******  End of listing
