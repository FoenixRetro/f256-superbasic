
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 30 13:16:02 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 62 81	jsr $8162			jsr 	NewCommand 					; erase current program
.8006	20 b7 8b	jsr $8bb7			jsr 	BackloadProgram
.8009	4c d0 81	jmp $81d0			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 56 96	jsr $9656			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	c2 83					.word	ShiftLeft                        ; $00 <<
>8016	bc 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	b2 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	2e 95					.word	SyntaxError                      ; $03 !!3
>801c	2e 95					.word	SyntaxError                      ; $04 ><
>801e	c6 82					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	c5 83					.word	ShiftRight                       ; $06 >>
>8022	2e 95					.word	SyntaxError                      ; $07 !!7
>8024	2e 95					.word	SyntaxError                      ; $08 !!8
>8026	2e 95					.word	SyntaxError                      ; $09 !!9
>8028	2e 95					.word	SyntaxError                      ; $0a !!10
>802a	2e 95					.word	SyntaxError                      ; $0b !!11
>802c	2e 95					.word	SyntaxError                      ; $0c !!12
>802e	2e 95					.word	SyntaxError                      ; $0d !!13
>8030	2e 95					.word	SyntaxError                      ; $0e !!14
>8032	2e 95					.word	SyntaxError                      ; $0f !!15
>8034	2e 95					.word	SyntaxError                      ; $10 @
>8036	2e 95					.word	SyntaxError                      ; $11 !!17
>8038	2e 95					.word	SyntaxError                      ; $12 !!18
>803a	2e 95					.word	SyntaxError                      ; $13 [
>803c	90 90					.word	IntegerDivide                    ; $14 \
>803e	2e 95					.word	SyntaxError                      ; $15 ]
>8040	48 85					.word	EorInteger                       ; $16 ^
>8042	2e 95					.word	SyntaxError                      ; $17 _
>8044	2e 95					.word	SyntaxError                      ; $18 `
>8046	2e 95					.word	SyntaxError                      ; $19 !!25
>8048	2e 95					.word	SyntaxError                      ; $1a !!26
>804a	2e 95					.word	SyntaxError                      ; $1b {
>804c	03 85					.word	OraInteger                       ; $1c |
>804e	2e 95					.word	SyntaxError                      ; $1d }
>8050	2e 95					.word	SyntaxError                      ; $1e ~
>8052	2e 95					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	2e 95					.word	SyntaxError                      ; $20
>8056	2e 95					.word	SyntaxError                      ; $21 !
>8058	2e 95					.word	SyntaxError                      ; $22 "
>805a	2e 95					.word	SyntaxError                      ; $23 #
>805c	2e 95					.word	SyntaxError                      ; $24 $
>805e	dc 90					.word	IntegerModulus                   ; $25 %
>8060	be 84					.word	AndInteger                       ; $26 &
>8062	2e 95					.word	SyntaxError                      ; $27 '
>8064	2e 95					.word	SyntaxError                      ; $28 (
>8066	2e 95					.word	SyntaxError                      ; $29 )
>8068	50 91					.word	MulInteger                       ; $2a *
>806a	58 84					.word	AddInteger                       ; $2b +
>806c	2e 95					.word	SyntaxError                      ; $2c ,
>806e	93 84					.word	SubInteger                       ; $2d -
>8070	2e 95					.word	SyntaxError                      ; $2e .
>8072	e7 92					.word	FDivideCommand                   ; $2f /
>8074	2e 95					.word	SyntaxError                      ; $30 0
>8076	2e 95					.word	SyntaxError                      ; $31 1
>8078	2e 95					.word	SyntaxError                      ; $32 2
>807a	2e 95					.word	SyntaxError                      ; $33 3
>807c	2e 95					.word	SyntaxError                      ; $34 4
>807e	2e 95					.word	SyntaxError                      ; $35 5
>8080	2e 95					.word	SyntaxError                      ; $36 6
>8082	2e 95					.word	SyntaxError                      ; $37 7
>8084	2e 95					.word	SyntaxError                      ; $38 8
>8086	2e 95					.word	SyntaxError                      ; $39 9
>8088	2e 95					.word	SyntaxError                      ; $3a :
>808a	2e 95					.word	SyntaxError                      ; $3b ;
>808c	9e 82					.word	BinaryCompareLess                ; $3c <
>808e	94 82					.word	BinaryCompareEqual               ; $3d =
>8090	a8 82					.word	BinaryCompareGreater             ; $3e >
>8092	2e 95					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	0a 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	17 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	2e 95					.word	SyntaxError                      ; $82 !2:SH2
>809a	2d 94					.word	AbsUnary                         ; $83 ABS(
>809c	b4 88					.word	AllocUnary                       ; $84 ALLOC(
>809e	3d 94					.word	AscUnary                         ; $85 ASC(
>80a0	51 89					.word	ChrUnary                         ; $86 CHR$(
>80a2	90 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	4a 94					.word	FracUnary                        ; $88 FRAC(
>80a6	60 94					.word	IntUnary                         ; $89 INT(
>80a8	b6 94					.word	IsValUnary                       ; $8a ISVAL(
>80aa	26 8a					.word	Unary_Left                       ; $8b LEFT$(
>80ac	72 94					.word	LenUnary                         ; $8c LEN(
>80ae	50 8a					.word	Unary_Mid                        ; $8d MID$(
>80b0	ee 88					.word	Unary_Not                        ; $8e NOT(
>80b2	36 8a					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	04 89					.word	Unary_Rnd                        ; $90 RND(
>80b6	8c 94					.word	SgnUnary                         ; $91 SGN(
>80b8	63 89					.word	SpcUnary                         ; $92 SPC(
>80ba	7e 89					.word	Unary_Str                        ; $93 STR$(
>80bc	84 82					.word	UnaryTrue                        ; $94 TRUE
>80be	ac 94					.word	ValUnary                         ; $95 VAL(
>80c0	2e 95					.word	SyntaxError                      ; $96 FOR
>80c2	2e 95					.word	SyntaxError                      ; $97 IF
>80c4	2e 95					.word	SyntaxError                      ; $98 PROC
>80c6	2e 95					.word	SyntaxError                      ; $99 REPEAT
>80c8	2e 95					.word	SyntaxError                      ; $9a WHILE
>80ca	2e 95					.word	SyntaxError                      ; $9b ENDIF
>80cc	2e 95					.word	SyntaxError                      ; $9c ENDPROC
>80ce	2e 95					.word	SyntaxError                      ; $9d NEXT
>80d0	2e 95					.word	SyntaxError                      ; $9e UNTIL
>80d2	2e 95					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	2e 95					.word	SyntaxError                      ; $a1 CLS
>80d8	2e 95					.word	SyntaxError                      ; $a2 DATA
>80da	2e 95					.word	SyntaxError                      ; $a3 DIM
>80dc	2e 95					.word	SyntaxError                      ; $a4 GOSUB
>80de	2e 95					.word	SyntaxError                      ; $a5 GOTO
>80e0	2e 95					.word	SyntaxError                      ; $a6 LET
>80e2	6c 81					.word	Command_Print                    ; $a7 PRINT
>80e4	2e 95					.word	SyntaxError                      ; $a8 READ
>80e6	c3 81					.word	RemCommand                       ; $a9 REM
>80e8	2e 95					.word	SyntaxError                      ; $aa RETURN
>80ea	2e 95					.word	SyntaxError                      ; $ab THEN
>80ec	2e 95					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	2e 95					.word	SyntaxError                      ; $80 !0:EOF
>80f0	2e 95					.word	SyntaxError                      ; $81 !1:SH1
>80f2	2e 95					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	2e 95					.word	SyntaxError                      ; $86 LIST
>80fc	62 81					.word	NewCommand                       ; $87 NEW
>80fe	2e 95					.word	SyntaxError                      ; $88 RESTORE
>8100	d0 81					.word	CommandRUN                       ; $89 RUN
>8102	2e 95					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	2e 95					.word	SyntaxError                      ; $80 !0:EOF
>8106	2e 95					.word	SyntaxError                      ; $81 !1:SH1
>8108	2e 95					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 f1 8a	jsr $8af1			jsr 	EvaluateInteger 			; the assert test
.810f	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 1f 82	jmp $821f		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 06 8b	jsr $8b06			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 e5 95	jsr $95e5			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8162					NewCommand:
.8162	20 24 90	jsr $9024			jsr 	MemoryNew
.8165	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8168	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.816b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.816c					Command_Print:
.816c	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.816d					_CPLoop:
.816d	08		php				php 								; save last action flag
.816e	b1 30		lda ($30),y			lda 	(codePtr),y
.8170	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8172	f0 46		beq $81ba			beq 	_CPExit
.8174	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8176	f0 42		beq $81ba			beq 	_CPExit
.8178	68		pla				pla 								; throw last action flag
.8179	b1 30		lda ($30),y			lda 	(codePtr),y
.817b	c8		iny				iny
.817c	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.817e	f0 37		beq $81b7			beq 	_CPContinueWithSameLine
.8180	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8182	f0 2e		beq $81b2			beq 	_CPTab
.8184	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8186	f0 26		beq $81ae			beq 	_CPNewLine
.8188	88		dey				dey 								; undo the get.
.8189	a2 00		ldx #$00			ldx 	#0
.818b	20 c5 8a	jsr $8ac5			jsr 	EvaluateValue 				; get a value into slot 0
.818e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8191	29 10		and #$10			and 	#NSBIsString
.8193	f0 0b		beq $81a0			beq 	_CPNumber
.8195	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8198	ad 08 06	lda $0608			lda 	NSMantissa0
.819b	20 71 82	jsr $8271			jsr 	PrintStringXA
.819e	80 cc		bra $816c			bra 	Command_Print 				; loop round clearing carry so NL if end
.81a0					_CPNumber:
.81a0	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81a2	20 a0 89	jsr $89a0			jsr 	ConvertNumberToString 		; convert to string
.81a5	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81a7	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81a9	20 71 82	jsr $8271			jsr 	PrintStringXA
.81ac	80 be		bra $816c			bra 	Command_Print 				; loop round clearing carry so NL if end
.81ae					_CPNewLine:
.81ae	a9 0d		lda #$0d			lda 	#13
.81b0	80 02		bra $81b4			bra 	_CPPrintChar
.81b2					_CPTab:
.81b2	a9 09		lda #$09			lda 	#9 							; print TAB
.81b4					_CPPrintChar:
.81b4	20 56 96	jsr $9656			jsr 	EXTPrintCharacter
.81b7					_CPContinueWithSameLine:
.81b7	38		sec				sec 								; loop round with carry set, which
.81b8	80 b3		bra $816d			bra 	_CPLoop 					; will inhibit final CR
.81ba					_CPExit:
.81ba	28		plp				plp 								; get last action flag
.81bb	b0 05		bcs $81c2			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81bd	a9 0d		lda #$0d			lda 	#13 						; print new line
.81bf	20 56 96	jsr $9656			jsr 	EXTPrintCharacter
.81c2					_CPExit2:
.81c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.81c3					RemCommand:
.81c3	b1 30		lda ($30),y			lda 	(codePtr),y
.81c5	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81c7	d0 06		bne $81cf			bne 	_RMExit
.81c9	c8		iny				iny
.81ca	98		tya				tya
.81cb	38		sec				sec
.81cc	71 30		adc ($30),y			adc 	(codePtr),y
.81ce	a8		tay				tay
.81cf					_RMExit:
.81cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.81d0					CommandRUN:
.81d0	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.81d3	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.81d5	85 30		sta $30				sta 	codePtr
.81d7	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.81d9	85 31		sta $31				sta 	codePtr+1
.81db					RUNNewLine:
.81db	b2 30		lda ($30)			lda 	(codePtr)
.81dd	f0 28		beq $8207			beq 	CRNoProgram         		; no then END.
.81df	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.81e1	9a		txs				txs
.81e2					RUNCodePointerLine:
.81e2	a0 02		ldy #$02			ldy 	#2 							; start of program
.81e4					_CRIncMainLoop:
.81e4	c8		iny				iny
.81e5					_CRMainLoop:
.81e5	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.81e8	b1 30		lda ($30),y			lda 	(codePtr),y
.81ea	10 10		bpl $81fc			bpl 	_CRNotKeyword
.81ec	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.81ee	b0 04		bcs $81f4			bcs 	_CRIsKeyword
.81f0	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.81f2	b0 0d		bcs $8201			bcs		_CRSyntaxError
.81f4					_CRIsKeyword:
.81f4	c8		iny				iny 								; consume command
.81f5	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.81f6	aa		tax				tax 								; put in X for vector jump
.81f7	20 04 82	jsr $8204			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.81fa	80 e9		bra $81e5			bra 	_CRMainLoop 				; and loop round
.81fc					_CRNotKeyword:
.81fc	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.81fe	f0 e4		beq $81e4			beq 	_CRIncMainLoop
>8200	db						.byte 	$DB 						; causes a break in the emulator
.8201					_CRSyntaxError:
.8201	4c 2e 95	jmp $952e			jmp 	SyntaxError
.8204					_CRCallVector0:
.8204	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8207					CRNoProgram:
.8207	4c 5f 81	jmp $815f			jmp 	EndCommand
.820a					EOLCommand:
.820a	18		clc				clc
.820b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.820d	65 30		adc $30				adc 	codePtr
.820f	85 30		sta $30				sta 	codePtr
.8211	90 02		bcc $8215			bcc 	_CREExit
.8213	e6 31		inc $31				inc 	codePtr+1
.8215					_CREExit:
.8215	80 c4		bra $81db			bra 	RunNewLine
.8217					Shift1Command:
.8217	b1 30		lda ($30),y			lda 	(codePtr),y
.8219	c8		iny				iny
.821a	0a		asl a				asl 	a
.821b	aa		tax				tax
.821c	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9077					CheckRightBracket:
.9077	b1 30		lda ($30),y			lda 	(codePtr),y
.9079	c8		iny				iny
.907a	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.907c	d0 0f		bne $908d			bne 	CNAFail
.907e	60		rts				rts
.907f					CheckComma:
.907f	b1 30		lda ($30),y			lda 	(codePtr),y
.9081	c8		iny				iny
.9082	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9084	d0 07		bne $908d			bne 	CNAFail
.9086	60		rts				rts
.9087					CheckNextA:
.9087	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9089	d0 02		bne $908d			bne 	CNAFail
.908b	c8		iny				iny 								; skip character
.908c	60		rts				rts 								; and exit
.908d					CNAFail:
.908d	4c 2e 95	jmp $952e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.821f					ErrorHandler:
.821f	a8		tay				tay 								; find the error text
.8220	f0 42		beq $8264			beq 	_EHEnd
.8222	a2 00		ldx #$00			ldx 	#0
.8224					_EHFind:
.8224	88		dey				dey 								; found the error text ?
.8225	f0 0a		beq $8231			beq 	_EHFound
.8227					_EHFindZero:
.8227	bd 47 95	lda $9547,x			lda 	ErrorText,x 				; find the next error
.822a	e8		inx				inx
.822b	c9 00		cmp #$00			cmp 	#0
.822d	d0 f8		bne $8227			bne 	_EHFindZero
.822f	80 f3		bra $8224			bra 	_EHFind
.8231					_EHFound:
.8231	bd 47 95	lda $9547,x			lda 	ErrorText,x 				; print the message
.8234	20 56 96	jsr $9656			jsr 	EXTPrintCharacter
.8237	e8		inx				inx
.8238	bd 47 95	lda $9547,x			lda 	ErrorText,x
.823b	d0 f4		bne $8231			bne 	_EHFound
.823d	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.823f	b1 30		lda ($30),y			lda 	(codePtr),y
.8241	d0 05		bne $8248			bne 	_EHAtMsg
.8243	c8		iny				iny
.8244	b1 30		lda ($30),y			lda 	(codePtr),y
.8246	f0 17		beq $825f			beq 	_EHCREnd
.8248					_EHAtMsg:
.8248	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.824a	a9 67		lda #$67			lda 	#_AtMsg & $FF
.824c	20 71 82	jsr $8271			jsr 	PrintStringXA
.824f	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8251	b1 30		lda ($30),y			lda 	(codePtr),y
.8253	48		pha				pha
.8254	c8		iny				iny
.8255	b1 30		lda ($30),y			lda 	(codePtr),y
.8257	aa		tax				tax
.8258	68		pla				pla
.8259	20 d1 91	jsr $91d1			jsr 	ConvertInt16 				; convert XA to string
.825c	20 71 82	jsr $8271			jsr 	PrintStringXA 				; and print it.
.825f					_EHCREnd:
.825f	a9 0d		lda #$0d			lda 	#13 						; new line
.8261	20 56 96	jsr $9656			jsr 	EXTPrintCharacter
.8264					_EHEnd:
.8264	4c 0c 80	jmp $800c			jmp 	WarmStart
>8267	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>826f	20 00
.8271					PrintStringXA:
.8271	5a		phy				phy
.8272	86 37		stx $37				stx 	zTemp0+1
.8274	85 36		sta $36				sta 	zTemp0
.8276	a0 00		ldy #$00			ldy 	#0
.8278					_PSXALoop:
.8278	b1 36		lda ($36),y			lda 	(zTemp0),y
.827a	f0 06		beq $8282			beq 	_PSXAExit
.827c	20 56 96	jsr $9656			jsr 	EXTPrintCharacter
.827f	c8		iny				iny
.8280	80 f6		bra $8278			bra 	_PSXALoop
.8282					_PSXAExit:
.8282	7a		ply				ply
.8283	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8284					UnaryTrue:
.8284	fa		plx				plx
.8285					ReturnTrue:
.8285	a9 01		lda #$01			lda 	#1  						; set to 1
.8287	20 7c 8b	jsr $8b7c			jsr 	NSMSetByte
.828a	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.828c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.828f	60		rts				rts
.8290					UnaryFalse:
.8290	fa		plx				plx
.8291					ReturnFalse:
.8291	4c 7a 8b	jmp $8b7a			jmp 	NSMSetZero 					; set it all to zero
.8294					BinaryCompareEqual:
.8294	fa		plx				plx
.8295	20 d0 82	jsr $82d0			jsr 	CompareBaseCode
.8298	c9 00		cmp #$00			cmp 	#0
.829a	f0 e9		beq $8285			beq 	ReturnTrue
.829c	80 f3		bra $8291			bra 	ReturnFalse
.829e					BinaryCompareLess:
.829e	fa		plx				plx
.829f	20 d0 82	jsr $82d0			jsr 	CompareBaseCode
.82a2	c9 ff		cmp #$ff			cmp 	#$FF
.82a4	f0 df		beq $8285			beq 	ReturnTrue
.82a6	80 e9		bra $8291			bra 	ReturnFalse
.82a8					BinaryCompareGreater:
.82a8	fa		plx				plx
.82a9	20 d0 82	jsr $82d0			jsr 	CompareBaseCode
.82ac	c9 01		cmp #$01			cmp 	#1
.82ae	f0 d5		beq $8285			beq 	ReturnTrue
.82b0	80 df		bra $8291			bra 	ReturnFalse
.82b2					BinaryCompareNotEqual:
.82b2	fa		plx				plx
.82b3	20 d0 82	jsr $82d0			jsr 	CompareBaseCode
.82b6	c9 00		cmp #$00			cmp 	#0
.82b8	d0 cb		bne $8285			bne 	ReturnTrue
.82ba	80 d5		bra $8291			bra 	ReturnFalse
.82bc					BinaryCompareLessEqual:
.82bc	fa		plx				plx
.82bd	20 d0 82	jsr $82d0			jsr 	CompareBaseCode
.82c0	c9 01		cmp #$01			cmp 	#1
.82c2	d0 c1		bne $8285			bne 	ReturnTrue
.82c4	80 cb		bra $8291			bra 	ReturnFalse
.82c6					BinaryCompareGreaterEqual:
.82c6	fa		plx				plx
.82c7	20 d0 82	jsr $82d0			jsr 	CompareBaseCode
.82ca	c9 ff		cmp #$ff			cmp 	#$FF
.82cc	d0 b7		bne $8285			bne 	ReturnTrue
.82ce	80 c1		bra $8291			bra 	ReturnFalse
.82d0					CompareBaseCode:
.82d0	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; make both values if references.
.82d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.82d6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82d9	29 10		and #$10			and 	#NSTString
.82db	d0 40		bne $831d			bne 	_CBCString
.82dd	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.82e0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82e3	d0 3b		bne $8320			bne 	_CBCFloat
.82e5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.82e8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82eb	29 08		and #$08			and 	#NSTFloat
.82ed	d0 31		bne $8320			bne 	_CBCFloat
.82ef	20 23 83	jsr $8323			jsr 	CompareFixMinusZero
.82f2	e8		inx				inx
.82f3	20 23 83	jsr $8323			jsr 	CompareFixMinusZero
.82f6	ca		dex				dex
.82f7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.82fa	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.82fd	10 0b		bpl $830a			bpl 	_CDCSameSign
.82ff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8302	30 16		bmi $831a			bmi 	_CBCLess 					; return $FF
.8304					_CBCGreater:
.8304	a9 01		lda #$01			lda 	#1
.8306	60		rts				rts
.8307					_CBCEqual:
.8307	a9 00		lda #$00			lda 	#0
.8309	60		rts				rts
.830a					_CDCSameSign:
.830a	20 32 84	jsr $8432			jsr 	SubTopTwoStack 				; unsigned subtract
.830d	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; or the mantissa together
.8310	f0 f5		beq $8307			beq 	_CBCEqual 					; -0 == 0
.8312	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8315	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8318	10 ea		bpl $8304			bpl 	_CBCGreater
.831a					_CBCLess:
.831a	a9 ff		lda #$ff			lda 	#$FF
.831c	60		rts				rts
.831d					_CBCString:
.831d	4c 89 83	jmp $8389			jmp 	CompareStrings
.8320					_CBCFloat:
.8320	4c cd 92	jmp $92cd			jmp 	CompareFloat
.8323					CompareFixMinusZero:
.8323	20 aa 8b	jsr $8baa			jsr 	NSMIsZero
.8326	d0 03		bne $832b			bne 	_CFXMZNotZero
.8328	9e 00 06	stz $0600,x			stz 	NSStatus,x
.832b					_CFXMZNotZero:
.832b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.832c					StringConcat:
.832c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.832f	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8332	29 18		and #$18			and 	#NSBTypeMask
.8334	c9 10		cmp #$10			cmp 	#NSTString
.8336	d0 4e		bne $8386			bne		_SCType
.8338	64 38		stz $38				stz 	zTemp1 						; counting total length
.833a	e8		inx				inx
.833b	20 59 83	jsr $8359			jsr 	_SCSetupZ0 					; setup for second
.833e	20 64 83	jsr $8364			jsr 	_SCLengthZ0 				; length for second
.8341	ca		dex				dex
.8342	20 59 83	jsr $8359			jsr 	_SCSetupZ0 					; setup for first
.8345	20 64 83	jsr $8364			jsr 	_SCLengthZ0 				; length for first
.8348	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.834a	20 03 96	jsr $9603			jsr 	StringTempAllocate
.834d	20 77 83	jsr $8377			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8350	e8		inx				inx
.8351	20 59 83	jsr $8359			jsr 	_SCSetupZ0 					; copy second out
.8354	20 77 83	jsr $8377			jsr 	_SCCopy
.8357	ca		dex				dex
.8358	60		rts				rts
.8359					_SCSetupZ0:
.8359	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.835c	85 36		sta $36				sta 	zTemp0
.835e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8361	85 37		sta $37				sta 	zTemp0+1
.8363	60		rts				rts
.8364					_SCLengthZ0:
.8364	5a		phy				phy
.8365	a0 00		ldy #$00			ldy 	#0
.8367					_SCLenLoop:
.8367	b1 36		lda ($36),y			lda 	(zTemp0),y
.8369	f0 0a		beq $8375			beq 	_SCLExit
.836b	c8		iny				iny
.836c	e6 38		inc $38				inc 	zTemp1
.836e	10 f7		bpl $8367			bpl		_SCLenLoop
.8370	a9 09		lda #$09		lda	#9
.8372	4c 1f 82	jmp $821f		jmp	ErrorHandler
.8375					_SCLExit:
.8375	7a		ply				ply
.8376	60		rts				rts
.8377					_SCCopy:
.8377	5a		phy				phy
.8378	a0 00		ldy #$00			ldy 	#0
.837a					_SCCopyLoop:
.837a	b1 36		lda ($36),y			lda 	(zTemp0),y
.837c	f0 06		beq $8384			beq 	_SCCExit
.837e	20 41 96	jsr $9641			jsr 	StringTempWrite
.8381	c8		iny				iny
.8382	80 f6		bra $837a			bra 	_SCCopyLoop
.8384					_SCCExit:
.8384	7a		ply				ply
.8385	60		rts				rts
.8386					_SCType:
.8386	4c 38 95	jmp $9538			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9090					IntegerDivide:
.9090	fa		plx				plx
.9091	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9094	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9097	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9098	0a		asl a				asl 	a
.9099	10 05		bpl $90a0			bpl 	_NotRef
.909b	48		pha				pha
.909c	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.909f	68		pla				pla
.90a0					_NotRef:
.90a0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90a2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90a5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90a8	f0 03		beq $90ad			beq 	_IntegerCode 				; if clear, then we have two integers
.90aa	4c 38 95	jmp $9538			jmp 	TypeError 					; anything else, type mismatch.
.90ad					_IntegerCode:
.90ad	20 cf 90	jsr $90cf			jsr 	CheckDivideZero 			; do div zero check
.90b0	20 06 91	jsr $9106			jsr 	Int32Divide 				; do the division
.90b3	20 c3 91	jsr $91c3			jsr 	CalculateSign 				; calculate result sign
.90b6					NSMCopyPlusTwoToZero:
.90b6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.90b9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90bc	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.90bf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90c2	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.90c5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90c8	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.90cb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90ce	60		rts				rts
.90cf					CheckDivideZero:
.90cf	e8		inx				inx
.90d0	20 aa 8b	jsr $8baa			jsr 	NSMIsZero
.90d3	f0 02		beq $90d7			beq 	_CDVError
.90d5	ca		dex				dex
.90d6	60		rts				rts
.90d7					_CDVError:
.90d7	a9 03		lda #$03		lda	#3
.90d9	4c 1f 82	jmp $821f		jmp	ErrorHandler
.90dc					IntegerModulus:
.90dc	fa		plx				plx
.90dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90e0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90e3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90e4	0a		asl a				asl 	a
.90e5	10 05		bpl $90ec			bpl 	_NotRef
.90e7	48		pha				pha
.90e8	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90eb	68		pla				pla
.90ec					_NotRef:
.90ec	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90ee	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90f1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90f4	f0 03		beq $90f9			beq 	_IntegerCode 				; if clear, then we have two integers
.90f6	4c 38 95	jmp $9538			jmp 	TypeError 					; anything else, type mismatch.
.90f9					_IntegerCode:
.90f9	20 cf 90	jsr $90cf			jsr 	CheckDivideZero 			; do div zero check
.90fc	20 06 91	jsr $9106			jsr 	Int32Divide 				; do the division
.90ff	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9102	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9105	60		rts				rts
.9106					Int32Divide:
.9106	48		pha				pha 								; save AXY
.9107	5a		phy				phy
.9108	20 51 8b	jsr $8b51			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.910b	20 76 8b	jsr $8b76			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.910e	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9110					_I32DivideLoop:
.9110	e8		inx				inx
.9111	e8		inx				inx
.9112	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9115	ca		dex				dex
.9116	ca		dex				dex
.9117	20 90 8b	jsr $8b90			jsr 	NSMRotateLeft
.911a	20 46 91	jsr $9146			jsr 	DivideCheckSubtract 		; check if subtract possible
.911d	90 03		bcc $9122			bcc 	_I32DivideNoCarryIn
.911f	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9122					_I32DivideNoCarryIn:
.9122	88		dey				dey 								; loop round till division completed.
.9123	d0 eb		bne $9110			bne 	_I32DivideLoop
.9125	7a		ply				ply 								; restore AXY and exit
.9126	68		pla				pla
.9127	60		rts				rts
.9128					Int32ShiftDivide:
.9128	48		pha				pha 								; save AY
.9129	5a		phy				phy
.912a	e8		inx				inx 								; clear S[X+2]
.912b	e8		inx				inx
.912c	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero
.912f	ca		dex				dex
.9130	ca		dex				dex
.9131	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9133					_I32SDLoop:
.9133	20 46 91	jsr $9146			jsr 	DivideCheckSubtract 		; check if subtract possible
.9136	e8		inx				inx
.9137	e8		inx				inx
.9138	20 90 8b	jsr $8b90			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.913b	ca		dex				dex
.913c	ca		dex				dex
.913d	20 90 8b	jsr $8b90			jsr 	NSMRotateLeft
.9140	88		dey				dey 	 							; do 31 times
.9141	d0 f0		bne $9133			bne 	_I32SDLoop
.9143	7a		ply				ply 								; restore AY and exit
.9144	68		pla				pla
.9145	60		rts				rts
.9146					DivideCheckSubtract:
.9146	20 32 84	jsr $8432			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9149	b0 04		bcs $914f			bcs 	_DCSExit 					; if carry set, then could do, exit
.914b	20 0c 84	jsr $840c			jsr 	AddTopTwoStack 				; add it back in
.914e	18		clc				clc 								; and return False
.914f					_DCSExit:
.914f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9150					MulInteger:
.9150	fa		plx				plx
.9151	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9154	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9157	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9158	0a		asl a				asl 	a
.9159	10 05		bpl $9160			bpl 	_NotRef
.915b	48		pha				pha
.915c	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.915f	68		pla				pla
.9160					_NotRef:
.9160	0a		asl a				asl 	a 							; put MSB of type into A:7
.9161	30 0b		bmi $916e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9163	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9166	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9169	f0 06		beq $9171			beq 	_IntegerCode 				; if clear, then we have two integers
.916b	4c a4 93	jmp $93a4			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.916e					_StringData:
.916e	4c 42 95	jmp $9542			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9171					_IntegerCode:
.9171	20 7e 91	jsr $917e			jsr 	MultiplyShort
.9174	c9 00		cmp #$00			cmp 	#0
.9176	f0 05		beq $917d			beq 	_MIExit
.9178	a9 04		lda #$04		lda	#4
.917a	4c 1f 82	jmp $821f		jmp	ErrorHandler
.917d					_MIExit:
.917d	60		rts				rts
.917e					MultiplyShort:
.917e	5a		phy				phy 								; save Y
.917f	20 51 8b	jsr $8b51			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9182	20 76 8b	jsr $8b76			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9185	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9187					_I32MLoop:
.9187	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.918a	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.918d	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9190	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9193	f0 28		beq $91bd			beq 	_I32MExit 					; exit if zero
.9195	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9198	29 01		and #$01			and 	#1
.919a	f0 0e		beq $91aa			beq 	_I32MNoAdd
.919c	20 0c 84	jsr $840c			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.919f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.91a2	10 06		bpl $91aa			bpl 	_I32MNoAdd
.91a4					_I32ShiftRight:
.91a4	20 9d 8b	jsr $8b9d			jsr 	NSMShiftRight 				; shift S[X] right
.91a7	c8		iny				iny 								; increment shift count
.91a8	80 0a		bra $91b4			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.91aa					_I32MNoAdd:
.91aa	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.91ad	70 f5		bvs $91a4			bvs 	_I32ShiftRight 				; instead.
.91af	e8		inx				inx
.91b0	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.91b3	ca		dex				dex
.91b4					_I32MShiftUpper:
.91b4	e8		inx				inx 								; shift S[X+2] right
.91b5	e8		inx				inx
.91b6	20 9d 8b	jsr $8b9d			jsr 	NSMShiftRight
.91b9	ca		dex				dex
.91ba	ca		dex				dex
.91bb	80 ca		bra $9187			bra 	_I32MLoop 					; try again.
.91bd					_I32MExit:
.91bd	20 c3 91	jsr $91c3			jsr 	CalculateSign
.91c0	98		tya				tya 								; shift in A
.91c1	7a		ply				ply 								; restore Y and exit
.91c2	60		rts				rts
.91c3					CalculateSign:
.91c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.91c6	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.91c9	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.91cc	0a		asl a				asl 	a 							; shift bit 7 into carry
.91cd	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.91d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8389					CompareStrings:
.8389	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.838c	3d 01 06	and $0601,x			and 	NSStatus+1,x
.838f	29 10		and #$10			and 	#NSBIsString
.8391	f0 2c		beq $83bf			beq 	_CSTypeError
.8393	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8396	85 36		sta $36				sta 	zTemp0
.8398	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.839b	85 37		sta $37				sta 	zTemp0+1
.839d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83a0	85 38		sta $38				sta 	zTemp1
.83a2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83a5	85 39		sta $39				sta 	zTemp1+1
.83a7	5a		phy				phy 								; save Y so we can access strings
.83a8	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83aa					_CSLoop:
.83aa	c8		iny				iny
.83ab	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83ad	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83af	d0 06		bne $83b7			bne 	_CSDifferent
.83b1	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83b3	d0 f5		bne $83aa			bne 	_CSLoop 					; still comparing
.83b5					_CSExit:
.83b5	7a		ply				ply 								; reached end, return zero in A from EOS
.83b6	60		rts				rts
.83b7					_CSDifferent:
.83b7	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83b9	90 fa		bcc $83b5			bcc		_CSExit
.83bb	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83bd	80 f6		bra $83b5			bra 	_CSExit
.83bf					_CSTypeError:
.83bf	4c 38 95	jmp $9538			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.83c2					ShiftLeft:
.83c2	38		sec				sec
.83c3	80 01		bra $83c6			bra 	ShiftMain
.83c5					ShiftRight:
.83c5	18		clc				clc
.83c6					ShiftMain:
.83c6	fa		plx				plx 								; restore X
.83c7	08		php				php 								; save direction
.83c8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83cb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83ce	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83cf	0a		asl a				asl 	a
.83d0	10 05		bpl $83d7			bpl 	_NotRef
.83d2	48		pha				pha
.83d3	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83d6	68		pla				pla
.83d7					_NotRef:
.83d7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83d9	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83dc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83df	f0 03		beq $83e4			beq 	_IntegerCode 				; if clear, then we have two integers
.83e1	4c 38 95	jmp $9538			jmp 	TypeError 					; anything else, type mismatch.
.83e4					_IntegerCode:
.83e4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.83e7	29 e0		and #$e0			and 	#$E0
.83e9	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.83ec	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.83ef	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.83f2	d0 13		bne $8407			bne 	_SMExit0 					; if >= 32 it will always return zero.
.83f4					_SMLoop:
.83f4	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.83f7	30 11		bmi $840a			bmi 	_SMExit 					; exit if done.
.83f9	28		plp				plp 								; restore direcition setting
.83fa	08		php				php
.83fb	90 05		bcc $8402			bcc 	_SMRight
.83fd	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; shift left if CS
.8400	80 f2		bra $83f4			bra 	_SMLoop
.8402					_SMRight:
.8402	20 9d 8b	jsr $8b9d			jsr 	NSMShiftRight 				; shift right if CC
.8405	80 ed		bra $83f4			bra 	_SMLoop
.8407					_SMExit0:
.8407	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero 					; return zero.
.840a					_SMExit:
.840a	28		plp				plp 								; throw direction
.840b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.840c					AddTopTwoStack:
.840c	18		clc				clc
.840d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8410	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8413	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8416	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8419	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.841c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.841f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8422	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8425	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8428	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.842b	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.842e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8431	60		rts				rts
.8432					SubTopTwoStack:
.8432	38		sec				sec
.8433	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8436	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8439	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.843c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.843f	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8442	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8445	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8448	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.844b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.844e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8451	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8454	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8457	60		rts				rts
.8458					AddInteger:
.8458	fa		plx				plx
.8459	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.845c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.845f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8460	0a		asl a				asl 	a
.8461	10 05		bpl $8468			bpl 	_NotRef
.8463	48		pha				pha
.8464	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8467	68		pla				pla
.8468					_NotRef:
.8468	0a		asl a				asl 	a 							; put MSB of type into A:7
.8469	30 0b		bmi $8476			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.846b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.846e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8471	f0 06		beq $8479			beq 	_IntegerCode 				; if clear, then we have two integers
.8473	4c 2c 92	jmp $922c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8476					_StringData:
.8476	4c 2c 83	jmp $832c			jmp 	StringConcat							; at least one string - don't know both are strings.
.8479					_IntegerCode:
.8479					AddCode:
.8479	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.847c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.847f	10 8b		bpl $840c			bpl 	AddTopTwoStack
.8481	20 32 84	jsr $8432			jsr 	SubTopTwoStack 				; do a physical subtraction
.8484	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8487	10 09		bpl $8492			bpl 	_AddExit
.8489	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.848c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.848f	20 2f 8b	jsr $8b2f			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8492					_AddExit:
.8492	60		rts				rts
.8493					SubInteger:
.8493	fa		plx				plx
.8494	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8497	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.849a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.849b	0a		asl a				asl 	a
.849c	10 05		bpl $84a3			bpl 	_NotRef
.849e	48		pha				pha
.849f	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84a2	68		pla				pla
.84a3					_NotRef:
.84a3	0a		asl a				asl 	a 							; put MSB of type into A:7
.84a4	30 0b		bmi $84b1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84a6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84a9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ac	f0 06		beq $84b4			beq 	_IntegerCode 				; if clear, then we have two integers
.84ae	4c 31 92	jmp $9231			jmp 	FloatingPointSub 							; otherwise at least one float.
.84b1					_StringData:
.84b1	4c 42 95	jmp $9542			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84b4					_IntegerCode:
.84b4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84b7	49 80		eor #$80			eor 	#$80
.84b9	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84bc	80 bb		bra $8479			bra 	AddCode 					; and do the same code as add.
.84be					AndInteger:
.84be	fa		plx				plx
.84bf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84c2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84c5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84c6	0a		asl a				asl 	a
.84c7	10 05		bpl $84ce			bpl 	_NotRef
.84c9	48		pha				pha
.84ca	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84cd	68		pla				pla
.84ce					_NotRef:
.84ce	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.84d0	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84d3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84d6	f0 03		beq $84db			beq 	_IntegerCode 				; if clear, then we have two integers
.84d8	4c 38 95	jmp $9538			jmp 	TypeError 					; anything else, type mismatch.
.84db					_IntegerCode:
.84db	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.84de	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.84e1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84e4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.84e7	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.84ea	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84ed	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.84f0	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.84f3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84f6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84f9	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.84fc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84ff	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8502	60		rts				rts
.8503					OraInteger:
.8503	fa		plx				plx
.8504	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8507	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.850a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.850b	0a		asl a				asl 	a
.850c	10 05		bpl $8513			bpl 	_NotRef
.850e	48		pha				pha
.850f	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8512	68		pla				pla
.8513					_NotRef:
.8513	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8515	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8518	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.851b	f0 03		beq $8520			beq 	_IntegerCode 				; if clear, then we have two integers
.851d	4c 38 95	jmp $9538			jmp 	TypeError 					; anything else, type mismatch.
.8520					_IntegerCode:
.8520	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8523	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8526	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8529	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.852c	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.852f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8532	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8535	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8538	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.853b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.853e	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8541	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8544	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8547	60		rts				rts
.8548					EorInteger:
.8548	fa		plx				plx
.8549	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.854c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.854f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8550	0a		asl a				asl 	a
.8551	10 05		bpl $8558			bpl 	_NotRef
.8553	48		pha				pha
.8554	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8557	68		pla				pla
.8558					_NotRef:
.8558	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.855a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.855d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8560	f0 03		beq $8565			beq 	_IntegerCode 				; if clear, then we have two integers
.8562	4c 38 95	jmp $9538			jmp 	TypeError 					; anything else, type mismatch.
.8565					_IntegerCode:
.8565	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8568	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.856b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.856e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8571	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8574	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8577	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.857a	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.857d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8580	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8583	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8586	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8589	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.858c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.91d1					ConvertInt16:
.91d1	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.91d4	8e 10 06	stx $0610			stx 	NSMantissa1
.91d7	9c 18 06	stz $0618			stz 	NSMantissa2
.91da	9c 20 06	stz $0620			stz 	NSMantissa3
.91dd	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.91e0	a2 00		ldx #$00			ldx 	#0 							; stack level
.91e2	a9 0a		lda #$0a			lda 	#10 						; base
.91e4	80 00		bra $91e6			bra 	ConvertInt32
.91e6					ConvertInt32:
.91e6	5a		phy				phy
.91e7	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.91e9	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.91ec	10 08		bpl $91f6			bpl 	_CI32NotNeg
.91ee	48		pha				pha
.91ef	a9 2d		lda #$2d			lda 	#'-'
.91f1	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.91f4	c8		iny				iny
.91f5	68		pla				pla
.91f6					_CI32NotNeg:
.91f6	20 04 92	jsr $9204			jsr 	_CI32DivideConvert 			; recursive conversion
.91f9	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.91fb	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.91fe	7a		ply				ply
.91ff	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9201	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9203	60		rts				rts
.9204					_CI32DivideConvert:
.9204	e8		inx				inx 								; write to next slot up
.9205	20 7c 8b	jsr $8b7c			jsr 	NSMSetByte
.9208	ca		dex				dex
.9209	20 06 91	jsr $9106			jsr 	Int32Divide 				; divide
.920c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.920f	48		pha				pha
.9210	20 b6 90	jsr $90b6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9213	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; is it zero ?
.9216	f0 06		beq $921e			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9218	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.921b	20 04 92	jsr $9204			jsr 	_CI32DivideConvert 			; and recusrively call.
.921e					_CI32NoRecurse:
.921e	68		pla				pla 								; remainder
.921f	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9221	90 02		bcc $9225			bcc 	_CI32NotHex
.9223	69 26		adc #$26			adc 	#6+32
.9225					_CI32NotHex:
.9225	69 30		adc #$30			adc 	#48
.9227	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.922a	c8		iny				iny
.922b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.858d					PrecedenceLevel:
>858d	04					.byte	 4	; $00 <<
>858e	02					.byte	 2	; $01 <=
>858f	02					.byte	 2	; $02 <>
>8590	00					.byte	 0	; $03 !!3
>8591	00					.byte	 0	; $04 ><
>8592	02					.byte	 2	; $05 >=
>8593	04					.byte	 4	; $06 >>
>8594	00					.byte	 0	; $07 !!7
>8595	00					.byte	 0	; $08 !!8
>8596	00					.byte	 0	; $09 !!9
>8597	00					.byte	 0	; $0a !!10
>8598	00					.byte	 0	; $0b !!11
>8599	00					.byte	 0	; $0c !!12
>859a	00					.byte	 0	; $0d !!13
>859b	00					.byte	 0	; $0e !!14
>859c	00					.byte	 0	; $0f !!15
>859d	00					.byte	 0	; $10 @
>859e	00					.byte	 0	; $11 !!17
>859f	00					.byte	 0	; $12 !!18
>85a0	00					.byte	 0	; $13 [
>85a1	04					.byte	 4	; $14 \
>85a2	00					.byte	 0	; $15 ]
>85a3	01					.byte	 1	; $16 ^
>85a4	00					.byte	 0	; $17 _
>85a5	00					.byte	 0	; $18 `
>85a6	00					.byte	 0	; $19 !!25
>85a7	00					.byte	 0	; $1a !!26
>85a8	00					.byte	 0	; $1b {
>85a9	01					.byte	 1	; $1c |
>85aa	00					.byte	 0	; $1d }
>85ab	00					.byte	 0	; $1e ~
>85ac	00					.byte	 0	; $1f [7m<7F>[m
>85ad	00					.byte	 0	; $20
>85ae	05					.byte	 5	; $21 !
>85af	00					.byte	 0	; $22 "
>85b0	00					.byte	 0	; $23 #
>85b1	05					.byte	 5	; $24 $
>85b2	04					.byte	 4	; $25 %
>85b3	01					.byte	 1	; $26 &
>85b4	00					.byte	 0	; $27 '
>85b5	00					.byte	 0	; $28 (
>85b6	00					.byte	 0	; $29 )
>85b7	04					.byte	 4	; $2a *
>85b8	03					.byte	 3	; $2b +
>85b9	00					.byte	 0	; $2c ,
>85ba	03					.byte	 3	; $2d -
>85bb	00					.byte	 0	; $2e .
>85bc	04					.byte	 4	; $2f /
>85bd	00					.byte	 0	; $30 0
>85be	00					.byte	 0	; $31 1
>85bf	00					.byte	 0	; $32 2
>85c0	00					.byte	 0	; $33 3
>85c1	00					.byte	 0	; $34 4
>85c2	00					.byte	 0	; $35 5
>85c3	00					.byte	 0	; $36 6
>85c4	00					.byte	 0	; $37 7
>85c5	00					.byte	 0	; $38 8
>85c6	00					.byte	 0	; $39 9
>85c7	00					.byte	 0	; $3a :
>85c8	00					.byte	 0	; $3b ;
>85c9	02					.byte	 2	; $3c <
>85ca	02					.byte	 2	; $3d =
>85cb	02					.byte	 2	; $3e >
>85cc	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.85cd					EvaluateExpressionAt0:
.85cd	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.85cf					EvaluateExpression:
.85cf	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.85d1					EvaluateExpressionAtPrecedence:
.85d1	48		pha				pha 								; save precedence level
.85d2	20 cd 87	jsr $87cd			jsr 	EvaluateTerm 				; evaluate term into level X.
.85d5	68		pla				pla 								; restore precedence level.
.85d6					_EXPRLoop:
.85d6	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.85d8	b1 30		lda ($30),y			lda 	(codePtr),y
.85da	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.85dc	b0 25		bcs $8603			bcs 	_EXPRExit
.85de	da		phx				phx 								; read the operator precedence
.85df	aa		tax				tax
.85e0	bd 8d 85	lda $858d,x			lda 	PrecedenceLevel,x
.85e3	fa		plx				plx
.85e4	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.85e6	f0 1b		beq $8603			beq 	_EXPRExit
.85e8	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.85ea	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.85ec	c5 37		cmp $37				cmp 	zTemp0+1
.85ee	b0 13		bcs $8603			bcs		_EXPRExit 					; if current >= operator exit
.85f0	48		pha				pha 								; save current precedence.
.85f1	b1 30		lda ($30),y			lda 	(codePtr),y
.85f3	c8		iny				iny
.85f4	48		pha				pha
.85f5	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.85f7	e8		inx				inx 								; work out the right hand side.
.85f8	20 d1 85	jsr $85d1			jsr 	EvaluateExpressionAtPrecedence
.85fb	ca		dex				dex
.85fc	68		pla				pla 								; get operator, call the code.
.85fd	20 06 86	jsr $8606			jsr 	_EXPRCaller
.8600	68		pla				pla 								; restore precedence level
.8601	80 d3		bra $85d6			bra 	_EXPRLoop 					; and go round.
.8603					_EXPRExit:
.8603	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8605	60		rts				rts
.8606					_EXPRCaller:
.8606	da		phx				phx 								; save on stack, first thing is to restore it
.8607	0a		asl a				asl 	a 							; double so can use vectors into X
.8608	aa		tax				tax
.8609	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.922c					FloatingPointAdd:
.922c	20 cd 93	jsr $93cd			jsr 	FloatPrepare 				; prepare for floats
.922f	80 0b		bra $923c			bra 	FloatAdd
.9231					FloatingPointSub:
.9231	20 cd 93	jsr $93cd			jsr 	FloatPrepare 				; prepare for floats
.9234					FloatSubtract:
.9234	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9237	49 80		eor #$80			eor 	#$80
.9239	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.923c					FloatAdd:
.923c	48		pha				pha
.923d	5a		phy				phy
.923e	20 de 93	jsr $93de			jsr 	NSNormalise 				; normalise S[X]
.9241	f0 54		beq $9297			beq 	_FAReturn1
.9243	e8		inx				inx 								; normalise S[X+1]
.9244	20 de 93	jsr $93de			jsr 	NSNormalise
.9247	ca		dex				dex
.9248	c9 00		cmp #$00			cmp 	#0
.924a	f0 6f		beq $92bb			beq 	_FAExit 					; if so, just return A
.924c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.924f	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9252	f0 1b		beq $926f			beq 	_FAExponentsEqual
.9254	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9257	a8		tay				tay
.9258	38		sec				sec 								; do a signed comparison of the exponents.
.9259	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.925c	50 02		bvc $9260			bvc 	_FANoSignedChange
.925e	49 80		eor #$80			eor 	#$80
.9260					_FANoSignedChange:
.9260	29 80		and #$80			and 	#$80
.9262	10 03		bpl $9267			bpl 	_FAHaveMax
.9264	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9267					_FAHaveMax:
.9267	20 be 92	jsr $92be			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.926a	e8		inx				inx
.926b	20 be 92	jsr $92be			jsr 	_FAShiftToExponent
.926e	ca		dex				dex
.926f					_FAExponentsEqual:
.926f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9272	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9275	30 10		bmi $9287			bmi 	_FADifferentSigns
.9277	20 0c 84	jsr $840c			jsr 	AddTopTwoStack 				; do the add of the mantissae
.927a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.927d	10 3c		bpl $92bb			bpl 	_FAExit 					; if no, we are done.
.927f	20 9d 8b	jsr $8b9d			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9282	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9285	80 34		bra $92bb			bra 	_FAExit
.9287					_FADifferentSigns:
.9287	20 32 84	jsr $8432			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.928a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.928d	10 2c		bpl $92bb			bpl 	_FAExit 					; if no, we are done.
.928f	20 26 8b	jsr $8b26			jsr 	NSMNegate 					; netate result
.9292	20 2f 8b	jsr $8b2f			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9295	80 24		bra $92bb			bra 	_FAExit
.9297					_FAReturn1:
.9297	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.929a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.929d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.92a0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92a3	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.92a6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92a9	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.92ac	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92af	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.92b2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92b5	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.92b8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92bb					_FAExit:
.92bb	7a		ply				ply
.92bc	68		pla				pla
.92bd	60		rts				rts
.92be					_FAShiftToExponent:
.92be					_FAShiftToExponent2:
.92be	98		tya				tya 								; compare Y to exponent
.92bf	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.92c2	f0 08		beq $92cc			beq 	_FASEExit 					; exit if so.
.92c4	20 9d 8b	jsr $8b9d			jsr 	NSMShiftRight	 			; shift the mantissa right
.92c7	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.92ca	80 f2		bra $92be			bra 	_FAShiftToExponent2
.92cc					_FASEExit:
.92cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.92cd					CompareFloat:
.92cd	20 34 92	jsr $9234			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.92d0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.92d3	29 f8		and #$f8			and 	#$F8
.92d5	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.92d8	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.92db	f0 09		beq $92e6			beq 	_FCExit 					; zero, so approximately identical
.92dd	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.92df	3c 00 06	bit $0600,x			bit 	NSStatus,x
.92e2	10 02		bpl $92e6			bpl 	_FCExit
.92e4					_FCNegative:
.92e4	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.92e6					_FCExit:
.92e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.92e7					FDivideCommand:
.92e7	fa		plx				plx	 								; restore stack position
.92e8	20 cd 93	jsr $93cd			jsr 	FloatPrepare 				; prepare for floats
.92eb					FloatDivide:
.92eb	48		pha				pha
.92ec	e8		inx				inx
.92ed	20 de 93	jsr $93de			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.92f0	ca		dex				dex
.92f1	c9 00		cmp #$00			cmp 	#0
.92f3	f0 20		beq $9315			beq 	_FDZero
.92f5	20 de 93	jsr $93de			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.92f8	f0 19		beq $9313			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.92fa	20 28 91	jsr $9128			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.92fd	20 b6 90	jsr $90b6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9300	20 de 93	jsr $93de			jsr		NSNormalise 				; renormalise
.9303	20 c3 91	jsr $91c3			jsr 	CalculateSign 				; calculate result sign
.9306	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9309	38		sec				sec
.930a	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.930d	38		sec				sec
.930e	e9 1e		sbc #$1e			sbc 	#30
.9310	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9313					_FDExit:
.9313	68		pla				pla
.9314	60		rts				rts
.9315					_FDZero:
.9315	a9 03		lda #$03		lda	#3
.9317	4c 1f 82	jmp $821f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.931a					FloatFractionalPart:
.931a	5a		phy				phy
.931b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.931e	29 7f		and #$7f			and 	#$7F
.9320	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9323	20 de 93	jsr $93de			jsr 	NSNormalise
.9326	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9329	38		sec				sec
.932a	e9 e0		sbc #$e0			sbc 	#$E0
.932c	90 31		bcc $935f			bcc 	_FFPExit 					; already fractional
.932e	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9330	b0 2a		bcs $935c			bcs 	_FFPZero
.9332	a8		tay				tay 								; put count to do in Y
.9333	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9336	20 61 93	jsr $9361			jsr 	_FFPPartial
.9339	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.933c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.933f	20 61 93	jsr $9361			jsr 	_FFPPartial
.9342	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9345	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9348	20 61 93	jsr $9361			jsr 	_FFPPartial
.934b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.934e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9351	20 61 93	jsr $9361			jsr 	_FFPPartial
.9354	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9357	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; zeroed check.
.935a	d0 03		bne $935f			bne 	_FFPExit
.935c					_FFPZero:
.935c	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero
.935f					_FFPExit:
.935f	7a		ply				ply
.9360	60		rts				rts
.9361					_FFPPartial:
.9361	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9363	f0 17		beq $937c			beq 	_FFFPPExit
.9365	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9367	b0 0c		bcs $9375			bcs 	_FFFPPWholeByte
.9369	5a		phy				phy
.936a					_FFFPPLeft:
.936a	0a		asl a				asl 	a
.936b	88		dey				dey
.936c	d0 fc		bne $936a			bne 	_FFFPPLeft
.936e	7a		ply				ply
.936f					_FFFPPRight:
.936f	4a		lsr a				lsr 	a
.9370	88		dey				dey
.9371	d0 fc		bne $936f			bne 	_FFFPPRight
.9373	80 07		bra $937c			bra 	_FFFPPExit
.9375					_FFFPPWholeByte:
.9375	98		tya				tya 								; subtract 8 from count
.9376	38		sec				sec
.9377	e9 08		sbc #$08			sbc 	#8
.9379	a8		tay				tay
.937a	a9 00		lda #$00			lda 	#0 							; and clear all
.937c					_FFFPPExit:
.937c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.937d					FloatIntegerPart:
.937d	48		pha				pha
.937e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9381	f0 1f		beq $93a2			beq 	_FIPExit 					; if so do nothing
.9383	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; is it zero ?
.9386	f0 17		beq $939f			beq 	_FIPZero 					; if so return zero.
.9388	20 de 93	jsr $93de			jsr 	NSNormalise 				; normalise
.938b	f0 12		beq $939f			beq 	_FIPZero 					; normalised to zero, exit zero
.938d					_FIPShift:
.938d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9390	10 08		bpl $939a			bpl 	_FIPCheckZero
.9392	20 9d 8b	jsr $8b9d			jsr 	NSMShiftRight 				; shift mantissa right
.9395	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9398	80 f3		bra $938d			bra 	_FIPShift
.939a					_FIPCheckZero:
.939a	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; avoid -0 problem
.939d	d0 03		bne $93a2			bne 	_FIPExit 					; set to zero if mantissa zero.
.939f					_FIPZero:
.939f	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero
.93a2					_FIPExit:
.93a2	68		pla				pla
.93a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.93a4					FloatingPointMultiply:
.93a4	20 cd 93	jsr $93cd			jsr 	FloatPrepare 				; prepare for floats
.93a7					FloatMultiply:
.93a7	48		pha				pha
.93a8	20 de 93	jsr $93de			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93ab	f0 1b		beq $93c8			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93ad	e8		inx				inx
.93ae	20 de 93	jsr $93de			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93b1	ca		dex				dex
.93b2	c9 00		cmp #$00			cmp 	#0
.93b4	f0 0f		beq $93c5			beq 	_FDSetZero
.93b6	20 7e 91	jsr $917e			jsr 	MultiplyShort 				; calculate the result.
.93b9	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.93bc	18		clc				clc
.93bd	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.93c0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.93c3	80 03		bra $93c8			bra 	_FDExit
.93c5					_FDSetZero:
.93c5	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero 					; return 0
.93c8					_FDExit:
.93c8	20 de 93	jsr $93de			jsr 	NSNormalise 				; normalise the result
.93cb	68		pla				pla
.93cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.93cd					FloatPrepare:
.93cd	20 0c 86	jsr $860c			jsr 	DereferenceTopTwo 			; dereference the top two values
.93d0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.93d3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.93d6	29 10		and #$10			and 	#NSBIsString
.93d8	d0 01		bne $93db			bne 	_FDType
.93da	60		rts				rts
.93db					_FDType:
.93db	4c 38 95	jmp $9538			jmp 	TypeError
.93de					NSNormalise:
.93de	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.93e1	29 80		and #$80			and 	#$80
.93e3	09 08		ora #$08			ora 	#NSTFloat
.93e5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93e8	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; if zero exit
.93eb	d0 09		bne $93f6			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.93ed	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.93f0	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.93f3	a9 00		lda #$00			lda 	#0 							; set Z flag
.93f5	60		rts				rts
.93f6					_NSNormaliseOptimise:
.93f6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.93f9	d0 22		bne $941d			bne 	_NSNormaliseLoop
.93fb	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.93fe	30 1d		bmi $941d			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9400	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9403	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9406	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9409	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.940c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.940f	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9412	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9415	38		sec				sec
.9416	e9 08		sbc #$08			sbc 	#8
.9418	9d 28 06	sta $0628,x			sta 	NSExponent,x
.941b	80 d9		bra $93f6			bra 	_NSNormaliseOptimise
.941d					_NSNormaliseLoop:
.941d	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9420	70 08		bvs $942a			bvs 	_NSNExit 					; exit if so with Z flag clear
.9422	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; shift mantissa left
.9425	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9428	80 f3		bra $941d			bra 	_NSNormaliseLoop
.942a					_NSNExit:
.942a	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.942c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.860c					DereferenceTopTwo:
.860c	e8		inx				inx
.860d	20 11 86	jsr $8611			jsr 	Dereference 				; deref x+1
.8610	ca		dex				dex  								; falls through to deref x
.8611					Dereference:
.8611	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8614	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8616	f0 57		beq $866f			beq 	_DRFExit 					; not a reference
.8618	5a		phy				phy
.8619	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.861c	85 36		sta $36				sta 	zTemp0
.861e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8621	85 37		sta $37				sta 	zTemp0+1
.8623	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8626	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8628	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.862b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.862e	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8630	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8632	f0 0f		beq $8643			beq 	_DRFDereferenceTwo
.8634	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8636	f0 39		beq $8671			beq 	_DRFFull
.8638	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.863b	29 03		and #$03			and 	#3
.863d	f0 32		beq $8671			beq 	_DRFFull 					; the whole word
.863f	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8641	f0 07		beq $864a			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8643					_DRFDereferenceTwo:
.8643	a0 01		ldy #$01			ldy 	#1
.8645	b1 36		lda ($36),y			lda 	(zTemp0),y
.8647	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.864a					_DRFClear23:
.864a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.864d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8650	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8653	29 18		and #$18			and 	#NSBTypeMask
.8655	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8658	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.865a	d0 12		bne $866e			bne 	_DRFNotString
.865c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.865f	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8662	d0 0a		bne $866e			bne 	_DRFNotString
.8664	a9 70		lda #$70			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8666	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8669	a9 86		lda #$86			lda 	#_DRFNullString >> 8
.866b	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.866e					_DRFNotString
.866e	7a		ply				ply 								; restore Y and exit
.866f					_DRFExit:
.866f	60		rts				rts
.8670					_DRFNullString:
>8670	00						.byte 	0
.8671					_DRFFull:
.8671	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8673	b1 36		lda ($36),y			lda 	(zTemp0),y
.8675	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8678	c8		iny				iny
.8679	b1 36		lda ($36),y			lda 	(zTemp0),y
.867b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.867e	c8		iny				iny
.867f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8681	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8684	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8687	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.868a	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.868c	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.868f	f0 06		beq $8697			beq 	_DRFNoExponent
.8691	c8		iny				iny 								; if not, read the exponent as well.
.8692	b1 36		lda ($36),y			lda 	(zTemp0),y
.8694	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8697					_DRFNoExponent:
.8697	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.869a	10 0d		bpl $86a9			bpl 	_DRFExit2 					; if not, then exit.
.869c	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.869e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86a1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.86a4	09 80		ora #$80			ora 	#NSBIsNegative
.86a6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86a9					_DRFExit2:
.86a9	7a		ply				ply
.86aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.86ab					EncodeNumberStart:
.86ab	38		sec				sec
.86ac	80 01		bra $86af			bra 	EncodeNumberContinue+1
.86ae					EncodeNumberContinue:
.86ae	18		clc				clc
.86af					EncodeNumber:
.86af	08		php				php 								; save reset.
.86b0	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.86b2	f0 12		beq $86c6			beq 	_ENIsOkay
.86b4	c9 30		cmp #$30			cmp 	#"0"
.86b6	90 04		bcc $86bc			bcc 	_ENBadNumber
.86b8	c9 3a		cmp #$3a			cmp 	#"9"+1
.86ba	90 0a		bcc $86c6			bcc 	_ENIsOkay
.86bc					_ENBadNumber:
.86bc	28		plp				plp 								; throw saved reset
.86bd	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.86c0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.86c2	f0 7e		beq $8742			beq 	_ENConstructFinal
.86c4					_ENFail:
.86c4	18		clc				clc 								; not allowed
.86c5	60		rts				rts
.86c6					_ENIsOkay:
.86c6	28		plp				plp 								; are we restarting
.86c7	90 15		bcc $86de			bcc 	_ENNoRestart
.86c9					_ENStartEncode:
.86c9	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.86cb	f0 0c		beq $86d9			beq 	_ENFirstDP
.86cd	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.86cf	20 7c 8b	jsr $8b7c			jsr 	NSMSetByte
.86d2	a9 01		lda #$01			lda 	#ESTA_Low
.86d4					_ENExitChange:
.86d4	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.86d7	38		sec				sec
.86d8	60		rts				rts
.86d9					_ENFirstDP:
.86d9	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero 					; clear integer part
.86dc	80 3f		bra $871d			bra 	_ESTASwitchFloat			; go straight to float and exi
.86de					_ENNoRestart:
.86de	48		pha				pha 								; save on stack.
.86df	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.86e2	c9 01		cmp #$01			cmp 	#ESTA_Low
.86e4	f0 09		beq $86ef			beq  	_ESTALowState
.86e6	c9 02		cmp #$02			cmp 	#ESTA_High
.86e8	f0 29		beq $8713			beq 	_ESTAHighState
.86ea	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.86ec	f0 3b		beq $8729			beq 	_ESTADecimalState
>86ee	db						.byte 	$DB 						; causes a break in the emulator
.86ef					_ESTALowState:
.86ef	68		pla				pla 								; get value back
.86f0	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.86f2	f0 29		beq $871d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.86f4	29 0f		and #$0f			and 	#15 						; make digit
.86f6	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.86f9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.86fc	0a		asl a				asl 	a
.86fd	0a		asl a				asl 	a
.86fe	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8701	0a		asl a				asl 	a
.8702	6d 06 07	adc $0706			adc 	DigitTemp
.8705	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8708	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.870a	90 05		bcc $8711			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.870c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.870e	8d 05 07	sta $0705			sta 	EncodeState
.8711					_ESTANoSwitch:
.8711	38		sec				sec
.8712	60		rts				rts
.8713					_ESTAHighState:
.8713	68		pla				pla 								; get value back
.8714	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8716	f0 05		beq $871d			beq 	_ESTASwitchFloat
.8718	20 7c 87	jsr $877c			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.871b	38		sec				sec
.871c	60		rts				rts
.871d					_ESTASwitchFloat:
.871d	9c 07 07	stz $0707			stz 	DecimalCount
.8720	e8		inx				inx 								; zero the decimal additive.
.8721	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero
.8724	ca		dex				dex
.8725	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8727	80 ab		bra $86d4			bra 	_ENExitChange
.8729					_ESTADecimalState:
.8729	68		pla				pla 								; digit.
.872a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.872c	f0 96		beq $86c4			beq 	_ENFail
.872e	e8		inx				inx 								; put digit into fractional part of X+1
.872f	20 7c 87	jsr $877c			jsr 	ESTAShiftDigitIntoMantissa
.8732	ca		dex				dex
.8733	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8736	ad 07 07	lda $0707			lda 	DecimalCount
.8739	c9 0b		cmp #$0b			cmp 	#11
.873b	f0 02		beq $873f			beq 	_ESTADSFail
.873d	38		sec				sec
.873e	60		rts				rts
.873f					_ESTADSFail:
.873f	4c 33 95	jmp $9533			jmp 	RangeError
.8742					_ENConstructFinal:
.8742	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8745	f0 33		beq $877a			beq 	_ENCFExit 					; no decimals
.8747	5a		phy				phy
.8748	0a		asl a				asl 	a 							; x 4 and CLC
.8749	0a		asl a				asl 	a
.874a	6d 07 07	adc $0707			adc 	DecimalCount
.874d	a8		tay				tay
.874e	b9 f2 94	lda $94f2,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8751	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8754	b9 f3 94	lda $94f3,y			lda 	DecimalScalarTable-5+1,y
.8757	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.875a	b9 f4 94	lda $94f4,y			lda 	DecimalScalarTable-5+2,y
.875d	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8760	b9 f5 94	lda $94f5,y			lda 	DecimalScalarTable-5+3,y
.8763	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8766	b9 f6 94	lda $94f6,y			lda 	DecimalScalarTable-5+4,y
.8769	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.876c	a9 08		lda #$08			lda 	#NSTFloat
.876e	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8771	7a		ply				ply
.8772	e8		inx				inx 								; multiply decimal const by decimal scalar
.8773	20 a7 93	jsr $93a7			jsr 	FloatMultiply
.8776	ca		dex				dex
.8777	20 3c 92	jsr $923c			jsr 	FloatAdd 					; add to integer part.
.877a					_ENCFExit:
.877a	18		clc				clc 								; reject the digit.
.877b	60		rts				rts
.877c					ESTAShiftDigitIntoMantissa:
.877c	29 0f		and #$0f			and 	#15 						; save digit
.877e	48		pha				pha
.877f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8782	48		pha				pha
.8783	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8786	48		pha				pha
.8787	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.878a	48		pha				pha
.878b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.878e	48		pha				pha
.878f	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; x 2
.8792	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; x 4
.8795	18		clc				clc 								; pop mantissa and add
.8796	68		pla				pla
.8797	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.879a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.879d	68		pla				pla
.879e	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.87a1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87a4	68		pla				pla
.87a5	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.87a8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87ab	68		pla				pla
.87ac	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.87af	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.87b2	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; x 10
.87b5	68		pla				pla 								; add digit
.87b6	18		clc				clc
.87b7	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.87ba	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87bd	90 0d		bcc $87cc			bcc 	_ESTASDExit
.87bf	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.87c2	d0 08		bne $87cc			bne 	_ESTASDExit
.87c4	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.87c7	d0 03		bne $87cc			bne 	_ESTASDExit
.87c9	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.87cc					_ESTASDExit:
.87cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.87cd					EvaluateTerm:
.87cd	b1 30		lda ($30),y			lda 	(codePtr),y
.87cf	30 18		bmi $87e9			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.87d1	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.87d3	b0 6f		bcs $8844			bcs 	_ETVariable
.87d5	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.87d7	90 6f		bcc $8848			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.87d9	c9 3a		cmp #$3a			cmp 	#'9'+1
.87db	b0 6b		bcs $8848			bcs 	_ETPuncUnary
.87dd	20 ab 86	jsr $86ab			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.87e0					_ETNumber:
.87e0	c8		iny				iny 								; keep encoding until we have the numbers
.87e1	b1 30		lda ($30),y			lda 	(codePtr),y
.87e3	20 ae 86	jsr $86ae			jsr 	EncodeNumberContinue
.87e6	b0 f8		bcs $87e0			bcs 	_ETNumber 					; go back if accepted.
.87e8	60		rts				rts
.87e9					_ETCheckUnary:
.87e9	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.87eb	f0 41		beq $882e			beq 	_ETString
.87ed	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.87ef	f0 12		beq $8803			beq 	_ETHexConstant
.87f1	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.87f3	90 0b		bcc $8800			bcc 	_ETSyntaxError
.87f5	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.87f7	b0 07		bcs $8800			bcs 	_ETSyntaxError
.87f9	da		phx				phx 								; push X on the stack
.87fa	0a		asl a				asl 	a 							; put vector x 2 into X
.87fb	aa		tax				tax
.87fc	c8		iny				iny 								; consume unary function token
.87fd	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8800					_ETSyntaxError:
.8800	4c 2e 95	jmp $952e			jmp 	SyntaxError
.8803					_ETHexConstant:
.8803	c8		iny				iny 								; skip #
.8804	c8		iny				iny 								; skip count
.8805	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero 					; clear result
.8808					_ETHLoop:
.8808	b1 30		lda ($30),y			lda 	(codePtr),y
.880a	c8		iny				iny 								; and consume
.880b	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.880d	f0 1e		beq $882d			beq 	_ETHExit
.880f	48		pha				pha 								; save on stack.
.8810	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; x 2
.8813	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; x 4
.8816	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; x 8
.8819	20 8f 8b	jsr $8b8f			jsr 	NSMShiftLeft 				; x 16
.881c	68		pla				pla 								; ASCII
.881d	c9 41		cmp #$41			cmp 	#'A'
.881f	90 02		bcc $8823			bcc 	_ETHNotChar
.8821	e9 07		sbc #$07			sbc 	#7
.8823					_ETHNotChar:
.8823	29 0f		and #$0f			and 	#15 						; digit now
.8825	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8828	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.882b	80 db		bra $8808			bra 	_ETHLoop 					; go round.
.882d					_ETHExit:
.882d	60		rts				rts
.882e					_ETString:
.882e	c8		iny				iny 								; look at length
.882f	b1 30		lda ($30),y			lda 	(codePtr),y
.8831	48		pha				pha
.8832	c8		iny				iny 								; first character
.8833	20 60 90	jsr $9060			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8836	68		pla				pla 								; restore count and save
.8837	85 36		sta $36				sta 	zTemp0
.8839	98		tya				tya 								; add length to Y to skip it.
.883a	18		clc				clc
.883b	65 36		adc $36				adc 	zTemp0
.883d	a8		tay				tay
.883e	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8840	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8843	60		rts				rts
.8844					_ETVariable:
>8844	db						.byte 	$DB 						; causes a break in the emulator
.8845	4c ff ff	jmp $ffff			jmp 	$FFFF
.8848					_ETPuncUnary:
.8848	c8		iny				iny 								; consume the unary character
.8849	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.884b	f0 31		beq $887e			beq 	_ETUnaryNegate
.884d	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.884f	f0 3d		beq $888e			beq 	_ETDereference
.8851	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8853	f0 58		beq $88ad			beq 	_ETParenthesis
.8855	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.8857	f0 43		beq $889c			beq 	_ETStringReference
.8859	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.885b	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.885d	f0 06		beq $8865			beq 	_ETIndirection
.885f	e6 36		inc $36				inc 	zTemp0
.8861	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8863	d0 9b		bne $8800			bne 	_ETSyntaxError
.8865					_ETIndirection:
.8865	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8867	1a		inc a				inc 	a
.8868	48		pha				pha
.8869	20 cd 87	jsr $87cd			jsr 	EvaluateTerm				; evaluate the term
.886c	20 11 86	jsr $8611			jsr 	Dereference 				; dereference it.
.886f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8872	d0 07		bne $887b			bne 	_ETTypeMismatch
.8874	68		pla				pla 								; indirection 1-2
.8875	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8877	9d 00 06	sta $0600,x			sta 	NSStatus,x
.887a	60		rts				rts
.887b					_ETTypeMismatch:
.887b	4c 38 95	jmp $9538			jmp 	TypeError
.887e					_ETUnaryNegate:
.887e	20 cd 87	jsr $87cd			jsr 	EvaluateTerm				; evaluate the term
.8881	20 11 86	jsr $8611			jsr 	Dereference 				; dereference it.
.8884	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8887	29 10		and #$10			and 	#NSTString
.8889	d0 f0		bne $887b			bne 	_ETTypeMismatch
.888b	4c 26 8b	jmp $8b26			jmp 	NSMNegate  					; just toggles the sign bit.
.888e					_ETDereference:
.888e	20 cd 87	jsr $87cd			jsr 	EvaluateTerm				; evaluate the term
.8891	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8894	29 20		and #$20			and 	#NSBIsReference
.8896	f0 e3		beq $887b			beq 	_ETTypeMismatch
.8898	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.889b	60		rts				rts
.889c					_ETStringReference:
.889c	20 cd 87	jsr $87cd			jsr 	EvaluateTerm				; evaluate the term
.889f	20 11 86	jsr $8611			jsr 	Dereference 				; dereference it.
.88a2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.88a5	d0 d4		bne $887b			bne 	_ETTypeMismatch
.88a7	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.88a9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88ac	60		rts				rts
.88ad					_ETParenthesis:
.88ad	20 cf 85	jsr $85cf			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.88b0	20 77 90	jsr $9077			jsr 	CheckRightBracket 			; check for )
.88b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.942d					AbsUnary:
.942d	fa		plx				plx 								; restore stack pos
.942e	20 ce 8a	jsr $8ace			jsr 	EvaluateNumber 				; get a float or int
.9431	20 77 90	jsr $9077			jsr 	CheckRightBracket
.9434	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9437	29 7f		and #$7f			and 	#$7F
.9439	9d 00 06	sta $0600,x			sta 	NSStatus,x
.943c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.88b4					AllocUnary:
.88b4	fa		plx				plx 								; restore stack pos
.88b5	20 06 8b	jsr $8b06			jsr 	Evaluate16BitInteger		; get bytes required.
.88b8	20 77 90	jsr $9077			jsr 	CheckRightBracket
.88bb	da		phx				phx 								; save X/Y
.88bc	5a		phy				phy
.88bd	8a		txa				txa 								; copy X into Y
.88be	a8		tay				tay
.88bf	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.88c2	aa		tax				tax
.88c3	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.88c6	20 d3 88	jsr $88d3			jsr 	AllocateXABytes 			; allocate memory
.88c9	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.88cc	8a		txa				txa
.88cd	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.88d0	7a		ply				ply
.88d1	fa		plx				plx
.88d2	60		rts				rts
.88d3					AllocateXABytes:
.88d3	5a		phy				phy
.88d4	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.88d7	5a		phy				phy
.88d8	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.88db	5a		phy				phy
.88dc	18		clc				clc
.88dd	6d 0c 07	adc $070c			adc 	lowMemPtr
.88e0	8d 0c 07	sta $070c			sta 	lowMemPtr
.88e3	8a		txa				txa
.88e4	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.88e7	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.88ea	fa		plx				plx
.88eb	68		pla				pla
.88ec	7a		ply				ply
.88ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.943d					AscUnary:
.943d	fa		plx				plx 								; restore stack pos
.943e	20 d9 8a	jsr $8ad9			jsr 	EvaluateString 				; get a string
.9441	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9443	20 7c 8b	jsr $8b7c			jsr 	NSMSetByte
.9446	20 77 90	jsr $9077			jsr 	CheckRightBracket
.9449	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.944a					FracUnary:
.944a	fa		plx				plx 								; restore stack pos
.944b	20 ce 8a	jsr $8ace			jsr 	EvaluateNumber 				; get a float or int
.944e	20 77 90	jsr $9077			jsr 	CheckRightBracket
.9451	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9454	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9456	f0 04		beq $945c			beq 	_IUZero
.9458	20 1a 93	jsr $931a			jsr 	FloatFractionalPart
.945b	60		rts				rts
.945c					_IUZero:
.945c	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero
.945f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9460					IntUnary:
.9460	fa		plx				plx 								; restore stack pos
.9461	20 ce 8a	jsr $8ace			jsr 	EvaluateNumber 				; get a float or int
.9464	20 77 90	jsr $9077			jsr 	CheckRightBracket
.9467	bd 00 06	lda $0600,x			lda 	NSStatus,x
.946a	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.946c	f0 03		beq $9471			beq 	_IUExit
.946e	20 7d 93	jsr $937d			jsr 	FloatIntegerPart
.9471					_IUExit:
.9471	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9472					LenUnary:
.9472	fa		plx				plx 								; restore stack pos
.9473	20 d9 8a	jsr $8ad9			jsr 	EvaluateString 				; get a string
.9476	5a		phy				phy
.9477	a0 00		ldy #$00			ldy 	#0 							; find length
.9479					_LenFind:
.9479	b1 36		lda ($36),y			lda 	(zTemp0),y
.947b	f0 06		beq $9483			beq 	_LenExit
.947d	c8		iny				iny
.947e	d0 f9		bne $9479			bne 	_LenFind
.9480	4c 33 95	jmp $9533			jmp 	RangeError 					; string > 255
.9483					_LenExit:
.9483	98		tya				tya
.9484	20 7c 8b	jsr $8b7c			jsr 	NSMSetByte
.9487	7a		ply				ply
.9488	20 77 90	jsr $9077			jsr 	CheckRightBracket
.948b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.88ee					Unary_Not:
.88ee	fa		plx				plx
.88ef	20 f1 8a	jsr $8af1			jsr 	EvaluateInteger 			; get integer
.88f2	20 77 90	jsr $9077			jsr 	CheckRightBracket
.88f5	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; zero mantissa ?
.88f8	f0 04		beq $88fe			beq 	_NotZero
.88fa	20 7a 8b	jsr $8b7a			jsr 	NSMSetZero
.88fd	60		rts				rts
.88fe					_NotZero:
.88fe	4c 85 82	jmp $8285			jmp 	ReturnTrue
.8901					_UNBad:
.8901	4c 3d 95	jmp $953d			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8904					Unary_Rnd:
.8904	20 ce 8a	jsr $8ace			jsr 	EvaluateNumber 				; number to use.
.8907	20 77 90	jsr $9077			jsr 	CheckRightBracket 			; closing bracket
.890a	20 33 89	jsr $8933			jsr 	Random32Bit 				; generate a number.
.890d	ad 08 07	lda $0708			lda 	RandomSeed+0
.8910	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8913	ad 09 07	lda $0709			lda 	RandomSeed+1
.8916	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8919	ad 0a 07	lda $070a			lda 	RandomSeed+2
.891c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.891f	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8922	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8924	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8927	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8929	8d 28 06	sta $0628			sta 	NSExponent
.892c	a9 08		lda #$08			lda 	#NSTFloat
.892e	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8931	db						.byte 	$DB 						; causes a break in the emulator
.8932	60		rts				rts
.8933					Random32Bit:
.8933	5a		phy				phy
.8934	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8936	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8939	d0 03		bne $893e			bne 	_Random1
.893b	a8		tay				tay 								; if so do it 256 times
.893c	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.893e					_Random1:
.893e	0a		asl a				asl 	a 							; LSFR RNG
.893f	2e 09 07	rol $0709			rol 	RandomSeed+1
.8942	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8945	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8948	90 02		bcc $894c			bcc 	_Random2
.894a	49 c5		eor #$c5			eor 	#$C5
.894c					_Random2:
.894c	88		dey				dey
.894d	d0 ef		bne $893e			bne 	_Random1
.894f	7a		ply				ply
.8950	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.948c					SgnUnary:
.948c	fa		plx				plx 								; restore stack pos
.948d	20 ce 8a	jsr $8ace			jsr 	EvaluateNumber 				; get a float or int
.9490	20 77 90	jsr $9077			jsr 	CheckRightBracket
.9493	20 aa 8b	jsr $8baa			jsr 	NSMIsZero 					; if zero
.9496	f0 10		beq $94a8			beq 	_SGZero  					; return Int Zero
.9498	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.949b	48		pha				pha
.949c	a9 01		lda #$01			lda 	#1 							; set to 1
.949e	20 7c 8b	jsr $8b7c			jsr 	NSMSetByte
.94a1	68		pla				pla
.94a2	29 80		and #$80			and		#$80 						; copy the sign byte out
.94a4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94a7	60		rts				rts
.94a8	20 7a 8b	jsr $8b7a	_SGZero:jsr 	NSMSetZero
.94ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.94ac					ValUnary:
.94ac	fa		plx				plx 								; restore stack pos
.94ad	20 c2 94	jsr $94c2			jsr 	ValMainCode 				; do the main val() code
.94b0	b0 01		bcs $94b3			bcs 	_VUError 					; couldn't convert
.94b2	60		rts				rts
.94b3					_VUError:
.94b3	4c 38 95	jmp $9538			jmp 	TypeError
.94b6					IsValUnary:
.94b6	fa		plx				plx 								; restore stack pos
.94b7	20 c2 94	jsr $94c2			jsr 	ValMainCode 				; do the main val() code
.94ba	b0 03		bcs $94bf			bcs 	_VUBad
.94bc	4c 85 82	jmp $8285			jmp 	ReturnTrue
.94bf					_VUBad:
.94bf	4c 91 82	jmp $8291			jmp 	ReturnFalse
.94c2					ValMainCode:
.94c2	20 d9 8a	jsr $8ad9			jsr 	EvaluateString 				; get a string
.94c5	20 77 90	jsr $9077			jsr 	CheckRightBracket 			; check right bracket present
.94c8	5a		phy				phy
.94c9	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.94cb	f0 17		beq $94e4			beq 	_VMCFail2
.94cd	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.94cf	48		pha				pha 								; save first character
.94d0	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.94d2	d0 01		bne $94d5			bne 	_VMCStart
.94d4	c8		iny				iny 								; skip over -
.94d5					_VMCStart:
.94d5	38		sec				sec 								; initialise first time round.
.94d6					_VMCNext:
.94d6	c8		iny				iny 								; pre-increment
.94d7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.94d9	f0 0c		beq $94e7			beq 	_VMCSuccess 				; successful.
.94db	20 af 86	jsr $86af			jsr 	EncodeNumber 				; send it to the number-builder
.94de	90 03		bcc $94e3			bcc 	_VMCFail 					; if failed, give up.
.94e0	18		clc				clc 								; next time round, countinue
.94e1	80 f3		bra $94d6			bra 	_VMCNext
.94e3					_VMCFail:
.94e3	68		pla				pla
.94e4					_VMCFail2:
.94e4	7a		ply				ply
.94e5	38		sec				sec
.94e6	60		rts				rts
.94e7					_VMCSuccess:
.94e7	a9 00		lda #$00			lda 	#0 							; construct final
.94e9	20 af 86	jsr $86af			jsr 	EncodeNumber
.94ec	68		pla				pla
.94ed	c9 2d		cmp #$2d			cmp 	#"-"
.94ef	d0 03		bne $94f4			bne 	_VMCNotNegative
.94f1	20 26 8b	jsr $8b26			jsr		NSMNegate
.94f4					_VMCNotNegative:
.94f4	7a		ply				ply
.94f5	18		clc				clc
.94f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8951					ChrUnary:
.8951	fa		plx				plx 								; restore stack pos
.8952	20 12 8b	jsr $8b12			jsr 	Evaluate8BitInteger			; get value
.8955	48		pha				pha
.8956	20 77 90	jsr $9077			jsr 	CheckRightBracket
.8959	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.895b	20 03 96	jsr $9603			jsr 	StringTempAllocate
.895e	68		pla				pla 								; write number to it
.895f	20 41 96	jsr $9641			jsr 	StringTempWrite
.8962	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8963					SpcUnary:
.8963	fa		plx				plx 								; restore stack pos
.8964	20 12 8b	jsr $8b12			jsr 	Evaluate8BitInteger			; get value
.8967	5a		phy				phy
.8968	48		pha				pha 								; save count
.8969	20 03 96	jsr $9603			jsr 	StringTempAllocate
.896c	7a		ply				ply 								; to do count in Y
.896d					_SpcLoop:
.896d	c0 00		cpy #$00			cpy 	#0
.896f	f0 08		beq $8979			beq 	_SpcExit
.8971	a9 20		lda #$20			lda 	#32
.8973	20 41 96	jsr $9641			jsr 	StringTempWrite
.8976	88		dey				dey
.8977	80 f4		bra $896d			bra 	_SPCLoop
.8979					_SpcExit:
.8979	7a		ply				ply
.897a	20 77 90	jsr $9077			jsr 	CheckRightBracket
.897d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.897e					Unary_Str:
.897e	fa		plx				plx
.897f	20 ce 8a	jsr $8ace			jsr 	EvaluateNumber  			; get number
.8982	20 77 90	jsr $9077			jsr 	CheckRightBracket 			; closing bracket
.8985	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8987	20 a0 89	jsr $89a0			jsr 	ConvertNumberToString 		; do the conversion.
.898a	a9 21		lda #$21			lda		#33 						; create buffer
.898c	20 03 96	jsr $9603			jsr 	StringTempAllocate 			; allocate memory
.898f	da		phx				phx
.8990	a2 00		ldx #$00			ldx 	#0
.8992					_USCopy:
.8992	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8995	20 41 96	jsr $9641			jsr 	StringTempWrite
.8998	e8		inx				inx
.8999	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.899c	d0 f4		bne $8992			bne 	_USCopy
.899e	fa		plx				plx
.899f	60		rts				rts
.89a0					ConvertNumberToString:
.89a0	5a		phy				phy 								; save code position
.89a1	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.89a4	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.89a7	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.89aa	10 0a		bpl $89b6			bpl 	_CNTSNotNegative
.89ac	29 7f		and #$7f			and 	#$7F 						; make +ve
.89ae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89b1	a9 2d		lda #$2d			lda 	#"-"
.89b3	20 17 8a	jsr $8a17			jsr 	WriteDecimalBuffer
.89b6					_CNTSNotNegative:
.89b6	e8		inx				inx 								; round up
.89b7	a9 01		lda #$01			lda 	#1
.89b9	20 7c 8b	jsr $8b7c			jsr 	NSMSetByte
.89bc	ca		dex				dex
.89bd	bd 28 06	lda $0628,x			lda		NSExponent,x
.89c0	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.89c3	a9 08		lda #$08			lda 	#NSTFloat
.89c5	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.89c8	20 3c 92	jsr $923c			jsr 	FloatAdd
.89cb	20 f9 89	jsr $89f9			jsr 	MakePlusTwoString
.89ce	20 1a 93	jsr $931a			jsr 	FloatFractionalPart 		; get the fractional part
.89d1	20 de 93	jsr $93de			jsr 	NSNormalise					; normalise , exit if zero
.89d4	f0 21		beq $89f7			beq 	_CNTSExit
.89d6	a9 2e		lda #$2e			lda 	#"."
.89d8	20 17 8a	jsr $8a17			jsr 	WriteDecimalBuffer 			; write decimal place
.89db					_CNTSDecimal:
.89db	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.89de	30 17		bmi $89f7			bmi 	_CNTSExit
.89e0	e8		inx				inx 								; x 10.0
.89e1	a9 0a		lda #$0a			lda 	#10
.89e3	20 7c 8b	jsr $8b7c			jsr 	NSMSetByte
.89e6	a9 08		lda #$08			lda 	#NSTFloat
.89e8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89eb	ca		dex				dex
.89ec	20 a7 93	jsr $93a7			jsr 	FloatMultiply
.89ef	20 f9 89	jsr $89f9			jsr 	MakePlusTwoString
.89f2	20 1a 93	jsr $931a			jsr 	FloatFractionalPart 		; get the fractional part
.89f5	80 e4		bra $89db			bra 	_CNTSDecimal 				; keep going.
.89f7					_CNTSExit:
.89f7	7a		ply				ply
.89f8	60		rts				rts
.89f9					MakePlusTwoString:
.89f9	da		phx				phx
.89fa	20 51 8b	jsr $8b51			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.89fd	e8		inx				inx 								; access it
.89fe	e8		inx				inx
.89ff	20 7d 93	jsr $937d			jsr 	FloatIntegerPart 			; make it an integer
.8a02	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8a04	20 e6 91	jsr $91e6			jsr 	ConvertInt32
.8a07	a2 00		ldx #$00			ldx	 	#0
.8a09					_MPTSCopy:
.8a09	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8a0c	20 17 8a	jsr $8a17			jsr 	WriteDecimalBuffer
.8a0f	e8		inx				inx
.8a10	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8a13	d0 f4		bne $8a09			bne 	_MPTSCopy
.8a15	fa		plx				plx
.8a16	60		rts				rts
.8a17					WriteDecimalBuffer:
.8a17	da		phx				phx
.8a18	ae 14 07	ldx $0714			ldx 	dbOffset
.8a1b	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8a1e	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8a21	ee 14 07	inc $0714			inc 	dbOffset
.8a24	fa		plx				plx
.8a25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8a26					Unary_Left:
.8a26	fa		plx				plx
.8a27	18		clc				clc 								; only one parameter
.8a28	20 9d 8a	jsr $8a9d			jsr 	SubstringInitial 			; set up.
.8a2b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8a2e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a31	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8a34	80 2c		bra $8a62			bra 	SubstringMain
.8a36					Unary_Right:
.8a36	fa		plx				plx
.8a37	18		clc				clc 								; only one parameter
.8a38	20 9d 8a	jsr $8a9d			jsr 	SubstringInitial 			; set up.
.8a3b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8a3e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a41	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8a44	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8a47	b0 02		bcs $8a4b			bcs 	_URNotUnderflow
.8a49	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8a4b					_URNotUnderFlow:
.8a4b	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8a4e	80 12		bra $8a62			bra 	SubStringMain
.8a50					Unary_Mid:
.8a50	fa		plx				plx
.8a51	38		sec				sec 								; two parameters
.8a52	20 9d 8a	jsr $8a9d			jsr 	SubstringInitial 			; set up.
.8a55	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8a58	f0 05		beq $8a5f			beq 	_UMError
.8a5a	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8a5d	80 03		bra $8a62			bra 	SubStringMain
.8a5f					_UMError:
.8a5f	4c 3d 95	jmp $953d			jmp 	ArgumentError
.8a62					SubStringMain:
.8a62	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8a65	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8a68	b0 2d		bcs $8a97			bcs 	_SSMNull 					; if so, return an empty string.
.8a6a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8a6d	f0 28		beq $8a97			beq 	_SSMNull 					; return empty string.
.8a6f	18		clc				clc 								; add the offset +1 to the address and
.8a70	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8a73	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8a76	85 36		sta $36				sta 	zTemp0
.8a78	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8a7b	69 00		adc #$00			adc 	#0
.8a7d	85 37		sta $37				sta 	zTemp0+1
.8a7f					_SSMNoCarry:
.8a7f	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8a82	20 03 96	jsr $9603			jsr 	StringTempAllocate 			; allocate that many characters
.8a85	5a		phy				phy 								; save Y
.8a86	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8a88					_SSMCopy:
.8a88	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8a8a	f0 09		beq $8a95			beq 	_SSMEString 				; no more to copy
.8a8c	20 41 96	jsr $9641			jsr 	StringTempWrite 			; and write it out.
.8a8f	c8		iny				iny
.8a90	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8a93	d0 f3		bne $8a88			bne 	_SSMCopy
.8a95					_SSMEString:
.8a95	7a		ply				ply
.8a96					_SSMExit:
.8a96	60		rts				rts
.8a97					_SSMNull:
.8a97	a9 00		lda #$00			lda 	#0
.8a99	20 03 96	jsr $9603			jsr 	StringTempAllocate
.8a9c	60		rts				rts
.8a9d					SubstringInitial:
.8a9d	da		phx				phx 								; save initial stack position
.8a9e	08		php				php 								; save carry on stack indicating 2 parameters
.8a9f	20 d9 8a	jsr $8ad9			jsr 	EvaluateString 				; get a string
.8aa2	5a		phy				phy 								; calculate length to exponent.
.8aa3	a0 ff		ldy #$ff			ldy 	#$FF
.8aa5					_SIFindLength:
.8aa5	c8		iny				iny
.8aa6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa8	d0 fb		bne $8aa5			bne 	_SIFindLength
.8aaa	98		tya				tya
.8aab	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8aae	7a		ply				ply
.8aaf	e8		inx				inx
.8ab0	20 7f 90	jsr $907f			jsr 	CheckComma 					; comma next
.8ab3	20 12 8b	jsr $8b12			jsr 	Evaluate8BitInteger 		; get next parameter
.8ab6	28		plp				plp 								; is it the last parameter ?
.8ab7	90 07		bcc $8ac0			bcc 	_SSIExit 					; if so, exit.
.8ab9	e8		inx				inx
.8aba	20 7f 90	jsr $907f			jsr 	CheckComma 					; comma next
.8abd	20 12 8b	jsr $8b12			jsr 	Evaluate8BitInteger 		; get last parameter
.8ac0					_SSIExit:
.8ac0	fa		plx				plx
.8ac1	20 77 90	jsr $9077			jsr 	CheckRightBracket 			; check closing bracket
.8ac4	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8ac5					EvaluateValue:
.8ac5	48		pha				pha
.8ac6	20 cf 85	jsr $85cf			jsr		EvaluateExpression 			; expression
.8ac9	20 11 86	jsr $8611			jsr 	Dereference					; derefernce it
.8acc	68		pla				pla
.8acd	60		rts				rts
.8ace					EvaluateNumber:
.8ace	20 c5 8a	jsr $8ac5			jsr 	EvaluateValue 				; get a value
.8ad1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ad4	29 10		and #$10			and 	#NSBIsString
.8ad6	d0 16		bne $8aee			bne 	HelperTypeError
.8ad8	60		rts				rts
.8ad9					EvaluateString:
.8ad9	20 c5 8a	jsr $8ac5			jsr 	EvaluateValue 				; get a value
.8adc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8adf	29 10		and #$10			and 	#NSBIsString
.8ae1	f0 0b		beq $8aee			beq 	HelperTypeError
.8ae3					CopyAddressToTemp0:
.8ae3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8ae6	85 36		sta $36				sta 	zTemp0
.8ae8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8aeb	85 37		sta $37				sta 	zTemp0+1
.8aed	60		rts				rts
.8aee					HelperTypeError:
.8aee	4c 38 95	jmp $9538			jmp 	TypeError
.8af1					EvaluateInteger:
.8af1	20 ce 8a	jsr $8ace			jsr 	EvaluateNumber
.8af4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8af7	d0 0a		bne $8b03			bne 	HelperValueError 			; if not, it's a float.
.8af9	60		rts				rts
.8afa					EvaluateUnsignedInteger:
.8afa	20 f1 8a	jsr $8af1			jsr 	EvaluateInteger 			; check integer is +ve
.8afd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b00	30 01		bmi $8b03			bmi 	HelperValueError
.8b02	60		rts				rts
.8b03					HelperValueError:
.8b03	4c 3d 95	jmp $953d			jmp 	ArgumentError
.8b06					Evaluate16BitInteger:
.8b06	20 fa 8a	jsr $8afa			jsr	 	EvaluateUnsignedInteger		; get integer
.8b09	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8b0c	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8b0f	d0 f2		bne $8b03			bne 	HelperValueError
.8b11	60		rts				rts
.8b12					Evaluate8BitInteger:
.8b12	20 fa 8a	jsr $8afa			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8b15	d0 ec		bne $8b03			bne 	HelperValueError
.8b17	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8b1a	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8b1d	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8b20	d0 e1		bne $8b03			bne 	HelperValueError
.8b22	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8b26					NSMNegate:
.8b26	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b29	49 80		eor #$80			eor 	#NSBIsNegative
.8b2b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b2e	60		rts				rts
.8b2f					NSMNegateMantissa:
.8b2f	38		sec				sec
.8b30	a9 00		lda #$00			lda 	#0
.8b32	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8b35	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b38	a9 00		lda #$00			lda 	#0
.8b3a	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8b3d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b40	a9 00		lda #$00			lda 	#0
.8b42	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8b45	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b48	a9 00		lda #$00			lda 	#0
.8b4a	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8b4d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b50	60		rts				rts
.8b51					NSMShiftUpTwo:
.8b51	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b54	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b57	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b5a	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8b5d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8b60	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8b63	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8b66	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8b69	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8b6c	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8b6f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b72	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8b75	60		rts				rts
.8b76					NSMSetZeroMantissaOnly:
.8b76	a9 00		lda #$00			lda 	#0
.8b78	80 08		bra $8b82			bra 	NSMSetMantissa
.8b7a					NSMSetZero:
.8b7a	a9 00		lda #$00			lda 	#0
.8b7c					NSMSetByte:
.8b7c	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8b7f	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8b82					NSMSetMantissa:
.8b82	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8b85	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8b88	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8b8b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8b8e	60		rts				rts
.8b8f					NSMShiftLeft:
.8b8f	18		clc				clc
.8b90					NSMRotateLeft:
.8b90	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8b93	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8b96	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8b99	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8b9c	60		rts				rts
.8b9d					NSMShiftRight:
.8b9d	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8ba0	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8ba3	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8ba6	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8ba9	60		rts				rts
.8baa					NSMIsZero:
.8baa	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8bad	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8bb0	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8bb3	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8bb6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.94f7					DecimalScalarTable:
>94f7	66 66 66 66				.dword $66666666 ; 0.1
>94fb	de					.byte $de
>94fc	1f 85 eb 51				.dword $51eb851f ; 0.01
>9500	db					.byte $db
>9501	4c 37 89 41				.dword $4189374c ; 0.001
>9505	d8					.byte $d8
>9506	ac 8b db 68				.dword $68db8bac ; 0.0001
>950a	d4					.byte $d4
>950b	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>950f	d1					.byte $d1
>9510	83 de 1b 43				.dword $431bde83 ; 1e-06
>9514	ce					.byte $ce
>9515	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9519	ca					.byte $ca
>951a	89 3b e6 55				.dword $55e63b89 ; 1e-08
>951e	c7					.byte $c7
>951f	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9523	c4					.byte $c4
>9524	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9528	c0					.byte $c0
>9529	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>952d	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.952e					SyntaxError:
.952e	a9 02		lda #$02		lda	#2
.9530	4c 1f 82	jmp $821f		jmp	ErrorHandler
.9533					RangeError:
.9533	a9 04		lda #$04		lda	#4
.9535	4c 1f 82	jmp $821f		jmp	ErrorHandler
.9538					TypeError:
.9538	a9 05		lda #$05		lda	#5
.953a	4c 1f 82	jmp $821f		jmp	ErrorHandler
.953d					ArgumentError:
.953d	a9 07		lda #$07		lda	#7
.953f	4c 1f 82	jmp $821f		jmp	ErrorHandler
.9542					NotDoneError:
.9542	a9 0c		lda #$0c		lda	#12
.9544	4c 1f 82	jmp $821f		jmp	ErrorHandler
.9547					ErrorText:
>9547	42 72 65 61 6b 00			.text	"Break",0
>954d	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9555	72 72 6f 72 00
>955a	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9562	20 62 79 20 7a 65 72 6f 00
>956b	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9573	61 6e 67 65 00
>9578	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9580	6d 61 74 63 68 00
>9586	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>958e	65 6d 6f 72 79 00
>9594	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>959c	61 72 67 75 6d 65 6e 74 00
>95a5	53 74 6f 70 00				.text	"Stop",0
>95aa	53 74 72 69 6e 67 20 74			.text	"String too long",0
>95b2	6f 6f 20 6c 6f 6e 67 00
>95ba	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>95c2	6e 20 66 61 69 6c 65 64 00
>95cb	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>95d3	61 74 61 00
>95d7	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>95df	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.95e5					StringSystemInitialise:
.95e5	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.95e7	8d 0e 07	sta $070e			sta 	0+StringMemory
.95ea	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.95ec	8d 0f 07	sta $070f			sta 	1+StringMemory
.95ef	60		rts				rts
.95f0					StringSpaceInitialise:
.95f0	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.95f2	8d 10 07	sta $0710			sta 	StringInitialised
.95f5	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.95f8	8d 11 07	sta $0711			sta 	StringTempPointer
.95fb	ad 0f 07	lda $070f			lda 	StringMemory+1
.95fe	3a		dec a				dec 	a
.95ff	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9602	60		rts				rts
.9603					StringTempAllocate:
.9603	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9605	b0 35		bcs $963c			bcs 	_STALength
.9607	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.960a	30 05		bmi $9611			bmi 	_STAAllocate
.960c	48		pha				pha 								; save value to subtract.
.960d	20 f0 95	jsr $95f0			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9610	68		pla				pla 								; restore it
.9611					_STAAllocate:
.9611	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9613	18		clc				clc  								; deliberate allows one more
.9614	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9617	8d 11 07	sta $0711			sta 	StringTempPointer
.961a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.961d	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.961f	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9622	69 ff		adc #$ff			adc 	#$FF
.9624	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9627	85 3d		sta $3d				sta 	zsTemp+1
.9629	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.962c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.962f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9632	a9 10		lda #$10			lda 	#NSTString
.9634	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9637	a9 00		lda #$00			lda 	#0 							; clear the target string
.9639	92 3c		sta ($3c)			sta 	(zsTemp)
.963b	60		rts				rts
.963c					_STALength:
.963c	a9 09		lda #$09		lda	#9
.963e	4c 1f 82	jmp $821f		jmp	ErrorHandler
.9641					StringTempWrite:
.9641	48		pha				pha
.9642	92 3c		sta ($3c)			sta 	(zsTemp)
.9644	e6 3c		inc $3c				inc 	zsTemp
.9646	d0 02		bne $964a			bne 	_STWNoCarry
.9648	e6 3d		inc $3d				inc 	zsTemp+1
.964a					_STWNoCarry:
.964a	a9 00		lda #$00			lda 	#0
.964c	92 3c		sta ($3c)			sta 	(zsTemp)
.964e	68		pla				pla
.964f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8bb7					BackloadProgram:
.8bb7	a2 ff		ldx #$ff			ldx 	#$FF
.8bb9	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8bbc	20 e3 8b	jsr $8be3			jsr 	BLReadByte
.8bbf	30 1e		bmi $8bdf			bmi 	_BPExit
.8bc1					_BPCopy:
.8bc1	e8		inx				inx  								; copy byte in
.8bc2	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8bc5	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8bc8	20 e3 8b	jsr $8be3			jsr 	BLReadByte 					; read next byte
.8bcb	30 0a		bmi $8bd7			bmi 	_BPEndLine 					; -ve = EOL
.8bcd	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8bcf	d0 02		bne $8bd3			bne 	_BPNotTab
.8bd1	a9 20		lda #$20			lda 	#' '
.8bd3					_BPNotTab:
.8bd3	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8bd5	b0 ea		bcs $8bc1			bcs 	_BPCopy
.8bd7					_BPEndLine:
.8bd7	20 9f 8d	jsr $8d9f			jsr 	TokeniseLine 				; tokenise the line.
.8bda	20 31 90	jsr $9031			jsr 	MemoryAppend 				; append to current program
.8bdd	80 d8		bra $8bb7			bra 	BackloadProgram
.8bdf					_BPExit:
.8bdf	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8be2	60		rts				rts
.8be3					BLReadByte:
.8be3					_BLLoad:
.8be3	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8be6	ee e4 8b	inc $8be4			inc 	_BLLoad+1
.8be9	d0 03		bne $8bee			bne 	_BLNoCarry
.8beb	ee e5 8b	inc $8be5			inc 	_BLLoad+2
.8bee					_BLNoCarry:
.8bee	c9 00		cmp #$00			cmp 	#0
.8bf0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8bf1					TokeniseSearchTable:
.8bf1	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8bf3	85 36		sta $36				sta 	zTemp0
.8bf5	a0 00		ldy #$00			ldy 	#0
.8bf7	a9 80		lda #$80			lda 	#$80 						; token #
.8bf9	85 38		sta $38				sta 	zTemp1
.8bfb					_TSTLoop:
.8bfb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8bfd	30 49		bmi $8c48			bmi 	_TSTFail 					; -ve = end of table
.8bff	f0 2e		beq $8c2f			beq 	_TSTNext 					; zero, check next it's a dummy
.8c01	c8		iny				iny 								; get the hash
.8c02	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c04	88		dey				dey
.8c05	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8c08	d0 25		bne $8c2f			bne 	_TSTNext
.8c0a	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8c0d	38		sec				sec
.8c0e	ed 00 07	sbc $0700			sbc 	identStart
.8c11	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8c13	d0 1a		bne $8c2f			bne 	_TSTNext
.8c15	5a		phy				phy 								; save Y , we might fail
.8c16	c8		iny				iny 								; point to text
.8c17	c8		iny				iny
.8c18	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8c1b					_TSTCompareName:
.8c1b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8c1e	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8c20	d0 0c		bne $8c2e			bne 	_TSTNextPullY 				; fail, pullY and do next
.8c22	e8		inx				inx
.8c23	c8		iny				iny
.8c24	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8c27	d0 f2		bne $8c1b			bne 	_TSTCompareName
.8c29	7a		ply				ply 								; throw Y
.8c2a	a5 38		lda $38				lda 	zTemp1 						; get token #
.8c2c	38		sec				sec 								; return with CS = passed.
.8c2d	60		rts				rts
.8c2e					_TSTNextPullY:
.8c2e	7a		ply				ply 								; restore current, fall through.
.8c2f					_TSTNext:
.8c2f	e6 38		inc $38				inc 	zTemp1 						; token counter
.8c31	98		tya				tya
.8c32	18		clc				clc
.8c33	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8c35	1a		inc a				inc 	a 							; +1
.8c36	1a		inc a				inc 	a 							; +2
.8c37	a8		tay				tay
.8c38	10 c1		bpl $8bfb			bpl 	_TSTLoop 					; if Y < $80 loop back
.8c3a	98		tya				tya 								; add Y to zTemp0 and reset Y
.8c3b	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8c3d	18		clc				clc  								; but have tables > 255 bytes
.8c3e	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8c40	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8c42	90 b7		bcc $8bfb			bcc 	_TSTLoop
.8c44	e6 37		inc $37				inc 	zTemp0+1
.8c46	80 b3		bra $8bfb			bra 	_TSTLoop
.8c48					_TSTFail:
.8c48	18		clc				clc
.8c49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8c4a					KeywordSet0:
>8c4a	00 65					.text	0,$65,""               ; $80 !0:EOF
>8c4c	00 58					.text	0,$58,""               ; $81 !1:SH1
>8c4e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8c50	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8c56	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8c5e	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8c64	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8c6b	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8c72	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8c79	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8c7f	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8c87	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8c8f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8c95	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8c9c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8ca2	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8caa	28
>8cab	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8cb1	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8cb7	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8cbd	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8cc4	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8cca	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8cd0	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8cd5	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8cd9	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8cdf	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8ce7	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8cee	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8cf5	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8cfd	43
>8cfe	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8d04	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8d0b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8d11	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8d17	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8d1c	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8d22	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8d27	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8d2e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8d34	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8d39	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8d40	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8d46	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8d4b	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8d53	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8d59	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8d5d	ff					.text	$FF
.8d5e					KeywordSet1:
>8d5e	00 65					.text	0,$65,""               ; $80 !0:EOF
>8d60	00 58					.text	0,$58,""               ; $81 !1:SH1
>8d62	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8d64	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8d6c	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8d73	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8d78	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8d7e	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8d83	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8d8b	45
>8d8c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8d91	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8d97	ff					.text	$FF
.8d98					KeywordSet2:
>8d98	00 65					.text	0,$65,""               ; $80 !0:EOF
>8d9a	00 58					.text	0,$58,""               ; $81 !1:SH1
>8d9c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8d9e	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8d9f					TokeniseLine:
.8d9f	20 27 8f	jsr $8f27			jsr 	FixLineBufferCase 			; fix line case
.8da2	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8da4	8d 15 07	sta $0715			sta 	tokenOffset
.8da7	9c 16 07	stz $0716			stz 	tokenLineNumber
.8daa	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8dad	a2 ff		ldx #$ff			ldx 	#$FF
.8daf					_TKFindFirst:
.8daf	e8		inx				inx
.8db0	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8db3	f0 79		beq $8e2e			beq 	_TKExit
.8db5	c9 20		cmp #$20			cmp 	#' '
.8db7	90 f6		bcc $8daf			bcc 	_TKFindFirst
.8db9	c9 30		cmp #$30			cmp 	#'0'
.8dbb	90 07		bcc $8dc4			bcc 	_TKNoLineNumber
.8dbd	c9 3a		cmp #$3a			cmp 	#'9'+1
.8dbf	b0 03		bcs $8dc4			bcs 	_TKNoLineNumber
.8dc1	20 51 8f	jsr $8f51			jsr 	TokeniseExtractLineNumber
.8dc4					_TKNoLineNumber:
.8dc4					_TKTokeniseLoop:
.8dc4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8dc7	f0 65		beq $8e2e			beq 	_TKExit
.8dc9	e8		inx				inx
.8dca	c9 20		cmp #$20			cmp 	#' '
.8dcc	f0 f6		beq $8dc4			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8dce	ca		dex				dex 								; undo last get, A contains character, X is position.
.8dcf	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8dd1	f0 61		beq $8e34			beq 	_TKTokeniseIdentifier
.8dd3	c9 41		cmp #$41			cmp 	#'A'
.8dd5	90 04		bcc $8ddb			bcc 	_TKTokenisePunctuation
.8dd7	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8dd9	90 59		bcc $8e34			bcc 	_TKTokeniseIdentifier
.8ddb					_TKTokenisePunctuation:
.8ddb	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8ddd	f0 27		beq $8e06			beq 	_TKString
.8ddf	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8de1	f0 28		beq $8e0b			beq 	_TKHexConstant
.8de3	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8de5	f0 29		beq $8e10			beq 	_TKCheckDouble
.8de7	c9 3e		cmp #$3e			cmp 	#'>'
.8de9	f0 25		beq $8e10			beq 	_TKCheckDouble
.8deb					_TKStandardPunctuation:
.8deb	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8dee	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8df0	90 0e		bcc $8e00			bcc 	_TKNoShift
.8df2	48		pha				pha 								; save
.8df3	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8df5	85 36		sta $36				sta 	zTemp0
.8df7	68		pla				pla
.8df8	29 20		and #$20			and 	#32 						; bit 5
.8dfa	4a		lsr a				lsr 	a 							; shift into bit 3
.8dfb	4a		lsr a				lsr 	a
.8dfc	05 36		ora $36				ora 	zTemp0
.8dfe	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8e00					_TKNoShift:
.8e00	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte 			; write the punctuation character
.8e03	e8		inx				inx 								; consume the character
.8e04	80 be		bra $8dc4			bra 	_TKTokeniseLoop 			; and loop round again.
.8e06					_TKString:
.8e06	20 b6 8e	jsr $8eb6			jsr 	TokeniseString
.8e09	80 b9		bra $8dc4			bra 	_TKTokeniseLoop
.8e0b					_TKHexConstant:
.8e0b	20 f1 8e	jsr $8ef1			jsr 	TokeniseHexConstant
.8e0e	80 b4		bra $8dc4			bra 	_TKTokeniseLoop
.8e10					_TKCheckDouble:
.8e10	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8e13	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8e15	90 d4		bcc $8deb			bcc 	_TKStandardPunctuation
.8e17	c9 3f		cmp #$3f			cmp 	#'>'+1
.8e19	b0 d0		bcs $8deb			bcs 	_TKStandardPunctuation
.8e1b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8e1e	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8e20	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8e21	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8e24	38		sec				sec
.8e25	e9 3c		sbc #$3c			sbc 	#'<'
.8e27	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8e2a	e8		inx				inx 								; consume both
.8e2b	e8		inx				inx
.8e2c	80 96		bra $8dc4			bra 	_TKTokeniseLoop
.8e2e	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8e30	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.8e33	60		rts				rts
.8e34					_TKTokeniseIdentifier:
.8e34	8e 00 07	stx $0700			stx 	identStart 					; save start
.8e37	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8e3a					_TKCheckLoop:
.8e3a	e8		inx				inx 								; look at next, we know first is identifier.
.8e3b	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8e3e	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8e40	f0 f8		beq $8e3a			beq 	_TKCheckLoop
.8e42	c9 30		cmp #$30			cmp	 	#"0"
.8e44	90 0c		bcc $8e52			bcc 	_TKEndIdentifier
.8e46	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e48	90 f0		bcc $8e3a			bcc 	_TKCheckLoop
.8e4a	c9 41		cmp #$41			cmp	 	#"A"
.8e4c	90 04		bcc $8e52			bcc 	_TKEndIdentifier
.8e4e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8e50	90 e8		bcc $8e3a			bcc 	_TKCheckLoop
.8e52					_TKEndIdentifier:
.8e52	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8e55	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8e57	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8e59	f0 06		beq $8e61			beq 	_TKHasTypeCharacter
.8e5b	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8e5d	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8e5f	d0 07		bne $8e68			bne 	_TKNoTypeCharacter
.8e61					_TKHasTypeCharacter:
.8e61	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8e64	e8		inx				inx 								; read next
.8e65	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8e68					_TKNoTypeCharacter:
.8e68	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8e6a	d0 09		bne $8e75			bne 	_TKNoArray
.8e6c	e8		inx				inx 								; skip the (
.8e6d	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8e70	09 04		ora #$04			ora 	#$04
.8e72	8d 04 07	sta $0704			sta 	identTypeByte
.8e75					_TKNoArray:
.8e75	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8e78	20 12 8f	jsr $8f12			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8e7b	a0 8c		ldy #$8c			ldy 	#(KeywordSet0) >> 8
.8e7d	a9 4a		lda #$4a			lda 	#(KeywordSet0) & $FF
.8e7f	20 f1 8b	jsr $8bf1			jsr 	TokeniseSearchTable
.8e82	a2 00		ldx #$00			ldx 	#0
.8e84	b0 1f		bcs $8ea5			bcs 	_TKFoundToken
.8e86	a0 8d		ldy #$8d			ldy 	#(KeywordSet1) >> 8
.8e88	a9 5e		lda #$5e			lda 	#(KeywordSet1) & $FF
.8e8a	20 f1 8b	jsr $8bf1			jsr 	TokeniseSearchTable
.8e8d	a2 81		ldx #$81			ldx 	#$81
.8e8f	b0 14		bcs $8ea5			bcs 	_TKFoundToken
.8e91	a0 8d		ldy #$8d			ldy 	#(KeywordSet1) >> 8
.8e93	a9 5e		lda #$5e			lda 	#(KeywordSet1) & $FF
.8e95	20 f1 8b	jsr $8bf1			jsr 	TokeniseSearchTable
.8e98	a2 82		ldx #$82			ldx 	#$82
.8e9a	b0 09		bcs $8ea5			bcs 	_TKFoundToken
.8e9c	20 a2 8f	jsr $8fa2			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8e9f	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8ea2	4c c4 8d	jmp $8dc4			jmp 	_TKTokeniseLoop 			; and go round again.
.8ea5					_TKFoundToken:
.8ea5	48		pha				pha 								; save token
.8ea6	8a		txa				txa 								; shift in X, is there one ?
.8ea7	f0 03		beq $8eac			beq 	_TKNoTShift
.8ea9	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte 			; if so, write it out
.8eac					_TKNoTShift:
.8eac	68		pla				pla 								; restore and write token
.8ead	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.8eb0	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8eb3	4c c4 8d	jmp $8dc4			jmp 	_TKTokeniseLoop 			; and go round again.
.8eb6					TokeniseString:
.8eb6	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8eb8	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.8ebb	e8		inx				inx									; start of quoted string.
.8ebc	da		phx				phx 								; push start of string on top
.8ebd	ca		dex				dex
.8ebe					_TSFindEnd:
.8ebe	e8		inx				inx
.8ebf	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8ec2	f0 04		beq $8ec8			beq 	_TSEndOfString
.8ec4	c9 22		cmp #$22			cmp 	#'"'
.8ec6	d0 f6		bne $8ebe			bne 	_TSFindEnd
.8ec8					_TSEndOfString:
.8ec8	7a		ply				ply  								; so now Y is first character, X is character after end.
.8ec9	48		pha				pha 								; save terminating character
.8eca	20 d2 8e	jsr $8ed2			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8ecd	68		pla				pla 								; terminating character
.8ece	f0 01		beq $8ed1			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8ed0	e8		inx				inx
.8ed1					_TSNotQuote:
.8ed1	60		rts				rts
.8ed2					TOWriteBlockXY:
.8ed2	86 36		stx $36				stx 	zTemp0 						; write end character
.8ed4	98		tya				tya
.8ed5	49 ff		eor #$ff			eor 	#$FF
.8ed7	38		sec				sec
.8ed8	65 36		adc $36				adc 	zTemp0
.8eda	1a		inc a				inc 	a 							; one extra for NULL
.8edb	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.8ede					_TOBlockLoop:
.8ede	c4 36		cpy $36				cpy 	zTemp0
.8ee0	f0 09		beq $8eeb			beq 	_TOBlockExit
.8ee2	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.8ee5	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.8ee8	c8		iny				iny
.8ee9	80 f3		bra $8ede			bra 	_TOBlockLoop
.8eeb					_TOBlockExit:
.8eeb	a9 00		lda #$00			lda 	#0
.8eed	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.8ef0	60		rts				rts
.8ef1					TokeniseHexConstant:
.8ef1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8ef3	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.8ef6	e8		inx				inx									; start of quoted string.
.8ef7	da		phx				phx 								; push start of constant on top
.8ef8	ca		dex				dex
.8ef9					_THFindLoop:
.8ef9	e8		inx				inx
.8efa	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8efd	c9 30		cmp #$30			cmp 	#"0"
.8eff	90 0c		bcc $8f0d			bcc 	_THFoundEnd
.8f01	c9 3a		cmp #$3a			cmp 	#"9"+1
.8f03	90 f4		bcc $8ef9			bcc 	_THFindLoop
.8f05	c9 41		cmp #$41			cmp 	#"A"
.8f07	90 04		bcc $8f0d			bcc 	_THFoundEnd
.8f09	c9 47		cmp #$47			cmp 	#"F"+1
.8f0b	90 ec		bcc $8ef9			bcc 	_THFindLoop
.8f0d					_THFoundEnd:
.8f0d	7a		ply				ply 								; restore start
.8f0e	20 d2 8e	jsr $8ed2			jsr 	TOWriteBlockXY 				; output the block
.8f11	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.8f12					TokeniseCalculateHash:
.8f12	da		phx				phx
.8f13	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8f16	a9 00		lda #$00			lda 	#0
.8f18					_TCHLoop:
.8f18	18		clc				clc
.8f19	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.8f1c	e8		inx				inx
.8f1d	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8f20	d0 f6		bne $8f18			bne 	_TCHLoop
.8f22	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8f25	fa		plx				plx
.8f26	60		rts				rts
.8f27					FixLineBufferCase:
.8f27	a2 00		ldx #$00			ldx 	#0
.8f29					_FLBCLoop:
.8f29	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.8f2c	f0 22		beq $8f50			beq 	_FLBCExit 					; end of string.
.8f2e	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8f30	f0 11		beq $8f43			beq 	_FLBCInQuotes
.8f32	e8		inx				inx
.8f33	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8f35	90 f2		bcc $8f29			bcc 	_FLBCLoop
.8f37	c9 7b		cmp #$7b			cmp 	#'z'+1
.8f39	b0 ee		bcs $8f29			bcs 	_FLBCLoop
.8f3b	38		sec				sec 								; make U/C
.8f3c	e9 20		sbc #$20			sbc 	#32
.8f3e	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.8f41	80 e6		bra $8f29			bra 	_FLBCLoop
.8f43					_FLBCInQuotes:
.8f43	e8		inx				inx 								; advance
.8f44	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.8f47	f0 07		beq $8f50			beq 	_FLBCExit 					; exit on EOS
.8f49	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8f4b	d0 f6		bne $8f43			bne 	_FLBCInQuotes
.8f4d	e8		inx				inx 								; skip over it
.8f4e	80 d9		bra $8f29			bra 	_FLBCLoop
.8f50					_FLBCExit:
.8f50	60		rts				rts
.8f51					TokeniseExtractLineNumber:
.8f51	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.8f54	48		pha				pha
.8f55	ad 16 07	lda $0716			lda 	tokenLineNumber
.8f58	48		pha				pha
.8f59	20 8f 8f	jsr $8f8f			jsr 	_TELNTimes2 				; line # x 4
.8f5c	20 8f 8f	jsr $8f8f			jsr 	_TELNTimes2 				; line # x 2
.8f5f	18		clc				clc 								; add stacked value
.8f60	68		pla				pla
.8f61	6d 16 07	adc $0716			adc 	tokenLineNumber
.8f64	8d 16 07	sta $0716			sta 	tokenLineNumber
.8f67	68		pla				pla
.8f68	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.8f6b	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.8f6e	20 8f 8f	jsr $8f8f			jsr 	_TELNTimes2 				; line # x 10
.8f71	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.8f74	e8		inx				inx
.8f75	29 0f		and #$0f			and 	#15 						; add to line #
.8f77	18		clc				clc
.8f78	6d 16 07	adc $0716			adc 	tokenLineNumber
.8f7b	8d 16 07	sta $0716			sta 	tokenLineNumber
.8f7e	90 03		bcc $8f83			bcc 	_TLENNoCarry
.8f80	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.8f83					_TLENNoCarry:
.8f83	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.8f86	c9 30		cmp #$30			cmp 	#'0'
.8f88	90 04		bcc $8f8e			bcc 	_TLENExit
.8f8a	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f8c	90 c3		bcc $8f51			bcc 	TokeniseExtractLineNumber
.8f8e					_TLENExit:
.8f8e	60		rts				rts
.8f8f					_TELNTimes2:
.8f8f	0e 16 07	asl $0716			asl 	tokenLineNumber
.8f92	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.8f95	60		rts				rts
.8f96					TokeniseWriteByte:
.8f96	da		phx				phx
.8f97	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.8f9a	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.8f9d	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.8fa0	fa		plx				plx
.8fa1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.8fa2					CheckCreateVariableRecord:
.8fa2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8fa4	85 36		sta $36				sta 	0+zTemp0
.8fa6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8fa8	85 37		sta $37				sta 	1+zTemp0
.8faa	20 75 90	jsr $9075			jsr 	VariableOpen 				; make variable space available
.8fad					_CCVSearch:
.8fad	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8faf	f0 2c		beq $8fdd			beq 	_CCVFail
.8fb1	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8fb3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8fb5	cd 03 07	cmp $0703			cmp 	identHash
.8fb8	d0 16		bne $8fd0			bne 	_CCVNext
.8fba	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8fbc	ae 00 07	ldx $0700			ldx 	identStart
.8fbf					_CCVCompare:
.8fbf	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8fc2	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8fc4	e8		inx				inx 								; advance pointers
.8fc5	c8		iny				iny
.8fc6	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8fc7	d0 07		bne $8fd0			bne 	_CCVNext  					; didn't match go to next.
.8fc9	90 f4		bcc $8fbf			bcc 	_CCVCompare 				; not finished yet.
.8fcb	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8fce	f0 41		beq $9011			beq 	_CCVFound 					; yes, we were successful
.8fd0					_CCVNext:
.8fd0	18		clc				clc
.8fd1	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8fd3	65 36		adc $36				adc 	zTemp0
.8fd5	85 36		sta $36				sta 	zTemp0
.8fd7	90 d4		bcc $8fad			bcc 	_CCVSearch
.8fd9	e6 37		inc $37				inc 	zTemp0+1
.8fdb	80 d0		bra $8fad			bra 	_CCVSearch
.8fdd					_CCVFail:
.8fdd	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8fdf	ad 03 07	lda $0703			lda 	identHash
.8fe2	91 36		sta ($36),y			sta 	(zTemp0),y
.8fe4	c8		iny				iny 								; offset 2 is the type byte
.8fe5	ad 04 07	lda $0704			lda 	identTypeByte
.8fe8	91 36		sta ($36),y			sta 	(zTemp0),y
.8fea	c8		iny				iny
.8feb					_CCVData:
.8feb	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8fed	91 36		sta ($36),y			sta 	(zTemp0),y
.8fef	c8		iny				iny
.8ff0	c0 08		cpy #$08			cpy 	#8
.8ff2	90 f7		bcc $8feb			bcc 	_CCVData
.8ff4	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8ff7					_CCVCopyName:
.8ff7	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8ffa	91 36		sta ($36),y			sta 	(zTemp0),y
.8ffc	e8		inx				inx
.8ffd	c8		iny				iny
.8ffe	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9001	d0 f4		bne $8ff7			bne 	_CCVCopyName
.9003	98		tya				tya 								; patch offset
.9004	92 36		sta ($36)			sta 	(zTemp0)
.9006	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9008	91 36		sta ($36),y			sta 	(zTemp0),y
.900a	88		dey				dey
.900b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.900d	09 80		ora #$80			ora 	#$80
.900f	91 36		sta ($36),y			sta 	(zTemp0),y
.9011					_CCVFound:
.9011	20 76 90	jsr $9076			jsr 	VariableClose 				; map out variables, perhaps.
.9014	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9016	38		sec				sec
.9017	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9019	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.901b	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.901e	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9020	20 96 8f	jsr $8f96			jsr 	TokeniseWriteByte
.9023	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9650					MemoryPeek:
.9650	b2 36		lda ($36)			lda 	(zTemp0)
.9652	60		rts				rts
.9653					MemoryPoke:
.9653	92 36		sta ($36)			sta 	(zTemp0)
.9655	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9656					EXTPrintCharacter:
.9656	48		pha				pha
.9657	da		phx				phx
.9658	5a		phy				phy
.9659	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.965c	7a		ply				ply
.965d	fa		plx				plx
.965e	68		pla				pla
.965f	60		rts				rts
.9660					EXTInputSingleCharacter:
.9660	da		phx				phx
.9661	5a		phy				phy
.9662					_EISCWait:
.9662	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9665	c9 00		cmp #$00			cmp 	#0
.9667	f0 f9		beq $9662			beq 	_EISCWait
.9669	7a		ply				ply
.966a	fa		plx				plx
.966b	60		rts				rts
.966c					EXTInputLine:
.966c	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.966e					_ILLoop:
.966e	da		phx				phx 								; read character in
.966f	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9672	fa		plx				plx
.9673	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9675	f0 12		beq $9689			beq 	_ILBackspace
.9677	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9679	f0 15		beq $9690			beq 	_ILExit
.967b	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.967d	90 ef		bcc $966e			bcc 	_ILLoop
.967f	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9681	f0 eb		beq $966e			beq 	_ILLoop
.9683	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9686	e8		inx				inx
.9687	80 e5		bra $966e			bra 	_ILLoop
.9689					_ILBackspace:
.9689	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.968b	f0 e1		beq $966e			beq 	_ILLoop
.968d	ca		dex				dex 								; back one.
.968e	80 de		bra $966e			bra 	_ILLoop
.9690					_ILExit:
.9690	20 56 96	jsr $9656			jsr 	EXTPrintCharacter
.9693	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9696	60		rts				rts
.9697					EXTBreakCheck:
.9697	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9024					MemoryNew:
.9024	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9026	85 30		sta $30				sta 	codePtr
.9028	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.902a	85 31		sta $31				sta 	codePtr+1
.902c	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.902e	92 30		sta ($30)			sta 	(codePtr)
.9030	60		rts				rts
.9031					MemoryAppend:
.9031	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9033	85 30		sta $30				sta 	codePtr
.9035	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9037	85 31		sta $31				sta 	codePtr+1
.9039					_MAFindEnd:
.9039	b2 30		lda ($30)			lda 	(codePtr)
.903b	f0 0d		beq $904a			beq 	_MAFoundEnd
.903d	18		clc				clc
.903e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9040	65 30		adc $30				adc 	codePtr
.9042	85 30		sta $30				sta 	codePtr
.9044	90 02		bcc $9048			bcc 	_CREExit
.9046	e6 31		inc $31				inc 	codePtr+1
.9048					_CREExit:
.9048	80 ef		bra $9039			bra 	_MAFindEnd
.904a					_MAFoundEnd:
.904a	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.904d	c0 04		cpy #$04			cpy 	#4 							; blank line
.904f	f0 0e		beq $905f			beq 	_MANoLine
.9051	a9 00		lda #$00			lda 	#0 							; end of program
.9053	91 30		sta ($30),y			sta 	(codePtr),y
.9055					_MACopy:
.9055	88		dey				dey
.9056	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9059	91 30		sta ($30),y			sta 	(codePtr),y
.905b	c0 00		cpy #$00			cpy 	#0
.905d	d0 f6		bne $9055			bne 	_MACopy
.905f					_MANoLine:
.905f	60		rts				rts
.9060					MemoryInline:
.9060	98		tya				tya 								; put address into stack,x
.9061	18		clc				clc
.9062	65 30		adc $30				adc 	codePtr
.9064	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9067	a5 31		lda $31				lda 	codePtr+1
.9069	69 00		adc #$00			adc 	#0
.906b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.906e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9071	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9074	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/variable.asm

.9075					VariableOpen:
.9075	60		rts				rts
.9076					VariableClose:
.9076	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
