
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 30 08:37:23 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 b5 81	jsr $81b5			jsr 	NewCommand 					; erase current program
.8006	20 0a 8c	jsr $8c0a			jsr 	BackloadProgram
.8009	4c 23 82	jmp $8223			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 7d 90	jsr $907d			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	15 84					.word	ShiftLeft                        ; $00 <<
>8016	0f 83					.word	BinaryCompareLessEqual           ; $01 <=
>8018	05 83					.word	BinaryCompareNotEqual            ; $02 <>
>801a	e3 95					.word	SyntaxError                      ; $03 !!3
>801c	e3 95					.word	SyntaxError                      ; $04 ><
>801e	19 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	18 84					.word	ShiftRight                       ; $06 >>
>8022	e3 95					.word	SyntaxError                      ; $07 !!7
>8024	e3 95					.word	SyntaxError                      ; $08 !!8
>8026	e3 95					.word	SyntaxError                      ; $09 !!9
>8028	e3 95					.word	SyntaxError                      ; $0a !!10
>802a	e3 95					.word	SyntaxError                      ; $0b !!11
>802c	e3 95					.word	SyntaxError                      ; $0c !!12
>802e	e3 95					.word	SyntaxError                      ; $0d !!13
>8030	e3 95					.word	SyntaxError                      ; $0e !!14
>8032	e3 95					.word	SyntaxError                      ; $0f !!15
>8034	e3 95					.word	SyntaxError                      ; $10 @
>8036	e3 95					.word	SyntaxError                      ; $11 !!17
>8038	e3 95					.word	SyntaxError                      ; $12 !!18
>803a	e3 95					.word	SyntaxError                      ; $13 [
>803c	da 90					.word	IntegerDivide                    ; $14 \
>803e	e3 95					.word	SyntaxError                      ; $15 ]
>8040	9b 85					.word	EorInteger                       ; $16 ^
>8042	e3 95					.word	SyntaxError                      ; $17 _
>8044	e3 95					.word	SyntaxError                      ; $18 `
>8046	e3 95					.word	SyntaxError                      ; $19 !!25
>8048	e3 95					.word	SyntaxError                      ; $1a !!26
>804a	e3 95					.word	SyntaxError                      ; $1b {
>804c	56 85					.word	OraInteger                       ; $1c |
>804e	e3 95					.word	SyntaxError                      ; $1d }
>8050	e3 95					.word	SyntaxError                      ; $1e ~
>8052	e3 95					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	e3 95					.word	SyntaxError                      ; $20
>8056	e3 95					.word	SyntaxError                      ; $21 !
>8058	e3 95					.word	SyntaxError                      ; $22 "
>805a	e3 95					.word	SyntaxError                      ; $23 #
>805c	e3 95					.word	SyntaxError                      ; $24 $
>805e	26 91					.word	IntegerModulus                   ; $25 %
>8060	11 85					.word	AndInteger                       ; $26 &
>8062	e3 95					.word	SyntaxError                      ; $27 '
>8064	e3 95					.word	SyntaxError                      ; $28 (
>8066	e3 95					.word	SyntaxError                      ; $29 )
>8068	9a 91					.word	MulInteger                       ; $2a *
>806a	ab 84					.word	AddInteger                       ; $2b +
>806c	e3 95					.word	SyntaxError                      ; $2c ,
>806e	e6 84					.word	SubInteger                       ; $2d -
>8070	e3 95					.word	SyntaxError                      ; $2e .
>8072	31 93					.word	FDivideCommand                   ; $2f /
>8074	e3 95					.word	SyntaxError                      ; $30 0
>8076	e3 95					.word	SyntaxError                      ; $31 1
>8078	e3 95					.word	SyntaxError                      ; $32 2
>807a	e3 95					.word	SyntaxError                      ; $33 3
>807c	e3 95					.word	SyntaxError                      ; $34 4
>807e	e3 95					.word	SyntaxError                      ; $35 5
>8080	e3 95					.word	SyntaxError                      ; $36 6
>8082	e3 95					.word	SyntaxError                      ; $37 7
>8084	e3 95					.word	SyntaxError                      ; $38 8
>8086	e3 95					.word	SyntaxError                      ; $39 9
>8088	e3 95					.word	SyntaxError                      ; $3a :
>808a	e3 95					.word	SyntaxError                      ; $3b ;
>808c	f1 82					.word	BinaryCompareLess                ; $3c <
>808e	e7 82					.word	BinaryCompareEqual               ; $3d =
>8090	fb 82					.word	BinaryCompareGreater             ; $3e >
>8092	e3 95					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	5d 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	6a 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	e3 95					.word	SyntaxError                      ; $82 !2:SH2
>809a	77 94					.word	AbsUnary                         ; $83 ABS(
>809c	07 89					.word	AllocUnary                       ; $84 ALLOC(
>809e	87 94					.word	AscUnary                         ; $85 ASC(
>80a0	a4 89					.word	ChrUnary                         ; $86 CHR$(
>80a2	e3 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	94 94					.word	FracUnary                        ; $88 FRAC(
>80a6	aa 94					.word	IntUnary                         ; $89 INT(
>80a8	00 95					.word	IsValUnary                       ; $8a ISVAL(
>80aa	79 8a					.word	Unary_Left                       ; $8b LEFT$(
>80ac	bc 94					.word	LenUnary                         ; $8c LEN(
>80ae	a3 8a					.word	Unary_Mid                        ; $8d MID$(
>80b0	41 89					.word	Unary_Not                        ; $8e NOT(
>80b2	89 8a					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	57 89					.word	Unary_Rnd                        ; $90 RND(
>80b6	d6 94					.word	SgnUnary                         ; $91 SGN(
>80b8	b6 89					.word	SpcUnary                         ; $92 SPC(
>80ba	d1 89					.word	Unary_Str                        ; $93 STR$(
>80bc	d7 82					.word	UnaryTrue                        ; $94 TRUE
>80be	f6 94					.word	ValUnary                         ; $95 VAL(
>80c0	e3 95					.word	SyntaxError                      ; $96 FOR
>80c2	e3 95					.word	SyntaxError                      ; $97 IF
>80c4	e3 95					.word	SyntaxError                      ; $98 PROC
>80c6	e3 95					.word	SyntaxError                      ; $99 REPEAT
>80c8	e3 95					.word	SyntaxError                      ; $9a WHILE
>80ca	e3 95					.word	SyntaxError                      ; $9b ENDIF
>80cc	e3 95					.word	SyntaxError                      ; $9c ENDPROC
>80ce	e3 95					.word	SyntaxError                      ; $9d NEXT
>80d0	e3 95					.word	SyntaxError                      ; $9e UNTIL
>80d2	e3 95					.word	SyntaxError                      ; $9f WEND
>80d4	6d 81					.word	CallCommand                      ; $a0 CALL
>80d6	e3 95					.word	SyntaxError                      ; $a1 CLS
>80d8	e3 95					.word	SyntaxError                      ; $a2 DATA
>80da	e3 95					.word	SyntaxError                      ; $a3 DIM
>80dc	e3 95					.word	SyntaxError                      ; $a4 GOSUB
>80de	e3 95					.word	SyntaxError                      ; $a5 GOTO
>80e0	e3 95					.word	SyntaxError                      ; $a6 LET
>80e2	bf 81					.word	Command_Print                    ; $a7 PRINT
>80e4	e3 95					.word	SyntaxError                      ; $a8 READ
>80e6	16 82					.word	RemCommand                       ; $a9 REM
>80e8	e3 95					.word	SyntaxError                      ; $aa RETURN
>80ea	e3 95					.word	SyntaxError                      ; $ab THEN
>80ec	e3 95					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	e3 95					.word	SyntaxError                      ; $80 !0:EOF
>80f0	e3 95					.word	SyntaxError                      ; $81 !1:SH1
>80f2	e3 95					.word	SyntaxError                      ; $82 !2:SH2
>80f4	5d 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	7b 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	b2 81					.word	EndCommand                       ; $85 END
>80fa	e3 95					.word	SyntaxError                      ; $86 LIST
>80fc	b5 81					.word	NewCommand                       ; $87 NEW
>80fe	e3 95					.word	SyntaxError                      ; $88 RESTORE
>8100	23 82					.word	CommandRUN                       ; $89 RUN
>8102	e3 95					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	e3 95					.word	SyntaxError                      ; $80 !0:EOF
>8106	e3 95					.word	SyntaxError                      ; $81 !1:SH1
>8108	e3 95					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/memory.asm

.9077					MemoryPeek:
.9077	b2 36		lda ($36)			lda 	(zTemp0)
.9079	60		rts				rts
.907a					MemoryPoke:
.907a	92 36		sta ($36)			sta 	(zTemp0)
.907c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/vectors.asm

.907d					EXTPrintCharacter:
.907d	48		pha				pha
.907e	da		phx				phx
.907f	5a		phy				phy
.9080	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9083	7a		ply				ply
.9084	fa		plx				plx
.9085	68		pla				pla
.9086	60		rts				rts
.9087					EXTInputSingleCharacter:
.9087	da		phx				phx
.9088	5a		phy				phy
.9089					_EISCWait:
.9089	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.908c	c9 00		cmp #$00			cmp 	#0
.908e	f0 f9		beq $9089			beq 	_EISCWait
.9090	7a		ply				ply
.9091	fa		plx				plx
.9092	60		rts				rts
.9093					EXTInputLine:
.9093	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9095					_ILLoop:
.9095	da		phx				phx 								; read character in
.9096	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9099	fa		plx				plx
.909a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.909c	f0 12		beq $90b0			beq 	_ILBackspace
.909e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.90a0	f0 15		beq $90b7			beq 	_ILExit
.90a2	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.90a4	90 ef		bcc $9095			bcc 	_ILLoop
.90a6	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.90a8	f0 eb		beq $9095			beq 	_ILLoop
.90aa	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.90ad	e8		inx				inx
.90ae	80 e5		bra $9095			bra 	_ILLoop
.90b0					_ILBackspace:
.90b0	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.90b2	f0 e1		beq $9095			beq 	_ILLoop
.90b4	ca		dex				dex 								; back one.
.90b5	80 de		bra $9095			bra 	_ILLoop
.90b7					_ILExit:
.90b7	20 7d 90	jsr $907d			jsr 	EXTPrintCharacter
.90ba	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.90bd	60		rts				rts
.90be					EXTBreakCheck:
.90be	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/memory.asm

.810a					MemoryNew:
.810a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.810c	85 30		sta $30				sta 	codePtr
.810e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8110	85 31		sta $31				sta 	codePtr+1
.8112	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8114	92 30		sta ($30)			sta 	(codePtr)
.8116	60		rts				rts
.8117					MemoryAppend:
.8117	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8119	85 30		sta $30				sta 	codePtr
.811b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.811d	85 31		sta $31				sta 	codePtr+1
.811f					_MAFindEnd:
.811f	b2 30		lda ($30)			lda 	(codePtr)
.8121	f0 0d		beq $8130			beq 	_MAFoundEnd
.8123	18		clc				clc
.8124	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8126	65 30		adc $30				adc 	codePtr
.8128	85 30		sta $30				sta 	codePtr
.812a	90 02		bcc $812e			bcc 	_CREExit
.812c	e6 31		inc $31				inc 	codePtr+1
.812e					_CREExit:
.812e	80 ef		bra $811f			bra 	_MAFindEnd
.8130					_MAFoundEnd:
.8130	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.8133	c0 04		cpy #$04			cpy 	#4 							; blank line
.8135	f0 0e		beq $8145			beq 	_MANoLine
.8137	a9 00		lda #$00			lda 	#0 							; end of program
.8139	91 30		sta ($30),y			sta 	(codePtr),y
.813b					_MACopy:
.813b	88		dey				dey
.813c	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.813f	91 30		sta ($30),y			sta 	(codePtr),y
.8141	c0 00		cpy #$00			cpy 	#0
.8143	d0 f6		bne $813b			bne 	_MACopy
.8145					_MANoLine:
.8145	60		rts				rts
.8146					MemoryInline:
.8146	98		tya				tya 								; put address into stack,x
.8147	18		clc				clc
.8148	65 30		adc $30				adc 	codePtr
.814a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.814d	a5 31		lda $31				lda 	codePtr+1
.814f	69 00		adc #$00			adc 	#0
.8151	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8154	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8157	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.815a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/variable.asm

.815b					VariableOpen:
.815b	60		rts				rts
.815c					VariableClose:
.815c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/assert.asm

.815d					AssertCommand:
.815d	a2 00		ldx #$00			ldx 	#0
.815f	20 44 8b	jsr $8b44			jsr 	EvaluateInteger 			; the assert test
.8162	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; exit if result is non zero.
.8165	d0 05		bne $816c			bne 	_ACExit
.8167	a9 0a		lda #$0a		lda	#10
.8169	4c 72 82	jmp $8272		jmp	ErrorHandler
.816c					_ACExit:
.816c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/call.asm

.816d					CallCommand:
.816d	a2 00		ldx #$00			ldx 	#0
.816f	20 59 8b	jsr $8b59			jsr 	Evaluate16BitInteger
.8172	ad 10 06	lda $0610			lda 	NSMantissa1
.8175	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8178	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/clear.asm

.817b					ClearCommand:
.817b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.817d	85 36		sta $36				sta 	0+zTemp0
.817f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8181	85 37		sta $37				sta 	1+zTemp0
.8183					_ClearZeroLoop:
.8183	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8185	f0 18		beq $819f			beq 	_ClearZeroEnd
.8187	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8189	a9 00		lda #$00			lda 	#0
.818b					_ClearOneVariable:
.818b	91 36		sta ($36),y			sta 	(zTemp0),y
.818d	c8		iny				iny
.818e	c0 08		cpy #$08			cpy 	#8
.8190	d0 f9		bne $818b			bne 	_ClearOneVariable
.8192	18		clc				clc 								; go to the next variable
.8193	b2 36		lda ($36)			lda 	(zTemp0)
.8195	65 36		adc $36				adc 	zTemp0
.8197	85 36		sta $36				sta 	zTemp0
.8199	90 e8		bcc $8183			bcc 	_ClearZeroLoop
.819b	e6 37		inc $37				inc 	zTemp0+1
.819d	80 e4		bra $8183			bra 	_ClearZeroLoop
.819f					_ClearZeroEnd:
.819f	18		clc				clc
.81a0	a5 36		lda $36				lda 	zTemp0
.81a2	69 01		adc #$01			adc 	#1
.81a4	8d 0c 07	sta $070c			sta 	lowMemPtr
.81a7	a5 37		lda $37				lda 	zTemp0+1
.81a9	69 00		adc #$00			adc 	#0
.81ab	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.81ae	20 41 95	jsr $9541			jsr 	StringSystemInitialise
.81b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/end.asm

.81b2					EndCommand:
.81b2	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/new.asm

.81b5					NewCommand:
.81b5	20 0a 81	jsr $810a			jsr 	MemoryNew
.81b8	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81bb	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear everything.
.81be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/print.asm

.81bf					Command_Print:
.81bf	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.81c0					_CPLoop:
.81c0	08		php				php 								; save last action flag
.81c1	b1 30		lda ($30),y			lda 	(codePtr),y
.81c3	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81c5	f0 46		beq $820d			beq 	_CPExit
.81c7	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81c9	f0 42		beq $820d			beq 	_CPExit
.81cb	68		pla				pla 								; throw last action flag
.81cc	b1 30		lda ($30),y			lda 	(codePtr),y
.81ce	c8		iny				iny
.81cf	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81d1	f0 37		beq $820a			beq 	_CPContinueWithSameLine
.81d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81d5	f0 2e		beq $8205			beq 	_CPTab
.81d7	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81d9	f0 26		beq $8201			beq 	_CPNewLine
.81db	88		dey				dey 								; undo the get.
.81dc	a2 00		ldx #$00			ldx 	#0
.81de	20 18 8b	jsr $8b18			jsr 	EvaluateValue 				; get a value into slot 0
.81e1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81e4	29 10		and #$10			and 	#NSBIsString
.81e6	f0 0b		beq $81f3			beq 	_CPNumber
.81e8	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81eb	ad 08 06	lda $0608			lda 	NSMantissa0
.81ee	20 c4 82	jsr $82c4			jsr 	PrintStringXA
.81f1	80 cc		bra $81bf			bra 	Command_Print 				; loop round clearing carry so NL if end
.81f3					_CPNumber:
.81f3	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81f5	20 f3 89	jsr $89f3			jsr 	ConvertNumberToString 		; convert to string
.81f8	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81fa	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81fc	20 c4 82	jsr $82c4			jsr 	PrintStringXA
.81ff	80 be		bra $81bf			bra 	Command_Print 				; loop round clearing carry so NL if end
.8201					_CPNewLine:
.8201	a9 0d		lda #$0d			lda 	#13
.8203	80 02		bra $8207			bra 	_CPPrintChar
.8205					_CPTab:
.8205	a9 09		lda #$09			lda 	#9 							; print TAB
.8207					_CPPrintChar:
.8207	20 7d 90	jsr $907d			jsr 	EXTPrintCharacter
.820a					_CPContinueWithSameLine:
.820a	38		sec				sec 								; loop round with carry set, which
.820b	80 b3		bra $81c0			bra 	_CPLoop 					; will inhibit final CR
.820d					_CPExit:
.820d	28		plp				plp 								; get last action flag
.820e	b0 05		bcs $8215			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8210	a9 0d		lda #$0d			lda 	#13 						; print new line
.8212	20 7d 90	jsr $907d			jsr 	EXTPrintCharacter
.8215					_CPExit2:
.8215	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/rem.asm

.8216					RemCommand:
.8216	b1 30		lda ($30),y			lda 	(codePtr),y
.8218	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.821a	d0 06		bne $8222			bne 	_RMExit
.821c	c8		iny				iny
.821d	98		tya				tya
.821e	38		sec				sec
.821f	71 30		adc ($30),y			adc 	(codePtr),y
.8221	a8		tay				tay
.8222					_RMExit:
.8222	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/run.asm

.8223					CommandRUN:
.8223	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8226	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8228	85 30		sta $30				sta 	codePtr
.822a	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.822c	85 31		sta $31				sta 	codePtr+1
.822e					RUNNewLine:
.822e	b2 30		lda ($30)			lda 	(codePtr)
.8230	f0 28		beq $825a			beq 	CRNoProgram         		; no then END.
.8232	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8234	9a		txs				txs
.8235					RUNCodePointerLine:
.8235	a0 02		ldy #$02			ldy 	#2 							; start of program
.8237					_CRIncMainLoop:
.8237	c8		iny				iny
.8238					_CRMainLoop:
.8238	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.823b	b1 30		lda ($30),y			lda 	(codePtr),y
.823d	10 10		bpl $824f			bpl 	_CRNotKeyword
.823f	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8241	b0 04		bcs $8247			bcs 	_CRIsKeyword
.8243	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8245	b0 0d		bcs $8254			bcs		_CRSyntaxError
.8247					_CRIsKeyword:
.8247	c8		iny				iny 								; consume command
.8248	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8249	aa		tax				tax 								; put in X for vector jump
.824a	20 57 82	jsr $8257			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.824d	80 e9		bra $8238			bra 	_CRMainLoop 				; and loop round
.824f					_CRNotKeyword:
.824f	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8251	f0 e4		beq $8237			beq 	_CRIncMainLoop
>8253	db						.byte 	$DB 						; causes a break in the emulator
.8254					_CRSyntaxError:
.8254	4c e3 95	jmp $95e3			jmp 	SyntaxError
.8257					_CRCallVector0:
.8257	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.825a					CRNoProgram:
.825a	4c b2 81	jmp $81b2			jmp 	EndCommand
.825d					EOLCommand:
.825d	18		clc				clc
.825e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8260	65 30		adc $30				adc 	codePtr
.8262	85 30		sta $30				sta 	codePtr
.8264	90 02		bcc $8268			bcc 	_CREExit
.8266	e6 31		inc $31				inc 	codePtr+1
.8268					_CREExit:
.8268	80 c4		bra $822e			bra 	RunNewLine
.826a					Shift1Command:
.826a	b1 30		lda ($30),y			lda 	(codePtr),y
.826c	c8		iny				iny
.826d	0a		asl a				asl 	a
.826e	aa		tax				tax
.826f	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/charcheck.asm

.90c1					CheckRightBracket:
.90c1	b1 30		lda ($30),y			lda 	(codePtr),y
.90c3	c8		iny				iny
.90c4	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.90c6	d0 0f		bne $90d7			bne 	CNAFail
.90c8	60		rts				rts
.90c9					CheckComma:
.90c9	b1 30		lda ($30),y			lda 	(codePtr),y
.90cb	c8		iny				iny
.90cc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.90ce	d0 07		bne $90d7			bne 	CNAFail
.90d0	60		rts				rts
.90d1					CheckNextA:
.90d1	d1 30		cmp ($30),y			cmp 	(codePtr),y
.90d3	d0 02		bne $90d7			bne 	CNAFail
.90d5	c8		iny				iny 								; skip character
.90d6	60		rts				rts 								; and exit
.90d7					CNAFail:
.90d7	4c e3 95	jmp $95e3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/errors.asm

.8272					ErrorHandler:
.8272	a8		tay				tay 								; find the error text
.8273	f0 42		beq $82b7			beq 	_EHEnd
.8275	a2 00		ldx #$00			ldx 	#0
.8277					_EHFind:
.8277	88		dey				dey 								; found the error text ?
.8278	f0 0a		beq $8284			beq 	_EHFound
.827a					_EHFindZero:
.827a	bd fc 95	lda $95fc,x			lda 	ErrorText,x 				; find the next error
.827d	e8		inx				inx
.827e	c9 00		cmp #$00			cmp 	#0
.8280	d0 f8		bne $827a			bne 	_EHFindZero
.8282	80 f3		bra $8277			bra 	_EHFind
.8284					_EHFound:
.8284	bd fc 95	lda $95fc,x			lda 	ErrorText,x 				; print the message
.8287	20 7d 90	jsr $907d			jsr 	EXTPrintCharacter
.828a	e8		inx				inx
.828b	bd fc 95	lda $95fc,x			lda 	ErrorText,x
.828e	d0 f4		bne $8284			bne 	_EHFound
.8290	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8292	b1 30		lda ($30),y			lda 	(codePtr),y
.8294	d0 05		bne $829b			bne 	_EHAtMsg
.8296	c8		iny				iny
.8297	b1 30		lda ($30),y			lda 	(codePtr),y
.8299	f0 17		beq $82b2			beq 	_EHCREnd
.829b					_EHAtMsg:
.829b	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.829d	a9 ba		lda #$ba			lda 	#_AtMsg & $FF
.829f	20 c4 82	jsr $82c4			jsr 	PrintStringXA
.82a2	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.82a4	b1 30		lda ($30),y			lda 	(codePtr),y
.82a6	48		pha				pha
.82a7	c8		iny				iny
.82a8	b1 30		lda ($30),y			lda 	(codePtr),y
.82aa	aa		tax				tax
.82ab	68		pla				pla
.82ac	20 1b 92	jsr $921b			jsr 	ConvertInt16 				; convert XA to string
.82af	20 c4 82	jsr $82c4			jsr 	PrintStringXA 				; and print it.
.82b2					_EHCREnd:
.82b2	a9 0d		lda #$0d			lda 	#13 						; new line
.82b4	20 7d 90	jsr $907d			jsr 	EXTPrintCharacter
.82b7					_EHEnd:
.82b7	4c 0c 80	jmp $800c			jmp 	WarmStart
>82ba	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82c2	20 00
.82c4					PrintStringXA:
.82c4	5a		phy				phy
.82c5	86 37		stx $37				stx 	zTemp0+1
.82c7	85 36		sta $36				sta 	zTemp0
.82c9	a0 00		ldy #$00			ldy 	#0
.82cb					_PSXALoop:
.82cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.82cd	f0 06		beq $82d5			beq 	_PSXAExit
.82cf	20 7d 90	jsr $907d			jsr 	EXTPrintCharacter
.82d2	c8		iny				iny
.82d3	80 f6		bra $82cb			bra 	_PSXALoop
.82d5					_PSXAExit:
.82d5	7a		ply				ply
.82d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/compare.asm

.82d7					UnaryTrue:
.82d7	fa		plx				plx
.82d8					ReturnTrue:
.82d8	a9 01		lda #$01			lda 	#1  						; set to 1
.82da	20 cf 8b	jsr $8bcf			jsr 	NSMSetByte
.82dd	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82df	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82e2	60		rts				rts
.82e3					UnaryFalse:
.82e3	fa		plx				plx
.82e4					ReturnFalse:
.82e4	4c cd 8b	jmp $8bcd			jmp 	NSMSetZero 					; set it all to zero
.82e7					BinaryCompareEqual:
.82e7	fa		plx				plx
.82e8	20 23 83	jsr $8323			jsr 	CompareBaseCode
.82eb	c9 00		cmp #$00			cmp 	#0
.82ed	f0 e9		beq $82d8			beq 	ReturnTrue
.82ef	80 f3		bra $82e4			bra 	ReturnFalse
.82f1					BinaryCompareLess:
.82f1	fa		plx				plx
.82f2	20 23 83	jsr $8323			jsr 	CompareBaseCode
.82f5	c9 ff		cmp #$ff			cmp 	#$FF
.82f7	f0 df		beq $82d8			beq 	ReturnTrue
.82f9	80 e9		bra $82e4			bra 	ReturnFalse
.82fb					BinaryCompareGreater:
.82fb	fa		plx				plx
.82fc	20 23 83	jsr $8323			jsr 	CompareBaseCode
.82ff	c9 01		cmp #$01			cmp 	#1
.8301	f0 d5		beq $82d8			beq 	ReturnTrue
.8303	80 df		bra $82e4			bra 	ReturnFalse
.8305					BinaryCompareNotEqual:
.8305	fa		plx				plx
.8306	20 23 83	jsr $8323			jsr 	CompareBaseCode
.8309	c9 00		cmp #$00			cmp 	#0
.830b	d0 cb		bne $82d8			bne 	ReturnTrue
.830d	80 d5		bra $82e4			bra 	ReturnFalse
.830f					BinaryCompareLessEqual:
.830f	fa		plx				plx
.8310	20 23 83	jsr $8323			jsr 	CompareBaseCode
.8313	c9 01		cmp #$01			cmp 	#1
.8315	d0 c1		bne $82d8			bne 	ReturnTrue
.8317	80 cb		bra $82e4			bra 	ReturnFalse
.8319					BinaryCompareGreaterEqual:
.8319	fa		plx				plx
.831a	20 23 83	jsr $8323			jsr 	CompareBaseCode
.831d	c9 ff		cmp #$ff			cmp 	#$FF
.831f	d0 b7		bne $82d8			bne 	ReturnTrue
.8321	80 c1		bra $82e4			bra 	ReturnFalse
.8323					CompareBaseCode:
.8323	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; make both values if references.
.8326	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8329	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.832c	29 10		and #$10			and 	#NSTString
.832e	d0 40		bne $8370			bne 	_CBCString
.8330	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8333	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8336	d0 3b		bne $8373			bne 	_CBCFloat
.8338	bd 00 06	lda $0600,x			lda 	NSStatus,x
.833b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.833e	29 08		and #$08			and 	#NSTFloat
.8340	d0 31		bne $8373			bne 	_CBCFloat
.8342	20 76 83	jsr $8376			jsr 	CompareFixMinusZero
.8345	e8		inx				inx
.8346	20 76 83	jsr $8376			jsr 	CompareFixMinusZero
.8349	ca		dex				dex
.834a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.834d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8350	10 0b		bpl $835d			bpl 	_CDCSameSign
.8352	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8355	30 16		bmi $836d			bmi 	_CBCLess 					; return $FF
.8357					_CBCGreater:
.8357	a9 01		lda #$01			lda 	#1
.8359	60		rts				rts
.835a					_CBCEqual:
.835a	a9 00		lda #$00			lda 	#0
.835c	60		rts				rts
.835d					_CDCSameSign:
.835d	20 85 84	jsr $8485			jsr 	SubTopTwoStack 				; unsigned subtract
.8360	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; or the mantissa together
.8363	f0 f5		beq $835a			beq 	_CBCEqual 					; -0 == 0
.8365	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8368	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.836b	10 ea		bpl $8357			bpl 	_CBCGreater
.836d					_CBCLess:
.836d	a9 ff		lda #$ff			lda 	#$FF
.836f	60		rts				rts
.8370					_CBCString:
.8370	4c dc 83	jmp $83dc			jmp 	CompareStrings
.8373					_CBCFloat:
.8373	4c 17 93	jmp $9317			jmp 	CompareFloat
.8376					CompareFixMinusZero:
.8376	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero
.8379	d0 03		bne $837e			bne 	_CFXMZNotZero
.837b	9e 00 06	stz $0600,x			stz 	NSStatus,x
.837e					_CFXMZNotZero:
.837e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/concat.asm

.837f					StringConcat:
.837f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8382	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8385	29 18		and #$18			and 	#NSBTypeMask
.8387	c9 10		cmp #$10			cmp 	#NSTString
.8389	d0 4e		bne $83d9			bne		_SCType
.838b	64 38		stz $38				stz 	zTemp1 						; counting total length
.838d	e8		inx				inx
.838e	20 ac 83	jsr $83ac			jsr 	_SCSetupZ0 					; setup for second
.8391	20 b7 83	jsr $83b7			jsr 	_SCLengthZ0 				; length for second
.8394	ca		dex				dex
.8395	20 ac 83	jsr $83ac			jsr 	_SCSetupZ0 					; setup for first
.8398	20 b7 83	jsr $83b7			jsr 	_SCLengthZ0 				; length for first
.839b	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.839d	20 5f 95	jsr $955f			jsr 	StringTempAllocate
.83a0	20 ca 83	jsr $83ca			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.83a3	e8		inx				inx
.83a4	20 ac 83	jsr $83ac			jsr 	_SCSetupZ0 					; copy second out
.83a7	20 ca 83	jsr $83ca			jsr 	_SCCopy
.83aa	ca		dex				dex
.83ab	60		rts				rts
.83ac					_SCSetupZ0:
.83ac	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.83af	85 36		sta $36				sta 	zTemp0
.83b1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b4	85 37		sta $37				sta 	zTemp0+1
.83b6	60		rts				rts
.83b7					_SCLengthZ0:
.83b7	5a		phy				phy
.83b8	a0 00		ldy #$00			ldy 	#0
.83ba					_SCLenLoop:
.83ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bc	f0 0a		beq $83c8			beq 	_SCLExit
.83be	c8		iny				iny
.83bf	e6 38		inc $38				inc 	zTemp1
.83c1	10 f7		bpl $83ba			bpl		_SCLenLoop
.83c3	a9 09		lda #$09		lda	#9
.83c5	4c 72 82	jmp $8272		jmp	ErrorHandler
.83c8					_SCLExit:
.83c8	7a		ply				ply
.83c9	60		rts				rts
.83ca					_SCCopy:
.83ca	5a		phy				phy
.83cb	a0 00		ldy #$00			ldy 	#0
.83cd					_SCCopyLoop:
.83cd	b1 36		lda ($36),y			lda 	(zTemp0),y
.83cf	f0 06		beq $83d7			beq 	_SCCExit
.83d1	20 9d 95	jsr $959d			jsr 	StringTempWrite
.83d4	c8		iny				iny
.83d5	80 f6		bra $83cd			bra 	_SCCopyLoop
.83d7					_SCCExit:
.83d7	7a		ply				ply
.83d8	60		rts				rts
.83d9					_SCType:
.83d9	4c ed 95	jmp $95ed			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/divide.asm

.90da					IntegerDivide:
.90da	fa		plx				plx
.90db	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90de	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90e1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90e2	0a		asl a				asl 	a
.90e3	10 05		bpl $90ea			bpl 	_NotRef
.90e5	48		pha				pha
.90e6	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90e9	68		pla				pla
.90ea					_NotRef:
.90ea	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90ec	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90ef	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90f2	f0 03		beq $90f7			beq 	_IntegerCode 				; if clear, then we have two integers
.90f4	4c ed 95	jmp $95ed			jmp 	TypeError 					; anything else, type mismatch.
.90f7					_IntegerCode:
.90f7	20 19 91	jsr $9119			jsr 	CheckDivideZero 			; do div zero check
.90fa	20 50 91	jsr $9150			jsr 	Int32Divide 				; do the division
.90fd	20 0d 92	jsr $920d			jsr 	CalculateSign 				; calculate result sign
.9100					NSMCopyPlusTwoToZero:
.9100	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9103	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9106	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9109	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.910c	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.910f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9112	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9115	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9118	60		rts				rts
.9119					CheckDivideZero:
.9119	e8		inx				inx
.911a	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero
.911d	f0 02		beq $9121			beq 	_CDVError
.911f	ca		dex				dex
.9120	60		rts				rts
.9121					_CDVError:
.9121	a9 03		lda #$03		lda	#3
.9123	4c 72 82	jmp $8272		jmp	ErrorHandler
.9126					IntegerModulus:
.9126	fa		plx				plx
.9127	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.912a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.912d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.912e	0a		asl a				asl 	a
.912f	10 05		bpl $9136			bpl 	_NotRef
.9131	48		pha				pha
.9132	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9135	68		pla				pla
.9136					_NotRef:
.9136	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9138	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.913b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.913e	f0 03		beq $9143			beq 	_IntegerCode 				; if clear, then we have two integers
.9140	4c ed 95	jmp $95ed			jmp 	TypeError 					; anything else, type mismatch.
.9143					_IntegerCode:
.9143	20 19 91	jsr $9119			jsr 	CheckDivideZero 			; do div zero check
.9146	20 50 91	jsr $9150			jsr 	Int32Divide 				; do the division
.9149	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.914c	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.914f	60		rts				rts
.9150					Int32Divide:
.9150	48		pha				pha 								; save AXY
.9151	5a		phy				phy
.9152	20 a4 8b	jsr $8ba4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9155	20 c9 8b	jsr $8bc9			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9158	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.915a					_I32DivideLoop:
.915a	e8		inx				inx
.915b	e8		inx				inx
.915c	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.915f	ca		dex				dex
.9160	ca		dex				dex
.9161	20 e3 8b	jsr $8be3			jsr 	NSMRotateLeft
.9164	20 90 91	jsr $9190			jsr 	DivideCheckSubtract 		; check if subtract possible
.9167	90 03		bcc $916c			bcc 	_I32DivideNoCarryIn
.9169	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.916c					_I32DivideNoCarryIn:
.916c	88		dey				dey 								; loop round till division completed.
.916d	d0 eb		bne $915a			bne 	_I32DivideLoop
.916f	7a		ply				ply 								; restore AXY and exit
.9170	68		pla				pla
.9171	60		rts				rts
.9172					Int32ShiftDivide:
.9172	48		pha				pha 								; save AY
.9173	5a		phy				phy
.9174	e8		inx				inx 								; clear S[X+2]
.9175	e8		inx				inx
.9176	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero
.9179	ca		dex				dex
.917a	ca		dex				dex
.917b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.917d					_I32SDLoop:
.917d	20 90 91	jsr $9190			jsr 	DivideCheckSubtract 		; check if subtract possible
.9180	e8		inx				inx
.9181	e8		inx				inx
.9182	20 e3 8b	jsr $8be3			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9185	ca		dex				dex
.9186	ca		dex				dex
.9187	20 e3 8b	jsr $8be3			jsr 	NSMRotateLeft
.918a	88		dey				dey 	 							; do 31 times
.918b	d0 f0		bne $917d			bne 	_I32SDLoop
.918d	7a		ply				ply 								; restore AY and exit
.918e	68		pla				pla
.918f	60		rts				rts
.9190					DivideCheckSubtract:
.9190	20 85 84	jsr $8485			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9193	b0 04		bcs $9199			bcs 	_DCSExit 					; if carry set, then could do, exit
.9195	20 5f 84	jsr $845f			jsr 	AddTopTwoStack 				; add it back in
.9198	18		clc				clc 								; and return False
.9199					_DCSExit:
.9199	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/multiply.asm

.919a					MulInteger:
.919a	fa		plx				plx
.919b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.919e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.91a1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91a2	0a		asl a				asl 	a
.91a3	10 05		bpl $91aa			bpl 	_NotRef
.91a5	48		pha				pha
.91a6	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91a9	68		pla				pla
.91aa					_NotRef:
.91aa	0a		asl a				asl 	a 							; put MSB of type into A:7
.91ab	30 0b		bmi $91b8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.91ad	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91b0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.91b3	f0 06		beq $91bb			beq 	_IntegerCode 				; if clear, then we have two integers
.91b5	4c ee 93	jmp $93ee			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.91b8					_StringData:
.91b8	4c f7 95	jmp $95f7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.91bb					_IntegerCode:
.91bb	20 c8 91	jsr $91c8			jsr 	MultiplyShort
.91be	c9 00		cmp #$00			cmp 	#0
.91c0	f0 05		beq $91c7			beq 	_MIExit
.91c2	a9 04		lda #$04		lda	#4
.91c4	4c 72 82	jmp $8272		jmp	ErrorHandler
.91c7					_MIExit:
.91c7	60		rts				rts
.91c8					MultiplyShort:
.91c8	5a		phy				phy 								; save Y
.91c9	20 a4 8b	jsr $8ba4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.91cc	20 c9 8b	jsr $8bc9			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.91cf	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.91d1					_I32MLoop:
.91d1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.91d4	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.91d7	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.91da	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.91dd	f0 28		beq $9207			beq 	_I32MExit 					; exit if zero
.91df	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.91e2	29 01		and #$01			and 	#1
.91e4	f0 0e		beq $91f4			beq 	_I32MNoAdd
.91e6	20 5f 84	jsr $845f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.91e9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.91ec	10 06		bpl $91f4			bpl 	_I32MNoAdd
.91ee					_I32ShiftRight:
.91ee	20 f0 8b	jsr $8bf0			jsr 	NSMShiftRight 				; shift S[X] right
.91f1	c8		iny				iny 								; increment shift count
.91f2	80 0a		bra $91fe			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.91f4					_I32MNoAdd:
.91f4	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.91f7	70 f5		bvs $91ee			bvs 	_I32ShiftRight 				; instead.
.91f9	e8		inx				inx
.91fa	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.91fd	ca		dex				dex
.91fe					_I32MShiftUpper:
.91fe	e8		inx				inx 								; shift S[X+2] right
.91ff	e8		inx				inx
.9200	20 f0 8b	jsr $8bf0			jsr 	NSMShiftRight
.9203	ca		dex				dex
.9204	ca		dex				dex
.9205	80 ca		bra $91d1			bra 	_I32MLoop 					; try again.
.9207					_I32MExit:
.9207	20 0d 92	jsr $920d			jsr 	CalculateSign
.920a	98		tya				tya 								; shift in A
.920b	7a		ply				ply 								; restore Y and exit
.920c	60		rts				rts
.920d					CalculateSign:
.920d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9210	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9213	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9216	0a		asl a				asl 	a 							; shift bit 7 into carry
.9217	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.921a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/scompare.asm

.83dc					CompareStrings:
.83dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83df	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83e2	29 10		and #$10			and 	#NSBIsString
.83e4	f0 2c		beq $8412			beq 	_CSTypeError
.83e6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83e9	85 36		sta $36				sta 	zTemp0
.83eb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83ee	85 37		sta $37				sta 	zTemp0+1
.83f0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83f3	85 38		sta $38				sta 	zTemp1
.83f5	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83f8	85 39		sta $39				sta 	zTemp1+1
.83fa	5a		phy				phy 								; save Y so we can access strings
.83fb	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83fd					_CSLoop:
.83fd	c8		iny				iny
.83fe	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8400	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8402	d0 06		bne $840a			bne 	_CSDifferent
.8404	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8406	d0 f5		bne $83fd			bne 	_CSLoop 					; still comparing
.8408					_CSExit:
.8408	7a		ply				ply 								; reached end, return zero in A from EOS
.8409	60		rts				rts
.840a					_CSDifferent:
.840a	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.840c	90 fa		bcc $8408			bcc		_CSExit
.840e	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8410	80 f6		bra $8408			bra 	_CSExit
.8412					_CSTypeError:
.8412	4c ed 95	jmp $95ed			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/shifts.asm

.8415					ShiftLeft:
.8415	38		sec				sec
.8416	80 01		bra $8419			bra 	ShiftMain
.8418					ShiftRight:
.8418	18		clc				clc
.8419					ShiftMain:
.8419	fa		plx				plx 								; restore X
.841a	08		php				php 								; save direction
.841b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.841e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8421	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8422	0a		asl a				asl 	a
.8423	10 05		bpl $842a			bpl 	_NotRef
.8425	48		pha				pha
.8426	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8429	68		pla				pla
.842a					_NotRef:
.842a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.842c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.842f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8432	f0 03		beq $8437			beq 	_IntegerCode 				; if clear, then we have two integers
.8434	4c ed 95	jmp $95ed			jmp 	TypeError 					; anything else, type mismatch.
.8437					_IntegerCode:
.8437	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.843a	29 e0		and #$e0			and 	#$E0
.843c	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.843f	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8442	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8445	d0 13		bne $845a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8447					_SMLoop:
.8447	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.844a	30 11		bmi $845d			bmi 	_SMExit 					; exit if done.
.844c	28		plp				plp 								; restore direcition setting
.844d	08		php				php
.844e	90 05		bcc $8455			bcc 	_SMRight
.8450	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; shift left if CS
.8453	80 f2		bra $8447			bra 	_SMLoop
.8455					_SMRight:
.8455	20 f0 8b	jsr $8bf0			jsr 	NSMShiftRight 				; shift right if CC
.8458	80 ed		bra $8447			bra 	_SMLoop
.845a					_SMExit0:
.845a	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero 					; return zero.
.845d					_SMExit:
.845d	28		plp				plp 								; throw direction
.845e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/simple.asm

.845f					AddTopTwoStack:
.845f	18		clc				clc
.8460	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8463	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8466	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8469	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.846c	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.846f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8472	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8475	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8478	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.847b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.847e	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8481	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8484	60		rts				rts
.8485					SubTopTwoStack:
.8485	38		sec				sec
.8486	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8489	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.848c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.848f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8492	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8495	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8498	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.849b	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.849e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84a1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84a4	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.84a7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84aa	60		rts				rts
.84ab					AddInteger:
.84ab	fa		plx				plx
.84ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84af	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84b2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84b3	0a		asl a				asl 	a
.84b4	10 05		bpl $84bb			bpl 	_NotRef
.84b6	48		pha				pha
.84b7	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84ba	68		pla				pla
.84bb					_NotRef:
.84bb	0a		asl a				asl 	a 							; put MSB of type into A:7
.84bc	30 0b		bmi $84c9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84be	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84c1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84c4	f0 06		beq $84cc			beq 	_IntegerCode 				; if clear, then we have two integers
.84c6	4c 76 92	jmp $9276			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84c9					_StringData:
.84c9	4c 7f 83	jmp $837f			jmp 	StringConcat							; at least one string - don't know both are strings.
.84cc					_IntegerCode:
.84cc					AddCode:
.84cc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84cf	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84d2	10 8b		bpl $845f			bpl 	AddTopTwoStack
.84d4	20 85 84	jsr $8485			jsr 	SubTopTwoStack 				; do a physical subtraction
.84d7	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84da	10 09		bpl $84e5			bpl 	_AddExit
.84dc	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84df	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84e2	20 82 8b	jsr $8b82			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84e5					_AddExit:
.84e5	60		rts				rts
.84e6					SubInteger:
.84e6	fa		plx				plx
.84e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84ea	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84ed	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84ee	0a		asl a				asl 	a
.84ef	10 05		bpl $84f6			bpl 	_NotRef
.84f1	48		pha				pha
.84f2	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84f5	68		pla				pla
.84f6					_NotRef:
.84f6	0a		asl a				asl 	a 							; put MSB of type into A:7
.84f7	30 0b		bmi $8504			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84f9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84fc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ff	f0 06		beq $8507			beq 	_IntegerCode 				; if clear, then we have two integers
.8501	4c 7b 92	jmp $927b			jmp 	FloatingPointSub 							; otherwise at least one float.
.8504					_StringData:
.8504	4c f7 95	jmp $95f7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8507					_IntegerCode:
.8507	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.850a	49 80		eor #$80			eor 	#$80
.850c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.850f	80 bb		bra $84cc			bra 	AddCode 					; and do the same code as add.
.8511					AndInteger:
.8511	fa		plx				plx
.8512	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8515	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8518	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8519	0a		asl a				asl 	a
.851a	10 05		bpl $8521			bpl 	_NotRef
.851c	48		pha				pha
.851d	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8520	68		pla				pla
.8521					_NotRef:
.8521	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8523	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8526	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8529	f0 03		beq $852e			beq 	_IntegerCode 				; if clear, then we have two integers
.852b	4c ed 95	jmp $95ed			jmp 	TypeError 					; anything else, type mismatch.
.852e					_IntegerCode:
.852e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8531	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8534	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8537	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.853a	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.853d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8540	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8543	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8546	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8549	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.854c	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.854f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8552	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8555	60		rts				rts
.8556					OraInteger:
.8556	fa		plx				plx
.8557	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.855a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.855d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.855e	0a		asl a				asl 	a
.855f	10 05		bpl $8566			bpl 	_NotRef
.8561	48		pha				pha
.8562	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8565	68		pla				pla
.8566					_NotRef:
.8566	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8568	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.856b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.856e	f0 03		beq $8573			beq 	_IntegerCode 				; if clear, then we have two integers
.8570	4c ed 95	jmp $95ed			jmp 	TypeError 					; anything else, type mismatch.
.8573					_IntegerCode:
.8573	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8576	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8579	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.857c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.857f	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8582	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8585	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8588	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.858b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.858e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8591	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8594	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8597	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.859a	60		rts				rts
.859b					EorInteger:
.859b	fa		plx				plx
.859c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.859f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85a2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85a3	0a		asl a				asl 	a
.85a4	10 05		bpl $85ab			bpl 	_NotRef
.85a6	48		pha				pha
.85a7	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85aa	68		pla				pla
.85ab					_NotRef:
.85ab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85ad	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85b0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85b3	f0 03		beq $85b8			beq 	_IntegerCode 				; if clear, then we have two integers
.85b5	4c ed 95	jmp $95ed			jmp 	TypeError 					; anything else, type mismatch.
.85b8					_IntegerCode:
.85b8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85bb	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85be	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85c1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85c4	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85c7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85ca	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85cd	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85d0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85d3	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85d6	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85d9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85dc	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/tostring.asm

.921b					ConvertInt16:
.921b	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.921e	8e 10 06	stx $0610			stx 	NSMantissa1
.9221	9c 18 06	stz $0618			stz 	NSMantissa2
.9224	9c 20 06	stz $0620			stz 	NSMantissa3
.9227	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.922a	a2 00		ldx #$00			ldx 	#0 							; stack level
.922c	a9 0a		lda #$0a			lda 	#10 						; base
.922e	80 00		bra $9230			bra 	ConvertInt32
.9230					ConvertInt32:
.9230	5a		phy				phy
.9231	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9233	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9236	10 08		bpl $9240			bpl 	_CI32NotNeg
.9238	48		pha				pha
.9239	a9 2d		lda #$2d			lda 	#'-'
.923b	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.923e	c8		iny				iny
.923f	68		pla				pla
.9240					_CI32NotNeg:
.9240	20 4e 92	jsr $924e			jsr 	_CI32DivideConvert 			; recursive conversion
.9243	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9245	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9248	7a		ply				ply
.9249	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.924b	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.924d	60		rts				rts
.924e					_CI32DivideConvert:
.924e	e8		inx				inx 								; write to next slot up
.924f	20 cf 8b	jsr $8bcf			jsr 	NSMSetByte
.9252	ca		dex				dex
.9253	20 50 91	jsr $9150			jsr 	Int32Divide 				; divide
.9256	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9259	48		pha				pha
.925a	20 00 91	jsr $9100			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.925d	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; is it zero ?
.9260	f0 06		beq $9268			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9262	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9265	20 4e 92	jsr $924e			jsr 	_CI32DivideConvert 			; and recusrively call.
.9268					_CI32NoRecurse:
.9268	68		pla				pla 								; remainder
.9269	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.926b	90 02		bcc $926f			bcc 	_CI32NotHex
.926d	69 26		adc #$26			adc 	#6+32
.926f					_CI32NotHex:
.926f	69 30		adc #$30			adc 	#48
.9271	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9274	c8		iny				iny
.9275	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/expression.asm


;******  Processing file: ./core/expressions/../../generated/precedence.dat

.85e0					PrecedenceLevel:
>85e0	04					.byte	 4	; $00 <<
>85e1	02					.byte	 2	; $01 <=
>85e2	02					.byte	 2	; $02 <>
>85e3	00					.byte	 0	; $03 !!3
>85e4	00					.byte	 0	; $04 ><
>85e5	02					.byte	 2	; $05 >=
>85e6	04					.byte	 4	; $06 >>
>85e7	00					.byte	 0	; $07 !!7
>85e8	00					.byte	 0	; $08 !!8
>85e9	00					.byte	 0	; $09 !!9
>85ea	00					.byte	 0	; $0a !!10
>85eb	00					.byte	 0	; $0b !!11
>85ec	00					.byte	 0	; $0c !!12
>85ed	00					.byte	 0	; $0d !!13
>85ee	00					.byte	 0	; $0e !!14
>85ef	00					.byte	 0	; $0f !!15
>85f0	00					.byte	 0	; $10 @
>85f1	00					.byte	 0	; $11 !!17
>85f2	00					.byte	 0	; $12 !!18
>85f3	00					.byte	 0	; $13 [
>85f4	04					.byte	 4	; $14 \
>85f5	00					.byte	 0	; $15 ]
>85f6	01					.byte	 1	; $16 ^
>85f7	00					.byte	 0	; $17 _
>85f8	00					.byte	 0	; $18 `
>85f9	00					.byte	 0	; $19 !!25
>85fa	00					.byte	 0	; $1a !!26
>85fb	00					.byte	 0	; $1b {
>85fc	01					.byte	 1	; $1c |
>85fd	00					.byte	 0	; $1d }
>85fe	00					.byte	 0	; $1e ~
>85ff	00					.byte	 0	; $1f [7m<7F>[m
>8600	00					.byte	 0	; $20
>8601	05					.byte	 5	; $21 !
>8602	00					.byte	 0	; $22 "
>8603	00					.byte	 0	; $23 #
>8604	05					.byte	 5	; $24 $
>8605	04					.byte	 4	; $25 %
>8606	01					.byte	 1	; $26 &
>8607	00					.byte	 0	; $27 '
>8608	00					.byte	 0	; $28 (
>8609	00					.byte	 0	; $29 )
>860a	04					.byte	 4	; $2a *
>860b	03					.byte	 3	; $2b +
>860c	00					.byte	 0	; $2c ,
>860d	03					.byte	 3	; $2d -
>860e	00					.byte	 0	; $2e .
>860f	04					.byte	 4	; $2f /
>8610	00					.byte	 0	; $30 0
>8611	00					.byte	 0	; $31 1
>8612	00					.byte	 0	; $32 2
>8613	00					.byte	 0	; $33 3
>8614	00					.byte	 0	; $34 4
>8615	00					.byte	 0	; $35 5
>8616	00					.byte	 0	; $36 6
>8617	00					.byte	 0	; $37 7
>8618	00					.byte	 0	; $38 8
>8619	00					.byte	 0	; $39 9
>861a	00					.byte	 0	; $3a :
>861b	00					.byte	 0	; $3b ;
>861c	02					.byte	 2	; $3c <
>861d	02					.byte	 2	; $3d =
>861e	02					.byte	 2	; $3e >
>861f	05					.byte	 5	; $3f ?

;******  Return to file: ./core/expressions/expression.asm

.8620					EvaluateExpressionAt0:
.8620	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8622					EvaluateExpression:
.8622	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8624					EvaluateExpressionAtPrecedence:
.8624	48		pha				pha 								; save precedence level
.8625	20 20 88	jsr $8820			jsr 	EvaluateTerm 				; evaluate term into level X.
.8628	68		pla				pla 								; restore precedence level.
.8629					_EXPRLoop:
.8629	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.862b	b1 30		lda ($30),y			lda 	(codePtr),y
.862d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.862f	b0 25		bcs $8656			bcs 	_EXPRExit
.8631	da		phx				phx 								; read the operator precedence
.8632	aa		tax				tax
.8633	bd e0 85	lda $85e0,x			lda 	PrecedenceLevel,x
.8636	fa		plx				plx
.8637	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8639	f0 1b		beq $8656			beq 	_EXPRExit
.863b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.863d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.863f	c5 37		cmp $37				cmp 	zTemp0+1
.8641	b0 13		bcs $8656			bcs		_EXPRExit 					; if current >= operator exit
.8643	48		pha				pha 								; save current precedence.
.8644	b1 30		lda ($30),y			lda 	(codePtr),y
.8646	c8		iny				iny
.8647	48		pha				pha
.8648	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.864a	e8		inx				inx 								; work out the right hand side.
.864b	20 24 86	jsr $8624			jsr 	EvaluateExpressionAtPrecedence
.864e	ca		dex				dex
.864f	68		pla				pla 								; get operator, call the code.
.8650	20 59 86	jsr $8659			jsr 	_EXPRCaller
.8653	68		pla				pla 								; restore precedence level
.8654	80 d3		bra $8629			bra 	_EXPRLoop 					; and go round.
.8656					_EXPRExit:
.8656	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8658	60		rts				rts
.8659					_EXPRCaller:
.8659	da		phx				phx 								; save on stack, first thing is to restore it
.865a	0a		asl a				asl 	a 							; double so can use vectors into X
.865b	aa		tax				tax
.865c	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/addsub.asm

.9276					FloatingPointAdd:
.9276	20 17 94	jsr $9417			jsr 	FloatPrepare 				; prepare for floats
.9279	80 0b		bra $9286			bra 	FloatAdd
.927b					FloatingPointSub:
.927b	20 17 94	jsr $9417			jsr 	FloatPrepare 				; prepare for floats
.927e					FloatSubtract:
.927e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9281	49 80		eor #$80			eor 	#$80
.9283	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9286					FloatAdd:
.9286	48		pha				pha
.9287	5a		phy				phy
.9288	20 28 94	jsr $9428			jsr 	NSNormalise 				; normalise S[X]
.928b	f0 54		beq $92e1			beq 	_FAReturn1
.928d	e8		inx				inx 								; normalise S[X+1]
.928e	20 28 94	jsr $9428			jsr 	NSNormalise
.9291	ca		dex				dex
.9292	c9 00		cmp #$00			cmp 	#0
.9294	f0 6f		beq $9305			beq 	_FAExit 					; if so, just return A
.9296	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9299	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.929c	f0 1b		beq $92b9			beq 	_FAExponentsEqual
.929e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.92a1	a8		tay				tay
.92a2	38		sec				sec 								; do a signed comparison of the exponents.
.92a3	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.92a6	50 02		bvc $92aa			bvc 	_FANoSignedChange
.92a8	49 80		eor #$80			eor 	#$80
.92aa					_FANoSignedChange:
.92aa	29 80		and #$80			and 	#$80
.92ac	10 03		bpl $92b1			bpl 	_FAHaveMax
.92ae	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.92b1					_FAHaveMax:
.92b1	20 08 93	jsr $9308			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.92b4	e8		inx				inx
.92b5	20 08 93	jsr $9308			jsr 	_FAShiftToExponent
.92b8	ca		dex				dex
.92b9					_FAExponentsEqual:
.92b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.92bc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.92bf	30 10		bmi $92d1			bmi 	_FADifferentSigns
.92c1	20 5f 84	jsr $845f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.92c4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.92c7	10 3c		bpl $9305			bpl 	_FAExit 					; if no, we are done.
.92c9	20 f0 8b	jsr $8bf0			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.92cc	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.92cf	80 34		bra $9305			bra 	_FAExit
.92d1					_FADifferentSigns:
.92d1	20 85 84	jsr $8485			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.92d4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.92d7	10 2c		bpl $9305			bpl 	_FAExit 					; if no, we are done.
.92d9	20 79 8b	jsr $8b79			jsr 	NSMNegate 					; netate result
.92dc	20 82 8b	jsr $8b82			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.92df	80 24		bra $9305			bra 	_FAExit
.92e1					_FAReturn1:
.92e1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.92e4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92e7	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.92ea	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92ed	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.92f0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92f3	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.92f6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92f9	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.92fc	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92ff	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9302	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9305					_FAExit:
.9305	7a		ply				ply
.9306	68		pla				pla
.9307	60		rts				rts
.9308					_FAShiftToExponent:
.9308					_FAShiftToExponent2:
.9308	98		tya				tya 								; compare Y to exponent
.9309	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.930c	f0 08		beq $9316			beq 	_FASEExit 					; exit if so.
.930e	20 f0 8b	jsr $8bf0			jsr 	NSMShiftRight	 			; shift the mantissa right
.9311	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9314	80 f2		bra $9308			bra 	_FAShiftToExponent2
.9316					_FASEExit:
.9316	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/compare.asm

.9317					CompareFloat:
.9317	20 7e 92	jsr $927e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.931a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.931d	29 f8		and #$f8			and 	#$F8
.931f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9322	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9325	f0 09		beq $9330			beq 	_FCExit 					; zero, so approximately identical
.9327	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9329	3c 00 06	bit $0600,x			bit 	NSStatus,x
.932c	10 02		bpl $9330			bpl 	_FCExit
.932e					_FCNegative:
.932e	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9330					_FCExit:
.9330	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/divide.asm

.9331					FDivideCommand:
.9331	fa		plx				plx	 								; restore stack position
.9332	20 17 94	jsr $9417			jsr 	FloatPrepare 				; prepare for floats
.9335					FloatDivide:
.9335	48		pha				pha
.9336	e8		inx				inx
.9337	20 28 94	jsr $9428			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.933a	ca		dex				dex
.933b	c9 00		cmp #$00			cmp 	#0
.933d	f0 20		beq $935f			beq 	_FDZero
.933f	20 28 94	jsr $9428			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9342	f0 19		beq $935d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9344	20 72 91	jsr $9172			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9347	20 00 91	jsr $9100			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.934a	20 28 94	jsr $9428			jsr		NSNormalise 				; renormalise
.934d	20 0d 92	jsr $920d			jsr 	CalculateSign 				; calculate result sign
.9350	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9353	38		sec				sec
.9354	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9357	38		sec				sec
.9358	e9 1e		sbc #$1e			sbc 	#30
.935a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.935d					_FDExit:
.935d	68		pla				pla
.935e	60		rts				rts
.935f					_FDZero:
.935f	a9 03		lda #$03		lda	#3
.9361	4c 72 82	jmp $8272		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/fractional.asm

.9364					FloatFractionalPart:
.9364	5a		phy				phy
.9365	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9368	29 7f		and #$7f			and 	#$7F
.936a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.936d	20 28 94	jsr $9428			jsr 	NSNormalise
.9370	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9373	38		sec				sec
.9374	e9 e0		sbc #$e0			sbc 	#$E0
.9376	90 31		bcc $93a9			bcc 	_FFPExit 					; already fractional
.9378	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.937a	b0 2a		bcs $93a6			bcs 	_FFPZero
.937c	a8		tay				tay 								; put count to do in Y
.937d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9380	20 ab 93	jsr $93ab			jsr 	_FFPPartial
.9383	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9386	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9389	20 ab 93	jsr $93ab			jsr 	_FFPPartial
.938c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.938f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9392	20 ab 93	jsr $93ab			jsr 	_FFPPartial
.9395	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9398	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.939b	20 ab 93	jsr $93ab			jsr 	_FFPPartial
.939e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93a1	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; zeroed check.
.93a4	d0 03		bne $93a9			bne 	_FFPExit
.93a6					_FFPZero:
.93a6	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero
.93a9					_FFPExit:
.93a9	7a		ply				ply
.93aa	60		rts				rts
.93ab					_FFPPartial:
.93ab	c0 00		cpy #$00			cpy 	#0 							; no more to do
.93ad	f0 17		beq $93c6			beq 	_FFFPPExit
.93af	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.93b1	b0 0c		bcs $93bf			bcs 	_FFFPPWholeByte
.93b3	5a		phy				phy
.93b4					_FFFPPLeft:
.93b4	0a		asl a				asl 	a
.93b5	88		dey				dey
.93b6	d0 fc		bne $93b4			bne 	_FFFPPLeft
.93b8	7a		ply				ply
.93b9					_FFFPPRight:
.93b9	4a		lsr a				lsr 	a
.93ba	88		dey				dey
.93bb	d0 fc		bne $93b9			bne 	_FFFPPRight
.93bd	80 07		bra $93c6			bra 	_FFFPPExit
.93bf					_FFFPPWholeByte:
.93bf	98		tya				tya 								; subtract 8 from count
.93c0	38		sec				sec
.93c1	e9 08		sbc #$08			sbc 	#8
.93c3	a8		tay				tay
.93c4	a9 00		lda #$00			lda 	#0 							; and clear all
.93c6					_FFFPPExit:
.93c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/integer.asm

.93c7					FloatIntegerPart:
.93c7	48		pha				pha
.93c8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.93cb	f0 1f		beq $93ec			beq 	_FIPExit 					; if so do nothing
.93cd	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; is it zero ?
.93d0	f0 17		beq $93e9			beq 	_FIPZero 					; if so return zero.
.93d2	20 28 94	jsr $9428			jsr 	NSNormalise 				; normalise
.93d5	f0 12		beq $93e9			beq 	_FIPZero 					; normalised to zero, exit zero
.93d7					_FIPShift:
.93d7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.93da	10 08		bpl $93e4			bpl 	_FIPCheckZero
.93dc	20 f0 8b	jsr $8bf0			jsr 	NSMShiftRight 				; shift mantissa right
.93df	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.93e2	80 f3		bra $93d7			bra 	_FIPShift
.93e4					_FIPCheckZero:
.93e4	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; avoid -0 problem
.93e7	d0 03		bne $93ec			bne 	_FIPExit 					; set to zero if mantissa zero.
.93e9					_FIPZero:
.93e9	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero
.93ec					_FIPExit:
.93ec	68		pla				pla
.93ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/multiply.asm

.93ee					FloatingPointMultiply:
.93ee	20 17 94	jsr $9417			jsr 	FloatPrepare 				; prepare for floats
.93f1					FloatMultiply:
.93f1	48		pha				pha
.93f2	20 28 94	jsr $9428			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93f5	f0 1b		beq $9412			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93f7	e8		inx				inx
.93f8	20 28 94	jsr $9428			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93fb	ca		dex				dex
.93fc	c9 00		cmp #$00			cmp 	#0
.93fe	f0 0f		beq $940f			beq 	_FDSetZero
.9400	20 c8 91	jsr $91c8			jsr 	MultiplyShort 				; calculate the result.
.9403	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9406	18		clc				clc
.9407	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.940a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.940d	80 03		bra $9412			bra 	_FDExit
.940f					_FDSetZero:
.940f	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero 					; return 0
.9412					_FDExit:
.9412	20 28 94	jsr $9428			jsr 	NSNormalise 				; normalise the result
.9415	68		pla				pla
.9416	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/utility.asm

.9417					FloatPrepare:
.9417	20 5f 86	jsr $865f			jsr 	DereferenceTopTwo 			; dereference the top two values
.941a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.941d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9420	29 10		and #$10			and 	#NSBIsString
.9422	d0 01		bne $9425			bne 	_FDType
.9424	60		rts				rts
.9425					_FDType:
.9425	4c ed 95	jmp $95ed			jmp 	TypeError
.9428					NSNormalise:
.9428	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.942b	29 80		and #$80			and 	#$80
.942d	09 08		ora #$08			ora 	#NSTFloat
.942f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9432	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; if zero exit
.9435	d0 09		bne $9440			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9437	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.943a	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.943d	a9 00		lda #$00			lda 	#0 							; set Z flag
.943f	60		rts				rts
.9440					_NSNormaliseOptimise:
.9440	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9443	d0 22		bne $9467			bne 	_NSNormaliseLoop
.9445	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9448	30 1d		bmi $9467			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.944a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.944d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9450	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9453	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9456	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9459	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.945c	bd 28 06	lda $0628,x			lda 	NSExponent,x
.945f	38		sec				sec
.9460	e9 08		sbc #$08			sbc 	#8
.9462	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9465	80 d9		bra $9440			bra 	_NSNormaliseOptimise
.9467					_NSNormaliseLoop:
.9467	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.946a	70 08		bvs $9474			bvs 	_NSNExit 					; exit if so with Z flag clear
.946c	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; shift mantissa left
.946f	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9472	80 f3		bra $9467			bra 	_NSNormaliseLoop
.9474					_NSNExit:
.9474	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9476	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/dereference.asm

.865f					DereferenceTopTwo:
.865f	e8		inx				inx
.8660	20 64 86	jsr $8664			jsr 	Dereference 				; deref x+1
.8663	ca		dex				dex  								; falls through to deref x
.8664					Dereference:
.8664	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8667	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8669	f0 57		beq $86c2			beq 	_DRFExit 					; not a reference
.866b	5a		phy				phy
.866c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.866f	85 36		sta $36				sta 	zTemp0
.8671	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8674	85 37		sta $37				sta 	zTemp0+1
.8676	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8679	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.867b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.867e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8681	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8683	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8685	f0 0f		beq $8696			beq 	_DRFDereferenceTwo
.8687	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8689	f0 39		beq $86c4			beq 	_DRFFull
.868b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.868e	29 03		and #$03			and 	#3
.8690	f0 32		beq $86c4			beq 	_DRFFull 					; the whole word
.8692	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8694	f0 07		beq $869d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8696					_DRFDereferenceTwo:
.8696	a0 01		ldy #$01			ldy 	#1
.8698	b1 36		lda ($36),y			lda 	(zTemp0),y
.869a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.869d					_DRFClear23:
.869d	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.86a0	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.86a3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.86a6	29 18		and #$18			and 	#NSBTypeMask
.86a8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86ab	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.86ad	d0 12		bne $86c1			bne 	_DRFNotString
.86af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.86b2	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.86b5	d0 0a		bne $86c1			bne 	_DRFNotString
.86b7	a9 c3		lda #$c3			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.86b9	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.86bc	a9 86		lda #$86			lda 	#_DRFNullString >> 8
.86be	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.86c1					_DRFNotString
.86c1	7a		ply				ply 								; restore Y and exit
.86c2					_DRFExit:
.86c2	60		rts				rts
.86c3					_DRFNullString:
>86c3	00						.byte 	0
.86c4					_DRFFull:
.86c4	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.86c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.86c8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86cb	c8		iny				iny
.86cc	b1 36		lda ($36),y			lda 	(zTemp0),y
.86ce	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86d1	c8		iny				iny
.86d2	b1 36		lda ($36),y			lda 	(zTemp0),y
.86d4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86d7	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.86da	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.86dd	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.86df	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.86e2	f0 06		beq $86ea			beq 	_DRFNoExponent
.86e4	c8		iny				iny 								; if not, read the exponent as well.
.86e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.86e7	9d 28 06	sta $0628,x			sta 	NSExponent,x
.86ea					_DRFNoExponent:
.86ea	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.86ed	10 0d		bpl $86fc			bpl 	_DRFExit2 					; if not, then exit.
.86ef	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.86f1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86f4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.86f7	09 80		ora #$80			ora 	#NSBIsNegative
.86f9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86fc					_DRFExit2:
.86fc	7a		ply				ply
.86fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.86fe					EncodeNumberStart:
.86fe	38		sec				sec
.86ff	80 01		bra $8702			bra 	EncodeNumberContinue+1
.8701					EncodeNumberContinue:
.8701	18		clc				clc
.8702					EncodeNumber:
.8702	08		php				php 								; save reset.
.8703	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8705	f0 12		beq $8719			beq 	_ENIsOkay
.8707	c9 30		cmp #$30			cmp 	#"0"
.8709	90 04		bcc $870f			bcc 	_ENBadNumber
.870b	c9 3a		cmp #$3a			cmp 	#"9"+1
.870d	90 0a		bcc $8719			bcc 	_ENIsOkay
.870f					_ENBadNumber:
.870f	28		plp				plp 								; throw saved reset
.8710	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8713	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8715	f0 7e		beq $8795			beq 	_ENConstructFinal
.8717					_ENFail:
.8717	18		clc				clc 								; not allowed
.8718	60		rts				rts
.8719					_ENIsOkay:
.8719	28		plp				plp 								; are we restarting
.871a	90 15		bcc $8731			bcc 	_ENNoRestart
.871c					_ENStartEncode:
.871c	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.871e	f0 0c		beq $872c			beq 	_ENFirstDP
.8720	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8722	20 cf 8b	jsr $8bcf			jsr 	NSMSetByte
.8725	a9 01		lda #$01			lda 	#ESTA_Low
.8727					_ENExitChange:
.8727	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.872a	38		sec				sec
.872b	60		rts				rts
.872c					_ENFirstDP:
.872c	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero 					; clear integer part
.872f	80 3f		bra $8770			bra 	_ESTASwitchFloat			; go straight to float and exi
.8731					_ENNoRestart:
.8731	48		pha				pha 								; save on stack.
.8732	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8735	c9 01		cmp #$01			cmp 	#ESTA_Low
.8737	f0 09		beq $8742			beq  	_ESTALowState
.8739	c9 02		cmp #$02			cmp 	#ESTA_High
.873b	f0 29		beq $8766			beq 	_ESTAHighState
.873d	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.873f	f0 3b		beq $877c			beq 	_ESTADecimalState
>8741	db						.byte 	$DB 						; causes a break in the emulator
.8742					_ESTALowState:
.8742	68		pla				pla 								; get value back
.8743	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8745	f0 29		beq $8770			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8747	29 0f		and #$0f			and 	#15 						; make digit
.8749	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.874c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.874f	0a		asl a				asl 	a
.8750	0a		asl a				asl 	a
.8751	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8754	0a		asl a				asl 	a
.8755	6d 06 07	adc $0706			adc 	DigitTemp
.8758	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.875b	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.875d	90 05		bcc $8764			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.875f	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8761	8d 05 07	sta $0705			sta 	EncodeState
.8764					_ESTANoSwitch:
.8764	38		sec				sec
.8765	60		rts				rts
.8766					_ESTAHighState:
.8766	68		pla				pla 								; get value back
.8767	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8769	f0 05		beq $8770			beq 	_ESTASwitchFloat
.876b	20 cf 87	jsr $87cf			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.876e	38		sec				sec
.876f	60		rts				rts
.8770					_ESTASwitchFloat:
.8770	9c 07 07	stz $0707			stz 	DecimalCount
.8773	e8		inx				inx 								; zero the decimal additive.
.8774	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero
.8777	ca		dex				dex
.8778	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.877a	80 ab		bra $8727			bra 	_ENExitChange
.877c					_ESTADecimalState:
.877c	68		pla				pla 								; digit.
.877d	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.877f	f0 96		beq $8717			beq 	_ENFail
.8781	e8		inx				inx 								; put digit into fractional part of X+1
.8782	20 cf 87	jsr $87cf			jsr 	ESTAShiftDigitIntoMantissa
.8785	ca		dex				dex
.8786	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8789	ad 07 07	lda $0707			lda 	DecimalCount
.878c	c9 0b		cmp #$0b			cmp 	#11
.878e	f0 02		beq $8792			beq 	_ESTADSFail
.8790	38		sec				sec
.8791	60		rts				rts
.8792					_ESTADSFail:
.8792	4c e8 95	jmp $95e8			jmp 	RangeError
.8795					_ENConstructFinal:
.8795	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8798	f0 33		beq $87cd			beq 	_ENCFExit 					; no decimals
.879a	5a		phy				phy
.879b	0a		asl a				asl 	a 							; x 4 and CLC
.879c	0a		asl a				asl 	a
.879d	6d 07 07	adc $0707			adc 	DecimalCount
.87a0	a8		tay				tay
.87a1	b9 a7 95	lda $95a7,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.87a4	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.87a7	b9 a8 95	lda $95a8,y			lda 	DecimalScalarTable-5+1,y
.87aa	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.87ad	b9 a9 95	lda $95a9,y			lda 	DecimalScalarTable-5+2,y
.87b0	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.87b3	b9 aa 95	lda $95aa,y			lda 	DecimalScalarTable-5+3,y
.87b6	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.87b9	b9 ab 95	lda $95ab,y			lda 	DecimalScalarTable-5+4,y
.87bc	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.87bf	a9 08		lda #$08			lda 	#NSTFloat
.87c1	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.87c4	7a		ply				ply
.87c5	e8		inx				inx 								; multiply decimal const by decimal scalar
.87c6	20 f1 93	jsr $93f1			jsr 	FloatMultiply
.87c9	ca		dex				dex
.87ca	20 86 92	jsr $9286			jsr 	FloatAdd 					; add to integer part.
.87cd					_ENCFExit:
.87cd	18		clc				clc 								; reject the digit.
.87ce	60		rts				rts
.87cf					ESTAShiftDigitIntoMantissa:
.87cf	29 0f		and #$0f			and 	#15 						; save digit
.87d1	48		pha				pha
.87d2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.87d5	48		pha				pha
.87d6	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.87d9	48		pha				pha
.87da	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87dd	48		pha				pha
.87de	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.87e1	48		pha				pha
.87e2	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; x 2
.87e5	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; x 4
.87e8	18		clc				clc 								; pop mantissa and add
.87e9	68		pla				pla
.87ea	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.87ed	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87f0	68		pla				pla
.87f1	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.87f4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87f7	68		pla				pla
.87f8	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.87fb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87fe	68		pla				pla
.87ff	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8802	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8805	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; x 10
.8808	68		pla				pla 								; add digit
.8809	18		clc				clc
.880a	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.880d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8810	90 0d		bcc $881f			bcc 	_ESTASDExit
.8812	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8815	d0 08		bne $881f			bne 	_ESTASDExit
.8817	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.881a	d0 03		bne $881f			bne 	_ESTASDExit
.881c	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.881f					_ESTASDExit:
.881f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/term.asm

.8820					EvaluateTerm:
.8820	b1 30		lda ($30),y			lda 	(codePtr),y
.8822	30 18		bmi $883c			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8824	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8826	b0 6f		bcs $8897			bcs 	_ETVariable
.8828	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.882a	90 6f		bcc $889b			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.882c	c9 3a		cmp #$3a			cmp 	#'9'+1
.882e	b0 6b		bcs $889b			bcs 	_ETPuncUnary
.8830	20 fe 86	jsr $86fe			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8833					_ETNumber:
.8833	c8		iny				iny 								; keep encoding until we have the numbers
.8834	b1 30		lda ($30),y			lda 	(codePtr),y
.8836	20 01 87	jsr $8701			jsr 	EncodeNumberContinue
.8839	b0 f8		bcs $8833			bcs 	_ETNumber 					; go back if accepted.
.883b	60		rts				rts
.883c					_ETCheckUnary:
.883c	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.883e	f0 41		beq $8881			beq 	_ETString
.8840	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8842	f0 12		beq $8856			beq 	_ETHexConstant
.8844	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8846	90 0b		bcc $8853			bcc 	_ETSyntaxError
.8848	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.884a	b0 07		bcs $8853			bcs 	_ETSyntaxError
.884c	da		phx				phx 								; push X on the stack
.884d	0a		asl a				asl 	a 							; put vector x 2 into X
.884e	aa		tax				tax
.884f	c8		iny				iny 								; consume unary function token
.8850	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8853					_ETSyntaxError:
.8853	4c e3 95	jmp $95e3			jmp 	SyntaxError
.8856					_ETHexConstant:
.8856	c8		iny				iny 								; skip #
.8857	c8		iny				iny 								; skip count
.8858	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero 					; clear result
.885b					_ETHLoop:
.885b	b1 30		lda ($30),y			lda 	(codePtr),y
.885d	c8		iny				iny 								; and consume
.885e	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8860	f0 1e		beq $8880			beq 	_ETHExit
.8862	48		pha				pha 								; save on stack.
.8863	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; x 2
.8866	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; x 4
.8869	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; x 8
.886c	20 e2 8b	jsr $8be2			jsr 	NSMShiftLeft 				; x 16
.886f	68		pla				pla 								; ASCII
.8870	c9 41		cmp #$41			cmp 	#'A'
.8872	90 02		bcc $8876			bcc 	_ETHNotChar
.8874	e9 07		sbc #$07			sbc 	#7
.8876					_ETHNotChar:
.8876	29 0f		and #$0f			and 	#15 						; digit now
.8878	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.887b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.887e	80 db		bra $885b			bra 	_ETHLoop 					; go round.
.8880					_ETHExit:
.8880	60		rts				rts
.8881					_ETString:
.8881	c8		iny				iny 								; look at length
.8882	b1 30		lda ($30),y			lda 	(codePtr),y
.8884	48		pha				pha
.8885	c8		iny				iny 								; first character
.8886	20 46 81	jsr $8146			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8889	68		pla				pla 								; restore count and save
.888a	85 36		sta $36				sta 	zTemp0
.888c	98		tya				tya 								; add length to Y to skip it.
.888d	18		clc				clc
.888e	65 36		adc $36				adc 	zTemp0
.8890	a8		tay				tay
.8891	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8893	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8896	60		rts				rts
.8897					_ETVariable:
>8897	db						.byte 	$DB 						; causes a break in the emulator
.8898	4c ff ff	jmp $ffff			jmp 	$FFFF
.889b					_ETPuncUnary:
.889b	c8		iny				iny 								; consume the unary character
.889c	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.889e	f0 31		beq $88d1			beq 	_ETUnaryNegate
.88a0	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.88a2	f0 3d		beq $88e1			beq 	_ETDereference
.88a4	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.88a6	f0 58		beq $8900			beq 	_ETParenthesis
.88a8	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.88aa	f0 43		beq $88ef			beq 	_ETStringReference
.88ac	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.88ae	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.88b0	f0 06		beq $88b8			beq 	_ETIndirection
.88b2	e6 36		inc $36				inc 	zTemp0
.88b4	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.88b6	d0 9b		bne $8853			bne 	_ETSyntaxError
.88b8					_ETIndirection:
.88b8	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.88ba	1a		inc a				inc 	a
.88bb	48		pha				pha
.88bc	20 20 88	jsr $8820			jsr 	EvaluateTerm				; evaluate the term
.88bf	20 64 86	jsr $8664			jsr 	Dereference 				; dereference it.
.88c2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.88c5	d0 07		bne $88ce			bne 	_ETTypeMismatch
.88c7	68		pla				pla 								; indirection 1-2
.88c8	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.88ca	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88cd	60		rts				rts
.88ce					_ETTypeMismatch:
.88ce	4c ed 95	jmp $95ed			jmp 	TypeError
.88d1					_ETUnaryNegate:
.88d1	20 20 88	jsr $8820			jsr 	EvaluateTerm				; evaluate the term
.88d4	20 64 86	jsr $8664			jsr 	Dereference 				; dereference it.
.88d7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.88da	29 10		and #$10			and 	#NSTString
.88dc	d0 f0		bne $88ce			bne 	_ETTypeMismatch
.88de	4c 79 8b	jmp $8b79			jmp 	NSMNegate  					; just toggles the sign bit.
.88e1					_ETDereference:
.88e1	20 20 88	jsr $8820			jsr 	EvaluateTerm				; evaluate the term
.88e4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.88e7	29 20		and #$20			and 	#NSBIsReference
.88e9	f0 e3		beq $88ce			beq 	_ETTypeMismatch
.88eb	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.88ee	60		rts				rts
.88ef					_ETStringReference:
.88ef	20 20 88	jsr $8820			jsr 	EvaluateTerm				; evaluate the term
.88f2	20 64 86	jsr $8664			jsr 	Dereference 				; dereference it.
.88f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.88f8	d0 d4		bne $88ce			bne 	_ETTypeMismatch
.88fa	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.88fc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88ff	60		rts				rts
.8900					_ETParenthesis:
.8900	20 22 86	jsr $8622			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8903	20 c1 90	jsr $90c1			jsr 	CheckRightBracket 			; check for )
.8906	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/abs.asm

.9477					AbsUnary:
.9477	fa		plx				plx 								; restore stack pos
.9478	20 21 8b	jsr $8b21			jsr 	EvaluateNumber 				; get a float or int
.947b	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.947e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9481	29 7f		and #$7f			and 	#$7F
.9483	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9486	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/alloc.asm

.8907					AllocUnary:
.8907	fa		plx				plx 								; restore stack pos
.8908	20 59 8b	jsr $8b59			jsr 	Evaluate16BitInteger		; get bytes required.
.890b	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.890e	da		phx				phx 								; save X/Y
.890f	5a		phy				phy
.8910	8a		txa				txa 								; copy X into Y
.8911	a8		tay				tay
.8912	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8915	aa		tax				tax
.8916	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8919	20 26 89	jsr $8926			jsr 	AllocateXABytes 			; allocate memory
.891c	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.891f	8a		txa				txa
.8920	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8923	7a		ply				ply
.8924	fa		plx				plx
.8925	60		rts				rts
.8926					AllocateXABytes:
.8926	5a		phy				phy
.8927	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.892a	5a		phy				phy
.892b	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.892e	5a		phy				phy
.892f	18		clc				clc
.8930	6d 0c 07	adc $070c			adc 	lowMemPtr
.8933	8d 0c 07	sta $070c			sta 	lowMemPtr
.8936	8a		txa				txa
.8937	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.893a	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.893d	fa		plx				plx
.893e	68		pla				pla
.893f	7a		ply				ply
.8940	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/asc.asm

.9487					AscUnary:
.9487	fa		plx				plx 								; restore stack pos
.9488	20 2c 8b	jsr $8b2c			jsr 	EvaluateString 				; get a string
.948b	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.948d	20 cf 8b	jsr $8bcf			jsr 	NSMSetByte
.9490	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.9493	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/frac.asm

.9494					FracUnary:
.9494	fa		plx				plx 								; restore stack pos
.9495	20 21 8b	jsr $8b21			jsr 	EvaluateNumber 				; get a float or int
.9498	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.949b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.949e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.94a0	f0 04		beq $94a6			beq 	_IUZero
.94a2	20 64 93	jsr $9364			jsr 	FloatFractionalPart
.94a5	60		rts				rts
.94a6					_IUZero:
.94a6	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero
.94a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/int.asm

.94aa					IntUnary:
.94aa	fa		plx				plx 								; restore stack pos
.94ab	20 21 8b	jsr $8b21			jsr 	EvaluateNumber 				; get a float or int
.94ae	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.94b1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.94b4	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.94b6	f0 03		beq $94bb			beq 	_IUExit
.94b8	20 c7 93	jsr $93c7			jsr 	FloatIntegerPart
.94bb					_IUExit:
.94bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/len.asm

.94bc					LenUnary:
.94bc	fa		plx				plx 								; restore stack pos
.94bd	20 2c 8b	jsr $8b2c			jsr 	EvaluateString 				; get a string
.94c0	5a		phy				phy
.94c1	a0 00		ldy #$00			ldy 	#0 							; find length
.94c3					_LenFind:
.94c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.94c5	f0 06		beq $94cd			beq 	_LenExit
.94c7	c8		iny				iny
.94c8	d0 f9		bne $94c3			bne 	_LenFind
.94ca	4c e8 95	jmp $95e8			jmp 	RangeError 					; string > 255
.94cd					_LenExit:
.94cd	98		tya				tya
.94ce	20 cf 8b	jsr $8bcf			jsr 	NSMSetByte
.94d1	7a		ply				ply
.94d2	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.94d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/not.asm

.8941					Unary_Not:
.8941	fa		plx				plx
.8942	20 44 8b	jsr $8b44			jsr 	EvaluateInteger 			; get integer
.8945	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.8948	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; zero mantissa ?
.894b	f0 04		beq $8951			beq 	_NotZero
.894d	20 cd 8b	jsr $8bcd			jsr 	NSMSetZero
.8950	60		rts				rts
.8951					_NotZero:
.8951	4c d8 82	jmp $82d8			jmp 	ReturnTrue
.8954					_UNBad:
.8954	4c f2 95	jmp $95f2			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/rnd.asm

.8957					Unary_Rnd:
.8957	20 21 8b	jsr $8b21			jsr 	EvaluateNumber 				; number to use.
.895a	20 c1 90	jsr $90c1			jsr 	CheckRightBracket 			; closing bracket
.895d	20 86 89	jsr $8986			jsr 	Random32Bit 				; generate a number.
.8960	ad 08 07	lda $0708			lda 	RandomSeed+0
.8963	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8966	ad 09 07	lda $0709			lda 	RandomSeed+1
.8969	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.896c	ad 0a 07	lda $070a			lda 	RandomSeed+2
.896f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8972	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8975	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8977	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.897a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.897c	8d 28 06	sta $0628			sta 	NSExponent
.897f	a9 08		lda #$08			lda 	#NSTFloat
.8981	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8984	db						.byte 	$DB 						; causes a break in the emulator
.8985	60		rts				rts
.8986					Random32Bit:
.8986	5a		phy				phy
.8987	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8989	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.898c	d0 03		bne $8991			bne 	_Random1
.898e	a8		tay				tay 								; if so do it 256 times
.898f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8991					_Random1:
.8991	0a		asl a				asl 	a 							; LSFR RNG
.8992	2e 09 07	rol $0709			rol 	RandomSeed+1
.8995	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8998	2e 0b 07	rol $070b			rol 	RandomSeed+3
.899b	90 02		bcc $899f			bcc 	_Random2
.899d	49 c5		eor #$c5			eor 	#$C5
.899f					_Random2:
.899f	88		dey				dey
.89a0	d0 ef		bne $8991			bne 	_Random1
.89a2	7a		ply				ply
.89a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/sgn.asm

.94d6					SgnUnary:
.94d6	fa		plx				plx 								; restore stack pos
.94d7	20 21 8b	jsr $8b21			jsr 	EvaluateNumber 				; get a float or int
.94da	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.94dd	20 fd 8b	jsr $8bfd			jsr 	NSMIsZero 					; if zero
.94e0	f0 10		beq $94f2			beq 	_SGZero  					; return Int Zero
.94e2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.94e5	48		pha				pha
.94e6	a9 01		lda #$01			lda 	#1 							; set to 1
.94e8	20 cf 8b	jsr $8bcf			jsr 	NSMSetByte
.94eb	68		pla				pla
.94ec	29 80		and #$80			and		#$80 						; copy the sign byte out
.94ee	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94f1	60		rts				rts
.94f2	20 cd 8b	jsr $8bcd	_SGZero:jsr 	NSMSetZero
.94f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/val.asm

.94f6					ValUnary:
.94f6	fa		plx				plx 								; restore stack pos
.94f7	20 0c 95	jsr $950c			jsr 	ValMainCode 				; do the main val() code
.94fa	b0 01		bcs $94fd			bcs 	_VUError 					; couldn't convert
.94fc	60		rts				rts
.94fd					_VUError:
.94fd	4c ed 95	jmp $95ed			jmp 	TypeError
.9500					IsValUnary:
.9500	fa		plx				plx 								; restore stack pos
.9501	20 0c 95	jsr $950c			jsr 	ValMainCode 				; do the main val() code
.9504	b0 03		bcs $9509			bcs 	_VUBad
.9506	4c d8 82	jmp $82d8			jmp 	ReturnTrue
.9509					_VUBad:
.9509	4c e4 82	jmp $82e4			jmp 	ReturnFalse
.950c					ValMainCode:
.950c	20 2c 8b	jsr $8b2c			jsr 	EvaluateString 				; get a string
.950f	20 c1 90	jsr $90c1			jsr 	CheckRightBracket 			; check right bracket present
.9512	5a		phy				phy
.9513	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9515	f0 17		beq $952e			beq 	_VMCFail2
.9517	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9519	48		pha				pha 								; save first character
.951a	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.951c	d0 01		bne $951f			bne 	_VMCStart
.951e	c8		iny				iny 								; skip over -
.951f					_VMCStart:
.951f	38		sec				sec 								; initialise first time round.
.9520					_VMCNext:
.9520	c8		iny				iny 								; pre-increment
.9521	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9523	f0 0c		beq $9531			beq 	_VMCSuccess 				; successful.
.9525	20 02 87	jsr $8702			jsr 	EncodeNumber 				; send it to the number-builder
.9528	90 03		bcc $952d			bcc 	_VMCFail 					; if failed, give up.
.952a	18		clc				clc 								; next time round, countinue
.952b	80 f3		bra $9520			bra 	_VMCNext
.952d					_VMCFail:
.952d	68		pla				pla
.952e					_VMCFail2:
.952e	7a		ply				ply
.952f	38		sec				sec
.9530	60		rts				rts
.9531					_VMCSuccess:
.9531	a9 00		lda #$00			lda 	#0 							; construct final
.9533	20 02 87	jsr $8702			jsr 	EncodeNumber
.9536	68		pla				pla
.9537	c9 2d		cmp #$2d			cmp 	#"-"
.9539	d0 03		bne $953e			bne 	_VMCNotNegative
.953b	20 79 8b	jsr $8b79			jsr		NSMNegate
.953e					_VMCNotNegative:
.953e	7a		ply				ply
.953f	18		clc				clc
.9540	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/chr.asm

.89a4					ChrUnary:
.89a4	fa		plx				plx 								; restore stack pos
.89a5	20 65 8b	jsr $8b65			jsr 	Evaluate8BitInteger			; get value
.89a8	48		pha				pha
.89a9	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.89ac	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.89ae	20 5f 95	jsr $955f			jsr 	StringTempAllocate
.89b1	68		pla				pla 								; write number to it
.89b2	20 9d 95	jsr $959d			jsr 	StringTempWrite
.89b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/spc.asm

.89b6					SpcUnary:
.89b6	fa		plx				plx 								; restore stack pos
.89b7	20 65 8b	jsr $8b65			jsr 	Evaluate8BitInteger			; get value
.89ba	5a		phy				phy
.89bb	48		pha				pha 								; save count
.89bc	20 5f 95	jsr $955f			jsr 	StringTempAllocate
.89bf	7a		ply				ply 								; to do count in Y
.89c0					_SpcLoop:
.89c0	c0 00		cpy #$00			cpy 	#0
.89c2	f0 08		beq $89cc			beq 	_SpcExit
.89c4	a9 20		lda #$20			lda 	#32
.89c6	20 9d 95	jsr $959d			jsr 	StringTempWrite
.89c9	88		dey				dey
.89ca	80 f4		bra $89c0			bra 	_SPCLoop
.89cc					_SpcExit:
.89cc	7a		ply				ply
.89cd	20 c1 90	jsr $90c1			jsr 	CheckRightBracket
.89d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/str.asm

.89d1					Unary_Str:
.89d1	fa		plx				plx
.89d2	20 21 8b	jsr $8b21			jsr 	EvaluateNumber  			; get number
.89d5	20 c1 90	jsr $90c1			jsr 	CheckRightBracket 			; closing bracket
.89d8	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.89da	20 f3 89	jsr $89f3			jsr 	ConvertNumberToString 		; do the conversion.
.89dd	a9 21		lda #$21			lda		#33 						; create buffer
.89df	20 5f 95	jsr $955f			jsr 	StringTempAllocate 			; allocate memory
.89e2	da		phx				phx
.89e3	a2 00		ldx #$00			ldx 	#0
.89e5					_USCopy:
.89e5	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.89e8	20 9d 95	jsr $959d			jsr 	StringTempWrite
.89eb	e8		inx				inx
.89ec	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.89ef	d0 f4		bne $89e5			bne 	_USCopy
.89f1	fa		plx				plx
.89f2	60		rts				rts
.89f3					ConvertNumberToString:
.89f3	5a		phy				phy 								; save code position
.89f4	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.89f7	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.89fa	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.89fd	10 0a		bpl $8a09			bpl 	_CNTSNotNegative
.89ff	29 7f		and #$7f			and 	#$7F 						; make +ve
.8a01	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a04	a9 2d		lda #$2d			lda 	#"-"
.8a06	20 6a 8a	jsr $8a6a			jsr 	WriteDecimalBuffer
.8a09					_CNTSNotNegative:
.8a09	e8		inx				inx 								; round up
.8a0a	a9 01		lda #$01			lda 	#1
.8a0c	20 cf 8b	jsr $8bcf			jsr 	NSMSetByte
.8a0f	ca		dex				dex
.8a10	bd 28 06	lda $0628,x			lda		NSExponent,x
.8a13	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8a16	a9 08		lda #$08			lda 	#NSTFloat
.8a18	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8a1b	20 86 92	jsr $9286			jsr 	FloatAdd
.8a1e	20 4c 8a	jsr $8a4c			jsr 	MakePlusTwoString
.8a21	20 64 93	jsr $9364			jsr 	FloatFractionalPart 		; get the fractional part
.8a24	20 28 94	jsr $9428			jsr 	NSNormalise					; normalise , exit if zero
.8a27	f0 21		beq $8a4a			beq 	_CNTSExit
.8a29	a9 2e		lda #$2e			lda 	#"."
.8a2b	20 6a 8a	jsr $8a6a			jsr 	WriteDecimalBuffer 			; write decimal place
.8a2e					_CNTSDecimal:
.8a2e	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8a31	30 17		bmi $8a4a			bmi 	_CNTSExit
.8a33	e8		inx				inx 								; x 10.0
.8a34	a9 0a		lda #$0a			lda 	#10
.8a36	20 cf 8b	jsr $8bcf			jsr 	NSMSetByte
.8a39	a9 08		lda #$08			lda 	#NSTFloat
.8a3b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a3e	ca		dex				dex
.8a3f	20 f1 93	jsr $93f1			jsr 	FloatMultiply
.8a42	20 4c 8a	jsr $8a4c			jsr 	MakePlusTwoString
.8a45	20 64 93	jsr $9364			jsr 	FloatFractionalPart 		; get the fractional part
.8a48	80 e4		bra $8a2e			bra 	_CNTSDecimal 				; keep going.
.8a4a					_CNTSExit:
.8a4a	7a		ply				ply
.8a4b	60		rts				rts
.8a4c					MakePlusTwoString:
.8a4c	da		phx				phx
.8a4d	20 a4 8b	jsr $8ba4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8a50	e8		inx				inx 								; access it
.8a51	e8		inx				inx
.8a52	20 c7 93	jsr $93c7			jsr 	FloatIntegerPart 			; make it an integer
.8a55	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8a57	20 30 92	jsr $9230			jsr 	ConvertInt32
.8a5a	a2 00		ldx #$00			ldx	 	#0
.8a5c					_MPTSCopy:
.8a5c	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8a5f	20 6a 8a	jsr $8a6a			jsr 	WriteDecimalBuffer
.8a62	e8		inx				inx
.8a63	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8a66	d0 f4		bne $8a5c			bne 	_MPTSCopy
.8a68	fa		plx				plx
.8a69	60		rts				rts
.8a6a					WriteDecimalBuffer:
.8a6a	da		phx				phx
.8a6b	ae 14 07	ldx $0714			ldx 	dbOffset
.8a6e	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8a71	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8a74	ee 14 07	inc $0714			inc 	dbOffset
.8a77	fa		plx				plx
.8a78	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/substring.asm

.8a79					Unary_Left:
.8a79	fa		plx				plx
.8a7a	18		clc				clc 								; only one parameter
.8a7b	20 f0 8a	jsr $8af0			jsr 	SubstringInitial 			; set up.
.8a7e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8a81	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a84	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8a87	80 2c		bra $8ab5			bra 	SubstringMain
.8a89					Unary_Right:
.8a89	fa		plx				plx
.8a8a	18		clc				clc 								; only one parameter
.8a8b	20 f0 8a	jsr $8af0			jsr 	SubstringInitial 			; set up.
.8a8e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8a91	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a94	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8a97	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8a9a	b0 02		bcs $8a9e			bcs 	_URNotUnderflow
.8a9c	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8a9e					_URNotUnderFlow:
.8a9e	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8aa1	80 12		bra $8ab5			bra 	SubStringMain
.8aa3					Unary_Mid:
.8aa3	fa		plx				plx
.8aa4	38		sec				sec 								; two parameters
.8aa5	20 f0 8a	jsr $8af0			jsr 	SubstringInitial 			; set up.
.8aa8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8aab	f0 05		beq $8ab2			beq 	_UMError
.8aad	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8ab0	80 03		bra $8ab5			bra 	SubStringMain
.8ab2					_UMError:
.8ab2	4c f2 95	jmp $95f2			jmp 	ArgumentError
.8ab5					SubStringMain:
.8ab5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8ab8	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8abb	b0 2d		bcs $8aea			bcs 	_SSMNull 					; if so, return an empty string.
.8abd	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8ac0	f0 28		beq $8aea			beq 	_SSMNull 					; return empty string.
.8ac2	18		clc				clc 								; add the offset +1 to the address and
.8ac3	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8ac6	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8ac9	85 36		sta $36				sta 	zTemp0
.8acb	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8ace	69 00		adc #$00			adc 	#0
.8ad0	85 37		sta $37				sta 	zTemp0+1
.8ad2					_SSMNoCarry:
.8ad2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8ad5	20 5f 95	jsr $955f			jsr 	StringTempAllocate 			; allocate that many characters
.8ad8	5a		phy				phy 								; save Y
.8ad9	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8adb					_SSMCopy:
.8adb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8add	f0 09		beq $8ae8			beq 	_SSMEString 				; no more to copy
.8adf	20 9d 95	jsr $959d			jsr 	StringTempWrite 			; and write it out.
.8ae2	c8		iny				iny
.8ae3	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8ae6	d0 f3		bne $8adb			bne 	_SSMCopy
.8ae8					_SSMEString:
.8ae8	7a		ply				ply
.8ae9					_SSMExit:
.8ae9	60		rts				rts
.8aea					_SSMNull:
.8aea	a9 00		lda #$00			lda 	#0
.8aec	20 5f 95	jsr $955f			jsr 	StringTempAllocate
.8aef	60		rts				rts
.8af0					SubstringInitial:
.8af0	da		phx				phx 								; save initial stack position
.8af1	08		php				php 								; save carry on stack indicating 2 parameters
.8af2	20 2c 8b	jsr $8b2c			jsr 	EvaluateString 				; get a string
.8af5	5a		phy				phy 								; calculate length to exponent.
.8af6	a0 ff		ldy #$ff			ldy 	#$FF
.8af8					_SIFindLength:
.8af8	c8		iny				iny
.8af9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8afb	d0 fb		bne $8af8			bne 	_SIFindLength
.8afd	98		tya				tya
.8afe	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8b01	7a		ply				ply
.8b02	e8		inx				inx
.8b03	20 c9 90	jsr $90c9			jsr 	CheckComma 					; comma next
.8b06	20 65 8b	jsr $8b65			jsr 	Evaluate8BitInteger 		; get next parameter
.8b09	28		plp				plp 								; is it the last parameter ?
.8b0a	90 07		bcc $8b13			bcc 	_SSIExit 					; if so, exit.
.8b0c	e8		inx				inx
.8b0d	20 c9 90	jsr $90c9			jsr 	CheckComma 					; comma next
.8b10	20 65 8b	jsr $8b65			jsr 	Evaluate8BitInteger 		; get last parameter
.8b13					_SSIExit:
.8b13	fa		plx				plx
.8b14	20 c1 90	jsr $90c1			jsr 	CheckRightBracket 			; check closing bracket
.8b17	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/exprhelper.asm

.8b18					EvaluateValue:
.8b18	48		pha				pha
.8b19	20 22 86	jsr $8622			jsr		EvaluateExpression 			; expression
.8b1c	20 64 86	jsr $8664			jsr 	Dereference					; derefernce it
.8b1f	68		pla				pla
.8b20	60		rts				rts
.8b21					EvaluateNumber:
.8b21	20 18 8b	jsr $8b18			jsr 	EvaluateValue 				; get a value
.8b24	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8b27	29 10		and #$10			and 	#NSBIsString
.8b29	d0 16		bne $8b41			bne 	HelperTypeError
.8b2b	60		rts				rts
.8b2c					EvaluateString:
.8b2c	20 18 8b	jsr $8b18			jsr 	EvaluateValue 				; get a value
.8b2f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8b32	29 10		and #$10			and 	#NSBIsString
.8b34	f0 0b		beq $8b41			beq 	HelperTypeError
.8b36					CopyAddressToTemp0:
.8b36	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8b39	85 36		sta $36				sta 	zTemp0
.8b3b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b3e	85 37		sta $37				sta 	zTemp0+1
.8b40	60		rts				rts
.8b41					HelperTypeError:
.8b41	4c ed 95	jmp $95ed			jmp 	TypeError
.8b44					EvaluateInteger:
.8b44	20 21 8b	jsr $8b21			jsr 	EvaluateNumber
.8b47	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8b4a	d0 0a		bne $8b56			bne 	HelperValueError 			; if not, it's a float.
.8b4c	60		rts				rts
.8b4d					EvaluateUnsignedInteger:
.8b4d	20 44 8b	jsr $8b44			jsr 	EvaluateInteger 			; check integer is +ve
.8b50	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b53	30 01		bmi $8b56			bmi 	HelperValueError
.8b55	60		rts				rts
.8b56					HelperValueError:
.8b56	4c f2 95	jmp $95f2			jmp 	ArgumentError
.8b59					Evaluate16BitInteger:
.8b59	20 4d 8b	jsr $8b4d			jsr	 	EvaluateUnsignedInteger		; get integer
.8b5c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8b5f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8b62	d0 f2		bne $8b56			bne 	HelperValueError
.8b64	60		rts				rts
.8b65					Evaluate8BitInteger:
.8b65	20 4d 8b	jsr $8b4d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8b68	d0 ec		bne $8b56			bne 	HelperValueError
.8b6a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8b6d	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8b70	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8b73	d0 e1		bne $8b56			bne 	HelperValueError
.8b75	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b78	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/utility.asm

.8b79					NSMNegate:
.8b79	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b7c	49 80		eor #$80			eor 	#NSBIsNegative
.8b7e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b81	60		rts				rts
.8b82					NSMNegateMantissa:
.8b82	38		sec				sec
.8b83	a9 00		lda #$00			lda 	#0
.8b85	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8b88	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b8b	a9 00		lda #$00			lda 	#0
.8b8d	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8b90	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b93	a9 00		lda #$00			lda 	#0
.8b95	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8b98	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b9b	a9 00		lda #$00			lda 	#0
.8b9d	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8ba0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ba3	60		rts				rts
.8ba4					NSMShiftUpTwo:
.8ba4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ba7	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8baa	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bad	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8bb0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8bb3	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8bb6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8bb9	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8bbc	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8bbf	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8bc2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8bc5	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8bc8	60		rts				rts
.8bc9					NSMSetZeroMantissaOnly:
.8bc9	a9 00		lda #$00			lda 	#0
.8bcb	80 08		bra $8bd5			bra 	NSMSetMantissa
.8bcd					NSMSetZero:
.8bcd	a9 00		lda #$00			lda 	#0
.8bcf					NSMSetByte:
.8bcf	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8bd2	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8bd5					NSMSetMantissa:
.8bd5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8bd8	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8bdb	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8bde	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8be1	60		rts				rts
.8be2					NSMShiftLeft:
.8be2	18		clc				clc
.8be3					NSMRotateLeft:
.8be3	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8be6	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8be9	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8bec	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8bef	60		rts				rts
.8bf0					NSMShiftRight:
.8bf0	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8bf3	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8bf6	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8bf9	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8bfc	60		rts				rts
.8bfd					NSMIsZero:
.8bfd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8c00	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8c03	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8c06	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8c09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/strings/stringalloc.asm

.9541					StringSystemInitialise:
.9541	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.9543	8d 0e 07	sta $070e			sta 	0+StringMemory
.9546	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.9548	8d 0f 07	sta $070f			sta 	1+StringMemory
.954b	60		rts				rts
.954c					StringSpaceInitialise:
.954c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.954e	8d 10 07	sta $0710			sta 	StringInitialised
.9551	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9554	8d 11 07	sta $0711			sta 	StringTempPointer
.9557	ad 0f 07	lda $070f			lda 	StringMemory+1
.955a	3a		dec a				dec 	a
.955b	8d 12 07	sta $0712			sta 	StringTempPointer+1
.955e	60		rts				rts
.955f					StringTempAllocate:
.955f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9561	b0 35		bcs $9598			bcs 	_STALength
.9563	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9566	30 05		bmi $956d			bmi 	_STAAllocate
.9568	48		pha				pha 								; save value to subtract.
.9569	20 4c 95	jsr $954c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.956c	68		pla				pla 								; restore it
.956d					_STAAllocate:
.956d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.956f	18		clc				clc  								; deliberate allows one more
.9570	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9573	8d 11 07	sta $0711			sta 	StringTempPointer
.9576	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9579	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.957b	ad 12 07	lda $0712			lda 	StringTempPointer+1
.957e	69 ff		adc #$ff			adc 	#$FF
.9580	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9583	85 3d		sta $3d				sta 	zsTemp+1
.9585	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9588	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.958b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.958e	a9 10		lda #$10			lda 	#NSTString
.9590	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9593	a9 00		lda #$00			lda 	#0 							; clear the target string
.9595	92 3c		sta ($3c)			sta 	(zsTemp)
.9597	60		rts				rts
.9598					_STALength:
.9598	a9 09		lda #$09		lda	#9
.959a	4c 72 82	jmp $8272		jmp	ErrorHandler
.959d					StringTempWrite:
.959d	48		pha				pha
.959e	92 3c		sta ($3c)			sta 	(zsTemp)
.95a0	e6 3c		inc $3c				inc 	zsTemp
.95a2	d0 02		bne $95a6			bne 	_STWNoCarry
.95a4	e6 3d		inc $3d				inc 	zsTemp+1
.95a6					_STWNoCarry:
.95a6	a9 00		lda #$00			lda 	#0
.95a8	92 3c		sta ($3c)			sta 	(zsTemp)
.95aa	68		pla				pla
.95ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/backload.asm

.8c0a					BackloadProgram:
.8c0a	a2 ff		ldx #$ff			ldx 	#$FF
.8c0c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8c0f	20 36 8c	jsr $8c36			jsr 	BLReadByte
.8c12	30 1e		bmi $8c32			bmi 	_BPExit
.8c14					_BPCopy:
.8c14	e8		inx				inx  								; copy byte in
.8c15	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8c18	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8c1b	20 36 8c	jsr $8c36			jsr 	BLReadByte 					; read next byte
.8c1e	30 0a		bmi $8c2a			bmi 	_BPEndLine 					; -ve = EOL
.8c20	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8c22	d0 02		bne $8c26			bne 	_BPNotTab
.8c24	a9 20		lda #$20			lda 	#' '
.8c26					_BPNotTab:
.8c26	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8c28	b0 ea		bcs $8c14			bcs 	_BPCopy
.8c2a					_BPEndLine:
.8c2a	20 f2 8d	jsr $8df2			jsr 	TokeniseLine 				; tokenise the line.
.8c2d	20 17 81	jsr $8117			jsr 	MemoryAppend 				; append to current program
.8c30	80 d8		bra $8c0a			bra 	BackloadProgram
.8c32					_BPExit:
.8c32	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variables etc.
.8c35	60		rts				rts
.8c36					BLReadByte:
.8c36					_BLLoad:
.8c36	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8c39	ee 37 8c	inc $8c37			inc 	_BLLoad+1
.8c3c	d0 03		bne $8c41			bne 	_BLNoCarry
.8c3e	ee 38 8c	inc $8c38			inc 	_BLLoad+2
.8c41					_BLNoCarry:
.8c41	c9 00		cmp #$00			cmp 	#0
.8c43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/searchtokens.asm

.8c44					TokeniseSearchTable:
.8c44	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8c46	85 36		sta $36				sta 	zTemp0
.8c48	a0 00		ldy #$00			ldy 	#0
.8c4a	a9 80		lda #$80			lda 	#$80 						; token #
.8c4c	85 38		sta $38				sta 	zTemp1
.8c4e					_TSTLoop:
.8c4e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8c50	30 49		bmi $8c9b			bmi 	_TSTFail 					; -ve = end of table
.8c52	f0 2e		beq $8c82			beq 	_TSTNext 					; zero, check next it's a dummy
.8c54	c8		iny				iny 								; get the hash
.8c55	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c57	88		dey				dey
.8c58	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8c5b	d0 25		bne $8c82			bne 	_TSTNext
.8c5d	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8c60	38		sec				sec
.8c61	ed 00 07	sbc $0700			sbc 	identStart
.8c64	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8c66	d0 1a		bne $8c82			bne 	_TSTNext
.8c68	5a		phy				phy 								; save Y , we might fail
.8c69	c8		iny				iny 								; point to text
.8c6a	c8		iny				iny
.8c6b	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8c6e					_TSTCompareName:
.8c6e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8c71	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8c73	d0 0c		bne $8c81			bne 	_TSTNextPullY 				; fail, pullY and do next
.8c75	e8		inx				inx
.8c76	c8		iny				iny
.8c77	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8c7a	d0 f2		bne $8c6e			bne 	_TSTCompareName
.8c7c	7a		ply				ply 								; throw Y
.8c7d	a5 38		lda $38				lda 	zTemp1 						; get token #
.8c7f	38		sec				sec 								; return with CS = passed.
.8c80	60		rts				rts
.8c81					_TSTNextPullY:
.8c81	7a		ply				ply 								; restore current, fall through.
.8c82					_TSTNext:
.8c82	e6 38		inc $38				inc 	zTemp1 						; token counter
.8c84	98		tya				tya
.8c85	18		clc				clc
.8c86	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8c88	1a		inc a				inc 	a 							; +1
.8c89	1a		inc a				inc 	a 							; +2
.8c8a	a8		tay				tay
.8c8b	10 c1		bpl $8c4e			bpl 	_TSTLoop 					; if Y < $80 loop back
.8c8d	98		tya				tya 								; add Y to zTemp0 and reset Y
.8c8e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8c90	18		clc				clc  								; but have tables > 255 bytes
.8c91	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8c93	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8c95	90 b7		bcc $8c4e			bcc 	_TSTLoop
.8c97	e6 37		inc $37				inc 	zTemp0+1
.8c99	80 b3		bra $8c4e			bra 	_TSTLoop
.8c9b					_TSTFail:
.8c9b	18		clc				clc
.8c9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/tokenise.asm


;******  Processing file: ./core/tokeniser/../../generated/kwdtext.dat

.8c9d					KeywordSet0:
>8c9d	00 65					.text	0,$65,""               ; $80 !0:EOF
>8c9f	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ca1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ca3	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8ca9	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8cb1	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8cb7	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8cbe	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8cc5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8ccc	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8cd2	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8cda	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8ce2	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8ce8	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8cef	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8cf5	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8cfd	28
>8cfe	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8d04	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8d0a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8d10	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8d17	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8d1d	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8d23	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8d28	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8d2c	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8d32	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8d3a	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8d41	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8d48	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8d50	43
>8d51	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8d57	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8d5e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8d64	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8d6a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8d6f	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8d75	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8d7a	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8d81	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8d87	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8d8c	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8d93	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8d99	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8d9e	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8da6	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8dac	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8db0	ff					.text	$FF
.8db1					KeywordSet1:
>8db1	00 65					.text	0,$65,""               ; $80 !0:EOF
>8db3	00 58					.text	0,$58,""               ; $81 !1:SH1
>8db5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8db7	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8dbf	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8dc6	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8dcb	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8dd1	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8dd6	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8dde	45
>8ddf	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8de4	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8dea	ff					.text	$FF
.8deb					KeywordSet2:
>8deb	00 65					.text	0,$65,""               ; $80 !0:EOF
>8ded	00 58					.text	0,$58,""               ; $81 !1:SH1
>8def	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8df1	ff					.text	$FF

;******  Return to file: ./core/tokeniser/tokenise.asm

.8df2					TokeniseLine:
.8df2	20 7a 8f	jsr $8f7a			jsr 	FixLineBufferCase 			; fix line case
.8df5	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8df7	8d 15 07	sta $0715			sta 	tokenOffset
.8dfa	9c 16 07	stz $0716			stz 	tokenLineNumber
.8dfd	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8e00	a2 ff		ldx #$ff			ldx 	#$FF
.8e02					_TKFindFirst:
.8e02	e8		inx				inx
.8e03	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8e06	f0 79		beq $8e81			beq 	_TKExit
.8e08	c9 20		cmp #$20			cmp 	#' '
.8e0a	90 f6		bcc $8e02			bcc 	_TKFindFirst
.8e0c	c9 30		cmp #$30			cmp 	#'0'
.8e0e	90 07		bcc $8e17			bcc 	_TKNoLineNumber
.8e10	c9 3a		cmp #$3a			cmp 	#'9'+1
.8e12	b0 03		bcs $8e17			bcs 	_TKNoLineNumber
.8e14	20 a4 8f	jsr $8fa4			jsr 	TokeniseExtractLineNumber
.8e17					_TKNoLineNumber:
.8e17					_TKTokeniseLoop:
.8e17	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8e1a	f0 65		beq $8e81			beq 	_TKExit
.8e1c	e8		inx				inx
.8e1d	c9 20		cmp #$20			cmp 	#' '
.8e1f	f0 f6		beq $8e17			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8e21	ca		dex				dex 								; undo last get, A contains character, X is position.
.8e22	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8e24	f0 61		beq $8e87			beq 	_TKTokeniseIdentifier
.8e26	c9 41		cmp #$41			cmp 	#'A'
.8e28	90 04		bcc $8e2e			bcc 	_TKTokenisePunctuation
.8e2a	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8e2c	90 59		bcc $8e87			bcc 	_TKTokeniseIdentifier
.8e2e					_TKTokenisePunctuation:
.8e2e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8e30	f0 27		beq $8e59			beq 	_TKString
.8e32	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8e34	f0 28		beq $8e5e			beq 	_TKHexConstant
.8e36	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8e38	f0 29		beq $8e63			beq 	_TKCheckDouble
.8e3a	c9 3e		cmp #$3e			cmp 	#'>'
.8e3c	f0 25		beq $8e63			beq 	_TKCheckDouble
.8e3e					_TKStandardPunctuation:
.8e3e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8e41	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8e43	90 0e		bcc $8e53			bcc 	_TKNoShift
.8e45	48		pha				pha 								; save
.8e46	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8e48	85 36		sta $36				sta 	zTemp0
.8e4a	68		pla				pla
.8e4b	29 20		and #$20			and 	#32 						; bit 5
.8e4d	4a		lsr a				lsr 	a 							; shift into bit 3
.8e4e	4a		lsr a				lsr 	a
.8e4f	05 36		ora $36				ora 	zTemp0
.8e51	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8e53					_TKNoShift:
.8e53	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte 			; write the punctuation character
.8e56	e8		inx				inx 								; consume the character
.8e57	80 be		bra $8e17			bra 	_TKTokeniseLoop 			; and loop round again.
.8e59					_TKString:
.8e59	20 09 8f	jsr $8f09			jsr 	TokeniseString
.8e5c	80 b9		bra $8e17			bra 	_TKTokeniseLoop
.8e5e					_TKHexConstant:
.8e5e	20 44 8f	jsr $8f44			jsr 	TokeniseHexConstant
.8e61	80 b4		bra $8e17			bra 	_TKTokeniseLoop
.8e63					_TKCheckDouble:
.8e63	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8e66	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8e68	90 d4		bcc $8e3e			bcc 	_TKStandardPunctuation
.8e6a	c9 3f		cmp #$3f			cmp 	#'>'+1
.8e6c	b0 d0		bcs $8e3e			bcs 	_TKStandardPunctuation
.8e6e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8e71	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8e73	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8e74	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8e77	38		sec				sec
.8e78	e9 3c		sbc #$3c			sbc 	#'<'
.8e7a	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8e7d	e8		inx				inx 								; consume both
.8e7e	e8		inx				inx
.8e7f	80 96		bra $8e17			bra 	_TKTokeniseLoop
.8e81	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8e83	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.8e86	60		rts				rts
.8e87					_TKTokeniseIdentifier:
.8e87	8e 00 07	stx $0700			stx 	identStart 					; save start
.8e8a	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8e8d					_TKCheckLoop:
.8e8d	e8		inx				inx 								; look at next, we know first is identifier.
.8e8e	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8e91	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8e93	f0 f8		beq $8e8d			beq 	_TKCheckLoop
.8e95	c9 30		cmp #$30			cmp	 	#"0"
.8e97	90 0c		bcc $8ea5			bcc 	_TKEndIdentifier
.8e99	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e9b	90 f0		bcc $8e8d			bcc 	_TKCheckLoop
.8e9d	c9 41		cmp #$41			cmp	 	#"A"
.8e9f	90 04		bcc $8ea5			bcc 	_TKEndIdentifier
.8ea1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8ea3	90 e8		bcc $8e8d			bcc 	_TKCheckLoop
.8ea5					_TKEndIdentifier:
.8ea5	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8ea8	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8eaa	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8eac	f0 06		beq $8eb4			beq 	_TKHasTypeCharacter
.8eae	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8eb0	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8eb2	d0 07		bne $8ebb			bne 	_TKNoTypeCharacter
.8eb4					_TKHasTypeCharacter:
.8eb4	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8eb7	e8		inx				inx 								; read next
.8eb8	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8ebb					_TKNoTypeCharacter:
.8ebb	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8ebd	d0 09		bne $8ec8			bne 	_TKNoArray
.8ebf	e8		inx				inx 								; skip the (
.8ec0	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8ec3	09 04		ora #$04			ora 	#$04
.8ec5	8d 04 07	sta $0704			sta 	identTypeByte
.8ec8					_TKNoArray:
.8ec8	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8ecb	20 65 8f	jsr $8f65			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8ece	a0 8c		ldy #$8c			ldy 	#(KeywordSet0) >> 8
.8ed0	a9 9d		lda #$9d			lda 	#(KeywordSet0) & $FF
.8ed2	20 44 8c	jsr $8c44			jsr 	TokeniseSearchTable
.8ed5	a2 00		ldx #$00			ldx 	#0
.8ed7	b0 1f		bcs $8ef8			bcs 	_TKFoundToken
.8ed9	a0 8d		ldy #$8d			ldy 	#(KeywordSet1) >> 8
.8edb	a9 b1		lda #$b1			lda 	#(KeywordSet1) & $FF
.8edd	20 44 8c	jsr $8c44			jsr 	TokeniseSearchTable
.8ee0	a2 81		ldx #$81			ldx 	#$81
.8ee2	b0 14		bcs $8ef8			bcs 	_TKFoundToken
.8ee4	a0 8d		ldy #$8d			ldy 	#(KeywordSet1) >> 8
.8ee6	a9 b1		lda #$b1			lda 	#(KeywordSet1) & $FF
.8ee8	20 44 8c	jsr $8c44			jsr 	TokeniseSearchTable
.8eeb	a2 82		ldx #$82			ldx 	#$82
.8eed	b0 09		bcs $8ef8			bcs 	_TKFoundToken
.8eef	20 f5 8f	jsr $8ff5			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8ef2	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8ef5	4c 17 8e	jmp $8e17			jmp 	_TKTokeniseLoop 			; and go round again.
.8ef8					_TKFoundToken:
.8ef8	48		pha				pha 								; save token
.8ef9	8a		txa				txa 								; shift in X, is there one ?
.8efa	f0 03		beq $8eff			beq 	_TKNoTShift
.8efc	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte 			; if so, write it out
.8eff					_TKNoTShift:
.8eff	68		pla				pla 								; restore and write token
.8f00	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.8f03	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8f06	4c 17 8e	jmp $8e17			jmp 	_TKTokeniseLoop 			; and go round again.
.8f09					TokeniseString:
.8f09	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8f0b	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.8f0e	e8		inx				inx									; start of quoted string.
.8f0f	da		phx				phx 								; push start of string on top
.8f10	ca		dex				dex
.8f11					_TSFindEnd:
.8f11	e8		inx				inx
.8f12	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8f15	f0 04		beq $8f1b			beq 	_TSEndOfString
.8f17	c9 22		cmp #$22			cmp 	#'"'
.8f19	d0 f6		bne $8f11			bne 	_TSFindEnd
.8f1b					_TSEndOfString:
.8f1b	7a		ply				ply  								; so now Y is first character, X is character after end.
.8f1c	48		pha				pha 								; save terminating character
.8f1d	20 25 8f	jsr $8f25			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8f20	68		pla				pla 								; terminating character
.8f21	f0 01		beq $8f24			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8f23	e8		inx				inx
.8f24					_TSNotQuote:
.8f24	60		rts				rts
.8f25					TOWriteBlockXY:
.8f25	86 36		stx $36				stx 	zTemp0 						; write end character
.8f27	98		tya				tya
.8f28	49 ff		eor #$ff			eor 	#$FF
.8f2a	38		sec				sec
.8f2b	65 36		adc $36				adc 	zTemp0
.8f2d	1a		inc a				inc 	a 							; one extra for NULL
.8f2e	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.8f31					_TOBlockLoop:
.8f31	c4 36		cpy $36				cpy 	zTemp0
.8f33	f0 09		beq $8f3e			beq 	_TOBlockExit
.8f35	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.8f38	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.8f3b	c8		iny				iny
.8f3c	80 f3		bra $8f31			bra 	_TOBlockLoop
.8f3e					_TOBlockExit:
.8f3e	a9 00		lda #$00			lda 	#0
.8f40	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.8f43	60		rts				rts
.8f44					TokeniseHexConstant:
.8f44	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8f46	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.8f49	e8		inx				inx									; start of quoted string.
.8f4a	da		phx				phx 								; push start of constant on top
.8f4b	ca		dex				dex
.8f4c					_THFindLoop:
.8f4c	e8		inx				inx
.8f4d	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f50	c9 30		cmp #$30			cmp 	#"0"
.8f52	90 0c		bcc $8f60			bcc 	_THFoundEnd
.8f54	c9 3a		cmp #$3a			cmp 	#"9"+1
.8f56	90 f4		bcc $8f4c			bcc 	_THFindLoop
.8f58	c9 41		cmp #$41			cmp 	#"A"
.8f5a	90 04		bcc $8f60			bcc 	_THFoundEnd
.8f5c	c9 47		cmp #$47			cmp 	#"F"+1
.8f5e	90 ec		bcc $8f4c			bcc 	_THFindLoop
.8f60					_THFoundEnd:
.8f60	7a		ply				ply 								; restore start
.8f61	20 25 8f	jsr $8f25			jsr 	TOWriteBlockXY 				; output the block
.8f64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/utility.asm

.8f65					TokeniseCalculateHash:
.8f65	da		phx				phx
.8f66	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8f69	a9 00		lda #$00			lda 	#0
.8f6b					_TCHLoop:
.8f6b	18		clc				clc
.8f6c	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.8f6f	e8		inx				inx
.8f70	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8f73	d0 f6		bne $8f6b			bne 	_TCHLoop
.8f75	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8f78	fa		plx				plx
.8f79	60		rts				rts
.8f7a					FixLineBufferCase:
.8f7a	a2 00		ldx #$00			ldx 	#0
.8f7c					_FLBCLoop:
.8f7c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.8f7f	f0 22		beq $8fa3			beq 	_FLBCExit 					; end of string.
.8f81	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8f83	f0 11		beq $8f96			beq 	_FLBCInQuotes
.8f85	e8		inx				inx
.8f86	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8f88	90 f2		bcc $8f7c			bcc 	_FLBCLoop
.8f8a	c9 7b		cmp #$7b			cmp 	#'z'+1
.8f8c	b0 ee		bcs $8f7c			bcs 	_FLBCLoop
.8f8e	38		sec				sec 								; make U/C
.8f8f	e9 20		sbc #$20			sbc 	#32
.8f91	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.8f94	80 e6		bra $8f7c			bra 	_FLBCLoop
.8f96					_FLBCInQuotes:
.8f96	e8		inx				inx 								; advance
.8f97	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.8f9a	f0 07		beq $8fa3			beq 	_FLBCExit 					; exit on EOS
.8f9c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8f9e	d0 f6		bne $8f96			bne 	_FLBCInQuotes
.8fa0	e8		inx				inx 								; skip over it
.8fa1	80 d9		bra $8f7c			bra 	_FLBCLoop
.8fa3					_FLBCExit:
.8fa3	60		rts				rts
.8fa4					TokeniseExtractLineNumber:
.8fa4	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.8fa7	48		pha				pha
.8fa8	ad 16 07	lda $0716			lda 	tokenLineNumber
.8fab	48		pha				pha
.8fac	20 e2 8f	jsr $8fe2			jsr 	_TELNTimes2 				; line # x 4
.8faf	20 e2 8f	jsr $8fe2			jsr 	_TELNTimes2 				; line # x 2
.8fb2	18		clc				clc 								; add stacked value
.8fb3	68		pla				pla
.8fb4	6d 16 07	adc $0716			adc 	tokenLineNumber
.8fb7	8d 16 07	sta $0716			sta 	tokenLineNumber
.8fba	68		pla				pla
.8fbb	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.8fbe	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.8fc1	20 e2 8f	jsr $8fe2			jsr 	_TELNTimes2 				; line # x 10
.8fc4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.8fc7	e8		inx				inx
.8fc8	29 0f		and #$0f			and 	#15 						; add to line #
.8fca	18		clc				clc
.8fcb	6d 16 07	adc $0716			adc 	tokenLineNumber
.8fce	8d 16 07	sta $0716			sta 	tokenLineNumber
.8fd1	90 03		bcc $8fd6			bcc 	_TLENNoCarry
.8fd3	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.8fd6					_TLENNoCarry:
.8fd6	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.8fd9	c9 30		cmp #$30			cmp 	#'0'
.8fdb	90 04		bcc $8fe1			bcc 	_TLENExit
.8fdd	c9 3a		cmp #$3a			cmp 	#'9'+1
.8fdf	90 c3		bcc $8fa4			bcc 	TokeniseExtractLineNumber
.8fe1					_TLENExit:
.8fe1	60		rts				rts
.8fe2					_TELNTimes2:
.8fe2	0e 16 07	asl $0716			asl 	tokenLineNumber
.8fe5	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.8fe8	60		rts				rts
.8fe9					TokeniseWriteByte:
.8fe9	da		phx				phx
.8fea	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.8fed	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.8ff0	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.8ff3	fa		plx				plx
.8ff4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/variablerecord.asm

.8ff5					CheckCreateVariableRecord:
.8ff5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ff7	85 36		sta $36				sta 	0+zTemp0
.8ff9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ffb	85 37		sta $37				sta 	1+zTemp0
.8ffd	20 5b 81	jsr $815b			jsr 	VariableOpen 				; make variable space available
.9000					_CCVSearch:
.9000	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9002	f0 2c		beq $9030			beq 	_CCVFail
.9004	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9006	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9008	cd 03 07	cmp $0703			cmp 	identHash
.900b	d0 16		bne $9023			bne 	_CCVNext
.900d	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.900f	ae 00 07	ldx $0700			ldx 	identStart
.9012					_CCVCompare:
.9012	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9015	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9017	e8		inx				inx 								; advance pointers
.9018	c8		iny				iny
.9019	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.901a	d0 07		bne $9023			bne 	_CCVNext  					; didn't match go to next.
.901c	90 f4		bcc $9012			bcc 	_CCVCompare 				; not finished yet.
.901e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9021	f0 41		beq $9064			beq 	_CCVFound 					; yes, we were successful
.9023					_CCVNext:
.9023	18		clc				clc
.9024	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9026	65 36		adc $36				adc 	zTemp0
.9028	85 36		sta $36				sta 	zTemp0
.902a	90 d4		bcc $9000			bcc 	_CCVSearch
.902c	e6 37		inc $37				inc 	zTemp0+1
.902e	80 d0		bra $9000			bra 	_CCVSearch
.9030					_CCVFail:
.9030	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9032	ad 03 07	lda $0703			lda 	identHash
.9035	91 36		sta ($36),y			sta 	(zTemp0),y
.9037	c8		iny				iny 								; offset 2 is the type byte
.9038	ad 04 07	lda $0704			lda 	identTypeByte
.903b	91 36		sta ($36),y			sta 	(zTemp0),y
.903d	c8		iny				iny
.903e					_CCVData:
.903e	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9040	91 36		sta ($36),y			sta 	(zTemp0),y
.9042	c8		iny				iny
.9043	c0 08		cpy #$08			cpy 	#8
.9045	90 f7		bcc $903e			bcc 	_CCVData
.9047	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.904a					_CCVCopyName:
.904a	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.904d	91 36		sta ($36),y			sta 	(zTemp0),y
.904f	e8		inx				inx
.9050	c8		iny				iny
.9051	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9054	d0 f4		bne $904a			bne 	_CCVCopyName
.9056	98		tya				tya 								; patch offset
.9057	92 36		sta ($36)			sta 	(zTemp0)
.9059	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.905b	91 36		sta ($36),y			sta 	(zTemp0),y
.905d	88		dey				dey
.905e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9060	09 80		ora #$80			ora 	#$80
.9062	91 36		sta ($36),y			sta 	(zTemp0),y
.9064					_CCVFound:
.9064	20 5c 81	jsr $815c			jsr 	VariableClose 				; map out variables, perhaps.
.9067	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9069	38		sec				sec
.906a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.906c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.906e	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.9071	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9073	20 e9 8f	jsr $8fe9			jsr 	TokeniseWriteByte
.9076	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.95ac					DecimalScalarTable:
>95ac	66 66 66 66				.dword $66666666 ; 0.1
>95b0	de					.byte $de
>95b1	1f 85 eb 51				.dword $51eb851f ; 0.01
>95b5	db					.byte $db
>95b6	4c 37 89 41				.dword $4189374c ; 0.001
>95ba	d8					.byte $d8
>95bb	ac 8b db 68				.dword $68db8bac ; 0.0001
>95bf	d4					.byte $d4
>95c0	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>95c4	d1					.byte $d1
>95c5	83 de 1b 43				.dword $431bde83 ; 1e-06
>95c9	ce					.byte $ce
>95ca	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>95ce	ca					.byte $ca
>95cf	89 3b e6 55				.dword $55e63b89 ; 1e-08
>95d3	c7					.byte $c7
>95d4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>95d8	c4					.byte $c4
>95d9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>95dd	c0					.byte $c0
>95de	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>95e2	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.95e3					SyntaxError:
.95e3	a9 02		lda #$02		lda	#2
.95e5	4c 72 82	jmp $8272		jmp	ErrorHandler
.95e8					RangeError:
.95e8	a9 04		lda #$04		lda	#4
.95ea	4c 72 82	jmp $8272		jmp	ErrorHandler
.95ed					TypeError:
.95ed	a9 05		lda #$05		lda	#5
.95ef	4c 72 82	jmp $8272		jmp	ErrorHandler
.95f2					ArgumentError:
.95f2	a9 07		lda #$07		lda	#7
.95f4	4c 72 82	jmp $8272		jmp	ErrorHandler
.95f7					NotDoneError:
.95f7	a9 0c		lda #$0c		lda	#12
.95f9	4c 72 82	jmp $8272		jmp	ErrorHandler
.95fc					ErrorText:
>95fc	42 72 65 61 6b 00			.text	"Break",0
>9602	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>960a	72 72 6f 72 00
>960f	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9617	20 62 79 20 7a 65 72 6f 00
>9620	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9628	61 6e 67 65 00
>962d	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9635	6d 61 74 63 68 00
>963b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9643	65 6d 6f 72 79 00
>9649	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9651	61 72 67 75 6d 65 6e 74 00
>965a	53 74 6f 70 00				.text	"Stop",0
>965f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9667	6f 6f 20 6c 6f 6e 67 00
>966f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9677	6e 20 66 61 69 6c 65 64 00
>9680	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9688	61 74 61 00
>968c	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9694	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  End of listing
