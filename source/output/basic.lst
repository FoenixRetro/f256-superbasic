
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 18:17:48 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_STACK = 17
=18					ERRID_STRUCT = 18

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_DOWNTO                           = $a4; $a4 DOWNTO
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 ec 81	jsr $81ec			jsr 	NewCommand 					; erase current program
.8006	20 ad 8e	jsr $8ead			jsr 	BackloadProgram
.8009	4c 7c 82	jmp $827c			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 51 9a	jsr $9a51			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	0c 85					.word	ShiftLeft                        ; $00 <<
>8016	06 84					.word	BinaryCompareLessEqual           ; $01 <=
>8018	fc 83					.word	BinaryCompareNotEqual            ; $02 <>
>801a	5b 98					.word	SyntaxError                      ; $03 !!3
>801c	5b 98					.word	SyntaxError                      ; $04 ><
>801e	10 84					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	0f 85					.word	ShiftRight                       ; $06 >>
>8022	5b 98					.word	SyntaxError                      ; $07 !!7
>8024	5b 98					.word	SyntaxError                      ; $08 !!8
>8026	5b 98					.word	SyntaxError                      ; $09 !!9
>8028	5b 98					.word	SyntaxError                      ; $0a !!10
>802a	5b 98					.word	SyntaxError                      ; $0b !!11
>802c	5b 98					.word	SyntaxError                      ; $0c !!12
>802e	5b 98					.word	SyntaxError                      ; $0d !!13
>8030	5b 98					.word	SyntaxError                      ; $0e !!14
>8032	5b 98					.word	SyntaxError                      ; $0f !!15
>8034	5b 98					.word	SyntaxError                      ; $10 @
>8036	5b 98					.word	SyntaxError                      ; $11 !!17
>8038	5b 98					.word	SyntaxError                      ; $12 !!18
>803a	5b 98					.word	SyntaxError                      ; $13 [
>803c	bb 93					.word	IntegerDivide                    ; $14 \
>803e	5b 98					.word	SyntaxError                      ; $15 ]
>8040	95 86					.word	EorInteger                       ; $16 ^
>8042	5b 98					.word	SyntaxError                      ; $17 _
>8044	5b 98					.word	SyntaxError                      ; $18 `
>8046	5b 98					.word	SyntaxError                      ; $19 !!25
>8048	5b 98					.word	SyntaxError                      ; $1a !!26
>804a	5b 98					.word	SyntaxError                      ; $1b {
>804c	4f 86					.word	OraInteger                       ; $1c |
>804e	5b 98					.word	SyntaxError                      ; $1d }
>8050	5b 98					.word	SyntaxError                      ; $1e ~
>8052	5b 98					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	5b 98					.word	SyntaxError                      ; $20
>8056	db 86					.word	WordIndirect                     ; $21 !
>8058	5b 98					.word	SyntaxError                      ; $22 "
>805a	5b 98					.word	SyntaxError                      ; $23 #
>805c	5b 98					.word	SyntaxError                      ; $24 $
>805e	08 94					.word	IntegerModulus                   ; $25 %
>8060	09 86					.word	AndInteger                       ; $26 &
>8062	5b 98					.word	SyntaxError                      ; $27 '
>8064	5b 98					.word	SyntaxError                      ; $28 (
>8066	5b 98					.word	SyntaxError                      ; $29 )
>8068	7d 94					.word	MulInteger                       ; $2a *
>806a	a3 85					.word	AddInteger                       ; $2b +
>806c	5b 98					.word	SyntaxError                      ; $2c ,
>806e	de 85					.word	SubInteger                       ; $2d -
>8070	5b 98					.word	SyntaxError                      ; $2e .
>8072	14 96					.word	FDivideCommand                   ; $2f /
>8074	5b 98					.word	SyntaxError                      ; $30 0
>8076	5b 98					.word	SyntaxError                      ; $31 1
>8078	5b 98					.word	SyntaxError                      ; $32 2
>807a	5b 98					.word	SyntaxError                      ; $33 3
>807c	5b 98					.word	SyntaxError                      ; $34 4
>807e	5b 98					.word	SyntaxError                      ; $35 5
>8080	5b 98					.word	SyntaxError                      ; $36 6
>8082	5b 98					.word	SyntaxError                      ; $37 7
>8084	5b 98					.word	SyntaxError                      ; $38 8
>8086	5b 98					.word	SyntaxError                      ; $39 9
>8088	5b 98					.word	SyntaxError                      ; $3a :
>808a	5b 98					.word	SyntaxError                      ; $3b ;
>808c	e8 83					.word	BinaryCompareLess                ; $3c <
>808e	de 83					.word	BinaryCompareEqual               ; $3d =
>8090	f2 83					.word	BinaryCompareGreater             ; $3e >
>8092	02 87					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	c7 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	d4 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	5b 98					.word	SyntaxError                      ; $82 !2:SH2
>809a	5a 97					.word	AbsUnary                         ; $83 ABS(
>809c	45 8b					.word	AllocUnary                       ; $84 ALLOC(
>809e	6a 97					.word	AscUnary                         ; $85 ASC(
>80a0	e2 8b					.word	ChrUnary                         ; $86 CHR$(
>80a2	da 83					.word	UnaryFalse                       ; $87 FALSE
>80a4	77 97					.word	FracUnary                        ; $88 FRAC(
>80a6	8d 97					.word	IntUnary                         ; $89 INT(
>80a8	e3 97					.word	IsValUnary                       ; $8a ISVAL(
>80aa	bc 8c					.word	Unary_Left                       ; $8b LEFT$(
>80ac	9f 97					.word	LenUnary                         ; $8c LEN(
>80ae	e6 8c					.word	Unary_Mid                        ; $8d MID$(
>80b0	7f 8b					.word	Unary_Not                        ; $8e NOT(
>80b2	cc 8c					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	95 8b					.word	Unary_Rnd                        ; $90 RND(
>80b6	b9 97					.word	SgnUnary                         ; $91 SGN(
>80b8	f4 8b					.word	SpcUnary                         ; $92 SPC(
>80ba	0f 8c					.word	Unary_Str                        ; $93 STR$(
>80bc	ce 83					.word	UnaryTrue                        ; $94 TRUE
>80be	d9 97					.word	ValUnary                         ; $95 VAL(
>80c0	5b 98					.word	SyntaxError                      ; $96 FOR
>80c2	98 81					.word	IfCommand                        ; $97 IF
>80c4	dc 82					.word	Unused1                          ; $98 PROC
>80c6	5a 82					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	3a 83					.word	Command_WHILE                    ; $9a WHILE
>80ca	5b 98					.word	SyntaxError                      ; $9b ENDIF
>80cc	5b 98					.word	SyntaxError                      ; $9c ENDPROC
>80ce	5b 98					.word	SyntaxError                      ; $9d NEXT
>80d0	63 82					.word	Command_UNTIL                    ; $9e UNTIL
>80d2	5b 83					.word	Command_WEND                     ; $9f WEND
>80d4	1c 81					.word	CallCommand                      ; $a0 CALL
>80d6	5b 98					.word	SyntaxError                      ; $a1 CLS
>80d8	5b 98					.word	SyntaxError                      ; $a2 DATA
>80da	5b 98					.word	SyntaxError                      ; $a3 DIM
>80dc	dc 82					.word	Unused3                          ; $a4 DOWNTO
>80de	67 81					.word	Command_GOSUB                    ; $a5 GOSUB
>80e0	85 81					.word	GotoCommand                      ; $a6 GOTO
>80e2	bd 81					.word	LetCommand                       ; $a7 LET
>80e4	f6 81					.word	Command_Print                    ; $a8 PRINT
>80e6	5b 98					.word	SyntaxError                      ; $a9 READ
>80e8	4d 82					.word	RemCommand                       ; $aa REM
>80ea	77 81					.word	Command_RETURN                   ; $ab RETURN
>80ec	5b 98					.word	SyntaxError                      ; $ac THEN
>80ee	dc 82					.word	Unused2                          ; $ad TO
.80f0					VectorSet1:
>80f0	5b 98					.word	SyntaxError                      ; $80 !0:EOF
>80f2	5b 98					.word	SyntaxError                      ; $81 !1:SH1
>80f4	5b 98					.word	SyntaxError                      ; $82 !2:SH2
>80f6	0c 81					.word	AssertCommand                    ; $83 ASSERT
>80f8	2a 81					.word	ClearCommand                     ; $84 CLEAR
>80fa	64 81					.word	EndCommand                       ; $85 END
>80fc	5b 98					.word	SyntaxError                      ; $86 LIST
>80fe	ec 81					.word	NewCommand                       ; $87 NEW
>8100	5b 98					.word	SyntaxError                      ; $88 RESTORE
>8102	7c 82					.word	CommandRUN                       ; $89 RUN
>8104	5b 98					.word	SyntaxError                      ; $8a STOP
.8106					VectorSet2:
>8106	5b 98					.word	SyntaxError                      ; $80 !0:EOF
>8108	5b 98					.word	SyntaxError                      ; $81 !1:SH1
>810a	5b 98					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810c					AssertCommand:
.810c	a2 00		ldx #$00			ldx 	#0
.810e	20 87 8d	jsr $8d87			jsr 	EvaluateInteger 			; the assert test
.8111	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; exit if result is non zero.
.8114	d0 05		bne $811b			bne 	_ACExit
.8116	a9 0a		lda #$0a		lda	#10
.8118	4c 69 83	jmp $8369		jmp	ErrorHandler
.811b					_ACExit:
.811b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811c					CallCommand:
.811c	a2 00		ldx #$00			ldx 	#0
.811e	20 9c 8d	jsr $8d9c			jsr 	Evaluate16BitInteger
.8121	ad 10 06	lda $0610			lda 	NSMantissa1
.8124	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8127	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812a					ClearCommand:
.812a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812c	85 36		sta $36				sta 	0+zTemp0
.812e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8130	85 37		sta $37				sta 	1+zTemp0
.8132					_ClearZeroLoop:
.8132	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8134	f0 18		beq $814e			beq 	_ClearZeroEnd
.8136	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8138	a9 00		lda #$00			lda 	#0
.813a					_ClearOneVariable:
.813a	91 36		sta ($36),y			sta 	(zTemp0),y
.813c	c8		iny				iny
.813d	c0 08		cpy #$08			cpy 	#8
.813f	d0 f9		bne $813a			bne 	_ClearOneVariable
.8141	18		clc				clc 								; go to the next variable
.8142	b2 36		lda ($36)			lda 	(zTemp0)
.8144	65 36		adc $36				adc 	zTemp0
.8146	85 36		sta $36				sta 	zTemp0
.8148	90 e8		bcc $8132			bcc 	_ClearZeroLoop
.814a	e6 37		inc $37				inc 	zTemp0+1
.814c	80 e4		bra $8132			bra 	_ClearZeroLoop
.814e					_ClearZeroEnd:
.814e	18		clc				clc
.814f	a5 36		lda $36				lda 	zTemp0
.8151	69 01		adc #$01			adc 	#1
.8153	8d 0c 07	sta $070c			sta 	lowMemPtr
.8156	a5 37		lda $37				lda 	zTemp0+1
.8158	69 00		adc #$00			adc 	#0
.815a	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815d	20 a0 8e	jsr $8ea0			jsr 	StackReset
.8160	20 dd 99	jsr $99dd			jsr 	StringSystemInitialise
.8163	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8164					EndCommand:
.8164	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8167					Command_GOSUB:
.8167	a2 00		ldx #$00			ldx 	#0
.8169	20 9c 8d	jsr $8d9c			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.816c	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.816e	20 4d 8e	jsr $8e4d			jsr 	StackOpen 					; create frame
.8171	20 7f 8e	jsr $8e7f			jsr 	STKSaveCodePosition 		; save current position
.8174	4c 8a 81	jmp $818a			jmp 	GotoStackX
.8177					Command_RETURN:
.8177	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8179	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.817b	20 74 8e	jsr $8e74			jsr 	StackCheckFrame
.817e	20 90 8e	jsr $8e90			jsr 	STKLoadCodePosition 		; restore code position
.8181	20 66 8e	jsr $8e66			jsr 	StackClose
.8184	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8185					GotoCommand:
.8185	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8187	20 9c 8d	jsr $8d9c			jsr 	Evaluate16BitInteger
.818a					GotoStackX:
.818a	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.818d	48		pha				pha 								; it is slightly inefficient, just in cases.
.818e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8191	fa		plx				plx
.8192	20 70 93	jsr $9370			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8195	4c 87 82	jmp $8287			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8198					IfCommand:
.8198	a2 00		ldx #$00			ldx 	#0 							; If what.
.819a	20 64 8d	jsr $8d64			jsr 	EvaluateNumber
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 ac		cmp #$ac			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.81a1	f0 04		beq $81a7			beq 	_IfOldStyle
.81a3	c9 a6		cmp #$a6			cmp 	#KWD_GOTO
.81a5	d0 13		bne $81ba			bne 	_IfStructured
.81a7					_IfOldStyle:
.81a7	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; is it zero
.81aa	f0 0b		beq $81b7			beq 	_IfFail 					; if fail, go to next line
.81ac	b1 30		lda ($30),y			lda 	(codePtr),y
.81ae	c8		iny				iny 								; consume GOTO or THEN
.81af	c9 a6		cmp #$a6			cmp 	#KWD_GOTO
.81b1	f0 01		beq $81b4			beq 	_IfGoto
.81b3	60		rts				rts 								; if THEN just continue
.81b4					_IfGoto:
.81b4	4c 85 81	jmp $8185			jmp 	GotoCommand
.81b7					_IfFail:
.81b7	4c c7 82	jmp $82c7			jmp 	EOLCommand
.81ba					_IfStructured:
>81ba	db						.byte 	$DB 						; causes a break in the emulator
.81bb	80 fd		bra $81ba			bra 	_IfStructured

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.81bd					LetCommand:
.81bd	a2 00		ldx #$00			ldx 	#0
.81bf	ad 53 87	lda $8753			lda 	PrecedenceLevel+"*"			; precedence > this
.81c2	20 6d 87	jsr $876d			jsr 	EvaluateExpressionAtPrecedence
.81c5	a9 3d		lda #$3d			lda 	#"=" 						; check =
.81c7	20 b2 93	jsr $93b2			jsr 	CheckNextA
.81ca	e8		inx				inx 								; RHS
.81cb	20 5b 8d	jsr $8d5b			jsr 	EvaluateValue
.81ce	ca		dex				dex
.81cf	20 d3 81	jsr $81d3			jsr 	AssignVariable
.81d2	60		rts				rts
.81d3					AssignVariable:
.81d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.81d6	48		pha				pha 								; save a copy
.81d7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.81da	29 10		and #$10			and 	#NSBIsString
.81dc	d0 0b		bne $81e9			bne 	_ASError
.81de	68		pla				pla 								; get back
.81df	29 10		and #$10			and 	#NSBIsString 				; check type
.81e1	d0 03		bne $81e6			bne 	_ASString
.81e3	4c a8 87	jmp $87a8			jmp 	AssignNumber
.81e6					_ASString:
.81e6	4c 16 88	jmp $8816			jmp 	AssignString
.81e9					_ASError:
.81e9	4c 65 98	jmp $9865			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.81ec					NewCommand:
.81ec	20 1f 93	jsr $931f			jsr 	MemoryNew
.81ef	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81f2	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear everything.
.81f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.81f6					Command_Print:
.81f6	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.81f7					_CPLoop:
.81f7	08		php				php 								; save last action flag
.81f8	b1 30		lda ($30),y			lda 	(codePtr),y
.81fa	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81fc	f0 46		beq $8244			beq 	_CPExit
.81fe	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8200	f0 42		beq $8244			beq 	_CPExit
.8202	68		pla				pla 								; throw last action flag
.8203	b1 30		lda ($30),y			lda 	(codePtr),y
.8205	c8		iny				iny
.8206	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8208	f0 37		beq $8241			beq 	_CPContinueWithSameLine
.820a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.820c	f0 2e		beq $823c			beq 	_CPTab
.820e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8210	f0 26		beq $8238			beq 	_CPNewLine
.8212	88		dey				dey 								; undo the get.
.8213	a2 00		ldx #$00			ldx 	#0
.8215	20 5b 8d	jsr $8d5b			jsr 	EvaluateValue 				; get a value into slot 0
.8218	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.821b	29 10		and #$10			and 	#NSBIsString
.821d	f0 0b		beq $822a			beq 	_CPNumber
.821f	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8222	ad 08 06	lda $0608			lda 	NSMantissa0
.8225	20 bb 83	jsr $83bb			jsr 	PrintStringXA
.8228	80 cc		bra $81f6			bra 	Command_Print 				; loop round clearing carry so NL if end
.822a					_CPNumber:
.822a	a9 05		lda #$05			lda 	#5 							; maximum decimals
.822c	20 31 8c	jsr $8c31			jsr 	ConvertNumberToString 		; convert to string
.822f	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8231	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8233	20 bb 83	jsr $83bb			jsr 	PrintStringXA
.8236	80 be		bra $81f6			bra 	Command_Print 				; loop round clearing carry so NL if end
.8238					_CPNewLine:
.8238	a9 0d		lda #$0d			lda 	#13
.823a	80 02		bra $823e			bra 	_CPPrintChar
.823c					_CPTab:
.823c	a9 09		lda #$09			lda 	#9 							; print TAB
.823e					_CPPrintChar:
.823e	20 51 9a	jsr $9a51			jsr 	EXTPrintCharacter
.8241					_CPContinueWithSameLine:
.8241	38		sec				sec 								; loop round with carry set, which
.8242	80 b3		bra $81f7			bra 	_CPLoop 					; will inhibit final CR
.8244					_CPExit:
.8244	28		plp				plp 								; get last action flag
.8245	b0 05		bcs $824c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8247	a9 0d		lda #$0d			lda 	#13 						; print new line
.8249	20 51 9a	jsr $9a51			jsr 	EXTPrintCharacter
.824c					_CPExit2:
.824c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.824d					RemCommand:
.824d	b1 30		lda ($30),y			lda 	(codePtr),y
.824f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8251	d0 06		bne $8259			bne 	_RMExit
.8253	c8		iny				iny
.8254	98		tya				tya
.8255	38		sec				sec
.8256	71 30		adc ($30),y			adc 	(codePtr),y
.8258	a8		tay				tay
.8259					_RMExit:
.8259	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.825a					Command_REPEAT:
.825a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.825c	20 4d 8e	jsr $8e4d			jsr 	StackOpen
.825f	20 7f 8e	jsr $8e7f			jsr 	STKSaveCodePosition 		; save loop position
.8262	60		rts				rts
.8263					Command_UNTIL:
.8263	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8265	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8267	20 74 8e	jsr $8e74			jsr 	StackCheckFrame
.826a	a2 00		ldx #$00			ldx 	#0
.826c	20 64 8d	jsr $8d64			jsr 	EvaluateNumber 				; work out the number
.826f	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; check if zero
.8272	f0 04		beq $8278			beq 	_CULoopBack 				; if so keep looping
.8274	20 66 8e	jsr $8e66			jsr 	StackClose		 			; return
.8277	60		rts				rts
.8278					_CULoopBack:
.8278	20 90 8e	jsr $8e90			jsr 	STKLoadCodePosition 		; loop back
.827b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.827c					CommandRUN:
.827c	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.827f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8281	85 30		sta $30				sta 	codePtr
.8283	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8285	85 31		sta $31				sta 	codePtr+1
.8287					RUNNewLine:
.8287	b2 30		lda ($30)			lda 	(codePtr)
.8289	f0 39		beq $82c4			beq 	CRNoProgram         		; no then END.
.828b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.828d	9a		txs				txs
.828e					RUNCodePointerLine:
.828e	a0 02		ldy #$02			ldy 	#2 							; start of program
.8290					_CRIncMainLoop:
.8290	c8		iny				iny
.8291					_CRMainLoop:
.8291	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8294	b1 30		lda ($30),y			lda 	(codePtr),y
.8296	10 10		bpl $82a8			bpl 	_CRNotKeyword
.8298	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.829a	b0 04		bcs $82a0			bcs 	_CRIsKeyword
.829c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.829e	b0 1e		bcs $82be			bcs		_CRSyntaxError
.82a0					_CRIsKeyword:
.82a0	c8		iny				iny 								; consume command
.82a1	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.82a2	aa		tax				tax 								; put in X for vector jump
.82a3	20 c1 82	jsr $82c1			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.82a6	80 e9		bra $8291			bra 	_CRMainLoop 				; and loop round
.82a8					_CRNotKeyword:
.82a8	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.82aa	f0 e4		beq $8290			beq 	_CRIncMainLoop
.82ac	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.82ae	90 05		bcc $82b5			bcc 	_CRNotVariable
.82b0					_CRGoLet:
.82b0	20 bd 81	jsr $81bd			jsr 	LetCommand
.82b3	80 dc		bra $8291			bra 	_CRMainLoop
.82b5					_CRNotVariable:
.82b5	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.82b7	f0 f7		beq $82b0			beq 	_CRGoLet
.82b9	c9 21		cmp #$21			cmp 	#KWD_PLING
.82bb	f0 f3		beq $82b0			beq 	_CRGoLet
>82bd	db						.byte 	$DB 						; causes a break in the emulator
.82be					_CRSyntaxError:
.82be	4c 5b 98	jmp $985b			jmp 	SyntaxError
.82c1					_CRCallVector0:
.82c1	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.82c4					CRNoProgram:
.82c4	4c 64 81	jmp $8164			jmp 	EndCommand
.82c7					EOLCommand:
.82c7	18		clc				clc
.82c8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.82ca	65 30		adc $30				adc 	codePtr
.82cc	85 30		sta $30				sta 	codePtr
.82ce	90 02		bcc $82d2			bcc 	_CREExit
.82d0	e6 31		inc $31				inc 	codePtr+1
.82d2					_CREExit:
.82d2	80 b3		bra $8287			bra 	RunNewLine
.82d4					Shift1Command:
.82d4	b1 30		lda ($30),y			lda 	(codePtr),y
.82d6	c8		iny				iny
.82d7	0a		asl a				asl 	a
.82d8	aa		tax				tax
.82d9	7c f0 80	jmp ($80f0,x)			jmp 	(VectorSet1,x)
.82dc					Unused1:
.82dc					Unused2:
.82dc					Unused3:
.82dc	4c 5b 98	jmp $985b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/scanforward.asm

.82df					ScanForward:
.82df	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.82e1	86 37		stx $37				stx 	zTemp0+1
.82e3	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.82e5					_ScanLoop:
.82e5	b1 30		lda ($30),y			lda 	(codePtr),y
.82e7	c8		iny				iny
.82e8	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.82ea	d0 09		bne $82f5			bne 	_ScanGoNext
.82ec	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.82ee	f0 04		beq $82f4			beq 	_ScanMatch
.82f0	c5 37		cmp $37				cmp 	zTemp0+1
.82f2	d0 01		bne $82f5			bne 	_ScanGoNext
.82f4					_ScanMatch:
.82f4	60		rts				rts
.82f5					_ScanGoNext:
.82f5	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.82f7	90 ec		bcc $82e5			bcc 	_ScanLoop
.82f9	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.82fb	90 18		bcc $8315			bcc 	_ScanSkipOne
.82fd	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.82ff	b0 2f		bcs $8330			bcs 	_ScanSkipData
.8301	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8303	90 e0		bcc $82e5			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8305	c9 a0		cmp #$a0			cmp 	#KWC_LAST_STRUCTURE+1
.8307	b0 dc		bcs $82e5			bcs 	_ScanLoop
.8309	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.830b	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.830d	b0 d6		bcs $82e5			bcs 	_ScanLoop
.830f	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8311	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8313	80 d0		bra $82e5			bra 	_ScanLoop
.8315					_ScanSkipOne:
.8315	c8		iny				iny 								; consume the extra one.
.8316	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8318	d0 cb		bne $82e5			bne 	_ScanLoop
.831a	18		clc				clc
.831b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.831d	65 30		adc $30				adc 	codePtr
.831f	85 30		sta $30				sta 	codePtr
.8321	90 02		bcc $8325			bcc 	_CREExit
.8323	e6 31		inc $31				inc 	codePtr+1
.8325					_CREExit:
.8325	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8327	b2 30		lda ($30)			lda 	(codePtr)
.8329	d0 ba		bne $82e5			bne 	_ScanLoop 					; if not zero, more to scan
.832b	a9 12		lda #$12		lda	#18
.832d	4c 69 83	jmp $8369		jmp	ErrorHandler
.8330					_ScanSkipData:
.8330	84 39		sty $39				sty 	zTemp1+1 					; add that to Y - this is done because of macros
.8332	b1 30		lda ($30),y			lda 	(codePtr),y
.8334	38		sec				sec 								; add extra one for the length
.8335	65 39		adc $39				adc 	zTemp1+1
.8337	a8		tay				tay
.8338	80 ab		bra $82e5			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.833a					Command_WHILE:
.833a	5a		phy				phy 								; save position of the test
.833b	a2 00		ldx #$00			ldx 	#0
.833d	20 64 8d	jsr $8d64			jsr 	EvaluateNumber 				; work out the number
.8340	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; check if zero
.8343	f0 0e		beq $8353			beq 	_WHExitLoop 				; if so exit the loop
.8345	98		tya				tya 								; position *after* test.
.8346	7a		ply				ply 								; restore position before test, at WHILE
.8347	88		dey				dey
.8348	48		pha				pha 								; push after test on the stack
.8349	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.834b	20 4d 8e	jsr $8e4d			jsr 	StackOpen
.834e	20 7f 8e	jsr $8e7f			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8351	7a		ply				ply 								; restore the position *after* the test
.8352	60		rts				rts
.8353					_WHExitLoop:
.8353	68		pla				pla 								; throw post loop position
.8354	a9 9f		lda #$9f			lda 	#KWD_WEND 					; scan forward past WEND
.8356	aa		tax				tax
.8357	20 df 82	jsr $82df			jsr 	ScanForward
.835a	60		rts				rts
.835b					Command_WEND:
.835b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.835d	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.835f	20 74 8e	jsr $8e74			jsr 	StackCheckFrame
.8362	20 90 8e	jsr $8e90			jsr 	STKLoadCodePosition 		; loop back
.8365	20 66 8e	jsr $8e66			jsr 	StackClose		 			; erase the frame
.8368	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.93a2					CheckRightBracket:
.93a2	b1 30		lda ($30),y			lda 	(codePtr),y
.93a4	c8		iny				iny
.93a5	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.93a7	d0 0f		bne $93b8			bne 	CNAFail
.93a9	60		rts				rts
.93aa					CheckComma:
.93aa	b1 30		lda ($30),y			lda 	(codePtr),y
.93ac	c8		iny				iny
.93ad	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.93af	d0 07		bne $93b8			bne 	CNAFail
.93b1	60		rts				rts
.93b2					CheckNextA:
.93b2	d1 30		cmp ($30),y			cmp 	(codePtr),y
.93b4	d0 02		bne $93b8			bne 	CNAFail
.93b6	c8		iny				iny 								; skip character
.93b7	60		rts				rts 								; and exit
.93b8					CNAFail:
.93b8	4c 5b 98	jmp $985b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8369					ErrorHandler:
.8369	a8		tay				tay 								; find the error text
.836a	f0 42		beq $83ae			beq 	_EHEnd
.836c	a2 00		ldx #$00			ldx 	#0
.836e					_EHFind:
.836e	88		dey				dey 								; found the error text ?
.836f	f0 0a		beq $837b			beq 	_EHFound
.8371					_EHFindZero:
.8371	bd 74 98	lda $9874,x			lda 	ErrorText,x 				; find the next error
.8374	e8		inx				inx
.8375	c9 00		cmp #$00			cmp 	#0
.8377	d0 f8		bne $8371			bne 	_EHFindZero
.8379	80 f3		bra $836e			bra 	_EHFind
.837b					_EHFound:
.837b	bd 74 98	lda $9874,x			lda 	ErrorText,x 				; print the message
.837e	20 51 9a	jsr $9a51			jsr 	EXTPrintCharacter
.8381	e8		inx				inx
.8382	bd 74 98	lda $9874,x			lda 	ErrorText,x
.8385	d0 f4		bne $837b			bne 	_EHFound
.8387	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8389	b1 30		lda ($30),y			lda 	(codePtr),y
.838b	d0 05		bne $8392			bne 	_EHAtMsg
.838d	c8		iny				iny
.838e	b1 30		lda ($30),y			lda 	(codePtr),y
.8390	f0 17		beq $83a9			beq 	_EHCREnd
.8392					_EHAtMsg:
.8392	a2 83		ldx #$83			ldx 	#_AtMsg >> 8 				; print " at "
.8394	a9 b1		lda #$b1			lda 	#_AtMsg & $FF
.8396	20 bb 83	jsr $83bb			jsr 	PrintStringXA
.8399	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.839b	b1 30		lda ($30),y			lda 	(codePtr),y
.839d	48		pha				pha
.839e	c8		iny				iny
.839f	b1 30		lda ($30),y			lda 	(codePtr),y
.83a1	aa		tax				tax
.83a2	68		pla				pla
.83a3	20 fe 94	jsr $94fe			jsr 	ConvertInt16 				; convert XA to string
.83a6	20 bb 83	jsr $83bb			jsr 	PrintStringXA 				; and print it.
.83a9					_EHCREnd:
.83a9	a9 0d		lda #$0d			lda 	#13 						; new line
.83ab	20 51 9a	jsr $9a51			jsr 	EXTPrintCharacter
.83ae					_EHEnd:
.83ae	4c 0c 80	jmp $800c			jmp 	WarmStart
>83b1	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>83b9	20 00
.83bb					PrintStringXA:
.83bb	5a		phy				phy
.83bc	86 37		stx $37				stx 	zTemp0+1
.83be	85 36		sta $36				sta 	zTemp0
.83c0	a0 00		ldy #$00			ldy 	#0
.83c2					_PSXALoop:
.83c2	b1 36		lda ($36),y			lda 	(zTemp0),y
.83c4	f0 06		beq $83cc			beq 	_PSXAExit
.83c6	20 51 9a	jsr $9a51			jsr 	EXTPrintCharacter
.83c9	c8		iny				iny
.83ca	80 f6		bra $83c2			bra 	_PSXALoop
.83cc					_PSXAExit:
.83cc	7a		ply				ply
.83cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.83ce					UnaryTrue:
.83ce	fa		plx				plx
.83cf					ReturnTrue:
.83cf	a9 01		lda #$01			lda 	#1  						; set to 1
.83d1	20 12 8e	jsr $8e12			jsr 	NSMSetByte
.83d4	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.83d6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.83d9	60		rts				rts
.83da					UnaryFalse:
.83da	fa		plx				plx
.83db					ReturnFalse:
.83db	4c 10 8e	jmp $8e10			jmp 	NSMSetZero 					; set it all to zero
.83de					BinaryCompareEqual:
.83de	fa		plx				plx
.83df	20 1a 84	jsr $841a			jsr 	CompareBaseCode
.83e2	c9 00		cmp #$00			cmp 	#0
.83e4	f0 e9		beq $83cf			beq 	ReturnTrue
.83e6	80 f3		bra $83db			bra 	ReturnFalse
.83e8					BinaryCompareLess:
.83e8	fa		plx				plx
.83e9	20 1a 84	jsr $841a			jsr 	CompareBaseCode
.83ec	c9 ff		cmp #$ff			cmp 	#$FF
.83ee	f0 df		beq $83cf			beq 	ReturnTrue
.83f0	80 e9		bra $83db			bra 	ReturnFalse
.83f2					BinaryCompareGreater:
.83f2	fa		plx				plx
.83f3	20 1a 84	jsr $841a			jsr 	CompareBaseCode
.83f6	c9 01		cmp #$01			cmp 	#1
.83f8	f0 d5		beq $83cf			beq 	ReturnTrue
.83fa	80 df		bra $83db			bra 	ReturnFalse
.83fc					BinaryCompareNotEqual:
.83fc	fa		plx				plx
.83fd	20 1a 84	jsr $841a			jsr 	CompareBaseCode
.8400	c9 00		cmp #$00			cmp 	#0
.8402	d0 cb		bne $83cf			bne 	ReturnTrue
.8404	80 d5		bra $83db			bra 	ReturnFalse
.8406					BinaryCompareLessEqual:
.8406	fa		plx				plx
.8407	20 1a 84	jsr $841a			jsr 	CompareBaseCode
.840a	c9 01		cmp #$01			cmp 	#1
.840c	d0 c1		bne $83cf			bne 	ReturnTrue
.840e	80 cb		bra $83db			bra 	ReturnFalse
.8410					BinaryCompareGreaterEqual:
.8410	fa		plx				plx
.8411	20 1a 84	jsr $841a			jsr 	CompareBaseCode
.8414	c9 ff		cmp #$ff			cmp 	#$FF
.8416	d0 b7		bne $83cf			bne 	ReturnTrue
.8418	80 c1		bra $83db			bra 	ReturnFalse
.841a					CompareBaseCode:
.841a	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; make both values if references.
.841d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8420	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8423	29 10		and #$10			and 	#NSTString
.8425	d0 40		bne $8467			bne 	_CBCString
.8427	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.842a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.842d	d0 3b		bne $846a			bne 	_CBCFloat
.842f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8432	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8435	29 08		and #$08			and 	#NSTFloat
.8437	d0 31		bne $846a			bne 	_CBCFloat
.8439	20 6d 84	jsr $846d			jsr 	CompareFixMinusZero
.843c	e8		inx				inx
.843d	20 6d 84	jsr $846d			jsr 	CompareFixMinusZero
.8440	ca		dex				dex
.8441	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8444	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8447	10 0b		bpl $8454			bpl 	_CDCSameSign
.8449	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.844c	30 16		bmi $8464			bmi 	_CBCLess 					; return $FF
.844e					_CBCGreater:
.844e	a9 01		lda #$01			lda 	#1
.8450	60		rts				rts
.8451					_CBCEqual:
.8451	a9 00		lda #$00			lda 	#0
.8453	60		rts				rts
.8454					_CDCSameSign:
.8454	20 7d 85	jsr $857d			jsr 	SubTopTwoStack 				; unsigned subtract
.8457	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; or the mantissa together
.845a	f0 f5		beq $8451			beq 	_CBCEqual 					; -0 == 0
.845c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.845f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8462	10 ea		bpl $844e			bpl 	_CBCGreater
.8464					_CBCLess:
.8464	a9 ff		lda #$ff			lda 	#$FF
.8466	60		rts				rts
.8467					_CBCString:
.8467	4c d3 84	jmp $84d3			jmp 	CompareStrings
.846a					_CBCFloat:
.846a	4c fa 95	jmp $95fa			jmp 	CompareFloat
.846d					CompareFixMinusZero:
.846d	20 40 8e	jsr $8e40			jsr 	NSMIsZero
.8470	d0 03		bne $8475			bne 	_CFXMZNotZero
.8472	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8475					_CFXMZNotZero:
.8475	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8476					StringConcat:
.8476	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8479	3d 01 06	and $0601,x			and 	NSStatus+1,x
.847c	29 18		and #$18			and 	#NSBTypeMask
.847e	c9 10		cmp #$10			cmp 	#NSTString
.8480	d0 4e		bne $84d0			bne		_SCType
.8482	64 38		stz $38				stz 	zTemp1 						; counting total length
.8484	e8		inx				inx
.8485	20 a3 84	jsr $84a3			jsr 	_SCSetupZ0 					; setup for second
.8488	20 ae 84	jsr $84ae			jsr 	_SCLengthZ0 				; length for second
.848b	ca		dex				dex
.848c	20 a3 84	jsr $84a3			jsr 	_SCSetupZ0 					; setup for first
.848f	20 ae 84	jsr $84ae			jsr 	_SCLengthZ0 				; length for first
.8492	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8494	20 fe 99	jsr $99fe			jsr 	StringTempAllocate
.8497	20 c1 84	jsr $84c1			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.849a	e8		inx				inx
.849b	20 a3 84	jsr $84a3			jsr 	_SCSetupZ0 					; copy second out
.849e	20 c1 84	jsr $84c1			jsr 	_SCCopy
.84a1	ca		dex				dex
.84a2	60		rts				rts
.84a3					_SCSetupZ0:
.84a3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.84a6	85 36		sta $36				sta 	zTemp0
.84a8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84ab	85 37		sta $37				sta 	zTemp0+1
.84ad	60		rts				rts
.84ae					_SCLengthZ0:
.84ae	5a		phy				phy
.84af	a0 00		ldy #$00			ldy 	#0
.84b1					_SCLenLoop:
.84b1	b1 36		lda ($36),y			lda 	(zTemp0),y
.84b3	f0 0a		beq $84bf			beq 	_SCLExit
.84b5	c8		iny				iny
.84b6	e6 38		inc $38				inc 	zTemp1
.84b8	10 f7		bpl $84b1			bpl		_SCLenLoop
.84ba	a9 09		lda #$09		lda	#9
.84bc	4c 69 83	jmp $8369		jmp	ErrorHandler
.84bf					_SCLExit:
.84bf	7a		ply				ply
.84c0	60		rts				rts
.84c1					_SCCopy:
.84c1	5a		phy				phy
.84c2	a0 00		ldy #$00			ldy 	#0
.84c4					_SCCopyLoop:
.84c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.84c6	f0 06		beq $84ce			beq 	_SCCExit
.84c8	20 3c 9a	jsr $9a3c			jsr 	StringTempWrite
.84cb	c8		iny				iny
.84cc	80 f6		bra $84c4			bra 	_SCCopyLoop
.84ce					_SCCExit:
.84ce	7a		ply				ply
.84cf	60		rts				rts
.84d0					_SCType:
.84d0	4c 65 98	jmp $9865			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.93bb					IntegerDivide:
.93bb	fa		plx				plx
.93bc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.93bf	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.93c2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93c3	0a		asl a				asl 	a
.93c4	10 05		bpl $93cb			bpl 	_NotRef
.93c6	48		pha				pha
.93c7	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93ca	68		pla				pla
.93cb					_NotRef:
.93cb	0a		asl a				asl 	a
.93cc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93ce	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93d1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.93d4	f0 03		beq $93d9			beq 	_IntegerCode 				; if clear, then we have two integers
.93d6	4c 65 98	jmp $9865			jmp 	TypeError 					; anything else, type mismatch.
.93d9					_IntegerCode:
.93d9	20 fb 93	jsr $93fb			jsr 	CheckDivideZero 			; do div zero check
.93dc	20 33 94	jsr $9433			jsr 	Int32Divide 				; do the division
.93df	20 f0 94	jsr $94f0			jsr 	CalculateSign 				; calculate result sign
.93e2					NSMCopyPlusTwoToZero:
.93e2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.93e5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93e8	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.93eb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93ee	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.93f1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93f4	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.93f7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.93fa	60		rts				rts
.93fb					CheckDivideZero:
.93fb	e8		inx				inx
.93fc	20 40 8e	jsr $8e40			jsr 	NSMIsZero
.93ff	f0 02		beq $9403			beq 	_CDVError
.9401	ca		dex				dex
.9402	60		rts				rts
.9403					_CDVError:
.9403	a9 03		lda #$03		lda	#3
.9405	4c 69 83	jmp $8369		jmp	ErrorHandler
.9408					IntegerModulus:
.9408	fa		plx				plx
.9409	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.940c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.940f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9410	0a		asl a				asl 	a
.9411	10 05		bpl $9418			bpl 	_NotRef
.9413	48		pha				pha
.9414	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9417	68		pla				pla
.9418					_NotRef:
.9418	0a		asl a				asl 	a
.9419	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.941b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.941e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9421	f0 03		beq $9426			beq 	_IntegerCode 				; if clear, then we have two integers
.9423	4c 65 98	jmp $9865			jmp 	TypeError 					; anything else, type mismatch.
.9426					_IntegerCode:
.9426	20 fb 93	jsr $93fb			jsr 	CheckDivideZero 			; do div zero check
.9429	20 33 94	jsr $9433			jsr 	Int32Divide 				; do the division
.942c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.942f	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9432	60		rts				rts
.9433					Int32Divide:
.9433	48		pha				pha 								; save AXY
.9434	5a		phy				phy
.9435	20 e7 8d	jsr $8de7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9438	20 0c 8e	jsr $8e0c			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.943b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.943d					_I32DivideLoop:
.943d	e8		inx				inx
.943e	e8		inx				inx
.943f	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9442	ca		dex				dex
.9443	ca		dex				dex
.9444	20 26 8e	jsr $8e26			jsr 	NSMRotateLeft
.9447	20 73 94	jsr $9473			jsr 	DivideCheckSubtract 		; check if subtract possible
.944a	90 03		bcc $944f			bcc 	_I32DivideNoCarryIn
.944c	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.944f					_I32DivideNoCarryIn:
.944f	88		dey				dey 								; loop round till division completed.
.9450	d0 eb		bne $943d			bne 	_I32DivideLoop
.9452	7a		ply				ply 								; restore AXY and exit
.9453	68		pla				pla
.9454	60		rts				rts
.9455					Int32ShiftDivide:
.9455	48		pha				pha 								; save AY
.9456	5a		phy				phy
.9457	e8		inx				inx 								; clear S[X+2]
.9458	e8		inx				inx
.9459	20 10 8e	jsr $8e10			jsr 	NSMSetZero
.945c	ca		dex				dex
.945d	ca		dex				dex
.945e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9460					_I32SDLoop:
.9460	20 73 94	jsr $9473			jsr 	DivideCheckSubtract 		; check if subtract possible
.9463	e8		inx				inx
.9464	e8		inx				inx
.9465	20 26 8e	jsr $8e26			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9468	ca		dex				dex
.9469	ca		dex				dex
.946a	20 26 8e	jsr $8e26			jsr 	NSMRotateLeft
.946d	88		dey				dey 	 							; do 31 times
.946e	d0 f0		bne $9460			bne 	_I32SDLoop
.9470	7a		ply				ply 								; restore AY and exit
.9471	68		pla				pla
.9472	60		rts				rts
.9473					DivideCheckSubtract:
.9473	20 7d 85	jsr $857d			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9476	b0 04		bcs $947c			bcs 	_DCSExit 					; if carry set, then could do, exit
.9478	20 57 85	jsr $8557			jsr 	AddTopTwoStack 				; add it back in
.947b	18		clc				clc 								; and return False
.947c					_DCSExit:
.947c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.947d					MulInteger:
.947d	fa		plx				plx
.947e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9481	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9484	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9485	0a		asl a				asl 	a
.9486	10 05		bpl $948d			bpl 	_NotRef
.9488	48		pha				pha
.9489	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.948c	68		pla				pla
.948d					_NotRef:
.948d	0a		asl a				asl 	a 							; put MSB of type into A:7
.948e	30 0b		bmi $949b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9490	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9493	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9496	f0 06		beq $949e			beq 	_IntegerCode 				; if clear, then we have two integers
.9498	4c d1 96	jmp $96d1			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.949b					_StringData:
.949b	4c 6f 98	jmp $986f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.949e					_IntegerCode:
.949e	20 ab 94	jsr $94ab			jsr 	MultiplyShort
.94a1	c9 00		cmp #$00			cmp 	#0
.94a3	f0 05		beq $94aa			beq 	_MIExit
.94a5	a9 04		lda #$04		lda	#4
.94a7	4c 69 83	jmp $8369		jmp	ErrorHandler
.94aa					_MIExit:
.94aa	60		rts				rts
.94ab					MultiplyShort:
.94ab	5a		phy				phy 								; save Y
.94ac	20 e7 8d	jsr $8de7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.94af	20 0c 8e	jsr $8e0c			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.94b2	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.94b4					_I32MLoop:
.94b4	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.94b7	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.94ba	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.94bd	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.94c0	f0 28		beq $94ea			beq 	_I32MExit 					; exit if zero
.94c2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.94c5	29 01		and #$01			and 	#1
.94c7	f0 0e		beq $94d7			beq 	_I32MNoAdd
.94c9	20 57 85	jsr $8557			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.94cc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.94cf	10 06		bpl $94d7			bpl 	_I32MNoAdd
.94d1					_I32ShiftRight:
.94d1	20 33 8e	jsr $8e33			jsr 	NSMShiftRight 				; shift S[X] right
.94d4	c8		iny				iny 								; increment shift count
.94d5	80 0a		bra $94e1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.94d7					_I32MNoAdd:
.94d7	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.94da	70 f5		bvs $94d1			bvs 	_I32ShiftRight 				; instead.
.94dc	e8		inx				inx
.94dd	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.94e0	ca		dex				dex
.94e1					_I32MShiftUpper:
.94e1	e8		inx				inx 								; shift S[X+2] right
.94e2	e8		inx				inx
.94e3	20 33 8e	jsr $8e33			jsr 	NSMShiftRight
.94e6	ca		dex				dex
.94e7	ca		dex				dex
.94e8	80 ca		bra $94b4			bra 	_I32MLoop 					; try again.
.94ea					_I32MExit:
.94ea	20 f0 94	jsr $94f0			jsr 	CalculateSign
.94ed	98		tya				tya 								; shift in A
.94ee	7a		ply				ply 								; restore Y and exit
.94ef	60		rts				rts
.94f0					CalculateSign:
.94f0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.94f3	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.94f6	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.94f9	0a		asl a				asl 	a 							; shift bit 7 into carry
.94fa	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.94fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.84d3					CompareStrings:
.84d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.84d6	3d 01 06	and $0601,x			and 	NSStatus+1,x
.84d9	29 10		and #$10			and 	#NSBIsString
.84db	f0 2c		beq $8509			beq 	_CSTypeError
.84dd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.84e0	85 36		sta $36				sta 	zTemp0
.84e2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84e5	85 37		sta $37				sta 	zTemp0+1
.84e7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.84ea	85 38		sta $38				sta 	zTemp1
.84ec	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.84ef	85 39		sta $39				sta 	zTemp1+1
.84f1	5a		phy				phy 								; save Y so we can access strings
.84f2	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.84f4					_CSLoop:
.84f4	c8		iny				iny
.84f5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.84f7	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.84f9	d0 06		bne $8501			bne 	_CSDifferent
.84fb	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.84fd	d0 f5		bne $84f4			bne 	_CSLoop 					; still comparing
.84ff					_CSExit:
.84ff	7a		ply				ply 								; reached end, return zero in A from EOS
.8500	60		rts				rts
.8501					_CSDifferent:
.8501	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8503	90 fa		bcc $84ff			bcc		_CSExit
.8505	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8507	80 f6		bra $84ff			bra 	_CSExit
.8509					_CSTypeError:
.8509	4c 65 98	jmp $9865			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.850c					ShiftLeft:
.850c	38		sec				sec
.850d	80 01		bra $8510			bra 	ShiftMain
.850f					ShiftRight:
.850f	18		clc				clc
.8510					ShiftMain:
.8510	fa		plx				plx 								; restore X
.8511	08		php				php 								; save direction
.8512	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8515	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8518	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8519	0a		asl a				asl 	a
.851a	10 05		bpl $8521			bpl 	_NotRef
.851c	48		pha				pha
.851d	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8520	68		pla				pla
.8521					_NotRef:
.8521	0a		asl a				asl 	a
.8522	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8524	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8527	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.852a	f0 03		beq $852f			beq 	_IntegerCode 				; if clear, then we have two integers
.852c	4c 65 98	jmp $9865			jmp 	TypeError 					; anything else, type mismatch.
.852f					_IntegerCode:
.852f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8532	29 e0		and #$e0			and 	#$E0
.8534	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8537	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.853a	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.853d	d0 13		bne $8552			bne 	_SMExit0 					; if >= 32 it will always return zero.
.853f					_SMLoop:
.853f	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8542	30 11		bmi $8555			bmi 	_SMExit 					; exit if done.
.8544	28		plp				plp 								; restore direcition setting
.8545	08		php				php
.8546	90 05		bcc $854d			bcc 	_SMRight
.8548	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; shift left if CS
.854b	80 f2		bra $853f			bra 	_SMLoop
.854d					_SMRight:
.854d	20 33 8e	jsr $8e33			jsr 	NSMShiftRight 				; shift right if CC
.8550	80 ed		bra $853f			bra 	_SMLoop
.8552					_SMExit0:
.8552	20 10 8e	jsr $8e10			jsr 	NSMSetZero 					; return zero.
.8555					_SMExit:
.8555	28		plp				plp 								; throw direction
.8556	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8557					AddTopTwoStack:
.8557	18		clc				clc
.8558	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.855b	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.855e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8561	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8564	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8567	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.856a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.856d	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8570	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8573	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8576	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8579	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.857c	60		rts				rts
.857d					SubTopTwoStack:
.857d	38		sec				sec
.857e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8581	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8584	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8587	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.858a	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.858d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8590	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8593	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8596	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8599	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.859c	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.859f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85a2	60		rts				rts
.85a3					AddInteger:
.85a3	fa		plx				plx
.85a4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85a7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85aa	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85ab	0a		asl a				asl 	a
.85ac	10 05		bpl $85b3			bpl 	_NotRef
.85ae	48		pha				pha
.85af	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85b2	68		pla				pla
.85b3					_NotRef:
.85b3	0a		asl a				asl 	a 							; put MSB of type into A:7
.85b4	30 0b		bmi $85c1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.85b6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85b9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85bc	f0 06		beq $85c4			beq 	_IntegerCode 				; if clear, then we have two integers
.85be	4c 59 95	jmp $9559			jmp 	FloatingPointAdd 							; otherwise at least one float.
.85c1					_StringData:
.85c1	4c 76 84	jmp $8476			jmp 	StringConcat							; at least one string - don't know both are strings.
.85c4					_IntegerCode:
.85c4					AddCode:
.85c4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.85c7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.85ca	10 8b		bpl $8557			bpl 	AddTopTwoStack
.85cc	20 7d 85	jsr $857d			jsr 	SubTopTwoStack 				; do a physical subtraction
.85cf	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.85d2	10 09		bpl $85dd			bpl 	_AddExit
.85d4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.85d7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85da	20 c5 8d	jsr $8dc5			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.85dd					_AddExit:
.85dd	60		rts				rts
.85de					SubInteger:
.85de	fa		plx				plx
.85df	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85e2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85e5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85e6	0a		asl a				asl 	a
.85e7	10 05		bpl $85ee			bpl 	_NotRef
.85e9	48		pha				pha
.85ea	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85ed	68		pla				pla
.85ee					_NotRef:
.85ee	0a		asl a				asl 	a 							; put MSB of type into A:7
.85ef	30 0b		bmi $85fc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.85f1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85f4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85f7	f0 06		beq $85ff			beq 	_IntegerCode 				; if clear, then we have two integers
.85f9	4c 5e 95	jmp $955e			jmp 	FloatingPointSub 							; otherwise at least one float.
.85fc					_StringData:
.85fc	4c 6f 98	jmp $986f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.85ff					_IntegerCode:
.85ff	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8602	49 80		eor #$80			eor 	#$80
.8604	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8607	80 bb		bra $85c4			bra 	AddCode 					; and do the same code as add.
.8609					AndInteger:
.8609	fa		plx				plx
.860a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.860d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8610	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8611	0a		asl a				asl 	a
.8612	10 05		bpl $8619			bpl 	_NotRef
.8614	48		pha				pha
.8615	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8618	68		pla				pla
.8619					_NotRef:
.8619	0a		asl a				asl 	a
.861a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.861c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.861f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8622	f0 03		beq $8627			beq 	_IntegerCode 				; if clear, then we have two integers
.8624	4c 65 98	jmp $9865			jmp 	TypeError 					; anything else, type mismatch.
.8627					_IntegerCode:
.8627	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.862a	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.862d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8630	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8633	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8636	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8639	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.863c	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.863f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8642	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8645	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8648	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.864b	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.864e	60		rts				rts
.864f					OraInteger:
.864f	fa		plx				plx
.8650	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8653	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8656	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8657	0a		asl a				asl 	a
.8658	10 05		bpl $865f			bpl 	_NotRef
.865a	48		pha				pha
.865b	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.865e	68		pla				pla
.865f					_NotRef:
.865f	0a		asl a				asl 	a
.8660	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8662	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8665	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8668	f0 03		beq $866d			beq 	_IntegerCode 				; if clear, then we have two integers
.866a	4c 65 98	jmp $9865			jmp 	TypeError 					; anything else, type mismatch.
.866d					_IntegerCode:
.866d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8670	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8673	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8676	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8679	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.867c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.867f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8682	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8685	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8688	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.868b	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.868e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8691	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8694	60		rts				rts
.8695					EorInteger:
.8695	fa		plx				plx
.8696	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8699	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.869c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.869d	0a		asl a				asl 	a
.869e	10 05		bpl $86a5			bpl 	_NotRef
.86a0	48		pha				pha
.86a1	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86a4	68		pla				pla
.86a5					_NotRef:
.86a5	0a		asl a				asl 	a
.86a6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86a8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86ab	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86ae	f0 03		beq $86b3			beq 	_IntegerCode 				; if clear, then we have two integers
.86b0	4c 65 98	jmp $9865			jmp 	TypeError 					; anything else, type mismatch.
.86b3					_IntegerCode:
.86b3	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.86b6	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.86b9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86bc	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.86bf	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.86c2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86c5	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.86c8	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.86cb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86ce	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.86d1	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.86d4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86d7	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.86da	60		rts				rts
.86db					WordIndirect:
.86db	fa		plx				plx
.86dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86df	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86e2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86e3	0a		asl a				asl 	a
.86e4	10 05		bpl $86eb			bpl 	_NotRef
.86e6	48		pha				pha
.86e7	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86ea	68		pla				pla
.86eb					_NotRef:
.86eb	0a		asl a				asl 	a
.86ec	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86ee	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86f1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86f4	f0 03		beq $86f9			beq 	_IntegerCode 				; if clear, then we have two integers
.86f6	4c 65 98	jmp $9865			jmp 	TypeError 					; anything else, type mismatch.
.86f9					_IntegerCode:
.86f9	20 c4 85	jsr $85c4			jsr 	AddCode 					; add the two values
.86fc	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.86fe	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8701	60		rts				rts
.8702					ByteIndirect:
.8702	fa		plx				plx
.8703	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8706	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8709	0a		asl a				asl 	a 							; shift reference bit into sign bit
.870a	0a		asl a				asl 	a
.870b	10 05		bpl $8712			bpl 	_NotRef
.870d	48		pha				pha
.870e	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8711	68		pla				pla
.8712					_NotRef:
.8712	0a		asl a				asl 	a
.8713	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8715	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8718	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.871b	f0 03		beq $8720			beq 	_IntegerCode 				; if clear, then we have two integers
.871d	4c 65 98	jmp $9865			jmp 	TypeError 					; anything else, type mismatch.
.8720					_IntegerCode:
.8720	20 c4 85	jsr $85c4			jsr 	AddCode 					; add the two values
.8723	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8725	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8728	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.94fe					ConvertInt16:
.94fe	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9501	8e 10 06	stx $0610			stx 	NSMantissa1
.9504	9c 18 06	stz $0618			stz 	NSMantissa2
.9507	9c 20 06	stz $0620			stz 	NSMantissa3
.950a	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.950d	a2 00		ldx #$00			ldx 	#0 							; stack level
.950f	a9 0a		lda #$0a			lda 	#10 						; base
.9511	80 00		bra $9513			bra 	ConvertInt32
.9513					ConvertInt32:
.9513	5a		phy				phy
.9514	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9516	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9519	10 08		bpl $9523			bpl 	_CI32NotNeg
.951b	48		pha				pha
.951c	a9 2d		lda #$2d			lda 	#'-'
.951e	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9521	c8		iny				iny
.9522	68		pla				pla
.9523					_CI32NotNeg:
.9523	20 31 95	jsr $9531			jsr 	_CI32DivideConvert 			; recursive conversion
.9526	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9528	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.952b	7a		ply				ply
.952c	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.952e	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9530	60		rts				rts
.9531					_CI32DivideConvert:
.9531	e8		inx				inx 								; write to next slot up
.9532	20 12 8e	jsr $8e12			jsr 	NSMSetByte
.9535	ca		dex				dex
.9536	20 33 94	jsr $9433			jsr 	Int32Divide 				; divide
.9539	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.953c	48		pha				pha
.953d	20 e2 93	jsr $93e2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9540	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; is it zero ?
.9543	f0 06		beq $954b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9545	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9548	20 31 95	jsr $9531			jsr 	_CI32DivideConvert 			; and recusrively call.
.954b					_CI32NoRecurse:
.954b	68		pla				pla 								; remainder
.954c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.954e	90 02		bcc $9552			bcc 	_CI32NotHex
.9550	69 26		adc #$26			adc 	#6+32
.9552					_CI32NotHex:
.9552	69 30		adc #$30			adc 	#48
.9554	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9557	c8		iny				iny
.9558	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8729					PrecedenceLevel:
>8729	04					.byte	 4	; $00 <<
>872a	02					.byte	 2	; $01 <=
>872b	02					.byte	 2	; $02 <>
>872c	00					.byte	 0	; $03 !!3
>872d	00					.byte	 0	; $04 ><
>872e	02					.byte	 2	; $05 >=
>872f	04					.byte	 4	; $06 >>
>8730	00					.byte	 0	; $07 !!7
>8731	00					.byte	 0	; $08 !!8
>8732	00					.byte	 0	; $09 !!9
>8733	00					.byte	 0	; $0a !!10
>8734	00					.byte	 0	; $0b !!11
>8735	00					.byte	 0	; $0c !!12
>8736	00					.byte	 0	; $0d !!13
>8737	00					.byte	 0	; $0e !!14
>8738	00					.byte	 0	; $0f !!15
>8739	00					.byte	 0	; $10 @
>873a	00					.byte	 0	; $11 !!17
>873b	00					.byte	 0	; $12 !!18
>873c	00					.byte	 0	; $13 [
>873d	04					.byte	 4	; $14 \
>873e	00					.byte	 0	; $15 ]
>873f	01					.byte	 1	; $16 ^
>8740	00					.byte	 0	; $17 _
>8741	00					.byte	 0	; $18 `
>8742	00					.byte	 0	; $19 !!25
>8743	00					.byte	 0	; $1a !!26
>8744	00					.byte	 0	; $1b {
>8745	01					.byte	 1	; $1c |
>8746	00					.byte	 0	; $1d }
>8747	00					.byte	 0	; $1e ~
>8748	00					.byte	 0	; $1f [7m<7F>[m
>8749	00					.byte	 0	; $20
>874a	05					.byte	 5	; $21 !
>874b	00					.byte	 0	; $22 "
>874c	00					.byte	 0	; $23 #
>874d	05					.byte	 5	; $24 $
>874e	04					.byte	 4	; $25 %
>874f	01					.byte	 1	; $26 &
>8750	00					.byte	 0	; $27 '
>8751	00					.byte	 0	; $28 (
>8752	00					.byte	 0	; $29 )
>8753	04					.byte	 4	; $2a *
>8754	03					.byte	 3	; $2b +
>8755	00					.byte	 0	; $2c ,
>8756	03					.byte	 3	; $2d -
>8757	00					.byte	 0	; $2e .
>8758	04					.byte	 4	; $2f /
>8759	00					.byte	 0	; $30 0
>875a	00					.byte	 0	; $31 1
>875b	00					.byte	 0	; $32 2
>875c	00					.byte	 0	; $33 3
>875d	00					.byte	 0	; $34 4
>875e	00					.byte	 0	; $35 5
>875f	00					.byte	 0	; $36 6
>8760	00					.byte	 0	; $37 7
>8761	00					.byte	 0	; $38 8
>8762	00					.byte	 0	; $39 9
>8763	00					.byte	 0	; $3a :
>8764	00					.byte	 0	; $3b ;
>8765	02					.byte	 2	; $3c <
>8766	02					.byte	 2	; $3d =
>8767	02					.byte	 2	; $3e >
>8768	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8769					EvaluateExpressionAt0:
.8769	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.876b					EvaluateExpression:
.876b	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.876d					EvaluateExpressionAtPrecedence:
.876d	48		pha				pha 								; save precedence level
.876e	20 3c 8a	jsr $8a3c			jsr 	EvaluateTerm 				; evaluate term into level X.
.8771	68		pla				pla 								; restore precedence level.
.8772					_EXPRLoop:
.8772	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8774	b1 30		lda ($30),y			lda 	(codePtr),y
.8776	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8778	b0 25		bcs $879f			bcs 	_EXPRExit
.877a	da		phx				phx 								; read the operator precedence
.877b	aa		tax				tax
.877c	bd 29 87	lda $8729,x			lda 	PrecedenceLevel,x
.877f	fa		plx				plx
.8780	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8782	f0 1b		beq $879f			beq 	_EXPRExit
.8784	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8786	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8788	c5 37		cmp $37				cmp 	zTemp0+1
.878a	b0 13		bcs $879f			bcs		_EXPRExit 					; if current >= operator exit
.878c	48		pha				pha 								; save current precedence.
.878d	b1 30		lda ($30),y			lda 	(codePtr),y
.878f	c8		iny				iny
.8790	48		pha				pha
.8791	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8793	e8		inx				inx 								; work out the right hand side.
.8794	20 6d 87	jsr $876d			jsr 	EvaluateExpressionAtPrecedence
.8797	ca		dex				dex
.8798	68		pla				pla 								; get operator, call the code.
.8799	20 a2 87	jsr $87a2			jsr 	_EXPRCaller
.879c	68		pla				pla 								; restore precedence level
.879d	80 d3		bra $8772			bra 	_EXPRLoop 					; and go round.
.879f					_EXPRExit:
.879f	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.87a1	60		rts				rts
.87a2					_EXPRCaller:
.87a2	da		phx				phx 								; save on stack, first thing is to restore it
.87a3	0a		asl a				asl 	a 							; double so can use vectors into X
.87a4	aa		tax				tax
.87a5	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9559					FloatingPointAdd:
.9559	20 fa 96	jsr $96fa			jsr 	FloatPrepare 				; prepare for floats
.955c	80 0b		bra $9569			bra 	FloatAdd
.955e					FloatingPointSub:
.955e	20 fa 96	jsr $96fa			jsr 	FloatPrepare 				; prepare for floats
.9561					FloatSubtract:
.9561	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9564	49 80		eor #$80			eor 	#$80
.9566	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9569					FloatAdd:
.9569	48		pha				pha
.956a	5a		phy				phy
.956b	20 0b 97	jsr $970b			jsr 	NSNormalise 				; normalise S[X]
.956e	f0 54		beq $95c4			beq 	_FAReturn1
.9570	e8		inx				inx 								; normalise S[X+1]
.9571	20 0b 97	jsr $970b			jsr 	NSNormalise
.9574	ca		dex				dex
.9575	c9 00		cmp #$00			cmp 	#0
.9577	f0 6f		beq $95e8			beq 	_FAExit 					; if so, just return A
.9579	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.957c	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.957f	f0 1b		beq $959c			beq 	_FAExponentsEqual
.9581	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9584	a8		tay				tay
.9585	38		sec				sec 								; do a signed comparison of the exponents.
.9586	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9589	50 02		bvc $958d			bvc 	_FANoSignedChange
.958b	49 80		eor #$80			eor 	#$80
.958d					_FANoSignedChange:
.958d	29 80		and #$80			and 	#$80
.958f	10 03		bpl $9594			bpl 	_FAHaveMax
.9591	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9594					_FAHaveMax:
.9594	20 eb 95	jsr $95eb			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9597	e8		inx				inx
.9598	20 eb 95	jsr $95eb			jsr 	_FAShiftToExponent
.959b	ca		dex				dex
.959c					_FAExponentsEqual:
.959c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.959f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.95a2	30 10		bmi $95b4			bmi 	_FADifferentSigns
.95a4	20 57 85	jsr $8557			jsr 	AddTopTwoStack 				; do the add of the mantissae
.95a7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.95aa	10 3c		bpl $95e8			bpl 	_FAExit 					; if no, we are done.
.95ac	20 33 8e	jsr $8e33			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.95af	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.95b2	80 34		bra $95e8			bra 	_FAExit
.95b4					_FADifferentSigns:
.95b4	20 7d 85	jsr $857d			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.95b7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.95ba	10 2c		bpl $95e8			bpl 	_FAExit 					; if no, we are done.
.95bc	20 bc 8d	jsr $8dbc			jsr 	NSMNegate 					; netate result
.95bf	20 c5 8d	jsr $8dc5			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.95c2	80 24		bra $95e8			bra 	_FAExit
.95c4					_FAReturn1:
.95c4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.95c7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95ca	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.95cd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95d0	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.95d3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95d6	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.95d9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95dc	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.95df	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95e2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.95e5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95e8					_FAExit:
.95e8	7a		ply				ply
.95e9	68		pla				pla
.95ea	60		rts				rts
.95eb					_FAShiftToExponent:
.95eb					_FAShiftToExponent2:
.95eb	98		tya				tya 								; compare Y to exponent
.95ec	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.95ef	f0 08		beq $95f9			beq 	_FASEExit 					; exit if so.
.95f1	20 33 8e	jsr $8e33			jsr 	NSMShiftRight	 			; shift the mantissa right
.95f4	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.95f7	80 f2		bra $95eb			bra 	_FAShiftToExponent2
.95f9					_FASEExit:
.95f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.95fa					CompareFloat:
.95fa	20 61 95	jsr $9561			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.95fd	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9600	29 f8		and #$f8			and 	#$F8
.9602	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9605	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9608	f0 09		beq $9613			beq 	_FCExit 					; zero, so approximately identical
.960a	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.960c	3c 00 06	bit $0600,x			bit 	NSStatus,x
.960f	10 02		bpl $9613			bpl 	_FCExit
.9611					_FCNegative:
.9611	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9613					_FCExit:
.9613	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9614					FDivideCommand:
.9614	fa		plx				plx	 								; restore stack position
.9615	20 fa 96	jsr $96fa			jsr 	FloatPrepare 				; prepare for floats
.9618					FloatDivide:
.9618	48		pha				pha
.9619	e8		inx				inx
.961a	20 0b 97	jsr $970b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.961d	ca		dex				dex
.961e	c9 00		cmp #$00			cmp 	#0
.9620	f0 20		beq $9642			beq 	_FDZero
.9622	20 0b 97	jsr $970b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9625	f0 19		beq $9640			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9627	20 55 94	jsr $9455			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.962a	20 e2 93	jsr $93e2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.962d	20 0b 97	jsr $970b			jsr		NSNormalise 				; renormalise
.9630	20 f0 94	jsr $94f0			jsr 	CalculateSign 				; calculate result sign
.9633	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9636	38		sec				sec
.9637	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.963a	38		sec				sec
.963b	e9 1e		sbc #$1e			sbc 	#30
.963d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9640					_FDExit:
.9640	68		pla				pla
.9641	60		rts				rts
.9642					_FDZero:
.9642	a9 03		lda #$03		lda	#3
.9644	4c 69 83	jmp $8369		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9647					FloatFractionalPart:
.9647	5a		phy				phy
.9648	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.964b	29 7f		and #$7f			and 	#$7F
.964d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9650	20 0b 97	jsr $970b			jsr 	NSNormalise
.9653	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9656	38		sec				sec
.9657	e9 e0		sbc #$e0			sbc 	#$E0
.9659	90 31		bcc $968c			bcc 	_FFPExit 					; already fractional
.965b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.965d	b0 2a		bcs $9689			bcs 	_FFPZero
.965f	a8		tay				tay 								; put count to do in Y
.9660	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9663	20 8e 96	jsr $968e			jsr 	_FFPPartial
.9666	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9669	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.966c	20 8e 96	jsr $968e			jsr 	_FFPPartial
.966f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9672	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9675	20 8e 96	jsr $968e			jsr 	_FFPPartial
.9678	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.967b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.967e	20 8e 96	jsr $968e			jsr 	_FFPPartial
.9681	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9684	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; zeroed check.
.9687	d0 03		bne $968c			bne 	_FFPExit
.9689					_FFPZero:
.9689	20 10 8e	jsr $8e10			jsr 	NSMSetZero
.968c					_FFPExit:
.968c	7a		ply				ply
.968d	60		rts				rts
.968e					_FFPPartial:
.968e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9690	f0 17		beq $96a9			beq 	_FFFPPExit
.9692	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9694	b0 0c		bcs $96a2			bcs 	_FFFPPWholeByte
.9696	5a		phy				phy
.9697					_FFFPPLeft:
.9697	0a		asl a				asl 	a
.9698	88		dey				dey
.9699	d0 fc		bne $9697			bne 	_FFFPPLeft
.969b	7a		ply				ply
.969c					_FFFPPRight:
.969c	4a		lsr a				lsr 	a
.969d	88		dey				dey
.969e	d0 fc		bne $969c			bne 	_FFFPPRight
.96a0	80 07		bra $96a9			bra 	_FFFPPExit
.96a2					_FFFPPWholeByte:
.96a2	98		tya				tya 								; subtract 8 from count
.96a3	38		sec				sec
.96a4	e9 08		sbc #$08			sbc 	#8
.96a6	a8		tay				tay
.96a7	a9 00		lda #$00			lda 	#0 							; and clear all
.96a9					_FFFPPExit:
.96a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.96aa					FloatIntegerPart:
.96aa	48		pha				pha
.96ab	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.96ae	f0 1f		beq $96cf			beq 	_FIPExit 					; if so do nothing
.96b0	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; is it zero ?
.96b3	f0 17		beq $96cc			beq 	_FIPZero 					; if so return zero.
.96b5	20 0b 97	jsr $970b			jsr 	NSNormalise 				; normalise
.96b8	f0 12		beq $96cc			beq 	_FIPZero 					; normalised to zero, exit zero
.96ba					_FIPShift:
.96ba	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.96bd	10 08		bpl $96c7			bpl 	_FIPCheckZero
.96bf	20 33 8e	jsr $8e33			jsr 	NSMShiftRight 				; shift mantissa right
.96c2	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.96c5	80 f3		bra $96ba			bra 	_FIPShift
.96c7					_FIPCheckZero:
.96c7	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; avoid -0 problem
.96ca	d0 03		bne $96cf			bne 	_FIPExit 					; set to zero if mantissa zero.
.96cc					_FIPZero:
.96cc	20 10 8e	jsr $8e10			jsr 	NSMSetZero
.96cf					_FIPExit:
.96cf	68		pla				pla
.96d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.96d1					FloatingPointMultiply:
.96d1	20 fa 96	jsr $96fa			jsr 	FloatPrepare 				; prepare for floats
.96d4					FloatMultiply:
.96d4	48		pha				pha
.96d5	20 0b 97	jsr $970b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.96d8	f0 1b		beq $96f5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.96da	e8		inx				inx
.96db	20 0b 97	jsr $970b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.96de	ca		dex				dex
.96df	c9 00		cmp #$00			cmp 	#0
.96e1	f0 0f		beq $96f2			beq 	_FDSetZero
.96e3	20 ab 94	jsr $94ab			jsr 	MultiplyShort 				; calculate the result.
.96e6	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.96e9	18		clc				clc
.96ea	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.96ed	9d 28 06	sta $0628,x			sta 	NSExponent,x
.96f0	80 03		bra $96f5			bra 	_FDExit
.96f2					_FDSetZero:
.96f2	20 10 8e	jsr $8e10			jsr 	NSMSetZero 					; return 0
.96f5					_FDExit:
.96f5	20 0b 97	jsr $970b			jsr 	NSNormalise 				; normalise the result
.96f8	68		pla				pla
.96f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.96fa					FloatPrepare:
.96fa	20 7b 88	jsr $887b			jsr 	DereferenceTopTwo 			; dereference the top two values
.96fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9700	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9703	29 10		and #$10			and 	#NSBIsString
.9705	d0 01		bne $9708			bne 	_FDType
.9707	60		rts				rts
.9708					_FDType:
.9708	4c 65 98	jmp $9865			jmp 	TypeError
.970b					NSNormalise:
.970b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.970e	29 80		and #$80			and 	#$80
.9710	09 08		ora #$08			ora 	#NSTFloat
.9712	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9715	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; if zero exit
.9718	d0 09		bne $9723			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.971a	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.971d	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9720	a9 00		lda #$00			lda 	#0 							; set Z flag
.9722	60		rts				rts
.9723					_NSNormaliseOptimise:
.9723	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9726	d0 22		bne $974a			bne 	_NSNormaliseLoop
.9728	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.972b	30 1d		bmi $974a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.972d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9730	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9733	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9736	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9739	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.973c	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.973f	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9742	38		sec				sec
.9743	e9 08		sbc #$08			sbc 	#8
.9745	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9748	80 d9		bra $9723			bra 	_NSNormaliseOptimise
.974a					_NSNormaliseLoop:
.974a	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.974d	70 08		bvs $9757			bvs 	_NSNExit 					; exit if so with Z flag clear
.974f	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; shift mantissa left
.9752	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9755	80 f3		bra $974a			bra 	_NSNormaliseLoop
.9757					_NSNExit:
.9757	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9759	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.87a8					AssignNumber:
.87a8	5a		phy				phy
.87a9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.87ac	85 36		sta $36				sta 	zTemp0
.87ae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87b1	85 37		sta $37				sta 	zTemp0+1
.87b3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.87b6	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.87b8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87bb	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.87bd	c9 08		cmp #$08			cmp 	#NSTFloat
.87bf	f0 2a		beq $87eb			beq 	_ANFloat
.87c1	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.87c4	f0 05		beq $87cb			beq		_ANNotFloat
.87c6	e8		inx				inx
.87c7	20 aa 96	jsr $96aa			jsr 	FloatIntegerPart 			; make it an integer
.87ca	ca		dex				dex
.87cb					_ANNotFloat:
.87cb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.87ce	29 03		and #$03			and 	#3
.87d0	d0 05		bne $87d7			bne 	_ANByteWord
.87d2	20 f7 87	jsr $87f7			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.87d5	80 1e		bra $87f5			bra 	_ANExit
.87d7					_ANByteWord:
.87d7	48		pha				pha 								; save count
.87d8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.87db	92 36		sta ($36)			sta 	(zTemp0)
.87dd	68		pla				pla
.87de	c9 01		cmp #$01			cmp	 	#1
.87e0	f0 13		beq $87f5			beq 	_ANExit
.87e2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.87e5	a0 01		ldy #$01			ldy 	#1
.87e7	91 36		sta ($36),y			sta 	(zTemp0),y
.87e9	80 0a		bra $87f5			bra 	_ANExit
.87eb					_ANFloat:
.87eb	20 f7 87	jsr $87f7			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.87ee	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.87f1	a0 04		ldy #$04			ldy 	#4
.87f3	91 36		sta ($36),y			sta 	(zTemp0),y
.87f5					_ANExit:
.87f5	7a		ply				ply
.87f6	60		rts				rts
.87f7					_ANCopy4PackSign:
.87f7	a0 03		ldy #$03			ldy 	#3
.87f9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.87fc	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.87fe	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8801	91 36		sta ($36),y			sta 	(zTemp0),y
.8803	88		dey				dey
.8804	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8807	91 36		sta ($36),y			sta 	(zTemp0),y
.8809	88		dey				dey
.880a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.880d	91 36		sta ($36),y			sta 	(zTemp0),y
.880f	88		dey				dey
.8810	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8813	91 36		sta ($36),y			sta 	(zTemp0),y
.8815	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8816					AssignString:
.8816	5a		phy				phy
.8817	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.881a	85 38		sta $38				sta 	zTemp1
.881c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.881f	85 39		sta $39				sta 	zTemp1+1
.8821	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8824	85 36		sta $36				sta 	zTemp0
.8826	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8829	85 37		sta $37				sta 	zTemp0+1
.882b	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.882d	b1 36		lda ($36),y			lda 	(zTemp0),y
.882f	f0 23		beq $8854			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8831	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8832	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8834	e9 02		sbc #$02			sbc 	#2
.8836	85 3c		sta $3c				sta 	zsTemp
.8838	a0 01		ldy #$01			ldy 	#1
.883a	b1 36		lda ($36),y			lda 	(zTemp0),y
.883c	e9 00		sbc #$00			sbc 	#0
.883e	85 3d		sta $3d				sta 	zsTemp+1
.8840	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8842					_ASGetLength:
.8842	c8		iny				iny
.8843	b1 38		lda ($38),y			lda 	(zTemp1),y
.8845	d0 fb		bne $8842			bne 	_ASGetLength
.8847	98		tya				tya 								; is this length <= current length
.8848	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.884a	90 20		bcc $886c			bcc 	_ASCopyString
.884c	f0 1e		beq $886c			beq 	_ASCopyString
.884e	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8850	a0 01		ldy #$01			ldy 	#1
.8852	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8854					_ASNewStringRequired:
.8854	e8		inx				inx 								; concrete the new string.
.8855	20 83 99	jsr $9983			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8858	ca		dex				dex
.8859	18		clc				clc
.885a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.885d	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.885f	92 36		sta ($36)			sta 	(zTemp0)
.8861	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8864	69 00		adc #$00			adc 	#0
.8866	a0 01		ldy #$01			ldy 	#1
.8868	91 36		sta ($36),y			sta 	(zTemp0),y
.886a	80 0d		bra $8879			bra 	_ASExit
.886c					_ASCopyString:
.886c	a0 00		ldy #$00			ldy 	#0
.886e					_ASCopyLoop:
.886e	b1 38		lda ($38),y			lda 	(zTemp1),y
.8870	c8		iny				iny
.8871	c8		iny				iny
.8872	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8874	88		dey				dey
.8875	c9 00		cmp #$00			cmp 	#0
.8877	d0 f5		bne $886e			bne 	_ASCopyLoop
.8879					_ASExit:
.8879	7a		ply				ply
.887a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.887b					DereferenceTopTwo:
.887b	e8		inx				inx
.887c	20 80 88	jsr $8880			jsr 	Dereference 				; deref x+1
.887f	ca		dex				dex  								; falls through to deref x
.8880					Dereference:
.8880	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8883	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8885	f0 57		beq $88de			beq 	_DRFExit 					; not a reference
.8887	5a		phy				phy
.8888	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.888b	85 36		sta $36				sta 	zTemp0
.888d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8890	85 37		sta $37				sta 	zTemp0+1
.8892	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8895	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8897	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.889a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.889d	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.889f	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.88a1	f0 0f		beq $88b2			beq 	_DRFDereferenceTwo
.88a3	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.88a5	f0 39		beq $88e0			beq 	_DRFFull
.88a7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.88aa	29 03		and #$03			and 	#3
.88ac	f0 32		beq $88e0			beq 	_DRFFull 					; the whole word
.88ae	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.88b0	f0 07		beq $88b9			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.88b2					_DRFDereferenceTwo:
.88b2	a0 01		ldy #$01			ldy 	#1
.88b4	b1 36		lda ($36),y			lda 	(zTemp0),y
.88b6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88b9					_DRFClear23:
.88b9	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.88bc	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.88bf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.88c2	29 18		and #$18			and 	#NSBTypeMask
.88c4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88c7	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.88c9	d0 12		bne $88dd			bne 	_DRFNotString
.88cb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.88ce	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.88d1	d0 0a		bne $88dd			bne 	_DRFNotString
.88d3	a9 df		lda #$df			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.88d5	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.88d8	a9 88		lda #$88			lda 	#_DRFNullString >> 8
.88da	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.88dd					_DRFNotString
.88dd	7a		ply				ply 								; restore Y and exit
.88de					_DRFExit:
.88de	60		rts				rts
.88df					_DRFNullString:
>88df	00						.byte 	0
.88e0					_DRFFull:
.88e0	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.88e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88e7	c8		iny				iny
.88e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ea	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.88ed	c8		iny				iny
.88ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.88f3	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.88f6	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.88f9	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.88fb	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.88fe	f0 06		beq $8906			beq 	_DRFNoExponent
.8900	c8		iny				iny 								; if not, read the exponent as well.
.8901	b1 36		lda ($36),y			lda 	(zTemp0),y
.8903	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8906					_DRFNoExponent:
.8906	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8909	10 0d		bpl $8918			bpl 	_DRFExit2 					; if not, then exit.
.890b	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.890d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8910	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8913	09 80		ora #$80			ora 	#NSBIsNegative
.8915	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8918					_DRFExit2:
.8918	7a		ply				ply
.8919	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.891a					EncodeNumberStart:
.891a	38		sec				sec
.891b	80 01		bra $891e			bra 	EncodeNumberContinue+1
.891d					EncodeNumberContinue:
.891d	18		clc				clc
.891e					EncodeNumber:
.891e	08		php				php 								; save reset.
.891f	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8921	f0 12		beq $8935			beq 	_ENIsOkay
.8923	c9 30		cmp #$30			cmp 	#"0"
.8925	90 04		bcc $892b			bcc 	_ENBadNumber
.8927	c9 3a		cmp #$3a			cmp 	#"9"+1
.8929	90 0a		bcc $8935			bcc 	_ENIsOkay
.892b					_ENBadNumber:
.892b	28		plp				plp 								; throw saved reset
.892c	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.892f	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8931	f0 7e		beq $89b1			beq 	_ENConstructFinal
.8933					_ENFail:
.8933	18		clc				clc 								; not allowed
.8934	60		rts				rts
.8935					_ENIsOkay:
.8935	28		plp				plp 								; are we restarting
.8936	90 15		bcc $894d			bcc 	_ENNoRestart
.8938					_ENStartEncode:
.8938	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.893a	f0 0c		beq $8948			beq 	_ENFirstDP
.893c	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.893e	20 12 8e	jsr $8e12			jsr 	NSMSetByte
.8941	a9 01		lda #$01			lda 	#ESTA_Low
.8943					_ENExitChange:
.8943	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8946	38		sec				sec
.8947	60		rts				rts
.8948					_ENFirstDP:
.8948	20 10 8e	jsr $8e10			jsr 	NSMSetZero 					; clear integer part
.894b	80 3f		bra $898c			bra 	_ESTASwitchFloat			; go straight to float and exi
.894d					_ENNoRestart:
.894d	48		pha				pha 								; save on stack.
.894e	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8951	c9 01		cmp #$01			cmp 	#ESTA_Low
.8953	f0 09		beq $895e			beq  	_ESTALowState
.8955	c9 02		cmp #$02			cmp 	#ESTA_High
.8957	f0 29		beq $8982			beq 	_ESTAHighState
.8959	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.895b	f0 3b		beq $8998			beq 	_ESTADecimalState
>895d	db						.byte 	$DB 						; causes a break in the emulator
.895e					_ESTALowState:
.895e	68		pla				pla 								; get value back
.895f	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8961	f0 29		beq $898c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8963	29 0f		and #$0f			and 	#15 						; make digit
.8965	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8968	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.896b	0a		asl a				asl 	a
.896c	0a		asl a				asl 	a
.896d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8970	0a		asl a				asl 	a
.8971	6d 06 07	adc $0706			adc 	DigitTemp
.8974	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8977	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8979	90 05		bcc $8980			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.897b	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.897d	8d 05 07	sta $0705			sta 	EncodeState
.8980					_ESTANoSwitch:
.8980	38		sec				sec
.8981	60		rts				rts
.8982					_ESTAHighState:
.8982	68		pla				pla 								; get value back
.8983	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8985	f0 05		beq $898c			beq 	_ESTASwitchFloat
.8987	20 eb 89	jsr $89eb			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.898a	38		sec				sec
.898b	60		rts				rts
.898c					_ESTASwitchFloat:
.898c	9c 07 07	stz $0707			stz 	DecimalCount
.898f	e8		inx				inx 								; zero the decimal additive.
.8990	20 10 8e	jsr $8e10			jsr 	NSMSetZero
.8993	ca		dex				dex
.8994	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8996	80 ab		bra $8943			bra 	_ENExitChange
.8998					_ESTADecimalState:
.8998	68		pla				pla 								; digit.
.8999	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.899b	f0 96		beq $8933			beq 	_ENFail
.899d	e8		inx				inx 								; put digit into fractional part of X+1
.899e	20 eb 89	jsr $89eb			jsr 	ESTAShiftDigitIntoMantissa
.89a1	ca		dex				dex
.89a2	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.89a5	ad 07 07	lda $0707			lda 	DecimalCount
.89a8	c9 0b		cmp #$0b			cmp 	#11
.89aa	f0 02		beq $89ae			beq 	_ESTADSFail
.89ac	38		sec				sec
.89ad	60		rts				rts
.89ae					_ESTADSFail:
.89ae	4c 60 98	jmp $9860			jmp 	RangeError
.89b1					_ENConstructFinal:
.89b1	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.89b4	f0 33		beq $89e9			beq 	_ENCFExit 					; no decimals
.89b6	5a		phy				phy
.89b7	0a		asl a				asl 	a 							; x 4 and CLC
.89b8	0a		asl a				asl 	a
.89b9	6d 07 07	adc $0707			adc 	DecimalCount
.89bc	a8		tay				tay
.89bd	b9 1f 98	lda $981f,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.89c0	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.89c3	b9 20 98	lda $9820,y			lda 	DecimalScalarTable-5+1,y
.89c6	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.89c9	b9 21 98	lda $9821,y			lda 	DecimalScalarTable-5+2,y
.89cc	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.89cf	b9 22 98	lda $9822,y			lda 	DecimalScalarTable-5+3,y
.89d2	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.89d5	b9 23 98	lda $9823,y			lda 	DecimalScalarTable-5+4,y
.89d8	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.89db	a9 08		lda #$08			lda 	#NSTFloat
.89dd	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.89e0	7a		ply				ply
.89e1	e8		inx				inx 								; multiply decimal const by decimal scalar
.89e2	20 d4 96	jsr $96d4			jsr 	FloatMultiply
.89e5	ca		dex				dex
.89e6	20 69 95	jsr $9569			jsr 	FloatAdd 					; add to integer part.
.89e9					_ENCFExit:
.89e9	18		clc				clc 								; reject the digit.
.89ea	60		rts				rts
.89eb					ESTAShiftDigitIntoMantissa:
.89eb	29 0f		and #$0f			and 	#15 						; save digit
.89ed	48		pha				pha
.89ee	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.89f1	48		pha				pha
.89f2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.89f5	48		pha				pha
.89f6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89f9	48		pha				pha
.89fa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89fd	48		pha				pha
.89fe	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; x 2
.8a01	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; x 4
.8a04	18		clc				clc 								; pop mantissa and add
.8a05	68		pla				pla
.8a06	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8a09	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a0c	68		pla				pla
.8a0d	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8a10	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a13	68		pla				pla
.8a14	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8a17	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a1a	68		pla				pla
.8a1b	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8a1e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8a21	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; x 10
.8a24	68		pla				pla 								; add digit
.8a25	18		clc				clc
.8a26	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8a29	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a2c	90 0d		bcc $8a3b			bcc 	_ESTASDExit
.8a2e	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8a31	d0 08		bne $8a3b			bne 	_ESTASDExit
.8a33	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8a36	d0 03		bne $8a3b			bne 	_ESTASDExit
.8a38	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8a3b					_ESTASDExit:
.8a3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8a3c					EvaluateTerm:
.8a3c	b1 30		lda ($30),y			lda 	(codePtr),y
.8a3e	30 18		bmi $8a58			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8a40	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8a42	b0 6f		bcs $8ab3			bcs 	_ETVariable
.8a44	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8a46	90 6e		bcc $8ab6			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8a48	c9 3a		cmp #$3a			cmp 	#'9'+1
.8a4a	b0 6a		bcs $8ab6			bcs 	_ETPuncUnary
.8a4c	20 1a 89	jsr $891a			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8a4f					_ETNumber:
.8a4f	c8		iny				iny 								; keep encoding until we have the numbers
.8a50	b1 30		lda ($30),y			lda 	(codePtr),y
.8a52	20 1d 89	jsr $891d			jsr 	EncodeNumberContinue
.8a55	b0 f8		bcs $8a4f			bcs 	_ETNumber 					; go back if accepted.
.8a57	60		rts				rts
.8a58					_ETCheckUnary:
.8a58	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8a5a	f0 41		beq $8a9d			beq 	_ETString
.8a5c	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8a5e	f0 12		beq $8a72			beq 	_ETHexConstant
.8a60	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8a62	90 0b		bcc $8a6f			bcc 	_ETSyntaxError
.8a64	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8a66	b0 07		bcs $8a6f			bcs 	_ETSyntaxError
.8a68	da		phx				phx 								; push X on the stack
.8a69	0a		asl a				asl 	a 							; put vector x 2 into X
.8a6a	aa		tax				tax
.8a6b	c8		iny				iny 								; consume unary function token
.8a6c	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8a6f					_ETSyntaxError:
.8a6f	4c 5b 98	jmp $985b			jmp 	SyntaxError
.8a72					_ETHexConstant:
.8a72	c8		iny				iny 								; skip #
.8a73	c8		iny				iny 								; skip count
.8a74	20 10 8e	jsr $8e10			jsr 	NSMSetZero 					; clear result
.8a77					_ETHLoop:
.8a77	b1 30		lda ($30),y			lda 	(codePtr),y
.8a79	c8		iny				iny 								; and consume
.8a7a	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8a7c	f0 1e		beq $8a9c			beq 	_ETHExit
.8a7e	48		pha				pha 								; save on stack.
.8a7f	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; x 2
.8a82	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; x 4
.8a85	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; x 8
.8a88	20 25 8e	jsr $8e25			jsr 	NSMShiftLeft 				; x 16
.8a8b	68		pla				pla 								; ASCII
.8a8c	c9 41		cmp #$41			cmp 	#'A'
.8a8e	90 02		bcc $8a92			bcc 	_ETHNotChar
.8a90	e9 07		sbc #$07			sbc 	#7
.8a92					_ETHNotChar:
.8a92	29 0f		and #$0f			and 	#15 						; digit now
.8a94	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8a97	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a9a	80 db		bra $8a77			bra 	_ETHLoop 					; go round.
.8a9c					_ETHExit:
.8a9c	60		rts				rts
.8a9d					_ETString:
.8a9d	c8		iny				iny 								; look at length
.8a9e	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa0	48		pha				pha
.8aa1	c8		iny				iny 								; first character
.8aa2	20 5b 93	jsr $935b			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8aa5	68		pla				pla 								; restore count and save
.8aa6	85 36		sta $36				sta 	zTemp0
.8aa8	98		tya				tya 								; add length to Y to skip it.
.8aa9	18		clc				clc
.8aaa	65 36		adc $36				adc 	zTemp0
.8aac	a8		tay				tay
.8aad	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8aaf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ab2	60		rts				rts
.8ab3					_ETVariable:
.8ab3	4c 0d 8b	jmp $8b0d			jmp 	VariableHandler
.8ab6					_ETPuncUnary:
.8ab6	c8		iny				iny 								; consume the unary character
.8ab7	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8ab9	f0 2d		beq $8ae8			beq 	_ETUnaryNegate
.8abb	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8abd	f0 39		beq $8af8			beq 	_ETDereference
.8abf	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8ac1	f0 43		beq $8b06			beq 	_ETParenthesis
.8ac3	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8ac5	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8ac7	f0 06		beq $8acf			beq 	_ETIndirection
.8ac9	e6 36		inc $36				inc 	zTemp0
.8acb	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8acd	d0 a0		bne $8a6f			bne 	_ETSyntaxError
.8acf					_ETIndirection:
.8acf	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8ad1	1a		inc a				inc 	a
.8ad2	48		pha				pha
.8ad3	20 3c 8a	jsr $8a3c			jsr 	EvaluateTerm				; evaluate the term
.8ad6	20 80 88	jsr $8880			jsr 	Dereference 				; dereference it.
.8ad9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8adc	d0 07		bne $8ae5			bne 	_ETTypeMismatch
.8ade	68		pla				pla 								; indirection 1-2
.8adf	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8ae1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ae4	60		rts				rts
.8ae5					_ETTypeMismatch:
.8ae5	4c 65 98	jmp $9865			jmp 	TypeError
.8ae8					_ETUnaryNegate:
.8ae8	20 3c 8a	jsr $8a3c			jsr 	EvaluateTerm				; evaluate the term
.8aeb	20 80 88	jsr $8880			jsr 	Dereference 				; dereference it.
.8aee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8af1	29 10		and #$10			and 	#NSTString
.8af3	d0 f0		bne $8ae5			bne 	_ETTypeMismatch
.8af5	4c bc 8d	jmp $8dbc			jmp 	NSMNegate  					; just toggles the sign bit.
.8af8					_ETDereference:
.8af8	20 3c 8a	jsr $8a3c			jsr 	EvaluateTerm				; evaluate the term
.8afb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8afe	29 20		and #$20			and 	#NSBIsReference
.8b00	f0 e3		beq $8ae5			beq 	_ETTypeMismatch
.8b02	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8b05	60		rts				rts
.8b06					_ETParenthesis:
.8b06	20 6b 87	jsr $876b			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8b09	20 a2 93	jsr $93a2			jsr 	CheckRightBracket 			; check for )
.8b0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8b0d					VariableHandler:
.8b0d	b1 30		lda ($30),y			lda 	(codePtr),y
.8b0f	18		clc				clc
.8b10	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b12	85 37		sta $37				sta 	zTemp0+1
.8b14	c8		iny				iny
.8b15	b1 30		lda ($30),y			lda 	(codePtr),y
.8b17	85 36		sta $36				sta 	zTemp0
.8b19	c8		iny				iny
.8b1a	18		clc				clc									; copy variable address+3 to mantissa
.8b1b	69 03		adc #$03			adc 	#3
.8b1d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b20	a5 37		lda $37				lda 	zTemp0+1
.8b22	69 00		adc #$00			adc 	#0
.8b24	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b27	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8b2a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8b2d	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8b30	5a		phy				phy
.8b31	a0 02		ldy #$02			ldy 	#2 							; read type
.8b33	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b35	7a		ply				ply
.8b36	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8b38	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8b3a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b3d	29 04		and #$04			and 	#NSBIsArray
.8b3f	d0 01		bne $8b42			bne 	_VHArray
.8b41	60		rts				rts
.8b42					_VHArray:
>8b42	db						.byte 	$DB 						; causes a break in the emulator
.8b43	80 fd		bra $8b42			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.975a					AbsUnary:
.975a	fa		plx				plx 								; restore stack pos
.975b	20 64 8d	jsr $8d64			jsr 	EvaluateNumber 				; get a float or int
.975e	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.9761	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9764	29 7f		and #$7f			and 	#$7F
.9766	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9769	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8b45					AllocUnary:
.8b45	fa		plx				plx 								; restore stack pos
.8b46	20 9c 8d	jsr $8d9c			jsr 	Evaluate16BitInteger		; get bytes required.
.8b49	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.8b4c	da		phx				phx 								; save X/Y
.8b4d	5a		phy				phy
.8b4e	8a		txa				txa 								; copy X into Y
.8b4f	a8		tay				tay
.8b50	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8b53	aa		tax				tax
.8b54	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8b57	20 64 8b	jsr $8b64			jsr 	AllocateXABytes 			; allocate memory
.8b5a	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8b5d	8a		txa				txa
.8b5e	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8b61	7a		ply				ply
.8b62	fa		plx				plx
.8b63	60		rts				rts
.8b64					AllocateXABytes:
.8b64	5a		phy				phy
.8b65	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8b68	5a		phy				phy
.8b69	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8b6c	5a		phy				phy
.8b6d	18		clc				clc
.8b6e	6d 0c 07	adc $070c			adc 	lowMemPtr
.8b71	8d 0c 07	sta $070c			sta 	lowMemPtr
.8b74	8a		txa				txa
.8b75	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8b78	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8b7b	fa		plx				plx
.8b7c	68		pla				pla
.8b7d	7a		ply				ply
.8b7e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.976a					AscUnary:
.976a	fa		plx				plx 								; restore stack pos
.976b	20 6f 8d	jsr $8d6f			jsr 	EvaluateString 				; get a string
.976e	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9770	20 12 8e	jsr $8e12			jsr 	NSMSetByte
.9773	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.9776	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9777					FracUnary:
.9777	fa		plx				plx 								; restore stack pos
.9778	20 64 8d	jsr $8d64			jsr 	EvaluateNumber 				; get a float or int
.977b	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.977e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9781	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9783	f0 04		beq $9789			beq 	_IUZero
.9785	20 47 96	jsr $9647			jsr 	FloatFractionalPart
.9788	60		rts				rts
.9789					_IUZero:
.9789	20 10 8e	jsr $8e10			jsr 	NSMSetZero
.978c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.978d					IntUnary:
.978d	fa		plx				plx 								; restore stack pos
.978e	20 64 8d	jsr $8d64			jsr 	EvaluateNumber 				; get a float or int
.9791	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.9794	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9797	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9799	f0 03		beq $979e			beq 	_IUExit
.979b	20 aa 96	jsr $96aa			jsr 	FloatIntegerPart
.979e					_IUExit:
.979e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.979f					LenUnary:
.979f	fa		plx				plx 								; restore stack pos
.97a0	20 6f 8d	jsr $8d6f			jsr 	EvaluateString 				; get a string
.97a3	5a		phy				phy
.97a4	a0 00		ldy #$00			ldy 	#0 							; find length
.97a6					_LenFind:
.97a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.97a8	f0 06		beq $97b0			beq 	_LenExit
.97aa	c8		iny				iny
.97ab	d0 f9		bne $97a6			bne 	_LenFind
.97ad	4c 60 98	jmp $9860			jmp 	RangeError 					; string > 255
.97b0					_LenExit:
.97b0	98		tya				tya
.97b1	20 12 8e	jsr $8e12			jsr 	NSMSetByte
.97b4	7a		ply				ply
.97b5	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.97b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8b7f					Unary_Not:
.8b7f	fa		plx				plx
.8b80	20 87 8d	jsr $8d87			jsr 	EvaluateInteger 			; get integer
.8b83	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.8b86	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; zero mantissa ?
.8b89	f0 04		beq $8b8f			beq 	_NotZero
.8b8b	20 10 8e	jsr $8e10			jsr 	NSMSetZero
.8b8e	60		rts				rts
.8b8f					_NotZero:
.8b8f	4c cf 83	jmp $83cf			jmp 	ReturnTrue
.8b92					_UNBad:
.8b92	4c 6a 98	jmp $986a			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8b95					Unary_Rnd:
.8b95	20 64 8d	jsr $8d64			jsr 	EvaluateNumber 				; number to use.
.8b98	20 a2 93	jsr $93a2			jsr 	CheckRightBracket 			; closing bracket
.8b9b	20 c4 8b	jsr $8bc4			jsr 	Random32Bit 				; generate a number.
.8b9e	ad 08 07	lda $0708			lda 	RandomSeed+0
.8ba1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ba4	ad 09 07	lda $0709			lda 	RandomSeed+1
.8ba7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8baa	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8bad	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8bb0	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8bb3	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8bb5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8bb8	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8bba	8d 28 06	sta $0628			sta 	NSExponent
.8bbd	a9 08		lda #$08			lda 	#NSTFloat
.8bbf	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8bc2	db						.byte 	$DB 						; causes a break in the emulator
.8bc3	60		rts				rts
.8bc4					Random32Bit:
.8bc4	5a		phy				phy
.8bc5	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8bc7	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8bca	d0 03		bne $8bcf			bne 	_Random1
.8bcc	a8		tay				tay 								; if so do it 256 times
.8bcd	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8bcf					_Random1:
.8bcf	0a		asl a				asl 	a 							; LSFR RNG
.8bd0	2e 09 07	rol $0709			rol 	RandomSeed+1
.8bd3	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8bd6	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8bd9	90 02		bcc $8bdd			bcc 	_Random2
.8bdb	49 c5		eor #$c5			eor 	#$C5
.8bdd					_Random2:
.8bdd	88		dey				dey
.8bde	d0 ef		bne $8bcf			bne 	_Random1
.8be0	7a		ply				ply
.8be1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.97b9					SgnUnary:
.97b9	fa		plx				plx 								; restore stack pos
.97ba	20 64 8d	jsr $8d64			jsr 	EvaluateNumber 				; get a float or int
.97bd	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.97c0	20 40 8e	jsr $8e40			jsr 	NSMIsZero 					; if zero
.97c3	f0 10		beq $97d5			beq 	_SGZero  					; return Int Zero
.97c5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.97c8	48		pha				pha
.97c9	a9 01		lda #$01			lda 	#1 							; set to 1
.97cb	20 12 8e	jsr $8e12			jsr 	NSMSetByte
.97ce	68		pla				pla
.97cf	29 80		and #$80			and		#$80 						; copy the sign byte out
.97d1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97d4	60		rts				rts
.97d5	20 10 8e	jsr $8e10	_SGZero:jsr 	NSMSetZero
.97d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.97d9					ValUnary:
.97d9	fa		plx				plx 								; restore stack pos
.97da	20 ef 97	jsr $97ef			jsr 	ValMainCode 				; do the main val() code
.97dd	b0 01		bcs $97e0			bcs 	_VUError 					; couldn't convert
.97df	60		rts				rts
.97e0					_VUError:
.97e0	4c 65 98	jmp $9865			jmp 	TypeError
.97e3					IsValUnary:
.97e3	fa		plx				plx 								; restore stack pos
.97e4	20 ef 97	jsr $97ef			jsr 	ValMainCode 				; do the main val() code
.97e7	b0 03		bcs $97ec			bcs 	_VUBad
.97e9	4c cf 83	jmp $83cf			jmp 	ReturnTrue
.97ec					_VUBad:
.97ec	4c db 83	jmp $83db			jmp 	ReturnFalse
.97ef					ValMainCode:
.97ef	20 6f 8d	jsr $8d6f			jsr 	EvaluateString 				; get a string
.97f2	20 a2 93	jsr $93a2			jsr 	CheckRightBracket 			; check right bracket present
.97f5	5a		phy				phy
.97f6	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.97f8	f0 17		beq $9811			beq 	_VMCFail2
.97fa	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.97fc	48		pha				pha 								; save first character
.97fd	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.97ff	d0 01		bne $9802			bne 	_VMCStart
.9801	c8		iny				iny 								; skip over -
.9802					_VMCStart:
.9802	38		sec				sec 								; initialise first time round.
.9803					_VMCNext:
.9803	c8		iny				iny 								; pre-increment
.9804	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9806	f0 0c		beq $9814			beq 	_VMCSuccess 				; successful.
.9808	20 1e 89	jsr $891e			jsr 	EncodeNumber 				; send it to the number-builder
.980b	90 03		bcc $9810			bcc 	_VMCFail 					; if failed, give up.
.980d	18		clc				clc 								; next time round, countinue
.980e	80 f3		bra $9803			bra 	_VMCNext
.9810					_VMCFail:
.9810	68		pla				pla
.9811					_VMCFail2:
.9811	7a		ply				ply
.9812	38		sec				sec
.9813	60		rts				rts
.9814					_VMCSuccess:
.9814	a9 00		lda #$00			lda 	#0 							; construct final
.9816	20 1e 89	jsr $891e			jsr 	EncodeNumber
.9819	68		pla				pla
.981a	c9 2d		cmp #$2d			cmp 	#"-"
.981c	d0 03		bne $9821			bne 	_VMCNotNegative
.981e	20 bc 8d	jsr $8dbc			jsr		NSMNegate
.9821					_VMCNotNegative:
.9821	7a		ply				ply
.9822	18		clc				clc
.9823	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8be2					ChrUnary:
.8be2	fa		plx				plx 								; restore stack pos
.8be3	20 a8 8d	jsr $8da8			jsr 	Evaluate8BitInteger			; get value
.8be6	48		pha				pha
.8be7	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.8bea	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8bec	20 fe 99	jsr $99fe			jsr 	StringTempAllocate
.8bef	68		pla				pla 								; write number to it
.8bf0	20 3c 9a	jsr $9a3c			jsr 	StringTempWrite
.8bf3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8bf4					SpcUnary:
.8bf4	fa		plx				plx 								; restore stack pos
.8bf5	20 a8 8d	jsr $8da8			jsr 	Evaluate8BitInteger			; get value
.8bf8	5a		phy				phy
.8bf9	48		pha				pha 								; save count
.8bfa	20 fe 99	jsr $99fe			jsr 	StringTempAllocate
.8bfd	7a		ply				ply 								; to do count in Y
.8bfe					_SpcLoop:
.8bfe	c0 00		cpy #$00			cpy 	#0
.8c00	f0 08		beq $8c0a			beq 	_SpcExit
.8c02	a9 20		lda #$20			lda 	#32
.8c04	20 3c 9a	jsr $9a3c			jsr 	StringTempWrite
.8c07	88		dey				dey
.8c08	80 f4		bra $8bfe			bra 	_SPCLoop
.8c0a					_SpcExit:
.8c0a	7a		ply				ply
.8c0b	20 a2 93	jsr $93a2			jsr 	CheckRightBracket
.8c0e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8c0f					Unary_Str:
.8c0f	fa		plx				plx
.8c10	20 64 8d	jsr $8d64			jsr 	EvaluateNumber  			; get number
.8c13	20 a2 93	jsr $93a2			jsr 	CheckRightBracket 			; closing bracket
.8c16	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8c18	20 31 8c	jsr $8c31			jsr 	ConvertNumberToString 		; do the conversion.
.8c1b	a9 21		lda #$21			lda		#33 						; create buffer
.8c1d	20 fe 99	jsr $99fe			jsr 	StringTempAllocate 			; allocate memory
.8c20	da		phx				phx
.8c21	a2 00		ldx #$00			ldx 	#0
.8c23					_USCopy:
.8c23	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8c26	20 3c 9a	jsr $9a3c			jsr 	StringTempWrite
.8c29	e8		inx				inx
.8c2a	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8c2d	d0 f4		bne $8c23			bne 	_USCopy
.8c2f	fa		plx				plx
.8c30	60		rts				rts
.8c31					ConvertNumberToString:
.8c31	5a		phy				phy 								; save code position
.8c32	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8c35	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8c38	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8c3b	10 0a		bpl $8c47			bpl 	_CNTSNotNegative
.8c3d	29 7f		and #$7f			and 	#$7F 						; make +ve
.8c3f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c42	a9 2d		lda #$2d			lda 	#"-"
.8c44	20 ad 8c	jsr $8cad			jsr 	WriteDecimalBuffer
.8c47					_CNTSNotNegative:
.8c47	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8c4a	f0 15		beq $8c61			beq 	_CNTSNotFloat
.8c4c	e8		inx				inx 								; round up
.8c4d	a9 01		lda #$01			lda 	#1
.8c4f	20 12 8e	jsr $8e12			jsr 	NSMSetByte
.8c52	ca		dex				dex
.8c53	bd 28 06	lda $0628,x			lda		NSExponent,x
.8c56	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8c59	a9 08		lda #$08			lda 	#NSTFloat
.8c5b	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8c5e	20 69 95	jsr $9569			jsr 	FloatAdd
.8c61					_CNTSNotFloat:
.8c61	20 8f 8c	jsr $8c8f			jsr 	MakePlusTwoString
.8c64	20 47 96	jsr $9647			jsr 	FloatFractionalPart 		; get the fractional part
.8c67	20 0b 97	jsr $970b			jsr 	NSNormalise					; normalise , exit if zero
.8c6a	f0 21		beq $8c8d			beq 	_CNTSExit
.8c6c	a9 2e		lda #$2e			lda 	#"."
.8c6e	20 ad 8c	jsr $8cad			jsr 	WriteDecimalBuffer 			; write decimal place
.8c71					_CNTSDecimal:
.8c71	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8c74	30 17		bmi $8c8d			bmi 	_CNTSExit
.8c76	e8		inx				inx 								; x 10.0
.8c77	a9 0a		lda #$0a			lda 	#10
.8c79	20 12 8e	jsr $8e12			jsr 	NSMSetByte
.8c7c	a9 08		lda #$08			lda 	#NSTFloat
.8c7e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c81	ca		dex				dex
.8c82	20 d4 96	jsr $96d4			jsr 	FloatMultiply
.8c85	20 8f 8c	jsr $8c8f			jsr 	MakePlusTwoString
.8c88	20 47 96	jsr $9647			jsr 	FloatFractionalPart 		; get the fractional part
.8c8b	80 e4		bra $8c71			bra 	_CNTSDecimal 				; keep going.
.8c8d					_CNTSExit:
.8c8d	7a		ply				ply
.8c8e	60		rts				rts
.8c8f					MakePlusTwoString:
.8c8f	da		phx				phx
.8c90	20 e7 8d	jsr $8de7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8c93	e8		inx				inx 								; access it
.8c94	e8		inx				inx
.8c95	20 aa 96	jsr $96aa			jsr 	FloatIntegerPart 			; make it an integer
.8c98	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8c9a	20 13 95	jsr $9513			jsr 	ConvertInt32
.8c9d	a2 00		ldx #$00			ldx	 	#0
.8c9f					_MPTSCopy:
.8c9f	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ca2	20 ad 8c	jsr $8cad			jsr 	WriteDecimalBuffer
.8ca5	e8		inx				inx
.8ca6	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ca9	d0 f4		bne $8c9f			bne 	_MPTSCopy
.8cab	fa		plx				plx
.8cac	60		rts				rts
.8cad					WriteDecimalBuffer:
.8cad	da		phx				phx
.8cae	ae 14 07	ldx $0714			ldx 	dbOffset
.8cb1	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8cb4	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8cb7	ee 14 07	inc $0714			inc 	dbOffset
.8cba	fa		plx				plx
.8cbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8cbc					Unary_Left:
.8cbc	fa		plx				plx
.8cbd	18		clc				clc 								; only one parameter
.8cbe	20 33 8d	jsr $8d33			jsr 	SubstringInitial 			; set up.
.8cc1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8cc4	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8cc7	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8cca	80 2c		bra $8cf8			bra 	SubstringMain
.8ccc					Unary_Right:
.8ccc	fa		plx				plx
.8ccd	18		clc				clc 								; only one parameter
.8cce	20 33 8d	jsr $8d33			jsr 	SubstringInitial 			; set up.
.8cd1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8cd4	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8cd7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8cda	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8cdd	b0 02		bcs $8ce1			bcs 	_URNotUnderflow
.8cdf	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8ce1					_URNotUnderFlow:
.8ce1	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8ce4	80 12		bra $8cf8			bra 	SubStringMain
.8ce6					Unary_Mid:
.8ce6	fa		plx				plx
.8ce7	38		sec				sec 								; two parameters
.8ce8	20 33 8d	jsr $8d33			jsr 	SubstringInitial 			; set up.
.8ceb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8cee	f0 05		beq $8cf5			beq 	_UMError
.8cf0	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8cf3	80 03		bra $8cf8			bra 	SubStringMain
.8cf5					_UMError:
.8cf5	4c 6a 98	jmp $986a			jmp 	ArgumentError
.8cf8					SubStringMain:
.8cf8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8cfb	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8cfe	b0 2d		bcs $8d2d			bcs 	_SSMNull 					; if so, return an empty string.
.8d00	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8d03	f0 28		beq $8d2d			beq 	_SSMNull 					; return empty string.
.8d05	18		clc				clc 								; add the offset +1 to the address and
.8d06	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8d09	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8d0c	85 36		sta $36				sta 	zTemp0
.8d0e	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8d11	69 00		adc #$00			adc 	#0
.8d13	85 37		sta $37				sta 	zTemp0+1
.8d15					_SSMNoCarry:
.8d15	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8d18	20 fe 99	jsr $99fe			jsr 	StringTempAllocate 			; allocate that many characters
.8d1b	5a		phy				phy 								; save Y
.8d1c	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8d1e					_SSMCopy:
.8d1e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8d20	f0 09		beq $8d2b			beq 	_SSMEString 				; no more to copy
.8d22	20 3c 9a	jsr $9a3c			jsr 	StringTempWrite 			; and write it out.
.8d25	c8		iny				iny
.8d26	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8d29	d0 f3		bne $8d1e			bne 	_SSMCopy
.8d2b					_SSMEString:
.8d2b	7a		ply				ply
.8d2c					_SSMExit:
.8d2c	60		rts				rts
.8d2d					_SSMNull:
.8d2d	a9 00		lda #$00			lda 	#0
.8d2f	20 fe 99	jsr $99fe			jsr 	StringTempAllocate
.8d32	60		rts				rts
.8d33					SubstringInitial:
.8d33	da		phx				phx 								; save initial stack position
.8d34	08		php				php 								; save carry on stack indicating 2 parameters
.8d35	20 6f 8d	jsr $8d6f			jsr 	EvaluateString 				; get a string
.8d38	5a		phy				phy 								; calculate length to exponent.
.8d39	a0 ff		ldy #$ff			ldy 	#$FF
.8d3b					_SIFindLength:
.8d3b	c8		iny				iny
.8d3c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d3e	d0 fb		bne $8d3b			bne 	_SIFindLength
.8d40	98		tya				tya
.8d41	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8d44	7a		ply				ply
.8d45	e8		inx				inx
.8d46	20 aa 93	jsr $93aa			jsr 	CheckComma 					; comma next
.8d49	20 a8 8d	jsr $8da8			jsr 	Evaluate8BitInteger 		; get next parameter
.8d4c	28		plp				plp 								; is it the last parameter ?
.8d4d	90 07		bcc $8d56			bcc 	_SSIExit 					; if so, exit.
.8d4f	e8		inx				inx
.8d50	20 aa 93	jsr $93aa			jsr 	CheckComma 					; comma next
.8d53	20 a8 8d	jsr $8da8			jsr 	Evaluate8BitInteger 		; get last parameter
.8d56					_SSIExit:
.8d56	fa		plx				plx
.8d57	20 a2 93	jsr $93a2			jsr 	CheckRightBracket 			; check closing bracket
.8d5a	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8d5b					EvaluateValue:
.8d5b	48		pha				pha
.8d5c	20 6b 87	jsr $876b			jsr		EvaluateExpression 			; expression
.8d5f	20 80 88	jsr $8880			jsr 	Dereference					; derefernce it
.8d62	68		pla				pla
.8d63	60		rts				rts
.8d64					EvaluateNumber:
.8d64	20 5b 8d	jsr $8d5b			jsr 	EvaluateValue 				; get a value
.8d67	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8d6a	29 10		and #$10			and 	#NSBIsString
.8d6c	d0 16		bne $8d84			bne 	HelperTypeError
.8d6e	60		rts				rts
.8d6f					EvaluateString:
.8d6f	20 5b 8d	jsr $8d5b			jsr 	EvaluateValue 				; get a value
.8d72	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8d75	29 10		and #$10			and 	#NSBIsString
.8d77	f0 0b		beq $8d84			beq 	HelperTypeError
.8d79					CopyAddressToTemp0:
.8d79	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8d7c	85 36		sta $36				sta 	zTemp0
.8d7e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d81	85 37		sta $37				sta 	zTemp0+1
.8d83	60		rts				rts
.8d84					HelperTypeError:
.8d84	4c 65 98	jmp $9865			jmp 	TypeError
.8d87					EvaluateInteger:
.8d87	20 64 8d	jsr $8d64			jsr 	EvaluateNumber
.8d8a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8d8d	d0 0a		bne $8d99			bne 	HelperValueError 			; if not, it's a float.
.8d8f	60		rts				rts
.8d90					EvaluateUnsignedInteger:
.8d90	20 87 8d	jsr $8d87			jsr 	EvaluateInteger 			; check integer is +ve
.8d93	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d96	30 01		bmi $8d99			bmi 	HelperValueError
.8d98	60		rts				rts
.8d99					HelperValueError:
.8d99	4c 6a 98	jmp $986a			jmp 	ArgumentError
.8d9c					Evaluate16BitInteger:
.8d9c	20 90 8d	jsr $8d90			jsr	 	EvaluateUnsignedInteger		; get integer
.8d9f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8da2	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8da5	d0 f2		bne $8d99			bne 	HelperValueError
.8da7	60		rts				rts
.8da8					Evaluate8BitInteger:
.8da8	20 90 8d	jsr $8d90			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8dab	d0 ec		bne $8d99			bne 	HelperValueError
.8dad	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8db0	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8db3	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8db6	d0 e1		bne $8d99			bne 	HelperValueError
.8db8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8dbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8dbc					NSMNegate:
.8dbc	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8dbf	49 80		eor #$80			eor 	#NSBIsNegative
.8dc1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dc4	60		rts				rts
.8dc5					NSMNegateMantissa:
.8dc5	38		sec				sec
.8dc6	a9 00		lda #$00			lda 	#0
.8dc8	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8dcb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dce	a9 00		lda #$00			lda 	#0
.8dd0	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8dd3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8dd6	a9 00		lda #$00			lda 	#0
.8dd8	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8ddb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8dde	a9 00		lda #$00			lda 	#0
.8de0	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8de3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8de6	60		rts				rts
.8de7					NSMShiftUpTwo:
.8de7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8dea	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8ded	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8df0	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8df3	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8df6	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8df9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8dfc	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8dff	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8e02	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8e05	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e08	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8e0b	60		rts				rts
.8e0c					NSMSetZeroMantissaOnly:
.8e0c	a9 00		lda #$00			lda 	#0
.8e0e	80 08		bra $8e18			bra 	NSMSetMantissa
.8e10					NSMSetZero:
.8e10	a9 00		lda #$00			lda 	#0
.8e12					NSMSetByte:
.8e12	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8e15	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8e18					NSMSetMantissa:
.8e18	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8e1b	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8e1e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8e21	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8e24	60		rts				rts
.8e25					NSMShiftLeft:
.8e25	18		clc				clc
.8e26					NSMRotateLeft:
.8e26	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8e29	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8e2c	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8e2f	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8e32	60		rts				rts
.8e33					NSMShiftRight:
.8e33	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8e36	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8e39	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8e3c	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8e3f	60		rts				rts
.8e40					NSMIsZero:
.8e40	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8e43	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8e46	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8e49	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8e4c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9824					DecimalScalarTable:
>9824	66 66 66 66				.dword $66666666 ; 0.1
>9828	de					.byte $de
>9829	1f 85 eb 51				.dword $51eb851f ; 0.01
>982d	db					.byte $db
>982e	4c 37 89 41				.dword $4189374c ; 0.001
>9832	d8					.byte $d8
>9833	ac 8b db 68				.dword $68db8bac ; 0.0001
>9837	d4					.byte $d4
>9838	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>983c	d1					.byte $d1
>983d	83 de 1b 43				.dword $431bde83 ; 1e-06
>9841	ce					.byte $ce
>9842	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9846	ca					.byte $ca
>9847	89 3b e6 55				.dword $55e63b89 ; 1e-08
>984b	c7					.byte $c7
>984c	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9850	c4					.byte $c4
>9851	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9855	c0					.byte $c0
>9856	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>985a	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.985b					SyntaxError:
.985b	a9 02		lda #$02		lda	#2
.985d	4c 69 83	jmp $8369		jmp	ErrorHandler
.9860					RangeError:
.9860	a9 04		lda #$04		lda	#4
.9862	4c 69 83	jmp $8369		jmp	ErrorHandler
.9865					TypeError:
.9865	a9 05		lda #$05		lda	#5
.9867	4c 69 83	jmp $8369		jmp	ErrorHandler
.986a					ArgumentError:
.986a	a9 07		lda #$07		lda	#7
.986c	4c 69 83	jmp $8369		jmp	ErrorHandler
.986f					NotDoneError:
.986f	a9 0c		lda #$0c		lda	#12
.9871	4c 69 83	jmp $8369		jmp	ErrorHandler
.9874					ErrorText:
>9874	42 72 65 61 6b 00			.text	"Break",0
>987a	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9882	72 72 6f 72 00
>9887	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>988f	20 62 79 20 7a 65 72 6f 00
>9898	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>98a0	61 6e 67 65 00
>98a5	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>98ad	6d 61 74 63 68 00
>98b3	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>98bb	65 6d 6f 72 79 00
>98c1	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>98c9	61 72 67 75 6d 65 6e 74 00
>98d2	53 74 6f 70 00				.text	"Stop",0
>98d7	53 74 72 69 6e 67 20 74			.text	"String too long",0
>98df	6f 6f 20 6c 6f 6e 67 00
>98e7	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>98ef	6e 20 66 61 69 6c 65 64 00
>98f8	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9900	61 74 61 00
>9904	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>990c	65 6e 74 65 64 00
>9912	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>991a	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9926	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>992e	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>993b	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9943	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9950	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9958	68 6f 75 74 20 57 68 69 6c 65 00
>9963	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>996b	61 63 6b 20 66 75 6c 6c 00
>9974	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>997c	75 63 74 75 72 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8e4d					StackOpen:
.8e4d	48		pha				pha 								; save frame byte
.8e4e	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8e50	0a		asl a				asl 	a 							; claim twice this for storage
.8e51	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8e53	38		sec				sec 								; so basically subtracting from
.8e54	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8e56	85 34		sta $34				sta 	basicStack
.8e58	b0 08		bcs $8e62			bcs 	_SONoBorrow
.8e5a	c6 35		dec $35				dec 	basicStack+1
.8e5c	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8e5e	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8e60	90 04		bcc $8e66			bcc 	_SOMemory
.8e62					_SONoBorrow:
.8e62	68		pla				pla 								; get marker back and write at TOS
.8e63	92 34		sta ($34)			sta 	(basicStack)
.8e65	60		rts				rts
.8e66					_SOMemory:
.8e66							ERR_STACK
.8e66					StackClose:
.8e66	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8e68	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8e6a	0a		asl a				asl 	a 							; claim twice this.
.8e6b	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8e6d	85 34		sta $34				sta 	basicStack
.8e6f	90 02		bcc $8e73			bcc 	_SCExit
.8e71	e6 35		inc $35				inc 	basicStack+1
.8e73					_SCExit:
.8e73	60		rts				rts
.8e74					StackCheckFrame:
.8e74	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8e76	29 f0		and #$f0			and 	#$F0 						; check type bits
.8e78	d0 01		bne $8e7b			bne 	_SCFError 					; different, we have structures mixed up
.8e7a	60		rts				rts
.8e7b					_SCFError:
.8e7b	8a		txa				txa 								; report error X
.8e7c	4c 69 83	jmp $8369			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8e7f					STKSaveCodePosition:
.8e7f	5a		phy				phy
.8e80	98		tya				tya 								; save Y
.8e81	a0 05		ldy #$05			ldy 	#5
.8e83	91 34		sta ($34),y			sta 	(basicStack),y
.8e85	88		dey				dey 								; save Code Pointer
.8e86					_STKSaveLoop:
.8e86	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8e89	91 34		sta ($34),y			sta 	(basicStack),y
.8e8b	88		dey				dey
.8e8c	d0 f8		bne $8e86			bne 	_STKSaveLoop
.8e8e	7a		ply				ply
.8e8f	60		rts				rts
.8e90					STKLoadCodePosition:
.8e90	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8e92					_STKLoadLoop:
.8e92	b1 34		lda ($34),y			lda 	(basicStack),y
.8e94	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8e97	c8		iny				iny
.8e98	c0 05		cpy #$05			cpy 	#5
.8e9a	d0 f6		bne $8e92			bne 	_STKLoadLoop
.8e9c	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8e9e	a8		tay				tay
.8e9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8ea0					StackReset:
.8ea0	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8ea2	85 34		sta $34				sta 	0+basicStack
.8ea4	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8ea6	85 35		sta $35				sta 	1+basicStack
.8ea8	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8eaa	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8eac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9983					StringConcrete:
.9983	5a		phy				phy 								; save position on stack
.9984	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9987	85 38		sta $38				sta 	zTemp1
.9989	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.998c	85 39		sta $39				sta 	zTemp1+1
.998e	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9990					_SALength:
.9990	c8		iny				iny
.9991	b1 38		lda ($38),y			lda 	(zTemp1),y
.9993	d0 fb		bne $9990			bne 	_SALength
.9995	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9997	b0 3f		bcs $99d8			bcs 	_SALengthError
.9999	98		tya				tya 				 				; length of the new string
.999a	18		clc				clc
.999b	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.999d	90 02		bcc $99a1			bcc 	_SAHaveLength
.999f	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.99a1					_SAHaveLength:
.99a1	48		pha				pha 								; save length.
.99a2	38		sec				sec
.99a3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.99a5	6d 0e 07	adc $070e			adc 	StringMemory
.99a8	8d 0e 07	sta $070e			sta 	StringMemory
.99ab	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.99ad	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.99b0	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.99b2	6d 0f 07	adc $070f			adc 	StringMemory+1
.99b5	8d 0f 07	sta $070f			sta 	StringMemory+1
.99b8	85 3b		sta $3b				sta 	zTemp2+1
.99ba	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.99bd	68		pla				pla 								; save length-3 (chars allowed) in first byte
.99be	38		sec				sec
.99bf	e9 03		sbc #$03			sbc 	#3
.99c1	92 3a		sta ($3a)			sta 	(zTemp2)
.99c3	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.99c5	a0 01		ldy #$01			ldy 	#1
.99c7	91 3a		sta ($3a),y			sta 	(zTemp2),y
.99c9					_SACopyNewString:
.99c9	a0 00		ldy #$00			ldy 	#0
.99cb					_SACopyNSLoop:
.99cb	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.99cd	c8		iny				iny 								; write two on in string storage
.99ce	c8		iny				iny
.99cf	91 3a		sta ($3a),y			sta 	(zTemp2),y
.99d1	88		dey				dey 								; this makes it one one.
.99d2	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.99d4	d0 f5		bne $99cb			bne 	_SACopyNSLoop
.99d6	7a		ply				ply
.99d7	60		rts				rts
.99d8					_SALengthError:
.99d8	a9 09		lda #$09		lda	#9
.99da	4c 69 83	jmp $8369		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.99dd					StringSystemInitialise:
.99dd	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.99df	8d 0e 07	sta $070e			sta 	0+StringMemory
.99e2	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.99e4	8d 0f 07	sta $070f			sta 	1+StringMemory
.99e7	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.99ea	60		rts				rts
.99eb					StringSpaceInitialise:
.99eb	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.99ed	8d 10 07	sta $0710			sta 	StringInitialised
.99f0	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.99f3	8d 11 07	sta $0711			sta 	StringTempPointer
.99f6	ad 0f 07	lda $070f			lda 	StringMemory+1
.99f9	3a		dec a				dec 	a
.99fa	8d 12 07	sta $0712			sta 	StringTempPointer+1
.99fd	60		rts				rts
.99fe					StringTempAllocate:
.99fe	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9a00	b0 35		bcs $9a37			bcs 	_STALength
.9a02	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9a05	30 05		bmi $9a0c			bmi 	_STAAllocate
.9a07	48		pha				pha 								; save value to subtract.
.9a08	20 eb 99	jsr $99eb			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9a0b	68		pla				pla 								; restore it
.9a0c					_STAAllocate:
.9a0c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9a0e	18		clc				clc  								; deliberate allows one more
.9a0f	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9a12	8d 11 07	sta $0711			sta 	StringTempPointer
.9a15	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9a18	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9a1a	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9a1d	69 ff		adc #$ff			adc 	#$FF
.9a1f	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9a22	85 3d		sta $3d				sta 	zsTemp+1
.9a24	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9a27	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9a2a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9a2d	a9 10		lda #$10			lda 	#NSTString
.9a2f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9a32	a9 00		lda #$00			lda 	#0 							; clear the target string
.9a34	92 3c		sta ($3c)			sta 	(zsTemp)
.9a36	60		rts				rts
.9a37					_STALength:
.9a37	a9 09		lda #$09		lda	#9
.9a39	4c 69 83	jmp $8369		jmp	ErrorHandler
.9a3c					StringTempWrite:
.9a3c	48		pha				pha
.9a3d	92 3c		sta ($3c)			sta 	(zsTemp)
.9a3f	e6 3c		inc $3c				inc 	zsTemp
.9a41	d0 02		bne $9a45			bne 	_STWNoCarry
.9a43	e6 3d		inc $3d				inc 	zsTemp+1
.9a45					_STWNoCarry:
.9a45	a9 00		lda #$00			lda 	#0
.9a47	92 3c		sta ($3c)			sta 	(zsTemp)
.9a49	68		pla				pla
.9a4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8ead					BackloadProgram:
.8ead	a2 ff		ldx #$ff			ldx 	#$FF
.8eaf	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8eb2	20 dc 8e	jsr $8edc			jsr 	BLReadByte
.8eb5	30 1e		bmi $8ed5			bmi 	_BPExit
.8eb7					_BPCopy:
.8eb7	e8		inx				inx  								; copy byte in
.8eb8	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8ebb	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8ebe	20 dc 8e	jsr $8edc			jsr 	BLReadByte 					; read next byte
.8ec1	30 0a		bmi $8ecd			bmi 	_BPEndLine 					; -ve = EOL
.8ec3	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8ec5	d0 02		bne $8ec9			bne 	_BPNotTab
.8ec7	a9 20		lda #$20			lda 	#' '
.8ec9					_BPNotTab:
.8ec9	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8ecb	b0 ea		bcs $8eb7			bcs 	_BPCopy
.8ecd					_BPEndLine:
.8ecd	20 a0 90	jsr $90a0			jsr 	TokeniseLine 				; tokenise the line.
.8ed0	20 2c 93	jsr $932c			jsr 	MemoryAppend 				; append to current program
.8ed3	80 d8		bra $8ead			bra 	BackloadProgram
.8ed5					_BPExit:
.8ed5	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8ed8	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear variables etc.
.8edb	60		rts				rts
.8edc					BLReadByte:
.8edc					_BLLoad:
.8edc	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8edf	ee dd 8e	inc $8edd			inc 	_BLLoad+1
.8ee2	d0 03		bne $8ee7			bne 	_BLNoCarry
.8ee4	ee de 8e	inc $8ede			inc 	_BLLoad+2
.8ee7					_BLNoCarry:
.8ee7	c9 00		cmp #$00			cmp 	#0
.8ee9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8eea					TokeniseSearchTable:
.8eea	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8eec	85 36		sta $36				sta 	zTemp0
.8eee	a0 00		ldy #$00			ldy 	#0
.8ef0	a9 80		lda #$80			lda 	#$80 						; token #
.8ef2	85 38		sta $38				sta 	zTemp1
.8ef4					_TSTLoop:
.8ef4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8ef6	30 49		bmi $8f41			bmi 	_TSTFail 					; -ve = end of table
.8ef8	f0 2e		beq $8f28			beq 	_TSTNext 					; zero, check next it's a dummy
.8efa	c8		iny				iny 								; get the hash
.8efb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8efd	88		dey				dey
.8efe	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8f01	d0 25		bne $8f28			bne 	_TSTNext
.8f03	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8f06	38		sec				sec
.8f07	ed 00 07	sbc $0700			sbc 	identStart
.8f0a	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8f0c	d0 1a		bne $8f28			bne 	_TSTNext
.8f0e	5a		phy				phy 								; save Y , we might fail
.8f0f	c8		iny				iny 								; point to text
.8f10	c8		iny				iny
.8f11	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8f14					_TSTCompareName:
.8f14	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8f17	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8f19	d0 0c		bne $8f27			bne 	_TSTNextPullY 				; fail, pullY and do next
.8f1b	e8		inx				inx
.8f1c	c8		iny				iny
.8f1d	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8f20	d0 f2		bne $8f14			bne 	_TSTCompareName
.8f22	7a		ply				ply 								; throw Y
.8f23	a5 38		lda $38				lda 	zTemp1 						; get token #
.8f25	38		sec				sec 								; return with CS = passed.
.8f26	60		rts				rts
.8f27					_TSTNextPullY:
.8f27	7a		ply				ply 								; restore current, fall through.
.8f28					_TSTNext:
.8f28	e6 38		inc $38				inc 	zTemp1 						; token counter
.8f2a	98		tya				tya
.8f2b	18		clc				clc
.8f2c	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8f2e	1a		inc a				inc 	a 							; +1
.8f2f	1a		inc a				inc 	a 							; +2
.8f30	a8		tay				tay
.8f31	10 c1		bpl $8ef4			bpl 	_TSTLoop 					; if Y < $80 loop back
.8f33	98		tya				tya 								; add Y to zTemp0 and reset Y
.8f34	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8f36	18		clc				clc  								; but have tables > 255 bytes
.8f37	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8f39	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8f3b	90 b7		bcc $8ef4			bcc 	_TSTLoop
.8f3d	e6 37		inc $37				inc 	zTemp0+1
.8f3f	80 b3		bra $8ef4			bra 	_TSTLoop
.8f41					_TSTFail:
.8f41	18		clc				clc
.8f42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8f43					KeywordSet0:
>8f43	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f45	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f47	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f49	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8f4f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8f57	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8f5d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8f64	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8f6b	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8f72	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8f78	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8f80	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8f88	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8f8e	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8f95	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8f9b	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8fa3	28
>8fa4	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8faa	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8fb0	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8fb6	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8fbd	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8fc3	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8fc9	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8fce	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8fd2	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8fd8	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8fe0	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8fe7	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8fee	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8ff6	43
>8ff7	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8ffd	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>9004	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>900a	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>9010	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>9015	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>901b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>9020	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a4 DOWNTO
>9028	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>902f	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>9035	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>903a	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>9041	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>9047	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>904c	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>9054	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>905a	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>905e	ff					.text	$FF
.905f					KeywordSet1:
>905f	00 65					.text	0,$65,""               ; $80 !0:EOF
>9061	00 58					.text	0,$58,""               ; $81 !1:SH1
>9063	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9065	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>906d	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>9074	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9079	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>907f	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9084	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>908c	45
>908d	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9092	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9098	ff					.text	$FF
.9099					KeywordSet2:
>9099	00 65					.text	0,$65,""               ; $80 !0:EOF
>909b	00 58					.text	0,$58,""               ; $81 !1:SH1
>909d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>909f	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.90a0					TokeniseLine:
.90a0	20 28 92	jsr $9228			jsr 	FixLineBufferCase 			; fix line case
.90a3	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.90a5	8d 15 07	sta $0715			sta 	tokenOffset
.90a8	9c 16 07	stz $0716			stz 	tokenLineNumber
.90ab	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.90ae	a2 ff		ldx #$ff			ldx 	#$FF
.90b0					_TKFindFirst:
.90b0	e8		inx				inx
.90b1	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.90b4	f0 79		beq $912f			beq 	_TKExit
.90b6	c9 20		cmp #$20			cmp 	#' '
.90b8	90 f6		bcc $90b0			bcc 	_TKFindFirst
.90ba	c9 30		cmp #$30			cmp 	#'0'
.90bc	90 07		bcc $90c5			bcc 	_TKNoLineNumber
.90be	c9 3a		cmp #$3a			cmp 	#'9'+1
.90c0	b0 03		bcs $90c5			bcs 	_TKNoLineNumber
.90c2	20 52 92	jsr $9252			jsr 	TokeniseExtractLineNumber
.90c5					_TKNoLineNumber:
.90c5					_TKTokeniseLoop:
.90c5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.90c8	f0 65		beq $912f			beq 	_TKExit
.90ca	e8		inx				inx
.90cb	c9 20		cmp #$20			cmp 	#' '
.90cd	f0 f6		beq $90c5			beq 	_TKTokeniseLoop 			; keep looping if space found.
.90cf	ca		dex				dex 								; undo last get, A contains character, X is position.
.90d0	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.90d2	f0 61		beq $9135			beq 	_TKTokeniseIdentifier
.90d4	c9 41		cmp #$41			cmp 	#'A'
.90d6	90 04		bcc $90dc			bcc 	_TKTokenisePunctuation
.90d8	c9 5b		cmp #$5b			cmp 	#'Z'+1
.90da	90 59		bcc $9135			bcc 	_TKTokeniseIdentifier
.90dc					_TKTokenisePunctuation:
.90dc	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.90de	f0 27		beq $9107			beq 	_TKString
.90e0	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.90e2	f0 28		beq $910c			beq 	_TKHexConstant
.90e4	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.90e6	f0 29		beq $9111			beq 	_TKCheckDouble
.90e8	c9 3e		cmp #$3e			cmp 	#'>'
.90ea	f0 25		beq $9111			beq 	_TKCheckDouble
.90ec					_TKStandardPunctuation:
.90ec	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.90ef	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.90f1	90 0e		bcc $9101			bcc 	_TKNoShift
.90f3	48		pha				pha 								; save
.90f4	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.90f6	85 36		sta $36				sta 	zTemp0
.90f8	68		pla				pla
.90f9	29 20		and #$20			and 	#32 						; bit 5
.90fb	4a		lsr a				lsr 	a 							; shift into bit 3
.90fc	4a		lsr a				lsr 	a
.90fd	05 36		ora $36				ora 	zTemp0
.90ff	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9101					_TKNoShift:
.9101	20 97 92	jsr $9297			jsr 	TokeniseWriteByte 			; write the punctuation character
.9104	e8		inx				inx 								; consume the character
.9105	80 be		bra $90c5			bra 	_TKTokeniseLoop 			; and loop round again.
.9107					_TKString:
.9107	20 b7 91	jsr $91b7			jsr 	TokeniseString
.910a	80 b9		bra $90c5			bra 	_TKTokeniseLoop
.910c					_TKHexConstant:
.910c	20 f2 91	jsr $91f2			jsr 	TokeniseHexConstant
.910f	80 b4		bra $90c5			bra 	_TKTokeniseLoop
.9111					_TKCheckDouble:
.9111	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.9114	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9116	90 d4		bcc $90ec			bcc 	_TKStandardPunctuation
.9118	c9 3f		cmp #$3f			cmp 	#'>'+1
.911a	b0 d0		bcs $90ec			bcs 	_TKStandardPunctuation
.911c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.911f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9121	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9122	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9125	38		sec				sec
.9126	e9 3c		sbc #$3c			sbc 	#'<'
.9128	20 97 92	jsr $9297			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.912b	e8		inx				inx 								; consume both
.912c	e8		inx				inx
.912d	80 96		bra $90c5			bra 	_TKTokeniseLoop
.912f	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9131	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.9134	60		rts				rts
.9135					_TKTokeniseIdentifier:
.9135	8e 00 07	stx $0700			stx 	identStart 					; save start
.9138	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.913b					_TKCheckLoop:
.913b	e8		inx				inx 								; look at next, we know first is identifier.
.913c	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.913f	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9141	f0 f8		beq $913b			beq 	_TKCheckLoop
.9143	c9 30		cmp #$30			cmp	 	#"0"
.9145	90 0c		bcc $9153			bcc 	_TKEndIdentifier
.9147	c9 3a		cmp #$3a			cmp 	#"9"+1
.9149	90 f0		bcc $913b			bcc 	_TKCheckLoop
.914b	c9 41		cmp #$41			cmp	 	#"A"
.914d	90 04		bcc $9153			bcc 	_TKEndIdentifier
.914f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9151	90 e8		bcc $913b			bcc 	_TKCheckLoop
.9153					_TKEndIdentifier:
.9153	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9156	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9158	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.915a	f0 06		beq $9162			beq 	_TKHasTypeCharacter
.915c	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.915e	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9160	d0 07		bne $9169			bne 	_TKNoTypeCharacter
.9162					_TKHasTypeCharacter:
.9162	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9165	e8		inx				inx 								; read next
.9166	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9169					_TKNoTypeCharacter:
.9169	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.916b	d0 09		bne $9176			bne 	_TKNoArray
.916d	e8		inx				inx 								; skip the (
.916e	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9171	09 04		ora #$04			ora 	#$04
.9173	8d 04 07	sta $0704			sta 	identTypeByte
.9176					_TKNoArray:
.9176	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9179	20 13 92	jsr $9213			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.917c	a0 8f		ldy #$8f			ldy 	#(KeywordSet0) >> 8
.917e	a9 43		lda #$43			lda 	#(KeywordSet0) & $FF
.9180	20 ea 8e	jsr $8eea			jsr 	TokeniseSearchTable
.9183	a2 00		ldx #$00			ldx 	#0
.9185	b0 1f		bcs $91a6			bcs 	_TKFoundToken
.9187	a0 90		ldy #$90			ldy 	#(KeywordSet1) >> 8
.9189	a9 5f		lda #$5f			lda 	#(KeywordSet1) & $FF
.918b	20 ea 8e	jsr $8eea			jsr 	TokeniseSearchTable
.918e	a2 81		ldx #$81			ldx 	#$81
.9190	b0 14		bcs $91a6			bcs 	_TKFoundToken
.9192	a0 90		ldy #$90			ldy 	#(KeywordSet1) >> 8
.9194	a9 5f		lda #$5f			lda 	#(KeywordSet1) & $FF
.9196	20 ea 8e	jsr $8eea			jsr 	TokeniseSearchTable
.9199	a2 82		ldx #$82			ldx 	#$82
.919b	b0 09		bcs $91a6			bcs 	_TKFoundToken
.919d	20 a3 92	jsr $92a3			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.91a0	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.91a3	4c c5 90	jmp $90c5			jmp 	_TKTokeniseLoop 			; and go round again.
.91a6					_TKFoundToken:
.91a6	48		pha				pha 								; save token
.91a7	8a		txa				txa 								; shift in X, is there one ?
.91a8	f0 03		beq $91ad			beq 	_TKNoTShift
.91aa	20 97 92	jsr $9297			jsr 	TokeniseWriteByte 			; if so, write it out
.91ad					_TKNoTShift:
.91ad	68		pla				pla 								; restore and write token
.91ae	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.91b1	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.91b4	4c c5 90	jmp $90c5			jmp 	_TKTokeniseLoop 			; and go round again.
.91b7					TokeniseString:
.91b7	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.91b9	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.91bc	e8		inx				inx									; start of quoted string.
.91bd	da		phx				phx 								; push start of string on top
.91be	ca		dex				dex
.91bf					_TSFindEnd:
.91bf	e8		inx				inx
.91c0	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.91c3	f0 04		beq $91c9			beq 	_TSEndOfString
.91c5	c9 22		cmp #$22			cmp 	#'"'
.91c7	d0 f6		bne $91bf			bne 	_TSFindEnd
.91c9					_TSEndOfString:
.91c9	7a		ply				ply  								; so now Y is first character, X is character after end.
.91ca	48		pha				pha 								; save terminating character
.91cb	20 d3 91	jsr $91d3			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.91ce	68		pla				pla 								; terminating character
.91cf	f0 01		beq $91d2			beq 	_TSNotQuote					; if it wasn't EOS skip it
.91d1	e8		inx				inx
.91d2					_TSNotQuote:
.91d2	60		rts				rts
.91d3					TOWriteBlockXY:
.91d3	86 36		stx $36				stx 	zTemp0 						; write end character
.91d5	98		tya				tya
.91d6	49 ff		eor #$ff			eor 	#$FF
.91d8	38		sec				sec
.91d9	65 36		adc $36				adc 	zTemp0
.91db	1a		inc a				inc 	a 							; one extra for NULL
.91dc	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.91df					_TOBlockLoop:
.91df	c4 36		cpy $36				cpy 	zTemp0
.91e1	f0 09		beq $91ec			beq 	_TOBlockExit
.91e3	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.91e6	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.91e9	c8		iny				iny
.91ea	80 f3		bra $91df			bra 	_TOBlockLoop
.91ec					_TOBlockExit:
.91ec	a9 00		lda #$00			lda 	#0
.91ee	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.91f1	60		rts				rts
.91f2					TokeniseHexConstant:
.91f2	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.91f4	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.91f7	e8		inx				inx									; start of quoted string.
.91f8	da		phx				phx 								; push start of constant on top
.91f9	ca		dex				dex
.91fa					_THFindLoop:
.91fa	e8		inx				inx
.91fb	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.91fe	c9 30		cmp #$30			cmp 	#"0"
.9200	90 0c		bcc $920e			bcc 	_THFoundEnd
.9202	c9 3a		cmp #$3a			cmp 	#"9"+1
.9204	90 f4		bcc $91fa			bcc 	_THFindLoop
.9206	c9 41		cmp #$41			cmp 	#"A"
.9208	90 04		bcc $920e			bcc 	_THFoundEnd
.920a	c9 47		cmp #$47			cmp 	#"F"+1
.920c	90 ec		bcc $91fa			bcc 	_THFindLoop
.920e					_THFoundEnd:
.920e	7a		ply				ply 								; restore start
.920f	20 d3 91	jsr $91d3			jsr 	TOWriteBlockXY 				; output the block
.9212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9213					TokeniseCalculateHash:
.9213	da		phx				phx
.9214	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9217	a9 00		lda #$00			lda 	#0
.9219					_TCHLoop:
.9219	18		clc				clc
.921a	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.921d	e8		inx				inx
.921e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9221	d0 f6		bne $9219			bne 	_TCHLoop
.9223	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9226	fa		plx				plx
.9227	60		rts				rts
.9228					FixLineBufferCase:
.9228	a2 00		ldx #$00			ldx 	#0
.922a					_FLBCLoop:
.922a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.922d	f0 22		beq $9251			beq 	_FLBCExit 					; end of string.
.922f	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9231	f0 11		beq $9244			beq 	_FLBCInQuotes
.9233	e8		inx				inx
.9234	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9236	90 f2		bcc $922a			bcc 	_FLBCLoop
.9238	c9 7b		cmp #$7b			cmp 	#'z'+1
.923a	b0 ee		bcs $922a			bcs 	_FLBCLoop
.923c	38		sec				sec 								; make U/C
.923d	e9 20		sbc #$20			sbc 	#32
.923f	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9242	80 e6		bra $922a			bra 	_FLBCLoop
.9244					_FLBCInQuotes:
.9244	e8		inx				inx 								; advance
.9245	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.9248	f0 07		beq $9251			beq 	_FLBCExit 					; exit on EOS
.924a	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.924c	d0 f6		bne $9244			bne 	_FLBCInQuotes
.924e	e8		inx				inx 								; skip over it
.924f	80 d9		bra $922a			bra 	_FLBCLoop
.9251					_FLBCExit:
.9251	60		rts				rts
.9252					TokeniseExtractLineNumber:
.9252	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.9255	48		pha				pha
.9256	ad 16 07	lda $0716			lda 	tokenLineNumber
.9259	48		pha				pha
.925a	20 90 92	jsr $9290			jsr 	_TELNTimes2 				; line # x 4
.925d	20 90 92	jsr $9290			jsr 	_TELNTimes2 				; line # x 2
.9260	18		clc				clc 								; add stacked value
.9261	68		pla				pla
.9262	6d 16 07	adc $0716			adc 	tokenLineNumber
.9265	8d 16 07	sta $0716			sta 	tokenLineNumber
.9268	68		pla				pla
.9269	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.926c	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.926f	20 90 92	jsr $9290			jsr 	_TELNTimes2 				; line # x 10
.9272	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.9275	e8		inx				inx
.9276	29 0f		and #$0f			and 	#15 						; add to line #
.9278	18		clc				clc
.9279	6d 16 07	adc $0716			adc 	tokenLineNumber
.927c	8d 16 07	sta $0716			sta 	tokenLineNumber
.927f	90 03		bcc $9284			bcc 	_TLENNoCarry
.9281	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9284					_TLENNoCarry:
.9284	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9287	c9 30		cmp #$30			cmp 	#'0'
.9289	90 04		bcc $928f			bcc 	_TLENExit
.928b	c9 3a		cmp #$3a			cmp 	#'9'+1
.928d	90 c3		bcc $9252			bcc 	TokeniseExtractLineNumber
.928f					_TLENExit:
.928f	60		rts				rts
.9290					_TELNTimes2:
.9290	0e 16 07	asl $0716			asl 	tokenLineNumber
.9293	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9296	60		rts				rts
.9297					TokeniseWriteByte:
.9297	da		phx				phx
.9298	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.929b	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.929e	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.92a1	fa		plx				plx
.92a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.92a3					CheckCreateVariableRecord:
.92a3	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.92a5	85 36		sta $36				sta 	0+zTemp0
.92a7	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.92a9	85 37		sta $37				sta 	1+zTemp0
.92ab					_CCVSearch:
.92ab	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.92ad	f0 2c		beq $92db			beq 	_CCVFail
.92af	a0 01		ldy #$01			ldy 	#1 							; read the hash
.92b1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.92b3	cd 03 07	cmp $0703			cmp 	identHash
.92b6	d0 16		bne $92ce			bne 	_CCVNext
.92b8	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.92ba	ae 00 07	ldx $0700			ldx 	identStart
.92bd					_CCVCompare:
.92bd	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.92c0	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.92c2	e8		inx				inx 								; advance pointers
.92c3	c8		iny				iny
.92c4	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.92c5	d0 07		bne $92ce			bne 	_CCVNext  					; didn't match go to next.
.92c7	90 f4		bcc $92bd			bcc 	_CCVCompare 				; not finished yet.
.92c9	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.92cc	f0 41		beq $930f			beq 	_CCVFound 					; yes, we were successful
.92ce					_CCVNext:
.92ce	18		clc				clc
.92cf	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.92d1	65 36		adc $36				adc 	zTemp0
.92d3	85 36		sta $36				sta 	zTemp0
.92d5	90 d4		bcc $92ab			bcc 	_CCVSearch
.92d7	e6 37		inc $37				inc 	zTemp0+1
.92d9	80 d0		bra $92ab			bra 	_CCVSearch
.92db					_CCVFail:
.92db	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.92dd	ad 03 07	lda $0703			lda 	identHash
.92e0	91 36		sta ($36),y			sta 	(zTemp0),y
.92e2	c8		iny				iny 								; offset 2 is the type byte
.92e3	ad 04 07	lda $0704			lda 	identTypeByte
.92e6	91 36		sta ($36),y			sta 	(zTemp0),y
.92e8	c8		iny				iny
.92e9					_CCVData:
.92e9	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.92eb	91 36		sta ($36),y			sta 	(zTemp0),y
.92ed	c8		iny				iny
.92ee	c0 08		cpy #$08			cpy 	#8
.92f0	90 f7		bcc $92e9			bcc 	_CCVData
.92f2	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.92f5					_CCVCopyName:
.92f5	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.92f8	91 36		sta ($36),y			sta 	(zTemp0),y
.92fa	e8		inx				inx
.92fb	c8		iny				iny
.92fc	ec 02 07	cpx $0702			cpx 	identTypeEnd
.92ff	d0 f4		bne $92f5			bne 	_CCVCopyName
.9301	98		tya				tya 								; patch offset
.9302	92 36		sta ($36)			sta 	(zTemp0)
.9304	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9306	91 36		sta ($36),y			sta 	(zTemp0),y
.9308	88		dey				dey
.9309	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.930b	09 80		ora #$80			ora 	#$80
.930d	91 36		sta ($36),y			sta 	(zTemp0),y
.930f					_CCVFound:
.930f	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9311	38		sec				sec
.9312	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9314	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9316	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.9319	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.931b	20 97 92	jsr $9297			jsr 	TokeniseWriteByte
.931e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9a4b					MemoryPeek:
.9a4b	b2 36		lda ($36)			lda 	(zTemp0)
.9a4d	60		rts				rts
.9a4e					MemoryPoke:
.9a4e	92 36		sta ($36)			sta 	(zTemp0)
.9a50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9a51					EXTPrintCharacter:
.9a51	48		pha				pha
.9a52	da		phx				phx
.9a53	5a		phy				phy
.9a54	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9a57	7a		ply				ply
.9a58	fa		plx				plx
.9a59	68		pla				pla
.9a5a	60		rts				rts
.9a5b					EXTInputSingleCharacter:
.9a5b	da		phx				phx
.9a5c	5a		phy				phy
.9a5d					_EISCWait:
.9a5d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9a60	c9 00		cmp #$00			cmp 	#0
.9a62	f0 f9		beq $9a5d			beq 	_EISCWait
.9a64	7a		ply				ply
.9a65	fa		plx				plx
.9a66	60		rts				rts
.9a67					EXTInputLine:
.9a67	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9a69					_ILLoop:
.9a69	da		phx				phx 								; read character in
.9a6a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9a6d	fa		plx				plx
.9a6e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9a70	f0 12		beq $9a84			beq 	_ILBackspace
.9a72	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9a74	f0 15		beq $9a8b			beq 	_ILExit
.9a76	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9a78	90 ef		bcc $9a69			bcc 	_ILLoop
.9a7a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9a7c	f0 eb		beq $9a69			beq 	_ILLoop
.9a7e	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9a81	e8		inx				inx
.9a82	80 e5		bra $9a69			bra 	_ILLoop
.9a84					_ILBackspace:
.9a84	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9a86	f0 e1		beq $9a69			beq 	_ILLoop
.9a88	ca		dex				dex 								; back one.
.9a89	80 de		bra $9a69			bra 	_ILLoop
.9a8b					_ILExit:
.9a8b	20 51 9a	jsr $9a51			jsr 	EXTPrintCharacter
.9a8e	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9a91	60		rts				rts
.9a92					EXTBreakCheck:
.9a92	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.931f					MemoryNew:
.931f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9321	85 30		sta $30				sta 	codePtr
.9323	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9325	85 31		sta $31				sta 	codePtr+1
.9327	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9329	92 30		sta ($30)			sta 	(codePtr)
.932b	60		rts				rts
.932c					MemoryAppend:
.932c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.932e	85 30		sta $30				sta 	codePtr
.9330	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9332	85 31		sta $31				sta 	codePtr+1
.9334					_MAFindEnd:
.9334	b2 30		lda ($30)			lda 	(codePtr)
.9336	f0 0d		beq $9345			beq 	_MAFoundEnd
.9338	18		clc				clc
.9339	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.933b	65 30		adc $30				adc 	codePtr
.933d	85 30		sta $30				sta 	codePtr
.933f	90 02		bcc $9343			bcc 	_CREExit
.9341	e6 31		inc $31				inc 	codePtr+1
.9343					_CREExit:
.9343	80 ef		bra $9334			bra 	_MAFindEnd
.9345					_MAFoundEnd:
.9345	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9348	c0 04		cpy #$04			cpy 	#4 							; blank line
.934a	f0 0e		beq $935a			beq 	_MANoLine
.934c	a9 00		lda #$00			lda 	#0 							; end of program
.934e	91 30		sta ($30),y			sta 	(codePtr),y
.9350					_MACopy:
.9350	88		dey				dey
.9351	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9354	91 30		sta ($30),y			sta 	(codePtr),y
.9356	c0 00		cpy #$00			cpy 	#0
.9358	d0 f6		bne $9350			bne 	_MACopy
.935a					_MANoLine:
.935a	60		rts				rts
.935b					MemoryInline:
.935b	98		tya				tya 								; put address into stack,x
.935c	18		clc				clc
.935d	65 30		adc $30				adc 	codePtr
.935f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9362	a5 31		lda $31				lda 	codePtr+1
.9364	69 00		adc #$00			adc 	#0
.9366	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9369	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.936c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.936f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9370					MemoryTransferAX:
.9370	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9372	86 37		stx $37				stx 	zTemp0+1
.9374	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9376	85 30		sta $30				sta 	codePtr
.9378	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.937a	85 31		sta $31				sta 	codePtr+1
.937c					_MTAXLoop:
.937c	b2 30		lda ($30)			lda 	(codePtr)
.937e	f0 1d		beq $939d			beq 	_MTAXError 					; not found.
.9380	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9382	b1 30		lda ($30),y			lda 	(codePtr),y
.9384	c5 36		cmp $36				cmp 	zTemp0
.9386	d0 07		bne $938f			bne 	_MTAXNext
.9388	c8		iny				iny 								; check MSB
.9389	b1 30		lda ($30),y			lda 	(codePtr),y
.938b	c5 37		cmp $37				cmp 	zTemp0+1
.938d	f0 0d		beq $939c			beq 	_MTAXExit 					; success !
.938f					_MTAXNext:
.938f	18		clc				clc
.9390	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9392	65 30		adc $30				adc 	codePtr
.9394	85 30		sta $30				sta 	codePtr
.9396	90 02		bcc $939a			bcc 	_CREExit
.9398	e6 31		inc $31				inc 	codePtr+1
.939a					_CREExit:
.939a	80 e0		bra $937c			bra 	_MTAXLoop
.939c					_MTAXExit:
.939c	60		rts				rts
.939d					_MTAXError:
.939d	a9 0d		lda #$0d		lda	#13
.939f	4c 69 83	jmp $8369		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
