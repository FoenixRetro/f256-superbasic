
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 21:14:44 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 b5 81	jsr $81b5			jsr 	NewCommand 					; erase current program
.8006	20 ac 8a	jsr $8aac			jsr 	BackloadProgram
.8009	4c cc 81	jmp $81cc			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 1f 8f	jsr $8f1f			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	b7 82					.word	ShiftLeft                        ; $00 <<
>8016	b4 8f					.word	BinaryCompareLessEqual           ; $01 <=
>8018	aa 8f					.word	BinaryCompareNotEqual            ; $02 <>
>801a	2d 95					.word	SyntaxError                      ; $03 !!3
>801c	2d 95					.word	SyntaxError                      ; $04 ><
>801e	be 8f					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	ba 82					.word	ShiftRight                       ; $06 >>
>8022	2d 95					.word	SyntaxError                      ; $07 !!7
>8024	2d 95					.word	SyntaxError                      ; $08 !!8
>8026	2d 95					.word	SyntaxError                      ; $09 !!9
>8028	2d 95					.word	SyntaxError                      ; $0a !!10
>802a	2d 95					.word	SyntaxError                      ; $0b !!11
>802c	2d 95					.word	SyntaxError                      ; $0c !!12
>802e	2d 95					.word	SyntaxError                      ; $0d !!13
>8030	2d 95					.word	SyntaxError                      ; $0e !!14
>8032	2d 95					.word	SyntaxError                      ; $0f !!15
>8034	2d 95					.word	SyntaxError                      ; $10 @
>8036	2d 95					.word	SyntaxError                      ; $11 !!17
>8038	2d 95					.word	SyntaxError                      ; $12 !!18
>803a	2d 95					.word	SyntaxError                      ; $13 [
>803c	24 90					.word	IntegerDivide                    ; $14 \
>803e	2d 95					.word	SyntaxError                      ; $15 ]
>8040	3d 84					.word	EorInteger                       ; $16 ^
>8042	2d 95					.word	SyntaxError                      ; $17 _
>8044	2d 95					.word	SyntaxError                      ; $18 `
>8046	2d 95					.word	SyntaxError                      ; $19 !!25
>8048	2d 95					.word	SyntaxError                      ; $1a !!26
>804a	2d 95					.word	SyntaxError                      ; $1b {
>804c	f8 83					.word	OraInteger                       ; $1c |
>804e	2d 95					.word	SyntaxError                      ; $1d }
>8050	2d 95					.word	SyntaxError                      ; $1e ~
>8052	2d 95					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	2d 95					.word	SyntaxError                      ; $20
>8056	2d 95					.word	SyntaxError                      ; $21 !
>8058	2d 95					.word	SyntaxError                      ; $22 "
>805a	2d 95					.word	SyntaxError                      ; $23 #
>805c	2d 95					.word	SyntaxError                      ; $24 $
>805e	70 90					.word	IntegerModulus                   ; $25 %
>8060	b3 83					.word	AndInteger                       ; $26 &
>8062	2d 95					.word	SyntaxError                      ; $27 '
>8064	2d 95					.word	SyntaxError                      ; $28 (
>8066	2d 95					.word	SyntaxError                      ; $29 )
>8068	e4 90					.word	MulInteger                       ; $2a *
>806a	4d 83					.word	AddInteger                       ; $2b +
>806c	2d 95					.word	SyntaxError                      ; $2c ,
>806e	88 83					.word	SubInteger                       ; $2d -
>8070	2d 95					.word	SyntaxError                      ; $2e .
>8072	7b 92					.word	FDivideCommand                   ; $2f /
>8074	2d 95					.word	SyntaxError                      ; $30 0
>8076	2d 95					.word	SyntaxError                      ; $31 1
>8078	2d 95					.word	SyntaxError                      ; $32 2
>807a	2d 95					.word	SyntaxError                      ; $33 3
>807c	2d 95					.word	SyntaxError                      ; $34 4
>807e	2d 95					.word	SyntaxError                      ; $35 5
>8080	2d 95					.word	SyntaxError                      ; $36 6
>8082	2d 95					.word	SyntaxError                      ; $37 7
>8084	2d 95					.word	SyntaxError                      ; $38 8
>8086	2d 95					.word	SyntaxError                      ; $39 9
>8088	2d 95					.word	SyntaxError                      ; $3a :
>808a	2d 95					.word	SyntaxError                      ; $3b ;
>808c	96 8f					.word	BinaryCompareLess                ; $3c <
>808e	8c 8f					.word	BinaryCompareEqual               ; $3d =
>8090	a0 8f					.word	BinaryCompareGreater             ; $3e >
>8092	2d 95					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	06 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	13 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	2d 95					.word	SyntaxError                      ; $82 !2:SH2
>809a	c1 93					.word	AbsUnary                         ; $83 ABS(
>809c	a9 87					.word	AllocUnary                       ; $84 ALLOC(
>809e	d1 93					.word	AscUnary                         ; $85 ASC(
>80a0	46 88					.word	ChrUnary                         ; $86 CHR$(
>80a2	88 8f					.word	UnaryFalse                       ; $87 FALSE
>80a4	de 93					.word	FracUnary                        ; $88 FRAC(
>80a6	f4 93					.word	IntUnary                         ; $89 INT(
>80a8	4a 94					.word	IsValUnary                       ; $8a ISVAL(
>80aa	1b 89					.word	Unary_Left                       ; $8b LEFT$(
>80ac	06 94					.word	LenUnary                         ; $8c LEN(
>80ae	45 89					.word	Unary_Mid                        ; $8d MID$(
>80b0	e3 87					.word	Unary_Not                        ; $8e NOT(
>80b2	2b 89					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	f9 87					.word	Unary_Rnd                        ; $90 RND(
>80b6	20 94					.word	SgnUnary                         ; $91 SGN(
>80b8	58 88					.word	SpcUnary                         ; $92 SPC(
>80ba	73 88					.word	Unary_Str                        ; $93 STR$(
>80bc	7c 8f					.word	UnaryTrue                        ; $94 TRUE
>80be	40 94					.word	ValUnary                         ; $95 VAL(
>80c0	2d 95					.word	SyntaxError                      ; $96 FOR
>80c2	2d 95					.word	SyntaxError                      ; $97 IF
>80c4	2d 95					.word	SyntaxError                      ; $98 PROC
>80c6	2d 95					.word	SyntaxError                      ; $99 REPEAT
>80c8	2d 95					.word	SyntaxError                      ; $9a WHILE
>80ca	2d 95					.word	SyntaxError                      ; $9b ENDIF
>80cc	2d 95					.word	SyntaxError                      ; $9c ENDPROC
>80ce	2d 95					.word	SyntaxError                      ; $9d NEXT
>80d0	2d 95					.word	SyntaxError                      ; $9e UNTIL
>80d2	2d 95					.word	SyntaxError                      ; $9f WEND
>80d4	6d 81					.word	CallCommand                      ; $a0 CALL
>80d6	2d 95					.word	SyntaxError                      ; $a1 CLS
>80d8	2d 95					.word	SyntaxError                      ; $a2 DATA
>80da	2d 95					.word	SyntaxError                      ; $a3 DIM
>80dc	2d 95					.word	SyntaxError                      ; $a4 GOSUB
>80de	2d 95					.word	SyntaxError                      ; $a5 GOTO
>80e0	2d 95					.word	SyntaxError                      ; $a6 LET
>80e2	2d 95					.word	SyntaxError                      ; $a7 PRINT
>80e4	2d 95					.word	SyntaxError                      ; $a8 READ
>80e6	bf 81					.word	RemCommand                       ; $a9 REM
>80e8	2d 95					.word	SyntaxError                      ; $aa RETURN
>80ea	2d 95					.word	SyntaxError                      ; $ab THEN
>80ec	2d 95					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	2d 95					.word	SyntaxError                      ; $80 !0:EOF
>80f0	2d 95					.word	SyntaxError                      ; $81 !1:SH1
>80f2	2d 95					.word	SyntaxError                      ; $82 !2:SH2
>80f4	5d 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	7b 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	b2 81					.word	EndCommand                       ; $85 END
>80fa	2d 95					.word	SyntaxError                      ; $86 LIST
>80fc	b5 81					.word	NewCommand                       ; $87 NEW
>80fe	2d 95					.word	SyntaxError                      ; $88 RESTORE
>8100	cc 81					.word	CommandRUN                       ; $89 RUN
>8102	2d 95					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	2d 95					.word	SyntaxError                      ; $80 !0:EOF
>8106	2d 95					.word	SyntaxError                      ; $81 !1:SH1
>8108	2d 95					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/memory.asm

.8f19					MemoryPeek:
.8f19	b2 36		lda ($36)			lda 	(zTemp0)
.8f1b	60		rts				rts
.8f1c					MemoryPoke:
.8f1c	92 36		sta ($36)			sta 	(zTemp0)
.8f1e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/vectors.asm

.8f1f					EXTPrintCharacter:
.8f1f	48		pha				pha
.8f20	da		phx				phx
.8f21	5a		phy				phy
.8f22	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.8f25	7a		ply				ply
.8f26	fa		plx				plx
.8f27	68		pla				pla
.8f28	60		rts				rts
.8f29					EXTInputSingleCharacter:
.8f29	da		phx				phx
.8f2a	5a		phy				phy
.8f2b					_EISCWait:
.8f2b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.8f2e	c9 00		cmp #$00			cmp 	#0
.8f30	f0 f9		beq $8f2b			beq 	_EISCWait
.8f32	7a		ply				ply
.8f33	fa		plx				plx
.8f34	60		rts				rts
.8f35					EXTInputLine:
.8f35	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.8f37					_ILLoop:
.8f37	da		phx				phx 								; read character in
.8f38	20 cf ff	jsr $ffcf			jsr 	$FFCF
.8f3b	fa		plx				plx
.8f3c	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.8f3e	f0 12		beq $8f52			beq 	_ILBackspace
.8f40	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.8f42	f0 15		beq $8f59			beq 	_ILExit
.8f44	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.8f46	90 ef		bcc $8f37			bcc 	_ILLoop
.8f48	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.8f4a	f0 eb		beq $8f37			beq 	_ILLoop
.8f4c	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.8f4f	e8		inx				inx
.8f50	80 e5		bra $8f37			bra 	_ILLoop
.8f52					_ILBackspace:
.8f52	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.8f54	f0 e1		beq $8f37			beq 	_ILLoop
.8f56	ca		dex				dex 								; back one.
.8f57	80 de		bra $8f37			bra 	_ILLoop
.8f59					_ILExit:
.8f59	20 1f 8f	jsr $8f1f			jsr 	EXTPrintCharacter
.8f5c	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.8f5f	60		rts				rts
.8f60					EXTBreakCheck:
.8f60	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/memory.asm

.810a					MemoryNew:
.810a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.810c	85 30		sta $30				sta 	codePtr
.810e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8110	85 31		sta $31				sta 	codePtr+1
.8112	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8114	92 30		sta ($30)			sta 	(codePtr)
.8116	60		rts				rts
.8117					MemoryAppend:
.8117	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8119	85 30		sta $30				sta 	codePtr
.811b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.811d	85 31		sta $31				sta 	codePtr+1
.811f					_MAFindEnd:
.811f	b2 30		lda ($30)			lda 	(codePtr)
.8121	f0 0d		beq $8130			beq 	_MAFoundEnd
.8123	18		clc				clc
.8124	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8126	65 30		adc $30				adc 	codePtr
.8128	85 30		sta $30				sta 	codePtr
.812a	90 02		bcc $812e			bcc 	_CREExit
.812c	e6 31		inc $31				inc 	codePtr+1
.812e					_CREExit:
.812e	80 ef		bra $811f			bra 	_MAFindEnd
.8130					_MAFoundEnd:
.8130	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.8133	c0 04		cpy #$04			cpy 	#4 							; blank line
.8135	f0 0e		beq $8145			beq 	_MANoLine
.8137	a9 00		lda #$00			lda 	#0 							; end of program
.8139	91 30		sta ($30),y			sta 	(codePtr),y
.813b					_MACopy:
.813b	88		dey				dey
.813c	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.813f	91 30		sta ($30),y			sta 	(codePtr),y
.8141	c0 00		cpy #$00			cpy 	#0
.8143	d0 f6		bne $813b			bne 	_MACopy
.8145					_MANoLine:
.8145	60		rts				rts
.8146					MemoryInline:
.8146	98		tya				tya 								; put address into stack,x
.8147	18		clc				clc
.8148	65 30		adc $30				adc 	codePtr
.814a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.814d	a5 31		lda $31				lda 	codePtr+1
.814f	69 00		adc #$00			adc 	#0
.8151	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8154	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8157	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.815a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/variable.asm

.815b					VariableOpen:
.815b	60		rts				rts
.815c					VariableClose:
.815c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/assert.asm

.815d					AssertCommand:
.815d	a2 00		ldx #$00			ldx 	#0
.815f	20 e6 89	jsr $89e6			jsr 	EvaluateInteger 			; the assert test
.8162	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; exit if result is non zero.
.8165	d0 05		bne $816c			bne 	_ACExit
.8167	a9 0a		lda #$0a		lda	#10
.8169	4c 1b 82	jmp $821b		jmp	ErrorHandler
.816c					_ACExit:
.816c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/call.asm

.816d					CallCommand:
.816d	a2 00		ldx #$00			ldx 	#0
.816f	20 fb 89	jsr $89fb			jsr 	Evaluate16BitInteger
.8172	ad 10 06	lda $0610			lda 	NSMantissa1
.8175	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8178	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/clear.asm

.817b					ClearCommand:
.817b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.817d	85 36		sta $36				sta 	0+zTemp0
.817f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8181	85 37		sta $37				sta 	1+zTemp0
.8183					_ClearZeroLoop:
.8183	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8185	f0 18		beq $819f			beq 	_ClearZeroEnd
.8187	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8189	a9 00		lda #$00			lda 	#0
.818b					_ClearOneVariable:
.818b	91 36		sta ($36),y			sta 	(zTemp0),y
.818d	c8		iny				iny
.818e	c0 08		cpy #$08			cpy 	#8
.8190	d0 f9		bne $818b			bne 	_ClearOneVariable
.8192	18		clc				clc 								; go to the next variable
.8193	b2 36		lda ($36)			lda 	(zTemp0)
.8195	65 36		adc $36				adc 	zTemp0
.8197	85 36		sta $36				sta 	zTemp0
.8199	90 e8		bcc $8183			bcc 	_ClearZeroLoop
.819b	e6 37		inc $37				inc 	zTemp0+1
.819d	80 e4		bra $8183			bra 	_ClearZeroLoop
.819f					_ClearZeroEnd:
.819f	18		clc				clc
.81a0	a5 36		lda $36				lda 	zTemp0
.81a2	69 01		adc #$01			adc 	#1
.81a4	8d 0c 07	sta $070c			sta 	lowMemPtr
.81a7	a5 37		lda $37				lda 	zTemp0+1
.81a9	69 00		adc #$00			adc 	#0
.81ab	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.81ae	20 8b 94	jsr $948b			jsr 	StringSystemInitialise
.81b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/end.asm

.81b2					EndCommand:
.81b2	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/new.asm

.81b5					NewCommand:
.81b5	20 0a 81	jsr $810a			jsr 	MemoryNew
.81b8	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81bb	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear everything.
.81be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/rem.asm

.81bf					RemCommand:
.81bf	b1 30		lda ($30),y			lda 	(codePtr),y
.81c1	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81c3	d0 06		bne $81cb			bne 	_RMExit
.81c5	c8		iny				iny
.81c6	98		tya				tya
.81c7	38		sec				sec
.81c8	71 30		adc ($30),y			adc 	(codePtr),y
.81ca	a8		tay				tay
.81cb					_RMExit:
.81cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/run.asm

.81cc					CommandRUN:
.81cc	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.81cf	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.81d1	85 30		sta $30				sta 	codePtr
.81d3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.81d5	85 31		sta $31				sta 	codePtr+1
.81d7					RUNNewLine:
.81d7	b2 30		lda ($30)			lda 	(codePtr)
.81d9	f0 28		beq $8203			beq 	CRNoProgram         		; no then END.
.81db	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.81dd	9a		txs				txs
.81de					RUNCodePointerLine:
.81de	a0 02		ldy #$02			ldy 	#2 							; start of program
.81e0					_CRIncMainLoop:
.81e0	c8		iny				iny
.81e1					_CRMainLoop:
.81e1	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.81e4	b1 30		lda ($30),y			lda 	(codePtr),y
.81e6	10 10		bpl $81f8			bpl 	_CRNotKeyword
.81e8	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.81ea	b0 04		bcs $81f0			bcs 	_CRIsKeyword
.81ec	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.81ee	b0 0d		bcs $81fd			bcs		_CRSyntaxError
.81f0					_CRIsKeyword:
.81f0	c8		iny				iny 								; consume command
.81f1	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.81f2	aa		tax				tax 								; put in X for vector jump
.81f3	20 00 82	jsr $8200			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.81f6	80 e9		bra $81e1			bra 	_CRMainLoop 				; and loop round
.81f8					_CRNotKeyword:
.81f8	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.81fa	f0 e4		beq $81e0			beq 	_CRIncMainLoop
>81fc	db						.byte 	$DB 						; causes a break in the emulator
.81fd					_CRSyntaxError:
.81fd	4c 2d 95	jmp $952d			jmp 	SyntaxError
.8200					_CRCallVector0:
.8200	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8203					CRNoProgram:
.8203	4c b2 81	jmp $81b2			jmp 	EndCommand
.8206					EOLCommand:
.8206	18		clc				clc
.8207	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8209	65 30		adc $30				adc 	codePtr
.820b	85 30		sta $30				sta 	codePtr
.820d	90 02		bcc $8211			bcc 	_CREExit
.820f	e6 31		inc $31				inc 	codePtr+1
.8211					_CREExit:
.8211	80 c4		bra $81d7			bra 	RunNewLine
.8213					Shift1Command:
.8213	b1 30		lda ($30),y			lda 	(codePtr),y
.8215	c8		iny				iny
.8216	0a		asl a				asl 	a
.8217	aa		tax				tax
.8218	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/charcheck.asm

.8f63					CheckRightBracket:
.8f63	b1 30		lda ($30),y			lda 	(codePtr),y
.8f65	c8		iny				iny
.8f66	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8f68	d0 0f		bne $8f79			bne 	CNAFail
.8f6a	60		rts				rts
.8f6b					CheckComma:
.8f6b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f6d	c8		iny				iny
.8f6e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8f70	d0 07		bne $8f79			bne 	CNAFail
.8f72	60		rts				rts
.8f73					CheckNextA:
.8f73	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8f75	d0 02		bne $8f79			bne 	CNAFail
.8f77	c8		iny				iny 								; skip character
.8f78	60		rts				rts 								; and exit
.8f79					CNAFail:
.8f79	4c 2d 95	jmp $952d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/errors.asm

.821b					ErrorHandler:
.821b	a8		tay				tay 								; find the error text
.821c	f0 42		beq $8260			beq 	_EHEnd
.821e	a2 00		ldx #$00			ldx 	#0
.8220					_EHFind:
.8220	88		dey				dey 								; found the error text ?
.8221	f0 0a		beq $822d			beq 	_EHFound
.8223					_EHFindZero:
.8223	bd 46 95	lda $9546,x			lda 	ErrorText,x 				; find the next error
.8226	e8		inx				inx
.8227	c9 00		cmp #$00			cmp 	#0
.8229	d0 f8		bne $8223			bne 	_EHFindZero
.822b	80 f3		bra $8220			bra 	_EHFind
.822d					_EHFound:
.822d	bd 46 95	lda $9546,x			lda 	ErrorText,x 				; print the message
.8230	20 1f 8f	jsr $8f1f			jsr 	EXTPrintCharacter
.8233	e8		inx				inx
.8234	bd 46 95	lda $9546,x			lda 	ErrorText,x
.8237	d0 f4		bne $822d			bne 	_EHFound
.8239	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.823b	b1 30		lda ($30),y			lda 	(codePtr),y
.823d	d0 05		bne $8244			bne 	_EHAtMsg
.823f	c8		iny				iny
.8240	b1 30		lda ($30),y			lda 	(codePtr),y
.8242	f0 17		beq $825b			beq 	_EHCREnd
.8244					_EHAtMsg:
.8244	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.8246	a9 63		lda #$63			lda 	#_AtMsg & $FF
.8248	20 6d 82	jsr $826d			jsr 	PrintStringXA
.824b	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.824d	b1 30		lda ($30),y			lda 	(codePtr),y
.824f	48		pha				pha
.8250	c8		iny				iny
.8251	b1 30		lda ($30),y			lda 	(codePtr),y
.8253	aa		tax				tax
.8254	68		pla				pla
.8255	20 65 91	jsr $9165			jsr 	ConvertInt16 				; convert XA to string
.8258	20 6d 82	jsr $826d			jsr 	PrintStringXA 				; and print it.
.825b					_EHCREnd:
.825b	a9 0d		lda #$0d			lda 	#13 						; new line
.825d	20 1f 8f	jsr $8f1f			jsr 	EXTPrintCharacter
.8260					_EHEnd:
.8260	4c 0c 80	jmp $800c			jmp 	WarmStart
>8263	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>826b	20 00
.826d					PrintStringXA:
.826d	86 37		stx $37				stx 	zTemp0+1
.826f	85 36		sta $36				sta 	zTemp0
.8271	a0 00		ldy #$00			ldy 	#0
.8273					_PSXALoop:
.8273	b1 36		lda ($36),y			lda 	(zTemp0),y
.8275	f0 06		beq $827d			beq 	_PSXAExit
.8277	20 1f 8f	jsr $8f1f			jsr 	EXTPrintCharacter
.827a	c8		iny				iny
.827b	80 f6		bra $8273			bra 	_PSXALoop
.827d					_PSXAExit:
.827d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/compare.asm

.8f7c					UnaryTrue:
.8f7c	fa		plx				plx
.8f7d					ReturnTrue:
.8f7d	a9 01		lda #$01			lda 	#1  						; set to 1
.8f7f	20 71 8a	jsr $8a71			jsr 	NSMSetByte
.8f82	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8f84	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f87	60		rts				rts
.8f88					UnaryFalse:
.8f88	fa		plx				plx
.8f89					ReturnFalse:
.8f89	4c 6f 8a	jmp $8a6f			jmp 	NSMSetZero 					; set it all to zero
.8f8c					BinaryCompareEqual:
.8f8c	fa		plx				plx
.8f8d	20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8f90	c9 00		cmp #$00			cmp 	#0
.8f92	f0 e9		beq $8f7d			beq 	ReturnTrue
.8f94	80 f3		bra $8f89			bra 	ReturnFalse
.8f96					BinaryCompareLess:
.8f96	fa		plx				plx
.8f97	20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8f9a	c9 ff		cmp #$ff			cmp 	#$FF
.8f9c	f0 df		beq $8f7d			beq 	ReturnTrue
.8f9e	80 e9		bra $8f89			bra 	ReturnFalse
.8fa0					BinaryCompareGreater:
.8fa0	fa		plx				plx
.8fa1	20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8fa4	c9 01		cmp #$01			cmp 	#1
.8fa6	f0 d5		beq $8f7d			beq 	ReturnTrue
.8fa8	80 df		bra $8f89			bra 	ReturnFalse
.8faa					BinaryCompareNotEqual:
.8faa	fa		plx				plx
.8fab	20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8fae	c9 00		cmp #$00			cmp 	#0
.8fb0	d0 cb		bne $8f7d			bne 	ReturnTrue
.8fb2	80 d5		bra $8f89			bra 	ReturnFalse
.8fb4					BinaryCompareLessEqual:
.8fb4	fa		plx				plx
.8fb5	20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8fb8	c9 01		cmp #$01			cmp 	#1
.8fba	d0 c1		bne $8f7d			bne 	ReturnTrue
.8fbc	80 cb		bra $8f89			bra 	ReturnFalse
.8fbe					BinaryCompareGreaterEqual:
.8fbe	fa		plx				plx
.8fbf	20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8fc2	c9 ff		cmp #$ff			cmp 	#$FF
.8fc4	d0 b7		bne $8f7d			bne 	ReturnTrue
.8fc6	80 c1		bra $8f89			bra 	ReturnFalse
.8fc8					CompareBaseCode:
.8fc8	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; make both values if references.
.8fcb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8fce	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fd1	29 10		and #$10			and 	#NSTString
.8fd3	d0 40		bne $9015			bne 	_CBCString
.8fd5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8fd8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fdb	d0 3b		bne $9018			bne 	_CBCFloat
.8fdd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8fe0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fe3	29 08		and #$08			and 	#NSTFloat
.8fe5	d0 31		bne $9018			bne 	_CBCFloat
.8fe7	20 1b 90	jsr $901b			jsr 	CompareFixMinusZero
.8fea	e8		inx				inx
.8feb	20 1b 90	jsr $901b			jsr 	CompareFixMinusZero
.8fee	ca		dex				dex
.8fef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8ff2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ff5	10 0b		bpl $9002			bpl 	_CDCSameSign
.8ff7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8ffa	30 16		bmi $9012			bmi 	_CBCLess 					; return $FF
.8ffc					_CBCGreater:
.8ffc	a9 01		lda #$01			lda 	#1
.8ffe	60		rts				rts
.8fff					_CBCEqual:
.8fff	a9 00		lda #$00			lda 	#0
.9001	60		rts				rts
.9002					_CDCSameSign:
.9002	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; unsigned subtract
.9005	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; or the mantissa together
.9008	f0 f5		beq $8fff			beq 	_CBCEqual 					; -0 == 0
.900a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.900d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9010	10 ea		bpl $8ffc			bpl 	_CBCGreater
.9012					_CBCLess:
.9012	a9 ff		lda #$ff			lda 	#$FF
.9014	60		rts				rts
.9015					_CBCString:
.9015	4c 7e 82	jmp $827e			jmp 	CompareStrings
.9018					_CBCFloat:
.9018	4c 61 92	jmp $9261			jmp 	CompareFloat
.901b					CompareFixMinusZero:
.901b	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero
.901e	d0 03		bne $9023			bne 	_CFXMZNotZero
.9020	9e 00 06	stz $0600,x			stz 	NSStatus,x
.9023					_CFXMZNotZero:
.9023	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/divide.asm

.9024					IntegerDivide:
.9024	fa		plx				plx
.9025	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9028	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.902b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.902c	0a		asl a				asl 	a
.902d	10 05		bpl $9034			bpl 	_NotRef
.902f	48		pha				pha
.9030	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9033	68		pla				pla
.9034					_NotRef:
.9034	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9036	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9039	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.903c	f0 03		beq $9041			beq 	_IntegerCode 				; if clear, then we have two integers
.903e	4c 37 95	jmp $9537			jmp 	TypeError 					; anything else, type mismatch.
.9041					_IntegerCode:
.9041	20 63 90	jsr $9063			jsr 	CheckDivideZero 			; do div zero check
.9044	20 9a 90	jsr $909a			jsr 	Int32Divide 				; do the division
.9047	20 57 91	jsr $9157			jsr 	CalculateSign 				; calculate result sign
.904a					NSMCopyPlusTwoToZero:
.904a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.904d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9050	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9053	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9056	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9059	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.905c	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.905f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9062	60		rts				rts
.9063					CheckDivideZero:
.9063	e8		inx				inx
.9064	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero
.9067	f0 02		beq $906b			beq 	_CDVError
.9069	ca		dex				dex
.906a	60		rts				rts
.906b					_CDVError:
.906b	a9 03		lda #$03		lda	#3
.906d	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9070					IntegerModulus:
.9070	fa		plx				plx
.9071	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9074	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9077	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9078	0a		asl a				asl 	a
.9079	10 05		bpl $9080			bpl 	_NotRef
.907b	48		pha				pha
.907c	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.907f	68		pla				pla
.9080					_NotRef:
.9080	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9082	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9085	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9088	f0 03		beq $908d			beq 	_IntegerCode 				; if clear, then we have two integers
.908a	4c 37 95	jmp $9537			jmp 	TypeError 					; anything else, type mismatch.
.908d					_IntegerCode:
.908d	20 63 90	jsr $9063			jsr 	CheckDivideZero 			; do div zero check
.9090	20 9a 90	jsr $909a			jsr 	Int32Divide 				; do the division
.9093	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9096	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9099	60		rts				rts
.909a					Int32Divide:
.909a	48		pha				pha 								; save AXY
.909b	5a		phy				phy
.909c	20 46 8a	jsr $8a46			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.909f	20 6b 8a	jsr $8a6b			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.90a2	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.90a4					_I32DivideLoop:
.90a4	e8		inx				inx
.90a5	e8		inx				inx
.90a6	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.90a9	ca		dex				dex
.90aa	ca		dex				dex
.90ab	20 85 8a	jsr $8a85			jsr 	NSMRotateLeft
.90ae	20 da 90	jsr $90da			jsr 	DivideCheckSubtract 		; check if subtract possible
.90b1	90 03		bcc $90b6			bcc 	_I32DivideNoCarryIn
.90b3	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.90b6					_I32DivideNoCarryIn:
.90b6	88		dey				dey 								; loop round till division completed.
.90b7	d0 eb		bne $90a4			bne 	_I32DivideLoop
.90b9	7a		ply				ply 								; restore AXY and exit
.90ba	68		pla				pla
.90bb	60		rts				rts
.90bc					Int32ShiftDivide:
.90bc	48		pha				pha 								; save AY
.90bd	5a		phy				phy
.90be	e8		inx				inx 								; clear S[X+2]
.90bf	e8		inx				inx
.90c0	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero
.90c3	ca		dex				dex
.90c4	ca		dex				dex
.90c5	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.90c7					_I32SDLoop:
.90c7	20 da 90	jsr $90da			jsr 	DivideCheckSubtract 		; check if subtract possible
.90ca	e8		inx				inx
.90cb	e8		inx				inx
.90cc	20 85 8a	jsr $8a85			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.90cf	ca		dex				dex
.90d0	ca		dex				dex
.90d1	20 85 8a	jsr $8a85			jsr 	NSMRotateLeft
.90d4	88		dey				dey 	 							; do 31 times
.90d5	d0 f0		bne $90c7			bne 	_I32SDLoop
.90d7	7a		ply				ply 								; restore AY and exit
.90d8	68		pla				pla
.90d9	60		rts				rts
.90da					DivideCheckSubtract:
.90da	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.90dd	b0 04		bcs $90e3			bcs 	_DCSExit 					; if carry set, then could do, exit
.90df	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; add it back in
.90e2	18		clc				clc 								; and return False
.90e3					_DCSExit:
.90e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/multiply.asm

.90e4					MulInteger:
.90e4	fa		plx				plx
.90e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90e8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90eb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90ec	0a		asl a				asl 	a
.90ed	10 05		bpl $90f4			bpl 	_NotRef
.90ef	48		pha				pha
.90f0	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90f3	68		pla				pla
.90f4					_NotRef:
.90f4	0a		asl a				asl 	a 							; put MSB of type into A:7
.90f5	30 0b		bmi $9102			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90f7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90fa	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90fd	f0 06		beq $9105			beq 	_IntegerCode 				; if clear, then we have two integers
.90ff	4c 38 93	jmp $9338			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9102					_StringData:
.9102	4c 41 95	jmp $9541			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9105					_IntegerCode:
.9105	20 12 91	jsr $9112			jsr 	MultiplyShort
.9108	c9 00		cmp #$00			cmp 	#0
.910a	f0 05		beq $9111			beq 	_MIExit
.910c	a9 04		lda #$04		lda	#4
.910e	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9111					_MIExit:
.9111	60		rts				rts
.9112					MultiplyShort:
.9112	5a		phy				phy 								; save Y
.9113	20 46 8a	jsr $8a46			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9116	20 6b 8a	jsr $8a6b			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9119	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.911b					_I32MLoop:
.911b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.911e	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9121	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9124	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9127	f0 28		beq $9151			beq 	_I32MExit 					; exit if zero
.9129	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.912c	29 01		and #$01			and 	#1
.912e	f0 0e		beq $913e			beq 	_I32MNoAdd
.9130	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9133	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9136	10 06		bpl $913e			bpl 	_I32MNoAdd
.9138					_I32ShiftRight:
.9138	20 92 8a	jsr $8a92			jsr 	NSMShiftRight 				; shift S[X] right
.913b	c8		iny				iny 								; increment shift count
.913c	80 0a		bra $9148			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.913e					_I32MNoAdd:
.913e	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9141	70 f5		bvs $9138			bvs 	_I32ShiftRight 				; instead.
.9143	e8		inx				inx
.9144	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9147	ca		dex				dex
.9148					_I32MShiftUpper:
.9148	e8		inx				inx 								; shift S[X+2] right
.9149	e8		inx				inx
.914a	20 92 8a	jsr $8a92			jsr 	NSMShiftRight
.914d	ca		dex				dex
.914e	ca		dex				dex
.914f	80 ca		bra $911b			bra 	_I32MLoop 					; try again.
.9151					_I32MExit:
.9151	20 57 91	jsr $9157			jsr 	CalculateSign
.9154	98		tya				tya 								; shift in A
.9155	7a		ply				ply 								; restore Y and exit
.9156	60		rts				rts
.9157					CalculateSign:
.9157	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.915a	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.915d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9160	0a		asl a				asl 	a 							; shift bit 7 into carry
.9161	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9164	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/scompare.asm

.827e					CompareStrings:
.827e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8281	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8284	29 10		and #$10			and 	#NSBIsString
.8286	f0 2c		beq $82b4			beq 	_CSTypeError
.8288	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.828b	85 36		sta $36				sta 	zTemp0
.828d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8290	85 37		sta $37				sta 	zTemp0+1
.8292	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8295	85 38		sta $38				sta 	zTemp1
.8297	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.829a	85 39		sta $39				sta 	zTemp1+1
.829c	5a		phy				phy 								; save Y so we can access strings
.829d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.829f					_CSLoop:
.829f	c8		iny				iny
.82a0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.82a2	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.82a4	d0 06		bne $82ac			bne 	_CSDifferent
.82a6	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.82a8	d0 f5		bne $829f			bne 	_CSLoop 					; still comparing
.82aa					_CSExit:
.82aa	7a		ply				ply 								; reached end, return zero in A from EOS
.82ab	60		rts				rts
.82ac					_CSDifferent:
.82ac	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.82ae	90 fa		bcc $82aa			bcc		_CSExit
.82b0	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.82b2	80 f6		bra $82aa			bra 	_CSExit
.82b4					_CSTypeError:
.82b4	4c 37 95	jmp $9537			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/shifts.asm

.82b7					ShiftLeft:
.82b7	38		sec				sec
.82b8	80 01		bra $82bb			bra 	ShiftMain
.82ba					ShiftRight:
.82ba	18		clc				clc
.82bb					ShiftMain:
.82bb	fa		plx				plx 								; restore X
.82bc	08		php				php 								; save direction
.82bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82c0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82c3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82c4	0a		asl a				asl 	a
.82c5	10 05		bpl $82cc			bpl 	_NotRef
.82c7	48		pha				pha
.82c8	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82cb	68		pla				pla
.82cc					_NotRef:
.82cc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82ce	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82d1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82d4	f0 03		beq $82d9			beq 	_IntegerCode 				; if clear, then we have two integers
.82d6	4c 37 95	jmp $9537			jmp 	TypeError 					; anything else, type mismatch.
.82d9					_IntegerCode:
.82d9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.82dc	29 e0		and #$e0			and 	#$E0
.82de	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.82e1	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.82e4	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.82e7	d0 13		bne $82fc			bne 	_SMExit0 					; if >= 32 it will always return zero.
.82e9					_SMLoop:
.82e9	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.82ec	30 11		bmi $82ff			bmi 	_SMExit 					; exit if done.
.82ee	28		plp				plp 								; restore direcition setting
.82ef	08		php				php
.82f0	90 05		bcc $82f7			bcc 	_SMRight
.82f2	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; shift left if CS
.82f5	80 f2		bra $82e9			bra 	_SMLoop
.82f7					_SMRight:
.82f7	20 92 8a	jsr $8a92			jsr 	NSMShiftRight 				; shift right if CC
.82fa	80 ed		bra $82e9			bra 	_SMLoop
.82fc					_SMExit0:
.82fc	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero 					; return zero.
.82ff					_SMExit:
.82ff	28		plp				plp 								; throw direction
.8300	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/simple.asm

.8301					AddTopTwoStack:
.8301	18		clc				clc
.8302	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8305	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8308	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.830b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.830e	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8311	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8314	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8317	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.831a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.831d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8320	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8323	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8326	60		rts				rts
.8327					SubTopTwoStack:
.8327	38		sec				sec
.8328	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.832b	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.832e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8331	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8334	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8337	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.833a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.833d	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8340	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8343	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8346	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8349	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.834c	60		rts				rts
.834d					AddInteger:
.834d	fa		plx				plx
.834e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8351	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8354	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8355	0a		asl a				asl 	a
.8356	10 05		bpl $835d			bpl 	_NotRef
.8358	48		pha				pha
.8359	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.835c	68		pla				pla
.835d					_NotRef:
.835d	0a		asl a				asl 	a 							; put MSB of type into A:7
.835e	30 0b		bmi $836b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8360	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8363	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8366	f0 06		beq $836e			beq 	_IntegerCode 				; if clear, then we have two integers
.8368	4c c0 91	jmp $91c0			jmp 	FloatingPointAdd 							; otherwise at least one float.
.836b					_StringData:
.836b	4c 41 95	jmp $9541			jmp 	NotDoneError							; at least one string - don't know both are strings.
.836e					_IntegerCode:
.836e					AddCode:
.836e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8371	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8374	10 8b		bpl $8301			bpl 	AddTopTwoStack
.8376	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; do a physical subtraction
.8379	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.837c	10 09		bpl $8387			bpl 	_AddExit
.837e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8381	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8384	20 24 8a	jsr $8a24			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8387					_AddExit:
.8387	60		rts				rts
.8388					SubInteger:
.8388	fa		plx				plx
.8389	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.838c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.838f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8390	0a		asl a				asl 	a
.8391	10 05		bpl $8398			bpl 	_NotRef
.8393	48		pha				pha
.8394	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8397	68		pla				pla
.8398					_NotRef:
.8398	0a		asl a				asl 	a 							; put MSB of type into A:7
.8399	30 0b		bmi $83a6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.839b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.839e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83a1	f0 06		beq $83a9			beq 	_IntegerCode 				; if clear, then we have two integers
.83a3	4c c5 91	jmp $91c5			jmp 	FloatingPointSub 							; otherwise at least one float.
.83a6					_StringData:
.83a6	4c 41 95	jmp $9541			jmp 	NotDoneError							; at least one string - don't know both are strings.
.83a9					_IntegerCode:
.83a9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.83ac	49 80		eor #$80			eor 	#$80
.83ae	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.83b1	80 bb		bra $836e			bra 	AddCode 					; and do the same code as add.
.83b3					AndInteger:
.83b3	fa		plx				plx
.83b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83b7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83ba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83bb	0a		asl a				asl 	a
.83bc	10 05		bpl $83c3			bpl 	_NotRef
.83be	48		pha				pha
.83bf	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83c2	68		pla				pla
.83c3					_NotRef:
.83c3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83c5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83c8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83cb	f0 03		beq $83d0			beq 	_IntegerCode 				; if clear, then we have two integers
.83cd	4c 37 95	jmp $9537			jmp 	TypeError 					; anything else, type mismatch.
.83d0					_IntegerCode:
.83d0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83d3	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.83d6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83d9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83dc	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.83df	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83e2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83e5	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.83e8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83eb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83ee	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.83f1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83f4	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83f7	60		rts				rts
.83f8					OraInteger:
.83f8	fa		plx				plx
.83f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83fc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8400	0a		asl a				asl 	a
.8401	10 05		bpl $8408			bpl 	_NotRef
.8403	48		pha				pha
.8404	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8407	68		pla				pla
.8408					_NotRef:
.8408	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.840a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.840d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8410	f0 03		beq $8415			beq 	_IntegerCode 				; if clear, then we have two integers
.8412	4c 37 95	jmp $9537			jmp 	TypeError 					; anything else, type mismatch.
.8415					_IntegerCode:
.8415	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8418	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.841b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.841e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8421	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8424	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8427	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.842a	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.842d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8430	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8433	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8436	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8439	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.843c	60		rts				rts
.843d					EorInteger:
.843d	fa		plx				plx
.843e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8441	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8444	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8445	0a		asl a				asl 	a
.8446	10 05		bpl $844d			bpl 	_NotRef
.8448	48		pha				pha
.8449	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.844c	68		pla				pla
.844d					_NotRef:
.844d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.844f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8452	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8455	f0 03		beq $845a			beq 	_IntegerCode 				; if clear, then we have two integers
.8457	4c 37 95	jmp $9537			jmp 	TypeError 					; anything else, type mismatch.
.845a					_IntegerCode:
.845a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.845d	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8460	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8463	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8466	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8469	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.846c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.846f	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8472	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8475	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8478	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.847b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.847e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8481	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/tostring.asm

.9165					ConvertInt16:
.9165	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9168	8e 10 06	stx $0610			stx 	NSMantissa1
.916b	9c 18 06	stz $0618			stz 	NSMantissa2
.916e	9c 20 06	stz $0620			stz 	NSMantissa3
.9171	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9174	a2 00		ldx #$00			ldx 	#0 							; stack level
.9176	a9 0a		lda #$0a			lda 	#10 						; base
.9178	80 00		bra $917a			bra 	ConvertInt32
.917a					ConvertInt32:
.917a	5a		phy				phy
.917b	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.917d	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9180	10 08		bpl $918a			bpl 	_CI32NotNeg
.9182	48		pha				pha
.9183	a9 2d		lda #$2d			lda 	#'-'
.9185	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9188	c8		iny				iny
.9189	68		pla				pla
.918a					_CI32NotNeg:
.918a	20 98 91	jsr $9198			jsr 	_CI32DivideConvert 			; recursive conversion
.918d	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.918f	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9192	7a		ply				ply
.9193	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9195	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9197	60		rts				rts
.9198					_CI32DivideConvert:
.9198	e8		inx				inx 								; write to next slot up
.9199	20 71 8a	jsr $8a71			jsr 	NSMSetByte
.919c	ca		dex				dex
.919d	20 9a 90	jsr $909a			jsr 	Int32Divide 				; divide
.91a0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.91a3	48		pha				pha
.91a4	20 4a 90	jsr $904a			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.91a7	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; is it zero ?
.91aa	f0 06		beq $91b2			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.91ac	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.91af	20 98 91	jsr $9198			jsr 	_CI32DivideConvert 			; and recusrively call.
.91b2					_CI32NoRecurse:
.91b2	68		pla				pla 								; remainder
.91b3	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.91b5	90 02		bcc $91b9			bcc 	_CI32NotHex
.91b7	69 26		adc #$26			adc 	#6+32
.91b9					_CI32NotHex:
.91b9	69 30		adc #$30			adc 	#48
.91bb	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.91be	c8		iny				iny
.91bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/expression.asm


;******  Processing file: ./core/expressions/../../generated/precedence.dat

.8482					PrecedenceLevel:
>8482	04					.byte	 4	; $00 <<
>8483	02					.byte	 2	; $01 <=
>8484	02					.byte	 2	; $02 <>
>8485	00					.byte	 0	; $03 !!3
>8486	00					.byte	 0	; $04 ><
>8487	02					.byte	 2	; $05 >=
>8488	04					.byte	 4	; $06 >>
>8489	00					.byte	 0	; $07 !!7
>848a	00					.byte	 0	; $08 !!8
>848b	00					.byte	 0	; $09 !!9
>848c	00					.byte	 0	; $0a !!10
>848d	00					.byte	 0	; $0b !!11
>848e	00					.byte	 0	; $0c !!12
>848f	00					.byte	 0	; $0d !!13
>8490	00					.byte	 0	; $0e !!14
>8491	00					.byte	 0	; $0f !!15
>8492	00					.byte	 0	; $10 @
>8493	00					.byte	 0	; $11 !!17
>8494	00					.byte	 0	; $12 !!18
>8495	00					.byte	 0	; $13 [
>8496	04					.byte	 4	; $14 \
>8497	00					.byte	 0	; $15 ]
>8498	01					.byte	 1	; $16 ^
>8499	00					.byte	 0	; $17 _
>849a	00					.byte	 0	; $18 `
>849b	00					.byte	 0	; $19 !!25
>849c	00					.byte	 0	; $1a !!26
>849d	00					.byte	 0	; $1b {
>849e	01					.byte	 1	; $1c |
>849f	00					.byte	 0	; $1d }
>84a0	00					.byte	 0	; $1e ~
>84a1	00					.byte	 0	; $1f [7m<7F>[m
>84a2	00					.byte	 0	; $20
>84a3	05					.byte	 5	; $21 !
>84a4	00					.byte	 0	; $22 "
>84a5	00					.byte	 0	; $23 #
>84a6	05					.byte	 5	; $24 $
>84a7	04					.byte	 4	; $25 %
>84a8	01					.byte	 1	; $26 &
>84a9	00					.byte	 0	; $27 '
>84aa	00					.byte	 0	; $28 (
>84ab	00					.byte	 0	; $29 )
>84ac	04					.byte	 4	; $2a *
>84ad	03					.byte	 3	; $2b +
>84ae	00					.byte	 0	; $2c ,
>84af	03					.byte	 3	; $2d -
>84b0	00					.byte	 0	; $2e .
>84b1	04					.byte	 4	; $2f /
>84b2	00					.byte	 0	; $30 0
>84b3	00					.byte	 0	; $31 1
>84b4	00					.byte	 0	; $32 2
>84b5	00					.byte	 0	; $33 3
>84b6	00					.byte	 0	; $34 4
>84b7	00					.byte	 0	; $35 5
>84b8	00					.byte	 0	; $36 6
>84b9	00					.byte	 0	; $37 7
>84ba	00					.byte	 0	; $38 8
>84bb	00					.byte	 0	; $39 9
>84bc	00					.byte	 0	; $3a :
>84bd	00					.byte	 0	; $3b ;
>84be	02					.byte	 2	; $3c <
>84bf	02					.byte	 2	; $3d =
>84c0	02					.byte	 2	; $3e >
>84c1	05					.byte	 5	; $3f ?

;******  Return to file: ./core/expressions/expression.asm

.84c2					EvaluateExpressionAt0:
.84c2	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.84c4					EvaluateExpression:
.84c4	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.84c6					EvaluateExpressionAtPrecedence:
.84c6	48		pha				pha 								; save precedence level
.84c7	20 c2 86	jsr $86c2			jsr 	EvaluateTerm 				; evaluate term into level X.
.84ca	68		pla				pla 								; restore precedence level.
.84cb					_EXPRLoop:
.84cb	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.84cd	b1 30		lda ($30),y			lda 	(codePtr),y
.84cf	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.84d1	b0 25		bcs $84f8			bcs 	_EXPRExit
.84d3	da		phx				phx 								; read the operator precedence
.84d4	aa		tax				tax
.84d5	bd 82 84	lda $8482,x			lda 	PrecedenceLevel,x
.84d8	fa		plx				plx
.84d9	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.84db	f0 1b		beq $84f8			beq 	_EXPRExit
.84dd	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.84df	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.84e1	c5 37		cmp $37				cmp 	zTemp0+1
.84e3	b0 13		bcs $84f8			bcs		_EXPRExit 					; if current >= operator exit
.84e5	48		pha				pha 								; save current precedence.
.84e6	b1 30		lda ($30),y			lda 	(codePtr),y
.84e8	c8		iny				iny
.84e9	48		pha				pha
.84ea	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.84ec	e8		inx				inx 								; work out the right hand side.
.84ed	20 c6 84	jsr $84c6			jsr 	EvaluateExpressionAtPrecedence
.84f0	ca		dex				dex
.84f1	68		pla				pla 								; get operator, call the code.
.84f2	20 fb 84	jsr $84fb			jsr 	_EXPRCaller
.84f5	68		pla				pla 								; restore precedence level
.84f6	80 d3		bra $84cb			bra 	_EXPRLoop 					; and go round.
.84f8					_EXPRExit:
.84f8	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.84fa	60		rts				rts
.84fb					_EXPRCaller:
.84fb	da		phx				phx 								; save on stack, first thing is to restore it
.84fc	0a		asl a				asl 	a 							; double so can use vectors into X
.84fd	aa		tax				tax
.84fe	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/addsub.asm

.91c0					FloatingPointAdd:
.91c0	20 61 93	jsr $9361			jsr 	FloatPrepare 				; prepare for floats
.91c3	80 0b		bra $91d0			bra 	FloatAdd
.91c5					FloatingPointSub:
.91c5	20 61 93	jsr $9361			jsr 	FloatPrepare 				; prepare for floats
.91c8					FloatSubtract:
.91c8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.91cb	49 80		eor #$80			eor 	#$80
.91cd	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.91d0					FloatAdd:
.91d0	48		pha				pha
.91d1	5a		phy				phy
.91d2	20 72 93	jsr $9372			jsr 	NSNormalise 				; normalise S[X]
.91d5	f0 54		beq $922b			beq 	_FAReturn1
.91d7	e8		inx				inx 								; normalise S[X+1]
.91d8	20 72 93	jsr $9372			jsr 	NSNormalise
.91db	ca		dex				dex
.91dc	c9 00		cmp #$00			cmp 	#0
.91de	f0 6f		beq $924f			beq 	_FAExit 					; if so, just return A
.91e0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.91e3	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.91e6	f0 1b		beq $9203			beq 	_FAExponentsEqual
.91e8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.91eb	a8		tay				tay
.91ec	38		sec				sec 								; do a signed comparison of the exponents.
.91ed	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.91f0	50 02		bvc $91f4			bvc 	_FANoSignedChange
.91f2	49 80		eor #$80			eor 	#$80
.91f4					_FANoSignedChange:
.91f4	29 80		and #$80			and 	#$80
.91f6	10 03		bpl $91fb			bpl 	_FAHaveMax
.91f8	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.91fb					_FAHaveMax:
.91fb	20 52 92	jsr $9252			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.91fe	e8		inx				inx
.91ff	20 52 92	jsr $9252			jsr 	_FAShiftToExponent
.9202	ca		dex				dex
.9203					_FAExponentsEqual:
.9203	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9206	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9209	30 10		bmi $921b			bmi 	_FADifferentSigns
.920b	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; do the add of the mantissae
.920e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9211	10 3c		bpl $924f			bpl 	_FAExit 					; if no, we are done.
.9213	20 92 8a	jsr $8a92			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9216	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9219	80 34		bra $924f			bra 	_FAExit
.921b					_FADifferentSigns:
.921b	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.921e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9221	10 2c		bpl $924f			bpl 	_FAExit 					; if no, we are done.
.9223	20 1b 8a	jsr $8a1b			jsr 	NSMNegate 					; netate result
.9226	20 24 8a	jsr $8a24			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9229	80 24		bra $924f			bra 	_FAExit
.922b					_FAReturn1:
.922b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.922e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9231	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9234	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9237	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.923a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.923d	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9240	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9243	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9246	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9249	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.924c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.924f					_FAExit:
.924f	7a		ply				ply
.9250	68		pla				pla
.9251	60		rts				rts
.9252					_FAShiftToExponent:
.9252					_FAShiftToExponent2:
.9252	98		tya				tya 								; compare Y to exponent
.9253	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9256	f0 08		beq $9260			beq 	_FASEExit 					; exit if so.
.9258	20 92 8a	jsr $8a92			jsr 	NSMShiftRight	 			; shift the mantissa right
.925b	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.925e	80 f2		bra $9252			bra 	_FAShiftToExponent2
.9260					_FASEExit:
.9260	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/compare.asm

.9261					CompareFloat:
.9261	20 c8 91	jsr $91c8			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9264	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9267	29 f8		and #$f8			and 	#$F8
.9269	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.926c	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.926f	f0 09		beq $927a			beq 	_FCExit 					; zero, so approximately identical
.9271	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9273	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9276	10 02		bpl $927a			bpl 	_FCExit
.9278					_FCNegative:
.9278	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.927a					_FCExit:
.927a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/divide.asm

.927b					FDivideCommand:
.927b	fa		plx				plx	 								; restore stack position
.927c	20 61 93	jsr $9361			jsr 	FloatPrepare 				; prepare for floats
.927f					FloatDivide:
.927f	48		pha				pha
.9280	e8		inx				inx
.9281	20 72 93	jsr $9372			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9284	ca		dex				dex
.9285	c9 00		cmp #$00			cmp 	#0
.9287	f0 20		beq $92a9			beq 	_FDZero
.9289	20 72 93	jsr $9372			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.928c	f0 19		beq $92a7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.928e	20 bc 90	jsr $90bc			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9291	20 4a 90	jsr $904a			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9294	20 72 93	jsr $9372			jsr		NSNormalise 				; renormalise
.9297	20 57 91	jsr $9157			jsr 	CalculateSign 				; calculate result sign
.929a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.929d	38		sec				sec
.929e	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.92a1	38		sec				sec
.92a2	e9 1e		sbc #$1e			sbc 	#30
.92a4	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92a7					_FDExit:
.92a7	68		pla				pla
.92a8	60		rts				rts
.92a9					_FDZero:
.92a9	a9 03		lda #$03		lda	#3
.92ab	4c 1b 82	jmp $821b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/fractional.asm

.92ae					FloatFractionalPart:
.92ae	5a		phy				phy
.92af	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.92b2	29 7f		and #$7f			and 	#$7F
.92b4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92b7	20 72 93	jsr $9372			jsr 	NSNormalise
.92ba	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.92bd	38		sec				sec
.92be	e9 e0		sbc #$e0			sbc 	#$E0
.92c0	90 31		bcc $92f3			bcc 	_FFPExit 					; already fractional
.92c2	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.92c4	b0 2a		bcs $92f0			bcs 	_FFPZero
.92c6	a8		tay				tay 								; put count to do in Y
.92c7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.92ca	20 f5 92	jsr $92f5			jsr 	_FFPPartial
.92cd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92d0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.92d3	20 f5 92	jsr $92f5			jsr 	_FFPPartial
.92d6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92d9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.92dc	20 f5 92	jsr $92f5			jsr 	_FFPPartial
.92df	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92e2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.92e5	20 f5 92	jsr $92f5			jsr 	_FFPPartial
.92e8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92eb	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; zeroed check.
.92ee	d0 03		bne $92f3			bne 	_FFPExit
.92f0					_FFPZero:
.92f0	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero
.92f3					_FFPExit:
.92f3	7a		ply				ply
.92f4	60		rts				rts
.92f5					_FFPPartial:
.92f5	c0 00		cpy #$00			cpy 	#0 							; no more to do
.92f7	f0 17		beq $9310			beq 	_FFFPPExit
.92f9	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.92fb	b0 0c		bcs $9309			bcs 	_FFFPPWholeByte
.92fd	5a		phy				phy
.92fe					_FFFPPLeft:
.92fe	0a		asl a				asl 	a
.92ff	88		dey				dey
.9300	d0 fc		bne $92fe			bne 	_FFFPPLeft
.9302	7a		ply				ply
.9303					_FFFPPRight:
.9303	4a		lsr a				lsr 	a
.9304	88		dey				dey
.9305	d0 fc		bne $9303			bne 	_FFFPPRight
.9307	80 07		bra $9310			bra 	_FFFPPExit
.9309					_FFFPPWholeByte:
.9309	98		tya				tya 								; subtract 8 from count
.930a	38		sec				sec
.930b	e9 08		sbc #$08			sbc 	#8
.930d	a8		tay				tay
.930e	a9 00		lda #$00			lda 	#0 							; and clear all
.9310					_FFFPPExit:
.9310	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/integer.asm

.9311					FloatIntegerPart:
.9311	48		pha				pha
.9312	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9315	f0 1f		beq $9336			beq 	_FIPExit 					; if so do nothing
.9317	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; is it zero ?
.931a	f0 17		beq $9333			beq 	_FIPZero 					; if so return zero.
.931c	20 72 93	jsr $9372			jsr 	NSNormalise 				; normalise
.931f	f0 12		beq $9333			beq 	_FIPZero 					; normalised to zero, exit zero
.9321					_FIPShift:
.9321	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9324	10 08		bpl $932e			bpl 	_FIPCheckZero
.9326	20 92 8a	jsr $8a92			jsr 	NSMShiftRight 				; shift mantissa right
.9329	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.932c	80 f3		bra $9321			bra 	_FIPShift
.932e					_FIPCheckZero:
.932e	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; avoid -0 problem
.9331	d0 03		bne $9336			bne 	_FIPExit 					; set to zero if mantissa zero.
.9333					_FIPZero:
.9333	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero
.9336					_FIPExit:
.9336	68		pla				pla
.9337	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/multiply.asm

.9338					FloatingPointMultiply:
.9338	20 61 93	jsr $9361			jsr 	FloatPrepare 				; prepare for floats
.933b					FloatMultiply:
.933b	48		pha				pha
.933c	20 72 93	jsr $9372			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.933f	f0 1b		beq $935c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9341	e8		inx				inx
.9342	20 72 93	jsr $9372			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9345	ca		dex				dex
.9346	c9 00		cmp #$00			cmp 	#0
.9348	f0 0f		beq $9359			beq 	_FDSetZero
.934a	20 12 91	jsr $9112			jsr 	MultiplyShort 				; calculate the result.
.934d	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9350	18		clc				clc
.9351	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9354	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9357	80 03		bra $935c			bra 	_FDExit
.9359					_FDSetZero:
.9359	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero 					; return 0
.935c					_FDExit:
.935c	20 72 93	jsr $9372			jsr 	NSNormalise 				; normalise the result
.935f	68		pla				pla
.9360	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/utility.asm

.9361					FloatPrepare:
.9361	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; dereference the top two values
.9364	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9367	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.936a	29 10		and #$10			and 	#NSBIsString
.936c	d0 01		bne $936f			bne 	_FDType
.936e	60		rts				rts
.936f					_FDType:
.936f	4c 37 95	jmp $9537			jmp 	TypeError
.9372					NSNormalise:
.9372	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9375	29 80		and #$80			and 	#$80
.9377	09 08		ora #$08			ora 	#NSTFloat
.9379	9d 00 06	sta $0600,x			sta 	NSStatus,x
.937c	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; if zero exit
.937f	d0 09		bne $938a			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9381	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9384	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9387	a9 00		lda #$00			lda 	#0 							; set Z flag
.9389	60		rts				rts
.938a					_NSNormaliseOptimise:
.938a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.938d	d0 22		bne $93b1			bne 	_NSNormaliseLoop
.938f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9392	30 1d		bmi $93b1			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9394	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9397	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.939a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.939d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.93a0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93a3	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.93a6	bd 28 06	lda $0628,x			lda 	NSExponent,x
.93a9	38		sec				sec
.93aa	e9 08		sbc #$08			sbc 	#8
.93ac	9d 28 06	sta $0628,x			sta 	NSExponent,x
.93af	80 d9		bra $938a			bra 	_NSNormaliseOptimise
.93b1					_NSNormaliseLoop:
.93b1	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.93b4	70 08		bvs $93be			bvs 	_NSNExit 					; exit if so with Z flag clear
.93b6	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; shift mantissa left
.93b9	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.93bc	80 f3		bra $93b1			bra 	_NSNormaliseLoop
.93be					_NSNExit:
.93be	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.93c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/dereference.asm

.8501					DereferenceTopTwo:
.8501	e8		inx				inx
.8502	20 06 85	jsr $8506			jsr 	Dereference 				; deref x+1
.8505	ca		dex				dex  								; falls through to deref x
.8506					Dereference:
.8506	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8509	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.850b	f0 57		beq $8564			beq 	_DRFExit 					; not a reference
.850d	5a		phy				phy
.850e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8511	85 36		sta $36				sta 	zTemp0
.8513	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8516	85 37		sta $37				sta 	zTemp0+1
.8518	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.851b	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.851d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8520	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8523	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8525	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8527	f0 0f		beq $8538			beq 	_DRFDereferenceTwo
.8529	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.852b	f0 39		beq $8566			beq 	_DRFFull
.852d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8530	29 03		and #$03			and 	#3
.8532	f0 32		beq $8566			beq 	_DRFFull 					; the whole word
.8534	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8536	f0 07		beq $853f			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8538					_DRFDereferenceTwo:
.8538	a0 01		ldy #$01			ldy 	#1
.853a	b1 36		lda ($36),y			lda 	(zTemp0),y
.853c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.853f					_DRFClear23:
.853f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8542	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8545	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8548	29 18		and #$18			and 	#NSBTypeMask
.854a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.854d	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.854f	d0 12		bne $8563			bne 	_DRFNotString
.8551	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8554	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8557	d0 0a		bne $8563			bne 	_DRFNotString
.8559	a9 65		lda #$65			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.855b	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.855e	a9 85		lda #$85			lda 	#_DRFNullString >> 8
.8560	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8563					_DRFNotString
.8563	7a		ply				ply 								; restore Y and exit
.8564					_DRFExit:
.8564	60		rts				rts
.8565					_DRFNullString:
>8565	00						.byte 	0
.8566					_DRFFull:
.8566	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8568	b1 36		lda ($36),y			lda 	(zTemp0),y
.856a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.856d	c8		iny				iny
.856e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8570	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8573	c8		iny				iny
.8574	b1 36		lda ($36),y			lda 	(zTemp0),y
.8576	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8579	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.857c	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.857f	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8581	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8584	f0 06		beq $858c			beq 	_DRFNoExponent
.8586	c8		iny				iny 								; if not, read the exponent as well.
.8587	b1 36		lda ($36),y			lda 	(zTemp0),y
.8589	9d 28 06	sta $0628,x			sta 	NSExponent,x
.858c					_DRFNoExponent:
.858c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.858f	10 0d		bpl $859e			bpl 	_DRFExit2 					; if not, then exit.
.8591	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8593	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8596	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8599	09 80		ora #$80			ora 	#NSBIsNegative
.859b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.859e					_DRFExit2:
.859e	7a		ply				ply
.859f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.85a0					EncodeNumberStart:
.85a0	38		sec				sec
.85a1	80 01		bra $85a4			bra 	EncodeNumberContinue+1
.85a3					EncodeNumberContinue:
.85a3	18		clc				clc
.85a4					EncodeNumber:
.85a4	08		php				php 								; save reset.
.85a5	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.85a7	f0 12		beq $85bb			beq 	_ENIsOkay
.85a9	c9 30		cmp #$30			cmp 	#"0"
.85ab	90 04		bcc $85b1			bcc 	_ENBadNumber
.85ad	c9 3a		cmp #$3a			cmp 	#"9"+1
.85af	90 0a		bcc $85bb			bcc 	_ENIsOkay
.85b1					_ENBadNumber:
.85b1	28		plp				plp 								; throw saved reset
.85b2	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.85b5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.85b7	f0 7e		beq $8637			beq 	_ENConstructFinal
.85b9					_ENFail:
.85b9	18		clc				clc 								; not allowed
.85ba	60		rts				rts
.85bb					_ENIsOkay:
.85bb	28		plp				plp 								; are we restarting
.85bc	90 15		bcc $85d3			bcc 	_ENNoRestart
.85be					_ENStartEncode:
.85be	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.85c0	f0 0c		beq $85ce			beq 	_ENFirstDP
.85c2	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.85c4	20 71 8a	jsr $8a71			jsr 	NSMSetByte
.85c7	a9 01		lda #$01			lda 	#ESTA_Low
.85c9					_ENExitChange:
.85c9	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.85cc	38		sec				sec
.85cd	60		rts				rts
.85ce					_ENFirstDP:
.85ce	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero 					; clear integer part
.85d1	80 3f		bra $8612			bra 	_ESTASwitchFloat			; go straight to float and exi
.85d3					_ENNoRestart:
.85d3	48		pha				pha 								; save on stack.
.85d4	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.85d7	c9 01		cmp #$01			cmp 	#ESTA_Low
.85d9	f0 09		beq $85e4			beq  	_ESTALowState
.85db	c9 02		cmp #$02			cmp 	#ESTA_High
.85dd	f0 29		beq $8608			beq 	_ESTAHighState
.85df	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.85e1	f0 3b		beq $861e			beq 	_ESTADecimalState
>85e3	db						.byte 	$DB 						; causes a break in the emulator
.85e4					_ESTALowState:
.85e4	68		pla				pla 								; get value back
.85e5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.85e7	f0 29		beq $8612			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.85e9	29 0f		and #$0f			and 	#15 						; make digit
.85eb	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.85ee	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.85f1	0a		asl a				asl 	a
.85f2	0a		asl a				asl 	a
.85f3	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.85f6	0a		asl a				asl 	a
.85f7	6d 06 07	adc $0706			adc 	DigitTemp
.85fa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85fd	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.85ff	90 05		bcc $8606			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8601	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8603	8d 05 07	sta $0705			sta 	EncodeState
.8606					_ESTANoSwitch:
.8606	38		sec				sec
.8607	60		rts				rts
.8608					_ESTAHighState:
.8608	68		pla				pla 								; get value back
.8609	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.860b	f0 05		beq $8612			beq 	_ESTASwitchFloat
.860d	20 71 86	jsr $8671			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8610	38		sec				sec
.8611	60		rts				rts
.8612					_ESTASwitchFloat:
.8612	9c 07 07	stz $0707			stz 	DecimalCount
.8615	e8		inx				inx 								; zero the decimal additive.
.8616	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero
.8619	ca		dex				dex
.861a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.861c	80 ab		bra $85c9			bra 	_ENExitChange
.861e					_ESTADecimalState:
.861e	68		pla				pla 								; digit.
.861f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8621	f0 96		beq $85b9			beq 	_ENFail
.8623	e8		inx				inx 								; put digit into fractional part of X+1
.8624	20 71 86	jsr $8671			jsr 	ESTAShiftDigitIntoMantissa
.8627	ca		dex				dex
.8628	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.862b	ad 07 07	lda $0707			lda 	DecimalCount
.862e	c9 0b		cmp #$0b			cmp 	#11
.8630	f0 02		beq $8634			beq 	_ESTADSFail
.8632	38		sec				sec
.8633	60		rts				rts
.8634					_ESTADSFail:
.8634	4c 32 95	jmp $9532			jmp 	RangeError
.8637					_ENConstructFinal:
.8637	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.863a	f0 33		beq $866f			beq 	_ENCFExit 					; no decimals
.863c	5a		phy				phy
.863d	0a		asl a				asl 	a 							; x 4 and CLC
.863e	0a		asl a				asl 	a
.863f	6d 07 07	adc $0707			adc 	DecimalCount
.8642	a8		tay				tay
.8643	b9 f1 94	lda $94f1,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8646	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8649	b9 f2 94	lda $94f2,y			lda 	DecimalScalarTable-5+1,y
.864c	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.864f	b9 f3 94	lda $94f3,y			lda 	DecimalScalarTable-5+2,y
.8652	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8655	b9 f4 94	lda $94f4,y			lda 	DecimalScalarTable-5+3,y
.8658	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.865b	b9 f5 94	lda $94f5,y			lda 	DecimalScalarTable-5+4,y
.865e	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8661	a9 08		lda #$08			lda 	#NSTFloat
.8663	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8666	7a		ply				ply
.8667	e8		inx				inx 								; multiply decimal const by decimal scalar
.8668	20 3b 93	jsr $933b			jsr 	FloatMultiply
.866b	ca		dex				dex
.866c	20 d0 91	jsr $91d0			jsr 	FloatAdd 					; add to integer part.
.866f					_ENCFExit:
.866f	18		clc				clc 								; reject the digit.
.8670	60		rts				rts
.8671					ESTAShiftDigitIntoMantissa:
.8671	29 0f		and #$0f			and 	#15 						; save digit
.8673	48		pha				pha
.8674	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8677	48		pha				pha
.8678	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.867b	48		pha				pha
.867c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.867f	48		pha				pha
.8680	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8683	48		pha				pha
.8684	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; x 2
.8687	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; x 4
.868a	18		clc				clc 								; pop mantissa and add
.868b	68		pla				pla
.868c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.868f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8692	68		pla				pla
.8693	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8696	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8699	68		pla				pla
.869a	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.869d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86a0	68		pla				pla
.86a1	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.86a4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.86a7	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; x 10
.86aa	68		pla				pla 								; add digit
.86ab	18		clc				clc
.86ac	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.86af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86b2	90 0d		bcc $86c1			bcc 	_ESTASDExit
.86b4	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.86b7	d0 08		bne $86c1			bne 	_ESTASDExit
.86b9	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.86bc	d0 03		bne $86c1			bne 	_ESTASDExit
.86be	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.86c1					_ESTASDExit:
.86c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/term.asm

.86c2					EvaluateTerm:
.86c2	b1 30		lda ($30),y			lda 	(codePtr),y
.86c4	30 18		bmi $86de			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.86c6	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.86c8	b0 6f		bcs $8739			bcs 	_ETVariable
.86ca	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.86cc	90 6f		bcc $873d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.86ce	c9 3a		cmp #$3a			cmp 	#'9'+1
.86d0	b0 6b		bcs $873d			bcs 	_ETPuncUnary
.86d2	20 a0 85	jsr $85a0			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.86d5					_ETNumber:
.86d5	c8		iny				iny 								; keep encoding until we have the numbers
.86d6	b1 30		lda ($30),y			lda 	(codePtr),y
.86d8	20 a3 85	jsr $85a3			jsr 	EncodeNumberContinue
.86db	b0 f8		bcs $86d5			bcs 	_ETNumber 					; go back if accepted.
.86dd	60		rts				rts
.86de					_ETCheckUnary:
.86de	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.86e0	f0 41		beq $8723			beq 	_ETString
.86e2	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.86e4	f0 12		beq $86f8			beq 	_ETHexConstant
.86e6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.86e8	90 0b		bcc $86f5			bcc 	_ETSyntaxError
.86ea	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.86ec	b0 07		bcs $86f5			bcs 	_ETSyntaxError
.86ee	da		phx				phx 								; push X on the stack
.86ef	0a		asl a				asl 	a 							; put vector x 2 into X
.86f0	aa		tax				tax
.86f1	c8		iny				iny 								; consume unary function token
.86f2	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.86f5					_ETSyntaxError:
.86f5	4c 2d 95	jmp $952d			jmp 	SyntaxError
.86f8					_ETHexConstant:
.86f8	c8		iny				iny 								; skip #
.86f9	c8		iny				iny 								; skip count
.86fa	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero 					; clear result
.86fd					_ETHLoop:
.86fd	b1 30		lda ($30),y			lda 	(codePtr),y
.86ff	c8		iny				iny 								; and consume
.8700	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8702	f0 1e		beq $8722			beq 	_ETHExit
.8704	48		pha				pha 								; save on stack.
.8705	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; x 2
.8708	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; x 4
.870b	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; x 8
.870e	20 84 8a	jsr $8a84			jsr 	NSMShiftLeft 				; x 16
.8711	68		pla				pla 								; ASCII
.8712	c9 41		cmp #$41			cmp 	#'A'
.8714	90 02		bcc $8718			bcc 	_ETHNotChar
.8716	e9 07		sbc #$07			sbc 	#7
.8718					_ETHNotChar:
.8718	29 0f		and #$0f			and 	#15 						; digit now
.871a	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.871d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8720	80 db		bra $86fd			bra 	_ETHLoop 					; go round.
.8722					_ETHExit:
.8722	60		rts				rts
.8723					_ETString:
.8723	c8		iny				iny 								; look at length
.8724	b1 30		lda ($30),y			lda 	(codePtr),y
.8726	48		pha				pha
.8727	c8		iny				iny 								; first character
.8728	20 46 81	jsr $8146			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.872b	68		pla				pla 								; restore count and save
.872c	85 36		sta $36				sta 	zTemp0
.872e	98		tya				tya 								; add length to Y to skip it.
.872f	18		clc				clc
.8730	65 36		adc $36				adc 	zTemp0
.8732	a8		tay				tay
.8733	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8735	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8738	60		rts				rts
.8739					_ETVariable:
>8739	db						.byte 	$DB 						; causes a break in the emulator
.873a	4c ff ff	jmp $ffff			jmp 	$FFFF
.873d					_ETPuncUnary:
.873d	c8		iny				iny 								; consume the unary character
.873e	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8740	f0 31		beq $8773			beq 	_ETUnaryNegate
.8742	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8744	f0 3d		beq $8783			beq 	_ETDereference
.8746	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8748	f0 58		beq $87a2			beq 	_ETParenthesis
.874a	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.874c	f0 43		beq $8791			beq 	_ETStringReference
.874e	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8750	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8752	f0 06		beq $875a			beq 	_ETIndirection
.8754	e6 36		inc $36				inc 	zTemp0
.8756	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8758	d0 9b		bne $86f5			bne 	_ETSyntaxError
.875a					_ETIndirection:
.875a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.875c	1a		inc a				inc 	a
.875d	48		pha				pha
.875e	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8761	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8764	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8767	d0 07		bne $8770			bne 	_ETTypeMismatch
.8769	68		pla				pla 								; indirection 1-2
.876a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.876c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.876f	60		rts				rts
.8770					_ETTypeMismatch:
.8770	4c 37 95	jmp $9537			jmp 	TypeError
.8773					_ETUnaryNegate:
.8773	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8776	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8779	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.877c	29 10		and #$10			and 	#NSTString
.877e	d0 f0		bne $8770			bne 	_ETTypeMismatch
.8780	4c 1b 8a	jmp $8a1b			jmp 	NSMNegate  					; just toggles the sign bit.
.8783					_ETDereference:
.8783	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8786	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8789	29 20		and #$20			and 	#NSBIsReference
.878b	f0 e3		beq $8770			beq 	_ETTypeMismatch
.878d	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8790	60		rts				rts
.8791					_ETStringReference:
.8791	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8794	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8797	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.879a	d0 d4		bne $8770			bne 	_ETTypeMismatch
.879c	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.879e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87a1	60		rts				rts
.87a2					_ETParenthesis:
.87a2	20 c4 84	jsr $84c4			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.87a5	20 63 8f	jsr $8f63			jsr 	CheckRightBracket 			; check for )
.87a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/abs.asm

.93c1					AbsUnary:
.93c1	fa		plx				plx 								; restore stack pos
.93c2	20 c3 89	jsr $89c3			jsr 	EvaluateNumber 				; get a float or int
.93c5	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.93c8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.93cb	29 7f		and #$7f			and 	#$7F
.93cd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/alloc.asm

.87a9					AllocUnary:
.87a9	fa		plx				plx 								; restore stack pos
.87aa	20 fb 89	jsr $89fb			jsr 	Evaluate16BitInteger		; get bytes required.
.87ad	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.87b0	da		phx				phx 								; save X/Y
.87b1	5a		phy				phy
.87b2	8a		txa				txa 								; copy X into Y
.87b3	a8		tay				tay
.87b4	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.87b7	aa		tax				tax
.87b8	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.87bb	20 c8 87	jsr $87c8			jsr 	AllocateXABytes 			; allocate memory
.87be	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.87c1	8a		txa				txa
.87c2	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.87c5	7a		ply				ply
.87c6	fa		plx				plx
.87c7	60		rts				rts
.87c8					AllocateXABytes:
.87c8	5a		phy				phy
.87c9	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.87cc	5a		phy				phy
.87cd	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.87d0	5a		phy				phy
.87d1	18		clc				clc
.87d2	6d 0c 07	adc $070c			adc 	lowMemPtr
.87d5	8d 0c 07	sta $070c			sta 	lowMemPtr
.87d8	8a		txa				txa
.87d9	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.87dc	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.87df	fa		plx				plx
.87e0	68		pla				pla
.87e1	7a		ply				ply
.87e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/asc.asm

.93d1					AscUnary:
.93d1	fa		plx				plx 								; restore stack pos
.93d2	20 ce 89	jsr $89ce			jsr 	EvaluateString 				; get a string
.93d5	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.93d7	20 71 8a	jsr $8a71			jsr 	NSMSetByte
.93da	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.93dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/frac.asm

.93de					FracUnary:
.93de	fa		plx				plx 								; restore stack pos
.93df	20 c3 89	jsr $89c3			jsr 	EvaluateNumber 				; get a float or int
.93e2	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.93e5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.93e8	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.93ea	f0 04		beq $93f0			beq 	_IUZero
.93ec	20 ae 92	jsr $92ae			jsr 	FloatFractionalPart
.93ef	60		rts				rts
.93f0					_IUZero:
.93f0	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero
.93f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/int.asm

.93f4					IntUnary:
.93f4	fa		plx				plx 								; restore stack pos
.93f5	20 c3 89	jsr $89c3			jsr 	EvaluateNumber 				; get a float or int
.93f8	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.93fb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.93fe	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9400	f0 03		beq $9405			beq 	_IUExit
.9402	20 11 93	jsr $9311			jsr 	FloatIntegerPart
.9405					_IUExit:
.9405	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/len.asm

.9406					LenUnary:
.9406	fa		plx				plx 								; restore stack pos
.9407	20 ce 89	jsr $89ce			jsr 	EvaluateString 				; get a string
.940a	5a		phy				phy
.940b	a0 00		ldy #$00			ldy 	#0 							; find length
.940d					_LenFind:
.940d	b1 36		lda ($36),y			lda 	(zTemp0),y
.940f	f0 06		beq $9417			beq 	_LenExit
.9411	c8		iny				iny
.9412	d0 f9		bne $940d			bne 	_LenFind
.9414	4c 32 95	jmp $9532			jmp 	RangeError 					; string > 255
.9417					_LenExit:
.9417	98		tya				tya
.9418	20 71 8a	jsr $8a71			jsr 	NSMSetByte
.941b	7a		ply				ply
.941c	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.941f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/not.asm

.87e3					Unary_Not:
.87e3	fa		plx				plx
.87e4	20 e6 89	jsr $89e6			jsr 	EvaluateInteger 			; get integer
.87e7	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.87ea	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; zero mantissa ?
.87ed	f0 04		beq $87f3			beq 	_NotZero
.87ef	20 6f 8a	jsr $8a6f			jsr 	NSMSetZero
.87f2	60		rts				rts
.87f3					_NotZero:
.87f3	4c 7d 8f	jmp $8f7d			jmp 	ReturnTrue
.87f6					_UNBad:
.87f6	4c 3c 95	jmp $953c			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/rnd.asm

.87f9					Unary_Rnd:
.87f9	20 c3 89	jsr $89c3			jsr 	EvaluateNumber 				; number to use.
.87fc	20 63 8f	jsr $8f63			jsr 	CheckRightBracket 			; closing bracket
.87ff	20 28 88	jsr $8828			jsr 	Random32Bit 				; generate a number.
.8802	ad 08 07	lda $0708			lda 	RandomSeed+0
.8805	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8808	ad 09 07	lda $0709			lda 	RandomSeed+1
.880b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.880e	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8811	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8814	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8817	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8819	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.881c	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.881e	8d 28 06	sta $0628			sta 	NSExponent
.8821	a9 08		lda #$08			lda 	#NSTFloat
.8823	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8826	db						.byte 	$DB 						; causes a break in the emulator
.8827	60		rts				rts
.8828					Random32Bit:
.8828	5a		phy				phy
.8829	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.882b	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.882e	d0 03		bne $8833			bne 	_Random1
.8830	a8		tay				tay 								; if so do it 256 times
.8831	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8833					_Random1:
.8833	0a		asl a				asl 	a 							; LSFR RNG
.8834	2e 09 07	rol $0709			rol 	RandomSeed+1
.8837	2e 0a 07	rol $070a			rol 	RandomSeed+2
.883a	2e 0b 07	rol $070b			rol 	RandomSeed+3
.883d	90 02		bcc $8841			bcc 	_Random2
.883f	49 c5		eor #$c5			eor 	#$C5
.8841					_Random2:
.8841	88		dey				dey
.8842	d0 ef		bne $8833			bne 	_Random1
.8844	7a		ply				ply
.8845	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/sgn.asm

.9420					SgnUnary:
.9420	fa		plx				plx 								; restore stack pos
.9421	20 c3 89	jsr $89c3			jsr 	EvaluateNumber 				; get a float or int
.9424	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.9427	20 9f 8a	jsr $8a9f			jsr 	NSMIsZero 					; if zero
.942a	f0 10		beq $943c			beq 	_SGZero  					; return Int Zero
.942c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.942f	48		pha				pha
.9430	a9 01		lda #$01			lda 	#1 							; set to 1
.9432	20 71 8a	jsr $8a71			jsr 	NSMSetByte
.9435	68		pla				pla
.9436	29 80		and #$80			and		#$80 						; copy the sign byte out
.9438	9d 00 06	sta $0600,x			sta 	NSStatus,x
.943b	60		rts				rts
.943c	20 6f 8a	jsr $8a6f	_SGZero:jsr 	NSMSetZero
.943f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/val.asm

.9440					ValUnary:
.9440	fa		plx				plx 								; restore stack pos
.9441	20 56 94	jsr $9456			jsr 	ValMainCode 				; do the main val() code
.9444	b0 01		bcs $9447			bcs 	_VUError 					; couldn't convert
.9446	60		rts				rts
.9447					_VUError:
.9447	4c 37 95	jmp $9537			jmp 	TypeError
.944a					IsValUnary:
.944a	fa		plx				plx 								; restore stack pos
.944b	20 56 94	jsr $9456			jsr 	ValMainCode 				; do the main val() code
.944e	b0 03		bcs $9453			bcs 	_VUBad
.9450	4c 7d 8f	jmp $8f7d			jmp 	ReturnTrue
.9453					_VUBad:
.9453	4c 89 8f	jmp $8f89			jmp 	ReturnFalse
.9456					ValMainCode:
.9456	20 ce 89	jsr $89ce			jsr 	EvaluateString 				; get a string
.9459	20 63 8f	jsr $8f63			jsr 	CheckRightBracket 			; check right bracket present
.945c	5a		phy				phy
.945d	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.945f	f0 17		beq $9478			beq 	_VMCFail2
.9461	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9463	48		pha				pha 								; save first character
.9464	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9466	d0 01		bne $9469			bne 	_VMCStart
.9468	c8		iny				iny 								; skip over -
.9469					_VMCStart:
.9469	38		sec				sec 								; initialise first time round.
.946a					_VMCNext:
.946a	c8		iny				iny 								; pre-increment
.946b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.946d	f0 0c		beq $947b			beq 	_VMCSuccess 				; successful.
.946f	20 a4 85	jsr $85a4			jsr 	EncodeNumber 				; send it to the number-builder
.9472	90 03		bcc $9477			bcc 	_VMCFail 					; if failed, give up.
.9474	18		clc				clc 								; next time round, countinue
.9475	80 f3		bra $946a			bra 	_VMCNext
.9477					_VMCFail:
.9477	68		pla				pla
.9478					_VMCFail2:
.9478	7a		ply				ply
.9479	38		sec				sec
.947a	60		rts				rts
.947b					_VMCSuccess:
.947b	a9 00		lda #$00			lda 	#0 							; construct final
.947d	20 a4 85	jsr $85a4			jsr 	EncodeNumber
.9480	68		pla				pla
.9481	c9 2d		cmp #$2d			cmp 	#"-"
.9483	d0 03		bne $9488			bne 	_VMCNotNegative
.9485	20 1b 8a	jsr $8a1b			jsr		NSMNegate
.9488					_VMCNotNegative:
.9488	7a		ply				ply
.9489	18		clc				clc
.948a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/chr.asm

.8846					ChrUnary:
.8846	fa		plx				plx 								; restore stack pos
.8847	20 07 8a	jsr $8a07			jsr 	Evaluate8BitInteger			; get value
.884a	48		pha				pha
.884b	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.884e	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8850	20 a9 94	jsr $94a9			jsr 	StringTempAllocate
.8853	68		pla				pla 								; write number to it
.8854	20 e7 94	jsr $94e7			jsr 	StringTempWrite
.8857	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/spc.asm

.8858					SpcUnary:
.8858	fa		plx				plx 								; restore stack pos
.8859	20 07 8a	jsr $8a07			jsr 	Evaluate8BitInteger			; get value
.885c	5a		phy				phy
.885d	48		pha				pha 								; save count
.885e	20 a9 94	jsr $94a9			jsr 	StringTempAllocate
.8861	7a		ply				ply 								; to do count in Y
.8862					_SpcLoop:
.8862	c0 00		cpy #$00			cpy 	#0
.8864	f0 08		beq $886e			beq 	_SpcExit
.8866	a9 20		lda #$20			lda 	#32
.8868	20 e7 94	jsr $94e7			jsr 	StringTempWrite
.886b	88		dey				dey
.886c	80 f4		bra $8862			bra 	_SPCLoop
.886e					_SpcExit:
.886e	7a		ply				ply
.886f	20 63 8f	jsr $8f63			jsr 	CheckRightBracket
.8872	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/str.asm

.8873					Unary_Str:
.8873	fa		plx				plx
.8874	20 c3 89	jsr $89c3			jsr 	EvaluateNumber  			; get number
.8877	20 63 8f	jsr $8f63			jsr 	CheckRightBracket 			; closing bracket
.887a	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.887c	20 95 88	jsr $8895			jsr 	ConvertNumberToString 		; do the conversion.
.887f	a9 21		lda #$21			lda		#33 						; create buffer
.8881	20 a9 94	jsr $94a9			jsr 	StringTempAllocate 			; allocate memory
.8884	da		phx				phx
.8885	a2 00		ldx #$00			ldx 	#0
.8887					_USCopy:
.8887	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.888a	20 e7 94	jsr $94e7			jsr 	StringTempWrite
.888d	e8		inx				inx
.888e	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8891	d0 f4		bne $8887			bne 	_USCopy
.8893	fa		plx				plx
.8894	60		rts				rts
.8895					ConvertNumberToString:
.8895	5a		phy				phy 								; save code position
.8896	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8899	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.889c	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.889f	10 0a		bpl $88ab			bpl 	_CNTSNotNegative
.88a1	29 7f		and #$7f			and 	#$7F 						; make +ve
.88a3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88a6	a9 2d		lda #$2d			lda 	#"-"
.88a8	20 0c 89	jsr $890c			jsr 	WriteDecimalBuffer
.88ab					_CNTSNotNegative:
.88ab	e8		inx				inx 								; round up
.88ac	a9 01		lda #$01			lda 	#1
.88ae	20 71 8a	jsr $8a71			jsr 	NSMSetByte
.88b1	ca		dex				dex
.88b2	bd 28 06	lda $0628,x			lda		NSExponent,x
.88b5	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.88b8	a9 08		lda #$08			lda 	#NSTFloat
.88ba	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.88bd	20 d0 91	jsr $91d0			jsr 	FloatAdd
.88c0	20 ee 88	jsr $88ee			jsr 	MakePlusTwoString
.88c3	20 ae 92	jsr $92ae			jsr 	FloatFractionalPart 		; get the fractional part
.88c6	20 72 93	jsr $9372			jsr 	NSNormalise					; normalise , exit if zero
.88c9	f0 21		beq $88ec			beq 	_CNTSExit
.88cb	a9 2e		lda #$2e			lda 	#"."
.88cd	20 0c 89	jsr $890c			jsr 	WriteDecimalBuffer 			; write decimal place
.88d0					_CNTSDecimal:
.88d0	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.88d3	30 17		bmi $88ec			bmi 	_CNTSExit
.88d5	e8		inx				inx 								; x 10.0
.88d6	a9 0a		lda #$0a			lda 	#10
.88d8	20 71 8a	jsr $8a71			jsr 	NSMSetByte
.88db	a9 08		lda #$08			lda 	#NSTFloat
.88dd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88e0	ca		dex				dex
.88e1	20 3b 93	jsr $933b			jsr 	FloatMultiply
.88e4	20 ee 88	jsr $88ee			jsr 	MakePlusTwoString
.88e7	20 ae 92	jsr $92ae			jsr 	FloatFractionalPart 		; get the fractional part
.88ea	80 e4		bra $88d0			bra 	_CNTSDecimal 				; keep going.
.88ec					_CNTSExit:
.88ec	7a		ply				ply
.88ed	60		rts				rts
.88ee					MakePlusTwoString:
.88ee	da		phx				phx
.88ef	20 46 8a	jsr $8a46			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.88f2	e8		inx				inx 								; access it
.88f3	e8		inx				inx
.88f4	20 11 93	jsr $9311			jsr 	FloatIntegerPart 			; make it an integer
.88f7	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.88f9	20 7a 91	jsr $917a			jsr 	ConvertInt32
.88fc	a2 00		ldx #$00			ldx	 	#0
.88fe					_MPTSCopy:
.88fe	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8901	20 0c 89	jsr $890c			jsr 	WriteDecimalBuffer
.8904	e8		inx				inx
.8905	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8908	d0 f4		bne $88fe			bne 	_MPTSCopy
.890a	fa		plx				plx
.890b	60		rts				rts
.890c					WriteDecimalBuffer:
.890c	da		phx				phx
.890d	ae 14 07	ldx $0714			ldx 	dbOffset
.8910	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8913	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8916	ee 14 07	inc $0714			inc 	dbOffset
.8919	fa		plx				plx
.891a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/substring.asm

.891b					Unary_Left:
.891b	fa		plx				plx
.891c	18		clc				clc 								; only one parameter
.891d	20 92 89	jsr $8992			jsr 	SubstringInitial 			; set up.
.8920	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8923	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8926	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8929	80 2c		bra $8957			bra 	SubstringMain
.892b					Unary_Right:
.892b	fa		plx				plx
.892c	18		clc				clc 								; only one parameter
.892d	20 92 89	jsr $8992			jsr 	SubstringInitial 			; set up.
.8930	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8933	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8936	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8939	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.893c	b0 02		bcs $8940			bcs 	_URNotUnderflow
.893e	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8940					_URNotUnderFlow:
.8940	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8943	80 12		bra $8957			bra 	SubStringMain
.8945					Unary_Mid:
.8945	fa		plx				plx
.8946	38		sec				sec 								; two parameters
.8947	20 92 89	jsr $8992			jsr 	SubstringInitial 			; set up.
.894a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.894d	f0 05		beq $8954			beq 	_UMError
.894f	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8952	80 03		bra $8957			bra 	SubStringMain
.8954					_UMError:
.8954	4c 3c 95	jmp $953c			jmp 	ArgumentError
.8957					SubStringMain:
.8957	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.895a	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.895d	b0 2d		bcs $898c			bcs 	_SSMNull 					; if so, return an empty string.
.895f	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8962	f0 28		beq $898c			beq 	_SSMNull 					; return empty string.
.8964	18		clc				clc 								; add the offset +1 to the address and
.8965	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8968	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.896b	85 36		sta $36				sta 	zTemp0
.896d	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8970	69 00		adc #$00			adc 	#0
.8972	85 37		sta $37				sta 	zTemp0+1
.8974					_SSMNoCarry:
.8974	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8977	20 a9 94	jsr $94a9			jsr 	StringTempAllocate 			; allocate that many characters
.897a	5a		phy				phy 								; save Y
.897b	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.897d					_SSMCopy:
.897d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.897f	f0 09		beq $898a			beq 	_SSMEString 				; no more to copy
.8981	20 e7 94	jsr $94e7			jsr 	StringTempWrite 			; and write it out.
.8984	c8		iny				iny
.8985	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8988	d0 f3		bne $897d			bne 	_SSMCopy
.898a					_SSMEString:
.898a	7a		ply				ply
.898b					_SSMExit:
.898b	60		rts				rts
.898c					_SSMNull:
.898c	a9 00		lda #$00			lda 	#0
.898e	20 a9 94	jsr $94a9			jsr 	StringTempAllocate
.8991	60		rts				rts
.8992					SubstringInitial:
.8992	da		phx				phx 								; save initial stack position
.8993	08		php				php 								; save carry on stack indicating 2 parameters
.8994	20 ce 89	jsr $89ce			jsr 	EvaluateString 				; get a string
.8997	5a		phy				phy 								; calculate length to exponent.
.8998	a0 ff		ldy #$ff			ldy 	#$FF
.899a					_SIFindLength:
.899a	c8		iny				iny
.899b	b1 36		lda ($36),y			lda 	(zTemp0),y
.899d	d0 fb		bne $899a			bne 	_SIFindLength
.899f	98		tya				tya
.89a0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.89a3	7a		ply				ply
.89a4	e8		inx				inx
.89a5	20 6b 8f	jsr $8f6b			jsr 	CheckComma 					; comma next
.89a8	20 07 8a	jsr $8a07			jsr 	Evaluate8BitInteger 		; get next parameter
.89ab	28		plp				plp 								; is it the last parameter ?
.89ac	90 07		bcc $89b5			bcc 	_SSIExit 					; if so, exit.
.89ae	e8		inx				inx
.89af	20 6b 8f	jsr $8f6b			jsr 	CheckComma 					; comma next
.89b2	20 07 8a	jsr $8a07			jsr 	Evaluate8BitInteger 		; get last parameter
.89b5					_SSIExit:
.89b5	fa		plx				plx
.89b6	20 63 8f	jsr $8f63			jsr 	CheckRightBracket 			; check closing bracket
.89b9	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/exprhelper.asm

.89ba					EvaluateValue:
.89ba	48		pha				pha
.89bb	20 c4 84	jsr $84c4			jsr		EvaluateExpression 			; expression
.89be	20 06 85	jsr $8506			jsr 	Dereference					; derefernce it
.89c1	68		pla				pla
.89c2	60		rts				rts
.89c3					EvaluateNumber:
.89c3	20 ba 89	jsr $89ba			jsr 	EvaluateValue 				; get a value
.89c6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.89c9	29 10		and #$10			and 	#NSBIsString
.89cb	d0 16		bne $89e3			bne 	HelperTypeError
.89cd	60		rts				rts
.89ce					EvaluateString:
.89ce	20 ba 89	jsr $89ba			jsr 	EvaluateValue 				; get a value
.89d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.89d4	29 10		and #$10			and 	#NSBIsString
.89d6	f0 0b		beq $89e3			beq 	HelperTypeError
.89d8					CopyAddressToTemp0:
.89d8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.89db	85 36		sta $36				sta 	zTemp0
.89dd	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89e0	85 37		sta $37				sta 	zTemp0+1
.89e2	60		rts				rts
.89e3					HelperTypeError:
.89e3	4c 37 95	jmp $9537			jmp 	TypeError
.89e6					EvaluateInteger:
.89e6	20 c3 89	jsr $89c3			jsr 	EvaluateNumber
.89e9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.89ec	d0 0a		bne $89f8			bne 	HelperValueError 			; if not, it's a float.
.89ee	60		rts				rts
.89ef					EvaluateUnsignedInteger:
.89ef	20 e6 89	jsr $89e6			jsr 	EvaluateInteger 			; check integer is +ve
.89f2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.89f5	30 01		bmi $89f8			bmi 	HelperValueError
.89f7	60		rts				rts
.89f8					HelperValueError:
.89f8	4c 3c 95	jmp $953c			jmp 	ArgumentError
.89fb					Evaluate16BitInteger:
.89fb	20 ef 89	jsr $89ef			jsr	 	EvaluateUnsignedInteger		; get integer
.89fe	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8a01	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8a04	d0 f2		bne $89f8			bne 	HelperValueError
.8a06	60		rts				rts
.8a07					Evaluate8BitInteger:
.8a07	20 ef 89	jsr $89ef			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8a0a	d0 ec		bne $89f8			bne 	HelperValueError
.8a0c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8a0f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8a12	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8a15	d0 e1		bne $89f8			bne 	HelperValueError
.8a17	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8a1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/utility.asm

.8a1b					NSMNegate:
.8a1b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8a1e	49 80		eor #$80			eor 	#NSBIsNegative
.8a20	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a23	60		rts				rts
.8a24					NSMNegateMantissa:
.8a24	38		sec				sec
.8a25	a9 00		lda #$00			lda 	#0
.8a27	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8a2a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a2d	a9 00		lda #$00			lda 	#0
.8a2f	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8a32	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a35	a9 00		lda #$00			lda 	#0
.8a37	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8a3a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a3d	a9 00		lda #$00			lda 	#0
.8a3f	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8a42	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a45	60		rts				rts
.8a46					NSMShiftUpTwo:
.8a46	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8a49	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a4c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a4f	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8a52	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8a55	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8a58	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8a5b	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8a5e	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8a61	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8a64	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8a67	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8a6a	60		rts				rts
.8a6b					NSMSetZeroMantissaOnly:
.8a6b	a9 00		lda #$00			lda 	#0
.8a6d	80 08		bra $8a77			bra 	NSMSetMantissa
.8a6f					NSMSetZero:
.8a6f	a9 00		lda #$00			lda 	#0
.8a71					NSMSetByte:
.8a71	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8a74	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8a77					NSMSetMantissa:
.8a77	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8a7a	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8a7d	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a80	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a83	60		rts				rts
.8a84					NSMShiftLeft:
.8a84	18		clc				clc
.8a85					NSMRotateLeft:
.8a85	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8a88	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8a8b	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8a8e	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8a91	60		rts				rts
.8a92					NSMShiftRight:
.8a92	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8a95	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8a98	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8a9b	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8a9e	60		rts				rts
.8a9f					NSMIsZero:
.8a9f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8aa2	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8aa5	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8aa8	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8aab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/strings/stringalloc.asm

.948b					StringSystemInitialise:
.948b	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.948d	8d 0e 07	sta $070e			sta 	0+StringMemory
.9490	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.9492	8d 0f 07	sta $070f			sta 	1+StringMemory
.9495	60		rts				rts
.9496					StringSpaceInitialise:
.9496	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9498	8d 10 07	sta $0710			sta 	StringInitialised
.949b	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.949e	8d 11 07	sta $0711			sta 	StringTempPointer
.94a1	ad 0f 07	lda $070f			lda 	StringMemory+1
.94a4	3a		dec a				dec 	a
.94a5	8d 12 07	sta $0712			sta 	StringTempPointer+1
.94a8	60		rts				rts
.94a9					StringTempAllocate:
.94a9	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.94ab	b0 35		bcs $94e2			bcs 	_STALength
.94ad	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.94b0	30 05		bmi $94b7			bmi 	_STAAllocate
.94b2	48		pha				pha 								; save value to subtract.
.94b3	20 96 94	jsr $9496			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.94b6	68		pla				pla 								; restore it
.94b7					_STAAllocate:
.94b7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.94b9	18		clc				clc  								; deliberate allows one more
.94ba	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.94bd	8d 11 07	sta $0711			sta 	StringTempPointer
.94c0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.94c3	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.94c5	ad 12 07	lda $0712			lda 	StringTempPointer+1
.94c8	69 ff		adc #$ff			adc 	#$FF
.94ca	8d 12 07	sta $0712			sta 	StringTempPointer+1
.94cd	85 3d		sta $3d				sta 	zsTemp+1
.94cf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94d2	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.94d5	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.94d8	a9 10		lda #$10			lda 	#NSTString
.94da	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94dd	a9 00		lda #$00			lda 	#0 							; clear the target string
.94df	92 3c		sta ($3c)			sta 	(zsTemp)
.94e1	60		rts				rts
.94e2					_STALength:
.94e2	a9 09		lda #$09		lda	#9
.94e4	4c 1b 82	jmp $821b		jmp	ErrorHandler
.94e7					StringTempWrite:
.94e7	48		pha				pha
.94e8	92 3c		sta ($3c)			sta 	(zsTemp)
.94ea	e6 3c		inc $3c				inc 	zsTemp
.94ec	d0 02		bne $94f0			bne 	_STWNoCarry
.94ee	e6 3d		inc $3d				inc 	zsTemp+1
.94f0					_STWNoCarry:
.94f0	a9 00		lda #$00			lda 	#0
.94f2	92 3c		sta ($3c)			sta 	(zsTemp)
.94f4	68		pla				pla
.94f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/backload.asm

.8aac					BackloadProgram:
.8aac	a2 ff		ldx #$ff			ldx 	#$FF
.8aae	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8ab1	20 d8 8a	jsr $8ad8			jsr 	BLReadByte
.8ab4	30 1e		bmi $8ad4			bmi 	_BPExit
.8ab6					_BPCopy:
.8ab6	e8		inx				inx  								; copy byte in
.8ab7	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8aba	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8abd	20 d8 8a	jsr $8ad8			jsr 	BLReadByte 					; read next byte
.8ac0	30 0a		bmi $8acc			bmi 	_BPEndLine 					; -ve = EOL
.8ac2	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8ac4	d0 02		bne $8ac8			bne 	_BPNotTab
.8ac6	a9 20		lda #$20			lda 	#' '
.8ac8					_BPNotTab:
.8ac8	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8aca	b0 ea		bcs $8ab6			bcs 	_BPCopy
.8acc					_BPEndLine:
.8acc	20 94 8c	jsr $8c94			jsr 	TokeniseLine 				; tokenise the line.
.8acf	20 17 81	jsr $8117			jsr 	MemoryAppend 				; append to current program
.8ad2	80 d8		bra $8aac			bra 	BackloadProgram
.8ad4					_BPExit:
.8ad4	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variables etc.
.8ad7	60		rts				rts
.8ad8					BLReadByte:
.8ad8					_BLLoad:
.8ad8	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8adb	ee d9 8a	inc $8ad9			inc 	_BLLoad+1
.8ade	d0 03		bne $8ae3			bne 	_BLNoCarry
.8ae0	ee da 8a	inc $8ada			inc 	_BLLoad+2
.8ae3					_BLNoCarry:
.8ae3	c9 00		cmp #$00			cmp 	#0
.8ae5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/searchtokens.asm

.8ae6					TokeniseSearchTable:
.8ae6	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8ae8	85 36		sta $36				sta 	zTemp0
.8aea	a0 00		ldy #$00			ldy 	#0
.8aec	a9 80		lda #$80			lda 	#$80 						; token #
.8aee	85 38		sta $38				sta 	zTemp1
.8af0					_TSTLoop:
.8af0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8af2	30 49		bmi $8b3d			bmi 	_TSTFail 					; -ve = end of table
.8af4	f0 2e		beq $8b24			beq 	_TSTNext 					; zero, check next it's a dummy
.8af6	c8		iny				iny 								; get the hash
.8af7	b1 36		lda ($36),y			lda 	(zTemp0),y
.8af9	88		dey				dey
.8afa	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8afd	d0 25		bne $8b24			bne 	_TSTNext
.8aff	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8b02	38		sec				sec
.8b03	ed 00 07	sbc $0700			sbc 	identStart
.8b06	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8b08	d0 1a		bne $8b24			bne 	_TSTNext
.8b0a	5a		phy				phy 								; save Y , we might fail
.8b0b	c8		iny				iny 								; point to text
.8b0c	c8		iny				iny
.8b0d	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8b10					_TSTCompareName:
.8b10	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8b13	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8b15	d0 0c		bne $8b23			bne 	_TSTNextPullY 				; fail, pullY and do next
.8b17	e8		inx				inx
.8b18	c8		iny				iny
.8b19	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8b1c	d0 f2		bne $8b10			bne 	_TSTCompareName
.8b1e	7a		ply				ply 								; throw Y
.8b1f	a5 38		lda $38				lda 	zTemp1 						; get token #
.8b21	38		sec				sec 								; return with CS = passed.
.8b22	60		rts				rts
.8b23					_TSTNextPullY:
.8b23	7a		ply				ply 								; restore current, fall through.
.8b24					_TSTNext:
.8b24	e6 38		inc $38				inc 	zTemp1 						; token counter
.8b26	98		tya				tya
.8b27	18		clc				clc
.8b28	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8b2a	1a		inc a				inc 	a 							; +1
.8b2b	1a		inc a				inc 	a 							; +2
.8b2c	a8		tay				tay
.8b2d	10 c1		bpl $8af0			bpl 	_TSTLoop 					; if Y < $80 loop back
.8b2f	98		tya				tya 								; add Y to zTemp0 and reset Y
.8b30	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8b32	18		clc				clc  								; but have tables > 255 bytes
.8b33	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8b35	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8b37	90 b7		bcc $8af0			bcc 	_TSTLoop
.8b39	e6 37		inc $37				inc 	zTemp0+1
.8b3b	80 b3		bra $8af0			bra 	_TSTLoop
.8b3d					_TSTFail:
.8b3d	18		clc				clc
.8b3e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/tokenise.asm


;******  Processing file: ./core/tokeniser/../../generated/kwdtext.dat

.8b3f					KeywordSet0:
>8b3f	00 65					.text	0,$65,""               ; $80 !0:EOF
>8b41	00 58					.text	0,$58,""               ; $81 !1:SH1
>8b43	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8b45	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8b4b	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8b53	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8b59	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8b60	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8b67	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8b6e	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8b74	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8b7c	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8b84	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8b8a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8b91	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8b97	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8b9f	28
>8ba0	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8ba6	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8bac	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8bb2	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8bb9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8bbf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8bc5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8bca	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8bce	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8bd4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8bdc	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8be3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8bea	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8bf2	43
>8bf3	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8bf9	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8c00	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8c06	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8c0c	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8c11	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8c17	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8c1c	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8c23	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8c29	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8c2e	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8c35	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8c3b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8c40	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8c48	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8c4e	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8c52	ff					.text	$FF
.8c53					KeywordSet1:
>8c53	00 65					.text	0,$65,""               ; $80 !0:EOF
>8c55	00 58					.text	0,$58,""               ; $81 !1:SH1
>8c57	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8c59	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8c61	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8c68	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8c6d	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8c73	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8c78	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8c80	45
>8c81	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8c86	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8c8c	ff					.text	$FF
.8c8d					KeywordSet2:
>8c8d	00 65					.text	0,$65,""               ; $80 !0:EOF
>8c8f	00 58					.text	0,$58,""               ; $81 !1:SH1
>8c91	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8c93	ff					.text	$FF

;******  Return to file: ./core/tokeniser/tokenise.asm

.8c94					TokeniseLine:
.8c94	20 1c 8e	jsr $8e1c			jsr 	FixLineBufferCase 			; fix line case
.8c97	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8c99	8d 15 07	sta $0715			sta 	tokenOffset
.8c9c	9c 16 07	stz $0716			stz 	tokenLineNumber
.8c9f	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8ca2	a2 ff		ldx #$ff			ldx 	#$FF
.8ca4					_TKFindFirst:
.8ca4	e8		inx				inx
.8ca5	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8ca8	f0 79		beq $8d23			beq 	_TKExit
.8caa	c9 20		cmp #$20			cmp 	#' '
.8cac	90 f6		bcc $8ca4			bcc 	_TKFindFirst
.8cae	c9 30		cmp #$30			cmp 	#'0'
.8cb0	90 07		bcc $8cb9			bcc 	_TKNoLineNumber
.8cb2	c9 3a		cmp #$3a			cmp 	#'9'+1
.8cb4	b0 03		bcs $8cb9			bcs 	_TKNoLineNumber
.8cb6	20 46 8e	jsr $8e46			jsr 	TokeniseExtractLineNumber
.8cb9					_TKNoLineNumber:
.8cb9					_TKTokeniseLoop:
.8cb9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8cbc	f0 65		beq $8d23			beq 	_TKExit
.8cbe	e8		inx				inx
.8cbf	c9 20		cmp #$20			cmp 	#' '
.8cc1	f0 f6		beq $8cb9			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8cc3	ca		dex				dex 								; undo last get, A contains character, X is position.
.8cc4	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8cc6	f0 61		beq $8d29			beq 	_TKTokeniseIdentifier
.8cc8	c9 41		cmp #$41			cmp 	#'A'
.8cca	90 04		bcc $8cd0			bcc 	_TKTokenisePunctuation
.8ccc	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8cce	90 59		bcc $8d29			bcc 	_TKTokeniseIdentifier
.8cd0					_TKTokenisePunctuation:
.8cd0	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8cd2	f0 27		beq $8cfb			beq 	_TKString
.8cd4	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8cd6	f0 28		beq $8d00			beq 	_TKHexConstant
.8cd8	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8cda	f0 29		beq $8d05			beq 	_TKCheckDouble
.8cdc	c9 3e		cmp #$3e			cmp 	#'>'
.8cde	f0 25		beq $8d05			beq 	_TKCheckDouble
.8ce0					_TKStandardPunctuation:
.8ce0	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8ce3	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8ce5	90 0e		bcc $8cf5			bcc 	_TKNoShift
.8ce7	48		pha				pha 								; save
.8ce8	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8cea	85 36		sta $36				sta 	zTemp0
.8cec	68		pla				pla
.8ced	29 20		and #$20			and 	#32 						; bit 5
.8cef	4a		lsr a				lsr 	a 							; shift into bit 3
.8cf0	4a		lsr a				lsr 	a
.8cf1	05 36		ora $36				ora 	zTemp0
.8cf3	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8cf5					_TKNoShift:
.8cf5	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte 			; write the punctuation character
.8cf8	e8		inx				inx 								; consume the character
.8cf9	80 be		bra $8cb9			bra 	_TKTokeniseLoop 			; and loop round again.
.8cfb					_TKString:
.8cfb	20 ab 8d	jsr $8dab			jsr 	TokeniseString
.8cfe	80 b9		bra $8cb9			bra 	_TKTokeniseLoop
.8d00					_TKHexConstant:
.8d00	20 e6 8d	jsr $8de6			jsr 	TokeniseHexConstant
.8d03	80 b4		bra $8cb9			bra 	_TKTokeniseLoop
.8d05					_TKCheckDouble:
.8d05	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8d08	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8d0a	90 d4		bcc $8ce0			bcc 	_TKStandardPunctuation
.8d0c	c9 3f		cmp #$3f			cmp 	#'>'+1
.8d0e	b0 d0		bcs $8ce0			bcs 	_TKStandardPunctuation
.8d10	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8d13	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8d15	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8d16	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8d19	38		sec				sec
.8d1a	e9 3c		sbc #$3c			sbc 	#'<'
.8d1c	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8d1f	e8		inx				inx 								; consume both
.8d20	e8		inx				inx
.8d21	80 96		bra $8cb9			bra 	_TKTokeniseLoop
.8d23	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8d25	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8d28	60		rts				rts
.8d29					_TKTokeniseIdentifier:
.8d29	8e 00 07	stx $0700			stx 	identStart 					; save start
.8d2c	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8d2f					_TKCheckLoop:
.8d2f	e8		inx				inx 								; look at next, we know first is identifier.
.8d30	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8d33	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8d35	f0 f8		beq $8d2f			beq 	_TKCheckLoop
.8d37	c9 30		cmp #$30			cmp	 	#"0"
.8d39	90 0c		bcc $8d47			bcc 	_TKEndIdentifier
.8d3b	c9 3a		cmp #$3a			cmp 	#"9"+1
.8d3d	90 f0		bcc $8d2f			bcc 	_TKCheckLoop
.8d3f	c9 41		cmp #$41			cmp	 	#"A"
.8d41	90 04		bcc $8d47			bcc 	_TKEndIdentifier
.8d43	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8d45	90 e8		bcc $8d2f			bcc 	_TKCheckLoop
.8d47					_TKEndIdentifier:
.8d47	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8d4a	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8d4c	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8d4e	f0 06		beq $8d56			beq 	_TKHasTypeCharacter
.8d50	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8d52	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8d54	d0 07		bne $8d5d			bne 	_TKNoTypeCharacter
.8d56					_TKHasTypeCharacter:
.8d56	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8d59	e8		inx				inx 								; read next
.8d5a	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8d5d					_TKNoTypeCharacter:
.8d5d	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8d5f	d0 09		bne $8d6a			bne 	_TKNoArray
.8d61	e8		inx				inx 								; skip the (
.8d62	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8d65	09 04		ora #$04			ora 	#$04
.8d67	8d 04 07	sta $0704			sta 	identTypeByte
.8d6a					_TKNoArray:
.8d6a	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8d6d	20 07 8e	jsr $8e07			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8d70	a0 8b		ldy #$8b			ldy 	#(KeywordSet0) >> 8
.8d72	a9 3f		lda #$3f			lda 	#(KeywordSet0) & $FF
.8d74	20 e6 8a	jsr $8ae6			jsr 	TokeniseSearchTable
.8d77	a2 00		ldx #$00			ldx 	#0
.8d79	b0 1f		bcs $8d9a			bcs 	_TKFoundToken
.8d7b	a0 8c		ldy #$8c			ldy 	#(KeywordSet1) >> 8
.8d7d	a9 53		lda #$53			lda 	#(KeywordSet1) & $FF
.8d7f	20 e6 8a	jsr $8ae6			jsr 	TokeniseSearchTable
.8d82	a2 81		ldx #$81			ldx 	#$81
.8d84	b0 14		bcs $8d9a			bcs 	_TKFoundToken
.8d86	a0 8c		ldy #$8c			ldy 	#(KeywordSet1) >> 8
.8d88	a9 53		lda #$53			lda 	#(KeywordSet1) & $FF
.8d8a	20 e6 8a	jsr $8ae6			jsr 	TokeniseSearchTable
.8d8d	a2 82		ldx #$82			ldx 	#$82
.8d8f	b0 09		bcs $8d9a			bcs 	_TKFoundToken
.8d91	20 97 8e	jsr $8e97			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8d94	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8d97	4c b9 8c	jmp $8cb9			jmp 	_TKTokeniseLoop 			; and go round again.
.8d9a					_TKFoundToken:
.8d9a	48		pha				pha 								; save token
.8d9b	8a		txa				txa 								; shift in X, is there one ?
.8d9c	f0 03		beq $8da1			beq 	_TKNoTShift
.8d9e	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte 			; if so, write it out
.8da1					_TKNoTShift:
.8da1	68		pla				pla 								; restore and write token
.8da2	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8da5	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8da8	4c b9 8c	jmp $8cb9			jmp 	_TKTokeniseLoop 			; and go round again.
.8dab					TokeniseString:
.8dab	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8dad	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8db0	e8		inx				inx									; start of quoted string.
.8db1	da		phx				phx 								; push start of string on top
.8db2	ca		dex				dex
.8db3					_TSFindEnd:
.8db3	e8		inx				inx
.8db4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8db7	f0 04		beq $8dbd			beq 	_TSEndOfString
.8db9	c9 22		cmp #$22			cmp 	#'"'
.8dbb	d0 f6		bne $8db3			bne 	_TSFindEnd
.8dbd					_TSEndOfString:
.8dbd	7a		ply				ply  								; so now Y is first character, X is character after end.
.8dbe	48		pha				pha 								; save terminating character
.8dbf	20 c7 8d	jsr $8dc7			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8dc2	68		pla				pla 								; terminating character
.8dc3	f0 01		beq $8dc6			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8dc5	e8		inx				inx
.8dc6					_TSNotQuote:
.8dc6	60		rts				rts
.8dc7					TOWriteBlockXY:
.8dc7	86 36		stx $36				stx 	zTemp0 						; write end character
.8dc9	98		tya				tya
.8dca	49 ff		eor #$ff			eor 	#$FF
.8dcc	38		sec				sec
.8dcd	65 36		adc $36				adc 	zTemp0
.8dcf	1a		inc a				inc 	a 							; one extra for NULL
.8dd0	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8dd3					_TOBlockLoop:
.8dd3	c4 36		cpy $36				cpy 	zTemp0
.8dd5	f0 09		beq $8de0			beq 	_TOBlockExit
.8dd7	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.8dda	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8ddd	c8		iny				iny
.8dde	80 f3		bra $8dd3			bra 	_TOBlockLoop
.8de0					_TOBlockExit:
.8de0	a9 00		lda #$00			lda 	#0
.8de2	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8de5	60		rts				rts
.8de6					TokeniseHexConstant:
.8de6	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8de8	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8deb	e8		inx				inx									; start of quoted string.
.8dec	da		phx				phx 								; push start of constant on top
.8ded	ca		dex				dex
.8dee					_THFindLoop:
.8dee	e8		inx				inx
.8def	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8df2	c9 30		cmp #$30			cmp 	#"0"
.8df4	90 0c		bcc $8e02			bcc 	_THFoundEnd
.8df6	c9 3a		cmp #$3a			cmp 	#"9"+1
.8df8	90 f4		bcc $8dee			bcc 	_THFindLoop
.8dfa	c9 41		cmp #$41			cmp 	#"A"
.8dfc	90 04		bcc $8e02			bcc 	_THFoundEnd
.8dfe	c9 47		cmp #$47			cmp 	#"F"+1
.8e00	90 ec		bcc $8dee			bcc 	_THFindLoop
.8e02					_THFoundEnd:
.8e02	7a		ply				ply 								; restore start
.8e03	20 c7 8d	jsr $8dc7			jsr 	TOWriteBlockXY 				; output the block
.8e06	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/utility.asm

.8e07					TokeniseCalculateHash:
.8e07	da		phx				phx
.8e08	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8e0b	a9 00		lda #$00			lda 	#0
.8e0d					_TCHLoop:
.8e0d	18		clc				clc
.8e0e	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.8e11	e8		inx				inx
.8e12	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8e15	d0 f6		bne $8e0d			bne 	_TCHLoop
.8e17	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8e1a	fa		plx				plx
.8e1b	60		rts				rts
.8e1c					FixLineBufferCase:
.8e1c	a2 00		ldx #$00			ldx 	#0
.8e1e					_FLBCLoop:
.8e1e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.8e21	f0 22		beq $8e45			beq 	_FLBCExit 					; end of string.
.8e23	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8e25	f0 11		beq $8e38			beq 	_FLBCInQuotes
.8e27	e8		inx				inx
.8e28	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8e2a	90 f2		bcc $8e1e			bcc 	_FLBCLoop
.8e2c	c9 7b		cmp #$7b			cmp 	#'z'+1
.8e2e	b0 ee		bcs $8e1e			bcs 	_FLBCLoop
.8e30	38		sec				sec 								; make U/C
.8e31	e9 20		sbc #$20			sbc 	#32
.8e33	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.8e36	80 e6		bra $8e1e			bra 	_FLBCLoop
.8e38					_FLBCInQuotes:
.8e38	e8		inx				inx 								; advance
.8e39	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.8e3c	f0 07		beq $8e45			beq 	_FLBCExit 					; exit on EOS
.8e3e	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8e40	d0 f6		bne $8e38			bne 	_FLBCInQuotes
.8e42	e8		inx				inx 								; skip over it
.8e43	80 d9		bra $8e1e			bra 	_FLBCLoop
.8e45					_FLBCExit:
.8e45	60		rts				rts
.8e46					TokeniseExtractLineNumber:
.8e46	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.8e49	48		pha				pha
.8e4a	ad 16 07	lda $0716			lda 	tokenLineNumber
.8e4d	48		pha				pha
.8e4e	20 84 8e	jsr $8e84			jsr 	_TELNTimes2 				; line # x 4
.8e51	20 84 8e	jsr $8e84			jsr 	_TELNTimes2 				; line # x 2
.8e54	18		clc				clc 								; add stacked value
.8e55	68		pla				pla
.8e56	6d 16 07	adc $0716			adc 	tokenLineNumber
.8e59	8d 16 07	sta $0716			sta 	tokenLineNumber
.8e5c	68		pla				pla
.8e5d	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.8e60	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.8e63	20 84 8e	jsr $8e84			jsr 	_TELNTimes2 				; line # x 10
.8e66	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.8e69	e8		inx				inx
.8e6a	29 0f		and #$0f			and 	#15 						; add to line #
.8e6c	18		clc				clc
.8e6d	6d 16 07	adc $0716			adc 	tokenLineNumber
.8e70	8d 16 07	sta $0716			sta 	tokenLineNumber
.8e73	90 03		bcc $8e78			bcc 	_TLENNoCarry
.8e75	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.8e78					_TLENNoCarry:
.8e78	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.8e7b	c9 30		cmp #$30			cmp 	#'0'
.8e7d	90 04		bcc $8e83			bcc 	_TLENExit
.8e7f	c9 3a		cmp #$3a			cmp 	#'9'+1
.8e81	90 c3		bcc $8e46			bcc 	TokeniseExtractLineNumber
.8e83					_TLENExit:
.8e83	60		rts				rts
.8e84					_TELNTimes2:
.8e84	0e 16 07	asl $0716			asl 	tokenLineNumber
.8e87	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.8e8a	60		rts				rts
.8e8b					TokeniseWriteByte:
.8e8b	da		phx				phx
.8e8c	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.8e8f	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.8e92	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.8e95	fa		plx				plx
.8e96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/variablerecord.asm

.8e97					CheckCreateVariableRecord:
.8e97	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8e99	85 36		sta $36				sta 	0+zTemp0
.8e9b	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8e9d	85 37		sta $37				sta 	1+zTemp0
.8e9f	20 5b 81	jsr $815b			jsr 	VariableOpen 				; make variable space available
.8ea2					_CCVSearch:
.8ea2	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8ea4	f0 2c		beq $8ed2			beq 	_CCVFail
.8ea6	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8ea8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8eaa	cd 03 07	cmp $0703			cmp 	identHash
.8ead	d0 16		bne $8ec5			bne 	_CCVNext
.8eaf	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8eb1	ae 00 07	ldx $0700			ldx 	identStart
.8eb4					_CCVCompare:
.8eb4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8eb7	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8eb9	e8		inx				inx 								; advance pointers
.8eba	c8		iny				iny
.8ebb	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8ebc	d0 07		bne $8ec5			bne 	_CCVNext  					; didn't match go to next.
.8ebe	90 f4		bcc $8eb4			bcc 	_CCVCompare 				; not finished yet.
.8ec0	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8ec3	f0 41		beq $8f06			beq 	_CCVFound 					; yes, we were successful
.8ec5					_CCVNext:
.8ec5	18		clc				clc
.8ec6	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8ec8	65 36		adc $36				adc 	zTemp0
.8eca	85 36		sta $36				sta 	zTemp0
.8ecc	90 d4		bcc $8ea2			bcc 	_CCVSearch
.8ece	e6 37		inc $37				inc 	zTemp0+1
.8ed0	80 d0		bra $8ea2			bra 	_CCVSearch
.8ed2					_CCVFail:
.8ed2	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8ed4	ad 03 07	lda $0703			lda 	identHash
.8ed7	91 36		sta ($36),y			sta 	(zTemp0),y
.8ed9	c8		iny				iny 								; offset 2 is the type byte
.8eda	ad 04 07	lda $0704			lda 	identTypeByte
.8edd	91 36		sta ($36),y			sta 	(zTemp0),y
.8edf	c8		iny				iny
.8ee0					_CCVData:
.8ee0	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8ee2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ee4	c8		iny				iny
.8ee5	c0 08		cpy #$08			cpy 	#8
.8ee7	90 f7		bcc $8ee0			bcc 	_CCVData
.8ee9	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8eec					_CCVCopyName:
.8eec	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8eef	91 36		sta ($36),y			sta 	(zTemp0),y
.8ef1	e8		inx				inx
.8ef2	c8		iny				iny
.8ef3	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8ef6	d0 f4		bne $8eec			bne 	_CCVCopyName
.8ef8	98		tya				tya 								; patch offset
.8ef9	92 36		sta ($36)			sta 	(zTemp0)
.8efb	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8efd	91 36		sta ($36),y			sta 	(zTemp0),y
.8eff	88		dey				dey
.8f00	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8f02	09 80		ora #$80			ora 	#$80
.8f04	91 36		sta ($36),y			sta 	(zTemp0),y
.8f06					_CCVFound:
.8f06	20 5c 81	jsr $815c			jsr 	VariableClose 				; map out variables, perhaps.
.8f09	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8f0b	38		sec				sec
.8f0c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8f0e	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8f10	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8f13	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8f15	20 8b 8e	jsr $8e8b			jsr 	TokeniseWriteByte
.8f18	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.94f6					DecimalScalarTable:
>94f6	66 66 66 66				.dword $66666666 ; 0.1
>94fa	de					.byte $de
>94fb	1f 85 eb 51				.dword $51eb851f ; 0.01
>94ff	db					.byte $db
>9500	4c 37 89 41				.dword $4189374c ; 0.001
>9504	d8					.byte $d8
>9505	ac 8b db 68				.dword $68db8bac ; 0.0001
>9509	d4					.byte $d4
>950a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>950e	d1					.byte $d1
>950f	83 de 1b 43				.dword $431bde83 ; 1e-06
>9513	ce					.byte $ce
>9514	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9518	ca					.byte $ca
>9519	89 3b e6 55				.dword $55e63b89 ; 1e-08
>951d	c7					.byte $c7
>951e	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9522	c4					.byte $c4
>9523	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9527	c0					.byte $c0
>9528	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>952c	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.952d					SyntaxError:
.952d	a9 02		lda #$02		lda	#2
.952f	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9532					RangeError:
.9532	a9 04		lda #$04		lda	#4
.9534	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9537					TypeError:
.9537	a9 05		lda #$05		lda	#5
.9539	4c 1b 82	jmp $821b		jmp	ErrorHandler
.953c					ArgumentError:
.953c	a9 07		lda #$07		lda	#7
.953e	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9541					NotDoneError:
.9541	a9 0c		lda #$0c		lda	#12
.9543	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9546					ErrorText:
>9546	42 72 65 61 6b 00			.text	"Break",0
>954c	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9554	72 72 6f 72 00
>9559	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9561	20 62 79 20 7a 65 72 6f 00
>956a	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9572	61 6e 67 65 00
>9577	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>957f	6d 61 74 63 68 00
>9585	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>958d	65 6d 6f 72 79 00
>9593	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>959b	61 72 67 75 6d 65 6e 74 00
>95a4	53 74 6f 70 00				.text	"Stop",0
>95a9	53 74 72 69 6e 67 20 74			.text	"String too long",0
>95b1	6f 6f 20 6c 6f 6e 67 00
>95b9	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>95c1	6e 20 66 61 69 6c 65 64 00
>95ca	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>95d2	61 74 61 00
>95d6	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>95de	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  End of listing
