
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Nov  1 10:14:07 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 dd b5	jsr $b5dd			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 2a 9a	jsr $9a2a			jsr 	PrintStringXA
.8014	20 4b 93	jsr $934b			jsr 	NewCommand 					; erase current program
.8017	20 32 a7	jsr $a732			jsr 	BackloadProgram
.801a	4c 72 8b	jmp $8b72			jmp 	WarmStart
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 75			.text "Built Tuesday 01-Nov-2022. Build 2465."
>8065	65 73 64 61 79 20 30 31 2d 4e 6f 76 2d 32 30 32
>8075	32 2e 20 42 75 69 6c 64 20 32 34 36 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSprite:
>0646							.fill 	2
.0648					GXSpriteOffsetBase:
>0648							.fill 	2
.064a					GXSpriteLow:
>064a							.fill 	64
.068a					GXSpriteHigh:
>068a							.fill 	64

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8086					GXGraphicDraw:
.8086	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use coordinates
.8088	b0 06		bcs $8090			bcs 	_GDCoordinate
.808a	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808c	84 37		sty $37				sty 	gxzTemp0+1
.808e	80 4b		bra $80db			bra 	_GDExecuteA 				; and execute
.8090					_GDCoordinate:
.8090	48		pha				pha 								; save AXY
.8091	da		phx				phx
.8092	5a		phy				phy
.8093	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8095					_GDCopy1:
.8095	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8098	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809b	ca		dex				dex
.809c	10 f7		bpl $8095			bpl 	_GDCopy1
.809e	68		pla				pla 								; update Y
.809f	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a2	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a5	68		pla				pla
.80a6	8d 2a 06	sta $062a			sta 	gxCurrentX
.80a9	68		pla				pla 								; get A (command+X.1) back
.80aa	48		pha				pha
.80ab	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ad	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80b0	68		pla				pla 								; get command back
.80b1	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b3	48		pha				pha 								; push back.
.80b4	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b6	f0 17		beq $80cf			beq 	_GDCopyToWorkArea
.80b8	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80bb	f0 07		beq $80c4			beq 	_GDCheckY
.80bd	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c0	c9 40		cmp #$40			cmp 	#64
.80c2	b0 08		bcs $80cc			bcs 	_GDError1
.80c4					_GDCheckY:
.80c4	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c7	cd 3e 06	cmp $063e			cmp 	gxHeight
.80ca	90 03		bcc $80cf			bcc 	_GDCopyToWorkArea
.80cc					_GDError1:
.80cc	68		pla				pla
.80cd					_GDError2:
.80cd	38		sec				sec
.80ce	60		rts				rts
.80cf					_GDCopyToWorkArea:
.80cf	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d1					_GDCopy2:
.80d1	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d4	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d7	ca		dex				dex
.80d8	10 f7		bpl $80d1			bpl 	_GDCopy2
.80da	68		pla				pla 								; get command
.80db					_GDExecuteA:
.80db	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80dd	b0 ee		bcs $80cd			bcs 	_GDError2
.80df	aa		tax				tax
.80e0	7c e6 80	jmp ($80e6,x)			jmp 	(GRVectorTable,x)
.80e3					GXMove:
.80e3	18		clc				clc
.80e4	60		rts				rts
.80e5					GRUndefined:
>80e5	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e6					GRVectorTable:
>80e6	b5 82					.word	GXInitialise             ; $00 Initialise
>80e8	cf 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80ea	17 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ec	67 82					.word	GXClearBitmap            ; $03 Clear
>80ee	a6 84					.word	GXSetColourMode          ; $04 Colour
>80f0	6e 86					.word	GXFontHandler            ; $05 DrawFont
>80f2	b6 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f4	22 87					.word	GXSelect                 ; $07 SPRUSE
>80f6	48 87					.word	GXSelectImage            ; $08 SPRIMG
>80f8	e5 80					.word	GRUndefined              ; $09
>80fa	e5 80					.word	GRUndefined              ; $0a
>80fc	e5 80					.word	GRUndefined              ; $0b
>80fe	e5 80					.word	GRUndefined              ; $0c
>8100	e5 80					.word	GRUndefined              ; $0d
>8102	e5 80					.word	GRUndefined              ; $0e
>8104	e5 80					.word	GRUndefined              ; $0f
>8106	e3 80					.word	GXMove                   ; $10 Move
>8108	74 83					.word	GXLine                   ; $11 Line
>810a	ef 84					.word	GXFrameRectangle         ; $12 FrameRect
>810c	ec 84					.word	GXFillRectangle          ; $13 FillRect
>810e	1e 81					.word	GXFrameCircle            ; $14 FrameCircle
>8110	1a 81					.word	GXFillCircle             ; $15 FillCircle
>8112	e5 80					.word	GRUndefined              ; $16
>8114	e5 80					.word	GRUndefined              ; $17
>8116	d4 84					.word	GXPlotPoint              ; $18 Plot
>8118	b2 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811a					GXFillCircle:
.811a	a9 ff		lda #$ff			lda 	#255
.811c	80 02		bra $8120			bra 	GXCircle
.811e					GXFrameCircle:
.811e	a9 00		lda #$00			lda 	#0
.8120					GXCircle:
.8120	8d cd 06	sta $06cd			sta 	gxIsFillMode					; save Fill flag
.8123	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8126	f0 26		beq $814e			beq 	_GXCFail
.8128	20 c4 88	jsr $88c4			jsr 	GXSortXY 					; topleft/bottomright
.812b	20 ee 87	jsr $87ee			jsr 	GXOpenBitmap 				; start drawing
.812e	20 20 82	jsr $8220			jsr 	GXCircleSetup 				; set up for drawing
.8131	9c ce 06	stz $06ce			stz 	gxYChanged
.8134					_GXCircleDraw:
.8134	ad cb 06	lda $06cb			lda 	gXCentre					; while x <= y
.8137	cd cc 06	cmp $06cc			cmp 	gYCentre
.813a	90 0a		bcc $8146			bcc 	_GXCircleContinue
.813c	d0 03		bne $8141			bne 	_GXNoLast
.813e	20 53 81	jsr $8153			jsr 	GXPlot1
.8141					_GXNoLast:
.8141	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap 				; close the bitmap
.8144	18		clc				clc
.8145	60		rts				rts
.8146					_GXCircleContinue:
.8146	20 50 81	jsr $8150			jsr 	GXPlot2 					; draw it
.8149	20 cd 81	jsr $81cd			jsr 	GXCircleMove 				; adjust the coordinates
.814c	80 e6		bra $8134			bra 	_GXCircleDraw
.814e					_GXCFail:
.814e	38		sec				sec
.814f	60		rts				rts
.8150					GXPlot2:
.8150	20 53 81	jsr $8153			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8153					GXPlot1:
.8153	ad cc 06	lda $06cc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8156	f0 03		beq $815b			beq 	_GXPlot1Only
.8158	20 77 81	jsr $8177			jsr 	GXPlot0 						; plot and negate
.815b					_GXPlot1Only:
.815b	20 77 81	jsr $8177			jsr 	GXPlot0 						; twice, undoing negation
.815e	ad cb 06	lda $06cb			lda 	gXCentre 						; swap X and Y
.8161	ae cc 06	ldx $06cc			ldx	 	gYCentre
.8164	8d cc 06	sta $06cc			sta 	gYCentre
.8167	8e cb 06	stx $06cb			stx 	gXCentre
.816a	ad ce 06	lda $06ce			lda 	gxYChanged 						; toggle Y Changed flag
.816d	a9 ff		lda #$ff			lda 	#$FF
.816f	8d ce 06	sta $06ce			sta 	gxYChanged
.8172	60		rts				rts
.8173	20 77 81	jsr $8177			jsr 	GXPlot0 						; do once
.8176	60		rts				rts
.8177	ad cd 06	lda $06cd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817a	f0 05		beq $8181			beq 	_GXPlot0Always
.817c	ad ce 06	lda $06ce			lda 	gxYChanged						; fill mode, only draw if changed.
.817f	f0 2d		beq $81ae			beq 	GXPlot0Exit
.8181					_GXPlot0Always:
.8181	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8183	ad cc 06	lda $06cc			lda 	gYCentre
.8186	20 af 81	jsr $81af			jsr 	GXSubCopy
.8189	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818b	ad cb 06	lda $06cb			lda 	gXCentre
.818e	20 af 81	jsr $81af			jsr 	GXSubCopy
.8191	48		pha				pha 									; save last offset X
.8192	20 0c 88	jsr $880c			jsr 	GXPositionCalc 					; calculate position/offset.
.8195	68		pla				pla
.8196	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8197	85 36		sta $36				sta 	gxzTemp0
.8199	64 37		stz $37				stz 	gxzTemp0+1
.819b	26 37		rol $37				rol 	gxzTemp0+1
.819d	ad cd 06	lda $06cd			lda 	gxIsFillMode
.81a0	69 80		adc #$80			adc 	#128
.81a2	20 3f 85	jsr $853f			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a5	38		sec				sec 									; GY = -GY
.81a6	a9 00		lda #$00			lda 	#0
.81a8	ed cc 06	sbc $06cc			sbc 	gYCentre
.81ab	8d cc 06	sta $06cc			sta 	gYCentre
.81ae					GXPlot0Exit:
.81ae	60		rts				rts
.81af					GXSubCopy:
.81af	85 36		sta $36				sta 	gxzTemp0
.81b1	64 37		stz $37				stz 	gxzTemp0+1
.81b3	29 80		and #$80			and 	#$80
.81b5	f0 02		beq $81b9			beq 	_GXNoSx
.81b7	c6 37		dec $37				dec 	gxzTemp0+1
.81b9					_GXNoSx:
.81b9	38		sec				sec
.81ba	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bd	e5 36		sbc $36				sbc 	gxzTemp0
.81bf	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c2	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c5	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c7	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81ca	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cc	60		rts				rts
.81cd					GXCircleMove:
.81cd	9c ce 06	stz $06ce			stz 	gxYChanged 					; clear Y changed flag
.81d0	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d2	10 0d		bpl $81e1			bpl 	_GXEMPositive
.81d4	ee cb 06	inc $06cb			inc 	gXCentre 					; X++
.81d7	ad cb 06	lda $06cb			lda 	gXCentre
.81da	20 00 82	jsr $8200			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dd	a9 06		lda #$06			lda 	#6  						; and add 6
.81df	80 15		bra $81f6			bra 	_GXEMAddD
.81e1					_GXEMPositive:
.81e1	ee cb 06	inc $06cb			inc 	gXCentre					; X++
.81e4	ce cc 06	dec $06cc			dec 	gyCentre 					; Y--
.81e7	38		sec				sec 								; calculate X-Y
.81e8	ad cb 06	lda $06cb			lda 	gXCentre
.81eb	ed cc 06	sbc $06cc			sbc 	gYCentre
.81ee	20 00 82	jsr $8200			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f1	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f3	ce ce 06	dec $06ce			dec 	gxYChanged
.81f6					_GXEMAddD:
.81f6	18		clc				clc
.81f7	65 38		adc $38				adc 	gxzTemp1
.81f9	85 38		sta $38				sta 	gxzTemp1
.81fb	90 02		bcc $81ff			bcc 	_GXEMNoCarry
.81fd	e6 39		inc $39				inc 	gxzTemp1+1
.81ff					_GXEMNoCarry:
.81ff	60		rts				rts
.8200					_GXAdd4TimesToD:
.8200	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8202	29 80		and #$80			and 	#$80
.8204	f0 02		beq $8208			beq 	_GXA4Unsigned
.8206	a9 ff		lda #$ff			lda 	#$FF
.8208					_GXA4Unsigned:
.8208	85 37		sta $37				sta 	gxzTemp0+1
.820a	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820c	26 37		rol $37				rol 	gxzTemp0+1
.820e	06 36		asl $36				asl 	gxzTemp0
.8210	26 37		rol $37				rol 	gxzTemp0+1
.8212	18		clc				clc 								; add
.8213	a5 36		lda $36				lda		gxzTemp0
.8215	65 38		adc $38				adc 	gxzTemp1
.8217	85 38		sta $38				sta 	gxzTemp1
.8219	a5 37		lda $37				lda		gxzTemp0+1
.821b	65 39		adc $39				adc 	gxzTemp1+1
.821d	85 39		sta $39				sta 	gxzTemp1+1
.821f	60		rts				rts
.8220					GXCircleSetup:
.8220	38		sec				sec
.8221	ad 38 06	lda $0638			lda 	gxY1
.8224	ed 34 06	sbc $0634			sbc 	gxY0
.8227	4a		lsr a				lsr 	a
.8228	8d ca 06	sta $06ca			sta 	gxRadius
.822b	a2 00		ldx #$00			ldx 	#0
.822d	20 4f 82	jsr $824f			jsr 	_GXCalculateCentre
.8230	a2 02		ldx #$02			ldx 	#2
.8232	20 4f 82	jsr $824f			jsr 	_GXCalculateCentre
.8235	9c cb 06	stz $06cb			stz 	gXCentre
.8238	ad ca 06	lda $06ca			lda 	gxRadius
.823b	8d cc 06	sta $06cc			sta 	gYCentre
.823e	0a		asl a				asl 	a 							; R x 2
.823f	85 36		sta $36				sta 	gxzTemp0
.8241	38		sec				sec
.8242	a9 03		lda #$03			lda 	#3
.8244	e5 36		sbc $36				sbc 	gxzTemp0
.8246	85 38		sta $38				sta 	gxzTemp1
.8248	a9 00		lda #$00			lda 	#0
.824a	e9 00		sbc #$00			sbc 	#0
.824c	85 39		sta $39				sta 	gxzTemp1+1
.824e	60		rts				rts
.824f					_GXCalculateCentre:
.824f	38		sec				sec
.8250	bd 36 06	lda $0636,x			lda 	gxX1,x
.8253	7d 32 06	adc $0632,x			adc 	gXX0,x
.8256	9d 36 06	sta $0636,x			sta 	gXX1,x
.8259	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825c	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.825f	4a		lsr a				lsr 	a
.8260	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8263	7e 36 06	ror $0636,x			ror 	gXX1,x
.8266	60		rts				rts
.06ca					gxRadius:
>06ca							.fill 	1
.06cb					gXCentre:
>06cb							.fill 	1
.06cc					gYCentre:
>06cc							.fill 	1
.06cd					gxIsFillMode:
>06cd							.fill 	1
.06ce					gxYChanged:
>06ce							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8267					GXClearBitmap:
.8267	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.826a	f0 24		beq $8290			beq 	_GXCBFail
.826c	20 ee 87	jsr $87ee			jsr 	GXOpenBitmap 				; start access
.826f	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8271	ad 3e 06	lda $063e			lda 	gxHeight
.8274	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8276	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8278					_GXCalcLastPage:
.8278	98		tya				tya 								; add to base page
.8279	18		clc				clc
.827a	6d 3c 06	adc $063c			adc 	gxBasePage
.827d	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827f					_GXClearAll:
.827f	20 92 82	jsr $8292			jsr 	_GXClearBlock 				; clear 8k block
.8282	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8284	a5 0b		lda $0b				lda 	GXEditSlot
.8286	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.8289	b0 f4		bcs $827f			bcs 	_GXClearAll
.828b	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap	 			; stop access
.828e	18		clc				clc
.828f	60		rts				rts
.8290					_GXCBFail:
.8290	38		sec				sec
.8291	60		rts				rts
.8292					_GXClearBlock:
.8292	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8294	85 38		sta $38				sta 	0+gxzTemp1
.8296	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8298	85 39		sta $39				sta 	1+gxzTemp1
.829a					_GXCB0:
.829a	a5 36		lda $36				lda 	gxzTemp0
.829c	a0 00		ldy #$00			ldy 	#0
.829e					_GXCB1:
.829e	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a0	c8		iny				iny
.82a1	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a3	c8		iny				iny
.82a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a6	c8		iny				iny
.82a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a9	c8		iny				iny
.82aa	d0 f2		bne $829e			bne 	_GXCB1
.82ac	e6 39		inc $39				inc 	gxzTemp1+1
.82ae	a5 39		lda $39				lda 	gxzTemp1+1
.82b0	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b2	d0 e6		bne $829a			bne 	_GXCB0
.82b4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b5					GXInitialise:
.82b5	64 01		stz $01				stz 	1
.82b7	a9 01		lda #$01			lda 	#1
.82b9	8d 00 d0	sta $d000			sta 	$D000
.82bc	18		clc				clc
.82bd	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82c0	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c3	a2 0f		ldx #$0f			ldx 	#15
.82c5					_GXIClear:
.82c5	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c8	ca		dex				dex
.82c9	10 fa		bpl $82c5			bpl 	_GXIClear
.82cb	20 66 83	jsr $8366			jsr 	GXClearSpriteStore
.82ce	60		rts				rts
.82cf					GXControlBitmap:
.82cf	64 01		stz $01				stz 	1
.82d1	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d3	29 01		and #$01			and 	#1 							; set bitmap flag
.82d5	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d8	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d9	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82dc	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82de	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82e0	90 02		bcc $82e4			bcc 	_CBNotOn
.82e2	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e4					_CBNotOn:
.82e4	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e7	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e9	29 07		and #$07			and 	#7
.82eb	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ee	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82f0	d0 02		bne $82f4			bne 	_CBNotDefault
.82f2	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f4					_CBNotDefault:
.82f4	8d 3c 06	sta $063c			sta 	gxBasePage
.82f7	20 58 83	jsr $8358			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82fa	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fc	8d 03 d1	sta $d103			sta 	$D103
.82ff	a5 36		lda $36				lda 	gxzTemp0
.8301	8d 02 d1	sta $d102			sta 	$D102
.8304	9c 01 d1	stz $d101			stz 	$D101
.8307	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8309	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830c	29 01		and #$01			and 	#1
.830e	f0 02		beq $8312			beq 	_CBHaveHeight
.8310	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8312					_CBHaveHeight
.8312	8e 3e 06	stx $063e			stx 	gxHeight
.8315	18		clc				clc
.8316	60		rts				rts
.8317					GXControlSprite:
.8317	64 01		stz $01				stz 	1
.8319	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831b	29 01		and #$01			and 	#1 							; set sprites flag
.831d	8d 3a 06	sta $063a			sta 	gxSpritesOn
.8320	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8321	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8324	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8326	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8328	90 02		bcc $832c			bcc 	_CSNotOn
.832a	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832c					_CSNotOn:
.832c	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8331	d0 02		bne $8335			bne 	_CSNotDefault
.8333	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8335					_CSNotDefault:
.8335	8d 3d 06	sta $063d			sta 	gxSpritePage
.8338	20 58 83	jsr $8358			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833b	a5 36		lda $36				lda 	zTemp0
.833d	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase
.8340	a5 37		lda $37				lda 	zTemp0+1
.8342	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase+1
.8345	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8347					_CSClear:
.8347	9e 00 d9	stz $d900,x			stz 	$D900,x
.834a	9e 00 da	stz $da00,x			stz 	$DA00,x
.834d	ca		dex				dex
.834e	d0 f7		bne $8347			bne 	_CSClear
.8350	9c 47 06	stz $0647			stz 	GSCurrentSprite+1 			; no sprite selected.
.8353	20 66 83	jsr $8366			jsr 	GXClearSpriteStore
.8356	18		clc				clc
.8357	60		rts				rts
.8358					GXCalculateBaseAddress:
.8358	85 36		sta $36				sta 	gxzTemp0
.835a	64 37		stz $37				stz 	gxzTemp0+1
.835c	a9 05		lda #$05			lda 	#5
.835e					_GXShift:
.835e	06 36		asl $36				asl 	gxzTemp0
.8360	26 37		rol $37				rol 	gxzTemp0+1
.8362	3a		dec a				dec		a
.8363	d0 f9		bne $835e			bne 	_GXShift
.8365	60		rts				rts
.8366					GXClearSpriteStore:
.8366	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8368					_GXCSSLoop:
.8368	9e 8a 06	stz $068a,x			stz 	GXSpriteHigh,x
.836b	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.836d	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.8370	ca		dex				dex
.8371	10 f5		bpl $8368			bpl 	_GXCSSLoop
.8373	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8374					GXLine:
.8374	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8377	f0 28		beq $83a1			beq 	_GXLFail
.8379	20 ee 87	jsr $87ee			jsr 	GXOpenBitmap
.837c	20 e2 88	jsr $88e2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.837f	20 47 84	jsr $8447			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8382	20 0c 88	jsr $880c			jsr 	GXPositionCalc 				; calculate position/offset.
.8385					_GXDrawLoop:
.8385	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8388	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.838a	2d 42 06	and $0642			and 	gxANDValue
.838d	4d 41 06	eor $0641			eor 	gxEORValue
.8390	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8392	20 a3 83	jsr $83a3			jsr 	GXLineIsComplete 			; is the line complete ?
.8395	f0 05		beq $839c			beq 	_GXLExit
.8397	20 be 83	jsr $83be			jsr 	GXLineAdvance 				; code as per advance method
.839a	80 e9		bra $8385			bra 	_GXDrawLoop
.839c					_GXLExit:
.839c	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap
.839f	18		clc				clc
.83a0	60		rts				rts
.83a1					_GXLFail:
.83a1	38		sec				sec
.83a2	60		rts				rts
.83a3					GXLineIsComplete:
.83a3	ad d1 06	lda $06d1			lda 	GXIsDiffYLarger 			; is dy larger
.83a6	d0 0f		bne $83b7			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83a8	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83ab	4d 36 06	eor $0636			eor 	GXX1
.83ae	d0 06		bne $83b6			bne 	_GXLICExit
.83b0	ad 33 06	lda $0633			lda 	GXX0+1
.83b3	4d 37 06	eor $0637			eor 	GXX1+1
.83b6					_GXLICExit:
.83b6	60		rts				rts
.83b7					_GXLICCompareY:
.83b7	ad 38 06	lda $0638			lda 	GXY1
.83ba	4d 34 06	eor $0634			eor 	GXY0
.83bd	60		rts				rts
.83be					GXLineAdvance:
.83be	18		clc				clc 								; add adjust to position
.83bf	ad d3 06	lda $06d3			lda 	GXPosition
.83c2	6d d4 06	adc $06d4			adc 	GXAdjust
.83c5	8d d3 06	sta $06d3			sta 	GXPosition
.83c8	9c d6 06	stz $06d6			stz 	GXAddSelect 				; clear add select flag
.83cb	b0 05		bcs $83d2			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83cd	cd d5 06	cmp $06d5			cmp 	GXTotal 					; if exceeded total
.83d0	90 0a		bcc $83dc			bcc 	_GXLANoExtra
.83d2					_GXLAOverflow:
.83d2	ce d6 06	dec $06d6			dec 	GXAddSelect 				; set addselect to $FF
.83d5	38		sec				sec 								; subtract total and write back
.83d6	ed d5 06	sbc $06d5			sbc 	GXTotal
.83d9	8d d3 06	sta $06d3			sta 	GXPosition
.83dc					_GXLANoExtra:
.83dc	ad d1 06	lda $06d1			lda 	GXIsDiffYLarger
.83df	f0 0d		beq $83ee			beq 	_GXDXLarger
.83e1	20 40 84	jsr $8440			jsr 	GXIncrementY
.83e4	ad d6 06	lda $06d6			lda 	GXAddSelect
.83e7	f0 10		beq $83f9			beq 	_GXLAExit
.83e9	20 fa 83	jsr $83fa			jsr 	GXAdjustX
.83ec	80 0b		bra $83f9			bra 	_GXLAExit
.83ee					_GXDXLarger:
.83ee	20 fa 83	jsr $83fa			jsr 	GXAdjustX
.83f1	ad d6 06	lda $06d6			lda 	GXAddSelect
.83f4	f0 03		beq $83f9			beq 	_GXLAExit
.83f6	20 40 84	jsr $8440			jsr 	GXIncrementY
.83f9					_GXLAExit:
.83f9	60		rts				rts
.83fa					GXAdjustX:
.83fa	ad d2 06	lda $06d2			lda 	GXDXNegative
.83fd	10 25		bpl $8424			bpl 	_GXAXRight
.83ff	ad 32 06	lda $0632			lda 	GXX0
.8402	d0 03		bne $8407			bne 	_GXAXNoBorrow
.8404	ce 33 06	dec $0633			dec 	GXX0+1
.8407					_GXAXNoBorrow:
.8407	ce 32 06	dec $0632			dec 	GXX0
.840a	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.840d	ad 45 06	lda $0645			lda 	gsOffset
.8410	c9 ff		cmp #$ff			cmp 	#$FF
.8412	d0 0f		bne $8423			bne 	_GXAYExit 					; underflow
.8414	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8416	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8418	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.841a	b0 07		bcs $8423			bcs 	_GXAYExit
.841c	18		clc				clc
.841d	69 20		adc #$20			adc 	#$20 						; fix up
.841f	85 3d		sta $3d				sta 	gxzScreen+1
.8421	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8423					_GXAYExit:
.8423	60		rts				rts
.8424					_GXAXRight:
.8424	ee 32 06	inc $0632			inc 	GXX0
.8427	d0 03		bne $842c			bne 	_GXAXNoCarry
.8429	ee 33 06	inc $0633			inc 	GXX0+1
.842c					_GXAXNoCarry:
.842c	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.842f	d0 0e		bne $843f			bne 	_GXAXExit 					; if not overflowed, exit.
.8431	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8433	a5 3d		lda $3d				lda 	gxzScreen+1
.8435	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8437	90 06		bcc $843f			bcc 	_GXAXExit
.8439	e9 20		sbc #$20			sbc 	#$20 						; fix up
.843b	85 3d		sta $3d				sta 	gxzScreen+1
.843d	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.843f					_GXAXExit:
.843f	60		rts				rts
.8440					GXIncrementY:
.8440	ee 34 06	inc $0634			inc 	GXY0
.8443	20 62 88	jsr $8862			jsr 	GXMovePositionDown
.8446	60		rts				rts
.8447					GXLineSetup:
.8447	ad 38 06	lda $0638			lda 	GXY1
.844a	38		sec				sec
.844b	ed 34 06	sbc $0634			sbc 	GXY0
.844e	4a		lsr a				lsr 	a
.844f	8d d0 06	sta $06d0			sta 	GXDiffY
.8452	9c d2 06	stz $06d2			stz 	GXDXNegative 				; clear -ve flag
.8455	38		sec				sec
.8456	ad 36 06	lda $0636			lda 	GXX1
.8459	ed 32 06	sbc $0632			sbc 	GXX0
.845c	8d cf 06	sta $06cf			sta 	GXDiffX
.845f	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8462	ed 33 06	sbc $0633			sbc 	GXX0+1
.8465	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8466	6e cf 06	ror $06cf			ror 	GXDiffX
.8469	0a		asl a				asl 	a
.846a	10 0c		bpl $8478			bpl 	_GDXNotNegative
.846c	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.846e	38		sec				sec
.846f	ed cf 06	sbc $06cf			sbc 	GXDiffX
.8472	8d cf 06	sta $06cf			sta 	GXDiffX
.8475	ce d2 06	dec $06d2			dec 	GXDXNegative 				; -ve flag = $FF.
.8478					_GDXNotNegative:
.8478	9c d1 06	stz $06d1			stz 	GXIsDiffYLarger 			; clear larger flag
.847b	ad d0 06	lda $06d0			lda 	GXDiffY 					; set adjust and total.
.847e	8d d4 06	sta $06d4			sta 	GXAdjust
.8481	ad cf 06	lda $06cf			lda 	GXDiffX
.8484	8d d5 06	sta $06d5			sta 	GXTotal
.8487	ad d0 06	lda $06d0			lda 	GXDiffY 					; if dy > dx
.848a	cd cf 06	cmp $06cf			cmp 	GXDiffX
.848d	90 0f		bcc $849e			bcc 	_GDXNotLarger
.848f	ce d1 06	dec $06d1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8492	ad cf 06	lda $06cf			lda 	GXDiffX 					; set adjust and total other way round
.8495	8d d4 06	sta $06d4			sta 	GXAdjust
.8498	ad d0 06	lda $06d0			lda 	GXDiffY
.849b	8d d5 06	sta $06d5			sta 	GXTotal
.849e					_GDXNotLarger:
.849e	ad d5 06	lda $06d5			lda 	GXTotal
.84a1	4a		lsr a				lsr 	a
.84a2	8d d3 06	sta $06d3			sta 	GXPosition
.84a5	60		rts				rts
.06cf					GXDiffX:
>06cf							.fill 	1
.06d0					GXDiffY:
>06d0							.fill 	1
.06d1					GXIsDiffYLarger:
>06d1							.fill 	1
.06d2					GXDXNegative:
>06d2							.fill 	1
.06d3					GXPosition:
>06d3							.fill 	1
.06d4					GXAdjust:
>06d4							.fill 	1
.06d5					GXTotal:
>06d5							.fill 	1
.06d6					GXAddSelect:
>06d6							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.84a6					GXSetColourMode:
.84a6	a6 36		ldx $36				ldx 	gxzTemp0
.84a8	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84ab	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84ad	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84b0	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84b2	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84b5	ae 40 06	ldx $0640			ldx 	gxColour
.84b8	8e 41 06	stx $0641			stx 	gxEORValue
.84bb	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84bd	90 03		bcc $84c2			bcc 	_GXSDCNotAndColour
.84bf	8e 42 06	stx $0642			stx 	gxANDValue
.84c2					_GXSDCNotAndColour:
.84c2	d0 03		bne $84c7			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84c4	9c 41 06	stz $0641			stz 	gxEORValue
.84c7					_GXSDCNotAnd:
.84c7	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84c8	90 08		bcc $84d2			bcc 	_GXSDCNoFlip
.84ca	ad 42 06	lda $0642			lda	 	gxANDValue
.84cd	49 ff		eor #$ff			eor 	#$FF
.84cf	8d 42 06	sta $0642			sta 	gxANDValue
.84d2					_GXSDCNoFlip:
.84d2	18		clc				clc
.84d3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84d4					GXPlotPoint:
.84d4	20 ee 87	jsr $87ee			jsr 	GXOpenBitmap 				; start drawing
.84d7	20 0c 88	jsr $880c			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84da	ac 45 06	ldy $0645			ldy 	gsOffset
.84dd	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84df	2d 42 06	and $0642			and 	gxANDValue
.84e2	4d 41 06	eor $0641			eor 	gxEORValue
.84e5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84e7	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ea	18		clc				clc
.84eb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84ec					GXFillRectangle:
.84ec	38		sec				sec
.84ed	80 01		bra $84f0			bra 	GXRectangle
.84ef					GXFrameRectangle:
.84ef	18		clc				clc
.84f0					GXRectangle:
.84f0	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84f3	f0 35		beq $852a			beq 	_GXRFail
.84f5	08		php				php 								; save Fill flag (CS)
.84f6	20 ee 87	jsr $87ee			jsr 	GXOpenBitmap 				; start drawing
.84f9	20 c4 88	jsr $88c4			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84fc	20 0c 88	jsr $880c			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ff	38		sec				sec 								; sec = Draw line
.8500	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8503	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8506	cd 38 06	cmp $0638			cmp 	gxY1
.8509	f0 19		beq $8524			beq 	_GXRectangleExit
.850b					_GXRectLoop:
.850b	20 62 88	jsr $8862			jsr 	GXMovePositionDown 			; down one.
.850e	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8511	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8514	cd 38 06	cmp $0638			cmp 	gXY1
.8517	f0 07		beq $8520			beq 	_GXLastLine
.8519	28		plp				plp 								; get flag back
.851a	08		php				php
.851b	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0 				; draw horizontal line
.851e	80 eb		bra $850b			bra 	_GXRectLoop
.8520					_GXLastLine:
.8520	38		sec				sec
.8521	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0
.8524					_GXRectangleExit:
.8524	68		pla				pla 								; throw fill flag.
.8525	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap 				; stop drawing and exit
.8528	18		clc				clc
.8529	60		rts				rts
.852a					_GXRFail:
.852a	38		sec				sec
.852b	60		rts				rts
.852c					GXDrawLineX1X0:
.852c	08		php				php 								; save solid/either-end
.852d	38		sec				sec
.852e	ad 36 06	lda $0636			lda		gXX1
.8531	ed 32 06	sbc $0632			sbc 	gXX0
.8534	85 36		sta $36				sta 	gxzTemp0
.8536	ad 37 06	lda $0637			lda 	gXX1+1
.8539	ed 33 06	sbc $0633			sbc 	gXX0+1
.853c	85 37		sta $37				sta 	gxzTemp0+1
.853e	28		plp				plp
.853f					GXDrawLineTemp0:
.853f	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8541	48		pha				pha
.8542	a5 3d		lda $3d				lda 	gxzScreen+1
.8544	48		pha				pha
.8545	ad 45 06	lda $0645			lda 	gsOffset
.8548	48		pha				pha
.8549	a5 0b		lda $0b				lda 	GXEditSlot
.854b	48		pha				pha
.854c	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.854f	90 1e		bcc $856f			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8551					_GXDLTLine:
.8551	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8553	2d 42 06	and $0642			and 	gxANDValue
.8556	4d 41 06	eor $0641			eor 	gxEORValue
.8559	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855b	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.855d	d0 04		bne $8563			bne 	_GXDLTNoBorrow
.855f	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8561	30 2e		bmi $8591			bmi 	_GXDLTExit
.8563					_GXDLTNoBorrow:
.8563	c6 36		dec $36				dec 	gxzTemp0
.8565	c8		iny				iny 								; next slot.
.8566	d0 e9		bne $8551			bne 	_GXDLTLine
.8568	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.856a	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap				; check for new page.
.856d	80 e2		bra $8551			bra 	_GXDLTLine
.856f					_GXDLTEndPoints:
.856f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8571	2d 42 06	and $0642			and 	gxANDValue
.8574	4d 41 06	eor $0641			eor 	gxEORValue
.8577	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8579	98		tya				tya 								; advance to right side
.857a	18		clc				clc
.857b	65 36		adc $36				adc 	gxzTemp0
.857d	a8		tay				tay
.857e	a5 3d		lda $3d				lda 	gxzScreen+1
.8580	65 37		adc $37				adc 	gxzTemp0+1
.8582	85 3d		sta $3d				sta 	gxzScreen+1
.8584	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap 			; fix up.
.8587	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8589	2d 42 06	and $0642			and 	gxANDValue
.858c	4d 41 06	eor $0641			eor 	gxEORValue
.858f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8591					_GXDLTExit:
.8591	68		pla				pla
.8592	85 0b		sta $0b				sta 	GXEditSlot
.8594	68		pla				pla
.8595	8d 45 06	sta $0645			sta 	gsOffset
.8598	68		pla				pla
.8599	85 3d		sta $3d				sta 	gxzScreen+1
.859b	68		pla				pla
.859c	85 3c		sta $3c				sta 	gxzScreen
.859e	60		rts				rts
.859f					GXDLTCheckWrap:
.859f	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85a1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85a3	90 06		bcc $85ab			bcc 	_GXDLTCWExit
.85a5	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85a7	85 3d		sta $3d				sta 	gxzScreen+1
.85a9	e6 0b		inc $0b				inc 	GXEditSlot
.85ab					_GXDLTCWExit:
.85ab	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.85ac					GXDrawGraphicElement:
.85ac	8d d7 06	sta $06d7			sta 	gxSize 						; save size
.85af	3a		dec a				dec 	a
.85b0	8d d8 06	sta $06d8			sta 	gxMask 						; and mask
.85b3	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b6	f0 67		beq $861f			beq 	_GXSLFail
.85b8	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85bb	48		pha				pha
.85bc	8c da 06	sty $06da			sty 	gxAcquireVector+1 			; and acquisition vector
.85bf	8e d9 06	stx $06d9			stx 	gxAcquireVector
.85c2	20 ee 87	jsr $87ee			jsr 	gxOpenBitmap 				; open the bitmap.
.85c5	ad dc 06	lda $06dc			lda 	gxUseMode 					; scale bits
.85c8	4a		lsr a				lsr 	a
.85c9	4a		lsr a				lsr 	a
.85ca	4a		lsr a				lsr 	a
.85cb	29 07		and #$07			and		#7
.85cd	1a		inc a				inc 	a
.85ce	8d db 06	sta $06db			sta 	gxScale
.85d1	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d3					_GXGELoop:
.85d3	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d5	2c dc 06	bit $06dc			bit 	gxUseMode 					; check for flip.
.85d8	10 06		bpl $85e0			bpl		_GXNoVFlip
.85da	ad d8 06	lda $06d8			lda 	gxMask
.85dd	38		sec				sec
.85de	e5 38		sbc $38				sbc 	gxzTemp1
.85e0					_GXNoVFlip:
.85e0	aa		tax				tax 								; get the Xth line.
.85e1	20 21 86	jsr $8621			jsr 	_GXCallAcquire 				; get that data.
.85e4	ad db 06	lda $06db			lda 	gxScale 					; do scale identical copies of that line.
.85e7	85 39		sta $39				sta 	gxzTemp1+1
.85e9					_GXGELoop2:
.85e9	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85ec	cd 3e 06	cmp $063e			cmp 	gxHeight
.85ef	b0 10		bcs $8601			bcs 	_GXDGEExit
.85f1	20 24 86	jsr $8624			jsr 	GXRenderOneLine 			; render line
.85f4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85f6	d0 f1		bne $85e9			bne 	_GXGELoop2
.85f8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85fa	a5 38		lda $38				lda 	gxzTemp1
.85fc	cd d7 06	cmp $06d7			cmp 	gxSize
.85ff	d0 d2		bne $85d3			bne 	_GXGELoop
.8601					_GXDGEExit:
.8601	68		pla				pla 								; restore Y for next time
.8602	8d 34 06	sta $0634			sta 	gxY0
.8605	ae db 06	ldx $06db			ldx 	gxScale 					; get scale (1-8)
.8608					_GXShiftLeft:
.8608	18		clc				clc
.8609	ad d7 06	lda $06d7			lda 	gxSize
.860c	6d 32 06	adc $0632			adc 	gxX0
.860f	8d 32 06	sta $0632			sta 	gxX0
.8612	90 03		bcc $8617			bcc 	_GXSLNoCarry
.8614	ee 33 06	inc $0633			inc 	gxX0+1
.8617					_GXSLNoCarry:
.8617	ca		dex				dex
.8618	d0 ee		bne $8608			bne 	_GXShiftLeft
.861a	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap
.861d	18		clc				clc
.861e	60		rts				rts
.861f					_GXSLFail:
.861f	38		sec				sec
.8620	60		rts				rts
.8621					_GXCallAcquire:
.8621	6c d9 06	jmp ($06d9)			jmp 	(gxAcquireVector)
.8624					GXRenderOneLine:
.8624	20 0c 88	jsr $880c			jsr 	GXPositionCalc 				; calculate position/offset.
.8627	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.862a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.862c					_GXROLLoop1:
.862c	ad db 06	lda $06db			lda 	gxScale 					; set to do 'scale' times
.862f	85 3b		sta $3b				sta 	gxzTemp2+1
.8631					_GXROLLoop2:
.8631	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8633	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8636	50 06		bvc $863e			bvc 	_GXNoHFlip
.8638	ad d8 06	lda $06d8			lda 	gxMask
.863b	38		sec				sec
.863c	e5 3a		sbc $3a				sbc 	gxzTemp2
.863e					_GXNoHFlip:
.863e	aa		tax				tax 								; read from the pixel buffer
.863f	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8642	d0 07		bne $864b			bne 	_GXDraw 					; draw if non zero
.8644	ad dc 06	lda $06dc			lda 	gxUseMode 					; check to see if solid background
.8647	29 04		and #$04			and 	#4
.8649	f0 0a		beq $8655			beq 	_GXZeroPixel
.864b					_GXDraw:
.864b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.864d	2d 42 06	and $0642			and 	gxANDValue
.8650	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8653	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8655					_GXZeroPixel:
.8655	c8		iny				iny 								; advance pointer
.8656	d0 05		bne $865d			bne 	_GXNoShift
.8658	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.865a	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap				; check for new page.
.865d					_GXNoShift:
.865d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.865f	d0 d0		bne $8631			bne 	_GXROLLoop2
.8661	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8663	a5 3a		lda $3a				lda 	gxzTemp2
.8665	cd d7 06	cmp $06d7			cmp 	gxSize
.8668	d0 c2		bne $862c			bne 	_GXROLLoop1
.866a	ee 34 06	inc $0634			inc 	gxY0
.866d	60		rts				rts
.06d7					gxSize:
>06d7							.fill 	1
.06d8					gxMask:
>06d8							.fill 	1
.06d9					gxAcquireVector:
>06d9							.fill 	2
.06db					gxScale:
>06db							.fill 	1
.06dc					gxUseMode:
>06dc							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.866e					GXFontHandler:
.866e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8670	4d 3f 06	eor $063f			eor 	gxMode
.8673	8d dc 06	sta $06dc			sta 	gxUseMode
.8676	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8678	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.867a	26 37		rol $37				rol	 	gxzTemp0+1
.867c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.867e	26 37		rol $37				rol	 	gxzTemp0+1
.8680	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8682	26 37		rol $37				rol	 	gxzTemp0+1
.8684	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8686	09 c0		ora #$c0			ora 	#$C0
.8688	85 37		sta $37				sta 	gxzTemp0+1
.868a	a9 08		lda #$08			lda 	#8 							; size 8x8
.868c	a2 94		ldx #$94			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.868e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8690	20 ac 85	jsr $85ac			jsr 	GXDrawGraphicElement
.8693	60		rts				rts
.8694					GXGetGraphicDataFont:
.8694	8a		txa				txa 								; X->Y
.8695	a8		tay				tay
.8696	a6 01		ldx $01				ldx 	1 							; preserve old value
.8698	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.869a	85 01		sta $01				sta 	1
.869c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.869e	86 01		stx $01				stx 	1 							; put old value back.
.86a0	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86a2					_GXExpand:
.86a2	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86a5	0a		asl a				asl 	a 							; shift bit 7 into C
.86a6	90 08		bcc $86b0			bcc 	_GXNoPixel
.86a8	48		pha				pha 								; if set, set pixel buffer to current colour.
.86a9	ad 40 06	lda $0640			lda 	gxColour
.86ac	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86af	68		pla				pla
.86b0					_GXNoPixel:
.86b0	e8		inx				inx 								; do the whole byte.
.86b1	e0 08		cpx #$08			cpx 	#8
.86b3	d0 ed		bne $86a2			bne 	_GXExpand
.86b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86b6					GXSpriteHandler:
.86b6	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86b8	4d 3f 06	eor $063f			eor 	gxMode
.86bb	8d dc 06	sta $06dc			sta 	gxUseMode
.86be	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86c0	da		phx				phx
.86c1	20 ee 87	jsr $87ee			jsr 	GXOpenBitmap 				; can access sprite information
.86c4	68		pla				pla
.86c5	20 7d 88	jsr $887d			jsr 	GXFindSprite 				; get the sprite address
.86c8	08		php				php
.86c9	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap
.86cc	28		plp				plp
.86cd	b0 0a		bcs $86d9			bcs		_GXSHExit 					; exit if find failed.
.86cf	ad dd 06	lda $06dd			lda 	GXSizePixels 				; return size
.86d2	a2 da		ldx #$da			ldx 	#GXSpriteAcquire & $FF
.86d4	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86d6	20 ac 85	jsr $85ac			jsr 	GXDrawGraphicElement
.86d9					_GXSHExit:
.86d9	60		rts				rts
.86da					GXSpriteAcquire:
.86da	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86dd	85 0b		sta $0b				sta 	GXEditSlot
.86df	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86e1	a9 00		lda #$00			lda 	#0
.86e3	ae de 06	ldx $06de			ldx 	GXSizeBits
.86e6					_GXTimesRowNumber:
.86e6	18		clc				clc
.86e7	65 36		adc $36				adc 	zTemp0
.86e9	ca		dex				dex
.86ea	10 fa		bpl $86e6			bpl 	_GXTimesRowNumber
.86ec	64 37		stz $37				stz 	gxzTemp0+1
.86ee	0a		asl a				asl 	a 							; row x 2,4,6,8
.86ef	26 37		rol $37				rol 	gxzTemp0+1
.86f1	0a		asl a				asl 	a 							; row x 4,8,12,16
.86f2	26 37		rol $37				rol 	gxzTemp0+1
.86f4	0a		asl a				asl 	a 							; row x 8,16,24,32
.86f5	26 37		rol $37				rol 	gxzTemp0+1
.86f7	85 36		sta $36				sta 	gxzTemp0
.86f9	18		clc				clc 								; add base address.
.86fa	a5 36		lda $36				lda 	gxzTemp0
.86fc	6d e0 06	adc $06e0			adc 	GXSpriteOffset
.86ff	85 36		sta $36				sta 	gxzTemp0
.8701	a5 37		lda $37				lda 	gxzTemp0+1
.8703	6d e1 06	adc $06e1			adc 	GXSpriteOffset+1
.8706					_GXSAFindPage:
.8706	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8708	90 06		bcc $8710			bcc 	_GXSAFoundPage
.870a	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.870c	e6 0b		inc $0b				inc 	GXEditSlot
.870e	80 f6		bra $8706			bra 	_GXSAFindPage
.8710					_GXSAFoundPage:
.8710	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8712	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8714	a0 00		ldy #$00			ldy 	#0
.8716					_GXSACopyLoop:
.8716	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8718	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.871b	c8		iny				iny
.871c	cc dd 06	cpy $06dd			cpy 	GXSizePixels
.871f	d0 f5		bne $8716			bne 	_GXSACopyLoop
.8721	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.8722					GXSelect:
.8722	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8725	f0 1f		beq $8746			beq 	_GXSFail
.8727	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8729	c9 40		cmp #$40			cmp 	#64
.872b	b0 19		bcs $8746			bcs 	_GXSFail
.872d	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.872f	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8731	06 36		asl $36				asl 	gxzTemp0
.8733	06 36		asl $36				asl 	gxzTemp0
.8735	06 36		asl $36				asl 	gxzTemp0
.8737	2a		rol a				rol 	a
.8738	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.873a	8d 47 06	sta $0647			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.873d	85 37		sta $37				sta 	gxzTemp0+1
.873f	a5 36		lda $36				lda 	gxzTemp0
.8741	8d 46 06	sta $0646			sta 	GSCurrentSprite
.8744	18		clc				clc
.8745	60		rts				rts
.8746					_GXSFail:
.8746	38		sec				sec
.8747	60		rts				rts
.8748					GXSelectImage:
.8748	ad 3a 06	lda $063a			lda 	gxSpritesOn
.874b	f0 63		beq $87b0			beq 	_GXSIFail
.874d	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.8750	f0 5e		beq $87b0			beq 	_GXSIFail
.8752	64 01		stz $01				stz 	1
.8754	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8756	d0 45		bne $879d			bne 	_GXSIHide
.8758	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.875a	48		pha				pha
.875b	20 ee 87	jsr $87ee			jsr 	GXOpenBitmap
.875e	68		pla				pla
.875f	20 7d 88	jsr $887d			jsr 	GXFindSprite
.8762	b0 49		bcs $87ad			bcs 	_GXSICloseFail 				; no image
.8764	a0 01		ldy #$01			ldy 	#1
.8766	ad 46 06	lda $0646			lda 	GSCurrentSprite
.8769	85 36		sta $36				sta 	gxzTemp0
.876b	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.876e	85 37		sta $37				sta 	gxzTemp0+1
.8770	ad e0 06	lda $06e0			lda 	GXSpriteOffset
.8773	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8775	18		clc				clc
.8776	ad e1 06	lda $06e1			lda 	GXSpriteOffset+1
.8779	6d 48 06	adc $0648			adc 	GXSpriteOffsetBase
.877c	c8		iny				iny
.877d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.877f	ad 49 06	lda $0649			lda 	GXSpriteOffsetBase+1
.8782	69 00		adc #$00			adc 	#0
.8784	c8		iny				iny
.8785	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8787	ad de 06	lda $06de			lda 	GXSizeBits 					; get raw size
.878a	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.878c	2a		rol a				rol 	a 							; x 2
.878d	0a		asl a				asl 	a 							; x 4
.878e	0a		asl a				asl 	a 							; x 8
.878f	0a		asl a				asl 	a 							; x 16
.8790	0d df 06	ora $06df			ora 	GXSpriteLUT 				; Or with LUT
.8793	0a		asl a				asl 	a 							; 1 shift
.8794	09 01		ora #$01			ora 	#1 							; enable sprite.
.8796	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8798	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap
.879b	18		clc				clc
.879c	60		rts				rts
.879d					_GXSIHide:
.879d	ad 46 06	lda $0646			lda 	GSCurrentSprite
.87a0	85 36		sta $36				sta 	gxzTemp0
.87a2	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.87a5	85 37		sta $37				sta 	gxzTemp0+1
.87a7	a9 00		lda #$00			lda 	#0
.87a9	92 36		sta ($36)			sta 	(gxzTemp0)
.87ab	18		clc				clc
.87ac	60		rts				rts
.87ad					_GXSICloseFail:
.87ad	20 ff 87	jsr $87ff			jsr 	GXCloseBitmap
.87b0					_GXSIFail:
.87b0	38		sec				sec
.87b1	60		rts				rts
.87b2					GXMoveSprite:
.87b2	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87b5	f0 35		beq $87ec			beq 	_GXSIFail
.87b7	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.87ba	f0 30		beq $87ec			beq 	_GXSIFail
.87bc	85 37		sta $37				sta 	gxzTemp0+1
.87be	a0 04		ldy #$04			ldy 	#4
.87c0	ad 46 06	lda $0646			lda 	GSCurrentSprite
.87c3	85 36		sta $36				sta 	gxzTemp0
.87c5	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87c7	38		sec				sec
.87c8	ed dd 06	sbc $06dd			sbc 	GXSizePixels
.87cb	4a		lsr a				lsr 	a
.87cc	48		pha				pha
.87cd	18		clc				clc
.87ce	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.87d1	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87d3	c8		iny				iny
.87d4	ad 33 06	lda $0633			lda 	gxX0+1
.87d7	69 00		adc #$00			adc 	#0
.87d9	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87db	c8		iny				iny
.87dc	68		pla				pla
.87dd	18		clc				clc
.87de	6d 34 06	adc $0634			adc 	gxY0
.87e1	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87e3	a9 00		lda #$00			lda 	#0
.87e5	69 00		adc #$00			adc 	#0
.87e7	c8		iny				iny
.87e8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ea	18		clc				clc
.87eb	60		rts				rts
.87ec					_GXSIFail:
.87ec	38		sec				sec
.87ed	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87ee					GXOpenBitmap:
.87ee	78		sei				sei 								; no interrupts here
.87ef	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87f1	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.87f4	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87f6	85 00		sta $00				sta 	0
.87f8	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.87fa	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.87fd	58		cli				cli
.87fe	60		rts				rts
.87ff					GXCloseBitmap:
.87ff	78		sei				sei
.8800	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8803	85 0b		sta $0b				sta 	GXEditSlot
.8805	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8808	85 00		sta $00				sta 	0
.880a	58		cli				cli
.880b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.880c					GXPositionCalc:
.880c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.880e	48		pha				pha
.880f	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8812	85 3c		sta $3c				sta 	gxzScreen
.8814	64 3d		stz $3d				stz 	gxzScreen+1
.8816	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.8818	26 3d		rol $3d				rol 	gxzScreen+1
.881a	06 3c		asl $3c				asl 	gxzScreen
.881c	26 3d		rol $3d				rol 	gxzScreen+1
.881e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.881f	65 3c		adc $3c				adc 	gxzScreen
.8821	85 3c		sta $3c				sta 	gxzScreen
.8823	90 02		bcc $8827			bcc 	_GXPCNoCarry
.8825	e6 3d		inc $3d				inc 	gxzScreen+1
.8827					_GXPCNoCarry:
.8827	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8829	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.882b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.882d	85 36		sta $36				sta 	gxzTemp0
.882f	64 3d		stz $3d				stz 	gxzScreen+1
.8831	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8833					_GXPCMultiply32:
.8833	06 3c		asl $3c				asl 	gxzScreen
.8835	26 3d		rol $3d				rol 	gxzScreen+1
.8837	3a		dec a				dec 	a
.8838	d0 f9		bne $8833			bne 	_GXPCMultiply32
.883a	18		clc				clc
.883b	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.883e	65 3c		adc $3c				adc 	gxzScreen
.8840	8d 45 06	sta $0645			sta 	gsOffset
.8843	ad 33 06	lda $0633			lda 	GXX0+1
.8846	65 3d		adc $3d				adc 	gxzScreen+1
.8848	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.884a	90 04		bcc $8850			bcc 	_GXPCNoOverflow
.884c	29 1f		and #$1f			and 	#$1F 						; fix it up
.884e	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8850					_GXPCNoOverflow:
.8850	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8852	85 3d		sta $3d				sta 	gxzScreen+1
.8854	64 3c		stz $3c				stz 	gxzScreen
.8856	18		clc				clc
.8857	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8859	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.885c	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.885e	68		pla				pla
.885f	85 36		sta $36				sta 	gxzTemp0
.8861	60		rts				rts
.8862					GXMovePositionDown:
.8862	18		clc				clc 								; add 320 to offset/temp+1
.8863	ad 45 06	lda $0645			lda 	gsOffset
.8866	69 40		adc #$40			adc 	#64
.8868	8d 45 06	sta $0645			sta 	gsOffset
.886b	a5 3d		lda $3d				lda 	gxzScreen+1
.886d	69 01		adc #$01			adc 	#1
.886f	85 3d		sta $3d				sta 	gxzScreen+1
.8871	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8873	90 07		bcc $887c			bcc 	_GXMPDExit
.8875	38		sec				sec  								; next page
.8876	e9 20		sbc #$20			sbc 	#$20
.8878	85 3d		sta $3d				sta 	gxzScreen+1
.887a	e6 0b		inc $0b				inc 	GXEditSlot
.887c					_GXMPDExit:
.887c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.887d					GXFindSprite:
.887d	aa		tax				tax
.887e	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8881	85 0b		sta $0b				sta 	GXEditSlot
.8883	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.8886	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.8889	f0 33		beq $88be			beq 	_GXFSFail
.888b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.888e	8d e1 06	sta $06e1			sta 	GXSpriteOffset+1
.8891	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8894	48		pha				pha 								; save twice
.8895	48		pha				pha
.8896	29 03		and #$03			and 	#3 							; get sprite size
.8898	8d de 06	sta $06de			sta 	GXSizeBits 					; save raw (0-3)
.889b	aa		tax				tax
.889c	bd c0 88	lda $88c0,x			lda 	_GXFXSSTTable,x 			; read sprite size
.889f	8d dd 06	sta $06dd			sta 	GXSizePixels 					; save (8/16/24/32)
.88a2	68		pla				pla 								; get LUT
.88a3	4a		lsr a				lsr		a
.88a4	4a		lsr a				lsr		a
.88a5	29 03		and #$03			and 	#3
.88a7	8d df 06	sta $06df			sta 	GXSpriteLUT
.88aa	68		pla				pla 								; address, neeeds to be x 4
.88ab	29 f0		and #$f0			and 	#$F0
.88ad	8d e0 06	sta $06e0			sta 	GXSpriteOffset
.88b0	0e e0 06	asl $06e0			asl 	GXSpriteOffset
.88b3	2e e1 06	rol $06e1			rol 	GXSpriteOffset+1
.88b6	0e e0 06	asl $06e0			asl 	GXSpriteOffset
.88b9	2e e1 06	rol $06e1			rol 	GXSpriteOffset+1
.88bc	18		clc				clc
.88bd	60		rts				rts
.88be					_GXFSFail:
.88be	38		sec				sec
.88bf	60		rts				rts
.88c0					_GXFXSSTTable:
>88c0	08 10 18 20					.byte 	8,16,24,32
.06dd					GXSizePixels:
>06dd							.fill 	1
.06de					GXSizeBits:
>06de							.fill 	1
.06df					GXSpriteLUT:
>06df							.fill 	1
.06e0					GXSpriteOffset:
>06e0							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.88c4					GXSortXY:
.88c4	20 e2 88	jsr $88e2			jsr 	GXSortY 					; will be sorted on Y now
.88c7	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.88ca	cd 36 06	cmp $0636			cmp 	gxX1
.88cd	ad 33 06	lda $0633			lda 	gXX0+1
.88d0	ed 37 06	sbc $0637			sbc 	gXX1+1
.88d3	90 0c		bcc $88e1			bcc 	_GXSXYExit 					; X0 < X1 exit
.88d5	a2 00		ldx #$00			ldx 	#0 							; swap them over
.88d7	a0 04		ldy #$04			ldy 	#4
.88d9	20 f6 88	jsr $88f6			jsr 	GXSwapXY
.88dc	e8		inx				inx
.88dd	c8		iny				iny
.88de	20 f6 88	jsr $88f6			jsr 	GXSwapXY
.88e1					_GXSXYExit:
.88e1	60		rts				rts
.88e2					GXSortY:
.88e2	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.88e5	cd 38 06	cmp $0638			cmp 	gxY1
.88e8	90 0b		bcc $88f5			bcc 	_GXSYSorted
.88ea	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88ec	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88ee					_GXSwap1:
.88ee	20 f6 88	jsr $88f6			jsr 	GXSwapXY
.88f1	88		dey				dey
.88f2	ca		dex				dex
.88f3	10 f9		bpl $88ee			bpl 	_GXSwap1
.88f5					_GXSYSorted:
.88f5	60		rts				rts
.88f6					GXSwapXY:
.88f6	bd 32 06	lda $0632,x			lda 	gxX0,x
.88f9	48		pha				pha
.88fa	b9 32 06	lda $0632,y			lda 	gxX0,y
.88fd	9d 32 06	sta $0632,x			sta 	gxX0,x
.8900	68		pla				pla
.8901	99 32 06	sta $0632,y			sta 	gxX0,y
.8904	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8905					AssembleGroup1:
.8905	a9 ff		lda #$ff			lda 	#$FF
.8907	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.890a	80 02		bra $890e			bra 	AsmGroup12
.890c					AssembleGroup2:
.890c	a5 00		lda $00				lda 	$00
.890e					AsmGroup12:
.890e	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8911	68		pla				pla 								; pop the return address to access the information following.
.8912	fa		plx				plx
.8913	20 9c 89	jsr $899c			jsr 	AccessParameters 			; get opcode and save as base
.8916	8d a4 04	sta $04a4			sta 	BaseOpcode
.8919	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.891c	d0 08		bne $8926			bne 	_AG12HaveMask
.891e	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8920	20 a4 89	jsr $89a4			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8923	8d a5 04	sta $04a5			sta 	ModeMask
.8926					_AG12HaveMask:
.8926	20 df 8a	jsr $8adf			jsr 	TypeAndCalculateOperand 	; get zero page type
.8929	da		phx				phx 								; save found address mode
.892a	20 08 8a	jsr $8a08			jsr 	AssembleModeX
.892d	fa		plx				plx  								; restore address mode
.892e	b0 0b		bcs $893b			bcs 	_AG12Exit
.8930	20 3c 89	jsr $893c			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8933	20 08 8a	jsr $8a08			jsr 	AssembleModeX
.8936	b0 03		bcs $893b			bcs 	_AG12Exit
.8938	4c 38 b4	jmp $b438			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.893b					_AG12Exit:
.893b	60		rts				rts
.893c					PromoteToAbsolute:
.893c	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.893e	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8940	f0 19		beq $895b			beq 	_PTADo
.8942	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8944	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8946	f0 13		beq $895b			beq 	_PTADo
.8948	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.894a	e0 80		cpx #$80			cpx 	#AM_ZEROY
.894c	f0 0d		beq $895b			beq 	_PTADo
.894e	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8950	e0 d1		cpx #$d1			cpx 	#AM_IND
.8952	f0 07		beq $895b			beq 	_PTADo
.8954	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8956	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8958	f0 01		beq $895b			beq 	_PTADo
.895a	60		rts				rts
.895b					_PTADo:
.895b	aa		tax				tax
.895c	60		rts				rts
.895d					AssembleGroup3:
.895d	68		pla				pla 								; get parameters, which is just the opcode.
.895e	fa		plx				plx
.895f	20 9c 89	jsr $899c			jsr 	AccessParameters 			; get and output opcode
.8962	20 b4 89	jsr $89b4			jsr 	AssemblerWriteByte
.8965	20 43 8b	jsr $8b43			jsr 	CalculateOperand 			; get a 16 bit operand
.8968	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.896b	38		sec				sec
.896c	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.896f	48		pha				pha 								; LSB in A
.8970	ad 10 04	lda $0410			lda 	NSMantissa1
.8973	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8976	aa		tax				tax 								; MSB in X
.8977	68		pla				pla
.8978	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8979	69 7f		adc #$7f			adc 	#$7F
.897b	90 01		bcc $897e			bcc 	_AG3NoCarry
.897d	e8		inx				inx
.897e					_AG3NoCarry:
.897e	38		sec				sec 								; fix back and write out anyways.
.897f	e9 80		sbc #$80			sbc 	#$80
.8981	20 b4 89	jsr $89b4			jsr 	AssemblerWriteByte
.8984	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8986	f0 0a		beq $8992			beq 	_AG3Exit
.8988	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.898b	29 01		and #$01			and 	#1
.898d	f0 03		beq $8992			beq 	_AG3Exit
.898f	4c 3d b4	jmp $b43d			jmp 	RangeError 					; no, branch is out of range
.8992					_AG3Exit:
.8992	60		rts				rts
.8993					AssembleGroup4:
.8993	68		pla				pla 								; pop address
.8994	fa		plx				plx
.8995	20 9c 89	jsr $899c			jsr 	AccessParameters 			; access and get first
.8998	20 b4 89	jsr $89b4			jsr 	AssemblerWriteByte 			; output it.
.899b	60		rts				rts
.899c					AccessParameters:
.899c	8d a1 04	sta $04a1			sta 	ParamStart
.899f	8e a2 04	stx $04a2			stx 	ParamStart+1
.89a2	a9 01		lda #$01			lda 	#1
.89a4					GetParameter:
.89a4	5a		phy				phy
.89a5	a8		tay				tay
.89a6	ad a1 04	lda $04a1			lda 	ParamStart
.89a9	85 36		sta $36				sta 	zTemp0
.89ab	ad a2 04	lda $04a2			lda 	ParamStart+1
.89ae	85 37		sta $37				sta 	zTemp0+1
.89b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.89b2	7a		ply				ply
.89b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.89b4					AssemblerWriteByte:
.89b4	48		pha			pha
.89b5	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.89b8	29 02		and #$02		and 	#2
.89ba	f0 1b		beq $89d7		beq 	_AWBNoPrint
.89bc	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.89bf	20 f2 89	jsr $89f2		jsr 	PrintHex
.89c2	ad 9e 04	lda $049e		lda		AssemblerAddress
.89c5	20 f2 89	jsr $89f2		jsr 	PrintHex
.89c8	a9 20		lda #$20		lda 	#' '
.89ca	20 f1 b5	jsr $b5f1		jsr 	EXTPrintCharacter
.89cd	68		pla			pla 									; print byte
.89ce	48		pha			pha
.89cf	20 f2 89	jsr $89f2		jsr 	PrintHex
.89d2	a9 0d		lda #$0d		lda 	#13
.89d4	20 f1 b5	jsr $b5f1		jsr 	EXTPrintCharacter
.89d7					_AWBNoPrint:
.89d7	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89da	85 36		sta $36			sta 	zTemp0
.89dc	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89df	f0 0e		beq $89ef		beq 	_AWBRange
.89e1	85 37		sta $37			sta 	zTemp0+1
.89e3	68		pla			pla 									; write byte out
.89e4	92 36		sta ($36)		sta 	(zTemp0)
.89e6	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89e9	d0 03		bne $89ee		bne 	_AWBNoCarry
.89eb	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89ee					_AWBNoCarry:
.89ee	60		rts			rts
.89ef					_AWBRange:
.89ef	4c 3d b4	jmp $b43d		jmp 	RangeError
.89f2					PrintHex:
.89f2	48		pha				pha
.89f3	4a		lsr a				lsr 	a
.89f4	4a		lsr a				lsr 	a
.89f5	4a		lsr a				lsr 	a
.89f6	4a		lsr a				lsr 	a
.89f7	20 fb 89	jsr $89fb			jsr 	_PrintNibble
.89fa	68		pla				pla
.89fb					_PrintNibble:
.89fb	29 0f		and #$0f			and 	#15
.89fd	c9 0a		cmp #$0a			cmp 	#10
.89ff	90 02		bcc $8a03			bcc 	_NoShift
.8a01	69 06		adc #$06			adc 	#6
.8a03					_NoShift:
.8a03	69 30		adc #$30			adc 	#48
.8a05	4c f1 b5	jmp $b5f1			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8a08					AssembleModeX:
.8a08	5a		phy				phy
.8a09	ad a3 04	lda $04a3			lda 	IsGroup1
.8a0c	f0 17		beq $8a25			beq 	_AMXGroup2
.8a0e	8a		txa				txa 							; is it in group # 1
.8a0f	29 40		and #$40			and 	#AM_ISG1
.8a11	f0 50		beq $8a63			beq 	_AMXFail 				; no, give up.
.8a13	8a		txa				txa 							; get back.
.8a14	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8a16	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8a18	d0 22		bne $8a3c			bne 	_AMXHaveInfo
.8a1a	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8a1d	c9 81		cmp #$81			cmp 	#$81
.8a1f	f0 42		beq $8a63			beq 	_AMXFail
.8a21	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8a23	80 17		bra $8a3c			bra 	_AMXHaveInfo 			; odd design decision there.
.8a25					_AMXGroup2:
.8a25	8a		txa				txa 							; is it in group 2 ?
.8a26	29 20		and #$20			and 	#AM_ISG2
.8a28	f0 39		beq $8a63			beq 	_AMXFail 				; no, give up.
.8a2a	8a		txa				txa 							; get the offset into Y
.8a2b	29 1f		and #$1f			and 	#$1F
.8a2d	4a		lsr a				lsr 	a 						; make it 0-7.
.8a2e	4a		lsr a				lsr  	a
.8a2f	a8		tay				tay
.8a30	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a33					_AMXCheckOkay:
.8a33	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a34	88		dey				dey
.8a35	10 fc		bpl $8a33			bpl 	_AMXCheckOkay
.8a37	90 2a		bcc $8a63			bcc 	_AMXFail 				; not allowed.
.8a39	8a		txa				txa  							; get mask back
.8a3a	29 1f		and #$1f			and 	#$1F
.8a3c					_AMXHaveInfo:
.8a3c	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a3e	10 05		bpl $8a45			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a40	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a43	d0 1e		bne $8a63			bne 	_AMXFail
.8a45					_AMXAnySize:
.8a45	18		clc				clc 							; add offset to the base opcode
.8a46	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a49					_AMXOutputCode:
.8a49	20 b4 89	jsr $89b4			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a4c	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a4e	f0 10		beq $8a60			beq 	_AMXExit
.8a50	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a53	20 b4 89	jsr $89b4			jsr 	AssemblerWriteByte
.8a56	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a58	30 06		bmi $8a60			bmi 	_AMXExit
.8a5a	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a5d	20 b4 89	jsr $89b4			jsr 	AssemblerWriteByte
.8a60					_AMXExit:
.8a60	7a		ply				ply
.8a61	38		sec				sec
.8a62	60		rts				rts
.8a63					_AMXFail:
.8a63	a0 00		ldy #$00			ldy 	#0
.8a65					_AMXCheckOddities:
.8a65	8a		txa				txa
.8a66	d9 8e 8a	cmp $8a8e,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a69	d0 16		bne $8a81			bne 	_AMXCONext
.8a6b	b9 8c 8a	lda $8a8c,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a6e	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a71	d0 0e		bne $8a81			bne 	_AMXCONext
.8a73	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a75	10 05		bpl $8a7c			bpl 	_AMXCONotZero
.8a77	ad 10 04	lda $0410			lda 	NSMantissa1
.8a7a	d0 05		bne $8a81			bne 	_AMXCONext
.8a7c					_AMXCONotZero:
.8a7c	b9 8d 8a	lda $8a8d,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a7f	80 c8		bra $8a49			bra 	_AMXOutputCode 			; and assemble it
.8a81					_AMXCONext:
.8a81	c8		iny				iny
.8a82	c8		iny				iny
.8a83	c8		iny				iny
.8a84	b9 8c 8a	lda $8a8c,y			lda 	ExtraOpcode+0,y 		; end of table
.8a87	d0 dc		bne $8a65			bne 	_AMXCheckOddities
.8a89					_AMXCOFail:
.8a89	7a		ply				ply
.8a8a	18		clc				clc
.8a8b	60		rts				rts
.8a8c					ExtraOpcode:
>8a8c	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a8f	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a92	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a95	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a98	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a9b	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a9e	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8aa1	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8aa4	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8aa7	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8aaa	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8aab					LabelHere:
.8aab	c8		iny				iny 								; skip .
.8aac	a2 00		ldx #$00			ldx 	#0 							; get a term
.8aae	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm 				; get a term
.8ab1	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8ab4	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8ab6	d0 24		bne $8adc			bne 	_ALType
.8ab8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8abb	85 36		sta $36				sta 	zTemp0
.8abd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ac0	85 37		sta $37				sta 	zTemp0+1
.8ac2	5a		phy				phy 								; copy address in.
.8ac3	a0 01		ldy #$01			ldy 	#1
.8ac5	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8ac8	92 36		sta ($36)			sta 	(zTemp0)
.8aca	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8acd	91 36		sta ($36),y			sta 	(zTemp0),y
.8acf	c8		iny				iny
.8ad0	a9 00		lda #$00			lda 	#0
.8ad2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ad4	c8		iny				iny
.8ad5	91 36		sta ($36),y			sta 	(zTemp0),y
.8ad7	c8		iny				iny
.8ad8	91 36		sta ($36),y			sta 	(zTemp0),y
.8ada	7a		ply				ply
.8adb	60		rts				rts
.8adc					_ALType:
.8adc	4c 42 b4	jmp $b442			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8adf					TypeAndCalculateOperand:
.8adf	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae1	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ae3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ae5	f0 5b		beq $8b42			beq 	_TACOExit
.8ae7	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ae9	f0 57		beq $8b42			beq 	_TACOExit
.8aeb	c8		iny				iny
.8aec	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8aee	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8af0	f0 51		beq $8b43			beq 	CalculateOperand
.8af2	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8af4	f0 1f		beq $8b15			beq 	_TACOIndirect
.8af6	88		dey				dey 								; undo get of first character
.8af7	20 43 8b	jsr $8b43			jsr 	CalculateOperand 			; get operand
.8afa	b1 30		lda ($30),y			lda 	(codePtr),y
.8afc	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8afe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b00	d0 40		bne $8b42			bne 	_TACOExit
.8b02	c8		iny				iny
.8b03	20 c1 ad	jsr $adc1			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b06	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8b08	c9 58		cmp #$58			cmp 	#'X'
.8b0a	f0 36		beq $8b42			beq 	_TACOExit
.8b0c	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8b0e	c9 59		cmp #$59			cmp 	#'Y'
.8b10	f0 30		beq $8b42			beq 	_TACOExit
.8b12					_TACOSyntax:
.8b12	4c 38 b4	jmp $b438			jmp 	SyntaxError
.8b15					_TACOIndirect:
.8b15	20 43 8b	jsr $8b43			jsr 	CalculateOperand 			; get the operand
.8b18	b1 30		lda ($30),y			lda 	(codePtr),y
.8b1a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8b1c	f0 17		beq $8b35			beq 	_TACOIndX
.8b1e	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8b21	b1 30		lda ($30),y			lda 	(codePtr),y
.8b23	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b25	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b27	d0 19		bne $8b42			bne 	_TACOExit
.8b29	c8		iny				iny
.8b2a	20 c1 ad	jsr $adc1			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b2d	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b2f	d0 e1		bne $8b12			bne 	_TACOSyntax
.8b31	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b33	80 0d		bra $8b42			bra 	_TACOExit
.8b35					_TACOIndX:
.8b35	c8		iny				iny
.8b36	20 c1 ad	jsr $adc1			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b39	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b3b	d0 d5		bne $8b12			bne 	_TACOSyntax
.8b3d	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket			; check )
.8b40	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b42					_TACOExit:
.8b42	60		rts				rts
.8b43					CalculateOperand:
.8b43	48		pha				pha
.8b44	da		phx				phx
.8b45	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b47	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger
.8b4a	fa		plx				plx
.8b4b	68		pla				pla
.8b4c	60		rts				rts
.adc1					TACOCheckXY:
.adc1	b1 30		lda ($30),y			lda 	(codePtr),y
.adc3	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.adc5	c9 40		cmp #$40			cmp 	#$40
.adc7	d0 21		bne $adea			bne 	_TCXYFail
.adc9	b1 30		lda ($30),y			lda 	(codePtr),y
.adcb	18		clc				clc
.adcc	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.adce	85 37		sta $37				sta 	zTemp0+1
.add0	c8		iny				iny
.add1	b1 30		lda ($30),y			lda 	(codePtr),y
.add3	c8		iny				iny
.add4	85 36		sta $36				sta 	zTemp0
.add6	5a		phy				phy 								; save position
.add7	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.add9	b1 36		lda ($36),y			lda 	(zTemp0),y
.addb	d0 0c		bne $ade9			bne 	_TCXYPopFail
.addd	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.addf	b1 36		lda ($36),y			lda 	(zTemp0),y
.ade1	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ade3	f0 08		beq $aded			beq 	_TCXYFound
.ade5	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ade7	f0 04		beq $aded			beq 	_TCXYFound
.ade9					_TCXYPopFail:
.ade9	7a		ply				ply
.adea					_TCXYFail:
.adea	a9 00		lda #$00			lda 	#0
.adec	60		rts				rts
.aded					_TCXYFound:
.aded	7a		ply				ply 								; restore position
.adee	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.adf0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b4d					EditProgramCode:
.8b4d	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8b50	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8b53	20 6b a6	jsr $a66b			jsr 	MemorySearch
.8b56	90 05		bcc $8b5d			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b58	d0 03		bne $8b5d			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b5a	20 7c b6	jsr $b67c			jsr 	MemoryDeleteLine 			; delete the line
.8b5d					_EPCNoDelete:
.8b5d	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8b60	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b62	f0 0d		beq $8b71			beq 	_EPCNoInsert
.8b64	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b67	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b6a	20 6b a6	jsr $a66b			jsr 	MemorySearch
.8b6d	18		clc				clc 								; insert at this point.
.8b6e	20 b3 b6	jsr $b6b3			jsr 	MemoryInsertLine 			; insert the line
.8b71					_EPCNoInsert:
.8b71	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b72					WarmStart:
.8b72	a2 ff		ldx #$ff			ldx 	#$FF
.8b74	9a		txs				txs
.8b75	20 07 b6	jsr $b607			jsr 	EXTInputLine 				; get line to lineBuffer
.8b78	20 42 ab	jsr $ab42			jsr 	TokeniseLine 				; tokenise the line
.8b7b	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8b7e	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8b81	d0 17		bne $8b9a			bne 	_WSEditCode 				; if so,edit code.
.8b83	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b86	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8b88	85 30		sta $30				sta 	codePtr
.8b8a	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b8c	85 31		sta $31				sta 	codePtr+1
.8b8e	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8b91	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b93	f0 dd		beq $8b72			beq 	WarmStart
.8b95	20 d8 94	jsr $94d8			jsr 	RUNCodePointerLine 			; execute that line.
.8b98	80 d8		bra $8b72			bra 	WarmStart
.8b9a					_WSEditCode:
.8b9a	20 4d 8b	jsr $8b4d			jsr 	EditProgramCode
.8b9d	20 0b 8c	jsr $8c0b			jsr 	ClearCommand
.8ba0	80 d0		bra $8b72			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8ba2					AssembleCommand:
.8ba2	a2 00		ldx #$00			ldx 	#0
.8ba4	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger 		; start address
.8ba7	ad 08 04	lda $0408			lda 	NSMantissa0
.8baa	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8bad	ad 10 04	lda $0410			lda 	NSMantissa1
.8bb0	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8bb3	20 52 ae	jsr $ae52			jsr 	CheckComma
.8bb6	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; options
.8bb9	ad 08 04	lda $0408			lda 	NSMantissa0
.8bbc	8d a0 04	sta $04a0			sta 	AssemblerControl
.8bbf	60		rts				rts
.8bc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8bc1					AssertCommand:
.8bc1	a2 00		ldx #$00			ldx 	#0
.8bc3	20 6f a5	jsr $a56f			jsr 	EvaluateInteger 			; the assert test
.8bc6	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; exit if result is non zero.
.8bc9	d0 05		bne $8bd0			bne 	_ACExit
.8bcb	a9 0a		lda #$0a		lda	#10
.8bcd	4c d1 99	jmp $99d1		jmp	ErrorHandler
.8bd0					_ACExit:
.8bd0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8bd1					CallCommand:
.8bd1	a2 00		ldx #$00			ldx 	#0
.8bd3	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger
.8bd6					_CCClear
.8bd6	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8bd7	20 0c a6	jsr $a60c			jsr 	NSMSetZero
.8bda	e0 04		cpx #$04			cpx 	#4
.8bdc	d0 f8		bne $8bd6			bne 	_CCClear
.8bde	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8be0					_CCCParam:
.8be0	b1 30		lda ($30),y			lda 	(codePtr),y
.8be2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8be4	d0 09		bne $8bef			bne 	_CCCRun6502
.8be6	c8		iny				iny 								; skip comma
.8be7	e8		inx				inx	 								; next level
.8be8	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8beb	e0 03		cpx #$03			cpx 	#3
.8bed	90 f1		bcc $8be0			bcc 	_CCCParam 					; done all 3 ?
.8bef					_CCCRun6502:
.8bef	5a		phy				phy 								; save position
.8bf0	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bf3	85 37		sta $37				sta 	zTemp0+1
.8bf5	ad 08 04	lda $0408			lda 	NSMantissa0
.8bf8	85 36		sta $36				sta 	zTemp0
.8bfa	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bfd	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c00	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c03	20 08 8c	jsr $8c08			jsr 	_CCCZTemp0 					; call zTemp0
.8c06	7a		ply				ply 								; restore position and exit
.8c07	60		rts				rts
.8c08					_CCCZTemp0:
.8c08	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8c0b					ClearCommand:
.8c0b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8c0d	85 36		sta $36				sta 	0+zTemp0
.8c0f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8c11	85 37		sta $37				sta 	1+zTemp0
.8c13					_ClearZeroLoop:
.8c13	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8c15	f0 24		beq $8c3b			beq 	_ClearZeroEnd
.8c17	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8c19	a9 00		lda #$00			lda 	#0
.8c1b					_ClearOneVariable:
.8c1b	91 36		sta ($36),y			sta 	(zTemp0),y
.8c1d	c8		iny				iny
.8c1e	c0 08		cpy #$08			cpy 	#8
.8c20	d0 f9		bne $8c1b			bne 	_ClearOneVariable
.8c22	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c24	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c26	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c28	d0 04		bne $8c2e			bne 	_ClearNotProcedure
.8c2a	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c2c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c2e					_ClearNotProcedure:
.8c2e	18		clc				clc 								; go to the next variable
.8c2f	b2 36		lda ($36)			lda 	(zTemp0)
.8c31	65 36		adc $36				adc 	zTemp0
.8c33	85 36		sta $36				sta 	zTemp0
.8c35	90 dc		bcc $8c13			bcc 	_ClearZeroLoop
.8c37	e6 37		inc $37				inc 	zTemp0+1
.8c39	80 d8		bra $8c13			bra 	_ClearZeroLoop
.8c3b					_ClearZeroEnd:
.8c3b	18		clc				clc
.8c3c	a5 36		lda $36				lda 	zTemp0
.8c3e	69 01		adc #$01			adc 	#1
.8c40	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c43	a5 37		lda $37				lda 	zTemp0+1
.8c45	69 00		adc #$00			adc 	#0
.8c47	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c4a	20 25 a7	jsr $a725			jsr 	StackReset
.8c4d	20 96 b7	jsr $b796			jsr 	StringSystemInitialise
.8c50	20 da 98	jsr $98da			jsr 	ProcedureScan
.8c53	20 94 94	jsr $9494			jsr 	Command_Restore
.8c56	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c59	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c5c	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c5f	20 a6 a2	jsr $a2a6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c62	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c63					ClearScreen:
.8c63	5a		phy				phy
.8c64	20 ee b5	jsr $b5ee			jsr 	EXTClearScreen
.8c67	7a		ply				ply
.8c68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c69					Command_Data:
.8c69	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c6b	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c6d	20 2c 99	jsr $992c			jsr 	ScanForward
.8c70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c71					DimCommand:
.8c71	b1 30		lda ($30),y			lda 	(codePtr),y
.8c73	29 c0		and #$c0			and 	#$C0
.8c75	c9 40		cmp #$40			cmp 	#$40
.8c77	d0 7a		bne $8cf3			bne 	_DCSyntax
.8c79	b1 30		lda ($30),y			lda 	(codePtr),y
.8c7b	18		clc				clc
.8c7c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c7e	85 3f		sta $3f				sta 	zaTemp+1
.8c80	c8		iny				iny
.8c81	b1 30		lda ($30),y			lda 	(codePtr),y
.8c83	c8		iny				iny
.8c84	85 3e		sta $3e				sta 	zaTemp
.8c86	5a		phy				phy
.8c87	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c89	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c8b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c8d	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c8f	f0 62		beq $8cf3			beq 	_DCSyntax
.8c91	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c93	29 04		and #$04			and 	#NSBIsArray
.8c95	f0 64		beq $8cfb			beq 	_DCType
.8c97	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c99	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c9b	d0 59		bne $8cf6			bne 	_DCRedefine
.8c9d	7a		ply				ply
.8c9e	20 fe 8c	jsr $8cfe			jsr 	_DCGetSize 				; get array size, check it.
.8ca1	5a		phy				phy
.8ca2	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8ca4	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8ca6	7a		ply				ply 							; is there a second (e.g. ,x)
.8ca7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cab	d0 0a		bne $8cb7			bne 	_DCOneDimension
.8cad	c8		iny				iny 							; skip comma
.8cae	20 fe 8c	jsr $8cfe			jsr 	_DCGetSize 				; get 2nd array size
.8cb1	5a		phy				phy
.8cb2	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8cb4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cb6	7a		ply				ply
.8cb7					_DCOneDimension:
.8cb7	5a		phy				phy 							; save position
.8cb8	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8cba	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cbc	aa		tax				tax
.8cbd	c8		iny				iny
.8cbe	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cc0	e8		inx				inx 							; bump them.
.8cc1	1a		inc a				inc 	a
.8cc2	20 d4 b2	jsr $b2d4			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8cc5	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8cc7	29 e0		and #$e0			and 	#$E0
.8cc9	d0 23		bne $8cee			bne 	_DCSize
.8ccb	a0 02		ldy #$02			ldy 	#2 						; get base type
.8ccd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ccf	20 0c 8d	jsr $8d0c			jsr 	ScaleByBaseType 		; scale by base type
.8cd2	a5 36		lda $36				lda 	zTemp0
.8cd4	a6 37		ldx $37				ldx 	zTemp0+1
.8cd6	20 68 a2	jsr $a268			jsr 	AllocateXABytes 		; allocate memory
.8cd9	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8cdb	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cdd	c8		iny				iny
.8cde	8a		txa				txa
.8cdf	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ce1	7a		ply				ply 							; get position back
.8ce2	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket 		; check )
.8ce5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce7	c8		iny				iny 							; consume in case
.8ce8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cea	f0 85		beq $8c71			beq 	DimCommand
.8cec	88		dey				dey 							; undo consume
.8ced	60		rts				rts
.8cee					_DCSize:
.8cee	a9 16		lda #$16		lda	#22
.8cf0	4c d1 99	jmp $99d1		jmp	ErrorHandler
.8cf3					_DCSyntax:
.8cf3	4c 38 b4	jmp $b438			jmp 	SyntaxError
.8cf6					_DCRedefine:
.8cf6	a9 15		lda #$15		lda	#21
.8cf8	4c d1 99	jmp $99d1		jmp	ErrorHandler
.8cfb					_DCType:
.8cfb	4c 42 b4	jmp $b442			jmp 	TypeError
.8cfe					_DCGetSize:
.8cfe	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d00	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 	; get array dimension
.8d03	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d05	f0 e7		beq $8cee			beq 	_DCSize
.8d07	c9 fe		cmp #$fe			cmp 	#254
.8d09	f0 e3		beq $8cee			beq 	_DCSize
.8d0b	60		rts				rts
.8d0c					ScaleByBaseType:
.8d0c	29 10		and #$10			and 	#NSBIsString 			; is it string
.8d0e	d0 19		bne $8d29			bne 	_SBBTString
.8d10	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8d12	48		pha				pha
.8d13	a5 36		lda $36				lda 	zTemp0
.8d15	48		pha				pha
.8d16	06 36		asl $36				asl 	zTemp0 					; x 2
.8d18	26 37		rol $37				rol 	zTemp0+1
.8d1a	06 36		asl $36				asl 	zTemp0 					; x 4
.8d1c	26 37		rol $37				rol 	zTemp0+1
.8d1e	68		pla				pla 							; add stacked value = x 5
.8d1f	65 36		adc $36				adc 	zTemp0
.8d21	85 36		sta $36				sta 	zTemp0
.8d23	68		pla				pla
.8d24	65 37		adc $37				adc 	zTemp0+1
.8d26	85 37		sta $37				sta 	zTemp0+1
.8d28	60		rts				rts
.8d29					_SBBTString:
.8d29	06 36		asl $36				asl 	zTemp0
.8d2b	26 37		rol $37				rol 	zTemp0+1
.8d2d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d2e					EndCommand:
.8d2e	4c 72 8b	jmp $8b72			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8d31					UnaryEvent:
.8d31	fa		plx				plx
.8d32	20 19 97	jsr $9719			jsr 	TimerToStackX 				; timer in +0
.8d35	e8		inx				inx  								; put reference into +1
.8d36	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm
.8d39	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d3c	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d3e	d0 57		bne $8d97			bne 	_UEType
.8d40	e8		inx				inx 								; put the step in +2
.8d41	20 52 ae	jsr $ae52			jsr 	CheckComma
.8d44	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger
.8d47	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.8d4a	ca		dex				dex
.8d4b	ca		dex				dex
.8d4c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8d4f	85 36		sta $36				sta 	zTemp0
.8d51	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8d54	85 37		sta $37				sta 	zTemp0+1
.8d56	5a		phy				phy
.8d57	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d59	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d5b	30 36		bmi $8d93			bmi 	_UEFalse 					; exit if signed.
.8d5d	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d5f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d62	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d64	c8		iny				iny
.8d65	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d68	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d6a	c8		iny				iny
.8d6b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d6e	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d70	90 21		bcc $8d93			bcc 	_UEFalse 					; no, return FALSE.
.8d72	18		clc				clc
.8d73	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d75	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d78	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d7b	91 36		sta ($36),y			sta 	(zTemp0),y
.8d7d	c8		iny				iny
.8d7e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d81	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d84	91 36		sta ($36),y			sta 	(zTemp0),y
.8d86	c8		iny				iny
.8d87	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d8a	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d8d	91 36		sta ($36),y			sta 	(zTemp0),y
.8d8f	7a		ply				ply
.8d90	4c 3e 9a	jmp $9a3e			jmp 	ReturnTrue
.8d93					_UEFalse:
.8d93	7a		ply				ply 								; restore Y
.8d94	4c 4a 9a	jmp $9a4a			jmp 	ReturnFalse 				; and return False
.8d97					_UEType:
.8d97	4c 42 b4	jmp $b442			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d9a					ForCommand:
.8d9a	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d9c	20 c0 a6	jsr $a6c0			jsr 	StackOpen
.8d9f	a2 00		ldx #$00			ldx 	#0
.8da1	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm
.8da4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8da7	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8da9	d0 49		bne $8df4			bne		_FCError
.8dab	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8dad	20 5a ae	jsr $ae5a			jsr 	CheckNextA
.8db0	e8		inx				inx
.8db1	20 6f a5	jsr $a56f			jsr 	EvaluateInteger 			; <from> in +1
.8db4	b1 30		lda ($30),y			lda 	(codePtr),y
.8db6	c8		iny				iny 								; consume it
.8db7	48		pha				pha 								; save on stack for later
.8db8	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8dba	f0 04		beq $8dc0			beq 	_FCNoSyntax
.8dbc	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8dbe	d0 37		bne $8df7			bne 	_FCSyntaxError
.8dc0					_FCNoSyntax:
.8dc0	e8		inx				inx
.8dc1	20 6f a5	jsr $a56f			jsr 	EvaluateInteger
.8dc4	20 04 a7	jsr $a704			jsr 	STKSaveCodePosition 		; save loop back position
.8dc7	68		pla				pla 								; restore DOWNTO or TO
.8dc8	5a		phy				phy 								; save Y on the stack
.8dc9	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8dcb	f0 02		beq $8dcf			beq 	_FCNotDownTo
.8dcd	a9 02		lda #$02			lda 	#2
.8dcf					_FCNotDownTo:
.8dcf	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8dd0	a0 10		ldy #$10			ldy 	#16
.8dd2	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dd4	a0 06		ldy #$06			ldy 	#6
.8dd6	ad 08 04	lda $0408			lda 	NSMantissa0
.8dd9	91 34		sta ($34),y			sta 	(basicStack),y
.8ddb	ad 10 04	lda $0410			lda 	NSMantissa1
.8dde	c8		iny				iny
.8ddf	91 34		sta ($34),y			sta 	(basicStack),y
.8de1	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8de3	a2 01		ldx #$01			ldx 	#1
.8de5	20 fa 8d	jsr $8dfa			jsr 	FCIntegerToStack
.8de8	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dea	a2 02		ldx #$02			ldx 	#2
.8dec	20 fa 8d	jsr $8dfa			jsr 	FCIntegerToStack
.8def	20 1a 8e	jsr $8e1a			jsr 	CopyIndexToReference
.8df2	7a		ply				ply 								; restore position
.8df3	60		rts				rts
.8df4					_FCError:
.8df4	4c 42 b4	jmp $b442			jmp 	TypeError
.8df7					_FCSyntaxError:
.8df7	4c 38 b4	jmp $b438			jmp 	SyntaxError
.8dfa					FCIntegerToStack:
.8dfa	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dfd	10 03		bpl $8e02			bpl	 	_FCNotNegative
.8dff	20 c1 a5	jsr $a5c1			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e02					_FCNotNegative:
.8e02	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e05	91 34		sta ($34),y			sta 	(basicStack),y
.8e07	c8		iny				iny
.8e08	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e0b	91 34		sta ($34),y			sta 	(basicStack),y
.8e0d	c8		iny				iny
.8e0e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e11	91 34		sta ($34),y			sta 	(basicStack),y
.8e13	c8		iny				iny
.8e14	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e17	91 34		sta ($34),y			sta 	(basicStack),y
.8e19	60		rts				rts
.8e1a					CopyIndexToReference:
.8e1a	5a		phy				phy
.8e1b	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e1d	38		sec				sec 								; (because we copy from offset 8)
.8e1e	b1 34		lda ($34),y			lda 	(basicStack),y
.8e20	e9 08		sbc #$08			sbc 	#8
.8e22	85 36		sta $36				sta 	zTemp0
.8e24	c8		iny				iny
.8e25	b1 34		lda ($34),y			lda 	(basicStack),y
.8e27	e9 00		sbc #$00			sbc 	#0
.8e29	85 37		sta $37				sta 	zTemp0+1
.8e2b	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e2d	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e2f	b1 34		lda ($34),y			lda 	(basicStack),y
.8e31	0a		asl a				asl 	a 							; into carry
.8e32	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e34	90 14		bcc $8e4a			bcc 	_CITRNormal
.8e36	38		sec				sec
.8e37					_CITRNegative:
.8e37	a9 00		lda #$00			lda 	#0
.8e39	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e3b	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3d	c8		iny				iny
.8e3e	ca		dex				dex
.8e3f	d0 f6		bne $8e37			bne 	_CITRNegative
.8e41	88		dey				dey 								; look at MSB of mantissa
.8e42	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e44	09 80		ora #$80			ora 	#$80
.8e46	91 36		sta ($36),y			sta 	(zTemp0),y
.8e48	7a		ply				ply
.8e49	60		rts				rts
.8e4a					_CITRNormal:
.8e4a	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e4c	91 36		sta ($36),y			sta 	(zTemp0),y
.8e4e	c8		iny				iny
.8e4f	ca		dex				dex
.8e50	d0 f8		bne $8e4a			bne 	_CITRNormal
.8e52	7a		ply				ply 								; and exit.
.8e53	60		rts				rts
.8e54					NextCommand:
.8e54	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e56	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e58	20 ec a6	jsr $a6ec			jsr 	StackCheckFrame
.8e5b	5a		phy				phy
.8e5c	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e5e	b1 34		lda ($34),y			lda 	(basicStack),y
.8e60	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e62	30 02		bmi $8e66			bmi 	_NCStepNeg
.8e64	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e66					_NCStepNeg:
.8e66	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e68	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e6a	18		clc				clc
.8e6b					_NCBump:
.8e6b	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e6d	91 34		sta ($34),y			sta 	(basicStack),y
.8e6f	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e71	c8		iny				iny 								; next byte
.8e72	ca		dex				dex 								; do four times
.8e73	d0 f6		bne $8e6b			bne 	_NCBump
.8e75	20 1a 8e	jsr $8e1a			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e78	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e7a	b1 34		lda ($34),y			lda 	(basicStack),y
.8e7c	0a		asl a				asl 	a 							; sign bit to carry
.8e7d	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e7f	85 38		sta $38				sta 	zTemp1
.8e81	90 02		bcc $8e85			bcc 	_NCCompRev 					; use if step is +ve
.8e83	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e85					_NCCompRev:
.8e85	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e87	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e89	85 39		sta $39				sta 	zTemp1+1
.8e8b	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e8d	38		sec				sec
.8e8e					_NCCompare:
.8e8e	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e90	b1 34		lda ($34),y			lda 	(basicStack),y
.8e92	a4 39		ldy $39				ldy 	zTemp1+1
.8e94	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e96	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e98	e6 39		inc $39				inc 	zTemp1+1
.8e9a	ca		dex				dex 								; do it 4 times.
.8e9b	d0 f1		bne $8e8e			bne 	_NCCompare
.8e9d	50 02		bvc $8ea1			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e9f	49 80		eor #$80			eor 	#$80
.8ea1					_NCNoOverflow:
.8ea1	7a		ply				ply 								; restore Y position
.8ea2	0a		asl a				asl 	a 							; is bit 7 set.
.8ea3	90 04		bcc $8ea9			bcc 	_NCLoopback 				; if no , >= so loop back
.8ea5	20 de a6	jsr $a6de			jsr 	StackClose 					; exit the loop
.8ea8	60		rts				rts
.8ea9					_NCLoopBack:
.8ea9	20 15 a7	jsr $a715			jsr 	STKLoadCodePosition 		; loop back
.8eac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8ead					RectangleCommand:
.8ead	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8eaf	80 02		bra $8eb3			bra 	ShapeDrawCmd
.8eb1					CircleCommand:
.8eb1	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8eb3					ShapeDrawCmd:
.8eb3	20 41 8f	jsr $8f41			jsr 	RunGraphicsCommand
.8eb6					ShapeDraw:
.8eb6	0d e3 06	ora $06e3			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8eb9	4c 35 8f	jmp $8f35			jmp 	ExecuteGraphicCommand	 	; and complete
.8ebc					SpriteCommand:
.8ebc	a2 00		ldx #$00			ldx 	#0
.8ebe	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get image number.
.8ec1	5a		phy				phy
.8ec2	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8ec4	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ec7	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8ec9	b0 0d		bcs $8ed8			bcs 	_SCRange
.8ecb	a0 ff		ldy #$ff			ldy 	#255
.8ecd	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8ed0	a9 32		lda #$32			lda 	#25*2
.8ed2	7a		ply				ply
.8ed3	20 41 8f	jsr $8f41			jsr 	RunGraphicsCommand
.8ed6	80 5d		bra $8f35			bra 	ExecuteGraphicCommand
.8ed8					_SCRange:
.8ed8	4c 3d b4	jmp $b43d			jmp 	RangeError
.8edb					ImageCommand:
.8edb	a2 00		ldx #$00			ldx 	#0
.8edd	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get image number.
.8ee0	20 41 8f	jsr $8f41			jsr 	RunGraphicsCommand
.8ee3					ImageRunDraw:
.8ee3	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ee5	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8ee8	ad e9 06	lda $06e9			lda 	gxDrawScale
.8eeb	0a		asl a				asl 	a
.8eec	0a		asl a				asl 	a
.8eed	0a		asl a				asl 	a
.8eee	a8		tay				tay
.8eef	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8ef1	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ef4	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8ef7	60		rts				rts
.8ef8					TextCommand:
.8ef8	a2 00		ldx #$00			ldx 	#0
.8efa	20 57 a5	jsr $a557			jsr 	EvaluateString 				; get text
.8efd	20 41 8f	jsr $8f41			jsr 	RunGraphicsCommand
.8f00					TextRunDraw:
.8f00	09 20		ora #$20			ora 	#16*2 						; move cursor
.8f02	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f05	a0 00		ldy #$00			ldy 	#0
.8f07					_IRDLoop:
.8f07	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8f0a	85 37		sta $37				sta 	zTemp0+1
.8f0c	ad 08 04	lda $0408			lda 	NSMantissa0
.8f0f	85 36		sta $36				sta 	zTemp0
.8f11	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f13	f0 13		beq $8f28			beq 	_IRDExit
.8f15	5a		phy				phy									; save string pos
.8f16	48		pha				pha 								; save char
.8f17	ad e9 06	lda $06e9			lda 	gxDrawScale 				; get scale
.8f1a	0a		asl a				asl 	a
.8f1b	0a		asl a				asl 	a
.8f1c	0a		asl a				asl 	a
.8f1d	a8		tay				tay
.8f1e	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8f20	fa		plx				plx 								; char to draw
.8f21	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f24	7a		ply				ply 								; restore string pos
.8f25	c8		iny				iny
.8f26	90 df		bcc $8f07			bcc 	_IRDLoop 					; go back if no error.
.8f28					_IRDExit:
.8f28	60		rts				rts
.8f29					PlotCommand:
.8f29	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f2b	20 41 8f	jsr $8f41			jsr 	RunGraphicsCommand
.8f2e	80 05		bra $8f35			bra 	ExecuteGraphicCommand
.8f30					LineCommand:
.8f30	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f32	20 41 8f	jsr $8f41			jsr 	RunGraphicsCommand
.8f35					ExecuteGraphicCommand:
.8f35	0d e2 06	ora $06e2			ora 	gxCommandID 				; make a full command
.8f38	20 86 80	jsr $8086			jsr 	GXGraphicDraw 				; draw it and exit
.8f3b	b0 01		bcs $8f3e			bcs 	_EGCError
.8f3d	60		rts				rts
.8f3e					_EGCError:
.8f3e	4c 38 b4	jmp $b438			jmp 	SyntaxError
.8f41					RunGraphicsCommand:
.8f41	8d e2 06	sta $06e2			sta 	gxCommandID					; save TODO graphics command.
.8f44	68		pla				pla 								; pop handler address
.8f45	fa		plx				plx
.8f46	1a		inc a				inc 	a
.8f47	d0 01		bne $8f4a			bne 	_RGINoCarry
.8f49	e8		inx				inx
.8f4a					_RGINoCarry:
.8f4a	8d e7 06	sta $06e7			sta 	GXHandler
.8f4d	8e e8 06	stx $06e8			stx 	GXHandler+1
.8f50					_RGICommandLoop:
.8f50	b1 30		lda ($30),y			lda 	(codePtr),y
.8f52	c8		iny				iny
.8f53	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.8f55	f0 53		beq $8faa			beq 	_RGI_To
.8f57	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8f59	f0 55		beq $8fb0			beq 	_RGI_Here
.8f5b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f5d	f0 3d		beq $8f9c			beq 	_RGI_Exit
.8f5f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f61	f0 39		beq $8f9c			beq 	_RGI_Exit
.8f63	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8f65	f0 3e		beq $8fa5			beq 	_RGI_Frame
.8f67	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.8f69	f0 33		beq $8f9e			beq 	_RGI_Solid
.8f6b	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.8f6d	f0 4b		beq $8fba			beq 	_RGI_By
.8f6f	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.8f71	f0 17		beq $8f8a			beq 	_RGI_Move2
.8f73	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8f75	f0 65		beq $8fdc			beq 	_RGI_Dim
.8f77	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8f79	f0 78		beq $8ff3			beq 	_RGI_Colour
.8f7b	c9 af		cmp #$af			cmp 	#KWD_COLOR
.8f7d	f0 74		beq $8ff3			beq 	_RGI_Colour
.8f7f	ae e2 06	ldx $06e2			ldx 	gxCommandID
.8f82	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f84	d0 03		bne $8f89			bne 	_RGI_Move 					; move
.8f86	4c 1d 90	jmp $901d			jmp		_RGI_SpriteInstructions
.8f89					_RGI_Move:
.8f89	88		dey				dey 								; unpick get.
.8f8a					_RGI_Move2:
.8f8a	20 43 90	jsr $9043			jsr 	GCGetCoordinatePair 		; move to here
.8f8d	20 6a 90	jsr $906a			jsr 	GCCopyPairToStore 			; save
.8f90	5a		phy				phy
.8f91	20 60 90	jsr $9060			jsr 	GCLoadAXY 					; load in
.8f94	09 20		ora #$20			ora 	#16*2 						; move there
.8f96	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f99	7a		ply				ply
.8f9a	80 b4		bra $8f50			bra 	_RGICommandLoop 			; and go round
.8f9c					_RGI_Exit:
.8f9c	88		dey				dey 								; unpick : / EOL
.8f9d	60		rts				rts
.8f9e					_RGI_Solid:
.8f9e	a9 02		lda #$02			lda 	#2
.8fa0	8d e3 06	sta $06e3			sta 	gxFillSolid
.8fa3	80 ab		bra $8f50			bra 	_RGICommandLoop
.8fa5					_RGI_Frame:
.8fa5	9c e3 06	stz $06e3			stz 	gxFillSolid
.8fa8	80 a6		bra $8f50			bra 	_RGICommandLoop
.8faa					_RGI_To:
.8faa	20 43 90	jsr $9043			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8fad	20 6a 90	jsr $906a			jsr 	GCCopyPairToStore
.8fb0					_RGI_Here:
.8fb0	5a		phy				phy
.8fb1	20 60 90	jsr $9060			jsr 	GCLoadAXY 					; load it into AXY
.8fb4	20 1a 90	jsr $901a			jsr 	_RGICallHandler 			; go do whatever it is.
.8fb7	7a		ply				ply
.8fb8	80 96		bra $8f50			bra 	_RGICommandLoop 			; and go round
.8fba					_RGI_By:
.8fba	20 50 90	jsr $9050			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8fbd	18		clc				clc
.8fbe	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8fc1	6d e4 06	adc $06e4			adc 	gxxPos
.8fc4	8d e4 06	sta $06e4			sta 	gxXPos
.8fc7	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fca	6d e5 06	adc $06e5			adc 	gxxPos+1
.8fcd	8d e5 06	sta $06e5			sta 	gxXPos+1
.8fd0	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fd3	18		clc				clc
.8fd4	6d e6 06	adc $06e6			adc 	gxYPos
.8fd7	8d e6 06	sta $06e6			sta 	gxYPos
.8fda	80 d4		bra $8fb0			bra 	_RGI_Here
.8fdc					_RGI_Dim:
.8fdc	a2 01		ldx #$01			ldx	 	#1
.8fde	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger
.8fe1	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fe4	c9 00		cmp #$00			cmp 	#0
.8fe6	f0 2f		beq $9017			beq 	_RGIRange
.8fe8	c9 09		cmp #$09			cmp 	#8+1
.8fea	b0 2b		bcs $9017			bcs		_RGIRange
.8fec	3a		dec a				dec 	a
.8fed	8d e9 06	sta $06e9			sta 	gxDrawScale
.8ff0	4c 50 8f	jmp $8f50			jmp 	_RGICommandLoop
.8ff3					_RGI_Colour:
.8ff3	a2 01		ldx #$01			ldx 	#1 							; colour
.8ff5	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger
.8ff8	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8ffa	20 0c a6	jsr $a60c			jsr 	NSMSetZero
.8ffd	b1 30		lda ($30),y			lda 	(codePtr),y
.8fff	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.9001	d0 04		bne $9007			bne 	_RGICDefaultMode
.9003	c8		iny				iny
.9004	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger
.9007					_RGICDefaultMode:
.9007	5a		phy				phy
.9008	a9 08		lda #$08			lda 	#4*2 						; set colour.
.900a	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.900d	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9010	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9013	7a		ply				ply
.9014	4c 50 8f	jmp $8f50			jmp 	_RGICommandLoop 			; and go round
.9017					_RGIRange:
.9017	4c 3d b4	jmp $b43d			jmp 	RangeError
.901a					_RGICallHandler:
.901a	6c e7 06	jmp ($06e7)			jmp 	(GXHandler)
.901d					_RGI_SpriteInstructions:
.901d	c9 be		cmp #$be			cmp 	#KWD_OFF
.901f	f0 07		beq $9028			beq 	_RGISpriteOff
.9021	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.9023	f0 13		beq $9038			beq 	_RGISetImage
.9025	4c 89 8f	jmp $8f89			jmp 	_RGI_Move
.9028					_RGISpriteOff:
.9028	5a		phy				phy
.9029	a0 01		ldy #$01			ldy 	#1
.902b	a2 00		ldx #$00			ldx 	#0
.902d					_RGIDoCommandLoop:
.902d	a9 10		lda #$10			lda 	#8*2
.902f	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9032	7a		ply				ply
.9033	b0 e2		bcs $9017			bcs 	_RGIRange
.9035	4c 50 8f	jmp $8f50			jmp 	_RGICommandLoop
.9038					_RGISetImage:
.9038	a2 01		ldx #$01			ldx 	#1
.903a	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger
.903d	5a		phy				phy
.903e	aa		tax				tax
.903f	a0 00		ldy #$00			ldy 	#0
.9041	80 ea		bra $902d			bra 	_RGIDoCommandLoop
.9043					GCGetCoordinatePair:
.9043	a2 01		ldx #$01			ldx 	#1
.9045	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger
.9048	20 52 ae	jsr $ae52			jsr 	CheckComma
.904b	e8		inx				inx
.904c	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger
.904f	60		rts				rts
.9050					GCSignedCoordinatePair:
.9050	a2 01		ldx #$01			ldx 	#1
.9052	20 90 a5	jsr $a590			jsr 	Evaluate16BitIntegerSigned
.9055	20 52 ae	jsr $ae52			jsr 	CheckComma
.9058	e8		inx				inx
.9059	20 90 a5	jsr $a590			jsr 	Evaluate16BitIntegerSigned
.905c	60		rts				rts
.905d					_GCCPRange:
.905d	4c 3d b4	jmp $b43d			jmp 	RangeError
.9060					GCLoadAXY:
.9060	ad e5 06	lda $06e5			lda 	gxXPos+1
.9063	ae e4 06	ldx $06e4			ldx 	gxXPos
.9066	ac e6 06	ldy $06e6			ldy 	gxYPos
.9069	60		rts				rts
.906a					GCCopyPairToStore:
.906a	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.906d	8d e4 06	sta $06e4			sta 	gxXPos
.9070	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9073	8d e5 06	sta $06e5			sta 	gxXPos+1
.9076	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9079	8d e6 06	sta $06e6			sta 	gxYPos
.907c	60		rts				rts
.06e2					gxCommandID:
>06e2							.fill 	1
.06e3					gxFillSolid:
>06e3							.fill 	1
.06e4					gxXPos:
>06e4							.fill 	2
.06e6					gxYPos:
>06e6							.fill 	1
.06e7					gxHandler:
>06e7							.fill 	2
.06e9					gxDrawScale:
>06e9							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.907d					BitmapCtrl:
.907d	b1 30		lda ($30),y			lda 	(codePtr),y
.907f	c8		iny				iny
.9080	a2 01		ldx #$01			ldx 	#1
.9082	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9084	f0 11		beq $9097			beq 	BitmapSwitch
.9086	ca		dex				dex
.9087	c9 be		cmp #$be			cmp 	#KWD_OFF
.9089	f0 0c		beq $9097			beq 	BitmapSwitch
.908b	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get the colour
.908e	5a		phy				phy
.908f	aa		tax				tax
.9090	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9092	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9095	7a		ply				ply
.9096	60		rts				rts
.9097					BitmapSwitch:
.9097	5a		phy				phy
.9098	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.909a	a9 02		lda #$02			lda 	#1*2
.909c	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.909f	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.90a1	a0 00		ldy #$00			ldy 	#0
.90a3	a2 ff		ldx #$ff			ldx 	#$FF
.90a5	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90a8	9c e3 06	stz $06e3			stz 	gxFillSolid
.90ab	9c e4 06	stz $06e4			stz 	gxXPos
.90ae	9c e5 06	stz $06e5			stz 	gxXPos+1
.90b1	9c e6 06	stz $06e6			stz 	gxYPos
.90b4	9c e9 06	stz $06e9			stz 	gxDrawScale
.90b7	a9 20		lda #$20			lda 	#16*2 						; home cursor
.90b9	a2 00		ldx #$00			ldx 	#0
.90bb	a0 00		ldy #$00			ldy 	#0
.90bd	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90c0	7a		ply				ply
.90c1	60		rts				rts
.90c2					SpritesCtrl:
.90c2	b1 30		lda ($30),y			lda 	(codePtr),y
.90c4	c8		iny				iny
.90c5	a2 01		ldx #$01			ldx 	#1
.90c7	c9 bf		cmp #$bf			cmp 	#KWD_ON
.90c9	f0 08		beq $90d3			beq 	SpriteSwitch
.90cb	ca		dex				dex
.90cc	c9 be		cmp #$be			cmp 	#KWD_OFF
.90ce	f0 03		beq $90d3			beq 	SpriteSwitch
.90d0	4c 38 b4	jmp $b438			jmp 	SyntaxError
.90d3					SpriteSwitch:
.90d3	5a		phy				phy
.90d4	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90d6	a9 04		lda #$04			lda 	#2*2
.90d8	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90db	7a		ply				ply
.90dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90dd					GfxCommand:
.90dd	a2 00		ldx #$00			ldx 	#0
.90df	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; command
.90e2	20 52 ae	jsr $ae52			jsr 	CheckComma
.90e5	e8		inx				inx
.90e6	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger 		; X
.90e9	20 52 ae	jsr $ae52			jsr 	CheckComma
.90ec	e8		inx				inx
.90ed	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; Y
.90f0	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90f3	4a		lsr a				lsr 	a
.90f4	d0 16		bne $910c			bne 	_GfxError
.90f6	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90f9	b0 11		bcs $910c			bcs 	_GfxError 					; bit 7 should have been zero
.90fb	5a		phy				phy 								; save pos
.90fc	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90ff	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.9102	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9105	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9108	b0 02		bcs $910c			bcs 	_GfxError
.910a	7a		ply				ply 								; restore pos and exit.
.910b	60		rts				rts
.910c					_GfxError:
.910c	4c 3d b4	jmp $b43d			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.910f					Command_GOSUB:
.910f	a2 00		ldx #$00			ldx 	#0
.9111	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.9114	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.9116	20 c0 a6	jsr $a6c0			jsr 	StackOpen 					; create frame
.9119	20 04 a7	jsr $a704			jsr 	STKSaveCodePosition 		; save current position
.911c	4c 32 91	jmp $9132			jmp 	GotoStackX
.911f					Command_RETURN:
.911f	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.9121	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.9123	20 ec a6	jsr $a6ec			jsr 	StackCheckFrame
.9126	20 15 a7	jsr $a715			jsr 	STKLoadCodePosition 		; restore code position
.9129	20 de a6	jsr $a6de			jsr 	StackClose
.912c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.912d					GotoCommand:
.912d	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.912f	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger
.9132					GotoStackX:
.9132	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9135	48		pha				pha 								; it is slightly inefficient, just in cases.
.9136	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9139	fa		plx				plx
.913a	20 6b a6	jsr $a66b			jsr 	MemorySearch 				; transfer to line number AX.
.913d	90 05		bcc $9144			bcc 	_GotoError 					; not found, off end.
.913f	d0 03		bne $9144			bne 	_GotoError 					; not found exactly
.9141	4c d1 94	jmp $94d1			jmp 	RunNewLine 					; and go straight to new line code.
.9144					_GotoError:
.9144	a9 0d		lda #$0d		lda	#13
.9146	4c d1 99	jmp $99d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.9149					UnaryHit:
.9149	fa		plx				plx
.914a	a9 36		lda #$36			lda 	#zTemp0
.914c	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get sprite number 0
.914f	20 52 ae	jsr $ae52			jsr 	CheckComma
.9152	e8		inx				inx
.9153	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get sprite number 1
.9156	20 4a ae	jsr $ae4a			jsr		CheckRightBracket
.9159	ca		dex				dex 								; fix back up again.
.915a	da		phx				phx 								; save X/Y
.915b	5a		phy				phy
.915c	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.915f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9162	aa		tax				tax
.9163	a9 12		lda #$12			lda 	#9*2 						; command 9
.9165	20 86 80	jsr $8086			jsr 	GXGraphicDraw 				; calculate result
.9168	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.9169	7a		ply				ply 								; restore XY
.916a	fa		plx				plx
.916b	20 0e a6	jsr $a60e			jsr 	NSMSetByte 					; return the hit result
.916e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.916f					IfCommand:
.916f	a2 00		ldx #$00			ldx 	#0 							; If what.
.9171	20 4c a5	jsr $a54c			jsr 	EvaluateNumber
.9174	b1 30		lda ($30),y			lda 	(codePtr),y
.9176	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.9178	d0 0a		bne $9184			bne 	_IFStructured
.917a	c8		iny				iny 								; consume THEN
.917b	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; is it zero
.917e	f0 01		beq $9181			beq 	_IfFail 					; if fail, go to next line
.9180	60		rts				rts 								; if THEN just continue
.9181					_IfFail:
.9181	4c 36 95	jmp $9536			jmp 	EOLCommand
.9184					_IfStructured:
.9184	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; is it zero
.9187	d0 07		bne $9190			bne 	_IfExit 					; if not, then continue normally.
.9189	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.918b	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.918d	20 2c 99	jsr $992c			jsr 	ScanForward 				; and run from there/
.9190					_IfExit:
.9190	60		rts				rts
.9191					ElseCode:
.9191	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9193	aa		tax				tax 								; so just go to the structure exit
.9194	20 2c 99	jsr $992c			jsr 	ScanForward
.9197	60		rts				rts
.9198					EndIf:
.9198	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.9199					UnaryJoyX:
.9199	18		clc				clc
.919a	80 01		bra $919d			bra 	JoyMain
.919c					UnaryJoyY:
.919c	38		sec				sec
.919d					JoyMain:
.919d	fa		plx				plx 								; get pos
.919e	08		php				php 								; save carry (set for Y)
.919f	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; ignore the parameter
.91a2	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.91a5	20 35 b6	jsr $b635			jsr 	EXTReadController 			; read the controller.
.91a8	28		plp				plp
.91a9	90 02		bcc $91ad			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.91ab	4a		lsr a				lsr 	a
.91ac	4a		lsr a				lsr 	a
.91ad					_JMNoShift:
.91ad	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.91ae	b0 0a		bcs $91ba			bcs 	_JMIsRight
.91b0	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.91b1	b0 04		bcs $91b7			bcs 	_JMIsLeft
.91b3	20 0c a6	jsr $a60c			jsr 	NSMSetZero 					; zero result
.91b6	60		rts				rts
.91b7					_JMIsLeft:
.91b7	4c 3e 9a	jmp $9a3e			jmp 	ReturnTrue
.91ba					_JMIsRight:
.91ba	a9 01		lda #$01			lda 	#1
.91bc	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.91bf	60		rts				rts
.91c0					UnaryJoyB:
.91c0	fa		plx				plx 								; get pos
.91c1	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; ignore the parameter
.91c4	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.91c7	20 35 b6	jsr $b635			jsr 	EXTReadController 			; read the controller.
.91ca	4a		lsr a				lsr 	a
.91cb	4a		lsr a				lsr 	a
.91cc	4a		lsr a				lsr 	a
.91cd	4a		lsr a				lsr 	a
.91ce	29 01		and #$01			and 	#1
.91d0	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.91d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.91d4					LetCommand:
.91d4	a2 00		ldx #$00			ldx 	#0
.91d6	b1 30		lda ($30),y			lda 	(codePtr),y
.91d8	c9 10		cmp #$10			cmp 	#KWD_AT
.91da	d0 16		bne $91f2			bne 	_LCStandard
.91dc	c8		iny				iny 								; skip equal
.91dd	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm 				; get a number
.91e0	20 f7 9e	jsr $9ef7			jsr 	Dereference 				; dereference it
.91e3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.91e6	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.91e8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.91eb	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.91ed	d0 10		bne $91ff			bne 	_LCMain
.91ef	4c 42 b4	jmp $b442			jmp 	TypeError 					; was a reference before.
.91f2					_LCStandard:
.91f2	ad ca 9d	lda $9dca			lda 	PrecedenceLevel+"*"			; precedence > this
.91f5	20 e4 9d	jsr $9de4			jsr 	EvaluateExpressionAtPrecedence
.91f8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91fb	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91fd	f0 0e		beq $920d			beq 	_LetGoProc 					; it's a procedure call.
.91ff					_LCMain:
.91ff	a9 3d		lda #$3d			lda 	#"=" 						; check =
.9201	20 5a ae	jsr $ae5a			jsr 	CheckNextA
.9204	e8		inx				inx 								; RHS
.9205	20 43 a5	jsr $a543			jsr 	EvaluateValue
.9208	ca		dex				dex
.9209	20 10 92	jsr $9210			jsr 	AssignVariable
.920c	60		rts				rts
.920d					_LetGoProc:
.920d	4c ac 93	jmp $93ac			jmp 	CallProcedure
.9210					AssignVariable:
.9210	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.9213	48		pha				pha 								; save a copy
.9214	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9217	29 10		and #$10			and 	#NSBIsString
.9219	d0 0b		bne $9226			bne 	_ASError
.921b	68		pla				pla 								; get back
.921c	29 10		and #$10			and 	#NSBIsString 				; check type
.921e	d0 03		bne $9223			bne 	_ASString
.9220	4c 1f 9e	jmp $9e1f			jmp 	AssignNumber
.9223					_ASString:
.9223	4c 8d 9e	jmp $9e8d			jmp 	AssignString
.9226					_ASError:
.9226	4c 42 b4	jmp $b442			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.9229					Command_List:
.9229	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.922c	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.922f	9c 14 04	stz $0414			stz 	NSMantissa1+4
.9232	a9 ff		lda #$ff			lda 	#$FF
.9234	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9237	8d 17 04	sta $0417			sta 	NSMantissa1+7
.923a	b1 30		lda ($30),y			lda 	(codePtr),y
.923c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.923e	f0 1e		beq $925e			beq 	_CLSecond
.9240	20 bc 92	jsr $92bc			jsr 	CLIsDigit 					; if not digit, list all
.9243	b0 24		bcs $9269			bcs 	_CLStart
.9245	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.9247	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger
.924a	b1 30		lda ($30),y			lda 	(codePtr),y
.924c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.924e	f0 0e		beq $925e			beq 	_CLSecond 					; if so go get it
.9250	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9253	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9256	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9259	8d 17 04	sta $0417			sta 	NSMantissa1+7
.925c	80 0b		bra $9269			bra 	_CLStart
.925e					_CLSecond:
.925e	c8		iny				iny 								; consume comma
.925f	20 bc 92	jsr $92bc			jsr 	CLIsDigit 					; digit found
.9262	b0 05		bcs $9269			bcs 	_CLStart 					; if not, continue listing
.9264	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9266	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger
.9269					_CLStart
.9269	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.926b	85 30		sta $30				sta 	codePtr
.926d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.926f	85 31		sta $31				sta 	codePtr+1
.9271					_CLLoop:
.9271	20 32 b6	jsr $b632			jsr 	EXTBreakCheck 				; break check
.9274	f0 30		beq $92a6			beq 	_CLExit
.9276	b2 30		lda ($30)			lda 	(codePtr)
.9278	f0 2c		beq $92a6			beq 	_CLExit
.927a	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.927c	20 a9 92	jsr $92a9			jsr 	CLCompareLineNo
.927f	90 18		bcc $9299			bcc 	_CLNext
.9281	a2 07		ldx #$07			ldx 	#7
.9283	20 a9 92	jsr $92a9			jsr 	CLCompareLineNo
.9286	f0 02		beq $928a			beq 	_CLDoThisOne
.9288	b0 0f		bcs $9299			bcs 	_CLNext
.928a					_CLDoThisOne:
.928a	20 31 97	jsr $9731			jsr 	ListConvertLine 			; convert line into token Buffer
.928d	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.928f	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9291	20 2a 9a	jsr $9a2a			jsr 	PrintStringXA
.9294	a9 0d		lda #$0d			lda 	#13 						; new line
.9296	20 f1 b5	jsr $b5f1			jsr 	EXTPrintCharacter
.9299					_CLNext:
.9299	18		clc				clc
.929a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.929c	65 30		adc $30				adc 	codePtr
.929e	85 30		sta $30				sta 	codePtr
.92a0	90 02		bcc $92a4			bcc 	_CREExit
.92a2	e6 31		inc $31				inc 	codePtr+1
.92a4					_CREExit:
.92a4	80 cb		bra $9271			bra 	_CLLoop
.92a6					_CLExit:
.92a6	4c 72 8b	jmp $8b72			jmp 	WarmStart
.92a9					CLCompareLineNo:
.92a9	38		sec				sec
.92aa	a0 01		ldy #$01			ldy 	#1
.92ac	b1 30		lda ($30),y			lda 	(codePtr),y
.92ae	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.92b1	85 36		sta $36				sta 	zTemp0
.92b3	c8		iny				iny
.92b4	b1 30		lda ($30),y			lda 	(codePtr),y
.92b6	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.92b9	05 36		ora $36				ora 	zTemp0
.92bb	60		rts				rts
.92bc					CLIsDigit:
.92bc	b1 30		lda ($30),y			lda 	(codePtr),y
.92be	c9 30		cmp #$30			cmp 	#"0"
.92c0	90 03		bcc $92c5			bcc	 	_CLIDExitFalse
.92c2	c9 3a		cmp #$3a			cmp 	#"9"+1
.92c4	60		rts				rts
.92c5					_CLIDExitFalse:
.92c5	38		sec				sec
.92c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.92c7					Command_LOCAL:
.92c7	a2 00		ldx #$00			ldx 	#0 							; at level 0
.92c9	20 d5 92	jsr $92d5			jsr 	LocaliseNextTerm 			; convert term to a local.
.92cc	b1 30		lda ($30),y			lda 	(codePtr),y
.92ce	c8		iny				iny
.92cf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92d1	f0 f4		beq $92c7			beq 	Command_LOCAL
.92d3	88		dey				dey 								; unpick pre-get
.92d4	60		rts				rts
.92d5					LocaliseNextTerm:
.92d5	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm 				; evaluate the term
.92d8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92db	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.92dd	f0 69		beq $9348			beq		_LNTError
.92df	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.92e2	85 36		sta $36				sta 	zTemp0
.92e4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92e7	85 37		sta $37				sta  	zTemp0+1
.92e9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92ec	29 10		and #$10			and 	#NSBIsString
.92ee	d0 22		bne $9312			bne 	_LNTPushString
.92f0	5a		phy				phy
.92f1	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.92f3					_LNTPushNumLoop:
.92f3	b1 36		lda ($36),y			lda		(zTemp0),y
.92f5	20 9e a6	jsr $a69e			jsr 	StackPushByte
.92f8	a9 00		lda #$00			lda 	#0
.92fa	91 36		sta ($36),y			sta 	(zTemp0),y
.92fc	c8		iny				iny
.92fd	c0 05		cpy #$05			cpy 	#5
.92ff	d0 f2		bne $92f3			bne 	_LNTPushNumLoop
.9301	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.9303	20 9e a6	jsr $a69e			jsr 	StackPushByte
.9306	a5 37		lda $37				lda 	zTemp0+1
.9308	20 9e a6	jsr $a69e			jsr 	StackPushByte
.930b	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.930d	20 9e a6	jsr $a69e			jsr 	StackPushByte
.9310	7a		ply				ply
.9311	60		rts				rts
.9312					_LNTPushString:
.9312	5a		phy				phy
.9313	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.9315	85 38		sta $38				sta 	zTemp1
.9317	a0 01		ldy #$01			ldy 	#1
.9319	b1 36		lda ($36),y			lda 	(zTemp0),y
.931b	85 39		sta $39				sta 	zTemp1+1
.931d	a0 00		ldy #$00			ldy 	#0 							; output string
.931f	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.9321	f0 0a		beq $932d			beq 	_LNTStringOut
.9323					_LNTPushStrLoop:
.9323	b1 38		lda ($38),y			lda 	(zTemp1),y
.9325	f0 06		beq $932d			beq 	_LNTStringOut
.9327	20 9e a6	jsr $a69e			jsr 	StackPushByte
.932a	c8		iny				iny
.932b	80 f6		bra $9323			bra 	_LNTPushStrLoop
.932d					_LNTStringOut:
.932d	98		tya				tya									; output length
.932e	20 9e a6	jsr $a69e			jsr 	StackPushByte
.9331	a9 00		lda #$00			lda 	#0 							; clear original string.
.9333	92 38		sta ($38)			sta 	(zTemp1)
.9335	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9338	20 9e a6	jsr $a69e			jsr 	StackPushByte
.933b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.933e	20 9e a6	jsr $a69e			jsr 	StackPushByte
.9341	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9343	20 9e a6	jsr $a69e			jsr 	StackPushByte
.9346	7a		ply				ply
.9347	60		rts				rts
.9348					_LNTError:
.9348	4c 38 b4	jmp $b438			jmp 	SyntaxError
.adf1					LocalPopValue:
.adf1	20 b7 a6	jsr $a6b7			jsr 	StackPopByte
.adf4	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.adf6	d0 17		bne $ae0f			bne 	_LPVString
.adf8	20 b7 a6	jsr $a6b7			jsr 	StackPopByte 				; address
.adfb	85 37		sta $37				sta 	zTemp0+1
.adfd	20 b7 a6	jsr $a6b7			jsr 	StackPopByte
.ae00	85 36		sta $36				sta 	zTemp0
.ae02	5a		phy				phy
.ae03	a0 04		ldy #$04			ldy 	#4 							; copy back
.ae05					_LPVNumberCopy:
.ae05	20 b7 a6	jsr $a6b7			jsr 	StackPopByte
.ae08	91 36		sta ($36),y			sta 	(zTemp0),y
.ae0a	88		dey				dey
.ae0b	10 f8		bpl $ae05			bpl 	_LPVNumberCopy
.ae0d	7a		ply				ply 								; and complete
.ae0e	60		rts				rts
.ae0f					_LPVString:
.ae0f	20 b7 a6	jsr $a6b7			jsr 	StackPopByte 				; address of record => zTemp0
.ae12	85 37		sta $37				sta 	zTemp0+1
.ae14	20 b7 a6	jsr $a6b7			jsr 	StackPopByte
.ae17	85 36		sta $36				sta 	zTemp0
.ae19	5a		phy				phy
.ae1a	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.ae1c	85 38		sta $38				sta 	zTemp1
.ae1e	a0 01		ldy #$01			ldy 	#1
.ae20	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae22	85 39		sta $39				sta 	zTemp1+1
.ae24	20 b7 a6	jsr $a6b7			jsr 	StackPopByte 				; # to get => y
.ae27	a8		tay				tay
.ae28	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ae2a	f0 0e		beq $ae3a			beq 	_LPVStringCopied
.ae2c	a9 00		lda #$00			lda 	#0 							; NULL on end
.ae2e	91 38		sta ($38),y			sta 	(zTemp1),y
.ae30					_LPVStringCopy:
.ae30	88		dey				dey
.ae31	30 07		bmi $ae3a			bmi 	_LPVStringCopied
.ae33	20 b7 a6	jsr $a6b7			jsr 	StackPopByte
.ae36	91 38		sta ($38),y			sta 	(zTemp1),y
.ae38	80 f6		bra $ae30			bra 	_LPVStringCopy
.ae3a					_LPVStringCopied:
.ae3a	fa		plx				plx
.ae3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.934b					NewCommand:
.934b	20 49 a6	jsr $a649			jsr 	MemoryNew
.934e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9351	20 0b 8c	jsr $8c0b			jsr 	ClearCommand 				; clear everything.
.9354	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9355					Command_Print:
.9355	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9356					_CPLoop:
.9356	08		php				php 								; save last action flag
.9357	b1 30		lda ($30),y			lda 	(codePtr),y
.9359	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.935b	f0 46		beq $93a3			beq 	_CPExit
.935d	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.935f	f0 42		beq $93a3			beq 	_CPExit
.9361	68		pla				pla 								; throw last action flag
.9362	b1 30		lda ($30),y			lda 	(codePtr),y
.9364	c8		iny				iny
.9365	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9367	f0 37		beq $93a0			beq 	_CPContinueWithSameLine
.9369	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.936b	f0 2e		beq $939b			beq 	_CPTab
.936d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.936f	f0 26		beq $9397			beq 	_CPNewLine
.9371	88		dey				dey 								; undo the get.
.9372	a2 00		ldx #$00			ldx 	#0
.9374	20 43 a5	jsr $a543			jsr 	EvaluateValue 				; get a value into slot 0
.9377	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.937a	29 10		and #$10			and 	#NSBIsString
.937c	f0 0b		beq $9389			beq 	_CPNumber
.937e	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9381	ad 08 04	lda $0408			lda 	NSMantissa0
.9384	20 2a 9a	jsr $9a2a			jsr 	PrintStringXA
.9387	80 cc		bra $9355			bra 	Command_Print 				; loop round clearing carry so NL if end
.9389					_CPNumber:
.9389	a9 05		lda #$05			lda 	#5 							; maximum decimals
.938b	20 19 a4	jsr $a419			jsr 	ConvertNumberToString 		; convert to string
.938e	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9390	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.9392	20 2a 9a	jsr $9a2a			jsr 	PrintStringXA
.9395	80 be		bra $9355			bra 	Command_Print 				; loop round clearing carry so NL if end
.9397					_CPNewLine:
.9397	a9 0d		lda #$0d			lda 	#13
.9399	80 02		bra $939d			bra 	_CPPrintChar
.939b					_CPTab:
.939b	a9 09		lda #$09			lda 	#9 							; print TAB
.939d					_CPPrintChar:
.939d	20 f1 b5	jsr $b5f1			jsr 	EXTPrintCharacter
.93a0					_CPContinueWithSameLine:
.93a0	38		sec				sec 								; loop round with carry set, which
.93a1	80 b3		bra $9356			bra 	_CPLoop 					; will inhibit final CR
.93a3					_CPExit:
.93a3	28		plp				plp 								; get last action flag
.93a4	b0 05		bcs $93ab			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.93a6	a9 0d		lda #$0d			lda 	#13 						; print new line
.93a8	20 f1 b5	jsr $b5f1			jsr 	EXTPrintCharacter
.93ab					_CPExit2:
.93ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.93ac					CallProcedure:
.93ac	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.93ae	b1 30		lda ($30),y			lda 	(codePtr),y
.93b0	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.93b2	f0 0c		beq $93c0			beq 	_CPEndParam
.93b4					_CPParamLoop:
.93b4	20 43 a5	jsr $a543			jsr 	EvaluateValue 				; get parameter onto stack
.93b7	e8		inx				inx 								; bump next stack
.93b8	b1 30		lda ($30),y			lda 	(codePtr),y
.93ba	c8		iny				iny
.93bb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.93bd	f0 f5		beq $93b4			beq 	_CPParamLoop
.93bf	88		dey				dey 								; unpick.
.93c0					_CPEndParam:
.93c0	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.93c3	c8		iny				iny									; skip right bracket
.93c4	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.93c6	20 c0 a6	jsr $a6c0			jsr 	StackOpen
.93c9	20 04 a7	jsr $a704			jsr 	STKSaveCodePosition 		; save loop position
.93cc	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.93cf	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.93d1	ad 10 04	lda $0410			lda 	NSMantissa1
.93d4	85 37		sta $37				sta 	zTemp0+1
.93d6	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.93d8	b2 36		lda ($36)			lda 	(zTemp0)
.93da	85 30		sta $30				sta 	safePtr
.93dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.93de	85 31		sta $31				sta 	safePtr+1
.93e0	c8		iny				iny
.93e1	b1 36		lda ($36),y			lda 	(zTemp0),y
.93e3	85 32		sta $32				sta 	safePtr+2
.93e5	c8		iny				iny
.93e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.93e8	85 33		sta $33				sta 	safePtr+3
.93ea	c8		iny				iny 								; get Y offset -> Y
.93eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.93ed	a8		tay				tay
.93ee	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.93f0	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.93f3	f0 13		beq $9408			beq 	_ParamExit 					; if so, exit.
.93f5					_ParamExtract:
.93f5	ca		dex				dex 								; put a local term on the level before
.93f6	20 d5 92	jsr $92d5			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.93f9	20 10 92	jsr $9210			jsr 	AssignVariable 				; assign stacked value to the variable.
.93fc	e8		inx				inx 								; advance to next parameter to do.
.93fd	e8		inx				inx
.93fe	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9401	f0 05		beq $9408			beq 	_ParamExit
.9403	20 52 ae	jsr $ae52			jsr 	CheckComma 					; comma seperating parameters
.9406	80 ed		bra $93f5			bra 	_ParamExtract
.9408					_ParamExit:
.9408	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket 			; check )
.940b	60		rts				rts 								; and continue from here
.ae3c					Command_ENDPROC:
.ae3c	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ae3e	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ae40	20 ec a6	jsr $a6ec			jsr 	StackCheckFrame
.ae43	20 15 a7	jsr $a715			jsr 	STKLoadCodePosition 		; restore code position
.ae46	20 de a6	jsr $a6de			jsr 	StackClose
.ae49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.940c					Command_Read:
.940c	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.940e	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm
.9411	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9414	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9416	f0 4a		beq $9462			beq 	_CRSyntax 					; check reference (bit 0)
.9418	20 ab 94	jsr $94ab			jsr 	SwapDataCodePtrs 			; swap code and data
.941b	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.941e	d0 20		bne $9440			bne 	_CRContinueData
.9420					_CRKeepSearching:
.9420	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.9422	aa		tax				tax
.9423	20 2c 99	jsr $992c			jsr 	ScanForward
.9426	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.9428	f0 16		beq $9440			beq 	_CRHaveData 				; found it
.942a	18		clc				clc
.942b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.942d	65 30		adc $30				adc 	codePtr
.942f	85 30		sta $30				sta 	codePtr
.9431	90 02		bcc $9435			bcc 	_CREExit
.9433	e6 31		inc $31				inc 	codePtr+1
.9435					_CREExit:
.9435	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9437	b2 30		lda ($30)			lda 	(codePtr)
.9439	d0 e5		bne $9420			bne 	_CRKeepSearching
.943b	a9 0b		lda #$0b		lda	#11
.943d	4c d1 99	jmp $99d1		jmp	ErrorHandler
.9440					_CRHaveData:
.9440					_CRContinueData:
.9440	a2 01		ldx #$01			ldx 	#1
.9442	20 43 a5	jsr $a543			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9445	ca		dex				dex
.9446	20 10 92	jsr $9210			jsr		AssignVariable 				; do the assignment
.9449	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.944c	b1 30		lda ($30),y			lda 	(codePtr),y
.944e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9450	d0 04		bne $9456			bne 	_CRSwapBack
.9452	c8		iny				iny 								; consume comma
.9453	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9456					_CRSwapBack:
.9456	20 ab 94	jsr $94ab			jsr 	SwapDataCodePtrs			; swap them back.
.9459	b1 30		lda ($30),y			lda 	(codePtr),y
.945b	c8		iny				iny
.945c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.945e	f0 ac		beq $940c			beq 	Command_Read 				; if so go round again.
.9460	88		dey				dey 								; unpick get.
.9461	60		rts				rts
.9462					_CRSyntax:
.9462	4c 38 b4	jmp $b438			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9465					RemCommand:
.9465	b1 30		lda ($30),y			lda 	(codePtr),y
.9467	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9469	d0 06		bne $9471			bne 	_RMExit
.946b	c8		iny				iny
.946c	98		tya				tya
.946d	38		sec				sec
.946e	71 30		adc ($30),y			adc 	(codePtr),y
.9470	a8		tay				tay
.9471					_RMExit:
.9471	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9472					Command_REPEAT:
.9472	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9474	20 c0 a6	jsr $a6c0			jsr 	StackOpen
.9477	20 04 a7	jsr $a704			jsr 	STKSaveCodePosition 		; save loop position
.947a	60		rts				rts
.947b					Command_UNTIL:
.947b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.947d	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.947f	20 ec a6	jsr $a6ec			jsr 	StackCheckFrame
.9482	a2 00		ldx #$00			ldx 	#0
.9484	20 4c a5	jsr $a54c			jsr 	EvaluateNumber 				; work out the number
.9487	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; check if zero
.948a	f0 04		beq $9490			beq 	_CULoopBack 				; if so keep looping
.948c	20 de a6	jsr $a6de			jsr 	StackClose		 			; return
.948f	60		rts				rts
.9490					_CULoopBack:
.9490	20 15 a7	jsr $a715			jsr 	STKLoadCodePosition 		; loop back
.9493	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9494					Command_Restore:
.9494	20 ab 94	jsr $94ab			jsr 	SwapDataCodePtrs 			; swap code and data
.9497	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9499	85 30		sta $30				sta 	codePtr
.949b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.949d	85 31		sta $31				sta 	codePtr+1
.949f	20 ab 94	jsr $94ab			jsr 	SwapDataCodePtrs 			; put them back
.94a2	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.94a4	8d 9b 04	sta $049b			sta 	dataPointer+4
.94a7	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.94aa	60		rts				rts
.94ab					SwapDataCodePtrs:
.94ab	da		phx				phx
.94ac	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.94ae					_SDCPLoop:
.94ae	b5 30		lda $30,x			lda 	safePtr,x
.94b0	48		pha				pha
.94b1	bd 97 04	lda $0497,x			lda 	dataPointer,x
.94b4	95 30		sta $30,x			sta 	safePtr,x
.94b6	68		pla				pla
.94b7	9d 97 04	sta $0497,x			sta 	dataPointer,x
.94ba	ca		dex				dex
.94bb	10 f1		bpl $94ae			bpl 	_SDCPLoop
.94bd	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.94c0	8c 9b 04	sty $049b			sty 	dataPointer+4
.94c3	a8		tay				tay
.94c4	fa		plx				plx
.94c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.94c6					CommandRUN:
.94c6	20 0b 8c	jsr $8c0b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.94c9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94cb	85 30		sta $30				sta 	codePtr
.94cd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94cf	85 31		sta $31				sta 	codePtr+1
.94d1					RUNNewLine:
.94d1	b2 30		lda ($30)			lda 	(codePtr)
.94d3	f0 5e		beq $9533			beq 	CRNoProgram         		; no then END.
.94d5	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.94d7	9a		txs				txs
.94d8					RUNCodePointerLine:
.94d8	a0 02		ldy #$02			ldy 	#2 							; start of program
.94da					_CRIncMainLoop:
.94da	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.94dd	d0 05		bne $94e4			bne 	_CRNoBreakCheck
.94df	20 32 b6	jsr $b632			jsr 	EXTBreakCheck 				; break check
.94e2	f0 4a		beq $952e			beq 	_CRBreak
.94e4					_CRNoBreakCheck:
.94e4	c8		iny				iny
.94e5					_CRMainLoop:
.94e5	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.94e8	b1 30		lda ($30),y			lda 	(codePtr),y
.94ea	10 10		bpl $94fc			bpl 	_CRNotKeyword
.94ec	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.94ee	b0 04		bcs $94f4			bcs 	_CRIsKeyword
.94f0	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.94f2	b0 34		bcs $9528			bcs		_CRSyntaxError
.94f4					_CRIsKeyword:
.94f4	c8		iny				iny 								; consume command
.94f5	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.94f6	aa		tax				tax 								; put in X for vector jump
.94f7	20 2b 95	jsr $952b			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.94fa	80 e9		bra $94e5			bra 	_CRMainLoop 				; and loop round
.94fc					_CRNotKeyword:
.94fc	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94fe	f0 da		beq $94da			beq 	_CRIncMainLoop
.9500	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9502	90 05		bcc $9509			bcc 	_CRNotVariable
.9504					_CRGoLet:
.9504	20 d4 91	jsr $91d4			jsr 	LetCommand
.9507	80 dc		bra $94e5			bra 	_CRMainLoop
.9509					_CRNotVariable:
.9509	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.950b	f0 f7		beq $9504			beq 	_CRGoLet
.950d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.950f	f0 f3		beq $9504			beq 	_CRGoLet
.9511	c9 21		cmp #$21			cmp 	#KWD_PLING
.9513	f0 ef		beq $9504			beq 	_CRGoLet
.9515	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9517	f0 09		beq $9522			beq 	_CRGoRem
.9519	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.951b	d0 0b		bne $9528			bne 	_CRSyntaxError
.951d	20 ab 8a	jsr $8aab			jsr 	LabelHere
.9520	80 c3		bra $94e5			bra 	_CRMainLoop
.9522					_CRGoRem:
.9522	c8		iny				iny
.9523	20 65 94	jsr $9465			jsr 	RemCommand
.9526	80 bd		bra $94e5			bra 	_CRMainLoop
.9528					_CRSyntaxError:
.9528	4c 38 b4	jmp $b438			jmp 	SyntaxError
.952b					_CRCallVector0:
.952b	7c d6 95	jmp ($95d6,x)			jmp 	(VectorSet0,x)
.952e					_CRBreak:
.952e	a9 01		lda #$01		lda	#1
.9530	4c d1 99	jmp $99d1		jmp	ErrorHandler
.9533					CRNoProgram:
.9533	4c 2e 8d	jmp $8d2e			jmp 	EndCommand
.9536					EOLCommand:
.9536	18		clc				clc
.9537	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9539	65 30		adc $30				adc 	codePtr
.953b	85 30		sta $30				sta 	codePtr
.953d	90 02		bcc $9541			bcc 	_CREExit
.953f	e6 31		inc $31				inc 	codePtr+1
.9541					_CREExit:
.9541	80 8e		bra $94d1			bra 	RunNewLine
.9543					Shift1Command:
.9543	b1 30		lda ($30),y			lda 	(codePtr),y
.9545	c8		iny				iny
.9546	0a		asl a				asl 	a
.9547	aa		tax				tax
.9548	7c 6e 96	jmp ($966e,x)			jmp 	(VectorSet1,x)
.954b					Shift2Command:
.954b	b1 30		lda ($30),y			lda 	(codePtr),y
.954d	c8		iny				iny
.954e	0a		asl a				asl 	a
.954f	aa		tax				tax
.9550	7c 88 96	jmp ($9688,x)			jmp 	(VectorSet2,x)
.9553					Unused1:
.9553					Unused2:
.9553					Unused3:
.9553					Unused4:
.9553	4c 38 b4	jmp $b438			jmp 	SyntaxError
>9556							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9556					VectorSetPunc:
>9556	7b 9b					.word	ShiftLeft                        ; $00 <<
>9558	75 9a					.word	BinaryCompareLessEqual           ; $01 <=
>955a	6b 9a					.word	BinaryCompareNotEqual            ; $02 <>
>955c	38 b4					.word	SyntaxError                      ; $03 !!3
>955e	38 b4					.word	SyntaxError                      ; $04 ><
>9560	7f 9a					.word	BinaryCompareGreaterEqual        ; $05 >=
>9562	7e 9b					.word	ShiftRight                       ; $06 >>
>9564	38 b4					.word	SyntaxError                      ; $07 !!7
>9566	38 b4					.word	SyntaxError                      ; $08 !!8
>9568	38 b4					.word	SyntaxError                      ; $09 !!9
>956a	38 b4					.word	SyntaxError                      ; $0a !!10
>956c	38 b4					.word	SyntaxError                      ; $0b !!11
>956e	38 b4					.word	SyntaxError                      ; $0c !!12
>9570	38 b4					.word	SyntaxError                      ; $0d !!13
>9572	38 b4					.word	SyntaxError                      ; $0e !!14
>9574	38 b4					.word	SyntaxError                      ; $0f !!15
>9576	38 b4					.word	SyntaxError                      ; $10 @
>9578	38 b4					.word	SyntaxError                      ; $11 !!17
>957a	38 b4					.word	SyntaxError                      ; $12 !!18
>957c	38 b4					.word	SyntaxError                      ; $13 [
>957e	63 ae					.word	IntegerDivide                    ; $14 \
>9580	38 b4					.word	SyntaxError                      ; $15 ]
>9582	0c 9d					.word	EorInteger                       ; $16 ^
>9584	38 b4					.word	SyntaxError                      ; $17 _
>9586	38 b4					.word	SyntaxError                      ; $18 `
>9588	38 b4					.word	SyntaxError                      ; $19 !!25
>958a	38 b4					.word	SyntaxError                      ; $1a !!26
>958c	38 b4					.word	SyntaxError                      ; $1b {
>958e	c6 9c					.word	OraInteger                       ; $1c |
>9590	38 b4					.word	SyntaxError                      ; $1d }
>9592	38 b4					.word	SyntaxError                      ; $1e ~
>9594	38 b4					.word	SyntaxError                      ; $1f [7m<7F>[m
>9596	38 b4					.word	SyntaxError                      ; $20
>9598	52 9d					.word	WordIndirect                     ; $21 !
>959a	38 b4					.word	SyntaxError                      ; $22 "
>959c	38 b4					.word	SyntaxError                      ; $23 #
>959e	38 b4					.word	SyntaxError                      ; $24 $
>95a0	b0 ae					.word	IntegerModulus                   ; $25 %
>95a2	80 9c					.word	AndInteger                       ; $26 &
>95a4	38 b4					.word	SyntaxError                      ; $27 '
>95a6	38 b4					.word	SyntaxError                      ; $28 (
>95a8	38 b4					.word	SyntaxError                      ; $29 )
>95aa	25 af					.word	MulInteger                       ; $2a *
>95ac	12 9c					.word	AddInteger                       ; $2b +
>95ae	38 b4					.word	SyntaxError                      ; $2c ,
>95b0	55 9c					.word	SubInteger                       ; $2d -
>95b2	38 b4					.word	SyntaxError                      ; $2e .
>95b4	c4 b0					.word	FDivideCommand                   ; $2f /
>95b6	38 b4					.word	SyntaxError                      ; $30 0
>95b8	38 b4					.word	SyntaxError                      ; $31 1
>95ba	38 b4					.word	SyntaxError                      ; $32 2
>95bc	38 b4					.word	SyntaxError                      ; $33 3
>95be	38 b4					.word	SyntaxError                      ; $34 4
>95c0	38 b4					.word	SyntaxError                      ; $35 5
>95c2	38 b4					.word	SyntaxError                      ; $36 6
>95c4	38 b4					.word	SyntaxError                      ; $37 7
>95c6	38 b4					.word	SyntaxError                      ; $38 8
>95c8	38 b4					.word	SyntaxError                      ; $39 9
>95ca	38 b4					.word	SyntaxError                      ; $3a :
>95cc	38 b4					.word	SyntaxError                      ; $3b ;
>95ce	57 9a					.word	BinaryCompareLess                ; $3c <
>95d0	4d 9a					.word	BinaryCompareEqual               ; $3d =
>95d2	61 9a					.word	BinaryCompareGreater             ; $3e >
>95d4	79 9d					.word	ByteIndirect                     ; $3f ?
.95d6					VectorSet0:
>95d6	36 95					.word	EOLCommand                       ; $80 !0:EOF
>95d8	43 95					.word	Shift1Command                    ; $81 !1:SH1
>95da	4b 95					.word	Shift2Command                    ; $82 !2:SH2
>95dc	0a b2					.word	AbsUnary                         ; $83 ABS(
>95de	49 a2					.word	AllocUnary                       ; $84 ALLOC(
>95e0	1a b2					.word	AscUnary                         ; $85 ASC(
>95e2	ca a3					.word	ChrUnary                         ; $86 CHR$(
>95e4	31 8d					.word	UnaryEvent                       ; $87 EVENT(
>95e6	49 9a					.word	UnaryFalse                       ; $88 FALSE
>95e8	27 b2					.word	FracUnary                        ; $89 FRAC(
>95ea	49 91					.word	UnaryHit                         ; $8a HIT(
>95ec	3d b2					.word	IntUnary                         ; $8b INT(
>95ee	93 b2					.word	IsValUnary                       ; $8c ISVAL(
>95f0	c0 91					.word	UnaryJoyB                        ; $8d JOYB(
>95f2	99 91					.word	UnaryJoyX                        ; $8e JOYX(
>95f4	9c 91					.word	UnaryJoyY                        ; $8f JOYY(
>95f6	a4 a4					.word	Unary_Left                       ; $90 LEFT$(
>95f8	4f b2					.word	LenUnary                         ; $91 LEN(
>95fa	bd a2					.word	Unary_Max                        ; $92 MAX(
>95fc	ce a4					.word	Unary_Mid                        ; $93 MID$(
>95fe	b9 a2					.word	Unary_Min                        ; $94 MIN(
>9600	14 a3					.word	Unary_Not                        ; $95 NOT(
>9602	2a a3					.word	Unary_Random                     ; $96 RANDOM(
>9604	b4 a4					.word	Unary_Right                      ; $97 RIGHT$(
>9606	49 a3					.word	Unary_Rnd                        ; $98 RND(
>9608	69 b2					.word	SgnUnary                         ; $99 SGN(
>960a	dc a3					.word	SpcUnary                         ; $9a SPC(
>960c	f7 a3					.word	Unary_Str                        ; $9b STR$(
>960e	15 97					.word	UnaryTimer                       ; $9c TIMER(
>9610	3d 9a					.word	UnaryTrue                        ; $9d TRUE
>9612	89 b2					.word	ValUnary                         ; $9e VAL(
>9614	9a 8d					.word	ForCommand                       ; $9f FOR
>9616	6f 91					.word	IfCommand                        ; $a0 IF
>9618	53 95					.word	Unused1                          ; $a1 PROC
>961a	72 94					.word	Command_REPEAT                   ; $a2 REPEAT
>961c	a2 99					.word	Command_WHILE                    ; $a3 WHILE
>961e	98 91					.word	EndIf                            ; $a4 ENDIF
>9620	3c ae					.word	Command_ENDPROC                  ; $a5 ENDPROC
>9622	54 8e					.word	NextCommand                      ; $a6 NEXT
>9624	53 95					.word	Unused4                          ; $a7 THEN
>9626	7b 94					.word	Command_UNTIL                    ; $a8 UNTIL
>9628	c3 99					.word	Command_WEND                     ; $a9 WEND
>962a	38 b4					.word	SyntaxError                      ; $aa BY
>962c	d1 8b					.word	CallCommand                      ; $ab CALL
>962e	b1 8e					.word	CircleCommand                    ; $ac CIRCLE
>9630	0b 8c					.word	ClearCommand                     ; $ad CLEAR
>9632	63 8c					.word	ClearScreen                      ; $ae CLS
>9634	38 b4					.word	SyntaxError                      ; $af COLOR
>9636	38 b4					.word	SyntaxError                      ; $b0 COLOUR
>9638	69 8c					.word	Command_Data                     ; $b1 DATA
>963a	71 8c					.word	DimCommand                       ; $b2 DIM
>963c	53 95					.word	Unused3                          ; $b3 DOWNTO
>963e	91 91					.word	ElseCode                         ; $b4 ELSE
>9640	38 b4					.word	SyntaxError                      ; $b5 FROM
>9642	dd 90					.word	GfxCommand                       ; $b6 GFX
>9644	0f 91					.word	Command_GOSUB                    ; $b7 GOSUB
>9646	2d 91					.word	GotoCommand                      ; $b8 GOTO
>9648	38 b4					.word	SyntaxError                      ; $b9 HERE
>964a	db 8e					.word	ImageCommand                     ; $ba IMAGE
>964c	d4 91					.word	LetCommand                       ; $bb LET
>964e	30 8f					.word	LineCommand                      ; $bc LINE
>9650	c7 92					.word	Command_LOCAL                    ; $bd LOCAL
>9652	38 b4					.word	SyntaxError                      ; $be OFF
>9654	38 b4					.word	SyntaxError                      ; $bf ON
>9656	38 b4					.word	SyntaxError                      ; $c0 OUTLINE
>9658	38 b4					.word	SyntaxError                      ; $c1 PALETTE
>965a	29 8f					.word	PlotCommand                      ; $c2 PLOT
>965c	55 93					.word	Command_Print                    ; $c3 PRINT
>965e	0c 94					.word	Command_Read                     ; $c4 READ
>9660	ad 8e					.word	RectangleCommand                 ; $c5 RECT
>9662	65 94					.word	RemCommand                       ; $c6 REM
>9664	1f 91					.word	Command_RETURN                   ; $c7 RETURN
>9666	38 b4					.word	SyntaxError                      ; $c8 SOLID
>9668	bc 8e					.word	SpriteCommand                    ; $c9 SPRITE
>966a	f8 8e					.word	TextCommand                      ; $ca TEXT
>966c	53 95					.word	Unused2                          ; $cb TO
.966e					VectorSet1:
>966e	38 b4					.word	SyntaxError                      ; $80 !0:EOF
>9670	38 b4					.word	SyntaxError                      ; $81 !1:SH1
>9672	38 b4					.word	SyntaxError                      ; $82 !2:SH2
>9674	a2 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9676	c1 8b					.word	AssertCommand                    ; $84 ASSERT
>9678	7d 90					.word	BitmapCtrl                       ; $85 BITMAP
>967a	2e 8d					.word	EndCommand                       ; $86 END
>967c	29 92					.word	Command_List                     ; $87 LIST
>967e	4b 93					.word	NewCommand                       ; $88 NEW
>9680	94 94					.word	Command_Restore                  ; $89 RESTORE
>9682	c6 94					.word	CommandRUN                       ; $8a RUN
>9684	c2 90					.word	SpritesCtrl                      ; $8b SPRITES
>9686	10 97					.word	StopCommand                      ; $8c STOP
.9688					VectorSet2:
>9688	38 b4					.word	SyntaxError                      ; $80 !0:EOF
>968a	38 b4					.word	SyntaxError                      ; $81 !1:SH1
>968c	38 b4					.word	SyntaxError                      ; $82 !2:SH2
>968e	f7 b2					.word	Assemble_adc                     ; $83 ADC
>9690	ef b2					.word	Assemble_and                     ; $84 AND
>9692	0b b3					.word	Assemble_asl                     ; $85 ASL
>9694	75 b3					.word	Assemble_bcc                     ; $86 BCC
>9696	79 b3					.word	Assemble_bcs                     ; $87 BCS
>9698	81 b3					.word	Assemble_beq                     ; $88 BEQ
>969a	38 b3					.word	Assemble_bit                     ; $89 BIT
>969c	69 b3					.word	Assemble_bmi                     ; $8a BMI
>969e	7d b3					.word	Assemble_bne                     ; $8b BNE
>96a0	65 b3					.word	Assemble_bpl                     ; $8c BPL
>96a2	85 b3					.word	Assemble_bra                     ; $8d BRA
>96a4	89 b3					.word	Assemble_brk                     ; $8e BRK
>96a6	6d b3					.word	Assemble_bvc                     ; $8f BVC
>96a8	71 b3					.word	Assemble_bvs                     ; $90 BVS
>96aa	91 b3					.word	Assemble_clc                     ; $91 CLC
>96ac	e5 b3					.word	Assemble_cld                     ; $92 CLD
>96ae	a5 b3					.word	Assemble_cli                     ; $93 CLI
>96b0	d5 b3					.word	Assemble_clv                     ; $94 CLV
>96b2	03 b3					.word	Assemble_cmp                     ; $95 CMP
>96b4	4c b3					.word	Assemble_cpx                     ; $96 CPX
>96b6	47 b3					.word	Assemble_cpy                     ; $97 CPY
>96b8	29 b3					.word	Assemble_dec                     ; $98 DEC
>96ba	e1 b3					.word	Assemble_dex                     ; $99 DEX
>96bc	bd b3					.word	Assemble_dey                     ; $9a DEY
>96be	f3 b2					.word	Assemble_eor                     ; $9b EOR
>96c0	2e b3					.word	Assemble_inc                     ; $9c INC
>96c2	f1 b3					.word	Assemble_inx                     ; $9d INX
>96c4	dd b3					.word	Assemble_iny                     ; $9e INY
>96c6	60 b3					.word	Assemble_jmp                     ; $9f JMP
>96c8	5b b3					.word	Assemble_jsr                     ; $a0 JSR
>96ca	ff b2					.word	Assemble_lda                     ; $a1 LDA
>96cc	24 b3					.word	Assemble_ldx                     ; $a2 LDX
>96ce	42 b3					.word	Assemble_ldy                     ; $a3 LDY
>96d0	15 b3					.word	Assemble_lsr                     ; $a4 LSR
>96d2	f5 b3					.word	Assemble_nop                     ; $a5 NOP
>96d4	eb b2					.word	Assemble_ora                     ; $a6 ORA
>96d6	a1 b3					.word	Assemble_pha                     ; $a7 PHA
>96d8	8d b3					.word	Assemble_php                     ; $a8 PHP
>96da	e9 b3					.word	Assemble_phx                     ; $a9 PHX
>96dc	a9 b3					.word	Assemble_phy                     ; $aa PHY
>96de	b1 b3					.word	Assemble_pla                     ; $ab PLA
>96e0	95 b3					.word	Assemble_plp                     ; $ac PLP
>96e2	fd b3					.word	Assemble_plx                     ; $ad PLX
>96e4	b9 b3					.word	Assemble_ply                     ; $ae PLY
>96e6	10 b3					.word	Assemble_rol                     ; $af ROL
>96e8	1a b3					.word	Assemble_ror                     ; $b0 ROR
>96ea	9d b3					.word	Assemble_rti                     ; $b1 RTI
>96ec	ad b3					.word	Assemble_rts                     ; $b2 RTS
>96ee	07 b3					.word	Assemble_sbc                     ; $b3 SBC
>96f0	99 b3					.word	Assemble_sec                     ; $b4 SEC
>96f2	f9 b3					.word	Assemble_sed                     ; $b5 SED
>96f4	b5 b3					.word	Assemble_sei                     ; $b6 SEI
>96f6	fb b2					.word	Assemble_sta                     ; $b7 STA
>96f8	ed b3					.word	Assemble_stp                     ; $b8 STP
>96fa	1f b3					.word	Assemble_stx                     ; $b9 STX
>96fc	3d b3					.word	Assemble_sty                     ; $ba STY
>96fe	33 b3					.word	Assemble_stz                     ; $bb STZ
>9700	d1 b3					.word	Assemble_tax                     ; $bc TAX
>9702	cd b3					.word	Assemble_tay                     ; $bd TAY
>9704	56 b3					.word	Assemble_trb                     ; $be TRB
>9706	51 b3					.word	Assemble_tsb                     ; $bf TSB
>9708	d9 b3					.word	Assemble_tsx                     ; $c0 TSX
>970a	c1 b3					.word	Assemble_txa                     ; $c1 TXA
>970c	c9 b3					.word	Assemble_txs                     ; $c2 TXS
>970e	c5 b3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9710					StopCommand:
.9710	a9 08		lda #$08		lda	#8
.9712	4c d1 99	jmp $99d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.9715					UnaryTimer:
.9715	fa		plx				plx
.9716	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.9719					TimerToStackX:
.9719	20 0c a6	jsr $a60c			jsr 	NSMSetZero 					; zero result
.971c	64 01		stz $01				stz 	1 							; access I/O
.971e	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9721	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9724	ad 5a d6	lda $d65a			lda 	$D65A
.9727	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.972a	ad 5b d6	lda $d65b			lda 	$D65B
.972d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9730	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9731					ListConvertLine:
.9731	9c 9d 04	stz $049d			stz 	tbOffset
.9734	9c aa 04	stz $04aa			stz 	tokenBuffer
.9737	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9739	b1 30		lda ($30),y			lda 	(codePtr),y
.973b	aa		tax				tax
.973c	88		dey				dey
.973d	b1 30		lda ($30),y			lda 	(codePtr),y
.973f	20 a6 af	jsr $afa6			jsr 	ConvertInt16
.9742	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9744	86 37		stx $37				stx 	zTemp0+1
.9746	a0 00		ldy #$00			ldy 	#0
.9748					_LCCopyNumber:
.9748	b1 36		lda ($36),y			lda 	(zTemp0),y
.974a	20 76 98	jsr $9876			jsr 	LCLWrite
.974d	c8		iny				iny
.974e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9750	d0 f6		bne $9748			bne 	_LCCopyNumber
.9752	20 8f 99	jsr $998f			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.9755	48		pha				pha 								; save on stack
.9756	10 0c		bpl $9764			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.9758	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.9759	6d a6 04	adc $04a6			adc 	listIndent
.975c	8d a6 04	sta $04a6			sta 	listIndent
.975f	10 03		bpl $9764			bpl 	_LCNoAdjust
.9761	9c a6 04	stz $04a6			stz 	listIndent
.9764					_LCNoAdjust:
.9764	18		clc				clc		 							; work out actual indent.
.9765	ad a6 04	lda $04a6			lda 	listIndent
.9768	0a		asl a				asl 	a
.9769	69 06		adc #$06			adc 	#6
.976b	85 36		sta $36				sta 	zTemp0
.976d					_LCPadOut:
.976d	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.976f	20 76 98	jsr $9876			jsr 	LCLWrite
.9772	ad 9d 04	lda $049d			lda 	tbOffset
.9775	c5 36		cmp $36				cmp 	zTemp0
.9777	d0 f4		bne $976d			bne 	_LCPadOut
.9779	a0 03		ldy #$03			ldy 	#3 							; start position.
.977b					_LCMainLoop:
.977b	b1 30		lda ($30),y			lda 	(codePtr),y
.977d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.977f	f0 17		beq $9798			beq 	_LCExit
.9781	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9783	90 1e		bcc $97a3			bcc 	_LCDoubles
.9785	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9787	90 2a		bcc $97b3			bcc 	_LCShiftPunc
.9789	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.978b	90 35		bcc $97c2			bcc 	_LCPunctuation
.978d	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.978f	90 3e		bcc $97cf			bcc 	_LCIdentifiers
.9791	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9793	90 5a		bcc $97ef			bcc 	_LCTokens
.9795	4c 4a 98	jmp $984a			jmp 	_LCData 					; 254-5 are data objects
.9798					_LCExit:
.9798	68		pla				pla 								; get old indent adjust
.9799	30 07		bmi $97a2			bmi 	_LCExit2
.979b	18		clc				clc 								; add to indent if +ve
.979c	6d a6 04	adc $04a6			adc 	listIndent
.979f	8d a6 04	sta $04a6			sta 	listIndent
.97a2					_LCExit2:
.97a2	60		rts				rts
.97a3					_LCDoubles:
.97a3	48		pha				pha
.97a4	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.97a5	29 02		and #$02			and 	#2
.97a7	09 3c		ora #$3c			ora 	#60 						; make < >
.97a9	20 76 98	jsr $9876			jsr 	LCLWrite
.97ac	68		pla				pla 								; restore, do lower bit
.97ad	29 03		and #$03			and 	#3
.97af	09 3c		ora #$3c			ora 	#60
.97b1	80 0f		bra $97c2			bra		_LCPunctuation 				; print, increment, loop
.97b3					_LCShiftPunc:
.97b3	aa		tax				tax 								; save in X
.97b4	29 07		and #$07			and 	#7 							; lower 3 bits
.97b6	f0 02		beq $97ba			beq 	_LCNoAdd
.97b8	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.97ba					_LCNoAdd:
.97ba	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.97bc	90 02		bcc $97c0			bcc 	_LCNoAdd2
.97be	09 20		ora #$20			ora 	#32 						; adds $20
.97c0					_LCNoAdd2:
.97c0	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.97c2					_LCPunctuation:
.97c2	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.97c4	d0 03		bne $97c9			bne 	_LCPContinue
.97c6	20 85 98	jsr $9885			jsr 	LCDeleteLastSpace
.97c9					_LCPContinue:
.97c9	c8		iny				iny 								; consume character
.97ca	20 76 98	jsr $9876			jsr 	LCLWrite 					; write it out.
.97cd	80 ac		bra $977b			bra 	_LCMainLoop 				; go round again.
.97cf					_LCIdentifiers:
.97cf	18		clc				clc 								; convert to physical address
.97d0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.97d2	85 37		sta $37				sta 	zTemp0+1
.97d4	c8		iny				iny
.97d5	b1 30		lda ($30),y			lda 	(codePtr),y
.97d7	85 36		sta $36				sta 	zTemp0
.97d9	c8		iny				iny
.97da	5a		phy				phy 								; save position
.97db	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.97dd					_LCOutIdentifier:
.97dd	c8		iny				iny
.97de	b1 36		lda ($36),y			lda 	(zTemp0),y
.97e0	29 7f		and #$7f			and 	#$7F
.97e2	20 c4 98	jsr $98c4			jsr 	LCLLowerCase
.97e5	20 76 98	jsr $9876			jsr 	LCLWrite
.97e8	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.97ea	10 f1		bpl $97dd			bpl 	_LCOutIdentifier
.97ec	7a		ply				ply 								; restore position
.97ed	80 8c		bra $977b			bra 	_LCMainLoop
.97ef					_LCTokens:
.97ef	aa		tax				tax 								; token in X
.97f0	a9 f6		lda #$f6			lda 	#((KeywordSet2) & $FF)
.97f2	85 36		sta $36				sta 	0+zTemp0
.97f4	a9 a9		lda #$a9			lda 	#((KeywordSet2) >> 8)
.97f6	85 37		sta $37				sta 	1+zTemp0
.97f8	e0 82		cpx #$82			cpx 	#$82
.97fa	f0 16		beq $9812			beq 	_LCUseShift
.97fc	a9 a8		lda #$a8			lda 	#((KeywordSet1) & $FF)
.97fe	85 36		sta $36				sta 	0+zTemp0
.9800	a9 a9		lda #$a9			lda 	#((KeywordSet1) >> 8)
.9802	85 37		sta $37				sta 	1+zTemp0
.9804	e0 81		cpx #$81			cpx 	#$81
.9806	f0 0a		beq $9812			beq 	_LCUseShift
.9808	a9 c3		lda #$c3			lda 	#((KeywordSet0) & $FF)
.980a	85 36		sta $36				sta 	0+zTemp0
.980c	a9 a7		lda #$a7			lda 	#((KeywordSet0) >> 8)
.980e	85 37		sta $37				sta 	1+zTemp0
.9810	80 01		bra $9813			bra 	_LCNoShift
.9812					_LCUseShift:
.9812	c8		iny				iny
.9813					_LCNoShift:
.9813	20 99 98	jsr $9899			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9816	b1 30		lda ($30),y			lda 	(codePtr),y
.9818	aa		tax				tax 								; into X
.9819					_LCFindText:
.9819	ca		dex				dex
.981a	10 0e		bpl $982a			bpl 	_LCFoundText 				; found text.
.981c	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.981e	1a		inc a				inc 	a 							; one extra for size
.981f	38		sec				sec 								; one extra for checksum
.9820	65 36		adc $36				adc 	zTemp0 						; go to next token
.9822	85 36		sta $36				sta 	zTemp0
.9824	90 f3		bcc $9819			bcc 	_LCFindText
.9826	e6 37		inc $37				inc 	zTemp0+1
.9828	80 ef		bra $9819			bra 	_LCFindText
.982a					_LCFoundText:
.982a	5a		phy				phy 								; save List position
.982b	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.982d	aa		tax				tax
.982e	a0 02		ldy #$02			ldy 	#2
.9830					_LCCopyToken:
.9830	b1 36		lda ($36),y			lda 	(zTemp0),y
.9832	20 c4 98	jsr $98c4			jsr 	LCLLowerCase
.9835	20 76 98	jsr $9876			jsr 	LCLWrite
.9838	c8		iny				iny
.9839	ca		dex				dex
.983a	d0 f4		bne $9830			bne 	_LCCopyToken
.983c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.983e	f0 05		beq $9845			beq 	_LCNoSpace
.9840	a9 20		lda #$20			lda 	#' '
.9842	20 76 98	jsr $9876			jsr 	LCLWrite
.9845					_LCNoSpace:
.9845	7a		ply				ply 								; restore position.
.9846	c8		iny				iny 								; consume token
.9847	4c 7b 97	jmp $977b			jmp 	_LCMainLoop 				; and go around again.
.984a					_LCData:
.984a	48		pha				pha 								; save type $FE/$FF
.984b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.984d	c9 fe		cmp #$fe			cmp 	#$FE
.984f	f0 02		beq $9853			beq 	_LCHaveOpener
.9851	a2 22		ldx #$22			ldx 	#'"'
.9853					_LCHaveOpener:
.9853	8a		txa				txa 								; output prefix (# or ")
.9854	20 76 98	jsr $9876			jsr 	LCLWrite
.9857	c8		iny				iny 								; get count
.9858	b1 30		lda ($30),y			lda 	(codePtr),y
.985a	aa		tax				tax
.985b	c8		iny				iny 								; point at first character
.985c					_LCOutData:
.985c	b1 30		lda ($30),y			lda 	(codePtr),y
.985e	c9 00		cmp #$00			cmp 	#0
.9860	f0 03		beq $9865			beq 	_LCNoPrint
.9862	20 76 98	jsr $9876			jsr 	LCLWrite
.9865					_LCNoPrint:
.9865	c8		iny				iny
.9866	ca		dex				dex
.9867	d0 f3		bne $985c			bne 	_LCOutData
.9869	68		pla				pla 								; closing " required ?
.986a	c9 ff		cmp #$ff			cmp 	#$FF
.986c	d0 05		bne $9873			bne 	_LCNoQuote
.986e	a9 22		lda #$22			lda 	#'"'
.9870	20 76 98	jsr $9876			jsr 	LCLWrite
.9873					_LCNoQuote:
.9873	4c 7b 97	jmp $977b			jmp 	_LCMainLoop
.9876					LCLWrite:
.9876	da		phx				phx
.9877	ae 9d 04	ldx $049d			ldx 	tbOffset
.987a	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.987d	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9880	ee 9d 04	inc $049d			inc 	tbOffset
.9883	fa		plx				plx
.9884	60		rts				rts
.9885					LCDeleteLastSpace:
.9885	48		pha				pha
.9886	da		phx				phx
.9887	ae 9d 04	ldx $049d			ldx 	tbOffset
.988a	f0 0a		beq $9896			beq 	_LCDLSExit
.988c	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.988f	c9 20		cmp #$20			cmp 	#' '
.9891	d0 03		bne $9896			bne 	_LCDLSExit
.9893	ce 9d 04	dec $049d			dec 	tbOffset
.9896					_LCDLSExit:
.9896	fa		plx				plx
.9897	68		pla				pla
.9898	60		rts				rts
.9899					LCCheckSpaceRequired:
.9899	ae 9d 04	ldx $049d			ldx 	tbOffset
.989c	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.989f	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.98a1	f0 1b		beq $98be			beq 	_LCCSRSpace
.98a3	c9 29		cmp #$29			cmp 	#')'
.98a5	f0 17		beq $98be			beq 	_LCCSRSpace
.98a7	c9 23		cmp #$23			cmp 	#'#'
.98a9	f0 13		beq $98be			beq 	_LCCSRSpace
.98ab	20 c4 98	jsr $98c4			jsr 	LCLLowerCase 				; saves a little effort
.98ae	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.98b0	90 11		bcc $98c3			bcc 	_LCCSRExit
.98b2	c9 3a		cmp #$3a			cmp 	#"9"+1
.98b4	90 08		bcc $98be			bcc 	_LCCSRSpace
.98b6	c9 61		cmp #$61			cmp 	#"a"
.98b8	90 09		bcc $98c3			bcc 	_LCCSRExit
.98ba	c9 7b		cmp #$7b			cmp 	#"z"+1
.98bc	b0 05		bcs $98c3			bcs 	_LCCSRExit
.98be					_LCCSRSpace:
.98be	a9 20		lda #$20			lda 	#' '
.98c0	20 76 98	jsr $9876			jsr 	LCLWrite
.98c3					_LCCSRExit:
.98c3	60		rts				rts
.98c4					LCLLowerCase:
.98c4	c9 41		cmp #$41			cmp 	#"A"
.98c6	90 06		bcc $98ce			bcc 	_LCLLCOut
.98c8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.98ca	b0 02		bcs $98ce			bcs 	_LCLLCOut
.98cc	69 20		adc #$20			adc 	#$20
.98ce					_LCLLCOut:
.98ce	60		rts				rts
.98cf					LCLUpperCase:
.98cf	c9 61		cmp #$61			cmp 	#"a"
.98d1	90 06		bcc $98d9			bcc 	_LCLUCOut
.98d3	c9 7b		cmp #$7b			cmp 	#"z"+1
.98d5	b0 02		bcs $98d9			bcs 	_LCLUCOut
.98d7	e9 1f		sbc #$1f			sbc 	#$1F
.98d9					_LCLUCOut:
.98d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.98da					ProcedureScan:
.98da	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.98dc	85 30		sta $30				sta 	codePtr
.98de	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.98e0	85 31		sta $31				sta 	codePtr+1
.98e2					_PSLoop:
.98e2	b2 30		lda ($30)			lda 	(codePtr)
.98e4	f0 42		beq $9928			beq 	_PSExit
.98e6	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.98e8	b1 30		lda ($30),y			lda 	(codePtr),y
.98ea	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.98ec	d0 2d		bne $991b			bne 	_PSNext
.98ee	c8		iny				iny 								; get the address of the record to zTemp0 and
.98ef	b1 30		lda ($30),y			lda 	(codePtr),y
.98f1	29 c0		and #$c0			and 	#$C0
.98f3	c9 40		cmp #$40			cmp 	#$40
.98f5	d0 32		bne $9929			bne 	_PSSyntax
.98f7	b1 30		lda ($30),y			lda 	(codePtr),y
.98f9	18		clc				clc
.98fa	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98fc	85 37		sta $37				sta 	zTemp0+1
.98fe	c8		iny				iny 								; LSB
.98ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9901	85 36		sta $36				sta 	zTemp0
.9903	c8		iny				iny 								; character after variable call.
.9904	98		tya				tya 								; save Y offset at +7
.9905	a0 07		ldy #$07			ldy 	#7
.9907	91 36		sta ($36),y			sta 	(zTemp0),y
.9909	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.990b	a0 02		ldy #$02			ldy 	#2
.990d	91 36		sta ($36),y			sta 	(zTemp0),y
.990f	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9911					_PSCopy:
.9911	b5 30		lda $30,x			lda 	safePtr,x
.9913	c8		iny				iny
.9914	91 36		sta ($36),y			sta 	(zTemp0),y
.9916	e8		inx				inx
.9917	e0 04		cpx #$04			cpx 	#4
.9919	d0 f6		bne $9911			bne 	_PSCopy
.991b					_PSNext:
.991b	18		clc				clc
.991c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.991e	65 30		adc $30				adc 	codePtr
.9920	85 30		sta $30				sta 	codePtr
.9922	90 02		bcc $9926			bcc 	_CREExit
.9924	e6 31		inc $31				inc 	codePtr+1
.9926					_CREExit:
.9926	80 ba		bra $98e2			bra 	_PSLoop
.9928					_PSExit:
.9928	60		rts				rts
.9929					_PSSyntax:
.9929	4c 38 b4	jmp $b438			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.992c					ScanForward:
.992c	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.992e	86 37		stx $37				stx 	zTemp0+1
.9930	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9932					_ScanLoop:
.9932	b1 30		lda ($30),y			lda 	(codePtr),y
.9934	c8		iny				iny
.9935	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9937	d0 0e		bne $9947			bne 	_ScanGoNext
.9939	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.993b	f0 04		beq $9941			beq 	_ScanMatch
.993d	c5 37		cmp $37				cmp 	zTemp0+1
.993f	d0 06		bne $9947			bne 	_ScanGoNext
.9941					_ScanMatch:
.9941	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9943	d0 01		bne $9946			bne 	_ScanNotEndEOL
.9945	88		dey				dey
.9946					_ScanNotEndEOL:
.9946	60		rts				rts
.9947					_ScanGoNext:
.9947	20 4c 99	jsr $994c			jsr  	ScanForwardOne
.994a	80 e6		bra $9932			bra 	_ScanLoop
.994c					ScanForwardOne:
.994c	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.994e	90 3e		bcc $998e			bcc 	_SFWExit
.9950	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9952	90 18		bcc $996c			bcc 	_ScanSkipOne
.9954	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9956	b0 2f		bcs $9987			bcs 	_ScanSkipData
.9958	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.995a	90 32		bcc $998e			bcc 	_SFWExit 					; if not, ordinary keywords.
.995c	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.995e	b0 2e		bcs $998e			bcs 	_SFWExit
.9960	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9962	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9964	b0 28		bcs $998e			bcs 	_SFWExit
.9966	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9968	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.996a	80 22		bra $998e			bra 	_SFWExit
.996c					_ScanSkipOne:
.996c	c8		iny				iny 								; consume the extra one.
.996d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.996f	d0 1d		bne $998e			bne 	_SFWExit
.9971	18		clc				clc
.9972	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9974	65 30		adc $30				adc 	codePtr
.9976	85 30		sta $30				sta 	codePtr
.9978	90 02		bcc $997c			bcc 	_CREExit
.997a	e6 31		inc $31				inc 	codePtr+1
.997c					_CREExit:
.997c	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.997e	b2 30		lda ($30)			lda 	(codePtr)
.9980	d0 0c		bne $998e			bne 	_SFWExit 					; if not zero, more to scan
.9982	a9 13		lda #$13		lda	#19
.9984	4c d1 99	jmp $99d1		jmp	ErrorHandler
.9987					_ScanSkipData:
.9987	88		dey				dey 								; point at data token
.9988	c8		iny				iny
.9989	98		tya				tya
.998a	38		sec				sec
.998b	71 30		adc ($30),y			adc 	(codePtr),y
.998d	a8		tay				tay
.998e					_SFWExit:
.998e	60		rts				rts
.998f					ScanGetCurrentLineStep:
.998f	64 38		stz $38				stz 	zTemp1
.9991	a0 03		ldy #$03			ldy 	#3
.9993					_SGCLSLoop:
.9993	b1 30		lda ($30),y			lda 	(codePtr),y
.9995	c8		iny				iny
.9996	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9998	f0 05		beq $999f			beq 	_SGCLSExit
.999a	20 4c 99	jsr $994c			jsr 	ScanForwardOne
.999d	80 f4		bra $9993			bra 	_SGCLSLoop
.999f					_SGCLSExit:
.999f	a5 38		lda $38				lda 	zTemp1
.99a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.99a2					Command_WHILE:
.99a2	5a		phy				phy 								; save position of the test
.99a3	a2 00		ldx #$00			ldx 	#0
.99a5	20 4c a5	jsr $a54c			jsr 	EvaluateNumber 				; work out the number
.99a8	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; check if zero
.99ab	f0 0e		beq $99bb			beq 	_WHExitLoop 				; if so exit the loop
.99ad	98		tya				tya 								; position *after* test.
.99ae	7a		ply				ply 								; restore position before test, at WHILE
.99af	88		dey				dey
.99b0	48		pha				pha 								; push after test on the stack
.99b1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.99b3	20 c0 a6	jsr $a6c0			jsr 	StackOpen
.99b6	20 04 a7	jsr $a704			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.99b9	7a		ply				ply 								; restore the position *after* the test
.99ba	60		rts				rts
.99bb					_WHExitLoop:
.99bb	68		pla				pla 								; throw post loop position
.99bc	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.99be	aa		tax				tax
.99bf	20 2c 99	jsr $992c			jsr 	ScanForward
.99c2	60		rts				rts
.99c3					Command_WEND:
.99c3	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.99c5	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.99c7	20 ec a6	jsr $a6ec			jsr 	StackCheckFrame
.99ca	20 15 a7	jsr $a715			jsr 	STKLoadCodePosition 		; loop back
.99cd	20 de a6	jsr $a6de			jsr 	StackClose		 			; erase the frame
.99d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ae4a					CheckRightBracket:
.ae4a	b1 30		lda ($30),y			lda 	(codePtr),y
.ae4c	c8		iny				iny
.ae4d	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ae4f	d0 0f		bne $ae60			bne 	CNAFail
.ae51	60		rts				rts
.ae52					CheckComma:
.ae52	b1 30		lda ($30),y			lda 	(codePtr),y
.ae54	c8		iny				iny
.ae55	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ae57	d0 07		bne $ae60			bne 	CNAFail
.ae59	60		rts				rts
.ae5a					CheckNextA:
.ae5a	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ae5c	d0 02		bne $ae60			bne 	CNAFail
.ae5e	c8		iny				iny 								; skip character
.ae5f	60		rts				rts 								; and exit
.ae60					CNAFail:
.ae60	4c 38 b4	jmp $b438			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.99d1					ErrorHandler:
.99d1	a8		tay				tay 								; find the error text
.99d2	f0 49		beq $9a1d			beq 	_EHEnd
.99d4	a2 00		ldx #$00			ldx 	#0
.99d6	a9 51		lda #$51			lda 	#((ErrorText) & $FF)
.99d8	85 36		sta $36				sta 	0+zTemp0
.99da	a9 b4		lda #$b4			lda 	#((ErrorText) >> 8)
.99dc	85 37		sta $37				sta 	1+zTemp0
.99de					_EHFind:
.99de	88		dey				dey 								; found the error text ?
.99df	f0 0e		beq $99ef			beq 	_EHFound
.99e1					_EHFindZero:
.99e1	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.99e3	e6 36		inc $36				inc 	zTemp0
.99e5	d0 02		bne $99e9			bne 	_EHFNoCarry
.99e7	e6 37		inc $37				inc 	zTemp0+1
.99e9					_EHFNoCarry:
.99e9	c9 00		cmp #$00			cmp 	#0
.99eb	d0 f4		bne $99e1			bne 	_EHFindZero
.99ed	80 ef		bra $99de			bra 	_EHFind
.99ef					_EHFound:
.99ef	a5 36		lda $36				lda 	zTemp0 						; print message
.99f1	a6 37		ldx $37				ldx 	zTemp0+1
.99f3	20 2a 9a	jsr $9a2a			jsr 	PrintStringXA
.99f6	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.99f8	b1 30		lda ($30),y			lda 	(codePtr),y
.99fa	d0 05		bne $9a01			bne 	_EHAtMsg
.99fc	c8		iny				iny
.99fd	b1 30		lda ($30),y			lda 	(codePtr),y
.99ff	f0 17		beq $9a18			beq 	_EHCREnd
.9a01					_EHAtMsg:
.9a01	a2 9a		ldx #$9a			ldx 	#_AtMsg >> 8 				; print " at "
.9a03	a9 20		lda #$20			lda 	#_AtMsg & $FF
.9a05	20 2a 9a	jsr $9a2a			jsr 	PrintStringXA
.9a08	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9a0a	b1 30		lda ($30),y			lda 	(codePtr),y
.9a0c	48		pha				pha
.9a0d	c8		iny				iny
.9a0e	b1 30		lda ($30),y			lda 	(codePtr),y
.9a10	aa		tax				tax
.9a11	68		pla				pla
.9a12	20 a6 af	jsr $afa6			jsr 	ConvertInt16 				; convert XA to string
.9a15	20 2a 9a	jsr $9a2a			jsr 	PrintStringXA 				; and print it.
.9a18					_EHCREnd:
.9a18	a9 0d		lda #$0d			lda 	#13 						; new line
.9a1a	20 f1 b5	jsr $b5f1			jsr 	EXTPrintCharacter
.9a1d					_EHEnd:
.9a1d	4c 72 8b	jmp $8b72			jmp 	WarmStart
>9a20	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9a28	20 00
.9a2a					PrintStringXA:
.9a2a	5a		phy				phy
.9a2b	86 37		stx $37				stx 	zTemp0+1
.9a2d	85 36		sta $36				sta 	zTemp0
.9a2f	a0 00		ldy #$00			ldy 	#0
.9a31					_PSXALoop:
.9a31	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a33	f0 06		beq $9a3b			beq 	_PSXAExit
.9a35	20 f1 b5	jsr $b5f1			jsr 	EXTPrintCharacter
.9a38	c8		iny				iny
.9a39	80 f6		bra $9a31			bra 	_PSXALoop
.9a3b					_PSXAExit:
.9a3b	7a		ply				ply
.9a3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9a3d					UnaryTrue:
.9a3d	fa		plx				plx
.9a3e					ReturnTrue:
.9a3e	a9 01		lda #$01			lda 	#1  						; set to 1
.9a40	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.9a43	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9a45	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a48	60		rts				rts
.9a49					UnaryFalse:
.9a49	fa		plx				plx
.9a4a					ReturnFalse:
.9a4a	4c 0c a6	jmp $a60c			jmp 	NSMSetZero 					; set it all to zero
.9a4d					BinaryCompareEqual:
.9a4d	fa		plx				plx
.9a4e	20 89 9a	jsr $9a89			jsr 	CompareBaseCode
.9a51	c9 00		cmp #$00			cmp 	#0
.9a53	f0 e9		beq $9a3e			beq 	ReturnTrue
.9a55	80 f3		bra $9a4a			bra 	ReturnFalse
.9a57					BinaryCompareLess:
.9a57	fa		plx				plx
.9a58	20 89 9a	jsr $9a89			jsr 	CompareBaseCode
.9a5b	c9 ff		cmp #$ff			cmp 	#$FF
.9a5d	f0 df		beq $9a3e			beq 	ReturnTrue
.9a5f	80 e9		bra $9a4a			bra 	ReturnFalse
.9a61					BinaryCompareGreater:
.9a61	fa		plx				plx
.9a62	20 89 9a	jsr $9a89			jsr 	CompareBaseCode
.9a65	c9 01		cmp #$01			cmp 	#1
.9a67	f0 d5		beq $9a3e			beq 	ReturnTrue
.9a69	80 df		bra $9a4a			bra 	ReturnFalse
.9a6b					BinaryCompareNotEqual:
.9a6b	fa		plx				plx
.9a6c	20 89 9a	jsr $9a89			jsr 	CompareBaseCode
.9a6f	c9 00		cmp #$00			cmp 	#0
.9a71	d0 cb		bne $9a3e			bne 	ReturnTrue
.9a73	80 d5		bra $9a4a			bra 	ReturnFalse
.9a75					BinaryCompareLessEqual:
.9a75	fa		plx				plx
.9a76	20 89 9a	jsr $9a89			jsr 	CompareBaseCode
.9a79	c9 01		cmp #$01			cmp 	#1
.9a7b	d0 c1		bne $9a3e			bne 	ReturnTrue
.9a7d	80 cb		bra $9a4a			bra 	ReturnFalse
.9a7f					BinaryCompareGreaterEqual:
.9a7f	fa		plx				plx
.9a80	20 89 9a	jsr $9a89			jsr 	CompareBaseCode
.9a83	c9 ff		cmp #$ff			cmp 	#$FF
.9a85	d0 b7		bne $9a3e			bne 	ReturnTrue
.9a87	80 c1		bra $9a4a			bra 	ReturnFalse
.9a89					CompareBaseCode:
.9a89	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; make both values if references.
.9a8c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9a8f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a92	29 10		and #$10			and 	#NSTString
.9a94	d0 40		bne $9ad6			bne 	_CBCString
.9a96	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9a99	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a9c	d0 3b		bne $9ad9			bne 	_CBCFloat
.9a9e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9aa1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9aa4	29 08		and #$08			and 	#NSTFloat
.9aa6	d0 31		bne $9ad9			bne 	_CBCFloat
.9aa8	20 dc 9a	jsr $9adc			jsr 	CompareFixMinusZero
.9aab	e8		inx				inx
.9aac	20 dc 9a	jsr $9adc			jsr 	CompareFixMinusZero
.9aaf	ca		dex				dex
.9ab0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9ab3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9ab6	10 0b		bpl $9ac3			bpl 	_CDCSameSign
.9ab8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9abb	30 16		bmi $9ad3			bmi 	_CBCLess 					; return $FF
.9abd					_CBCGreater:
.9abd	a9 01		lda #$01			lda 	#1
.9abf	60		rts				rts
.9ac0					_CBCEqual:
.9ac0	a9 00		lda #$00			lda 	#0
.9ac2	60		rts				rts
.9ac3					_CDCSameSign:
.9ac3	20 ec 9b	jsr $9bec			jsr 	SubTopTwoStack 				; unsigned subtract
.9ac6	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; or the mantissa together
.9ac9	f0 f5		beq $9ac0			beq 	_CBCEqual 					; -0 == 0
.9acb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9ace	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9ad1	10 ea		bpl $9abd			bpl 	_CBCGreater
.9ad3					_CBCLess:
.9ad3	a9 ff		lda #$ff			lda 	#$FF
.9ad5	60		rts				rts
.9ad6					_CBCString:
.9ad6	4c 42 9b	jmp $9b42			jmp 	CompareStrings
.9ad9					_CBCFloat:
.9ad9	4c aa b0	jmp $b0aa			jmp 	CompareFloat
.9adc					CompareFixMinusZero:
.9adc	20 3c a6	jsr $a63c			jsr 	NSMIsZero
.9adf	d0 03		bne $9ae4			bne 	_CFXMZNotZero
.9ae1	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9ae4					_CFXMZNotZero:
.9ae4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9ae5					StringConcat:
.9ae5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9ae8	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9aeb	29 18		and #$18			and 	#NSBTypeMask
.9aed	c9 10		cmp #$10			cmp 	#NSTString
.9aef	d0 4e		bne $9b3f			bne		_SCType
.9af1	64 38		stz $38				stz 	zTemp1 						; counting total length
.9af3	e8		inx				inx
.9af4	20 12 9b	jsr $9b12			jsr 	_SCSetupZ0 					; setup for second
.9af7	20 1d 9b	jsr $9b1d			jsr 	_SCLengthZ0 				; length for second
.9afa	ca		dex				dex
.9afb	20 12 9b	jsr $9b12			jsr 	_SCSetupZ0 					; setup for first
.9afe	20 1d 9b	jsr $9b1d			jsr 	_SCLengthZ0 				; length for first
.9b01	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9b03	20 ba b7	jsr $b7ba			jsr 	StringTempAllocate
.9b06	20 30 9b	jsr $9b30			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9b09	e8		inx				inx
.9b0a	20 12 9b	jsr $9b12			jsr 	_SCSetupZ0 					; copy second out
.9b0d	20 30 9b	jsr $9b30			jsr 	_SCCopy
.9b10	ca		dex				dex
.9b11	60		rts				rts
.9b12					_SCSetupZ0:
.9b12	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b15	85 36		sta $36				sta 	zTemp0
.9b17	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b1a	85 37		sta $37				sta 	zTemp0+1
.9b1c	60		rts				rts
.9b1d					_SCLengthZ0:
.9b1d	5a		phy				phy
.9b1e	a0 00		ldy #$00			ldy 	#0
.9b20					_SCLenLoop:
.9b20	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b22	f0 0a		beq $9b2e			beq 	_SCLExit
.9b24	c8		iny				iny
.9b25	e6 38		inc $38				inc 	zTemp1
.9b27	10 f7		bpl $9b20			bpl		_SCLenLoop
.9b29	a9 09		lda #$09		lda	#9
.9b2b	4c d1 99	jmp $99d1		jmp	ErrorHandler
.9b2e					_SCLExit:
.9b2e	7a		ply				ply
.9b2f	60		rts				rts
.9b30					_SCCopy:
.9b30	5a		phy				phy
.9b31	a0 00		ldy #$00			ldy 	#0
.9b33					_SCCopyLoop:
.9b33	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b35	f0 06		beq $9b3d			beq 	_SCCExit
.9b37	20 f8 b7	jsr $b7f8			jsr 	StringTempWrite
.9b3a	c8		iny				iny
.9b3b	80 f6		bra $9b33			bra 	_SCCopyLoop
.9b3d					_SCCExit:
.9b3d	7a		ply				ply
.9b3e	60		rts				rts
.9b3f					_SCType:
.9b3f	4c 42 b4	jmp $b442			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ae63					IntegerDivide:
.ae63	fa		plx				plx
.ae64	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae67	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae6a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae6b	0a		asl a				asl 	a
.ae6c	10 05		bpl $ae73			bpl 	_NotRef
.ae6e	48		pha				pha
.ae6f	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae72	68		pla				pla
.ae73					_NotRef:
.ae73	0a		asl a				asl 	a
.ae74	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ae76	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae79	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae7c	f0 03		beq $ae81			beq 	_IntegerCode 				; if clear, then we have two integers
.ae7e	4c 42 b4	jmp $b442			jmp 	TypeError 					; anything else, type mismatch.
.ae81					_IntegerCode:
.ae81	20 a3 ae	jsr $aea3			jsr 	CheckDivideZero 			; do div zero check
.ae84	20 db ae	jsr $aedb			jsr 	Int32Divide 				; do the division
.ae87	20 98 af	jsr $af98			jsr 	CalculateSign 				; calculate result sign
.ae8a					NSMCopyPlusTwoToZero:
.ae8a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ae8d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ae90	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ae93	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae96	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ae99	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ae9c	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ae9f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aea2	60		rts				rts
.aea3					CheckDivideZero:
.aea3	e8		inx				inx
.aea4	20 3c a6	jsr $a63c			jsr 	NSMIsZero
.aea7	f0 02		beq $aeab			beq 	_CDVError
.aea9	ca		dex				dex
.aeaa	60		rts				rts
.aeab					_CDVError:
.aeab	a9 03		lda #$03		lda	#3
.aead	4c d1 99	jmp $99d1		jmp	ErrorHandler
.aeb0					IntegerModulus:
.aeb0	fa		plx				plx
.aeb1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aeb4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aeb7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aeb8	0a		asl a				asl 	a
.aeb9	10 05		bpl $aec0			bpl 	_NotRef
.aebb	48		pha				pha
.aebc	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aebf	68		pla				pla
.aec0					_NotRef:
.aec0	0a		asl a				asl 	a
.aec1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aec3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aec6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aec9	f0 03		beq $aece			beq 	_IntegerCode 				; if clear, then we have two integers
.aecb	4c 42 b4	jmp $b442			jmp 	TypeError 					; anything else, type mismatch.
.aece					_IntegerCode:
.aece					IntegerModulusNoCheck:
.aece	20 a3 ae	jsr $aea3			jsr 	CheckDivideZero 			; do div zero check
.aed1	20 db ae	jsr $aedb			jsr 	Int32Divide 				; do the division
.aed4	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aed7	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.aeda	60		rts				rts
.aedb					Int32Divide:
.aedb	48		pha				pha 								; save AXY
.aedc	5a		phy				phy
.aedd	20 e3 a5	jsr $a5e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aee0	20 08 a6	jsr $a608			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.aee3	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.aee5					_I32DivideLoop:
.aee5	e8		inx				inx
.aee6	e8		inx				inx
.aee7	20 21 a6	jsr $a621			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aeea	ca		dex				dex
.aeeb	ca		dex				dex
.aeec	20 22 a6	jsr $a622			jsr 	NSMRotateLeft
.aeef	20 1b af	jsr $af1b			jsr 	DivideCheckSubtract 		; check if subtract possible
.aef2	90 03		bcc $aef7			bcc 	_I32DivideNoCarryIn
.aef4	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aef7					_I32DivideNoCarryIn:
.aef7	88		dey				dey 								; loop round till division completed.
.aef8	d0 eb		bne $aee5			bne 	_I32DivideLoop
.aefa	7a		ply				ply 								; restore AXY and exit
.aefb	68		pla				pla
.aefc	60		rts				rts
.aefd					Int32ShiftDivide:
.aefd	48		pha				pha 								; save AY
.aefe	5a		phy				phy
.aeff	e8		inx				inx 								; clear S[X+2]
.af00	e8		inx				inx
.af01	20 0c a6	jsr $a60c			jsr 	NSMSetZero
.af04	ca		dex				dex
.af05	ca		dex				dex
.af06	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.af08					_I32SDLoop:
.af08	20 1b af	jsr $af1b			jsr 	DivideCheckSubtract 		; check if subtract possible
.af0b	e8		inx				inx
.af0c	e8		inx				inx
.af0d	20 22 a6	jsr $a622			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.af10	ca		dex				dex
.af11	ca		dex				dex
.af12	20 22 a6	jsr $a622			jsr 	NSMRotateLeft
.af15	88		dey				dey 	 							; do 31 times
.af16	d0 f0		bne $af08			bne 	_I32SDLoop
.af18	7a		ply				ply 								; restore AY and exit
.af19	68		pla				pla
.af1a	60		rts				rts
.af1b					DivideCheckSubtract:
.af1b	20 ec 9b	jsr $9bec			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.af1e	b0 04		bcs $af24			bcs 	_DCSExit 					; if carry set, then could do, exit
.af20	20 c6 9b	jsr $9bc6			jsr 	AddTopTwoStack 				; add it back in
.af23	18		clc				clc 								; and return False
.af24					_DCSExit:
.af24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.af25					MulInteger:
.af25	fa		plx				plx
.af26	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af29	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af2c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af2d	0a		asl a				asl 	a
.af2e	10 05		bpl $af35			bpl 	_NotRef
.af30	48		pha				pha
.af31	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af34	68		pla				pla
.af35					_NotRef:
.af35	0a		asl a				asl 	a 							; put MSB of type into A:7
.af36	30 0b		bmi $af43			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.af38	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af3b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af3e	f0 06		beq $af46			beq 	_IntegerCode 				; if clear, then we have two integers
.af40	4c 81 b1	jmp $b181			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.af43					_StringData:
.af43	4c 4c b4	jmp $b44c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.af46					_IntegerCode:
.af46	20 53 af	jsr $af53			jsr 	MultiplyShort
.af49	c9 00		cmp #$00			cmp 	#0
.af4b	f0 05		beq $af52			beq 	_MIExit
.af4d	a9 04		lda #$04		lda	#4
.af4f	4c d1 99	jmp $99d1		jmp	ErrorHandler
.af52					_MIExit:
.af52	60		rts				rts
.af53					MultiplyShort:
.af53	5a		phy				phy 								; save Y
.af54	20 e3 a5	jsr $a5e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.af57	20 08 a6	jsr $a608			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.af5a	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.af5c					_I32MLoop:
.af5c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.af5f	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.af62	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.af65	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.af68	f0 28		beq $af92			beq 	_I32MExit 					; exit if zero
.af6a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.af6d	29 01		and #$01			and 	#1
.af6f	f0 0e		beq $af7f			beq 	_I32MNoAdd
.af71	20 c6 9b	jsr $9bc6			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.af74	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.af77	10 06		bpl $af7f			bpl 	_I32MNoAdd
.af79					_I32ShiftRight:
.af79	20 2f a6	jsr $a62f			jsr 	NSMShiftRight 				; shift S[X] right
.af7c	c8		iny				iny 								; increment shift count
.af7d	80 0a		bra $af89			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.af7f					_I32MNoAdd:
.af7f	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.af82	70 f5		bvs $af79			bvs 	_I32ShiftRight 				; instead.
.af84	e8		inx				inx
.af85	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.af88	ca		dex				dex
.af89					_I32MShiftUpper:
.af89	e8		inx				inx 								; shift S[X+2] right
.af8a	e8		inx				inx
.af8b	20 2f a6	jsr $a62f			jsr 	NSMShiftRight
.af8e	ca		dex				dex
.af8f	ca		dex				dex
.af90	80 ca		bra $af5c			bra 	_I32MLoop 					; try again.
.af92					_I32MExit:
.af92	20 98 af	jsr $af98			jsr 	CalculateSign
.af95	98		tya				tya 								; shift in A
.af96	7a		ply				ply 								; restore Y and exit
.af97	60		rts				rts
.af98					CalculateSign:
.af98	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.af9b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.af9e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.afa1	0a		asl a				asl 	a 							; shift bit 7 into carry
.afa2	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.afa5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9b42					CompareStrings:
.9b42	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9b45	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9b48	29 10		and #$10			and 	#NSBIsString
.9b4a	f0 2c		beq $9b78			beq 	_CSTypeError
.9b4c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9b4f	85 36		sta $36				sta 	zTemp0
.9b51	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b54	85 37		sta $37				sta 	zTemp0+1
.9b56	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b59	85 38		sta $38				sta 	zTemp1
.9b5b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b5e	85 39		sta $39				sta 	zTemp1+1
.9b60	5a		phy				phy 								; save Y so we can access strings
.9b61	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9b63					_CSLoop:
.9b63	c8		iny				iny
.9b64	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9b66	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9b68	d0 06		bne $9b70			bne 	_CSDifferent
.9b6a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9b6c	d0 f5		bne $9b63			bne 	_CSLoop 					; still comparing
.9b6e					_CSExit:
.9b6e	7a		ply				ply 								; reached end, return zero in A from EOS
.9b6f	60		rts				rts
.9b70					_CSDifferent:
.9b70	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9b72	90 fa		bcc $9b6e			bcc		_CSExit
.9b74	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9b76	80 f6		bra $9b6e			bra 	_CSExit
.9b78					_CSTypeError:
.9b78	4c 42 b4	jmp $b442			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9b7b					ShiftLeft:
.9b7b	38		sec				sec
.9b7c	80 01		bra $9b7f			bra 	ShiftMain
.9b7e					ShiftRight:
.9b7e	18		clc				clc
.9b7f					ShiftMain:
.9b7f	fa		plx				plx 								; restore X
.9b80	08		php				php 								; save direction
.9b81	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b84	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b87	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b88	0a		asl a				asl 	a
.9b89	10 05		bpl $9b90			bpl 	_NotRef
.9b8b	48		pha				pha
.9b8c	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b8f	68		pla				pla
.9b90					_NotRef:
.9b90	0a		asl a				asl 	a
.9b91	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b93	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b96	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b99	f0 03		beq $9b9e			beq 	_IntegerCode 				; if clear, then we have two integers
.9b9b	4c 42 b4	jmp $b442			jmp 	TypeError 					; anything else, type mismatch.
.9b9e					_IntegerCode:
.9b9e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ba1	29 e0		and #$e0			and 	#$E0
.9ba3	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ba6	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9ba9	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9bac	d0 13		bne $9bc1			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9bae					_SMLoop:
.9bae	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9bb1	30 11		bmi $9bc4			bmi 	_SMExit 					; exit if done.
.9bb3	28		plp				plp 								; restore direcition setting
.9bb4	08		php				php
.9bb5	90 05		bcc $9bbc			bcc 	_SMRight
.9bb7	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; shift left if CS
.9bba	80 f2		bra $9bae			bra 	_SMLoop
.9bbc					_SMRight:
.9bbc	20 2f a6	jsr $a62f			jsr 	NSMShiftRight 				; shift right if CC
.9bbf	80 ed		bra $9bae			bra 	_SMLoop
.9bc1					_SMExit0:
.9bc1	20 0c a6	jsr $a60c			jsr 	NSMSetZero 					; return zero.
.9bc4					_SMExit:
.9bc4	28		plp				plp 								; throw direction
.9bc5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9bc6					AddTopTwoStack:
.9bc6	18		clc				clc
.9bc7	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bca	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9bcd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bd0	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bd3	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9bd6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bd9	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bdc	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9bdf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9be2	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9be5	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9be8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9beb	60		rts				rts
.9bec					SubTopTwoStack:
.9bec	38		sec				sec
.9bed	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bf0	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9bf3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bf6	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bf9	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9bfc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bff	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c02	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9c05	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c08	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c0b	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9c0e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c11	60		rts				rts
.9c12					AddInteger:
.9c12	fa		plx				plx
.9c13	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c16	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c19	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c1a	0a		asl a				asl 	a
.9c1b	10 05		bpl $9c22			bpl 	_NotRef
.9c1d	48		pha				pha
.9c1e	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c21	68		pla				pla
.9c22					_NotRef:
.9c22	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c23	30 0b		bmi $9c30			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c25	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c28	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c2b	f0 06		beq $9c33			beq 	_IntegerCode 				; if clear, then we have two integers
.9c2d	4c 01 b0	jmp $b001			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9c30					_StringData:
.9c30	4c e5 9a	jmp $9ae5			jmp 	StringConcat							; at least one string - don't know both are strings.
.9c33					_IntegerCode:
.9c33					AddCode:
.9c33	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9c36	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9c39	10 8b		bpl $9bc6			bpl 	AddTopTwoStack
.9c3b	20 ec 9b	jsr $9bec			jsr 	SubTopTwoStack 				; do a physical subtraction
.9c3e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9c41	10 09		bpl $9c4c			bpl 	_AddExit
.9c43	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9c46	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c49	20 c1 a5	jsr $a5c1			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9c4c					_AddExit:
.9c4c	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; check for -0
.9c4f	d0 03		bne $9c54			bne 	_AddNonZero
.9c51	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9c54					_AddNonZero:
.9c54	60		rts				rts
.9c55					SubInteger:
.9c55	fa		plx				plx
.9c56	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c59	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c5c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c5d	0a		asl a				asl 	a
.9c5e	10 05		bpl $9c65			bpl 	_NotRef
.9c60	48		pha				pha
.9c61	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c64	68		pla				pla
.9c65					_NotRef:
.9c65	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c66	30 0b		bmi $9c73			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c68	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c6b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c6e	f0 06		beq $9c76			beq 	_IntegerCode 				; if clear, then we have two integers
.9c70	4c 06 b0	jmp $b006			jmp 	FloatingPointSub 							; otherwise at least one float.
.9c73					_StringData:
.9c73	4c 4c b4	jmp $b44c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c76					_IntegerCode:
.9c76	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9c79	49 80		eor #$80			eor 	#$80
.9c7b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c7e	80 b3		bra $9c33			bra 	AddCode 					; and do the same code as add.
.9c80					AndInteger:
.9c80	fa		plx				plx
.9c81	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c84	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c87	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c88	0a		asl a				asl 	a
.9c89	10 05		bpl $9c90			bpl 	_NotRef
.9c8b	48		pha				pha
.9c8c	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c8f	68		pla				pla
.9c90					_NotRef:
.9c90	0a		asl a				asl 	a
.9c91	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c93	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c96	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c99	f0 03		beq $9c9e			beq 	_IntegerCode 				; if clear, then we have two integers
.9c9b	4c 42 b4	jmp $b442			jmp 	TypeError 					; anything else, type mismatch.
.9c9e					_IntegerCode:
.9c9e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ca1	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9ca4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ca7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9caa	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9cad	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cb0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cb3	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9cb6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cb9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cbc	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9cbf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cc2	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9cc5	60		rts				rts
.9cc6					OraInteger:
.9cc6	fa		plx				plx
.9cc7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cca	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ccd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cce	0a		asl a				asl 	a
.9ccf	10 05		bpl $9cd6			bpl 	_NotRef
.9cd1	48		pha				pha
.9cd2	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cd5	68		pla				pla
.9cd6					_NotRef:
.9cd6	0a		asl a				asl 	a
.9cd7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cd9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cdc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cdf	f0 03		beq $9ce4			beq 	_IntegerCode 				; if clear, then we have two integers
.9ce1	4c 42 b4	jmp $b442			jmp 	TypeError 					; anything else, type mismatch.
.9ce4					_IntegerCode:
.9ce4	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ce7	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9cea	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ced	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cf0	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9cf3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cf6	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cf9	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9cfc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cff	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d02	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9d05	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d08	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d0b	60		rts				rts
.9d0c					EorInteger:
.9d0c	fa		plx				plx
.9d0d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d10	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d13	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d14	0a		asl a				asl 	a
.9d15	10 05		bpl $9d1c			bpl 	_NotRef
.9d17	48		pha				pha
.9d18	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d1b	68		pla				pla
.9d1c					_NotRef:
.9d1c	0a		asl a				asl 	a
.9d1d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d1f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d22	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d25	f0 03		beq $9d2a			beq 	_IntegerCode 				; if clear, then we have two integers
.9d27	4c 42 b4	jmp $b442			jmp 	TypeError 					; anything else, type mismatch.
.9d2a					_IntegerCode:
.9d2a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d2d	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9d30	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d33	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d36	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9d39	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d3c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d3f	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9d42	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d45	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d48	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9d4b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d4e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d51	60		rts				rts
.9d52					WordIndirect:
.9d52	fa		plx				plx
.9d53	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d56	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d59	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d5a	0a		asl a				asl 	a
.9d5b	10 05		bpl $9d62			bpl 	_NotRef
.9d5d	48		pha				pha
.9d5e	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d61	68		pla				pla
.9d62					_NotRef:
.9d62	0a		asl a				asl 	a
.9d63	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d65	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d68	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d6b	f0 03		beq $9d70			beq 	_IntegerCode 				; if clear, then we have two integers
.9d6d	4c 42 b4	jmp $b442			jmp 	TypeError 					; anything else, type mismatch.
.9d70					_IntegerCode:
.9d70	20 33 9c	jsr $9c33			jsr 	AddCode 					; add the two values
.9d73	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9d75	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d78	60		rts				rts
.9d79					ByteIndirect:
.9d79	fa		plx				plx
.9d7a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d7d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d80	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d81	0a		asl a				asl 	a
.9d82	10 05		bpl $9d89			bpl 	_NotRef
.9d84	48		pha				pha
.9d85	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d88	68		pla				pla
.9d89					_NotRef:
.9d89	0a		asl a				asl 	a
.9d8a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d8c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d8f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d92	f0 03		beq $9d97			beq 	_IntegerCode 				; if clear, then we have two integers
.9d94	4c 42 b4	jmp $b442			jmp 	TypeError 					; anything else, type mismatch.
.9d97					_IntegerCode:
.9d97	20 33 9c	jsr $9c33			jsr 	AddCode 					; add the two values
.9d9a	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9d9c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.afa6					ConvertInt16:
.afa6	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.afa9	8e 10 04	stx $0410			stx 	NSMantissa1
.afac	9c 18 04	stz $0418			stz 	NSMantissa2
.afaf	9c 20 04	stz $0420			stz 	NSMantissa3
.afb2	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.afb5	a2 00		ldx #$00			ldx 	#0 							; stack level
.afb7	a9 0a		lda #$0a			lda 	#10 						; base
.afb9	80 00		bra $afbb			bra 	ConvertInt32
.afbb					ConvertInt32:
.afbb	5a		phy				phy
.afbc	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.afbe	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.afc1	10 08		bpl $afcb			bpl 	_CI32NotNeg
.afc3	48		pha				pha
.afc4	a9 2d		lda #$2d			lda 	#'-'
.afc6	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.afc9	c8		iny				iny
.afca	68		pla				pla
.afcb					_CI32NotNeg:
.afcb	20 d9 af	jsr $afd9			jsr 	_CI32DivideConvert 			; recursive conversion
.afce	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.afd0	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.afd3	7a		ply				ply
.afd4	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.afd6	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.afd8	60		rts				rts
.afd9					_CI32DivideConvert:
.afd9	e8		inx				inx 								; write to next slot up
.afda	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.afdd	ca		dex				dex
.afde	20 db ae	jsr $aedb			jsr 	Int32Divide 				; divide
.afe1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.afe4	48		pha				pha
.afe5	20 8a ae	jsr $ae8a			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.afe8	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; is it zero ?
.afeb	f0 06		beq $aff3			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.afed	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.aff0	20 d9 af	jsr $afd9			jsr 	_CI32DivideConvert 			; and recusrively call.
.aff3					_CI32NoRecurse:
.aff3	68		pla				pla 								; remainder
.aff4	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.aff6	90 02		bcc $affa			bcc 	_CI32NotHex
.aff8	69 26		adc #$26			adc 	#6+32
.affa					_CI32NotHex:
.affa	69 30		adc #$30			adc 	#48
.affc	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.afff	c8		iny				iny
.b000	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9da0					PrecedenceLevel:
>9da0	04					.byte	 4	; $00 <<
>9da1	02					.byte	 2	; $01 <=
>9da2	02					.byte	 2	; $02 <>
>9da3	00					.byte	 0	; $03 !!3
>9da4	00					.byte	 0	; $04 ><
>9da5	02					.byte	 2	; $05 >=
>9da6	04					.byte	 4	; $06 >>
>9da7	00					.byte	 0	; $07 !!7
>9da8	00					.byte	 0	; $08 !!8
>9da9	00					.byte	 0	; $09 !!9
>9daa	00					.byte	 0	; $0a !!10
>9dab	00					.byte	 0	; $0b !!11
>9dac	00					.byte	 0	; $0c !!12
>9dad	00					.byte	 0	; $0d !!13
>9dae	00					.byte	 0	; $0e !!14
>9daf	00					.byte	 0	; $0f !!15
>9db0	00					.byte	 0	; $10 @
>9db1	00					.byte	 0	; $11 !!17
>9db2	00					.byte	 0	; $12 !!18
>9db3	00					.byte	 0	; $13 [
>9db4	04					.byte	 4	; $14 \
>9db5	00					.byte	 0	; $15 ]
>9db6	01					.byte	 1	; $16 ^
>9db7	00					.byte	 0	; $17 _
>9db8	00					.byte	 0	; $18 `
>9db9	00					.byte	 0	; $19 !!25
>9dba	00					.byte	 0	; $1a !!26
>9dbb	00					.byte	 0	; $1b {
>9dbc	01					.byte	 1	; $1c |
>9dbd	00					.byte	 0	; $1d }
>9dbe	00					.byte	 0	; $1e ~
>9dbf	00					.byte	 0	; $1f [7m<7F>[m
>9dc0	00					.byte	 0	; $20
>9dc1	05					.byte	 5	; $21 !
>9dc2	00					.byte	 0	; $22 "
>9dc3	00					.byte	 0	; $23 #
>9dc4	05					.byte	 5	; $24 $
>9dc5	04					.byte	 4	; $25 %
>9dc6	01					.byte	 1	; $26 &
>9dc7	00					.byte	 0	; $27 '
>9dc8	00					.byte	 0	; $28 (
>9dc9	00					.byte	 0	; $29 )
>9dca	04					.byte	 4	; $2a *
>9dcb	03					.byte	 3	; $2b +
>9dcc	00					.byte	 0	; $2c ,
>9dcd	03					.byte	 3	; $2d -
>9dce	00					.byte	 0	; $2e .
>9dcf	04					.byte	 4	; $2f /
>9dd0	00					.byte	 0	; $30 0
>9dd1	00					.byte	 0	; $31 1
>9dd2	00					.byte	 0	; $32 2
>9dd3	00					.byte	 0	; $33 3
>9dd4	00					.byte	 0	; $34 4
>9dd5	00					.byte	 0	; $35 5
>9dd6	00					.byte	 0	; $36 6
>9dd7	00					.byte	 0	; $37 7
>9dd8	00					.byte	 0	; $38 8
>9dd9	00					.byte	 0	; $39 9
>9dda	00					.byte	 0	; $3a :
>9ddb	00					.byte	 0	; $3b ;
>9ddc	02					.byte	 2	; $3c <
>9ddd	02					.byte	 2	; $3d =
>9dde	02					.byte	 2	; $3e >
>9ddf	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9de0					EvaluateExpressionAt0:
.9de0	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9de2					EvaluateExpression:
.9de2	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9de4					EvaluateExpressionAtPrecedence:
.9de4	48		pha				pha 								; save precedence level
.9de5	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm 				; evaluate term into level X.
.9de8	68		pla				pla 								; restore precedence level.
.9de9					_EXPRLoop:
.9de9	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9deb	b1 30		lda ($30),y			lda 	(codePtr),y
.9ded	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9def	b0 25		bcs $9e16			bcs 	_EXPRExit
.9df1	da		phx				phx 								; read the operator precedence
.9df2	aa		tax				tax
.9df3	bd a0 9d	lda $9da0,x			lda 	PrecedenceLevel,x
.9df6	fa		plx				plx
.9df7	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9df9	f0 1b		beq $9e16			beq 	_EXPRExit
.9dfb	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9dfd	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9dff	c5 37		cmp $37				cmp 	zTemp0+1
.9e01	b0 13		bcs $9e16			bcs		_EXPRExit 					; if current >= operator exit
.9e03	48		pha				pha 								; save current precedence.
.9e04	b1 30		lda ($30),y			lda 	(codePtr),y
.9e06	c8		iny				iny
.9e07	48		pha				pha
.9e08	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9e0a	e8		inx				inx 								; work out the right hand side.
.9e0b	20 e4 9d	jsr $9de4			jsr 	EvaluateExpressionAtPrecedence
.9e0e	ca		dex				dex
.9e0f	68		pla				pla 								; get operator, call the code.
.9e10	20 19 9e	jsr $9e19			jsr 	_EXPRCaller
.9e13	68		pla				pla 								; restore precedence level
.9e14	80 d3		bra $9de9			bra 	_EXPRLoop 					; and go round.
.9e16					_EXPRExit:
.9e16	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9e18	60		rts				rts
.9e19					_EXPRCaller:
.9e19	da		phx				phx 								; save on stack, first thing is to restore it
.9e1a	0a		asl a				asl 	a 							; double so can use vectors into X
.9e1b	aa		tax				tax
.9e1c	7c 56 95	jmp ($9556,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b001					FloatingPointAdd:
.b001	20 aa b1	jsr $b1aa			jsr 	FloatPrepare 				; prepare for floats
.b004	80 0b		bra $b011			bra 	FloatAdd
.b006					FloatingPointSub:
.b006	20 aa b1	jsr $b1aa			jsr 	FloatPrepare 				; prepare for floats
.b009					FloatSubtract:
.b009	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b00c	49 80		eor #$80			eor 	#$80
.b00e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b011					FloatAdd:
.b011	48		pha				pha
.b012	5a		phy				phy
.b013	20 bb b1	jsr $b1bb			jsr 	NSNormalise 				; normalise S[X]
.b016	f0 5c		beq $b074			beq 	_FAReturn1
.b018	e8		inx				inx 								; normalise S[X+1]
.b019	20 bb b1	jsr $b1bb			jsr 	NSNormalise
.b01c	ca		dex				dex
.b01d	c9 00		cmp #$00			cmp 	#0
.b01f	f0 77		beq $b098			beq 	_FAExit 					; if so, just return A
.b021	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b024	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b027	f0 1b		beq $b044			beq 	_FAExponentsEqual
.b029	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b02c	a8		tay				tay
.b02d	38		sec				sec 								; do a signed comparison of the exponents.
.b02e	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b031	50 02		bvc $b035			bvc 	_FANoSignedChange
.b033	49 80		eor #$80			eor 	#$80
.b035					_FANoSignedChange:
.b035	29 80		and #$80			and 	#$80
.b037	10 03		bpl $b03c			bpl 	_FAHaveMax
.b039	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b03c					_FAHaveMax:
.b03c	20 9b b0	jsr $b09b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b03f	e8		inx				inx
.b040	20 9b b0	jsr $b09b			jsr 	_FAShiftToExponent
.b043	ca		dex				dex
.b044					_FAExponentsEqual:
.b044	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b047	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b04a	30 10		bmi $b05c			bmi 	_FADifferentSigns
.b04c	20 c6 9b	jsr $9bc6			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b04f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b052	10 44		bpl $b098			bpl 	_FAExit 					; if no, we are done.
.b054	20 2f a6	jsr $a62f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b057	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b05a	80 3c		bra $b098			bra 	_FAExit
.b05c					_FADifferentSigns:
.b05c	20 ec 9b	jsr $9bec			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b05f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b062	10 06		bpl $b06a			bpl 	_FACheckZero 				; if no, check for -0
.b064	20 b8 a5	jsr $a5b8			jsr 	NSMNegate 					; netate result
.b067	20 c1 a5	jsr $a5c1			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b06a					_FACheckZero:
.b06a	20 3c a6	jsr $a63c			jsr 	NSMIsZero	 				; check for -0
.b06d	d0 29		bne $b098			bne 	_FAExit
.b06f	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b072	80 24		bra $b098			bra 	_FAExit
.b074					_FAReturn1:
.b074	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b077	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b07a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b07d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b080	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b083	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b086	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b089	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b08c	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b08f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b092	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b095	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b098					_FAExit:
.b098	7a		ply				ply
.b099	68		pla				pla
.b09a	60		rts				rts
.b09b					_FAShiftToExponent:
.b09b					_FAShiftToExponent2:
.b09b	98		tya				tya 								; compare Y to exponent
.b09c	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b09f	f0 08		beq $b0a9			beq 	_FASEExit 					; exit if so.
.b0a1	20 2f a6	jsr $a62f			jsr 	NSMShiftRight	 			; shift the mantissa right
.b0a4	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b0a7	80 f2		bra $b09b			bra 	_FAShiftToExponent2
.b0a9					_FASEExit:
.b0a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b0aa					CompareFloat:
.b0aa	20 09 b0	jsr $b009			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b0ad	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b0b0	29 f8		and #$f8			and 	#$F8
.b0b2	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b0b5	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b0b8	f0 09		beq $b0c3			beq 	_FCExit 					; zero, so approximately identical
.b0ba	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b0bc	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b0bf	10 02		bpl $b0c3			bpl 	_FCExit
.b0c1					_FCNegative:
.b0c1	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b0c3					_FCExit:
.b0c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b0c4					FDivideCommand:
.b0c4	fa		plx				plx	 								; restore stack position
.b0c5	20 aa b1	jsr $b1aa			jsr 	FloatPrepare 				; prepare for floats
.b0c8					FloatDivide:
.b0c8	48		pha				pha
.b0c9	e8		inx				inx
.b0ca	20 bb b1	jsr $b1bb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b0cd	ca		dex				dex
.b0ce	c9 00		cmp #$00			cmp 	#0
.b0d0	f0 20		beq $b0f2			beq 	_FDZero
.b0d2	20 bb b1	jsr $b1bb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b0d5	f0 19		beq $b0f0			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b0d7	20 fd ae	jsr $aefd			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b0da	20 8a ae	jsr $ae8a			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b0dd	20 bb b1	jsr $b1bb			jsr		NSNormalise 				; renormalise
.b0e0	20 98 af	jsr $af98			jsr 	CalculateSign 				; calculate result sign
.b0e3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b0e6	38		sec				sec
.b0e7	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b0ea	38		sec				sec
.b0eb	e9 1e		sbc #$1e			sbc 	#30
.b0ed	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0f0					_FDExit:
.b0f0	68		pla				pla
.b0f1	60		rts				rts
.b0f2					_FDZero:
.b0f2	a9 03		lda #$03		lda	#3
.b0f4	4c d1 99	jmp $99d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b0f7					FloatFractionalPart:
.b0f7	5a		phy				phy
.b0f8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b0fb	29 7f		and #$7f			and 	#$7F
.b0fd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b100	20 bb b1	jsr $b1bb			jsr 	NSNormalise
.b103	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b106	38		sec				sec
.b107	e9 e0		sbc #$e0			sbc 	#$E0
.b109	90 31		bcc $b13c			bcc 	_FFPExit 					; already fractional
.b10b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b10d	b0 2a		bcs $b139			bcs 	_FFPZero
.b10f	a8		tay				tay 								; put count to do in Y
.b110	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b113	20 3e b1	jsr $b13e			jsr 	_FFPPartial
.b116	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b119	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b11c	20 3e b1	jsr $b13e			jsr 	_FFPPartial
.b11f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b122	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b125	20 3e b1	jsr $b13e			jsr 	_FFPPartial
.b128	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b12b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b12e	20 3e b1	jsr $b13e			jsr 	_FFPPartial
.b131	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b134	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; zeroed check.
.b137	d0 03		bne $b13c			bne 	_FFPExit
.b139					_FFPZero:
.b139	20 0c a6	jsr $a60c			jsr 	NSMSetZero
.b13c					_FFPExit:
.b13c	7a		ply				ply
.b13d	60		rts				rts
.b13e					_FFPPartial:
.b13e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b140	f0 17		beq $b159			beq 	_FFFPPExit
.b142	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b144	b0 0c		bcs $b152			bcs 	_FFFPPWholeByte
.b146	5a		phy				phy
.b147					_FFFPPLeft:
.b147	0a		asl a				asl 	a
.b148	88		dey				dey
.b149	d0 fc		bne $b147			bne 	_FFFPPLeft
.b14b	7a		ply				ply
.b14c					_FFFPPRight:
.b14c	4a		lsr a				lsr 	a
.b14d	88		dey				dey
.b14e	d0 fc		bne $b14c			bne 	_FFFPPRight
.b150	80 07		bra $b159			bra 	_FFFPPExit
.b152					_FFFPPWholeByte:
.b152	98		tya				tya 								; subtract 8 from count
.b153	38		sec				sec
.b154	e9 08		sbc #$08			sbc 	#8
.b156	a8		tay				tay
.b157	a9 00		lda #$00			lda 	#0 							; and clear all
.b159					_FFFPPExit:
.b159	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b15a					FloatIntegerPart:
.b15a	48		pha				pha
.b15b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b15e	f0 1f		beq $b17f			beq 	_FIPExit 					; if so do nothing
.b160	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; is it zero ?
.b163	f0 17		beq $b17c			beq 	_FIPZero 					; if so return zero.
.b165	20 bb b1	jsr $b1bb			jsr 	NSNormalise 				; normalise
.b168	f0 12		beq $b17c			beq 	_FIPZero 					; normalised to zero, exit zero
.b16a					_FIPShift:
.b16a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b16d	10 08		bpl $b177			bpl 	_FIPCheckZero
.b16f	20 2f a6	jsr $a62f			jsr 	NSMShiftRight 				; shift mantissa right
.b172	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b175	80 f3		bra $b16a			bra 	_FIPShift
.b177					_FIPCheckZero:
.b177	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; avoid -0 problem
.b17a	d0 03		bne $b17f			bne 	_FIPExit 					; set to zero if mantissa zero.
.b17c					_FIPZero:
.b17c	20 0c a6	jsr $a60c			jsr 	NSMSetZero
.b17f					_FIPExit:
.b17f	68		pla				pla
.b180	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b181					FloatingPointMultiply:
.b181	20 aa b1	jsr $b1aa			jsr 	FloatPrepare 				; prepare for floats
.b184					FloatMultiply:
.b184	48		pha				pha
.b185	20 bb b1	jsr $b1bb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b188	f0 1b		beq $b1a5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b18a	e8		inx				inx
.b18b	20 bb b1	jsr $b1bb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b18e	ca		dex				dex
.b18f	c9 00		cmp #$00			cmp 	#0
.b191	f0 0f		beq $b1a2			beq 	_FDSetZero
.b193	20 53 af	jsr $af53			jsr 	MultiplyShort 				; calculate the result.
.b196	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b199	18		clc				clc
.b19a	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b19d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1a0	80 03		bra $b1a5			bra 	_FDExit
.b1a2					_FDSetZero:
.b1a2	20 0c a6	jsr $a60c			jsr 	NSMSetZero 					; return 0
.b1a5					_FDExit:
.b1a5	20 bb b1	jsr $b1bb			jsr 	NSNormalise 				; normalise the result
.b1a8	68		pla				pla
.b1a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b1aa					FloatPrepare:
.b1aa	20 f2 9e	jsr $9ef2			jsr 	DereferenceTopTwo 			; dereference the top two values
.b1ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b1b0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b1b3	29 10		and #$10			and 	#NSBIsString
.b1b5	d0 01		bne $b1b8			bne 	_FDType
.b1b7	60		rts				rts
.b1b8					_FDType:
.b1b8	4c 42 b4	jmp $b442			jmp 	TypeError
.b1bb					NSNormalise:
.b1bb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b1be	29 80		and #$80			and 	#$80
.b1c0	09 08		ora #$08			ora 	#NSTFloat
.b1c2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1c5	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; if zero exit
.b1c8	d0 09		bne $b1d3			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b1ca	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b1cd	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b1d0	a9 00		lda #$00			lda 	#0 							; set Z flag
.b1d2	60		rts				rts
.b1d3					_NSNormaliseOptimise:
.b1d3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b1d6	d0 22		bne $b1fa			bne 	_NSNormaliseLoop
.b1d8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b1db	30 1d		bmi $b1fa			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b1dd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b1e0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b1e3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b1e6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b1e9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b1ec	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b1ef	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b1f2	38		sec				sec
.b1f3	e9 08		sbc #$08			sbc 	#8
.b1f5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1f8	80 d9		bra $b1d3			bra 	_NSNormaliseOptimise
.b1fa					_NSNormaliseLoop:
.b1fa	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b1fd	70 08		bvs $b207			bvs 	_NSNExit 					; exit if so with Z flag clear
.b1ff	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; shift mantissa left
.b202	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b205	80 f3		bra $b1fa			bra 	_NSNormaliseLoop
.b207					_NSNExit:
.b207	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b209	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9e1f					AssignNumber:
.9e1f	5a		phy				phy
.9e20	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9e23	85 36		sta $36				sta 	zTemp0
.9e25	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e28	85 37		sta $37				sta 	zTemp0+1
.9e2a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9e2d	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9e2f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e32	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9e34	c9 08		cmp #$08			cmp 	#NSTFloat
.9e36	f0 2a		beq $9e62			beq 	_ANFloat
.9e38	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9e3b	f0 05		beq $9e42			beq		_ANNotFloat
.9e3d	e8		inx				inx
.9e3e	20 5a b1	jsr $b15a			jsr 	FloatIntegerPart 			; make it an integer
.9e41	ca		dex				dex
.9e42					_ANNotFloat:
.9e42	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9e45	29 03		and #$03			and 	#3
.9e47	d0 05		bne $9e4e			bne 	_ANByteWord
.9e49	20 6e 9e	jsr $9e6e			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9e4c	80 1e		bra $9e6c			bra 	_ANExit
.9e4e					_ANByteWord:
.9e4e	48		pha				pha 								; save count
.9e4f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9e52	92 36		sta ($36)			sta 	(zTemp0)
.9e54	68		pla				pla
.9e55	c9 01		cmp #$01			cmp	 	#1
.9e57	f0 13		beq $9e6c			beq 	_ANExit
.9e59	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9e5c	a0 01		ldy #$01			ldy 	#1
.9e5e	91 36		sta ($36),y			sta 	(zTemp0),y
.9e60	80 0a		bra $9e6c			bra 	_ANExit
.9e62					_ANFloat:
.9e62	20 6e 9e	jsr $9e6e			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9e65	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9e68	a0 04		ldy #$04			ldy 	#4
.9e6a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e6c					_ANExit:
.9e6c	7a		ply				ply
.9e6d	60		rts				rts
.9e6e					_ANCopy4PackSign:
.9e6e	a0 03		ldy #$03			ldy 	#3
.9e70	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9e73	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9e75	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9e78	91 36		sta ($36),y			sta 	(zTemp0),y
.9e7a	88		dey				dey
.9e7b	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9e7e	91 36		sta ($36),y			sta 	(zTemp0),y
.9e80	88		dey				dey
.9e81	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e84	91 36		sta ($36),y			sta 	(zTemp0),y
.9e86	88		dey				dey
.9e87	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e8a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e8c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9e8d					AssignString:
.9e8d	5a		phy				phy
.9e8e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e91	85 38		sta $38				sta 	zTemp1
.9e93	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e96	85 39		sta $39				sta 	zTemp1+1
.9e98	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e9b	85 36		sta $36				sta 	zTemp0
.9e9d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ea0	85 37		sta $37				sta 	zTemp0+1
.9ea2	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9ea4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ea6	f0 23		beq $9ecb			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9ea8	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9ea9	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9eab	e9 02		sbc #$02			sbc 	#2
.9ead	85 3c		sta $3c				sta 	zsTemp
.9eaf	a0 01		ldy #$01			ldy 	#1
.9eb1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9eb3	e9 00		sbc #$00			sbc 	#0
.9eb5	85 3d		sta $3d				sta 	zsTemp+1
.9eb7	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9eb9					_ASGetLength:
.9eb9	c8		iny				iny
.9eba	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ebc	d0 fb		bne $9eb9			bne 	_ASGetLength
.9ebe	98		tya				tya 								; is this length <= current length
.9ebf	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9ec1	90 20		bcc $9ee3			bcc 	_ASCopyString
.9ec3	f0 1e		beq $9ee3			beq 	_ASCopyString
.9ec5	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9ec7	a0 01		ldy #$01			ldy 	#1
.9ec9	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ecb					_ASNewStringRequired:
.9ecb	e8		inx				inx 								; concrete the new string.
.9ecc	20 39 b7	jsr $b739			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9ecf	ca		dex				dex
.9ed0	18		clc				clc
.9ed1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9ed4	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9ed6	92 36		sta ($36)			sta 	(zTemp0)
.9ed8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9edb	69 00		adc #$00			adc 	#0
.9edd	a0 01		ldy #$01			ldy 	#1
.9edf	91 36		sta ($36),y			sta 	(zTemp0),y
.9ee1	80 0d		bra $9ef0			bra 	_ASExit
.9ee3					_ASCopyString:
.9ee3	a0 00		ldy #$00			ldy 	#0
.9ee5					_ASCopyLoop:
.9ee5	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ee7	c8		iny				iny
.9ee8	c8		iny				iny
.9ee9	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9eeb	88		dey				dey
.9eec	c9 00		cmp #$00			cmp 	#0
.9eee	d0 f5		bne $9ee5			bne 	_ASCopyLoop
.9ef0					_ASExit:
.9ef0	7a		ply				ply
.9ef1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9ef2					DereferenceTopTwo:
.9ef2	e8		inx				inx
.9ef3	20 f7 9e	jsr $9ef7			jsr 	Dereference 				; deref x+1
.9ef6	ca		dex				dex  								; falls through to deref x
.9ef7					Dereference:
.9ef7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9efa	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9efc	f0 57		beq $9f55			beq 	_DRFExit 					; not a reference
.9efe	5a		phy				phy
.9eff	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9f02	85 36		sta $36				sta 	zTemp0
.9f04	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f07	85 37		sta $37				sta 	zTemp0+1
.9f09	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9f0c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9f0e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f11	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9f14	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9f16	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9f18	f0 0f		beq $9f29			beq 	_DRFDereferenceTwo
.9f1a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9f1c	f0 39		beq $9f57			beq 	_DRFFull
.9f1e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9f21	29 03		and #$03			and 	#3
.9f23	f0 32		beq $9f57			beq 	_DRFFull 					; the whole word
.9f25	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9f27	f0 07		beq $9f30			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9f29					_DRFDereferenceTwo:
.9f29	a0 01		ldy #$01			ldy 	#1
.9f2b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f2d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f30					_DRFClear23:
.9f30	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9f33	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9f36	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9f39	29 18		and #$18			and 	#NSBTypeMask
.9f3b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f3e	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9f40	d0 12		bne $9f54			bne 	_DRFNotString
.9f42	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9f45	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9f48	d0 0a		bne $9f54			bne 	_DRFNotString
.9f4a	a9 56		lda #$56			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9f4c	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9f4f	a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9f51	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9f54					_DRFNotString
.9f54	7a		ply				ply 								; restore Y and exit
.9f55					_DRFExit:
.9f55	60		rts				rts
.9f56					_DRFNullString:
>9f56	00						.byte 	0
.9f57					_DRFFull:
.9f57	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9f59	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f5b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f5e	c8		iny				iny
.9f5f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f61	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f64	c8		iny				iny
.9f65	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f67	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f6a	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9f6d	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9f70	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9f72	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9f75	f0 06		beq $9f7d			beq 	_DRFNoExponent
.9f77	c8		iny				iny 								; if not, read the exponent as well.
.9f78	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f7a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f7d					_DRFNoExponent:
.9f7d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9f80	10 0d		bpl $9f8f			bpl 	_DRFExit2 					; if not, then exit.
.9f82	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9f84	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f87	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9f8a	09 80		ora #$80			ora 	#NSBIsNegative
.9f8c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f8f					_DRFExit2:
.9f8f	7a		ply				ply
.9f90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9f91					EncodeNumberStart:
.9f91	38		sec				sec
.9f92	80 01		bra $9f95			bra 	EncodeNumberContinue+1
.9f94					EncodeNumberContinue:
.9f94	18		clc				clc
.9f95					EncodeNumber:
.9f95	08		php				php 								; save reset.
.9f96	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9f98	f0 12		beq $9fac			beq 	_ENIsOkay
.9f9a	c9 30		cmp #$30			cmp 	#"0"
.9f9c	90 04		bcc $9fa2			bcc 	_ENBadNumber
.9f9e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9fa0	90 0a		bcc $9fac			bcc 	_ENIsOkay
.9fa2					_ENBadNumber:
.9fa2	28		plp				plp 								; throw saved reset
.9fa3	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9fa6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9fa8	f0 7e		beq $a028			beq 	_ENConstructFinal
.9faa					_ENFail:
.9faa	18		clc				clc 								; not allowed
.9fab	60		rts				rts
.9fac					_ENIsOkay:
.9fac	28		plp				plp 								; are we restarting
.9fad	90 15		bcc $9fc4			bcc 	_ENNoRestart
.9faf					_ENStartEncode:
.9faf	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9fb1	f0 0c		beq $9fbf			beq 	_ENFirstDP
.9fb3	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9fb5	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.9fb8	a9 01		lda #$01			lda 	#ESTA_Low
.9fba					_ENExitChange:
.9fba	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9fbd	38		sec				sec
.9fbe	60		rts				rts
.9fbf					_ENFirstDP:
.9fbf	20 0c a6	jsr $a60c			jsr 	NSMSetZero 					; clear integer part
.9fc2	80 3f		bra $a003			bra 	_ESTASwitchFloat			; go straight to float and exi
.9fc4					_ENNoRestart:
.9fc4	48		pha				pha 								; save on stack.
.9fc5	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9fc8	c9 01		cmp #$01			cmp 	#ESTA_Low
.9fca	f0 09		beq $9fd5			beq  	_ESTALowState
.9fcc	c9 02		cmp #$02			cmp 	#ESTA_High
.9fce	f0 29		beq $9ff9			beq 	_ESTAHighState
.9fd0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9fd2	f0 3b		beq $a00f			beq 	_ESTADecimalState
>9fd4	db						.byte 	$DB 						; causes a break in the emulator
.9fd5					_ESTALowState:
.9fd5	68		pla				pla 								; get value back
.9fd6	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9fd8	f0 29		beq $a003			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9fda	29 0f		and #$0f			and 	#15 						; make digit
.9fdc	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9fdf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9fe2	0a		asl a				asl 	a
.9fe3	0a		asl a				asl 	a
.9fe4	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fe7	0a		asl a				asl 	a
.9fe8	6d 86 04	adc $0486			adc 	DigitTemp
.9feb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fee	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9ff0	90 05		bcc $9ff7			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9ff2	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9ff4	8d 85 04	sta $0485			sta 	EncodeState
.9ff7					_ESTANoSwitch:
.9ff7	38		sec				sec
.9ff8	60		rts				rts
.9ff9					_ESTAHighState:
.9ff9	68		pla				pla 								; get value back
.9ffa	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9ffc	f0 05		beq $a003			beq 	_ESTASwitchFloat
.9ffe	20 62 a0	jsr $a062			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a001	38		sec				sec
.a002	60		rts				rts
.a003					_ESTASwitchFloat:
.a003	9c 87 04	stz $0487			stz 	DecimalCount
.a006	e8		inx				inx 								; zero the decimal additive.
.a007	20 0c a6	jsr $a60c			jsr 	NSMSetZero
.a00a	ca		dex				dex
.a00b	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a00d	80 ab		bra $9fba			bra 	_ENExitChange
.a00f					_ESTADecimalState:
.a00f	68		pla				pla 								; digit.
.a010	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a012	f0 96		beq $9faa			beq 	_ENFail
.a014	e8		inx				inx 								; put digit into fractional part of X+1
.a015	20 62 a0	jsr $a062			jsr 	ESTAShiftDigitIntoMantissa
.a018	ca		dex				dex
.a019	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a01c	ad 87 04	lda $0487			lda 	DecimalCount
.a01f	c9 0b		cmp #$0b			cmp 	#11
.a021	f0 02		beq $a025			beq 	_ESTADSFail
.a023	38		sec				sec
.a024	60		rts				rts
.a025					_ESTADSFail:
.a025	4c 3d b4	jmp $b43d			jmp 	RangeError
.a028					_ENConstructFinal:
.a028	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a02b	f0 33		beq $a060			beq 	_ENCFExit 					; no decimals
.a02d	5a		phy				phy
.a02e	0a		asl a				asl 	a 							; x 4 and CLC
.a02f	0a		asl a				asl 	a
.a030	6d 87 04	adc $0487			adc 	DecimalCount
.a033	a8		tay				tay
.a034	b9 fc b3	lda $b3fc,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a037	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a03a	b9 fd b3	lda $b3fd,y			lda 	DecimalScalarTable-5+1,y
.a03d	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a040	b9 fe b3	lda $b3fe,y			lda 	DecimalScalarTable-5+2,y
.a043	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a046	b9 ff b3	lda $b3ff,y			lda 	DecimalScalarTable-5+3,y
.a049	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a04c	b9 00 b4	lda $b400,y			lda 	DecimalScalarTable-5+4,y
.a04f	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a052	a9 08		lda #$08			lda 	#NSTFloat
.a054	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a057	7a		ply				ply
.a058	e8		inx				inx 								; multiply decimal const by decimal scalar
.a059	20 84 b1	jsr $b184			jsr 	FloatMultiply
.a05c	ca		dex				dex
.a05d	20 11 b0	jsr $b011			jsr 	FloatAdd 					; add to integer part.
.a060					_ENCFExit:
.a060	18		clc				clc 								; reject the digit.
.a061	60		rts				rts
.a062					ESTAShiftDigitIntoMantissa:
.a062	29 0f		and #$0f			and 	#15 						; save digit
.a064	48		pha				pha
.a065	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a068	48		pha				pha
.a069	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a06c	48		pha				pha
.a06d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a070	48		pha				pha
.a071	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a074	48		pha				pha
.a075	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; x 2
.a078	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; x 4
.a07b	18		clc				clc 								; pop mantissa and add
.a07c	68		pla				pla
.a07d	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a080	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a083	68		pla				pla
.a084	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a087	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a08a	68		pla				pla
.a08b	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a08e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a091	68		pla				pla
.a092	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a095	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a098	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; x 10
.a09b	68		pla				pla 								; add digit
.a09c	18		clc				clc
.a09d	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0a0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0a3	90 0d		bcc $a0b2			bcc 	_ESTASDExit
.a0a5	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a0a8	d0 08		bne $a0b2			bne 	_ESTASDExit
.a0aa	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a0ad	d0 03		bne $a0b2			bne 	_ESTASDExit
.a0af	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a0b2					_ESTASDExit:
.a0b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a0b3					EvaluateTerm:
.a0b3	b1 30		lda ($30),y			lda 	(codePtr),y
.a0b5	30 18		bmi $a0cf			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a0b7	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a0b9	b0 6f		bcs $a12a			bcs 	_ETVariable
.a0bb	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a0bd	90 6e		bcc $a12d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a0bf	c9 3a		cmp #$3a			cmp 	#'9'+1
.a0c1	b0 6a		bcs $a12d			bcs 	_ETPuncUnary
.a0c3	20 91 9f	jsr $9f91			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a0c6					_ETNumber:
.a0c6	c8		iny				iny 								; keep encoding until we have the numbers
.a0c7	b1 30		lda ($30),y			lda 	(codePtr),y
.a0c9	20 94 9f	jsr $9f94			jsr 	EncodeNumberContinue
.a0cc	b0 f8		bcs $a0c6			bcs 	_ETNumber 					; go back if accepted.
.a0ce	60		rts				rts
.a0cf					_ETCheckUnary:
.a0cf	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a0d1	f0 41		beq $a114			beq 	_ETString
.a0d3	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a0d5	f0 12		beq $a0e9			beq 	_ETHexConstant
.a0d7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a0d9	90 0b		bcc $a0e6			bcc 	_ETSyntaxError
.a0db	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a0dd	b0 07		bcs $a0e6			bcs 	_ETSyntaxError
.a0df	da		phx				phx 								; push X on the stack
.a0e0	0a		asl a				asl 	a 							; put vector x 2 into X
.a0e1	aa		tax				tax
.a0e2	c8		iny				iny 								; consume unary function token
.a0e3	7c d6 95	jmp ($95d6,x)			jmp 	(VectorSet0,x) 				; and do it.
.a0e6					_ETSyntaxError:
.a0e6	4c 38 b4	jmp $b438			jmp 	SyntaxError
.a0e9					_ETHexConstant:
.a0e9	c8		iny				iny 								; skip #
.a0ea	c8		iny				iny 								; skip count
.a0eb	20 0c a6	jsr $a60c			jsr 	NSMSetZero 					; clear result
.a0ee					_ETHLoop:
.a0ee	b1 30		lda ($30),y			lda 	(codePtr),y
.a0f0	c8		iny				iny 								; and consume
.a0f1	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a0f3	f0 1e		beq $a113			beq 	_ETHExit
.a0f5	48		pha				pha 								; save on stack.
.a0f6	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; x 2
.a0f9	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; x 4
.a0fc	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; x 8
.a0ff	20 21 a6	jsr $a621			jsr 	NSMShiftLeft 				; x 16
.a102	68		pla				pla 								; ASCII
.a103	c9 41		cmp #$41			cmp 	#'A'
.a105	90 02		bcc $a109			bcc 	_ETHNotChar
.a107	e9 07		sbc #$07			sbc 	#7
.a109					_ETHNotChar:
.a109	29 0f		and #$0f			and 	#15 						; digit now
.a10b	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a10e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a111	80 db		bra $a0ee			bra 	_ETHLoop 					; go round.
.a113					_ETHExit:
.a113	60		rts				rts
.a114					_ETString:
.a114	c8		iny				iny 								; look at length
.a115	b1 30		lda ($30),y			lda 	(codePtr),y
.a117	48		pha				pha
.a118	c8		iny				iny 								; first character
.a119	20 56 a6	jsr $a656			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a11c	68		pla				pla 								; restore count and save
.a11d	85 36		sta $36				sta 	zTemp0
.a11f	98		tya				tya 								; add length to Y to skip it.
.a120	18		clc				clc
.a121	65 36		adc $36				adc 	zTemp0
.a123	a8		tay				tay
.a124	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a126	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a129	60		rts				rts
.a12a					_ETVariable:
.a12a	4c 84 a1	jmp $a184			jmp 	VariableHandler
.a12d					_ETPuncUnary:
.a12d	c8		iny				iny 								; consume the unary character
.a12e	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a130	f0 2d		beq $a15f			beq 	_ETUnaryNegate
.a132	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a134	f0 39		beq $a16f			beq 	_ETDereference
.a136	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a138	f0 43		beq $a17d			beq 	_ETParenthesis
.a13a	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a13c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a13e	f0 06		beq $a146			beq 	_ETIndirection
.a140	e6 36		inc $36				inc 	zTemp0
.a142	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a144	d0 a0		bne $a0e6			bne 	_ETSyntaxError
.a146					_ETIndirection:
.a146	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a148	1a		inc a				inc 	a
.a149	48		pha				pha
.a14a	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm				; evaluate the term
.a14d	20 f7 9e	jsr $9ef7			jsr 	Dereference 				; dereference it.
.a150	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a153	d0 07		bne $a15c			bne 	_ETTypeMismatch
.a155	68		pla				pla 								; indirection 1-2
.a156	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a158	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a15b	60		rts				rts
.a15c					_ETTypeMismatch:
.a15c	4c 42 b4	jmp $b442			jmp 	TypeError
.a15f					_ETUnaryNegate:
.a15f	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm				; evaluate the term
.a162	20 f7 9e	jsr $9ef7			jsr 	Dereference 				; dereference it.
.a165	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a168	29 10		and #$10			and 	#NSTString
.a16a	d0 f0		bne $a15c			bne 	_ETTypeMismatch
.a16c	4c b8 a5	jmp $a5b8			jmp 	NSMNegate  					; just toggles the sign bit.
.a16f					_ETDereference:
.a16f	20 b3 a0	jsr $a0b3			jsr 	EvaluateTerm				; evaluate the term
.a172	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a175	29 20		and #$20			and 	#NSBIsReference
.a177	f0 e3		beq $a15c			beq 	_ETTypeMismatch
.a179	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a17c	60		rts				rts
.a17d					_ETParenthesis:
.a17d	20 e2 9d	jsr $9de2			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a180	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket 			; check for )
.a183	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a184					VariableHandler:
.a184	b1 30		lda ($30),y			lda 	(codePtr),y
.a186	18		clc				clc
.a187	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a189	85 37		sta $37				sta 	zTemp0+1
.a18b	c8		iny				iny
.a18c	b1 30		lda ($30),y			lda 	(codePtr),y
.a18e	85 36		sta $36				sta 	zTemp0
.a190	c8		iny				iny
.a191	18		clc				clc									; copy variable address+3 to mantissa
.a192	69 03		adc #$03			adc 	#3
.a194	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a197	a5 37		lda $37				lda 	zTemp0+1
.a199	69 00		adc #$00			adc 	#0
.a19b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a19e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a1a1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a1a4	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a1a7	5a		phy				phy
.a1a8	a0 02		ldy #$02			ldy 	#2 							; read type
.a1aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.a1ac	7a		ply				ply
.a1ad	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a1af	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a1b1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a1b4	29 04		and #$04			and 	#NSBIsArray
.a1b6	d0 01		bne $a1b9			bne 	_VHArray
.a1b8	60		rts				rts
.a1b9					_VHArray:
.a1b9	e8		inx				inx
.a1ba	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a1bd	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a1bf	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a1c2	b1 30		lda ($30),y			lda 	(codePtr),y
.a1c4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a1c6	d0 06		bne $a1ce			bne 	_VHNoSecondIndex
.a1c8	c8		iny				iny 								; skip the comma
.a1c9	e8		inx				inx
.a1ca	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a1cd	ca		dex				dex
.a1ce					_VHNoSecondIndex:
.a1ce	ca		dex				dex 								; set X back.
.a1cf	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket 			; and check the right bracket.
.a1d2	5a		phy				phy 								; save position
.a1d3	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a1d5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1d7	f0 6b		beq $a244			beq 	_VHBadIndex
.a1d9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a1dc	85 3e		sta $3e				sta 	zaTemp
.a1de	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a1e1	85 3f		sta $3f				sta 	zaTemp+1
.a1e3	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a1e5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1e7	f0 02		beq $a1eb			beq 	_VHHas2Mask
.a1e9	a9 ff		lda #$ff			lda 	#$FF
.a1eb					_VHHas2Mask:
.a1eb	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a1ee	f0 54		beq $a244			beq 	_VHBadIndex
.a1f0	0a		asl a				asl 	a 							; carry will be set if a second index
.a1f1	90 09		bcc $a1fc			bcc 	_VHCheckFirstIndex
.a1f3	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a1f5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1f7	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a1fa	90 48		bcc $a244			bcc 	_VHBadIndex
.a1fc					_VHCheckFirstIndex:
.a1fc	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a1fe	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a200	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a203	90 3f		bcc $a244			bcc 	_VHBadIndex
.a205	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a207	64 37		stz $37				stz 	zTemp0+1
.a209	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a20c	30 0f		bmi $a21d			bmi 	_VHNoMultiply
.a20e	da		phx				phx
.a20f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a212	48		pha				pha
.a213	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a215	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a217	1a		inc a				inc 	a 							; add 1 for zero base
.a218	fa		plx				plx
.a219	20 d4 b2	jsr $b2d4			jsr 	Multiply8x8 				; calculate -> Z0
.a21c	fa		plx				plx
.a21d					_VHNoMultiply:
.a21d	18		clc				clc
.a21e	a5 36		lda $36				lda 	zTemp0
.a220	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a223	85 36		sta $36				sta 	zTemp0
.a225	a5 37		lda $37				lda 	zTemp0+1
.a227	69 00		adc #$00			adc 	#0
.a229	85 37		sta $37				sta 	zTemp0+1
.a22b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a22e	20 0c 8d	jsr $8d0c			jsr 	ScaleByBaseType
.a231	18		clc				clc
.a232	b2 3e		lda ($3e)			lda 	(zaTemp)
.a234	65 36		adc $36				adc 	zTemp0
.a236	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a239	a0 01		ldy #$01			ldy 	#1
.a23b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a23d	65 37		adc $37				adc 	zTemp0+1
.a23f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a242	7a		ply				ply 								; restore position
.a243	60		rts				rts
.a244					_VHBadIndex:
.a244	a9 17		lda #$17		lda	#23
.a246	4c d1 99	jmp $99d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b20a					AbsUnary:
.b20a	fa		plx				plx 								; restore stack pos
.b20b	20 4c a5	jsr $a54c			jsr 	EvaluateNumber 				; get a float or int
.b20e	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.b211	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b214	29 7f		and #$7f			and 	#$7F
.b216	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b219	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a249					AllocUnary:
.a249	fa		plx				plx 								; restore stack pos
.a24a	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger		; get bytes required.
.a24d	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.a250	da		phx				phx 								; save X/Y
.a251	5a		phy				phy
.a252	8a		txa				txa 								; copy X into Y
.a253	a8		tay				tay
.a254	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a257	aa		tax				tax
.a258	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a25b	20 68 a2	jsr $a268			jsr 	AllocateXABytes 			; allocate memory
.a25e	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a261	8a		txa				txa
.a262	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a265	7a		ply				ply
.a266	fa		plx				plx
.a267	60		rts				rts
.a268					AllocateXABytes:
.a268	5a		phy				phy
.a269	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a26c	84 36		sty $36				sty 	zTemp0
.a26e	5a		phy				phy
.a26f	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a272	84 37		sty $37				sty 	zTemp0+1
.a274	5a		phy				phy
.a275	18		clc				clc 								; add to low memory pointer
.a276	6d 8c 04	adc $048c			adc 	lowMemPtr
.a279	8d 8c 04	sta $048c			sta 	lowMemPtr
.a27c	8a		txa				txa
.a27d	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a280	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a283	b0 2f		bcs $a2b4			bcs 	CISSMemory
.a285	20 a6 a2	jsr $a2a6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a288					_ClearMemory:
.a288	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a28b	c5 36		cmp $36				cmp 	zTemp0
.a28d	d0 07		bne $a296			bne 	_CMClearNext
.a28f	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a292	c5 37		cmp $37				cmp 	zTemp0+1
.a294	f0 0c		beq $a2a2			beq 	_CMExit
.a296					_CMClearNext:
.a296	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a298	92 36		sta ($36)			sta 	(zTemp0)
.a29a	e6 36		inc $36				inc 	zTemp0
.a29c	d0 ea		bne $a288			bne 	_ClearMemory
.a29e	e6 37		inc $37				inc		zTemp0+1
.a2a0	80 e6		bra $a288			bra 	_ClearMemory
.a2a2					_CMExit:
.a2a2	fa		plx				plx
.a2a3	68		pla				pla
.a2a4	7a		ply				ply
.a2a5	60		rts				rts
.a2a6					CheckIdentifierStringSpace:
.a2a6	48		pha				pha
.a2a7	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a2aa	18		clc				clc
.a2ab	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a2ad	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a2b0	b0 02		bcs $a2b4			bcs 	CISSMemory
.a2b2	68		pla				pla
.a2b3	60		rts				rts
.a2b4					CISSMemory:
.a2b4	a9 06		lda #$06		lda	#6
.a2b6	4c d1 99	jmp $99d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b21a					AscUnary:
.b21a	fa		plx				plx 								; restore stack pos
.b21b	20 57 a5	jsr $a557			jsr 	EvaluateString 				; get a string
.b21e	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b220	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.b223	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.b226	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b227					FracUnary:
.b227	fa		plx				plx 								; restore stack pos
.b228	20 4c a5	jsr $a54c			jsr 	EvaluateNumber 				; get a float or int
.b22b	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.b22e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b231	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b233	f0 04		beq $b239			beq 	_IUZero
.b235	20 f7 b0	jsr $b0f7			jsr 	FloatFractionalPart
.b238	60		rts				rts
.b239					_IUZero:
.b239	20 0c a6	jsr $a60c			jsr 	NSMSetZero
.b23c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b23d					IntUnary:
.b23d	fa		plx				plx 								; restore stack pos
.b23e	20 4c a5	jsr $a54c			jsr 	EvaluateNumber 				; get a float or int
.b241	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.b244	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b247	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b249	f0 03		beq $b24e			beq 	_IUExit
.b24b	20 5a b1	jsr $b15a			jsr 	FloatIntegerPart
.b24e					_IUExit:
.b24e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b24f					LenUnary:
.b24f	fa		plx				plx 								; restore stack pos
.b250	20 57 a5	jsr $a557			jsr 	EvaluateString 				; get a string
.b253	5a		phy				phy
.b254	a0 00		ldy #$00			ldy 	#0 							; find length
.b256					_LenFind:
.b256	b1 36		lda ($36),y			lda 	(zTemp0),y
.b258	f0 06		beq $b260			beq 	_LenExit
.b25a	c8		iny				iny
.b25b	d0 f9		bne $b256			bne 	_LenFind
.b25d	4c 3d b4	jmp $b43d			jmp 	RangeError 					; string > 255
.b260					_LenExit:
.b260	98		tya				tya
.b261	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.b264	7a		ply				ply
.b265	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.b268	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a2b9					Unary_Min:
.a2b9	a9 01		lda #$01			lda 	#1
.a2bb	80 02		bra $a2bf			bra 	UnaryMinMaxMain
.a2bd					Unary_Max:
.a2bd	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a2bf					UnaryMinMaxMain:
.a2bf	fa		plx				plx 								; get index on number stack
.a2c0	48		pha				pha 								; save comparator
.a2c1	20 43 a5	jsr $a543			jsr 	EvaluateValue 				; get the first value.
.a2c4					_UMMMLoop:
.a2c4	b1 30		lda ($30),y			lda 	(codePtr),y
.a2c6	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a2c8	f0 22		beq $a2ec			beq 	_UMMMDone
.a2ca	20 52 ae	jsr $ae52			jsr 	CheckComma 					; must be a comma
.a2cd	e8		inx				inx
.a2ce	20 43 a5	jsr $a543			jsr 	EvaluateValue
.a2d1	ca		dex				dex
.a2d2	20 e3 a5	jsr $a5e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a2d5	e8		inx				inx
.a2d6	20 e3 a5	jsr $a5e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a2d9	e8		inx				inx
.a2da	20 89 9a	jsr $9a89			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a2dd	ca		dex				dex
.a2de	ca		dex				dex
.a2df	85 36		sta $36				sta 	zTemp0 						; save required result
.a2e1	68		pla				pla 								; get and save comparator
.a2e2	48		pha				pha
.a2e3	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a2e5	d0 dd		bne $a2c4			bne 	_UMMMLoop
.a2e7	20 ef a2	jsr $a2ef			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a2ea	80 d8		bra $a2c4			bra 	_UMMMLoop
.a2ec					_UMMMDone:
.a2ec	68		pla				pla 								; throw the comparator
.a2ed	c8		iny				iny 								; skip )
.a2ee	60		rts				rts
.a2ef					ExpCopyAboveDown:
.a2ef	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a2f2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2f5	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a2f8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a2fb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a2fe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a301	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a304	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a307	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a30a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a30d	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a310	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a313	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a314					Unary_Not:
.a314	fa		plx				plx
.a315	20 6f a5	jsr $a56f			jsr 	EvaluateInteger 			; get integer
.a318	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.a31b	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; zero mantissa ?
.a31e	f0 04		beq $a324			beq 	_NotZero
.a320	20 0c a6	jsr $a60c			jsr 	NSMSetZero
.a323	60		rts				rts
.a324					_NotZero:
.a324	4c 3e 9a	jmp $9a3e			jmp 	ReturnTrue
.a327					_UNBad:
.a327	4c 47 b4	jmp $b447			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a32a					Unary_Random:
.a32a	fa		plx				plx
.a32b	20 a9 a3	jsr $a3a9			jsr 	Random32Bit 				; get a random number
.a32e	20 8e a3	jsr $a38e			jsr 	URCopyToMantissa  			; put in mantissa
.a331	b1 30		lda ($30),y			lda 	(codePtr),y
.a333	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a335	f0 08		beq $a33f			beq 	_URNoModulus
.a337	e8		inx				inx
.a338	20 84 a5	jsr $a584			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a33b	ca		dex				dex
.a33c	20 ce ae	jsr $aece			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a33f					_URNoModulus:
.a33f	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a342	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a345	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.a348	60		rts				rts
.a349					Unary_Rnd:
.a349	fa		plx				plx
.a34a	20 4c a5	jsr $a54c			jsr 	EvaluateNumber 				; number to use.
.a34d	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket 			; closing bracket
.a350	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a353	f0 2b		beq $a380			beq 	_URCopySeed
.a355	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a358	10 23		bpl $a37d			bpl 	_URDontSeed
.a35a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a35d	49 17		eor #$17			eor 	#$17
.a35f	8d 88 04	sta $0488			sta 	RandomSeed+0
.a362	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a365	49 a5		eor #$a5			eor 	#$A5
.a367	8d 89 04	sta $0489			sta 	RandomSeed+1
.a36a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a36d	49 c2		eor #$c2			eor 	#$C2
.a36f	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a372	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a375	49 9d		eor #$9d			eor 	#$9D
.a377	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a37a	20 a9 a3	jsr $a3a9			jsr 	Random32Bit
.a37d					_URDontSeed:
.a37d	20 a9 a3	jsr $a3a9			jsr 	Random32Bit 				; generate a number.
.a380					_URCopySeed:
.a380	20 8e a3	jsr $a38e			jsr 	URCopyToMantissa 			; copy into mantissa
.a383	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a385	8d 28 04	sta $0428			sta 	NSExponent
.a388	a9 08		lda #$08			lda 	#NSTFloat
.a38a	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a38d	60		rts				rts
.a38e					URCopyToMantissa:
.a38e	ad 88 04	lda $0488			lda 	RandomSeed+0
.a391	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a394	ad 89 04	lda $0489			lda 	RandomSeed+1
.a397	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a39a	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a39d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a3a0	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a3a3	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a3a5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a3a8	60		rts				rts
.a3a9					Random32Bit:
.a3a9	5a		phy				phy
.a3aa	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a3ac	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a3af	d0 03		bne $a3b4			bne 	_Random1
.a3b1	a8		tay				tay 								; if so do it 256 times
.a3b2	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a3b4					_Random1:
.a3b4	0a		asl a				asl 	a 							; LSFR RNG
.a3b5	2e 89 04	rol $0489			rol 	RandomSeed+1
.a3b8	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a3bb	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a3be	90 02		bcc $a3c2			bcc 	_Random2
.a3c0	49 c5		eor #$c5			eor 	#$C5
.a3c2					_Random2:
.a3c2	88		dey				dey
.a3c3	d0 ef		bne $a3b4			bne 	_Random1
.a3c5	8d 88 04	sta $0488			sta 	RandomSeed+0
.a3c8	7a		ply				ply
.a3c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b269					SgnUnary:
.b269	fa		plx				plx 								; restore stack pos
.b26a	20 4c a5	jsr $a54c			jsr 	EvaluateNumber 				; get a float or int
.b26d	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.b270	20 3c a6	jsr $a63c			jsr 	NSMIsZero 					; if zero
.b273	f0 10		beq $b285			beq 	_SGZero  					; return Int Zero
.b275	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b278	48		pha				pha
.b279	a9 01		lda #$01			lda 	#1 							; set to 1
.b27b	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.b27e	68		pla				pla
.b27f	29 80		and #$80			and		#$80 						; copy the sign byte out
.b281	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b284	60		rts				rts
.b285	20 0c a6	jsr $a60c	_SGZero:jsr 	NSMSetZero
.b288	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b289					ValUnary:
.b289	fa		plx				plx 								; restore stack pos
.b28a	20 9f b2	jsr $b29f			jsr 	ValMainCode 				; do the main val() code
.b28d	b0 01		bcs $b290			bcs 	_VUError 					; couldn't convert
.b28f	60		rts				rts
.b290					_VUError:
.b290	4c 42 b4	jmp $b442			jmp 	TypeError
.b293					IsValUnary:
.b293	fa		plx				plx 								; restore stack pos
.b294	20 9f b2	jsr $b29f			jsr 	ValMainCode 				; do the main val() code
.b297	b0 03		bcs $b29c			bcs 	_VUBad
.b299	4c 3e 9a	jmp $9a3e			jmp 	ReturnTrue
.b29c					_VUBad:
.b29c	4c 4a 9a	jmp $9a4a			jmp 	ReturnFalse
.b29f					ValMainCode:
.b29f	20 57 a5	jsr $a557			jsr 	EvaluateString 				; get a string
.b2a2	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket 			; check right bracket present
.b2a5	5a		phy				phy
.b2a6	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b2a8	f0 17		beq $b2c1			beq 	_VMCFail2
.b2aa	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b2ac	48		pha				pha 								; save first character
.b2ad	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b2af	d0 01		bne $b2b2			bne 	_VMCStart
.b2b1	c8		iny				iny 								; skip over -
.b2b2					_VMCStart:
.b2b2	38		sec				sec 								; initialise first time round.
.b2b3					_VMCNext:
.b2b3	c8		iny				iny 								; pre-increment
.b2b4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b2b6	f0 0c		beq $b2c4			beq 	_VMCSuccess 				; successful.
.b2b8	20 95 9f	jsr $9f95			jsr 	EncodeNumber 				; send it to the number-builder
.b2bb	90 03		bcc $b2c0			bcc 	_VMCFail 					; if failed, give up.
.b2bd	18		clc				clc 								; next time round, countinue
.b2be	80 f3		bra $b2b3			bra 	_VMCNext
.b2c0					_VMCFail:
.b2c0	68		pla				pla
.b2c1					_VMCFail2:
.b2c1	7a		ply				ply
.b2c2	38		sec				sec
.b2c3	60		rts				rts
.b2c4					_VMCSuccess:
.b2c4	a9 00		lda #$00			lda 	#0 							; construct final
.b2c6	20 95 9f	jsr $9f95			jsr 	EncodeNumber
.b2c9	68		pla				pla
.b2ca	c9 2d		cmp #$2d			cmp 	#"-"
.b2cc	d0 03		bne $b2d1			bne 	_VMCNotNegative
.b2ce	20 b8 a5	jsr $a5b8			jsr		NSMNegate
.b2d1					_VMCNotNegative:
.b2d1	7a		ply				ply
.b2d2	18		clc				clc
.b2d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a3ca					ChrUnary:
.a3ca	fa		plx				plx 								; restore stack pos
.a3cb	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger			; get value
.a3ce	48		pha				pha
.a3cf	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.a3d2	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a3d4	20 ba b7	jsr $b7ba			jsr 	StringTempAllocate
.a3d7	68		pla				pla 								; write number to it
.a3d8	20 f8 b7	jsr $b7f8			jsr 	StringTempWrite
.a3db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a3dc					SpcUnary:
.a3dc	fa		plx				plx 								; restore stack pos
.a3dd	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger			; get value
.a3e0	5a		phy				phy
.a3e1	48		pha				pha 								; save count
.a3e2	20 ba b7	jsr $b7ba			jsr 	StringTempAllocate
.a3e5	7a		ply				ply 								; to do count in Y
.a3e6					_SpcLoop:
.a3e6	c0 00		cpy #$00			cpy 	#0
.a3e8	f0 08		beq $a3f2			beq 	_SpcExit
.a3ea	a9 20		lda #$20			lda 	#32
.a3ec	20 f8 b7	jsr $b7f8			jsr 	StringTempWrite
.a3ef	88		dey				dey
.a3f0	80 f4		bra $a3e6			bra 	_SPCLoop
.a3f2					_SpcExit:
.a3f2	7a		ply				ply
.a3f3	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket
.a3f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a3f7					Unary_Str:
.a3f7	fa		plx				plx
.a3f8	20 4c a5	jsr $a54c			jsr 	EvaluateNumber  			; get number
.a3fb	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket 			; closing bracket
.a3fe	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a400	20 19 a4	jsr $a419			jsr 	ConvertNumberToString 		; do the conversion.
.a403	a9 21		lda #$21			lda		#33 						; create buffer
.a405	20 ba b7	jsr $b7ba			jsr 	StringTempAllocate 			; allocate memory
.a408	da		phx				phx
.a409	a2 00		ldx #$00			ldx 	#0
.a40b					_USCopy:
.a40b	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a40e	20 f8 b7	jsr $b7f8			jsr 	StringTempWrite
.a411	e8		inx				inx
.a412	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a415	d0 f4		bne $a40b			bne 	_USCopy
.a417	fa		plx				plx
.a418	60		rts				rts
.a419					ConvertNumberToString:
.a419	5a		phy				phy 								; save code position
.a41a	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a41d	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a420	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a423	10 0a		bpl $a42f			bpl 	_CNTSNotNegative
.a425	29 7f		and #$7f			and 	#$7F 						; make +ve
.a427	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a42a	a9 2d		lda #$2d			lda 	#"-"
.a42c	20 95 a4	jsr $a495			jsr 	WriteDecimalBuffer
.a42f					_CNTSNotNegative:
.a42f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a432	f0 15		beq $a449			beq 	_CNTSNotFloat
.a434	e8		inx				inx 								; round up
.a435	a9 01		lda #$01			lda 	#1
.a437	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.a43a	ca		dex				dex
.a43b	bd 28 04	lda $0428,x			lda		NSExponent,x
.a43e	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a441	a9 08		lda #$08			lda 	#NSTFloat
.a443	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a446	20 11 b0	jsr $b011			jsr 	FloatAdd
.a449					_CNTSNotFloat:
.a449	20 77 a4	jsr $a477			jsr 	MakePlusTwoString
.a44c	20 f7 b0	jsr $b0f7			jsr 	FloatFractionalPart 		; get the fractional part
.a44f	20 bb b1	jsr $b1bb			jsr 	NSNormalise					; normalise , exit if zero
.a452	f0 21		beq $a475			beq 	_CNTSExit
.a454	a9 2e		lda #$2e			lda 	#"."
.a456	20 95 a4	jsr $a495			jsr 	WriteDecimalBuffer 			; write decimal place
.a459					_CNTSDecimal:
.a459	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a45c	30 17		bmi $a475			bmi 	_CNTSExit
.a45e	e8		inx				inx 								; x 10.0
.a45f	a9 0a		lda #$0a			lda 	#10
.a461	20 0e a6	jsr $a60e			jsr 	NSMSetByte
.a464	a9 08		lda #$08			lda 	#NSTFloat
.a466	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a469	ca		dex				dex
.a46a	20 84 b1	jsr $b184			jsr 	FloatMultiply
.a46d	20 77 a4	jsr $a477			jsr 	MakePlusTwoString
.a470	20 f7 b0	jsr $b0f7			jsr 	FloatFractionalPart 		; get the fractional part
.a473	80 e4		bra $a459			bra 	_CNTSDecimal 				; keep going.
.a475					_CNTSExit:
.a475	7a		ply				ply
.a476	60		rts				rts
.a477					MakePlusTwoString:
.a477	da		phx				phx
.a478	20 e3 a5	jsr $a5e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a47b	e8		inx				inx 								; access it
.a47c	e8		inx				inx
.a47d	20 5a b1	jsr $b15a			jsr 	FloatIntegerPart 			; make it an integer
.a480	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a482	20 bb af	jsr $afbb			jsr 	ConvertInt32
.a485	a2 00		ldx #$00			ldx	 	#0
.a487					_MPTSCopy:
.a487	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a48a	20 95 a4	jsr $a495			jsr 	WriteDecimalBuffer
.a48d	e8		inx				inx
.a48e	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a491	d0 f4		bne $a487			bne 	_MPTSCopy
.a493	fa		plx				plx
.a494	60		rts				rts
.a495					WriteDecimalBuffer:
.a495	da		phx				phx
.a496	ae 95 04	ldx $0495			ldx 	dbOffset
.a499	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a49c	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a49f	ee 95 04	inc $0495			inc 	dbOffset
.a4a2	fa		plx				plx
.a4a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a4a4					Unary_Left:
.a4a4	fa		plx				plx
.a4a5	18		clc				clc 								; only one parameter
.a4a6	20 1b a5	jsr $a51b			jsr 	SubstringInitial 			; set up.
.a4a9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a4ac	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4af	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a4b2	80 2c		bra $a4e0			bra 	SubstringMain
.a4b4					Unary_Right:
.a4b4	fa		plx				plx
.a4b5	18		clc				clc 								; only one parameter
.a4b6	20 1b a5	jsr $a51b			jsr 	SubstringInitial 			; set up.
.a4b9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a4bc	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4bf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a4c2	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a4c5	b0 02		bcs $a4c9			bcs 	_URNotUnderflow
.a4c7	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a4c9					_URNotUnderFlow:
.a4c9	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a4cc	80 12		bra $a4e0			bra 	SubStringMain
.a4ce					Unary_Mid:
.a4ce	fa		plx				plx
.a4cf	38		sec				sec 								; two parameters
.a4d0	20 1b a5	jsr $a51b			jsr 	SubstringInitial 			; set up.
.a4d3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a4d6	f0 05		beq $a4dd			beq 	_UMError
.a4d8	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a4db	80 03		bra $a4e0			bra 	SubStringMain
.a4dd					_UMError:
.a4dd	4c 47 b4	jmp $b447			jmp 	ArgumentError
.a4e0					SubStringMain:
.a4e0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a4e3	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a4e6	b0 2d		bcs $a515			bcs 	_SSMNull 					; if so, return an empty string.
.a4e8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a4eb	f0 28		beq $a515			beq 	_SSMNull 					; return empty string.
.a4ed	18		clc				clc 								; add the offset +1 to the address and
.a4ee	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a4f1	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a4f4	85 36		sta $36				sta 	zTemp0
.a4f6	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a4f9	69 00		adc #$00			adc 	#0
.a4fb	85 37		sta $37				sta 	zTemp0+1
.a4fd					_SSMNoCarry:
.a4fd	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a500	20 ba b7	jsr $b7ba			jsr 	StringTempAllocate 			; allocate that many characters
.a503	5a		phy				phy 								; save Y
.a504	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a506					_SSMCopy:
.a506	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a508	f0 09		beq $a513			beq 	_SSMEString 				; no more to copy
.a50a	20 f8 b7	jsr $b7f8			jsr 	StringTempWrite 			; and write it out.
.a50d	c8		iny				iny
.a50e	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a511	d0 f3		bne $a506			bne 	_SSMCopy
.a513					_SSMEString:
.a513	7a		ply				ply
.a514					_SSMExit:
.a514	60		rts				rts
.a515					_SSMNull:
.a515	a9 00		lda #$00			lda 	#0
.a517	20 ba b7	jsr $b7ba			jsr 	StringTempAllocate
.a51a	60		rts				rts
.a51b					SubstringInitial:
.a51b	da		phx				phx 								; save initial stack position
.a51c	08		php				php 								; save carry on stack indicating 2 parameters
.a51d	20 57 a5	jsr $a557			jsr 	EvaluateString 				; get a string
.a520	5a		phy				phy 								; calculate length to exponent.
.a521	a0 ff		ldy #$ff			ldy 	#$FF
.a523					_SIFindLength:
.a523	c8		iny				iny
.a524	b1 36		lda ($36),y			lda 	(zTemp0),y
.a526	d0 fb		bne $a523			bne 	_SIFindLength
.a528	98		tya				tya
.a529	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a52c	7a		ply				ply
.a52d	e8		inx				inx
.a52e	20 52 ae	jsr $ae52			jsr 	CheckComma 					; comma next
.a531	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get next parameter
.a534	28		plp				plp 								; is it the last parameter ?
.a535	90 07		bcc $a53e			bcc 	_SSIExit 					; if so, exit.
.a537	e8		inx				inx
.a538	20 52 ae	jsr $ae52			jsr 	CheckComma 					; comma next
.a53b	20 a4 a5	jsr $a5a4			jsr 	Evaluate8BitInteger 		; get last parameter
.a53e					_SSIExit:
.a53e	fa		plx				plx
.a53f	20 4a ae	jsr $ae4a			jsr 	CheckRightBracket 			; check closing bracket
.a542	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a543					EvaluateValue:
.a543	48		pha				pha
.a544	20 e2 9d	jsr $9de2			jsr		EvaluateExpression 			; expression
.a547	20 f7 9e	jsr $9ef7			jsr 	Dereference					; derefernce it
.a54a	68		pla				pla
.a54b	60		rts				rts
.a54c					EvaluateNumber:
.a54c	20 43 a5	jsr $a543			jsr 	EvaluateValue 				; get a value
.a54f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a552	29 10		and #$10			and 	#NSBIsString
.a554	d0 16		bne $a56c			bne 	HelperTypeError
.a556	60		rts				rts
.a557					EvaluateString:
.a557	20 43 a5	jsr $a543			jsr 	EvaluateValue 				; get a value
.a55a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a55d	29 10		and #$10			and 	#NSBIsString
.a55f	f0 0b		beq $a56c			beq 	HelperTypeError
.a561					CopyAddressToTemp0:
.a561	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a564	85 36		sta $36				sta 	zTemp0
.a566	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a569	85 37		sta $37				sta 	zTemp0+1
.a56b	60		rts				rts
.a56c					HelperTypeError:
.a56c	4c 42 b4	jmp $b442			jmp 	TypeError
.a56f					EvaluateInteger:
.a56f	20 4c a5	jsr $a54c			jsr 	EvaluateNumber
.a572	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a575	d0 0a		bne $a581			bne 	HelperValueError 			; if not, it's a float.
.a577	60		rts				rts
.a578					EvaluateUnsignedInteger:
.a578	20 6f a5	jsr $a56f			jsr 	EvaluateInteger 			; check integer is +ve
.a57b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a57e	30 01		bmi $a581			bmi 	HelperValueError
.a580	60		rts				rts
.a581					HelperValueError:
.a581	4c 47 b4	jmp $b447			jmp 	ArgumentError
.a584					Evaluate16BitInteger:
.a584	20 78 a5	jsr $a578			jsr	 	EvaluateUnsignedInteger		; get integer
.a587	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a58a	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a58d	d0 f2		bne $a581			bne 	HelperValueError
.a58f	60		rts				rts
.a590					Evaluate16BitIntegerSigned:
.a590	20 6f a5	jsr $a56f			jsr	 	EvaluateInteger				; get integer
.a593	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a596	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a599	d0 e6		bne $a581			bne 	HelperValueError
.a59b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a59e	10 03		bpl $a5a3			bpl 	_EISNotSigned
.a5a0	20 c1 a5	jsr $a5c1			jsr 	NSMNegateMantissa
.a5a3					_EISNotSigned:
.a5a3	60		rts				rts
.a5a4					Evaluate8BitInteger:
.a5a4	20 78 a5	jsr $a578			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a5a7	d0 d8		bne $a581			bne 	HelperValueError
.a5a9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a5ac	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a5af	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a5b2	d0 cd		bne $a581			bne 	HelperValueError
.a5b4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a5b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b2d4					Multiply8x8:
.b2d4	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b2d5	85 36		sta $36			  	sta 	zTemp0
.b2d7	86 37		stx $37				stx 	zTemp0+1
.b2d9	a9 00		lda #$00			lda 	#0
.b2db	a2 08		ldx #$08			ldx 	#8
.b2dd					_M88Loop:
.b2dd	90 03		bcc $b2e2			bcc 	_M88NoAdd
.b2df	18		clc				clc
.b2e0	65 37		adc $37				adc 	zTemp0+1
.b2e2					_M88NoAdd:
.b2e2	6a		ror a				ror 	a
.b2e3	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b2e5	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b2e6	d0 f5		bne $b2dd			bne 	_M88Loop
.b2e8	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b2ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a5b8					NSMNegate:
.a5b8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a5bb	49 80		eor #$80			eor 	#NSBIsNegative
.a5bd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a5c0	60		rts				rts
.a5c1					NSMNegateMantissa:
.a5c1	38		sec				sec
.a5c2	a9 00		lda #$00			lda 	#0
.a5c4	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a5c7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5ca	a9 00		lda #$00			lda 	#0
.a5cc	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a5cf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5d2	a9 00		lda #$00			lda 	#0
.a5d4	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a5d7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5da	a9 00		lda #$00			lda 	#0
.a5dc	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a5df	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a5e2	60		rts				rts
.a5e3					NSMShiftUpTwo:
.a5e3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a5e6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a5ec	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a5ef	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a5f2	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a5f5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a5f8	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a5fb	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a5fe	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a601	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a604	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a607	60		rts				rts
.a608					NSMSetZeroMantissaOnly:
.a608	a9 00		lda #$00			lda 	#0
.a60a	80 08		bra $a614			bra 	NSMSetMantissa
.a60c					NSMSetZero:
.a60c	a9 00		lda #$00			lda 	#0
.a60e					NSMSetByte:
.a60e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a611	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a614					NSMSetMantissa:
.a614	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a617	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a61a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a61d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a620	60		rts				rts
.a621					NSMShiftLeft:
.a621	18		clc				clc
.a622					NSMRotateLeft:
.a622	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a625	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a628	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a62b	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a62e	60		rts				rts
.a62f					NSMShiftRight:
.a62f	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a632	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a635	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a638	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a63b	60		rts				rts
.a63c					NSMIsZero:
.a63c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a63f	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a642	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a645	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a648	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b2eb					Assemble_ora:
.b2eb	20 05 89	jsr $8905		jsr	AssembleGroup1
>b2ee	01					.byte $01
.b2ef					Assemble_and:
.b2ef	20 05 89	jsr $8905		jsr	AssembleGroup1
>b2f2	21					.byte $21
.b2f3					Assemble_eor:
.b2f3	20 05 89	jsr $8905		jsr	AssembleGroup1
>b2f6	41					.byte $41
.b2f7					Assemble_adc:
.b2f7	20 05 89	jsr $8905		jsr	AssembleGroup1
>b2fa	61					.byte $61
.b2fb					Assemble_sta:
.b2fb	20 05 89	jsr $8905		jsr	AssembleGroup1
>b2fe	81					.byte $81
.b2ff					Assemble_lda:
.b2ff	20 05 89	jsr $8905		jsr	AssembleGroup1
>b302	a1					.byte $a1
.b303					Assemble_cmp:
.b303	20 05 89	jsr $8905		jsr	AssembleGroup1
>b306	c1					.byte $c1
.b307					Assemble_sbc:
.b307	20 05 89	jsr $8905		jsr	AssembleGroup1
>b30a	e1					.byte $e1
.b30b					Assemble_asl:
.b30b	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b30e	02					.byte $02
>b30f	75					.byte $75
.b310					Assemble_rol:
.b310	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b313	22					.byte $22
>b314	75					.byte $75
.b315					Assemble_lsr:
.b315	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b318	42					.byte $42
>b319	75					.byte $75
.b31a					Assemble_ror:
.b31a	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b31d	62					.byte $62
>b31e	75					.byte $75
.b31f					Assemble_stx:
.b31f	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b322	82					.byte $82
>b323	50					.byte $50
.b324					Assemble_ldx:
.b324	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b327	a2					.byte $a2
>b328	d0					.byte $d0
.b329					Assemble_dec:
.b329	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b32c	c2					.byte $c2
>b32d	55					.byte $55
.b32e					Assemble_inc:
.b32e	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b331	e2					.byte $e2
>b332	55					.byte $55
.b333					Assemble_stz:
.b333	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b336	60					.byte $60
>b337	44					.byte $44
.b338					Assemble_bit:
.b338	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b33b	20					.byte $20
>b33c	55					.byte $55
.b33d					Assemble_sty:
.b33d	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b340	80					.byte $80
>b341	54					.byte $54
.b342					Assemble_ldy:
.b342	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b345	a0					.byte $a0
>b346	d5					.byte $d5
.b347					Assemble_cpy:
.b347	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b34a	c0					.byte $c0
>b34b	d4					.byte $d4
.b34c					Assemble_cpx:
.b34c	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b34f	e0					.byte $e0
>b350	d0					.byte $d0
.b351					Assemble_tsb:
.b351	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b354	00					.byte $00
>b355	50					.byte $50
.b356					Assemble_trb:
.b356	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b359	10					.byte $10
>b35a	50					.byte $50
.b35b					Assemble_jsr:
.b35b	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b35e	14					.byte $14
>b35f	10					.byte $10
.b360					Assemble_jmp:
.b360	20 0c 89	jsr $890c		jsr	AssembleGroup2
>b363	40					.byte $40
>b364	10					.byte $10
.b365					Assemble_bpl:
.b365	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b368	10					.byte $10
.b369					Assemble_bmi:
.b369	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b36c	30					.byte $30
.b36d					Assemble_bvc:
.b36d	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b370	50					.byte $50
.b371					Assemble_bvs:
.b371	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b374	70					.byte $70
.b375					Assemble_bcc:
.b375	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b378	90					.byte $90
.b379					Assemble_bcs:
.b379	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b37c	b0					.byte $b0
.b37d					Assemble_bne:
.b37d	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b380	d0					.byte $d0
.b381					Assemble_beq:
.b381	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b384	f0					.byte $f0
.b385					Assemble_bra:
.b385	20 5d 89	jsr $895d		jsr	AssembleGroup3
>b388	80					.byte $80
.b389					Assemble_brk:
.b389	20 93 89	jsr $8993		jsr	AssembleGroup4
>b38c	00					.byte $00
.b38d					Assemble_php:
.b38d	20 93 89	jsr $8993		jsr	AssembleGroup4
>b390	08					.byte $08
.b391					Assemble_clc:
.b391	20 93 89	jsr $8993		jsr	AssembleGroup4
>b394	18					.byte $18
.b395					Assemble_plp:
.b395	20 93 89	jsr $8993		jsr	AssembleGroup4
>b398	28					.byte $28
.b399					Assemble_sec:
.b399	20 93 89	jsr $8993		jsr	AssembleGroup4
>b39c	38					.byte $38
.b39d					Assemble_rti:
.b39d	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3a0	40					.byte $40
.b3a1					Assemble_pha:
.b3a1	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3a4	48					.byte $48
.b3a5					Assemble_cli:
.b3a5	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3a8	58					.byte $58
.b3a9					Assemble_phy:
.b3a9	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3ac	5a					.byte $5a
.b3ad					Assemble_rts:
.b3ad	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3b0	60					.byte $60
.b3b1					Assemble_pla:
.b3b1	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3b4	68					.byte $68
.b3b5					Assemble_sei:
.b3b5	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3b8	78					.byte $78
.b3b9					Assemble_ply:
.b3b9	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3bc	7a					.byte $7a
.b3bd					Assemble_dey:
.b3bd	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3c0	88					.byte $88
.b3c1					Assemble_txa:
.b3c1	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3c4	8a					.byte $8a
.b3c5					Assemble_tya:
.b3c5	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3c8	98					.byte $98
.b3c9					Assemble_txs:
.b3c9	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3cc	9a					.byte $9a
.b3cd					Assemble_tay:
.b3cd	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3d0	a8					.byte $a8
.b3d1					Assemble_tax:
.b3d1	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3d4	aa					.byte $aa
.b3d5					Assemble_clv:
.b3d5	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3d8	b8					.byte $b8
.b3d9					Assemble_tsx:
.b3d9	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3dc	ba					.byte $ba
.b3dd					Assemble_iny:
.b3dd	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3e0	c8					.byte $c8
.b3e1					Assemble_dex:
.b3e1	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3e4	ca					.byte $ca
.b3e5					Assemble_cld:
.b3e5	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3e8	d8					.byte $d8
.b3e9					Assemble_phx:
.b3e9	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3ec	da					.byte $da
.b3ed					Assemble_stp:
.b3ed	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3f0	db					.byte $db
.b3f1					Assemble_inx:
.b3f1	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3f4	e8					.byte $e8
.b3f5					Assemble_nop:
.b3f5	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3f8	ea					.byte $ea
.b3f9					Assemble_sed:
.b3f9	20 93 89	jsr $8993		jsr	AssembleGroup4
>b3fc	f8					.byte $f8
.b3fd					Assemble_plx:
.b3fd	20 93 89	jsr $8993		jsr	AssembleGroup4
>b400	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b401					DecimalScalarTable:
>b401	66 66 66 66				.dword $66666666 ; 0.1
>b405	de					.byte $de
>b406	1f 85 eb 51				.dword $51eb851f ; 0.01
>b40a	db					.byte $db
>b40b	4c 37 89 41				.dword $4189374c ; 0.001
>b40f	d8					.byte $d8
>b410	ac 8b db 68				.dword $68db8bac ; 0.0001
>b414	d4					.byte $d4
>b415	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b419	d1					.byte $d1
>b41a	83 de 1b 43				.dword $431bde83 ; 1e-06
>b41e	ce					.byte $ce
>b41f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b423	ca					.byte $ca
>b424	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b428	c7					.byte $c7
>b429	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b42d	c4					.byte $c4
>b42e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b432	c0					.byte $c0
>b433	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b437	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b438					SyntaxError:
.b438	a9 02		lda #$02		lda	#2
.b43a	4c d1 99	jmp $99d1		jmp	ErrorHandler
.b43d					RangeError:
.b43d	a9 04		lda #$04		lda	#4
.b43f	4c d1 99	jmp $99d1		jmp	ErrorHandler
.b442					TypeError:
.b442	a9 05		lda #$05		lda	#5
.b444	4c d1 99	jmp $99d1		jmp	ErrorHandler
.b447					ArgumentError:
.b447	a9 07		lda #$07		lda	#7
.b449	4c d1 99	jmp $99d1		jmp	ErrorHandler
.b44c					NotDoneError:
.b44c	a9 0c		lda #$0c		lda	#12
.b44e	4c d1 99	jmp $99d1		jmp	ErrorHandler
.b451					ErrorText:
>b451	42 72 65 61 6b 00			.text	"Break",0
>b457	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b45f	72 72 6f 72 00
>b464	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b46c	20 62 79 20 7a 65 72 6f 00
>b475	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b47d	61 6e 67 65 00
>b482	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b48a	6d 61 74 63 68 00
>b490	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b498	65 6d 6f 72 79 00
>b49e	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b4a6	61 72 67 75 6d 65 6e 74 00
>b4af	53 74 6f 70 00				.text	"Stop",0
>b4b4	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b4bc	6f 6f 20 6c 6f 6e 67 00
>b4c4	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b4cc	6e 20 66 61 69 6c 65 64 00
>b4d5	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b4dd	61 74 61 00
>b4e1	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b4e9	65 6e 74 65 64 00
>b4ef	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b4f7	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b503	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b50b	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b518	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b520	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b52d	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b535	68 6f 75 74 20 57 68 69 6c 65 00
>b540	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b548	68 6f 75 74 20 46 6f 72 00
>b551	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b559	61 63 6b 20 66 75 6c 6c 00
>b562	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b56a	75 63 74 75 72 65 00
>b571	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b579	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b586	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b58e	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b59c	41 72 72 61 79 20 73 69			.text	"Array size",0
>b5a4	7a 65 00
>b5a7	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b5af	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b5b7	42 75 69 6c 74 20 54 75			.text "Built Tuesday 01-Nov-2022. Build 2465."
>b5bf	65 73 64 61 79 20 30 31 2d 4e 6f 76 2d 32 30 32
>b5cf	32 2e 20 42 75 69 6c 64 20 32 34 36 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b5dd					EXTInitialise:
.b5dd	64 01		stz $01				stz 	1 							; Access I/O
.b5df	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b5e2	9c 08 d0	stz $d008			stz 	$D008
.b5e5	9c 09 d0	stz $d009			stz 	$D009
.b5e8	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b5ea	8d 58 d6	sta $d658			sta 	$D658
.b5ed	60		rts				rts
.b5ee					EXTClearScreen:
.b5ee	4c ea ff	jmp $ffea			jmp 	$FFEA
.b5f1					EXTPrintCharacter:
.b5f1	48		pha				pha
.b5f2	da		phx				phx
.b5f3	5a		phy				phy
.b5f4	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b5f7	7a		ply				ply
.b5f8	fa		plx				plx
.b5f9	68		pla				pla
.b5fa	60		rts				rts
.b5fb					EXTInputSingleCharacter:
.b5fb	da		phx				phx
.b5fc	5a		phy				phy
.b5fd					_EISCWait:
.b5fd	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b600	c9 00		cmp #$00			cmp 	#0
.b602	f0 f9		beq $b5fd			beq 	_EISCWait
.b604	7a		ply				ply
.b605	fa		plx				plx
.b606	60		rts				rts
.b607					EXTInputLine:
.b607	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b609					_ILLoop:
.b609	da		phx				phx 								; read character in
.b60a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b60d	fa		plx				plx
.b60e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b610	f0 12		beq $b624			beq 	_ILBackspace
.b612	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b614	f0 15		beq $b62b			beq 	_ILExit
.b616	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b618	90 ef		bcc $b609			bcc 	_ILLoop
.b61a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b61c	f0 eb		beq $b609			beq 	_ILLoop
.b61e	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b621	e8		inx				inx
.b622	80 e5		bra $b609			bra 	_ILLoop
.b624					_ILBackspace:
.b624	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b626	f0 e1		beq $b609			beq 	_ILLoop
.b628	ca		dex				dex 								; back one.
.b629	80 de		bra $b609			bra 	_ILLoop
.b62b					_ILExit:
.b62b	20 f1 b5	jsr $b5f1			jsr 	EXTPrintCharacter
.b62e	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b631	60		rts				rts
.b632					EXTBreakCheck:
.b632	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b635					EXTReadController:
.b635	da		phx				phx
.b636	a2 00		ldx #$00			ldx 	#0
.b638	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b63a	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b63d	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b63f	f0 04		beq $b645			beq 	_NoSet1
.b641	8a		txa				txa
.b642	09 01		ora #$01			ora 	#1
.b644	aa		tax				tax
.b645					_NoSet1:
.b645	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b647	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b64a	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b64c	f0 04		beq $b652			beq 	_NoSet1
.b64e	8a		txa				txa
.b64f	09 02		ora #$02			ora 	#2
.b651	aa		tax				tax
.b652					_NoSet1:
.b652	a9 06		lda #$06			lda 	#(($32) >> 3)
.b654	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b657	29 04		and #$04			and 	#($01 << (($32) & 7))
.b659	f0 04		beq $b65f			beq 	_NoSet1
.b65b	8a		txa				txa
.b65c	09 04		ora #$04			ora 	#4
.b65e	aa		tax				tax
.b65f					_NoSet1:
.b65f	a9 04		lda #$04			lda 	#(($25) >> 3)
.b661	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b664	29 20		and #$20			and 	#($01 << (($25) & 7))
.b666	f0 04		beq $b66c			beq 	_NoSet1
.b668	8a		txa				txa
.b669	09 08		ora #$08			ora 	#8
.b66b	aa		tax				tax
.b66c					_NoSet1:
.b66c	a9 04		lda #$04			lda 	#(($26) >> 3)
.b66e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b671	29 40		and #$40			and 	#($01 << (($26) & 7))
.b673	f0 04		beq $b679			beq 	_NoSet1
.b675	8a		txa				txa
.b676	09 10		ora #$10			ora 	#16
.b678	aa		tax				tax
.b679					_NoSet1:
.b679	8a		txa				txa
.b67a	fa		plx				plx
.b67b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b67c					MemoryDeleteLine:
.b67c	20 9b b6	jsr $b69b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b67f	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b681	a8		tay				tay
.b682					_MDDLLoop:
.b682	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b684	92 30		sta ($30)			sta 	(codePtr)
.b686	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b688	c5 3a		cmp $3a				cmp 	zTemp2
.b68a	d0 07		bne $b693			bne 	_MDLDLNext
.b68c	a5 31		lda $31				lda 	codePtr+1
.b68e	c5 3b		cmp $3b				cmp 	zTemp2+1
.b690	d0 01		bne $b693			bne 	_MDLDLNext
.b692					_MDDLExit:
.b692	60		rts				rts
.b693					_MDLDLNext:
.b693	e6 30		inc $30				inc 	codePtr						; next byte
.b695	d0 eb		bne $b682			bne 	_MDDLLoop
.b697	e6 31		inc $31				inc 	codePtr+1
.b699	80 e7		bra $b682			bra 	_MDDLLoop
.b69b					IMemoryFindEnd:
.b69b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b69d	85 3a		sta $3a				sta 	0+zTemp2
.b69f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6a1	85 3b		sta $3b				sta 	1+zTemp2
.b6a3					_MDLFELoop:
.b6a3	b2 3a		lda ($3a)			lda 	(zTemp2)
.b6a5	f0 0b		beq $b6b2			beq 	_MDLFEExit
.b6a7	18		clc				clc
.b6a8	65 3a		adc $3a				adc 	zTemp2
.b6aa	85 3a		sta $3a				sta 	zTemp2
.b6ac	90 f5		bcc $b6a3			bcc 	_MDLFELoop
.b6ae	e6 3b		inc $3b				inc 	zTemp2+1
.b6b0	80 f1		bra $b6a3			bra 	_MDLFELoop
.b6b2					_MDLFEExit:
.b6b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b6b3					MemoryInsertLine:
.b6b3	08		php				php
.b6b4	20 9b b6	jsr $b69b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b6b7	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b6b9	1a		inc a				inc 	a
.b6ba	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b6bc	b0 36		bcs $b6f4			bcs 	_MDLIError
.b6be	28		plp				plp
.b6bf	90 08		bcc $b6c9			bcc 	_MDLIFound
.b6c1	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b6c3	85 30		sta $30				sta 	codePtr
.b6c5	a5 3b		lda $3b				lda 	zTemp2+1
.b6c7	85 31		sta $31				sta 	codePtr+1
.b6c9					_MDLIFound:
.b6c9	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b6cc	a8		tay				tay
.b6cd					_MDLIInsert:
.b6cd	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b6cf	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b6d1	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b6d3	c5 3a		cmp $3a				cmp 	zTemp2
.b6d5	d0 06		bne $b6dd			bne 	_MDLINext
.b6d7	a5 31		lda $31				lda 	codePtr+1
.b6d9	c5 3b		cmp $3b				cmp 	zTemp2+1
.b6db	f0 0a		beq $b6e7			beq 	_MDLIHaveSpace
.b6dd					_MDLINext:
.b6dd	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b6df	d0 02		bne $b6e3			bne 	_MDLINoBorrow
.b6e1	c6 3b		dec $3b				dec 	zTemp2+1
.b6e3					_MDLINoBorrow:
.b6e3	c6 3a		dec $3a				dec 	zTemp2
.b6e5	80 e6		bra $b6cd			bra 	_MDLIInsert
.b6e7					_MDLIHaveSpace:
.b6e7	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b6ea	88		dey				dey 								; from offset-1 to 0
.b6eb					_MDLICopy:
.b6eb	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b6ee	91 30		sta ($30),y			sta 	(codePtr),y
.b6f0	88		dey				dey
.b6f1	10 f8		bpl $b6eb			bpl 	_MDLICopy
.b6f3	60		rts				rts
.b6f4					_MDLIError:
.b6f4	a9 06		lda #$06		lda	#6
.b6f6	4c d1 99	jmp $99d1		jmp	ErrorHandler
.b6f9					MDLAppendLine:
.b6f9	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b6fb	85 36		sta $36				sta 	zTemp0
.b6fd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6ff	85 38		sta $38				sta 	0+zTemp1
.b701	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b703	85 39		sta $39				sta 	1+zTemp1
.b705	b2 38		lda ($38)			lda 	(zTemp1)
.b707	d0 0a		bne $b713			bne 	_MDLANoInitialise
.b709	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b70b	8d ea 06	sta $06ea			sta 	0+AppendPointer
.b70e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b710	8d eb 06	sta $06eb			sta 	1+AppendPointer
.b713					_MDLANoInitialise:
.b713	18		clc				clc
.b714	ad ea 06	lda $06ea			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b717	85 38		sta $38				sta 	zTemp1
.b719	72 36		adc ($36)			adc 	(zTemp0)
.b71b	8d ea 06	sta $06ea			sta 	AppendPointer
.b71e	ad eb 06	lda $06eb			lda 	AppendPointer+1
.b721	85 39		sta $39				sta 	zTemp1+1
.b723	69 00		adc #$00			adc 	#0
.b725	8d eb 06	sta $06eb			sta 	AppendPointer+1
.b728	a0 00		ldy #$00			ldy 	#0
.b72a					_MDLACopy:
.b72a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b72c	91 38		sta ($38),y			sta 	(zTemp1),y
.b72e	c8		iny				iny
.b72f	98		tya				tya
.b730	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b732	d0 f6		bne $b72a			bne 	_MDLACopy
.b734	a9 00		lda #$00			lda 	#0 							; end of program.
.b736	91 38		sta ($38),y			sta 	(zTemp1),y
.b738	60		rts				rts
.06ea					AppendPointer:
>06ea							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a649					MemoryNew:
.a649	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a64b	85 30		sta $30				sta 	codePtr
.a64d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a64f	85 31		sta $31				sta 	codePtr+1
.a651	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a653	92 30		sta ($30)			sta 	(codePtr)
.a655	60		rts				rts
.a656					MemoryInline:
.a656	98		tya				tya 								; put address into stack,x
.a657	18		clc				clc
.a658	65 30		adc $30				adc 	codePtr
.a65a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a65d	a5 31		lda $31				lda 	codePtr+1
.a65f	69 00		adc #$00			adc 	#0
.a661	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a664	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a667	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a66a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a66b					MemorySearch:
.a66b	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a66d	86 37		stx $37				stx 	zTemp0+1
.a66f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a671	85 30		sta $30				sta 	codePtr
.a673	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a675	85 31		sta $31				sta 	codePtr+1
.a677					_MTAXLoop:
.a677	b2 30		lda ($30)			lda 	(codePtr)
.a679	18		clc				clc
.a67a	f0 21		beq $a69d			beq 	_MTAXExit 					; reached end, exit with CC.
.a67c	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a67e	b1 30		lda ($30),y			lda 	(codePtr),y
.a680	38		sec				sec
.a681	e5 36		sbc $36				sbc 	zTemp0
.a683	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a685	c8		iny				iny 								; do the MSB
.a686	b1 30		lda ($30),y			lda 	(codePtr),y
.a688	e5 37		sbc $37				sbc 	zTemp0+1
.a68a	05 38		ora $38				ora 	zTemp1
.a68c	f0 0f		beq $a69d			beq 	_MTAXExit	 				; found
.a68e	b0 0d		bcs $a69d			bcs 	_MTAXExit 					; current < required exit
.a690	18		clc				clc
.a691	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a693	65 30		adc $30				adc 	codePtr
.a695	85 30		sta $30				sta 	codePtr
.a697	90 02		bcc $a69b			bcc 	_CREExit
.a699	e6 31		inc $31				inc 	codePtr+1
.a69b					_CREExit:
.a69b	80 da		bra $a677			bra 	_MTAXLoop
.a69d					_MTAXExit:
.a69d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a69e					StackPushByte:
.a69e	48		pha				pha 								; save byte
.a69f	a5 34		lda $34				lda 	BasicStack
.a6a1	d0 09		bne $a6ac			bne 	_SPBNoBorrow
.a6a3	c6 35		dec $35				dec 	BasicStack+1
.a6a5	48		pha				pha
.a6a6	a5 35		lda $35				lda 	BasicStack+1
.a6a8	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a6aa	90 06		bcc $a6b2			bcc 	_SPBMemory
.a6ac					_SPBNoBorrow:
.a6ac	c6 34		dec $34				dec 	BasicStack
.a6ae	68		pla				pla 								; get back and write
.a6af	92 34		sta ($34)			sta 	(BasicStack)
.a6b1	60		rts				rts
.a6b2					_SPBMemory:
.a6b2	a9 12		lda #$12		lda	#18
.a6b4	4c d1 99	jmp $99d1		jmp	ErrorHandler
.a6b7					StackPopByte:
.a6b7	b2 34		lda ($34)			lda 	(BasicStack)
.a6b9	e6 34		inc $34				inc 	BasicStack
.a6bb	d0 02		bne $a6bf			bne 	_SPBNoCarry
.a6bd	e6 35		inc $35				inc 	BasicStack+1
.a6bf					_SPBNoCarry:
.a6bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a6c0					StackOpen:
.a6c0	48		pha				pha 								; save frame byte
.a6c1	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a6c3	0a		asl a				asl 	a 							; claim twice this for storage
.a6c4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a6c6	38		sec				sec 								; so basically subtracting from
.a6c7	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a6c9	85 34		sta $34				sta 	basicStack
.a6cb	b0 08		bcs $a6d5			bcs 	_SONoBorrow
.a6cd	c6 35		dec $35				dec 	basicStack+1
.a6cf	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a6d1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a6d3	90 04		bcc $a6d9			bcc 	_SOMemory
.a6d5					_SONoBorrow:
.a6d5	68		pla				pla 								; get marker back and write at TOS
.a6d6	92 34		sta ($34)			sta 	(basicStack)
.a6d8	60		rts				rts
.a6d9					_SOMemory:
.a6d9	a9 12		lda #$12		lda	#18
.a6db	4c d1 99	jmp $99d1		jmp	ErrorHandler
.a6de					StackClose:
.a6de	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a6e0	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a6e2	0a		asl a				asl 	a 							; claim twice this.
.a6e3	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a6e5	85 34		sta $34				sta 	basicStack
.a6e7	90 02		bcc $a6eb			bcc 	_SCExit
.a6e9	e6 35		inc $35				inc 	basicStack+1
.a6eb					_SCExit:
.a6eb	60		rts				rts
.a6ec					StackCheckFrame:
.a6ec	48		pha				pha
.a6ed					_StackRemoveLocals:
.a6ed	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a6ef	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a6f1	b0 05		bcs $a6f8			bcs 	_SCNoLocal
.a6f3	20 f1 ad	jsr $adf1			jsr 	LocalPopValue
.a6f6	80 f5		bra $a6ed			bra 	_StackRemoveLocals
.a6f8					_SCNoLocal:
.a6f8	68		pla				pla
.a6f9	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a6fb	29 f0		and #$f0			and 	#$F0 						; check type bits
.a6fd	d0 01		bne $a700			bne 	_SCFError 					; different, we have structures mixed up
.a6ff	60		rts				rts
.a700					_SCFError:
.a700	8a		txa				txa 								; report error X
.a701	4c d1 99	jmp $99d1			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a704					STKSaveCodePosition:
.a704	5a		phy				phy
.a705	98		tya				tya 								; save Y
.a706	a0 05		ldy #$05			ldy 	#5
.a708	91 34		sta ($34),y			sta 	(basicStack),y
.a70a	88		dey				dey 								; save Code Pointer
.a70b					_STKSaveLoop:
.a70b	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a70e	91 34		sta ($34),y			sta 	(basicStack),y
.a710	88		dey				dey
.a711	d0 f8		bne $a70b			bne 	_STKSaveLoop
.a713	7a		ply				ply
.a714	60		rts				rts
.a715					STKLoadCodePosition:
.a715	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a717					_STKLoadLoop:
.a717	b1 34		lda ($34),y			lda 	(basicStack),y
.a719	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a71c	c8		iny				iny
.a71d	c0 05		cpy #$05			cpy 	#5
.a71f	d0 f6		bne $a717			bne 	_STKLoadLoop
.a721	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a723	a8		tay				tay
.a724	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a725					StackReset:
.a725	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a727	85 34		sta $34				sta 	0+basicStack
.a729	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a72b	85 35		sta $35				sta 	1+basicStack
.a72d	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a72f	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a731	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b739					StringConcrete:
.b739	5a		phy				phy 								; save position on stack
.b73a	20 a6 a2	jsr $a2a6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b73d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b740	85 38		sta $38				sta 	zTemp1
.b742	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b745	85 39		sta $39				sta 	zTemp1+1
.b747	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b749					_SALength:
.b749	c8		iny				iny
.b74a	b1 38		lda ($38),y			lda 	(zTemp1),y
.b74c	d0 fb		bne $b749			bne 	_SALength
.b74e	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b750	b0 3f		bcs $b791			bcs 	_SALengthError
.b752	98		tya				tya 				 				; length of the new string
.b753	18		clc				clc
.b754	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b756	90 02		bcc $b75a			bcc 	_SAHaveLength
.b758	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b75a					_SAHaveLength:
.b75a	48		pha				pha 								; save length.
.b75b	38		sec				sec
.b75c	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b75e	6d 8e 04	adc $048e			adc 	StringMemory
.b761	8d 8e 04	sta $048e			sta 	StringMemory
.b764	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b766	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b769	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b76b	6d 8f 04	adc $048f			adc 	StringMemory+1
.b76e	8d 8f 04	sta $048f			sta 	StringMemory+1
.b771	85 3b		sta $3b				sta 	zTemp2+1
.b773	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b776	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b777	38		sec				sec
.b778	e9 03		sbc #$03			sbc 	#3
.b77a	92 3a		sta ($3a)			sta 	(zTemp2)
.b77c	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b77e	a0 01		ldy #$01			ldy 	#1
.b780	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b782					_SACopyNewString:
.b782	a0 00		ldy #$00			ldy 	#0
.b784					_SACopyNSLoop:
.b784	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b786	c8		iny				iny 								; write two on in string storage
.b787	c8		iny				iny
.b788	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b78a	88		dey				dey 								; this makes it one one.
.b78b	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b78d	d0 f5		bne $b784			bne 	_SACopyNSLoop
.b78f	7a		ply				ply
.b790	60		rts				rts
.b791					_SALengthError:
.b791	a9 09		lda #$09		lda	#9
.b793	4c d1 99	jmp $99d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b796					StringSystemInitialise:
.b796	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b798	8d 8e 04	sta $048e			sta 	0+StringMemory
.b79b	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b79d	8d 8f 04	sta $048f			sta 	1+StringMemory
.b7a0	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b7a3	60		rts				rts
.b7a4					StringSpaceInitialise:
.b7a4	20 a6 a2	jsr $a2a6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b7a7	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b7a9	8d 90 04	sta $0490			sta 	StringInitialised
.b7ac	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b7af	8d 91 04	sta $0491			sta 	StringTempPointer
.b7b2	ad 8f 04	lda $048f			lda 	StringMemory+1
.b7b5	3a		dec a				dec 	a
.b7b6	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b7b9	60		rts				rts
.b7ba					StringTempAllocate:
.b7ba	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b7bc	b0 35		bcs $b7f3			bcs 	_STALength
.b7be	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b7c1	30 05		bmi $b7c8			bmi 	_STAAllocate
.b7c3	48		pha				pha 								; save value to subtract.
.b7c4	20 a4 b7	jsr $b7a4			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b7c7	68		pla				pla 								; restore it
.b7c8					_STAAllocate:
.b7c8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b7ca	18		clc				clc  								; deliberate allows one more
.b7cb	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b7ce	8d 91 04	sta $0491			sta 	StringTempPointer
.b7d1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b7d4	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b7d6	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b7d9	69 ff		adc #$ff			adc 	#$FF
.b7db	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b7de	85 3d		sta $3d				sta 	zsTemp+1
.b7e0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b7e3	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b7e6	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b7e9	a9 10		lda #$10			lda 	#NSTString
.b7eb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b7ee	a9 00		lda #$00			lda 	#0 							; clear the target string
.b7f0	92 3c		sta ($3c)			sta 	(zsTemp)
.b7f2	60		rts				rts
.b7f3					_STALength:
.b7f3	a9 09		lda #$09		lda	#9
.b7f5	4c d1 99	jmp $99d1		jmp	ErrorHandler
.b7f8					StringTempWrite:
.b7f8	48		pha				pha
.b7f9	92 3c		sta ($3c)			sta 	(zsTemp)
.b7fb	e6 3c		inc $3c				inc 	zsTemp
.b7fd	d0 02		bne $b801			bne 	_STWNoCarry
.b7ff	e6 3d		inc $3d				inc 	zsTemp+1
.b801					_STWNoCarry:
.b801	a9 00		lda #$00			lda 	#0
.b803	92 3c		sta ($3c)			sta 	(zsTemp)
.b805	68		pla				pla
.b806	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a732					BackloadProgram:
.a732	a2 ff		ldx #$ff			ldx 	#$FF
.a734	20 5c a7	jsr $a75c			jsr 	BLReadByte
.a737	30 1f		bmi $a758			bmi 	_BPExit
.a739					_BPCopy:
.a739	e8		inx				inx  								; copy byte in
.a73a	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a73d	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a740	20 5c a7	jsr $a75c			jsr 	BLReadByte 					; read next byte
.a743	30 0a		bmi $a74f			bmi 	_BPEndLine 					; -ve = EOL
.a745	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a747	d0 02		bne $a74b			bne 	_BPNotTab
.a749	a9 20		lda #$20			lda 	#' '
.a74b					_BPNotTab:
.a74b	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a74d	b0 ea		bcs $a739			bcs 	_BPCopy
.a74f					_BPEndLine:
.a74f	20 42 ab	jsr $ab42			jsr 	TokeniseLine 				; tokenise the line.
.a752	38		sec				sec 								; append not insert
.a753	20 b3 b6	jsr $b6b3			jsr 	MemoryInsertLine 			; append to current program
.a756	80 da		bra $a732			bra 	BackloadProgram
.a758					_BPExit:
.a758	20 0b 8c	jsr $8c0b			jsr 	ClearCommand 				; clear variables etc.
.a75b	60		rts				rts
.a75c					BLReadByte:
.a75c					_BLLoad:
.a75c	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a75f	ee 5d a7	inc $a75d			inc 	_BLLoad+1
.a762	d0 03		bne $a767			bne 	_BLNoCarry
.a764	ee 5e a7	inc $a75e			inc 	_BLLoad+2
.a767					_BLNoCarry:
.a767	c9 00		cmp #$00			cmp 	#0
.a769	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a76a					TokeniseSearchTable:
.a76a	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a76c	85 36		sta $36				sta 	zTemp0
.a76e	a0 00		ldy #$00			ldy 	#0
.a770	a9 80		lda #$80			lda 	#$80 						; token #
.a772	85 38		sta $38				sta 	zTemp1
.a774					_TSTLoop:
.a774	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a776	30 49		bmi $a7c1			bmi 	_TSTFail 					; -ve = end of table
.a778	f0 2e		beq $a7a8			beq 	_TSTNext 					; zero, check next it's a dummy
.a77a	c8		iny				iny 								; get the hash
.a77b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a77d	88		dey				dey
.a77e	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a781	d0 25		bne $a7a8			bne 	_TSTNext
.a783	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a786	38		sec				sec
.a787	ed 80 04	sbc $0480			sbc 	identStart
.a78a	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a78c	d0 1a		bne $a7a8			bne 	_TSTNext
.a78e	5a		phy				phy 								; save Y , we might fail
.a78f	c8		iny				iny 								; point to text
.a790	c8		iny				iny
.a791	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a794					_TSTCompareName:
.a794	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a797	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a799	d0 0c		bne $a7a7			bne 	_TSTNextPullY 				; fail, pullY and do next
.a79b	e8		inx				inx
.a79c	c8		iny				iny
.a79d	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a7a0	d0 f2		bne $a794			bne 	_TSTCompareName
.a7a2	7a		ply				ply 								; throw Y
.a7a3	a5 38		lda $38				lda 	zTemp1 						; get token #
.a7a5	38		sec				sec 								; return with CS = passed.
.a7a6	60		rts				rts
.a7a7					_TSTNextPullY:
.a7a7	7a		ply				ply 								; restore current, fall through.
.a7a8					_TSTNext:
.a7a8	e6 38		inc $38				inc 	zTemp1 						; token counter
.a7aa	98		tya				tya
.a7ab	18		clc				clc
.a7ac	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a7ae	1a		inc a				inc 	a 							; +1
.a7af	1a		inc a				inc 	a 							; +2
.a7b0	a8		tay				tay
.a7b1	10 c1		bpl $a774			bpl 	_TSTLoop 					; if Y < $80 loop back
.a7b3	98		tya				tya 								; add Y to zTemp0 and reset Y
.a7b4	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a7b6	18		clc				clc  								; but have tables > 255 bytes
.a7b7	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a7b9	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a7bb	90 b7		bcc $a774			bcc 	_TSTLoop
.a7bd	e6 37		inc $37				inc 	zTemp0+1
.a7bf	80 b3		bra $a774			bra 	_TSTLoop
.a7c1					_TSTFail:
.a7c1	18		clc				clc
.a7c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a7c3					KeywordSet0:
>a7c3	00 65					.text	0,$65,""               ; $80 !0:EOF
>a7c5	00 58					.text	0,$58,""               ; $81 !1:SH1
>a7c7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a7c9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a7cf	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a7d7	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a7dd	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a7e4	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a7ec	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a7f3	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a7fa	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a800	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a806	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a80e	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a815	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a81c	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a823	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a82b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a831	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a837	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a83e	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a844	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a84a	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a852	28
>a853	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a85b	28
>a85c	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a862	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a868	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a86e	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a875	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a87d	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a883	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a889	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a88e	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a892	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a898	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a8a0	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a8a7	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a8ae	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a8b6	43
>a8b7	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a8bd	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a8c3	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a8ca	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a8d0	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a8d4	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a8da	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a8e2	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a8e9	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a8ee	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a8f5	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a8fd	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a903	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a908	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a910	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a916	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a91c	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a921	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a928	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a92e	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a934	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a93b	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a940	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>a946	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>a94d	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>a952	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>a956	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>a95e	45
>a95f	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>a967	45
>a968	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>a96e	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>a975	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>a97b	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>a981	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>a986	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>a98e	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>a995	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>a99d	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>a9a3	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>a9a7	ff					.text	$FF
.a9a8					KeywordSet1:
>a9a8	00 65					.text	0,$65,""               ; $80 !0:EOF
>a9aa	00 58					.text	0,$58,""               ; $81 !1:SH1
>a9ac	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a9ae	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a9b6	4c 45
>a9b8	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a9c0	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a9c8	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a9cd	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a9d3	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a9d8	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a9e0	45
>a9e1	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a9e6	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a9ee	53
>a9ef	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a9f5	ff					.text	$FF
.a9f6					KeywordSet2:
>a9f6	00 65					.text	0,$65,""               ; $80 !0:EOF
>a9f8	00 58					.text	0,$58,""               ; $81 !1:SH1
>a9fa	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a9fc	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>aa01	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>aa06	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>aa0b	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>aa10	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>aa15	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>aa1a	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>aa1f	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>aa24	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>aa29	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>aa2e	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>aa33	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>aa38	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>aa3d	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>aa42	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>aa47	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>aa4c	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>aa51	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>aa56	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>aa5b	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>aa60	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>aa65	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>aa6a	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>aa6f	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>aa74	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>aa79	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>aa7e	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>aa83	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>aa88	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>aa8d	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>aa92	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>aa97	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>aa9c	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>aaa1	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>aaa6	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>aaab	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>aab0	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>aab5	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>aaba	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>aabf	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>aac4	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>aac9	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>aace	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>aad3	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>aad8	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>aadd	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>aae2	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>aae7	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>aaec	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>aaf1	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>aaf6	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>aafb	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>ab00	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ab05	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ab0a	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ab0f	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ab14	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ab19	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ab1e	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ab23	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ab28	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ab2d	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ab32	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ab37	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ab3c	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ab41	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ab42					TokeniseLine:
.ab42	20 ca ac	jsr $acca			jsr 	FixLineBufferCase 			; fix line case
.ab45	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ab47	8d a7 04	sta $04a7			sta 	tokenOffset
.ab4a	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ab4d	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ab50	a2 ff		ldx #$ff			ldx 	#$FF
.ab52					_TKFindFirst:
.ab52	e8		inx				inx
.ab53	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ab56	f0 79		beq $abd1			beq 	_TKExit
.ab58	c9 20		cmp #$20			cmp 	#' '
.ab5a	90 f6		bcc $ab52			bcc 	_TKFindFirst
.ab5c	c9 30		cmp #$30			cmp 	#'0'
.ab5e	90 07		bcc $ab67			bcc 	_TKNoLineNumber
.ab60	c9 3a		cmp #$3a			cmp 	#'9'+1
.ab62	b0 03		bcs $ab67			bcs 	_TKNoLineNumber
.ab64	20 f4 ac	jsr $acf4			jsr 	TokeniseExtractLineNumber
.ab67					_TKNoLineNumber:
.ab67					_TKTokeniseLoop:
.ab67	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ab6a	f0 65		beq $abd1			beq 	_TKExit
.ab6c	e8		inx				inx
.ab6d	c9 20		cmp #$20			cmp 	#' '
.ab6f	f0 f6		beq $ab67			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ab71	ca		dex				dex 								; undo last get, A contains character, X is position.
.ab72	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ab74	f0 61		beq $abd7			beq 	_TKTokeniseIdentifier
.ab76	c9 41		cmp #$41			cmp 	#'A'
.ab78	90 04		bcc $ab7e			bcc 	_TKTokenisePunctuation
.ab7a	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ab7c	90 59		bcc $abd7			bcc 	_TKTokeniseIdentifier
.ab7e					_TKTokenisePunctuation:
.ab7e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ab80	f0 27		beq $aba9			beq 	_TKString
.ab82	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ab84	f0 28		beq $abae			beq 	_TKHexConstant
.ab86	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ab88	f0 29		beq $abb3			beq 	_TKCheckDouble
.ab8a	c9 3e		cmp #$3e			cmp 	#'>'
.ab8c	f0 25		beq $abb3			beq 	_TKCheckDouble
.ab8e					_TKStandardPunctuation:
.ab8e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ab91	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ab93	90 0e		bcc $aba3			bcc 	_TKNoShift
.ab95	48		pha				pha 								; save
.ab96	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.ab98	85 36		sta $36				sta 	zTemp0
.ab9a	68		pla				pla
.ab9b	29 20		and #$20			and 	#32 						; bit 5
.ab9d	4a		lsr a				lsr 	a 							; shift into bit 3
.ab9e	4a		lsr a				lsr 	a
.ab9f	05 36		ora $36				ora 	zTemp0
.aba1	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aba3					_TKNoShift:
.aba3	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte 			; write the punctuation character
.aba6	e8		inx				inx 								; consume the character
.aba7	80 be		bra $ab67			bra 	_TKTokeniseLoop 			; and loop round again.
.aba9					_TKString:
.aba9	20 59 ac	jsr $ac59			jsr 	TokeniseString
.abac	80 b9		bra $ab67			bra 	_TKTokeniseLoop
.abae					_TKHexConstant:
.abae	20 94 ac	jsr $ac94			jsr 	TokeniseHexConstant
.abb1	80 b4		bra $ab67			bra 	_TKTokeniseLoop
.abb3					_TKCheckDouble:
.abb3	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.abb6	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.abb8	90 d4		bcc $ab8e			bcc 	_TKStandardPunctuation
.abba	c9 3f		cmp #$3f			cmp 	#'>'+1
.abbc	b0 d0		bcs $ab8e			bcs 	_TKStandardPunctuation
.abbe	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.abc1	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.abc3	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.abc4	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.abc7	38		sec				sec
.abc8	e9 3c		sbc #$3c			sbc 	#'<'
.abca	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.abcd	e8		inx				inx 								; consume both
.abce	e8		inx				inx
.abcf	80 96		bra $ab67			bra 	_TKTokeniseLoop
.abd1	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.abd3	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.abd6	60		rts				rts
.abd7					_TKTokeniseIdentifier:
.abd7	8e 80 04	stx $0480			stx 	identStart 					; save start
.abda	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.abdd					_TKCheckLoop:
.abdd	e8		inx				inx 								; look at next, we know first is identifier.
.abde	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.abe1	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.abe3	f0 f8		beq $abdd			beq 	_TKCheckLoop
.abe5	c9 30		cmp #$30			cmp	 	#"0"
.abe7	90 0c		bcc $abf5			bcc 	_TKEndIdentifier
.abe9	c9 3a		cmp #$3a			cmp 	#"9"+1
.abeb	90 f0		bcc $abdd			bcc 	_TKCheckLoop
.abed	c9 41		cmp #$41			cmp	 	#"A"
.abef	90 04		bcc $abf5			bcc 	_TKEndIdentifier
.abf1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.abf3	90 e8		bcc $abdd			bcc 	_TKCheckLoop
.abf5					_TKEndIdentifier:
.abf5	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.abf8	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.abfa	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.abfc	f0 06		beq $ac04			beq 	_TKHasTypeCharacter
.abfe	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ac00	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ac02	d0 07		bne $ac0b			bne 	_TKNoTypeCharacter
.ac04					_TKHasTypeCharacter:
.ac04	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ac07	e8		inx				inx 								; read next
.ac08	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac0b					_TKNoTypeCharacter:
.ac0b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ac0d	d0 09		bne $ac18			bne 	_TKNoArray
.ac0f	e8		inx				inx 								; skip the (
.ac10	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ac13	09 04		ora #$04			ora 	#$04
.ac15	8d 84 04	sta $0484			sta 	identTypeByte
.ac18					_TKNoArray:
.ac18	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ac1b	20 b5 ac	jsr $acb5			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ac1e	a0 a7		ldy #$a7			ldy 	#(KeywordSet0) >> 8
.ac20	a9 c3		lda #$c3			lda 	#(KeywordSet0) & $FF
.ac22	20 6a a7	jsr $a76a			jsr 	TokeniseSearchTable
.ac25	a2 00		ldx #$00			ldx 	#0
.ac27	b0 1f		bcs $ac48			bcs 	_TKFoundToken
.ac29	a0 a9		ldy #$a9			ldy 	#(KeywordSet1) >> 8
.ac2b	a9 a8		lda #$a8			lda 	#(KeywordSet1) & $FF
.ac2d	20 6a a7	jsr $a76a			jsr 	TokeniseSearchTable
.ac30	a2 81		ldx #$81			ldx 	#$81
.ac32	b0 14		bcs $ac48			bcs 	_TKFoundToken
.ac34	a0 a9		ldy #$a9			ldy 	#(KeywordSet2) >> 8
.ac36	a9 f6		lda #$f6			lda 	#(KeywordSet2) & $FF
.ac38	20 6a a7	jsr $a76a			jsr 	TokeniseSearchTable
.ac3b	a2 82		ldx #$82			ldx 	#$82
.ac3d	b0 09		bcs $ac48			bcs 	_TKFoundToken
.ac3f	20 45 ad	jsr $ad45			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ac42	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ac45	4c 67 ab	jmp $ab67			jmp 	_TKTokeniseLoop 			; and go round again.
.ac48					_TKFoundToken:
.ac48	48		pha				pha 								; save token
.ac49	8a		txa				txa 								; shift in X, is there one ?
.ac4a	f0 03		beq $ac4f			beq 	_TKNoTShift
.ac4c	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte 			; if so, write it out
.ac4f					_TKNoTShift:
.ac4f	68		pla				pla 								; restore and write token
.ac50	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.ac53	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ac56	4c 67 ab	jmp $ab67			jmp 	_TKTokeniseLoop 			; and go round again.
.ac59					TokeniseString:
.ac59	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ac5b	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.ac5e	e8		inx				inx									; start of quoted string.
.ac5f	da		phx				phx 								; push start of string on top
.ac60	ca		dex				dex
.ac61					_TSFindEnd:
.ac61	e8		inx				inx
.ac62	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ac65	f0 04		beq $ac6b			beq 	_TSEndOfString
.ac67	c9 22		cmp #$22			cmp 	#'"'
.ac69	d0 f6		bne $ac61			bne 	_TSFindEnd
.ac6b					_TSEndOfString:
.ac6b	7a		ply				ply  								; so now Y is first character, X is character after end.
.ac6c	48		pha				pha 								; save terminating character
.ac6d	20 75 ac	jsr $ac75			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ac70	68		pla				pla 								; terminating character
.ac71	f0 01		beq $ac74			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ac73	e8		inx				inx
.ac74					_TSNotQuote:
.ac74	60		rts				rts
.ac75					TOWriteBlockXY:
.ac75	86 36		stx $36				stx 	zTemp0 						; write end character
.ac77	98		tya				tya
.ac78	49 ff		eor #$ff			eor 	#$FF
.ac7a	38		sec				sec
.ac7b	65 36		adc $36				adc 	zTemp0
.ac7d	1a		inc a				inc 	a 							; one extra for NULL
.ac7e	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.ac81					_TOBlockLoop:
.ac81	c4 36		cpy $36				cpy 	zTemp0
.ac83	f0 09		beq $ac8e			beq 	_TOBlockExit
.ac85	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ac88	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.ac8b	c8		iny				iny
.ac8c	80 f3		bra $ac81			bra 	_TOBlockLoop
.ac8e					_TOBlockExit:
.ac8e	a9 00		lda #$00			lda 	#0
.ac90	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.ac93	60		rts				rts
.ac94					TokeniseHexConstant:
.ac94	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ac96	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.ac99	e8		inx				inx									; start of quoted string.
.ac9a	da		phx				phx 								; push start of constant on top
.ac9b	ca		dex				dex
.ac9c					_THFindLoop:
.ac9c	e8		inx				inx
.ac9d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.aca0	c9 30		cmp #$30			cmp 	#"0"
.aca2	90 0c		bcc $acb0			bcc 	_THFoundEnd
.aca4	c9 3a		cmp #$3a			cmp 	#"9"+1
.aca6	90 f4		bcc $ac9c			bcc 	_THFindLoop
.aca8	c9 41		cmp #$41			cmp 	#"A"
.acaa	90 04		bcc $acb0			bcc 	_THFoundEnd
.acac	c9 47		cmp #$47			cmp 	#"F"+1
.acae	90 ec		bcc $ac9c			bcc 	_THFindLoop
.acb0					_THFoundEnd:
.acb0	7a		ply				ply 								; restore start
.acb1	20 75 ac	jsr $ac75			jsr 	TOWriteBlockXY 				; output the block
.acb4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.acb5					TokeniseCalculateHash:
.acb5	da		phx				phx
.acb6	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.acb9	a9 00		lda #$00			lda 	#0
.acbb					_TCHLoop:
.acbb	18		clc				clc
.acbc	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.acbf	e8		inx				inx
.acc0	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.acc3	d0 f6		bne $acbb			bne 	_TCHLoop
.acc5	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.acc8	fa		plx				plx
.acc9	60		rts				rts
.acca					FixLineBufferCase:
.acca	a2 00		ldx #$00			ldx 	#0
.accc					_FLBCLoop:
.accc	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.accf	f0 22		beq $acf3			beq 	_FLBCExit 					; end of string.
.acd1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.acd3	f0 11		beq $ace6			beq 	_FLBCInQuotes
.acd5	e8		inx				inx
.acd6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.acd8	90 f2		bcc $accc			bcc 	_FLBCLoop
.acda	c9 7b		cmp #$7b			cmp 	#'z'+1
.acdc	b0 ee		bcs $accc			bcs 	_FLBCLoop
.acde	38		sec				sec 								; make U/C
.acdf	e9 20		sbc #$20			sbc 	#32
.ace1	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.ace4	80 e6		bra $accc			bra 	_FLBCLoop
.ace6					_FLBCInQuotes:
.ace6	e8		inx				inx 								; advance
.ace7	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.acea	f0 07		beq $acf3			beq 	_FLBCExit 					; exit on EOS
.acec	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.acee	d0 f6		bne $ace6			bne 	_FLBCInQuotes
.acf0	e8		inx				inx 								; skip over it
.acf1	80 d9		bra $accc			bra 	_FLBCLoop
.acf3					_FLBCExit:
.acf3	60		rts				rts
.acf4					TokeniseExtractLineNumber:
.acf4	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.acf7	48		pha				pha
.acf8	ad a8 04	lda $04a8			lda 	tokenLineNumber
.acfb	48		pha				pha
.acfc	20 32 ad	jsr $ad32			jsr 	_TELNTimes2 				; line # x 4
.acff	20 32 ad	jsr $ad32			jsr 	_TELNTimes2 				; line # x 2
.ad02	18		clc				clc 								; add stacked value
.ad03	68		pla				pla
.ad04	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ad07	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ad0a	68		pla				pla
.ad0b	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ad0e	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ad11	20 32 ad	jsr $ad32			jsr 	_TELNTimes2 				; line # x 10
.ad14	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ad17	e8		inx				inx
.ad18	29 0f		and #$0f			and 	#15 						; add to line #
.ad1a	18		clc				clc
.ad1b	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ad1e	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ad21	90 03		bcc $ad26			bcc 	_TLENNoCarry
.ad23	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ad26					_TLENNoCarry:
.ad26	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ad29	c9 30		cmp #$30			cmp 	#'0'
.ad2b	90 04		bcc $ad31			bcc 	_TLENExit
.ad2d	c9 3a		cmp #$3a			cmp 	#'9'+1
.ad2f	90 c3		bcc $acf4			bcc 	TokeniseExtractLineNumber
.ad31					_TLENExit:
.ad31	60		rts				rts
.ad32					_TELNTimes2:
.ad32	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ad35	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ad38	60		rts				rts
.ad39					TokeniseWriteByte:
.ad39	da		phx				phx
.ad3a	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ad3d	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ad40	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ad43	fa		plx				plx
.ad44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ad45					CheckCreateVariableRecord:
.ad45	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ad47	85 36		sta $36				sta 	0+zTemp0
.ad49	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ad4b	85 37		sta $37				sta 	1+zTemp0
.ad4d					_CCVSearch:
.ad4d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ad4f	f0 2c		beq $ad7d			beq 	_CCVFail
.ad51	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ad53	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ad55	cd 83 04	cmp $0483			cmp 	identHash
.ad58	d0 16		bne $ad70			bne 	_CCVNext
.ad5a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ad5c	ae 80 04	ldx $0480			ldx 	identStart
.ad5f					_CCVCompare:
.ad5f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ad62	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ad64	e8		inx				inx 								; advance pointers
.ad65	c8		iny				iny
.ad66	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ad67	d0 07		bne $ad70			bne 	_CCVNext  					; didn't match go to next.
.ad69	90 f4		bcc $ad5f			bcc 	_CCVCompare 				; not finished yet.
.ad6b	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ad6e	f0 41		beq $adb1			beq 	_CCVFound 					; yes, we were successful
.ad70					_CCVNext:
.ad70	18		clc				clc
.ad71	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ad73	65 36		adc $36				adc 	zTemp0
.ad75	85 36		sta $36				sta 	zTemp0
.ad77	90 d4		bcc $ad4d			bcc 	_CCVSearch
.ad79	e6 37		inc $37				inc 	zTemp0+1
.ad7b	80 d0		bra $ad4d			bra 	_CCVSearch
.ad7d					_CCVFail:
.ad7d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ad7f	ad 83 04	lda $0483			lda 	identHash
.ad82	91 36		sta ($36),y			sta 	(zTemp0),y
.ad84	c8		iny				iny 								; offset 2 is the type byte
.ad85	ad 84 04	lda $0484			lda 	identTypeByte
.ad88	91 36		sta ($36),y			sta 	(zTemp0),y
.ad8a	c8		iny				iny
.ad8b					_CCVData:
.ad8b	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ad8d	91 36		sta ($36),y			sta 	(zTemp0),y
.ad8f	c8		iny				iny
.ad90	c0 08		cpy #$08			cpy 	#8
.ad92	90 f7		bcc $ad8b			bcc 	_CCVData
.ad94	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ad97					_CCVCopyName:
.ad97	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad9a	91 36		sta ($36),y			sta 	(zTemp0),y
.ad9c	e8		inx				inx
.ad9d	c8		iny				iny
.ad9e	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ada1	d0 f4		bne $ad97			bne 	_CCVCopyName
.ada3	98		tya				tya 								; patch offset
.ada4	92 36		sta ($36)			sta 	(zTemp0)
.ada6	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ada8	91 36		sta ($36),y			sta 	(zTemp0),y
.adaa	88		dey				dey
.adab	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.adad	09 80		ora #$80			ora 	#$80
.adaf	91 36		sta ($36),y			sta 	(zTemp0),y
.adb1					_CCVFound:
.adb1	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.adb3	38		sec				sec
.adb4	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.adb6	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.adb8	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.adbb	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.adbd	20 39 ad	jsr $ad39			jsr 	TokeniseWriteByte
.adc0	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
