
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Mon Jan 16 16:20:26 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_LEFTDOLLARLPAREN                 = $98; $98 LEFT$(
=$99						KWD_LENLPAREN                        = $99; $99 LEN(
=$9a						KWD_MAXLPAREN                        = $9a; $9a MAX(
=$9b						KWD_MIDDOLLARLPAREN                  = $9b; $9b MID$(
=$9c						KWD_MINLPAREN                        = $9c; $9c MIN(
=$9d						KWD_NOTLPAREN                        = $9d; $9d NOT(
=$9e						KWD_PEEKLPAREN                       = $9e; $9e PEEK(
=$9f						KWD_PEEKDLPAREN                      = $9f; $9f PEEKD(
=$a0						KWD_PEEKLLPAREN                      = $a0; $a0 PEEKL(
=$a1						KWD_PEEKWLPAREN                      = $a1; $a1 PEEKW(
=$a2						KWD_PLAYINGLPAREN                    = $a2; $a2 PLAYING(
=$a3						KWD_RANDOMLPAREN                     = $a3; $a3 RANDOM(
=$a4						KWD_RIGHTDOLLARLPAREN                = $a4; $a4 RIGHT$(
=$a5						KWD_RNDLPAREN                        = $a5; $a5 RND(
=$a6						KWD_SGNLPAREN                        = $a6; $a6 SGN(
=$a7						KWD_SPCLPAREN                        = $a7; $a7 SPC(
=$a8						KWD_STRDOLLARLPAREN                  = $a8; $a8 STR$(
=$a9						KWD_TIMERLPAREN                      = $a9; $a9 TIMER(
=$aa						KWD_TRUE                             = $aa; $aa TRUE
=$ab						KWD_VALLPAREN                        = $ab; $ab VAL(
=$ac						KWD_FOR                              = $ac; $ac FOR
=$ad						KWD_IF                               = $ad; $ad IF
=$ae						KWD_PROC                             = $ae; $ae PROC
=$af						KWD_REPEAT                           = $af; $af REPEAT
=$b0						KWD_WHILE                            = $b0; $b0 WHILE
=$b1						KWD_ENDIF                            = $b1; $b1 ENDIF
=$b2						KWD_ENDPROC                          = $b2; $b2 ENDPROC
=$b3						KWD_NEXT                             = $b3; $b3 NEXT
=$b4						KWD_THEN                             = $b4; $b4 THEN
=$b5						KWD_UNTIL                            = $b5; $b5 UNTIL
=$b6						KWD_WEND                             = $b6; $b6 WEND
=$b7						KWD_AT                               = $b7; $b7 AT
=$b8						KWD_BY                               = $b8; $b8 BY
=$b9						KWD_CALL                             = $b9; $b9 CALL
=$ba						KWD_CIRCLE                           = $ba; $ba CIRCLE
=$bb						KWD_CLEAR                            = $bb; $bb CLEAR
=$bc						KWD_COLOR                            = $bc; $bc COLOR
=$bd						KWD_COLOUR                           = $bd; $bd COLOUR
=$be						KWD_DATA                             = $be; $be DATA
=$bf						KWD_DIM                              = $bf; $bf DIM
=$c0						KWD_DOWNTO                           = $c0; $c0 DOWNTO
=$c1						KWD_ELSE                             = $c1; $c1 ELSE
=$c2						KWD_FROM                             = $c2; $c2 FROM
=$c3						KWD_GFX                              = $c3; $c3 GFX
=$c4						KWD_HERE                             = $c4; $c4 HERE
=$c5						KWD_IMAGE                            = $c5; $c5 IMAGE
=$c6						KWD_LET                              = $c6; $c6 LET
=$c7						KWD_LINE                             = $c7; $c7 LINE
=$c8						KWD_LOCAL                            = $c8; $c8 LOCAL
=$c9						KWD_MEMCOPY                          = $c9; $c9 MEMCOPY
=$ca						KWD_OFF                              = $ca; $ca OFF
=$cb						KWD_ON                               = $cb; $cb ON
=$cc						KWD_OUTLINE                          = $cc; $cc OUTLINE
=$cd						KWD_PALETTE                          = $cd; $cd PALETTE
=$ce						KWD_PLOT                             = $ce; $ce PLOT
=$cf						KWD_POKE                             = $cf; $cf POKE
=$d0						KWD_POKED                            = $d0; $d0 POKED
=$d1						KWD_POKEL                            = $d1; $d1 POKEL
=$d2						KWD_POKEW                            = $d2; $d2 POKEW
=$d3						KWD_READ                             = $d3; $d3 READ
=$d4						KWD_RECT                             = $d4; $d4 RECT
=$d5						KWD_REM                              = $d5; $d5 REM
=$d6						KWD_SOLID                            = $d6; $d6 SOLID
=$d7						KWD_SOUND                            = $d7; $d7 SOUND
=$d8						KWD_SPRITE                           = $d8; $d8 SPRITE
=$d9						KWD_TEXT                             = $d9; $d9 TEXT
=$da						KWD_TO                               = $da; $da TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ac						KWC_FIRST_STRUCTURE = $ac
=$b1						KWC_FIRST_STRUCTURE_DEC = $b1
=$b6						KWC_LAST_STRUCTURE = $b6
=$83						KWC_FIRST_UNARY = $83
=$ab						KWC_LAST_UNARY = $ab

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 67 80	jmp $8067	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTInputLine:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputSingleCharacter:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						GXGraphicDraw:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						SNDCommand:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 e5 bb	jsr $bbe5		jsr	Export_SNDCommand
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDUpdate:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 18 bc	jsr $bc18		jsr	Export_SNDUpdate
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						TKListConvertLine:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 96 b5	jsr $b596		jsr	Export_TKListConvertLine
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKTokeniseLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 2a b8	jsr $b82a		jsr	Export_TKTokeniseLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8067		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8069		9a		txs				txs
.806a		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.806c		09 80		ora #$80			ora 	#$80
.806e		85 00		sta $00				sta 	0
.8070		20 2c ae	jsr $ae2c			jsr		UpdateFont 					; update font if between FPGA updates.
.8073		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.8076		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.8078		20 31 81	jsr $8131			jsr 	KNLSetDrive
.807b		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.807d		aa		tax				tax
.807e		a8		tay				tay
.807f		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.8082		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8084		20 3f 80	jsr $803f			jsr 	SNDCommand
.8087		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.8089		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.808c		a9 09		lda #$09			lda 	#9
.808e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8091		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8094		64 01		stz $01				stz 	1
.8096		ad ad d6	lda $d6ad			lda 	$D6AD
.8099		20 17 83	jsr $8317			jsr 	PrintHex
.809c		ad ac d6	lda $d6ac			lda 	$D6AC
.809f		20 17 83	jsr $8317			jsr 	PrintHex
.80a2		ad ab d6	lda $d6ab			lda 	$D6AB
.80a5		20 17 83	jsr $8317			jsr 	PrintHex
.80a8		ad aa d6	lda $d6aa			lda 	$D6AA
.80ab		20 17 83	jsr $8317			jsr 	PrintHex
.80ae		a9 20		lda #$20			lda 	#32
.80b0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b3		ad a8 d6	lda $d6a8			lda 	$D6A8
.80b6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b9		ad a9 d6	lda $d6a9			lda 	$D6A9
.80bc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80bf		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80c1		a9 cf		lda #$cf			lda 	#Prompt & $FF
.80c3		20 5a 96	jsr $965a			jsr 	PrintStringXA
.80c6		20 7a 8f	jsr $8f7a			jsr 	NewProgram 					; erase current program
.80c9		4c 5a 85	jmp $855a			jmp 	WarmStart					; make same size.
.80cc		4c 5a 85	jmp $855a			jmp 	WarmStart
>80cf		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80d1		09 09 31 36 2f 30 31 2f			.text 9,9,"16/01/23 29"
>80d9		32 33 20 32 39

;******  Return to file: ./common/aa.system/00start.asm

>80de		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.80e2						ProcessEvents:
.80e2		20 70 81	jsr $8170			jsr 	KNLSetEventPointer
.80e5		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.80e8		b0 27		bcs $8111			bcs 	_PEExitZ 					; nothing left to process.
.80ea		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; go back if event not key.pressed.
.80ed		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.80ef		d0 f1		bne $80e2			bne 	ProcessEvents
.80f1		ad 65 07	lda $0765			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.80f4		d0 ec		bne $80e2			bne 	ProcessEvents
.80f6		ad 64 07	lda $0764			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.80f9		c9 03		cmp #$03			cmp 	#3
.80fb		f0 11		beq $810e			beq 	_PEReturnBreak  			; no, keep going.
.80fd		da		phx				phx
.80fe		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8101		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8103		f0 06		beq $810b			beq 	_PENoQueue
.8105		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8108		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.810b						_PENoQueue:
.810b		fa		plx				plx
.810c		80 d4		bra $80e2			bra 	ProcessEvents
.810e						_PEReturnBreak:
.810e		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8110		60		rts				rts
.8111						_PEExitZ:
.8111		a9 00		lda #$00			lda 	#0
.8113		60		rts				rts
.8114						PopKeyboardQueue:
.8114		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8117		f0 17		beq $8130			beq 	_PKQExit 					; zero, then exit.
.8119		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.811c		48		pha				pha
.811d		da		phx				phx 								; drop head of queue
.811e		a2 00		ldx #$00			ldx 	#0
.8120						_PKQLoop:
.8120		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8123		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8126		e8		inx				inx
.8127		e0 07		cpx #$07			cpx 	#7
.8129		d0 f5		bne $8120			bne 	_PKQLoop
.812b		fa		plx				plx
.812c		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.812f		68		pla				pla 								; restore head of queue.
.8130						_PKQExit:
.8130		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8131						KNLSetDrive:
.8131		8d 5e 07	sta $075e			sta 	KNLDefaultDrive
.8134		60		rts				rts
.8135						KNLOpenFileWrite:
.8135		48		pha				pha
.8136		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8138		80 03		bra $813d			bra 	KNLOpenStart
.813a						KNLOpenFileRead:
.813a		48		pha				pha
.813b		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.813d						KNLOpenStart:
.813d		85 f5		sta $f5				sta     kernel.args.file.open.mode
.813f		68		pla				pla
.8140		20 7b 81	jsr $817b			jsr 	KNLSetupFileName
.8143		20 70 81	jsr $8170			jsr 	KNLSetEventPointer
.8146		ad 5e 07	lda $075e			lda 	KNLDefaultDrive 			; currently drive zero only.
.8149		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.814b		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.814e		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.8150		b0 1d		bcs $816f			bcs     _out
.8152						_loop
.8152		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8155		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8158		b0 f8		bcs $8152			bcs     _loop
.815a		ad 5f 07	lda $075f			lda 	KNLEvent.type
.815d		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.815f		f0 0a		beq $816b			beq 	_success
.8161		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8163		f0 0a		beq $816f			beq 	_out
.8165		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8167		f0 06		beq $816f			beq 	_out
.8169		80 e7		bra $8152			bra     _loop
.816b						_success
.816b		ad 62 07	lda $0762			lda     KNLEvent.file.stream
.816e		18		clc				clc
.816f						_out
.816f		60		rts				rts
.8170						KNLSetEventPointer:
.8170		48		pha				pha
.8171		a9 5f		lda #$5f			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8173		85 f0		sta $f0				sta     kernel.args.events+0
.8175		a9 07		lda #$07			lda     #KNLEvent >> 8
.8177		85 f1		sta $f1				sta     kernel.args.events+1
.8179		68		pla				pla
.817a		60		rts				rts
.817b						KNLSetupFileName:
.817b		5a		phy				phy 								; save Y on stack
.817c		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.817e		86 37		stx $37				stx 	zTemp0+1
.8180		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8182		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8184		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8186						_KNLGetLength:
.8186		c8		iny				iny
.8187		b1 36		lda ($36),y			lda 	(zTemp0),y
.8189		d0 fb		bne $8186			bne 	_KNLGetLength
.818b		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.818d		7a		ply				ply
.818e		60		rts				rts
.818f						KNLReadBlock:
.818f		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8191		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8193		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8196		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8198		b0 2e		bcs $81c8			bcs     _KGNBExitFail               ; report as general error
.819a						_KGRBEventLoop:
.819a		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.819d		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81a0		b0 f8		bcs $819a			bcs     _KGRBEventLoop
.81a2		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; get event
.81a5		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.81a7		f0 0a		beq $81b3			beq     _KNLRBGetNextByte
.81a9		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.81ab		f0 1b		beq $81c8			beq 	_KGNBExitFail
.81ad		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81af		f0 17		beq $81c8			beq 	_KGNBExitFail
.81b1		80 e7		bra $819a			bra 	_KGRBEventLoop
.81b3						_KNLRBGetNextByte:
.81b3		a9 5e		lda #$5e			lda     #<KNLReadBuffer 			; Set the target buffer
.81b5		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.81b7		a9 06		lda #$06			lda     #>KNLReadBuffer
.81b9		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.81bb		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Set the target length
.81be		85 fd		sta $fd				sta     kernel.args.recv.buflen
.81c0		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.81c3		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.81c6		18		clc				clc
.81c7		60		rts				rts
.81c8						_KGNBExitFail:
.81c8		38		sec				sec
.81c9		60		rts				rts
.81ca						KNLWriteBlock:
.81ca		da		phx				phx
.81cb		5a		phy				phy
.81cc		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.81ce		a5 36		lda $36				lda     zTemp0 						; save the data location.
.81d0		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.81d2		a5 37		lda $37				lda     zTemp0+1
.81d4		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.81d6		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.81d8		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.81db		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.81dd		b0 21		bcs $8200			bcs 	_KWBFailed
.81df						_KNLWLoop:
.81df		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.81e2		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81e5		b0 f8		bcs $81df			bcs     _KNLWLoop
.81e7		ad 5f 07	lda $075f			lda     KNLEvent.type 				; various errors.
.81ea		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.81ec		f0 12		beq $8200			beq 	_KWBFailed
.81ee		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81f0		f0 0e		beq $8200			beq 	_KWBFailed
.81f2		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81f4		f0 0a		beq $8200			beq 	_KWBFailed
.81f6		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.81f8		d0 e5		bne $81df			bne 	_KNLWLoop
.81fa		18		clc				clc
.81fb		ad 65 07	lda $0765			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.81fe		80 01		bra $8201			bra 	_KWBExit
.8200						_KWBFailed:
.8200		38		sec				sec
.8201						_KWBExit:
.8201		7a		ply				ply
.8202		fa		plx				plx
.8203		60		rts				rts
.8204						KNLCloseFile:
.8204		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8206		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8209		60		rts				rts
.820a						KNLCheckKeyPressed:
.820a		20 70 81	jsr $8170			jsr 	KNLSetEventPointer
.820d		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.8210		b0 0b		bcs $821d			bcs 	_CKPNoEvent 				; no event
.8212		ad 5f 07	lda $075f			lda     KNLEvent.type
.8215		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.8217		d0 04		bne $821d			bne 	_CKPNoEvent
.8219		ad 64 07	lda $0764			lda     KNLEvent.key.ascii
.821c		60		rts				rts
.821d						_CKPNoEvent:
.821d		a9 00		lda #$00			lda 	#0
.821f		60		rts				rts
.8220						EXTReadController:
.8220		da		phx				phx
.8221		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8223		64 01		stz $01				stz 	1 							; switch to I/O 0
.8225		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8228		86 01		stx $01				stx 	1 							; repair old I/O and exit
.822a		fa		plx				plx
.822b		60		rts				rts
.065e						KNLReadBuffer:
>065e								.fill   256
.075e						KNLDefaultDrive:
>075e								.byte 	?
.075f						KNLEvent
>075f						type        .byte   ?   ; Enum above
>0760						buf         .byte   ?   ; page id or zero
>0761						ext         .byte   ?   ; page id or zero
.0762						key
>0762						keyboard    .byte   ?   ; Keyboard ID
>0763						raw         .byte   ?   ; Raw key ID
>0764						ascii       .byte   ?   ; ASCII value
>0765						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0762						mouse
.0762						delta
>0762						x           .byte   ?
>0763						y           .byte   ?
>0764						z           .byte   ?
>0765						buttons     .byte   ?
.0762						clicks
>0762						inner       .byte   ?
>0763						middle      .byte   ?
>0764						outer       .byte   ?
.0762						joystick
>0762						joy0        .byte   ?
>0763						joy1        .byte   ?
.0762						udp
>0762						token       .byte   ?   ; TODO: break out into fields
.0762						file
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						data
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						read        .byte   ?   ; Number of bytes actually read
.0764						wrote
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						wrote       .byte   ?   ; Number of bytes actually read
.0762						directory
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						volume
>0764						len         .byte   ?   ; Length of volname (in buf)
>0765						flags       .byte   ?   ; block size, text encoding
.0764						file
>0764						len         .byte   ?
>0765						flags       .byte   ?   ; block scale, text encoding, approx size
.0764						free
>0764						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.822c						AssembleGroup1:
.822c		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.822e		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8231		80 02		bra $8235			bra 	AsmGroup12
.8233						AssembleGroup2:
.8233		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8235						AsmGroup12:
.8235		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.8238		68		pla				pla 								; pop the return address to access the information following.
.8239		fa		plx				plx
.823a		20 c1 82	jsr $82c1			jsr 	AccessParameters 			; get opcode and save as base
.823d		8d 20 04	sta $0420			sta 	BaseOpcode
.8240		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8243		d0 08		bne $824d			bne 	_AG12HaveMask
.8245		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8247		20 c9 82	jsr $82c9			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.824a		8d 21 04	sta $0421			sta 	ModeMask
.824d						_AG12HaveMask:
.824d		20 fd 83	jsr $83fd			jsr 	TypeAndCalculateOperand 	; get zero page type
.8250		da		phx				phx 								; save found address mode
.8251		20 2d 83	jsr $832d			jsr 	AssembleModeX
.8254		fa		plx				plx  								; restore address mode
.8255		b0 0b		bcs $8262			bcs 	_AG12Exit
.8257		20 63 82	jsr $8263			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.825a		20 2d 83	jsr $832d			jsr 	AssembleModeX
.825d		b0 03		bcs $8262			bcs 	_AG12Exit
.825f		4c ec a7	jmp $a7ec			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8262						_AG12Exit:
.8262		60		rts				rts
.8263						PromoteToAbsolute:
.8263		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8265		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8267		f0 19		beq $8282			beq 	_PTADo
.8269		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.826b		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.826d		f0 13		beq $8282			beq 	_PTADo
.826f		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8271		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8273		f0 0d		beq $8282			beq 	_PTADo
.8275		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8277		e0 d1		cpx #$d1			cpx 	#AM_IND
.8279		f0 07		beq $8282			beq 	_PTADo
.827b		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.827d		e0 c0		cpx #$c0			cpx 	#AM_INDX
.827f		f0 01		beq $8282			beq 	_PTADo
.8281		60		rts				rts
.8282						_PTADo:
.8282		aa		tax				tax
.8283		60		rts				rts
.8284						AssembleGroup3:
.8284		68		pla				pla 								; get parameters, which is just the opcode.
.8285		fa		plx				plx
.8286		20 c1 82	jsr $82c1			jsr 	AccessParameters 			; get and output opcode
.8289		20 d9 82	jsr $82d9			jsr 	AssemblerWriteByte
.828c		20 61 84	jsr $8461			jsr 	CalculateOperand 			; get a 16 bit operand
.828f		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8291		38		sec				sec
.8292		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8295		48		pha				pha 								; LSB in A
.8296		a5 60		lda $60				lda 	NSMantissa1
.8298		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.829b		aa		tax				tax 								; MSB in X
.829c		68		pla				pla
.829d		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.829e		69 7f		adc #$7f			adc 	#$7F
.82a0		90 01		bcc $82a3			bcc 	_AG3NoCarry
.82a2		e8		inx				inx
.82a3						_AG3NoCarry:
.82a3		38		sec				sec 								; fix back and write out anyways.
.82a4		e9 80		sbc #$80			sbc 	#$80
.82a6		20 d9 82	jsr $82d9			jsr 	AssemblerWriteByte
.82a9		e0 00		cpx #$00			cpx 	#0 							; was it in range
.82ab		f0 0a		beq $82b7			beq 	_AG3Exit
.82ad		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.82b0		29 01		and #$01			and 	#1
.82b2		f0 03		beq $82b7			beq 	_AG3Exit
.82b4		4c f1 a7	jmp $a7f1			jmp 	RangeError 					; no, branch is out of range
.82b7						_AG3Exit:
.82b7		60		rts				rts
.82b8						AssembleGroup4:
.82b8		68		pla				pla 								; pop address
.82b9		fa		plx				plx
.82ba		20 c1 82	jsr $82c1			jsr 	AccessParameters 			; access and get first
.82bd		20 d9 82	jsr $82d9			jsr 	AssemblerWriteByte 			; output it.
.82c0		60		rts				rts
.82c1						AccessParameters:
.82c1		8d 1d 04	sta $041d			sta 	ParamStart
.82c4		8e 1e 04	stx $041e			stx 	ParamStart+1
.82c7		a9 01		lda #$01			lda 	#1
.82c9						GetParameter:
.82c9		5a		phy				phy
.82ca		a8		tay				tay
.82cb		ad 1d 04	lda $041d			lda 	ParamStart
.82ce		85 36		sta $36				sta 	zTemp0
.82d0		ad 1e 04	lda $041e			lda 	ParamStart+1
.82d3		85 37		sta $37				sta 	zTemp0+1
.82d5		b1 36		lda ($36),y			lda 	(zTemp0),y
.82d7		7a		ply				ply
.82d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82d9						AssemblerWriteByte:
.82d9		48		pha			pha
.82da		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.82dd		29 02		and #$02		and 	#2
.82df		f0 1b		beq $82fc		beq 	_AWBNoPrint
.82e1		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.82e4		20 17 83	jsr $8317		jsr 	PrintHex
.82e7		ad 1a 04	lda $041a		lda		AssemblerAddress
.82ea		20 17 83	jsr $8317		jsr 	PrintHex
.82ed		a9 20		lda #$20		lda 	#' '
.82ef		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.82f2		68		pla			pla 									; print byte
.82f3		48		pha			pha
.82f4		20 17 83	jsr $8317		jsr 	PrintHex
.82f7		a9 0d		lda #$0d		lda 	#13
.82f9		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.82fc						_AWBNoPrint:
.82fc		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.82ff		85 36		sta $36			sta 	zTemp0
.8301		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8304		f0 0e		beq $8314		beq 	_AWBRange
.8306		85 37		sta $37			sta 	zTemp0+1
.8308		68		pla			pla 									; write byte out
.8309		92 36		sta ($36)		sta 	(zTemp0)
.830b		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.830e		d0 03		bne $8313		bne 	_AWBNoCarry
.8310		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8313						_AWBNoCarry:
.8313		60		rts			rts
.8314						_AWBRange:
.8314		4c f1 a7	jmp $a7f1		jmp 	RangeError
.8317						PrintHex:
.8317		48		pha				pha
.8318		4a		lsr a				lsr 	a
.8319		4a		lsr a				lsr 	a
.831a		4a		lsr a				lsr 	a
.831b		4a		lsr a				lsr 	a
.831c		20 20 83	jsr $8320			jsr 	_PrintNibble
.831f		68		pla				pla
.8320						_PrintNibble:
.8320		29 0f		and #$0f			and 	#15
.8322		c9 0a		cmp #$0a			cmp 	#10
.8324		90 02		bcc $8328			bcc 	_NoShift
.8326		69 06		adc #$06			adc 	#6
.8328						_NoShift:
.8328		69 30		adc #$30			adc 	#48
.832a		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.832d						AssembleModeX:
.832d		5a		phy				phy
.832e		ad 1f 04	lda $041f			lda 	IsGroup1
.8331		f0 17		beq $834a			beq 	_AMXGroup2
.8333		8a		txa				txa 							; is it in group # 1
.8334		29 40		and #$40			and 	#AM_ISG1
.8336		f0 4d		beq $8385			beq 	_AMXFail 				; no, give up.
.8338		8a		txa				txa 							; get back.
.8339		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.833b		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.833d		d0 22		bne $8361			bne 	_AMXHaveInfo
.833f		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.8342		c9 81		cmp #$81			cmp 	#$81
.8344		f0 3f		beq $8385			beq 	_AMXFail
.8346		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8348		80 17		bra $8361			bra 	_AMXHaveInfo 			; odd design decision there.
.834a						_AMXGroup2:
.834a		8a		txa				txa 							; is it in group 2 ?
.834b		29 20		and #$20			and 	#AM_ISG2
.834d		f0 36		beq $8385			beq 	_AMXFail 				; no, give up.
.834f		8a		txa				txa 							; get the offset into Y
.8350		29 1f		and #$1f			and 	#$1F
.8352		4a		lsr a				lsr 	a 						; make it 0-7.
.8353		4a		lsr a				lsr  	a
.8354		a8		tay				tay
.8355		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8358						_AMXCheckOkay:
.8358		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8359		88		dey				dey
.835a		10 fc		bpl $8358			bpl 	_AMXCheckOkay
.835c		90 27		bcc $8385			bcc 	_AMXFail 				; not allowed.
.835e		8a		txa				txa  							; get mask back
.835f		29 1f		and #$1f			and 	#$1F
.8361						_AMXHaveInfo:
.8361		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8363		10 04		bpl $8369			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8365		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8367		d0 1c		bne $8385			bne 	_AMXFail
.8369						_AMXAnySize:
.8369		18		clc				clc 							; add offset to the base opcode
.836a		6d 20 04	adc $0420			adc 	BaseOpcode
.836d						_AMXOutputCode:
.836d		20 d9 82	jsr $82d9			jsr 	AssemblerWriteByte 		; write the opcode out.
.8370		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8372		f0 0e		beq $8382			beq 	_AMXExit
.8374		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8376		20 d9 82	jsr $82d9			jsr 	AssemblerWriteByte
.8379		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.837b		30 05		bmi $8382			bmi 	_AMXExit
.837d		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.837f		20 d9 82	jsr $82d9			jsr 	AssemblerWriteByte
.8382						_AMXExit:
.8382		7a		ply				ply
.8383		38		sec				sec
.8384		60		rts				rts
.8385						_AMXFail:
.8385		a0 00		ldy #$00			ldy 	#0
.8387						_AMXCheckOddities:
.8387		8a		txa				txa
.8388		d9 af 83	cmp $83af,y			cmp 	ExtraOpcode+2,y 		; match address mode
.838b		d0 15		bne $83a2			bne 	_AMXCONext
.838d		b9 ad 83	lda $83ad,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8390		cd 20 04	cmp $0420			cmp 	BaseOpcode
.8393		d0 0d		bne $83a2			bne 	_AMXCONext
.8395		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8397		10 04		bpl $839d			bpl 	_AMXCONotZero
.8399		a5 60		lda $60				lda 	NSMantissa1
.839b		d0 05		bne $83a2			bne 	_AMXCONext
.839d						_AMXCONotZero:
.839d		b9 ae 83	lda $83ae,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83a0		80 cb		bra $836d			bra 	_AMXOutputCode 			; and assemble it
.83a2						_AMXCONext:
.83a2		c8		iny				iny
.83a3		c8		iny				iny
.83a4		c8		iny				iny
.83a5		b9 ad 83	lda $83ad,y			lda 	ExtraOpcode+0,y 		; end of table
.83a8		d0 dd		bne $8387			bne 	_AMXCheckOddities
.83aa						_AMXCOFail:
.83aa		7a		ply				ply
.83ab		18		clc				clc
.83ac		60		rts				rts
.83ad						ExtraOpcode:
>83ad		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>83b0		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>83b3		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>83b6		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>83b9		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>83bc		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>83bf		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>83c2		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>83c5		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>83c8		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83cb		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83cc						LabelHere:
.83cc		c8		iny				iny 								; skip .
.83cd		a2 00		ldx #$00			ldx 	#0 							; get a term
.83cf		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm
.83d2		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.83d4		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83d6		d0 22		bne $83fa			bne 	_ALType 					; otherwise typing error
.83d8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83da		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.83dc		b5 60		lda $60,x			lda 	NSMantissa1,x
.83de		85 37		sta $37				sta 	zTemp0+1
.83e0		5a		phy				phy 								; copy address in (64k)
.83e1		a0 01		ldy #$01			ldy 	#1
.83e3		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.83e6		92 36		sta ($36)			sta 	(zTemp0)
.83e8		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.83eb		91 36		sta ($36),y			sta 	(zTemp0),y
.83ed		c8		iny				iny
.83ee		a9 00		lda #$00			lda 	#0 							; zero the rest.
.83f0		91 36		sta ($36),y			sta 	(zTemp0),y
.83f2		c8		iny				iny
.83f3		91 36		sta ($36),y			sta 	(zTemp0),y
.83f5		c8		iny				iny
.83f6		91 36		sta ($36),y			sta 	(zTemp0),y
.83f8		7a		ply				ply
.83f9		60		rts				rts
.83fa						_ALType:
.83fa		4c f6 a7	jmp $a7f6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83fd						TypeAndCalculateOperand:
.83fd		b1 30		lda ($30),y			lda 	(codePtr),y
.83ff		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8401		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8403		f0 5b		beq $8460			beq 	_TACOExit
.8405		c9 80		cmp #$80			cmp 	#KWC_EOL
.8407		f0 57		beq $8460			beq 	_TACOExit
.8409		c8		iny				iny
.840a		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.840c		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.840e		f0 51		beq $8461			beq 	CalculateOperand
.8410		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8412		f0 1f		beq $8433			beq 	_TACOIndirect
.8414		88		dey				dey 								; undo get of first character
.8415		20 61 84	jsr $8461			jsr 	CalculateOperand 			; get operand
.8418		b1 30		lda ($30),y			lda 	(codePtr),y
.841a		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.841c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.841e		d0 40		bne $8460			bne 	_TACOExit
.8420		c8		iny				iny
.8421		20 6b 84	jsr $846b			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8424		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8426		c9 58		cmp #$58			cmp 	#'X'
.8428		f0 36		beq $8460			beq 	_TACOExit
.842a		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.842c		c9 59		cmp #$59			cmp 	#'Y'
.842e		f0 30		beq $8460			beq 	_TACOExit
.8430						_TACOSyntax:
.8430		4c ec a7	jmp $a7ec			jmp 	SyntaxError
.8433						_TACOIndirect:
.8433		20 61 84	jsr $8461			jsr 	CalculateOperand 			; get the operand
.8436		b1 30		lda ($30),y			lda 	(codePtr),y
.8438		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.843a		f0 17		beq $8453			beq 	_TACOIndX
.843c		20 e8 95	jsr $95e8			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.843f		b1 30		lda ($30),y			lda 	(codePtr),y
.8441		a2 d1		ldx #$d1			ldx 	#AM_IND
.8443		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8445		d0 19		bne $8460			bne 	_TACOExit
.8447		c8		iny				iny
.8448		20 6b 84	jsr $846b			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.844b		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.844d		d0 e1		bne $8430			bne 	_TACOSyntax
.844f		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8451		80 0d		bra $8460			bra 	_TACOExit
.8453						_TACOIndX:
.8453		c8		iny				iny
.8454		20 6b 84	jsr $846b			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8457		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8459		d0 d5		bne $8430			bne 	_TACOSyntax
.845b		20 e8 95	jsr $95e8			jsr 	CheckRightBracket			; check )
.845e		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8460						_TACOExit:
.8460		60		rts				rts
.8461						CalculateOperand:
.8461		48		pha				pha
.8462		da		phx				phx
.8463		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8465		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.8468		fa		plx				plx
.8469		68		pla				pla
.846a		60		rts				rts
.846b						TACOCheckXY:
.846b		b1 30		lda ($30),y			lda 	(codePtr),y
.846d		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.846f		c9 40		cmp #$40			cmp 	#$40
.8471		d0 21		bne $8494			bne 	_TCXYFail
.8473		b1 30		lda ($30),y			lda 	(codePtr),y
.8475		18		clc				clc
.8476		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8478		85 37		sta $37				sta 	zTemp0+1
.847a		c8		iny				iny
.847b		b1 30		lda ($30),y			lda 	(codePtr),y
.847d		c8		iny				iny
.847e		85 36		sta $36				sta 	zTemp0
.8480		5a		phy				phy 								; save position
.8481		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8483		b1 36		lda ($36),y			lda 	(zTemp0),y
.8485		d0 0c		bne $8493			bne 	_TCXYPopFail
.8487		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8489		b1 36		lda ($36),y			lda 	(zTemp0),y
.848b		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.848d		f0 08		beq $8497			beq 	_TCXYFound
.848f		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8491		f0 04		beq $8497			beq 	_TCXYFound
.8493						_TCXYPopFail:
.8493		7a		ply				ply
.8494						_TCXYFail:
.8494		a9 00		lda #$00			lda 	#0
.8496		60		rts				rts
.8497						_TCXYFound:
.8497		7a		ply				ply 								; restore position
.8498		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.849a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.849b						BackloadProgram:
.849b		20 7a 8f	jsr $8f7a			jsr 	NewProgram 					; does the actual NEW.
.849e		a2 84		ldx #$84			ldx 	#_BLLoad >> 8
.84a0		a9 f2		lda #$f2			lda 	#_BLLoad & $FF
.84a2		20 5a 96	jsr $965a			jsr 	PrintStringXA
.84a5		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.84a7		8d 66 07	sta $0766			sta 	BackLoadPage
.84aa		a9 00		lda #$00			lda 	#(($6000) & $FF)
.84ac		8d 67 07	sta $0767			sta 	0+BackLoadPointer
.84af		a9 60		lda #$60			lda 	#(($6000) >> 8)
.84b1		8d 68 07	sta $0768			sta 	1+BackLoadPointer
.84b4		a9 ff		lda #$ff			lda 	#$FF
.84b6		8d fa ff	sta $fffa			sta 	$FFFA
.84b9						_BPLoop:
.84b9		a2 ff		ldx #$ff			ldx 	#$FF
.84bb		20 07 85	jsr $8507			jsr 	BLReadByte 					; read a byte
.84be		c9 00		cmp #$00			cmp 	#0
.84c0		f0 29		beq $84eb			beq 	_BPExit 					; if 0 exit
.84c2		30 27		bmi $84eb			bmi 	_BPExit 					; if -ve exit
.84c4						_BPCopy:
.84c4		e8		inx				inx  								; copy byte into the lineBuffer
.84c5		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.84c8		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.84cb		20 07 85	jsr $8507			jsr 	BLReadByte 					; read next byte
.84ce		30 0a		bmi $84da			bmi 	_BPEndLine 					; -ve = EOL
.84d0		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.84d2		d0 02		bne $84d6			bne 	_BPNotTab
.84d4		a9 20		lda #$20			lda 	#' '
.84d6						_BPNotTab:
.84d6		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.84d8		b0 ea		bcs $84c4			bcs 	_BPCopy 					; until a control character, should be 13 received.
.84da						_BPEndLine:
.84da		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.84dd		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.84e0		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.84e3		f0 d4		beq $84b9			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.84e5		38		sec				sec 								; append not insert
.84e6		20 55 ad	jsr $ad55			jsr 	MemoryInsertLine 			; append to current program
.84e9		80 ce		bra $84b9			bra 	_BPLoop
.84eb						_BPExit:
.84eb		9c fa ff	stz $fffa			stz 	$FFFA
.84ee		20 12 87	jsr $8712			jsr 	ClearCommand 				; clear variables etc.
.84f1		60		rts				rts
.84f2						_BLLoad:
>84f2		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>84fa		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8507						BLReadByte:
.8507		da		phx				phx
.8508		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.850a		ad 66 07	lda $0766			lda 	BackLoadPage	 			; set current page
.850d		85 0b		sta $0b				sta 	8+3
.850f		ad 67 07	lda $0767			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8512		85 36		sta $36				sta 	zTemp0
.8514		ad 68 07	lda $0768			lda 	BackLoadPointer+1
.8517		85 37		sta $37				sta 	zTemp0+1
.8519		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.851b		ee 67 07	inc $0767			inc 	BackLoadPointer 			; bump pointer
.851e		d0 0f		bne $852f			bne 	_BLNoCarry
.8520		ee 68 07	inc $0768			inc 	BackLoadPointer+1
.8523		10 0a		bpl $852f			bpl 	_BLNoCarry 					; need a new page
.8525		48		pha				pha
.8526		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8528		8d 68 07	sta $0768			sta 	BackLoadPointer+1
.852b		ee 66 07	inc $0766			inc 	BackLoadPage 				; next page from source.
.852e		68		pla				pla
.852f						_BLNoCarry:
.852f		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8531		fa		plx				plx
.8532		c9 00		cmp #$00			cmp 	#0
.8534		60		rts				rts
.0766						BackLoadPage:
>0766								.fill  	1
.0767						BackLoadPointer:
>0767								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8535						EditProgramCode:
.8535		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.8538		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.853b		20 f9 ad	jsr $adf9			jsr 	MemorySearch
.853e		90 05		bcc $8545			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8540		d0 03		bne $8545			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8542		20 1e ad	jsr $ad1e			jsr 	MemoryDeleteLine 			; delete the line
.8545						_EPCNoDelete:
.8545		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8548		c9 80		cmp #$80			cmp 	#KWC_EOL
.854a		f0 0d		beq $8559			beq 	_EPCNoInsert
.854c		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.854f		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8552		20 f9 ad	jsr $adf9			jsr 	MemorySearch
.8555		18		clc				clc 								; insert at this point.
.8556		20 55 ad	jsr $ad55			jsr 	MemoryInsertLine 			; insert the line
.8559						_EPCNoInsert:
.8559		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.855a						WarmStart:
.855a		a2 ff		ldx #$ff			ldx 	#$FF
.855c		9a		txs				txs
.855d		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.855f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8562		20 21 80	jsr $8021			jsr 	EXTInputLine 				; get line to lineBuffer
.8565		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line
.8568		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.856b		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.856e		d0 17		bne $8587			bne 	_WSEditCode 				; if so,edit code.
.8570		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8573		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.8575		85 30		sta $30				sta 	codePtr
.8577		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8579		85 31		sta $31				sta 	codePtr+1
.857b		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.857e		c9 80		cmp #$80			cmp 	#KWC_EOL
.8580		f0 d8		beq $855a			beq 	WarmStart
.8582		20 0a 91	jsr $910a			jsr 	RUNCodePointerLine 			; execute that line.
.8585		80 d3		bra $855a			bra 	WarmStart
.8587						_WSEditCode:
.8587		20 35 85	jsr $8535			jsr 	EditProgramCode 			; edit the program code
.858a		20 12 87	jsr $8712			jsr 	ClearCommand 				; clear all variables etc.
.858d		80 cb		bra $855a			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.858f						AssembleCommand:
.858f		a2 00		ldx #$00			ldx 	#0
.8591		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger 		; start address
.8594		a5 58		lda $58				lda 	NSMantissa0
.8596		8d 1a 04	sta $041a			sta 	AssemblerAddress
.8599		a5 60		lda $60				lda 	NSMantissa1
.859b		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.859e		20 f0 95	jsr $95f0			jsr 	CheckComma
.85a1		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; options 0-3
.85a4		a5 58		lda $58				lda 	NSMantissa0
.85a6		8d 1c 04	sta $041c			sta 	AssemblerControl
.85a9		60		rts				rts
.85aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.85ab						AssertCommand:
.85ab		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.85ad		20 db a5	jsr $a5db			jsr 	EvaluateInteger 			; the assert test
.85b0		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; exit if result is non zero.
.85b3		d0 05		bne $85ba			bne 	_ACExit
.85b5		a9 0a		lda #$0a		lda	#10
.85b7		4c 01 96	jmp $9601		jmp	ErrorHandler
.85ba						_ACExit:
.85ba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.85bb						Command_BLoad:
.85bb		a2 00		ldx #$00			ldx 	#0
.85bd		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; file name to load
.85c0		20 f0 95	jsr $95f0			jsr 	CheckComma 					; consume comma
.85c3		e8		inx				inx
.85c4		20 db a5	jsr $a5db			jsr 	EvaluateInteger 			; load address (full physical address)
.85c7		5a		phy				phy
.85c8		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.85ca		a6 60		ldx $60				ldx 	NSMantissa1
.85cc		20 3a 81	jsr $813a			jsr 	KNLOpenFileRead 			; open file for reading
.85cf		b0 4e		bcs $861f			bcs 	CBLErrorHandler 			; error, so fail.
.85d1		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.85d4		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.85d6		20 22 86	jsr $8622			jsr 	BLOpenPhysicalMemory 		; open for access.
.85d9						_BLReadFile:
.85d9		ad 6d 07	lda $076d			lda 	BasicFileStream
.85dc		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.85de		20 8f 81	jsr $818f			jsr 	KNLReadBlock 				; read next block
.85e1		b0 22		bcs $8605			bcs 	_BLFileError 				; file error, which might be EOF.
.85e3		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.85e5		f0 f2		beq $85d9			beq 	_BLReadFile
.85e7		8d 6b 07	sta $076b			sta 	BLCopyCounter 				; counter.
.85ea		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; copy the buffer out here
.85ed		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.85ef						_BLCopyLoop:
.85ef		bd 5e 06	lda $065e,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.85f2		91 3a		sta ($3a),y			sta 	(zTemp2),y
.85f4		c8		iny				iny
.85f5		d0 03		bne $85fa			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.85f7		20 4a 86	jsr $864a			jsr 	BLAdvancePhysicalMemory
.85fa						_BLNoAdjust:
.85fa		e8		inx				inx
.85fb		ce 6b 07	dec $076b			dec 	BLCopyCounter
.85fe		d0 ef		bne $85ef			bne 	_BLCopyLoop
.8600		8c 6a 07	sty $076a			sty 	BLYOffset 					; update Y offset
.8603		80 d4		bra $85d9			bra 	_BLReadFile 				; go ask for more.
.8605						_BLFileError:
.8605		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8607		d0 16		bne $861f			bne 	CBLErrorHandler				; no, it's an actual error
.8609		20 44 86	jsr $8644			jsr 	BLClosePhysicalMemory 		; close the access.
.860c		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.860f		20 04 82	jsr $8204			jsr 	KNLCloseFile
.8612		7a		ply				ply
.8613		60		rts				rts
.8614						CBLCloseError:
.8614		48		pha				pha
.8615		20 44 86	jsr $8644			jsr 	BLClosePhysicalMemory
.8618		ad 6d 07	lda $076d			lda 	BasicFileStream
.861b		20 04 82	jsr $8204			jsr 	KNLCloseFile
.861e		68		pla				pla
.861f						CBLErrorHandler:
.861f		4c 25 8d	jmp $8d25			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8622						BLOpenPhysicalMemory:
.8622		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8624		8d 69 07	sta $0769			sta 	BLNormalMapping
.8627		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8629		8d 6a 07	sta $076a			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.862c		64 3a		stz $3a				stz 	zTemp2
.862e		b5 60		lda $60,x			lda 	NSMantissa1,x
.8630		29 1f		and #$1f			and 	#$1F
.8632		09 60		ora #$60			ora 	#BLAccessPage << 5
.8634		85 3b		sta $3b				sta 	zTemp2+1
.8636		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8638		16 60		asl $60,x			asl 	NSMantissa1,x
.863a		2a		rol a				rol 	a
.863b		16 60		asl $60,x			asl 	NSMantissa1,x
.863d		2a		rol a				rol 	a
.863e		16 60		asl $60,x			asl 	NSMantissa1,x
.8640		2a		rol a				rol 	a
.8641		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8643		60		rts				rts
.8644						BLClosePhysicalMemory:
.8644		ad 69 07	lda $0769			lda 	BLNormalMapping
.8647		85 0b		sta $0b				sta 	BLAccessPage+8
.8649		60		rts				rts
.864a						BLAdvancePhysicalMemory:
.864a		48		pha				pha
.864b		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.864d		a5 3b		lda $3b				lda 	zTemp2+1
.864f		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8651		d0 06		bne $8659			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8653		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8655		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8657		85 3b		sta $3b				sta 	zTemp2+1
.8659						_BLAPMExit:
.8659		68		pla				pla
.865a		60		rts				rts
.0769						BLNormalMapping:
>0769								.fill 	1
.076a						BLYOffset:
>076a								.fill 	1
.076b						BLCopyCounter:
>076b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.865b						Command_BSave:
.865b		a2 00		ldx #$00			ldx 	#0
.865d		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; file name to load
.8660		20 f0 95	jsr $95f0			jsr 	CheckComma 					; consume comma
.8663		e8		inx				inx
.8664		20 db a5	jsr $a5db			jsr 	EvaluateInteger 			; load address (full physical address)
.8667		20 f0 95	jsr $95f0			jsr 	CheckComma 					; consume comma
.866a		e8		inx				inx
.866b		20 db a5	jsr $a5db			jsr 	EvaluateInteger 			; data length (3 bytes only)
.866e		5a		phy				phy
.866f		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8671		a6 60		ldx $60				ldx 	NSMantissa1
.8673		20 35 81	jsr $8135			jsr 	KNLOpenFileWrite 			; open file for reading
.8676		b0 62		bcs $86da			bcs 	CBSErrorHandler 			; error, so fail.
.8678		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.867b		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.867d		20 22 86	jsr $8622			jsr 	BLOpenPhysicalMemory 		; open for access.
.8680		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.8682		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; used for data offset.
.8685						_BSWriteToFileLoop:
.8685		38		sec				sec 								; pre decrement count.
.8686		a5 5a		lda $5a				lda 	NSMantissa0+2
.8688		e9 01		sbc #$01			sbc 	#1
.868a		85 5a		sta $5a				sta 	NSMantissa0+2
.868c		a5 62		lda $62				lda 	NSMantissa1+2
.868e		e9 00		sbc #$00			sbc 	#0
.8690		85 62		sta $62				sta 	NSMantissa1+2
.8692		a5 6a		lda $6a				lda 	NSMantissa2+2
.8694		e9 00		sbc #$00			sbc 	#0
.8696		85 6a		sta $6a				sta 	NSMantissa2+2
.8698		30 15		bmi $86af			bmi 	_BSFileComplete 			; undercounted, so exit.
.869a		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.869c		9d 5e 06	sta $065e,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.869f		e8		inx				inx
.86a0		c8		iny				iny 								; next byte
.86a1		d0 03		bne $86a6			bne 	_BSNoCheck
.86a3		20 4a 86	jsr $864a			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.86a6						_BSNoCheck:
.86a6		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.86a8		d0 db		bne $8685			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.86aa		20 bd 86	jsr $86bd			jsr 	BSFlushBuffer 				; yes, flush the buffer
.86ad		80 d6		bra $8685			bra 	_BSWriteToFileLoop 			; and keep on going
.86af						_BSFileComplete:
.86af		20 bd 86	jsr $86bd			jsr 	BSFlushBuffer 				; write the buffer remainder.
.86b2		20 44 86	jsr $8644			jsr 	BLClosePhysicalMemory 		; close the access.
.86b5		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.86b8		20 04 82	jsr $8204			jsr 	KNLCloseFile
.86bb		7a		ply				ply
.86bc		60		rts				rts
.86bd						BSFlushBuffer:
.86bd		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.86bf		f0 0d		beq $86ce			beq 	_BSFBExit 					; if so, exit.
.86c1		a9 5e		lda #$5e			lda 	#KNLReadBuffer & $FF 		; where to write from.
.86c3		85 36		sta $36				sta 	zTemp0
.86c5		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.86c7		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.86c9		20 d8 93	jsr $93d8			jsr 	CLWriteByteBlock 			; write it.
.86cc		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.86ce						_BSFBExit:
.86ce		60		rts				rts
.86cf						CBSSCloseError:
.86cf		48		pha				pha
.86d0		20 44 86	jsr $8644			jsr 	BLClosePhysicalMemory
.86d3		ad 6d 07	lda $076d			lda 	BasicFileStream
.86d6		20 04 82	jsr $8204			jsr 	KNLCloseFile
.86d9		68		pla				pla
.86da						CBSErrorHandler:
.86da		4c 25 8d	jmp $8d25			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.86dd						CallCommand:
.86dd		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.86df		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.86e2						_CCClear
.86e2		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.86e3		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; these are optional sequentially.
.86e6		e0 04		cpx #$04			cpx 	#4
.86e8		d0 f8		bne $86e2			bne 	_CCClear
.86ea		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.86ec						_CCCParam:
.86ec		b1 30		lda ($30),y			lda 	(codePtr),y
.86ee		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86f0		d0 09		bne $86fb			bne 	_CCCRun6502
.86f2		c8		iny				iny 								; skip comma
.86f3		e8		inx				inx	 								; next level
.86f4		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get A/X/Y
.86f7		e0 03		cpx #$03			cpx 	#3
.86f9		90 f1		bcc $86ec			bcc 	_CCCParam 					; done all 3 ?
.86fb						_CCCRun6502:
.86fb		5a		phy				phy 								; save position
.86fc		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.86fe		85 37		sta $37				sta 	zTemp0+1
.8700		a5 58		lda $58				lda 	NSMantissa0
.8702		85 36		sta $36				sta 	zTemp0
.8704		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8706		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8708		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.870a		20 0f 87	jsr $870f			jsr 	_CCCZTemp0 					; call zTemp0
.870d		7a		ply				ply 								; restore position and exit
.870e		60		rts				rts
.870f						_CCCZTemp0:
.870f		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8712						ClearCommand:
.8712		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8714		85 36		sta $36				sta 	0+zTemp0
.8716		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8718		85 37		sta $37				sta 	1+zTemp0
.871a						_ClearZeroLoop:
.871a		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.871c		f0 24		beq $8742			beq 	_ClearZeroEnd
.871e		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8720		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8722						_ClearOneVariable:
.8722		91 36		sta ($36),y			sta 	(zTemp0),y
.8724		c8		iny				iny
.8725		c0 08		cpy #$08			cpy 	#8
.8727		d0 f9		bne $8722			bne 	_ClearOneVariable
.8729		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.872b		b1 36		lda ($36),y			lda 	(zTemp0),y
.872d		c9 18		cmp #$18			cmp 	#NSTProcedure
.872f		d0 04		bne $8735			bne 	_ClearNotProcedure
.8731		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8733		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8735						_ClearNotProcedure:
.8735		18		clc				clc 								; go to the next variable
.8736		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8738		65 36		adc $36				adc 	zTemp0
.873a		85 36		sta $36				sta 	zTemp0
.873c		90 dc		bcc $871a			bcc 	_ClearZeroLoop
.873e		e6 37		inc $37				inc 	zTemp0+1
.8740		80 d8		bra $871a			bra 	_ClearZeroLoop
.8742						_ClearZeroEnd:
.8742		18		clc				clc
.8743		a5 36		lda $36				lda 	zTemp0
.8745		69 01		adc #$01			adc 	#1
.8747		8d 08 04	sta $0408			sta 	lowMemPtr
.874a		a5 37		lda $37				lda 	zTemp0+1
.874c		69 00		adc #$00			adc 	#0
.874e		8d 09 04	sta $0409			sta 	lowMemPtr+1
.8751		20 b3 b7	jsr $b7b3			jsr 	StackReset
.8754		20 19 b8	jsr $b819			jsr 	StringSystemInitialise
.8757		20 97 94	jsr $9497			jsr 	ProcedureScan
.875a		20 b9 90	jsr $90b9			jsr 	Command_Restore
.875d		9c 1a 04	stz $041a			stz 	AssemblerAddress
.8760		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.8763		9c 1c 04	stz $041c			stz 	AssemblerControl
.8766		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.8769		20 3b a1	jsr $a13b			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.876c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.876d						ClearScreen:
.876d		5a		phy				phy
.876e		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8770		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8773		7a		ply				ply
.8774		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8775						Command_Data:
.8775		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8777		a2 80		ldx #$80			ldx 	#KWC_EOL
.8779		20 e9 94	jsr $94e9			jsr 	ScanForward
.877c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.877d						DimCommand:
.877d		b1 30		lda ($30),y			lda 	(codePtr),y
.877f		29 c0		and #$c0			and 	#$C0
.8781		c9 40		cmp #$40			cmp 	#$40
.8783		d0 7a		bne $87ff			bne 	_DCSyntax 				; n o, error.
.8785		b1 30		lda ($30),y			lda 	(codePtr),y
.8787		18		clc				clc
.8788		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.878a		85 3f		sta $3f				sta 	zaTemp+1
.878c		c8		iny				iny
.878d		b1 30		lda ($30),y			lda 	(codePtr),y
.878f		c8		iny				iny
.8790		85 3e		sta $3e				sta 	zaTemp
.8792		5a		phy				phy
.8793		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8795		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8797		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8799		c9 18		cmp #$18			cmp 	#NSTProcedure
.879b		f0 62		beq $87ff			beq 	_DCSyntax
.879d		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.879f		29 04		and #$04			and 	#NSBIsArray
.87a1		f0 64		beq $8807			beq 	_DCType
.87a3		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87a5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87a7		d0 59		bne $8802			bne 	_DCRedefine
.87a9		7a		ply				ply
.87aa		20 0a 88	jsr $880a			jsr 	_DCGetSize 				; get array size, check it.
.87ad		5a		phy				phy
.87ae		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.87b0		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.87b2		7a		ply				ply 							; is there a second (e.g. ,x)
.87b3		b1 30		lda ($30),y			lda 	(codePtr),y
.87b5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b7		d0 0a		bne $87c3			bne 	_DCOneDimension
.87b9		c8		iny				iny 							; skip comma
.87ba		20 0a 88	jsr $880a			jsr 	_DCGetSize 				; get 2nd array size
.87bd		5a		phy				phy
.87be		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.87c0		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87c2		7a		ply				ply
.87c3						_DCOneDimension:
.87c3		5a		phy				phy 							; save position
.87c4		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.87c6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87c8		aa		tax				tax
.87c9		c8		iny				iny
.87ca		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87cc		e8		inx				inx 							; bump them.
.87cd		1a		inc a				inc 	a
.87ce		20 19 a6	jsr $a619			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.87d1		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.87d3		29 e0		and #$e0			and 	#$E0
.87d5		d0 23		bne $87fa			bne 	_DCSize
.87d7		a0 02		ldy #$02			ldy 	#2 						; get base type
.87d9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87db		20 18 88	jsr $8818			jsr 	ScaleByBaseType 		; scale by base type
.87de		a5 36		lda $36				lda 	zTemp0
.87e0		a6 37		ldx $37				ldx 	zTemp0+1
.87e2		20 fd a0	jsr $a0fd			jsr 	AllocateXABytes 		; allocate memory
.87e5		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.87e7		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87e9		c8		iny				iny
.87ea		8a		txa				txa
.87eb		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87ed		7a		ply				ply 							; get position back
.87ee		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 		; check )
.87f1		b1 30		lda ($30),y			lda 	(codePtr),y
.87f3		c8		iny				iny 							; consume in case
.87f4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.87f6		f0 85		beq $877d			beq 	DimCommand
.87f8		88		dey				dey 							; undo consume
.87f9		60		rts				rts
.87fa						_DCSize:
.87fa		a9 16		lda #$16		lda	#22
.87fc		4c 01 96	jmp $9601		jmp	ErrorHandler
.87ff						_DCSyntax:
.87ff		4c ec a7	jmp $a7ec			jmp 	SyntaxError
.8802						_DCRedefine:
.8802		a9 15		lda #$15		lda	#21
.8804		4c 01 96	jmp $9601		jmp	ErrorHandler
.8807						_DCType:
.8807		4c f6 a7	jmp $a7f6			jmp 	TypeError
.880a						_DCGetSize:
.880a		a2 00		ldx #$00			ldx 	#0 						; get first index.
.880c		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 	; get array dimension
.880f		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8811		f0 e7		beq $87fa			beq 	_DCSize
.8813		c9 fe		cmp #$fe			cmp 	#254
.8815		f0 e3		beq $87fa			beq 	_DCSize
.8817		60		rts				rts
.8818						ScaleByBaseType:
.8818		29 10		and #$10			and 	#NSBIsString 			; is it string
.881a		d0 19		bne $8835			bne 	_SBBTString
.881c		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.881e		48		pha				pha
.881f		a5 36		lda $36				lda 	zTemp0
.8821		48		pha				pha
.8822		06 36		asl $36				asl 	zTemp0 					; x 2
.8824		26 37		rol $37				rol 	zTemp0+1
.8826		06 36		asl $36				asl 	zTemp0 					; x 4
.8828		26 37		rol $37				rol 	zTemp0+1
.882a		68		pla				pla 							; add stacked value = x 5
.882b		65 36		adc $36				adc 	zTemp0
.882d		85 36		sta $36				sta 	zTemp0
.882f		68		pla				pla
.8830		65 37		adc $37				adc 	zTemp0+1
.8832		85 37		sta $37				sta 	zTemp0+1
.8834		60		rts				rts
.8835						_SBBTString:
.8835		06 36		asl $36				asl 	zTemp0
.8837		26 37		rol $37				rol 	zTemp0+1
.8839		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.883a						Command_Dir:
.883a		ad 5e 07	lda $075e			lda     KNLDefaultDrive				; set drive to list.
.883d		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.883f		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8841		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8844		b0 4f		bcs $8895			bcs     _CDExit
.8846						_CDEventLoop:
.8846		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8849		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.884c		b0 f8		bcs $8846			bcs     _CDEventLoop
.884e		ad 5f 07	lda $075f			lda     KNLEvent.type
.8851		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.8853		f0 40		beq $8895			beq    	_CDExit
.8855		20 5a 88	jsr $885a			jsr     _CDMessages 				; handle various messages
.8858		80 ec		bra $8846			bra     _CDEventLoop
.885a						_CDMessages:
.885a		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.885c		f0 15		beq $8873			beq     _CDEVRead
.885e		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8860		f0 19		beq $887b			beq     _CDEVVolume
.8862		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.8864		f0 32		beq $8898			beq     _CDEVFile
.8866		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8868		f0 70		beq $88da			beq     _CDEVFree
.886a		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.886c		f0 6e		beq $88dc			beq     _CDEVEOF
.886e		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8870		f0 6a		beq $88dc			beq     _CDEVEOF
.8872		60		rts				rts
.8873						_CDEVRead:
.8873		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.8876		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8878		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.887b						_CDEVVolume:
.887b		a9 5b		lda #$5b			lda 	#"["
.887d		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8880		ad 64 07	lda $0764			lda     KNLEvent.directory.volume.len
.8883		20 e4 88	jsr $88e4			jsr     _CDReadData
.8886		20 5a 96	jsr $965a			jsr 	PrintStringXA
.8889		a9 5d		lda #$5d			lda 	#"]"
.888b		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.888e		a9 0d		lda #$0d			lda 	#13
.8890		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8893		80 de		bra $8873			bra     _CDEVRead
.8895						_CDExit:
.8895		4c 5a 85	jmp $855a			jmp 	WarmStart
.8898						_CDEVFile:
.8898		a9 20		lda #$20			lda 	#32
.889a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.889d		ad 64 07	lda $0764			lda     KNLEvent.directory.file.len
.88a0		48		pha				pha
.88a1		20 e4 88	jsr $88e4			jsr     _CDReadData
.88a4		20 5a 96	jsr $965a			jsr 	PrintStringXA
.88a7		68		pla				pla
.88a8		49 ff		eor #$ff			eor 	#$FF
.88aa		38		sec				sec
.88ab		69 10		adc #$10			adc 	#16
.88ad		aa		tax				tax
.88ae						_CDEVTab:
.88ae		a9 20		lda #$20			lda 	#32
.88b0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88b3		ca		dex				dex
.88b4		10 f8		bpl $88ae			bpl 	_CDEVTab
.88b6		20 fb 88	jsr $88fb			jsr 	_CDReadExtended
.88b9		ad 26 05	lda $0526			lda 	lineBuffer
.88bc		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.88bf		20 70 9a	jsr $9a70			jsr 	ConvertInt16
.88c2		20 5a 96	jsr $965a			jsr 	PrintStringXA
.88c5		a2 88		ldx #$88			ldx 	#_CDEVFMessage >> 8
.88c7		a9 ce		lda #$ce			lda 	#_CDEVFMessage & $FF
.88c9		20 5a 96	jsr $965a			jsr 	PrintStringXA
.88cc		80 a5		bra $8873			bra     _CDEVRead
.88ce						_CDEVFMessage:
>88ce		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>88d6		29 2e 0d 00
.88da						_CDEVFree:
.88da		80 00		bra $88dc			bra     _CDEVEOF
.88dc						_CDEVEOF:
.88dc		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.88df		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.88e1		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.88e4						_CDReadData:
.88e4		85 fd		sta $fd				sta     kernel.args.recv.buflen
.88e6		a9 26		lda #$26			lda     #lineBuffer & $FF
.88e8		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.88ea		a9 05		lda #$05			lda     #lineBuffer >> 8
.88ec		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.88ee		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.88f1		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.88f3		9e 26 05	stz $0526,x			stz     lineBuffer,x
.88f6		a9 26		lda #$26			lda 	#lineBuffer & $FF
.88f8		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.88fa		60		rts				rts
.88fb						_CDReadExtended:
.88fb		a9 02		lda #$02			lda     #2
.88fd		85 fd		sta $fd				sta     kernel.args.recv.buflen
.88ff		a9 26		lda #$26			lda     #lineBuffer & $FF
.8901		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8903		a9 05		lda #$05			lda     #lineBuffer >> 8
.8905		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8907		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.890a						Command_Drive:
.890a		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.890d		20 31 81	jsr $8131			jsr 	KNLSetDrive
.8910		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8911						EndCommand:
.8911		4c 5a 85	jmp $855a			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8914						ForCommand:
.8914		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8916		20 4d b7	jsr $b74d			jsr 	StackOpen
.8919		a2 00		ldx #$00			ldx 	#0
.891b		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm
.891e		b5 50		lda $50,x			lda 	NSStatus,x
.8920		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8922		d0 47		bne $896b			bne		_FCError
.8924		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8926		20 f8 95	jsr $95f8			jsr 	CheckNextA
.8929		e8		inx				inx
.892a		20 db a5	jsr $a5db			jsr 	EvaluateInteger 			; <from> in +1
.892d		b1 30		lda ($30),y			lda 	(codePtr),y
.892f		c8		iny				iny 								; consume it
.8930		48		pha				pha 								; save on stack for later
.8931		c9 c0		cmp #$c0			cmp 	#KWD_DOWNTO
.8933		f0 04		beq $8939			beq 	_FCNoSyntax
.8935		c9 da		cmp #$da			cmp 	#KWD_TO
.8937		d0 35		bne $896e			bne 	_FCSyntaxError
.8939						_FCNoSyntax:
.8939		e8		inx				inx
.893a		20 db a5	jsr $a5db			jsr 	EvaluateInteger
.893d		20 92 b7	jsr $b792			jsr 	STKSaveCodePosition 		; save loop back position
.8940		68		pla				pla 								; restore DOWNTO or TO
.8941		5a		phy				phy 								; save Y on the stack
.8942		49 c0		eor #$c0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8944		f0 02		beq $8948			beq 	_FCNotDownTo
.8946		a9 02		lda #$02			lda 	#2
.8948						_FCNotDownTo:
.8948		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8949		a0 10		ldy #$10			ldy 	#16
.894b		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.894d		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.894f		a5 58		lda $58				lda 	NSMantissa0
.8951		91 34		sta ($34),y			sta 	(basicStack),y
.8953		a5 60		lda $60				lda 	NSMantissa1
.8955		c8		iny				iny
.8956		91 34		sta ($34),y			sta 	(basicStack),y
.8958		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.895a		a2 01		ldx #$01			ldx 	#1
.895c		20 71 89	jsr $8971			jsr 	FCIntegerToStack
.895f		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8961		a2 02		ldx #$02			ldx 	#2
.8963		20 71 89	jsr $8971			jsr 	FCIntegerToStack
.8966		20 8c 89	jsr $898c			jsr 	CopyIndexToReference
.8969		7a		ply				ply 								; restore position
.896a		60		rts				rts
.896b						_FCError:
.896b		4c f6 a7	jmp $a7f6			jmp 	TypeError
.896e						_FCSyntaxError:
.896e		4c ec a7	jmp $a7ec			jmp 	SyntaxError
.8971						FCIntegerToStack:
.8971		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8973		10 03		bpl $8978			bpl	 	_FCNotNegative
.8975		20 37 a6	jsr $a637			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8978						_FCNotNegative:
.8978		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.897a		91 34		sta ($34),y			sta 	(basicStack),y
.897c		c8		iny				iny
.897d		b5 60		lda $60,x			lda 	NSMantissa1,x
.897f		91 34		sta ($34),y			sta 	(basicStack),y
.8981		c8		iny				iny
.8982		b5 68		lda $68,x			lda 	NSMantissa2,x
.8984		91 34		sta ($34),y			sta 	(basicStack),y
.8986		c8		iny				iny
.8987		b5 70		lda $70,x			lda 	NSMantissa3,x
.8989		91 34		sta ($34),y			sta 	(basicStack),y
.898b		60		rts				rts
.898c						CopyIndexToReference:
.898c		5a		phy				phy
.898d		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.898f		38		sec				sec 								; (because we copy from offset 8)
.8990		b1 34		lda ($34),y			lda 	(basicStack),y
.8992		e9 08		sbc #$08			sbc 	#8
.8994		85 36		sta $36				sta 	zTemp0
.8996		c8		iny				iny
.8997		b1 34		lda ($34),y			lda 	(basicStack),y
.8999		e9 00		sbc #$00			sbc 	#0
.899b		85 37		sta $37				sta 	zTemp0+1
.899d		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.899f		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89a1		b1 34		lda ($34),y			lda 	(basicStack),y
.89a3		0a		asl a				asl 	a 							; into carry
.89a4		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89a6		90 14		bcc $89bc			bcc 	_CITRNormal
.89a8		38		sec				sec
.89a9						_CITRNegative:
.89a9		a9 00		lda #$00			lda 	#0
.89ab		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89ad		91 36		sta ($36),y			sta 	(zTemp0),y
.89af		c8		iny				iny
.89b0		ca		dex				dex
.89b1		d0 f6		bne $89a9			bne 	_CITRNegative
.89b3		88		dey				dey 								; look at MSB of mantissa
.89b4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89b6		09 80		ora #$80			ora 	#$80
.89b8		91 36		sta ($36),y			sta 	(zTemp0),y
.89ba		7a		ply				ply
.89bb		60		rts				rts
.89bc						_CITRNormal:
.89bc		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89be		91 36		sta ($36),y			sta 	(zTemp0),y
.89c0		c8		iny				iny
.89c1		ca		dex				dex
.89c2		d0 f8		bne $89bc			bne 	_CITRNormal
.89c4		7a		ply				ply 								; and exit.
.89c5		60		rts				rts
.89c6						NextCommand:
.89c6		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.89c8		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.89ca		20 7a b7	jsr $b77a			jsr 	StackCheckFrame
.89cd		5a		phy				phy
.89ce		a0 10		ldy #$10			ldy 	#16 						; get the step count
.89d0		b1 34		lda ($34),y			lda 	(basicStack),y
.89d2		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.89d4		30 02		bmi $89d8			bmi 	_NCStepNeg
.89d6		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.89d8						_NCStepNeg:
.89d8		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.89da		a2 04		ldx #$04			ldx 	#4 							; count to bump
.89dc		18		clc				clc
.89dd						_NCBump:
.89dd		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.89df		91 34		sta ($34),y			sta 	(basicStack),y
.89e1		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.89e3		c8		iny				iny 								; next byte
.89e4		ca		dex				dex 								; do four times
.89e5		d0 f6		bne $89dd			bne 	_NCBump
.89e7		20 8c 89	jsr $898c			jsr		CopyIndexToReference		; copy it to the reference variable.
.89ea		a0 10		ldy #$10			ldy 	#16 						; get step count again
.89ec		b1 34		lda ($34),y			lda 	(basicStack),y
.89ee		0a		asl a				asl 	a 							; sign bit to carry
.89ef		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.89f1		85 38		sta $38				sta 	zTemp1
.89f3		90 02		bcc $89f7			bcc 	_NCCompRev 					; use if step is +ve
.89f5		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.89f7						_NCCompRev:
.89f7		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.89f9		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.89fb		85 39		sta $39				sta 	zTemp1+1
.89fd		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.89ff		38		sec				sec
.8a00						_NCCompare:
.8a00		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a02		b1 34		lda ($34),y			lda 	(basicStack),y
.8a04		a4 39		ldy $39				ldy 	zTemp1+1
.8a06		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a08		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a0a		e6 39		inc $39				inc 	zTemp1+1
.8a0c		ca		dex				dex 								; do it 4 times.
.8a0d		d0 f1		bne $8a00			bne 	_NCCompare
.8a0f		50 02		bvc $8a13			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a11		49 80		eor #$80			eor 	#$80
.8a13						_NCNoOverflow:
.8a13		7a		ply				ply 								; restore Y position
.8a14		0a		asl a				asl 	a 							; is bit 7 set.
.8a15		90 04		bcc $8a1b			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a17		20 6c b7	jsr $b76c			jsr 	StackClose 					; exit the loop
.8a1a		60		rts				rts
.8a1b						_NCLoopBack:
.8a1b		20 a3 b7	jsr $b7a3			jsr 	STKLoadCodePosition 		; loop back
.8a1e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a1f						Command_GOSUB:
.8a1f		a2 00		ldx #$00			ldx 	#0
.8a21		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a24		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a26		20 4d b7	jsr $b74d			jsr 	StackOpen 					; create frame
.8a29		20 92 b7	jsr $b792			jsr 	STKSaveCodePosition 		; save current position
.8a2c		4c 42 8a	jmp $8a42			jmp 	GotoStackX
.8a2f						Command_RETURN:
.8a2f		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a31		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a33		20 7a b7	jsr $b77a			jsr 	StackCheckFrame
.8a36		20 a3 b7	jsr $b7a3			jsr 	STKLoadCodePosition 		; restore code position
.8a39		20 6c b7	jsr $b76c			jsr 	StackClose
.8a3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a3d						GotoCommand:
.8a3d		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a3f		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.8a42						GotoStackX:
.8a42		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a44		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a45		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a47		fa		plx				plx
.8a48		20 f9 ad	jsr $adf9			jsr 	MemorySearch 				; transfer to line number AX.
.8a4b		90 05		bcc $8a52			bcc 	_GotoError 					; not found, off end.
.8a4d		d0 03		bne $8a52			bne 	_GotoError 					; not found exactly
.8a4f		4c 03 91	jmp $9103			jmp 	RunNewLine 					; and go straight to new line code.
.8a52						_GotoError:
.8a52		a9 0d		lda #$0d		lda	#13
.8a54		4c 01 96	jmp $9601		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a57						IfCommand:
.8a57		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a59		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber
.8a5c		b1 30		lda ($30),y			lda 	(codePtr),y
.8a5e		c9 b4		cmp #$b4			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a60		d0 0a		bne $8a6c			bne 	_IfStructured 				; we still support it.
.8a62		c8		iny				iny 								; consume THEN
.8a63		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; is it zero
.8a66		f0 01		beq $8a69			beq 	_IfFail 					; if fail, go to next line
.8a68		60		rts				rts 								; if THEN just continue
.8a69						_IfFail:
.8a69		4c eb 90	jmp $90eb			jmp 	EOLCommand
.8a6c						_IfStructured:
.8a6c		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; is it zero
.8a6f		d0 07		bne $8a78			bne 	_IfExit 					; if not, then continue normally.
.8a71		a9 c1		lda #$c1			lda 	#KWD_ELSE 					; look for else/endif
.8a73		a2 b1		ldx #$b1			ldx 	#KWD_ENDIF
.8a75		20 e9 94	jsr $94e9			jsr 	ScanForward 				; and run from there
.8a78						_IfExit:
.8a78		60		rts				rts
.8a79						ElseCode:
.8a79		a9 b1		lda #$b1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8a7b		aa		tax				tax 								; so just go to the structure exit
.8a7c		20 e9 94	jsr $94e9			jsr 	ScanForward
.8a7f		60		rts				rts
.8a80						EndIf:
.8a80		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8a81						Command_Input:
.8a81		9c 24 04	stz $0424			stz 	isPrintFlag
.8a84		80 0c		bra $8a92			bra 	Command_IP_Main
.8a86						Command_CPrint:
.8a86		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8a88		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8a8b		80 05		bra $8a92			bra 	Command_IP_Main
.8a8d						Command_Print:
.8a8d		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8a8f		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8a92						Command_IP_Main:
.8a92		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8a93						_CPLoop:
.8a93		08		php				php 								; save last action flag
.8a94		b1 30		lda ($30),y			lda 	(codePtr),y
.8a96		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8a98		f0 54		beq $8aee			beq 	_CPExit
.8a9a		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8a9c		f0 50		beq $8aee			beq 	_CPExit
.8a9e		68		pla				pla 								; throw last action flag
.8a9f		b1 30		lda ($30),y			lda 	(codePtr),y
.8aa1		c8		iny				iny
.8aa2		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8aa4		f0 45		beq $8aeb			beq 	_CPContinueWithSameLine
.8aa6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8aa8		f0 3c		beq $8ae6			beq 	_CPTab
.8aaa		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8aac		f0 34		beq $8ae2			beq 	_CPNewLine
.8aae		88		dey				dey 								; undo the get.
.8aaf		20 03 9b	jsr $9b03			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8ab2		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8ab4		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8ab6		f0 0d		beq $8ac5			beq 	_CPIsValue 					; no, display it.
.8ab8		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8abb		d0 05		bne $8ac2			bne 	_CPIsPrint 					; otherwise display.
.8abd		20 f7 8a	jsr $8af7			jsr 	CIInputValue 				; input a value to the reference
.8ac0		80 20		bra $8ae2			bra 	_CPNewLine
.8ac2						_CPIsPrint:
.8ac2		20 c8 9d	jsr $9dc8			jsr 	Dereference 				; dereference if required.
.8ac5						_CPIsValue:
.8ac5		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8ac7		29 10		and #$10			and 	#NSBIsString
.8ac9		f0 09		beq $8ad4			beq 	_CPNumber
.8acb		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8acd		a5 58		lda $58				lda 	NSMantissa0
.8acf		20 5a 8b	jsr $8b5a			jsr 	CPPrintStringXA
.8ad2		80 be		bra $8a92			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8ad4						_CPNumber:
.8ad4		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8ad6		20 a3 a4	jsr $a4a3			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8ad9		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8adb		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8add		20 5a 8b	jsr $8b5a			jsr 	CPPrintStringXA 			; print it.
.8ae0		80 b0		bra $8a92			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8ae2						_CPNewLine:
.8ae2		a9 0d		lda #$0d			lda 	#13
.8ae4		80 02		bra $8ae8			bra 	_CPPrintCharDirect
.8ae6						_CPTab:
.8ae6		a9 09		lda #$09			lda 	#9 							; print TAB
.8ae8						_CPPrintCharDirect:
.8ae8		20 75 8b	jsr $8b75			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8aeb						_CPContinueWithSameLine:
.8aeb		38		sec				sec 								; loop round with carry set, which
.8aec		80 a5		bra $8a93			bra 	_CPLoop 					; will inhibit final CR
.8aee						_CPExit:
.8aee		28		plp				plp 								; get last action flag
.8aef		b0 05		bcs $8af6			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8af1		a9 0d		lda #$0d			lda 	#13 						; print new line
.8af3		20 75 8b	jsr $8b75			jsr 	CPPVControl
.8af6						_CPExit2:
.8af6		60		rts				rts
.8af7						CIInputValue:
.8af7		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8af9						_CIInputLine:
.8af9		20 78 8b	jsr $8b78			jsr 	CPInputVector 				; get key
.8afc		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8afe		f0 1f		beq $8b1f			beq 	_CIHaveValue
.8b00		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b02		f0 11		beq $8b15			beq 	_CIBackspace
.8b04		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b06		90 f1		bcc $8af9			bcc 	_CIInputLine
.8b08		e0 50		cpx #$50			cpx 	#80 						; max length
.8b0a		b0 ed		bcs $8af9			bcs 	_CIInputLine
.8b0c		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b0f		e8		inx				inx
.8b10		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b13		80 e4		bra $8af9			bra 	_CIInputLine
.8b15						_CIBackspace:
.8b15		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b17		f0 e0		beq $8af9			beq 	_CIInputLine
.8b19		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b1c		ca		dex				dex
.8b1d		80 da		bra $8af9			bra 	_CIInputLine
.8b1f						_CIHaveValue:
.8b1f		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b22		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b24		29 10		and #$10			and 	#NSBIsString
.8b26		f0 17		beq $8b3f			beq 	_CIAssignNumber 			; assign a number
.8b28		a2 01		ldx #$01			ldx 	#1
.8b2a		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b2c		95 58		sta $58,x			sta 	NSMantissa0,x
.8b2e		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b30		95 60		sta $60,x			sta 	NSMantissa1,x
.8b32		74 68		stz $68,x			stz 	NSMantissa2,x
.8b34		74 70		stz $70,x			stz 	NSMantissa3,x
.8b36		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b38		95 50		sta $50,x			sta  	NSStatus,x
.8b3a		ca		dex				dex 								; X = 0
.8b3b		20 b4 8b	jsr $8bb4			jsr 	AssignVariable
.8b3e		60		rts				rts
.8b3f						_CIAssignNumber:
.8b3f		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b41		85 36		sta $36				sta 	zTemp0
.8b43		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b45		85 37		sta $37				sta 	zTemp0+1
.8b47		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b49		20 e5 a2	jsr $a2e5			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b4c		90 07		bcc $8b55			bcc 	_CIIsOkay
.8b4e		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b50		20 6d 8b	jsr $8b6d			jsr 	CPPrintVector
.8b53		80 a2		bra $8af7			bra 	CIInputValue
.8b55						_CIIsOkay:
.8b55		ca		dex				dex 								; X = 0
.8b56		20 b4 8b	jsr $8bb4			jsr 	AssignVariable
.8b59		60		rts				rts
.8b5a						CPPrintStringXA:
.8b5a		5a		phy				phy
.8b5b		86 37		stx $37				stx 	zTemp0+1
.8b5d		85 36		sta $36				sta 	zTemp0
.8b5f		a0 00		ldy #$00			ldy 	#0
.8b61						_PSXALoop:
.8b61		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b63		f0 06		beq $8b6b			beq 	_PSXAExit
.8b65		20 6d 8b	jsr $8b6d			jsr 	CPPrintVector
.8b68		c8		iny				iny
.8b69		80 f6		bra $8b61			bra 	_PSXALoop
.8b6b						_PSXAExit:
.8b6b		7a		ply				ply
.8b6c		60		rts				rts
.8b6d						CPPrintVector:
.8b6d		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8b70		30 03		bmi $8b75			bmi 	CPPVControl
.8b72		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8b75						CPPVControl:
.8b75		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8b78						CPInputVector:
.8b78		4c 2b 80	jmp $802b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b7b						LetCommand:
.8b7b		a2 00		ldx #$00			ldx 	#0
.8b7d		b1 30		lda ($30),y			lda 	(codePtr),y
.8b7f		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8b81		d0 14		bne $8b97			bne 	_LCStandard
.8b83		c8		iny				iny 								; skip equal
.8b84		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8b87		20 c8 9d	jsr $9dc8			jsr 	Dereference 				; dereference it to a value
.8b8a		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8b8c		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b8e		95 50		sta $50,x			sta 	NSStatus,x
.8b90		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b92		d0 0f		bne $8ba3			bne 	_LCMain
.8b94		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; was a reference before.
.8b97						_LCStandard:
.8b97		ad ed 9a	lda $9aed			lda 	PrecedenceLevel+"*"			; precedence > this
.8b9a		20 07 9b	jsr $9b07			jsr 	EvaluateExpressionAtPrecedence
.8b9d		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8b9f		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8ba1		f0 0e		beq $8bb1			beq 	_LetGoProc 					; it's a procedure call.
.8ba3						_LCMain:
.8ba3		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8ba5		20 f8 95	jsr $95f8			jsr 	CheckNextA
.8ba8		e8		inx				inx 								; RHS
.8ba9		20 b3 a5	jsr $a5b3			jsr 	EvaluateValue
.8bac		ca		dex				dex
.8bad		20 b4 8b	jsr $8bb4			jsr 	AssignVariable
.8bb0		60		rts				rts
.8bb1						_LetGoProc:
.8bb1		4c c1 8f	jmp $8fc1			jmp 	CallProcedure
.8bb4						AssignVariable:
.8bb4		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bb6		48		pha				pha 								; save a copy
.8bb7		55 51		eor $51,x			eor 	NSStatus+1,x
.8bb9		29 10		and #$10			and 	#NSBIsString
.8bbb		d0 0b		bne $8bc8			bne 	_ASError
.8bbd		68		pla				pla 								; get back
.8bbe		29 10		and #$10			and 	#NSBIsString 				; check type
.8bc0		d0 03		bne $8bc5			bne 	_ASString
.8bc2		4c 06 9d	jmp $9d06			jmp 	AssignNumber
.8bc5						_ASString:
.8bc5		4c 64 9d	jmp $9d64			jmp 	AssignString
.8bc8						_ASError:
.8bc8		4c f6 a7	jmp $a7f6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bcb						Command_List:
.8bcb		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8bce		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8bd0		20 3f 80	jsr $803f			jsr 	SNDCommand
.8bd3		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd5		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8bd7		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8bd9		f0 72		beq $8c4d			beq 	_CLListProcedure
.8bdb		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8bdd		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8bdf		a9 ff		lda #$ff			lda 	#$FF
.8be1		85 5f		sta $5f				sta 	NSMantissa0+7
.8be3		85 67		sta $67				sta 	NSMantissa1+7
.8be5		b1 30		lda ($30),y			lda 	(codePtr),y
.8be7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8be9		f0 1a		beq $8c05			beq 	_CLSecond
.8beb		20 ca 8c	jsr $8cca			jsr 	CLIsDigit 					; if not digit, list all
.8bee		b0 20		bcs $8c10			bcs 	_CLStart
.8bf0		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8bf2		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.8bf5		b1 30		lda ($30),y			lda 	(codePtr),y
.8bf7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bf9		f0 0a		beq $8c05			beq 	_CLSecond 					; if so go get it
.8bfb		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8bfd		85 5f		sta $5f				sta 	NSMantissa0+7
.8bff		a5 64		lda $64				lda 	NSMantissa1+4
.8c01		85 67		sta $67				sta 	NSMantissa1+7
.8c03		80 0b		bra $8c10			bra 	_CLStart
.8c05						_CLSecond:
.8c05		c8		iny				iny 								; consume comma
.8c06		20 ca 8c	jsr $8cca			jsr 	CLIsDigit 					; digit found
.8c09		b0 05		bcs $8c10			bcs 	_CLStart 					; if not, continue listing
.8c0b		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c0d		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.8c10						_CLStart
.8c10		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c12		85 30		sta $30				sta 	codePtr
.8c14		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c16		85 31		sta $31				sta 	codePtr+1
.8c18						_CLLoop:
.8c18		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c1a		f0 03		beq $8c1f			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c1c		20 e2 80	jsr $80e2			jsr 	ProcessEvents
.8c1f						_NoEvents:
.8c1f		d0 27		bne $8c48			bne 	_CLBreak
.8c21		b2 30		lda ($30)			lda 	(codePtr)
.8c23		f0 20		beq $8c45			beq 	_CLExit
.8c25		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c27		20 b9 8c	jsr $8cb9			jsr 	CLCompareLineNo
.8c2a		90 0c		bcc $8c38			bcc 	_CLNext
.8c2c		a2 07		ldx #$07			ldx 	#7
.8c2e		20 b9 8c	jsr $8cb9			jsr 	CLCompareLineNo
.8c31		f0 02		beq $8c35			beq 	_CLDoThisOne
.8c33		b0 03		bcs $8c38			bcs 	_CLNext
.8c35						_CLDoThisOne:
.8c35		20 a6 8c	jsr $8ca6			jsr 	CLListOneLine 				; routine to list the current line.
.8c38						_CLNext:
.8c38		18		clc				clc
.8c39		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c3b		65 30		adc $30				adc 	codePtr
.8c3d		85 30		sta $30				sta 	codePtr
.8c3f		90 02		bcc $8c43			bcc 	_CREExit
.8c41		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c43						_CREExit:
.8c43		80 d3		bra $8c18			bra 	_CLLoop
.8c45						_CLExit:
.8c45		4c 5a 85	jmp $855a			jmp 	WarmStart
.8c48						_CLBreak:
.8c48		a9 01		lda #$01		lda	#1
.8c4a		4c 01 96	jmp $9601		jmp	ErrorHandler
.8c4d						_CLListProcedure:
.8c4d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c4f		85 38		sta $38				sta 	zTemp1
.8c51		c8		iny				iny
.8c52		b1 30		lda ($30),y			lda 	(codePtr),y
.8c54		85 39		sta $39				sta 	zTemp1+1
.8c56		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c58		85 30		sta $30				sta 	codePtr
.8c5a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c5c		85 31		sta $31				sta 	codePtr+1
.8c5e						_CLLPSearch:
.8c5e		b2 30		lda ($30)			lda 	(codePtr)
.8c60		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c62		f0 e1		beq $8c45			beq 	_CLExit
.8c64		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c66		b1 30		lda ($30),y			lda 	(codePtr),y
.8c68		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.8c6a		d0 0e		bne $8c7a			bne 	_CLLPNext
.8c6c		c8		iny				iny 								; check if PROC this.
.8c6d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c6f		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8c71		d0 07		bne $8c7a			bne 	_CLLPNext
.8c73		c8		iny				iny
.8c74		b1 30		lda ($30),y			lda 	(codePtr),y
.8c76		c5 39		cmp $39				cmp 	zTemp1+1
.8c78		f0 0d		beq $8c87			beq 	_CLLPFound
.8c7a						_CLLPNext:
.8c7a		18		clc				clc
.8c7b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c7d		65 30		adc $30				adc 	codePtr
.8c7f		85 30		sta $30				sta 	codePtr
.8c81		90 02		bcc $8c85			bcc 	_CREExit
.8c83		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c85						_CREExit:
.8c85		80 d7		bra $8c5e			bra 	_CLLPSearch
.8c87						_CLLPFound:
.8c87		b2 30		lda ($30)			lda 	(codePtr)
.8c89		f0 ba		beq $8c45			beq 	_CLExit
.8c8b		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8c8d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8f		48		pha				pha
.8c90		20 a6 8c	jsr $8ca6			jsr 	CLListOneLine 				; list line and go forward
.8c93		18		clc				clc
.8c94		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c96		65 30		adc $30				adc 	codePtr
.8c98		85 30		sta $30				sta 	codePtr
.8c9a		90 02		bcc $8c9e			bcc 	_CREExit
.8c9c		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c9e						_CREExit:
.8c9e		68		pla				pla 								; reached ENDPROC ?
.8c9f		c9 b2		cmp #$b2			cmp 	#KWD_ENDPROC
.8ca1		d0 e4		bne $8c87			bne 	_CLLPFound
.8ca3		4c 5a 85	jmp $855a			jmp 	WarmStart
.8ca6						CLListOneLine:
.8ca6		20 4c 95	jsr $954c			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8ca9		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.8cac		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8cae		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8cb0		20 5a 96	jsr $965a			jsr 	PrintStringXA
.8cb3		a9 0d		lda #$0d			lda 	#13 						; new line
.8cb5		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8cb8		60		rts				rts
.8cb9						CLCompareLineNo:
.8cb9		38		sec				sec
.8cba		a0 01		ldy #$01			ldy 	#1
.8cbc		b1 30		lda ($30),y			lda 	(codePtr),y
.8cbe		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8cc0		85 36		sta $36				sta 	zTemp0
.8cc2		c8		iny				iny
.8cc3		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc5		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8cc7		05 36		ora $36				ora 	zTemp0
.8cc9		60		rts				rts
.8cca						CLIsDigit:
.8cca		b1 30		lda ($30),y			lda 	(codePtr),y
.8ccc		c9 30		cmp #$30			cmp 	#"0"
.8cce		90 03		bcc $8cd3			bcc	 	_CLIDExitFalse
.8cd0		c9 3a		cmp #$3a			cmp 	#"9"+1
.8cd2		60		rts				rts
.8cd3						_CLIDExitFalse:
.8cd3		38		sec				sec
.8cd4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8cd5						Command_Load:
.8cd5		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; file name to load
.8cd8		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8cda		a5 36		lda $36				lda 	zTemp0
.8cdc		20 3a 81	jsr $813a			jsr 	KNLOpenFileRead 			; open file for reading
.8cdf		b0 44		bcs $8d25			bcs 	CLErrorHandler 				; error, so fail.
.8ce1		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.8ce4		20 75 8d	jsr $8d75			jsr     LoadReadByteInit            ; Init reader with the stream
.8ce7		20 7a 8f	jsr $8f7a			jsr 	NewProgram 					; does the actual NEW.
.8cea		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.8ced						_CLLoop:
.8ced		20 33 8d	jsr $8d33			jsr 	LoadReadLine 				; get next line.
.8cf0		f0 10		beq $8d02			beq 	_CLExit 					; end, exit.
.8cf2		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8cf5		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8cf8		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8cfb		f0 f0		beq $8ced			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8cfd		20 35 85	jsr $8535			jsr 	EditProgramCode 			; do the editing etc.
.8d00		80 eb		bra $8ced			bra 	_CLLoop
.8d02						_CLExit:
.8d02		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d05		20 04 82	jsr $8204			jsr 	KNLCloseFile
.8d08						CLComplete:
.8d08		a9 12		lda #$12			lda 	#_CLCMsg & $FF
.8d0a		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d0c		20 5a 96	jsr $965a			jsr 	PrintStringXA
.8d0f		4c 5a 85	jmp $855a			jmp 	WarmStart
.8d12						_CLCMsg:
>8d12		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d1a		2e 0d 00
.8d1d						CLCloseError:
.8d1d		48		pha				pha
.8d1e		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d21		20 04 82	jsr $8204			jsr 	KNLCloseFile
.8d24		68		pla				pla
.8d25						CLErrorHandler:
.8d25		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d27		f0 05		beq $8d2e			beq 	_CLEHNotFound
.8d29		a9 1a		lda #$1a		lda	#26
.8d2b		4c 01 96	jmp $9601		jmp	ErrorHandler
.8d2e						_CLEHNotFound:
.8d2e		a9 19		lda #$19		lda	#25
.8d30		4c 01 96	jmp $9601		jmp	ErrorHandler
.8d33						LoadReadLine:
.8d33		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8d35		20 4f 8d	jsr $8d4f			jsr 	LoadReadCharacter
.8d38		f0 14		beq $8d4e			beq 	_LRLExit 					; eof ?
.8d3a		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8d3c		90 f5		bcc $8d33			bcc 	LoadReadLine
.8d3e						_LRLLoop:
.8d3e		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8d41		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8d44		e8		inx				inx
.8d45		20 4f 8d	jsr $8d4f			jsr 	LoadReadCharacter 			; next line
.8d48		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8d4a		b0 f2		bcs $8d3e			bcs 	_LRLLoop
.8d4c		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8d4e						_LRLExit:
.8d4e		60		rts				rts
.8d4f						LoadReadCharacter:
.8d4f		da		phx				phx
.8d50		5a		phy				phy
.8d51		ad 6c 07	lda $076c			lda 	LoadEOFFlag 				; already done EOF.
.8d54		d0 0c		bne $8d62			bne 	_LRCIsEOF
.8d56		20 7f 8d	jsr $8d7f			jsr 	LoadReadByte 				; read a byte
.8d59		90 09		bcc $8d64			bcc		_LRCExit 					; read okay.
.8d5b		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8d5d		d0 be		bne $8d1d			bne 	CLCloseError
.8d5f		ce 6c 07	dec $076c			dec 	LoadEOFFlag
.8d62						_LRCIsEOF:
.8d62		a9 00		lda #$00			lda 	#0
.8d64						_LRCExit:
.8d64		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8d66		d0 02		bne $8d6a			bne 	_LRCNotTab
.8d68		a9 20		lda #$20			lda 	#' '
.8d6a						_LRCNotTab:
.8d6a		c9 0a		cmp #$0a			cmp 	#$0A
.8d6c		d0 02		bne $8d70			bne 	_LRCNotLF
.8d6e		a9 0d		lda #$0d			lda 	#$0D
.8d70						_LRCNotLF:
.8d70		7a		ply				ply
.8d71		fa		plx				plx
.8d72		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8d74		60		rts				rts
.8d75						LoadReadByteInit:
.8d75		8d 6e 07	sta $076e			sta     LoadFileStream 				; save stream
.8d78		9c 6f 07	stz $076f			stz     LoadNextCharacter 			; reset buffer
.8d7b		9c 70 07	stz $0770			stz     LoadEndCharacter
.8d7e		60		rts				rts
.8d7f						LoadReadByte:
.8d7f		da		phx				phx
.8d80		ae 6f 07	ldx $076f			ldx     LoadNextCharacter 					; all data consumed ?
.8d83		ec 70 07	cpx $0770			cpx     LoadEndCharacter
.8d86		d0 12		bne $8d9a			bne     _KNLRBGetNextByte
.8d88		ad 6e 07	lda $076e			lda     LoadFileStream
.8d8b		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8d8d		20 8f 81	jsr $818f			jsr     KNLReadBlock 				; read next chunk from the stream
.8d90		b0 0f		bcs $8da1			bcs     _KNLRBError 				; error has occurred on read.
.8d92		8d 70 07	sta $0770			sta     LoadEndCharacter 						; # read is the number available
.8d95		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8d97		8e 6f 07	stx $076f			stx     LoadNextCharacter
.8d9a						_KNLRBGetNextByte:
.8d9a		bd 5e 06	lda $065e,x			lda     KNLReadBuffer,x 			; get the next data item
.8d9d		ee 6f 07	inc $076f			inc     LoadNextCharacter 					; and advance the index
.8da0		18		clc				clc 								; succeeded
.8da1						_KNLRBError:
.8da1		fa		plx				plx
.8da2		60		rts				rts
.076c						LoadEOFFlag:
>076c								.fill 	1
.076d						BasicFileStream:
>076d								.fill 	1
.076e						LoadFileStream:
>076e								.byte   ?
.076f						LoadNextCharacter:
>076f								.byte   ?
.0770						LoadEndCharacter:
>0770								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8da3						Command_LOCAL:
.8da3		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8da5		20 b1 8d	jsr $8db1			jsr 	LocaliseNextTerm 			; convert term to a local.
.8da8		b1 30		lda ($30),y			lda 	(codePtr),y
.8daa		c8		iny				iny
.8dab		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dad		f0 f4		beq $8da3			beq 	Command_LOCAL 				; if so, localise another variable.
.8daf		88		dey				dey 								; unpick pre-get
.8db0		60		rts				rts
.8db1						LocaliseNextTerm:
.8db1		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm 				; evaluate the term
.8db4		b5 50		lda $50,x			lda 	NSStatus,x
.8db6		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8db8		f0 5c		beq $8e16			beq		_LNTError
.8dba		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8dbc		85 36		sta $36				sta 	zTemp0
.8dbe		b5 60		lda $60,x			lda 	NSMantissa1,x
.8dc0		85 37		sta $37				sta  	zTemp0+1
.8dc2		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8dc4		29 10		and #$10			and 	#NSBIsString
.8dc6		d0 1e		bne $8de6			bne 	_LNTPushString
.8dc8		5a		phy				phy
.8dc9		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8dcb						_LNTPushNumLoop:
.8dcb		b1 36		lda ($36),y			lda		(zTemp0),y
.8dcd		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8dd0		c8		iny				iny
.8dd1		c0 05		cpy #$05			cpy 	#5
.8dd3		d0 f6		bne $8dcb			bne 	_LNTPushNumLoop
.8dd5		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8dd7		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8dda		a5 37		lda $37				lda 	zTemp0+1
.8ddc		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8ddf		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8de1		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8de4		7a		ply				ply
.8de5		60		rts				rts
.8de6						_LNTPushString:
.8de6		5a		phy				phy
.8de7		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8de9		85 38		sta $38				sta 	zTemp1
.8deb		a0 01		ldy #$01			ldy 	#1
.8ded		b1 36		lda ($36),y			lda 	(zTemp0),y
.8def		85 39		sta $39				sta 	zTemp1+1
.8df1		a0 00		ldy #$00			ldy 	#0 							; output string
.8df3		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8df5		f0 0a		beq $8e01			beq 	_LNTStringOut
.8df7						_LNTPushStrLoop:
.8df7		b1 38		lda ($38),y			lda 	(zTemp1),y
.8df9		f0 06		beq $8e01			beq 	_LNTStringOut
.8dfb		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8dfe		c8		iny				iny
.8dff		80 f6		bra $8df7			bra 	_LNTPushStrLoop
.8e01						_LNTStringOut:
.8e01		98		tya				tya									; output length (chars written).
.8e02		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8e05		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e07		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8e0a		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e0c		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8e0f		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e11		20 2c b7	jsr $b72c			jsr 	StackPushByte
.8e14		7a		ply				ply
.8e15		60		rts				rts
.8e16						_LNTError:
.8e16		4c ec a7	jmp $a7ec			jmp 	SyntaxError
.8e19						LocalPopValue:
.8e19		20 44 b7	jsr $b744			jsr 	StackPopByte
.8e1c		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e1e		d0 17		bne $8e37			bne 	_LPVString
.8e20		20 44 b7	jsr $b744			jsr 	StackPopByte 				; address
.8e23		85 37		sta $37				sta 	zTemp0+1
.8e25		20 44 b7	jsr $b744			jsr 	StackPopByte
.8e28		85 36		sta $36				sta 	zTemp0
.8e2a		5a		phy				phy
.8e2b		a0 04		ldy #$04			ldy 	#4 							; copy back
.8e2d						_LPVNumberCopy:
.8e2d		20 44 b7	jsr $b744			jsr 	StackPopByte
.8e30		91 36		sta ($36),y			sta 	(zTemp0),y
.8e32		88		dey				dey
.8e33		10 f8		bpl $8e2d			bpl 	_LPVNumberCopy
.8e35		7a		ply				ply 								; and complete
.8e36		60		rts				rts
.8e37						_LPVString:
.8e37		20 44 b7	jsr $b744			jsr 	StackPopByte 				; address of record copied to zTemp0
.8e3a		85 37		sta $37				sta 	zTemp0+1
.8e3c		20 44 b7	jsr $b744			jsr 	StackPopByte
.8e3f		85 36		sta $36				sta 	zTemp0
.8e41		5a		phy				phy
.8e42		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8e44		85 38		sta $38				sta 	zTemp1
.8e46		a0 01		ldy #$01			ldy 	#1
.8e48		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e4a		85 39		sta $39				sta 	zTemp1+1
.8e4c		20 44 b7	jsr $b744			jsr 	StackPopByte 				; # chars to get => y
.8e4f		a8		tay				tay
.8e50		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8e52		f0 0e		beq $8e62			beq 	_LPVStringCopied
.8e54		a9 00		lda #$00			lda 	#0 							; NULL on end
.8e56		91 38		sta ($38),y			sta 	(zTemp1),y
.8e58						_LPVStringCopy:
.8e58		88		dey				dey
.8e59		30 07		bmi $8e62			bmi 	_LPVStringCopied
.8e5b		20 44 b7	jsr $b744			jsr 	StackPopByte
.8e5e		91 38		sta ($38),y			sta 	(zTemp1),y
.8e60		80 f6		bra $8e58			bra 	_LPVStringCopy
.8e62						_LPVStringCopied:
.8e62		fa		plx				plx
.8e63		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/memcopy.asm

.8e64						MCCommand:
.8e64		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.8e66		48		pha				pha
.8e67		64 01		stz $01				stz 	1
.8e69		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.8e6c		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.8e6e		8d 71 07	sta $0771			sta 	DMAControlByte
.8e71		20 1f 8f	jsr $8f1f			jsr 	MCPosition 					; start position
.8e74		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.8e76		20 f0 8e	jsr $8ef0			jsr 	MCCopyAddress
.8e79		a2 08		ldx #$08			ldx 	#8
.8e7b		20 f0 8e	jsr $8ef0			jsr 	MCCopyAddress
.8e7e		b1 30		lda ($30),y			lda 	(codePtr),y
.8e80		c8		iny				iny
.8e81		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.8e83		f0 09		beq $8e8e			beq 	_MCSize1D
.8e85		c9 d4		cmp #$d4			cmp 	#KWD_RECT 					; RECT <x>,<y>
.8e87		f0 11		beq $8e9a			beq 	_MCRect2D
.8e89						_MCSyntax:
.8e89		a9 02		lda #$02		lda	#2
.8e8b		4c 01 96	jmp $9601		jmp	ErrorHandler
.8e8e						_MCSize1D:
.8e8e		a2 00		ldx #$00			ldx 	#0 							; get size
.8e90		20 db a5	jsr $a5db			jsr 	EvaluateInteger
.8e93		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.8e95		20 f0 8e	jsr $8ef0			jsr 	MCCopyAddress
.8e98		80 24		bra $8ebe			bra 	_MCDestination
.8e9a						_MCRect2D:
.8e9a		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.8e9c		20 0d 8f	jsr $8f0d			jsr 	MCEvalCopyData16
.8e9f		20 f0 95	jsr $95f0			jsr 	CheckComma
.8ea2		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.8ea4		20 0d 8f	jsr $8f0d			jsr 	MCEvalCopyData16
.8ea7		a9 b8		lda #$b8			lda 	#KWD_BY 					; BY keyword.
.8ea9		20 f8 95	jsr $95f8			jsr 	CheckNextA
.8eac		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.8eae		20 0d 8f	jsr $8f0d			jsr 	MCEvalCopyData16
.8eb1		a2 12		ldx #$12			ldx 	#$12
.8eb3		20 14 8f	jsr $8f14			jsr 	MCCopyData16
.8eb6		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.8eb9		09 02		ora #$02			ora 	#$02
.8ebb		8d 71 07	sta $0771			sta 	DMAControlByte
.8ebe						_MCDestination:
.8ebe		b1 30		lda ($30),y			lda 	(codePtr),y
.8ec0		c8		iny				iny
.8ec1		c9 cf		cmp #$cf			cmp 	#KWD_POKE 					; is it POKE n
.8ec3		f0 0e		beq $8ed3			beq 	_MCDestPoke
.8ec5		c9 da		cmp #$da			cmp 	#KWD_TO 					; is it TO n
.8ec7		d0 c0		bne $8e89			bne 	_MCSyntax
.8ec9		20 1f 8f	jsr $8f1f			jsr 	MCPosition 					; get target address
.8ecc		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.8ece		20 f0 8e	jsr $8ef0			jsr 	MCCopyAddress
.8ed1		80 0e		bra $8ee1			bra 	_MCDoDMA 					; and we can go.
.8ed3						_MCDestPoke:
.8ed3		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; POKE what
.8ed6		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.8ed9		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.8edc		09 04		ora #$04			ora 	#$04
.8ede		8d 71 07	sta $0771			sta 	DMAControlByte
.8ee1						_MCDoDMA:
.8ee1		ad 71 07	lda $0771			lda 	DMAControlByte 				; set the DMA Control byte to go !
.8ee4		8d 00 df	sta $df00			sta 	$DF00
.8ee7						_MCWaitBUSD:
.8ee7		ad 01 df	lda $df01			lda 	$DF01
.8eea		30 fb		bmi $8ee7			bmi 	_MCWaitBUSD
.8eec		68		pla				pla 								; restore I/O.
.8eed		85 01		sta $01				sta 	1
.8eef		60		rts				rts
.8ef0						MCCopyAddress:
.8ef0		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.8ef2		29 fc		and #$fc			and 	#$FC
.8ef4		05 70		ora $70				ora 	NSMantissa3
.8ef6		d0 10		bne $8f08			bne 	_MCRange
.8ef8		a5 58		lda $58				lda 	NSMantissa0
.8efa		9d 00 df	sta $df00,x			sta 	$DF00,x
.8efd		a5 60		lda $60				lda 	NSMantissa1
.8eff		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f02		a5 68		lda $68				lda 	NSMantissa2
.8f04		9d 02 df	sta $df02,x			sta 	$DF02,x
.8f07		60		rts				rts
.8f08						_MCRange:
.8f08		a9 04		lda #$04		lda	#4
.8f0a		4c 01 96	jmp $9601		jmp	ErrorHandler
.8f0d						MCEvalCopyData16:
.8f0d		da		phx				phx
.8f0e		a2 00		ldx #$00			ldx 	#0
.8f10		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.8f13		fa		plx				plx
.8f14						MCCopyData16:
.8f14		a5 58		lda $58				lda 	NSMantissa0
.8f16		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f19		a5 60		lda $60				lda 	NSMantissa1
.8f1b		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f1e		60		rts				rts
.8f1f						MCPosition:
.8f1f		a2 00		ldx #$00			ldx 	#0 							; get start address.
.8f21		b1 30		lda ($30),y			lda 	(codePtr),y
.8f23		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8f25		f0 04		beq $8f2b			beq 	_MCPAt
.8f27		20 db a5	jsr $a5db			jsr 	EvaluateInteger
.8f2a		60		rts				rts
.8f2b						_MCPAt:
.8f2b		c8		iny				iny
.8f2c		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; X position
.8f2f		48		pha				pha
.8f30		20 f0 95	jsr $95f0			jsr 	CheckComma
.8f33		e8		inx				inx
.8f34		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; Y position
.8f37		ca		dex				dex
.8f38		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.8f3a		64 58		stz $58				stz 	NSMantissa0
.8f3c		64 68		stz $68				stz 	NSMantissa2
.8f3e		64 70		stz $70				stz 	NSMantissa3
.8f40		46 60		lsr $60				lsr 	NSMantissa1
.8f42		66 58		ror $58				ror 	NSMantissa0
.8f44		46 60		lsr $60				lsr 	NSMantissa1
.8f46		66 58		ror $58				ror 	NSMantissa0
.8f48		68		pla				pla
.8f49		18		clc				clc
.8f4a		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.8f4c		85 58		sta $58				sta 	NSMantissa0
.8f4e		a5 60		lda $60				lda 	NSMantissa1
.8f50		65 59		adc $59				adc 	NSMantissa0+1
.8f52		85 60		sta $60				sta 	NSMantissa1
.8f54		90 02		bcc $8f58			bcc 	_MCPNoCarry
.8f56		e6 68		inc $68				inc 	NSMantissa2
.8f58						_MCPNoCarry:
.8f58		ad 9b 07	lda $079b			lda 	gxBasePage
.8f5b		85 69		sta $69				sta 	NSMantissa2+1
.8f5d		64 59		stz $59				stz 	NSMantissa0+1
.8f5f		64 61		stz $61				stz 	NSMantissa1+1
.8f61		64 71		stz $71				stz 	NSMantissa3+1
.8f63		a2 01		ldx #$01			ldx 	#1
.8f65		20 87 a6	jsr $a687			jsr 	NSMShiftRight
.8f68		20 87 a6	jsr $a687			jsr 	NSMShiftRight
.8f6b		20 87 a6	jsr $a687			jsr 	NSMShiftRight
.8f6e		a2 00		ldx #$00			ldx 	#0
.8f70		20 fb 98	jsr $98fb			jsr 	AddTopTwoStack
.8f73		60		rts				rts
.0771						DMAControlByte:
>0771								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8f74						NewCommand:
.8f74		20 7a 8f	jsr $8f7a			jsr 	NewProgram 					; does the actual NEW.
.8f77		4c 5a 85	jmp $855a			jmp 	WarmStart 					; and warm starts straight away.
.8f7a						NewProgram:
.8f7a		20 db ad	jsr $addb			jsr 	MemoryNew
.8f7d		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8f80		20 12 87	jsr $8712			jsr 	ClearCommand 				; clear everything.
.8f83		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8f84						PokeBCommand:
.8f84		a9 01		lda #$01			lda 	#1
.8f86		80 0c		bra $8f94			bra 	PokeCommand
.8f88						PokeWCommand:
.8f88		a9 02		lda #$02			lda 	#2
.8f8a		80 08		bra $8f94			bra 	PokeCommand
.8f8c						PokeLCommand:
.8f8c		a9 03		lda #$03			lda 	#3
.8f8e		80 04		bra $8f94			bra 	PokeCommand
.8f90						PokeDCommand:
.8f90		a9 04		lda #$04			lda 	#4
.8f92		80 00		bra $8f94			bra 	PokeCommand
.8f94						PokeCommand:
.8f94		48		pha				pha 								; save count on stack
.8f95		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8f97		20 ee a5	jsr $a5ee			jsr		Evaluate16BitInteger 		; address
.8f9a		20 f0 95	jsr $95f0			jsr 	CheckComma
.8f9d		e8		inx				inx
.8f9e		20 db a5	jsr $a5db			jsr		EvaluateInteger 			; data
.8fa1		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8fa3		85 36		sta $36				sta 	zTemp0
.8fa5		a5 60		lda $60				lda 	NSMantissa1
.8fa7		85 37		sta $37				sta 	zTemp0+1
.8fa9		68		pla				pla 								; count -> zTemp1
.8faa		85 38		sta $38				sta 	zTemp1
.8fac		5a		phy				phy 								; save Y position.
.8fad		a0 00		ldy #$00			ldy 	#0 							; index to write
.8faf		a2 00		ldx #$00			ldx 	#0 							; index to read
.8fb1						_PCLoop:
.8fb1		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8fb3		91 36		sta ($36),y			sta 	(zTemp0),y
.8fb5		c8		iny				iny 								; next byte to write
.8fb6		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8fb7		18		clc				clc
.8fb8		69 08		adc #$08			adc 	#MathStackSize
.8fba		aa		tax				tax
.8fbb		c6 38		dec $38				dec 	zTemp1 						; done them all
.8fbd		d0 f2		bne $8fb1			bne 	_PCLoop
.8fbf		7a		ply				ply 								; restore position.
.8fc0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8fc1						CallProcedure:
.8fc1		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8fc3		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc5		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8fc7		f0 0c		beq $8fd5			beq 	_CPEndParam
.8fc9						_CPParamLoop:
.8fc9		20 b3 a5	jsr $a5b3			jsr 	EvaluateValue 				; get parameter onto stack
.8fcc		e8		inx				inx 								; bump next stack
.8fcd		b1 30		lda ($30),y			lda 	(codePtr),y
.8fcf		c8		iny				iny
.8fd0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8fd2		f0 f5		beq $8fc9			beq 	_CPParamLoop
.8fd4		88		dey				dey 								; unpick.
.8fd5						_CPEndParam:
.8fd5		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.8fd8		c8		iny				iny									; skip right bracket
.8fd9		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8fdb		20 4d b7	jsr $b74d			jsr 	StackOpen
.8fde		20 92 b7	jsr $b792			jsr 	STKSaveCodePosition 		; save loop position
.8fe1		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8fe3		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8fe5		a5 60		lda $60				lda 	NSMantissa1
.8fe7		85 37		sta $37				sta 	zTemp0+1
.8fe9		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8feb		b2 36		lda ($36)			lda 	(zTemp0)
.8fed		85 30		sta $30				sta 	safePtr
.8fef		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ff1		85 31		sta $31				sta 	safePtr+1
.8ff3		c8		iny				iny
.8ff4		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ff6		85 32		sta $32				sta 	safePtr+2
.8ff8		c8		iny				iny
.8ff9		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ffb		85 33		sta $33				sta 	safePtr+3
.8ffd		c8		iny				iny 								; get Y offset -> Y
.8ffe		b1 36		lda ($36),y			lda 	(zTemp0),y
.9000		a8		tay				tay
.9001		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9003		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9006		f0 13		beq $901b			beq 	_ParamExit 					; if so, exit.
.9008						_ParamExtract:
.9008		ca		dex				dex 								; put a local term on the level before
.9009		20 b1 8d	jsr $8db1			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.900c		20 b4 8b	jsr $8bb4			jsr 	AssignVariable 				; assign stacked value to the variable.
.900f		e8		inx				inx 								; advance to next parameter to do.
.9010		e8		inx				inx
.9011		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9014		f0 05		beq $901b			beq 	_ParamExit
.9016		20 f0 95	jsr $95f0			jsr 	CheckComma 					; comma seperating parameters
.9019		80 ed		bra $9008			bra 	_ParamExtract
.901b						_ParamExit:
.901b		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; check )
.901e		60		rts				rts 								; and continue from here
.901f						Command_ENDPROC:
.901f		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9021		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9023		20 7a b7	jsr $b77a			jsr 	StackCheckFrame
.9026		20 a3 b7	jsr $b7a3			jsr 	STKLoadCodePosition 		; restore code position
.9029		20 6c b7	jsr $b76c			jsr 	StackClose
.902c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.902d						Command_Read:
.902d		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.902f		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm
.9032		b5 50		lda $50,x			lda 	NSStatus,x
.9034		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9036		f0 4f		beq $9087			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.9038		20 d0 90	jsr $90d0			jsr 	SwapDataCodePtrs 			; swap code and data
.903b		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.903e		d0 25		bne $9065			bne 	_CRContinueData  			; forward for the next one.
.9040		b2 30		lda ($30)			lda 	(codePtr)
.9042		f0 1c		beq $9060			beq 	_CRNoData
.9044						_CRKeepSearching:
.9044		a9 be		lda #$be			lda 	#KWD_DATA 					; scan for instruction
.9046		a2 80		ldx #$80			ldx 	#KWC_EOL
.9048		20 e9 94	jsr $94e9			jsr 	ScanForward
.904b		c9 be		cmp #$be			cmp 	#KWD_DATA 					; found data ?
.904d		f0 16		beq $9065			beq 	_CRHaveData 				; found it
.904f		18		clc				clc
.9050		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9052		65 30		adc $30				adc 	codePtr
.9054		85 30		sta $30				sta 	codePtr
.9056		90 02		bcc $905a			bcc 	_CREExit
.9058		e6 31		inc $31				inc 	codePtr+1 					; carry
.905a						_CREExit:
.905a		a0 03		ldy #$03			ldy 	#3 							; start of line.
.905c		b2 30		lda ($30)			lda 	(codePtr)
.905e		d0 e4		bne $9044			bne 	_CRKeepSearching
.9060						_CRNoData:
.9060		a9 0b		lda #$0b		lda	#11
.9062		4c 01 96	jmp $9601		jmp	ErrorHandler
.9065						_CRHaveData:
.9065						_CRContinueData:
.9065		a2 01		ldx #$01			ldx 	#1
.9067		20 b3 a5	jsr $a5b3			jsr 	EvaluateValue 				; evaluate value into slot # 1
.906a		ca		dex				dex
.906b		20 b4 8b	jsr $8bb4			jsr		AssignVariable 				; do the assignment
.906e		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.9071		b1 30		lda ($30),y			lda 	(codePtr),y
.9073		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.9075		d0 04		bne $907b			bne 	_CRSwapBack
.9077		c8		iny				iny 								; consume comma
.9078		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.907b						_CRSwapBack:
.907b		20 d0 90	jsr $90d0			jsr 	SwapDataCodePtrs			; swap them back.
.907e		b1 30		lda ($30),y			lda 	(codePtr),y
.9080		c8		iny				iny
.9081		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9083		f0 a8		beq $902d			beq 	Command_Read 				; if so go round again.
.9085		88		dey				dey 								; unpick get.
.9086		60		rts				rts
.9087						_CRSyntax:
.9087		4c ec a7	jmp $a7ec			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.908a						RemCommand:
.908a		b1 30		lda ($30),y			lda 	(codePtr),y
.908c		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.908e		d0 06		bne $9096			bne 	_RMExit
.9090		c8		iny				iny 								; point to offset
.9091		98		tya				tya 								; A = offset position
.9092		38		sec				sec 								; add size +1 hence SEC
.9093		71 30		adc ($30),y			adc 	(codePtr),y
.9095		a8		tay				tay 								; make current position.
.9096						_RMExit:
.9096		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9097						Command_REPEAT:
.9097		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9099		20 4d b7	jsr $b74d			jsr 	StackOpen
.909c		20 92 b7	jsr $b792			jsr 	STKSaveCodePosition 		; save loop position
.909f		60		rts				rts
.90a0						Command_UNTIL:
.90a0		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.90a2		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.90a4		20 7a b7	jsr $b77a			jsr 	StackCheckFrame
.90a7		a2 00		ldx #$00			ldx 	#0
.90a9		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber 				; work out the number
.90ac		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; check if zero
.90af		f0 04		beq $90b5			beq 	_CULoopBack 				; if so keep looping
.90b1		20 6c b7	jsr $b76c			jsr 	StackClose		 			; return
.90b4		60		rts				rts
.90b5						_CULoopBack:
.90b5		20 a3 b7	jsr $b7a3			jsr 	STKLoadCodePosition 		; loop back
.90b8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.90b9						Command_Restore:
.90b9		20 d0 90	jsr $90d0			jsr 	SwapDataCodePtrs 			; swap code and data
.90bc		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90be		85 30		sta $30				sta 	codePtr
.90c0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90c2		85 31		sta $31				sta 	codePtr+1
.90c4		20 d0 90	jsr $90d0			jsr 	SwapDataCodePtrs 			; put them back
.90c7		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.90c9		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.90cc		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.90cf		60		rts				rts
.90d0						SwapDataCodePtrs:
.90d0		da		phx				phx
.90d1		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.90d3						_SDCPLoop:
.90d3		b5 30		lda $30,x			lda 	safePtr,x
.90d5		48		pha				pha
.90d6		bd 13 04	lda $0413,x			lda 	dataPointer,x
.90d9		95 30		sta $30,x			sta 	safePtr,x
.90db		68		pla				pla
.90dc		9d 13 04	sta $0413,x			sta 	dataPointer,x
.90df		ca		dex				dex
.90e0		10 f1		bpl $90d3			bpl 	_SDCPLoop
.90e2		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.90e5		8c 17 04	sty $0417			sty 	dataPointer+4
.90e8		a8		tay				tay
.90e9		fa		plx				plx
.90ea		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.90eb						EOLCommand:
.90eb		18		clc				clc
.90ec		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90ee		65 30		adc $30				adc 	codePtr
.90f0		85 30		sta $30				sta 	codePtr
.90f2		90 02		bcc $90f6			bcc 	_CREExit
.90f4		e6 31		inc $31				inc 	codePtr+1 					; carry
.90f6						_CREExit:
.90f6		80 0b		bra $9103			bra 	RunNewLine
.90f8						CommandRUN:
.90f8		20 12 87	jsr $8712			jsr 	ClearCommand 				; clear variable/stacks/etc.
.90fb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90fd		85 30		sta $30				sta 	codePtr
.90ff		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9101		85 31		sta $31				sta 	codePtr+1
.9103						RunNewLine:
.9103		b2 30		lda ($30)			lda 	(codePtr)
.9105		f0 74		beq $917b			beq 	CRNoProgram         		; no then END.
.9107		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9109		9a		txs				txs
.910a						RUNCodePointerLine:
.910a		a0 02		ldy #$02			ldy 	#2 							; start of program
.910c						_CRIncMainLoop:
.910c		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.910e		f0 03		beq $9113			beq 	_NoEvents					; if zero, skip with Z flag set.
.9110		20 e2 80	jsr $80e2			jsr 	ProcessEvents
.9113						_NoEvents:
.9113		d0 61		bne $9176			bne 	_CRBreak
.9115		a5 01		lda $01				lda 	1 							; save I/O 0
.9117		48		pha				pha
.9118		64 01		stz $01				stz 	1 							; access I/O Page 0
.911a		38		sec				sec 								; calculate timer - LastTick
.911b		ad 59 d6	lda $d659			lda 	$D659
.911e		cd 73 07	cmp $0773			cmp 	LastTick
.9121		f0 06		beq $9129			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9123		8d 73 07	sta $0773			sta 	LastTick 					; update last timer
.9126		20 99 a6	jsr $a699			jsr 	TickHandler 							; go do the code.
.9129						_NoFireTick:
.9129		68		pla				pla 								; restore I/O 0
.912a		85 01		sta $01				sta 	1
.912c						_CRNoBreakCheck:
.912c		c8		iny				iny									; next token
.912d						_CRMainLoop:
.912d		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9130		b1 30		lda ($30),y			lda 	(codePtr),y
.9132		10 10		bpl $9144			bpl 	_CRNotKeyword				; not a token.
.9134		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9136		b0 04		bcs $913c			bcs 	_CRIsKeyword
.9138		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.913a		b0 34		bcs $9170			bcs		_CRSyntaxError
.913c						_CRIsKeyword:
.913c		c8		iny				iny 								; consume command
.913d		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.913e		aa		tax				tax 								; put in X for vector jump
.913f		20 73 91	jsr $9173			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9142		80 e9		bra $912d			bra 	_CRMainLoop 				; and loop round
.9144						_CRNotKeyword:
.9144		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9146		f0 c4		beq $910c			beq 	_CRIncMainLoop
.9148		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.914a		90 05		bcc $9151			bcc 	_CRNotVariable
.914c						_CRGoLet:
.914c		20 7b 8b	jsr $8b7b			jsr 	LetCommand
.914f		80 dc		bra $912d			bra 	_CRMainLoop
.9151						_CRNotVariable:
.9151		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; handle @
.9153		f0 f7		beq $914c			beq 	_CRGoLet
.9155		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9157		f0 f3		beq $914c			beq 	_CRGoLet
.9159		c9 21		cmp #$21			cmp 	#KWD_PLING
.915b		f0 ef		beq $914c			beq 	_CRGoLet
.915d		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.915f		f0 09		beq $916a			beq 	_CRGoRem
.9161		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9163		d0 0b		bne $9170			bne 	_CRSyntaxError
.9165		20 cc 83	jsr $83cc			jsr 	LabelHere
.9168		80 c3		bra $912d			bra 	_CRMainLoop
.916a						_CRGoRem:
.916a		c8		iny				iny
.916b		20 8a 90	jsr $908a			jsr 	RemCommand
.916e		80 bd		bra $912d			bra 	_CRMainLoop
.9170						_CRSyntaxError:
.9170		4c ec a7	jmp $a7ec			jmp 	SyntaxError
.9173						_CRCallVector0:
.9173		7c 12 92	jmp ($9212,x)			jmp 	(VectorSet0,x)
.9176						_CRBreak:
.9176		a9 01		lda #$01		lda	#1
.9178		4c 01 96	jmp $9601		jmp	ErrorHandler
.917b						CRNoProgram:
.917b		4c 11 89	jmp $8911			jmp 	EndCommand
.917e						Shift1Command:
.917e		b1 30		lda ($30),y			lda 	(codePtr),y
.9180		c8		iny				iny
.9181		0a		asl a				asl 	a
.9182		aa		tax				tax
.9183		7c c8 92	jmp ($92c8,x)			jmp 	(VectorSet1,x)
.9186						Shift2Command:
.9186		b1 30		lda ($30),y			lda 	(codePtr),y
.9188		c8		iny				iny
.9189		0a		asl a				asl 	a
.918a		aa		tax				tax
.918b		7c 12 93	jmp ($9312,x)			jmp 	(VectorSet2,x)
.918e						Unused1:
.918e						Unused2:
.918e						Unused3:
.918e						Unused4:
.918e		4c ec a7	jmp $a7ec			jmp 	SyntaxError
>9191								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9192						VectorSetPunc:
>9192		b9 98					.word	ShiftLeft                        ; $00 <<
>9194		a4 96					.word	BinaryCompareLessEqual           ; $01 <=
>9196		9a 96					.word	BinaryCompareNotEqual            ; $02 <>
>9198		ec a7					.word	SyntaxError                      ; $03 !!3
>919a		ec a7					.word	SyntaxError                      ; $04 ><
>919c		ae 96					.word	BinaryCompareGreaterEqual        ; $05 >=
>919e		bc 98					.word	ShiftRight                       ; $06 >>
>91a0		ec a7					.word	SyntaxError                      ; $07 !!7
>91a2		ec a7					.word	SyntaxError                      ; $08 !!8
>91a4		ec a7					.word	SyntaxError                      ; $09 !!9
>91a6		ec a7					.word	SyntaxError                      ; $0a !!10
>91a8		ec a7					.word	SyntaxError                      ; $0b !!11
>91aa		ec a7					.word	SyntaxError                      ; $0c !!12
>91ac		ec a7					.word	SyntaxError                      ; $0d !!13
>91ae		ec a7					.word	SyntaxError                      ; $0e !!14
>91b0		ec a7					.word	SyntaxError                      ; $0f !!15
>91b2		ec a7					.word	SyntaxError                      ; $10 @
>91b4		ec a7					.word	SyntaxError                      ; $11 !!17
>91b6		ec a7					.word	SyntaxError                      ; $12 !!18
>91b8		ec a7					.word	SyntaxError                      ; $13 [
>91ba		65 97					.word	IntegerDivide                    ; $14 \
>91bc		ec a7					.word	SyntaxError                      ; $15 ]
>91be		f7 99					.word	EorInteger                       ; $16 ^
>91c0		ec a7					.word	SyntaxError                      ; $17 _
>91c2		ec a7					.word	SyntaxError                      ; $18 `
>91c4		ec a7					.word	SyntaxError                      ; $19 !!25
>91c6		ec a7					.word	SyntaxError                      ; $1a !!26
>91c8		ec a7					.word	SyntaxError                      ; $1b {
>91ca		c2 99					.word	OraInteger                       ; $1c |
>91cc		ec a7					.word	SyntaxError                      ; $1d }
>91ce		ec a7					.word	SyntaxError                      ; $1e ~
>91d0		ec a7					.word	SyntaxError                      ; $1f <7F>
>91d2		ec a7					.word	SyntaxError                      ; $20
>91d4		2c 9a					.word	WordIndirect                     ; $21 !
>91d6		ec a7					.word	SyntaxError                      ; $22 "
>91d8		ec a7					.word	SyntaxError                      ; $23 #
>91da		ec a7					.word	SyntaxError                      ; $24 $
>91dc		a6 97					.word	IntegerModulus                   ; $25 %
>91de		8d 99					.word	AndInteger                       ; $26 &
>91e0		ec a7					.word	SyntaxError                      ; $27 '
>91e2		ec a7					.word	SyntaxError                      ; $28 (
>91e4		ec a7					.word	SyntaxError                      ; $29 )
>91e6		14 98					.word	MulInteger                       ; $2a *
>91e8		2f 99					.word	AddInteger                       ; $2b +
>91ea		ec a7					.word	SyntaxError                      ; $2c ,
>91ec		68 99					.word	SubInteger                       ; $2d -
>91ee		ec a7					.word	SyntaxError                      ; $2e .
>91f0		e6 9b					.word	FDivideCommand                   ; $2f /
>91f2		ec a7					.word	SyntaxError                      ; $30 0
>91f4		ec a7					.word	SyntaxError                      ; $31 1
>91f6		ec a7					.word	SyntaxError                      ; $32 2
>91f8		ec a7					.word	SyntaxError                      ; $33 3
>91fa		ec a7					.word	SyntaxError                      ; $34 4
>91fc		ec a7					.word	SyntaxError                      ; $35 5
>91fe		ec a7					.word	SyntaxError                      ; $36 6
>9200		ec a7					.word	SyntaxError                      ; $37 7
>9202		ec a7					.word	SyntaxError                      ; $38 8
>9204		ec a7					.word	SyntaxError                      ; $39 9
>9206		ec a7					.word	SyntaxError                      ; $3a :
>9208		ec a7					.word	SyntaxError                      ; $3b ;
>920a		86 96					.word	BinaryCompareLess                ; $3c <
>920c		7c 96					.word	BinaryCompareEqual               ; $3d =
>920e		90 96					.word	BinaryCompareGreater             ; $3e >
>9210		4e 9a					.word	ByteIndirect                     ; $3f ?
.9212						VectorSet0:
>9212		eb 90					.word	EOLCommand                       ; $80 !0:EOF
>9214		7e 91					.word	Shift1Command                    ; $81 !1:SH1
>9216		86 91					.word	Shift2Command                    ; $82 !2:SH2
>9218		d0 a0					.word	AbsUnary                         ; $83 ABS(
>921a		de a0					.word	AllocUnary                       ; $84 ALLOC(
>921c		4e a1					.word	AscUnary                         ; $85 ASC(
>921e		14 a3					.word	ChrUnary                         ; $86 CHR$(
>9220		6f ac					.word	UnaryEvent                       ; $87 EVENT(
>9222		78 96					.word	UnaryFalse                       ; $88 FALSE
>9224		5b a1					.word	FracUnary                        ; $89 FRAC(
>9226		a4 a3					.word	ChrGet                           ; $8a GET$(
>9228		80 a3					.word	AscGet                           ; $8b GET(
>922a		2a a3					.word	UnaryGetDate                     ; $8c GETDATE$(
>922c		26 a3					.word	UnaryGetTime                     ; $8d GETTIME$(
>922e		f9 ab					.word	UnaryHit                         ; $8e HIT(
>9230		ab a3					.word	ChrInkey                         ; $8f INKEY$(
>9232		99 a3					.word	AscInkey                         ; $90 INKEY(
>9234		70 a1					.word	IntUnary                         ; $91 INT(
>9236		d3 a2					.word	IsValUnary                       ; $92 ISVAL(
>9238		c4 a3					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>923a		e8 a3					.word	ItemGetUnary                     ; $94 ITEMGET$(
>923c		f3 ac					.word	UnaryJoyB                        ; $95 JOYB(
>923e		cc ac					.word	UnaryJoyX                        ; $96 JOYX(
>9240		cf ac					.word	UnaryJoyY                        ; $97 JOYY(
>9242		27 a5					.word	Unary_Left                       ; $98 LEFT$(
>9244		81 a1					.word	LenUnary                         ; $99 LEN(
>9246		9f a1					.word	Unary_Max                        ; $9a MAX(
>9248		49 a5					.word	Unary_Mid                        ; $9b MID$(
>924a		9b a1					.word	Unary_Min                        ; $9c MIN(
>924c		ea a1					.word	Unary_Not                        ; $9d NOT(
>924e		fd a1					.word	PeekByteUnary                    ; $9e PEEK(
>9250		09 a2					.word	PeekDUnary                       ; $9f PEEKD(
>9252		05 a2					.word	PeekLUnary                       ; $a0 PEEKL(
>9254		01 a2					.word	PeekWUnary                       ; $a1 PEEKW(
>9256		aa b6					.word	UnaryPlaying                     ; $a2 PLAYING(
>9258		36 a2					.word	Unary_Random                     ; $a3 RANDOM(
>925a		34 a5					.word	Unary_Right                      ; $a4 RIGHT$(
>925c		50 a2					.word	Unary_Rnd                        ; $a5 RND(
>925e		ab a2					.word	SgnUnary                         ; $a6 SGN(
>9260		66 a4					.word	SpcUnary                         ; $a7 SPC(
>9262		81 a4					.word	Unary_Str                        ; $a8 STR$(
>9264		05 ad					.word	UnaryTimer                       ; $a9 TIMER(
>9266		6d 96					.word	UnaryTrue                        ; $aa TRUE
>9268		c9 a2					.word	ValUnary                         ; $ab VAL(
>926a		14 89					.word	ForCommand                       ; $ac FOR
>926c		57 8a					.word	IfCommand                        ; $ad IF
>926e		8e 91					.word	Unused1                          ; $ae PROC
>9270		97 90					.word	Command_REPEAT                   ; $af REPEAT
>9272		b9 95					.word	Command_WHILE                    ; $b0 WHILE
>9274		80 8a					.word	EndIf                            ; $b1 ENDIF
>9276		1f 90					.word	Command_ENDPROC                  ; $b2 ENDPROC
>9278		c6 89					.word	NextCommand                      ; $b3 NEXT
>927a		8e 91					.word	Unused4                          ; $b4 THEN
>927c		a0 90					.word	Command_UNTIL                    ; $b5 UNTIL
>927e		da 95					.word	Command_WEND                     ; $b6 WEND
>9280		ec a7					.word	SyntaxError                      ; $b7 AT
>9282		ec a7					.word	SyntaxError                      ; $b8 BY
>9284		dd 86					.word	CallCommand                      ; $b9 CALL
>9286		ad a9					.word	CircleCommand                    ; $ba CIRCLE
>9288		12 87					.word	ClearCommand                     ; $bb CLEAR
>928a		ec a7					.word	SyntaxError                      ; $bc COLOR
>928c		ec a7					.word	SyntaxError                      ; $bd COLOUR
>928e		75 87					.word	Command_Data                     ; $be DATA
>9290		7d 87					.word	DimCommand                       ; $bf DIM
>9292		8e 91					.word	Unused3                          ; $c0 DOWNTO
>9294		79 8a					.word	ElseCode                         ; $c1 ELSE
>9296		ec a7					.word	SyntaxError                      ; $c2 FROM
>9298		cc ab					.word	GfxCommand                       ; $c3 GFX
>929a		ec a7					.word	SyntaxError                      ; $c4 HERE
>929c		d6 a9					.word	ImageCommand                     ; $c5 IMAGE
>929e		7b 8b					.word	LetCommand                       ; $c6 LET
>92a0		28 aa					.word	LineCommand                      ; $c7 LINE
>92a2		a3 8d					.word	Command_LOCAL                    ; $c8 LOCAL
>92a4		64 8e					.word	MCCommand                        ; $c9 MEMCOPY
>92a6		ec a7					.word	SyntaxError                      ; $ca OFF
>92a8		ec a7					.word	SyntaxError                      ; $cb ON
>92aa		ec a7					.word	SyntaxError                      ; $cc OUTLINE
>92ac		1d ac					.word	PaletteCommand                   ; $cd PALETTE
>92ae		21 aa					.word	PlotCommand                      ; $ce PLOT
>92b0		84 8f					.word	PokeBCommand                     ; $cf POKE
>92b2		90 8f					.word	PokeDCommand                     ; $d0 POKED
>92b4		8c 8f					.word	PokeLCommand                     ; $d1 POKEL
>92b6		88 8f					.word	PokeWCommand                     ; $d2 POKEW
>92b8		2d 90					.word	Command_Read                     ; $d3 READ
>92ba		a9 a9					.word	RectangleCommand                 ; $d4 RECT
>92bc		8a 90					.word	RemCommand                       ; $d5 REM
>92be		ec a7					.word	SyntaxError                      ; $d6 SOLID
>92c0		c6 b6					.word	SoundCommand                     ; $d7 SOUND
>92c2		b8 a9					.word	SpriteCommand                    ; $d8 SPRITE
>92c4		f2 a9					.word	TextCommand                      ; $d9 TEXT
>92c6		8e 91					.word	Unused2                          ; $da TO
.92c8						VectorSet1:
>92c8		ec a7					.word	SyntaxError                      ; $80 !0:EOF
>92ca		ec a7					.word	SyntaxError                      ; $81 !1:SH1
>92cc		ec a7					.word	SyntaxError                      ; $82 !2:SH2
>92ce		8f 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>92d0		ab 85					.word	AssertCommand                    ; $84 ASSERT
>92d2		6c ab					.word	BitmapCtrl                       ; $85 BITMAP
>92d4		bb 85					.word	Command_BLoad                    ; $86 BLOAD
>92d6		5b 86					.word	Command_BSave                    ; $87 BSAVE
>92d8		6d 87					.word	ClearScreen                      ; $88 CLS
>92da		86 8a					.word	Command_CPrint                   ; $89 CPRINT
>92dc		3a 88					.word	Command_Dir                      ; $8a DIR
>92de		0a 89					.word	Command_Drive                    ; $8b DRIVE
>92e0		11 89					.word	EndCommand                       ; $8c END
>92e2		7e b6					.word	Explode                          ; $8d EXPLODE
>92e4		ec a7					.word	SyntaxError                      ; $8e GO
>92e6		1f 8a					.word	Command_GOSUB                    ; $8f GOSUB
>92e8		3d 8a					.word	GotoCommand                      ; $90 GOTO
>92ea		ec a7					.word	SyntaxError                      ; $91 HIMEM
>92ec		81 8a					.word	Command_Input                    ; $92 INPUT
>92ee		cb 8b					.word	Command_List                     ; $93 LIST
>92f0		d5 8c					.word	Command_Load                     ; $94 LOAD
>92f2		74 8f					.word	NewCommand                       ; $95 NEW
>92f4		5a b6					.word	PingCommand                      ; $96 PING
>92f6		8d 8a					.word	Command_Print                    ; $97 PRINT
>92f8		b9 90					.word	Command_Restore                  ; $98 RESTORE
>92fa		2f 8a					.word	Command_RETURN                   ; $99 RETURN
>92fc		f8 90					.word	CommandRUN                       ; $9a RUN
>92fe		9a 93					.word	Command_Save                     ; $9b SAVE
>9300		1e 94					.word	CommandSetDate                   ; $9c SETDATE
>9302		22 94					.word	CommandSetTime                   ; $9d SETTIME
>9304		72 b6					.word	ShootCommand                     ; $9e SHOOT
>9306		b1 ab					.word	SpritesCtrl                      ; $9f SPRITES
>9308		92 94					.word	StopCommand                      ; $a0 STOP
>930a		5f 95					.word	Command_VERIFY                   ; $a1 VERIFY
>930c		66 ac					.word	XGoCommand                       ; $a2 XGO
>930e		5d ac					.word	XLoadCommand                     ; $a3 XLOAD
>9310		66 b6					.word	ZapCommand                       ; $a4 ZAP
.9312						VectorSet2:
>9312		ec a7					.word	SyntaxError                      ; $80 !0:EOF
>9314		ec a7					.word	SyntaxError                      ; $81 !1:SH1
>9316		ec a7					.word	SyntaxError                      ; $82 !2:SH2
>9318		ab a6					.word	Assemble_adc                     ; $83 ADC
>931a		a3 a6					.word	Assemble_and                     ; $84 AND
>931c		bf a6					.word	Assemble_asl                     ; $85 ASL
>931e		29 a7					.word	Assemble_bcc                     ; $86 BCC
>9320		2d a7					.word	Assemble_bcs                     ; $87 BCS
>9322		35 a7					.word	Assemble_beq                     ; $88 BEQ
>9324		ec a6					.word	Assemble_bit                     ; $89 BIT
>9326		1d a7					.word	Assemble_bmi                     ; $8a BMI
>9328		31 a7					.word	Assemble_bne                     ; $8b BNE
>932a		19 a7					.word	Assemble_bpl                     ; $8c BPL
>932c		39 a7					.word	Assemble_bra                     ; $8d BRA
>932e		3d a7					.word	Assemble_brk                     ; $8e BRK
>9330		21 a7					.word	Assemble_bvc                     ; $8f BVC
>9332		25 a7					.word	Assemble_bvs                     ; $90 BVS
>9334		45 a7					.word	Assemble_clc                     ; $91 CLC
>9336		99 a7					.word	Assemble_cld                     ; $92 CLD
>9338		59 a7					.word	Assemble_cli                     ; $93 CLI
>933a		89 a7					.word	Assemble_clv                     ; $94 CLV
>933c		b7 a6					.word	Assemble_cmp                     ; $95 CMP
>933e		00 a7					.word	Assemble_cpx                     ; $96 CPX
>9340		fb a6					.word	Assemble_cpy                     ; $97 CPY
>9342		dd a6					.word	Assemble_dec                     ; $98 DEC
>9344		95 a7					.word	Assemble_dex                     ; $99 DEX
>9346		71 a7					.word	Assemble_dey                     ; $9a DEY
>9348		a7 a6					.word	Assemble_eor                     ; $9b EOR
>934a		e2 a6					.word	Assemble_inc                     ; $9c INC
>934c		a5 a7					.word	Assemble_inx                     ; $9d INX
>934e		91 a7					.word	Assemble_iny                     ; $9e INY
>9350		14 a7					.word	Assemble_jmp                     ; $9f JMP
>9352		0f a7					.word	Assemble_jsr                     ; $a0 JSR
>9354		b3 a6					.word	Assemble_lda                     ; $a1 LDA
>9356		d8 a6					.word	Assemble_ldx                     ; $a2 LDX
>9358		f6 a6					.word	Assemble_ldy                     ; $a3 LDY
>935a		c9 a6					.word	Assemble_lsr                     ; $a4 LSR
>935c		a9 a7					.word	Assemble_nop                     ; $a5 NOP
>935e		9f a6					.word	Assemble_ora                     ; $a6 ORA
>9360		55 a7					.word	Assemble_pha                     ; $a7 PHA
>9362		41 a7					.word	Assemble_php                     ; $a8 PHP
>9364		9d a7					.word	Assemble_phx                     ; $a9 PHX
>9366		5d a7					.word	Assemble_phy                     ; $aa PHY
>9368		65 a7					.word	Assemble_pla                     ; $ab PLA
>936a		49 a7					.word	Assemble_plp                     ; $ac PLP
>936c		b1 a7					.word	Assemble_plx                     ; $ad PLX
>936e		6d a7					.word	Assemble_ply                     ; $ae PLY
>9370		c4 a6					.word	Assemble_rol                     ; $af ROL
>9372		ce a6					.word	Assemble_ror                     ; $b0 ROR
>9374		51 a7					.word	Assemble_rti                     ; $b1 RTI
>9376		61 a7					.word	Assemble_rts                     ; $b2 RTS
>9378		bb a6					.word	Assemble_sbc                     ; $b3 SBC
>937a		4d a7					.word	Assemble_sec                     ; $b4 SEC
>937c		ad a7					.word	Assemble_sed                     ; $b5 SED
>937e		69 a7					.word	Assemble_sei                     ; $b6 SEI
>9380		af a6					.word	Assemble_sta                     ; $b7 STA
>9382		a1 a7					.word	Assemble_stp                     ; $b8 STP
>9384		d3 a6					.word	Assemble_stx                     ; $b9 STX
>9386		f1 a6					.word	Assemble_sty                     ; $ba STY
>9388		e7 a6					.word	Assemble_stz                     ; $bb STZ
>938a		85 a7					.word	Assemble_tax                     ; $bc TAX
>938c		81 a7					.word	Assemble_tay                     ; $bd TAY
>938e		0a a7					.word	Assemble_trb                     ; $be TRB
>9390		05 a7					.word	Assemble_tsb                     ; $bf TSB
>9392		8d a7					.word	Assemble_tsx                     ; $c0 TSX
>9394		75 a7					.word	Assemble_txa                     ; $c1 TXA
>9396		7d a7					.word	Assemble_txs                     ; $c2 TXS
>9398		79 a7					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.939a						Command_Save:
.939a		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; file name to load
.939d		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.939f		a5 36		lda $36				lda 	zTemp0
.93a1		20 35 81	jsr $8135			jsr 	KNLOpenFileWrite 			; open file for writing
.93a4		b0 2f		bcs $93d5			bcs 	CSErrorHandler 				; error, so fail.
.93a6		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.93a9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93ab		85 30		sta $30				sta 	codePtr
.93ad		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93af		85 31		sta $31				sta 	codePtr+1
.93b1						_CSLoop:
.93b1		b2 30		lda ($30)			lda 	(codePtr)
.93b3		f0 17		beq $93cc			beq 	_CSExit
.93b5		20 f9 93	jsr $93f9			jsr 	CSGetCleanLine
.93b8		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.93ba		85 36		sta $36				sta 	zTemp0
.93bc		20 d8 93	jsr $93d8			jsr 	CLWriteByteBlock 			; write the block out.
.93bf		18		clc				clc
.93c0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.93c2		65 30		adc $30				adc 	codePtr
.93c4		85 30		sta $30				sta 	codePtr
.93c6		90 02		bcc $93ca			bcc 	_CREExit
.93c8		e6 31		inc $31				inc 	codePtr+1 					; carry
.93ca						_CREExit:
.93ca		80 e5		bra $93b1			bra 	_CSLoop
.93cc						_CSExit:
.93cc		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close file
.93cf		20 04 82	jsr $8204			jsr 	KNLCloseFile
.93d2		4c 08 8d	jmp $8d08			jmp 	CLComplete 					; display complete message.
.93d5						CSErrorHandler:
.93d5		4c 25 8d	jmp $8d25			jmp 	CLErrorHandler
.93d8						CLWriteByteBlock:
.93d8		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.93da		f0 1c		beq $93f8			beq 	_CLWBBExit					; if so, exit
.93dc		ad 6d 07	lda $076d			lda 	BasicFileStream 			; stream to write, count in X
.93df		20 ca 81	jsr $81ca			jsr 	KNLWriteBlock 				; call one write attempt
.93e2		b0 f1		bcs $93d5			bcs 	CSErrorHandler 				; error occurred
.93e4		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.93e6		8a		txa				txa 								; subtract bytes written from X, total count.
.93e7		38		sec				sec
.93e8		e5 38		sbc $38				sbc 	zTemp1
.93ea		aa		tax				tax
.93eb		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.93ec		a5 36		lda $36				lda 	zTemp0
.93ee		65 38		adc $38				adc 	zTemp1
.93f0		85 36		sta $36				sta 	zTemp0
.93f2		90 e4		bcc $93d8			bcc 	CLWriteByteBlock
.93f4		e6 37		inc $37				inc 	zTemp0+1
.93f6		80 e0		bra $93d8			bra 	CLWriteByteBlock 			; and retry write out.
.93f8						_CLWBBExit:
.93f8		60		rts				rts
.93f9						CSGetCleanLine:
.93f9		a9 00		lda #$00			lda 	#0 							; no indent.
.93fb		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.93fe		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9400		a0 00		ldy #$00			ldy 	#0
.9402						_CSClean:
.9402		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.9405		f0 09		beq $9410			beq 	_CSDoneClean
.9407		30 04		bmi $940d			bmi 	_CSIgnoreCharacter
.9409		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.940c		e8		inx				inx
.940d						_CSIgnoreCharacter:
.940d		c8		iny				iny
.940e		80 f2		bra $9402			bra 	_CSClean
.9410						_CSDoneClean:
.9410		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9412		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.9415		e8		inx				inx
.9416		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.9419		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.941b		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.941d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/setdatetime.asm

.941e						CommandSetDate:
.941e		a9 03		lda #$03			lda 	#3
.9420		80 02		bra $9424			bra 	CSDTMain
.9422						CommandSetTime:
.9422		a9 00		lda #$00			lda 	#0
.9424						CSDTMain:
.9424		48		pha				pha 								; save table offsets 0 or 3
.9425		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9427		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.942a		20 f0 95	jsr $95f0			jsr 	CheckComma
.942d		e8		inx				inx
.942e		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.9431		20 f0 95	jsr $95f0			jsr 	CheckComma
.9434		e8		inx				inx
.9435		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.9438		68		pla				pla 								; table offset in Y, saving Y
.9439		5a		phy				phy
.943a		a8		tay				tay
.943b		a2 00		ldx #$00			ldx 	#0 							; first number
.943d		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.943f		48		pha				pha
.9440		64 01		stz $01				stz 	1
.9442						_CSDTCopy:
.9442		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.9444		d9 86 94	cmp $9486,y			cmp 	RTCWMinValues,y 			; check range
.9447		90 1b		bcc $9464			bcc 	_CSDTRange
.9449		d9 8c 94	cmp $948c,y			cmp 	RTCWMaxValues,y
.944c		b0 16		bcs $9464			bcs 	_CSDTRange
.944e		20 69 94	jsr $9469			jsr 	CSDTDecimalToBCD
.9451		da		phx				phx 								; save X
.9452		be 80 94	ldx $9480,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.9455		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.9458		fa		plx				plx 								; restore X
.9459		e8		inx				inx 								; next number
.945a		c8		iny				iny 								; next table entries
.945b		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.945d		d0 e3		bne $9442			bne 	_CSDTCopy
.945f		68		pla				pla 								; restore I/O space
.9460		85 01		sta $01				sta 	1
.9462		7a		ply				ply 								; restore code pos and exit.
.9463		60		rts				rts
.9464						_CSDTRange:
.9464		a9 04		lda #$04		lda	#4
.9466		4c 01 96	jmp $9601		jmp	ErrorHandler
.9469						CSDTDecimalToBCD:
.9469		da		phx				phx 								; 10 count in X
.946a		a2 00		ldx #$00			ldx 	#0
.946c						_CSDTDBLoop:
.946c		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.946e		90 05		bcc $9475			bcc 	_CSDTDBExit
.9470		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.9472		e8		inx				inx 								; one more 10s.
.9473		80 f7		bra $946c			bra 	_CSDTDBLoop
.9475						_CSDTDBExit:
.9475		85 36		sta $36				sta 	zTemp0 						; units
.9477		8a		txa				txa 								; 10s x 16
.9478		0a		asl a				asl 	a
.9479		0a		asl a				asl 	a
.947a		0a		asl a				asl 	a
.947b		0a		asl a				asl 	a
.947c		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.947e		fa		plx				plx
.947f		60		rts				rts
.9480						RTCWOffset:
>9480		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.9486						RTCWMinValues:
>9486		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.948c						RTCWMaxValues:
>948c		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9492						StopCommand:
.9492		a9 08		lda #$08		lda	#8
.9494		4c 01 96	jmp $9601		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9497						ProcedureScan:
.9497		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9499		85 30		sta $30				sta 	codePtr
.949b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.949d		85 31		sta $31				sta 	codePtr+1
.949f						_PSLoop:
.949f		b2 30		lda ($30)			lda 	(codePtr)
.94a1		f0 42		beq $94e5			beq 	_PSExit
.94a3		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.94a5		b1 30		lda ($30),y			lda 	(codePtr),y
.94a7		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.94a9		d0 2d		bne $94d8			bne 	_PSNext
.94ab		c8		iny				iny 								; get the address of the record to zTemp0 and
.94ac		b1 30		lda ($30),y			lda 	(codePtr),y
.94ae		29 c0		and #$c0			and 	#$C0
.94b0		c9 40		cmp #$40			cmp 	#$40
.94b2		d0 32		bne $94e6			bne 	_PSSyntax
.94b4		b1 30		lda ($30),y			lda 	(codePtr),y
.94b6		18		clc				clc
.94b7		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94b9		85 37		sta $37				sta 	zTemp0+1
.94bb		c8		iny				iny 								; LSB
.94bc		b1 30		lda ($30),y			lda 	(codePtr),y
.94be		85 36		sta $36				sta 	zTemp0
.94c0		c8		iny				iny 								; character after variable call.
.94c1		98		tya				tya 								; save Y offset at +7 (exponent slot)
.94c2		a0 07		ldy #$07			ldy 	#7
.94c4		91 36		sta ($36),y			sta 	(zTemp0),y
.94c6		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.94c8		a0 02		ldy #$02			ldy 	#2
.94ca		91 36		sta ($36),y			sta 	(zTemp0),y
.94cc		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.94ce						_PSCopy:
.94ce		b5 30		lda $30,x			lda 	safePtr,x
.94d0		c8		iny				iny
.94d1		91 36		sta ($36),y			sta 	(zTemp0),y
.94d3		e8		inx				inx
.94d4		e0 04		cpx #$04			cpx 	#4
.94d6		d0 f6		bne $94ce			bne 	_PSCopy
.94d8						_PSNext:
.94d8		18		clc				clc
.94d9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.94db		65 30		adc $30				adc 	codePtr
.94dd		85 30		sta $30				sta 	codePtr
.94df		90 02		bcc $94e3			bcc 	_CREExit
.94e1		e6 31		inc $31				inc 	codePtr+1 					; carry
.94e3						_CREExit:
.94e3		80 ba		bra $949f			bra 	_PSLoop
.94e5						_PSExit:
.94e5		60		rts				rts
.94e6						_PSSyntax:
.94e6		4c ec a7	jmp $a7ec			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.94e9						ScanForward:
.94e9		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.94eb		86 37		stx $37				stx 	zTemp0+1
.94ed		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.94ef						_ScanLoop:
.94ef		b1 30		lda ($30),y			lda 	(codePtr),y
.94f1		c8		iny				iny
.94f2		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.94f4		d0 0e		bne $9504			bne 	_ScanGoNext
.94f6		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.94f8		f0 04		beq $94fe			beq 	_ScanMatch
.94fa		c5 37		cmp $37				cmp 	zTemp0+1
.94fc		d0 06		bne $9504			bne 	_ScanGoNext
.94fe						_ScanMatch:
.94fe		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9500		d0 01		bne $9503			bne 	_ScanNotEndEOL
.9502		88		dey				dey
.9503						_ScanNotEndEOL:
.9503		60		rts				rts
.9504						_ScanGoNext:
.9504		20 09 95	jsr $9509			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9507		80 e6		bra $94ef			bra 	_ScanLoop
.9509						ScanForwardOne:
.9509		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.950b		90 3e		bcc $954b			bcc 	_SFWExit
.950d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.950f		90 18		bcc $9529			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9511		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9513		b0 2f		bcs $9544			bcs 	_ScanSkipData
.9515		c9 ac		cmp #$ac			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9517		90 32		bcc $954b			bcc 	_SFWExit 					; if not, ordinary keywords.
.9519		c9 b7		cmp #$b7			cmp 	#KWC_LAST_STRUCTURE+1
.951b		b0 2e		bcs $954b			bcs 	_SFWExit
.951d		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.951f		c9 b1		cmp #$b1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9521		b0 28		bcs $954b			bcs 	_SFWExit
.9523		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9525		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9527		80 22		bra $954b			bra 	_SFWExit
.9529						_ScanSkipOne:
.9529		c8		iny				iny 								; consume the extra one.
.952a		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.952c		d0 1d		bne $954b			bne 	_SFWExit
.952e		18		clc				clc
.952f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9531		65 30		adc $30				adc 	codePtr
.9533		85 30		sta $30				sta 	codePtr
.9535		90 02		bcc $9539			bcc 	_CREExit
.9537		e6 31		inc $31				inc 	codePtr+1 					; carry
.9539						_CREExit:
.9539		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.953b		b2 30		lda ($30)			lda 	(codePtr)
.953d		d0 0c		bne $954b			bne 	_SFWExit 					; if not zero, more to scan
.953f		a9 13		lda #$13		lda	#19
.9541		4c 01 96	jmp $9601		jmp	ErrorHandler
.9544						_ScanSkipData:
.9544		88		dey				dey 								; point at data token
.9545		c8		iny				iny 								; point to offset
.9546		98		tya				tya 								; A = offset position
.9547		38		sec				sec 								; add size +1 hence SEC
.9548		71 30		adc ($30),y			adc 	(codePtr),y
.954a		a8		tay				tay 								; make current position.
.954b						_SFWExit:
.954b		60		rts				rts
.954c						ScanGetCurrentLineStep:
.954c		64 38		stz $38				stz 	zTemp1
.954e		a0 03		ldy #$03			ldy 	#3
.9550						_SGCLSLoop:
.9550		b1 30		lda ($30),y			lda 	(codePtr),y
.9552		c8		iny				iny
.9553		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9555		f0 05		beq $955c			beq 	_SGCLSExit
.9557		20 09 95	jsr $9509			jsr 	ScanForwardOne
.955a		80 f4		bra $9550			bra 	_SGCLSLoop
.955c						_SGCLSExit:
.955c		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.955e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc72						m
.955f						Command_VERIFY:
.955f		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; file name to verify
.9562		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9564		a5 36		lda $36				lda 	zTemp0
.9566		20 3a 81	jsr $813a			jsr 	KNLOpenFileRead 			; open file for reading
.9569		b0 4b		bcs $95b6			bcs 	_CVErrorHandler 			; error, so fail.
.956b		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.956e		20 75 8d	jsr $8d75			jsr     LoadReadByteInit            ; Init reader with the stream
.9571		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.9574		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9576		85 30		sta $30				sta 	codePtr
.9578		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.957a		85 31		sta $31				sta 	codePtr+1
.957c						_CVLoop:
.957c		20 33 8d	jsr $8d33			jsr 	LoadReadLine 				; get next line.
.957f		f0 27		beq $95a8			beq 	_CVExit 					; end, exit.
.9581		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.9584		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.9587		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.958a		f0 f0		beq $957c			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.958c		a0 00		ldy #$00			ldy 	#0 							; start compare
.958e						_CVCompareLoop:
.958e		b1 30		lda ($30),y			lda 	(codePtr),y
.9590		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.9593		d0 1c		bne $95b1			bne 	_CVCompareError
.9595		c8		iny				iny
.9596		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.9599		d0 f3		bne $958e			bne 	_CVCompareLoop
.959b		18		clc				clc
.959c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.959e		65 30		adc $30				adc 	codePtr
.95a0		85 30		sta $30				sta 	codePtr
.95a2		90 02		bcc $95a6			bcc 	_CREExit
.95a4		e6 31		inc $31				inc 	codePtr+1 					; carry
.95a6						_CREExit:
.95a6		80 d4		bra $957c			bra 	_CVLoop
.95a8						_CVExit:
.95a8		ad 6d 07	lda $076d			lda 	BasicFileStream
.95ab		20 04 82	jsr $8204			jsr 	KNLCloseFile
.95ae		4c 08 8d	jmp $8d08			jmp 	CLComplete
.95b1						_CVCompareError:
.95b1		a9 1b		lda #$1b		lda	#27
.95b3		4c 01 96	jmp $9601		jmp	ErrorHandler
.95b6						_CVErrorHandler:
.95b6		4c 25 8d	jmp $8d25			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.95b9						Command_WHILE:
.95b9		5a		phy				phy 								; save position of the test
.95ba		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.95bc		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber
.95bf		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; check if zero
.95c2		f0 0e		beq $95d2			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.95c4		98		tya				tya 								; position *after* test.
.95c5		7a		ply				ply 								; restore position before test, at WHILE
.95c6		88		dey				dey 								; so we execute the WHILE command again.
.95c7		48		pha				pha 								; push after test on the stack
.95c8		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.95ca		20 4d b7	jsr $b74d			jsr 	StackOpen
.95cd		20 92 b7	jsr $b792			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.95d0		7a		ply				ply 								; restore the position *after* the test
.95d1		60		rts				rts
.95d2						_WHExitLoop:
.95d2		68		pla				pla 								; throw post loop position
.95d3		a9 b6		lda #$b6			lda 	#KWD_WEND 					; scan forward past WEND
.95d5		aa		tax				tax
.95d6		20 e9 94	jsr $94e9			jsr 	ScanForward
.95d9		60		rts				rts
.95da						Command_WEND:
.95da		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.95dc		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.95de		20 7a b7	jsr $b77a			jsr 	StackCheckFrame
.95e1		20 a3 b7	jsr $b7a3			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.95e4		20 6c b7	jsr $b76c			jsr 	StackClose		 			; erase the frame
.95e7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.95e8						CheckRightBracket:
.95e8		b1 30		lda ($30),y			lda 	(codePtr),y
.95ea		c8		iny				iny
.95eb		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.95ed		d0 0f		bne $95fe			bne 	CNAFail
.95ef		60		rts				rts
.95f0						CheckComma:
.95f0		b1 30		lda ($30),y			lda 	(codePtr),y
.95f2		c8		iny				iny
.95f3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.95f5		d0 07		bne $95fe			bne 	CNAFail
.95f7		60		rts				rts
.95f8						CheckNextA:
.95f8		d1 30		cmp ($30),y			cmp 	(codePtr),y
.95fa		d0 02		bne $95fe			bne 	CNAFail
.95fc		c8		iny				iny 								; skip character
.95fd		60		rts				rts 								; and exit
.95fe						CNAFail:
.95fe		4c ec a7	jmp $a7ec			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9601						ErrorHandler:
.9601		a8		tay				tay 								; find the error text
.9602		f0 49		beq $964d			beq 	_EHEnd
.9604		a2 00		ldx #$00			ldx 	#0
.9606		a9 05		lda #$05			lda 	#((ErrorText) & $FF)
.9608		85 36		sta $36				sta 	0+zTemp0
.960a		a9 a8		lda #$a8			lda 	#((ErrorText) >> 8)
.960c		85 37		sta $37				sta 	1+zTemp0
.960e						_EHFind:
.960e		88		dey				dey 								; keep looking through text
.960f		f0 0e		beq $961f			beq 	_EHFound
.9611						_EHFindZero:
.9611		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9613		e6 36		inc $36				inc 	zTemp0
.9615		d0 02		bne $9619			bne 	_EHFNoCarry
.9617		e6 37		inc $37				inc 	zTemp0+1
.9619						_EHFNoCarry:
.9619		c9 00		cmp #$00			cmp 	#0
.961b		d0 f4		bne $9611			bne 	_EHFindZero
.961d		80 ef		bra $960e			bra 	_EHFind
.961f						_EHFound:
.961f		a5 36		lda $36				lda 	zTemp0 						; print message
.9621		a6 37		ldx $37				ldx 	zTemp0+1
.9623		20 5a 96	jsr $965a			jsr 	PrintStringXA
.9626		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9628		b1 30		lda ($30),y			lda 	(codePtr),y
.962a		d0 05		bne $9631			bne 	_EHAtMsg
.962c		c8		iny				iny
.962d		b1 30		lda ($30),y			lda 	(codePtr),y
.962f		f0 17		beq $9648			beq 	_EHCREnd
.9631						_EHAtMsg:
.9631		a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.9633		a9 50		lda #$50			lda 	#_AtMsg & $FF
.9635		20 5a 96	jsr $965a			jsr 	PrintStringXA
.9638		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.963a		b1 30		lda ($30),y			lda 	(codePtr),y
.963c		48		pha				pha
.963d		c8		iny				iny
.963e		b1 30		lda ($30),y			lda 	(codePtr),y
.9640		aa		tax				tax
.9641		68		pla				pla
.9642		20 70 9a	jsr $9a70			jsr 	ConvertInt16 				; convert XA to string
.9645		20 5a 96	jsr $965a			jsr 	PrintStringXA 				; and print it.
.9648						_EHCREnd:
.9648		a9 0d		lda #$0d			lda 	#13 						; new line
.964a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.964d						_EHEnd:
.964d		4c 5a 85	jmp $855a			jmp 	WarmStart
>9650		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9658		20 00
.965a						PrintStringXA:
.965a		5a		phy				phy
.965b		86 37		stx $37				stx 	zTemp0+1
.965d		85 36		sta $36				sta 	zTemp0
.965f		a0 00		ldy #$00			ldy 	#0
.9661						_PSXALoop:
.9661		b1 36		lda ($36),y			lda 	(zTemp0),y
.9663		f0 06		beq $966b			beq 	_PSXAExit
.9665		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9668		c8		iny				iny
.9669		80 f6		bra $9661			bra 	_PSXALoop
.966b						_PSXAExit:
.966b		7a		ply				ply
.966c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.966d						UnaryTrue:
.966d		fa		plx				plx
.966e						ReturnTrue:
.966e		a9 01		lda #$01			lda 	#1  						; set to 1
.9670		20 70 a6	jsr $a670			jsr 	NSMSetByte
.9673		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9675		95 50		sta $50,x			sta 	NSStatus,x
.9677		60		rts				rts
.9678						UnaryFalse:
.9678		fa		plx				plx
.9679						ReturnFalse:
.9679		4c 6e a6	jmp $a66e			jmp 	NSMSetZero 					; set it all to zero
.967c						BinaryCompareEqual:
.967c		fa		plx				plx
.967d		20 b8 96	jsr $96b8			jsr 	CompareBaseCode
.9680		c9 00		cmp #$00			cmp 	#0
.9682		f0 ea		beq $966e			beq 	ReturnTrue
.9684		80 f3		bra $9679			bra 	ReturnFalse
.9686						BinaryCompareLess:
.9686		fa		plx				plx
.9687		20 b8 96	jsr $96b8			jsr 	CompareBaseCode
.968a		c9 ff		cmp #$ff			cmp 	#$FF
.968c		f0 e0		beq $966e			beq 	ReturnTrue
.968e		80 e9		bra $9679			bra 	ReturnFalse
.9690						BinaryCompareGreater:
.9690		fa		plx				plx
.9691		20 b8 96	jsr $96b8			jsr 	CompareBaseCode
.9694		c9 01		cmp #$01			cmp 	#1
.9696		f0 d6		beq $966e			beq 	ReturnTrue
.9698		80 df		bra $9679			bra 	ReturnFalse
.969a						BinaryCompareNotEqual:
.969a		fa		plx				plx
.969b		20 b8 96	jsr $96b8			jsr 	CompareBaseCode
.969e		c9 00		cmp #$00			cmp 	#0
.96a0		d0 cc		bne $966e			bne 	ReturnTrue
.96a2		80 d5		bra $9679			bra 	ReturnFalse
.96a4						BinaryCompareLessEqual:
.96a4		fa		plx				plx
.96a5		20 b8 96	jsr $96b8			jsr 	CompareBaseCode
.96a8		c9 01		cmp #$01			cmp 	#1
.96aa		d0 c2		bne $966e			bne 	ReturnTrue
.96ac		80 cb		bra $9679			bra 	ReturnFalse
.96ae						BinaryCompareGreaterEqual:
.96ae		fa		plx				plx
.96af		20 b8 96	jsr $96b8			jsr 	CompareBaseCode
.96b2		c9 ff		cmp #$ff			cmp 	#$FF
.96b4		d0 b8		bne $966e			bne 	ReturnTrue
.96b6		80 c1		bra $9679			bra 	ReturnFalse
.96b8						CompareBaseCode:
.96b8		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; make both values if references.
.96bb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.96bd		15 51		ora $51,x			ora 	NSStatus+1,x
.96bf		29 10		and #$10			and 	#NSTString
.96c1		d0 37		bne $96fa			bne 	_CBCString 					; if so do string code, which will check if both.
.96c3		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.96c5		15 79		ora $79,x			ora 	NSExponent+1,x
.96c7		d0 34		bne $96fd			bne 	_CBCFloat
.96c9		b5 50		lda $50,x			lda 	NSStatus,x
.96cb		15 51		ora $51,x			ora 	NSStatus+1,x
.96cd		29 08		and #$08			and 	#NSTFloat
.96cf		d0 2c		bne $96fd			bne 	_CBCFloat
.96d1		20 00 97	jsr $9700			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.96d4		e8		inx				inx
.96d5		20 00 97	jsr $9700			jsr 	CompareFixMinusZero
.96d8		ca		dex				dex
.96d9		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.96db		55 51		eor $51,x			eor 	NSStatus+1,x
.96dd		10 0a		bpl $96e9			bpl 	_CDCSameSign
.96df		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.96e1		30 14		bmi $96f7			bmi 	_CBCLess 					; return $FF
.96e3						_CBCGreater:
.96e3		a9 01		lda #$01			lda 	#1
.96e5		60		rts				rts
.96e6						_CBCEqual:
.96e6		a9 00		lda #$00			lda 	#0
.96e8		60		rts				rts
.96e9						_CDCSameSign:
.96e9		20 15 99	jsr $9915			jsr 	SubTopTwoStack 				; unsigned subtract
.96ec		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; or the mantissa together
.96ef		f0 f5		beq $96e6			beq 	_CBCEqual 					; -0 == 0
.96f1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.96f3		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.96f5		10 ec		bpl $96e3			bpl 	_CBCGreater
.96f7						_CBCLess:
.96f7		a9 ff		lda #$ff			lda 	#$FF
.96f9		60		rts				rts
.96fa						_CBCString:
.96fa		4c 86 98	jmp $9886			jmp 	CompareStrings
.96fd						_CBCFloat:
.96fd		4c d0 9b	jmp $9bd0			jmp 	CompareFloat
.9700						CompareFixMinusZero:
.9700		20 90 a6	jsr $a690			jsr 	NSMIsZero
.9703		d0 02		bne $9707			bne 	_CFXMZNotZero
.9705		74 50		stz $50,x			stz 	NSStatus,x
.9707						_CFXMZNotZero:
.9707		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9708						StringConcat:
.9708		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.970a		35 51		and $51,x			and 	NSStatus+1,x
.970c		29 18		and #$18			and 	#NSBTypeMask
.970e		c9 10		cmp #$10			cmp 	#NSTString
.9710		d0 50		bne $9762			bne		_SCType
.9712		64 38		stz $38				stz 	zTemp1 						; counting total length
.9714		e8		inx				inx
.9715		20 33 97	jsr $9733			jsr 	_SCSetupZ0 					; setup for second
.9718		20 3c 97	jsr $973c			jsr 	_SCLengthZ0 				; length for second
.971b		ca		dex				dex
.971c		20 33 97	jsr $9733			jsr 	_SCSetupZ0 					; setup for first
.971f		20 3c 97	jsr $973c			jsr 	_SCLengthZ0 				; length for first
.9722		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9724		20 3d b8	jsr $b83d			jsr 	StringTempAllocate
.9727		20 53 97	jsr $9753			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.972a		e8		inx				inx
.972b		20 33 97	jsr $9733			jsr 	_SCSetupZ0 					; copy second out
.972e		20 53 97	jsr $9753			jsr 	_SCCopy
.9731		ca		dex				dex
.9732		60		rts				rts
.9733						_SCSetupZ0:
.9733		b5 58		lda $58,x			lda 	NSMantissa0,x
.9735		85 36		sta $36				sta 	zTemp0
.9737		b5 60		lda $60,x			lda 	NSMantissa1,x
.9739		85 37		sta $37				sta 	zTemp0+1
.973b		60		rts				rts
.973c						_SCLengthZ0:
.973c		5a		phy				phy
.973d		a0 00		ldy #$00			ldy 	#0
.973f						_SCLenLoop:
.973f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9741		f0 0e		beq $9751			beq 	_SCLExit
.9743		c8		iny				iny
.9744		e6 38		inc $38				inc 	zTemp1
.9746		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9748		c9 fd		cmp #$fd			cmp 	#253
.974a		d0 f3		bne $973f			bne		_SCLenLoop
.974c		a9 09		lda #$09		lda	#9
.974e		4c 01 96	jmp $9601		jmp	ErrorHandler
.9751						_SCLExit:
.9751		7a		ply				ply
.9752		60		rts				rts
.9753						_SCCopy:
.9753		5a		phy				phy
.9754		a0 00		ldy #$00			ldy 	#0
.9756						_SCCopyLoop:
.9756		b1 36		lda ($36),y			lda 	(zTemp0),y
.9758		f0 06		beq $9760			beq 	_SCCExit
.975a		20 76 b8	jsr $b876			jsr 	StringTempWrite
.975d		c8		iny				iny
.975e		80 f6		bra $9756			bra 	_SCCopyLoop
.9760						_SCCExit:
.9760		7a		ply				ply
.9761		60		rts				rts
.9762						_SCType:
.9762		4c f6 a7	jmp $a7f6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9765						IntegerDivide:
.9765		fa		plx				plx
.9766		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9768		15 51		ora $51,x			ora 	NSStatus+1,x
.976a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.976b		0a		asl a				asl 	a
.976c		10 05		bpl $9773			bpl 	_NotRef
.976e		48		pha				pha
.976f		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9772		68		pla				pla
.9773						_NotRef:
.9773		0a		asl a				asl 	a
.9774		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9776		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9778		15 79		ora $79,x			ora 	NSExponent+1,x
.977a		f0 03		beq $977f			beq 	_IntegerCode 				; if clear, then we have two integers
.977c		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; anything else, type mismatch.
.977f						_IntegerCode:
.977f		20 99 97	jsr $9799			jsr 	CheckDivideZero 			; do div zero check
.9782		20 cb 97	jsr $97cb			jsr 	Int32Divide 				; do the division
.9785		20 7c 98	jsr $987c			jsr 	CalculateSign 				; calculate result sign
.9788						NSMCopyPlusTwoToZero:
.9788		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.978a		95 58		sta $58,x			sta 	NSMantissa0,x
.978c		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.978e		95 60		sta $60,x			sta 	NSMantissa1,x
.9790		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9792		95 68		sta $68,x			sta 	NSMantissa2,x
.9794		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9796		95 70		sta $70,x			sta 	NSMantissa3,x
.9798		60		rts				rts
.9799						CheckDivideZero:
.9799		e8		inx				inx
.979a		20 90 a6	jsr $a690			jsr 	NSMIsZero
.979d		f0 02		beq $97a1			beq 	_CDVError
.979f		ca		dex				dex
.97a0		60		rts				rts
.97a1						_CDVError:
.97a1		a9 03		lda #$03		lda	#3
.97a3		4c 01 96	jmp $9601		jmp	ErrorHandler
.97a6						IntegerModulus:
.97a6		fa		plx				plx
.97a7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97a9		15 51		ora $51,x			ora 	NSStatus+1,x
.97ab		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ac		0a		asl a				asl 	a
.97ad		10 05		bpl $97b4			bpl 	_NotRef
.97af		48		pha				pha
.97b0		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97b3		68		pla				pla
.97b4						_NotRef:
.97b4		0a		asl a				asl 	a
.97b5		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97b7		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97b9		15 79		ora $79,x			ora 	NSExponent+1,x
.97bb		f0 03		beq $97c0			beq 	_IntegerCode 				; if clear, then we have two integers
.97bd		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; anything else, type mismatch.
.97c0						_IntegerCode:
.97c0						IntegerModulusNoCheck:
.97c0		20 99 97	jsr $9799			jsr 	CheckDivideZero 			; do div zero check
.97c3		20 cb 97	jsr $97cb			jsr 	Int32Divide 				; do the division
.97c6		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.97c8		56 50		lsr $50,x			lsr 	NSStatus,x
.97ca		60		rts				rts
.97cb						Int32Divide:
.97cb		48		pha				pha 								; save AXY
.97cc		5a		phy				phy
.97cd		20 51 a6	jsr $a651			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.97d0		20 6a a6	jsr $a66a			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.97d3		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.97d5						_I32DivideLoop:
.97d5		e8		inx				inx
.97d6		e8		inx				inx
.97d7		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.97da		ca		dex				dex
.97db		ca		dex				dex
.97dc		20 7e a6	jsr $a67e			jsr 	NSMRotateLeft
.97df		20 0a 98	jsr $980a			jsr 	DivideCheckSubtract 		; check if subtract possible
.97e2		90 02		bcc $97e6			bcc 	_I32DivideNoCarryIn
.97e4		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.97e6						_I32DivideNoCarryIn:
.97e6		88		dey				dey 								; loop round till division completed.
.97e7		d0 ec		bne $97d5			bne 	_I32DivideLoop
.97e9		7a		ply				ply 								; restore AXY and exit
.97ea		68		pla				pla
.97eb		60		rts				rts
.97ec						Int32ShiftDivide:
.97ec		48		pha				pha 								; save AY
.97ed		5a		phy				phy
.97ee		e8		inx				inx 								; clear S[X+2]
.97ef		e8		inx				inx
.97f0		20 6e a6	jsr $a66e			jsr 	NSMSetZero
.97f3		ca		dex				dex
.97f4		ca		dex				dex
.97f5		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.97f7						_I32SDLoop:
.97f7		20 0a 98	jsr $980a			jsr 	DivideCheckSubtract 		; check if subtract possible
.97fa		e8		inx				inx
.97fb		e8		inx				inx
.97fc		20 7e a6	jsr $a67e			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.97ff		ca		dex				dex
.9800		ca		dex				dex
.9801		20 7e a6	jsr $a67e			jsr 	NSMRotateLeft
.9804		88		dey				dey 	 							; do 31 times
.9805		d0 f0		bne $97f7			bne 	_I32SDLoop
.9807		7a		ply				ply 								; restore AY and exit
.9808		68		pla				pla
.9809		60		rts				rts
.980a						DivideCheckSubtract:
.980a		20 15 99	jsr $9915			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.980d		b0 04		bcs $9813			bcs 	_DCSExit 					; if carry set, then could do, exit
.980f		20 fb 98	jsr $98fb			jsr 	AddTopTwoStack 				; add it back in
.9812		18		clc				clc 								; and return False
.9813						_DCSExit:
.9813		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9814						MulInteger:
.9814		fa		plx				plx
.9815		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9817		15 51		ora $51,x			ora 	NSStatus+1,x
.9819		0a		asl a				asl 	a 							; shift reference bit into sign bit
.981a		0a		asl a				asl 	a
.981b		10 05		bpl $9822			bpl 	_NotRef
.981d		48		pha				pha
.981e		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9821		68		pla				pla
.9822						_NotRef:
.9822		0a		asl a				asl 	a 							; put MSB of type into A:7
.9823		30 09		bmi $982e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9825		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9827		15 79		ora $79,x			ora 	NSExponent+1,x
.9829		f0 06		beq $9831			beq 	_IntegerCode 				; if clear, then we have two integers
.982b		4c 92 9c	jmp $9c92			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.982e						_StringData:
.982e		4c 00 a8	jmp $a800			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9831						_IntegerCode:
.9831		20 3e 98	jsr $983e			jsr 	MultiplyShort
.9834		c9 00		cmp #$00			cmp 	#0
.9836		f0 05		beq $983d			beq 	_MIExit
.9838		a9 04		lda #$04		lda	#4
.983a		4c 01 96	jmp $9601		jmp	ErrorHandler
.983d						_MIExit:
.983d		60		rts				rts
.983e						MultiplyShort:
.983e		5a		phy				phy 								; save Y
.983f		20 51 a6	jsr $a651			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9842		20 6a a6	jsr $a66a			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9845		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9847						_I32MLoop:
.9847		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9849		15 62		ora $62,x			ora 	NSMantissa1+2,x
.984b		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.984d		15 72		ora $72,x			ora 	NSMantissa3+2,x
.984f		f0 25		beq $9876			beq 	_I32MExit 					; exit if zero
.9851		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9853		29 01		and #$01			and 	#1
.9855		f0 0d		beq $9864			beq 	_I32MNoAdd
.9857		20 fb 98	jsr $98fb			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.985a		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.985c		10 06		bpl $9864			bpl 	_I32MNoAdd
.985e						_I32ShiftRight:
.985e		20 87 a6	jsr $a687			jsr 	NSMShiftRight 				; shift S[X] right
.9861		c8		iny				iny 								; increment shift count
.9862		80 09		bra $986d			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9864						_I32MNoAdd:
.9864		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9866		70 f6		bvs $985e			bvs 	_I32ShiftRight 				; instead.
.9868		e8		inx				inx
.9869		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.986c		ca		dex				dex
.986d						_I32MShiftUpper:
.986d		e8		inx				inx 								; shift S[X+2] right
.986e		e8		inx				inx
.986f		20 87 a6	jsr $a687			jsr 	NSMShiftRight
.9872		ca		dex				dex
.9873		ca		dex				dex
.9874		80 d1		bra $9847			bra 	_I32MLoop 					; try again.
.9876						_I32MExit:
.9876		20 7c 98	jsr $987c			jsr 	CalculateSign
.9879		98		tya				tya 								; shift in A
.987a		7a		ply				ply 								; restore Y and exit
.987b		60		rts				rts
.987c						CalculateSign:
.987c		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.987e		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9880		55 51		eor $51,x			eor 	NSStatus+1,x
.9882		0a		asl a				asl 	a 							; shift bit 7 into carry
.9883		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9885		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9886						CompareStrings:
.9886		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9888		35 51		and $51,x			and 	NSStatus+1,x
.988a		29 10		and #$10			and 	#NSBIsString
.988c		f0 28		beq $98b6			beq 	_CSTypeError
.988e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9890		85 36		sta $36				sta 	zTemp0
.9892		b5 60		lda $60,x			lda 	NSMantissa1,x
.9894		85 37		sta $37				sta 	zTemp0+1
.9896		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9898		85 38		sta $38				sta 	zTemp1
.989a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.989c		85 39		sta $39				sta 	zTemp1+1
.989e		5a		phy				phy 								; save Y so we can access strings
.989f		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.98a1						_CSLoop:
.98a1		c8		iny				iny
.98a2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.98a4		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.98a6		d0 06		bne $98ae			bne 	_CSDifferent
.98a8		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.98aa		d0 f5		bne $98a1			bne 	_CSLoop 					; still comparing
.98ac						_CSExit:
.98ac		7a		ply				ply 								; reached end, return zero in A from EOS
.98ad		60		rts				rts
.98ae						_CSDifferent:
.98ae		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.98b0		90 fa		bcc $98ac			bcc		_CSExit
.98b2		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.98b4		80 f6		bra $98ac			bra 	_CSExit
.98b6						_CSTypeError:
.98b6		4c f6 a7	jmp $a7f6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.98b9						ShiftLeft:
.98b9		38		sec				sec 								; common code, carry determines which way.
.98ba		80 01		bra $98bd			bra 	ShiftMain
.98bc						ShiftRight:
.98bc		18		clc				clc
.98bd						ShiftMain:
.98bd		fa		plx				plx 								; restore X
.98be		08		php				php 								; save direction
.98bf		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98c1		15 51		ora $51,x			ora 	NSStatus+1,x
.98c3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98c4		0a		asl a				asl 	a
.98c5		10 05		bpl $98cc			bpl 	_NotRef
.98c7		48		pha				pha
.98c8		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98cb		68		pla				pla
.98cc						_NotRef:
.98cc		0a		asl a				asl 	a
.98cd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98cf		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98d1		15 79		ora $79,x			ora 	NSExponent+1,x
.98d3		f0 03		beq $98d8			beq 	_IntegerCode 				; if clear, then we have two integers
.98d5		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; anything else, type mismatch.
.98d8						_IntegerCode:
.98d8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.98da		29 e0		and #$e0			and 	#$E0
.98dc		15 61		ora $61,x			ora 	NSMantissa1+1,x
.98de		15 69		ora $69,x			ora 	NSMantissa2+1,x
.98e0		15 71		ora $71,x			ora 	NSMantissa3+1,x
.98e2		d0 12		bne $98f6			bne 	_SMExit0 					; if >= 32 it will always return zero.
.98e4						_SMLoop:
.98e4		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.98e6		30 11		bmi $98f9			bmi 	_SMExit 					; exit if done.
.98e8		28		plp				plp 								; restore direction setting
.98e9		08		php				php
.98ea		90 05		bcc $98f1			bcc 	_SMRight
.98ec		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; shift left if CS
.98ef		80 f3		bra $98e4			bra 	_SMLoop
.98f1						_SMRight:
.98f1		20 87 a6	jsr $a687			jsr 	NSMShiftRight 				; shift right if CC
.98f4		80 ee		bra $98e4			bra 	_SMLoop
.98f6						_SMExit0:
.98f6		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; return zero.
.98f9						_SMExit:
.98f9		28		plp				plp 								; throw direction
.98fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.98fb						AddTopTwoStack:
.98fb		18		clc				clc
.98fc		b5 58		lda $58,x			lda		NSMantissa0,x
.98fe		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9900		95 58		sta $58,x			sta 	NSMantissa0,x
.9902		b5 60		lda $60,x			lda		NSMantissa1,x
.9904		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9906		95 60		sta $60,x			sta 	NSMantissa1,x
.9908		b5 68		lda $68,x			lda		NSMantissa2,x
.990a		75 69		adc $69,x			adc 		NSMantissa2+1,x
.990c		95 68		sta $68,x			sta 	NSMantissa2,x
.990e		b5 70		lda $70,x			lda		NSMantissa3,x
.9910		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9912		95 70		sta $70,x			sta 	NSMantissa3,x
.9914		60		rts				rts
.9915						SubTopTwoStack:
.9915		38		sec				sec
.9916		b5 58		lda $58,x			lda		NSMantissa0,x
.9918		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.991a		95 58		sta $58,x			sta 	NSMantissa0,x
.991c		b5 60		lda $60,x			lda		NSMantissa1,x
.991e		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9920		95 60		sta $60,x			sta 	NSMantissa1,x
.9922		b5 68		lda $68,x			lda		NSMantissa2,x
.9924		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9926		95 68		sta $68,x			sta 	NSMantissa2,x
.9928		b5 70		lda $70,x			lda		NSMantissa3,x
.992a		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.992c		95 70		sta $70,x			sta 	NSMantissa3,x
.992e		60		rts				rts
.992f						AddInteger:
.992f		fa		plx				plx
.9930		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9932		15 51		ora $51,x			ora 	NSStatus+1,x
.9934		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9935		0a		asl a				asl 	a
.9936		10 05		bpl $993d			bpl 	_NotRef
.9938		48		pha				pha
.9939		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.993c		68		pla				pla
.993d						_NotRef:
.993d		0a		asl a				asl 	a 							; put MSB of type into A:7
.993e		30 09		bmi $9949			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9940		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9942		15 79		ora $79,x			ora 	NSExponent+1,x
.9944		f0 06		beq $994c			beq 	_IntegerCode 				; if clear, then we have two integers
.9946		4c 42 9b	jmp $9b42			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9949						_StringData:
.9949		4c 08 97	jmp $9708			jmp 	StringConcat							; at least one string - don't know both are strings.
.994c						_IntegerCode:
.994c						AddCode:
.994c		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.994e		55 51		eor $51,x			eor 	NSStatus+1,x
.9950		10 a9		bpl $98fb			bpl 	AddTopTwoStack
.9952		20 15 99	jsr $9915			jsr 	SubTopTwoStack 				; do a physical subtraction
.9955		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9957		10 07		bpl $9960			bpl 	_AddExit
.9959		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.995b		95 50		sta $50,x			sta 	NSStatus,x
.995d		20 37 a6	jsr $a637			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9960						_AddExit:
.9960		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; check for -0
.9963		d0 02		bne $9967			bne 	_AddNonZero
.9965		74 50		stz $50,x			stz 	NSStatus,x
.9967						_AddNonZero:
.9967		60		rts				rts
.9968						SubInteger:
.9968		fa		plx				plx
.9969		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.996b		15 51		ora $51,x			ora 	NSStatus+1,x
.996d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.996e		0a		asl a				asl 	a
.996f		10 05		bpl $9976			bpl 	_NotRef
.9971		48		pha				pha
.9972		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9975		68		pla				pla
.9976						_NotRef:
.9976		0a		asl a				asl 	a 							; put MSB of type into A:7
.9977		30 09		bmi $9982			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9979		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.997b		15 79		ora $79,x			ora 	NSExponent+1,x
.997d		f0 06		beq $9985			beq 	_IntegerCode 				; if clear, then we have two integers
.997f		4c 47 9b	jmp $9b47			jmp 	FloatingPointSub 							; otherwise at least one float.
.9982						_StringData:
.9982		4c 00 a8	jmp $a800			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9985						_IntegerCode:
.9985		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9987		49 80		eor #$80			eor 	#$80
.9989		95 51		sta $51,x			sta 	NSStatus+1,x
.998b		80 bf		bra $994c			bra 	AddCode 					; and do the same code as add.
.998d						AndInteger:
.998d		fa		plx				plx
.998e		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9990		15 51		ora $51,x			ora 	NSStatus+1,x
.9992		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9993		0a		asl a				asl 	a
.9994		10 05		bpl $999b			bpl 	_NotRef
.9996		48		pha				pha
.9997		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.999a		68		pla				pla
.999b						_NotRef:
.999b		0a		asl a				asl 	a
.999c		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.999e		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99a0		15 79		ora $79,x			ora 	NSExponent+1,x
.99a2		f0 03		beq $99a7			beq 	_IntegerCode 				; if clear, then we have two integers
.99a4		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; anything else, type mismatch.
.99a7						_IntegerCode:
.99a7		b5 58		lda $58,x			lda		NSMantissa0,x
.99a9		35 59		and $59,x			and 		NSMantissa0+1,x
.99ab		95 58		sta $58,x			sta 	NSMantissa0,x
.99ad		b5 60		lda $60,x			lda		NSMantissa1,x
.99af		35 61		and $61,x			and 		NSMantissa1+1,x
.99b1		95 60		sta $60,x			sta 	NSMantissa1,x
.99b3		b5 68		lda $68,x			lda		NSMantissa2,x
.99b5		35 69		and $69,x			and 		NSMantissa2+1,x
.99b7		95 68		sta $68,x			sta 	NSMantissa2,x
.99b9		b5 70		lda $70,x			lda		NSMantissa3,x
.99bb		35 71		and $71,x			and 		NSMantissa3+1,x
.99bd		95 70		sta $70,x			sta 	NSMantissa3,x
.99bf		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.99c1		60		rts				rts
.99c2						OraInteger:
.99c2		fa		plx				plx
.99c3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99c5		15 51		ora $51,x			ora 	NSStatus+1,x
.99c7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99c8		0a		asl a				asl 	a
.99c9		10 05		bpl $99d0			bpl 	_NotRef
.99cb		48		pha				pha
.99cc		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99cf		68		pla				pla
.99d0						_NotRef:
.99d0		0a		asl a				asl 	a
.99d1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99d3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99d5		15 79		ora $79,x			ora 	NSExponent+1,x
.99d7		f0 03		beq $99dc			beq 	_IntegerCode 				; if clear, then we have two integers
.99d9		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; anything else, type mismatch.
.99dc						_IntegerCode:
.99dc		b5 58		lda $58,x			lda		NSMantissa0,x
.99de		15 59		ora $59,x			ora 		NSMantissa0+1,x
.99e0		95 58		sta $58,x			sta 	NSMantissa0,x
.99e2		b5 60		lda $60,x			lda		NSMantissa1,x
.99e4		15 61		ora $61,x			ora 		NSMantissa1+1,x
.99e6		95 60		sta $60,x			sta 	NSMantissa1,x
.99e8		b5 68		lda $68,x			lda		NSMantissa2,x
.99ea		15 69		ora $69,x			ora 		NSMantissa2+1,x
.99ec		95 68		sta $68,x			sta 	NSMantissa2,x
.99ee		b5 70		lda $70,x			lda		NSMantissa3,x
.99f0		15 71		ora $71,x			ora 		NSMantissa3+1,x
.99f2		95 70		sta $70,x			sta 	NSMantissa3,x
.99f4		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.99f6		60		rts				rts
.99f7						EorInteger:
.99f7		fa		plx				plx
.99f8		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99fa		15 51		ora $51,x			ora 	NSStatus+1,x
.99fc		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99fd		0a		asl a				asl 	a
.99fe		10 05		bpl $9a05			bpl 	_NotRef
.9a00		48		pha				pha
.9a01		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a04		68		pla				pla
.9a05						_NotRef:
.9a05		0a		asl a				asl 	a
.9a06		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a08		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a0a		15 79		ora $79,x			ora 	NSExponent+1,x
.9a0c		f0 03		beq $9a11			beq 	_IntegerCode 				; if clear, then we have two integers
.9a0e		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; anything else, type mismatch.
.9a11						_IntegerCode:
.9a11		b5 58		lda $58,x			lda		NSMantissa0,x
.9a13		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9a15		95 58		sta $58,x			sta 	NSMantissa0,x
.9a17		b5 60		lda $60,x			lda		NSMantissa1,x
.9a19		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9a1b		95 60		sta $60,x			sta 	NSMantissa1,x
.9a1d		b5 68		lda $68,x			lda		NSMantissa2,x
.9a1f		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9a21		95 68		sta $68,x			sta 	NSMantissa2,x
.9a23		b5 70		lda $70,x			lda		NSMantissa3,x
.9a25		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9a27		95 70		sta $70,x			sta 	NSMantissa3,x
.9a29		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a2b		60		rts				rts
.9a2c						WordIndirect:
.9a2c		fa		plx				plx
.9a2d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a2f		15 51		ora $51,x			ora 	NSStatus+1,x
.9a31		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a32		0a		asl a				asl 	a
.9a33		10 05		bpl $9a3a			bpl 	_NotRef
.9a35		48		pha				pha
.9a36		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a39		68		pla				pla
.9a3a						_NotRef:
.9a3a		0a		asl a				asl 	a
.9a3b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a3d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a3f		15 79		ora $79,x			ora 	NSExponent+1,x
.9a41		f0 03		beq $9a46			beq 	_IntegerCode 				; if clear, then we have two integers
.9a43		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; anything else, type mismatch.
.9a46						_IntegerCode:
.9a46		20 4c 99	jsr $994c			jsr 	AddCode 					; add the two values
.9a49		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9a4b		95 50		sta $50,x			sta 	NSStatus,x
.9a4d		60		rts				rts
.9a4e						ByteIndirect:
.9a4e		fa		plx				plx
.9a4f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a51		15 51		ora $51,x			ora 	NSStatus+1,x
.9a53		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a54		0a		asl a				asl 	a
.9a55		10 05		bpl $9a5c			bpl 	_NotRef
.9a57		48		pha				pha
.9a58		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a5b		68		pla				pla
.9a5c						_NotRef:
.9a5c		0a		asl a				asl 	a
.9a5d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a5f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a61		15 79		ora $79,x			ora 	NSExponent+1,x
.9a63		f0 03		beq $9a68			beq 	_IntegerCode 				; if clear, then we have two integers
.9a65		4c f6 a7	jmp $a7f6			jmp 	TypeError 					; anything else, type mismatch.
.9a68						_IntegerCode:
.9a68		20 4c 99	jsr $994c			jsr 	AddCode 					; add the two values
.9a6b		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9a6d		95 50		sta $50,x			sta 	NSStatus,x
.9a6f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9a70						ConvertInt16:
.9a70		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9a72		86 60		stx $60				stx 	NSMantissa1
.9a74		64 68		stz $68				stz 	NSMantissa2
.9a76		64 70		stz $70				stz 	NSMantissa3
.9a78		64 50		stz $50				stz 	NSStatus 					; positive integer
.9a7a		a2 00		ldx #$00			ldx 	#0 							; stack level
.9a7c		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9a7e		80 00		bra $9a80			bra 	ConvertInt32
.9a80						ConvertInt32:
.9a80		5a		phy				phy
.9a81		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9a83		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9a85		10 08		bpl $9a8f			bpl 	_CI32NotNeg
.9a87		48		pha				pha
.9a88		a9 2d		lda #$2d			lda 	#'-'
.9a8a		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9a8d		c8		iny				iny
.9a8e		68		pla				pla
.9a8f						_CI32NotNeg:
.9a8f		20 9d 9a	jsr $9a9d			jsr 	_CI32DivideConvert 			; recursive conversion
.9a92		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9a94		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9a97		7a		ply				ply
.9a98		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9a9a		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9a9c		60		rts				rts
.9a9d						_CI32DivideConvert:
.9a9d		e8		inx				inx 								; write to next slot up
.9a9e		20 70 a6	jsr $a670			jsr 	NSMSetByte 		 			; write the base out.
.9aa1		ca		dex				dex
.9aa2		20 cb 97	jsr $97cb			jsr 	Int32Divide 				; divide
.9aa5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9aa7		48		pha				pha
.9aa8		20 88 97	jsr $9788			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9aab		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; is it zero ?
.9aae		f0 05		beq $9ab5			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9ab0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9ab2		20 9d 9a	jsr $9a9d			jsr 	_CI32DivideConvert 			; and recusrively call.
.9ab5						_CI32NoRecurse:
.9ab5		68		pla				pla 								; remainder
.9ab6		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9ab8		90 02		bcc $9abc			bcc 	_CI32NotHex
.9aba		69 26		adc #$26			adc 	#6+32
.9abc						_CI32NotHex:
.9abc		69 30		adc #$30			adc 	#48
.9abe		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9ac1		c8		iny				iny
.9ac2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9ac3						PrecedenceLevel:
>9ac3		04					.byte	 4	; $00 <<
>9ac4		02					.byte	 2	; $01 <=
>9ac5		02					.byte	 2	; $02 <>
>9ac6		00					.byte	 0	; $03 !!3
>9ac7		00					.byte	 0	; $04 ><
>9ac8		02					.byte	 2	; $05 >=
>9ac9		04					.byte	 4	; $06 >>
>9aca		00					.byte	 0	; $07 !!7
>9acb		00					.byte	 0	; $08 !!8
>9acc		00					.byte	 0	; $09 !!9
>9acd		00					.byte	 0	; $0a !!10
>9ace		00					.byte	 0	; $0b !!11
>9acf		00					.byte	 0	; $0c !!12
>9ad0		00					.byte	 0	; $0d !!13
>9ad1		00					.byte	 0	; $0e !!14
>9ad2		00					.byte	 0	; $0f !!15
>9ad3		00					.byte	 0	; $10 @
>9ad4		00					.byte	 0	; $11 !!17
>9ad5		00					.byte	 0	; $12 !!18
>9ad6		00					.byte	 0	; $13 [
>9ad7		04					.byte	 4	; $14 \
>9ad8		00					.byte	 0	; $15 ]
>9ad9		01					.byte	 1	; $16 ^
>9ada		00					.byte	 0	; $17 _
>9adb		00					.byte	 0	; $18 `
>9adc		00					.byte	 0	; $19 !!25
>9add		00					.byte	 0	; $1a !!26
>9ade		00					.byte	 0	; $1b {
>9adf		01					.byte	 1	; $1c |
>9ae0		00					.byte	 0	; $1d }
>9ae1		00					.byte	 0	; $1e ~
>9ae2		00					.byte	 0	; $1f <7F>
>9ae3		00					.byte	 0	; $20
>9ae4		05					.byte	 5	; $21 !
>9ae5		00					.byte	 0	; $22 "
>9ae6		00					.byte	 0	; $23 #
>9ae7		05					.byte	 5	; $24 $
>9ae8		04					.byte	 4	; $25 %
>9ae9		01					.byte	 1	; $26 &
>9aea		00					.byte	 0	; $27 '
>9aeb		00					.byte	 0	; $28 (
>9aec		00					.byte	 0	; $29 )
>9aed		04					.byte	 4	; $2a *
>9aee		03					.byte	 3	; $2b +
>9aef		00					.byte	 0	; $2c ,
>9af0		03					.byte	 3	; $2d -
>9af1		00					.byte	 0	; $2e .
>9af2		04					.byte	 4	; $2f /
>9af3		00					.byte	 0	; $30 0
>9af4		00					.byte	 0	; $31 1
>9af5		00					.byte	 0	; $32 2
>9af6		00					.byte	 0	; $33 3
>9af7		00					.byte	 0	; $34 4
>9af8		00					.byte	 0	; $35 5
>9af9		00					.byte	 0	; $36 6
>9afa		00					.byte	 0	; $37 7
>9afb		00					.byte	 0	; $38 8
>9afc		00					.byte	 0	; $39 9
>9afd		00					.byte	 0	; $3a :
>9afe		00					.byte	 0	; $3b ;
>9aff		02					.byte	 2	; $3c <
>9b00		02					.byte	 2	; $3d =
>9b01		02					.byte	 2	; $3e >
>9b02		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9b03						EvaluateExpressionAt0:
.9b03		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9b05						EvaluateExpression:
.9b05		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9b07						EvaluateExpressionAtPrecedence:
.9b07		48		pha				pha 								; save precedence level
.9b08		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm 				; evaluate term into level X.
.9b0b		68		pla				pla 								; restore precedence level.
.9b0c						_EXPRLoop:
.9b0c		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9b0e		b1 30		lda ($30),y			lda 	(codePtr),y
.9b10		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9b12		b0 25		bcs $9b39			bcs 	_EXPRExit
.9b14		da		phx				phx 								; read the operator precedence
.9b15		aa		tax				tax
.9b16		bd c3 9a	lda $9ac3,x			lda 	PrecedenceLevel,x
.9b19		fa		plx				plx
.9b1a		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9b1c		f0 1b		beq $9b39			beq 	_EXPRExit
.9b1e		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9b20		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9b22		c5 37		cmp $37				cmp 	zTemp0+1
.9b24		b0 13		bcs $9b39			bcs		_EXPRExit 					; if current >= operator exit
.9b26		48		pha				pha 								; save current precedence.
.9b27		b1 30		lda ($30),y			lda 	(codePtr),y
.9b29		c8		iny				iny
.9b2a		48		pha				pha
.9b2b		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9b2d		e8		inx				inx 								; work out the right hand side.
.9b2e		20 07 9b	jsr $9b07			jsr 	EvaluateExpressionAtPrecedence
.9b31		ca		dex				dex
.9b32		68		pla				pla 								; get operator, call the code.
.9b33		20 3c 9b	jsr $9b3c			jsr 	_EXPRCaller
.9b36		68		pla				pla 								; restore precedence level
.9b37		80 d3		bra $9b0c			bra 	_EXPRLoop 					; and go round.
.9b39						_EXPRExit:
.9b39		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9b3b		60		rts				rts
.9b3c						_EXPRCaller:
.9b3c		da		phx				phx 								; save on stack, first thing is to restore it
.9b3d		0a		asl a				asl 	a 							; double so can use vectors into X
.9b3e		aa		tax				tax
.9b3f		7c 92 91	jmp ($9192,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9b42						FloatingPointAdd:
.9b42		20 b8 9c	jsr $9cb8			jsr 	FloatPrepare 				; prepare for floats
.9b45		80 09		bra $9b50			bra 	FloatAdd
.9b47						FloatingPointSub:
.9b47		20 b8 9c	jsr $9cb8			jsr 	FloatPrepare 				; prepare for floats
.9b4a						FloatSubtract:
.9b4a		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9b4c		49 80		eor #$80			eor 	#$80
.9b4e		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9b50						FloatAdd:
.9b50		48		pha				pha
.9b51		5a		phy				phy
.9b52		20 c7 9c	jsr $9cc7			jsr 	NSNormalise 				; normalise S[X]
.9b55		f0 51		beq $9ba8			beq 	_FAReturn1
.9b57		e8		inx				inx 								; normalise S[X+1]
.9b58		20 c7 9c	jsr $9cc7			jsr 	NSNormalise
.9b5b		ca		dex				dex
.9b5c		c9 00		cmp #$00			cmp 	#0
.9b5e		f0 60		beq $9bc0			beq 	_FAExit 					; if so, just return A
.9b60		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9b62		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9b64		f0 18		beq $9b7e			beq 	_FAExponentsEqual
.9b66		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9b68		a8		tay				tay
.9b69		38		sec				sec 								; do a signed comparison of the exponents.
.9b6a		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9b6c		50 02		bvc $9b70			bvc 	_FANoSignedChange
.9b6e		49 80		eor #$80			eor 	#$80
.9b70						_FANoSignedChange:
.9b70		29 80		and #$80			and 	#$80
.9b72		10 02		bpl $9b76			bpl 	_FAHaveMax
.9b74		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9b76						_FAHaveMax:
.9b76		20 c3 9b	jsr $9bc3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9b79		e8		inx				inx
.9b7a		20 c3 9b	jsr $9bc3			jsr 	_FAShiftToExponent
.9b7d		ca		dex				dex
.9b7e						_FAExponentsEqual:
.9b7e		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9b80		55 51		eor $51,x			eor 	NSStatus+1,x
.9b82		30 0e		bmi $9b92			bmi 	_FADifferentSigns
.9b84		20 fb 98	jsr $98fb			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9b87		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9b89		10 35		bpl $9bc0			bpl 	_FAExit 					; if no, we are done.
.9b8b		20 87 a6	jsr $a687			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9b8e		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9b90		80 2e		bra $9bc0			bra 	_FAExit
.9b92						_FADifferentSigns:
.9b92		20 15 99	jsr $9915			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9b95		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9b97		10 06		bpl $9b9f			bpl 	_FACheckZero 				; if no, check for -0
.9b99		20 30 a6	jsr $a630			jsr 	NSMNegate 					; netate result
.9b9c		20 37 a6	jsr $a637			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9b9f						_FACheckZero:
.9b9f		20 90 a6	jsr $a690			jsr 	NSMIsZero	 				; check for -0
.9ba2		d0 1c		bne $9bc0			bne 	_FAExit
.9ba4		74 50		stz $50,x			stz 	NSStatus,x
.9ba6		80 18		bra $9bc0			bra 	_FAExit
.9ba8						_FAReturn1:
.9ba8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9baa		95 58		sta $58,x			sta 	NSMantissa0,x
.9bac		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9bae		95 60		sta $60,x			sta 	NSMantissa1,x
.9bb0		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9bb2		95 68		sta $68,x			sta 	NSMantissa2,x
.9bb4		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9bb6		95 70		sta $70,x			sta 	NSMantissa3,x
.9bb8		b5 79		lda $79,x			lda 	NSExponent+1,x
.9bba		95 78		sta $78,x			sta 	NSExponent,x
.9bbc		b5 51		lda $51,x			lda 	NSStatus+1,x
.9bbe		95 50		sta $50,x			sta 	NSStatus,x
.9bc0						_FAExit:
.9bc0		7a		ply				ply
.9bc1		68		pla				pla
.9bc2		60		rts				rts
.9bc3						_FAShiftToExponent:
.9bc3						_FAShiftToExponent2:
.9bc3		98		tya				tya 								; compare Y to exponent
.9bc4		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9bc6		f0 07		beq $9bcf			beq 	_FASEExit 					; exit if so.
.9bc8		20 87 a6	jsr $a687			jsr 	NSMShiftRight	 			; shift the mantissa right
.9bcb		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9bcd		80 f4		bra $9bc3			bra 	_FAShiftToExponent2
.9bcf						_FASEExit:
.9bcf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9bd0						CompareFloat:
.9bd0		20 4a 9b	jsr $9b4a			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9bd3		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9bd5		29 f8		and #$f8			and 	#$F8
.9bd7		15 68		ora $68,x			ora 	NSMantissa2,x
.9bd9		15 70		ora $70,x			ora 	NSMantissa3,x
.9bdb		f0 08		beq $9be5			beq 	_FCExit 					; zero, so approximately identical
.9bdd		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9bdf		34 50		bit $50,x			bit 	NSStatus,x
.9be1		10 02		bpl $9be5			bpl 	_FCExit
.9be3						_FCNegative:
.9be3		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9be5						_FCExit:
.9be5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9be6						FDivideCommand:
.9be6		fa		plx				plx	 								; restore stack position
.9be7		20 b8 9c	jsr $9cb8			jsr 	FloatPrepare 				; prepare for floats
.9bea						FloatDivide:
.9bea		48		pha				pha
.9beb		e8		inx				inx
.9bec		20 c7 9c	jsr $9cc7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9bef		ca		dex				dex
.9bf0		c9 00		cmp #$00			cmp 	#0
.9bf2		f0 1d		beq $9c11			beq 	_FDZero
.9bf4		20 c7 9c	jsr $9cc7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9bf7		f0 16		beq $9c0f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9bf9		20 ec 97	jsr $97ec			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9bfc		20 88 97	jsr $9788			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9bff		20 c7 9c	jsr $9cc7			jsr		NSNormalise 				; renormalise
.9c02		20 7c 98	jsr $987c			jsr 	CalculateSign 				; calculate result sign
.9c05		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9c07		38		sec				sec
.9c08		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9c0a		38		sec				sec
.9c0b		e9 1e		sbc #$1e			sbc 	#30
.9c0d		95 78		sta $78,x			sta 	NSExponent,x
.9c0f						_FDExit:
.9c0f		68		pla				pla
.9c10		60		rts				rts
.9c11						_FDZero:
.9c11		a9 03		lda #$03		lda	#3
.9c13		4c 01 96	jmp $9601		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9c16						FloatFractionalPart:
.9c16		5a		phy				phy
.9c17		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9c19		29 7f		and #$7f			and 	#$7F
.9c1b		95 50		sta $50,x			sta 	NSStatus,x
.9c1d		20 c7 9c	jsr $9cc7			jsr 	NSNormalise
.9c20		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9c22		38		sec				sec
.9c23		e9 e0		sbc #$e0			sbc 	#$E0
.9c25		90 29		bcc $9c50			bcc 	_FFPExit 					; already fractional
.9c27		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9c29		b0 22		bcs $9c4d			bcs 	_FFPZero
.9c2b		a8		tay				tay 								; put count to do in Y
.9c2c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9c2e		20 52 9c	jsr $9c52			jsr 	_FFPPartial
.9c31		95 70		sta $70,x			sta 	NSMantissa3,x
.9c33		b5 68		lda $68,x			lda 	NSMantissa2,x
.9c35		20 52 9c	jsr $9c52			jsr 	_FFPPartial
.9c38		95 68		sta $68,x			sta 	NSMantissa2,x
.9c3a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c3c		20 52 9c	jsr $9c52			jsr 	_FFPPartial
.9c3f		95 60		sta $60,x			sta 	NSMantissa1,x
.9c41		b5 58		lda $58,x			lda 	NSMantissa0,x
.9c43		20 52 9c	jsr $9c52			jsr 	_FFPPartial
.9c46		95 58		sta $58,x			sta 	NSMantissa0,x
.9c48		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; zeroed check.
.9c4b		d0 03		bne $9c50			bne 	_FFPExit
.9c4d						_FFPZero:
.9c4d		20 6e a6	jsr $a66e			jsr 	NSMSetZero
.9c50						_FFPExit:
.9c50		7a		ply				ply
.9c51		60		rts				rts
.9c52						_FFPPartial:
.9c52		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9c54		f0 17		beq $9c6d			beq 	_FFFPPExit
.9c56		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9c58		b0 0c		bcs $9c66			bcs 	_FFFPPWholeByte
.9c5a		5a		phy				phy
.9c5b						_FFFPPLeft:
.9c5b		0a		asl a				asl 	a
.9c5c		88		dey				dey
.9c5d		d0 fc		bne $9c5b			bne 	_FFFPPLeft
.9c5f		7a		ply				ply
.9c60						_FFFPPRight:
.9c60		4a		lsr a				lsr 	a
.9c61		88		dey				dey
.9c62		d0 fc		bne $9c60			bne 	_FFFPPRight
.9c64		80 07		bra $9c6d			bra 	_FFFPPExit
.9c66						_FFFPPWholeByte:
.9c66		98		tya				tya 								; subtract 8 from count
.9c67		38		sec				sec
.9c68		e9 08		sbc #$08			sbc 	#8
.9c6a		a8		tay				tay
.9c6b		a9 00		lda #$00			lda 	#0 							; and clear all
.9c6d						_FFFPPExit:
.9c6d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9c6e						FloatIntegerPart:
.9c6e		48		pha				pha
.9c6f		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9c71		f0 1d		beq $9c90			beq 	_FIPExit 					; if so do nothing
.9c73		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; is it zero ?
.9c76		f0 15		beq $9c8d			beq 	_FIPZero 					; if so return zero.
.9c78		20 c7 9c	jsr $9cc7			jsr 	NSNormalise 				; normalise
.9c7b		f0 10		beq $9c8d			beq 	_FIPZero 					; normalised to zero, exit zero
.9c7d						_FIPShift:
.9c7d		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9c7f		10 07		bpl $9c88			bpl 	_FIPCheckZero
.9c81		20 87 a6	jsr $a687			jsr 	NSMShiftRight 				; shift mantissa right
.9c84		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9c86		80 f5		bra $9c7d			bra 	_FIPShift
.9c88						_FIPCheckZero:
.9c88		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; avoid -0 problem
.9c8b		d0 03		bne $9c90			bne 	_FIPExit 					; set to zero if mantissa zero.
.9c8d						_FIPZero:
.9c8d		20 6e a6	jsr $a66e			jsr 	NSMSetZero
.9c90						_FIPExit:
.9c90		68		pla				pla
.9c91		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9c92						FloatingPointMultiply:
.9c92		20 b8 9c	jsr $9cb8			jsr 	FloatPrepare 				; prepare for floats
.9c95						FloatMultiply:
.9c95		48		pha				pha
.9c96		20 c7 9c	jsr $9cc7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c99		f0 18		beq $9cb3			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9c9b		e8		inx				inx
.9c9c		20 c7 9c	jsr $9cc7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c9f		ca		dex				dex
.9ca0		c9 00		cmp #$00			cmp 	#0
.9ca2		f0 0c		beq $9cb0			beq 	_FDSetZero
.9ca4		20 3e 98	jsr $983e			jsr 	MultiplyShort 				; calculate the result.
.9ca7		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9ca9		18		clc				clc
.9caa		75 79		adc $79,x			adc 	NSExponent+1,x
.9cac		95 78		sta $78,x			sta 	NSExponent,x
.9cae		80 03		bra $9cb3			bra 	_FDExit
.9cb0						_FDSetZero:
.9cb0		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; return 0
.9cb3						_FDExit:
.9cb3		20 c7 9c	jsr $9cc7			jsr 	NSNormalise 				; normalise the result
.9cb6		68		pla				pla
.9cb7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9cb8						FloatPrepare:
.9cb8		20 c3 9d	jsr $9dc3			jsr 	DereferenceTopTwo 			; dereference the top two values
.9cbb		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9cbd		15 51		ora $51,x			ora 	NSStatus+1,x
.9cbf		29 10		and #$10			and 	#NSBIsString
.9cc1		d0 01		bne $9cc4			bne 	_FDType
.9cc3		60		rts				rts
.9cc4						_FDType:
.9cc4		4c f6 a7	jmp $a7f6			jmp 	TypeError
.9cc7						NSNormalise:
.9cc7		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9cc9		29 80		and #$80			and 	#$80
.9ccb		09 08		ora #$08			ora 	#NSTFloat
.9ccd		95 50		sta $50,x			sta 	NSStatus,x
.9ccf		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; if zero exit
.9cd2		d0 07		bne $9cdb			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9cd4		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9cd6		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9cd8		a9 00		lda #$00			lda 	#0 							; set Z flag
.9cda		60		rts				rts
.9cdb						_NSNormaliseOptimise:
.9cdb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9cdd		d0 19		bne $9cf8			bne 	_NSNormaliseLoop
.9cdf		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9ce1		30 15		bmi $9cf8			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9ce3		95 70		sta $70,x			sta 	NSMantissa3,x
.9ce5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ce7		95 68		sta $68,x			sta 	NSMantissa2,x
.9ce9		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ceb		95 60		sta $60,x			sta 	NSMantissa1,x
.9ced		74 58		stz $58,x			stz 	NSMantissa0,x
.9cef		b5 78		lda $78,x			lda 	NSExponent,x
.9cf1		38		sec				sec
.9cf2		e9 08		sbc #$08			sbc 	#8
.9cf4		95 78		sta $78,x			sta 	NSExponent,x
.9cf6		80 e3		bra $9cdb			bra 	_NSNormaliseOptimise
.9cf8						_NSNormaliseLoop:
.9cf8		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9cfa		70 07		bvs $9d03			bvs 	_NSNExit 					; exit if so with Z flag clear
.9cfc		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; shift mantissa left
.9cff		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9d01		80 f5		bra $9cf8			bra 	_NSNormaliseLoop
.9d03						_NSNExit:
.9d03		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9d05		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d06						AssignNumber:
.9d06		5a		phy				phy
.9d07		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d09		85 36		sta $36				sta 	zTemp0
.9d0b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d0d		85 37		sta $37				sta 	zTemp0+1
.9d0f		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9d11		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d13		95 50		sta $50,x			sta 	NSStatus,x
.9d15		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d17		c9 08		cmp #$08			cmp 	#NSTFloat
.9d19		f0 24		beq $9d3f			beq 	_ANFloat
.9d1b		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9d1d		f0 03		beq $9d22			beq		_ANNotFloat
.9d1f		4c f1 a7	jmp $a7f1			jmp 	RangeError					; if it is, report an error.
.9d22						_ANNotFloat:
.9d22		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d24		29 03		and #$03			and 	#3
.9d26		d0 05		bne $9d2d			bne 	_ANByteWord
.9d28		20 4a 9d	jsr $9d4a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d2b		80 1b		bra $9d48			bra 	_ANExit
.9d2d						_ANByteWord:
.9d2d		48		pha				pha 								; save count
.9d2e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9d30		92 36		sta ($36)			sta 	(zTemp0)
.9d32		68		pla				pla
.9d33		c9 01		cmp #$01			cmp	 	#1
.9d35		f0 11		beq $9d48			beq 	_ANExit
.9d37		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9d39		a0 01		ldy #$01			ldy 	#1
.9d3b		91 36		sta ($36),y			sta 	(zTemp0),y
.9d3d		80 09		bra $9d48			bra 	_ANExit
.9d3f						_ANFloat:
.9d3f		20 4a 9d	jsr $9d4a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d42		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d44		a0 04		ldy #$04			ldy 	#4
.9d46		91 36		sta ($36),y			sta 	(zTemp0),y
.9d48						_ANExit:
.9d48		7a		ply				ply
.9d49		60		rts				rts
.9d4a						_ANCopy4PackSign:
.9d4a		a0 03		ldy #$03			ldy 	#3
.9d4c		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9d4e		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9d50		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9d52		91 36		sta ($36),y			sta 	(zTemp0),y
.9d54		88		dey				dey
.9d55		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d57		91 36		sta ($36),y			sta 	(zTemp0),y
.9d59		88		dey				dey
.9d5a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d5c		91 36		sta ($36),y			sta 	(zTemp0),y
.9d5e		88		dey				dey
.9d5f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d61		91 36		sta ($36),y			sta 	(zTemp0),y
.9d63		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9d64						AssignString:
.9d64		5a		phy				phy
.9d65		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d67		85 38		sta $38				sta 	zTemp1
.9d69		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d6b		85 39		sta $39				sta 	zTemp1+1
.9d6d		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d6f		85 36		sta $36				sta 	zTemp0
.9d71		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d73		85 37		sta $37				sta 	zTemp0+1
.9d75		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9d77		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d79		f0 23		beq $9d9e			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9d7b		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9d7c		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9d7e		e9 02		sbc #$02			sbc 	#2
.9d80		85 3c		sta $3c				sta 	zsTemp
.9d82		a0 01		ldy #$01			ldy 	#1
.9d84		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d86		e9 00		sbc #$00			sbc 	#0
.9d88		85 3d		sta $3d				sta 	zsTemp+1
.9d8a		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9d8c						_ASGetLength:
.9d8c		c8		iny				iny
.9d8d		b1 38		lda ($38),y			lda 	(zTemp1),y
.9d8f		d0 fb		bne $9d8c			bne 	_ASGetLength
.9d91		98		tya				tya 								; is this length <= current length
.9d92		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9d94		90 1e		bcc $9db4			bcc 	_ASCopyString
.9d96		f0 1c		beq $9db4			beq 	_ASCopyString
.9d98		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9d9a		a0 01		ldy #$01			ldy 	#1
.9d9c		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9d9e						_ASNewStringRequired:
.9d9e		e8		inx				inx 								; concrete the new string.
.9d9f		20 c0 b7	jsr $b7c0			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9da2		ca		dex				dex
.9da3		18		clc				clc
.9da4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9da6		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9da8		92 36		sta ($36)			sta 	(zTemp0)
.9daa		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9dac		69 00		adc #$00			adc 	#0
.9dae		a0 01		ldy #$01			ldy 	#1
.9db0		91 36		sta ($36),y			sta 	(zTemp0),y
.9db2		80 0d		bra $9dc1			bra 	_ASExit
.9db4						_ASCopyString:
.9db4		a0 00		ldy #$00			ldy 	#0
.9db6						_ASCopyLoop:
.9db6		b1 38		lda ($38),y			lda 	(zTemp1),y
.9db8		c8		iny				iny
.9db9		c8		iny				iny
.9dba		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9dbc		88		dey				dey
.9dbd		c9 00		cmp #$00			cmp 	#0
.9dbf		d0 f5		bne $9db6			bne 	_ASCopyLoop
.9dc1						_ASExit:
.9dc1		7a		ply				ply
.9dc2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9dc3						DereferenceTopTwo:
.9dc3		e8		inx				inx
.9dc4		20 c8 9d	jsr $9dc8			jsr 	Dereference 				; deref x+1
.9dc7		ca		dex				dex  								; falls through to deref x
.9dc8						Dereference:
.9dc8		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9dca		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9dcc		f0 48		beq $9e16			beq 	_DRFExit 					; not a reference, so exit.
.9dce		5a		phy				phy
.9dcf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9dd1		85 36		sta $36				sta 	zTemp0
.9dd3		b5 60		lda $60,x			lda 	NSMantissa1,x
.9dd5		85 37		sta $37				sta 	zTemp0+1
.9dd7		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9dd9		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9ddb		95 58		sta $58,x			sta 	NSMantissa0,x
.9ddd		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9ddf		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9de1		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9de3		f0 0e		beq $9df3			beq 	_DRFDereferenceTwo
.9de5		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9de7		f0 2f		beq $9e18			beq 	_DRFFull
.9de9		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9deb		29 03		and #$03			and 	#3
.9ded		f0 29		beq $9e18			beq 	_DRFFull 					; the whole word
.9def		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9df1		f0 06		beq $9df9			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9df3						_DRFDereferenceTwo:
.9df3		a0 01		ldy #$01			ldy 	#1
.9df5		b1 36		lda ($36),y			lda 	(zTemp0),y
.9df7		95 60		sta $60,x			sta 	NSMantissa1,x
.9df9						_DRFClear23:
.9df9		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9dfb		74 70		stz $70,x			stz 	NSMantissa3,x
.9dfd		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9dff		29 18		and #$18			and 	#NSBTypeMask
.9e01		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9e03		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e05		d0 0e		bne $9e15			bne 	_DRFNotString
.9e07		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9e09		15 60		ora $60,x			ora 	NSMantissa1,x
.9e0b		d0 08		bne $9e15			bne 	_DRFNotString
.9e0d		a9 17		lda #$17			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e0f		95 58		sta $58,x			sta 	NSMantissa0,x
.9e11		a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e13		95 60		sta $60,x			sta 	NSMantissa1,x
.9e15						_DRFNotString
.9e15		7a		ply				ply 								; restore Y and exit
.9e16						_DRFExit:
.9e16		60		rts				rts
.9e17						_DRFNullString:
>9e17		00						.byte 	0
.9e18						_DRFFull:
.9e18		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e1a		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e1c		95 60		sta $60,x			sta 	NSMantissa1,x
.9e1e		c8		iny				iny
.9e1f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e21		95 68		sta $68,x			sta 	NSMantissa2,x
.9e23		c8		iny				iny
.9e24		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e26		95 70		sta $70,x			sta 	NSMantissa3,x
.9e28		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9e2a		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9e2c		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e2e		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9e30		f0 05		beq $9e37			beq 	_DRFNoExponent
.9e32		c8		iny				iny 								; if not, read the exponent as well.
.9e33		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e35		95 78		sta $78,x			sta 	NSExponent,x
.9e37						_DRFNoExponent:
.9e37		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9e39		10 0a		bpl $9e45			bpl 	_DRFExit2 					; if not, then exit.
.9e3b		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9e3d		95 70		sta $70,x			sta 	NSMantissa3,x
.9e3f		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9e41		09 80		ora #$80			ora 	#NSBIsNegative
.9e43		95 50		sta $50,x			sta 	NSStatus,x
.9e45						_DRFExit2:
.9e45		7a		ply				ply
.9e46		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9e47						EncodeNumberStart:
.9e47		38		sec				sec
.9e48		80 01		bra $9e4b			bra 	EncodeNumberContinue+1
.9e4a						EncodeNumberContinue:
.9e4a		18		clc				clc
.9e4b						EncodeNumber:
.9e4b		08		php				php 								; save reset flag.
.9e4c		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9e4e		f0 12		beq $9e62			beq 	_ENIsOkay
.9e50		c9 30		cmp #$30			cmp 	#"0"
.9e52		90 04		bcc $9e58			bcc 	_ENBadNumber
.9e54		c9 3a		cmp #$3a			cmp 	#"9"+1
.9e56		90 0a		bcc $9e62			bcc 	_ENIsOkay
.9e58						_ENBadNumber:
.9e58		28		plp				plp 								; throw saved reset
.9e59		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9e5c		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e5e		f0 7b		beq $9edb			beq 	_ENConstructFinal
.9e60						_ENFail:
.9e60		18		clc				clc 								; not allowed
.9e61		60		rts				rts
.9e62						_ENIsOkay:
.9e62		28		plp				plp 								; are we restarting
.9e63		90 15		bcc $9e7a			bcc 	_ENNoRestart
.9e65						_ENStartEncode:
.9e65		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9e67		f0 0c		beq $9e75			beq 	_ENFirstDP
.9e69		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9e6b		20 70 a6	jsr $a670			jsr 	NSMSetByte 					; in single byte mode.
.9e6e		a9 01		lda #$01			lda 	#ESTA_Low
.9e70						_ENExitChange:
.9e70		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9e73		38		sec				sec
.9e74		60		rts				rts
.9e75						_ENFirstDP:
.9e75		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; clear integer part
.9e78		80 3c		bra $9eb6			bra 	_ESTASwitchFloat			; go straight to float and exi
.9e7a						_ENNoRestart:
.9e7a		48		pha				pha 								; save digit or DP on stack.
.9e7b		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9e7e		c9 01		cmp #$01			cmp 	#ESTA_Low
.9e80		f0 09		beq $9e8b			beq  	_ESTALowState
.9e82		c9 02		cmp #$02			cmp 	#ESTA_High
.9e84		f0 26		beq $9eac			beq 	_ESTAHighState
.9e86		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e88		f0 38		beq $9ec2			beq 	_ESTADecimalState
>9e8a		db						.byte 	$DB 						; causes a break in the emulator
.9e8b						_ESTALowState:
.9e8b		68		pla				pla 								; get value back
.9e8c		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9e8e		f0 26		beq $9eb6			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9e90		29 0f		and #$0f			and 	#15 						; make digit
.9e92		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9e95		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9e97		0a		asl a				asl 	a
.9e98		0a		asl a				asl 	a
.9e99		75 58		adc $58,x			adc 	NSMantissa0,x
.9e9b		0a		asl a				asl 	a
.9e9c		6d 06 04	adc $0406			adc 	digitTemp
.9e9f		95 58		sta $58,x			sta 	NSMantissa0,x
.9ea1		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9ea3		90 05		bcc $9eaa			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9ea5		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9ea7		8d 05 04	sta $0405			sta 	encodeState
.9eaa						_ESTANoSwitch:
.9eaa		38		sec				sec
.9eab		60		rts				rts
.9eac						_ESTAHighState:
.9eac		68		pla				pla 								; get value back
.9ead		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9eaf		f0 05		beq $9eb6			beq 	_ESTASwitchFloat
.9eb1		20 0f 9f	jsr $9f0f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9eb4		38		sec				sec
.9eb5		60		rts				rts
.9eb6						_ESTASwitchFloat:
.9eb6		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9eb9		e8		inx				inx 								; zero the decimal additive.
.9eba		20 6e a6	jsr $a66e			jsr 	NSMSetZero
.9ebd		ca		dex				dex
.9ebe		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9ec0		80 ae		bra $9e70			bra 	_ENExitChange
.9ec2						_ESTADecimalState:
.9ec2		68		pla				pla 								; digit.
.9ec3		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9ec5		f0 99		beq $9e60			beq 	_ENFail
.9ec7		e8		inx				inx 								; put digit into fractional part of X+1
.9ec8		20 0f 9f	jsr $9f0f			jsr 	ESTAShiftDigitIntoMantissa
.9ecb		ca		dex				dex
.9ecc		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9ecf		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9ed2		c9 0b		cmp #$0b			cmp 	#11
.9ed4		f0 02		beq $9ed8			beq 	_ESTADSFail
.9ed6		38		sec				sec
.9ed7		60		rts				rts
.9ed8						_ESTADSFail:
.9ed8		4c f1 a7	jmp $a7f1			jmp 	RangeError
.9edb						_ENConstructFinal:
.9edb		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9ede		f0 2d		beq $9f0d			beq 	_ENCFExit 					; no decimals
.9ee0		5a		phy				phy
.9ee1		0a		asl a				asl 	a 							; x 4 and CLC
.9ee2		0a		asl a				asl 	a
.9ee3		6d 07 04	adc $0407			adc 	decimalCount
.9ee6		a8		tay				tay
.9ee7		b9 b0 a7	lda $a7b0,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9eea		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9eec		b9 b1 a7	lda $a7b1,y			lda 	DecimalScalarTable-5+1,y
.9eef		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9ef1		b9 b2 a7	lda $a7b2,y			lda 	DecimalScalarTable-5+2,y
.9ef4		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9ef6		b9 b3 a7	lda $a7b3,y			lda 	DecimalScalarTable-5+3,y
.9ef9		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9efb		b9 b4 a7	lda $a7b4,y			lda 	DecimalScalarTable-5+4,y
.9efe		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9f00		a9 08		lda #$08			lda 	#NSTFloat
.9f02		95 52		sta $52,x			sta 	NSStatus+2,x
.9f04		7a		ply				ply
.9f05		e8		inx				inx 								; multiply decimal const by decimal scalar
.9f06		20 95 9c	jsr $9c95			jsr 	FloatMultiply
.9f09		ca		dex				dex
.9f0a		20 50 9b	jsr $9b50			jsr 	FloatAdd 					; add to integer part.
.9f0d						_ENCFExit:
.9f0d		18		clc				clc 								; reject the digit.
.9f0e		60		rts				rts
.9f0f						ESTAShiftDigitIntoMantissa:
.9f0f		29 0f		and #$0f			and 	#15 						; save digit
.9f11		48		pha				pha
.9f12		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f14		48		pha				pha
.9f15		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f17		48		pha				pha
.9f18		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f1a		48		pha				pha
.9f1b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f1d		48		pha				pha
.9f1e		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; x 2
.9f21		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; x 4
.9f24		18		clc				clc 								; pop mantissa and add
.9f25		68		pla				pla
.9f26		75 58		adc $58,x			adc 	NSMantissa0,x
.9f28		95 58		sta $58,x			sta 	NSMantissa0,x
.9f2a		68		pla				pla
.9f2b		75 60		adc $60,x			adc 	NSMantissa1,x
.9f2d		95 60		sta $60,x			sta 	NSMantissa1,x
.9f2f		68		pla				pla
.9f30		75 68		adc $68,x			adc 	NSMantissa2,x
.9f32		95 68		sta $68,x			sta 	NSMantissa2,x
.9f34		68		pla				pla
.9f35		75 70		adc $70,x			adc 	NSMantissa3,x
.9f37		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9f39		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; x 10
.9f3c		68		pla				pla 								; add digit
.9f3d		18		clc				clc
.9f3e		75 58		adc $58,x			adc 	NSMantissa0,x
.9f40		95 58		sta $58,x			sta 	NSMantissa0,x
.9f42		90 0a		bcc $9f4e			bcc 	_ESTASDExit
.9f44		f6 60		inc $60,x			inc 	NSMantissa1,x
.9f46		d0 06		bne $9f4e			bne 	_ESTASDExit
.9f48		f6 68		inc $68,x			inc 	NSMantissa2,x
.9f4a		d0 02		bne $9f4e			bne 	_ESTASDExit
.9f4c		f6 70		inc $70,x			inc 	NSMantissa3,x
.9f4e						_ESTASDExit:
.9f4e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9f4f						EvaluateTerm:
.9f4f		b1 30		lda ($30),y			lda 	(codePtr),y
.9f51		30 18		bmi $9f6b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9f53		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9f55		b0 6c		bcs $9fc3			bcs 	_ETVariable
.9f57		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9f59		90 6b		bcc $9fc6			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9f5b		c9 3a		cmp #$3a			cmp 	#'9'+1
.9f5d		b0 67		bcs $9fc6			bcs 	_ETPuncUnary
.9f5f		20 47 9e	jsr $9e47			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9f62						_ETNumber:
.9f62		c8		iny				iny 								; keep encoding until we have the numbers
.9f63		b1 30		lda ($30),y			lda 	(codePtr),y
.9f65		20 4a 9e	jsr $9e4a			jsr 	EncodeNumberContinue
.9f68		b0 f8		bcs $9f62			bcs 	_ETNumber 					; go back if accepted.
.9f6a		60		rts				rts
.9f6b						_ETCheckUnary:
.9f6b		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9f6d		f0 3f		beq $9fae			beq 	_ETString
.9f6f		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9f71		f0 12		beq $9f85			beq 	_ETHexConstant
.9f73		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9f75		90 0b		bcc $9f82			bcc 	_ETSyntaxError
.9f77		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1
.9f79		b0 07		bcs $9f82			bcs 	_ETSyntaxError
.9f7b		da		phx				phx 								; push X on the stack
.9f7c		0a		asl a				asl 	a 							; put vector x 2 into X
.9f7d		aa		tax				tax
.9f7e		c8		iny				iny 								; consume unary function token
.9f7f		7c 12 92	jmp ($9212,x)			jmp 	(VectorSet0,x) 				; and do it.
.9f82						_ETSyntaxError:
.9f82		4c ec a7	jmp $a7ec			jmp 	SyntaxError
.9f85						_ETHexConstant:
.9f85		c8		iny				iny 								; skip #
.9f86		c8		iny				iny 								; skip count
.9f87		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; clear result
.9f8a						_ETHLoop:
.9f8a		b1 30		lda ($30),y			lda 	(codePtr),y
.9f8c		c8		iny				iny 								; and consume
.9f8d		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9f8f		f0 1c		beq $9fad			beq 	_ETHExit
.9f91		48		pha				pha 								; save on stack.
.9f92		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; x 2
.9f95		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; x 4
.9f98		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; x 8
.9f9b		20 7d a6	jsr $a67d			jsr 	NSMShiftLeft 				; x 16
.9f9e		68		pla				pla 								; ASCII
.9f9f		c9 41		cmp #$41			cmp 	#'A'
.9fa1		90 02		bcc $9fa5			bcc 	_ETHNotChar
.9fa3		e9 07		sbc #$07			sbc 	#7
.9fa5						_ETHNotChar:
.9fa5		29 0f		and #$0f			and 	#15 						; digit now
.9fa7		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9fa9		95 58		sta $58,x			sta 	NSMantissa0,x
.9fab		80 dd		bra $9f8a			bra 	_ETHLoop 					; go round.
.9fad						_ETHExit:
.9fad		60		rts				rts
.9fae						_ETString:
.9fae		c8		iny				iny 								; look at length
.9faf		b1 30		lda ($30),y			lda 	(codePtr),y
.9fb1		48		pha				pha
.9fb2		c8		iny				iny 								; first character
.9fb3		20 e8 ad	jsr $ade8			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9fb6		68		pla				pla 								; restore count and save
.9fb7		85 36		sta $36				sta 	zTemp0
.9fb9		98		tya				tya 								; add length to Y to skip it.
.9fba		18		clc				clc
.9fbb		65 36		adc $36				adc 	zTemp0
.9fbd		a8		tay				tay
.9fbe		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9fc0		95 50		sta $50,x			sta 	NSStatus,x
.9fc2		60		rts				rts
.9fc3						_ETVariable:
.9fc3		4c 18 a0	jmp $a018			jmp 	VariableHandler
.9fc6						_ETPuncUnary:
.9fc6		c8		iny				iny 								; consume the unary character
.9fc7		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9fc9		f0 2b		beq $9ff6			beq 	_ETUnaryNegate
.9fcb		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; @ reference -> constant
.9fcd		f0 36		beq $a005			beq 	_ETDereference
.9fcf		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9fd1		f0 3e		beq $a011			beq 	_ETParenthesis
.9fd3		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9fd5		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9fd7		f0 06		beq $9fdf			beq 	_ETIndirection
.9fd9		e6 36		inc $36				inc 	zTemp0
.9fdb		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9fdd		d0 a3		bne $9f82			bne 	_ETSyntaxError
.9fdf						_ETIndirection:
.9fdf		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9fe1		1a		inc a				inc 	a
.9fe2		48		pha				pha
.9fe3		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm				; evaluate the term
.9fe6		20 c8 9d	jsr $9dc8			jsr 	Dereference 				; dereference it.
.9fe9		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9feb		d0 06		bne $9ff3			bne 	_ETTypeMismatch
.9fed		68		pla				pla 								; indirection 1-2
.9fee		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9ff0		95 50		sta $50,x			sta 	NSStatus,x
.9ff2		60		rts				rts
.9ff3						_ETTypeMismatch:
.9ff3		4c f6 a7	jmp $a7f6			jmp 	TypeError
.9ff6						_ETUnaryNegate:
.9ff6		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm				; evaluate the term
.9ff9		20 c8 9d	jsr $9dc8			jsr 	Dereference 				; dereference it.
.9ffc		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9ffe		29 10		and #$10			and 	#NSTString
.a000		d0 f1		bne $9ff3			bne 	_ETTypeMismatch
.a002		4c 30 a6	jmp $a630			jmp 	NSMNegate  					; just toggles the sign bit.
.a005						_ETDereference:
.a005		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm				; evaluate the term
.a008		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a00a		29 20		and #$20			and 	#NSBIsReference
.a00c		f0 e5		beq $9ff3			beq 	_ETTypeMismatch
.a00e		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a010		60		rts				rts
.a011						_ETParenthesis:
.a011		20 05 9b	jsr $9b05			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a014		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; check for )
.a017		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a018						VariableHandler:
.a018		b1 30		lda ($30),y			lda 	(codePtr),y
.a01a		18		clc				clc
.a01b		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a01d		85 37		sta $37				sta 	zTemp0+1
.a01f		c8		iny				iny
.a020		b1 30		lda ($30),y			lda 	(codePtr),y
.a022		85 36		sta $36				sta 	zTemp0
.a024		c8		iny				iny
.a025		18		clc				clc									; copy variable address+3 to mantissa
.a026		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a028		95 58		sta $58,x			sta 	NSMantissa0,x
.a02a		a5 37		lda $37				lda 	zTemp0+1
.a02c		69 00		adc #$00			adc 	#0
.a02e		95 60		sta $60,x			sta 	NSMantissa1,x
.a030		74 68		stz $68,x			stz 	NSMantissa2,x
.a032		74 70		stz $70,x			stz 	NSMantissa3,x
.a034		74 78		stz $78,x			stz 	NSExponent,x
.a036		5a		phy				phy
.a037		a0 02		ldy #$02			ldy 	#2 							; read type
.a039		b1 36		lda ($36),y			lda 	(zTemp0),y
.a03b		7a		ply				ply
.a03c		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a03e		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a040		95 50		sta $50,x			sta 	NSStatus,x
.a042		29 04		and #$04			and 	#NSBIsArray
.a044		d0 01		bne $a047			bne 	_VHArray
.a046		60		rts				rts
.a047						_VHArray:
.a047		e8		inx				inx
.a048		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a04b		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a04d		95 51		sta $51,x			sta 	NSStatus+1,x
.a04f		b1 30		lda ($30),y			lda 	(codePtr),y
.a051		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a053		d0 06		bne $a05b			bne 	_VHNoSecondIndex
.a055		c8		iny				iny 								; skip the comma
.a056		e8		inx				inx
.a057		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a05a		ca		dex				dex
.a05b						_VHNoSecondIndex:
.a05b		ca		dex				dex 								; set X back.
.a05c		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; and check the right bracket.
.a05f		5a		phy				phy 								; save position
.a060		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a062		85 3e		sta $3e				sta 	zaTemp
.a064		b5 60		lda $60,x			lda 	NSMantissa1,x
.a066		85 3f		sta $3f				sta 	zaTemp+1
.a068		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a06a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a06c		f0 5d		beq $a0cb			beq 	_VHBadArray
.a06e		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a070		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a072		f0 02		beq $a076			beq 	_VHHas2Mask
.a074		a9 ff		lda #$ff			lda 	#$FF
.a076						_VHHas2Mask:
.a076		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a078		f0 4c		beq $a0c6			beq 	_VHBadIndex
.a07a		0a		asl a				asl 	a 							; carry will be set if a second index
.a07b		90 08		bcc $a085			bcc 	_VHCheckFirstIndex
.a07d		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a07f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a081		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a083		90 41		bcc $a0c6			bcc 	_VHBadIndex
.a085						_VHCheckFirstIndex:
.a085		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a087		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a089		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a08b		90 39		bcc $a0c6			bcc 	_VHBadIndex
.a08d		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a08f		64 37		stz $37				stz 	zTemp0+1
.a091		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a093		30 0e		bmi $a0a3			bmi 	_VHNoMultiply
.a095		da		phx				phx
.a096		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a098		48		pha				pha
.a099		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a09b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a09d		1a		inc a				inc 	a 							; add 1 for zero base
.a09e		fa		plx				plx
.a09f		20 19 a6	jsr $a619			jsr 	Multiply8x8 				; calculate -> Z0
.a0a2		fa		plx				plx
.a0a3						_VHNoMultiply:
.a0a3		18		clc				clc
.a0a4		a5 36		lda $36				lda 	zTemp0
.a0a6		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a0a8		85 36		sta $36				sta 	zTemp0
.a0aa		a5 37		lda $37				lda 	zTemp0+1
.a0ac		69 00		adc #$00			adc 	#0
.a0ae		85 37		sta $37				sta 	zTemp0+1
.a0b0		b5 50		lda $50,x			lda 	NSStatus,x
.a0b2		20 18 88	jsr $8818			jsr 	ScaleByBaseType
.a0b5		18		clc				clc
.a0b6		b2 3e		lda ($3e)			lda 	(zaTemp)
.a0b8		65 36		adc $36				adc 	zTemp0
.a0ba		95 58		sta $58,x			sta 	NSMantissa0,x
.a0bc		a0 01		ldy #$01			ldy 	#1
.a0be		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0c0		65 37		adc $37				adc 	zTemp0+1
.a0c2		95 60		sta $60,x			sta 	NSMantissa1,x
.a0c4		7a		ply				ply 								; restore position
.a0c5		60		rts				rts
.a0c6						_VHBadIndex:
.a0c6		a9 17		lda #$17		lda	#23
.a0c8		4c 01 96	jmp $9601		jmp	ErrorHandler
.a0cb						_VHBadArray:
.a0cb		a9 18		lda #$18		lda	#24
.a0cd		4c 01 96	jmp $9601		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a0d0						AbsUnary:
.a0d0		fa		plx				plx 								; restore stack pos
.a0d1		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber 				; get a float or int
.a0d4		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a0d7		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a0d9		29 7f		and #$7f			and 	#$7F
.a0db		95 50		sta $50,x			sta 	NSStatus,x
.a0dd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a0de						AllocUnary:
.a0de		fa		plx				plx 								; restore stack pos
.a0df		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger		; get bytes required.
.a0e2		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a0e5		da		phx				phx 								; save X/Y
.a0e6		5a		phy				phy
.a0e7		8a		txa				txa 								; copy X into Y
.a0e8		a8		tay				tay
.a0e9		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a0ec		aa		tax				tax
.a0ed		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a0f0		20 fd a0	jsr $a0fd			jsr 	AllocateXABytes 			; allocate memory
.a0f3		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a0f6		8a		txa				txa 	 							; typing is 16 bit integer.
.a0f7		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a0fa		7a		ply				ply
.a0fb		fa		plx				plx
.a0fc		60		rts				rts
.a0fd						AllocateXABytes:
.a0fd		5a		phy				phy
.a0fe		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a101		84 36		sty $36				sty 	zTemp0
.a103		5a		phy				phy
.a104		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a107		84 37		sty $37				sty 	zTemp0+1
.a109		5a		phy				phy
.a10a		18		clc				clc 								; add to low memory pointer
.a10b		6d 08 04	adc $0408			adc 	lowMemPtr
.a10e		8d 08 04	sta $0408			sta 	lowMemPtr
.a111		8a		txa				txa
.a112		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a115		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a118		b0 2f		bcs $a149			bcs 	CISSMemory
.a11a		20 3b a1	jsr $a13b			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a11d						_ClearMemory:
.a11d		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a120		c5 36		cmp $36				cmp 	zTemp0
.a122		d0 07		bne $a12b			bne 	_CMClearNext
.a124		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a127		c5 37		cmp $37				cmp 	zTemp0+1
.a129		f0 0c		beq $a137			beq 	_CMExit
.a12b						_CMClearNext:
.a12b		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a12d		92 36		sta ($36)			sta 	(zTemp0)
.a12f		e6 36		inc $36				inc 	zTemp0
.a131		d0 ea		bne $a11d			bne 	_ClearMemory
.a133		e6 37		inc $37				inc		zTemp0+1
.a135		80 e6		bra $a11d			bra 	_ClearMemory
.a137						_CMExit:
.a137		fa		plx				plx
.a138		68		pla				pla
.a139		7a		ply				ply
.a13a		60		rts				rts
.a13b						CheckIdentifierStringSpace:
.a13b		48		pha				pha
.a13c		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a13f		18		clc				clc
.a140		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a142		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a145		b0 02		bcs $a149			bcs 	CISSMemory
.a147		68		pla				pla
.a148		60		rts				rts
.a149						CISSMemory:
.a149		a9 06		lda #$06		lda	#6
.a14b		4c 01 96	jmp $9601		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a14e						AscUnary:
.a14e		fa		plx				plx 								; restore stack pos
.a14f		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; get a string
.a152		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a154		20 70 a6	jsr $a670			jsr 	NSMSetByte 					; ASC("") will return zero.
.a157		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a15a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a15b						FracUnary:
.a15b		fa		plx				plx 								; restore stack pos
.a15c		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber 				; get a float or int
.a15f		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a162		b5 50		lda $50,x			lda 	NSStatus,x
.a164		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a166		f0 04		beq $a16c			beq 	_IUZero
.a168		20 16 9c	jsr $9c16			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a16b		60		rts				rts
.a16c						_IUZero:
.a16c		20 6e a6	jsr $a66e			jsr 	NSMSetZero
.a16f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a170						IntUnary:
.a170		fa		plx				plx 								; restore stack pos
.a171		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber 				; get a float or int
.a174		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a177		b5 50		lda $50,x			lda 	NSStatus,x
.a179		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a17b		f0 03		beq $a180			beq 	_IUExit
.a17d		20 6e 9c	jsr $9c6e			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a180						_IUExit:
.a180		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a181						LenUnary:
.a181		fa		plx				plx 								; restore stack pos
.a182		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; get a string
.a185		5a		phy				phy
.a186		a0 00		ldy #$00			ldy 	#0 							; find length
.a188						_LenFind:
.a188		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a18a		f0 06		beq $a192			beq 	_LenExit
.a18c		c8		iny				iny
.a18d		d0 f9		bne $a188			bne 	_LenFind
.a18f		4c f1 a7	jmp $a7f1			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a192						_LenExit:
.a192		98		tya				tya		 							; return length
.a193		20 70 a6	jsr $a670			jsr 	NSMSetByte
.a196		7a		ply				ply
.a197		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a19a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a19b						Unary_Min:
.a19b		a9 01		lda #$01			lda 	#1
.a19d		80 02		bra $a1a1			bra 	UnaryMinMaxMain
.a19f						Unary_Max:
.a19f		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a1a1						UnaryMinMaxMain:
.a1a1		fa		plx				plx 								; get index on number stack
.a1a2		48		pha				pha 								; save comparator
.a1a3		20 b3 a5	jsr $a5b3			jsr 	EvaluateValue 				; get the first value.
.a1a6						_UMMMLoop:
.a1a6		b1 30		lda ($30),y			lda 	(codePtr),y
.a1a8		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a1aa		f0 22		beq $a1ce			beq 	_UMMMDone
.a1ac		20 f0 95	jsr $95f0			jsr 	CheckComma 					; must be a comma
.a1af		e8		inx				inx
.a1b0		20 b3 a5	jsr $a5b3			jsr 	EvaluateValue
.a1b3		ca		dex				dex
.a1b4		20 51 a6	jsr $a651			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a1b7		e8		inx				inx
.a1b8		20 51 a6	jsr $a651			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a1bb		e8		inx				inx
.a1bc		20 b8 96	jsr $96b8			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a1bf		ca		dex				dex
.a1c0		ca		dex				dex
.a1c1		85 36		sta $36				sta 	zTemp0 						; save required result
.a1c3		68		pla				pla 								; get and save comparator
.a1c4		48		pha				pha
.a1c5		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a1c7		d0 dd		bne $a1a6			bne 	_UMMMLoop
.a1c9		20 d1 a1	jsr $a1d1			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a1cc		80 d8		bra $a1a6			bra 	_UMMMLoop
.a1ce						_UMMMDone:
.a1ce		68		pla				pla 								; throw the comparator
.a1cf		c8		iny				iny 								; skip )
.a1d0		60		rts				rts
.a1d1						ExpCopyAboveDown:
.a1d1		b5 51		lda $51,x			lda 	NSStatus+1,x
.a1d3		95 50		sta $50,x			sta 	NSStatus,x
.a1d5		b5 79		lda $79,x			lda 	NSExponent+1,x
.a1d7		95 78		sta $78,x			sta 	NSExponent,x
.a1d9		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a1db		95 58		sta $58,x			sta 	NSMantissa0,x
.a1dd		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a1df		95 60		sta $60,x			sta 	NSMantissa1,x
.a1e1		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a1e3		95 68		sta $68,x			sta 	NSMantissa2,x
.a1e5		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a1e7		95 70		sta $70,x			sta 	NSMantissa3,x
.a1e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a1ea						Unary_Not:
.a1ea		fa		plx				plx
.a1eb		20 db a5	jsr $a5db			jsr 	EvaluateInteger 			; get integer
.a1ee		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a1f1		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; zero mantissa ?
.a1f4		f0 04		beq $a1fa			beq 	_NotZero
.a1f6		20 6e a6	jsr $a66e			jsr 	NSMSetZero
.a1f9		60		rts				rts
.a1fa						_NotZero:
.a1fa		4c 6e 96	jmp $966e			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a1fd						PeekByteUnary:
.a1fd		a9 01		lda #$01			lda 	#1
.a1ff		80 0a		bra $a20b			bra 	PeekUnary
.a201						PeekWUnary:
.a201		a9 02		lda #$02			lda 	#2
.a203		80 06		bra $a20b			bra 	PeekUnary
.a205						PeekLUnary:
.a205		a9 03		lda #$03			lda 	#3
.a207		80 02		bra $a20b			bra 	PeekUnary
.a209						PeekDUnary:
.a209		a9 04		lda #$04			lda 	#4
.a20b						PeekUnary:
.a20b		fa		plx				plx 								; restore position.
.a20c		48		pha				pha 								; save count to copy on stack
.a20d		20 ee a5	jsr $a5ee			jsr		Evaluate16BitInteger 		; address as constant.
.a210		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a213		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a215		85 36		sta $36				sta 	zTemp0
.a217		b5 60		lda $60,x			lda 	NSMantissa1,x
.a219		85 37		sta $37				sta 	zTemp0+1
.a21b		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; clear the result to zero.
.a21e		68		pla				pla 								; count in zTemp2
.a21f		85 3a		sta $3a				sta 	zTemp2
.a221		da		phx				phx 								; save stack position and offset of read
.a222		5a		phy				phy
.a223		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a225						_PULoop:
.a225		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a227		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a229		c8		iny				iny 								; next byte to write
.a22a		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a22b		18		clc				clc
.a22c		69 08		adc #$08			adc 	#MathStackSize
.a22e		aa		tax				tax
.a22f		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a231		d0 f2		bne $a225			bne 	_PULoop
.a233		7a		ply				ply 								; restore stack/code pos and exit.
.a234		fa		plx				plx
.a235		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a236						Unary_Random:
.a236		fa		plx				plx
.a237		20 87 a2	jsr $a287			jsr 	URCopyToMantissa  			; put random # in mantissa
.a23a		b1 30		lda ($30),y			lda 	(codePtr),y
.a23c		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a23e		f0 08		beq $a248			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a240		e8		inx				inx
.a241		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a244		ca		dex				dex
.a245		20 c0 97	jsr $97c0			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a248						_URNoModulus:
.a248		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a24a		74 78		stz $78,x			stz 	NSExponent,x
.a24c		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a24f		60		rts				rts
.a250						Unary_Rnd:
.a250		fa		plx				plx
.a251		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber 				; number to use.
.a254		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; closing bracket
.a257		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a259		10 20		bpl $a27b			bpl 	_URDontSeed
.a25b		a5 01		lda $01				lda 	1 							; switch to page 0
.a25d		48		pha				pha
.a25e		64 01		stz $01				stz 	1
.a260		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a262		49 17		eor #$17			eor 	#$17
.a264		8d a4 d6	sta $d6a4			sta 	$D6A4
.a267		b5 60		lda $60,x			lda 	NSMantissa1,x
.a269		49 a5		eor #$a5			eor 	#$A5
.a26b		8d a5 d6	sta $d6a5			sta 	$D6A5
.a26e		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a270		8d a6 d6	sta $d6a6			sta 	$D6A6
.a273		a9 01		lda #$01			lda 	#1
.a275		8d a6 d6	sta $d6a6			sta 	$D6A6
.a278		68		pla				pla
.a279		85 01		sta $01				sta 	1
.a27b						_URDontSeed:
.a27b		20 87 a2	jsr $a287			jsr 	URCopyToMantissa 			; copy into mantissa
.a27e		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a280		95 78		sta $78,x			sta 	NSExponent,x
.a282		a9 08		lda #$08			lda 	#NSTFloat
.a284		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a286		60		rts				rts
.a287						URCopyToMantissa:
.a287		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a289		48		pha				pha
.a28a		64 01		stz $01				stz 	1
.a28c		a9 01		lda #$01			lda 	#1
.a28e		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a291		ad a4 d6	lda $d6a4			lda 	$D6A4
.a294		95 58		sta $58,x			sta 	NSMantissa0,x
.a296		ad a5 d6	lda $d6a5			lda 	$D6A5
.a299		95 60		sta $60,x			sta 	NSMantissa1,x
.a29b		ad a4 d6	lda $d6a4			lda 	$D6A4
.a29e		95 68		sta $68,x			sta 	NSMantissa2,x
.a2a0		ad a5 d6	lda $d6a5			lda 	$D6A5
.a2a3		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a2a5		95 70		sta $70,x			sta 	NSMantissa3,x
.a2a7		68		pla				pla
.a2a8		85 01		sta $01				sta 	1
.a2aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a2ab						SgnUnary:
.a2ab		fa		plx				plx 								; restore stack pos
.a2ac		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber 				; get a float or int
.a2af		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a2b2		20 90 a6	jsr $a690			jsr 	NSMIsZero 					; if zero
.a2b5		f0 0e		beq $a2c5			beq 	_SGZero  					; return Int Zero
.a2b7		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a2b9		48		pha				pha
.a2ba		a9 01		lda #$01			lda 	#1 							; set to 1
.a2bc		20 70 a6	jsr $a670			jsr 	NSMSetByte
.a2bf		68		pla				pla
.a2c0		29 80		and #$80			and		#$80 						; copy the sign byte out
.a2c2		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a2c4		60		rts				rts
.a2c5		20 6e a6	jsr $a66e	_SGZero:jsr 	NSMSetZero
.a2c8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a2c9						ValUnary:
.a2c9		fa		plx				plx 								; restore stack pos
.a2ca		20 df a2	jsr $a2df			jsr 	ValMainCode 				; do the main val() code
.a2cd		b0 01		bcs $a2d0			bcs 	_VUError 					; couldn't convert
.a2cf		60		rts				rts
.a2d0						_VUError:
.a2d0		4c f6 a7	jmp $a7f6			jmp 	TypeError
.a2d3						IsValUnary:
.a2d3		fa		plx				plx 								; restore stack pos
.a2d4		20 df a2	jsr $a2df			jsr 	ValMainCode 				; do the main val() code
.a2d7		b0 03		bcs $a2dc			bcs 	_VUBad
.a2d9		4c 6e 96	jmp $966e			jmp 	ReturnTrue
.a2dc						_VUBad:
.a2dc		4c 79 96	jmp $9679			jmp 	ReturnFalse
.a2df						ValMainCode:
.a2df		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; get a string
.a2e2		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; check right bracket present
.a2e5						ValEvaluateZTemp0:
.a2e5		5a		phy				phy
.a2e6		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a2e8		f0 17		beq $a301			beq 	_VMCFail2
.a2ea		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a2ec		48		pha				pha 								; save first character
.a2ed		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a2ef		d0 01		bne $a2f2			bne 	_VMCStart
.a2f1		c8		iny				iny 								; skip over -
.a2f2						_VMCStart:
.a2f2		38		sec				sec 								; initialise first time round.
.a2f3						_VMCNext:
.a2f3		c8		iny				iny 								; pre-increment
.a2f4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a2f6		f0 0c		beq $a304			beq 	_VMCSuccess 				; successful.
.a2f8		20 4b 9e	jsr $9e4b			jsr 	EncodeNumber 				; send it to the number-builder
.a2fb		90 03		bcc $a300			bcc 	_VMCFail 					; if failed, give up.
.a2fd		18		clc				clc 								; next time round, countinue
.a2fe		80 f3		bra $a2f3			bra 	_VMCNext
.a300						_VMCFail:
.a300		68		pla				pla
.a301						_VMCFail2:
.a301		7a		ply				ply
.a302		38		sec				sec
.a303		60		rts				rts
.a304						_VMCSuccess:
.a304		a9 00		lda #$00			lda 	#0 							; construct final
.a306		20 4b 9e	jsr $9e4b			jsr 	EncodeNumber 				; by sending a duff value.
.a309		68		pla				pla 								; if it was -ve
.a30a		c9 2d		cmp #$2d			cmp 	#"-"
.a30c		d0 03		bne $a311			bne 	_VMCNotNegative
.a30e		20 30 a6	jsr $a630			jsr		NSMNegate 					; negate it.
.a311						_VMCNotNegative:
.a311		7a		ply				ply
.a312		18		clc				clc
.a313		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a314						ChrUnary:
.a314		fa		plx				plx 								; restore stack pos
.a315		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a318		48		pha				pha
.a319		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a31c		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a31e		20 3d b8	jsr $b83d			jsr 	StringTempAllocate
.a321		68		pla				pla 								; write number to it
.a322		20 76 b8	jsr $b876			jsr 	StringTempWrite
.a325		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getdatetime.asm

.a326						UnaryGetTime:
.a326		a9 00		lda #$00			lda 	#0
.a328		80 02		bra $a32c			bra 	UGDTMain
.a32a						UnaryGetDate:
.a32a		a9 03		lda #$03			lda 	#3
.a32c						UGDTMain:
.a32c		fa		plx				plx 								; get stack position back
.a32d		48		pha				pha 								; save table offset
.a32e		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger			; ignored parameter
.a331		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; closing )
.a334		68		pla				pla 								; table offset in A
.a335		5a		phy				phy 								; saving Y
.a336		a8		tay				tay 								; table offset in Y
.a337		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a339		20 3d b8	jsr $b83d			jsr 	StringTempAllocate
.a33c		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a33e		48		pha				pha
.a33f		64 01		stz $01				stz 	1
.a341		20 54 a3	jsr $a354			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a344		20 4f a3	jsr $a34f			jsr 	UGDTColonDigit
.a347		20 4f a3	jsr $a34f			jsr 	UGDTColonDigit
.a34a		68		pla				pla 								; restore I/O select
.a34b		85 01		sta $01				sta 	1
.a34d		7a		ply				ply  								; restore code position
.a34e		60		rts				rts
.a34f						UGDTColonDigit:
.a34f		a9 3a		lda #$3a			lda 	#':'
.a351		20 76 b8	jsr $b876			jsr 	StringTempWrite
.a354						UGDTDigit:
.a354		da		phx				phx 								; save X
.a355		b9 74 a3	lda $a374,y			lda 	RTCROffset,y 				; get offset in RTC register
.a358		aa		tax				tax
.a359		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a35c		39 7a a3	and $a37a,y			and 	RTCRMask,y 					; and with Mask.
.a35f		fa		plx				plx
.a360		48		pha				pha 								; output in BCD
.a361		4a		lsr a				lsr 	a
.a362		4a		lsr a				lsr 	a
.a363		4a		lsr a				lsr 	a
.a364		4a		lsr a				lsr 	a
.a365		09 30		ora #$30			ora 	#48
.a367		20 76 b8	jsr $b876			jsr 	StringTempWrite
.a36a		68		pla				pla
.a36b		29 0f		and #$0f			and 	#15
.a36d		09 30		ora #$30			ora 	#48
.a36f		20 76 b8	jsr $b876			jsr 	StringTempWrite
.a372		c8		iny				iny
.a373		60		rts				rts
.a374						RTCROffset:
>a374		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a37a						RTCRMask:
>a37a		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getinkey.asm

.a380						AscGet:
.a380		fa		plx				plx 								; restore stack pos
.a381						AscGet2:
.a381		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a384		20 e2 80	jsr $80e2	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a387		d0 0b		bne $a394			bne 	_AGBreak
.a389		20 14 81	jsr $8114			jsr 	PopKeyboardQueue 			; wait for key.
.a38c		c9 00		cmp #$00			cmp 	#0
.a38e		f0 f4		beq $a384			beq 	_AGKey
.a390		20 70 a6	jsr $a670			jsr 	NSMSetByte
.a393		60		rts				rts
.a394						_AGBreak:
.a394		a9 01		lda #$01		lda	#1
.a396		4c 01 96	jmp $9601		jmp	ErrorHandler
.a399						AscInkey:
.a399		fa		plx				plx 								; restore stack pos
.a39a						AscInkey2:
.a39a		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a39d		20 14 81	jsr $8114			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a3a0		20 70 a6	jsr $a670			jsr 	NSMSetByte
.a3a3		60		rts				rts
.a3a4						ChrGet:
.a3a4		fa		plx				plx
.a3a5		20 81 a3	jsr $a381			jsr 	AscGet2
.a3a8		4c af a3	jmp $a3af			jmp 	GetInkeyToString
.a3ab						ChrInkey:
.a3ab		fa		plx				plx
.a3ac		20 9a a3	jsr $a39a			jsr 	AscInkey2
.a3af						GetInkeyToString:
.a3af		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a3b1		f0 0b		beq $a3be			beq 	_GKISNull
.a3b3		48		pha				pha
.a3b4		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a3b6		20 3d b8	jsr $b83d			jsr 	StringTempAllocate
.a3b9		68		pla				pla 								; write number to it
.a3ba		20 76 b8	jsr $b876			jsr 	StringTempWrite
.a3bd		60		rts				rts
.a3be						_GKISNull:
.a3be		a9 00		lda #$00			lda 	#0
.a3c0		20 3d b8	jsr $b83d			jsr 	StringTempAllocate
.a3c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a3c4						ItemCountUnary:
.a3c4		fa		plx				plx
.a3c5		20 c6 a5	jsr $a5c6			jsr 	EvaluateString
.a3c8		e8		inx				inx
.a3c9		20 3c a4	jsr $a43c			jsr 	ICGetSeperator
.a3cc		ca		dex				dex
.a3cd		20 5d a4	jsr $a45d			jsr 	ICSetPointer 				; zTemp0 = (string)
.a3d0		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; zero the result.
.a3d3		5a		phy				phy
.a3d4		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a3d6						_ICULoop:
.a3d6		c8		iny				iny
.a3d7		b1 36		lda ($36),y			lda 	(zTemp0),y
.a3d9		cd 72 07	cmp $0772			cmp 	ICSeperator
.a3dc		d0 02		bne $a3e0			bne 	_ICUNoMatch
.a3de		f6 58		inc $58,x			inc 	NSMantissa0,x
.a3e0						_ICUNoMatch:
.a3e0		c9 00		cmp #$00			cmp 	#0
.a3e2		d0 f2		bne $a3d6			bne 	_ICULoop
.a3e4		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a3e6		7a		ply				ply
.a3e7		60		rts				rts
.a3e8						ItemGetUnary:
.a3e8		fa		plx				plx
.a3e9		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; search string
.a3ec		20 f0 95	jsr $95f0			jsr 	CheckComma
.a3ef		e8		inx				inx 								; get count
.a3f0		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.a3f3		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a3f5		f0 61		beq $a458			beq 	ICGSRange
.a3f7		e8		inx				inx 								; get seperator.
.a3f8		20 3c a4	jsr $a43c			jsr 	ICGetSeperator
.a3fb		ca		dex				dex
.a3fc		ca		dex				dex
.a3fd		5a		phy				phy
.a3fe		20 5d a4	jsr $a45d			jsr 	ICSetPointer 				; zTemp0 points to string.
.a401		a0 00		ldy #$00			ldy 	#0
.a403		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a405		f0 0e		beq $a415			beq 	_IGUFoundStart
.a407						_IGUFindNext:
.a407		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a409		f0 4d		beq $a458			beq 	ICGSRange 					; eol, not found.
.a40b		c8		iny				iny
.a40c		cd 72 07	cmp $0772			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a40f		d0 f6		bne $a407			bne 	_IGUFindNext
.a411		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a413		d0 f2		bne $a407			bne 	_IGUFindNext
.a415						_IGUFoundStart:
.a415		84 38		sty $38				sty 	zTemp1 						; save start
.a417		88		dey				dey
.a418						_IGUFindLength:
.a418		c8		iny				iny 								; forward till seperator/EOS
.a419		b1 36		lda ($36),y			lda 	(zTemp0),y
.a41b		f0 05		beq $a422			beq 	_IGUFoundLength
.a41d		cd 72 07	cmp $0772			cmp 	ICSeperator
.a420		d0 f6		bne $a418			bne 	_IGUFindLength
.a422						_IGUFoundLength:
.a422		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a424		98		tya				tya 								; calculate length of new string.
.a425		38		sec				sec
.a426		e5 38		sbc $38				sbc 	zTemp1
.a428		20 3d b8	jsr $b83d			jsr 	StringTempAllocate 			; allocate bytes for it.
.a42b		a4 38		ldy $38				ldy 	zTemp1
.a42d						_IGUCopySub:
.a42d		c4 39		cpy $39				cpy 	zTemp1+1
.a42f		f0 08		beq $a439			beq 	_IGUCopyOver
.a431		b1 36		lda ($36),y			lda 	(zTemp0),y
.a433		20 76 b8	jsr $b876			jsr 	StringTempWrite
.a436		c8		iny				iny
.a437		80 f4		bra $a42d			bra 	_IGUCopySub
.a439						_IGUCopyOver:
.a439		7a		ply				ply
.a43a		60		rts				rts
>a43b		db						.byte 	$DB 						; causes a break in the emulator
.a43c						ICGetSeperator:
.a43c		20 f0 95	jsr $95f0			jsr 	CheckComma 					; preceding comma
.a43f		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; seperator string
.a442		20 5d a4	jsr $a45d			jsr 	ICSetPointer 				; access it
.a445		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a447		8d 72 07	sta $0772			sta 	ICSeperator
.a44a		f0 0c		beq $a458			beq 	ICGSRange 					; check LEN(seperator) = 1
.a44c		5a		phy				phy
.a44d		a0 01		ldy #$01			ldy 	#1
.a44f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a451		d0 05		bne $a458			bne 	ICGSRange
.a453		7a		ply				ply
.a454		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; check following )
.a457		60		rts				rts
.a458						ICGSRange:
.a458		a9 04		lda #$04		lda	#4
.a45a		4c 01 96	jmp $9601		jmp	ErrorHandler
.a45d						ICSetPointer:
.a45d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a45f		85 36		sta $36				sta 	zTemp0
.a461		b5 60		lda $60,x			lda 	NSMantissa1,x
.a463		85 37		sta $37				sta 	zTemp0+1
.a465		60		rts				rts
.0772						ICSeperator:
>0772								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a466						SpcUnary:
.a466		fa		plx				plx 								; restore stack pos
.a467		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger			; get value
.a46a		5a		phy				phy
.a46b		48		pha				pha 								; save count
.a46c		20 3d b8	jsr $b83d			jsr 	StringTempAllocate
.a46f		7a		ply				ply 								; to do count in Y
.a470						_SpcLoop:
.a470		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a472		f0 08		beq $a47c			beq 	_SpcExit
.a474		a9 20		lda #$20			lda 	#32
.a476		20 76 b8	jsr $b876			jsr 	StringTempWrite
.a479		88		dey				dey
.a47a		80 f4		bra $a470			bra 	_SpcLoop
.a47c						_SpcExit:
.a47c		7a		ply				ply
.a47d		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.a480		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a481						Unary_Str:
.a481		fa		plx				plx
.a482		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber  			; get number
.a485		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; closing bracket
.a488		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a48a		20 a3 a4	jsr $a4a3			jsr 	ConvertNumberToString 		; do the conversion.
.a48d		a9 21		lda #$21			lda		#33 						; create buffer
.a48f		20 3d b8	jsr $b83d			jsr 	StringTempAllocate 			; allocate memory
.a492		da		phx				phx  								; copy the converted string into the buffer.
.a493		a2 00		ldx #$00			ldx 	#0
.a495						_USCopy:
.a495		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a498		20 76 b8	jsr $b876			jsr 	StringTempWrite
.a49b		e8		inx				inx
.a49c		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a49f		d0 f4		bne $a495			bne 	_USCopy
.a4a1		fa		plx				plx
.a4a2		60		rts				rts
.a4a3						ConvertNumberToString:
.a4a3		5a		phy				phy 								; save code position
.a4a4		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a4a7		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a4aa		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a4ac		10 09		bpl $a4b7			bpl 	_CNTSNotNegative
.a4ae		29 7f		and #$7f			and 	#$7F 						; make +ve
.a4b0		95 50		sta $50,x			sta 	NSStatus,x
.a4b2		a9 2d		lda #$2d			lda 	#"-"
.a4b4		20 18 a5	jsr $a518			jsr 	WriteDecimalBuffer
.a4b7						_CNTSNotNegative:
.a4b7		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a4b9		f0 12		beq $a4cd			beq 	_CNTSNotFloat
.a4bb		e8		inx				inx 								; round up so we don't get too many 6.999999
.a4bc		a9 01		lda #$01			lda 	#1
.a4be		20 70 a6	jsr $a670			jsr 	NSMSetByte
.a4c1		ca		dex				dex
.a4c2		b5 78		lda $78,x			lda		NSExponent,x
.a4c4		95 79		sta $79,x			sta 	NSExponent+1,x
.a4c6		a9 08		lda #$08			lda 	#NSTFloat
.a4c8		95 51		sta $51,x			sta 	NSStatus+1,x
.a4ca		20 50 9b	jsr $9b50			jsr 	FloatAdd
.a4cd						_CNTSNotFloat:
.a4cd		20 fa a4	jsr $a4fa			jsr 	MakePlusTwoString 			; do the integer part.
.a4d0		20 16 9c	jsr $9c16			jsr 	FloatFractionalPart 		; get the fractional part
.a4d3		20 c7 9c	jsr $9cc7			jsr 	NSNormalise					; normalise , exit if zero
.a4d6		f0 20		beq $a4f8			beq 	_CNTSExit
.a4d8		a9 2e		lda #$2e			lda 	#"."
.a4da		20 18 a5	jsr $a518			jsr 	WriteDecimalBuffer 			; write decimal place
.a4dd						_CNTSDecimal:
.a4dd		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a4e0		30 16		bmi $a4f8			bmi 	_CNTSExit
.a4e2		e8		inx				inx 								; x 10.0
.a4e3		a9 0a		lda #$0a			lda 	#10
.a4e5		20 70 a6	jsr $a670			jsr 	NSMSetByte
.a4e8		a9 08		lda #$08			lda 	#NSTFloat
.a4ea		95 50		sta $50,x			sta 	NSStatus,x
.a4ec		ca		dex				dex
.a4ed		20 95 9c	jsr $9c95			jsr 	FloatMultiply
.a4f0		20 fa a4	jsr $a4fa			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a4f3		20 16 9c	jsr $9c16			jsr 	FloatFractionalPart 		; get the fractional part
.a4f6		80 e5		bra $a4dd			bra 	_CNTSDecimal 				; keep going.
.a4f8						_CNTSExit:
.a4f8		7a		ply				ply
.a4f9		60		rts				rts
.a4fa						MakePlusTwoString:
.a4fa		da		phx				phx
.a4fb		20 51 a6	jsr $a651			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a4fe		e8		inx				inx 								; access it
.a4ff		e8		inx				inx
.a500		20 6e 9c	jsr $9c6e			jsr 	FloatIntegerPart 			; make it an integer
.a503		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a505		20 80 9a	jsr $9a80			jsr 	ConvertInt32
.a508		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a50a						_MPTSCopy:
.a50a		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a50d		20 18 a5	jsr $a518			jsr 	WriteDecimalBuffer
.a510		e8		inx				inx
.a511		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a514		d0 f4		bne $a50a			bne 	_MPTSCopy
.a516		fa		plx				plx
.a517		60		rts				rts
.a518						WriteDecimalBuffer:
.a518		da		phx				phx
.a519		ae 11 04	ldx $0411			ldx 	dbOffset
.a51c		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a51f		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a522		ee 11 04	inc $0411			inc 	dbOffset
.a525		fa		plx				plx
.a526		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a527						Unary_Left:
.a527		fa		plx				plx
.a528		18		clc				clc 								; only one parameter
.a529		20 8c a5	jsr $a58c			jsr 	SubstringInitial 			; set up.
.a52c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a52e		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a530		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a532		80 25		bra $a559			bra 	SubstringMain
.a534						Unary_Right:
.a534		fa		plx				plx
.a535		18		clc				clc 								; only one parameter
.a536		20 8c a5	jsr $a58c			jsr 	SubstringInitial 			; set up.
.a539		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a53b		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a53d		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a53f		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a541		b0 02		bcs $a545			bcs 	_URNotUnderflow
.a543		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a545						_URNotUnderflow:
.a545		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a547		80 10		bra $a559			bra 	SubstringMain
.a549						Unary_Mid:
.a549		fa		plx				plx
.a54a		38		sec				sec 								; two parameters
.a54b		20 8c a5	jsr $a58c			jsr 	SubstringInitial 			; set up.
.a54e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a550		f0 04		beq $a556			beq 	_UMError
.a552		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a554		80 03		bra $a559			bra 	SubstringMain
.a556						_UMError:
.a556		4c fb a7	jmp $a7fb			jmp 	ArgumentError
.a559						SubstringMain:
.a559		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a55b		d5 78		cmp $78,x			cmp 	NSExponent,x
.a55d		b0 27		bcs $a586			bcs 	_SSMNull 					; if so, return an empty string.
.a55f		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a561		f0 23		beq $a586			beq 	_SSMNull 					; return empty string.
.a563		18		clc				clc 								; add the offset +1 to the address and
.a564		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a566		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a568		85 36		sta $36				sta 	zTemp0
.a56a		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a56c		69 00		adc #$00			adc 	#0
.a56e		85 37		sta $37				sta 	zTemp0+1
.a570						_SSMNoCarry:
.a570		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a572		20 3d b8	jsr $b83d			jsr 	StringTempAllocate 			; allocate that many characters
.a575		5a		phy				phy 								; save Y
.a576		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a578						_SSMCopy:
.a578		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a57a		f0 08		beq $a584			beq 	_SSMEString 				; no more to copy
.a57c		20 76 b8	jsr $b876			jsr 	StringTempWrite 			; and write it out.
.a57f		c8		iny				iny
.a580		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a582		d0 f4		bne $a578			bne 	_SSMCopy
.a584						_SSMEString:
.a584		7a		ply				ply
.a585						_SSMExit:
.a585		60		rts				rts
.a586						_SSMNull:
.a586		a9 00		lda #$00			lda 	#0
.a588		20 3d b8	jsr $b83d			jsr 	StringTempAllocate
.a58b		60		rts				rts
.a58c						SubstringInitial:
.a58c		da		phx				phx 								; save initial stack position
.a58d		08		php				php 								; save carry on stack indicating 2 parameters
.a58e		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; get a string
.a591		5a		phy				phy 								; calculate length to exponent.
.a592		a0 ff		ldy #$ff			ldy 	#$FF
.a594						_SIFindLength:
.a594		c8		iny				iny
.a595		b1 36		lda ($36),y			lda 	(zTemp0),y
.a597		d0 fb		bne $a594			bne 	_SIFindLength
.a599		98		tya				tya
.a59a		95 78		sta $78,x			sta 	NSExponent,x
.a59c		7a		ply				ply
.a59d		e8		inx				inx
.a59e		20 f0 95	jsr $95f0			jsr 	CheckComma 					; comma next
.a5a1		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get next parameter
.a5a4		28		plp				plp 								; is it the last parameter ?
.a5a5		90 07		bcc $a5ae			bcc 	_SSIExit 					; if so, exit.
.a5a7		e8		inx				inx
.a5a8		20 f0 95	jsr $95f0			jsr 	CheckComma 					; comma next
.a5ab		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get last parameter
.a5ae						_SSIExit:
.a5ae		fa		plx				plx
.a5af		20 e8 95	jsr $95e8			jsr 	CheckRightBracket 			; check closing bracket
.a5b2		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a5b3						EvaluateValue:
.a5b3		48		pha				pha
.a5b4		20 05 9b	jsr $9b05			jsr		EvaluateExpression 			; expression
.a5b7		20 c8 9d	jsr $9dc8			jsr 	Dereference					; derefernce it
.a5ba		68		pla				pla
.a5bb		60		rts				rts
.a5bc						EvaluateNumber:
.a5bc		20 b3 a5	jsr $a5b3			jsr 	EvaluateValue 				; get a value
.a5bf		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a5c1		29 10		and #$10			and 	#NSBIsString
.a5c3		d0 13		bne $a5d8			bne 	HelperTypeError
.a5c5		60		rts				rts
.a5c6						EvaluateString:
.a5c6		20 b3 a5	jsr $a5b3			jsr 	EvaluateValue 				; get a value
.a5c9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a5cb		29 10		and #$10			and 	#NSBIsString
.a5cd		f0 09		beq $a5d8			beq 	HelperTypeError
.a5cf						CopyAddressToTemp0:
.a5cf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a5d1		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a5d3		b5 60		lda $60,x			lda 	NSMantissa1,x
.a5d5		85 37		sta $37				sta 	zTemp0+1
.a5d7		60		rts				rts
.a5d8						HelperTypeError:
.a5d8		4c f6 a7	jmp $a7f6			jmp 	TypeError
.a5db						EvaluateInteger:
.a5db		20 bc a5	jsr $a5bc			jsr 	EvaluateNumber
.a5de		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a5e0		d0 09		bne $a5eb			bne 	HelperValueError 			; if not, it's a float.
.a5e2		60		rts				rts
.a5e3						EvaluateUnsignedInteger:
.a5e3		20 db a5	jsr $a5db			jsr 	EvaluateInteger 			; check integer is +ve
.a5e6		b5 50		lda $50,x			lda 	NSStatus,x
.a5e8		30 01		bmi $a5eb			bmi 	HelperValueError
.a5ea		60		rts				rts
.a5eb						HelperValueError:
.a5eb		4c fb a7	jmp $a7fb			jmp 	ArgumentError
.a5ee						Evaluate16BitInteger:
.a5ee		20 e3 a5	jsr $a5e3			jsr	 	EvaluateUnsignedInteger		; get integer
.a5f1		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a5f3		15 68		ora $68,x			ora 	NSMantissa2,x
.a5f5		d0 f4		bne $a5eb			bne 	HelperValueError
.a5f7		60		rts				rts
.a5f8						Evaluate16BitIntegerSigned:
.a5f8		20 db a5	jsr $a5db			jsr	 	EvaluateInteger				; get integer
.a5fb		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a5fd		15 68		ora $68,x			ora 	NSMantissa2,x
.a5ff		d0 ea		bne $a5eb			bne 	HelperValueError
.a601		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a603		10 03		bpl $a608			bpl 	_EISNotSigned
.a605		20 37 a6	jsr $a637			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a608						_EISNotSigned:
.a608		60		rts				rts
.a609						Evaluate8BitInteger:
.a609		20 e3 a5	jsr $a5e3			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a60c		d0 dd		bne $a5eb			bne 	HelperValueError
.a60e		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a610		15 68		ora $68,x			ora 	NSMantissa2,x
.a612		15 60		ora $60,x			ora 	NSMantissa1,x
.a614		d0 d5		bne $a5eb			bne 	HelperValueError
.a616		b5 58		lda $58,x			lda 	NSMantissa0,x
.a618		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a619						Multiply8x8:
.a619		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a61a		85 36		sta $36			  	sta 	zTemp0
.a61c		86 37		stx $37				stx 	zTemp0+1
.a61e		a9 00		lda #$00			lda 	#0
.a620		a2 08		ldx #$08			ldx 	#8
.a622						_M88Loop:
.a622		90 03		bcc $a627			bcc 	_M88NoAdd
.a624		18		clc				clc
.a625		65 37		adc $37				adc 	zTemp0+1
.a627						_M88NoAdd:
.a627		6a		ror a				ror 	a
.a628		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a62a		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a62b		d0 f5		bne $a622			bne 	_M88Loop
.a62d		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a62f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a630						NSMNegate:
.a630		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a632		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a634		95 50		sta $50,x			sta 	NSStatus,x
.a636		60		rts				rts
.a637						NSMNegateMantissa:
.a637		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a638		a9 00		lda #$00			lda 	#0
.a63a		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a63c		95 58		sta $58,x			sta 	NSMantissa0,x
.a63e		a9 00		lda #$00			lda 	#0
.a640		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a642		95 60		sta $60,x			sta 	NSMantissa1,x
.a644		a9 00		lda #$00			lda 	#0
.a646		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a648		95 68		sta $68,x			sta 	NSMantissa2,x
.a64a		a9 00		lda #$00			lda 	#0
.a64c		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a64e		95 70		sta $70,x			sta 	NSMantissa3,x
.a650		60		rts				rts
.a651						NSMShiftUpTwo:
.a651		b5 58		lda $58,x			lda 	NSMantissa0,x
.a653		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a655		b5 60		lda $60,x			lda 	NSMantissa1,x
.a657		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a659		b5 68		lda $68,x			lda 	NSMantissa2,x
.a65b		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a65d		b5 70		lda $70,x			lda 	NSMantissa3,x
.a65f		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a661		b5 78		lda $78,x			lda 	NSExponent,x
.a663		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a665		b5 50		lda $50,x			lda 	NSStatus,x
.a667		95 52		sta $52,x			sta 	NSStatus+2,x
.a669		60		rts				rts
.a66a						NSMSetZeroMantissaOnly:
.a66a		a9 00		lda #$00			lda 	#0
.a66c		80 06		bra $a674			bra 	NSMSetMantissa
.a66e						NSMSetZero:
.a66e		a9 00		lda #$00			lda 	#0
.a670						NSMSetByte:
.a670		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a672		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a674						NSMSetMantissa:
.a674		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a676		74 60		stz $60,x			stz 	NSMantissa1,x
.a678		74 68		stz $68,x			stz 	NSMantissa2,x
.a67a		74 70		stz $70,x			stz 	NSMantissa3,x
.a67c		60		rts				rts
.a67d						NSMShiftLeft:
.a67d		18		clc				clc
.a67e						NSMRotateLeft:
.a67e		36 58		rol $58,x			rol 	NSMantissa0,x
.a680		36 60		rol $60,x			rol		NSMantissa1,x
.a682		36 68		rol $68,x			rol		NSMantissa2,x
.a684		36 70		rol $70,x			rol		NSMantissa3,x
.a686		60		rts				rts
.a687						NSMShiftRight:
.a687		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a689		76 68		ror $68,x			ror		NSMantissa2,x
.a68b		76 60		ror $60,x			ror		NSMantissa1,x
.a68d		76 58		ror $58,x			ror		NSMantissa0,x
.a68f		60		rts				rts
.a690						NSMIsZero:
.a690		b5 70		lda $70,x			lda 	NSMantissa3,x
.a692		15 68		ora $68,x			ora		NSMantissa2,x
.a694		15 60		ora $60,x			ora		NSMantissa1,x
.a696		15 58		ora $58,x			ora		NSMantissa0,x
.a698		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a699						TickHandler:
.a699		5a		phy				phy 								; need to preserve Y
.a69a		20 49 80	jsr $8049			jsr 	SNDUpdate 					; update sound
.a69d		7a		ply				ply
.a69e		60		rts				rts
.0773						LastTick:
>0773								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a69f						Assemble_ora:
.a69f		20 2c 82	jsr $822c		jsr	AssembleGroup1
>a6a2		01					.byte $01
.a6a3						Assemble_and:
.a6a3		20 2c 82	jsr $822c		jsr	AssembleGroup1
>a6a6		21					.byte $21
.a6a7						Assemble_eor:
.a6a7		20 2c 82	jsr $822c		jsr	AssembleGroup1
>a6aa		41					.byte $41
.a6ab						Assemble_adc:
.a6ab		20 2c 82	jsr $822c		jsr	AssembleGroup1
>a6ae		61					.byte $61
.a6af						Assemble_sta:
.a6af		20 2c 82	jsr $822c		jsr	AssembleGroup1
>a6b2		81					.byte $81
.a6b3						Assemble_lda:
.a6b3		20 2c 82	jsr $822c		jsr	AssembleGroup1
>a6b6		a1					.byte $a1
.a6b7						Assemble_cmp:
.a6b7		20 2c 82	jsr $822c		jsr	AssembleGroup1
>a6ba		c1					.byte $c1
.a6bb						Assemble_sbc:
.a6bb		20 2c 82	jsr $822c		jsr	AssembleGroup1
>a6be		e1					.byte $e1
.a6bf						Assemble_asl:
.a6bf		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6c2		02					.byte $02
>a6c3		75					.byte $75
.a6c4						Assemble_rol:
.a6c4		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6c7		22					.byte $22
>a6c8		75					.byte $75
.a6c9						Assemble_lsr:
.a6c9		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6cc		42					.byte $42
>a6cd		75					.byte $75
.a6ce						Assemble_ror:
.a6ce		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6d1		62					.byte $62
>a6d2		75					.byte $75
.a6d3						Assemble_stx:
.a6d3		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6d6		82					.byte $82
>a6d7		50					.byte $50
.a6d8						Assemble_ldx:
.a6d8		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6db		a2					.byte $a2
>a6dc		d0					.byte $d0
.a6dd						Assemble_dec:
.a6dd		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6e0		c2					.byte $c2
>a6e1		55					.byte $55
.a6e2						Assemble_inc:
.a6e2		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6e5		e2					.byte $e2
>a6e6		55					.byte $55
.a6e7						Assemble_stz:
.a6e7		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6ea		60					.byte $60
>a6eb		44					.byte $44
.a6ec						Assemble_bit:
.a6ec		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6ef		20					.byte $20
>a6f0		55					.byte $55
.a6f1						Assemble_sty:
.a6f1		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6f4		80					.byte $80
>a6f5		54					.byte $54
.a6f6						Assemble_ldy:
.a6f6		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6f9		a0					.byte $a0
>a6fa		d5					.byte $d5
.a6fb						Assemble_cpy:
.a6fb		20 33 82	jsr $8233		jsr	AssembleGroup2
>a6fe		c0					.byte $c0
>a6ff		d4					.byte $d4
.a700						Assemble_cpx:
.a700		20 33 82	jsr $8233		jsr	AssembleGroup2
>a703		e0					.byte $e0
>a704		d0					.byte $d0
.a705						Assemble_tsb:
.a705		20 33 82	jsr $8233		jsr	AssembleGroup2
>a708		00					.byte $00
>a709		50					.byte $50
.a70a						Assemble_trb:
.a70a		20 33 82	jsr $8233		jsr	AssembleGroup2
>a70d		10					.byte $10
>a70e		50					.byte $50
.a70f						Assemble_jsr:
.a70f		20 33 82	jsr $8233		jsr	AssembleGroup2
>a712		14					.byte $14
>a713		10					.byte $10
.a714						Assemble_jmp:
.a714		20 33 82	jsr $8233		jsr	AssembleGroup2
>a717		40					.byte $40
>a718		10					.byte $10
.a719						Assemble_bpl:
.a719		20 84 82	jsr $8284		jsr	AssembleGroup3
>a71c		10					.byte $10
.a71d						Assemble_bmi:
.a71d		20 84 82	jsr $8284		jsr	AssembleGroup3
>a720		30					.byte $30
.a721						Assemble_bvc:
.a721		20 84 82	jsr $8284		jsr	AssembleGroup3
>a724		50					.byte $50
.a725						Assemble_bvs:
.a725		20 84 82	jsr $8284		jsr	AssembleGroup3
>a728		70					.byte $70
.a729						Assemble_bcc:
.a729		20 84 82	jsr $8284		jsr	AssembleGroup3
>a72c		90					.byte $90
.a72d						Assemble_bcs:
.a72d		20 84 82	jsr $8284		jsr	AssembleGroup3
>a730		b0					.byte $b0
.a731						Assemble_bne:
.a731		20 84 82	jsr $8284		jsr	AssembleGroup3
>a734		d0					.byte $d0
.a735						Assemble_beq:
.a735		20 84 82	jsr $8284		jsr	AssembleGroup3
>a738		f0					.byte $f0
.a739						Assemble_bra:
.a739		20 84 82	jsr $8284		jsr	AssembleGroup3
>a73c		80					.byte $80
.a73d						Assemble_brk:
.a73d		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a740		00					.byte $00
.a741						Assemble_php:
.a741		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a744		08					.byte $08
.a745						Assemble_clc:
.a745		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a748		18					.byte $18
.a749						Assemble_plp:
.a749		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a74c		28					.byte $28
.a74d						Assemble_sec:
.a74d		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a750		38					.byte $38
.a751						Assemble_rti:
.a751		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a754		40					.byte $40
.a755						Assemble_pha:
.a755		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a758		48					.byte $48
.a759						Assemble_cli:
.a759		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a75c		58					.byte $58
.a75d						Assemble_phy:
.a75d		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a760		5a					.byte $5a
.a761						Assemble_rts:
.a761		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a764		60					.byte $60
.a765						Assemble_pla:
.a765		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a768		68					.byte $68
.a769						Assemble_sei:
.a769		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a76c		78					.byte $78
.a76d						Assemble_ply:
.a76d		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a770		7a					.byte $7a
.a771						Assemble_dey:
.a771		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a774		88					.byte $88
.a775						Assemble_txa:
.a775		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a778		8a					.byte $8a
.a779						Assemble_tya:
.a779		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a77c		98					.byte $98
.a77d						Assemble_txs:
.a77d		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a780		9a					.byte $9a
.a781						Assemble_tay:
.a781		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a784		a8					.byte $a8
.a785						Assemble_tax:
.a785		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a788		aa					.byte $aa
.a789						Assemble_clv:
.a789		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a78c		b8					.byte $b8
.a78d						Assemble_tsx:
.a78d		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a790		ba					.byte $ba
.a791						Assemble_iny:
.a791		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a794		c8					.byte $c8
.a795						Assemble_dex:
.a795		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a798		ca					.byte $ca
.a799						Assemble_cld:
.a799		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a79c		d8					.byte $d8
.a79d						Assemble_phx:
.a79d		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a7a0		da					.byte $da
.a7a1						Assemble_stp:
.a7a1		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a7a4		db					.byte $db
.a7a5						Assemble_inx:
.a7a5		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a7a8		e8					.byte $e8
.a7a9						Assemble_nop:
.a7a9		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a7ac		ea					.byte $ea
.a7ad						Assemble_sed:
.a7ad		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a7b0		f8					.byte $f8
.a7b1						Assemble_plx:
.a7b1		20 b8 82	jsr $82b8		jsr	AssembleGroup4
>a7b4		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a7b5						DecimalScalarTable:
>a7b5		66 66 66 66				.dword $66666666 ; 0.1
>a7b9		de					.byte $de
>a7ba		1f 85 eb 51				.dword $51eb851f ; 0.01
>a7be		db					.byte $db
>a7bf		4c 37 89 41				.dword $4189374c ; 0.001
>a7c3		d8					.byte $d8
>a7c4		ac 8b db 68				.dword $68db8bac ; 0.0001
>a7c8		d4					.byte $d4
>a7c9		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a7cd		d1					.byte $d1
>a7ce		83 de 1b 43				.dword $431bde83 ; 1e-06
>a7d2		ce					.byte $ce
>a7d3		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a7d7		ca					.byte $ca
>a7d8		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a7dc		c7					.byte $c7
>a7dd		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a7e1		c4					.byte $c4
>a7e2		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a7e6		c0					.byte $c0
>a7e7		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a7eb		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a7ec						SyntaxError:
.a7ec		a9 02		lda #$02		lda	#2
.a7ee		4c 01 96	jmp $9601		jmp	ErrorHandler
.a7f1						RangeError:
.a7f1		a9 04		lda #$04		lda	#4
.a7f3		4c 01 96	jmp $9601		jmp	ErrorHandler
.a7f6						TypeError:
.a7f6		a9 05		lda #$05		lda	#5
.a7f8		4c 01 96	jmp $9601		jmp	ErrorHandler
.a7fb						ArgumentError:
.a7fb		a9 07		lda #$07		lda	#7
.a7fd		4c 01 96	jmp $9601		jmp	ErrorHandler
.a800						NotDoneError:
.a800		a9 0c		lda #$0c		lda	#12
.a802		4c 01 96	jmp $9601		jmp	ErrorHandler
.a805						ErrorText:
>a805		42 72 65 61 6b 00			.text	"Break",0
>a80b		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a813		72 72 6f 72 00
>a818		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a820		20 62 79 20 7a 65 72 6f 00
>a829		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a831		61 6e 67 65 00
>a836		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a83e		6d 61 74 63 68 00
>a844		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a84c		65 6d 6f 72 79 00
>a852		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a85a		61 72 67 75 6d 65 6e 74 00
>a863		53 74 6f 70 00				.text	"Stop",0
>a868		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a870		6f 6f 20 6c 6f 6e 67 00
>a878		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a880		6e 20 66 61 69 6c 65 64 00
>a889		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a891		61 74 61 00
>a895		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a89d		65 6e 74 65 64 00
>a8a3		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a8ab		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a8b7		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a8bf		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a8cc		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a8d4		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a8e1		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a8e9		68 6f 75 74 20 57 68 69 6c 65 00
>a8f4		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a8fc		68 6f 75 74 20 46 6f 72 00
>a905		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a90d		61 63 6b 20 66 75 6c 6c 00
>a916		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a91e		75 63 74 75 72 65 00
>a925		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a92d		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a93a		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a942		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a950		41 72 72 61 79 20 73 69			.text	"Array size",0
>a958		7a 65 00
>a95b		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a963		79 20 69 6e 64 65 78 00
>a96b		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a973		74 20 64 65 63 6c 61 72 65 64 00
>a97e		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a986		20 66 6f 75 6e 64 00
>a98d		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a995		65 72 72 6f 72 00
>a99b		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a9a3		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc72		09 09 31 36 2f 30 31 2f			.text 9,9,"16/01/23 29"
>dc7a		32 33 20 32 39

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a9a9						RectangleCommand:
.a9a9		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a9ab		80 02		bra $a9af			bra 	ShapeDrawCmd
.a9ad						CircleCommand:
.a9ad		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a9af						ShapeDrawCmd:
.a9af		20 39 aa	jsr $aa39			jsr 	RunGraphicsCommand
.a9b2						ShapeDraw:
.a9b2		0d 75 07	ora $0775			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a9b5		4c 2d aa	jmp $aa2d			jmp 	ExecuteGraphicCommand	 	; and complete
.a9b8						SpriteCommand:
.a9b8		a2 00		ldx #$00			ldx 	#0
.a9ba		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get image number.
.a9bd		5a		phy				phy
.a9be		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a9c0		a6 58		ldx $58				ldx 	NSMantissa0
.a9c2		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a9c4		b0 0d		bcs $a9d3			bcs 	_SCRange
.a9c6		a0 ff		ldy #$ff			ldy 	#255
.a9c8		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9cb		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a9cd		7a		ply				ply
.a9ce		20 39 aa	jsr $aa39			jsr 	RunGraphicsCommand
.a9d1		80 5a		bra $aa2d			bra 	ExecuteGraphicCommand
.a9d3						_SCRange:
.a9d3		4c f1 a7	jmp $a7f1			jmp 	RangeError
.a9d6						ImageCommand:
.a9d6		a2 00		ldx #$00			ldx 	#0
.a9d8		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get image number.
.a9db		20 39 aa	jsr $aa39			jsr 	RunGraphicsCommand
.a9de						ImageRunDraw:
.a9de		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a9e0		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9e3		ad 7b 07	lda $077b			lda 	gxDrawScale
.a9e6		0a		asl a				asl 	a
.a9e7		0a		asl a				asl 	a
.a9e8		0a		asl a				asl 	a
.a9e9		a8		tay				tay
.a9ea		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a9ec		a6 58		ldx $58				ldx 	NSMantissa0
.a9ee		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9f1		60		rts				rts
.a9f2						TextCommand:
.a9f2		a2 00		ldx #$00			ldx 	#0
.a9f4		20 c6 a5	jsr $a5c6			jsr 	EvaluateString 				; get text
.a9f7		20 39 aa	jsr $aa39			jsr 	RunGraphicsCommand
.a9fa						TextRunDraw:
.a9fa		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a9fc		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9ff		a0 00		ldy #$00			ldy 	#0
.aa01						_IRDLoop:
.aa01		a5 60		lda $60				lda 	NSMantissa1 				; access character
.aa03		85 37		sta $37				sta 	zTemp0+1
.aa05		a5 58		lda $58				lda 	NSMantissa0
.aa07		85 36		sta $36				sta 	zTemp0
.aa09		b1 36		lda ($36),y			lda 	(zTemp0),y
.aa0b		f0 13		beq $aa20			beq 	_IRDExit
.aa0d		5a		phy				phy									; save string pos
.aa0e		48		pha				pha 								; save char
.aa0f		ad 7b 07	lda $077b			lda 	gxDrawScale 				; get scale
.aa12		0a		asl a				asl 	a
.aa13		0a		asl a				asl 	a
.aa14		0a		asl a				asl 	a
.aa15		a8		tay				tay
.aa16		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.aa18		fa		plx				plx 								; char to draw
.aa19		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa1c		7a		ply				ply 								; restore string pos
.aa1d		c8		iny				iny
.aa1e		90 e1		bcc $aa01			bcc 	_IRDLoop 					; go back if no error.
.aa20						_IRDExit:
.aa20		60		rts				rts
.aa21						PlotCommand:
.aa21		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.aa23		20 39 aa	jsr $aa39			jsr 	RunGraphicsCommand
.aa26		80 05		bra $aa2d			bra 	ExecuteGraphicCommand
.aa28						LineCommand:
.aa28		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.aa2a		20 39 aa	jsr $aa39			jsr 	RunGraphicsCommand
.aa2d						ExecuteGraphicCommand:
.aa2d		0d 74 07	ora $0774			ora 	gxCommandID 				; make a full command
.aa30		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; draw it and exit
.aa33		b0 01		bcs $aa36			bcs 	_EGCError
.aa35		60		rts				rts
.aa36						_EGCError:
.aa36		4c ec a7	jmp $a7ec			jmp 	SyntaxError
.aa39						RunGraphicsCommand:
.aa39		8d 74 07	sta $0774			sta 	gxCommandID					; save TODO graphics command.
.aa3c		68		pla				pla 								; pop handler address
.aa3d		fa		plx				plx
.aa3e		1a		inc a				inc 	a
.aa3f		d0 01		bne $aa42			bne 	_RGINoCarry
.aa41		e8		inx				inx
.aa42						_RGINoCarry:
.aa42		8d 79 07	sta $0779			sta 	gxHandler
.aa45		8e 7a 07	stx $077a			stx 	gxHandler+1
.aa48						_RGICommandLoop:
.aa48		b1 30		lda ($30),y			lda 	(codePtr),y
.aa4a		c8		iny				iny
.aa4b		c9 da		cmp #$da			cmp 	#KWD_TO						; is it TO x,y
.aa4d		f0 53		beq $aaa2			beq 	_RGI_To
.aa4f		c9 c4		cmp #$c4			cmp 	#KWD_HERE 					; do it here.
.aa51		f0 55		beq $aaa8			beq 	_RGI_Here
.aa53		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.aa55		f0 3d		beq $aa94			beq 	_RGI_Exit
.aa57		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.aa59		f0 39		beq $aa94			beq 	_RGI_Exit
.aa5b		c9 cc		cmp #$cc			cmp 	#KWD_OUTLINE 				; solid or outline
.aa5d		f0 3e		beq $aa9d			beq 	_RGI_Frame
.aa5f		c9 d6		cmp #$d6			cmp 	#KWD_SOLID
.aa61		f0 33		beq $aa96			beq 	_RGI_Solid
.aa63		c9 b8		cmp #$b8			cmp 	#KWD_BY 					; by offset
.aa65		f0 4b		beq $aab2			beq 	_RGI_By
.aa67		c9 c2		cmp #$c2			cmp 	#KWD_FROM 					; from
.aa69		f0 17		beq $aa82			beq 	_RGI_Move2
.aa6b		c9 bf		cmp #$bf			cmp 	#KWD_DIM 					; dim (set scale)
.aa6d		f0 62		beq $aad1			beq 	_RGI_Dim
.aa6f		c9 bd		cmp #$bd			cmp 	#KWD_COLOUR 				; colour or Color
.aa71		f0 74		beq $aae7			beq 	_RGI_Colour
.aa73		c9 bc		cmp #$bc			cmp 	#KWD_COLOR
.aa75		f0 70		beq $aae7			beq 	_RGI_Colour
.aa77		ae 74 07	ldx $0774			ldx 	gxCommandID
.aa7a		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.aa7c		d0 03		bne $aa81			bne 	_RGI_Move 					; move
.aa7e		4c 0f ab	jmp $ab0f			jmp		_RGI_SpriteInstructions
.aa81						_RGI_Move:
.aa81		88		dey				dey 								; unpick get.
.aa82						_RGI_Move2:
.aa82		20 35 ab	jsr $ab35			jsr 	GCGetCoordinatePair 		; move to here
.aa85		20 5c ab	jsr $ab5c			jsr 	GCCopyPairToStore 			; save
.aa88		5a		phy				phy
.aa89		20 52 ab	jsr $ab52			jsr 	GCLoadAXY 					; load in
.aa8c		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.aa8e		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa91		7a		ply				ply
.aa92		80 b4		bra $aa48			bra 	_RGICommandLoop 			; and go round
.aa94						_RGI_Exit:
.aa94		88		dey				dey 								; unpick : / EOL
.aa95		60		rts				rts
.aa96						_RGI_Solid:
.aa96		a9 02		lda #$02			lda 	#2
.aa98		8d 75 07	sta $0775			sta 	gxFillSolid
.aa9b		80 ab		bra $aa48			bra 	_RGICommandLoop
.aa9d						_RGI_Frame:
.aa9d		9c 75 07	stz $0775			stz 	gxFillSolid
.aaa0		80 a6		bra $aa48			bra 	_RGICommandLoop
.aaa2						_RGI_To:
.aaa2		20 35 ab	jsr $ab35			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.aaa5		20 5c ab	jsr $ab5c			jsr 	GCCopyPairToStore
.aaa8						_RGI_Here:
.aaa8		5a		phy				phy
.aaa9		20 52 ab	jsr $ab52			jsr 	GCLoadAXY 					; load it into AXY
.aaac		20 0c ab	jsr $ab0c			jsr 	_RGICallHandler 			; go do whatever it is.
.aaaf		7a		ply				ply
.aab0		80 96		bra $aa48			bra 	_RGICommandLoop 			; and go round
.aab2						_RGI_By:
.aab2		20 42 ab	jsr $ab42			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.aab5		18		clc				clc
.aab6		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.aab8		6d 76 07	adc $0776			adc 	gxXPos
.aabb		8d 76 07	sta $0776			sta 	gxXPos
.aabe		a5 61		lda $61				lda 	NSMantissa1+1
.aac0		6d 77 07	adc $0777			adc 	gxXPos+1
.aac3		8d 77 07	sta $0777			sta 	gxXPos+1
.aac6		a5 5a		lda $5a				lda 	NSMantissa0+2
.aac8		18		clc				clc
.aac9		6d 78 07	adc $0778			adc 	gxYPos
.aacc		8d 78 07	sta $0778			sta 	gxYPos
.aacf		80 d7		bra $aaa8			bra 	_RGI_Here
.aad1						_RGI_Dim:
.aad1		a2 01		ldx #$01			ldx	 	#1
.aad3		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.aad6		a5 59		lda $59				lda 	NSMantissa0+1
.aad8		c9 00		cmp #$00			cmp 	#0
.aada		f0 2d		beq $ab09			beq 	_RGIRange
.aadc		c9 09		cmp #$09			cmp 	#8+1
.aade		b0 29		bcs $ab09			bcs		_RGIRange
.aae0		3a		dec a				dec 	a
.aae1		8d 7b 07	sta $077b			sta 	gxDrawScale
.aae4		4c 48 aa	jmp $aa48			jmp 	_RGICommandLoop
.aae7						_RGI_Colour:
.aae7		a2 01		ldx #$01			ldx 	#1 							; colour
.aae9		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.aaec		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.aaee		20 6e a6	jsr $a66e			jsr 	NSMSetZero
.aaf1		b1 30		lda ($30),y			lda 	(codePtr),y
.aaf3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.aaf5		d0 04		bne $aafb			bne 	_RGICDefaultMode
.aaf7		c8		iny				iny
.aaf8		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.aafb						_RGICDefaultMode:
.aafb		5a		phy				phy
.aafc		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.aafe		a6 59		ldx $59				ldx 	NSMantissa0+1
.ab00		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ab02		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab05		7a		ply				ply
.ab06		4c 48 aa	jmp $aa48			jmp 	_RGICommandLoop 			; and go round
.ab09						_RGIRange:
.ab09		4c f1 a7	jmp $a7f1			jmp 	RangeError
.ab0c						_RGICallHandler:
.ab0c		6c 79 07	jmp ($0779)			jmp 	(gxHandler)
.ab0f						_RGI_SpriteInstructions:
.ab0f		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.ab11		f0 07		beq $ab1a			beq 	_RGISpriteOff
.ab13		c9 c5		cmp #$c5			cmp 	#KWD_IMAGE
.ab15		f0 13		beq $ab2a			beq 	_RGISetImage
.ab17		4c 81 aa	jmp $aa81			jmp 	_RGI_Move
.ab1a						_RGISpriteOff:
.ab1a		5a		phy				phy
.ab1b		a0 01		ldy #$01			ldy 	#1
.ab1d		a2 00		ldx #$00			ldx 	#0
.ab1f						_RGIDoCommandLoop:
.ab1f		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.ab21		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab24		7a		ply				ply
.ab25		b0 e2		bcs $ab09			bcs 	_RGIRange
.ab27		4c 48 aa	jmp $aa48			jmp 	_RGICommandLoop
.ab2a						_RGISetImage:
.ab2a		a2 01		ldx #$01			ldx 	#1
.ab2c		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger
.ab2f		5a		phy				phy
.ab30		aa		tax				tax
.ab31		a0 00		ldy #$00			ldy 	#0
.ab33		80 ea		bra $ab1f			bra 	_RGIDoCommandLoop
.ab35						GCGetCoordinatePair:
.ab35		a2 01		ldx #$01			ldx 	#1
.ab37		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.ab3a		20 f0 95	jsr $95f0			jsr 	CheckComma
.ab3d		e8		inx				inx
.ab3e		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.ab41		60		rts				rts
.ab42						GCSignedCoordinatePair:
.ab42		a2 01		ldx #$01			ldx 	#1
.ab44		20 f8 a5	jsr $a5f8			jsr 	Evaluate16BitIntegerSigned
.ab47		20 f0 95	jsr $95f0			jsr 	CheckComma
.ab4a		e8		inx				inx
.ab4b		20 f8 a5	jsr $a5f8			jsr 	Evaluate16BitIntegerSigned
.ab4e		60		rts				rts
.ab4f						_GCCPRange:
.ab4f		4c f1 a7	jmp $a7f1			jmp 	RangeError
.ab52						GCLoadAXY:
.ab52		ad 77 07	lda $0777			lda 	gxXPos+1
.ab55		ae 76 07	ldx $0776			ldx 	gxXPos
.ab58		ac 78 07	ldy $0778			ldy 	gxYPos
.ab5b		60		rts				rts
.ab5c						GCCopyPairToStore:
.ab5c		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ab5e		8d 76 07	sta $0776			sta 	gxXPos
.ab61		a5 61		lda $61				lda 	NSMantissa1+1
.ab63		8d 77 07	sta $0777			sta 	gxXPos+1
.ab66		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab68		8d 78 07	sta $0778			sta 	gxYPos
.ab6b		60		rts				rts
.0774						gxCommandID:
>0774								.fill 	1
.0775						gxFillSolid:
>0775								.fill 	1
.0776						gxXPos:
>0776								.fill 	2
.0778						gxYPos:
>0778								.fill 	1
.0779						gxHandler:
>0779								.fill 	2
.077b						gxDrawScale:
>077b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.ab6c						BitmapCtrl:
.ab6c		b1 30		lda ($30),y			lda 	(codePtr),y
.ab6e		c8		iny				iny
.ab6f		a2 01		ldx #$01			ldx 	#1
.ab71		c9 cb		cmp #$cb			cmp 	#KWD_ON
.ab73		f0 11		beq $ab86			beq 	BitmapSwitch
.ab75		ca		dex				dex
.ab76		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.ab78		f0 0c		beq $ab86			beq 	BitmapSwitch
.ab7a		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get the colour
.ab7d		5a		phy				phy
.ab7e		aa		tax				tax
.ab7f		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.ab81		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab84		7a		ply				ply
.ab85		60		rts				rts
.ab86						BitmapSwitch:
.ab86		5a		phy				phy
.ab87		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.ab89		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.ab8b		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab8e		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.ab90		a0 00		ldy #$00			ldy 	#0
.ab92		a2 ff		ldx #$ff			ldx 	#$FF
.ab94		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab97		9c 75 07	stz $0775			stz 	gxFillSolid
.ab9a		9c 76 07	stz $0776			stz 	gxXPos
.ab9d		9c 77 07	stz $0777			stz 	gxXPos+1
.aba0		9c 78 07	stz $0778			stz 	gxYPos
.aba3		9c 7b 07	stz $077b			stz 	gxDrawScale
.aba6		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.aba8		a2 00		ldx #$00			ldx 	#0
.abaa		a0 00		ldy #$00			ldy 	#0
.abac		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.abaf		7a		ply				ply
.abb0		60		rts				rts
.abb1						SpritesCtrl:
.abb1		b1 30		lda ($30),y			lda 	(codePtr),y
.abb3		c8		iny				iny
.abb4		a2 01		ldx #$01			ldx 	#1
.abb6		c9 cb		cmp #$cb			cmp 	#KWD_ON
.abb8		f0 08		beq $abc2			beq 	SpriteSwitch
.abba		ca		dex				dex
.abbb		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.abbd		f0 03		beq $abc2			beq 	SpriteSwitch
.abbf		4c ec a7	jmp $a7ec			jmp 	SyntaxError
.abc2						SpriteSwitch:
.abc2		5a		phy				phy
.abc3		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.abc5		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.abc7		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.abca		7a		ply				ply
.abcb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.abcc						GfxCommand:
.abcc		a2 00		ldx #$00			ldx 	#0
.abce		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; command
.abd1		20 f0 95	jsr $95f0			jsr 	CheckComma
.abd4		e8		inx				inx
.abd5		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger 		; X
.abd8		20 f0 95	jsr $95f0			jsr 	CheckComma
.abdb		e8		inx				inx
.abdc		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; Y
.abdf		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.abe1		4a		lsr a				lsr 	a
.abe2		d0 12		bne $abf6			bne 	_GfxError
.abe4		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.abe6		b0 0e		bcs $abf6			bcs 	_GfxError 					; bit 7 should have been zero
.abe8		5a		phy				phy 								; save pos
.abe9		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.abeb		a6 59		ldx $59				ldx 	NSMantissa0+1
.abed		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.abef		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.abf2		b0 02		bcs $abf6			bcs 	_GfxError
.abf4		7a		ply				ply 								; restore pos and exit.
.abf5		60		rts				rts
.abf6						_GfxError:
.abf6		4c f1 a7	jmp $a7f1			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.abf9						UnaryHit:
.abf9		fa		plx				plx
.abfa		a9 36		lda #$36			lda 	#zTemp0
.abfc		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get sprite number 0
.abff		20 f0 95	jsr $95f0			jsr 	CheckComma
.ac02		e8		inx				inx
.ac03		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get sprite number 1
.ac06		20 e8 95	jsr $95e8			jsr		CheckRightBracket
.ac09		ca		dex				dex 								; fix back up again.
.ac0a		da		phx				phx 								; save X/Y
.ac0b		5a		phy				phy
.ac0c		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.ac0e		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac10		aa		tax				tax
.ac11		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.ac13		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; calculate result
.ac16		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.ac17		7a		ply				ply 								; restore XY
.ac18		fa		plx				plx
.ac19		20 70 a6	jsr $a670			jsr 	NSMSetByte 					; return the hit result
.ac1c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.ac1d						PaletteCommand:
.ac1d		a2 00		ldx #$00			ldx 	#0
.ac1f		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; colour
.ac22		20 f0 95	jsr $95f0			jsr 	CheckComma
.ac25		e8		inx				inx
.ac26		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger 		; r
.ac29		20 f0 95	jsr $95f0			jsr 	CheckComma
.ac2c		e8		inx				inx
.ac2d		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; g
.ac30		20 f0 95	jsr $95f0			jsr 	CheckComma
.ac33		e8		inx				inx
.ac34		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; b
.ac37		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.ac39		85 36		sta $36				sta 	zTemp0
.ac3b		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.ac3d		85 37		sta $37				sta 	zTemp0+1
.ac3f		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.ac41		26 37		rol $37				rol	 	zTemp0+1
.ac43		06 36		asl $36				asl 	zTemp0
.ac45		26 37		rol $37				rol	 	zTemp0+1
.ac47		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.ac49		85 01		sta $01				sta 	1
.ac4b		5a		phy				phy
.ac4c		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.ac4e		92 36		sta ($36)			sta 	(zTemp0)
.ac50		a0 01		ldy #$01			ldy 	#1
.ac52		a5 5a		lda $5a				lda 	NSMantissa0+2
.ac54		91 36		sta ($36),y			sta 	(zTemp0),y
.ac56		a5 59		lda $59				lda 	NSMantissa0+1
.ac58		c8		iny				iny
.ac59		91 36		sta ($36),y			sta 	(zTemp0),y
.ac5b		7a		ply				ply
.ac5c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.ac5d						XLoadCommand:
.ac5d		20 7a 8f	jsr $8f7a			jsr 	NewProgram
.ac60		20 9b 84	jsr $849b			jsr 	BackloadProgram
.ac63		4c 5a 85	jmp $855a			jmp 	WarmStart
.ac66						XGoCommand:
.ac66		20 7a 8f	jsr $8f7a			jsr 	NewProgram
.ac69		20 9b 84	jsr $849b			jsr 	BackloadProgram
.ac6c		4c f8 90	jmp $90f8			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.ac6f						UnaryEvent:
.ac6f		fa		plx				plx
.ac70		20 09 ad	jsr $ad09			jsr 	TimerToStackX 				; timer in +0
.ac73		e8		inx				inx  								; put reference into +1
.ac74		20 4f 9f	jsr $9f4f			jsr 	EvaluateTerm
.ac77		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.ac79		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.ac7b		d0 4c		bne $acc9			bne 	_UEType
.ac7d		e8		inx				inx 								; put the step in +2
.ac7e		20 f0 95	jsr $95f0			jsr 	CheckComma
.ac81		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger
.ac84		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.ac87		ca		dex				dex
.ac88		ca		dex				dex
.ac89		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.ac8b		85 36		sta $36				sta 	zTemp0
.ac8d		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.ac8f		85 37		sta $37				sta 	zTemp0+1
.ac91		5a		phy				phy
.ac92		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.ac94		b1 36		lda ($36),y			lda 	(zTemp0),y
.ac96		30 2d		bmi $acc5			bmi 	_UEFalse 					; exit if signed.
.ac98		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.ac9a		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac9c		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.ac9e		c8		iny				iny
.ac9f		b5 60		lda $60,x			lda 	NSMantissa1,x
.aca1		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aca3		c8		iny				iny
.aca4		b5 68		lda $68,x			lda 	NSMantissa2,x
.aca6		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aca8		90 1b		bcc $acc5			bcc 	_UEFalse 					; no, return FALSE.
.acaa		18		clc				clc
.acab		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.acad		b5 58		lda $58,x			lda 	NSMantissa0,x
.acaf		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.acb1		91 36		sta ($36),y			sta 	(zTemp0),y
.acb3		c8		iny				iny
.acb4		b5 60		lda $60,x			lda 	NSMantissa1,x
.acb6		75 62		adc $62,x			adc 	NSMantissa1+2,x
.acb8		91 36		sta ($36),y			sta 	(zTemp0),y
.acba		c8		iny				iny
.acbb		b5 68		lda $68,x			lda 	NSMantissa2,x
.acbd		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.acbf		91 36		sta ($36),y			sta 	(zTemp0),y
.acc1		7a		ply				ply
.acc2		4c 6e 96	jmp $966e			jmp 	ReturnTrue
.acc5						_UEFalse:
.acc5		7a		ply				ply 								; restore Y
.acc6		4c 79 96	jmp $9679			jmp 	ReturnFalse 				; and return False
.acc9						_UEType:
.acc9		4c f6 a7	jmp $a7f6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.accc						UnaryJoyX:
.accc		18		clc				clc
.accd		80 01		bra $acd0			bra 	JoyMain
.accf						UnaryJoyY:
.accf		38		sec				sec
.acd0						JoyMain:
.acd0		fa		plx				plx 								; get pos
.acd1		08		php				php 								; save carry (set for Y)
.acd2		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; ignore the parameter
.acd5		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.acd8		20 20 82	jsr $8220			jsr 	EXTReadController 			; read the controller.
.acdb		28		plp				plp
.acdc		b0 02		bcs $ace0			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.acde		4a		lsr a				lsr 	a
.acdf		4a		lsr a				lsr 	a
.ace0						_JMNoShift:
.ace0		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.ace1		b0 07		bcs $acea			bcs 	JMIsLeft
.ace3		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.ace4		b0 07		bcs $aced			bcs 	JMIsRight
.ace6		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; zero result
.ace9		60		rts				rts
.acea						JMIsLeft:
.acea		4c 6e 96	jmp $966e			jmp 	ReturnTrue
.aced						JMIsRight:
.aced		a9 01		lda #$01			lda 	#1
.acef		20 70 a6	jsr $a670			jsr 	NSMSetByte
.acf2		60		rts				rts
.acf3						UnaryJoyB:
.acf3		fa		plx				plx 								; get pos
.acf4		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; ignore the parameter
.acf7		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.acfa		20 20 82	jsr $8220			jsr 	EXTReadController 			; read the controller.
.acfd		29 10		and #$10			and 	#$10
.acff		d0 e9		bne $acea			bne 	JMIsLeft
.ad01		20 6e a6	jsr $a66e			jsr 	NSMSetZero
.ad04		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.ad05						UnaryTimer:
.ad05		fa		plx				plx
.ad06		20 e8 95	jsr $95e8			jsr 	CheckRightBracket
.ad09						TimerToStackX:
.ad09		20 6e a6	jsr $a66e			jsr 	NSMSetZero 					; zero result
.ad0c		64 01		stz $01				stz 	1 							; access I/O
.ad0e		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.ad11		95 58		sta $58,x			sta 	NSMantissa0,x
.ad13		ad 5a d6	lda $d65a			lda 	$D65A
.ad16		95 60		sta $60,x			sta 	NSMantissa1,x
.ad18		ad 5b d6	lda $d65b			lda 	$D65B
.ad1b		95 68		sta $68,x			sta 	NSMantissa2,x
.ad1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		80 fe		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.ad1e						MemoryDeleteLine:
.ad1e		20 3d ad	jsr $ad3d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad21		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ad23		a8		tay				tay
.ad24						_MDDLLoop:
.ad24		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ad26		92 30		sta ($30)			sta 	(codePtr)
.ad28		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ad2a		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ad2c		d0 07		bne $ad35			bne 	_MDLDLNext
.ad2e		a5 31		lda $31				lda 	codePtr+1
.ad30		c5 3b		cmp $3b				cmp 	zTemp2+1
.ad32		d0 01		bne $ad35			bne 	_MDLDLNext
.ad34						_MDDLExit:
.ad34		60		rts				rts
.ad35						_MDLDLNext:
.ad35		e6 30		inc $30				inc 	codePtr						; next byte
.ad37		d0 eb		bne $ad24			bne 	_MDDLLoop
.ad39		e6 31		inc $31				inc 	codePtr+1
.ad3b		80 e7		bra $ad24			bra 	_MDDLLoop
.ad3d						IMemoryFindEnd:
.ad3d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad3f		85 3a		sta $3a				sta 	0+zTemp2
.ad41		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad43		85 3b		sta $3b				sta 	1+zTemp2
.ad45						_MDLFELoop:
.ad45		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.ad47		f0 0b		beq $ad54			beq 	_MDLFEExit
.ad49		18		clc				clc
.ad4a		65 3a		adc $3a				adc 	zTemp2
.ad4c		85 3a		sta $3a				sta 	zTemp2
.ad4e		90 f5		bcc $ad45			bcc 	_MDLFELoop
.ad50		e6 3b		inc $3b				inc 	zTemp2+1
.ad52		80 f1		bra $ad45			bra 	_MDLFELoop
.ad54						_MDLFEExit:
.ad54		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.ad55						MemoryInsertLine:
.ad55		08		php				php
.ad56		20 3d ad	jsr $ad3d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad59		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.ad5b		1a		inc a				inc 	a
.ad5c		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ad5e		b0 36		bcs $ad96			bcs 	_MDLIError 					; no, fail.
.ad60		28		plp				plp 								; do at a specific point or the end ?
.ad61		90 08		bcc $ad6b			bcc 	_MDLIFound 					; if specific point already set.
.ad63		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.ad65		85 30		sta $30				sta 	codePtr 					; end.
.ad67		a5 3b		lda $3b				lda 	zTemp2+1
.ad69		85 31		sta $31				sta 	codePtr+1
.ad6b						_MDLIFound:
.ad6b		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ad6e		a8		tay				tay
.ad6f						_MDLIInsert:
.ad6f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.ad71		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ad73		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.ad75		c5 3a		cmp $3a				cmp 	zTemp2
.ad77		d0 06		bne $ad7f			bne 	_MDLINext
.ad79		a5 31		lda $31				lda 	codePtr+1
.ad7b		c5 3b		cmp $3b				cmp 	zTemp2+1
.ad7d		f0 0a		beq $ad89			beq 	_MDLIHaveSpace
.ad7f						_MDLINext:
.ad7f		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.ad81		d0 02		bne $ad85			bne 	_MDLINoBorrow
.ad83		c6 3b		dec $3b				dec 	zTemp2+1
.ad85						_MDLINoBorrow:
.ad85		c6 3a		dec $3a				dec 	zTemp2
.ad87		80 e6		bra $ad6f			bra 	_MDLIInsert
.ad89						_MDLIHaveSpace:
.ad89		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.ad8c		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.ad8d						_MDLICopy:
.ad8d		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.ad90		91 30		sta ($30),y			sta 	(codePtr),y
.ad92		88		dey				dey
.ad93		10 f8		bpl $ad8d			bpl 	_MDLICopy
.ad95		60		rts				rts
.ad96						_MDLIError:
.ad96		a9 06		lda #$06		lda	#6
.ad98		4c 01 96	jmp $9601		jmp	ErrorHandler
.ad9b						MDLAppendLine:
.ad9b		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ad9d		85 36		sta $36				sta 	zTemp0
.ad9f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ada1		85 38		sta $38				sta 	0+zTemp1
.ada3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ada5		85 39		sta $39				sta 	1+zTemp1
.ada7		b2 38		lda ($38)			lda 	(zTemp1)
.ada9		d0 0a		bne $adb5			bne 	_MDLANoInitialise
.adab		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adad		8d 7c 07	sta $077c			sta 	0+AppendPointer
.adb0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adb2		8d 7d 07	sta $077d			sta 	1+AppendPointer
.adb5						_MDLANoInitialise:
.adb5		18		clc				clc
.adb6		ad 7c 07	lda $077c			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.adb9		85 38		sta $38				sta 	zTemp1
.adbb		72 36		adc ($36)			adc 	(zTemp0)
.adbd		8d 7c 07	sta $077c			sta 	AppendPointer
.adc0		ad 7d 07	lda $077d			lda 	AppendPointer+1
.adc3		85 39		sta $39				sta 	zTemp1+1
.adc5		69 00		adc #$00			adc 	#0
.adc7		8d 7d 07	sta $077d			sta 	AppendPointer+1
.adca		a0 00		ldy #$00			ldy 	#0
.adcc						_MDLACopy:
.adcc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.adce		91 38		sta ($38),y			sta 	(zTemp1),y
.add0		c8		iny				iny
.add1		98		tya				tya
.add2		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.add4		d0 f6		bne $adcc			bne 	_MDLACopy
.add6		a9 00		lda #$00			lda 	#0 							; end of program.
.add8		91 38		sta ($38),y			sta 	(zTemp1),y
.adda		60		rts				rts
.077c						AppendPointer:
>077c								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.addb						MemoryNew:
.addb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.addd		85 30		sta $30				sta 	codePtr
.addf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ade1		85 31		sta $31				sta 	codePtr+1
.ade3		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ade5		92 30		sta ($30)			sta 	(codePtr)
.ade7		60		rts				rts
.ade8						MemoryInline:
.ade8		98		tya				tya 								; put address into stack,x
.ade9		18		clc				clc  								; get the offset, add codePtr
.adea		65 30		adc $30				adc 	codePtr
.adec		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.adee		a5 31		lda $31				lda 	codePtr+1
.adf0		69 00		adc #$00			adc 	#0
.adf2		95 60		sta $60,x			sta 	NSMantissa1,x
.adf4		74 68		stz $68,x			stz 	NSMantissa2,x
.adf6		74 70		stz $70,x			stz 	NSMantissa3,x
.adf8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.adf9						MemorySearch:
.adf9		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.adfb		86 37		stx $37				stx 	zTemp0+1
.adfd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adff		85 30		sta $30				sta 	codePtr
.ae01		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae03		85 31		sta $31				sta 	codePtr+1
.ae05						_MTAXLoop:
.ae05		b2 30		lda ($30)			lda 	(codePtr)
.ae07		18		clc				clc
.ae08		f0 21		beq $ae2b			beq 	_MTAXExit 					; reached end, exit with CC.
.ae0a		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ae0c		b1 30		lda ($30),y			lda 	(codePtr),y
.ae0e		38		sec				sec
.ae0f		e5 36		sbc $36				sbc 	zTemp0
.ae11		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ae13		c8		iny				iny 								; do the MSB
.ae14		b1 30		lda ($30),y			lda 	(codePtr),y
.ae16		e5 37		sbc $37				sbc 	zTemp0+1
.ae18		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ae1a		f0 0f		beq $ae2b			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ae1c		b0 0d		bcs $ae2b			bcs 	_MTAXExit 					; current < required exit
.ae1e		18		clc				clc
.ae1f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ae21		65 30		adc $30				adc 	codePtr
.ae23		85 30		sta $30				sta 	codePtr
.ae25		90 02		bcc $ae29			bcc 	_CREExit
.ae27		e6 31		inc $31				inc 	codePtr+1 					; carry
.ae29						_CREExit:
.ae29		80 da		bra $ae05			bra 	_MTAXLoop
.ae2b						_MTAXExit:
.ae2b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.ae2c						UpdateFont:
.ae2c		a5 01		lda $01				lda 	1 							; save position
.ae2e		48		pha				pha
.ae2f		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.ae31		85 01		sta $01				sta 	1
.ae33		a9 5a		lda #$5a			lda 	#((FontBinary) & $FF)
.ae35		85 36		sta $36				sta 	0+zTemp0
.ae37		a9 ae		lda #$ae			lda 	#((FontBinary) >> 8)
.ae39		85 37		sta $37				sta 	1+zTemp0
.ae3b		a9 00		lda #$00			lda 	#(($C000) & $FF)
.ae3d		85 38		sta $38				sta 	0+zTemp1
.ae3f		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.ae41		85 39		sta $39				sta 	1+zTemp1
.ae43						_UFCopy1:
.ae43		a0 00		ldy #$00			ldy 	#0
.ae45						_UFCopy2:
.ae45		b1 36		lda ($36),y			lda 	(zTemp0),y
.ae47		91 38		sta ($38),y			sta 	(zTemp1),y
.ae49		c8		iny				iny
.ae4a		d0 f9		bne $ae45			bne 	_UFCopy2
.ae4c		e6 37		inc $37				inc 	zTemp0+1
.ae4e		e6 39		inc $39				inc 	zTemp1+1
.ae50		a5 39		lda $39				lda 	zTemp1+1
.ae52		c9 c8		cmp #$c8			cmp 	#$C8
.ae54		d0 ed		bne $ae43			bne 	_UFCopy1
.ae56		68		pla				pla 								; restore.
.ae57		85 01		sta $01				sta 	1
.ae59		60		rts				rts
.ae5a						FontBinary:
>ae5a		06 09 10 3c 10 21 7e 00				.binary 	"../common/generated/font.bin"
>ae62		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>ae72		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>ae82		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>ae92		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>aea2		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>aeb2		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>aec2		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>aed2		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>aee2		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>aef2		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>af02		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>af12		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>af22		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>af32		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>af42		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>af52		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>af62		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>af72		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>af82		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>af92		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>afa2		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>afb2		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>afc2		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>afd2		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>afe2		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>aff2		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>b002		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>b012		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>b022		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>b032		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>b042		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>b052		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>b062		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>b072		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>b082		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>b092		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>b0a2		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>b0b2		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>b0c2		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>b0d2		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>b0e2		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>b0f2		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>b102		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>b112		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>b122		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>b132		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>b142		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>b152		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>b162		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>b172		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>b182		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>b192		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>b1a2		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>b1b2		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>b1c2		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>b1d2		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>b1e2		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>b1f2		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>b202		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>b212		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>b222		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>b232		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>b242		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>b252		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>b262		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>b272		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>b282		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>b292		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>b2a2		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>b2b2		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b2c2		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b2d2		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b2e2		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b2f2		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b302		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b312		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b322		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b332		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b342		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b352		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b362		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b372		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b382		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b392		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b3a2		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b3b2		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b3c2		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b3d2		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b3e2		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b3f2		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>b402		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>b412		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>b422		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>b432		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>b442		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>b452		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>b462		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b472		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b482		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b492		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b4a2		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b4b2		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b4c2		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b4d2		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b4e2		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b4f2		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b502		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b512		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>b522		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>b532		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>b542		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>b552		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>b562		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>b572		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>b582		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b592		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b5a2		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b5b2		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b5c2		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b5d2		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b5e2		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b5f2		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b602		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b612		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b622		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b632		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b642		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b652		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b65a						PingCommand:
.b65a		5a		phy				phy 								; save pos
.b65b		a9 01		lda #$01			lda 	#1 						; push channel.
.b65d		48		pha				pha
.b65e		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b660		a2 06		ldx #$06			ldx 	#6 						; length
.b662		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b664		80 24		bra $b68a			bra 	SoundEffectCommand
.b666						ZapCommand:
.b666		5a		phy				phy 								; save pos
.b667		a9 01		lda #$01			lda 	#1 						; push channel.
.b669		48		pha				pha
.b66a		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b66c		a2 0a		ldx #$0a			ldx 	#10 						; length
.b66e		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b670		80 18		bra $b68a			bra 	SoundEffectCommand
.b672						ShootCommand:
.b672		5a		phy				phy 								; save pos
.b673		a9 03		lda #$03			lda 	#3 						; push channel.
.b675		48		pha				pha
.b676		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b678		a2 04		ldx #$04			ldx 	#4 						; length
.b67a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b67c		80 0c		bra $b68a			bra 	SoundEffectCommand
.b67e						Explode:
.b67e		5a		phy				phy 								; save pos
.b67f		a9 03		lda #$03			lda 	#3 						; push channel.
.b681		48		pha				pha
.b682		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b684		a2 0a		ldx #$0a			ldx 	#10 						; length
.b686		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b688		80 00		bra $b68a			bra 	SoundEffectCommand
.b68a						SoundEffectCommand:
.b68a		8d 7e 07	sta $077e			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b68d		9c 7f 07	stz $077f			stz 	SoundCommandBlock+1
.b690		a9 0f		lda #$0f			lda 	#15
.b692		8d 80 07	sta $0780			sta 	SoundCommandBlock+2
.b695		8e 81 07	stx $0781			stx 	SoundCommandBlock+3
.b698		8c 82 07	sty $0782			sty 	SoundCommandBlock+4
.b69b		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b69e		68		pla				pla
.b69f		09 10		ora #$10			ora 	#$10  						; execute command $11
.b6a1		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b6a3		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b6a5		20 3f 80	jsr $803f			jsr 	SNDCommand
.b6a8		7a		ply				ply
.b6a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b6aa						UnaryPlaying:
.b6aa		fa		plx				plx
.b6ab		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; get channel #
.b6ae		48		pha				pha
.b6af		20 e8 95	jsr $95e8			jsr		CheckRightBracket
.b6b2		68		pla				pla
.b6b3		c9 04		cmp #$04			cmp 	#4
.b6b5		b0 0c		bcs $b6c3			bcs 	_UPNotPlaying
.b6b7		09 20		ora #$20			ora 	#$20 						; query playing ?
.b6b9		20 3f 80	jsr $803f			jsr 	SNDCommand
.b6bc		c9 00		cmp #$00			cmp 	#0
.b6be		f0 03		beq $b6c3			beq 	_UPNotPlaying
.b6c0		4c 6e 96	jmp $966e			jmp 	ReturnTrue
.b6c3						_UPNotPlaying:
.b6c3		4c 79 96	jmp $9679			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b6c6						SoundCommand:
.b6c6		b1 30		lda ($30),y			lda 	(codePtr),y
.b6c8		c9 ca		cmp #$ca			cmp 	#KWD_OFF 					; SOUND OFF ?
.b6ca		d0 09		bne $b6d5			bne 	_SNDMain
.b6cc		c8		iny				iny 								; skip OFF
.b6cd		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b6cf		5a		phy				phy
.b6d0		20 3f 80	jsr $803f			jsr 	SNDCommand
.b6d3		7a		ply				ply
.b6d4		60		rts				rts
.b6d5						_SNDMain:
.b6d5		a2 00		ldx #$00			ldx 	#0
.b6d7		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; channel
.b6da		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b6dc		b0 4b		bcs $b729			bcs 	_SndError
.b6de		e8		inx				inx 								; do the rest in slot 1.
.b6df		20 f0 95	jsr $95f0			jsr 	CheckComma
.b6e2		20 ee a5	jsr $a5ee			jsr 	Evaluate16BitInteger 		; Pitch
.b6e5		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b6e7		c9 10		cmp #$10			cmp 	#16
.b6e9		b0 3e		bcs $b729			bcs 	_SndError
.b6eb		8d 7f 07	sta $077f			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b6ee		b5 58		lda $58,x			lda 	NSMantissa0,x
.b6f0		8d 7e 07	sta $077e			sta 	SoundCommandBlock
.b6f3		20 f0 95	jsr $95f0			jsr 	CheckComma
.b6f6		20 09 a6	jsr $a609			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b6f9		8d 81 07	sta $0781			sta 	SoundCommandBlock+3
.b6fc		a9 0f		lda #$0f			lda 	#15
.b6fe		8d 80 07	sta $0780			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b701		9c 82 07	stz $0782			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b704		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b707		b1 30		lda ($30),y			lda 	(codePtr),y
.b709		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b70b		d0 0e		bne $b71b			bne 	_SNDPlay
.b70d		c8		iny				iny
.b70e		20 f8 a5	jsr $a5f8			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b711		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b713		8d 82 07	sta $0782			sta 	SoundCommandBlock+4
.b716		b5 60		lda $60,x			lda 	NSMantissa1,x
.b718		8d 83 07	sta $0783			sta 	SoundCommandBlock+5
.b71b						_SNDPlay:
.b71b		5a		phy				phy
.b71c		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b71e		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b720		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b722		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b724		20 3f 80	jsr $803f			jsr 	SNDCommand
.b727		7a		ply				ply
.b728		60		rts				rts
.b729						_SndError:
.b729		4c f1 a7	jmp $a7f1			jmp 	RangeError
.077e						SoundCommandBlock:
>077e								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b72c						StackPushByte:
.b72c		48		pha				pha 								; save byte on stack
.b72d		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b72f		d0 08		bne $b739			bne 	_SPBNoBorrow
.b731		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b733		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b735		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b737		90 06		bcc $b73f			bcc 	_SPBMemory
.b739						_SPBNoBorrow:
.b739		c6 34		dec $34				dec 	basicStack
.b73b		68		pla				pla 								; get back and write
.b73c		92 34		sta ($34)			sta 	(basicStack)
.b73e		60		rts				rts
.b73f						_SPBMemory:
.b73f		a9 12		lda #$12		lda	#18
.b741		4c 01 96	jmp $9601		jmp	ErrorHandler
.b744						StackPopByte:
.b744		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b746		e6 34		inc $34				inc 	basicStack
.b748		d0 02		bne $b74c			bne 	_SPBNoCarry
.b74a		e6 35		inc $35				inc 	basicStack+1
.b74c						_SPBNoCarry:
.b74c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b74d						StackOpen:
.b74d		48		pha				pha 								; save frame byte
.b74e		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b750		0a		asl a				asl 	a 							; claim twice this for storage
.b751		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b753		38		sec				sec 								; so basically subtracting from
.b754		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b756		85 34		sta $34				sta 	basicStack
.b758		b0 09		bcs $b763			bcs 	_SONoBorrow
>b75a		db						.byte 	$DB 						; causes a break in the emulator
.b75b		c6 35		dec $35				dec 	basicStack+1
.b75d		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b75f		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b761		90 04		bcc $b767			bcc 	_SOMemory
.b763						_SONoBorrow:
.b763		68		pla				pla 								; get marker back and write at TOS
.b764		92 34		sta ($34)			sta 	(basicStack)
.b766		60		rts				rts
.b767						_SOMemory:
.b767		a9 12		lda #$12		lda	#18
.b769		4c 01 96	jmp $9601		jmp	ErrorHandler
.b76c						StackClose:
.b76c		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b76e		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b770		0a		asl a				asl 	a 							; claim twice this.
.b771		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b773		85 34		sta $34				sta 	basicStack
.b775		90 02		bcc $b779			bcc 	_SCExit
.b777		e6 35		inc $35				inc 	basicStack+1
.b779						_SCExit:
.b779		60		rts				rts
.b77a						StackCheckFrame:
.b77a		48		pha				pha
.b77b						_StackRemoveLocals:
.b77b		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b77d		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b77f		b0 05		bcs $b786			bcs 	_SCNoLocal
.b781		20 19 8e	jsr $8e19			jsr 	LocalPopValue 				; restore the local value
.b784		80 f5		bra $b77b			bra 	_StackRemoveLocals 			; gr round again
.b786						_SCNoLocal:
.b786		68		pla				pla 								; get the frame check.
.b787		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b789		29 f0		and #$f0			and 	#$F0 						; check type bits
.b78b		d0 01		bne $b78e			bne 	_SCFError 					; different, we have structures mixed up
.b78d		60		rts				rts
.b78e						_SCFError:
.b78e		8a		txa				txa 								; report error X
.b78f		4c 01 96	jmp $9601			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b792						STKSaveCodePosition:
.b792		5a		phy				phy
.b793		98		tya				tya 								; save Y
.b794		a0 05		ldy #$05			ldy 	#5
.b796		91 34		sta ($34),y			sta 	(basicStack),y
.b798		88		dey				dey 								; save Code Pointer
.b799						_STKSaveLoop:
.b799		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b79c		91 34		sta ($34),y			sta 	(basicStack),y
.b79e		88		dey				dey
.b79f		d0 f8		bne $b799			bne 	_STKSaveLoop
.b7a1		7a		ply				ply
.b7a2		60		rts				rts
.b7a3						STKLoadCodePosition:
.b7a3		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b7a5						_STKLoadLoop:
.b7a5		b1 34		lda ($34),y			lda 	(basicStack),y
.b7a7		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b7aa		c8		iny				iny
.b7ab		c0 05		cpy #$05			cpy 	#5
.b7ad		d0 f6		bne $b7a5			bne 	_STKLoadLoop
.b7af		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b7b1		a8		tay				tay
.b7b2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b7b3						StackReset:
.b7b3		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b7b5		85 34		sta $34				sta 	0+basicStack
.b7b7		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b7b9		85 35		sta $35				sta 	1+basicStack
.b7bb		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b7bd		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b7bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b7c0						StringConcrete:
.b7c0		5a		phy				phy 								; save position on stack
.b7c1		20 3b a1	jsr $a13b			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b7c4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b7c6		85 38		sta $38				sta 	zTemp1
.b7c8		b5 60		lda $60,x			lda 	NSMantissa1,x
.b7ca		85 39		sta $39				sta 	zTemp1+1
.b7cc		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b7ce						_SALength:
.b7ce		c8		iny				iny
.b7cf		b1 38		lda ($38),y			lda 	(zTemp1),y
.b7d1		d0 fb		bne $b7ce			bne 	_SALength
.b7d3		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b7d5		b0 3d		bcs $b814			bcs 	_SALengthError
.b7d7		98		tya				tya 				 				; length of the new string
.b7d8		18		clc				clc
.b7d9		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b7db		90 02		bcc $b7df			bcc 	_SAHaveLength
.b7dd		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b7df						_SAHaveLength:
.b7df		48		pha				pha 								; save length.
.b7e0		38		sec				sec
.b7e1		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b7e3		6d 0a 04	adc $040a			adc 	stringMemory
.b7e6		8d 0a 04	sta $040a			sta 	stringMemory
.b7e9		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b7eb		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b7ed		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b7ef		6d 0b 04	adc $040b			adc 	stringMemory+1
.b7f2		8d 0b 04	sta $040b			sta 	stringMemory+1
.b7f5		85 3b		sta $3b				sta 	zTemp2+1
.b7f7		95 60		sta $60,x			sta 	NSMantissa1,x
.b7f9		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b7fa		38		sec				sec
.b7fb		e9 03		sbc #$03			sbc 	#3
.b7fd		92 3a		sta ($3a)			sta 	(zTemp2)
.b7ff		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b801		a0 01		ldy #$01			ldy 	#1
.b803		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b805						_SACopyNewString:
.b805		a0 00		ldy #$00			ldy 	#0
.b807						_SACopyNSLoop:
.b807		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b809		c8		iny				iny 								; write two on in string storage
.b80a		c8		iny				iny
.b80b		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b80d		88		dey				dey 								; this makes it one one.
.b80e		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b810		d0 f5		bne $b807			bne 	_SACopyNSLoop
.b812		7a		ply				ply
.b813		60		rts				rts
.b814						_SALengthError:
.b814		a9 09		lda #$09		lda	#9
.b816		4c 01 96	jmp $9601		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b819						StringSystemInitialise:
.b819		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b81b		8d 0a 04	sta $040a			sta 	0+stringMemory
.b81e		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b820		8d 0b 04	sta $040b			sta 	1+stringMemory
.b823		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b826		60		rts				rts
.b827						StringSpaceInitialise:
.b827		20 3b a1	jsr $a13b			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b82a		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b82c		8d 0c 04	sta $040c			sta 	stringInitialised
.b82f		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b832		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b835		ad 0b 04	lda $040b			lda 	stringMemory+1
.b838		3a		dec a				dec 	a
.b839		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b83c		60		rts				rts
.b83d						StringTempAllocate:
.b83d		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b83f		b0 30		bcs $b871			bcs 	_STALength
.b841		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b844		30 05		bmi $b84b			bmi 	_STAAllocate
.b846		48		pha				pha 								; save value to subtract.
.b847		20 27 b8	jsr $b827			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b84a		68		pla				pla 								; restore it
.b84b						_STAAllocate:
.b84b		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b84d		18		clc				clc  								; deliberate allows one more
.b84e		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b851		8d 0d 04	sta $040d			sta 	stringTempPointer
.b854		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b856		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b858		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b85b		69 ff		adc #$ff			adc 	#$FF
.b85d		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b860		85 3d		sta $3d				sta 	zsTemp+1
.b862		95 60		sta $60,x			sta 	NSMantissa1,x
.b864		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b866		74 70		stz $70,x			stz 	NSMantissa3,x
.b868		a9 10		lda #$10			lda 	#NSTString
.b86a		95 50		sta $50,x			sta 	NSStatus,x
.b86c		a9 00		lda #$00			lda 	#0 							; clear the target string
.b86e		92 3c		sta ($3c)			sta 	(zsTemp)
.b870		60		rts				rts
.b871						_STALength:
.b871		a9 09		lda #$09		lda	#9
.b873		4c 01 96	jmp $9601		jmp	ErrorHandler
.b876						StringTempWrite:
.b876		48		pha				pha
.b877		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b879		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b87b		d0 02		bne $b87f			bne 	_STWNoCarry
.b87d		e6 3d		inc $3d				inc 	zsTemp+1
.b87f						_STWNoCarry:
.b87f		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b881		92 3c		sta ($3c)			sta 	(zsTemp)
.b883		68		pla				pla
.b884		60		rts				rts

;******  Return to file: _basic.asm

.b885						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 86 07	lda $0786			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 85 07	sty $0785			sty 	EXTColumn
.c02d	a02d	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 84 07	inc $0784			inc 	EXTRow  					; bump row
.c035	a035	9c 85 07	stz $0785			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 84 07	lda $0784			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 88 07	cmp $0788			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 85 07	dec $0785			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 85 07	stz $0785			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 84 07	dec $0784			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 84 07	lda $0784			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 84 07	dec $0784			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 87 07	sbc $0787			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 85 07	sty $0785			sty 	EXTColumn
.c08c	a08c	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 85 07	sty $0785			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 88 07	lda $0788			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 84 07	cmp $0784			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 84 07	inc $0784			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 85 07	lda $0785			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 85 07	sta $0785			sta 	EXTColumn
.c0c9	a0c9	cd 87 07	cmp $0787			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 85 07	dec $0785			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 86 07	and $0786			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 86 07	sta $0786			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 86 07	ora $0786			ora 	EXTTextColour
.c13c	a13c	8d 86 07	sta $0786			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 86 07	lda $0786			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 86 07	lda $0786			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 84 07	stz $0784			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 85 07	stz $0785			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 85 07	lda $0785			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 84 07	lda $0784			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 73 07	cmp $0773			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 73 07	sta $0773			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 18 bc	jsr $bc18			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 0a 82	jsr $820a			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 85 07	lda $0785			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 85 07	ldy $0785			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 85 07	ldy $0785			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 85 07	cpy $0785			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 87 07	lda $0787			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0784						EXTRow:
>0784								.fill 	1
.0785						EXTColumn:
>0785								.fill 	1
.0786						EXTTextColour:
>0786								.fill 	1
.0787						EXTScreenWidth:
>0787								.fill 	1
.0788						EXTScreenHeight:
>0788								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 86 07	sta $0786			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 87 07	sta $0787			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 88 07	sta $0788			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 84 07	lda $0784			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.0789						gxCurrentX:
>0789								.fill 	2
.078b						gxCurrentY:
>078b								.fill 	2
.078d						gxLastX:
>078d								.fill 	2
.078f						gxLastY:
>078f								.fill 	2
.0791						gxX0:
>0791								.fill 	2
.0793						gxY0:
>0793								.fill 	2
.0795						gxX1:
>0795								.fill 	2
.0797						gxY1:
>0797								.fill 	2
.0799						gxSpritesOn:
>0799								.fill 	1
.079a						gxBitmapsOn:
>079a								.fill 	1
.079b						gxBasePage:
>079b								.fill 	1
.079c						gxSpritePage:
>079c								.fill 	1
.079d						gxHeight:
>079d								.fill 	1
.079e						gxMode:
>079e								.fill 	1
.079f						gxColour:
>079f								.fill 	1
.07a0						gxEORValue:
>07a0								.fill 	1
.07a1						gxANDValue:
>07a1								.fill 	1
.07a2						gxOriginalLUTValue:
>07a2								.fill 	1
.07a3						gxOffset:
>07a3								.fill 	1
.07a4						GSCurrentSpriteID:
>07a4								.fill 	1
.07a5						GSCurrentSpriteAddr:
>07a5								.fill 	2
.07a7						gxSpriteOffsetBase:
>07a7								.fill 	2
.07a9						gxSpriteLow:
>07a9								.fill 	64
.07e9						gxSpriteHigh:
>07e9								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c800	a800	9d 8d 07	sta $078d,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8b 07	sta $078b			sta 	gxCurrentY
.c80a	a80a	9c 8c 07	stz $078c			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 89 07	sta $0789			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8a 07	sta $078a			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8a 07	lda $078a			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 89 07	lda $0789			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8b 07	lda $078b			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd 9d 07	cmp $079d			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c83c	a83c	9d 91 07	sta $0791,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2c 08	sta $082c			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 2d 08	stz $082d			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2a 08	lda $082a			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2b 08	cmp $082b			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2b 08	lda $082b			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2a 08	lda $082a			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2b 08	ldx $082b			ldx	 	gxYCentre
.c898	a898	8d 2b 08	sta $082b			sta 	gxYCentre
.c89b	a89b	8e 2a 08	stx $082a			stx 	gxxCentre
.c89e	a89e	ad 2d 08	lda $082d			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 2d 08	sta $082d			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2c 08	lda $082c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 2d 08	lda $082d			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2b 08	lda $082b			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2a 08	lda $082a			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2c 08	lda $082c			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c8df	a8df	8d 2b 08	sta $082b			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 95 07	lda $0795,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 91 07	sta $0791,x			sta 	gxX0,x
.c8f6	a8f6	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 92 07	sta $0792,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 2d 08	stz $082d			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2a 08	inc $082a			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2a 08	lda $082a			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2a 08	inc $082a			inc 	gxxCentre					; X++
.c918	a918	ce 2b 08	dec $082b			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2a 08	lda $082a			lda 	gxxCentre
.c91f	a91f	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 2d 08	dec $082d			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 97 07	lda $0797			lda 	gxY1
.c958	a958	ed 93 07	sbc $0793			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 29 08	sta $0829			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2a 08	stz $082a			stz 	gxxCentre
.c96c	a96c	ad 29 08	lda $0829			lda 	gxRadius
.c96f	a96f	8d 2b 08	sta $082b			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 95 07	lda $0795,x			lda 	gxX1,x
.c987	a987	7d 91 07	adc $0791,x			adc 	gxX0,x
.c98a	a98a	9d 95 07	sta $0795,x			sta 	gxX1,x
.c98d	a98d	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c990	a990	7d 92 07	adc $0792,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 96 07	sta $0796,x			sta 	gxX1+1,x
.c997	a997	7e 95 07	ror $0795,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.0829						gxRadius:
>0829								.fill 	1
.082a						gxxCentre:
>082a								.fill 	1
.082b						gxYCentre:
>082b								.fill 	1
.082c						gxIsFillMode:
>082c								.fill 	1
.082d						gxYChanged:
>082d								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad 9d 07	lda $079d			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9b 07	adc $079b			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9b 07	cmp $079b			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 99 07	stz $0799			stz 	gxSpritesOn
.c9f4	a9f4	9c 9a 07	stz $079a			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 89 07	stz $0789,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9a 07	sta $079a			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9b 07	sta $079b			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e 9d 07	stx $079d			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 99 07	sta $0799			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9c 07	sta $079c			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d a7 07	sta $07a7			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d a8 07	sta $07a8			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a6 07	stz $07a6			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e e9 07	stz $07e9,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a3 07	ldy $07a3			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a1 07	and $07a1			and 	gxANDValue
.cac1	aac1	4d a0 07	eor $07a0			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 30 08	lda $0830			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 91 07	lda $0791			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 95 07	eor $0795			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 92 07	lda $0792			lda 	gxX0+1
.cae7	aae7	4d 96 07	eor $0796			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 97 07	lda $0797			lda 	gxY1
.caee	aaee	4d 93 07	eor $0793			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 32 08	lda $0832			lda 	gxPosition
.caf6	aaf6	6d 33 08	adc $0833			adc 	gxAdjust
.caf9	aaf9	8d 32 08	sta $0832			sta 	gxPosition
.cafc	aafc	9c 35 08	stz $0835			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 34 08	cmp $0834			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 35 08	dec $0835			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 34 08	sbc $0834			sbc 	gxTotal
.cb0d	ab0d	8d 32 08	sta $0832			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 30 08	lda $0830			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 35 08	lda $0835			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 35 08	lda $0835			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 31 08	lda $0831			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 91 07	lda $0791			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 92 07	dec $0792			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 91 07	dec $0791			dec 	gxX0
.cb3e	ab3e	ce a3 07	dec $07a3			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a3 07	lda $07a3			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 91 07	inc $0791			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 92 07	inc $0792			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a3 07	inc $07a3			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 93 07	inc $0793			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 97 07	lda $0797			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 93 07	sbc $0793			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 2f 08	sta $082f			sta 	gxDiffY
.cb86	ab86	9c 31 08	stz $0831			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 95 07	lda $0795			lda 	gxX1
.cb8d	ab8d	ed 91 07	sbc $0791			sbc 	gxX0
.cb90	ab90	8d 2e 08	sta $082e			sta 	gxDiffX
.cb93	ab93	ad 96 07	lda $0796			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 92 07	sbc $0792			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 2e 08	ror $082e			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 2e 08	sbc $082e			sbc 	gxDiffX
.cba6	aba6	8d 2e 08	sta $082e			sta 	gxDiffX
.cba9	aba9	ce 31 08	dec $0831			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 30 08	stz $0830			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 2f 08	lda $082f			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 33 08	sta $0833			sta 	gxAdjust
.cbb5	abb5	ad 2e 08	lda $082e			lda 	gxDiffX
.cbb8	abb8	8d 34 08	sta $0834			sta 	gxTotal
.cbbb	abbb	ad 2f 08	lda $082f			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 2e 08	cmp $082e			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 30 08	dec $0830			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 2e 08	lda $082e			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 33 08	sta $0833			sta 	gxAdjust
.cbcc	abcc	ad 2f 08	lda $082f			lda 	gxDiffY
.cbcf	abcf	8d 34 08	sta $0834			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 34 08	lda $0834			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 32 08	sta $0832			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.082e						gxDiffX:
>082e								.fill 	1
.082f						gxDiffY:
>082f								.fill 	1
.0830						gxIsDiffYLarger:
>0830								.fill 	1
.0831						gxDXNegative:
>0831								.fill 	1
.0832						gxPosition:
>0832								.fill 	1
.0833						gxAdjust:
>0833								.fill 	1
.0834						gxTotal:
>0834								.fill 	1
.0835						gxAddSelect:
>0835								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e 9f 07	stx $079f			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d 9e 07	sta $079e			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a1 07	stz $07a1			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae 9f 07	ldx $079f			ldx 	gxColour
.cbec	abec	8e a0 07	stx $07a0			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a1 07	stx $07a1			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a0 07	stz $07a0			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a1 07	lda $07a1			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a1 07	sta $07a1			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a3 07	ldy $07a3			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a1 07	and $07a1			and 	gxANDValue
.cc16	ac16	4d a0 07	eor $07a0			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 93 07	lda $0793			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 97 07	cmp $0797			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 93 07	inc $0793			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 93 07	lda $0793			lda 	gxY0 						; reached last line
.cc48	ac48	cd 97 07	cmp $0797			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 95 07	lda $0795			lda		gxX1
.cc65	ac65	ed 91 07	sbc $0791			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 96 07	lda $0796			lda 	gxX1+1
.cc6d	ac6d	ed 92 07	sbc $0792			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a3 07	lda $07a3			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a1 07	and $07a1			and 	gxANDValue
.cc8a	ac8a	4d a0 07	eor $07a0			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a1 07	and $07a1			and 	gxANDValue
.cca8	aca8	4d a0 07	eor $07a0			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a1 07	and $07a1			and 	gxANDValue
.ccc0	acc0	4d a0 07	eor $07a0			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a3 07	sta $07a3			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 36 08	sta $0836			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 37 08	sta $0837			sta 	gxMask 						; and mask
.cce7	ace7	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 93 07	lda $0793			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 39 08	sty $0839			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 38 08	stx $0838			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3b 08	lda $083b			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3a 08	sta $083a			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3b 08	bit $083b			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 37 08	lda $0837			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3a 08	lda $083a			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 93 07	lda $0793			lda 	gxY0 						; off screen
.cd20	ad20	cd 9d 07	cmp $079d			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 36 08	cmp $0836			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 93 07	sta $0793			sta 	gxY0
.cd39	ad39	ae 3a 08	ldx $083a			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 36 08	lda $0836			lda 	gxSize
.cd40	ad40	6d 91 07	adc $0791			adc 	gxX0
.cd43	ad43	8d 91 07	sta $0791			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 92 07	inc $0792			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 38 08	jmp ($0838)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3a 08	lda $083a			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c 9e 07	bit $079e			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 37 08	lda $0837			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3b 08	lda $083b			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a1 07	and $07a1			and 	gxANDValue
.cd84	ad84	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 36 08	cmp $0836			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 93 07	inc $0793			inc 	gxY0
.cda1	ada1	60		rts				rts
.0836						gxSize:
>0836								.fill 	1
.0837						gxMask:
>0837								.fill 	1
.0838						gxAcquireVector:
>0838								.fill 	2
.083a						gxScale:
>083a								.fill 	1
.083b						gxUseMode:
>083b								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d 9e 07	eor $079e			eor 	gxMode
.cda7	ada7	8d 3b 08	sta $083b			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad 9f 07	lda $079f			lda 	gxColour
.cde0	ade0	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 99 07	lda $0799			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d 9e 07	eor $079e			eor 	gxMode
.cdf4	adf4	8d 3b 08	sta $083b			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3c 08	lda $083c			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9c 07	lda $079c			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 3d 08	ldx $083d			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 3f 08	adc $083f			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 40 08	adc $0840			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3c 08	cpy $083c			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a4 07	sta $07a4			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a6 07	sta $07a6			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a5 07	sta $07a5			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 3f 08	lda $083f			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 40 08	lda $0840			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d a7 07	adc $07a7			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad a8 07	lda $07a8			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 3e 08	ora $083e			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d e9 07	ora $07e9,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 99 07	lda $0799			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 91 07	adc $0791			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 92 07	lda $0792			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 93 07	adc $0793			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 92 07	lsr $0792			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 91 07	ror $0791			ror 	gxX0
.cf60	af60	4e 91 07	lsr $0791			lsr 	gxX0
.cf63	af63	4e 93 07	lsr $0793			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 93 07	lsr $0793			lsr 	gxY0
.cf69	af69	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 91 07	ora $0791			ora 	gxX0
.cf74	af74	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf77	af77	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 93 07	ora $0793			ora 	gxY0
.cf7f	af7f	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a2 07	sta $07a2			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a2 07	lda $07a2			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 93 07	lda $0793			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 91 07	lda $0791			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a3 07	sta $07a3			sta 	gxOffset
.cfd1	afd1	ad 92 07	lda $0792			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9b 07	adc $079b			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a3 07	lda $07a3			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a3 07	sta $07a3			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d a9 07	ora $07a9,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y
.d023	b023	7d e9 07	adc $07e9,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y
.d051	b051	fd a9 07	sbc $07a9,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9c 07	lda $079c			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 40 08	sta $0840			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 3d 08	sta $083d			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3c 08	sta $083c			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 3e 08	sta $083e			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 3f 08	sta $083f			sta 	gxSpriteOffset
.d09e	b09e	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a1	b0a1	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a7	b0a7	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083c						gxSizePixels:
>083c								.fill 	1
.083d						gxSizeBits:
>083d								.fill 	1
.083e						gxSpriteLUT:
>083e								.fill 	1
.083f						gxSpriteOffset:
>083f								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 91 07	lda $0791			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 95 07	cmp $0795			cmp 	gxX1
.d0bb	b0bb	ad 92 07	lda $0792			lda 	gxX0+1
.d0be	b0be	ed 96 07	sbc $0796			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 93 07	lda $0793			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 97 07	cmp $0797			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 91 07	lda $0791,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 91 07	lda $0791,y			lda 	gxX0,y
.d0eb	b0eb	9d 91 07	sta $0791,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 91 07	sta $0791,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d17a	b17a	55 4e 54 28
>d17e	b17e	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d186	b186	54 24 28
>d189	b189	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d190	b190	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d197	b197	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d19e	b19e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $98 LEFT$(
>d1a6	b1a6	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $99 LEN(
>d1ac	b1ac	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9a MAX(
>d1b2	b1b2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9b MID$(
>d1b9	b1b9	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9c MIN(
>d1bf	b1bf	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9d NOT(
>d1c5	b1c5	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9e PEEK(
>d1cc	b1cc	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9f PEEKD(
>d1d4	b1d4	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a0 PEEKL(
>d1dc	b1dc	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a1 PEEKW(
>d1e4	b1e4	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a2 PLAYING(
>d1ec	b1ec	47 28
>d1ee	b1ee	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a3 RANDOM(
>d1f6	b1f6	28
>d1f7	b1f7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a4 RIGHT$(
>d1ff	b1ff	28
>d200	b200	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a5 RND(
>d206	b206	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a6 SGN(
>d20c	b20c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a7 SPC(
>d212	b212	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a8 STR$(
>d219	b219	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a9 TIMER(
>d221	b221	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $aa TRUE
>d227	b227	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ab VAL(
>d22d	b22d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ac FOR
>d232	b232	02 8f 49 46				.text	2,$8f,"IF"             ; $ad IF
>d236	b236	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ae PROC
>d23c	b23c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $af REPEAT
>d244	b244	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b0 WHILE
>d24b	b24b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b1 ENDIF
>d252	b252	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b2 ENDPROC
>d25a	b25a	43
>d25b	b25b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b3 NEXT
>d261	b261	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b4 THEN
>d267	b267	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b5 UNTIL
>d26e	b26e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b6 WEND
>d274	b274	02 95 41 54				.text	2,$95,"AT"             ; $b7 AT
>d278	b278	02 9b 42 59				.text	2,$9b,"BY"             ; $b8 BY
>d27c	b27c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b9 CALL
>d282	b282	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ba CIRCLE
>d28a	b28a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bb CLEAR
>d291	b291	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bc COLOR
>d298	b298	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bd COLOUR
>d2a0	b2a0	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $be DATA
>d2a6	b2a6	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bf DIM
>d2ab	b2ab	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c0 DOWNTO
>d2b3	b2b3	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c1 ELSE
>d2b9	b2b9	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c2 FROM
>d2bf	b2bf	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c3 GFX
>d2c4	b2c4	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c4 HERE
>d2ca	b2ca	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c5 IMAGE
>d2d1	b2d1	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c6 LET
>d2d6	b2d6	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c7 LINE
>d2dc	b2dc	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c8 LOCAL
>d2e3	b2e3	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c9 MEMCOPY
>d2eb	b2eb	59
>d2ec	b2ec	03 db 4f 46 46				.text	3,$db,"OFF"            ; $ca OFF
>d2f1	b2f1	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cb ON
>d2f5	b2f5	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cc OUTLINE
>d2fd	b2fd	45
>d2fe	b2fe	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cd PALETTE
>d306	b306	45
>d307	b307	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ce PLOT
>d30d	b30d	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cf POKE
>d313	b313	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d0 POKED
>d31a	b31a	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d1 POKEL
>d321	b321	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d2 POKEW
>d328	b328	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d3 READ
>d32e	b32e	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d4 RECT
>d334	b334	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d5 REM
>d339	b339	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d6 SOLID
>d340	b340	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d7 SOUND
>d347	b347	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d8 SPRITE
>d34f	b34f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d9 TEXT
>d355	b355	02 a3 54 4f				.text	2,$a3,"TO"             ; $da TO
>d359	b359	ff					.text	$FF
.d35a	b35a					KeywordSet1:
>d35a	b35a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d35c	b35c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d35e	b35e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d360	b360	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d368	b368	4c 45
>d36a	b36a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d372	b372	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d37a	b37a	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d381	b381	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d388	b388	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d38d	b38d	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d395	b395	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d39a	b39a	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d3a1	b3a1	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d3a6	b3a6	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d3ae	b3ae	45
>d3af	b3af	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d3b3	b3b3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d3ba	b3ba	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d3c0	b3c0	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d3c7	b3c7	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d3ce	b3ce	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d3d4	b3d4	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d3da	b3da	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d3df	b3df	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d3e5	b3e5	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3ec	b3ec	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3f4	b3f4	45
>d3f5	b3f5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3fd	b3fd	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d402	b402	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d408	b408	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d410	b410	45
>d411	b411	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d419	b419	45
>d41a	b41a	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d421	b421	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d429	b429	53
>d42a	b42a	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d430	b430	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d438	b438	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d43d	b43d	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d444	b444	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d449	b449	ff					.text	$FF
.d44a	b44a					KeywordSet2:
>d44a	b44a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d44c	b44c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d44e	b44e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d450	b450	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d455	b455	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d45a	b45a	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d45f	b45f	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d464	b464	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d469	b469	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d46e	b46e	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d473	b473	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d478	b478	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d47d	b47d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d482	b482	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d487	b487	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d48c	b48c	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d491	b491	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d496	b496	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d49b	b49b	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d4a0	b4a0	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d4a5	b4a5	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d4aa	b4aa	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4af	b4af	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4b4	b4b4	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4b9	b4b9	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4be	b4be	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4c3	b4c3	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4c8	b4c8	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4cd	b4cd	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4d2	b4d2	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4d7	b4d7	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4dc	b4dc	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4e1	b4e1	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4e6	b4e6	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4eb	b4eb	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4f0	b4f0	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4f5	b4f5	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4fa	b4fa	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4ff	b4ff	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d504	b504	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d509	b509	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d50e	b50e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d513	b513	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d518	b518	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d51d	b51d	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d522	b522	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d527	b527	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d52c	b52c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d531	b531	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d536	b536	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d53b	b53b	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d540	b540	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d545	b545	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d54a	b54a	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d54f	b54f	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d554	b554	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d559	b559	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d55e	b55e	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d563	b563	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d568	b568	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d56d	b56d	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d572	b572	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d577	b577	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d57c	b57c	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d581	b581	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d586	b586	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d58b	b58b	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d590	b590	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d595	b595	ff					.text	$FF
.d596	b596					Export_TKListConvertLine:
.d596	b596	48		pha				pha 								; save indent on the stack
.d597	b597	9c 19 04	stz $0419			stz 	tbOffset
.d59a	b59a	9c 29 04	stz $0429			stz 	tokenBuffer
.d59d	b59d	9c 25 04	stz $0425			stz 	currentListColour
.d5a0	b5a0	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d5a2	b5a2	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d5a5	b5a5	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d5a7	b5a7	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a9	b5a9	aa		tax				tax
.d5aa	b5aa	88		dey				dey
.d5ab	b5ab	b1 30		lda ($30),y			lda 	(codePtr),y
.d5ad	b5ad	20 90 b7	jsr $b790			jsr 	LCLWriteNumberXA
.d5b0	b5b0	68		pla				pla 								; adjustment to indent
.d5b1	b5b1	48		pha				pha 								; save on stack
.d5b2	b5b2	10 0c		bpl $b5c0			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5b4	b5b4	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5b5	b5b5	6d 22 04	adc $0422			adc 	listIndent
.d5b8	b5b8	8d 22 04	sta $0422			sta 	listIndent
.d5bb	b5bb	10 03		bpl $b5c0			bpl 	_LCNoAdjust
.d5bd	b5bd	9c 22 04	stz $0422			stz 	listIndent
.d5c0	b5c0					_LCNoAdjust:
.d5c0	b5c0	18		clc				clc		 							; work out actual indent.
.d5c1	b5c1	ad 22 04	lda $0422			lda 	listIndent
.d5c4	b5c4	0a		asl a				asl 	a
.d5c5	b5c5	69 07		adc #$07			adc 	#7
.d5c7	b5c7	85 36		sta $36				sta 	zTemp0
.d5c9	b5c9					_LCPadOut:
.d5c9	b5c9	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5cb	b5cb	20 28 b7	jsr $b728			jsr 	LCLWrite
.d5ce	b5ce	ad 19 04	lda $0419			lda 	tbOffset
.d5d1	b5d1	c5 36		cmp $36				cmp 	zTemp0
.d5d3	b5d3	d0 f4		bne $b5c9			bne 	_LCPadOut
.d5d5	b5d5	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5d7	b5d7					_LCMainLoop:
.d5d7	b5d7	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5d9	b5d9	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d5dc	b5dc	b1 30		lda ($30),y			lda 	(codePtr),y
.d5de	b5de	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5e0	b5e0	f0 17		beq $b5f9			beq 	_LCExit
.d5e2	b5e2	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5e4	b5e4	90 1e		bcc $b604			bcc 	_LCDoubles
.d5e6	b5e6	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5e8	b5e8	90 2a		bcc $b614			bcc 	_LCShiftPunc
.d5ea	b5ea	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5ec	b5ec	90 35		bcc $b623			bcc 	_LCPunctuation
.d5ee	b5ee	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5f0	b5f0	90 51		bcc $b643			bcc 	_LCIdentifiers
.d5f2	b5f2	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5f4	b5f4	90 73		bcc $b669			bcc 	_LCTokens
.d5f6	b5f6	4c c9 b6	jmp $b6c9			jmp 	_LCData 					; 254-5 are data objects
.d5f9	b5f9					_LCExit:
.d5f9	b5f9	68		pla				pla 								; get old indent adjust
.d5fa	b5fa	30 07		bmi $b603			bmi 	_LCExit2
.d5fc	b5fc	18		clc				clc 								; add to indent if +ve
.d5fd	b5fd	6d 22 04	adc $0422			adc 	listIndent
.d600	b600	8d 22 04	sta $0422			sta 	listIndent
.d603	b603					_LCExit2:
.d603	b603	60		rts				rts
.d604	b604					_LCDoubles:
.d604	b604	48		pha				pha
.d605	b605	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d606	b606	29 02		and #$02			and 	#2
.d608	b608	09 3c		ora #$3c			ora 	#60 						; make < >
.d60a	b60a	20 28 b7	jsr $b728			jsr 	LCLWrite
.d60d	b60d	68		pla				pla 								; restore, do lower bit
.d60e	b60e	29 03		and #$03			and 	#3
.d610	b610	09 3c		ora #$3c			ora 	#60
.d612	b612	80 0f		bra $b623			bra		_LCPunctuation 				; print, increment, loop
.d614	b614					_LCShiftPunc:
.d614	b614	aa		tax				tax 								; save in X
.d615	b615	29 07		and #$07			and 	#7 							; lower 3 bits
.d617	b617	f0 02		beq $b61b			beq 	_LCNoAdd
.d619	b619	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d61b	b61b					_LCNoAdd:
.d61b	b61b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d61d	b61d	90 02		bcc $b621			bcc 	_LCNoAdd2
.d61f	b61f	09 20		ora #$20			ora 	#32 						; adds $20
.d621	b621					_LCNoAdd2:
.d621	b621	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d623	b623					_LCPunctuation:
.d623	b623	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d625	b625	d0 03		bne $b62a			bne 	_LCPContinue
.d627	b627	20 3e b7	jsr $b73e			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d62a	b62a					_LCPContinue:
.d62a	b62a	c9 2e		cmp #$2e			cmp 	#'.'
.d62c	b62c	f0 08		beq $b636			beq 	_LCPIsConstant
.d62e	b62e	c9 30		cmp #$30			cmp 	#'0'
.d630	b630	90 0b		bcc $b63d			bcc 	_LCPNotConstant
.d632	b632	c9 3a		cmp #$3a			cmp 	#'9'+1
.d634	b634	b0 07		bcs $b63d			bcs 	_LCPNotConstant
.d636	b636					_LCPIsConstant:
.d636	b636	48		pha				pha
.d637	b637	a9 87		lda #$87			lda 	#CLIConstant+$80
.d639	b639	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d63c	b63c	68		pla				pla
.d63d	b63d					_LCPNotConstant:
.d63d	b63d	c8		iny				iny 								; consume character
.d63e	b63e	20 28 b7	jsr $b728			jsr 	LCLWrite 					; write it out.
.d641	b641	80 94		bra $b5d7			bra 	_LCMainLoop 				; go round again.
.d643	b643					_LCIdentifiers:
.d643	b643	18		clc				clc 								; convert to physical address
.d644	b644	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d646	b646	85 37		sta $37				sta 	zTemp0+1
.d648	b648	c8		iny				iny
.d649	b649	b1 30		lda ($30),y			lda 	(codePtr),y
.d64b	b64b	85 36		sta $36				sta 	zTemp0
.d64d	b64d	c8		iny				iny
.d64e	b64e	5a		phy				phy 								; save position
.d64f	b64f	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d651	b651	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d654	b654	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d656	b656					_LCOutIdentifier:
.d656	b656	c8		iny				iny
.d657	b657	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d659	b659	29 7f		and #$7f			and 	#$7F
.d65b	b65b	20 7a b7	jsr $b77a			jsr 	LCLLowerCase
.d65e	b65e	20 28 b7	jsr $b728			jsr 	LCLWrite
.d661	b661	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d663	b663	10 f1		bpl $b656			bpl 	_LCOutIdentifier
.d665	b665	7a		ply				ply 								; restore position
.d666	b666	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop
.d669	b669					_LCTokens:
.d669	b669	aa		tax				tax 								; token in X
.d66a	b66a	a9 4a		lda #$4a			lda 	#((KeywordSet2) & $FF)
.d66c	b66c	85 36		sta $36				sta 	0+zTemp0
.d66e	b66e	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d670	b670	85 37		sta $37				sta 	1+zTemp0
.d672	b672	e0 82		cpx #$82			cpx 	#$82
.d674	b674	f0 16		beq $b68c			beq 	_LCUseShift
.d676	b676	a9 5a		lda #$5a			lda 	#((KeywordSet1) & $FF)
.d678	b678	85 36		sta $36				sta 	0+zTemp0
.d67a	b67a	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d67c	b67c	85 37		sta $37				sta 	1+zTemp0
.d67e	b67e	e0 81		cpx #$81			cpx 	#$81
.d680	b680	f0 0a		beq $b68c			beq 	_LCUseShift
.d682	b682	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d684	b684	85 36		sta $36				sta 	0+zTemp0
.d686	b686	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d688	b688	85 37		sta $37				sta 	1+zTemp0
.d68a	b68a	80 01		bra $b68d			bra 	_LCNoShift
.d68c	b68c					_LCUseShift:
.d68c	b68c	c8		iny				iny
.d68d	b68d					_LCNoShift:
.d68d	b68d	20 52 b7	jsr $b752			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d690	b690	b1 30		lda ($30),y			lda 	(codePtr),y
.d692	b692	aa		tax				tax 								; into X
.d693	b693					_LCFindText:
.d693	b693	ca		dex				dex
.d694	b694	10 0e		bpl $b6a4			bpl 	_LCFoundText 				; found text.
.d696	b696	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d698	b698	1a		inc a				inc 	a 							; one extra for size
.d699	b699	38		sec				sec 								; one extra for checksum
.d69a	b69a	65 36		adc $36				adc 	zTemp0 						; go to next token
.d69c	b69c	85 36		sta $36				sta 	zTemp0
.d69e	b69e	90 f3		bcc $b693			bcc 	_LCFindText
.d6a0	b6a0	e6 37		inc $37				inc 	zTemp0+1
.d6a2	b6a2	80 ef		bra $b693			bra 	_LCFindText
.d6a4	b6a4					_LCFoundText:
.d6a4	b6a4	5a		phy				phy 								; save List position
.d6a5	b6a5	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d6a7	b6a7	aa		tax				tax
.d6a8	b6a8	a9 86		lda #$86			lda 	#CLIToken+$80
.d6aa	b6aa	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6ad	b6ad	a0 02		ldy #$02			ldy 	#2
.d6af	b6af					_LCCopyToken:
.d6af	b6af	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6b1	b6b1	20 7a b7	jsr $b77a			jsr 	LCLLowerCase
.d6b4	b6b4	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6b7	b6b7	c8		iny				iny
.d6b8	b6b8	ca		dex				dex
.d6b9	b6b9	d0 f4		bne $b6af			bne 	_LCCopyToken
.d6bb	b6bb	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6bd	b6bd	f0 05		beq $b6c4			beq 	_LCNoSpace
.d6bf	b6bf	a9 20		lda #$20			lda 	#' '
.d6c1	b6c1	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6c4	b6c4					_LCNoSpace:
.d6c4	b6c4	7a		ply				ply 								; restore position.
.d6c5	b6c5	c8		iny				iny 								; consume token
.d6c6	b6c6	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop 				; and go around again.
.d6c9	b6c9					_LCData:
.d6c9	b6c9	48		pha				pha 								; save type $FE/$FF
.d6ca	b6ca	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6cc	b6cc	c9 fe		cmp #$fe			cmp 	#$FE
.d6ce	b6ce	f0 22		beq $b6f2			beq 	_LCHaveOpener
.d6d0	b6d0	a2 22		ldx #$22			ldx 	#'"'
.d6d2	b6d2	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6d4	b6d4	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6d7	b6d7	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6d9	b6d9	d0 17		bne $b6f2			bne 	_LCHaveOpener
.d6db	b6db	88		dey				dey 								; what precedes it ?
.d6dc	b6dc	b1 30		lda ($30),y			lda 	(codePtr),y
.d6de	b6de	c8		iny				iny
.d6df	b6df	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6e1	b6e1	d0 0f		bne $b6f2			bne 	_LCHaveOpener
.d6e3	b6e3	a9 09		lda #$09			lda 	#9 							; tab
.d6e5	b6e5	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6e8	b6e8	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6ea	b6ea	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6ed	b6ed	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6ef	b6ef	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6f2	b6f2					_LCHaveOpener:
.d6f2	b6f2	8a		txa				txa 								; output prefix (# or ")
.d6f3	b6f3	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6f6	b6f6	c8		iny				iny 								; get count
.d6f7	b6f7	b1 30		lda ($30),y			lda 	(codePtr),y
.d6f9	b6f9	aa		tax				tax
.d6fa	b6fa	c8		iny				iny 								; point at first character
.d6fb	b6fb					_LCOutData:
.d6fb	b6fb	b1 30		lda ($30),y			lda 	(codePtr),y
.d6fd	b6fd	c9 00		cmp #$00			cmp 	#0
.d6ff	b6ff	f0 03		beq $b704			beq 	_LCNoPrint
.d701	b701	20 28 b7	jsr $b728			jsr 	LCLWrite
.d704	b704					_LCNoPrint:
.d704	b704	c8		iny				iny
.d705	b705	ca		dex				dex
.d706	b706	d0 f3		bne $b6fb			bne 	_LCOutData
.d708	b708	68		pla				pla 								; closing " required ?
.d709	b709	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d70b	b70b	d0 0f		bne $b71c			bne 	_LCNoQuote
.d70d	b70d	a9 22		lda #$22			lda 	#'"'
.d70f	b70f	20 28 b7	jsr $b728			jsr 	LCLWrite
.d712	b712	ad 86 07	lda $0786			lda 	EXTTextColour
.d715	b715	29 0f		and #$0f			and 	#$0F
.d717	b717	09 90		ora #$90			ora 	#$90
.d719	b719	20 28 b7	jsr $b728			jsr 	LCLWrite
.d71c	b71c					_LCNoQuote:
.d71c	b71c	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop
.d71f	b71f					LCLWriteColour:
.d71f	b71f	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d722	b722	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d725	b725	d0 01		bne $b728			bne 	LCLWrite 					; if different, output it
.d727	b727	60		rts				rts
.d728	b728					LCLWrite:
.d728	b728	da		phx				phx
.d729	b729	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d72c	b72c	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d72f	b72f	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d732	b732	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d735	b735	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d737	b737	30 03		bmi $b73c			bmi 	_LCLNoColour
.d739	b739	8d 23 04	sta $0423			sta 	lcLastCharacter
.d73c	b73c					_LCLNoColour:
.d73c	b73c	fa		plx				plx
.d73d	b73d	60		rts				rts
.d73e	b73e					LCLDeleteLastSpace:
.d73e	b73e	48		pha				pha
.d73f	b73f	da		phx				phx
.d740	b740	ae 19 04	ldx $0419			ldx 	tbOffset
.d743	b743	f0 0a		beq $b74f			beq 	_LCDLSExit
.d745	b745	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d748	b748	c9 20		cmp #$20			cmp 	#' '
.d74a	b74a	d0 03		bne $b74f			bne 	_LCDLSExit
.d74c	b74c	ce 19 04	dec $0419			dec 	tbOffset
.d74f	b74f					_LCDLSExit:
.d74f	b74f	fa		plx				plx
.d750	b750	68		pla				pla
.d751	b751	60		rts				rts
.d752	b752					LCLCheckSpaceRequired:
.d752	b752	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d755	b755	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d757	b757	f0 1b		beq $b774			beq 	_LCCSRSpace
.d759	b759	c9 29		cmp #$29			cmp 	#')'
.d75b	b75b	f0 17		beq $b774			beq 	_LCCSRSpace
.d75d	b75d	c9 23		cmp #$23			cmp 	#'#'
.d75f	b75f	f0 13		beq $b774			beq 	_LCCSRSpace
.d761	b761	20 7a b7	jsr $b77a			jsr 	LCLLowerCase 				; saves a little effort
.d764	b764	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d766	b766	90 11		bcc $b779			bcc 	_LCCSRExit
.d768	b768	c9 3a		cmp #$3a			cmp 	#"9"+1
.d76a	b76a	90 08		bcc $b774			bcc 	_LCCSRSpace
.d76c	b76c	c9 61		cmp #$61			cmp 	#"a"
.d76e	b76e	90 09		bcc $b779			bcc 	_LCCSRExit
.d770	b770	c9 7b		cmp #$7b			cmp 	#"z"+1
.d772	b772	b0 05		bcs $b779			bcs 	_LCCSRExit
.d774	b774					_LCCSRSpace:
.d774	b774	a9 20		lda #$20			lda 	#' '
.d776	b776	20 28 b7	jsr $b728			jsr 	LCLWrite
.d779	b779					_LCCSRExit:
.d779	b779	60		rts				rts
.d77a	b77a					LCLLowerCase:
.d77a	b77a	c9 41		cmp #$41			cmp 	#"A"
.d77c	b77c	90 06		bcc $b784			bcc 	_LCLLCOut
.d77e	b77e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d780	b780	b0 02		bcs $b784			bcs 	_LCLLCOut
.d782	b782	69 20		adc #$20			adc 	#$20
.d784	b784					_LCLLCOut:
.d784	b784	60		rts				rts
.d785	b785					LCLUpperCase:
.d785	b785	c9 61		cmp #$61			cmp 	#"a"
.d787	b787	90 06		bcc $b78f			bcc 	_LCLUCOut
.d789	b789	c9 7b		cmp #$7b			cmp 	#"z"+1
.d78b	b78b	b0 02		bcs $b78f			bcs 	_LCLUCOut
.d78d	b78d	e9 1f		sbc #$1f			sbc 	#$1F
.d78f	b78f					_LCLUCOut:
.d78f	b78f	60		rts				rts
.d790	b790					LCLWriteNumberXA:
.d790	b790	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d792	b792					_LCLWNLoop1:
.d792	b792	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d794	b794					_LCLWNLoop2:
.d794	b794	48		pha				pha 								; save initial LSB
.d795	b795	38		sec				sec
.d796	b796	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d798	b798	f9 c9 b7	sbc $b7c9,y			sbc 	_LCLWNTable,y
.d79b	b79b	48		pha				pha
.d79c	b79c	8a		txa				txa
.d79d	b79d	f9 ca b7	sbc $b7ca,y			sbc 	_LCLWNTable+1,y
.d7a0	b7a0	90 07		bcc $b7a9			bcc 	_LCLWNUnderflow
.d7a2	b7a2	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d7a4	b7a4	aa		tax				tax 								; update X
.d7a5	b7a5	68		pla				pla 								; restore A
.d7a6	b7a6	7a		ply				ply 								; throw original
.d7a7	b7a7	80 eb		bra $b794			bra 	_LCLWNLoop2 				; try again.
.d7a9	b7a9					_LCLWNUnderflow:
.d7a9	b7a9	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d7ab	b7ab	d0 06		bne $b7b3			bne 	_LCLWNOut
.d7ad	b7ad	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7b0	b7b0	3a		dec a				dec 	a
.d7b1	b7b1	f0 04		beq $b7b7			beq 	_LCLWNNext
.d7b3	b7b3					_LCLWNOut:
.d7b3	b7b3	98		tya				tya
.d7b4	b7b4	20 c3 b7	jsr $b7c3			jsr 	_LCLWNOutDigit
.d7b7	b7b7					_LCLWNNext:
.d7b7	b7b7	7a		ply				ply 							 	; restore original value.
.d7b8	b7b8	68		pla				pla
.d7b9	b7b9	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7bb	b7bb	c8		iny				iny
.d7bc	b7bc	c8		iny				iny
.d7bd	b7bd	84 37		sty $37				sty 	zTemp0+1
.d7bf	b7bf	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7c1	b7c1	d0 cf		bne $b792			bne 	_LCLWNLoop1
.d7c3	b7c3					_LCLWNOutDigit:
.d7c3	b7c3	09 30		ora #$30			ora 	#'0'
.d7c5	b7c5	20 28 b7	jsr $b728			jsr 	LCLWrite
.d7c8	b7c8	60		rts				rts
.d7c9	b7c9					_LCLWNTable:
>d7c9	b7c9	10 27						.word 	10000
>d7cb	b7cb	e8 03						.word 	1000
>d7cd	b7cd	64 00						.word 	100
>d7cf	b7cf	0a 00						.word 	10
.d7d1	b7d1					TOKSearchTable:
.d7d1	b7d1	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7d3	b7d3	85 36		sta $36				sta 	zTemp0
.d7d5	b7d5	a0 00		ldy #$00			ldy 	#0
.d7d7	b7d7	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7d9	b7d9	85 38		sta $38				sta 	zTemp1
.d7db	b7db					_TSTLoop:
.d7db	b7db	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7dd	b7dd	30 49		bmi $b828			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7df	b7df	f0 2e		beq $b80f			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7e1	b7e1	c8		iny				iny 								; get the hash
.d7e2	b7e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7e4	b7e4	88		dey				dey
.d7e5	b7e5	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7e8	b7e8	d0 25		bne $b80f			bne 	_TSTNext
.d7ea	b7ea	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7ed	b7ed	38		sec				sec
.d7ee	b7ee	ed 00 04	sbc $0400			sbc 	identStart
.d7f1	b7f1	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7f3	b7f3	d0 1a		bne $b80f			bne 	_TSTNext
.d7f5	b7f5	5a		phy				phy 								; save Y , we might fail to match.
.d7f6	b7f6	c8		iny				iny 								; point to text
.d7f7	b7f7	c8		iny				iny
.d7f8	b7f8	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7fb	b7fb					_TSTCompareName:
.d7fb	b7fb	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7fe	b7fe	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d800	b800	d0 0c		bne $b80e			bne 	_TSTNextPullY 				; fail, pullY and do next
.d802	b802	e8		inx				inx
.d803	b803	c8		iny				iny
.d804	b804	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d807	b807	d0 f2		bne $b7fb			bne 	_TSTCompareName
.d809	b809	7a		ply				ply 								; throw Y
.d80a	b80a	a5 38		lda $38				lda 	zTemp1 						; get token #
.d80c	b80c	38		sec				sec 								; return with CS = passed.
.d80d	b80d	60		rts				rts
.d80e	b80e					_TSTNextPullY:
.d80e	b80e	7a		ply				ply 								; restore current, fall through.
.d80f	b80f					_TSTNext:
.d80f	b80f	e6 38		inc $38				inc 	zTemp1 						; token counter
.d811	b811	98		tya				tya
.d812	b812	18		clc				clc
.d813	b813	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d815	b815	1a		inc a				inc 	a 							; +1
.d816	b816	1a		inc a				inc 	a 							; +2
.d817	b817	a8		tay				tay
.d818	b818	10 c1		bpl $b7db			bpl 	_TSTLoop 					; if Y < $80 loop back
.d81a	b81a	98		tya				tya 								; add Y to zTemp0 and reset Y
.d81b	b81b	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d81d	b81d	18		clc				clc  								; but have tables > 255 bytes
.d81e	b81e	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d820	b820	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d822	b822	90 b7		bcc $b7db			bcc 	_TSTLoop
.d824	b824	e6 37		inc $37				inc 	zTemp0+1
.d826	b826	80 b3		bra $b7db			bra 	_TSTLoop
.d828	b828					_TSTFail:
.d828	b828	18		clc				clc
.d829	b829	60		rts				rts
.d82a	b82a					Export_TKTokeniseLine:
.d82a	b82a	20 f7 b9	jsr $b9f7			jsr 	LCLFixLineBufferCase 		; fix line case
.d82d	b82d	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d82f	b82f	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d832	b832	9c 27 04	stz $0427			stz 	tokenLineNumber
.d835	b835	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d838	b838	a2 ff		ldx #$ff			ldx 	#$FF
.d83a	b83a					_TKFindFirst:
.d83a	b83a	e8		inx				inx
.d83b	b83b	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d83e	b83e	f0 62		beq $b8a2			beq 	_TKExit
.d840	b840	c9 20		cmp #$20			cmp 	#' '
.d842	b842	90 f6		bcc $b83a			bcc 	_TKFindFirst
.d844	b844	c9 30		cmp #$30			cmp 	#'0'
.d846	b846	90 07		bcc $b84f			bcc 	_TKNoLineNumber
.d848	b848	c9 3a		cmp #$3a			cmp 	#'9'+1
.d84a	b84a	b0 03		bcs $b84f			bcs 	_TKNoLineNumber
.d84c	b84c	20 21 ba	jsr $ba21			jsr 	TOKExtractLineNumber
.d84f	b84f					_TKNoLineNumber:
.d84f	b84f					_TKTokeniseLoop:
.d84f	b84f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d852	b852	f0 4e		beq $b8a2			beq 	_TKExit
.d854	b854	e8		inx				inx
.d855	b855	c9 20		cmp #$20			cmp 	#' '
.d857	b857	f0 f6		beq $b84f			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d859	b859	ca		dex				dex 								; undo last get, A contains character, X is position.
.d85a	b85a	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d85c	b85c	f0 68		beq $b8c6			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d85e	b85e	c9 41		cmp #$41			cmp 	#'A'
.d860	b860	90 04		bcc $b866			bcc 	_TKTokenisePunctuation
.d862	b862	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d864	b864	90 60		bcc $b8c6			bcc 	_TKTokeniseIdentifier
.d866	b866					_TKTokenisePunctuation:
.d866	b866	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d868	b868	f0 2e		beq $b898			beq 	_TKString
.d86a	b86a	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d86c	b86c	f0 2f		beq $b89d			beq 	_TKHexConstant
.d86e	b86e	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d870	b870	f0 36		beq $b8a8			beq 	_TKCheckDouble
.d872	b872	c9 3e		cmp #$3e			cmp 	#'>'
.d874	b874	f0 32		beq $b8a8			beq 	_TKCheckDouble
.d876	b876					_TKStandardPunctuation:
.d876	b876	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d879	b879	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d87b	b87b	90 0e		bcc $b88b			bcc 	_TKNoShift
.d87d	b87d	48		pha				pha 								; save. we are about to convert this punctuation token from
.d87e	b87e	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d880	b880	85 36		sta $36				sta 	zTemp0
.d882	b882	68		pla				pla
.d883	b883	29 20		and #$20			and 	#32 						; bit 5
.d885	b885	4a		lsr a				lsr 	a 							; shift into bit 3
.d886	b886	4a		lsr a				lsr 	a
.d887	b887	05 36		ora $36				ora 	zTemp0
.d889	b889	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d88b	b88b					_TKNoShift:
.d88b	b88b	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; write the punctuation character
.d88e	b88e	e8		inx				inx 								; consume the character
.d88f	b88f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d891	b891	d0 bc		bne $b84f			bne 	_TKTokeniseLoop 			; and loop round again.
.d893	b893	20 59 b9	jsr $b959			jsr 	TOKCheckComment 			; comment checl
.d896	b896	80 b7		bra $b84f			bra 	_TKTokeniseLoop
.d898	b898					_TKString:
.d898	b898	20 86 b9	jsr $b986			jsr 	TOKTokenString
.d89b	b89b	80 b2		bra $b84f			bra 	_TKTokeniseLoop
.d89d	b89d					_TKHexConstant:
.d89d	b89d	20 c1 b9	jsr $b9c1			jsr 	TOKHexConstant
.d8a0	b8a0	80 ad		bra $b84f			bra 	_TKTokeniseLoop
.d8a2	b8a2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d8a4	b8a4	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d8a7	b8a7	60		rts				rts
.d8a8	b8a8					_TKCheckDouble:
.d8a8	b8a8	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d8ab	b8ab	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8ad	b8ad	90 c7		bcc $b876			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8af	b8af	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8b1	b8b1	b0 c3		bcs $b876			bcs 	_TKStandardPunctuation
.d8b3	b8b3	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8b6	b8b6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8b8	b8b8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8b9	b8b9	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8bc	b8bc	38		sec				sec
.d8bd	b8bd	e9 3c		sbc #$3c			sbc 	#'<'
.d8bf	b8bf	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8c2	b8c2	e8		inx				inx 								; consume both
.d8c3	b8c3	e8		inx				inx
.d8c4	b8c4	80 89		bra $b84f			bra 	_TKTokeniseLoop
.d8c6	b8c6					_TKTokeniseIdentifier:
.d8c6	b8c6	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8c9	b8c9	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8cc	b8cc					_TKCheckLoop:
.d8cc	b8cc	e8		inx				inx 								; look at next, we know first is identifier already.
.d8cd	b8cd	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8d0	b8d0	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8d2	b8d2	f0 f8		beq $b8cc			beq 	_TKCheckLoop
.d8d4	b8d4	c9 30		cmp #$30			cmp	 	#"0"
.d8d6	b8d6	90 0c		bcc $b8e4			bcc 	_TKEndIdentifier
.d8d8	b8d8	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8da	b8da	90 f0		bcc $b8cc			bcc 	_TKCheckLoop
.d8dc	b8dc	c9 41		cmp #$41			cmp	 	#"A"
.d8de	b8de	90 04		bcc $b8e4			bcc 	_TKEndIdentifier
.d8e0	b8e0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8e2	b8e2	90 e8		bcc $b8cc			bcc 	_TKCheckLoop
.d8e4	b8e4					_TKEndIdentifier:
.d8e4	b8e4	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8e7	b8e7	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8e9	b8e9	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8eb	b8eb	f0 06		beq $b8f3			beq 	_TKHasTypeCharacter
.d8ed	b8ed	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8ef	b8ef	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8f1	b8f1	d0 07		bne $b8fa			bne 	_TKNoTypeCharacter
.d8f3	b8f3					_TKHasTypeCharacter:
.d8f3	b8f3	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8f6	b8f6	e8		inx				inx 								; consume the type character
.d8f7	b8f7	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8fa	b8fa					_TKNoTypeCharacter:
.d8fa	b8fa	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8fc	b8fc	d0 09		bne $b907			bne 	_TKNoArray
.d8fe	b8fe	e8		inx				inx 								; skip the (
.d8ff	b8ff	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d902	b902	09 04		ora #$04			ora 	#$04
.d904	b904	8d 04 04	sta $0404			sta 	identTypeByte
.d907	b907					_TKNoArray:
.d907	b907	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d90a	b90a	20 e2 b9	jsr $b9e2			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d90d	b90d	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d90f	b90f	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d911	b911	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d914	b914	a2 00		ldx #$00			ldx 	#0
.d916	b916	b0 1f		bcs $b937			bcs 	_TKFoundToken
.d918	b918	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d91a	b91a	a9 5a		lda #$5a			lda 	#(KeywordSet1) & $FF
.d91c	b91c	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d91f	b91f	a2 81		ldx #$81			ldx 	#$81
.d921	b921	b0 14		bcs $b937			bcs 	_TKFoundToken
.d923	b923	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d925	b925	a9 4a		lda #$4a			lda 	#(KeywordSet2) & $FF
.d927	b927	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d92a	b92a	a2 82		ldx #$82			ldx 	#$82
.d92c	b92c	b0 09		bcs $b937			bcs 	_TKFoundToken
.d92e	b92e	20 72 ba	jsr $ba72			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d931	b931	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d934	b934	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop 			; and go round again.
.d937	b937					_TKFoundToken:
.d937	b937	48		pha				pha 								; save token
.d938	b938	8a		txa				txa 								; shift in X, is there one ?
.d939	b939	f0 03		beq $b93e			beq 	_TKNoTShift
.d93b	b93b	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; if so, write it out
.d93e	b93e					_TKNoTShift:
.d93e	b93e	68		pla				pla 								; restore and write token
.d93f	b93f	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d942	b942	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d944	b944	d0 0d		bne $b953			bne 	_TKNotRem 			 		; not shifted ?
.d946	b946	c9 d5		cmp #$d5			cmp 	#KWD_REM
.d948	b948	d0 09		bne $b953			bne 	_TKNotRem
.d94a	b94a	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d94d	b94d	20 59 b9	jsr $b959			jsr 	TOKCheckComment
.d950	b950	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop
.d953	b953					_TKNotRem:
.d953	b953	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d956	b956	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop 			; and go round again.
.d959	b959					TOKCheckComment:
.d959	b959	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d95c	b95c	e8		inx				inx
.d95d	b95d	c9 20		cmp #$20			cmp 	#' '
.d95f	b95f	f0 f8		beq $b959			beq 	TOKCheckComment
.d961	b961	ca		dex				dex 								; first non space character
.d962	b962	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d964	b964	f0 1f		beq $b985			beq 	_TOKCCExit 					; then we are okay
.d966	b966	c9 00		cmp #$00			cmp 	#0 							; EOL
.d968	b968	f0 1b		beq $b985			beq 	_TOKCCExit 					; then we are okay
.d96a	b96a	da		phx				phx
.d96b	b96b					_TOKCCLowerCase:
.d96b	b96b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d96e	b96e	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d970	b970	90 09		bcc $b97b			bcc 	_TOKKCNotUC
.d972	b972	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d974	b974	b0 05		bcs $b97b			bcs 	_TOKKCNotUC
.d976	b976	49 20		eor #$20			eor 	#$20
.d978	b978	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d97b	b97b					_TOKKCNotUC:
.d97b	b97b	e8		inx				inx
.d97c	b97c	c9 00		cmp #$00			cmp 	#0
.d97e	b97e	d0 eb		bne $b96b			bne 	_TOKCCLowerCase
.d980	b980	fa		plx				plx
.d981	b981	ca		dex				dex 								; tokenise string expects initial skip.
.d982	b982	20 86 b9	jsr $b986			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d985	b985					_TOKCCExit:
.d985	b985	60		rts				rts
.d986	b986					TOKTokenString:
.d986	b986	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d988	b988	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d98b	b98b	e8		inx				inx									; start of quoted string.
.d98c	b98c	da		phx				phx 								; push start of string on top
.d98d	b98d	ca		dex				dex 								; because we pre-increment
.d98e	b98e					_TSFindEnd:
.d98e	b98e	e8		inx				inx
.d98f	b98f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d992	b992	f0 04		beq $b998			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d994	b994	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d996	b996	d0 f6		bne $b98e			bne 	_TSFindEnd
.d998	b998					_TSEndOfString:
.d998	b998	7a		ply				ply  								; so now Y is first character, X is character after end.
.d999	b999	48		pha				pha 								; save terminating character
.d99a	b99a	20 a2 b9	jsr $b9a2			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d99d	b99d	68		pla				pla 								; terminating character
.d99e	b99e	f0 01		beq $b9a1			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d9a0	b9a0	e8		inx				inx
.d9a1	b9a1					_TSNotQuote:
.d9a1	b9a1	60		rts				rts
.d9a2	b9a2					TOKWriteBlockXY:
.d9a2	b9a2	86 36		stx $36				stx 	zTemp0 						; save end character
.d9a4	b9a4	98		tya				tya 								; use 2's complement to work out the byte size
.d9a5	b9a5	49 ff		eor #$ff			eor 	#$FF
.d9a7	b9a7	38		sec				sec
.d9a8	b9a8	65 36		adc $36				adc 	zTemp0
.d9aa	b9aa	1a		inc a				inc 	a 							; one extra for NULL
.d9ab	b9ab	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9ae	b9ae					_TOBlockLoop:
.d9ae	b9ae	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9b0	b9b0	f0 09		beq $b9bb			beq 	_TOBlockExit
.d9b2	b9b2	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9b5	b9b5	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9b8	b9b8	c8		iny				iny
.d9b9	b9b9	80 f3		bra $b9ae			bra 	_TOBlockLoop
.d9bb	b9bb					_TOBlockExit:
.d9bb	b9bb	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9bd	b9bd	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9c0	b9c0	60		rts				rts
.d9c1	b9c1					TOKHexConstant:
.d9c1	b9c1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9c3	b9c3	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9c6	b9c6	e8		inx				inx									; start of quoted string.
.d9c7	b9c7	da		phx				phx 								; push start of constant on top
.d9c8	b9c8	ca		dex				dex
.d9c9	b9c9					_THFindLoop:
.d9c9	b9c9	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9ca	b9ca	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9cd	b9cd	c9 30		cmp #$30			cmp 	#"0"
.d9cf	b9cf	90 0c		bcc $b9dd			bcc 	_THFoundEnd
.d9d1	b9d1	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9d3	b9d3	90 f4		bcc $b9c9			bcc 	_THFindLoop
.d9d5	b9d5	c9 41		cmp #$41			cmp 	#"A"
.d9d7	b9d7	90 04		bcc $b9dd			bcc 	_THFoundEnd
.d9d9	b9d9	c9 47		cmp #$47			cmp 	#"F"+1
.d9db	b9db	90 ec		bcc $b9c9			bcc 	_THFindLoop
.d9dd	b9dd					_THFoundEnd:
.d9dd	b9dd	7a		ply				ply 								; restore start
.d9de	b9de	20 a2 b9	jsr $b9a2			jsr 	TOKWriteBlockXY 			; output the block
.d9e1	b9e1	60		rts				rts
.d9e2	b9e2					TOKCalculateHash:
.d9e2	b9e2	da		phx				phx
.d9e3	b9e3	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9e6	b9e6	a9 00		lda #$00			lda 	#0
.d9e8	b9e8					_TCHLoop:
.d9e8	b9e8	18		clc				clc
.d9e9	b9e9	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9ec	b9ec	e8		inx				inx
.d9ed	b9ed	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9f0	b9f0	d0 f6		bne $b9e8			bne 	_TCHLoop
.d9f2	b9f2	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9f5	b9f5	fa		plx				plx
.d9f6	b9f6	60		rts				rts
.d9f7	b9f7					LCLFixLineBufferCase:
.d9f7	b9f7	a2 00		ldx #$00			ldx 	#0
.d9f9	b9f9					_FLBCLoop:
.d9f9	b9f9	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9fc	b9fc	f0 22		beq $ba20			beq 	_FLBCExit 					; end of string.
.d9fe	b9fe	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.da00	ba00	f0 11		beq $ba13			beq 	_FLBCInQuotes
.da02	ba02	e8		inx				inx
.da03	ba03	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.da05	ba05	90 f2		bcc $b9f9			bcc 	_FLBCLoop
.da07	ba07	c9 7b		cmp #$7b			cmp 	#'z'+1
.da09	ba09	b0 ee		bcs $b9f9			bcs 	_FLBCLoop
.da0b	ba0b	38		sec				sec 								; make U/C
.da0c	ba0c	e9 20		sbc #$20			sbc 	#32
.da0e	ba0e	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da11	ba11	80 e6		bra $b9f9			bra 	_FLBCLoop
.da13	ba13					_FLBCInQuotes:
.da13	ba13	e8		inx				inx 								; advance
.da14	ba14	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da17	ba17	f0 07		beq $ba20			beq 	_FLBCExit 					; exit on EOS
.da19	ba19	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da1b	ba1b	d0 f6		bne $ba13			bne 	_FLBCInQuotes
.da1d	ba1d	e8		inx				inx 								; skip over it
.da1e	ba1e	80 d9		bra $b9f9			bra 	_FLBCLoop
.da20	ba20					_FLBCExit:
.da20	ba20	60		rts				rts
.da21	ba21					TOKExtractLineNumber:
.da21	ba21	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da24	ba24	48		pha				pha
.da25	ba25	ad 27 04	lda $0427			lda 	tokenLineNumber
.da28	ba28	48		pha				pha
.da29	ba29	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 2
.da2c	ba2c	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 4
.da2f	ba2f	18		clc				clc 								; add stacked value
.da30	ba30	68		pla				pla
.da31	ba31	6d 27 04	adc $0427			adc 	tokenLineNumber
.da34	ba34	8d 27 04	sta $0427			sta 	tokenLineNumber
.da37	ba37	68		pla				pla
.da38	ba38	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da3b	ba3b	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da3e	ba3e	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 10
.da41	ba41	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da44	ba44	e8		inx				inx
.da45	ba45	29 0f		and #$0f			and 	#15 						; add to line #
.da47	ba47	18		clc				clc
.da48	ba48	6d 27 04	adc $0427			adc 	tokenLineNumber
.da4b	ba4b	8d 27 04	sta $0427			sta 	tokenLineNumber
.da4e	ba4e	90 03		bcc $ba53			bcc 	_TLENNoCarry
.da50	ba50	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da53	ba53					_TLENNoCarry:
.da53	ba53	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da56	ba56	c9 30		cmp #$30			cmp 	#'0'
.da58	ba58	90 04		bcc $ba5e			bcc 	_TLENExit
.da5a	ba5a	c9 3a		cmp #$3a			cmp 	#'9'+1
.da5c	ba5c	90 c3		bcc $ba21			bcc 	TOKExtractLineNumber
.da5e	ba5e					_TLENExit:
.da5e	ba5e	60		rts				rts
.da5f	ba5f					_LCLNTimes2:
.da5f	ba5f	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da62	ba62	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da65	ba65	60		rts				rts
.da66	ba66					TOKWriteByte:
.da66	ba66	da		phx				phx
.da67	ba67	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da6a	ba6a	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da6d	ba6d	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da70	ba70	fa		plx				plx
.da71	ba71	60		rts				rts
.da72	ba72					TOKCheckCreateVariableRecord:
.da72	ba72	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da74	ba74	85 36		sta $36				sta 	0+zTemp0
.da76	ba76	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da78	ba78	85 37		sta $37				sta 	1+zTemp0
.da7a	ba7a					_CCVSearch:
.da7a	ba7a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da7c	ba7c	f0 2c		beq $baaa			beq 	_CCVFail
.da7e	ba7e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da80	ba80	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da82	ba82	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da85	ba85	d0 16		bne $ba9d			bne 	_CCVNext
.da87	ba87	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da89	ba89	ae 00 04	ldx $0400			ldx 	identStart
.da8c	ba8c					_CCVCompare:
.da8c	ba8c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da8f	ba8f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da91	ba91	e8		inx				inx 								; advance pointers
.da92	ba92	c8		iny				iny
.da93	ba93	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da94	ba94	d0 07		bne $ba9d			bne 	_CCVNext  					; didn't match go to next.
.da96	ba96	90 f4		bcc $ba8c			bcc 	_CCVCompare 				; not finished yet.
.da98	ba98	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da9b	ba9b	f0 41		beq $bade			beq 	_CCVFound 					; yes, we were successful
.da9d	ba9d					_CCVNext:
.da9d	ba9d	18		clc				clc 								; go to next record.
.da9e	ba9e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.daa0	baa0	65 36		adc $36				adc 	zTemp0
.daa2	baa2	85 36		sta $36				sta 	zTemp0
.daa4	baa4	90 d4		bcc $ba7a			bcc 	_CCVSearch
.daa6	baa6	e6 37		inc $37				inc 	zTemp0+1
.daa8	baa8	80 d0		bra $ba7a			bra 	_CCVSearch
.daaa	baaa					_CCVFail:
.daaa	baaa	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.daac	baac	ad 03 04	lda $0403			lda 	identHash
.daaf	baaf	91 36		sta ($36),y			sta 	(zTemp0),y
.dab1	bab1	c8		iny				iny 								; offset 2 is the type byte
.dab2	bab2	ad 04 04	lda $0404			lda 	identTypeByte
.dab5	bab5	91 36		sta ($36),y			sta 	(zTemp0),y
.dab7	bab7	c8		iny				iny
.dab8	bab8					_CCVData:
.dab8	bab8	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	c8		iny				iny
.dabd	babd	c0 08		cpy #$08			cpy 	#8
.dabf	babf	90 f7		bcc $bab8			bcc 	_CCVData
.dac1	bac1	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dac4	bac4					_CCVCopyName:
.dac4	bac4	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.dac7	bac7	91 36		sta ($36),y			sta 	(zTemp0),y
.dac9	bac9	e8		inx				inx
.daca	baca	c8		iny				iny
.dacb	bacb	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dace	bace	d0 f4		bne $bac4			bne 	_CCVCopyName
.dad0	bad0	98		tya				tya 								; patch offset
.dad1	bad1	92 36		sta ($36)			sta 	(zTemp0)
.dad3	bad3	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dad5	bad5	91 36		sta ($36),y			sta 	(zTemp0),y
.dad7	bad7	88		dey				dey
.dad8	bad8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dada	bada	09 80		ora #$80			ora 	#$80
.dadc	badc	91 36		sta ($36),y			sta 	(zTemp0),y
.dade	bade					_CCVFound:
.dade	bade	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dae0	bae0	38		sec				sec
.dae1	bae1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dae3	bae3	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dae5	bae5	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.dae8	bae8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.daea	baea	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.daed	baed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.daee	baee					SNDCheckChannel:
.daee	baee	aa		tax				tax
.daef	baef	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; currently playing a note
.daf2	baf2	d0 38		bne $bb2c			bne 	_SNDCCExit
.daf4	baf4	da		phx				phx 								; save current channel
.daf5	baf5	8a		txa				txa 								; put in A
.daf6	baf6	20 72 bb	jsr $bb72			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.daf9	baf9	68		pla				pla 								; channel # in A
.dafa	bafa	90 30		bcc $bb2c			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dafc	bafc	a8		tay				tay 								; Y is the channel #
.dafd	bafd	bd 44 08	lda $0844,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.db00	bb00	99 43 09	sta $0943,y			sta 	SNDPitchLow,y
.db03	bb03	bd 45 08	lda $0845,x			lda 	SNDQueue+2,x
.db06	bb06	99 47 09	sta $0947,y			sta 	SNDPitchHigh,y
.db09	bb09	bd 46 08	lda $0846,x			lda 	SNDQueue+3,x
.db0c	bb0c	99 4b 09	sta $094b,y			sta 	SNDVolume,y
.db0f	bb0f	bd 47 08	lda $0847,x			lda 	SNDQueue+4,x
.db12	bb12	99 4f 09	sta $094f,y			sta 	SNDTimeLeft,y
.db15	bb15	bd 48 08	lda $0848,x			lda 	SNDQueue+5,x
.db18	bb18	99 53 09	sta $0953,y			sta 	SNDAdjustLow,y
.db1b	bb1b	bd 49 08	lda $0849,x			lda 	SNDQueue+6,x
.db1e	bb1e	99 57 09	sta $0957,y			sta 	SNDAdjustHigh,y
.db21	bb21	5a		phy				phy 								; save channel #
.db22	bb22	20 8c bb	jsr $bb8c			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db25	bb25	ce 42 08	dec $0842			dec 	SNDLength 					; reduce the queue length.
.db28	bb28	68		pla				pla
.db29	bb29	20 2d bb	jsr $bb2d			jsr 	SNDUpdateNote 				; update channel A
.db2c	bb2c					_SNDCCExit:
.db2c	bb2c	60		rts				rts
.db2d	bb2d					SNDUpdateNote:
.db2d	bb2d	aa		tax				tax 								; so we can access records
.db2e	bb2e	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db2f	bb2f	0a		asl a				asl 	a
.db30	bb30	0a		asl a				asl 	a
.db31	bb31	0a		asl a				asl 	a
.db32	bb32	0a		asl a				asl 	a
.db33	bb33	8d 41 08	sta $0841			sta 	SNDChannelBits
.db36	bb36	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; are we silent
.db39	bb39	f0 2e		beq $bb69			beq 	_SNDUNIsSilent
.db3b	bb3b	ad 41 08	lda $0841			lda 	SNDChannelBits 				; push channel bits on stack
.db3e	bb3e	48		pha				pha
.db3f	bb3f	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db42	bb42	29 0f		and #$0f			and 	#$0F
.db44	bb44	0d 41 08	ora $0841			ora 	SNDChannelBits 				; set channel bits
.db47	bb47	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db49	bb49	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.db4c	bb4c	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db4f	bb4f	8d 41 08	sta $0841			sta 	SNDChannelBits
.db52	bb52	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.db55	bb55	4e 41 08	lsr $0841			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db58	bb58	6a		ror a				ror 	a
.db59	bb59	4e 41 08	lsr $0841			lsr 	SNDChannelBits
.db5c	bb5c	6a		ror a				ror 	a
.db5d	bb5d	4a		lsr a				lsr 	a 							; put in bits 0-5
.db5e	bb5e	4a		lsr a				lsr 	a
.db5f	bb5f	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts 				; write as rest of pitch register
.db62	bb62	68		pla				pla
.db63	bb63	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db65	bb65	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.db68	bb68	60		rts				rts
.db69	bb69					_SNDUNIsSilent:
.db69	bb69	ad 41 08	lda $0841			lda 	SNDChannelBits 				; channel bits
.db6c	bb6c	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db6e	bb6e	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts 				; write to the ports
.db71	bb71	60		rts				rts
.db72	bb72					SNDFindNextNoteForA:
.db72	bb72	ac 42 08	ldy $0842			ldy 	SNDLength 					; queue size into Y
.db75	bb75	f0 13		beq $bb8a			beq 	_SNDFNNFail 				; queue empty.
.db77	bb77	a2 00		ldx #$00			ldx 	#0
.db79	bb79					_SNDFNNSearch:
.db79	bb79	dd 43 08	cmp $0843,x			cmp 	SNDQueue,x 					; does it match the channel
.db7c	bb7c	38		sec				sec
.db7d	bb7d	f0 0c		beq $bb8b			beq 	_SNDFNNExit 				; if so exit with CS.
.db7f	bb7f	e8		inx				inx 								; next queue slot.
.db80	bb80	e8		inx				inx
.db81	bb81	e8		inx				inx
.db82	bb82	e8		inx				inx
.db83	bb83	e8		inx				inx
.db84	bb84	e8		inx				inx
.db85	bb85	e8		inx				inx
.db86	bb86	e8		inx				inx
.db87	bb87	88		dey				dey 								; done the whole queue
.db88	bb88	d0 ef		bne $bb79			bne 	_SNDFNNSearch 				; no, go back.
.db8a	bb8a					_SNDFNNFail:
.db8a	bb8a	18		clc				clc
.db8b	bb8b					_SNDFNNExit:
.db8b	bb8b	60		rts				rts
.db8c	bb8c					SNDDeleteXFromQueue:
.db8c	bb8c	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db8e	bb8e	f0 09		beq $bb99			beq 	_SNDDXExit
.db90	bb90	bd 4b 08	lda $084b,x			lda 	SNDQueue+8,x
.db93	bb93	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.db96	bb96	e8		inx				inx
.db97	bb97	80 f3		bra $bb8c			bra 	SNDDeleteXFromQueue
.db99	bb99					_SNDDXExit:
.db99	bb99	60		rts				rts
.0841						SNDChannelBits:
>0841								.fill 	1
.db9a	bb9a					SNDQueueRequest:
.db9a	bb9a	86 36		stx $36				stx 	zTemp0						; save queue address
.db9c	bb9c	84 37		sty $37				sty 	zTemp0+1
.db9e	bb9e	ae 42 08	ldx $0842			ldx 	SNDLength 					; queue is full, can't take any more.
.dba1	bba1	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dba3	bba3	f0 21		beq $bbc6			beq 	_SNDQRExit
.dba5	bba5	29 03		and #$03			and 	#3	 						; channel # and push on stack
.dba7	bba7	48		pha				pha
.dba8	bba8	8a		txa				txa  								; get offset in queue buffer/
.dba9	bba9	0a		asl a				asl 	a
.dbaa	bbaa	0a		asl a				asl 	a
.dbab	bbab	0a		asl a				asl 	a
.dbac	bbac	aa		tax				tax
.dbad	bbad	68		pla				pla 								; get back and push again
.dbae	bbae	48		pha				pha
.dbaf	bbaf	9d 43 08	sta $0843,x			sta 	SNDQueue+0,x 				; save the channel #
.dbb2	bbb2	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dbb4	bbb4					_SNDQCopy:
.dbb4	bbb4	b1 36		lda ($36),y			lda 	(zTemp0),y
.dbb6	bbb6	e8		inx				inx
.dbb7	bbb7	c8		iny				iny
.dbb8	bbb8	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.dbbb	bbbb	c0 06		cpy #$06			cpy 	#6
.dbbd	bbbd	d0 f5		bne $bbb4			bne 	_SNDQCopy
.dbbf	bbbf	ee 42 08	inc $0842			inc 	SNDLength 					; bump queue length.
.dbc2	bbc2	68		pla				pla 								; get channel # back
.dbc3	bbc3	20 ee ba	jsr $baee			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbc6	bbc6					_SNDQRExit:
.dbc6	bbc6	60		rts				rts
.dbc7	bbc7					SNDSilenceChannel:
.dbc7	bbc7	aa		tax				tax 								; zero time left.
.dbc8	bbc8	9e 4f 09	stz $094f,x			stz 	SNDTimeLeft,x
.dbcb	bbcb	0a		asl a				asl 	a 							; shift into position
.dbcc	bbcc	0a		asl a				asl 	a
.dbcd	bbcd	0a		asl a				asl 	a
.dbce	bbce	0a		asl a				asl 	a
.dbcf	bbcf	0a		asl a				asl 	a
.dbd0	bbd0	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbd2	bbd2	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.dbd5	bbd5	60		rts				rts
.dbd6	bbd6					SNDWritePorts:
.dbd6	bbd6	da		phx				phx 								; save X
.dbd7	bbd7	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbd9	bbd9	64 01		stz $01				stz 	1 							; access I/O page 0
.dbdb	bbdb	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbde	bbde	8d 10 d6	sta $d610			sta 	$D610
.dbe1	bbe1	86 01		stx $01				stx 	1 							; restore I/O
.dbe3	bbe3	fa		plx				plx 								; restore X
.dbe4	bbe4	60		rts				rts
.dbe5	bbe5					Export_SNDCommand:
.dbe5	bbe5	da		phx				phx 								; save XY
.dbe6	bbe6	5a		phy				phy
.dbe7	bbe7	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbe9	bbe9	f0 1d		beq $bc08			beq 	_SNDInitialise
.dbeb	bbeb	90 28		bcc $bc15			bcc 	_SNDExit
.dbed	bbed	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbef	bbef	f0 17		beq $bc08			beq 	_SNDSilence
.dbf1	bbf1	b0 22		bcs $bc15			bcs 	_SNDExit
.dbf3	bbf3	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbf5	bbf5	b0 09		bcs $bc00			bcs 	_SNDQueryPlay
.dbf7	bbf7	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbf9	bbf9	b0 1a		bcs $bc15			bcs 	_SNDExit
.dbfb	bbfb	20 9a bb	jsr $bb9a			jsr 	SNDQueueRequest
.dbfe	bbfe	80 15		bra $bc15			bra 	_SNDExit
.dc00	bc00					_SNDQueryPlay:
.dc00	bc00	29 03		and #$03			and 	#3 							; get channel #
.dc02	bc02	aa		tax				tax
.dc03	bc03	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dc06	bc06	80 0d		bra $bc15			bra 	_SNDExit
.dc08	bc08					_SNDInitialise:
.dc08	bc08					_SNDSilence:
.dc08	bc08	9c 42 08	stz $0842			stz 	SNDLength 					; empty the queue.
.dc0b	bc0b	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc0d	bc0d					_SNDSilenceLoop:
.dc0d	bc0d	48		pha				pha
.dc0e	bc0e	20 c7 bb	jsr $bbc7			jsr 	SNDSilenceChannel
.dc11	bc11	68		pla				pla
.dc12	bc12	3a		dec a				dec 	a
.dc13	bc13	10 f8		bpl $bc0d			bpl 	_SNDSilenceLoop
.dc15	bc15					_SNDExit:
.dc15	bc15	7a		ply				ply
.dc16	bc16	fa		plx				plx
.dc17	bc17	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0842						SNDLength:
>0842								.fill 	1
.0843						SNDQueue:
>0843								.fill 	SNDQueueSize * 8
.0943						SNDPitchLow:
>0943								.fill 	4
.0947						SNDPitchHigh:
>0947								.fill 	4
.094b						SNDVolume:
>094b								.fill 	4
.094f						SNDTimeLeft:
>094f								.fill 	4
.0953						SNDAdjustLow:
>0953								.fill 	4
.0957						SNDAdjustHigh:
>0957								.fill 	4
.dc18	bc18					Export_SNDUpdate:
.dc18	bc18					PagedSNDUpdate:
.dc18	bc18	ad 4f 09	lda $094f			lda 	SNDTimeLeft+0 				; look at time remaining
.dc1b	bc1b	f0 05		beq $bc22			beq 	_SNDUNot0 					; not playing
.dc1d	bc1d	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc1f	bc1f	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel 			; update it.
.dc22	bc22					_SNDUNot0:
.dc22	bc22	ad 50 09	lda $0950			lda 	SNDTimeLeft+1
.dc25	bc25	f0 05		beq $bc2c			beq 	_SNDUNot1
.dc27	bc27	a2 01		ldx #$01			ldx 	#1
.dc29	bc29	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc2c	bc2c					_SNDUNot1:
.dc2c	bc2c	ad 51 09	lda $0951			lda 	SNDTimeLeft+2
.dc2f	bc2f	f0 05		beq $bc36			beq 	_SNDUNot2
.dc31	bc31	a2 02		ldx #$02			ldx 	#2
.dc33	bc33	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc36	bc36					_SNDUNot2:
.dc36	bc36	ad 52 09	lda $0952			lda 	SNDTimeLeft+3
.dc39	bc39	f0 05		beq $bc40			beq 	_SNDUNot3
.dc3b	bc3b	a2 03		ldx #$03			ldx 	#3
.dc3d	bc3d	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc40	bc40					_SNDUNot3:
.dc40	bc40	60		rts				rts
.dc41	bc41					SNDUpdateChannel:
.dc41	bc41	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc43	bc43	f0 2c		beq $bc71			beq 	_SNDUCExit
.dc45	bc45	3a		dec a				dec 	a 							; decrement and update timer
.dc46	bc46	9d 4f 09	sta $094f,x			sta 	SNDTimeLeft,x
.dc49	bc49	f0 1d		beq $bc68			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc4b	bc4b	bd 53 09	lda $0953,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc4e	bc4e	1d 57 09	ora $0957,x			ora 	SNDAdjustHigh,x
.dc51	bc51	f0 1e		beq $bc71			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc53	bc53	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc54	bc54	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.dc57	bc57	7d 53 09	adc $0953,x			adc 	SNDAdjustLow,x
.dc5a	bc5a	9d 43 09	sta $0943,x			sta 	SNDPitchLow,x
.dc5d	bc5d	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x
.dc60	bc60	7d 57 09	adc $0957,x			adc 	SNDAdjustHigh,x
.dc63	bc63	29 03		and #$03			and 	#3
.dc65	bc65	9d 47 09	sta $0947,x			sta 	SNDPitchHigh,x
.dc68	bc68					_SNDUCUpdate:
.dc68	bc68	8a		txa				txa 								; which channel.
.dc69	bc69	48		pha				pha
.dc6a	bc6a	20 2d bb	jsr $bb2d			jsr 	SNDUpdateNote 				; update the current note
.dc6d	bc6d	68		pla				pla
.dc6e	bc6e	20 ee ba	jsr $baee			jsr 	SNDCheckChannel 			; more to do ?
.dc71	bc71					_SNDUCExit:
.dc71	bc71	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
